
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000148dc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000aa18  08014b80  08014b80  00024b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f598  0801f598  0004f000  2**0
                  CONTENTS
  4 .ARM          00000008  0801f598  0801f598  0002f598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f5a0  0801f5a0  0004f000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f5a0  0801f5a0  0002f5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f5a4  0801f5a4  0002f5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000728  24000000  0801f5a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e7c8  24000740  0801fcd0  00030740  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  2400ef08  0801fcd0  0003ef08  2**0
                  ALLOC
 11 .dtcm         0000f000  20000000  20000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  0004f000  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004b055  00000000  00000000  0004f02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008bd8  00000000  00000000  0009a083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000305da  00000000  00000000  000a2c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c60  00000000  00000000  000d3238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000050d0  00000000  00000000  000d4e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00009abf  00000000  00000000  000d9f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00045bcc  00000000  00000000  000e3a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00188047  00000000  00000000  001295f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000c5  00000000  00000000  002b163a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007378  00000000  00000000  002b1700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000740 	.word	0x24000740
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014b64 	.word	0x08014b64

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000744 	.word	0x24000744
 80002dc:	08014b64 	.word	0x08014b64

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <loadWPM>:
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
	}
}

void loadWPM (int wpm) // Calculate new time constants based on wpm value
{
 8000694:	b510      	push	{r4, lr}

	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 8000696:	4c05      	ldr	r4, [pc, #20]	; (80006ac <loadWPM+0x18>)
{
 8000698:	4602      	mov	r2, r0
	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 800069a:	17c3      	asrs	r3, r0, #31
 800069c:	2100      	movs	r1, #0
 800069e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80006a2:	f7ff fe75 	bl	8000390 <__aeabi_uldivmod>
 80006a6:	6020      	str	r0, [r4, #0]

}
 80006a8:	bd10      	pop	{r4, pc}
 80006aa:	bf00      	nop
 80006ac:	24009658 	.word	0x24009658

080006b0 <HAL_TIM_PeriodElapsedCallback>:
		}
	}
}

HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80006b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

void DoKeyer(void)
{

#ifdef SEMI_QSK
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 80006b4:	4c9a      	ldr	r4, [pc, #616]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80006b6:	6823      	ldr	r3, [r4, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d12f      	bne.n	800071c <HAL_TIM_PeriodElapsedCallback+0x6c>
			semi_qsk_timeout = 0;
						pk = Saved_pk;
		}  // delayed QSK RX
#endif

	if(keyer_mode != SINGLE){  // check DIT/DAH keys for CW
 80006bc:	4a99      	ldr	r2, [pc, #612]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	2a02      	cmp	r2, #2
 80006c2:	d029      	beq.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>

		switch(keyerState){ // Basic Iambic Keyer, keyerControl contains processing flags and keyer mode bits, Supports Iambic A and B, State machine based, uses calls to millis() for timing.
 80006c4:	4d98      	ldr	r5, [pc, #608]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80006c6:	782a      	ldrb	r2, [r5, #0]
 80006c8:	2a05      	cmp	r2, #5
 80006ca:	d825      	bhi.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
 80006cc:	e8df f012 	tbh	[pc, r2, lsl #1]
 80006d0:	009f0070 	.word	0x009f0070
 80006d4:	000600d9 	.word	0x000600d9
 80006d8:	004000ad 	.word	0x004000ad
			} else {
				keyerState = IDLE;
			}
			break;
		case KEYED_PREP: // Assert key down, start timing, state shared for dit or dah
			Key_state = HIGH;
 80006dc:	4a93      	ldr	r2, [pc, #588]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80006de:	2001      	movs	r0, #1
 80006e0:	6010      	str	r0, [r2, #0]
	if(!(semi_qsk_timeout))
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	f000 80e2 	beq.w	80008ac <HAL_TIM_PeriodElapsedCallback+0x1fc>
 80006e8:	4f91      	ldr	r7, [pc, #580]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x280>)
	tx = tx_enable;
 80006ea:	2601      	movs	r6, #1
		semi_qsk_timeout = 0;
 80006ec:	2300      	movs	r3, #0
			CarrierEnable(1);
 80006ee:	4630      	mov	r0, r6
		semi_qsk_timeout = 0;
 80006f0:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 80006f2:	703e      	strb	r6, [r7, #0]
			CarrierEnable(1);
 80006f4:	f004 fcec 	bl	80050d0 <CarrierEnable>
		TXSwitch(1);
 80006f8:	4630      	mov	r0, r6
			switch_rxtx(Key_state);
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
			keyerState = KEYED;                 // next state
 80006fa:	2404      	movs	r4, #4
		TXSwitch(1);
 80006fc:	f004 fc84 	bl	8005008 <TXSwitch>
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8000700:	f005 ff76 	bl	80065f0 <HAL_GetTick>
 8000704:	498b      	ldr	r1, [pc, #556]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 8000706:	4a8c      	ldr	r2, [pc, #560]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8000708:	680b      	ldr	r3, [r1, #0]
			keyerState = KEYED;                 // next state
 800070a:	702c      	strb	r4, [r5, #0]
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 800070c:	4418      	add	r0, r3
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 800070e:	7813      	ldrb	r3, [r2, #0]
 8000710:	f023 0303 	bic.w	r3, r3, #3
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8000714:	6008      	str	r0, [r1, #0]
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 8000716:	7013      	strb	r3, [r2, #0]
}
 8000718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 800071c:	f005 ff68 	bl	80065f0 <HAL_GetTick>
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8000726:	4290      	cmp	r0, r2
 8000728:	f200 80b9 	bhi.w	800089e <HAL_TIM_PeriodElapsedCallback+0x1ee>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0c5      	beq.n	80006bc <HAL_TIM_PeriodElapsedCallback+0xc>
 8000730:	f005 ff5e 	bl	80065f0 <HAL_GetTick>
 8000734:	6823      	ldr	r3, [r4, #0]
 8000736:	4298      	cmp	r0, r3
 8000738:	d9c0      	bls.n	80006bc <HAL_TIM_PeriodElapsedCallback+0xc>
						pk = Saved_pk;
 800073a:	4f80      	ldr	r7, [pc, #512]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x28c>)
			TXSwitch(0);
 800073c:	2000      	movs	r0, #0
 800073e:	f004 fc63 	bl	8005008 <TXSwitch>
						pk = Saved_pk;
 8000742:	4e7f      	ldr	r6, [pc, #508]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x290>)
			semi_qsk_timeout = 0;
 8000744:	2200      	movs	r2, #0
						pk = Saved_pk;
 8000746:	6839      	ldr	r1, [r7, #0]
 8000748:	4613      	mov	r3, r2
			semi_qsk_timeout = 0;
 800074a:	6022      	str	r2, [r4, #0]
						pk = Saved_pk;
 800074c:	6031      	str	r1, [r6, #0]
 800074e:	e7b5      	b.n	80006bc <HAL_TIM_PeriodElapsedCallback+0xc>
	if(KEYER_DASH) {
 8000750:	2140      	movs	r1, #64	; 0x40
 8000752:	487c      	ldr	r0, [pc, #496]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000754:	f008 fed6 	bl	8009504 <HAL_GPIO_ReadPin>
 8000758:	b948      	cbnz	r0, 800076e <HAL_TIM_PeriodElapsedCallback+0xbe>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 800075a:	4b7b      	ldr	r3, [pc, #492]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800075c:	4a76      	ldr	r2, [pc, #472]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	7811      	ldrb	r1, [r2, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	bf14      	ite	ne
 8000766:	2302      	movne	r3, #2
 8000768:	2301      	moveq	r3, #1
 800076a:	430b      	orrs	r3, r1
 800076c:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 800076e:	2180      	movs	r1, #128	; 0x80
 8000770:	4874      	ldr	r0, [pc, #464]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000772:	f008 fec7 	bl	8009504 <HAL_GPIO_ReadPin>
 8000776:	b948      	cbnz	r0, 800078c <HAL_TIM_PeriodElapsedCallback+0xdc>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 8000778:	4b73      	ldr	r3, [pc, #460]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800077a:	4a6f      	ldr	r2, [pc, #444]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	7811      	ldrb	r1, [r2, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	bf14      	ite	ne
 8000784:	2301      	movne	r3, #1
 8000786:	2302      	moveq	r3, #2
 8000788:	430b      	orrs	r3, r1
 800078a:	7013      	strb	r3, [r2, #0]
			}
			break;
		case INTER_ELEMENT:
			// Insert time between dits/dahs
			update_PaddleLatch();               // latch paddle state
			if(HAL_GetTick() > ktimer) {            // are we at end of inter-space ?
 800078c:	f005 ff30 	bl	80065f0 <HAL_GetTick>
 8000790:	4b68      	ldr	r3, [pc, #416]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4298      	cmp	r0, r3
 8000796:	d9bf      	bls.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
				if(keyerControl & DIT_PROC) {             // was it a dit or dah ?
 8000798:	4a67      	ldr	r2, [pc, #412]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800079a:	7813      	ldrb	r3, [r2, #0]
 800079c:	f013 0104 	ands.w	r1, r3, #4
 80007a0:	f000 80b9 	beq.w	8000916 <HAL_TIM_PeriodElapsedCallback+0x266>
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 80007a4:	f023 0305 	bic.w	r3, r3, #5
					keyerState = CHK_DAH;                  // dit done, check for dah
 80007a8:	2102      	movs	r1, #2
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 80007aa:	7013      	strb	r3, [r2, #0]
					keyerState = CHK_DAH;                  // dit done, check for dah
 80007ac:	7029      	strb	r1, [r5, #0]
 80007ae:	e7b3      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if((KEYER_DASH) ||
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	4864      	ldr	r0, [pc, #400]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007b4:	f008 fea6 	bl	8009504 <HAL_GPIO_ReadPin>
 80007b8:	b140      	cbz	r0, 80007cc <HAL_TIM_PeriodElapsedCallback+0x11c>
					(KEYER_DOT) ||
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	4861      	ldr	r0, [pc, #388]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007be:	f008 fea1 	bl	8009504 <HAL_GPIO_ReadPin>
			if((KEYER_DASH) ||
 80007c2:	b118      	cbz	r0, 80007cc <HAL_TIM_PeriodElapsedCallback+0x11c>
					(keyerControl & 0x03))
 80007c4:	4b5c      	ldr	r3, [pc, #368]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
					(KEYER_DOT) ||
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	0798      	lsls	r0, r3, #30
 80007ca:	d0a5      	beq.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
	if(KEYER_DASH) {
 80007cc:	2140      	movs	r1, #64	; 0x40
 80007ce:	485d      	ldr	r0, [pc, #372]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007d0:	f008 fe98 	bl	8009504 <HAL_GPIO_ReadPin>
 80007d4:	b948      	cbnz	r0, 80007ea <HAL_TIM_PeriodElapsedCallback+0x13a>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 80007d6:	4b5c      	ldr	r3, [pc, #368]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80007d8:	4a57      	ldr	r2, [pc, #348]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	7811      	ldrb	r1, [r2, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf14      	ite	ne
 80007e2:	2302      	movne	r3, #2
 80007e4:	2301      	moveq	r3, #1
 80007e6:	430b      	orrs	r3, r1
 80007e8:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	4855      	ldr	r0, [pc, #340]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007ee:	f008 fe89 	bl	8009504 <HAL_GPIO_ReadPin>
 80007f2:	b948      	cbnz	r0, 8000808 <HAL_TIM_PeriodElapsedCallback+0x158>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 80007f4:	4b54      	ldr	r3, [pc, #336]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80007f6:	4a50      	ldr	r2, [pc, #320]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	7811      	ldrb	r1, [r2, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	bf14      	ite	ne
 8000800:	2301      	movne	r3, #1
 8000802:	2302      	moveq	r3, #2
 8000804:	430b      	orrs	r3, r1
 8000806:	7013      	strb	r3, [r2, #0]
				keyerState = CHK_DIT;
 8000808:	2301      	movs	r3, #1
 800080a:	702b      	strb	r3, [r5, #0]
 800080c:	e784      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(keyerControl & DIT_L) {
 800080e:	4a4a      	ldr	r2, [pc, #296]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000810:	7813      	ldrb	r3, [r2, #0]
 8000812:	07d9      	lsls	r1, r3, #31
 8000814:	d55e      	bpl.n	80008d4 <HAL_TIM_PeriodElapsedCallback+0x224>
				keyerControl |= DIT_PROC;
 8000816:	f043 0304 	orr.w	r3, r3, #4
				ktimer = ditTime;
 800081a:	484c      	ldr	r0, [pc, #304]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800081c:	4945      	ldr	r1, [pc, #276]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800081e:	6800      	ldr	r0, [r0, #0]
				keyerControl |= DIT_PROC;
 8000820:	7013      	strb	r3, [r2, #0]
				keyerState = KEYED_PREP;
 8000822:	2303      	movs	r3, #3
				ktimer = ditTime;
 8000824:	6008      	str	r0, [r1, #0]
				keyerState = KEYED_PREP;
 8000826:	702b      	strb	r3, [r5, #0]
 8000828:	e776      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(HAL_GetTick() > ktimer) {            // are we at end of key down ?
 800082a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8000934 <HAL_TIM_PeriodElapsedCallback+0x284>
 800082e:	f005 fedf 	bl	80065f0 <HAL_GetTick>
 8000832:	f8d8 3000 	ldr.w	r3, [r8]
 8000836:	4298      	cmp	r0, r3
 8000838:	d84f      	bhi.n	80008da <HAL_TIM_PeriodElapsedCallback+0x22a>
			} else if(keyerControl & IAMBICB) {
 800083a:	4c3f      	ldr	r4, [pc, #252]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800083c:	7823      	ldrb	r3, [r4, #0]
 800083e:	06db      	lsls	r3, r3, #27
 8000840:	f57f af6a 	bpl.w	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
	if(KEYER_DASH) {
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	483f      	ldr	r0, [pc, #252]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000848:	f008 fe5c 	bl	8009504 <HAL_GPIO_ReadPin>
 800084c:	b940      	cbnz	r0, 8000860 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 800084e:	4b3e      	ldr	r3, [pc, #248]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000850:	7822      	ldrb	r2, [r4, #0]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf14      	ite	ne
 8000858:	2302      	movne	r3, #2
 800085a:	2301      	moveq	r3, #1
 800085c:	4313      	orrs	r3, r2
 800085e:	7023      	strb	r3, [r4, #0]
	if(KEYER_DOT) {
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	4838      	ldr	r0, [pc, #224]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000864:	f008 fe4e 	bl	8009504 <HAL_GPIO_ReadPin>
 8000868:	2800      	cmp	r0, #0
 800086a:	f47f af55 	bne.w	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 800086e:	4b36      	ldr	r3, [pc, #216]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000870:	7822      	ldrb	r2, [r4, #0]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf14      	ite	ne
 8000878:	2301      	movne	r3, #1
 800087a:	2302      	moveq	r3, #2
 800087c:	4313      	orrs	r3, r2
 800087e:	7023      	strb	r3, [r4, #0]
}
 8000880:	e74a      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(keyerControl & DAH_L) {
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	f013 0302 	ands.w	r3, r3, #2
 800088a:	d00d      	beq.n	80008a8 <HAL_TIM_PeriodElapsedCallback+0x1f8>
				ktimer = ditTime*3;
 800088c:	4b2f      	ldr	r3, [pc, #188]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x29c>)
				keyerState = KEYED_PREP;
 800088e:	2103      	movs	r1, #3
				ktimer = ditTime*3;
 8000890:	4a28      	ldr	r2, [pc, #160]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000892:	681b      	ldr	r3, [r3, #0]
				keyerState = KEYED_PREP;
 8000894:	7029      	strb	r1, [r5, #0]
				ktimer = ditTime*3;
 8000896:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800089a:	6013      	str	r3, [r2, #0]
				keyerState = KEYED_PREP;
 800089c:	e73c      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
		TXSwitch(0);
 800089e:	2000      	movs	r0, #0
 80008a0:	f004 fbb2 	bl	8005008 <TXSwitch>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 80008a4:	6823      	ldr	r3, [r4, #0]
 80008a6:	e741      	b.n	800072c <HAL_TIM_PeriodElapsedCallback+0x7c>
				keyerState = IDLE;
 80008a8:	702b      	strb	r3, [r5, #0]
 80008aa:	e735      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 80008ac:	4e28      	ldr	r6, [pc, #160]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80008ae:	4f20      	ldr	r7, [pc, #128]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80008b0:	7833      	ldrb	r3, [r6, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f43f af19 	beq.w	80006ea <HAL_TIM_PeriodElapsedCallback+0x3a>
 80008b8:	783b      	ldrb	r3, [r7, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f47f af15 	bne.w	80006ea <HAL_TIM_PeriodElapsedCallback+0x3a>
					Saved_pk = pk;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80008c6:	601a      	str	r2, [r3, #0]
			TXSwitch(1);
 80008c8:	f004 fb9e 	bl	8005008 <TXSwitch>
			HAL_Delay(txdelay);
 80008cc:	7830      	ldrb	r0, [r6, #0]
 80008ce:	f005 fe95 	bl	80065fc <HAL_Delay>
 80008d2:	e70a      	b.n	80006ea <HAL_TIM_PeriodElapsedCallback+0x3a>
				keyerState = CHK_DAH;
 80008d4:	2302      	movs	r3, #2
 80008d6:	702b      	strb	r3, [r5, #0]
 80008d8:	e71e      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
				Key_state = LOW;
 80008da:	4a14      	ldr	r2, [pc, #80]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80008dc:	2300      	movs	r3, #0
	if(!(semi_qsk_timeout))
 80008de:	6820      	ldr	r0, [r4, #0]
				Key_state = LOW;
 80008e0:	6013      	str	r3, [r2, #0]
	if(!(semi_qsk_timeout))
 80008e2:	bbb8      	cbnz	r0, 8000954 <HAL_TIM_PeriodElapsedCallback+0x2a4>
	tx = tx_enable;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x280>)
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 80008e6:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800094c <HAL_TIM_PeriodElapsedCallback+0x29c>
	tx = tx_enable;
 80008ea:	7018      	strb	r0, [r3, #0]
			CarrierEnable(0);
 80008ec:	f004 fbf0 	bl	80050d0 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 80008f0:	f005 fe7e 	bl	80065f0 <HAL_GetTick>
 80008f4:	f8d9 3000 	ldr.w	r3, [r9]
 80008f8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80008fc:	6020      	str	r0, [r4, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 80008fe:	2800      	cmp	r0, #0
 8000900:	d039      	beq.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x2c6>
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8000902:	f005 fe75 	bl	80065f0 <HAL_GetTick>
 8000906:	f8d9 3000 	ldr.w	r3, [r9]
				keyerState = INTER_ELEMENT;     // next state
 800090a:	2205      	movs	r2, #5
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 800090c:	4418      	add	r0, r3
				keyerState = INTER_ELEMENT;     // next state
 800090e:	702a      	strb	r2, [r5, #0]
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8000910:	f8c8 0000 	str.w	r0, [r8]
				keyerState = INTER_ELEMENT;     // next state
 8000914:	e700      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
				} else {
					keyerControl &= ~(DAH_L);              // clear dah latch
 8000916:	f023 0302 	bic.w	r3, r3, #2
					keyerState = IDLE;                     // go idle
 800091a:	7029      	strb	r1, [r5, #0]
					keyerControl &= ~(DAH_L);              // clear dah latch
 800091c:	7013      	strb	r3, [r2, #0]
}
 800091e:	e6fb      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
 8000920:	2400c3b4 	.word	0x2400c3b4
 8000924:	2400c22a 	.word	0x2400c22a
 8000928:	2400c229 	.word	0x2400c229
 800092c:	24006c70 	.word	0x24006c70
 8000930:	2400d3e8 	.word	0x2400d3e8
 8000934:	2400c234 	.word	0x2400c234
 8000938:	2400c228 	.word	0x2400c228
 800093c:	24007ca8 	.word	0x24007ca8
 8000940:	2400c260 	.word	0x2400c260
 8000944:	58020000 	.word	0x58020000
 8000948:	2400c230 	.word	0x2400c230
 800094c:	24009658 	.word	0x24009658
 8000950:	2400d3e9 	.word	0x2400d3e9
	tx = tx_enable;
 8000954:	4a09      	ldr	r2, [pc, #36]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
			pk = Saved_pk;
 8000956:	4f0a      	ldr	r7, [pc, #40]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000958:	4e0a      	ldr	r6, [pc, #40]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
			semi_qsk_timeout = 0;
 800095a:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 800095c:	7013      	strb	r3, [r2, #0]
			pk = Saved_pk;
 800095e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8000988 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	6033      	str	r3, [r6, #0]
			TXSwitch(0);
 8000966:	2000      	movs	r0, #0
 8000968:	f004 fb4e 	bl	8005008 <TXSwitch>
						pk = Saved_pk;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	6033      	str	r3, [r6, #0]
			semi_qsk_timeout = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	6023      	str	r3, [r4, #0]
						pk = Saved_pk;
 8000974:	e7c5      	b.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x252>
 8000976:	4e03      	ldr	r6, [pc, #12]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000978:	4f01      	ldr	r7, [pc, #4]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800097a:	e7f4      	b.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x2b6>
 800097c:	2400d3e8 	.word	0x2400d3e8
 8000980:	24007ca8 	.word	0x24007ca8
 8000984:	2400c260 	.word	0x2400c260
 8000988:	24009658 	.word	0x24009658

0800098c <cw_tx_char>:

uint8_t cw_msg_interval = 5; // number of seconds CW message is repeated
uint32_t cw_msg_event = 0;
uint8_t cw_msg_id = 0; // selected message

int cw_tx_char(char ch){    // Transmit message in CW
 800098c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sym;
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 8000990:	497d      	ldr	r1, [pc, #500]	; (8000b88 <cw_tx_char+0x1fc>)
 8000992:	237e      	movs	r3, #126	; 0x7e
 8000994:	2500      	movs	r5, #0
 8000996:	e004      	b.n	80009a2 <cw_tx_char+0x16>
 8000998:	b2d5      	uxtb	r5, r2
 800099a:	5d4b      	ldrb	r3, [r1, r5]
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 808b 	beq.w	8000ab8 <cw_tx_char+0x12c>
    if(sym == ch){  // found -> transmit CW character j
 80009a2:	4298      	cmp	r0, r3
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 80009a4:	f105 0201 	add.w	r2, r5, #1
    if(sym == ch){  // found -> transmit CW character j
 80009a8:	d1f6      	bne.n	8000998 <cw_tx_char+0xc>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 80009aa:	062b      	lsls	r3, r5, #24
 80009ac:	f100 80e6 	bmi.w	8000b7c <cw_tx_char+0x1f0>
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	461e      	mov	r6, r3
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	422b      	tst	r3, r5
 80009b8:	d0fb      	beq.n	80009b2 <cw_tx_char+0x26>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 80009ba:	08b6      	lsrs	r6, r6, #2
 80009bc:	f000 80b2 	beq.w	8000b24 <cw_tx_char+0x198>
 80009c0:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8000b9c <cw_tx_char+0x210>
 80009c4:	4f71      	ldr	r7, [pc, #452]	; (8000b8c <cw_tx_char+0x200>)
 80009c6:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8000ba4 <cw_tx_char+0x218>
					Saved_pk = pk;
 80009ca:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8000ba0 <cw_tx_char+0x214>
	if(!(semi_qsk_timeout))
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b93b      	cbnz	r3, 80009e2 <cw_tx_char+0x56>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 80009d2:	4b6f      	ldr	r3, [pc, #444]	; (8000b90 <cw_tx_char+0x204>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b123      	cbz	r3, 80009e2 <cw_tx_char+0x56>
 80009d8:	f898 3000 	ldrb.w	r3, [r8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f000 8095 	beq.w	8000b0c <cw_tx_char+0x180>
	tx = tx_enable;
 80009e2:	2401      	movs	r4, #1
		semi_qsk_timeout = 0;
 80009e4:	2300      	movs	r3, #0
			CarrierEnable(1);
 80009e6:	4620      	mov	r0, r4
		semi_qsk_timeout = 0;
 80009e8:	603b      	str	r3, [r7, #0]
	tx = tx_enable;
 80009ea:	f888 4000 	strb.w	r4, [r8]
			CarrierEnable(1);
 80009ee:	f004 fb6f 	bl	80050d0 <CarrierEnable>
		TXSwitch(1);
 80009f2:	4620      	mov	r0, r4
    if(KEYER_DASH || KEYER_DOT){
 80009f4:	4c67      	ldr	r4, [pc, #412]	; (8000b94 <cw_tx_char+0x208>)
		TXSwitch(1);
 80009f6:	f004 fb07 	bl	8005008 <TXSwitch>
      else {
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
          switch_rxtx(1);  // key-on  tx
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 80009fa:	422e      	tst	r6, r5
 80009fc:	f8d9 0000 	ldr.w	r0, [r9]
 8000a00:	bf14      	ite	ne
 8000a02:	f04f 0b03 	movne.w	fp, #3
 8000a06:	f04f 0b01 	moveq.w	fp, #1
 8000a0a:	fb00 fb0b 	mul.w	fp, r0, fp
  uint32_t event = HAL_GetTick() + ms;
 8000a0e:	f005 fdef 	bl	80065f0 <HAL_GetTick>
 8000a12:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 8000a14:	e00a      	b.n	8000a2c <cw_tx_char+0xa0>
    if(KEYER_DASH || KEYER_DOT){
 8000a16:	f008 fd75 	bl	8009504 <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	4620      	mov	r0, r4
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d04c      	beq.n	8000abe <cw_tx_char+0x132>
 8000a24:	f008 fd6e 	bl	8009504 <HAL_GPIO_ReadPin>
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d048      	beq.n	8000abe <cw_tx_char+0x132>
  while(HAL_GetTick() < event){
 8000a2c:	f005 fde0 	bl	80065f0 <HAL_GetTick>
 8000a30:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000a36:	459b      	cmp	fp, r3
 8000a38:	d8ed      	bhi.n	8000a16 <cw_tx_char+0x8a>
	if(!(semi_qsk_timeout))
 8000a3a:	6838      	ldr	r0, [r7, #0]
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	d151      	bne.n	8000ae4 <cw_tx_char+0x158>
	tx = tx_enable;
 8000a40:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 8000a44:	f004 fb44 	bl	80050d0 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8000a48:	f005 fdd2 	bl	80065f0 <HAL_GetTick>
 8000a4c:	f8d9 b000 	ldr.w	fp, [r9]
 8000a50:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
 8000a54:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d04c      	beq.n	8000af4 <cw_tx_char+0x168>
  uint32_t event = HAL_GetTick() + ms;
 8000a5a:	f005 fdc9 	bl	80065f0 <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 8000a5e:	4c4d      	ldr	r4, [pc, #308]	; (8000b94 <cw_tx_char+0x208>)
  uint32_t event = HAL_GetTick() + ms;
 8000a60:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 8000a62:	e008      	b.n	8000a76 <cw_tx_char+0xea>
    if(KEYER_DASH || KEYER_DOT){
 8000a64:	f008 fd4e 	bl	8009504 <HAL_GPIO_ReadPin>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	b3b3      	cbz	r3, 8000ade <cw_tx_char+0x152>
 8000a70:	f008 fd48 	bl	8009504 <HAL_GPIO_ReadPin>
 8000a74:	b398      	cbz	r0, 8000ade <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 8000a76:	f005 fdbb 	bl	80065f0 <HAL_GetTick>
 8000a7a:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000a80:	459b      	cmp	fp, r3
 8000a82:	d8ef      	bhi.n	8000a64 <cw_tx_char+0xd8>
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
 8000a84:	0876      	lsrs	r6, r6, #1
 8000a86:	d1a2      	bne.n	80009ce <cw_tx_char+0x42>
          switch_rxtx(0);  // key-off tx
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
        }
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 8000a88:	f8d9 6000 	ldr.w	r6, [r9]
  uint32_t event = HAL_GetTick() + ms;
 8000a8c:	f005 fdb0 	bl	80065f0 <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 8000a90:	4c40      	ldr	r4, [pc, #256]	; (8000b94 <cw_tx_char+0x208>)
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 8000a92:	0076      	lsls	r6, r6, #1
  uint32_t event = HAL_GetTick() + ms;
 8000a94:	4406      	add	r6, r0
  while(HAL_GetTick() < event){
 8000a96:	e008      	b.n	8000aaa <cw_tx_char+0x11e>
    if(KEYER_DASH || KEYER_DOT){
 8000a98:	f008 fd34 	bl	8009504 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	4620      	mov	r0, r4
 8000aa2:	b1e3      	cbz	r3, 8000ade <cw_tx_char+0x152>
 8000aa4:	f008 fd2e 	bl	8009504 <HAL_GPIO_ReadPin>
 8000aa8:	b1c8      	cbz	r0, 8000ade <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 8000aaa:	f005 fda1 	bl	80065f0 <HAL_GetTick>
 8000aae:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000ab0:	2140      	movs	r1, #64	; 0x40
 8000ab2:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000ab4:	429e      	cmp	r6, r3
 8000ab6:	d8ef      	bhi.n	8000a98 <cw_tx_char+0x10c>
      }
      break; // next character
    }
  }
  return 0;
 8000ab8:	2000      	movs	r0, #0
}
 8000aba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(!(semi_qsk_timeout))
 8000abe:	6838      	ldr	r0, [r7, #0]
 8000ac0:	2800      	cmp	r0, #0
 8000ac2:	d14a      	bne.n	8000b5a <cw_tx_char+0x1ce>
	tx = tx_enable;
 8000ac4:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 8000ac8:	f004 fb02 	bl	80050d0 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8000acc:	f005 fd90 	bl	80065f0 <HAL_GetTick>
 8000ad0:	f8d9 3000 	ldr.w	r3, [r9]
 8000ad4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8000ad8:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8000ada:	2800      	cmp	r0, #0
 8000adc:	d050      	beq.n	8000b80 <cw_tx_char+0x1f4>
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8000ade:	2001      	movs	r0, #1
}
 8000ae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tx = tx_enable;
 8000ae4:	2300      	movs	r3, #0
			pk = Saved_pk;
 8000ae6:	4a2c      	ldr	r2, [pc, #176]	; (8000b98 <cw_tx_char+0x20c>)
	tx = tx_enable;
 8000ae8:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 8000aec:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 8000aee:	f8da 3000 	ldr.w	r3, [sl]
 8000af2:	6013      	str	r3, [r2, #0]
			TXSwitch(0);
 8000af4:	2000      	movs	r0, #0
 8000af6:	f004 fa87 	bl	8005008 <TXSwitch>
			semi_qsk_timeout = 0;
 8000afa:	2300      	movs	r3, #0
						pk = Saved_pk;
 8000afc:	4a26      	ldr	r2, [pc, #152]	; (8000b98 <cw_tx_char+0x20c>)
			semi_qsk_timeout = 0;
 8000afe:	603b      	str	r3, [r7, #0]
						pk = Saved_pk;
 8000b00:	f8da 3000 	ldr.w	r3, [sl]
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
 8000b04:	f8d9 b000 	ldr.w	fp, [r9]
						pk = Saved_pk;
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	e7a6      	b.n	8000a5a <cw_tx_char+0xce>
					Saved_pk = pk;
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <cw_tx_char+0x20c>)
			TXSwitch(1);
 8000b0e:	2001      	movs	r0, #1
					Saved_pk = pk;
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f8ca 3000 	str.w	r3, [sl]
			TXSwitch(1);
 8000b16:	f004 fa77 	bl	8005008 <TXSwitch>
			HAL_Delay(txdelay);
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <cw_tx_char+0x204>)
 8000b1c:	7818      	ldrb	r0, [r3, #0]
 8000b1e:	f005 fd6d 	bl	80065fc <HAL_Delay>
 8000b22:	e75e      	b.n	80009e2 <cw_tx_char+0x56>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <cw_tx_char+0x210>)
    if(KEYER_DASH || KEYER_DOT){
 8000b26:	4c1b      	ldr	r4, [pc, #108]	; (8000b94 <cw_tx_char+0x208>)
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8000b28:	681e      	ldr	r6, [r3, #0]
  uint32_t event = HAL_GetTick() + ms;
 8000b2a:	f005 fd61 	bl	80065f0 <HAL_GetTick>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8000b2e:	00b6      	lsls	r6, r6, #2
  uint32_t event = HAL_GetTick() + ms;
 8000b30:	4406      	add	r6, r0
  while(HAL_GetTick() < event){
 8000b32:	e00a      	b.n	8000b4a <cw_tx_char+0x1be>
    if(KEYER_DASH || KEYER_DOT){
 8000b34:	f008 fce6 	bl	8009504 <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2180      	movs	r1, #128	; 0x80
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0ba      	beq.n	8000ab8 <cw_tx_char+0x12c>
 8000b42:	f008 fcdf 	bl	8009504 <HAL_GPIO_ReadPin>
 8000b46:	2800      	cmp	r0, #0
 8000b48:	d0b6      	beq.n	8000ab8 <cw_tx_char+0x12c>
  while(HAL_GetTick() < event){
 8000b4a:	f005 fd51 	bl	80065f0 <HAL_GetTick>
 8000b4e:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000b54:	429e      	cmp	r6, r3
 8000b56:	d8ed      	bhi.n	8000b34 <cw_tx_char+0x1a8>
 8000b58:	e7ae      	b.n	8000ab8 <cw_tx_char+0x12c>
	tx = tx_enable;
 8000b5a:	2300      	movs	r3, #0
			pk = Saved_pk;
 8000b5c:	4d10      	ldr	r5, [pc, #64]	; (8000ba0 <cw_tx_char+0x214>)
 8000b5e:	4c0e      	ldr	r4, [pc, #56]	; (8000b98 <cw_tx_char+0x20c>)
	tx = tx_enable;
 8000b60:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 8000b64:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 8000b66:	682b      	ldr	r3, [r5, #0]
 8000b68:	6023      	str	r3, [r4, #0]
			TXSwitch(0);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f004 fa4c 	bl	8005008 <TXSwitch>
			semi_qsk_timeout = 0;
 8000b70:	2200      	movs	r2, #0
						pk = Saved_pk;
 8000b72:	682b      	ldr	r3, [r5, #0]
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8000b74:	2001      	movs	r0, #1
			semi_qsk_timeout = 0;
 8000b76:	603a      	str	r2, [r7, #0]
						pk = Saved_pk;
 8000b78:	6023      	str	r3, [r4, #0]
 8000b7a:	e79e      	b.n	8000aba <cw_tx_char+0x12e>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 8000b7c:	2640      	movs	r6, #64	; 0x40
 8000b7e:	e71f      	b.n	80009c0 <cw_tx_char+0x34>
 8000b80:	4d07      	ldr	r5, [pc, #28]	; (8000ba0 <cw_tx_char+0x214>)
 8000b82:	4c05      	ldr	r4, [pc, #20]	; (8000b98 <cw_tx_char+0x20c>)
 8000b84:	e7f1      	b.n	8000b6a <cw_tx_char+0x1de>
 8000b86:	bf00      	nop
 8000b88:	08014ba8 	.word	0x08014ba8
 8000b8c:	2400c3b4 	.word	0x2400c3b4
 8000b90:	2400d3e9 	.word	0x2400d3e9
 8000b94:	58020000 	.word	0x58020000
 8000b98:	2400c260 	.word	0x2400c260
 8000b9c:	24009658 	.word	0x24009658
 8000ba0:	24007ca8 	.word	0x24007ca8
 8000ba4:	2400d3e8 	.word	0x2400d3e8

08000ba8 <SendCWMessage>:
  return 0;
}


void SendCWMessage(uint8_t MessageNo)
{
 8000ba8:	b538      	push	{r3, r4, r5, lr}
	cw_tx(cw_msg[MessageNo]);
 8000baa:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <SendCWMessage+0x28>)
 8000bb0:	012a      	lsls	r2, r5, #4
 8000bb2:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  for(uint8_t i = 0; msg[i]; i++){  // loop over message
 8000bb6:	5c98      	ldrb	r0, [r3, r2]
 8000bb8:	b148      	cbz	r0, 8000bce <SendCWMessage+0x26>
 8000bba:	2400      	movs	r4, #0
 8000bbc:	e002      	b.n	8000bc4 <SendCWMessage+0x1c>
 8000bbe:	b2e4      	uxtb	r4, r4
 8000bc0:	5d28      	ldrb	r0, [r5, r4]
 8000bc2:	b120      	cbz	r0, 8000bce <SendCWMessage+0x26>
 8000bc4:	3401      	adds	r4, #1
    if(cw_tx_char(msg[i])) return 1;
 8000bc6:	f7ff fee1 	bl	800098c <cw_tx_char>
 8000bca:	2800      	cmp	r0, #0
 8000bcc:	d0f7      	beq.n	8000bbe <SendCWMessage+0x16>
}
 8000bce:	bd38      	pop	{r3, r4, r5, pc}
 8000bd0:	24000000 	.word	0x24000000

08000bd4 <DecodeDCF77>:
{
	uint8_t i;
	static uint8_t MinParity, HourParity;
	MinParity = HourParity = 0;
	for (i = 21 ; i < 28; i++)
		if (DCF77Message[i])
 8000bd4:	4b52      	ldr	r3, [pc, #328]	; (8000d20 <DecodeDCF77+0x14c>)
{
 8000bd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (DCF77Message[i])
 8000bda:	7d5a      	ldrb	r2, [r3, #21]
{
 8000bdc:	b085      	sub	sp, #20
		if (DCF77Message[i])
 8000bde:	f893 a016 	ldrb.w	sl, [r3, #22]
			MinParity ^= 1;
 8000be2:	1e11      	subs	r1, r2, #0
 8000be4:	bf18      	it	ne
 8000be6:	2101      	movne	r1, #1
		if (DCF77Message[i])
 8000be8:	f1ba 0f00 	cmp.w	sl, #0
 8000bec:	d001      	beq.n	8000bf2 <DecodeDCF77+0x1e>
			MinParity ^= 1;
 8000bee:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8000bf2:	7ddf      	ldrb	r7, [r3, #23]
 8000bf4:	b10f      	cbz	r7, 8000bfa <DecodeDCF77+0x26>
			MinParity ^= 1;
 8000bf6:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8000bfa:	7e18      	ldrb	r0, [r3, #24]
 8000bfc:	9003      	str	r0, [sp, #12]
 8000bfe:	b108      	cbz	r0, 8000c04 <DecodeDCF77+0x30>
			MinParity ^= 1;
 8000c00:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8000c04:	7e5c      	ldrb	r4, [r3, #25]
 8000c06:	b10c      	cbz	r4, 8000c0c <DecodeDCF77+0x38>
			MinParity ^= 1;
 8000c08:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8000c0c:	f893 901a 	ldrb.w	r9, [r3, #26]
 8000c10:	f1b9 0f00 	cmp.w	r9, #0
 8000c14:	d001      	beq.n	8000c1a <DecodeDCF77+0x46>
			MinParity ^= 1;
 8000c16:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8000c1a:	7ede      	ldrb	r6, [r3, #27]
 8000c1c:	b10e      	cbz	r6, 8000c22 <DecodeDCF77+0x4e>
			MinParity ^= 1;
 8000c1e:	f081 0101 	eor.w	r1, r1, #1
	for (i = 21 ; i < 28; i++)
 8000c22:	4840      	ldr	r0, [pc, #256]	; (8000d24 <DecodeDCF77+0x150>)
	for (i = 29 ; i < 35; i++)
		if (DCF77Message[i])
 8000c24:	f893 801e 	ldrb.w	r8, [r3, #30]
 8000c28:	7001      	strb	r1, [r0, #0]
 8000c2a:	7f58      	ldrb	r0, [r3, #29]
			HourParity ^= 1;
 8000c2c:	f1b0 0c00 	subs.w	ip, r0, #0
 8000c30:	bf18      	it	ne
 8000c32:	f04f 0c01 	movne.w	ip, #1
		if (DCF77Message[i])
 8000c36:	f1b8 0f00 	cmp.w	r8, #0
 8000c3a:	d001      	beq.n	8000c40 <DecodeDCF77+0x6c>
			HourParity ^= 1;
 8000c3c:	f08c 0c01 	eor.w	ip, ip, #1
		if (DCF77Message[i])
 8000c40:	7fdd      	ldrb	r5, [r3, #31]
 8000c42:	9501      	str	r5, [sp, #4]
 8000c44:	b10d      	cbz	r5, 8000c4a <DecodeDCF77+0x76>
			HourParity ^= 1;
 8000c46:	f08c 0c01 	eor.w	ip, ip, #1
		if (DCF77Message[i])
 8000c4a:	f893 5020 	ldrb.w	r5, [r3, #32]
 8000c4e:	9502      	str	r5, [sp, #8]
 8000c50:	b10d      	cbz	r5, 8000c56 <DecodeDCF77+0x82>
			HourParity ^= 1;
 8000c52:	f08c 0c01 	eor.w	ip, ip, #1
		if (DCF77Message[i])
 8000c56:	f893 5021 	ldrb.w	r5, [r3, #33]	; 0x21
 8000c5a:	b10d      	cbz	r5, 8000c60 <DecodeDCF77+0x8c>
			HourParity ^= 1;
 8000c5c:	f08c 0c01 	eor.w	ip, ip, #1
		if (DCF77Message[i])
 8000c60:	f893 e022 	ldrb.w	lr, [r3, #34]	; 0x22
 8000c64:	f1be 0f00 	cmp.w	lr, #0
 8000c68:	d141      	bne.n	8000cee <DecodeDCF77+0x11a>
	for (i = 29 ; i < 35; i++)
 8000c6a:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8000d40 <DecodeDCF77+0x16c>
 8000c6e:	f88b c000 	strb.w	ip, [fp]

	if (MinParity != DCF77Message[28] && HourParity != DCF77Message[35])
 8000c72:	f893 b01c 	ldrb.w	fp, [r3, #28]
 8000c76:	458b      	cmp	fp, r1
 8000c78:	d006      	beq.n	8000c88 <DecodeDCF77+0xb4>
 8000c7a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000c7e:	4563      	cmp	r3, ip
 8000c80:	d002      	beq.n	8000c88 <DecodeDCF77+0xb4>
			SystemSeconds = 0;
			WSPRBeaconState = FIRST_FIX;
		}
		break;
	}
}
 8000c82:	b005      	add	sp, #20
 8000c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8000c88:	eb04 0449 	add.w	r4, r4, r9, lsl #1
		DCF77Hour += (DCF77Message[29+i] << i);
 8000c8c:	9b01      	ldr	r3, [sp, #4]
		DCF77Min += DCF77Message[21+i] << i;
 8000c8e:	eb02 024a 	add.w	r2, r2, sl, lsl #1
		DCF77Hour += (DCF77Message[29+i] << i);
 8000c92:	eb00 0048 	add.w	r0, r0, r8, lsl #1
		DCF77Min += DCF77Message[21+i] << i;
 8000c96:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	switch (WSPRBeaconState)
 8000c9a:	4f23      	ldr	r7, [pc, #140]	; (8000d28 <DecodeDCF77+0x154>)
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8000c9c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
		DCF77Hour += (DCF77Message[29+i] << i);
 8000ca0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		DCF77Min += DCF77Message[21+i] << i;
 8000ca4:	9b03      	ldr	r3, [sp, #12]
		DCF77Hour += 10 * (DCF77Message[33+i] << i);
 8000ca6:	eb05 054e 	add.w	r5, r5, lr, lsl #1
	switch (WSPRBeaconState)
 8000caa:	783c      	ldrb	r4, [r7, #0]
		DCF77Min += DCF77Message[21+i] << i;
 8000cac:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
		DCF77Hour += (DCF77Message[29+i] << i);
 8000cb0:	9b02      	ldr	r3, [sp, #8]
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8000cb2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
		DCF77Hour += (DCF77Message[29+i] << i);
 8000cb6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <DecodeDCF77+0x158>)
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8000cbc:	eb02 0646 	add.w	r6, r2, r6, lsl #1
		DCF77Hour += 10 * (DCF77Message[33+i] << i);
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <DecodeDCF77+0x15c>)
 8000cc2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8000cc6:	b2f6      	uxtb	r6, r6
		DCF77Hour += 10 * (DCF77Message[33+i] << i);
 8000cc8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8000ccc:	701e      	strb	r6, [r3, #0]
 8000cce:	7015      	strb	r5, [r2, #0]
	switch (WSPRBeaconState)
 8000cd0:	b184      	cbz	r4, 8000cf4 <DecodeDCF77+0x120>
 8000cd2:	2c01      	cmp	r4, #1
 8000cd4:	d1d5      	bne.n	8000c82 <DecodeDCF77+0xae>
		if (SystemMinutes == DCF77Min)
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <DecodeDCF77+0x160>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4296      	cmp	r6, r2
 8000cdc:	d013      	beq.n	8000d06 <DecodeDCF77+0x132>
			SystemSeconds = 0;
 8000cde:	4a16      	ldr	r2, [pc, #88]	; (8000d38 <DecodeDCF77+0x164>)
			SystemMinutes = DCF77Min;
 8000ce0:	601e      	str	r6, [r3, #0]
			SystemSeconds = 0;
 8000ce2:	2300      	movs	r3, #0
			WSPRBeaconState = FIRST_FIX;
 8000ce4:	703c      	strb	r4, [r7, #0]
			SystemSeconds = 0;
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	b005      	add	sp, #20
 8000cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			HourParity ^= 1;
 8000cee:	f08c 0c01 	eor.w	ip, ip, #1
 8000cf2:	e7ba      	b.n	8000c6a <DecodeDCF77+0x96>
		SystemMinutes = DCF77Min;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <DecodeDCF77+0x160>)
		SystemSeconds = 0;
 8000cf6:	4a10      	ldr	r2, [pc, #64]	; (8000d38 <DecodeDCF77+0x164>)
		SystemMinutes = DCF77Min;
 8000cf8:	601e      	str	r6, [r3, #0]
		WSPRBeaconState = FIRST_FIX;
 8000cfa:	2301      	movs	r3, #1
		SystemSeconds = 0;
 8000cfc:	6014      	str	r4, [r2, #0]
		WSPRBeaconState = FIRST_FIX;
 8000cfe:	703b      	strb	r3, [r7, #0]
}
 8000d00:	b005      	add	sp, #20
 8000d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			SystemSeconds = 0;
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <DecodeDCF77+0x164>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
			srand((unsigned) HAL_GetTick());
 8000d0c:	f005 fc70 	bl	80065f0 <HAL_GetTick>
 8000d10:	f010 faa4 	bl	801125c <srand>
			TransmittingWSPR = 1;
 8000d14:	4a09      	ldr	r2, [pc, #36]	; (8000d3c <DecodeDCF77+0x168>)
			WSPRBeaconState = SEND_WSPR;
 8000d16:	2302      	movs	r3, #2
			TransmittingWSPR = 1;
 8000d18:	7014      	strb	r4, [r2, #0]
			WSPRBeaconState = SEND_WSPR;
 8000d1a:	703b      	strb	r3, [r7, #0]
 8000d1c:	e7b1      	b.n	8000c82 <DecodeDCF77+0xae>
 8000d1e:	bf00      	nop
 8000d20:	24000768 	.word	0x24000768
 8000d24:	240007a6 	.word	0x240007a6
 8000d28:	24008e18 	.word	0x24008e18
 8000d2c:	24002a3c 	.word	0x24002a3c
 8000d30:	24002a39 	.word	0x24002a39
 8000d34:	24007cf0 	.word	0x24007cf0
 8000d38:	24007cf4 	.word	0x24007cf4
 8000d3c:	24007d05 	.word	0x24007d05
 8000d40:	240007a5 	.word	0x240007a5

08000d44 <DoDCF77>:

void DoDCF77(uint16_t DCF77In)
{
 8000d44:	b5f0      	push	{r4, r5, r6, r7, lr}
//100 mSec (DCF77 0) is 3200 samples
//200 mSec (DCF77 1) is 6400 samples
//2 Sec (DCF77 Sync) is 64000 samples


	if (DCF77In && !LastDCF77In)
 8000d46:	4d3c      	ldr	r5, [pc, #240]	; (8000e38 <DoDCF77+0xf4>)
{
 8000d48:	b083      	sub	sp, #12
	if (DCF77In && !LastDCF77In)
 8000d4a:	b1f8      	cbz	r0, 8000d8c <DoDCF77+0x48>
 8000d4c:	8829      	ldrh	r1, [r5, #0]
 8000d4e:	2900      	cmp	r1, #0
 8000d50:	d141      	bne.n	8000dd6 <DoDCF77+0x92>
		RisingEdge = 1;
 8000d52:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <DoDCF77+0xf8>)
 8000d54:	2201      	movs	r2, #1
		DCF77LowSampleCounter = 0;
	}

	if (RisingEdge)
	{
		if (DCF77LowSampleCounter > 3000 && DCF77LowSampleCounter < 6000)
 8000d56:	f640 34b6 	movw	r4, #2998	; 0xbb6
		RisingEdge = 1;
 8000d5a:	701a      	strb	r2, [r3, #0]
	if (!DCF77In && LastDCF77In)
 8000d5c:	4b38      	ldr	r3, [pc, #224]	; (8000e40 <DoDCF77+0xfc>)
 8000d5e:	7019      	strb	r1, [r3, #0]
		if (DCF77LowSampleCounter > 3000 && DCF77LowSampleCounter < 6000)
 8000d60:	4b38      	ldr	r3, [pc, #224]	; (8000e44 <DoDCF77+0x100>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f6a3 36b9 	subw	r6, r3, #3001	; 0xbb9
 8000d68:	42a6      	cmp	r6, r4
 8000d6a:	d855      	bhi.n	8000e18 <DoDCF77+0xd4>
			DCF77Message[DCF77BitCounter++] = 0;
 8000d6c:	4c36      	ldr	r4, [pc, #216]	; (8000e48 <DoDCF77+0x104>)
 8000d6e:	4a37      	ldr	r2, [pc, #220]	; (8000e4c <DoDCF77+0x108>)
 8000d70:	6823      	ldr	r3, [r4, #0]
 8000d72:	54d1      	strb	r1, [r2, r3]
 8000d74:	3301      	adds	r3, #1
 8000d76:	6023      	str	r3, [r4, #0]
{
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4935      	ldr	r1, [pc, #212]	; (8000e50 <DoDCF77+0x10c>)
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
				DCF77Message[DCF77BitCounter++] = 1;
		DCF77HighSampleCounter = 0;
	}
	if (DCF77In && DCF77HighSampleCounter < 100000)
		DCF77HighSampleCounter++;
 8000d7c:	600a      	str	r2, [r1, #0]

	if (!DCF77In && DCF77LowSampleCounter < 100000)
		DCF77LowSampleCounter++;

	if (DCF77BitCounter > 59)
 8000d7e:	2b3b      	cmp	r3, #59	; 0x3b
 8000d80:	d901      	bls.n	8000d86 <DoDCF77+0x42>
		DCF77BitCounter = 59;
 8000d82:	233b      	movs	r3, #59	; 0x3b
 8000d84:	6023      	str	r3, [r4, #0]
	LastDCF77In = DCF77In;
 8000d86:	8028      	strh	r0, [r5, #0]
}
 8000d88:	b003      	add	sp, #12
 8000d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!DCF77In && LastDCF77In)
 8000d8c:	882a      	ldrh	r2, [r5, #0]
		RisingEdge = 0;
 8000d8e:	4f2b      	ldr	r7, [pc, #172]	; (8000e3c <DoDCF77+0xf8>)
	if (!DCF77In && LastDCF77In)
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <DoDCF77+0xfc>)
		RisingEdge = 0;
 8000d94:	7038      	strb	r0, [r7, #0]
	if (!DCF77In && LastDCF77In)
 8000d96:	bf14      	ite	ne
 8000d98:	2201      	movne	r2, #1
 8000d9a:	2200      	moveq	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
	if (FallingEdge)
 8000d9e:	d027      	beq.n	8000df0 <DoDCF77+0xac>
		if (DCF77HighSampleCounter > 40000 && DCF77HighSampleCounter < 90000)
 8000da0:	4e2b      	ldr	r6, [pc, #172]	; (8000e50 <DoDCF77+0x10c>)
 8000da2:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <DoDCF77+0x110>)
 8000da4:	6832      	ldr	r2, [r6, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	f24c 324e 	movw	r2, #49998	; 0xc34e
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d90a      	bls.n	8000dc6 <DoDCF77+0x82>
		DCF77LowSampleCounter = 0;
 8000db0:	4a24      	ldr	r2, [pc, #144]	; (8000e44 <DoDCF77+0x100>)
 8000db2:	4c25      	ldr	r4, [pc, #148]	; (8000e48 <DoDCF77+0x104>)
 8000db4:	6010      	str	r0, [r2, #0]
	if (DCF77BitCounter > 59)
 8000db6:	6823      	ldr	r3, [r4, #0]
	if (!DCF77In && DCF77LowSampleCounter < 100000)
 8000db8:	6811      	ldr	r1, [r2, #0]
 8000dba:	4e27      	ldr	r6, [pc, #156]	; (8000e58 <DoDCF77+0x114>)
 8000dbc:	42b1      	cmp	r1, r6
 8000dbe:	d8de      	bhi.n	8000d7e <DoDCF77+0x3a>
		DCF77LowSampleCounter++;
 8000dc0:	3101      	adds	r1, #1
 8000dc2:	6011      	str	r1, [r2, #0]
 8000dc4:	e7db      	b.n	8000d7e <DoDCF77+0x3a>
			if (DCF77BitCounter == 59)
 8000dc6:	4c20      	ldr	r4, [pc, #128]	; (8000e48 <DoDCF77+0x104>)
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	2b3b      	cmp	r3, #59	; 0x3b
 8000dcc:	d013      	beq.n	8000df6 <DoDCF77+0xb2>
		DCF77LowSampleCounter = 0;
 8000dce:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <DoDCF77+0x100>)
			DCF77BitCounter = 0;
 8000dd0:	6020      	str	r0, [r4, #0]
		DCF77LowSampleCounter = 0;
 8000dd2:	6010      	str	r0, [r2, #0]
	if (RisingEdge)
 8000dd4:	e7ef      	b.n	8000db6 <DoDCF77+0x72>
		RisingEdge = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <DoDCF77+0xf8>)
	if (DCF77In && DCF77HighSampleCounter < 100000)
 8000dda:	491d      	ldr	r1, [pc, #116]	; (8000e50 <DoDCF77+0x10c>)
		RisingEdge = 0;
 8000ddc:	7013      	strb	r3, [r2, #0]
	if (!DCF77In && LastDCF77In)
 8000dde:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <DoDCF77+0xfc>)
 8000de0:	7013      	strb	r3, [r2, #0]
	if (DCF77In && DCF77HighSampleCounter < 100000)
 8000de2:	680a      	ldr	r2, [r1, #0]
 8000de4:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <DoDCF77+0x114>)
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d912      	bls.n	8000e10 <DoDCF77+0xcc>
	if (DCF77BitCounter > 59)
 8000dea:	4c17      	ldr	r4, [pc, #92]	; (8000e48 <DoDCF77+0x104>)
 8000dec:	6823      	ldr	r3, [r4, #0]
 8000dee:	e7c6      	b.n	8000d7e <DoDCF77+0x3a>
 8000df0:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <DoDCF77+0x100>)
 8000df2:	4c15      	ldr	r4, [pc, #84]	; (8000e48 <DoDCF77+0x104>)
 8000df4:	e7df      	b.n	8000db6 <DoDCF77+0x72>
				DecodeDCF77();
 8000df6:	9001      	str	r0, [sp, #4]
 8000df8:	f7ff feec 	bl	8000bd4 <DecodeDCF77>
			DCF77BitCounter = 0;
 8000dfc:	9801      	ldr	r0, [sp, #4]
		DCF77LowSampleCounter = 0;
 8000dfe:	4a11      	ldr	r2, [pc, #68]	; (8000e44 <DoDCF77+0x100>)
	if (RisingEdge)
 8000e00:	783b      	ldrb	r3, [r7, #0]
			DCF77BitCounter = 0;
 8000e02:	6020      	str	r0, [r4, #0]
		DCF77LowSampleCounter = 0;
 8000e04:	6010      	str	r0, [r2, #0]
	if (RisingEdge)
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0d5      	beq.n	8000db6 <DoDCF77+0x72>
	if (DCF77BitCounter > 59)
 8000e0a:	4603      	mov	r3, r0
		DCF77HighSampleCounter = 0;
 8000e0c:	6030      	str	r0, [r6, #0]
 8000e0e:	e7d3      	b.n	8000db8 <DoDCF77+0x74>
	if (DCF77BitCounter > 59)
 8000e10:	4c0d      	ldr	r4, [pc, #52]	; (8000e48 <DoDCF77+0x104>)
		DCF77HighSampleCounter++;
 8000e12:	3201      	adds	r2, #1
	if (DCF77BitCounter > 59)
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	e7b1      	b.n	8000d7c <DoDCF77+0x38>
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
 8000e18:	4910      	ldr	r1, [pc, #64]	; (8000e5c <DoDCF77+0x118>)
				DCF77Message[DCF77BitCounter++] = 1;
 8000e1a:	4c0b      	ldr	r4, [pc, #44]	; (8000e48 <DoDCF77+0x104>)
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
 8000e1c:	4419      	add	r1, r3
 8000e1e:	f241 736e 	movw	r3, #5998	; 0x176e
 8000e22:	4299      	cmp	r1, r3
				DCF77Message[DCF77BitCounter++] = 1;
 8000e24:	6823      	ldr	r3, [r4, #0]
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
 8000e26:	d901      	bls.n	8000e2c <DoDCF77+0xe8>
	if (DCF77In && DCF77HighSampleCounter < 100000)
 8000e28:	4909      	ldr	r1, [pc, #36]	; (8000e50 <DoDCF77+0x10c>)
 8000e2a:	e7a7      	b.n	8000d7c <DoDCF77+0x38>
				DCF77Message[DCF77BitCounter++] = 1;
 8000e2c:	4907      	ldr	r1, [pc, #28]	; (8000e4c <DoDCF77+0x108>)
 8000e2e:	54ca      	strb	r2, [r1, r3]
 8000e30:	3301      	adds	r3, #1
 8000e32:	6023      	str	r3, [r4, #0]
 8000e34:	e7a0      	b.n	8000d78 <DoDCF77+0x34>
 8000e36:	bf00      	nop
 8000e38:	24007c7a 	.word	0x24007c7a
 8000e3c:	240007a7 	.word	0x240007a7
 8000e40:	240007a4 	.word	0x240007a4
 8000e44:	24000764 	.word	0x24000764
 8000e48:	2400075c 	.word	0x2400075c
 8000e4c:	24000768 	.word	0x24000768
 8000e50:	24000760 	.word	0x24000760
 8000e54:	ffff63bf 	.word	0xffff63bf
 8000e58:	0001869f 	.word	0x0001869f
 8000e5c:	ffffe88f 	.word	0xffffe88f

08000e60 <Load_Presets>:
// Load from the Presets table
void Load_Presets(void)
{
	int k;

	for(k=0; k<MAXPRESETS; k++)
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <Load_Presets+0x40>)
{
 8000e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e66:	4c0f      	ldr	r4, [pc, #60]	; (8000ea4 <Load_Presets+0x44>)
 8000e68:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 8000e6c:	4f0e      	ldr	r7, [pc, #56]	; (8000ea8 <Load_Presets+0x48>)
 8000e6e:	4e0f      	ldr	r6, [pc, #60]	; (8000eac <Load_Presets+0x4c>)
 8000e70:	4d0f      	ldr	r5, [pc, #60]	; (8000eb0 <Load_Presets+0x50>)
	{
		strcpy(psets[k].name, pNames[k]);
 8000e72:	4621      	mov	r1, r4
 8000e74:	4618      	mov	r0, r3
 8000e76:	f010 fa7d 	bl	8011374 <strcpy>
 8000e7a:	4603      	mov	r3, r0
		psets[k].freq = pFreqs[k];
 8000e7c:	f857 0b04 	ldr.w	r0, [r7], #4
	for(k=0; k<MAXPRESETS; k++)
 8000e80:	3410      	adds	r4, #16
 8000e82:	3318      	adds	r3, #24
		psets[k].mode = pModes[k];
 8000e84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		psets[k].freq = pFreqs[k];
 8000e88:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 8000e8c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
	for(k=0; k<MAXPRESETS; k++)
 8000e90:	4543      	cmp	r3, r8
		psets[k].mode = pModes[k];
 8000e92:	f803 1c04 	strb.w	r1, [r3, #-4]
		psets[k].bw   = pBws[k];
 8000e96:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 8000e9a:	d1ea      	bne.n	8000e72 <Load_Presets+0x12>
	}
}
 8000e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ea0:	2400c264 	.word	0x2400c264
 8000ea4:	24000120 	.word	0x24000120
 8000ea8:	0801ac38 	.word	0x0801ac38
 8000eac:	0801ac6f 	.word	0x0801ac6f
 8000eb0:	0801ac27 	.word	0x0801ac27

08000eb4 <SetBW>:
// Load the FFT mask according to the mode and the bandwidth chosen,
// and change the color of the buttons to indicate the active bandwidth
void SetBW(/*WM_HWIN ptr,*/ Bwidth newbw)
{
	CurrentBW = newbw;
	switch(CurrentMode)
 8000eb4:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <SetBW+0x8c>)
	CurrentBW = newbw;
 8000eb6:	4a23      	ldr	r2, [pc, #140]	; (8000f44 <SetBW+0x90>)
{
 8000eb8:	b410      	push	{r4}
	switch(CurrentMode)
 8000eba:	781b      	ldrb	r3, [r3, #0]
	CurrentBW = newbw;
 8000ebc:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d83a      	bhi.n	8000f38 <SetBW+0x84>
 8000ec2:	e8df f003 	tbb	[pc, r3]
 8000ec6:	232b      	.short	0x232b
 8000ec8:	0210      	.short	0x0210

		break;

	case CW  :

		bw[CW] = newbw;
 8000eca:	4c1f      	ldr	r4, [pc, #124]	; (8000f48 <SetBW+0x94>)
		CWindex = (newbw == Narrow) ? 0 : 1;
		CWindex = 0; // TODO toglimi
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4a1f      	ldr	r2, [pc, #124]	; (8000f4c <SetBW+0x98>)
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[CW] = newbw;
 8000ed4:	70e0      	strb	r0, [r4, #3]
		CWindex = 0; // TODO toglimi
 8000ed6:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000ed8:	481d      	ldr	r0, [pc, #116]	; (8000f50 <SetBW+0x9c>)
 8000eda:	4a1e      	ldr	r2, [pc, #120]	; (8000f54 <SetBW+0xa0>)
 8000edc:	491e      	ldr	r1, [pc, #120]	; (8000f58 <SetBW+0xa4>)
		break;

	default :
		break;
	}
}	
 8000ede:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000ee2:	f001 b8c3 	b.w	800206c <SDR_2R_toC_f32>
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000ee6:	1e02      	subs	r2, r0, #0
		bw[USB] = newbw;
 8000ee8:	4917      	ldr	r1, [pc, #92]	; (8000f48 <SetBW+0x94>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <SetBW+0xa8>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000eec:	bf18      	it	ne
 8000eee:	2201      	movne	r2, #1
		USBindex = 0; // TODO toglimi
 8000ef0:	4c1b      	ldr	r4, [pc, #108]	; (8000f60 <SetBW+0xac>)
		bw[USB] = newbw;
 8000ef2:	7088      	strb	r0, [r1, #2]
		USBindex = 0; // TODO toglimi
 8000ef4:	2000      	movs	r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000ef6:	801a      	strh	r2, [r3, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000ef8:	491a      	ldr	r1, [pc, #104]	; (8000f64 <SetBW+0xb0>)
 8000efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
		USBindex = 0; // TODO toglimi
 8000efe:	8020      	strh	r0, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000f00:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <SetBW+0xa0>)
 8000f02:	4819      	ldr	r0, [pc, #100]	; (8000f68 <SetBW+0xb4>)
}	
 8000f04:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000f08:	f001 b8b0 	b.w	800206c <SDR_2R_toC_f32>
		bw[LSB] = newbw;
 8000f0c:	490e      	ldr	r1, [pc, #56]	; (8000f48 <SetBW+0x94>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000f0e:	1e02      	subs	r2, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <SetBW+0xa8>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000f12:	bf18      	it	ne
 8000f14:	2201      	movne	r2, #1
		LSBindex = 0; // TODO toglimi
 8000f16:	4c15      	ldr	r4, [pc, #84]	; (8000f6c <SetBW+0xb8>)
		bw[LSB] = newbw;
 8000f18:	7048      	strb	r0, [r1, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000f1a:	e7eb      	b.n	8000ef4 <SetBW+0x40>
		bw[AM] = newbw;
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	; (8000f48 <SetBW+0x94>)
		AMindex = 0; // TODO toglimi
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <SetBW+0xa8>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[AM] = newbw;
 8000f26:	7020      	strb	r0, [r4, #0]
		AMindex = 0; // TODO toglimi
 8000f28:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000f2a:	4811      	ldr	r0, [pc, #68]	; (8000f70 <SetBW+0xbc>)
 8000f2c:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <SetBW+0xa0>)
 8000f2e:	4911      	ldr	r1, [pc, #68]	; (8000f74 <SetBW+0xc0>)
}	
 8000f30:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000f34:	f001 b89a 	b.w	800206c <SDR_2R_toC_f32>
}	
 8000f38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	24002a38 	.word	0x24002a38
 8000f44:	24002a37 	.word	0x24002a37
 8000f48:	24009650 	.word	0x24009650
 8000f4c:	24002a34 	.word	0x24002a34
 8000f50:	08017c28 	.word	0x08017c28
 8000f54:	20004000 	.word	0x20004000
 8000f58:	08016c28 	.word	0x08016c28
 8000f5c:	24002214 	.word	0x24002214
 8000f60:	24007d10 	.word	0x24007d10
 8000f64:	08018c28 	.word	0x08018c28
 8000f68:	08019c28 	.word	0x08019c28
 8000f6c:	24007c78 	.word	0x24007c78
 8000f70:	08015c28 	.word	0x08015c28
 8000f74:	08014c28 	.word	0x08014c28

08000f78 <SetAGC>:
// Change the AGC constants according to the mode and the AGC chosen,
// and change the color of the buttons to indicate the active AGC speed
void SetAGC(/*WM_HWIN ptr,*/ Agctype newAGC)
{
	CurrentAGC =newAGC;
	switch(CurrentMode)
 8000f78:	4b25      	ldr	r3, [pc, #148]	; (8001010 <SetAGC+0x98>)
	CurrentAGC =newAGC;
 8000f7a:	4a26      	ldr	r2, [pc, #152]	; (8001014 <SetAGC+0x9c>)
{
 8000f7c:	b410      	push	{r4}
	switch(CurrentMode)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
	CurrentAGC =newAGC;
 8000f80:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d811      	bhi.n	8000faa <SetAGC+0x32>
 8000f86:	e8df f003 	tbb	[pc, r3]
 8000f8a:	2333      	.short	0x2333
 8000f8c:	0213      	.short	0x0213
	case USB :      agc[USB] = newAGC;
	Decay[USB]  = AGC_decay[newAGC];
	Hcount[USB] = Hangcount[newAGC]; break;

	case CW :       agc[CW] = newAGC;
	Decay[CW]   = AGC_decay[newAGC];
 8000f8e:	4b22      	ldr	r3, [pc, #136]	; (8001018 <SetAGC+0xa0>)
	case CW :       agc[CW] = newAGC;
 8000f90:	4922      	ldr	r1, [pc, #136]	; (800101c <SetAGC+0xa4>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000f92:	4c23      	ldr	r4, [pc, #140]	; (8001020 <SetAGC+0xa8>)
	Decay[CW]   = AGC_decay[newAGC];
 8000f94:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000f98:	4a22      	ldr	r2, [pc, #136]	; (8001024 <SetAGC+0xac>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000f9a:	f834 c010 	ldrh.w	ip, [r4, r0, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000f9e:	681b      	ldr	r3, [r3, #0]
	case CW :       agc[CW] = newAGC;
 8000fa0:	70c8      	strb	r0, [r1, #3]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000fa2:	4921      	ldr	r1, [pc, #132]	; (8001028 <SetAGC+0xb0>)
	Decay[CW]   = AGC_decay[newAGC];
 8000fa4:	60d3      	str	r3, [r2, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000fa6:	f8a1 c006 	strh.w	ip, [r1, #6]
	}
	//  ChangeColor(ptr, hFAST, (newAGC == Fast) ? GUI_RED   : GUI_BLACK);
	//  ChangeColor(ptr, hSLOW, (newAGC == Slow) ? GUI_RED   : GUI_BLACK);
}	
 8000faa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fae:	4770      	bx	lr
	Decay[USB]  = AGC_decay[newAGC];
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <SetAGC+0xa0>)
	case USB :      agc[USB] = newAGC;
 8000fb2:	491a      	ldr	r1, [pc, #104]	; (800101c <SetAGC+0xa4>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000fb4:	4c1a      	ldr	r4, [pc, #104]	; (8001020 <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 8000fb6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case USB :      agc[USB] = newAGC;
 8000fba:	7088      	strb	r0, [r1, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000fbc:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000fc0:	4a18      	ldr	r2, [pc, #96]	; (8001024 <SetAGC+0xac>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000fc2:	4919      	ldr	r1, [pc, #100]	; (8001028 <SetAGC+0xb0>)
	Decay[USB]  = AGC_decay[newAGC];
 8000fc4:	681b      	ldr	r3, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000fc6:	808c      	strh	r4, [r1, #4]
	Decay[USB]  = AGC_decay[newAGC];
 8000fc8:	6093      	str	r3, [r2, #8]
}	
 8000fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fce:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <SetAGC+0xa0>)
	case LSB :      agc[LSB] = newAGC;
 8000fd2:	4912      	ldr	r1, [pc, #72]	; (800101c <SetAGC+0xa4>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000fd4:	4c12      	ldr	r4, [pc, #72]	; (8001020 <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000fd6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case LSB :      agc[LSB] = newAGC;
 8000fda:	7048      	strb	r0, [r1, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000fdc:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000fe0:	4a10      	ldr	r2, [pc, #64]	; (8001024 <SetAGC+0xac>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000fe2:	4911      	ldr	r1, [pc, #68]	; (8001028 <SetAGC+0xb0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000fe4:	681b      	ldr	r3, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000fe6:	804c      	strh	r4, [r1, #2]
	Decay[LSB]  = AGC_decay[newAGC];
 8000fe8:	6053      	str	r3, [r2, #4]
}	
 8000fea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fee:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <SetAGC+0xa0>)
	case AM :       agc[AM] = newAGC;
 8000ff2:	490a      	ldr	r1, [pc, #40]	; (800101c <SetAGC+0xa4>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000ff4:	4c0a      	ldr	r4, [pc, #40]	; (8001020 <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 8000ff6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case AM :       agc[AM] = newAGC;
 8000ffa:	7008      	strb	r0, [r1, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000ffc:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8001000:	4a08      	ldr	r2, [pc, #32]	; (8001024 <SetAGC+0xac>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001002:	4909      	ldr	r1, [pc, #36]	; (8001028 <SetAGC+0xb0>)
	Decay[AM]   = AGC_decay[newAGC];
 8001004:	681b      	ldr	r3, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001006:	800c      	strh	r4, [r1, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8001008:	6013      	str	r3, [r2, #0]
}	
 800100a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	24002a38 	.word	0x24002a38
 8001014:	24002a36 	.word	0x24002a36
 8001018:	2400220c 	.word	0x2400220c
 800101c:	24009640 	.word	0x24009640
 8001020:	24006c64 	.word	0x24006c64
 8001024:	24002a40 	.word	0x24002a40
 8001028:	24006c68 	.word	0x24006c68

0800102c <Tune_Preset>:
{
 800102c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOfreq = psets[Idx].freq;
 8001030:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8001034:	4e47      	ldr	r6, [pc, #284]	; (8001154 <Tune_Preset+0x128>)
 8001036:	4a48      	ldr	r2, [pc, #288]	; (8001158 <Tune_Preset+0x12c>)
{
 8001038:	4604      	mov	r4, r0
	LOfreq = psets[Idx].freq;
 800103a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	CurrentMode = newmode;
 800103e:	4f47      	ldr	r7, [pc, #284]	; (800115c <Tune_Preset+0x130>)
	LOfreq = psets[Idx].freq;
 8001040:	0045      	lsls	r5, r0, #1
 8001042:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 8001044:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 8001046:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 8001048:	703b      	strb	r3, [r7, #0]

	switch(CurrentMode)
 800104a:	2b03      	cmp	r3, #3
 800104c:	d87b      	bhi.n	8001146 <Tune_Preset+0x11a>
 800104e:	e8df f003 	tbb	[pc, r3]
 8001052:	626e      	.short	0x626e
 8001054:	0256      	.short	0x0256
	case USB :
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001056:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8001198 <Tune_Preset+0x16c>
 800105a:	f898 0003 	ldrb.w	r0, [r8, #3]
 800105e:	f7ff ff29 	bl	8000eb4 <SetBW>
 8001062:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <Tune_Preset+0x134>)
 8001064:	78d8      	ldrb	r0, [r3, #3]
 8001066:	f7ff ff87 	bl	8000f78 <SetAGC>
	switch(CurrentMode)
 800106a:	783a      	ldrb	r2, [r7, #0]
	SetBW( psets[Idx].bw);
 800106c:	4425      	add	r5, r4
	CurrentBW = newbw;
 800106e:	493d      	ldr	r1, [pc, #244]	; (8001164 <Tune_Preset+0x138>)
	SetBW( psets[Idx].bw);
 8001070:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8001074:	7d6b      	ldrb	r3, [r5, #21]
	CurrentBW = newbw;
 8001076:	700b      	strb	r3, [r1, #0]
	switch(CurrentMode)
 8001078:	2a03      	cmp	r2, #3
 800107a:	d80f      	bhi.n	800109c <Tune_Preset+0x70>
 800107c:	e8df f002 	tbb	[pc, r2]
 8001080:	02173629 	.word	0x02173629
		CWindex = 0; // TODO toglimi
 8001084:	4a38      	ldr	r2, [pc, #224]	; (8001168 <Tune_Preset+0x13c>)
 8001086:	2100      	movs	r1, #0
		bw[CW] = newbw;
 8001088:	f888 3003 	strb.w	r3, [r8, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 800108c:	f44f 6380 	mov.w	r3, #1024	; 0x400
		CWindex = 0; // TODO toglimi
 8001090:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8001092:	4836      	ldr	r0, [pc, #216]	; (800116c <Tune_Preset+0x140>)
 8001094:	4a36      	ldr	r2, [pc, #216]	; (8001170 <Tune_Preset+0x144>)
 8001096:	4937      	ldr	r1, [pc, #220]	; (8001174 <Tune_Preset+0x148>)
 8001098:	f000 ffe8 	bl	800206c <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 800109c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80010a0:	4835      	ldr	r0, [pc, #212]	; (8001178 <Tune_Preset+0x14c>)
 80010a2:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
}
 80010a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 80010aa:	f010 b963 	b.w	8011374 <strcpy>
		bw[USB] = newbw;
 80010ae:	f888 3002 	strb.w	r3, [r8, #2]
		USBindex = (newbw == Narrow) ? 0 : 1;
 80010b2:	3b00      	subs	r3, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 80010b4:	4a31      	ldr	r2, [pc, #196]	; (800117c <Tune_Preset+0x150>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 80010b6:	bf18      	it	ne
 80010b8:	2301      	movne	r3, #1
		AMindex = (newbw == Narrow) ? 0 : 1;
 80010ba:	8013      	strh	r3, [r2, #0]
		USBindex = 0; // TODO toglimi
 80010bc:	4a30      	ldr	r2, [pc, #192]	; (8001180 <Tune_Preset+0x154>)
 80010be:	2100      	movs	r1, #0
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 80010c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c4:	482f      	ldr	r0, [pc, #188]	; (8001184 <Tune_Preset+0x158>)
		USBindex = 0; // TODO toglimi
 80010c6:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 80010c8:	4a29      	ldr	r2, [pc, #164]	; (8001170 <Tune_Preset+0x144>)
 80010ca:	492f      	ldr	r1, [pc, #188]	; (8001188 <Tune_Preset+0x15c>)
 80010cc:	f000 ffce 	bl	800206c <SDR_2R_toC_f32>
		break;
 80010d0:	e7e4      	b.n	800109c <Tune_Preset+0x70>
		AMindex = 0; // TODO toglimi
 80010d2:	4a2a      	ldr	r2, [pc, #168]	; (800117c <Tune_Preset+0x150>)
 80010d4:	2100      	movs	r1, #0
		bw[AM] = newbw;
 80010d6:	f888 3000 	strb.w	r3, [r8]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80010da:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 80010de:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80010e0:	482a      	ldr	r0, [pc, #168]	; (800118c <Tune_Preset+0x160>)
 80010e2:	4a23      	ldr	r2, [pc, #140]	; (8001170 <Tune_Preset+0x144>)
 80010e4:	492a      	ldr	r1, [pc, #168]	; (8001190 <Tune_Preset+0x164>)
 80010e6:	f000 ffc1 	bl	800206c <SDR_2R_toC_f32>
		break;
 80010ea:	e7d7      	b.n	800109c <Tune_Preset+0x70>
		bw[LSB] = newbw;
 80010ec:	f888 3001 	strb.w	r3, [r8, #1]
		LSBindex = (newbw == Narrow) ? 0 : 1;
 80010f0:	3b00      	subs	r3, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 80010f2:	4a22      	ldr	r2, [pc, #136]	; (800117c <Tune_Preset+0x150>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 80010f4:	bf18      	it	ne
 80010f6:	2301      	movne	r3, #1
		AMindex = (newbw == Narrow) ? 0 : 1;
 80010f8:	8013      	strh	r3, [r2, #0]
		LSBindex = 0; // TODO toglimi
 80010fa:	4a26      	ldr	r2, [pc, #152]	; (8001194 <Tune_Preset+0x168>)
 80010fc:	e7df      	b.n	80010be <Tune_Preset+0x92>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 80010fe:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8001198 <Tune_Preset+0x16c>
 8001102:	f898 0002 	ldrb.w	r0, [r8, #2]
 8001106:	f7ff fed5 	bl	8000eb4 <SetBW>
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <Tune_Preset+0x134>)
 800110c:	7898      	ldrb	r0, [r3, #2]
 800110e:	f7ff ff33 	bl	8000f78 <SetAGC>
	switch(CurrentMode)
 8001112:	783a      	ldrb	r2, [r7, #0]
		break;
 8001114:	e7aa      	b.n	800106c <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001116:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8001198 <Tune_Preset+0x16c>
 800111a:	f898 0001 	ldrb.w	r0, [r8, #1]
 800111e:	f7ff fec9 	bl	8000eb4 <SetBW>
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <Tune_Preset+0x134>)
 8001124:	7858      	ldrb	r0, [r3, #1]
 8001126:	f7ff ff27 	bl	8000f78 <SetAGC>
	switch(CurrentMode)
 800112a:	783a      	ldrb	r2, [r7, #0]
		break;
 800112c:	e79e      	b.n	800106c <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 800112e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8001198 <Tune_Preset+0x16c>
 8001132:	f898 0000 	ldrb.w	r0, [r8]
 8001136:	f7ff febd 	bl	8000eb4 <SetBW>
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <Tune_Preset+0x134>)
 800113c:	7818      	ldrb	r0, [r3, #0]
 800113e:	f7ff ff1b 	bl	8000f78 <SetAGC>
	switch(CurrentMode)
 8001142:	783a      	ldrb	r2, [r7, #0]
		break;

	default :
		break;
	}
}	
 8001144:	e792      	b.n	800106c <Tune_Preset+0x40>
	SetBW( psets[Idx].bw);
 8001146:	2318      	movs	r3, #24
	CurrentBW = newbw;
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <Tune_Preset+0x138>)
	SetBW( psets[Idx].bw);
 800114a:	fb03 6300 	mla	r3, r3, r0, r6
	CurrentBW = newbw;
 800114e:	7d5b      	ldrb	r3, [r3, #21]
 8001150:	7013      	strb	r3, [r2, #0]
	switch(CurrentMode)
 8001152:	e7a3      	b.n	800109c <Tune_Preset+0x70>
 8001154:	2400c264 	.word	0x2400c264
 8001158:	24007c74 	.word	0x24007c74
 800115c:	24002a38 	.word	0x24002a38
 8001160:	24009640 	.word	0x24009640
 8001164:	24002a37 	.word	0x24002a37
 8001168:	24002a34 	.word	0x24002a34
 800116c:	08017c28 	.word	0x08017c28
 8001170:	20004000 	.word	0x20004000
 8001174:	08016c28 	.word	0x08016c28
 8001178:	2400c23c 	.word	0x2400c23c
 800117c:	24002214 	.word	0x24002214
 8001180:	24007d10 	.word	0x24007d10
 8001184:	08019c28 	.word	0x08019c28
 8001188:	08018c28 	.word	0x08018c28
 800118c:	08015c28 	.word	0x08015c28
 8001190:	08014c28 	.word	0x08014c28
 8001194:	24007c78 	.word	0x24007c78
 8001198:	24009650 	.word	0x24009650

0800119c <SetMode>:
{
 800119c:	b508      	push	{r3, lr}
	CurrentMode = newmode;
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <SetMode+0x64>)
 80011a0:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 80011a2:	2803      	cmp	r0, #3
 80011a4:	d82b      	bhi.n	80011fe <SetMode+0x62>
 80011a6:	e8df f000 	tbb	[pc, r0]
 80011aa:	1620      	.short	0x1620
 80011ac:	020c      	.short	0x020c
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <SetMode+0x68>)
 80011b0:	78d8      	ldrb	r0, [r3, #3]
 80011b2:	f7ff fe7f 	bl	8000eb4 <SetBW>
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <SetMode+0x6c>)
 80011b8:	78d8      	ldrb	r0, [r3, #3]
}	
 80011ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80011be:	f7ff bedb 	b.w	8000f78 <SetAGC>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <SetMode+0x68>)
 80011c4:	7898      	ldrb	r0, [r3, #2]
 80011c6:	f7ff fe75 	bl	8000eb4 <SetBW>
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <SetMode+0x6c>)
 80011cc:	7898      	ldrb	r0, [r3, #2]
}	
 80011ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 80011d2:	f7ff bed1 	b.w	8000f78 <SetAGC>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <SetMode+0x68>)
 80011d8:	7858      	ldrb	r0, [r3, #1]
 80011da:	f7ff fe6b 	bl	8000eb4 <SetBW>
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <SetMode+0x6c>)
 80011e0:	7858      	ldrb	r0, [r3, #1]
}	
 80011e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80011e6:	f7ff bec7 	b.w	8000f78 <SetAGC>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <SetMode+0x68>)
 80011ec:	7818      	ldrb	r0, [r3, #0]
 80011ee:	f7ff fe61 	bl	8000eb4 <SetBW>
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <SetMode+0x6c>)
 80011f4:	7818      	ldrb	r0, [r3, #0]
}	
 80011f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 80011fa:	f7ff bebd 	b.w	8000f78 <SetAGC>
}	
 80011fe:	bd08      	pop	{r3, pc}
 8001200:	24002a38 	.word	0x24002a38
 8001204:	24009650 	.word	0x24009650
 8001208:	24009640 	.word	0x24009640
 800120c:	00000000 	.word	0x00000000

08001210 <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	if (idx == 9)
 8001210:	2809      	cmp	r0, #9
{
 8001212:	b508      	push	{r3, lr}
	if (idx == 9)
 8001214:	d012      	beq.n	800123c <SetFstep+0x2c>
		Fstep = 9000;  // MW Channel for Europe
	else
		Fstep = pow(10, 5 - idx);
 8001216:	f1c0 0005 	rsb	r0, r0, #5
 800121a:	ee07 0a90 	vmov	s15, r0
 800121e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8001248 <SetFstep+0x38>
 8001222:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001226:	ee27 0b00 	vmul.f64	d0, d7, d0
 800122a:	f012 fb71 	bl	8013910 <exp>
 800122e:	4a08      	ldr	r2, [pc, #32]	; (8001250 <SetFstep+0x40>)
 8001230:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 8001234:	ee17 3a90 	vmov	r3, s15
 8001238:	6013      	str	r3, [r2, #0]
}	
 800123a:	bd08      	pop	{r3, pc}
		Fstep = 9000;  // MW Channel for Europe
 800123c:	f242 3328 	movw	r3, #9000	; 0x2328
 8001240:	4a03      	ldr	r2, [pc, #12]	; (8001250 <SetFstep+0x40>)
 8001242:	6013      	str	r3, [r2, #0]
}	
 8001244:	bd08      	pop	{r3, pc}
 8001246:	bf00      	nop
 8001248:	bbb55516 	.word	0xbbb55516
 800124c:	40026bb1 	.word	0x40026bb1
 8001250:	24006c60 	.word	0x24006c60

08001254 <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked(uint16_t Nsteps)
{	
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8001254:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <FplusClicked+0xb4>)
 8001256:	ee07 0a90 	vmov	s15, r0
 800125a:	4a2c      	ldr	r2, [pc, #176]	; (800130c <FplusClicked+0xb8>)
 800125c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8001260:	ed93 6a00 	vldr	s12, [r3]
 8001264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001268:	ed92 7a00 	vldr	s14, [r2]
 800126c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001270:	4b27      	ldr	r3, [pc, #156]	; (8001310 <FplusClicked+0xbc>)
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8001272:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	psets[0].bw = bw[CurrentMode];
 8001276:	4927      	ldr	r1, [pc, #156]	; (8001314 <FplusClicked+0xc0>)
	LOfreq  = min(LOfreq, 50000000.f);
 8001278:	eddf 5a27 	vldr	s11, [pc, #156]	; 8001318 <FplusClicked+0xc4>
	LOfreq += Fstep * (float)Nsteps / 2.0;
 800127c:	ee26 6a26 	vmul.f32	s12, s12, s13
{	
 8001280:	b510      	push	{r4, lr}
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8001282:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4c24      	ldr	r4, [pc, #144]	; (800131c <FplusClicked+0xc8>)
	psets[0].bw = bw[CurrentMode];
 800128a:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 800128c:	eea6 7b04 	vfma.f64	d7, d6, d4
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001290:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 8001292:	7560      	strb	r0, [r4, #21]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8001294:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = min(LOfreq, 50000000.f);
 8001298:	fe87 7a65 	vminnm.f32	s14, s14, s11
 800129c:	ed82 7a00 	vstr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80012a0:	ed84 7a04 	vstr	s14, [r4, #16]
	switch(CurrentMode)
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d80b      	bhi.n	80012c0 <FplusClicked+0x6c>
 80012a8:	e8df f003 	tbb	[pc, r3]
 80012ac:	02121b24 	.word	0x02121b24
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80012b0:	78c8      	ldrb	r0, [r1, #3]
 80012b2:	f7ff fdff 	bl	8000eb4 <SetBW>
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <FplusClicked+0xcc>)
 80012b8:	78d8      	ldrb	r0, [r3, #3]
 80012ba:	f7ff fe5d 	bl	8000f78 <SetAGC>
	SetBW( psets[Idx].bw);
 80012be:	7d60      	ldrb	r0, [r4, #21]
 80012c0:	f7ff fdf8 	bl	8000eb4 <SetBW>
	strcpy(msg, psets[Idx].name);
 80012c4:	4915      	ldr	r1, [pc, #84]	; (800131c <FplusClicked+0xc8>)
 80012c6:	4817      	ldr	r0, [pc, #92]	; (8001324 <FplusClicked+0xd0>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 80012c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 80012cc:	f010 b852 	b.w	8011374 <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 80012d0:	7888      	ldrb	r0, [r1, #2]
 80012d2:	f7ff fdef 	bl	8000eb4 <SetBW>
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <FplusClicked+0xcc>)
 80012d8:	7898      	ldrb	r0, [r3, #2]
 80012da:	f7ff fe4d 	bl	8000f78 <SetAGC>
	SetBW( psets[Idx].bw);
 80012de:	7d60      	ldrb	r0, [r4, #21]
		break;
 80012e0:	e7ee      	b.n	80012c0 <FplusClicked+0x6c>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80012e2:	7848      	ldrb	r0, [r1, #1]
 80012e4:	f7ff fde6 	bl	8000eb4 <SetBW>
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <FplusClicked+0xcc>)
 80012ea:	7858      	ldrb	r0, [r3, #1]
 80012ec:	f7ff fe44 	bl	8000f78 <SetAGC>
	SetBW( psets[Idx].bw);
 80012f0:	7d60      	ldrb	r0, [r4, #21]
		break;
 80012f2:	e7e5      	b.n	80012c0 <FplusClicked+0x6c>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 80012f4:	7808      	ldrb	r0, [r1, #0]
 80012f6:	f7ff fddd 	bl	8000eb4 <SetBW>
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <FplusClicked+0xcc>)
 80012fc:	7818      	ldrb	r0, [r3, #0]
 80012fe:	f7ff fe3b 	bl	8000f78 <SetAGC>
	SetBW( psets[Idx].bw);
 8001302:	7d60      	ldrb	r0, [r4, #21]
}	
 8001304:	e7dc      	b.n	80012c0 <FplusClicked+0x6c>
 8001306:	bf00      	nop
 8001308:	24006c60 	.word	0x24006c60
 800130c:	24007c74 	.word	0x24007c74
 8001310:	24002a38 	.word	0x24002a38
 8001314:	24009650 	.word	0x24009650
 8001318:	4c3ebc20 	.word	0x4c3ebc20
 800131c:	2400c264 	.word	0x2400c264
 8001320:	24009640 	.word	0x24009640
 8001324:	2400c23c 	.word	0x2400c23c

08001328 <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked(uint16_t Nsteps)
{	
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001328:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <FminusClicked+0xb4>)
 800132a:	ee07 0a90 	vmov	s15, r0
 800132e:	4a2c      	ldr	r2, [pc, #176]	; (80013e0 <FminusClicked+0xb8>)
 8001330:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8001334:	ed93 6a00 	vldr	s12, [r3]
 8001338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800133c:	ed92 7a00 	vldr	s14, [r2]
 8001340:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001344:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <FminusClicked+0xbc>)
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001346:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	psets[0].bw = bw[CurrentMode];
 800134a:	4927      	ldr	r1, [pc, #156]	; (80013e8 <FminusClicked+0xc0>)
	LOfreq  = max(LOfreq, 8000.f);
 800134c:	eddf 5a27 	vldr	s11, [pc, #156]	; 80013ec <FminusClicked+0xc4>
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001350:	ee26 6a26 	vmul.f32	s12, s12, s13
{	
 8001354:	b510      	push	{r4, lr}
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001356:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4c24      	ldr	r4, [pc, #144]	; (80013f0 <FminusClicked+0xc8>)
	psets[0].bw = bw[CurrentMode];
 800135e:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001360:	eea6 7b44 	vfms.f64	d7, d6, d4
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001364:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 8001366:	7560      	strb	r0, [r4, #21]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001368:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = max(LOfreq, 8000.f);
 800136c:	fe87 7a25 	vmaxnm.f32	s14, s14, s11
 8001370:	ed82 7a00 	vstr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001374:	ed84 7a04 	vstr	s14, [r4, #16]
	switch(CurrentMode)
 8001378:	2b03      	cmp	r3, #3
 800137a:	d80b      	bhi.n	8001394 <FminusClicked+0x6c>
 800137c:	e8df f003 	tbb	[pc, r3]
 8001380:	02121b24 	.word	0x02121b24
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001384:	78c8      	ldrb	r0, [r1, #3]
 8001386:	f7ff fd95 	bl	8000eb4 <SetBW>
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <FminusClicked+0xcc>)
 800138c:	78d8      	ldrb	r0, [r3, #3]
 800138e:	f7ff fdf3 	bl	8000f78 <SetAGC>
	SetBW( psets[Idx].bw);
 8001392:	7d60      	ldrb	r0, [r4, #21]
 8001394:	f7ff fd8e 	bl	8000eb4 <SetBW>
	strcpy(msg, psets[Idx].name);
 8001398:	4915      	ldr	r1, [pc, #84]	; (80013f0 <FminusClicked+0xc8>)
 800139a:	4817      	ldr	r0, [pc, #92]	; (80013f8 <FminusClicked+0xd0>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 800139c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 80013a0:	f00f bfe8 	b.w	8011374 <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 80013a4:	7888      	ldrb	r0, [r1, #2]
 80013a6:	f7ff fd85 	bl	8000eb4 <SetBW>
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <FminusClicked+0xcc>)
 80013ac:	7898      	ldrb	r0, [r3, #2]
 80013ae:	f7ff fde3 	bl	8000f78 <SetAGC>
	SetBW( psets[Idx].bw);
 80013b2:	7d60      	ldrb	r0, [r4, #21]
		break;
 80013b4:	e7ee      	b.n	8001394 <FminusClicked+0x6c>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80013b6:	7848      	ldrb	r0, [r1, #1]
 80013b8:	f7ff fd7c 	bl	8000eb4 <SetBW>
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <FminusClicked+0xcc>)
 80013be:	7858      	ldrb	r0, [r3, #1]
 80013c0:	f7ff fdda 	bl	8000f78 <SetAGC>
	SetBW( psets[Idx].bw);
 80013c4:	7d60      	ldrb	r0, [r4, #21]
		break;
 80013c6:	e7e5      	b.n	8001394 <FminusClicked+0x6c>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 80013c8:	7808      	ldrb	r0, [r1, #0]
 80013ca:	f7ff fd73 	bl	8000eb4 <SetBW>
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <FminusClicked+0xcc>)
 80013d0:	7818      	ldrb	r0, [r3, #0]
 80013d2:	f7ff fdd1 	bl	8000f78 <SetAGC>
	SetBW( psets[Idx].bw);
 80013d6:	7d60      	ldrb	r0, [r4, #21]
}	
 80013d8:	e7dc      	b.n	8001394 <FminusClicked+0x6c>
 80013da:	bf00      	nop
 80013dc:	24006c60 	.word	0x24006c60
 80013e0:	24007c74 	.word	0x24007c74
 80013e4:	24002a38 	.word	0x24002a38
 80013e8:	24009650 	.word	0x24009650
 80013ec:	45fa0000 	.word	0x45fa0000
 80013f0:	2400c264 	.word	0x2400c264
 80013f4:	24009640 	.word	0x24009640
 80013f8:	2400c23c 	.word	0x2400c23c

080013fc <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop

08001400 <HAL_GPIO_EXTI_Callback>:
// This is the handler of the software interrupt generated by the highest
// priority task that handles the interrupts generated by DMA2 Stream 0,
// when an ADC buffer is filled
//void EXTI1_IRQHandler()
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8001400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // set bit 8 of GPIOF high, to be observed with an oscilloscope


	// copy into work buffers the data received by CIC decimator
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8001404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001408:	4973      	ldr	r1, [pc, #460]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800140a:	4874      	ldr	r0, [pc, #464]	; (80015dc <HAL_GPIO_EXTI_Callback+0x1dc>)
	 */

	// TODO: check why with the original code above LSB and USB are swapped

	//if USB, copy the USB in the lower half (LSB)
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 800140c:	4c74      	ldr	r4, [pc, #464]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x1e0>)
{
 800140e:	ed2d 8b08 	vpush	{d8-d11}
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8001412:	f000 ff3f 	bl	8002294 <SDR_memcpy_f32>
	SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 8001416:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800141a:	4972      	ldr	r1, [pc, #456]	; (80015e4 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800141c:	4872      	ldr	r0, [pc, #456]	; (80015e8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800141e:	f000 ff39 	bl	8002294 <SDR_memcpy_f32>
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 8001422:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001426:	4a71      	ldr	r2, [pc, #452]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001428:	496c      	ldr	r1, [pc, #432]	; (80015dc <HAL_GPIO_EXTI_Callback+0x1dc>)
 800142a:	4871      	ldr	r0, [pc, #452]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800142c:	f00e fd4c 	bl	800fec8 <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 8001430:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001434:	4a6f      	ldr	r2, [pc, #444]	; (80015f4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8001436:	496c      	ldr	r1, [pc, #432]	; (80015e8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001438:	486f      	ldr	r0, [pc, #444]	; (80015f8 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800143a:	f00e fd45 	bl	800fec8 <arm_fir_decimate_f32>
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 800143e:	496f      	ldr	r1, [pc, #444]	; (80015fc <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001444:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
 8001448:	f000 ff24 	bl	8002294 <SDR_memcpy_f32>
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);
 800144c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001450:	4a6a      	ldr	r2, [pc, #424]	; (80015fc <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001452:	4968      	ldr	r1, [pc, #416]	; (80015f4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8001454:	4865      	ldr	r0, [pc, #404]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001456:	f000 fe09 	bl	800206c <SDR_2R_toC_f32>
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 800145a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800145e:	4968      	ldr	r1, [pc, #416]	; (8001600 <HAL_GPIO_EXTI_Callback+0x200>)
 8001460:	4868      	ldr	r0, [pc, #416]	; (8001604 <HAL_GPIO_EXTI_Callback+0x204>)
 8001462:	f000 ff17 	bl	8002294 <SDR_memcpy_f32>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 8001466:	2301      	movs	r3, #1
 8001468:	2200      	movs	r2, #0
 800146a:	4966      	ldr	r1, [pc, #408]	; (8001604 <HAL_GPIO_EXTI_Callback+0x204>)
 800146c:	4866      	ldr	r0, [pc, #408]	; (8001608 <HAL_GPIO_EXTI_Callback+0x208>)
 800146e:	f00e fc6d 	bl	800fd4c <arm_cfft_f32>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8001472:	7823      	ldrb	r3, [r4, #0]
 8001474:	2b02      	cmp	r3, #2
 8001476:	f000 8096 	beq.w	80015a6 <HAL_GPIO_EXTI_Callback+0x1a6>

#endif
	 */

	// mult. by the fast convolution mask
	arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 800147a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800147e:	4a63      	ldr	r2, [pc, #396]	; (800160c <HAL_GPIO_EXTI_Callback+0x20c>)
 8001480:	4963      	ldr	r1, [pc, #396]	; (8001610 <HAL_GPIO_EXTI_Callback+0x210>)
 8001482:	4860      	ldr	r0, [pc, #384]	; (8001604 <HAL_GPIO_EXTI_Callback+0x204>)
 8001484:	f00e fed8 	bl	8010238 <arm_cmplx_mult_cmplx_f32>

	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 8001488:	2301      	movs	r3, #1
 800148a:	4960      	ldr	r1, [pc, #384]	; (800160c <HAL_GPIO_EXTI_Callback+0x20c>)
 800148c:	461a      	mov	r2, r3
 800148e:	485e      	ldr	r0, [pc, #376]	; (8001608 <HAL_GPIO_EXTI_Callback+0x208>)
 8001490:	f00e fc5c 	bl	800fd4c <arm_cfft_f32>
	// then do the overlap-discard
	SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);
 8001494:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001498:	495e      	ldr	r1, [pc, #376]	; (8001614 <HAL_GPIO_EXTI_Callback+0x214>)
 800149a:	485f      	ldr	r0, [pc, #380]	; (8001618 <HAL_GPIO_EXTI_Callback+0x218>)
 800149c:	f000 fefa 	bl	8002294 <SDR_memcpy_f32>


	// we have now the bandpass filtered I/Q, demodulate the signal
	switch(CurrentMode)
 80014a0:	7823      	ldrb	r3, [r4, #0]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d86a      	bhi.n	800157c <HAL_GPIO_EXTI_Callback+0x17c>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d178      	bne.n	800159c <HAL_GPIO_EXTI_Callback+0x19c>
	{	
	case AM :
		SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 80014aa:	495c      	ldr	r1, [pc, #368]	; (800161c <HAL_GPIO_EXTI_Callback+0x21c>)
 80014ac:	485a      	ldr	r0, [pc, #360]	; (8001618 <HAL_GPIO_EXTI_Callback+0x218>)
 80014ae:	f001 f841 	bl	8002534 <SDR_demodAM_AGC>


#ifdef DCF77_DECODER

	CWLevel = 0;
	BaseNoiseLevel = 9999.f;
 80014b2:	4c5a      	ldr	r4, [pc, #360]	; (800161c <HAL_GPIO_EXTI_Callback+0x21c>)
 80014b4:	4b5a      	ldr	r3, [pc, #360]	; (8001620 <HAL_GPIO_EXTI_Callback+0x220>)
 80014b6:	4a5b      	ldr	r2, [pc, #364]	; (8001624 <HAL_GPIO_EXTI_Callback+0x224>)
 80014b8:	f504 6a00 	add.w	sl, r4, #2048	; 0x800
 80014bc:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8001640 <HAL_GPIO_EXTI_Callback+0x240>
 80014c0:	4f59      	ldr	r7, [pc, #356]	; (8001628 <HAL_GPIO_EXTI_Callback+0x228>)
 80014c2:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8001644 <HAL_GPIO_EXTI_Callback+0x244>
 80014c6:	4e59      	ldr	r6, [pc, #356]	; (800162c <HAL_GPIO_EXTI_Callback+0x22c>)
 80014c8:	f8df b17c 	ldr.w	fp, [pc, #380]	; 8001648 <HAL_GPIO_EXTI_Callback+0x248>
 80014cc:	4d58      	ldr	r5, [pc, #352]	; (8001630 <HAL_GPIO_EXTI_Callback+0x230>)
 80014ce:	601a      	str	r2, [r3, #0]
//	uint16_t i;

	for (i = 0; i < BSIZE; i++)
	{
		CWLevel = fabs(fAudio[i]);
		CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 80014d0:	ed9f bb39 	vldr	d11, [pc, #228]	; 80015b8 <HAL_GPIO_EXTI_Callback+0x1b8>
 80014d4:	ed9f ab3a 	vldr	d10, [pc, #232]	; 80015c0 <HAL_GPIO_EXTI_Callback+0x1c0>
		OldCWLevelAverage = CWLevelFiltered;

		MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 80014d8:	ed9f 9b3b 	vldr	d9, [pc, #236]	; 80015c8 <HAL_GPIO_EXTI_Callback+0x1c8>
 80014dc:	ed9f 8b3c 	vldr	d8, [pc, #240]	; 80015d0 <HAL_GPIO_EXTI_Callback+0x1d0>
 80014e0:	e009      	b.n	80014f6 <HAL_GPIO_EXTI_Callback+0xf6>
			OldMediumLevelAverage = MediumLevelFiltered;
		//		if (CWLevel > (SignalAverage * CWThreshold))
		if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
			DCF77In = 0;
		else
			DCF77In += 1; //TODO limit CW increase
 80014e2:	882a      	ldrh	r2, [r5, #0]
 80014e4:	3201      	adds	r2, #1
 80014e6:	802a      	strh	r2, [r5, #0]
		DumpTrace();
 80014e8:	f002 fc58 	bl	8003d9c <DumpTrace>
		DoDCF77(DCF77In);
 80014ec:	8828      	ldrh	r0, [r5, #0]
 80014ee:	f7ff fc29 	bl	8000d44 <DoDCF77>
	for (i = 0; i < BSIZE; i++)
 80014f2:	45a2      	cmp	sl, r4
 80014f4:	d037      	beq.n	8001566 <HAL_GPIO_EXTI_Callback+0x166>
		CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 80014f6:	ed97 6a00 	vldr	s12, [r7]
		MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 80014fa:	ed96 7a00 	vldr	s14, [r6]
		CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 80014fe:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
		CWLevel = fabs(fAudio[i]);
 8001502:	ecf4 5a01 	vldmia	r4!, {s11}
		MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8001506:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
		if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 800150a:	ed9b 5a00 	vldr	s10, [fp]
		CWLevel = fabs(fAudio[i]);
 800150e:	eef0 5ae5 	vabs.f32	s11, s11
		MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8001512:	4b48      	ldr	r3, [pc, #288]	; (8001634 <HAL_GPIO_EXTI_Callback+0x234>)
		CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8001514:	ee26 6b0b 	vmul.f64	d6, d6, d11
		CWLevel = fabs(fAudio[i]);
 8001518:	edc9 5a00 	vstr	s11, [r9]
		MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 800151c:	ee27 7b09 	vmul.f64	d7, d7, d9
		CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8001520:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
		MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8001524:	eea4 7b08 	vfma.f64	d7, d4, d8
		CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8001528:	eea4 6b0a 	vfma.f64	d6, d4, d10
		MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 800152c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001530:	ed83 7a00 	vstr	s14, [r3]
		CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8001534:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
			OldMediumLevelAverage = MediumLevelFiltered;
 8001538:	ed86 7a00 	vstr	s14, [r6]
		if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 800153c:	ee77 7a46 	vsub.f32	s15, s14, s12
		CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8001540:	ed88 6a00 	vstr	s12, [r8]
		OldCWLevelAverage = CWLevelFiltered;
 8001544:	ed87 6a00 	vstr	s12, [r7]
		if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 8001548:	eef4 7ac5 	vcmpe.f32	s15, s10
 800154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001550:	ddc7      	ble.n	80014e2 <HAL_GPIO_EXTI_Callback+0xe2>
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	802b      	strh	r3, [r5, #0]
		DumpTrace();
 8001558:	f002 fc20 	bl	8003d9c <DumpTrace>
		DoDCF77(DCF77In);
 800155c:	8828      	ldrh	r0, [r5, #0]
 800155e:	f7ff fbf1 	bl	8000d44 <DoDCF77>
	for (i = 0; i < BSIZE; i++)
 8001562:	45a2      	cmp	sl, r4
 8001564:	d1c7      	bne.n	80014f6 <HAL_GPIO_EXTI_Callback+0xf6>
#endif

	// send the demodulated audio to the DMA buffer just emptied

	//LED_YELLOW_ON;
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8001566:	4b34      	ldr	r3, [pc, #208]	; (8001638 <HAL_GPIO_EXTI_Callback+0x238>)
 8001568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156c:	482b      	ldr	r0, [pc, #172]	; (800161c <HAL_GPIO_EXTI_Callback+0x21c>)
 800156e:	6819      	ldr	r1, [r3, #0]
	//LED_YELLOW_OFF;


	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 8001570:	ecbd 8b08 	vpop	{d8-d11}
 8001574:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8001578:	f000 be16 	b.w	80021a8 <SDR_float_to_DAC_audio>
	switch(CurrentMode)
 800157c:	2b03      	cmp	r3, #3
 800157e:	d198      	bne.n	80014b2 <HAL_GPIO_EXTI_Callback+0xb2>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 8001580:	4926      	ldr	r1, [pc, #152]	; (800161c <HAL_GPIO_EXTI_Callback+0x21c>)
 8001582:	4825      	ldr	r0, [pc, #148]	; (8001618 <HAL_GPIO_EXTI_Callback+0x218>)
 8001584:	f001 f866 	bl	8002654 <SDR_demodSSB_CW_AGC>
		if(bw[CW] == Narrow)
 8001588:	4b2c      	ldr	r3, [pc, #176]	; (800163c <HAL_GPIO_EXTI_Callback+0x23c>)
 800158a:	78db      	ldrb	r3, [r3, #3]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d190      	bne.n	80014b2 <HAL_GPIO_EXTI_Callback+0xb2>
			SDR_CWPeak(fAudio, BSIZE);
 8001590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001594:	4821      	ldr	r0, [pc, #132]	; (800161c <HAL_GPIO_EXTI_Callback+0x21c>)
 8001596:	f000 ff43 	bl	8002420 <SDR_CWPeak>
 800159a:	e78a      	b.n	80014b2 <HAL_GPIO_EXTI_Callback+0xb2>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 800159c:	491f      	ldr	r1, [pc, #124]	; (800161c <HAL_GPIO_EXTI_Callback+0x21c>)
 800159e:	481e      	ldr	r0, [pc, #120]	; (8001618 <HAL_GPIO_EXTI_Callback+0x218>)
 80015a0:	f001 f858 	bl	8002654 <SDR_demodSSB_CW_AGC>
 80015a4:	e785      	b.n	80014b2 <HAL_GPIO_EXTI_Callback+0xb2>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80015a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015aa:	4816      	ldr	r0, [pc, #88]	; (8001604 <HAL_GPIO_EXTI_Callback+0x204>)
 80015ac:	f000 fe8c 	bl	80022c8 <SDR_mirror_LSB>
 80015b0:	e763      	b.n	800147a <HAL_GPIO_EXTI_Callback+0x7a>
 80015b2:	bf00      	nop
 80015b4:	f3af 8000 	nop.w
 80015b8:	d916872b 	.word	0xd916872b
 80015bc:	3feff7ce 	.word	0x3feff7ce
 80015c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80015c4:	3f50624d 	.word	0x3f50624d
 80015c8:	074a771d 	.word	0x074a771d
 80015cc:	3fefffeb 	.word	0x3fefffeb
 80015d0:	88e368f1 	.word	0x88e368f1
 80015d4:	3ee4f8b5 	.word	0x3ee4f8b5
 80015d8:	2000d000 	.word	0x2000d000
 80015dc:	20009000 	.word	0x20009000
 80015e0:	24002a38 	.word	0x24002a38
 80015e4:	2000b000 	.word	0x2000b000
 80015e8:	20007000 	.word	0x20007000
 80015ec:	20006800 	.word	0x20006800
 80015f0:	24007cb8 	.word	0x24007cb8
 80015f4:	20006000 	.word	0x20006000
 80015f8:	24007cac 	.word	0x24007cac
 80015fc:	2400ae5c 	.word	0x2400ae5c
 8001600:	24009e5c 	.word	0x24009e5c
 8001604:	20002000 	.word	0x20002000
 8001608:	0801b004 	.word	0x0801b004
 800160c:	20000000 	.word	0x20000000
 8001610:	20004000 	.word	0x20004000
 8001614:	20001000 	.word	0x20001000
 8001618:	2400c3b8 	.word	0x2400c3b8
 800161c:	2400965c 	.word	0x2400965c
 8001620:	24002a24 	.word	0x24002a24
 8001624:	461c3c00 	.word	0x461c3c00
 8001628:	24007c90 	.word	0x24007c90
 800162c:	24007c94 	.word	0x24007c94
 8001630:	24002a3a 	.word	0x24002a3a
 8001634:	24007c88 	.word	0x24007c88
 8001638:	24008e14 	.word	0x24008e14
 800163c:	24009650 	.word	0x24009650
 8001640:	24002a28 	.word	0x24002a28
 8001644:	24002a2c 	.word	0x24002a2c
 8001648:	24002a30 	.word	0x24002a30

0800164c <ADC_Stream0_Handler>:

//#pragma GCC push_options
//#pragma GCC optimize ("O0")

void ADC_Stream0_Handler(uint8_t FullConversion)
{
 800164c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* It needs a delay between fract div disable and parameter setting.
	 * Reference manual says otherwise.
	 * So we disable at the top of the ISR and set the parameter near the bottom.
	 */
	if (TransmittingWSPR)
 8001650:	4d8e      	ldr	r5, [pc, #568]	; (800188c <ADC_Stream0_Handler+0x240>)
{
 8001652:	ed2d 8b10 	vpush	{d8-d15}
	if (TransmittingWSPR)
 8001656:	782b      	ldrb	r3, [r5, #0]
{
 8001658:	b095      	sub	sp, #84	; 0x54
	if (TransmittingWSPR)
 800165a:	b123      	cbz	r3, 8001666 <ADC_Stream0_Handler+0x1a>
	{
		__HAL_RCC_PLL2FRACN_DISABLE();
 800165c:	4a8c      	ldr	r2, [pc, #560]	; (8001890 <ADC_Stream0_Handler+0x244>)
 800165e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001660:	f023 0310 	bic.w	r3, r3, #16
 8001664:	62d3      	str	r3, [r2, #44]	; 0x2c

	// process the data contained in the just filled buffer
	if(FullConversion)
		pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
	else
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8001666:	4f8b      	ldr	r7, [pc, #556]	; (8001894 <ADC_Stream0_Handler+0x248>)
	pR=TestSignalData;
#endif


	// compute the new NCO buffer, with the CWpitch offset if receiving CW
	if(CurrentMode == CW)
 8001668:	4b8b      	ldr	r3, [pc, #556]	; (8001898 <ADC_Stream0_Handler+0x24c>)
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 800166a:	f5a7 6280 	sub.w	r2, r7, #1024	; 0x400
	if(CurrentMode == CW)
 800166e:	781b      	ldrb	r3, [r3, #0]
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8001670:	2800      	cmp	r0, #0
 8001672:	bf08      	it	eq
 8001674:	4617      	moveq	r7, r2
	if(CurrentMode == CW)
 8001676:	2b03      	cmp	r3, #3
 8001678:	f000 8429 	beq.w	8001ece <ADC_Stream0_Handler+0x882>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
	else
		SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 800167c:	4b87      	ldr	r3, [pc, #540]	; (800189c <ADC_Stream0_Handler+0x250>)
 800167e:	ed93 0a00 	vldr	s0, [r3]
 8001682:	f000 fc35 	bl	8001ef0 <SDR_ComputeLO>
	// in the short words to floating point conversion routine

	//TODO Check if it should be BSIZE/2

	sum = 0; k = BSIZE;
	while(k)
 8001686:	f207 32fe 	addw	r2, r7, #1022	; 0x3fe
 800168a:	1eb8      	subs	r0, r7, #2
	sum = 0; k = BSIZE;
 800168c:	ed9f 0a84 	vldr	s0, [pc, #528]	; 80018a0 <ADC_Stream0_Handler+0x254>
	{
		sum += pR[k-1];
 8001690:	8814      	ldrh	r4, [r2, #0]
	while(k)
 8001692:	3a08      	subs	r2, #8
		sum += pR[k-2];
 8001694:	88d3      	ldrh	r3, [r2, #6]
		sum += pR[k-1];
 8001696:	b2a4      	uxth	r4, r4
		sum += pR[k-3];
 8001698:	8896      	ldrh	r6, [r2, #4]
		sum += pR[k-2];
 800169a:	b29b      	uxth	r3, r3
		sum += pR[k-4];
 800169c:	8851      	ldrh	r1, [r2, #2]
		sum += pR[k-1];
 800169e:	ee07 4a90 	vmov	s15, r4
		sum += pR[k-3];
 80016a2:	b2b6      	uxth	r6, r6
		sum += pR[k-2];
 80016a4:	ee07 3a10 	vmov	s14, r3
		sum += pR[k-4];
 80016a8:	b289      	uxth	r1, r1
		sum += pR[k-1];
 80016aa:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
		sum += pR[k-3];
 80016ae:	ee07 6a90 	vmov	s15, r6
		sum += pR[k-2];
 80016b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		sum += pR[k-4];
 80016b6:	ee06 1a90 	vmov	s13, r1
		sum += pR[k-3];
 80016ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	while(k)
 80016be:	4290      	cmp	r0, r2
		sum += pR[k-4];
 80016c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80016c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80016cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016d0:	ee30 0a27 	vadd.f32	s0, s0, s15
	while(k)
 80016d4:	d1dc      	bne.n	8001690 <ADC_Stream0_Handler+0x44>
		k-=4;
	}

	TestSampledValue=pR[BSIZE/2];
 80016d6:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 80016da:	2200      	movs	r2, #0

	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80016dc:	eddf 7a71 	vldr	s15, [pc, #452]	; 80018a4 <ADC_Stream0_Handler+0x258>

	// downconvert to zero IF, by multiplication by the exp(-jwt) signal
	// generated by the NCO, and at the same time convert to floating point
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80016e0:	4638      	mov	r0, r7
	TestSampledValue=pR[BSIZE/2];
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4c70      	ldr	r4, [pc, #448]	; (80018a8 <ADC_Stream0_Handler+0x25c>)
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80016e6:	ee20 0a27 	vmul.f32	s0, s0, s15
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80016ea:	4970      	ldr	r1, [pc, #448]	; (80018ac <ADC_Stream0_Handler+0x260>)
	TestSampledValue=pR[BSIZE/2];
 80016ec:	ee07 3a90 	vmov	s15, r3
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80016f0:	4b6f      	ldr	r3, [pc, #444]	; (80018b0 <ADC_Stream0_Handler+0x264>)
 80016f2:	8022      	strh	r2, [r4, #0]
	TestSampledValue=pR[BSIZE/2];
 80016f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80016f8:	ed83 0a00 	vstr	s0, [r3]
	TestSampledValue=pR[BSIZE/2];
 80016fc:	4b6d      	ldr	r3, [pc, #436]	; (80018b4 <ADC_Stream0_Handler+0x268>)
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80016fe:	4a6e      	ldr	r2, [pc, #440]	; (80018b8 <ADC_Stream0_Handler+0x26c>)
	TestSampledValue=pR[BSIZE/2];
 8001700:	edc3 7a00 	vstr	s15, [r3]
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001704:	f000 fcde 	bl	80020c4 <SDR_downconvert_f32>


	ptDataR = ADC_Rdata;  ptDataI = ADC_Idata;


	if (TransmittingWSPR)
 8001708:	782b      	ldrb	r3, [r5, #0]
 800170a:	b30b      	cbz	r3, 8001750 <ADC_Stream0_Handler+0x104>
	{
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 800170c:	4d6b      	ldr	r5, [pc, #428]	; (80018bc <ADC_Stream0_Handler+0x270>)
 800170e:	496c      	ldr	r1, [pc, #432]	; (80018c0 <ADC_Stream0_Handler+0x274>)
 8001710:	f9b5 2000 	ldrsh.w	r2, [r5]
 8001714:	4b6b      	ldr	r3, [pc, #428]	; (80018c4 <ADC_Stream0_Handler+0x278>)
 8001716:	7809      	ldrb	r1, [r1, #0]
 8001718:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800171c:	1c53      	adds	r3, r2, #1
 800171e:	4282      	cmp	r2, r0
 8001720:	b21b      	sxth	r3, r3
		{
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1);
 8001722:	485b      	ldr	r0, [pc, #364]	; (8001890 <ADC_Stream0_Handler+0x244>)
 8001724:	4a68      	ldr	r2, [pc, #416]	; (80018c8 <ADC_Stream0_Handler+0x27c>)
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 8001726:	802b      	strh	r3, [r5, #0]
 8001728:	f2c0 8352 	blt.w	8001dd0 <ADC_Stream0_Handler+0x784>
		}
		else
		{
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 800172c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001730:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
		}
		if (IntCounter == 8)
 8001732:	2b08      	cmp	r3, #8
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 8001734:	4a65      	ldr	r2, [pc, #404]	; (80018cc <ADC_Stream0_Handler+0x280>)
 8001736:	ea02 0206 	and.w	r2, r2, r6
 800173a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800173e:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (IntCounter == 8)
 8001740:	d101      	bne.n	8001746 <ADC_Stream0_Handler+0xfa>
		{
			IntCounter = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	802b      	strh	r3, [r5, #0]
		}
		__HAL_RCC_PLL2FRACN_ENABLE();
 8001746:	4a52      	ldr	r2, [pc, #328]	; (8001890 <ADC_Stream0_Handler+0x244>)
 8001748:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800174a:	f043 0310 	orr.w	r3, r3, #16
 800174e:	62d3      	str	r3, [r2, #44]	; 0x2c
	// passed to the baseband interrupt routine, where it is additionally filtered with a
	// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
	//-------------------------------------------------------------------------

	k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
	while(k--)
 8001750:	4a5f      	ldr	r2, [pc, #380]	; (80018d0 <ADC_Stream0_Handler+0x284>)
 8001752:	23ff      	movs	r3, #255	; 0xff
 8001754:	495f      	ldr	r1, [pc, #380]	; (80018d4 <ADC_Stream0_Handler+0x288>)
 8001756:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800175a:	ed92 2a00 	vldr	s4, [r2]
 800175e:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8001762:	4a5d      	ldr	r2, [pc, #372]	; (80018d8 <ADC_Stream0_Handler+0x28c>)
 8001764:	edd1 3a00 	vldr	s7, [r1]
 8001768:	edd2 1a00 	vldr	s3, [r2]
 800176c:	4a5b      	ldr	r2, [pc, #364]	; (80018dc <ADC_Stream0_Handler+0x290>)
 800176e:	495c      	ldr	r1, [pc, #368]	; (80018e0 <ADC_Stream0_Handler+0x294>)
 8001770:	ed92 7a00 	vldr	s14, [r2]
 8001774:	4a5b      	ldr	r2, [pc, #364]	; (80018e4 <ADC_Stream0_Handler+0x298>)
 8001776:	ed91 9a00 	vldr	s18, [r1]
 800177a:	eeb0 6a47 	vmov.f32	s12, s14
 800177e:	edd2 2a00 	vldr	s5, [r2]
 8001782:	4959      	ldr	r1, [pc, #356]	; (80018e8 <ADC_Stream0_Handler+0x29c>)
 8001784:	4a59      	ldr	r2, [pc, #356]	; (80018ec <ADC_Stream0_Handler+0x2a0>)
 8001786:	edd1 ea00 	vldr	s29, [r1]
 800178a:	edd2 8a00 	vldr	s17, [r2]
 800178e:	4958      	ldr	r1, [pc, #352]	; (80018f0 <ADC_Stream0_Handler+0x2a4>)
 8001790:	4a58      	ldr	r2, [pc, #352]	; (80018f4 <ADC_Stream0_Handler+0x2a8>)
 8001792:	edd1 6a00 	vldr	s13, [r1]
 8001796:	ed92 5a00 	vldr	s10, [r2]
 800179a:	4957      	ldr	r1, [pc, #348]	; (80018f8 <ADC_Stream0_Handler+0x2ac>)
 800179c:	4a57      	ldr	r2, [pc, #348]	; (80018fc <ADC_Stream0_Handler+0x2b0>)
 800179e:	edd1 ca00 	vldr	s25, [r1]
 80017a2:	edd2 fa00 	vldr	s31, [r2]
 80017a6:	4956      	ldr	r1, [pc, #344]	; (8001900 <ADC_Stream0_Handler+0x2b4>)
 80017a8:	4a56      	ldr	r2, [pc, #344]	; (8001904 <ADC_Stream0_Handler+0x2b8>)
 80017aa:	ed91 da00 	vldr	s26, [r1]
 80017ae:	ed92 8a00 	vldr	s16, [r2]
 80017b2:	4955      	ldr	r1, [pc, #340]	; (8001908 <ADC_Stream0_Handler+0x2bc>)
 80017b4:	4a55      	ldr	r2, [pc, #340]	; (800190c <ADC_Stream0_Handler+0x2c0>)
 80017b6:	edcd 6a02 	vstr	s13, [sp, #8]
 80017ba:	edd2 5a00 	vldr	s11, [r2]
 80017be:	edd1 6a00 	vldr	s13, [r1]
 80017c2:	4a53      	ldr	r2, [pc, #332]	; (8001910 <ADC_Stream0_Handler+0x2c4>)
 80017c4:	4953      	ldr	r1, [pc, #332]	; (8001914 <ADC_Stream0_Handler+0x2c8>)
 80017c6:	ed92 fa00 	vldr	s30, [r2]
 80017ca:	ed91 ca00 	vldr	s24, [r1]
 80017ce:	4a52      	ldr	r2, [pc, #328]	; (8001918 <ADC_Stream0_Handler+0x2cc>)
 80017d0:	4952      	ldr	r1, [pc, #328]	; (800191c <ADC_Stream0_Handler+0x2d0>)
 80017d2:	edd2 ba00 	vldr	s23, [r2]
 80017d6:	edcd 6a01 	vstr	s13, [sp, #4]
 80017da:	4a51      	ldr	r2, [pc, #324]	; (8001920 <ADC_Stream0_Handler+0x2d4>)
 80017dc:	edd1 6a00 	vldr	s13, [r1]
 80017e0:	4950      	ldr	r1, [pc, #320]	; (8001924 <ADC_Stream0_Handler+0x2d8>)
 80017e2:	ed92 3a00 	vldr	s6, [r2]
 80017e6:	edcd 6a03 	vstr	s13, [sp, #12]
 80017ea:	4a4f      	ldr	r2, [pc, #316]	; (8001928 <ADC_Stream0_Handler+0x2dc>)
 80017ec:	edd1 6a00 	vldr	s13, [r1]
 80017f0:	494e      	ldr	r1, [pc, #312]	; (800192c <ADC_Stream0_Handler+0x2e0>)
 80017f2:	edd2 9a00 	vldr	s19, [r2]
 80017f6:	edcd 6a08 	vstr	s13, [sp, #32]
 80017fa:	4a4d      	ldr	r2, [pc, #308]	; (8001930 <ADC_Stream0_Handler+0x2e4>)
 80017fc:	edd1 6a00 	vldr	s13, [r1]
 8001800:	f8df a158 	ldr.w	sl, [pc, #344]	; 800195c <ADC_Stream0_Handler+0x310>
 8001804:	494b      	ldr	r1, [pc, #300]	; (8001934 <ADC_Stream0_Handler+0x2e8>)
 8001806:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8001960 <ADC_Stream0_Handler+0x314>
 800180a:	ed92 ba00 	vldr	s22, [r2]
 800180e:	ed9a 1a00 	vldr	s2, [sl]
 8001812:	edd9 7a00 	vldr	s15, [r9]
 8001816:	8023      	strh	r3, [r4, #0]
 8001818:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
 800181c:	edd1 6a00 	vldr	s13, [r1]
 8001820:	4945      	ldr	r1, [pc, #276]	; (8001938 <ADC_Stream0_Handler+0x2ec>)
 8001822:	edcd 6a00 	vstr	s13, [sp]
 8001826:	edd1 6a00 	vldr	s13, [r1]
 800182a:	4944      	ldr	r1, [pc, #272]	; (800193c <ADC_Stream0_Handler+0x2f0>)
 800182c:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 8001830:	edd1 6a00 	vldr	s13, [r1]
 8001834:	4942      	ldr	r1, [pc, #264]	; (8001940 <ADC_Stream0_Handler+0x2f4>)
 8001836:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8001964 <ADC_Stream0_Handler+0x318>
 800183a:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 800183e:	edd1 6a00 	vldr	s13, [r1]
 8001842:	4f40      	ldr	r7, [pc, #256]	; (8001944 <ADC_Stream0_Handler+0x2f8>)
 8001844:	edcd 6a06 	vstr	s13, [sp, #24]
 8001848:	edd8 6a00 	vldr	s13, [r8]
 800184c:	4e3e      	ldr	r6, [pc, #248]	; (8001948 <ADC_Stream0_Handler+0x2fc>)
 800184e:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 8001852:	edd7 6a00 	vldr	s13, [r7]
 8001856:	493d      	ldr	r1, [pc, #244]	; (800194c <ADC_Stream0_Handler+0x300>)
 8001858:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 800185c:	edd6 6a00 	vldr	s13, [r6]
 8001860:	f8df b104 	ldr.w	fp, [pc, #260]	; 8001968 <ADC_Stream0_Handler+0x31c>
 8001864:	edcd 6a07 	vstr	s13, [sp, #28]
 8001868:	edd1 6a00 	vldr	s13, [r1]
 800186c:	4938      	ldr	r1, [pc, #224]	; (8001950 <ADC_Stream0_Handler+0x304>)
 800186e:	4a39      	ldr	r2, [pc, #228]	; (8001954 <ADC_Stream0_Handler+0x308>)
 8001870:	f9bb 0000 	ldrsh.w	r0, [fp]
 8001874:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8001878:	f502 6c00 	add.w	ip, r2, #2048	; 0x800
 800187c:	edd1 6a00 	vldr	s13, [r1]
 8001880:	4686      	mov	lr, r0
 8001882:	4935      	ldr	r1, [pc, #212]	; (8001958 <ADC_Stream0_Handler+0x30c>)
 8001884:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8001888:	e173      	b.n	8001b72 <ADC_Stream0_Handler+0x526>
 800188a:	bf00      	nop
 800188c:	24007d05 	.word	0x24007d05
 8001890:	58024400 	.word	0x58024400
 8001894:	24009240 	.word	0x24009240
 8001898:	24002a38 	.word	0x24002a38
 800189c:	24007c74 	.word	0x24007c74
 80018a0:	00000000 	.word	0x00000000
 80018a4:	3b000000 	.word	0x3b000000
 80018a8:	2400083c 	.word	0x2400083c
 80018ac:	24001a0c 	.word	0x24001a0c
 80018b0:	2400c238 	.word	0x2400c238
 80018b4:	24007d00 	.word	0x24007d00
 80018b8:	2400120c 	.word	0x2400120c
 80018bc:	240007a8 	.word	0x240007a8
 80018c0:	24008e1a 	.word	0x24008e1a
 80018c4:	24006c58 	.word	0x24006c58
 80018c8:	24006c4c 	.word	0x24006c4c
 80018cc:	ffff0007 	.word	0xffff0007
 80018d0:	240007b0 	.word	0x240007b0
 80018d4:	24000800 	.word	0x24000800
 80018d8:	240007dc 	.word	0x240007dc
 80018dc:	240007e0 	.word	0x240007e0
 80018e0:	240007bc 	.word	0x240007bc
 80018e4:	240007ac 	.word	0x240007ac
 80018e8:	24000814 	.word	0x24000814
 80018ec:	240007f4 	.word	0x240007f4
 80018f0:	24000818 	.word	0x24000818
 80018f4:	240007f8 	.word	0x240007f8
 80018f8:	240007c8 	.word	0x240007c8
 80018fc:	240007b8 	.word	0x240007b8
 8001900:	2400080c 	.word	0x2400080c
 8001904:	240007ec 	.word	0x240007ec
 8001908:	24000810 	.word	0x24000810
 800190c:	240007f0 	.word	0x240007f0
 8001910:	240007b4 	.word	0x240007b4
 8001914:	240007c4 	.word	0x240007c4
 8001918:	24000804 	.word	0x24000804
 800191c:	24000824 	.word	0x24000824
 8001920:	24000808 	.word	0x24000808
 8001924:	24000828 	.word	0x24000828
 8001928:	240007c0 	.word	0x240007c0
 800192c:	240007d0 	.word	0x240007d0
 8001930:	240007fc 	.word	0x240007fc
 8001934:	2400081c 	.word	0x2400081c
 8001938:	24000820 	.word	0x24000820
 800193c:	240007cc 	.word	0x240007cc
 8001940:	24000834 	.word	0x24000834
 8001944:	240007d8 	.word	0x240007d8
 8001948:	2400082c 	.word	0x2400082c
 800194c:	24000830 	.word	0x24000830
 8001950:	240007d4 	.word	0x240007d4
 8001954:	24001a14 	.word	0x24001a14
 8001958:	24001214 	.word	0x24001214
 800195c:	240007e4 	.word	0x240007e4
 8001960:	240007e8 	.word	0x240007e8
 8001964:	24000838 	.word	0x24000838
 8001968:	240007aa 	.word	0x240007aa
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 2
		// now compute the couple of elements for the next step

		inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 800196c:	eea8 5a84 	vfma.f32	s10, s17, s8

		inE2Rold = inER;                           inE2Iold = inEI;
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;

		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 8001970:	0798      	lsls	r0, r3, #30
 8001972:	eee8 5a04 	vfma.f32	s11, s16, s8
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 8001976:	ee7f faaa 	vadd.f32	s31, s31, s21
 800197a:	ee3f fa0a 	vadd.f32	s30, s30, s20
 800197e:	eeaf 5aa4 	vfma.f32	s10, s31, s9
 8001982:	eeef 5a24 	vfma.f32	s11, s30, s9
 8001986:	ee75 6a27 	vadd.f32	s13, s10, s15
 800198a:	ee35 6a87 	vadd.f32	s12, s11, s14
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 800198e:	f100 8118 	bmi.w	8001bc2 <ADC_Stream0_Handler+0x576>
		// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8001992:	eeab 3a84 	vfma.f32	s6, s23, s8

		inE3Rold  = inER;                          inE3Iold  = inEI;
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8001996:	075d      	lsls	r5, r3, #29
 8001998:	eeeb 3a04 	vfma.f32	s7, s22, s8
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 800199c:	ee79 9a8e 	vadd.f32	s19, s19, s28
 80019a0:	ee39 9a2d 	vadd.f32	s18, s18, s27
 80019a4:	eea9 3aa4 	vfma.f32	s6, s19, s9
 80019a8:	eee9 3a24 	vfma.f32	s7, s18, s9
 80019ac:	ee33 9a26 	vadd.f32	s18, s6, s13
 80019b0:	ee73 9a86 	vadd.f32	s19, s7, s12
		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 80019b4:	f100 8116 	bmi.w	8001be4 <ADC_Stream0_Handler+0x598>
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 8
		// now compute the couple of elements for the next step

		inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 80019b8:	eddd 5a02 	vldr	s11, [sp, #8]

		inE4Rold = inER;                           inE4Iold = inEI;
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 80019bc:	0718      	lsls	r0, r3, #28
 80019be:	ed9d 5a01 	vldr	s10, [sp, #4]
 80019c2:	eeee 5a84 	vfma.f32	s11, s29, s8
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 80019c6:	eddd 3a05 	vldr	s7, [sp, #20]
 80019ca:	eead 5a04 	vfma.f32	s10, s26, s8
 80019ce:	ed9d 3a04 	vldr	s6, [sp, #16]
 80019d2:	ee7c caa3 	vadd.f32	s25, s25, s7
 80019d6:	ee3c ca03 	vadd.f32	s24, s24, s6
 80019da:	eeec 5aa4 	vfma.f32	s11, s25, s9
 80019de:	eeac 5a24 	vfma.f32	s10, s24, s9
 80019e2:	ee39 ca25 	vadd.f32	s24, s18, s11
 80019e6:	ee75 ca29 	vadd.f32	s25, s10, s19
		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 80019ea:	f100 81a5 	bmi.w	8001d38 <ADC_Stream0_Handler+0x6ec>
		// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80019ee:	ed9d fa08 	vldr	s30, [sp, #32]
		inE5Rold  = inER;                          inE5Iold  = inEI;
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;



		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80019f2:	f013 0010 	ands.w	r0, r3, #16
 80019f6:	ed9d 3a03 	vldr	s6, [sp, #12]
 80019fa:	eddd 5a00 	vldr	s11, [sp]
 80019fe:	eddd fa0a 	vldr	s31, [sp, #40]	; 0x28
 8001a02:	eea3 fa04 	vfma.f32	s30, s6, s8
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001a06:	ed9d 5a11 	vldr	s10, [sp, #68]	; 0x44
 8001a0a:	eee5 fa84 	vfma.f32	s31, s11, s8
 8001a0e:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8001a12:	ee75 5a25 	vadd.f32	s11, s10, s11
 8001a16:	ed9d 5a10 	vldr	s10, [sp, #64]	; 0x40
 8001a1a:	eea5 faa4 	vfma.f32	s30, s11, s9
 8001a1e:	eddd 5a0b 	vldr	s11, [sp, #44]	; 0x2c
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001a22:	900b      	str	r0, [sp, #44]	; 0x2c
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001a24:	ee75 5a25 	vadd.f32	s11, s10, s11
 8001a28:	eee5 faa4 	vfma.f32	s31, s11, s9
 8001a2c:	ee3c fa0f 	vadd.f32	s30, s24, s30
 8001a30:	ed8d fa09 	vstr	s30, [sp, #36]	; 0x24
 8001a34:	ee7c faaf 	vadd.f32	s31, s25, s31
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001a38:	f040 819b 	bne.w	8001d72 <ADC_Stream0_Handler+0x726>
		// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
		// produced with 4 of the previous elem, i.e. with 16 input samples, totalling
		// a decimation by 16. Now compute the couple of elements for the next step

		inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001a3c:	eddd 3a06 	vldr	s7, [sp, #24]
		// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
		// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band

		// create a block of BSIZE*4 entries, which will be then decimated by 4

		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001a40:	ea4f 008e 	mov.w	r0, lr, lsl #2
 8001a44:	eddd 5a0c 	vldr	s11, [sp, #48]	; 0x30
 8001a48:	ed9d 5a0e 	vldr	s10, [sp, #56]	; 0x38
 8001a4c:	eee3 5a84 	vfma.f32	s11, s7, s8
 8001a50:	eddd 3a07 	vldr	s7, [sp, #28]
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001a54:	ed9d fa0d 	vldr	s30, [sp, #52]	; 0x34
 8001a58:	eea3 5a84 	vfma.f32	s10, s7, s8
 8001a5c:	eddd 3a12 	vldr	s7, [sp, #72]	; 0x48
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001a60:	4ddd      	ldr	r5, [pc, #884]	; (8001dd8 <ADC_Stream0_Handler+0x78c>)
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001a62:	ee73 3a8f 	vadd.f32	s7, s7, s30
 8001a66:	ed9d fa0f 	vldr	s30, [sp, #60]	; 0x3c
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001a6a:	4428      	add	r0, r5
 8001a6c:	4ddb      	ldr	r5, [pc, #876]	; (8001ddc <ADC_Stream0_Handler+0x790>)
 8001a6e:	eee3 5aa4 	vfma.f32	s11, s7, s9
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001a72:	eddd 3a13 	vldr	s7, [sp, #76]	; 0x4c
 8001a76:	ee73 3a8f 	vadd.f32	s7, s7, s30
 8001a7a:	ed9d fa09 	vldr	s30, [sp, #36]	; 0x24
 8001a7e:	eea3 5aa4 	vfma.f32	s10, s7, s9
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001a82:	eddf 3ad7 	vldr	s7, [pc, #860]	; 8001de0 <ADC_Stream0_Handler+0x794>
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001a86:	ee75 5a8f 	vadd.f32	s11, s11, s30
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001a8a:	ee65 5aa3 	vmul.f32	s11, s11, s7
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001a8e:	ee35 5a2f 	vadd.f32	s10, s10, s31
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001a92:	ee25 5a23 	vmul.f32	s10, s10, s7
 8001a96:	ed80 5a00 	vstr	s10, [r0]
 8001a9a:	f10e 0001 	add.w	r0, lr, #1
 8001a9e:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 8001aa2:	edce 5a00 	vstr	s11, [lr]
 8001aa6:	fa0f fe80 	sxth.w	lr, r0
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001aaa:	eddd 5a07 	vldr	s11, [sp, #28]
		//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

		if(idx < BSIZE*4)
 8001aae:	f5be 6f00 	cmp.w	lr, #2048	; 0x800
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001ab2:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
		if(idx < BSIZE*4)
 8001ab6:	f2c0 81d3 	blt.w	8001e60 <ADC_Stream0_Handler+0x814>
#endif


			// generate now an interrupt to signal the base band processing routine that it has a new buffer

			EXTI->SWIER1 |= GPIO_PIN_14;
 8001aba:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001abe:	eddd 3a06 	vldr	s7, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001ac2:	eddd 5a00 	vldr	s11, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001ac6:	eeb0 5a68 	vmov.f32	s10, s17
			EXTI->SWIER1 |= GPIO_PIN_14;
 8001aca:	68a8      	ldr	r0, [r5, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001acc:	eef0 8a67 	vmov.f32	s17, s15
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001ad0:	ed8d da01 	vstr	s26, [sp, #4]
 8001ad4:	eeb0 da69 	vmov.f32	s26, s19
 8001ad8:	edcd ea02 	vstr	s29, [sp, #8]
 8001adc:	eef0 ea49 	vmov.f32	s29, s18
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001ae0:	edcd 3a0c 	vstr	s7, [sp, #48]	; 0x30
			EXTI->SWIER1 |= GPIO_PIN_14;
 8001ae4:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001ae8:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001aec:	eef0 3a4b 	vmov.f32	s7, s22
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001af0:	ed8d 3a08 	vstr	s6, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001af4:	eef0 5a48 	vmov.f32	s11, s16
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001af8:	eeb0 3a6b 	vmov.f32	s6, s23
		idx = 0;
 8001afc:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001b00:	eeb0 ba46 	vmov.f32	s22, s12
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b04:	ed9d 6a13 	vldr	s12, [sp, #76]	; 0x4c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001b08:	eef0 ba66 	vmov.f32	s23, s13
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b0c:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b10:	eeb0 8a47 	vmov.f32	s16, s14
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8001b14:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b18:	edcd fa07 	vstr	s31, [sp, #28]
 8001b1c:	ed8d fa06 	vstr	s30, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b20:	edcd ca00 	vstr	s25, [sp]
 8001b24:	ed8d ca03 	vstr	s24, [sp, #12]
			EXTI->SWIER1 |= GPIO_PIN_14;
 8001b28:	60a8      	str	r0, [r5, #8]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b2a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8001b2e:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8001b32:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8001b36:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8001b3a:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8001b3e:	eeb0 9a6d 	vmov.f32	s18, s27
		inE4Rold = inER;                           inE4Iold = inEI;
 8001b42:	ed9d ca04 	vldr	s24, [sp, #16]
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8001b46:	eef0 9a4e 	vmov.f32	s19, s28
		inE4Rold = inER;                           inE4Iold = inEI;
 8001b4a:	eddd ca05 	vldr	s25, [sp, #20]
		inE2Rold = inER;                           inE2Iold = inEI;
 8001b4e:	eeb0 fa4a 	vmov.f32	s30, s20
 8001b52:	eef0 fa6a 	vmov.f32	s31, s21
	while(k--)
 8001b56:	3208      	adds	r2, #8
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	eef0 7a41 	vmov.f32	s15, s2
 8001b5e:	3108      	adds	r1, #8
 8001b60:	4594      	cmp	ip, r2
 8001b62:	eeb0 6a61 	vmov.f32	s12, s3
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	d059      	beq.n	8001c1e <ADC_Stream0_Handler+0x5d2>
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 8001b6a:	eef0 1a60 	vmov.f32	s3, s1
 8001b6e:	eeb0 1a40 	vmov.f32	s2, s0
 8001b72:	eeb0 7a42 	vmov.f32	s14, s4
 8001b76:	ed12 0a01 	vldr	s0, [r2, #-4]
 8001b7a:	ed12 2a02 	vldr	s4, [r2, #-8]
 8001b7e:	eef0 6a62 	vmov.f32	s13, s5
 8001b82:	ed51 0a01 	vldr	s1, [r1, #-4]
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8001b86:	07dd      	lsls	r5, r3, #31
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001b88:	ee72 2a07 	vadd.f32	s5, s4, s14
 8001b8c:	eeb0 7a40 	vmov.f32	s14, s0
 8001b90:	eea1 7a04 	vfma.f32	s14, s2, s8
 8001b94:	eea2 7aa4 	vfma.f32	s14, s5, s9
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 8001b98:	ed51 2a02 	vldr	s5, [r1, #-8]
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001b9c:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8001ba0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ba4:	eeb0 7a60 	vmov.f32	s14, s1
 8001ba8:	eea1 7a84 	vfma.f32	s14, s3, s8
 8001bac:	eea6 7aa4 	vfma.f32	s14, s13, s9
 8001bb0:	ee36 7a07 	vadd.f32	s14, s12, s14
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8001bb4:	f57f aeda 	bpl.w	800196c <ADC_Stream0_Handler+0x320>
			tmp1R = outR; tmp1I = outI;  // save the even element produced
 8001bb8:	eeb0 aa47 	vmov.f32	s20, s14
 8001bbc:	eef0 aa67 	vmov.f32	s21, s15
 8001bc0:	e7c9      	b.n	8001b56 <ADC_Stream0_Handler+0x50a>
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001bc2:	eef0 5a48 	vmov.f32	s11, s16
 8001bc6:	eeb0 5a68 	vmov.f32	s10, s17
 8001bca:	eeb0 8a47 	vmov.f32	s16, s14
 8001bce:	eef0 8a67 	vmov.f32	s17, s15
			tmp2R = outR; tmp2I = outI;  // save the even element produced
 8001bd2:	eef0 da46 	vmov.f32	s27, s12
 8001bd6:	eeb0 ea66 	vmov.f32	s28, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 8001bda:	eeb0 fa4a 	vmov.f32	s30, s20
 8001bde:	eef0 fa6a 	vmov.f32	s31, s21
 8001be2:	e7b8      	b.n	8001b56 <ADC_Stream0_Handler+0x50a>
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001be4:	eef0 3a4b 	vmov.f32	s7, s22
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 8001be8:	edcd 9a04 	vstr	s19, [sp, #16]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001bec:	eeb0 3a6b 	vmov.f32	s6, s23
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 8001bf0:	ed8d 9a05 	vstr	s18, [sp, #20]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001bf4:	eef0 5a48 	vmov.f32	s11, s16
 8001bf8:	eeb0 5a68 	vmov.f32	s10, s17
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001bfc:	eeb0 ba46 	vmov.f32	s22, s12
 8001c00:	eef0 ba66 	vmov.f32	s23, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001c04:	eeb0 8a47 	vmov.f32	s16, s14
 8001c08:	eef0 8a67 	vmov.f32	s17, s15
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8001c0c:	eeb0 9a6d 	vmov.f32	s18, s27
 8001c10:	eef0 9a4e 	vmov.f32	s19, s28
		inE2Rold = inER;                           inE2Iold = inEI;
 8001c14:	eeb0 fa4a 	vmov.f32	s30, s20
 8001c18:	eef0 fa6a 	vmov.f32	s31, s21
 8001c1c:	e79b      	b.n	8001b56 <ADC_Stream0_Handler+0x50a>
 8001c1e:	4b71      	ldr	r3, [pc, #452]	; (8001de4 <ADC_Stream0_Handler+0x798>)
 8001c20:	eddd 7a02 	vldr	s15, [sp, #8]
 8001c24:	ed83 2a00 	vstr	s4, [r3]
 8001c28:	4b6f      	ldr	r3, [pc, #444]	; (8001de8 <ADC_Stream0_Handler+0x79c>)
 8001c2a:	ed8a 0a00 	vstr	s0, [sl]
 8001c2e:	edc3 0a00 	vstr	s1, [r3]
 8001c32:	4b6e      	ldr	r3, [pc, #440]	; (8001dec <ADC_Stream0_Handler+0x7a0>)
 8001c34:	ed89 1a00 	vstr	s2, [r9]
 8001c38:	edc3 1a00 	vstr	s3, [r3]
 8001c3c:	4b6c      	ldr	r3, [pc, #432]	; (8001df0 <ADC_Stream0_Handler+0x7a4>)
 8001c3e:	4a6d      	ldr	r2, [pc, #436]	; (8001df4 <ADC_Stream0_Handler+0x7a8>)
 8001c40:	edc3 2a00 	vstr	s5, [r3]
 8001c44:	4b6c      	ldr	r3, [pc, #432]	; (8001df8 <ADC_Stream0_Handler+0x7ac>)
 8001c46:	edc3 8a00 	vstr	s17, [r3]
 8001c4a:	4b6c      	ldr	r3, [pc, #432]	; (8001dfc <ADC_Stream0_Handler+0x7b0>)
 8001c4c:	ed83 5a00 	vstr	s10, [r3]
 8001c50:	4b6b      	ldr	r3, [pc, #428]	; (8001e00 <ADC_Stream0_Handler+0x7b4>)
 8001c52:	edc3 fa00 	vstr	s31, [r3]
 8001c56:	4b6b      	ldr	r3, [pc, #428]	; (8001e04 <ADC_Stream0_Handler+0x7b8>)
 8001c58:	ed83 8a00 	vstr	s16, [r3]
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <ADC_Stream0_Handler+0x7bc>)
 8001c5e:	edc3 5a00 	vstr	s11, [r3]
 8001c62:	4b6a      	ldr	r3, [pc, #424]	; (8001e0c <ADC_Stream0_Handler+0x7c0>)
 8001c64:	ed83 fa00 	vstr	s30, [r3]
 8001c68:	4b69      	ldr	r3, [pc, #420]	; (8001e10 <ADC_Stream0_Handler+0x7c4>)
 8001c6a:	edc3 ba00 	vstr	s23, [r3]
 8001c6e:	4b69      	ldr	r3, [pc, #420]	; (8001e14 <ADC_Stream0_Handler+0x7c8>)
 8001c70:	ed83 3a00 	vstr	s6, [r3]
 8001c74:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <ADC_Stream0_Handler+0x7cc>)
 8001c76:	edc3 9a00 	vstr	s19, [r3]
 8001c7a:	4b68      	ldr	r3, [pc, #416]	; (8001e1c <ADC_Stream0_Handler+0x7d0>)
 8001c7c:	ed83 ba00 	vstr	s22, [r3]
 8001c80:	4b67      	ldr	r3, [pc, #412]	; (8001e20 <ADC_Stream0_Handler+0x7d4>)
 8001c82:	edc3 3a00 	vstr	s7, [r3]
 8001c86:	4b67      	ldr	r3, [pc, #412]	; (8001e24 <ADC_Stream0_Handler+0x7d8>)
 8001c88:	ed83 9a00 	vstr	s18, [r3]
 8001c8c:	4b66      	ldr	r3, [pc, #408]	; (8001e28 <ADC_Stream0_Handler+0x7dc>)
 8001c8e:	edc3 ea00 	vstr	s29, [r3]
 8001c92:	4b66      	ldr	r3, [pc, #408]	; (8001e2c <ADC_Stream0_Handler+0x7e0>)
 8001c94:	edc3 7a00 	vstr	s15, [r3]
 8001c98:	4b65      	ldr	r3, [pc, #404]	; (8001e30 <ADC_Stream0_Handler+0x7e4>)
 8001c9a:	eddd 7a01 	vldr	s15, [sp, #4]
 8001c9e:	edc3 ca00 	vstr	s25, [r3]
 8001ca2:	4b64      	ldr	r3, [pc, #400]	; (8001e34 <ADC_Stream0_Handler+0x7e8>)
 8001ca4:	ed83 da00 	vstr	s26, [r3]
 8001ca8:	4b63      	ldr	r3, [pc, #396]	; (8001e38 <ADC_Stream0_Handler+0x7ec>)
 8001caa:	edc3 7a00 	vstr	s15, [r3]
 8001cae:	4b63      	ldr	r3, [pc, #396]	; (8001e3c <ADC_Stream0_Handler+0x7f0>)
 8001cb0:	eddd 7a03 	vldr	s15, [sp, #12]
 8001cb4:	ed83 ca00 	vstr	s24, [r3]
 8001cb8:	4b61      	ldr	r3, [pc, #388]	; (8001e40 <ADC_Stream0_Handler+0x7f4>)
 8001cba:	edc3 7a00 	vstr	s15, [r3]
 8001cbe:	eddd 7a08 	vldr	s15, [sp, #32]
 8001cc2:	4b60      	ldr	r3, [pc, #384]	; (8001e44 <ADC_Stream0_Handler+0x7f8>)
 8001cc4:	edc3 7a00 	vstr	s15, [r3]
 8001cc8:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8001ccc:	4b5e      	ldr	r3, [pc, #376]	; (8001e48 <ADC_Stream0_Handler+0x7fc>)
 8001cce:	edc3 7a00 	vstr	s15, [r3]
 8001cd2:	eddd 7a00 	vldr	s15, [sp]
 8001cd6:	4b5d      	ldr	r3, [pc, #372]	; (8001e4c <ADC_Stream0_Handler+0x800>)
 8001cd8:	f8ab e000 	strh.w	lr, [fp]
 8001cdc:	edc3 7a00 	vstr	s15, [r3]
 8001ce0:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8001ce4:	4b5a      	ldr	r3, [pc, #360]	; (8001e50 <ADC_Stream0_Handler+0x804>)
 8001ce6:	edc3 7a00 	vstr	s15, [r3]
 8001cea:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8001cee:	4b59      	ldr	r3, [pc, #356]	; (8001e54 <ADC_Stream0_Handler+0x808>)
 8001cf0:	edc3 7a00 	vstr	s15, [r3]
 8001cf4:	eddd 7a06 	vldr	s15, [sp, #24]
 8001cf8:	4b57      	ldr	r3, [pc, #348]	; (8001e58 <ADC_Stream0_Handler+0x80c>)
 8001cfa:	edc3 7a00 	vstr	s15, [r3]
 8001cfe:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8001d02:	4b56      	ldr	r3, [pc, #344]	; (8001e5c <ADC_Stream0_Handler+0x810>)
 8001d04:	edc8 7a00 	vstr	s15, [r8]
 8001d08:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8001d0c:	edc7 7a00 	vstr	s15, [r7]
 8001d10:	eddd 7a07 	vldr	s15, [sp, #28]
 8001d14:	edc6 7a00 	vstr	s15, [r6]
 8001d18:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8001d1c:	edc3 7a00 	vstr	s15, [r3]
 8001d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d24:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8001d28:	8023      	strh	r3, [r4, #0]
 8001d2a:	edc2 7a00 	vstr	s15, [r2]
		}

		// LED_YELLOW_OFF;

	}
 8001d2e:	b015      	add	sp, #84	; 0x54
 8001d30:	ecbd 8b10 	vpop	{d8-d15}
 8001d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001d38:	eef0 3a4b 	vmov.f32	s7, s22
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001d3c:	ed8d da01 	vstr	s26, [sp, #4]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001d40:	eeb0 3a6b 	vmov.f32	s6, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001d44:	edcd ea02 	vstr	s29, [sp, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001d48:	eef0 5a48 	vmov.f32	s11, s16
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 8001d4c:	edcd ca10 	vstr	s25, [sp, #64]	; 0x40
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001d50:	eeb0 5a68 	vmov.f32	s10, s17
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 8001d54:	ed8d ca11 	vstr	s24, [sp, #68]	; 0x44
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001d58:	eeb0 da69 	vmov.f32	s26, s19
 8001d5c:	eef0 ea49 	vmov.f32	s29, s18
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001d60:	eeb0 ba46 	vmov.f32	s22, s12
 8001d64:	eef0 ba66 	vmov.f32	s23, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001d68:	eeb0 8a47 	vmov.f32	s16, s14
 8001d6c:	eef0 8a67 	vmov.f32	s17, s15
 8001d70:	e6e5      	b.n	8001b3e <ADC_Stream0_Handler+0x4f2>
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001d72:	eddd 5a00 	vldr	s11, [sp]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001d76:	eef0 3a4b 	vmov.f32	s7, s22
 8001d7a:	eeb0 3a6b 	vmov.f32	s6, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001d7e:	ed8d da01 	vstr	s26, [sp, #4]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001d82:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001d86:	eeb0 da69 	vmov.f32	s26, s19
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001d8a:	eddd 5a03 	vldr	s11, [sp, #12]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001d8e:	eeb0 ba46 	vmov.f32	s22, s12
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001d92:	edcd ea02 	vstr	s29, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001d96:	eef0 ba66 	vmov.f32	s23, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001d9a:	edcd 5a08 	vstr	s11, [sp, #32]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001d9e:	eef0 ea49 	vmov.f32	s29, s18
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001da2:	eef0 5a48 	vmov.f32	s11, s16
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001da6:	edcd ca00 	vstr	s25, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001daa:	eeb0 8a47 	vmov.f32	s16, s14
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001dae:	ed8d ca03 	vstr	s24, [sp, #12]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001db2:	eeb0 5a68 	vmov.f32	s10, s17
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001db6:	edcd fa13 	vstr	s31, [sp, #76]	; 0x4c
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001dba:	eef0 8a67 	vmov.f32	s17, s15
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001dbe:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8001dc2:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8001dc6:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8001dca:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 8001dce:	e6b2      	b.n	8001b36 <ADC_Stream0_Handler+0x4ea>
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1);
 8001dd0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001dd4:	1c51      	adds	r1, r2, #1
 8001dd6:	e4ab      	b.n	8001730 <ADC_Stream0_Handler+0xe4>
 8001dd8:	2000b000 	.word	0x2000b000
 8001ddc:	2000d000 	.word	0x2000d000
 8001de0:	34000000 	.word	0x34000000
 8001de4:	240007b0 	.word	0x240007b0
 8001de8:	240007dc 	.word	0x240007dc
 8001dec:	240007e0 	.word	0x240007e0
 8001df0:	240007ac 	.word	0x240007ac
 8001df4:	240007d4 	.word	0x240007d4
 8001df8:	240007f4 	.word	0x240007f4
 8001dfc:	240007f8 	.word	0x240007f8
 8001e00:	240007b8 	.word	0x240007b8
 8001e04:	240007ec 	.word	0x240007ec
 8001e08:	240007f0 	.word	0x240007f0
 8001e0c:	240007b4 	.word	0x240007b4
 8001e10:	24000804 	.word	0x24000804
 8001e14:	24000808 	.word	0x24000808
 8001e18:	240007c0 	.word	0x240007c0
 8001e1c:	240007fc 	.word	0x240007fc
 8001e20:	24000800 	.word	0x24000800
 8001e24:	240007bc 	.word	0x240007bc
 8001e28:	24000814 	.word	0x24000814
 8001e2c:	24000818 	.word	0x24000818
 8001e30:	240007c8 	.word	0x240007c8
 8001e34:	2400080c 	.word	0x2400080c
 8001e38:	24000810 	.word	0x24000810
 8001e3c:	240007c4 	.word	0x240007c4
 8001e40:	24000824 	.word	0x24000824
 8001e44:	24000828 	.word	0x24000828
 8001e48:	240007d0 	.word	0x240007d0
 8001e4c:	2400081c 	.word	0x2400081c
 8001e50:	24000820 	.word	0x24000820
 8001e54:	240007cc 	.word	0x240007cc
 8001e58:	24000834 	.word	0x24000834
 8001e5c:	24000830 	.word	0x24000830
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001e60:	eddd 5a06 	vldr	s11, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001e64:	eeb0 5a68 	vmov.f32	s10, s17
 8001e68:	eef0 8a67 	vmov.f32	s17, s15
		inE6Rold = inER;                           inE6Iold = inEI;
 8001e6c:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001e70:	edcd 5a0c 	vstr	s11, [sp, #48]	; 0x30
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001e74:	eef0 3a4b 	vmov.f32	s7, s22
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001e78:	eddd 5a00 	vldr	s11, [sp]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001e7c:	eeb0 3a6b 	vmov.f32	s6, s23
		inE6Rold = inER;                           inE6Iold = inEI;
 8001e80:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001e84:	eeb0 ba46 	vmov.f32	s22, s12
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001e88:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001e8c:	eef0 ba66 	vmov.f32	s23, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001e90:	eddd 5a03 	vldr	s11, [sp, #12]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001e94:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001e98:	edcd 5a08 	vstr	s11, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001e9c:	eef0 5a48 	vmov.f32	s11, s16
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001ea0:	ed9d 8a09 	vldr	s16, [sp, #36]	; 0x24
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001ea4:	ed8d da01 	vstr	s26, [sp, #4]
 8001ea8:	eeb0 da69 	vmov.f32	s26, s19
 8001eac:	edcd ea02 	vstr	s29, [sp, #8]
 8001eb0:	eef0 ea49 	vmov.f32	s29, s18
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001eb4:	ed8d 8a06 	vstr	s16, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001eb8:	eeb0 8a47 	vmov.f32	s16, s14
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001ebc:	edcd fa07 	vstr	s31, [sp, #28]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001ec0:	edcd ca00 	vstr	s25, [sp]
 8001ec4:	ed8d ca03 	vstr	s24, [sp, #12]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001ec8:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8001ecc:	e77b      	b.n	8001dc6 <ADC_Stream0_Handler+0x77a>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
 8001ece:	4a06      	ldr	r2, [pc, #24]	; (8001ee8 <ADC_Stream0_Handler+0x89c>)
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <ADC_Stream0_Handler+0x8a0>)
 8001ed2:	ed92 0a00 	vldr	s0, [r2]
 8001ed6:	edd3 7a00 	vldr	s15, [r3]
 8001eda:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001ede:	f000 f807 	bl	8001ef0 <SDR_ComputeLO>
 8001ee2:	f7ff bbd0 	b.w	8001686 <ADC_Stream0_Handler+0x3a>
 8001ee6:	bf00      	nop
 8001ee8:	24007c74 	.word	0x24007c74
 8001eec:	24009654 	.word	0x24009654

08001ef0 <SDR_ComputeLO>:

#include "Globals.h"

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 8001ef0:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
  static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f, 
	                ypi, ypq, tmpi, gain=1.f;
	
	if (oldfreq != freq)
 8001ef2:	4b50      	ldr	r3, [pc, #320]	; (8002034 <SDR_ComputeLO+0x144>)
 8001ef4:	edd3 7a00 	vldr	s15, [r3]
 8001ef8:	eef4 7a40 	vcmp.f32	s15, s0
{
 8001efc:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 8001f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f04:	d173      	bne.n	8001fee <SDR_ComputeLO+0xfe>
// Coupled Quadrature Oscillator with level stabilization	
	while(k)
	{                    
// loop partially unrolled for performance		

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001f06:	4a4c      	ldr	r2, [pc, #304]	; (8002038 <SDR_ComputeLO+0x148>)
 8001f08:	4b4c      	ldr	r3, [pc, #304]	; (800203c <SDR_ComputeLO+0x14c>)
 8001f0a:	ed92 8a00 	vldr	s16, [r2]
 8001f0e:	ed93 7a00 	vldr	s14, [r3]
 8001f12:	4d4b      	ldr	r5, [pc, #300]	; (8002040 <SDR_ComputeLO+0x150>)
 8001f14:	4c4b      	ldr	r4, [pc, #300]	; (8002044 <SDR_ComputeLO+0x154>)
 8001f16:	484c      	ldr	r0, [pc, #304]	; (8002048 <SDR_ComputeLO+0x158>)
 8001f18:	4b4c      	ldr	r3, [pc, #304]	; (800204c <SDR_ComputeLO+0x15c>)
 8001f1a:	edd5 5a00 	vldr	s11, [r5]
 8001f1e:	edd4 7a00 	vldr	s15, [r4]
 8001f22:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8001f26:	edd0 6a00 	vldr	s13, [r0]
 8001f2a:	4a49      	ldr	r2, [pc, #292]	; (8002050 <SDR_ComputeLO+0x160>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001f2c:	ee27 6a88 	vmul.f32	s12, s15, s16
	while(k)
 8001f30:	3210      	adds	r2, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001f32:	ee67 7a67 	vnmul.f32	s15, s14, s15
	while(k)
 8001f36:	3310      	adds	r3, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001f38:	eea5 6a87 	vfma.f32	s12, s11, s14
	while(k)
 8001f3c:	428b      	cmp	r3, r1
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001f3e:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001f42:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001f46:	ee67 7aa6 	vmul.f32	s15, s15, s13
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001f4a:	ee26 5a08 	vmul.f32	s10, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001f4e:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001f52:	ee67 5a46 	vnmul.f32	s11, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001f56:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001f5a:	eea7 5a87 	vfma.f32	s10, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001f5e:	eee7 5a88 	vfma.f32	s11, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001f62:	ee26 5a85 	vmul.f32	s10, s13, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001f66:	ee66 5aa5 	vmul.f32	s11, s13, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001f6a:	ee25 6a08 	vmul.f32	s12, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001f6e:	ed02 5a07 	vstr	s10, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001f72:	ee67 7a45 	vnmul.f32	s15, s14, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001f76:	ed43 5a07 	vstr	s11, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001f7a:	eea5 6a87 	vfma.f32	s12, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001f7e:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001f82:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001f86:	ee66 7aa7 	vmul.f32	s15, s13, s15
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001f8a:	ee66 5a08 	vmul.f32	s11, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001f8e:	ed02 6a06 	vstr	s12, [r2, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001f92:	ee27 5a46 	vnmul.f32	s10, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001f96:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001f9a:	eeb0 6a65 	vmov.f32	s12, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001f9e:	eea7 5a88 	vfma.f32	s10, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001fa2:	eea7 6a87 	vfma.f32	s12, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001fa6:	ee66 5a85 	vmul.f32	s11, s13, s10
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001faa:	ee66 7a86 	vmul.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001fae:	ed43 5a05 	vstr	s11, [r3, #-20]	; 0xffffffec
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001fb2:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 8001fb6:	d1b9      	bne.n	8001f2c <SDR_ComputeLO+0x3c>
    ym1i = tmpi;

    k--;
	}
// compute the gain to be applied to stabilize the level
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001fb8:	ee66 6a06 	vmul.f32	s13, s12, s12
 8001fbc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002054 <SDR_ComputeLO+0x164>
 8001fc0:	edc4 7a00 	vstr	s15, [r4]
 8001fc4:	eddf 4a24 	vldr	s9, [pc, #144]	; 8002058 <SDR_ComputeLO+0x168>
 8001fc8:	eee5 6a05 	vfma.f32	s13, s10, s10
 8001fcc:	4a23      	ldr	r2, [pc, #140]	; (800205c <SDR_ComputeLO+0x16c>)
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <SDR_ComputeLO+0x170>)
 8001fd0:	edc5 5a00 	vstr	s11, [r5]
 8001fd4:	ed82 5a00 	vstr	s10, [r2]
 8001fd8:	ed83 6a00 	vstr	s12, [r3]
 8001fdc:	ee77 7a66 	vsub.f32	s15, s14, s13
}	
 8001fe0:	ecbd 8b04 	vpop	{d8-d9}
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001fe4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8001fe8:	edc0 7a00 	vstr	s15, [r0]
}	
 8001fec:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001fee:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8002064 <SDR_ComputeLO+0x174>
 8001ff2:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <SDR_ComputeLO+0x178>)
 8001ff4:	ee60 7a27 	vmul.f32	s15, s0, s15
	  oldfreq  =  freq;
 8001ff8:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001ffc:	ed92 7a00 	vldr	s14, [r2]
 8002000:	ee87 9a87 	vdiv.f32	s18, s15, s14
 8002004:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8002008:	eeb0 0b49 	vmov.f64	d0, d9
 800200c:	f011 fdc4 	bl	8013b98 <cos>
 8002010:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <SDR_ComputeLO+0x148>)
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8002016:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 800201a:	ed83 8a00 	vstr	s16, [r3]
    sintheta = -sin(TWOPI * freq / SamplingRate);
 800201e:	f011 fe07 	bl	8013c30 <sin>
 8002022:	eeb7 7bc0 	vcvt.f32.f64	s14, d0
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <SDR_ComputeLO+0x14c>)
 8002028:	eeb1 7a47 	vneg.f32	s14, s14
 800202c:	ed83 7a00 	vstr	s14, [r3]
 8002030:	e76f      	b.n	8001f12 <SDR_ComputeLO+0x22>
 8002032:	bf00      	nop
 8002034:	24000204 	.word	0x24000204
 8002038:	24000840 	.word	0x24000840
 800203c:	24000848 	.word	0x24000848
 8002040:	24000208 	.word	0x24000208
 8002044:	24000860 	.word	0x24000860
 8002048:	24000200 	.word	0x24000200
 800204c:	24007484 	.word	0x24007484
 8002050:	24006c84 	.word	0x24006c84
 8002054:	46000200 	.word	0x46000200
 8002058:	39000000 	.word	0x39000000
 800205c:	24000864 	.word	0x24000864
 8002060:	24000868 	.word	0x24000868
 8002064:	40c90fdb 	.word	0x40c90fdb
 8002068:	24007ca4 	.word	0x24007ca4

0800206c <SDR_2R_toC_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time
  while(blkCnt)
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	d028      	beq.n	80020c2 <SDR_2R_toC_f32+0x56>
 8002070:	3010      	adds	r0, #16
 8002072:	3110      	adds	r1, #16
 8002074:	3220      	adds	r2, #32
  {
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002076:	f850 cc10 	ldr.w	ip, [r0, #-16]
  while(blkCnt)
 800207a:	3110      	adds	r1, #16
 800207c:	3010      	adds	r0, #16
 800207e:	3b01      	subs	r3, #1
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002080:	f842 cc20 	str.w	ip, [r2, #-32]
  while(blkCnt)
 8002084:	f102 0220 	add.w	r2, r2, #32
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002088:	f851 cc20 	ldr.w	ip, [r1, #-32]
 800208c:	f842 cc3c 	str.w	ip, [r2, #-60]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002090:	f850 cc1c 	ldr.w	ip, [r0, #-28]
 8002094:	f842 cc38 	str.w	ip, [r2, #-56]
 8002098:	f851 cc1c 	ldr.w	ip, [r1, #-28]
 800209c:	f842 cc34 	str.w	ip, [r2, #-52]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 80020a0:	f850 cc18 	ldr.w	ip, [r0, #-24]
 80020a4:	f842 cc30 	str.w	ip, [r2, #-48]
 80020a8:	f851 cc18 	ldr.w	ip, [r1, #-24]
 80020ac:	f842 cc2c 	str.w	ip, [r2, #-44]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 80020b0:	f850 cc14 	ldr.w	ip, [r0, #-20]
 80020b4:	f842 cc28 	str.w	ip, [r2, #-40]
 80020b8:	f851 cc14 	ldr.w	ip, [r1, #-20]
 80020bc:	f842 cc24 	str.w	ip, [r2, #-36]
  while(blkCnt)
 80020c0:	d1d9      	bne.n	8002076 <SDR_2R_toC_f32+0xa>
    
    blkCnt--;
  }
}
 80020c2:	4770      	bx	lr

080020c4 <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 80020c4:	4b35      	ldr	r3, [pc, #212]	; (800219c <SDR_downconvert_f32+0xd8>)
  float  tmp1, tmp2, tmp3, tmp4, *LOI=LO_R, *LOR=LO_I;
	uint16_t *pt = signal;
	
// loop Unrolling
  blkCnt = BSIZE >> 2u;   // loop unrolling.  Compute 4 outputs at a time
  while(blkCnt)
 80020c6:	3110      	adds	r1, #16
 80020c8:	3210      	adds	r2, #16
 80020ca:	3008      	adds	r0, #8
    tmp2=((*(pt+1)-offset)) / 2048.f;
	tmp1 = tmp2;
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3 = tmp4;
#else
    tmp2=((*(pt+1)-offset)) / 2048.f;
 80020cc:	eddf 5a34 	vldr	s11, [pc, #208]	; 80021a0 <SDR_downconvert_f32+0xdc>
 80020d0:	f503 6c00 	add.w	ip, r3, #2048	; 0x800
{
 80020d4:	b510      	push	{r4, lr}
 80020d6:	4c33      	ldr	r4, [pc, #204]	; (80021a4 <SDR_downconvert_f32+0xe0>)
    tmp1=((*(pt)  -offset)) / 2048.f;
 80020d8:	f830 ec08 	ldrh.w	lr, [r0, #-8]
  while(blkCnt)
 80020dc:	3110      	adds	r1, #16
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3=((*(pt+2)-offset)) / 2048.f;
#endif


		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 80020de:	ed13 5a04 	vldr	s10, [r3, #-16]
  while(blkCnt)
 80020e2:	3410      	adds	r4, #16
    tmp1=((*(pt)  -offset)) / 2048.f;
 80020e4:	ee06 ea10 	vmov	s12, lr
    tmp2=((*(pt+1)-offset)) / 2048.f;
 80020e8:	f830 ec06 	ldrh.w	lr, [r0, #-6]
  while(blkCnt)
 80020ec:	3310      	adds	r3, #16
 80020ee:	3210      	adds	r2, #16
    tmp1=((*(pt)  -offset)) / 2048.f;
 80020f0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    tmp2=((*(pt+1)-offset)) / 2048.f;
 80020f4:	ee06 ea90 	vmov	s13, lr
	tmp4=((*(pt+3)-offset)) / 2048.f;
 80020f8:	f830 ec02 	ldrh.w	lr, [r0, #-2]
  while(blkCnt)
 80020fc:	4563      	cmp	r3, ip
    tmp2=((*(pt+1)-offset)) / 2048.f;
 80020fe:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  while(blkCnt)
 8002102:	f100 0008 	add.w	r0, r0, #8
    tmp1=((*(pt)  -offset)) / 2048.f;
 8002106:	ee36 6a40 	vsub.f32	s12, s12, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 800210a:	ee07 ea90 	vmov	s15, lr
	tmp3=((*(pt+2)-offset)) / 2048.f;
 800210e:	f830 ec0c 	ldrh.w	lr, [r0, #-12]
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8002112:	ee76 6ac0 	vsub.f32	s13, s13, s0
    tmp1=((*(pt)  -offset)) / 2048.f;
 8002116:	ee26 6a25 	vmul.f32	s12, s12, s11
	tmp3=((*(pt+2)-offset)) / 2048.f;
 800211a:	ee07 ea10 	vmov	s14, lr
	tmp4=((*(pt+3)-offset)) / 2048.f;
 800211e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8002122:	ee66 6aa5 	vmul.f32	s13, s13, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002126:	ee25 5a06 	vmul.f32	s10, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 800212a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	tmp4=((*(pt+3)-offset)) / 2048.f;
 800212e:	ee77 7ac0 	vsub.f32	s15, s15, s0
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002132:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 8002136:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
	tmp3=((*(pt+2)-offset)) / 2048.f;
 800213a:	ee37 7a40 	vsub.f32	s14, s14, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 800213e:	ee67 7aa5 	vmul.f32	s15, s15, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002142:	ee25 6a06 	vmul.f32	s12, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8002146:	ee27 7a25 	vmul.f32	s14, s14, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 800214a:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		 *zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 800214e:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8002152:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002156:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 800215a:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 800215e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8002162:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		 *zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 8002166:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800216a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800216e:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 8002172:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 8002176:	ee26 7a87 	vmul.f32	s14, s13, s14
 800217a:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 800217e:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8002182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002186:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 800218a:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 800218e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002192:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
  while(blkCnt)
 8002196:	d19f      	bne.n	80020d8 <SDR_downconvert_f32+0x14>
     pt += 4;
     blkCnt--;
	}	
}
 8002198:	bd10      	pop	{r4, pc}
 800219a:	bf00      	nop
 800219c:	24006c84 	.word	0x24006c84
 80021a0:	3a000000 	.word	0x3a000000
 80021a4:	24007484 	.word	0x24007484

080021a8 <SDR_float_to_DAC_audio>:
  short *AudioBuffer;

  AudioBuffer = pDst;

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 80021a8:	0893      	lsrs	r3, r2, #2
  while(blkCnt--)
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d058      	beq.n	8002260 <SDR_float_to_DAC_audio+0xb8>
 80021ae:	f103 3cff 	add.w	ip, r3, #4294967295
  {
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80021b2:	4b36      	ldr	r3, [pc, #216]	; (800228c <SDR_float_to_DAC_audio+0xe4>)
 80021b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021b8:	fa1f fc8c 	uxth.w	ip, ip
 80021bc:	edd3 7a00 	vldr	s15, [r3]
 80021c0:	f100 0310 	add.w	r3, r0, #16
 80021c4:	3020      	adds	r0, #32
 80021c6:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
 80021ca:	f101 0008 	add.w	r0, r1, #8
{
 80021ce:	b500      	push	{lr}
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80021d0:	eeb0 5a47 	vmov.f32	s10, s14
 80021d4:	ed53 5a04 	vldr	s11, [r3, #-16]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80021d8:	ed13 6a03 	vldr	s12, [r3, #-12]
  while(blkCnt--)
 80021dc:	3008      	adds	r0, #8
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80021de:	ed53 6a02 	vldr	s13, [r3, #-8]
  while(blkCnt--)
 80021e2:	3310      	adds	r3, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80021e4:	eea5 5aa7 	vfma.f32	s10, s11, s15
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80021e8:	ed53 4a05 	vldr	s9, [r3, #-20]	; 0xffffffec
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80021ec:	eef0 5a47 	vmov.f32	s11, s14
  while(blkCnt--)
 80021f0:	459c      	cmp	ip, r3
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80021f2:	eee7 5a86 	vfma.f32	s11, s15, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80021f6:	eeb0 6a47 	vmov.f32	s12, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80021fa:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80021fe:	eea7 6aa6 	vfma.f32	s12, s15, s13
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002202:	eef0 6a47 	vmov.f32	s13, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002206:	ee15 ea10 	vmov	lr, s10
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800220a:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800220e:	f820 ec10 	strh.w	lr, [r0, #-16]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002212:	eee7 6aa4 	vfma.f32	s13, s15, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002216:	ee15 ea90 	vmov	lr, s11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800221a:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800221e:	f820 ec0e 	strh.w	lr, [r0, #-14]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002222:	ee16 ea10 	vmov	lr, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002226:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800222a:	f820 ec0c 	strh.w	lr, [r0, #-12]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800222e:	ee16 ea90 	vmov	lr, s13
 8002232:	f820 ec0a 	strh.w	lr, [r0, #-10]
  while(blkCnt--)
 8002236:	d1cb      	bne.n	80021d0 <SDR_float_to_DAC_audio+0x28>
	}	

  // SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
  SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 8002238:	0093      	lsls	r3, r2, #2
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800223a:	f001 021f 	and.w	r2, r1, #31
 800223e:	441a      	add	r2, r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002240:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002244:	4812      	ldr	r0, [pc, #72]	; (8002290 <SDR_float_to_DAC_audio+0xe8>)
 8002246:	440a      	add	r2, r1
 8002248:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800224c:	3120      	adds	r1, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 800224e:	1a53      	subs	r3, r2, r1
 8002250:	2b00      	cmp	r3, #0
 8002252:	dcf9      	bgt.n	8002248 <SDR_float_to_DAC_audio+0xa0>
 8002254:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002258:	f3bf 8f6f 	isb	sy
#endif
return;
}	
 800225c:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( dsize > 0 ) { 
 8002260:	0093      	lsls	r3, r2, #2
 8002262:	b902      	cbnz	r2, 8002266 <SDR_float_to_DAC_audio+0xbe>
 8002264:	4770      	bx	lr
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002266:	f001 021f 	and.w	r2, r1, #31
 800226a:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
 800226c:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002270:	4807      	ldr	r0, [pc, #28]	; (8002290 <SDR_float_to_DAC_audio+0xe8>)
 8002272:	440a      	add	r2, r1
 8002274:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002278:	3120      	adds	r1, #32
      } while ( op_size > 0 );
 800227a:	1a53      	subs	r3, r2, r1
 800227c:	2b00      	cmp	r3, #0
 800227e:	dcf9      	bgt.n	8002274 <SDR_float_to_DAC_audio+0xcc>
 8002280:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002284:	f3bf 8f6f 	isb	sy
return;
 8002288:	e7ec      	b.n	8002264 <SDR_float_to_DAC_audio+0xbc>
 800228a:	bf00      	nop
 800228c:	2400d3ec 	.word	0x2400d3ec
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <SDR_memcpy_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time.    
  while(blkCnt > 0u)
 8002294:	0892      	lsrs	r2, r2, #2
 8002296:	d016      	beq.n	80022c6 <SDR_memcpy_f32+0x32>
 8002298:	3110      	adds	r1, #16
 800229a:	3010      	adds	r0, #16
  {
    /* Copy and then store the results in the destination buffer */
    in1 = *pSrc++;  *pDst++ = in1;
 800229c:	f851 3c10 	ldr.w	r3, [r1, #-16]
  while(blkCnt > 0u)
 80022a0:	3110      	adds	r1, #16
 80022a2:	3a01      	subs	r2, #1
 80022a4:	f100 0010 	add.w	r0, r0, #16
    in1 = *pSrc++;  *pDst++ = in1;
 80022a8:	f840 3c20 	str.w	r3, [r0, #-32]
    in2 = *pSrc++;  *pDst++ = in2;
 80022ac:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 80022b0:	f840 3c1c 	str.w	r3, [r0, #-28]
    in3 = *pSrc++;  *pDst++ = in3;
 80022b4:	f851 3c18 	ldr.w	r3, [r1, #-24]
 80022b8:	f840 3c18 	str.w	r3, [r0, #-24]
    in4 = *pSrc++;  *pDst++ = in4;
 80022bc:	f851 3c14 	ldr.w	r3, [r1, #-20]
 80022c0:	f840 3c14 	str.w	r3, [r0, #-20]
  while(blkCnt > 0u)
 80022c4:	d1ea      	bne.n	800229c <SDR_memcpy_f32+0x8>
		
// Decrement the loop counter
    blkCnt--;
  }
}
 80022c6:	4770      	bx	lr

080022c8 <SDR_mirror_LSB>:
{
  uint32_t blkCnt;            /* loop counter */
  float *pbR, *pbI, *peR, *peI;
	
// loop Unrolling */
  blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 80022c8:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 80022ca:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

//  Compute 4 outputs at a time.    
	while(blkCnt--)
 80022ce:	2a01      	cmp	r2, #1
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 80022d0:	440b      	add	r3, r1
	while(blkCnt--)
 80022d2:	f1a2 0102 	sub.w	r1, r2, #2
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 80022d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
	while(blkCnt--)
 80022da:	d036      	beq.n	800234a <SDR_mirror_LSB+0x82>
 80022dc:	f1a3 0220 	sub.w	r2, r3, #32
 80022e0:	f1a3 0c1c 	sub.w	ip, r3, #28
 80022e4:	f100 0328 	add.w	r3, r0, #40	; 0x28
 80022e8:	4402      	add	r2, r0
 80022ea:	4460      	add	r0, ip
	{
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80022ec:	f8d2 c020 	ldr.w	ip, [r2, #32]
	while(blkCnt--)
 80022f0:	3a20      	subs	r2, #32
 80022f2:	3820      	subs	r0, #32
 80022f4:	3901      	subs	r1, #1
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80022f6:	f843 cc20 	str.w	ip, [r3, #-32]
	while(blkCnt--)
 80022fa:	3320      	adds	r3, #32
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80022fc:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
	while(blkCnt--)
 8002300:	f1b1 3fff 	cmp.w	r1, #4294967295
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002304:	eef1 7a67 	vneg.f32	s15, s15
 8002308:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 800230c:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
 8002310:	f843 cc38 	str.w	ip, [r3, #-56]
 8002314:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 8002318:	eef1 7a67 	vneg.f32	s15, s15
 800231c:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002320:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
 8002324:	f843 cc30 	str.w	ip, [r3, #-48]
 8002328:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 800232c:	eef1 7a67 	vneg.f32	s15, s15
 8002330:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002334:	f8d2 c028 	ldr.w	ip, [r2, #40]	; 0x28
 8002338:	f843 cc28 	str.w	ip, [r3, #-40]
 800233c:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8002340:	eef1 7a67 	vneg.f32	s15, s15
 8002344:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 8002348:	d1d0      	bne.n	80022ec <SDR_mirror_LSB+0x24>
	}
}
 800234a:	4770      	bx	lr

0800234c <SDR_compute_IIR_parms>:
#endif
   r = Qfactor;

   a1 = a2 = b0 = 0.f; 
   r2 = r*r;
   wr = 2.f * cwpitch / rate * myPI;
 800234c:	492b      	ldr	r1, [pc, #172]	; (80023fc <SDR_compute_IIR_parms+0xb0>)
 800234e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8002400 <SDR_compute_IIR_parms+0xb4>
 8002352:	edd1 7a00 	vldr	s15, [r1]
	 float rate = SamplingRate/256; //SamplingRate / decimation
 8002356:	4a2b      	ldr	r2, [pc, #172]	; (8002404 <SDR_compute_IIR_parms+0xb8>)
   wr = 2.f * cwpitch / rate * myPI;
 8002358:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800235c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8002408 <SDR_compute_IIR_parms+0xbc>
 8002360:	ed92 7a00 	vldr	s14, [r2]
{
 8002364:	b508      	push	{r3, lr}
 8002366:	ed2d 8b06 	vpush	{d8-d10}
   wr = 2.f * cwpitch / rate * myPI;
 800236a:	eec7 8a87 	vdiv.f32	s17, s15, s14
   r = Qfactor;
 800236e:	4b27      	ldr	r3, [pc, #156]	; (800240c <SDR_compute_IIR_parms+0xc0>)
 8002370:	edd3 9a00 	vldr	s19, [r3]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002374:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   r2 = r*r;
 8002378:	ee69 aaa9 	vmul.f32	s21, s19, s19
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 800237c:	ee39 aaa9 	vadd.f32	s20, s19, s19
 8002380:	ee3a 9a88 	vadd.f32	s18, s21, s16
										                         // (see the Proakis & Manolakis book)
   a1 = -2.f * r * cosw0;
   a2 = r2;
// b0 is normalized for gain ~ 2dB on all the band
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002384:	ee38 8a69 	vsub.f32	s16, s16, s19
   wr = 2.f * cwpitch / rate * myPI;
 8002388:	ee68 8a80 	vmul.f32	s17, s17, s0
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 800238c:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 8002390:	f011 fc02 	bl	8013b98 <cos>
 8002394:	ee8a 5a09 	vdiv.f32	s10, s20, s18
   a1 = -2.f * r * cosw0;
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <SDR_compute_IIR_parms+0xc4>)
   a2 = r2;
 800239a:	4a1e      	ldr	r2, [pc, #120]	; (8002414 <SDR_compute_IIR_parms+0xc8>)
 800239c:	edc2 aa00 	vstr	s21, [r2]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80023a0:	eeb0 6b40 	vmov.f64	d6, d0
   a1 = -2.f * r * cosw0;
 80023a4:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80023a8:	ee78 8aa8 	vadd.f32	s17, s17, s17
 80023ac:	eeb7 aaca 	vcvt.f64.f32	d10, s20
   a1 = -2.f * r * cosw0;
 80023b0:	ee69 7aa7 	vmul.f32	s15, s19, s15
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80023b4:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80023b8:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 80023bc:	ee25 6b06 	vmul.f64	d6, d5, d6
 80023c0:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
   a1 = -2.f * r * cosw0;
 80023c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023c8:	ed83 6a00 	vstr	s12, [r3]
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80023cc:	f011 fbe4 	bl	8013b98 <cos>
 80023d0:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 80023d4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002418 <SDR_compute_IIR_parms+0xcc>
 80023d8:	4b10      	ldr	r3, [pc, #64]	; (800241c <SDR_compute_IIR_parms+0xd0>)
 80023da:	ee28 7a07 	vmul.f32	s14, s16, s14
 80023de:	eeaa 6b40 	vfms.f64	d6, d10, d0
 80023e2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 80023e6:	ecbd 8b06 	vpop	{d8-d10}
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80023ea:	eeb1 5bc6 	vsqrt.f64	d5, d6
 80023ee:	ee27 7b05 	vmul.f64	d7, d7, d5
 80023f2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80023f6:	ed83 7a00 	vstr	s14, [r3]
}
 80023fa:	bd08      	pop	{r3, pc}
 80023fc:	24009654 	.word	0x24009654
 8002400:	44000000 	.word	0x44000000
 8002404:	24007ca4 	.word	0x24007ca4
 8002408:	40490fdb 	.word	0x40490fdb
 800240c:	24007c9c 	.word	0x24007c9c
 8002410:	24008e20 	.word	0x24008e20
 8002414:	24008e24 	.word	0x24008e24
 8002418:	3f99999a 	.word	0x3f99999a
 800241c:	2400964c 	.word	0x2400964c

08002420 <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
   static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	 register float x0, y0;
   uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 8002420:	0889      	lsrs	r1, r1, #2
	
// Compute 4 outputs at a time, loop unrolled for performance     
	 while(blkCnt--)
 8002422:	2900      	cmp	r1, #0
 8002424:	d077      	beq.n	8002516 <SDR_CWPeak+0xf6>
 8002426:	1e4b      	subs	r3, r1, #1
 8002428:	f8df c104 	ldr.w	ip, [pc, #260]	; 8002530 <SDR_CWPeak+0x110>
   {  
		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800242c:	493a      	ldr	r1, [pc, #232]	; (8002518 <SDR_CWPeak+0xf8>)
 800242e:	3010      	adds	r0, #16
 8002430:	4a3a      	ldr	r2, [pc, #232]	; (800251c <SDR_CWPeak+0xfc>)
 8002432:	eddc 2a00 	vldr	s5, [ip]
 8002436:	ed91 6a00 	vldr	s12, [r1]
 800243a:	ed92 5a00 	vldr	s10, [r2]
{
 800243e:	b4f0      	push	{r4, r5, r6, r7}
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002440:	4c37      	ldr	r4, [pc, #220]	; (8002520 <SDR_CWPeak+0x100>)
 8002442:	4f38      	ldr	r7, [pc, #224]	; (8002524 <SDR_CWPeak+0x104>)
 8002444:	edd4 4a00 	vldr	s9, [r4]
 8002448:	4e37      	ldr	r6, [pc, #220]	; (8002528 <SDR_CWPeak+0x108>)
 800244a:	4d38      	ldr	r5, [pc, #224]	; (800252c <SDR_CWPeak+0x10c>)
 800244c:	eeb1 2a64 	vneg.f32	s4, s9
 8002450:	ed97 7a00 	vldr	s14, [r7]
 8002454:	edd6 5a00 	vldr	s11, [r6]
 8002458:	edd5 6a00 	vldr	s13, [r5]
 800245c:	ee66 3a47 	vnmul.f32	s7, s12, s14
 8002460:	ed10 7a04 	vldr	s14, [r0, #-16]
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002464:	ee26 4a66 	vnmul.f32	s8, s12, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002468:	ed50 7a03 	vldr	s15, [r0, #-12]
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800246c:	ed50 6a02 	vldr	s13, [r0, #-8]
	 while(blkCnt--)
 8002470:	3010      	adds	r0, #16
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002472:	eee2 3a22 	vfma.f32	s7, s4, s5
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002476:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800247a:	eea2 4a25 	vfma.f32	s8, s4, s11
	 while(blkCnt--)
 800247e:	3b01      	subs	r3, #1
 8002480:	f1b3 3fff 	cmp.w	r3, #4294967295
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002484:	eee7 3a05 	vfma.f32	s7, s14, s10
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002488:	eea3 4a85 	vfma.f32	s8, s7, s10
	   *buf++ = y0;
 800248c:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002490:	ed92 5a00 	vldr	s10, [r2]
 8002494:	ed91 6a00 	vldr	s12, [r1]
 8002498:	ee65 7a27 	vmul.f32	s15, s10, s15
 800249c:	edd4 4a00 	vldr	s9, [r4]
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80024a0:	ee25 7a26 	vmul.f32	s14, s10, s13
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80024a4:	ee65 6a03 	vmul.f32	s13, s10, s6
 80024a8:	eee6 7a62 	vfms.f32	s15, s12, s5
 80024ac:	eea6 7a63 	vfms.f32	s14, s12, s7
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80024b0:	eeb1 2a64 	vneg.f32	s4, s9
 80024b4:	eee4 7ae3 	vfms.f32	s15, s9, s7
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80024b8:	eea4 7ae7 	vfms.f32	s14, s9, s15
 80024bc:	eee6 6a67 	vfms.f32	s13, s12, s15
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80024c0:	ee65 7a27 	vmul.f32	s15, s10, s15
 80024c4:	eee4 7ac4 	vfms.f32	s15, s9, s8
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80024c8:	eee4 6ac7 	vfms.f32	s13, s9, s14
 80024cc:	eef0 2a66 	vmov.f32	s5, s13
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80024d0:	ee65 6a07 	vmul.f32	s13, s10, s14
 80024d4:	eee6 6a44 	vfms.f32	s13, s12, s8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80024d8:	eeb0 4a67 	vmov.f32	s8, s15
 80024dc:	eed6 7a25 	vfnms.f32	s15, s12, s11
 80024e0:	eea6 4a65 	vfms.f32	s8, s12, s11
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80024e4:	ee65 5a22 	vmul.f32	s11, s10, s5
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80024e8:	eee4 6aa7 	vfma.f32	s13, s9, s15
 80024ec:	eee6 5a44 	vfms.f32	s11, s12, s8
	   *buf++ = y0;
 80024f0:	ed00 4a07 	vstr	s8, [r0, #-28]	; 0xffffffe4
	   *buf++ = y0;
 80024f4:	ed40 6a06 	vstr	s13, [r0, #-24]	; 0xffffffe8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80024f8:	eee4 5ae6 	vfms.f32	s11, s9, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;
 80024fc:	ed40 5a05 	vstr	s11, [r0, #-20]	; 0xffffffec
	 while(blkCnt--)
 8002500:	d1ac      	bne.n	800245c <SDR_CWPeak+0x3c>
 8002502:	ed87 7a00 	vstr	s14, [r7]
 8002506:	edc6 5a00 	vstr	s11, [r6]
 800250a:	edc5 6a00 	vstr	s13, [r5]
 800250e:	edcc 2a00 	vstr	s5, [ip]
   }
}
 8002512:	bcf0      	pop	{r4, r5, r6, r7}
 8002514:	4770      	bx	lr
 8002516:	4770      	bx	lr
 8002518:	24008e24 	.word	0x24008e24
 800251c:	2400964c 	.word	0x2400964c
 8002520:	24008e20 	.word	0x24008e20
 8002524:	24000858 	.word	0x24000858
 8002528:	24000854 	.word	0x24000854
 800252c:	2400085c 	.word	0x2400085c
 8002530:	24000850 	.word	0x24000850

08002534 <SDR_demodAM_AGC>:
// ------------------------------------------------------

// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8002534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

	  if(pk < audiotmp)
	  {
			pk = audiotmp;
		  hangcnt = Hcount[AM]; 
 8002538:	4b3c      	ldr	r3, [pc, #240]	; (800262c <SDR_demodAM_AGC+0xf8>)
{
 800253a:	b082      	sub	sp, #8
 800253c:	4f3c      	ldr	r7, [pc, #240]	; (8002630 <SDR_demodAM_AGC+0xfc>)
 800253e:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
 8002542:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8002650 <SDR_demodAM_AGC+0x11c>
		  hangcnt = Hcount[AM]; 
 8002546:	f8b3 e000 	ldrh.w	lr, [r3]
 800254a:	683a      	ldr	r2, [r7, #0]

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800254c:	eddf 4a39 	vldr	s9, [pc, #228]	; 8002634 <SDR_demodAM_AGC+0x100>
		
	  if(hangcnt == 0)
		  pk  *= Decay[AM];
		
// DC removal filter -----------------------
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002550:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8002638 <SDR_demodAM_AGC+0x104>
 8002554:	ed98 7a00 	vldr	s14, [r8]
 8002558:	4b38      	ldr	r3, [pc, #224]	; (800263c <SDR_demodAM_AGC+0x108>)
 800255a:	4d39      	ldr	r5, [pc, #228]	; (8002640 <SDR_demodAM_AGC+0x10c>)
 800255c:	4c39      	ldr	r4, [pc, #228]	; (8002644 <SDR_demodAM_AGC+0x110>)
		  pk  *= Decay[AM];
 800255e:	4e3a      	ldr	r6, [pc, #232]	; (8002648 <SDR_demodAM_AGC+0x114>)
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002560:	edd0 7a01 	vldr	s15, [r0, #4]
 8002564:	edd0 6a00 	vldr	s13, [r0]
 8002568:	ee67 7aa7 	vmul.f32	s15, s15, s15
    audiotmp /= max(pk, AgcThreshold);  
 800256c:	ed95 6a00 	vldr	s12, [r5]
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002570:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8002574:	edcd 7a01 	vstr	s15, [sp, #4]
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 8002578:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 800257c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = sqrtf(in);
 8002584:	bfa8      	it	ge
 8002586:	eef1 5ae7 	vsqrtge.f32	s11, s15
	  if(pk < audiotmp)
 800258a:	edd3 7a00 	vldr	s15, [r3]
      *pOut = 0.0f;
 800258e:	bfb8      	it	lt
 8002590:	eef0 5a64 	vmovlt.f32	s11, s9
 8002594:	eef4 7ae5 	vcmpe.f32	s15, s11
 8002598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259c:	d504      	bpl.n	80025a8 <SDR_demodAM_AGC+0x74>
			pk = audiotmp;
 800259e:	eef0 7a65 	vmov.f32	s15, s11
		  hangcnt = Hcount[AM]; 
 80025a2:	4672      	mov	r2, lr
			pk = audiotmp;
 80025a4:	edc3 5a00 	vstr	s11, [r3]
    audiotmp /= max(pk, AgcThreshold);  
 80025a8:	fe87 6a86 	vmaxnm.f32	s12, s15, s12
 80025ac:	eec5 6a86 	vdiv.f32	s13, s11, s12
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80025b0:	eef0 5a66 	vmov.f32	s11, s13
    audiotmp /= max(pk, AgcThreshold);  
 80025b4:	edc4 6a00 	vstr	s13, [r4]
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80025b8:	eee7 5a05 	vfma.f32	s11, s14, s10
	  if(hangcnt == 0)
 80025bc:	b9da      	cbnz	r2, 80025f6 <SDR_demodAM_AGC+0xc2>
		  pk  *= Decay[AM];
 80025be:	edd6 6a00 	vldr	s13, [r6]
	for(k=j=0; k<BSIZE*2; k+=2)
 80025c2:	3008      	adds	r0, #8
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80025c4:	edcd 5a00 	vstr	s11, [sp]
		  pk  *= Decay[AM];
 80025c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80025cc:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 80025d0:	4584      	cmp	ip, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80025d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
	  wold = w;
 80025d6:	ed9d 7a00 	vldr	s14, [sp]
		  pk  *= Decay[AM];
 80025da:	edc3 6a00 	vstr	s13, [r3]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80025de:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 80025e2:	d1bd      	bne.n	8002560 <SDR_demodAM_AGC+0x2c>
// -----------------------------------------
	}
    PeakAudioValue=pk;
 80025e4:	4919      	ldr	r1, [pc, #100]	; (800264c <SDR_demodAM_AGC+0x118>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	603a      	str	r2, [r7, #0]
 80025ea:	ed88 7a00 	vstr	s14, [r8]
 80025ee:	600b      	str	r3, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
}
 80025f0:	b002      	add	sp, #8
 80025f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80025f6:	edcd 5a00 	vstr	s11, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 80025fa:	3008      	adds	r0, #8
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80025fc:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002600:	4584      	cmp	ip, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002602:	ee77 7ac7 	vsub.f32	s15, s15, s14
	  wold = w;
 8002606:	ed9d 7a00 	vldr	s14, [sp]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800260a:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 800260e:	d1a7      	bne.n	8002560 <SDR_demodAM_AGC+0x2c>
    PeakAudioValue=pk;
 8002610:	490e      	ldr	r1, [pc, #56]	; (800264c <SDR_demodAM_AGC+0x118>)
	if(hangcnt > 0)  hangcnt--;
 8002612:	2a00      	cmp	r2, #0
    PeakAudioValue=pk;
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	603a      	str	r2, [r7, #0]
 8002618:	ed88 7a00 	vstr	s14, [r8]
 800261c:	600b      	str	r3, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
 800261e:	dd01      	ble.n	8002624 <SDR_demodAM_AGC+0xf0>
 8002620:	3a01      	subs	r2, #1
 8002622:	603a      	str	r2, [r7, #0]
}
 8002624:	b002      	add	sp, #8
 8002626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800262a:	bf00      	nop
 800262c:	24006c68 	.word	0x24006c68
 8002630:	2400bf24 	.word	0x2400bf24
 8002634:	00000000 	.word	0x00000000
 8002638:	3f75c28f 	.word	0x3f75c28f
 800263c:	2400c260 	.word	0x2400c260
 8002640:	24002218 	.word	0x24002218
 8002644:	24009648 	.word	0x24009648
 8002648:	24002a40 	.word	0x24002a40
 800264c:	24007c98 	.word	0x24007c98
 8002650:	2400084c 	.word	0x2400084c

08002654 <SDR_demodSSB_CW_AGC>:
//---------------------------------------------------------------------------
// SSB and CW demodulation with AGC
void SDR_demodSSB_CW_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8002654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  if(pk < sav)
	  {
			pk = sav;
      if(CurrentMode == CW) hangcnt = Hcount[CW];
      else
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002658:	4b3a      	ldr	r3, [pc, #232]	; (8002744 <SDR_demodSSB_CW_AGC+0xf0>)
 800265a:	f241 0e04 	movw	lr, #4100	; 0x1004
 800265e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 800275c <SDR_demodSSB_CW_AGC+0x108>
	  if(pk < sav)
 8002662:	4a39      	ldr	r2, [pc, #228]	; (8002748 <SDR_demodSSB_CW_AGC+0xf4>)
 8002664:	4486      	add	lr, r0
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002666:	889f      	ldrh	r7, [r3, #4]
 8002668:	885e      	ldrh	r6, [r3, #2]
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 800266a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800266e:	1d03      	adds	r3, r0, #4
	  if(pk < sav)
 8002670:	edd2 7a00 	vldr	s15, [r2]
 8002674:	f8d8 0000 	ldr.w	r0, [r8]
 8002678:	4d34      	ldr	r5, [pc, #208]	; (800274c <SDR_demodSSB_CW_AGC+0xf8>)
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 800267a:	4c35      	ldr	r4, [pc, #212]	; (8002750 <SDR_demodSSB_CW_AGC+0xfc>)
		
	  if(hangcnt == 0)
    {  
      if(CurrentMode == CW) pk  *= Decay[CW];
      else
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 800267c:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8002760 <SDR_demodSSB_CW_AGC+0x10c>
 8002680:	e014      	b.n	80026ac <SDR_demodSSB_CW_AGC+0x58>
      if(CurrentMode == CW) pk  *= Decay[CW];
 8002682:	f894 c000 	ldrb.w	ip, [r4]
 8002686:	f1bc 0f03 	cmp.w	ip, #3
 800268a:	d052      	beq.n	8002732 <SDR_demodSSB_CW_AGC+0xde>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 800268c:	f1bc 0f01 	cmp.w	ip, #1
 8002690:	ed92 7a00 	vldr	s14, [r2]
 8002694:	bf0c      	ite	eq
 8002696:	edda 7a01 	vldreq	s15, [sl, #4]
 800269a:	edda 7a02 	vldrne	s15, [sl, #8]
 800269e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026a2:	edc2 7a00 	vstr	s15, [r2]
	for(k=j=0; k<BSIZE*2; k+=2)
 80026a6:	3308      	adds	r3, #8
 80026a8:	459e      	cmp	lr, r3
 80026aa:	d02d      	beq.n	8002708 <SDR_demodSSB_CW_AGC+0xb4>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80026ac:	ed93 7a00 	vldr	s14, [r3]
 80026b0:	ed53 6a01 	vldr	s13, [r3, #-4]
 80026b4:	ee27 7a07 	vmul.f32	s14, s14, s14
 80026b8:	eea6 7aa6 	vfma.f32	s14, s13, s13
      *pOut = sqrtf(in);
 80026bc:	eeb1 6ac7 	vsqrt.f32	s12, s14
	  if(pk < sav)
 80026c0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80026c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c8:	dd0f      	ble.n	80026ea <SDR_demodSSB_CW_AGC+0x96>
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80026ca:	f894 c000 	ldrb.w	ip, [r4]
			pk = sav;
 80026ce:	ed82 6a00 	vstr	s12, [r2]
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80026d2:	f1bc 0f03 	cmp.w	ip, #3
 80026d6:	d026      	beq.n	8002726 <SDR_demodSSB_CW_AGC+0xd2>
 80026d8:	eef0 7a46 	vmov.f32	s15, s12
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80026dc:	f1bc 0f01 	cmp.w	ip, #1
 80026e0:	bf0c      	ite	eq
 80026e2:	4630      	moveq	r0, r6
 80026e4:	4638      	movne	r0, r7
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 80026e6:	ed53 6a01 	vldr	s13, [r3, #-4]
 80026ea:	ed95 7a00 	vldr	s14, [r5]
 80026ee:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80026f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026f6:	eca1 7a01 	vstmia	r1!, {s14}
	  if(hangcnt == 0)
 80026fa:	2800      	cmp	r0, #0
 80026fc:	d0c1      	beq.n	8002682 <SDR_demodSSB_CW_AGC+0x2e>
	for(k=j=0; k<BSIZE*2; k+=2)
 80026fe:	3308      	adds	r3, #8
    }  
	}
	PeakAudioValue=pk;
 8002700:	edd2 7a00 	vldr	s15, [r2]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002704:	459e      	cmp	lr, r3
 8002706:	d1d1      	bne.n	80026ac <SDR_demodSSB_CW_AGC+0x58>
 8002708:	4a12      	ldr	r2, [pc, #72]	; (8002754 <SDR_demodSSB_CW_AGC+0x100>)
	if(hangcnt > 0)  hangcnt--;
 800270a:	2800      	cmp	r0, #0
	PeakAudioValue=pk;
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <SDR_demodSSB_CW_AGC+0x104>)
 800270e:	f8c8 0000 	str.w	r0, [r8]
 8002712:	ed82 6a00 	vstr	s12, [r2]
 8002716:	edc3 7a00 	vstr	s15, [r3]
	if(hangcnt > 0)  hangcnt--;
 800271a:	dd02      	ble.n	8002722 <SDR_demodSSB_CW_AGC+0xce>
 800271c:	3801      	subs	r0, #1
 800271e:	f8c8 0000 	str.w	r0, [r8]
}
 8002722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002726:	eef0 7a46 	vmov.f32	s15, s12
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 800272a:	ed53 6a01 	vldr	s13, [r3, #-4]
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 800272e:	4648      	mov	r0, r9
 8002730:	e7db      	b.n	80026ea <SDR_demodSSB_CW_AGC+0x96>
      if(CurrentMode == CW) pk  *= Decay[CW];
 8002732:	ed92 7a00 	vldr	s14, [r2]
 8002736:	edda 7a03 	vldr	s15, [sl, #12]
 800273a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800273e:	edc2 7a00 	vstr	s15, [r2]
 8002742:	e7b0      	b.n	80026a6 <SDR_demodSSB_CW_AGC+0x52>
 8002744:	24006c68 	.word	0x24006c68
 8002748:	2400c260 	.word	0x2400c260
 800274c:	24002218 	.word	0x24002218
 8002750:	24002a38 	.word	0x24002a38
 8002754:	24000844 	.word	0x24000844
 8002758:	24007c98 	.word	0x24007c98
 800275c:	2400bf24 	.word	0x2400bf24
 8002760:	24002a40 	.word	0x24002a40

08002764 <pack_call>:
	return m;
}

static long
unsigned int pack_call(char const *callsign)
{
 8002764:	b510      	push	{r4, lr}
	unsigned int i;
	long unsigned int n;
	char call6[6];
	memset(call6,' ',sizeof(call6));
 8002766:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
{
 800276a:	b082      	sub	sp, #8
 800276c:	4604      	mov	r4, r0
	memset(call6,' ',sizeof(call6));
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	f8ad 3004 	strh.w	r3, [sp, #4]
	// callsign is 6 characters in length. Exactly.
	size_t call_len = strlen(callsign);
 8002774:	f7fd fdb4 	bl	80002e0 <strlen>
	if( call_len > 6 ) {
 8002778:	2806      	cmp	r0, #6
 800277a:	f200 808f 	bhi.w	800289c <pack_call+0x138>
		return 0;
	}
	if( isdigit((int) callsign[2]) ) {
 800277e:	78a2      	ldrb	r2, [r4, #2]
 8002780:	4b5b      	ldr	r3, [pc, #364]	; (80028f0 <pack_call+0x18c>)
 8002782:	5cd2      	ldrb	r2, [r2, r3]
 8002784:	0752      	lsls	r2, r2, #29
 8002786:	d57c      	bpl.n	8002882 <pack_call+0x11e>
		for (i=0; i<call_len; i++) {
 8002788:	b120      	cbz	r0, 8002794 <pack_call+0x30>
			call6[i]=callsign[i];
 800278a:	4602      	mov	r2, r0
 800278c:	4621      	mov	r1, r4
 800278e:	4668      	mov	r0, sp
 8002790:	f00e f90c 	bl	80109ac <memcpy>
		for (i=1; i<call_len+1; i++) {
			call6[i]=callsign[i-1];
		}
	}
	for (i=0; i<6; i++) {
		call6[i]=get_callsign_character_code(call6[i]);
 8002794:	f89d 3000 	ldrb.w	r3, [sp]
	if( ch >=48 && ch <=57 ) { //0-9
 8002798:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800279c:	fa5f fe8c 	uxtb.w	lr, ip
 80027a0:	f1be 0f09 	cmp.w	lr, #9
 80027a4:	d908      	bls.n	80027b8 <pack_call+0x54>
	if( ch == 32 ) {  //space
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	f000 809a 	beq.w	80028e0 <pack_call+0x17c>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80027ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80027b0:	2a19      	cmp	r2, #25
 80027b2:	d976      	bls.n	80028a2 <pack_call+0x13e>
	return -1;
 80027b4:	f04f 0eff 	mov.w	lr, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 80027b8:	f89d 3001 	ldrb.w	r3, [sp, #1]
	if( ch >=48 && ch <=57 ) { //0-9
 80027bc:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80027c0:	fa5f f48c 	uxtb.w	r4, ip
 80027c4:	2c09      	cmp	r4, #9
 80027c6:	d907      	bls.n	80027d8 <pack_call+0x74>
	if( ch == 32 ) {  //space
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	f000 8087 	beq.w	80028dc <pack_call+0x178>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80027ce:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80027d2:	2a19      	cmp	r2, #25
 80027d4:	d979      	bls.n	80028ca <pack_call+0x166>
	return -1;
 80027d6:	24ff      	movs	r4, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 80027d8:	f89d 3002 	ldrb.w	r3, [sp, #2]
	if( ch >=48 && ch <=57 ) { //0-9
 80027dc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	2a09      	cmp	r2, #9
 80027e4:	d906      	bls.n	80027f4 <pack_call+0x90>
	if( ch == 32 ) {  //space
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d076      	beq.n	80028d8 <pack_call+0x174>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80027ea:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80027ee:	2a19      	cmp	r2, #25
 80027f0:	d968      	bls.n	80028c4 <pack_call+0x160>
	return -1;
 80027f2:	22ff      	movs	r2, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 80027f4:	f89d 1003 	ldrb.w	r1, [sp, #3]
	if( ch >=48 && ch <=57 ) { //0-9
 80027f8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b09      	cmp	r3, #9
 8002800:	d906      	bls.n	8002810 <pack_call+0xac>
	if( ch == 32 ) {  //space
 8002802:	2920      	cmp	r1, #32
 8002804:	d066      	beq.n	80028d4 <pack_call+0x170>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8002806:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 800280a:	2b19      	cmp	r3, #25
 800280c:	d956      	bls.n	80028bc <pack_call+0x158>
	return -1;
 800280e:	23ff      	movs	r3, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8002810:	f89d 0004 	ldrb.w	r0, [sp, #4]
	if( ch >=48 && ch <=57 ) { //0-9
 8002814:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 8002818:	b2c9      	uxtb	r1, r1
 800281a:	2909      	cmp	r1, #9
 800281c:	d906      	bls.n	800282c <pack_call+0xc8>
	if( ch == 32 ) {  //space
 800281e:	2820      	cmp	r0, #32
 8002820:	d061      	beq.n	80028e6 <pack_call+0x182>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8002822:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8002826:	2919      	cmp	r1, #25
 8002828:	d940      	bls.n	80028ac <pack_call+0x148>
	return -1;
 800282a:	21ff      	movs	r1, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 800282c:	f89d c005 	ldrb.w	ip, [sp, #5]
	if( ch >=48 && ch <=57 ) { //0-9
 8002830:	f1ac 0030 	sub.w	r0, ip, #48	; 0x30
 8002834:	b2c0      	uxtb	r0, r0
 8002836:	2809      	cmp	r0, #9
 8002838:	d907      	bls.n	800284a <pack_call+0xe6>
	if( ch == 32 ) {  //space
 800283a:	f1bc 0f20 	cmp.w	ip, #32
 800283e:	d054      	beq.n	80028ea <pack_call+0x186>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8002840:	f1ac 0041 	sub.w	r0, ip, #65	; 0x41
 8002844:	2819      	cmp	r0, #25
 8002846:	d935      	bls.n	80028b4 <pack_call+0x150>
	return -1;
 8002848:	20ff      	movs	r0, #255	; 0xff
	}
	n = call6[0];
	n = n*36+call6[1];
 800284a:	f04f 0c24 	mov.w	ip, #36	; 0x24
	n = n*10+call6[2];
	n = n*27+call6[3]-10;
 800284e:	3b0a      	subs	r3, #10
	n = n*27+call6[4]-10;
 8002850:	390a      	subs	r1, #10
	n = n*27+call6[5]-10;
 8002852:	380a      	subs	r0, #10
	n = n*36+call6[1];
 8002854:	fb1c 4c0e 	smlabb	ip, ip, lr, r4
	n = n*10+call6[2];
 8002858:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800285c:	eb02 024c 	add.w	r2, r2, ip, lsl #1
	n = n*27+call6[3]-10;
 8002860:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002864:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8002868:	4413      	add	r3, r2
	n = n*27+call6[4]-10;
 800286a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800286e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002872:	440b      	add	r3, r1
	n = n*27+call6[5]-10;
 8002874:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002878:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800287c:	4418      	add	r0, r3
	return n;
}
 800287e:	b002      	add	sp, #8
 8002880:	bd10      	pop	{r4, pc}
	} else if( isdigit((int) callsign[1]) ) {
 8002882:	7862      	ldrb	r2, [r4, #1]
 8002884:	5cd3      	ldrb	r3, [r2, r3]
 8002886:	075b      	lsls	r3, r3, #29
 8002888:	d584      	bpl.n	8002794 <pack_call+0x30>
		for (i=1; i<call_len+1; i++) {
 800288a:	2800      	cmp	r0, #0
 800288c:	d082      	beq.n	8002794 <pack_call+0x30>
			call6[i]=callsign[i-1];
 800288e:	4602      	mov	r2, r0
 8002890:	4621      	mov	r1, r4
 8002892:	f10d 0001 	add.w	r0, sp, #1
 8002896:	f00e f889 	bl	80109ac <memcpy>
 800289a:	e77b      	b.n	8002794 <pack_call+0x30>
		return 0;
 800289c:	2000      	movs	r0, #0
}
 800289e:	b002      	add	sp, #8
 80028a0:	bd10      	pop	{r4, pc}
		return ch-55;
 80028a2:	f1a3 0c37 	sub.w	ip, r3, #55	; 0x37
 80028a6:	fa5f fe8c 	uxtb.w	lr, ip
 80028aa:	e785      	b.n	80027b8 <pack_call+0x54>
 80028ac:	f1a0 0137 	sub.w	r1, r0, #55	; 0x37
 80028b0:	b2c9      	uxtb	r1, r1
 80028b2:	e7bb      	b.n	800282c <pack_call+0xc8>
 80028b4:	f1ac 0037 	sub.w	r0, ip, #55	; 0x37
 80028b8:	b2c0      	uxtb	r0, r0
 80028ba:	e7c6      	b.n	800284a <pack_call+0xe6>
 80028bc:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e7a5      	b.n	8002810 <pack_call+0xac>
 80028c4:	3b37      	subs	r3, #55	; 0x37
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	e794      	b.n	80027f4 <pack_call+0x90>
 80028ca:	f1a3 0c37 	sub.w	ip, r3, #55	; 0x37
 80028ce:	fa5f f48c 	uxtb.w	r4, ip
 80028d2:	e781      	b.n	80027d8 <pack_call+0x74>
		return 36;
 80028d4:	2324      	movs	r3, #36	; 0x24
 80028d6:	e79b      	b.n	8002810 <pack_call+0xac>
 80028d8:	2224      	movs	r2, #36	; 0x24
 80028da:	e78b      	b.n	80027f4 <pack_call+0x90>
 80028dc:	2424      	movs	r4, #36	; 0x24
 80028de:	e77b      	b.n	80027d8 <pack_call+0x74>
 80028e0:	f04f 0e24 	mov.w	lr, #36	; 0x24
 80028e4:	e768      	b.n	80027b8 <pack_call+0x54>
 80028e6:	2124      	movs	r1, #36	; 0x24
 80028e8:	e7a0      	b.n	800282c <pack_call+0xc8>
 80028ea:	2024      	movs	r0, #36	; 0x24
 80028ec:	e7ad      	b.n	800284a <pack_call+0xe6>
 80028ee:	bf00      	nop
 80028f0:	0801de25 	.word	0x0801de25

080028f4 <get_wspr_channel_symbols>:
	memcpy(sym, tmp, sizeof(tmp));
}

int
get_wspr_channel_symbols(char* rawmessage, uint8_t* symbols)
{
 80028f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			0,0,0,0,1,0,0,1,0,0,1,1,1,0,1,1,0,0,1,1,
			0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,1,0,0,1,1,
			0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,0,0,1,1,0,
			0,0
	};
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 80028f8:	4abd      	ldr	r2, [pc, #756]	; (8002bf0 <get_wspr_channel_symbols+0x2fc>)
	char *callsign, *grid, *powstr;
	char grid4[5], message[23];

	memset(message,0,sizeof(char)*23);
 80028fa:	2300      	movs	r3, #0
{
 80028fc:	4605      	mov	r5, r0
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 80028fe:	4614      	mov	r4, r2
{
 8002900:	ed2d 8b02 	vpush	{d8}
 8002904:	b0ed      	sub	sp, #436	; 0x1b4
 8002906:	af00      	add	r7, sp, #0
	i=0;
	while ( rawmessage[i] != 0 && i<23 ) {
 8002908:	f890 c000 	ldrb.w	ip, [r0]
	memset(message,0,sizeof(char)*23);
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 800290e:	f107 0634 	add.w	r6, r7, #52	; 0x34
{
 8002912:	6039      	str	r1, [r7, #0]
	memset(message,0,sizeof(char)*23);
 8002914:	f8c7 302f 	str.w	r3, [r7, #47]	; 0x2f
 8002918:	e9c7 3307 	strd	r3, r3, [r7, #28]
 800291c:	e9c7 3309 	strd	r3, r3, [r7, #36]	; 0x24
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 8002920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002922:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002926:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002928:	e894 0003 	ldmia.w	r4, {r0, r1}
 800292c:	e886 0003 	stmia.w	r6, {r0, r1}
	while ( rawmessage[i] != 0 && i<23 ) {
 8002930:	f1bc 0f00 	cmp.w	ip, #0
 8002934:	d00d      	beq.n	8002952 <get_wspr_channel_symbols+0x5e>
 8002936:	f107 021c 	add.w	r2, r7, #28
 800293a:	1c6b      	adds	r3, r5, #1
 800293c:	43e8      	mvns	r0, r5
 800293e:	4664      	mov	r4, ip
 8002940:	e000      	b.n	8002944 <get_wspr_channel_symbols+0x50>
 8002942:	b134      	cbz	r4, 8002952 <get_wspr_channel_symbols+0x5e>
		message[i]=rawmessage[i];
 8002944:	f802 4b01 	strb.w	r4, [r2], #1
	while ( rawmessage[i] != 0 && i<23 ) {
 8002948:	f813 4b01 	ldrb.w	r4, [r3], #1
 800294c:	18c1      	adds	r1, r0, r3
 800294e:	2917      	cmp	r1, #23
 8002950:	d1f7      	bne.n	8002942 <get_wspr_channel_symbols+0x4e>
		i++;
	}

	size_t i1=strcspn(message," ");
 8002952:	49a8      	ldr	r1, [pc, #672]	; (8002bf4 <get_wspr_channel_symbols+0x300>)
 8002954:	f107 001c 	add.w	r0, r7, #28
 8002958:	f00e fd14 	bl	8011384 <strcspn>
	size_t i2=strcspn(message,"/");
 800295c:	49a6      	ldr	r1, [pc, #664]	; (8002bf8 <get_wspr_channel_symbols+0x304>)
	size_t i1=strcspn(message," ");
 800295e:	4604      	mov	r4, r0
	size_t i2=strcspn(message,"/");
 8002960:	f107 001c 	add.w	r0, r7, #28
 8002964:	f00e fd0e 	bl	8011384 <strcspn>
	size_t i3=strcspn(message,"<");
 8002968:	49a4      	ldr	r1, [pc, #656]	; (8002bfc <get_wspr_channel_symbols+0x308>)
	size_t i2=strcspn(message,"/");
 800296a:	4606      	mov	r6, r0
	size_t i3=strcspn(message,"<");
 800296c:	f107 001c 	add.w	r0, r7, #28
 8002970:	f00e fd08 	bl	8011384 <strcspn>
	size_t mlen=strlen(message);

	// Use the presence and/or absence of "<" and "/" to decide what
	// type of message. No sanity checks! Beware!

	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 8002974:	3c04      	subs	r4, #4
	size_t i4=strcspn(message,">");
 8002976:	49a2      	ldr	r1, [pc, #648]	; (8002c00 <get_wspr_channel_symbols+0x30c>)
	size_t i3=strcspn(message,"<");
 8002978:	4605      	mov	r5, r0
	size_t i4=strcspn(message,">");
 800297a:	f107 001c 	add.w	r0, r7, #28
 800297e:	f00e fd01 	bl	8011384 <strcspn>
 8002982:	4680      	mov	r8, r0
	size_t mlen=strlen(message);
 8002984:	f107 001c 	add.w	r0, r7, #28
 8002988:	f7fd fcaa 	bl	80002e0 <strlen>
	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 800298c:	2c02      	cmp	r4, #2
	size_t mlen=strlen(message);
 800298e:	4603      	mov	r3, r0
	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 8002990:	d804      	bhi.n	800299c <get_wspr_channel_symbols+0xa8>
 8002992:	4286      	cmp	r6, r0
 8002994:	d102      	bne.n	800299c <get_wspr_channel_symbols+0xa8>
 8002996:	4285      	cmp	r5, r0
 8002998:	f000 813a 	beq.w	8002c10 <get_wspr_channel_symbols+0x31c>
		for (i=0; i<4; i++) {
			grid4[i]=get_locator_character_code(*(grid+i));
		}
		m = pack_grid4_power(grid4,power);

	} else if ( i3 == 0 && i4 < mlen ) {
 800299c:	b915      	cbnz	r5, 80029a4 <get_wspr_channel_symbols+0xb0>
 800299e:	4598      	cmp	r8, r3
 80029a0:	f0c0 8082 	bcc.w	8002aa8 <get_wspr_channel_symbols+0x1b4>
		for(i=0; i<j-1; i++) {
			grid6[i]=grid[i+1];
		}
		grid6[5]=grid[0];
		n = pack_call(grid6);
	} else if ( i2 < mlen ) {  // just looks for a right slash
 80029a4:	429e      	cmp	r6, r3
 80029a6:	d307      	bcc.n	80029b8 <get_wspr_channel_symbols+0xc4>
		pack_prefix(callsign, &n1, &ng, &nadd);
		ntype=power + 1 + nadd;
		m=128*ng+ntype+64;
		n=n1;
	} else {
		return 0;
 80029a8:	2000      	movs	r0, #0

	for (i=0; i < 162; i++) {
		symbols[i] = 2 * channelbits[i] + pr3[i];
	}
	return 1;
}
 80029aa:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 80029ae:	46bd      	mov	sp, r7
 80029b0:	ecbd 8b02 	vpop	{d8}
 80029b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		callsign = strtok (message," ");
 80029b8:	498e      	ldr	r1, [pc, #568]	; (8002bf4 <get_wspr_channel_symbols+0x300>)
 80029ba:	f107 001c 	add.w	r0, r7, #28
 80029be:	f00e fcf3 	bl	80113a8 <strtok>
 80029c2:	4604      	mov	r4, r0
 80029c4:	4682      	mov	sl, r0
		if( i2==0 || i2>strlen(callsign) ) return 0; //guards against pathological case
 80029c6:	2e00      	cmp	r6, #0
 80029c8:	d0ee      	beq.n	80029a8 <get_wspr_channel_symbols+0xb4>
 80029ca:	f7fd fc89 	bl	80002e0 <strlen>
 80029ce:	42b0      	cmp	r0, r6
 80029d0:	d3ea      	bcc.n	80029a8 <get_wspr_channel_symbols+0xb4>
		powstr = strtok (NULL," ");
 80029d2:	4988      	ldr	r1, [pc, #544]	; (8002bf4 <get_wspr_channel_symbols+0x300>)
 80029d4:	2000      	movs	r0, #0
 80029d6:	f00e fce7 	bl	80113a8 <strtok>
		int power = atoi (powstr);
 80029da:	f00d ffb9 	bl	8010950 <atoi>
		if( power < 0 ) power=0;
 80029de:	283c      	cmp	r0, #60	; 0x3c
 80029e0:	4605      	mov	r5, r0
		power=power+nu[power%10];
 80029e2:	4b88      	ldr	r3, [pc, #544]	; (8002c04 <get_wspr_channel_symbols+0x310>)
 80029e4:	bfa8      	it	ge
 80029e6:	253c      	movge	r5, #60	; 0x3c
	size_t i1 = strcspn(callsign,"/");
 80029e8:	4983      	ldr	r1, [pc, #524]	; (8002bf8 <get_wspr_channel_symbols+0x304>)
 80029ea:	4620      	mov	r0, r4
 80029ec:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
		power=power+nu[power%10];
 80029f0:	fba3 2305 	umull	r2, r3, r3, r5
 80029f4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80029f8:	08db      	lsrs	r3, r3, #3
 80029fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80029fe:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
 8002a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a06:	441d      	add	r5, r3
	size_t i1 = strcspn(callsign,"/");
 8002a08:	f00e fcbc 	bl	8011384 <strcspn>
	if( callsign[i1+2] == 0 ) {
 8002a0c:	f100 0802 	add.w	r8, r0, #2
	size_t i1 = strcspn(callsign,"/");
 8002a10:	4606      	mov	r6, r0
	if( callsign[i1+2] == 0 ) {
 8002a12:	f814 3008 	ldrb.w	r3, [r4, r8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8442 	beq.w	80032a0 <get_wspr_channel_symbols+0x9ac>
	} else if( callsign[i1+3]==0 ) {
 8002a1c:	eb04 0900 	add.w	r9, r4, r0
 8002a20:	f899 3003 	ldrb.w	r3, [r9, #3]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f040 8525 	bne.w	8003474 <get_wspr_channel_symbols+0xb80>
		for (i=0; i<i1; i++) {
 8002a2a:	b300      	cbz	r0, 8002a6e <get_wspr_channel_symbols+0x17a>
			call6[i]=callsign[i];
 8002a2c:	7823      	ldrb	r3, [r4, #0]
		for (i=0; i<i1; i++) {
 8002a2e:	2801      	cmp	r0, #1
			call6[i]=callsign[i];
 8002a30:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		for (i=0; i<i1; i++) {
 8002a34:	d01b      	beq.n	8002a6e <get_wspr_channel_symbols+0x17a>
			call6[i]=callsign[i];
 8002a36:	7863      	ldrb	r3, [r4, #1]
		for (i=0; i<i1; i++) {
 8002a38:	2802      	cmp	r0, #2
			call6[i]=callsign[i];
 8002a3a:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		for (i=0; i<i1; i++) {
 8002a3e:	d016      	beq.n	8002a6e <get_wspr_channel_symbols+0x17a>
			call6[i]=callsign[i];
 8002a40:	78a3      	ldrb	r3, [r4, #2]
		for (i=0; i<i1; i++) {
 8002a42:	2803      	cmp	r0, #3
			call6[i]=callsign[i];
 8002a44:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		for (i=0; i<i1; i++) {
 8002a48:	d011      	beq.n	8002a6e <get_wspr_channel_symbols+0x17a>
			call6[i]=callsign[i];
 8002a4a:	78e3      	ldrb	r3, [r4, #3]
		for (i=0; i<i1; i++) {
 8002a4c:	2804      	cmp	r0, #4
			call6[i]=callsign[i];
 8002a4e:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		for (i=0; i<i1; i++) {
 8002a52:	d00c      	beq.n	8002a6e <get_wspr_channel_symbols+0x17a>
			call6[i]=callsign[i];
 8002a54:	7923      	ldrb	r3, [r4, #4]
		for (i=0; i<i1; i++) {
 8002a56:	2805      	cmp	r0, #5
			call6[i]=callsign[i];
 8002a58:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		for (i=0; i<i1; i++) {
 8002a5c:	d007      	beq.n	8002a6e <get_wspr_channel_symbols+0x17a>
			call6[i]=callsign[i];
 8002a5e:	7963      	ldrb	r3, [r4, #5]
		for (i=0; i<i1; i++) {
 8002a60:	2806      	cmp	r0, #6
			call6[i]=callsign[i];
 8002a62:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		for (i=0; i<i1; i++) {
 8002a66:	d002      	beq.n	8002a6e <get_wspr_channel_symbols+0x17a>
			call6[i]=callsign[i];
 8002a68:	79a3      	ldrb	r3, [r4, #6]
 8002a6a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		*n=pack_call(call6);
 8002a6e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a72:	4618      	mov	r0, r3
 8002a74:	ee08 3a10 	vmov	s16, r3
 8002a78:	f7ff fe74 	bl	8002764 <pack_call>
		*m=10*(callsign[i1+1]-48)+(callsign[i1+2]-48);
 8002a7c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8002a80:	f81a 1008 	ldrb.w	r1, [sl, r8]
		*n=pack_call(call6);
 8002a84:	4604      	mov	r4, r0
		*m=10*(callsign[i1+1]-48)+(callsign[i1+2]-48);
 8002a86:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8002a8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a8e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
		*m=60000 + 26 + *m;
 8002a92:	f64e 234a 	movw	r3, #59978	; 0xea4a
 8002a96:	440b      	add	r3, r1
		m=128*ng+ntype+64;
 8002a98:	01db      	lsls	r3, r3, #7
		*nadd=1;
 8002a9a:	2201      	movs	r2, #1
		ntype=power + 1 + nadd;
 8002a9c:	3501      	adds	r5, #1
 8002a9e:	4415      	add	r5, r2
		m=128*ng+ntype+64;
 8002aa0:	442b      	add	r3, r5
 8002aa2:	f103 0540 	add.w	r5, r3, #64	; 0x40
		n=n1;
 8002aa6:	e119      	b.n	8002cdc <get_wspr_channel_symbols+0x3e8>
		callsign=strtok(message,"<> ");
 8002aa8:	4957      	ldr	r1, [pc, #348]	; (8002c08 <get_wspr_channel_symbols+0x314>)
 8002aaa:	f107 001c 	add.w	r0, r7, #28
 8002aae:	f00e fc7b 	bl	80113a8 <strtok>
		grid=strtok(NULL," ");
 8002ab2:	4950      	ldr	r1, [pc, #320]	; (8002bf4 <get_wspr_channel_symbols+0x300>)
		callsign=strtok(message,"<> ");
 8002ab4:	4606      	mov	r6, r0
		grid=strtok(NULL," ");
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f00e fc76 	bl	80113a8 <strtok>
		powstr=strtok(NULL," ");
 8002abc:	494d      	ldr	r1, [pc, #308]	; (8002bf4 <get_wspr_channel_symbols+0x300>)
		grid=strtok(NULL," ");
 8002abe:	4604      	mov	r4, r0
		powstr=strtok(NULL," ");
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f00e fc71 	bl	80113a8 <strtok>
		callsign=strtok(message,"<> ");
 8002ac6:	46b0      	mov	r8, r6
		int power = atoi(powstr);
 8002ac8:	f00d ff42 	bl	8010950 <atoi>
		if( power < 0 ) power=0;
 8002acc:	283c      	cmp	r0, #60	; 0x3c
		power=power+nu[power%10];
 8002ace:	4b4d      	ldr	r3, [pc, #308]	; (8002c04 <get_wspr_channel_symbols+0x310>)
 8002ad0:	bfa8      	it	ge
 8002ad2:	203c      	movge	r0, #60	; 0x3c
 8002ad4:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
		ihash=nhash(callsign,strlen(callsign),(uint32_t)146);
 8002ad8:	4630      	mov	r0, r6
		power=power+nu[power%10];
 8002ada:	fba3 1302 	umull	r1, r3, r3, r2
 8002ade:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002ae2:	08db      	lsrs	r3, r3, #3
 8002ae4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ae8:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8002aec:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8002af0:	442a      	add	r2, r5
		ntype=-(power+1);
 8002af2:	43d5      	mvns	r5, r2
		ihash=nhash(callsign,strlen(callsign),(uint32_t)146);
 8002af4:	f7fd fbf4 	bl	80002e0 <strlen>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8002af8:	4b44      	ldr	r3, [pc, #272]	; (8002c0c <get_wspr_channel_symbols+0x318>)
	if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {
 8002afa:	07b1      	lsls	r1, r6, #30
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8002afc:	4403      	add	r3, r0
	if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {
 8002afe:	f000 8296 	beq.w	800302e <get_wspr_channel_symbols+0x73a>
	} else if (HASH_LITTLE_ENDIAN && ((u.i & 0x1) == 0)) {
 8002b02:	4632      	mov	r2, r6
 8002b04:	07d2      	lsls	r2, r2, #31
 8002b06:	f140 8365 	bpl.w	80031d4 <get_wspr_channel_symbols+0x8e0>
		while (length > 12)
 8002b0a:	280c      	cmp	r0, #12
 8002b0c:	f240 8514 	bls.w	8003538 <get_wspr_channel_symbols+0xc44>
 8002b10:	360c      	adds	r6, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8002b12:	461a      	mov	r2, r3
 8002b14:	4619      	mov	r1, r3
 8002b16:	46a1      	mov	r9, r4
 8002b18:	469c      	mov	ip, r3
			c += ((uint32_t)k[10])<<16;
 8002b1a:	f816 ec02 	ldrb.w	lr, [r6, #-2]
			length -= 12;
 8002b1e:	380c      	subs	r0, #12
			c += ((uint32_t)k[9])<<8;
 8002b20:	f816 3c03 	ldrb.w	r3, [r6, #-3]
			c += ((uint32_t)k[10])<<16;
 8002b24:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
			c += ((uint32_t)k[11])<<24;
 8002b28:	f816 8c01 	ldrb.w	r8, [r6, #-1]
		while (length > 12)
 8002b2c:	280c      	cmp	r0, #12
			c += ((uint32_t)k[11])<<24;
 8002b2e:	eb0e 2e03 	add.w	lr, lr, r3, lsl #8
			a += ((uint32_t)k[2])<<16;
 8002b32:	f816 3c0a 	ldrb.w	r3, [r6, #-10]
 8002b36:	ea4f 4403 	mov.w	r4, r3, lsl #16
			c += k[8];
 8002b3a:	f816 3c04 	ldrb.w	r3, [r6, #-4]
			c += ((uint32_t)k[11])<<24;
 8002b3e:	449e      	add	lr, r3
			a += ((uint32_t)k[1])<<8;
 8002b40:	f816 3c0b 	ldrb.w	r3, [r6, #-11]
			c += ((uint32_t)k[11])<<24;
 8002b44:	eb0e 6e08 	add.w	lr, lr, r8, lsl #24
			mix(a,b,c);
 8002b48:	eb04 2403 	add.w	r4, r4, r3, lsl #8
			b += ((uint32_t)k[6])<<16;
 8002b4c:	f816 3c06 	ldrb.w	r3, [r6, #-6]
			c += ((uint32_t)k[11])<<24;
 8002b50:	4472      	add	r2, lr
			a += k[0];
 8002b52:	f816 ec0c 	ldrb.w	lr, [r6, #-12]
			b += ((uint32_t)k[6])<<16;
 8002b56:	ea4f 4303 	mov.w	r3, r3, lsl #16
			mix(a,b,c);
 8002b5a:	4474      	add	r4, lr
			b += ((uint32_t)k[5])<<8;
 8002b5c:	f816 ec07 	ldrb.w	lr, [r6, #-7]
			b += ((uint32_t)k[7])<<24;
 8002b60:	eb03 230e 	add.w	r3, r3, lr, lsl #8
			a += ((uint32_t)k[3])<<24;
 8002b64:	f816 ec09 	ldrb.w	lr, [r6, #-9]
			mix(a,b,c);
 8002b68:	eb04 640e 	add.w	r4, r4, lr, lsl #24
 8002b6c:	46b6      	mov	lr, r6
		while (length > 12)
 8002b6e:	f106 060c 	add.w	r6, r6, #12
			mix(a,b,c);
 8002b72:	eba4 0402 	sub.w	r4, r4, r2
 8002b76:	4464      	add	r4, ip
			b += k[4];
 8002b78:	f816 cc14 	ldrb.w	ip, [r6, #-20]
			b += ((uint32_t)k[7])<<24;
 8002b7c:	4463      	add	r3, ip
 8002b7e:	f816 cc11 	ldrb.w	ip, [r6, #-17]
			mix(a,b,c);
 8002b82:	ea84 7432 	eor.w	r4, r4, r2, ror #28
			b += ((uint32_t)k[7])<<24;
 8002b86:	eb03 630c 	add.w	r3, r3, ip, lsl #24
 8002b8a:	440b      	add	r3, r1
			mix(a,b,c);
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	441a      	add	r2, r3
 8002b90:	eba3 0304 	sub.w	r3, r3, r4
 8002b94:	ea83 63b4 	eor.w	r3, r3, r4, ror #26
 8002b98:	4411      	add	r1, r2
 8002b9a:	eba2 0203 	sub.w	r2, r2, r3
 8002b9e:	ea82 6233 	eor.w	r2, r2, r3, ror #24
 8002ba2:	440b      	add	r3, r1
 8002ba4:	eba1 0102 	sub.w	r1, r1, r2
 8002ba8:	ea81 4432 	eor.w	r4, r1, r2, ror #16
 8002bac:	441a      	add	r2, r3
 8002bae:	eba3 0304 	sub.w	r3, r3, r4
 8002bb2:	eb04 0c02 	add.w	ip, r4, r2
 8002bb6:	ea83 3174 	eor.w	r1, r3, r4, ror #13
 8002bba:	eba2 0201 	sub.w	r2, r2, r1
 8002bbe:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8002bc2:	4461      	add	r1, ip
		while (length > 12)
 8002bc4:	d8a9      	bhi.n	8002b1a <get_wspr_channel_symbols+0x226>
 8002bc6:	464c      	mov	r4, r9
 8002bc8:	4663      	mov	r3, ip
 8002bca:	46f0      	mov	r8, lr
		switch(length)                   /* all the case statements fall through */
 8002bcc:	3801      	subs	r0, #1
 8002bce:	280b      	cmp	r0, #11
 8002bd0:	f200 82bd 	bhi.w	800314e <get_wspr_channel_symbols+0x85a>
 8002bd4:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002bd8:	029b029f 	.word	0x029b029f
 8002bdc:	02930297 	.word	0x02930297
 8002be0:	028c0290 	.word	0x028c0290
 8002be4:	02840288 	.word	0x02840288
 8002be8:	027d0281 	.word	0x027d0281
 8002bec:	02750279 	.word	0x02750279
 8002bf0:	08014b80 	.word	0x08014b80
 8002bf4:	0801ae58 	.word	0x0801ae58
 8002bf8:	0801ac80 	.word	0x0801ac80
 8002bfc:	0801ac84 	.word	0x0801ac84
 8002c00:	0801ac88 	.word	0x0801ac88
 8002c04:	cccccccd 	.word	0xcccccccd
 8002c08:	0801ac8c 	.word	0x0801ac8c
 8002c0c:	deadbf81 	.word	0xdeadbf81
		callsign = strtok(message," ");
 8002c10:	49ce      	ldr	r1, [pc, #824]	; (8002f4c <get_wspr_channel_symbols+0x658>)
 8002c12:	f107 001c 	add.w	r0, r7, #28
 8002c16:	f00e fbc7 	bl	80113a8 <strtok>
		grid = strtok(NULL," ");
 8002c1a:	49cc      	ldr	r1, [pc, #816]	; (8002f4c <get_wspr_channel_symbols+0x658>)
		callsign = strtok(message," ");
 8002c1c:	4604      	mov	r4, r0
		grid = strtok(NULL," ");
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f00e fbc2 	bl	80113a8 <strtok>
		powstr = strtok(NULL," ");
 8002c24:	49c9      	ldr	r1, [pc, #804]	; (8002f4c <get_wspr_channel_symbols+0x658>)
		grid = strtok(NULL," ");
 8002c26:	4606      	mov	r6, r0
		powstr = strtok(NULL," ");
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f00e fbbd 	bl	80113a8 <strtok>
		int power = atoi(powstr);
 8002c2e:	f00d fe8f 	bl	8010950 <atoi>
 8002c32:	4605      	mov	r5, r0
		n = pack_call(callsign);
 8002c34:	4620      	mov	r0, r4
 8002c36:	f7ff fd95 	bl	8002764 <pack_call>
			grid4[i]=get_locator_character_code(*(grid+i));
 8002c3a:	7832      	ldrb	r2, [r6, #0]
		n = pack_call(callsign);
 8002c3c:	4604      	mov	r4, r0
	if( ch >=48 && ch <=57 ) { //0-9
 8002c3e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b09      	cmp	r3, #9
 8002c46:	d908      	bls.n	8002c5a <get_wspr_channel_symbols+0x366>
	if( ch == 32 ) {  //space
 8002c48:	2a20      	cmp	r2, #32
 8002c4a:	f000 845c 	beq.w	8003506 <get_wspr_channel_symbols+0xc12>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8002c4e:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 8002c52:	b2db      	uxtb	r3, r3
	return -1;
 8002c54:	2b12      	cmp	r3, #18
 8002c56:	bf28      	it	cs
 8002c58:	23ff      	movcs	r3, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8002c5a:	7871      	ldrb	r1, [r6, #1]
	if( ch >=48 && ch <=57 ) { //0-9
 8002c5c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	2a09      	cmp	r2, #9
 8002c64:	d908      	bls.n	8002c78 <get_wspr_channel_symbols+0x384>
	if( ch == 32 ) {  //space
 8002c66:	2920      	cmp	r1, #32
 8002c68:	f000 844a 	beq.w	8003500 <get_wspr_channel_symbols+0xc0c>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8002c6c:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
 8002c70:	b2d2      	uxtb	r2, r2
	return -1;
 8002c72:	2a12      	cmp	r2, #18
 8002c74:	bf28      	it	cs
 8002c76:	22ff      	movcs	r2, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8002c78:	78b1      	ldrb	r1, [r6, #2]
	if( ch >=48 && ch <=57 ) { //0-9
 8002c7a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8002c7e:	b2c0      	uxtb	r0, r0
 8002c80:	2809      	cmp	r0, #9
 8002c82:	d907      	bls.n	8002c94 <get_wspr_channel_symbols+0x3a0>
	if( ch == 32 ) {  //space
 8002c84:	2920      	cmp	r1, #32
 8002c86:	f000 8441 	beq.w	800350c <get_wspr_channel_symbols+0xc18>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8002c8a:	3941      	subs	r1, #65	; 0x41
 8002c8c:	b2c8      	uxtb	r0, r1
	return -1;
 8002c8e:	2812      	cmp	r0, #18
 8002c90:	bf28      	it	cs
 8002c92:	20ff      	movcs	r0, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8002c94:	78f6      	ldrb	r6, [r6, #3]
	if( ch >=48 && ch <=57 ) { //0-9
 8002c96:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8002c9a:	b2c9      	uxtb	r1, r1
 8002c9c:	2909      	cmp	r1, #9
 8002c9e:	d908      	bls.n	8002cb2 <get_wspr_channel_symbols+0x3be>
	if( ch == 32 ) {  //space
 8002ca0:	2e20      	cmp	r6, #32
 8002ca2:	f000 8427 	beq.w	80034f4 <get_wspr_channel_symbols+0xc00>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8002ca6:	f1a6 0141 	sub.w	r1, r6, #65	; 0x41
 8002caa:	b2c9      	uxtb	r1, r1
	return -1;
 8002cac:	2912      	cmp	r1, #18
 8002cae:	bf28      	it	cs
 8002cb0:	21ff      	movcs	r1, #255	; 0xff
	m=(179-10*grid4[0]-grid4[2])*180+10*grid4[1]+grid4[3];
 8002cb2:	f06f 0609 	mvn.w	r6, #9
 8002cb6:	b212      	sxth	r2, r2
 8002cb8:	fb06 f303 	mul.w	r3, r6, r3
 8002cbc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002cc0:	33b3      	adds	r3, #179	; 0xb3
 8002cc2:	0052      	lsls	r2, r2, #1
 8002cc4:	1a1b      	subs	r3, r3, r0
 8002cc6:	20b4      	movs	r0, #180	; 0xb4
 8002cc8:	fb00 2203 	mla	r2, r0, r3, r2
 8002ccc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002cd0:	440a      	add	r2, r1
 8002cd2:	ee08 3a10 	vmov	s16, r3
 8002cd6:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
	m=m*128+power+64;
 8002cda:	3540      	adds	r5, #64	; 0x40
	it=0xFF & (n>>20);
 8002cdc:	0d23      	lsrs	r3, r4, #20
	it= ((n&(0x0F))<<4) + ((m>>18)&(0x0F));
 8002cde:	f3c5 4283 	ubfx	r2, r5, #18, #4
	memset(data,0,sizeof(data));
 8002ce2:	2600      	movs	r6, #0
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8002ce4:	ee18 0a10 	vmov	r0, s16
	it=0xFF & (n>>20);
 8002ce8:	743b      	strb	r3, [r7, #16]
	it=0xFF & (n>>12);
 8002cea:	0b23      	lsrs	r3, r4, #12
	it= ((n&(0x0F))<<4) + ((m>>18)&(0x0F));
 8002cec:	eb02 1204 	add.w	r2, r2, r4, lsl #4
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8002cf0:	4631      	mov	r1, r6
	it=0xFF & (n>>12);
 8002cf2:	747b      	strb	r3, [r7, #17]
	it=0xFF & (n>>4);
 8002cf4:	0923      	lsrs	r3, r4, #4
	data[3]=it;
 8002cf6:	74fa      	strb	r2, [r7, #19]
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8002cf8:	22b0      	movs	r2, #176	; 0xb0
	it=0xFF & (n>>4);
 8002cfa:	74bb      	strb	r3, [r7, #18]
	it=0xFF & (m>>10);
 8002cfc:	12ab      	asrs	r3, r5, #10
	memset(data,0,sizeof(data));
 8002cfe:	f8c7 6017 	str.w	r6, [r7, #23]
	it=0xFF & (m>>10);
 8002d02:	753b      	strb	r3, [r7, #20]
	it=0xFF & (m>>2);
 8002d04:	10ab      	asrs	r3, r5, #2
			ENCODE(sym,encstate);
 8002d06:	4c92      	ldr	r4, [pc, #584]	; (8002f50 <get_wspr_channel_symbols+0x65c>)
	it=0xFF & (m>>2);
 8002d08:	757b      	strb	r3, [r7, #21]
	it=(m & 0x03)<<6 ;
 8002d0a:	01ab      	lsls	r3, r5, #6
			ENCODE(sym,encstate);
 8002d0c:	4d91      	ldr	r5, [pc, #580]	; (8002f54 <get_wspr_channel_symbols+0x660>)
	it=(m & 0x03)<<6 ;
 8002d0e:	75bb      	strb	r3, [r7, #22]
	uint8_t channelbits[nbytes*8*2]; /* 162 rounded up */
 8002d10:	466b      	mov	r3, sp
 8002d12:	ee08 3a90 	vmov	s17, r3
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8002d16:	f00d fe57 	bl	80109c8 <memset>
	while(nbytes-- != 0) {
 8002d1a:	f107 0310 	add.w	r3, r7, #16
 8002d1e:	4a8e      	ldr	r2, [pc, #568]	; (8002f58 <get_wspr_channel_symbols+0x664>)
			ENCODE(sym,encstate);
 8002d20:	60fe      	str	r6, [r7, #12]
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	f507 7388 	add.w	r3, r7, #272	; 0x110
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002d28:	68b8      	ldr	r0, [r7, #8]
	while(nbytes-- != 0) {
 8002d2a:	3310      	adds	r3, #16
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002d2c:	68f9      	ldr	r1, [r7, #12]
 8002d2e:	f810 9b01 	ldrb.w	r9, [r0], #1
 8002d32:	60b8      	str	r0, [r7, #8]
 8002d34:	ea4f 10d9 	mov.w	r0, r9, lsr #7
 8002d38:	f3c9 1880 	ubfx	r8, r9, #6, #1
 8002d3c:	f3c9 1e40 	ubfx	lr, r9, #5, #1
 8002d40:	ea40 0141 	orr.w	r1, r0, r1, lsl #1
 8002d44:	f3c9 1c00 	ubfx	ip, r9, #4, #1
 8002d48:	f3c9 0680 	ubfx	r6, r9, #2, #1
 8002d4c:	ea48 0841 	orr.w	r8, r8, r1, lsl #1
			ENCODE(sym,encstate);
 8002d50:	ea01 0005 	and.w	r0, r1, r5
 8002d54:	4021      	ands	r1, r4
 8002d56:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8002d5a:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002d5e:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
			ENCODE(sym,encstate);
 8002d62:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8002d66:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8002d6a:	b2c9      	uxtb	r1, r1
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002d6c:	ea4c 0c4e 	orr.w	ip, ip, lr, lsl #1
			ENCODE(sym,encstate);
 8002d70:	f812 a001 	ldrb.w	sl, [r2, r1]
 8002d74:	b2c0      	uxtb	r0, r0
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002d76:	f3c9 01c0 	ubfx	r1, r9, #3, #1
			ENCODE(sym,encstate);
 8002d7a:	5c10      	ldrb	r0, [r2, r0]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002d7c:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
			ENCODE(sym,encstate);
 8002d80:	ea4a 0a40 	orr.w	sl, sl, r0, lsl #1
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002d84:	f3c9 0040 	ubfx	r0, r9, #1, #1
 8002d88:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
 8002d8c:	6079      	str	r1, [r7, #4]
 8002d8e:	f009 0101 	and.w	r1, r9, #1
			ENCODE(sym,encstate);
 8002d92:	ea08 0905 	and.w	r9, r8, r5
 8002d96:	ea08 0804 	and.w	r8, r8, r4
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002d9a:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
			ENCODE(sym,encstate);
 8002d9e:	ea89 4919 	eor.w	r9, r9, r9, lsr #16
 8002da2:	ea88 4818 	eor.w	r8, r8, r8, lsr #16
 8002da6:	ea89 2919 	eor.w	r9, r9, r9, lsr #8
 8002daa:	ea88 2818 	eor.w	r8, r8, r8, lsr #8
 8002dae:	fa5f f989 	uxtb.w	r9, r9
 8002db2:	fa5f f888 	uxtb.w	r8, r8
 8002db6:	f812 9009 	ldrb.w	r9, [r2, r9]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002dba:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
			ENCODE(sym,encstate);
 8002dbe:	f812 8008 	ldrb.w	r8, [r2, r8]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002dc2:	60f9      	str	r1, [r7, #12]
			ENCODE(sym,encstate);
 8002dc4:	ea48 0949 	orr.w	r9, r8, r9, lsl #1
 8002dc8:	ea0e 0805 	and.w	r8, lr, r5
 8002dcc:	ea0e 0e04 	and.w	lr, lr, r4
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	ea88 4818 	eor.w	r8, r8, r8, lsr #16
 8002dd6:	ea8e 4e1e 	eor.w	lr, lr, lr, lsr #16
 8002dda:	ea88 2818 	eor.w	r8, r8, r8, lsr #8
 8002dde:	ea8e 2e1e 	eor.w	lr, lr, lr, lsr #8
 8002de2:	fa5f f888 	uxtb.w	r8, r8
 8002de6:	fa5f fe8e 	uxtb.w	lr, lr
 8002dea:	f812 8008 	ldrb.w	r8, [r2, r8]
 8002dee:	f812 e00e 	ldrb.w	lr, [r2, lr]
 8002df2:	ea4e 0848 	orr.w	r8, lr, r8, lsl #1
 8002df6:	ea0c 0e05 	and.w	lr, ip, r5
 8002dfa:	ea0c 0c04 	and.w	ip, ip, r4
 8002dfe:	ea8e 4e1e 	eor.w	lr, lr, lr, lsr #16
 8002e02:	ea8c 4c1c 	eor.w	ip, ip, ip, lsr #16
 8002e06:	ea8e 2e1e 	eor.w	lr, lr, lr, lsr #8
 8002e0a:	ea8c 2c1c 	eor.w	ip, ip, ip, lsr #8
 8002e0e:	fa5f fe8e 	uxtb.w	lr, lr
 8002e12:	fa5f fc8c 	uxtb.w	ip, ip
 8002e16:	f812 e00e 	ldrb.w	lr, [r2, lr]
 8002e1a:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002e1e:	ea4c 0e4e 	orr.w	lr, ip, lr, lsl #1
 8002e22:	ea01 0c05 	and.w	ip, r1, r5
 8002e26:	4021      	ands	r1, r4
 8002e28:	ea8c 4c1c 	eor.w	ip, ip, ip, lsr #16
 8002e2c:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
 8002e30:	ea8c 2c1c 	eor.w	ip, ip, ip, lsr #8
 8002e34:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8002e38:	fa5f fc8c 	uxtb.w	ip, ip
 8002e3c:	b2c9      	uxtb	r1, r1
 8002e3e:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002e42:	5c51      	ldrb	r1, [r2, r1]
 8002e44:	ea41 0c4c 	orr.w	ip, r1, ip, lsl #1
 8002e48:	ea06 0105 	and.w	r1, r6, r5
 8002e4c:	4026      	ands	r6, r4
 8002e4e:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
 8002e52:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 8002e56:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8002e5a:	ea86 2616 	eor.w	r6, r6, r6, lsr #8
 8002e5e:	b2c9      	uxtb	r1, r1
 8002e60:	b2f6      	uxtb	r6, r6
 8002e62:	5c51      	ldrb	r1, [r2, r1]
 8002e64:	5d96      	ldrb	r6, [r2, r6]
 8002e66:	ea46 0141 	orr.w	r1, r6, r1, lsl #1
 8002e6a:	ea00 0605 	and.w	r6, r0, r5
 8002e6e:	4020      	ands	r0, r4
 8002e70:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 8002e74:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8002e78:	ea86 2616 	eor.w	r6, r6, r6, lsr #8
 8002e7c:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8002e80:	b2f6      	uxtb	r6, r6
 8002e82:	b2c0      	uxtb	r0, r0
 8002e84:	5d96      	ldrb	r6, [r2, r6]
 8002e86:	5c10      	ldrb	r0, [r2, r0]
 8002e88:	ea40 0646 	orr.w	r6, r0, r6, lsl #1
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	4028      	ands	r0, r5
 8002e90:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8002e94:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8002e98:	b2c0      	uxtb	r0, r0
 8002e9a:	f812 b000 	ldrb.w	fp, [r2, r0]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	4020      	ands	r0, r4
 8002ea2:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8002ea6:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8002eaa:	b2c0      	uxtb	r0, r0
 8002eac:	5c10      	ldrb	r0, [r2, r0]
 8002eae:	ea40 0b4b 	orr.w	fp, r0, fp, lsl #1
			*symbols++ = sym >> 1;
 8002eb2:	ea4f 006a 	mov.w	r0, sl, asr #1
			*symbols++ = sym & 1;
 8002eb6:	f00a 0a01 	and.w	sl, sl, #1
			*symbols++ = sym >> 1;
 8002eba:	f803 0c20 	strb.w	r0, [r3, #-32]
 8002ebe:	ea4f 0069 	mov.w	r0, r9, asr #1
			*symbols++ = sym & 1;
 8002ec2:	f009 0901 	and.w	r9, r9, #1
 8002ec6:	f803 ac1f 	strb.w	sl, [r3, #-31]
			*symbols++ = sym >> 1;
 8002eca:	f803 0c1e 	strb.w	r0, [r3, #-30]
 8002ece:	ea4f 0068 	mov.w	r0, r8, asr #1
			*symbols++ = sym & 1;
 8002ed2:	f008 0801 	and.w	r8, r8, #1
 8002ed6:	f803 9c1d 	strb.w	r9, [r3, #-29]
			*symbols++ = sym >> 1;
 8002eda:	f803 0c1c 	strb.w	r0, [r3, #-28]
 8002ede:	ea4f 006e 	mov.w	r0, lr, asr #1
			*symbols++ = sym & 1;
 8002ee2:	f00e 0e01 	and.w	lr, lr, #1
 8002ee6:	f803 8c1b 	strb.w	r8, [r3, #-27]
			*symbols++ = sym >> 1;
 8002eea:	f803 0c1a 	strb.w	r0, [r3, #-26]
 8002eee:	ea4f 006c 	mov.w	r0, ip, asr #1
			*symbols++ = sym & 1;
 8002ef2:	f803 ec19 	strb.w	lr, [r3, #-25]
 8002ef6:	f00c 0c01 	and.w	ip, ip, #1
			*symbols++ = sym >> 1;
 8002efa:	f803 0c18 	strb.w	r0, [r3, #-24]
 8002efe:	1048      	asrs	r0, r1, #1
			*symbols++ = sym & 1;
 8002f00:	f001 0101 	and.w	r1, r1, #1
 8002f04:	f803 cc17 	strb.w	ip, [r3, #-23]
			*symbols++ = sym >> 1;
 8002f08:	f803 0c16 	strb.w	r0, [r3, #-22]
 8002f0c:	1070      	asrs	r0, r6, #1
			*symbols++ = sym & 1;
 8002f0e:	f803 1c15 	strb.w	r1, [r3, #-21]
 8002f12:	f006 0601 	and.w	r6, r6, #1
			*symbols++ = sym >> 1;
 8002f16:	f803 0c14 	strb.w	r0, [r3, #-20]
 8002f1a:	ea4f 006b 	mov.w	r0, fp, asr #1
	while(nbytes-- != 0) {
 8002f1e:	f107 011b 	add.w	r1, r7, #27
			*symbols++ = sym & 1;
 8002f22:	f00b 0b01 	and.w	fp, fp, #1
			*symbols++ = sym >> 1;
 8002f26:	f803 0c12 	strb.w	r0, [r3, #-18]
	while(nbytes-- != 0) {
 8002f2a:	68b8      	ldr	r0, [r7, #8]
			*symbols++ = sym & 1;
 8002f2c:	f803 6c13 	strb.w	r6, [r3, #-19]
	while(nbytes-- != 0) {
 8002f30:	4288      	cmp	r0, r1
			*symbols++ = sym & 1;
 8002f32:	f803 bc11 	strb.w	fp, [r3, #-17]
	while(nbytes-- != 0) {
 8002f36:	f47f aef7 	bne.w	8002d28 <get_wspr_channel_symbols+0x434>
 8002f3a:	f04f 0e00 	mov.w	lr, #0
 8002f3e:	f107 0b5c 	add.w	fp, r7, #92	; 0x5c
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8002f42:	f8df a018 	ldr.w	sl, [pc, #24]	; 8002f5c <get_wspr_channel_symbols+0x668>
	i = p = 0;
 8002f46:	46f4      	mov	ip, lr
 8002f48:	e00a      	b.n	8002f60 <get_wspr_channel_symbols+0x66c>
 8002f4a:	bf00      	nop
 8002f4c:	0801ae58 	.word	0x0801ae58
 8002f50:	e4613c47 	.word	0xe4613c47
 8002f54:	f2d05351 	.word	0xf2d05351
 8002f58:	0801aca0 	.word	0x0801aca0
 8002f5c:	84422110 	.word	0x84422110
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8002f60:	fa5f f58e 	uxtb.w	r5, lr
			tmp[j] = sym[p];
 8002f64:	f50c 72d0 	add.w	r2, ip, #416	; 0x1a0
 8002f68:	f107 0110 	add.w	r1, r7, #16
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8002f6c:	2300      	movs	r3, #0
			p++;
 8002f6e:	f10c 0001 	add.w	r0, ip, #1
			tmp[j] = sym[p];
 8002f72:	1854      	adds	r4, r2, r1
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8002f74:	462a      	mov	r2, r5
 8002f76:	02ad      	lsls	r5, r5, #10
 8002f78:	18ad      	adds	r5, r5, r2
 8002f7a:	f143 0300 	adc.w	r3, r3, #0
 8002f7e:	052a      	lsls	r2, r5, #20
 8002f80:	051e      	lsls	r6, r3, #20
 8002f82:	18aa      	adds	r2, r5, r2
 8002f84:	ea46 3615 	orr.w	r6, r6, r5, lsr #12
 8002f88:	eb43 0306 	adc.w	r3, r3, r6
 8002f8c:	1892      	adds	r2, r2, r2
 8002f8e:	415b      	adcs	r3, r3
 8002f90:	ea02 060a 	and.w	r6, r2, sl
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	0235      	lsls	r5, r6, #8
 8002f9a:	021a      	lsls	r2, r3, #8
 8002f9c:	19ad      	adds	r5, r5, r6
 8002f9e:	ea42 6216 	orr.w	r2, r2, r6, lsr #24
 8002fa2:	ea4f 4105 	mov.w	r1, r5, lsl #16
 8002fa6:	eb43 0202 	adc.w	r2, r3, r2
 8002faa:	1869      	adds	r1, r5, r1
 8002fac:	ea4f 4902 	mov.w	r9, r2, lsl #16
 8002fb0:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8002fb4:	ea49 4915 	orr.w	r9, r9, r5, lsr #16
 8002fb8:	eb42 0209 	adc.w	r2, r2, r9
 8002fbc:	eb18 0606 	adds.w	r6, r8, r6
 8002fc0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002fc4:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
 8002fc8:	eb43 0302 	adc.w	r3, r3, r2
 8002fcc:	b2db      	uxtb	r3, r3
		if (j < 162 ) {
 8002fce:	2ba1      	cmp	r3, #161	; 0xa1
 8002fd0:	f200 80f9 	bhi.w	80031c6 <get_wspr_channel_symbols+0x8d2>
			p++;
 8002fd4:	fa5f fc80 	uxtb.w	ip, r0
			tmp[j] = sym[p];
 8002fd8:	f814 2cb0 	ldrb.w	r2, [r4, #-176]
	while (p < 162) {
 8002fdc:	f10e 0e01 	add.w	lr, lr, #1
 8002fe0:	f1bc 0fa2 	cmp.w	ip, #162	; 0xa2
			tmp[j] = sym[p];
 8002fe4:	f80b 2003 	strb.w	r2, [fp, r3]
	while (p < 162) {
 8002fe8:	d1ba      	bne.n	8002f60 <get_wspr_channel_symbols+0x66c>
	memcpy(sym, tmp, sizeof(tmp));
 8002fea:	22a2      	movs	r2, #162	; 0xa2
 8002fec:	4659      	mov	r1, fp
 8002fee:	ee18 0a10 	vmov	r0, s16
 8002ff2:	f207 15a1 	addw	r5, r7, #417	; 0x1a1
 8002ff6:	f00d fcd9 	bl	80109ac <memcpy>
	for (i=0; i < 162; i++) {
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	f107 02ff 	add.w	r2, r7, #255	; 0xff
 8003000:	48d3      	ldr	r0, [pc, #844]	; (8003350 <get_wspr_channel_symbols+0xa5c>)
 8003002:	1e59      	subs	r1, r3, #1
		symbols[i] = 2 * channelbits[i] + pr3[i];
 8003004:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8003008:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800300c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
	for (i=0; i < 162; i++) {
 8003010:	42aa      	cmp	r2, r5
		symbols[i] = 2 * channelbits[i] + pr3[i];
 8003012:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i=0; i < 162; i++) {
 8003016:	d1f5      	bne.n	8003004 <get_wspr_channel_symbols+0x710>
	return 1;
 8003018:	ee18 3a90 	vmov	r3, s17
 800301c:	2001      	movs	r0, #1
}
 800301e:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8003022:	469d      	mov	sp, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	ecbd 8b02 	vpop	{d8}
 800302a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (length > 12)
 800302e:	280c      	cmp	r0, #12
 8003030:	f240 8263 	bls.w	80034fa <get_wspr_channel_symbols+0xc06>
 8003034:	360c      	adds	r6, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8003036:	461a      	mov	r2, r3
 8003038:	4619      	mov	r1, r3
 800303a:	46a6      	mov	lr, r4
			c += k[2];
 800303c:	f856 4c04 	ldr.w	r4, [r6, #-4]
			length -= 12;
 8003040:	380c      	subs	r0, #12
 8003042:	46b4      	mov	ip, r6
		while (length > 12)
 8003044:	360c      	adds	r6, #12
			c += k[2];
 8003046:	4422      	add	r2, r4
			mix(a,b,c);
 8003048:	f856 4c18 	ldr.w	r4, [r6, #-24]
		while (length > 12)
 800304c:	280c      	cmp	r0, #12
			mix(a,b,c);
 800304e:	eba4 0402 	sub.w	r4, r4, r2
 8003052:	4423      	add	r3, r4
 8003054:	ea83 7332 	eor.w	r3, r3, r2, ror #28
 8003058:	461c      	mov	r4, r3
			b += k[1];
 800305a:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800305e:	440b      	add	r3, r1
			mix(a,b,c);
 8003060:	4621      	mov	r1, r4
 8003062:	441a      	add	r2, r3
 8003064:	eba3 0304 	sub.w	r3, r3, r4
 8003068:	ea83 63b4 	eor.w	r3, r3, r4, ror #26
 800306c:	4411      	add	r1, r2
 800306e:	eba2 0203 	sub.w	r2, r2, r3
 8003072:	ea82 6233 	eor.w	r2, r2, r3, ror #24
 8003076:	440b      	add	r3, r1
 8003078:	eba1 0102 	sub.w	r1, r1, r2
 800307c:	ea81 4132 	eor.w	r1, r1, r2, ror #16
 8003080:	441a      	add	r2, r3
 8003082:	460c      	mov	r4, r1
 8003084:	eba3 0301 	sub.w	r3, r3, r1
 8003088:	ea83 3171 	eor.w	r1, r3, r1, ror #13
 800308c:	4623      	mov	r3, r4
 800308e:	4413      	add	r3, r2
 8003090:	eba2 0201 	sub.w	r2, r2, r1
 8003094:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8003098:	4419      	add	r1, r3
		while (length > 12)
 800309a:	d8cf      	bhi.n	800303c <get_wspr_channel_symbols+0x748>
 800309c:	4674      	mov	r4, lr
 800309e:	46e0      	mov	r8, ip
		switch(length)
 80030a0:	3801      	subs	r0, #1
 80030a2:	280b      	cmp	r0, #11
 80030a4:	d853      	bhi.n	800314e <get_wspr_channel_symbols+0x85a>
 80030a6:	e8df f010 	tbh	[pc, r0, lsl #1]
 80030aa:	0036      	.short	0x0036
 80030ac:	017d013f 	.word	0x017d013f
 80030b0:	01720179 	.word	0x01720179
 80030b4:	0164016b 	.word	0x0164016b
 80030b8:	0159015d 	.word	0x0159015d
 80030bc:	014c0155 	.word	0x014c0155
 80030c0:	0143      	.short	0x0143
		case 12: c+=((uint32_t)k[11])<<24;
 80030c2:	f898 000b 	ldrb.w	r0, [r8, #11]
 80030c6:	eb02 6200 	add.w	r2, r2, r0, lsl #24
		case 11: c+=((uint32_t)k[10])<<16;
 80030ca:	f898 000a 	ldrb.w	r0, [r8, #10]
 80030ce:	eb02 4200 	add.w	r2, r2, r0, lsl #16
		case 10: c+=((uint32_t)k[9])<<8;
 80030d2:	f898 0009 	ldrb.w	r0, [r8, #9]
 80030d6:	eb02 2200 	add.w	r2, r2, r0, lsl #8
		case 9 : c+=k[8];
 80030da:	f898 0008 	ldrb.w	r0, [r8, #8]
 80030de:	4402      	add	r2, r0
		case 8 : b+=((uint32_t)k[7])<<24;
 80030e0:	f898 0007 	ldrb.w	r0, [r8, #7]
 80030e4:	eb01 6100 	add.w	r1, r1, r0, lsl #24
		case 7 : b+=((uint32_t)k[6])<<16;
 80030e8:	f898 0006 	ldrb.w	r0, [r8, #6]
 80030ec:	eb01 4100 	add.w	r1, r1, r0, lsl #16
		case 6 : b+=((uint32_t)k[5])<<8;
 80030f0:	f898 0005 	ldrb.w	r0, [r8, #5]
 80030f4:	eb01 2100 	add.w	r1, r1, r0, lsl #8
		case 5 : b+=k[4];
 80030f8:	f898 0004 	ldrb.w	r0, [r8, #4]
 80030fc:	4401      	add	r1, r0
		case 4 : a+=((uint32_t)k[3])<<24;
 80030fe:	f898 0003 	ldrb.w	r0, [r8, #3]
 8003102:	eb03 6300 	add.w	r3, r3, r0, lsl #24
		case 3 : a+=((uint32_t)k[2])<<16;
 8003106:	f898 0002 	ldrb.w	r0, [r8, #2]
 800310a:	eb03 4300 	add.w	r3, r3, r0, lsl #16
		case 2 : a+=((uint32_t)k[1])<<8;
 800310e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8003112:	eb03 2300 	add.w	r3, r3, r0, lsl #8
		case 1 : a+=k[0];
 8003116:	f898 0000 	ldrb.w	r0, [r8]
 800311a:	4403      	add	r3, r0
	final(a,b,c);
 800311c:	404a      	eors	r2, r1
 800311e:	eba2 40b1 	sub.w	r0, r2, r1, ror #18
 8003122:	4043      	eors	r3, r0
 8003124:	eba3 5370 	sub.w	r3, r3, r0, ror #21
 8003128:	4059      	eors	r1, r3
 800312a:	eba1 12f3 	sub.w	r2, r1, r3, ror #7
 800312e:	ea80 0102 	eor.w	r1, r0, r2
 8003132:	eba1 4132 	sub.w	r1, r1, r2, ror #16
 8003136:	404b      	eors	r3, r1
 8003138:	eba3 7331 	sub.w	r3, r3, r1, ror #28
 800313c:	405a      	eors	r2, r3
 800313e:	eba2 43b3 	sub.w	r3, r2, r3, ror #18
 8003142:	ea81 0203 	eor.w	r2, r1, r3
 8003146:	eba2 2333 	sub.w	r3, r2, r3, ror #8
	c=(32767&c);
 800314a:	f3c3 020e 	ubfx	r2, r3, #0, #15
		memset(grid6,0,sizeof(char)*7);
 800314e:	2300      	movs	r3, #0
		m=128*ihash + ntype + 64;
 8003150:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
		memset(grid6,0,sizeof(char)*7);
 8003154:	f507 7280 	add.w	r2, r7, #256	; 0x100
		j=strlen(grid);
 8003158:	4620      	mov	r0, r4
		memset(grid6,0,sizeof(char)*7);
 800315a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		m=128*ihash + ntype + 64;
 800315e:	3540      	adds	r5, #64	; 0x40
		memset(grid6,0,sizeof(char)*7);
 8003160:	ee08 2a10 	vmov	s16, r2
 8003164:	f8c7 3103 	str.w	r3, [r7, #259]	; 0x103
		j=strlen(grid);
 8003168:	f7fd f8ba 	bl	80002e0 <strlen>
		for(i=0; i<j-1; i++) {
 800316c:	3801      	subs	r0, #1
 800316e:	2800      	cmp	r0, #0
 8003170:	dd20      	ble.n	80031b4 <get_wspr_channel_symbols+0x8c0>
			grid6[i]=grid[i+1];
 8003172:	7863      	ldrb	r3, [r4, #1]
		for(i=0; i<j-1; i++) {
 8003174:	2801      	cmp	r0, #1
			grid6[i]=grid[i+1];
 8003176:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		for(i=0; i<j-1; i++) {
 800317a:	d01b      	beq.n	80031b4 <get_wspr_channel_symbols+0x8c0>
			grid6[i]=grid[i+1];
 800317c:	78a3      	ldrb	r3, [r4, #2]
		for(i=0; i<j-1; i++) {
 800317e:	2802      	cmp	r0, #2
			grid6[i]=grid[i+1];
 8003180:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		for(i=0; i<j-1; i++) {
 8003184:	d016      	beq.n	80031b4 <get_wspr_channel_symbols+0x8c0>
			grid6[i]=grid[i+1];
 8003186:	78e3      	ldrb	r3, [r4, #3]
		for(i=0; i<j-1; i++) {
 8003188:	2803      	cmp	r0, #3
			grid6[i]=grid[i+1];
 800318a:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		for(i=0; i<j-1; i++) {
 800318e:	d011      	beq.n	80031b4 <get_wspr_channel_symbols+0x8c0>
			grid6[i]=grid[i+1];
 8003190:	7923      	ldrb	r3, [r4, #4]
		for(i=0; i<j-1; i++) {
 8003192:	2804      	cmp	r0, #4
			grid6[i]=grid[i+1];
 8003194:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		for(i=0; i<j-1; i++) {
 8003198:	d00c      	beq.n	80031b4 <get_wspr_channel_symbols+0x8c0>
			grid6[i]=grid[i+1];
 800319a:	7963      	ldrb	r3, [r4, #5]
		for(i=0; i<j-1; i++) {
 800319c:	2805      	cmp	r0, #5
			grid6[i]=grid[i+1];
 800319e:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		for(i=0; i<j-1; i++) {
 80031a2:	d007      	beq.n	80031b4 <get_wspr_channel_symbols+0x8c0>
			grid6[i]=grid[i+1];
 80031a4:	79a3      	ldrb	r3, [r4, #6]
		for(i=0; i<j-1; i++) {
 80031a6:	2806      	cmp	r0, #6
			grid6[i]=grid[i+1];
 80031a8:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		for(i=0; i<j-1; i++) {
 80031ac:	d002      	beq.n	80031b4 <get_wspr_channel_symbols+0x8c0>
			grid6[i]=grid[i+1];
 80031ae:	79e3      	ldrb	r3, [r4, #7]
 80031b0:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		grid6[5]=grid[0];
 80031b4:	7823      	ldrb	r3, [r4, #0]
		n = pack_call(grid6);
 80031b6:	ee18 0a10 	vmov	r0, s16
		grid6[5]=grid[0];
 80031ba:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		n = pack_call(grid6);
 80031be:	f7ff fad1 	bl	8002764 <pack_call>
 80031c2:	4604      	mov	r4, r0
 80031c4:	e58a      	b.n	8002cdc <get_wspr_channel_symbols+0x3e8>
	while (p < 162) {
 80031c6:	f1bc 0fa1 	cmp.w	ip, #161	; 0xa1
 80031ca:	f10e 0e01 	add.w	lr, lr, #1
 80031ce:	f67f aec7 	bls.w	8002f60 <get_wspr_channel_symbols+0x66c>
 80031d2:	e70a      	b.n	8002fea <get_wspr_channel_symbols+0x6f6>
		while (length > 12)
 80031d4:	280c      	cmp	r0, #12
 80031d6:	f240 81ac 	bls.w	8003532 <get_wspr_channel_symbols+0xc3e>
 80031da:	360c      	adds	r6, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 80031dc:	461a      	mov	r2, r3
 80031de:	4619      	mov	r1, r3
 80031e0:	46a6      	mov	lr, r4
			c += k[4] + (((uint32_t)k[5])<<16);
 80031e2:	f836 cc02 	ldrh.w	ip, [r6, #-2]
			length -= 12;
 80031e6:	380c      	subs	r0, #12
			c += k[4] + (((uint32_t)k[5])<<16);
 80031e8:	f836 4c04 	ldrh.w	r4, [r6, #-4]
		while (length > 12)
 80031ec:	280c      	cmp	r0, #12
			c += k[4] + (((uint32_t)k[5])<<16);
 80031ee:	eb04 440c 	add.w	r4, r4, ip, lsl #16
			a += k[0] + (((uint32_t)k[1])<<16);
 80031f2:	f836 cc0a 	ldrh.w	ip, [r6, #-10]
			c += k[4] + (((uint32_t)k[5])<<16);
 80031f6:	4422      	add	r2, r4
 80031f8:	4614      	mov	r4, r2
			a += k[0] + (((uint32_t)k[1])<<16);
 80031fa:	f836 2c0c 	ldrh.w	r2, [r6, #-12]
			mix(a,b,c);
 80031fe:	eb02 420c 	add.w	r2, r2, ip, lsl #16
			b += k[2] + (((uint32_t)k[3])<<16);
 8003202:	f836 cc06 	ldrh.w	ip, [r6, #-6]
			mix(a,b,c);
 8003206:	eba2 0204 	sub.w	r2, r2, r4
 800320a:	441a      	add	r2, r3
			b += k[2] + (((uint32_t)k[3])<<16);
 800320c:	f836 3c08 	ldrh.w	r3, [r6, #-8]
 8003210:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 8003214:	46b4      	mov	ip, r6
			mix(a,b,c);
 8003216:	ea82 7234 	eor.w	r2, r2, r4, ror #28
		while (length > 12)
 800321a:	f106 060c 	add.w	r6, r6, #12
			b += k[2] + (((uint32_t)k[3])<<16);
 800321e:	440b      	add	r3, r1
			mix(a,b,c);
 8003220:	eb03 0104 	add.w	r1, r3, r4
 8003224:	eba3 0302 	sub.w	r3, r3, r2
 8003228:	ea83 63b2 	eor.w	r3, r3, r2, ror #26
 800322c:	440a      	add	r2, r1
 800322e:	eba1 0103 	sub.w	r1, r1, r3
 8003232:	ea81 6133 	eor.w	r1, r1, r3, ror #24
 8003236:	4413      	add	r3, r2
 8003238:	eba2 0201 	sub.w	r2, r2, r1
 800323c:	eb01 0403 	add.w	r4, r1, r3
 8003240:	ea82 4231 	eor.w	r2, r2, r1, ror #16
 8003244:	eba3 0302 	sub.w	r3, r3, r2
 8003248:	ea83 3172 	eor.w	r1, r3, r2, ror #13
 800324c:	eb02 0304 	add.w	r3, r2, r4
 8003250:	eba4 0201 	sub.w	r2, r4, r1
 8003254:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8003258:	4419      	add	r1, r3
		while (length > 12)
 800325a:	d8c2      	bhi.n	80031e2 <get_wspr_channel_symbols+0x8ee>
 800325c:	4674      	mov	r4, lr
 800325e:	46e0      	mov	r8, ip
		switch(length)
 8003260:	3801      	subs	r0, #1
 8003262:	280b      	cmp	r0, #11
 8003264:	f63f af73 	bhi.w	800314e <get_wspr_channel_symbols+0x85a>
 8003268:	a601      	add	r6, pc, #4	; (adr r6, 8003270 <get_wspr_channel_symbols+0x97c>)
 800326a:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 800326e:	bf00      	nop
 8003270:	08003117 	.word	0x08003117
 8003274:	08003329 	.word	0x08003329
 8003278:	08003321 	.word	0x08003321
 800327c:	08003425 	.word	0x08003425
 8003280:	0800341f 	.word	0x0800341f
 8003284:	08003409 	.word	0x08003409
 8003288:	08003401 	.word	0x08003401
 800328c:	080033e3 	.word	0x080033e3
 8003290:	080033dd 	.word	0x080033dd
 8003294:	080033b9 	.word	0x080033b9
 8003298:	080033b1 	.word	0x080033b1
 800329c:	08003435 	.word	0x08003435
		for (i=0; i<i1; i++) {
 80032a0:	b300      	cbz	r0, 80032e4 <get_wspr_channel_symbols+0x9f0>
			call6[i]=callsign[i];
 80032a2:	7823      	ldrb	r3, [r4, #0]
		for (i=0; i<i1; i++) {
 80032a4:	2801      	cmp	r0, #1
			call6[i]=callsign[i];
 80032a6:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		for (i=0; i<i1; i++) {
 80032aa:	d01b      	beq.n	80032e4 <get_wspr_channel_symbols+0x9f0>
			call6[i]=callsign[i];
 80032ac:	7863      	ldrb	r3, [r4, #1]
		for (i=0; i<i1; i++) {
 80032ae:	2802      	cmp	r0, #2
			call6[i]=callsign[i];
 80032b0:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		for (i=0; i<i1; i++) {
 80032b4:	d016      	beq.n	80032e4 <get_wspr_channel_symbols+0x9f0>
			call6[i]=callsign[i];
 80032b6:	78a3      	ldrb	r3, [r4, #2]
		for (i=0; i<i1; i++) {
 80032b8:	2803      	cmp	r0, #3
			call6[i]=callsign[i];
 80032ba:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		for (i=0; i<i1; i++) {
 80032be:	d011      	beq.n	80032e4 <get_wspr_channel_symbols+0x9f0>
			call6[i]=callsign[i];
 80032c0:	78e3      	ldrb	r3, [r4, #3]
		for (i=0; i<i1; i++) {
 80032c2:	2804      	cmp	r0, #4
			call6[i]=callsign[i];
 80032c4:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		for (i=0; i<i1; i++) {
 80032c8:	d00c      	beq.n	80032e4 <get_wspr_channel_symbols+0x9f0>
			call6[i]=callsign[i];
 80032ca:	7923      	ldrb	r3, [r4, #4]
		for (i=0; i<i1; i++) {
 80032cc:	2805      	cmp	r0, #5
			call6[i]=callsign[i];
 80032ce:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		for (i=0; i<i1; i++) {
 80032d2:	d007      	beq.n	80032e4 <get_wspr_channel_symbols+0x9f0>
			call6[i]=callsign[i];
 80032d4:	7963      	ldrb	r3, [r4, #5]
		for (i=0; i<i1; i++) {
 80032d6:	2806      	cmp	r0, #6
			call6[i]=callsign[i];
 80032d8:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		for (i=0; i<i1; i++) {
 80032dc:	d002      	beq.n	80032e4 <get_wspr_channel_symbols+0x9f0>
			call6[i]=callsign[i];
 80032de:	79a3      	ldrb	r3, [r4, #6]
 80032e0:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		call6[i] = '\0';
 80032e4:	f107 0210 	add.w	r2, r7, #16
 80032e8:	f506 73d0 	add.w	r3, r6, #416	; 0x1a0
 80032ec:	4413      	add	r3, r2
		*n=pack_call(call6);
 80032ee:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80032f2:	4610      	mov	r0, r2
 80032f4:	ee08 2a10 	vmov	s16, r2
		call6[i] = '\0';
 80032f8:	2200      	movs	r2, #0
 80032fa:	f803 2cb0 	strb.w	r2, [r3, #-176]
		*n=pack_call(call6);
 80032fe:	f7ff fa31 	bl	8002764 <pack_call>
		int nc = callsign[i1+1];
 8003302:	4653      	mov	r3, sl
		*n=pack_call(call6);
 8003304:	4604      	mov	r4, r0
		int nc = callsign[i1+1];
 8003306:	4433      	add	r3, r6
 8003308:	785a      	ldrb	r2, [r3, #1]
		if( nc >= 48 && nc <= 57 ) {
 800330a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800330e:	2b09      	cmp	r3, #9
 8003310:	f200 80a6 	bhi.w	8003460 <get_wspr_channel_symbols+0xb6c>
		*m=60000-32768+*m;
 8003314:	f646 2330 	movw	r3, #27184	; 0x6a30
 8003318:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 800331a:	01db      	lsls	r3, r3, #7
 800331c:	f7ff bbbd 	b.w	8002a9a <get_wspr_channel_symbols+0x1a6>
		case 3 : a+=((uint32_t)k8[2])<<16;      /* fall through */
 8003320:	f898 0002 	ldrb.w	r0, [r8, #2]
 8003324:	eb03 4300 	add.w	r3, r3, r0, lsl #16
		case 2 : a+=k[0];
 8003328:	f8b8 0000 	ldrh.w	r0, [r8]
 800332c:	4403      	add	r3, r0
		break;
 800332e:	e6f5      	b.n	800311c <get_wspr_channel_symbols+0x828>
		case 12: c+=k[2]; b+=k[1]; a+=k[0]; break;
 8003330:	4646      	mov	r6, r8
 8003332:	f8d8 0008 	ldr.w	r0, [r8, #8]
		case 11: c+=k[2]&0xffffff; b+=k[1]; a+=k[0]; break;
 8003336:	4402      	add	r2, r0
 8003338:	6870      	ldr	r0, [r6, #4]
 800333a:	4401      	add	r1, r0
 800333c:	6830      	ldr	r0, [r6, #0]
 800333e:	4403      	add	r3, r0
 8003340:	e6ec      	b.n	800311c <get_wspr_channel_symbols+0x828>
 8003342:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8003346:	4646      	mov	r6, r8
 8003348:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800334c:	e7f3      	b.n	8003336 <get_wspr_channel_symbols+0xa42>
 800334e:	bf00      	nop
 8003350:	0801ad9f 	.word	0x0801ad9f
		case 10: c+=k[2]&0xffff; b+=k[1]; a+=k[0]; break;
 8003354:	4646      	mov	r6, r8
 8003356:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 800335a:	e7ec      	b.n	8003336 <get_wspr_channel_symbols+0xa42>
		case 9 : c+=k[2]&0xff; b+=k[1]; a+=k[0]; break;
 800335c:	4646      	mov	r6, r8
 800335e:	f898 0008 	ldrb.w	r0, [r8, #8]
 8003362:	e7e8      	b.n	8003336 <get_wspr_channel_symbols+0xa42>
		case 8 : b+=k[1]; a+=k[0]; break;
 8003364:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003368:	4401      	add	r1, r0
 800336a:	f8d8 0000 	ldr.w	r0, [r8]
 800336e:	4403      	add	r3, r0
 8003370:	e6d4      	b.n	800311c <get_wspr_channel_symbols+0x828>
		case 7 : b+=k[1]&0xffffff; a+=k[0]; break;
 8003372:	e9d8 6000 	ldrd	r6, r0, [r8]
 8003376:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800337a:	4433      	add	r3, r6
 800337c:	4401      	add	r1, r0
 800337e:	e6cd      	b.n	800311c <get_wspr_channel_symbols+0x828>
		case 6 : b+=k[1]&0xffff; a+=k[0]; break;
 8003380:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8003384:	4401      	add	r1, r0
 8003386:	f8d8 0000 	ldr.w	r0, [r8]
 800338a:	4403      	add	r3, r0
 800338c:	e6c6      	b.n	800311c <get_wspr_channel_symbols+0x828>
		case 5 : b+=k[1]&0xff; a+=k[0]; break;
 800338e:	f898 0004 	ldrb.w	r0, [r8, #4]
 8003392:	4401      	add	r1, r0
 8003394:	f8d8 0000 	ldr.w	r0, [r8]
 8003398:	4403      	add	r3, r0
 800339a:	e6bf      	b.n	800311c <get_wspr_channel_symbols+0x828>
		case 4 : a+=k[0]; break;
 800339c:	f8d8 0000 	ldr.w	r0, [r8]
 80033a0:	4403      	add	r3, r0
 80033a2:	e6bb      	b.n	800311c <get_wspr_channel_symbols+0x828>
		case 3 : a+=k[0]&0xffffff; break;
 80033a4:	f8d8 0000 	ldr.w	r0, [r8]
 80033a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80033ac:	4403      	add	r3, r0
 80033ae:	e6b5      	b.n	800311c <get_wspr_channel_symbols+0x828>
		case 11: c+=((uint32_t)k8[10])<<16;     /* fall through */
 80033b0:	f898 000a 	ldrb.w	r0, [r8, #10]
 80033b4:	eb02 4200 	add.w	r2, r2, r0, lsl #16
		b+=k[2]+(((uint32_t)k[3])<<16);
 80033b8:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80033bc:	4401      	add	r1, r0
		a+=k[0]+(((uint32_t)k[1])<<16);
 80033be:	f8b8 0000 	ldrh.w	r0, [r8]
 80033c2:	4418      	add	r0, r3
		case 10: c+=k[4];
 80033c4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80033c8:	441a      	add	r2, r3
		b+=k[2]+(((uint32_t)k[3])<<16);
 80033ca:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80033ce:	eb01 4103 	add.w	r1, r1, r3, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 80033d2:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80033d6:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 80033da:	e69f      	b.n	800311c <get_wspr_channel_symbols+0x828>
		case 9 : c+=k8[8];                      /* fall through */
 80033dc:	f898 0008 	ldrb.w	r0, [r8, #8]
 80033e0:	4402      	add	r2, r0
		case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 80033e2:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80033e6:	4401      	add	r1, r0
		a+=k[0]+(((uint32_t)k[1])<<16);
 80033e8:	f8b8 0000 	ldrh.w	r0, [r8]
 80033ec:	4418      	add	r0, r3
		case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 80033ee:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80033f2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 80033f6:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80033fa:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 80033fe:	e68d      	b.n	800311c <get_wspr_channel_symbols+0x828>
		case 7 : b+=((uint32_t)k8[6])<<16;      /* fall through */
 8003400:	f898 0006 	ldrb.w	r0, [r8, #6]
 8003404:	eb01 4100 	add.w	r1, r1, r0, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 8003408:	f8b8 0000 	ldrh.w	r0, [r8]
 800340c:	4418      	add	r0, r3
		case 6 : b+=k[2];
 800340e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003412:	4419      	add	r1, r3
		a+=k[0]+(((uint32_t)k[1])<<16);
 8003414:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8003418:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 800341c:	e67e      	b.n	800311c <get_wspr_channel_symbols+0x828>
		case 5 : b+=k8[4];                      /* fall through */
 800341e:	f898 0004 	ldrb.w	r0, [r8, #4]
 8003422:	4401      	add	r1, r0
		case 4 : a+=k[0]+(((uint32_t)k[1])<<16);
 8003424:	f8b8 0000 	ldrh.w	r0, [r8]
 8003428:	4418      	add	r0, r3
 800342a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800342e:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 8003432:	e673      	b.n	800311c <get_wspr_channel_symbols+0x828>
		case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 8003434:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 8003438:	4402      	add	r2, r0
		b+=k[2]+(((uint32_t)k[3])<<16);
 800343a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800343e:	4401      	add	r1, r0
		a+=k[0]+(((uint32_t)k[1])<<16);
 8003440:	f8b8 0000 	ldrh.w	r0, [r8]
 8003444:	4418      	add	r0, r3
		case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 8003446:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800344a:	eb02 4203 	add.w	r2, r2, r3, lsl #16
		b+=k[2]+(((uint32_t)k[3])<<16);
 800344e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8003452:	eb01 4103 	add.w	r1, r1, r3, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 8003456:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800345a:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 800345e:	e65d      	b.n	800311c <get_wspr_channel_symbols+0x828>
		} else if ( nc >= 65 && nc <= 90 ) {
 8003460:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 8003464:	2b19      	cmp	r3, #25
 8003466:	d854      	bhi.n	8003512 <get_wspr_channel_symbols+0xc1e>
		*m=60000-32768+*m;
 8003468:	f646 2329 	movw	r3, #27177	; 0x6a29
 800346c:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 800346e:	01db      	lsls	r3, r3, #7
 8003470:	f7ff bb13 	b.w	8002a9a <get_wspr_channel_symbols+0x1a6>
		char const * pfx = strtok (callsign,"/");
 8003474:	4936      	ldr	r1, [pc, #216]	; (8003550 <get_wspr_channel_symbols+0xc5c>)
 8003476:	4620      	mov	r0, r4
 8003478:	f00d ff96 	bl	80113a8 <strtok>
		char const * call = strtok(NULL," ");
 800347c:	4935      	ldr	r1, [pc, #212]	; (8003554 <get_wspr_channel_symbols+0xc60>)
		char const * pfx = strtok (callsign,"/");
 800347e:	4606      	mov	r6, r0
		char const * call = strtok(NULL," ");
 8003480:	2000      	movs	r0, #0
 8003482:	f00d ff91 	bl	80113a8 <strtok>
		*n = pack_call (call);
 8003486:	f7ff f96d 	bl	8002764 <pack_call>
 800348a:	4604      	mov	r4, r0
		size_t plen=strlen (pfx);
 800348c:	4630      	mov	r0, r6
 800348e:	f7fc ff27 	bl	80002e0 <strlen>
		if( plen ==1 ) {
 8003492:	2801      	cmp	r0, #1
 8003494:	d042      	beq.n	800351c <get_wspr_channel_symbols+0xc28>
		} else if( plen == 2 ) {
 8003496:	2802      	cmp	r0, #2
 8003498:	d03e      	beq.n	8003518 <get_wspr_channel_symbols+0xc24>
		for (i=0; i<plen; i++) {
 800349a:	2800      	cmp	r0, #0
 800349c:	d050      	beq.n	8003540 <get_wspr_channel_symbols+0xc4c>
			*m=0;
 800349e:	2300      	movs	r3, #0
 80034a0:	f10a 3cff 	add.w	ip, sl, #4294967295
 80034a4:	46d0      	mov	r8, sl
			} else if ( nc >= 65 && nc <= 90 ) {
 80034a6:	4662      	mov	r2, ip
			int nc = callsign[i];
 80034a8:	f81c 6f01 	ldrb.w	r6, [ip, #1]!
			if( nc >= 48 && nc <= 57 ) {
 80034ac:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
			} else if ( nc >= 65 && nc <= 90 ) {
 80034b0:	f1a6 0e41 	sub.w	lr, r6, #65	; 0x41
			if( nc >= 48 && nc <= 57 ) {
 80034b4:	2909      	cmp	r1, #9
 80034b6:	d906      	bls.n	80034c6 <get_wspr_channel_symbols+0xbd2>
			} else if ( nc >= 65 && nc <= 90 ) {
 80034b8:	f1be 0f19 	cmp.w	lr, #25
				nc=36;
 80034bc:	f04f 0124 	mov.w	r1, #36	; 0x24
				nc=nc-65+10;
 80034c0:	bf98      	it	ls
 80034c2:	f1a6 0137 	subls.w	r1, r6, #55	; 0x37
		for (i=0; i<plen; i++) {
 80034c6:	4646      	mov	r6, r8
 80034c8:	3202      	adds	r2, #2
 80034ca:	1b92      	subs	r2, r2, r6
			*m=37*(*m)+nc;
 80034cc:	eb03 06c3 	add.w	r6, r3, r3, lsl #3
		for (i=0; i<plen; i++) {
 80034d0:	4290      	cmp	r0, r2
			*m=37*(*m)+nc;
 80034d2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80034d6:	440b      	add	r3, r1
		for (i=0; i<plen; i++) {
 80034d8:	d8e5      	bhi.n	80034a6 <get_wspr_channel_symbols+0xbb2>
		if( *m > 32768 ) {
 80034da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034de:	dd20      	ble.n	8003522 <get_wspr_channel_symbols+0xc2e>
			*m=*m-32768;
 80034e0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80034e4:	f507 7180 	add.w	r1, r7, #256	; 0x100
			*nadd=1;
 80034e8:	2201      	movs	r2, #1
		m=128*ng+ntype+64;
 80034ea:	01db      	lsls	r3, r3, #7
 80034ec:	ee08 1a10 	vmov	s16, r1
 80034f0:	f7ff bad4 	b.w	8002a9c <get_wspr_channel_symbols+0x1a8>
		return 36;
 80034f4:	2124      	movs	r1, #36	; 0x24
 80034f6:	f7ff bbdc 	b.w	8002cb2 <get_wspr_channel_symbols+0x3be>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 80034fa:	461a      	mov	r2, r3
 80034fc:	4619      	mov	r1, r3
 80034fe:	e5cf      	b.n	80030a0 <get_wspr_channel_symbols+0x7ac>
		return 36;
 8003500:	2224      	movs	r2, #36	; 0x24
 8003502:	f7ff bbb9 	b.w	8002c78 <get_wspr_channel_symbols+0x384>
 8003506:	2324      	movs	r3, #36	; 0x24
 8003508:	f7ff bba7 	b.w	8002c5a <get_wspr_channel_symbols+0x366>
 800350c:	2024      	movs	r0, #36	; 0x24
 800350e:	f7ff bbc1 	b.w	8002c94 <get_wspr_channel_symbols+0x3a0>
 8003512:	4b11      	ldr	r3, [pc, #68]	; (8003558 <get_wspr_channel_symbols+0xc64>)
		*m=60000-32768+*m;
 8003514:	f7ff bac1 	b.w	8002a9a <get_wspr_channel_symbols+0x1a6>
			*m=36;
 8003518:	2324      	movs	r3, #36	; 0x24
 800351a:	e7c1      	b.n	80034a0 <get_wspr_channel_symbols+0xbac>
			*m=37*(*m)+36;
 800351c:	f44f 63ab 	mov.w	r3, #1368	; 0x558
 8003520:	e7be      	b.n	80034a0 <get_wspr_channel_symbols+0xbac>
 8003522:	f507 7180 	add.w	r1, r7, #256	; 0x100
		m=128*ng+ntype+64;
 8003526:	01db      	lsls	r3, r3, #7
		*nadd=0;
 8003528:	2200      	movs	r2, #0
 800352a:	ee08 1a10 	vmov	s16, r1
 800352e:	f7ff bab5 	b.w	8002a9c <get_wspr_channel_symbols+0x1a8>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8003532:	461a      	mov	r2, r3
 8003534:	4619      	mov	r1, r3
 8003536:	e693      	b.n	8003260 <get_wspr_channel_symbols+0x96c>
 8003538:	461a      	mov	r2, r3
 800353a:	4619      	mov	r1, r3
 800353c:	f7ff bb46 	b.w	8002bcc <get_wspr_channel_symbols+0x2d8>
 8003540:	f507 7180 	add.w	r1, r7, #256	; 0x100
		for (i=0; i<plen; i++) {
 8003544:	4603      	mov	r3, r0
		*nadd=0;
 8003546:	4602      	mov	r2, r0
 8003548:	ee08 1a10 	vmov	s16, r1
 800354c:	f7ff baa6 	b.w	8002a9c <get_wspr_channel_symbols+0x1a8>
 8003550:	0801ac80 	.word	0x0801ac80
 8003554:	0801ae58 	.word	0x0801ae58
 8003558:	00354300 	.word	0x00354300
 800355c:	00000000 	.word	0x00000000

08003560 <SendWSPR>:
{
 8003560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void) get_wspr_channel_symbols("I4NZX JN54 30", syms);
 8003564:	4948      	ldr	r1, [pc, #288]	; (8003688 <SendWSPR+0x128>)
 8003566:	4849      	ldr	r0, [pc, #292]	; (800368c <SendWSPR+0x12c>)
 8003568:	f7ff f9c4 	bl	80028f4 <get_wspr_channel_symbols>
	LOfreq = (double)WSPR_FREQ;
 800356c:	4c48      	ldr	r4, [pc, #288]	; (8003690 <SendWSPR+0x130>)
 800356e:	4b49      	ldr	r3, [pc, #292]	; (8003694 <SendWSPR+0x134>)
	LastTXFreq = LOfreq;
 8003570:	4a49      	ldr	r2, [pc, #292]	; (8003698 <SendWSPR+0x138>)
	SetWSPRPLLCoeff((double)WSPR_FREQ, FracDivCoeff, FracPWMCoeff);
 8003572:	494a      	ldr	r1, [pc, #296]	; (800369c <SendWSPR+0x13c>)
 8003574:	484a      	ldr	r0, [pc, #296]	; (80036a0 <SendWSPR+0x140>)
	LastTXFreq = LOfreq;
 8003576:	6013      	str	r3, [r2, #0]
	LOfreq = (double)WSPR_FREQ;
 8003578:	6023      	str	r3, [r4, #0]
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 800357a:	4e4a      	ldr	r6, [pc, #296]	; (80036a4 <SendWSPR+0x144>)
 800357c:	4f4a      	ldr	r7, [pc, #296]	; (80036a8 <SendWSPR+0x148>)
			if(KEYER_DASH || KEYER_DOT)
 800357e:	4d4b      	ldr	r5, [pc, #300]	; (80036ac <SendWSPR+0x14c>)
			WSPRTone = syms[txIndex++];
 8003580:	f8df b13c 	ldr.w	fp, [pc, #316]	; 80036c0 <SendWSPR+0x160>
	SetWSPRPLLCoeff((double)WSPR_FREQ, FracDivCoeff, FracPWMCoeff);
 8003584:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8003680 <SendWSPR+0x120>
 8003588:	f000 ff72 	bl	8004470 <SetWSPRPLLCoeff>
	WSPRTXFraction = 20; //percentage
 800358c:	2314      	movs	r3, #20
 800358e:	4948      	ldr	r1, [pc, #288]	; (80036b0 <SendWSPR+0x150>)
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8003590:	6832      	ldr	r2, [r6, #0]
	WSPRTXFraction = 20; //percentage
 8003592:	700b      	strb	r3, [r1, #0]
 8003594:	e00c      	b.n	80035b0 <SendWSPR+0x50>
			if(KEYER_DASH || KEYER_DOT)
 8003596:	2140      	movs	r1, #64	; 0x40
 8003598:	4628      	mov	r0, r5
 800359a:	f005 ffb3 	bl	8009504 <HAL_GPIO_ReadPin>
 800359e:	2800      	cmp	r0, #0
 80035a0:	d069      	beq.n	8003676 <SendWSPR+0x116>
 80035a2:	2180      	movs	r1, #128	; 0x80
 80035a4:	4628      	mov	r0, r5
 80035a6:	f005 ffad 	bl	8009504 <HAL_GPIO_ReadPin>
 80035aa:	2800      	cmp	r0, #0
 80035ac:	d063      	beq.n	8003676 <SendWSPR+0x116>
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 80035ae:	6832      	ldr	r2, [r6, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	4313      	orrs	r3, r2
 80035b8:	d1ed      	bne.n	8003596 <SendWSPR+0x36>
		if ((rand() % 101) > WSPRTXFraction)
 80035ba:	f00d fe7d 	bl	80112b8 <rand>
 80035be:	4b3c      	ldr	r3, [pc, #240]	; (80036b0 <SendWSPR+0x150>)
 80035c0:	2165      	movs	r1, #101	; 0x65
 80035c2:	781a      	ldrb	r2, [r3, #0]
 80035c4:	4b3b      	ldr	r3, [pc, #236]	; (80036b4 <SendWSPR+0x154>)
 80035c6:	fb83 3400 	smull	r3, r4, r3, r0
 80035ca:	17c3      	asrs	r3, r0, #31
 80035cc:	ebc3 1324 	rsb	r3, r3, r4, asr #4
 80035d0:	fb01 0013 	mls	r0, r1, r3, r0
 80035d4:	4290      	cmp	r0, r2
 80035d6:	dc42      	bgt.n	800365e <SendWSPR+0xfe>
			TXSwitch(1);
 80035d8:	2001      	movs	r0, #1
 80035da:	f001 fd15 	bl	8005008 <TXSwitch>
			CarrierEnable(1);
 80035de:	2001      	movs	r0, #1
 80035e0:	f001 fd76 	bl	80050d0 <CarrierEnable>
			while (SystemSeconds != 1)
 80035e4:	e00a      	b.n	80035fc <SendWSPR+0x9c>
				if(KEYER_DASH || KEYER_DOT)
 80035e6:	f005 ff8d 	bl	8009504 <HAL_GPIO_ReadPin>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2180      	movs	r1, #128	; 0x80
 80035ee:	4628      	mov	r0, r5
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d040      	beq.n	8003676 <SendWSPR+0x116>
 80035f4:	f005 ff86 	bl	8009504 <HAL_GPIO_ReadPin>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d03c      	beq.n	8003676 <SendWSPR+0x116>
			while (SystemSeconds != 1)
 80035fc:	6833      	ldr	r3, [r6, #0]
				if(KEYER_DASH || KEYER_DOT)
 80035fe:	2140      	movs	r1, #64	; 0x40
 8003600:	4628      	mov	r0, r5
			while (SystemSeconds != 1)
 8003602:	2b01      	cmp	r3, #1
 8003604:	d1ef      	bne.n	80035e6 <SendWSPR+0x86>
			WSPRTone = syms[txIndex++];
 8003606:	4a20      	ldr	r2, [pc, #128]	; (8003688 <SendWSPR+0x128>)
			WSPRStartTick = HAL_GetTick();
 8003608:	f44f 5900 	mov.w	r9, #8192	; 0x2000
 800360c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 80036c4 <SendWSPR+0x164>
			WSPRTone = syms[txIndex++];
 8003610:	7811      	ldrb	r1, [r2, #0]
 8003612:	4690      	mov	r8, r2
 8003614:	f88b 1000 	strb.w	r1, [fp]
			WSPRStartTick = HAL_GetTick();
 8003618:	f002 ffea 	bl	80065f0 <HAL_GetTick>
 800361c:	f8ca 0000 	str.w	r0, [sl]
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 8003620:	4b25      	ldr	r3, [pc, #148]	; (80036b8 <SendWSPR+0x158>)
 8003622:	fba3 3409 	umull	r3, r4, r3, r9
 8003626:	08e4      	lsrs	r4, r4, #3
 8003628:	f002 ffe2 	bl	80065f0 <HAL_GetTick>
 800362c:	f8da 3000 	ldr.w	r3, [sl]
 8003630:	1ac0      	subs	r0, r0, r3
 8003632:	42a0      	cmp	r0, r4
 8003634:	d3f8      	bcc.n	8003628 <SendWSPR+0xc8>
				WSPRTone = syms[txIndex++];
 8003636:	f818 3f01 	ldrb.w	r3, [r8, #1]!
			while (txIndex < 162) {
 800363a:	f509 5900 	add.w	r9, r9, #8192	; 0x2000
				WSPRTone = syms[txIndex++];
 800363e:	f88b 3000 	strb.w	r3, [fp]
			while (txIndex < 162) {
 8003642:	4b1e      	ldr	r3, [pc, #120]	; (80036bc <SendWSPR+0x15c>)
 8003644:	4543      	cmp	r3, r8
 8003646:	d1eb      	bne.n	8003620 <SendWSPR+0xc0>
			TXSwitch(0);
 8003648:	2000      	movs	r0, #0
 800364a:	f001 fcdd 	bl	8005008 <TXSwitch>
			CarrierEnable(0);
 800364e:	2000      	movs	r0, #0
 8003650:	f001 fd3e 	bl	80050d0 <CarrierEnable>
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8003654:	6832      	ldr	r2, [r6, #0]
 8003656:	e7ab      	b.n	80035b0 <SendWSPR+0x50>
				if(KEYER_DASH || KEYER_DOT)
 8003658:	f005 ff54 	bl	8009504 <HAL_GPIO_ReadPin>
 800365c:	b158      	cbz	r0, 8003676 <SendWSPR+0x116>
			while (SystemSeconds != 1)
 800365e:	6832      	ldr	r2, [r6, #0]
				if(KEYER_DASH || KEYER_DOT)
 8003660:	2140      	movs	r1, #64	; 0x40
 8003662:	4628      	mov	r0, r5
			while (SystemSeconds != 1)
 8003664:	2a01      	cmp	r2, #1
 8003666:	d0a3      	beq.n	80035b0 <SendWSPR+0x50>
				if(KEYER_DASH || KEYER_DOT)
 8003668:	f005 ff4c 	bl	8009504 <HAL_GPIO_ReadPin>
 800366c:	4603      	mov	r3, r0
 800366e:	2180      	movs	r1, #128	; 0x80
 8003670:	4628      	mov	r0, r5
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <SendWSPR+0xf8>
}
 8003676:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800367a:	bf00      	nop
 800367c:	f3af 8000 	nop.w
 8003680:	c0000000 	.word	0xc0000000
 8003684:	415adb21 	.word	0x415adb21
 8003688:	24000870 	.word	0x24000870
 800368c:	0801ac90 	.word	0x0801ac90
 8003690:	24007c74 	.word	0x24007c74
 8003694:	4ad6d90e 	.word	0x4ad6d90e
 8003698:	24007c80 	.word	0x24007c80
 800369c:	24006c58 	.word	0x24006c58
 80036a0:	24006c4c 	.word	0x24006c4c
 80036a4:	24007cf4 	.word	0x24007cf4
 80036a8:	24007cf0 	.word	0x24007cf0
 80036ac:	58020000 	.word	0x58020000
 80036b0:	24008e19 	.word	0x24008e19
 80036b4:	288df0cb 	.word	0x288df0cb
 80036b8:	aaaaaaab 	.word	0xaaaaaaab
 80036bc:	24000911 	.word	0x24000911
 80036c0:	24008e1a 	.word	0x24008e1a
 80036c4:	2400086c 	.word	0x2400086c

080036c8 <SetTriggerOverflow>:
  * @param  overflow state
  * @retval None
  */
void SetTriggerOverflow(int32_t overflow)
{
  g_overflow = overflow;
 80036c8:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <SetTriggerOverflow+0x3c>)
 80036ca:	6018      	str	r0, [r3, #0]
  if ((overflow == 0) && (bAutoRearmAfterOVF == 1))
 80036cc:	b918      	cbnz	r0, 80036d6 <SetTriggerOverflow+0xe>
 80036ce:	4a0e      	ldr	r2, [pc, #56]	; (8003708 <SetTriggerOverflow+0x40>)
 80036d0:	6813      	ldr	r3, [r2, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d000      	beq.n	80036d8 <SetTriggerOverflow+0x10>
 80036d6:	4770      	bx	lr
  {
    if (g_binternalIgnoreTrig)
 80036d8:	490c      	ldr	r1, [pc, #48]	; (800370c <SetTriggerOverflow+0x44>)
 80036da:	6809      	ldr	r1, [r1, #0]
 80036dc:	b131      	cbz	r1, 80036ec <SetTriggerOverflow+0x24>
    {
      /* Do not immediately rearm the trigger in that case, but wait for the buffer to be completely empty */
      g_internalTrigState = WAITING_BUFFER_EMPTY;
      g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 80036de:	4a0c      	ldr	r2, [pc, #48]	; (8003710 <SetTriggerOverflow+0x48>)
      g_internalTrigState = WAITING_BUFFER_EMPTY;
 80036e0:	2002      	movs	r0, #2
 80036e2:	490c      	ldr	r1, [pc, #48]	; (8003714 <SetTriggerOverflow+0x4c>)
      g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 80036e4:	6812      	ldr	r2, [r2, #0]
      g_internalTrigState = WAITING_BUFFER_EMPTY;
 80036e6:	6008      	str	r0, [r1, #0]
      g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 80036e8:	6193      	str	r3, [r2, #24]
 80036ea:	4770      	bx	lr
{
 80036ec:	b430      	push	{r4, r5}
  g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 80036ee:	4d08      	ldr	r5, [pc, #32]	; (8003710 <SetTriggerOverflow+0x48>)
  g_internalTrigState = WAITING_LEVEL_BEFORE;
 80036f0:	4c08      	ldr	r4, [pc, #32]	; (8003714 <SetTriggerOverflow+0x4c>)
  g_nbRecords = 0;
 80036f2:	4809      	ldr	r0, [pc, #36]	; (8003718 <SetTriggerOverflow+0x50>)
  bAutoRearmAfterOVF = 0;
 80036f4:	6011      	str	r1, [r2, #0]
  g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 80036f6:	682a      	ldr	r2, [r5, #0]
  g_internalTrigState = WAITING_LEVEL_BEFORE;
 80036f8:	6021      	str	r1, [r4, #0]
  g_nbRecords = 0;
 80036fa:	6001      	str	r1, [r0, #0]
  g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 80036fc:	6193      	str	r3, [r2, #24]
    {
      /* It's now time to rearm the trigger after OVF stop */
      AutoRearmTrigger();
    }
  }
}
 80036fe:	bc30      	pop	{r4, r5}
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	2400092c 	.word	0x2400092c
 8003708:	24000914 	.word	0x24000914
 800370c:	24000918 	.word	0x24000918
 8003710:	24000930 	.word	0x24000930
 8003714:	24000920 	.word	0x24000920
 8003718:	24000928 	.word	0x24000928

0800371c <AddingNewRecord>:
  * @param  None
  * @retval None
  */
void AddingNewRecord(void)
{
  g_nbRecords++;
 800371c:	4a02      	ldr	r2, [pc, #8]	; (8003728 <AddingNewRecord+0xc>)
 800371e:	6813      	ldr	r3, [r2, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	6013      	str	r3, [r2, #0]
}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	24000928 	.word	0x24000928

0800372c <AcqConfigureTrigger>:
  */
void AcqConfigureTrigger(__IO TraceHeaderTrigger_t *pTrigConfig)
{
  g_pTriggerConf = pTrigConfig;

  g_internalTrigState = INTERNAL_STATE_STOPPED;
 800372c:	4b38      	ldr	r3, [pc, #224]	; (8003810 <AcqConfigureTrigger+0xe4>)
 800372e:	2103      	movs	r1, #3
  g_pTriggerConf = pTrigConfig;
 8003730:	4a38      	ldr	r2, [pc, #224]	; (8003814 <AcqConfigureTrigger+0xe8>)
{
 8003732:	b410      	push	{r4}
  g_internalTrigState = INTERNAL_STATE_STOPPED;
 8003734:	6019      	str	r1, [r3, #0]
  /* Process some fields once and for all for better runtime performance
     (type conversion) */
  if (pTrigConfig->mode == 0)
 8003736:	68c3      	ldr	r3, [r0, #12]
  g_pTriggerConf = pTrigConfig;
 8003738:	6010      	str	r0, [r2, #0]
  if (pTrigConfig->mode == 0)
 800373a:	2b00      	cmp	r3, #0
 800373c:	d132      	bne.n	80037a4 <AcqConfigureTrigger+0x78>
  {
    /* No trigger configured (= immediate start + never stop) */
    g_internalTrigMode = MODE_NO_TRIGGER;
 800373e:	4a36      	ldr	r2, [pc, #216]	; (8003818 <AcqConfigureTrigger+0xec>)
 8003740:	6013      	str	r3, [r2, #0]
    else
    {
      g_internalTrigMode = MODE_TRIGGER_WITH_PRETRIG;
    }
  }
  if (pTrigConfig->bIgnoreTrig == 1)
 8003742:	6a03      	ldr	r3, [r0, #32]
 8003744:	4935      	ldr	r1, [pc, #212]	; (800381c <AcqConfigureTrigger+0xf0>)
 8003746:	f1a3 0301 	sub.w	r3, r3, #1
  else
  {
    g_binternalIgnoreTrig = 0;
  }

  if (pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_8BIT)
 800374a:	6842      	ldr	r2, [r0, #4]
  if (pTrigConfig->bIgnoreTrig == 1)
 800374c:	fab3 f383 	clz	r3, r3
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	600b      	str	r3, [r1, #0]
  if (pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_8BIT)
 8003754:	b96a      	cbnz	r2, 8003772 <AcqConfigureTrigger+0x46>
  {
    g_internalType = SNP_TRC_DATA_ACCESS_8BIT;
 8003756:	4c32      	ldr	r4, [pc, #200]	; (8003820 <AcqConfigureTrigger+0xf4>)
    g_threshold_s8 = (int8_t)g_pTriggerConf->threshold;
 8003758:	6881      	ldr	r1, [r0, #8]
 800375a:	4b32      	ldr	r3, [pc, #200]	; (8003824 <AcqConfigureTrigger+0xf8>)
    g_internalType = SNP_TRC_DATA_ACCESS_8BIT;
 800375c:	6022      	str	r2, [r4, #0]
    g_threshold_s8 = (int8_t)g_pTriggerConf->threshold;
 800375e:	7019      	strb	r1, [r3, #0]
    /* On Cortex M0, the LDR instruction requires to be 32-bits aligned */
    g_pTriggerConf->address &= 0xFFFFFFFCUL;
#endif /* STM32F0XX */
  }

  if (pTrigConfig->mode & SNP_TRC_TRIGGER_STOP_N_REC)
 8003760:	68c3      	ldr	r3, [r0, #12]
 8003762:	065b      	lsls	r3, r3, #25
 8003764:	d502      	bpl.n	800376c <AcqConfigureTrigger+0x40>
  {
    g_stopAfterRecords = (int32_t)g_pTriggerConf->stopParam;
 8003766:	6942      	ldr	r2, [r0, #20]
 8003768:	4b2f      	ldr	r3, [pc, #188]	; (8003828 <AcqConfigureTrigger+0xfc>)
 800376a:	601a      	str	r2, [r3, #0]
  }
}
 800376c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003770:	4770      	bx	lr
  else if (pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_16BIT)
 8003772:	6843      	ldr	r3, [r0, #4]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d01f      	beq.n	80037b8 <AcqConfigureTrigger+0x8c>
  else if (pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_32BIT)
 8003778:	6843      	ldr	r3, [r0, #4]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d028      	beq.n	80037d0 <AcqConfigureTrigger+0xa4>
  else if (pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_TRIG_U8)
 800377e:	6843      	ldr	r3, [r0, #4]
 8003780:	2b04      	cmp	r3, #4
 8003782:	d01f      	beq.n	80037c4 <AcqConfigureTrigger+0x98>
  else if (pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_TRIG_U16)
 8003784:	6843      	ldr	r3, [r0, #4]
 8003786:	2b05      	cmp	r3, #5
 8003788:	d036      	beq.n	80037f8 <AcqConfigureTrigger+0xcc>
  else if (pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_TRIG_FLOAT)
 800378a:	6843      	ldr	r3, [r0, #4]
 800378c:	2b07      	cmp	r3, #7
 800378e:	d039      	beq.n	8003804 <AcqConfigureTrigger+0xd8>
  else if (pTrigConfig->accessType == SNP_TRC_DATA_ACCESS_TRIG_DOUBLE)
 8003790:	6843      	ldr	r3, [r0, #4]
 8003792:	2b08      	cmp	r3, #8
 8003794:	d022      	beq.n	80037dc <AcqConfigureTrigger+0xb0>
    g_internalType = SNP_TRC_DATA_ACCESS_TRIG_U32;
 8003796:	4922      	ldr	r1, [pc, #136]	; (8003820 <AcqConfigureTrigger+0xf4>)
 8003798:	2406      	movs	r4, #6
    g_threshold_u32 = (uint32_t)g_pTriggerConf->threshold;
 800379a:	6882      	ldr	r2, [r0, #8]
 800379c:	4b23      	ldr	r3, [pc, #140]	; (800382c <AcqConfigureTrigger+0x100>)
    g_internalType = SNP_TRC_DATA_ACCESS_TRIG_U32;
 800379e:	600c      	str	r4, [r1, #0]
    g_threshold_u32 = (uint32_t)g_pTriggerConf->threshold;
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e7dd      	b.n	8003760 <AcqConfigureTrigger+0x34>
    if (pTrigConfig->nPreTrig == 0)
 80037a4:	69c3      	ldr	r3, [r0, #28]
 80037a6:	b91b      	cbnz	r3, 80037b0 <AcqConfigureTrigger+0x84>
      g_internalTrigMode = MODE_TRIGGER_NO_PRETRIG;
 80037a8:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <AcqConfigureTrigger+0xec>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e7c8      	b.n	8003742 <AcqConfigureTrigger+0x16>
      g_internalTrigMode = MODE_TRIGGER_WITH_PRETRIG;
 80037b0:	4b19      	ldr	r3, [pc, #100]	; (8003818 <AcqConfigureTrigger+0xec>)
 80037b2:	2202      	movs	r2, #2
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	e7c4      	b.n	8003742 <AcqConfigureTrigger+0x16>
    g_internalType = SNP_TRC_DATA_ACCESS_16BIT;
 80037b8:	4c19      	ldr	r4, [pc, #100]	; (8003820 <AcqConfigureTrigger+0xf4>)
    g_threshold_s16 = (int16_t)g_pTriggerConf->threshold;
 80037ba:	6881      	ldr	r1, [r0, #8]
 80037bc:	4a1c      	ldr	r2, [pc, #112]	; (8003830 <AcqConfigureTrigger+0x104>)
    g_internalType = SNP_TRC_DATA_ACCESS_16BIT;
 80037be:	6023      	str	r3, [r4, #0]
    g_threshold_s16 = (int16_t)g_pTriggerConf->threshold;
 80037c0:	8011      	strh	r1, [r2, #0]
 80037c2:	e7cd      	b.n	8003760 <AcqConfigureTrigger+0x34>
    g_internalType = SNP_TRC_DATA_ACCESS_TRIG_U8;
 80037c4:	4c16      	ldr	r4, [pc, #88]	; (8003820 <AcqConfigureTrigger+0xf4>)
    g_threshold_u8 = (uint8_t)g_pTriggerConf->threshold;
 80037c6:	6881      	ldr	r1, [r0, #8]
 80037c8:	4a1a      	ldr	r2, [pc, #104]	; (8003834 <AcqConfigureTrigger+0x108>)
    g_internalType = SNP_TRC_DATA_ACCESS_TRIG_U8;
 80037ca:	6023      	str	r3, [r4, #0]
    g_threshold_u8 = (uint8_t)g_pTriggerConf->threshold;
 80037cc:	7011      	strb	r1, [r2, #0]
 80037ce:	e7c7      	b.n	8003760 <AcqConfigureTrigger+0x34>
    g_internalType = SNP_TRC_DATA_ACCESS_32BIT;
 80037d0:	4c13      	ldr	r4, [pc, #76]	; (8003820 <AcqConfigureTrigger+0xf4>)
    g_threshold_s32 = (int32_t)g_pTriggerConf->threshold;
 80037d2:	6881      	ldr	r1, [r0, #8]
 80037d4:	4a18      	ldr	r2, [pc, #96]	; (8003838 <AcqConfigureTrigger+0x10c>)
    g_internalType = SNP_TRC_DATA_ACCESS_32BIT;
 80037d6:	6023      	str	r3, [r4, #0]
    g_threshold_s32 = (int32_t)g_pTriggerConf->threshold;
 80037d8:	6011      	str	r1, [r2, #0]
 80037da:	e7c1      	b.n	8003760 <AcqConfigureTrigger+0x34>
    g_threshold_double = *(double *)&g_pTriggerConf->thresholdDouble;
 80037dc:	ed90 7b09 	vldr	d7, [r0, #36]	; 0x24
    g_pTriggerConf->address &= 0xFFFFFFFCUL;
 80037e0:	6802      	ldr	r2, [r0, #0]
    g_internalType = SNP_TRC_DATA_ACCESS_TRIG_DOUBLE;
 80037e2:	4c0f      	ldr	r4, [pc, #60]	; (8003820 <AcqConfigureTrigger+0xf4>)
    g_threshold_double = *(double *)&g_pTriggerConf->thresholdDouble;
 80037e4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80037e8:	4914      	ldr	r1, [pc, #80]	; (800383c <AcqConfigureTrigger+0x110>)
    g_pTriggerConf->address &= 0xFFFFFFFCUL;
 80037ea:	f022 0203 	bic.w	r2, r2, #3
    g_internalType = SNP_TRC_DATA_ACCESS_TRIG_DOUBLE;
 80037ee:	6023      	str	r3, [r4, #0]
    g_pTriggerConf->address &= 0xFFFFFFFCUL;
 80037f0:	6002      	str	r2, [r0, #0]
    g_threshold_double = *(double *)&g_pTriggerConf->thresholdDouble;
 80037f2:	ed81 7a00 	vstr	s14, [r1]
    g_pTriggerConf->address &= 0xFFFFFFFCUL;
 80037f6:	e7b3      	b.n	8003760 <AcqConfigureTrigger+0x34>
    g_internalType = SNP_TRC_DATA_ACCESS_TRIG_U16;
 80037f8:	4c09      	ldr	r4, [pc, #36]	; (8003820 <AcqConfigureTrigger+0xf4>)
    g_threshold_u16 = (uint16_t)g_pTriggerConf->threshold;
 80037fa:	6881      	ldr	r1, [r0, #8]
 80037fc:	4a10      	ldr	r2, [pc, #64]	; (8003840 <AcqConfigureTrigger+0x114>)
    g_internalType = SNP_TRC_DATA_ACCESS_TRIG_U16;
 80037fe:	6023      	str	r3, [r4, #0]
    g_threshold_u16 = (uint16_t)g_pTriggerConf->threshold;
 8003800:	8011      	strh	r1, [r2, #0]
 8003802:	e7ad      	b.n	8003760 <AcqConfigureTrigger+0x34>
    g_internalType = SNP_TRC_DATA_ACCESS_TRIG_FLOAT;
 8003804:	4c06      	ldr	r4, [pc, #24]	; (8003820 <AcqConfigureTrigger+0xf4>)
    g_threshold_float = *(float_t *)&g_pTriggerConf->threshold;
 8003806:	4a0f      	ldr	r2, [pc, #60]	; (8003844 <AcqConfigureTrigger+0x118>)
 8003808:	6881      	ldr	r1, [r0, #8]
    g_internalType = SNP_TRC_DATA_ACCESS_TRIG_FLOAT;
 800380a:	6023      	str	r3, [r4, #0]
    g_threshold_float = *(float_t *)&g_pTriggerConf->threshold;
 800380c:	6011      	str	r1, [r2, #0]
 800380e:	e7a7      	b.n	8003760 <AcqConfigureTrigger+0x34>
 8003810:	24000920 	.word	0x24000920
 8003814:	24000930 	.word	0x24000930
 8003818:	2400091c 	.word	0x2400091c
 800381c:	24000918 	.word	0x24000918
 8003820:	24000924 	.word	0x24000924
 8003824:	24000948 	.word	0x24000948
 8003828:	24000934 	.word	0x24000934
 800382c:	2400094c 	.word	0x2400094c
 8003830:	24000940 	.word	0x24000940
 8003834:	24000950 	.word	0x24000950
 8003838:	24000944 	.word	0x24000944
 800383c:	24000938 	.word	0x24000938
 8003840:	2400094a 	.word	0x2400094a
 8003844:	2400093c 	.word	0x2400093c

08003848 <valAboveThreshold>:
  * @param  None
  * @retval true if above
  */
int32_t valAboveThreshold(void)
{
  switch (g_internalType)
 8003848:	4b3a      	ldr	r3, [pc, #232]	; (8003934 <valAboveThreshold+0xec>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b08      	cmp	r3, #8
 800384e:	d86e      	bhi.n	800392e <valAboveThreshold+0xe6>
 8003850:	e8df f003 	tbb	[pc, r3]
 8003854:	6d312417 	.word	0x6d312417
 8003858:	5d52473c 	.word	0x5d52473c
 800385c:	05          	.byte	0x05
 800385d:	00          	.byte	0x00
    case SNP_TRC_DATA_ACCESS_TRIG_FLOAT:
      return ((*(_FAR_DATA_ float *)g_pTriggerConf->address) > g_threshold_float) ? 1 : 0;
#endif /* USING_TRIGGER_ON_FLOAT */
#ifdef USING_TRIGGER_ON_DOUBLE
    case SNP_TRC_DATA_ACCESS_TRIG_DOUBLE:
      return ((*(_FAR_DATA_ double *)g_pTriggerConf->address) > g_threshold_double) ? 1 : 0;
 800385e:	4b36      	ldr	r3, [pc, #216]	; (8003938 <valAboveThreshold+0xf0>)
 8003860:	4a36      	ldr	r2, [pc, #216]	; (800393c <valAboveThreshold+0xf4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	ed92 7a00 	vldr	s14, [r2]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800386e:	ed93 6b00 	vldr	d6, [r3]
 8003872:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387a:	bfcc      	ite	gt
 800387c:	2001      	movgt	r0, #1
 800387e:	2000      	movle	r0, #0
 8003880:	4770      	bx	lr
      return ((*(_FAR_DATA_ int8_t *)g_pTriggerConf->address) > g_threshold_s8) ? 1 : 0;
 8003882:	4a2d      	ldr	r2, [pc, #180]	; (8003938 <valAboveThreshold+0xf0>)
 8003884:	4b2e      	ldr	r3, [pc, #184]	; (8003940 <valAboveThreshold+0xf8>)
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	f993 3000 	ldrsb.w	r3, [r3]
 800388c:	6812      	ldr	r2, [r2, #0]
 800388e:	f992 0000 	ldrsb.w	r0, [r2]
 8003892:	4298      	cmp	r0, r3
 8003894:	bfd4      	ite	le
 8003896:	2000      	movle	r0, #0
 8003898:	2001      	movgt	r0, #1
 800389a:	4770      	bx	lr
      return ((*(_FAR_DATA_ int16_t *)g_pTriggerConf->address) > g_threshold_s16) ? 1 : 0;
 800389c:	4a26      	ldr	r2, [pc, #152]	; (8003938 <valAboveThreshold+0xf0>)
 800389e:	4b29      	ldr	r3, [pc, #164]	; (8003944 <valAboveThreshold+0xfc>)
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	f9b2 0000 	ldrsh.w	r0, [r2]
 80038ac:	4298      	cmp	r0, r3
 80038ae:	bfd4      	ite	le
 80038b0:	2000      	movle	r0, #0
 80038b2:	2001      	movgt	r0, #1
 80038b4:	4770      	bx	lr
      return ((*(_FAR_DATA_ int32_t *)g_pTriggerConf->address) > g_threshold_s32) ? 1 : 0;
 80038b6:	4a20      	ldr	r2, [pc, #128]	; (8003938 <valAboveThreshold+0xf0>)
 80038b8:	4b23      	ldr	r3, [pc, #140]	; (8003948 <valAboveThreshold+0x100>)
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	6810      	ldr	r0, [r2, #0]
 80038c2:	4298      	cmp	r0, r3
 80038c4:	bfd4      	ite	le
 80038c6:	2000      	movle	r0, #0
 80038c8:	2001      	movgt	r0, #1
 80038ca:	4770      	bx	lr
      return ((*(_FAR_DATA_ uint8_t *)g_pTriggerConf->address) > g_threshold_u8) ? 1 : 0;
 80038cc:	4a1a      	ldr	r2, [pc, #104]	; (8003938 <valAboveThreshold+0xf0>)
 80038ce:	4b1f      	ldr	r3, [pc, #124]	; (800394c <valAboveThreshold+0x104>)
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	7810      	ldrb	r0, [r2, #0]
 80038d8:	4298      	cmp	r0, r3
 80038da:	bf94      	ite	ls
 80038dc:	2000      	movls	r0, #0
 80038de:	2001      	movhi	r0, #1
 80038e0:	4770      	bx	lr
      return ((*(_FAR_DATA_ uint16_t *)g_pTriggerConf->address) > g_threshold_u16) ? 1 : 0;
 80038e2:	4a15      	ldr	r2, [pc, #84]	; (8003938 <valAboveThreshold+0xf0>)
 80038e4:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <valAboveThreshold+0x108>)
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	8810      	ldrh	r0, [r2, #0]
 80038ee:	4298      	cmp	r0, r3
 80038f0:	bf94      	ite	ls
 80038f2:	2000      	movls	r0, #0
 80038f4:	2001      	movhi	r0, #1
 80038f6:	4770      	bx	lr
      return ((*(_FAR_DATA_ uint32_t *)g_pTriggerConf->address) > g_threshold_u32) ? 1 : 0;
 80038f8:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <valAboveThreshold+0xf0>)
 80038fa:	4b16      	ldr	r3, [pc, #88]	; (8003954 <valAboveThreshold+0x10c>)
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	6810      	ldr	r0, [r2, #0]
 8003904:	4298      	cmp	r0, r3
 8003906:	bf94      	ite	ls
 8003908:	2000      	movls	r0, #0
 800390a:	2001      	movhi	r0, #1
 800390c:	4770      	bx	lr
      return ((*(_FAR_DATA_ float *)g_pTriggerConf->address) > g_threshold_float) ? 1 : 0;
 800390e:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <valAboveThreshold+0xf0>)
 8003910:	4a11      	ldr	r2, [pc, #68]	; (8003958 <valAboveThreshold+0x110>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	edd2 7a00 	vldr	s15, [r2]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	ed93 7a00 	vldr	s14, [r3]
 800391e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003926:	bfcc      	ite	gt
 8003928:	2001      	movgt	r0, #1
 800392a:	2000      	movle	r0, #0
 800392c:	4770      	bx	lr
  switch (g_internalType)
 800392e:	2000      	movs	r0, #0
#endif /* USING_TRIGGER_ON_DOUBLE */
    default:
      break;
  }
  return 0;
}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	24000924 	.word	0x24000924
 8003938:	24000930 	.word	0x24000930
 800393c:	24000938 	.word	0x24000938
 8003940:	24000948 	.word	0x24000948
 8003944:	24000940 	.word	0x24000940
 8003948:	24000944 	.word	0x24000944
 800394c:	24000950 	.word	0x24000950
 8003950:	2400094a 	.word	0x2400094a
 8003954:	2400094c 	.word	0x2400094c
 8003958:	2400093c 	.word	0x2400093c

0800395c <valBelowThreshold>:
  * @param  None
  * @retval true if below
  */
int32_t valBelowThreshold(void)
{
  switch (g_internalType)
 800395c:	4b3a      	ldr	r3, [pc, #232]	; (8003a48 <valBelowThreshold+0xec>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b08      	cmp	r3, #8
 8003962:	d86e      	bhi.n	8003a42 <valBelowThreshold+0xe6>
 8003964:	e8df f003 	tbb	[pc, r3]
 8003968:	6d312417 	.word	0x6d312417
 800396c:	5d52473c 	.word	0x5d52473c
 8003970:	05          	.byte	0x05
 8003971:	00          	.byte	0x00
    case SNP_TRC_DATA_ACCESS_TRIG_FLOAT:
      return ((*(_FAR_DATA_ float *)g_pTriggerConf->address) < g_threshold_float) ? 1 : 0;
#endif /* USING_TRIGGER_ON_FLOAT */
#ifdef USING_TRIGGER_ON_DOUBLE
    case SNP_TRC_DATA_ACCESS_TRIG_DOUBLE:
      return ((*(_FAR_DATA_ double *)g_pTriggerConf->address) < g_threshold_double) ? 1 : 0;
 8003972:	4b36      	ldr	r3, [pc, #216]	; (8003a4c <valBelowThreshold+0xf0>)
 8003974:	4a36      	ldr	r2, [pc, #216]	; (8003a50 <valBelowThreshold+0xf4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	ed92 7a00 	vldr	s14, [r2]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003982:	ed93 6b00 	vldr	d6, [r3]
 8003986:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800398a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398e:	bf4c      	ite	mi
 8003990:	2001      	movmi	r0, #1
 8003992:	2000      	movpl	r0, #0
 8003994:	4770      	bx	lr
      return ((*(_FAR_DATA_ int8_t *)g_pTriggerConf->address) < g_threshold_s8) ? 1 : 0;
 8003996:	4a2d      	ldr	r2, [pc, #180]	; (8003a4c <valBelowThreshold+0xf0>)
 8003998:	4b2e      	ldr	r3, [pc, #184]	; (8003a54 <valBelowThreshold+0xf8>)
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	f993 3000 	ldrsb.w	r3, [r3]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	f992 0000 	ldrsb.w	r0, [r2]
 80039a6:	4298      	cmp	r0, r3
 80039a8:	bfac      	ite	ge
 80039aa:	2000      	movge	r0, #0
 80039ac:	2001      	movlt	r0, #1
 80039ae:	4770      	bx	lr
      return ((*(_FAR_DATA_ int16_t *)g_pTriggerConf->address) < g_threshold_s16) ? 1 : 0;
 80039b0:	4a26      	ldr	r2, [pc, #152]	; (8003a4c <valBelowThreshold+0xf0>)
 80039b2:	4b29      	ldr	r3, [pc, #164]	; (8003a58 <valBelowThreshold+0xfc>)
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039ba:	6812      	ldr	r2, [r2, #0]
 80039bc:	f9b2 0000 	ldrsh.w	r0, [r2]
 80039c0:	4298      	cmp	r0, r3
 80039c2:	bfac      	ite	ge
 80039c4:	2000      	movge	r0, #0
 80039c6:	2001      	movlt	r0, #1
 80039c8:	4770      	bx	lr
      return ((*(_FAR_DATA_ int32_t *)g_pTriggerConf->address) < g_threshold_s32) ? 1 : 0;
 80039ca:	4a20      	ldr	r2, [pc, #128]	; (8003a4c <valBelowThreshold+0xf0>)
 80039cc:	4b23      	ldr	r3, [pc, #140]	; (8003a5c <valBelowThreshold+0x100>)
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	6810      	ldr	r0, [r2, #0]
 80039d6:	4298      	cmp	r0, r3
 80039d8:	bfac      	ite	ge
 80039da:	2000      	movge	r0, #0
 80039dc:	2001      	movlt	r0, #1
 80039de:	4770      	bx	lr
      return ((*(_FAR_DATA_ uint8_t *)g_pTriggerConf->address) < g_threshold_u8) ? 1 : 0;
 80039e0:	4a1a      	ldr	r2, [pc, #104]	; (8003a4c <valBelowThreshold+0xf0>)
 80039e2:	4b1f      	ldr	r3, [pc, #124]	; (8003a60 <valBelowThreshold+0x104>)
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	6812      	ldr	r2, [r2, #0]
 80039ea:	7810      	ldrb	r0, [r2, #0]
 80039ec:	4298      	cmp	r0, r3
 80039ee:	bf2c      	ite	cs
 80039f0:	2000      	movcs	r0, #0
 80039f2:	2001      	movcc	r0, #1
 80039f4:	4770      	bx	lr
      return ((*(_FAR_DATA_ uint16_t *)g_pTriggerConf->address) < g_threshold_u16) ? 1 : 0;
 80039f6:	4a15      	ldr	r2, [pc, #84]	; (8003a4c <valBelowThreshold+0xf0>)
 80039f8:	4b1a      	ldr	r3, [pc, #104]	; (8003a64 <valBelowThreshold+0x108>)
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	8810      	ldrh	r0, [r2, #0]
 8003a02:	4298      	cmp	r0, r3
 8003a04:	bf2c      	ite	cs
 8003a06:	2000      	movcs	r0, #0
 8003a08:	2001      	movcc	r0, #1
 8003a0a:	4770      	bx	lr
      return ((*(_FAR_DATA_ uint32_t *)g_pTriggerConf->address) < g_threshold_u32) ? 1 : 0;
 8003a0c:	4a0f      	ldr	r2, [pc, #60]	; (8003a4c <valBelowThreshold+0xf0>)
 8003a0e:	4b16      	ldr	r3, [pc, #88]	; (8003a68 <valBelowThreshold+0x10c>)
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6812      	ldr	r2, [r2, #0]
 8003a16:	6810      	ldr	r0, [r2, #0]
 8003a18:	4298      	cmp	r0, r3
 8003a1a:	bf2c      	ite	cs
 8003a1c:	2000      	movcs	r0, #0
 8003a1e:	2001      	movcc	r0, #1
 8003a20:	4770      	bx	lr
      return ((*(_FAR_DATA_ float *)g_pTriggerConf->address) < g_threshold_float) ? 1 : 0;
 8003a22:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <valBelowThreshold+0xf0>)
 8003a24:	4a11      	ldr	r2, [pc, #68]	; (8003a6c <valBelowThreshold+0x110>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	edd2 7a00 	vldr	s15, [r2]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	ed93 7a00 	vldr	s14, [r3]
 8003a32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3a:	bf4c      	ite	mi
 8003a3c:	2001      	movmi	r0, #1
 8003a3e:	2000      	movpl	r0, #0
 8003a40:	4770      	bx	lr
  switch (g_internalType)
 8003a42:	2000      	movs	r0, #0
#endif /* USING_TRIGGER_ON_DOUBLE */
    default:
      break;
  }
  return 0;
}
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	24000924 	.word	0x24000924
 8003a4c:	24000930 	.word	0x24000930
 8003a50:	24000938 	.word	0x24000938
 8003a54:	24000948 	.word	0x24000948
 8003a58:	24000940 	.word	0x24000940
 8003a5c:	24000944 	.word	0x24000944
 8003a60:	24000950 	.word	0x24000950
 8003a64:	2400094a 	.word	0x2400094a
 8003a68:	2400094c 	.word	0x2400094c
 8003a6c:	2400093c 	.word	0x2400093c

08003a70 <valEqualsThreshold>:
  * @param  None
  * @retval true if equals
  */
int32_t valEqualsThreshold(void)
{
  switch (g_internalType)
 8003a70:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <valEqualsThreshold+0xdc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d866      	bhi.n	8003b46 <valEqualsThreshold+0xd6>
 8003a78:	e8df f003 	tbb	[pc, r3]
 8003a7c:	65312417 	.word	0x65312417
 8003a80:	5552473c 	.word	0x5552473c
 8003a84:	05          	.byte	0x05
 8003a85:	00          	.byte	0x00
    case SNP_TRC_DATA_ACCESS_TRIG_FLOAT:
      return ((*(_FAR_DATA_ float *)g_pTriggerConf->address) == g_threshold_float) ? 1 : 0;
#endif /* USING_TRIGGER_ON_FLOAT */
#ifdef USING_TRIGGER_ON_DOUBLE
    case SNP_TRC_DATA_ACCESS_TRIG_DOUBLE:
      return ((*(_FAR_DATA_ double *)g_pTriggerConf->address) == g_threshold_double) ? 1 : 0;
 8003a86:	4b32      	ldr	r3, [pc, #200]	; (8003b50 <valEqualsThreshold+0xe0>)
 8003a88:	4a32      	ldr	r2, [pc, #200]	; (8003b54 <valEqualsThreshold+0xe4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	ed92 7a00 	vldr	s14, [r2]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003a96:	ed93 6b00 	vldr	d6, [r3]
 8003a9a:	eeb4 6b47 	vcmp.f64	d6, d7
 8003a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2001      	moveq	r0, #1
 8003aa6:	2000      	movne	r0, #0
 8003aa8:	4770      	bx	lr
      return ((*(_FAR_DATA_ int8_t *)g_pTriggerConf->address) == g_threshold_s8) ? 1 : 0;
 8003aaa:	4a29      	ldr	r2, [pc, #164]	; (8003b50 <valEqualsThreshold+0xe0>)
 8003aac:	4b2a      	ldr	r3, [pc, #168]	; (8003b58 <valEqualsThreshold+0xe8>)
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	f993 3000 	ldrsb.w	r3, [r3]
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	f992 0000 	ldrsb.w	r0, [r2]
 8003aba:	1ac0      	subs	r0, r0, r3
 8003abc:	fab0 f080 	clz	r0, r0
 8003ac0:	0940      	lsrs	r0, r0, #5
 8003ac2:	4770      	bx	lr
      return ((*(_FAR_DATA_ int16_t *)g_pTriggerConf->address) == g_threshold_s16) ? 1 : 0;
 8003ac4:	4a22      	ldr	r2, [pc, #136]	; (8003b50 <valEqualsThreshold+0xe0>)
 8003ac6:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <valEqualsThreshold+0xec>)
 8003ac8:	6812      	ldr	r2, [r2, #0]
 8003aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	f9b2 0000 	ldrsh.w	r0, [r2]
 8003ad4:	1ac0      	subs	r0, r0, r3
 8003ad6:	fab0 f080 	clz	r0, r0
 8003ada:	0940      	lsrs	r0, r0, #5
 8003adc:	4770      	bx	lr
      return ((*(_FAR_DATA_ int32_t *)g_pTriggerConf->address) == g_threshold_s32) ? 1 : 0;
 8003ade:	4a1c      	ldr	r2, [pc, #112]	; (8003b50 <valEqualsThreshold+0xe0>)
 8003ae0:	4b1f      	ldr	r3, [pc, #124]	; (8003b60 <valEqualsThreshold+0xf0>)
      return ((*(_FAR_DATA_ uint32_t *)g_pTriggerConf->address) == g_threshold_u32) ? 1 : 0;
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	6810      	ldr	r0, [r2, #0]
 8003aea:	1ac0      	subs	r0, r0, r3
 8003aec:	fab0 f080 	clz	r0, r0
 8003af0:	0940      	lsrs	r0, r0, #5
 8003af2:	4770      	bx	lr
      return ((*(_FAR_DATA_ uint8_t *)g_pTriggerConf->address) == g_threshold_u8) ? 1 : 0;
 8003af4:	4a16      	ldr	r2, [pc, #88]	; (8003b50 <valEqualsThreshold+0xe0>)
 8003af6:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <valEqualsThreshold+0xf4>)
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	7810      	ldrb	r0, [r2, #0]
 8003b00:	1ac0      	subs	r0, r0, r3
 8003b02:	fab0 f080 	clz	r0, r0
 8003b06:	0940      	lsrs	r0, r0, #5
 8003b08:	4770      	bx	lr
      return ((*(_FAR_DATA_ uint16_t *)g_pTriggerConf->address) == g_threshold_u16) ? 1 : 0;
 8003b0a:	4a11      	ldr	r2, [pc, #68]	; (8003b50 <valEqualsThreshold+0xe0>)
 8003b0c:	4b16      	ldr	r3, [pc, #88]	; (8003b68 <valEqualsThreshold+0xf8>)
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	8810      	ldrh	r0, [r2, #0]
 8003b16:	1ac0      	subs	r0, r0, r3
 8003b18:	fab0 f080 	clz	r0, r0
 8003b1c:	0940      	lsrs	r0, r0, #5
 8003b1e:	4770      	bx	lr
      return ((*(_FAR_DATA_ uint32_t *)g_pTriggerConf->address) == g_threshold_u32) ? 1 : 0;
 8003b20:	4a0b      	ldr	r2, [pc, #44]	; (8003b50 <valEqualsThreshold+0xe0>)
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <valEqualsThreshold+0xfc>)
 8003b24:	e7dd      	b.n	8003ae2 <valEqualsThreshold+0x72>
      return ((*(_FAR_DATA_ float *)g_pTriggerConf->address) == g_threshold_float) ? 1 : 0;
 8003b26:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <valEqualsThreshold+0xe0>)
 8003b28:	4a11      	ldr	r2, [pc, #68]	; (8003b70 <valEqualsThreshold+0x100>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	edd2 7a00 	vldr	s15, [r2]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	ed93 7a00 	vldr	s14, [r3]
 8003b36:	eeb4 7a67 	vcmp.f32	s14, s15
 8003b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3e:	bf0c      	ite	eq
 8003b40:	2001      	moveq	r0, #1
 8003b42:	2000      	movne	r0, #0
 8003b44:	4770      	bx	lr
  switch (g_internalType)
 8003b46:	2000      	movs	r0, #0
#endif /* USING_TRIGGER_ON_DOUBLE */
    default:
      break;
  }
  return 0;
}
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	24000924 	.word	0x24000924
 8003b50:	24000930 	.word	0x24000930
 8003b54:	24000938 	.word	0x24000938
 8003b58:	24000948 	.word	0x24000948
 8003b5c:	24000940 	.word	0x24000940
 8003b60:	24000944 	.word	0x24000944
 8003b64:	24000950 	.word	0x24000950
 8003b68:	2400094a 	.word	0x2400094a
 8003b6c:	2400094c 	.word	0x2400094c
 8003b70:	2400093c 	.word	0x2400093c

08003b74 <evaluateEnd>:
  * @retval Returns TRIG_EVAL_POST_REC if still in TRIGGED state; TRIG_EVAL_NO_REC if STOPPED.
  */
int32_t evaluateEnd(void)
{
  /* Check if stop asked */
  if (g_pTriggerConf->cmd & SNP_TRC_TRIGGER_STOP)
 8003b74:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <evaluateEnd+0x94>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
  {
    g_pTriggerConf->state = SNP_TRC_TRIGGER_STOPPED;
    g_internalTrigState = INTERNAL_STATE_STOPPED;
    return TRIG_EVAL_NO_REC;
  }
  if ((g_pTriggerConf->mode & SNP_TRC_TRIGGER_STOP_MASK) == 0)
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	f012 0f70 	tst.w	r2, #112	; 0x70
 8003b80:	d029      	beq.n	8003bd6 <evaluateEnd+0x62>
  {
    /* Never stop */
    return TRIG_EVAL_POST_REC;
  }
  /* Check against other stop conditions */
  if ((g_pTriggerConf->mode & SNP_TRC_TRIGGER_STOP_OVF) && (g_overflow != 1))
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	0690      	lsls	r0, r2, #26
 8003b86:	d422      	bmi.n	8003bce <evaluateEnd+0x5a>
  {
    return TRIG_EVAL_POST_REC;
  }
  if ((g_pTriggerConf->mode & SNP_TRC_TRIGGER_STOP_N_REC) && (g_nbRecords < g_stopAfterRecords))
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	0651      	lsls	r1, r2, #25
 8003b8c:	d505      	bpl.n	8003b9a <evaluateEnd+0x26>
 8003b8e:	491f      	ldr	r1, [pc, #124]	; (8003c0c <evaluateEnd+0x98>)
 8003b90:	4a1f      	ldr	r2, [pc, #124]	; (8003c10 <evaluateEnd+0x9c>)
 8003b92:	6809      	ldr	r1, [r1, #0]
 8003b94:	6812      	ldr	r2, [r2, #0]
 8003b96:	4291      	cmp	r1, r2
 8003b98:	db1d      	blt.n	8003bd6 <evaluateEnd+0x62>
  {
    return TRIG_EVAL_POST_REC;
  }
  /* If here, a stop condition was faced. Check if autorestart */
  if ((g_pTriggerConf->mode & SNP_TRC_TRIGGER_AUTO_RESTART) && (g_internalTrigMode != MODE_TRIGGER_WITH_PRETRIG))
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	06d2      	lsls	r2, r2, #27
{
 8003b9e:	b410      	push	{r4}
  if ((g_pTriggerConf->mode & SNP_TRC_TRIGGER_AUTO_RESTART) && (g_internalTrigMode != MODE_TRIGGER_WITH_PRETRIG))
 8003ba0:	d51b      	bpl.n	8003bda <evaluateEnd+0x66>
 8003ba2:	4a1c      	ldr	r2, [pc, #112]	; (8003c14 <evaluateEnd+0xa0>)
 8003ba4:	6812      	ldr	r2, [r2, #0]
 8003ba6:	2a02      	cmp	r2, #2
 8003ba8:	d017      	beq.n	8003bda <evaluateEnd+0x66>
  {
    /* The auto-restart is not possible in pretrig mode, as the field g_pTriggerConf->state
       is used for host synchronization; one must wait for host ACK before restarting
       the pre-triggering.
       Init state variables */
    if (g_pTriggerConf->mode & SNP_TRC_TRIGGER_STOP_N_REC)
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8003bb0:	d01f      	beq.n	8003bf2 <evaluateEnd+0x7e>
    {
      if (g_binternalIgnoreTrig)
 8003bb2:	4a19      	ldr	r2, [pc, #100]	; (8003c18 <evaluateEnd+0xa4>)
      {
        /* Immediately rearm the trigger in this case */
        g_internalTrigState = WAITING_LEVEL_BEFORE;
      }
      g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
      g_nbRecords = 0;
 8003bb4:	2100      	movs	r1, #0
      g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	4c18      	ldr	r4, [pc, #96]	; (8003c1c <evaluateEnd+0xa8>)
      if (g_binternalIgnoreTrig)
 8003bba:	6812      	ldr	r2, [r2, #0]
      g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 8003bbc:	6198      	str	r0, [r3, #24]
    g_pTriggerConf->cmd = 0;
    g_pTriggerConf->state = g_pTriggerConf->state & ((TraceHeaderField_t)0xFFFFFFFE);/*Clear SNP_TRC_TRIGGER_STARTED */
    g_internalTrigState = INTERNAL_STATE_STOPPED;
    /* g_pTriggerConf->state = SNP_TRC_TRIGGER_STOPPED;  Moved into HostReadEvent */
  }
  return TRIG_EVAL_NO_REC;
 8003bbe:	4608      	mov	r0, r1
        g_internalTrigState = WAITING_BUFFER_EMPTY;
 8003bc0:	428a      	cmp	r2, r1
      g_nbRecords = 0;
 8003bc2:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <evaluateEnd+0x98>)
        g_internalTrigState = WAITING_BUFFER_EMPTY;
 8003bc4:	bf18      	it	ne
 8003bc6:	2202      	movne	r2, #2
      g_nbRecords = 0;
 8003bc8:	6019      	str	r1, [r3, #0]
 8003bca:	6022      	str	r2, [r4, #0]
 8003bcc:	e00e      	b.n	8003bec <evaluateEnd+0x78>
  if ((g_pTriggerConf->mode & SNP_TRC_TRIGGER_STOP_OVF) && (g_overflow != 1))
 8003bce:	4a14      	ldr	r2, [pc, #80]	; (8003c20 <evaluateEnd+0xac>)
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	2a01      	cmp	r2, #1
 8003bd4:	d0d8      	beq.n	8003b88 <evaluateEnd+0x14>
    return TRIG_EVAL_POST_REC;
 8003bd6:	2001      	movs	r0, #1
}
 8003bd8:	4770      	bx	lr
    g_pTriggerConf->cmd = 0;
 8003bda:	2000      	movs	r0, #0
    g_internalTrigState = INTERNAL_STATE_STOPPED;
 8003bdc:	490f      	ldr	r1, [pc, #60]	; (8003c1c <evaluateEnd+0xa8>)
 8003bde:	2403      	movs	r4, #3
    g_pTriggerConf->cmd = 0;
 8003be0:	6118      	str	r0, [r3, #16]
    g_pTriggerConf->state = g_pTriggerConf->state & ((TraceHeaderField_t)0xFFFFFFFE);/*Clear SNP_TRC_TRIGGER_STARTED */
 8003be2:	699a      	ldr	r2, [r3, #24]
    g_internalTrigState = INTERNAL_STATE_STOPPED;
 8003be4:	600c      	str	r4, [r1, #0]
    g_pTriggerConf->state = g_pTriggerConf->state & ((TraceHeaderField_t)0xFFFFFFFE);/*Clear SNP_TRC_TRIGGER_STARTED */
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	619a      	str	r2, [r3, #24]
}
 8003bec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bf0:	4770      	bx	lr
      g_internalTrigState = INTERNAL_STATE_STOPPED;
 8003bf2:	480a      	ldr	r0, [pc, #40]	; (8003c1c <evaluateEnd+0xa8>)
 8003bf4:	2403      	movs	r4, #3
      bAutoRearmAfterOVF = 1;
 8003bf6:	490b      	ldr	r1, [pc, #44]	; (8003c24 <evaluateEnd+0xb0>)
      g_internalTrigState = INTERNAL_STATE_STOPPED;
 8003bf8:	6004      	str	r4, [r0, #0]
      bAutoRearmAfterOVF = 1;
 8003bfa:	2401      	movs	r4, #1
      g_pTriggerConf->cmd = 0;
 8003bfc:	611a      	str	r2, [r3, #16]
  return TRIG_EVAL_NO_REC;
 8003bfe:	4610      	mov	r0, r2
      g_pTriggerConf->state = SNP_TRC_TRIGGER_STOPPED;
 8003c00:	619a      	str	r2, [r3, #24]
      bAutoRearmAfterOVF = 1;
 8003c02:	600c      	str	r4, [r1, #0]
 8003c04:	e7f2      	b.n	8003bec <evaluateEnd+0x78>
 8003c06:	bf00      	nop
 8003c08:	24000930 	.word	0x24000930
 8003c0c:	24000928 	.word	0x24000928
 8003c10:	24000934 	.word	0x24000934
 8003c14:	2400091c 	.word	0x2400091c
 8003c18:	24000918 	.word	0x24000918
 8003c1c:	24000920 	.word	0x24000920
 8003c20:	2400092c 	.word	0x2400092c
 8003c24:	24000914 	.word	0x24000914

08003c28 <AcqEvaluateTrigger>:
{
 8003c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (g_internalTrigMode == MODE_NO_TRIGGER)
 8003c2a:	4c3a      	ldr	r4, [pc, #232]	; (8003d14 <AcqEvaluateTrigger+0xec>)
 8003c2c:	6821      	ldr	r1, [r4, #0]
 8003c2e:	b171      	cbz	r1, 8003c4e <AcqEvaluateTrigger+0x26>
  if (g_internalTrigState == INTERNAL_STATE_TRIGGED)
 8003c30:	4e39      	ldr	r6, [pc, #228]	; (8003d18 <AcqEvaluateTrigger+0xf0>)
 8003c32:	6833      	ldr	r3, [r6, #0]
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d04c      	beq.n	8003cd2 <AcqEvaluateTrigger+0xaa>
    if (g_pTriggerConf->cmd & SNP_TRC_TRIGGER_START)
 8003c38:	4f38      	ldr	r7, [pc, #224]	; (8003d1c <AcqEvaluateTrigger+0xf4>)
  if (g_internalTrigState == INTERNAL_STATE_STOPPED)
 8003c3a:	2b03      	cmp	r3, #3
    if (g_pTriggerConf->cmd & SNP_TRC_TRIGGER_START)
 8003c3c:	683d      	ldr	r5, [r7, #0]
  if (g_internalTrigState == INTERNAL_STATE_STOPPED)
 8003c3e:	d008      	beq.n	8003c52 <AcqEvaluateTrigger+0x2a>
  if (g_pTriggerConf->state == SNP_TRC_TRIGGER_STARTED)
 8003c40:	69aa      	ldr	r2, [r5, #24]
 8003c42:	2a01      	cmp	r2, #1
 8003c44:	d02c      	beq.n	8003ca0 <AcqEvaluateTrigger+0x78>
  if (g_internalTrigMode == MODE_TRIGGER_WITH_PRETRIG)
 8003c46:	2902      	cmp	r1, #2
 8003c48:	d041      	beq.n	8003cce <AcqEvaluateTrigger+0xa6>
      return TRIG_EVAL_NO_REC;
 8003c4a:	2000      	movs	r0, #0
}
 8003c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return TRIG_EVAL_POST_REC;
 8003c4e:	2001      	movs	r0, #1
}
 8003c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (g_pTriggerConf->cmd & SNP_TRC_TRIGGER_START)
 8003c52:	692b      	ldr	r3, [r5, #16]
 8003c54:	07db      	lsls	r3, r3, #31
 8003c56:	d5f8      	bpl.n	8003c4a <AcqEvaluateTrigger+0x22>
      g_nbRecords = 0;
 8003c58:	4a31      	ldr	r2, [pc, #196]	; (8003d20 <AcqEvaluateTrigger+0xf8>)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	6013      	str	r3, [r2, #0]
      if ((g_pTriggerConf->mode & SNP_TRC_TRIGGER_START_MASK) == SNP_TRC_TRIGGER_START_IMMEDIATE)
 8003c5e:	68ea      	ldr	r2, [r5, #12]
 8003c60:	0710      	lsls	r0, r2, #28
 8003c62:	d03a      	beq.n	8003cda <AcqEvaluateTrigger+0xb2>
      if (g_internalTrigMode == MODE_TRIGGER_NO_PRETRIG)
 8003c64:	2901      	cmp	r1, #1
 8003c66:	d04b      	beq.n	8003d00 <AcqEvaluateTrigger+0xd8>
        g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	61ab      	str	r3, [r5, #24]
        g_internalTrigState = WAITING_BUFFER_EMPTY;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	6033      	str	r3, [r6, #0]
  if (g_pTriggerConf->state == SNP_TRC_TRIGGER_STARTED)
 8003c70:	69ab      	ldr	r3, [r5, #24]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d1e7      	bne.n	8003c46 <AcqEvaluateTrigger+0x1e>
    if (g_pTriggerConf->cmd & SNP_TRC_TRIGGER_STOP)
 8003c76:	692b      	ldr	r3, [r5, #16]
      if (IsBufferEmpty() == 1)
 8003c78:	f000 f872 	bl	8003d60 <IsBufferEmpty>
 8003c7c:	2801      	cmp	r0, #1
 8003c7e:	d146      	bne.n	8003d0e <AcqEvaluateTrigger+0xe6>
  bAutoRearmAfterOVF = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	4928      	ldr	r1, [pc, #160]	; (8003d24 <AcqEvaluateTrigger+0xfc>)
  g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 8003c84:	683d      	ldr	r5, [r7, #0]
  g_nbRecords = 0;
 8003c86:	4a26      	ldr	r2, [pc, #152]	; (8003d20 <AcqEvaluateTrigger+0xf8>)
  g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 8003c88:	61a8      	str	r0, [r5, #24]
  bAutoRearmAfterOVF = 0;
 8003c8a:	600b      	str	r3, [r1, #0]
  g_internalTrigState = WAITING_LEVEL_BEFORE;
 8003c8c:	6033      	str	r3, [r6, #0]
  g_nbRecords = 0;
 8003c8e:	6013      	str	r3, [r2, #0]
      if (g_pTriggerConf->mode & SNP_TRC_TRIGGER_FALLING)
 8003c90:	68eb      	ldr	r3, [r5, #12]
 8003c92:	079a      	lsls	r2, r3, #30
 8003c94:	d527      	bpl.n	8003ce6 <AcqEvaluateTrigger+0xbe>
        if (valAboveThreshold())
 8003c96:	f7ff fdd7 	bl	8003848 <valAboveThreshold>
 8003c9a:	bb40      	cbnz	r0, 8003cee <AcqEvaluateTrigger+0xc6>
  if (g_internalTrigMode == MODE_TRIGGER_WITH_PRETRIG)
 8003c9c:	6821      	ldr	r1, [r4, #0]
 8003c9e:	e7d2      	b.n	8003c46 <AcqEvaluateTrigger+0x1e>
    if (g_internalTrigState == WAITING_BUFFER_EMPTY)
 8003ca0:	2b02      	cmp	r3, #2
    if (g_pTriggerConf->cmd & SNP_TRC_TRIGGER_STOP)
 8003ca2:	692a      	ldr	r2, [r5, #16]
    if (g_internalTrigState == WAITING_BUFFER_EMPTY)
 8003ca4:	d0e8      	beq.n	8003c78 <AcqEvaluateTrigger+0x50>
    if (g_internalTrigState == WAITING_LEVEL_BEFORE)
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f2      	beq.n	8003c90 <AcqEvaluateTrigger+0x68>
    if (g_internalTrigState == WAITING_LEVEL_AFTER)
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d1cb      	bne.n	8003c46 <AcqEvaluateTrigger+0x1e>
      if (g_pTriggerConf->mode & SNP_TRC_TRIGGER_FALLING)
 8003cae:	68eb      	ldr	r3, [r5, #12]
 8003cb0:	079b      	lsls	r3, r3, #30
 8003cb2:	d420      	bmi.n	8003cf6 <AcqEvaluateTrigger+0xce>
        if (valAboveThreshold() || valEqualsThreshold())
 8003cb4:	f7ff fdc8 	bl	8003848 <valAboveThreshold>
 8003cb8:	b918      	cbnz	r0, 8003cc2 <AcqEvaluateTrigger+0x9a>
 8003cba:	f7ff fed9 	bl	8003a70 <valEqualsThreshold>
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	d0c1      	beq.n	8003c46 <AcqEvaluateTrigger+0x1e>
  if (g_internalTrigMode != MODE_TRIGGER_WITH_PRETRIG)
 8003cc2:	2902      	cmp	r1, #2
 8003cc4:	d109      	bne.n	8003cda <AcqEvaluateTrigger+0xb2>
    g_internalTrigState = INTERNAL_STATE_TRIGGED;
 8003cc6:	2304      	movs	r3, #4
    return TRIG_EVAL_EVENT;
 8003cc8:	2002      	movs	r0, #2
    g_internalTrigState = INTERNAL_STATE_TRIGGED;
 8003cca:	6033      	str	r3, [r6, #0]
}
 8003ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return TRIG_EVAL_PRE2_REC;
 8003cce:	2004      	movs	r0, #4
}
 8003cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return evaluateEnd();
 8003cd6:	f7ff bf4d 	b.w	8003b74 <evaluateEnd>
    g_pTriggerConf->state = SNP_TRC_TRIGGER_TRIGGED;
 8003cda:	2202      	movs	r2, #2
    g_internalTrigState = INTERNAL_STATE_TRIGGED;
 8003cdc:	2304      	movs	r3, #4
    return TRIG_EVAL_POST_REC;
 8003cde:	2001      	movs	r0, #1
    g_pTriggerConf->state = SNP_TRC_TRIGGER_TRIGGED;
 8003ce0:	61aa      	str	r2, [r5, #24]
    g_internalTrigState = INTERNAL_STATE_TRIGGED;
 8003ce2:	6033      	str	r3, [r6, #0]
}
 8003ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (valBelowThreshold())
 8003ce6:	f7ff fe39 	bl	800395c <valBelowThreshold>
 8003cea:	2800      	cmp	r0, #0
 8003cec:	d0d6      	beq.n	8003c9c <AcqEvaluateTrigger+0x74>
          g_internalTrigState = WAITING_LEVEL_AFTER;
 8003cee:	2301      	movs	r3, #1
  if (g_internalTrigMode != MODE_TRIGGER_WITH_PRETRIG)
 8003cf0:	6821      	ldr	r1, [r4, #0]
          g_internalTrigState = WAITING_LEVEL_AFTER;
 8003cf2:	6033      	str	r3, [r6, #0]
    if (g_internalTrigState == WAITING_LEVEL_AFTER)
 8003cf4:	e7db      	b.n	8003cae <AcqEvaluateTrigger+0x86>
        if (valBelowThreshold() || valEqualsThreshold())
 8003cf6:	f7ff fe31 	bl	800395c <valBelowThreshold>
 8003cfa:	2800      	cmp	r0, #0
 8003cfc:	d1e1      	bne.n	8003cc2 <AcqEvaluateTrigger+0x9a>
 8003cfe:	e7dc      	b.n	8003cba <AcqEvaluateTrigger+0x92>
        g_pTriggerConf->state = SNP_TRC_TRIGGER_STARTED;
 8003d00:	61a9      	str	r1, [r5, #24]
  if (g_pTriggerConf->state == SNP_TRC_TRIGGER_STARTED)
 8003d02:	69aa      	ldr	r2, [r5, #24]
        g_internalTrigState = WAITING_LEVEL_BEFORE;
 8003d04:	6033      	str	r3, [r6, #0]
  if (g_pTriggerConf->state == SNP_TRC_TRIGGER_STARTED)
 8003d06:	2a01      	cmp	r2, #1
 8003d08:	d19f      	bne.n	8003c4a <AcqEvaluateTrigger+0x22>
    if (g_pTriggerConf->cmd & SNP_TRC_TRIGGER_STOP)
 8003d0a:	692b      	ldr	r3, [r5, #16]
    if (g_internalTrigState == WAITING_LEVEL_BEFORE)
 8003d0c:	e7c0      	b.n	8003c90 <AcqEvaluateTrigger+0x68>
        return TRIG_EVAL_PRE1_REC;
 8003d0e:	2003      	movs	r0, #3
}
 8003d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d12:	bf00      	nop
 8003d14:	2400091c 	.word	0x2400091c
 8003d18:	24000920 	.word	0x24000920
 8003d1c:	24000930 	.word	0x24000930
 8003d20:	24000928 	.word	0x24000928
 8003d24:	24000914 	.word	0x24000914

08003d28 <HostReadEvent>:
  * @param  None
  * @retval None
  */
void HostReadEvent(void)
{
  if ((g_internalTrigState == INTERNAL_STATE_STOPPED) && (g_pTriggerConf->state == SNP_TRC_TRIGGER_TRIGGED)
 8003d28:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <HostReadEvent+0x20>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d000      	beq.n	8003d32 <HostReadEvent+0xa>
      && (g_pTriggerConf->cmd == 0))
  {
    /* Update the trigger state now that we are sure that the host has seen the TRIGGED state */
    g_pTriggerConf->state = SNP_TRC_TRIGGER_STOPPED;
  }
}
 8003d30:	4770      	bx	lr
  if ((g_internalTrigState == INTERNAL_STATE_STOPPED) && (g_pTriggerConf->state == SNP_TRC_TRIGGER_TRIGGED)
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HostReadEvent+0x24>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699a      	ldr	r2, [r3, #24]
 8003d38:	2a02      	cmp	r2, #2
 8003d3a:	d1f9      	bne.n	8003d30 <HostReadEvent+0x8>
      && (g_pTriggerConf->cmd == 0))
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	2a00      	cmp	r2, #0
 8003d40:	d1f6      	bne.n	8003d30 <HostReadEvent+0x8>
    g_pTriggerConf->state = SNP_TRC_TRIGGER_STOPPED;
 8003d42:	619a      	str	r2, [r3, #24]
}
 8003d44:	e7f4      	b.n	8003d30 <HostReadEvent+0x8>
 8003d46:	bf00      	nop
 8003d48:	24000920 	.word	0x24000920
 8003d4c:	24000930 	.word	0x24000930

08003d50 <readVar8bits>:
  * @retval Data in buffer
  */
TraceBufferField_t readVar8bits(uint32_t addr)
{
  return (TraceBufferField_t) * (_FAR_DATA_ uint8_t *)addr;
}
 8003d50:	7800      	ldrb	r0, [r0, #0]
 8003d52:	4770      	bx	lr

08003d54 <readVar16bits>:
  */
TraceBufferField_t readVar16bits(uint32_t addr)
{
  /* Caution: if TraceBufferField_t is 8 bits, there is a truncature here */
  return (TraceBufferField_t) * (_FAR_DATA_ int16_t *)addr;
}
 8003d54:	f9b0 0000 	ldrsh.w	r0, [r0]
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop

08003d5c <readVar32bits>:
  */
TraceBufferField_t readVar32bits(uint32_t addr)
{
  /* Caution: if TraceBufferField_t is 8 or 16 bits, there is a truncature here */
  return (TraceBufferField_t) * (_FAR_DATA_ uint32_t *)addr;
}
 8003d5c:	6800      	ldr	r0, [r0, #0]
 8003d5e:	4770      	bx	lr

08003d60 <IsBufferEmpty>:
  */

int32_t IsBufferEmpty(void)
{
  int32_t nextReadAddr;
  if (g_lastReadPointer + 2 * g_recordSize - 1 > g_traceHeader.bufferEndAddr)
 8003d60:	490b      	ldr	r1, [pc, #44]	; (8003d90 <IsBufferEmpty+0x30>)
 8003d62:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <IsBufferEmpty+0x34>)
 8003d64:	6809      	ldr	r1, [r1, #0]
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	4a0b      	ldr	r2, [pc, #44]	; (8003d98 <IsBufferEmpty+0x38>)
 8003d6a:	1e4b      	subs	r3, r1, #1
{
 8003d6c:	b410      	push	{r4}
  if (g_lastReadPointer + 2 * g_recordSize - 1 > g_traceHeader.bufferEndAddr)
 8003d6e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003d72:	68d4      	ldr	r4, [r2, #12]
 8003d74:	42a3      	cmp	r3, r4
 8003d76:	d908      	bls.n	8003d8a <IsBufferEmpty+0x2a>
  {
    /* There is a place for only 1 record after g_lastReadPointer; the next
     one makes the buffer loopback */
    nextReadAddr = g_traceHeader.bufferStartAddr;
 8003d78:	6890      	ldr	r0, [r2, #8]
  }
  else
  {
    nextReadAddr = g_lastReadPointer + g_recordSize;
  }
  if (nextReadAddr == g_traceHeader.writePointer)
 8003d7a:	69d3      	ldr	r3, [r2, #28]
  {
    /* This means the buffer is empty */
    return 1;
  }
  return 0;
}
 8003d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d80:	1ac0      	subs	r0, r0, r3
 8003d82:	fab0 f080 	clz	r0, r0
 8003d86:	0940      	lsrs	r0, r0, #5
 8003d88:	4770      	bx	lr
    nextReadAddr = g_lastReadPointer + g_recordSize;
 8003d8a:	4408      	add	r0, r1
 8003d8c:	e7f5      	b.n	8003d7a <IsBufferEmpty+0x1a>
 8003d8e:	bf00      	nop
 8003d90:	240011f0 	.word	0x240011f0
 8003d94:	240011f4 	.word	0x240011f4
 8003d98:	24000218 	.word	0x24000218

08003d9c <DumpTrace>:
  * @retval None
  */

/* */
void DumpTrace(void)
{
 8003d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifdef MEASURE_PERFORMANCE
  SetTraceGpio();
#endif /* MEASURE_PERFORMANCE */

  /* Get the trace header critical section contents once and for all */
  nbVar = g_traceHeader.nbVar & 0x0000FFFF;
 8003da0:	4ca4      	ldr	r4, [pc, #656]	; (8004034 <DumpTrace+0x298>)
{
 8003da2:	b085      	sub	sp, #20
  nbVar = g_traceHeader.nbVar & 0x0000FFFF;
 8003da4:	6b65      	ldr	r5, [r4, #52]	; 0x34
  nbDoubleVar = (g_traceHeader.nbVar & 0xFFFF0000) >> 16;
 8003da6:	6b67      	ldr	r7, [r4, #52]	; 0x34
  flags = g_traceHeader.flags;
  writePointer = g_traceHeader.writePointer;

  if (nbVar == 0)
 8003da8:	b2aa      	uxth	r2, r5
  flags = g_traceHeader.flags;
 8003daa:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
  writePointer = g_traceHeader.writePointer;
 8003dae:	f8d4 901c 	ldr.w	r9, [r4, #28]
  if (nbVar == 0)
 8003db2:	b93a      	cbnz	r2, 8003dc4 <DumpTrace+0x28>
  {
    /* Nothing to trace */
    if (bStarted == 1)
 8003db4:	4ba0      	ldr	r3, [pc, #640]	; (8004038 <DumpTrace+0x29c>)
 8003db6:	7819      	ldrb	r1, [r3, #0]
 8003db8:	2901      	cmp	r1, #1
 8003dba:	f000 80b8 	beq.w	8003f2e <DumpTrace+0x192>
    }
  }
#ifdef MEASURE_PERFORMANCE
  ResetTraceGpio();
#endif /* MEASURE_PERFORMANCE */
}
 8003dbe:	b005      	add	sp, #20
 8003dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    readPointer = g_traceHeader.readPointer;
 8003dc4:	6a66      	ldr	r6, [r4, #36]	; 0x24
    readPointerCopy = g_traceHeader.readPointerCopy;
 8003dc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      readPointer = g_lastReadPointer;
 8003dc8:	f8df b298 	ldr.w	fp, [pc, #664]	; 8004064 <DumpTrace+0x2c8>
    if (readPointer != readPointerCopy)
 8003dcc:	429e      	cmp	r6, r3
 8003dce:	f000 80f4 	beq.w	8003fba <DumpTrace+0x21e>
    if (bStarted == 0)
 8003dd2:	4999      	ldr	r1, [pc, #612]	; (8004038 <DumpTrace+0x29c>)
      readPointer = g_lastReadPointer;
 8003dd4:	f8db 6000 	ldr.w	r6, [fp]
    if (bStarted == 0)
 8003dd8:	7808      	ldrb	r0, [r1, #0]
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	f000 808a 	beq.w	8003ef4 <DumpTrace+0x158>
 8003de0:	4f96      	ldr	r7, [pc, #600]	; (800403c <DumpTrace+0x2a0>)
 8003de2:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8004068 <DumpTrace+0x2cc>
    if (bOverflow == 1)
 8003de6:	783b      	ldrb	r3, [r7, #0]
      if (writePointer != readPointer)
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d105      	bne.n	8003df8 <DumpTrace+0x5c>
 8003dec:	454e      	cmp	r6, r9
 8003dee:	d003      	beq.n	8003df8 <DumpTrace+0x5c>
        bOverflow = 0;
 8003df0:	2000      	movs	r0, #0
 8003df2:	7038      	strb	r0, [r7, #0]
        SetTriggerOverflow(0);
 8003df4:	f7ff fc68 	bl	80036c8 <SetTriggerOverflow>
    trigEval = AcqEvaluateTrigger();
 8003df8:	f7ff ff16 	bl	8003c28 <AcqEvaluateTrigger>
    if ((trigEval != TRIG_EVAL_NO_REC) && (trigEval != TRIG_EVAL_PRE1_REC))
 8003dfc:	4605      	mov	r5, r0
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	f000 809b 	beq.w	8003f3a <DumpTrace+0x19e>
 8003e04:	2803      	cmp	r0, #3
 8003e06:	f000 8098 	beq.w	8003f3a <DumpTrace+0x19e>
      g_subSamplingCount++;
 8003e0a:	4a8d      	ldr	r2, [pc, #564]	; (8004040 <DumpTrace+0x2a4>)
      if ((trigEval == TRIG_EVAL_EVENT) || ((trigEval == TRIG_EVAL_POST_REC) && (bHasTrigged == 0)))
 8003e0c:	2802      	cmp	r0, #2
 8003e0e:	498d      	ldr	r1, [pc, #564]	; (8004044 <DumpTrace+0x2a8>)
      g_subSamplingCount++;
 8003e10:	6813      	ldr	r3, [r2, #0]
 8003e12:	f103 0301 	add.w	r3, r3, #1
 8003e16:	6013      	str	r3, [r2, #0]
      if ((trigEval == TRIG_EVAL_EVENT) || ((trigEval == TRIG_EVAL_POST_REC) && (bHasTrigged == 0)))
 8003e18:	f000 80c1 	beq.w	8003f9e <DumpTrace+0x202>
 8003e1c:	2801      	cmp	r0, #1
 8003e1e:	f000 80ba 	beq.w	8003f96 <DumpTrace+0x1fa>
      bHasTrigged = 1;
 8003e22:	2001      	movs	r0, #1
 8003e24:	7008      	strb	r0, [r1, #0]
      if (g_subSamplingCount >= g_traceHeader.subSamplingRate)
 8003e26:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003e28:	428b      	cmp	r3, r1
 8003e2a:	f0c0 80c2 	bcc.w	8003fb2 <DumpTrace+0x216>
        g_subSamplingCount = 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	6013      	str	r3, [r2, #0]
        if (bOverflow == 0)
 8003e32:	783b      	ldrb	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f040 80ba 	bne.w	8003fae <DumpTrace+0x212>
          if (writePointer == readPointer)
 8003e3a:	454e      	cmp	r6, r9
 8003e3c:	f000 8162 	beq.w	8004104 <DumpTrace+0x368>
            if (trigEval != TRIG_EVAL_PRE2_REC)
 8003e40:	2d04      	cmp	r5, #4
 8003e42:	d001      	beq.n	8003e48 <DumpTrace+0xac>
              AddingNewRecord();
 8003e44:	f7ff fc6a 	bl	800371c <AddingNewRecord>
            recordLastAddr = (TraceHeaderField_t)pWrite + g_recordSize - 1;
 8003e48:	4f7f      	ldr	r7, [pc, #508]	; (8004048 <DumpTrace+0x2ac>)
 8003e4a:	4a80      	ldr	r2, [pc, #512]	; (800404c <DumpTrace+0x2b0>)
 8003e4c:	6838      	ldr	r0, [r7, #0]
            *pWrite = g_timestamp;
 8003e4e:	f8d8 1000 	ldr.w	r1, [r8]
 8003e52:	4606      	mov	r6, r0
            recordLastAddr = (TraceHeaderField_t)pWrite + g_recordSize - 1;
 8003e54:	6813      	ldr	r3, [r2, #0]
            *pWrite = g_timestamp;
 8003e56:	f846 1b04 	str.w	r1, [r6], #4
            recordLastAddr = (TraceHeaderField_t)pWrite + g_recordSize - 1;
 8003e5a:	18c1      	adds	r1, r0, r3
            pWrite++;
 8003e5c:	603e      	str	r6, [r7, #0]
            recordLastAddr = (TraceHeaderField_t)pWrite + g_recordSize - 1;
 8003e5e:	f101 39ff 	add.w	r9, r1, #4294967295
 8003e62:	9101      	str	r1, [sp, #4]
            while ((TraceHeaderField_t)pWrite <= recordLastAddr)
 8003e64:	454e      	cmp	r6, r9
 8003e66:	d824      	bhi.n	8003eb2 <DumpTrace+0x116>
 8003e68:	9503      	str	r5, [sp, #12]
            varIdx = 0;
 8003e6a:	f04f 0b00 	mov.w	fp, #0
 8003e6e:	464d      	mov	r5, r9
 8003e70:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 800406c <DumpTrace+0x2d0>
 8003e74:	46b9      	mov	r9, r7
 8003e76:	4617      	mov	r7, r2
              uint32_t tmpAddr = g_traceHeader.g_varList[varIdx].address;
 8003e78:	f10b 0307 	add.w	r3, fp, #7
 8003e7c:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8003e80:	6849      	ldr	r1, [r1, #4]
              varAccessType = g_traceHeader.g_varList[varIdx].accessType;
 8003e82:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
              *pWrite = g_readFunc[varAccessType](tmpAddr);
 8003e86:	4608      	mov	r0, r1
              if (varAccessType == SNP_TRC_DATA_ACCESS_64BIT)
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	f000 80f1 	beq.w	8004070 <DumpTrace+0x2d4>
              *pWrite = g_readFunc[varAccessType](tmpAddr);
 8003e8e:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
              varIdx++;
 8003e92:	f10b 0b01 	add.w	fp, fp, #1
              *pWrite = g_readFunc[varAccessType](tmpAddr);
 8003e96:	4798      	blx	r3
 8003e98:	6030      	str	r0, [r6, #0]
              pWrite++;
 8003e9a:	f8d9 6000 	ldr.w	r6, [r9]
 8003e9e:	3604      	adds	r6, #4
            while ((TraceHeaderField_t)pWrite <= recordLastAddr)
 8003ea0:	42ae      	cmp	r6, r5
              pWrite++;
 8003ea2:	f8c9 6000 	str.w	r6, [r9]
            while ((TraceHeaderField_t)pWrite <= recordLastAddr)
 8003ea6:	d9e7      	bls.n	8003e78 <DumpTrace+0xdc>
 8003ea8:	463a      	mov	r2, r7
 8003eaa:	464f      	mov	r7, r9
 8003eac:	46a9      	mov	r9, r5
 8003eae:	9d03      	ldr	r5, [sp, #12]
            if (recordLastAddr + g_recordSize - 1 > g_traceHeader.bufferEndAddr)
 8003eb0:	6813      	ldr	r3, [r2, #0]
 8003eb2:	4499      	add	r9, r3
 8003eb4:	68e3      	ldr	r3, [r4, #12]
 8003eb6:	4599      	cmp	r9, r3
 8003eb8:	d903      	bls.n	8003ec2 <DumpTrace+0x126>
              recordLastAddr = g_traceHeader.bufferStartAddr;
 8003eba:	68a3      	ldr	r3, [r4, #8]
 8003ebc:	9301      	str	r3, [sp, #4]
              pWrite = (TraceHeaderField_t *)g_traceHeader.bufferStartAddr;
 8003ebe:	68a3      	ldr	r3, [r4, #8]
 8003ec0:	603b      	str	r3, [r7, #0]
      if (trigEval == TRIG_EVAL_EVENT)
 8003ec2:	2d02      	cmp	r5, #2
 8003ec4:	f000 8089 	beq.w	8003fda <DumpTrace+0x23e>
      if (trigEval == TRIG_EVAL_PRE2_REC)
 8003ec8:	2d04      	cmp	r5, #4
 8003eca:	f000 810e 	beq.w	80040ea <DumpTrace+0x34e>
        if (recordLastAddr != (TraceHeaderField_t)(-1))
 8003ece:	9b01      	ldr	r3, [sp, #4]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	f040 80a4 	bne.w	800401e <DumpTrace+0x282>
    g_timestamp++;
 8003ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8003eda:	3301      	adds	r3, #1
 8003edc:	f8c8 3000 	str.w	r3, [r8]
    if (g_timestamp == 0)
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f47f af6c 	bne.w	8003dbe <DumpTrace+0x22>
      g_timestampOverflow++;
 8003ee6:	4a5a      	ldr	r2, [pc, #360]	; (8004050 <DumpTrace+0x2b4>)
 8003ee8:	6813      	ldr	r3, [r2, #0]
 8003eea:	3301      	adds	r3, #1
 8003eec:	6013      	str	r3, [r2, #0]
}
 8003eee:	b005      	add	sp, #20
 8003ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      g_recordSize = (1 + nbVar + nbDoubleVar) * sizeof(TraceBufferField_t); /* SNP_TRC_BUFFER_FORMAT==1 contains a
 8003ef4:	b2ab      	uxth	r3, r5
      nbRecords = SNP_TRC_BUFFER_SIZE * sizeof(TraceBufferField_t) / g_recordSize;
 8003ef6:	f640 0598 	movw	r5, #2200	; 0x898
      g_recordSize = (1 + nbVar + nbDoubleVar) * sizeof(TraceBufferField_t); /* SNP_TRC_BUFFER_FORMAT==1 contains a
 8003efa:	4a54      	ldr	r2, [pc, #336]	; (800404c <DumpTrace+0x2b0>)
 8003efc:	3301      	adds	r3, #1
      writePointer = (TraceHeaderField_t)&g_dataTraceBuffer;
 8003efe:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8004060 <DumpTrace+0x2c4>
      g_recordSize = (1 + nbVar + nbDoubleVar) * sizeof(TraceBufferField_t); /* SNP_TRC_BUFFER_FORMAT==1 contains a
 8003f02:	eb03 4317 	add.w	r3, r3, r7, lsr #16
      pWrite = (TraceHeaderField_t *)writePointer;
 8003f06:	4f50      	ldr	r7, [pc, #320]	; (8004048 <DumpTrace+0x2ac>)
      g_recordSize = (1 + nbVar + nbDoubleVar) * sizeof(TraceBufferField_t); /* SNP_TRC_BUFFER_FORMAT==1 contains a
 8003f08:	009b      	lsls	r3, r3, #2
      pWrite = (TraceHeaderField_t *)writePointer;
 8003f0a:	f8c7 9000 	str.w	r9, [r7]
      nbRecords = SNP_TRC_BUFFER_SIZE * sizeof(TraceBufferField_t) / g_recordSize;
 8003f0e:	fbb5 f5f3 	udiv	r5, r5, r3
      g_recordSize = (1 + nbVar + nbDoubleVar) * sizeof(TraceBufferField_t); /* SNP_TRC_BUFFER_FORMAT==1 contains a
 8003f12:	6013      	str	r3, [r2, #0]
      nbRecords = SNP_TRC_BUFFER_SIZE * sizeof(TraceBufferField_t) / g_recordSize;
 8003f14:	4a4f      	ldr	r2, [pc, #316]	; (8004054 <DumpTrace+0x2b8>)
 8003f16:	6015      	str	r5, [r2, #0]
      expectedInitialReadPointer = writePointer + (nbRecords - 1) * g_recordSize;
 8003f18:	3d01      	subs	r5, #1
 8003f1a:	fb03 9305 	mla	r3, r3, r5, r9
      if (expectedInitialReadPointer == readPointer)
 8003f1e:	429e      	cmp	r6, r3
 8003f20:	d019      	beq.n	8003f56 <DumpTrace+0x1ba>
        flags |= SNP_TRC_RECORD_SKIPPED;
 8003f22:	f04a 0304 	orr.w	r3, sl, #4
        g_traceHeader.flags = flags;
 8003f26:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8003f28:	b005      	add	sp, #20
 8003f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      g_traceHeader.flags = flags;
 8003f2e:	2102      	movs	r1, #2
      bStarted = 0;
 8003f30:	701a      	strb	r2, [r3, #0]
      g_traceHeader.flags = flags;
 8003f32:	62e1      	str	r1, [r4, #44]	; 0x2c
}
 8003f34:	b005      	add	sp, #20
 8003f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((trigEval == TRIG_EVAL_NO_REC) && (bHasTrigged != 0))
 8003f3a:	2d00      	cmp	r5, #0
 8003f3c:	d1cb      	bne.n	8003ed6 <DumpTrace+0x13a>
 8003f3e:	4b41      	ldr	r3, [pc, #260]	; (8004044 <DumpTrace+0x2a8>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0c7      	beq.n	8003ed6 <DumpTrace+0x13a>
        if (g_traceHeader.trigger.mode & SNP_TRC_TRIGGER_RST_TIMESTAMP)
 8003f46:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f4a:	061b      	lsls	r3, r3, #24
 8003f4c:	d5c3      	bpl.n	8003ed6 <DumpTrace+0x13a>
    g_timestamp++;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f8c8 3000 	str.w	r3, [r8]
    if (g_timestamp == 0)
 8003f54:	e733      	b.n	8003dbe <DumpTrace+0x22>
        bStarted = 1;
 8003f56:	2301      	movs	r3, #1
        bOverflow = 0;
 8003f58:	4f38      	ldr	r7, [pc, #224]	; (800403c <DumpTrace+0x2a0>)
        g_timestamp = 0;
 8003f5a:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8004068 <DumpTrace+0x2cc>
        flags |= SNP_TRC_START_STOP_ACK;
 8003f5e:	f04a 0a02 	orr.w	sl, sl, #2
        bStarted = 1;
 8003f62:	700b      	strb	r3, [r1, #0]
        g_timestampOverflow = 0;
 8003f64:	4b3a      	ldr	r3, [pc, #232]	; (8004050 <DumpTrace+0x2b4>)
        bHasTrigged = 0;
 8003f66:	4937      	ldr	r1, [pc, #220]	; (8004044 <DumpTrace+0x2a8>)
        g_timestampOverflow = 0;
 8003f68:	6018      	str	r0, [r3, #0]
        g_subSamplingCount = 0;
 8003f6a:	4b35      	ldr	r3, [pc, #212]	; (8004040 <DumpTrace+0x2a4>)
        bHasTrigged = 0;
 8003f6c:	7008      	strb	r0, [r1, #0]
        g_subSamplingCount = 0;
 8003f6e:	6018      	str	r0, [r3, #0]
        bPreTrigBufOvf = 0;
 8003f70:	4b39      	ldr	r3, [pc, #228]	; (8004058 <DumpTrace+0x2bc>)
        bOverflow = 0;
 8003f72:	7038      	strb	r0, [r7, #0]
        bPreTrigBufOvf = 0;
 8003f74:	7018      	strb	r0, [r3, #0]
        g_timestamp = 0;
 8003f76:	f8c8 0000 	str.w	r0, [r8]
        SetTriggerOverflow(0);
 8003f7a:	f7ff fba5 	bl	80036c8 <SetTriggerOverflow>
        AcqConfigureTrigger(&(g_traceHeader.trigger));
 8003f7e:	4837      	ldr	r0, [pc, #220]	; (800405c <DumpTrace+0x2c0>)
        g_traceHeader.writePointer = writePointer;
 8003f80:	f8c4 901c 	str.w	r9, [r4, #28]
        g_lastReadPointer = expectedInitialReadPointer;
 8003f84:	f8cb 6000 	str.w	r6, [fp]
        g_traceHeader.writePointerCopy = writePointer;
 8003f88:	f8c4 9020 	str.w	r9, [r4, #32]
        AcqConfigureTrigger(&(g_traceHeader.trigger));
 8003f8c:	f7ff fbce 	bl	800372c <AcqConfigureTrigger>
        g_traceHeader.flags = flags;
 8003f90:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
 8003f94:	e727      	b.n	8003de6 <DumpTrace+0x4a>
      if ((trigEval == TRIG_EVAL_EVENT) || ((trigEval == TRIG_EVAL_POST_REC) && (bHasTrigged == 0)))
 8003f96:	7808      	ldrb	r0, [r1, #0]
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	f47f af42 	bne.w	8003e22 <DumpTrace+0x86>
      bHasTrigged = 1;
 8003f9e:	2001      	movs	r0, #1
        g_subSamplingCount = g_traceHeader.subSamplingRate;
 8003fa0:	6b23      	ldr	r3, [r4, #48]	; 0x30
      bHasTrigged = 1;
 8003fa2:	7008      	strb	r0, [r1, #0]
      if (g_subSamplingCount >= g_traceHeader.subSamplingRate)
 8003fa4:	6b21      	ldr	r1, [r4, #48]	; 0x30
        g_subSamplingCount = g_traceHeader.subSamplingRate;
 8003fa6:	6013      	str	r3, [r2, #0]
      if (g_subSamplingCount >= g_traceHeader.subSamplingRate)
 8003fa8:	428b      	cmp	r3, r1
 8003faa:	f4bf af40 	bcs.w	8003e2e <DumpTrace+0x92>
      if (trigEval == TRIG_EVAL_EVENT)
 8003fae:	2d02      	cmp	r5, #2
 8003fb0:	d00e      	beq.n	8003fd0 <DumpTrace+0x234>
      if (trigEval == TRIG_EVAL_PRE2_REC)
 8003fb2:	2d04      	cmp	r5, #4
 8003fb4:	d18f      	bne.n	8003ed6 <DumpTrace+0x13a>
        if (((TraceBufferField_t)pWrite == g_traceHeader.writePointer) && (recordLastAddr != (TraceHeaderField_t)(-1)))
 8003fb6:	69e3      	ldr	r3, [r4, #28]
 8003fb8:	e78d      	b.n	8003ed6 <DumpTrace+0x13a>
      if ((g_lastReadPointer != readPointer) && (bStarted == 1))
 8003fba:	f8db 3000 	ldr.w	r3, [fp]
 8003fbe:	491e      	ldr	r1, [pc, #120]	; (8004038 <DumpTrace+0x29c>)
 8003fc0:	42b3      	cmp	r3, r6
 8003fc2:	7808      	ldrb	r0, [r1, #0]
 8003fc4:	d001      	beq.n	8003fca <DumpTrace+0x22e>
 8003fc6:	2801      	cmp	r0, #1
 8003fc8:	d077      	beq.n	80040ba <DumpTrace+0x31e>
      g_lastReadPointer = readPointer;
 8003fca:	f8cb 6000 	str.w	r6, [fp]
 8003fce:	e704      	b.n	8003dda <DumpTrace+0x3e>
  TraceHeaderField_t recordLastAddr = (TraceHeaderField_t)(-1); /* Init value used as signal of new record */
 8003fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd4:	4a1d      	ldr	r2, [pc, #116]	; (800404c <DumpTrace+0x2b0>)
 8003fd6:	4f1c      	ldr	r7, [pc, #112]	; (8004048 <DumpTrace+0x2ac>)
 8003fd8:	9301      	str	r3, [sp, #4]
        if (bPreTrigBufOvf == 1)
 8003fda:	481f      	ldr	r0, [pc, #124]	; (8004058 <DumpTrace+0x2bc>)
          if ((TraceBufferField_t)pWrite > g_traceHeader.writePointer)
 8003fdc:	6839      	ldr	r1, [r7, #0]
        if (bPreTrigBufOvf == 1)
 8003fde:	7803      	ldrb	r3, [r0, #0]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d070      	beq.n	80040c6 <DumpTrace+0x32a>
          if ((TraceBufferField_t)pWrite > g_traceHeader.writePointer)
 8003fe4:	69e3      	ldr	r3, [r4, #28]
            nbPreTrigRecords = ((TraceBufferField_t)pWrite - g_traceHeader.writePointer) / g_recordSize - 1;
 8003fe6:	6816      	ldr	r6, [r2, #0]
          if ((TraceBufferField_t)pWrite > g_traceHeader.writePointer)
 8003fe8:	428b      	cmp	r3, r1
            nbPreTrigRecords = ((TraceBufferField_t)pWrite - g_traceHeader.writePointer) / g_recordSize - 1;
 8003fea:	69e3      	ldr	r3, [r4, #28]
          if ((TraceBufferField_t)pWrite > g_traceHeader.writePointer)
 8003fec:	d272      	bcs.n	80040d4 <DumpTrace+0x338>
            nbPreTrigRecords = ((TraceBufferField_t)pWrite - g_traceHeader.writePointer) / g_recordSize - 1;
 8003fee:	1acb      	subs	r3, r1, r3
 8003ff0:	fbb3 f3f6 	udiv	r3, r3, r6
 8003ff4:	3b01      	subs	r3, #1
        if (nbPreTrigRecords > g_traceHeader.trigger.nPreTrig)
 8003ff6:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d201      	bcs.n	8004002 <DumpTrace+0x266>
          nbPreTrigRecords = g_traceHeader.trigger.nPreTrig;
 8003ffe:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
        if ((TraceBufferField_t)pWrite >= (TraceHeaderField_t)&g_dataTraceBuffer + (nbPreTrigRecords + 2)*g_recordSize)
 8004002:	1c9f      	adds	r7, r3, #2
 8004004:	4a16      	ldr	r2, [pc, #88]	; (8004060 <DumpTrace+0x2c4>)
 8004006:	fb06 f007 	mul.w	r0, r6, r7
 800400a:	4402      	add	r2, r0
 800400c:	428a      	cmp	r2, r1
 800400e:	d84a      	bhi.n	80040a6 <DumpTrace+0x30a>
          g_traceHeader.readPointer = (TraceBufferField_t)pWrite - (nbPreTrigRecords + 2) * g_recordSize;
 8004010:	1a09      	subs	r1, r1, r0
 8004012:	6261      	str	r1, [r4, #36]	; 0x24
        g_traceHeader.readPointerCopy = g_traceHeader.readPointer;
 8004014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004016:	62a3      	str	r3, [r4, #40]	; 0x28
        if (recordLastAddr != (TraceHeaderField_t)(-1))
 8004018:	9b01      	ldr	r3, [sp, #4]
 800401a:	3301      	adds	r3, #1
 800401c:	d005      	beq.n	800402a <DumpTrace+0x28e>
          g_traceHeader.writePointer = recordLastAddr;
 800401e:	9b01      	ldr	r3, [sp, #4]
        if (trigEval == TRIG_EVAL_EVENT)
 8004020:	2d02      	cmp	r5, #2
          g_traceHeader.writePointer = recordLastAddr;
 8004022:	61e3      	str	r3, [r4, #28]
          g_traceHeader.writePointerCopy = recordLastAddr;
 8004024:	6223      	str	r3, [r4, #32]
        if (trigEval == TRIG_EVAL_EVENT)
 8004026:	f47f af56 	bne.w	8003ed6 <DumpTrace+0x13a>
          g_traceHeader.trigger.state = SNP_TRC_TRIGGER_TRIGGED;
 800402a:	2302      	movs	r3, #2
 800402c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8004030:	e751      	b.n	8003ed6 <DumpTrace+0x13a>
 8004032:	bf00      	nop
 8004034:	24000218 	.word	0x24000218
 8004038:	24000954 	.word	0x24000954
 800403c:	24000952 	.word	0x24000952
 8004040:	240011f8 	.word	0x240011f8
 8004044:	24000951 	.word	0x24000951
 8004048:	24001208 	.word	0x24001208
 800404c:	240011f4 	.word	0x240011f4
 8004050:	24001200 	.word	0x24001200
 8004054:	24001204 	.word	0x24001204
 8004058:	24000953 	.word	0x24000953
 800405c:	240002a0 	.word	0x240002a0
 8004060:	24000958 	.word	0x24000958
 8004064:	240011f0 	.word	0x240011f0
 8004068:	240011fc 	.word	0x240011fc
 800406c:	2400020c 	.word	0x2400020c
                *pWrite = g_readFunc[varAccessType](tmpAddr);
 8004070:	f8da 3008 	ldr.w	r3, [sl, #8]
              varIdx++;
 8004074:	f10b 0b01 	add.w	fp, fp, #1
                *pWrite = g_readFunc[varAccessType](tmpAddr);
 8004078:	9102      	str	r1, [sp, #8]
 800407a:	4798      	blx	r3
              *pWrite = g_readFunc[varAccessType](tmpAddr);
 800407c:	9902      	ldr	r1, [sp, #8]
                *pWrite = g_readFunc[varAccessType](tmpAddr);
 800407e:	6030      	str	r0, [r6, #0]
                pWrite++;
 8004080:	f8d9 6000 	ldr.w	r6, [r9]
              *pWrite = g_readFunc[varAccessType](tmpAddr);
 8004084:	1d08      	adds	r0, r1, #4
 8004086:	f8da 3008 	ldr.w	r3, [sl, #8]
                pWrite++;
 800408a:	1d31      	adds	r1, r6, #4
 800408c:	f8c9 1000 	str.w	r1, [r9]
              *pWrite = g_readFunc[varAccessType](tmpAddr);
 8004090:	4798      	blx	r3
 8004092:	6070      	str	r0, [r6, #4]
              pWrite++;
 8004094:	f8d9 6000 	ldr.w	r6, [r9]
 8004098:	3604      	adds	r6, #4
            while ((TraceHeaderField_t)pWrite <= recordLastAddr)
 800409a:	42ae      	cmp	r6, r5
              pWrite++;
 800409c:	f8c9 6000 	str.w	r6, [r9]
            while ((TraceHeaderField_t)pWrite <= recordLastAddr)
 80040a0:	f67f aeea 	bls.w	8003e78 <DumpTrace+0xdc>
 80040a4:	e700      	b.n	8003ea8 <DumpTrace+0x10c>
          if (nbRecords > nbPreTrigRecords + 2)
 80040a6:	4a1b      	ldr	r2, [pc, #108]	; (8004114 <DumpTrace+0x378>)
 80040a8:	6812      	ldr	r2, [r2, #0]
 80040aa:	4297      	cmp	r7, r2
 80040ac:	d21a      	bcs.n	80040e4 <DumpTrace+0x348>
            g_traceHeader.readPointer = (TraceBufferField_t)pWrite + (nbRecords - nbPreTrigRecords - 2) * g_recordSize;
 80040ae:	3a02      	subs	r2, #2
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	fb06 1103 	mla	r1, r6, r3, r1
 80040b6:	6261      	str	r1, [r4, #36]	; 0x24
 80040b8:	e7ac      	b.n	8004014 <DumpTrace+0x278>
 80040ba:	9101      	str	r1, [sp, #4]
        HostReadEvent();
 80040bc:	f7ff fe34 	bl	8003d28 <HostReadEvent>
    if (bStarted == 0)
 80040c0:	9901      	ldr	r1, [sp, #4]
 80040c2:	7808      	ldrb	r0, [r1, #0]
 80040c4:	e781      	b.n	8003fca <DumpTrace+0x22e>
          nbPreTrigRecords = nbRecords - 1; /* -1 for trig event */
 80040c6:	4b13      	ldr	r3, [pc, #76]	; (8004114 <DumpTrace+0x378>)
            nbPreTrigRecords = ((TraceBufferField_t)pWrite - g_traceHeader.writePointer) / g_recordSize - 1;
 80040c8:	6816      	ldr	r6, [r2, #0]
          bPreTrigBufOvf = 0;
 80040ca:	2200      	movs	r2, #0
          nbPreTrigRecords = nbRecords - 1; /* -1 for trig event */
 80040cc:	681b      	ldr	r3, [r3, #0]
          bPreTrigBufOvf = 0;
 80040ce:	7002      	strb	r2, [r0, #0]
          nbPreTrigRecords = nbRecords - 1; /* -1 for trig event */
 80040d0:	3b01      	subs	r3, #1
          bPreTrigBufOvf = 0;
 80040d2:	e790      	b.n	8003ff6 <DumpTrace+0x25a>
            nbPreTrigRecords = nbRecords - (g_traceHeader.writePointer - (TraceBufferField_t)pWrite) / g_recordSize - 1;
 80040d4:	1a5b      	subs	r3, r3, r1
 80040d6:	fbb3 f2f6 	udiv	r2, r3, r6
 80040da:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <DumpTrace+0x378>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3b01      	subs	r3, #1
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	e788      	b.n	8003ff6 <DumpTrace+0x25a>
            g_traceHeader.readPointer = (TraceBufferField_t)pWrite + g_recordSize;
 80040e4:	4431      	add	r1, r6
 80040e6:	6261      	str	r1, [r4, #36]	; 0x24
 80040e8:	e794      	b.n	8004014 <DumpTrace+0x278>
        if (((TraceBufferField_t)pWrite == g_traceHeader.writePointer) && (recordLastAddr != (TraceHeaderField_t)(-1)))
 80040ea:	69e3      	ldr	r3, [r4, #28]
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	f47f aef1 	bne.w	8003ed6 <DumpTrace+0x13a>
 80040f4:	9b01      	ldr	r3, [sp, #4]
 80040f6:	3301      	adds	r3, #1
 80040f8:	f43f aeed 	beq.w	8003ed6 <DumpTrace+0x13a>
          bPreTrigBufOvf = 1;
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <DumpTrace+0x37c>)
 80040fe:	2201      	movs	r2, #1
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	e6e8      	b.n	8003ed6 <DumpTrace+0x13a>
            flags |= SNP_TRC_FLAG_OVERFLOW;
 8004104:	f04a 0301 	orr.w	r3, sl, #1
            bOverflow = 1; /* For internal processing of the overflow */
 8004108:	2001      	movs	r0, #1
            g_traceHeader.flags = flags;
 800410a:	62e3      	str	r3, [r4, #44]	; 0x2c
            bOverflow = 1; /* For internal processing of the overflow */
 800410c:	7038      	strb	r0, [r7, #0]
            SetTriggerOverflow(1);
 800410e:	f7ff fadb 	bl	80036c8 <SetTriggerOverflow>
 8004112:	e74c      	b.n	8003fae <DumpTrace+0x212>
 8004114:	24001204 	.word	0x24001204
 8004118:	24000953 	.word	0x24000953

0800411c <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non blocking mode
 * @param  AdcHandle : ADC handle

 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 800411c:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800411e:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8004120:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004124:	490a      	ldr	r1, [pc, #40]	; (8004150 <HAL_ADC_ConvCpltCallback+0x34>)
 8004126:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800412a:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800412e:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8004130:	4293      	cmp	r3, r2
 8004132:	d1fa      	bne.n	800412a <HAL_ADC_ConvCpltCallback+0xe>
 8004134:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004138:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[BSIZE/2], 2*BSIZE);
#endif
	ADC_Stream0_Handler(1);
 800413c:	2001      	movs	r0, #1
 800413e:	f7fd fa85 	bl	800164c <ADC_Stream0_Handler>
	/* Set variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = SET;
 8004142:	4b04      	ldr	r3, [pc, #16]	; (8004154 <HAL_ADC_ConvCpltCallback+0x38>)
 8004144:	2201      	movs	r2, #1
 8004146:	701a      	strb	r2, [r3, #0]
}
 8004148:	bd08      	pop	{r3, pc}
 800414a:	bf00      	nop
 800414c:	24009240 	.word	0x24009240
 8004150:	e000ed00 	.word	0xe000ed00
 8004154:	2400d3ea 	.word	0x2400d3ea

08004158 <HAL_ADC_ConvHalfCpltCallback>:
 * @brief  Conversion DMA half-transfer callback in non blocking mode
 * @param  hadc: ADC handle
 * */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004158:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800415a:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 800415c:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004160:	490a      	ldr	r1, [pc, #40]	; (800418c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8004162:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8004166:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800416a:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 800416c:	4293      	cmp	r3, r2
 800416e:	d1fa      	bne.n	8004166 <HAL_ADC_ConvHalfCpltCallback+0xe>
 8004170:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004174:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[0], 2*BSIZE);
#endif
	ADC_Stream0_Handler(0);
 8004178:	2000      	movs	r0, #0
 800417a:	f7fd fa67 	bl	800164c <ADC_Stream0_Handler>
	/* Reset variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = RESET;
 800417e:	4b04      	ldr	r3, [pc, #16]	; (8004190 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]
}
 8004184:	bd08      	pop	{r3, pc}
 8004186:	bf00      	nop
 8004188:	24008e40 	.word	0x24008e40
 800418c:	e000ed00 	.word	0xe000ed00
 8004190:	2400d3ea 	.word	0x2400d3ea

08004194 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004194:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[BSIZE];
 8004196:	4b05      	ldr	r3, [pc, #20]	; (80041ac <HAL_DAC_ConvCpltCallbackCh1+0x18>)
	LED_RED_ON;
 8004198:	2201      	movs	r2, #1
	ValidAudioHalf = &AudioOut[BSIZE];
 800419a:	4c05      	ldr	r4, [pc, #20]	; (80041b0 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
	LED_RED_ON;
 800419c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041a0:	4804      	ldr	r0, [pc, #16]	; (80041b4 <HAL_DAC_ConvCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[BSIZE];
 80041a2:	601c      	str	r4, [r3, #0]

	//	 __HAL_RCC_PLL2_DISABLE();
	//	__HAL_RCC_PLL2_CONFIG(4, 240, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();

}
 80041a4:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_ON;
 80041a8:	f005 b9b2 	b.w	8009510 <HAL_GPIO_WritePin>
 80041ac:	24008e14 	.word	0x24008e14
 80041b0:	24002620 	.word	0x24002620
 80041b4:	58020400 	.word	0x58020400

080041b8 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80041b8:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[0];
 80041ba:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
	LED_RED_OFF;
 80041bc:	2200      	movs	r2, #0
	ValidAudioHalf = &AudioOut[0];
 80041be:	4c05      	ldr	r4, [pc, #20]	; (80041d4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
	LED_RED_OFF;
 80041c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041c4:	4804      	ldr	r0, [pc, #16]	; (80041d8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[0];
 80041c6:	601c      	str	r4, [r3, #0]
	//	 __HAL_RCC_PLL2_DISABLE();
	//	 __HAL_RCC_PLL2_CONFIG(4, 120, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();
}
 80041c8:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_OFF;
 80041cc:	f005 b9a0 	b.w	8009510 <HAL_GPIO_WritePin>
 80041d0:	24008e14 	.word	0x24008e14
 80041d4:	24002220 	.word	0x24002220
 80041d8:	58020400 	.word	0x58020400

080041dc <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
	OVFDetected = OVF_TIMEOUT;
	/* Reset register IER */
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80041dc:	4907      	ldr	r1, [pc, #28]	; (80041fc <HAL_ADC_LevelOutOfWindowCallback+0x20>)
	OVFDetected = OVF_TIMEOUT;
 80041de:	2002      	movs	r0, #2
 80041e0:	4b07      	ldr	r3, [pc, #28]	; (8004200 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80041e2:	6809      	ldr	r1, [r1, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80041e4:	4a07      	ldr	r2, [pc, #28]	; (8004204 <HAL_ADC_LevelOutOfWindowCallback+0x28>)
	OVFDetected = OVF_TIMEOUT;
 80041e6:	8018      	strh	r0, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80041e8:	684b      	ldr	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80041ea:	6812      	ldr	r2, [r2, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80041ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f0:	604b      	str	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80041f2:	6853      	ldr	r3, [r2, #4]
 80041f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f8:	6053      	str	r3, [r2, #4]
}
 80041fa:	4770      	bx	lr
 80041fc:	2400be5c 	.word	0x2400be5c
 8004200:	24007c8e 	.word	0x24007c8e
 8004204:	2400bec0 	.word	0x2400bec0

08004208 <DisplayStatus>:
	static char StringAGC[8];
	static char StringStep[8];
	static char StringTxPower[8];


	switch(Fstep)
 8004208:	4b74      	ldr	r3, [pc, #464]	; (80043dc <DisplayStatus+0x1d4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
{
 8004210:	b570      	push	{r4, r5, r6, lr}
 8004212:	b08a      	sub	sp, #40	; 0x28
	switch(Fstep)
 8004214:	f000 80d8 	beq.w	80043c8 <DisplayStatus+0x1c0>
 8004218:	d81f      	bhi.n	800425a <DisplayStatus+0x52>
 800421a:	2b0a      	cmp	r3, #10
 800421c:	f000 80c6 	beq.w	80043ac <DisplayStatus+0x1a4>
 8004220:	2b64      	cmp	r3, #100	; 0x64
 8004222:	d110      	bne.n	8004246 <DisplayStatus+0x3e>
	{
	case 1:			strcpy(StringStep,"   1 "); break;
	case 10: 		strcpy(StringStep,"  10 "); break;
	case 100: 		strcpy(StringStep," 100 "); break;
 8004224:	4b6e      	ldr	r3, [pc, #440]	; (80043e0 <DisplayStatus+0x1d8>)
 8004226:	4a6f      	ldr	r2, [pc, #444]	; (80043e4 <DisplayStatus+0x1dc>)
 8004228:	e893 0003 	ldmia.w	r3, {r0, r1}
 800422c:	6010      	str	r0, [r2, #0]
 800422e:	8091      	strh	r1, [r2, #4]
	case 9000: 		strcpy(StringStep,"   9K"); break;
	case 10000:		strcpy(StringStep,"  10K"); break;
	case 100000: 	strcpy(StringStep," 100K"); break;
	}

	switch(CurrentMode)
 8004230:	4b6d      	ldr	r3, [pc, #436]	; (80043e8 <DisplayStatus+0x1e0>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b03      	cmp	r3, #3
 8004236:	f200 80ce 	bhi.w	80043d6 <DisplayStatus+0x1ce>
 800423a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800423e:	00ab      	.short	0x00ab
 8004240:	008500a7 	.word	0x008500a7
 8004244:	0029      	.short	0x0029
	switch(Fstep)
 8004246:	2b01      	cmp	r3, #1
 8004248:	f040 80aa 	bne.w	80043a0 <DisplayStatus+0x198>
	case 1:			strcpy(StringStep,"   1 "); break;
 800424c:	4b67      	ldr	r3, [pc, #412]	; (80043ec <DisplayStatus+0x1e4>)
 800424e:	4a65      	ldr	r2, [pc, #404]	; (80043e4 <DisplayStatus+0x1dc>)
 8004250:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004254:	6010      	str	r0, [r2, #0]
 8004256:	8091      	strh	r1, [r2, #4]
 8004258:	e7ea      	b.n	8004230 <DisplayStatus+0x28>
	switch(Fstep)
 800425a:	f242 7210 	movw	r2, #10000	; 0x2710
 800425e:	4293      	cmp	r3, r2
 8004260:	f000 80ab 	beq.w	80043ba <DisplayStatus+0x1b2>
 8004264:	4a62      	ldr	r2, [pc, #392]	; (80043f0 <DisplayStatus+0x1e8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d106      	bne.n	8004278 <DisplayStatus+0x70>
	case 100000: 	strcpy(StringStep," 100K"); break;
 800426a:	4b62      	ldr	r3, [pc, #392]	; (80043f4 <DisplayStatus+0x1ec>)
 800426c:	4a5d      	ldr	r2, [pc, #372]	; (80043e4 <DisplayStatus+0x1dc>)
 800426e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004272:	6010      	str	r0, [r2, #0]
 8004274:	8091      	strh	r1, [r2, #4]
 8004276:	e7db      	b.n	8004230 <DisplayStatus+0x28>
	switch(Fstep)
 8004278:	f242 3228 	movw	r2, #9000	; 0x2328
 800427c:	4293      	cmp	r3, r2
 800427e:	f040 808f 	bne.w	80043a0 <DisplayStatus+0x198>
	case 9000: 		strcpy(StringStep,"   9K"); break;
 8004282:	4b5d      	ldr	r3, [pc, #372]	; (80043f8 <DisplayStatus+0x1f0>)
 8004284:	4a57      	ldr	r2, [pc, #348]	; (80043e4 <DisplayStatus+0x1dc>)
 8004286:	e893 0003 	ldmia.w	r3, {r0, r1}
 800428a:	6010      	str	r0, [r2, #0]
 800428c:	8091      	strh	r1, [r2, #4]
 800428e:	e7cf      	b.n	8004230 <DisplayStatus+0x28>
	{
	case LSB: strcpy(StringMode,"LSB"); break;
	case USB: strcpy(StringMode,"USB"); break;
	case AM: strcpy(StringMode,"AM"); break;
	case CW: strcpy(StringMode,"CW"); break;
 8004290:	4b5a      	ldr	r3, [pc, #360]	; (80043fc <DisplayStatus+0x1f4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4e5a      	ldr	r6, [pc, #360]	; (8004400 <DisplayStatus+0x1f8>)
 8004296:	0c19      	lsrs	r1, r3, #16
 8004298:	8033      	strh	r3, [r6, #0]
 800429a:	70b1      	strb	r1, [r6, #2]
	}
	switch (CurrentAGC)
 800429c:	4b59      	ldr	r3, [pc, #356]	; (8004404 <DisplayStatus+0x1fc>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d058      	beq.n	8004356 <DisplayStatus+0x14e>
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d179      	bne.n	800439c <DisplayStatus+0x194>
	{
	case Fast: strcpy(StringAGC,"Fast"); break;
	case Slow: strcpy(StringAGC,"Slow"); break;
 80042a8:	4b57      	ldr	r3, [pc, #348]	; (8004408 <DisplayStatus+0x200>)
 80042aa:	4d58      	ldr	r5, [pc, #352]	; (800440c <DisplayStatus+0x204>)
 80042ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80042b0:	6028      	str	r0, [r5, #0]
 80042b2:	7129      	strb	r1, [r5, #4]
	}
	switch (CurrentBW)
 80042b4:	4b56      	ldr	r3, [pc, #344]	; (8004410 <DisplayStatus+0x208>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d056      	beq.n	800436a <DisplayStatus+0x162>
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d16b      	bne.n	8004398 <DisplayStatus+0x190>
	{
	case Narrow: strcpy(StringWidth,"Narrow"); break;
	case Wide: strcpy(StringWidth,"Wide"); break;
 80042c0:	4b54      	ldr	r3, [pc, #336]	; (8004414 <DisplayStatus+0x20c>)
 80042c2:	4c55      	ldr	r4, [pc, #340]	; (8004418 <DisplayStatus+0x210>)
 80042c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80042c8:	6020      	str	r0, [r4, #0]
 80042ca:	7121      	strb	r1, [r4, #4]
	}
	switch (TxPowerOut)
 80042cc:	4b53      	ldr	r3, [pc, #332]	; (800441c <DisplayStatus+0x214>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d4:	d056      	beq.n	8004384 <DisplayStatus+0x17c>
 80042d6:	f640 71ff 	movw	r1, #4095	; 0xfff
 80042da:	428b      	cmp	r3, r1
 80042dc:	d062      	beq.n	80043a4 <DisplayStatus+0x19c>
 80042de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e2:	4b4f      	ldr	r3, [pc, #316]	; (8004420 <DisplayStatus+0x218>)
	{
	case LOW_POWER_OUT: strcpy(StringTxPower,"Low"); break;
 80042e4:	bf04      	itt	eq
 80042e6:	494f      	ldreq	r1, [pc, #316]	; (8004424 <DisplayStatus+0x21c>)
 80042e8:	6019      	streq	r1, [r3, #0]
	case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
	case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
	}
	sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s AGG %s ERR %d WPM %d PWR %s Volume %1.1f   \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, StringAGC, TXFreqError, keyer_speed, StringTxPower, volume);
 80042ea:	9306      	str	r3, [sp, #24]
 80042ec:	4b4e      	ldr	r3, [pc, #312]	; (8004428 <DisplayStatus+0x220>)
 80042ee:	9503      	str	r5, [sp, #12]
 80042f0:	9402      	str	r4, [sp, #8]
 80042f2:	ed93 7a00 	vldr	s14, [r3]
 80042f6:	4b4d      	ldr	r3, [pc, #308]	; (800442c <DisplayStatus+0x224>)
 80042f8:	9601      	str	r6, [sp, #4]
 80042fa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	484b      	ldr	r0, [pc, #300]	; (8004430 <DisplayStatus+0x228>)
 8004302:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8004434 <DisplayStatus+0x22c>
 8004306:	6804      	ldr	r4, [r0, #0]
 8004308:	9304      	str	r3, [sp, #16]
 800430a:	4b4b      	ldr	r3, [pc, #300]	; (8004438 <DisplayStatus+0x230>)
 800430c:	9200      	str	r2, [sp, #0]
 800430e:	9405      	str	r4, [sp, #20]
 8004310:	494a      	ldr	r1, [pc, #296]	; (800443c <DisplayStatus+0x234>)
 8004312:	484b      	ldr	r0, [pc, #300]	; (8004440 <DisplayStatus+0x238>)
 8004314:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004318:	edd3 7a00 	vldr	s15, [r3]
 800431c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004320:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004324:	ec53 2b17 	vmov	r2, r3, d7
 8004328:	f00d f804 	bl	8011334 <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 800432c:	4844      	ldr	r0, [pc, #272]	; (8004440 <DisplayStatus+0x238>)
 800432e:	f7fb ffd7 	bl	80002e0 <strlen>
 8004332:	4601      	mov	r1, r0
 8004334:	4842      	ldr	r0, [pc, #264]	; (8004440 <DisplayStatus+0x238>)
 8004336:	b289      	uxth	r1, r1
 8004338:	f00a ff60 	bl	800f1fc <CDC_Transmit_FS>
	HAL_Delay(1);
 800433c:	2001      	movs	r0, #1
	PrintUI(UartTXString);
}
 800433e:	b00a      	add	sp, #40	; 0x28
 8004340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(1);
 8004344:	f002 b95a 	b.w	80065fc <HAL_Delay>
	case USB: strcpy(StringMode,"USB"); break;
 8004348:	4b3e      	ldr	r3, [pc, #248]	; (8004444 <DisplayStatus+0x23c>)
 800434a:	4e2d      	ldr	r6, [pc, #180]	; (8004400 <DisplayStatus+0x1f8>)
 800434c:	6033      	str	r3, [r6, #0]
	switch (CurrentAGC)
 800434e:	4b2d      	ldr	r3, [pc, #180]	; (8004404 <DisplayStatus+0x1fc>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1a6      	bne.n	80042a4 <DisplayStatus+0x9c>
	case Fast: strcpy(StringAGC,"Fast"); break;
 8004356:	4b3c      	ldr	r3, [pc, #240]	; (8004448 <DisplayStatus+0x240>)
 8004358:	4d2c      	ldr	r5, [pc, #176]	; (800440c <DisplayStatus+0x204>)
 800435a:	e893 0003 	ldmia.w	r3, {r0, r1}
	switch (CurrentBW)
 800435e:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <DisplayStatus+0x208>)
	case Fast: strcpy(StringAGC,"Fast"); break;
 8004360:	6028      	str	r0, [r5, #0]
	switch (CurrentBW)
 8004362:	781b      	ldrb	r3, [r3, #0]
	case Fast: strcpy(StringAGC,"Fast"); break;
 8004364:	7129      	strb	r1, [r5, #4]
	switch (CurrentBW)
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1a8      	bne.n	80042bc <DisplayStatus+0xb4>
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 800436a:	4b38      	ldr	r3, [pc, #224]	; (800444c <DisplayStatus+0x244>)
 800436c:	4c2a      	ldr	r4, [pc, #168]	; (8004418 <DisplayStatus+0x210>)
 800436e:	e893 0003 	ldmia.w	r3, {r0, r1}
	switch (TxPowerOut)
 8004372:	4b2a      	ldr	r3, [pc, #168]	; (800441c <DisplayStatus+0x214>)
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 8004374:	80a1      	strh	r1, [r4, #4]
 8004376:	0c09      	lsrs	r1, r1, #16
	switch (TxPowerOut)
 8004378:	681b      	ldr	r3, [r3, #0]
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 800437a:	6020      	str	r0, [r4, #0]
	switch (TxPowerOut)
 800437c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 8004380:	71a1      	strb	r1, [r4, #6]
	switch (TxPowerOut)
 8004382:	d1a8      	bne.n	80042d6 <DisplayStatus+0xce>
	case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
 8004384:	4b26      	ldr	r3, [pc, #152]	; (8004420 <DisplayStatus+0x218>)
 8004386:	4932      	ldr	r1, [pc, #200]	; (8004450 <DisplayStatus+0x248>)
 8004388:	6019      	str	r1, [r3, #0]
 800438a:	e7ae      	b.n	80042ea <DisplayStatus+0xe2>
	case LSB: strcpy(StringMode,"LSB"); break;
 800438c:	4e1c      	ldr	r6, [pc, #112]	; (8004400 <DisplayStatus+0x1f8>)
 800438e:	4b31      	ldr	r3, [pc, #196]	; (8004454 <DisplayStatus+0x24c>)
 8004390:	6033      	str	r3, [r6, #0]
 8004392:	e783      	b.n	800429c <DisplayStatus+0x94>
	case AM: strcpy(StringMode,"AM"); break;
 8004394:	4b30      	ldr	r3, [pc, #192]	; (8004458 <DisplayStatus+0x250>)
 8004396:	e77c      	b.n	8004292 <DisplayStatus+0x8a>
 8004398:	4c1f      	ldr	r4, [pc, #124]	; (8004418 <DisplayStatus+0x210>)
 800439a:	e797      	b.n	80042cc <DisplayStatus+0xc4>
 800439c:	4d1b      	ldr	r5, [pc, #108]	; (800440c <DisplayStatus+0x204>)
 800439e:	e789      	b.n	80042b4 <DisplayStatus+0xac>
 80043a0:	4a10      	ldr	r2, [pc, #64]	; (80043e4 <DisplayStatus+0x1dc>)
 80043a2:	e745      	b.n	8004230 <DisplayStatus+0x28>
	case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
 80043a4:	4b1e      	ldr	r3, [pc, #120]	; (8004420 <DisplayStatus+0x218>)
 80043a6:	492d      	ldr	r1, [pc, #180]	; (800445c <DisplayStatus+0x254>)
 80043a8:	6019      	str	r1, [r3, #0]
 80043aa:	e79e      	b.n	80042ea <DisplayStatus+0xe2>
	case 10: 		strcpy(StringStep,"  10 "); break;
 80043ac:	4b2c      	ldr	r3, [pc, #176]	; (8004460 <DisplayStatus+0x258>)
 80043ae:	4a0d      	ldr	r2, [pc, #52]	; (80043e4 <DisplayStatus+0x1dc>)
 80043b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80043b4:	6010      	str	r0, [r2, #0]
 80043b6:	8091      	strh	r1, [r2, #4]
 80043b8:	e73a      	b.n	8004230 <DisplayStatus+0x28>
	case 10000:		strcpy(StringStep,"  10K"); break;
 80043ba:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <DisplayStatus+0x25c>)
 80043bc:	4a09      	ldr	r2, [pc, #36]	; (80043e4 <DisplayStatus+0x1dc>)
 80043be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80043c2:	6010      	str	r0, [r2, #0]
 80043c4:	8091      	strh	r1, [r2, #4]
 80043c6:	e733      	b.n	8004230 <DisplayStatus+0x28>
	case 1000: 		strcpy(StringStep,"   1K"); break;
 80043c8:	4b27      	ldr	r3, [pc, #156]	; (8004468 <DisplayStatus+0x260>)
 80043ca:	4a06      	ldr	r2, [pc, #24]	; (80043e4 <DisplayStatus+0x1dc>)
 80043cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80043d0:	6010      	str	r0, [r2, #0]
 80043d2:	8091      	strh	r1, [r2, #4]
 80043d4:	e72c      	b.n	8004230 <DisplayStatus+0x28>
 80043d6:	4e0a      	ldr	r6, [pc, #40]	; (8004400 <DisplayStatus+0x1f8>)
 80043d8:	e760      	b.n	800429c <DisplayStatus+0x94>
 80043da:	bf00      	nop
 80043dc:	24006c60 	.word	0x24006c60
 80043e0:	0801ae54 	.word	0x0801ae54
 80043e4:	24007cd8 	.word	0x24007cd8
 80043e8:	24002a38 	.word	0x24002a38
 80043ec:	0801ae44 	.word	0x0801ae44
 80043f0:	000186a0 	.word	0x000186a0
 80043f4:	0801ae74 	.word	0x0801ae74
 80043f8:	0801ae64 	.word	0x0801ae64
 80043fc:	0801ae80 	.word	0x0801ae80
 8004400:	24007cd0 	.word	0x24007cd0
 8004404:	24002a36 	.word	0x24002a36
 8004408:	0801ae8c 	.word	0x0801ae8c
 800440c:	24007cc8 	.word	0x24007cc8
 8004410:	24002a37 	.word	0x24002a37
 8004414:	0801ae9c 	.word	0x0801ae9c
 8004418:	24007ce8 	.word	0x24007ce8
 800441c:	24007d08 	.word	0x24007d08
 8004420:	24007ce0 	.word	0x24007ce0
 8004424:	00776f4c 	.word	0x00776f4c
 8004428:	2400d3ec 	.word	0x2400d3ec
 800442c:	24007cfc 	.word	0x24007cfc
 8004430:	2400c22c 	.word	0x2400c22c
 8004434:	3a83126f 	.word	0x3a83126f
 8004438:	24007c74 	.word	0x24007c74
 800443c:	0801aea4 	.word	0x0801aea4
 8004440:	24007e14 	.word	0x24007e14
 8004444:	00425355 	.word	0x00425355
 8004448:	0801ae84 	.word	0x0801ae84
 800444c:	0801ae94 	.word	0x0801ae94
 8004450:	0064694d 	.word	0x0064694d
 8004454:	0042534c 	.word	0x0042534c
 8004458:	0801ae7c 	.word	0x0801ae7c
 800445c:	0078614d 	.word	0x0078614d
 8004460:	0801ae4c 	.word	0x0801ae4c
 8004464:	0801ae6c 	.word	0x0801ae6c
 8004468:	0801ae5c 	.word	0x0801ae5c
 800446c:	00000000 	.word	0x00000000

08004470 <SetWSPRPLLCoeff>:
 * for 7040.1 PLL coeffs are N 450, M 17, P 94, FracDiv 48
 */


void SetWSPRPLLCoeff(double TXFreq, uint16_t *FracDivCoeff, uint16_t *FracPWMCoeff)
{
 8004470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
	uint32_t m, n, p, od;
	volatile uint32_t fm, fn, fp, fdiff, fod, FMaxErr, FracDiv, i;
	LastTXFreq = (float)TXFreq;
#define TEST_COEFF 1
	for (i = 0; i < 4; i++) {
 8004474:	2300      	movs	r3, #0
	LastTXFreq = (float)TXFreq;
 8004476:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 800447a:	4aa9      	ldr	r2, [pc, #676]	; (8004720 <SetWSPRPLLCoeff+0x2b0>)
{
 800447c:	ed2d 8b02 	vpush	{d8}
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
 8004480:	f20f 298c 	addw	r9, pc, #652	; 0x28c
 8004484:	e9d9 8900 	ldrd	r8, r9, [r9]
{
 8004488:	b08f      	sub	sp, #60	; 0x3c
	LastTXFreq = (float)TXFreq;
 800448a:	edc2 7a00 	vstr	s15, [r2]
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
 800448e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
	for (i = 0; i < 4; i++) {
 8004492:	9305      	str	r3, [sp, #20]
 8004494:	9b05      	ldr	r3, [sp, #20]
 8004496:	2b03      	cmp	r3, #3
 8004498:	f200 80d0 	bhi.w	800463c <SetWSPRPLLCoeff+0x1cc>
		for (m = 2; m <= 25; m++) //was 64
		{
			for (n = 2; n <= 512; n++) //was 1
			{
				for (p = 2; p <= 128; p += 2) {
					OutF = XTalFreq * n / m / p / od;
 800449c:	4ba1      	ldr	r3, [pc, #644]	; (8004724 <SetWSPRPLLCoeff+0x2b4>)
 800449e:	4604      	mov	r4, r0
 80044a0:	460d      	mov	r5, r1
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 80044a2:	ed9f 8aa1 	vldr	s16, [pc, #644]	; 8004728 <SetWSPRPLLCoeff+0x2b8>
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
							&& ((XTalFreq * n / m) > 150000000.0)
 80044a6:	ed9f 2aa1 	vldr	s4, [pc, #644]	; 800472c <SetWSPRPLLCoeff+0x2bc>
						MinDiff = abs(OutF - TF);

						fp = p;
						fn = n;
						fm = m;
						fod = od;
 80044aa:	2001      	movs	r0, #1
					OutF = XTalFreq * n / m / p / od;
 80044ac:	edd3 2a00 	vldr	s5, [r3]
 80044b0:	f8df c288 	ldr.w	ip, [pc, #648]	; 800473c <SetWSPRPLLCoeff+0x2cc>
							&& ((XTalFreq * n / m) < 960000000.0)) {
 80044b4:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 8004730 <SetWSPRPLLCoeff+0x2c0>
 80044b8:	4e9e      	ldr	r6, [pc, #632]	; (8004734 <SetWSPRPLLCoeff+0x2c4>)
		}
		if (fn < 511) {
			OutF = XTalFreq * fn / fm / fp / fod;
			OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
					* 8192 * 8); //FracDiv PWM has 8 levels
 80044ba:	ed9f 3b97 	vldr	d3, [pc, #604]	; 8004718 <SetWSPRPLLCoeff+0x2a8>
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 80044be:	ed9d 7a05 	vldr	s14, [sp, #20]
 80044c2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
		for (m = 2; m <= 25; m++) //was 64
 80044c6:	2102      	movs	r1, #2
			for (n = 2; n <= 512; n++) //was 1
 80044c8:	f240 2e01 	movw	lr, #513	; 0x201
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 80044cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80044d0:	ee27 7a08 	vmul.f32	s14, s14, s16
 80044d4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80044d8:	ee37 7b00 	vadd.f64	d7, d7, d0
 80044dc:	ed8d 7b06 	vstr	d7, [sp, #24]
		MinDiff = 999999999;
 80044e0:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
					OutF = XTalFreq * n / m / p / od;
 80044e4:	ee07 1a90 	vmov	s15, r1
			for (n = 2; n <= 512; n++) //was 1
 80044e8:	2202      	movs	r2, #2
					OutF = XTalFreq * n / m / p / od;
 80044ea:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 80044ee:	eec8 1a84 	vdiv.f32	s3, s17, s8
 80044f2:	ee07 2a90 	vmov	s15, r2
				for (p = 2; p <= 128; p += 2) {
 80044f6:	2302      	movs	r3, #2
					OutF = XTalFreq * n / m / p / od;
 80044f8:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 80044fc:	ee64 4aa2 	vmul.f32	s9, s9, s5
							&& ((XTalFreq * n / m) > 150000000.0)
 8004500:	ee64 7aa1 	vmul.f32	s15, s9, s3
 8004504:	eef4 7a42 	vcmp.f32	s15, s4
 8004508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450c:	dd05      	ble.n	800451a <SetWSPRPLLCoeff+0xaa>
 800450e:	eef4 7ac1 	vcmpe.f32	s15, s2
 8004512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004516:	f100 80b2 	bmi.w	800467e <SetWSPRPLLCoeff+0x20e>
					OutF = XTalFreq * n / m / p / od;
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	3302      	adds	r3, #2
 8004520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004524:	ee67 7a84 	vmul.f32	s15, s15, s8
 8004528:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 800452c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004530:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
 8004534:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004538:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800453c:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8004540:	ee37 7b45 	vsub.f64	d7, d7, d5
 8004544:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454c:	dd03      	ble.n	8004556 <SetWSPRPLLCoeff+0xe6>
 800454e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004552:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
				for (p = 2; p <= 128; p += 2) {
 8004556:	2b82      	cmp	r3, #130	; 0x82
 8004558:	d1df      	bne.n	800451a <SetWSPRPLLCoeff+0xaa>
			for (n = 2; n <= 512; n++) //was 1
 800455a:	3201      	adds	r2, #1
 800455c:	4572      	cmp	r2, lr
 800455e:	d1c8      	bne.n	80044f2 <SetWSPRPLLCoeff+0x82>
		for (m = 2; m <= 25; m++) //was 64
 8004560:	3101      	adds	r1, #1
 8004562:	291a      	cmp	r1, #26
 8004564:	d1be      	bne.n	80044e4 <SetWSPRPLLCoeff+0x74>
		if (fn < 511) {
 8004566:	9b01      	ldr	r3, [sp, #4]
 8004568:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800456c:	f200 80ca 	bhi.w	8004704 <SetWSPRPLLCoeff+0x294>
			OutF = XTalFreq * fn / fm / fp / fod;
 8004570:	ed9d 6a01 	vldr	s12, [sp, #4]
 8004574:	eddd 6a00 	vldr	s13, [sp]
 8004578:	eddd 7a02 	vldr	s15, [sp, #8]
 800457c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8004580:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004588:	ee26 6a22 	vmul.f32	s12, s12, s5
 800458c:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8004590:	eddd 7a03 	vldr	s15, [sp, #12]
 8004594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459c:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80045a0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80045a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
			OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 80045a8:	9b01      	ldr	r3, [sp, #4]
 80045aa:	eddd 6a00 	vldr	s13, [sp]
 80045ae:	eddd 7a02 	vldr	s15, [sp, #8]
 80045b2:	3301      	adds	r3, #1
 80045b4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80045b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045bc:	ee06 3a10 	vmov	s12, r3
 80045c0:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80045c4:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80045c8:	eddd 7a03 	vldr	s15, [sp, #12]
 80045cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d0:	ee26 6a22 	vmul.f32	s12, s12, s5
 80045d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d8:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80045dc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80045e0:	ed8d 7b08 	vstr	d7, [sp, #32]
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
 80045e4:	ed9d 5b06 	vldr	d5, [sp, #24]
 80045e8:	ed9d 4b0a 	vldr	d4, [sp, #40]	; 0x28
 80045ec:	ed9d 6b08 	vldr	d6, [sp, #32]
 80045f0:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80045f4:	ee35 5b44 	vsub.f64	d5, d5, d4
 80045f8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80045fc:	ee85 7b06 	vdiv.f64	d7, d5, d6
					* 8192 * 8); //FracDiv PWM has 8 levels
 8004600:	ee27 7b03 	vmul.f64	d7, d7, d3
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
 8004604:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8004608:	ed8d 7a04 	vstr	s14, [sp, #16]
		} else {
			FracDiv = 8191 * 8;
		}

		FracDivPWM = LowestWSPRToneFracDivPWM = FracDiv & 0x07;
 800460c:	9b04      	ldr	r3, [sp, #16]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	8033      	strh	r3, [r6, #0]
 8004614:	f8ac 3000 	strh.w	r3, [ip]
		FracDiv >>= 0x03;
 8004618:	9b04      	ldr	r3, [sp, #16]
 800461a:	08db      	lsrs	r3, r3, #3
 800461c:	9304      	str	r3, [sp, #16]
		FracDivCoeff[i] = FracDiv;
 800461e:	9a04      	ldr	r2, [sp, #16]
 8004620:	9b05      	ldr	r3, [sp, #20]
 8004622:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		FracPWMCoeff[i] = FracDivPWM;
 8004626:	9a05      	ldr	r2, [sp, #20]
	for (i = 0; i < 4; i++) {
 8004628:	9b05      	ldr	r3, [sp, #20]
 800462a:	3301      	adds	r3, #1
 800462c:	9305      	str	r3, [sp, #20]
		FracPWMCoeff[i] = FracDivPWM;
 800462e:	8833      	ldrh	r3, [r6, #0]
 8004630:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
	for (i = 0; i < 4; i++) {
 8004634:	9b05      	ldr	r3, [sp, #20]
 8004636:	2b03      	cmp	r3, #3
 8004638:	f67f af41 	bls.w	80044be <SetWSPRPLLCoeff+0x4e>
	}
	__HAL_RCC_PLL2_DISABLE();
 800463c:	4a3e      	ldr	r2, [pc, #248]	; (8004738 <SetWSPRPLLCoeff+0x2c8>)
 800463e:	6813      	ldr	r3, [r2, #0]
 8004640:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004644:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1); //These parameters should stay the same for the 4 WSPR tones
 8004646:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004648:	9900      	ldr	r1, [sp, #0]
 800464a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800464e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8004652:	6293      	str	r3, [r2, #40]	; 0x28
 8004654:	9901      	ldr	r1, [sp, #4]
 8004656:	9b02      	ldr	r3, [sp, #8]
 8004658:	3901      	subs	r1, #1
 800465a:	3b01      	subs	r3, #1
 800465c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004660:	025b      	lsls	r3, r3, #9
 8004662:	b29b      	uxth	r3, r3
 8004664:	430b      	orrs	r3, r1
 8004666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800466a:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 800466c:	6813      	ldr	r3, [r2, #0]
 800466e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004672:	6013      	str	r3, [r2, #0]
}
 8004674:	b00f      	add	sp, #60	; 0x3c
 8004676:	ecbd 8b02 	vpop	{d8}
 800467a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					OutF = XTalFreq * n / m / p / od;
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004686:	ee67 7a84 	vmul.f32	s15, s15, s8
 800468a:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 800468e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004692:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
 8004696:	ed9d 7b06 	vldr	d7, [sp, #24]
 800469a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800469e:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80046a2:	ee37 7b45 	vsub.f64	d7, d7, d5
 80046a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80046aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ae:	d521      	bpl.n	80046f4 <SetWSPRPLLCoeff+0x284>
 80046b0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80046b4:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80046b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80046bc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80046c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c4:	dd16      	ble.n	80046f4 <SetWSPRPLLCoeff+0x284>
						MinDiff = abs(OutF - TF);
 80046c6:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80046ca:	ed9d 6b06 	vldr	d6, [sp, #24]
 80046ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80046d2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80046d6:	ee17 7a10 	vmov	r7, s14
 80046da:	2f00      	cmp	r7, #0
 80046dc:	bfb8      	it	lt
 80046de:	427f      	neglt	r7, r7
 80046e0:	ee07 7a10 	vmov	s14, r7
 80046e4:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80046e8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
						fp = p;
 80046ec:	9302      	str	r3, [sp, #8]
						fn = n;
 80046ee:	9201      	str	r2, [sp, #4]
						fm = m;
 80046f0:	9100      	str	r1, [sp, #0]
						fod = od;
 80046f2:	9003      	str	r0, [sp, #12]
				for (p = 2; p <= 128; p += 2) {
 80046f4:	3302      	adds	r3, #2
 80046f6:	2b82      	cmp	r3, #130	; 0x82
 80046f8:	d1c1      	bne.n	800467e <SetWSPRPLLCoeff+0x20e>
			for (n = 2; n <= 512; n++) //was 1
 80046fa:	3201      	adds	r2, #1
 80046fc:	4572      	cmp	r2, lr
 80046fe:	f47f aef8 	bne.w	80044f2 <SetWSPRPLLCoeff+0x82>
 8004702:	e72d      	b.n	8004560 <SetWSPRPLLCoeff+0xf0>
			FracDiv = 8191 * 8;
 8004704:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8004708:	9304      	str	r3, [sp, #16]
 800470a:	e77f      	b.n	800460c <SetWSPRPLLCoeff+0x19c>
 800470c:	f3af 8000 	nop.w
 8004710:	ff800000 	.word	0xff800000
 8004714:	41cdcd64 	.word	0x41cdcd64
 8004718:	00000000 	.word	0x00000000
 800471c:	40f00000 	.word	0x40f00000
 8004720:	24007c80 	.word	0x24007c80
 8004724:	24008e1c 	.word	0x24008e1c
 8004728:	3fbb7e91 	.word	0x3fbb7e91
 800472c:	4d0f0d18 	.word	0x4d0f0d18
 8004730:	4e64e1c0 	.word	0x4e64e1c0
 8004734:	24006c54 	.word	0x24006c54
 8004738:	58024400 	.word	0x58024400
 800473c:	24007c84 	.word	0x24007c84

08004740 <SetTXPLL>:
	{
		for (n = 2; n <= 512; n++) //was 1
		{
			for (p = 2; p <= 128; p+=2)
			{
				OutF = XTalFreq * n / m / p / od;
 8004740:	4a90      	ldr	r2, [pc, #576]	; (8004984 <SetTXPLL+0x244>)
 8004742:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	volatile float OutFHigherStep, OutF, MinDiff = 999999999;
 8004746:	4b90      	ldr	r3, [pc, #576]	; (8004988 <SetTXPLL+0x248>)
	for (m = 2; m <= 25; m++) //was 64
 8004748:	2002      	movs	r0, #2
				OutF = XTalFreq * n / m / p / od;
 800474a:	edd2 5a00 	vldr	s11, [r2]
		for (n = 2; n <= 512; n++) //was 1
 800474e:	f240 2c01 	movw	ip, #513	; 0x201
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8004752:	ed9f 5a8e 	vldr	s10, [pc, #568]	; 800498c <SetTXPLL+0x24c>
 8004756:	ed9f 4a8e 	vldr	s8, [pc, #568]	; 8004990 <SetTXPLL+0x250>
{
 800475a:	b410      	push	{r4}
					MinDiff = abs(OutF - TF);

					fp = p;
					fn = n;
					fm = m;
					fod = od;
 800475c:	2401      	movs	r4, #1
{
 800475e:	b08b      	sub	sp, #44	; 0x2c
	volatile float OutFHigherStep, OutF, MinDiff = 999999999;
 8004760:	9303      	str	r3, [sp, #12]
	MinDiff = 999999999;
 8004762:	9303      	str	r3, [sp, #12]
				OutF = XTalFreq * n / m / p / od;
 8004764:	ee07 0a90 	vmov	s15, r0
		for (n = 2; n <= 512; n++) //was 1
 8004768:	2102      	movs	r1, #2
				OutF = XTalFreq * n / m / p / od;
 800476a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800476e:	eec3 4a86 	vdiv.f32	s9, s7, s12
 8004772:	ee07 1a90 	vmov	s15, r1
			for (p = 2; p <= 128; p+=2)
 8004776:	2302      	movs	r3, #2
				OutF = XTalFreq * n / m / p / od;
 8004778:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800477c:	ee66 6aa5 	vmul.f32	s13, s13, s11
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8004780:	ee66 7aa4 	vmul.f32	s15, s13, s9
 8004784:	eef4 7a45 	vcmp.f32	s15, s10
 8004788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478c:	dd05      	ble.n	800479a <SetTXPLL+0x5a>
 800478e:	eef4 7ac4 	vcmpe.f32	s15, s8
 8004792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004796:	f100 80b6 	bmi.w	8004906 <SetTXPLL+0x1c6>
				OutF = XTalFreq * n / m / p / od;
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	3302      	adds	r3, #2
 80047a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047a4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80047a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ac:	ed8d 7a02 	vstr	s14, [sp, #8]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 80047b0:	eddd 7a02 	vldr	s15, [sp, #8]
 80047b4:	ed9d 7a03 	vldr	s14, [sp, #12]
 80047b8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80047bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c4:	dd00      	ble.n	80047c8 <SetTXPLL+0x88>
 80047c6:	9a02      	ldr	r2, [sp, #8]
			for (p = 2; p <= 128; p+=2)
 80047c8:	2b82      	cmp	r3, #130	; 0x82
 80047ca:	d1e6      	bne.n	800479a <SetTXPLL+0x5a>
		for (n = 2; n <= 512; n++) //was 1
 80047cc:	3101      	adds	r1, #1
 80047ce:	4561      	cmp	r1, ip
 80047d0:	d1cf      	bne.n	8004772 <SetTXPLL+0x32>
	for (m = 2; m <= 25; m++) //was 64
 80047d2:	3001      	adds	r0, #1
 80047d4:	281a      	cmp	r0, #26
 80047d6:	d1c5      	bne.n	8004764 <SetTXPLL+0x24>
				}
			}
		}
	}
	if (fn < 511)
 80047d8:	9b05      	ldr	r3, [sp, #20]
 80047da:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80047de:	f200 80cd 	bhi.w	800497c <SetTXPLL+0x23c>
	{
		OutF = XTalFreq * fn / fm / fp / fod;
 80047e2:	eddd 6a05 	vldr	s13, [sp, #20]
 80047e6:	ed9d 7a04 	vldr	s14, [sp, #16]
 80047ea:	eddd 7a06 	vldr	s15, [sp, #24]
 80047ee:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80047f2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80047f6:	ed9d 6a07 	vldr	s12, [sp, #28]
 80047fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 80047fe:	ed9f 5a65 	vldr	s10, [pc, #404]	; 8004994 <SetTXPLL+0x254>
		OutF = XTalFreq * fn / fm / fp / fod;
 8004802:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8004806:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800480a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800480e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004816:	ed8d 7a02 	vstr	s14, [sp, #8]
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 800481a:	9b05      	ldr	r3, [sp, #20]
 800481c:	ed9d 7a04 	vldr	s14, [sp, #16]
 8004820:	eddd 7a06 	vldr	s15, [sp, #24]
 8004824:	3301      	adds	r3, #1
 8004826:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800482a:	ed9d 6a07 	vldr	s12, [sp, #28]
 800482e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004832:	ee06 3a90 	vmov	s13, r3
 8004836:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800483a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800483e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004842:	ee66 5aa5 	vmul.f32	s11, s13, s11
 8004846:	ee67 7a86 	vmul.f32	s15, s15, s12
 800484a:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800484e:	ed8d 7a01 	vstr	s14, [sp, #4]
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 8004852:	eddd 6a02 	vldr	s13, [sp, #8]
 8004856:	ed9d 7a01 	vldr	s14, [sp, #4]
 800485a:	eddd 7a02 	vldr	s15, [sp, #8]
 800485e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004862:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004866:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800486a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800486e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004872:	edcd 7a08 	vstr	s15, [sp, #32]
	else
	{
		FracDiv = 8191;
	}

	TXFreqError = MinDiff;
 8004876:	eddd 7a03 	vldr	s15, [sp, #12]
	for (i=0; i< 50; i++)
 800487a:	2000      	movs	r0, #0
	__HAL_RCC_PLL2_DISABLE();
 800487c:	4a46      	ldr	r2, [pc, #280]	; (8004998 <SetTXPLL+0x258>)
	TXFreqError = MinDiff;
 800487e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004882:	4b46      	ldr	r3, [pc, #280]	; (800499c <SetTXPLL+0x25c>)
 8004884:	edc3 7a00 	vstr	s15, [r3]
	__HAL_RCC_PLL2_DISABLE();
 8004888:	6813      	ldr	r3, [r2, #0]
 800488a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800488e:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 8004890:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004892:	9904      	ldr	r1, [sp, #16]
 8004894:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004898:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800489c:	6293      	str	r3, [r2, #40]	; 0x28
 800489e:	9905      	ldr	r1, [sp, #20]
 80048a0:	9b06      	ldr	r3, [sp, #24]
 80048a2:	3901      	subs	r1, #1
 80048a4:	3b01      	subs	r3, #1
 80048a6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80048aa:	025b      	lsls	r3, r3, #9
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	430b      	orrs	r3, r1
 80048b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b4:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 80048b6:	6813      	ldr	r3, [r2, #0]
 80048b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048bc:	6013      	str	r3, [r2, #0]

	SetFracPLL(FracDiv);
 80048be:	9908      	ldr	r1, [sp, #32]
	__HAL_RCC_PLL2FRACN_DISABLE();
 80048c0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80048c2:	f023 0310 	bic.w	r3, r3, #16
 80048c6:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 80048c8:	9009      	str	r0, [sp, #36]	; 0x24
 80048ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048cc:	2b31      	cmp	r3, #49	; 0x31
 80048ce:	d80b      	bhi.n	80048e8 <SetTXPLL+0x1a8>
		i++;
 80048d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d2:	3301      	adds	r3, #1
 80048d4:	9309      	str	r3, [sp, #36]	; 0x24
		i--;
 80048d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d8:	3b01      	subs	r3, #1
 80048da:	9309      	str	r3, [sp, #36]	; 0x24
	for (i=0; i< 50; i++)
 80048dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048de:	3301      	adds	r3, #1
 80048e0:	9309      	str	r3, [sp, #36]	; 0x24
 80048e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048e4:	2b31      	cmp	r3, #49	; 0x31
 80048e6:	d9f3      	bls.n	80048d0 <SetTXPLL+0x190>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 80048e8:	4a2b      	ldr	r2, [pc, #172]	; (8004998 <SetTXPLL+0x258>)
 80048ea:	4b2d      	ldr	r3, [pc, #180]	; (80049a0 <SetTXPLL+0x260>)
 80048ec:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 80048ee:	4003      	ands	r3, r0
 80048f0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80048f4:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 80048f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80048f8:	f043 0310 	orr.w	r3, r3, #16
 80048fc:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif

}
 80048fe:	b00b      	add	sp, #44	; 0x2c
 8004900:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004904:	4770      	bx	lr
				OutF = XTalFreq * n / m / p / od;
 8004906:	ee07 3a90 	vmov	s15, r3
 800490a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800490e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004916:	ed8d 7a02 	vstr	s14, [sp, #8]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 800491a:	eddd 7a02 	vldr	s15, [sp, #8]
 800491e:	ed9d 7a03 	vldr	s14, [sp, #12]
 8004922:	ee70 7a67 	vsub.f32	s15, s0, s15
 8004926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800492a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800492e:	d51d      	bpl.n	800496c <SetTXPLL+0x22c>
 8004930:	eddd 7a02 	vldr	s15, [sp, #8]
 8004934:	ee70 7a67 	vsub.f32	s15, s0, s15
 8004938:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800493c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004940:	dd14      	ble.n	800496c <SetTXPLL+0x22c>
					MinDiff = abs(OutF - TF);
 8004942:	eddd 7a02 	vldr	s15, [sp, #8]
 8004946:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800494a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800494e:	ee17 2a90 	vmov	r2, s15
 8004952:	2a00      	cmp	r2, #0
 8004954:	bfb8      	it	lt
 8004956:	4252      	neglt	r2, r2
 8004958:	ee07 2a90 	vmov	s15, r2
 800495c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004960:	edcd 7a03 	vstr	s15, [sp, #12]
					fp = p;
 8004964:	9306      	str	r3, [sp, #24]
					fn = n;
 8004966:	9105      	str	r1, [sp, #20]
					fm = m;
 8004968:	9004      	str	r0, [sp, #16]
					fod = od;
 800496a:	9407      	str	r4, [sp, #28]
			for (p = 2; p <= 128; p+=2)
 800496c:	3302      	adds	r3, #2
 800496e:	2b82      	cmp	r3, #130	; 0x82
 8004970:	d1c9      	bne.n	8004906 <SetTXPLL+0x1c6>
		for (n = 2; n <= 512; n++) //was 1
 8004972:	3101      	adds	r1, #1
 8004974:	4561      	cmp	r1, ip
 8004976:	f47f aefc 	bne.w	8004772 <SetTXPLL+0x32>
 800497a:	e72a      	b.n	80047d2 <SetTXPLL+0x92>
		FracDiv = 8191;
 800497c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8004980:	9308      	str	r3, [sp, #32]
 8004982:	e778      	b.n	8004876 <SetTXPLL+0x136>
 8004984:	24008e1c 	.word	0x24008e1c
 8004988:	4e6e6b28 	.word	0x4e6e6b28
 800498c:	4d0f0d18 	.word	0x4d0f0d18
 8004990:	4e64e1c0 	.word	0x4e64e1c0
 8004994:	46000000 	.word	0x46000000
 8004998:	58024400 	.word	0x58024400
 800499c:	24007cfc 	.word	0x24007cfc
 80049a0:	ffff0007 	.word	0xffff0007
 80049a4:	00000000 	.word	0x00000000

080049a8 <UserInput>:
{
 80049a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (WSPRBeaconState == SEND_WSPR)
 80049ac:	4d82      	ldr	r5, [pc, #520]	; (8004bb8 <UserInput+0x210>)
{
 80049ae:	b08d      	sub	sp, #52	; 0x34
	if (WSPRBeaconState == SEND_WSPR)
 80049b0:	782e      	ldrb	r6, [r5, #0]
 80049b2:	2e02      	cmp	r6, #2
 80049b4:	f000 8128 	beq.w	8004c08 <UserInput+0x260>
	if (USBRXLength)
 80049b8:	4b80      	ldr	r3, [pc, #512]	; (8004bbc <UserInput+0x214>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	2a00      	cmp	r2, #0
 80049be:	f000 80e5 	beq.w	8004b8c <UserInput+0x1e4>
		result = HAL_OK;
 80049c2:	2200      	movs	r2, #0
 80049c4:	f88d 2013 	strb.w	r2, [sp, #19]
		USBRXLength = 0;
 80049c8:	601a      	str	r2, [r3, #0]
	if (result == HAL_OK)
 80049ca:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80049ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d162      	bne.n	8004a9c <UserInput+0xf4>
		switch (UartRXString[0])
 80049d6:	4b7a      	ldr	r3, [pc, #488]	; (8004bc0 <UserInput+0x218>)
		UartRXDataReady = RESET;
 80049d8:	497a      	ldr	r1, [pc, #488]	; (8004bc4 <UserInput+0x21c>)
		switch (UartRXString[0])
 80049da:	781b      	ldrb	r3, [r3, #0]
		UartRXDataReady = RESET;
 80049dc:	700a      	strb	r2, [r1, #0]
		switch (UartRXString[0])
 80049de:	3b2b      	subs	r3, #43	; 0x2b
 80049e0:	2b4c      	cmp	r3, #76	; 0x4c
 80049e2:	d859      	bhi.n	8004a98 <UserInput+0xf0>
 80049e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80049e8:	00580153 	.word	0x00580153
 80049ec:	0058019b 	.word	0x0058019b
 80049f0:	00580058 	.word	0x00580058
 80049f4:	01930197 	.word	0x01930197
 80049f8:	01cd018f 	.word	0x01cd018f
 80049fc:	01c501c9 	.word	0x01c501c9
 8004a00:	01bd01c1 	.word	0x01bd01c1
 8004a04:	005801b9 	.word	0x005801b9
 8004a08:	00580058 	.word	0x00580058
 8004a0c:	00580058 	.word	0x00580058
 8004a10:	00580058 	.word	0x00580058
 8004a14:	00580058 	.word	0x00580058
 8004a18:	005801b5 	.word	0x005801b5
 8004a1c:	00580058 	.word	0x00580058
 8004a20:	00580058 	.word	0x00580058
 8004a24:	01b00058 	.word	0x01b00058
 8004a28:	02e502ea 	.word	0x02e502ea
 8004a2c:	00580058 	.word	0x00580058
 8004a30:	00580058 	.word	0x00580058
 8004a34:	00580058 	.word	0x00580058
 8004a38:	00580058 	.word	0x00580058
 8004a3c:	00580058 	.word	0x00580058
 8004a40:	005802df 	.word	0x005802df
 8004a44:	02c802d0 	.word	0x02c802d0
 8004a48:	00580058 	.word	0x00580058
 8004a4c:	00580058 	.word	0x00580058
 8004a50:	00580058 	.word	0x00580058
 8004a54:	02a202c4 	.word	0x02a202c4
 8004a58:	00580280 	.word	0x00580280
 8004a5c:	027c0058 	.word	0x027c0058
 8004a60:	004d0273 	.word	0x004d0273
 8004a64:	00580058 	.word	0x00580058
 8004a68:	026f0058 	.word	0x026f0058
 8004a6c:	026b0058 	.word	0x026b0058
 8004a70:	00580058 	.word	0x00580058
 8004a74:	022b0058 	.word	0x022b0058
 8004a78:	01d10227 	.word	0x01d10227
 8004a7c:	0169018b 	.word	0x0169018b
 8004a80:	0165      	.short	0x0165
			keyer_speed += 1;
 8004a82:	4b51      	ldr	r3, [pc, #324]	; (8004bc8 <UserInput+0x220>)
 8004a84:	6818      	ldr	r0, [r3, #0]
 8004a86:	3001      	adds	r0, #1
			if (keyer_speed > 50)
 8004a88:	2832      	cmp	r0, #50	; 0x32
 8004a8a:	f340 829c 	ble.w	8004fc6 <UserInput+0x61e>
				keyer_speed = 50;
 8004a8e:	2232      	movs	r2, #50	; 0x32
 8004a90:	4610      	mov	r0, r2
 8004a92:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 8004a94:	f7fb fdfe 	bl	8000694 <loadWPM>
		DisplayStatus();
 8004a98:	f7ff fbb6 	bl	8004208 <DisplayStatus>
	EncVal = TIM4->CNT;
 8004a9c:	4b4b      	ldr	r3, [pc, #300]	; (8004bcc <UserInput+0x224>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8004a9e:	4c4c      	ldr	r4, [pc, #304]	; (8004bd0 <UserInput+0x228>)
	EncVal = TIM4->CNT;
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8004aa2:	8822      	ldrh	r2, [r4, #0]
	EncVal = TIM4->CNT;
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	4d4b      	ldr	r5, [pc, #300]	; (8004bd4 <UserInput+0x22c>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8004aa8:	1a98      	subs	r0, r3, r2
	EncVal = TIM4->CNT;
 8004aaa:	802b      	strh	r3, [r5, #0]
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8004aac:	b201      	sxth	r1, r0
 8004aae:	b280      	uxth	r0, r0
	if (DiffEncVal < 0)
 8004ab0:	2900      	cmp	r1, #0
 8004ab2:	db6f      	blt.n	8004b94 <UserInput+0x1ec>
	if (DiffEncVal > 0)
 8004ab4:	d005      	beq.n	8004ac2 <UserInput+0x11a>
		FminusClicked(DiffEncVal); // One encoder click is two counts
 8004ab6:	f7fc fc37 	bl	8001328 <FminusClicked>
		DisplayStatus();
 8004aba:	f7ff fba5 	bl	8004208 <DisplayStatus>
		LastEncVal = EncVal;
 8004abe:	882b      	ldrh	r3, [r5, #0]
 8004ac0:	8023      	strh	r3, [r4, #0]
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8004ac2:	4b45      	ldr	r3, [pc, #276]	; (8004bd8 <UserInput+0x230>)
 8004ac4:	4c45      	ldr	r4, [pc, #276]	; (8004bdc <UserInput+0x234>)
 8004ac6:	ed93 7a00 	vldr	s14, [r3]
 8004aca:	ed9f 0b37 	vldr	d0, [pc, #220]	; 8004ba8 <UserInput+0x200>
 8004ace:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004ad2:	ee27 0b00 	vmul.f64	d0, d7, d0
 8004ad6:	f00f f8f7 	bl	8013cc8 <log10>
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8004ada:	4941      	ldr	r1, [pc, #260]	; (8004be0 <UserInput+0x238>)
 8004adc:	4a41      	ldr	r2, [pc, #260]	; (8004be4 <UserInput+0x23c>)
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8004ade:	eeb1 7b00 	vmov.f64	d7, #16	; 0x40800000  4.0
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8004ae2:	4b41      	ldr	r3, [pc, #260]	; (8004be8 <UserInput+0x240>)
 8004ae4:	6808      	ldr	r0, [r1, #0]
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	4940      	ldr	r1, [pc, #256]	; (8004bec <UserInput+0x244>)
 8004aec:	9300      	str	r3, [sp, #0]
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8004aee:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8004bb0 <UserInput+0x208>
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8004af2:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8004af6:	483e      	ldr	r0, [pc, #248]	; (8004bf0 <UserInput+0x248>)
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8004af8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8004afc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8004b00:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8004b04:	ed84 7a00 	vstr	s14, [r4]
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8004b08:	ec53 2b16 	vmov	r2, r3, d6
 8004b0c:	f00c fc12 	bl	8011334 <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8004b10:	4837      	ldr	r0, [pc, #220]	; (8004bf0 <UserInput+0x248>)
 8004b12:	f7fb fbe5 	bl	80002e0 <strlen>
 8004b16:	4601      	mov	r1, r0
 8004b18:	4835      	ldr	r0, [pc, #212]	; (8004bf0 <UserInput+0x248>)
 8004b1a:	b289      	uxth	r1, r1
 8004b1c:	f00a fb6e 	bl	800f1fc <CDC_Transmit_FS>
	HAL_Delay(1);
 8004b20:	2001      	movs	r0, #1
 8004b22:	f001 fd6b 	bl	80065fc <HAL_Delay>
	if (OVFDetected)
 8004b26:	4a33      	ldr	r2, [pc, #204]	; (8004bf4 <UserInput+0x24c>)
 8004b28:	8813      	ldrh	r3, [r2, #0]
 8004b2a:	b333      	cbz	r3, 8004b7a <UserInput+0x1d2>
		OVFDetected--;
 8004b2c:	3b01      	subs	r3, #1
		sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8004b2e:	4932      	ldr	r1, [pc, #200]	; (8004bf8 <UserInput+0x250>)
 8004b30:	4c2f      	ldr	r4, [pc, #188]	; (8004bf0 <UserInput+0x248>)
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8004b32:	2680      	movs	r6, #128	; 0x80
		OVFDetected--;
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	8013      	strh	r3, [r2, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8004b38:	4a30      	ldr	r2, [pc, #192]	; (8004bfc <UserInput+0x254>)
 8004b3a:	6815      	ldr	r5, [r2, #0]
		sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8004b3c:	c907      	ldmia	r1, {r0, r1, r2}
 8004b3e:	c403      	stmia	r4!, {r0, r1}
 8004b40:	f824 2b02 	strh.w	r2, [r4], #2
 8004b44:	0c12      	lsrs	r2, r2, #16
 8004b46:	7022      	strb	r2, [r4, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8004b48:	4a2d      	ldr	r2, [pc, #180]	; (8004c00 <UserInput+0x258>)
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8004b4a:	602e      	str	r6, [r5, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	6016      	str	r6, [r2, #0]
		if (!OVFDetected)
 8004b50:	b92b      	cbnz	r3, 8004b5e <UserInput+0x1b6>
			__HAL_ADC_ENABLE_IT(&hadc1, (ADC_IT_AWD1));
 8004b52:	686b      	ldr	r3, [r5, #4]
 8004b54:	4333      	orrs	r3, r6
 8004b56:	606b      	str	r3, [r5, #4]
			__HAL_ADC_ENABLE_IT(&hadc2, (ADC_IT_AWD1));
 8004b58:	6853      	ldr	r3, [r2, #4]
 8004b5a:	4333      	orrs	r3, r6
 8004b5c:	6053      	str	r3, [r2, #4]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8004b5e:	4824      	ldr	r0, [pc, #144]	; (8004bf0 <UserInput+0x248>)
 8004b60:	f7fb fbbe 	bl	80002e0 <strlen>
 8004b64:	4601      	mov	r1, r0
 8004b66:	4822      	ldr	r0, [pc, #136]	; (8004bf0 <UserInput+0x248>)
 8004b68:	b289      	uxth	r1, r1
 8004b6a:	f00a fb47 	bl	800f1fc <CDC_Transmit_FS>
	HAL_Delay(1);
 8004b6e:	2001      	movs	r0, #1
}
 8004b70:	b00d      	add	sp, #52	; 0x34
 8004b72:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(1);
 8004b76:	f001 bd41 	b.w	80065fc <HAL_Delay>
		sprintf((char*)UartTXString, "\e[4;1H   \r");
 8004b7a:	4a22      	ldr	r2, [pc, #136]	; (8004c04 <UserInput+0x25c>)
 8004b7c:	4b1c      	ldr	r3, [pc, #112]	; (8004bf0 <UserInput+0x248>)
 8004b7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b80:	0c14      	lsrs	r4, r2, #16
 8004b82:	c303      	stmia	r3!, {r0, r1}
 8004b84:	f823 2b02 	strh.w	r2, [r3], #2
 8004b88:	701c      	strb	r4, [r3, #0]
 8004b8a:	e7e8      	b.n	8004b5e <UserInput+0x1b6>
		result = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	f88d 3013 	strb.w	r3, [sp, #19]
 8004b92:	e71a      	b.n	80049ca <UserInput+0x22>
		FplusClicked(-DiffEncVal); // One encoder click is two counts
 8004b94:	1ad0      	subs	r0, r2, r3
 8004b96:	b280      	uxth	r0, r0
 8004b98:	f7fc fb5c 	bl	8001254 <FplusClicked>
		DisplayStatus();
 8004b9c:	f7ff fb34 	bl	8004208 <DisplayStatus>
		LastEncVal = EncVal;
 8004ba0:	882b      	ldrh	r3, [r5, #0]
 8004ba2:	8023      	strh	r3, [r4, #0]
	if (DiffEncVal > 0)
 8004ba4:	e78d      	b.n	8004ac2 <UserInput+0x11a>
 8004ba6:	bf00      	nop
 8004ba8:	00000000 	.word	0x00000000
 8004bac:	409f4000 	.word	0x409f4000
 8004bb0:	9916f6a6 	.word	0x9916f6a6
 8004bb4:	400a93fc 	.word	0x400a93fc
 8004bb8:	24008e18 	.word	0x24008e18
 8004bbc:	24007d0c 	.word	0x24007d0c
 8004bc0:	24007d14 	.word	0x24007d14
 8004bc4:	24007d12 	.word	0x24007d12
 8004bc8:	2400c22c 	.word	0x2400c22c
 8004bcc:	40000800 	.word	0x40000800
 8004bd0:	24007c7c 	.word	0x24007c7c
 8004bd4:	24002a50 	.word	0x24002a50
 8004bd8:	24007c98 	.word	0x24007c98
 8004bdc:	24007ca0 	.word	0x24007ca0
 8004be0:	24007cf4 	.word	0x24007cf4
 8004be4:	24007cf0 	.word	0x24007cf0
 8004be8:	24002a39 	.word	0x24002a39
 8004bec:	0801af00 	.word	0x0801af00
 8004bf0:	24007e14 	.word	0x24007e14
 8004bf4:	24007c8e 	.word	0x24007c8e
 8004bf8:	0801af24 	.word	0x0801af24
 8004bfc:	2400be5c 	.word	0x2400be5c
 8004c00:	2400bec0 	.word	0x2400bec0
 8004c04:	0801af30 	.word	0x0801af30


void TXSwitch(uint8_t Status)
{

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c08:	2400      	movs	r4, #0
		LED_YELLOW_ON;
	}
	else
	{
		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c0a:	f44f 7800 	mov.w	r8, #512	; 0x200
 8004c0e:	f04f 0901 	mov.w	r9, #1
		SendWSPR();
 8004c12:	f7fe fca5 	bl	8003560 <SendWSPR>
		GPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c16:	a906      	add	r1, sp, #24
 8004c18:	48b7      	ldr	r0, [pc, #732]	; (8004ef8 <UserInput+0x550>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c1a:	940a      	str	r4, [sp, #40]	; 0x28
 8004c1c:	e9cd 6408 	strd	r6, r4, [sp, #32]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c20:	e9cd 8906 	strd	r8, r9, [sp, #24]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c24:	f004 fb34 	bl	8009290 <HAL_GPIO_Init>

		RELAY_TX_OFF;
 8004c28:	4622      	mov	r2, r4
 8004c2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c2e:	48b3      	ldr	r0, [pc, #716]	; (8004efc <UserInput+0x554>)
 8004c30:	f004 fc6e 	bl	8009510 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8004c34:	4622      	mov	r2, r4
 8004c36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c3a:	48b1      	ldr	r0, [pc, #708]	; (8004f00 <UserInput+0x558>)
 8004c3c:	f004 fc68 	bl	8009510 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8004c40:	4bb0      	ldr	r3, [pc, #704]	; (8004f04 <UserInput+0x55c>)
		TXCarrierEnabled = 1;
		LED_GREEN_ON;
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8004c42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c46:	48ad      	ldr	r0, [pc, #692]	; (8004efc <UserInput+0x554>)
 8004c48:	2201      	movs	r2, #1
		TransmissionEnabled = 0;
 8004c4a:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c4c:	940a      	str	r4, [sp, #40]	; 0x28
 8004c4e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004c52:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8004c56:	f004 fc5b 	bl	8009510 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 8004c5a:	4623      	mov	r3, r4
 8004c5c:	4622      	mov	r2, r4
 8004c5e:	2110      	movs	r1, #16
 8004c60:	48a9      	ldr	r0, [pc, #676]	; (8004f08 <UserInput+0x560>)
 8004c62:	f002 ff69 	bl	8007b38 <HAL_DAC_SetValue>
		TXCarrierEnabled = 0;
 8004c66:	4ba9      	ldr	r3, [pc, #676]	; (8004f0c <UserInput+0x564>)
		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c68:	2202      	movs	r2, #2
		GPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c6a:	a906      	add	r1, sp, #24
		TXCarrierEnabled = 0;
 8004c6c:	701c      	strb	r4, [r3, #0]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c6e:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c70:	48a1      	ldr	r0, [pc, #644]	; (8004ef8 <UserInput+0x550>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c72:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004c76:	e9cd 8906 	strd	r8, r9, [sp, #24]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c7a:	f004 fb09 	bl	8009290 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 8004c7e:	4622      	mov	r2, r4
 8004c80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c84:	489e      	ldr	r0, [pc, #632]	; (8004f00 <UserInput+0x558>)
 8004c86:	f004 fc43 	bl	8009510 <HAL_GPIO_WritePin>
		WSPRBeaconState = NO_FIX;
 8004c8a:	702c      	strb	r4, [r5, #0]
 8004c8c:	e694      	b.n	80049b8 <UserInput+0x10>
			volume += 0.1;
 8004c8e:	4ba0      	ldr	r3, [pc, #640]	; (8004f10 <UserInput+0x568>)
			if (volume > 1.0)
 8004c90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			volume += 0.1;
 8004c94:	ed93 7a00 	vldr	s14, [r3]
 8004c98:	ed9f 5b95 	vldr	d5, [pc, #596]	; 8004ef0 <UserInput+0x548>
 8004c9c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004ca0:	ee37 7b05 	vadd.f64	d7, d7, d5
 8004ca4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004ca8:	fec7 7ae6 	vminnm.f32	s15, s15, s13
 8004cac:	edc3 7a00 	vstr	s15, [r3]
 8004cb0:	e6f2      	b.n	8004a98 <UserInput+0xf0>
			SetBW((Bwidth)Wide);  break;
 8004cb2:	2001      	movs	r0, #1
 8004cb4:	f7fc f8fe 	bl	8000eb4 <SetBW>
 8004cb8:	e6ee      	b.n	8004a98 <UserInput+0xf0>
	__HAL_RCC_PLL2FRACN_DISABLE();
 8004cba:	4a96      	ldr	r2, [pc, #600]	; (8004f14 <UserInput+0x56c>)
	for (i=0; i< 50; i++)
 8004cbc:	2100      	movs	r1, #0
	__HAL_RCC_PLL2FRACN_DISABLE();
 8004cbe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004cc0:	f023 0310 	bic.w	r3, r3, #16
 8004cc4:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 8004cc6:	9106      	str	r1, [sp, #24]
 8004cc8:	9b06      	ldr	r3, [sp, #24]
 8004cca:	2b31      	cmp	r3, #49	; 0x31
 8004ccc:	d80b      	bhi.n	8004ce6 <UserInput+0x33e>
		i++;
 8004cce:	9b06      	ldr	r3, [sp, #24]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	9306      	str	r3, [sp, #24]
		i--;
 8004cd4:	9b06      	ldr	r3, [sp, #24]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	9306      	str	r3, [sp, #24]
	for (i=0; i< 50; i++)
 8004cda:	9b06      	ldr	r3, [sp, #24]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	9306      	str	r3, [sp, #24]
 8004ce0:	9b06      	ldr	r3, [sp, #24]
 8004ce2:	2b31      	cmp	r3, #49	; 0x31
 8004ce4:	d9f3      	bls.n	8004cce <UserInput+0x326>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 8004ce6:	4a8b      	ldr	r2, [pc, #556]	; (8004f14 <UserInput+0x56c>)
 8004ce8:	4b8b      	ldr	r3, [pc, #556]	; (8004f18 <UserInput+0x570>)
 8004cea:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004cec:	400b      	ands	r3, r1
 8004cee:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004cf2:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 8004cf4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004cf6:	f043 0310 	orr.w	r3, r3, #16
 8004cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004cfc:	e6cc      	b.n	8004a98 <UserInput+0xf0>
			SetMode((Mode)USB); break;
 8004cfe:	2002      	movs	r0, #2
 8004d00:	f7fc fa4c 	bl	800119c <SetMode>
 8004d04:	e6c8      	b.n	8004a98 <UserInput+0xf0>
			SetFstep(5);  break;
 8004d06:	2005      	movs	r0, #5
 8004d08:	f7fc fa82 	bl	8001210 <SetFstep>
 8004d0c:	e6c4      	b.n	8004a98 <UserInput+0xf0>
			FplusClicked(2); break;
 8004d0e:	2002      	movs	r0, #2
 8004d10:	f7fc faa0 	bl	8001254 <FplusClicked>
 8004d14:	e6c0      	b.n	8004a98 <UserInput+0xf0>
			FminusClicked(2); break;
 8004d16:	2002      	movs	r0, #2
 8004d18:	f7fc fb06 	bl	8001328 <FminusClicked>
 8004d1c:	e6bc      	b.n	8004a98 <UserInput+0xf0>
			volume -= 0.1;
 8004d1e:	4b7c      	ldr	r3, [pc, #496]	; (8004f10 <UserInput+0x568>)
			if (volume < 0)
 8004d20:	2200      	movs	r2, #0
			volume -= 0.1;
 8004d22:	ed93 7a00 	vldr	s14, [r3]
 8004d26:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8004ef0 <UserInput+0x548>
 8004d2a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004d2e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d32:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (volume < 0)
 8004d36:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			volume -= 0.1;
 8004d3e:	bf54      	ite	pl
 8004d40:	ed83 7a00 	vstrpl	s14, [r3]
				volume = 0;
 8004d44:	601a      	strmi	r2, [r3, #0]
 8004d46:	e6a7      	b.n	8004a98 <UserInput+0xf0>
			TxPowerOut = LOW_POWER_OUT;
 8004d48:	4b74      	ldr	r3, [pc, #464]	; (8004f1c <UserInput+0x574>)
 8004d4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d4e:	601a      	str	r2, [r3, #0]
			break;
 8004d50:	e6a2      	b.n	8004a98 <UserInput+0xf0>
			SendCWMessage(0); break;
 8004d52:	2000      	movs	r0, #0
 8004d54:	f7fb ff28 	bl	8000ba8 <SendCWMessage>
 8004d58:	e69e      	b.n	8004a98 <UserInput+0xf0>
			SetFstep(9); break;
 8004d5a:	2009      	movs	r0, #9
 8004d5c:	f7fc fa58 	bl	8001210 <SetFstep>
 8004d60:	e69a      	b.n	8004a98 <UserInput+0xf0>
			SetFstep(0); break;
 8004d62:	2000      	movs	r0, #0
 8004d64:	f7fc fa54 	bl	8001210 <SetFstep>
 8004d68:	e696      	b.n	8004a98 <UserInput+0xf0>
			SetFstep(1); break;
 8004d6a:	2001      	movs	r0, #1
 8004d6c:	f7fc fa50 	bl	8001210 <SetFstep>
 8004d70:	e692      	b.n	8004a98 <UserInput+0xf0>
			SetFstep(2);  break;
 8004d72:	2002      	movs	r0, #2
 8004d74:	f7fc fa4c 	bl	8001210 <SetFstep>
 8004d78:	e68e      	b.n	8004a98 <UserInput+0xf0>
			SetFstep(3);  break;
 8004d7a:	2003      	movs	r0, #3
 8004d7c:	f7fc fa48 	bl	8001210 <SetFstep>
 8004d80:	e68a      	b.n	8004a98 <UserInput+0xf0>
			SetFstep(4);  break;
 8004d82:	2004      	movs	r0, #4
 8004d84:	f7fc fa44 	bl	8001210 <SetFstep>
 8004d88:	e686      	b.n	8004a98 <UserInput+0xf0>
		if (LastTXFreq != LOfreq)
 8004d8a:	4d65      	ldr	r5, [pc, #404]	; (8004f20 <UserInput+0x578>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d8c:	2300      	movs	r3, #0
		if (LastTXFreq != LOfreq)
 8004d8e:	4c65      	ldr	r4, [pc, #404]	; (8004f24 <UserInput+0x57c>)
		TransmissionEnabled = 1;
 8004d90:	2101      	movs	r1, #1
		if (LastTXFreq != LOfreq)
 8004d92:	ed95 0a00 	vldr	s0, [r5]
 8004d96:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 8004d9a:	4a5a      	ldr	r2, [pc, #360]	; (8004f04 <UserInput+0x55c>)
		if (LastTXFreq != LOfreq)
 8004d9c:	eef4 7a40 	vcmp.f32	s15, s0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004da0:	930a      	str	r3, [sp, #40]	; 0x28
		TransmissionEnabled = 1;
 8004da2:	7011      	strb	r1, [r2, #0]
		if (LastTXFreq != LOfreq)
 8004da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004da8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004dac:	e9cd 3308 	strd	r3, r3, [sp, #32]
		if (LastTXFreq != LOfreq)
 8004db0:	f040 810e 	bne.w	8004fd0 <UserInput+0x628>
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004db4:	2400      	movs	r4, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004db6:	f44f 7600 	mov.w	r6, #512	; 0x200
 8004dba:	2702      	movs	r7, #2
 8004dbc:	f04f 0800 	mov.w	r8, #0
 8004dc0:	f04f 0903 	mov.w	r9, #3
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dc4:	a906      	add	r1, sp, #24
 8004dc6:	484c      	ldr	r0, [pc, #304]	; (8004ef8 <UserInput+0x550>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004dc8:	940a      	str	r4, [sp, #40]	; 0x28
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004dca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004dce:	e9cd 8908 	strd	r8, r9, [sp, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dd2:	f004 fa5d 	bl	8009290 <HAL_GPIO_Init>
		RELAY_TX_ON;
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ddc:	4847      	ldr	r0, [pc, #284]	; (8004efc <UserInput+0x554>)
 8004dde:	f004 fb97 	bl	8009510 <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8004de2:	2201      	movs	r2, #1
 8004de4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004de8:	4845      	ldr	r0, [pc, #276]	; (8004f00 <UserInput+0x558>)
 8004dea:	f004 fb91 	bl	8009510 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8004dee:	4622      	mov	r2, r4
 8004df0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004df4:	4841      	ldr	r0, [pc, #260]	; (8004efc <UserInput+0x554>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004df6:	940a      	str	r4, [sp, #40]	; 0x28
 8004df8:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004dfc:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8004e00:	f004 fb86 	bl	8009510 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 8004e04:	4b45      	ldr	r3, [pc, #276]	; (8004f1c <UserInput+0x574>)
 8004e06:	4622      	mov	r2, r4
 8004e08:	2110      	movs	r1, #16
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	483e      	ldr	r0, [pc, #248]	; (8004f08 <UserInput+0x560>)
 8004e0e:	f002 fe93 	bl	8007b38 <HAL_DAC_SetValue>
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e12:	a906      	add	r1, sp, #24
 8004e14:	4838      	ldr	r0, [pc, #224]	; (8004ef8 <UserInput+0x550>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004e16:	940a      	str	r4, [sp, #40]	; 0x28
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e18:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004e1c:	e9cd 8908 	strd	r8, r9, [sp, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e20:	f004 fa36 	bl	8009290 <HAL_GPIO_Init>
		TXCarrierEnabled = 1;
 8004e24:	2201      	movs	r2, #1
 8004e26:	4b39      	ldr	r3, [pc, #228]	; (8004f0c <UserInput+0x564>)
		LED_GREEN_ON;
 8004e28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e2c:	4834      	ldr	r0, [pc, #208]	; (8004f00 <UserInput+0x558>)
		TXCarrierEnabled = 1;
 8004e2e:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 8004e30:	f004 fb6e 	bl	8009510 <HAL_GPIO_WritePin>
	}
}
 8004e34:	e630      	b.n	8004a98 <UserInput+0xf0>
			SetAGC((Agctype)Slow);  break;
 8004e36:	2001      	movs	r0, #1
 8004e38:	f7fc f89e 	bl	8000f78 <SetAGC>
 8004e3c:	e62c      	b.n	8004a98 <UserInput+0xf0>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e3e:	2400      	movs	r4, #0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004e40:	2302      	movs	r3, #2
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e42:	f44f 7600 	mov.w	r6, #512	; 0x200
 8004e46:	2701      	movs	r7, #1
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e48:	a906      	add	r1, sp, #24
 8004e4a:	482b      	ldr	r0, [pc, #172]	; (8004ef8 <UserInput+0x550>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004e4c:	9308      	str	r3, [sp, #32]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e4e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e52:	e9cd 6706 	strd	r6, r7, [sp, #24]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e56:	f004 fa1b 	bl	8009290 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e60:	4826      	ldr	r0, [pc, #152]	; (8004efc <UserInput+0x554>)
 8004e62:	f004 fb55 	bl	8009510 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8004e66:	4622      	mov	r2, r4
 8004e68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e6c:	4824      	ldr	r0, [pc, #144]	; (8004f00 <UserInput+0x558>)
 8004e6e:	f004 fb4f 	bl	8009510 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8004e72:	4b24      	ldr	r3, [pc, #144]	; (8004f04 <UserInput+0x55c>)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8004e74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e78:	4820      	ldr	r0, [pc, #128]	; (8004efc <UserInput+0x554>)
 8004e7a:	2201      	movs	r2, #1
		TransmissionEnabled = 0;
 8004e7c:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e7e:	940a      	str	r4, [sp, #40]	; 0x28
 8004e80:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004e84:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8004e88:	f004 fb42 	bl	8009510 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 8004e8c:	4623      	mov	r3, r4
 8004e8e:	4622      	mov	r2, r4
 8004e90:	2110      	movs	r1, #16
 8004e92:	481d      	ldr	r0, [pc, #116]	; (8004f08 <UserInput+0x560>)
 8004e94:	f002 fe50 	bl	8007b38 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e98:	2202      	movs	r2, #2
 8004e9a:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e9c:	a906      	add	r1, sp, #24
 8004e9e:	4816      	ldr	r0, [pc, #88]	; (8004ef8 <UserInput+0x550>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ea0:	e9cd 2308 	strd	r2, r3, [sp, #32]
		TXCarrierEnabled = 0;
 8004ea4:	4b19      	ldr	r3, [pc, #100]	; (8004f0c <UserInput+0x564>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ea6:	e9cd 6706 	strd	r6, r7, [sp, #24]
		TXCarrierEnabled = 0;
 8004eaa:	701c      	strb	r4, [r3, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004eac:	f004 f9f0 	bl	8009290 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 8004eb0:	4622      	mov	r2, r4
 8004eb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004eb6:	4812      	ldr	r0, [pc, #72]	; (8004f00 <UserInput+0x558>)
 8004eb8:	f004 fb2a 	bl	8009510 <HAL_GPIO_WritePin>
}
 8004ebc:	e5ec      	b.n	8004a98 <UserInput+0xf0>
			SetBW((Bwidth)Narrow);  break;
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	f7fb fff8 	bl	8000eb4 <SetBW>
 8004ec4:	e5e8      	b.n	8004a98 <UserInput+0xf0>
			SetMode((Mode)LSB); break;
 8004ec6:	2001      	movs	r0, #1
 8004ec8:	f7fc f968 	bl	800119c <SetMode>
 8004ecc:	e5e4      	b.n	8004a98 <UserInput+0xf0>
			keyer_speed -= 1;
 8004ece:	4b16      	ldr	r3, [pc, #88]	; (8004f28 <UserInput+0x580>)
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	3801      	subs	r0, #1
			if (keyer_speed < 3)
 8004ed4:	2802      	cmp	r0, #2
 8004ed6:	dc76      	bgt.n	8004fc6 <UserInput+0x61e>
				keyer_speed = 3;
 8004ed8:	2203      	movs	r2, #3
 8004eda:	4610      	mov	r0, r2
 8004edc:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 8004ede:	e5d9      	b.n	8004a94 <UserInput+0xec>
			SetAGC((Agctype)Fast);  break;
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	f7fc f849 	bl	8000f78 <SetAGC>
 8004ee6:	e5d7      	b.n	8004a98 <UserInput+0xf0>
			SetMode((Mode)CW); break;
 8004ee8:	2003      	movs	r0, #3
 8004eea:	f7fc f957 	bl	800119c <SetMode>
 8004eee:	e5d3      	b.n	8004a98 <UserInput+0xf0>
 8004ef0:	9999999a 	.word	0x9999999a
 8004ef4:	3fb99999 	.word	0x3fb99999
 8004ef8:	58020800 	.word	0x58020800
 8004efc:	58020c00 	.word	0x58020c00
 8004f00:	58020400 	.word	0x58020400
 8004f04:	24007d04 	.word	0x24007d04
 8004f08:	2400bf28 	.word	0x2400bf28
 8004f0c:	24007cf8 	.word	0x24007cf8
 8004f10:	2400d3ec 	.word	0x2400d3ec
 8004f14:	58024400 	.word	0x58024400
 8004f18:	ffff0007 	.word	0xffff0007
 8004f1c:	24007d08 	.word	0x24007d08
 8004f20:	24007c74 	.word	0x24007c74
 8004f24:	24007c80 	.word	0x24007c80
 8004f28:	2400c22c 	.word	0x2400c22c
	__HAL_RCC_PLL2FRACN_DISABLE();
 8004f2c:	4a2b      	ldr	r2, [pc, #172]	; (8004fdc <UserInput+0x634>)
	for (i=0; i< 50; i++)
 8004f2e:	2100      	movs	r1, #0
	__HAL_RCC_PLL2FRACN_DISABLE();
 8004f30:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f32:	f023 0310 	bic.w	r3, r3, #16
 8004f36:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 8004f38:	9105      	str	r1, [sp, #20]
 8004f3a:	9b05      	ldr	r3, [sp, #20]
 8004f3c:	2b31      	cmp	r3, #49	; 0x31
 8004f3e:	d80b      	bhi.n	8004f58 <UserInput+0x5b0>
		i++;
 8004f40:	9b05      	ldr	r3, [sp, #20]
 8004f42:	3301      	adds	r3, #1
 8004f44:	9305      	str	r3, [sp, #20]
		i--;
 8004f46:	9b05      	ldr	r3, [sp, #20]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	9305      	str	r3, [sp, #20]
	for (i=0; i< 50; i++)
 8004f4c:	9b05      	ldr	r3, [sp, #20]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	9305      	str	r3, [sp, #20]
 8004f52:	9b05      	ldr	r3, [sp, #20]
 8004f54:	2b31      	cmp	r3, #49	; 0x31
 8004f56:	d9f3      	bls.n	8004f40 <UserInput+0x598>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 8004f58:	4a20      	ldr	r2, [pc, #128]	; (8004fdc <UserInput+0x634>)
 8004f5a:	4b21      	ldr	r3, [pc, #132]	; (8004fe0 <UserInput+0x638>)
 8004f5c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004f5e:	400b      	ands	r3, r1
 8004f60:	f443 63dc 	orr.w	r3, r3, #1760	; 0x6e0
 8004f64:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 8004f66:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f68:	f043 0310 	orr.w	r3, r3, #16
 8004f6c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004f6e:	e593      	b.n	8004a98 <UserInput+0xf0>
			SetMode((Mode)AM); break;
 8004f70:	2000      	movs	r0, #0
 8004f72:	f7fc f913 	bl	800119c <SetMode>
 8004f76:	e58f      	b.n	8004a98 <UserInput+0xf0>
			uwTick = SystemSeconds = SystemMinutes = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	481a      	ldr	r0, [pc, #104]	; (8004fe4 <UserInput+0x63c>)
 8004f7c:	491a      	ldr	r1, [pc, #104]	; (8004fe8 <UserInput+0x640>)
 8004f7e:	4a1b      	ldr	r2, [pc, #108]	; (8004fec <UserInput+0x644>)
 8004f80:	6003      	str	r3, [r0, #0]
 8004f82:	600b      	str	r3, [r1, #0]
 8004f84:	6013      	str	r3, [r2, #0]
					break;
 8004f86:	e587      	b.n	8004a98 <UserInput+0xf0>
			SetWSPRPLLCoeff((double)LOfreq, FracDivCoeff, FracPWMCoeff);
 8004f88:	4b19      	ldr	r3, [pc, #100]	; (8004ff0 <UserInput+0x648>)
 8004f8a:	491a      	ldr	r1, [pc, #104]	; (8004ff4 <UserInput+0x64c>)
 8004f8c:	ed93 0a00 	vldr	s0, [r3]
 8004f90:	4819      	ldr	r0, [pc, #100]	; (8004ff8 <UserInput+0x650>)
 8004f92:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8004f96:	f7ff fa6b 	bl	8004470 <SetWSPRPLLCoeff>
			TransmittingWSPR = 1;
 8004f9a:	4b18      	ldr	r3, [pc, #96]	; (8004ffc <UserInput+0x654>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	701a      	strb	r2, [r3, #0]
			SendWSPR();
 8004fa0:	f7fe fade 	bl	8003560 <SendWSPR>
			break;
 8004fa4:	e578      	b.n	8004a98 <UserInput+0xf0>
			if (ShowWF)
 8004fa6:	4b16      	ldr	r3, [pc, #88]	; (8005000 <UserInput+0x658>)
 8004fa8:	781a      	ldrb	r2, [r3, #0]
 8004faa:	b172      	cbz	r2, 8004fca <UserInput+0x622>
				ShowWF=0;
 8004fac:	2200      	movs	r2, #0
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	e572      	b.n	8004a98 <UserInput+0xf0>
			TxPowerOut = MAX_POWER_OUT;
 8004fb2:	4b14      	ldr	r3, [pc, #80]	; (8005004 <UserInput+0x65c>)
 8004fb4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004fb8:	601a      	str	r2, [r3, #0]
			break;
 8004fba:	e56d      	b.n	8004a98 <UserInput+0xf0>
			TxPowerOut = MID_POWER_OUT;
 8004fbc:	4b11      	ldr	r3, [pc, #68]	; (8005004 <UserInput+0x65c>)
 8004fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fc2:	601a      	str	r2, [r3, #0]
			break;
 8004fc4:	e568      	b.n	8004a98 <UserInput+0xf0>
			keyer_speed += 1;
 8004fc6:	6018      	str	r0, [r3, #0]
 8004fc8:	e564      	b.n	8004a94 <UserInput+0xec>
				ShowWF=1;
 8004fca:	2201      	movs	r2, #1
 8004fcc:	701a      	strb	r2, [r3, #0]
 8004fce:	e563      	b.n	8004a98 <UserInput+0xf0>
			SetTXPLL(LOfreq);
 8004fd0:	f7ff fbb6 	bl	8004740 <SetTXPLL>
			LastTXFreq = LOfreq;
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	6023      	str	r3, [r4, #0]
 8004fd8:	e6ec      	b.n	8004db4 <UserInput+0x40c>
 8004fda:	bf00      	nop
 8004fdc:	58024400 	.word	0x58024400
 8004fe0:	ffff0007 	.word	0xffff0007
 8004fe4:	24007cf0 	.word	0x24007cf0
 8004fe8:	24007cf4 	.word	0x24007cf4
 8004fec:	2400d3f8 	.word	0x2400d3f8
 8004ff0:	24007c74 	.word	0x24007c74
 8004ff4:	24006c58 	.word	0x24006c58
 8004ff8:	24006c4c 	.word	0x24006c4c
 8004ffc:	24007d05 	.word	0x24007d05
 8005000:	24007cc4 	.word	0x24007cc4
 8005004:	24007d08 	.word	0x24007d08

08005008 <TXSwitch>:
{
 8005008:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800500a:	2300      	movs	r3, #0
{
 800500c:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800500e:	e9cd 3300 	strd	r3, r3, [sp]
 8005012:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005016:	9304      	str	r3, [sp, #16]
	if (Status)
 8005018:	b378      	cbz	r0, 800507a <TXSwitch+0x72>
		if (LastTXFreq != LOfreq)
 800501a:	4d27      	ldr	r5, [pc, #156]	; (80050b8 <TXSwitch+0xb0>)
		TransmissionEnabled = 1;
 800501c:	2201      	movs	r2, #1
		if (LastTXFreq != LOfreq)
 800501e:	4c27      	ldr	r4, [pc, #156]	; (80050bc <TXSwitch+0xb4>)
 8005020:	ed95 0a00 	vldr	s0, [r5]
 8005024:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 8005028:	4b25      	ldr	r3, [pc, #148]	; (80050c0 <TXSwitch+0xb8>)
		if (LastTXFreq != LOfreq)
 800502a:	eef4 7a40 	vcmp.f32	s15, s0
		TransmissionEnabled = 1;
 800502e:	701a      	strb	r2, [r3, #0]
		if (LastTXFreq != LOfreq)
 8005030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005034:	d11c      	bne.n	8005070 <TXSwitch+0x68>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005036:	2200      	movs	r2, #0
 8005038:	2303      	movs	r3, #3
 800503a:	f44f 7400 	mov.w	r4, #512	; 0x200
 800503e:	2502      	movs	r5, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005040:	4669      	mov	r1, sp
 8005042:	4820      	ldr	r0, [pc, #128]	; (80050c4 <TXSwitch+0xbc>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005044:	e9cd 2302 	strd	r2, r3, [sp, #8]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005048:	2300      	movs	r3, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800504a:	e9cd 4500 	strd	r4, r5, [sp]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800504e:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005050:	f004 f91e 	bl	8009290 <HAL_GPIO_Init>
		RELAY_TX_ON;
 8005054:	2201      	movs	r2, #1
 8005056:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800505a:	481b      	ldr	r0, [pc, #108]	; (80050c8 <TXSwitch+0xc0>)
 800505c:	f004 fa58 	bl	8009510 <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8005060:	2201      	movs	r2, #1
 8005062:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005066:	4819      	ldr	r0, [pc, #100]	; (80050cc <TXSwitch+0xc4>)
 8005068:	f004 fa52 	bl	8009510 <HAL_GPIO_WritePin>
}
 800506c:	b007      	add	sp, #28
 800506e:	bd30      	pop	{r4, r5, pc}
			SetTXPLL(LOfreq);
 8005070:	f7ff fb66 	bl	8004740 <SetTXPLL>
			LastTXFreq = LOfreq;
 8005074:	682b      	ldr	r3, [r5, #0]
 8005076:	6023      	str	r3, [r4, #0]
 8005078:	e7dd      	b.n	8005036 <TXSwitch+0x2e>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800507a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80050b0 <TXSwitch+0xa8>
 800507e:	4604      	mov	r4, r0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005080:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005082:	4669      	mov	r1, sp
 8005084:	480f      	ldr	r0, [pc, #60]	; (80050c4 <TXSwitch+0xbc>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005086:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005088:	ed8d 7b00 	vstr	d7, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800508c:	f004 f900 	bl	8009290 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8005090:	4622      	mov	r2, r4
 8005092:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005096:	480c      	ldr	r0, [pc, #48]	; (80050c8 <TXSwitch+0xc0>)
 8005098:	f004 fa3a 	bl	8009510 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 800509c:	4622      	mov	r2, r4
 800509e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050a2:	480a      	ldr	r0, [pc, #40]	; (80050cc <TXSwitch+0xc4>)
 80050a4:	f004 fa34 	bl	8009510 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 80050a8:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <TXSwitch+0xb8>)
 80050aa:	701c      	strb	r4, [r3, #0]
}
 80050ac:	b007      	add	sp, #28
 80050ae:	bd30      	pop	{r4, r5, pc}
 80050b0:	00000200 	.word	0x00000200
 80050b4:	00000001 	.word	0x00000001
 80050b8:	24007c74 	.word	0x24007c74
 80050bc:	24007c80 	.word	0x24007c80
 80050c0:	24007d04 	.word	0x24007d04
 80050c4:	58020800 	.word	0x58020800
 80050c8:	58020c00 	.word	0x58020c00
 80050cc:	58020400 	.word	0x58020400

080050d0 <CarrierEnable>:
{
 80050d0:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050d2:	2400      	movs	r4, #0
{
 80050d4:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050d6:	e9cd 4400 	strd	r4, r4, [sp]
 80050da:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80050de:	9404      	str	r4, [sp, #16]
	if (Status)
 80050e0:	b320      	cbz	r0, 800512c <CarrierEnable+0x5c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80050e2:	4622      	mov	r2, r4
 80050e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050e8:	4822      	ldr	r0, [pc, #136]	; (8005174 <CarrierEnable+0xa4>)
 80050ea:	f004 fa11 	bl	8009510 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 80050ee:	4b22      	ldr	r3, [pc, #136]	; (8005178 <CarrierEnable+0xa8>)
 80050f0:	4622      	mov	r2, r4
 80050f2:	2110      	movs	r1, #16
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4821      	ldr	r0, [pc, #132]	; (800517c <CarrierEnable+0xac>)
 80050f8:	f002 fd1e 	bl	8007b38 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80050fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005100:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005102:	4669      	mov	r1, sp
 8005104:	481e      	ldr	r0, [pc, #120]	; (8005180 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005106:	9404      	str	r4, [sp, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005108:	e9cd 2300 	strd	r2, r3, [sp]
 800510c:	2200      	movs	r2, #0
 800510e:	2303      	movs	r3, #3
 8005110:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005114:	f004 f8bc 	bl	8009290 <HAL_GPIO_Init>
		TXCarrierEnabled = 1;
 8005118:	2201      	movs	r2, #1
 800511a:	4b1a      	ldr	r3, [pc, #104]	; (8005184 <CarrierEnable+0xb4>)
		LED_GREEN_ON;
 800511c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005120:	4819      	ldr	r0, [pc, #100]	; (8005188 <CarrierEnable+0xb8>)
		TXCarrierEnabled = 1;
 8005122:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 8005124:	f004 f9f4 	bl	8009510 <HAL_GPIO_WritePin>
}
 8005128:	b007      	add	sp, #28
 800512a:	bd30      	pop	{r4, r5, pc}
 800512c:	4605      	mov	r5, r0
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800512e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005132:	4810      	ldr	r0, [pc, #64]	; (8005174 <CarrierEnable+0xa4>)
 8005134:	2201      	movs	r2, #1
 8005136:	f004 f9eb 	bl	8009510 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 800513a:	462b      	mov	r3, r5
 800513c:	462a      	mov	r2, r5
 800513e:	2110      	movs	r1, #16
 8005140:	480e      	ldr	r0, [pc, #56]	; (800517c <CarrierEnable+0xac>)
 8005142:	f002 fcf9 	bl	8007b38 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800514a:	2301      	movs	r3, #1
		TXCarrierEnabled = 0;
 800514c:	480d      	ldr	r0, [pc, #52]	; (8005184 <CarrierEnable+0xb4>)
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800514e:	4669      	mov	r1, sp
		TXCarrierEnabled = 0;
 8005150:	7005      	strb	r5, [r0, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005152:	480b      	ldr	r0, [pc, #44]	; (8005180 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005154:	e9cd 2300 	strd	r2, r3, [sp]
 8005158:	2300      	movs	r3, #0
 800515a:	2202      	movs	r2, #2
 800515c:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005160:	f004 f896 	bl	8009290 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 8005164:	462a      	mov	r2, r5
 8005166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800516a:	4807      	ldr	r0, [pc, #28]	; (8005188 <CarrierEnable+0xb8>)
 800516c:	f004 f9d0 	bl	8009510 <HAL_GPIO_WritePin>
}
 8005170:	b007      	add	sp, #28
 8005172:	bd30      	pop	{r4, r5, pc}
 8005174:	58020c00 	.word	0x58020c00
 8005178:	24007d08 	.word	0x24007d08
 800517c:	2400bf28 	.word	0x2400bf28
 8005180:	58020800 	.word	0x58020800
 8005184:	24007cf8 	.word	0x24007cf8
 8005188:	58020400 	.word	0x58020400

0800518c <Error_Handler>:
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 800518c:	4e09      	ldr	r6, [pc, #36]	; (80051b4 <Error_Handler+0x28>)
{
 800518e:	4d0a      	ldr	r5, [pc, #40]	; (80051b8 <Error_Handler+0x2c>)
 8005190:	4c0a      	ldr	r4, [pc, #40]	; (80051bc <Error_Handler+0x30>)
 8005192:	b508      	push	{r3, lr}
 8005194:	6833      	ldr	r3, [r6, #0]
 8005196:	fb05 f303 	mul.w	r3, r5, r3
 800519a:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 800519e:	d200      	bcs.n	80051a2 <Error_Handler+0x16>
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 80051a0:	e7fe      	b.n	80051a0 <Error_Handler+0x14>
			LED_switch();
 80051a2:	f7fc f92b 	bl	80013fc <LED_switch>
 80051a6:	6833      	ldr	r3, [r6, #0]
 80051a8:	fb05 f303 	mul.w	r3, r5, r3
 80051ac:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 80051b0:	d2f7      	bcs.n	80051a2 <Error_Handler+0x16>
 80051b2:	e7f5      	b.n	80051a0 <Error_Handler+0x14>
 80051b4:	2400c25c 	.word	0x2400c25c
 80051b8:	c28f5c29 	.word	0xc28f5c29
 80051bc:	051eb851 	.word	0x051eb851

080051c0 <SystemClock_Config_For_OC>:
{
 80051c0:	b530      	push	{r4, r5, lr}
 80051c2:	b0cf      	sub	sp, #316	; 0x13c
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051c4:	224c      	movs	r2, #76	; 0x4c
 80051c6:	2100      	movs	r1, #0
 80051c8:	a80a      	add	r0, sp, #40	; 0x28
 80051ca:	f00b fbfd 	bl	80109c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051ce:	2220      	movs	r2, #32
 80051d0:	2100      	movs	r1, #0
 80051d2:	a802      	add	r0, sp, #8
 80051d4:	f00b fbf8 	bl	80109c8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80051d8:	22bc      	movs	r2, #188	; 0xbc
 80051da:	2100      	movs	r1, #0
 80051dc:	a81e      	add	r0, sp, #120	; 0x78
 80051de:	f00b fbf3 	bl	80109c8 <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80051e2:	2002      	movs	r0, #2
 80051e4:	f004 ffa6 	bl	800a134 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80051e8:	4a49      	ldr	r2, [pc, #292]	; (8005310 <SystemClock_Config_For_OC+0x150>)
 80051ea:	2300      	movs	r3, #0
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	6991      	ldr	r1, [r2, #24]
 80051f0:	4b48      	ldr	r3, [pc, #288]	; (8005314 <SystemClock_Config_For_OC+0x154>)
 80051f2:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80051f6:	6191      	str	r1, [r2, #24]
 80051f8:	6991      	ldr	r1, [r2, #24]
 80051fa:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 80051fe:	9101      	str	r1, [sp, #4]
 8005200:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005202:	f041 0101 	orr.w	r1, r1, #1
 8005206:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	9301      	str	r3, [sp, #4]
 8005210:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005212:	6993      	ldr	r3, [r2, #24]
 8005214:	0499      	lsls	r1, r3, #18
 8005216:	d5fc      	bpl.n	8005212 <SystemClock_Config_For_OC+0x52>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005218:	4a3f      	ldr	r2, [pc, #252]	; (8005318 <SystemClock_Config_For_OC+0x158>)
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800521a:	2404      	movs	r4, #4
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800521c:	2501      	movs	r5, #1
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800521e:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005220:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005222:	f023 0303 	bic.w	r3, r3, #3
 8005226:	f043 0302 	orr.w	r3, r3, #2
 800522a:	6293      	str	r3, [r2, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800522c:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLM = 10;
 800522e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005232:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = 2;
 8005234:	9317      	str	r3, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8005236:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8005238:	941a      	str	r4, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800523a:	9418      	str	r4, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800523c:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005240:	2300      	movs	r3, #0
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8005242:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 10;
 8005246:	230a      	movs	r3, #10
 8005248:	e9cd 3215 	strd	r3, r2, [sp, #84]	; 0x54
	XTalFreq += XTalFreq * XTAL_F_ERROR;
 800524c:	4b33      	ldr	r3, [pc, #204]	; (800531c <SystemClock_Config_For_OC+0x15c>)
 800524e:	4a34      	ldr	r2, [pc, #208]	; (8005320 <SystemClock_Config_For_OC+0x160>)
 8005250:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8005252:	2221      	movs	r2, #33	; 0x21
 8005254:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005258:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800525c:	f005 f81a 	bl	800a294 <HAL_RCC_OscConfig>
 8005260:	2800      	cmp	r0, #0
 8005262:	d152      	bne.n	800530a <SystemClock_Config_For_OC+0x14a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005264:	223f      	movs	r2, #63	; 0x3f
 8005266:	2303      	movs	r3, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005268:	4621      	mov	r1, r4
 800526a:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800526c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005270:	2200      	movs	r2, #0
 8005272:	2308      	movs	r3, #8
 8005274:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005278:	2240      	movs	r2, #64	; 0x40
 800527a:	2340      	movs	r3, #64	; 0x40
 800527c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005280:	2340      	movs	r3, #64	; 0x40
 8005282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005286:	e9cd 2308 	strd	r2, r3, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800528a:	f005 fbc9 	bl	800aa20 <HAL_RCC_ClockConfig>
 800528e:	4603      	mov	r3, r0
 8005290:	2800      	cmp	r0, #0
 8005292:	d13a      	bne.n	800530a <SystemClock_Config_For_OC+0x14a>
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8005294:	f44f 6280 	mov.w	r2, #1024	; 0x400
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8005298:	932e      	str	r3, [sp, #184]	; 0xb8
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800529a:	933b      	str	r3, [sp, #236]	; 0xec
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800529c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 80052a0:	9244      	str	r2, [sp, #272]	; 0x110
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80052a2:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80052a6:	4a1f      	ldr	r2, [pc, #124]	; (8005324 <SystemClock_Config_For_OC+0x164>)
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052a8:	a81e      	add	r0, sp, #120	; 0x78
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80052aa:	9346      	str	r3, [sp, #280]	; 0x118
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80052ac:	2304      	movs	r3, #4
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80052ae:	913f      	str	r1, [sp, #252]	; 0xfc
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80052b0:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 80052b4:	2226      	movs	r2, #38	; 0x26
 80052b6:	2318      	movs	r3, #24
 80052b8:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 80052bc:	2202      	movs	r2, #2
 80052be:	2302      	movs	r3, #2
 80052c0:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 80052c4:	2280      	movs	r2, #128	; 0x80
 80052c6:	2300      	movs	r3, #0
 80052c8:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 80052cc:	2200      	movs	r2, #0
 80052ce:	2305      	movs	r3, #5
 80052d0:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 80052d4:	2280      	movs	r2, #128	; 0x80
 80052d6:	2302      	movs	r3, #2
 80052d8:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 80052dc:	2208      	movs	r2, #8
 80052de:	2305      	movs	r3, #5
 80052e0:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
 80052e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052e8:	2300      	movs	r3, #0
 80052ea:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052ee:	f005 fe83 	bl	800aff8 <HAL_RCCEx_PeriphCLKConfig>
 80052f2:	b950      	cbnz	r0, 800530a <SystemClock_Config_For_OC+0x14a>
	HAL_PWREx_EnableUSBVoltageDetector();
 80052f4:	f004 ff42 	bl	800a17c <HAL_PWREx_EnableUSBVoltageDetector>
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_1);
 80052f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80052fc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8005300:	4628      	mov	r0, r5
 8005302:	f005 fa9b 	bl	800a83c <HAL_RCC_MCOConfig>
}
 8005306:	b04f      	add	sp, #316	; 0x13c
 8005308:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 800530a:	f7ff ff3f 	bl	800518c <Error_Handler>
 800530e:	bf00      	nop
 8005310:	58024800 	.word	0x58024800
 8005314:	58000400 	.word	0x58000400
 8005318:	58024400 	.word	0x58024400
 800531c:	24008e1c 	.word	0x24008e1c
 8005320:	4bbebbd3 	.word	0x4bbebbd3
 8005324:	000c0042 	.word	0x000c0042

08005328 <MX_TIM6_Init_Custom_Rate>:
{
 8005328:	b510      	push	{r4, lr}
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800532a:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 800532c:	4c0f      	ldr	r4, [pc, #60]	; (800536c <MX_TIM6_Init_Custom_Rate+0x44>)
 800532e:	4810      	ldr	r0, [pc, #64]	; (8005370 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 8005330:	b084      	sub	sp, #16
	htim6.Init.Period = 9599; //
 8005332:	f242 517f 	movw	r1, #9599	; 0x257f
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005336:	2280      	movs	r2, #128	; 0x80
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005338:	9301      	str	r3, [sp, #4]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800533a:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 800533c:	e9c4 0300 	strd	r0, r3, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005340:	4620      	mov	r0, r4
	htim6.Init.Period = 9599; //
 8005342:	e9c4 3102 	strd	r3, r1, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005346:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800534a:	f006 ff31 	bl	800c1b0 <HAL_TIM_Base_Init>
 800534e:	b950      	cbnz	r0, 8005366 <MX_TIM6_Init_Custom_Rate+0x3e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005350:	4603      	mov	r3, r0
 8005352:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005354:	a901      	add	r1, sp, #4
 8005356:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005358:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800535a:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800535c:	f007 fb62 	bl	800ca24 <HAL_TIMEx_MasterConfigSynchronization>
 8005360:	b908      	cbnz	r0, 8005366 <MX_TIM6_Init_Custom_Rate+0x3e>
}
 8005362:	b004      	add	sp, #16
 8005364:	bd10      	pop	{r4, pc}
		Error_Handler();
 8005366:	f7ff ff11 	bl	800518c <Error_Handler>
 800536a:	bf00      	nop
 800536c:	2400c100 	.word	0x2400c100
 8005370:	40001000 	.word	0x40001000
 8005374:	00000000 	.word	0x00000000

08005378 <main>:
{
 8005378:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800537c:	b0cf      	sub	sp, #316	; 0x13c
	HAL_Init();
 800537e:	f001 f8fb 	bl	8006578 <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8005382:	4add      	ldr	r2, [pc, #884]	; (80056f8 <main+0x380>)
 8005384:	6953      	ldr	r3, [r2, #20]
 8005386:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 800538a:	d111      	bne.n	80053b0 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 800538c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005390:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005394:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005398:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800539c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80053a0:	6953      	ldr	r3, [r2, #20]
 80053a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80053a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80053ac:	f3bf 8f6f 	isb	sy
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053b0:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80053b2:	f8df 8364 	ldr.w	r8, [pc, #868]	; 8005718 <main+0x3a0>
	SystemClock_Config_For_OC();
 80053b6:	f7ff ff03 	bl	80051c0 <SystemClock_Config_For_OC>
	HAL_Delay(20);  //needed for USB setup. USB sometimes (and almost always on an Android phone) does not initialize
 80053ba:	2014      	movs	r0, #20
 80053bc:	f001 f91e 	bl	80065fc <HAL_Delay>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053c0:	9448      	str	r4, [sp, #288]	; 0x120
	HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 80053c2:	48ce      	ldr	r0, [pc, #824]	; (80056fc <main+0x384>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053c4:	2501      	movs	r5, #1
	hadc1.Instance = ADC1;
 80053c6:	f8df b354 	ldr.w	fp, [pc, #852]	; 800571c <main+0x3a4>
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80053ca:	f44f 7680 	mov.w	r6, #256	; 0x100
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80053ce:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80053d2:	f04f 0908 	mov.w	r9, #8
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80053d6:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053da:	e9cd 4444 	strd	r4, r4, [sp, #272]	; 0x110
 80053de:	e9cd 4446 	strd	r4, r4, [sp, #280]	; 0x118
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80053e2:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80053e6:	f042 0204 	orr.w	r2, r2, #4
 80053ea:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 80053ee:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80053f2:	f002 0204 	and.w	r2, r2, #4
 80053f6:	9205      	str	r2, [sp, #20]
 80053f8:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80053fa:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80053fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005402:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 8005406:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 800540a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800540e:	9206      	str	r2, [sp, #24]
 8005410:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005412:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 800541e:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8005422:	f002 0201 	and.w	r2, r2, #1
 8005426:	9207      	str	r2, [sp, #28]
 8005428:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800542a:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 800542e:	f042 0202 	orr.w	r2, r2, #2
 8005432:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 8005436:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 800543a:	f002 0202 	and.w	r2, r2, #2
 800543e:	9208      	str	r2, [sp, #32]
 8005440:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8005442:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8005446:	f042 0208 	orr.w	r2, r2, #8
 800544a:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 800544e:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8005452:	f002 0208 	and.w	r2, r2, #8
 8005456:	9209      	str	r2, [sp, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 8005458:	4622      	mov	r2, r4
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800545a:	9909      	ldr	r1, [sp, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 800545c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8005460:	f004 f856 	bl	8009510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, RXTX_Pin|TX_ENA_Pin, GPIO_PIN_RESET);
 8005464:	4622      	mov	r2, r4
 8005466:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800546a:	48a5      	ldr	r0, [pc, #660]	; (8005700 <main+0x388>)
 800546c:	f004 f850 	bl	8009510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8005470:	4622      	mov	r2, r4
 8005472:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005476:	48a3      	ldr	r0, [pc, #652]	; (8005704 <main+0x38c>)
 8005478:	f004 f84a 	bl	8009510 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = IN_SW01_Pin;
 800547c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005480:	2100      	movs	r1, #0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005482:	9546      	str	r5, [sp, #280]	; 0x118
	GPIO_InitStruct.Pin = IN_SW01_Pin;
 8005484:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
	HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 8005488:	a944      	add	r1, sp, #272	; 0x110
 800548a:	489f      	ldr	r0, [pc, #636]	; (8005708 <main+0x390>)
 800548c:	f003 ff00 	bl	8009290 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SwInt1_Pin;
 8005490:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005494:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005498:	9546      	str	r5, [sp, #280]	; 0x118
	GPIO_InitStruct.Pin = SwInt1_Pin;
 800549a:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
	HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 800549e:	a944      	add	r1, sp, #272	; 0x110
 80054a0:	4899      	ldr	r0, [pc, #612]	; (8005708 <main+0x390>)
 80054a2:	f003 fef5 	bl	8009290 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 80054a6:	20c0      	movs	r0, #192	; 0xc0
 80054a8:	2100      	movs	r1, #0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054aa:	9546      	str	r5, [sp, #280]	; 0x118
	GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 80054ac:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054b0:	a944      	add	r1, sp, #272	; 0x110
 80054b2:	4894      	ldr	r0, [pc, #592]	; (8005704 <main+0x38c>)
 80054b4:	f003 feec 	bl	8009290 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 80054b8:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 80054bc:	2101      	movs	r1, #1
 80054be:	ed9f 8b78 	vldr	d8, [pc, #480]	; 80056a0 <main+0x328>
 80054c2:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054c6:	a944      	add	r1, sp, #272	; 0x110
 80054c8:	488c      	ldr	r0, [pc, #560]	; (80056fc <main+0x384>)
	GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 80054ca:	ed8d 8b46 	vstr	d8, [sp, #280]	; 0x118
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054ce:	f003 fedf 	bl	8009290 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054d2:	a944      	add	r1, sp, #272	; 0x110
 80054d4:	488a      	ldr	r0, [pc, #552]	; (8005700 <main+0x388>)
	GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 80054d6:	ed9f 7b74 	vldr	d7, [pc, #464]	; 80056a8 <main+0x330>
 80054da:	ed8d 7b44 	vstr	d7, [sp, #272]	; 0x110
 80054de:	ed9f 7b74 	vldr	d7, [pc, #464]	; 80056b0 <main+0x338>
 80054e2:	ed8d 7b46 	vstr	d7, [sp, #280]	; 0x118
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054e6:	f003 fed3 	bl	8009290 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054ea:	a944      	add	r1, sp, #272	; 0x110
 80054ec:	4886      	ldr	r0, [pc, #536]	; (8005708 <main+0x390>)
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80054ee:	9448      	str	r4, [sp, #288]	; 0x120
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80054f0:	ed9f 7b71 	vldr	d7, [pc, #452]	; 80056b8 <main+0x340>
 80054f4:	ed8d 7b44 	vstr	d7, [sp, #272]	; 0x110
 80054f8:	ed9f 7b71 	vldr	d7, [pc, #452]	; 80056c0 <main+0x348>
 80054fc:	ed8d 7b46 	vstr	d7, [sp, #280]	; 0x118
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005500:	f003 fec6 	bl	8009290 <HAL_GPIO_Init>
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8005504:	a944      	add	r1, sp, #272	; 0x110
 8005506:	487f      	ldr	r0, [pc, #508]	; (8005704 <main+0x38c>)
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8005508:	ed9f 7b6f 	vldr	d7, [pc, #444]	; 80056c8 <main+0x350>
 800550c:	ed8d 8b46 	vstr	d8, [sp, #280]	; 0x118
 8005510:	ed8d 7b44 	vstr	d7, [sp, #272]	; 0x110
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8005514:	f003 febc 	bl	8009290 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8005518:	4622      	mov	r2, r4
 800551a:	2104      	movs	r1, #4
 800551c:	2028      	movs	r0, #40	; 0x28
 800551e:	f002 f9d3 	bl	80078c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005522:	2028      	movs	r0, #40	; 0x28
 8005524:	f002 fa0e 	bl	8007944 <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8005528:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800552c:	4621      	mov	r1, r4
 800552e:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8005530:	432a      	orrs	r2, r5
 8005532:	f8c8 20d8 	str.w	r2, [r8, #216]	; 0xd8
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005536:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 8005538:	f8d8 30d8 	ldr.w	r3, [r8, #216]	; 0xd8
 800553c:	402b      	ands	r3, r5
 800553e:	9304      	str	r3, [sp, #16]
 8005540:	9b04      	ldr	r3, [sp, #16]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005542:	f002 f9c1 	bl	80078c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005546:	200b      	movs	r0, #11
 8005548:	f002 f9fc 	bl	8007944 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 800554c:	4622      	mov	r2, r4
 800554e:	2102      	movs	r1, #2
 8005550:	200c      	movs	r0, #12
 8005552:	f002 f9b9 	bl	80078c8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005556:	200c      	movs	r0, #12
 8005558:	f002 f9f4 	bl	8007944 <HAL_NVIC_EnableIRQ>
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800555c:	2304      	movs	r3, #4
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800555e:	4658      	mov	r0, fp
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8005560:	f8ab 6014 	strh.w	r6, [fp, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005564:	f8cb 3010 	str.w	r3, [fp, #16]
	hadc1.Instance = ADC1;
 8005568:	4b68      	ldr	r3, [pc, #416]	; (800570c <main+0x394>)
	ADC_MultiModeTypeDef multimode = {0};
 800556a:	940c      	str	r4, [sp, #48]	; 0x30
	hadc1.Instance = ADC1;
 800556c:	f8cb 3000 	str.w	r3, [fp]
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8005570:	2303      	movs	r3, #3
	ADC_ChannelConfTypeDef sConfig = {0};
 8005572:	9438      	str	r4, [sp, #224]	; 0xe0
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005574:	f8cb 400c 	str.w	r4, [fp, #12]
	hadc1.Init.NbrOfConversion = 1;
 8005578:	f8cb 5018 	str.w	r5, [fp, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800557c:	f88b 401c 	strb.w	r4, [fp, #28]
	hadc1.Init.OversamplingMode = DISABLE;
 8005580:	f88b 4038 	strb.w	r4, [fp, #56]	; 0x38
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8005584:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
	ADC_MultiModeTypeDef multimode = {0};
 8005588:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800558c:	e9cd 4424 	strd	r4, r4, [sp, #144]	; 0x90
 8005590:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
 8005594:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
	ADC_ChannelConfTypeDef sConfig = {0};
 8005598:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
 800559c:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
 80055a0:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80055a4:	e9cb a901 	strd	sl, r9, [fp, #4]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80055a8:	e9cb 4409 	strd	r4, r4, [fp, #36]	; 0x24
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80055ac:	e9cb 740c 	strd	r7, r4, [fp, #48]	; 0x30
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80055b0:	f001 ff2a 	bl	8007408 <HAL_ADC_Init>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	f040 8321 	bne.w	8005bfc <main+0x884>
	multimode.Mode = ADC_DUALMODE_INTERL;
 80055ba:	2207      	movs	r2, #7
 80055bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80055c0:	a90a      	add	r1, sp, #40	; 0x28
 80055c2:	4658      	mov	r0, fp
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 80055c4:	960c      	str	r6, [sp, #48]	; 0x30
	multimode.Mode = ADC_DUALMODE_INTERL;
 80055c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80055ca:	f002 f903 	bl	80077d4 <HAL_ADCEx_MultiModeConfigChannel>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	f040 8314 	bne.w	8005bfc <main+0x884>
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80055d4:	4c4e      	ldr	r4, [pc, #312]	; (8005710 <main+0x398>)
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80055d6:	a924      	add	r1, sp, #144	; 0x90
 80055d8:	4658      	mov	r0, fp
	AnalogWDGConfig.ITMode = ENABLE;
 80055da:	f88d 509c 	strb.w	r5, [sp, #156]	; 0x9c
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80055de:	9426      	str	r4, [sp, #152]	; 0x98
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80055e0:	ed9f cb3b 	vldr	d12, [pc, #236]	; 80056d0 <main+0x358>
	AnalogWDGConfig.HighThreshold = 4094;
 80055e4:	ed9f bb3c 	vldr	d11, [pc, #240]	; 80056d8 <main+0x360>
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80055e8:	ed8d cb24 	vstr	d12, [sp, #144]	; 0x90
	AnalogWDGConfig.HighThreshold = 4094;
 80055ec:	ed8d bb28 	vstr	d11, [sp, #160]	; 0xa0
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80055f0:	f001 fc04 	bl	8006dfc <HAL_ADC_AnalogWDGConfig>
 80055f4:	2800      	cmp	r0, #0
 80055f6:	f040 8301 	bne.w	8005bfc <main+0x884>
	sConfig.OffsetSignedSaturation = DISABLE;
 80055fa:	f88d 00e1 	strb.w	r0, [sp, #225]	; 0xe1
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055fe:	a932      	add	r1, sp, #200	; 0xc8
 8005600:	4658      	mov	r0, fp
	sConfig.Channel = ADC_CHANNEL_5;
 8005602:	ed9f ab37 	vldr	d10, [pc, #220]	; 80056e0 <main+0x368>
 8005606:	ed9f 9b38 	vldr	d9, [pc, #224]	; 80056e8 <main+0x370>
 800560a:	ed9f 8b39 	vldr	d8, [pc, #228]	; 80056f0 <main+0x378>
 800560e:	ed8d ab32 	vstr	d10, [sp, #200]	; 0xc8
 8005612:	ed8d 9b34 	vstr	d9, [sp, #208]	; 0xd0
 8005616:	ed8d 8b36 	vstr	d8, [sp, #216]	; 0xd8
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800561a:	f001 f9bf 	bl	800699c <HAL_ADC_ConfigChannel>
 800561e:	2800      	cmp	r0, #0
 8005620:	f040 82ec 	bne.w	8005bfc <main+0x884>
	hadc2.Instance = ADC2;
 8005624:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8005720 <main+0x3a8>
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005628:	2304      	movs	r3, #4
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800562a:	901e      	str	r0, [sp, #120]	; 0x78
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800562c:	f8cb 3010 	str.w	r3, [fp, #16]
	hadc2.Instance = ADC2;
 8005630:	4b38      	ldr	r3, [pc, #224]	; (8005714 <main+0x39c>)
	ADC_ChannelConfTypeDef sConfig = {0};
 8005632:	902a      	str	r0, [sp, #168]	; 0xa8
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005634:	9023      	str	r0, [sp, #140]	; 0x8c
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005636:	f8cb 000c 	str.w	r0, [fp, #12]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800563a:	f88b 001c 	strb.w	r0, [fp, #28]
	hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800563e:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
	hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8005642:	f8cb 0034 	str.w	r0, [fp, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 8005646:	f88b 0038 	strb.w	r0, [fp, #56]	; 0x38
	hadc2.Init.LowPowerAutoWait = DISABLE;
 800564a:	f8ab 6014 	strh.w	r6, [fp, #20]
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800564e:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
	hadc2.Init.NbrOfConversion = 1;
 8005652:	f8cb 5018 	str.w	r5, [fp, #24]
	hadc2.Instance = ADC2;
 8005656:	f8cb 3000 	str.w	r3, [fp]
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800565a:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
 800565e:	e9cd 0021 	strd	r0, r0, [sp, #132]	; 0x84
	ADC_ChannelConfTypeDef sConfig = {0};
 8005662:	e9cd 002b 	strd	r0, r0, [sp, #172]	; 0xac
 8005666:	e9cd 002d 	strd	r0, r0, [sp, #180]	; 0xb4
 800566a:	e9cd 002f 	strd	r0, r0, [sp, #188]	; 0xbc
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800566e:	4658      	mov	r0, fp
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005670:	e9cb a901 	strd	sl, r9, [fp, #4]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005674:	f001 fec8 	bl	8007408 <HAL_ADC_Init>
 8005678:	2800      	cmp	r0, #0
 800567a:	f040 82bf 	bne.w	8005bfc <main+0x884>
	if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 800567e:	a91e      	add	r1, sp, #120	; 0x78
 8005680:	4658      	mov	r0, fp
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8005682:	9420      	str	r4, [sp, #128]	; 0x80
	AnalogWDGConfig.ITMode = ENABLE;
 8005684:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8005688:	ed8d cb1e 	vstr	d12, [sp, #120]	; 0x78
	AnalogWDGConfig.HighThreshold = 4094;
 800568c:	ed8d bb22 	vstr	d11, [sp, #136]	; 0x88
	if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8005690:	f001 fbb4 	bl	8006dfc <HAL_ADC_AnalogWDGConfig>
 8005694:	4603      	mov	r3, r0
 8005696:	2800      	cmp	r0, #0
 8005698:	f040 82b0 	bne.w	8005bfc <main+0x884>
 800569c:	e042      	b.n	8005724 <main+0x3ac>
 800569e:	bf00      	nop
	...
 80056a8:	00000c00 	.word	0x00000c00
 80056ac:	00000001 	.word	0x00000001
 80056b0:	00000002 	.word	0x00000002
 80056b4:	00000000 	.word	0x00000000
 80056b8:	00000200 	.word	0x00000200
 80056bc:	00000002 	.word	0x00000002
 80056c0:	00000000 	.word	0x00000000
 80056c4:	00000003 	.word	0x00000003
 80056c8:	00000100 	.word	0x00000100
 80056cc:	00000001 	.word	0x00000001
 80056d0:	7dc00000 	.word	0x7dc00000
 80056d4:	00c00000 	.word	0x00c00000
 80056d8:	00000ffe 	.word	0x00000ffe
 80056dc:	00000001 	.word	0x00000001
 80056e0:	14f00020 	.word	0x14f00020
 80056e4:	00000006 	.word	0x00000006
 80056e8:	00000000 	.word	0x00000000
 80056ec:	000007ff 	.word	0x000007ff
 80056f0:	00000004 	.word	0x00000004
 80056f4:	00000000 	.word	0x00000000
 80056f8:	e000ed00 	.word	0xe000ed00
 80056fc:	58020400 	.word	0x58020400
 8005700:	58020c00 	.word	0x58020c00
 8005704:	58020000 	.word	0x58020000
 8005708:	58020800 	.word	0x58020800
 800570c:	40022000 	.word	0x40022000
 8005710:	14f00020 	.word	0x14f00020
 8005714:	40022100 	.word	0x40022100
 8005718:	58024400 	.word	0x58024400
 800571c:	2400be5c 	.word	0x2400be5c
 8005720:	2400bec0 	.word	0x2400bec0
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005724:	a92a      	add	r1, sp, #168	; 0xa8
 8005726:	4658      	mov	r0, fp
	sConfig.OffsetSignedSaturation = DISABLE;
 8005728:	f88d 30c1 	strb.w	r3, [sp, #193]	; 0xc1
	sConfig.Channel = ADC_CHANNEL_5;
 800572c:	ed8d ab2a 	vstr	d10, [sp, #168]	; 0xa8
 8005730:	ed8d 9b2c 	vstr	d9, [sp, #176]	; 0xb0
 8005734:	ed8d 8b2e 	vstr	d8, [sp, #184]	; 0xb8
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005738:	f001 f930 	bl	800699c <HAL_ADC_ConfigChannel>
 800573c:	4601      	mov	r1, r0
 800573e:	2800      	cmp	r0, #0
 8005740:	f040 825c 	bne.w	8005bfc <main+0x884>
	DAC_ChannelConfTypeDef sConfig = {0};
 8005744:	2224      	movs	r2, #36	; 0x24
	hdac1.Instance = DAC1;
 8005746:	4cc4      	ldr	r4, [pc, #784]	; (8005a58 <main+0x6e0>)
	DAC_ChannelConfTypeDef sConfig = {0};
 8005748:	a844      	add	r0, sp, #272	; 0x110
 800574a:	f00b f93d 	bl	80109c8 <memset>
	hdac1.Instance = DAC1;
 800574e:	4bc3      	ldr	r3, [pc, #780]	; (8005a5c <main+0x6e4>)
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005750:	4620      	mov	r0, r4
	hdac1.Instance = DAC1;
 8005752:	6023      	str	r3, [r4, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005754:	f002 f91a 	bl	800798c <HAL_DAC_Init>
 8005758:	4602      	mov	r2, r0
 800575a:	2800      	cmp	r0, #0
 800575c:	f040 824e 	bne.w	8005bfc <main+0x884>
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005760:	2101      	movs	r1, #1
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005762:	9048      	str	r0, [sp, #288]	; 0x120
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005764:	2000      	movs	r0, #0
 8005766:	2600      	movs	r6, #0
 8005768:	2716      	movs	r7, #22
 800576a:	e9cd 0146 	strd	r0, r1, [sp, #280]	; 0x118
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800576e:	a944      	add	r1, sp, #272	; 0x110
 8005770:	4620      	mov	r0, r4
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005772:	e9cd 6744 	strd	r6, r7, [sp, #272]	; 0x110
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005776:	f002 fa49 	bl	8007c0c <HAL_DAC_ConfigChannel>
 800577a:	4603      	mov	r3, r0
 800577c:	2800      	cmp	r0, #0
 800577e:	f040 823d 	bne.w	8005bfc <main+0x884>
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8005782:	2210      	movs	r2, #16
 8005784:	a944      	add	r1, sp, #272	; 0x110
 8005786:	4620      	mov	r0, r4
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8005788:	9345      	str	r3, [sp, #276]	; 0x114
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800578a:	f002 fa3f 	bl	8007c0c <HAL_DAC_ConfigChannel>
 800578e:	2800      	cmp	r0, #0
 8005790:	f040 8234 	bne.w	8005bfc <main+0x884>
	hlptim2.Instance = LPTIM2;
 8005794:	48b2      	ldr	r0, [pc, #712]	; (8005a60 <main+0x6e8>)
	hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8005796:	2300      	movs	r3, #0
	hlptim2.Instance = LPTIM2;
 8005798:	4ab2      	ldr	r2, [pc, #712]	; (8005a64 <main+0x6ec>)
	hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800579a:	f64f 76ff 	movw	r6, #65535	; 0xffff
	hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800579e:	6303      	str	r3, [r0, #48]	; 0x30
	hlptim2.Instance = LPTIM2;
 80057a0:	6002      	str	r2, [r0, #0]
	hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80057a2:	2200      	movs	r2, #0
	hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80057a4:	6146      	str	r6, [r0, #20]
	hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80057a6:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80057aa:	e9c0 3303 	strd	r3, r3, [r0, #12]
	hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80057ae:	2300      	movs	r3, #0
 80057b0:	e9c0 2308 	strd	r2, r3, [r0, #32]
 80057b4:	2300      	movs	r3, #0
 80057b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80057ba:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80057be:	f003 feb9 	bl	8009534 <HAL_LPTIM_Init>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2800      	cmp	r0, #0
 80057c6:	f040 8219 	bne.w	8005bfc <main+0x884>
	htim6.Instance = TIM6;
 80057ca:	4ca7      	ldr	r4, [pc, #668]	; (8005a68 <main+0x6f0>)
	htim6.Init.Period = 8191;
 80057cc:	f641 72ff 	movw	r2, #8191	; 0x1fff
	htim6.Instance = TIM6;
 80057d0:	49a6      	ldr	r1, [pc, #664]	; (8005a6c <main+0x6f4>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057d2:	9017      	str	r0, [sp, #92]	; 0x5c
	htim6.Init.Period = 8191;
 80057d4:	e9c4 0202 	strd	r0, r2, [r4, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80057d8:	2280      	movs	r2, #128	; 0x80
	htim6.Init.Prescaler = 0;
 80057da:	e9c4 1000 	strd	r1, r0, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80057de:	4620      	mov	r0, r4
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80057e0:	61a2      	str	r2, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057e2:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80057e6:	f006 fce3 	bl	800c1b0 <HAL_TIM_Base_Init>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2800      	cmp	r0, #0
 80057ee:	f040 8205 	bne.w	8005bfc <main+0x884>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80057f2:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80057f4:	a917      	add	r1, sp, #92	; 0x5c
 80057f6:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057f8:	9319      	str	r3, [sp, #100]	; 0x64
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80057fa:	9217      	str	r2, [sp, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80057fc:	f007 f912 	bl	800ca24 <HAL_TIMEx_MasterConfigSynchronization>
 8005800:	4603      	mov	r3, r0
 8005802:	2800      	cmp	r0, #0
 8005804:	f040 81fa 	bne.w	8005bfc <main+0x884>
	huart3.Instance = USART3;
 8005808:	4c99      	ldr	r4, [pc, #612]	; (8005a70 <main+0x6f8>)
	huart3.Init.BaudRate = 115200;
 800580a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart3.Instance = USART3;
 800580e:	4999      	ldr	r1, [pc, #612]	; (8005a74 <main+0x6fc>)
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8005810:	4620      	mov	r0, r4
	huart3.Init.BaudRate = 115200;
 8005812:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	huart3.Init.Mode = UART_MODE_TX_RX;
 8005816:	220c      	movs	r2, #12
	huart3.Init.Parity = UART_PARITY_NONE;
 8005818:	e9c4 3303 	strd	r3, r3, [r4, #12]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800581c:	e9c4 2305 	strd	r2, r3, [r4, #20]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005820:	e9c4 3307 	strd	r3, r3, [r4, #28]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005824:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8005828:	f007 fe8e 	bl	800d548 <HAL_UART_Init>
 800582c:	4601      	mov	r1, r0
 800582e:	2800      	cmp	r0, #0
 8005830:	f040 81e4 	bne.w	8005bfc <main+0x884>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005834:	4620      	mov	r0, r4
 8005836:	f007 ff17 	bl	800d668 <HAL_UARTEx_SetTxFifoThreshold>
 800583a:	4601      	mov	r1, r0
 800583c:	2800      	cmp	r0, #0
 800583e:	f040 81dd 	bne.w	8005bfc <main+0x884>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005842:	4620      	mov	r0, r4
 8005844:	f007 ff52 	bl	800d6ec <HAL_UARTEx_SetRxFifoThreshold>
 8005848:	2800      	cmp	r0, #0
 800584a:	f040 81d7 	bne.w	8005bfc <main+0x884>
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800584e:	4620      	mov	r0, r4
 8005850:	f007 feec 	bl	800d62c <HAL_UARTEx_DisableFifoMode>
 8005854:	4604      	mov	r4, r0
 8005856:	2800      	cmp	r0, #0
 8005858:	f040 81d0 	bne.w	8005bfc <main+0x884>
	MX_USB_DEVICE_Init();
 800585c:	f009 fc44 	bl	800f0e8 <MX_USB_DEVICE_Init>
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005860:	2001      	movs	r0, #1
 8005862:	2102      	movs	r1, #2
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005864:	2301      	movs	r3, #1
	htim4.Instance = TIM4;
 8005866:	4d84      	ldr	r5, [pc, #528]	; (8005a78 <main+0x700>)
 8005868:	4a84      	ldr	r2, [pc, #528]	; (8005a7c <main+0x704>)
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800586a:	933c      	str	r3, [sp, #240]	; 0xf0
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800586c:	9340      	str	r3, [sp, #256]	; 0x100
	sConfig.IC2Filter = 8;
 800586e:	2308      	movs	r3, #8
	TIM_Encoder_InitTypeDef sConfig = {0};
 8005870:	943d      	str	r4, [sp, #244]	; 0xf4
	sConfig.IC2Filter = 8;
 8005872:	9342      	str	r3, [sp, #264]	; 0x108
	TIM_Encoder_InitTypeDef sConfig = {0};
 8005874:	9441      	str	r4, [sp, #260]	; 0x104
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005876:	9414      	str	r4, [sp, #80]	; 0x50
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005878:	612c      	str	r4, [r5, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800587a:	61ac      	str	r4, [r5, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800587c:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
	sConfig.IC1Filter = 8;
 8005880:	2008      	movs	r0, #8
 8005882:	2102      	movs	r1, #2
 8005884:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005888:	a93a      	add	r1, sp, #232	; 0xe8
 800588a:	4628      	mov	r0, r5
	htim4.Init.Prescaler = 0;
 800588c:	e9c5 2400 	strd	r2, r4, [r5]
	htim4.Init.Period = 65535;
 8005890:	e9c5 4602 	strd	r4, r6, [r5, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005894:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005898:	f006 fdf4 	bl	800c484 <HAL_TIM_Encoder_Init>
 800589c:	4603      	mov	r3, r0
 800589e:	2800      	cmp	r0, #0
 80058a0:	f040 81ac 	bne.w	8005bfc <main+0x884>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80058a4:	a914      	add	r1, sp, #80	; 0x50
 80058a6:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058a8:	9314      	str	r3, [sp, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058aa:	9316      	str	r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80058ac:	f007 f8ba 	bl	800ca24 <HAL_TIMEx_MasterConfigSynchronization>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2800      	cmp	r0, #0
 80058b4:	f040 81a2 	bne.w	8005bfc <main+0x884>
	htim7.Instance = TIM7;
 80058b8:	4c71      	ldr	r4, [pc, #452]	; (8005a80 <main+0x708>)
	htim7.Init.Period = 8192;
 80058ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	htim7.Instance = TIM7;
 80058be:	4971      	ldr	r1, [pc, #452]	; (8005a84 <main+0x70c>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058c0:	9011      	str	r0, [sp, #68]	; 0x44
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80058c2:	4620      	mov	r0, r4
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058c4:	61a3      	str	r3, [r4, #24]
	htim7.Init.Prescaler = 0;
 80058c6:	e9c4 1300 	strd	r1, r3, [r4]
	htim7.Init.Period = 8192;
 80058ca:	e9c4 3202 	strd	r3, r2, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058ce:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80058d2:	f006 fc6d 	bl	800c1b0 <HAL_TIM_Base_Init>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	f040 8190 	bne.w	8005bfc <main+0x884>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058dc:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80058de:	a911      	add	r1, sp, #68	; 0x44
 80058e0:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058e2:	9311      	str	r3, [sp, #68]	; 0x44
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058e4:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80058e6:	f007 f89d 	bl	800ca24 <HAL_TIMEx_MasterConfigSynchronization>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2800      	cmp	r0, #0
 80058ee:	f040 8185 	bne.w	8005bfc <main+0x884>
	htim7.Instance = TIM7;
 80058f2:	4964      	ldr	r1, [pc, #400]	; (8005a84 <main+0x70c>)
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 80058f4:	f247 5230 	movw	r2, #30000	; 0x7530
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058f8:	61a3      	str	r3, [r4, #24]
	htim7.Instance = TIM7;
 80058fa:	6021      	str	r1, [r4, #0]
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 80058fc:	60e2      	str	r2, [r4, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058fe:	e9c4 0001 	strd	r0, r0, [r4, #4]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005902:	4620      	mov	r0, r4
 8005904:	f006 fc54 	bl	800c1b0 <HAL_TIM_Base_Init>
 8005908:	4603      	mov	r3, r0
 800590a:	2800      	cmp	r0, #0
 800590c:	f040 8176 	bne.w	8005bfc <main+0x884>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005910:	a911      	add	r1, sp, #68	; 0x44
 8005912:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005914:	9311      	str	r3, [sp, #68]	; 0x44
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005916:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005918:	f007 f884 	bl	800ca24 <HAL_TIMEx_MasterConfigSynchronization>
 800591c:	4603      	mov	r3, r0
 800591e:	2800      	cmp	r0, #0
 8005920:	f040 816c 	bne.w	8005bfc <main+0x884>
	htim2.Instance = TIM2;
 8005924:	4c58      	ldr	r4, [pc, #352]	; (8005a88 <main+0x710>)
 8005926:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
	htim2.Init.Period = 10000;
 800592a:	f242 7210 	movw	r2, #10000	; 0x2710
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800592e:	901a      	str	r0, [sp, #104]	; 0x68
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005930:	900e      	str	r0, [sp, #56]	; 0x38
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005932:	6123      	str	r3, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005934:	61a3      	str	r3, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005936:	931d      	str	r3, [sp, #116]	; 0x74
	htim2.Init.Prescaler = 0;
 8005938:	e9c4 6000 	strd	r6, r0, [r4]
	htim2.Init.Period = 10000;
 800593c:	e9c4 0202 	strd	r0, r2, [r4, #8]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005940:	4620      	mov	r0, r4
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005942:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005946:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800594a:	f006 fc31 	bl	800c1b0 <HAL_TIM_Base_Init>
 800594e:	2800      	cmp	r0, #0
 8005950:	f040 8154 	bne.w	8005bfc <main+0x884>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005954:	f44f 5580 	mov.w	r5, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005958:	a91a      	add	r1, sp, #104	; 0x68
 800595a:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800595c:	951a      	str	r5, [sp, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800595e:	f006 fed5 	bl	800c70c <HAL_TIM_ConfigClockSource>
 8005962:	2800      	cmp	r0, #0
 8005964:	f040 814a 	bne.w	8005bfc <main+0x884>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005968:	900e      	str	r0, [sp, #56]	; 0x38
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800596a:	a90e      	add	r1, sp, #56	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800596c:	9010      	str	r0, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800596e:	4620      	mov	r0, r4
 8005970:	f007 f858 	bl	800ca24 <HAL_TIMEx_MasterConfigSynchronization>
 8005974:	2800      	cmp	r0, #0
 8005976:	f040 8141 	bne.w	8005bfc <main+0x884>
	htim2.Init.Period = 15000;
 800597a:	f643 2398 	movw	r3, #15000	; 0x3a98
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800597e:	60a0      	str	r0, [r4, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005980:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005982:	61a0      	str	r0, [r4, #24]
	htim2.Init.Period = 15000;
 8005984:	60e3      	str	r3, [r4, #12]
	htim2.Init.Prescaler = 0;
 8005986:	e9c4 6000 	strd	r6, r0, [r4]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800598a:	4620      	mov	r0, r4
 800598c:	f006 fc10 	bl	800c1b0 <HAL_TIM_Base_Init>
 8005990:	2800      	cmp	r0, #0
 8005992:	f040 8133 	bne.w	8005bfc <main+0x884>
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005996:	a91a      	add	r1, sp, #104	; 0x68
 8005998:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800599a:	951a      	str	r5, [sp, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800599c:	f006 feb6 	bl	800c70c <HAL_TIM_ConfigClockSource>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2800      	cmp	r0, #0
 80059a4:	f040 812a 	bne.w	8005bfc <main+0x884>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80059a8:	a90e      	add	r1, sp, #56	; 0x38
 80059aa:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059ac:	930e      	str	r3, [sp, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059ae:	9310      	str	r3, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80059b0:	f007 f838 	bl	800ca24 <HAL_TIMEx_MasterConfigSynchronization>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	f040 8121 	bne.w	8005bfc <main+0x884>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80059ba:	4b34      	ldr	r3, [pc, #208]	; (8005a8c <main+0x714>)
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	03d9      	lsls	r1, r3, #15
 80059c0:	d426      	bmi.n	8005a10 <main+0x698>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80059c2:	4832      	ldr	r0, [pc, #200]	; (8005a8c <main+0x714>)
 80059c4:	2300      	movs	r3, #0
 80059c6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80059ca:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80059ce:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80059d2:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80059d6:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80059da:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 80059de:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80059e0:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80059e4:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80059e6:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 80059ea:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80059ec:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	d1f8      	bne.n	80059e6 <main+0x66e>
    } while(sets-- != 0U);
 80059f4:	3c20      	subs	r4, #32
 80059f6:	f114 0f20 	cmn.w	r4, #32
 80059fa:	d1f1      	bne.n	80059e0 <main+0x668>
 80059fc:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8005a00:	6943      	ldr	r3, [r0, #20]
 8005a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a06:	6143      	str	r3, [r0, #20]
 8005a08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005a0c:	f3bf 8f6f 	isb	sy
	MX_TIM6_Init_Custom_Rate();
 8005a10:	f7ff fc8a 	bl	8005328 <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8005a14:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005a18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a1c:	481c      	ldr	r0, [pc, #112]	; (8005a90 <main+0x718>)
 8005a1e:	f001 fe01 	bl	8007624 <HAL_ADCEx_Calibration_Start>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	f040 80ea 	bne.w	8005bfc <main+0x884>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8005a28:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005a2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a30:	4818      	ldr	r0, [pc, #96]	; (8005a94 <main+0x71c>)
 8005a32:	f001 fdf7 	bl	8007624 <HAL_ADCEx_Calibration_Start>
 8005a36:	4604      	mov	r4, r0
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	f040 80df 	bne.w	8005bfc <main+0x884>
	HAL_Delay(1);
 8005a3e:	2001      	movs	r0, #1
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8005a40:	4f15      	ldr	r7, [pc, #84]	; (8005a98 <main+0x720>)
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8005a42:	f44f 6600 	mov.w	r6, #2048	; 0x800
	AMindex  = LSBindex = 1;
 8005a46:	4605      	mov	r5, r0
	HAL_Delay(1);
 8005a48:	f000 fdd8 	bl	80065fc <HAL_Delay>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	480a      	ldr	r0, [pc, #40]	; (8005a78 <main+0x700>)
 8005a50:	f006 fdfc 	bl	800c64c <HAL_TIM_Encoder_Start>
	volume= 0.1;
 8005a54:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <main+0x724>)
 8005a56:	e023      	b.n	8005aa0 <main+0x728>
 8005a58:	2400bf28 	.word	0x2400bf28
 8005a5c:	40007400 	.word	0x40007400
 8005a60:	2400c030 	.word	0x2400c030
 8005a64:	58002400 	.word	0x58002400
 8005a68:	2400c100 	.word	0x2400c100
 8005a6c:	40001000 	.word	0x40001000
 8005a70:	2400c198 	.word	0x2400c198
 8005a74:	40004800 	.word	0x40004800
 8005a78:	2400c0b4 	.word	0x2400c0b4
 8005a7c:	40000800 	.word	0x40000800
 8005a80:	2400c14c 	.word	0x2400c14c
 8005a84:	40001400 	.word	0x40001400
 8005a88:	2400c068 	.word	0x2400c068
 8005a8c:	e000ed00 	.word	0xe000ed00
 8005a90:	2400be5c 	.word	0x2400be5c
 8005a94:	2400bec0 	.word	0x2400bec0
 8005a98:	24007ca4 	.word	0x24007ca4
 8005a9c:	2400d3ec 	.word	0x2400d3ec
 8005aa0:	4871      	ldr	r0, [pc, #452]	; (8005c68 <main+0x8f0>)
	LED_GREEN_ON;
 8005aa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005aa6:	462a      	mov	r2, r5
	volume= 0.1;
 8005aa8:	6018      	str	r0, [r3, #0]
	LED_GREEN_ON;
 8005aaa:	4870      	ldr	r0, [pc, #448]	; (8005c6c <main+0x8f4>)
 8005aac:	f003 fd30 	bl	8009510 <HAL_GPIO_WritePin>
	LED_GREEN_OFF;
 8005ab0:	4622      	mov	r2, r4
 8005ab2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ab6:	486d      	ldr	r0, [pc, #436]	; (8005c6c <main+0x8f4>)
 8005ab8:	f003 fd2a 	bl	8009510 <HAL_GPIO_WritePin>
	SetFstep(2);
 8005abc:	2002      	movs	r0, #2
 8005abe:	f7fb fba7 	bl	8001210 <SetFstep>
	cwpitch = CWPITCH;
 8005ac2:	4a6b      	ldr	r2, [pc, #428]	; (8005c70 <main+0x8f8>)
 8005ac4:	496b      	ldr	r1, [pc, #428]	; (8005c74 <main+0x8fc>)
	CarrierEnable(0);
 8005ac6:	4620      	mov	r0, r4
	AGC_decay[Fast] = 0.9995f;
 8005ac8:	4b6b      	ldr	r3, [pc, #428]	; (8005c78 <main+0x900>)
	cwpitch = CWPITCH;
 8005aca:	6011      	str	r1, [r2, #0]
	os_time = 0;
 8005acc:	496b      	ldr	r1, [pc, #428]	; (8005c7c <main+0x904>)
	meanavg = 0.f;
 8005ace:	4a6c      	ldr	r2, [pc, #432]	; (8005c80 <main+0x908>)
	os_time = 0;
 8005ad0:	600c      	str	r4, [r1, #0]
	meanavg = 0.f;
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	6011      	str	r1, [r2, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8005ad6:	4a6b      	ldr	r2, [pc, #428]	; (8005c84 <main+0x90c>)
 8005ad8:	496b      	ldr	r1, [pc, #428]	; (8005c88 <main+0x910>)
 8005ada:	6011      	str	r1, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8005adc:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
	Muted   = false;
 8005ae0:	4a6a      	ldr	r2, [pc, #424]	; (8005c8c <main+0x914>)
 8005ae2:	7014      	strb	r4, [r2, #0]
	AMindex  = LSBindex = 1;
 8005ae4:	4a6a      	ldr	r2, [pc, #424]	; (8005c90 <main+0x918>)
 8005ae6:	8015      	strh	r5, [r2, #0]
 8005ae8:	4a6a      	ldr	r2, [pc, #424]	; (8005c94 <main+0x91c>)
 8005aea:	8015      	strh	r5, [r2, #0]
	USBindex = CWindex  = 1;
 8005aec:	4a6a      	ldr	r2, [pc, #424]	; (8005c98 <main+0x920>)
 8005aee:	8015      	strh	r5, [r2, #0]
 8005af0:	4a6a      	ldr	r2, [pc, #424]	; (8005c9c <main+0x924>)
 8005af2:	8015      	strh	r5, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8005af4:	4a6a      	ldr	r2, [pc, #424]	; (8005ca0 <main+0x928>)
 8005af6:	6011      	str	r1, [r2, #0]
	agc[AM]  = agc[LSB] = Slow;
 8005af8:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
 8005afc:	4a69      	ldr	r2, [pc, #420]	; (8005ca4 <main+0x92c>)
 8005afe:	6011      	str	r1, [r2, #0]
	AGC_decay[Fast] = 0.9995f;
 8005b00:	4a69      	ldr	r2, [pc, #420]	; (8005ca8 <main+0x930>)
 8005b02:	601a      	str	r2, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 8005b04:	4a69      	ldr	r2, [pc, #420]	; (8005cac <main+0x934>)
 8005b06:	605a      	str	r2, [r3, #4]
	Hangcount[Fast] = 2;
 8005b08:	4b69      	ldr	r3, [pc, #420]	; (8005cb0 <main+0x938>)
 8005b0a:	4a6a      	ldr	r2, [pc, #424]	; (8005cb4 <main+0x93c>)
 8005b0c:	601a      	str	r2, [r3, #0]
	AgcThreshold    = 1.92e-4f;
 8005b0e:	4b6a      	ldr	r3, [pc, #424]	; (8005cb8 <main+0x940>)
 8005b10:	4a6a      	ldr	r2, [pc, #424]	; (8005cbc <main+0x944>)
 8005b12:	601a      	str	r2, [r3, #0]
	pk = 0.02f;
 8005b14:	4a6a      	ldr	r2, [pc, #424]	; (8005cc0 <main+0x948>)
 8005b16:	4b6b      	ldr	r3, [pc, #428]	; (8005cc4 <main+0x94c>)
 8005b18:	601a      	str	r2, [r3, #0]
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8005b1a:	4b6b      	ldr	r3, [pc, #428]	; (8005cc8 <main+0x950>)
 8005b1c:	603b      	str	r3, [r7, #0]
	CarrierEnable(0);
 8005b1e:	f7ff fad7 	bl	80050d0 <CarrierEnable>
	TXSwitch(0);
 8005b22:	4620      	mov	r0, r4
 8005b24:	f7ff fa70 	bl	8005008 <TXSwitch>
	__HAL_RCC_PLL2_DISABLE();
 8005b28:	4a68      	ldr	r2, [pc, #416]	; (8005ccc <main+0x954>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8005b2a:	231a      	movs	r3, #26
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8005b2c:	ed97 7a00 	vldr	s14, [r7]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8005b30:	4967      	ldr	r1, [pc, #412]	; (8005cd0 <main+0x958>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8005b32:	9303      	str	r3, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8005b34:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	__HAL_RCC_PLL2_DISABLE();
 8005b38:	6813      	ldr	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8005b3a:	eddf 6a66 	vldr	s13, [pc, #408]	; 8005cd4 <main+0x95c>
	__HAL_RCC_PLL2_DISABLE();
 8005b3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
	CWThreshold = 0.01;
 8005b42:	4865      	ldr	r0, [pc, #404]	; (8005cd8 <main+0x960>)
	__HAL_RCC_PLL2_DISABLE();
 8005b44:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8005b46:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005b48:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8005b50:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8005c60 <main+0x8e8>
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8005b54:	6293      	str	r3, [r2, #40]	; 0x28
 8005b56:	9b03      	ldr	r3, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8005b58:	ee27 7b05 	vmul.f64	d7, d7, d5
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b62:	4319      	orrs	r1, r3
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8005b64:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8005b68:	6391      	str	r1, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8005b6a:	6813      	ldr	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8005b6c:	ee67 7a26 	vmul.f32	s15, s14, s13
	__HAL_RCC_PLL2_ENABLE();
 8005b70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b74:	6013      	str	r3, [r2, #0]
	CWThreshold = 0.01;
 8005b76:	4a59      	ldr	r2, [pc, #356]	; (8005cdc <main+0x964>)
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8005b78:	4b59      	ldr	r3, [pc, #356]	; (8005ce0 <main+0x968>)
	CWThreshold = 0.01;
 8005b7a:	6002      	str	r2, [r0, #0]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8005b7c:	ed87 7a00 	vstr	s14, [r7]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8005b80:	edc3 7a00 	vstr	s15, [r3]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 8005b84:	f7fc fbe2 	bl	800234c <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8005b88:	4956      	ldr	r1, [pc, #344]	; (8005ce4 <main+0x96c>)
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	4f56      	ldr	r7, [pc, #344]	; (8005ce8 <main+0x970>)
 8005b8e:	4b57      	ldr	r3, [pc, #348]	; (8005cec <main+0x974>)
 8005b90:	4857      	ldr	r0, [pc, #348]	; (8005cf0 <main+0x978>)
 8005b92:	e9cd 1600 	strd	r1, r6, [sp]
 8005b96:	2140      	movs	r1, #64	; 0x40
 8005b98:	f00a f976 	bl	800fe88 <arm_fir_decimate_init_f32>
 8005b9c:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 8005b9e:	b100      	cbz	r0, 8005ba2 <main+0x82a>
 8005ba0:	e7fe      	b.n	8005ba0 <main+0x828>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 8005ba2:	4a54      	ldr	r2, [pc, #336]	; (8005cf4 <main+0x97c>)
 8005ba4:	2140      	movs	r1, #64	; 0x40
 8005ba6:	4b51      	ldr	r3, [pc, #324]	; (8005cec <main+0x974>)
 8005ba8:	4853      	ldr	r0, [pc, #332]	; (8005cf8 <main+0x980>)
 8005baa:	e9cd 2600 	strd	r2, r6, [sp]
 8005bae:	2204      	movs	r2, #4
 8005bb0:	f00a f96a 	bl	800fe88 <arm_fir_decimate_init_f32>
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 8005bb8:	bb10      	cbnz	r0, 8005c00 <main+0x888>
	Load_Presets();
 8005bba:	f7fb f951 	bl	8000e60 <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f7fb fa34 	bl	800102c <Tune_Preset>
	keyerState = IDLE;
 8005bc4:	4b4d      	ldr	r3, [pc, #308]	; (8005cfc <main+0x984>)
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 8005bc6:	2710      	movs	r7, #16
	keyer_speed = 15;
 8005bc8:	200f      	movs	r0, #15
	keyerState = IDLE;
 8005bca:	701c      	strb	r4, [r3, #0]
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 8005bcc:	4b4c      	ldr	r3, [pc, #304]	; (8005d00 <main+0x988>)
 8005bce:	701f      	strb	r7, [r3, #0]
	keyer_speed = 15;
 8005bd0:	4b4c      	ldr	r3, [pc, #304]	; (8005d04 <main+0x98c>)
 8005bd2:	6018      	str	r0, [r3, #0]
	loadWPM(keyer_speed);        // Fix speed at 15 WPM
 8005bd4:	f7fa fd5e 	bl	8000694 <loadWPM>
	keyer_mode = 1; //->  iambic
 8005bd8:	4b4b      	ldr	r3, [pc, #300]	; (8005d08 <main+0x990>)
	txdelay = 10;
 8005bda:	210a      	movs	r1, #10
 8005bdc:	4a4b      	ldr	r2, [pc, #300]	; (8005d0c <main+0x994>)
	keyer_mode = 1; //->  iambic
 8005bde:	701d      	strb	r5, [r3, #0]
	keyer_swap = 0; //->  DI/DAH
 8005be0:	4b4b      	ldr	r3, [pc, #300]	; (8005d10 <main+0x998>)
	txdelay = 10;
 8005be2:	7011      	strb	r1, [r2, #0]
	keyer_swap = 0; //->  DI/DAH
 8005be4:	701c      	strb	r4, [r3, #0]
	TxPowerOut = MID_POWER_OUT;
 8005be6:	4b4b      	ldr	r3, [pc, #300]	; (8005d14 <main+0x99c>)
 8005be8:	601e      	str	r6, [r3, #0]
	DisplayStatus();    // Display status, it would not be shown until a user input was given
 8005bea:	f7fe fb0d 	bl	8004208 <DisplayStatus>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 8005bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf2:	4949      	ldr	r1, [pc, #292]	; (8005d18 <main+0x9a0>)
 8005bf4:	4849      	ldr	r0, [pc, #292]	; (8005d1c <main+0x9a4>)
 8005bf6:	f001 fd67 	bl	80076c8 <HAL_ADCEx_MultiModeStart_DMA>
 8005bfa:	b110      	cbz	r0, 8005c02 <main+0x88a>
		Error_Handler();
 8005bfc:	f7ff fac6 	bl	800518c <Error_Handler>
	while(arc != ARM_MATH_SUCCESS)
 8005c00:	e7fe      	b.n	8005c00 <main+0x888>
	if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8005c02:	4847      	ldr	r0, [pc, #284]	; (8005d20 <main+0x9a8>)
 8005c04:	f006 fbe2 	bl	800c3cc <HAL_TIM_Base_Start_IT>
 8005c08:	4604      	mov	r4, r0
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	d1f6      	bne.n	8005bfc <main+0x884>
	HAL_TIM_Base_Start(&htim6);
 8005c0e:	4845      	ldr	r0, [pc, #276]	; (8005d24 <main+0x9ac>)
 8005c10:	f006 fb84 	bl	800c31c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 8005c14:	4844      	ldr	r0, [pc, #272]	; (8005d28 <main+0x9b0>)
 8005c16:	f006 fb81 	bl	800c31c <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	4843      	ldr	r0, [pc, #268]	; (8005d2c <main+0x9b4>)
 8005c1e:	f001 fecb 	bl	80079b8 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 8005c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c26:	4a42      	ldr	r2, [pc, #264]	; (8005d30 <main+0x9b8>)
 8005c28:	4621      	mov	r1, r4
 8005c2a:	4840      	ldr	r0, [pc, #256]	; (8005d2c <main+0x9b4>)
 8005c2c:	9400      	str	r4, [sp, #0]
 8005c2e:	f001 fef7 	bl	8007a20 <HAL_DAC_Start_DMA>
	HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8005c32:	4620      	mov	r0, r4
 8005c34:	f000 fcfa 	bl	800662c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8005c38:	4639      	mov	r1, r7
 8005c3a:	483c      	ldr	r0, [pc, #240]	; (8005d2c <main+0x9b4>)
 8005c3c:	f001 febc 	bl	80079b8 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias
 8005c40:	4623      	mov	r3, r4
 8005c42:	4622      	mov	r2, r4
 8005c44:	4639      	mov	r1, r7
 8005c46:	4839      	ldr	r0, [pc, #228]	; (8005d2c <main+0x9b4>)
 8005c48:	f001 ff76 	bl	8007b38 <HAL_DAC_SetValue>
	WSPRBeaconState = NO_FIX;
 8005c4c:	4b39      	ldr	r3, [pc, #228]	; (8005d34 <main+0x9bc>)
 8005c4e:	701c      	strb	r4, [r3, #0]
		UserInput();
 8005c50:	f7fe feaa 	bl	80049a8 <UserInput>
		HAL_Delay(100);
 8005c54:	2064      	movs	r0, #100	; 0x64
 8005c56:	f000 fcd1 	bl	80065fc <HAL_Delay>
		if (ubADCDualConversionComplete == RESET)
 8005c5a:	e7f9      	b.n	8005c50 <main+0x8d8>
 8005c5c:	f3af 8000 	nop.w
 8005c60:	8f04fefd 	.word	0x8f04fefd
 8005c64:	3feffff9 	.word	0x3feffff9
 8005c68:	3dcccccd 	.word	0x3dcccccd
 8005c6c:	58020400 	.word	0x58020400
 8005c70:	24009654 	.word	0x24009654
 8005c74:	44228000 	.word	0x44228000
 8005c78:	2400220c 	.word	0x2400220c
 8005c7c:	2400c25c 	.word	0x2400c25c
 8005c80:	2400c238 	.word	0x2400c238
 8005c84:	24007c9c 	.word	0x24007c9c
 8005c88:	3f7cac08 	.word	0x3f7cac08
 8005c8c:	24007c8c 	.word	0x24007c8c
 8005c90:	24007c78 	.word	0x24007c78
 8005c94:	24002214 	.word	0x24002214
 8005c98:	24002a34 	.word	0x24002a34
 8005c9c:	24007d10 	.word	0x24007d10
 8005ca0:	24009650 	.word	0x24009650
 8005ca4:	24009640 	.word	0x24009640
 8005ca8:	3f7fdf3b 	.word	0x3f7fdf3b
 8005cac:	3f7ffcb9 	.word	0x3f7ffcb9
 8005cb0:	24006c64 	.word	0x24006c64
 8005cb4:	001e0002 	.word	0x001e0002
 8005cb8:	24002218 	.word	0x24002218
 8005cbc:	3949539c 	.word	0x3949539c
 8005cc0:	3ca3d70a 	.word	0x3ca3d70a
 8005cc4:	2400c260 	.word	0x2400c260
 8005cc8:	4af42400 	.word	0x4af42400
 8005ccc:	58024400 	.word	0x58024400
 8005cd0:	01012e00 	.word	0x01012e00
 8005cd4:	3b800000 	.word	0x3b800000
 8005cd8:	24002a30 	.word	0x24002a30
 8005cdc:	3c23d70a 	.word	0x3c23d70a
 8005ce0:	24002a20 	.word	0x24002a20
 8005ce4:	24004b50 	.word	0x24004b50
 8005ce8:	24009644 	.word	0x24009644
 8005cec:	240002cc 	.word	0x240002cc
 8005cf0:	24007cb8 	.word	0x24007cb8
 8005cf4:	24002a54 	.word	0x24002a54
 8005cf8:	24007cac 	.word	0x24007cac
 8005cfc:	2400c229 	.word	0x2400c229
 8005d00:	2400c228 	.word	0x2400c228
 8005d04:	2400c22c 	.word	0x2400c22c
 8005d08:	2400c22a 	.word	0x2400c22a
 8005d0c:	2400d3e9 	.word	0x2400d3e9
 8005d10:	2400c230 	.word	0x2400c230
 8005d14:	24007d08 	.word	0x24007d08
 8005d18:	24008e40 	.word	0x24008e40
 8005d1c:	2400be5c 	.word	0x2400be5c
 8005d20:	2400c14c 	.word	0x2400c14c
 8005d24:	2400c100 	.word	0x2400c100
 8005d28:	2400c068 	.word	0x2400c068
 8005d2c:	2400bf28 	.word	0x2400bf28
 8005d30:	24002220 	.word	0x24002220
 8005d34:	24008e18 	.word	0x24008e18

08005d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d38:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d3a:	4c14      	ldr	r4, [pc, #80]	; (8005d8c <HAL_MspInit+0x54>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8005d3c:	2102      	movs	r1, #2
{
 8005d3e:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8005d40:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d42:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8005d46:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8005d50:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8005d54:	400b      	ands	r3, r1
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8005d5a:	f001 fdb5 	bl	80078c8 <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8005d5e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8005d62:	2020      	movs	r0, #32
  __HAL_RCC_VREF_CLK_ENABLE();
 8005d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d68:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8005d6c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8005d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d74:	9301      	str	r3, [sp, #4]
 8005d76:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8005d78:	f000 fc58 	bl	800662c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8005d7c:	f000 fc6a 	bl	8006654 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8005d80:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d82:	b002      	add	sp, #8
 8005d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8005d88:	f000 bc5a 	b.w	8006640 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 8005d8c:	58024400 	.word	0x58024400

08005d90 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8005d90:	494c      	ldr	r1, [pc, #304]	; (8005ec4 <HAL_ADC_MspInit+0x134>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d92:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8005d94:	6802      	ldr	r2, [r0, #0]
{
 8005d96:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8005d98:	428a      	cmp	r2, r1
{
 8005d9a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d9c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005da0:	9306      	str	r3, [sp, #24]
 8005da2:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8005da6:	d029      	beq.n	8005dfc <HAL_ADC_MspInit+0x6c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8005da8:	4b47      	ldr	r3, [pc, #284]	; (8005ec8 <HAL_ADC_MspInit+0x138>)
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d001      	beq.n	8005db2 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005dae:	b00a      	add	sp, #40	; 0x28
 8005db0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005db2:	4a46      	ldr	r2, [pc, #280]	; (8005ecc <HAL_ADC_MspInit+0x13c>)
 8005db4:	6813      	ldr	r3, [r2, #0]
 8005db6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005db8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005dba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005dbc:	d070      	beq.n	8005ea0 <HAL_ADC_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dbe:	4b44      	ldr	r3, [pc, #272]	; (8005ed0 <HAL_ADC_MspInit+0x140>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005dc0:	2402      	movs	r4, #2
 8005dc2:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dc4:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dc6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dca:	4842      	ldr	r0, [pc, #264]	; (8005ed4 <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dcc:	f042 0202 	orr.w	r2, r2, #2
 8005dd0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	9303      	str	r3, [sp, #12]
 8005dde:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005de0:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005de4:	f003 fa54 	bl	8009290 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005de8:	2200      	movs	r2, #0
 8005dea:	2012      	movs	r0, #18
 8005dec:	4611      	mov	r1, r2
 8005dee:	f001 fd6b 	bl	80078c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005df2:	2012      	movs	r0, #18
 8005df4:	f001 fda6 	bl	8007944 <HAL_NVIC_EnableIRQ>
}
 8005df8:	b00a      	add	sp, #40	; 0x28
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005dfc:	4a33      	ldr	r2, [pc, #204]	; (8005ecc <HAL_ADC_MspInit+0x13c>)
 8005dfe:	4604      	mov	r4, r0
 8005e00:	6813      	ldr	r3, [r2, #0]
 8005e02:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005e04:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005e06:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005e08:	d03c      	beq.n	8005e84 <HAL_ADC_MspInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e0a:	4b31      	ldr	r3, [pc, #196]	; (8005ed0 <HAL_ADC_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e0c:	a904      	add	r1, sp, #16
 8005e0e:	4831      	ldr	r0, [pc, #196]	; (8005ed4 <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    hdma_adc1.Instance = DMA1_Stream0;
 8005e14:	4d30      	ldr	r5, [pc, #192]	; (8005ed8 <HAL_ADC_MspInit+0x148>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e16:	f042 0202 	orr.w	r2, r2, #2
 8005e1a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005e1e:	2202      	movs	r2, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005e2a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e2c:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005e2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e32:	f003 fa2d 	bl	8009290 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8005e36:	4929      	ldr	r1, [pc, #164]	; (8005edc <HAL_ADC_MspInit+0x14c>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005e38:	2209      	movs	r2, #9
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e3a:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005e3c:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e3e:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005e40:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e4c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005e50:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005e54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e5c:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8005e60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e64:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005e66:	f002 f87b 	bl	8007f60 <HAL_DMA_Init>
 8005e6a:	bb38      	cbnz	r0, 8005ebc <HAL_ADC_MspInit+0x12c>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005e70:	64e5      	str	r5, [r4, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005e72:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005e74:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005e76:	f001 fd27 	bl	80078c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005e7a:	2012      	movs	r0, #18
 8005e7c:	f001 fd62 	bl	8007944 <HAL_NVIC_EnableIRQ>
}
 8005e80:	b00a      	add	sp, #40	; 0x28
 8005e82:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005e84:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <HAL_ADC_MspInit+0x140>)
 8005e86:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8005e8a:	f042 0220 	orr.w	r2, r2, #32
 8005e8e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8005e92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	9b00      	ldr	r3, [sp, #0]
 8005e9e:	e7b4      	b.n	8005e0a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005ea0:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <HAL_ADC_MspInit+0x140>)
 8005ea2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8005ea6:	f042 0220 	orr.w	r2, r2, #32
 8005eaa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8005eae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	9302      	str	r3, [sp, #8]
 8005eb8:	9b02      	ldr	r3, [sp, #8]
 8005eba:	e780      	b.n	8005dbe <HAL_ADC_MspInit+0x2e>
      Error_Handler();
 8005ebc:	f7ff f966 	bl	800518c <Error_Handler>
 8005ec0:	e7d4      	b.n	8005e6c <HAL_ADC_MspInit+0xdc>
 8005ec2:	bf00      	nop
 8005ec4:	40022000 	.word	0x40022000
 8005ec8:	40022100 	.word	0x40022100
 8005ecc:	2400d3f0 	.word	0x2400d3f0
 8005ed0:	58024400 	.word	0x58024400
 8005ed4:	58020400 	.word	0x58020400
 8005ed8:	2400bf3c 	.word	0x2400bf3c
 8005edc:	40020010 	.word	0x40020010

08005ee0 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8005ee0:	4b2c      	ldr	r3, [pc, #176]	; (8005f94 <HAL_DAC_MspInit+0xb4>)
 8005ee2:	6802      	ldr	r2, [r0, #0]
{
 8005ee4:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 8005ee6:	429a      	cmp	r2, r3
{
 8005ee8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eea:	f04f 0400 	mov.w	r4, #0
 8005eee:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8005ef2:	9404      	str	r4, [sp, #16]
 8005ef4:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 8005ef8:	d001      	beq.n	8005efe <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8005efa:	b008      	add	sp, #32
 8005efc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8005efe:	4b26      	ldr	r3, [pc, #152]	; (8005f98 <HAL_DAC_MspInit+0xb8>)
 8005f00:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f02:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8005f04:	4e25      	ldr	r6, [pc, #148]	; (8005f9c <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8005f06:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8005f0a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005f0e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8005f12:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8005f16:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8005f1a:	9200      	str	r2, [sp, #0]
 8005f1c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f1e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005f22:	f042 0201 	orr.w	r2, r2, #1
 8005f26:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005f2a:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005f36:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f38:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f3a:	4819      	ldr	r0, [pc, #100]	; (8005fa0 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005f3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f40:	f003 f9a6 	bl	8009290 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8005f44:	4a17      	ldr	r2, [pc, #92]	; (8005fa4 <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8005f46:	2343      	movs	r3, #67	; 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8005f48:	4630      	mov	r0, r6
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8005f4a:	6032      	str	r2, [r6, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f4c:	2240      	movs	r2, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8005f4e:	6073      	str	r3, [r6, #4]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f54:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005f56:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005f5a:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f60:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005f62:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f64:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005f66:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8005f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f6e:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8005f70:	f001 fff6 	bl	8007f60 <HAL_DMA_Init>
 8005f74:	b958      	cbnz	r0, 8005f8e <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005f76:	2200      	movs	r2, #0
 8005f78:	2101      	movs	r1, #1
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8005f7a:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005f7c:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8005f7e:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005f80:	f001 fca2 	bl	80078c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005f84:	2036      	movs	r0, #54	; 0x36
 8005f86:	f001 fcdd 	bl	8007944 <HAL_NVIC_EnableIRQ>
}
 8005f8a:	b008      	add	sp, #32
 8005f8c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8005f8e:	f7ff f8fd 	bl	800518c <Error_Handler>
 8005f92:	e7f0      	b.n	8005f76 <HAL_DAC_MspInit+0x96>
 8005f94:	40007400 	.word	0x40007400
 8005f98:	58024400 	.word	0x58024400
 8005f9c:	2400bfb4 	.word	0x2400bfb4
 8005fa0:	58020000 	.word	0x58020000
 8005fa4:	40020028 	.word	0x40020028

08005fa8 <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 8005fa8:	4a1b      	ldr	r2, [pc, #108]	; (8006018 <HAL_LPTIM_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005faa:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 8005fac:	6801      	ldr	r1, [r0, #0]
{
 8005fae:	b510      	push	{r4, lr}
  if(hlptim->Instance==LPTIM2)
 8005fb0:	4291      	cmp	r1, r2
{
 8005fb2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fb4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005fb8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005fbc:	9306      	str	r3, [sp, #24]
  if(hlptim->Instance==LPTIM2)
 8005fbe:	d001      	beq.n	8005fc4 <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8005fc0:	b008      	add	sp, #32
 8005fc2:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8005fc4:	4b15      	ldr	r3, [pc, #84]	; (800601c <HAL_LPTIM_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8005fc6:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fc8:	a902      	add	r1, sp, #8
 8005fca:	4815      	ldr	r0, [pc, #84]	; (8006020 <HAL_LPTIM_MspInit+0x78>)
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8005fcc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8005fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8005fd8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8005fdc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005fe0:	9200      	str	r2, [sp, #0]
 8005fe2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fe4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005fe8:	f042 0202 	orr.w	r2, r2, #2
 8005fec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8005ff4:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ff6:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005ffa:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8006010 <HAL_LPTIM_MspInit+0x68>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006002:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006006:	f003 f943 	bl	8009290 <HAL_GPIO_Init>
}
 800600a:	b008      	add	sp, #32
 800600c:	bd10      	pop	{r4, pc}
 800600e:	bf00      	nop
 8006010:	00000400 	.word	0x00000400
 8006014:	00000002 	.word	0x00000002
 8006018:	58002400 	.word	0x58002400
 800601c:	58024400 	.word	0x58024400
 8006020:	58020400 	.word	0x58020400

08006024 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8006024:	6803      	ldr	r3, [r0, #0]
 8006026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800602a:	b510      	push	{r4, lr}
 800602c:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM2)
 800602e:	d007      	beq.n	8006040 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8006030:	4a27      	ldr	r2, [pc, #156]	; (80060d0 <HAL_TIM_Base_MspInit+0xac>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d01c      	beq.n	8006070 <HAL_TIM_Base_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8006036:	4a27      	ldr	r2, [pc, #156]	; (80060d4 <HAL_TIM_Base_MspInit+0xb0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d031      	beq.n	80060a0 <HAL_TIM_Base_MspInit+0x7c>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800603c:	b004      	add	sp, #16
 800603e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006040:	4b25      	ldr	r3, [pc, #148]	; (80060d8 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8006042:	201c      	movs	r0, #28
 8006044:	2200      	movs	r2, #0
 8006046:	2104      	movs	r1, #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006048:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 800604c:	f044 0401 	orr.w	r4, r4, #1
 8006050:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8006054:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	9301      	str	r3, [sp, #4]
 800605e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8006060:	f001 fc32 	bl	80078c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006064:	201c      	movs	r0, #28
}
 8006066:	b004      	add	sp, #16
 8006068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800606c:	f001 bc6a 	b.w	8007944 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006070:	4b19      	ldr	r3, [pc, #100]	; (80060d8 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006072:	2036      	movs	r0, #54	; 0x36
 8006074:	2200      	movs	r2, #0
 8006076:	2101      	movs	r1, #1
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006078:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 800607c:	f044 0410 	orr.w	r4, r4, #16
 8006080:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8006084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006088:	f003 0310 	and.w	r3, r3, #16
 800608c:	9302      	str	r3, [sp, #8]
 800608e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006090:	f001 fc1a 	bl	80078c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006094:	2036      	movs	r0, #54	; 0x36
}
 8006096:	b004      	add	sp, #16
 8006098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800609c:	f001 bc52 	b.w	8007944 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80060a0:	4b0d      	ldr	r3, [pc, #52]	; (80060d8 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80060a2:	2037      	movs	r0, #55	; 0x37
 80060a4:	2200      	movs	r2, #0
 80060a6:	2101      	movs	r1, #1
    __HAL_RCC_TIM7_CLK_ENABLE();
 80060a8:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 80060ac:	f044 0420 	orr.w	r4, r4, #32
 80060b0:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 80060b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	9303      	str	r3, [sp, #12]
 80060be:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80060c0:	f001 fc02 	bl	80078c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80060c4:	2037      	movs	r0, #55	; 0x37
}
 80060c6:	b004      	add	sp, #16
 80060c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80060cc:	f001 bc3a 	b.w	8007944 <HAL_NVIC_EnableIRQ>
 80060d0:	40001000 	.word	0x40001000
 80060d4:	40001400 	.word	0x40001400
 80060d8:	58024400 	.word	0x58024400
 80060dc:	00000000 	.word	0x00000000

080060e0 <HAL_TIM_Encoder_MspInit>:
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 80060e0:	4a1d      	ldr	r2, [pc, #116]	; (8006158 <HAL_TIM_Encoder_MspInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060e2:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 80060e4:	6801      	ldr	r1, [r0, #0]
{
 80060e6:	b500      	push	{lr}
  if(htim_encoder->Instance==TIM4)
 80060e8:	4291      	cmp	r1, r2
{
 80060ea:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80060f4:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 80060f6:	d002      	beq.n	80060fe <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80060f8:	b009      	add	sp, #36	; 0x24
 80060fa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 80060fe:	4b17      	ldr	r3, [pc, #92]	; (800615c <HAL_TIM_Encoder_MspInit+0x7c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006100:	2001      	movs	r0, #1
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006102:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006104:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006108:	f042 0204 	orr.w	r2, r2, #4
 800610c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8006110:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006114:	f002 0204 	and.w	r2, r2, #4
 8006118:	9200      	str	r2, [sp, #0]
 800611a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800611c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006120:	f042 0208 	orr.w	r2, r2, #8
 8006124:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006128:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800612a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800612e:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006130:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006134:	480a      	ldr	r0, [pc, #40]	; (8006160 <HAL_TIM_Encoder_MspInit+0x80>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006136:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006138:	9301      	str	r3, [sp, #4]
 800613a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800613c:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8006150 <HAL_TIM_Encoder_MspInit+0x70>
 8006140:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006144:	f003 f8a4 	bl	8009290 <HAL_GPIO_Init>
}
 8006148:	b009      	add	sp, #36	; 0x24
 800614a:	f85d fb04 	ldr.w	pc, [sp], #4
 800614e:	bf00      	nop
 8006150:	00003000 	.word	0x00003000
 8006154:	00000002 	.word	0x00000002
 8006158:	40000800 	.word	0x40000800
 800615c:	58024400 	.word	0x58024400
 8006160:	58020c00 	.word	0x58020c00

08006164 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006164:	b5d0      	push	{r4, r6, r7, lr}
 8006166:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006168:	2100      	movs	r1, #0
{
 800616a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800616c:	22bc      	movs	r2, #188	; 0xbc
 800616e:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006170:	9108      	str	r1, [sp, #32]
 8006172:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8006176:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800617a:	f00a fc25 	bl	80109c8 <memset>
  if(huart->Instance==USART3)
 800617e:	4b2d      	ldr	r3, [pc, #180]	; (8006234 <HAL_UART_MspInit+0xd0>)
 8006180:	6822      	ldr	r2, [r4, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d001      	beq.n	800618a <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006186:	b038      	add	sp, #224	; 0xe0
 8006188:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800618a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800618c:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800618e:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006190:	f004 ff32 	bl	800aff8 <HAL_RCCEx_PeriphCLKConfig>
 8006194:	2800      	cmp	r0, #0
 8006196:	d149      	bne.n	800622c <HAL_UART_MspInit+0xc8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006198:	4b27      	ldr	r3, [pc, #156]	; (8006238 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800619a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800619e:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80061a0:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 80061a2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80061a6:	2600      	movs	r6, #0
 80061a8:	2700      	movs	r7, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 80061aa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80061ae:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80061b2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80061b6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80061ba:	9201      	str	r2, [sp, #4]
 80061bc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80061c2:	f042 0202 	orr.w	r2, r2, #2
 80061c6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80061ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80061ce:	f002 0202 	and.w	r2, r2, #2
 80061d2:	9202      	str	r2, [sp, #8]
 80061d4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80061da:	f042 0208 	orr.w	r2, r2, #8
 80061de:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80061e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80061e6:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061e8:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80061ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061f0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061f2:	a904      	add	r1, sp, #16
 80061f4:	4811      	ldr	r0, [pc, #68]	; (800623c <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061f6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80061f8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061fc:	f003 f848 	bl	8009290 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006200:	2302      	movs	r3, #2
 8006202:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006206:	a904      	add	r1, sp, #16
 8006208:	480d      	ldr	r0, [pc, #52]	; (8006240 <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800620a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800620c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006210:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006214:	f003 f83c 	bl	8009290 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8006218:	2200      	movs	r2, #0
 800621a:	2101      	movs	r1, #1
 800621c:	2027      	movs	r0, #39	; 0x27
 800621e:	f001 fb53 	bl	80078c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006222:	2027      	movs	r0, #39	; 0x27
 8006224:	f001 fb8e 	bl	8007944 <HAL_NVIC_EnableIRQ>
}
 8006228:	b038      	add	sp, #224	; 0xe0
 800622a:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 800622c:	f7fe ffae 	bl	800518c <Error_Handler>
 8006230:	e7b2      	b.n	8006198 <HAL_UART_MspInit+0x34>
 8006232:	bf00      	nop
 8006234:	40004800 	.word	0x40004800
 8006238:	58024400 	.word	0x58024400
 800623c:	58020400 	.word	0x58020400
 8006240:	58020c00 	.word	0x58020c00

08006244 <NMI_Handler>:

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop

08006248 <HardFault_Handler>:
void HardFault_Handler(void)
{
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8006248:	e7fe      	b.n	8006248 <HardFault_Handler>
 800624a:	bf00      	nop

0800624c <MemManage_Handler>:
void MemManage_Handler(void)
{
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 800624c:	e7fe      	b.n	800624c <MemManage_Handler>
 800624e:	bf00      	nop

08006250 <BusFault_Handler>:
void BusFault_Handler(void)
{
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8006250:	e7fe      	b.n	8006250 <BusFault_Handler>
 8006252:	bf00      	nop

08006254 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8006254:	e7fe      	b.n	8006254 <UsageFault_Handler>
 8006256:	bf00      	nop

08006258 <SVC_Handler>:
{
	/* USER CODE BEGIN SVCall_IRQn 0 */

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 8006258:	f000 b966 	b.w	8006528 <ADC3_IRQHandler>

0800625c <DebugMon_Handler>:
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop

08006260 <PendSV_Handler>:
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop

08006264 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8006264:	b508      	push	{r3, lr}
	/* USER CODE BEGIN SysTick_IRQn 0 */
	extern uint32_t SystemSeconds, SystemMinutes;
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8006266:	f000 f9b7 	bl	80065d8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */
	if ((uwTick % 1000) == 0)
 800626a:	4b0d      	ldr	r3, [pc, #52]	; (80062a0 <SysTick_Handler+0x3c>)
 800626c:	490d      	ldr	r1, [pc, #52]	; (80062a4 <SysTick_Handler+0x40>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a0d      	ldr	r2, [pc, #52]	; (80062a8 <SysTick_Handler+0x44>)
 8006272:	fb01 f303 	mul.w	r3, r1, r3
 8006276:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 800627a:	d310      	bcc.n	800629e <SysTick_Handler+0x3a>
	{
		SystemSeconds++;
 800627c:	490b      	ldr	r1, [pc, #44]	; (80062ac <SysTick_Handler+0x48>)
 800627e:	4a0c      	ldr	r2, [pc, #48]	; (80062b0 <SysTick_Handler+0x4c>)
 8006280:	680b      	ldr	r3, [r1, #0]
		if((SystemSeconds % 60) == 0)
 8006282:	480c      	ldr	r0, [pc, #48]	; (80062b4 <SysTick_Handler+0x50>)
		SystemSeconds++;
 8006284:	3301      	adds	r3, #1
 8006286:	fb03 f202 	mul.w	r2, r3, r2
 800628a:	600b      	str	r3, [r1, #0]
		if((SystemSeconds % 60) == 0)
 800628c:	ebb0 0fb2 	cmp.w	r0, r2, ror #2
 8006290:	d305      	bcc.n	800629e <SysTick_Handler+0x3a>
		{
			SystemMinutes++;
 8006292:	4a09      	ldr	r2, [pc, #36]	; (80062b8 <SysTick_Handler+0x54>)
			SystemSeconds = 0;
 8006294:	2000      	movs	r0, #0
			SystemMinutes++;
 8006296:	6813      	ldr	r3, [r2, #0]
			SystemSeconds = 0;
 8006298:	6008      	str	r0, [r1, #0]
			SystemMinutes++;
 800629a:	3301      	adds	r3, #1
 800629c:	6013      	str	r3, [r2, #0]
		}
	}

	/* USER CODE END SysTick_IRQn 1 */
}
 800629e:	bd08      	pop	{r3, pc}
 80062a0:	2400d3f8 	.word	0x2400d3f8
 80062a4:	26e978d5 	.word	0x26e978d5
 80062a8:	00418937 	.word	0x00418937
 80062ac:	24007cf4 	.word	0x24007cf4
 80062b0:	eeeeeeef 	.word	0xeeeeeeef
 80062b4:	04444444 	.word	0x04444444
 80062b8:	24007cf0 	.word	0x24007cf0

080062bc <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 80062bc:	4801      	ldr	r0, [pc, #4]	; (80062c4 <DMA1_Stream0_IRQHandler+0x8>)
 80062be:	f002 bc97 	b.w	8008bf0 <HAL_DMA_IRQHandler>
 80062c2:	bf00      	nop
 80062c4:	2400bf3c 	.word	0x2400bf3c

080062c8 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
	/* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

	/* USER CODE END DMA1_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80062c8:	4801      	ldr	r0, [pc, #4]	; (80062d0 <DMA1_Stream1_IRQHandler+0x8>)
 80062ca:	f002 bc91 	b.w	8008bf0 <HAL_DMA_IRQHandler>
 80062ce:	bf00      	nop
 80062d0:	2400bfb4 	.word	0x2400bfb4

080062d4 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
	/* USER CODE BEGIN ADC_IRQn 0 */

	/* USER CODE END ADC_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 80062d4:	4804      	ldr	r0, [pc, #16]	; (80062e8 <ADC_IRQHandler+0x14>)
{
 80062d6:	b508      	push	{r3, lr}
	HAL_ADC_IRQHandler(&hadc1);
 80062d8:	f000 f9dc 	bl	8006694 <HAL_ADC_IRQHandler>
	HAL_ADC_IRQHandler(&hadc2);
 80062dc:	4803      	ldr	r0, [pc, #12]	; (80062ec <ADC_IRQHandler+0x18>)
	/* USER CODE BEGIN ADC_IRQn 1 */

	/* USER CODE END ADC_IRQn 1 */
}
 80062de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_ADC_IRQHandler(&hadc2);
 80062e2:	f000 b9d7 	b.w	8006694 <HAL_ADC_IRQHandler>
 80062e6:	bf00      	nop
 80062e8:	2400be5c 	.word	0x2400be5c
 80062ec:	2400bec0 	.word	0x2400bec0

080062f0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 80062f0:	4801      	ldr	r0, [pc, #4]	; (80062f8 <TIM2_IRQHandler+0x8>)
 80062f2:	f006 badf 	b.w	800c8b4 <HAL_TIM_IRQHandler>
 80062f6:	bf00      	nop
 80062f8:	2400c068 	.word	0x2400c068

080062fc <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 80062fc:	4801      	ldr	r0, [pc, #4]	; (8006304 <USART3_IRQHandler+0x8>)
 80062fe:	f006 bc01 	b.w	800cb04 <HAL_UART_IRQHandler>
 8006302:	bf00      	nop
 8006304:	2400c198 	.word	0x2400c198

08006308 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(SwInt1_Pin);
 8006308:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800630c:	f003 b904 	b.w	8009518 <HAL_GPIO_EXTI_IRQHandler>

08006310 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_DAC_IRQHandler(&hdac1);
 8006310:	4804      	ldr	r0, [pc, #16]	; (8006324 <TIM6_DAC_IRQHandler+0x14>)
{
 8006312:	b508      	push	{r3, lr}
	HAL_DAC_IRQHandler(&hdac1);
 8006314:	f001 fc46 	bl	8007ba4 <HAL_DAC_IRQHandler>
	HAL_TIM_IRQHandler(&htim6);
 8006318:	4803      	ldr	r0, [pc, #12]	; (8006328 <TIM6_DAC_IRQHandler+0x18>)
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 800631a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_IRQHandler(&htim6);
 800631e:	f006 bac9 	b.w	800c8b4 <HAL_TIM_IRQHandler>
 8006322:	bf00      	nop
 8006324:	2400bf28 	.word	0x2400bf28
 8006328:	2400c100 	.word	0x2400c100

0800632c <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
	/* USER CODE BEGIN TIM7_IRQn 0 */

	/* USER CODE END TIM7_IRQn 0 */
	HAL_TIM_IRQHandler(&htim7);
 800632c:	4801      	ldr	r0, [pc, #4]	; (8006334 <TIM7_IRQHandler+0x8>)
 800632e:	f006 bac1 	b.w	800c8b4 <HAL_TIM_IRQHandler>
 8006332:	bf00      	nop
 8006334:	2400c14c 	.word	0x2400c14c

08006338 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
	/* USER CODE BEGIN OTG_FS_IRQn 0 */

	/* USER CODE END OTG_FS_IRQn 0 */
	HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006338:	4801      	ldr	r0, [pc, #4]	; (8006340 <OTG_FS_IRQHandler+0x8>)
 800633a:	f003 ba25 	b.w	8009788 <HAL_PCD_IRQHandler>
 800633e:	bf00      	nop
 8006340:	2400e8d0 	.word	0x2400e8d0

08006344 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8006344:	2001      	movs	r0, #1
 8006346:	4770      	bx	lr

08006348 <_kill>:

int _kill(int pid, int sig)
{
 8006348:	b508      	push	{r3, lr}
	errno = EINVAL;
 800634a:	f00a fb05 	bl	8010958 <__errno>
 800634e:	2216      	movs	r2, #22
 8006350:	4603      	mov	r3, r0
	return -1;
}
 8006352:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8006356:	601a      	str	r2, [r3, #0]
}
 8006358:	bd08      	pop	{r3, pc}
 800635a:	bf00      	nop

0800635c <_exit>:

void _exit (int status)
{
 800635c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800635e:	f00a fafb 	bl	8010958 <__errno>
 8006362:	2316      	movs	r3, #22
 8006364:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8006366:	e7fe      	b.n	8006366 <_exit+0xa>

08006368 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006368:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800636a:	1e16      	subs	r6, r2, #0
 800636c:	dd07      	ble.n	800637e <_read+0x16>
 800636e:	460c      	mov	r4, r1
 8006370:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8006372:	f3af 8000 	nop.w
 8006376:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800637a:	42a5      	cmp	r5, r4
 800637c:	d1f9      	bne.n	8006372 <_read+0xa>
	}

return len;
}
 800637e:	4630      	mov	r0, r6
 8006380:	bd70      	pop	{r4, r5, r6, pc}
 8006382:	bf00      	nop

08006384 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006384:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006386:	1e16      	subs	r6, r2, #0
 8006388:	dd07      	ble.n	800639a <_write+0x16>
 800638a:	460c      	mov	r4, r1
 800638c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800638e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006392:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006396:	42ac      	cmp	r4, r5
 8006398:	d1f9      	bne.n	800638e <_write+0xa>
	}
	return len;
}
 800639a:	4630      	mov	r0, r6
 800639c:	bd70      	pop	{r4, r5, r6, pc}
 800639e:	bf00      	nop

080063a0 <_close>:

int _close(int file)
{
	return -1;
}
 80063a0:	f04f 30ff 	mov.w	r0, #4294967295
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop

080063a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80063a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80063ac:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80063ae:	604b      	str	r3, [r1, #4]
}
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop

080063b4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80063b4:	2001      	movs	r0, #1
 80063b6:	4770      	bx	lr

080063b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80063b8:	2000      	movs	r0, #0
 80063ba:	4770      	bx	lr

080063bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80063bc:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80063be:	4c0d      	ldr	r4, [pc, #52]	; (80063f4 <_sbrk+0x38>)
{
 80063c0:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80063c2:	490d      	ldr	r1, [pc, #52]	; (80063f8 <_sbrk+0x3c>)
 80063c4:	4d0d      	ldr	r5, [pc, #52]	; (80063fc <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80063c6:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80063c8:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 80063ca:	b12a      	cbz	r2, 80063d8 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80063cc:	4413      	add	r3, r2
 80063ce:	428b      	cmp	r3, r1
 80063d0:	d808      	bhi.n	80063e4 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80063d2:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 80063d4:	6023      	str	r3, [r4, #0]
}
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 80063d8:	4809      	ldr	r0, [pc, #36]	; (8006400 <_sbrk+0x44>)
 80063da:	4602      	mov	r2, r0
 80063dc:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80063de:	4413      	add	r3, r2
 80063e0:	428b      	cmp	r3, r1
 80063e2:	d9f6      	bls.n	80063d2 <_sbrk+0x16>
    errno = ENOMEM;
 80063e4:	f00a fab8 	bl	8010958 <__errno>
 80063e8:	230c      	movs	r3, #12
    return (void *)-1;
 80063ea:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80063ee:	6003      	str	r3, [r0, #0]
}
 80063f0:	4610      	mov	r0, r2
 80063f2:	bd38      	pop	{r3, r4, r5, pc}
 80063f4:	2400d3f4 	.word	0x2400d3f4
 80063f8:	24080000 	.word	0x24080000
 80063fc:	00000400 	.word	0x00000400
 8006400:	2400ef08 	.word	0x2400ef08

08006404 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006404:	4929      	ldr	r1, [pc, #164]	; (80064ac <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006406:	4a2a      	ldr	r2, [pc, #168]	; (80064b0 <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006408:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800640c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8006410:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006416:	6813      	ldr	r3, [r2, #0]
 8006418:	f003 030f 	and.w	r3, r3, #15
 800641c:	2b06      	cmp	r3, #6
 800641e:	d805      	bhi.n	800642c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006420:	6813      	ldr	r3, [r2, #0]
 8006422:	f023 030f 	bic.w	r3, r3, #15
 8006426:	f043 0307 	orr.w	r3, r3, #7
 800642a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800642c:	4b21      	ldr	r3, [pc, #132]	; (80064b4 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800642e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006430:	4a21      	ldr	r2, [pc, #132]	; (80064b8 <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 8006432:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006434:	481e      	ldr	r0, [pc, #120]	; (80064b0 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8006436:	f041 0101 	orr.w	r1, r1, #1
 800643a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800643c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800643e:	6819      	ldr	r1, [r3, #0]
 8006440:	400a      	ands	r2, r1
 8006442:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006444:	6803      	ldr	r3, [r0, #0]
 8006446:	071b      	lsls	r3, r3, #28
 8006448:	d505      	bpl.n	8006456 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800644a:	6803      	ldr	r3, [r0, #0]
 800644c:	f023 030f 	bic.w	r3, r3, #15
 8006450:	f043 0307 	orr.w	r3, r3, #7
 8006454:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006456:	4b17      	ldr	r3, [pc, #92]	; (80064b4 <SystemInit+0xb0>)
 8006458:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800645a:	4918      	ldr	r1, [pc, #96]	; (80064bc <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 800645c:	4c18      	ldr	r4, [pc, #96]	; (80064c0 <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 800645e:	4819      	ldr	r0, [pc, #100]	; (80064c4 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 8006460:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006462:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006464:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8006466:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8006468:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800646a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800646c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800646e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006470:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006472:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006474:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006476:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006478:	4c13      	ldr	r4, [pc, #76]	; (80064c8 <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 800647a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800647e:	4913      	ldr	r1, [pc, #76]	; (80064cc <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 8006480:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8006482:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	4019      	ands	r1, r3
 8006488:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800648c:	d203      	bcs.n	8006496 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800648e:	4b10      	ldr	r3, [pc, #64]	; (80064d0 <SystemInit+0xcc>)
 8006490:	2201      	movs	r2, #1
 8006492:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006496:	490f      	ldr	r1, [pc, #60]	; (80064d4 <SystemInit+0xd0>)
 8006498:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800649c:	4b03      	ldr	r3, [pc, #12]	; (80064ac <SystemInit+0xa8>)
 800649e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80064a2:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80064a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80064a8:	609a      	str	r2, [r3, #8]
}
 80064aa:	4770      	bx	lr
 80064ac:	e000ed00 	.word	0xe000ed00
 80064b0:	52002000 	.word	0x52002000
 80064b4:	58024400 	.word	0x58024400
 80064b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80064bc:	01010280 	.word	0x01010280
 80064c0:	02020200 	.word	0x02020200
 80064c4:	01ff0000 	.word	0x01ff0000
 80064c8:	5c001000 	.word	0x5c001000
 80064cc:	ffff0000 	.word	0xffff0000
 80064d0:	51008000 	.word	0x51008000
 80064d4:	52004000 	.word	0x52004000

080064d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80064d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006510 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80064dc:	f7ff ff92 	bl	8006404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80064e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80064e2:	e003      	b.n	80064ec <LoopCopyDataInit>

080064e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80064e4:	4b0b      	ldr	r3, [pc, #44]	; (8006514 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80064e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80064e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80064ea:	3104      	adds	r1, #4

080064ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80064ec:	480a      	ldr	r0, [pc, #40]	; (8006518 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80064ee:	4b0b      	ldr	r3, [pc, #44]	; (800651c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80064f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80064f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80064f4:	d3f6      	bcc.n	80064e4 <CopyDataInit>
  ldr  r2, =_sbss
 80064f6:	4a0a      	ldr	r2, [pc, #40]	; (8006520 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80064f8:	e002      	b.n	8006500 <LoopFillZerobss>

080064fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80064fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80064fc:	f842 3b04 	str.w	r3, [r2], #4

08006500 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006500:	4b08      	ldr	r3, [pc, #32]	; (8006524 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8006502:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006504:	d3f9      	bcc.n	80064fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006506:	f00a fa2d 	bl	8010964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800650a:	f7fe ff35 	bl	8005378 <main>
  bx  lr    
 800650e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006510:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8006514:	0801f5a8 	.word	0x0801f5a8
  ldr  r0, =_sdata
 8006518:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800651c:	24000728 	.word	0x24000728
  ldr  r2, =_sbss
 8006520:	24000740 	.word	0x24000740
  ldr  r3, = _ebss
 8006524:	2400ef08 	.word	0x2400ef08

08006528 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006528:	e7fe      	b.n	8006528 <ADC3_IRQHandler>
	...

0800652c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800652c:	4b0f      	ldr	r3, [pc, #60]	; (800656c <HAL_InitTick+0x40>)
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	b90b      	cbnz	r3, 8006536 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8006532:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8006534:	4770      	bx	lr
{
 8006536:	b510      	push	{r4, lr}
 8006538:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800653a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800653e:	4a0c      	ldr	r2, [pc, #48]	; (8006570 <HAL_InitTick+0x44>)
 8006540:	fbb0 f3f3 	udiv	r3, r0, r3
 8006544:	6810      	ldr	r0, [r2, #0]
 8006546:	fbb0 f0f3 	udiv	r0, r0, r3
 800654a:	f001 fa09 	bl	8007960 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800654e:	2c0f      	cmp	r4, #15
 8006550:	d800      	bhi.n	8006554 <HAL_InitTick+0x28>
 8006552:	b108      	cbz	r0, 8006558 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8006554:	2001      	movs	r0, #1
}
 8006556:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006558:	2200      	movs	r2, #0
 800655a:	4621      	mov	r1, r4
 800655c:	f04f 30ff 	mov.w	r0, #4294967295
 8006560:	f001 f9b2 	bl	80078c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006564:	4b03      	ldr	r3, [pc, #12]	; (8006574 <HAL_InitTick+0x48>)
 8006566:	2000      	movs	r0, #0
 8006568:	601c      	str	r4, [r3, #0]
}
 800656a:	bd10      	pop	{r4, pc}
 800656c:	240003d4 	.word	0x240003d4
 8006570:	240003cc 	.word	0x240003cc
 8006574:	240003d8 	.word	0x240003d8

08006578 <HAL_Init>:
{
 8006578:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800657a:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800657c:	4c12      	ldr	r4, [pc, #72]	; (80065c8 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800657e:	f001 f991 	bl	80078a4 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006582:	f004 f9ad 	bl	800a8e0 <HAL_RCC_GetSysClockFreq>
 8006586:	4b11      	ldr	r3, [pc, #68]	; (80065cc <HAL_Init+0x54>)
 8006588:	4911      	ldr	r1, [pc, #68]	; (80065d0 <HAL_Init+0x58>)
 800658a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800658c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800658e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006592:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006596:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006598:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800659a:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800659e:	490d      	ldr	r1, [pc, #52]	; (80065d4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80065a0:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80065a4:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80065a6:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80065aa:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80065ac:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80065ae:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80065b0:	f7ff ffbc 	bl	800652c <HAL_InitTick>
 80065b4:	b110      	cbz	r0, 80065bc <HAL_Init+0x44>
    return HAL_ERROR;
 80065b6:	2401      	movs	r4, #1
}
 80065b8:	4620      	mov	r0, r4
 80065ba:	bd10      	pop	{r4, pc}
 80065bc:	4604      	mov	r4, r0
  HAL_MspInit();
 80065be:	f7ff fbbb 	bl	8005d38 <HAL_MspInit>
}
 80065c2:	4620      	mov	r0, r4
 80065c4:	bd10      	pop	{r4, pc}
 80065c6:	bf00      	nop
 80065c8:	240003d0 	.word	0x240003d0
 80065cc:	58024400 	.word	0x58024400
 80065d0:	0801af3c 	.word	0x0801af3c
 80065d4:	240003cc 	.word	0x240003cc

080065d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80065d8:	4a03      	ldr	r2, [pc, #12]	; (80065e8 <HAL_IncTick+0x10>)
 80065da:	4b04      	ldr	r3, [pc, #16]	; (80065ec <HAL_IncTick+0x14>)
 80065dc:	6811      	ldr	r1, [r2, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	440b      	add	r3, r1
 80065e2:	6013      	str	r3, [r2, #0]
}
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	2400d3f8 	.word	0x2400d3f8
 80065ec:	240003d4 	.word	0x240003d4

080065f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80065f0:	4b01      	ldr	r3, [pc, #4]	; (80065f8 <HAL_GetTick+0x8>)
 80065f2:	6818      	ldr	r0, [r3, #0]
}
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	2400d3f8 	.word	0x2400d3f8

080065fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065fc:	b538      	push	{r3, r4, r5, lr}
 80065fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006600:	f7ff fff6 	bl	80065f0 <HAL_GetTick>
 8006604:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006606:	1c63      	adds	r3, r4, #1
 8006608:	d002      	beq.n	8006610 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800660a:	4b04      	ldr	r3, [pc, #16]	; (800661c <HAL_Delay+0x20>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006610:	f7ff ffee 	bl	80065f0 <HAL_GetTick>
 8006614:	1b43      	subs	r3, r0, r5
 8006616:	42a3      	cmp	r3, r4
 8006618:	d3fa      	bcc.n	8006610 <HAL_Delay+0x14>
  {
  }
}
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	240003d4 	.word	0x240003d4

08006620 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006620:	4b01      	ldr	r3, [pc, #4]	; (8006628 <HAL_GetREVID+0x8>)
 8006622:	6818      	ldr	r0, [r3, #0]
}
 8006624:	0c00      	lsrs	r0, r0, #16
 8006626:	4770      	bx	lr
 8006628:	5c001000 	.word	0x5c001000

0800662c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 800662c:	4a03      	ldr	r2, [pc, #12]	; (800663c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 800662e:	6813      	ldr	r3, [r2, #0]
 8006630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006634:	4318      	orrs	r0, r3
 8006636:	6010      	str	r0, [r2, #0]
}
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	58003c00 	.word	0x58003c00

08006640 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8006640:	4a03      	ldr	r2, [pc, #12]	; (8006650 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8006642:	6813      	ldr	r3, [r2, #0]
 8006644:	f023 0302 	bic.w	r3, r3, #2
 8006648:	4318      	orrs	r0, r3
 800664a:	6010      	str	r0, [r2, #0]
}
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	58003c00 	.word	0x58003c00

08006654 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8006654:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8006656:	4c0a      	ldr	r4, [pc, #40]	; (8006680 <HAL_SYSCFG_EnableVREFBUF+0x2c>)
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	f043 0301 	orr.w	r3, r3, #1
 800665e:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006660:	f7ff ffc6 	bl	80065f0 <HAL_GetTick>
 8006664:	4605      	mov	r5, r0

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8006666:	e004      	b.n	8006672 <HAL_SYSCFG_EnableVREFBUF+0x1e>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8006668:	f7ff ffc2 	bl	80065f0 <HAL_GetTick>
 800666c:	1b40      	subs	r0, r0, r5
 800666e:	280a      	cmp	r0, #10
 8006670:	d804      	bhi.n	800667c <HAL_SYSCFG_EnableVREFBUF+0x28>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	071b      	lsls	r3, r3, #28
 8006676:	d5f7      	bpl.n	8006668 <HAL_SYSCFG_EnableVREFBUF+0x14>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8006678:	2000      	movs	r0, #0
}
 800667a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 800667c:	2003      	movs	r0, #3
}
 800667e:	bd38      	pop	{r3, r4, r5, pc}
 8006680:	58003c00 	.word	0x58003c00

08006684 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006684:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006686:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006688:	f7fd fd66 	bl	8004158 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800668c:	bd08      	pop	{r3, pc}
 800668e:	bf00      	nop

08006690 <HAL_ADC_ErrorCallback>:
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop

08006694 <HAL_ADC_IRQHandler>:
{
 8006694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006696:	4a90      	ldr	r2, [pc, #576]	; (80068d8 <HAL_ADC_IRQHandler+0x244>)
{
 8006698:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 800669a:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800669c:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 800669e:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80066a0:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066a2:	f000 8095 	beq.w	80067d0 <HAL_ADC_IRQHandler+0x13c>
 80066a6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80066aa:	4293      	cmp	r3, r2
 80066ac:	f000 8090 	beq.w	80067d0 <HAL_ADC_IRQHandler+0x13c>
 80066b0:	4a8a      	ldr	r2, [pc, #552]	; (80068dc <HAL_ADC_IRQHandler+0x248>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80066b2:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80066b4:	07a9      	lsls	r1, r5, #30
 80066b6:	f007 071f 	and.w	r7, r7, #31
 80066ba:	d502      	bpl.n	80066c2 <HAL_ADC_IRQHandler+0x2e>
 80066bc:	07b2      	lsls	r2, r6, #30
 80066be:	f100 80aa 	bmi.w	8006816 <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80066c2:	0769      	lsls	r1, r5, #29
 80066c4:	d579      	bpl.n	80067ba <HAL_ADC_IRQHandler+0x126>
 80066c6:	0772      	lsls	r2, r6, #29
 80066c8:	d577      	bpl.n	80067ba <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80066ca:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80066cc:	06d2      	lsls	r2, r2, #27
 80066ce:	d403      	bmi.n	80066d8 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80066d0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80066d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066d6:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80066de:	d11c      	bne.n	800671a <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80066e0:	4a7f      	ldr	r2, [pc, #508]	; (80068e0 <HAL_ADC_IRQHandler+0x24c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	f000 80e8 	beq.w	80068b8 <HAL_ADC_IRQHandler+0x224>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80066e8:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80066ea:	0490      	lsls	r0, r2, #18
 80066ec:	d415      	bmi.n	800671a <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	0711      	lsls	r1, r2, #28
 80066f2:	d512      	bpl.n	800671a <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	0752      	lsls	r2, r2, #29
 80066f8:	f100 80f6 	bmi.w	80068e8 <HAL_ADC_IRQHandler+0x254>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	f022 020c 	bic.w	r2, r2, #12
 8006702:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006704:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800670a:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800670c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800670e:	04db      	lsls	r3, r3, #19
 8006710:	d403      	bmi.n	800671a <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006712:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006714:	f043 0301 	orr.w	r3, r3, #1
 8006718:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800671a:	4620      	mov	r0, r4
 800671c:	f7fd fcfe 	bl	800411c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	220c      	movs	r2, #12
 8006724:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006726:	06a8      	lsls	r0, r5, #26
 8006728:	d54d      	bpl.n	80067c6 <HAL_ADC_IRQHandler+0x132>
 800672a:	06b1      	lsls	r1, r6, #26
 800672c:	d54b      	bpl.n	80067c6 <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800672e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006730:	06d1      	lsls	r1, r2, #27
 8006732:	d403      	bmi.n	800673c <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006734:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006736:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800673a:	6562      	str	r2, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800673c:	4968      	ldr	r1, [pc, #416]	; (80068e0 <HAL_ADC_IRQHandler+0x24c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800673e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006740:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006742:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006744:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 8006748:	d073      	beq.n	8006832 <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800674a:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800674c:	b9d2      	cbnz	r2, 8006784 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800674e:	018a      	lsls	r2, r1, #6
 8006750:	f100 80aa 	bmi.w	80068a8 <HAL_ADC_IRQHandler+0x214>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	0650      	lsls	r0, r2, #25
 8006758:	d514      	bpl.n	8006784 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800675a:	0289      	lsls	r1, r1, #10
 800675c:	d412      	bmi.n	8006784 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	0712      	lsls	r2, r2, #28
 8006762:	f100 80cc 	bmi.w	80068fe <HAL_ADC_IRQHandler+0x26a>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800676c:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800676e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006774:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006776:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006778:	05d8      	lsls	r0, r3, #23
 800677a:	d403      	bmi.n	8006784 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800677c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800677e:	f043 0301 	orr.w	r3, r3, #1
 8006782:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006784:	4620      	mov	r0, r4
 8006786:	f001 f81b 	bl	80077c0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	2260      	movs	r2, #96	; 0x60
 800678e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006790:	0629      	lsls	r1, r5, #24
 8006792:	d501      	bpl.n	8006798 <HAL_ADC_IRQHandler+0x104>
 8006794:	0632      	lsls	r2, r6, #24
 8006796:	d460      	bmi.n	800685a <HAL_ADC_IRQHandler+0x1c6>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006798:	05e8      	lsls	r0, r5, #23
 800679a:	d501      	bpl.n	80067a0 <HAL_ADC_IRQHandler+0x10c>
 800679c:	05f1      	lsls	r1, r6, #23
 800679e:	d467      	bmi.n	8006870 <HAL_ADC_IRQHandler+0x1dc>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80067a0:	05aa      	lsls	r2, r5, #22
 80067a2:	d501      	bpl.n	80067a8 <HAL_ADC_IRQHandler+0x114>
 80067a4:	05b0      	lsls	r0, r6, #22
 80067a6:	d44c      	bmi.n	8006842 <HAL_ADC_IRQHandler+0x1ae>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80067a8:	06e9      	lsls	r1, r5, #27
 80067aa:	d501      	bpl.n	80067b0 <HAL_ADC_IRQHandler+0x11c>
 80067ac:	06f2      	lsls	r2, r6, #27
 80067ae:	d411      	bmi.n	80067d4 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80067b0:	0568      	lsls	r0, r5, #21
 80067b2:	d501      	bpl.n	80067b8 <HAL_ADC_IRQHandler+0x124>
 80067b4:	0571      	lsls	r1, r6, #21
 80067b6:	d467      	bmi.n	8006888 <HAL_ADC_IRQHandler+0x1f4>
}
 80067b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80067ba:	0728      	lsls	r0, r5, #28
 80067bc:	d5b3      	bpl.n	8006726 <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80067be:	0731      	lsls	r1, r6, #28
 80067c0:	d483      	bmi.n	80066ca <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80067c2:	06a8      	lsls	r0, r5, #26
 80067c4:	d4b1      	bmi.n	800672a <HAL_ADC_IRQHandler+0x96>
 80067c6:	066a      	lsls	r2, r5, #25
 80067c8:	d5e2      	bpl.n	8006790 <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80067ca:	0670      	lsls	r0, r6, #25
 80067cc:	d5e0      	bpl.n	8006790 <HAL_ADC_IRQHandler+0xfc>
 80067ce:	e7ae      	b.n	800672e <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067d0:	4a44      	ldr	r2, [pc, #272]	; (80068e4 <HAL_ADC_IRQHandler+0x250>)
 80067d2:	e76e      	b.n	80066b2 <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80067d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80067d6:	b17a      	cbz	r2, 80067f8 <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80067d8:	2f00      	cmp	r7, #0
 80067da:	d072      	beq.n	80068c2 <HAL_ADC_IRQHandler+0x22e>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80067dc:	4a3e      	ldr	r2, [pc, #248]	; (80068d8 <HAL_ADC_IRQHandler+0x244>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	f000 808b 	beq.w	80068fa <HAL_ADC_IRQHandler+0x266>
 80067e4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80067e8:	4293      	cmp	r3, r2
 80067ea:	f000 8086 	beq.w	80068fa <HAL_ADC_IRQHandler+0x266>
 80067ee:	4a3b      	ldr	r2, [pc, #236]	; (80068dc <HAL_ADC_IRQHandler+0x248>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80067f0:	6892      	ldr	r2, [r2, #8]
 80067f2:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 80067f6:	d00b      	beq.n	8006810 <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80067f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_ADC_ErrorCallback(hadc);
 80067fa:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80067fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006800:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006802:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006804:	f043 0302 	orr.w	r3, r3, #2
 8006808:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 800680a:	f7ff ff41 	bl	8006690 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	2210      	movs	r2, #16
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	e7cc      	b.n	80067b0 <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006816:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006818:	06d8      	lsls	r0, r3, #27
 800681a:	d403      	bmi.n	8006824 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800681c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800681e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006822:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006824:	4620      	mov	r0, r4
 8006826:	f000 ffd3 	bl	80077d0 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	2202      	movs	r2, #2
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	e747      	b.n	80066c2 <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006832:	1fb9      	subs	r1, r7, #6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006834:	2901      	cmp	r1, #1
 8006836:	d988      	bls.n	800674a <HAL_ADC_IRQHandler+0xb6>
 8006838:	2f00      	cmp	r7, #0
 800683a:	d086      	beq.n	800674a <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800683c:	4926      	ldr	r1, [pc, #152]	; (80068d8 <HAL_ADC_IRQHandler+0x244>)
 800683e:	68c9      	ldr	r1, [r1, #12]
 8006840:	e784      	b.n	800674c <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006842:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006844:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006846:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800684a:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800684c:	f000 ffbe 	bl	80077cc <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	e7a6      	b.n	80067a8 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800685a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800685c:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800685e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006862:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006864:	f7fd fcba 	bl	80041dc <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	2280      	movs	r2, #128	; 0x80
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	e793      	b.n	8006798 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006870:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006872:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006878:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800687a:	f000 ffa5 	bl	80077c8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	e78b      	b.n	80067a0 <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006888:	6d62      	ldr	r2, [r4, #84]	; 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800688a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800688e:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006890:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006894:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006896:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006898:	f042 0208 	orr.w	r2, r2, #8
 800689c:	65a2      	str	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800689e:	6019      	str	r1, [r3, #0]
}
 80068a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80068a4:	f000 bf8e 	b.w	80077c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80068a8:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80068ac:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80068b0:	4302      	orrs	r2, r0
 80068b2:	f47f af67 	bne.w	8006784 <HAL_ADC_IRQHandler+0xf0>
 80068b6:	e74d      	b.n	8006754 <HAL_ADC_IRQHandler+0xc0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068b8:	2f09      	cmp	r7, #9
 80068ba:	d906      	bls.n	80068ca <HAL_ADC_IRQHandler+0x236>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80068bc:	4a06      	ldr	r2, [pc, #24]	; (80068d8 <HAL_ADC_IRQHandler+0x244>)
 80068be:	68d2      	ldr	r2, [r2, #12]
 80068c0:	e713      	b.n	80066ea <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80068c2:	68da      	ldr	r2, [r3, #12]
 80068c4:	0797      	lsls	r7, r2, #30
 80068c6:	d0a3      	beq.n	8006810 <HAL_ADC_IRQHandler+0x17c>
 80068c8:	e796      	b.n	80067f8 <HAL_ADC_IRQHandler+0x164>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068ca:	f240 2221 	movw	r2, #545	; 0x221
 80068ce:	40fa      	lsrs	r2, r7
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80068d0:	07d2      	lsls	r2, r2, #31
 80068d2:	f53f af09 	bmi.w	80066e8 <HAL_ADC_IRQHandler+0x54>
 80068d6:	e7f1      	b.n	80068bc <HAL_ADC_IRQHandler+0x228>
 80068d8:	40022000 	.word	0x40022000
 80068dc:	58026300 	.word	0x58026300
 80068e0:	40022100 	.word	0x40022100
 80068e4:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80068ea:	f043 0310 	orr.w	r3, r3, #16
 80068ee:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068f2:	f043 0301 	orr.w	r3, r3, #1
 80068f6:	65a3      	str	r3, [r4, #88]	; 0x58
 80068f8:	e70f      	b.n	800671a <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80068fa:	4a05      	ldr	r2, [pc, #20]	; (8006910 <HAL_ADC_IRQHandler+0x27c>)
 80068fc:	e778      	b.n	80067f0 <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006900:	f043 0310 	orr.w	r3, r3, #16
 8006904:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006906:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006908:	f043 0301 	orr.w	r3, r3, #1
 800690c:	65a3      	str	r3, [r4, #88]	; 0x58
 800690e:	e739      	b.n	8006784 <HAL_ADC_IRQHandler+0xf0>
 8006910:	40022300 	.word	0x40022300

08006914 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006914:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006916:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006918:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800691c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 800691e:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006920:	d11d      	bne.n	800695e <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006922:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006928:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800692a:	680a      	ldr	r2, [r1, #0]
 800692c:	f012 0f08 	tst.w	r2, #8
 8006930:	68ca      	ldr	r2, [r1, #12]
 8006932:	d01b      	beq.n	800696c <ADC_DMAConvCplt+0x58>
 8006934:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8006938:	d10d      	bne.n	8006956 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800693a:	68ca      	ldr	r2, [r1, #12]
 800693c:	0494      	lsls	r4, r2, #18
 800693e:	d40a      	bmi.n	8006956 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006942:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006946:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006948:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800694a:	04d1      	lsls	r1, r2, #19
 800694c:	d403      	bmi.n	8006956 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800694e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006950:	f042 0201 	orr.w	r2, r2, #1
 8006954:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8006956:	4618      	mov	r0, r3
 8006958:	f7fd fbe0 	bl	800411c <HAL_ADC_ConvCpltCallback>
}
 800695c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800695e:	06d2      	lsls	r2, r2, #27
 8006960:	d40a      	bmi.n	8006978 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696a:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800696c:	0790      	lsls	r0, r2, #30
 800696e:	d0e7      	beq.n	8006940 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8006970:	4618      	mov	r0, r3
 8006972:	f7fd fbd3 	bl	800411c <HAL_ADC_ConvCpltCallback>
 8006976:	e7f1      	b.n	800695c <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff fe89 	bl	8006690 <HAL_ADC_ErrorCallback>
}
 800697e:	bd10      	pop	{r4, pc}

08006980 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006980:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006982:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006984:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800698a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800698c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800698e:	f043 0304 	orr.w	r3, r3, #4
 8006992:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006994:	f7ff fe7c 	bl	8006690 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006998:	bd08      	pop	{r3, pc}
 800699a:	bf00      	nop

0800699c <HAL_ADC_ConfigChannel>:
{
 800699c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 800699e:	2200      	movs	r2, #0
{
 80069a0:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80069a2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80069a4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80069a8:	2a01      	cmp	r2, #1
 80069aa:	f000 813b 	beq.w	8006c24 <HAL_ADC_ConfigChannel+0x288>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80069b2:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80069b4:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80069b8:	6894      	ldr	r4, [r2, #8]
 80069ba:	0764      	lsls	r4, r4, #29
 80069bc:	f100 8099 	bmi.w	8006af2 <HAL_ADC_ConfigChannel+0x156>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80069c0:	680c      	ldr	r4, [r1, #0]
 80069c2:	f3c4 0513 	ubfx	r5, r4, #0, #20
 80069c6:	2d00      	cmp	r5, #0
 80069c8:	f040 809e 	bne.w	8006b08 <HAL_ADC_ConfigChannel+0x16c>
 80069cc:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80069d0:	40a0      	lsls	r0, r4
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80069d2:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(*preg,
 80069d4:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80069d8:	69d6      	ldr	r6, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80069da:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 80069de:	4330      	orrs	r0, r6
 80069e0:	f00c 0c0c 	and.w	ip, ip, #12
 80069e4:	61d0      	str	r0, [r2, #28]
  MODIFY_REG(*preg,
 80069e6:	f005 001f 	and.w	r0, r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80069ea:	f102 0530 	add.w	r5, r2, #48	; 0x30
  MODIFY_REG(*preg,
 80069ee:	4084      	lsls	r4, r0
 80069f0:	fa0e fe00 	lsl.w	lr, lr, r0
 80069f4:	f85c 0005 	ldr.w	r0, [ip, r5]
 80069f8:	ea20 000e 	bic.w	r0, r0, lr
 80069fc:	4304      	orrs	r4, r0
 80069fe:	f84c 4005 	str.w	r4, [ip, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a02:	6890      	ldr	r0, [r2, #8]
 8006a04:	0740      	lsls	r0, r0, #29
 8006a06:	d47d      	bmi.n	8006b04 <HAL_ADC_ConfigChannel+0x168>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006a08:	6895      	ldr	r5, [r2, #8]
 8006a0a:	f015 0508 	ands.w	r5, r5, #8
 8006a0e:	d156      	bne.n	8006abe <HAL_ADC_ConfigChannel+0x122>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006a10:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(*preg,
 8006a12:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006a14:	f102 0614 	add.w	r6, r2, #20
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006a18:	4fb7      	ldr	r7, [pc, #732]	; (8006cf8 <HAL_ADC_ConfigChannel+0x35c>)
 8006a1a:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8006a1e:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006a22:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8006a26:	fa00 fe04 	lsl.w	lr, r0, r4
 8006a2a:	6888      	ldr	r0, [r1, #8]
 8006a2c:	fa00 f404 	lsl.w	r4, r0, r4
 8006a30:	f85c 0006 	ldr.w	r0, [ip, r6]
 8006a34:	ea20 000e 	bic.w	r0, r0, lr
 8006a38:	4320      	orrs	r0, r4
 8006a3a:	f84c 0006 	str.w	r0, [ip, r6]
 8006a3e:	6838      	ldr	r0, [r7, #0]
 8006a40:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8006a44:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8006a48:	f000 8095 	beq.w	8006b76 <HAL_ADC_ConfigChannel+0x1da>
 8006a4c:	68d0      	ldr	r0, [r2, #12]
 8006a4e:	68d6      	ldr	r6, [r2, #12]
 8006a50:	06c7      	lsls	r7, r0, #27
 8006a52:	f100 8107 	bmi.w	8006c64 <HAL_ADC_ConfigChannel+0x2c8>
 8006a56:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8006a5a:	6948      	ldr	r0, [r1, #20]
 8006a5c:	0076      	lsls	r6, r6, #1
 8006a5e:	fa00 f606 	lsl.w	r6, r0, r6
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006a62:	690f      	ldr	r7, [r1, #16]
 8006a64:	2f04      	cmp	r7, #4
 8006a66:	f000 80e0 	beq.w	8006c2a <HAL_ADC_ConfigChannel+0x28e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a6a:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 8006a6e:	6808      	ldr	r0, [r1, #0]
 8006a70:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8006a74:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006a78:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8006a7c:	ea40 000c 	orr.w	r0, r0, ip
 8006a80:	4330      	orrs	r0, r6
 8006a82:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006a86:	7e48      	ldrb	r0, [r1, #25]
 8006a88:	690e      	ldr	r6, [r1, #16]
 8006a8a:	2801      	cmp	r0, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006a8c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8006a90:	bf0c      	ite	eq
 8006a92:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 8006a96:	2700      	movne	r7, #0
 8006a98:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006a9c:	4338      	orrs	r0, r7
 8006a9e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8006aa2:	7e0c      	ldrb	r4, [r1, #24]
 8006aa4:	6908      	ldr	r0, [r1, #16]
 8006aa6:	2c01      	cmp	r4, #1
 8006aa8:	d104      	bne.n	8006ab4 <HAL_ADC_ConfigChannel+0x118>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006aaa:	f000 001f 	and.w	r0, r0, #31
 8006aae:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8006ab2:	4085      	lsls	r5, r0
 8006ab4:	6910      	ldr	r0, [r2, #16]
 8006ab6:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8006aba:	4305      	orrs	r5, r0
 8006abc:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006abe:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ac0:	07c4      	lsls	r4, r0, #31
 8006ac2:	d414      	bmi.n	8006aee <HAL_ADC_ConfigChannel+0x152>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006ac4:	68ce      	ldr	r6, [r1, #12]
 8006ac6:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8006ac8:	f006 0718 	and.w	r7, r6, #24
 8006acc:	488b      	ldr	r0, [pc, #556]	; (8006cfc <HAL_ADC_ConfigChannel+0x360>)
 8006ace:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 8006ad2:	40f8      	lsrs	r0, r7
 8006ad4:	f3c4 0713 	ubfx	r7, r4, #0, #20
 8006ad8:	4020      	ands	r0, r4
 8006ada:	ea25 0507 	bic.w	r5, r5, r7
 8006ade:	4328      	orrs	r0, r5
 8006ae0:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006ae4:	4886      	ldr	r0, [pc, #536]	; (8006d00 <HAL_ADC_ConfigChannel+0x364>)
 8006ae6:	4286      	cmp	r6, r0
 8006ae8:	d04d      	beq.n	8006b86 <HAL_ADC_ConfigChannel+0x1ea>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006aea:	2c00      	cmp	r4, #0
 8006aec:	db15      	blt.n	8006b1a <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006aee:	2000      	movs	r0, #0
 8006af0:	e003      	b.n	8006afa <HAL_ADC_ConfigChannel+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006af2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006af4:	f042 0220 	orr.w	r2, r2, #32
 8006af8:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8006b00:	b003      	add	sp, #12
 8006b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006b04:	6890      	ldr	r0, [r2, #8]
 8006b06:	e7da      	b.n	8006abe <HAL_ADC_ConfigChannel+0x122>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b08:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006b0c:	b115      	cbz	r5, 8006b14 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8006b0e:	fab5 f585 	clz	r5, r5
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006b12:	40a8      	lsls	r0, r5
 8006b14:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8006b18:	e75b      	b.n	80069d2 <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b1a:	497a      	ldr	r1, [pc, #488]	; (8006d04 <HAL_ADC_ConfigChannel+0x368>)
 8006b1c:	428a      	cmp	r2, r1
 8006b1e:	f000 80c7 	beq.w	8006cb0 <HAL_ADC_ConfigChannel+0x314>
 8006b22:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8006b26:	428a      	cmp	r2, r1
 8006b28:	f000 80c2 	beq.w	8006cb0 <HAL_ADC_ConfigChannel+0x314>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006b2c:	4d76      	ldr	r5, [pc, #472]	; (8006d08 <HAL_ADC_ConfigChannel+0x36c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b2e:	4877      	ldr	r0, [pc, #476]	; (8006d0c <HAL_ADC_ConfigChannel+0x370>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006b30:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b32:	6880      	ldr	r0, [r0, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006b34:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b38:	43c0      	mvns	r0, r0
 8006b3a:	f000 0001 	and.w	r0, r0, #1
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	f000 80c5 	beq.w	8006cce <HAL_ADC_ConfigChannel+0x332>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006b44:	4872      	ldr	r0, [pc, #456]	; (8006d10 <HAL_ADC_ConfigChannel+0x374>)
 8006b46:	4284      	cmp	r4, r0
 8006b48:	f000 810e 	beq.w	8006d68 <HAL_ADC_ConfigChannel+0x3cc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006b4c:	4871      	ldr	r0, [pc, #452]	; (8006d14 <HAL_ADC_ConfigChannel+0x378>)
 8006b4e:	4284      	cmp	r4, r0
 8006b50:	f000 812d 	beq.w	8006dae <HAL_ADC_ConfigChannel+0x412>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006b54:	4870      	ldr	r0, [pc, #448]	; (8006d18 <HAL_ADC_ConfigChannel+0x37c>)
 8006b56:	4284      	cmp	r4, r0
 8006b58:	d1c9      	bne.n	8006aee <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 8006b5a:	0249      	lsls	r1, r1, #9
 8006b5c:	d4c7      	bmi.n	8006aee <HAL_ADC_ConfigChannel+0x152>
 8006b5e:	496b      	ldr	r1, [pc, #428]	; (8006d0c <HAL_ADC_ConfigChannel+0x370>)
 8006b60:	428a      	cmp	r2, r1
 8006b62:	d1c4      	bne.n	8006aee <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006b64:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b66:	2000      	movs	r0, #0
 8006b68:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8006b6c:	4332      	orrs	r2, r6
 8006b6e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006b72:	60aa      	str	r2, [r5, #8]
}
 8006b74:	e7c1      	b.n	8006afa <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006b76:	68d6      	ldr	r6, [r2, #12]
 8006b78:	6948      	ldr	r0, [r1, #20]
 8006b7a:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8006b7e:	0076      	lsls	r6, r6, #1
 8006b80:	fa00 f606 	lsl.w	r6, r0, r6
 8006b84:	e76d      	b.n	8006a62 <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006b86:	2f00      	cmp	r7, #0
 8006b88:	d073      	beq.n	8006c72 <HAL_ADC_ConfigChannel+0x2d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b8a:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	f000 80c6 	beq.w	8006d20 <HAL_ADC_ConfigChannel+0x384>
  return __builtin_clz(value);
 8006b94:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b98:	3001      	adds	r0, #1
 8006b9a:	f000 001f 	and.w	r0, r0, #31
 8006b9e:	2809      	cmp	r0, #9
 8006ba0:	f240 80be 	bls.w	8006d20 <HAL_ADC_ConfigChannel+0x384>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba4:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	f000 8114 	beq.w	8006dd6 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8006bae:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	0680      	lsls	r0, r0, #26
 8006bb6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bba:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8006bbe:	2d00      	cmp	r5, #0
 8006bc0:	f000 8107 	beq.w	8006dd2 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8006bc4:	fab5 f585 	clz	r5, r5
 8006bc8:	2601      	movs	r6, #1
 8006bca:	3501      	adds	r5, #1
 8006bcc:	f005 051f 	and.w	r5, r5, #31
 8006bd0:	fa06 f505 	lsl.w	r5, r6, r5
 8006bd4:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bd6:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8006bda:	2c00      	cmp	r4, #0
 8006bdc:	f000 80f7 	beq.w	8006dce <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 8006be0:	fab4 f484 	clz	r4, r4
 8006be4:	f06f 061d 	mvn.w	r6, #29
 8006be8:	1c60      	adds	r0, r4, #1
 8006bea:	f000 041f 	and.w	r4, r0, #31
 8006bee:	2003      	movs	r0, #3
 8006bf0:	fb10 6004 	smlabb	r0, r0, r4, r6
 8006bf4:	0500      	lsls	r0, r0, #20
 8006bf6:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006bfa:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 8006bfc:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006bfe:	f102 0514 	add.w	r5, r2, #20
 8006c02:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
 8006c04:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006c08:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8006c0c:	fa04 f700 	lsl.w	r7, r4, r0
 8006c10:	5974      	ldr	r4, [r6, r5]
 8006c12:	ea24 0407 	bic.w	r4, r4, r7
 8006c16:	688f      	ldr	r7, [r1, #8]
 8006c18:	fa07 f000 	lsl.w	r0, r7, r0
 8006c1c:	4320      	orrs	r0, r4
 8006c1e:	5170      	str	r0, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006c20:	680c      	ldr	r4, [r1, #0]
}
 8006c22:	e762      	b.n	8006aea <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8006c24:	2002      	movs	r0, #2
}
 8006c26:	b003      	add	sp, #12
 8006c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006c2a:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8006c2c:	680c      	ldr	r4, [r1, #0]
 8006c2e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006c32:	06a5      	lsls	r5, r4, #26
 8006c34:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8006c38:	d030      	beq.n	8006c9c <HAL_ADC_ConfigChannel+0x300>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006c3a:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8006c3c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006c40:	4285      	cmp	r5, r0
 8006c42:	d026      	beq.n	8006c92 <HAL_ADC_ConfigChannel+0x2f6>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006c44:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8006c46:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006c4a:	4285      	cmp	r5, r0
 8006c4c:	d02b      	beq.n	8006ca6 <HAL_ADC_ConfigChannel+0x30a>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006c4e:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8006c50:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006c54:	4285      	cmp	r5, r0
 8006c56:	f47f af32 	bne.w	8006abe <HAL_ADC_ConfigChannel+0x122>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006c5a:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8006c5c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006c60:	66d0      	str	r0, [r2, #108]	; 0x6c
 8006c62:	e72c      	b.n	8006abe <HAL_ADC_ConfigChannel+0x122>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006c64:	0876      	lsrs	r6, r6, #1
 8006c66:	6948      	ldr	r0, [r1, #20]
 8006c68:	f006 0608 	and.w	r6, r6, #8
 8006c6c:	fa00 f606 	lsl.w	r6, r0, r6
 8006c70:	e6f7      	b.n	8006a62 <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006c72:	0ea4      	lsrs	r4, r4, #26
 8006c74:	3401      	adds	r4, #1
 8006c76:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c7a:	2e09      	cmp	r6, #9
 8006c7c:	d82d      	bhi.n	8006cda <HAL_ADC_ConfigChannel+0x33e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006c7e:	06a5      	lsls	r5, r4, #26
 8006c80:	2001      	movs	r0, #1
 8006c82:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8006c86:	40b0      	lsls	r0, r6
 8006c88:	4305      	orrs	r5, r0
 8006c8a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8006c8e:	0500      	lsls	r0, r0, #20
 8006c90:	e7b3      	b.n	8006bfa <HAL_ADC_ConfigChannel+0x25e>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006c92:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8006c94:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006c98:	6650      	str	r0, [r2, #100]	; 0x64
 8006c9a:	e7d3      	b.n	8006c44 <HAL_ADC_ConfigChannel+0x2a8>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006c9c:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8006c9e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006ca2:	6610      	str	r0, [r2, #96]	; 0x60
 8006ca4:	e7c9      	b.n	8006c3a <HAL_ADC_ConfigChannel+0x29e>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006ca6:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8006ca8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006cac:	6690      	str	r0, [r2, #104]	; 0x68
 8006cae:	e7ce      	b.n	8006c4e <HAL_ADC_ConfigChannel+0x2b2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006cb0:	4814      	ldr	r0, [pc, #80]	; (8006d04 <HAL_ADC_ConfigChannel+0x368>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006cb2:	4d1a      	ldr	r5, [pc, #104]	; (8006d1c <HAL_ADC_ConfigChannel+0x380>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006cb4:	f500 7080 	add.w	r0, r0, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006cb8:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006cba:	f850 6cf8 	ldr.w	r6, [r0, #-248]
 8006cbe:	6880      	ldr	r0, [r0, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006cc0:	4330      	orrs	r0, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006cc2:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
 8006cc6:	43c0      	mvns	r0, r0
 8006cc8:	f000 0001 	and.w	r0, r0, #1
 8006ccc:	e737      	b.n	8006b3e <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8006cd0:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cd2:	f042 0220 	orr.w	r2, r2, #32
 8006cd6:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8006cd8:	e70f      	b.n	8006afa <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006cda:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8006cde:	06a5      	lsls	r5, r4, #26
 8006ce0:	2401      	movs	r4, #1
 8006ce2:	381e      	subs	r0, #30
 8006ce4:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8006ce8:	fa04 f606 	lsl.w	r6, r4, r6
 8006cec:	0500      	lsls	r0, r0, #20
 8006cee:	4335      	orrs	r5, r6
 8006cf0:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8006cf4:	e781      	b.n	8006bfa <HAL_ADC_ConfigChannel+0x25e>
 8006cf6:	bf00      	nop
 8006cf8:	5c001000 	.word	0x5c001000
 8006cfc:	000fffff 	.word	0x000fffff
 8006d00:	47ff0000 	.word	0x47ff0000
 8006d04:	40022000 	.word	0x40022000
 8006d08:	58026300 	.word	0x58026300
 8006d0c:	58026000 	.word	0x58026000
 8006d10:	cb840000 	.word	0xcb840000
 8006d14:	c7520000 	.word	0xc7520000
 8006d18:	cfb80000 	.word	0xcfb80000
 8006d1c:	40022300 	.word	0x40022300
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d20:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d05e      	beq.n	8006de6 <HAL_ADC_ConfigChannel+0x44a>
  return __builtin_clz(value);
 8006d28:	fab0 f080 	clz	r0, r0
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	0680      	lsls	r0, r0, #26
 8006d30:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d34:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8006d38:	2d00      	cmp	r5, #0
 8006d3a:	d052      	beq.n	8006de2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8006d3c:	fab5 f585 	clz	r5, r5
 8006d40:	2601      	movs	r6, #1
 8006d42:	3501      	adds	r5, #1
 8006d44:	f005 051f 	and.w	r5, r5, #31
 8006d48:	fa06 f505 	lsl.w	r5, r6, r5
 8006d4c:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d4e:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8006d52:	2c00      	cmp	r4, #0
 8006d54:	d042      	beq.n	8006ddc <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8006d56:	fab4 f484 	clz	r4, r4
 8006d5a:	3401      	adds	r4, #1
 8006d5c:	f004 041f 	and.w	r4, r4, #31
 8006d60:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006d64:	0520      	lsls	r0, r4, #20
 8006d66:	e748      	b.n	8006bfa <HAL_ADC_ConfigChannel+0x25e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006d68:	0208      	lsls	r0, r1, #8
 8006d6a:	f53f aec0 	bmi.w	8006aee <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d6e:	491f      	ldr	r1, [pc, #124]	; (8006dec <HAL_ADC_ConfigChannel+0x450>)
 8006d70:	428a      	cmp	r2, r1
 8006d72:	f47f aebc 	bne.w	8006aee <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d76:	4a1e      	ldr	r2, [pc, #120]	; (8006df0 <HAL_ADC_ConfigChannel+0x454>)
 8006d78:	481e      	ldr	r0, [pc, #120]	; (8006df4 <HAL_ADC_ConfigChannel+0x458>)
 8006d7a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006d7c:	68a9      	ldr	r1, [r5, #8]
 8006d7e:	0992      	lsrs	r2, r2, #6
 8006d80:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8006d84:	fba0 0202 	umull	r0, r2, r0, r2
 8006d88:	4331      	orrs	r1, r6
 8006d8a:	0992      	lsrs	r2, r2, #6
 8006d8c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006d90:	3201      	adds	r2, #1
 8006d92:	60a9      	str	r1, [r5, #8]
 8006d94:	0052      	lsls	r2, r2, #1
 8006d96:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8006d98:	9a01      	ldr	r2, [sp, #4]
 8006d9a:	2a00      	cmp	r2, #0
 8006d9c:	f43f aea7 	beq.w	8006aee <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 8006da0:	9a01      	ldr	r2, [sp, #4]
 8006da2:	3a01      	subs	r2, #1
 8006da4:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8006da6:	9a01      	ldr	r2, [sp, #4]
 8006da8:	2a00      	cmp	r2, #0
 8006daa:	d1f9      	bne.n	8006da0 <HAL_ADC_ConfigChannel+0x404>
 8006dac:	e69f      	b.n	8006aee <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006dae:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 8006db2:	f47f ae9c 	bne.w	8006aee <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006db6:	490d      	ldr	r1, [pc, #52]	; (8006dec <HAL_ADC_ConfigChannel+0x450>)
 8006db8:	428a      	cmp	r2, r1
 8006dba:	f47f ae98 	bne.w	8006aee <HAL_ADC_ConfigChannel+0x152>
 8006dbe:	68aa      	ldr	r2, [r5, #8]
 8006dc0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8006dc4:	4332      	orrs	r2, r6
 8006dc6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006dca:	60aa      	str	r2, [r5, #8]
}
 8006dcc:	e695      	b.n	8006afa <HAL_ADC_ConfigChannel+0x15e>
 8006dce:	480a      	ldr	r0, [pc, #40]	; (8006df8 <HAL_ADC_ConfigChannel+0x45c>)
 8006dd0:	e713      	b.n	8006bfa <HAL_ADC_ConfigChannel+0x25e>
 8006dd2:	2502      	movs	r5, #2
 8006dd4:	e6fe      	b.n	8006bd4 <HAL_ADC_ConfigChannel+0x238>
 8006dd6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8006dda:	e6ee      	b.n	8006bba <HAL_ADC_ConfigChannel+0x21e>
 8006ddc:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8006de0:	e70b      	b.n	8006bfa <HAL_ADC_ConfigChannel+0x25e>
 8006de2:	2502      	movs	r5, #2
 8006de4:	e7b2      	b.n	8006d4c <HAL_ADC_ConfigChannel+0x3b0>
 8006de6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8006dea:	e7a3      	b.n	8006d34 <HAL_ADC_ConfigChannel+0x398>
 8006dec:	58026000 	.word	0x58026000
 8006df0:	240003cc 	.word	0x240003cc
 8006df4:	053e2d63 	.word	0x053e2d63
 8006df8:	fe500000 	.word	0xfe500000

08006dfc <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8006dfc:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8006e00:	4603      	mov	r3, r0
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006e02:	6848      	ldr	r0, [r1, #4]
  __HAL_LOCK(hadc);
 8006e04:	2a01      	cmp	r2, #1
 8006e06:	f000 80f3 	beq.w	8006ff0 <HAL_ADC_AnalogWDGConfig+0x1f4>
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e0a:	681a      	ldr	r2, [r3, #0]
{
 8006e0c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 8006e0e:	2401      	movs	r4, #1
 8006e10:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e14:	6894      	ldr	r4, [r2, #8]
 8006e16:	0765      	lsls	r5, r4, #29
 8006e18:	d428      	bmi.n	8006e6c <HAL_ADC_AnalogWDGConfig+0x70>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006e1a:	6894      	ldr	r4, [r2, #8]
 8006e1c:	0724      	lsls	r4, r4, #28
 8006e1e:	d426      	bmi.n	8006e6e <HAL_ADC_AnalogWDGConfig+0x72>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006e20:	680c      	ldr	r4, [r1, #0]
 8006e22:	4db8      	ldr	r5, [pc, #736]	; (8007104 <HAL_ADC_AnalogWDGConfig+0x308>)
 8006e24:	42ac      	cmp	r4, r5
 8006e26:	f000 80a0 	beq.w	8006f6a <HAL_ADC_AnalogWDGConfig+0x16e>
      switch (AnalogWDGConfig->WatchdogMode)
 8006e2a:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8006e2e:	d02e      	beq.n	8006e8e <HAL_ADC_AnalogWDGConfig+0x92>
 8006e30:	d827      	bhi.n	8006e82 <HAL_ADC_AnalogWDGConfig+0x86>
 8006e32:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8006e36:	d02a      	beq.n	8006e8e <HAL_ADC_AnalogWDGConfig+0x92>
 8006e38:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006e3c:	d027      	beq.n	8006e8e <HAL_ADC_AnalogWDGConfig+0x92>
 8006e3e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006e42:	d024      	beq.n	8006e8e <HAL_ADC_AnalogWDGConfig+0x92>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8006e44:	f004 0001 	and.w	r0, r4, #1
 8006e48:	f3c4 5501 	ubfx	r5, r4, #20, #2
  MODIFY_REG(*preg,
 8006e4c:	4eae      	ldr	r6, [pc, #696]	; (8007108 <HAL_ADC_AnalogWDGConfig+0x30c>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8006e4e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  MODIFY_REG(*preg,
 8006e52:	4026      	ands	r6, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8006e54:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8006e58:	f102 000c 	add.w	r0, r2, #12
  MODIFY_REG(*preg,
 8006e5c:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 8006e60:	ea24 0406 	bic.w	r4, r4, r6
 8006e64:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006e68:	680c      	ldr	r4, [r1, #0]
}
 8006e6a:	e023      	b.n	8006eb4 <HAL_ADC_AnalogWDGConfig+0xb8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006e6c:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006e70:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e72:	f042 0220 	orr.w	r2, r2, #32
 8006e76:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8006e7e:	bc70      	pop	{r4, r5, r6}
 8006e80:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 8006e82:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8006e86:	d002      	beq.n	8006e8e <HAL_ADC_AnalogWDGConfig+0x92>
 8006e88:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8006e8c:	d1da      	bne.n	8006e44 <HAL_ADC_AnalogWDGConfig+0x48>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006e8e:	489f      	ldr	r0, [pc, #636]	; (800710c <HAL_ADC_AnalogWDGConfig+0x310>)
 8006e90:	4284      	cmp	r4, r0
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006e92:	6888      	ldr	r0, [r1, #8]
 8006e94:	f3c0 0513 	ubfx	r5, r0, #0, #20
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006e98:	f000 80cb 	beq.w	8007032 <HAL_ADC_AnalogWDGConfig+0x236>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006e9c:	2d00      	cmp	r5, #0
 8006e9e:	f040 80df 	bne.w	8007060 <HAL_ADC_AnalogWDGConfig+0x264>
 8006ea2:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8006ea6:	2501      	movs	r5, #1
 8006ea8:	4085      	lsls	r5, r0
 8006eaa:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
 8006eae:	4328      	orrs	r0, r5
 8006eb0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006eb4:	4896      	ldr	r0, [pc, #600]	; (8007110 <HAL_ADC_AnalogWDGConfig+0x314>)
 8006eb6:	6800      	ldr	r0, [r0, #0]
 8006eb8:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8006ebc:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8006ec0:	68d0      	ldr	r0, [r2, #12]
 8006ec2:	d04b      	beq.n	8006f5c <HAL_ADC_AnalogWDGConfig+0x160>
 8006ec4:	f010 0f10 	tst.w	r0, #16
 8006ec8:	68d0      	ldr	r0, [r2, #12]
 8006eca:	d047      	beq.n	8006f5c <HAL_ADC_AnalogWDGConfig+0x160>
 8006ecc:	0840      	lsrs	r0, r0, #1
 8006ece:	690d      	ldr	r5, [r1, #16]
 8006ed0:	f000 0008 	and.w	r0, r0, #8
 8006ed4:	fa05 f000 	lsl.w	r0, r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006ed8:	4d8d      	ldr	r5, [pc, #564]	; (8007110 <HAL_ADC_AnalogWDGConfig+0x314>)
 8006eda:	682d      	ldr	r5, [r5, #0]
 8006edc:	f005 4c70 	and.w	ip, r5, #4026531840	; 0xf0000000
 8006ee0:	68d5      	ldr	r5, [r2, #12]
 8006ee2:	f1bc 5f80 	cmp.w	ip, #268435456	; 0x10000000
 8006ee6:	d031      	beq.n	8006f4c <HAL_ADC_AnalogWDGConfig+0x150>
 8006ee8:	f015 0f10 	tst.w	r5, #16
 8006eec:	68d5      	ldr	r5, [r2, #12]
 8006eee:	d02d      	beq.n	8006f4c <HAL_ADC_AnalogWDGConfig+0x150>
 8006ef0:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 8006ef4:	694d      	ldr	r5, [r1, #20]
 8006ef6:	f00c 0c08 	and.w	ip, ip, #8
 8006efa:	fa05 fc0c 	lsl.w	ip, r5, ip
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006efe:	4d83      	ldr	r5, [pc, #524]	; (800710c <HAL_ADC_AnalogWDGConfig+0x310>)
 8006f00:	42ac      	cmp	r4, r5
 8006f02:	d077      	beq.n	8006ff4 <HAL_ADC_AnalogWDGConfig+0x1f8>
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006f04:	f8d2 40b8 	ldr.w	r4, [r2, #184]	; 0xb8
 8006f08:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8006f0c:	ea44 040c 	orr.w	r4, r4, ip
 8006f10:	f8c2 40b8 	str.w	r4, [r2, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006f14:	f8d2 40bc 	ldr.w	r4, [r2, #188]	; 0xbc
 8006f18:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8006f1c:	4320      	orrs	r0, r4
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8006f1e:	f44f 7400 	mov.w	r4, #512	; 0x200
 8006f22:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006f26:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006f28:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8006f2c:	6558      	str	r0, [r3, #84]	; 0x54
 8006f2e:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006f30:	7b09      	ldrb	r1, [r1, #12]
 8006f32:	2901      	cmp	r1, #1
 8006f34:	f000 808e 	beq.w	8007054 <HAL_ADC_AnalogWDGConfig+0x258>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8006f38:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8006f40:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8006f48:	bc70      	pop	{r4, r5, r6}
 8006f4a:	4770      	bx	lr
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006f4c:	f3c5 0c82 	ubfx	ip, r5, #2, #3
 8006f50:	694d      	ldr	r5, [r1, #20]
 8006f52:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006f56:	fa05 fc0c 	lsl.w	ip, r5, ip
 8006f5a:	e7d0      	b.n	8006efe <HAL_ADC_AnalogWDGConfig+0x102>
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006f5c:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8006f60:	690d      	ldr	r5, [r1, #16]
 8006f62:	0040      	lsls	r0, r0, #1
 8006f64:	fa05 f000 	lsl.w	r0, r5, r0
 8006f68:	e7b6      	b.n	8006ed8 <HAL_ADC_AnalogWDGConfig+0xdc>
      switch (AnalogWDGConfig->WatchdogMode)
 8006f6a:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8006f6e:	f000 80f0 	beq.w	8007152 <HAL_ADC_AnalogWDGConfig+0x356>
 8006f72:	d82a      	bhi.n	8006fca <HAL_ADC_AnalogWDGConfig+0x1ce>
 8006f74:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8006f78:	f000 80e0 	beq.w	800713c <HAL_ADC_AnalogWDGConfig+0x340>
 8006f7c:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006f80:	d118      	bne.n	8006fb4 <HAL_ADC_AnalogWDGConfig+0x1b8>
  MODIFY_REG(*preg,
 8006f82:	68d4      	ldr	r4, [r2, #12]
 8006f84:	4863      	ldr	r0, [pc, #396]	; (8007114 <HAL_ADC_AnalogWDGConfig+0x318>)
 8006f86:	4020      	ands	r0, r4
 8006f88:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8006f8c:	60d0      	str	r0, [r2, #12]
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006f8e:	4860      	ldr	r0, [pc, #384]	; (8007110 <HAL_ADC_AnalogWDGConfig+0x314>)
 8006f90:	6800      	ldr	r0, [r0, #0]
 8006f92:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8006f96:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8006f9a:	68d0      	ldr	r0, [r2, #12]
 8006f9c:	d069      	beq.n	8007072 <HAL_ADC_AnalogWDGConfig+0x276>
 8006f9e:	f010 0f10 	tst.w	r0, #16
 8006fa2:	690d      	ldr	r5, [r1, #16]
 8006fa4:	68d0      	ldr	r0, [r2, #12]
 8006fa6:	f040 8099 	bne.w	80070dc <HAL_ADC_AnalogWDGConfig+0x2e0>
 8006faa:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8006fae:	0040      	lsls	r0, r0, #1
 8006fb0:	4085      	lsls	r5, r0
 8006fb2:	e063      	b.n	800707c <HAL_ADC_AnalogWDGConfig+0x280>
      switch (AnalogWDGConfig->WatchdogMode)
 8006fb4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006fb8:	f040 80b4 	bne.w	8007124 <HAL_ADC_AnalogWDGConfig+0x328>
 8006fbc:	68d4      	ldr	r4, [r2, #12]
 8006fbe:	4855      	ldr	r0, [pc, #340]	; (8007114 <HAL_ADC_AnalogWDGConfig+0x318>)
 8006fc0:	4020      	ands	r0, r4
 8006fc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006fc6:	60d0      	str	r0, [r2, #12]
}
 8006fc8:	e7e1      	b.n	8006f8e <HAL_ADC_AnalogWDGConfig+0x192>
 8006fca:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8006fce:	f000 80ae 	beq.w	800712e <HAL_ADC_AnalogWDGConfig+0x332>
 8006fd2:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8006fd6:	f040 80a5 	bne.w	8007124 <HAL_ADC_AnalogWDGConfig+0x328>
  MODIFY_REG(*preg,
 8006fda:	68d5      	ldr	r5, [r2, #12]
 8006fdc:	6888      	ldr	r0, [r1, #8]
 8006fde:	4c4d      	ldr	r4, [pc, #308]	; (8007114 <HAL_ADC_AnalogWDGConfig+0x318>)
 8006fe0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006fe4:	402c      	ands	r4, r5
 8006fe6:	4320      	orrs	r0, r4
 8006fe8:	f040 70e0 	orr.w	r0, r0, #29360128	; 0x1c00000
 8006fec:	60d0      	str	r0, [r2, #12]
}
 8006fee:	e7ce      	b.n	8006f8e <HAL_ADC_AnalogWDGConfig+0x192>
  __HAL_LOCK(hadc);
 8006ff0:	2002      	movs	r0, #2
}
 8006ff2:	4770      	bx	lr
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006ff4:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8006ff8:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8006ffc:	ea44 040c 	orr.w	r4, r4, ip
 8007000:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8007004:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
 8007008:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 800700c:	4320      	orrs	r0, r4
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800700e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8007012:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007016:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007018:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 800701c:	6558      	str	r0, [r3, #84]	; 0x54
 800701e:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8007020:	7b09      	ldrb	r1, [r1, #12]
 8007022:	2901      	cmp	r1, #1
 8007024:	d078      	beq.n	8007118 <HAL_ADC_AnalogWDGConfig+0x31c>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8007026:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007028:	2000      	movs	r0, #0
 800702a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800702e:	6051      	str	r1, [r2, #4]
}
 8007030:	e722      	b.n	8006e78 <HAL_ADC_AnalogWDGConfig+0x7c>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8007032:	2d00      	cmp	r5, #0
 8007034:	d05e      	beq.n	80070f4 <HAL_ADC_AnalogWDGConfig+0x2f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007036:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800703a:	2800      	cmp	r0, #0
 800703c:	f000 8094 	beq.w	8007168 <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 8007040:	fab0 f080 	clz	r0, r0
 8007044:	2501      	movs	r5, #1
 8007046:	4085      	lsls	r5, r0
 8007048:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
 800704c:	4328      	orrs	r0, r5
 800704e:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
 8007052:	e72f      	b.n	8006eb4 <HAL_ADC_AnalogWDGConfig+0xb8>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8007054:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007056:	2000      	movs	r0, #0
 8007058:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800705c:	6051      	str	r1, [r2, #4]
}
 800705e:	e70b      	b.n	8006e78 <HAL_ADC_AnalogWDGConfig+0x7c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007060:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8007064:	2800      	cmp	r0, #0
 8007066:	d04a      	beq.n	80070fe <HAL_ADC_AnalogWDGConfig+0x302>
  return __builtin_clz(value);
 8007068:	fab0 f080 	clz	r0, r0
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800706c:	2501      	movs	r5, #1
 800706e:	4085      	lsls	r5, r0
 8007070:	e71b      	b.n	8006eaa <HAL_ADC_AnalogWDGConfig+0xae>
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8007072:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8007076:	690d      	ldr	r5, [r1, #16]
 8007078:	0040      	lsls	r0, r0, #1
 800707a:	4085      	lsls	r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800707c:	4824      	ldr	r0, [pc, #144]	; (8007110 <HAL_ADC_AnalogWDGConfig+0x314>)
 800707e:	6800      	ldr	r0, [r0, #0]
 8007080:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8007084:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8007088:	68d0      	ldr	r0, [r2, #12]
 800708a:	d003      	beq.n	8007094 <HAL_ADC_AnalogWDGConfig+0x298>
 800708c:	f010 0f10 	tst.w	r0, #16
 8007090:	68d0      	ldr	r0, [r2, #12]
 8007092:	d128      	bne.n	80070e6 <HAL_ADC_AnalogWDGConfig+0x2ea>
 8007094:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8007098:	694c      	ldr	r4, [r1, #20]
 800709a:	0040      	lsls	r0, r0, #1
 800709c:	fa04 f000 	lsl.w	r0, r4, r0
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80070a0:	6a14      	ldr	r4, [r2, #32]
 80070a2:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 80070a6:	4304      	orrs	r4, r0
 80070a8:	6214      	str	r4, [r2, #32]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80070aa:	2480      	movs	r4, #128	; 0x80
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80070ac:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80070ae:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 80070b2:	4328      	orrs	r0, r5
 80070b4:	6250      	str	r0, [r2, #36]	; 0x24
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80070b6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80070b8:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80070bc:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070be:	2000      	movs	r0, #0
 80070c0:	6014      	str	r4, [r2, #0]
      if (AnalogWDGConfig->ITMode == ENABLE)
 80070c2:	7b09      	ldrb	r1, [r1, #12]
 80070c4:	2901      	cmp	r1, #1
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80070c6:	6851      	ldr	r1, [r2, #4]
 80070c8:	bf0c      	ite	eq
 80070ca:	4321      	orreq	r1, r4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80070cc:	f021 0180 	bicne.w	r1, r1, #128	; 0x80
 80070d0:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80070d8:	bc70      	pop	{r4, r5, r6}
 80070da:	4770      	bx	lr
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80070dc:	0840      	lsrs	r0, r0, #1
 80070de:	f000 0008 	and.w	r0, r0, #8
 80070e2:	4085      	lsls	r5, r0
 80070e4:	e7ca      	b.n	800707c <HAL_ADC_AnalogWDGConfig+0x280>
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80070e6:	0840      	lsrs	r0, r0, #1
 80070e8:	694c      	ldr	r4, [r1, #20]
 80070ea:	f000 0008 	and.w	r0, r0, #8
 80070ee:	fa04 f000 	lsl.w	r0, r4, r0
 80070f2:	e7d5      	b.n	80070a0 <HAL_ADC_AnalogWDGConfig+0x2a4>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80070f4:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80070f8:	2501      	movs	r5, #1
 80070fa:	4085      	lsls	r5, r0
 80070fc:	e7a4      	b.n	8007048 <HAL_ADC_AnalogWDGConfig+0x24c>
 80070fe:	2501      	movs	r5, #1
 8007100:	e6d3      	b.n	8006eaa <HAL_ADC_AnalogWDGConfig+0xae>
 8007102:	bf00      	nop
 8007104:	7dc00000 	.word	0x7dc00000
 8007108:	7dcfffff 	.word	0x7dcfffff
 800710c:	001fffff 	.word	0x001fffff
 8007110:	5c001000 	.word	0x5c001000
 8007114:	823fffff 	.word	0x823fffff
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8007118:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800711a:	2000      	movs	r0, #0
 800711c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007120:	6051      	str	r1, [r2, #4]
}
 8007122:	e6a9      	b.n	8006e78 <HAL_ADC_AnalogWDGConfig+0x7c>
  MODIFY_REG(*preg,
 8007124:	68d4      	ldr	r4, [r2, #12]
 8007126:	4811      	ldr	r0, [pc, #68]	; (800716c <HAL_ADC_AnalogWDGConfig+0x370>)
 8007128:	4020      	ands	r0, r4
 800712a:	60d0      	str	r0, [r2, #12]
}
 800712c:	e72f      	b.n	8006f8e <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 800712e:	68d4      	ldr	r4, [r2, #12]
 8007130:	480e      	ldr	r0, [pc, #56]	; (800716c <HAL_ADC_AnalogWDGConfig+0x370>)
 8007132:	4020      	ands	r0, r4
 8007134:	f040 70c0 	orr.w	r0, r0, #25165824	; 0x1800000
 8007138:	60d0      	str	r0, [r2, #12]
}
 800713a:	e728      	b.n	8006f8e <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 800713c:	68d5      	ldr	r5, [r2, #12]
 800713e:	6888      	ldr	r0, [r1, #8]
 8007140:	4c0a      	ldr	r4, [pc, #40]	; (800716c <HAL_ADC_AnalogWDGConfig+0x370>)
 8007142:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007146:	402c      	ands	r4, r5
 8007148:	4320      	orrs	r0, r4
 800714a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800714e:	60d0      	str	r0, [r2, #12]
}
 8007150:	e71d      	b.n	8006f8e <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 8007152:	68d5      	ldr	r5, [r2, #12]
 8007154:	6888      	ldr	r0, [r1, #8]
 8007156:	4c05      	ldr	r4, [pc, #20]	; (800716c <HAL_ADC_AnalogWDGConfig+0x370>)
 8007158:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800715c:	402c      	ands	r4, r5
 800715e:	4320      	orrs	r0, r4
 8007160:	f040 70a0 	orr.w	r0, r0, #20971520	; 0x1400000
 8007164:	60d0      	str	r0, [r2, #12]
}
 8007166:	e712      	b.n	8006f8e <HAL_ADC_AnalogWDGConfig+0x192>
 8007168:	2501      	movs	r5, #1
 800716a:	e76d      	b.n	8007048 <HAL_ADC_AnalogWDGConfig+0x24c>
 800716c:	823fffff 	.word	0x823fffff

08007170 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007170:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	07d1      	lsls	r1, r2, #31
 8007176:	d501      	bpl.n	800717c <ADC_Enable+0xc>
  return HAL_OK;
 8007178:	2000      	movs	r0, #0
}
 800717a:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800717c:	6899      	ldr	r1, [r3, #8]
 800717e:	4a21      	ldr	r2, [pc, #132]	; (8007204 <ADC_Enable+0x94>)
 8007180:	4211      	tst	r1, r2
{
 8007182:	b570      	push	{r4, r5, r6, lr}
 8007184:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007186:	d12c      	bne.n	80071e2 <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8007188:	6899      	ldr	r1, [r3, #8]
 800718a:	4a1f      	ldr	r2, [pc, #124]	; (8007208 <ADC_Enable+0x98>)
 800718c:	400a      	ands	r2, r1
 800718e:	f042 0201 	orr.w	r2, r2, #1
 8007192:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8007194:	f7ff fa2c 	bl	80065f0 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007198:	6823      	ldr	r3, [r4, #0]
 800719a:	4a1c      	ldr	r2, [pc, #112]	; (800720c <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 800719c:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800719e:	4293      	cmp	r3, r2
 80071a0:	d028      	beq.n	80071f4 <ADC_Enable+0x84>
 80071a2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d024      	beq.n	80071f4 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80071aa:	4a19      	ldr	r2, [pc, #100]	; (8007210 <ADC_Enable+0xa0>)
 80071ac:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	07d6      	lsls	r6, r2, #31
 80071b2:	d414      	bmi.n	80071de <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 80071b4:	4e14      	ldr	r6, [pc, #80]	; (8007208 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80071b6:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80071b8:	07d0      	lsls	r0, r2, #31
 80071ba:	d404      	bmi.n	80071c6 <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	4032      	ands	r2, r6
 80071c0:	f042 0201 	orr.w	r2, r2, #1
 80071c4:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80071c6:	f7ff fa13 	bl	80065f0 <HAL_GetTick>
 80071ca:	1b43      	subs	r3, r0, r5
 80071cc:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80071ce:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80071d0:	d902      	bls.n	80071d8 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	07d1      	lsls	r1, r2, #31
 80071d6:	d504      	bpl.n	80071e2 <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	07d2      	lsls	r2, r2, #31
 80071dc:	d5eb      	bpl.n	80071b6 <ADC_Enable+0x46>
  return HAL_OK;
 80071de:	2000      	movs	r0, #0
}
 80071e0:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 80071e4:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071e6:	f043 0310 	orr.w	r3, r3, #16
 80071ea:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071ee:	4303      	orrs	r3, r0
 80071f0:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80071f4:	4a07      	ldr	r2, [pc, #28]	; (8007214 <ADC_Enable+0xa4>)
 80071f6:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80071f8:	06d2      	lsls	r2, r2, #27
 80071fa:	d0d8      	beq.n	80071ae <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80071fc:	4a06      	ldr	r2, [pc, #24]	; (8007218 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d1d5      	bne.n	80071ae <ADC_Enable+0x3e>
 8007202:	e7ec      	b.n	80071de <ADC_Enable+0x6e>
 8007204:	8000003f 	.word	0x8000003f
 8007208:	7fffffc0 	.word	0x7fffffc0
 800720c:	40022000 	.word	0x40022000
 8007210:	58026300 	.word	0x58026300
 8007214:	40022300 	.word	0x40022300
 8007218:	40022100 	.word	0x40022100

0800721c <ADC_Disable>:
{
 800721c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800721e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007220:	689a      	ldr	r2, [r3, #8]
 8007222:	0795      	lsls	r5, r2, #30
 8007224:	d502      	bpl.n	800722c <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007226:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8007228:	2000      	movs	r0, #0
}
 800722a:	bd38      	pop	{r3, r4, r5, pc}
 800722c:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800722e:	07d4      	lsls	r4, r2, #31
 8007230:	d529      	bpl.n	8007286 <ADC_Disable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	4604      	mov	r4, r0
 8007236:	f002 020d 	and.w	r2, r2, #13
 800723a:	2a01      	cmp	r2, #1
 800723c:	d008      	beq.n	8007250 <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800723e:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8007240:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007242:	f043 0310 	orr.w	r3, r3, #16
 8007246:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007248:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800724a:	4303      	orrs	r3, r0
 800724c:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800724e:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8007250:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007252:	2103      	movs	r1, #3
 8007254:	4a0d      	ldr	r2, [pc, #52]	; (800728c <ADC_Disable+0x70>)
 8007256:	4002      	ands	r2, r0
 8007258:	f042 0202 	orr.w	r2, r2, #2
 800725c:	609a      	str	r2, [r3, #8]
 800725e:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8007260:	f7ff f9c6 	bl	80065f0 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007264:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8007266:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	07d9      	lsls	r1, r3, #31
 800726c:	d50b      	bpl.n	8007286 <ADC_Disable+0x6a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800726e:	f7ff f9bf 	bl	80065f0 <HAL_GetTick>
 8007272:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007274:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007276:	2802      	cmp	r0, #2
 8007278:	d902      	bls.n	8007280 <ADC_Disable+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	07d2      	lsls	r2, r2, #31
 800727e:	d4de      	bmi.n	800723e <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	07db      	lsls	r3, r3, #31
 8007284:	d4f3      	bmi.n	800726e <ADC_Disable+0x52>
  return HAL_OK;
 8007286:	2000      	movs	r0, #0
}
 8007288:	bd38      	pop	{r3, r4, r5, pc}
 800728a:	bf00      	nop
 800728c:	7fffffc0 	.word	0x7fffffc0

08007290 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8007290:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8007292:	4a56      	ldr	r2, [pc, #344]	; (80073ec <ADC_ConfigureBoostMode+0x15c>)
{
 8007294:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8007296:	6803      	ldr	r3, [r0, #0]
 8007298:	4293      	cmp	r3, r2
 800729a:	d025      	beq.n	80072e8 <ADC_ConfigureBoostMode+0x58>
 800729c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d021      	beq.n	80072e8 <ADC_ConfigureBoostMode+0x58>
 80072a4:	4b52      	ldr	r3, [pc, #328]	; (80073f0 <ADC_ConfigureBoostMode+0x160>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80072ac:	d021      	beq.n	80072f2 <ADC_ConfigureBoostMode+0x62>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80072ae:	f003 fcdf 	bl	800ac70 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80072b2:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 80072b4:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80072b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072ba:	f000 8086 	beq.w	80073ca <ADC_ConfigureBoostMode+0x13a>
 80072be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072c2:	d06a      	beq.n	800739a <ADC_ConfigureBoostMode+0x10a>
 80072c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072c8:	d07f      	beq.n	80073ca <ADC_ConfigureBoostMode+0x13a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80072ca:	f7ff f9a9 	bl	8006620 <HAL_GetREVID>
 80072ce:	f241 0303 	movw	r3, #4099	; 0x1003
 80072d2:	4298      	cmp	r0, r3
 80072d4:	d84a      	bhi.n	800736c <ADC_ConfigureBoostMode+0xdc>
  {
    if (freq > 20000000UL)
 80072d6:	4b47      	ldr	r3, [pc, #284]	; (80073f4 <ADC_ConfigureBoostMode+0x164>)
 80072d8:	429d      	cmp	r5, r3
 80072da:	d929      	bls.n	8007330 <ADC_ConfigureBoostMode+0xa0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80072dc:	6822      	ldr	r2, [r4, #0]
 80072de:	6893      	ldr	r3, [r2, #8]
 80072e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e4:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80072e6:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80072e8:	4b43      	ldr	r3, [pc, #268]	; (80073f8 <ADC_ConfigureBoostMode+0x168>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80072f0:	d1dd      	bne.n	80072ae <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80072f2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80072f6:	f004 fddd 	bl	800beb4 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80072fa:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80072fc:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80072fe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007302:	d06c      	beq.n	80073de <ADC_ConfigureBoostMode+0x14e>
 8007304:	d808      	bhi.n	8007318 <ADC_ConfigureBoostMode+0x88>
 8007306:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800730a:	d050      	beq.n	80073ae <ADC_ConfigureBoostMode+0x11e>
 800730c:	d916      	bls.n	800733c <ADC_ConfigureBoostMode+0xac>
 800730e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007312:	d1da      	bne.n	80072ca <ADC_ConfigureBoostMode+0x3a>
        freq /= 32UL;
 8007314:	0945      	lsrs	r5, r0, #5
        break;
 8007316:	e7d8      	b.n	80072ca <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 8007318:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800731c:	d045      	beq.n	80073aa <ADC_ConfigureBoostMode+0x11a>
 800731e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007322:	d1d2      	bne.n	80072ca <ADC_ConfigureBoostMode+0x3a>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8007324:	f7ff f97c 	bl	8006620 <HAL_GetREVID>
 8007328:	f241 0303 	movw	r3, #4099	; 0x1003
 800732c:	4298      	cmp	r0, r3
 800732e:	d840      	bhi.n	80073b2 <ADC_ConfigureBoostMode+0x122>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8007330:	6822      	ldr	r2, [r4, #0]
 8007332:	6893      	ldr	r3, [r2, #8]
 8007334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007338:	6093      	str	r3, [r2, #8]
}
 800733a:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 800733c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007340:	d006      	beq.n	8007350 <ADC_ConfigureBoostMode+0xc0>
 8007342:	d90a      	bls.n	800735a <ADC_ConfigureBoostMode+0xca>
 8007344:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007348:	d002      	beq.n	8007350 <ADC_ConfigureBoostMode+0xc0>
 800734a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800734e:	d1bc      	bne.n	80072ca <ADC_ConfigureBoostMode+0x3a>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8007350:	0c9b      	lsrs	r3, r3, #18
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8007358:	e7b7      	b.n	80072ca <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 800735a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800735e:	d0f7      	beq.n	8007350 <ADC_ConfigureBoostMode+0xc0>
 8007360:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007364:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8007368:	d0f2      	beq.n	8007350 <ADC_ConfigureBoostMode+0xc0>
 800736a:	e7ae      	b.n	80072ca <ADC_ConfigureBoostMode+0x3a>
    if (freq <= 6250000UL)
 800736c:	4b23      	ldr	r3, [pc, #140]	; (80073fc <ADC_ConfigureBoostMode+0x16c>)
 800736e:	429d      	cmp	r5, r3
 8007370:	d805      	bhi.n	800737e <ADC_ConfigureBoostMode+0xee>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8007372:	6822      	ldr	r2, [r4, #0]
 8007374:	6893      	ldr	r3, [r2, #8]
 8007376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800737a:	6093      	str	r3, [r2, #8]
}
 800737c:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 800737e:	4b20      	ldr	r3, [pc, #128]	; (8007400 <ADC_ConfigureBoostMode+0x170>)
 8007380:	429d      	cmp	r5, r3
 8007382:	d91a      	bls.n	80073ba <ADC_ConfigureBoostMode+0x12a>
    else if (freq <= 25000000UL)
 8007384:	4b1f      	ldr	r3, [pc, #124]	; (8007404 <ADC_ConfigureBoostMode+0x174>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007386:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8007388:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800738a:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 800738c:	d829      	bhi.n	80073e2 <ADC_ConfigureBoostMode+0x152>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800738e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007396:	6093      	str	r3, [r2, #8]
}
 8007398:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 800739a:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800739c:	f7ff f940 	bl	8006620 <HAL_GetREVID>
 80073a0:	f241 0303 	movw	r3, #4099	; 0x1003
 80073a4:	4298      	cmp	r0, r3
 80073a6:	d8e1      	bhi.n	800736c <ADC_ConfigureBoostMode+0xdc>
 80073a8:	e795      	b.n	80072d6 <ADC_ConfigureBoostMode+0x46>
        freq /= 128UL;
 80073aa:	09c5      	lsrs	r5, r0, #7
        break;
 80073ac:	e78d      	b.n	80072ca <ADC_ConfigureBoostMode+0x3a>
        freq /= 16UL;
 80073ae:	0905      	lsrs	r5, r0, #4
        break;
 80073b0:	e78b      	b.n	80072ca <ADC_ConfigureBoostMode+0x3a>
    if (freq <= 6250000UL)
 80073b2:	4b12      	ldr	r3, [pc, #72]	; (80073fc <ADC_ConfigureBoostMode+0x16c>)
 80073b4:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 80073b8:	d2db      	bcs.n	8007372 <ADC_ConfigureBoostMode+0xe2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80073ba:	6822      	ldr	r2, [r4, #0]
 80073bc:	6893      	ldr	r3, [r2, #8]
 80073be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073c6:	6093      	str	r3, [r2, #8]
}
 80073c8:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80073ca:	0c1b      	lsrs	r3, r3, #16
 80073cc:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80073d0:	f7ff f926 	bl	8006620 <HAL_GetREVID>
 80073d4:	f241 0303 	movw	r3, #4099	; 0x1003
 80073d8:	4298      	cmp	r0, r3
 80073da:	d8c7      	bhi.n	800736c <ADC_ConfigureBoostMode+0xdc>
 80073dc:	e77b      	b.n	80072d6 <ADC_ConfigureBoostMode+0x46>
        freq /= 64UL;
 80073de:	0985      	lsrs	r5, r0, #6
        break;
 80073e0:	e773      	b.n	80072ca <ADC_ConfigureBoostMode+0x3a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80073e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80073e6:	6093      	str	r3, [r2, #8]
}
 80073e8:	bd38      	pop	{r3, r4, r5, pc}
 80073ea:	bf00      	nop
 80073ec:	40022000 	.word	0x40022000
 80073f0:	58026300 	.word	0x58026300
 80073f4:	01312d00 	.word	0x01312d00
 80073f8:	40022300 	.word	0x40022300
 80073fc:	00bebc21 	.word	0x00bebc21
 8007400:	017d7841 	.word	0x017d7841
 8007404:	02faf081 	.word	0x02faf081

08007408 <HAL_ADC_Init>:
{
 8007408:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 800740a:	2300      	movs	r3, #0
{
 800740c:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 800740e:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8007410:	2800      	cmp	r0, #0
 8007412:	f000 80d1 	beq.w	80075b8 <HAL_ADC_Init+0x1b0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007416:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8007418:	4604      	mov	r4, r0
 800741a:	2d00      	cmp	r5, #0
 800741c:	f000 80bb 	beq.w	8007596 <HAL_ADC_Init+0x18e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007420:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007422:	6893      	ldr	r3, [r2, #8]
 8007424:	009d      	lsls	r5, r3, #2
 8007426:	d503      	bpl.n	8007430 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007428:	6891      	ldr	r1, [r2, #8]
 800742a:	4b72      	ldr	r3, [pc, #456]	; (80075f4 <HAL_ADC_Init+0x1ec>)
 800742c:	400b      	ands	r3, r1
 800742e:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007430:	6893      	ldr	r3, [r2, #8]
 8007432:	00d8      	lsls	r0, r3, #3
 8007434:	d416      	bmi.n	8007464 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007436:	4b70      	ldr	r3, [pc, #448]	; (80075f8 <HAL_ADC_Init+0x1f0>)
 8007438:	4970      	ldr	r1, [pc, #448]	; (80075fc <HAL_ADC_Init+0x1f4>)
 800743a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800743c:	6890      	ldr	r0, [r2, #8]
 800743e:	099b      	lsrs	r3, r3, #6
 8007440:	fba1 1303 	umull	r1, r3, r1, r3
 8007444:	496e      	ldr	r1, [pc, #440]	; (8007600 <HAL_ADC_Init+0x1f8>)
 8007446:	099b      	lsrs	r3, r3, #6
 8007448:	4001      	ands	r1, r0
 800744a:	3301      	adds	r3, #1
 800744c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007450:	6091      	str	r1, [r2, #8]
 8007452:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007454:	9b01      	ldr	r3, [sp, #4]
 8007456:	b12b      	cbz	r3, 8007464 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8007458:	9b01      	ldr	r3, [sp, #4]
 800745a:	3b01      	subs	r3, #1
 800745c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800745e:	9b01      	ldr	r3, [sp, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1f9      	bne.n	8007458 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007464:	6893      	ldr	r3, [r2, #8]
 8007466:	00d9      	lsls	r1, r3, #3
 8007468:	d424      	bmi.n	80074b4 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800746a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800746c:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800746e:	f043 0310 	orr.w	r3, r3, #16
 8007472:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007474:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007476:	432b      	orrs	r3, r5
 8007478:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800747a:	6893      	ldr	r3, [r2, #8]
 800747c:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007480:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007482:	d11d      	bne.n	80074c0 <HAL_ADC_Init+0xb8>
 8007484:	06db      	lsls	r3, r3, #27
 8007486:	d41b      	bmi.n	80074c0 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8007488:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800748a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800748e:	f043 0302 	orr.w	r3, r3, #2
 8007492:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007494:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007496:	07de      	lsls	r6, r3, #31
 8007498:	d428      	bmi.n	80074ec <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800749a:	4b5a      	ldr	r3, [pc, #360]	; (8007604 <HAL_ADC_Init+0x1fc>)
 800749c:	429a      	cmp	r2, r3
 800749e:	d017      	beq.n	80074d0 <HAL_ADC_Init+0xc8>
 80074a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d013      	beq.n	80074d0 <HAL_ADC_Init+0xc8>
 80074a8:	4b57      	ldr	r3, [pc, #348]	; (8007608 <HAL_ADC_Init+0x200>)
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	07d9      	lsls	r1, r3, #31
 80074ae:	d41d      	bmi.n	80074ec <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80074b0:	4a56      	ldr	r2, [pc, #344]	; (800760c <HAL_ADC_Init+0x204>)
 80074b2:	e015      	b.n	80074e0 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80074b4:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80074b6:	2500      	movs	r5, #0
 80074b8:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80074bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80074be:	d0e1      	beq.n	8007484 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80074c2:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074c4:	f043 0310 	orr.w	r3, r3, #16
}
 80074c8:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074ca:	6563      	str	r3, [r4, #84]	; 0x54
}
 80074cc:	b002      	add	sp, #8
 80074ce:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80074d0:	4a4c      	ldr	r2, [pc, #304]	; (8007604 <HAL_ADC_Init+0x1fc>)
 80074d2:	4b4f      	ldr	r3, [pc, #316]	; (8007610 <HAL_ADC_Init+0x208>)
 80074d4:	6892      	ldr	r2, [r2, #8]
 80074d6:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80074d8:	4313      	orrs	r3, r2
 80074da:	07d8      	lsls	r0, r3, #31
 80074dc:	d406      	bmi.n	80074ec <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80074de:	4a4d      	ldr	r2, [pc, #308]	; (8007614 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80074e0:	6893      	ldr	r3, [r2, #8]
 80074e2:	6861      	ldr	r1, [r4, #4]
 80074e4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80074e8:	430b      	orrs	r3, r1
 80074ea:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80074ec:	f7ff f898 	bl	8006620 <HAL_GetREVID>
 80074f0:	f241 0303 	movw	r3, #4099	; 0x1003
 80074f4:	68a1      	ldr	r1, [r4, #8]
 80074f6:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80074f8:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80074fa:	d852      	bhi.n	80075a2 <HAL_ADC_Init+0x19a>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80074fc:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007500:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007502:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007504:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8007508:	4302      	orrs	r2, r0
 800750a:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800750c:	2b01      	cmp	r3, #1
 800750e:	d103      	bne.n	8007518 <HAL_ADC_Init+0x110>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007510:	6a23      	ldr	r3, [r4, #32]
 8007512:	3b01      	subs	r3, #1
 8007514:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800751a:	b123      	cbz	r3, 8007526 <HAL_ADC_Init+0x11e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800751c:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007520:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007522:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007524:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007526:	6823      	ldr	r3, [r4, #0]
 8007528:	493b      	ldr	r1, [pc, #236]	; (8007618 <HAL_ADC_Init+0x210>)
 800752a:	68d8      	ldr	r0, [r3, #12]
 800752c:	4001      	ands	r1, r0
 800752e:	430a      	orrs	r2, r1
 8007530:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007532:	689a      	ldr	r2, [r3, #8]
 8007534:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007538:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800753a:	d11c      	bne.n	8007576 <HAL_ADC_Init+0x16e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800753c:	0712      	lsls	r2, r2, #28
 800753e:	d41a      	bmi.n	8007576 <HAL_ADC_Init+0x16e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007540:	68d8      	ldr	r0, [r3, #12]
 8007542:	4a36      	ldr	r2, [pc, #216]	; (800761c <HAL_ADC_Init+0x214>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007544:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007546:	4002      	ands	r2, r0
 8007548:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 800754c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800754e:	430a      	orrs	r2, r1
 8007550:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8007552:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8007556:	2a01      	cmp	r2, #1
 8007558:	d03a      	beq.n	80075d0 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800755a:	691a      	ldr	r2, [r3, #16]
 800755c:	f022 0201 	bic.w	r2, r2, #1
 8007560:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007562:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8007564:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007566:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007568:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800756c:	430a      	orrs	r2, r1
 800756e:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8007570:	f7ff fe8e 	bl	8007290 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007574:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007576:	68e2      	ldr	r2, [r4, #12]
 8007578:	2a01      	cmp	r2, #1
 800757a:	d021      	beq.n	80075c0 <HAL_ADC_Init+0x1b8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800757c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800757e:	f022 020f 	bic.w	r2, r2, #15
 8007582:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007584:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8007586:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007588:	f023 0303 	bic.w	r3, r3, #3
 800758c:	f043 0301 	orr.w	r3, r3, #1
 8007590:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007592:	b002      	add	sp, #8
 8007594:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8007596:	f7fe fbfb 	bl	8005d90 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800759a:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 800759c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80075a0:	e73e      	b.n	8007420 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80075a2:	2910      	cmp	r1, #16
 80075a4:	d1aa      	bne.n	80074fc <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80075a6:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80075a8:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80075aa:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80075ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80075b0:	430a      	orrs	r2, r1
 80075b2:	f042 021c 	orr.w	r2, r2, #28
 80075b6:	e7a9      	b.n	800750c <HAL_ADC_Init+0x104>
    return HAL_ERROR;
 80075b8:	2501      	movs	r5, #1
}
 80075ba:	4628      	mov	r0, r5
 80075bc:	b002      	add	sp, #8
 80075be:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80075c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80075c2:	69a2      	ldr	r2, [r4, #24]
 80075c4:	f021 010f 	bic.w	r1, r1, #15
 80075c8:	3a01      	subs	r2, #1
 80075ca:	430a      	orrs	r2, r1
 80075cc:	631a      	str	r2, [r3, #48]	; 0x30
 80075ce:	e7d9      	b.n	8007584 <HAL_ADC_Init+0x17c>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80075d0:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 80075d4:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80075d6:	3901      	subs	r1, #1
 80075d8:	6918      	ldr	r0, [r3, #16]
 80075da:	4332      	orrs	r2, r6
 80075dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80075e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80075e2:	430a      	orrs	r2, r1
 80075e4:	490e      	ldr	r1, [pc, #56]	; (8007620 <HAL_ADC_Init+0x218>)
 80075e6:	4001      	ands	r1, r0
 80075e8:	430a      	orrs	r2, r1
 80075ea:	f042 0201 	orr.w	r2, r2, #1
 80075ee:	611a      	str	r2, [r3, #16]
 80075f0:	e7b7      	b.n	8007562 <HAL_ADC_Init+0x15a>
 80075f2:	bf00      	nop
 80075f4:	5fffffc0 	.word	0x5fffffc0
 80075f8:	240003cc 	.word	0x240003cc
 80075fc:	053e2d63 	.word	0x053e2d63
 8007600:	6fffffc0 	.word	0x6fffffc0
 8007604:	40022000 	.word	0x40022000
 8007608:	58026000 	.word	0x58026000
 800760c:	58026300 	.word	0x58026300
 8007610:	40022100 	.word	0x40022100
 8007614:	40022300 	.word	0x40022300
 8007618:	fff0c003 	.word	0xfff0c003
 800761c:	ffffbffc 	.word	0xffffbffc
 8007620:	fc00f81e 	.word	0xfc00f81e

08007624 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8007624:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007626:	2300      	movs	r3, #0
{
 8007628:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800762a:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800762c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8007630:	2b01      	cmp	r3, #1
 8007632:	d040      	beq.n	80076b6 <HAL_ADCEx_Calibration_Start+0x92>
 8007634:	2301      	movs	r3, #1
 8007636:	4604      	mov	r4, r0
 8007638:	460e      	mov	r6, r1
 800763a:	4615      	mov	r5, r2
 800763c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007640:	f7ff fdec 	bl	800721c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007644:	b9e8      	cbnz	r0, 8007682 <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007646:	6d67      	ldr	r7, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8007648:	f005 4280 	and.w	r2, r5, #1073741824	; 0x40000000
 800764c:	4b1b      	ldr	r3, [pc, #108]	; (80076bc <HAL_ADCEx_Calibration_Start+0x98>)
 800764e:	f406 3180 	and.w	r1, r6, #65536	; 0x10000
 8007652:	4d1b      	ldr	r5, [pc, #108]	; (80076c0 <HAL_ADCEx_Calibration_Start+0x9c>)
 8007654:	403b      	ands	r3, r7

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007656:	4f1b      	ldr	r7, [pc, #108]	; (80076c4 <HAL_ADCEx_Calibration_Start+0xa0>)
    ADC_STATE_CLR_SET(hadc->State,
 8007658:	f043 0302 	orr.w	r3, r3, #2
 800765c:	6563      	str	r3, [r4, #84]	; 0x54
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	689e      	ldr	r6, [r3, #8]
 8007662:	4035      	ands	r5, r6
 8007664:	4315      	orrs	r5, r2
 8007666:	430d      	orrs	r5, r1
 8007668:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800766c:	609d      	str	r5, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800766e:	689a      	ldr	r2, [r3, #8]
 8007670:	2a00      	cmp	r2, #0
 8007672:	db0f      	blt.n	8007694 <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007674:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007676:	f023 0303 	bic.w	r3, r3, #3
 800767a:	f043 0301 	orr.w	r3, r3, #1
 800767e:	6563      	str	r3, [r4, #84]	; 0x54
 8007680:	e003      	b.n	800768a <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007682:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007684:	f043 0310 	orr.w	r3, r3, #16
 8007688:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800768a:	2300      	movs	r3, #0
 800768c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8007690:	b003      	add	sp, #12
 8007692:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 8007694:	9a01      	ldr	r2, [sp, #4]
 8007696:	3201      	adds	r2, #1
 8007698:	9201      	str	r2, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800769a:	9a01      	ldr	r2, [sp, #4]
 800769c:	42ba      	cmp	r2, r7
 800769e:	d3e6      	bcc.n	800766e <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 80076a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80076a2:	2200      	movs	r2, #0
        return HAL_ERROR;
 80076a4:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80076a6:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 80076aa:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 80076ae:	f043 0310 	orr.w	r3, r3, #16
 80076b2:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 80076b4:	e7ec      	b.n	8007690 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 80076b6:	2002      	movs	r0, #2
}
 80076b8:	b003      	add	sp, #12
 80076ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076bc:	ffffeefd 	.word	0xffffeefd
 80076c0:	3ffeffc0 	.word	0x3ffeffc0
 80076c4:	25c3f800 	.word	0x25c3f800

080076c8 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80076c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80076cc:	f8d0 8000 	ldr.w	r8, [r0]
{
 80076d0:	b09a      	sub	sp, #104	; 0x68
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80076d2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80076d6:	f015 0504 	ands.w	r5, r5, #4
 80076da:	d117      	bne.n	800770c <HAL_ADCEx_MultiModeStart_DMA+0x44>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80076dc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80076e0:	4604      	mov	r4, r0
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d012      	beq.n	800770c <HAL_ADCEx_MultiModeStart_DMA+0x44>

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80076e6:	4b2d      	ldr	r3, [pc, #180]	; (800779c <HAL_ADCEx_MultiModeStart_DMA+0xd4>)
    __HAL_LOCK(hadc);
 80076e8:	f04f 0c01 	mov.w	ip, #1
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80076ec:	9516      	str	r5, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80076ee:	4598      	cmp	r8, r3
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80076f0:	9517      	str	r5, [sp, #92]	; 0x5c
    __HAL_LOCK(hadc);
 80076f2:	f880 c050 	strb.w	ip, [r0, #80]	; 0x50
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80076f6:	d00d      	beq.n	8007714 <HAL_ADCEx_MultiModeStart_DMA+0x4c>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076f8:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 80076fa:	4660      	mov	r0, ip
      __HAL_UNLOCK(hadc);
 80076fc:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007700:	f043 0320 	orr.w	r3, r3, #32
 8007704:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 8007706:	b01a      	add	sp, #104	; 0x68
 8007708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800770c:	2002      	movs	r0, #2
}
 800770e:	b01a      	add	sp, #104	; 0x68
 8007710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007714:	4d22      	ldr	r5, [pc, #136]	; (80077a0 <HAL_ADCEx_MultiModeStart_DMA+0xd8>)
 8007716:	460e      	mov	r6, r1
 8007718:	4617      	mov	r7, r2
 800771a:	9501      	str	r5, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 800771c:	f7ff fd28 	bl	8007170 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8007720:	b128      	cbz	r0, 800772e <HAL_ADCEx_MultiModeStart_DMA+0x66>
      __HAL_UNLOCK(hadc);
 8007722:	2300      	movs	r3, #0
 8007724:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007728:	b01a      	add	sp, #104	; 0x68
 800772a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 800772e:	a801      	add	r0, sp, #4
 8007730:	f7ff fd1e 	bl	8007170 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8007734:	2800      	cmp	r0, #0
 8007736:	d1f4      	bne.n	8007722 <HAL_ADCEx_MultiModeStart_DMA+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 8007738:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800773a:	4a1a      	ldr	r2, [pc, #104]	; (80077a4 <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800773c:	4b1a      	ldr	r3, [pc, #104]	; (80077a8 <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      ADC_STATE_CLR_SET(hadc->State,
 800773e:	400a      	ands	r2, r1
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007740:	f8d4 c000 	ldr.w	ip, [r4]
      ADC_STATE_CLR_SET(hadc->State,
 8007744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007748:	45c4      	cmp	ip, r8
      ADC_STATE_CLR_SET(hadc->State,
 800774a:	6562      	str	r2, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 800774c:	65a0      	str	r0, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800774e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007750:	63c3      	str	r3, [r0, #60]	; 0x3c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007752:	4b16      	ldr	r3, [pc, #88]	; (80077ac <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
 8007754:	6403      	str	r3, [r0, #64]	; 0x40
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8007756:	4b16      	ldr	r3, [pc, #88]	; (80077b0 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
 8007758:	64c3      	str	r3, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800775a:	d01d      	beq.n	8007798 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 800775c:	45ac      	cmp	ip, r5
 800775e:	d01b      	beq.n	8007798 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 8007760:	4914      	ldr	r1, [pc, #80]	; (80077b4 <HAL_ADCEx_MultiModeStart_DMA+0xec>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007762:	251c      	movs	r5, #28
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8007764:	463b      	mov	r3, r7
 8007766:	4632      	mov	r2, r6
 8007768:	310c      	adds	r1, #12
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800776a:	f8cc 5000 	str.w	r5, [ip]
      __HAL_UNLOCK(hadc);
 800776e:	2500      	movs	r5, #0
 8007770:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007774:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8007778:	f045 0510 	orr.w	r5, r5, #16
 800777c:	f8cc 5004 	str.w	r5, [ip, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8007780:	f000 fe5c 	bl	800843c <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8007784:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8007786:	4b0c      	ldr	r3, [pc, #48]	; (80077b8 <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 8007788:	6891      	ldr	r1, [r2, #8]
 800778a:	400b      	ands	r3, r1
 800778c:	f043 0304 	orr.w	r3, r3, #4
 8007790:	6093      	str	r3, [r2, #8]
}
 8007792:	b01a      	add	sp, #104	; 0x68
 8007794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007798:	4908      	ldr	r1, [pc, #32]	; (80077bc <HAL_ADCEx_MultiModeStart_DMA+0xf4>)
 800779a:	e7e2      	b.n	8007762 <HAL_ADCEx_MultiModeStart_DMA+0x9a>
 800779c:	40022000 	.word	0x40022000
 80077a0:	40022100 	.word	0x40022100
 80077a4:	fffff0fe 	.word	0xfffff0fe
 80077a8:	08006915 	.word	0x08006915
 80077ac:	08006685 	.word	0x08006685
 80077b0:	08006981 	.word	0x08006981
 80077b4:	58026300 	.word	0x58026300
 80077b8:	7fffffc0 	.word	0x7fffffc0
 80077bc:	40022300 	.word	0x40022300

080077c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop

080077c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop

080077c8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop

080077cc <HAL_ADCEx_LevelOutOfWindow3Callback>:
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop

080077d0 <HAL_ADCEx_EndOfSamplingCallback>:
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop

080077d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80077d4:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80077d6:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 80077da:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80077dc:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80077de:	2a01      	cmp	r2, #1
 80077e0:	d04d      	beq.n	800787e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80077e2:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80077e4:	4c2b      	ldr	r4, [pc, #172]	; (8007894 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80077e6:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80077e8:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80077ea:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80077ec:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80077ee:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 80077f0:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80077f4:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80077f6:	d008      	beq.n	800780a <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077f8:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80077fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077fe:	f041 0120 	orr.w	r1, r1, #32
 8007802:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8007804:	b01a      	add	sp, #104	; 0x68
 8007806:	bcf0      	pop	{r4, r5, r6, r7}
 8007808:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800780a:	4c23      	ldr	r4, [pc, #140]	; (8007898 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 800780c:	68a2      	ldr	r2, [r4, #8]
 800780e:	0752      	lsls	r2, r2, #29
 8007810:	d50b      	bpl.n	800782a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8007812:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8007816:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007818:	f042 0220 	orr.w	r2, r2, #32
 800781c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8007824:	b01a      	add	sp, #104	; 0x68
 8007826:	bcf0      	pop	{r4, r5, r6, r7}
 8007828:	4770      	bx	lr
 800782a:	68a8      	ldr	r0, [r5, #8]
 800782c:	f010 0004 	ands.w	r0, r0, #4
 8007830:	d1f0      	bne.n	8007814 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007832:	b1c6      	cbz	r6, 8007866 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8007834:	f8df c068 	ldr.w	ip, [pc, #104]	; 80078a0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8007838:	684f      	ldr	r7, [r1, #4]
 800783a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800783e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007842:	433a      	orrs	r2, r7
 8007844:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007848:	68ad      	ldr	r5, [r5, #8]
 800784a:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800784c:	432a      	orrs	r2, r5
 800784e:	07d4      	lsls	r4, r2, #31
 8007850:	d413      	bmi.n	800787a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 8007852:	688a      	ldr	r2, [r1, #8]
 8007854:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007858:	4316      	orrs	r6, r2
 800785a:	4a10      	ldr	r2, [pc, #64]	; (800789c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 800785c:	400a      	ands	r2, r1
 800785e:	4316      	orrs	r6, r2
 8007860:	f8cc 6008 	str.w	r6, [ip, #8]
 8007864:	e7db      	b.n	800781e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007866:	490e      	ldr	r1, [pc, #56]	; (80078a0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8007868:	688a      	ldr	r2, [r1, #8]
 800786a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800786e:	608a      	str	r2, [r1, #8]
 8007870:	68a8      	ldr	r0, [r5, #8]
 8007872:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007874:	4302      	orrs	r2, r0
 8007876:	07d0      	lsls	r0, r2, #31
 8007878:	d505      	bpl.n	8007886 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800787a:	2000      	movs	r0, #0
 800787c:	e7cf      	b.n	800781e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 800787e:	2002      	movs	r0, #2
}
 8007880:	b01a      	add	sp, #104	; 0x68
 8007882:	bcf0      	pop	{r4, r5, r6, r7}
 8007884:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007886:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007888:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800788a:	4a04      	ldr	r2, [pc, #16]	; (800789c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 800788c:	4022      	ands	r2, r4
 800788e:	608a      	str	r2, [r1, #8]
 8007890:	e7c5      	b.n	800781e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8007892:	bf00      	nop
 8007894:	40022000 	.word	0x40022000
 8007898:	40022100 	.word	0x40022100
 800789c:	fffff0e0 	.word	0xfffff0e0
 80078a0:	40022300 	.word	0x40022300

080078a4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078a4:	4906      	ldr	r1, [pc, #24]	; (80078c0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078a6:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80078aa:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80078ac:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078ae:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80078b0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078b4:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078b8:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80078ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80078bc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80078be:	4770      	bx	lr
 80078c0:	e000ed00 	.word	0xe000ed00
 80078c4:	05fa0000 	.word	0x05fa0000

080078c8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078c8:	4b1b      	ldr	r3, [pc, #108]	; (8007938 <HAL_NVIC_SetPriority+0x70>)
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078d0:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078d2:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078d6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078da:	f1be 0f04 	cmp.w	lr, #4
 80078de:	bf28      	it	cs
 80078e0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078e4:	f1bc 0f06 	cmp.w	ip, #6
 80078e8:	d91a      	bls.n	8007920 <HAL_NVIC_SetPriority+0x58>
 80078ea:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078ec:	f04f 3cff 	mov.w	ip, #4294967295
 80078f0:	fa0c fc03 	lsl.w	ip, ip, r3
 80078f4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078f8:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80078fc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078fe:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007902:	ea21 010c 	bic.w	r1, r1, ip
 8007906:	fa01 f103 	lsl.w	r1, r1, r3
 800790a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800790e:	db0a      	blt.n	8007926 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007910:	0109      	lsls	r1, r1, #4
 8007912:	4b0a      	ldr	r3, [pc, #40]	; (800793c <HAL_NVIC_SetPriority+0x74>)
 8007914:	b2c9      	uxtb	r1, r1
 8007916:	4403      	add	r3, r0
 8007918:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800791c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007920:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007922:	4613      	mov	r3, r2
 8007924:	e7e8      	b.n	80078f8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007926:	f000 000f 	and.w	r0, r0, #15
 800792a:	0109      	lsls	r1, r1, #4
 800792c:	4b04      	ldr	r3, [pc, #16]	; (8007940 <HAL_NVIC_SetPriority+0x78>)
 800792e:	b2c9      	uxtb	r1, r1
 8007930:	4403      	add	r3, r0
 8007932:	7619      	strb	r1, [r3, #24]
 8007934:	f85d fb04 	ldr.w	pc, [sp], #4
 8007938:	e000ed00 	.word	0xe000ed00
 800793c:	e000e100 	.word	0xe000e100
 8007940:	e000ecfc 	.word	0xe000ecfc

08007944 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007944:	2800      	cmp	r0, #0
 8007946:	db07      	blt.n	8007958 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007948:	2301      	movs	r3, #1
 800794a:	f000 011f 	and.w	r1, r0, #31
 800794e:	4a03      	ldr	r2, [pc, #12]	; (800795c <HAL_NVIC_EnableIRQ+0x18>)
 8007950:	0940      	lsrs	r0, r0, #5
 8007952:	408b      	lsls	r3, r1
 8007954:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	e000e100 	.word	0xe000e100

08007960 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007960:	1e43      	subs	r3, r0, #1
 8007962:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007966:	d20c      	bcs.n	8007982 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007968:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800796c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800796e:	4906      	ldr	r1, [pc, #24]	; (8007988 <HAL_SYSTICK_Config+0x28>)
 8007970:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007974:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007976:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007978:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800797c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800797e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007980:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8007982:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	e000ed00 	.word	0xe000ed00

0800798c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 800798c:	b188      	cbz	r0, 80079b2 <HAL_DAC_Init+0x26>
{
 800798e:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007990:	7903      	ldrb	r3, [r0, #4]
 8007992:	4604      	mov	r4, r0
 8007994:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007998:	b13b      	cbz	r3, 80079aa <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800799a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 800799c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800799e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80079a0:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80079a2:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80079a4:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80079a6:	7122      	strb	r2, [r4, #4]
}
 80079a8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80079aa:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80079ac:	f7fe fa98 	bl	8005ee0 <HAL_DAC_MspInit>
 80079b0:	e7f3      	b.n	800799a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80079b2:	2001      	movs	r0, #1
}
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop

080079b8 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80079b8:	7942      	ldrb	r2, [r0, #5]
 80079ba:	2a01      	cmp	r2, #1
 80079bc:	d02e      	beq.n	8007a1c <HAL_DAC_Start+0x64>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80079be:	4603      	mov	r3, r0
 80079c0:	f04f 0c02 	mov.w	ip, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80079c4:	6800      	ldr	r0, [r0, #0]
 80079c6:	2201      	movs	r2, #1
{
 80079c8:	b510      	push	{r4, lr}
  __HAL_DAC_ENABLE(hdac, Channel);
 80079ca:	f001 0e10 	and.w	lr, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 80079ce:	f883 c004 	strb.w	ip, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 80079d2:	6804      	ldr	r4, [r0, #0]
 80079d4:	fa02 f20e 	lsl.w	r2, r2, lr
 80079d8:	4322      	orrs	r2, r4
 80079da:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80079dc:	6802      	ldr	r2, [r0, #0]
  if (Channel == DAC_CHANNEL_1)
 80079de:	b969      	cbnz	r1, 80079fc <HAL_DAC_Start+0x44>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80079e0:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 80079e4:	4562      	cmp	r2, ip
 80079e6:	d103      	bne.n	80079f0 <HAL_DAC_Start+0x38>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80079e8:	6842      	ldr	r2, [r0, #4]
 80079ea:	f042 0201 	orr.w	r2, r2, #1
 80079ee:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80079f0:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 80079f2:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 80079f4:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 80079f6:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 80079f8:	715a      	strb	r2, [r3, #5]
}
 80079fa:	bd10      	pop	{r4, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80079fc:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007a00:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 8007a04:	4562      	cmp	r2, ip
 8007a06:	d1f3      	bne.n	80079f0 <HAL_DAC_Start+0x38>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007a08:	6842      	ldr	r2, [r0, #4]
  hdac->State = HAL_DAC_STATE_READY;
 8007a0a:	2101      	movs	r1, #1
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007a0c:	f042 0202 	orr.w	r2, r2, #2
 8007a10:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 8007a12:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8007a14:	7119      	strb	r1, [r3, #4]
  return HAL_OK;
 8007a16:	4610      	mov	r0, r2
  __HAL_UNLOCK(hdac);
 8007a18:	715a      	strb	r2, [r3, #5]
}
 8007a1a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdac);
 8007a1c:	2002      	movs	r0, #2
}
 8007a1e:	4770      	bx	lr

08007a20 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a22:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007a24:	7940      	ldrb	r0, [r0, #5]
{
 8007a26:	9f06      	ldr	r7, [sp, #24]
  __HAL_LOCK(hdac);
 8007a28:	2801      	cmp	r0, #1
 8007a2a:	d053      	beq.n	8007ad4 <HAL_DAC_Start_DMA+0xb4>
 8007a2c:	460d      	mov	r5, r1
 8007a2e:	4611      	mov	r1, r2
 8007a30:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007a32:	6826      	ldr	r6, [r4, #0]
  __HAL_LOCK(hdac);
 8007a34:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a36:	2202      	movs	r2, #2
 8007a38:	7122      	strb	r2, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 8007a3a:	bb3d      	cbnz	r5, 8007a8c <HAL_DAC_Start_DMA+0x6c>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007a3c:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007a3e:	2f04      	cmp	r7, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007a40:	4a37      	ldr	r2, [pc, #220]	; (8007b20 <HAL_DAC_Start_DMA+0x100>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007a42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007b28 <HAL_DAC_Start_DMA+0x108>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007a46:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007a48:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007a4a:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007a4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007a52:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8007b2c <HAL_DAC_Start_DMA+0x10c>
 8007a56:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007a5a:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 8007a5c:	d042      	beq.n	8007ae4 <HAL_DAC_Start_DMA+0xc4>
 8007a5e:	2f08      	cmp	r7, #8
 8007a60:	d03d      	beq.n	8007ade <HAL_DAC_Start_DMA+0xbe>
 8007a62:	2f00      	cmp	r7, #0
 8007a64:	d038      	beq.n	8007ad8 <HAL_DAC_Start_DMA+0xb8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007a66:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007a68:	6837      	ldr	r7, [r6, #0]
 8007a6a:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8007a6e:	6037      	str	r7, [r6, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007a70:	f000 fce4 	bl	800843c <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007a74:	2300      	movs	r3, #0
 8007a76:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8007a78:	bb38      	cbnz	r0, 8007aca <HAL_DAC_Start_DMA+0xaa>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	f005 0110 	and.w	r1, r5, #16
 8007a80:	2501      	movs	r5, #1
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	408d      	lsls	r5, r1
 8007a86:	4315      	orrs	r5, r2
 8007a88:	601d      	str	r5, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8007a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007a8c:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 8007a8e:	2f04      	cmp	r7, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007a90:	4a24      	ldr	r2, [pc, #144]	; (8007b24 <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007a92:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8007b30 <HAL_DAC_Start_DMA+0x110>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007a96:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007a98:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007a9a:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007a9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007aa2:	f8df c090 	ldr.w	ip, [pc, #144]	; 8007b34 <HAL_DAC_Start_DMA+0x114>
 8007aa6:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007aaa:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 8007aac:	d02f      	beq.n	8007b0e <HAL_DAC_Start_DMA+0xee>
 8007aae:	2f08      	cmp	r7, #8
 8007ab0:	d024      	beq.n	8007afc <HAL_DAC_Start_DMA+0xdc>
 8007ab2:	b1d7      	cbz	r7, 8007aea <HAL_DAC_Start_DMA+0xca>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007ab4:	6837      	ldr	r7, [r6, #0]
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007ab6:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007ab8:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8007abc:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007abe:	f000 fcbd 	bl	800843c <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d0d7      	beq.n	8007a7a <HAL_DAC_Start_DMA+0x5a>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007aca:	6923      	ldr	r3, [r4, #16]
 8007acc:	f043 0304 	orr.w	r3, r3, #4
 8007ad0:	6123      	str	r3, [r4, #16]
}
 8007ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8007ad4:	2002      	movs	r0, #2
}
 8007ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007ad8:	f106 0208 	add.w	r2, r6, #8
        break;
 8007adc:	e7c4      	b.n	8007a68 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007ade:	f106 0210 	add.w	r2, r6, #16
        break;
 8007ae2:	e7c1      	b.n	8007a68 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007ae4:	f106 020c 	add.w	r2, r6, #12
        break;
 8007ae8:	e7be      	b.n	8007a68 <HAL_DAC_Start_DMA+0x48>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007aea:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007aec:	f106 0214 	add.w	r2, r6, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007af0:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8007af4:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007af6:	f000 fca1 	bl	800843c <HAL_DMA_Start_IT>
 8007afa:	e7e2      	b.n	8007ac2 <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007afc:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007afe:	f106 021c 	add.w	r2, r6, #28
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007b02:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8007b06:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007b08:	f000 fc98 	bl	800843c <HAL_DMA_Start_IT>
 8007b0c:	e7d9      	b.n	8007ac2 <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007b0e:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007b10:	f106 0218 	add.w	r2, r6, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007b14:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8007b18:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007b1a:	f000 fc8f 	bl	800843c <HAL_DMA_Start_IT>
 8007b1e:	e7d0      	b.n	8007ac2 <HAL_DAC_Start_DMA+0xa2>
 8007b20:	08007b69 	.word	0x08007b69
 8007b24:	08007d55 	.word	0x08007d55
 8007b28:	08007b79 	.word	0x08007b79
 8007b2c:	08007b89 	.word	0x08007b89
 8007b30:	08007d69 	.word	0x08007d69
 8007b34:	08007d79 	.word	0x08007d79

08007b38 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007b38:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007b3a:	6800      	ldr	r0, [r0, #0]
{
 8007b3c:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8007b3e:	2400      	movs	r4, #0
 8007b40:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8007b42:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8007b44:	b951      	cbnz	r1, 8007b5c <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007b46:	9901      	ldr	r1, [sp, #4]
 8007b48:	3108      	adds	r1, #8
 8007b4a:	440a      	add	r2, r1
 8007b4c:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007b4e:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8007b50:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8007b52:	6013      	str	r3, [r2, #0]
}
 8007b54:	b003      	add	sp, #12
 8007b56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b5a:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007b5c:	9901      	ldr	r1, [sp, #4]
 8007b5e:	3114      	adds	r1, #20
 8007b60:	440a      	add	r2, r1
 8007b62:	9201      	str	r2, [sp, #4]
 8007b64:	e7f3      	b.n	8007b4e <HAL_DAC_SetValue+0x16>
 8007b66:	bf00      	nop

08007b68 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007b68:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b6a:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f7fc fb11 	bl	8004194 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007b72:	2301      	movs	r3, #1
 8007b74:	7123      	strb	r3, [r4, #4]
}
 8007b76:	bd10      	pop	{r4, pc}

08007b78 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007b78:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8007b7a:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007b7c:	f7fc fb1c 	bl	80041b8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007b80:	bd08      	pop	{r3, pc}
 8007b82:	bf00      	nop

08007b84 <HAL_DAC_ErrorCallbackCh1>:
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop

08007b88 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007b88:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b8a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007b8c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007b8e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007b90:	f043 0304 	orr.w	r3, r3, #4
 8007b94:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007b96:	f7ff fff5 	bl	8007b84 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	7123      	strb	r3, [r4, #4]
}
 8007b9e:	bd10      	pop	{r4, pc}

08007ba0 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop

08007ba4 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8007ba4:	6803      	ldr	r3, [r0, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	0491      	lsls	r1, r2, #18
{
 8007baa:	b510      	push	{r4, lr}
 8007bac:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8007bae:	d502      	bpl.n	8007bb6 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8007bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bb2:	0492      	lsls	r2, r2, #18
 8007bb4:	d418      	bmi.n	8007be8 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	0091      	lsls	r1, r2, #2
 8007bba:	d502      	bpl.n	8007bc2 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8007bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bbe:	0092      	lsls	r2, r2, #2
 8007bc0:	d400      	bmi.n	8007bc4 <HAL_DAC_IRQHandler+0x20>
}
 8007bc2:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8007bc4:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007bc6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007bca:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8007bcc:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007bce:	6922      	ldr	r2, [r4, #16]
 8007bd0:	f042 0202 	orr.w	r2, r2, #2
 8007bd4:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007bd6:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8007bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007be2:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007be4:	f000 b8d4 	b.w	8007d90 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8007be8:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007bea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8007bee:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007bf0:	6902      	ldr	r2, [r0, #16]
 8007bf2:	f042 0201 	orr.w	r2, r2, #1
 8007bf6:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007bf8:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c00:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007c02:	f7ff ffcd 	bl	8007ba0 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	e7d5      	b.n	8007bb6 <HAL_DAC_IRQHandler+0x12>
 8007c0a:	bf00      	nop

08007c0c <HAL_DAC_ConfigChannel>:
{
 8007c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdac);
 8007c10:	7943      	ldrb	r3, [r0, #5]
{
 8007c12:	460d      	mov	r5, r1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8007c14:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	f000 808d 	beq.w	8007d36 <HAL_DAC_ConfigChannel+0x12a>
 8007c1c:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007c1e:	2904      	cmp	r1, #4
 8007c20:	4604      	mov	r4, r0
 8007c22:	4616      	mov	r6, r2
  __HAL_LOCK(hdac);
 8007c24:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8007c26:	f04f 0302 	mov.w	r3, #2
 8007c2a:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007c2c:	d045      	beq.n	8007cba <HAL_DAC_ConfigChannel+0xae>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007c2e:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 8007c32:	6800      	ldr	r0, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007c34:	692b      	ldr	r3, [r5, #16]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d108      	bne.n	8007c4c <HAL_DAC_ConfigChannel+0x40>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007c3a:	261f      	movs	r6, #31
    tmpreg1 = hdac->Instance->CCR;
 8007c3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007c3e:	4096      	lsls	r6, r2
 8007c40:	ea23 0606 	bic.w	r6, r3, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007c44:	696b      	ldr	r3, [r5, #20]
 8007c46:	4093      	lsls	r3, r2
 8007c48:	4333      	orrs	r3, r6
    hdac->Instance->CCR = tmpreg1;
 8007c4a:	6383      	str	r3, [r0, #56]	; 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007c4c:	2607      	movs	r6, #7
 8007c4e:	fa06 f302 	lsl.w	r3, r6, r2
  tmpreg1 = hdac->Instance->MCR;
 8007c52:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007c54:	ea26 0603 	bic.w	r6, r6, r3
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007c58:	e9d5 7302 	ldrd	r7, r3, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d028      	beq.n	8007cb2 <HAL_DAC_ConfigChannel+0xa6>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d028      	beq.n	8007cb6 <HAL_DAC_ConfigChannel+0xaa>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007c64:	fab7 f387 	clz	r3, r7
 8007c68:	095b      	lsrs	r3, r3, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007c6a:	433b      	orrs	r3, r7
 8007c6c:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007c6e:	6869      	ldr	r1, [r5, #4]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007c70:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007c74:	4093      	lsls	r3, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007c76:	4091      	lsls	r1, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007c78:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007c7a:	4333      	orrs	r3, r6
  hdac->Instance->MCR = tmpreg1;
 8007c7c:	63c3      	str	r3, [r0, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007c7e:	6803      	ldr	r3, [r0, #0]
 8007c80:	ea23 0305 	bic.w	r3, r3, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007c84:	f640 75fe 	movw	r5, #4094	; 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007c88:	6003      	str	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007c8a:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 8007c8c:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007c8e:	ea23 0305 	bic.w	r3, r3, r5
  hdac->State = HAL_DAC_STATE_READY;
 8007c92:	2501      	movs	r5, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007c94:	430b      	orrs	r3, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007c96:	21c0      	movs	r1, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 8007c98:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007c9a:	fa01 f302 	lsl.w	r3, r1, r2
 8007c9e:	6802      	ldr	r2, [r0, #0]
  __HAL_UNLOCK(hdac);
 8007ca0:	2100      	movs	r1, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007ca2:	ea22 0203 	bic.w	r2, r2, r3
 8007ca6:	6002      	str	r2, [r0, #0]
  return HAL_OK;
 8007ca8:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 8007caa:	7125      	strb	r5, [r4, #4]
  __HAL_UNLOCK(hdac);
 8007cac:	7161      	strb	r1, [r4, #5]
}
 8007cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e7d9      	b.n	8007c6a <HAL_DAC_ConfigChannel+0x5e>
    connectOnChip = DAC_MCR_MODE1_0;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e7d7      	b.n	8007c6a <HAL_DAC_ConfigChannel+0x5e>
    tickstart = HAL_GetTick();
 8007cba:	f7fe fc99 	bl	80065f0 <HAL_GetTick>
 8007cbe:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8007cc0:	b9c6      	cbnz	r6, 8007cf4 <HAL_DAC_ConfigChannel+0xe8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007cc2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8007d4c <HAL_DAC_ConfigChannel+0x140>
 8007cc6:	e004      	b.n	8007cd2 <HAL_DAC_ConfigChannel+0xc6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007cc8:	f7fe fc92 	bl	80065f0 <HAL_GetTick>
 8007ccc:	1bc3      	subs	r3, r0, r7
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d834      	bhi.n	8007d3c <HAL_DAC_ConfigChannel+0x130>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd6:	ea13 0f08 	tst.w	r3, r8
 8007cda:	d1f5      	bne.n	8007cc8 <HAL_DAC_ConfigChannel+0xbc>
      HAL_Delay(1);
 8007cdc:	2001      	movs	r0, #1
 8007cde:	f7fe fc8d 	bl	80065fc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007ce2:	6820      	ldr	r0, [r4, #0]
 8007ce4:	69ab      	ldr	r3, [r5, #24]
 8007ce6:	6403      	str	r3, [r0, #64]	; 0x40
 8007ce8:	e00e      	b.n	8007d08 <HAL_DAC_ConfigChannel+0xfc>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007cea:	f7fe fc81 	bl	80065f0 <HAL_GetTick>
 8007cee:	1bc3      	subs	r3, r0, r7
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d823      	bhi.n	8007d3c <HAL_DAC_ConfigChannel+0x130>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	dbf6      	blt.n	8007cea <HAL_DAC_ConfigChannel+0xde>
      HAL_Delay(1U);
 8007cfc:	2001      	movs	r0, #1
 8007cfe:	f7fe fc7d 	bl	80065fc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007d02:	6820      	ldr	r0, [r4, #0]
 8007d04:	69ab      	ldr	r3, [r5, #24]
 8007d06:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007d08:	f006 0210 	and.w	r2, r6, #16
 8007d0c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007d10:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007d12:	4091      	lsls	r1, r2
 8007d14:	ea23 0301 	bic.w	r3, r3, r1
 8007d18:	69e9      	ldr	r1, [r5, #28]
 8007d1a:	4091      	lsls	r1, r2
 8007d1c:	430b      	orrs	r3, r1
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007d1e:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007d20:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007d22:	4091      	lsls	r1, r2
 8007d24:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007d26:	ea23 0301 	bic.w	r3, r3, r1
 8007d2a:	6a29      	ldr	r1, [r5, #32]
 8007d2c:	4091      	lsls	r1, r2
 8007d2e:	430b      	orrs	r3, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007d30:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007d32:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007d34:	e77e      	b.n	8007c34 <HAL_DAC_ConfigChannel+0x28>
  __HAL_LOCK(hdac);
 8007d36:	2002      	movs	r0, #2
}
 8007d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007d3c:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007d3e:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007d40:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 8007d44:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007d46:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007d48:	7122      	strb	r2, [r4, #4]
          return HAL_TIMEOUT;
 8007d4a:	e7b0      	b.n	8007cae <HAL_DAC_ConfigChannel+0xa2>
 8007d4c:	20008000 	.word	0x20008000

08007d50 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop

08007d54 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007d54:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d56:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f7ff fff9 	bl	8007d50 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	7123      	strb	r3, [r4, #4]
}
 8007d62:	bd10      	pop	{r4, pc}

08007d64 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop

08007d68 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007d68:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8007d6a:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007d6c:	f7ff fffa 	bl	8007d64 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007d70:	bd08      	pop	{r3, pc}
 8007d72:	bf00      	nop

08007d74 <HAL_DACEx_ErrorCallbackCh2>:
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop

08007d78 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007d78:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d7a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007d7c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007d7e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007d80:	f043 0304 	orr.w	r3, r3, #4
 8007d84:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007d86:	f7ff fff5 	bl	8007d74 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	7123      	strb	r3, [r4, #4]
}
 8007d8e:	bd10      	pop	{r4, pc}

08007d90 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop

08007d94 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d94:	6802      	ldr	r2, [r0, #0]
 8007d96:	4b34      	ldr	r3, [pc, #208]	; (8007e68 <DMA_CalcBaseAndBitshift+0xd4>)
 8007d98:	4934      	ldr	r1, [pc, #208]	; (8007e6c <DMA_CalcBaseAndBitshift+0xd8>)
{
 8007d9a:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d9c:	4d34      	ldr	r5, [pc, #208]	; (8007e70 <DMA_CalcBaseAndBitshift+0xdc>)
 8007d9e:	4c35      	ldr	r4, [pc, #212]	; (8007e74 <DMA_CalcBaseAndBitshift+0xe0>)
 8007da0:	42aa      	cmp	r2, r5
 8007da2:	bf18      	it	ne
 8007da4:	429a      	cmpne	r2, r3
 8007da6:	bf0c      	ite	eq
 8007da8:	2301      	moveq	r3, #1
 8007daa:	2300      	movne	r3, #0
 8007dac:	428a      	cmp	r2, r1
 8007dae:	bf08      	it	eq
 8007db0:	f043 0301 	orreq.w	r3, r3, #1
 8007db4:	3130      	adds	r1, #48	; 0x30
 8007db6:	42a2      	cmp	r2, r4
 8007db8:	bf08      	it	eq
 8007dba:	f043 0301 	orreq.w	r3, r3, #1
 8007dbe:	3430      	adds	r4, #48	; 0x30
 8007dc0:	428a      	cmp	r2, r1
 8007dc2:	bf08      	it	eq
 8007dc4:	f043 0301 	orreq.w	r3, r3, #1
 8007dc8:	3130      	adds	r1, #48	; 0x30
 8007dca:	42a2      	cmp	r2, r4
 8007dcc:	bf08      	it	eq
 8007dce:	f043 0301 	orreq.w	r3, r3, #1
 8007dd2:	3430      	adds	r4, #48	; 0x30
 8007dd4:	428a      	cmp	r2, r1
 8007dd6:	bf08      	it	eq
 8007dd8:	f043 0301 	orreq.w	r3, r3, #1
 8007ddc:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8007de0:	42a2      	cmp	r2, r4
 8007de2:	bf08      	it	eq
 8007de4:	f043 0301 	orreq.w	r3, r3, #1
 8007de8:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8007dec:	428a      	cmp	r2, r1
 8007dee:	bf08      	it	eq
 8007df0:	f043 0301 	orreq.w	r3, r3, #1
 8007df4:	3130      	adds	r1, #48	; 0x30
 8007df6:	42a2      	cmp	r2, r4
 8007df8:	bf08      	it	eq
 8007dfa:	f043 0301 	orreq.w	r3, r3, #1
 8007dfe:	3430      	adds	r4, #48	; 0x30
 8007e00:	428a      	cmp	r2, r1
 8007e02:	bf08      	it	eq
 8007e04:	f043 0301 	orreq.w	r3, r3, #1
 8007e08:	3130      	adds	r1, #48	; 0x30
 8007e0a:	42a2      	cmp	r2, r4
 8007e0c:	bf08      	it	eq
 8007e0e:	f043 0301 	orreq.w	r3, r3, #1
 8007e12:	3430      	adds	r4, #48	; 0x30
 8007e14:	428a      	cmp	r2, r1
 8007e16:	bf08      	it	eq
 8007e18:	f043 0301 	orreq.w	r3, r3, #1
 8007e1c:	3130      	adds	r1, #48	; 0x30
 8007e1e:	42a2      	cmp	r2, r4
 8007e20:	bf08      	it	eq
 8007e22:	f043 0301 	orreq.w	r3, r3, #1
 8007e26:	428a      	cmp	r2, r1
 8007e28:	bf08      	it	eq
 8007e2a:	f043 0301 	orreq.w	r3, r3, #1
 8007e2e:	b913      	cbnz	r3, 8007e36 <DMA_CalcBaseAndBitshift+0xa2>
 8007e30:	4b11      	ldr	r3, [pc, #68]	; (8007e78 <DMA_CalcBaseAndBitshift+0xe4>)
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d113      	bne.n	8007e5e <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007e36:	b2d3      	uxtb	r3, r2
 8007e38:	4910      	ldr	r1, [pc, #64]	; (8007e7c <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007e3a:	4c11      	ldr	r4, [pc, #68]	; (8007e80 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007e3c:	3b10      	subs	r3, #16
 8007e3e:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 8007e42:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007e44:	4b0f      	ldr	r3, [pc, #60]	; (8007e84 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007e46:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007e4a:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007e4e:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007e50:	bf88      	it	hi
 8007e52:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007e54:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007e56:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	bc30      	pop	{r4, r5}
 8007e5c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007e5e:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8007e62:	6583      	str	r3, [r0, #88]	; 0x58
 8007e64:	e7f8      	b.n	8007e58 <DMA_CalcBaseAndBitshift+0xc4>
 8007e66:	bf00      	nop
 8007e68:	40020010 	.word	0x40020010
 8007e6c:	40020040 	.word	0x40020040
 8007e70:	40020028 	.word	0x40020028
 8007e74:	40020058 	.word	0x40020058
 8007e78:	400204b8 	.word	0x400204b8
 8007e7c:	aaaaaaab 	.word	0xaaaaaaab
 8007e80:	0801af4c 	.word	0x0801af4c
 8007e84:	fffffc00 	.word	0xfffffc00

08007e88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007e88:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007e8a:	4a29      	ldr	r2, [pc, #164]	; (8007f30 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8007e8c:	4929      	ldr	r1, [pc, #164]	; (8007f34 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 8007e8e:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007e90:	4d29      	ldr	r5, [pc, #164]	; (8007f38 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8007e92:	4c2a      	ldr	r4, [pc, #168]	; (8007f3c <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8007e94:	42ab      	cmp	r3, r5
 8007e96:	bf18      	it	ne
 8007e98:	4293      	cmpne	r3, r2
 8007e9a:	bf0c      	ite	eq
 8007e9c:	2201      	moveq	r2, #1
 8007e9e:	2200      	movne	r2, #0
 8007ea0:	428b      	cmp	r3, r1
 8007ea2:	bf08      	it	eq
 8007ea4:	f042 0201 	orreq.w	r2, r2, #1
 8007ea8:	3128      	adds	r1, #40	; 0x28
 8007eaa:	42a3      	cmp	r3, r4
 8007eac:	bf08      	it	eq
 8007eae:	f042 0201 	orreq.w	r2, r2, #1
 8007eb2:	3428      	adds	r4, #40	; 0x28
 8007eb4:	428b      	cmp	r3, r1
 8007eb6:	bf08      	it	eq
 8007eb8:	f042 0201 	orreq.w	r2, r2, #1
 8007ebc:	3128      	adds	r1, #40	; 0x28
 8007ebe:	42a3      	cmp	r3, r4
 8007ec0:	bf08      	it	eq
 8007ec2:	f042 0201 	orreq.w	r2, r2, #1
 8007ec6:	428b      	cmp	r3, r1
 8007ec8:	bf08      	it	eq
 8007eca:	f042 0201 	orreq.w	r2, r2, #1
 8007ece:	b912      	cbnz	r2, 8007ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8007ed0:	4a1b      	ldr	r2, [pc, #108]	; (8007f40 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d113      	bne.n	8007efe <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	4c1a      	ldr	r4, [pc, #104]	; (8007f44 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007eda:	4a1b      	ldr	r2, [pc, #108]	; (8007f48 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007edc:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007ede:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007ee0:	4d1a      	ldr	r5, [pc, #104]	; (8007f4c <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007ee2:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007ee6:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007ee8:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007eec:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007ef0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007ef2:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007ef6:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007ef8:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007efa:	bc30      	pop	{r4, r5}
 8007efc:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007efe:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007f00:	4913      	ldr	r1, [pc, #76]	; (8007f50 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007f02:	4c14      	ldr	r4, [pc, #80]	; (8007f54 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007f04:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007f06:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007f08:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007f0a:	fba4 2302 	umull	r2, r3, r4, r2
 8007f0e:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007f12:	d800      	bhi.n	8007f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8007f14:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007f16:	4a10      	ldr	r2, [pc, #64]	; (8007f58 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007f18:	f003 051f 	and.w	r5, r3, #31
 8007f1c:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007f1e:	4c0f      	ldr	r4, [pc, #60]	; (8007f5c <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007f20:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007f22:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007f24:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007f26:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007f28:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007f2a:	6602      	str	r2, [r0, #96]	; 0x60
}
 8007f2c:	e7e5      	b.n	8007efa <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 8007f2e:	bf00      	nop
 8007f30:	58025408 	.word	0x58025408
 8007f34:	58025430 	.word	0x58025430
 8007f38:	5802541c 	.word	0x5802541c
 8007f3c:	58025444 	.word	0x58025444
 8007f40:	58025494 	.word	0x58025494
 8007f44:	cccccccd 	.word	0xcccccccd
 8007f48:	16009600 	.word	0x16009600
 8007f4c:	58025880 	.word	0x58025880
 8007f50:	bffdfbf0 	.word	0xbffdfbf0
 8007f54:	aaaaaaab 	.word	0xaaaaaaab
 8007f58:	10008200 	.word	0x10008200
 8007f5c:	40020880 	.word	0x40020880

08007f60 <HAL_DMA_Init>:
{
 8007f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007f64:	f7fe fb44 	bl	80065f0 <HAL_GetTick>
  if(hdma == NULL)
 8007f68:	2c00      	cmp	r4, #0
 8007f6a:	f000 8177 	beq.w	800825c <HAL_DMA_Init+0x2fc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	4605      	mov	r5, r0
 8007f72:	4a92      	ldr	r2, [pc, #584]	; (80081bc <HAL_DMA_Init+0x25c>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d048      	beq.n	800800a <HAL_DMA_Init+0xaa>
 8007f78:	3218      	adds	r2, #24
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d045      	beq.n	800800a <HAL_DMA_Init+0xaa>
 8007f7e:	3230      	adds	r2, #48	; 0x30
 8007f80:	498f      	ldr	r1, [pc, #572]	; (80081c0 <HAL_DMA_Init+0x260>)
 8007f82:	428b      	cmp	r3, r1
 8007f84:	bf18      	it	ne
 8007f86:	4293      	cmpne	r3, r2
 8007f88:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007f8c:	bf0c      	ite	eq
 8007f8e:	2201      	moveq	r2, #1
 8007f90:	2200      	movne	r2, #0
 8007f92:	428b      	cmp	r3, r1
 8007f94:	bf08      	it	eq
 8007f96:	f042 0201 	orreq.w	r2, r2, #1
 8007f9a:	3118      	adds	r1, #24
 8007f9c:	428b      	cmp	r3, r1
 8007f9e:	bf08      	it	eq
 8007fa0:	f042 0201 	orreq.w	r2, r2, #1
 8007fa4:	3118      	adds	r1, #24
 8007fa6:	428b      	cmp	r3, r1
 8007fa8:	bf08      	it	eq
 8007faa:	f042 0201 	orreq.w	r2, r2, #1
 8007fae:	3118      	adds	r1, #24
 8007fb0:	428b      	cmp	r3, r1
 8007fb2:	bf08      	it	eq
 8007fb4:	f042 0201 	orreq.w	r2, r2, #1
 8007fb8:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8007fbc:	428b      	cmp	r3, r1
 8007fbe:	bf08      	it	eq
 8007fc0:	f042 0201 	orreq.w	r2, r2, #1
 8007fc4:	3118      	adds	r1, #24
 8007fc6:	428b      	cmp	r3, r1
 8007fc8:	bf08      	it	eq
 8007fca:	f042 0201 	orreq.w	r2, r2, #1
 8007fce:	3118      	adds	r1, #24
 8007fd0:	428b      	cmp	r3, r1
 8007fd2:	bf08      	it	eq
 8007fd4:	f042 0201 	orreq.w	r2, r2, #1
 8007fd8:	3118      	adds	r1, #24
 8007fda:	428b      	cmp	r3, r1
 8007fdc:	bf08      	it	eq
 8007fde:	f042 0201 	orreq.w	r2, r2, #1
 8007fe2:	3118      	adds	r1, #24
 8007fe4:	428b      	cmp	r3, r1
 8007fe6:	bf08      	it	eq
 8007fe8:	f042 0201 	orreq.w	r2, r2, #1
 8007fec:	3118      	adds	r1, #24
 8007fee:	428b      	cmp	r3, r1
 8007ff0:	bf08      	it	eq
 8007ff2:	f042 0201 	orreq.w	r2, r2, #1
 8007ff6:	3118      	adds	r1, #24
 8007ff8:	428b      	cmp	r3, r1
 8007ffa:	bf08      	it	eq
 8007ffc:	f042 0201 	orreq.w	r2, r2, #1
 8008000:	b91a      	cbnz	r2, 800800a <HAL_DMA_Init+0xaa>
 8008002:	4a70      	ldr	r2, [pc, #448]	; (80081c4 <HAL_DMA_Init+0x264>)
 8008004:	4293      	cmp	r3, r2
 8008006:	f040 8198 	bne.w	800833a <HAL_DMA_Init+0x3da>
    __HAL_UNLOCK(hdma);
 800800a:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800800c:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 800800e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8008012:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	f022 0201 	bic.w	r2, r2, #1
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	e006      	b.n	800802e <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008020:	f7fe fae6 	bl	80065f0 <HAL_GetTick>
 8008024:	1b43      	subs	r3, r0, r5
 8008026:	2b05      	cmp	r3, #5
 8008028:	f200 80ff 	bhi.w	800822a <HAL_DMA_Init+0x2ca>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	07d6      	lsls	r6, r2, #31
 8008032:	d4f5      	bmi.n	8008020 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8008034:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008038:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800803a:	432a      	orrs	r2, r5
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800803c:	69a1      	ldr	r1, [r4, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800803e:	681d      	ldr	r5, [r3, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008040:	4302      	orrs	r2, r0
 8008042:	6960      	ldr	r0, [r4, #20]
 8008044:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008046:	69e0      	ldr	r0, [r4, #28]
 8008048:	430a      	orrs	r2, r1
 800804a:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800804c:	485e      	ldr	r0, [pc, #376]	; (80081c8 <HAL_DMA_Init+0x268>)
 800804e:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 8008050:	6a25      	ldr	r5, [r4, #32]
 8008052:	432a      	orrs	r2, r5
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8008054:	4d5d      	ldr	r5, [pc, #372]	; (80081cc <HAL_DMA_Init+0x26c>)
    registerValue |=  hdma->Init.Direction           |
 8008056:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008058:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800805a:	2804      	cmp	r0, #4
 800805c:	f000 8100 	beq.w	8008260 <HAL_DMA_Init+0x300>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8008060:	682e      	ldr	r6, [r5, #0]
 8008062:	4d5b      	ldr	r5, [pc, #364]	; (80081d0 <HAL_DMA_Init+0x270>)
 8008064:	4035      	ands	r5, r6
 8008066:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 800806a:	f080 80bb 	bcs.w	80081e4 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800806e:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008070:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008072:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8008076:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8008078:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800807a:	4620      	mov	r0, r4
 800807c:	f7ff fe8a 	bl	8007d94 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008080:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008082:	233f      	movs	r3, #63	; 0x3f
 8008084:	f002 021f 	and.w	r2, r2, #31
 8008088:	4093      	lsls	r3, r2
 800808a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800808c:	6822      	ldr	r2, [r4, #0]
 800808e:	4b4b      	ldr	r3, [pc, #300]	; (80081bc <HAL_DMA_Init+0x25c>)
 8008090:	4850      	ldr	r0, [pc, #320]	; (80081d4 <HAL_DMA_Init+0x274>)
 8008092:	494b      	ldr	r1, [pc, #300]	; (80081c0 <HAL_DMA_Init+0x260>)
 8008094:	4282      	cmp	r2, r0
 8008096:	bf18      	it	ne
 8008098:	429a      	cmpne	r2, r3
 800809a:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800809e:	bf0c      	ite	eq
 80080a0:	2301      	moveq	r3, #1
 80080a2:	2300      	movne	r3, #0
 80080a4:	428a      	cmp	r2, r1
 80080a6:	bf08      	it	eq
 80080a8:	f043 0301 	orreq.w	r3, r3, #1
 80080ac:	3130      	adds	r1, #48	; 0x30
 80080ae:	4282      	cmp	r2, r0
 80080b0:	bf08      	it	eq
 80080b2:	f043 0301 	orreq.w	r3, r3, #1
 80080b6:	3030      	adds	r0, #48	; 0x30
 80080b8:	428a      	cmp	r2, r1
 80080ba:	bf08      	it	eq
 80080bc:	f043 0301 	orreq.w	r3, r3, #1
 80080c0:	3130      	adds	r1, #48	; 0x30
 80080c2:	4282      	cmp	r2, r0
 80080c4:	bf08      	it	eq
 80080c6:	f043 0301 	orreq.w	r3, r3, #1
 80080ca:	3030      	adds	r0, #48	; 0x30
 80080cc:	428a      	cmp	r2, r1
 80080ce:	bf08      	it	eq
 80080d0:	f043 0301 	orreq.w	r3, r3, #1
 80080d4:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80080d8:	4282      	cmp	r2, r0
 80080da:	bf08      	it	eq
 80080dc:	f043 0301 	orreq.w	r3, r3, #1
 80080e0:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80080e4:	428a      	cmp	r2, r1
 80080e6:	bf08      	it	eq
 80080e8:	f043 0301 	orreq.w	r3, r3, #1
 80080ec:	3130      	adds	r1, #48	; 0x30
 80080ee:	4282      	cmp	r2, r0
 80080f0:	bf08      	it	eq
 80080f2:	f043 0301 	orreq.w	r3, r3, #1
 80080f6:	3030      	adds	r0, #48	; 0x30
 80080f8:	428a      	cmp	r2, r1
 80080fa:	bf08      	it	eq
 80080fc:	f043 0301 	orreq.w	r3, r3, #1
 8008100:	3130      	adds	r1, #48	; 0x30
 8008102:	4282      	cmp	r2, r0
 8008104:	bf08      	it	eq
 8008106:	f043 0301 	orreq.w	r3, r3, #1
 800810a:	3030      	adds	r0, #48	; 0x30
 800810c:	428a      	cmp	r2, r1
 800810e:	bf08      	it	eq
 8008110:	f043 0301 	orreq.w	r3, r3, #1
 8008114:	3130      	adds	r1, #48	; 0x30
 8008116:	4282      	cmp	r2, r0
 8008118:	bf08      	it	eq
 800811a:	f043 0301 	orreq.w	r3, r3, #1
 800811e:	3030      	adds	r0, #48	; 0x30
 8008120:	428a      	cmp	r2, r1
 8008122:	bf08      	it	eq
 8008124:	f043 0301 	orreq.w	r3, r3, #1
 8008128:	492b      	ldr	r1, [pc, #172]	; (80081d8 <HAL_DMA_Init+0x278>)
 800812a:	4282      	cmp	r2, r0
 800812c:	bf08      	it	eq
 800812e:	f043 0301 	orreq.w	r3, r3, #1
 8008132:	482a      	ldr	r0, [pc, #168]	; (80081dc <HAL_DMA_Init+0x27c>)
 8008134:	428a      	cmp	r2, r1
 8008136:	bf08      	it	eq
 8008138:	f043 0301 	orreq.w	r3, r3, #1
 800813c:	3128      	adds	r1, #40	; 0x28
 800813e:	4282      	cmp	r2, r0
 8008140:	bf08      	it	eq
 8008142:	f043 0301 	orreq.w	r3, r3, #1
 8008146:	3028      	adds	r0, #40	; 0x28
 8008148:	428a      	cmp	r2, r1
 800814a:	bf08      	it	eq
 800814c:	f043 0301 	orreq.w	r3, r3, #1
 8008150:	3128      	adds	r1, #40	; 0x28
 8008152:	4282      	cmp	r2, r0
 8008154:	bf08      	it	eq
 8008156:	f043 0301 	orreq.w	r3, r3, #1
 800815a:	3028      	adds	r0, #40	; 0x28
 800815c:	428a      	cmp	r2, r1
 800815e:	bf08      	it	eq
 8008160:	f043 0301 	orreq.w	r3, r3, #1
 8008164:	3128      	adds	r1, #40	; 0x28
 8008166:	4282      	cmp	r2, r0
 8008168:	bf08      	it	eq
 800816a:	f043 0301 	orreq.w	r3, r3, #1
 800816e:	428a      	cmp	r2, r1
 8008170:	bf08      	it	eq
 8008172:	f043 0301 	orreq.w	r3, r3, #1
 8008176:	b913      	cbnz	r3, 800817e <HAL_DMA_Init+0x21e>
 8008178:	4b19      	ldr	r3, [pc, #100]	; (80081e0 <HAL_DMA_Init+0x280>)
 800817a:	429a      	cmp	r2, r3
 800817c:	d118      	bne.n	80081b0 <HAL_DMA_Init+0x250>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800817e:	4620      	mov	r0, r4
 8008180:	f7ff fe82 	bl	8007e88 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008184:	68a3      	ldr	r3, [r4, #8]
 8008186:	2b80      	cmp	r3, #128	; 0x80
 8008188:	d05c      	beq.n	8008244 <HAL_DMA_Init+0x2e4>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800818a:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800818c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800818e:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008190:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008192:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008196:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008198:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800819a:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800819c:	d859      	bhi.n	8008252 <HAL_DMA_Init+0x2f2>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800819e:	1e50      	subs	r0, r2, #1
 80081a0:	2807      	cmp	r0, #7
 80081a2:	d96e      	bls.n	8008282 <HAL_DMA_Init+0x322>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80081a4:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80081a6:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80081aa:	2000      	movs	r0, #0
 80081ac:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80081ae:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081b0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80081b2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081b4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80081b6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80081ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081bc:	40020010 	.word	0x40020010
 80081c0:	40020040 	.word	0x40020040
 80081c4:	400204b8 	.word	0x400204b8
 80081c8:	fe10803f 	.word	0xfe10803f
 80081cc:	5c001000 	.word	0x5c001000
 80081d0:	ffff0000 	.word	0xffff0000
 80081d4:	40020028 	.word	0x40020028
 80081d8:	58025408 	.word	0x58025408
 80081dc:	5802541c 	.word	0x5802541c
 80081e0:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80081e4:	6865      	ldr	r5, [r4, #4]
 80081e6:	f1a5 0629 	sub.w	r6, r5, #41	; 0x29
 80081ea:	2e1f      	cmp	r6, #31
 80081ec:	d924      	bls.n	8008238 <HAL_DMA_Init+0x2d8>
 80081ee:	3d4f      	subs	r5, #79	; 0x4f
 80081f0:	2d03      	cmp	r5, #3
 80081f2:	d801      	bhi.n	80081f8 <HAL_DMA_Init+0x298>
        registerValue |= DMA_SxCR_TRBUFF;
 80081f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80081f8:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80081fa:	2804      	cmp	r0, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80081fc:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80081fe:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8008202:	ea42 0200 	orr.w	r2, r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008206:	f47f af37 	bne.w	8008078 <HAL_DMA_Init+0x118>
 800820a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800820c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800820e:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008210:	2d00      	cmp	r5, #0
 8008212:	f43f af31 	beq.w	8008078 <HAL_DMA_Init+0x118>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008216:	2900      	cmp	r1, #0
 8008218:	d169      	bne.n	80082ee <HAL_DMA_Init+0x38e>
    switch (hdma->Init.FIFOThreshold)
 800821a:	2801      	cmp	r0, #1
 800821c:	f000 8088 	beq.w	8008330 <HAL_DMA_Init+0x3d0>
 8008220:	f030 0102 	bics.w	r1, r0, #2
 8008224:	f47f af28 	bne.w	8008078 <HAL_DMA_Init+0x118>
 8008228:	e069      	b.n	80082fe <HAL_DMA_Init+0x39e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800822a:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800822c:	2303      	movs	r3, #3
        return HAL_ERROR;
 800822e:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008230:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8008232:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8008238:	4d73      	ldr	r5, [pc, #460]	; (8008408 <HAL_DMA_Init+0x4a8>)
 800823a:	fa25 f606 	lsr.w	r6, r5, r6
 800823e:	07f5      	lsls	r5, r6, #31
 8008240:	d5da      	bpl.n	80081f8 <HAL_DMA_Init+0x298>
 8008242:	e7d7      	b.n	80081f4 <HAL_DMA_Init+0x294>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008244:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008246:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8008248:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800824c:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800824e:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008250:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8008252:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8008254:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008258:	6763      	str	r3, [r4, #116]	; 0x74
 800825a:	e7a9      	b.n	80081b0 <HAL_DMA_Init+0x250>
    return HAL_ERROR;
 800825c:	2001      	movs	r0, #1
}
 800825e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8008260:	682f      	ldr	r7, [r5, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008262:	e9d4 560b 	ldrd	r5, r6, [r4, #44]	; 0x2c
 8008266:	432e      	orrs	r6, r5
 8008268:	4332      	orrs	r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800826a:	4e68      	ldr	r6, [pc, #416]	; (800840c <HAL_DMA_Init+0x4ac>)
 800826c:	403e      	ands	r6, r7
 800826e:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 8008272:	d2b7      	bcs.n	80081e4 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8008274:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008276:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008278:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800827c:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008280:	e7c4      	b.n	800820c <HAL_DMA_Init+0x2ac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008282:	6821      	ldr	r1, [r4, #0]
 8008284:	4b62      	ldr	r3, [pc, #392]	; (8008410 <HAL_DMA_Init+0x4b0>)
 8008286:	4d63      	ldr	r5, [pc, #396]	; (8008414 <HAL_DMA_Init+0x4b4>)
 8008288:	42a9      	cmp	r1, r5
 800828a:	bf18      	it	ne
 800828c:	4299      	cmpne	r1, r3
 800828e:	f105 0514 	add.w	r5, r5, #20
 8008292:	bf0c      	ite	eq
 8008294:	2301      	moveq	r3, #1
 8008296:	2300      	movne	r3, #0
 8008298:	42a9      	cmp	r1, r5
 800829a:	bf08      	it	eq
 800829c:	f043 0301 	orreq.w	r3, r3, #1
 80082a0:	3514      	adds	r5, #20
 80082a2:	42a9      	cmp	r1, r5
 80082a4:	bf08      	it	eq
 80082a6:	f043 0301 	orreq.w	r3, r3, #1
 80082aa:	3514      	adds	r5, #20
 80082ac:	42a9      	cmp	r1, r5
 80082ae:	bf08      	it	eq
 80082b0:	f043 0301 	orreq.w	r3, r3, #1
 80082b4:	3514      	adds	r5, #20
 80082b6:	42a9      	cmp	r1, r5
 80082b8:	bf08      	it	eq
 80082ba:	f043 0301 	orreq.w	r3, r3, #1
 80082be:	3514      	adds	r5, #20
 80082c0:	42a9      	cmp	r1, r5
 80082c2:	bf08      	it	eq
 80082c4:	f043 0301 	orreq.w	r3, r3, #1
 80082c8:	b93b      	cbnz	r3, 80082da <HAL_DMA_Init+0x37a>
 80082ca:	4b53      	ldr	r3, [pc, #332]	; (8008418 <HAL_DMA_Init+0x4b8>)
 80082cc:	4299      	cmp	r1, r3
 80082ce:	d004      	beq.n	80082da <HAL_DMA_Init+0x37a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80082d0:	4b52      	ldr	r3, [pc, #328]	; (800841c <HAL_DMA_Init+0x4bc>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80082d2:	4953      	ldr	r1, [pc, #332]	; (8008420 <HAL_DMA_Init+0x4c0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80082d4:	4413      	add	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80082d8:	e003      	b.n	80082e2 <HAL_DMA_Init+0x382>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80082da:	4b52      	ldr	r3, [pc, #328]	; (8008424 <HAL_DMA_Init+0x4c4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80082dc:	4952      	ldr	r1, [pc, #328]	; (8008428 <HAL_DMA_Init+0x4c8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80082e2:	2201      	movs	r2, #1
 80082e4:	4082      	lsls	r2, r0
 80082e6:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 80082ea:	6762      	str	r2, [r4, #116]	; 0x74
 80082ec:	e75d      	b.n	80081aa <HAL_DMA_Init+0x24a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082ee:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80082f2:	d00e      	beq.n	8008312 <HAL_DMA_Init+0x3b2>
    switch (hdma->Init.FIFOThreshold)
 80082f4:	2802      	cmp	r0, #2
 80082f6:	d905      	bls.n	8008304 <HAL_DMA_Init+0x3a4>
 80082f8:	2803      	cmp	r0, #3
 80082fa:	f47f aebd 	bne.w	8008078 <HAL_DMA_Init+0x118>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082fe:	01e9      	lsls	r1, r5, #7
 8008300:	f57f aeba 	bpl.w	8008078 <HAL_DMA_Init+0x118>
          hdma->State = HAL_DMA_STATE_READY;
 8008304:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008306:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8008308:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800830a:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800830c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 8008312:	2803      	cmp	r0, #3
 8008314:	f63f aeb0 	bhi.w	8008078 <HAL_DMA_Init+0x118>
 8008318:	a101      	add	r1, pc, #4	; (adr r1, 8008320 <HAL_DMA_Init+0x3c0>)
 800831a:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 800831e:	bf00      	nop
 8008320:	08008305 	.word	0x08008305
 8008324:	080082ff 	.word	0x080082ff
 8008328:	08008305 	.word	0x08008305
 800832c:	08008331 	.word	0x08008331
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008330:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8008334:	f47f aea0 	bne.w	8008078 <HAL_DMA_Init+0x118>
 8008338:	e7e4      	b.n	8008304 <HAL_DMA_Init+0x3a4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800833a:	4a35      	ldr	r2, [pc, #212]	; (8008410 <HAL_DMA_Init+0x4b0>)
 800833c:	4835      	ldr	r0, [pc, #212]	; (8008414 <HAL_DMA_Init+0x4b4>)
 800833e:	493b      	ldr	r1, [pc, #236]	; (800842c <HAL_DMA_Init+0x4cc>)
 8008340:	4283      	cmp	r3, r0
 8008342:	bf18      	it	ne
 8008344:	4293      	cmpne	r3, r2
 8008346:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800834a:	bf0c      	ite	eq
 800834c:	2201      	moveq	r2, #1
 800834e:	2200      	movne	r2, #0
 8008350:	428b      	cmp	r3, r1
 8008352:	bf08      	it	eq
 8008354:	f042 0201 	orreq.w	r2, r2, #1
 8008358:	3128      	adds	r1, #40	; 0x28
 800835a:	4283      	cmp	r3, r0
 800835c:	bf08      	it	eq
 800835e:	f042 0201 	orreq.w	r2, r2, #1
 8008362:	3028      	adds	r0, #40	; 0x28
 8008364:	428b      	cmp	r3, r1
 8008366:	bf08      	it	eq
 8008368:	f042 0201 	orreq.w	r2, r2, #1
 800836c:	3128      	adds	r1, #40	; 0x28
 800836e:	4283      	cmp	r3, r0
 8008370:	bf08      	it	eq
 8008372:	f042 0201 	orreq.w	r2, r2, #1
 8008376:	428b      	cmp	r3, r1
 8008378:	bf08      	it	eq
 800837a:	f042 0201 	orreq.w	r2, r2, #1
 800837e:	b912      	cbnz	r2, 8008386 <HAL_DMA_Init+0x426>
 8008380:	4a25      	ldr	r2, [pc, #148]	; (8008418 <HAL_DMA_Init+0x4b8>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d138      	bne.n	80083f8 <HAL_DMA_Init+0x498>
    __HAL_UNLOCK(hdma);
 8008386:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8008388:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800838a:	4d29      	ldr	r5, [pc, #164]	; (8008430 <HAL_DMA_Init+0x4d0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800838c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8008390:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8008394:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8008396:	4015      	ands	r5, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008398:	68a2      	ldr	r2, [r4, #8]
 800839a:	2a40      	cmp	r2, #64	; 0x40
 800839c:	d02a      	beq.n	80083f4 <HAL_DMA_Init+0x494>
 800839e:	2a80      	cmp	r2, #128	; 0x80
 80083a0:	bf0c      	ite	eq
 80083a2:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 80083a6:	2000      	movne	r0, #0
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80083a8:	6a26      	ldr	r6, [r4, #32]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80083aa:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80083ae:	08d2      	lsrs	r2, r2, #3
 80083b0:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80083b4:	6961      	ldr	r1, [r4, #20]
 80083b6:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80083ba:	69a1      	ldr	r1, [r4, #24]
 80083bc:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80083c0:	69e1      	ldr	r1, [r4, #28]
 80083c2:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80083c6:	491b      	ldr	r1, [pc, #108]	; (8008434 <HAL_DMA_Init+0x4d4>)
 80083c8:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 80083cc:	4419      	add	r1, r3
 80083ce:	432a      	orrs	r2, r5
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80083d0:	4302      	orrs	r2, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80083d2:	4819      	ldr	r0, [pc, #100]	; (8008438 <HAL_DMA_Init+0x4d8>)
 80083d4:	fba0 0101 	umull	r0, r1, r0, r1
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80083d8:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80083da:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80083dc:	090b      	lsrs	r3, r1, #4
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80083e2:	f7ff fcd7 	bl	8007d94 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80083e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80083e8:	2301      	movs	r3, #1
 80083ea:	f002 021f 	and.w	r2, r2, #31
 80083ee:	4093      	lsls	r3, r2
 80083f0:	6043      	str	r3, [r0, #4]
 80083f2:	e64b      	b.n	800808c <HAL_DMA_Init+0x12c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80083f4:	2010      	movs	r0, #16
 80083f6:	e7d7      	b.n	80083a8 <HAL_DMA_Init+0x448>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80083f8:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80083fa:	2303      	movs	r3, #3
    return HAL_ERROR;
 80083fc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80083fe:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008400:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008406:	bf00      	nop
 8008408:	c3c0003f 	.word	0xc3c0003f
 800840c:	ffff0000 	.word	0xffff0000
 8008410:	58025408 	.word	0x58025408
 8008414:	5802541c 	.word	0x5802541c
 8008418:	58025494 	.word	0x58025494
 800841c:	1000823f 	.word	0x1000823f
 8008420:	40020940 	.word	0x40020940
 8008424:	1600963f 	.word	0x1600963f
 8008428:	58025940 	.word	0x58025940
 800842c:	58025430 	.word	0x58025430
 8008430:	fffe000f 	.word	0xfffe000f
 8008434:	a7fdabf8 	.word	0xa7fdabf8
 8008438:	cccccccd 	.word	0xcccccccd

0800843c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800843c:	2800      	cmp	r0, #0
 800843e:	f000 8177 	beq.w	8008730 <HAL_DMA_Start_IT+0x2f4>
 8008442:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8008444:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8008448:	2801      	cmp	r0, #1
 800844a:	f000 8173 	beq.w	8008734 <HAL_DMA_Start_IT+0x2f8>
 800844e:	2001      	movs	r0, #1
{
 8008450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 8008454:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8008458:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800845c:	4284      	cmp	r4, r0
 800845e:	d008      	beq.n	8008472 <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008460:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8008464:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008466:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800846a:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 800846e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8008472:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8008474:	f8dc 4000 	ldr.w	r4, [ip]
 8008478:	4d53      	ldr	r5, [pc, #332]	; (80085c8 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800847a:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800847e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8008480:	4e52      	ldr	r6, [pc, #328]	; (80085cc <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008482:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8008486:	4852      	ldr	r0, [pc, #328]	; (80085d0 <HAL_DMA_Start_IT+0x194>)
 8008488:	42ac      	cmp	r4, r5
 800848a:	bf18      	it	ne
 800848c:	4284      	cmpne	r4, r0
 800848e:	f105 0518 	add.w	r5, r5, #24
 8008492:	bf0c      	ite	eq
 8008494:	2001      	moveq	r0, #1
 8008496:	2000      	movne	r0, #0
 8008498:	42ac      	cmp	r4, r5
 800849a:	bf08      	it	eq
 800849c:	f040 0001 	orreq.w	r0, r0, #1
 80084a0:	3518      	adds	r5, #24
 80084a2:	42ac      	cmp	r4, r5
 80084a4:	bf08      	it	eq
 80084a6:	f040 0001 	orreq.w	r0, r0, #1
 80084aa:	3518      	adds	r5, #24
 80084ac:	42ac      	cmp	r4, r5
 80084ae:	bf08      	it	eq
 80084b0:	f040 0001 	orreq.w	r0, r0, #1
 80084b4:	3518      	adds	r5, #24
 80084b6:	42ac      	cmp	r4, r5
 80084b8:	bf08      	it	eq
 80084ba:	f040 0001 	orreq.w	r0, r0, #1
 80084be:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80084c2:	42ac      	cmp	r4, r5
 80084c4:	bf08      	it	eq
 80084c6:	f040 0001 	orreq.w	r0, r0, #1
 80084ca:	3518      	adds	r5, #24
 80084cc:	42ac      	cmp	r4, r5
 80084ce:	bf08      	it	eq
 80084d0:	f040 0001 	orreq.w	r0, r0, #1
 80084d4:	3518      	adds	r5, #24
 80084d6:	42ac      	cmp	r4, r5
 80084d8:	bf08      	it	eq
 80084da:	f040 0001 	orreq.w	r0, r0, #1
 80084de:	3518      	adds	r5, #24
 80084e0:	42ac      	cmp	r4, r5
 80084e2:	bf08      	it	eq
 80084e4:	f040 0001 	orreq.w	r0, r0, #1
 80084e8:	3518      	adds	r5, #24
 80084ea:	42ac      	cmp	r4, r5
 80084ec:	bf08      	it	eq
 80084ee:	f040 0001 	orreq.w	r0, r0, #1
 80084f2:	3518      	adds	r5, #24
 80084f4:	42ac      	cmp	r4, r5
 80084f6:	bf08      	it	eq
 80084f8:	f040 0001 	orreq.w	r0, r0, #1
 80084fc:	3518      	adds	r5, #24
 80084fe:	42ac      	cmp	r4, r5
 8008500:	bf08      	it	eq
 8008502:	f040 0001 	orreq.w	r0, r0, #1
 8008506:	3518      	adds	r5, #24
 8008508:	42ac      	cmp	r4, r5
 800850a:	bf14      	ite	ne
 800850c:	4681      	movne	r9, r0
 800850e:	f040 0901 	orreq.w	r9, r0, #1
 8008512:	f5a5 6592 	sub.w	r5, r5, #1168	; 0x490
 8008516:	42ac      	cmp	r4, r5
 8008518:	bf18      	it	ne
 800851a:	42b4      	cmpne	r4, r6
 800851c:	bf0c      	ite	eq
 800851e:	2501      	moveq	r5, #1
 8008520:	2500      	movne	r5, #0
 8008522:	d002      	beq.n	800852a <HAL_DMA_Start_IT+0xee>
 8008524:	f1b9 0f00 	cmp.w	r9, #0
 8008528:	d054      	beq.n	80085d4 <HAL_DMA_Start_IT+0x198>
 800852a:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800852c:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8008530:	f026 0601 	bic.w	r6, r6, #1
 8008534:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008536:	2d00      	cmp	r5, #0
 8008538:	d078      	beq.n	800862c <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800853a:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800853e:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8008540:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8008544:	b117      	cbz	r7, 800854c <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008546:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 800854a:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800854c:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 8008550:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8008554:	f006 081f 	and.w	r8, r6, #31
 8008558:	fa0e fe08 	lsl.w	lr, lr, r8
 800855c:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008560:	6826      	ldr	r6, [r4, #0]
 8008562:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8008566:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008568:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800856a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800856e:	2b40      	cmp	r3, #64	; 0x40
 8008570:	f000 80e2 	beq.w	8008738 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008574:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008576:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008578:	b91d      	cbnz	r5, 8008582 <HAL_DMA_Start_IT+0x146>
 800857a:	f1b9 0f00 	cmp.w	r9, #0
 800857e:	f000 80e1 	beq.w	8008744 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	f023 031e 	bic.w	r3, r3, #30
 8008588:	f043 0316 	orr.w	r3, r3, #22
 800858c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800858e:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8008592:	b11b      	cbz	r3, 800859c <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	f043 0308 	orr.w	r3, r3, #8
 800859a:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800859c:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	03d2      	lsls	r2, r2, #15
 80085a4:	d503      	bpl.n	80085ae <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085ac:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80085ae:	b11f      	cbz	r7, 80085b8 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085b6:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 80085b8:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085ba:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80085bc:	f043 0301 	orr.w	r3, r3, #1
 80085c0:	6023      	str	r3, [r4, #0]
}
 80085c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c6:	bf00      	nop
 80085c8:	40020058 	.word	0x40020058
 80085cc:	40020010 	.word	0x40020010
 80085d0:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80085d4:	4f61      	ldr	r7, [pc, #388]	; (800875c <HAL_DMA_Start_IT+0x320>)
 80085d6:	4e62      	ldr	r6, [pc, #392]	; (8008760 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80085d8:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80085dc:	42b4      	cmp	r4, r6
 80085de:	bf18      	it	ne
 80085e0:	42bc      	cmpne	r4, r7
 80085e2:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80085e6:	bf0c      	ite	eq
 80085e8:	2701      	moveq	r7, #1
 80085ea:	2700      	movne	r7, #0
 80085ec:	42b4      	cmp	r4, r6
 80085ee:	bf08      	it	eq
 80085f0:	f047 0701 	orreq.w	r7, r7, #1
 80085f4:	3614      	adds	r6, #20
 80085f6:	42b4      	cmp	r4, r6
 80085f8:	bf08      	it	eq
 80085fa:	f047 0701 	orreq.w	r7, r7, #1
 80085fe:	3614      	adds	r6, #20
 8008600:	42b4      	cmp	r4, r6
 8008602:	bf08      	it	eq
 8008604:	f047 0701 	orreq.w	r7, r7, #1
 8008608:	3614      	adds	r6, #20
 800860a:	42b4      	cmp	r4, r6
 800860c:	bf08      	it	eq
 800860e:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 8008612:	6826      	ldr	r6, [r4, #0]
 8008614:	f026 0601 	bic.w	r6, r6, #1
 8008618:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800861a:	4e52      	ldr	r6, [pc, #328]	; (8008764 <HAL_DMA_Start_IT+0x328>)
 800861c:	42b4      	cmp	r4, r6
 800861e:	bf08      	it	eq
 8008620:	f047 0701 	orreq.w	r7, r7, #1
 8008624:	b917      	cbnz	r7, 800862c <HAL_DMA_Start_IT+0x1f0>
 8008626:	4f50      	ldr	r7, [pc, #320]	; (8008768 <HAL_DMA_Start_IT+0x32c>)
 8008628:	42bc      	cmp	r4, r7
 800862a:	d10b      	bne.n	8008644 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800862c:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8008630:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8008632:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8008636:	b117      	cbz	r7, 800863e <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008638:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 800863c:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800863e:	f1b9 0f00 	cmp.w	r9, #0
 8008642:	d183      	bne.n	800854c <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008644:	4f46      	ldr	r7, [pc, #280]	; (8008760 <HAL_DMA_Start_IT+0x324>)
 8008646:	f8df e114 	ldr.w	lr, [pc, #276]	; 800875c <HAL_DMA_Start_IT+0x320>
 800864a:	4574      	cmp	r4, lr
 800864c:	bf18      	it	ne
 800864e:	42bc      	cmpne	r4, r7
 8008650:	f10e 0e14 	add.w	lr, lr, #20
 8008654:	bf0c      	ite	eq
 8008656:	2701      	moveq	r7, #1
 8008658:	2700      	movne	r7, #0
 800865a:	4574      	cmp	r4, lr
 800865c:	bf08      	it	eq
 800865e:	f047 0701 	orreq.w	r7, r7, #1
 8008662:	f10e 0e14 	add.w	lr, lr, #20
 8008666:	4574      	cmp	r4, lr
 8008668:	bf08      	it	eq
 800866a:	f047 0701 	orreq.w	r7, r7, #1
 800866e:	f10e 0e14 	add.w	lr, lr, #20
 8008672:	4574      	cmp	r4, lr
 8008674:	bf08      	it	eq
 8008676:	f047 0701 	orreq.w	r7, r7, #1
 800867a:	f10e 0e14 	add.w	lr, lr, #20
 800867e:	4574      	cmp	r4, lr
 8008680:	bf08      	it	eq
 8008682:	f047 0701 	orreq.w	r7, r7, #1
 8008686:	f10e 0e14 	add.w	lr, lr, #20
 800868a:	4574      	cmp	r4, lr
 800868c:	bf08      	it	eq
 800868e:	f047 0701 	orreq.w	r7, r7, #1
 8008692:	b917      	cbnz	r7, 800869a <HAL_DMA_Start_IT+0x25e>
 8008694:	4f34      	ldr	r7, [pc, #208]	; (8008768 <HAL_DMA_Start_IT+0x32c>)
 8008696:	42bc      	cmp	r4, r7
 8008698:	d154      	bne.n	8008744 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800869a:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800869e:	2701      	movs	r7, #1
 80086a0:	f000 0e1f 	and.w	lr, r0, #31
 80086a4:	fa07 f70e 	lsl.w	r7, r7, lr
 80086a8:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80086ac:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086ae:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80086b2:	2b40      	cmp	r3, #64	; 0x40
 80086b4:	d043      	beq.n	800873e <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80086b6:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80086b8:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	f023 030e 	bic.w	r3, r3, #14
 80086c0:	f043 030a 	orr.w	r3, r3, #10
 80086c4:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80086c6:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d02d      	beq.n	800872a <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	f043 0304 	orr.w	r3, r3, #4
 80086d4:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80086d6:	4b21      	ldr	r3, [pc, #132]	; (800875c <HAL_DMA_Start_IT+0x320>)
 80086d8:	4a21      	ldr	r2, [pc, #132]	; (8008760 <HAL_DMA_Start_IT+0x324>)
 80086da:	4294      	cmp	r4, r2
 80086dc:	bf18      	it	ne
 80086de:	429c      	cmpne	r4, r3
 80086e0:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80086e4:	bf0c      	ite	eq
 80086e6:	2301      	moveq	r3, #1
 80086e8:	2300      	movne	r3, #0
 80086ea:	4294      	cmp	r4, r2
 80086ec:	bf08      	it	eq
 80086ee:	f043 0301 	orreq.w	r3, r3, #1
 80086f2:	3214      	adds	r2, #20
 80086f4:	4294      	cmp	r4, r2
 80086f6:	bf08      	it	eq
 80086f8:	f043 0301 	orreq.w	r3, r3, #1
 80086fc:	3214      	adds	r2, #20
 80086fe:	4294      	cmp	r4, r2
 8008700:	bf08      	it	eq
 8008702:	f043 0301 	orreq.w	r3, r3, #1
 8008706:	3214      	adds	r2, #20
 8008708:	4294      	cmp	r4, r2
 800870a:	bf08      	it	eq
 800870c:	f043 0301 	orreq.w	r3, r3, #1
 8008710:	3214      	adds	r2, #20
 8008712:	4294      	cmp	r4, r2
 8008714:	bf08      	it	eq
 8008716:	f043 0301 	orreq.w	r3, r3, #1
 800871a:	3214      	adds	r2, #20
 800871c:	4294      	cmp	r4, r2
 800871e:	bf08      	it	eq
 8008720:	f043 0301 	orreq.w	r3, r3, #1
 8008724:	2b00      	cmp	r3, #0
 8008726:	f43f af47 	beq.w	80085b8 <HAL_DMA_Start_IT+0x17c>
 800872a:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800872e:	e735      	b.n	800859c <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 8008730:	2001      	movs	r0, #1
 8008732:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8008734:	2002      	movs	r0, #2
}
 8008736:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008738:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800873a:	60e1      	str	r1, [r4, #12]
 800873c:	e71c      	b.n	8008578 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800873e:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008740:	60e1      	str	r1, [r4, #12]
 8008742:	e7ba      	b.n	80086ba <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	f023 030e 	bic.w	r3, r3, #14
 800874a:	f043 030a 	orr.w	r3, r3, #10
 800874e:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8008750:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1ba      	bne.n	80086ce <HAL_DMA_Start_IT+0x292>
 8008758:	e7bd      	b.n	80086d6 <HAL_DMA_Start_IT+0x29a>
 800875a:	bf00      	nop
 800875c:	5802541c 	.word	0x5802541c
 8008760:	58025408 	.word	0x58025408
 8008764:	58025480 	.word	0x58025480
 8008768:	58025494 	.word	0x58025494

0800876c <HAL_DMA_Abort>:
{
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8008770:	f7fd ff3e 	bl	80065f0 <HAL_GetTick>
  if(hdma == NULL)
 8008774:	2d00      	cmp	r5, #0
 8008776:	f000 8124 	beq.w	80089c2 <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800877a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800877e:	2b02      	cmp	r3, #2
 8008780:	f040 80dd 	bne.w	800893e <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008784:	682c      	ldr	r4, [r5, #0]
 8008786:	4606      	mov	r6, r0
 8008788:	4b8f      	ldr	r3, [pc, #572]	; (80089c8 <HAL_DMA_Abort+0x25c>)
 800878a:	4890      	ldr	r0, [pc, #576]	; (80089cc <HAL_DMA_Abort+0x260>)
 800878c:	4a90      	ldr	r2, [pc, #576]	; (80089d0 <HAL_DMA_Abort+0x264>)
 800878e:	4284      	cmp	r4, r0
 8008790:	bf18      	it	ne
 8008792:	429c      	cmpne	r4, r3
 8008794:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8008798:	498e      	ldr	r1, [pc, #568]	; (80089d4 <HAL_DMA_Abort+0x268>)
 800879a:	bf0c      	ite	eq
 800879c:	2301      	moveq	r3, #1
 800879e:	2300      	movne	r3, #0
 80087a0:	4284      	cmp	r4, r0
 80087a2:	bf08      	it	eq
 80087a4:	f043 0301 	orreq.w	r3, r3, #1
 80087a8:	3018      	adds	r0, #24
 80087aa:	4284      	cmp	r4, r0
 80087ac:	bf08      	it	eq
 80087ae:	f043 0301 	orreq.w	r3, r3, #1
 80087b2:	3018      	adds	r0, #24
 80087b4:	4284      	cmp	r4, r0
 80087b6:	bf08      	it	eq
 80087b8:	f043 0301 	orreq.w	r3, r3, #1
 80087bc:	3018      	adds	r0, #24
 80087be:	4284      	cmp	r4, r0
 80087c0:	bf08      	it	eq
 80087c2:	f043 0301 	orreq.w	r3, r3, #1
 80087c6:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80087ca:	4284      	cmp	r4, r0
 80087cc:	bf08      	it	eq
 80087ce:	f043 0301 	orreq.w	r3, r3, #1
 80087d2:	3018      	adds	r0, #24
 80087d4:	4284      	cmp	r4, r0
 80087d6:	bf08      	it	eq
 80087d8:	f043 0301 	orreq.w	r3, r3, #1
 80087dc:	3018      	adds	r0, #24
 80087de:	4284      	cmp	r4, r0
 80087e0:	bf08      	it	eq
 80087e2:	f043 0301 	orreq.w	r3, r3, #1
 80087e6:	3018      	adds	r0, #24
 80087e8:	4284      	cmp	r4, r0
 80087ea:	bf08      	it	eq
 80087ec:	f043 0301 	orreq.w	r3, r3, #1
 80087f0:	3018      	adds	r0, #24
 80087f2:	4284      	cmp	r4, r0
 80087f4:	bf08      	it	eq
 80087f6:	f043 0301 	orreq.w	r3, r3, #1
 80087fa:	3018      	adds	r0, #24
 80087fc:	4284      	cmp	r4, r0
 80087fe:	bf08      	it	eq
 8008800:	f043 0301 	orreq.w	r3, r3, #1
 8008804:	3018      	adds	r0, #24
 8008806:	4284      	cmp	r4, r0
 8008808:	bf08      	it	eq
 800880a:	f043 0301 	orreq.w	r3, r3, #1
 800880e:	3018      	adds	r0, #24
 8008810:	4284      	cmp	r4, r0
 8008812:	bf08      	it	eq
 8008814:	f043 0301 	orreq.w	r3, r3, #1
 8008818:	428c      	cmp	r4, r1
 800881a:	bf18      	it	ne
 800881c:	4294      	cmpne	r4, r2
 800881e:	bf0c      	ite	eq
 8008820:	2201      	moveq	r2, #1
 8008822:	2200      	movne	r2, #0
 8008824:	d002      	beq.n	800882c <HAL_DMA_Abort+0xc0>
 8008826:	2b00      	cmp	r3, #0
 8008828:	f000 8090 	beq.w	800894c <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800882c:	6821      	ldr	r1, [r4, #0]
 800882e:	f021 011e 	bic.w	r1, r1, #30
 8008832:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008834:	6961      	ldr	r1, [r4, #20]
 8008836:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800883a:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800883c:	2a00      	cmp	r2, #0
 800883e:	f000 80b0 	beq.w	80089a2 <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008842:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8008844:	6813      	ldr	r3, [r2, #0]
 8008846:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800884a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	f023 0301 	bic.w	r3, r3, #1
 8008852:	6023      	str	r3, [r4, #0]
 8008854:	e005      	b.n	8008862 <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008856:	f7fd fecb 	bl	80065f0 <HAL_GetTick>
 800885a:	1b83      	subs	r3, r0, r6
 800885c:	2b05      	cmp	r3, #5
 800885e:	f200 80a6 	bhi.w	80089ae <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	07db      	lsls	r3, r3, #31
 8008866:	d4f6      	bmi.n	8008856 <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008868:	682a      	ldr	r2, [r5, #0]
 800886a:	4b57      	ldr	r3, [pc, #348]	; (80089c8 <HAL_DMA_Abort+0x25c>)
 800886c:	4857      	ldr	r0, [pc, #348]	; (80089cc <HAL_DMA_Abort+0x260>)
 800886e:	495a      	ldr	r1, [pc, #360]	; (80089d8 <HAL_DMA_Abort+0x26c>)
 8008870:	4282      	cmp	r2, r0
 8008872:	bf18      	it	ne
 8008874:	429a      	cmpne	r2, r3
 8008876:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800887a:	bf0c      	ite	eq
 800887c:	2301      	moveq	r3, #1
 800887e:	2300      	movne	r3, #0
 8008880:	428a      	cmp	r2, r1
 8008882:	bf08      	it	eq
 8008884:	f043 0301 	orreq.w	r3, r3, #1
 8008888:	3130      	adds	r1, #48	; 0x30
 800888a:	4282      	cmp	r2, r0
 800888c:	bf08      	it	eq
 800888e:	f043 0301 	orreq.w	r3, r3, #1
 8008892:	3030      	adds	r0, #48	; 0x30
 8008894:	428a      	cmp	r2, r1
 8008896:	bf08      	it	eq
 8008898:	f043 0301 	orreq.w	r3, r3, #1
 800889c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80088a0:	4282      	cmp	r2, r0
 80088a2:	bf08      	it	eq
 80088a4:	f043 0301 	orreq.w	r3, r3, #1
 80088a8:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80088ac:	428a      	cmp	r2, r1
 80088ae:	bf08      	it	eq
 80088b0:	f043 0301 	orreq.w	r3, r3, #1
 80088b4:	3130      	adds	r1, #48	; 0x30
 80088b6:	4282      	cmp	r2, r0
 80088b8:	bf08      	it	eq
 80088ba:	f043 0301 	orreq.w	r3, r3, #1
 80088be:	3030      	adds	r0, #48	; 0x30
 80088c0:	428a      	cmp	r2, r1
 80088c2:	bf08      	it	eq
 80088c4:	f043 0301 	orreq.w	r3, r3, #1
 80088c8:	3130      	adds	r1, #48	; 0x30
 80088ca:	4282      	cmp	r2, r0
 80088cc:	bf08      	it	eq
 80088ce:	f043 0301 	orreq.w	r3, r3, #1
 80088d2:	3030      	adds	r0, #48	; 0x30
 80088d4:	428a      	cmp	r2, r1
 80088d6:	bf08      	it	eq
 80088d8:	f043 0301 	orreq.w	r3, r3, #1
 80088dc:	3130      	adds	r1, #48	; 0x30
 80088de:	4282      	cmp	r2, r0
 80088e0:	bf08      	it	eq
 80088e2:	f043 0301 	orreq.w	r3, r3, #1
 80088e6:	428a      	cmp	r2, r1
 80088e8:	bf08      	it	eq
 80088ea:	f043 0301 	orreq.w	r3, r3, #1
 80088ee:	3118      	adds	r1, #24
 80088f0:	428a      	cmp	r2, r1
 80088f2:	bf08      	it	eq
 80088f4:	f043 0301 	orreq.w	r3, r3, #1
 80088f8:	b933      	cbnz	r3, 8008908 <HAL_DMA_Abort+0x19c>
 80088fa:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 80088fe:	4b35      	ldr	r3, [pc, #212]	; (80089d4 <HAL_DMA_Abort+0x268>)
 8008900:	429a      	cmp	r2, r3
 8008902:	bf18      	it	ne
 8008904:	428a      	cmpne	r2, r1
 8008906:	d16f      	bne.n	80089e8 <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008908:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800890a:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800890c:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800890e:	f002 021f 	and.w	r2, r2, #31
 8008912:	4093      	lsls	r3, r2
 8008914:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 8008916:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008918:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 800891c:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800891e:	b133      	cbz	r3, 800892e <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008920:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008922:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008926:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800892a:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800892c:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800892e:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8008930:	2201      	movs	r2, #1
  return HAL_OK;
 8008932:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8008934:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8008938:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 800893c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800893e:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8008940:	2300      	movs	r3, #0
    return HAL_ERROR;
 8008942:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008944:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8008946:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 800894a:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800894c:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800894e:	4923      	ldr	r1, [pc, #140]	; (80089dc <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008950:	f022 020e 	bic.w	r2, r2, #14
 8008954:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008956:	4a22      	ldr	r2, [pc, #136]	; (80089e0 <HAL_DMA_Abort+0x274>)
 8008958:	428c      	cmp	r4, r1
 800895a:	bf18      	it	ne
 800895c:	4294      	cmpne	r4, r2
 800895e:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8008962:	bf0c      	ite	eq
 8008964:	2201      	moveq	r2, #1
 8008966:	2200      	movne	r2, #0
 8008968:	428c      	cmp	r4, r1
 800896a:	bf08      	it	eq
 800896c:	f042 0201 	orreq.w	r2, r2, #1
 8008970:	3114      	adds	r1, #20
 8008972:	428c      	cmp	r4, r1
 8008974:	bf08      	it	eq
 8008976:	f042 0201 	orreq.w	r2, r2, #1
 800897a:	3114      	adds	r1, #20
 800897c:	428c      	cmp	r4, r1
 800897e:	bf08      	it	eq
 8008980:	f042 0201 	orreq.w	r2, r2, #1
 8008984:	3114      	adds	r1, #20
 8008986:	428c      	cmp	r4, r1
 8008988:	bf08      	it	eq
 800898a:	f042 0201 	orreq.w	r2, r2, #1
 800898e:	3114      	adds	r1, #20
 8008990:	428c      	cmp	r4, r1
 8008992:	bf08      	it	eq
 8008994:	f042 0201 	orreq.w	r2, r2, #1
 8008998:	b91a      	cbnz	r2, 80089a2 <HAL_DMA_Abort+0x236>
 800899a:	4a12      	ldr	r2, [pc, #72]	; (80089e4 <HAL_DMA_Abort+0x278>)
 800899c:	4294      	cmp	r4, r2
 800899e:	f47f af55 	bne.w	800884c <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80089a2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80089a4:	680a      	ldr	r2, [r1, #0]
 80089a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089aa:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80089ac:	e74e      	b.n	800884c <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80089ae:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80089b0:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 80089b2:	2300      	movs	r3, #0
        return HAL_ERROR;
 80089b4:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80089b6:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80089b8:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 80089bc:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
 80089c0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80089c2:	2001      	movs	r0, #1
}
 80089c4:	bd70      	pop	{r4, r5, r6, pc}
 80089c6:	bf00      	nop
 80089c8:	40020058 	.word	0x40020058
 80089cc:	40020040 	.word	0x40020040
 80089d0:	40020010 	.word	0x40020010
 80089d4:	40020028 	.word	0x40020028
 80089d8:	40020070 	.word	0x40020070
 80089dc:	58025408 	.word	0x58025408
 80089e0:	5802541c 	.word	0x5802541c
 80089e4:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80089e8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80089ea:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80089ec:	4b16      	ldr	r3, [pc, #88]	; (8008a48 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80089ee:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80089f2:	4c16      	ldr	r4, [pc, #88]	; (8008a4c <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80089f4:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80089f6:	42a2      	cmp	r2, r4
 80089f8:	bf18      	it	ne
 80089fa:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80089fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80089fe:	bf0c      	ite	eq
 8008a00:	2301      	moveq	r3, #1
 8008a02:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008a04:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008a06:	4812      	ldr	r0, [pc, #72]	; (8008a50 <HAL_DMA_Abort+0x2e4>)
 8008a08:	4912      	ldr	r1, [pc, #72]	; (8008a54 <HAL_DMA_Abort+0x2e8>)
 8008a0a:	4282      	cmp	r2, r0
 8008a0c:	bf08      	it	eq
 8008a0e:	f043 0301 	orreq.w	r3, r3, #1
 8008a12:	3028      	adds	r0, #40	; 0x28
 8008a14:	428a      	cmp	r2, r1
 8008a16:	bf08      	it	eq
 8008a18:	f043 0301 	orreq.w	r3, r3, #1
 8008a1c:	3128      	adds	r1, #40	; 0x28
 8008a1e:	4282      	cmp	r2, r0
 8008a20:	bf08      	it	eq
 8008a22:	f043 0301 	orreq.w	r3, r3, #1
 8008a26:	428a      	cmp	r2, r1
 8008a28:	bf08      	it	eq
 8008a2a:	f043 0301 	orreq.w	r3, r3, #1
 8008a2e:	3114      	adds	r1, #20
 8008a30:	428a      	cmp	r2, r1
 8008a32:	bf08      	it	eq
 8008a34:	f043 0301 	orreq.w	r3, r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f47f af6c 	bne.w	8008916 <HAL_DMA_Abort+0x1aa>
 8008a3e:	4b06      	ldr	r3, [pc, #24]	; (8008a58 <HAL_DMA_Abort+0x2ec>)
 8008a40:	429a      	cmp	r2, r3
 8008a42:	f43f af68 	beq.w	8008916 <HAL_DMA_Abort+0x1aa>
 8008a46:	e772      	b.n	800892e <HAL_DMA_Abort+0x1c2>
 8008a48:	5802541c 	.word	0x5802541c
 8008a4c:	58025408 	.word	0x58025408
 8008a50:	58025430 	.word	0x58025430
 8008a54:	58025444 	.word	0x58025444
 8008a58:	58025494 	.word	0x58025494

08008a5c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d05f      	beq.n	8008b20 <HAL_DMA_Abort_IT+0xc4>
{
 8008a60:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008a62:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8008a66:	4603      	mov	r3, r0
 8008a68:	2a02      	cmp	r2, #2
 8008a6a:	d155      	bne.n	8008b18 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008a6c:	6801      	ldr	r1, [r0, #0]
 8008a6e:	4a57      	ldr	r2, [pc, #348]	; (8008bcc <HAL_DMA_Abort_IT+0x170>)
 8008a70:	4291      	cmp	r1, r2
 8008a72:	d048      	beq.n	8008b06 <HAL_DMA_Abort_IT+0xaa>
 8008a74:	3218      	adds	r2, #24
 8008a76:	4291      	cmp	r1, r2
 8008a78:	d045      	beq.n	8008b06 <HAL_DMA_Abort_IT+0xaa>
 8008a7a:	3230      	adds	r2, #48	; 0x30
 8008a7c:	4c54      	ldr	r4, [pc, #336]	; (8008bd0 <HAL_DMA_Abort_IT+0x174>)
 8008a7e:	4855      	ldr	r0, [pc, #340]	; (8008bd4 <HAL_DMA_Abort_IT+0x178>)
 8008a80:	42a1      	cmp	r1, r4
 8008a82:	bf18      	it	ne
 8008a84:	4291      	cmpne	r1, r2
 8008a86:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8008a8a:	bf0c      	ite	eq
 8008a8c:	2201      	moveq	r2, #1
 8008a8e:	2200      	movne	r2, #0
 8008a90:	4281      	cmp	r1, r0
 8008a92:	bf08      	it	eq
 8008a94:	f042 0201 	orreq.w	r2, r2, #1
 8008a98:	3030      	adds	r0, #48	; 0x30
 8008a9a:	42a1      	cmp	r1, r4
 8008a9c:	bf08      	it	eq
 8008a9e:	f042 0201 	orreq.w	r2, r2, #1
 8008aa2:	3430      	adds	r4, #48	; 0x30
 8008aa4:	4281      	cmp	r1, r0
 8008aa6:	bf08      	it	eq
 8008aa8:	f042 0201 	orreq.w	r2, r2, #1
 8008aac:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8008ab0:	42a1      	cmp	r1, r4
 8008ab2:	bf08      	it	eq
 8008ab4:	f042 0201 	orreq.w	r2, r2, #1
 8008ab8:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8008abc:	4281      	cmp	r1, r0
 8008abe:	bf08      	it	eq
 8008ac0:	f042 0201 	orreq.w	r2, r2, #1
 8008ac4:	3030      	adds	r0, #48	; 0x30
 8008ac6:	42a1      	cmp	r1, r4
 8008ac8:	bf08      	it	eq
 8008aca:	f042 0201 	orreq.w	r2, r2, #1
 8008ace:	3430      	adds	r4, #48	; 0x30
 8008ad0:	4281      	cmp	r1, r0
 8008ad2:	bf08      	it	eq
 8008ad4:	f042 0201 	orreq.w	r2, r2, #1
 8008ad8:	3030      	adds	r0, #48	; 0x30
 8008ada:	42a1      	cmp	r1, r4
 8008adc:	bf08      	it	eq
 8008ade:	f042 0201 	orreq.w	r2, r2, #1
 8008ae2:	3430      	adds	r4, #48	; 0x30
 8008ae4:	4281      	cmp	r1, r0
 8008ae6:	bf08      	it	eq
 8008ae8:	f042 0201 	orreq.w	r2, r2, #1
 8008aec:	3030      	adds	r0, #48	; 0x30
 8008aee:	42a1      	cmp	r1, r4
 8008af0:	bf08      	it	eq
 8008af2:	f042 0201 	orreq.w	r2, r2, #1
 8008af6:	4281      	cmp	r1, r0
 8008af8:	bf08      	it	eq
 8008afa:	f042 0201 	orreq.w	r2, r2, #1
 8008afe:	b912      	cbnz	r2, 8008b06 <HAL_DMA_Abort_IT+0xaa>
 8008b00:	4a35      	ldr	r2, [pc, #212]	; (8008bd8 <HAL_DMA_Abort_IT+0x17c>)
 8008b02:	4291      	cmp	r1, r2
 8008b04:	d10e      	bne.n	8008b24 <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8008b06:	2204      	movs	r2, #4
  return HAL_OK;
 8008b08:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8008b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8008b0e:	680b      	ldr	r3, [r1, #0]
 8008b10:	f023 0301 	bic.w	r3, r3, #1
 8008b14:	600b      	str	r3, [r1, #0]
}
 8008b16:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b18:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8008b1a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b1c:	655a      	str	r2, [r3, #84]	; 0x54
}
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008b20:	2001      	movs	r0, #1
}
 8008b22:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b24:	4a2d      	ldr	r2, [pc, #180]	; (8008bdc <HAL_DMA_Abort_IT+0x180>)
 8008b26:	4d2e      	ldr	r5, [pc, #184]	; (8008be0 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008b28:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b2a:	42a9      	cmp	r1, r5
 8008b2c:	bf18      	it	ne
 8008b2e:	4291      	cmpne	r1, r2
 8008b30:	4c2c      	ldr	r4, [pc, #176]	; (8008be4 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008b32:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b36:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8008b3a:	bf0c      	ite	eq
 8008b3c:	2201      	moveq	r2, #1
 8008b3e:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008b40:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b42:	42a1      	cmp	r1, r4
 8008b44:	bf08      	it	eq
 8008b46:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8008b4a:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b4c:	3428      	adds	r4, #40	; 0x28
 8008b4e:	42a9      	cmp	r1, r5
 8008b50:	bf08      	it	eq
 8008b52:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8008b56:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b5a:	42a1      	cmp	r1, r4
 8008b5c:	bf08      	it	eq
 8008b5e:	f042 0201 	orreq.w	r2, r2, #1
 8008b62:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8008b64:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b66:	42a1      	cmp	r1, r4
 8008b68:	bf08      	it	eq
 8008b6a:	f042 0201 	orreq.w	r2, r2, #1
 8008b6e:	481e      	ldr	r0, [pc, #120]	; (8008be8 <HAL_DMA_Abort_IT+0x18c>)
 8008b70:	4281      	cmp	r1, r0
 8008b72:	bf08      	it	eq
 8008b74:	f042 0201 	orreq.w	r2, r2, #1
 8008b78:	b912      	cbnz	r2, 8008b80 <HAL_DMA_Abort_IT+0x124>
 8008b7a:	4a1c      	ldr	r2, [pc, #112]	; (8008bec <HAL_DMA_Abort_IT+0x190>)
 8008b7c:	4291      	cmp	r1, r2
 8008b7e:	d117      	bne.n	8008bb0 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008b80:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b82:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008b84:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008b88:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008b8a:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008b8e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008b92:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008b94:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008b96:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8008b98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b9a:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 8008b9e:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8008ba0:	b132      	cbz	r2, 8008bb0 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008ba2:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008ba4:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008ba8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008bac:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008bae:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8008bb0:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8008bb2:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8008bb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8008bb6:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8008bba:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8008bbe:	b11a      	cbz	r2, 8008bc8 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	4790      	blx	r2
  return HAL_OK;
 8008bc4:	4620      	mov	r0, r4
}
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8008bc8:	4610      	mov	r0, r2
}
 8008bca:	bd38      	pop	{r3, r4, r5, pc}
 8008bcc:	40020010 	.word	0x40020010
 8008bd0:	40020040 	.word	0x40020040
 8008bd4:	40020070 	.word	0x40020070
 8008bd8:	400204b8 	.word	0x400204b8
 8008bdc:	5802541c 	.word	0x5802541c
 8008be0:	58025408 	.word	0x58025408
 8008be4:	58025430 	.word	0x58025430
 8008be8:	58025480 	.word	0x58025480
 8008bec:	58025494 	.word	0x58025494

08008bf0 <HAL_DMA_IRQHandler>:
{
 8008bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
 8008bf4:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8008bf6:	4b9c      	ldr	r3, [pc, #624]	; (8008e68 <HAL_DMA_IRQHandler+0x278>)
{
 8008bf8:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008bfa:	4e9c      	ldr	r6, [pc, #624]	; (8008e6c <HAL_DMA_IRQHandler+0x27c>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8008bfc:	681d      	ldr	r5, [r3, #0]
{
 8008bfe:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
 8008c00:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008c02:	6803      	ldr	r3, [r0, #0]
 8008c04:	4a9a      	ldr	r2, [pc, #616]	; (8008e70 <HAL_DMA_IRQHandler+0x280>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c06:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	bf18      	it	ne
 8008c0c:	42b3      	cmpne	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 8008c0e:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008c10:	bf08      	it	eq
 8008c12:	2601      	moveq	r6, #1
  tmpisr_bdma = regs_bdma->ISR;
 8008c14:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008c16:	bf18      	it	ne
 8008c18:	2600      	movne	r6, #0
 8008c1a:	d045      	beq.n	8008ca8 <HAL_DMA_IRQHandler+0xb8>
 8008c1c:	3218      	adds	r2, #24
 8008c1e:	4895      	ldr	r0, [pc, #596]	; (8008e74 <HAL_DMA_IRQHandler+0x284>)
 8008c20:	4283      	cmp	r3, r0
 8008c22:	bf18      	it	ne
 8008c24:	4293      	cmpne	r3, r2
 8008c26:	f100 0018 	add.w	r0, r0, #24
 8008c2a:	bf0c      	ite	eq
 8008c2c:	2201      	moveq	r2, #1
 8008c2e:	2200      	movne	r2, #0
 8008c30:	4283      	cmp	r3, r0
 8008c32:	bf08      	it	eq
 8008c34:	f042 0201 	orreq.w	r2, r2, #1
 8008c38:	3018      	adds	r0, #24
 8008c3a:	4283      	cmp	r3, r0
 8008c3c:	bf08      	it	eq
 8008c3e:	f042 0201 	orreq.w	r2, r2, #1
 8008c42:	3018      	adds	r0, #24
 8008c44:	4283      	cmp	r3, r0
 8008c46:	bf08      	it	eq
 8008c48:	f042 0201 	orreq.w	r2, r2, #1
 8008c4c:	3018      	adds	r0, #24
 8008c4e:	4283      	cmp	r3, r0
 8008c50:	bf08      	it	eq
 8008c52:	f042 0201 	orreq.w	r2, r2, #1
 8008c56:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8008c5a:	4283      	cmp	r3, r0
 8008c5c:	bf08      	it	eq
 8008c5e:	f042 0201 	orreq.w	r2, r2, #1
 8008c62:	3018      	adds	r0, #24
 8008c64:	4283      	cmp	r3, r0
 8008c66:	bf08      	it	eq
 8008c68:	f042 0201 	orreq.w	r2, r2, #1
 8008c6c:	3018      	adds	r0, #24
 8008c6e:	4283      	cmp	r3, r0
 8008c70:	bf08      	it	eq
 8008c72:	f042 0201 	orreq.w	r2, r2, #1
 8008c76:	3018      	adds	r0, #24
 8008c78:	4283      	cmp	r3, r0
 8008c7a:	bf08      	it	eq
 8008c7c:	f042 0201 	orreq.w	r2, r2, #1
 8008c80:	3018      	adds	r0, #24
 8008c82:	4283      	cmp	r3, r0
 8008c84:	bf08      	it	eq
 8008c86:	f042 0201 	orreq.w	r2, r2, #1
 8008c8a:	3018      	adds	r0, #24
 8008c8c:	4283      	cmp	r3, r0
 8008c8e:	bf08      	it	eq
 8008c90:	f042 0201 	orreq.w	r2, r2, #1
 8008c94:	3018      	adds	r0, #24
 8008c96:	4283      	cmp	r3, r0
 8008c98:	bf08      	it	eq
 8008c9a:	f042 0201 	orreq.w	r2, r2, #1
 8008c9e:	b91a      	cbnz	r2, 8008ca8 <HAL_DMA_IRQHandler+0xb8>
 8008ca0:	4a75      	ldr	r2, [pc, #468]	; (8008e78 <HAL_DMA_IRQHandler+0x288>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	f040 8250 	bne.w	8009148 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008ca8:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 8008cac:	2208      	movs	r2, #8
 8008cae:	f001 0c1f 	and.w	ip, r1, #31
 8008cb2:	fa02 f20c 	lsl.w	r2, r2, ip
 8008cb6:	4217      	tst	r7, r2
 8008cb8:	f040 8188 	bne.w	8008fcc <HAL_DMA_IRQHandler+0x3dc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008cbc:	fa27 f20c 	lsr.w	r2, r7, ip
 8008cc0:	07d2      	lsls	r2, r2, #31
 8008cc2:	d50c      	bpl.n	8008cde <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008cc4:	695a      	ldr	r2, [r3, #20]
 8008cc6:	0610      	lsls	r0, r2, #24
 8008cc8:	d509      	bpl.n	8008cde <HAL_DMA_IRQHandler+0xee>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008cca:	2201      	movs	r2, #1
 8008ccc:	fa02 f20c 	lsl.w	r2, r2, ip
 8008cd0:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008cd2:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8008cd6:	f042 0202 	orr.w	r2, r2, #2
 8008cda:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008cde:	f04f 0e04 	mov.w	lr, #4
 8008ce2:	fa0e f00c 	lsl.w	r0, lr, ip
 8008ce6:	4238      	tst	r0, r7
 8008ce8:	d05b      	beq.n	8008da2 <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008cea:	2e00      	cmp	r6, #0
 8008cec:	d14f      	bne.n	8008d8e <HAL_DMA_IRQHandler+0x19e>
 8008cee:	4a61      	ldr	r2, [pc, #388]	; (8008e74 <HAL_DMA_IRQHandler+0x284>)
 8008cf0:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8008e7c <HAL_DMA_IRQHandler+0x28c>
 8008cf4:	4543      	cmp	r3, r8
 8008cf6:	bf18      	it	ne
 8008cf8:	4293      	cmpne	r3, r2
 8008cfa:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8008cfe:	bf0c      	ite	eq
 8008d00:	2201      	moveq	r2, #1
 8008d02:	2200      	movne	r2, #0
 8008d04:	4543      	cmp	r3, r8
 8008d06:	bf08      	it	eq
 8008d08:	f042 0201 	orreq.w	r2, r2, #1
 8008d0c:	f108 0818 	add.w	r8, r8, #24
 8008d10:	4543      	cmp	r3, r8
 8008d12:	bf08      	it	eq
 8008d14:	f042 0201 	orreq.w	r2, r2, #1
 8008d18:	f108 0818 	add.w	r8, r8, #24
 8008d1c:	4543      	cmp	r3, r8
 8008d1e:	bf08      	it	eq
 8008d20:	f042 0201 	orreq.w	r2, r2, #1
 8008d24:	f108 0818 	add.w	r8, r8, #24
 8008d28:	4543      	cmp	r3, r8
 8008d2a:	bf08      	it	eq
 8008d2c:	f042 0201 	orreq.w	r2, r2, #1
 8008d30:	f508 7856 	add.w	r8, r8, #856	; 0x358
 8008d34:	4543      	cmp	r3, r8
 8008d36:	bf08      	it	eq
 8008d38:	f042 0201 	orreq.w	r2, r2, #1
 8008d3c:	f108 0818 	add.w	r8, r8, #24
 8008d40:	4543      	cmp	r3, r8
 8008d42:	bf08      	it	eq
 8008d44:	f042 0201 	orreq.w	r2, r2, #1
 8008d48:	f108 0818 	add.w	r8, r8, #24
 8008d4c:	4543      	cmp	r3, r8
 8008d4e:	bf08      	it	eq
 8008d50:	f042 0201 	orreq.w	r2, r2, #1
 8008d54:	f108 0818 	add.w	r8, r8, #24
 8008d58:	4543      	cmp	r3, r8
 8008d5a:	bf08      	it	eq
 8008d5c:	f042 0201 	orreq.w	r2, r2, #1
 8008d60:	f108 0818 	add.w	r8, r8, #24
 8008d64:	4543      	cmp	r3, r8
 8008d66:	bf08      	it	eq
 8008d68:	f042 0201 	orreq.w	r2, r2, #1
 8008d6c:	f108 0818 	add.w	r8, r8, #24
 8008d70:	4543      	cmp	r3, r8
 8008d72:	bf08      	it	eq
 8008d74:	f042 0201 	orreq.w	r2, r2, #1
 8008d78:	f108 0818 	add.w	r8, r8, #24
 8008d7c:	4543      	cmp	r3, r8
 8008d7e:	bf08      	it	eq
 8008d80:	f042 0201 	orreq.w	r2, r2, #1
 8008d84:	b91a      	cbnz	r2, 8008d8e <HAL_DMA_IRQHandler+0x19e>
 8008d86:	4a3c      	ldr	r2, [pc, #240]	; (8008e78 <HAL_DMA_IRQHandler+0x288>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	f040 8219 	bne.w	80091c0 <HAL_DMA_IRQHandler+0x5d0>
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	0792      	lsls	r2, r2, #30
 8008d92:	d506      	bpl.n	8008da2 <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008d94:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008d96:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8008d9a:	f042 0204 	orr.w	r2, r2, #4
 8008d9e:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008da2:	2210      	movs	r2, #16
 8008da4:	fa02 fc0c 	lsl.w	ip, r2, ip
 8008da8:	ea1c 0f07 	tst.w	ip, r7
 8008dac:	d06c      	beq.n	8008e88 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008dae:	2e00      	cmp	r6, #0
 8008db0:	d145      	bne.n	8008e3e <HAL_DMA_IRQHandler+0x24e>
 8008db2:	4a30      	ldr	r2, [pc, #192]	; (8008e74 <HAL_DMA_IRQHandler+0x284>)
 8008db4:	4e31      	ldr	r6, [pc, #196]	; (8008e7c <HAL_DMA_IRQHandler+0x28c>)
 8008db6:	42b3      	cmp	r3, r6
 8008db8:	bf18      	it	ne
 8008dba:	4293      	cmpne	r3, r2
 8008dbc:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8008dc0:	bf0c      	ite	eq
 8008dc2:	2201      	moveq	r2, #1
 8008dc4:	2200      	movne	r2, #0
 8008dc6:	42b3      	cmp	r3, r6
 8008dc8:	bf08      	it	eq
 8008dca:	f042 0201 	orreq.w	r2, r2, #1
 8008dce:	3618      	adds	r6, #24
 8008dd0:	42b3      	cmp	r3, r6
 8008dd2:	bf08      	it	eq
 8008dd4:	f042 0201 	orreq.w	r2, r2, #1
 8008dd8:	3618      	adds	r6, #24
 8008dda:	42b3      	cmp	r3, r6
 8008ddc:	bf08      	it	eq
 8008dde:	f042 0201 	orreq.w	r2, r2, #1
 8008de2:	3618      	adds	r6, #24
 8008de4:	42b3      	cmp	r3, r6
 8008de6:	bf08      	it	eq
 8008de8:	f042 0201 	orreq.w	r2, r2, #1
 8008dec:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8008df0:	42b3      	cmp	r3, r6
 8008df2:	bf08      	it	eq
 8008df4:	f042 0201 	orreq.w	r2, r2, #1
 8008df8:	3618      	adds	r6, #24
 8008dfa:	42b3      	cmp	r3, r6
 8008dfc:	bf08      	it	eq
 8008dfe:	f042 0201 	orreq.w	r2, r2, #1
 8008e02:	3618      	adds	r6, #24
 8008e04:	42b3      	cmp	r3, r6
 8008e06:	bf08      	it	eq
 8008e08:	f042 0201 	orreq.w	r2, r2, #1
 8008e0c:	3618      	adds	r6, #24
 8008e0e:	42b3      	cmp	r3, r6
 8008e10:	bf08      	it	eq
 8008e12:	f042 0201 	orreq.w	r2, r2, #1
 8008e16:	3618      	adds	r6, #24
 8008e18:	42b3      	cmp	r3, r6
 8008e1a:	bf08      	it	eq
 8008e1c:	f042 0201 	orreq.w	r2, r2, #1
 8008e20:	3618      	adds	r6, #24
 8008e22:	42b3      	cmp	r3, r6
 8008e24:	bf08      	it	eq
 8008e26:	f042 0201 	orreq.w	r2, r2, #1
 8008e2a:	3618      	adds	r6, #24
 8008e2c:	42b3      	cmp	r3, r6
 8008e2e:	bf08      	it	eq
 8008e30:	f042 0201 	orreq.w	r2, r2, #1
 8008e34:	b91a      	cbnz	r2, 8008e3e <HAL_DMA_IRQHandler+0x24e>
 8008e36:	4a10      	ldr	r2, [pc, #64]	; (8008e78 <HAL_DMA_IRQHandler+0x288>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	f040 81c9 	bne.w	80091d0 <HAL_DMA_IRQHandler+0x5e0>
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	0710      	lsls	r0, r2, #28
 8008e42:	d521      	bpl.n	8008e88 <HAL_DMA_IRQHandler+0x298>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e44:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	0356      	lsls	r6, r2, #13
 8008e4c:	f100 814c 	bmi.w	80090e8 <HAL_DMA_IRQHandler+0x4f8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	05d2      	lsls	r2, r2, #23
 8008e54:	d403      	bmi.n	8008e5e <HAL_DMA_IRQHandler+0x26e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	f022 0208 	bic.w	r2, r2, #8
 8008e5c:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8008e5e:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8008e62:	b18b      	cbz	r3, 8008e88 <HAL_DMA_IRQHandler+0x298>
 8008e64:	e00c      	b.n	8008e80 <HAL_DMA_IRQHandler+0x290>
 8008e66:	bf00      	nop
 8008e68:	240003cc 	.word	0x240003cc
 8008e6c:	40020010 	.word	0x40020010
 8008e70:	40020028 	.word	0x40020028
 8008e74:	40020058 	.word	0x40020058
 8008e78:	400204b8 	.word	0x400204b8
 8008e7c:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 8008e80:	4648      	mov	r0, r9
 8008e82:	4798      	blx	r3
 8008e84:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e88:	f001 011f 	and.w	r1, r1, #31
 8008e8c:	2620      	movs	r6, #32
 8008e8e:	408e      	lsls	r6, r1
 8008e90:	423e      	tst	r6, r7
 8008e92:	d068      	beq.n	8008f66 <HAL_DMA_IRQHandler+0x376>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008e94:	f8d9 2000 	ldr.w	r2, [r9]
 8008e98:	4ba5      	ldr	r3, [pc, #660]	; (8009130 <HAL_DMA_IRQHandler+0x540>)
 8008e9a:	4fa6      	ldr	r7, [pc, #664]	; (8009134 <HAL_DMA_IRQHandler+0x544>)
 8008e9c:	42ba      	cmp	r2, r7
 8008e9e:	bf18      	it	ne
 8008ea0:	429a      	cmpne	r2, r3
 8008ea2:	f107 0718 	add.w	r7, r7, #24
 8008ea6:	bf0c      	ite	eq
 8008ea8:	2301      	moveq	r3, #1
 8008eaa:	2300      	movne	r3, #0
 8008eac:	42ba      	cmp	r2, r7
 8008eae:	bf08      	it	eq
 8008eb0:	f043 0301 	orreq.w	r3, r3, #1
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	42ba      	cmp	r2, r7
 8008eb8:	bf08      	it	eq
 8008eba:	f043 0301 	orreq.w	r3, r3, #1
 8008ebe:	3718      	adds	r7, #24
 8008ec0:	42ba      	cmp	r2, r7
 8008ec2:	bf08      	it	eq
 8008ec4:	f043 0301 	orreq.w	r3, r3, #1
 8008ec8:	3718      	adds	r7, #24
 8008eca:	42ba      	cmp	r2, r7
 8008ecc:	bf08      	it	eq
 8008ece:	f043 0301 	orreq.w	r3, r3, #1
 8008ed2:	3718      	adds	r7, #24
 8008ed4:	42ba      	cmp	r2, r7
 8008ed6:	bf08      	it	eq
 8008ed8:	f043 0301 	orreq.w	r3, r3, #1
 8008edc:	3718      	adds	r7, #24
 8008ede:	42ba      	cmp	r2, r7
 8008ee0:	bf08      	it	eq
 8008ee2:	f043 0301 	orreq.w	r3, r3, #1
 8008ee6:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8008eea:	42ba      	cmp	r2, r7
 8008eec:	bf08      	it	eq
 8008eee:	f043 0301 	orreq.w	r3, r3, #1
 8008ef2:	3718      	adds	r7, #24
 8008ef4:	42ba      	cmp	r2, r7
 8008ef6:	bf08      	it	eq
 8008ef8:	f043 0301 	orreq.w	r3, r3, #1
 8008efc:	3718      	adds	r7, #24
 8008efe:	42ba      	cmp	r2, r7
 8008f00:	bf08      	it	eq
 8008f02:	f043 0301 	orreq.w	r3, r3, #1
 8008f06:	3718      	adds	r7, #24
 8008f08:	42ba      	cmp	r2, r7
 8008f0a:	bf08      	it	eq
 8008f0c:	f043 0301 	orreq.w	r3, r3, #1
 8008f10:	3718      	adds	r7, #24
 8008f12:	42ba      	cmp	r2, r7
 8008f14:	bf08      	it	eq
 8008f16:	f043 0301 	orreq.w	r3, r3, #1
 8008f1a:	3718      	adds	r7, #24
 8008f1c:	42ba      	cmp	r2, r7
 8008f1e:	bf08      	it	eq
 8008f20:	f043 0301 	orreq.w	r3, r3, #1
 8008f24:	3718      	adds	r7, #24
 8008f26:	42ba      	cmp	r2, r7
 8008f28:	bf08      	it	eq
 8008f2a:	f043 0301 	orreq.w	r3, r3, #1
 8008f2e:	b91b      	cbnz	r3, 8008f38 <HAL_DMA_IRQHandler+0x348>
 8008f30:	4b81      	ldr	r3, [pc, #516]	; (8009138 <HAL_DMA_IRQHandler+0x548>)
 8008f32:	429a      	cmp	r2, r3
 8008f34:	f040 8162 	bne.w	80091fc <HAL_DMA_IRQHandler+0x60c>
 8008f38:	6813      	ldr	r3, [r2, #0]
 8008f3a:	06db      	lsls	r3, r3, #27
 8008f3c:	d513      	bpl.n	8008f66 <HAL_DMA_IRQHandler+0x376>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008f3e:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008f40:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 8008f44:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008f46:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008f48:	f000 80ae 	beq.w	80090a8 <HAL_DMA_IRQHandler+0x4b8>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008f4c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008f50:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008f52:	f000 80d3 	beq.w	80090fc <HAL_DMA_IRQHandler+0x50c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008f56:	031c      	lsls	r4, r3, #12
 8008f58:	f140 80de 	bpl.w	8009118 <HAL_DMA_IRQHandler+0x528>
          if(hdma->XferCpltCallback != NULL)
 8008f5c:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8008f60:	b10b      	cbz	r3, 8008f66 <HAL_DMA_IRQHandler+0x376>
            hdma->XferCpltCallback(hdma);
 8008f62:	4648      	mov	r0, r9
 8008f64:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008f66:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 80b9 	beq.w	80090e2 <HAL_DMA_IRQHandler+0x4f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008f70:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8008f74:	07d8      	lsls	r0, r3, #31
 8008f76:	d51f      	bpl.n	8008fb8 <HAL_DMA_IRQHandler+0x3c8>
        __HAL_DMA_DISABLE(hdma);
 8008f78:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
 8008f7c:	2104      	movs	r1, #4
 8008f7e:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8008f82:	6813      	ldr	r3, [r2, #0]
 8008f84:	f023 0301 	bic.w	r3, r3, #1
 8008f88:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008f8a:	4b6c      	ldr	r3, [pc, #432]	; (800913c <HAL_DMA_IRQHandler+0x54c>)
 8008f8c:	fba3 3505 	umull	r3, r5, r3, r5
 8008f90:	0aad      	lsrs	r5, r5, #10
 8008f92:	e002      	b.n	8008f9a <HAL_DMA_IRQHandler+0x3aa>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008f94:	6813      	ldr	r3, [r2, #0]
 8008f96:	07d9      	lsls	r1, r3, #31
 8008f98:	d504      	bpl.n	8008fa4 <HAL_DMA_IRQHandler+0x3b4>
          if (++count > timeout)
 8008f9a:	9b01      	ldr	r3, [sp, #4]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	42ab      	cmp	r3, r5
 8008fa0:	9301      	str	r3, [sp, #4]
 8008fa2:	d9f7      	bls.n	8008f94 <HAL_DMA_IRQHandler+0x3a4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008fa4:	6813      	ldr	r3, [r2, #0]
 8008fa6:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8008fa8:	bf4c      	ite	mi
 8008faa:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8008fac:	2301      	movpl	r3, #1
 8008fae:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8008fb8:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 8090 	beq.w	80090e2 <HAL_DMA_IRQHandler+0x4f2>
          hdma->XferCpltCallback(hdma);
 8008fc2:	4648      	mov	r0, r9
}
 8008fc4:	b003      	add	sp, #12
 8008fc6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
          hdma->XferCpltCallback(hdma);
 8008fca:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008fcc:	6818      	ldr	r0, [r3, #0]
 8008fce:	0740      	lsls	r0, r0, #29
 8008fd0:	d50a      	bpl.n	8008fe8 <HAL_DMA_IRQHandler+0x3f8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008fd2:	6818      	ldr	r0, [r3, #0]
 8008fd4:	f020 0004 	bic.w	r0, r0, #4
 8008fd8:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008fda:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008fdc:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8008fe0:	f042 0201 	orr.w	r2, r2, #1
 8008fe4:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008fe8:	fa27 f20c 	lsr.w	r2, r7, ip
 8008fec:	07d2      	lsls	r2, r2, #31
 8008fee:	f57f ae76 	bpl.w	8008cde <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008ff2:	4a53      	ldr	r2, [pc, #332]	; (8009140 <HAL_DMA_IRQHandler+0x550>)
 8008ff4:	4853      	ldr	r0, [pc, #332]	; (8009144 <HAL_DMA_IRQHandler+0x554>)
 8008ff6:	4283      	cmp	r3, r0
 8008ff8:	bf18      	it	ne
 8008ffa:	4293      	cmpne	r3, r2
 8008ffc:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8009000:	bf0c      	ite	eq
 8009002:	2201      	moveq	r2, #1
 8009004:	2200      	movne	r2, #0
 8009006:	4283      	cmp	r3, r0
 8009008:	bf08      	it	eq
 800900a:	f042 0201 	orreq.w	r2, r2, #1
 800900e:	3018      	adds	r0, #24
 8009010:	4283      	cmp	r3, r0
 8009012:	bf08      	it	eq
 8009014:	f042 0201 	orreq.w	r2, r2, #1
 8009018:	3018      	adds	r0, #24
 800901a:	4283      	cmp	r3, r0
 800901c:	bf08      	it	eq
 800901e:	f042 0201 	orreq.w	r2, r2, #1
 8009022:	3018      	adds	r0, #24
 8009024:	4283      	cmp	r3, r0
 8009026:	bf08      	it	eq
 8009028:	f042 0201 	orreq.w	r2, r2, #1
 800902c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8009030:	4283      	cmp	r3, r0
 8009032:	bf08      	it	eq
 8009034:	f042 0201 	orreq.w	r2, r2, #1
 8009038:	3018      	adds	r0, #24
 800903a:	4283      	cmp	r3, r0
 800903c:	bf08      	it	eq
 800903e:	f042 0201 	orreq.w	r2, r2, #1
 8009042:	3018      	adds	r0, #24
 8009044:	4283      	cmp	r3, r0
 8009046:	bf08      	it	eq
 8009048:	f042 0201 	orreq.w	r2, r2, #1
 800904c:	3018      	adds	r0, #24
 800904e:	4283      	cmp	r3, r0
 8009050:	bf08      	it	eq
 8009052:	f042 0201 	orreq.w	r2, r2, #1
 8009056:	3018      	adds	r0, #24
 8009058:	4283      	cmp	r3, r0
 800905a:	bf08      	it	eq
 800905c:	f042 0201 	orreq.w	r2, r2, #1
 8009060:	3018      	adds	r0, #24
 8009062:	4283      	cmp	r3, r0
 8009064:	bf08      	it	eq
 8009066:	f042 0201 	orreq.w	r2, r2, #1
 800906a:	3018      	adds	r0, #24
 800906c:	4283      	cmp	r3, r0
 800906e:	bf08      	it	eq
 8009070:	f042 0201 	orreq.w	r2, r2, #1
 8009074:	3018      	adds	r0, #24
 8009076:	4283      	cmp	r3, r0
 8009078:	bf08      	it	eq
 800907a:	f042 0201 	orreq.w	r2, r2, #1
 800907e:	2a00      	cmp	r2, #0
 8009080:	f47f ae20 	bne.w	8008cc4 <HAL_DMA_IRQHandler+0xd4>
 8009084:	2e00      	cmp	r6, #0
 8009086:	f47f ae1d 	bne.w	8008cc4 <HAL_DMA_IRQHandler+0xd4>
 800908a:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800908c:	2204      	movs	r2, #4
 800908e:	fa02 f20c 	lsl.w	r2, r2, ip
 8009092:	423a      	tst	r2, r7
 8009094:	f040 8094 	bne.w	80091c0 <HAL_DMA_IRQHandler+0x5d0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009098:	2210      	movs	r2, #16
 800909a:	fa02 fc0c 	lsl.w	ip, r2, ip
 800909e:	ea17 0f0c 	tst.w	r7, ip
 80090a2:	f43f aef1 	beq.w	8008e88 <HAL_DMA_IRQHandler+0x298>
 80090a6:	e684      	b.n	8008db2 <HAL_DMA_IRQHandler+0x1c2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80090a8:	f023 0316 	bic.w	r3, r3, #22
 80090ac:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80090ae:	6953      	ldr	r3, [r2, #20]
 80090b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090b4:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80090b6:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 80090ba:	b39b      	cbz	r3, 8009124 <HAL_DMA_IRQHandler+0x534>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80090bc:	6813      	ldr	r3, [r2, #0]
 80090be:	f023 0308 	bic.w	r3, r3, #8
 80090c2:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80090c4:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 80090c6:	2501      	movs	r5, #1
          __HAL_UNLOCK(hdma);
 80090c8:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80090ca:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 80090ce:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80090d2:	60a1      	str	r1, [r4, #8]
          hdma->State = HAL_DMA_STATE_READY;
 80090d4:	f889 5035 	strb.w	r5, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80090d8:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f47f af70 	bne.w	8008fc2 <HAL_DMA_IRQHandler+0x3d2>
}
 80090e2:	b003      	add	sp, #12
 80090e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	0318      	lsls	r0, r3, #12
 80090ec:	f57f aeb7 	bpl.w	8008e5e <HAL_DMA_IRQHandler+0x26e>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80090f0:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f47f aec3 	bne.w	8008e80 <HAL_DMA_IRQHandler+0x290>
 80090fa:	e6c5      	b.n	8008e88 <HAL_DMA_IRQHandler+0x298>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80090fc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8009100:	f47f af2c 	bne.w	8008f5c <HAL_DMA_IRQHandler+0x36c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009104:	6811      	ldr	r1, [r2, #0]
 8009106:	f021 0110 	bic.w	r1, r1, #16
 800910a:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800910c:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 800910e:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8009112:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8009116:	e721      	b.n	8008f5c <HAL_DMA_IRQHandler+0x36c>
            if(hdma->XferM1CpltCallback != NULL)
 8009118:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 800911c:	2b00      	cmp	r3, #0
 800911e:	f47f af20 	bne.w	8008f62 <HAL_DMA_IRQHandler+0x372>
 8009122:	e720      	b.n	8008f66 <HAL_DMA_IRQHandler+0x376>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009124:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1c7      	bne.n	80090bc <HAL_DMA_IRQHandler+0x4cc>
 800912c:	e7ca      	b.n	80090c4 <HAL_DMA_IRQHandler+0x4d4>
 800912e:	bf00      	nop
 8009130:	40020010 	.word	0x40020010
 8009134:	40020028 	.word	0x40020028
 8009138:	400204b8 	.word	0x400204b8
 800913c:	1b4e81b5 	.word	0x1b4e81b5
 8009140:	40020058 	.word	0x40020058
 8009144:	40020040 	.word	0x40020040
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009148:	4a4e      	ldr	r2, [pc, #312]	; (8009284 <HAL_DMA_IRQHandler+0x694>)
 800914a:	4d4f      	ldr	r5, [pc, #316]	; (8009288 <HAL_DMA_IRQHandler+0x698>)
 800914c:	42ab      	cmp	r3, r5
 800914e:	bf18      	it	ne
 8009150:	4293      	cmpne	r3, r2
 8009152:	f105 0514 	add.w	r5, r5, #20
 8009156:	bf0c      	ite	eq
 8009158:	2201      	moveq	r2, #1
 800915a:	2200      	movne	r2, #0
 800915c:	42ab      	cmp	r3, r5
 800915e:	bf08      	it	eq
 8009160:	f042 0201 	orreq.w	r2, r2, #1
 8009164:	3514      	adds	r5, #20
 8009166:	42ab      	cmp	r3, r5
 8009168:	bf08      	it	eq
 800916a:	f042 0201 	orreq.w	r2, r2, #1
 800916e:	3514      	adds	r5, #20
 8009170:	42ab      	cmp	r3, r5
 8009172:	bf08      	it	eq
 8009174:	f042 0201 	orreq.w	r2, r2, #1
 8009178:	3514      	adds	r5, #20
 800917a:	42ab      	cmp	r3, r5
 800917c:	bf08      	it	eq
 800917e:	f042 0201 	orreq.w	r2, r2, #1
 8009182:	3514      	adds	r5, #20
 8009184:	42ab      	cmp	r3, r5
 8009186:	bf08      	it	eq
 8009188:	f042 0201 	orreq.w	r2, r2, #1
 800918c:	b912      	cbnz	r2, 8009194 <HAL_DMA_IRQHandler+0x5a4>
 800918e:	4a3f      	ldr	r2, [pc, #252]	; (800928c <HAL_DMA_IRQHandler+0x69c>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d1a6      	bne.n	80090e2 <HAL_DMA_IRQHandler+0x4f2>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009194:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
 8009198:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800919a:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800919c:	f005 051f 	and.w	r5, r5, #31
 80091a0:	40ae      	lsls	r6, r5
 80091a2:	420e      	tst	r6, r1
 80091a4:	d019      	beq.n	80091da <HAL_DMA_IRQHandler+0x5ea>
 80091a6:	0757      	lsls	r7, r2, #29
 80091a8:	d517      	bpl.n	80091da <HAL_DMA_IRQHandler+0x5ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091aa:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80091ac:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091ae:	d54b      	bpl.n	8009248 <HAL_DMA_IRQHandler+0x658>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80091b0:	03d1      	lsls	r1, r2, #15
 80091b2:	d44f      	bmi.n	8009254 <HAL_DMA_IRQHandler+0x664>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80091b4:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f47f af02 	bne.w	8008fc2 <HAL_DMA_IRQHandler+0x3d2>
 80091be:	e790      	b.n	80090e2 <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80091c0:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80091c2:	2210      	movs	r2, #16
 80091c4:	fa02 fc0c 	lsl.w	ip, r2, ip
 80091c8:	ea17 0f0c 	tst.w	r7, ip
 80091cc:	f43f ae5c 	beq.w	8008e88 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	0752      	lsls	r2, r2, #29
 80091d4:	f57f ae58 	bpl.w	8008e88 <HAL_DMA_IRQHandler+0x298>
 80091d8:	e634      	b.n	8008e44 <HAL_DMA_IRQHandler+0x254>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80091da:	2602      	movs	r6, #2
 80091dc:	40ae      	lsls	r6, r5
 80091de:	420e      	tst	r6, r1
 80091e0:	d011      	beq.n	8009206 <HAL_DMA_IRQHandler+0x616>
 80091e2:	0797      	lsls	r7, r2, #30
 80091e4:	d50f      	bpl.n	8009206 <HAL_DMA_IRQHandler+0x616>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80091e6:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091e8:	0414      	lsls	r4, r2, #16
 80091ea:	d539      	bpl.n	8009260 <HAL_DMA_IRQHandler+0x670>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80091ec:	03d0      	lsls	r0, r2, #15
 80091ee:	d443      	bmi.n	8009278 <HAL_DMA_IRQHandler+0x688>
          if(hdma->XferM1CpltCallback != NULL)
 80091f0:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f47f aee4 	bne.w	8008fc2 <HAL_DMA_IRQHandler+0x3d2>
 80091fa:	e772      	b.n	80090e2 <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80091fc:	6813      	ldr	r3, [r2, #0]
 80091fe:	079f      	lsls	r7, r3, #30
 8009200:	f57f aeb1 	bpl.w	8008f66 <HAL_DMA_IRQHandler+0x376>
 8009204:	e69b      	b.n	8008f3e <HAL_DMA_IRQHandler+0x34e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009206:	2608      	movs	r6, #8
 8009208:	40ae      	lsls	r6, r5
 800920a:	420e      	tst	r6, r1
 800920c:	f43f af69 	beq.w	80090e2 <HAL_DMA_IRQHandler+0x4f2>
 8009210:	0711      	lsls	r1, r2, #28
 8009212:	f57f af66 	bpl.w	80090e2 <HAL_DMA_IRQHandler+0x4f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009216:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 8009218:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800921a:	f022 020e 	bic.w	r2, r2, #14
 800921e:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009220:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8009222:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009226:	fa03 f505 	lsl.w	r5, r3, r5
 800922a:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800922c:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8009230:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8009234:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8009238:	2a00      	cmp	r2, #0
 800923a:	f43f af52 	beq.w	80090e2 <HAL_DMA_IRQHandler+0x4f2>
        hdma->XferErrorCallback(hdma);
 800923e:	4648      	mov	r0, r9
}
 8009240:	b003      	add	sp, #12
 8009242:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
 8009246:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009248:	0692      	lsls	r2, r2, #26
 800924a:	d403      	bmi.n	8009254 <HAL_DMA_IRQHandler+0x664>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	f022 0204 	bic.w	r2, r2, #4
 8009252:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8009254:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8009258:	2b00      	cmp	r3, #0
 800925a:	f47f aeb2 	bne.w	8008fc2 <HAL_DMA_IRQHandler+0x3d2>
 800925e:	e740      	b.n	80090e2 <HAL_DMA_IRQHandler+0x4f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009260:	f012 0220 	ands.w	r2, r2, #32
 8009264:	d108      	bne.n	8009278 <HAL_DMA_IRQHandler+0x688>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009266:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8009268:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800926a:	f021 010a 	bic.w	r1, r1, #10
 800926e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8009270:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8009274:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8009278:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 800927c:	2b00      	cmp	r3, #0
 800927e:	f47f aea0 	bne.w	8008fc2 <HAL_DMA_IRQHandler+0x3d2>
 8009282:	e72e      	b.n	80090e2 <HAL_DMA_IRQHandler+0x4f2>
 8009284:	58025408 	.word	0x58025408
 8009288:	5802541c 	.word	0x5802541c
 800928c:	58025494 	.word	0x58025494

08009290 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009294:	680c      	ldr	r4, [r1, #0]
{
 8009296:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009298:	2c00      	cmp	r4, #0
 800929a:	f000 80a6 	beq.w	80093ea <HAL_GPIO_Init+0x15a>
 800929e:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092a2:	4f8e      	ldr	r7, [pc, #568]	; (80094dc <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
 80092a4:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80092a6:	2201      	movs	r2, #1
 80092a8:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 80092aa:	ea12 0e04 	ands.w	lr, r2, r4
 80092ae:	f000 8095 	beq.w	80093dc <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80092b2:	684d      	ldr	r5, [r1, #4]
 80092b4:	f005 0903 	and.w	r9, r5, #3
 80092b8:	f109 36ff 	add.w	r6, r9, #4294967295
 80092bc:	2e01      	cmp	r6, #1
 80092be:	f240 8097 	bls.w	80093f0 <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80092c2:	f1b9 0f03 	cmp.w	r9, #3
 80092c6:	f040 80d1 	bne.w	800946c <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80092ca:	fa09 f20c 	lsl.w	r2, r9, ip
 80092ce:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 80092d2:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80092d4:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80092d8:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80092dc:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 80092e0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80092e2:	d07b      	beq.n	80093dc <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092e4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80092e8:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80092ec:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092f0:	f042 0202 	orr.w	r2, r2, #2
 80092f4:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80092f8:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092fc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8009300:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8009304:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8009308:	f002 0202 	and.w	r2, r2, #2
 800930c:	9201      	str	r2, [sp, #4]
 800930e:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009310:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 8009312:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009316:	fa02 f209 	lsl.w	r2, r2, r9
 800931a:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800931e:	4e70      	ldr	r6, [pc, #448]	; (80094e0 <HAL_GPIO_Init+0x250>)
 8009320:	42b0      	cmp	r0, r6
 8009322:	d029      	beq.n	8009378 <HAL_GPIO_Init+0xe8>
 8009324:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009328:	42b0      	cmp	r0, r6
 800932a:	f000 80ac 	beq.w	8009486 <HAL_GPIO_Init+0x1f6>
 800932e:	4e6d      	ldr	r6, [pc, #436]	; (80094e4 <HAL_GPIO_Init+0x254>)
 8009330:	42b0      	cmp	r0, r6
 8009332:	f000 80ae 	beq.w	8009492 <HAL_GPIO_Init+0x202>
 8009336:	4e6c      	ldr	r6, [pc, #432]	; (80094e8 <HAL_GPIO_Init+0x258>)
 8009338:	42b0      	cmp	r0, r6
 800933a:	f000 809e 	beq.w	800947a <HAL_GPIO_Init+0x1ea>
 800933e:	4e6b      	ldr	r6, [pc, #428]	; (80094ec <HAL_GPIO_Init+0x25c>)
 8009340:	42b0      	cmp	r0, r6
 8009342:	f000 80b2 	beq.w	80094aa <HAL_GPIO_Init+0x21a>
 8009346:	4e6a      	ldr	r6, [pc, #424]	; (80094f0 <HAL_GPIO_Init+0x260>)
 8009348:	42b0      	cmp	r0, r6
 800934a:	f000 80b4 	beq.w	80094b6 <HAL_GPIO_Init+0x226>
 800934e:	4e69      	ldr	r6, [pc, #420]	; (80094f4 <HAL_GPIO_Init+0x264>)
 8009350:	42b0      	cmp	r0, r6
 8009352:	f000 80a4 	beq.w	800949e <HAL_GPIO_Init+0x20e>
 8009356:	4e68      	ldr	r6, [pc, #416]	; (80094f8 <HAL_GPIO_Init+0x268>)
 8009358:	42b0      	cmp	r0, r6
 800935a:	f000 80b2 	beq.w	80094c2 <HAL_GPIO_Init+0x232>
 800935e:	4e67      	ldr	r6, [pc, #412]	; (80094fc <HAL_GPIO_Init+0x26c>)
 8009360:	42b0      	cmp	r0, r6
 8009362:	f000 80b4 	beq.w	80094ce <HAL_GPIO_Init+0x23e>
 8009366:	4e66      	ldr	r6, [pc, #408]	; (8009500 <HAL_GPIO_Init+0x270>)
 8009368:	42b0      	cmp	r0, r6
 800936a:	bf0c      	ite	eq
 800936c:	2609      	moveq	r6, #9
 800936e:	260a      	movne	r6, #10
 8009370:	fa06 f909 	lsl.w	r9, r6, r9
 8009374:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009378:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800937c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009380:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8009382:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
 8009386:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8009388:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800938c:	bf54      	ite	pl
 800938e:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 8009392:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 8009396:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009398:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
 800939a:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800939c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80093a0:	bf54      	ite	pl
 80093a2:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 80093a6:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
 80093aa:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80093ac:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80093b0:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80093b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80093b6:	bf54      	ite	pl
 80093b8:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 80093bc:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80093c0:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80093c2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 80093c6:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80093ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 80093ce:	bf54      	ite	pl
 80093d0:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 80093d4:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80093d8:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 80093dc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80093de:	f10c 0c02 	add.w	ip, ip, #2
 80093e2:	fa34 f203 	lsrs.w	r2, r4, r3
 80093e6:	f47f af5e 	bne.w	80092a6 <HAL_GPIO_Init+0x16>
  }
}
 80093ea:	b003      	add	sp, #12
 80093ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80093f0:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 80093f4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80093f6:	fa08 f80c 	lsl.w	r8, r8, ip
 80093fa:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80093fe:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009400:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009404:	fa06 f60c 	lsl.w	r6, r6, ip
 8009408:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 800940c:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800940e:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8009412:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009416:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009418:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800941c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800941e:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8009420:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009422:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009426:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009428:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800942c:	fa06 f60c 	lsl.w	r6, r6, ip
 8009430:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8009434:	fa09 f20c 	lsl.w	r2, r9, ip
 8009438:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800943a:	f47f af4a 	bne.w	80092d2 <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800943e:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8009442:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009446:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800944a:	260f      	movs	r6, #15
 800944c:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8009450:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
 8009454:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009458:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800945c:	690e      	ldr	r6, [r1, #16]
 800945e:	fa06 f60b 	lsl.w	r6, r6, fp
 8009462:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8009466:	f8c9 6020 	str.w	r6, [r9, #32]
 800946a:	e732      	b.n	80092d2 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800946c:	f04f 0803 	mov.w	r8, #3
 8009470:	fa08 f80c 	lsl.w	r8, r8, ip
 8009474:	ea6f 0808 	mvn.w	r8, r8
 8009478:	e7d2      	b.n	8009420 <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800947a:	2603      	movs	r6, #3
 800947c:	fa06 f909 	lsl.w	r9, r6, r9
 8009480:	ea42 0209 	orr.w	r2, r2, r9
 8009484:	e778      	b.n	8009378 <HAL_GPIO_Init+0xe8>
 8009486:	2601      	movs	r6, #1
 8009488:	fa06 f909 	lsl.w	r9, r6, r9
 800948c:	ea42 0209 	orr.w	r2, r2, r9
 8009490:	e772      	b.n	8009378 <HAL_GPIO_Init+0xe8>
 8009492:	2602      	movs	r6, #2
 8009494:	fa06 f909 	lsl.w	r9, r6, r9
 8009498:	ea42 0209 	orr.w	r2, r2, r9
 800949c:	e76c      	b.n	8009378 <HAL_GPIO_Init+0xe8>
 800949e:	2606      	movs	r6, #6
 80094a0:	fa06 f909 	lsl.w	r9, r6, r9
 80094a4:	ea42 0209 	orr.w	r2, r2, r9
 80094a8:	e766      	b.n	8009378 <HAL_GPIO_Init+0xe8>
 80094aa:	2604      	movs	r6, #4
 80094ac:	fa06 f909 	lsl.w	r9, r6, r9
 80094b0:	ea42 0209 	orr.w	r2, r2, r9
 80094b4:	e760      	b.n	8009378 <HAL_GPIO_Init+0xe8>
 80094b6:	2605      	movs	r6, #5
 80094b8:	fa06 f909 	lsl.w	r9, r6, r9
 80094bc:	ea42 0209 	orr.w	r2, r2, r9
 80094c0:	e75a      	b.n	8009378 <HAL_GPIO_Init+0xe8>
 80094c2:	2607      	movs	r6, #7
 80094c4:	fa06 f909 	lsl.w	r9, r6, r9
 80094c8:	ea42 0209 	orr.w	r2, r2, r9
 80094cc:	e754      	b.n	8009378 <HAL_GPIO_Init+0xe8>
 80094ce:	2608      	movs	r6, #8
 80094d0:	fa06 f909 	lsl.w	r9, r6, r9
 80094d4:	ea42 0209 	orr.w	r2, r2, r9
 80094d8:	e74e      	b.n	8009378 <HAL_GPIO_Init+0xe8>
 80094da:	bf00      	nop
 80094dc:	58024400 	.word	0x58024400
 80094e0:	58020000 	.word	0x58020000
 80094e4:	58020800 	.word	0x58020800
 80094e8:	58020c00 	.word	0x58020c00
 80094ec:	58021000 	.word	0x58021000
 80094f0:	58021400 	.word	0x58021400
 80094f4:	58021800 	.word	0x58021800
 80094f8:	58021c00 	.word	0x58021c00
 80094fc:	58022000 	.word	0x58022000
 8009500:	58022400 	.word	0x58022400

08009504 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009504:	6903      	ldr	r3, [r0, #16]
 8009506:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8009508:	bf14      	ite	ne
 800950a:	2001      	movne	r0, #1
 800950c:	2000      	moveq	r0, #0
 800950e:	4770      	bx	lr

08009510 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009510:	b902      	cbnz	r2, 8009514 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009512:	0409      	lsls	r1, r1, #16
 8009514:	6181      	str	r1, [r0, #24]
  }
}
 8009516:	4770      	bx	lr

08009518 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009518:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800951c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8009520:	4201      	tst	r1, r0
 8009522:	d100      	bne.n	8009526 <HAL_GPIO_EXTI_IRQHandler+0xe>
 8009524:	4770      	bx	lr
{
 8009526:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009528:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800952c:	f7f7 ff68 	bl	8001400 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8009530:	bd08      	pop	{r3, pc}
 8009532:	bf00      	nop

08009534 <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8009534:	2800      	cmp	r0, #0
 8009536:	d05e      	beq.n	80095f6 <HAL_LPTIM_Init+0xc2>
{
 8009538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800953a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800953e:	4604      	mov	r4, r0
 8009540:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009544:	2b00      	cmp	r3, #0
 8009546:	d051      	beq.n	80095ec <HAL_LPTIM_Init+0xb8>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8009548:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800954a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800954c:	e9d4 1500 	ldrd	r1, r5, [r4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8009550:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009554:	2d01      	cmp	r5, #1
  tmpcfgr = hlptim->Instance->CFGR;
 8009556:	68c8      	ldr	r0, [r1, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009558:	d03c      	beq.n	80095d4 <HAL_LPTIM_Init+0xa0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800955a:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 800955e:	d039      	beq.n	80095d4 <HAL_LPTIM_Init+0xa0>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8009560:	6962      	ldr	r2, [r4, #20]
 8009562:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009566:	429a      	cmp	r2, r3
 8009568:	d003      	beq.n	8009572 <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800956a:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 800956e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009572:	68a3      	ldr	r3, [r4, #8]
              hlptim->Init.Clock.Prescaler |
 8009574:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009576:	432b      	orrs	r3, r5
              hlptim->Init.Clock.Prescaler |
 8009578:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 800957a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800957c:	4333      	orrs	r3, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800957e:	4e22      	ldr	r6, [pc, #136]	; (8009608 <HAL_LPTIM_Init+0xd4>)
              hlptim->Init.UpdateMode      |
 8009580:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8009582:	4006      	ands	r6, r0
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009584:	4333      	orrs	r3, r6
              hlptim->Init.CounterSource);

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8009586:	b1ed      	cbz	r5, 80095c4 <HAL_LPTIM_Init+0x90>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009588:	2d01      	cmp	r5, #1
 800958a:	d11f      	bne.n	80095cc <HAL_LPTIM_Init+0x98>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800958c:	e9d4 0503 	ldrd	r0, r5, [r4, #12]
 8009590:	4328      	orrs	r0, r5
 8009592:	4303      	orrs	r3, r0
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8009594:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009598:	4282      	cmp	r2, r0
 800959a:	d004      	beq.n	80095a6 <HAL_LPTIM_Init+0x72>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800959c:	69a0      	ldr	r0, [r4, #24]
 800959e:	4302      	orrs	r2, r0
                hlptim->Init.Trigger.ActiveEdge |
 80095a0:	69e0      	ldr	r0, [r4, #28]
 80095a2:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80095a4:	4313      	orrs	r3, r2

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80095a6:	4a19      	ldr	r2, [pc, #100]	; (800960c <HAL_LPTIM_Init+0xd8>)
  hlptim->Instance->CFGR = tmpcfgr;
 80095a8:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80095aa:	4291      	cmp	r1, r2
 80095ac:	d015      	beq.n	80095da <HAL_LPTIM_Init+0xa6>
 80095ae:	4b18      	ldr	r3, [pc, #96]	; (8009610 <HAL_LPTIM_Init+0xdc>)
 80095b0:	4299      	cmp	r1, r3
 80095b2:	d012      	beq.n	80095da <HAL_LPTIM_Init+0xa6>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 80095b4:	4b17      	ldr	r3, [pc, #92]	; (8009614 <HAL_LPTIM_Init+0xe0>)
 80095b6:	4299      	cmp	r1, r3
 80095b8:	d01f      	beq.n	80095fa <HAL_LPTIM_Init+0xc6>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80095ba:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 80095bc:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 80095be:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80095c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80095c4:	69e0      	ldr	r0, [r4, #28]
 80095c6:	6925      	ldr	r5, [r4, #16]
 80095c8:	4328      	orrs	r0, r5
 80095ca:	4303      	orrs	r3, r0
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80095cc:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 80095d0:	d1e0      	bne.n	8009594 <HAL_LPTIM_Init+0x60>
 80095d2:	e7db      	b.n	800958c <HAL_LPTIM_Init+0x58>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80095d4:	f020 001e 	bic.w	r0, r0, #30
 80095d8:	e7c2      	b.n	8009560 <HAL_LPTIM_Init+0x2c>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80095da:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 80095de:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80095e0:	4313      	orrs	r3, r2
 80095e2:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 80095e4:	2301      	movs	r3, #1
 80095e6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80095ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 80095ec:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 80095f0:	f7fc fcda 	bl	8005fa8 <HAL_LPTIM_MspInit>
 80095f4:	e7a8      	b.n	8009548 <HAL_LPTIM_Init+0x14>
    return HAL_ERROR;
 80095f6:	2001      	movs	r0, #1
}
 80095f8:	4770      	bx	lr
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80095fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80095fc:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80095fe:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009600:	2301      	movs	r3, #1
 8009602:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8009606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009608:	ff19f1fe 	.word	0xff19f1fe
 800960c:	40002400 	.word	0x40002400
 8009610:	58002400 	.word	0x58002400
 8009614:	58002800 	.word	0x58002800

08009618 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800961a:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800961c:	2800      	cmp	r0, #0
 800961e:	f000 8088 	beq.w	8009732 <HAL_PCD_Init+0x11a>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009622:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8009626:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8009628:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800962a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800962e:	2b00      	cmp	r3, #0
 8009630:	d079      	beq.n	8009726 <HAL_PCD_Init+0x10e>
 8009632:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009634:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009636:	462e      	mov	r6, r5
 8009638:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800963a:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800963e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009640:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009642:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8009646:	bf08      	it	eq
 8009648:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800964a:	f004 f9b1 	bl	800d9b0 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800964e:	f856 eb10 	ldr.w	lr, [r6], #16
 8009652:	46b4      	mov	ip, r6
 8009654:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800965a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800965e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009660:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009664:	e884 0003 	stmia.w	r4, {r0, r1}
 8009668:	4670      	mov	r0, lr
 800966a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800966e:	f004 f87f 	bl	800d770 <USB_CoreInit>
 8009672:	4604      	mov	r4, r0
 8009674:	b130      	cbz	r0, 8009684 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8009676:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009678:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800967a:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800967c:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 8009680:	b00b      	add	sp, #44	; 0x2c
 8009682:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009684:	4601      	mov	r1, r0
 8009686:	6828      	ldr	r0, [r5, #0]
 8009688:	f004 f99a 	bl	800d9c0 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800968c:	6868      	ldr	r0, [r5, #4]
 800968e:	b358      	cbz	r0, 80096e8 <HAL_PCD_Init+0xd0>
 8009690:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8009692:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009696:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8009698:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800969c:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 80096a0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 80096a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80096a8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096ac:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 80096b0:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096b4:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80096b6:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 80096ba:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 80096bc:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096c0:	d3ea      	bcc.n	8009698 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 80096c2:	2200      	movs	r2, #0
 80096c4:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096c8:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 80096ca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 80096ce:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096d2:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 80096d4:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096d8:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80096da:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 80096de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80096e2:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096e6:	d3ed      	bcc.n	80096c4 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80096e8:	466c      	mov	r4, sp
 80096ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80096ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80096ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80096f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80096f2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80096f6:	e884 0003 	stmia.w	r4, {r0, r1}
 80096fa:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80096fe:	6828      	ldr	r0, [r5, #0]
 8009700:	f004 f994 	bl	800da2c <USB_DevInit>
 8009704:	4604      	mov	r4, r0
 8009706:	2800      	cmp	r0, #0
 8009708:	d1b5      	bne.n	8009676 <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 800970a:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800970c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800970e:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 8009712:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8009714:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8009718:	d00f      	beq.n	800973a <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 800971a:	6828      	ldr	r0, [r5, #0]
 800971c:	f004 fe00 	bl	800e320 <USB_DevDisconnect>
}
 8009720:	4620      	mov	r0, r4
 8009722:	b00b      	add	sp, #44	; 0x2c
 8009724:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8009726:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800972a:	f005 fe55 	bl	800f3d8 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800972e:	6828      	ldr	r0, [r5, #0]
 8009730:	e780      	b.n	8009634 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 8009732:	2401      	movs	r4, #1
}
 8009734:	4620      	mov	r0, r4
 8009736:	b00b      	add	sp, #44	; 0x2c
 8009738:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800973a:	4628      	mov	r0, r5
 800973c:	f000 fce0 	bl	800a100 <HAL_PCDEx_ActivateLPM>
 8009740:	e7eb      	b.n	800971a <HAL_PCD_Init+0x102>
 8009742:	bf00      	nop

08009744 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009744:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8009746:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 800974a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800974c:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800974e:	2b01      	cmp	r3, #1
 8009750:	d017      	beq.n	8009782 <HAL_PCD_Start+0x3e>
 8009752:	2201      	movs	r2, #1

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009754:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009756:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 8009758:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800975c:	d009      	beq.n	8009772 <HAL_PCD_Start+0x2e>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 800975e:	f004 f91f 	bl	800d9a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009762:	6820      	ldr	r0, [r4, #0]
 8009764:	f004 fdcc 	bl	800e300 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009768:	2300      	movs	r3, #0

  return HAL_OK;
 800976a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800976c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 8009770:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009772:	69a3      	ldr	r3, [r4, #24]
 8009774:	4293      	cmp	r3, r2
 8009776:	d0f2      	beq.n	800975e <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009778:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800977a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800977e:	6383      	str	r3, [r0, #56]	; 0x38
 8009780:	e7ed      	b.n	800975e <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8009782:	2002      	movs	r0, #2
}
 8009784:	bd10      	pop	{r4, pc}
 8009786:	bf00      	nop

08009788 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800978c:	6807      	ldr	r7, [r0, #0]
{
 800978e:	b089      	sub	sp, #36	; 0x24
 8009790:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009792:	4638      	mov	r0, r7
 8009794:	f004 fe02 	bl	800e39c <USB_GetMode>
 8009798:	b110      	cbz	r0, 80097a0 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800979a:	b009      	add	sp, #36	; 0x24
 800979c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80097a0:	4683      	mov	fp, r0
 80097a2:	6820      	ldr	r0, [r4, #0]
 80097a4:	f004 fdcc 	bl	800e340 <USB_ReadInterrupts>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d0f6      	beq.n	800979a <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80097ac:	6820      	ldr	r0, [r4, #0]
 80097ae:	f004 fdc7 	bl	800e340 <USB_ReadInterrupts>
 80097b2:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80097b6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80097b8:	d003      	beq.n	80097c2 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80097ba:	6943      	ldr	r3, [r0, #20]
 80097bc:	f003 0302 	and.w	r3, r3, #2
 80097c0:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80097c2:	f004 fdbd 	bl	800e340 <USB_ReadInterrupts>
 80097c6:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80097ca:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80097cc:	d012      	beq.n	80097f4 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80097ce:	6983      	ldr	r3, [r0, #24]
 80097d0:	f023 0310 	bic.w	r3, r3, #16
 80097d4:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 80097d6:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80097d8:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80097dc:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	f000 8261 	beq.w	8009ca8 <HAL_PCD_IRQHandler+0x520>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80097e6:	2b06      	cmp	r3, #6
 80097e8:	f000 81b1 	beq.w	8009b4e <HAL_PCD_IRQHandler+0x3c6>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80097ec:	6983      	ldr	r3, [r0, #24]
 80097ee:	f043 0310 	orr.w	r3, r3, #16
 80097f2:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80097f4:	f004 fda4 	bl	800e340 <USB_ReadInterrupts>
 80097f8:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80097fc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80097fe:	f040 80cf 	bne.w	80099a0 <HAL_PCD_IRQHandler+0x218>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009802:	f004 fd9d 	bl	800e340 <USB_ReadInterrupts>
 8009806:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800980a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800980c:	d175      	bne.n	80098fa <HAL_PCD_IRQHandler+0x172>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800980e:	f004 fd97 	bl	800e340 <USB_ReadInterrupts>
 8009812:	2800      	cmp	r0, #0
 8009814:	db5d      	blt.n	80098d2 <HAL_PCD_IRQHandler+0x14a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009816:	6820      	ldr	r0, [r4, #0]
 8009818:	f004 fd92 	bl	800e340 <USB_ReadInterrupts>
 800981c:	0500      	lsls	r0, r0, #20
 800981e:	d44d      	bmi.n	80098bc <HAL_PCD_IRQHandler+0x134>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009820:	6820      	ldr	r0, [r4, #0]
 8009822:	f004 fd8d 	bl	800e340 <USB_ReadInterrupts>
 8009826:	0102      	lsls	r2, r0, #4
 8009828:	d514      	bpl.n	8009854 <HAL_PCD_IRQHandler+0xcc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800982a:	6822      	ldr	r2, [r4, #0]
 800982c:	6953      	ldr	r3, [r2, #20]
 800982e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009832:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8009834:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8009838:	2b00      	cmp	r3, #0
 800983a:	f040 8172 	bne.w	8009b22 <HAL_PCD_IRQHandler+0x39a>
        hpcd->LPM_State = LPM_L1;
 800983e:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009840:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 8009842:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009846:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009848:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800984c:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009850:	f000 fc6e 	bl	800a130 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009854:	6820      	ldr	r0, [r4, #0]
 8009856:	f004 fd73 	bl	800e340 <USB_ReadInterrupts>
 800985a:	04c3      	lsls	r3, r0, #19
 800985c:	f100 8116 	bmi.w	8009a8c <HAL_PCD_IRQHandler+0x304>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009860:	6820      	ldr	r0, [r4, #0]
 8009862:	f004 fd6d 	bl	800e340 <USB_ReadInterrupts>
 8009866:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800986a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800986c:	f040 80f7 	bne.w	8009a5e <HAL_PCD_IRQHandler+0x2d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009870:	f004 fd66 	bl	800e340 <USB_ReadInterrupts>
 8009874:	0707      	lsls	r7, r0, #28
 8009876:	f100 80e9 	bmi.w	8009a4c <HAL_PCD_IRQHandler+0x2c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800987a:	6820      	ldr	r0, [r4, #0]
 800987c:	f004 fd60 	bl	800e340 <USB_ReadInterrupts>
 8009880:	02c6      	lsls	r6, r0, #11
 8009882:	f100 80d9 	bmi.w	8009a38 <HAL_PCD_IRQHandler+0x2b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009886:	6820      	ldr	r0, [r4, #0]
 8009888:	f004 fd5a 	bl	800e340 <USB_ReadInterrupts>
 800988c:	0285      	lsls	r5, r0, #10
 800988e:	f100 80c9 	bmi.w	8009a24 <HAL_PCD_IRQHandler+0x29c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009892:	6820      	ldr	r0, [r4, #0]
 8009894:	f004 fd54 	bl	800e340 <USB_ReadInterrupts>
 8009898:	0040      	lsls	r0, r0, #1
 800989a:	f100 80ba 	bmi.w	8009a12 <HAL_PCD_IRQHandler+0x28a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800989e:	6820      	ldr	r0, [r4, #0]
 80098a0:	f004 fd4e 	bl	800e340 <USB_ReadInterrupts>
 80098a4:	0741      	lsls	r1, r0, #29
 80098a6:	f57f af78 	bpl.w	800979a <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80098ae:	076a      	lsls	r2, r5, #29
 80098b0:	f100 821b 	bmi.w	8009cea <HAL_PCD_IRQHandler+0x562>
      hpcd->Instance->GOTGINT |= temp;
 80098b4:	685a      	ldr	r2, [r3, #4]
 80098b6:	432a      	orrs	r2, r5
 80098b8:	605a      	str	r2, [r3, #4]
 80098ba:	e76e      	b.n	800979a <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80098bc:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80098c0:	07d9      	lsls	r1, r3, #31
 80098c2:	f100 820e 	bmi.w	8009ce2 <HAL_PCD_IRQHandler+0x55a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80098c6:	6820      	ldr	r0, [r4, #0]
 80098c8:	6943      	ldr	r3, [r0, #20]
 80098ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098ce:	6143      	str	r3, [r0, #20]
 80098d0:	e7a7      	b.n	8009822 <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80098d2:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 80098d6:	f022 0201 	bic.w	r2, r2, #1
 80098da:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80098de:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	f000 812c 	beq.w	8009b40 <HAL_PCD_IRQHandler+0x3b8>
        HAL_PCD_ResumeCallback(hpcd);
 80098e8:	4620      	mov	r0, r4
 80098ea:	f005 fe1f 	bl	800f52c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80098ee:	6820      	ldr	r0, [r4, #0]
 80098f0:	6943      	ldr	r3, [r0, #20]
 80098f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098f6:	6143      	str	r3, [r0, #20]
 80098f8:	e78e      	b.n	8009818 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80098fa:	f004 fd2d 	bl	800e358 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 80098fe:	4680      	mov	r8, r0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009900:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 8009902:	f1b8 0f00 	cmp.w	r8, #0
 8009906:	d082      	beq.n	800980e <HAL_PCD_IRQHandler+0x86>
      epnum = 0U;
 8009908:	f04f 0a00 	mov.w	sl, #0
 800990c:	f507 6910 	add.w	r9, r7, #2304	; 0x900
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009910:	9703      	str	r7, [sp, #12]
 8009912:	4626      	mov	r6, r4
 8009914:	4657      	mov	r7, sl
 8009916:	f8cd b010 	str.w	fp, [sp, #16]
 800991a:	e009      	b.n	8009930 <HAL_PCD_IRQHandler+0x1a8>
      while (ep_intr != 0U)
 800991c:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 8009920:	f107 0701 	add.w	r7, r7, #1
      while (ep_intr != 0U)
 8009924:	f106 061c 	add.w	r6, r6, #28
 8009928:	f109 0920 	add.w	r9, r9, #32
 800992c:	f000 8124 	beq.w	8009b78 <HAL_PCD_IRQHandler+0x3f0>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009930:	f018 0f01 	tst.w	r8, #1
 8009934:	d0f2      	beq.n	800991c <HAL_PCD_IRQHandler+0x194>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009936:	fa5f fa87 	uxtb.w	sl, r7
 800993a:	4651      	mov	r1, sl
 800993c:	f004 fd1e 	bl	800e37c <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009940:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009942:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009944:	d515      	bpl.n	8009972 <HAL_PCD_IRQHandler+0x1ea>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009946:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009948:	f007 030f 	and.w	r3, r7, #15
 800994c:	2201      	movs	r2, #1
 800994e:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009950:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 8009954:	ea23 0302 	bic.w	r3, r3, r2
 8009958:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800995c:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 800995e:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009960:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 8009964:	4299      	cmp	r1, r3
 8009966:	f000 81c5 	beq.w	8009cf4 <HAL_PCD_IRQHandler+0x56c>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800996a:	4651      	mov	r1, sl
 800996c:	4620      	mov	r0, r4
 800996e:	f005 fda1 	bl	800f4b4 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009972:	0728      	lsls	r0, r5, #28
 8009974:	d502      	bpl.n	800997c <HAL_PCD_IRQHandler+0x1f4>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009976:	2308      	movs	r3, #8
 8009978:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800997c:	06e9      	lsls	r1, r5, #27
 800997e:	d502      	bpl.n	8009986 <HAL_PCD_IRQHandler+0x1fe>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009980:	2310      	movs	r3, #16
 8009982:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009986:	066a      	lsls	r2, r5, #25
 8009988:	d502      	bpl.n	8009990 <HAL_PCD_IRQHandler+0x208>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800998a:	2340      	movs	r3, #64	; 0x40
 800998c:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009990:	07ab      	lsls	r3, r5, #30
 8009992:	f100 8181 	bmi.w	8009c98 <HAL_PCD_IRQHandler+0x510>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009996:	062d      	lsls	r5, r5, #24
 8009998:	f100 812a 	bmi.w	8009bf0 <HAL_PCD_IRQHandler+0x468>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800999c:	6820      	ldr	r0, [r4, #0]
 800999e:	e7bd      	b.n	800991c <HAL_PCD_IRQHandler+0x194>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80099a0:	f004 fcd2 	bl	800e348 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80099a4:	4605      	mov	r5, r0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80099a6:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 80099a8:	2d00      	cmp	r5, #0
 80099aa:	f43f af2a 	beq.w	8009802 <HAL_PCD_IRQHandler+0x7a>
 80099ae:	f507 6630 	add.w	r6, r7, #2816	; 0xb00
 80099b2:	46a2      	mov	sl, r4
      epnum = 0U;
 80099b4:	f04f 0800 	mov.w	r8, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80099b8:	9703      	str	r7, [sp, #12]
 80099ba:	e008      	b.n	80099ce <HAL_PCD_IRQHandler+0x246>
      while (ep_intr != 0U)
 80099bc:	086d      	lsrs	r5, r5, #1
        epnum++;
 80099be:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 80099c2:	f106 0620 	add.w	r6, r6, #32
 80099c6:	f10a 0a1c 	add.w	sl, sl, #28
 80099ca:	f000 80d3 	beq.w	8009b74 <HAL_PCD_IRQHandler+0x3ec>
        if ((ep_intr & 0x1U) != 0U)
 80099ce:	07ef      	lsls	r7, r5, #31
 80099d0:	d5f4      	bpl.n	80099bc <HAL_PCD_IRQHandler+0x234>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80099d2:	fa5f f788 	uxtb.w	r7, r8
 80099d6:	4639      	mov	r1, r7
 80099d8:	f004 fcc6 	bl	800e368 <USB_ReadDevOutEPInterrupt>
 80099dc:	4681      	mov	r9, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099de:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80099e0:	f019 0f01 	tst.w	r9, #1
 80099e4:	f040 80e5 	bne.w	8009bb2 <HAL_PCD_IRQHandler+0x42a>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80099e8:	f019 0f08 	tst.w	r9, #8
 80099ec:	f040 80c7 	bne.w	8009b7e <HAL_PCD_IRQHandler+0x3f6>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80099f0:	f019 0f10 	tst.w	r9, #16
 80099f4:	d001      	beq.n	80099fa <HAL_PCD_IRQHandler+0x272>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80099f6:	2310      	movs	r3, #16
 80099f8:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80099fa:	f019 0f20 	tst.w	r9, #32
 80099fe:	d001      	beq.n	8009a04 <HAL_PCD_IRQHandler+0x27c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a00:	2320      	movs	r3, #32
 8009a02:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009a04:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8009a08:	d0d8      	beq.n	80099bc <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a0e:	60b3      	str	r3, [r6, #8]
 8009a10:	e7d4      	b.n	80099bc <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_ConnectCallback(hpcd);
 8009a12:	4620      	mov	r0, r4
 8009a14:	f005 fd96 	bl	800f544 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009a18:	6820      	ldr	r0, [r4, #0]
 8009a1a:	6943      	ldr	r3, [r0, #20]
 8009a1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a20:	6143      	str	r3, [r0, #20]
 8009a22:	e73d      	b.n	80098a0 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009a24:	4620      	mov	r0, r4
 8009a26:	2100      	movs	r1, #0
 8009a28:	f005 fd84 	bl	800f534 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009a2c:	6820      	ldr	r0, [r4, #0]
 8009a2e:	6943      	ldr	r3, [r0, #20]
 8009a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a34:	6143      	str	r3, [r0, #20]
 8009a36:	e72d      	b.n	8009894 <HAL_PCD_IRQHandler+0x10c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009a38:	4620      	mov	r0, r4
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	f005 fd7e 	bl	800f53c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009a40:	6820      	ldr	r0, [r4, #0]
 8009a42:	6943      	ldr	r3, [r0, #20]
 8009a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a48:	6143      	str	r3, [r0, #20]
 8009a4a:	e71d      	b.n	8009888 <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f005 fd3b 	bl	800f4c8 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009a52:	6820      	ldr	r0, [r4, #0]
 8009a54:	6943      	ldr	r3, [r0, #20]
 8009a56:	f003 0308 	and.w	r3, r3, #8
 8009a5a:	6143      	str	r3, [r0, #20]
 8009a5c:	e70e      	b.n	800987c <HAL_PCD_IRQHandler+0xf4>
      (void)USB_ActivateSetup(hpcd->Instance);
 8009a5e:	f004 fca1 	bl	800e3a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009a62:	6820      	ldr	r0, [r4, #0]
 8009a64:	f004 f91a 	bl	800dc9c <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009a68:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009a6a:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009a6c:	f001 f900 	bl	800ac70 <HAL_RCC_GetHCLKFreq>
 8009a70:	7b22      	ldrb	r2, [r4, #12]
 8009a72:	4601      	mov	r1, r0
 8009a74:	4628      	mov	r0, r5
 8009a76:	f003 ff19 	bl	800d8ac <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f005 fd28 	bl	800f4d0 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009a80:	6820      	ldr	r0, [r4, #0]
 8009a82:	6943      	ldr	r3, [r0, #20]
 8009a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a88:	6143      	str	r3, [r0, #20]
 8009a8a:	e6f1      	b.n	8009870 <HAL_PCD_IRQHandler+0xe8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009a8c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8009a90:	f507 6500 	add.w	r5, r7, #2048	; 0x800
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009a94:	2110      	movs	r1, #16
 8009a96:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009a98:	f023 0301 	bic.w	r3, r3, #1
 8009a9c:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009a9e:	f004 f8d5 	bl	800dc4c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009aa2:	6860      	ldr	r0, [r4, #4]
 8009aa4:	b1e0      	cbz	r0, 8009ae0 <HAL_PCD_IRQHandler+0x358>
 8009aa6:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009aaa:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8009aae:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ab0:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009ab4:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ab6:	3320      	adds	r3, #32
 8009ab8:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009aba:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8009abe:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009ac2:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009ac6:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8009aca:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8009ace:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009ad2:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8009ad6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8009ada:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ade:	d1e6      	bne.n	8009aae <HAL_PCD_IRQHandler+0x326>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009ae0:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009ae2:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009ae4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009ae8:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009aea:	b9f2      	cbnz	r2, 8009b2a <HAL_PCD_IRQHandler+0x3a2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009aec:	696a      	ldr	r2, [r5, #20]
 8009aee:	f242 032b 	movw	r3, #8235	; 0x202b
 8009af2:	4313      	orrs	r3, r2
 8009af4:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009af6:	692b      	ldr	r3, [r5, #16]
 8009af8:	f043 030b 	orr.w	r3, r3, #11
 8009afc:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009afe:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009b02:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009b06:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009b08:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009b0c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009b0e:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009b12:	f004 fc5d 	bl	800e3d0 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009b16:	6820      	ldr	r0, [r4, #0]
 8009b18:	6943      	ldr	r3, [r0, #20]
 8009b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b1e:	6143      	str	r3, [r0, #20]
 8009b20:	e69f      	b.n	8009862 <HAL_PCD_IRQHandler+0xda>
        HAL_PCD_SuspendCallback(hpcd);
 8009b22:	4620      	mov	r0, r4
 8009b24:	f005 fcea 	bl	800f4fc <HAL_PCD_SuspendCallback>
 8009b28:	e694      	b.n	8009854 <HAL_PCD_IRQHandler+0xcc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009b2a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8009b2e:	f043 030b 	orr.w	r3, r3, #11
 8009b32:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009b36:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8009b38:	f043 030b 	orr.w	r3, r3, #11
 8009b3c:	646b      	str	r3, [r5, #68]	; 0x44
 8009b3e:	e7de      	b.n	8009afe <HAL_PCD_IRQHandler+0x376>
        hpcd->LPM_State = LPM_L0;
 8009b40:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009b42:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8009b44:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009b48:	f000 faf2 	bl	800a130 <HAL_PCDEx_LPM_Callback>
 8009b4c:	e6cf      	b.n	80098ee <HAL_PCD_IRQHandler+0x166>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009b4e:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009b52:	2208      	movs	r2, #8
 8009b54:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8009b58:	4638      	mov	r0, r7
 8009b5a:	f004 fb39 	bl	800e1d0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009b5e:	f3c5 130a 	ubfx	r3, r5, #4, #11
 8009b62:	eb04 0286 	add.w	r2, r4, r6, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009b66:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009b68:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8009b6c:	440b      	add	r3, r1
 8009b6e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8009b72:	e63b      	b.n	80097ec <HAL_PCD_IRQHandler+0x64>
 8009b74:	9f03      	ldr	r7, [sp, #12]
 8009b76:	e644      	b.n	8009802 <HAL_PCD_IRQHandler+0x7a>
 8009b78:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 8009b7c:	e647      	b.n	800980e <HAL_PCD_IRQHandler+0x86>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009b7e:	2208      	movs	r2, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009b80:	eb00 1348 	add.w	r3, r0, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009b84:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009b8a:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b8c:	4890      	ldr	r0, [pc, #576]	; (8009dd0 <HAL_PCD_IRQHandler+0x648>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009b8e:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b90:	4282      	cmp	r2, r0
 8009b92:	f240 80c0 	bls.w	8009d16 <HAL_PCD_IRQHandler+0x58e>
 8009b96:	040a      	lsls	r2, r1, #16
 8009b98:	d502      	bpl.n	8009ba0 <HAL_PCD_IRQHandler+0x418>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009b9e:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f005 fc77 	bl	800f494 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009ba6:	6921      	ldr	r1, [r4, #16]
 8009ba8:	2901      	cmp	r1, #1
 8009baa:	f000 80df 	beq.w	8009d6c <HAL_PCD_IRQHandler+0x5e4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009bae:	6820      	ldr	r0, [r4, #0]
 8009bb0:	e71e      	b.n	80099f0 <HAL_PCD_IRQHandler+0x268>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009bb2:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 8009bb4:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009bb6:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009bb8:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 8009bbc:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009bbe:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009bc2:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 8009bc6:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8009bc8:	f000 80aa 	beq.w	8009d20 <HAL_PCD_IRQHandler+0x598>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009bcc:	4981      	ldr	r1, [pc, #516]	; (8009dd4 <HAL_PCD_IRQHandler+0x64c>)
 8009bce:	458c      	cmp	ip, r1
 8009bd0:	f000 80bf 	beq.w	8009d52 <HAL_PCD_IRQHandler+0x5ca>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009bd4:	f1b8 0f00 	cmp.w	r8, #0
 8009bd8:	d104      	bne.n	8009be4 <HAL_PCD_IRQHandler+0x45c>
 8009bda:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8009bde:	2a00      	cmp	r2, #0
 8009be0:	f000 80ef 	beq.w	8009dc2 <HAL_PCD_IRQHandler+0x63a>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009be4:	4620      	mov	r0, r4
 8009be6:	4639      	mov	r1, r7
 8009be8:	f005 fc5a 	bl	800f4a0 <HAL_PCD_DataOutStageCallback>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bec:	6820      	ldr	r0, [r4, #0]
 8009bee:	e6fb      	b.n	80099e8 <HAL_PCD_IRQHandler+0x260>
  if (ep->xfer_count > ep->xfer_len)
 8009bf0:	e9d6 5314 	ldrd	r5, r3, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bf4:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 8009bf8:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bfa:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 8009bfc:	f63f ae8e 	bhi.w	800991c <HAL_PCD_IRQHandler+0x194>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009c00:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8009c04:	6c71      	ldr	r1, [r6, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c06:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009c0a:	eb02 1247 	add.w	r2, r2, r7, lsl #5
 8009c0e:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 8009c10:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 8009c12:	428a      	cmp	r2, r1
 8009c14:	bf28      	it	cs
 8009c16:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009c18:	9905      	ldr	r1, [sp, #20]
 8009c1a:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 8009c1c:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009c1e:	b289      	uxth	r1, r1
 8009c20:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 8009c24:	f0c0 8091 	bcc.w	8009d4a <HAL_PCD_IRQHandler+0x5c2>
 8009c28:	464a      	mov	r2, r9
 8009c2a:	9706      	str	r7, [sp, #24]
 8009c2c:	46c1      	mov	r9, r8
 8009c2e:	4627      	mov	r7, r4
 8009c30:	46d0      	mov	r8, sl
 8009c32:	9c05      	ldr	r4, [sp, #20]
 8009c34:	4692      	mov	sl, r2
 8009c36:	e018      	b.n	8009c6a <HAL_PCD_IRQHandler+0x4e2>
 8009c38:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009c3a:	4642      	mov	r2, r8
 8009c3c:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8009c3e:	4658      	mov	r0, fp
 8009c40:	429d      	cmp	r5, r3
 8009c42:	bf28      	it	cs
 8009c44:	461d      	movcs	r5, r3
 8009c46:	7c3b      	ldrb	r3, [r7, #16]
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	b2ab      	uxth	r3, r5
 8009c4c:	f004 faaa 	bl	800e1a4 <USB_WritePacket>
    ep->xfer_buff  += len;
 8009c50:	6cb3      	ldr	r3, [r6, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009c52:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 8009c54:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009c56:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 8009c58:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 8009c5a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8009c5c:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 8009c5e:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009c60:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 8009c64:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009c66:	d368      	bcc.n	8009d3a <HAL_PCD_IRQHandler+0x5b2>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009c68:	6d35      	ldr	r5, [r6, #80]	; 0x50
 8009c6a:	42ab      	cmp	r3, r5
    len = ep->xfer_len - ep->xfer_count;
 8009c6c:	eba5 0503 	sub.w	r5, r5, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009c70:	d3e2      	bcc.n	8009c38 <HAL_PCD_IRQHandler+0x4b0>
 8009c72:	463c      	mov	r4, r7
 8009c74:	46c8      	mov	r8, r9
 8009c76:	9f06      	ldr	r7, [sp, #24]
 8009c78:	46d1      	mov	r9, sl
 8009c7a:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009c7e:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009c80:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009c82:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009c84:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009c88:	f007 030f 	and.w	r3, r7, #15
 8009c8c:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009c8e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009c90:	ea23 0302 	bic.w	r3, r3, r2
 8009c94:	634b      	str	r3, [r1, #52]	; 0x34
 8009c96:	e641      	b.n	800991c <HAL_PCD_IRQHandler+0x194>
            (void)USB_FlushTxFifo(USBx, epnum);
 8009c98:	4639      	mov	r1, r7
 8009c9a:	9803      	ldr	r0, [sp, #12]
 8009c9c:	f003 ffd6 	bl	800dc4c <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	f8c9 3008 	str.w	r3, [r9, #8]
 8009ca6:	e676      	b.n	8009996 <HAL_PCD_IRQHandler+0x20e>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009ca8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009cac:	421d      	tst	r5, r3
 8009cae:	f43f ad9d 	beq.w	80097ec <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009cb2:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8009cb6:	f3c5 120a 	ubfx	r2, r5, #4, #11
 8009cba:	4638      	mov	r0, r7
 8009cbc:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009cc0:	4615      	mov	r5, r2
 8009cc2:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 8009cc6:	f004 fa83 	bl	800e1d0 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009cca:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009cce:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009cd0:	442b      	add	r3, r5
 8009cd2:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009cd6:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 8009cda:	442b      	add	r3, r5
 8009cdc:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 8009ce0:	e584      	b.n	80097ec <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f005 fc0a 	bl	800f4fc <HAL_PCD_SuspendCallback>
 8009ce8:	e5ed      	b.n	80098c6 <HAL_PCD_IRQHandler+0x13e>
        HAL_PCD_DisconnectCallback(hpcd);
 8009cea:	4620      	mov	r0, r4
 8009cec:	f005 fc2e 	bl	800f54c <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 8009cf0:	6823      	ldr	r3, [r4, #0]
 8009cf2:	e5df      	b.n	80098b4 <HAL_PCD_IRQHandler+0x12c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009cf4:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 8009cf8:	4413      	add	r3, r2
 8009cfa:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009cfc:	2f00      	cmp	r7, #0
 8009cfe:	f47f ae34 	bne.w	800996a <HAL_PCD_IRQHandler+0x1e2>
 8009d02:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f47f ae30 	bne.w	800996a <HAL_PCD_IRQHandler+0x1e2>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009d0a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009d0e:	6820      	ldr	r0, [r4, #0]
 8009d10:	f004 fb5e 	bl	800e3d0 <USB_EP0_OutStart>
 8009d14:	e629      	b.n	800996a <HAL_PCD_IRQHandler+0x1e2>
  HAL_PCD_SetupStageCallback(hpcd);
 8009d16:	4620      	mov	r0, r4
 8009d18:	f005 fbbc 	bl	800f494 <HAL_PCD_SetupStageCallback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009d1c:	6820      	ldr	r0, [r4, #0]
 8009d1e:	e667      	b.n	80099f0 <HAL_PCD_IRQHandler+0x268>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009d20:	0719      	lsls	r1, r3, #28
 8009d22:	d51e      	bpl.n	8009d62 <HAL_PCD_IRQHandler+0x5da>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d24:	492a      	ldr	r1, [pc, #168]	; (8009dd0 <HAL_PCD_IRQHandler+0x648>)
 8009d26:	458c      	cmp	ip, r1
 8009d28:	f67f ae5e 	bls.w	80099e8 <HAL_PCD_IRQHandler+0x260>
 8009d2c:	041f      	lsls	r7, r3, #16
 8009d2e:	f57f ae5b 	bpl.w	80099e8 <HAL_PCD_IRQHandler+0x260>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d36:	6093      	str	r3, [r2, #8]
 8009d38:	e656      	b.n	80099e8 <HAL_PCD_IRQHandler+0x260>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009d3a:	463c      	mov	r4, r7
 8009d3c:	46c8      	mov	r8, r9
 8009d3e:	9f06      	ldr	r7, [sp, #24]
 8009d40:	46d1      	mov	r9, sl
 8009d42:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_len <= ep->xfer_count)
 8009d46:	6d35      	ldr	r5, [r6, #80]	; 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009d48:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 8009d4a:	42ab      	cmp	r3, r5
 8009d4c:	f4ff ade6 	bcc.w	800991c <HAL_PCD_IRQHandler+0x194>
 8009d50:	e795      	b.n	8009c7e <HAL_PCD_IRQHandler+0x4f6>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009d52:	0419      	lsls	r1, r3, #16
 8009d54:	d4ed      	bmi.n	8009d32 <HAL_PCD_IRQHandler+0x5aa>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009d56:	0699      	lsls	r1, r3, #26
 8009d58:	f57f af44 	bpl.w	8009be4 <HAL_PCD_IRQHandler+0x45c>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009d5c:	2120      	movs	r1, #32
 8009d5e:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009d60:	e740      	b.n	8009be4 <HAL_PCD_IRQHandler+0x45c>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009d62:	0699      	lsls	r1, r3, #26
 8009d64:	d508      	bpl.n	8009d78 <HAL_PCD_IRQHandler+0x5f0>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009d66:	2320      	movs	r3, #32
 8009d68:	6093      	str	r3, [r2, #8]
 8009d6a:	e63d      	b.n	80099e8 <HAL_PCD_IRQHandler+0x260>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009d6c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009d70:	6820      	ldr	r0, [r4, #0]
 8009d72:	f004 fb2d 	bl	800e3d0 <USB_EP0_OutStart>
 8009d76:	e71a      	b.n	8009bae <HAL_PCD_IRQHandler+0x426>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009d78:	f013 0f28 	tst.w	r3, #40	; 0x28
 8009d7c:	f47f ae34 	bne.w	80099e8 <HAL_PCD_IRQHandler+0x260>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d80:	4913      	ldr	r1, [pc, #76]	; (8009dd0 <HAL_PCD_IRQHandler+0x648>)
 8009d82:	458c      	cmp	ip, r1
 8009d84:	d901      	bls.n	8009d8a <HAL_PCD_IRQHandler+0x602>
 8009d86:	041b      	lsls	r3, r3, #16
 8009d88:	d4d3      	bmi.n	8009d32 <HAL_PCD_IRQHandler+0x5aa>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009d8a:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 8009d8c:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009d90:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009d94:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 8009d96:	f8ca 2214 	str.w	r2, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009d9a:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
 8009d9e:	440a      	add	r2, r1
 8009da0:	f8ca 2208 	str.w	r2, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009da4:	f1b8 0f00 	cmp.w	r8, #0
 8009da8:	f47f af1c 	bne.w	8009be4 <HAL_PCD_IRQHandler+0x45c>
 8009dac:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8009db0:	2a00      	cmp	r2, #0
 8009db2:	f47f af17 	bne.w	8009be4 <HAL_PCD_IRQHandler+0x45c>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009db6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009dba:	2101      	movs	r1, #1
 8009dbc:	f004 fb08 	bl	800e3d0 <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009dc0:	e710      	b.n	8009be4 <HAL_PCD_IRQHandler+0x45c>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009dc2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009dc6:	4641      	mov	r1, r8
 8009dc8:	f004 fb02 	bl	800e3d0 <USB_EP0_OutStart>
 8009dcc:	e70a      	b.n	8009be4 <HAL_PCD_IRQHandler+0x45c>
 8009dce:	bf00      	nop
 8009dd0:	4f54300a 	.word	0x4f54300a
 8009dd4:	4f54310a 	.word	0x4f54310a

08009dd8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8009dd8:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8009ddc:	2a01      	cmp	r2, #1
 8009dde:	d00e      	beq.n	8009dfe <HAL_PCD_SetAddress+0x26>
 8009de0:	2201      	movs	r2, #1
{
 8009de2:	b510      	push	{r4, lr}
 8009de4:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009de6:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 8009de8:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 8009dec:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009df0:	f004 fa74 	bl	800e2dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009df4:	2300      	movs	r3, #0
  return HAL_OK;
 8009df6:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8009df8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 8009dfc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8009dfe:	2002      	movs	r0, #2
}
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop

08009e04 <HAL_PCD_EP_Open>:
{
 8009e04:	b510      	push	{r4, lr}
 8009e06:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8009e0a:	0609      	lsls	r1, r1, #24
{
 8009e0c:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8009e0e:	d427      	bmi.n	8009e60 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e10:	f04f 0c1c 	mov.w	ip, #28
 8009e14:	fb0c 0c0e 	mla	ip, ip, lr, r0
 8009e18:	f50c 71fe 	add.w	r1, ip, #508	; 0x1fc
    ep->is_in = 0U;
 8009e1c:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 8009e20:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8009e24:	2000      	movs	r0, #0
 8009e26:	f88c 01fd 	strb.w	r0, [ip, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 8009e2a:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8009e2c:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e2e:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 8009e32:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8009e34:	b10a      	cbz	r2, 8009e3a <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8009e36:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d101      	bne.n	8009e42 <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8009e42:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d018      	beq.n	8009e7c <HAL_PCD_EP_Open+0x78>
 8009e4a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009e4c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009e4e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009e52:	f003 ff2f 	bl	800dcb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009e56:	2300      	movs	r3, #0
  return ret;
 8009e58:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8009e5a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 8009e5e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e60:	201c      	movs	r0, #28
    ep->is_in = 1U;
 8009e62:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e66:	fb00 400e 	mla	r0, r0, lr, r4
 8009e6a:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 8009e6e:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 8009e72:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8009e76:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 8009e7a:	e7d6      	b.n	8009e2a <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8009e7c:	2002      	movs	r0, #2
}
 8009e7e:	bd10      	pop	{r4, pc}

08009e80 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8009e80:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009e84:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e88:	f04f 011c 	mov.w	r1, #28
{
 8009e8c:	b510      	push	{r4, lr}
 8009e8e:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8009e90:	d11a      	bne.n	8009ec8 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e92:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8009e96:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8009e9a:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e9c:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8009ea0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009ea4:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009ea8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8009eaa:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d019      	beq.n	8009ee6 <HAL_PCD_EP_Close+0x66>
 8009eb2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009eb4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009eb6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009eba:	f003 ff43 	bl	800dd44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009ebe:	2300      	movs	r3, #0
  return HAL_OK;
 8009ec0:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8009ec2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 8009ec6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ec8:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8009ecc:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8009ed0:	2001      	movs	r0, #1
 8009ed2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ed6:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8009ed8:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009edc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8009ede:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d1e5      	bne.n	8009eb2 <HAL_PCD_EP_Close+0x32>
 8009ee6:	2002      	movs	r0, #2
}
 8009ee8:	bd10      	pop	{r4, pc}
 8009eea:	bf00      	nop

08009eec <HAL_PCD_EP_Receive>:
{
 8009eec:	b510      	push	{r4, lr}
 8009eee:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ef2:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8009ef4:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ef8:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 8009efc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f00:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8009f04:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 8009f08:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8009f0a:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f0e:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  ep->xfer_count = 0U;
 8009f12:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 8009f16:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 8009f1a:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009f1c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8009f1e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8009f20:	bf08      	it	eq
 8009f22:	f8cc 220c 	streq.w	r2, [ip, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009f26:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009f28:	b91c      	cbnz	r4, 8009f32 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009f2a:	f004 f881 	bl	800e030 <USB_EP0StartXfer>
}
 8009f2e:	2000      	movs	r0, #0
 8009f30:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009f32:	f003 ff65 	bl	800de00 <USB_EPStartXfer>
}
 8009f36:	2000      	movs	r0, #0
 8009f38:	bd10      	pop	{r4, pc}
 8009f3a:	bf00      	nop

08009f3c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009f3c:	f001 010f 	and.w	r1, r1, #15
 8009f40:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009f44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8009f48:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop

08009f50 <HAL_PCD_EP_Transmit>:
{
 8009f50:	b510      	push	{r4, lr}
 8009f52:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f56:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8009f58:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f5c:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 8009f60:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f64:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8009f66:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 8009f6a:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8009f6c:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 8009f70:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 8009f74:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f76:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 8009f7a:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8009f7e:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009f80:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8009f82:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8009f84:	bf08      	it	eq
 8009f86:	f8cc 204c 	streq.w	r2, [ip, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009f8a:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009f8c:	b91c      	cbnz	r4, 8009f96 <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009f8e:	f004 f84f 	bl	800e030 <USB_EP0StartXfer>
}
 8009f92:	2000      	movs	r0, #0
 8009f94:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009f96:	f003 ff33 	bl	800de00 <USB_EPStartXfer>
}
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	bd10      	pop	{r4, pc}
 8009f9e:	bf00      	nop

08009fa0 <HAL_PCD_EP_SetStall>:
{
 8009fa0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009fa2:	6843      	ldr	r3, [r0, #4]
 8009fa4:	f001 050f 	and.w	r5, r1, #15
 8009fa8:	429d      	cmp	r5, r3
 8009faa:	d834      	bhi.n	800a016 <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 8009fac:	060b      	lsls	r3, r1, #24
 8009fae:	4604      	mov	r4, r0
 8009fb0:	d41d      	bmi.n	8009fee <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 8009fb2:	221c      	movs	r2, #28
    ep->is_in = 0U;
 8009fb4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8009fb8:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 8009fbc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009fc0:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8009fc2:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8009fc6:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8009fca:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8009fcc:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8009fce:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8009fd0:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d01c      	beq.n	800a012 <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009fd8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009fda:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009fde:	f004 f91d 	bl	800e21c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009fe2:	b1d5      	cbz	r5, 800a01a <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 8009fe4:	2300      	movs	r3, #0
  return HAL_OK;
 8009fe6:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8009fe8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 8009fec:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009fee:	211c      	movs	r1, #28
    ep->is_in = 1U;
 8009ff0:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8009ff4:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ff6:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8009ffa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ffe:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800a000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800a004:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800a006:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800a008:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800a00a:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800a00e:	429a      	cmp	r2, r3
 800a010:	d1e2      	bne.n	8009fd8 <HAL_PCD_EP_SetStall+0x38>
 800a012:	2002      	movs	r0, #2
}
 800a014:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a016:	2001      	movs	r0, #1
}
 800a018:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a01a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800a01e:	7c21      	ldrb	r1, [r4, #16]
 800a020:	6820      	ldr	r0, [r4, #0]
 800a022:	f004 f9d5 	bl	800e3d0 <USB_EP0_OutStart>
 800a026:	e7dd      	b.n	8009fe4 <HAL_PCD_EP_SetStall+0x44>

0800a028 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a028:	6842      	ldr	r2, [r0, #4]
{
 800a02a:	b538      	push	{r3, r4, r5, lr}
 800a02c:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a030:	4293      	cmp	r3, r2
 800a032:	d832      	bhi.n	800a09a <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800a034:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a038:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a03a:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800a03e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800a042:	d119      	bne.n	800a078 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a044:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800a048:	2000      	movs	r0, #0
 800a04a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800a04e:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a050:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800a054:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800a058:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800a05a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800a05c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800a060:	2b01      	cmp	r3, #1
 800a062:	d018      	beq.n	800a096 <HAL_PCD_EP_ClrStall+0x6e>
 800a064:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a066:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a068:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a06c:	f004 f90a 	bl	800e284 <USB_EPClearStall>
  return HAL_OK;
 800a070:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800a072:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800a076:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a078:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800a07c:	2001      	movs	r0, #1
 800a07e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800a082:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a084:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800a086:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800a08a:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800a08c:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800a08e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800a092:	2b01      	cmp	r3, #1
 800a094:	d1e6      	bne.n	800a064 <HAL_PCD_EP_ClrStall+0x3c>
 800a096:	2002      	movs	r0, #2
}
 800a098:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a09a:	2001      	movs	r0, #1
}
 800a09c:	bd38      	pop	{r3, r4, r5, pc}
 800a09e:	bf00      	nop

0800a0a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a0a0:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a0a2:	6804      	ldr	r4, [r0, #0]
 800a0a4:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800a0a6:	b931      	cbnz	r1, 800a0b6 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a0a8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800a0ac:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0b4:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a0b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800a0b8:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a0bc:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800a0c0:	d00b      	beq.n	800a0da <HAL_PCDEx_SetTxFiFo+0x3a>
 800a0c2:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a0c4:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800a0c8:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a0ca:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800a0ce:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a0d0:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800a0d2:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a0d4:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800a0d8:	d3f4      	bcc.n	800a0c4 <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a0da:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800a0de:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800a0e2:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 800a0e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a0ea:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop

0800a0f4 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a0f4:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 800a0f6:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	6259      	str	r1, [r3, #36]	; 0x24
}
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop

0800a100 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a100:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800a102:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a106:	4909      	ldr	r1, [pc, #36]	; (800a12c <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a108:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800a10a:	4660      	mov	r0, ip
{
 800a10c:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800a10e:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 800a110:	f883 c3f4 	strb.w	ip, [r3, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 800a114:	f8c3 43fc 	str.w	r4, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a118:	6993      	ldr	r3, [r2, #24]
}
 800a11a:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a11e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a122:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a124:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a126:	4319      	orrs	r1, r3
 800a128:	6551      	str	r1, [r2, #84]	; 0x54
}
 800a12a:	4770      	bx	lr
 800a12c:	10000003 	.word	0x10000003

0800a130 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop

0800a134 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a134:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a136:	4c10      	ldr	r4, [pc, #64]	; (800a178 <HAL_PWREx_ConfigSupply+0x44>)
 800a138:	68e3      	ldr	r3, [r4, #12]
 800a13a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a13e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a140:	d105      	bne.n	800a14e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a142:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a146:	1a18      	subs	r0, r3, r0
 800a148:	bf18      	it	ne
 800a14a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800a14c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a14e:	f023 0307 	bic.w	r3, r3, #7
 800a152:	4318      	orrs	r0, r3
 800a154:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 800a156:	f7fc fa4b 	bl	80065f0 <HAL_GetTick>
 800a15a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a15c:	e005      	b.n	800a16a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a15e:	f7fc fa47 	bl	80065f0 <HAL_GetTick>
 800a162:	1b40      	subs	r0, r0, r5
 800a164:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a168:	d804      	bhi.n	800a174 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a16a:	6863      	ldr	r3, [r4, #4]
 800a16c:	049b      	lsls	r3, r3, #18
 800a16e:	d5f6      	bpl.n	800a15e <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 800a170:	2000      	movs	r0, #0
}
 800a172:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800a174:	2001      	movs	r0, #1
}
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	58024800 	.word	0x58024800

0800a17c <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a17c:	4a02      	ldr	r2, [pc, #8]	; (800a188 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800a17e:	68d3      	ldr	r3, [r2, #12]
 800a180:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a184:	60d3      	str	r3, [r2, #12]
}
 800a186:	4770      	bx	lr
 800a188:	58024800 	.word	0x58024800

0800a18c <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a18c:	4b3b      	ldr	r3, [pc, #236]	; (800a27c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800a18e:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a192:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a194:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 800a196:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a19a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a19c:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 800a1a0:	d038      	beq.n	800a214 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a1a2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a1a6:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1aa:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a1ae:	fb05 f101 	mul.w	r1, r5, r1
 800a1b2:	2a01      	cmp	r2, #1
 800a1b4:	ee07 1a90 	vmov	s15, r1
 800a1b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 800a1bc:	d002      	beq.n	800a1c4 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800a1be:	2a02      	cmp	r2, #2
 800a1c0:	d04e      	beq.n	800a260 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800a1c2:	b34a      	cbz	r2, 800a218 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a1c4:	ee07 0a90 	vmov	s15, r0
 800a1c8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800a280 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 800a1cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d2:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800a1d6:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800a284 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800a1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1de:	ee06 3a90 	vmov	s13, r3
 800a1e2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800a1e6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a1ea:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a1ee:	eee7 6a25 	vfma.f32	s13, s14, s11
 800a1f2:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a1f6:	4b21      	ldr	r3, [pc, #132]	; (800a27c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 800a1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1fa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a1fe:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a200:	ee07 3a90 	vmov	s15, r3
 800a204:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a20c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a210:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800a214:	bc30      	pop	{r4, r5}
 800a216:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	0692      	lsls	r2, r2, #26
 800a21c:	d527      	bpl.n	800a26e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a21e:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a220:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a224:	4a18      	ldr	r2, [pc, #96]	; (800a288 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a226:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a22c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a234:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800a284 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800a238:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a23c:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a23e:	ee06 3a90 	vmov	s13, r3
 800a242:	ee05 2a90 	vmov	s11, r2
 800a246:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a24a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800a24e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a252:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800a256:	eee7 6a05 	vfma.f32	s13, s14, s10
 800a25a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800a25e:	e7ca      	b.n	800a1f6 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a260:	ee07 0a90 	vmov	s15, r0
 800a264:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a28c <HAL_RCC_GetSysClockFreq.part.0+0x100>
 800a268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a26c:	e7b0      	b.n	800a1d0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a26e:	ee07 0a90 	vmov	s15, r0
 800a272:	eddf 6a07 	vldr	s13, [pc, #28]	; 800a290 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800a276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a27a:	e7a9      	b.n	800a1d0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800a27c:	58024400 	.word	0x58024400
 800a280:	4a742400 	.word	0x4a742400
 800a284:	39000000 	.word	0x39000000
 800a288:	03d09000 	.word	0x03d09000
 800a28c:	4bbebc20 	.word	0x4bbebc20
 800a290:	4c742400 	.word	0x4c742400

0800a294 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800a294:	2800      	cmp	r0, #0
 800a296:	f000 81e8 	beq.w	800a66a <HAL_RCC_OscConfig+0x3d6>
{
 800a29a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a29c:	6803      	ldr	r3, [r0, #0]
 800a29e:	4604      	mov	r4, r0
 800a2a0:	07d9      	lsls	r1, r3, #31
 800a2a2:	d52e      	bpl.n	800a302 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2a4:	49a4      	ldr	r1, [pc, #656]	; (800a538 <HAL_RCC_OscConfig+0x2a4>)
 800a2a6:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a2a8:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2aa:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a2ae:	2a10      	cmp	r2, #16
 800a2b0:	f000 8107 	beq.w	800a4c2 <HAL_RCC_OscConfig+0x22e>
 800a2b4:	2a18      	cmp	r2, #24
 800a2b6:	f000 80ff 	beq.w	800a4b8 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a2ba:	6863      	ldr	r3, [r4, #4]
 800a2bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2c0:	f000 812a 	beq.w	800a518 <HAL_RCC_OscConfig+0x284>
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f000 8168 	beq.w	800a59a <HAL_RCC_OscConfig+0x306>
 800a2ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a2ce:	4b9a      	ldr	r3, [pc, #616]	; (800a538 <HAL_RCC_OscConfig+0x2a4>)
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	f000 8269 	beq.w	800a7a8 <HAL_RCC_OscConfig+0x514>
 800a2d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a2da:	601a      	str	r2, [r3, #0]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a2e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a2e4:	f7fc f984 	bl	80065f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a2e8:	4e93      	ldr	r6, [pc, #588]	; (800a538 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 800a2ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a2ec:	e005      	b.n	800a2fa <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a2ee:	f7fc f97f 	bl	80065f0 <HAL_GetTick>
 800a2f2:	1b40      	subs	r0, r0, r5
 800a2f4:	2864      	cmp	r0, #100	; 0x64
 800a2f6:	f200 814e 	bhi.w	800a596 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a2fa:	6833      	ldr	r3, [r6, #0]
 800a2fc:	039b      	lsls	r3, r3, #14
 800a2fe:	d5f6      	bpl.n	800a2ee <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	079d      	lsls	r5, r3, #30
 800a304:	f100 808a 	bmi.w	800a41c <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a308:	06d9      	lsls	r1, r3, #27
 800a30a:	d533      	bpl.n	800a374 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a30c:	4a8a      	ldr	r2, [pc, #552]	; (800a538 <HAL_RCC_OscConfig+0x2a4>)
 800a30e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a310:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a312:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a316:	2b08      	cmp	r3, #8
 800a318:	f000 80e3 	beq.w	800a4e2 <HAL_RCC_OscConfig+0x24e>
 800a31c:	2b18      	cmp	r3, #24
 800a31e:	f000 80db 	beq.w	800a4d8 <HAL_RCC_OscConfig+0x244>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a322:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800a324:	4d84      	ldr	r5, [pc, #528]	; (800a538 <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a326:	2b00      	cmp	r3, #0
 800a328:	f000 816f 	beq.w	800a60a <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a332:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a334:	f7fc f95c 	bl	80065f0 <HAL_GetTick>
 800a338:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a33a:	e005      	b.n	800a348 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a33c:	f7fc f958 	bl	80065f0 <HAL_GetTick>
 800a340:	1b80      	subs	r0, r0, r6
 800a342:	2802      	cmp	r0, #2
 800a344:	f200 8127 	bhi.w	800a596 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a348:	682b      	ldr	r3, [r5, #0]
 800a34a:	05db      	lsls	r3, r3, #23
 800a34c:	d5f6      	bpl.n	800a33c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a34e:	f7fc f967 	bl	8006620 <HAL_GetREVID>
 800a352:	f241 0303 	movw	r3, #4099	; 0x1003
 800a356:	4298      	cmp	r0, r3
 800a358:	f200 8247 	bhi.w	800a7ea <HAL_RCC_OscConfig+0x556>
 800a35c:	6a22      	ldr	r2, [r4, #32]
 800a35e:	686b      	ldr	r3, [r5, #4]
 800a360:	2a20      	cmp	r2, #32
 800a362:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a366:	bf0c      	ite	eq
 800a368:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800a36c:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800a370:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a372:	6823      	ldr	r3, [r4, #0]
 800a374:	071d      	lsls	r5, r3, #28
 800a376:	d516      	bpl.n	800a3a6 <HAL_RCC_OscConfig+0x112>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a378:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800a37a:	4d6f      	ldr	r5, [pc, #444]	; (800a538 <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f000 8122 	beq.w	800a5c6 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 800a382:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a384:	f043 0301 	orr.w	r3, r3, #1
 800a388:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800a38a:	f7fc f931 	bl	80065f0 <HAL_GetTick>
 800a38e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a390:	e005      	b.n	800a39e <HAL_RCC_OscConfig+0x10a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a392:	f7fc f92d 	bl	80065f0 <HAL_GetTick>
 800a396:	1b80      	subs	r0, r0, r6
 800a398:	2802      	cmp	r0, #2
 800a39a:	f200 80fc 	bhi.w	800a596 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a39e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a3a0:	0798      	lsls	r0, r3, #30
 800a3a2:	d5f6      	bpl.n	800a392 <HAL_RCC_OscConfig+0xfe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	069a      	lsls	r2, r3, #26
 800a3a8:	d516      	bpl.n	800a3d8 <HAL_RCC_OscConfig+0x144>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a3aa:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800a3ac:	4d62      	ldr	r5, [pc, #392]	; (800a538 <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f000 811a 	beq.w	800a5e8 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 800a3b4:	682b      	ldr	r3, [r5, #0]
 800a3b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a3ba:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a3bc:	f7fc f918 	bl	80065f0 <HAL_GetTick>
 800a3c0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3c2:	e005      	b.n	800a3d0 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a3c4:	f7fc f914 	bl	80065f0 <HAL_GetTick>
 800a3c8:	1b80      	subs	r0, r0, r6
 800a3ca:	2802      	cmp	r0, #2
 800a3cc:	f200 80e3 	bhi.w	800a596 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a3d0:	682b      	ldr	r3, [r5, #0]
 800a3d2:	049f      	lsls	r7, r3, #18
 800a3d4:	d5f6      	bpl.n	800a3c4 <HAL_RCC_OscConfig+0x130>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3d6:	6823      	ldr	r3, [r4, #0]
 800a3d8:	0759      	lsls	r1, r3, #29
 800a3da:	f100 80a3 	bmi.w	800a524 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a3de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a3e0:	b1d0      	cbz	r0, 800a418 <HAL_RCC_OscConfig+0x184>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a3e2:	4d55      	ldr	r5, [pc, #340]	; (800a538 <HAL_RCC_OscConfig+0x2a4>)
 800a3e4:	692b      	ldr	r3, [r5, #16]
 800a3e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3ea:	2b18      	cmp	r3, #24
 800a3ec:	f000 81ae 	beq.w	800a74c <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800a3f0:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a3f2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800a3f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a3f8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a3fa:	f000 8142 	beq.w	800a682 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 800a3fe:	f7fc f8f7 	bl	80065f0 <HAL_GetTick>
 800a402:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a404:	e005      	b.n	800a412 <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a406:	f7fc f8f3 	bl	80065f0 <HAL_GetTick>
 800a40a:	1b00      	subs	r0, r0, r4
 800a40c:	2802      	cmp	r0, #2
 800a40e:	f200 80c2 	bhi.w	800a596 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a412:	682b      	ldr	r3, [r5, #0]
 800a414:	019b      	lsls	r3, r3, #6
 800a416:	d4f6      	bmi.n	800a406 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 800a418:	2000      	movs	r0, #0
}
 800a41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a41c:	4a46      	ldr	r2, [pc, #280]	; (800a538 <HAL_RCC_OscConfig+0x2a4>)
 800a41e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a420:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a422:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800a426:	d12d      	bne.n	800a484 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a428:	4b43      	ldr	r3, [pc, #268]	; (800a538 <HAL_RCC_OscConfig+0x2a4>)
 800a42a:	68e2      	ldr	r2, [r4, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	0759      	lsls	r1, r3, #29
 800a430:	d501      	bpl.n	800a436 <HAL_RCC_OscConfig+0x1a2>
 800a432:	2a00      	cmp	r2, #0
 800a434:	d04e      	beq.n	800a4d4 <HAL_RCC_OscConfig+0x240>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a436:	4d40      	ldr	r5, [pc, #256]	; (800a538 <HAL_RCC_OscConfig+0x2a4>)
 800a438:	682b      	ldr	r3, [r5, #0]
 800a43a:	f023 0319 	bic.w	r3, r3, #25
 800a43e:	4313      	orrs	r3, r2
 800a440:	602b      	str	r3, [r5, #0]
          tickstart = HAL_GetTick();
 800a442:	f7fc f8d5 	bl	80065f0 <HAL_GetTick>
 800a446:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a448:	e005      	b.n	800a456 <HAL_RCC_OscConfig+0x1c2>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a44a:	f7fc f8d1 	bl	80065f0 <HAL_GetTick>
 800a44e:	1b80      	subs	r0, r0, r6
 800a450:	2802      	cmp	r0, #2
 800a452:	f200 80a0 	bhi.w	800a596 <HAL_RCC_OscConfig+0x302>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a456:	682b      	ldr	r3, [r5, #0]
 800a458:	075b      	lsls	r3, r3, #29
 800a45a:	d5f6      	bpl.n	800a44a <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a45c:	f7fc f8e0 	bl	8006620 <HAL_GetREVID>
 800a460:	f241 0303 	movw	r3, #4099	; 0x1003
 800a464:	4298      	cmp	r0, r3
 800a466:	f200 80f7 	bhi.w	800a658 <HAL_RCC_OscConfig+0x3c4>
 800a46a:	6922      	ldr	r2, [r4, #16]
 800a46c:	686b      	ldr	r3, [r5, #4]
 800a46e:	2a40      	cmp	r2, #64	; 0x40
 800a470:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a474:	bf0c      	ite	eq
 800a476:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800a47a:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800a47e:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	e741      	b.n	800a308 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a484:	2b18      	cmp	r3, #24
 800a486:	f000 80e3 	beq.w	800a650 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a48a:	4d2b      	ldr	r5, [pc, #172]	; (800a538 <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a48c:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a48e:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a490:	2a00      	cmp	r2, #0
 800a492:	f000 80cc 	beq.w	800a62e <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a496:	f023 0319 	bic.w	r3, r3, #25
 800a49a:	4313      	orrs	r3, r2
 800a49c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a49e:	f7fc f8a7 	bl	80065f0 <HAL_GetTick>
 800a4a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4a4:	e004      	b.n	800a4b0 <HAL_RCC_OscConfig+0x21c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a4a6:	f7fc f8a3 	bl	80065f0 <HAL_GetTick>
 800a4aa:	1b80      	subs	r0, r0, r6
 800a4ac:	2802      	cmp	r0, #2
 800a4ae:	d872      	bhi.n	800a596 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4b0:	682b      	ldr	r3, [r5, #0]
 800a4b2:	075f      	lsls	r7, r3, #29
 800a4b4:	d5f7      	bpl.n	800a4a6 <HAL_RCC_OscConfig+0x212>
 800a4b6:	e7d1      	b.n	800a45c <HAL_RCC_OscConfig+0x1c8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a4b8:	f001 0103 	and.w	r1, r1, #3
 800a4bc:	2902      	cmp	r1, #2
 800a4be:	f47f aefc 	bne.w	800a2ba <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4c2:	4a1d      	ldr	r2, [pc, #116]	; (800a538 <HAL_RCC_OscConfig+0x2a4>)
 800a4c4:	6812      	ldr	r2, [r2, #0]
 800a4c6:	0392      	lsls	r2, r2, #14
 800a4c8:	f57f af1b 	bpl.w	800a302 <HAL_RCC_OscConfig+0x6e>
 800a4cc:	6862      	ldr	r2, [r4, #4]
 800a4ce:	2a00      	cmp	r2, #0
 800a4d0:	f47f af17 	bne.w	800a302 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 800a4d4:	2001      	movs	r0, #1
}
 800a4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a4d8:	f002 0203 	and.w	r2, r2, #3
 800a4dc:	2a01      	cmp	r2, #1
 800a4de:	f47f af20 	bne.w	800a322 <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a4e2:	4b15      	ldr	r3, [pc, #84]	; (800a538 <HAL_RCC_OscConfig+0x2a4>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	05da      	lsls	r2, r3, #23
 800a4e8:	d502      	bpl.n	800a4f0 <HAL_RCC_OscConfig+0x25c>
 800a4ea:	69e3      	ldr	r3, [r4, #28]
 800a4ec:	2b80      	cmp	r3, #128	; 0x80
 800a4ee:	d1f1      	bne.n	800a4d4 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a4f0:	f7fc f896 	bl	8006620 <HAL_GetREVID>
 800a4f4:	f241 0303 	movw	r3, #4099	; 0x1003
 800a4f8:	4298      	cmp	r0, r3
 800a4fa:	f200 80b8 	bhi.w	800a66e <HAL_RCC_OscConfig+0x3da>
 800a4fe:	6a22      	ldr	r2, [r4, #32]
 800a500:	2a20      	cmp	r2, #32
 800a502:	f000 8187 	beq.w	800a814 <HAL_RCC_OscConfig+0x580>
 800a506:	490c      	ldr	r1, [pc, #48]	; (800a538 <HAL_RCC_OscConfig+0x2a4>)
 800a508:	684b      	ldr	r3, [r1, #4]
 800a50a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a50e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800a512:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	e72d      	b.n	800a374 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a518:	4a07      	ldr	r2, [pc, #28]	; (800a538 <HAL_RCC_OscConfig+0x2a4>)
 800a51a:	6813      	ldr	r3, [r2, #0]
 800a51c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a520:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a522:	e6df      	b.n	800a2e4 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800a524:	4d05      	ldr	r5, [pc, #20]	; (800a53c <HAL_RCC_OscConfig+0x2a8>)
 800a526:	682b      	ldr	r3, [r5, #0]
 800a528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a52c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800a52e:	f7fc f85f 	bl	80065f0 <HAL_GetTick>
 800a532:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a534:	e009      	b.n	800a54a <HAL_RCC_OscConfig+0x2b6>
 800a536:	bf00      	nop
 800a538:	58024400 	.word	0x58024400
 800a53c:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a540:	f7fc f856 	bl	80065f0 <HAL_GetTick>
 800a544:	1b80      	subs	r0, r0, r6
 800a546:	2864      	cmp	r0, #100	; 0x64
 800a548:	d825      	bhi.n	800a596 <HAL_RCC_OscConfig+0x302>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a54a:	682b      	ldr	r3, [r5, #0]
 800a54c:	05da      	lsls	r2, r3, #23
 800a54e:	d5f7      	bpl.n	800a540 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a550:	68a3      	ldr	r3, [r4, #8]
 800a552:	2b01      	cmp	r3, #1
 800a554:	f000 8158 	beq.w	800a808 <HAL_RCC_OscConfig+0x574>
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 812d 	beq.w	800a7b8 <HAL_RCC_OscConfig+0x524>
 800a55e:	2b05      	cmp	r3, #5
 800a560:	4ba6      	ldr	r3, [pc, #664]	; (800a7fc <HAL_RCC_OscConfig+0x568>)
 800a562:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a564:	f000 815f 	beq.w	800a826 <HAL_RCC_OscConfig+0x592>
 800a568:	f022 0201 	bic.w	r2, r2, #1
 800a56c:	671a      	str	r2, [r3, #112]	; 0x70
 800a56e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a570:	f022 0204 	bic.w	r2, r2, #4
 800a574:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800a576:	f7fc f83b 	bl	80065f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a57a:	4ea0      	ldr	r6, [pc, #640]	; (800a7fc <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a57c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800a580:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a582:	e004      	b.n	800a58e <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a584:	f7fc f834 	bl	80065f0 <HAL_GetTick>
 800a588:	1b40      	subs	r0, r0, r5
 800a58a:	42b8      	cmp	r0, r7
 800a58c:	d803      	bhi.n	800a596 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a58e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800a590:	079b      	lsls	r3, r3, #30
 800a592:	d5f7      	bpl.n	800a584 <HAL_RCC_OscConfig+0x2f0>
 800a594:	e723      	b.n	800a3de <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 800a596:	2003      	movs	r0, #3
}
 800a598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a59a:	4d98      	ldr	r5, [pc, #608]	; (800a7fc <HAL_RCC_OscConfig+0x568>)
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5a2:	602b      	str	r3, [r5, #0]
 800a5a4:	682b      	ldr	r3, [r5, #0]
 800a5a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a5ac:	f7fc f820 	bl	80065f0 <HAL_GetTick>
 800a5b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a5b2:	e004      	b.n	800a5be <HAL_RCC_OscConfig+0x32a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a5b4:	f7fc f81c 	bl	80065f0 <HAL_GetTick>
 800a5b8:	1b80      	subs	r0, r0, r6
 800a5ba:	2864      	cmp	r0, #100	; 0x64
 800a5bc:	d8eb      	bhi.n	800a596 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a5be:	682b      	ldr	r3, [r5, #0]
 800a5c0:	039f      	lsls	r7, r3, #14
 800a5c2:	d4f7      	bmi.n	800a5b4 <HAL_RCC_OscConfig+0x320>
 800a5c4:	e69c      	b.n	800a300 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800a5c6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a5c8:	f023 0301 	bic.w	r3, r3, #1
 800a5cc:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800a5ce:	f7fc f80f 	bl	80065f0 <HAL_GetTick>
 800a5d2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a5d4:	e004      	b.n	800a5e0 <HAL_RCC_OscConfig+0x34c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a5d6:	f7fc f80b 	bl	80065f0 <HAL_GetTick>
 800a5da:	1b80      	subs	r0, r0, r6
 800a5dc:	2802      	cmp	r0, #2
 800a5de:	d8da      	bhi.n	800a596 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a5e0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a5e2:	0799      	lsls	r1, r3, #30
 800a5e4:	d4f7      	bmi.n	800a5d6 <HAL_RCC_OscConfig+0x342>
 800a5e6:	e6dd      	b.n	800a3a4 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 800a5e8:	682b      	ldr	r3, [r5, #0]
 800a5ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5ee:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a5f0:	f7fb fffe 	bl	80065f0 <HAL_GetTick>
 800a5f4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a5f6:	e004      	b.n	800a602 <HAL_RCC_OscConfig+0x36e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a5f8:	f7fb fffa 	bl	80065f0 <HAL_GetTick>
 800a5fc:	1b80      	subs	r0, r0, r6
 800a5fe:	2802      	cmp	r0, #2
 800a600:	d8c9      	bhi.n	800a596 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a602:	682b      	ldr	r3, [r5, #0]
 800a604:	0498      	lsls	r0, r3, #18
 800a606:	d4f7      	bmi.n	800a5f8 <HAL_RCC_OscConfig+0x364>
 800a608:	e6e5      	b.n	800a3d6 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 800a60a:	682b      	ldr	r3, [r5, #0]
 800a60c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a610:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a612:	f7fb ffed 	bl	80065f0 <HAL_GetTick>
 800a616:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a618:	e004      	b.n	800a624 <HAL_RCC_OscConfig+0x390>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a61a:	f7fb ffe9 	bl	80065f0 <HAL_GetTick>
 800a61e:	1b80      	subs	r0, r0, r6
 800a620:	2802      	cmp	r0, #2
 800a622:	d8b8      	bhi.n	800a596 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a624:	682b      	ldr	r3, [r5, #0]
 800a626:	05df      	lsls	r7, r3, #23
 800a628:	d4f7      	bmi.n	800a61a <HAL_RCC_OscConfig+0x386>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	e6a2      	b.n	800a374 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800a62e:	f023 0301 	bic.w	r3, r3, #1
 800a632:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a634:	f7fb ffdc 	bl	80065f0 <HAL_GetTick>
 800a638:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a63a:	e004      	b.n	800a646 <HAL_RCC_OscConfig+0x3b2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a63c:	f7fb ffd8 	bl	80065f0 <HAL_GetTick>
 800a640:	1b80      	subs	r0, r0, r6
 800a642:	2802      	cmp	r0, #2
 800a644:	d8a7      	bhi.n	800a596 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a646:	682b      	ldr	r3, [r5, #0]
 800a648:	0758      	lsls	r0, r3, #29
 800a64a:	d4f7      	bmi.n	800a63c <HAL_RCC_OscConfig+0x3a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a64c:	6823      	ldr	r3, [r4, #0]
 800a64e:	e65b      	b.n	800a308 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a650:	0790      	lsls	r0, r2, #30
 800a652:	f47f af1a 	bne.w	800a48a <HAL_RCC_OscConfig+0x1f6>
 800a656:	e6e7      	b.n	800a428 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a658:	686b      	ldr	r3, [r5, #4]
 800a65a:	6922      	ldr	r2, [r4, #16]
 800a65c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a660:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a664:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a666:	6823      	ldr	r3, [r4, #0]
 800a668:	e64e      	b.n	800a308 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 800a66a:	2001      	movs	r0, #1
}
 800a66c:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a66e:	4a63      	ldr	r2, [pc, #396]	; (800a7fc <HAL_RCC_OscConfig+0x568>)
 800a670:	6a21      	ldr	r1, [r4, #32]
 800a672:	68d3      	ldr	r3, [r2, #12]
 800a674:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800a678:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a67c:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	e678      	b.n	800a374 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800a682:	f7fb ffb5 	bl	80065f0 <HAL_GetTick>
 800a686:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a688:	e004      	b.n	800a694 <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a68a:	f7fb ffb1 	bl	80065f0 <HAL_GetTick>
 800a68e:	1b80      	subs	r0, r0, r6
 800a690:	2802      	cmp	r0, #2
 800a692:	d880      	bhi.n	800a596 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a694:	682b      	ldr	r3, [r5, #0]
 800a696:	0199      	lsls	r1, r3, #6
 800a698:	d4f7      	bmi.n	800a68a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a69a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800a69c:	4b58      	ldr	r3, [pc, #352]	; (800a800 <HAL_RCC_OscConfig+0x56c>)
 800a69e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a6a0:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a6a2:	4958      	ldr	r1, [pc, #352]	; (800a804 <HAL_RCC_OscConfig+0x570>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6a4:	4e55      	ldr	r6, [pc, #340]	; (800a7fc <HAL_RCC_OscConfig+0x568>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a6aa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800a6ae:	62ab      	str	r3, [r5, #40]	; 0x28
 800a6b0:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	3a01      	subs	r2, #1
 800a6b8:	025b      	lsls	r3, r3, #9
 800a6ba:	0412      	lsls	r2, r2, #16
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a6c6:	3a01      	subs	r2, #1
 800a6c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a6d0:	3a01      	subs	r2, #1
 800a6d2:	0612      	lsls	r2, r2, #24
 800a6d4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800a6dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a6de:	f023 0301 	bic.w	r3, r3, #1
 800a6e2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a6e4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800a6e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a6e8:	4011      	ands	r1, r2
 800a6ea:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800a6ee:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a6f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a6f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a6f4:	f023 030c 	bic.w	r3, r3, #12
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a6fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a6fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a700:	f023 0302 	bic.w	r3, r3, #2
 800a704:	4313      	orrs	r3, r2
 800a706:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a708:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a70a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a70e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a710:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a716:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a718:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a71a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a71e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800a720:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a722:	f043 0301 	orr.w	r3, r3, #1
 800a726:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800a728:	682b      	ldr	r3, [r5, #0]
 800a72a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a72e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a730:	f7fb ff5e 	bl	80065f0 <HAL_GetTick>
 800a734:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a736:	e005      	b.n	800a744 <HAL_RCC_OscConfig+0x4b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a738:	f7fb ff5a 	bl	80065f0 <HAL_GetTick>
 800a73c:	1b00      	subs	r0, r0, r4
 800a73e:	2802      	cmp	r0, #2
 800a740:	f63f af29 	bhi.w	800a596 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a744:	6833      	ldr	r3, [r6, #0]
 800a746:	019a      	lsls	r2, r3, #6
 800a748:	d5f6      	bpl.n	800a738 <HAL_RCC_OscConfig+0x4a4>
 800a74a:	e665      	b.n	800a418 <HAL_RCC_OscConfig+0x184>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a74c:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a74e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a750:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a752:	f43f ae62 	beq.w	800a41a <HAL_RCC_OscConfig+0x186>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a756:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a75a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a75c:	428b      	cmp	r3, r1
 800a75e:	f47f aeb9 	bne.w	800a4d4 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a762:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a766:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a768:	429a      	cmp	r2, r3
 800a76a:	f47f aeb3 	bne.w	800a4d4 <HAL_RCC_OscConfig+0x240>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a76e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a770:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800a774:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a776:	429a      	cmp	r2, r3
 800a778:	f47f aeac 	bne.w	800a4d4 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a77c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a77e:	f3c5 2246 	ubfx	r2, r5, #9, #7
 800a782:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a784:	429a      	cmp	r2, r3
 800a786:	f47f aea5 	bne.w	800a4d4 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a78a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a78c:	f3c5 4206 	ubfx	r2, r5, #16, #7
 800a790:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a792:	429a      	cmp	r2, r3
 800a794:	f47f ae9e 	bne.w	800a4d4 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a798:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a79a:	f3c5 6506 	ubfx	r5, r5, #24, #7
 800a79e:	3801      	subs	r0, #1
  return HAL_OK;
 800a7a0:	1a28      	subs	r0, r5, r0
 800a7a2:	bf18      	it	ne
 800a7a4:	2001      	movne	r0, #1
}
 800a7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7a8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a7ac:	601a      	str	r2, [r3, #0]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a7b4:	601a      	str	r2, [r3, #0]
 800a7b6:	e595      	b.n	800a2e4 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7b8:	4d10      	ldr	r5, [pc, #64]	; (800a7fc <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a7ba:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a7c0:	f023 0301 	bic.w	r3, r3, #1
 800a7c4:	672b      	str	r3, [r5, #112]	; 0x70
 800a7c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a7c8:	f023 0304 	bic.w	r3, r3, #4
 800a7cc:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800a7ce:	f7fb ff0f 	bl	80065f0 <HAL_GetTick>
 800a7d2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a7d4:	e005      	b.n	800a7e2 <HAL_RCC_OscConfig+0x54e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a7d6:	f7fb ff0b 	bl	80065f0 <HAL_GetTick>
 800a7da:	1b80      	subs	r0, r0, r6
 800a7dc:	42b8      	cmp	r0, r7
 800a7de:	f63f aeda 	bhi.w	800a596 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a7e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a7e4:	0798      	lsls	r0, r3, #30
 800a7e6:	d4f6      	bmi.n	800a7d6 <HAL_RCC_OscConfig+0x542>
 800a7e8:	e5f9      	b.n	800a3de <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a7ea:	68eb      	ldr	r3, [r5, #12]
 800a7ec:	6a22      	ldr	r2, [r4, #32]
 800a7ee:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800a7f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a7f6:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a7f8:	6823      	ldr	r3, [r4, #0]
 800a7fa:	e5bb      	b.n	800a374 <HAL_RCC_OscConfig+0xe0>
 800a7fc:	58024400 	.word	0x58024400
 800a800:	fffffc0c 	.word	0xfffffc0c
 800a804:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a808:	4a0b      	ldr	r2, [pc, #44]	; (800a838 <HAL_RCC_OscConfig+0x5a4>)
 800a80a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800a80c:	f043 0301 	orr.w	r3, r3, #1
 800a810:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a812:	e6b0      	b.n	800a576 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a814:	4a08      	ldr	r2, [pc, #32]	; (800a838 <HAL_RCC_OscConfig+0x5a4>)
 800a816:	6853      	ldr	r3, [r2, #4]
 800a818:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a81c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a820:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	e5a6      	b.n	800a374 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a826:	f042 0204 	orr.w	r2, r2, #4
 800a82a:	671a      	str	r2, [r3, #112]	; 0x70
 800a82c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a82e:	f042 0201 	orr.w	r2, r2, #1
 800a832:	671a      	str	r2, [r3, #112]	; 0x70
 800a834:	e69f      	b.n	800a576 <HAL_RCC_OscConfig+0x2e2>
 800a836:	bf00      	nop
 800a838:	58024400 	.word	0x58024400

0800a83c <HAL_RCC_MCOConfig>:
{
 800a83c:	b570      	push	{r4, r5, r6, lr}
    MCO1_CLK_ENABLE();
 800a83e:	4e25      	ldr	r6, [pc, #148]	; (800a8d4 <HAL_RCC_MCOConfig+0x98>)
{
 800a840:	b088      	sub	sp, #32
 800a842:	460d      	mov	r5, r1
 800a844:	4614      	mov	r4, r2
    MCO1_CLK_ENABLE();
 800a846:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
  if(RCC_MCOx == RCC_MCO1)
 800a84a:	b9f8      	cbnz	r0, 800a88c <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800a84c:	f043 0301 	orr.w	r3, r3, #1
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a850:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a854:	a902      	add	r1, sp, #8
    MCO1_CLK_ENABLE();
 800a856:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800a85a:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a85e:	9006      	str	r0, [sp, #24]
    MCO1_CLK_ENABLE();
 800a860:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a864:	481c      	ldr	r0, [pc, #112]	; (800a8d8 <HAL_RCC_MCOConfig+0x9c>)
    MCO1_CLK_ENABLE();
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a86a:	2302      	movs	r3, #2
 800a86c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a870:	2200      	movs	r2, #0
 800a872:	2303      	movs	r3, #3
 800a874:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a878:	f7fe fd0a 	bl	8009290 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a87c:	6932      	ldr	r2, [r6, #16]
 800a87e:	f022 72fe 	bic.w	r2, r2, #33292288	; 0x1fc0000
 800a882:	432a      	orrs	r2, r5
 800a884:	4322      	orrs	r2, r4
 800a886:	6132      	str	r2, [r6, #16]
}
 800a888:	b008      	add	sp, #32
 800a88a:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800a88c:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a890:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a894:	4811      	ldr	r0, [pc, #68]	; (800a8dc <HAL_RCC_MCOConfig+0xa0>)
    MCO2_CLK_ENABLE();
 800a896:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800a89a:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800a89e:	f003 0304 	and.w	r3, r3, #4
 800a8a2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a8a4:	2302      	movs	r3, #2
    MCO2_CLK_ENABLE();
 800a8a6:	9901      	ldr	r1, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a8a8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a8aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a8ba:	f7fe fce9 	bl	8009290 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a8be:	6933      	ldr	r3, [r6, #16]
 800a8c0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800a8c4:	ea43 0105 	orr.w	r1, r3, r5
 800a8c8:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 800a8cc:	6131      	str	r1, [r6, #16]
}
 800a8ce:	b008      	add	sp, #32
 800a8d0:	bd70      	pop	{r4, r5, r6, pc}
 800a8d2:	bf00      	nop
 800a8d4:	58024400 	.word	0x58024400
 800a8d8:	58020000 	.word	0x58020000
 800a8dc:	58020800 	.word	0x58020800

0800a8e0 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8e0:	4a47      	ldr	r2, [pc, #284]	; (800aa00 <HAL_RCC_GetSysClockFreq+0x120>)
 800a8e2:	6913      	ldr	r3, [r2, #16]
 800a8e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8e8:	2b10      	cmp	r3, #16
 800a8ea:	d004      	beq.n	800a8f6 <HAL_RCC_GetSysClockFreq+0x16>
 800a8ec:	2b18      	cmp	r3, #24
 800a8ee:	d00d      	beq.n	800a90c <HAL_RCC_GetSysClockFreq+0x2c>
 800a8f0:	b11b      	cbz	r3, 800a8fa <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 800a8f2:	4844      	ldr	r0, [pc, #272]	; (800aa04 <HAL_RCC_GetSysClockFreq+0x124>)
 800a8f4:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8f6:	4844      	ldr	r0, [pc, #272]	; (800aa08 <HAL_RCC_GetSysClockFreq+0x128>)
 800a8f8:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8fa:	6813      	ldr	r3, [r2, #0]
 800a8fc:	0699      	lsls	r1, r3, #26
 800a8fe:	d54a      	bpl.n	800a996 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a900:	6813      	ldr	r3, [r2, #0]
 800a902:	4842      	ldr	r0, [pc, #264]	; (800aa0c <HAL_RCC_GetSysClockFreq+0x12c>)
 800a904:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a908:	40d8      	lsrs	r0, r3
 800a90a:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a90c:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800a90e:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a910:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a912:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    if (pllm != 0U)
 800a914:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a918:	6b51      	ldr	r1, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a91a:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 800a91e:	d038      	beq.n	800a992 <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a920:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a924:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a928:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a92c:	fb05 f101 	mul.w	r1, r5, r1
 800a930:	2b01      	cmp	r3, #1
 800a932:	ee07 1a90 	vmov	s15, r1
 800a936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 800a93a:	d002      	beq.n	800a942 <HAL_RCC_GetSysClockFreq+0x62>
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	d02c      	beq.n	800a99a <HAL_RCC_GetSysClockFreq+0xba>
 800a940:	b393      	cbz	r3, 800a9a8 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a942:	ee07 0a90 	vmov	s15, r0
 800a946:	eddf 6a32 	vldr	s13, [pc, #200]	; 800aa10 <HAL_RCC_GetSysClockFreq+0x130>
 800a94a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a94e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a950:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800a954:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800aa14 <HAL_RCC_GetSysClockFreq+0x134>
 800a958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a95c:	ee06 3a90 	vmov	s13, r3
 800a960:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800a964:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a968:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a96c:	eee7 6a25 	vfma.f32	s13, s14, s11
 800a970:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a974:	4b22      	ldr	r3, [pc, #136]	; (800aa00 <HAL_RCC_GetSysClockFreq+0x120>)
 800a976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a978:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a97c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a97e:	ee07 3a90 	vmov	s15, r3
 800a982:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a98a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a98e:	ee17 0a90 	vmov	r0, s15
}
 800a992:	bc30      	pop	{r4, r5}
 800a994:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a996:	481d      	ldr	r0, [pc, #116]	; (800aa0c <HAL_RCC_GetSysClockFreq+0x12c>)
}
 800a998:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a99a:	ee07 0a90 	vmov	s15, r0
 800a99e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800aa18 <HAL_RCC_GetSysClockFreq+0x138>
 800a9a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9a6:	e7d2      	b.n	800a94e <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9a8:	6813      	ldr	r3, [r2, #0]
 800a9aa:	069b      	lsls	r3, r3, #26
 800a9ac:	d520      	bpl.n	800a9f0 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9ae:	6814      	ldr	r4, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a9b0:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9b4:	4915      	ldr	r1, [pc, #84]	; (800aa0c <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a9b6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a9ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9bc:	f3c4 04c1 	ubfx	r4, r4, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a9c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9c4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800aa14 <HAL_RCC_GetSysClockFreq+0x134>
 800a9c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9cc:	40e1      	lsrs	r1, r4
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a9ce:	ee06 3a90 	vmov	s13, r3
 800a9d2:	ee05 1a90 	vmov	s11, r1
 800a9d6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a9da:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800a9de:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a9e2:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800a9e6:	eee7 6a05 	vfma.f32	s13, s14, s10
 800a9ea:	ee66 6a26 	vmul.f32	s13, s12, s13
 800a9ee:	e7c1      	b.n	800a974 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a9f0:	ee07 0a90 	vmov	s15, r0
 800a9f4:	eddf 6a09 	vldr	s13, [pc, #36]	; 800aa1c <HAL_RCC_GetSysClockFreq+0x13c>
 800a9f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9fc:	e7a7      	b.n	800a94e <HAL_RCC_GetSysClockFreq+0x6e>
 800a9fe:	bf00      	nop
 800aa00:	58024400 	.word	0x58024400
 800aa04:	003d0900 	.word	0x003d0900
 800aa08:	017d7840 	.word	0x017d7840
 800aa0c:	03d09000 	.word	0x03d09000
 800aa10:	4a742400 	.word	0x4a742400
 800aa14:	39000000 	.word	0x39000000
 800aa18:	4bbebc20 	.word	0x4bbebc20
 800aa1c:	4c742400 	.word	0x4c742400

0800aa20 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800aa20:	2800      	cmp	r0, #0
 800aa22:	f000 810c 	beq.w	800ac3e <HAL_RCC_ClockConfig+0x21e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aa26:	4a8c      	ldr	r2, [pc, #560]	; (800ac58 <HAL_RCC_ClockConfig+0x238>)
 800aa28:	6813      	ldr	r3, [r2, #0]
 800aa2a:	f003 030f 	and.w	r3, r3, #15
 800aa2e:	428b      	cmp	r3, r1
{
 800aa30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa34:	4604      	mov	r4, r0
 800aa36:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aa38:	d20c      	bcs.n	800aa54 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa3a:	6813      	ldr	r3, [r2, #0]
 800aa3c:	f023 030f 	bic.w	r3, r3, #15
 800aa40:	430b      	orrs	r3, r1
 800aa42:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa44:	6813      	ldr	r3, [r2, #0]
 800aa46:	f003 030f 	and.w	r3, r3, #15
 800aa4a:	428b      	cmp	r3, r1
 800aa4c:	d002      	beq.n	800aa54 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800aa4e:	2001      	movs	r0, #1
}
 800aa50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	075f      	lsls	r7, r3, #29
 800aa58:	d50b      	bpl.n	800aa72 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aa5a:	4980      	ldr	r1, [pc, #512]	; (800ac5c <HAL_RCC_ClockConfig+0x23c>)
 800aa5c:	6920      	ldr	r0, [r4, #16]
 800aa5e:	698a      	ldr	r2, [r1, #24]
 800aa60:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800aa64:	4290      	cmp	r0, r2
 800aa66:	d904      	bls.n	800aa72 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aa68:	698a      	ldr	r2, [r1, #24]
 800aa6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800aa6e:	4302      	orrs	r2, r0
 800aa70:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa72:	071e      	lsls	r6, r3, #28
 800aa74:	d50b      	bpl.n	800aa8e <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aa76:	4979      	ldr	r1, [pc, #484]	; (800ac5c <HAL_RCC_ClockConfig+0x23c>)
 800aa78:	6960      	ldr	r0, [r4, #20]
 800aa7a:	69ca      	ldr	r2, [r1, #28]
 800aa7c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800aa80:	4290      	cmp	r0, r2
 800aa82:	d904      	bls.n	800aa8e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aa84:	69ca      	ldr	r2, [r1, #28]
 800aa86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800aa8a:	4302      	orrs	r2, r0
 800aa8c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa8e:	06d8      	lsls	r0, r3, #27
 800aa90:	d50b      	bpl.n	800aaaa <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aa92:	4972      	ldr	r1, [pc, #456]	; (800ac5c <HAL_RCC_ClockConfig+0x23c>)
 800aa94:	69a0      	ldr	r0, [r4, #24]
 800aa96:	69ca      	ldr	r2, [r1, #28]
 800aa98:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800aa9c:	4290      	cmp	r0, r2
 800aa9e:	d904      	bls.n	800aaaa <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aaa0:	69ca      	ldr	r2, [r1, #28]
 800aaa2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800aaa6:	4302      	orrs	r2, r0
 800aaa8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aaaa:	0699      	lsls	r1, r3, #26
 800aaac:	d50b      	bpl.n	800aac6 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aaae:	496b      	ldr	r1, [pc, #428]	; (800ac5c <HAL_RCC_ClockConfig+0x23c>)
 800aab0:	69e0      	ldr	r0, [r4, #28]
 800aab2:	6a0a      	ldr	r2, [r1, #32]
 800aab4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800aab8:	4290      	cmp	r0, r2
 800aaba:	d904      	bls.n	800aac6 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800aabc:	6a0a      	ldr	r2, [r1, #32]
 800aabe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800aac2:	4302      	orrs	r2, r0
 800aac4:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aac6:	079a      	lsls	r2, r3, #30
 800aac8:	f140 80ab 	bpl.w	800ac22 <HAL_RCC_ClockConfig+0x202>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aacc:	4863      	ldr	r0, [pc, #396]	; (800ac5c <HAL_RCC_ClockConfig+0x23c>)
 800aace:	68e1      	ldr	r1, [r4, #12]
 800aad0:	6982      	ldr	r2, [r0, #24]
 800aad2:	f002 020f 	and.w	r2, r2, #15
 800aad6:	4291      	cmp	r1, r2
 800aad8:	d904      	bls.n	800aae4 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aada:	6982      	ldr	r2, [r0, #24]
 800aadc:	f022 020f 	bic.w	r2, r2, #15
 800aae0:	430a      	orrs	r2, r1
 800aae2:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aae4:	07d8      	lsls	r0, r3, #31
 800aae6:	d530      	bpl.n	800ab4a <HAL_RCC_ClockConfig+0x12a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800aae8:	4a5c      	ldr	r2, [pc, #368]	; (800ac5c <HAL_RCC_ClockConfig+0x23c>)
 800aaea:	68a1      	ldr	r1, [r4, #8]
 800aaec:	6993      	ldr	r3, [r2, #24]
 800aaee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800aaf2:	430b      	orrs	r3, r1
 800aaf4:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aaf6:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aaf8:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aafa:	2902      	cmp	r1, #2
 800aafc:	f000 80a1 	beq.w	800ac42 <HAL_RCC_ClockConfig+0x222>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab00:	2903      	cmp	r1, #3
 800ab02:	f000 8098 	beq.w	800ac36 <HAL_RCC_ClockConfig+0x216>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ab06:	2901      	cmp	r1, #1
 800ab08:	f000 80a1 	beq.w	800ac4e <HAL_RCC_ClockConfig+0x22e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab0c:	0758      	lsls	r0, r3, #29
 800ab0e:	d59e      	bpl.n	800aa4e <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ab10:	4e52      	ldr	r6, [pc, #328]	; (800ac5c <HAL_RCC_ClockConfig+0x23c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab12:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ab16:	6933      	ldr	r3, [r6, #16]
 800ab18:	f023 0307 	bic.w	r3, r3, #7
 800ab1c:	430b      	orrs	r3, r1
 800ab1e:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 800ab20:	f7fb fd66 	bl	80065f0 <HAL_GetTick>
 800ab24:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab26:	e005      	b.n	800ab34 <HAL_RCC_ClockConfig+0x114>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab28:	f7fb fd62 	bl	80065f0 <HAL_GetTick>
 800ab2c:	1bc0      	subs	r0, r0, r7
 800ab2e:	4540      	cmp	r0, r8
 800ab30:	f200 808b 	bhi.w	800ac4a <HAL_RCC_ClockConfig+0x22a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab34:	6933      	ldr	r3, [r6, #16]
 800ab36:	6862      	ldr	r2, [r4, #4]
 800ab38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab3c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800ab40:	d1f2      	bne.n	800ab28 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab42:	6823      	ldr	r3, [r4, #0]
 800ab44:	0799      	lsls	r1, r3, #30
 800ab46:	d506      	bpl.n	800ab56 <HAL_RCC_ClockConfig+0x136>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ab48:	68e1      	ldr	r1, [r4, #12]
 800ab4a:	4844      	ldr	r0, [pc, #272]	; (800ac5c <HAL_RCC_ClockConfig+0x23c>)
 800ab4c:	6982      	ldr	r2, [r0, #24]
 800ab4e:	f002 020f 	and.w	r2, r2, #15
 800ab52:	428a      	cmp	r2, r1
 800ab54:	d869      	bhi.n	800ac2a <HAL_RCC_ClockConfig+0x20a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ab56:	4940      	ldr	r1, [pc, #256]	; (800ac58 <HAL_RCC_ClockConfig+0x238>)
 800ab58:	680a      	ldr	r2, [r1, #0]
 800ab5a:	f002 020f 	and.w	r2, r2, #15
 800ab5e:	42aa      	cmp	r2, r5
 800ab60:	d90a      	bls.n	800ab78 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab62:	680a      	ldr	r2, [r1, #0]
 800ab64:	f022 020f 	bic.w	r2, r2, #15
 800ab68:	432a      	orrs	r2, r5
 800ab6a:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab6c:	680a      	ldr	r2, [r1, #0]
 800ab6e:	f002 020f 	and.w	r2, r2, #15
 800ab72:	42aa      	cmp	r2, r5
 800ab74:	f47f af6b 	bne.w	800aa4e <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ab78:	075a      	lsls	r2, r3, #29
 800ab7a:	d50b      	bpl.n	800ab94 <HAL_RCC_ClockConfig+0x174>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ab7c:	4937      	ldr	r1, [pc, #220]	; (800ac5c <HAL_RCC_ClockConfig+0x23c>)
 800ab7e:	6920      	ldr	r0, [r4, #16]
 800ab80:	698a      	ldr	r2, [r1, #24]
 800ab82:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800ab86:	4290      	cmp	r0, r2
 800ab88:	d204      	bcs.n	800ab94 <HAL_RCC_ClockConfig+0x174>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ab8a:	698a      	ldr	r2, [r1, #24]
 800ab8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ab90:	4302      	orrs	r2, r0
 800ab92:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab94:	071f      	lsls	r7, r3, #28
 800ab96:	d50b      	bpl.n	800abb0 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ab98:	4930      	ldr	r1, [pc, #192]	; (800ac5c <HAL_RCC_ClockConfig+0x23c>)
 800ab9a:	6960      	ldr	r0, [r4, #20]
 800ab9c:	69ca      	ldr	r2, [r1, #28]
 800ab9e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800aba2:	4290      	cmp	r0, r2
 800aba4:	d204      	bcs.n	800abb0 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aba6:	69ca      	ldr	r2, [r1, #28]
 800aba8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800abac:	4302      	orrs	r2, r0
 800abae:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abb0:	06de      	lsls	r6, r3, #27
 800abb2:	d50b      	bpl.n	800abcc <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800abb4:	4929      	ldr	r1, [pc, #164]	; (800ac5c <HAL_RCC_ClockConfig+0x23c>)
 800abb6:	69a0      	ldr	r0, [r4, #24]
 800abb8:	69ca      	ldr	r2, [r1, #28]
 800abba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800abbe:	4290      	cmp	r0, r2
 800abc0:	d204      	bcs.n	800abcc <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800abc2:	69ca      	ldr	r2, [r1, #28]
 800abc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800abc8:	4302      	orrs	r2, r0
 800abca:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800abcc:	069d      	lsls	r5, r3, #26
 800abce:	d50b      	bpl.n	800abe8 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800abd0:	4a22      	ldr	r2, [pc, #136]	; (800ac5c <HAL_RCC_ClockConfig+0x23c>)
 800abd2:	69e1      	ldr	r1, [r4, #28]
 800abd4:	6a13      	ldr	r3, [r2, #32]
 800abd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abda:	4299      	cmp	r1, r3
 800abdc:	d204      	bcs.n	800abe8 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800abde:	6a13      	ldr	r3, [r2, #32]
 800abe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abe4:	430b      	orrs	r3, r1
 800abe6:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800abe8:	f7ff fe7a 	bl	800a8e0 <HAL_RCC_GetSysClockFreq>
 800abec:	4a1b      	ldr	r2, [pc, #108]	; (800ac5c <HAL_RCC_ClockConfig+0x23c>)
 800abee:	4603      	mov	r3, r0
 800abf0:	481b      	ldr	r0, [pc, #108]	; (800ac60 <HAL_RCC_ClockConfig+0x240>)
 800abf2:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abf4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800abf6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800abfa:	4d1a      	ldr	r5, [pc, #104]	; (800ac64 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abfc:	f002 020f 	and.w	r2, r2, #15
 800ac00:	4c19      	ldr	r4, [pc, #100]	; (800ac68 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ac02:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac04:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ac06:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 800ac0a:	4818      	ldr	r0, [pc, #96]	; (800ac6c <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac0c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ac10:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 800ac12:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800ac14:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac16:	40d3      	lsrs	r3, r2
 800ac18:	6023      	str	r3, [r4, #0]
}
 800ac1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800ac1e:	f7fb bc85 	b.w	800652c <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac22:	07da      	lsls	r2, r3, #31
 800ac24:	f53f af60 	bmi.w	800aae8 <HAL_RCC_ClockConfig+0xc8>
 800ac28:	e795      	b.n	800ab56 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac2a:	6982      	ldr	r2, [r0, #24]
 800ac2c:	f022 020f 	bic.w	r2, r2, #15
 800ac30:	4311      	orrs	r1, r2
 800ac32:	6181      	str	r1, [r0, #24]
 800ac34:	e78f      	b.n	800ab56 <HAL_RCC_ClockConfig+0x136>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac36:	019f      	lsls	r7, r3, #6
 800ac38:	f53f af6a 	bmi.w	800ab10 <HAL_RCC_ClockConfig+0xf0>
 800ac3c:	e707      	b.n	800aa4e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800ac3e:	2001      	movs	r0, #1
}
 800ac40:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ac42:	039b      	lsls	r3, r3, #14
 800ac44:	f53f af64 	bmi.w	800ab10 <HAL_RCC_ClockConfig+0xf0>
 800ac48:	e701      	b.n	800aa4e <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 800ac4a:	2003      	movs	r0, #3
 800ac4c:	e700      	b.n	800aa50 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ac4e:	05de      	lsls	r6, r3, #23
 800ac50:	f53f af5e 	bmi.w	800ab10 <HAL_RCC_ClockConfig+0xf0>
 800ac54:	e6fb      	b.n	800aa4e <HAL_RCC_ClockConfig+0x2e>
 800ac56:	bf00      	nop
 800ac58:	52002000 	.word	0x52002000
 800ac5c:	58024400 	.word	0x58024400
 800ac60:	0801af3c 	.word	0x0801af3c
 800ac64:	240003cc 	.word	0x240003cc
 800ac68:	240003d0 	.word	0x240003d0
 800ac6c:	240003d8 	.word	0x240003d8

0800ac70 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ac70:	4a18      	ldr	r2, [pc, #96]	; (800acd4 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac72:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ac74:	6913      	ldr	r3, [r2, #16]
 800ac76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac7a:	2b10      	cmp	r3, #16
 800ac7c:	d01a      	beq.n	800acb4 <HAL_RCC_GetHCLKFreq+0x44>
 800ac7e:	2b18      	cmp	r3, #24
 800ac80:	d023      	beq.n	800acca <HAL_RCC_GetHCLKFreq+0x5a>
 800ac82:	b1cb      	cbz	r3, 800acb8 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 800ac84:	4814      	ldr	r0, [pc, #80]	; (800acd8 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ac86:	4b13      	ldr	r3, [pc, #76]	; (800acd4 <HAL_RCC_GetHCLKFreq+0x64>)
 800ac88:	4914      	ldr	r1, [pc, #80]	; (800acdc <HAL_RCC_GetHCLKFreq+0x6c>)
 800ac8a:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac8c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ac8e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac92:	4c13      	ldr	r4, [pc, #76]	; (800ace0 <HAL_RCC_GetHCLKFreq+0x70>)
 800ac94:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ac98:	4d12      	ldr	r5, [pc, #72]	; (800ace4 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ac9a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac9c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ac9e:	f002 021f 	and.w	r2, r2, #31
 800aca2:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aca6:	f003 001f 	and.w	r0, r3, #31
 800acaa:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800acae:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800acb0:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800acb2:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800acb4:	480c      	ldr	r0, [pc, #48]	; (800ace8 <HAL_RCC_GetHCLKFreq+0x78>)
 800acb6:	e7e6      	b.n	800ac86 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acb8:	6813      	ldr	r3, [r2, #0]
 800acba:	069b      	lsls	r3, r3, #26
 800acbc:	d508      	bpl.n	800acd0 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800acbe:	6812      	ldr	r2, [r2, #0]
 800acc0:	480a      	ldr	r0, [pc, #40]	; (800acec <HAL_RCC_GetHCLKFreq+0x7c>)
 800acc2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800acc6:	40d0      	lsrs	r0, r2
 800acc8:	e7dd      	b.n	800ac86 <HAL_RCC_GetHCLKFreq+0x16>
 800acca:	f7ff fa5f 	bl	800a18c <HAL_RCC_GetSysClockFreq.part.0>
 800acce:	e7da      	b.n	800ac86 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800acd0:	4806      	ldr	r0, [pc, #24]	; (800acec <HAL_RCC_GetHCLKFreq+0x7c>)
 800acd2:	e7d8      	b.n	800ac86 <HAL_RCC_GetHCLKFreq+0x16>
 800acd4:	58024400 	.word	0x58024400
 800acd8:	003d0900 	.word	0x003d0900
 800acdc:	0801af3c 	.word	0x0801af3c
 800ace0:	240003d0 	.word	0x240003d0
 800ace4:	240003cc 	.word	0x240003cc
 800ace8:	017d7840 	.word	0x017d7840
 800acec:	03d09000 	.word	0x03d09000

0800acf0 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800acf0:	4a1c      	ldr	r2, [pc, #112]	; (800ad64 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800acf2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800acf4:	6913      	ldr	r3, [r2, #16]
 800acf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800acfa:	2b10      	cmp	r3, #16
 800acfc:	d021      	beq.n	800ad42 <HAL_RCC_GetPCLK1Freq+0x52>
 800acfe:	2b18      	cmp	r3, #24
 800ad00:	d02b      	beq.n	800ad5a <HAL_RCC_GetPCLK1Freq+0x6a>
 800ad02:	b303      	cbz	r3, 800ad46 <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 800ad04:	4818      	ldr	r0, [pc, #96]	; (800ad68 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ad06:	4a17      	ldr	r2, [pc, #92]	; (800ad64 <HAL_RCC_GetPCLK1Freq+0x74>)
 800ad08:	4918      	ldr	r1, [pc, #96]	; (800ad6c <HAL_RCC_GetPCLK1Freq+0x7c>)
 800ad0a:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800ad0c:	4d18      	ldr	r5, [pc, #96]	; (800ad70 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ad0e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ad12:	4c18      	ldr	r4, [pc, #96]	; (800ad74 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ad14:	5ccb      	ldrb	r3, [r1, r3]
 800ad16:	f003 031f 	and.w	r3, r3, #31
 800ad1a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ad1e:	6990      	ldr	r0, [r2, #24]
 800ad20:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800ad24:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ad26:	5c08      	ldrb	r0, [r1, r0]
 800ad28:	f000 001f 	and.w	r0, r0, #31
 800ad2c:	40c3      	lsrs	r3, r0
 800ad2e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ad30:	69d2      	ldr	r2, [r2, #28]
 800ad32:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800ad36:	5c88      	ldrb	r0, [r1, r2]
 800ad38:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ad3c:	fa23 f000 	lsr.w	r0, r3, r0
 800ad40:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad42:	480d      	ldr	r0, [pc, #52]	; (800ad78 <HAL_RCC_GetPCLK1Freq+0x88>)
 800ad44:	e7df      	b.n	800ad06 <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad46:	6813      	ldr	r3, [r2, #0]
 800ad48:	069b      	lsls	r3, r3, #26
 800ad4a:	d509      	bpl.n	800ad60 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ad4c:	6810      	ldr	r0, [r2, #0]
 800ad4e:	4b0b      	ldr	r3, [pc, #44]	; (800ad7c <HAL_RCC_GetPCLK1Freq+0x8c>)
 800ad50:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800ad54:	fa23 f000 	lsr.w	r0, r3, r0
 800ad58:	e7d5      	b.n	800ad06 <HAL_RCC_GetPCLK1Freq+0x16>
 800ad5a:	f7ff fa17 	bl	800a18c <HAL_RCC_GetSysClockFreq.part.0>
 800ad5e:	e7d2      	b.n	800ad06 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ad60:	4806      	ldr	r0, [pc, #24]	; (800ad7c <HAL_RCC_GetPCLK1Freq+0x8c>)
 800ad62:	e7d0      	b.n	800ad06 <HAL_RCC_GetPCLK1Freq+0x16>
 800ad64:	58024400 	.word	0x58024400
 800ad68:	003d0900 	.word	0x003d0900
 800ad6c:	0801af3c 	.word	0x0801af3c
 800ad70:	240003cc 	.word	0x240003cc
 800ad74:	240003d0 	.word	0x240003d0
 800ad78:	017d7840 	.word	0x017d7840
 800ad7c:	03d09000 	.word	0x03d09000

0800ad80 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad80:	4a1c      	ldr	r2, [pc, #112]	; (800adf4 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad82:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad84:	6913      	ldr	r3, [r2, #16]
 800ad86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad8a:	2b10      	cmp	r3, #16
 800ad8c:	d021      	beq.n	800add2 <HAL_RCC_GetPCLK2Freq+0x52>
 800ad8e:	2b18      	cmp	r3, #24
 800ad90:	d02b      	beq.n	800adea <HAL_RCC_GetPCLK2Freq+0x6a>
 800ad92:	b303      	cbz	r3, 800add6 <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 800ad94:	4818      	ldr	r0, [pc, #96]	; (800adf8 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ad96:	4a17      	ldr	r2, [pc, #92]	; (800adf4 <HAL_RCC_GetPCLK2Freq+0x74>)
 800ad98:	4918      	ldr	r1, [pc, #96]	; (800adfc <HAL_RCC_GetPCLK2Freq+0x7c>)
 800ad9a:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800ad9c:	4d18      	ldr	r5, [pc, #96]	; (800ae00 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ad9e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ada2:	4c18      	ldr	r4, [pc, #96]	; (800ae04 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ada4:	5ccb      	ldrb	r3, [r1, r3]
 800ada6:	f003 031f 	and.w	r3, r3, #31
 800adaa:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800adae:	6990      	ldr	r0, [r2, #24]
 800adb0:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800adb4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800adb6:	5c08      	ldrb	r0, [r1, r0]
 800adb8:	f000 001f 	and.w	r0, r0, #31
 800adbc:	40c3      	lsrs	r3, r0
 800adbe:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800adc0:	69d2      	ldr	r2, [r2, #28]
 800adc2:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800adc6:	5c88      	ldrb	r0, [r1, r2]
 800adc8:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800adcc:	fa23 f000 	lsr.w	r0, r3, r0
 800add0:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800add2:	480d      	ldr	r0, [pc, #52]	; (800ae08 <HAL_RCC_GetPCLK2Freq+0x88>)
 800add4:	e7df      	b.n	800ad96 <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800add6:	6813      	ldr	r3, [r2, #0]
 800add8:	069b      	lsls	r3, r3, #26
 800adda:	d509      	bpl.n	800adf0 <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800addc:	6810      	ldr	r0, [r2, #0]
 800adde:	4b0b      	ldr	r3, [pc, #44]	; (800ae0c <HAL_RCC_GetPCLK2Freq+0x8c>)
 800ade0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800ade4:	fa23 f000 	lsr.w	r0, r3, r0
 800ade8:	e7d5      	b.n	800ad96 <HAL_RCC_GetPCLK2Freq+0x16>
 800adea:	f7ff f9cf 	bl	800a18c <HAL_RCC_GetSysClockFreq.part.0>
 800adee:	e7d2      	b.n	800ad96 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800adf0:	4806      	ldr	r0, [pc, #24]	; (800ae0c <HAL_RCC_GetPCLK2Freq+0x8c>)
 800adf2:	e7d0      	b.n	800ad96 <HAL_RCC_GetPCLK2Freq+0x16>
 800adf4:	58024400 	.word	0x58024400
 800adf8:	003d0900 	.word	0x003d0900
 800adfc:	0801af3c 	.word	0x0801af3c
 800ae00:	240003cc 	.word	0x240003cc
 800ae04:	240003d0 	.word	0x240003d0
 800ae08:	017d7840 	.word	0x017d7840
 800ae0c:	03d09000 	.word	0x03d09000

0800ae10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ae10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ae12:	4c3a      	ldr	r4, [pc, #232]	; (800aefc <RCCEx_PLL2_Config+0xec>)
 800ae14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae16:	f003 0303 	and.w	r3, r3, #3
 800ae1a:	2b03      	cmp	r3, #3
 800ae1c:	d067      	beq.n	800aeee <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ae1e:	6823      	ldr	r3, [r4, #0]
 800ae20:	4606      	mov	r6, r0
 800ae22:	460f      	mov	r7, r1
 800ae24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ae28:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae2a:	f7fb fbe1 	bl	80065f0 <HAL_GetTick>
 800ae2e:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae30:	e004      	b.n	800ae3c <RCCEx_PLL2_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ae32:	f7fb fbdd 	bl	80065f0 <HAL_GetTick>
 800ae36:	1b43      	subs	r3, r0, r5
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d856      	bhi.n	800aeea <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae3c:	6823      	ldr	r3, [r4, #0]
 800ae3e:	011a      	lsls	r2, r3, #4
 800ae40:	d4f7      	bmi.n	800ae32 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ae42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae44:	6832      	ldr	r2, [r6, #0]
 800ae46:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ae4a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800ae4e:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae50:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800ae54:	3b01      	subs	r3, #1
 800ae56:	3a01      	subs	r2, #1
 800ae58:	025b      	lsls	r3, r3, #9
 800ae5a:	0412      	lsls	r2, r2, #16
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800ae62:	4313      	orrs	r3, r2
 800ae64:	6872      	ldr	r2, [r6, #4]
 800ae66:	3a01      	subs	r2, #1
 800ae68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	6932      	ldr	r2, [r6, #16]
 800ae70:	3a01      	subs	r2, #1
 800ae72:	0612      	lsls	r2, r2, #24
 800ae74:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ae7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ae7e:	6972      	ldr	r2, [r6, #20]
 800ae80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ae84:	4313      	orrs	r3, r2
 800ae86:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ae88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ae8a:	69b3      	ldr	r3, [r6, #24]
 800ae8c:	f022 0220 	bic.w	r2, r2, #32
 800ae90:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ae92:	4b1b      	ldr	r3, [pc, #108]	; (800af00 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ae94:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ae96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ae98:	f022 0210 	bic.w	r2, r2, #16
 800ae9c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ae9e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800aea0:	69f2      	ldr	r2, [r6, #28]
 800aea2:	400b      	ands	r3, r1
 800aea4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800aea8:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800aeaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aeac:	f043 0310 	orr.w	r3, r3, #16
 800aeb0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800aeb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800aeb4:	b1ef      	cbz	r7, 800aef2 <RCCEx_PLL2_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800aeb6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800aeb8:	bf0c      	ite	eq
 800aeba:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800aebe:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800aec2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800aec4:	4c0d      	ldr	r4, [pc, #52]	; (800aefc <RCCEx_PLL2_Config+0xec>)
 800aec6:	6823      	ldr	r3, [r4, #0]
 800aec8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aecc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aece:	f7fb fb8f 	bl	80065f0 <HAL_GetTick>
 800aed2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aed4:	e004      	b.n	800aee0 <RCCEx_PLL2_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aed6:	f7fb fb8b 	bl	80065f0 <HAL_GetTick>
 800aeda:	1b40      	subs	r0, r0, r5
 800aedc:	2802      	cmp	r0, #2
 800aede:	d804      	bhi.n	800aeea <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aee0:	6823      	ldr	r3, [r4, #0]
 800aee2:	011b      	lsls	r3, r3, #4
 800aee4:	d5f7      	bpl.n	800aed6 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800aee6:	2000      	movs	r0, #0
}
 800aee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800aeea:	2003      	movs	r0, #3
}
 800aeec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800aeee:	2001      	movs	r0, #1
}
 800aef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800aef2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aef6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aef8:	e7e4      	b.n	800aec4 <RCCEx_PLL2_Config+0xb4>
 800aefa:	bf00      	nop
 800aefc:	58024400 	.word	0x58024400
 800af00:	ffff0007 	.word	0xffff0007

0800af04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800af04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800af06:	4c3a      	ldr	r4, [pc, #232]	; (800aff0 <RCCEx_PLL3_Config+0xec>)
 800af08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800af0a:	f003 0303 	and.w	r3, r3, #3
 800af0e:	2b03      	cmp	r3, #3
 800af10:	d067      	beq.n	800afe2 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800af12:	6823      	ldr	r3, [r4, #0]
 800af14:	4606      	mov	r6, r0
 800af16:	460f      	mov	r7, r1
 800af18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af1c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af1e:	f7fb fb67 	bl	80065f0 <HAL_GetTick>
 800af22:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800af24:	e004      	b.n	800af30 <RCCEx_PLL3_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800af26:	f7fb fb63 	bl	80065f0 <HAL_GetTick>
 800af2a:	1b43      	subs	r3, r0, r5
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d856      	bhi.n	800afde <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800af30:	6823      	ldr	r3, [r4, #0]
 800af32:	009a      	lsls	r2, r3, #2
 800af34:	d4f7      	bmi.n	800af26 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800af36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800af38:	6832      	ldr	r2, [r6, #0]
 800af3a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800af3e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800af42:	62a3      	str	r3, [r4, #40]	; 0x28
 800af44:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800af48:	3b01      	subs	r3, #1
 800af4a:	3a01      	subs	r2, #1
 800af4c:	025b      	lsls	r3, r3, #9
 800af4e:	0412      	lsls	r2, r2, #16
 800af50:	b29b      	uxth	r3, r3
 800af52:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800af56:	4313      	orrs	r3, r2
 800af58:	6872      	ldr	r2, [r6, #4]
 800af5a:	3a01      	subs	r2, #1
 800af5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af60:	4313      	orrs	r3, r2
 800af62:	6932      	ldr	r2, [r6, #16]
 800af64:	3a01      	subs	r2, #1
 800af66:	0612      	lsls	r2, r2, #24
 800af68:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800af6c:	4313      	orrs	r3, r2
 800af6e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800af70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800af72:	6972      	ldr	r2, [r6, #20]
 800af74:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800af78:	4313      	orrs	r3, r2
 800af7a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800af7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800af7e:	69b3      	ldr	r3, [r6, #24]
 800af80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800af84:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800af86:	4b1b      	ldr	r3, [pc, #108]	; (800aff4 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800af88:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800af8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800af8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af90:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800af92:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800af94:	69f2      	ldr	r2, [r6, #28]
 800af96:	400b      	ands	r3, r1
 800af98:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800af9c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800af9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800afa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afa4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800afa6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800afa8:	b1ef      	cbz	r7, 800afe6 <RCCEx_PLL3_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800afaa:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800afac:	bf0c      	ite	eq
 800afae:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800afb2:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800afb6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800afb8:	4c0d      	ldr	r4, [pc, #52]	; (800aff0 <RCCEx_PLL3_Config+0xec>)
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afc0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afc2:	f7fb fb15 	bl	80065f0 <HAL_GetTick>
 800afc6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800afc8:	e004      	b.n	800afd4 <RCCEx_PLL3_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800afca:	f7fb fb11 	bl	80065f0 <HAL_GetTick>
 800afce:	1b40      	subs	r0, r0, r5
 800afd0:	2802      	cmp	r0, #2
 800afd2:	d804      	bhi.n	800afde <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800afd4:	6823      	ldr	r3, [r4, #0]
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	d5f7      	bpl.n	800afca <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800afda:	2000      	movs	r0, #0
}
 800afdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800afde:	2003      	movs	r0, #3
}
 800afe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800afe2:	2001      	movs	r0, #1
}
 800afe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800afe6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800afea:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afec:	e7e4      	b.n	800afb8 <RCCEx_PLL3_Config+0xb4>
 800afee:	bf00      	nop
 800aff0:	58024400 	.word	0x58024400
 800aff4:	ffff0007 	.word	0xffff0007

0800aff8 <HAL_RCCEx_PeriphCLKConfig>:
{
 800aff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800affc:	6803      	ldr	r3, [r0, #0]
{
 800affe:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b000:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 800b004:	d022      	beq.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800b006:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800b008:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800b00c:	f000 8499 	beq.w	800b942 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800b010:	d811      	bhi.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 800b012:	2a00      	cmp	r2, #0
 800b014:	f000 8503 	beq.w	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xa26>
 800b018:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800b01c:	f040 84fc 	bne.w	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b020:	2102      	movs	r1, #2
 800b022:	3004      	adds	r0, #4
 800b024:	f7ff fef4 	bl	800ae10 <RCCEx_PLL2_Config>
 800b028:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800b02a:	2e00      	cmp	r6, #0
 800b02c:	f040 8491 	bne.w	800b952 <HAL_RCCEx_PeriphCLKConfig+0x95a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b030:	6e62      	ldr	r2, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b032:	6823      	ldr	r3, [r4, #0]
 800b034:	e003      	b.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x46>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800b036:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800b03a:	f040 84ed 	bne.w	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b03e:	48a8      	ldr	r0, [pc, #672]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b040:	2600      	movs	r6, #0
 800b042:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800b044:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800b048:	430a      	orrs	r2, r1
 800b04a:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b04c:	05dd      	lsls	r5, r3, #23
 800b04e:	d50a      	bpl.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800b050:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b052:	2a04      	cmp	r2, #4
 800b054:	d806      	bhi.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800b056:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b05a:	04ad      	.short	0x04ad
 800b05c:	0493048c 	.word	0x0493048c
 800b060:	02e902e9 	.word	0x02e902e9
 800b064:	2601      	movs	r6, #1
 800b066:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b068:	0598      	lsls	r0, r3, #22
 800b06a:	d51b      	bpl.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai23ClockSelection)
 800b06c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800b06e:	2a80      	cmp	r2, #128	; 0x80
 800b070:	f000 8497 	beq.w	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 800b074:	f200 80ec 	bhi.w	800b250 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800b078:	2a00      	cmp	r2, #0
 800b07a:	f000 8394 	beq.w	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800b07e:	2a40      	cmp	r2, #64	; 0x40
 800b080:	f040 80ed 	bne.w	800b25e <HAL_RCCEx_PeriphCLKConfig+0x266>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b084:	2100      	movs	r1, #0
 800b086:	1d20      	adds	r0, r4, #4
 800b088:	f7ff fec2 	bl	800ae10 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b08c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b08e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800b090:	2d00      	cmp	r5, #0
 800b092:	f040 836e 	bne.w	800b772 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b096:	4992      	ldr	r1, [pc, #584]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b09a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800b09c:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 800b0a0:	4302      	orrs	r2, r0
 800b0a2:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b0a4:	0559      	lsls	r1, r3, #21
 800b0a6:	d51f      	bpl.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4AClockSelection)
 800b0a8:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800b0ac:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800b0b0:	f000 8456 	beq.w	800b960 <HAL_RCCEx_PeriphCLKConfig+0x968>
 800b0b4:	f200 80d6 	bhi.w	800b264 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800b0b8:	2a00      	cmp	r2, #0
 800b0ba:	f000 837a 	beq.w	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
 800b0be:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800b0c2:	f040 80d7 	bne.w	800b274 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	1d20      	adds	r0, r4, #4
 800b0ca:	f7ff fea1 	bl	800ae10 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b0ce:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b0d0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800b0d2:	2d00      	cmp	r5, #0
 800b0d4:	f040 8351 	bne.w	800b77a <HAL_RCCEx_PeriphCLKConfig+0x782>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b0d8:	4981      	ldr	r1, [pc, #516]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b0da:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800b0de:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800b0e0:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 800b0e4:	4302      	orrs	r2, r0
 800b0e6:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b0e8:	051a      	lsls	r2, r3, #20
 800b0ea:	d51f      	bpl.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->Sai4BClockSelection)
 800b0ec:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800b0f0:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800b0f4:	f000 8465 	beq.w	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 800b0f8:	f200 80bf 	bhi.w	800b27a <HAL_RCCEx_PeriphCLKConfig+0x282>
 800b0fc:	2a00      	cmp	r2, #0
 800b0fe:	f000 835e 	beq.w	800b7be <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800b102:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800b106:	f040 80c0 	bne.w	800b28a <HAL_RCCEx_PeriphCLKConfig+0x292>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b10a:	2100      	movs	r1, #0
 800b10c:	1d20      	adds	r0, r4, #4
 800b10e:	f7ff fe7f 	bl	800ae10 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b112:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b114:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800b116:	2d00      	cmp	r5, #0
 800b118:	f040 8333 	bne.w	800b782 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b11c:	4970      	ldr	r1, [pc, #448]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b11e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800b122:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800b124:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800b128:	4302      	orrs	r2, r0
 800b12a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b12c:	019f      	lsls	r7, r3, #6
 800b12e:	d518      	bpl.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->QspiClockSelection)
 800b130:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800b132:	2a20      	cmp	r2, #32
 800b134:	f000 83ce 	beq.w	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800b138:	f200 80aa 	bhi.w	800b290 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b13c:	b13a      	cbz	r2, 800b14e <HAL_RCCEx_PeriphCLKConfig+0x156>
 800b13e:	2a10      	cmp	r2, #16
 800b140:	f040 80a9 	bne.w	800b296 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b144:	4966      	ldr	r1, [pc, #408]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b146:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800b148:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b14c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800b14e:	2d00      	cmp	r5, #0
 800b150:	f040 8360 	bne.w	800b814 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b154:	4962      	ldr	r1, [pc, #392]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b156:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b158:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800b15a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800b15e:	4302      	orrs	r2, r0
 800b160:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b162:	04d8      	lsls	r0, r3, #19
 800b164:	d51d      	bpl.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi123ClockSelection)
 800b166:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b168:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b16c:	f000 8410 	beq.w	800b990 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800b170:	f200 8094 	bhi.w	800b29c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 800b174:	2a00      	cmp	r2, #0
 800b176:	f000 8328 	beq.w	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800b17a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800b17e:	f040 8095 	bne.w	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b182:	2100      	movs	r1, #0
 800b184:	1d20      	adds	r0, r4, #4
 800b186:	f7ff fe43 	bl	800ae10 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b18a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b18c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800b18e:	2d00      	cmp	r5, #0
 800b190:	f040 82f1 	bne.w	800b776 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b194:	4952      	ldr	r1, [pc, #328]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b196:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800b198:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800b19a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800b19e:	4302      	orrs	r2, r0
 800b1a0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b1a2:	0499      	lsls	r1, r3, #18
 800b1a4:	d51a      	bpl.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi45ClockSelection)
 800b1a6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800b1a8:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800b1ac:	f000 8376 	beq.w	800b89c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800b1b0:	d87f      	bhi.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800b1b2:	b14a      	cbz	r2, 800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800b1b4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b1b8:	f040 8083 	bne.w	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b1bc:	2101      	movs	r1, #1
 800b1be:	1d20      	adds	r0, r4, #4
 800b1c0:	f7ff fe26 	bl	800ae10 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b1c4:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b1c6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800b1c8:	2d00      	cmp	r5, #0
 800b1ca:	f040 8325 	bne.w	800b818 <HAL_RCCEx_PeriphCLKConfig+0x820>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b1ce:	4944      	ldr	r1, [pc, #272]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b1d0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800b1d2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800b1d4:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800b1d8:	4302      	orrs	r2, r0
 800b1da:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b1dc:	045a      	lsls	r2, r3, #17
 800b1de:	d51b      	bpl.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x220>
    switch(PeriphClkInit->Spi6ClockSelection)
 800b1e0:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800b1e4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800b1e8:	f000 8362 	beq.w	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800b1ec:	d86c      	bhi.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b1ee:	b142      	cbz	r2, 800b202 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b1f0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800b1f4:	d170      	bne.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	1d20      	adds	r0, r4, #4
 800b1fa:	f7ff fe09 	bl	800ae10 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b1fe:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b200:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800b202:	2d00      	cmp	r5, #0
 800b204:	f040 830a 	bne.w	800b81c <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b208:	4935      	ldr	r1, [pc, #212]	; (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800b20a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800b20e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800b210:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800b214:	4302      	orrs	r2, r0
 800b216:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b218:	041f      	lsls	r7, r3, #16
 800b21a:	d50d      	bpl.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->FdcanClockSelection)
 800b21c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800b21e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800b222:	f000 834f 	beq.w	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800b226:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800b22a:	f000 820b 	beq.w	800b644 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b22e:	2a00      	cmp	r2, #0
 800b230:	f000 820e 	beq.w	800b650 <HAL_RCCEx_PeriphCLKConfig+0x658>
 800b234:	2601      	movs	r6, #1
 800b236:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b238:	01d8      	lsls	r0, r3, #7
 800b23a:	d55d      	bpl.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->FmcClockSelection)
 800b23c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b23e:	2a03      	cmp	r2, #3
 800b240:	f200 8418 	bhi.w	800ba74 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
 800b244:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b248:	035a0054 	.word	0x035a0054
 800b24c:	0054004e 	.word	0x0054004e
    switch(PeriphClkInit->Sai23ClockSelection)
 800b250:	2ac0      	cmp	r2, #192	; 0xc0
 800b252:	f43f af1d 	beq.w	800b090 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b256:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800b25a:	f43f af19 	beq.w	800b090 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b25e:	2601      	movs	r6, #1
 800b260:	4635      	mov	r5, r6
 800b262:	e71f      	b.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai4AClockSelection)
 800b264:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800b268:	f43f af33 	beq.w	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 800b26c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800b270:	f43f af2f 	beq.w	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 800b274:	2601      	movs	r6, #1
 800b276:	4635      	mov	r5, r6
 800b278:	e736      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4BClockSelection)
 800b27a:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 800b27e:	f43f af4a 	beq.w	800b116 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800b282:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800b286:	f43f af46 	beq.w	800b116 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800b28a:	2601      	movs	r6, #1
 800b28c:	4635      	mov	r5, r6
 800b28e:	e74d      	b.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->QspiClockSelection)
 800b290:	2a30      	cmp	r2, #48	; 0x30
 800b292:	f43f af5c 	beq.w	800b14e <HAL_RCCEx_PeriphCLKConfig+0x156>
 800b296:	2601      	movs	r6, #1
 800b298:	4635      	mov	r5, r6
 800b29a:	e762      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Spi123ClockSelection)
 800b29c:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800b2a0:	f43f af75 	beq.w	800b18e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b2a4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800b2a8:	f43f af71 	beq.w	800b18e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b2ac:	2601      	movs	r6, #1
 800b2ae:	4635      	mov	r5, r6
 800b2b0:	e777      	b.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi45ClockSelection)
 800b2b2:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800b2b6:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800b2ba:	d085      	beq.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800b2bc:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800b2c0:	d082      	beq.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800b2c2:	2601      	movs	r6, #1
 800b2c4:	4635      	mov	r5, r6
 800b2c6:	e789      	b.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi6ClockSelection)
 800b2c8:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800b2cc:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800b2d0:	d097      	beq.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b2d2:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800b2d6:	d094      	beq.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b2d8:	2601      	movs	r6, #1
 800b2da:	4635      	mov	r5, r6
 800b2dc:	e79c      	b.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800b2de:	bf00      	nop
 800b2e0:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b2e4:	2102      	movs	r1, #2
 800b2e6:	1d20      	adds	r0, r4, #4
 800b2e8:	f7ff fd92 	bl	800ae10 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b2ec:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b2ee:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800b2f0:	2d00      	cmp	r5, #0
 800b2f2:	f000 8272 	beq.w	800b7da <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 800b2f6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b2f8:	0259      	lsls	r1, r3, #9
 800b2fa:	f100 81ee 	bmi.w	800b6da <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b2fe:	07df      	lsls	r7, r3, #31
 800b300:	d52f      	bpl.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    switch(PeriphClkInit->Usart16ClockSelection)
 800b302:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b304:	2a28      	cmp	r2, #40	; 0x28
 800b306:	d82a      	bhi.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x366>
 800b308:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b30c:	002901dc 	.word	0x002901dc
 800b310:	00290029 	.word	0x00290029
 800b314:	00290029 	.word	0x00290029
 800b318:	00290029 	.word	0x00290029
 800b31c:	00290378 	.word	0x00290378
 800b320:	00290029 	.word	0x00290029
 800b324:	00290029 	.word	0x00290029
 800b328:	00290029 	.word	0x00290029
 800b32c:	002901d5 	.word	0x002901d5
 800b330:	00290029 	.word	0x00290029
 800b334:	00290029 	.word	0x00290029
 800b338:	00290029 	.word	0x00290029
 800b33c:	002901dc 	.word	0x002901dc
 800b340:	00290029 	.word	0x00290029
 800b344:	00290029 	.word	0x00290029
 800b348:	00290029 	.word	0x00290029
 800b34c:	002901dc 	.word	0x002901dc
 800b350:	00290029 	.word	0x00290029
 800b354:	00290029 	.word	0x00290029
 800b358:	00290029 	.word	0x00290029
 800b35c:	01dc      	.short	0x01dc
 800b35e:	2601      	movs	r6, #1
 800b360:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b362:	0798      	lsls	r0, r3, #30
 800b364:	d516      	bpl.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b366:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800b368:	2a05      	cmp	r2, #5
 800b36a:	f200 8380 	bhi.w	800ba6e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800b36e:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b372:	000d      	.short	0x000d
 800b374:	00060331 	.word	0x00060331
 800b378:	000d000d 	.word	0x000d000d
 800b37c:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b37e:	2101      	movs	r1, #1
 800b380:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b384:	f7ff fdbe 	bl	800af04 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b388:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b38a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800b38c:	2d00      	cmp	r5, #0
 800b38e:	f000 822e 	beq.w	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800b392:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b394:	0759      	lsls	r1, r3, #29
 800b396:	d517      	bpl.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b398:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800b39c:	2a05      	cmp	r2, #5
 800b39e:	f200 836c 	bhi.w	800ba7a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b3a2:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b3a6:	000d      	.short	0x000d
 800b3a8:	00060321 	.word	0x00060321
 800b3ac:	000d000d 	.word	0x000d000d
 800b3b0:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b3b2:	2101      	movs	r1, #1
 800b3b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b3b8:	f7ff fda4 	bl	800af04 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b3bc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b3be:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800b3c0:	2d00      	cmp	r5, #0
 800b3c2:	f000 821c 	beq.w	800b7fe <HAL_RCCEx_PeriphCLKConfig+0x806>
 800b3c6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b3c8:	069a      	lsls	r2, r3, #26
 800b3ca:	d51d      	bpl.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b3cc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800b3d0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800b3d4:	f000 8287 	beq.w	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b3d8:	f200 80e6 	bhi.w	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 800b3dc:	b14a      	cbz	r2, 800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800b3de:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800b3e2:	f040 80eb 	bne.w	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	1d20      	adds	r0, r4, #4
 800b3ea:	f7ff fd11 	bl	800ae10 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b3ee:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b3f0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800b3f2:	2d00      	cmp	r5, #0
 800b3f4:	f040 81ef 	bne.w	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b3f8:	49a4      	ldr	r1, [pc, #656]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800b3fa:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800b3fe:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800b400:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800b404:	4302      	orrs	r2, r0
 800b406:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b408:	065f      	lsls	r7, r3, #25
 800b40a:	d51d      	bpl.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b40c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800b410:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800b414:	f000 822e 	beq.w	800b874 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800b418:	f200 80d3 	bhi.w	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800b41c:	b14a      	cbz	r2, 800b432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800b41e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b422:	f040 80d8 	bne.w	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b426:	2100      	movs	r1, #0
 800b428:	1d20      	adds	r0, r4, #4
 800b42a:	f7ff fcf1 	bl	800ae10 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b42e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b430:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800b432:	2d00      	cmp	r5, #0
 800b434:	f040 81f4 	bne.w	800b820 <HAL_RCCEx_PeriphCLKConfig+0x828>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b438:	4994      	ldr	r1, [pc, #592]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800b43a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800b43e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800b440:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800b444:	4302      	orrs	r2, r0
 800b446:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b448:	0618      	lsls	r0, r3, #24
 800b44a:	d51d      	bpl.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b44c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800b450:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800b454:	f000 8218 	beq.w	800b888 <HAL_RCCEx_PeriphCLKConfig+0x890>
 800b458:	f200 80c0 	bhi.w	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 800b45c:	b14a      	cbz	r2, 800b472 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800b45e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b462:	f040 80c5 	bne.w	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b466:	2100      	movs	r1, #0
 800b468:	1d20      	adds	r0, r4, #4
 800b46a:	f7ff fcd1 	bl	800ae10 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b46e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b470:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800b472:	2d00      	cmp	r5, #0
 800b474:	f040 81b9 	bne.w	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b478:	4984      	ldr	r1, [pc, #528]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800b47a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800b47e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800b480:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800b484:	4302      	orrs	r2, r0
 800b486:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b488:	0719      	lsls	r1, r3, #28
 800b48a:	d50b      	bpl.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b48c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800b490:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800b494:	f000 823b 	beq.w	800b90e <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b498:	487c      	ldr	r0, [pc, #496]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800b49a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800b49c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800b4a0:	430a      	orrs	r2, r1
 800b4a2:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b4a4:	06da      	lsls	r2, r3, #27
 800b4a6:	d50b      	bpl.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b4a8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800b4ac:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b4b0:	f000 823a 	beq.w	800b928 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b4b4:	4875      	ldr	r0, [pc, #468]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800b4b6:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800b4b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b4bc:	430a      	orrs	r2, r1
 800b4be:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b4c0:	031f      	lsls	r7, r3, #12
 800b4c2:	d50e      	bpl.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch(PeriphClkInit->AdcClockSelection)
 800b4c4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800b4c8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800b4cc:	f000 80e0 	beq.w	800b690 <HAL_RCCEx_PeriphCLKConfig+0x698>
 800b4d0:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800b4d4:	f000 80e3 	beq.w	800b69e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 800b4d8:	2900      	cmp	r1, #0
 800b4da:	f000 81c3 	beq.w	800b864 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800b4de:	2601      	movs	r6, #1
 800b4e0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b4e2:	0358      	lsls	r0, r3, #13
 800b4e4:	d50f      	bpl.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch(PeriphClkInit->UsbClockSelection)
 800b4e6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800b4ea:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800b4ee:	f000 80ba 	beq.w	800b666 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b4f2:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800b4f6:	f000 80bd 	beq.w	800b674 <HAL_RCCEx_PeriphCLKConfig+0x67c>
 800b4fa:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800b4fe:	f000 81a9 	beq.w	800b854 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 800b502:	2601      	movs	r6, #1
 800b504:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b506:	03d9      	lsls	r1, r3, #15
 800b508:	d509      	bpl.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->SdmmcClockSelection)
 800b50a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800b50c:	2a00      	cmp	r2, #0
 800b50e:	f000 818f 	beq.w	800b830 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800b512:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b516:	f000 8136 	beq.w	800b786 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 800b51a:	2601      	movs	r6, #1
 800b51c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b51e:	009a      	lsls	r2, r3, #2
 800b520:	f100 811c 	bmi.w	800b75c <HAL_RCCEx_PeriphCLKConfig+0x764>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b524:	039f      	lsls	r7, r3, #14
 800b526:	d466      	bmi.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    return HAL_OK;
 800b528:	1e30      	subs	r0, r6, #0
 800b52a:	bf18      	it	ne
 800b52c:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b52e:	02de      	lsls	r6, r3, #11
 800b530:	d506      	bpl.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x548>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b532:	4956      	ldr	r1, [pc, #344]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800b534:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800b536:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800b538:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b53c:	432a      	orrs	r2, r5
 800b53e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b540:	00dd      	lsls	r5, r3, #3
 800b542:	d507      	bpl.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b544:	4951      	ldr	r1, [pc, #324]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800b546:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 800b54a:	690a      	ldr	r2, [r1, #16]
 800b54c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b550:	432a      	orrs	r2, r5
 800b552:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b554:	0299      	lsls	r1, r3, #10
 800b556:	d506      	bpl.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x56e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b558:	494c      	ldr	r1, [pc, #304]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800b55a:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 800b55c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800b55e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800b562:	432a      	orrs	r2, r5
 800b564:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b566:	005a      	lsls	r2, r3, #1
 800b568:	d509      	bpl.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x586>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b56a:	4a48      	ldr	r2, [pc, #288]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800b56c:	6911      	ldr	r1, [r2, #16]
 800b56e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800b572:	6111      	str	r1, [r2, #16]
 800b574:	6911      	ldr	r1, [r2, #16]
 800b576:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800b57a:	4329      	orrs	r1, r5
 800b57c:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b57e:	2b00      	cmp	r3, #0
 800b580:	da06      	bge.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x598>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b582:	4942      	ldr	r1, [pc, #264]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800b584:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800b586:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800b588:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b58c:	432a      	orrs	r2, r5
 800b58e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b590:	021b      	lsls	r3, r3, #8
 800b592:	d507      	bpl.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b594:	4a3d      	ldr	r2, [pc, #244]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800b596:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800b59a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800b59c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800b5a0:	430b      	orrs	r3, r1
 800b5a2:	6553      	str	r3, [r2, #84]	; 0x54
}
 800b5a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b5a8:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800b5ac:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800b5b0:	f43f af1f 	beq.w	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800b5b4:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800b5b8:	f43f af1b 	beq.w	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800b5bc:	2601      	movs	r6, #1
 800b5be:	4635      	mov	r5, r6
 800b5c0:	e722      	b.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b5c2:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 800b5c6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800b5ca:	f43f af32 	beq.w	800b432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800b5ce:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800b5d2:	f43f af2e 	beq.w	800b432 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800b5d6:	2601      	movs	r6, #1
 800b5d8:	4635      	mov	r5, r6
 800b5da:	e735      	b.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b5dc:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800b5e0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800b5e4:	f43f af45 	beq.w	800b472 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800b5e8:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800b5ec:	f43f af41 	beq.w	800b472 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800b5f0:	2601      	movs	r6, #1
 800b5f2:	4635      	mov	r5, r6
 800b5f4:	e748      	b.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->RngClockSelection)
 800b5f6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800b5f8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800b5fc:	f000 8121 	beq.w	800b842 <HAL_RCCEx_PeriphCLKConfig+0x84a>
 800b600:	d906      	bls.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800b602:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800b606:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b60a:	d003      	beq.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800b60c:	2001      	movs	r0, #1
 800b60e:	e78e      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x536>
 800b610:	2a00      	cmp	r2, #0
 800b612:	d1fb      	bne.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x614>
    if(ret == HAL_OK)
 800b614:	2d00      	cmp	r5, #0
 800b616:	d1f9      	bne.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x614>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b618:	4d1c      	ldr	r5, [pc, #112]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x694>)
    return HAL_OK;
 800b61a:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b61c:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_OK;
 800b61e:	bf18      	it	ne
 800b620:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b622:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800b626:	430a      	orrs	r2, r1
 800b628:	656a      	str	r2, [r5, #84]	; 0x54
 800b62a:	e780      	b.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch(PeriphClkInit->Sai1ClockSelection)
 800b62c:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800b62e:	2d00      	cmp	r5, #0
 800b630:	f040 80a5 	bne.w	800b77e <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b634:	4915      	ldr	r1, [pc, #84]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800b636:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b638:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800b63a:	f022 0207 	bic.w	r2, r2, #7
 800b63e:	4302      	orrs	r2, r0
 800b640:	650a      	str	r2, [r1, #80]	; 0x50
 800b642:	e511      	b.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x70>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b644:	2101      	movs	r1, #1
 800b646:	1d20      	adds	r0, r4, #4
 800b648:	f7ff fbe2 	bl	800ae10 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b64c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b64e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800b650:	2d00      	cmp	r5, #0
 800b652:	f040 80dd 	bne.w	800b810 <HAL_RCCEx_PeriphCLKConfig+0x818>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b656:	490d      	ldr	r1, [pc, #52]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800b658:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800b65a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800b65c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b660:	4302      	orrs	r2, r0
 800b662:	650a      	str	r2, [r1, #80]	; 0x50
 800b664:	e5e8      	b.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b666:	2101      	movs	r1, #1
 800b668:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b66c:	f7ff fc4a 	bl	800af04 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b670:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b672:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800b674:	2d00      	cmp	r5, #0
 800b676:	f040 80d9 	bne.w	800b82c <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b67a:	4904      	ldr	r1, [pc, #16]	; (800b68c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800b67c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800b680:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800b682:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800b686:	4302      	orrs	r2, r0
 800b688:	654a      	str	r2, [r1, #84]	; 0x54
 800b68a:	e73c      	b.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 800b68c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b690:	2102      	movs	r1, #2
 800b692:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b696:	f7ff fc35 	bl	800af04 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b69a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b69c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800b69e:	2d00      	cmp	r5, #0
 800b6a0:	f040 80c2 	bne.w	800b828 <HAL_RCCEx_PeriphCLKConfig+0x830>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b6a4:	49ac      	ldr	r1, [pc, #688]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800b6a6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800b6aa:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800b6ac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800b6b0:	4302      	orrs	r2, r0
 800b6b2:	658a      	str	r2, [r1, #88]	; 0x58
 800b6b4:	e715      	b.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b6b6:	2101      	movs	r1, #1
 800b6b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b6bc:	f7ff fc22 	bl	800af04 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b6c0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b6c2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800b6c4:	2d00      	cmp	r5, #0
 800b6c6:	f040 80ad 	bne.w	800b824 <HAL_RCCEx_PeriphCLKConfig+0x82c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b6ca:	49a3      	ldr	r1, [pc, #652]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800b6cc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b6ce:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800b6d0:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800b6d4:	4302      	orrs	r2, r0
 800b6d6:	654a      	str	r2, [r1, #84]	; 0x54
 800b6d8:	e643      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b6da:	4fa0      	ldr	r7, [pc, #640]	; (800b95c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6e2:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800b6e4:	f7fa ff84 	bl	80065f0 <HAL_GetTick>
 800b6e8:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b6ea:	e006      	b.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x702>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6ec:	f7fa ff80 	bl	80065f0 <HAL_GetTick>
 800b6f0:	eba0 0008 	sub.w	r0, r0, r8
 800b6f4:	2864      	cmp	r0, #100	; 0x64
 800b6f6:	f200 818b 	bhi.w	800ba10 <HAL_RCCEx_PeriphCLKConfig+0xa18>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	05da      	lsls	r2, r3, #23
 800b6fe:	d5f5      	bpl.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    if(ret == HAL_OK)
 800b700:	2d00      	cmp	r5, #0
 800b702:	f040 81b1 	bne.w	800ba68 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b706:	4a94      	ldr	r2, [pc, #592]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800b708:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800b70c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800b70e:	4059      	eors	r1, r3
 800b710:	f411 7f40 	tst.w	r1, #768	; 0x300
 800b714:	d00b      	beq.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0x736>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b716:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800b718:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b71a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800b71e:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800b722:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b724:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800b726:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800b72a:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800b72c:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b72e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b732:	f000 817b 	beq.w	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xa34>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b736:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800b73a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800b73e:	f000 8189 	beq.w	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xa5c>
 800b742:	4985      	ldr	r1, [pc, #532]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800b744:	690a      	ldr	r2, [r1, #16]
 800b746:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800b74a:	610a      	str	r2, [r1, #16]
 800b74c:	4a82      	ldr	r2, [pc, #520]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800b74e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b752:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800b754:	430b      	orrs	r3, r1
 800b756:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b758:	6823      	ldr	r3, [r4, #0]
 800b75a:	e5d0      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x306>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b75c:	2102      	movs	r1, #2
 800b75e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b762:	f7ff fbcf 	bl	800af04 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b766:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b768:	2800      	cmp	r0, #0
 800b76a:	f43f aedb 	beq.w	800b524 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      status=HAL_ERROR;
 800b76e:	2601      	movs	r6, #1
 800b770:	e6d8      	b.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800b772:	462e      	mov	r6, r5
 800b774:	e496      	b.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800b776:	462e      	mov	r6, r5
 800b778:	e513      	b.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b77a:	462e      	mov	r6, r5
 800b77c:	e4b4      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 800b77e:	462e      	mov	r6, r5
 800b780:	e472      	b.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800b782:	462e      	mov	r6, r5
 800b784:	e4d2      	b.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0x134>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b786:	2102      	movs	r1, #2
 800b788:	1d20      	adds	r0, r4, #4
 800b78a:	f7ff fb41 	bl	800ae10 <RCCEx_PLL2_Config>
 800b78e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b790:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800b792:	2d00      	cmp	r5, #0
 800b794:	d153      	bne.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b796:	4970      	ldr	r1, [pc, #448]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800b798:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b79a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800b79c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b7a0:	4302      	orrs	r2, r0
 800b7a2:	64ca      	str	r2, [r1, #76]	; 0x4c
 800b7a4:	e6bb      	b.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7a6:	496c      	ldr	r1, [pc, #432]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800b7a8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800b7aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b7ae:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800b7b0:	e46e      	b.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7b2:	4969      	ldr	r1, [pc, #420]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800b7b4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800b7b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b7ba:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800b7bc:	e489      	b.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0xda>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7be:	4966      	ldr	r1, [pc, #408]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800b7c0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800b7c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b7c6:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800b7c8:	e4a5      	b.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7ca:	4963      	ldr	r1, [pc, #396]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800b7cc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800b7ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b7d2:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800b7d4:	e4db      	b.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b7d6:	462e      	mov	r6, r5
 800b7d8:	e616      	b.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x410>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b7da:	495f      	ldr	r1, [pc, #380]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800b7dc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800b7de:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800b7e0:	f022 0203 	bic.w	r2, r2, #3
 800b7e4:	4302      	orrs	r2, r0
 800b7e6:	64ca      	str	r2, [r1, #76]	; 0x4c
 800b7e8:	e586      	b.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b7ea:	462e      	mov	r6, r5
 800b7ec:	e64c      	b.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x490>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b7ee:	495a      	ldr	r1, [pc, #360]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800b7f0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800b7f2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800b7f4:	f022 0207 	bic.w	r2, r2, #7
 800b7f8:	4302      	orrs	r2, r0
 800b7fa:	654a      	str	r2, [r1, #84]	; 0x54
 800b7fc:	e5ca      	b.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b7fe:	4956      	ldr	r1, [pc, #344]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800b800:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800b804:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800b806:	f022 0207 	bic.w	r2, r2, #7
 800b80a:	4302      	orrs	r2, r0
 800b80c:	658a      	str	r2, [r1, #88]	; 0x58
 800b80e:	e5db      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800b810:	462e      	mov	r6, r5
 800b812:	e511      	b.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800b814:	462e      	mov	r6, r5
 800b816:	e4a4      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800b818:	462e      	mov	r6, r5
 800b81a:	e4df      	b.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b81c:	462e      	mov	r6, r5
 800b81e:	e4fb      	b.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800b820:	462e      	mov	r6, r5
 800b822:	e611      	b.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x450>
 800b824:	462e      	mov	r6, r5
 800b826:	e59c      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b828:	462e      	mov	r6, r5
 800b82a:	e65a      	b.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800b82c:	462e      	mov	r6, r5
 800b82e:	e66a      	b.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b830:	4949      	ldr	r1, [pc, #292]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800b832:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800b834:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b838:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800b83a:	2d00      	cmp	r5, #0
 800b83c:	d0ab      	beq.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 800b83e:	462e      	mov	r6, r5
 800b840:	e66d      	b.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b842:	4845      	ldr	r0, [pc, #276]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800b844:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b846:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800b84a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800b84c:	2d00      	cmp	r5, #0
 800b84e:	f47f aedd 	bne.w	800b60c <HAL_RCCEx_PeriphCLKConfig+0x614>
 800b852:	e6e1      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x620>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b854:	4940      	ldr	r1, [pc, #256]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800b856:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800b858:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b85c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800b85e:	2d00      	cmp	r5, #0
 800b860:	d1e4      	bne.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x834>
 800b862:	e70a      	b.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x682>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b864:	1d20      	adds	r0, r4, #4
 800b866:	f7ff fad3 	bl	800ae10 <RCCEx_PLL2_Config>
 800b86a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b86c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800b86e:	2d00      	cmp	r5, #0
 800b870:	d1da      	bne.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800b872:	e717      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b874:	2102      	movs	r1, #2
 800b876:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b87a:	f7ff fb43 	bl	800af04 <RCCEx_PLL3_Config>
 800b87e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b880:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800b882:	2d00      	cmp	r5, #0
 800b884:	d1cc      	bne.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x828>
 800b886:	e5d7      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x440>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b888:	2102      	movs	r1, #2
 800b88a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b88e:	f7ff fb39 	bl	800af04 <RCCEx_PLL3_Config>
 800b892:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b894:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800b896:	2d00      	cmp	r5, #0
 800b898:	d1a7      	bne.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800b89a:	e5ed      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b89c:	2101      	movs	r1, #1
 800b89e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b8a2:	f7ff fb2f 	bl	800af04 <RCCEx_PLL3_Config>
 800b8a6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b8a8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800b8aa:	2d00      	cmp	r5, #0
 800b8ac:	d1b4      	bne.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x820>
 800b8ae:	e48e      	b.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b8b0:	2101      	movs	r1, #1
 800b8b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b8b6:	f7ff fb25 	bl	800af04 <RCCEx_PLL3_Config>
 800b8ba:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b8bc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800b8be:	2d00      	cmp	r5, #0
 800b8c0:	d1ac      	bne.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x824>
 800b8c2:	e4a1      	b.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8c4:	4924      	ldr	r1, [pc, #144]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800b8c6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800b8c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b8cc:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800b8ce:	2d00      	cmp	r5, #0
 800b8d0:	d19e      	bne.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x818>
 800b8d2:	e6c0      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b8d4:	2102      	movs	r1, #2
 800b8d6:	1d20      	adds	r0, r4, #4
 800b8d8:	f7ff fa9a 	bl	800ae10 <RCCEx_PLL2_Config>
 800b8dc:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b8de:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800b8e0:	2d00      	cmp	r5, #0
 800b8e2:	d197      	bne.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 800b8e4:	e436      	b.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b8e6:	2102      	movs	r1, #2
 800b8e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b8ec:	f7ff fb0a 	bl	800af04 <RCCEx_PLL3_Config>
 800b8f0:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b8f2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800b8f4:	2d00      	cmp	r5, #0
 800b8f6:	f47f af6e 	bne.w	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800b8fa:	e57d      	b.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8fc:	4916      	ldr	r1, [pc, #88]	; (800b958 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800b8fe:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800b900:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b904:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800b906:	2d00      	cmp	r5, #0
 800b908:	f47f acf5 	bne.w	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800b90c:	e765      	b.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b90e:	2102      	movs	r1, #2
 800b910:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b914:	f7ff faf6 	bl	800af04 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b918:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b91c:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b91e:	2800      	cmp	r0, #0
 800b920:	f43f adba 	beq.w	800b498 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
          status = HAL_ERROR;
 800b924:	2601      	movs	r6, #1
 800b926:	e5b7      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b928:	2102      	movs	r1, #2
 800b92a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b92e:	f7ff fae9 	bl	800af04 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b932:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b936:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b938:	2800      	cmp	r0, #0
 800b93a:	f43f adbb 	beq.w	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
        status = HAL_ERROR;
 800b93e:	2601      	movs	r6, #1
 800b940:	e5b8      	b.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b942:	2102      	movs	r1, #2
 800b944:	3024      	adds	r0, #36	; 0x24
 800b946:	f7ff fadd 	bl	800af04 <RCCEx_PLL3_Config>
 800b94a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800b94c:	2e00      	cmp	r6, #0
 800b94e:	f43f ab6f 	beq.w	800b030 <HAL_RCCEx_PeriphCLKConfig+0x38>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b952:	6823      	ldr	r3, [r4, #0]
 800b954:	f7ff bb7a 	b.w	800b04c <HAL_RCCEx_PeriphCLKConfig+0x54>
 800b958:	58024400 	.word	0x58024400
 800b95c:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b960:	2100      	movs	r1, #0
 800b962:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b966:	f7ff facd 	bl	800af04 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b96a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b96c:	4605      	mov	r5, r0
      break;
 800b96e:	f7ff bbb0 	b.w	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0xda>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b972:	2100      	movs	r1, #0
 800b974:	1d20      	adds	r0, r4, #4
 800b976:	f7ff fa4b 	bl	800ae10 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b97a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b97c:	4605      	mov	r5, r0
      break;
 800b97e:	e656      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b980:	2100      	movs	r1, #0
 800b982:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b986:	f7ff fabd 	bl	800af04 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b98a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b98c:	4605      	mov	r5, r0
      break;
 800b98e:	e64e      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b990:	2100      	movs	r1, #0
 800b992:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b996:	f7ff fab5 	bl	800af04 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b99a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b99c:	4605      	mov	r5, r0
      break;
 800b99e:	f7ff bbf6 	b.w	800b18e <HAL_RCCEx_PeriphCLKConfig+0x196>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b9a8:	f7ff faac 	bl	800af04 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b9ac:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b9ae:	4605      	mov	r5, r0
      break;
 800b9b0:	f7ff bb6e 	b.w	800b090 <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9b4:	4932      	ldr	r1, [pc, #200]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
      break;
 800b9b6:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9b8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800b9ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b9be:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800b9c0:	e635      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b9c8:	f7ff fa9c 	bl	800af04 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b9cc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9ce:	4605      	mov	r5, r0
      break;
 800b9d0:	f7ff bba1 	b.w	800b116 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b9d4:	2101      	movs	r1, #1
 800b9d6:	1d20      	adds	r0, r4, #4
 800b9d8:	f7ff fa1a 	bl	800ae10 <RCCEx_PLL2_Config>
 800b9dc:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b9de:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800b9e0:	2d00      	cmp	r5, #0
 800b9e2:	f47f acd6 	bne.w	800b392 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800b9e6:	e702      	b.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x7f6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b9e8:	2101      	movs	r1, #1
 800b9ea:	1d20      	adds	r0, r4, #4
 800b9ec:	f7ff fa10 	bl	800ae10 <RCCEx_PLL2_Config>
 800b9f0:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b9f2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800b9f4:	2d00      	cmp	r5, #0
 800b9f6:	f47f ace6 	bne.w	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800b9fa:	e700      	b.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b9fc:	2101      	movs	r1, #1
 800b9fe:	1d20      	adds	r0, r4, #4
 800ba00:	f7ff fa06 	bl	800ae10 <RCCEx_PLL2_Config>
 800ba04:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ba06:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ba08:	2d00      	cmp	r5, #0
 800ba0a:	f47f af0b 	bne.w	800b824 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800ba0e:	e65c      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x6d2>
            ret = HAL_TIMEOUT;
 800ba10:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ba12:	6823      	ldr	r3, [r4, #0]
            ret = HAL_TIMEOUT;
 800ba14:	4635      	mov	r5, r6
 800ba16:	e472      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800ba18:	2601      	movs	r6, #1
 800ba1a:	f7ff bb17 	b.w	800b04c <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba1e:	4818      	ldr	r0, [pc, #96]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ba20:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800ba22:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800ba26:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800ba28:	f7ff bb09 	b.w	800b03e <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 800ba2c:	f7fa fde0 	bl	80065f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba30:	f8df 804c 	ldr.w	r8, [pc, #76]	; 800ba80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
        tickstart = HAL_GetTick();
 800ba34:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba36:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba3a:	e004      	b.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba3c:	f7fa fdd8 	bl	80065f0 <HAL_GetTick>
 800ba40:	1bc0      	subs	r0, r0, r7
 800ba42:	4548      	cmp	r0, r9
 800ba44:	d8e4      	bhi.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0xa18>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba46:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800ba4a:	079b      	lsls	r3, r3, #30
 800ba4c:	d5f6      	bpl.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0xa44>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ba4e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800ba52:	e670      	b.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800ba54:	480a      	ldr	r0, [pc, #40]	; (800ba80 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ba56:	4a0b      	ldr	r2, [pc, #44]	; (800ba84 <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 800ba58:	6901      	ldr	r1, [r0, #16]
 800ba5a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800ba5e:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800ba62:	430a      	orrs	r2, r1
 800ba64:	6102      	str	r2, [r0, #16]
 800ba66:	e671      	b.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0x754>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ba68:	6823      	ldr	r3, [r4, #0]
 800ba6a:	462e      	mov	r6, r5
 800ba6c:	e447      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ba6e:	2601      	movs	r6, #1
 800ba70:	4635      	mov	r5, r6
 800ba72:	e48f      	b.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->FmcClockSelection)
 800ba74:	2601      	movs	r6, #1
 800ba76:	4635      	mov	r5, r6
 800ba78:	e43e      	b.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ba7a:	2601      	movs	r6, #1
 800ba7c:	4635      	mov	r5, r6
 800ba7e:	e4a3      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800ba80:	58024400 	.word	0x58024400
 800ba84:	00ffffcf 	.word	0x00ffffcf

0800ba88 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800ba88:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ba8a:	f7ff f8f1 	bl	800ac70 <HAL_RCC_GetHCLKFreq>
 800ba8e:	4b05      	ldr	r3, [pc, #20]	; (800baa4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800ba90:	4a05      	ldr	r2, [pc, #20]	; (800baa8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800ba92:	6a1b      	ldr	r3, [r3, #32]
 800ba94:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ba98:	5cd3      	ldrb	r3, [r2, r3]
 800ba9a:	f003 031f 	and.w	r3, r3, #31
}
 800ba9e:	40d8      	lsrs	r0, r3
 800baa0:	bd08      	pop	{r3, pc}
 800baa2:	bf00      	nop
 800baa4:	58024400 	.word	0x58024400
 800baa8:	0801af3c 	.word	0x0801af3c

0800baac <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800baac:	4b4f      	ldr	r3, [pc, #316]	; (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800baae:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bab0:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800bab2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bab4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800bab6:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800baba:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800babe:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800bac0:	d05c      	beq.n	800bb7c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800bac2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bac6:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800baca:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800bace:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800bad2:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800bad4:	ee07 4a90 	vmov	s15, r4
 800bad8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800badc:	d003      	beq.n	800bae6 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800bade:	2902      	cmp	r1, #2
 800bae0:	d075      	beq.n	800bbce <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800bae2:	2900      	cmp	r1, #0
 800bae4:	d04f      	beq.n	800bb86 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bae6:	ee07 2a90 	vmov	s15, r2
 800baea:	eddf 6a41 	vldr	s13, [pc, #260]	; 800bbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800baee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800baf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800baf8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800bafc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb00:	ee06 3a90 	vmov	s13, r3
 800bb04:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800bb08:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bb0c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bb10:	eee7 6a25 	vfma.f32	s13, s14, s11
 800bb14:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bb18:	4a34      	ldr	r2, [pc, #208]	; (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800bb1a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bb1e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800bb20:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800bb24:	ee07 3a10 	vmov	s14, r3
 800bb28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800bb2c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bb2e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bb32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb3a:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bb3e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800bb40:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800bb44:	ee07 3a10 	vmov	s14, r3
 800bb48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bb4c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bb50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb58:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bb5c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800bb5e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800bb62:	ee07 3a90 	vmov	s15, r3
 800bb66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb6a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bb6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb72:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800bb76:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800bb7a:	4770      	bx	lr
 800bb7c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bb7e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bb82:	6082      	str	r2, [r0, #8]
}
 800bb84:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb86:	6819      	ldr	r1, [r3, #0]
 800bb88:	0689      	lsls	r1, r1, #26
 800bb8a:	d527      	bpl.n	800bbdc <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bb8c:	681c      	ldr	r4, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb8e:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bb92:	4919      	ldr	r1, [pc, #100]	; (800bbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb94:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bb9a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bba2:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800bba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bbaa:	40d1      	lsrs	r1, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bbac:	ee06 3a90 	vmov	s13, r3
 800bbb0:	ee05 1a90 	vmov	s11, r1
 800bbb4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bbb8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800bbbc:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bbc0:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800bbc4:	eee7 6a05 	vfma.f32	s13, s14, s10
 800bbc8:	ee66 6a26 	vmul.f32	s13, s12, s13
 800bbcc:	e7a4      	b.n	800bb18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bbce:	ee07 2a90 	vmov	s15, r2
 800bbd2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800bbd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbda:	e78a      	b.n	800baf2 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bbdc:	ee07 2a90 	vmov	s15, r2
 800bbe0:	eddf 6a07 	vldr	s13, [pc, #28]	; 800bc00 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800bbe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbe8:	e783      	b.n	800baf2 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800bbea:	bf00      	nop
 800bbec:	58024400 	.word	0x58024400
 800bbf0:	4a742400 	.word	0x4a742400
 800bbf4:	39000000 	.word	0x39000000
 800bbf8:	03d09000 	.word	0x03d09000
 800bbfc:	4bbebc20 	.word	0x4bbebc20
 800bc00:	4c742400 	.word	0x4c742400

0800bc04 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc04:	4b4f      	ldr	r3, [pc, #316]	; (800bd44 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800bc06:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc08:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bc0a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bc0c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800bc0e:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bc12:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bc16:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 800bc18:	d05c      	beq.n	800bcd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bc1a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bc1e:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc22:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bc26:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800bc2a:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bc2c:	ee07 4a90 	vmov	s15, r4
 800bc30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800bc34:	d003      	beq.n	800bc3e <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800bc36:	2902      	cmp	r1, #2
 800bc38:	d075      	beq.n	800bd26 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800bc3a:	2900      	cmp	r1, #0
 800bc3c:	d04f      	beq.n	800bcde <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bc3e:	ee07 2a90 	vmov	s15, r2
 800bc42:	eddf 6a41 	vldr	s13, [pc, #260]	; 800bd48 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800bc46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800bc50:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800bc54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc58:	ee06 3a90 	vmov	s13, r3
 800bc5c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800bc60:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bc64:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bc68:	eee7 6a25 	vfma.f32	s13, s14, s11
 800bc6c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bc70:	4a34      	ldr	r2, [pc, #208]	; (800bd44 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800bc72:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bc76:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800bc78:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800bc7c:	ee07 3a10 	vmov	s14, r3
 800bc80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800bc84:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bc86:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bc8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc92:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bc96:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800bc98:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800bc9c:	ee07 3a10 	vmov	s14, r3
 800bca0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bca4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcb0:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bcb4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800bcb6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800bcba:	ee07 3a90 	vmov	s15, r3
 800bcbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcc2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bcc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcca:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800bcce:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800bcd2:	4770      	bx	lr
 800bcd4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bcd6:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bcda:	6082      	str	r2, [r0, #8]
}
 800bcdc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcde:	6819      	ldr	r1, [r3, #0]
 800bce0:	0689      	lsls	r1, r1, #26
 800bce2:	d527      	bpl.n	800bd34 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bce4:	681c      	ldr	r4, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bce6:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bcea:	4919      	ldr	r1, [pc, #100]	; (800bd50 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bcec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bcf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bcf2:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bcf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcfa:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800bcfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bd02:	40d1      	lsrs	r1, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd04:	ee06 3a90 	vmov	s13, r3
 800bd08:	ee05 1a90 	vmov	s11, r1
 800bd0c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bd10:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800bd14:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bd18:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800bd1c:	eee7 6a05 	vfma.f32	s13, s14, s10
 800bd20:	ee66 6a26 	vmul.f32	s13, s12, s13
 800bd24:	e7a4      	b.n	800bc70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd26:	ee07 2a90 	vmov	s15, r2
 800bd2a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800bd54 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800bd2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd32:	e78a      	b.n	800bc4a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd34:	ee07 2a90 	vmov	s15, r2
 800bd38:	eddf 6a07 	vldr	s13, [pc, #28]	; 800bd58 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800bd3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd40:	e783      	b.n	800bc4a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800bd42:	bf00      	nop
 800bd44:	58024400 	.word	0x58024400
 800bd48:	4a742400 	.word	0x4a742400
 800bd4c:	39000000 	.word	0x39000000
 800bd50:	03d09000 	.word	0x03d09000
 800bd54:	4bbebc20 	.word	0x4bbebc20
 800bd58:	4c742400 	.word	0x4c742400

0800bd5c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd5c:	4b4f      	ldr	r3, [pc, #316]	; (800be9c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800bd5e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd60:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800bd62:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bd64:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 800bd66:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800bd6a:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bd6e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 800bd70:	d05c      	beq.n	800be2c <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bd72:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bd76:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd7a:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bd7e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800bd82:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bd84:	ee07 4a90 	vmov	s15, r4
 800bd88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800bd8c:	d07e      	beq.n	800be8c <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800bd8e:	2902      	cmp	r1, #2
 800bd90:	d075      	beq.n	800be7e <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 800bd92:	2900      	cmp	r1, #0
 800bd94:	d04f      	beq.n	800be36 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd96:	ee07 2a90 	vmov	s15, r2
 800bd9a:	eddf 6a41 	vldr	s13, [pc, #260]	; 800bea0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800bd9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800bda8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800bea4 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800bdac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdb0:	ee06 3a90 	vmov	s13, r3
 800bdb4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800bdb8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bdbc:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bdc0:	eee7 6a25 	vfma.f32	s13, s14, s11
 800bdc4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800bdc8:	4a34      	ldr	r2, [pc, #208]	; (800be9c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800bdca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bdce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800bdd0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800bdd4:	ee07 3a10 	vmov	s14, r3
 800bdd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800bddc:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800bdde:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bde2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bde6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdea:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800bdee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800bdf0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800bdf4:	ee07 3a10 	vmov	s14, r3
 800bdf8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bdfc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800be00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be08:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800be0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800be0e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800be12:	ee07 3a90 	vmov	s15, r3
 800be16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be1a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800be1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be22:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800be26:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800be2a:	4770      	bx	lr
 800be2c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800be2e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800be32:	6082      	str	r2, [r0, #8]
}
 800be34:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be36:	6819      	ldr	r1, [r3, #0]
 800be38:	0689      	lsls	r1, r1, #26
 800be3a:	d5ac      	bpl.n	800bd96 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800be3c:	681c      	ldr	r4, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800be3e:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800be42:	4919      	ldr	r1, [pc, #100]	; (800bea8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800be44:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800be48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800be4a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800be4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be52:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800bea4 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800be56:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800be5a:	40d1      	lsrs	r1, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800be5c:	ee06 3a90 	vmov	s13, r3
 800be60:	ee05 1a90 	vmov	s11, r1
 800be64:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800be68:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800be6c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800be70:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800be74:	eee7 6a05 	vfma.f32	s13, s14, s10
 800be78:	ee66 6a26 	vmul.f32	s13, s12, s13
 800be7c:	e7a4      	b.n	800bdc8 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800be7e:	ee07 2a90 	vmov	s15, r2
 800be82:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800beac <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800be86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be8a:	e78a      	b.n	800bda2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800be8c:	ee07 2a90 	vmov	s15, r2
 800be90:	eddf 6a07 	vldr	s13, [pc, #28]	; 800beb0 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 800be94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be98:	e783      	b.n	800bda2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 800be9a:	bf00      	nop
 800be9c:	58024400 	.word	0x58024400
 800bea0:	4c742400 	.word	0x4c742400
 800bea4:	39000000 	.word	0x39000000
 800bea8:	03d09000 	.word	0x03d09000
 800beac:	4bbebc20 	.word	0x4bbebc20
 800beb0:	4a742400 	.word	0x4a742400

0800beb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800beb4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 800beb8:	b500      	push	{lr}
 800beba:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bebc:	d074      	beq.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bebe:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800bec2:	d02c      	beq.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bec4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800bec8:	f000 80cd 	beq.w	800c066 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800becc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800bed0:	d07e      	beq.n	800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bed2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800bed6:	d058      	beq.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bed8:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800bedc:	f000 8102 	beq.w	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bee0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800bee4:	f000 810d 	beq.w	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bee8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800beec:	f000 80e1 	beq.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bef0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800bef4:	d138      	bne.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800bef6:	4b99      	ldr	r3, [pc, #612]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800bef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800befa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 800befe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf02:	f000 808d 	beq.w	800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800bf06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf0a:	f000 813d 	beq.w	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 800bf0e:	bb5b      	cbnz	r3, 800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bf10:	4b92      	ldr	r3, [pc, #584]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800bf12:	6818      	ldr	r0, [r3, #0]
 800bf14:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800bf18:	d043      	beq.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
            frequency = HSE_VALUE;
 800bf1a:	4891      	ldr	r0, [pc, #580]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800bf1c:	e041      	b.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800bf1e:	4a8f      	ldr	r2, [pc, #572]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800bf20:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800bf22:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 800bf26:	2b80      	cmp	r3, #128	; 0x80
 800bf28:	f000 8098 	beq.w	800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800bf2c:	d920      	bls.n	800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800bf2e:	2bc0      	cmp	r3, #192	; 0xc0
 800bf30:	d036      	beq.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bf32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf36:	d117      	bne.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bf38:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf3a:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bf3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf40:	0749      	lsls	r1, r1, #29
 800bf42:	d502      	bpl.n	800bf4a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f000 80ae 	beq.w	800c0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf4a:	4a84      	ldr	r2, [pc, #528]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800bf4c:	6812      	ldr	r2, [r2, #0]
 800bf4e:	05d0      	lsls	r0, r2, #23
 800bf50:	d503      	bpl.n	800bf5a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800bf52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf56:	f000 80ff 	beq.w	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf5a:	4a80      	ldr	r2, [pc, #512]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800bf5c:	6812      	ldr	r2, [r2, #0]
 800bf5e:	0391      	lsls	r1, r2, #14
 800bf60:	d502      	bpl.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800bf62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf66:	d0d8      	beq.n	800bf1a <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      switch (srcclk)
 800bf68:	2000      	movs	r0, #0
}
 800bf6a:	b005      	add	sp, #20
 800bf6c:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d04c      	beq.n	800c00e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800bf74:	2b40      	cmp	r3, #64	; 0x40
 800bf76:	d1f7      	bne.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf78:	6810      	ldr	r0, [r2, #0]
 800bf7a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800bf7e:	d010      	beq.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf80:	a801      	add	r0, sp, #4
 800bf82:	f7ff fd93 	bl	800baac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf86:	9801      	ldr	r0, [sp, #4]
 800bf88:	e00b      	b.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800bf8a:	4a74      	ldr	r2, [pc, #464]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800bf8c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800bf8e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 800bf92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf96:	d061      	beq.n	800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800bf98:	d937      	bls.n	800c00a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 800bf9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf9e:	d179      	bne.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          frequency = EXTERNAL_CLOCK_VALUE;
 800bfa0:	4870      	ldr	r0, [pc, #448]	; (800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
}
 800bfa2:	b005      	add	sp, #20
 800bfa4:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800bfa8:	4b6c      	ldr	r3, [pc, #432]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800bfaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfac:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 800bfb0:	2b04      	cmp	r3, #4
 800bfb2:	d8d9      	bhi.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800bfb4:	a201      	add	r2, pc, #4	; (adr r2, 800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 800bfb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfba:	bf00      	nop
 800bfbc:	0800c021 	.word	0x0800c021
 800bfc0:	0800c045 	.word	0x0800c045
 800bfc4:	0800c031 	.word	0x0800c031
 800bfc8:	0800bfa1 	.word	0x0800bfa1
 800bfcc:	0800c02d 	.word	0x0800c02d
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800bfd0:	4a62      	ldr	r2, [pc, #392]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800bfd2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800bfd4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 800bfd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfdc:	d03e      	beq.n	800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800bfde:	d937      	bls.n	800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 800bfe0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bfe4:	d0dc      	beq.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bfe6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bfea:	d1bd      	bne.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bfec:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bfee:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bff0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bff4:	0752      	lsls	r2, r2, #29
 800bff6:	d5a8      	bpl.n	800bf4a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1a6      	bne.n	800bf4a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bffc:	4b57      	ldr	r3, [pc, #348]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800bffe:	485a      	ldr	r0, [pc, #360]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c006:	40d8      	lsrs	r0, r3
 800c008:	e7cb      	b.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d146      	bne.n	800c09c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c00e:	6810      	ldr	r0, [r2, #0]
 800c010:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800c014:	d0c5      	beq.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c016:	a801      	add	r0, sp, #4
 800c018:	f7ff fea0 	bl	800bd5c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800c01c:	9802      	ldr	r0, [sp, #8]
 800c01e:	e7c0      	b.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c020:	4b4e      	ldr	r3, [pc, #312]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800c022:	6818      	ldr	r0, [r3, #0]
 800c024:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800c028:	d0bb      	beq.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800c02a:	e7f4      	b.n	800c016 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c02c:	4a4b      	ldr	r2, [pc, #300]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800c02e:	e783      	b.n	800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c030:	4b4a      	ldr	r3, [pc, #296]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800c032:	6818      	ldr	r0, [r3, #0]
 800c034:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800c038:	d0b3      	beq.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c03a:	a801      	add	r0, sp, #4
 800c03c:	f7ff fde2 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c040:	9801      	ldr	r0, [sp, #4]
 800c042:	e7ae      	b.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c044:	4b45      	ldr	r3, [pc, #276]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800c046:	6818      	ldr	r0, [r3, #0]
 800c048:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800c04c:	d0a9      	beq.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800c04e:	e797      	b.n	800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      switch (saiclocksource)
 800c050:	2b00      	cmp	r3, #0
 800c052:	d0dc      	beq.n	800c00e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800c054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c058:	d08e      	beq.n	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 800c05a:	e785      	b.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c05c:	6810      	ldr	r0, [r2, #0]
 800c05e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800c062:	d09e      	beq.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800c064:	e7e9      	b.n	800c03a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800c066:	4a3d      	ldr	r2, [pc, #244]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800c068:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c06a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 800c06e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c072:	d0f3      	beq.n	800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800c074:	d806      	bhi.n	800c084 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800c076:	2b00      	cmp	r3, #0
 800c078:	d0c9      	beq.n	800c00e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800c07a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c07e:	f43f af7b 	beq.w	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 800c082:	e771      	b.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800c084:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c088:	d08a      	beq.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c08a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c08e:	f43f af53 	beq.w	800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 800c092:	e769      	b.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      switch (srcclk)
 800c094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c098:	d0a8      	beq.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c09a:	e765      	b.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800c09c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0a0:	f43f af6a 	beq.w	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 800c0a4:	e760      	b.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c0a6:	6813      	ldr	r3, [r2, #0]
 800c0a8:	482f      	ldr	r0, [pc, #188]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800c0aa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c0ae:	40d8      	lsrs	r0, r3
 800c0b0:	e777      	b.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800c0b2:	4a2a      	ldr	r2, [pc, #168]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800c0b4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c0b6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800c0ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0be:	d06e      	beq.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800c0c0:	d83c      	bhi.n	800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x288>
 800c0c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0c6:	d05f      	beq.n	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 800c0c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0cc:	d127      	bne.n	800c11e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c0ce:	4b23      	ldr	r3, [pc, #140]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800c0d0:	6818      	ldr	r0, [r3, #0]
 800c0d2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800c0d6:	f43f af64 	beq.w	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0da:	a801      	add	r0, sp, #4
 800c0dc:	f7ff fd92 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c0e0:	9802      	ldr	r0, [sp, #8]
 800c0e2:	e75e      	b.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800c0e4:	4a1d      	ldr	r2, [pc, #116]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800c0e6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c0e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800c0ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0f0:	d040      	beq.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800c0f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0f6:	f43f af79 	beq.w	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f47f af34 	bne.w	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800c100:	e73a      	b.n	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800c102:	4b16      	ldr	r3, [pc, #88]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800c104:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 800c106:	03d2      	lsls	r2, r2, #15
 800c108:	d58b      	bpl.n	800c022 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c10a:	6818      	ldr	r0, [r3, #0]
 800c10c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800c110:	f43f af47 	beq.w	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c114:	a801      	add	r0, sp, #4
 800c116:	f7ff fcc9 	bl	800baac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c11a:	9803      	ldr	r0, [sp, #12]
 800c11c:	e741      	b.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 800c11e:	2b00      	cmp	r3, #0
 800c120:	f47f af22 	bne.w	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c124:	f7fe fda4 	bl	800ac70 <HAL_RCC_GetHCLKFreq>
 800c128:	4b0c      	ldr	r3, [pc, #48]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800c12a:	4a10      	ldr	r2, [pc, #64]	; (800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800c12c:	6a1b      	ldr	r3, [r3, #32]
 800c12e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c132:	5cd3      	ldrb	r3, [r2, r3]
 800c134:	f003 031f 	and.w	r3, r3, #31
 800c138:	40d8      	lsrs	r0, r3
          break;
 800c13a:	e732      	b.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 800c13c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c140:	d004      	beq.n	800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 800c142:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c146:	f43f aee3 	beq.w	800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 800c14a:	e70d      	b.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c14c:	4b03      	ldr	r3, [pc, #12]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800c14e:	6818      	ldr	r0, [r3, #0]
 800c150:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800c154:	f43f af25 	beq.w	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
            frequency = CSI_VALUE;
 800c158:	4805      	ldr	r0, [pc, #20]	; (800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c15a:	e722      	b.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800c15c:	58024400 	.word	0x58024400
 800c160:	017d7840 	.word	0x017d7840
 800c164:	00bb8000 	.word	0x00bb8000
 800c168:	03d09000 	.word	0x03d09000
 800c16c:	0801af3c 	.word	0x0801af3c
 800c170:	003d0900 	.word	0x003d0900
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c174:	6810      	ldr	r0, [r2, #0]
 800c176:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800c17a:	f43f af12 	beq.w	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c17e:	a801      	add	r0, sp, #4
 800c180:	f7ff fd40 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c184:	9803      	ldr	r0, [sp, #12]
 800c186:	e70c      	b.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c188:	4b08      	ldr	r3, [pc, #32]	; (800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800c18a:	6818      	ldr	r0, [r3, #0]
 800c18c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800c190:	f43f af07 	beq.w	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c194:	a801      	add	r0, sp, #4
 800c196:	f7ff fc89 	bl	800baac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c19a:	9802      	ldr	r0, [sp, #8]
 800c19c:	e701      	b.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c19e:	6810      	ldr	r0, [r2, #0]
 800c1a0:	f010 0004 	ands.w	r0, r0, #4
 800c1a4:	f43f aefd 	beq.w	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800c1a8:	e728      	b.n	800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800c1aa:	bf00      	nop
 800c1ac:	58024400 	.word	0x58024400

0800c1b0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1b0:	2800      	cmp	r0, #0
 800c1b2:	f000 80a5 	beq.w	800c300 <HAL_TIM_Base_Init+0x150>
{
 800c1b6:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1b8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c1bc:	4604      	mov	r4, r0
 800c1be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d076      	beq.n	800c2b4 <HAL_TIM_Base_Init+0x104>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1c6:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c1c8:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c1ca:	494e      	ldr	r1, [pc, #312]	; (800c304 <HAL_TIM_Base_Init+0x154>)
 800c1cc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800c1d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c1d4:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 800c1d8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c1da:	fab1 f181 	clz	r1, r1
 800c1de:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800c1e2:	d027      	beq.n	800c234 <HAL_TIM_Base_Init+0x84>
 800c1e4:	bb31      	cbnz	r1, 800c234 <HAL_TIM_Base_Init+0x84>
 800c1e6:	4848      	ldr	r0, [pc, #288]	; (800c308 <HAL_TIM_Base_Init+0x158>)
 800c1e8:	4d48      	ldr	r5, [pc, #288]	; (800c30c <HAL_TIM_Base_Init+0x15c>)
 800c1ea:	4282      	cmp	r2, r0
 800c1ec:	d067      	beq.n	800c2be <HAL_TIM_Base_Init+0x10e>
 800c1ee:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c1f2:	4282      	cmp	r2, r0
 800c1f4:	d063      	beq.n	800c2be <HAL_TIM_Base_Init+0x10e>
 800c1f6:	1b55      	subs	r5, r2, r5
 800c1f8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c1fc:	fab5 f585 	clz	r5, r5
 800c200:	4282      	cmp	r2, r0
 800c202:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800c206:	d063      	beq.n	800c2d0 <HAL_TIM_Base_Init+0x120>
 800c208:	2d00      	cmp	r5, #0
 800c20a:	d161      	bne.n	800c2d0 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c20c:	4840      	ldr	r0, [pc, #256]	; (800c310 <HAL_TIM_Base_Init+0x160>)
 800c20e:	4941      	ldr	r1, [pc, #260]	; (800c314 <HAL_TIM_Base_Init+0x164>)
 800c210:	428a      	cmp	r2, r1
 800c212:	bf18      	it	ne
 800c214:	4282      	cmpne	r2, r0
 800c216:	d065      	beq.n	800c2e4 <HAL_TIM_Base_Init+0x134>
 800c218:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c21c:	428a      	cmp	r2, r1
 800c21e:	d061      	beq.n	800c2e4 <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c220:	69a0      	ldr	r0, [r4, #24]
 800c222:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c226:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c228:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800c22a:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c22c:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c22e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c230:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c232:	e023      	b.n	800c27c <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c234:	4d35      	ldr	r5, [pc, #212]	; (800c30c <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c23a:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c23c:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800c23e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c240:	fab5 f585 	clz	r5, r5
 800c244:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c246:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c24c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c24e:	69a0      	ldr	r0, [r4, #24]
 800c250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c254:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800c256:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c258:	68e3      	ldr	r3, [r4, #12]
 800c25a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c25c:	6863      	ldr	r3, [r4, #4]
 800c25e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c260:	b951      	cbnz	r1, 800c278 <HAL_TIM_Base_Init+0xc8>
 800c262:	b94d      	cbnz	r5, 800c278 <HAL_TIM_Base_Init+0xc8>
 800c264:	492a      	ldr	r1, [pc, #168]	; (800c310 <HAL_TIM_Base_Init+0x160>)
 800c266:	4b2b      	ldr	r3, [pc, #172]	; (800c314 <HAL_TIM_Base_Init+0x164>)
 800c268:	429a      	cmp	r2, r3
 800c26a:	bf18      	it	ne
 800c26c:	428a      	cmpne	r2, r1
 800c26e:	d003      	beq.n	800c278 <HAL_TIM_Base_Init+0xc8>
 800c270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c274:	429a      	cmp	r2, r3
 800c276:	d101      	bne.n	800c27c <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c278:	6963      	ldr	r3, [r4, #20]
 800c27a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c27c:	2301      	movs	r3, #1
  return HAL_OK;
 800c27e:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800c280:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c282:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c286:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c28a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c28e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c292:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800c296:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c29a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c29e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c2a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c2a6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c2aa:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c2ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c2b2:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800c2b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c2b8:	f7f9 feb4 	bl	8006024 <HAL_TIM_Base_MspInit>
 800c2bc:	e783      	b.n	800c1c6 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2be:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c2c4:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2c6:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 800c2ca:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2cc:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c2ce:	e7ba      	b.n	800c246 <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 800c2d0:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c2d6:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2d8:	480f      	ldr	r0, [pc, #60]	; (800c318 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c2da:	4282      	cmp	r2, r0
 800c2dc:	d0b3      	beq.n	800c246 <HAL_TIM_Base_Init+0x96>
 800c2de:	2d00      	cmp	r5, #0
 800c2e0:	d1b1      	bne.n	800c246 <HAL_TIM_Base_Init+0x96>
 800c2e2:	e793      	b.n	800c20c <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2e4:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2ea:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2ec:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2ee:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2f4:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800c2f6:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800c2f8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2fa:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c2fc:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2fe:	e7b1      	b.n	800c264 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
 800c300:	2001      	movs	r0, #1
}
 800c302:	4770      	bx	lr
 800c304:	40010000 	.word	0x40010000
 800c308:	40000400 	.word	0x40000400
 800c30c:	40010400 	.word	0x40010400
 800c310:	40014000 	.word	0x40014000
 800c314:	40014400 	.word	0x40014400
 800c318:	40000c00 	.word	0x40000c00

0800c31c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800c31c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c320:	2b01      	cmp	r3, #1
 800c322:	d13d      	bne.n	800c3a0 <HAL_TIM_Base_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c324:	6802      	ldr	r2, [r0, #0]
 800c326:	4b23      	ldr	r3, [pc, #140]	; (800c3b4 <HAL_TIM_Base_Start+0x98>)
 800c328:	4923      	ldr	r1, [pc, #140]	; (800c3b8 <HAL_TIM_Base_Start+0x9c>)
 800c32a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800c32e:	bf18      	it	ne
 800c330:	429a      	cmpne	r2, r3
{
 800c332:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c334:	bf0c      	ite	eq
 800c336:	2301      	moveq	r3, #1
 800c338:	2300      	movne	r3, #0
 800c33a:	4d20      	ldr	r5, [pc, #128]	; (800c3bc <HAL_TIM_Base_Start+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800c33c:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c33e:	42aa      	cmp	r2, r5
 800c340:	bf08      	it	eq
 800c342:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c346:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c34a:	4c1d      	ldr	r4, [pc, #116]	; (800c3c0 <HAL_TIM_Base_Start+0xa4>)
 800c34c:	428a      	cmp	r2, r1
 800c34e:	bf08      	it	eq
 800c350:	f043 0301 	orreq.w	r3, r3, #1
 800c354:	481b      	ldr	r0, [pc, #108]	; (800c3c4 <HAL_TIM_Base_Start+0xa8>)
 800c356:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800c35a:	42a2      	cmp	r2, r4
 800c35c:	bf08      	it	eq
 800c35e:	f043 0301 	orreq.w	r3, r3, #1
 800c362:	4282      	cmp	r2, r0
 800c364:	bf08      	it	eq
 800c366:	f043 0301 	orreq.w	r3, r3, #1
 800c36a:	428a      	cmp	r2, r1
 800c36c:	bf08      	it	eq
 800c36e:	f043 0301 	orreq.w	r3, r3, #1
 800c372:	b933      	cbnz	r3, 800c382 <HAL_TIM_Base_Start+0x66>
 800c374:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800c378:	1a10      	subs	r0, r2, r0
 800c37a:	fab0 f080 	clz	r0, r0
 800c37e:	0940      	lsrs	r0, r0, #5
 800c380:	b198      	cbz	r0, 800c3aa <HAL_TIM_Base_Start+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c382:	6891      	ldr	r1, [r2, #8]
 800c384:	4b10      	ldr	r3, [pc, #64]	; (800c3c8 <HAL_TIM_Base_Start+0xac>)
 800c386:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c388:	2b06      	cmp	r3, #6
 800c38a:	d00b      	beq.n	800c3a4 <HAL_TIM_Base_Start+0x88>
 800c38c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c390:	d008      	beq.n	800c3a4 <HAL_TIM_Base_Start+0x88>
      __HAL_TIM_ENABLE(htim);
 800c392:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800c394:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800c396:	f043 0301 	orr.w	r3, r3, #1
 800c39a:	6013      	str	r3, [r2, #0]
}
 800c39c:	bc30      	pop	{r4, r5}
 800c39e:	4770      	bx	lr
    return HAL_ERROR;
 800c3a0:	2001      	movs	r0, #1
}
 800c3a2:	4770      	bx	lr
  return HAL_OK;
 800c3a4:	2000      	movs	r0, #0
}
 800c3a6:	bc30      	pop	{r4, r5}
 800c3a8:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800c3aa:	6813      	ldr	r3, [r2, #0]
 800c3ac:	f043 0301 	orr.w	r3, r3, #1
 800c3b0:	6013      	str	r3, [r2, #0]
 800c3b2:	e7f3      	b.n	800c39c <HAL_TIM_Base_Start+0x80>
 800c3b4:	40010000 	.word	0x40010000
 800c3b8:	40000800 	.word	0x40000800
 800c3bc:	40000400 	.word	0x40000400
 800c3c0:	40000c00 	.word	0x40000c00
 800c3c4:	40010400 	.word	0x40010400
 800c3c8:	00010007 	.word	0x00010007

0800c3cc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800c3cc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d141      	bne.n	800c458 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c3d4:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c3d6:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3d8:	4b24      	ldr	r3, [pc, #144]	; (800c46c <HAL_TIM_Base_Start_IT+0xa0>)
 800c3da:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800c3de:	bf18      	it	ne
 800c3e0:	429a      	cmpne	r2, r3
{
 800c3e2:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3e4:	bf0c      	ite	eq
 800c3e6:	2301      	moveq	r3, #1
 800c3e8:	2300      	movne	r3, #0
 800c3ea:	4d21      	ldr	r5, [pc, #132]	; (800c470 <HAL_TIM_Base_Start_IT+0xa4>)
 800c3ec:	4c21      	ldr	r4, [pc, #132]	; (800c474 <HAL_TIM_Base_Start_IT+0xa8>)
 800c3ee:	42aa      	cmp	r2, r5
 800c3f0:	bf08      	it	eq
 800c3f2:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c3f6:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c3fa:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3fc:	42a2      	cmp	r2, r4
 800c3fe:	bf08      	it	eq
 800c400:	f043 0301 	orreq.w	r3, r3, #1
 800c404:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c408:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c40c:	481a      	ldr	r0, [pc, #104]	; (800c478 <HAL_TIM_Base_Start_IT+0xac>)
 800c40e:	42a2      	cmp	r2, r4
 800c410:	bf08      	it	eq
 800c412:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c416:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c418:	4282      	cmp	r2, r0
 800c41a:	bf08      	it	eq
 800c41c:	f043 0301 	orreq.w	r3, r3, #1
 800c420:	4916      	ldr	r1, [pc, #88]	; (800c47c <HAL_TIM_Base_Start_IT+0xb0>)
 800c422:	428a      	cmp	r2, r1
 800c424:	bf08      	it	eq
 800c426:	f043 0301 	orreq.w	r3, r3, #1
 800c42a:	b933      	cbnz	r3, 800c43a <HAL_TIM_Base_Start_IT+0x6e>
 800c42c:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800c430:	1a10      	subs	r0, r2, r0
 800c432:	fab0 f080 	clz	r0, r0
 800c436:	0940      	lsrs	r0, r0, #5
 800c438:	b198      	cbz	r0, 800c462 <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c43a:	6891      	ldr	r1, [r2, #8]
 800c43c:	4b10      	ldr	r3, [pc, #64]	; (800c480 <HAL_TIM_Base_Start_IT+0xb4>)
 800c43e:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c440:	2b06      	cmp	r3, #6
 800c442:	d00b      	beq.n	800c45c <HAL_TIM_Base_Start_IT+0x90>
 800c444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c448:	d008      	beq.n	800c45c <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 800c44a:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800c44c:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800c44e:	f043 0301 	orr.w	r3, r3, #1
 800c452:	6013      	str	r3, [r2, #0]
}
 800c454:	bc30      	pop	{r4, r5}
 800c456:	4770      	bx	lr
    return HAL_ERROR;
 800c458:	2001      	movs	r0, #1
}
 800c45a:	4770      	bx	lr
  return HAL_OK;
 800c45c:	2000      	movs	r0, #0
}
 800c45e:	bc30      	pop	{r4, r5}
 800c460:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800c462:	6813      	ldr	r3, [r2, #0]
 800c464:	f043 0301 	orr.w	r3, r3, #1
 800c468:	6013      	str	r3, [r2, #0]
 800c46a:	e7f3      	b.n	800c454 <HAL_TIM_Base_Start_IT+0x88>
 800c46c:	40010000 	.word	0x40010000
 800c470:	40000400 	.word	0x40000400
 800c474:	40000800 	.word	0x40000800
 800c478:	40010400 	.word	0x40010400
 800c47c:	40001800 	.word	0x40001800
 800c480:	00010007 	.word	0x00010007

0800c484 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800c484:	2800      	cmp	r0, #0
 800c486:	f000 80cc 	beq.w	800c622 <HAL_TIM_Encoder_Init+0x19e>
{
 800c48a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800c48c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c490:	4604      	mov	r4, r0
 800c492:	460d      	mov	r5, r1
 800c494:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c498:	2b00      	cmp	r3, #0
 800c49a:	f000 809b 	beq.w	800c5d4 <HAL_TIM_Encoder_Init+0x150>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c49e:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c4a0:	2102      	movs	r1, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c4a2:	4a61      	ldr	r2, [pc, #388]	; (800c628 <HAL_TIM_Encoder_Init+0x1a4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800c4a4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c4ac:	6899      	ldr	r1, [r3, #8]
 800c4ae:	ea02 0201 	and.w	r2, r2, r1
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4b2:	495e      	ldr	r1, [pc, #376]	; (800c62c <HAL_TIM_Encoder_Init+0x1a8>)
 800c4b4:	eba3 0101 	sub.w	r1, r3, r1
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c4b8:	609a      	str	r2, [r3, #8]
  tmpcr1 = TIMx->CR1;
 800c4ba:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4bc:	fab1 f181 	clz	r1, r1
 800c4c0:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800c4c4:	d02b      	beq.n	800c51e <HAL_TIM_Encoder_Init+0x9a>
 800c4c6:	bb51      	cbnz	r1, 800c51e <HAL_TIM_Encoder_Init+0x9a>
 800c4c8:	4859      	ldr	r0, [pc, #356]	; (800c630 <HAL_TIM_Encoder_Init+0x1ac>)
 800c4ca:	4283      	cmp	r3, r0
 800c4cc:	f000 8087 	beq.w	800c5de <HAL_TIM_Encoder_Init+0x15a>
 800c4d0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c4d4:	4283      	cmp	r3, r0
 800c4d6:	f000 8082 	beq.w	800c5de <HAL_TIM_Encoder_Init+0x15a>
 800c4da:	4e56      	ldr	r6, [pc, #344]	; (800c634 <HAL_TIM_Encoder_Init+0x1b0>)
 800c4dc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c4e0:	1b9e      	subs	r6, r3, r6
 800c4e2:	4283      	cmp	r3, r0
 800c4e4:	fab6 f686 	clz	r6, r6
 800c4e8:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800c4ec:	f000 8081 	beq.w	800c5f2 <HAL_TIM_Encoder_Init+0x16e>
 800c4f0:	2e00      	cmp	r6, #0
 800c4f2:	d17e      	bne.n	800c5f2 <HAL_TIM_Encoder_Init+0x16e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c4f4:	4850      	ldr	r0, [pc, #320]	; (800c638 <HAL_TIM_Encoder_Init+0x1b4>)
 800c4f6:	4951      	ldr	r1, [pc, #324]	; (800c63c <HAL_TIM_Encoder_Init+0x1b8>)
 800c4f8:	428b      	cmp	r3, r1
 800c4fa:	bf18      	it	ne
 800c4fc:	4283      	cmpne	r3, r0
 800c4fe:	f000 8082 	beq.w	800c606 <HAL_TIM_Encoder_Init+0x182>
 800c502:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c506:	428b      	cmp	r3, r1
 800c508:	d07d      	beq.n	800c606 <HAL_TIM_Encoder_Init+0x182>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c50a:	69a1      	ldr	r1, [r4, #24]
 800c50c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c510:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c512:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800c514:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800c516:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c518:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c51a:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c51c:	e023      	b.n	800c566 <HAL_TIM_Encoder_Init+0xe2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c51e:	4e45      	ldr	r6, [pc, #276]	; (800c634 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c520:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c524:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c526:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800c528:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c52a:	fab6 f686 	clz	r6, r6
 800c52e:	0976      	lsrs	r6, r6, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c530:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c532:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c536:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c538:	69a0      	ldr	r0, [r4, #24]
 800c53a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c53e:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800c540:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c542:	68e2      	ldr	r2, [r4, #12]
 800c544:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c546:	6862      	ldr	r2, [r4, #4]
 800c548:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c54a:	b951      	cbnz	r1, 800c562 <HAL_TIM_Encoder_Init+0xde>
 800c54c:	b94e      	cbnz	r6, 800c562 <HAL_TIM_Encoder_Init+0xde>
 800c54e:	493a      	ldr	r1, [pc, #232]	; (800c638 <HAL_TIM_Encoder_Init+0x1b4>)
 800c550:	4a3a      	ldr	r2, [pc, #232]	; (800c63c <HAL_TIM_Encoder_Init+0x1b8>)
 800c552:	4293      	cmp	r3, r2
 800c554:	bf18      	it	ne
 800c556:	428b      	cmpne	r3, r1
 800c558:	d003      	beq.n	800c562 <HAL_TIM_Encoder_Init+0xde>
 800c55a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c55e:	4293      	cmp	r3, r2
 800c560:	d101      	bne.n	800c566 <HAL_TIM_Encoder_Init+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 800c562:	6962      	ldr	r2, [r4, #20]
 800c564:	631a      	str	r2, [r3, #48]	; 0x30
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c566:	692a      	ldr	r2, [r5, #16]
  TIMx->EGR = TIM_EGR_UG;
 800c568:	2601      	movs	r6, #1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c56a:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c56c:	ea4f 1e02 	mov.w	lr, r2, lsl #4
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c570:	69aa      	ldr	r2, [r5, #24]
  TIMx->EGR = TIM_EGR_UG;
 800c572:	615e      	str	r6, [r3, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c574:	ea41 2c02 	orr.w	ip, r1, r2, lsl #8
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c578:	69e9      	ldr	r1, [r5, #28]
  tmpsmcr = htim->Instance->SMCR;
 800c57a:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c57c:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
  tmpccmr1 = htim->Instance->CCMR1;
 800c580:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c582:	492f      	ldr	r1, [pc, #188]	; (800c640 <HAL_TIM_Encoder_Init+0x1bc>)
 800c584:	4039      	ands	r1, r7
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c586:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c588:	ea4c 0c01 	orr.w	ip, ip, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c58c:	68e9      	ldr	r1, [r5, #12]
 800c58e:	430a      	orrs	r2, r1
  tmpccer = htim->Instance->CCER;
 800c590:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c592:	f021 0eaa 	bic.w	lr, r1, #170	; 0xaa
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c596:	6a29      	ldr	r1, [r5, #32]
 800c598:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c59c:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 800c59e:	682d      	ldr	r5, [r5, #0]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c5a0:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 800c5a4:	4328      	orrs	r0, r5
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c5a6:	ea41 010e 	orr.w	r1, r1, lr
  htim->Instance->SMCR = tmpsmcr;
 800c5aa:	6098      	str	r0, [r3, #8]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c5ac:	4825      	ldr	r0, [pc, #148]	; (800c644 <HAL_TIM_Encoder_Init+0x1c0>)
 800c5ae:	ea0c 0000 	and.w	r0, ip, r0
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c5b2:	4302      	orrs	r2, r0
  return HAL_OK;
 800c5b4:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 800c5b6:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800c5b8:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5ba:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c5be:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c5c2:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c5c6:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c5ca:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800c5ce:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 800c5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800c5d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800c5d8:	f7f9 fd82 	bl	80060e0 <HAL_TIM_Encoder_MspInit>
 800c5dc:	e75f      	b.n	800c49e <HAL_TIM_Encoder_Init+0x1a>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5de:	4e15      	ldr	r6, [pc, #84]	; (800c634 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c5e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c5e4:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5e6:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800c5e8:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5ea:	fab6 f686 	clz	r6, r6
 800c5ee:	0976      	lsrs	r6, r6, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c5f0:	e79e      	b.n	800c530 <HAL_TIM_Encoder_Init+0xac>
    tmpcr1 |= Structure->CounterMode;
 800c5f2:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c5f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c5f8:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5fa:	4813      	ldr	r0, [pc, #76]	; (800c648 <HAL_TIM_Encoder_Init+0x1c4>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c5fc:	4283      	cmp	r3, r0
 800c5fe:	d097      	beq.n	800c530 <HAL_TIM_Encoder_Init+0xac>
 800c600:	2e00      	cmp	r6, #0
 800c602:	d195      	bne.n	800c530 <HAL_TIM_Encoder_Init+0xac>
 800c604:	e776      	b.n	800c4f4 <HAL_TIM_Encoder_Init+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c606:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c608:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c60c:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c60e:	69a1      	ldr	r1, [r4, #24]
 800c610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c614:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c616:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800c618:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800c61a:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c61c:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c61e:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c620:	e795      	b.n	800c54e <HAL_TIM_Encoder_Init+0xca>
    return HAL_ERROR;
 800c622:	2001      	movs	r0, #1
}
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	fffebff8 	.word	0xfffebff8
 800c62c:	40010000 	.word	0x40010000
 800c630:	40000400 	.word	0x40000400
 800c634:	40010400 	.word	0x40010400
 800c638:	40014000 	.word	0x40014000
 800c63c:	40014400 	.word	0x40014400
 800c640:	fffffcfc 	.word	0xfffffcfc
 800c644:	ffff0303 	.word	0xffff0303
 800c648:	40000c00 	.word	0x40000c00

0800c64c <HAL_TIM_Encoder_Start>:
{
 800c64c:	b500      	push	{lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c64e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c652:	f890 c03f 	ldrb.w	ip, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c656:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c65a:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c65c:	f890 e045 	ldrb.w	lr, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c660:	b2d2      	uxtb	r2, r2
  if (Channel == TIM_CHANNEL_1)
 800c662:	b9c1      	cbnz	r1, 800c696 <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c664:	2b01      	cmp	r3, #1
 800c666:	d123      	bne.n	800c6b0 <HAL_TIM_Encoder_Start+0x64>
 800c668:	2a01      	cmp	r2, #1
 800c66a:	d121      	bne.n	800c6b0 <HAL_TIM_Encoder_Start+0x64>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c66c:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c66e:	2302      	movs	r3, #2
 800c670:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c674:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c678:	6a13      	ldr	r3, [r2, #32]
 800c67a:	f023 0301 	bic.w	r3, r3, #1
 800c67e:	6213      	str	r3, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c680:	6a13      	ldr	r3, [r2, #32]
 800c682:	f043 0301 	orr.w	r3, r3, #1
 800c686:	6213      	str	r3, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 800c688:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800c68a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800c68c:	f043 0301 	orr.w	r3, r3, #1
 800c690:	6013      	str	r3, [r2, #0]
}
 800c692:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (Channel == TIM_CHANNEL_2)
 800c696:	2904      	cmp	r1, #4
 800c698:	fa5f fc8c 	uxtb.w	ip, ip
 800c69c:	fa5f fe8e 	uxtb.w	lr, lr
 800c6a0:	d027      	beq.n	800c6f2 <HAL_TIM_Encoder_Start+0xa6>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d104      	bne.n	800c6b0 <HAL_TIM_Encoder_Start+0x64>
 800c6a6:	f1bc 0f01 	cmp.w	ip, #1
 800c6aa:	d101      	bne.n	800c6b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c6ac:	2a01      	cmp	r2, #1
 800c6ae:	d002      	beq.n	800c6b6 <HAL_TIM_Encoder_Start+0x6a>
      return HAL_ERROR;
 800c6b0:	2001      	movs	r0, #1
}
 800c6b2:	f85d fb04 	ldr.w	pc, [sp], #4
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c6b6:	f1be 0f01 	cmp.w	lr, #1
 800c6ba:	d1f9      	bne.n	800c6b0 <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6bc:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c6be:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6c0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6c4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6c8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6cc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800c6d0:	6a13      	ldr	r3, [r2, #32]
 800c6d2:	f023 0301 	bic.w	r3, r3, #1
 800c6d6:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c6d8:	6a13      	ldr	r3, [r2, #32]
 800c6da:	f043 0301 	orr.w	r3, r3, #1
 800c6de:	6213      	str	r3, [r2, #32]
  TIMx->CCER &= ~tmp;
 800c6e0:	6a13      	ldr	r3, [r2, #32]
 800c6e2:	f023 0310 	bic.w	r3, r3, #16
 800c6e6:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c6e8:	6a13      	ldr	r3, [r2, #32]
 800c6ea:	f043 0310 	orr.w	r3, r3, #16
 800c6ee:	6213      	str	r3, [r2, #32]
}
 800c6f0:	e7ca      	b.n	800c688 <HAL_TIM_Encoder_Start+0x3c>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c6f2:	f1bc 0f01 	cmp.w	ip, #1
 800c6f6:	d1db      	bne.n	800c6b0 <HAL_TIM_Encoder_Start+0x64>
 800c6f8:	f1be 0f01 	cmp.w	lr, #1
 800c6fc:	d1d8      	bne.n	800c6b0 <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6fe:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c700:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c702:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c706:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800c70a:	e7e9      	b.n	800c6e0 <HAL_TIM_Encoder_Start+0x94>

0800c70c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800c70c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c710:	2b01      	cmp	r3, #1
 800c712:	f000 8081 	beq.w	800c818 <HAL_TIM_ConfigClockSource+0x10c>
 800c716:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800c718:	2302      	movs	r3, #2
{
 800c71a:	b470      	push	{r4, r5, r6}
  tmpsmcr = htim->Instance->SMCR;
 800c71c:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 800c71e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c720:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800c724:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c728:	4b5a      	ldr	r3, [pc, #360]	; (800c894 <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 800c72a:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c72c:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800c72e:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800c730:	680b      	ldr	r3, [r1, #0]
 800c732:	2b70      	cmp	r3, #112	; 0x70
 800c734:	f000 809c 	beq.w	800c870 <HAL_TIM_ConfigClockSource+0x164>
 800c738:	d825      	bhi.n	800c786 <HAL_TIM_ConfigClockSource+0x7a>
 800c73a:	2b50      	cmp	r3, #80	; 0x50
 800c73c:	d06e      	beq.n	800c81c <HAL_TIM_ConfigClockSource+0x110>
 800c73e:	d939      	bls.n	800c7b4 <HAL_TIM_ConfigClockSource+0xa8>
 800c740:	2b60      	cmp	r3, #96	; 0x60
 800c742:	d118      	bne.n	800c776 <HAL_TIM_ConfigClockSource+0x6a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c744:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c746:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c748:	f020 0010 	bic.w	r0, r0, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c74c:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c74e:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800c750:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800c752:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c754:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c758:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer = TIMx->CCER;
 800c75c:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c75e:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 800c762:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c764:	4b4c      	ldr	r3, [pc, #304]	; (800c898 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800c766:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCER = tmpccer;
 800c76a:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800c76c:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c76e:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c770:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800c774:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800c776:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800c778:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800c77a:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c77e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800c782:	bc70      	pop	{r4, r5, r6}
 800c784:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800c786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c78a:	d060      	beq.n	800c84e <HAL_TIM_ConfigClockSource+0x142>
 800c78c:	d933      	bls.n	800c7f6 <HAL_TIM_ConfigClockSource+0xea>
 800c78e:	4943      	ldr	r1, [pc, #268]	; (800c89c <HAL_TIM_ConfigClockSource+0x190>)
 800c790:	428b      	cmp	r3, r1
 800c792:	d006      	beq.n	800c7a2 <HAL_TIM_ConfigClockSource+0x96>
 800c794:	d929      	bls.n	800c7ea <HAL_TIM_ConfigClockSource+0xde>
 800c796:	4942      	ldr	r1, [pc, #264]	; (800c8a0 <HAL_TIM_ConfigClockSource+0x194>)
 800c798:	428b      	cmp	r3, r1
 800c79a:	d002      	beq.n	800c7a2 <HAL_TIM_ConfigClockSource+0x96>
 800c79c:	3110      	adds	r1, #16
 800c79e:	428b      	cmp	r3, r1
 800c7a0:	d1e9      	bne.n	800c776 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 800c7a2:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c7a4:	493c      	ldr	r1, [pc, #240]	; (800c898 <HAL_TIM_ConfigClockSource+0x18c>)
 800c7a6:	4001      	ands	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800c7a8:	2000      	movs	r0, #0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c7aa:	430b      	orrs	r3, r1
 800c7ac:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800c7b0:	60a3      	str	r3, [r4, #8]
}
 800c7b2:	e7e0      	b.n	800c776 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800c7b4:	2b40      	cmp	r3, #64	; 0x40
 800c7b6:	d123      	bne.n	800c800 <HAL_TIM_ConfigClockSource+0xf4>
  tmpccer = TIMx->CCER;
 800c7b8:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7ba:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c7bc:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c7be:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7c2:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c7c6:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800c7c8:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800c7ca:	4b33      	ldr	r3, [pc, #204]	; (800c898 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7cc:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7ce:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c7d0:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c7d4:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800c7d8:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800c7da:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800c7dc:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800c7de:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c7e0:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c7e2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800c7e6:	60a3      	str	r3, [r4, #8]
}
 800c7e8:	e7c5      	b.n	800c776 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800c7ea:	f023 0110 	bic.w	r1, r3, #16
 800c7ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c7f2:	d1c0      	bne.n	800c776 <HAL_TIM_ConfigClockSource+0x6a>
 800c7f4:	e7d5      	b.n	800c7a2 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 800c7f6:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 800c7fa:	bf18      	it	ne
 800c7fc:	2001      	movne	r0, #1
 800c7fe:	e7ba      	b.n	800c776 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800c800:	d8b9      	bhi.n	800c776 <HAL_TIM_ConfigClockSource+0x6a>
 800c802:	2b20      	cmp	r3, #32
 800c804:	d0cd      	beq.n	800c7a2 <HAL_TIM_ConfigClockSource+0x96>
 800c806:	d903      	bls.n	800c810 <HAL_TIM_ConfigClockSource+0x104>
 800c808:	2b30      	cmp	r3, #48	; 0x30
 800c80a:	d0ca      	beq.n	800c7a2 <HAL_TIM_ConfigClockSource+0x96>
 800c80c:	2001      	movs	r0, #1
 800c80e:	e7b2      	b.n	800c776 <HAL_TIM_ConfigClockSource+0x6a>
 800c810:	f033 0110 	bics.w	r1, r3, #16
 800c814:	d1af      	bne.n	800c776 <HAL_TIM_ConfigClockSource+0x6a>
 800c816:	e7c4      	b.n	800c7a2 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 800c818:	2002      	movs	r0, #2
}
 800c81a:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800c81c:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c81e:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c820:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c822:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c826:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c82a:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800c82c:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800c82e:	4b1a      	ldr	r3, [pc, #104]	; (800c898 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c830:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c832:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c834:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c838:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800c83c:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800c83e:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800c840:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800c842:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c844:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c846:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800c84a:	60a3      	str	r3, [r4, #8]
}
 800c84c:	e793      	b.n	800c776 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c84e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800c852:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c854:	432b      	orrs	r3, r5
 800c856:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c858:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800c85c:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c85e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800c862:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800c864:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c866:	68a3      	ldr	r3, [r4, #8]
 800c868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c86c:	60a3      	str	r3, [r4, #8]
      break;
 800c86e:	e782      	b.n	800c776 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c870:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800c874:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c876:	432b      	orrs	r3, r5
 800c878:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c87a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800c87e:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c880:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800c884:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800c886:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800c888:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c88a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800c88e:	60a3      	str	r3, [r4, #8]
      break;
 800c890:	e771      	b.n	800c776 <HAL_TIM_ConfigClockSource+0x6a>
 800c892:	bf00      	nop
 800c894:	ffce0088 	.word	0xffce0088
 800c898:	ffcfff8f 	.word	0xffcfff8f
 800c89c:	00100020 	.word	0x00100020
 800c8a0:	00100030 	.word	0x00100030

0800c8a4 <HAL_TIM_OC_DelayElapsedCallback>:
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop

0800c8a8 <HAL_TIM_IC_CaptureCallback>:
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop

0800c8ac <HAL_TIM_PWM_PulseFinishedCallback>:
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop

0800c8b0 <HAL_TIM_TriggerCallback>:
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop

0800c8b4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c8b4:	6803      	ldr	r3, [r0, #0]
 800c8b6:	691a      	ldr	r2, [r3, #16]
 800c8b8:	0791      	lsls	r1, r2, #30
{
 800c8ba:	b510      	push	{r4, lr}
 800c8bc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c8be:	d502      	bpl.n	800c8c6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c8c0:	68da      	ldr	r2, [r3, #12]
 800c8c2:	0792      	lsls	r2, r2, #30
 800c8c4:	d468      	bmi.n	800c998 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c8c6:	691a      	ldr	r2, [r3, #16]
 800c8c8:	0752      	lsls	r2, r2, #29
 800c8ca:	d502      	bpl.n	800c8d2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c8cc:	68da      	ldr	r2, [r3, #12]
 800c8ce:	0750      	lsls	r0, r2, #29
 800c8d0:	d44f      	bmi.n	800c972 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c8d2:	691a      	ldr	r2, [r3, #16]
 800c8d4:	0711      	lsls	r1, r2, #28
 800c8d6:	d502      	bpl.n	800c8de <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c8d8:	68da      	ldr	r2, [r3, #12]
 800c8da:	0712      	lsls	r2, r2, #28
 800c8dc:	d437      	bmi.n	800c94e <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c8de:	691a      	ldr	r2, [r3, #16]
 800c8e0:	06d0      	lsls	r0, r2, #27
 800c8e2:	d502      	bpl.n	800c8ea <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c8e4:	68da      	ldr	r2, [r3, #12]
 800c8e6:	06d1      	lsls	r1, r2, #27
 800c8e8:	d41e      	bmi.n	800c928 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c8ea:	691a      	ldr	r2, [r3, #16]
 800c8ec:	07d2      	lsls	r2, r2, #31
 800c8ee:	d502      	bpl.n	800c8f6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c8f0:	68da      	ldr	r2, [r3, #12]
 800c8f2:	07d0      	lsls	r0, r2, #31
 800c8f4:	d469      	bmi.n	800c9ca <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c8f6:	691a      	ldr	r2, [r3, #16]
 800c8f8:	0611      	lsls	r1, r2, #24
 800c8fa:	d502      	bpl.n	800c902 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c8fc:	68da      	ldr	r2, [r3, #12]
 800c8fe:	0612      	lsls	r2, r2, #24
 800c900:	d46b      	bmi.n	800c9da <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c902:	691a      	ldr	r2, [r3, #16]
 800c904:	05d0      	lsls	r0, r2, #23
 800c906:	d502      	bpl.n	800c90e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c908:	68da      	ldr	r2, [r3, #12]
 800c90a:	0611      	lsls	r1, r2, #24
 800c90c:	d46d      	bmi.n	800c9ea <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c90e:	691a      	ldr	r2, [r3, #16]
 800c910:	0652      	lsls	r2, r2, #25
 800c912:	d502      	bpl.n	800c91a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c914:	68da      	ldr	r2, [r3, #12]
 800c916:	0650      	lsls	r0, r2, #25
 800c918:	d46f      	bmi.n	800c9fa <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c91a:	691a      	ldr	r2, [r3, #16]
 800c91c:	0691      	lsls	r1, r2, #26
 800c91e:	d502      	bpl.n	800c926 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c920:	68da      	ldr	r2, [r3, #12]
 800c922:	0692      	lsls	r2, r2, #26
 800c924:	d449      	bmi.n	800c9ba <HAL_TIM_IRQHandler+0x106>
}
 800c926:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c928:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c92c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800c92e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c930:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c932:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c934:	69db      	ldr	r3, [r3, #28]
 800c936:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c93a:	d16f      	bne.n	800ca1c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c93c:	f7ff ffb2 	bl	800c8a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c940:	4620      	mov	r0, r4
 800c942:	f7ff ffb3 	bl	800c8ac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c946:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c948:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c94a:	7722      	strb	r2, [r4, #28]
 800c94c:	e7cd      	b.n	800c8ea <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c94e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c952:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800c954:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c956:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c958:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c95a:	69db      	ldr	r3, [r3, #28]
 800c95c:	079b      	lsls	r3, r3, #30
 800c95e:	d15a      	bne.n	800ca16 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c960:	f7ff ffa0 	bl	800c8a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c964:	4620      	mov	r0, r4
 800c966:	f7ff ffa1 	bl	800c8ac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c96a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c96c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c96e:	7722      	strb	r2, [r4, #28]
 800c970:	e7b5      	b.n	800c8de <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c972:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c976:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800c978:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c97a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c97c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c97e:	699b      	ldr	r3, [r3, #24]
 800c980:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c984:	d144      	bne.n	800ca10 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c986:	f7ff ff8d 	bl	800c8a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c98a:	4620      	mov	r0, r4
 800c98c:	f7ff ff8e 	bl	800c8ac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c990:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c992:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c994:	7722      	strb	r2, [r4, #28]
 800c996:	e79c      	b.n	800c8d2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c998:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c99c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c99e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c9a0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c9a2:	699b      	ldr	r3, [r3, #24]
 800c9a4:	0799      	lsls	r1, r3, #30
 800c9a6:	d130      	bne.n	800ca0a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9a8:	f7ff ff7c 	bl	800c8a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f7ff ff7d 	bl	800c8ac <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9b2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c9b4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9b6:	7722      	strb	r2, [r4, #28]
 800c9b8:	e785      	b.n	800c8c6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c9ba:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800c9be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c9c0:	611a      	str	r2, [r3, #16]
}
 800c9c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800c9c6:	f000 b887 	b.w	800cad8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c9ca:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800c9ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c9d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c9d2:	f7f3 fe6d 	bl	80006b0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c9d6:	6823      	ldr	r3, [r4, #0]
 800c9d8:	e78d      	b.n	800c8f6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c9da:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800c9de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c9e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c9e2:	f000 f87b 	bl	800cadc <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c9e6:	6823      	ldr	r3, [r4, #0]
 800c9e8:	e78b      	b.n	800c902 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800c9ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800c9f2:	f000 f875 	bl	800cae0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c9f6:	6823      	ldr	r3, [r4, #0]
 800c9f8:	e789      	b.n	800c90e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c9fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800c9fe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ca00:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ca02:	f7ff ff55 	bl	800c8b0 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	e787      	b.n	800c91a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800ca0a:	f7ff ff4d 	bl	800c8a8 <HAL_TIM_IC_CaptureCallback>
 800ca0e:	e7d0      	b.n	800c9b2 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800ca10:	f7ff ff4a 	bl	800c8a8 <HAL_TIM_IC_CaptureCallback>
 800ca14:	e7bc      	b.n	800c990 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800ca16:	f7ff ff47 	bl	800c8a8 <HAL_TIM_IC_CaptureCallback>
 800ca1a:	e7a6      	b.n	800c96a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800ca1c:	f7ff ff44 	bl	800c8a8 <HAL_TIM_IC_CaptureCallback>
 800ca20:	e791      	b.n	800c946 <HAL_TIM_IRQHandler+0x92>
 800ca22:	bf00      	nop

0800ca24 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca24:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d04b      	beq.n	800cac4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca2c:	6803      	ldr	r3, [r0, #0]
 800ca2e:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800ca30:	2002      	movs	r0, #2
{
 800ca32:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca34:	4d24      	ldr	r5, [pc, #144]	; (800cac8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ca36:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca3a:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800ca3c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800ca3e:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca40:	d029      	beq.n	800ca96 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800ca42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ca46:	42ab      	cmp	r3, r5
 800ca48:	d025      	beq.n	800ca96 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca4a:	4d20      	ldr	r5, [pc, #128]	; (800cacc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca4c:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca50:	42ab      	cmp	r3, r5
 800ca52:	bf18      	it	ne
 800ca54:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ca58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ca5c:	bf0c      	ite	eq
 800ca5e:	f04f 0c01 	moveq.w	ip, #1
 800ca62:	f04f 0c00 	movne.w	ip, #0
 800ca66:	42ab      	cmp	r3, r5
 800ca68:	bf08      	it	eq
 800ca6a:	f04c 0c01 	orreq.w	ip, ip, #1
 800ca6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ca72:	42ab      	cmp	r3, r5
 800ca74:	bf08      	it	eq
 800ca76:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca7a:	680d      	ldr	r5, [r1, #0]
 800ca7c:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca7e:	4d14      	ldr	r5, [pc, #80]	; (800cad0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 800ca80:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca82:	42ab      	cmp	r3, r5
 800ca84:	bf14      	ite	ne
 800ca86:	4660      	movne	r0, ip
 800ca88:	f04c 0001 	orreq.w	r0, ip, #1
 800ca8c:	b960      	cbnz	r0, 800caa8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800ca8e:	4811      	ldr	r0, [pc, #68]	; (800cad4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800ca90:	4283      	cmp	r3, r0
 800ca92:	d009      	beq.n	800caa8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800ca94:	e00d      	b.n	800cab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ca96:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ca98:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ca9c:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca9e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800caa0:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800caa4:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800caa6:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800caa8:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800caaa:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800caae:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cab0:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800cab2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800cab4:	2101      	movs	r1, #1

  return HAL_OK;
 800cab6:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800cab8:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800cabc:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800cac0:	bc30      	pop	{r4, r5}
 800cac2:	4770      	bx	lr
  __HAL_LOCK(htim);
 800cac4:	2002      	movs	r0, #2
}
 800cac6:	4770      	bx	lr
 800cac8:	40010000 	.word	0x40010000
 800cacc:	40000400 	.word	0x40000400
 800cad0:	40001800 	.word	0x40001800
 800cad4:	40014000 	.word	0x40014000

0800cad8 <HAL_TIMEx_CommutCallback>:
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop

0800cadc <HAL_TIMEx_BreakCallback>:
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop

0800cae0 <HAL_TIMEx_Break2Callback>:
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop

0800cae4 <HAL_UART_TxCpltCallback>:
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop

0800cae8 <HAL_UART_ErrorCallback>:
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop

0800caec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800caec:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800caee:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800caf0:	2300      	movs	r3, #0
 800caf2:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800caf6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cafa:	f7ff fff5 	bl	800cae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cafe:	bd08      	pop	{r3, pc}

0800cb00 <HAL_UARTEx_RxEventCallback>:
}
 800cb00:	4770      	bx	lr
 800cb02:	bf00      	nop

0800cb04 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cb04:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cb06:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cb0a:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 800cb0c:	ea12 0f0c 	tst.w	r2, ip
{
 800cb10:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cb12:	681d      	ldr	r5, [r3, #0]
{
 800cb14:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cb16:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 800cb18:	f000 811c 	beq.w	800cd54 <HAL_UART_IRQHandler+0x250>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cb1c:	4eae      	ldr	r6, [pc, #696]	; (800cdd8 <HAL_UART_IRQHandler+0x2d4>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cb1e:	48af      	ldr	r0, [pc, #700]	; (800cddc <HAL_UART_IRQHandler+0x2d8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cb20:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cb24:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cb26:	ea5c 0600 	orrs.w	r6, ip, r0
 800cb2a:	f040 8086 	bne.w	800cc3a <HAL_UART_IRQHandler+0x136>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb2e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800cb30:	2801      	cmp	r0, #1
 800cb32:	d022      	beq.n	800cb7a <HAL_UART_IRQHandler+0x76>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cb34:	02d0      	lsls	r0, r2, #11
 800cb36:	d502      	bpl.n	800cb3e <HAL_UART_IRQHandler+0x3a>
 800cb38:	024e      	lsls	r6, r1, #9
 800cb3a:	f100 8134 	bmi.w	800cda6 <HAL_UART_IRQHandler+0x2a2>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cb3e:	0610      	lsls	r0, r2, #24
 800cb40:	d506      	bpl.n	800cb50 <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cb42:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cb46:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cb4a:	4301      	orrs	r1, r0
 800cb4c:	f040 8123 	bne.w	800cd96 <HAL_UART_IRQHandler+0x292>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cb50:	0651      	lsls	r1, r2, #25
 800cb52:	d564      	bpl.n	800cc1e <HAL_UART_IRQHandler+0x11a>
 800cb54:	066e      	lsls	r6, r5, #25
 800cb56:	d562      	bpl.n	800cc1e <HAL_UART_IRQHandler+0x11a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb58:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb60:	e843 2100 	strex	r1, r2, [r3]
 800cb64:	2900      	cmp	r1, #0
 800cb66:	d1f7      	bne.n	800cb58 <HAL_UART_IRQHandler+0x54>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb68:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cb6a:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cb6c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800cb6e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 800cb72:	6763      	str	r3, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 800cb74:	f7ff ffb6 	bl	800cae4 <HAL_UART_TxCpltCallback>
}
 800cb78:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cb7a:	06d0      	lsls	r0, r2, #27
 800cb7c:	d5da      	bpl.n	800cb34 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cb7e:	06ee      	lsls	r6, r5, #27
 800cb80:	d5d8      	bpl.n	800cb34 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cb82:	2210      	movs	r2, #16
 800cb84:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb86:	689a      	ldr	r2, [r3, #8]
 800cb88:	0655      	lsls	r5, r2, #25
 800cb8a:	f140 8136 	bpl.w	800cdfa <HAL_UART_IRQHandler+0x2f6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cb8e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800cb90:	6801      	ldr	r1, [r0, #0]
 800cb92:	684a      	ldr	r2, [r1, #4]
 800cb94:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800cb96:	2a00      	cmp	r2, #0
 800cb98:	d0ee      	beq.n	800cb78 <HAL_UART_IRQHandler+0x74>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cb9a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800cb9e:	4291      	cmp	r1, r2
 800cba0:	d9ea      	bls.n	800cb78 <HAL_UART_IRQHandler+0x74>
        huart->RxXferCount = nb_remaining_rx_data;
 800cba2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cba6:	69c2      	ldr	r2, [r0, #28]
 800cba8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800cbac:	d02f      	beq.n	800cc0e <HAL_UART_IRQHandler+0x10a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbae:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb6:	e843 2100 	strex	r1, r2, [r3]
 800cbba:	2900      	cmp	r1, #0
 800cbbc:	d1f7      	bne.n	800cbae <HAL_UART_IRQHandler+0xaa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbbe:	f103 0208 	add.w	r2, r3, #8
 800cbc2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbc6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbca:	f103 0508 	add.w	r5, r3, #8
 800cbce:	e845 2100 	strex	r1, r2, [r5]
 800cbd2:	2900      	cmp	r1, #0
 800cbd4:	d1f3      	bne.n	800cbbe <HAL_UART_IRQHandler+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd6:	f103 0208 	add.w	r2, r3, #8
 800cbda:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe2:	f103 0508 	add.w	r5, r3, #8
 800cbe6:	e845 2100 	strex	r1, r2, [r5]
 800cbea:	2900      	cmp	r1, #0
 800cbec:	d1f3      	bne.n	800cbd6 <HAL_UART_IRQHandler+0xd2>
          huart->RxState = HAL_UART_STATE_READY;
 800cbee:	2220      	movs	r2, #32
 800cbf0:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbf4:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf6:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbfa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfe:	e843 2100 	strex	r1, r2, [r3]
 800cc02:	2900      	cmp	r1, #0
 800cc04:	d1f7      	bne.n	800cbf6 <HAL_UART_IRQHandler+0xf2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cc06:	f7fb fdb1 	bl	800876c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cc0a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800cc0e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800cc12:	4620      	mov	r0, r4
 800cc14:	1ac9      	subs	r1, r1, r3
 800cc16:	b289      	uxth	r1, r1
 800cc18:	f7ff ff72 	bl	800cb00 <HAL_UARTEx_RxEventCallback>
}
 800cc1c:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cc1e:	0210      	lsls	r0, r2, #8
 800cc20:	d502      	bpl.n	800cc28 <HAL_UART_IRQHandler+0x124>
 800cc22:	0069      	lsls	r1, r5, #1
 800cc24:	f100 80e4 	bmi.w	800cdf0 <HAL_UART_IRQHandler+0x2ec>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cc28:	01d3      	lsls	r3, r2, #7
 800cc2a:	d5a5      	bpl.n	800cb78 <HAL_UART_IRQHandler+0x74>
 800cc2c:	2d00      	cmp	r5, #0
 800cc2e:	daa3      	bge.n	800cb78 <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cc30:	4620      	mov	r0, r4
}
 800cc32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cc36:	f000 bcf5 	b.w	800d624 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc3a:	07d6      	lsls	r6, r2, #31
 800cc3c:	d509      	bpl.n	800cc52 <HAL_UART_IRQHandler+0x14e>
 800cc3e:	05ee      	lsls	r6, r5, #23
 800cc40:	d507      	bpl.n	800cc52 <HAL_UART_IRQHandler+0x14e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc42:	2601      	movs	r6, #1
 800cc44:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc46:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800cc4a:	f046 0601 	orr.w	r6, r6, #1
 800cc4e:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc52:	0796      	lsls	r6, r2, #30
 800cc54:	f140 8090 	bpl.w	800cd78 <HAL_UART_IRQHandler+0x274>
 800cc58:	07ce      	lsls	r6, r1, #31
 800cc5a:	d50a      	bpl.n	800cc72 <HAL_UART_IRQHandler+0x16e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc5c:	2602      	movs	r6, #2
 800cc5e:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc60:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800cc64:	f046 0604 	orr.w	r6, r6, #4
 800cc68:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc6c:	0756      	lsls	r6, r2, #29
 800cc6e:	f100 8089 	bmi.w	800cd84 <HAL_UART_IRQHandler+0x280>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cc72:	0716      	lsls	r6, r2, #28
 800cc74:	d50b      	bpl.n	800cc8e <HAL_UART_IRQHandler+0x18a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc76:	f005 0620 	and.w	r6, r5, #32
 800cc7a:	4330      	orrs	r0, r6
 800cc7c:	d007      	beq.n	800cc8e <HAL_UART_IRQHandler+0x18a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cc7e:	2008      	movs	r0, #8
 800cc80:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cc82:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800cc86:	f040 0008 	orr.w	r0, r0, #8
 800cc8a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cc8e:	0516      	lsls	r6, r2, #20
 800cc90:	d50a      	bpl.n	800cca8 <HAL_UART_IRQHandler+0x1a4>
 800cc92:	0168      	lsls	r0, r5, #5
 800cc94:	d508      	bpl.n	800cca8 <HAL_UART_IRQHandler+0x1a4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc96:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800cc9a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cc9c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800cca0:	f040 0020 	orr.w	r0, r0, #32
 800cca4:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cca8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800ccac:	2800      	cmp	r0, #0
 800ccae:	f43f af63 	beq.w	800cb78 <HAL_UART_IRQHandler+0x74>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ccb2:	0696      	lsls	r6, r2, #26
 800ccb4:	d50b      	bpl.n	800ccce <HAL_UART_IRQHandler+0x1ca>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ccb6:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ccba:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800ccbe:	ea55 0201 	orrs.w	r2, r5, r1
 800ccc2:	d004      	beq.n	800ccce <HAL_UART_IRQHandler+0x1ca>
        if (huart->RxISR != NULL)
 800ccc4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800ccc6:	b112      	cbz	r2, 800ccce <HAL_UART_IRQHandler+0x1ca>
          huart->RxISR(huart);
 800ccc8:	4620      	mov	r0, r4
 800ccca:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cccc:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800ccce:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ccd2:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ccd4:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ccd8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800ccdc:	4315      	orrs	r5, r2
 800ccde:	f000 80c0 	beq.w	800ce62 <HAL_UART_IRQHandler+0x35e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cce6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccea:	e843 2100 	strex	r1, r2, [r3]
 800ccee:	2900      	cmp	r1, #0
 800ccf0:	d1f7      	bne.n	800cce2 <HAL_UART_IRQHandler+0x1de>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ccf2:	483b      	ldr	r0, [pc, #236]	; (800cde0 <HAL_UART_IRQHandler+0x2dc>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf4:	f103 0208 	add.w	r2, r3, #8
 800ccf8:	e852 2f00 	ldrex	r2, [r2]
 800ccfc:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccfe:	f103 0508 	add.w	r5, r3, #8
 800cd02:	e845 2100 	strex	r1, r2, [r5]
 800cd06:	2900      	cmp	r1, #0
 800cd08:	d1f4      	bne.n	800ccf4 <HAL_UART_IRQHandler+0x1f0>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd0a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800cd0c:	2a01      	cmp	r2, #1
 800cd0e:	d052      	beq.n	800cdb6 <HAL_UART_IRQHandler+0x2b2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd10:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800cd12:	2120      	movs	r1, #32
 800cd14:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd18:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd1a:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800cd1c:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd1e:	064d      	lsls	r5, r1, #25
 800cd20:	d562      	bpl.n	800cde8 <HAL_UART_IRQHandler+0x2e4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd22:	f103 0208 	add.w	r2, r3, #8
 800cd26:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd2e:	f103 0008 	add.w	r0, r3, #8
 800cd32:	e840 2100 	strex	r1, r2, [r0]
 800cd36:	2900      	cmp	r1, #0
 800cd38:	d1f3      	bne.n	800cd22 <HAL_UART_IRQHandler+0x21e>
          if (huart->hdmarx != NULL)
 800cd3a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	d053      	beq.n	800cde8 <HAL_UART_IRQHandler+0x2e4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cd40:	4b28      	ldr	r3, [pc, #160]	; (800cde4 <HAL_UART_IRQHandler+0x2e0>)
 800cd42:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cd44:	f7fb fe8a 	bl	8008a5c <HAL_DMA_Abort_IT>
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	f43f af15 	beq.w	800cb78 <HAL_UART_IRQHandler+0x74>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cd4e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800cd50:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800cd52:	e00e      	b.n	800cd72 <HAL_UART_IRQHandler+0x26e>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cd54:	0696      	lsls	r6, r2, #26
 800cd56:	f57f aeea 	bpl.w	800cb2e <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd5a:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd5e:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 800cd62:	ea56 060c 	orrs.w	r6, r6, ip
 800cd66:	f43f aee2 	beq.w	800cb2e <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800cd6a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	f43f af03 	beq.w	800cb78 <HAL_UART_IRQHandler+0x74>
}
 800cd72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cd76:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd78:	0756      	lsls	r6, r2, #29
 800cd7a:	f57f af7a 	bpl.w	800cc72 <HAL_UART_IRQHandler+0x16e>
 800cd7e:	07ce      	lsls	r6, r1, #31
 800cd80:	f57f af77 	bpl.w	800cc72 <HAL_UART_IRQHandler+0x16e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cd84:	2604      	movs	r6, #4
 800cd86:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cd88:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800cd8c:	f046 0602 	orr.w	r6, r6, #2
 800cd90:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800cd94:	e76d      	b.n	800cc72 <HAL_UART_IRQHandler+0x16e>
    if (huart->TxISR != NULL)
 800cd96:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f43f aeed 	beq.w	800cb78 <HAL_UART_IRQHandler+0x74>
      huart->TxISR(huart);
 800cd9e:	4620      	mov	r0, r4
}
 800cda0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800cda4:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cda6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800cdaa:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cdac:	621a      	str	r2, [r3, #32]
}
 800cdae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800cdb2:	f000 bc35 	b.w	800d620 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdb6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdba:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdbe:	e843 2100 	strex	r1, r2, [r3]
 800cdc2:	2900      	cmp	r1, #0
 800cdc4:	d0a4      	beq.n	800cd10 <HAL_UART_IRQHandler+0x20c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdc6:	e853 2f00 	ldrex	r2, [r3]
 800cdca:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdce:	e843 2100 	strex	r1, r2, [r3]
 800cdd2:	2900      	cmp	r1, #0
 800cdd4:	d1ef      	bne.n	800cdb6 <HAL_UART_IRQHandler+0x2b2>
 800cdd6:	e79b      	b.n	800cd10 <HAL_UART_IRQHandler+0x20c>
 800cdd8:	04000120 	.word	0x04000120
 800cddc:	10000001 	.word	0x10000001
 800cde0:	effffffe 	.word	0xeffffffe
 800cde4:	0800caed 	.word	0x0800caed
            HAL_UART_ErrorCallback(huart);
 800cde8:	4620      	mov	r0, r4
 800cdea:	f7ff fe7d 	bl	800cae8 <HAL_UART_ErrorCallback>
}
 800cdee:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cdf0:	4620      	mov	r0, r4
}
 800cdf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cdf6:	f000 bc17 	b.w	800d628 <HAL_UARTEx_TxFifoEmptyCallback>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cdfa:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 800cdfe:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 800ce02:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ce06:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 800ce08:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ce0a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800ce0c:	2a00      	cmp	r2, #0
 800ce0e:	f43f aeb3 	beq.w	800cb78 <HAL_UART_IRQHandler+0x74>
 800ce12:	2900      	cmp	r1, #0
 800ce14:	f43f aeb0 	beq.w	800cb78 <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce18:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce20:	e843 2000 	strex	r0, r2, [r3]
 800ce24:	2800      	cmp	r0, #0
 800ce26:	d1f7      	bne.n	800ce18 <HAL_UART_IRQHandler+0x314>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce28:	4d11      	ldr	r5, [pc, #68]	; (800ce70 <HAL_UART_IRQHandler+0x36c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce2a:	f103 0208 	add.w	r2, r3, #8
 800ce2e:	e852 2f00 	ldrex	r2, [r2]
 800ce32:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce34:	f103 0608 	add.w	r6, r3, #8
 800ce38:	e846 2000 	strex	r0, r2, [r6]
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	d1f4      	bne.n	800ce2a <HAL_UART_IRQHandler+0x326>
        huart->RxState = HAL_UART_STATE_READY;
 800ce40:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800ce42:	6720      	str	r0, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800ce44:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce48:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce4a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce4e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce52:	e843 2000 	strex	r0, r2, [r3]
 800ce56:	2800      	cmp	r0, #0
 800ce58:	d1f7      	bne.n	800ce4a <HAL_UART_IRQHandler+0x346>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f7ff fe50 	bl	800cb00 <HAL_UARTEx_RxEventCallback>
}
 800ce60:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800ce62:	4620      	mov	r0, r4
 800ce64:	f7ff fe40 	bl	800cae8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce68:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 800ce6c:	bd70      	pop	{r4, r5, r6, pc}
 800ce6e:	bf00      	nop
 800ce70:	effffffe 	.word	0xeffffffe

0800ce74 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ce74:	6901      	ldr	r1, [r0, #16]
 800ce76:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce78:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ce7a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ce7c:	49c0      	ldr	r1, [pc, #768]	; (800d180 <UART_SetConfig+0x30c>)
{
 800ce7e:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ce80:	6945      	ldr	r5, [r0, #20]
{
 800ce82:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ce84:	69c0      	ldr	r0, [r0, #28]
{
 800ce86:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ce88:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ce8a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ce8c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ce8e:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ce90:	4dbc      	ldr	r5, [pc, #752]	; (800d184 <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ce92:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce94:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ce96:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ce98:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce9a:	685a      	ldr	r2, [r3, #4]
 800ce9c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800cea0:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cea4:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cea6:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cea8:	f000 80e0 	beq.w	800d06c <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
 800ceac:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ceae:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800ceb0:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ceb2:	4ab5      	ldr	r2, [pc, #724]	; (800d188 <UART_SetConfig+0x314>)
 800ceb4:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ceb6:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ceb8:	4311      	orrs	r1, r2
 800ceba:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cebe:	f022 020f 	bic.w	r2, r2, #15
 800cec2:	432a      	orrs	r2, r5
 800cec4:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cec6:	4ab1      	ldr	r2, [pc, #708]	; (800d18c <UART_SetConfig+0x318>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d023      	beq.n	800cf14 <UART_SetConfig+0xa0>
 800cecc:	4ab0      	ldr	r2, [pc, #704]	; (800d190 <UART_SetConfig+0x31c>)
 800cece:	4293      	cmp	r3, r2
 800ced0:	d076      	beq.n	800cfc0 <UART_SetConfig+0x14c>
 800ced2:	4ab0      	ldr	r2, [pc, #704]	; (800d194 <UART_SetConfig+0x320>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	f000 818f 	beq.w	800d1f8 <UART_SetConfig+0x384>
 800ceda:	4aaf      	ldr	r2, [pc, #700]	; (800d198 <UART_SetConfig+0x324>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	f000 81e1 	beq.w	800d2a4 <UART_SetConfig+0x430>
 800cee2:	4aae      	ldr	r2, [pc, #696]	; (800d19c <UART_SetConfig+0x328>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	f000 8121 	beq.w	800d12c <UART_SetConfig+0x2b8>
 800ceea:	4aad      	ldr	r2, [pc, #692]	; (800d1a0 <UART_SetConfig+0x32c>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	f000 81e3 	beq.w	800d2b8 <UART_SetConfig+0x444>
 800cef2:	4aac      	ldr	r2, [pc, #688]	; (800d1a4 <UART_SetConfig+0x330>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	f000 8234 	beq.w	800d362 <UART_SetConfig+0x4ee>
 800cefa:	4aab      	ldr	r2, [pc, #684]	; (800d1a8 <UART_SetConfig+0x334>)
 800cefc:	4293      	cmp	r3, r2
 800cefe:	f000 81e7 	beq.w	800d2d0 <UART_SetConfig+0x45c>
        ret = HAL_ERROR;
 800cf02:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800cf04:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800cf06:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800cf0a:	6723      	str	r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800cf0c:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800cf0e:	6763      	str	r3, [r4, #116]	; 0x74
}
 800cf10:	b007      	add	sp, #28
 800cf12:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf14:	4ba5      	ldr	r3, [pc, #660]	; (800d1ac <UART_SetConfig+0x338>)
 800cf16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cf1c:	2b28      	cmp	r3, #40	; 0x28
 800cf1e:	d8f0      	bhi.n	800cf02 <UART_SetConfig+0x8e>
 800cf20:	4aa3      	ldr	r2, [pc, #652]	; (800d1b0 <UART_SetConfig+0x33c>)
 800cf22:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf24:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800cf28:	d055      	beq.n	800cfd6 <UART_SetConfig+0x162>
    switch (clocksource)
 800cf2a:	2b20      	cmp	r3, #32
 800cf2c:	f200 814a 	bhi.w	800d1c4 <UART_SetConfig+0x350>
 800cf30:	2b20      	cmp	r3, #32
 800cf32:	d8e6      	bhi.n	800cf02 <UART_SetConfig+0x8e>
 800cf34:	a201      	add	r2, pc, #4	; (adr r2, 800cf3c <UART_SetConfig+0xc8>)
 800cf36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf3a:	bf00      	nop
 800cf3c:	0800d17b 	.word	0x0800d17b
 800cf40:	0800d175 	.word	0x0800d175
 800cf44:	0800cf03 	.word	0x0800cf03
 800cf48:	0800cf03 	.word	0x0800cf03
 800cf4c:	0800d165 	.word	0x0800d165
 800cf50:	0800cf03 	.word	0x0800cf03
 800cf54:	0800cf03 	.word	0x0800cf03
 800cf58:	0800cf03 	.word	0x0800cf03
 800cf5c:	0800d157 	.word	0x0800d157
 800cf60:	0800cf03 	.word	0x0800cf03
 800cf64:	0800cf03 	.word	0x0800cf03
 800cf68:	0800cf03 	.word	0x0800cf03
 800cf6c:	0800cf03 	.word	0x0800cf03
 800cf70:	0800cf03 	.word	0x0800cf03
 800cf74:	0800cf03 	.word	0x0800cf03
 800cf78:	0800cf03 	.word	0x0800cf03
 800cf7c:	0800d141 	.word	0x0800d141
 800cf80:	0800cf03 	.word	0x0800cf03
 800cf84:	0800cf03 	.word	0x0800cf03
 800cf88:	0800cf03 	.word	0x0800cf03
 800cf8c:	0800cf03 	.word	0x0800cf03
 800cf90:	0800cf03 	.word	0x0800cf03
 800cf94:	0800cf03 	.word	0x0800cf03
 800cf98:	0800cf03 	.word	0x0800cf03
 800cf9c:	0800cf03 	.word	0x0800cf03
 800cfa0:	0800cf03 	.word	0x0800cf03
 800cfa4:	0800cf03 	.word	0x0800cf03
 800cfa8:	0800cf03 	.word	0x0800cf03
 800cfac:	0800cf03 	.word	0x0800cf03
 800cfb0:	0800cf03 	.word	0x0800cf03
 800cfb4:	0800cf03 	.word	0x0800cf03
 800cfb8:	0800cf03 	.word	0x0800cf03
 800cfbc:	0800d2e5 	.word	0x0800d2e5
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cfc0:	4b7a      	ldr	r3, [pc, #488]	; (800d1ac <UART_SetConfig+0x338>)
 800cfc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfc4:	f003 0307 	and.w	r3, r3, #7
 800cfc8:	2b05      	cmp	r3, #5
 800cfca:	d89a      	bhi.n	800cf02 <UART_SetConfig+0x8e>
 800cfcc:	4a79      	ldr	r2, [pc, #484]	; (800d1b4 <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cfce:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800cfd2:	5cd3      	ldrb	r3, [r2, r3]
 800cfd4:	d1a9      	bne.n	800cf2a <UART_SetConfig+0xb6>
    switch (clocksource)
 800cfd6:	2b20      	cmp	r3, #32
 800cfd8:	f200 8145 	bhi.w	800d266 <UART_SetConfig+0x3f2>
 800cfdc:	2b20      	cmp	r3, #32
 800cfde:	d890      	bhi.n	800cf02 <UART_SetConfig+0x8e>
 800cfe0:	a201      	add	r2, pc, #4	; (adr r2, 800cfe8 <UART_SetConfig+0x174>)
 800cfe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfe6:	bf00      	nop
 800cfe8:	0800d34f 	.word	0x0800d34f
 800cfec:	0800d349 	.word	0x0800d349
 800cff0:	0800cf03 	.word	0x0800cf03
 800cff4:	0800cf03 	.word	0x0800cf03
 800cff8:	0800d355 	.word	0x0800d355
 800cffc:	0800cf03 	.word	0x0800cf03
 800d000:	0800cf03 	.word	0x0800cf03
 800d004:	0800cf03 	.word	0x0800cf03
 800d008:	0800d337 	.word	0x0800d337
 800d00c:	0800cf03 	.word	0x0800cf03
 800d010:	0800cf03 	.word	0x0800cf03
 800d014:	0800cf03 	.word	0x0800cf03
 800d018:	0800cf03 	.word	0x0800cf03
 800d01c:	0800cf03 	.word	0x0800cf03
 800d020:	0800cf03 	.word	0x0800cf03
 800d024:	0800cf03 	.word	0x0800cf03
 800d028:	0800d323 	.word	0x0800d323
 800d02c:	0800cf03 	.word	0x0800cf03
 800d030:	0800cf03 	.word	0x0800cf03
 800d034:	0800cf03 	.word	0x0800cf03
 800d038:	0800cf03 	.word	0x0800cf03
 800d03c:	0800cf03 	.word	0x0800cf03
 800d040:	0800cf03 	.word	0x0800cf03
 800d044:	0800cf03 	.word	0x0800cf03
 800d048:	0800cf03 	.word	0x0800cf03
 800d04c:	0800cf03 	.word	0x0800cf03
 800d050:	0800cf03 	.word	0x0800cf03
 800d054:	0800cf03 	.word	0x0800cf03
 800d058:	0800cf03 	.word	0x0800cf03
 800d05c:	0800cf03 	.word	0x0800cf03
 800d060:	0800cf03 	.word	0x0800cf03
 800d064:	0800cf03 	.word	0x0800cf03
 800d068:	0800d35f 	.word	0x0800d35f
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d06c:	6898      	ldr	r0, [r3, #8]
 800d06e:	4a46      	ldr	r2, [pc, #280]	; (800d188 <UART_SetConfig+0x314>)
 800d070:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d072:	484e      	ldr	r0, [pc, #312]	; (800d1ac <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d074:	430a      	orrs	r2, r1
 800d076:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d07a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d07c:	f022 020f 	bic.w	r2, r2, #15
 800d080:	430a      	orrs	r2, r1
 800d082:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d084:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800d086:	f003 0307 	and.w	r3, r3, #7
 800d08a:	2b05      	cmp	r3, #5
 800d08c:	f63f af39 	bhi.w	800cf02 <UART_SetConfig+0x8e>
 800d090:	4a49      	ldr	r2, [pc, #292]	; (800d1b8 <UART_SetConfig+0x344>)
 800d092:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 800d094:	2b20      	cmp	r3, #32
 800d096:	f200 80b9 	bhi.w	800d20c <UART_SetConfig+0x398>
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	f67f af31 	bls.w	800cf02 <UART_SetConfig+0x8e>
 800d0a0:	3b02      	subs	r3, #2
 800d0a2:	2b1e      	cmp	r3, #30
 800d0a4:	f63f af2d 	bhi.w	800cf02 <UART_SetConfig+0x8e>
 800d0a8:	a201      	add	r2, pc, #4	; (adr r2, 800d0b0 <UART_SetConfig+0x23c>)
 800d0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ae:	bf00      	nop
 800d0b0:	0800d319 	.word	0x0800d319
 800d0b4:	0800cf03 	.word	0x0800cf03
 800d0b8:	0800d30f 	.word	0x0800d30f
 800d0bc:	0800cf03 	.word	0x0800cf03
 800d0c0:	0800cf03 	.word	0x0800cf03
 800d0c4:	0800cf03 	.word	0x0800cf03
 800d0c8:	0800d2fd 	.word	0x0800d2fd
 800d0cc:	0800cf03 	.word	0x0800cf03
 800d0d0:	0800cf03 	.word	0x0800cf03
 800d0d4:	0800cf03 	.word	0x0800cf03
 800d0d8:	0800cf03 	.word	0x0800cf03
 800d0dc:	0800cf03 	.word	0x0800cf03
 800d0e0:	0800cf03 	.word	0x0800cf03
 800d0e4:	0800cf03 	.word	0x0800cf03
 800d0e8:	0800d2e9 	.word	0x0800d2e9
 800d0ec:	0800cf03 	.word	0x0800cf03
 800d0f0:	0800cf03 	.word	0x0800cf03
 800d0f4:	0800cf03 	.word	0x0800cf03
 800d0f8:	0800cf03 	.word	0x0800cf03
 800d0fc:	0800cf03 	.word	0x0800cf03
 800d100:	0800cf03 	.word	0x0800cf03
 800d104:	0800cf03 	.word	0x0800cf03
 800d108:	0800cf03 	.word	0x0800cf03
 800d10c:	0800cf03 	.word	0x0800cf03
 800d110:	0800cf03 	.word	0x0800cf03
 800d114:	0800cf03 	.word	0x0800cf03
 800d118:	0800cf03 	.word	0x0800cf03
 800d11c:	0800cf03 	.word	0x0800cf03
 800d120:	0800cf03 	.word	0x0800cf03
 800d124:	0800cf03 	.word	0x0800cf03
 800d128:	0800d31f 	.word	0x0800d31f
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d12c:	4b1f      	ldr	r3, [pc, #124]	; (800d1ac <UART_SetConfig+0x338>)
 800d12e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d130:	f003 0307 	and.w	r3, r3, #7
 800d134:	2b05      	cmp	r3, #5
 800d136:	f63f aee4 	bhi.w	800cf02 <UART_SetConfig+0x8e>
 800d13a:	4a20      	ldr	r2, [pc, #128]	; (800d1bc <UART_SetConfig+0x348>)
 800d13c:	5cd3      	ldrb	r3, [r2, r3]
 800d13e:	e6f1      	b.n	800cf24 <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d140:	4b1a      	ldr	r3, [pc, #104]	; (800d1ac <UART_SetConfig+0x338>)
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	0692      	lsls	r2, r2, #26
 800d146:	f140 80c1 	bpl.w	800d2cc <UART_SetConfig+0x458>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	481c      	ldr	r0, [pc, #112]	; (800d1c0 <UART_SetConfig+0x34c>)
 800d14e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d152:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800d154:	e03b      	b.n	800d1ce <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d156:	a803      	add	r0, sp, #12
 800d158:	f7fe fd54 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d15c:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800d15e:	b938      	cbnz	r0, 800d170 <UART_SetConfig+0x2fc>
          pclk = (uint32_t) HSI_VALUE;
 800d160:	2000      	movs	r0, #0
 800d162:	e6cf      	b.n	800cf04 <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d164:	4668      	mov	r0, sp
 800d166:	f7fe fca1 	bl	800baac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d16a:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800d16c:	2800      	cmp	r0, #0
 800d16e:	d0f7      	beq.n	800d160 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d170:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d172:	e02c      	b.n	800d1ce <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800d174:	f7fd fe04 	bl	800ad80 <HAL_RCC_GetPCLK2Freq>
        break;
 800d178:	e7f1      	b.n	800d15e <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 800d17a:	f7fd fdb9 	bl	800acf0 <HAL_RCC_GetPCLK1Freq>
        break;
 800d17e:	e7ee      	b.n	800d15e <UART_SetConfig+0x2ea>
 800d180:	cfff69f3 	.word	0xcfff69f3
 800d184:	58000c00 	.word	0x58000c00
 800d188:	11fff4ff 	.word	0x11fff4ff
 800d18c:	40011000 	.word	0x40011000
 800d190:	40004400 	.word	0x40004400
 800d194:	40004800 	.word	0x40004800
 800d198:	40004c00 	.word	0x40004c00
 800d19c:	40005000 	.word	0x40005000
 800d1a0:	40011400 	.word	0x40011400
 800d1a4:	40007800 	.word	0x40007800
 800d1a8:	40007c00 	.word	0x40007c00
 800d1ac:	58024400 	.word	0x58024400
 800d1b0:	0801af54 	.word	0x0801af54
 800d1b4:	0801af80 	.word	0x0801af80
 800d1b8:	0801af88 	.word	0x0801af88
 800d1bc:	0801af80 	.word	0x0801af80
 800d1c0:	03d09000 	.word	0x03d09000
    switch (clocksource)
 800d1c4:	2b40      	cmp	r3, #64	; 0x40
 800d1c6:	f47f ae9c 	bne.w	800cf02 <UART_SetConfig+0x8e>
 800d1ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1ce:	4b6c      	ldr	r3, [pc, #432]	; (800d380 <UART_SetConfig+0x50c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1d0:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1d4:	6862      	ldr	r2, [r4, #4]
 800d1d6:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800d1da:	fbb0 f3f3 	udiv	r3, r0, r3
 800d1de:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800d1e2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1e6:	f1a3 0210 	sub.w	r2, r3, #16
 800d1ea:	428a      	cmp	r2, r1
 800d1ec:	f63f ae89 	bhi.w	800cf02 <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d1f0:	6822      	ldr	r2, [r4, #0]
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	60d3      	str	r3, [r2, #12]
 800d1f6:	e685      	b.n	800cf04 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d1f8:	4b62      	ldr	r3, [pc, #392]	; (800d384 <UART_SetConfig+0x510>)
 800d1fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1fc:	f003 0307 	and.w	r3, r3, #7
 800d200:	2b05      	cmp	r3, #5
 800d202:	f63f ae7e 	bhi.w	800cf02 <UART_SetConfig+0x8e>
 800d206:	4a60      	ldr	r2, [pc, #384]	; (800d388 <UART_SetConfig+0x514>)
 800d208:	5cd3      	ldrb	r3, [r2, r3]
 800d20a:	e68b      	b.n	800cf24 <UART_SetConfig+0xb0>
    switch (clocksource)
 800d20c:	2b40      	cmp	r3, #64	; 0x40
 800d20e:	f47f ae78 	bne.w	800cf02 <UART_SetConfig+0x8e>
 800d212:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d216:	4b5a      	ldr	r3, [pc, #360]	; (800d380 <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d218:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d21a:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d21e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d222:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d226:	4299      	cmp	r1, r3
 800d228:	f63f ae6b 	bhi.w	800cf02 <UART_SetConfig+0x8e>
 800d22c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800d230:	f63f ae67 	bhi.w	800cf02 <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d234:	2300      	movs	r3, #0
 800d236:	4619      	mov	r1, r3
 800d238:	f7f3 f8aa 	bl	8000390 <__aeabi_uldivmod>
 800d23c:	462a      	mov	r2, r5
 800d23e:	0209      	lsls	r1, r1, #8
 800d240:	0203      	lsls	r3, r0, #8
 800d242:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800d246:	0868      	lsrs	r0, r5, #1
 800d248:	1818      	adds	r0, r3, r0
 800d24a:	f04f 0300 	mov.w	r3, #0
 800d24e:	f141 0100 	adc.w	r1, r1, #0
 800d252:	f7f3 f89d 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d256:	4a4d      	ldr	r2, [pc, #308]	; (800d38c <UART_SetConfig+0x518>)
 800d258:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d25c:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d25e:	4291      	cmp	r1, r2
 800d260:	f63f ae4f 	bhi.w	800cf02 <UART_SetConfig+0x8e>
 800d264:	e7c4      	b.n	800d1f0 <UART_SetConfig+0x37c>
    switch (clocksource)
 800d266:	2b40      	cmp	r3, #64	; 0x40
 800d268:	f47f ae4b 	bne.w	800cf02 <UART_SetConfig+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d26c:	4b44      	ldr	r3, [pc, #272]	; (800d380 <UART_SetConfig+0x50c>)
 800d26e:	6862      	ldr	r2, [r4, #4]
 800d270:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800d274:	0853      	lsrs	r3, r2, #1
 800d276:	fbb0 f0f1 	udiv	r0, r0, r1
 800d27a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d27e:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d282:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d286:	f1a0 0210 	sub.w	r2, r0, #16
 800d28a:	429a      	cmp	r2, r3
 800d28c:	f63f ae39 	bhi.w	800cf02 <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d290:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d294:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800d298:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d29a:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 800d29c:	4303      	orrs	r3, r0
 800d29e:	2000      	movs	r0, #0
 800d2a0:	60d3      	str	r3, [r2, #12]
 800d2a2:	e62f      	b.n	800cf04 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d2a4:	4b37      	ldr	r3, [pc, #220]	; (800d384 <UART_SetConfig+0x510>)
 800d2a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2a8:	f003 0307 	and.w	r3, r3, #7
 800d2ac:	2b05      	cmp	r3, #5
 800d2ae:	f63f ae28 	bhi.w	800cf02 <UART_SetConfig+0x8e>
 800d2b2:	4a37      	ldr	r2, [pc, #220]	; (800d390 <UART_SetConfig+0x51c>)
 800d2b4:	5cd3      	ldrb	r3, [r2, r3]
 800d2b6:	e635      	b.n	800cf24 <UART_SetConfig+0xb0>
 800d2b8:	4b32      	ldr	r3, [pc, #200]	; (800d384 <UART_SetConfig+0x510>)
 800d2ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d2c0:	2b28      	cmp	r3, #40	; 0x28
 800d2c2:	f63f ae1e 	bhi.w	800cf02 <UART_SetConfig+0x8e>
 800d2c6:	4a33      	ldr	r2, [pc, #204]	; (800d394 <UART_SetConfig+0x520>)
 800d2c8:	5cd3      	ldrb	r3, [r2, r3]
 800d2ca:	e62b      	b.n	800cf24 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800d2cc:	4832      	ldr	r0, [pc, #200]	; (800d398 <UART_SetConfig+0x524>)
 800d2ce:	e77e      	b.n	800d1ce <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d2d0:	4b2c      	ldr	r3, [pc, #176]	; (800d384 <UART_SetConfig+0x510>)
 800d2d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2d4:	f003 0307 	and.w	r3, r3, #7
 800d2d8:	2b05      	cmp	r3, #5
 800d2da:	f63f ae12 	bhi.w	800cf02 <UART_SetConfig+0x8e>
 800d2de:	4a2f      	ldr	r2, [pc, #188]	; (800d39c <UART_SetConfig+0x528>)
 800d2e0:	5cd3      	ldrb	r3, [r2, r3]
 800d2e2:	e61f      	b.n	800cf24 <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
 800d2e4:	482e      	ldr	r0, [pc, #184]	; (800d3a0 <UART_SetConfig+0x52c>)
 800d2e6:	e772      	b.n	800d1ce <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2e8:	4b26      	ldr	r3, [pc, #152]	; (800d384 <UART_SetConfig+0x510>)
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	0690      	lsls	r0, r2, #26
 800d2ee:	d542      	bpl.n	800d376 <UART_SetConfig+0x502>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4829      	ldr	r0, [pc, #164]	; (800d398 <UART_SetConfig+0x524>)
 800d2f4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d2f8:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800d2fa:	e78c      	b.n	800d216 <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2fc:	a803      	add	r0, sp, #12
 800d2fe:	f7fe fc81 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d302:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800d304:	2800      	cmp	r0, #0
 800d306:	f43f af2b 	beq.w	800d160 <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d30a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d30c:	e783      	b.n	800d216 <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d30e:	4668      	mov	r0, sp
 800d310:	f7fe fbcc 	bl	800baac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d314:	9801      	ldr	r0, [sp, #4]
        break;
 800d316:	e7f5      	b.n	800d304 <UART_SetConfig+0x490>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d318:	f7fe fbb6 	bl	800ba88 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800d31c:	e7f2      	b.n	800d304 <UART_SetConfig+0x490>
        pclk = (uint32_t) CSI_VALUE;
 800d31e:	4820      	ldr	r0, [pc, #128]	; (800d3a0 <UART_SetConfig+0x52c>)
 800d320:	e779      	b.n	800d216 <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d322:	4b18      	ldr	r3, [pc, #96]	; (800d384 <UART_SetConfig+0x510>)
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	0691      	lsls	r1, r2, #26
 800d328:	d527      	bpl.n	800d37a <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	481a      	ldr	r0, [pc, #104]	; (800d398 <UART_SetConfig+0x524>)
 800d32e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d332:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800d334:	e79a      	b.n	800d26c <UART_SetConfig+0x3f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d336:	a803      	add	r0, sp, #12
 800d338:	f7fe fc64 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d33c:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800d33e:	2800      	cmp	r0, #0
 800d340:	f43f af0e 	beq.w	800d160 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d344:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d346:	e791      	b.n	800d26c <UART_SetConfig+0x3f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800d348:	f7fd fd1a 	bl	800ad80 <HAL_RCC_GetPCLK2Freq>
        break;
 800d34c:	e7f7      	b.n	800d33e <UART_SetConfig+0x4ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800d34e:	f7fd fccf 	bl	800acf0 <HAL_RCC_GetPCLK1Freq>
        break;
 800d352:	e7f4      	b.n	800d33e <UART_SetConfig+0x4ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d354:	4668      	mov	r0, sp
 800d356:	f7fe fba9 	bl	800baac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d35a:	9801      	ldr	r0, [sp, #4]
        break;
 800d35c:	e7ef      	b.n	800d33e <UART_SetConfig+0x4ca>
        pclk = (uint32_t) CSI_VALUE;
 800d35e:	4810      	ldr	r0, [pc, #64]	; (800d3a0 <UART_SetConfig+0x52c>)
 800d360:	e784      	b.n	800d26c <UART_SetConfig+0x3f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d362:	4b08      	ldr	r3, [pc, #32]	; (800d384 <UART_SetConfig+0x510>)
 800d364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d366:	f003 0307 	and.w	r3, r3, #7
 800d36a:	2b05      	cmp	r3, #5
 800d36c:	f63f adc9 	bhi.w	800cf02 <UART_SetConfig+0x8e>
 800d370:	4a0c      	ldr	r2, [pc, #48]	; (800d3a4 <UART_SetConfig+0x530>)
 800d372:	5cd3      	ldrb	r3, [r2, r3]
 800d374:	e5d6      	b.n	800cf24 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800d376:	4808      	ldr	r0, [pc, #32]	; (800d398 <UART_SetConfig+0x524>)
 800d378:	e74d      	b.n	800d216 <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
 800d37a:	4807      	ldr	r0, [pc, #28]	; (800d398 <UART_SetConfig+0x524>)
 800d37c:	e776      	b.n	800d26c <UART_SetConfig+0x3f8>
 800d37e:	bf00      	nop
 800d380:	0801af90 	.word	0x0801af90
 800d384:	58024400 	.word	0x58024400
 800d388:	0801af80 	.word	0x0801af80
 800d38c:	000ffcff 	.word	0x000ffcff
 800d390:	0801af80 	.word	0x0801af80
 800d394:	0801af54 	.word	0x0801af54
 800d398:	03d09000 	.word	0x03d09000
 800d39c:	0801af80 	.word	0x0801af80
 800d3a0:	003d0900 	.word	0x003d0900
 800d3a4:	0801af80 	.word	0x0801af80

0800d3a8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d3a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d3aa:	07da      	lsls	r2, r3, #31
{
 800d3ac:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d3ae:	d506      	bpl.n	800d3be <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d3b0:	6801      	ldr	r1, [r0, #0]
 800d3b2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800d3b4:	684a      	ldr	r2, [r1, #4]
 800d3b6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d3ba:	4322      	orrs	r2, r4
 800d3bc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d3be:	079c      	lsls	r4, r3, #30
 800d3c0:	d506      	bpl.n	800d3d0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d3c2:	6801      	ldr	r1, [r0, #0]
 800d3c4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800d3c6:	684a      	ldr	r2, [r1, #4]
 800d3c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d3cc:	4322      	orrs	r2, r4
 800d3ce:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d3d0:	0759      	lsls	r1, r3, #29
 800d3d2:	d506      	bpl.n	800d3e2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d3d4:	6801      	ldr	r1, [r0, #0]
 800d3d6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800d3d8:	684a      	ldr	r2, [r1, #4]
 800d3da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d3de:	4322      	orrs	r2, r4
 800d3e0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d3e2:	071a      	lsls	r2, r3, #28
 800d3e4:	d506      	bpl.n	800d3f4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d3e6:	6801      	ldr	r1, [r0, #0]
 800d3e8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800d3ea:	684a      	ldr	r2, [r1, #4]
 800d3ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d3f0:	4322      	orrs	r2, r4
 800d3f2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d3f4:	06dc      	lsls	r4, r3, #27
 800d3f6:	d506      	bpl.n	800d406 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d3f8:	6801      	ldr	r1, [r0, #0]
 800d3fa:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800d3fc:	688a      	ldr	r2, [r1, #8]
 800d3fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d402:	4322      	orrs	r2, r4
 800d404:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d406:	0699      	lsls	r1, r3, #26
 800d408:	d506      	bpl.n	800d418 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d40a:	6801      	ldr	r1, [r0, #0]
 800d40c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800d40e:	688a      	ldr	r2, [r1, #8]
 800d410:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d414:	4322      	orrs	r2, r4
 800d416:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d418:	065a      	lsls	r2, r3, #25
 800d41a:	d50a      	bpl.n	800d432 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d41c:	6801      	ldr	r1, [r0, #0]
 800d41e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800d420:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d422:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d426:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800d42a:	ea42 0204 	orr.w	r2, r2, r4
 800d42e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d430:	d00b      	beq.n	800d44a <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d432:	061b      	lsls	r3, r3, #24
 800d434:	d506      	bpl.n	800d444 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d436:	6802      	ldr	r2, [r0, #0]
 800d438:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800d43a:	6853      	ldr	r3, [r2, #4]
 800d43c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800d440:	430b      	orrs	r3, r1
 800d442:	6053      	str	r3, [r2, #4]
}
 800d444:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d448:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d44a:	684a      	ldr	r2, [r1, #4]
 800d44c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800d44e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800d452:	4322      	orrs	r2, r4
 800d454:	604a      	str	r2, [r1, #4]
 800d456:	e7ec      	b.n	800d432 <UART_AdvFeatureConfig+0x8a>

0800d458 <UART_WaitOnFlagUntilTimeout>:
{
 800d458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d45c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d460:	4607      	mov	r7, r0
 800d462:	460e      	mov	r6, r1
 800d464:	4615      	mov	r5, r2
 800d466:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d468:	6804      	ldr	r4, [r0, #0]
 800d46a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d46e:	d10a      	bne.n	800d486 <UART_WaitOnFlagUntilTimeout+0x2e>
 800d470:	69e3      	ldr	r3, [r4, #28]
 800d472:	ea36 0303 	bics.w	r3, r6, r3
 800d476:	bf0c      	ite	eq
 800d478:	2301      	moveq	r3, #1
 800d47a:	2300      	movne	r3, #0
 800d47c:	429d      	cmp	r5, r3
 800d47e:	d0f7      	beq.n	800d470 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 800d480:	2000      	movs	r0, #0
}
 800d482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d486:	69e3      	ldr	r3, [r4, #28]
 800d488:	ea36 0303 	bics.w	r3, r6, r3
 800d48c:	bf0c      	ite	eq
 800d48e:	2301      	moveq	r3, #1
 800d490:	2300      	movne	r3, #0
 800d492:	42ab      	cmp	r3, r5
 800d494:	d1f4      	bne.n	800d480 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d496:	f7f9 f8ab 	bl	80065f0 <HAL_GetTick>
 800d49a:	eba0 0009 	sub.w	r0, r0, r9
 800d49e:	4540      	cmp	r0, r8
 800d4a0:	d833      	bhi.n	800d50a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d4a2:	f1b8 0f00 	cmp.w	r8, #0
 800d4a6:	d030      	beq.n	800d50a <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d4a8:	683c      	ldr	r4, [r7, #0]
 800d4aa:	6823      	ldr	r3, [r4, #0]
 800d4ac:	4622      	mov	r2, r4
 800d4ae:	0759      	lsls	r1, r3, #29
 800d4b0:	d5db      	bpl.n	800d46a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d4b2:	69e3      	ldr	r3, [r4, #28]
 800d4b4:	051b      	lsls	r3, r3, #20
 800d4b6:	d5d8      	bpl.n	800d46a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d4b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d4bc:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4be:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d4c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c6:	e844 3100 	strex	r1, r3, [r4]
 800d4ca:	b139      	cbz	r1, 800d4dc <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4cc:	e852 3f00 	ldrex	r3, [r2]
 800d4d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d4:	e842 3100 	strex	r1, r3, [r2]
 800d4d8:	2900      	cmp	r1, #0
 800d4da:	d1f7      	bne.n	800d4cc <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4dc:	f102 0308 	add.w	r3, r2, #8
 800d4e0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4e4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e8:	f102 0008 	add.w	r0, r2, #8
 800d4ec:	e840 3100 	strex	r1, r3, [r0]
 800d4f0:	2900      	cmp	r1, #0
 800d4f2:	d1f3      	bne.n	800d4dc <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800d4f4:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 800d4f6:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800d4f8:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 800d4fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 800d508:	e7bb      	b.n	800d482 <UART_WaitOnFlagUntilTimeout+0x2a>
 800d50a:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d50c:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d510:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d514:	e842 3100 	strex	r1, r3, [r2]
 800d518:	2900      	cmp	r1, #0
 800d51a:	d1f7      	bne.n	800d50c <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d51c:	f102 0308 	add.w	r3, r2, #8
 800d520:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d524:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d528:	f102 0008 	add.w	r0, r2, #8
 800d52c:	e840 3100 	strex	r1, r3, [r0]
 800d530:	2900      	cmp	r1, #0
 800d532:	d1f3      	bne.n	800d51c <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800d534:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800d536:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800d538:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 800d53c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800d544:	e79d      	b.n	800d482 <UART_WaitOnFlagUntilTimeout+0x2a>
 800d546:	bf00      	nop

0800d548 <HAL_UART_Init>:
  if (huart == NULL)
 800d548:	2800      	cmp	r0, #0
 800d54a:	d066      	beq.n	800d61a <HAL_UART_Init+0xd2>
  if (huart->gState == HAL_UART_STATE_RESET)
 800d54c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800d550:	b570      	push	{r4, r5, r6, lr}
 800d552:	4604      	mov	r4, r0
 800d554:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_RESET)
 800d556:	2b00      	cmp	r3, #0
 800d558:	d04c      	beq.n	800d5f4 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800d55a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d55c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d55e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800d560:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800d564:	6813      	ldr	r3, [r2, #0]
 800d566:	f023 0301 	bic.w	r3, r3, #1
 800d56a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d56c:	f7ff fc82 	bl	800ce74 <UART_SetConfig>
 800d570:	2801      	cmp	r0, #1
 800d572:	d03c      	beq.n	800d5ee <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d574:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d576:	2b00      	cmp	r3, #0
 800d578:	d135      	bne.n	800d5e6 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d57a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d57c:	2500      	movs	r5, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d57e:	6859      	ldr	r1, [r3, #4]
 800d580:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800d584:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d586:	6899      	ldr	r1, [r3, #8]
 800d588:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800d58c:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800d58e:	6819      	ldr	r1, [r3, #0]
 800d590:	f041 0101 	orr.w	r1, r1, #1
 800d594:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d596:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800d59a:	f7f9 f829 	bl	80065f0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d59e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800d5a0:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	0712      	lsls	r2, r2, #28
 800d5a6:	d40e      	bmi.n	800d5c6 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	075b      	lsls	r3, r3, #29
 800d5ac:	d427      	bmi.n	800d5fe <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5ae:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800d5b0:	2220      	movs	r2, #32
  return HAL_OK;
 800d5b2:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800d5b4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800d5b8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800d5bc:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5c0:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800d5c2:	b002      	add	sp, #8
 800d5c4:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5c6:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	462a      	mov	r2, r5
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	9100      	str	r1, [sp, #0]
 800d5d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d5d6:	f7ff ff3f 	bl	800d458 <UART_WaitOnFlagUntilTimeout>
 800d5da:	b9e0      	cbnz	r0, 800d616 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d5dc:	6823      	ldr	r3, [r4, #0]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	075b      	lsls	r3, r3, #29
 800d5e2:	d40c      	bmi.n	800d5fe <HAL_UART_Init+0xb6>
 800d5e4:	e7e3      	b.n	800d5ae <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	f7ff fede 	bl	800d3a8 <UART_AdvFeatureConfig>
 800d5ec:	e7c5      	b.n	800d57a <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800d5ee:	2001      	movs	r0, #1
}
 800d5f0:	b002      	add	sp, #8
 800d5f2:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800d5f4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800d5f8:	f7f8 fdb4 	bl	8006164 <HAL_UART_MspInit>
 800d5fc:	e7ad      	b.n	800d55a <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5fe:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 800d602:	4633      	mov	r3, r6
 800d604:	2200      	movs	r2, #0
 800d606:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d60a:	9000      	str	r0, [sp, #0]
 800d60c:	4620      	mov	r0, r4
 800d60e:	f7ff ff23 	bl	800d458 <UART_WaitOnFlagUntilTimeout>
 800d612:	2800      	cmp	r0, #0
 800d614:	d0cb      	beq.n	800d5ae <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800d616:	2003      	movs	r0, #3
 800d618:	e7d3      	b.n	800d5c2 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 800d61a:	2001      	movs	r0, #1
}
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop

0800d620 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d620:	4770      	bx	lr
 800d622:	bf00      	nop

0800d624 <HAL_UARTEx_RxFifoFullCallback>:
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop

0800d628 <HAL_UARTEx_TxFifoEmptyCallback>:
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop

0800d62c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d62c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800d630:	2a01      	cmp	r2, #1
 800d632:	d017      	beq.n	800d664 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d634:	6802      	ldr	r2, [r0, #0]
 800d636:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800d638:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d63a:	2100      	movs	r1, #0
{
 800d63c:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800d63e:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800d642:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d644:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800d646:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d648:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800d64c:	f024 0401 	bic.w	r4, r4, #1
 800d650:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d652:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d654:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800d656:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800d658:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800d65c:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800d660:	bc30      	pop	{r4, r5}
 800d662:	4770      	bx	lr
  __HAL_LOCK(huart);
 800d664:	2002      	movs	r0, #2
}
 800d666:	4770      	bx	lr

0800d668 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d668:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800d66c:	2a01      	cmp	r2, #1
 800d66e:	d037      	beq.n	800d6e0 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d670:	6802      	ldr	r2, [r0, #0]
 800d672:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800d674:	2024      	movs	r0, #36	; 0x24
{
 800d676:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800d678:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d67c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d67e:	6810      	ldr	r0, [r2, #0]
 800d680:	f020 0001 	bic.w	r0, r0, #1
 800d684:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d686:	6890      	ldr	r0, [r2, #8]
 800d688:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800d68c:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d68e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d690:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d692:	b310      	cbz	r0, 800d6da <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d694:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d696:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d698:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d69c:	4911      	ldr	r1, [pc, #68]	; (800d6e4 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d69e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800d6a2:	4d11      	ldr	r5, [pc, #68]	; (800d6e8 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d6a4:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d6a8:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800d6ac:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d6b0:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800d6b2:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d6b6:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d6b8:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d6bc:	fbb1 f1f5 	udiv	r1, r1, r5
 800d6c0:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800d6c4:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6cc:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800d6ce:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800d6d0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800d6d4:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800d6d8:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800d6da:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800d6dc:	4608      	mov	r0, r1
 800d6de:	e7ef      	b.n	800d6c0 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800d6e0:	2002      	movs	r0, #2
}
 800d6e2:	4770      	bx	lr
 800d6e4:	0801afb0 	.word	0x0801afb0
 800d6e8:	0801afa8 	.word	0x0801afa8

0800d6ec <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800d6ec:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800d6f0:	2a01      	cmp	r2, #1
 800d6f2:	d037      	beq.n	800d764 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6f4:	6802      	ldr	r2, [r0, #0]
 800d6f6:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800d6f8:	2024      	movs	r0, #36	; 0x24
{
 800d6fa:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800d6fc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d700:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800d702:	6810      	ldr	r0, [r2, #0]
 800d704:	f020 0001 	bic.w	r0, r0, #1
 800d708:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d70a:	6890      	ldr	r0, [r2, #8]
 800d70c:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800d710:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d712:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d714:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d716:	b310      	cbz	r0, 800d75e <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d718:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d71a:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d71c:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d720:	4911      	ldr	r1, [pc, #68]	; (800d768 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d722:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800d726:	4d11      	ldr	r5, [pc, #68]	; (800d76c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d728:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d72c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800d730:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d734:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800d736:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d73a:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d73c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d740:	fbb1 f1f5 	udiv	r1, r1, r5
 800d744:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800d748:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800d74a:	2100      	movs	r1, #0
 800d74c:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d750:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800d752:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800d754:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800d758:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800d75c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800d75e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800d760:	4608      	mov	r0, r1
 800d762:	e7ef      	b.n	800d744 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800d764:	2002      	movs	r0, #2
}
 800d766:	4770      	bx	lr
 800d768:	0801afb0 	.word	0x0801afb0
 800d76c:	0801afa8 	.word	0x0801afa8

0800d770 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d770:	b084      	sub	sp, #16
 800d772:	4684      	mov	ip, r0
 800d774:	b500      	push	{lr}
 800d776:	b083      	sub	sp, #12
 800d778:	f10d 0e14 	add.w	lr, sp, #20
 800d77c:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d782:	2b01      	cmp	r3, #1
 800d784:	d13d      	bne.n	800d802 <USB_CoreInit+0x92>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d786:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d788:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800d78c:	9911      	ldr	r1, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d78e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800d792:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d794:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d796:	68c2      	ldr	r2, [r0, #12]
 800d798:	ea03 0302 	and.w	r3, r3, r2
 800d79c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d79e:	68c3      	ldr	r3, [r0, #12]
 800d7a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d7a4:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800d7a6:	d078      	beq.n	800d89a <USB_CoreInit+0x12a>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 800d7a8:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d7aa:	4a3e      	ldr	r2, [pc, #248]	; (800d8a4 <USB_CoreInit+0x134>)
  __IO uint32_t count = 0U;
 800d7ac:	9300      	str	r3, [sp, #0]
 800d7ae:	e003      	b.n	800d7b8 <USB_CoreInit+0x48>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d7b0:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	db3f      	blt.n	800d838 <USB_CoreInit+0xc8>
    if (++count > 200000U)
 800d7b8:	9b00      	ldr	r3, [sp, #0]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	9300      	str	r3, [sp, #0]
 800d7c0:	d9f6      	bls.n	800d7b0 <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 800d7c2:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 800d7c4:	9b08      	ldr	r3, [sp, #32]
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d116      	bne.n	800d7f8 <USB_CoreInit+0x88>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d7ca:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d7ce:	4b36      	ldr	r3, [pc, #216]	; (800d8a8 <USB_CoreInit+0x138>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d7d0:	b292      	uxth	r2, r2
 800d7d2:	f8cc 205c 	str.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d7d6:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d7e0:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800d7e4:	f043 0306 	orr.w	r3, r3, #6
 800d7e8:	f8cc 3008 	str.w	r3, [ip, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d7ec:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800d7f0:	f043 0320 	orr.w	r3, r3, #32
 800d7f4:	f8cc 3008 	str.w	r3, [ip, #8]
}
 800d7f8:	b003      	add	sp, #12
 800d7fa:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7fe:	b004      	add	sp, #16
 800d800:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d802:	68c3      	ldr	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800d804:	2100      	movs	r1, #0
    if (++count > 200000U)
 800d806:	4a27      	ldr	r2, [pc, #156]	; (800d8a4 <USB_CoreInit+0x134>)
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d80c:	60c3      	str	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800d80e:	9101      	str	r1, [sp, #4]
 800d810:	e003      	b.n	800d81a <USB_CoreInit+0xaa>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d812:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800d816:	2b00      	cmp	r3, #0
 800d818:	db2a      	blt.n	800d870 <USB_CoreInit+0x100>
    if (++count > 200000U)
 800d81a:	9b01      	ldr	r3, [sp, #4]
 800d81c:	3301      	adds	r3, #1
 800d81e:	4293      	cmp	r3, r2
 800d820:	9301      	str	r3, [sp, #4]
 800d822:	d9f6      	bls.n	800d812 <USB_CoreInit+0xa2>
      return HAL_TIMEOUT;
 800d824:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 800d826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d828:	b9db      	cbnz	r3, 800d862 <USB_CoreInit+0xf2>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d82a:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800d82e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d832:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800d836:	e7c5      	b.n	800d7c4 <USB_CoreInit+0x54>

  /* Core Soft Reset */
  count = 0U;
 800d838:	2300      	movs	r3, #0
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;

  do
  {
    if (++count > 200000U)
 800d83a:	4a1a      	ldr	r2, [pc, #104]	; (800d8a4 <USB_CoreInit+0x134>)
  count = 0U;
 800d83c:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d83e:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800d842:	f043 0301 	orr.w	r3, r3, #1
 800d846:	f8cc 3010 	str.w	r3, [ip, #16]
 800d84a:	e004      	b.n	800d856 <USB_CoreInit+0xe6>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d84c:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800d850:	f010 0001 	ands.w	r0, r0, #1
 800d854:	d0b6      	beq.n	800d7c4 <USB_CoreInit+0x54>
    if (++count > 200000U)
 800d856:	9b00      	ldr	r3, [sp, #0]
 800d858:	3301      	adds	r3, #1
 800d85a:	4293      	cmp	r3, r2
 800d85c:	9300      	str	r3, [sp, #0]
 800d85e:	d9f5      	bls.n	800d84c <USB_CoreInit+0xdc>
 800d860:	e7af      	b.n	800d7c2 <USB_CoreInit+0x52>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d862:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800d866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d86a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800d86e:	e7a9      	b.n	800d7c4 <USB_CoreInit+0x54>
  count = 0U;
 800d870:	2300      	movs	r3, #0
    if (++count > 200000U)
 800d872:	4a0c      	ldr	r2, [pc, #48]	; (800d8a4 <USB_CoreInit+0x134>)
  count = 0U;
 800d874:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d876:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800d87a:	f043 0301 	orr.w	r3, r3, #1
 800d87e:	f8cc 3010 	str.w	r3, [ip, #16]
 800d882:	e004      	b.n	800d88e <USB_CoreInit+0x11e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d884:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800d888:	f010 0001 	ands.w	r0, r0, #1
 800d88c:	d0cb      	beq.n	800d826 <USB_CoreInit+0xb6>
    if (++count > 200000U)
 800d88e:	9b01      	ldr	r3, [sp, #4]
 800d890:	3301      	adds	r3, #1
 800d892:	4293      	cmp	r3, r2
 800d894:	9301      	str	r3, [sp, #4]
 800d896:	d9f5      	bls.n	800d884 <USB_CoreInit+0x114>
 800d898:	e7c4      	b.n	800d824 <USB_CoreInit+0xb4>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d89a:	68c3      	ldr	r3, [r0, #12]
 800d89c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8a0:	60c3      	str	r3, [r0, #12]
 800d8a2:	e781      	b.n	800d7a8 <USB_CoreInit+0x38>
 800d8a4:	00030d40 	.word	0x00030d40
 800d8a8:	03ee0000 	.word	0x03ee0000

0800d8ac <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800d8ac:	2a02      	cmp	r2, #2
{
 800d8ae:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 800d8b0:	d00b      	beq.n	800d8ca <USB_SetTurnaroundTime+0x1e>
 800d8b2:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d8b6:	68d9      	ldr	r1, [r3, #12]
}
 800d8b8:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d8ba:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800d8be:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d8c0:	68da      	ldr	r2, [r3, #12]
 800d8c2:	ea42 020c 	orr.w	r2, r2, ip
 800d8c6:	60da      	str	r2, [r3, #12]
}
 800d8c8:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d8ca:	4a23      	ldr	r2, [pc, #140]	; (800d958 <USB_SetTurnaroundTime+0xac>)
 800d8cc:	4823      	ldr	r0, [pc, #140]	; (800d95c <USB_SetTurnaroundTime+0xb0>)
 800d8ce:	440a      	add	r2, r1
 800d8d0:	4282      	cmp	r2, r0
 800d8d2:	d92c      	bls.n	800d92e <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d8d4:	4a22      	ldr	r2, [pc, #136]	; (800d960 <USB_SetTurnaroundTime+0xb4>)
 800d8d6:	4823      	ldr	r0, [pc, #140]	; (800d964 <USB_SetTurnaroundTime+0xb8>)
 800d8d8:	440a      	add	r2, r1
 800d8da:	4282      	cmp	r2, r0
 800d8dc:	d92a      	bls.n	800d934 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d8de:	4a22      	ldr	r2, [pc, #136]	; (800d968 <USB_SetTurnaroundTime+0xbc>)
 800d8e0:	4822      	ldr	r0, [pc, #136]	; (800d96c <USB_SetTurnaroundTime+0xc0>)
 800d8e2:	440a      	add	r2, r1
 800d8e4:	4282      	cmp	r2, r0
 800d8e6:	d928      	bls.n	800d93a <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d8e8:	4a21      	ldr	r2, [pc, #132]	; (800d970 <USB_SetTurnaroundTime+0xc4>)
 800d8ea:	4822      	ldr	r0, [pc, #136]	; (800d974 <USB_SetTurnaroundTime+0xc8>)
 800d8ec:	440a      	add	r2, r1
 800d8ee:	4282      	cmp	r2, r0
 800d8f0:	d326      	bcc.n	800d940 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d8f2:	4a21      	ldr	r2, [pc, #132]	; (800d978 <USB_SetTurnaroundTime+0xcc>)
 800d8f4:	4821      	ldr	r0, [pc, #132]	; (800d97c <USB_SetTurnaroundTime+0xd0>)
 800d8f6:	440a      	add	r2, r1
 800d8f8:	4282      	cmp	r2, r0
 800d8fa:	d924      	bls.n	800d946 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d8fc:	4a20      	ldr	r2, [pc, #128]	; (800d980 <USB_SetTurnaroundTime+0xd4>)
 800d8fe:	4821      	ldr	r0, [pc, #132]	; (800d984 <USB_SetTurnaroundTime+0xd8>)
 800d900:	440a      	add	r2, r1
 800d902:	4282      	cmp	r2, r0
 800d904:	d322      	bcc.n	800d94c <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d906:	4a20      	ldr	r2, [pc, #128]	; (800d988 <USB_SetTurnaroundTime+0xdc>)
 800d908:	4820      	ldr	r0, [pc, #128]	; (800d98c <USB_SetTurnaroundTime+0xe0>)
 800d90a:	440a      	add	r2, r1
 800d90c:	4282      	cmp	r2, r0
 800d90e:	d3d0      	bcc.n	800d8b2 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d910:	4a1f      	ldr	r2, [pc, #124]	; (800d990 <USB_SetTurnaroundTime+0xe4>)
 800d912:	4820      	ldr	r0, [pc, #128]	; (800d994 <USB_SetTurnaroundTime+0xe8>)
 800d914:	440a      	add	r2, r1
 800d916:	4282      	cmp	r2, r0
 800d918:	d31b      	bcc.n	800d952 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d91a:	4a1f      	ldr	r2, [pc, #124]	; (800d998 <USB_SetTurnaroundTime+0xec>)
 800d91c:	481f      	ldr	r0, [pc, #124]	; (800d99c <USB_SetTurnaroundTime+0xf0>)
 800d91e:	440a      	add	r2, r1
 800d920:	4282      	cmp	r2, r0
 800d922:	bf34      	ite	cc
 800d924:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 800d928:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 800d92c:	e7c3      	b.n	800d8b6 <USB_SetTurnaroundTime+0xa>
 800d92e:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 800d932:	e7c0      	b.n	800d8b6 <USB_SetTurnaroundTime+0xa>
 800d934:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 800d938:	e7bd      	b.n	800d8b6 <USB_SetTurnaroundTime+0xa>
 800d93a:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 800d93e:	e7ba      	b.n	800d8b6 <USB_SetTurnaroundTime+0xa>
 800d940:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 800d944:	e7b7      	b.n	800d8b6 <USB_SetTurnaroundTime+0xa>
 800d946:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 800d94a:	e7b4      	b.n	800d8b6 <USB_SetTurnaroundTime+0xa>
 800d94c:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 800d950:	e7b1      	b.n	800d8b6 <USB_SetTurnaroundTime+0xa>
 800d952:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 800d956:	e7ae      	b.n	800d8b6 <USB_SetTurnaroundTime+0xa>
 800d958:	ff275340 	.word	0xff275340
 800d95c:	000c34ff 	.word	0x000c34ff
 800d960:	ff1b1e40 	.word	0xff1b1e40
 800d964:	000f423f 	.word	0x000f423f
 800d968:	ff0bdc00 	.word	0xff0bdc00
 800d96c:	00124f7f 	.word	0x00124f7f
 800d970:	fef98c80 	.word	0xfef98c80
 800d974:	0013d620 	.word	0x0013d620
 800d978:	fee5b660 	.word	0xfee5b660
 800d97c:	0016e35f 	.word	0x0016e35f
 800d980:	feced300 	.word	0xfeced300
 800d984:	001b7740 	.word	0x001b7740
 800d988:	feb35bc0 	.word	0xfeb35bc0
 800d98c:	002191c0 	.word	0x002191c0
 800d990:	fe91ca00 	.word	0xfe91ca00
 800d994:	00387520 	.word	0x00387520
 800d998:	fe5954e0 	.word	0xfe5954e0
 800d99c:	00419ce0 	.word	0x00419ce0

0800d9a0 <USB_EnableGlobalInt>:
{
 800d9a0:	4603      	mov	r3, r0
}
 800d9a2:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d9a4:	689a      	ldr	r2, [r3, #8]
 800d9a6:	f042 0201 	orr.w	r2, r2, #1
 800d9aa:	609a      	str	r2, [r3, #8]
}
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop

0800d9b0 <USB_DisableGlobalInt>:
{
 800d9b0:	4603      	mov	r3, r0
}
 800d9b2:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d9b4:	689a      	ldr	r2, [r3, #8]
 800d9b6:	f022 0201 	bic.w	r2, r2, #1
 800d9ba:	609a      	str	r2, [r3, #8]
}
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop

0800d9c0 <USB_SetCurrentMode>:
{
 800d9c0:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d9c2:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800d9c4:	2901      	cmp	r1, #1
{
 800d9c6:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d9c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d9cc:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800d9ce:	d017      	beq.n	800da00 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 800d9d0:	b9a1      	cbnz	r1, 800d9fc <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d9d2:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800d9d4:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d9d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d9da:	60c3      	str	r3, [r0, #12]
 800d9dc:	e001      	b.n	800d9e2 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d9de:	2c32      	cmp	r4, #50	; 0x32
 800d9e0:	d00c      	beq.n	800d9fc <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800d9e2:	2001      	movs	r0, #1
      ms++;
 800d9e4:	4404      	add	r4, r0
      HAL_Delay(1U);
 800d9e6:	f7f8 fe09 	bl	80065fc <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800d9ea:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d9ec:	07db      	lsls	r3, r3, #31
 800d9ee:	d4f6      	bmi.n	800d9de <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 800d9f0:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800d9f4:	fab0 f080 	clz	r0, r0
 800d9f8:	0940      	lsrs	r0, r0, #5
}
 800d9fa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d9fc:	2001      	movs	r0, #1
}
 800d9fe:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800da00:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800da02:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800da04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800da08:	60c3      	str	r3, [r0, #12]
 800da0a:	e001      	b.n	800da10 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800da0c:	2c32      	cmp	r4, #50	; 0x32
 800da0e:	d0f5      	beq.n	800d9fc <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800da10:	2001      	movs	r0, #1
      ms++;
 800da12:	4404      	add	r4, r0
      HAL_Delay(1U);
 800da14:	f7f8 fdf2 	bl	80065fc <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800da18:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800da1a:	07da      	lsls	r2, r3, #31
 800da1c:	d5f6      	bpl.n	800da0c <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 800da1e:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800da22:	fab0 f080 	clz	r0, r0
 800da26:	0940      	lsrs	r0, r0, #5
 800da28:	e7e7      	b.n	800d9fa <USB_SetCurrentMode+0x3a>
 800da2a:	bf00      	nop

0800da2c <USB_DevInit>:
{
 800da2c:	b084      	sub	sp, #16
 800da2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da32:	b083      	sub	sp, #12
 800da34:	ac0b      	add	r4, sp, #44	; 0x2c
 800da36:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 800da3a:	2300      	movs	r3, #0
 800da3c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800da3e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800da42:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800da46:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 800da4a:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 800da4e:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800da52:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800da56:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 800da5a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 800da5e:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 800da62:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 800da66:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 800da6a:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 800da6e:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 800da72:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 800da76:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 800da7a:	2c00      	cmp	r4, #0
 800da7c:	f040 80a8 	bne.w	800dbd0 <USB_DevInit+0x1a4>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800da80:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800da84:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
 800da88:	f043 0302 	orr.w	r3, r3, #2
 800da8c:	f8cc 3004 	str.w	r3, [ip, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800da90:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800da92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800da96:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800da98:	6803      	ldr	r3, [r0, #0]
 800da9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da9e:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800daa0:	6803      	ldr	r3, [r0, #0]
 800daa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800daa6:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 800daa8:	2300      	movs	r3, #0
 800daaa:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800daae:	f8dc 3000 	ldr.w	r3, [ip]
 800dab2:	f8cc 3000 	str.w	r3, [ip]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dab6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dab8:	2b01      	cmp	r3, #1
 800daba:	f000 80b0 	beq.w	800dc1e <USB_DevInit+0x1f2>
  USBx_DEVICE->DCFG |= speed;
 800dabe:	f8dc 3000 	ldr.w	r3, [ip]
 800dac2:	f043 0303 	orr.w	r3, r3, #3
 800dac6:	f8cc 3000 	str.w	r3, [ip]
  __IO uint32_t count = 0U;
 800daca:	2300      	movs	r3, #0
    if (++count > 200000U)
 800dacc:	4a5c      	ldr	r2, [pc, #368]	; (800dc40 <USB_DevInit+0x214>)
  __IO uint32_t count = 0U;
 800dace:	9300      	str	r3, [sp, #0]
 800dad0:	e003      	b.n	800dada <USB_DevInit+0xae>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dad2:	6903      	ldr	r3, [r0, #16]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f2c0 8091 	blt.w	800dbfc <USB_DevInit+0x1d0>
    if (++count > 200000U)
 800dada:	9b00      	ldr	r3, [sp, #0]
 800dadc:	3301      	adds	r3, #1
 800dade:	4293      	cmp	r3, r2
 800dae0:	9300      	str	r3, [sp, #0]
 800dae2:	d9f6      	bls.n	800dad2 <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 800dae4:	f04f 0e01 	mov.w	lr, #1
  __IO uint32_t count = 0U;
 800dae8:	2300      	movs	r3, #0
    if (++count > 200000U)
 800daea:	4a55      	ldr	r2, [pc, #340]	; (800dc40 <USB_DevInit+0x214>)
  __IO uint32_t count = 0U;
 800daec:	9301      	str	r3, [sp, #4]
 800daee:	e002      	b.n	800daf6 <USB_DevInit+0xca>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800daf0:	6903      	ldr	r3, [r0, #16]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	db73      	blt.n	800dbde <USB_DevInit+0x1b2>
    if (++count > 200000U)
 800daf6:	9b01      	ldr	r3, [sp, #4]
 800daf8:	3301      	adds	r3, #1
 800dafa:	4293      	cmp	r3, r2
 800dafc:	9301      	str	r3, [sp, #4]
 800dafe:	d9f7      	bls.n	800daf0 <USB_DevInit+0xc4>
    ret = HAL_ERROR;
 800db00:	f04f 0e01 	mov.w	lr, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800db04:	2200      	movs	r2, #0
 800db06:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800db0a:	f8cc 2014 	str.w	r2, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800db0e:	f8cc 201c 	str.w	r2, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db12:	b1d1      	cbz	r1, 800db4a <USB_DevInit+0x11e>
 800db14:	f500 6310 	add.w	r3, r0, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800db18:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800db1c:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800db20:	4616      	mov	r6, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800db22:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 800db26:	e006      	b.n	800db36 <USB_DevInit+0x10a>
      USBx_INEP(i)->DIEPCTL = 0U;
 800db28:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db2a:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800db2c:	611e      	str	r6, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800db2e:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db30:	3320      	adds	r3, #32
 800db32:	4291      	cmp	r1, r2
 800db34:	d030      	beq.n	800db98 <USB_DevInit+0x16c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800db36:	681d      	ldr	r5, [r3, #0]
 800db38:	2d00      	cmp	r5, #0
 800db3a:	daf5      	bge.n	800db28 <USB_DevInit+0xfc>
      if (i == 0U)
 800db3c:	b112      	cbz	r2, 800db44 <USB_DevInit+0x118>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800db3e:	f8c3 8000 	str.w	r8, [r3]
 800db42:	e7f2      	b.n	800db2a <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800db44:	f8c3 9000 	str.w	r9, [r3]
 800db48:	e7ef      	b.n	800db2a <USB_DevInit+0xfe>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800db4a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 800db4e:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800db50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db54:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800db58:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 800db5c:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800db5e:	6143      	str	r3, [r0, #20]
  if (cfg.dma_enable == 0U)
 800db60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db62:	b91b      	cbnz	r3, 800db6c <USB_DevInit+0x140>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800db64:	6983      	ldr	r3, [r0, #24]
 800db66:	f043 0310 	orr.w	r3, r3, #16
 800db6a:	6183      	str	r3, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800db6c:	6982      	ldr	r2, [r0, #24]
 800db6e:	4b35      	ldr	r3, [pc, #212]	; (800dc44 <USB_DevInit+0x218>)
 800db70:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 800db72:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800db74:	6183      	str	r3, [r0, #24]
  if (cfg.Sof_enable != 0U)
 800db76:	b11a      	cbz	r2, 800db80 <USB_DevInit+0x154>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800db78:	6983      	ldr	r3, [r0, #24]
 800db7a:	f043 0308 	orr.w	r3, r3, #8
 800db7e:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800db80:	2c01      	cmp	r4, #1
 800db82:	d103      	bne.n	800db8c <USB_DevInit+0x160>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800db84:	6982      	ldr	r2, [r0, #24]
 800db86:	4b30      	ldr	r3, [pc, #192]	; (800dc48 <USB_DevInit+0x21c>)
 800db88:	4313      	orrs	r3, r2
 800db8a:	6183      	str	r3, [r0, #24]
}
 800db8c:	4670      	mov	r0, lr
 800db8e:	b003      	add	sp, #12
 800db90:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db94:	b004      	add	sp, #16
 800db96:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db98:	2200      	movs	r2, #0
 800db9a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800db9e:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dba2:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dba6:	4616      	mov	r6, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dba8:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 800dbac:	e006      	b.n	800dbbc <USB_DevInit+0x190>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dbae:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dbb0:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dbb2:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dbb4:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dbb6:	3320      	adds	r3, #32
 800dbb8:	4291      	cmp	r1, r2
 800dbba:	d0c6      	beq.n	800db4a <USB_DevInit+0x11e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dbbc:	681d      	ldr	r5, [r3, #0]
 800dbbe:	2d00      	cmp	r5, #0
 800dbc0:	daf5      	bge.n	800dbae <USB_DevInit+0x182>
      if (i == 0U)
 800dbc2:	b112      	cbz	r2, 800dbca <USB_DevInit+0x19e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dbc4:	f8c3 8000 	str.w	r8, [r3]
 800dbc8:	e7f2      	b.n	800dbb0 <USB_DevInit+0x184>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dbca:	f8c3 9000 	str.w	r9, [r3]
 800dbce:	e7ef      	b.n	800dbb0 <USB_DevInit+0x184>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dbd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dbd2:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dbd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dbda:	6383      	str	r3, [r0, #56]	; 0x38
 800dbdc:	e764      	b.n	800daa8 <USB_DevInit+0x7c>
  count = 0U;
 800dbde:	2300      	movs	r3, #0
    if (++count > 200000U)
 800dbe0:	4a17      	ldr	r2, [pc, #92]	; (800dc40 <USB_DevInit+0x214>)
  count = 0U;
 800dbe2:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dbe4:	2310      	movs	r3, #16
 800dbe6:	6103      	str	r3, [r0, #16]
 800dbe8:	e002      	b.n	800dbf0 <USB_DevInit+0x1c4>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dbea:	6903      	ldr	r3, [r0, #16]
 800dbec:	06db      	lsls	r3, r3, #27
 800dbee:	d589      	bpl.n	800db04 <USB_DevInit+0xd8>
    if (++count > 200000U)
 800dbf0:	9b01      	ldr	r3, [sp, #4]
 800dbf2:	3301      	adds	r3, #1
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	9301      	str	r3, [sp, #4]
 800dbf8:	d9f7      	bls.n	800dbea <USB_DevInit+0x1be>
 800dbfa:	e781      	b.n	800db00 <USB_DevInit+0xd4>
  count = 0U;
 800dbfc:	2300      	movs	r3, #0
    if (++count > 200000U)
 800dbfe:	4a10      	ldr	r2, [pc, #64]	; (800dc40 <USB_DevInit+0x214>)
  count = 0U;
 800dc00:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dc02:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800dc06:	6103      	str	r3, [r0, #16]
 800dc08:	e003      	b.n	800dc12 <USB_DevInit+0x1e6>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dc0a:	6903      	ldr	r3, [r0, #16]
 800dc0c:	f013 0320 	ands.w	r3, r3, #32
 800dc10:	d00c      	beq.n	800dc2c <USB_DevInit+0x200>
    if (++count > 200000U)
 800dc12:	9b00      	ldr	r3, [sp, #0]
 800dc14:	3301      	adds	r3, #1
 800dc16:	4293      	cmp	r3, r2
 800dc18:	9300      	str	r3, [sp, #0]
 800dc1a:	d9f6      	bls.n	800dc0a <USB_DevInit+0x1de>
 800dc1c:	e762      	b.n	800dae4 <USB_DevInit+0xb8>
    if (cfg.speed == USBD_HS_SPEED)
 800dc1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc20:	b933      	cbnz	r3, 800dc30 <USB_DevInit+0x204>
  USBx_DEVICE->DCFG |= speed;
 800dc22:	f8dc 3000 	ldr.w	r3, [ip]
 800dc26:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 800dc2a:	e74e      	b.n	800daca <USB_DevInit+0x9e>
  HAL_StatusTypeDef ret = HAL_OK;
 800dc2c:	469e      	mov	lr, r3
 800dc2e:	e75b      	b.n	800dae8 <USB_DevInit+0xbc>
  USBx_DEVICE->DCFG |= speed;
 800dc30:	f8dc 3000 	ldr.w	r3, [ip]
 800dc34:	f043 0301 	orr.w	r3, r3, #1
 800dc38:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 800dc3c:	e745      	b.n	800daca <USB_DevInit+0x9e>
 800dc3e:	bf00      	nop
 800dc40:	00030d40 	.word	0x00030d40
 800dc44:	803c3800 	.word	0x803c3800
 800dc48:	40000004 	.word	0x40000004

0800dc4c <USB_FlushTxFifo>:
{
 800dc4c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800dc4e:	2300      	movs	r3, #0
    if (++count > 200000U)
 800dc50:	4a11      	ldr	r2, [pc, #68]	; (800dc98 <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 800dc52:	9301      	str	r3, [sp, #4]
 800dc54:	e002      	b.n	800dc5c <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dc56:	6903      	ldr	r3, [r0, #16]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	db07      	blt.n	800dc6c <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 800dc5c:	9b01      	ldr	r3, [sp, #4]
 800dc5e:	3301      	adds	r3, #1
 800dc60:	4293      	cmp	r3, r2
 800dc62:	9301      	str	r3, [sp, #4]
 800dc64:	d9f7      	bls.n	800dc56 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 800dc66:	2003      	movs	r0, #3
}
 800dc68:	b002      	add	sp, #8
 800dc6a:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dc6c:	0189      	lsls	r1, r1, #6
  count = 0U;
 800dc6e:	2300      	movs	r3, #0
    if (++count > 200000U)
 800dc70:	4a09      	ldr	r2, [pc, #36]	; (800dc98 <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dc72:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800dc76:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dc78:	6101      	str	r1, [r0, #16]
 800dc7a:	e003      	b.n	800dc84 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dc7c:	6903      	ldr	r3, [r0, #16]
 800dc7e:	f013 0320 	ands.w	r3, r3, #32
 800dc82:	d005      	beq.n	800dc90 <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 800dc84:	9b01      	ldr	r3, [sp, #4]
 800dc86:	3301      	adds	r3, #1
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	9301      	str	r3, [sp, #4]
 800dc8c:	d9f6      	bls.n	800dc7c <USB_FlushTxFifo+0x30>
 800dc8e:	e7ea      	b.n	800dc66 <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 800dc90:	4618      	mov	r0, r3
}
 800dc92:	b002      	add	sp, #8
 800dc94:	4770      	bx	lr
 800dc96:	bf00      	nop
 800dc98:	00030d40 	.word	0x00030d40

0800dc9c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dc9c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800dca0:	f013 0006 	ands.w	r0, r3, #6
 800dca4:	d004      	beq.n	800dcb0 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 800dca6:	f013 0f02 	tst.w	r3, #2
 800dcaa:	bf14      	ite	ne
 800dcac:	2002      	movne	r0, #2
 800dcae:	200f      	moveq	r0, #15
}
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop

0800dcb4 <USB_ActivateEndpoint>:
{
 800dcb4:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800dcb6:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800dcb8:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d020      	beq.n	800dd00 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dcbe:	f002 0c0f 	and.w	ip, r2, #15
 800dcc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dcc6:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dcca:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dcce:	fa03 f30c 	lsl.w	r3, r3, ip
 800dcd2:	4323      	orrs	r3, r4
 800dcd4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dcd8:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800dcdc:	041b      	lsls	r3, r3, #16
 800dcde:	d40c      	bmi.n	800dcfa <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dce0:	688b      	ldr	r3, [r1, #8]
 800dce2:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 800dce6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dcea:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dcec:	4914      	ldr	r1, [pc, #80]	; (800dd40 <USB_ActivateEndpoint+0x8c>)
 800dcee:	4323      	orrs	r3, r4
 800dcf0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 800dcf4:	4319      	orrs	r1, r3
 800dcf6:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 800dcfa:	2000      	movs	r0, #0
 800dcfc:	bc30      	pop	{r4, r5}
 800dcfe:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dd00:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800dd04:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800dd08:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dd0c:	40ab      	lsls	r3, r5
 800dd0e:	69e5      	ldr	r5, [r4, #28]
 800dd10:	432b      	orrs	r3, r5
 800dd12:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800dd14:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800dd18:	041c      	lsls	r4, r3, #16
 800dd1a:	d4ee      	bmi.n	800dcfa <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dd1c:	688b      	ldr	r3, [r1, #8]
 800dd1e:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 800dd22:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dd26:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dd28:	4905      	ldr	r1, [pc, #20]	; (800dd40 <USB_ActivateEndpoint+0x8c>)
 800dd2a:	432b      	orrs	r3, r5
 800dd2c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800dd30:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800dd34:	4311      	orrs	r1, r2
}
 800dd36:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dd38:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 800dd3c:	2000      	movs	r0, #0
 800dd3e:	4770      	bx	lr
 800dd40:	10008000 	.word	0x10008000

0800dd44 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 800dd44:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800dd46:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800dd48:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dd4a:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800dd4e:	d02a      	beq.n	800dda6 <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd50:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800dd54:	2a00      	cmp	r2, #0
 800dd56:	db19      	blt.n	800dd8c <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dd58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800dd5c:	f003 030f 	and.w	r3, r3, #15
 800dd60:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800dd64:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800dd68:	4a23      	ldr	r2, [pc, #140]	; (800ddf8 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dd6a:	ea21 0103 	bic.w	r1, r1, r3
 800dd6e:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dd72:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800dd76:	ea21 0303 	bic.w	r3, r1, r3
 800dd7a:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800dd7e:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800dd80:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 800dd84:	401a      	ands	r2, r3
 800dd86:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 800dd8a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800dd8c:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800dd90:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800dd94:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800dd98:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800dd9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800dda0:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 800dda4:	e7d8      	b.n	800dd58 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dda6:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800ddaa:	2a00      	cmp	r2, #0
 800ddac:	da0b      	bge.n	800ddc6 <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ddae:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800ddb2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800ddb6:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ddba:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800ddbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ddc2:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ddc6:	f003 020f 	and.w	r2, r3, #15
 800ddca:	2301      	movs	r3, #1
 800ddcc:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800ddd0:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ddd2:	4a0a      	ldr	r2, [pc, #40]	; (800ddfc <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ddd4:	ea21 0103 	bic.w	r1, r1, r3
 800ddd8:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dddc:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800dde0:	ea21 0303 	bic.w	r3, r1, r3
 800dde4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800dde8:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ddea:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 800ddee:	401a      	ands	r2, r3
 800ddf0:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	eff37800 	.word	0xeff37800
 800ddfc:	ec337800 	.word	0xec337800

0800de00 <USB_EPStartXfer>:
{
 800de00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 800de04:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800de06:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d051      	beq.n	800deb2 <USB_EPStartXfer+0xb2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800de0e:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 800de12:	4c84      	ldr	r4, [pc, #528]	; (800e024 <USB_EPStartXfer+0x224>)
 800de14:	f8dc 5b10 	ldr.w	r5, [ip, #2832]	; 0xb10
 800de18:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 800de1c:	402c      	ands	r4, r5
 800de1e:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800de20:	4c81      	ldr	r4, [pc, #516]	; (800e028 <USB_EPStartXfer+0x228>)
 800de22:	691d      	ldr	r5, [r3, #16]
 800de24:	402c      	ands	r4, r5
 800de26:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 800de28:	694c      	ldr	r4, [r1, #20]
 800de2a:	b384      	cbz	r4, 800de8e <USB_EPStartXfer+0x8e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800de2c:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 800de2e:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800de30:	4e7e      	ldr	r6, [pc, #504]	; (800e02c <USB_EPStartXfer+0x22c>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800de32:	442c      	add	r4, r5
 800de34:	f104 34ff 	add.w	r4, r4, #4294967295
 800de38:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800de3c:	ea06 4ec4 	and.w	lr, r6, r4, lsl #19
 800de40:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800de42:	fb05 f404 	mul.w	r4, r5, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800de46:	691d      	ldr	r5, [r3, #16]
 800de48:	ea4e 0505 	orr.w	r5, lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800de4c:	f3c4 0412 	ubfx	r4, r4, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800de50:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800de52:	691d      	ldr	r5, [r3, #16]
 800de54:	ea44 0405 	orr.w	r4, r4, r5
 800de58:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800de5a:	d025      	beq.n	800dea8 <USB_EPStartXfer+0xa8>
    if (ep->type == EP_TYPE_ISOC)
 800de5c:	78cb      	ldrb	r3, [r1, #3]
 800de5e:	2b01      	cmp	r3, #1
 800de60:	d10c      	bne.n	800de7c <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800de62:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800de66:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800de6a:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 800de6e:	bf0c      	ite	eq
 800de70:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800de74:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800de78:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800de7c:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 800de80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de84:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 800de88:	2000      	movs	r0, #0
 800de8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800de8e:	688c      	ldr	r4, [r1, #8]
    if (dma == 1U)
 800de90:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800de92:	691d      	ldr	r5, [r3, #16]
 800de94:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800de98:	ea44 0405 	orr.w	r4, r4, r5
 800de9c:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800de9e:	691c      	ldr	r4, [r3, #16]
 800dea0:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800dea4:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800dea6:	d1d9      	bne.n	800de5c <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 800dea8:	68ca      	ldr	r2, [r1, #12]
 800deaa:	2a00      	cmp	r2, #0
 800deac:	d0d6      	beq.n	800de5c <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800deae:	615a      	str	r2, [r3, #20]
 800deb0:	e7d4      	b.n	800de5c <USB_EPStartXfer+0x5c>
    if (ep->xfer_len == 0U)
 800deb2:	694d      	ldr	r5, [r1, #20]
 800deb4:	2d00      	cmp	r5, #0
 800deb6:	d03d      	beq.n	800df34 <USB_EPStartXfer+0x134>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800deb8:	eb00 144c 	add.w	r4, r0, ip, lsl #5
 800debc:	4e59      	ldr	r6, [pc, #356]	; (800e024 <USB_EPStartXfer+0x224>)
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800debe:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dec2:	f8d4 8910 	ldr.w	r8, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dec6:	4f58      	ldr	r7, [pc, #352]	; (800e028 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dec8:	ea08 0606 	and.w	r6, r8, r6
 800decc:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ded0:	eb05 060e 	add.w	r6, r5, lr
 800ded4:	3e01      	subs	r6, #1
 800ded6:	fbb6 fefe 	udiv	lr, r6, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800deda:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800dede:	4037      	ands	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800dee0:	4e52      	ldr	r6, [pc, #328]	; (800e02c <USB_EPStartXfer+0x22c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dee2:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800dee6:	ea06 46ce 	and.w	r6, r6, lr, lsl #19
 800deea:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 800deee:	433e      	orrs	r6, r7
 800def0:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800def4:	f3c5 0612 	ubfx	r6, r5, #0, #19
 800def8:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 800defc:	433e      	orrs	r6, r7
 800defe:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800df02:	f504 6610 	add.w	r6, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800df06:	f891 e003 	ldrb.w	lr, [r1, #3]
 800df0a:	f1be 0f01 	cmp.w	lr, #1
 800df0e:	d057      	beq.n	800dfc0 <USB_EPStartXfer+0x1c0>
    if (dma == 1U)
 800df10:	2a01      	cmp	r2, #1
 800df12:	d072      	beq.n	800dffa <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800df14:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800df18:	f00c 0c0f 	and.w	ip, ip, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800df1c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800df20:	fa03 f30c 	lsl.w	r3, r3, ip
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800df24:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800df28:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800df2c:	4313      	orrs	r3, r2
 800df2e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 800df32:	e7a9      	b.n	800de88 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800df34:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 800df38:	4e3b      	ldr	r6, [pc, #236]	; (800e028 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800df3a:	4c3a      	ldr	r4, [pc, #232]	; (800e024 <USB_EPStartXfer+0x224>)
    if (dma == 1U)
 800df3c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800df3e:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 800df42:	ea06 0607 	and.w	r6, r6, r7
 800df46:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800df4a:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 800df4e:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800df52:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800df56:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 800df5a:	ea04 0406 	and.w	r4, r4, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800df5e:	f503 6610 	add.w	r6, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800df62:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 800df66:	f891 e003 	ldrb.w	lr, [r1, #3]
    if (dma == 1U)
 800df6a:	d03a      	beq.n	800dfe2 <USB_EPStartXfer+0x1e2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800df6c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800df70:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800df74:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800df78:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800df7c:	d184      	bne.n	800de88 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800df7e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800df82:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800df86:	6833      	ldr	r3, [r6, #0]
 800df88:	bf0c      	ite	eq
 800df8a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800df8e:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800df92:	6033      	str	r3, [r6, #0]
  if (dma == 0U)
 800df94:	2a00      	cmp	r2, #0
 800df96:	f47f af77 	bne.w	800de88 <USB_EPStartXfer+0x88>
    count32b = ((uint32_t)len + 3U) / 4U;
 800df9a:	b2ad      	uxth	r5, r5
 800df9c:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 800df9e:	08ad      	lsrs	r5, r5, #2
 800dfa0:	f43f af72 	beq.w	800de88 <USB_EPStartXfer+0x88>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800dfa4:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dfa6:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 800dfaa:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 800dfae:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 800dfb2:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 800dfb6:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dfb8:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 800dfbc:	d1f9      	bne.n	800dfb2 <USB_EPStartXfer+0x1b2>
 800dfbe:	e763      	b.n	800de88 <USB_EPStartXfer+0x88>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800dfc0:	6933      	ldr	r3, [r6, #16]
    if (dma == 1U)
 800dfc2:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800dfc4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800dfc8:	6133      	str	r3, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800dfca:	6933      	ldr	r3, [r6, #16]
 800dfcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dfd0:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 800dfd2:	d017      	beq.n	800e004 <USB_EPStartXfer+0x204>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dfd4:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800dfd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dfdc:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800dfe0:	e7cd      	b.n	800df7e <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->dma_addr != 0U)
 800dfe2:	690b      	ldr	r3, [r1, #16]
 800dfe4:	b963      	cbnz	r3, 800e000 <USB_EPStartXfer+0x200>
      if (ep->type == EP_TYPE_ISOC)
 800dfe6:	f1be 0f01 	cmp.w	lr, #1
 800dfea:	d00e      	beq.n	800e00a <USB_EPStartXfer+0x20a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dfec:	6833      	ldr	r3, [r6, #0]
}
 800dfee:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dff0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dff4:	6033      	str	r3, [r6, #0]
}
 800dff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800dffa:	690b      	ldr	r3, [r1, #16]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d0f5      	beq.n	800dfec <USB_EPStartXfer+0x1ec>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e000:	6173      	str	r3, [r6, #20]
 800e002:	e7f0      	b.n	800dfe6 <USB_EPStartXfer+0x1e6>
      if ((uint32_t)ep->dma_addr != 0U)
 800e004:	690b      	ldr	r3, [r1, #16]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d1fa      	bne.n	800e000 <USB_EPStartXfer+0x200>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e00a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800e00e:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e012:	6833      	ldr	r3, [r6, #0]
 800e014:	bf0c      	ite	eq
 800e016:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e01a:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800e01e:	6033      	str	r3, [r6, #0]
 800e020:	e7e4      	b.n	800dfec <USB_EPStartXfer+0x1ec>
 800e022:	bf00      	nop
 800e024:	fff80000 	.word	0xfff80000
 800e028:	e007ffff 	.word	0xe007ffff
 800e02c:	1ff80000 	.word	0x1ff80000

0800e030 <USB_EP0StartXfer>:
{
 800e030:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800e032:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800e034:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800e036:	2c01      	cmp	r4, #1
 800e038:	d026      	beq.n	800e088 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e03a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800e03e:	4c57      	ldr	r4, [pc, #348]	; (800e19c <USB_EP0StartXfer+0x16c>)
 800e040:	f8d0 5b10 	ldr.w	r5, [r0, #2832]	; 0xb10
 800e044:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800e048:	402c      	ands	r4, r5
 800e04a:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e04c:	4c54      	ldr	r4, [pc, #336]	; (800e1a0 <USB_EP0StartXfer+0x170>)
 800e04e:	691d      	ldr	r5, [r3, #16]
 800e050:	402c      	ands	r4, r5
 800e052:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 800e054:	694c      	ldr	r4, [r1, #20]
 800e056:	b9a4      	cbnz	r4, 800e082 <USB_EP0StartXfer+0x52>
      if (ep->xfer_len > ep->maxpacket)
 800e058:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e05a:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e05c:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800e060:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e062:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800e066:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e068:	691d      	ldr	r5, [r3, #16]
 800e06a:	ea44 0405 	orr.w	r4, r4, r5
 800e06e:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800e070:	d049      	beq.n	800e106 <USB_EP0StartXfer+0xd6>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e072:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e076:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e07a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800e07e:	2000      	movs	r0, #0
 800e080:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ep->xfer_len = ep->maxpacket;
 800e082:	688c      	ldr	r4, [r1, #8]
 800e084:	614c      	str	r4, [r1, #20]
 800e086:	e7e8      	b.n	800e05a <USB_EP0StartXfer+0x2a>
    if (ep->xfer_len == 0U)
 800e088:	694c      	ldr	r4, [r1, #20]
 800e08a:	2c00      	cmp	r4, #0
 800e08c:	d040      	beq.n	800e110 <USB_EP0StartXfer+0xe0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e08e:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 800e092:	4f42      	ldr	r7, [pc, #264]	; (800e19c <USB_EP0StartXfer+0x16c>)
      if (ep->xfer_len > ep->maxpacket)
 800e094:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e098:	f8d5 c910 	ldr.w	ip, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e09c:	4e40      	ldr	r6, [pc, #256]	; (800e1a0 <USB_EP0StartXfer+0x170>)
      if (ep->xfer_len > ep->maxpacket)
 800e09e:	4574      	cmp	r4, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e0a0:	ea0c 0707 	and.w	r7, ip, r7
 800e0a4:	f505 6c10 	add.w	ip, r5, #2304	; 0x900
 800e0a8:	f8c5 7910 	str.w	r7, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e0ac:	f8d5 7910 	ldr.w	r7, [r5, #2320]	; 0x910
 800e0b0:	ea06 0607 	and.w	r6, r6, r7
 800e0b4:	f8c5 6910 	str.w	r6, [r5, #2320]	; 0x910
      if (ep->xfer_len > ep->maxpacket)
 800e0b8:	d958      	bls.n	800e16c <USB_EP0StartXfer+0x13c>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e0ba:	f8dc 4010 	ldr.w	r4, [ip, #16]
    if (dma == 1U)
 800e0be:	2a01      	cmp	r2, #1
        ep->xfer_len = ep->maxpacket;
 800e0c0:	f8c1 e014 	str.w	lr, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e0c4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800e0c8:	f8cc 4010 	str.w	r4, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e0cc:	f3ce 0412 	ubfx	r4, lr, #0, #19
 800e0d0:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800e0d4:	ea44 0406 	orr.w	r4, r4, r6
 800e0d8:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 800e0dc:	d03a      	beq.n	800e154 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e0de:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800e0e2:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800e0e6:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800e0ea:	f1be 0f00 	cmp.w	lr, #0
 800e0ee:	d0c6      	beq.n	800e07e <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e0f0:	f003 010f 	and.w	r1, r3, #15
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800e0fa:	408b      	lsls	r3, r1
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800e102:	2000      	movs	r0, #0
 800e104:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 800e106:	68ca      	ldr	r2, [r1, #12]
 800e108:	2a00      	cmp	r2, #0
 800e10a:	d0b2      	beq.n	800e072 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e10c:	615a      	str	r2, [r3, #20]
 800e10e:	e7b0      	b.n	800e072 <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e110:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800e114:	4b22      	ldr	r3, [pc, #136]	; (800e1a0 <USB_EP0StartXfer+0x170>)
    if (dma == 1U)
 800e116:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e118:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
 800e11c:	f500 6c10 	add.w	ip, r0, #2304	; 0x900
 800e120:	ea03 0304 	and.w	r3, r3, r4
 800e124:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e128:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e12c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e130:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e134:	4b19      	ldr	r3, [pc, #100]	; (800e19c <USB_EP0StartXfer+0x16c>)
 800e136:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800e13a:	ea03 0304 	and.w	r3, r3, r4
 800e13e:	f8cc 3010 	str.w	r3, [ip, #16]
    if (dma == 1U)
 800e142:	d007      	beq.n	800e154 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e144:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e148:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e14c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800e150:	2000      	movs	r0, #0
 800e152:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800e154:	690b      	ldr	r3, [r1, #16]
 800e156:	b10b      	cbz	r3, 800e15c <USB_EP0StartXfer+0x12c>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e158:	f8cc 3014 	str.w	r3, [ip, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e15c:	f8dc 3000 	ldr.w	r3, [ip]
}
 800e160:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e162:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e166:	f8cc 3000 	str.w	r3, [ip]
}
 800e16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e16c:	f8dc 6010 	ldr.w	r6, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e170:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800e174:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e176:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800e17a:	f8cc 6010 	str.w	r6, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e17e:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800e182:	ea44 0406 	orr.w	r4, r4, r6
 800e186:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 800e18a:	d0e3      	beq.n	800e154 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e18c:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800e190:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800e194:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800e198:	e7aa      	b.n	800e0f0 <USB_EP0StartXfer+0xc0>
 800e19a:	bf00      	nop
 800e19c:	fff80000 	.word	0xfff80000
 800e1a0:	e007ffff 	.word	0xe007ffff

0800e1a4 <USB_WritePacket>:
{
 800e1a4:	b410      	push	{r4}
 800e1a6:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800e1aa:	b964      	cbnz	r4, 800e1c6 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 800e1ac:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800e1ae:	089b      	lsrs	r3, r3, #2
 800e1b0:	d009      	beq.n	800e1c6 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e1b2:	3201      	adds	r2, #1
 800e1b4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e1b8:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800e1bc:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800e1c0:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e1c2:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800e1c4:	d1fa      	bne.n	800e1bc <USB_WritePacket+0x18>
}
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1cc:	4770      	bx	lr
 800e1ce:	bf00      	nop

0800e1d0 <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 800e1d0:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 800e1d4:	b570      	push	{r4, r5, r6, lr}
 800e1d6:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 800e1d8:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 800e1dc:	d01c      	beq.n	800e218 <USB_ReadPacket+0x48>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e1de:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 800e1e2:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e1e8:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 800e1ec:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e1ee:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 800e1f2:	d1f8      	bne.n	800e1e6 <USB_ReadPacket+0x16>
    pDest++;
 800e1f4:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 800e1f8:	b16e      	cbz	r6, 800e216 <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e1fa:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
      remaining_bytes--;
 800e1fe:	1e73      	subs	r3, r6, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e200:	682a      	ldr	r2, [r5, #0]
      remaining_bytes--;
 800e202:	b29b      	uxth	r3, r3
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e204:	7002      	strb	r2, [r0, #0]
    } while (remaining_bytes != 0U);
 800e206:	b12b      	cbz	r3, 800e214 <USB_ReadPacket+0x44>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e208:	0a11      	lsrs	r1, r2, #8
    } while (remaining_bytes != 0U);
 800e20a:	2b01      	cmp	r3, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e20c:	7041      	strb	r1, [r0, #1]
    } while (remaining_bytes != 0U);
 800e20e:	d001      	beq.n	800e214 <USB_ReadPacket+0x44>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e210:	0c12      	lsrs	r2, r2, #16
 800e212:	7082      	strb	r2, [r0, #2]
      pDest++;
 800e214:	4430      	add	r0, r6
}
 800e216:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 800e218:	4608      	mov	r0, r1
 800e21a:	e7ed      	b.n	800e1f8 <USB_ReadPacket+0x28>

0800e21c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800e21c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800e21e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800e220:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e222:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800e226:	d00c      	beq.n	800e242 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e228:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800e22c:	b10b      	cbz	r3, 800e232 <USB_EPSetStall+0x16>
 800e22e:	2a00      	cmp	r2, #0
 800e230:	da14      	bge.n	800e25c <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e232:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e236:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e23a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800e23e:	2000      	movs	r0, #0
 800e240:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e242:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800e246:	2a00      	cmp	r2, #0
 800e248:	db00      	blt.n	800e24c <USB_EPSetStall+0x30>
 800e24a:	b973      	cbnz	r3, 800e26a <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e24c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e250:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e254:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800e258:	2000      	movs	r0, #0
 800e25a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e25c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e260:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e264:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800e268:	e7e3      	b.n	800e232 <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e26a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e26e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e272:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e276:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e27a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e27e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800e282:	e7e9      	b.n	800e258 <USB_EPSetStall+0x3c>

0800e284 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 800e284:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800e286:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800e288:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e28a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800e28e:	d013      	beq.n	800e2b8 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e290:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e294:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e298:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e29c:	78cb      	ldrb	r3, [r1, #3]
 800e29e:	3b02      	subs	r3, #2
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d901      	bls.n	800e2a8 <USB_EPClearStall+0x24>
}
 800e2a4:	2000      	movs	r0, #0
 800e2a6:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e2a8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e2ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2b0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800e2b4:	2000      	movs	r0, #0
 800e2b6:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e2b8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e2bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e2c0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e2c4:	78cb      	ldrb	r3, [r1, #3]
 800e2c6:	3b02      	subs	r3, #2
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d8eb      	bhi.n	800e2a4 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e2cc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e2d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2d4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800e2d8:	2000      	movs	r0, #0
 800e2da:	4770      	bx	lr

0800e2dc <USB_SetDevAddress>:
{
 800e2dc:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e2de:	0109      	lsls	r1, r1, #4
}
 800e2e0:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e2e2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e2e6:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e2ea:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800e2ee:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e2f2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800e2f6:	4311      	orrs	r1, r2
 800e2f8:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop

0800e300 <USB_DevConnect>:
{
 800e300:	4603      	mov	r3, r0
}
 800e302:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e304:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e308:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e30c:	f022 0203 	bic.w	r2, r2, #3
 800e310:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e314:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800e318:	f023 0302 	bic.w	r3, r3, #2
 800e31c:	604b      	str	r3, [r1, #4]
}
 800e31e:	4770      	bx	lr

0800e320 <USB_DevDisconnect>:
{
 800e320:	4603      	mov	r3, r0
}
 800e322:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e324:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e328:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e32c:	f022 0203 	bic.w	r2, r2, #3
 800e330:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e334:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800e338:	f043 0302 	orr.w	r3, r3, #2
 800e33c:	604b      	str	r3, [r1, #4]
}
 800e33e:	4770      	bx	lr

0800e340 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800e340:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800e342:	6980      	ldr	r0, [r0, #24]
}
 800e344:	4010      	ands	r0, r2
 800e346:	4770      	bx	lr

0800e348 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800e348:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e34c:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 800e350:	4018      	ands	r0, r3
}
 800e352:	0c00      	lsrs	r0, r0, #16
 800e354:	4770      	bx	lr
 800e356:	bf00      	nop

0800e358 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800e358:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e35c:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 800e360:	4018      	ands	r0, r3
}
 800e362:	b280      	uxth	r0, r0
 800e364:	4770      	bx	lr
 800e366:	bf00      	nop

0800e368 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e368:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e36c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e370:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e374:	6940      	ldr	r0, [r0, #20]
}
 800e376:	4010      	ands	r0, r2
 800e378:	4770      	bx	lr
 800e37a:	bf00      	nop

0800e37c <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800e37c:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e380:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e384:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e388:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e38c:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e390:	40cb      	lsrs	r3, r1
 800e392:	01db      	lsls	r3, r3, #7
 800e394:	b2db      	uxtb	r3, r3
 800e396:	4313      	orrs	r3, r2
}
 800e398:	4018      	ands	r0, r3
 800e39a:	4770      	bx	lr

0800e39c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800e39c:	6940      	ldr	r0, [r0, #20]
}
 800e39e:	f000 0001 	and.w	r0, r0, #1
 800e3a2:	4770      	bx	lr

0800e3a4 <USB_ActivateSetup>:
{
 800e3a4:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e3a6:	4a09      	ldr	r2, [pc, #36]	; (800e3cc <USB_ActivateSetup+0x28>)
}
 800e3a8:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e3aa:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 800e3ae:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e3b0:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800e3b4:	4022      	ands	r2, r4
}
 800e3b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e3ba:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e3be:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800e3c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3c6:	604b      	str	r3, [r1, #4]
}
 800e3c8:	4770      	bx	lr
 800e3ca:	bf00      	nop
 800e3cc:	fffff800 	.word	0xfffff800

0800e3d0 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e3d0:	4b14      	ldr	r3, [pc, #80]	; (800e424 <USB_EP0_OutStart+0x54>)
{
 800e3d2:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e3d4:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e3d6:	429c      	cmp	r4, r3
 800e3d8:	d81a      	bhi.n	800e410 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e3da:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e3de:	2300      	movs	r3, #0
  if (dma == 1U)
 800e3e0:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e3e2:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e3e4:	6903      	ldr	r3, [r0, #16]
 800e3e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e3ea:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e3ec:	6903      	ldr	r3, [r0, #16]
 800e3ee:	f043 0318 	orr.w	r3, r3, #24
 800e3f2:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e3f4:	6903      	ldr	r3, [r0, #16]
 800e3f6:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e3fa:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 800e3fc:	d104      	bne.n	800e408 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e3fe:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e400:	6803      	ldr	r3, [r0, #0]
 800e402:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e406:	6003      	str	r3, [r0, #0]
}
 800e408:	2000      	movs	r0, #0
 800e40a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e40e:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e410:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e414:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800e418:	2b00      	cmp	r3, #0
 800e41a:	dae0      	bge.n	800e3de <USB_EP0_OutStart+0xe>
}
 800e41c:	2000      	movs	r0, #0
 800e41e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e422:	4770      	bx	lr
 800e424:	4f54300a 	.word	0x4f54300a

0800e428 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e428:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e42a:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800e42e:	b194      	cbz	r4, 800e456 <USBD_CDC_EP0_RxReady+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e430:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800e434:	b16b      	cbz	r3, 800e452 <USBD_CDC_EP0_RxReady+0x2a>
 800e436:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800e43a:	28ff      	cmp	r0, #255	; 0xff
 800e43c:	d009      	beq.n	800e452 <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e43e:	689b      	ldr	r3, [r3, #8]
 800e440:	4621      	mov	r1, r4
 800e442:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800e446:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800e448:	23ff      	movs	r3, #255	; 0xff
  }

  return (uint8_t)USBD_OK;
 800e44a:	2000      	movs	r0, #0
    hcdc->CmdOpCode = 0xFFU;
 800e44c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
 800e450:	bd10      	pop	{r4, pc}
  return (uint8_t)USBD_OK;
 800e452:	2000      	movs	r0, #0
}
 800e454:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800e456:	2003      	movs	r0, #3
}
 800e458:	bd10      	pop	{r4, pc}
 800e45a:	bf00      	nop

0800e45c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e45c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e45e:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 800e460:	4801      	ldr	r0, [pc, #4]	; (800e468 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e462:	801a      	strh	r2, [r3, #0]
}
 800e464:	4770      	bx	lr
 800e466:	bf00      	nop
 800e468:	24000414 	.word	0x24000414

0800e46c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e46c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e46e:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 800e470:	4801      	ldr	r0, [pc, #4]	; (800e478 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e472:	801a      	strh	r2, [r3, #0]
}
 800e474:	4770      	bx	lr
 800e476:	bf00      	nop
 800e478:	24000458 	.word	0x24000458

0800e47c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e47c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e47e:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800e480:	4801      	ldr	r0, [pc, #4]	; (800e488 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e482:	801a      	strh	r2, [r3, #0]
}
 800e484:	4770      	bx	lr
 800e486:	bf00      	nop
 800e488:	240004a8 	.word	0x240004a8

0800e48c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e48c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e48e:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 800e490:	4801      	ldr	r0, [pc, #4]	; (800e498 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e492:	801a      	strh	r2, [r3, #0]
}
 800e494:	4770      	bx	lr
 800e496:	bf00      	nop
 800e498:	2400049c 	.word	0x2400049c

0800e49c <USBD_CDC_DataOut>:
{
 800e49c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e49e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800e4a2:	b17d      	cbz	r5, 800e4c4 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e4a4:	4604      	mov	r4, r0
 800e4a6:	f001 f91f 	bl	800f6e8 <USBD_LL_GetRxDataSize>
 800e4aa:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e4ac:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800e4b0:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800e4b4:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800e4b8:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e4ba:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e4be:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800e4c0:	2000      	movs	r0, #0
}
 800e4c2:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800e4c4:	2003      	movs	r0, #3
}
 800e4c6:	bd38      	pop	{r3, r4, r5, pc}

0800e4c8 <USBD_CDC_DataIn>:
{
 800e4c8:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 800e4ca:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 800e4ce:	b36d      	cbz	r5, 800e52c <USBD_CDC_DataIn+0x64>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e4d0:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 800e4d4:	4684      	mov	ip, r0
 800e4d6:	460a      	mov	r2, r1
 800e4d8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800e4dc:	f8de 3018 	ldr.w	r3, [lr, #24]
 800e4e0:	b96b      	cbnz	r3, 800e4fe <USBD_CDC_DataIn+0x36>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e4e2:	f8dc 32c0 	ldr.w	r3, [ip, #704]	; 0x2c0
    hcdc->TxState = 0U;
 800e4e6:	2400      	movs	r4, #0
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e4e8:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800e4ea:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e4ee:	b1db      	cbz	r3, 800e528 <USBD_CDC_DataIn+0x60>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e4f0:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800e4f4:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 800e4f8:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800e4fa:	4620      	mov	r0, r4
}
 800e4fc:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e4fe:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 800e502:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800e506:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800e50a:	6c64      	ldr	r4, [r4, #68]	; 0x44
 800e50c:	fbb3 f6f4 	udiv	r6, r3, r4
 800e510:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e514:	2c00      	cmp	r4, #0
 800e516:	d1e4      	bne.n	800e4e2 <USBD_CDC_DataIn+0x1a>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e518:	4623      	mov	r3, r4
 800e51a:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 800e51c:	f8ce 4018 	str.w	r4, [lr, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e520:	f001 f8c6 	bl	800f6b0 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800e524:	4620      	mov	r0, r4
}
 800e526:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 800e528:	4618      	mov	r0, r3
}
 800e52a:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 800e52c:	2003      	movs	r0, #3
}
 800e52e:	bd70      	pop	{r4, r5, r6, pc}

0800e530 <USBD_CDC_Setup>:
{
 800e530:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t ifalt = 0U;
 800e532:	2300      	movs	r3, #0
{
 800e534:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e536:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800e53a:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 800e53e:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hcdc == NULL)
 800e542:	2d00      	cmp	r5, #0
 800e544:	d067      	beq.n	800e616 <USBD_CDC_Setup+0xe6>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e546:	f891 c000 	ldrb.w	ip, [r1]
 800e54a:	4606      	mov	r6, r0
 800e54c:	460c      	mov	r4, r1
 800e54e:	f01c 0760 	ands.w	r7, ip, #96	; 0x60
 800e552:	d01e      	beq.n	800e592 <USBD_CDC_Setup+0x62>
 800e554:	2f20      	cmp	r7, #32
 800e556:	d007      	beq.n	800e568 <USBD_CDC_Setup+0x38>
          USBD_CtlError(pdev, req);
 800e558:	4621      	mov	r1, r4
 800e55a:	4630      	mov	r0, r6
          ret = USBD_FAIL;
 800e55c:	2703      	movs	r7, #3
          USBD_CtlError(pdev, req);
 800e55e:	f000 fd45 	bl	800efec <USBD_CtlError>
}
 800e562:	4638      	mov	r0, r7
 800e564:	b003      	add	sp, #12
 800e566:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (req->wLength != 0U)
 800e568:	88ca      	ldrh	r2, [r1, #6]
 800e56a:	b38a      	cbz	r2, 800e5d0 <USBD_CDC_Setup+0xa0>
        if ((req->bmRequest & 0x80U) != 0U)
 800e56c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800e570:	d055      	beq.n	800e61e <USBD_CDC_Setup+0xee>
  USBD_StatusTypeDef ret = USBD_OK;
 800e572:	461f      	mov	r7, r3
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e574:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800e578:	4629      	mov	r1, r5
 800e57a:	7860      	ldrb	r0, [r4, #1]
 800e57c:	689b      	ldr	r3, [r3, #8]
 800e57e:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e580:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e582:	4629      	mov	r1, r5
 800e584:	4630      	mov	r0, r6
 800e586:	2a07      	cmp	r2, #7
 800e588:	bf28      	it	cs
 800e58a:	2207      	movcs	r2, #7
 800e58c:	f000 fd64 	bl	800f058 <USBD_CtlSendData>
 800e590:	e7e7      	b.n	800e562 <USBD_CDC_Setup+0x32>
      switch (req->bRequest)
 800e592:	784b      	ldrb	r3, [r1, #1]
 800e594:	2b0b      	cmp	r3, #11
 800e596:	d8df      	bhi.n	800e558 <USBD_CDC_Setup+0x28>
 800e598:	a201      	add	r2, pc, #4	; (adr r2, 800e5a0 <USBD_CDC_Setup+0x70>)
 800e59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e59e:	bf00      	nop
 800e5a0:	0800e601 	.word	0x0800e601
 800e5a4:	0800e563 	.word	0x0800e563
 800e5a8:	0800e559 	.word	0x0800e559
 800e5ac:	0800e559 	.word	0x0800e559
 800e5b0:	0800e559 	.word	0x0800e559
 800e5b4:	0800e559 	.word	0x0800e559
 800e5b8:	0800e559 	.word	0x0800e559
 800e5bc:	0800e559 	.word	0x0800e559
 800e5c0:	0800e559 	.word	0x0800e559
 800e5c4:	0800e559 	.word	0x0800e559
 800e5c8:	0800e5ed 	.word	0x0800e5ed
 800e5cc:	0800e5e3 	.word	0x0800e5e3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e5d0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 800e5d4:	4617      	mov	r7, r2
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e5d6:	7848      	ldrb	r0, [r1, #1]
 800e5d8:	689b      	ldr	r3, [r3, #8]
 800e5da:	4798      	blx	r3
}
 800e5dc:	4638      	mov	r0, r7
 800e5de:	b003      	add	sp, #12
 800e5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e5e2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e5e6:	2b03      	cmp	r3, #3
 800e5e8:	d0bb      	beq.n	800e562 <USBD_CDC_Setup+0x32>
 800e5ea:	e7b5      	b.n	800e558 <USBD_CDC_Setup+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e5f0:	2b03      	cmp	r3, #3
 800e5f2:	d1b1      	bne.n	800e558 <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	f10d 0105 	add.w	r1, sp, #5
 800e5fa:	f000 fd2d 	bl	800f058 <USBD_CtlSendData>
 800e5fe:	e7b0      	b.n	800e562 <USBD_CDC_Setup+0x32>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e600:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800e604:	2a03      	cmp	r2, #3
 800e606:	d1a7      	bne.n	800e558 <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e608:	2202      	movs	r2, #2
 800e60a:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 800e60e:	461f      	mov	r7, r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e610:	f000 fd22 	bl	800f058 <USBD_CtlSendData>
 800e614:	e7a5      	b.n	800e562 <USBD_CDC_Setup+0x32>
    return (uint8_t)USBD_FAIL;
 800e616:	2703      	movs	r7, #3
}
 800e618:	4638      	mov	r0, r7
 800e61a:	b003      	add	sp, #12
 800e61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hcdc->CmdOpCode = req->bRequest;
 800e61e:	7849      	ldrb	r1, [r1, #1]
  USBD_StatusTypeDef ret = USBD_OK;
 800e620:	461f      	mov	r7, r3
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e622:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
          hcdc->CmdOpCode = req->bRequest;
 800e626:	f885 1200 	strb.w	r1, [r5, #512]	; 0x200
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e62a:	4629      	mov	r1, r5
 800e62c:	f000 fd2c 	bl	800f088 <USBD_CtlPrepareRx>
 800e630:	e797      	b.n	800e562 <USBD_CDC_Setup+0x32>
 800e632:	bf00      	nop

0800e634 <USBD_CDC_DeInit>:
{
 800e634:	b538      	push	{r3, r4, r5, lr}
 800e636:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e638:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e63a:	2181      	movs	r1, #129	; 0x81
 800e63c:	f000 ffec 	bl	800f618 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e640:	2101      	movs	r1, #1
 800e642:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e644:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e646:	f000 ffe7 	bl	800f618 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e64a:	2182      	movs	r1, #130	; 0x82
 800e64c:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e64e:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e652:	f000 ffe1 	bl	800f618 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800e656:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e65a:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800e65c:	b14b      	cbz	r3, 800e672 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e65e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e666:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800e66a:	f001 f845 	bl	800f6f8 <USBD_static_free>
    pdev->pClassData = NULL;
 800e66e:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800e672:	2000      	movs	r0, #0
 800e674:	bd38      	pop	{r3, r4, r5, pc}
 800e676:	bf00      	nop

0800e678 <USBD_CDC_Init>:
{
 800e678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e67c:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e67e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e682:	f001 f835 	bl	800f6f0 <USBD_static_malloc>
  if (hcdc == NULL)
 800e686:	4605      	mov	r5, r0
 800e688:	2800      	cmp	r0, #0
 800e68a:	d04c      	beq.n	800e726 <USBD_CDC_Init+0xae>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e68c:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 800e68e:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e692:	b393      	cbz	r3, 800e6fa <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e694:	2340      	movs	r3, #64	; 0x40
 800e696:	2202      	movs	r2, #2
 800e698:	2181      	movs	r1, #129	; 0x81
 800e69a:	4620      	mov	r0, r4
 800e69c:	f000 ffaa 	bl	800f5f4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e6a0:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e6a2:	2340      	movs	r3, #64	; 0x40
 800e6a4:	4631      	mov	r1, r6
 800e6a6:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e6a8:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	f000 ffa2 	bl	800f5f4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e6b0:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e6b2:	2203      	movs	r2, #3
 800e6b4:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e6b6:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e6ba:	4620      	mov	r0, r4
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e6bc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e6c0:	2308      	movs	r3, #8
 800e6c2:	f000 ff97 	bl	800f5f4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e6c6:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e6ca:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 800e6ce:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e6d0:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	4798      	blx	r3
  hcdc->TxState = 0U;
 800e6d8:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800e6dc:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6e0:	7c26      	ldrb	r6, [r4, #16]
 800e6e2:	b9ae      	cbnz	r6, 800e710 <USBD_CDC_Init+0x98>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e6e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e6e8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800e6ec:	4641      	mov	r1, r8
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	f000 ffec 	bl	800f6cc <USBD_LL_PrepareReceive>
}
 800e6f4:	4630      	mov	r0, r6
 800e6f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e6fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e6fe:	2202      	movs	r2, #2
 800e700:	2181      	movs	r1, #129	; 0x81
 800e702:	4620      	mov	r0, r4
 800e704:	f000 ff76 	bl	800f5f4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e708:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e70a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e70e:	e7c9      	b.n	800e6a4 <USBD_CDC_Init+0x2c>
  return (uint8_t)USBD_OK;
 800e710:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e712:	2340      	movs	r3, #64	; 0x40
 800e714:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800e718:	4641      	mov	r1, r8
 800e71a:	4620      	mov	r0, r4
 800e71c:	f000 ffd6 	bl	800f6cc <USBD_LL_PrepareReceive>
}
 800e720:	4630      	mov	r0, r6
 800e722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 800e726:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 800e728:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
}
 800e72c:	4630      	mov	r0, r6
 800e72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e732:	bf00      	nop

0800e734 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e734:	4603      	mov	r3, r0
  if (fops == NULL)
 800e736:	b119      	cbz	r1, 800e740 <USBD_CDC_RegisterInterface+0xc>
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;

  return (uint8_t)USBD_OK;
 800e738:	2000      	movs	r0, #0
  pdev->pUserData = fops;
 800e73a:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
  return (uint8_t)USBD_OK;
 800e73e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800e740:	2003      	movs	r0, #3
}
 800e742:	4770      	bx	lr

0800e744 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e744:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800e748:	b12b      	cbz	r3, 800e756 <USBD_CDC_SetTxBuffer+0x12>
  }

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
 800e74a:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800e74c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e750:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  return (uint8_t)USBD_OK;
 800e754:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800e756:	2003      	movs	r0, #3
}
 800e758:	4770      	bx	lr
 800e75a:	bf00      	nop

0800e75c <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e75c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800e760:	b11b      	cbz	r3, 800e76a <USBD_CDC_SetRxBuffer+0xe>
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
 800e762:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800e764:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  return (uint8_t)USBD_OK;
 800e768:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800e76a:	2003      	movs	r0, #3
}
 800e76c:	4770      	bx	lr
 800e76e:	bf00      	nop

0800e770 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e770:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800e774:	b192      	cbz	r2, 800e79c <USBD_CDC_TransmitPacket+0x2c>
{
 800e776:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800e778:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800e77c:	b10c      	cbz	r4, 800e782 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e77e:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800e780:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 800e782:	2301      	movs	r3, #1
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e784:	2181      	movs	r1, #129	; 0x81
    hcdc->TxState = 1U;
 800e786:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e78a:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e78e:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e792:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e794:	f000 ff8c 	bl	800f6b0 <USBD_LL_Transmit>
    ret = USBD_OK;
 800e798:	4620      	mov	r0, r4
}
 800e79a:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800e79c:	2003      	movs	r0, #3
}
 800e79e:	4770      	bx	lr

0800e7a0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e7a0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800e7a4:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800e7a6:	b19a      	cbz	r2, 800e7d0 <USBD_CDC_ReceivePacket+0x30>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7a8:	7c04      	ldrb	r4, [r0, #16]
 800e7aa:	b144      	cbz	r4, 800e7be <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e7ac:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e7ae:	2340      	movs	r3, #64	; 0x40
 800e7b0:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800e7b4:	2101      	movs	r1, #1
 800e7b6:	f000 ff89 	bl	800f6cc <USBD_LL_PrepareReceive>
}
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e7be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7c2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800e7c6:	2101      	movs	r1, #1
 800e7c8:	f000 ff80 	bl	800f6cc <USBD_LL_PrepareReceive>
}
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800e7d0:	2403      	movs	r4, #3
}
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	bd10      	pop	{r4, pc}
 800e7d6:	bf00      	nop

0800e7d8 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e7d8:	b178      	cbz	r0, 800e7fa <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e7e0:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e7e4:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e7e8:	b109      	cbz	r1, 800e7ee <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800e7ea:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e7ee:	2301      	movs	r3, #1
  pdev->id = id;
 800e7f0:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e7f2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e7f6:	f000 beaf 	b.w	800f558 <USBD_LL_Init>

  return ret;
}
 800e7fa:	2003      	movs	r0, #3
 800e7fc:	4770      	bx	lr
 800e7fe:	bf00      	nop

0800e800 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e800:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 800e802:	2400      	movs	r4, #0
{
 800e804:	b083      	sub	sp, #12
  uint16_t len = 0U;
 800e806:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800e80a:	b181      	cbz	r1, 800e82e <USBD_RegisterClass+0x2e>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e80c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800e80e:	4605      	mov	r5, r0
  pdev->pClass = pclass;
 800e810:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e814:	b143      	cbz	r3, 800e828 <USBD_RegisterClass+0x28>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e816:	f10d 0006 	add.w	r0, sp, #6
 800e81a:	4798      	blx	r3
 800e81c:	4603      	mov	r3, r0
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e81e:	4620      	mov	r0, r4
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e820:	f8c5 32cc 	str.w	r3, [r5, #716]	; 0x2cc
}
 800e824:	b003      	add	sp, #12
 800e826:	bd30      	pop	{r4, r5, pc}
  return USBD_OK;
 800e828:	4618      	mov	r0, r3
}
 800e82a:	b003      	add	sp, #12
 800e82c:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800e82e:	2003      	movs	r0, #3
}
 800e830:	b003      	add	sp, #12
 800e832:	bd30      	pop	{r4, r5, pc}

0800e834 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e834:	f000 bed0 	b.w	800f5d8 <USBD_LL_Start>

0800e838 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800e838:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e83c:	b10b      	cbz	r3, 800e842 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4718      	bx	r3
  }

  return ret;
}
 800e842:	2003      	movs	r0, #3
 800e844:	4770      	bx	lr
 800e846:	bf00      	nop

0800e848 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e848:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e84a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e84e:	b10b      	cbz	r3, 800e854 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e850:	685b      	ldr	r3, [r3, #4]
 800e852:	4798      	blx	r3
  }

  return USBD_OK;
}
 800e854:	2000      	movs	r0, #0
 800e856:	bd08      	pop	{r3, pc}

0800e858 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e858:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e85a:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800e85e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e860:	4628      	mov	r0, r5
 800e862:	f000 fbb7 	bl	800efd4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;
 800e866:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 800e86a:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800e86e:	2201      	movs	r2, #1
  pdev->ep0_data_len = pdev->request.wLength;
 800e870:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 800e874:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 800e878:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d009      	beq.n	800e894 <USBD_LL_SetupStage+0x3c>
 800e880:	2b02      	cmp	r3, #2
 800e882:	d013      	beq.n	800e8ac <USBD_LL_SetupStage+0x54>
 800e884:	b163      	cbz	r3, 800e8a0 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e886:	4620      	mov	r0, r4
 800e888:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800e88c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e890:	f000 bed0 	b.w	800f634 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e894:	4629      	mov	r1, r5
 800e896:	4620      	mov	r0, r4
}
 800e898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e89c:	f000 bac6 	b.w	800ee2c <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e8a0:	4629      	mov	r1, r5
 800e8a2:	4620      	mov	r0, r4
}
 800e8a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e8a8:	f000 b92a 	b.w	800eb00 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e8ac:	4629      	mov	r1, r5
 800e8ae:	4620      	mov	r0, r4
}
 800e8b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e8b4:	f000 baf2 	b.w	800ee9c <USBD_StdEPReq>

0800e8b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e8b8:	b570      	push	{r4, r5, r6, lr}
 800e8ba:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e8bc:	b929      	cbnz	r1, 800e8ca <USBD_LL_DataOutStage+0x12>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e8be:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800e8c2:	2b03      	cmp	r3, #3
 800e8c4:	d00d      	beq.n	800e8e2 <USBD_LL_DataOutStage+0x2a>
      }
    }
  }

  return USBD_OK;
}
 800e8c6:	2000      	movs	r0, #0
 800e8c8:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8ca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e8ce:	2b03      	cmp	r3, #3
 800e8d0:	d1f9      	bne.n	800e8c6 <USBD_LL_DataOutStage+0xe>
      if (pdev->pClass->DataOut != NULL)
 800e8d2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e8d6:	699b      	ldr	r3, [r3, #24]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d0f4      	beq.n	800e8c6 <USBD_LL_DataOutStage+0xe>
}
 800e8dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e8e0:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800e8e2:	e9d0 3557 	ldrd	r3, r5, [r0, #348]	; 0x15c
 800e8e6:	42ab      	cmp	r3, r5
 800e8e8:	d808      	bhi.n	800e8fc <USBD_LL_DataOutStage+0x44>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8ea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e8ee:	2b03      	cmp	r3, #3
 800e8f0:	d00f      	beq.n	800e912 <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	f000 fbe0 	bl	800f0b8 <USBD_CtlSendStatus>
}
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800e8fc:	1b5b      	subs	r3, r3, r5
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e8fe:	4611      	mov	r1, r2
 800e900:	462a      	mov	r2, r5
 800e902:	429d      	cmp	r5, r3
        pep->rem_length -= pep->maxpacket;
 800e904:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e908:	bf28      	it	cs
 800e90a:	461a      	movcs	r2, r3
 800e90c:	f000 fbca 	bl	800f0a4 <USBD_CtlContinueRx>
 800e910:	e7d9      	b.n	800e8c6 <USBD_LL_DataOutStage+0xe>
          if (pdev->pClass->EP0_RxReady != NULL)
 800e912:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e916:	691b      	ldr	r3, [r3, #16]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d0ea      	beq.n	800e8f2 <USBD_LL_DataOutStage+0x3a>
            pdev->pClass->EP0_RxReady(pdev);
 800e91c:	4798      	blx	r3
 800e91e:	e7e8      	b.n	800e8f2 <USBD_LL_DataOutStage+0x3a>

0800e920 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e920:	b570      	push	{r4, r5, r6, lr}
 800e922:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e924:	b949      	cbnz	r1, 800e93a <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e926:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800e92a:	2b02      	cmp	r3, #2
 800e92c:	d011      	beq.n	800e952 <USBD_LL_DataInStage+0x32>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e92e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800e932:	2b01      	cmp	r3, #1
 800e934:	d022      	beq.n	800e97c <USBD_LL_DataInStage+0x5c>
      }
    }
  }

  return USBD_OK;
}
 800e936:	2000      	movs	r0, #0
 800e938:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e93a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e93e:	2b03      	cmp	r3, #3
 800e940:	d1f9      	bne.n	800e936 <USBD_LL_DataInStage+0x16>
      if (pdev->pClass->DataIn != NULL)
 800e942:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e946:	695b      	ldr	r3, [r3, #20]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d0f4      	beq.n	800e936 <USBD_LL_DataInStage+0x16>
}
 800e94c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e950:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800e952:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 800e956:	460d      	mov	r5, r1
 800e958:	42b3      	cmp	r3, r6
 800e95a:	d814      	bhi.n	800e986 <USBD_LL_DataInStage+0x66>
        if ((pep->maxpacket == pep->rem_length) &&
 800e95c:	d020      	beq.n	800e9a0 <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e95e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800e962:	2b03      	cmp	r3, #3
 800e964:	d02f      	beq.n	800e9c6 <USBD_LL_DataInStage+0xa6>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e966:	2180      	movs	r1, #128	; 0x80
 800e968:	4620      	mov	r0, r4
 800e96a:	f000 fe63 	bl	800f634 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e96e:	4620      	mov	r0, r4
 800e970:	f000 fbae 	bl	800f0d0 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800e974:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800e978:	2b01      	cmp	r3, #1
 800e97a:	d1dc      	bne.n	800e936 <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 800e97c:	2300      	movs	r3, #0
}
 800e97e:	2000      	movs	r0, #0
      pdev->dev_test_mode = 0U;
 800e980:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 800e984:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800e986:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e988:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800e98a:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e98c:	461a      	mov	r2, r3
 800e98e:	f000 fb71 	bl	800f074 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e992:	462b      	mov	r3, r5
 800e994:	462a      	mov	r2, r5
 800e996:	4629      	mov	r1, r5
 800e998:	4620      	mov	r0, r4
 800e99a:	f000 fe97 	bl	800f6cc <USBD_LL_PrepareReceive>
 800e99e:	e7c6      	b.n	800e92e <USBD_LL_DataInStage+0xe>
            (pep->total_length >= pep->maxpacket) &&
 800e9a0:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d8db      	bhi.n	800e95e <USBD_LL_DataInStage+0x3e>
            (pep->total_length >= pep->maxpacket) &&
 800e9a6:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d2d7      	bcs.n	800e95e <USBD_LL_DataInStage+0x3e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e9ae:	460a      	mov	r2, r1
 800e9b0:	f000 fb60 	bl	800f074 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9b4:	462b      	mov	r3, r5
 800e9b6:	462a      	mov	r2, r5
 800e9b8:	4629      	mov	r1, r5
 800e9ba:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 800e9bc:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9c0:	f000 fe84 	bl	800f6cc <USBD_LL_PrepareReceive>
 800e9c4:	e7b3      	b.n	800e92e <USBD_LL_DataInStage+0xe>
            if (pdev->pClass->EP0_TxSent != NULL)
 800e9c6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e9ca:	68db      	ldr	r3, [r3, #12]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d0ca      	beq.n	800e966 <USBD_LL_DataInStage+0x46>
              pdev->pClass->EP0_TxSent(pdev);
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	4798      	blx	r3
 800e9d4:	e7c7      	b.n	800e966 <USBD_LL_DataInStage+0x46>
 800e9d6:	bf00      	nop

0800e9d8 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800e9d8:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e9da:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 800e9dc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e9e0:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 800e9e4:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800e9e6:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 800e9ea:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 800e9ee:	b1eb      	cbz	r3, 800ea2c <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800e9f0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800e9f4:	b570      	push	{r4, r5, r6, lr}
 800e9f6:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 800e9f8:	b112      	cbz	r2, 800ea00 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 800e9fa:	685b      	ldr	r3, [r3, #4]
 800e9fc:	b103      	cbz	r3, 800ea00 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e9fe:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea00:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea02:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ea04:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea06:	4620      	mov	r0, r4
 800ea08:	462b      	mov	r3, r5
 800ea0a:	4611      	mov	r1, r2
 800ea0c:	f000 fdf2 	bl	800f5f4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea10:	462b      	mov	r3, r5
 800ea12:	2200      	movs	r2, #0
 800ea14:	2180      	movs	r1, #128	; 0x80
 800ea16:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ea18:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea1c:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea20:	f000 fde8 	bl	800f5f4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
 800ea24:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ea26:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea28:	6225      	str	r5, [r4, #32]
}
 800ea2a:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800ea2c:	2003      	movs	r0, #3
}
 800ea2e:	4770      	bx	lr

0800ea30 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ea30:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 800ea32:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800ea34:	7419      	strb	r1, [r3, #16]
}
 800ea36:	4770      	bx	lr

0800ea38 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ea38:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ea3a:	2104      	movs	r1, #4

  return USBD_OK;
}
 800ea3c:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 800ea3e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ea42:	b2d2      	uxtb	r2, r2
 800ea44:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ea48:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 800ea4c:	4770      	bx	lr
 800ea4e:	bf00      	nop

0800ea50 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ea50:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ea54:	2b04      	cmp	r3, #4
 800ea56:	d104      	bne.n	800ea62 <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ea58:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800ea62:	2000      	movs	r0, #0
 800ea64:	4770      	bx	lr
 800ea66:	bf00      	nop

0800ea68 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800ea68:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800ea6c:	b15a      	cbz	r2, 800ea86 <USBD_LL_SOF+0x1e>
{
 800ea6e:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea70:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ea74:	2b03      	cmp	r3, #3
 800ea76:	d001      	beq.n	800ea7c <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800ea78:	2000      	movs	r0, #0
}
 800ea7a:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800ea7c:	69d3      	ldr	r3, [r2, #28]
 800ea7e:	b123      	cbz	r3, 800ea8a <USBD_LL_SOF+0x22>
      (void)pdev->pClass->SOF(pdev);
 800ea80:	4798      	blx	r3
  return USBD_OK;
 800ea82:	2000      	movs	r0, #0
}
 800ea84:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800ea86:	2003      	movs	r0, #3
}
 800ea88:	4770      	bx	lr
  return USBD_OK;
 800ea8a:	4618      	mov	r0, r3
}
 800ea8c:	bd08      	pop	{r3, pc}
 800ea8e:	bf00      	nop

0800ea90 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800ea90:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800ea94:	b15a      	cbz	r2, 800eaae <USBD_LL_IsoINIncomplete+0x1e>
{
 800ea96:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea98:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ea9c:	2b03      	cmp	r3, #3
 800ea9e:	d001      	beq.n	800eaa4 <USBD_LL_IsoINIncomplete+0x14>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800eaa0:	2000      	movs	r0, #0
}
 800eaa2:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800eaa4:	6a13      	ldr	r3, [r2, #32]
 800eaa6:	b123      	cbz	r3, 800eab2 <USBD_LL_IsoINIncomplete+0x22>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800eaa8:	4798      	blx	r3
  return USBD_OK;
 800eaaa:	2000      	movs	r0, #0
}
 800eaac:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800eaae:	2003      	movs	r0, #3
}
 800eab0:	4770      	bx	lr
  return USBD_OK;
 800eab2:	4618      	mov	r0, r3
}
 800eab4:	bd08      	pop	{r3, pc}
 800eab6:	bf00      	nop

0800eab8 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800eab8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800eabc:	b15a      	cbz	r2, 800ead6 <USBD_LL_IsoOUTIncomplete+0x1e>
{
 800eabe:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eac0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800eac4:	2b03      	cmp	r3, #3
 800eac6:	d001      	beq.n	800eacc <USBD_LL_IsoOUTIncomplete+0x14>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800eac8:	2000      	movs	r0, #0
}
 800eaca:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800eacc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800eace:	b123      	cbz	r3, 800eada <USBD_LL_IsoOUTIncomplete+0x22>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ead0:	4798      	blx	r3
  return USBD_OK;
 800ead2:	2000      	movs	r0, #0
}
 800ead4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800ead6:	2003      	movs	r0, #3
}
 800ead8:	4770      	bx	lr
  return USBD_OK;
 800eada:	4618      	mov	r0, r3
}
 800eadc:	bd08      	pop	{r3, pc}
 800eade:	bf00      	nop

0800eae0 <USBD_LL_DevConnected>:
 800eae0:	2000      	movs	r0, #0
 800eae2:	4770      	bx	lr

0800eae4 <USBD_LL_DevDisconnected>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eae4:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 800eae6:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eaea:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 800eaee:	b12a      	cbz	r2, 800eafc <USBD_LL_DevDisconnected+0x18>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eaf0:	6852      	ldr	r2, [r2, #4]
 800eaf2:	7901      	ldrb	r1, [r0, #4]
{
 800eaf4:	b508      	push	{r3, lr}
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eaf6:	4790      	blx	r2
  }

  return USBD_OK;
}
 800eaf8:	2000      	movs	r0, #0
 800eafa:	bd08      	pop	{r3, pc}
 800eafc:	2000      	movs	r0, #0
 800eafe:	4770      	bx	lr

0800eb00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb00:	b570      	push	{r4, r5, r6, lr}
 800eb02:	780c      	ldrb	r4, [r1, #0]
 800eb04:	b082      	sub	sp, #8
 800eb06:	460e      	mov	r6, r1
 800eb08:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb0a:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800eb0e:	2c20      	cmp	r4, #32
 800eb10:	d00e      	beq.n	800eb30 <USBD_StdDevReq+0x30>
 800eb12:	2c40      	cmp	r4, #64	; 0x40
 800eb14:	d00c      	beq.n	800eb30 <USBD_StdDevReq+0x30>
 800eb16:	b1a4      	cbz	r4, 800eb42 <USBD_StdDevReq+0x42>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb18:	2180      	movs	r1, #128	; 0x80
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	f000 fd8a 	bl	800f634 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eb20:	2100      	movs	r1, #0
 800eb22:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800eb24:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800eb26:	f000 fd85 	bl	800f634 <USBD_LL_StallEP>
}
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	b002      	add	sp, #8
 800eb2e:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb30:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800eb34:	4631      	mov	r1, r6
 800eb36:	4628      	mov	r0, r5
 800eb38:	689b      	ldr	r3, [r3, #8]
}
 800eb3a:	b002      	add	sp, #8
 800eb3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb40:	4718      	bx	r3
      switch (req->bRequest)
 800eb42:	784b      	ldrb	r3, [r1, #1]
 800eb44:	2b09      	cmp	r3, #9
 800eb46:	d8e7      	bhi.n	800eb18 <USBD_StdDevReq+0x18>
 800eb48:	a201      	add	r2, pc, #4	; (adr r2, 800eb50 <USBD_StdDevReq+0x50>)
 800eb4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb4e:	bf00      	nop
 800eb50:	0800ebb1 	.word	0x0800ebb1
 800eb54:	0800ebdf 	.word	0x0800ebdf
 800eb58:	0800eb19 	.word	0x0800eb19
 800eb5c:	0800ebfd 	.word	0x0800ebfd
 800eb60:	0800eb19 	.word	0x0800eb19
 800eb64:	0800ec05 	.word	0x0800ec05
 800eb68:	0800ec3d 	.word	0x0800ec3d
 800eb6c:	0800eb19 	.word	0x0800eb19
 800eb70:	0800ec59 	.word	0x0800ec59
 800eb74:	0800eb79 	.word	0x0800eb79
  cfgidx = (uint8_t)(req->wValue);
 800eb78:	7889      	ldrb	r1, [r1, #2]
 800eb7a:	4eab      	ldr	r6, [pc, #684]	; (800ee28 <USBD_StdDevReq+0x328>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eb7c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800eb7e:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eb80:	f200 8140 	bhi.w	800ee04 <USBD_StdDevReq+0x304>
  switch (pdev->dev_state)
 800eb84:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800eb88:	2b02      	cmp	r3, #2
 800eb8a:	b2da      	uxtb	r2, r3
 800eb8c:	f000 8129 	beq.w	800ede2 <USBD_StdDevReq+0x2e2>
 800eb90:	2a03      	cmp	r2, #3
 800eb92:	f000 8105 	beq.w	800eda0 <USBD_StdDevReq+0x2a0>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb96:	2180      	movs	r1, #128	; 0x80
      ret = USBD_FAIL;
 800eb98:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb9a:	f000 fd4b 	bl	800f634 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eb9e:	2100      	movs	r1, #0
 800eba0:	4628      	mov	r0, r5
 800eba2:	f000 fd47 	bl	800f634 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eba6:	7831      	ldrb	r1, [r6, #0]
 800eba8:	4628      	mov	r0, r5
 800ebaa:	f7ff fe4d 	bl	800e848 <USBD_ClrClassConfig>
      break;
 800ebae:	e7bc      	b.n	800eb2a <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800ebb0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800ebb4:	3a01      	subs	r2, #1
 800ebb6:	2a02      	cmp	r2, #2
 800ebb8:	d866      	bhi.n	800ec88 <USBD_StdDevReq+0x188>
      if (req->wLength != 0x2U)
 800ebba:	88ca      	ldrh	r2, [r1, #6]
 800ebbc:	2a02      	cmp	r2, #2
 800ebbe:	d163      	bne.n	800ec88 <USBD_StdDevReq+0x188>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ebc0:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup != 0U)
 800ebc2:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ebc6:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800ebc8:	b10a      	cbz	r2, 800ebce <USBD_StdDevReq+0xce>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ebca:	2203      	movs	r2, #3
 800ebcc:	60c2      	str	r2, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ebce:	2202      	movs	r2, #2
 800ebd0:	f105 010c 	add.w	r1, r5, #12
 800ebd4:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800ebd6:	461c      	mov	r4, r3
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ebd8:	f000 fa3e 	bl	800f058 <USBD_CtlSendData>
      break;
 800ebdc:	e7a5      	b.n	800eb2a <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800ebde:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ebe2:	3b01      	subs	r3, #1
 800ebe4:	2b02      	cmp	r3, #2
 800ebe6:	d84f      	bhi.n	800ec88 <USBD_StdDevReq+0x188>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ebe8:	884b      	ldrh	r3, [r1, #2]
 800ebea:	2b01      	cmp	r3, #1
 800ebec:	d19d      	bne.n	800eb2a <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800ebee:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 800ebf0:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 800ebf2:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ebf6:	f000 fa5f 	bl	800f0b8 <USBD_CtlSendStatus>
 800ebfa:	e796      	b.n	800eb2a <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ebfc:	884b      	ldrh	r3, [r1, #2]
 800ebfe:	2b01      	cmp	r3, #1
 800ec00:	d193      	bne.n	800eb2a <USBD_StdDevReq+0x2a>
 800ec02:	e7f5      	b.n	800ebf0 <USBD_StdDevReq+0xf0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ec04:	888b      	ldrh	r3, [r1, #4]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d13e      	bne.n	800ec88 <USBD_StdDevReq+0x188>
 800ec0a:	88cb      	ldrh	r3, [r1, #6]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d13b      	bne.n	800ec88 <USBD_StdDevReq+0x188>
 800ec10:	884e      	ldrh	r6, [r1, #2]
 800ec12:	2e7f      	cmp	r6, #127	; 0x7f
 800ec14:	d838      	bhi.n	800ec88 <USBD_StdDevReq+0x188>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec16:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ec1a:	2b03      	cmp	r3, #3
 800ec1c:	d034      	beq.n	800ec88 <USBD_StdDevReq+0x188>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ec1e:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800ec20:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ec24:	f000 fd36 	bl	800f694 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ec28:	4628      	mov	r0, r5
 800ec2a:	f000 fa45 	bl	800f0b8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800ec2e:	2e00      	cmp	r6, #0
 800ec30:	f040 80d3 	bne.w	800edda <USBD_StdDevReq+0x2da>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ec34:	2301      	movs	r3, #1
 800ec36:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800ec3a:	e776      	b.n	800eb2a <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 800ec3c:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 800ec3e:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800ec40:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800ec44:	0a13      	lsrs	r3, r2, #8
 800ec46:	3b01      	subs	r3, #1
 800ec48:	2b06      	cmp	r3, #6
 800ec4a:	d81d      	bhi.n	800ec88 <USBD_StdDevReq+0x188>
 800ec4c:	e8df f003 	tbb	[pc, r3]
 800ec50:	1c624d5a 	.word	0x1c624d5a
 800ec54:	431c      	.short	0x431c
 800ec56:	27          	.byte	0x27
 800ec57:	00          	.byte	0x00
  if (req->wLength != 1U)
 800ec58:	88ca      	ldrh	r2, [r1, #6]
 800ec5a:	2a01      	cmp	r2, #1
 800ec5c:	d114      	bne.n	800ec88 <USBD_StdDevReq+0x188>
    switch (pdev->dev_state)
 800ec5e:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800ec62:	2902      	cmp	r1, #2
 800ec64:	b2cb      	uxtb	r3, r1
 800ec66:	f200 8094 	bhi.w	800ed92 <USBD_StdDevReq+0x292>
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	f43f af54 	beq.w	800eb18 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800ec70:	4601      	mov	r1, r0
 800ec72:	2300      	movs	r3, #0
 800ec74:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ec78:	f000 f9ee 	bl	800f058 <USBD_CtlSendData>
        break;
 800ec7c:	e755      	b.n	800eb2a <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ec7e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ec82:	685b      	ldr	r3, [r3, #4]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d15c      	bne.n	800ed42 <USBD_StdDevReq+0x242>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec88:	2180      	movs	r1, #128	; 0x80
 800ec8a:	4628      	mov	r0, r5
 800ec8c:	f000 fcd2 	bl	800f634 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ec90:	2100      	movs	r1, #0
 800ec92:	4628      	mov	r0, r5
 800ec94:	f000 fcce 	bl	800f634 <USBD_LL_StallEP>
}
 800ec98:	4620      	mov	r0, r4
 800ec9a:	b002      	add	sp, #8
 800ec9c:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec9e:	7c03      	ldrb	r3, [r0, #16]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d1f1      	bne.n	800ec88 <USBD_StdDevReq+0x188>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800eca4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800eca8:	f10d 0006 	add.w	r0, sp, #6
 800ecac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecae:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ecb0:	2307      	movs	r3, #7
 800ecb2:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 800ecb4:	88f2      	ldrh	r2, [r6, #6]
 800ecb6:	2a00      	cmp	r2, #0
 800ecb8:	d067      	beq.n	800ed8a <USBD_StdDevReq+0x28a>
    if (len != 0U)
 800ecba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d0e2      	beq.n	800ec88 <USBD_StdDevReq+0x188>
      len = MIN(len, req->wLength);
 800ecc2:	429a      	cmp	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ecc4:	4601      	mov	r1, r0
 800ecc6:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 800ecc8:	bf28      	it	cs
 800ecca:	461a      	movcs	r2, r3
 800eccc:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ecd0:	f000 f9c2 	bl	800f058 <USBD_CtlSendData>
 800ecd4:	e729      	b.n	800eb2a <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ecd6:	7c03      	ldrb	r3, [r0, #16]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d1d5      	bne.n	800ec88 <USBD_StdDevReq+0x188>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ecdc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ece0:	f10d 0006 	add.w	r0, sp, #6
 800ece4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ece6:	4798      	blx	r3
  if (err != 0U)
 800ece8:	e7e4      	b.n	800ecb4 <USBD_StdDevReq+0x1b4>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ecea:	7c03      	ldrb	r3, [r0, #16]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	f040 8092 	bne.w	800ee16 <USBD_StdDevReq+0x316>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ecf2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ecf6:	f10d 0006 	add.w	r0, sp, #6
 800ecfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecfc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ecfe:	2302      	movs	r3, #2
 800ed00:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800ed02:	e7d7      	b.n	800ecb4 <USBD_StdDevReq+0x1b4>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ed04:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ed08:	f10d 0106 	add.w	r1, sp, #6
 800ed0c:	7c00      	ldrb	r0, [r0, #16]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	4798      	blx	r3
  if (err != 0U)
 800ed12:	e7cf      	b.n	800ecb4 <USBD_StdDevReq+0x1b4>
      switch ((uint8_t)(req->wValue))
 800ed14:	b2d2      	uxtb	r2, r2
 800ed16:	2a05      	cmp	r2, #5
 800ed18:	d8b6      	bhi.n	800ec88 <USBD_StdDevReq+0x188>
 800ed1a:	a301      	add	r3, pc, #4	; (adr r3, 800ed20 <USBD_StdDevReq+0x220>)
 800ed1c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800ed20:	0800ec7f 	.word	0x0800ec7f
 800ed24:	0800ed71 	.word	0x0800ed71
 800ed28:	0800ed65 	.word	0x0800ed65
 800ed2c:	0800ed59 	.word	0x0800ed59
 800ed30:	0800ed4d 	.word	0x0800ed4d
 800ed34:	0800ed39 	.word	0x0800ed39
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ed38:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ed3c:	699b      	ldr	r3, [r3, #24]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d0a2      	beq.n	800ec88 <USBD_StdDevReq+0x188>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ed42:	f10d 0106 	add.w	r1, sp, #6
 800ed46:	7c28      	ldrb	r0, [r5, #16]
 800ed48:	4798      	blx	r3
  if (err != 0U)
 800ed4a:	e7b3      	b.n	800ecb4 <USBD_StdDevReq+0x1b4>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ed4c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ed50:	695b      	ldr	r3, [r3, #20]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d1f5      	bne.n	800ed42 <USBD_StdDevReq+0x242>
 800ed56:	e797      	b.n	800ec88 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ed58:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ed5c:	691b      	ldr	r3, [r3, #16]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d1ef      	bne.n	800ed42 <USBD_StdDevReq+0x242>
 800ed62:	e791      	b.n	800ec88 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ed64:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d1e9      	bne.n	800ed42 <USBD_StdDevReq+0x242>
 800ed6e:	e78b      	b.n	800ec88 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ed70:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ed74:	689b      	ldr	r3, [r3, #8]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d1e3      	bne.n	800ed42 <USBD_StdDevReq+0x242>
 800ed7a:	e785      	b.n	800ec88 <USBD_StdDevReq+0x188>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed7c:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800ed7e:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed80:	460c      	mov	r4, r1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed82:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ed86:	f7ff fd5f 	bl	800e848 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ed8a:	4628      	mov	r0, r5
 800ed8c:	f000 f994 	bl	800f0b8 <USBD_CtlSendStatus>
 800ed90:	e6cb      	b.n	800eb2a <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 800ed92:	2b03      	cmp	r3, #3
 800ed94:	f47f aec0 	bne.w	800eb18 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ed98:	1d01      	adds	r1, r0, #4
 800ed9a:	f000 f95d 	bl	800f058 <USBD_CtlSendData>
        break;
 800ed9e:	e6c4      	b.n	800eb2a <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 800eda0:	2900      	cmp	r1, #0
 800eda2:	d0eb      	beq.n	800ed7c <USBD_StdDevReq+0x27c>
      else if (cfgidx != pdev->dev_config)
 800eda4:	6841      	ldr	r1, [r0, #4]
 800eda6:	2901      	cmp	r1, #1
 800eda8:	d0ef      	beq.n	800ed8a <USBD_StdDevReq+0x28a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800edaa:	b2c9      	uxtb	r1, r1
 800edac:	f7ff fd4c 	bl	800e848 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800edb0:	7831      	ldrb	r1, [r6, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800edb2:	4628      	mov	r0, r5
        pdev->dev_config = cfgidx;
 800edb4:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800edb6:	f7ff fd3f 	bl	800e838 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800edba:	4606      	mov	r6, r0
 800edbc:	2800      	cmp	r0, #0
 800edbe:	d0e4      	beq.n	800ed8a <USBD_StdDevReq+0x28a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800edc0:	2180      	movs	r1, #128	; 0x80
 800edc2:	4628      	mov	r0, r5
 800edc4:	f000 fc36 	bl	800f634 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800edc8:	2100      	movs	r1, #0
 800edca:	4628      	mov	r0, r5
 800edcc:	4634      	mov	r4, r6
 800edce:	f000 fc31 	bl	800f634 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800edd2:	7929      	ldrb	r1, [r5, #4]
 800edd4:	4628      	mov	r0, r5
 800edd6:	f7ff fd37 	bl	800e848 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800edda:	2302      	movs	r3, #2
 800eddc:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800ede0:	e6a3      	b.n	800eb2a <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800ede2:	2900      	cmp	r1, #0
 800ede4:	d0d1      	beq.n	800ed8a <USBD_StdDevReq+0x28a>
        pdev->dev_config = cfgidx;
 800ede6:	2101      	movs	r1, #1
 800ede8:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800edea:	f7ff fd25 	bl	800e838 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800edee:	4604      	mov	r4, r0
 800edf0:	2800      	cmp	r0, #0
 800edf2:	f47f af49 	bne.w	800ec88 <USBD_StdDevReq+0x188>
          (void)USBD_CtlSendStatus(pdev);
 800edf6:	4628      	mov	r0, r5
 800edf8:	f000 f95e 	bl	800f0b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800edfc:	2303      	movs	r3, #3
 800edfe:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800ee02:	e692      	b.n	800eb2a <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee04:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 800ee06:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee08:	f000 fc14 	bl	800f634 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ee0c:	2100      	movs	r1, #0
 800ee0e:	4628      	mov	r0, r5
 800ee10:	f000 fc10 	bl	800f634 <USBD_LL_StallEP>
    return USBD_FAIL;
 800ee14:	e689      	b.n	800eb2a <USBD_StdDevReq+0x2a>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ee16:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ee1a:	f10d 0006 	add.w	r0, sp, #6
 800ee1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee20:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ee22:	2302      	movs	r3, #2
 800ee24:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800ee26:	e745      	b.n	800ecb4 <USBD_StdDevReq+0x1b4>
 800ee28:	2400d3fc 	.word	0x2400d3fc

0800ee2c <USBD_StdItfReq>:
{
 800ee2c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee2e:	780b      	ldrb	r3, [r1, #0]
{
 800ee30:	460d      	mov	r5, r1
 800ee32:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee34:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800ee38:	2a40      	cmp	r2, #64	; 0x40
 800ee3a:	d00b      	beq.n	800ee54 <USBD_StdItfReq+0x28>
 800ee3c:	065b      	lsls	r3, r3, #25
 800ee3e:	d509      	bpl.n	800ee54 <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 800ee40:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee42:	2180      	movs	r1, #128	; 0x80
 800ee44:	f000 fbf6 	bl	800f634 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ee48:	4620      	mov	r0, r4
 800ee4a:	4629      	mov	r1, r5
 800ee4c:	f000 fbf2 	bl	800f634 <USBD_LL_StallEP>
}
 800ee50:	4628      	mov	r0, r5
 800ee52:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800ee54:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800ee58:	3b01      	subs	r3, #1
 800ee5a:	2b02      	cmp	r3, #2
 800ee5c:	d812      	bhi.n	800ee84 <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ee5e:	792b      	ldrb	r3, [r5, #4]
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d80f      	bhi.n	800ee84 <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ee64:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800ee68:	4629      	mov	r1, r5
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	689b      	ldr	r3, [r3, #8]
 800ee6e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ee70:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ee72:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d1eb      	bne.n	800ee50 <USBD_StdItfReq+0x24>
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	d1e9      	bne.n	800ee50 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	f000 f91b 	bl	800f0b8 <USBD_CtlSendStatus>
 800ee82:	e7e5      	b.n	800ee50 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee84:	2180      	movs	r1, #128	; 0x80
 800ee86:	4620      	mov	r0, r4
 800ee88:	f000 fbd4 	bl	800f634 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ee8c:	2100      	movs	r1, #0
 800ee8e:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800ee90:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800ee92:	f000 fbcf 	bl	800f634 <USBD_LL_StallEP>
}
 800ee96:	4628      	mov	r0, r5
 800ee98:	bd38      	pop	{r3, r4, r5, pc}
 800ee9a:	bf00      	nop

0800ee9c <USBD_StdEPReq>:
{
 800ee9c:	b570      	push	{r4, r5, r6, lr}
 800ee9e:	780b      	ldrb	r3, [r1, #0]
 800eea0:	460d      	mov	r5, r1
 800eea2:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eea4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eea8:	2b20      	cmp	r3, #32
 800eeaa:	d01b      	beq.n	800eee4 <USBD_StdEPReq+0x48>
 800eeac:	2b40      	cmp	r3, #64	; 0x40
 800eeae:	d019      	beq.n	800eee4 <USBD_StdEPReq+0x48>
 800eeb0:	b303      	cbz	r3, 800eef4 <USBD_StdEPReq+0x58>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eeb2:	2180      	movs	r1, #128	; 0x80
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	f000 fbbd 	bl	800f634 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eeba:	2100      	movs	r1, #0
 800eebc:	4620      	mov	r0, r4
 800eebe:	f000 fbb9 	bl	800f634 <USBD_LL_StallEP>
}
 800eec2:	2000      	movs	r0, #0
 800eec4:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800eec6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800eeca:	2b02      	cmp	r3, #2
 800eecc:	b2da      	uxtb	r2, r3
 800eece:	d04e      	beq.n	800ef6e <USBD_StdEPReq+0xd2>
 800eed0:	2a03      	cmp	r2, #3
 800eed2:	d1ee      	bne.n	800eeb2 <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eed4:	886b      	ldrh	r3, [r5, #2]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d1f3      	bne.n	800eec2 <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 800eeda:	064e      	lsls	r6, r1, #25
 800eedc:	d172      	bne.n	800efc4 <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 800eede:	4620      	mov	r0, r4
 800eee0:	f000 f8ea 	bl	800f0b8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eee4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800eee8:	4629      	mov	r1, r5
 800eeea:	4620      	mov	r0, r4
 800eeec:	689b      	ldr	r3, [r3, #8]
}
 800eeee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eef2:	4718      	bx	r3
      switch (req->bRequest)
 800eef4:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 800eef6:	888a      	ldrh	r2, [r1, #4]
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 800eefc:	d0e3      	beq.n	800eec6 <USBD_StdEPReq+0x2a>
 800eefe:	2b03      	cmp	r3, #3
 800ef00:	d024      	beq.n	800ef4c <USBD_StdEPReq+0xb0>
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d1d5      	bne.n	800eeb2 <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 800ef06:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ef0a:	2b02      	cmp	r3, #2
 800ef0c:	b2d8      	uxtb	r0, r3
 800ef0e:	d037      	beq.n	800ef80 <USBD_StdEPReq+0xe4>
 800ef10:	2803      	cmp	r0, #3
 800ef12:	d1ce      	bne.n	800eeb2 <USBD_StdEPReq+0x16>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ef14:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800ef18:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ef1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ef1e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800ef22:	d43e      	bmi.n	800efa2 <USBD_StdEPReq+0x106>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ef24:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d0c2      	beq.n	800eeb2 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef2c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800ef30:	2514      	movs	r5, #20
 800ef32:	fb05 4503 	mla	r5, r5, r3, r4
 800ef36:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d13c      	bne.n	800efb8 <USBD_StdEPReq+0x11c>
                pep->status = 0x0001U;
 800ef3e:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef40:	2202      	movs	r2, #2
 800ef42:	4629      	mov	r1, r5
 800ef44:	4620      	mov	r0, r4
 800ef46:	f000 f887 	bl	800f058 <USBD_CtlSendData>
              break;
 800ef4a:	e7ba      	b.n	800eec2 <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 800ef4c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ef50:	2b02      	cmp	r3, #2
 800ef52:	b2da      	uxtb	r2, r3
 800ef54:	d00b      	beq.n	800ef6e <USBD_StdEPReq+0xd2>
 800ef56:	2a03      	cmp	r2, #3
 800ef58:	d1ab      	bne.n	800eeb2 <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ef5a:	886b      	ldrh	r3, [r5, #2]
 800ef5c:	b91b      	cbnz	r3, 800ef66 <USBD_StdEPReq+0xca>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ef5e:	064a      	lsls	r2, r1, #25
 800ef60:	d001      	beq.n	800ef66 <USBD_StdEPReq+0xca>
 800ef62:	88eb      	ldrh	r3, [r5, #6]
 800ef64:	b39b      	cbz	r3, 800efce <USBD_StdEPReq+0x132>
              (void)USBD_CtlSendStatus(pdev);
 800ef66:	4620      	mov	r0, r4
 800ef68:	f000 f8a6 	bl	800f0b8 <USBD_CtlSendStatus>
              break;
 800ef6c:	e7a9      	b.n	800eec2 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef6e:	064b      	lsls	r3, r1, #25
 800ef70:	d09f      	beq.n	800eeb2 <USBD_StdEPReq+0x16>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ef72:	f000 fb5f 	bl	800f634 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef76:	2180      	movs	r1, #128	; 0x80
 800ef78:	4620      	mov	r0, r4
 800ef7a:	f000 fb5b 	bl	800f634 <USBD_LL_StallEP>
 800ef7e:	e7a0      	b.n	800eec2 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef80:	0648      	lsls	r0, r1, #25
 800ef82:	d196      	bne.n	800eeb2 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef84:	0611      	lsls	r1, r2, #24
              pep->status = 0x0000U;
 800ef86:	f04f 0300 	mov.w	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef8a:	f04f 0202 	mov.w	r2, #2
 800ef8e:	4620      	mov	r0, r4
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef90:	bf4c      	ite	mi
 800ef92:	f104 0114 	addmi.w	r1, r4, #20
 800ef96:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 800ef9a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef9c:	f000 f85c 	bl	800f058 <USBD_CtlSendData>
              break;
 800efa0:	e78f      	b.n	800eec2 <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800efa2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d084      	beq.n	800eeb2 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800efa8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800efac:	1c5d      	adds	r5, r3, #1
 800efae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800efb2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800efb6:	e7c0      	b.n	800ef3a <USBD_StdEPReq+0x9e>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800efb8:	4620      	mov	r0, r4
 800efba:	f000 fb57 	bl	800f66c <USBD_LL_IsStallEP>
 800efbe:	b120      	cbz	r0, 800efca <USBD_StdEPReq+0x12e>
                pep->status = 0x0001U;
 800efc0:	2301      	movs	r3, #1
 800efc2:	e7bc      	b.n	800ef3e <USBD_StdEPReq+0xa2>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800efc4:	f000 fb44 	bl	800f650 <USBD_LL_ClearStallEP>
 800efc8:	e789      	b.n	800eede <USBD_StdEPReq+0x42>
                pep->status = 0x0000U;
 800efca:	6028      	str	r0, [r5, #0]
 800efcc:	e7b8      	b.n	800ef40 <USBD_StdEPReq+0xa4>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800efce:	f000 fb31 	bl	800f634 <USBD_LL_StallEP>
 800efd2:	e7c8      	b.n	800ef66 <USBD_StdEPReq+0xca>

0800efd4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800efd4:	780b      	ldrb	r3, [r1, #0]
 800efd6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800efd8:	784b      	ldrb	r3, [r1, #1]
 800efda:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800efdc:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 800efde:	8043      	strh	r3, [r0, #2]
 800efe0:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 800efe2:	8083      	strh	r3, [r0, #4]
 800efe4:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 800efe6:	80c3      	strh	r3, [r0, #6]
}
 800efe8:	4770      	bx	lr
 800efea:	bf00      	nop

0800efec <USBD_CtlError>:
{
 800efec:	b510      	push	{r4, lr}
 800efee:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eff0:	2180      	movs	r1, #128	; 0x80
 800eff2:	f000 fb1f 	bl	800f634 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eff6:	2100      	movs	r1, #0
 800eff8:	4620      	mov	r0, r4
}
 800effa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800effe:	f000 bb19 	b.w	800f634 <USBD_LL_StallEP>
 800f002:	bf00      	nop

0800f004 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800f004:	b318      	cbz	r0, 800f04e <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800f006:	7803      	ldrb	r3, [r0, #0]
{
 800f008:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 800f00a:	b30b      	cbz	r3, 800f050 <USBD_GetString+0x4c>
 800f00c:	4604      	mov	r4, r0
 800f00e:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 800f012:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 800f016:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800f01a:	b2db      	uxtb	r3, r3
 800f01c:	2d00      	cmp	r5, #0
 800f01e:	d1f8      	bne.n	800f012 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f020:	3301      	adds	r3, #1
 800f022:	005b      	lsls	r3, r3, #1
 800f024:	b2dc      	uxtb	r4, r3
 800f026:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f028:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 800f02a:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f02c:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 800f02e:	7804      	ldrb	r4, [r0, #0]
 800f030:	b15c      	cbz	r4, 800f04a <USBD_GetString+0x46>
  idx++;
 800f032:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800f034:	2500      	movs	r5, #0
    idx++;
 800f036:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 800f038:	54cc      	strb	r4, [r1, r3]
    idx++;
 800f03a:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800f03c:	b2d2      	uxtb	r2, r2
    idx++;
 800f03e:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 800f040:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 800f042:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800f046:	2c00      	cmp	r4, #0
 800f048:	d1f5      	bne.n	800f036 <USBD_GetString+0x32>
}
 800f04a:	bc30      	pop	{r4, r5}
 800f04c:	4770      	bx	lr
 800f04e:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 800f050:	2402      	movs	r4, #2
 800f052:	4623      	mov	r3, r4
 800f054:	e7e7      	b.n	800f026 <USBD_GetString+0x22>
 800f056:	bf00      	nop

0800f058 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f058:	b510      	push	{r4, lr}
 800f05a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f05c:	2402      	movs	r4, #2
{
 800f05e:	460a      	mov	r2, r1
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f060:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f062:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 800f066:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f06a:	f000 fb21 	bl	800f6b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800f06e:	2000      	movs	r0, #0
 800f070:	bd10      	pop	{r4, pc}
 800f072:	bf00      	nop

0800f074 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f074:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f076:	2100      	movs	r1, #0
{
 800f078:	b508      	push	{r3, lr}
 800f07a:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f07c:	4662      	mov	r2, ip
 800f07e:	f000 fb17 	bl	800f6b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800f082:	2000      	movs	r0, #0
 800f084:	bd08      	pop	{r3, pc}
 800f086:	bf00      	nop

0800f088 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f088:	b510      	push	{r4, lr}
 800f08a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f08c:	2403      	movs	r4, #3
{
 800f08e:	460a      	mov	r2, r1
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f090:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f092:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 800f096:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f09a:	f000 fb17 	bl	800f6cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800f09e:	2000      	movs	r0, #0
 800f0a0:	bd10      	pop	{r4, pc}
 800f0a2:	bf00      	nop

0800f0a4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f0a4:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f0a6:	2100      	movs	r1, #0
{
 800f0a8:	b508      	push	{r3, lr}
 800f0aa:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f0ac:	4662      	mov	r2, ip
 800f0ae:	f000 fb0d 	bl	800f6cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800f0b2:	2000      	movs	r0, #0
 800f0b4:	bd08      	pop	{r3, pc}
 800f0b6:	bf00      	nop

0800f0b8 <USBD_CtlSendStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f0b8:	2300      	movs	r3, #0
{
 800f0ba:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f0bc:	2404      	movs	r4, #4
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f0be:	461a      	mov	r2, r3
 800f0c0:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f0c2:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f0c6:	f000 faf3 	bl	800f6b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800f0ca:	2000      	movs	r0, #0
 800f0cc:	bd10      	pop	{r4, pc}
 800f0ce:	bf00      	nop

0800f0d0 <USBD_CtlReceiveStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f0d0:	2300      	movs	r3, #0
{
 800f0d2:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f0d4:	2405      	movs	r4, #5
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f0da:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f0de:	f000 faf5 	bl	800f6cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800f0e2:	2000      	movs	r0, #0
 800f0e4:	bd10      	pop	{r4, pc}
 800f0e6:	bf00      	nop

0800f0e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f0e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	4919      	ldr	r1, [pc, #100]	; (800f154 <MX_USB_DEVICE_Init+0x6c>)
 800f0ee:	481a      	ldr	r0, [pc, #104]	; (800f158 <MX_USB_DEVICE_Init+0x70>)
 800f0f0:	f7ff fb72 	bl	800e7d8 <USBD_Init>
 800f0f4:	b988      	cbnz	r0, 800f11a <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f0f6:	4919      	ldr	r1, [pc, #100]	; (800f15c <MX_USB_DEVICE_Init+0x74>)
 800f0f8:	4817      	ldr	r0, [pc, #92]	; (800f158 <MX_USB_DEVICE_Init+0x70>)
 800f0fa:	f7ff fb81 	bl	800e800 <USBD_RegisterClass>
 800f0fe:	b9a0      	cbnz	r0, 800f12a <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f100:	4917      	ldr	r1, [pc, #92]	; (800f160 <MX_USB_DEVICE_Init+0x78>)
 800f102:	4815      	ldr	r0, [pc, #84]	; (800f158 <MX_USB_DEVICE_Init+0x70>)
 800f104:	f7ff fb16 	bl	800e734 <USBD_CDC_RegisterInterface>
 800f108:	b9b8      	cbnz	r0, 800f13a <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f10a:	4813      	ldr	r0, [pc, #76]	; (800f158 <MX_USB_DEVICE_Init+0x70>)
 800f10c:	f7ff fb92 	bl	800e834 <USBD_Start>
 800f110:	b9d0      	cbnz	r0, 800f148 <MX_USB_DEVICE_Init+0x60>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800f116:	f7fb b831 	b.w	800a17c <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 800f11a:	f7f6 f837 	bl	800518c <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f11e:	490f      	ldr	r1, [pc, #60]	; (800f15c <MX_USB_DEVICE_Init+0x74>)
 800f120:	480d      	ldr	r0, [pc, #52]	; (800f158 <MX_USB_DEVICE_Init+0x70>)
 800f122:	f7ff fb6d 	bl	800e800 <USBD_RegisterClass>
 800f126:	2800      	cmp	r0, #0
 800f128:	d0ea      	beq.n	800f100 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800f12a:	f7f6 f82f 	bl	800518c <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f12e:	490c      	ldr	r1, [pc, #48]	; (800f160 <MX_USB_DEVICE_Init+0x78>)
 800f130:	4809      	ldr	r0, [pc, #36]	; (800f158 <MX_USB_DEVICE_Init+0x70>)
 800f132:	f7ff faff 	bl	800e734 <USBD_CDC_RegisterInterface>
 800f136:	2800      	cmp	r0, #0
 800f138:	d0e7      	beq.n	800f10a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800f13a:	f7f6 f827 	bl	800518c <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f13e:	4806      	ldr	r0, [pc, #24]	; (800f158 <MX_USB_DEVICE_Init+0x70>)
 800f140:	f7ff fb78 	bl	800e834 <USBD_Start>
 800f144:	2800      	cmp	r0, #0
 800f146:	d0e4      	beq.n	800f112 <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 800f148:	f7f6 f820 	bl	800518c <Error_Handler>
}
 800f14c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800f150:	f7fb b814 	b.w	800a17c <HAL_PWREx_EnableUSBVoltageDetector>
 800f154:	24000508 	.word	0x24000508
 800f158:	2400d400 	.word	0x2400d400
 800f15c:	240003dc 	.word	0x240003dc
 800f160:	240004ec 	.word	0x240004ec

0800f164 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800f164:	2000      	movs	r0, #0
 800f166:	4770      	bx	lr

0800f168 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800f168:	2000      	movs	r0, #0
 800f16a:	4770      	bx	lr

0800f16c <CDC_Receive_FS>:
{
 800f16c:	b570      	push	{r4, r5, r6, lr}
 800f16e:	4604      	mov	r4, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f170:	4e08      	ldr	r6, [pc, #32]	; (800f194 <CDC_Receive_FS+0x28>)
{
 800f172:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f174:	4630      	mov	r0, r6
 800f176:	4621      	mov	r1, r4
 800f178:	f7ff faf0 	bl	800e75c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800f17c:	4630      	mov	r0, r6
 800f17e:	f7ff fb0f 	bl	800e7a0 <USBD_CDC_ReceivePacket>
 800f182:	682a      	ldr	r2, [r5, #0]
 800f184:	4b04      	ldr	r3, [pc, #16]	; (800f198 <CDC_Receive_FS+0x2c>)
  memcpy(UartRXString, Buf, USBRXLength);
 800f186:	4621      	mov	r1, r4
 800f188:	4804      	ldr	r0, [pc, #16]	; (800f19c <CDC_Receive_FS+0x30>)
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800f18a:	601a      	str	r2, [r3, #0]
  memcpy(UartRXString, Buf, USBRXLength);
 800f18c:	f001 fc0e 	bl	80109ac <memcpy>
}
 800f190:	2000      	movs	r0, #0
 800f192:	bd70      	pop	{r4, r5, r6, pc}
 800f194:	2400d400 	.word	0x2400d400
 800f198:	24007d0c 	.word	0x24007d0c
 800f19c:	24007d14 	.word	0x24007d14

0800f1a0 <CDC_Init_FS>:
{
 800f1a0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f1a2:	4c06      	ldr	r4, [pc, #24]	; (800f1bc <CDC_Init_FS+0x1c>)
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	4906      	ldr	r1, [pc, #24]	; (800f1c0 <CDC_Init_FS+0x20>)
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	f7ff facb 	bl	800e744 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f1ae:	4905      	ldr	r1, [pc, #20]	; (800f1c4 <CDC_Init_FS+0x24>)
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	f7ff fad3 	bl	800e75c <USBD_CDC_SetRxBuffer>
}
 800f1b6:	2000      	movs	r0, #0
 800f1b8:	bd10      	pop	{r4, pc}
 800f1ba:	bf00      	nop
 800f1bc:	2400d400 	.word	0x2400d400
 800f1c0:	2400ded0 	.word	0x2400ded0
 800f1c4:	2400d6d0 	.word	0x2400d6d0

0800f1c8 <CDC_Control_FS>:
  switch(cmd)
 800f1c8:	2820      	cmp	r0, #32
 800f1ca:	d00a      	beq.n	800f1e2 <CDC_Control_FS+0x1a>
 800f1cc:	2821      	cmp	r0, #33	; 0x21
 800f1ce:	d106      	bne.n	800f1de <CDC_Control_FS+0x16>
    	 memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800f1d0:	4b09      	ldr	r3, [pc, #36]	; (800f1f8 <CDC_Control_FS+0x30>)
 800f1d2:	6818      	ldr	r0, [r3, #0]
 800f1d4:	889a      	ldrh	r2, [r3, #4]
 800f1d6:	799b      	ldrb	r3, [r3, #6]
 800f1d8:	6008      	str	r0, [r1, #0]
 800f1da:	808a      	strh	r2, [r1, #4]
 800f1dc:	718b      	strb	r3, [r1, #6]
}
 800f1de:	2000      	movs	r0, #0
 800f1e0:	4770      	bx	lr
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800f1e2:	4b05      	ldr	r3, [pc, #20]	; (800f1f8 <CDC_Control_FS+0x30>)
 800f1e4:	6808      	ldr	r0, [r1, #0]
 800f1e6:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 800f1ea:	798a      	ldrb	r2, [r1, #6]
 800f1ec:	6018      	str	r0, [r3, #0]
}
 800f1ee:	2000      	movs	r0, #0
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800f1f0:	f8a3 c004 	strh.w	ip, [r3, #4]
 800f1f4:	719a      	strb	r2, [r3, #6]
}
 800f1f6:	4770      	bx	lr
 800f1f8:	24000500 	.word	0x24000500

0800f1fc <CDC_Transmit_FS>:
{
 800f1fc:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f1fe:	4c09      	ldr	r4, [pc, #36]	; (800f224 <CDC_Transmit_FS+0x28>)
 800f200:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800f204:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f208:	b10b      	cbz	r3, 800f20e <CDC_Transmit_FS+0x12>
}
 800f20a:	2001      	movs	r0, #1
 800f20c:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f20e:	460a      	mov	r2, r1
 800f210:	4601      	mov	r1, r0
 800f212:	4620      	mov	r0, r4
 800f214:	f7ff fa96 	bl	800e744 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f218:	4620      	mov	r0, r4
}
 800f21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f21e:	f7ff baa7 	b.w	800e770 <USBD_CDC_TransmitPacket>
 800f222:	bf00      	nop
 800f224:	2400d400 	.word	0x2400d400

0800f228 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f228:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800f22a:	4801      	ldr	r0, [pc, #4]	; (800f230 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800f22c:	800b      	strh	r3, [r1, #0]
}
 800f22e:	4770      	bx	lr
 800f230:	24000524 	.word	0x24000524

0800f234 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f234:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800f236:	4801      	ldr	r0, [pc, #4]	; (800f23c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800f238:	800b      	strh	r3, [r1, #0]
}
 800f23a:	4770      	bx	lr
 800f23c:	24000538 	.word	0x24000538

0800f240 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f240:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f242:	4c04      	ldr	r4, [pc, #16]	; (800f254 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800f244:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f246:	4804      	ldr	r0, [pc, #16]	; (800f258 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800f248:	4621      	mov	r1, r4
 800f24a:	f7ff fedb 	bl	800f004 <USBD_GetString>
  return USBD_StrDesc;
}
 800f24e:	4620      	mov	r0, r4
 800f250:	bd10      	pop	{r4, pc}
 800f252:	bf00      	nop
 800f254:	2400e6d0 	.word	0x2400e6d0
 800f258:	0801afb8 	.word	0x0801afb8

0800f25c <USBD_FS_ProductStrDescriptor>:
{
 800f25c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f25e:	4c04      	ldr	r4, [pc, #16]	; (800f270 <USBD_FS_ProductStrDescriptor+0x14>)
{
 800f260:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f262:	4804      	ldr	r0, [pc, #16]	; (800f274 <USBD_FS_ProductStrDescriptor+0x18>)
 800f264:	4621      	mov	r1, r4
 800f266:	f7ff fecd 	bl	800f004 <USBD_GetString>
}
 800f26a:	4620      	mov	r0, r4
 800f26c:	bd10      	pop	{r4, pc}
 800f26e:	bf00      	nop
 800f270:	2400e6d0 	.word	0x2400e6d0
 800f274:	0801afcc 	.word	0x0801afcc

0800f278 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f278:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f27a:	4c04      	ldr	r4, [pc, #16]	; (800f28c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800f27c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f27e:	4804      	ldr	r0, [pc, #16]	; (800f290 <USBD_FS_ConfigStrDescriptor+0x18>)
 800f280:	4621      	mov	r1, r4
 800f282:	f7ff febf 	bl	800f004 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800f286:	4620      	mov	r0, r4
 800f288:	bd10      	pop	{r4, pc}
 800f28a:	bf00      	nop
 800f28c:	2400e6d0 	.word	0x2400e6d0
 800f290:	0801afe4 	.word	0x0801afe4

0800f294 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f294:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f296:	4c04      	ldr	r4, [pc, #16]	; (800f2a8 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800f298:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f29a:	4804      	ldr	r0, [pc, #16]	; (800f2ac <USBD_FS_InterfaceStrDescriptor+0x18>)
 800f29c:	4621      	mov	r1, r4
 800f29e:	f7ff feb1 	bl	800f004 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	bd10      	pop	{r4, pc}
 800f2a6:	bf00      	nop
 800f2a8:	2400e6d0 	.word	0x2400e6d0
 800f2ac:	0801aff0 	.word	0x0801aff0

0800f2b0 <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f2b0:	4a46      	ldr	r2, [pc, #280]	; (800f3cc <USBD_FS_SerialStrDescriptor+0x11c>)
  *length = USB_SIZ_STRING_SERIAL;
 800f2b2:	f04f 0c1a 	mov.w	ip, #26
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f2b6:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800f2ba:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
  *length = USB_SIZ_STRING_SERIAL;
 800f2be:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 800f2c2:	18c3      	adds	r3, r0, r3
 800f2c4:	d101      	bne.n	800f2ca <USBD_FS_SerialStrDescriptor+0x1a>
}
 800f2c6:	4842      	ldr	r0, [pc, #264]	; (800f3d0 <USBD_FS_SerialStrDescriptor+0x120>)
 800f2c8:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 800f2ca:	0f18      	lsrs	r0, r3, #28
 800f2cc:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f2d0:	f8d2 1804 	ldr.w	r1, [r2, #2052]	; 0x804
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800f2d4:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800f2d8:	4a3d      	ldr	r2, [pc, #244]	; (800f3d0 <USBD_FS_SerialStrDescriptor+0x120>)
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f2da:	bf2c      	ite	cs
 800f2dc:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f2de:	3030      	addcc	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800f2e0:	f882 c003 	strb.w	ip, [r2, #3]
 800f2e4:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800f2e8:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800f2ea:	f3c3 6003 	ubfx	r0, r3, #24, #4
    pbuf[2 * idx + 1] = 0;
 800f2ee:	f882 c005 	strb.w	ip, [r2, #5]
 800f2f2:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800f2f6:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800f2f8:	f882 c007 	strb.w	ip, [r2, #7]
 800f2fc:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f300:	bf8c      	ite	hi
 800f302:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f304:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800f306:	f882 c009 	strb.w	ip, [r2, #9]
 800f30a:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800f30e:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800f310:	f3c3 5003 	ubfx	r0, r3, #20, #4
    pbuf[2 * idx + 1] = 0;
 800f314:	f882 c00b 	strb.w	ip, [r2, #11]
 800f318:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800f31c:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800f31e:	f882 c00d 	strb.w	ip, [r2, #13]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f322:	bf8c      	ite	hi
 800f324:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f326:	3030      	addls	r0, #48	; 0x30
 800f328:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800f32a:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800f32e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f330:	bf8c      	ite	hi
 800f332:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f334:	3030      	addls	r0, #48	; 0x30
 800f336:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800f338:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800f33c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f33e:	bf8c      	ite	hi
 800f340:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f342:	3030      	addls	r0, #48	; 0x30
 800f344:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800f346:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800f34a:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f34c:	bf8c      	ite	hi
 800f34e:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f350:	3030      	addls	r0, #48	; 0x30
 800f352:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 800f354:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800f358:	f003 030f 	and.w	r3, r3, #15
 800f35c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f35e:	bf8c      	ite	hi
 800f360:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f362:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 800f364:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800f366:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 800f368:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800f36c:	bf94      	ite	ls
 800f36e:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f370:	3337      	addhi	r3, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800f372:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 800f376:	73d0      	strb	r0, [r2, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f378:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800f37a:	ea4f 7311 	mov.w	r3, r1, lsr #28
    pbuf[2 * idx + 1] = 0;
 800f37e:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f382:	bf2c      	ite	cs
 800f384:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f386:	3330      	addcc	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800f388:	7450      	strb	r0, [r2, #17]
 800f38a:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800f38c:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800f38e:	f3c1 6303 	ubfx	r3, r1, #24, #4
    pbuf[2 * idx + 1] = 0;
 800f392:	74d0      	strb	r0, [r2, #19]
 800f394:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800f396:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 800f398:	7550      	strb	r0, [r2, #21]
 800f39a:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f39e:	bf8c      	ite	hi
 800f3a0:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f3a2:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800f3a4:	75d0      	strb	r0, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 800f3a6:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800f3a8:	f3c1 5303 	ubfx	r3, r1, #20, #4
}
 800f3ac:	4808      	ldr	r0, [pc, #32]	; (800f3d0 <USBD_FS_SerialStrDescriptor+0x120>)
    if (((value >> 28)) < 0xA)
 800f3ae:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f3b0:	bf8c      	ite	hi
 800f3b2:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f3b4:	3330      	addls	r3, #48	; 0x30
 800f3b6:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800f3b8:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800f3bc:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800f3be:	bf94      	ite	ls
 800f3c0:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f3c2:	3337      	addhi	r3, #55	; 0x37
 800f3c4:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	7653      	strb	r3, [r2, #25]
}
 800f3ca:	4770      	bx	lr
 800f3cc:	1ff1e000 	.word	0x1ff1e000
 800f3d0:	2400053c 	.word	0x2400053c
 800f3d4:	00000000 	.word	0x00000000

0800f3d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f3d8:	b510      	push	{r4, lr}
 800f3da:	b0b6      	sub	sp, #216	; 0xd8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f3dc:	2100      	movs	r1, #0
{
 800f3de:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f3e0:	22bc      	movs	r2, #188	; 0xbc
 800f3e2:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f3e4:	9106      	str	r1, [sp, #24]
 800f3e6:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800f3ea:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f3ee:	f001 faeb 	bl	80109c8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f3f2:	4b25      	ldr	r3, [pc, #148]	; (800f488 <HAL_PCD_MspInit+0xb0>)
 800f3f4:	6822      	ldr	r2, [r4, #0]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d001      	beq.n	800f3fe <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f3fa:	b036      	add	sp, #216	; 0xd8
 800f3fc:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f3fe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f402:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f406:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f408:	9207      	str	r2, [sp, #28]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f40a:	9328      	str	r3, [sp, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f40c:	f7fb fdf4 	bl	800aff8 <HAL_RCCEx_PeriphCLKConfig>
 800f410:	bb90      	cbnz	r0, 800f478 <HAL_PCD_MspInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f412:	4c1e      	ldr	r4, [pc, #120]	; (800f48c <HAL_PCD_MspInit+0xb4>)
    HAL_PWREx_EnableUSBVoltageDetector();
 800f414:	f7fa feb2 	bl	800a17c <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f418:	220a      	movs	r2, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f41a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f41c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f420:	481b      	ldr	r0, [pc, #108]	; (800f490 <HAL_PCD_MspInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f422:	f043 0301 	orr.w	r3, r3, #1
 800f426:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800f42a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f42e:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f430:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f432:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f436:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800f480 <HAL_PCD_MspInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f43a:	9300      	str	r3, [sp, #0]
 800f43c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f43e:	2300      	movs	r3, #0
 800f440:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f444:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f448:	f7f9 ff22 	bl	8009290 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f44c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f450:	2200      	movs	r2, #0
 800f452:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f454:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f458:	4611      	mov	r1, r2
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f45a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800f45e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800f462:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f466:	9301      	str	r3, [sp, #4]
 800f468:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f46a:	f7f8 fa2d 	bl	80078c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f46e:	2065      	movs	r0, #101	; 0x65
 800f470:	f7f8 fa68 	bl	8007944 <HAL_NVIC_EnableIRQ>
}
 800f474:	b036      	add	sp, #216	; 0xd8
 800f476:	bd10      	pop	{r4, pc}
      Error_Handler();
 800f478:	f7f5 fe88 	bl	800518c <Error_Handler>
 800f47c:	e7c9      	b.n	800f412 <HAL_PCD_MspInit+0x3a>
 800f47e:	bf00      	nop
 800f480:	00001800 	.word	0x00001800
 800f484:	00000002 	.word	0x00000002
 800f488:	40080000 	.word	0x40080000
 800f48c:	58024400 	.word	0x58024400
 800f490:	58020000 	.word	0x58020000

0800f494 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f494:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800f498:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800f49c:	f7ff b9dc 	b.w	800e858 <USBD_LL_SetupStage>

0800f4a0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f4a0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800f4a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f4a8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800f4ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f4b0:	f7ff ba02 	b.w	800e8b8 <USBD_LL_DataOutStage>

0800f4b4 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f4b4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800f4b8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f4bc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800f4c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f4c2:	f7ff ba2d 	b.w	800e920 <USBD_LL_DataInStage>
 800f4c6:	bf00      	nop

0800f4c8 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f4c8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800f4cc:	f7ff bacc 	b.w	800ea68 <USBD_LL_SOF>

0800f4d0 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f4d0:	68c1      	ldr	r1, [r0, #12]
{
 800f4d2:	b510      	push	{r4, lr}
 800f4d4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f4d6:	b111      	cbz	r1, 800f4de <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f4d8:	2902      	cmp	r1, #2
 800f4da:	d10a      	bne.n	800f4f2 <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 800f4dc:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f4de:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800f4e2:	f7ff faa5 	bl	800ea30 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f4e6:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 800f4ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f4ee:	f7ff ba73 	b.w	800e9d8 <USBD_LL_Reset>
    Error_Handler();
 800f4f2:	f7f5 fe4b 	bl	800518c <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f4f6:	2101      	movs	r1, #1
 800f4f8:	e7f1      	b.n	800f4de <HAL_PCD_ResetCallback+0xe>
 800f4fa:	bf00      	nop

0800f4fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4fc:	b510      	push	{r4, lr}
 800f4fe:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f500:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800f504:	f7ff fa98 	bl	800ea38 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f508:	6822      	ldr	r2, [r4, #0]
 800f50a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800f50e:	f043 0301 	orr.w	r3, r3, #1
 800f512:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f516:	6a23      	ldr	r3, [r4, #32]
 800f518:	b123      	cbz	r3, 800f524 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f51a:	4a03      	ldr	r2, [pc, #12]	; (800f528 <HAL_PCD_SuspendCallback+0x2c>)
 800f51c:	6913      	ldr	r3, [r2, #16]
 800f51e:	f043 0306 	orr.w	r3, r3, #6
 800f522:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f524:	bd10      	pop	{r4, pc}
 800f526:	bf00      	nop
 800f528:	e000ed00 	.word	0xe000ed00

0800f52c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f52c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800f530:	f7ff ba8e 	b.w	800ea50 <USBD_LL_Resume>

0800f534 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f534:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800f538:	f7ff babe 	b.w	800eab8 <USBD_LL_IsoOUTIncomplete>

0800f53c <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f53c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800f540:	f7ff baa6 	b.w	800ea90 <USBD_LL_IsoINIncomplete>

0800f544 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f544:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800f548:	f7ff baca 	b.w	800eae0 <USBD_LL_DevConnected>

0800f54c <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f54c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800f550:	f7ff bac8 	b.w	800eae4 <USBD_LL_DevDisconnected>
 800f554:	0000      	movs	r0, r0
	...

0800f558 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f558:	7802      	ldrb	r2, [r0, #0]
 800f55a:	b10a      	cbz	r2, 800f560 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
}
 800f55c:	2000      	movs	r0, #0
 800f55e:	4770      	bx	lr
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f560:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800f5c0 <USBD_LL_Init+0x68>
  hpcd_USB_OTG_FS.pData = pdev;
 800f564:	4b1a      	ldr	r3, [pc, #104]	; (800f5d0 <USBD_LL_Init+0x78>)
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f566:	491b      	ldr	r1, [pc, #108]	; (800f5d4 <USBD_LL_Init+0x7c>)
{
 800f568:	b510      	push	{r4, lr}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f56a:	ed83 7b06 	vstr	d7, [r3, #24]
 800f56e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f5c8 <USBD_LL_Init+0x70>
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f572:	2409      	movs	r4, #9
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f574:	6019      	str	r1, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f576:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.pData = pdev;
 800f578:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f57c:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f580:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f582:	605c      	str	r4, [r3, #4]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f584:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f586:	ed83 7b08 	vstr	d7, [r3, #32]
 800f58a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f58e:	e9c3 1203 	strd	r1, r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f592:	f7fa f841 	bl	8009618 <HAL_PCD_Init>
 800f596:	b978      	cbnz	r0, 800f5b8 <USBD_LL_Init+0x60>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f598:	2180      	movs	r1, #128	; 0x80
 800f59a:	480d      	ldr	r0, [pc, #52]	; (800f5d0 <USBD_LL_Init+0x78>)
 800f59c:	f7fa fdaa 	bl	800a0f4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f5a0:	2240      	movs	r2, #64	; 0x40
 800f5a2:	2100      	movs	r1, #0
 800f5a4:	480a      	ldr	r0, [pc, #40]	; (800f5d0 <USBD_LL_Init+0x78>)
 800f5a6:	f7fa fd7b 	bl	800a0a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f5aa:	2280      	movs	r2, #128	; 0x80
 800f5ac:	2101      	movs	r1, #1
 800f5ae:	4808      	ldr	r0, [pc, #32]	; (800f5d0 <USBD_LL_Init+0x78>)
 800f5b0:	f7fa fd76 	bl	800a0a0 <HAL_PCDEx_SetTxFiFo>
}
 800f5b4:	2000      	movs	r0, #0
 800f5b6:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800f5b8:	f7f5 fde8 	bl	800518c <Error_Handler>
 800f5bc:	e7ec      	b.n	800f598 <USBD_LL_Init+0x40>
 800f5be:	bf00      	nop
 800f5c0:	00000002 	.word	0x00000002
	...
 800f5d0:	2400e8d0 	.word	0x2400e8d0
 800f5d4:	40080000 	.word	0x40080000

0800f5d8 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800f5d8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800f5dc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800f5de:	f7fa f8b1 	bl	8009744 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800f5e2:	2803      	cmp	r0, #3
 800f5e4:	d802      	bhi.n	800f5ec <USBD_LL_Start+0x14>
 800f5e6:	4b02      	ldr	r3, [pc, #8]	; (800f5f0 <USBD_LL_Start+0x18>)
 800f5e8:	5c18      	ldrb	r0, [r3, r0]
}
 800f5ea:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 800f5ec:	2003      	movs	r0, #3
}
 800f5ee:	bd08      	pop	{r3, pc}
 800f5f0:	0801b000 	.word	0x0801b000

0800f5f4 <USBD_LL_OpenEP>:
{
 800f5f4:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f5f6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f5fe:	4663      	mov	r3, ip
 800f600:	f7fa fc00 	bl	8009e04 <HAL_PCD_EP_Open>
  switch (hal_status)
 800f604:	2803      	cmp	r0, #3
 800f606:	d802      	bhi.n	800f60e <USBD_LL_OpenEP+0x1a>
 800f608:	4b02      	ldr	r3, [pc, #8]	; (800f614 <USBD_LL_OpenEP+0x20>)
 800f60a:	5c18      	ldrb	r0, [r3, r0]
}
 800f60c:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f60e:	2003      	movs	r0, #3
}
 800f610:	bd08      	pop	{r3, pc}
 800f612:	bf00      	nop
 800f614:	0801b000 	.word	0x0801b000

0800f618 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f618:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800f61c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f61e:	f7fa fc2f 	bl	8009e80 <HAL_PCD_EP_Close>
  switch (hal_status)
 800f622:	2803      	cmp	r0, #3
 800f624:	d802      	bhi.n	800f62c <USBD_LL_CloseEP+0x14>
 800f626:	4b02      	ldr	r3, [pc, #8]	; (800f630 <USBD_LL_CloseEP+0x18>)
 800f628:	5c18      	ldrb	r0, [r3, r0]
}
 800f62a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f62c:	2003      	movs	r0, #3
}
 800f62e:	bd08      	pop	{r3, pc}
 800f630:	0801b000 	.word	0x0801b000

0800f634 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f634:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800f638:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f63a:	f7fa fcb1 	bl	8009fa0 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800f63e:	2803      	cmp	r0, #3
 800f640:	d802      	bhi.n	800f648 <USBD_LL_StallEP+0x14>
 800f642:	4b02      	ldr	r3, [pc, #8]	; (800f64c <USBD_LL_StallEP+0x18>)
 800f644:	5c18      	ldrb	r0, [r3, r0]
}
 800f646:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f648:	2003      	movs	r0, #3
}
 800f64a:	bd08      	pop	{r3, pc}
 800f64c:	0801b000 	.word	0x0801b000

0800f650 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f650:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800f654:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f656:	f7fa fce7 	bl	800a028 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800f65a:	2803      	cmp	r0, #3
 800f65c:	d802      	bhi.n	800f664 <USBD_LL_ClearStallEP+0x14>
 800f65e:	4b02      	ldr	r3, [pc, #8]	; (800f668 <USBD_LL_ClearStallEP+0x18>)
 800f660:	5c18      	ldrb	r0, [r3, r0]
}
 800f662:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f664:	2003      	movs	r0, #3
}
 800f666:	bd08      	pop	{r3, pc}
 800f668:	0801b000 	.word	0x0801b000

0800f66c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800f66c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f66e:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800f672:	d406      	bmi.n	800f682 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f674:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800f678:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f67c:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 800f680:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f682:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800f686:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800f68a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f68e:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 800f692:	4770      	bx	lr

0800f694 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f694:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800f698:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f69a:	f7fa fb9d 	bl	8009dd8 <HAL_PCD_SetAddress>
  switch (hal_status)
 800f69e:	2803      	cmp	r0, #3
 800f6a0:	d802      	bhi.n	800f6a8 <USBD_LL_SetUSBAddress+0x14>
 800f6a2:	4b02      	ldr	r3, [pc, #8]	; (800f6ac <USBD_LL_SetUSBAddress+0x18>)
 800f6a4:	5c18      	ldrb	r0, [r3, r0]
}
 800f6a6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f6a8:	2003      	movs	r0, #3
}
 800f6aa:	bd08      	pop	{r3, pc}
 800f6ac:	0801b000 	.word	0x0801b000

0800f6b0 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f6b0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800f6b4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f6b6:	f7fa fc4b 	bl	8009f50 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800f6ba:	2803      	cmp	r0, #3
 800f6bc:	d802      	bhi.n	800f6c4 <USBD_LL_Transmit+0x14>
 800f6be:	4b02      	ldr	r3, [pc, #8]	; (800f6c8 <USBD_LL_Transmit+0x18>)
 800f6c0:	5c18      	ldrb	r0, [r3, r0]
}
 800f6c2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f6c4:	2003      	movs	r0, #3
}
 800f6c6:	bd08      	pop	{r3, pc}
 800f6c8:	0801b000 	.word	0x0801b000

0800f6cc <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f6cc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800f6d0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f6d2:	f7fa fc0b 	bl	8009eec <HAL_PCD_EP_Receive>
  switch (hal_status)
 800f6d6:	2803      	cmp	r0, #3
 800f6d8:	d802      	bhi.n	800f6e0 <USBD_LL_PrepareReceive+0x14>
 800f6da:	4b02      	ldr	r3, [pc, #8]	; (800f6e4 <USBD_LL_PrepareReceive+0x18>)
 800f6dc:	5c18      	ldrb	r0, [r3, r0]
}
 800f6de:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f6e0:	2003      	movs	r0, #3
}
 800f6e2:	bd08      	pop	{r3, pc}
 800f6e4:	0801b000 	.word	0x0801b000

0800f6e8 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f6e8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800f6ec:	f7fa bc26 	b.w	8009f3c <HAL_PCD_EP_GetRxCount>

0800f6f0 <USBD_static_malloc>:
}
 800f6f0:	4800      	ldr	r0, [pc, #0]	; (800f6f4 <USBD_static_malloc+0x4>)
 800f6f2:	4770      	bx	lr
 800f6f4:	2400ecd8 	.word	0x2400ecd8

0800f6f8 <USBD_static_free>:
}
 800f6f8:	4770      	bx	lr
 800f6fa:	bf00      	nop

0800f6fc <arm_cfft_radix8by2_f32>:
 800f6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f700:	4607      	mov	r7, r0
 800f702:	4608      	mov	r0, r1
 800f704:	ed2d 8b06 	vpush	{d8-d10}
 800f708:	f8b7 c000 	ldrh.w	ip, [r7]
 800f70c:	687a      	ldr	r2, [r7, #4]
 800f70e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800f712:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800f716:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800f71a:	f000 80ac 	beq.w	800f876 <arm_cfft_radix8by2_f32+0x17a>
 800f71e:	008c      	lsls	r4, r1, #2
 800f720:	f100 0310 	add.w	r3, r0, #16
 800f724:	3210      	adds	r2, #16
 800f726:	f108 0610 	add.w	r6, r8, #16
 800f72a:	3410      	adds	r4, #16
 800f72c:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800f730:	1905      	adds	r5, r0, r4
 800f732:	4444      	add	r4, r8
 800f734:	ed16 7a04 	vldr	s14, [r6, #-16]
 800f738:	3310      	adds	r3, #16
 800f73a:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 800f73e:	3510      	adds	r5, #16
 800f740:	ed56 0a03 	vldr	s1, [r6, #-12]
 800f744:	3210      	adds	r2, #16
 800f746:	ee74 9a87 	vadd.f32	s19, s9, s14
 800f74a:	ed56 7a02 	vldr	s15, [r6, #-8]
 800f74e:	ed56 2a01 	vldr	s5, [r6, #-4]
 800f752:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800f756:	ed54 5a04 	vldr	s11, [r4, #-16]
 800f75a:	3610      	adds	r6, #16
 800f75c:	ed14 5a03 	vldr	s10, [r4, #-12]
 800f760:	3410      	adds	r4, #16
 800f762:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 800f766:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800f76a:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800f76e:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800f772:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 800f776:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800f77a:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 800f77e:	ee33 8a83 	vadd.f32	s16, s7, s6
 800f782:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800f786:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800f78a:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800f78e:	ee34 0a06 	vadd.f32	s0, s8, s12
 800f792:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 800f796:	ee77 aa20 	vadd.f32	s21, s14, s1
 800f79a:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 800f79e:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800f7a2:	ee72 9a22 	vadd.f32	s19, s4, s5
 800f7a6:	ee71 8a05 	vadd.f32	s17, s2, s10
 800f7aa:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 800f7ae:	ee37 7a60 	vsub.f32	s14, s14, s1
 800f7b2:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 800f7b6:	ee35 5a41 	vsub.f32	s10, s10, s2
 800f7ba:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 800f7be:	ee36 6a44 	vsub.f32	s12, s12, s8
 800f7c2:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 800f7c6:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 800f7ca:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800f7ce:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 800f7d2:	ee72 7a62 	vsub.f32	s15, s4, s5
 800f7d6:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 800f7da:	ee73 2a63 	vsub.f32	s5, s6, s7
 800f7de:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800f7e2:	4563      	cmp	r3, ip
 800f7e4:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800f7e8:	ee24 3a84 	vmul.f32	s6, s9, s8
 800f7ec:	ee27 2a26 	vmul.f32	s4, s14, s13
 800f7f0:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800f7f4:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800f7f8:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f7fc:	ee65 5a84 	vmul.f32	s11, s11, s8
 800f800:	ee65 6a26 	vmul.f32	s13, s10, s13
 800f804:	ee25 5a04 	vmul.f32	s10, s10, s8
 800f808:	ee37 7a64 	vsub.f32	s14, s14, s9
 800f80c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800f810:	ee33 4a02 	vadd.f32	s8, s6, s4
 800f814:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800f818:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 800f81c:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 800f820:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 800f824:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800f828:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800f82c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800f830:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800f834:	ee27 4a87 	vmul.f32	s8, s15, s14
 800f838:	ee61 5a87 	vmul.f32	s11, s3, s14
 800f83c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f840:	ee22 5a87 	vmul.f32	s10, s5, s14
 800f844:	ee26 7a07 	vmul.f32	s14, s12, s14
 800f848:	ee26 6a26 	vmul.f32	s12, s12, s13
 800f84c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800f850:	ee74 4a84 	vadd.f32	s9, s9, s8
 800f854:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f858:	ee35 6a46 	vsub.f32	s12, s10, s12
 800f85c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f860:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 800f864:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 800f868:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 800f86c:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800f870:	f47f af60 	bne.w	800f734 <arm_cfft_radix8by2_f32+0x38>
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	b28c      	uxth	r4, r1
 800f878:	2302      	movs	r3, #2
 800f87a:	4621      	mov	r1, r4
 800f87c:	f000 fda6 	bl	80103cc <arm_radix8_butterfly_f32>
 800f880:	4621      	mov	r1, r4
 800f882:	687a      	ldr	r2, [r7, #4]
 800f884:	4640      	mov	r0, r8
 800f886:	2302      	movs	r3, #2
 800f888:	ecbd 8b06 	vpop	{d8-d10}
 800f88c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f890:	f000 bd9c 	b.w	80103cc <arm_radix8_butterfly_f32>

0800f894 <arm_cfft_radix8by4_f32>:
 800f894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f898:	ed2d 8b04 	vpush	{d8-d9}
 800f89c:	8804      	ldrh	r4, [r0, #0]
 800f89e:	b08d      	sub	sp, #52	; 0x34
 800f8a0:	6842      	ldr	r2, [r0, #4]
 800f8a2:	460d      	mov	r5, r1
 800f8a4:	0864      	lsrs	r4, r4, #1
 800f8a6:	edd1 7a00 	vldr	s15, [r1]
 800f8aa:	edd1 5a01 	vldr	s11, [r1, #4]
 800f8ae:	00a3      	lsls	r3, r4, #2
 800f8b0:	18ce      	adds	r6, r1, r3
 800f8b2:	18f7      	adds	r7, r6, r3
 800f8b4:	ed96 7a00 	vldr	s14, [r6]
 800f8b8:	ed96 4a01 	vldr	s8, [r6, #4]
 800f8bc:	ed97 6a00 	vldr	s12, [r7]
 800f8c0:	edd7 4a01 	vldr	s9, [r7, #4]
 800f8c4:	ee77 6a86 	vadd.f32	s13, s15, s12
 800f8c8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f8cc:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800f8d0:	ee77 2a26 	vadd.f32	s5, s14, s13
 800f8d4:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800f8d8:	ee74 3a27 	vadd.f32	s7, s8, s15
 800f8dc:	ee76 4a44 	vsub.f32	s9, s12, s8
 800f8e0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800f8e4:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800f8e8:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800f8ec:	ee37 7a25 	vadd.f32	s14, s14, s11
 800f8f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f8f4:	0860      	lsrs	r0, r4, #1
 800f8f6:	f102 0408 	add.w	r4, r2, #8
 800f8fa:	9405      	str	r4, [sp, #20]
 800f8fc:	f102 0410 	add.w	r4, r2, #16
 800f900:	9009      	str	r0, [sp, #36]	; 0x24
 800f902:	f1a0 0902 	sub.w	r9, r0, #2
 800f906:	9403      	str	r4, [sp, #12]
 800f908:	18fc      	adds	r4, r7, r3
 800f90a:	f102 0018 	add.w	r0, r2, #24
 800f90e:	ed94 5a00 	vldr	s10, [r4]
 800f912:	ed94 3a01 	vldr	s6, [r4, #4]
 800f916:	ee72 2a85 	vadd.f32	s5, s5, s10
 800f91a:	9004      	str	r0, [sp, #16]
 800f91c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800f920:	4620      	mov	r0, r4
 800f922:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800f926:	9408      	str	r4, [sp, #32]
 800f928:	ee12 ca90 	vmov	ip, s5
 800f92c:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800f930:	ee77 7a83 	vadd.f32	s15, s15, s6
 800f934:	f845 cb08 	str.w	ip, [r5], #8
 800f938:	ee13 ca90 	vmov	ip, s7
 800f93c:	ed96 2a01 	vldr	s4, [r6, #4]
 800f940:	ee74 4a05 	vadd.f32	s9, s8, s10
 800f944:	edd4 2a01 	vldr	s5, [r4, #4]
 800f948:	ee37 7a45 	vsub.f32	s14, s14, s10
 800f94c:	ee36 6a02 	vadd.f32	s12, s12, s4
 800f950:	9500      	str	r5, [sp, #0]
 800f952:	460d      	mov	r5, r1
 800f954:	ee36 6a22 	vadd.f32	s12, s12, s5
 800f958:	ed81 6a01 	vstr	s12, [r1, #4]
 800f95c:	4631      	mov	r1, r6
 800f95e:	f841 cb08 	str.w	ip, [r1], #8
 800f962:	ee16 ca90 	vmov	ip, s13
 800f966:	9106      	str	r1, [sp, #24]
 800f968:	4639      	mov	r1, r7
 800f96a:	edc6 4a01 	vstr	s9, [r6, #4]
 800f96e:	f841 cb08 	str.w	ip, [r1], #8
 800f972:	9102      	str	r1, [sp, #8]
 800f974:	ee17 1a90 	vmov	r1, s15
 800f978:	edc7 5a01 	vstr	s11, [r7, #4]
 800f97c:	f840 1b08 	str.w	r1, [r0], #8
 800f980:	ea5f 0159 	movs.w	r1, r9, lsr #1
 800f984:	9001      	str	r0, [sp, #4]
 800f986:	ed84 7a01 	vstr	s14, [r4, #4]
 800f98a:	9107      	str	r1, [sp, #28]
 800f98c:	f000 8135 	beq.w	800fbfa <arm_cfft_radix8by4_f32+0x366>
 800f990:	3b0c      	subs	r3, #12
 800f992:	f102 0920 	add.w	r9, r2, #32
 800f996:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800f99a:	4622      	mov	r2, r4
 800f99c:	468b      	mov	fp, r1
 800f99e:	f105 0e10 	add.w	lr, r5, #16
 800f9a2:	4423      	add	r3, r4
 800f9a4:	f1a6 0c0c 	sub.w	ip, r6, #12
 800f9a8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800f9ac:	f106 0010 	add.w	r0, r6, #16
 800f9b0:	f1a7 010c 	sub.w	r1, r7, #12
 800f9b4:	f107 0510 	add.w	r5, r7, #16
 800f9b8:	3c0c      	subs	r4, #12
 800f9ba:	3210      	adds	r2, #16
 800f9bc:	ed15 7a02 	vldr	s14, [r5, #-8]
 800f9c0:	f1bb 0b01 	subs.w	fp, fp, #1
 800f9c4:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800f9c8:	f1ac 0c08 	sub.w	ip, ip, #8
 800f9cc:	ed50 6a02 	vldr	s13, [r0, #-8]
 800f9d0:	f10e 0e08 	add.w	lr, lr, #8
 800f9d4:	ee77 1a87 	vadd.f32	s3, s15, s14
 800f9d8:	ed52 4a02 	vldr	s9, [r2, #-8]
 800f9dc:	ed55 5a01 	vldr	s11, [r5, #-4]
 800f9e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f9e4:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800f9e8:	f10a 0a08 	add.w	sl, sl, #8
 800f9ec:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800f9f0:	ed10 3a01 	vldr	s6, [r0, #-4]
 800f9f4:	ee37 4a25 	vadd.f32	s8, s14, s11
 800f9f8:	ed52 3a01 	vldr	s7, [r2, #-4]
 800f9fc:	ee37 7a65 	vsub.f32	s14, s14, s11
 800fa00:	f100 0008 	add.w	r0, r0, #8
 800fa04:	ee36 6a24 	vadd.f32	s12, s12, s9
 800fa08:	f1a1 0108 	sub.w	r1, r1, #8
 800fa0c:	ee73 2a27 	vadd.f32	s5, s6, s15
 800fa10:	f109 0910 	add.w	r9, r9, #16
 800fa14:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800fa18:	f105 0508 	add.w	r5, r5, #8
 800fa1c:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800fa20:	ee37 5a66 	vsub.f32	s10, s14, s13
 800fa24:	ed50 5a03 	vldr	s11, [r0, #-12]
 800fa28:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800fa2c:	ed12 6a01 	vldr	s12, [r2, #-4]
 800fa30:	ee36 7a87 	vadd.f32	s14, s13, s14
 800fa34:	ee74 5a25 	vadd.f32	s11, s8, s11
 800fa38:	f1a4 0408 	sub.w	r4, r4, #8
 800fa3c:	ee34 4a43 	vsub.f32	s8, s8, s6
 800fa40:	f108 0818 	add.w	r8, r8, #24
 800fa44:	ee32 0ae3 	vsub.f32	s0, s5, s7
 800fa48:	f102 0208 	add.w	r2, r2, #8
 800fa4c:	ee75 5a86 	vadd.f32	s11, s11, s12
 800fa50:	f1a3 0308 	sub.w	r3, r3, #8
 800fa54:	ee34 6a63 	vsub.f32	s12, s8, s7
 800fa58:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800fa5c:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800fa60:	ee35 5a24 	vadd.f32	s10, s10, s9
 800fa64:	ed94 4a04 	vldr	s8, [r4, #16]
 800fa68:	ee71 1ae4 	vsub.f32	s3, s3, s9
 800fa6c:	ed9c 3a04 	vldr	s6, [ip, #16]
 800fa70:	ee37 7a64 	vsub.f32	s14, s14, s9
 800fa74:	edd1 7a04 	vldr	s15, [r1, #16]
 800fa78:	ee73 6a04 	vadd.f32	s13, s6, s8
 800fa7c:	ed93 8a04 	vldr	s16, [r3, #16]
 800fa80:	edd4 5a03 	vldr	s11, [r4, #12]
 800fa84:	ee33 3a44 	vsub.f32	s6, s6, s8
 800fa88:	ed9c 2a03 	vldr	s4, [ip, #12]
 800fa8c:	ee77 8ac8 	vsub.f32	s17, s15, s16
 800fa90:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800fa94:	ed91 1a03 	vldr	s2, [r1, #12]
 800fa98:	ee32 4a25 	vadd.f32	s8, s4, s11
 800fa9c:	edd3 2a03 	vldr	s5, [r3, #12]
 800faa0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800faa4:	ee70 0a88 	vadd.f32	s1, s1, s16
 800faa8:	ee73 4a41 	vsub.f32	s9, s6, s2
 800faac:	ee32 2a65 	vsub.f32	s4, s4, s11
 800fab0:	edcc 0a04 	vstr	s1, [ip, #16]
 800fab4:	ee74 0a41 	vsub.f32	s1, s8, s2
 800fab8:	edd1 6a03 	vldr	s13, [r1, #12]
 800fabc:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800fac0:	ed93 9a03 	vldr	s18, [r3, #12]
 800fac4:	ee78 5a82 	vadd.f32	s11, s17, s4
 800fac8:	ee34 4a26 	vadd.f32	s8, s8, s13
 800facc:	ee70 0ae2 	vsub.f32	s1, s1, s5
 800fad0:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800fad4:	ee34 4a09 	vadd.f32	s8, s8, s18
 800fad8:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800fadc:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800fae0:	ed8c 4a03 	vstr	s8, [ip, #12]
 800fae4:	ee38 2ac2 	vsub.f32	s4, s17, s4
 800fae8:	ed1a 1a03 	vldr	s2, [sl, #-12]
 800faec:	ed1a 4a04 	vldr	s8, [sl, #-16]
 800faf0:	ee60 2a01 	vmul.f32	s5, s0, s2
 800faf4:	ee64 6a81 	vmul.f32	s13, s9, s2
 800faf8:	ee20 8a04 	vmul.f32	s16, s0, s8
 800fafc:	ee64 4a84 	vmul.f32	s9, s9, s8
 800fb00:	ee25 0a01 	vmul.f32	s0, s10, s2
 800fb04:	ee25 5a04 	vmul.f32	s10, s10, s8
 800fb08:	ee25 4a84 	vmul.f32	s8, s11, s8
 800fb0c:	ee65 5a81 	vmul.f32	s11, s11, s2
 800fb10:	ee35 5a62 	vsub.f32	s10, s10, s5
 800fb14:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800fb18:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800fb1c:	ee38 1a00 	vadd.f32	s2, s16, s0
 800fb20:	ed00 5a03 	vstr	s10, [r0, #-12]
 800fb24:	ed00 1a04 	vstr	s2, [r0, #-16]
 800fb28:	ed81 4a04 	vstr	s8, [r1, #16]
 800fb2c:	edc1 5a03 	vstr	s11, [r1, #12]
 800fb30:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 800fb34:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 800fb38:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 800fb3c:	ee66 2a25 	vmul.f32	s5, s12, s11
 800fb40:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800fb44:	ee21 4a85 	vmul.f32	s8, s3, s10
 800fb48:	ee60 7a85 	vmul.f32	s15, s1, s10
 800fb4c:	ee61 1aa5 	vmul.f32	s3, s3, s11
 800fb50:	ee26 6a05 	vmul.f32	s12, s12, s10
 800fb54:	ee60 5aa5 	vmul.f32	s11, s1, s11
 800fb58:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800fb5c:	ee34 5a22 	vadd.f32	s10, s8, s5
 800fb60:	ee36 6a61 	vsub.f32	s12, s12, s3
 800fb64:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800fb68:	ed05 5a04 	vstr	s10, [r5, #-16]
 800fb6c:	ed05 6a03 	vstr	s12, [r5, #-12]
 800fb70:	edc4 5a04 	vstr	s11, [r4, #16]
 800fb74:	edc4 6a03 	vstr	s13, [r4, #12]
 800fb78:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 800fb7c:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 800fb80:	ee23 6aa2 	vmul.f32	s12, s7, s5
 800fb84:	ee67 5a27 	vmul.f32	s11, s14, s15
 800fb88:	ee63 6a27 	vmul.f32	s13, s6, s15
 800fb8c:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800fb90:	ee27 7a22 	vmul.f32	s14, s14, s5
 800fb94:	ee62 7a27 	vmul.f32	s15, s4, s15
 800fb98:	ee23 3a22 	vmul.f32	s6, s6, s5
 800fb9c:	ee22 2a22 	vmul.f32	s4, s4, s5
 800fba0:	ee36 6a25 	vadd.f32	s12, s12, s11
 800fba4:	ee37 7a63 	vsub.f32	s14, s14, s7
 800fba8:	ee36 2ac2 	vsub.f32	s4, s13, s4
 800fbac:	ee77 7a83 	vadd.f32	s15, s15, s6
 800fbb0:	ed02 6a04 	vstr	s12, [r2, #-16]
 800fbb4:	ed02 7a03 	vstr	s14, [r2, #-12]
 800fbb8:	ed83 2a04 	vstr	s4, [r3, #16]
 800fbbc:	edc3 7a03 	vstr	s15, [r3, #12]
 800fbc0:	f47f aefc 	bne.w	800f9bc <arm_cfft_radix8by4_f32+0x128>
 800fbc4:	9907      	ldr	r1, [sp, #28]
 800fbc6:	9803      	ldr	r0, [sp, #12]
 800fbc8:	00cb      	lsls	r3, r1, #3
 800fbca:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800fbce:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800fbd2:	9103      	str	r1, [sp, #12]
 800fbd4:	9900      	ldr	r1, [sp, #0]
 800fbd6:	4419      	add	r1, r3
 800fbd8:	9100      	str	r1, [sp, #0]
 800fbda:	9905      	ldr	r1, [sp, #20]
 800fbdc:	4419      	add	r1, r3
 800fbde:	9105      	str	r1, [sp, #20]
 800fbe0:	9906      	ldr	r1, [sp, #24]
 800fbe2:	4419      	add	r1, r3
 800fbe4:	9106      	str	r1, [sp, #24]
 800fbe6:	9902      	ldr	r1, [sp, #8]
 800fbe8:	4419      	add	r1, r3
 800fbea:	9102      	str	r1, [sp, #8]
 800fbec:	9901      	ldr	r1, [sp, #4]
 800fbee:	4419      	add	r1, r3
 800fbf0:	9b04      	ldr	r3, [sp, #16]
 800fbf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fbf6:	9101      	str	r1, [sp, #4]
 800fbf8:	9304      	str	r3, [sp, #16]
 800fbfa:	9b00      	ldr	r3, [sp, #0]
 800fbfc:	9902      	ldr	r1, [sp, #8]
 800fbfe:	ed93 7a00 	vldr	s14, [r3]
 800fc02:	edd1 7a00 	vldr	s15, [r1]
 800fc06:	9a06      	ldr	r2, [sp, #24]
 800fc08:	ee37 6a27 	vadd.f32	s12, s14, s15
 800fc0c:	9d01      	ldr	r5, [sp, #4]
 800fc0e:	edd2 6a00 	vldr	s13, [r2]
 800fc12:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fc16:	9b02      	ldr	r3, [sp, #8]
 800fc18:	ee76 3a86 	vadd.f32	s7, s13, s12
 800fc1c:	ed95 3a00 	vldr	s6, [r5]
 800fc20:	ed93 5a01 	vldr	s10, [r3, #4]
 800fc24:	ee36 6a66 	vsub.f32	s12, s12, s13
 800fc28:	9b00      	ldr	r3, [sp, #0]
 800fc2a:	ee73 3a83 	vadd.f32	s7, s7, s6
 800fc2e:	edd5 2a01 	vldr	s5, [r5, #4]
 800fc32:	ed93 4a01 	vldr	s8, [r3, #4]
 800fc36:	ee36 6a43 	vsub.f32	s12, s12, s6
 800fc3a:	9b00      	ldr	r3, [sp, #0]
 800fc3c:	ee74 5a05 	vadd.f32	s11, s8, s10
 800fc40:	edd2 7a01 	vldr	s15, [r2, #4]
 800fc44:	edc3 3a00 	vstr	s7, [r3]
 800fc48:	ee34 4a45 	vsub.f32	s8, s8, s10
 800fc4c:	edd2 3a01 	vldr	s7, [r2, #4]
 800fc50:	ee77 4a87 	vadd.f32	s9, s15, s14
 800fc54:	ed95 2a01 	vldr	s4, [r5, #4]
 800fc58:	ee75 3aa3 	vadd.f32	s7, s11, s7
 800fc5c:	9d05      	ldr	r5, [sp, #20]
 800fc5e:	ee34 5a66 	vsub.f32	s10, s8, s13
 800fc62:	9b00      	ldr	r3, [sp, #0]
 800fc64:	ee74 4ae2 	vsub.f32	s9, s9, s5
 800fc68:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800fc6c:	ee73 3a82 	vadd.f32	s7, s7, s4
 800fc70:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800fc72:	ee35 5a03 	vadd.f32	s10, s10, s6
 800fc76:	4621      	mov	r1, r4
 800fc78:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800fc7c:	edc3 3a01 	vstr	s7, [r3, #4]
 800fc80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc84:	edd5 3a00 	vldr	s7, [r5]
 800fc88:	ee76 6a84 	vadd.f32	s13, s13, s8
 800fc8c:	ed95 7a01 	vldr	s14, [r5, #4]
 800fc90:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800fc94:	ee24 4aa3 	vmul.f32	s8, s9, s7
 800fc98:	2304      	movs	r3, #4
 800fc9a:	ee64 4a87 	vmul.f32	s9, s9, s14
 800fc9e:	ee25 7a07 	vmul.f32	s14, s10, s14
 800fca2:	ee25 5a23 	vmul.f32	s10, s10, s7
 800fca6:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800fcaa:	ee34 7a07 	vadd.f32	s14, s8, s14
 800fcae:	ee35 5a64 	vsub.f32	s10, s10, s9
 800fcb2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800fcb6:	ed82 7a00 	vstr	s14, [r2]
 800fcba:	ed82 5a01 	vstr	s10, [r2, #4]
 800fcbe:	9a03      	ldr	r2, [sp, #12]
 800fcc0:	edd2 4a01 	vldr	s9, [r2, #4]
 800fcc4:	ed92 7a00 	vldr	s14, [r2]
 800fcc8:	9a02      	ldr	r2, [sp, #8]
 800fcca:	ee26 5a07 	vmul.f32	s10, s12, s14
 800fcce:	ee26 6a24 	vmul.f32	s12, s12, s9
 800fcd2:	ee25 7a87 	vmul.f32	s14, s11, s14
 800fcd6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800fcda:	ee37 6a46 	vsub.f32	s12, s14, s12
 800fcde:	ee75 5a25 	vadd.f32	s11, s10, s11
 800fce2:	edc2 5a00 	vstr	s11, [r2]
 800fce6:	ed82 6a01 	vstr	s12, [r2, #4]
 800fcea:	9a04      	ldr	r2, [sp, #16]
 800fcec:	9d01      	ldr	r5, [sp, #4]
 800fcee:	edd2 5a01 	vldr	s11, [r2, #4]
 800fcf2:	ed92 7a00 	vldr	s14, [r2]
 800fcf6:	ee27 6a87 	vmul.f32	s12, s15, s14
 800fcfa:	ee26 7a87 	vmul.f32	s14, s13, s14
 800fcfe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800fd02:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800fd06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd0a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800fd0e:	edc5 7a01 	vstr	s15, [r5, #4]
 800fd12:	edc5 6a00 	vstr	s13, [r5]
 800fd16:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800fd18:	686a      	ldr	r2, [r5, #4]
 800fd1a:	f000 fb57 	bl	80103cc <arm_radix8_butterfly_f32>
 800fd1e:	4630      	mov	r0, r6
 800fd20:	4621      	mov	r1, r4
 800fd22:	686a      	ldr	r2, [r5, #4]
 800fd24:	2304      	movs	r3, #4
 800fd26:	f000 fb51 	bl	80103cc <arm_radix8_butterfly_f32>
 800fd2a:	4638      	mov	r0, r7
 800fd2c:	4621      	mov	r1, r4
 800fd2e:	686a      	ldr	r2, [r5, #4]
 800fd30:	2304      	movs	r3, #4
 800fd32:	f000 fb4b 	bl	80103cc <arm_radix8_butterfly_f32>
 800fd36:	4621      	mov	r1, r4
 800fd38:	686a      	ldr	r2, [r5, #4]
 800fd3a:	2304      	movs	r3, #4
 800fd3c:	9808      	ldr	r0, [sp, #32]
 800fd3e:	b00d      	add	sp, #52	; 0x34
 800fd40:	ecbd 8b04 	vpop	{d8-d9}
 800fd44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd48:	f000 bb40 	b.w	80103cc <arm_radix8_butterfly_f32>

0800fd4c <arm_cfft_f32>:
 800fd4c:	2a01      	cmp	r2, #1
 800fd4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd52:	4606      	mov	r6, r0
 800fd54:	4617      	mov	r7, r2
 800fd56:	460c      	mov	r4, r1
 800fd58:	4698      	mov	r8, r3
 800fd5a:	8805      	ldrh	r5, [r0, #0]
 800fd5c:	d055      	beq.n	800fe0a <arm_cfft_f32+0xbe>
 800fd5e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800fd62:	d061      	beq.n	800fe28 <arm_cfft_f32+0xdc>
 800fd64:	d916      	bls.n	800fd94 <arm_cfft_f32+0x48>
 800fd66:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800fd6a:	d01a      	beq.n	800fda2 <arm_cfft_f32+0x56>
 800fd6c:	d946      	bls.n	800fdfc <arm_cfft_f32+0xb0>
 800fd6e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800fd72:	d059      	beq.n	800fe28 <arm_cfft_f32+0xdc>
 800fd74:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800fd78:	d105      	bne.n	800fd86 <arm_cfft_f32+0x3a>
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	6872      	ldr	r2, [r6, #4]
 800fd7e:	4629      	mov	r1, r5
 800fd80:	4620      	mov	r0, r4
 800fd82:	f000 fb23 	bl	80103cc <arm_radix8_butterfly_f32>
 800fd86:	f1b8 0f00 	cmp.w	r8, #0
 800fd8a:	d111      	bne.n	800fdb0 <arm_cfft_f32+0x64>
 800fd8c:	2f01      	cmp	r7, #1
 800fd8e:	d016      	beq.n	800fdbe <arm_cfft_f32+0x72>
 800fd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd94:	2d20      	cmp	r5, #32
 800fd96:	d047      	beq.n	800fe28 <arm_cfft_f32+0xdc>
 800fd98:	d934      	bls.n	800fe04 <arm_cfft_f32+0xb8>
 800fd9a:	2d40      	cmp	r5, #64	; 0x40
 800fd9c:	d0ed      	beq.n	800fd7a <arm_cfft_f32+0x2e>
 800fd9e:	2d80      	cmp	r5, #128	; 0x80
 800fda0:	d1f1      	bne.n	800fd86 <arm_cfft_f32+0x3a>
 800fda2:	4621      	mov	r1, r4
 800fda4:	4630      	mov	r0, r6
 800fda6:	f7ff fca9 	bl	800f6fc <arm_cfft_radix8by2_f32>
 800fdaa:	f1b8 0f00 	cmp.w	r8, #0
 800fdae:	d0ed      	beq.n	800fd8c <arm_cfft_f32+0x40>
 800fdb0:	68b2      	ldr	r2, [r6, #8]
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	89b1      	ldrh	r1, [r6, #12]
 800fdb6:	f000 f83f 	bl	800fe38 <arm_bitreversal_32>
 800fdba:	2f01      	cmp	r7, #1
 800fdbc:	d1e8      	bne.n	800fd90 <arm_cfft_f32+0x44>
 800fdbe:	ee07 5a90 	vmov	s15, r5
 800fdc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fdc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800fdce:	2d00      	cmp	r5, #0
 800fdd0:	d0de      	beq.n	800fd90 <arm_cfft_f32+0x44>
 800fdd2:	f104 0108 	add.w	r1, r4, #8
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	ed11 7a02 	vldr	s14, [r1, #-8]
 800fddc:	3301      	adds	r3, #1
 800fdde:	ed51 7a01 	vldr	s15, [r1, #-4]
 800fde2:	3108      	adds	r1, #8
 800fde4:	429d      	cmp	r5, r3
 800fde6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fdea:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800fdee:	ed01 7a04 	vstr	s14, [r1, #-16]
 800fdf2:	ed41 7a03 	vstr	s15, [r1, #-12]
 800fdf6:	d1ef      	bne.n	800fdd8 <arm_cfft_f32+0x8c>
 800fdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdfc:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800fe00:	d0bb      	beq.n	800fd7a <arm_cfft_f32+0x2e>
 800fe02:	e7c0      	b.n	800fd86 <arm_cfft_f32+0x3a>
 800fe04:	2d10      	cmp	r5, #16
 800fe06:	d0cc      	beq.n	800fda2 <arm_cfft_f32+0x56>
 800fe08:	e7bd      	b.n	800fd86 <arm_cfft_f32+0x3a>
 800fe0a:	b195      	cbz	r5, 800fe32 <arm_cfft_f32+0xe6>
 800fe0c:	f101 030c 	add.w	r3, r1, #12
 800fe10:	2200      	movs	r2, #0
 800fe12:	ed53 7a02 	vldr	s15, [r3, #-8]
 800fe16:	3201      	adds	r2, #1
 800fe18:	3308      	adds	r3, #8
 800fe1a:	eef1 7a67 	vneg.f32	s15, s15
 800fe1e:	4295      	cmp	r5, r2
 800fe20:	ed43 7a04 	vstr	s15, [r3, #-16]
 800fe24:	d1f5      	bne.n	800fe12 <arm_cfft_f32+0xc6>
 800fe26:	e79a      	b.n	800fd5e <arm_cfft_f32+0x12>
 800fe28:	4621      	mov	r1, r4
 800fe2a:	4630      	mov	r0, r6
 800fe2c:	f7ff fd32 	bl	800f894 <arm_cfft_radix8by4_f32>
 800fe30:	e7a9      	b.n	800fd86 <arm_cfft_f32+0x3a>
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d0ac      	beq.n	800fd90 <arm_cfft_f32+0x44>
 800fe36:	e7bb      	b.n	800fdb0 <arm_cfft_f32+0x64>

0800fe38 <arm_bitreversal_32>:
 800fe38:	b321      	cbz	r1, 800fe84 <arm_bitreversal_32+0x4c>
 800fe3a:	f102 0c02 	add.w	ip, r2, #2
 800fe3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe42:	4690      	mov	r8, r2
 800fe44:	2500      	movs	r5, #0
 800fe46:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 800fe4a:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 800fe4e:	3502      	adds	r5, #2
 800fe50:	08a4      	lsrs	r4, r4, #2
 800fe52:	089b      	lsrs	r3, r3, #2
 800fe54:	428d      	cmp	r5, r1
 800fe56:	ea4f 0784 	mov.w	r7, r4, lsl #2
 800fe5a:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 800fe5e:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800fe62:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800fe66:	f107 0704 	add.w	r7, r7, #4
 800fe6a:	f106 0604 	add.w	r6, r6, #4
 800fe6e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800fe72:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 800fe76:	59c4      	ldr	r4, [r0, r7]
 800fe78:	5983      	ldr	r3, [r0, r6]
 800fe7a:	51c3      	str	r3, [r0, r7]
 800fe7c:	5184      	str	r4, [r0, r6]
 800fe7e:	d3e2      	bcc.n	800fe46 <arm_bitreversal_32+0xe>
 800fe80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe84:	4770      	bx	lr
 800fe86:	bf00      	nop

0800fe88 <arm_fir_decimate_init_f32>:
 800fe88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe8c:	e9dd 8c06 	ldrd	r8, ip, [sp, #24]
 800fe90:	fbbc f4f2 	udiv	r4, ip, r2
 800fe94:	fb02 c414 	mls	r4, r2, r4, ip
 800fe98:	b99c      	cbnz	r4, 800fec2 <arm_fir_decimate_init_f32+0x3a>
 800fe9a:	460f      	mov	r7, r1
 800fe9c:	4616      	mov	r6, r2
 800fe9e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800fea2:	4605      	mov	r5, r0
 800fea4:	443a      	add	r2, r7
 800fea6:	8069      	strh	r1, [r5, #2]
 800fea8:	6043      	str	r3, [r0, #4]
 800feaa:	4621      	mov	r1, r4
 800feac:	4462      	add	r2, ip
 800feae:	4640      	mov	r0, r8
 800feb0:	0092      	lsls	r2, r2, #2
 800feb2:	f000 fd89 	bl	80109c8 <memset>
 800feb6:	4620      	mov	r0, r4
 800feb8:	f8c5 8008 	str.w	r8, [r5, #8]
 800febc:	702e      	strb	r6, [r5, #0]
 800febe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fec2:	f06f 0001 	mvn.w	r0, #1
 800fec6:	e7fa      	b.n	800febe <arm_fir_decimate_init_f32+0x36>

0800fec8 <arm_fir_decimate_f32>:
 800fec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fecc:	4605      	mov	r5, r0
 800fece:	b08d      	sub	sp, #52	; 0x34
 800fed0:	4694      	mov	ip, r2
 800fed2:	782c      	ldrb	r4, [r5, #0]
 800fed4:	886f      	ldrh	r7, [r5, #2]
 800fed6:	9001      	str	r0, [sp, #4]
 800fed8:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800fedc:	68ae      	ldr	r6, [r5, #8]
 800fede:	4438      	add	r0, r7
 800fee0:	686d      	ldr	r5, [r5, #4]
 800fee2:	9207      	str	r2, [sp, #28]
 800fee4:	970a      	str	r7, [sp, #40]	; 0x28
 800fee6:	eb06 0b80 	add.w	fp, r6, r0, lsl #2
 800feea:	9508      	str	r5, [sp, #32]
 800feec:	fbb3 f3f4 	udiv	r3, r3, r4
 800fef0:	930b      	str	r3, [sp, #44]	; 0x2c
 800fef2:	089b      	lsrs	r3, r3, #2
 800fef4:	9309      	str	r3, [sp, #36]	; 0x24
 800fef6:	f000 80ef 	beq.w	80100d8 <arm_fir_decimate_f32+0x210>
 800fefa:	08ba      	lsrs	r2, r7, #2
 800fefc:	462b      	mov	r3, r5
 800fefe:	3510      	adds	r5, #16
 800ff00:	f007 0703 	and.w	r7, r7, #3
 800ff04:	9205      	str	r2, [sp, #20]
 800ff06:	0112      	lsls	r2, r2, #4
 800ff08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff0a:	f10c 0910 	add.w	r9, ip, #16
 800ff0e:	4413      	add	r3, r2
 800ff10:	9100      	str	r1, [sp, #0]
 800ff12:	eb05 0e02 	add.w	lr, r5, r2
 800ff16:	4611      	mov	r1, r2
 800ff18:	9503      	str	r5, [sp, #12]
 800ff1a:	9704      	str	r7, [sp, #16]
 800ff1c:	9002      	str	r0, [sp, #8]
 800ff1e:	9306      	str	r3, [sp, #24]
 800ff20:	00a4      	lsls	r4, r4, #2
 800ff22:	4658      	mov	r0, fp
 800ff24:	9a00      	ldr	r2, [sp, #0]
 800ff26:	4623      	mov	r3, r4
 800ff28:	f852 5b04 	ldr.w	r5, [r2], #4
 800ff2c:	3b01      	subs	r3, #1
 800ff2e:	f840 5b04 	str.w	r5, [r0], #4
 800ff32:	d1f9      	bne.n	800ff28 <arm_fir_decimate_f32+0x60>
 800ff34:	9b01      	ldr	r3, [sp, #4]
 800ff36:	00a4      	lsls	r4, r4, #2
 800ff38:	eddf 0abe 	vldr	s1, [pc, #760]	; 8010234 <arm_fir_decimate_f32+0x36c>
 800ff3c:	f893 8000 	ldrb.w	r8, [r3]
 800ff40:	44a3      	add	fp, r4
 800ff42:	9b00      	ldr	r3, [sp, #0]
 800ff44:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800ff48:	4423      	add	r3, r4
 800ff4a:	eb06 0708 	add.w	r7, r6, r8
 800ff4e:	9300      	str	r3, [sp, #0]
 800ff50:	eb07 0c08 	add.w	ip, r7, r8
 800ff54:	9b05      	ldr	r3, [sp, #20]
 800ff56:	eb0c 0a08 	add.w	sl, ip, r8
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	f000 815c 	beq.w	8010218 <arm_fir_decimate_f32+0x350>
 800ff60:	eef0 4a60 	vmov.f32	s9, s1
 800ff64:	9b03      	ldr	r3, [sp, #12]
 800ff66:	eef0 7a60 	vmov.f32	s15, s1
 800ff6a:	f106 0510 	add.w	r5, r6, #16
 800ff6e:	eeb0 7a60 	vmov.f32	s14, s1
 800ff72:	f107 0410 	add.w	r4, r7, #16
 800ff76:	f10c 0010 	add.w	r0, ip, #16
 800ff7a:	f10a 0210 	add.w	r2, sl, #16
 800ff7e:	ed53 5a04 	vldr	s11, [r3, #-16]
 800ff82:	3310      	adds	r3, #16
 800ff84:	ed12 5a04 	vldr	s10, [r2, #-16]
 800ff88:	3510      	adds	r5, #16
 800ff8a:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800ff8e:	3410      	adds	r4, #16
 800ff90:	ed14 1a08 	vldr	s2, [r4, #-32]	; 0xffffffe0
 800ff94:	3010      	adds	r0, #16
 800ff96:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 800ff9a:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800ff9e:	ee25 1a81 	vmul.f32	s2, s11, s2
 800ffa2:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 800ffa6:	ee65 3aa3 	vmul.f32	s7, s11, s7
 800ffaa:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 800ffae:	ee65 5a85 	vmul.f32	s11, s11, s10
 800ffb2:	ed15 2a07 	vldr	s4, [r5, #-28]	; 0xffffffe4
 800ffb6:	ed12 5a03 	vldr	s10, [r2, #-12]
 800ffba:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ffbe:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800ffc2:	ee73 1aa4 	vadd.f32	s3, s7, s9
 800ffc6:	ee26 2a02 	vmul.f32	s4, s12, s4
 800ffca:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800ffce:	ee31 1a27 	vadd.f32	s2, s2, s15
 800ffd2:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800ffd6:	ee66 7a22 	vmul.f32	s15, s12, s5
 800ffda:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800ffde:	ee26 3a03 	vmul.f32	s6, s12, s6
 800ffe2:	ed50 4a06 	vldr	s9, [r0, #-24]	; 0xffffffe8
 800ffe6:	ee75 5aa0 	vadd.f32	s11, s11, s1
 800ffea:	ed52 0a02 	vldr	s1, [r2, #-8]
 800ffee:	ee26 6a05 	vmul.f32	s12, s12, s10
 800fff2:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 800fff6:	ee72 2a07 	vadd.f32	s5, s4, s14
 800fffa:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800fffe:	ee77 7a81 	vadd.f32	s15, s15, s2
 8010002:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 8010006:	ee33 3a21 	vadd.f32	s6, s6, s3
 801000a:	ed14 1a05 	vldr	s2, [r4, #-20]	; 0xffffffec
 801000e:	ee66 3aa3 	vmul.f32	s7, s13, s7
 8010012:	ed52 1a01 	vldr	s3, [r2, #-4]
 8010016:	ee26 4a84 	vmul.f32	s8, s13, s8
 801001a:	459e      	cmp	lr, r3
 801001c:	ee66 4aa4 	vmul.f32	s9, s13, s9
 8010020:	f102 0210 	add.w	r2, r2, #16
 8010024:	ee66 6aa0 	vmul.f32	s13, s13, s1
 8010028:	ee36 6a25 	vadd.f32	s12, s12, s11
 801002c:	ee25 7a07 	vmul.f32	s14, s10, s14
 8010030:	ee34 4a27 	vadd.f32	s8, s8, s15
 8010034:	ee74 4a83 	vadd.f32	s9, s9, s6
 8010038:	ee65 7a01 	vmul.f32	s15, s10, s2
 801003c:	ee25 3a02 	vmul.f32	s6, s10, s4
 8010040:	ee73 3aa2 	vadd.f32	s7, s7, s5
 8010044:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010048:	ee25 5a21 	vmul.f32	s10, s10, s3
 801004c:	ee37 7a23 	vadd.f32	s14, s14, s7
 8010050:	ee77 7a84 	vadd.f32	s15, s15, s8
 8010054:	ee73 4a24 	vadd.f32	s9, s6, s9
 8010058:	ee75 0a26 	vadd.f32	s1, s10, s13
 801005c:	d18f      	bne.n	800ff7e <arm_fir_decimate_f32+0xb6>
 801005e:	440e      	add	r6, r1
 8010060:	440f      	add	r7, r1
 8010062:	448c      	add	ip, r1
 8010064:	eb0a 0001 	add.w	r0, sl, r1
 8010068:	9a06      	ldr	r2, [sp, #24]
 801006a:	9b04      	ldr	r3, [sp, #16]
 801006c:	b1db      	cbz	r3, 80100a6 <arm_fir_decimate_f32+0x1de>
 801006e:	ecb2 5a01 	vldmia	r2!, {s10}
 8010072:	3b01      	subs	r3, #1
 8010074:	ecf6 2a01 	vldmia	r6!, {s5}
 8010078:	ecf7 3a01 	vldmia	r7!, {s7}
 801007c:	ecbc 4a01 	vldmia	ip!, {s8}
 8010080:	ee65 2a22 	vmul.f32	s5, s10, s5
 8010084:	ecf0 6a01 	vldmia	r0!, {s13}
 8010088:	ee65 3a23 	vmul.f32	s7, s10, s7
 801008c:	ee25 4a04 	vmul.f32	s8, s10, s8
 8010090:	ee25 5a26 	vmul.f32	s10, s10, s13
 8010094:	ee37 7a22 	vadd.f32	s14, s14, s5
 8010098:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801009c:	ee74 4a84 	vadd.f32	s9, s9, s8
 80100a0:	ee70 0a85 	vadd.f32	s1, s1, s10
 80100a4:	d1e3      	bne.n	801006e <arm_fir_decimate_f32+0x1a6>
 80100a6:	9b02      	ldr	r3, [sp, #8]
 80100a8:	eb0a 0608 	add.w	r6, sl, r8
 80100ac:	ed09 7a04 	vstr	s14, [r9, #-16]
 80100b0:	f109 0910 	add.w	r9, r9, #16
 80100b4:	3b01      	subs	r3, #1
 80100b6:	ed49 7a07 	vstr	s15, [r9, #-28]	; 0xffffffe4
 80100ba:	ed49 4a06 	vstr	s9, [r9, #-24]	; 0xffffffe8
 80100be:	ed49 0a05 	vstr	s1, [r9, #-20]	; 0xffffffec
 80100c2:	9302      	str	r3, [sp, #8]
 80100c4:	d002      	beq.n	80100cc <arm_fir_decimate_f32+0x204>
 80100c6:	9b01      	ldr	r3, [sp, #4]
 80100c8:	781c      	ldrb	r4, [r3, #0]
 80100ca:	e729      	b.n	800ff20 <arm_fir_decimate_f32+0x58>
 80100cc:	9b07      	ldr	r3, [sp, #28]
 80100ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100d0:	9900      	ldr	r1, [sp, #0]
 80100d2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80100d6:	9307      	str	r3, [sp, #28]
 80100d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100da:	f013 0803 	ands.w	r8, r3, #3
 80100de:	d067      	beq.n	80101b0 <arm_fir_decimate_f32+0x2e8>
 80100e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100e2:	9808      	ldr	r0, [sp, #32]
 80100e4:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80100e8:	9d07      	ldr	r5, [sp, #28]
 80100ea:	4602      	mov	r2, r0
 80100ec:	f003 0703 	and.w	r7, r3, #3
 80100f0:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
 80100f4:	f8cd e000 	str.w	lr, [sp]
 80100f8:	3210      	adds	r2, #16
 80100fa:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 80100fe:	eb00 090c 	add.w	r9, r0, ip
 8010102:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010106:	eb02 040c 	add.w	r4, r2, ip
 801010a:	46aa      	mov	sl, r5
 801010c:	9203      	str	r2, [sp, #12]
 801010e:	f89e 5000 	ldrb.w	r5, [lr]
 8010112:	4658      	mov	r0, fp
 8010114:	460a      	mov	r2, r1
 8010116:	462b      	mov	r3, r5
 8010118:	ecf2 7a01 	vldmia	r2!, {s15}
 801011c:	3b01      	subs	r3, #1
 801011e:	ece0 7a01 	vstmia	r0!, {s15}
 8010122:	d1f9      	bne.n	8010118 <arm_fir_decimate_f32+0x250>
 8010124:	00ad      	lsls	r5, r5, #2
 8010126:	9b00      	ldr	r3, [sp, #0]
 8010128:	4429      	add	r1, r5
 801012a:	44ab      	add	fp, r5
 801012c:	2b00      	cmp	r3, #0
 801012e:	d07c      	beq.n	801022a <arm_fir_decimate_f32+0x362>
 8010130:	9b03      	ldr	r3, [sp, #12]
 8010132:	f106 0210 	add.w	r2, r6, #16
 8010136:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8010234 <arm_fir_decimate_f32+0x36c>
 801013a:	ed13 7a04 	vldr	s14, [r3, #-16]
 801013e:	3310      	adds	r3, #16
 8010140:	ed52 6a04 	vldr	s13, [r2, #-16]
 8010144:	3210      	adds	r2, #16
 8010146:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 801014a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801014e:	ed52 5a07 	vldr	s11, [r2, #-28]	; 0xffffffe4
 8010152:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8010156:	ee26 6a25 	vmul.f32	s12, s12, s11
 801015a:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
 801015e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010162:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 8010166:	ee26 7a85 	vmul.f32	s14, s13, s10
 801016a:	ed52 6a05 	vldr	s13, [r2, #-20]	; 0xffffffec
 801016e:	429c      	cmp	r4, r3
 8010170:	ee76 7a27 	vadd.f32	s15, s12, s15
 8010174:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8010178:	ee77 7a27 	vadd.f32	s15, s14, s15
 801017c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010180:	d1db      	bne.n	801013a <arm_fir_decimate_f32+0x272>
 8010182:	eb06 000c 	add.w	r0, r6, ip
 8010186:	464a      	mov	r2, r9
 8010188:	b157      	cbz	r7, 80101a0 <arm_fir_decimate_f32+0x2d8>
 801018a:	463b      	mov	r3, r7
 801018c:	ecb2 7a01 	vldmia	r2!, {s14}
 8010190:	3b01      	subs	r3, #1
 8010192:	ecf0 6a01 	vldmia	r0!, {s13}
 8010196:	ee27 7a26 	vmul.f32	s14, s14, s13
 801019a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801019e:	d1f5      	bne.n	801018c <arm_fir_decimate_f32+0x2c4>
 80101a0:	f89e 3000 	ldrb.w	r3, [lr]
 80101a4:	ecea 7a01 	vstmia	sl!, {s15}
 80101a8:	45c2      	cmp	sl, r8
 80101aa:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 80101ae:	d1ae      	bne.n	801010e <arm_fir_decimate_f32+0x246>
 80101b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101b2:	1e5c      	subs	r4, r3, #1
 80101b4:	9b01      	ldr	r3, [sp, #4]
 80101b6:	08a5      	lsrs	r5, r4, #2
 80101b8:	689f      	ldr	r7, [r3, #8]
 80101ba:	d01d      	beq.n	80101f8 <arm_fir_decimate_f32+0x330>
 80101bc:	f106 0210 	add.w	r2, r6, #16
 80101c0:	f107 0310 	add.w	r3, r7, #16
 80101c4:	4629      	mov	r1, r5
 80101c6:	f852 0c10 	ldr.w	r0, [r2, #-16]
 80101ca:	3901      	subs	r1, #1
 80101cc:	f102 0210 	add.w	r2, r2, #16
 80101d0:	f103 0310 	add.w	r3, r3, #16
 80101d4:	f843 0c20 	str.w	r0, [r3, #-32]
 80101d8:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 80101dc:	f843 0c1c 	str.w	r0, [r3, #-28]
 80101e0:	f852 0c18 	ldr.w	r0, [r2, #-24]
 80101e4:	f843 0c18 	str.w	r0, [r3, #-24]
 80101e8:	f852 0c14 	ldr.w	r0, [r2, #-20]
 80101ec:	f843 0c14 	str.w	r0, [r3, #-20]
 80101f0:	d1e9      	bne.n	80101c6 <arm_fir_decimate_f32+0x2fe>
 80101f2:	012d      	lsls	r5, r5, #4
 80101f4:	442e      	add	r6, r5
 80101f6:	442f      	add	r7, r5
 80101f8:	f014 0403 	ands.w	r4, r4, #3
 80101fc:	d009      	beq.n	8010212 <arm_fir_decimate_f32+0x34a>
 80101fe:	6833      	ldr	r3, [r6, #0]
 8010200:	3c01      	subs	r4, #1
 8010202:	603b      	str	r3, [r7, #0]
 8010204:	d005      	beq.n	8010212 <arm_fir_decimate_f32+0x34a>
 8010206:	6873      	ldr	r3, [r6, #4]
 8010208:	2c01      	cmp	r4, #1
 801020a:	607b      	str	r3, [r7, #4]
 801020c:	d001      	beq.n	8010212 <arm_fir_decimate_f32+0x34a>
 801020e:	68b3      	ldr	r3, [r6, #8]
 8010210:	60bb      	str	r3, [r7, #8]
 8010212:	b00d      	add	sp, #52	; 0x34
 8010214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010218:	4650      	mov	r0, sl
 801021a:	9a08      	ldr	r2, [sp, #32]
 801021c:	eef0 4a60 	vmov.f32	s9, s1
 8010220:	eef0 7a60 	vmov.f32	s15, s1
 8010224:	eeb0 7a60 	vmov.f32	s14, s1
 8010228:	e71f      	b.n	801006a <arm_fir_decimate_f32+0x1a2>
 801022a:	9a08      	ldr	r2, [sp, #32]
 801022c:	4630      	mov	r0, r6
 801022e:	eddf 7a01 	vldr	s15, [pc, #4]	; 8010234 <arm_fir_decimate_f32+0x36c>
 8010232:	e7a9      	b.n	8010188 <arm_fir_decimate_f32+0x2c0>
 8010234:	00000000 	.word	0x00000000

08010238 <arm_cmplx_mult_cmplx_f32>:
 8010238:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 801023c:	b4f0      	push	{r4, r5, r6, r7}
 801023e:	d073      	beq.n	8010328 <arm_cmplx_mult_cmplx_f32+0xf0>
 8010240:	f100 0620 	add.w	r6, r0, #32
 8010244:	f101 0520 	add.w	r5, r1, #32
 8010248:	f102 0420 	add.w	r4, r2, #32
 801024c:	4667      	mov	r7, ip
 801024e:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 8010252:	3f01      	subs	r7, #1
 8010254:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 8010258:	f105 0520 	add.w	r5, r5, #32
 801025c:	ed15 7a10 	vldr	s14, [r5, #-64]	; 0xffffffc0
 8010260:	f106 0620 	add.w	r6, r6, #32
 8010264:	ed56 6a0f 	vldr	s13, [r6, #-60]	; 0xffffffc4
 8010268:	f104 0420 	add.w	r4, r4, #32
 801026c:	ee27 6a87 	vmul.f32	s12, s15, s14
 8010270:	ee26 7a87 	vmul.f32	s14, s13, s14
 8010274:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010278:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801027c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010280:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010284:	ed44 7a0f 	vstr	s15, [r4, #-60]	; 0xffffffc4
 8010288:	ed44 6a10 	vstr	s13, [r4, #-64]	; 0xffffffc0
 801028c:	ed55 5a0d 	vldr	s11, [r5, #-52]	; 0xffffffcc
 8010290:	ed56 7a0e 	vldr	s15, [r6, #-56]	; 0xffffffc8
 8010294:	ed15 7a0e 	vldr	s14, [r5, #-56]	; 0xffffffc8
 8010298:	ed56 6a0d 	vldr	s13, [r6, #-52]	; 0xffffffcc
 801029c:	ee27 6a87 	vmul.f32	s12, s15, s14
 80102a0:	ee26 7a87 	vmul.f32	s14, s13, s14
 80102a4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80102a8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80102ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80102b0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80102b4:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 80102b8:	ed44 6a0e 	vstr	s13, [r4, #-56]	; 0xffffffc8
 80102bc:	ed55 5a0b 	vldr	s11, [r5, #-44]	; 0xffffffd4
 80102c0:	ed56 7a0c 	vldr	s15, [r6, #-48]	; 0xffffffd0
 80102c4:	ed15 7a0c 	vldr	s14, [r5, #-48]	; 0xffffffd0
 80102c8:	ed56 6a0b 	vldr	s13, [r6, #-44]	; 0xffffffd4
 80102cc:	ee27 6a87 	vmul.f32	s12, s15, s14
 80102d0:	ee26 7a87 	vmul.f32	s14, s13, s14
 80102d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80102d8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80102dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80102e0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80102e4:	ed44 7a0b 	vstr	s15, [r4, #-44]	; 0xffffffd4
 80102e8:	ed44 6a0c 	vstr	s13, [r4, #-48]	; 0xffffffd0
 80102ec:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 80102f0:	ed15 7a0a 	vldr	s14, [r5, #-40]	; 0xffffffd8
 80102f4:	ed56 6a09 	vldr	s13, [r6, #-36]	; 0xffffffdc
 80102f8:	ed55 5a09 	vldr	s11, [r5, #-36]	; 0xffffffdc
 80102fc:	ee27 6a87 	vmul.f32	s12, s15, s14
 8010300:	ee26 7a87 	vmul.f32	s14, s13, s14
 8010304:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010308:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801030c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010310:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010314:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 8010318:	ed44 6a0a 	vstr	s13, [r4, #-40]	; 0xffffffd8
 801031c:	d197      	bne.n	801024e <arm_cmplx_mult_cmplx_f32+0x16>
 801031e:	ea4f 144c 	mov.w	r4, ip, lsl #5
 8010322:	4420      	add	r0, r4
 8010324:	4421      	add	r1, r4
 8010326:	4422      	add	r2, r4
 8010328:	f013 0303 	ands.w	r3, r3, #3
 801032c:	d04b      	beq.n	80103c6 <arm_cmplx_mult_cmplx_f32+0x18e>
 801032e:	edd0 5a00 	vldr	s11, [r0]
 8010332:	3b01      	subs	r3, #1
 8010334:	edd1 7a00 	vldr	s15, [r1]
 8010338:	edd0 6a01 	vldr	s13, [r0, #4]
 801033c:	ed91 7a01 	vldr	s14, [r1, #4]
 8010340:	ee27 6aa5 	vmul.f32	s12, s15, s11
 8010344:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010348:	ee67 6a26 	vmul.f32	s13, s14, s13
 801034c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8010350:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010354:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010358:	edc2 6a00 	vstr	s13, [r2]
 801035c:	edc2 7a01 	vstr	s15, [r2, #4]
 8010360:	d031      	beq.n	80103c6 <arm_cmplx_mult_cmplx_f32+0x18e>
 8010362:	edd0 7a02 	vldr	s15, [r0, #8]
 8010366:	2b01      	cmp	r3, #1
 8010368:	ed91 7a02 	vldr	s14, [r1, #8]
 801036c:	edd0 6a03 	vldr	s13, [r0, #12]
 8010370:	edd1 5a03 	vldr	s11, [r1, #12]
 8010374:	ee27 6a87 	vmul.f32	s12, s15, s14
 8010378:	ee26 7a87 	vmul.f32	s14, s13, s14
 801037c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010380:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8010384:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010388:	ee76 6a66 	vsub.f32	s13, s12, s13
 801038c:	edc2 7a03 	vstr	s15, [r2, #12]
 8010390:	edc2 6a02 	vstr	s13, [r2, #8]
 8010394:	d017      	beq.n	80103c6 <arm_cmplx_mult_cmplx_f32+0x18e>
 8010396:	edd0 7a04 	vldr	s15, [r0, #16]
 801039a:	ed91 7a04 	vldr	s14, [r1, #16]
 801039e:	edd0 6a05 	vldr	s13, [r0, #20]
 80103a2:	edd1 5a05 	vldr	s11, [r1, #20]
 80103a6:	ee27 6a87 	vmul.f32	s12, s15, s14
 80103aa:	ee26 7a87 	vmul.f32	s14, s13, s14
 80103ae:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80103b2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80103b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80103ba:	ee76 6a66 	vsub.f32	s13, s12, s13
 80103be:	edc2 7a05 	vstr	s15, [r2, #20]
 80103c2:	edc2 6a04 	vstr	s13, [r2, #16]
 80103c6:	bcf0      	pop	{r4, r5, r6, r7}
 80103c8:	4770      	bx	lr
 80103ca:	bf00      	nop

080103cc <arm_radix8_butterfly_f32>:
 80103cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d0:	ed2d 8b10 	vpush	{d8-d15}
 80103d4:	b095      	sub	sp, #84	; 0x54
 80103d6:	468a      	mov	sl, r1
 80103d8:	468b      	mov	fp, r1
 80103da:	eddf 8abb 	vldr	s17, [pc, #748]	; 80106c8 <arm_radix8_butterfly_f32+0x2fc>
 80103de:	9012      	str	r0, [sp, #72]	; 0x48
 80103e0:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80103e4:	4603      	mov	r3, r0
 80103e6:	3304      	adds	r3, #4
 80103e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80103ea:	ea4f 02db 	mov.w	r2, fp, lsr #3
 80103ee:	9912      	ldr	r1, [sp, #72]	; 0x48
 80103f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80103f4:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 80103f8:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 80103fc:	920f      	str	r2, [sp, #60]	; 0x3c
 80103fe:	9303      	str	r3, [sp, #12]
 8010400:	0153      	lsls	r3, r2, #5
 8010402:	0114      	lsls	r4, r2, #4
 8010404:	eba9 0002 	sub.w	r0, r9, r2
 8010408:	18ce      	adds	r6, r1, r3
 801040a:	9302      	str	r3, [sp, #8]
 801040c:	0097      	lsls	r7, r2, #2
 801040e:	4613      	mov	r3, r2
 8010410:	eb06 0509 	add.w	r5, r6, r9
 8010414:	9004      	str	r0, [sp, #16]
 8010416:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 801041a:	1bd2      	subs	r2, r2, r7
 801041c:	eb05 0109 	add.w	r1, r5, r9
 8010420:	441f      	add	r7, r3
 8010422:	9405      	str	r4, [sp, #20]
 8010424:	f109 0004 	add.w	r0, r9, #4
 8010428:	9101      	str	r1, [sp, #4]
 801042a:	1d21      	adds	r1, r4, #4
 801042c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801042e:	f04f 0e00 	mov.w	lr, #0
 8010432:	9c01      	ldr	r4, [sp, #4]
 8010434:	4418      	add	r0, r3
 8010436:	4419      	add	r1, r3
 8010438:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 801043c:	9b02      	ldr	r3, [sp, #8]
 801043e:	00fc      	lsls	r4, r7, #3
 8010440:	18d7      	adds	r7, r2, r3
 8010442:	9b04      	ldr	r3, [sp, #16]
 8010444:	9406      	str	r4, [sp, #24]
 8010446:	00db      	lsls	r3, r3, #3
 8010448:	9c01      	ldr	r4, [sp, #4]
 801044a:	9307      	str	r3, [sp, #28]
 801044c:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8010450:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8010454:	9304      	str	r3, [sp, #16]
 8010456:	9b03      	ldr	r3, [sp, #12]
 8010458:	edd6 6a00 	vldr	s13, [r6]
 801045c:	44de      	add	lr, fp
 801045e:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8010462:	ed94 7a00 	vldr	s14, [r4]
 8010466:	45f2      	cmp	sl, lr
 8010468:	ed10 6a01 	vldr	s12, [r0, #-4]
 801046c:	ee37 2aa6 	vadd.f32	s4, s15, s13
 8010470:	edd5 2a00 	vldr	s5, [r5]
 8010474:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010478:	edd7 3a00 	vldr	s7, [r7]
 801047c:	ed11 5a01 	vldr	s10, [r1, #-4]
 8010480:	ee36 3a22 	vadd.f32	s6, s12, s5
 8010484:	edd2 6a00 	vldr	s13, [r2]
 8010488:	ee75 5a07 	vadd.f32	s11, s10, s14
 801048c:	ee36 4aa3 	vadd.f32	s8, s13, s7
 8010490:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8010494:	ee72 4a25 	vadd.f32	s9, s4, s11
 8010498:	ee73 3a04 	vadd.f32	s7, s6, s8
 801049c:	ee35 5a47 	vsub.f32	s10, s10, s14
 80104a0:	ee36 7a62 	vsub.f32	s14, s12, s5
 80104a4:	ee32 2a65 	vsub.f32	s4, s4, s11
 80104a8:	ee74 5aa3 	vadd.f32	s11, s9, s7
 80104ac:	ee74 4ae3 	vsub.f32	s9, s9, s7
 80104b0:	ee37 6a66 	vsub.f32	s12, s14, s13
 80104b4:	ed4c 5a01 	vstr	s11, [ip, #-4]
 80104b8:	ee33 3a44 	vsub.f32	s6, s6, s8
 80104bc:	edc6 4a00 	vstr	s9, [r6]
 80104c0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80104c4:	ed97 4a01 	vldr	s8, [r7, #4]
 80104c8:	ee66 6a28 	vmul.f32	s13, s12, s17
 80104cc:	edd0 5a00 	vldr	s11, [r0]
 80104d0:	ed95 6a01 	vldr	s12, [r5, #4]
 80104d4:	ee27 7a28 	vmul.f32	s14, s14, s17
 80104d8:	edd2 3a01 	vldr	s7, [r2, #4]
 80104dc:	ee77 2aa6 	vadd.f32	s5, s15, s13
 80104e0:	ee75 4ac6 	vsub.f32	s9, s11, s12
 80104e4:	ed96 1a01 	vldr	s2, [r6, #4]
 80104e8:	ee33 0ac4 	vsub.f32	s0, s7, s8
 80104ec:	edd4 0a01 	vldr	s1, [r4, #4]
 80104f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80104f4:	eddc 6a00 	vldr	s13, [ip]
 80104f8:	ee75 5a86 	vadd.f32	s11, s11, s12
 80104fc:	ed91 6a00 	vldr	s12, [r1]
 8010500:	ee73 3a84 	vadd.f32	s7, s7, s8
 8010504:	ee74 1a80 	vadd.f32	s3, s9, s0
 8010508:	ee36 4a81 	vadd.f32	s8, s13, s2
 801050c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8010510:	ee76 6ac1 	vsub.f32	s13, s13, s2
 8010514:	ee36 1a20 	vadd.f32	s2, s12, s1
 8010518:	ee61 1aa8 	vmul.f32	s3, s3, s17
 801051c:	ee36 6a60 	vsub.f32	s12, s12, s1
 8010520:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8010524:	ee75 0aa3 	vadd.f32	s1, s11, s7
 8010528:	ee75 5ae3 	vsub.f32	s11, s11, s7
 801052c:	ee74 3a01 	vadd.f32	s7, s8, s2
 8010530:	ee34 4a41 	vsub.f32	s8, s8, s2
 8010534:	ee36 1a21 	vadd.f32	s2, s12, s3
 8010538:	ee33 0aa0 	vadd.f32	s0, s7, s1
 801053c:	ee36 6a61 	vsub.f32	s12, s12, s3
 8010540:	ee73 3ae0 	vsub.f32	s7, s7, s1
 8010544:	ee76 1aa4 	vadd.f32	s3, s13, s9
 8010548:	ed8c 0a00 	vstr	s0, [ip]
 801054c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8010550:	449c      	add	ip, r3
 8010552:	ee75 4a07 	vadd.f32	s9, s10, s14
 8010556:	edc6 3a01 	vstr	s7, [r6, #4]
 801055a:	ee35 7a47 	vsub.f32	s14, s10, s14
 801055e:	441e      	add	r6, r3
 8010560:	ee32 5a25 	vadd.f32	s10, s4, s11
 8010564:	ee72 5a65 	vsub.f32	s11, s4, s11
 8010568:	ee72 3a81 	vadd.f32	s7, s5, s2
 801056c:	ed01 5a01 	vstr	s10, [r1, #-4]
 8010570:	ee34 2a43 	vsub.f32	s4, s8, s6
 8010574:	edc4 5a00 	vstr	s11, [r4]
 8010578:	ee37 5a86 	vadd.f32	s10, s15, s12
 801057c:	ee71 5ae4 	vsub.f32	s11, s3, s9
 8010580:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010584:	ed81 2a00 	vstr	s4, [r1]
 8010588:	ee36 6ac7 	vsub.f32	s12, s13, s14
 801058c:	4419      	add	r1, r3
 801058e:	ee33 4a04 	vadd.f32	s8, s6, s8
 8010592:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8010596:	ee74 4aa1 	vadd.f32	s9, s9, s3
 801059a:	ee37 7a26 	vadd.f32	s14, s14, s13
 801059e:	ed84 4a01 	vstr	s8, [r4, #4]
 80105a2:	ed40 3a01 	vstr	s7, [r0, #-4]
 80105a6:	441c      	add	r4, r3
 80105a8:	edc7 2a00 	vstr	s5, [r7]
 80105ac:	ed85 5a00 	vstr	s10, [r5]
 80105b0:	edc2 7a00 	vstr	s15, [r2]
 80105b4:	edc0 5a00 	vstr	s11, [r0]
 80105b8:	4418      	add	r0, r3
 80105ba:	edc7 4a01 	vstr	s9, [r7, #4]
 80105be:	441f      	add	r7, r3
 80105c0:	ed85 6a01 	vstr	s12, [r5, #4]
 80105c4:	441d      	add	r5, r3
 80105c6:	ed82 7a01 	vstr	s14, [r2, #4]
 80105ca:	441a      	add	r2, r3
 80105cc:	f63f af44 	bhi.w	8010458 <arm_radix8_butterfly_f32+0x8c>
 80105d0:	469c      	mov	ip, r3
 80105d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80105d4:	2b07      	cmp	r3, #7
 80105d6:	f240 81b6 	bls.w	8010946 <arm_radix8_butterfly_f32+0x57a>
 80105da:	9a02      	ldr	r2, [sp, #8]
 80105dc:	f109 0608 	add.w	r6, r9, #8
 80105e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80105e2:	f108 0408 	add.w	r4, r8, #8
 80105e6:	3208      	adds	r2, #8
 80105e8:	9f06      	ldr	r7, [sp, #24]
 80105ea:	9d04      	ldr	r5, [sp, #16]
 80105ec:	189a      	adds	r2, r3, r2
 80105ee:	3708      	adds	r7, #8
 80105f0:	3508      	adds	r5, #8
 80105f2:	9807      	ldr	r0, [sp, #28]
 80105f4:	920c      	str	r2, [sp, #48]	; 0x30
 80105f6:	199a      	adds	r2, r3, r6
 80105f8:	9905      	ldr	r1, [sp, #20]
 80105fa:	3008      	adds	r0, #8
 80105fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80105fe:	19da      	adds	r2, r3, r7
 8010600:	310c      	adds	r1, #12
 8010602:	920a      	str	r2, [sp, #40]	; 0x28
 8010604:	195a      	adds	r2, r3, r5
 8010606:	9209      	str	r2, [sp, #36]	; 0x24
 8010608:	191a      	adds	r2, r3, r4
 801060a:	9208      	str	r2, [sp, #32]
 801060c:	181a      	adds	r2, r3, r0
 801060e:	9207      	str	r2, [sp, #28]
 8010610:	185a      	adds	r2, r3, r1
 8010612:	330c      	adds	r3, #12
 8010614:	9205      	str	r2, [sp, #20]
 8010616:	9306      	str	r3, [sp, #24]
 8010618:	2301      	movs	r3, #1
 801061a:	9304      	str	r3, [sp, #16]
 801061c:	2300      	movs	r3, #0
 801061e:	930d      	str	r3, [sp, #52]	; 0x34
 8010620:	4663      	mov	r3, ip
 8010622:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010624:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010626:	f8dd c014 	ldr.w	ip, [sp, #20]
 801062a:	440a      	add	r2, r1
 801062c:	9f06      	ldr	r7, [sp, #24]
 801062e:	9e07      	ldr	r6, [sp, #28]
 8010630:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8010634:	920d      	str	r2, [sp, #52]	; 0x34
 8010636:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 801063a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801063c:	9d08      	ldr	r5, [sp, #32]
 801063e:	4442      	add	r2, r8
 8010640:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010642:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010644:	eb02 0108 	add.w	r1, r2, r8
 8010648:	ed92 ea00 	vldr	s28, [r2]
 801064c:	eb01 0208 	add.w	r2, r1, r8
 8010650:	edd1 da00 	vldr	s27, [r1]
 8010654:	eb02 0108 	add.w	r1, r2, r8
 8010658:	ed92 da00 	vldr	s26, [r2]
 801065c:	eb01 0208 	add.w	r2, r1, r8
 8010660:	edd1 ca00 	vldr	s25, [r1]
 8010664:	eb02 0108 	add.w	r1, r2, r8
 8010668:	ed92 ca00 	vldr	s24, [r2]
 801066c:	eb01 0208 	add.w	r2, r1, r8
 8010670:	edd1 ba00 	vldr	s23, [r1]
 8010674:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010676:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 801067a:	ed92 ba00 	vldr	s22, [r2]
 801067e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010680:	eb0e 0908 	add.w	r9, lr, r8
 8010684:	910e      	str	r1, [sp, #56]	; 0x38
 8010686:	9201      	str	r2, [sp, #4]
 8010688:	eb09 0208 	add.w	r2, r9, r8
 801068c:	ed99 aa01 	vldr	s20, [r9, #4]
 8010690:	edde aa01 	vldr	s21, [lr, #4]
 8010694:	eb02 0908 	add.w	r9, r2, r8
 8010698:	edd2 9a01 	vldr	s19, [r2, #4]
 801069c:	f8dd e010 	ldr.w	lr, [sp, #16]
 80106a0:	eb09 0208 	add.w	r2, r9, r8
 80106a4:	ed99 9a01 	vldr	s18, [r9, #4]
 80106a8:	eb02 0908 	add.w	r9, r2, r8
 80106ac:	ed92 8a01 	vldr	s16, [r2, #4]
 80106b0:	9a01      	ldr	r2, [sp, #4]
 80106b2:	edd9 7a01 	vldr	s15, [r9, #4]
 80106b6:	44c8      	add	r8, r9
 80106b8:	edcd 7a02 	vstr	s15, [sp, #8]
 80106bc:	edd8 7a01 	vldr	s15, [r8, #4]
 80106c0:	edcd 7a03 	vstr	s15, [sp, #12]
 80106c4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80106c6:	e001      	b.n	80106cc <arm_radix8_butterfly_f32+0x300>
 80106c8:	3f3504f3 	.word	0x3f3504f3
 80106cc:	ed92 7a00 	vldr	s14, [r2]
 80106d0:	44de      	add	lr, fp
 80106d2:	ed17 1a01 	vldr	s2, [r7, #-4]
 80106d6:	ed90 5a00 	vldr	s10, [r0]
 80106da:	45f2      	cmp	sl, lr
 80106dc:	ed1c fa01 	vldr	s30, [ip, #-4]
 80106e0:	ee31 3a07 	vadd.f32	s6, s2, s14
 80106e4:	edd6 5a00 	vldr	s11, [r6]
 80106e8:	ee31 1a47 	vsub.f32	s2, s2, s14
 80106ec:	edd4 7a00 	vldr	s15, [r4]
 80106f0:	ed95 7a00 	vldr	s14, [r5]
 80106f4:	ed91 4a00 	vldr	s8, [r1]
 80106f8:	ee3f 6a27 	vadd.f32	s12, s30, s15
 80106fc:	ee77 6a25 	vadd.f32	s13, s14, s11
 8010700:	edd7 ea00 	vldr	s29, [r7]
 8010704:	ee74 fa05 	vadd.f32	s31, s8, s10
 8010708:	ee73 1a06 	vadd.f32	s3, s6, s12
 801070c:	ee34 4a45 	vsub.f32	s8, s8, s10
 8010710:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 8010714:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010718:	ee33 3a46 	vsub.f32	s6, s6, s12
 801071c:	ee31 6a85 	vadd.f32	s12, s3, s10
 8010720:	ee7f 7a67 	vsub.f32	s15, s30, s15
 8010724:	ee34 fa07 	vadd.f32	s30, s8, s14
 8010728:	ed07 6a01 	vstr	s12, [r7, #-4]
 801072c:	ee34 4a47 	vsub.f32	s8, s8, s14
 8010730:	edd5 3a01 	vldr	s7, [r5, #4]
 8010734:	ee7f fae6 	vsub.f32	s31, s31, s13
 8010738:	ed90 7a01 	vldr	s14, [r0, #4]
 801073c:	ee2f fa28 	vmul.f32	s30, s30, s17
 8010740:	edd1 5a01 	vldr	s11, [r1, #4]
 8010744:	ee24 4a28 	vmul.f32	s8, s8, s17
 8010748:	ed96 6a01 	vldr	s12, [r6, #4]
 801074c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8010750:	ee75 0ac7 	vsub.f32	s1, s11, s14
 8010754:	edd2 6a01 	vldr	s13, [r2, #4]
 8010758:	ee73 2ac6 	vsub.f32	s5, s7, s12
 801075c:	edd4 4a01 	vldr	s9, [r4, #4]
 8010760:	ee75 5a87 	vadd.f32	s11, s11, s14
 8010764:	ed9c 7a00 	vldr	s14, [ip]
 8010768:	ee37 2a8f 	vadd.f32	s4, s15, s30
 801076c:	ee33 6a86 	vadd.f32	s12, s7, s12
 8010770:	ee37 facf 	vsub.f32	s30, s15, s30
 8010774:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 8010778:	ee70 7ae2 	vsub.f32	s15, s1, s5
 801077c:	ee7e eae6 	vsub.f32	s29, s29, s13
 8010780:	ee70 2aa2 	vadd.f32	s5, s1, s5
 8010784:	ee77 6a24 	vadd.f32	s13, s14, s9
 8010788:	ee75 0a86 	vadd.f32	s1, s11, s12
 801078c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8010790:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8010794:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8010798:	ee62 2aa8 	vmul.f32	s5, s5, s17
 801079c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80107a0:	ee73 3ae6 	vsub.f32	s7, s7, s13
 80107a4:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 80107a8:	ee77 4a22 	vadd.f32	s9, s14, s5
 80107ac:	ee7e eae7 	vsub.f32	s29, s29, s15
 80107b0:	ee77 7a62 	vsub.f32	s15, s14, s5
 80107b4:	ee71 2a04 	vadd.f32	s5, s2, s8
 80107b8:	ee31 7a44 	vsub.f32	s14, s2, s8
 80107bc:	ee30 1a60 	vsub.f32	s2, s0, s1
 80107c0:	ee73 1a06 	vadd.f32	s3, s6, s12
 80107c4:	ee33 6a46 	vsub.f32	s12, s6, s12
 80107c8:	ee33 3aef 	vsub.f32	s6, s7, s31
 80107cc:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 80107d0:	ee3e 4acf 	vsub.f32	s8, s29, s30
 80107d4:	ee75 3ac2 	vsub.f32	s7, s11, s4
 80107d8:	ee72 5a25 	vadd.f32	s11, s4, s11
 80107dc:	ee32 2aa4 	vadd.f32	s4, s5, s9
 80107e0:	ee72 4ae4 	vsub.f32	s9, s5, s9
 80107e4:	ee77 2a27 	vadd.f32	s5, s14, s15
 80107e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80107ec:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 80107f0:	ee2c fa85 	vmul.f32	s30, s25, s10
 80107f4:	ee69 ea01 	vmul.f32	s29, s18, s2
 80107f8:	ee29 5a05 	vmul.f32	s10, s18, s10
 80107fc:	ee2c 1a81 	vmul.f32	s2, s25, s2
 8010800:	ee6d faa1 	vmul.f32	s31, s27, s3
 8010804:	ee70 0a20 	vadd.f32	s1, s0, s1
 8010808:	ee6a 1a21 	vmul.f32	s3, s20, s3
 801080c:	ee2a 0a03 	vmul.f32	s0, s20, s6
 8010810:	ee2d 3a83 	vmul.f32	s6, s27, s6
 8010814:	edc7 0a00 	vstr	s1, [r7]
 8010818:	ee7f ea2e 	vadd.f32	s29, s30, s29
 801081c:	441f      	add	r7, r3
 801081e:	ee2a faa3 	vmul.f32	s30, s21, s7
 8010822:	ee31 5a45 	vsub.f32	s10, s2, s10
 8010826:	ee6e 3a23 	vmul.f32	s7, s28, s7
 801082a:	edc2 ea00 	vstr	s29, [r2]
 801082e:	ee3f 0a80 	vadd.f32	s0, s31, s0
 8010832:	ee33 3a61 	vsub.f32	s6, s6, s3
 8010836:	ed82 5a01 	vstr	s10, [r2, #4]
 801083a:	ee6e 0a02 	vmul.f32	s1, s28, s4
 801083e:	edcd 3a01 	vstr	s7, [sp, #4]
 8010842:	ed9d 5a03 	vldr	s10, [sp, #12]
 8010846:	ee6b ea86 	vmul.f32	s29, s23, s12
 801084a:	eddd 3a02 	vldr	s7, [sp, #8]
 801084e:	ee6b fa24 	vmul.f32	s31, s22, s9
 8010852:	ed0c 0a01 	vstr	s0, [ip, #-4]
 8010856:	ee65 4a24 	vmul.f32	s9, s10, s9
 801085a:	ed8c 3a00 	vstr	s6, [ip]
 801085e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8010862:	ee23 6a86 	vmul.f32	s12, s7, s12
 8010866:	eddd 3a01 	vldr	s7, [sp, #4]
 801086a:	ee25 5a25 	vmul.f32	s10, s10, s11
 801086e:	441a      	add	r2, r3
 8010870:	ee2c 0a22 	vmul.f32	s0, s24, s5
 8010874:	449c      	add	ip, r3
 8010876:	ee68 1a04 	vmul.f32	s3, s16, s8
 801087a:	ee70 0a8f 	vadd.f32	s1, s1, s30
 801087e:	ee2d 3a07 	vmul.f32	s6, s26, s14
 8010882:	ee29 faa7 	vmul.f32	s30, s19, s15
 8010886:	ee2a 2a82 	vmul.f32	s4, s21, s4
 801088a:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 801088e:	ee6b 5a25 	vmul.f32	s11, s22, s11
 8010892:	ee68 2a22 	vmul.f32	s5, s16, s5
 8010896:	ee2c 4a04 	vmul.f32	s8, s24, s8
 801089a:	ee29 7a87 	vmul.f32	s14, s19, s14
 801089e:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80108a2:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80108a6:	ee7e ea81 	vadd.f32	s29, s29, s2
 80108aa:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80108ae:	ee3f 5a85 	vadd.f32	s10, s31, s10
 80108b2:	ee75 4ae4 	vsub.f32	s9, s11, s9
 80108b6:	edc4 ea00 	vstr	s29, [r4]
 80108ba:	ee30 0a21 	vadd.f32	s0, s0, s3
 80108be:	ed84 6a01 	vstr	s12, [r4, #4]
 80108c2:	ee74 2a62 	vsub.f32	s5, s8, s5
 80108c6:	edc1 0a00 	vstr	s1, [r1]
 80108ca:	ee33 3a0f 	vadd.f32	s6, s6, s30
 80108ce:	edc1 3a01 	vstr	s7, [r1, #4]
 80108d2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80108d6:	ed86 5a00 	vstr	s10, [r6]
 80108da:	edc6 4a01 	vstr	s9, [r6, #4]
 80108de:	4419      	add	r1, r3
 80108e0:	ed80 0a00 	vstr	s0, [r0]
 80108e4:	441c      	add	r4, r3
 80108e6:	edc0 2a01 	vstr	s5, [r0, #4]
 80108ea:	441e      	add	r6, r3
 80108ec:	ed85 3a00 	vstr	s6, [r5]
 80108f0:	4418      	add	r0, r3
 80108f2:	ed85 7a01 	vstr	s14, [r5, #4]
 80108f6:	441d      	add	r5, r3
 80108f8:	f63f aee8 	bhi.w	80106cc <arm_radix8_butterfly_f32+0x300>
 80108fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80108fe:	9a04      	ldr	r2, [sp, #16]
 8010900:	3108      	adds	r1, #8
 8010902:	3201      	adds	r2, #1
 8010904:	910c      	str	r1, [sp, #48]	; 0x30
 8010906:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010908:	9204      	str	r2, [sp, #16]
 801090a:	3108      	adds	r1, #8
 801090c:	910b      	str	r1, [sp, #44]	; 0x2c
 801090e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010910:	3108      	adds	r1, #8
 8010912:	910a      	str	r1, [sp, #40]	; 0x28
 8010914:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010916:	3108      	adds	r1, #8
 8010918:	9109      	str	r1, [sp, #36]	; 0x24
 801091a:	9908      	ldr	r1, [sp, #32]
 801091c:	3108      	adds	r1, #8
 801091e:	9108      	str	r1, [sp, #32]
 8010920:	9907      	ldr	r1, [sp, #28]
 8010922:	3108      	adds	r1, #8
 8010924:	9107      	str	r1, [sp, #28]
 8010926:	9906      	ldr	r1, [sp, #24]
 8010928:	3108      	adds	r1, #8
 801092a:	9106      	str	r1, [sp, #24]
 801092c:	9905      	ldr	r1, [sp, #20]
 801092e:	3108      	adds	r1, #8
 8010930:	9105      	str	r1, [sp, #20]
 8010932:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010934:	4291      	cmp	r1, r2
 8010936:	f47f ae74 	bne.w	8010622 <arm_radix8_butterfly_f32+0x256>
 801093a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801093c:	468b      	mov	fp, r1
 801093e:	00db      	lsls	r3, r3, #3
 8010940:	b29b      	uxth	r3, r3
 8010942:	9310      	str	r3, [sp, #64]	; 0x40
 8010944:	e551      	b.n	80103ea <arm_radix8_butterfly_f32+0x1e>
 8010946:	b015      	add	sp, #84	; 0x54
 8010948:	ecbd 8b10 	vpop	{d8-d15}
 801094c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010950 <atoi>:
 8010950:	220a      	movs	r2, #10
 8010952:	2100      	movs	r1, #0
 8010954:	f000 be06 	b.w	8011564 <strtol>

08010958 <__errno>:
 8010958:	4b01      	ldr	r3, [pc, #4]	; (8010960 <__errno+0x8>)
 801095a:	6818      	ldr	r0, [r3, #0]
 801095c:	4770      	bx	lr
 801095e:	bf00      	nop
 8010960:	24000558 	.word	0x24000558

08010964 <__libc_init_array>:
 8010964:	b570      	push	{r4, r5, r6, lr}
 8010966:	4d0d      	ldr	r5, [pc, #52]	; (801099c <__libc_init_array+0x38>)
 8010968:	4c0d      	ldr	r4, [pc, #52]	; (80109a0 <__libc_init_array+0x3c>)
 801096a:	1b64      	subs	r4, r4, r5
 801096c:	10a4      	asrs	r4, r4, #2
 801096e:	2600      	movs	r6, #0
 8010970:	42a6      	cmp	r6, r4
 8010972:	d109      	bne.n	8010988 <__libc_init_array+0x24>
 8010974:	4d0b      	ldr	r5, [pc, #44]	; (80109a4 <__libc_init_array+0x40>)
 8010976:	4c0c      	ldr	r4, [pc, #48]	; (80109a8 <__libc_init_array+0x44>)
 8010978:	f004 f8f4 	bl	8014b64 <_init>
 801097c:	1b64      	subs	r4, r4, r5
 801097e:	10a4      	asrs	r4, r4, #2
 8010980:	2600      	movs	r6, #0
 8010982:	42a6      	cmp	r6, r4
 8010984:	d105      	bne.n	8010992 <__libc_init_array+0x2e>
 8010986:	bd70      	pop	{r4, r5, r6, pc}
 8010988:	f855 3b04 	ldr.w	r3, [r5], #4
 801098c:	4798      	blx	r3
 801098e:	3601      	adds	r6, #1
 8010990:	e7ee      	b.n	8010970 <__libc_init_array+0xc>
 8010992:	f855 3b04 	ldr.w	r3, [r5], #4
 8010996:	4798      	blx	r3
 8010998:	3601      	adds	r6, #1
 801099a:	e7f2      	b.n	8010982 <__libc_init_array+0x1e>
 801099c:	0801f5a0 	.word	0x0801f5a0
 80109a0:	0801f5a0 	.word	0x0801f5a0
 80109a4:	0801f5a0 	.word	0x0801f5a0
 80109a8:	0801f5a4 	.word	0x0801f5a4

080109ac <memcpy>:
 80109ac:	440a      	add	r2, r1
 80109ae:	4291      	cmp	r1, r2
 80109b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80109b4:	d100      	bne.n	80109b8 <memcpy+0xc>
 80109b6:	4770      	bx	lr
 80109b8:	b510      	push	{r4, lr}
 80109ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80109c2:	4291      	cmp	r1, r2
 80109c4:	d1f9      	bne.n	80109ba <memcpy+0xe>
 80109c6:	bd10      	pop	{r4, pc}

080109c8 <memset>:
 80109c8:	4402      	add	r2, r0
 80109ca:	4603      	mov	r3, r0
 80109cc:	4293      	cmp	r3, r2
 80109ce:	d100      	bne.n	80109d2 <memset+0xa>
 80109d0:	4770      	bx	lr
 80109d2:	f803 1b01 	strb.w	r1, [r3], #1
 80109d6:	e7f9      	b.n	80109cc <memset+0x4>

080109d8 <__cvt>:
 80109d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109da:	ed2d 8b02 	vpush	{d8}
 80109de:	eeb0 8b40 	vmov.f64	d8, d0
 80109e2:	b085      	sub	sp, #20
 80109e4:	4617      	mov	r7, r2
 80109e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80109e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80109ea:	ee18 2a90 	vmov	r2, s17
 80109ee:	f025 0520 	bic.w	r5, r5, #32
 80109f2:	2a00      	cmp	r2, #0
 80109f4:	bfb6      	itet	lt
 80109f6:	222d      	movlt	r2, #45	; 0x2d
 80109f8:	2200      	movge	r2, #0
 80109fa:	eeb1 8b40 	vneglt.f64	d8, d0
 80109fe:	2d46      	cmp	r5, #70	; 0x46
 8010a00:	460c      	mov	r4, r1
 8010a02:	701a      	strb	r2, [r3, #0]
 8010a04:	d004      	beq.n	8010a10 <__cvt+0x38>
 8010a06:	2d45      	cmp	r5, #69	; 0x45
 8010a08:	d100      	bne.n	8010a0c <__cvt+0x34>
 8010a0a:	3401      	adds	r4, #1
 8010a0c:	2102      	movs	r1, #2
 8010a0e:	e000      	b.n	8010a12 <__cvt+0x3a>
 8010a10:	2103      	movs	r1, #3
 8010a12:	ab03      	add	r3, sp, #12
 8010a14:	9301      	str	r3, [sp, #4]
 8010a16:	ab02      	add	r3, sp, #8
 8010a18:	9300      	str	r3, [sp, #0]
 8010a1a:	4622      	mov	r2, r4
 8010a1c:	4633      	mov	r3, r6
 8010a1e:	eeb0 0b48 	vmov.f64	d0, d8
 8010a22:	f000 fe55 	bl	80116d0 <_dtoa_r>
 8010a26:	2d47      	cmp	r5, #71	; 0x47
 8010a28:	d101      	bne.n	8010a2e <__cvt+0x56>
 8010a2a:	07fb      	lsls	r3, r7, #31
 8010a2c:	d51a      	bpl.n	8010a64 <__cvt+0x8c>
 8010a2e:	2d46      	cmp	r5, #70	; 0x46
 8010a30:	eb00 0204 	add.w	r2, r0, r4
 8010a34:	d10c      	bne.n	8010a50 <__cvt+0x78>
 8010a36:	7803      	ldrb	r3, [r0, #0]
 8010a38:	2b30      	cmp	r3, #48	; 0x30
 8010a3a:	d107      	bne.n	8010a4c <__cvt+0x74>
 8010a3c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a44:	bf1c      	itt	ne
 8010a46:	f1c4 0401 	rsbne	r4, r4, #1
 8010a4a:	6034      	strne	r4, [r6, #0]
 8010a4c:	6833      	ldr	r3, [r6, #0]
 8010a4e:	441a      	add	r2, r3
 8010a50:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a58:	bf08      	it	eq
 8010a5a:	9203      	streq	r2, [sp, #12]
 8010a5c:	2130      	movs	r1, #48	; 0x30
 8010a5e:	9b03      	ldr	r3, [sp, #12]
 8010a60:	4293      	cmp	r3, r2
 8010a62:	d307      	bcc.n	8010a74 <__cvt+0x9c>
 8010a64:	9b03      	ldr	r3, [sp, #12]
 8010a66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a68:	1a1b      	subs	r3, r3, r0
 8010a6a:	6013      	str	r3, [r2, #0]
 8010a6c:	b005      	add	sp, #20
 8010a6e:	ecbd 8b02 	vpop	{d8}
 8010a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a74:	1c5c      	adds	r4, r3, #1
 8010a76:	9403      	str	r4, [sp, #12]
 8010a78:	7019      	strb	r1, [r3, #0]
 8010a7a:	e7f0      	b.n	8010a5e <__cvt+0x86>

08010a7c <__exponent>:
 8010a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a7e:	4603      	mov	r3, r0
 8010a80:	2900      	cmp	r1, #0
 8010a82:	bfb8      	it	lt
 8010a84:	4249      	neglt	r1, r1
 8010a86:	f803 2b02 	strb.w	r2, [r3], #2
 8010a8a:	bfb4      	ite	lt
 8010a8c:	222d      	movlt	r2, #45	; 0x2d
 8010a8e:	222b      	movge	r2, #43	; 0x2b
 8010a90:	2909      	cmp	r1, #9
 8010a92:	7042      	strb	r2, [r0, #1]
 8010a94:	dd2a      	ble.n	8010aec <__exponent+0x70>
 8010a96:	f10d 0407 	add.w	r4, sp, #7
 8010a9a:	46a4      	mov	ip, r4
 8010a9c:	270a      	movs	r7, #10
 8010a9e:	46a6      	mov	lr, r4
 8010aa0:	460a      	mov	r2, r1
 8010aa2:	fb91 f6f7 	sdiv	r6, r1, r7
 8010aa6:	fb07 1516 	mls	r5, r7, r6, r1
 8010aaa:	3530      	adds	r5, #48	; 0x30
 8010aac:	2a63      	cmp	r2, #99	; 0x63
 8010aae:	f104 34ff 	add.w	r4, r4, #4294967295
 8010ab2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010ab6:	4631      	mov	r1, r6
 8010ab8:	dcf1      	bgt.n	8010a9e <__exponent+0x22>
 8010aba:	3130      	adds	r1, #48	; 0x30
 8010abc:	f1ae 0502 	sub.w	r5, lr, #2
 8010ac0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010ac4:	1c44      	adds	r4, r0, #1
 8010ac6:	4629      	mov	r1, r5
 8010ac8:	4561      	cmp	r1, ip
 8010aca:	d30a      	bcc.n	8010ae2 <__exponent+0x66>
 8010acc:	f10d 0209 	add.w	r2, sp, #9
 8010ad0:	eba2 020e 	sub.w	r2, r2, lr
 8010ad4:	4565      	cmp	r5, ip
 8010ad6:	bf88      	it	hi
 8010ad8:	2200      	movhi	r2, #0
 8010ada:	4413      	add	r3, r2
 8010adc:	1a18      	subs	r0, r3, r0
 8010ade:	b003      	add	sp, #12
 8010ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ae6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010aea:	e7ed      	b.n	8010ac8 <__exponent+0x4c>
 8010aec:	2330      	movs	r3, #48	; 0x30
 8010aee:	3130      	adds	r1, #48	; 0x30
 8010af0:	7083      	strb	r3, [r0, #2]
 8010af2:	70c1      	strb	r1, [r0, #3]
 8010af4:	1d03      	adds	r3, r0, #4
 8010af6:	e7f1      	b.n	8010adc <__exponent+0x60>

08010af8 <_printf_float>:
 8010af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010afc:	b08b      	sub	sp, #44	; 0x2c
 8010afe:	460c      	mov	r4, r1
 8010b00:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010b04:	4616      	mov	r6, r2
 8010b06:	461f      	mov	r7, r3
 8010b08:	4605      	mov	r5, r0
 8010b0a:	f001 fb61 	bl	80121d0 <_localeconv_r>
 8010b0e:	f8d0 b000 	ldr.w	fp, [r0]
 8010b12:	4658      	mov	r0, fp
 8010b14:	f7ef fbe4 	bl	80002e0 <strlen>
 8010b18:	2300      	movs	r3, #0
 8010b1a:	9308      	str	r3, [sp, #32]
 8010b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8010b20:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010b24:	6822      	ldr	r2, [r4, #0]
 8010b26:	3307      	adds	r3, #7
 8010b28:	f023 0307 	bic.w	r3, r3, #7
 8010b2c:	f103 0108 	add.w	r1, r3, #8
 8010b30:	f8c8 1000 	str.w	r1, [r8]
 8010b34:	4682      	mov	sl, r0
 8010b36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b3a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010b3e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8010da0 <_printf_float+0x2a8>
 8010b42:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8010b46:	eeb0 6bc0 	vabs.f64	d6, d0
 8010b4a:	eeb4 6b47 	vcmp.f64	d6, d7
 8010b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b52:	dd24      	ble.n	8010b9e <_printf_float+0xa6>
 8010b54:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b5c:	d502      	bpl.n	8010b64 <_printf_float+0x6c>
 8010b5e:	232d      	movs	r3, #45	; 0x2d
 8010b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b64:	4b90      	ldr	r3, [pc, #576]	; (8010da8 <_printf_float+0x2b0>)
 8010b66:	4891      	ldr	r0, [pc, #580]	; (8010dac <_printf_float+0x2b4>)
 8010b68:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010b6c:	bf94      	ite	ls
 8010b6e:	4698      	movls	r8, r3
 8010b70:	4680      	movhi	r8, r0
 8010b72:	2303      	movs	r3, #3
 8010b74:	6123      	str	r3, [r4, #16]
 8010b76:	f022 0204 	bic.w	r2, r2, #4
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	6022      	str	r2, [r4, #0]
 8010b7e:	9304      	str	r3, [sp, #16]
 8010b80:	9700      	str	r7, [sp, #0]
 8010b82:	4633      	mov	r3, r6
 8010b84:	aa09      	add	r2, sp, #36	; 0x24
 8010b86:	4621      	mov	r1, r4
 8010b88:	4628      	mov	r0, r5
 8010b8a:	f000 f9d3 	bl	8010f34 <_printf_common>
 8010b8e:	3001      	adds	r0, #1
 8010b90:	f040 808a 	bne.w	8010ca8 <_printf_float+0x1b0>
 8010b94:	f04f 30ff 	mov.w	r0, #4294967295
 8010b98:	b00b      	add	sp, #44	; 0x2c
 8010b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b9e:	eeb4 0b40 	vcmp.f64	d0, d0
 8010ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ba6:	d709      	bvc.n	8010bbc <_printf_float+0xc4>
 8010ba8:	ee10 3a90 	vmov	r3, s1
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	bfbc      	itt	lt
 8010bb0:	232d      	movlt	r3, #45	; 0x2d
 8010bb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010bb6:	487e      	ldr	r0, [pc, #504]	; (8010db0 <_printf_float+0x2b8>)
 8010bb8:	4b7e      	ldr	r3, [pc, #504]	; (8010db4 <_printf_float+0x2bc>)
 8010bba:	e7d5      	b.n	8010b68 <_printf_float+0x70>
 8010bbc:	6863      	ldr	r3, [r4, #4]
 8010bbe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8010bc2:	9104      	str	r1, [sp, #16]
 8010bc4:	1c59      	adds	r1, r3, #1
 8010bc6:	d13c      	bne.n	8010c42 <_printf_float+0x14a>
 8010bc8:	2306      	movs	r3, #6
 8010bca:	6063      	str	r3, [r4, #4]
 8010bcc:	2300      	movs	r3, #0
 8010bce:	9303      	str	r3, [sp, #12]
 8010bd0:	ab08      	add	r3, sp, #32
 8010bd2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010bd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010bda:	ab07      	add	r3, sp, #28
 8010bdc:	6861      	ldr	r1, [r4, #4]
 8010bde:	9300      	str	r3, [sp, #0]
 8010be0:	6022      	str	r2, [r4, #0]
 8010be2:	f10d 031b 	add.w	r3, sp, #27
 8010be6:	4628      	mov	r0, r5
 8010be8:	f7ff fef6 	bl	80109d8 <__cvt>
 8010bec:	9b04      	ldr	r3, [sp, #16]
 8010bee:	9907      	ldr	r1, [sp, #28]
 8010bf0:	2b47      	cmp	r3, #71	; 0x47
 8010bf2:	4680      	mov	r8, r0
 8010bf4:	d108      	bne.n	8010c08 <_printf_float+0x110>
 8010bf6:	1cc8      	adds	r0, r1, #3
 8010bf8:	db02      	blt.n	8010c00 <_printf_float+0x108>
 8010bfa:	6863      	ldr	r3, [r4, #4]
 8010bfc:	4299      	cmp	r1, r3
 8010bfe:	dd41      	ble.n	8010c84 <_printf_float+0x18c>
 8010c00:	f1a9 0902 	sub.w	r9, r9, #2
 8010c04:	fa5f f989 	uxtb.w	r9, r9
 8010c08:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010c0c:	d820      	bhi.n	8010c50 <_printf_float+0x158>
 8010c0e:	3901      	subs	r1, #1
 8010c10:	464a      	mov	r2, r9
 8010c12:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010c16:	9107      	str	r1, [sp, #28]
 8010c18:	f7ff ff30 	bl	8010a7c <__exponent>
 8010c1c:	9a08      	ldr	r2, [sp, #32]
 8010c1e:	9004      	str	r0, [sp, #16]
 8010c20:	1813      	adds	r3, r2, r0
 8010c22:	2a01      	cmp	r2, #1
 8010c24:	6123      	str	r3, [r4, #16]
 8010c26:	dc02      	bgt.n	8010c2e <_printf_float+0x136>
 8010c28:	6822      	ldr	r2, [r4, #0]
 8010c2a:	07d2      	lsls	r2, r2, #31
 8010c2c:	d501      	bpl.n	8010c32 <_printf_float+0x13a>
 8010c2e:	3301      	adds	r3, #1
 8010c30:	6123      	str	r3, [r4, #16]
 8010c32:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d0a2      	beq.n	8010b80 <_printf_float+0x88>
 8010c3a:	232d      	movs	r3, #45	; 0x2d
 8010c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c40:	e79e      	b.n	8010b80 <_printf_float+0x88>
 8010c42:	9904      	ldr	r1, [sp, #16]
 8010c44:	2947      	cmp	r1, #71	; 0x47
 8010c46:	d1c1      	bne.n	8010bcc <_printf_float+0xd4>
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d1bf      	bne.n	8010bcc <_printf_float+0xd4>
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	e7bc      	b.n	8010bca <_printf_float+0xd2>
 8010c50:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010c54:	d118      	bne.n	8010c88 <_printf_float+0x190>
 8010c56:	2900      	cmp	r1, #0
 8010c58:	6863      	ldr	r3, [r4, #4]
 8010c5a:	dd0b      	ble.n	8010c74 <_printf_float+0x17c>
 8010c5c:	6121      	str	r1, [r4, #16]
 8010c5e:	b913      	cbnz	r3, 8010c66 <_printf_float+0x16e>
 8010c60:	6822      	ldr	r2, [r4, #0]
 8010c62:	07d0      	lsls	r0, r2, #31
 8010c64:	d502      	bpl.n	8010c6c <_printf_float+0x174>
 8010c66:	3301      	adds	r3, #1
 8010c68:	440b      	add	r3, r1
 8010c6a:	6123      	str	r3, [r4, #16]
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010c70:	9304      	str	r3, [sp, #16]
 8010c72:	e7de      	b.n	8010c32 <_printf_float+0x13a>
 8010c74:	b913      	cbnz	r3, 8010c7c <_printf_float+0x184>
 8010c76:	6822      	ldr	r2, [r4, #0]
 8010c78:	07d2      	lsls	r2, r2, #31
 8010c7a:	d501      	bpl.n	8010c80 <_printf_float+0x188>
 8010c7c:	3302      	adds	r3, #2
 8010c7e:	e7f4      	b.n	8010c6a <_printf_float+0x172>
 8010c80:	2301      	movs	r3, #1
 8010c82:	e7f2      	b.n	8010c6a <_printf_float+0x172>
 8010c84:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010c88:	9b08      	ldr	r3, [sp, #32]
 8010c8a:	4299      	cmp	r1, r3
 8010c8c:	db05      	blt.n	8010c9a <_printf_float+0x1a2>
 8010c8e:	6823      	ldr	r3, [r4, #0]
 8010c90:	6121      	str	r1, [r4, #16]
 8010c92:	07d8      	lsls	r0, r3, #31
 8010c94:	d5ea      	bpl.n	8010c6c <_printf_float+0x174>
 8010c96:	1c4b      	adds	r3, r1, #1
 8010c98:	e7e7      	b.n	8010c6a <_printf_float+0x172>
 8010c9a:	2900      	cmp	r1, #0
 8010c9c:	bfd4      	ite	le
 8010c9e:	f1c1 0202 	rsble	r2, r1, #2
 8010ca2:	2201      	movgt	r2, #1
 8010ca4:	4413      	add	r3, r2
 8010ca6:	e7e0      	b.n	8010c6a <_printf_float+0x172>
 8010ca8:	6823      	ldr	r3, [r4, #0]
 8010caa:	055a      	lsls	r2, r3, #21
 8010cac:	d407      	bmi.n	8010cbe <_printf_float+0x1c6>
 8010cae:	6923      	ldr	r3, [r4, #16]
 8010cb0:	4642      	mov	r2, r8
 8010cb2:	4631      	mov	r1, r6
 8010cb4:	4628      	mov	r0, r5
 8010cb6:	47b8      	blx	r7
 8010cb8:	3001      	adds	r0, #1
 8010cba:	d12a      	bne.n	8010d12 <_printf_float+0x21a>
 8010cbc:	e76a      	b.n	8010b94 <_printf_float+0x9c>
 8010cbe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010cc2:	f240 80e2 	bls.w	8010e8a <_printf_float+0x392>
 8010cc6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010cca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cd2:	d133      	bne.n	8010d3c <_printf_float+0x244>
 8010cd4:	4a38      	ldr	r2, [pc, #224]	; (8010db8 <_printf_float+0x2c0>)
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	4631      	mov	r1, r6
 8010cda:	4628      	mov	r0, r5
 8010cdc:	47b8      	blx	r7
 8010cde:	3001      	adds	r0, #1
 8010ce0:	f43f af58 	beq.w	8010b94 <_printf_float+0x9c>
 8010ce4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	db02      	blt.n	8010cf2 <_printf_float+0x1fa>
 8010cec:	6823      	ldr	r3, [r4, #0]
 8010cee:	07d8      	lsls	r0, r3, #31
 8010cf0:	d50f      	bpl.n	8010d12 <_printf_float+0x21a>
 8010cf2:	4653      	mov	r3, sl
 8010cf4:	465a      	mov	r2, fp
 8010cf6:	4631      	mov	r1, r6
 8010cf8:	4628      	mov	r0, r5
 8010cfa:	47b8      	blx	r7
 8010cfc:	3001      	adds	r0, #1
 8010cfe:	f43f af49 	beq.w	8010b94 <_printf_float+0x9c>
 8010d02:	f04f 0800 	mov.w	r8, #0
 8010d06:	f104 091a 	add.w	r9, r4, #26
 8010d0a:	9b08      	ldr	r3, [sp, #32]
 8010d0c:	3b01      	subs	r3, #1
 8010d0e:	4543      	cmp	r3, r8
 8010d10:	dc09      	bgt.n	8010d26 <_printf_float+0x22e>
 8010d12:	6823      	ldr	r3, [r4, #0]
 8010d14:	079b      	lsls	r3, r3, #30
 8010d16:	f100 8108 	bmi.w	8010f2a <_printf_float+0x432>
 8010d1a:	68e0      	ldr	r0, [r4, #12]
 8010d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d1e:	4298      	cmp	r0, r3
 8010d20:	bfb8      	it	lt
 8010d22:	4618      	movlt	r0, r3
 8010d24:	e738      	b.n	8010b98 <_printf_float+0xa0>
 8010d26:	2301      	movs	r3, #1
 8010d28:	464a      	mov	r2, r9
 8010d2a:	4631      	mov	r1, r6
 8010d2c:	4628      	mov	r0, r5
 8010d2e:	47b8      	blx	r7
 8010d30:	3001      	adds	r0, #1
 8010d32:	f43f af2f 	beq.w	8010b94 <_printf_float+0x9c>
 8010d36:	f108 0801 	add.w	r8, r8, #1
 8010d3a:	e7e6      	b.n	8010d0a <_printf_float+0x212>
 8010d3c:	9b07      	ldr	r3, [sp, #28]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	dc3c      	bgt.n	8010dbc <_printf_float+0x2c4>
 8010d42:	4a1d      	ldr	r2, [pc, #116]	; (8010db8 <_printf_float+0x2c0>)
 8010d44:	2301      	movs	r3, #1
 8010d46:	4631      	mov	r1, r6
 8010d48:	4628      	mov	r0, r5
 8010d4a:	47b8      	blx	r7
 8010d4c:	3001      	adds	r0, #1
 8010d4e:	f43f af21 	beq.w	8010b94 <_printf_float+0x9c>
 8010d52:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010d56:	4313      	orrs	r3, r2
 8010d58:	d102      	bne.n	8010d60 <_printf_float+0x268>
 8010d5a:	6823      	ldr	r3, [r4, #0]
 8010d5c:	07d9      	lsls	r1, r3, #31
 8010d5e:	d5d8      	bpl.n	8010d12 <_printf_float+0x21a>
 8010d60:	4653      	mov	r3, sl
 8010d62:	465a      	mov	r2, fp
 8010d64:	4631      	mov	r1, r6
 8010d66:	4628      	mov	r0, r5
 8010d68:	47b8      	blx	r7
 8010d6a:	3001      	adds	r0, #1
 8010d6c:	f43f af12 	beq.w	8010b94 <_printf_float+0x9c>
 8010d70:	f04f 0900 	mov.w	r9, #0
 8010d74:	f104 0a1a 	add.w	sl, r4, #26
 8010d78:	9b07      	ldr	r3, [sp, #28]
 8010d7a:	425b      	negs	r3, r3
 8010d7c:	454b      	cmp	r3, r9
 8010d7e:	dc01      	bgt.n	8010d84 <_printf_float+0x28c>
 8010d80:	9b08      	ldr	r3, [sp, #32]
 8010d82:	e795      	b.n	8010cb0 <_printf_float+0x1b8>
 8010d84:	2301      	movs	r3, #1
 8010d86:	4652      	mov	r2, sl
 8010d88:	4631      	mov	r1, r6
 8010d8a:	4628      	mov	r0, r5
 8010d8c:	47b8      	blx	r7
 8010d8e:	3001      	adds	r0, #1
 8010d90:	f43f af00 	beq.w	8010b94 <_printf_float+0x9c>
 8010d94:	f109 0901 	add.w	r9, r9, #1
 8010d98:	e7ee      	b.n	8010d78 <_printf_float+0x280>
 8010d9a:	bf00      	nop
 8010d9c:	f3af 8000 	nop.w
 8010da0:	ffffffff 	.word	0xffffffff
 8010da4:	7fefffff 	.word	0x7fefffff
 8010da8:	0801df2c 	.word	0x0801df2c
 8010dac:	0801df30 	.word	0x0801df30
 8010db0:	0801df38 	.word	0x0801df38
 8010db4:	0801df34 	.word	0x0801df34
 8010db8:	0801df3c 	.word	0x0801df3c
 8010dbc:	9a08      	ldr	r2, [sp, #32]
 8010dbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	bfa8      	it	ge
 8010dc4:	461a      	movge	r2, r3
 8010dc6:	2a00      	cmp	r2, #0
 8010dc8:	4691      	mov	r9, r2
 8010dca:	dc38      	bgt.n	8010e3e <_printf_float+0x346>
 8010dcc:	2300      	movs	r3, #0
 8010dce:	9305      	str	r3, [sp, #20]
 8010dd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010dd4:	f104 021a 	add.w	r2, r4, #26
 8010dd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010dda:	9905      	ldr	r1, [sp, #20]
 8010ddc:	9304      	str	r3, [sp, #16]
 8010dde:	eba3 0309 	sub.w	r3, r3, r9
 8010de2:	428b      	cmp	r3, r1
 8010de4:	dc33      	bgt.n	8010e4e <_printf_float+0x356>
 8010de6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010dea:	429a      	cmp	r2, r3
 8010dec:	db3c      	blt.n	8010e68 <_printf_float+0x370>
 8010dee:	6823      	ldr	r3, [r4, #0]
 8010df0:	07da      	lsls	r2, r3, #31
 8010df2:	d439      	bmi.n	8010e68 <_printf_float+0x370>
 8010df4:	9b08      	ldr	r3, [sp, #32]
 8010df6:	9a04      	ldr	r2, [sp, #16]
 8010df8:	9907      	ldr	r1, [sp, #28]
 8010dfa:	1a9a      	subs	r2, r3, r2
 8010dfc:	eba3 0901 	sub.w	r9, r3, r1
 8010e00:	4591      	cmp	r9, r2
 8010e02:	bfa8      	it	ge
 8010e04:	4691      	movge	r9, r2
 8010e06:	f1b9 0f00 	cmp.w	r9, #0
 8010e0a:	dc35      	bgt.n	8010e78 <_printf_float+0x380>
 8010e0c:	f04f 0800 	mov.w	r8, #0
 8010e10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010e14:	f104 0a1a 	add.w	sl, r4, #26
 8010e18:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010e1c:	1a9b      	subs	r3, r3, r2
 8010e1e:	eba3 0309 	sub.w	r3, r3, r9
 8010e22:	4543      	cmp	r3, r8
 8010e24:	f77f af75 	ble.w	8010d12 <_printf_float+0x21a>
 8010e28:	2301      	movs	r3, #1
 8010e2a:	4652      	mov	r2, sl
 8010e2c:	4631      	mov	r1, r6
 8010e2e:	4628      	mov	r0, r5
 8010e30:	47b8      	blx	r7
 8010e32:	3001      	adds	r0, #1
 8010e34:	f43f aeae 	beq.w	8010b94 <_printf_float+0x9c>
 8010e38:	f108 0801 	add.w	r8, r8, #1
 8010e3c:	e7ec      	b.n	8010e18 <_printf_float+0x320>
 8010e3e:	4613      	mov	r3, r2
 8010e40:	4631      	mov	r1, r6
 8010e42:	4642      	mov	r2, r8
 8010e44:	4628      	mov	r0, r5
 8010e46:	47b8      	blx	r7
 8010e48:	3001      	adds	r0, #1
 8010e4a:	d1bf      	bne.n	8010dcc <_printf_float+0x2d4>
 8010e4c:	e6a2      	b.n	8010b94 <_printf_float+0x9c>
 8010e4e:	2301      	movs	r3, #1
 8010e50:	4631      	mov	r1, r6
 8010e52:	4628      	mov	r0, r5
 8010e54:	9204      	str	r2, [sp, #16]
 8010e56:	47b8      	blx	r7
 8010e58:	3001      	adds	r0, #1
 8010e5a:	f43f ae9b 	beq.w	8010b94 <_printf_float+0x9c>
 8010e5e:	9b05      	ldr	r3, [sp, #20]
 8010e60:	9a04      	ldr	r2, [sp, #16]
 8010e62:	3301      	adds	r3, #1
 8010e64:	9305      	str	r3, [sp, #20]
 8010e66:	e7b7      	b.n	8010dd8 <_printf_float+0x2e0>
 8010e68:	4653      	mov	r3, sl
 8010e6a:	465a      	mov	r2, fp
 8010e6c:	4631      	mov	r1, r6
 8010e6e:	4628      	mov	r0, r5
 8010e70:	47b8      	blx	r7
 8010e72:	3001      	adds	r0, #1
 8010e74:	d1be      	bne.n	8010df4 <_printf_float+0x2fc>
 8010e76:	e68d      	b.n	8010b94 <_printf_float+0x9c>
 8010e78:	9a04      	ldr	r2, [sp, #16]
 8010e7a:	464b      	mov	r3, r9
 8010e7c:	4442      	add	r2, r8
 8010e7e:	4631      	mov	r1, r6
 8010e80:	4628      	mov	r0, r5
 8010e82:	47b8      	blx	r7
 8010e84:	3001      	adds	r0, #1
 8010e86:	d1c1      	bne.n	8010e0c <_printf_float+0x314>
 8010e88:	e684      	b.n	8010b94 <_printf_float+0x9c>
 8010e8a:	9a08      	ldr	r2, [sp, #32]
 8010e8c:	2a01      	cmp	r2, #1
 8010e8e:	dc01      	bgt.n	8010e94 <_printf_float+0x39c>
 8010e90:	07db      	lsls	r3, r3, #31
 8010e92:	d537      	bpl.n	8010f04 <_printf_float+0x40c>
 8010e94:	2301      	movs	r3, #1
 8010e96:	4642      	mov	r2, r8
 8010e98:	4631      	mov	r1, r6
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	47b8      	blx	r7
 8010e9e:	3001      	adds	r0, #1
 8010ea0:	f43f ae78 	beq.w	8010b94 <_printf_float+0x9c>
 8010ea4:	4653      	mov	r3, sl
 8010ea6:	465a      	mov	r2, fp
 8010ea8:	4631      	mov	r1, r6
 8010eaa:	4628      	mov	r0, r5
 8010eac:	47b8      	blx	r7
 8010eae:	3001      	adds	r0, #1
 8010eb0:	f43f ae70 	beq.w	8010b94 <_printf_float+0x9c>
 8010eb4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010eb8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec0:	d01b      	beq.n	8010efa <_printf_float+0x402>
 8010ec2:	9b08      	ldr	r3, [sp, #32]
 8010ec4:	f108 0201 	add.w	r2, r8, #1
 8010ec8:	3b01      	subs	r3, #1
 8010eca:	4631      	mov	r1, r6
 8010ecc:	4628      	mov	r0, r5
 8010ece:	47b8      	blx	r7
 8010ed0:	3001      	adds	r0, #1
 8010ed2:	d10e      	bne.n	8010ef2 <_printf_float+0x3fa>
 8010ed4:	e65e      	b.n	8010b94 <_printf_float+0x9c>
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	464a      	mov	r2, r9
 8010eda:	4631      	mov	r1, r6
 8010edc:	4628      	mov	r0, r5
 8010ede:	47b8      	blx	r7
 8010ee0:	3001      	adds	r0, #1
 8010ee2:	f43f ae57 	beq.w	8010b94 <_printf_float+0x9c>
 8010ee6:	f108 0801 	add.w	r8, r8, #1
 8010eea:	9b08      	ldr	r3, [sp, #32]
 8010eec:	3b01      	subs	r3, #1
 8010eee:	4543      	cmp	r3, r8
 8010ef0:	dcf1      	bgt.n	8010ed6 <_printf_float+0x3de>
 8010ef2:	9b04      	ldr	r3, [sp, #16]
 8010ef4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010ef8:	e6db      	b.n	8010cb2 <_printf_float+0x1ba>
 8010efa:	f04f 0800 	mov.w	r8, #0
 8010efe:	f104 091a 	add.w	r9, r4, #26
 8010f02:	e7f2      	b.n	8010eea <_printf_float+0x3f2>
 8010f04:	2301      	movs	r3, #1
 8010f06:	4642      	mov	r2, r8
 8010f08:	e7df      	b.n	8010eca <_printf_float+0x3d2>
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	464a      	mov	r2, r9
 8010f0e:	4631      	mov	r1, r6
 8010f10:	4628      	mov	r0, r5
 8010f12:	47b8      	blx	r7
 8010f14:	3001      	adds	r0, #1
 8010f16:	f43f ae3d 	beq.w	8010b94 <_printf_float+0x9c>
 8010f1a:	f108 0801 	add.w	r8, r8, #1
 8010f1e:	68e3      	ldr	r3, [r4, #12]
 8010f20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f22:	1a5b      	subs	r3, r3, r1
 8010f24:	4543      	cmp	r3, r8
 8010f26:	dcf0      	bgt.n	8010f0a <_printf_float+0x412>
 8010f28:	e6f7      	b.n	8010d1a <_printf_float+0x222>
 8010f2a:	f04f 0800 	mov.w	r8, #0
 8010f2e:	f104 0919 	add.w	r9, r4, #25
 8010f32:	e7f4      	b.n	8010f1e <_printf_float+0x426>

08010f34 <_printf_common>:
 8010f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f38:	4616      	mov	r6, r2
 8010f3a:	4699      	mov	r9, r3
 8010f3c:	688a      	ldr	r2, [r1, #8]
 8010f3e:	690b      	ldr	r3, [r1, #16]
 8010f40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010f44:	4293      	cmp	r3, r2
 8010f46:	bfb8      	it	lt
 8010f48:	4613      	movlt	r3, r2
 8010f4a:	6033      	str	r3, [r6, #0]
 8010f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010f50:	4607      	mov	r7, r0
 8010f52:	460c      	mov	r4, r1
 8010f54:	b10a      	cbz	r2, 8010f5a <_printf_common+0x26>
 8010f56:	3301      	adds	r3, #1
 8010f58:	6033      	str	r3, [r6, #0]
 8010f5a:	6823      	ldr	r3, [r4, #0]
 8010f5c:	0699      	lsls	r1, r3, #26
 8010f5e:	bf42      	ittt	mi
 8010f60:	6833      	ldrmi	r3, [r6, #0]
 8010f62:	3302      	addmi	r3, #2
 8010f64:	6033      	strmi	r3, [r6, #0]
 8010f66:	6825      	ldr	r5, [r4, #0]
 8010f68:	f015 0506 	ands.w	r5, r5, #6
 8010f6c:	d106      	bne.n	8010f7c <_printf_common+0x48>
 8010f6e:	f104 0a19 	add.w	sl, r4, #25
 8010f72:	68e3      	ldr	r3, [r4, #12]
 8010f74:	6832      	ldr	r2, [r6, #0]
 8010f76:	1a9b      	subs	r3, r3, r2
 8010f78:	42ab      	cmp	r3, r5
 8010f7a:	dc26      	bgt.n	8010fca <_printf_common+0x96>
 8010f7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010f80:	1e13      	subs	r3, r2, #0
 8010f82:	6822      	ldr	r2, [r4, #0]
 8010f84:	bf18      	it	ne
 8010f86:	2301      	movne	r3, #1
 8010f88:	0692      	lsls	r2, r2, #26
 8010f8a:	d42b      	bmi.n	8010fe4 <_printf_common+0xb0>
 8010f8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010f90:	4649      	mov	r1, r9
 8010f92:	4638      	mov	r0, r7
 8010f94:	47c0      	blx	r8
 8010f96:	3001      	adds	r0, #1
 8010f98:	d01e      	beq.n	8010fd8 <_printf_common+0xa4>
 8010f9a:	6823      	ldr	r3, [r4, #0]
 8010f9c:	68e5      	ldr	r5, [r4, #12]
 8010f9e:	6832      	ldr	r2, [r6, #0]
 8010fa0:	f003 0306 	and.w	r3, r3, #6
 8010fa4:	2b04      	cmp	r3, #4
 8010fa6:	bf08      	it	eq
 8010fa8:	1aad      	subeq	r5, r5, r2
 8010faa:	68a3      	ldr	r3, [r4, #8]
 8010fac:	6922      	ldr	r2, [r4, #16]
 8010fae:	bf0c      	ite	eq
 8010fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010fb4:	2500      	movne	r5, #0
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	bfc4      	itt	gt
 8010fba:	1a9b      	subgt	r3, r3, r2
 8010fbc:	18ed      	addgt	r5, r5, r3
 8010fbe:	2600      	movs	r6, #0
 8010fc0:	341a      	adds	r4, #26
 8010fc2:	42b5      	cmp	r5, r6
 8010fc4:	d11a      	bne.n	8010ffc <_printf_common+0xc8>
 8010fc6:	2000      	movs	r0, #0
 8010fc8:	e008      	b.n	8010fdc <_printf_common+0xa8>
 8010fca:	2301      	movs	r3, #1
 8010fcc:	4652      	mov	r2, sl
 8010fce:	4649      	mov	r1, r9
 8010fd0:	4638      	mov	r0, r7
 8010fd2:	47c0      	blx	r8
 8010fd4:	3001      	adds	r0, #1
 8010fd6:	d103      	bne.n	8010fe0 <_printf_common+0xac>
 8010fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fe0:	3501      	adds	r5, #1
 8010fe2:	e7c6      	b.n	8010f72 <_printf_common+0x3e>
 8010fe4:	18e1      	adds	r1, r4, r3
 8010fe6:	1c5a      	adds	r2, r3, #1
 8010fe8:	2030      	movs	r0, #48	; 0x30
 8010fea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010fee:	4422      	add	r2, r4
 8010ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010ff4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ff8:	3302      	adds	r3, #2
 8010ffa:	e7c7      	b.n	8010f8c <_printf_common+0x58>
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	4622      	mov	r2, r4
 8011000:	4649      	mov	r1, r9
 8011002:	4638      	mov	r0, r7
 8011004:	47c0      	blx	r8
 8011006:	3001      	adds	r0, #1
 8011008:	d0e6      	beq.n	8010fd8 <_printf_common+0xa4>
 801100a:	3601      	adds	r6, #1
 801100c:	e7d9      	b.n	8010fc2 <_printf_common+0x8e>
	...

08011010 <_printf_i>:
 8011010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011014:	7e0f      	ldrb	r7, [r1, #24]
 8011016:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011018:	2f78      	cmp	r7, #120	; 0x78
 801101a:	4691      	mov	r9, r2
 801101c:	4680      	mov	r8, r0
 801101e:	460c      	mov	r4, r1
 8011020:	469a      	mov	sl, r3
 8011022:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011026:	d807      	bhi.n	8011038 <_printf_i+0x28>
 8011028:	2f62      	cmp	r7, #98	; 0x62
 801102a:	d80a      	bhi.n	8011042 <_printf_i+0x32>
 801102c:	2f00      	cmp	r7, #0
 801102e:	f000 80d8 	beq.w	80111e2 <_printf_i+0x1d2>
 8011032:	2f58      	cmp	r7, #88	; 0x58
 8011034:	f000 80a3 	beq.w	801117e <_printf_i+0x16e>
 8011038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801103c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011040:	e03a      	b.n	80110b8 <_printf_i+0xa8>
 8011042:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011046:	2b15      	cmp	r3, #21
 8011048:	d8f6      	bhi.n	8011038 <_printf_i+0x28>
 801104a:	a101      	add	r1, pc, #4	; (adr r1, 8011050 <_printf_i+0x40>)
 801104c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011050:	080110a9 	.word	0x080110a9
 8011054:	080110bd 	.word	0x080110bd
 8011058:	08011039 	.word	0x08011039
 801105c:	08011039 	.word	0x08011039
 8011060:	08011039 	.word	0x08011039
 8011064:	08011039 	.word	0x08011039
 8011068:	080110bd 	.word	0x080110bd
 801106c:	08011039 	.word	0x08011039
 8011070:	08011039 	.word	0x08011039
 8011074:	08011039 	.word	0x08011039
 8011078:	08011039 	.word	0x08011039
 801107c:	080111c9 	.word	0x080111c9
 8011080:	080110ed 	.word	0x080110ed
 8011084:	080111ab 	.word	0x080111ab
 8011088:	08011039 	.word	0x08011039
 801108c:	08011039 	.word	0x08011039
 8011090:	080111eb 	.word	0x080111eb
 8011094:	08011039 	.word	0x08011039
 8011098:	080110ed 	.word	0x080110ed
 801109c:	08011039 	.word	0x08011039
 80110a0:	08011039 	.word	0x08011039
 80110a4:	080111b3 	.word	0x080111b3
 80110a8:	682b      	ldr	r3, [r5, #0]
 80110aa:	1d1a      	adds	r2, r3, #4
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	602a      	str	r2, [r5, #0]
 80110b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80110b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80110b8:	2301      	movs	r3, #1
 80110ba:	e0a3      	b.n	8011204 <_printf_i+0x1f4>
 80110bc:	6820      	ldr	r0, [r4, #0]
 80110be:	6829      	ldr	r1, [r5, #0]
 80110c0:	0606      	lsls	r6, r0, #24
 80110c2:	f101 0304 	add.w	r3, r1, #4
 80110c6:	d50a      	bpl.n	80110de <_printf_i+0xce>
 80110c8:	680e      	ldr	r6, [r1, #0]
 80110ca:	602b      	str	r3, [r5, #0]
 80110cc:	2e00      	cmp	r6, #0
 80110ce:	da03      	bge.n	80110d8 <_printf_i+0xc8>
 80110d0:	232d      	movs	r3, #45	; 0x2d
 80110d2:	4276      	negs	r6, r6
 80110d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80110d8:	485e      	ldr	r0, [pc, #376]	; (8011254 <_printf_i+0x244>)
 80110da:	230a      	movs	r3, #10
 80110dc:	e019      	b.n	8011112 <_printf_i+0x102>
 80110de:	680e      	ldr	r6, [r1, #0]
 80110e0:	602b      	str	r3, [r5, #0]
 80110e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80110e6:	bf18      	it	ne
 80110e8:	b236      	sxthne	r6, r6
 80110ea:	e7ef      	b.n	80110cc <_printf_i+0xbc>
 80110ec:	682b      	ldr	r3, [r5, #0]
 80110ee:	6820      	ldr	r0, [r4, #0]
 80110f0:	1d19      	adds	r1, r3, #4
 80110f2:	6029      	str	r1, [r5, #0]
 80110f4:	0601      	lsls	r1, r0, #24
 80110f6:	d501      	bpl.n	80110fc <_printf_i+0xec>
 80110f8:	681e      	ldr	r6, [r3, #0]
 80110fa:	e002      	b.n	8011102 <_printf_i+0xf2>
 80110fc:	0646      	lsls	r6, r0, #25
 80110fe:	d5fb      	bpl.n	80110f8 <_printf_i+0xe8>
 8011100:	881e      	ldrh	r6, [r3, #0]
 8011102:	4854      	ldr	r0, [pc, #336]	; (8011254 <_printf_i+0x244>)
 8011104:	2f6f      	cmp	r7, #111	; 0x6f
 8011106:	bf0c      	ite	eq
 8011108:	2308      	moveq	r3, #8
 801110a:	230a      	movne	r3, #10
 801110c:	2100      	movs	r1, #0
 801110e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011112:	6865      	ldr	r5, [r4, #4]
 8011114:	60a5      	str	r5, [r4, #8]
 8011116:	2d00      	cmp	r5, #0
 8011118:	bfa2      	ittt	ge
 801111a:	6821      	ldrge	r1, [r4, #0]
 801111c:	f021 0104 	bicge.w	r1, r1, #4
 8011120:	6021      	strge	r1, [r4, #0]
 8011122:	b90e      	cbnz	r6, 8011128 <_printf_i+0x118>
 8011124:	2d00      	cmp	r5, #0
 8011126:	d04d      	beq.n	80111c4 <_printf_i+0x1b4>
 8011128:	4615      	mov	r5, r2
 801112a:	fbb6 f1f3 	udiv	r1, r6, r3
 801112e:	fb03 6711 	mls	r7, r3, r1, r6
 8011132:	5dc7      	ldrb	r7, [r0, r7]
 8011134:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011138:	4637      	mov	r7, r6
 801113a:	42bb      	cmp	r3, r7
 801113c:	460e      	mov	r6, r1
 801113e:	d9f4      	bls.n	801112a <_printf_i+0x11a>
 8011140:	2b08      	cmp	r3, #8
 8011142:	d10b      	bne.n	801115c <_printf_i+0x14c>
 8011144:	6823      	ldr	r3, [r4, #0]
 8011146:	07de      	lsls	r6, r3, #31
 8011148:	d508      	bpl.n	801115c <_printf_i+0x14c>
 801114a:	6923      	ldr	r3, [r4, #16]
 801114c:	6861      	ldr	r1, [r4, #4]
 801114e:	4299      	cmp	r1, r3
 8011150:	bfde      	ittt	le
 8011152:	2330      	movle	r3, #48	; 0x30
 8011154:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011158:	f105 35ff 	addle.w	r5, r5, #4294967295
 801115c:	1b52      	subs	r2, r2, r5
 801115e:	6122      	str	r2, [r4, #16]
 8011160:	f8cd a000 	str.w	sl, [sp]
 8011164:	464b      	mov	r3, r9
 8011166:	aa03      	add	r2, sp, #12
 8011168:	4621      	mov	r1, r4
 801116a:	4640      	mov	r0, r8
 801116c:	f7ff fee2 	bl	8010f34 <_printf_common>
 8011170:	3001      	adds	r0, #1
 8011172:	d14c      	bne.n	801120e <_printf_i+0x1fe>
 8011174:	f04f 30ff 	mov.w	r0, #4294967295
 8011178:	b004      	add	sp, #16
 801117a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801117e:	4835      	ldr	r0, [pc, #212]	; (8011254 <_printf_i+0x244>)
 8011180:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011184:	6829      	ldr	r1, [r5, #0]
 8011186:	6823      	ldr	r3, [r4, #0]
 8011188:	f851 6b04 	ldr.w	r6, [r1], #4
 801118c:	6029      	str	r1, [r5, #0]
 801118e:	061d      	lsls	r5, r3, #24
 8011190:	d514      	bpl.n	80111bc <_printf_i+0x1ac>
 8011192:	07df      	lsls	r7, r3, #31
 8011194:	bf44      	itt	mi
 8011196:	f043 0320 	orrmi.w	r3, r3, #32
 801119a:	6023      	strmi	r3, [r4, #0]
 801119c:	b91e      	cbnz	r6, 80111a6 <_printf_i+0x196>
 801119e:	6823      	ldr	r3, [r4, #0]
 80111a0:	f023 0320 	bic.w	r3, r3, #32
 80111a4:	6023      	str	r3, [r4, #0]
 80111a6:	2310      	movs	r3, #16
 80111a8:	e7b0      	b.n	801110c <_printf_i+0xfc>
 80111aa:	6823      	ldr	r3, [r4, #0]
 80111ac:	f043 0320 	orr.w	r3, r3, #32
 80111b0:	6023      	str	r3, [r4, #0]
 80111b2:	2378      	movs	r3, #120	; 0x78
 80111b4:	4828      	ldr	r0, [pc, #160]	; (8011258 <_printf_i+0x248>)
 80111b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80111ba:	e7e3      	b.n	8011184 <_printf_i+0x174>
 80111bc:	0659      	lsls	r1, r3, #25
 80111be:	bf48      	it	mi
 80111c0:	b2b6      	uxthmi	r6, r6
 80111c2:	e7e6      	b.n	8011192 <_printf_i+0x182>
 80111c4:	4615      	mov	r5, r2
 80111c6:	e7bb      	b.n	8011140 <_printf_i+0x130>
 80111c8:	682b      	ldr	r3, [r5, #0]
 80111ca:	6826      	ldr	r6, [r4, #0]
 80111cc:	6961      	ldr	r1, [r4, #20]
 80111ce:	1d18      	adds	r0, r3, #4
 80111d0:	6028      	str	r0, [r5, #0]
 80111d2:	0635      	lsls	r5, r6, #24
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	d501      	bpl.n	80111dc <_printf_i+0x1cc>
 80111d8:	6019      	str	r1, [r3, #0]
 80111da:	e002      	b.n	80111e2 <_printf_i+0x1d2>
 80111dc:	0670      	lsls	r0, r6, #25
 80111de:	d5fb      	bpl.n	80111d8 <_printf_i+0x1c8>
 80111e0:	8019      	strh	r1, [r3, #0]
 80111e2:	2300      	movs	r3, #0
 80111e4:	6123      	str	r3, [r4, #16]
 80111e6:	4615      	mov	r5, r2
 80111e8:	e7ba      	b.n	8011160 <_printf_i+0x150>
 80111ea:	682b      	ldr	r3, [r5, #0]
 80111ec:	1d1a      	adds	r2, r3, #4
 80111ee:	602a      	str	r2, [r5, #0]
 80111f0:	681d      	ldr	r5, [r3, #0]
 80111f2:	6862      	ldr	r2, [r4, #4]
 80111f4:	2100      	movs	r1, #0
 80111f6:	4628      	mov	r0, r5
 80111f8:	f7ef f87a 	bl	80002f0 <memchr>
 80111fc:	b108      	cbz	r0, 8011202 <_printf_i+0x1f2>
 80111fe:	1b40      	subs	r0, r0, r5
 8011200:	6060      	str	r0, [r4, #4]
 8011202:	6863      	ldr	r3, [r4, #4]
 8011204:	6123      	str	r3, [r4, #16]
 8011206:	2300      	movs	r3, #0
 8011208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801120c:	e7a8      	b.n	8011160 <_printf_i+0x150>
 801120e:	6923      	ldr	r3, [r4, #16]
 8011210:	462a      	mov	r2, r5
 8011212:	4649      	mov	r1, r9
 8011214:	4640      	mov	r0, r8
 8011216:	47d0      	blx	sl
 8011218:	3001      	adds	r0, #1
 801121a:	d0ab      	beq.n	8011174 <_printf_i+0x164>
 801121c:	6823      	ldr	r3, [r4, #0]
 801121e:	079b      	lsls	r3, r3, #30
 8011220:	d413      	bmi.n	801124a <_printf_i+0x23a>
 8011222:	68e0      	ldr	r0, [r4, #12]
 8011224:	9b03      	ldr	r3, [sp, #12]
 8011226:	4298      	cmp	r0, r3
 8011228:	bfb8      	it	lt
 801122a:	4618      	movlt	r0, r3
 801122c:	e7a4      	b.n	8011178 <_printf_i+0x168>
 801122e:	2301      	movs	r3, #1
 8011230:	4632      	mov	r2, r6
 8011232:	4649      	mov	r1, r9
 8011234:	4640      	mov	r0, r8
 8011236:	47d0      	blx	sl
 8011238:	3001      	adds	r0, #1
 801123a:	d09b      	beq.n	8011174 <_printf_i+0x164>
 801123c:	3501      	adds	r5, #1
 801123e:	68e3      	ldr	r3, [r4, #12]
 8011240:	9903      	ldr	r1, [sp, #12]
 8011242:	1a5b      	subs	r3, r3, r1
 8011244:	42ab      	cmp	r3, r5
 8011246:	dcf2      	bgt.n	801122e <_printf_i+0x21e>
 8011248:	e7eb      	b.n	8011222 <_printf_i+0x212>
 801124a:	2500      	movs	r5, #0
 801124c:	f104 0619 	add.w	r6, r4, #25
 8011250:	e7f5      	b.n	801123e <_printf_i+0x22e>
 8011252:	bf00      	nop
 8011254:	0801df3e 	.word	0x0801df3e
 8011258:	0801df4f 	.word	0x0801df4f

0801125c <srand>:
 801125c:	b538      	push	{r3, r4, r5, lr}
 801125e:	4b10      	ldr	r3, [pc, #64]	; (80112a0 <srand+0x44>)
 8011260:	681d      	ldr	r5, [r3, #0]
 8011262:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011264:	4604      	mov	r4, r0
 8011266:	b9b3      	cbnz	r3, 8011296 <srand+0x3a>
 8011268:	2018      	movs	r0, #24
 801126a:	f000 ffb5 	bl	80121d8 <malloc>
 801126e:	4602      	mov	r2, r0
 8011270:	63a8      	str	r0, [r5, #56]	; 0x38
 8011272:	b920      	cbnz	r0, 801127e <srand+0x22>
 8011274:	4b0b      	ldr	r3, [pc, #44]	; (80112a4 <srand+0x48>)
 8011276:	480c      	ldr	r0, [pc, #48]	; (80112a8 <srand+0x4c>)
 8011278:	2142      	movs	r1, #66	; 0x42
 801127a:	f000 f97d 	bl	8011578 <__assert_func>
 801127e:	490b      	ldr	r1, [pc, #44]	; (80112ac <srand+0x50>)
 8011280:	4b0b      	ldr	r3, [pc, #44]	; (80112b0 <srand+0x54>)
 8011282:	e9c0 1300 	strd	r1, r3, [r0]
 8011286:	4b0b      	ldr	r3, [pc, #44]	; (80112b4 <srand+0x58>)
 8011288:	6083      	str	r3, [r0, #8]
 801128a:	230b      	movs	r3, #11
 801128c:	8183      	strh	r3, [r0, #12]
 801128e:	2100      	movs	r1, #0
 8011290:	2001      	movs	r0, #1
 8011292:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011296:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011298:	2200      	movs	r2, #0
 801129a:	611c      	str	r4, [r3, #16]
 801129c:	615a      	str	r2, [r3, #20]
 801129e:	bd38      	pop	{r3, r4, r5, pc}
 80112a0:	24000558 	.word	0x24000558
 80112a4:	0801df60 	.word	0x0801df60
 80112a8:	0801df77 	.word	0x0801df77
 80112ac:	abcd330e 	.word	0xabcd330e
 80112b0:	e66d1234 	.word	0xe66d1234
 80112b4:	0005deec 	.word	0x0005deec

080112b8 <rand>:
 80112b8:	4b16      	ldr	r3, [pc, #88]	; (8011314 <rand+0x5c>)
 80112ba:	b510      	push	{r4, lr}
 80112bc:	681c      	ldr	r4, [r3, #0]
 80112be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80112c0:	b9b3      	cbnz	r3, 80112f0 <rand+0x38>
 80112c2:	2018      	movs	r0, #24
 80112c4:	f000 ff88 	bl	80121d8 <malloc>
 80112c8:	63a0      	str	r0, [r4, #56]	; 0x38
 80112ca:	b928      	cbnz	r0, 80112d8 <rand+0x20>
 80112cc:	4602      	mov	r2, r0
 80112ce:	4b12      	ldr	r3, [pc, #72]	; (8011318 <rand+0x60>)
 80112d0:	4812      	ldr	r0, [pc, #72]	; (801131c <rand+0x64>)
 80112d2:	214e      	movs	r1, #78	; 0x4e
 80112d4:	f000 f950 	bl	8011578 <__assert_func>
 80112d8:	4a11      	ldr	r2, [pc, #68]	; (8011320 <rand+0x68>)
 80112da:	4b12      	ldr	r3, [pc, #72]	; (8011324 <rand+0x6c>)
 80112dc:	e9c0 2300 	strd	r2, r3, [r0]
 80112e0:	4b11      	ldr	r3, [pc, #68]	; (8011328 <rand+0x70>)
 80112e2:	6083      	str	r3, [r0, #8]
 80112e4:	230b      	movs	r3, #11
 80112e6:	8183      	strh	r3, [r0, #12]
 80112e8:	2201      	movs	r2, #1
 80112ea:	2300      	movs	r3, #0
 80112ec:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80112f0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80112f2:	4a0e      	ldr	r2, [pc, #56]	; (801132c <rand+0x74>)
 80112f4:	6920      	ldr	r0, [r4, #16]
 80112f6:	6963      	ldr	r3, [r4, #20]
 80112f8:	490d      	ldr	r1, [pc, #52]	; (8011330 <rand+0x78>)
 80112fa:	4342      	muls	r2, r0
 80112fc:	fb01 2203 	mla	r2, r1, r3, r2
 8011300:	fba0 0101 	umull	r0, r1, r0, r1
 8011304:	1c43      	adds	r3, r0, #1
 8011306:	eb42 0001 	adc.w	r0, r2, r1
 801130a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801130e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011312:	bd10      	pop	{r4, pc}
 8011314:	24000558 	.word	0x24000558
 8011318:	0801df60 	.word	0x0801df60
 801131c:	0801df77 	.word	0x0801df77
 8011320:	abcd330e 	.word	0xabcd330e
 8011324:	e66d1234 	.word	0xe66d1234
 8011328:	0005deec 	.word	0x0005deec
 801132c:	5851f42d 	.word	0x5851f42d
 8011330:	4c957f2d 	.word	0x4c957f2d

08011334 <siprintf>:
 8011334:	b40e      	push	{r1, r2, r3}
 8011336:	b500      	push	{lr}
 8011338:	b09c      	sub	sp, #112	; 0x70
 801133a:	ab1d      	add	r3, sp, #116	; 0x74
 801133c:	9002      	str	r0, [sp, #8]
 801133e:	9006      	str	r0, [sp, #24]
 8011340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011344:	4809      	ldr	r0, [pc, #36]	; (801136c <siprintf+0x38>)
 8011346:	9107      	str	r1, [sp, #28]
 8011348:	9104      	str	r1, [sp, #16]
 801134a:	4909      	ldr	r1, [pc, #36]	; (8011370 <siprintf+0x3c>)
 801134c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011350:	9105      	str	r1, [sp, #20]
 8011352:	6800      	ldr	r0, [r0, #0]
 8011354:	9301      	str	r3, [sp, #4]
 8011356:	a902      	add	r1, sp, #8
 8011358:	f001 fc1c 	bl	8012b94 <_svfiprintf_r>
 801135c:	9b02      	ldr	r3, [sp, #8]
 801135e:	2200      	movs	r2, #0
 8011360:	701a      	strb	r2, [r3, #0]
 8011362:	b01c      	add	sp, #112	; 0x70
 8011364:	f85d eb04 	ldr.w	lr, [sp], #4
 8011368:	b003      	add	sp, #12
 801136a:	4770      	bx	lr
 801136c:	24000558 	.word	0x24000558
 8011370:	ffff0208 	.word	0xffff0208

08011374 <strcpy>:
 8011374:	4603      	mov	r3, r0
 8011376:	f811 2b01 	ldrb.w	r2, [r1], #1
 801137a:	f803 2b01 	strb.w	r2, [r3], #1
 801137e:	2a00      	cmp	r2, #0
 8011380:	d1f9      	bne.n	8011376 <strcpy+0x2>
 8011382:	4770      	bx	lr

08011384 <strcspn>:
 8011384:	b570      	push	{r4, r5, r6, lr}
 8011386:	4603      	mov	r3, r0
 8011388:	461e      	mov	r6, r3
 801138a:	f813 4b01 	ldrb.w	r4, [r3], #1
 801138e:	b144      	cbz	r4, 80113a2 <strcspn+0x1e>
 8011390:	1e4a      	subs	r2, r1, #1
 8011392:	e001      	b.n	8011398 <strcspn+0x14>
 8011394:	42a5      	cmp	r5, r4
 8011396:	d004      	beq.n	80113a2 <strcspn+0x1e>
 8011398:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801139c:	2d00      	cmp	r5, #0
 801139e:	d1f9      	bne.n	8011394 <strcspn+0x10>
 80113a0:	e7f2      	b.n	8011388 <strcspn+0x4>
 80113a2:	1a30      	subs	r0, r6, r0
 80113a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080113a8 <strtok>:
 80113a8:	4b16      	ldr	r3, [pc, #88]	; (8011404 <strtok+0x5c>)
 80113aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113ac:	681e      	ldr	r6, [r3, #0]
 80113ae:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80113b0:	4605      	mov	r5, r0
 80113b2:	b9fc      	cbnz	r4, 80113f4 <strtok+0x4c>
 80113b4:	2050      	movs	r0, #80	; 0x50
 80113b6:	9101      	str	r1, [sp, #4]
 80113b8:	f000 ff0e 	bl	80121d8 <malloc>
 80113bc:	9901      	ldr	r1, [sp, #4]
 80113be:	65b0      	str	r0, [r6, #88]	; 0x58
 80113c0:	4602      	mov	r2, r0
 80113c2:	b920      	cbnz	r0, 80113ce <strtok+0x26>
 80113c4:	4b10      	ldr	r3, [pc, #64]	; (8011408 <strtok+0x60>)
 80113c6:	4811      	ldr	r0, [pc, #68]	; (801140c <strtok+0x64>)
 80113c8:	2157      	movs	r1, #87	; 0x57
 80113ca:	f000 f8d5 	bl	8011578 <__assert_func>
 80113ce:	e9c0 4400 	strd	r4, r4, [r0]
 80113d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80113d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80113da:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80113de:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80113e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80113e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80113ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80113ee:	6184      	str	r4, [r0, #24]
 80113f0:	7704      	strb	r4, [r0, #28]
 80113f2:	6244      	str	r4, [r0, #36]	; 0x24
 80113f4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80113f6:	2301      	movs	r3, #1
 80113f8:	4628      	mov	r0, r5
 80113fa:	b002      	add	sp, #8
 80113fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011400:	f000 b806 	b.w	8011410 <__strtok_r>
 8011404:	24000558 	.word	0x24000558
 8011408:	0801df60 	.word	0x0801df60
 801140c:	0801dfd2 	.word	0x0801dfd2

08011410 <__strtok_r>:
 8011410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011412:	b908      	cbnz	r0, 8011418 <__strtok_r+0x8>
 8011414:	6810      	ldr	r0, [r2, #0]
 8011416:	b188      	cbz	r0, 801143c <__strtok_r+0x2c>
 8011418:	4604      	mov	r4, r0
 801141a:	4620      	mov	r0, r4
 801141c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011420:	460f      	mov	r7, r1
 8011422:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011426:	b91e      	cbnz	r6, 8011430 <__strtok_r+0x20>
 8011428:	b965      	cbnz	r5, 8011444 <__strtok_r+0x34>
 801142a:	6015      	str	r5, [r2, #0]
 801142c:	4628      	mov	r0, r5
 801142e:	e005      	b.n	801143c <__strtok_r+0x2c>
 8011430:	42b5      	cmp	r5, r6
 8011432:	d1f6      	bne.n	8011422 <__strtok_r+0x12>
 8011434:	2b00      	cmp	r3, #0
 8011436:	d1f0      	bne.n	801141a <__strtok_r+0xa>
 8011438:	6014      	str	r4, [r2, #0]
 801143a:	7003      	strb	r3, [r0, #0]
 801143c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801143e:	461c      	mov	r4, r3
 8011440:	e00c      	b.n	801145c <__strtok_r+0x4c>
 8011442:	b915      	cbnz	r5, 801144a <__strtok_r+0x3a>
 8011444:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011448:	460e      	mov	r6, r1
 801144a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801144e:	42ab      	cmp	r3, r5
 8011450:	d1f7      	bne.n	8011442 <__strtok_r+0x32>
 8011452:	2b00      	cmp	r3, #0
 8011454:	d0f3      	beq.n	801143e <__strtok_r+0x2e>
 8011456:	2300      	movs	r3, #0
 8011458:	f804 3c01 	strb.w	r3, [r4, #-1]
 801145c:	6014      	str	r4, [r2, #0]
 801145e:	e7ed      	b.n	801143c <__strtok_r+0x2c>

08011460 <_strtol_l.constprop.0>:
 8011460:	2b01      	cmp	r3, #1
 8011462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011466:	d001      	beq.n	801146c <_strtol_l.constprop.0+0xc>
 8011468:	2b24      	cmp	r3, #36	; 0x24
 801146a:	d906      	bls.n	801147a <_strtol_l.constprop.0+0x1a>
 801146c:	f7ff fa74 	bl	8010958 <__errno>
 8011470:	2316      	movs	r3, #22
 8011472:	6003      	str	r3, [r0, #0]
 8011474:	2000      	movs	r0, #0
 8011476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801147a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011560 <_strtol_l.constprop.0+0x100>
 801147e:	460d      	mov	r5, r1
 8011480:	462e      	mov	r6, r5
 8011482:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011486:	f814 700c 	ldrb.w	r7, [r4, ip]
 801148a:	f017 0708 	ands.w	r7, r7, #8
 801148e:	d1f7      	bne.n	8011480 <_strtol_l.constprop.0+0x20>
 8011490:	2c2d      	cmp	r4, #45	; 0x2d
 8011492:	d132      	bne.n	80114fa <_strtol_l.constprop.0+0x9a>
 8011494:	782c      	ldrb	r4, [r5, #0]
 8011496:	2701      	movs	r7, #1
 8011498:	1cb5      	adds	r5, r6, #2
 801149a:	2b00      	cmp	r3, #0
 801149c:	d05b      	beq.n	8011556 <_strtol_l.constprop.0+0xf6>
 801149e:	2b10      	cmp	r3, #16
 80114a0:	d109      	bne.n	80114b6 <_strtol_l.constprop.0+0x56>
 80114a2:	2c30      	cmp	r4, #48	; 0x30
 80114a4:	d107      	bne.n	80114b6 <_strtol_l.constprop.0+0x56>
 80114a6:	782c      	ldrb	r4, [r5, #0]
 80114a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80114ac:	2c58      	cmp	r4, #88	; 0x58
 80114ae:	d14d      	bne.n	801154c <_strtol_l.constprop.0+0xec>
 80114b0:	786c      	ldrb	r4, [r5, #1]
 80114b2:	2310      	movs	r3, #16
 80114b4:	3502      	adds	r5, #2
 80114b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80114ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80114be:	f04f 0c00 	mov.w	ip, #0
 80114c2:	fbb8 f9f3 	udiv	r9, r8, r3
 80114c6:	4666      	mov	r6, ip
 80114c8:	fb03 8a19 	mls	sl, r3, r9, r8
 80114cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80114d0:	f1be 0f09 	cmp.w	lr, #9
 80114d4:	d816      	bhi.n	8011504 <_strtol_l.constprop.0+0xa4>
 80114d6:	4674      	mov	r4, lr
 80114d8:	42a3      	cmp	r3, r4
 80114da:	dd24      	ble.n	8011526 <_strtol_l.constprop.0+0xc6>
 80114dc:	f1bc 0f00 	cmp.w	ip, #0
 80114e0:	db1e      	blt.n	8011520 <_strtol_l.constprop.0+0xc0>
 80114e2:	45b1      	cmp	r9, r6
 80114e4:	d31c      	bcc.n	8011520 <_strtol_l.constprop.0+0xc0>
 80114e6:	d101      	bne.n	80114ec <_strtol_l.constprop.0+0x8c>
 80114e8:	45a2      	cmp	sl, r4
 80114ea:	db19      	blt.n	8011520 <_strtol_l.constprop.0+0xc0>
 80114ec:	fb06 4603 	mla	r6, r6, r3, r4
 80114f0:	f04f 0c01 	mov.w	ip, #1
 80114f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80114f8:	e7e8      	b.n	80114cc <_strtol_l.constprop.0+0x6c>
 80114fa:	2c2b      	cmp	r4, #43	; 0x2b
 80114fc:	bf04      	itt	eq
 80114fe:	782c      	ldrbeq	r4, [r5, #0]
 8011500:	1cb5      	addeq	r5, r6, #2
 8011502:	e7ca      	b.n	801149a <_strtol_l.constprop.0+0x3a>
 8011504:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011508:	f1be 0f19 	cmp.w	lr, #25
 801150c:	d801      	bhi.n	8011512 <_strtol_l.constprop.0+0xb2>
 801150e:	3c37      	subs	r4, #55	; 0x37
 8011510:	e7e2      	b.n	80114d8 <_strtol_l.constprop.0+0x78>
 8011512:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011516:	f1be 0f19 	cmp.w	lr, #25
 801151a:	d804      	bhi.n	8011526 <_strtol_l.constprop.0+0xc6>
 801151c:	3c57      	subs	r4, #87	; 0x57
 801151e:	e7db      	b.n	80114d8 <_strtol_l.constprop.0+0x78>
 8011520:	f04f 3cff 	mov.w	ip, #4294967295
 8011524:	e7e6      	b.n	80114f4 <_strtol_l.constprop.0+0x94>
 8011526:	f1bc 0f00 	cmp.w	ip, #0
 801152a:	da05      	bge.n	8011538 <_strtol_l.constprop.0+0xd8>
 801152c:	2322      	movs	r3, #34	; 0x22
 801152e:	6003      	str	r3, [r0, #0]
 8011530:	4646      	mov	r6, r8
 8011532:	b942      	cbnz	r2, 8011546 <_strtol_l.constprop.0+0xe6>
 8011534:	4630      	mov	r0, r6
 8011536:	e79e      	b.n	8011476 <_strtol_l.constprop.0+0x16>
 8011538:	b107      	cbz	r7, 801153c <_strtol_l.constprop.0+0xdc>
 801153a:	4276      	negs	r6, r6
 801153c:	2a00      	cmp	r2, #0
 801153e:	d0f9      	beq.n	8011534 <_strtol_l.constprop.0+0xd4>
 8011540:	f1bc 0f00 	cmp.w	ip, #0
 8011544:	d000      	beq.n	8011548 <_strtol_l.constprop.0+0xe8>
 8011546:	1e69      	subs	r1, r5, #1
 8011548:	6011      	str	r1, [r2, #0]
 801154a:	e7f3      	b.n	8011534 <_strtol_l.constprop.0+0xd4>
 801154c:	2430      	movs	r4, #48	; 0x30
 801154e:	2b00      	cmp	r3, #0
 8011550:	d1b1      	bne.n	80114b6 <_strtol_l.constprop.0+0x56>
 8011552:	2308      	movs	r3, #8
 8011554:	e7af      	b.n	80114b6 <_strtol_l.constprop.0+0x56>
 8011556:	2c30      	cmp	r4, #48	; 0x30
 8011558:	d0a5      	beq.n	80114a6 <_strtol_l.constprop.0+0x46>
 801155a:	230a      	movs	r3, #10
 801155c:	e7ab      	b.n	80114b6 <_strtol_l.constprop.0+0x56>
 801155e:	bf00      	nop
 8011560:	0801de25 	.word	0x0801de25

08011564 <strtol>:
 8011564:	4613      	mov	r3, r2
 8011566:	460a      	mov	r2, r1
 8011568:	4601      	mov	r1, r0
 801156a:	4802      	ldr	r0, [pc, #8]	; (8011574 <strtol+0x10>)
 801156c:	6800      	ldr	r0, [r0, #0]
 801156e:	f7ff bf77 	b.w	8011460 <_strtol_l.constprop.0>
 8011572:	bf00      	nop
 8011574:	24000558 	.word	0x24000558

08011578 <__assert_func>:
 8011578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801157a:	4614      	mov	r4, r2
 801157c:	461a      	mov	r2, r3
 801157e:	4b09      	ldr	r3, [pc, #36]	; (80115a4 <__assert_func+0x2c>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	4605      	mov	r5, r0
 8011584:	68d8      	ldr	r0, [r3, #12]
 8011586:	b14c      	cbz	r4, 801159c <__assert_func+0x24>
 8011588:	4b07      	ldr	r3, [pc, #28]	; (80115a8 <__assert_func+0x30>)
 801158a:	9100      	str	r1, [sp, #0]
 801158c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011590:	4906      	ldr	r1, [pc, #24]	; (80115ac <__assert_func+0x34>)
 8011592:	462b      	mov	r3, r5
 8011594:	f000 fe0a 	bl	80121ac <fiprintf>
 8011598:	f001 fe26 	bl	80131e8 <abort>
 801159c:	4b04      	ldr	r3, [pc, #16]	; (80115b0 <__assert_func+0x38>)
 801159e:	461c      	mov	r4, r3
 80115a0:	e7f3      	b.n	801158a <__assert_func+0x12>
 80115a2:	bf00      	nop
 80115a4:	24000558 	.word	0x24000558
 80115a8:	0801e02f 	.word	0x0801e02f
 80115ac:	0801e03c 	.word	0x0801e03c
 80115b0:	0801e06a 	.word	0x0801e06a

080115b4 <quorem>:
 80115b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115b8:	6903      	ldr	r3, [r0, #16]
 80115ba:	690c      	ldr	r4, [r1, #16]
 80115bc:	42a3      	cmp	r3, r4
 80115be:	4607      	mov	r7, r0
 80115c0:	f2c0 8081 	blt.w	80116c6 <quorem+0x112>
 80115c4:	3c01      	subs	r4, #1
 80115c6:	f101 0814 	add.w	r8, r1, #20
 80115ca:	f100 0514 	add.w	r5, r0, #20
 80115ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80115d2:	9301      	str	r3, [sp, #4]
 80115d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80115d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80115dc:	3301      	adds	r3, #1
 80115de:	429a      	cmp	r2, r3
 80115e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80115e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80115e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80115ec:	d331      	bcc.n	8011652 <quorem+0x9e>
 80115ee:	f04f 0e00 	mov.w	lr, #0
 80115f2:	4640      	mov	r0, r8
 80115f4:	46ac      	mov	ip, r5
 80115f6:	46f2      	mov	sl, lr
 80115f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80115fc:	b293      	uxth	r3, r2
 80115fe:	fb06 e303 	mla	r3, r6, r3, lr
 8011602:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011606:	b29b      	uxth	r3, r3
 8011608:	ebaa 0303 	sub.w	r3, sl, r3
 801160c:	f8dc a000 	ldr.w	sl, [ip]
 8011610:	0c12      	lsrs	r2, r2, #16
 8011612:	fa13 f38a 	uxtah	r3, r3, sl
 8011616:	fb06 e202 	mla	r2, r6, r2, lr
 801161a:	9300      	str	r3, [sp, #0]
 801161c:	9b00      	ldr	r3, [sp, #0]
 801161e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011622:	b292      	uxth	r2, r2
 8011624:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011628:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801162c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011630:	4581      	cmp	r9, r0
 8011632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011636:	f84c 3b04 	str.w	r3, [ip], #4
 801163a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801163e:	d2db      	bcs.n	80115f8 <quorem+0x44>
 8011640:	f855 300b 	ldr.w	r3, [r5, fp]
 8011644:	b92b      	cbnz	r3, 8011652 <quorem+0x9e>
 8011646:	9b01      	ldr	r3, [sp, #4]
 8011648:	3b04      	subs	r3, #4
 801164a:	429d      	cmp	r5, r3
 801164c:	461a      	mov	r2, r3
 801164e:	d32e      	bcc.n	80116ae <quorem+0xfa>
 8011650:	613c      	str	r4, [r7, #16]
 8011652:	4638      	mov	r0, r7
 8011654:	f001 f84a 	bl	80126ec <__mcmp>
 8011658:	2800      	cmp	r0, #0
 801165a:	db24      	blt.n	80116a6 <quorem+0xf2>
 801165c:	3601      	adds	r6, #1
 801165e:	4628      	mov	r0, r5
 8011660:	f04f 0c00 	mov.w	ip, #0
 8011664:	f858 2b04 	ldr.w	r2, [r8], #4
 8011668:	f8d0 e000 	ldr.w	lr, [r0]
 801166c:	b293      	uxth	r3, r2
 801166e:	ebac 0303 	sub.w	r3, ip, r3
 8011672:	0c12      	lsrs	r2, r2, #16
 8011674:	fa13 f38e 	uxtah	r3, r3, lr
 8011678:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801167c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011680:	b29b      	uxth	r3, r3
 8011682:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011686:	45c1      	cmp	r9, r8
 8011688:	f840 3b04 	str.w	r3, [r0], #4
 801168c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011690:	d2e8      	bcs.n	8011664 <quorem+0xb0>
 8011692:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011696:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801169a:	b922      	cbnz	r2, 80116a6 <quorem+0xf2>
 801169c:	3b04      	subs	r3, #4
 801169e:	429d      	cmp	r5, r3
 80116a0:	461a      	mov	r2, r3
 80116a2:	d30a      	bcc.n	80116ba <quorem+0x106>
 80116a4:	613c      	str	r4, [r7, #16]
 80116a6:	4630      	mov	r0, r6
 80116a8:	b003      	add	sp, #12
 80116aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ae:	6812      	ldr	r2, [r2, #0]
 80116b0:	3b04      	subs	r3, #4
 80116b2:	2a00      	cmp	r2, #0
 80116b4:	d1cc      	bne.n	8011650 <quorem+0x9c>
 80116b6:	3c01      	subs	r4, #1
 80116b8:	e7c7      	b.n	801164a <quorem+0x96>
 80116ba:	6812      	ldr	r2, [r2, #0]
 80116bc:	3b04      	subs	r3, #4
 80116be:	2a00      	cmp	r2, #0
 80116c0:	d1f0      	bne.n	80116a4 <quorem+0xf0>
 80116c2:	3c01      	subs	r4, #1
 80116c4:	e7eb      	b.n	801169e <quorem+0xea>
 80116c6:	2000      	movs	r0, #0
 80116c8:	e7ee      	b.n	80116a8 <quorem+0xf4>
 80116ca:	0000      	movs	r0, r0
 80116cc:	0000      	movs	r0, r0
	...

080116d0 <_dtoa_r>:
 80116d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116d4:	ed2d 8b02 	vpush	{d8}
 80116d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80116da:	b091      	sub	sp, #68	; 0x44
 80116dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80116e0:	ec59 8b10 	vmov	r8, r9, d0
 80116e4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80116e6:	9106      	str	r1, [sp, #24]
 80116e8:	4606      	mov	r6, r0
 80116ea:	9208      	str	r2, [sp, #32]
 80116ec:	930c      	str	r3, [sp, #48]	; 0x30
 80116ee:	b975      	cbnz	r5, 801170e <_dtoa_r+0x3e>
 80116f0:	2010      	movs	r0, #16
 80116f2:	f000 fd71 	bl	80121d8 <malloc>
 80116f6:	4602      	mov	r2, r0
 80116f8:	6270      	str	r0, [r6, #36]	; 0x24
 80116fa:	b920      	cbnz	r0, 8011706 <_dtoa_r+0x36>
 80116fc:	4baa      	ldr	r3, [pc, #680]	; (80119a8 <_dtoa_r+0x2d8>)
 80116fe:	21ea      	movs	r1, #234	; 0xea
 8011700:	48aa      	ldr	r0, [pc, #680]	; (80119ac <_dtoa_r+0x2dc>)
 8011702:	f7ff ff39 	bl	8011578 <__assert_func>
 8011706:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801170a:	6005      	str	r5, [r0, #0]
 801170c:	60c5      	str	r5, [r0, #12]
 801170e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011710:	6819      	ldr	r1, [r3, #0]
 8011712:	b151      	cbz	r1, 801172a <_dtoa_r+0x5a>
 8011714:	685a      	ldr	r2, [r3, #4]
 8011716:	604a      	str	r2, [r1, #4]
 8011718:	2301      	movs	r3, #1
 801171a:	4093      	lsls	r3, r2
 801171c:	608b      	str	r3, [r1, #8]
 801171e:	4630      	mov	r0, r6
 8011720:	f000 fda2 	bl	8012268 <_Bfree>
 8011724:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011726:	2200      	movs	r2, #0
 8011728:	601a      	str	r2, [r3, #0]
 801172a:	f1b9 0300 	subs.w	r3, r9, #0
 801172e:	bfbb      	ittet	lt
 8011730:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011734:	9303      	strlt	r3, [sp, #12]
 8011736:	2300      	movge	r3, #0
 8011738:	2201      	movlt	r2, #1
 801173a:	bfac      	ite	ge
 801173c:	6023      	strge	r3, [r4, #0]
 801173e:	6022      	strlt	r2, [r4, #0]
 8011740:	4b9b      	ldr	r3, [pc, #620]	; (80119b0 <_dtoa_r+0x2e0>)
 8011742:	9c03      	ldr	r4, [sp, #12]
 8011744:	43a3      	bics	r3, r4
 8011746:	d11c      	bne.n	8011782 <_dtoa_r+0xb2>
 8011748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801174a:	f242 730f 	movw	r3, #9999	; 0x270f
 801174e:	6013      	str	r3, [r2, #0]
 8011750:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011754:	ea53 0308 	orrs.w	r3, r3, r8
 8011758:	f000 84fd 	beq.w	8012156 <_dtoa_r+0xa86>
 801175c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801175e:	b963      	cbnz	r3, 801177a <_dtoa_r+0xaa>
 8011760:	4b94      	ldr	r3, [pc, #592]	; (80119b4 <_dtoa_r+0x2e4>)
 8011762:	e01f      	b.n	80117a4 <_dtoa_r+0xd4>
 8011764:	4b94      	ldr	r3, [pc, #592]	; (80119b8 <_dtoa_r+0x2e8>)
 8011766:	9301      	str	r3, [sp, #4]
 8011768:	3308      	adds	r3, #8
 801176a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801176c:	6013      	str	r3, [r2, #0]
 801176e:	9801      	ldr	r0, [sp, #4]
 8011770:	b011      	add	sp, #68	; 0x44
 8011772:	ecbd 8b02 	vpop	{d8}
 8011776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801177a:	4b8e      	ldr	r3, [pc, #568]	; (80119b4 <_dtoa_r+0x2e4>)
 801177c:	9301      	str	r3, [sp, #4]
 801177e:	3303      	adds	r3, #3
 8011780:	e7f3      	b.n	801176a <_dtoa_r+0x9a>
 8011782:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011786:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801178a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801178e:	d10b      	bne.n	80117a8 <_dtoa_r+0xd8>
 8011790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011792:	2301      	movs	r3, #1
 8011794:	6013      	str	r3, [r2, #0]
 8011796:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011798:	2b00      	cmp	r3, #0
 801179a:	f000 84d9 	beq.w	8012150 <_dtoa_r+0xa80>
 801179e:	4887      	ldr	r0, [pc, #540]	; (80119bc <_dtoa_r+0x2ec>)
 80117a0:	6018      	str	r0, [r3, #0]
 80117a2:	1e43      	subs	r3, r0, #1
 80117a4:	9301      	str	r3, [sp, #4]
 80117a6:	e7e2      	b.n	801176e <_dtoa_r+0x9e>
 80117a8:	a90f      	add	r1, sp, #60	; 0x3c
 80117aa:	aa0e      	add	r2, sp, #56	; 0x38
 80117ac:	4630      	mov	r0, r6
 80117ae:	eeb0 0b48 	vmov.f64	d0, d8
 80117b2:	f001 f841 	bl	8012838 <__d2b>
 80117b6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80117ba:	4605      	mov	r5, r0
 80117bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80117be:	2900      	cmp	r1, #0
 80117c0:	d046      	beq.n	8011850 <_dtoa_r+0x180>
 80117c2:	ee18 4a90 	vmov	r4, s17
 80117c6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80117ca:	ec53 2b18 	vmov	r2, r3, d8
 80117ce:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80117d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80117d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80117da:	2400      	movs	r4, #0
 80117dc:	ec43 2b16 	vmov	d6, r2, r3
 80117e0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80117e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011990 <_dtoa_r+0x2c0>
 80117e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80117ec:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8011998 <_dtoa_r+0x2c8>
 80117f0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80117f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80119a0 <_dtoa_r+0x2d0>
 80117f8:	ee07 1a90 	vmov	s15, r1
 80117fc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011800:	eeb0 7b46 	vmov.f64	d7, d6
 8011804:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011808:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801180c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011814:	ee16 ba90 	vmov	fp, s13
 8011818:	940a      	str	r4, [sp, #40]	; 0x28
 801181a:	d508      	bpl.n	801182e <_dtoa_r+0x15e>
 801181c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011820:	eeb4 6b47 	vcmp.f64	d6, d7
 8011824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011828:	bf18      	it	ne
 801182a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801182e:	f1bb 0f16 	cmp.w	fp, #22
 8011832:	d82f      	bhi.n	8011894 <_dtoa_r+0x1c4>
 8011834:	4b62      	ldr	r3, [pc, #392]	; (80119c0 <_dtoa_r+0x2f0>)
 8011836:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801183a:	ed93 7b00 	vldr	d7, [r3]
 801183e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011846:	d501      	bpl.n	801184c <_dtoa_r+0x17c>
 8011848:	f10b 3bff 	add.w	fp, fp, #4294967295
 801184c:	2300      	movs	r3, #0
 801184e:	e022      	b.n	8011896 <_dtoa_r+0x1c6>
 8011850:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011852:	4401      	add	r1, r0
 8011854:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8011858:	2b20      	cmp	r3, #32
 801185a:	bfc1      	itttt	gt
 801185c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011860:	fa04 f303 	lslgt.w	r3, r4, r3
 8011864:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8011868:	fa28 f804 	lsrgt.w	r8, r8, r4
 801186c:	bfd6      	itet	le
 801186e:	f1c3 0320 	rsble	r3, r3, #32
 8011872:	ea43 0808 	orrgt.w	r8, r3, r8
 8011876:	fa08 f803 	lslle.w	r8, r8, r3
 801187a:	ee07 8a90 	vmov	s15, r8
 801187e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011882:	3901      	subs	r1, #1
 8011884:	ee17 4a90 	vmov	r4, s15
 8011888:	ec53 2b17 	vmov	r2, r3, d7
 801188c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8011890:	2401      	movs	r4, #1
 8011892:	e7a3      	b.n	80117dc <_dtoa_r+0x10c>
 8011894:	2301      	movs	r3, #1
 8011896:	930b      	str	r3, [sp, #44]	; 0x2c
 8011898:	1a43      	subs	r3, r0, r1
 801189a:	1e5a      	subs	r2, r3, #1
 801189c:	bf45      	ittet	mi
 801189e:	f1c3 0301 	rsbmi	r3, r3, #1
 80118a2:	9304      	strmi	r3, [sp, #16]
 80118a4:	2300      	movpl	r3, #0
 80118a6:	2300      	movmi	r3, #0
 80118a8:	9205      	str	r2, [sp, #20]
 80118aa:	bf54      	ite	pl
 80118ac:	9304      	strpl	r3, [sp, #16]
 80118ae:	9305      	strmi	r3, [sp, #20]
 80118b0:	f1bb 0f00 	cmp.w	fp, #0
 80118b4:	db18      	blt.n	80118e8 <_dtoa_r+0x218>
 80118b6:	9b05      	ldr	r3, [sp, #20]
 80118b8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80118bc:	445b      	add	r3, fp
 80118be:	9305      	str	r3, [sp, #20]
 80118c0:	2300      	movs	r3, #0
 80118c2:	9a06      	ldr	r2, [sp, #24]
 80118c4:	2a09      	cmp	r2, #9
 80118c6:	d849      	bhi.n	801195c <_dtoa_r+0x28c>
 80118c8:	2a05      	cmp	r2, #5
 80118ca:	bfc4      	itt	gt
 80118cc:	3a04      	subgt	r2, #4
 80118ce:	9206      	strgt	r2, [sp, #24]
 80118d0:	9a06      	ldr	r2, [sp, #24]
 80118d2:	f1a2 0202 	sub.w	r2, r2, #2
 80118d6:	bfcc      	ite	gt
 80118d8:	2400      	movgt	r4, #0
 80118da:	2401      	movle	r4, #1
 80118dc:	2a03      	cmp	r2, #3
 80118de:	d848      	bhi.n	8011972 <_dtoa_r+0x2a2>
 80118e0:	e8df f002 	tbb	[pc, r2]
 80118e4:	3a2c2e0b 	.word	0x3a2c2e0b
 80118e8:	9b04      	ldr	r3, [sp, #16]
 80118ea:	2200      	movs	r2, #0
 80118ec:	eba3 030b 	sub.w	r3, r3, fp
 80118f0:	9304      	str	r3, [sp, #16]
 80118f2:	9209      	str	r2, [sp, #36]	; 0x24
 80118f4:	f1cb 0300 	rsb	r3, fp, #0
 80118f8:	e7e3      	b.n	80118c2 <_dtoa_r+0x1f2>
 80118fa:	2200      	movs	r2, #0
 80118fc:	9207      	str	r2, [sp, #28]
 80118fe:	9a08      	ldr	r2, [sp, #32]
 8011900:	2a00      	cmp	r2, #0
 8011902:	dc39      	bgt.n	8011978 <_dtoa_r+0x2a8>
 8011904:	f04f 0a01 	mov.w	sl, #1
 8011908:	46d1      	mov	r9, sl
 801190a:	4652      	mov	r2, sl
 801190c:	f8cd a020 	str.w	sl, [sp, #32]
 8011910:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8011912:	2100      	movs	r1, #0
 8011914:	6079      	str	r1, [r7, #4]
 8011916:	2004      	movs	r0, #4
 8011918:	f100 0c14 	add.w	ip, r0, #20
 801191c:	4594      	cmp	ip, r2
 801191e:	6879      	ldr	r1, [r7, #4]
 8011920:	d92f      	bls.n	8011982 <_dtoa_r+0x2b2>
 8011922:	4630      	mov	r0, r6
 8011924:	930d      	str	r3, [sp, #52]	; 0x34
 8011926:	f000 fc5f 	bl	80121e8 <_Balloc>
 801192a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801192c:	9001      	str	r0, [sp, #4]
 801192e:	4602      	mov	r2, r0
 8011930:	2800      	cmp	r0, #0
 8011932:	d149      	bne.n	80119c8 <_dtoa_r+0x2f8>
 8011934:	4b23      	ldr	r3, [pc, #140]	; (80119c4 <_dtoa_r+0x2f4>)
 8011936:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801193a:	e6e1      	b.n	8011700 <_dtoa_r+0x30>
 801193c:	2201      	movs	r2, #1
 801193e:	e7dd      	b.n	80118fc <_dtoa_r+0x22c>
 8011940:	2200      	movs	r2, #0
 8011942:	9207      	str	r2, [sp, #28]
 8011944:	9a08      	ldr	r2, [sp, #32]
 8011946:	eb0b 0a02 	add.w	sl, fp, r2
 801194a:	f10a 0901 	add.w	r9, sl, #1
 801194e:	464a      	mov	r2, r9
 8011950:	2a01      	cmp	r2, #1
 8011952:	bfb8      	it	lt
 8011954:	2201      	movlt	r2, #1
 8011956:	e7db      	b.n	8011910 <_dtoa_r+0x240>
 8011958:	2201      	movs	r2, #1
 801195a:	e7f2      	b.n	8011942 <_dtoa_r+0x272>
 801195c:	2401      	movs	r4, #1
 801195e:	2200      	movs	r2, #0
 8011960:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8011964:	f04f 3aff 	mov.w	sl, #4294967295
 8011968:	2100      	movs	r1, #0
 801196a:	46d1      	mov	r9, sl
 801196c:	2212      	movs	r2, #18
 801196e:	9108      	str	r1, [sp, #32]
 8011970:	e7ce      	b.n	8011910 <_dtoa_r+0x240>
 8011972:	2201      	movs	r2, #1
 8011974:	9207      	str	r2, [sp, #28]
 8011976:	e7f5      	b.n	8011964 <_dtoa_r+0x294>
 8011978:	f8dd a020 	ldr.w	sl, [sp, #32]
 801197c:	46d1      	mov	r9, sl
 801197e:	4652      	mov	r2, sl
 8011980:	e7c6      	b.n	8011910 <_dtoa_r+0x240>
 8011982:	3101      	adds	r1, #1
 8011984:	6079      	str	r1, [r7, #4]
 8011986:	0040      	lsls	r0, r0, #1
 8011988:	e7c6      	b.n	8011918 <_dtoa_r+0x248>
 801198a:	bf00      	nop
 801198c:	f3af 8000 	nop.w
 8011990:	636f4361 	.word	0x636f4361
 8011994:	3fd287a7 	.word	0x3fd287a7
 8011998:	8b60c8b3 	.word	0x8b60c8b3
 801199c:	3fc68a28 	.word	0x3fc68a28
 80119a0:	509f79fb 	.word	0x509f79fb
 80119a4:	3fd34413 	.word	0x3fd34413
 80119a8:	0801df60 	.word	0x0801df60
 80119ac:	0801e078 	.word	0x0801e078
 80119b0:	7ff00000 	.word	0x7ff00000
 80119b4:	0801e074 	.word	0x0801e074
 80119b8:	0801e06b 	.word	0x0801e06b
 80119bc:	0801df3d 	.word	0x0801df3d
 80119c0:	0801e168 	.word	0x0801e168
 80119c4:	0801e0d3 	.word	0x0801e0d3
 80119c8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80119ca:	9901      	ldr	r1, [sp, #4]
 80119cc:	6011      	str	r1, [r2, #0]
 80119ce:	f1b9 0f0e 	cmp.w	r9, #14
 80119d2:	d86c      	bhi.n	8011aae <_dtoa_r+0x3de>
 80119d4:	2c00      	cmp	r4, #0
 80119d6:	d06a      	beq.n	8011aae <_dtoa_r+0x3de>
 80119d8:	f1bb 0f00 	cmp.w	fp, #0
 80119dc:	f340 80a0 	ble.w	8011b20 <_dtoa_r+0x450>
 80119e0:	49c1      	ldr	r1, [pc, #772]	; (8011ce8 <_dtoa_r+0x618>)
 80119e2:	f00b 020f 	and.w	r2, fp, #15
 80119e6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80119ea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80119ee:	ed92 7b00 	vldr	d7, [r2]
 80119f2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80119f6:	f000 8087 	beq.w	8011b08 <_dtoa_r+0x438>
 80119fa:	4abc      	ldr	r2, [pc, #752]	; (8011cec <_dtoa_r+0x61c>)
 80119fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8011a00:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8011a04:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011a08:	f001 010f 	and.w	r1, r1, #15
 8011a0c:	2203      	movs	r2, #3
 8011a0e:	48b7      	ldr	r0, [pc, #732]	; (8011cec <_dtoa_r+0x61c>)
 8011a10:	2900      	cmp	r1, #0
 8011a12:	d17b      	bne.n	8011b0c <_dtoa_r+0x43c>
 8011a14:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011a18:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011a1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011a20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011a22:	2900      	cmp	r1, #0
 8011a24:	f000 80a2 	beq.w	8011b6c <_dtoa_r+0x49c>
 8011a28:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011a2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011a30:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a38:	f140 8098 	bpl.w	8011b6c <_dtoa_r+0x49c>
 8011a3c:	f1b9 0f00 	cmp.w	r9, #0
 8011a40:	f000 8094 	beq.w	8011b6c <_dtoa_r+0x49c>
 8011a44:	f1ba 0f00 	cmp.w	sl, #0
 8011a48:	dd2f      	ble.n	8011aaa <_dtoa_r+0x3da>
 8011a4a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011a4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011a52:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011a56:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011a5a:	3201      	adds	r2, #1
 8011a5c:	4650      	mov	r0, sl
 8011a5e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011a62:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011a66:	ee07 2a90 	vmov	s15, r2
 8011a6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011a6e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011a72:	ee15 4a90 	vmov	r4, s11
 8011a76:	ec52 1b15 	vmov	r1, r2, d5
 8011a7a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8011a7e:	2800      	cmp	r0, #0
 8011a80:	d177      	bne.n	8011b72 <_dtoa_r+0x4a2>
 8011a82:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011a86:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011a8a:	ec42 1b17 	vmov	d7, r1, r2
 8011a8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a96:	f300 8263 	bgt.w	8011f60 <_dtoa_r+0x890>
 8011a9a:	eeb1 7b47 	vneg.f64	d7, d7
 8011a9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aa6:	f100 8258 	bmi.w	8011f5a <_dtoa_r+0x88a>
 8011aaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011aae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011ab0:	2a00      	cmp	r2, #0
 8011ab2:	f2c0 811d 	blt.w	8011cf0 <_dtoa_r+0x620>
 8011ab6:	f1bb 0f0e 	cmp.w	fp, #14
 8011aba:	f300 8119 	bgt.w	8011cf0 <_dtoa_r+0x620>
 8011abe:	4b8a      	ldr	r3, [pc, #552]	; (8011ce8 <_dtoa_r+0x618>)
 8011ac0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011ac4:	ed93 6b00 	vldr	d6, [r3]
 8011ac8:	9b08      	ldr	r3, [sp, #32]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	f280 80b7 	bge.w	8011c3e <_dtoa_r+0x56e>
 8011ad0:	f1b9 0f00 	cmp.w	r9, #0
 8011ad4:	f300 80b3 	bgt.w	8011c3e <_dtoa_r+0x56e>
 8011ad8:	f040 823f 	bne.w	8011f5a <_dtoa_r+0x88a>
 8011adc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011ae0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011ae4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011ae8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af0:	464c      	mov	r4, r9
 8011af2:	464f      	mov	r7, r9
 8011af4:	f280 8215 	bge.w	8011f22 <_dtoa_r+0x852>
 8011af8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011afc:	2331      	movs	r3, #49	; 0x31
 8011afe:	f808 3b01 	strb.w	r3, [r8], #1
 8011b02:	f10b 0b01 	add.w	fp, fp, #1
 8011b06:	e211      	b.n	8011f2c <_dtoa_r+0x85c>
 8011b08:	2202      	movs	r2, #2
 8011b0a:	e780      	b.n	8011a0e <_dtoa_r+0x33e>
 8011b0c:	07cc      	lsls	r4, r1, #31
 8011b0e:	d504      	bpl.n	8011b1a <_dtoa_r+0x44a>
 8011b10:	ed90 6b00 	vldr	d6, [r0]
 8011b14:	3201      	adds	r2, #1
 8011b16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011b1a:	1049      	asrs	r1, r1, #1
 8011b1c:	3008      	adds	r0, #8
 8011b1e:	e777      	b.n	8011a10 <_dtoa_r+0x340>
 8011b20:	d022      	beq.n	8011b68 <_dtoa_r+0x498>
 8011b22:	f1cb 0100 	rsb	r1, fp, #0
 8011b26:	4a70      	ldr	r2, [pc, #448]	; (8011ce8 <_dtoa_r+0x618>)
 8011b28:	f001 000f 	and.w	r0, r1, #15
 8011b2c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011b30:	ed92 7b00 	vldr	d7, [r2]
 8011b34:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011b38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011b3c:	486b      	ldr	r0, [pc, #428]	; (8011cec <_dtoa_r+0x61c>)
 8011b3e:	1109      	asrs	r1, r1, #4
 8011b40:	2400      	movs	r4, #0
 8011b42:	2202      	movs	r2, #2
 8011b44:	b929      	cbnz	r1, 8011b52 <_dtoa_r+0x482>
 8011b46:	2c00      	cmp	r4, #0
 8011b48:	f43f af6a 	beq.w	8011a20 <_dtoa_r+0x350>
 8011b4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011b50:	e766      	b.n	8011a20 <_dtoa_r+0x350>
 8011b52:	07cf      	lsls	r7, r1, #31
 8011b54:	d505      	bpl.n	8011b62 <_dtoa_r+0x492>
 8011b56:	ed90 6b00 	vldr	d6, [r0]
 8011b5a:	3201      	adds	r2, #1
 8011b5c:	2401      	movs	r4, #1
 8011b5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011b62:	1049      	asrs	r1, r1, #1
 8011b64:	3008      	adds	r0, #8
 8011b66:	e7ed      	b.n	8011b44 <_dtoa_r+0x474>
 8011b68:	2202      	movs	r2, #2
 8011b6a:	e759      	b.n	8011a20 <_dtoa_r+0x350>
 8011b6c:	465f      	mov	r7, fp
 8011b6e:	4648      	mov	r0, r9
 8011b70:	e775      	b.n	8011a5e <_dtoa_r+0x38e>
 8011b72:	ec42 1b17 	vmov	d7, r1, r2
 8011b76:	4a5c      	ldr	r2, [pc, #368]	; (8011ce8 <_dtoa_r+0x618>)
 8011b78:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011b7c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011b80:	9a01      	ldr	r2, [sp, #4]
 8011b82:	1814      	adds	r4, r2, r0
 8011b84:	9a07      	ldr	r2, [sp, #28]
 8011b86:	b352      	cbz	r2, 8011bde <_dtoa_r+0x50e>
 8011b88:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011b8c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011b90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011b94:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011b98:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011b9c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011ba0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011ba4:	ee14 2a90 	vmov	r2, s9
 8011ba8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011bac:	3230      	adds	r2, #48	; 0x30
 8011bae:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011bb2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bba:	f808 2b01 	strb.w	r2, [r8], #1
 8011bbe:	d439      	bmi.n	8011c34 <_dtoa_r+0x564>
 8011bc0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011bc4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bcc:	d472      	bmi.n	8011cb4 <_dtoa_r+0x5e4>
 8011bce:	45a0      	cmp	r8, r4
 8011bd0:	f43f af6b 	beq.w	8011aaa <_dtoa_r+0x3da>
 8011bd4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011bd8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011bdc:	e7e0      	b.n	8011ba0 <_dtoa_r+0x4d0>
 8011bde:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011be2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011be6:	4621      	mov	r1, r4
 8011be8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011bec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011bf0:	ee14 2a90 	vmov	r2, s9
 8011bf4:	3230      	adds	r2, #48	; 0x30
 8011bf6:	f808 2b01 	strb.w	r2, [r8], #1
 8011bfa:	45a0      	cmp	r8, r4
 8011bfc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011c00:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011c04:	d118      	bne.n	8011c38 <_dtoa_r+0x568>
 8011c06:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011c0a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011c0e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c16:	dc4d      	bgt.n	8011cb4 <_dtoa_r+0x5e4>
 8011c18:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011c1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c24:	f57f af41 	bpl.w	8011aaa <_dtoa_r+0x3da>
 8011c28:	4688      	mov	r8, r1
 8011c2a:	3901      	subs	r1, #1
 8011c2c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8011c30:	2b30      	cmp	r3, #48	; 0x30
 8011c32:	d0f9      	beq.n	8011c28 <_dtoa_r+0x558>
 8011c34:	46bb      	mov	fp, r7
 8011c36:	e02a      	b.n	8011c8e <_dtoa_r+0x5be>
 8011c38:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011c3c:	e7d6      	b.n	8011bec <_dtoa_r+0x51c>
 8011c3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c42:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011c46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011c4a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011c4e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011c52:	ee15 3a10 	vmov	r3, s10
 8011c56:	3330      	adds	r3, #48	; 0x30
 8011c58:	f808 3b01 	strb.w	r3, [r8], #1
 8011c5c:	9b01      	ldr	r3, [sp, #4]
 8011c5e:	eba8 0303 	sub.w	r3, r8, r3
 8011c62:	4599      	cmp	r9, r3
 8011c64:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011c68:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011c6c:	d133      	bne.n	8011cd6 <_dtoa_r+0x606>
 8011c6e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011c72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c7a:	dc1a      	bgt.n	8011cb2 <_dtoa_r+0x5e2>
 8011c7c:	eeb4 7b46 	vcmp.f64	d7, d6
 8011c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c84:	d103      	bne.n	8011c8e <_dtoa_r+0x5be>
 8011c86:	ee15 3a10 	vmov	r3, s10
 8011c8a:	07d9      	lsls	r1, r3, #31
 8011c8c:	d411      	bmi.n	8011cb2 <_dtoa_r+0x5e2>
 8011c8e:	4629      	mov	r1, r5
 8011c90:	4630      	mov	r0, r6
 8011c92:	f000 fae9 	bl	8012268 <_Bfree>
 8011c96:	2300      	movs	r3, #0
 8011c98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c9a:	f888 3000 	strb.w	r3, [r8]
 8011c9e:	f10b 0301 	add.w	r3, fp, #1
 8011ca2:	6013      	str	r3, [r2, #0]
 8011ca4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	f43f ad61 	beq.w	801176e <_dtoa_r+0x9e>
 8011cac:	f8c3 8000 	str.w	r8, [r3]
 8011cb0:	e55d      	b.n	801176e <_dtoa_r+0x9e>
 8011cb2:	465f      	mov	r7, fp
 8011cb4:	4643      	mov	r3, r8
 8011cb6:	4698      	mov	r8, r3
 8011cb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011cbc:	2a39      	cmp	r2, #57	; 0x39
 8011cbe:	d106      	bne.n	8011cce <_dtoa_r+0x5fe>
 8011cc0:	9a01      	ldr	r2, [sp, #4]
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d1f7      	bne.n	8011cb6 <_dtoa_r+0x5e6>
 8011cc6:	9901      	ldr	r1, [sp, #4]
 8011cc8:	2230      	movs	r2, #48	; 0x30
 8011cca:	3701      	adds	r7, #1
 8011ccc:	700a      	strb	r2, [r1, #0]
 8011cce:	781a      	ldrb	r2, [r3, #0]
 8011cd0:	3201      	adds	r2, #1
 8011cd2:	701a      	strb	r2, [r3, #0]
 8011cd4:	e7ae      	b.n	8011c34 <_dtoa_r+0x564>
 8011cd6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011cda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ce2:	d1b2      	bne.n	8011c4a <_dtoa_r+0x57a>
 8011ce4:	e7d3      	b.n	8011c8e <_dtoa_r+0x5be>
 8011ce6:	bf00      	nop
 8011ce8:	0801e168 	.word	0x0801e168
 8011cec:	0801e140 	.word	0x0801e140
 8011cf0:	9907      	ldr	r1, [sp, #28]
 8011cf2:	2900      	cmp	r1, #0
 8011cf4:	f000 80d0 	beq.w	8011e98 <_dtoa_r+0x7c8>
 8011cf8:	9906      	ldr	r1, [sp, #24]
 8011cfa:	2901      	cmp	r1, #1
 8011cfc:	f300 80b4 	bgt.w	8011e68 <_dtoa_r+0x798>
 8011d00:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011d02:	2900      	cmp	r1, #0
 8011d04:	f000 80ac 	beq.w	8011e60 <_dtoa_r+0x790>
 8011d08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011d0c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011d10:	461c      	mov	r4, r3
 8011d12:	930a      	str	r3, [sp, #40]	; 0x28
 8011d14:	9b04      	ldr	r3, [sp, #16]
 8011d16:	4413      	add	r3, r2
 8011d18:	9304      	str	r3, [sp, #16]
 8011d1a:	9b05      	ldr	r3, [sp, #20]
 8011d1c:	2101      	movs	r1, #1
 8011d1e:	4413      	add	r3, r2
 8011d20:	4630      	mov	r0, r6
 8011d22:	9305      	str	r3, [sp, #20]
 8011d24:	f000 fb58 	bl	80123d8 <__i2b>
 8011d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d2a:	4607      	mov	r7, r0
 8011d2c:	f1b8 0f00 	cmp.w	r8, #0
 8011d30:	dd0d      	ble.n	8011d4e <_dtoa_r+0x67e>
 8011d32:	9a05      	ldr	r2, [sp, #20]
 8011d34:	2a00      	cmp	r2, #0
 8011d36:	dd0a      	ble.n	8011d4e <_dtoa_r+0x67e>
 8011d38:	4542      	cmp	r2, r8
 8011d3a:	9904      	ldr	r1, [sp, #16]
 8011d3c:	bfa8      	it	ge
 8011d3e:	4642      	movge	r2, r8
 8011d40:	1a89      	subs	r1, r1, r2
 8011d42:	9104      	str	r1, [sp, #16]
 8011d44:	9905      	ldr	r1, [sp, #20]
 8011d46:	eba8 0802 	sub.w	r8, r8, r2
 8011d4a:	1a8a      	subs	r2, r1, r2
 8011d4c:	9205      	str	r2, [sp, #20]
 8011d4e:	b303      	cbz	r3, 8011d92 <_dtoa_r+0x6c2>
 8011d50:	9a07      	ldr	r2, [sp, #28]
 8011d52:	2a00      	cmp	r2, #0
 8011d54:	f000 80a5 	beq.w	8011ea2 <_dtoa_r+0x7d2>
 8011d58:	2c00      	cmp	r4, #0
 8011d5a:	dd13      	ble.n	8011d84 <_dtoa_r+0x6b4>
 8011d5c:	4639      	mov	r1, r7
 8011d5e:	4622      	mov	r2, r4
 8011d60:	4630      	mov	r0, r6
 8011d62:	930d      	str	r3, [sp, #52]	; 0x34
 8011d64:	f000 fbf8 	bl	8012558 <__pow5mult>
 8011d68:	462a      	mov	r2, r5
 8011d6a:	4601      	mov	r1, r0
 8011d6c:	4607      	mov	r7, r0
 8011d6e:	4630      	mov	r0, r6
 8011d70:	f000 fb48 	bl	8012404 <__multiply>
 8011d74:	4629      	mov	r1, r5
 8011d76:	900a      	str	r0, [sp, #40]	; 0x28
 8011d78:	4630      	mov	r0, r6
 8011d7a:	f000 fa75 	bl	8012268 <_Bfree>
 8011d7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d82:	4615      	mov	r5, r2
 8011d84:	1b1a      	subs	r2, r3, r4
 8011d86:	d004      	beq.n	8011d92 <_dtoa_r+0x6c2>
 8011d88:	4629      	mov	r1, r5
 8011d8a:	4630      	mov	r0, r6
 8011d8c:	f000 fbe4 	bl	8012558 <__pow5mult>
 8011d90:	4605      	mov	r5, r0
 8011d92:	2101      	movs	r1, #1
 8011d94:	4630      	mov	r0, r6
 8011d96:	f000 fb1f 	bl	80123d8 <__i2b>
 8011d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	4604      	mov	r4, r0
 8011da0:	f340 8081 	ble.w	8011ea6 <_dtoa_r+0x7d6>
 8011da4:	461a      	mov	r2, r3
 8011da6:	4601      	mov	r1, r0
 8011da8:	4630      	mov	r0, r6
 8011daa:	f000 fbd5 	bl	8012558 <__pow5mult>
 8011dae:	9b06      	ldr	r3, [sp, #24]
 8011db0:	2b01      	cmp	r3, #1
 8011db2:	4604      	mov	r4, r0
 8011db4:	dd7a      	ble.n	8011eac <_dtoa_r+0x7dc>
 8011db6:	2300      	movs	r3, #0
 8011db8:	930a      	str	r3, [sp, #40]	; 0x28
 8011dba:	6922      	ldr	r2, [r4, #16]
 8011dbc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011dc0:	6910      	ldr	r0, [r2, #16]
 8011dc2:	f000 fab9 	bl	8012338 <__hi0bits>
 8011dc6:	f1c0 0020 	rsb	r0, r0, #32
 8011dca:	9b05      	ldr	r3, [sp, #20]
 8011dcc:	4418      	add	r0, r3
 8011dce:	f010 001f 	ands.w	r0, r0, #31
 8011dd2:	f000 808c 	beq.w	8011eee <_dtoa_r+0x81e>
 8011dd6:	f1c0 0220 	rsb	r2, r0, #32
 8011dda:	2a04      	cmp	r2, #4
 8011ddc:	f340 8085 	ble.w	8011eea <_dtoa_r+0x81a>
 8011de0:	f1c0 001c 	rsb	r0, r0, #28
 8011de4:	9b04      	ldr	r3, [sp, #16]
 8011de6:	4403      	add	r3, r0
 8011de8:	9304      	str	r3, [sp, #16]
 8011dea:	9b05      	ldr	r3, [sp, #20]
 8011dec:	4403      	add	r3, r0
 8011dee:	4480      	add	r8, r0
 8011df0:	9305      	str	r3, [sp, #20]
 8011df2:	9b04      	ldr	r3, [sp, #16]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	dd05      	ble.n	8011e04 <_dtoa_r+0x734>
 8011df8:	4629      	mov	r1, r5
 8011dfa:	461a      	mov	r2, r3
 8011dfc:	4630      	mov	r0, r6
 8011dfe:	f000 fc05 	bl	801260c <__lshift>
 8011e02:	4605      	mov	r5, r0
 8011e04:	9b05      	ldr	r3, [sp, #20]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	dd05      	ble.n	8011e16 <_dtoa_r+0x746>
 8011e0a:	4621      	mov	r1, r4
 8011e0c:	461a      	mov	r2, r3
 8011e0e:	4630      	mov	r0, r6
 8011e10:	f000 fbfc 	bl	801260c <__lshift>
 8011e14:	4604      	mov	r4, r0
 8011e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d06a      	beq.n	8011ef2 <_dtoa_r+0x822>
 8011e1c:	4621      	mov	r1, r4
 8011e1e:	4628      	mov	r0, r5
 8011e20:	f000 fc64 	bl	80126ec <__mcmp>
 8011e24:	2800      	cmp	r0, #0
 8011e26:	da64      	bge.n	8011ef2 <_dtoa_r+0x822>
 8011e28:	2300      	movs	r3, #0
 8011e2a:	4629      	mov	r1, r5
 8011e2c:	220a      	movs	r2, #10
 8011e2e:	4630      	mov	r0, r6
 8011e30:	f000 fa3c 	bl	80122ac <__multadd>
 8011e34:	9b07      	ldr	r3, [sp, #28]
 8011e36:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011e3a:	4605      	mov	r5, r0
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	f000 8191 	beq.w	8012164 <_dtoa_r+0xa94>
 8011e42:	4639      	mov	r1, r7
 8011e44:	2300      	movs	r3, #0
 8011e46:	220a      	movs	r2, #10
 8011e48:	4630      	mov	r0, r6
 8011e4a:	f000 fa2f 	bl	80122ac <__multadd>
 8011e4e:	f1ba 0f00 	cmp.w	sl, #0
 8011e52:	4607      	mov	r7, r0
 8011e54:	f300 808d 	bgt.w	8011f72 <_dtoa_r+0x8a2>
 8011e58:	9b06      	ldr	r3, [sp, #24]
 8011e5a:	2b02      	cmp	r3, #2
 8011e5c:	dc50      	bgt.n	8011f00 <_dtoa_r+0x830>
 8011e5e:	e088      	b.n	8011f72 <_dtoa_r+0x8a2>
 8011e60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e62:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011e66:	e751      	b.n	8011d0c <_dtoa_r+0x63c>
 8011e68:	f109 34ff 	add.w	r4, r9, #4294967295
 8011e6c:	42a3      	cmp	r3, r4
 8011e6e:	bfbf      	itttt	lt
 8011e70:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8011e72:	1ae3      	sublt	r3, r4, r3
 8011e74:	18d2      	addlt	r2, r2, r3
 8011e76:	9209      	strlt	r2, [sp, #36]	; 0x24
 8011e78:	bfb6      	itet	lt
 8011e7a:	4623      	movlt	r3, r4
 8011e7c:	1b1c      	subge	r4, r3, r4
 8011e7e:	2400      	movlt	r4, #0
 8011e80:	f1b9 0f00 	cmp.w	r9, #0
 8011e84:	bfb5      	itete	lt
 8011e86:	9a04      	ldrlt	r2, [sp, #16]
 8011e88:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8011e8c:	eba2 0809 	sublt.w	r8, r2, r9
 8011e90:	464a      	movge	r2, r9
 8011e92:	bfb8      	it	lt
 8011e94:	2200      	movlt	r2, #0
 8011e96:	e73c      	b.n	8011d12 <_dtoa_r+0x642>
 8011e98:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011e9c:	9f07      	ldr	r7, [sp, #28]
 8011e9e:	461c      	mov	r4, r3
 8011ea0:	e744      	b.n	8011d2c <_dtoa_r+0x65c>
 8011ea2:	461a      	mov	r2, r3
 8011ea4:	e770      	b.n	8011d88 <_dtoa_r+0x6b8>
 8011ea6:	9b06      	ldr	r3, [sp, #24]
 8011ea8:	2b01      	cmp	r3, #1
 8011eaa:	dc18      	bgt.n	8011ede <_dtoa_r+0x80e>
 8011eac:	9b02      	ldr	r3, [sp, #8]
 8011eae:	b9b3      	cbnz	r3, 8011ede <_dtoa_r+0x80e>
 8011eb0:	9b03      	ldr	r3, [sp, #12]
 8011eb2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011eb6:	b9a2      	cbnz	r2, 8011ee2 <_dtoa_r+0x812>
 8011eb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011ebc:	0d12      	lsrs	r2, r2, #20
 8011ebe:	0512      	lsls	r2, r2, #20
 8011ec0:	b18a      	cbz	r2, 8011ee6 <_dtoa_r+0x816>
 8011ec2:	9b04      	ldr	r3, [sp, #16]
 8011ec4:	3301      	adds	r3, #1
 8011ec6:	9304      	str	r3, [sp, #16]
 8011ec8:	9b05      	ldr	r3, [sp, #20]
 8011eca:	3301      	adds	r3, #1
 8011ecc:	9305      	str	r3, [sp, #20]
 8011ece:	2301      	movs	r3, #1
 8011ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8011ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	f47f af70 	bne.w	8011dba <_dtoa_r+0x6ea>
 8011eda:	2001      	movs	r0, #1
 8011edc:	e775      	b.n	8011dca <_dtoa_r+0x6fa>
 8011ede:	2300      	movs	r3, #0
 8011ee0:	e7f6      	b.n	8011ed0 <_dtoa_r+0x800>
 8011ee2:	9b02      	ldr	r3, [sp, #8]
 8011ee4:	e7f4      	b.n	8011ed0 <_dtoa_r+0x800>
 8011ee6:	920a      	str	r2, [sp, #40]	; 0x28
 8011ee8:	e7f3      	b.n	8011ed2 <_dtoa_r+0x802>
 8011eea:	d082      	beq.n	8011df2 <_dtoa_r+0x722>
 8011eec:	4610      	mov	r0, r2
 8011eee:	301c      	adds	r0, #28
 8011ef0:	e778      	b.n	8011de4 <_dtoa_r+0x714>
 8011ef2:	f1b9 0f00 	cmp.w	r9, #0
 8011ef6:	dc37      	bgt.n	8011f68 <_dtoa_r+0x898>
 8011ef8:	9b06      	ldr	r3, [sp, #24]
 8011efa:	2b02      	cmp	r3, #2
 8011efc:	dd34      	ble.n	8011f68 <_dtoa_r+0x898>
 8011efe:	46ca      	mov	sl, r9
 8011f00:	f1ba 0f00 	cmp.w	sl, #0
 8011f04:	d10d      	bne.n	8011f22 <_dtoa_r+0x852>
 8011f06:	4621      	mov	r1, r4
 8011f08:	4653      	mov	r3, sl
 8011f0a:	2205      	movs	r2, #5
 8011f0c:	4630      	mov	r0, r6
 8011f0e:	f000 f9cd 	bl	80122ac <__multadd>
 8011f12:	4601      	mov	r1, r0
 8011f14:	4604      	mov	r4, r0
 8011f16:	4628      	mov	r0, r5
 8011f18:	f000 fbe8 	bl	80126ec <__mcmp>
 8011f1c:	2800      	cmp	r0, #0
 8011f1e:	f73f adeb 	bgt.w	8011af8 <_dtoa_r+0x428>
 8011f22:	9b08      	ldr	r3, [sp, #32]
 8011f24:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011f28:	ea6f 0b03 	mvn.w	fp, r3
 8011f2c:	f04f 0900 	mov.w	r9, #0
 8011f30:	4621      	mov	r1, r4
 8011f32:	4630      	mov	r0, r6
 8011f34:	f000 f998 	bl	8012268 <_Bfree>
 8011f38:	2f00      	cmp	r7, #0
 8011f3a:	f43f aea8 	beq.w	8011c8e <_dtoa_r+0x5be>
 8011f3e:	f1b9 0f00 	cmp.w	r9, #0
 8011f42:	d005      	beq.n	8011f50 <_dtoa_r+0x880>
 8011f44:	45b9      	cmp	r9, r7
 8011f46:	d003      	beq.n	8011f50 <_dtoa_r+0x880>
 8011f48:	4649      	mov	r1, r9
 8011f4a:	4630      	mov	r0, r6
 8011f4c:	f000 f98c 	bl	8012268 <_Bfree>
 8011f50:	4639      	mov	r1, r7
 8011f52:	4630      	mov	r0, r6
 8011f54:	f000 f988 	bl	8012268 <_Bfree>
 8011f58:	e699      	b.n	8011c8e <_dtoa_r+0x5be>
 8011f5a:	2400      	movs	r4, #0
 8011f5c:	4627      	mov	r7, r4
 8011f5e:	e7e0      	b.n	8011f22 <_dtoa_r+0x852>
 8011f60:	46bb      	mov	fp, r7
 8011f62:	4604      	mov	r4, r0
 8011f64:	4607      	mov	r7, r0
 8011f66:	e5c7      	b.n	8011af8 <_dtoa_r+0x428>
 8011f68:	9b07      	ldr	r3, [sp, #28]
 8011f6a:	46ca      	mov	sl, r9
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	f000 8100 	beq.w	8012172 <_dtoa_r+0xaa2>
 8011f72:	f1b8 0f00 	cmp.w	r8, #0
 8011f76:	dd05      	ble.n	8011f84 <_dtoa_r+0x8b4>
 8011f78:	4639      	mov	r1, r7
 8011f7a:	4642      	mov	r2, r8
 8011f7c:	4630      	mov	r0, r6
 8011f7e:	f000 fb45 	bl	801260c <__lshift>
 8011f82:	4607      	mov	r7, r0
 8011f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d05d      	beq.n	8012046 <_dtoa_r+0x976>
 8011f8a:	6879      	ldr	r1, [r7, #4]
 8011f8c:	4630      	mov	r0, r6
 8011f8e:	f000 f92b 	bl	80121e8 <_Balloc>
 8011f92:	4680      	mov	r8, r0
 8011f94:	b928      	cbnz	r0, 8011fa2 <_dtoa_r+0x8d2>
 8011f96:	4b82      	ldr	r3, [pc, #520]	; (80121a0 <_dtoa_r+0xad0>)
 8011f98:	4602      	mov	r2, r0
 8011f9a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011f9e:	f7ff bbaf 	b.w	8011700 <_dtoa_r+0x30>
 8011fa2:	693a      	ldr	r2, [r7, #16]
 8011fa4:	3202      	adds	r2, #2
 8011fa6:	0092      	lsls	r2, r2, #2
 8011fa8:	f107 010c 	add.w	r1, r7, #12
 8011fac:	300c      	adds	r0, #12
 8011fae:	f7fe fcfd 	bl	80109ac <memcpy>
 8011fb2:	2201      	movs	r2, #1
 8011fb4:	4641      	mov	r1, r8
 8011fb6:	4630      	mov	r0, r6
 8011fb8:	f000 fb28 	bl	801260c <__lshift>
 8011fbc:	9b01      	ldr	r3, [sp, #4]
 8011fbe:	3301      	adds	r3, #1
 8011fc0:	9304      	str	r3, [sp, #16]
 8011fc2:	9b01      	ldr	r3, [sp, #4]
 8011fc4:	4453      	add	r3, sl
 8011fc6:	9308      	str	r3, [sp, #32]
 8011fc8:	9b02      	ldr	r3, [sp, #8]
 8011fca:	f003 0301 	and.w	r3, r3, #1
 8011fce:	46b9      	mov	r9, r7
 8011fd0:	9307      	str	r3, [sp, #28]
 8011fd2:	4607      	mov	r7, r0
 8011fd4:	9b04      	ldr	r3, [sp, #16]
 8011fd6:	4621      	mov	r1, r4
 8011fd8:	3b01      	subs	r3, #1
 8011fda:	4628      	mov	r0, r5
 8011fdc:	9302      	str	r3, [sp, #8]
 8011fde:	f7ff fae9 	bl	80115b4 <quorem>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	3330      	adds	r3, #48	; 0x30
 8011fe6:	9005      	str	r0, [sp, #20]
 8011fe8:	4649      	mov	r1, r9
 8011fea:	4628      	mov	r0, r5
 8011fec:	9309      	str	r3, [sp, #36]	; 0x24
 8011fee:	f000 fb7d 	bl	80126ec <__mcmp>
 8011ff2:	463a      	mov	r2, r7
 8011ff4:	4682      	mov	sl, r0
 8011ff6:	4621      	mov	r1, r4
 8011ff8:	4630      	mov	r0, r6
 8011ffa:	f000 fb93 	bl	8012724 <__mdiff>
 8011ffe:	68c2      	ldr	r2, [r0, #12]
 8012000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012002:	4680      	mov	r8, r0
 8012004:	bb0a      	cbnz	r2, 801204a <_dtoa_r+0x97a>
 8012006:	4601      	mov	r1, r0
 8012008:	4628      	mov	r0, r5
 801200a:	f000 fb6f 	bl	80126ec <__mcmp>
 801200e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012010:	4602      	mov	r2, r0
 8012012:	4641      	mov	r1, r8
 8012014:	4630      	mov	r0, r6
 8012016:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801201a:	f000 f925 	bl	8012268 <_Bfree>
 801201e:	9b06      	ldr	r3, [sp, #24]
 8012020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012022:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012026:	ea43 0102 	orr.w	r1, r3, r2
 801202a:	9b07      	ldr	r3, [sp, #28]
 801202c:	430b      	orrs	r3, r1
 801202e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012030:	d10d      	bne.n	801204e <_dtoa_r+0x97e>
 8012032:	2b39      	cmp	r3, #57	; 0x39
 8012034:	d029      	beq.n	801208a <_dtoa_r+0x9ba>
 8012036:	f1ba 0f00 	cmp.w	sl, #0
 801203a:	dd01      	ble.n	8012040 <_dtoa_r+0x970>
 801203c:	9b05      	ldr	r3, [sp, #20]
 801203e:	3331      	adds	r3, #49	; 0x31
 8012040:	9a02      	ldr	r2, [sp, #8]
 8012042:	7013      	strb	r3, [r2, #0]
 8012044:	e774      	b.n	8011f30 <_dtoa_r+0x860>
 8012046:	4638      	mov	r0, r7
 8012048:	e7b8      	b.n	8011fbc <_dtoa_r+0x8ec>
 801204a:	2201      	movs	r2, #1
 801204c:	e7e1      	b.n	8012012 <_dtoa_r+0x942>
 801204e:	f1ba 0f00 	cmp.w	sl, #0
 8012052:	db06      	blt.n	8012062 <_dtoa_r+0x992>
 8012054:	9906      	ldr	r1, [sp, #24]
 8012056:	ea41 0a0a 	orr.w	sl, r1, sl
 801205a:	9907      	ldr	r1, [sp, #28]
 801205c:	ea5a 0101 	orrs.w	r1, sl, r1
 8012060:	d120      	bne.n	80120a4 <_dtoa_r+0x9d4>
 8012062:	2a00      	cmp	r2, #0
 8012064:	ddec      	ble.n	8012040 <_dtoa_r+0x970>
 8012066:	4629      	mov	r1, r5
 8012068:	2201      	movs	r2, #1
 801206a:	4630      	mov	r0, r6
 801206c:	9304      	str	r3, [sp, #16]
 801206e:	f000 facd 	bl	801260c <__lshift>
 8012072:	4621      	mov	r1, r4
 8012074:	4605      	mov	r5, r0
 8012076:	f000 fb39 	bl	80126ec <__mcmp>
 801207a:	2800      	cmp	r0, #0
 801207c:	9b04      	ldr	r3, [sp, #16]
 801207e:	dc02      	bgt.n	8012086 <_dtoa_r+0x9b6>
 8012080:	d1de      	bne.n	8012040 <_dtoa_r+0x970>
 8012082:	07da      	lsls	r2, r3, #31
 8012084:	d5dc      	bpl.n	8012040 <_dtoa_r+0x970>
 8012086:	2b39      	cmp	r3, #57	; 0x39
 8012088:	d1d8      	bne.n	801203c <_dtoa_r+0x96c>
 801208a:	9a02      	ldr	r2, [sp, #8]
 801208c:	2339      	movs	r3, #57	; 0x39
 801208e:	7013      	strb	r3, [r2, #0]
 8012090:	4643      	mov	r3, r8
 8012092:	4698      	mov	r8, r3
 8012094:	3b01      	subs	r3, #1
 8012096:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801209a:	2a39      	cmp	r2, #57	; 0x39
 801209c:	d051      	beq.n	8012142 <_dtoa_r+0xa72>
 801209e:	3201      	adds	r2, #1
 80120a0:	701a      	strb	r2, [r3, #0]
 80120a2:	e745      	b.n	8011f30 <_dtoa_r+0x860>
 80120a4:	2a00      	cmp	r2, #0
 80120a6:	dd03      	ble.n	80120b0 <_dtoa_r+0x9e0>
 80120a8:	2b39      	cmp	r3, #57	; 0x39
 80120aa:	d0ee      	beq.n	801208a <_dtoa_r+0x9ba>
 80120ac:	3301      	adds	r3, #1
 80120ae:	e7c7      	b.n	8012040 <_dtoa_r+0x970>
 80120b0:	9a04      	ldr	r2, [sp, #16]
 80120b2:	9908      	ldr	r1, [sp, #32]
 80120b4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80120b8:	428a      	cmp	r2, r1
 80120ba:	d02b      	beq.n	8012114 <_dtoa_r+0xa44>
 80120bc:	4629      	mov	r1, r5
 80120be:	2300      	movs	r3, #0
 80120c0:	220a      	movs	r2, #10
 80120c2:	4630      	mov	r0, r6
 80120c4:	f000 f8f2 	bl	80122ac <__multadd>
 80120c8:	45b9      	cmp	r9, r7
 80120ca:	4605      	mov	r5, r0
 80120cc:	f04f 0300 	mov.w	r3, #0
 80120d0:	f04f 020a 	mov.w	r2, #10
 80120d4:	4649      	mov	r1, r9
 80120d6:	4630      	mov	r0, r6
 80120d8:	d107      	bne.n	80120ea <_dtoa_r+0xa1a>
 80120da:	f000 f8e7 	bl	80122ac <__multadd>
 80120de:	4681      	mov	r9, r0
 80120e0:	4607      	mov	r7, r0
 80120e2:	9b04      	ldr	r3, [sp, #16]
 80120e4:	3301      	adds	r3, #1
 80120e6:	9304      	str	r3, [sp, #16]
 80120e8:	e774      	b.n	8011fd4 <_dtoa_r+0x904>
 80120ea:	f000 f8df 	bl	80122ac <__multadd>
 80120ee:	4639      	mov	r1, r7
 80120f0:	4681      	mov	r9, r0
 80120f2:	2300      	movs	r3, #0
 80120f4:	220a      	movs	r2, #10
 80120f6:	4630      	mov	r0, r6
 80120f8:	f000 f8d8 	bl	80122ac <__multadd>
 80120fc:	4607      	mov	r7, r0
 80120fe:	e7f0      	b.n	80120e2 <_dtoa_r+0xa12>
 8012100:	f1ba 0f00 	cmp.w	sl, #0
 8012104:	9a01      	ldr	r2, [sp, #4]
 8012106:	bfcc      	ite	gt
 8012108:	46d0      	movgt	r8, sl
 801210a:	f04f 0801 	movle.w	r8, #1
 801210e:	4490      	add	r8, r2
 8012110:	f04f 0900 	mov.w	r9, #0
 8012114:	4629      	mov	r1, r5
 8012116:	2201      	movs	r2, #1
 8012118:	4630      	mov	r0, r6
 801211a:	9302      	str	r3, [sp, #8]
 801211c:	f000 fa76 	bl	801260c <__lshift>
 8012120:	4621      	mov	r1, r4
 8012122:	4605      	mov	r5, r0
 8012124:	f000 fae2 	bl	80126ec <__mcmp>
 8012128:	2800      	cmp	r0, #0
 801212a:	dcb1      	bgt.n	8012090 <_dtoa_r+0x9c0>
 801212c:	d102      	bne.n	8012134 <_dtoa_r+0xa64>
 801212e:	9b02      	ldr	r3, [sp, #8]
 8012130:	07db      	lsls	r3, r3, #31
 8012132:	d4ad      	bmi.n	8012090 <_dtoa_r+0x9c0>
 8012134:	4643      	mov	r3, r8
 8012136:	4698      	mov	r8, r3
 8012138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801213c:	2a30      	cmp	r2, #48	; 0x30
 801213e:	d0fa      	beq.n	8012136 <_dtoa_r+0xa66>
 8012140:	e6f6      	b.n	8011f30 <_dtoa_r+0x860>
 8012142:	9a01      	ldr	r2, [sp, #4]
 8012144:	429a      	cmp	r2, r3
 8012146:	d1a4      	bne.n	8012092 <_dtoa_r+0x9c2>
 8012148:	f10b 0b01 	add.w	fp, fp, #1
 801214c:	2331      	movs	r3, #49	; 0x31
 801214e:	e778      	b.n	8012042 <_dtoa_r+0x972>
 8012150:	4b14      	ldr	r3, [pc, #80]	; (80121a4 <_dtoa_r+0xad4>)
 8012152:	f7ff bb27 	b.w	80117a4 <_dtoa_r+0xd4>
 8012156:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012158:	2b00      	cmp	r3, #0
 801215a:	f47f ab03 	bne.w	8011764 <_dtoa_r+0x94>
 801215e:	4b12      	ldr	r3, [pc, #72]	; (80121a8 <_dtoa_r+0xad8>)
 8012160:	f7ff bb20 	b.w	80117a4 <_dtoa_r+0xd4>
 8012164:	f1ba 0f00 	cmp.w	sl, #0
 8012168:	dc03      	bgt.n	8012172 <_dtoa_r+0xaa2>
 801216a:	9b06      	ldr	r3, [sp, #24]
 801216c:	2b02      	cmp	r3, #2
 801216e:	f73f aec7 	bgt.w	8011f00 <_dtoa_r+0x830>
 8012172:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012176:	4621      	mov	r1, r4
 8012178:	4628      	mov	r0, r5
 801217a:	f7ff fa1b 	bl	80115b4 <quorem>
 801217e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012182:	f808 3b01 	strb.w	r3, [r8], #1
 8012186:	9a01      	ldr	r2, [sp, #4]
 8012188:	eba8 0202 	sub.w	r2, r8, r2
 801218c:	4592      	cmp	sl, r2
 801218e:	ddb7      	ble.n	8012100 <_dtoa_r+0xa30>
 8012190:	4629      	mov	r1, r5
 8012192:	2300      	movs	r3, #0
 8012194:	220a      	movs	r2, #10
 8012196:	4630      	mov	r0, r6
 8012198:	f000 f888 	bl	80122ac <__multadd>
 801219c:	4605      	mov	r5, r0
 801219e:	e7ea      	b.n	8012176 <_dtoa_r+0xaa6>
 80121a0:	0801e0d3 	.word	0x0801e0d3
 80121a4:	0801df3c 	.word	0x0801df3c
 80121a8:	0801e06b 	.word	0x0801e06b

080121ac <fiprintf>:
 80121ac:	b40e      	push	{r1, r2, r3}
 80121ae:	b503      	push	{r0, r1, lr}
 80121b0:	4601      	mov	r1, r0
 80121b2:	ab03      	add	r3, sp, #12
 80121b4:	4805      	ldr	r0, [pc, #20]	; (80121cc <fiprintf+0x20>)
 80121b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80121ba:	6800      	ldr	r0, [r0, #0]
 80121bc:	9301      	str	r3, [sp, #4]
 80121be:	f000 fe13 	bl	8012de8 <_vfiprintf_r>
 80121c2:	b002      	add	sp, #8
 80121c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80121c8:	b003      	add	sp, #12
 80121ca:	4770      	bx	lr
 80121cc:	24000558 	.word	0x24000558

080121d0 <_localeconv_r>:
 80121d0:	4800      	ldr	r0, [pc, #0]	; (80121d4 <_localeconv_r+0x4>)
 80121d2:	4770      	bx	lr
 80121d4:	240006ac 	.word	0x240006ac

080121d8 <malloc>:
 80121d8:	4b02      	ldr	r3, [pc, #8]	; (80121e4 <malloc+0xc>)
 80121da:	4601      	mov	r1, r0
 80121dc:	6818      	ldr	r0, [r3, #0]
 80121de:	f000 bc09 	b.w	80129f4 <_malloc_r>
 80121e2:	bf00      	nop
 80121e4:	24000558 	.word	0x24000558

080121e8 <_Balloc>:
 80121e8:	b570      	push	{r4, r5, r6, lr}
 80121ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80121ec:	4604      	mov	r4, r0
 80121ee:	460d      	mov	r5, r1
 80121f0:	b976      	cbnz	r6, 8012210 <_Balloc+0x28>
 80121f2:	2010      	movs	r0, #16
 80121f4:	f7ff fff0 	bl	80121d8 <malloc>
 80121f8:	4602      	mov	r2, r0
 80121fa:	6260      	str	r0, [r4, #36]	; 0x24
 80121fc:	b920      	cbnz	r0, 8012208 <_Balloc+0x20>
 80121fe:	4b18      	ldr	r3, [pc, #96]	; (8012260 <_Balloc+0x78>)
 8012200:	4818      	ldr	r0, [pc, #96]	; (8012264 <_Balloc+0x7c>)
 8012202:	2166      	movs	r1, #102	; 0x66
 8012204:	f7ff f9b8 	bl	8011578 <__assert_func>
 8012208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801220c:	6006      	str	r6, [r0, #0]
 801220e:	60c6      	str	r6, [r0, #12]
 8012210:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012212:	68f3      	ldr	r3, [r6, #12]
 8012214:	b183      	cbz	r3, 8012238 <_Balloc+0x50>
 8012216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012218:	68db      	ldr	r3, [r3, #12]
 801221a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801221e:	b9b8      	cbnz	r0, 8012250 <_Balloc+0x68>
 8012220:	2101      	movs	r1, #1
 8012222:	fa01 f605 	lsl.w	r6, r1, r5
 8012226:	1d72      	adds	r2, r6, #5
 8012228:	0092      	lsls	r2, r2, #2
 801222a:	4620      	mov	r0, r4
 801222c:	f000 fb60 	bl	80128f0 <_calloc_r>
 8012230:	b160      	cbz	r0, 801224c <_Balloc+0x64>
 8012232:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012236:	e00e      	b.n	8012256 <_Balloc+0x6e>
 8012238:	2221      	movs	r2, #33	; 0x21
 801223a:	2104      	movs	r1, #4
 801223c:	4620      	mov	r0, r4
 801223e:	f000 fb57 	bl	80128f0 <_calloc_r>
 8012242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012244:	60f0      	str	r0, [r6, #12]
 8012246:	68db      	ldr	r3, [r3, #12]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d1e4      	bne.n	8012216 <_Balloc+0x2e>
 801224c:	2000      	movs	r0, #0
 801224e:	bd70      	pop	{r4, r5, r6, pc}
 8012250:	6802      	ldr	r2, [r0, #0]
 8012252:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012256:	2300      	movs	r3, #0
 8012258:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801225c:	e7f7      	b.n	801224e <_Balloc+0x66>
 801225e:	bf00      	nop
 8012260:	0801df60 	.word	0x0801df60
 8012264:	0801e0e4 	.word	0x0801e0e4

08012268 <_Bfree>:
 8012268:	b570      	push	{r4, r5, r6, lr}
 801226a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801226c:	4605      	mov	r5, r0
 801226e:	460c      	mov	r4, r1
 8012270:	b976      	cbnz	r6, 8012290 <_Bfree+0x28>
 8012272:	2010      	movs	r0, #16
 8012274:	f7ff ffb0 	bl	80121d8 <malloc>
 8012278:	4602      	mov	r2, r0
 801227a:	6268      	str	r0, [r5, #36]	; 0x24
 801227c:	b920      	cbnz	r0, 8012288 <_Bfree+0x20>
 801227e:	4b09      	ldr	r3, [pc, #36]	; (80122a4 <_Bfree+0x3c>)
 8012280:	4809      	ldr	r0, [pc, #36]	; (80122a8 <_Bfree+0x40>)
 8012282:	218a      	movs	r1, #138	; 0x8a
 8012284:	f7ff f978 	bl	8011578 <__assert_func>
 8012288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801228c:	6006      	str	r6, [r0, #0]
 801228e:	60c6      	str	r6, [r0, #12]
 8012290:	b13c      	cbz	r4, 80122a2 <_Bfree+0x3a>
 8012292:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012294:	6862      	ldr	r2, [r4, #4]
 8012296:	68db      	ldr	r3, [r3, #12]
 8012298:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801229c:	6021      	str	r1, [r4, #0]
 801229e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80122a2:	bd70      	pop	{r4, r5, r6, pc}
 80122a4:	0801df60 	.word	0x0801df60
 80122a8:	0801e0e4 	.word	0x0801e0e4

080122ac <__multadd>:
 80122ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122b0:	690d      	ldr	r5, [r1, #16]
 80122b2:	4607      	mov	r7, r0
 80122b4:	460c      	mov	r4, r1
 80122b6:	461e      	mov	r6, r3
 80122b8:	f101 0c14 	add.w	ip, r1, #20
 80122bc:	2000      	movs	r0, #0
 80122be:	f8dc 3000 	ldr.w	r3, [ip]
 80122c2:	b299      	uxth	r1, r3
 80122c4:	fb02 6101 	mla	r1, r2, r1, r6
 80122c8:	0c1e      	lsrs	r6, r3, #16
 80122ca:	0c0b      	lsrs	r3, r1, #16
 80122cc:	fb02 3306 	mla	r3, r2, r6, r3
 80122d0:	b289      	uxth	r1, r1
 80122d2:	3001      	adds	r0, #1
 80122d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80122d8:	4285      	cmp	r5, r0
 80122da:	f84c 1b04 	str.w	r1, [ip], #4
 80122de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80122e2:	dcec      	bgt.n	80122be <__multadd+0x12>
 80122e4:	b30e      	cbz	r6, 801232a <__multadd+0x7e>
 80122e6:	68a3      	ldr	r3, [r4, #8]
 80122e8:	42ab      	cmp	r3, r5
 80122ea:	dc19      	bgt.n	8012320 <__multadd+0x74>
 80122ec:	6861      	ldr	r1, [r4, #4]
 80122ee:	4638      	mov	r0, r7
 80122f0:	3101      	adds	r1, #1
 80122f2:	f7ff ff79 	bl	80121e8 <_Balloc>
 80122f6:	4680      	mov	r8, r0
 80122f8:	b928      	cbnz	r0, 8012306 <__multadd+0x5a>
 80122fa:	4602      	mov	r2, r0
 80122fc:	4b0c      	ldr	r3, [pc, #48]	; (8012330 <__multadd+0x84>)
 80122fe:	480d      	ldr	r0, [pc, #52]	; (8012334 <__multadd+0x88>)
 8012300:	21b5      	movs	r1, #181	; 0xb5
 8012302:	f7ff f939 	bl	8011578 <__assert_func>
 8012306:	6922      	ldr	r2, [r4, #16]
 8012308:	3202      	adds	r2, #2
 801230a:	f104 010c 	add.w	r1, r4, #12
 801230e:	0092      	lsls	r2, r2, #2
 8012310:	300c      	adds	r0, #12
 8012312:	f7fe fb4b 	bl	80109ac <memcpy>
 8012316:	4621      	mov	r1, r4
 8012318:	4638      	mov	r0, r7
 801231a:	f7ff ffa5 	bl	8012268 <_Bfree>
 801231e:	4644      	mov	r4, r8
 8012320:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012324:	3501      	adds	r5, #1
 8012326:	615e      	str	r6, [r3, #20]
 8012328:	6125      	str	r5, [r4, #16]
 801232a:	4620      	mov	r0, r4
 801232c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012330:	0801e0d3 	.word	0x0801e0d3
 8012334:	0801e0e4 	.word	0x0801e0e4

08012338 <__hi0bits>:
 8012338:	0c03      	lsrs	r3, r0, #16
 801233a:	041b      	lsls	r3, r3, #16
 801233c:	b9d3      	cbnz	r3, 8012374 <__hi0bits+0x3c>
 801233e:	0400      	lsls	r0, r0, #16
 8012340:	2310      	movs	r3, #16
 8012342:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012346:	bf04      	itt	eq
 8012348:	0200      	lsleq	r0, r0, #8
 801234a:	3308      	addeq	r3, #8
 801234c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012350:	bf04      	itt	eq
 8012352:	0100      	lsleq	r0, r0, #4
 8012354:	3304      	addeq	r3, #4
 8012356:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801235a:	bf04      	itt	eq
 801235c:	0080      	lsleq	r0, r0, #2
 801235e:	3302      	addeq	r3, #2
 8012360:	2800      	cmp	r0, #0
 8012362:	db05      	blt.n	8012370 <__hi0bits+0x38>
 8012364:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012368:	f103 0301 	add.w	r3, r3, #1
 801236c:	bf08      	it	eq
 801236e:	2320      	moveq	r3, #32
 8012370:	4618      	mov	r0, r3
 8012372:	4770      	bx	lr
 8012374:	2300      	movs	r3, #0
 8012376:	e7e4      	b.n	8012342 <__hi0bits+0xa>

08012378 <__lo0bits>:
 8012378:	6803      	ldr	r3, [r0, #0]
 801237a:	f013 0207 	ands.w	r2, r3, #7
 801237e:	4601      	mov	r1, r0
 8012380:	d00b      	beq.n	801239a <__lo0bits+0x22>
 8012382:	07da      	lsls	r2, r3, #31
 8012384:	d423      	bmi.n	80123ce <__lo0bits+0x56>
 8012386:	0798      	lsls	r0, r3, #30
 8012388:	bf49      	itett	mi
 801238a:	085b      	lsrmi	r3, r3, #1
 801238c:	089b      	lsrpl	r3, r3, #2
 801238e:	2001      	movmi	r0, #1
 8012390:	600b      	strmi	r3, [r1, #0]
 8012392:	bf5c      	itt	pl
 8012394:	600b      	strpl	r3, [r1, #0]
 8012396:	2002      	movpl	r0, #2
 8012398:	4770      	bx	lr
 801239a:	b298      	uxth	r0, r3
 801239c:	b9a8      	cbnz	r0, 80123ca <__lo0bits+0x52>
 801239e:	0c1b      	lsrs	r3, r3, #16
 80123a0:	2010      	movs	r0, #16
 80123a2:	b2da      	uxtb	r2, r3
 80123a4:	b90a      	cbnz	r2, 80123aa <__lo0bits+0x32>
 80123a6:	3008      	adds	r0, #8
 80123a8:	0a1b      	lsrs	r3, r3, #8
 80123aa:	071a      	lsls	r2, r3, #28
 80123ac:	bf04      	itt	eq
 80123ae:	091b      	lsreq	r3, r3, #4
 80123b0:	3004      	addeq	r0, #4
 80123b2:	079a      	lsls	r2, r3, #30
 80123b4:	bf04      	itt	eq
 80123b6:	089b      	lsreq	r3, r3, #2
 80123b8:	3002      	addeq	r0, #2
 80123ba:	07da      	lsls	r2, r3, #31
 80123bc:	d403      	bmi.n	80123c6 <__lo0bits+0x4e>
 80123be:	085b      	lsrs	r3, r3, #1
 80123c0:	f100 0001 	add.w	r0, r0, #1
 80123c4:	d005      	beq.n	80123d2 <__lo0bits+0x5a>
 80123c6:	600b      	str	r3, [r1, #0]
 80123c8:	4770      	bx	lr
 80123ca:	4610      	mov	r0, r2
 80123cc:	e7e9      	b.n	80123a2 <__lo0bits+0x2a>
 80123ce:	2000      	movs	r0, #0
 80123d0:	4770      	bx	lr
 80123d2:	2020      	movs	r0, #32
 80123d4:	4770      	bx	lr
	...

080123d8 <__i2b>:
 80123d8:	b510      	push	{r4, lr}
 80123da:	460c      	mov	r4, r1
 80123dc:	2101      	movs	r1, #1
 80123de:	f7ff ff03 	bl	80121e8 <_Balloc>
 80123e2:	4602      	mov	r2, r0
 80123e4:	b928      	cbnz	r0, 80123f2 <__i2b+0x1a>
 80123e6:	4b05      	ldr	r3, [pc, #20]	; (80123fc <__i2b+0x24>)
 80123e8:	4805      	ldr	r0, [pc, #20]	; (8012400 <__i2b+0x28>)
 80123ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80123ee:	f7ff f8c3 	bl	8011578 <__assert_func>
 80123f2:	2301      	movs	r3, #1
 80123f4:	6144      	str	r4, [r0, #20]
 80123f6:	6103      	str	r3, [r0, #16]
 80123f8:	bd10      	pop	{r4, pc}
 80123fa:	bf00      	nop
 80123fc:	0801e0d3 	.word	0x0801e0d3
 8012400:	0801e0e4 	.word	0x0801e0e4

08012404 <__multiply>:
 8012404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012408:	4691      	mov	r9, r2
 801240a:	690a      	ldr	r2, [r1, #16]
 801240c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012410:	429a      	cmp	r2, r3
 8012412:	bfb8      	it	lt
 8012414:	460b      	movlt	r3, r1
 8012416:	460c      	mov	r4, r1
 8012418:	bfbc      	itt	lt
 801241a:	464c      	movlt	r4, r9
 801241c:	4699      	movlt	r9, r3
 801241e:	6927      	ldr	r7, [r4, #16]
 8012420:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012424:	68a3      	ldr	r3, [r4, #8]
 8012426:	6861      	ldr	r1, [r4, #4]
 8012428:	eb07 060a 	add.w	r6, r7, sl
 801242c:	42b3      	cmp	r3, r6
 801242e:	b085      	sub	sp, #20
 8012430:	bfb8      	it	lt
 8012432:	3101      	addlt	r1, #1
 8012434:	f7ff fed8 	bl	80121e8 <_Balloc>
 8012438:	b930      	cbnz	r0, 8012448 <__multiply+0x44>
 801243a:	4602      	mov	r2, r0
 801243c:	4b44      	ldr	r3, [pc, #272]	; (8012550 <__multiply+0x14c>)
 801243e:	4845      	ldr	r0, [pc, #276]	; (8012554 <__multiply+0x150>)
 8012440:	f240 115d 	movw	r1, #349	; 0x15d
 8012444:	f7ff f898 	bl	8011578 <__assert_func>
 8012448:	f100 0514 	add.w	r5, r0, #20
 801244c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012450:	462b      	mov	r3, r5
 8012452:	2200      	movs	r2, #0
 8012454:	4543      	cmp	r3, r8
 8012456:	d321      	bcc.n	801249c <__multiply+0x98>
 8012458:	f104 0314 	add.w	r3, r4, #20
 801245c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012460:	f109 0314 	add.w	r3, r9, #20
 8012464:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012468:	9202      	str	r2, [sp, #8]
 801246a:	1b3a      	subs	r2, r7, r4
 801246c:	3a15      	subs	r2, #21
 801246e:	f022 0203 	bic.w	r2, r2, #3
 8012472:	3204      	adds	r2, #4
 8012474:	f104 0115 	add.w	r1, r4, #21
 8012478:	428f      	cmp	r7, r1
 801247a:	bf38      	it	cc
 801247c:	2204      	movcc	r2, #4
 801247e:	9201      	str	r2, [sp, #4]
 8012480:	9a02      	ldr	r2, [sp, #8]
 8012482:	9303      	str	r3, [sp, #12]
 8012484:	429a      	cmp	r2, r3
 8012486:	d80c      	bhi.n	80124a2 <__multiply+0x9e>
 8012488:	2e00      	cmp	r6, #0
 801248a:	dd03      	ble.n	8012494 <__multiply+0x90>
 801248c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012490:	2b00      	cmp	r3, #0
 8012492:	d05a      	beq.n	801254a <__multiply+0x146>
 8012494:	6106      	str	r6, [r0, #16]
 8012496:	b005      	add	sp, #20
 8012498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801249c:	f843 2b04 	str.w	r2, [r3], #4
 80124a0:	e7d8      	b.n	8012454 <__multiply+0x50>
 80124a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80124a6:	f1ba 0f00 	cmp.w	sl, #0
 80124aa:	d024      	beq.n	80124f6 <__multiply+0xf2>
 80124ac:	f104 0e14 	add.w	lr, r4, #20
 80124b0:	46a9      	mov	r9, r5
 80124b2:	f04f 0c00 	mov.w	ip, #0
 80124b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80124ba:	f8d9 1000 	ldr.w	r1, [r9]
 80124be:	fa1f fb82 	uxth.w	fp, r2
 80124c2:	b289      	uxth	r1, r1
 80124c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80124c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80124cc:	f8d9 2000 	ldr.w	r2, [r9]
 80124d0:	4461      	add	r1, ip
 80124d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80124d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80124da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80124de:	b289      	uxth	r1, r1
 80124e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80124e4:	4577      	cmp	r7, lr
 80124e6:	f849 1b04 	str.w	r1, [r9], #4
 80124ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80124ee:	d8e2      	bhi.n	80124b6 <__multiply+0xb2>
 80124f0:	9a01      	ldr	r2, [sp, #4]
 80124f2:	f845 c002 	str.w	ip, [r5, r2]
 80124f6:	9a03      	ldr	r2, [sp, #12]
 80124f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80124fc:	3304      	adds	r3, #4
 80124fe:	f1b9 0f00 	cmp.w	r9, #0
 8012502:	d020      	beq.n	8012546 <__multiply+0x142>
 8012504:	6829      	ldr	r1, [r5, #0]
 8012506:	f104 0c14 	add.w	ip, r4, #20
 801250a:	46ae      	mov	lr, r5
 801250c:	f04f 0a00 	mov.w	sl, #0
 8012510:	f8bc b000 	ldrh.w	fp, [ip]
 8012514:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012518:	fb09 220b 	mla	r2, r9, fp, r2
 801251c:	4492      	add	sl, r2
 801251e:	b289      	uxth	r1, r1
 8012520:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012524:	f84e 1b04 	str.w	r1, [lr], #4
 8012528:	f85c 2b04 	ldr.w	r2, [ip], #4
 801252c:	f8be 1000 	ldrh.w	r1, [lr]
 8012530:	0c12      	lsrs	r2, r2, #16
 8012532:	fb09 1102 	mla	r1, r9, r2, r1
 8012536:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801253a:	4567      	cmp	r7, ip
 801253c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012540:	d8e6      	bhi.n	8012510 <__multiply+0x10c>
 8012542:	9a01      	ldr	r2, [sp, #4]
 8012544:	50a9      	str	r1, [r5, r2]
 8012546:	3504      	adds	r5, #4
 8012548:	e79a      	b.n	8012480 <__multiply+0x7c>
 801254a:	3e01      	subs	r6, #1
 801254c:	e79c      	b.n	8012488 <__multiply+0x84>
 801254e:	bf00      	nop
 8012550:	0801e0d3 	.word	0x0801e0d3
 8012554:	0801e0e4 	.word	0x0801e0e4

08012558 <__pow5mult>:
 8012558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801255c:	4615      	mov	r5, r2
 801255e:	f012 0203 	ands.w	r2, r2, #3
 8012562:	4606      	mov	r6, r0
 8012564:	460f      	mov	r7, r1
 8012566:	d007      	beq.n	8012578 <__pow5mult+0x20>
 8012568:	4c25      	ldr	r4, [pc, #148]	; (8012600 <__pow5mult+0xa8>)
 801256a:	3a01      	subs	r2, #1
 801256c:	2300      	movs	r3, #0
 801256e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012572:	f7ff fe9b 	bl	80122ac <__multadd>
 8012576:	4607      	mov	r7, r0
 8012578:	10ad      	asrs	r5, r5, #2
 801257a:	d03d      	beq.n	80125f8 <__pow5mult+0xa0>
 801257c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801257e:	b97c      	cbnz	r4, 80125a0 <__pow5mult+0x48>
 8012580:	2010      	movs	r0, #16
 8012582:	f7ff fe29 	bl	80121d8 <malloc>
 8012586:	4602      	mov	r2, r0
 8012588:	6270      	str	r0, [r6, #36]	; 0x24
 801258a:	b928      	cbnz	r0, 8012598 <__pow5mult+0x40>
 801258c:	4b1d      	ldr	r3, [pc, #116]	; (8012604 <__pow5mult+0xac>)
 801258e:	481e      	ldr	r0, [pc, #120]	; (8012608 <__pow5mult+0xb0>)
 8012590:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012594:	f7fe fff0 	bl	8011578 <__assert_func>
 8012598:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801259c:	6004      	str	r4, [r0, #0]
 801259e:	60c4      	str	r4, [r0, #12]
 80125a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80125a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80125a8:	b94c      	cbnz	r4, 80125be <__pow5mult+0x66>
 80125aa:	f240 2171 	movw	r1, #625	; 0x271
 80125ae:	4630      	mov	r0, r6
 80125b0:	f7ff ff12 	bl	80123d8 <__i2b>
 80125b4:	2300      	movs	r3, #0
 80125b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80125ba:	4604      	mov	r4, r0
 80125bc:	6003      	str	r3, [r0, #0]
 80125be:	f04f 0900 	mov.w	r9, #0
 80125c2:	07eb      	lsls	r3, r5, #31
 80125c4:	d50a      	bpl.n	80125dc <__pow5mult+0x84>
 80125c6:	4639      	mov	r1, r7
 80125c8:	4622      	mov	r2, r4
 80125ca:	4630      	mov	r0, r6
 80125cc:	f7ff ff1a 	bl	8012404 <__multiply>
 80125d0:	4639      	mov	r1, r7
 80125d2:	4680      	mov	r8, r0
 80125d4:	4630      	mov	r0, r6
 80125d6:	f7ff fe47 	bl	8012268 <_Bfree>
 80125da:	4647      	mov	r7, r8
 80125dc:	106d      	asrs	r5, r5, #1
 80125de:	d00b      	beq.n	80125f8 <__pow5mult+0xa0>
 80125e0:	6820      	ldr	r0, [r4, #0]
 80125e2:	b938      	cbnz	r0, 80125f4 <__pow5mult+0x9c>
 80125e4:	4622      	mov	r2, r4
 80125e6:	4621      	mov	r1, r4
 80125e8:	4630      	mov	r0, r6
 80125ea:	f7ff ff0b 	bl	8012404 <__multiply>
 80125ee:	6020      	str	r0, [r4, #0]
 80125f0:	f8c0 9000 	str.w	r9, [r0]
 80125f4:	4604      	mov	r4, r0
 80125f6:	e7e4      	b.n	80125c2 <__pow5mult+0x6a>
 80125f8:	4638      	mov	r0, r7
 80125fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125fe:	bf00      	nop
 8012600:	0801e230 	.word	0x0801e230
 8012604:	0801df60 	.word	0x0801df60
 8012608:	0801e0e4 	.word	0x0801e0e4

0801260c <__lshift>:
 801260c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012610:	460c      	mov	r4, r1
 8012612:	6849      	ldr	r1, [r1, #4]
 8012614:	6923      	ldr	r3, [r4, #16]
 8012616:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801261a:	68a3      	ldr	r3, [r4, #8]
 801261c:	4607      	mov	r7, r0
 801261e:	4691      	mov	r9, r2
 8012620:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012624:	f108 0601 	add.w	r6, r8, #1
 8012628:	42b3      	cmp	r3, r6
 801262a:	db0b      	blt.n	8012644 <__lshift+0x38>
 801262c:	4638      	mov	r0, r7
 801262e:	f7ff fddb 	bl	80121e8 <_Balloc>
 8012632:	4605      	mov	r5, r0
 8012634:	b948      	cbnz	r0, 801264a <__lshift+0x3e>
 8012636:	4602      	mov	r2, r0
 8012638:	4b2a      	ldr	r3, [pc, #168]	; (80126e4 <__lshift+0xd8>)
 801263a:	482b      	ldr	r0, [pc, #172]	; (80126e8 <__lshift+0xdc>)
 801263c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012640:	f7fe ff9a 	bl	8011578 <__assert_func>
 8012644:	3101      	adds	r1, #1
 8012646:	005b      	lsls	r3, r3, #1
 8012648:	e7ee      	b.n	8012628 <__lshift+0x1c>
 801264a:	2300      	movs	r3, #0
 801264c:	f100 0114 	add.w	r1, r0, #20
 8012650:	f100 0210 	add.w	r2, r0, #16
 8012654:	4618      	mov	r0, r3
 8012656:	4553      	cmp	r3, sl
 8012658:	db37      	blt.n	80126ca <__lshift+0xbe>
 801265a:	6920      	ldr	r0, [r4, #16]
 801265c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012660:	f104 0314 	add.w	r3, r4, #20
 8012664:	f019 091f 	ands.w	r9, r9, #31
 8012668:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801266c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012670:	d02f      	beq.n	80126d2 <__lshift+0xc6>
 8012672:	f1c9 0e20 	rsb	lr, r9, #32
 8012676:	468a      	mov	sl, r1
 8012678:	f04f 0c00 	mov.w	ip, #0
 801267c:	681a      	ldr	r2, [r3, #0]
 801267e:	fa02 f209 	lsl.w	r2, r2, r9
 8012682:	ea42 020c 	orr.w	r2, r2, ip
 8012686:	f84a 2b04 	str.w	r2, [sl], #4
 801268a:	f853 2b04 	ldr.w	r2, [r3], #4
 801268e:	4298      	cmp	r0, r3
 8012690:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012694:	d8f2      	bhi.n	801267c <__lshift+0x70>
 8012696:	1b03      	subs	r3, r0, r4
 8012698:	3b15      	subs	r3, #21
 801269a:	f023 0303 	bic.w	r3, r3, #3
 801269e:	3304      	adds	r3, #4
 80126a0:	f104 0215 	add.w	r2, r4, #21
 80126a4:	4290      	cmp	r0, r2
 80126a6:	bf38      	it	cc
 80126a8:	2304      	movcc	r3, #4
 80126aa:	f841 c003 	str.w	ip, [r1, r3]
 80126ae:	f1bc 0f00 	cmp.w	ip, #0
 80126b2:	d001      	beq.n	80126b8 <__lshift+0xac>
 80126b4:	f108 0602 	add.w	r6, r8, #2
 80126b8:	3e01      	subs	r6, #1
 80126ba:	4638      	mov	r0, r7
 80126bc:	612e      	str	r6, [r5, #16]
 80126be:	4621      	mov	r1, r4
 80126c0:	f7ff fdd2 	bl	8012268 <_Bfree>
 80126c4:	4628      	mov	r0, r5
 80126c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80126ce:	3301      	adds	r3, #1
 80126d0:	e7c1      	b.n	8012656 <__lshift+0x4a>
 80126d2:	3904      	subs	r1, #4
 80126d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80126d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80126dc:	4298      	cmp	r0, r3
 80126de:	d8f9      	bhi.n	80126d4 <__lshift+0xc8>
 80126e0:	e7ea      	b.n	80126b8 <__lshift+0xac>
 80126e2:	bf00      	nop
 80126e4:	0801e0d3 	.word	0x0801e0d3
 80126e8:	0801e0e4 	.word	0x0801e0e4

080126ec <__mcmp>:
 80126ec:	b530      	push	{r4, r5, lr}
 80126ee:	6902      	ldr	r2, [r0, #16]
 80126f0:	690c      	ldr	r4, [r1, #16]
 80126f2:	1b12      	subs	r2, r2, r4
 80126f4:	d10e      	bne.n	8012714 <__mcmp+0x28>
 80126f6:	f100 0314 	add.w	r3, r0, #20
 80126fa:	3114      	adds	r1, #20
 80126fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012700:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012704:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012708:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801270c:	42a5      	cmp	r5, r4
 801270e:	d003      	beq.n	8012718 <__mcmp+0x2c>
 8012710:	d305      	bcc.n	801271e <__mcmp+0x32>
 8012712:	2201      	movs	r2, #1
 8012714:	4610      	mov	r0, r2
 8012716:	bd30      	pop	{r4, r5, pc}
 8012718:	4283      	cmp	r3, r0
 801271a:	d3f3      	bcc.n	8012704 <__mcmp+0x18>
 801271c:	e7fa      	b.n	8012714 <__mcmp+0x28>
 801271e:	f04f 32ff 	mov.w	r2, #4294967295
 8012722:	e7f7      	b.n	8012714 <__mcmp+0x28>

08012724 <__mdiff>:
 8012724:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012728:	460c      	mov	r4, r1
 801272a:	4606      	mov	r6, r0
 801272c:	4611      	mov	r1, r2
 801272e:	4620      	mov	r0, r4
 8012730:	4690      	mov	r8, r2
 8012732:	f7ff ffdb 	bl	80126ec <__mcmp>
 8012736:	1e05      	subs	r5, r0, #0
 8012738:	d110      	bne.n	801275c <__mdiff+0x38>
 801273a:	4629      	mov	r1, r5
 801273c:	4630      	mov	r0, r6
 801273e:	f7ff fd53 	bl	80121e8 <_Balloc>
 8012742:	b930      	cbnz	r0, 8012752 <__mdiff+0x2e>
 8012744:	4b3a      	ldr	r3, [pc, #232]	; (8012830 <__mdiff+0x10c>)
 8012746:	4602      	mov	r2, r0
 8012748:	f240 2132 	movw	r1, #562	; 0x232
 801274c:	4839      	ldr	r0, [pc, #228]	; (8012834 <__mdiff+0x110>)
 801274e:	f7fe ff13 	bl	8011578 <__assert_func>
 8012752:	2301      	movs	r3, #1
 8012754:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012758:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801275c:	bfa4      	itt	ge
 801275e:	4643      	movge	r3, r8
 8012760:	46a0      	movge	r8, r4
 8012762:	4630      	mov	r0, r6
 8012764:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012768:	bfa6      	itte	ge
 801276a:	461c      	movge	r4, r3
 801276c:	2500      	movge	r5, #0
 801276e:	2501      	movlt	r5, #1
 8012770:	f7ff fd3a 	bl	80121e8 <_Balloc>
 8012774:	b920      	cbnz	r0, 8012780 <__mdiff+0x5c>
 8012776:	4b2e      	ldr	r3, [pc, #184]	; (8012830 <__mdiff+0x10c>)
 8012778:	4602      	mov	r2, r0
 801277a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801277e:	e7e5      	b.n	801274c <__mdiff+0x28>
 8012780:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012784:	6926      	ldr	r6, [r4, #16]
 8012786:	60c5      	str	r5, [r0, #12]
 8012788:	f104 0914 	add.w	r9, r4, #20
 801278c:	f108 0514 	add.w	r5, r8, #20
 8012790:	f100 0e14 	add.w	lr, r0, #20
 8012794:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012798:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801279c:	f108 0210 	add.w	r2, r8, #16
 80127a0:	46f2      	mov	sl, lr
 80127a2:	2100      	movs	r1, #0
 80127a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80127a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80127ac:	fa1f f883 	uxth.w	r8, r3
 80127b0:	fa11 f18b 	uxtah	r1, r1, fp
 80127b4:	0c1b      	lsrs	r3, r3, #16
 80127b6:	eba1 0808 	sub.w	r8, r1, r8
 80127ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80127be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80127c2:	fa1f f888 	uxth.w	r8, r8
 80127c6:	1419      	asrs	r1, r3, #16
 80127c8:	454e      	cmp	r6, r9
 80127ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80127ce:	f84a 3b04 	str.w	r3, [sl], #4
 80127d2:	d8e7      	bhi.n	80127a4 <__mdiff+0x80>
 80127d4:	1b33      	subs	r3, r6, r4
 80127d6:	3b15      	subs	r3, #21
 80127d8:	f023 0303 	bic.w	r3, r3, #3
 80127dc:	3304      	adds	r3, #4
 80127de:	3415      	adds	r4, #21
 80127e0:	42a6      	cmp	r6, r4
 80127e2:	bf38      	it	cc
 80127e4:	2304      	movcc	r3, #4
 80127e6:	441d      	add	r5, r3
 80127e8:	4473      	add	r3, lr
 80127ea:	469e      	mov	lr, r3
 80127ec:	462e      	mov	r6, r5
 80127ee:	4566      	cmp	r6, ip
 80127f0:	d30e      	bcc.n	8012810 <__mdiff+0xec>
 80127f2:	f10c 0203 	add.w	r2, ip, #3
 80127f6:	1b52      	subs	r2, r2, r5
 80127f8:	f022 0203 	bic.w	r2, r2, #3
 80127fc:	3d03      	subs	r5, #3
 80127fe:	45ac      	cmp	ip, r5
 8012800:	bf38      	it	cc
 8012802:	2200      	movcc	r2, #0
 8012804:	441a      	add	r2, r3
 8012806:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801280a:	b17b      	cbz	r3, 801282c <__mdiff+0x108>
 801280c:	6107      	str	r7, [r0, #16]
 801280e:	e7a3      	b.n	8012758 <__mdiff+0x34>
 8012810:	f856 8b04 	ldr.w	r8, [r6], #4
 8012814:	fa11 f288 	uxtah	r2, r1, r8
 8012818:	1414      	asrs	r4, r2, #16
 801281a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801281e:	b292      	uxth	r2, r2
 8012820:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012824:	f84e 2b04 	str.w	r2, [lr], #4
 8012828:	1421      	asrs	r1, r4, #16
 801282a:	e7e0      	b.n	80127ee <__mdiff+0xca>
 801282c:	3f01      	subs	r7, #1
 801282e:	e7ea      	b.n	8012806 <__mdiff+0xe2>
 8012830:	0801e0d3 	.word	0x0801e0d3
 8012834:	0801e0e4 	.word	0x0801e0e4

08012838 <__d2b>:
 8012838:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801283c:	4689      	mov	r9, r1
 801283e:	2101      	movs	r1, #1
 8012840:	ec57 6b10 	vmov	r6, r7, d0
 8012844:	4690      	mov	r8, r2
 8012846:	f7ff fccf 	bl	80121e8 <_Balloc>
 801284a:	4604      	mov	r4, r0
 801284c:	b930      	cbnz	r0, 801285c <__d2b+0x24>
 801284e:	4602      	mov	r2, r0
 8012850:	4b25      	ldr	r3, [pc, #148]	; (80128e8 <__d2b+0xb0>)
 8012852:	4826      	ldr	r0, [pc, #152]	; (80128ec <__d2b+0xb4>)
 8012854:	f240 310a 	movw	r1, #778	; 0x30a
 8012858:	f7fe fe8e 	bl	8011578 <__assert_func>
 801285c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012860:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012864:	bb35      	cbnz	r5, 80128b4 <__d2b+0x7c>
 8012866:	2e00      	cmp	r6, #0
 8012868:	9301      	str	r3, [sp, #4]
 801286a:	d028      	beq.n	80128be <__d2b+0x86>
 801286c:	4668      	mov	r0, sp
 801286e:	9600      	str	r6, [sp, #0]
 8012870:	f7ff fd82 	bl	8012378 <__lo0bits>
 8012874:	9900      	ldr	r1, [sp, #0]
 8012876:	b300      	cbz	r0, 80128ba <__d2b+0x82>
 8012878:	9a01      	ldr	r2, [sp, #4]
 801287a:	f1c0 0320 	rsb	r3, r0, #32
 801287e:	fa02 f303 	lsl.w	r3, r2, r3
 8012882:	430b      	orrs	r3, r1
 8012884:	40c2      	lsrs	r2, r0
 8012886:	6163      	str	r3, [r4, #20]
 8012888:	9201      	str	r2, [sp, #4]
 801288a:	9b01      	ldr	r3, [sp, #4]
 801288c:	61a3      	str	r3, [r4, #24]
 801288e:	2b00      	cmp	r3, #0
 8012890:	bf14      	ite	ne
 8012892:	2202      	movne	r2, #2
 8012894:	2201      	moveq	r2, #1
 8012896:	6122      	str	r2, [r4, #16]
 8012898:	b1d5      	cbz	r5, 80128d0 <__d2b+0x98>
 801289a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801289e:	4405      	add	r5, r0
 80128a0:	f8c9 5000 	str.w	r5, [r9]
 80128a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80128a8:	f8c8 0000 	str.w	r0, [r8]
 80128ac:	4620      	mov	r0, r4
 80128ae:	b003      	add	sp, #12
 80128b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80128b8:	e7d5      	b.n	8012866 <__d2b+0x2e>
 80128ba:	6161      	str	r1, [r4, #20]
 80128bc:	e7e5      	b.n	801288a <__d2b+0x52>
 80128be:	a801      	add	r0, sp, #4
 80128c0:	f7ff fd5a 	bl	8012378 <__lo0bits>
 80128c4:	9b01      	ldr	r3, [sp, #4]
 80128c6:	6163      	str	r3, [r4, #20]
 80128c8:	2201      	movs	r2, #1
 80128ca:	6122      	str	r2, [r4, #16]
 80128cc:	3020      	adds	r0, #32
 80128ce:	e7e3      	b.n	8012898 <__d2b+0x60>
 80128d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80128d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80128d8:	f8c9 0000 	str.w	r0, [r9]
 80128dc:	6918      	ldr	r0, [r3, #16]
 80128de:	f7ff fd2b 	bl	8012338 <__hi0bits>
 80128e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80128e6:	e7df      	b.n	80128a8 <__d2b+0x70>
 80128e8:	0801e0d3 	.word	0x0801e0d3
 80128ec:	0801e0e4 	.word	0x0801e0e4

080128f0 <_calloc_r>:
 80128f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80128f2:	fba1 2402 	umull	r2, r4, r1, r2
 80128f6:	b94c      	cbnz	r4, 801290c <_calloc_r+0x1c>
 80128f8:	4611      	mov	r1, r2
 80128fa:	9201      	str	r2, [sp, #4]
 80128fc:	f000 f87a 	bl	80129f4 <_malloc_r>
 8012900:	9a01      	ldr	r2, [sp, #4]
 8012902:	4605      	mov	r5, r0
 8012904:	b930      	cbnz	r0, 8012914 <_calloc_r+0x24>
 8012906:	4628      	mov	r0, r5
 8012908:	b003      	add	sp, #12
 801290a:	bd30      	pop	{r4, r5, pc}
 801290c:	220c      	movs	r2, #12
 801290e:	6002      	str	r2, [r0, #0]
 8012910:	2500      	movs	r5, #0
 8012912:	e7f8      	b.n	8012906 <_calloc_r+0x16>
 8012914:	4621      	mov	r1, r4
 8012916:	f7fe f857 	bl	80109c8 <memset>
 801291a:	e7f4      	b.n	8012906 <_calloc_r+0x16>

0801291c <_free_r>:
 801291c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801291e:	2900      	cmp	r1, #0
 8012920:	d044      	beq.n	80129ac <_free_r+0x90>
 8012922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012926:	9001      	str	r0, [sp, #4]
 8012928:	2b00      	cmp	r3, #0
 801292a:	f1a1 0404 	sub.w	r4, r1, #4
 801292e:	bfb8      	it	lt
 8012930:	18e4      	addlt	r4, r4, r3
 8012932:	f000 fead 	bl	8013690 <__malloc_lock>
 8012936:	4a1e      	ldr	r2, [pc, #120]	; (80129b0 <_free_r+0x94>)
 8012938:	9801      	ldr	r0, [sp, #4]
 801293a:	6813      	ldr	r3, [r2, #0]
 801293c:	b933      	cbnz	r3, 801294c <_free_r+0x30>
 801293e:	6063      	str	r3, [r4, #4]
 8012940:	6014      	str	r4, [r2, #0]
 8012942:	b003      	add	sp, #12
 8012944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012948:	f000 bea8 	b.w	801369c <__malloc_unlock>
 801294c:	42a3      	cmp	r3, r4
 801294e:	d908      	bls.n	8012962 <_free_r+0x46>
 8012950:	6825      	ldr	r5, [r4, #0]
 8012952:	1961      	adds	r1, r4, r5
 8012954:	428b      	cmp	r3, r1
 8012956:	bf01      	itttt	eq
 8012958:	6819      	ldreq	r1, [r3, #0]
 801295a:	685b      	ldreq	r3, [r3, #4]
 801295c:	1949      	addeq	r1, r1, r5
 801295e:	6021      	streq	r1, [r4, #0]
 8012960:	e7ed      	b.n	801293e <_free_r+0x22>
 8012962:	461a      	mov	r2, r3
 8012964:	685b      	ldr	r3, [r3, #4]
 8012966:	b10b      	cbz	r3, 801296c <_free_r+0x50>
 8012968:	42a3      	cmp	r3, r4
 801296a:	d9fa      	bls.n	8012962 <_free_r+0x46>
 801296c:	6811      	ldr	r1, [r2, #0]
 801296e:	1855      	adds	r5, r2, r1
 8012970:	42a5      	cmp	r5, r4
 8012972:	d10b      	bne.n	801298c <_free_r+0x70>
 8012974:	6824      	ldr	r4, [r4, #0]
 8012976:	4421      	add	r1, r4
 8012978:	1854      	adds	r4, r2, r1
 801297a:	42a3      	cmp	r3, r4
 801297c:	6011      	str	r1, [r2, #0]
 801297e:	d1e0      	bne.n	8012942 <_free_r+0x26>
 8012980:	681c      	ldr	r4, [r3, #0]
 8012982:	685b      	ldr	r3, [r3, #4]
 8012984:	6053      	str	r3, [r2, #4]
 8012986:	4421      	add	r1, r4
 8012988:	6011      	str	r1, [r2, #0]
 801298a:	e7da      	b.n	8012942 <_free_r+0x26>
 801298c:	d902      	bls.n	8012994 <_free_r+0x78>
 801298e:	230c      	movs	r3, #12
 8012990:	6003      	str	r3, [r0, #0]
 8012992:	e7d6      	b.n	8012942 <_free_r+0x26>
 8012994:	6825      	ldr	r5, [r4, #0]
 8012996:	1961      	adds	r1, r4, r5
 8012998:	428b      	cmp	r3, r1
 801299a:	bf04      	itt	eq
 801299c:	6819      	ldreq	r1, [r3, #0]
 801299e:	685b      	ldreq	r3, [r3, #4]
 80129a0:	6063      	str	r3, [r4, #4]
 80129a2:	bf04      	itt	eq
 80129a4:	1949      	addeq	r1, r1, r5
 80129a6:	6021      	streq	r1, [r4, #0]
 80129a8:	6054      	str	r4, [r2, #4]
 80129aa:	e7ca      	b.n	8012942 <_free_r+0x26>
 80129ac:	b003      	add	sp, #12
 80129ae:	bd30      	pop	{r4, r5, pc}
 80129b0:	2400eef8 	.word	0x2400eef8

080129b4 <sbrk_aligned>:
 80129b4:	b570      	push	{r4, r5, r6, lr}
 80129b6:	4e0e      	ldr	r6, [pc, #56]	; (80129f0 <sbrk_aligned+0x3c>)
 80129b8:	460c      	mov	r4, r1
 80129ba:	6831      	ldr	r1, [r6, #0]
 80129bc:	4605      	mov	r5, r0
 80129be:	b911      	cbnz	r1, 80129c6 <sbrk_aligned+0x12>
 80129c0:	f000 fb42 	bl	8013048 <_sbrk_r>
 80129c4:	6030      	str	r0, [r6, #0]
 80129c6:	4621      	mov	r1, r4
 80129c8:	4628      	mov	r0, r5
 80129ca:	f000 fb3d 	bl	8013048 <_sbrk_r>
 80129ce:	1c43      	adds	r3, r0, #1
 80129d0:	d00a      	beq.n	80129e8 <sbrk_aligned+0x34>
 80129d2:	1cc4      	adds	r4, r0, #3
 80129d4:	f024 0403 	bic.w	r4, r4, #3
 80129d8:	42a0      	cmp	r0, r4
 80129da:	d007      	beq.n	80129ec <sbrk_aligned+0x38>
 80129dc:	1a21      	subs	r1, r4, r0
 80129de:	4628      	mov	r0, r5
 80129e0:	f000 fb32 	bl	8013048 <_sbrk_r>
 80129e4:	3001      	adds	r0, #1
 80129e6:	d101      	bne.n	80129ec <sbrk_aligned+0x38>
 80129e8:	f04f 34ff 	mov.w	r4, #4294967295
 80129ec:	4620      	mov	r0, r4
 80129ee:	bd70      	pop	{r4, r5, r6, pc}
 80129f0:	2400eefc 	.word	0x2400eefc

080129f4 <_malloc_r>:
 80129f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129f8:	1ccd      	adds	r5, r1, #3
 80129fa:	f025 0503 	bic.w	r5, r5, #3
 80129fe:	3508      	adds	r5, #8
 8012a00:	2d0c      	cmp	r5, #12
 8012a02:	bf38      	it	cc
 8012a04:	250c      	movcc	r5, #12
 8012a06:	2d00      	cmp	r5, #0
 8012a08:	4607      	mov	r7, r0
 8012a0a:	db01      	blt.n	8012a10 <_malloc_r+0x1c>
 8012a0c:	42a9      	cmp	r1, r5
 8012a0e:	d905      	bls.n	8012a1c <_malloc_r+0x28>
 8012a10:	230c      	movs	r3, #12
 8012a12:	603b      	str	r3, [r7, #0]
 8012a14:	2600      	movs	r6, #0
 8012a16:	4630      	mov	r0, r6
 8012a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a1c:	4e2e      	ldr	r6, [pc, #184]	; (8012ad8 <_malloc_r+0xe4>)
 8012a1e:	f000 fe37 	bl	8013690 <__malloc_lock>
 8012a22:	6833      	ldr	r3, [r6, #0]
 8012a24:	461c      	mov	r4, r3
 8012a26:	bb34      	cbnz	r4, 8012a76 <_malloc_r+0x82>
 8012a28:	4629      	mov	r1, r5
 8012a2a:	4638      	mov	r0, r7
 8012a2c:	f7ff ffc2 	bl	80129b4 <sbrk_aligned>
 8012a30:	1c43      	adds	r3, r0, #1
 8012a32:	4604      	mov	r4, r0
 8012a34:	d14d      	bne.n	8012ad2 <_malloc_r+0xde>
 8012a36:	6834      	ldr	r4, [r6, #0]
 8012a38:	4626      	mov	r6, r4
 8012a3a:	2e00      	cmp	r6, #0
 8012a3c:	d140      	bne.n	8012ac0 <_malloc_r+0xcc>
 8012a3e:	6823      	ldr	r3, [r4, #0]
 8012a40:	4631      	mov	r1, r6
 8012a42:	4638      	mov	r0, r7
 8012a44:	eb04 0803 	add.w	r8, r4, r3
 8012a48:	f000 fafe 	bl	8013048 <_sbrk_r>
 8012a4c:	4580      	cmp	r8, r0
 8012a4e:	d13a      	bne.n	8012ac6 <_malloc_r+0xd2>
 8012a50:	6821      	ldr	r1, [r4, #0]
 8012a52:	3503      	adds	r5, #3
 8012a54:	1a6d      	subs	r5, r5, r1
 8012a56:	f025 0503 	bic.w	r5, r5, #3
 8012a5a:	3508      	adds	r5, #8
 8012a5c:	2d0c      	cmp	r5, #12
 8012a5e:	bf38      	it	cc
 8012a60:	250c      	movcc	r5, #12
 8012a62:	4629      	mov	r1, r5
 8012a64:	4638      	mov	r0, r7
 8012a66:	f7ff ffa5 	bl	80129b4 <sbrk_aligned>
 8012a6a:	3001      	adds	r0, #1
 8012a6c:	d02b      	beq.n	8012ac6 <_malloc_r+0xd2>
 8012a6e:	6823      	ldr	r3, [r4, #0]
 8012a70:	442b      	add	r3, r5
 8012a72:	6023      	str	r3, [r4, #0]
 8012a74:	e00e      	b.n	8012a94 <_malloc_r+0xa0>
 8012a76:	6822      	ldr	r2, [r4, #0]
 8012a78:	1b52      	subs	r2, r2, r5
 8012a7a:	d41e      	bmi.n	8012aba <_malloc_r+0xc6>
 8012a7c:	2a0b      	cmp	r2, #11
 8012a7e:	d916      	bls.n	8012aae <_malloc_r+0xba>
 8012a80:	1961      	adds	r1, r4, r5
 8012a82:	42a3      	cmp	r3, r4
 8012a84:	6025      	str	r5, [r4, #0]
 8012a86:	bf18      	it	ne
 8012a88:	6059      	strne	r1, [r3, #4]
 8012a8a:	6863      	ldr	r3, [r4, #4]
 8012a8c:	bf08      	it	eq
 8012a8e:	6031      	streq	r1, [r6, #0]
 8012a90:	5162      	str	r2, [r4, r5]
 8012a92:	604b      	str	r3, [r1, #4]
 8012a94:	4638      	mov	r0, r7
 8012a96:	f104 060b 	add.w	r6, r4, #11
 8012a9a:	f000 fdff 	bl	801369c <__malloc_unlock>
 8012a9e:	f026 0607 	bic.w	r6, r6, #7
 8012aa2:	1d23      	adds	r3, r4, #4
 8012aa4:	1af2      	subs	r2, r6, r3
 8012aa6:	d0b6      	beq.n	8012a16 <_malloc_r+0x22>
 8012aa8:	1b9b      	subs	r3, r3, r6
 8012aaa:	50a3      	str	r3, [r4, r2]
 8012aac:	e7b3      	b.n	8012a16 <_malloc_r+0x22>
 8012aae:	6862      	ldr	r2, [r4, #4]
 8012ab0:	42a3      	cmp	r3, r4
 8012ab2:	bf0c      	ite	eq
 8012ab4:	6032      	streq	r2, [r6, #0]
 8012ab6:	605a      	strne	r2, [r3, #4]
 8012ab8:	e7ec      	b.n	8012a94 <_malloc_r+0xa0>
 8012aba:	4623      	mov	r3, r4
 8012abc:	6864      	ldr	r4, [r4, #4]
 8012abe:	e7b2      	b.n	8012a26 <_malloc_r+0x32>
 8012ac0:	4634      	mov	r4, r6
 8012ac2:	6876      	ldr	r6, [r6, #4]
 8012ac4:	e7b9      	b.n	8012a3a <_malloc_r+0x46>
 8012ac6:	230c      	movs	r3, #12
 8012ac8:	603b      	str	r3, [r7, #0]
 8012aca:	4638      	mov	r0, r7
 8012acc:	f000 fde6 	bl	801369c <__malloc_unlock>
 8012ad0:	e7a1      	b.n	8012a16 <_malloc_r+0x22>
 8012ad2:	6025      	str	r5, [r4, #0]
 8012ad4:	e7de      	b.n	8012a94 <_malloc_r+0xa0>
 8012ad6:	bf00      	nop
 8012ad8:	2400eef8 	.word	0x2400eef8

08012adc <__ssputs_r>:
 8012adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ae0:	688e      	ldr	r6, [r1, #8]
 8012ae2:	429e      	cmp	r6, r3
 8012ae4:	4682      	mov	sl, r0
 8012ae6:	460c      	mov	r4, r1
 8012ae8:	4690      	mov	r8, r2
 8012aea:	461f      	mov	r7, r3
 8012aec:	d838      	bhi.n	8012b60 <__ssputs_r+0x84>
 8012aee:	898a      	ldrh	r2, [r1, #12]
 8012af0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012af4:	d032      	beq.n	8012b5c <__ssputs_r+0x80>
 8012af6:	6825      	ldr	r5, [r4, #0]
 8012af8:	6909      	ldr	r1, [r1, #16]
 8012afa:	eba5 0901 	sub.w	r9, r5, r1
 8012afe:	6965      	ldr	r5, [r4, #20]
 8012b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012b08:	3301      	adds	r3, #1
 8012b0a:	444b      	add	r3, r9
 8012b0c:	106d      	asrs	r5, r5, #1
 8012b0e:	429d      	cmp	r5, r3
 8012b10:	bf38      	it	cc
 8012b12:	461d      	movcc	r5, r3
 8012b14:	0553      	lsls	r3, r2, #21
 8012b16:	d531      	bpl.n	8012b7c <__ssputs_r+0xa0>
 8012b18:	4629      	mov	r1, r5
 8012b1a:	f7ff ff6b 	bl	80129f4 <_malloc_r>
 8012b1e:	4606      	mov	r6, r0
 8012b20:	b950      	cbnz	r0, 8012b38 <__ssputs_r+0x5c>
 8012b22:	230c      	movs	r3, #12
 8012b24:	f8ca 3000 	str.w	r3, [sl]
 8012b28:	89a3      	ldrh	r3, [r4, #12]
 8012b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b2e:	81a3      	strh	r3, [r4, #12]
 8012b30:	f04f 30ff 	mov.w	r0, #4294967295
 8012b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b38:	6921      	ldr	r1, [r4, #16]
 8012b3a:	464a      	mov	r2, r9
 8012b3c:	f7fd ff36 	bl	80109ac <memcpy>
 8012b40:	89a3      	ldrh	r3, [r4, #12]
 8012b42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b4a:	81a3      	strh	r3, [r4, #12]
 8012b4c:	6126      	str	r6, [r4, #16]
 8012b4e:	6165      	str	r5, [r4, #20]
 8012b50:	444e      	add	r6, r9
 8012b52:	eba5 0509 	sub.w	r5, r5, r9
 8012b56:	6026      	str	r6, [r4, #0]
 8012b58:	60a5      	str	r5, [r4, #8]
 8012b5a:	463e      	mov	r6, r7
 8012b5c:	42be      	cmp	r6, r7
 8012b5e:	d900      	bls.n	8012b62 <__ssputs_r+0x86>
 8012b60:	463e      	mov	r6, r7
 8012b62:	6820      	ldr	r0, [r4, #0]
 8012b64:	4632      	mov	r2, r6
 8012b66:	4641      	mov	r1, r8
 8012b68:	f000 fd78 	bl	801365c <memmove>
 8012b6c:	68a3      	ldr	r3, [r4, #8]
 8012b6e:	1b9b      	subs	r3, r3, r6
 8012b70:	60a3      	str	r3, [r4, #8]
 8012b72:	6823      	ldr	r3, [r4, #0]
 8012b74:	4433      	add	r3, r6
 8012b76:	6023      	str	r3, [r4, #0]
 8012b78:	2000      	movs	r0, #0
 8012b7a:	e7db      	b.n	8012b34 <__ssputs_r+0x58>
 8012b7c:	462a      	mov	r2, r5
 8012b7e:	f000 fd93 	bl	80136a8 <_realloc_r>
 8012b82:	4606      	mov	r6, r0
 8012b84:	2800      	cmp	r0, #0
 8012b86:	d1e1      	bne.n	8012b4c <__ssputs_r+0x70>
 8012b88:	6921      	ldr	r1, [r4, #16]
 8012b8a:	4650      	mov	r0, sl
 8012b8c:	f7ff fec6 	bl	801291c <_free_r>
 8012b90:	e7c7      	b.n	8012b22 <__ssputs_r+0x46>
	...

08012b94 <_svfiprintf_r>:
 8012b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b98:	4698      	mov	r8, r3
 8012b9a:	898b      	ldrh	r3, [r1, #12]
 8012b9c:	061b      	lsls	r3, r3, #24
 8012b9e:	b09d      	sub	sp, #116	; 0x74
 8012ba0:	4607      	mov	r7, r0
 8012ba2:	460d      	mov	r5, r1
 8012ba4:	4614      	mov	r4, r2
 8012ba6:	d50e      	bpl.n	8012bc6 <_svfiprintf_r+0x32>
 8012ba8:	690b      	ldr	r3, [r1, #16]
 8012baa:	b963      	cbnz	r3, 8012bc6 <_svfiprintf_r+0x32>
 8012bac:	2140      	movs	r1, #64	; 0x40
 8012bae:	f7ff ff21 	bl	80129f4 <_malloc_r>
 8012bb2:	6028      	str	r0, [r5, #0]
 8012bb4:	6128      	str	r0, [r5, #16]
 8012bb6:	b920      	cbnz	r0, 8012bc2 <_svfiprintf_r+0x2e>
 8012bb8:	230c      	movs	r3, #12
 8012bba:	603b      	str	r3, [r7, #0]
 8012bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8012bc0:	e0d1      	b.n	8012d66 <_svfiprintf_r+0x1d2>
 8012bc2:	2340      	movs	r3, #64	; 0x40
 8012bc4:	616b      	str	r3, [r5, #20]
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8012bca:	2320      	movs	r3, #32
 8012bcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012bd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8012bd4:	2330      	movs	r3, #48	; 0x30
 8012bd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012d80 <_svfiprintf_r+0x1ec>
 8012bda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012bde:	f04f 0901 	mov.w	r9, #1
 8012be2:	4623      	mov	r3, r4
 8012be4:	469a      	mov	sl, r3
 8012be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012bea:	b10a      	cbz	r2, 8012bf0 <_svfiprintf_r+0x5c>
 8012bec:	2a25      	cmp	r2, #37	; 0x25
 8012bee:	d1f9      	bne.n	8012be4 <_svfiprintf_r+0x50>
 8012bf0:	ebba 0b04 	subs.w	fp, sl, r4
 8012bf4:	d00b      	beq.n	8012c0e <_svfiprintf_r+0x7a>
 8012bf6:	465b      	mov	r3, fp
 8012bf8:	4622      	mov	r2, r4
 8012bfa:	4629      	mov	r1, r5
 8012bfc:	4638      	mov	r0, r7
 8012bfe:	f7ff ff6d 	bl	8012adc <__ssputs_r>
 8012c02:	3001      	adds	r0, #1
 8012c04:	f000 80aa 	beq.w	8012d5c <_svfiprintf_r+0x1c8>
 8012c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c0a:	445a      	add	r2, fp
 8012c0c:	9209      	str	r2, [sp, #36]	; 0x24
 8012c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	f000 80a2 	beq.w	8012d5c <_svfiprintf_r+0x1c8>
 8012c18:	2300      	movs	r3, #0
 8012c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8012c1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c22:	f10a 0a01 	add.w	sl, sl, #1
 8012c26:	9304      	str	r3, [sp, #16]
 8012c28:	9307      	str	r3, [sp, #28]
 8012c2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c2e:	931a      	str	r3, [sp, #104]	; 0x68
 8012c30:	4654      	mov	r4, sl
 8012c32:	2205      	movs	r2, #5
 8012c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c38:	4851      	ldr	r0, [pc, #324]	; (8012d80 <_svfiprintf_r+0x1ec>)
 8012c3a:	f7ed fb59 	bl	80002f0 <memchr>
 8012c3e:	9a04      	ldr	r2, [sp, #16]
 8012c40:	b9d8      	cbnz	r0, 8012c7a <_svfiprintf_r+0xe6>
 8012c42:	06d0      	lsls	r0, r2, #27
 8012c44:	bf44      	itt	mi
 8012c46:	2320      	movmi	r3, #32
 8012c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c4c:	0711      	lsls	r1, r2, #28
 8012c4e:	bf44      	itt	mi
 8012c50:	232b      	movmi	r3, #43	; 0x2b
 8012c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c56:	f89a 3000 	ldrb.w	r3, [sl]
 8012c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8012c5c:	d015      	beq.n	8012c8a <_svfiprintf_r+0xf6>
 8012c5e:	9a07      	ldr	r2, [sp, #28]
 8012c60:	4654      	mov	r4, sl
 8012c62:	2000      	movs	r0, #0
 8012c64:	f04f 0c0a 	mov.w	ip, #10
 8012c68:	4621      	mov	r1, r4
 8012c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c6e:	3b30      	subs	r3, #48	; 0x30
 8012c70:	2b09      	cmp	r3, #9
 8012c72:	d94e      	bls.n	8012d12 <_svfiprintf_r+0x17e>
 8012c74:	b1b0      	cbz	r0, 8012ca4 <_svfiprintf_r+0x110>
 8012c76:	9207      	str	r2, [sp, #28]
 8012c78:	e014      	b.n	8012ca4 <_svfiprintf_r+0x110>
 8012c7a:	eba0 0308 	sub.w	r3, r0, r8
 8012c7e:	fa09 f303 	lsl.w	r3, r9, r3
 8012c82:	4313      	orrs	r3, r2
 8012c84:	9304      	str	r3, [sp, #16]
 8012c86:	46a2      	mov	sl, r4
 8012c88:	e7d2      	b.n	8012c30 <_svfiprintf_r+0x9c>
 8012c8a:	9b03      	ldr	r3, [sp, #12]
 8012c8c:	1d19      	adds	r1, r3, #4
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	9103      	str	r1, [sp, #12]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	bfbb      	ittet	lt
 8012c96:	425b      	neglt	r3, r3
 8012c98:	f042 0202 	orrlt.w	r2, r2, #2
 8012c9c:	9307      	strge	r3, [sp, #28]
 8012c9e:	9307      	strlt	r3, [sp, #28]
 8012ca0:	bfb8      	it	lt
 8012ca2:	9204      	strlt	r2, [sp, #16]
 8012ca4:	7823      	ldrb	r3, [r4, #0]
 8012ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8012ca8:	d10c      	bne.n	8012cc4 <_svfiprintf_r+0x130>
 8012caa:	7863      	ldrb	r3, [r4, #1]
 8012cac:	2b2a      	cmp	r3, #42	; 0x2a
 8012cae:	d135      	bne.n	8012d1c <_svfiprintf_r+0x188>
 8012cb0:	9b03      	ldr	r3, [sp, #12]
 8012cb2:	1d1a      	adds	r2, r3, #4
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	9203      	str	r2, [sp, #12]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	bfb8      	it	lt
 8012cbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8012cc0:	3402      	adds	r4, #2
 8012cc2:	9305      	str	r3, [sp, #20]
 8012cc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012d90 <_svfiprintf_r+0x1fc>
 8012cc8:	7821      	ldrb	r1, [r4, #0]
 8012cca:	2203      	movs	r2, #3
 8012ccc:	4650      	mov	r0, sl
 8012cce:	f7ed fb0f 	bl	80002f0 <memchr>
 8012cd2:	b140      	cbz	r0, 8012ce6 <_svfiprintf_r+0x152>
 8012cd4:	2340      	movs	r3, #64	; 0x40
 8012cd6:	eba0 000a 	sub.w	r0, r0, sl
 8012cda:	fa03 f000 	lsl.w	r0, r3, r0
 8012cde:	9b04      	ldr	r3, [sp, #16]
 8012ce0:	4303      	orrs	r3, r0
 8012ce2:	3401      	adds	r4, #1
 8012ce4:	9304      	str	r3, [sp, #16]
 8012ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cea:	4826      	ldr	r0, [pc, #152]	; (8012d84 <_svfiprintf_r+0x1f0>)
 8012cec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012cf0:	2206      	movs	r2, #6
 8012cf2:	f7ed fafd 	bl	80002f0 <memchr>
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	d038      	beq.n	8012d6c <_svfiprintf_r+0x1d8>
 8012cfa:	4b23      	ldr	r3, [pc, #140]	; (8012d88 <_svfiprintf_r+0x1f4>)
 8012cfc:	bb1b      	cbnz	r3, 8012d46 <_svfiprintf_r+0x1b2>
 8012cfe:	9b03      	ldr	r3, [sp, #12]
 8012d00:	3307      	adds	r3, #7
 8012d02:	f023 0307 	bic.w	r3, r3, #7
 8012d06:	3308      	adds	r3, #8
 8012d08:	9303      	str	r3, [sp, #12]
 8012d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d0c:	4433      	add	r3, r6
 8012d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8012d10:	e767      	b.n	8012be2 <_svfiprintf_r+0x4e>
 8012d12:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d16:	460c      	mov	r4, r1
 8012d18:	2001      	movs	r0, #1
 8012d1a:	e7a5      	b.n	8012c68 <_svfiprintf_r+0xd4>
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	3401      	adds	r4, #1
 8012d20:	9305      	str	r3, [sp, #20]
 8012d22:	4619      	mov	r1, r3
 8012d24:	f04f 0c0a 	mov.w	ip, #10
 8012d28:	4620      	mov	r0, r4
 8012d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d2e:	3a30      	subs	r2, #48	; 0x30
 8012d30:	2a09      	cmp	r2, #9
 8012d32:	d903      	bls.n	8012d3c <_svfiprintf_r+0x1a8>
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d0c5      	beq.n	8012cc4 <_svfiprintf_r+0x130>
 8012d38:	9105      	str	r1, [sp, #20]
 8012d3a:	e7c3      	b.n	8012cc4 <_svfiprintf_r+0x130>
 8012d3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d40:	4604      	mov	r4, r0
 8012d42:	2301      	movs	r3, #1
 8012d44:	e7f0      	b.n	8012d28 <_svfiprintf_r+0x194>
 8012d46:	ab03      	add	r3, sp, #12
 8012d48:	9300      	str	r3, [sp, #0]
 8012d4a:	462a      	mov	r2, r5
 8012d4c:	4b0f      	ldr	r3, [pc, #60]	; (8012d8c <_svfiprintf_r+0x1f8>)
 8012d4e:	a904      	add	r1, sp, #16
 8012d50:	4638      	mov	r0, r7
 8012d52:	f7fd fed1 	bl	8010af8 <_printf_float>
 8012d56:	1c42      	adds	r2, r0, #1
 8012d58:	4606      	mov	r6, r0
 8012d5a:	d1d6      	bne.n	8012d0a <_svfiprintf_r+0x176>
 8012d5c:	89ab      	ldrh	r3, [r5, #12]
 8012d5e:	065b      	lsls	r3, r3, #25
 8012d60:	f53f af2c 	bmi.w	8012bbc <_svfiprintf_r+0x28>
 8012d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d66:	b01d      	add	sp, #116	; 0x74
 8012d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d6c:	ab03      	add	r3, sp, #12
 8012d6e:	9300      	str	r3, [sp, #0]
 8012d70:	462a      	mov	r2, r5
 8012d72:	4b06      	ldr	r3, [pc, #24]	; (8012d8c <_svfiprintf_r+0x1f8>)
 8012d74:	a904      	add	r1, sp, #16
 8012d76:	4638      	mov	r0, r7
 8012d78:	f7fe f94a 	bl	8011010 <_printf_i>
 8012d7c:	e7eb      	b.n	8012d56 <_svfiprintf_r+0x1c2>
 8012d7e:	bf00      	nop
 8012d80:	0801e23c 	.word	0x0801e23c
 8012d84:	0801e246 	.word	0x0801e246
 8012d88:	08010af9 	.word	0x08010af9
 8012d8c:	08012add 	.word	0x08012add
 8012d90:	0801e242 	.word	0x0801e242

08012d94 <__sfputc_r>:
 8012d94:	6893      	ldr	r3, [r2, #8]
 8012d96:	3b01      	subs	r3, #1
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	b410      	push	{r4}
 8012d9c:	6093      	str	r3, [r2, #8]
 8012d9e:	da08      	bge.n	8012db2 <__sfputc_r+0x1e>
 8012da0:	6994      	ldr	r4, [r2, #24]
 8012da2:	42a3      	cmp	r3, r4
 8012da4:	db01      	blt.n	8012daa <__sfputc_r+0x16>
 8012da6:	290a      	cmp	r1, #10
 8012da8:	d103      	bne.n	8012db2 <__sfputc_r+0x1e>
 8012daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012dae:	f000 b95b 	b.w	8013068 <__swbuf_r>
 8012db2:	6813      	ldr	r3, [r2, #0]
 8012db4:	1c58      	adds	r0, r3, #1
 8012db6:	6010      	str	r0, [r2, #0]
 8012db8:	7019      	strb	r1, [r3, #0]
 8012dba:	4608      	mov	r0, r1
 8012dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012dc0:	4770      	bx	lr

08012dc2 <__sfputs_r>:
 8012dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dc4:	4606      	mov	r6, r0
 8012dc6:	460f      	mov	r7, r1
 8012dc8:	4614      	mov	r4, r2
 8012dca:	18d5      	adds	r5, r2, r3
 8012dcc:	42ac      	cmp	r4, r5
 8012dce:	d101      	bne.n	8012dd4 <__sfputs_r+0x12>
 8012dd0:	2000      	movs	r0, #0
 8012dd2:	e007      	b.n	8012de4 <__sfputs_r+0x22>
 8012dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dd8:	463a      	mov	r2, r7
 8012dda:	4630      	mov	r0, r6
 8012ddc:	f7ff ffda 	bl	8012d94 <__sfputc_r>
 8012de0:	1c43      	adds	r3, r0, #1
 8012de2:	d1f3      	bne.n	8012dcc <__sfputs_r+0xa>
 8012de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012de8 <_vfiprintf_r>:
 8012de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dec:	460d      	mov	r5, r1
 8012dee:	b09d      	sub	sp, #116	; 0x74
 8012df0:	4614      	mov	r4, r2
 8012df2:	4698      	mov	r8, r3
 8012df4:	4606      	mov	r6, r0
 8012df6:	b118      	cbz	r0, 8012e00 <_vfiprintf_r+0x18>
 8012df8:	6983      	ldr	r3, [r0, #24]
 8012dfa:	b90b      	cbnz	r3, 8012e00 <_vfiprintf_r+0x18>
 8012dfc:	f000 fb16 	bl	801342c <__sinit>
 8012e00:	4b89      	ldr	r3, [pc, #548]	; (8013028 <_vfiprintf_r+0x240>)
 8012e02:	429d      	cmp	r5, r3
 8012e04:	d11b      	bne.n	8012e3e <_vfiprintf_r+0x56>
 8012e06:	6875      	ldr	r5, [r6, #4]
 8012e08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012e0a:	07d9      	lsls	r1, r3, #31
 8012e0c:	d405      	bmi.n	8012e1a <_vfiprintf_r+0x32>
 8012e0e:	89ab      	ldrh	r3, [r5, #12]
 8012e10:	059a      	lsls	r2, r3, #22
 8012e12:	d402      	bmi.n	8012e1a <_vfiprintf_r+0x32>
 8012e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e16:	f000 fba7 	bl	8013568 <__retarget_lock_acquire_recursive>
 8012e1a:	89ab      	ldrh	r3, [r5, #12]
 8012e1c:	071b      	lsls	r3, r3, #28
 8012e1e:	d501      	bpl.n	8012e24 <_vfiprintf_r+0x3c>
 8012e20:	692b      	ldr	r3, [r5, #16]
 8012e22:	b9eb      	cbnz	r3, 8012e60 <_vfiprintf_r+0x78>
 8012e24:	4629      	mov	r1, r5
 8012e26:	4630      	mov	r0, r6
 8012e28:	f000 f970 	bl	801310c <__swsetup_r>
 8012e2c:	b1c0      	cbz	r0, 8012e60 <_vfiprintf_r+0x78>
 8012e2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012e30:	07dc      	lsls	r4, r3, #31
 8012e32:	d50e      	bpl.n	8012e52 <_vfiprintf_r+0x6a>
 8012e34:	f04f 30ff 	mov.w	r0, #4294967295
 8012e38:	b01d      	add	sp, #116	; 0x74
 8012e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e3e:	4b7b      	ldr	r3, [pc, #492]	; (801302c <_vfiprintf_r+0x244>)
 8012e40:	429d      	cmp	r5, r3
 8012e42:	d101      	bne.n	8012e48 <_vfiprintf_r+0x60>
 8012e44:	68b5      	ldr	r5, [r6, #8]
 8012e46:	e7df      	b.n	8012e08 <_vfiprintf_r+0x20>
 8012e48:	4b79      	ldr	r3, [pc, #484]	; (8013030 <_vfiprintf_r+0x248>)
 8012e4a:	429d      	cmp	r5, r3
 8012e4c:	bf08      	it	eq
 8012e4e:	68f5      	ldreq	r5, [r6, #12]
 8012e50:	e7da      	b.n	8012e08 <_vfiprintf_r+0x20>
 8012e52:	89ab      	ldrh	r3, [r5, #12]
 8012e54:	0598      	lsls	r0, r3, #22
 8012e56:	d4ed      	bmi.n	8012e34 <_vfiprintf_r+0x4c>
 8012e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e5a:	f000 fb86 	bl	801356a <__retarget_lock_release_recursive>
 8012e5e:	e7e9      	b.n	8012e34 <_vfiprintf_r+0x4c>
 8012e60:	2300      	movs	r3, #0
 8012e62:	9309      	str	r3, [sp, #36]	; 0x24
 8012e64:	2320      	movs	r3, #32
 8012e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e6e:	2330      	movs	r3, #48	; 0x30
 8012e70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013034 <_vfiprintf_r+0x24c>
 8012e74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012e78:	f04f 0901 	mov.w	r9, #1
 8012e7c:	4623      	mov	r3, r4
 8012e7e:	469a      	mov	sl, r3
 8012e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e84:	b10a      	cbz	r2, 8012e8a <_vfiprintf_r+0xa2>
 8012e86:	2a25      	cmp	r2, #37	; 0x25
 8012e88:	d1f9      	bne.n	8012e7e <_vfiprintf_r+0x96>
 8012e8a:	ebba 0b04 	subs.w	fp, sl, r4
 8012e8e:	d00b      	beq.n	8012ea8 <_vfiprintf_r+0xc0>
 8012e90:	465b      	mov	r3, fp
 8012e92:	4622      	mov	r2, r4
 8012e94:	4629      	mov	r1, r5
 8012e96:	4630      	mov	r0, r6
 8012e98:	f7ff ff93 	bl	8012dc2 <__sfputs_r>
 8012e9c:	3001      	adds	r0, #1
 8012e9e:	f000 80aa 	beq.w	8012ff6 <_vfiprintf_r+0x20e>
 8012ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ea4:	445a      	add	r2, fp
 8012ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8012ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	f000 80a2 	beq.w	8012ff6 <_vfiprintf_r+0x20e>
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8012eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ebc:	f10a 0a01 	add.w	sl, sl, #1
 8012ec0:	9304      	str	r3, [sp, #16]
 8012ec2:	9307      	str	r3, [sp, #28]
 8012ec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012ec8:	931a      	str	r3, [sp, #104]	; 0x68
 8012eca:	4654      	mov	r4, sl
 8012ecc:	2205      	movs	r2, #5
 8012ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ed2:	4858      	ldr	r0, [pc, #352]	; (8013034 <_vfiprintf_r+0x24c>)
 8012ed4:	f7ed fa0c 	bl	80002f0 <memchr>
 8012ed8:	9a04      	ldr	r2, [sp, #16]
 8012eda:	b9d8      	cbnz	r0, 8012f14 <_vfiprintf_r+0x12c>
 8012edc:	06d1      	lsls	r1, r2, #27
 8012ede:	bf44      	itt	mi
 8012ee0:	2320      	movmi	r3, #32
 8012ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ee6:	0713      	lsls	r3, r2, #28
 8012ee8:	bf44      	itt	mi
 8012eea:	232b      	movmi	r3, #43	; 0x2b
 8012eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8012ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8012ef6:	d015      	beq.n	8012f24 <_vfiprintf_r+0x13c>
 8012ef8:	9a07      	ldr	r2, [sp, #28]
 8012efa:	4654      	mov	r4, sl
 8012efc:	2000      	movs	r0, #0
 8012efe:	f04f 0c0a 	mov.w	ip, #10
 8012f02:	4621      	mov	r1, r4
 8012f04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f08:	3b30      	subs	r3, #48	; 0x30
 8012f0a:	2b09      	cmp	r3, #9
 8012f0c:	d94e      	bls.n	8012fac <_vfiprintf_r+0x1c4>
 8012f0e:	b1b0      	cbz	r0, 8012f3e <_vfiprintf_r+0x156>
 8012f10:	9207      	str	r2, [sp, #28]
 8012f12:	e014      	b.n	8012f3e <_vfiprintf_r+0x156>
 8012f14:	eba0 0308 	sub.w	r3, r0, r8
 8012f18:	fa09 f303 	lsl.w	r3, r9, r3
 8012f1c:	4313      	orrs	r3, r2
 8012f1e:	9304      	str	r3, [sp, #16]
 8012f20:	46a2      	mov	sl, r4
 8012f22:	e7d2      	b.n	8012eca <_vfiprintf_r+0xe2>
 8012f24:	9b03      	ldr	r3, [sp, #12]
 8012f26:	1d19      	adds	r1, r3, #4
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	9103      	str	r1, [sp, #12]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	bfbb      	ittet	lt
 8012f30:	425b      	neglt	r3, r3
 8012f32:	f042 0202 	orrlt.w	r2, r2, #2
 8012f36:	9307      	strge	r3, [sp, #28]
 8012f38:	9307      	strlt	r3, [sp, #28]
 8012f3a:	bfb8      	it	lt
 8012f3c:	9204      	strlt	r2, [sp, #16]
 8012f3e:	7823      	ldrb	r3, [r4, #0]
 8012f40:	2b2e      	cmp	r3, #46	; 0x2e
 8012f42:	d10c      	bne.n	8012f5e <_vfiprintf_r+0x176>
 8012f44:	7863      	ldrb	r3, [r4, #1]
 8012f46:	2b2a      	cmp	r3, #42	; 0x2a
 8012f48:	d135      	bne.n	8012fb6 <_vfiprintf_r+0x1ce>
 8012f4a:	9b03      	ldr	r3, [sp, #12]
 8012f4c:	1d1a      	adds	r2, r3, #4
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	9203      	str	r2, [sp, #12]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	bfb8      	it	lt
 8012f56:	f04f 33ff 	movlt.w	r3, #4294967295
 8012f5a:	3402      	adds	r4, #2
 8012f5c:	9305      	str	r3, [sp, #20]
 8012f5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013044 <_vfiprintf_r+0x25c>
 8012f62:	7821      	ldrb	r1, [r4, #0]
 8012f64:	2203      	movs	r2, #3
 8012f66:	4650      	mov	r0, sl
 8012f68:	f7ed f9c2 	bl	80002f0 <memchr>
 8012f6c:	b140      	cbz	r0, 8012f80 <_vfiprintf_r+0x198>
 8012f6e:	2340      	movs	r3, #64	; 0x40
 8012f70:	eba0 000a 	sub.w	r0, r0, sl
 8012f74:	fa03 f000 	lsl.w	r0, r3, r0
 8012f78:	9b04      	ldr	r3, [sp, #16]
 8012f7a:	4303      	orrs	r3, r0
 8012f7c:	3401      	adds	r4, #1
 8012f7e:	9304      	str	r3, [sp, #16]
 8012f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f84:	482c      	ldr	r0, [pc, #176]	; (8013038 <_vfiprintf_r+0x250>)
 8012f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012f8a:	2206      	movs	r2, #6
 8012f8c:	f7ed f9b0 	bl	80002f0 <memchr>
 8012f90:	2800      	cmp	r0, #0
 8012f92:	d03f      	beq.n	8013014 <_vfiprintf_r+0x22c>
 8012f94:	4b29      	ldr	r3, [pc, #164]	; (801303c <_vfiprintf_r+0x254>)
 8012f96:	bb1b      	cbnz	r3, 8012fe0 <_vfiprintf_r+0x1f8>
 8012f98:	9b03      	ldr	r3, [sp, #12]
 8012f9a:	3307      	adds	r3, #7
 8012f9c:	f023 0307 	bic.w	r3, r3, #7
 8012fa0:	3308      	adds	r3, #8
 8012fa2:	9303      	str	r3, [sp, #12]
 8012fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fa6:	443b      	add	r3, r7
 8012fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8012faa:	e767      	b.n	8012e7c <_vfiprintf_r+0x94>
 8012fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8012fb0:	460c      	mov	r4, r1
 8012fb2:	2001      	movs	r0, #1
 8012fb4:	e7a5      	b.n	8012f02 <_vfiprintf_r+0x11a>
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	3401      	adds	r4, #1
 8012fba:	9305      	str	r3, [sp, #20]
 8012fbc:	4619      	mov	r1, r3
 8012fbe:	f04f 0c0a 	mov.w	ip, #10
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012fc8:	3a30      	subs	r2, #48	; 0x30
 8012fca:	2a09      	cmp	r2, #9
 8012fcc:	d903      	bls.n	8012fd6 <_vfiprintf_r+0x1ee>
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d0c5      	beq.n	8012f5e <_vfiprintf_r+0x176>
 8012fd2:	9105      	str	r1, [sp, #20]
 8012fd4:	e7c3      	b.n	8012f5e <_vfiprintf_r+0x176>
 8012fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8012fda:	4604      	mov	r4, r0
 8012fdc:	2301      	movs	r3, #1
 8012fde:	e7f0      	b.n	8012fc2 <_vfiprintf_r+0x1da>
 8012fe0:	ab03      	add	r3, sp, #12
 8012fe2:	9300      	str	r3, [sp, #0]
 8012fe4:	462a      	mov	r2, r5
 8012fe6:	4b16      	ldr	r3, [pc, #88]	; (8013040 <_vfiprintf_r+0x258>)
 8012fe8:	a904      	add	r1, sp, #16
 8012fea:	4630      	mov	r0, r6
 8012fec:	f7fd fd84 	bl	8010af8 <_printf_float>
 8012ff0:	4607      	mov	r7, r0
 8012ff2:	1c78      	adds	r0, r7, #1
 8012ff4:	d1d6      	bne.n	8012fa4 <_vfiprintf_r+0x1bc>
 8012ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ff8:	07d9      	lsls	r1, r3, #31
 8012ffa:	d405      	bmi.n	8013008 <_vfiprintf_r+0x220>
 8012ffc:	89ab      	ldrh	r3, [r5, #12]
 8012ffe:	059a      	lsls	r2, r3, #22
 8013000:	d402      	bmi.n	8013008 <_vfiprintf_r+0x220>
 8013002:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013004:	f000 fab1 	bl	801356a <__retarget_lock_release_recursive>
 8013008:	89ab      	ldrh	r3, [r5, #12]
 801300a:	065b      	lsls	r3, r3, #25
 801300c:	f53f af12 	bmi.w	8012e34 <_vfiprintf_r+0x4c>
 8013010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013012:	e711      	b.n	8012e38 <_vfiprintf_r+0x50>
 8013014:	ab03      	add	r3, sp, #12
 8013016:	9300      	str	r3, [sp, #0]
 8013018:	462a      	mov	r2, r5
 801301a:	4b09      	ldr	r3, [pc, #36]	; (8013040 <_vfiprintf_r+0x258>)
 801301c:	a904      	add	r1, sp, #16
 801301e:	4630      	mov	r0, r6
 8013020:	f7fd fff6 	bl	8011010 <_printf_i>
 8013024:	e7e4      	b.n	8012ff0 <_vfiprintf_r+0x208>
 8013026:	bf00      	nop
 8013028:	0801e270 	.word	0x0801e270
 801302c:	0801e290 	.word	0x0801e290
 8013030:	0801e250 	.word	0x0801e250
 8013034:	0801e23c 	.word	0x0801e23c
 8013038:	0801e246 	.word	0x0801e246
 801303c:	08010af9 	.word	0x08010af9
 8013040:	08012dc3 	.word	0x08012dc3
 8013044:	0801e242 	.word	0x0801e242

08013048 <_sbrk_r>:
 8013048:	b538      	push	{r3, r4, r5, lr}
 801304a:	4d06      	ldr	r5, [pc, #24]	; (8013064 <_sbrk_r+0x1c>)
 801304c:	2300      	movs	r3, #0
 801304e:	4604      	mov	r4, r0
 8013050:	4608      	mov	r0, r1
 8013052:	602b      	str	r3, [r5, #0]
 8013054:	f7f3 f9b2 	bl	80063bc <_sbrk>
 8013058:	1c43      	adds	r3, r0, #1
 801305a:	d102      	bne.n	8013062 <_sbrk_r+0x1a>
 801305c:	682b      	ldr	r3, [r5, #0]
 801305e:	b103      	cbz	r3, 8013062 <_sbrk_r+0x1a>
 8013060:	6023      	str	r3, [r4, #0]
 8013062:	bd38      	pop	{r3, r4, r5, pc}
 8013064:	2400ef04 	.word	0x2400ef04

08013068 <__swbuf_r>:
 8013068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801306a:	460e      	mov	r6, r1
 801306c:	4614      	mov	r4, r2
 801306e:	4605      	mov	r5, r0
 8013070:	b118      	cbz	r0, 801307a <__swbuf_r+0x12>
 8013072:	6983      	ldr	r3, [r0, #24]
 8013074:	b90b      	cbnz	r3, 801307a <__swbuf_r+0x12>
 8013076:	f000 f9d9 	bl	801342c <__sinit>
 801307a:	4b21      	ldr	r3, [pc, #132]	; (8013100 <__swbuf_r+0x98>)
 801307c:	429c      	cmp	r4, r3
 801307e:	d12b      	bne.n	80130d8 <__swbuf_r+0x70>
 8013080:	686c      	ldr	r4, [r5, #4]
 8013082:	69a3      	ldr	r3, [r4, #24]
 8013084:	60a3      	str	r3, [r4, #8]
 8013086:	89a3      	ldrh	r3, [r4, #12]
 8013088:	071a      	lsls	r2, r3, #28
 801308a:	d52f      	bpl.n	80130ec <__swbuf_r+0x84>
 801308c:	6923      	ldr	r3, [r4, #16]
 801308e:	b36b      	cbz	r3, 80130ec <__swbuf_r+0x84>
 8013090:	6923      	ldr	r3, [r4, #16]
 8013092:	6820      	ldr	r0, [r4, #0]
 8013094:	1ac0      	subs	r0, r0, r3
 8013096:	6963      	ldr	r3, [r4, #20]
 8013098:	b2f6      	uxtb	r6, r6
 801309a:	4283      	cmp	r3, r0
 801309c:	4637      	mov	r7, r6
 801309e:	dc04      	bgt.n	80130aa <__swbuf_r+0x42>
 80130a0:	4621      	mov	r1, r4
 80130a2:	4628      	mov	r0, r5
 80130a4:	f000 f92e 	bl	8013304 <_fflush_r>
 80130a8:	bb30      	cbnz	r0, 80130f8 <__swbuf_r+0x90>
 80130aa:	68a3      	ldr	r3, [r4, #8]
 80130ac:	3b01      	subs	r3, #1
 80130ae:	60a3      	str	r3, [r4, #8]
 80130b0:	6823      	ldr	r3, [r4, #0]
 80130b2:	1c5a      	adds	r2, r3, #1
 80130b4:	6022      	str	r2, [r4, #0]
 80130b6:	701e      	strb	r6, [r3, #0]
 80130b8:	6963      	ldr	r3, [r4, #20]
 80130ba:	3001      	adds	r0, #1
 80130bc:	4283      	cmp	r3, r0
 80130be:	d004      	beq.n	80130ca <__swbuf_r+0x62>
 80130c0:	89a3      	ldrh	r3, [r4, #12]
 80130c2:	07db      	lsls	r3, r3, #31
 80130c4:	d506      	bpl.n	80130d4 <__swbuf_r+0x6c>
 80130c6:	2e0a      	cmp	r6, #10
 80130c8:	d104      	bne.n	80130d4 <__swbuf_r+0x6c>
 80130ca:	4621      	mov	r1, r4
 80130cc:	4628      	mov	r0, r5
 80130ce:	f000 f919 	bl	8013304 <_fflush_r>
 80130d2:	b988      	cbnz	r0, 80130f8 <__swbuf_r+0x90>
 80130d4:	4638      	mov	r0, r7
 80130d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130d8:	4b0a      	ldr	r3, [pc, #40]	; (8013104 <__swbuf_r+0x9c>)
 80130da:	429c      	cmp	r4, r3
 80130dc:	d101      	bne.n	80130e2 <__swbuf_r+0x7a>
 80130de:	68ac      	ldr	r4, [r5, #8]
 80130e0:	e7cf      	b.n	8013082 <__swbuf_r+0x1a>
 80130e2:	4b09      	ldr	r3, [pc, #36]	; (8013108 <__swbuf_r+0xa0>)
 80130e4:	429c      	cmp	r4, r3
 80130e6:	bf08      	it	eq
 80130e8:	68ec      	ldreq	r4, [r5, #12]
 80130ea:	e7ca      	b.n	8013082 <__swbuf_r+0x1a>
 80130ec:	4621      	mov	r1, r4
 80130ee:	4628      	mov	r0, r5
 80130f0:	f000 f80c 	bl	801310c <__swsetup_r>
 80130f4:	2800      	cmp	r0, #0
 80130f6:	d0cb      	beq.n	8013090 <__swbuf_r+0x28>
 80130f8:	f04f 37ff 	mov.w	r7, #4294967295
 80130fc:	e7ea      	b.n	80130d4 <__swbuf_r+0x6c>
 80130fe:	bf00      	nop
 8013100:	0801e270 	.word	0x0801e270
 8013104:	0801e290 	.word	0x0801e290
 8013108:	0801e250 	.word	0x0801e250

0801310c <__swsetup_r>:
 801310c:	4b32      	ldr	r3, [pc, #200]	; (80131d8 <__swsetup_r+0xcc>)
 801310e:	b570      	push	{r4, r5, r6, lr}
 8013110:	681d      	ldr	r5, [r3, #0]
 8013112:	4606      	mov	r6, r0
 8013114:	460c      	mov	r4, r1
 8013116:	b125      	cbz	r5, 8013122 <__swsetup_r+0x16>
 8013118:	69ab      	ldr	r3, [r5, #24]
 801311a:	b913      	cbnz	r3, 8013122 <__swsetup_r+0x16>
 801311c:	4628      	mov	r0, r5
 801311e:	f000 f985 	bl	801342c <__sinit>
 8013122:	4b2e      	ldr	r3, [pc, #184]	; (80131dc <__swsetup_r+0xd0>)
 8013124:	429c      	cmp	r4, r3
 8013126:	d10f      	bne.n	8013148 <__swsetup_r+0x3c>
 8013128:	686c      	ldr	r4, [r5, #4]
 801312a:	89a3      	ldrh	r3, [r4, #12]
 801312c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013130:	0719      	lsls	r1, r3, #28
 8013132:	d42c      	bmi.n	801318e <__swsetup_r+0x82>
 8013134:	06dd      	lsls	r5, r3, #27
 8013136:	d411      	bmi.n	801315c <__swsetup_r+0x50>
 8013138:	2309      	movs	r3, #9
 801313a:	6033      	str	r3, [r6, #0]
 801313c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013140:	81a3      	strh	r3, [r4, #12]
 8013142:	f04f 30ff 	mov.w	r0, #4294967295
 8013146:	e03e      	b.n	80131c6 <__swsetup_r+0xba>
 8013148:	4b25      	ldr	r3, [pc, #148]	; (80131e0 <__swsetup_r+0xd4>)
 801314a:	429c      	cmp	r4, r3
 801314c:	d101      	bne.n	8013152 <__swsetup_r+0x46>
 801314e:	68ac      	ldr	r4, [r5, #8]
 8013150:	e7eb      	b.n	801312a <__swsetup_r+0x1e>
 8013152:	4b24      	ldr	r3, [pc, #144]	; (80131e4 <__swsetup_r+0xd8>)
 8013154:	429c      	cmp	r4, r3
 8013156:	bf08      	it	eq
 8013158:	68ec      	ldreq	r4, [r5, #12]
 801315a:	e7e6      	b.n	801312a <__swsetup_r+0x1e>
 801315c:	0758      	lsls	r0, r3, #29
 801315e:	d512      	bpl.n	8013186 <__swsetup_r+0x7a>
 8013160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013162:	b141      	cbz	r1, 8013176 <__swsetup_r+0x6a>
 8013164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013168:	4299      	cmp	r1, r3
 801316a:	d002      	beq.n	8013172 <__swsetup_r+0x66>
 801316c:	4630      	mov	r0, r6
 801316e:	f7ff fbd5 	bl	801291c <_free_r>
 8013172:	2300      	movs	r3, #0
 8013174:	6363      	str	r3, [r4, #52]	; 0x34
 8013176:	89a3      	ldrh	r3, [r4, #12]
 8013178:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801317c:	81a3      	strh	r3, [r4, #12]
 801317e:	2300      	movs	r3, #0
 8013180:	6063      	str	r3, [r4, #4]
 8013182:	6923      	ldr	r3, [r4, #16]
 8013184:	6023      	str	r3, [r4, #0]
 8013186:	89a3      	ldrh	r3, [r4, #12]
 8013188:	f043 0308 	orr.w	r3, r3, #8
 801318c:	81a3      	strh	r3, [r4, #12]
 801318e:	6923      	ldr	r3, [r4, #16]
 8013190:	b94b      	cbnz	r3, 80131a6 <__swsetup_r+0x9a>
 8013192:	89a3      	ldrh	r3, [r4, #12]
 8013194:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801319c:	d003      	beq.n	80131a6 <__swsetup_r+0x9a>
 801319e:	4621      	mov	r1, r4
 80131a0:	4630      	mov	r0, r6
 80131a2:	f000 fa09 	bl	80135b8 <__smakebuf_r>
 80131a6:	89a0      	ldrh	r0, [r4, #12]
 80131a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80131ac:	f010 0301 	ands.w	r3, r0, #1
 80131b0:	d00a      	beq.n	80131c8 <__swsetup_r+0xbc>
 80131b2:	2300      	movs	r3, #0
 80131b4:	60a3      	str	r3, [r4, #8]
 80131b6:	6963      	ldr	r3, [r4, #20]
 80131b8:	425b      	negs	r3, r3
 80131ba:	61a3      	str	r3, [r4, #24]
 80131bc:	6923      	ldr	r3, [r4, #16]
 80131be:	b943      	cbnz	r3, 80131d2 <__swsetup_r+0xc6>
 80131c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80131c4:	d1ba      	bne.n	801313c <__swsetup_r+0x30>
 80131c6:	bd70      	pop	{r4, r5, r6, pc}
 80131c8:	0781      	lsls	r1, r0, #30
 80131ca:	bf58      	it	pl
 80131cc:	6963      	ldrpl	r3, [r4, #20]
 80131ce:	60a3      	str	r3, [r4, #8]
 80131d0:	e7f4      	b.n	80131bc <__swsetup_r+0xb0>
 80131d2:	2000      	movs	r0, #0
 80131d4:	e7f7      	b.n	80131c6 <__swsetup_r+0xba>
 80131d6:	bf00      	nop
 80131d8:	24000558 	.word	0x24000558
 80131dc:	0801e270 	.word	0x0801e270
 80131e0:	0801e290 	.word	0x0801e290
 80131e4:	0801e250 	.word	0x0801e250

080131e8 <abort>:
 80131e8:	b508      	push	{r3, lr}
 80131ea:	2006      	movs	r0, #6
 80131ec:	f000 fab4 	bl	8013758 <raise>
 80131f0:	2001      	movs	r0, #1
 80131f2:	f7f3 f8b3 	bl	800635c <_exit>
	...

080131f8 <__sflush_r>:
 80131f8:	898a      	ldrh	r2, [r1, #12]
 80131fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131fe:	4605      	mov	r5, r0
 8013200:	0710      	lsls	r0, r2, #28
 8013202:	460c      	mov	r4, r1
 8013204:	d458      	bmi.n	80132b8 <__sflush_r+0xc0>
 8013206:	684b      	ldr	r3, [r1, #4]
 8013208:	2b00      	cmp	r3, #0
 801320a:	dc05      	bgt.n	8013218 <__sflush_r+0x20>
 801320c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801320e:	2b00      	cmp	r3, #0
 8013210:	dc02      	bgt.n	8013218 <__sflush_r+0x20>
 8013212:	2000      	movs	r0, #0
 8013214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801321a:	2e00      	cmp	r6, #0
 801321c:	d0f9      	beq.n	8013212 <__sflush_r+0x1a>
 801321e:	2300      	movs	r3, #0
 8013220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013224:	682f      	ldr	r7, [r5, #0]
 8013226:	602b      	str	r3, [r5, #0]
 8013228:	d032      	beq.n	8013290 <__sflush_r+0x98>
 801322a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801322c:	89a3      	ldrh	r3, [r4, #12]
 801322e:	075a      	lsls	r2, r3, #29
 8013230:	d505      	bpl.n	801323e <__sflush_r+0x46>
 8013232:	6863      	ldr	r3, [r4, #4]
 8013234:	1ac0      	subs	r0, r0, r3
 8013236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013238:	b10b      	cbz	r3, 801323e <__sflush_r+0x46>
 801323a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801323c:	1ac0      	subs	r0, r0, r3
 801323e:	2300      	movs	r3, #0
 8013240:	4602      	mov	r2, r0
 8013242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013244:	6a21      	ldr	r1, [r4, #32]
 8013246:	4628      	mov	r0, r5
 8013248:	47b0      	blx	r6
 801324a:	1c43      	adds	r3, r0, #1
 801324c:	89a3      	ldrh	r3, [r4, #12]
 801324e:	d106      	bne.n	801325e <__sflush_r+0x66>
 8013250:	6829      	ldr	r1, [r5, #0]
 8013252:	291d      	cmp	r1, #29
 8013254:	d82c      	bhi.n	80132b0 <__sflush_r+0xb8>
 8013256:	4a2a      	ldr	r2, [pc, #168]	; (8013300 <__sflush_r+0x108>)
 8013258:	40ca      	lsrs	r2, r1
 801325a:	07d6      	lsls	r6, r2, #31
 801325c:	d528      	bpl.n	80132b0 <__sflush_r+0xb8>
 801325e:	2200      	movs	r2, #0
 8013260:	6062      	str	r2, [r4, #4]
 8013262:	04d9      	lsls	r1, r3, #19
 8013264:	6922      	ldr	r2, [r4, #16]
 8013266:	6022      	str	r2, [r4, #0]
 8013268:	d504      	bpl.n	8013274 <__sflush_r+0x7c>
 801326a:	1c42      	adds	r2, r0, #1
 801326c:	d101      	bne.n	8013272 <__sflush_r+0x7a>
 801326e:	682b      	ldr	r3, [r5, #0]
 8013270:	b903      	cbnz	r3, 8013274 <__sflush_r+0x7c>
 8013272:	6560      	str	r0, [r4, #84]	; 0x54
 8013274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013276:	602f      	str	r7, [r5, #0]
 8013278:	2900      	cmp	r1, #0
 801327a:	d0ca      	beq.n	8013212 <__sflush_r+0x1a>
 801327c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013280:	4299      	cmp	r1, r3
 8013282:	d002      	beq.n	801328a <__sflush_r+0x92>
 8013284:	4628      	mov	r0, r5
 8013286:	f7ff fb49 	bl	801291c <_free_r>
 801328a:	2000      	movs	r0, #0
 801328c:	6360      	str	r0, [r4, #52]	; 0x34
 801328e:	e7c1      	b.n	8013214 <__sflush_r+0x1c>
 8013290:	6a21      	ldr	r1, [r4, #32]
 8013292:	2301      	movs	r3, #1
 8013294:	4628      	mov	r0, r5
 8013296:	47b0      	blx	r6
 8013298:	1c41      	adds	r1, r0, #1
 801329a:	d1c7      	bne.n	801322c <__sflush_r+0x34>
 801329c:	682b      	ldr	r3, [r5, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d0c4      	beq.n	801322c <__sflush_r+0x34>
 80132a2:	2b1d      	cmp	r3, #29
 80132a4:	d001      	beq.n	80132aa <__sflush_r+0xb2>
 80132a6:	2b16      	cmp	r3, #22
 80132a8:	d101      	bne.n	80132ae <__sflush_r+0xb6>
 80132aa:	602f      	str	r7, [r5, #0]
 80132ac:	e7b1      	b.n	8013212 <__sflush_r+0x1a>
 80132ae:	89a3      	ldrh	r3, [r4, #12]
 80132b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132b4:	81a3      	strh	r3, [r4, #12]
 80132b6:	e7ad      	b.n	8013214 <__sflush_r+0x1c>
 80132b8:	690f      	ldr	r7, [r1, #16]
 80132ba:	2f00      	cmp	r7, #0
 80132bc:	d0a9      	beq.n	8013212 <__sflush_r+0x1a>
 80132be:	0793      	lsls	r3, r2, #30
 80132c0:	680e      	ldr	r6, [r1, #0]
 80132c2:	bf08      	it	eq
 80132c4:	694b      	ldreq	r3, [r1, #20]
 80132c6:	600f      	str	r7, [r1, #0]
 80132c8:	bf18      	it	ne
 80132ca:	2300      	movne	r3, #0
 80132cc:	eba6 0807 	sub.w	r8, r6, r7
 80132d0:	608b      	str	r3, [r1, #8]
 80132d2:	f1b8 0f00 	cmp.w	r8, #0
 80132d6:	dd9c      	ble.n	8013212 <__sflush_r+0x1a>
 80132d8:	6a21      	ldr	r1, [r4, #32]
 80132da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80132dc:	4643      	mov	r3, r8
 80132de:	463a      	mov	r2, r7
 80132e0:	4628      	mov	r0, r5
 80132e2:	47b0      	blx	r6
 80132e4:	2800      	cmp	r0, #0
 80132e6:	dc06      	bgt.n	80132f6 <__sflush_r+0xfe>
 80132e8:	89a3      	ldrh	r3, [r4, #12]
 80132ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132ee:	81a3      	strh	r3, [r4, #12]
 80132f0:	f04f 30ff 	mov.w	r0, #4294967295
 80132f4:	e78e      	b.n	8013214 <__sflush_r+0x1c>
 80132f6:	4407      	add	r7, r0
 80132f8:	eba8 0800 	sub.w	r8, r8, r0
 80132fc:	e7e9      	b.n	80132d2 <__sflush_r+0xda>
 80132fe:	bf00      	nop
 8013300:	20400001 	.word	0x20400001

08013304 <_fflush_r>:
 8013304:	b538      	push	{r3, r4, r5, lr}
 8013306:	690b      	ldr	r3, [r1, #16]
 8013308:	4605      	mov	r5, r0
 801330a:	460c      	mov	r4, r1
 801330c:	b913      	cbnz	r3, 8013314 <_fflush_r+0x10>
 801330e:	2500      	movs	r5, #0
 8013310:	4628      	mov	r0, r5
 8013312:	bd38      	pop	{r3, r4, r5, pc}
 8013314:	b118      	cbz	r0, 801331e <_fflush_r+0x1a>
 8013316:	6983      	ldr	r3, [r0, #24]
 8013318:	b90b      	cbnz	r3, 801331e <_fflush_r+0x1a>
 801331a:	f000 f887 	bl	801342c <__sinit>
 801331e:	4b14      	ldr	r3, [pc, #80]	; (8013370 <_fflush_r+0x6c>)
 8013320:	429c      	cmp	r4, r3
 8013322:	d11b      	bne.n	801335c <_fflush_r+0x58>
 8013324:	686c      	ldr	r4, [r5, #4]
 8013326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d0ef      	beq.n	801330e <_fflush_r+0xa>
 801332e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013330:	07d0      	lsls	r0, r2, #31
 8013332:	d404      	bmi.n	801333e <_fflush_r+0x3a>
 8013334:	0599      	lsls	r1, r3, #22
 8013336:	d402      	bmi.n	801333e <_fflush_r+0x3a>
 8013338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801333a:	f000 f915 	bl	8013568 <__retarget_lock_acquire_recursive>
 801333e:	4628      	mov	r0, r5
 8013340:	4621      	mov	r1, r4
 8013342:	f7ff ff59 	bl	80131f8 <__sflush_r>
 8013346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013348:	07da      	lsls	r2, r3, #31
 801334a:	4605      	mov	r5, r0
 801334c:	d4e0      	bmi.n	8013310 <_fflush_r+0xc>
 801334e:	89a3      	ldrh	r3, [r4, #12]
 8013350:	059b      	lsls	r3, r3, #22
 8013352:	d4dd      	bmi.n	8013310 <_fflush_r+0xc>
 8013354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013356:	f000 f908 	bl	801356a <__retarget_lock_release_recursive>
 801335a:	e7d9      	b.n	8013310 <_fflush_r+0xc>
 801335c:	4b05      	ldr	r3, [pc, #20]	; (8013374 <_fflush_r+0x70>)
 801335e:	429c      	cmp	r4, r3
 8013360:	d101      	bne.n	8013366 <_fflush_r+0x62>
 8013362:	68ac      	ldr	r4, [r5, #8]
 8013364:	e7df      	b.n	8013326 <_fflush_r+0x22>
 8013366:	4b04      	ldr	r3, [pc, #16]	; (8013378 <_fflush_r+0x74>)
 8013368:	429c      	cmp	r4, r3
 801336a:	bf08      	it	eq
 801336c:	68ec      	ldreq	r4, [r5, #12]
 801336e:	e7da      	b.n	8013326 <_fflush_r+0x22>
 8013370:	0801e270 	.word	0x0801e270
 8013374:	0801e290 	.word	0x0801e290
 8013378:	0801e250 	.word	0x0801e250

0801337c <std>:
 801337c:	2300      	movs	r3, #0
 801337e:	b510      	push	{r4, lr}
 8013380:	4604      	mov	r4, r0
 8013382:	e9c0 3300 	strd	r3, r3, [r0]
 8013386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801338a:	6083      	str	r3, [r0, #8]
 801338c:	8181      	strh	r1, [r0, #12]
 801338e:	6643      	str	r3, [r0, #100]	; 0x64
 8013390:	81c2      	strh	r2, [r0, #14]
 8013392:	6183      	str	r3, [r0, #24]
 8013394:	4619      	mov	r1, r3
 8013396:	2208      	movs	r2, #8
 8013398:	305c      	adds	r0, #92	; 0x5c
 801339a:	f7fd fb15 	bl	80109c8 <memset>
 801339e:	4b05      	ldr	r3, [pc, #20]	; (80133b4 <std+0x38>)
 80133a0:	6263      	str	r3, [r4, #36]	; 0x24
 80133a2:	4b05      	ldr	r3, [pc, #20]	; (80133b8 <std+0x3c>)
 80133a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80133a6:	4b05      	ldr	r3, [pc, #20]	; (80133bc <std+0x40>)
 80133a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80133aa:	4b05      	ldr	r3, [pc, #20]	; (80133c0 <std+0x44>)
 80133ac:	6224      	str	r4, [r4, #32]
 80133ae:	6323      	str	r3, [r4, #48]	; 0x30
 80133b0:	bd10      	pop	{r4, pc}
 80133b2:	bf00      	nop
 80133b4:	08013791 	.word	0x08013791
 80133b8:	080137b3 	.word	0x080137b3
 80133bc:	080137eb 	.word	0x080137eb
 80133c0:	0801380f 	.word	0x0801380f

080133c4 <_cleanup_r>:
 80133c4:	4901      	ldr	r1, [pc, #4]	; (80133cc <_cleanup_r+0x8>)
 80133c6:	f000 b8af 	b.w	8013528 <_fwalk_reent>
 80133ca:	bf00      	nop
 80133cc:	08013305 	.word	0x08013305

080133d0 <__sfmoreglue>:
 80133d0:	b570      	push	{r4, r5, r6, lr}
 80133d2:	2268      	movs	r2, #104	; 0x68
 80133d4:	1e4d      	subs	r5, r1, #1
 80133d6:	4355      	muls	r5, r2
 80133d8:	460e      	mov	r6, r1
 80133da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80133de:	f7ff fb09 	bl	80129f4 <_malloc_r>
 80133e2:	4604      	mov	r4, r0
 80133e4:	b140      	cbz	r0, 80133f8 <__sfmoreglue+0x28>
 80133e6:	2100      	movs	r1, #0
 80133e8:	e9c0 1600 	strd	r1, r6, [r0]
 80133ec:	300c      	adds	r0, #12
 80133ee:	60a0      	str	r0, [r4, #8]
 80133f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80133f4:	f7fd fae8 	bl	80109c8 <memset>
 80133f8:	4620      	mov	r0, r4
 80133fa:	bd70      	pop	{r4, r5, r6, pc}

080133fc <__sfp_lock_acquire>:
 80133fc:	4801      	ldr	r0, [pc, #4]	; (8013404 <__sfp_lock_acquire+0x8>)
 80133fe:	f000 b8b3 	b.w	8013568 <__retarget_lock_acquire_recursive>
 8013402:	bf00      	nop
 8013404:	2400ef01 	.word	0x2400ef01

08013408 <__sfp_lock_release>:
 8013408:	4801      	ldr	r0, [pc, #4]	; (8013410 <__sfp_lock_release+0x8>)
 801340a:	f000 b8ae 	b.w	801356a <__retarget_lock_release_recursive>
 801340e:	bf00      	nop
 8013410:	2400ef01 	.word	0x2400ef01

08013414 <__sinit_lock_acquire>:
 8013414:	4801      	ldr	r0, [pc, #4]	; (801341c <__sinit_lock_acquire+0x8>)
 8013416:	f000 b8a7 	b.w	8013568 <__retarget_lock_acquire_recursive>
 801341a:	bf00      	nop
 801341c:	2400ef02 	.word	0x2400ef02

08013420 <__sinit_lock_release>:
 8013420:	4801      	ldr	r0, [pc, #4]	; (8013428 <__sinit_lock_release+0x8>)
 8013422:	f000 b8a2 	b.w	801356a <__retarget_lock_release_recursive>
 8013426:	bf00      	nop
 8013428:	2400ef02 	.word	0x2400ef02

0801342c <__sinit>:
 801342c:	b510      	push	{r4, lr}
 801342e:	4604      	mov	r4, r0
 8013430:	f7ff fff0 	bl	8013414 <__sinit_lock_acquire>
 8013434:	69a3      	ldr	r3, [r4, #24]
 8013436:	b11b      	cbz	r3, 8013440 <__sinit+0x14>
 8013438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801343c:	f7ff bff0 	b.w	8013420 <__sinit_lock_release>
 8013440:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013444:	6523      	str	r3, [r4, #80]	; 0x50
 8013446:	4b13      	ldr	r3, [pc, #76]	; (8013494 <__sinit+0x68>)
 8013448:	4a13      	ldr	r2, [pc, #76]	; (8013498 <__sinit+0x6c>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	62a2      	str	r2, [r4, #40]	; 0x28
 801344e:	42a3      	cmp	r3, r4
 8013450:	bf04      	itt	eq
 8013452:	2301      	moveq	r3, #1
 8013454:	61a3      	streq	r3, [r4, #24]
 8013456:	4620      	mov	r0, r4
 8013458:	f000 f820 	bl	801349c <__sfp>
 801345c:	6060      	str	r0, [r4, #4]
 801345e:	4620      	mov	r0, r4
 8013460:	f000 f81c 	bl	801349c <__sfp>
 8013464:	60a0      	str	r0, [r4, #8]
 8013466:	4620      	mov	r0, r4
 8013468:	f000 f818 	bl	801349c <__sfp>
 801346c:	2200      	movs	r2, #0
 801346e:	60e0      	str	r0, [r4, #12]
 8013470:	2104      	movs	r1, #4
 8013472:	6860      	ldr	r0, [r4, #4]
 8013474:	f7ff ff82 	bl	801337c <std>
 8013478:	68a0      	ldr	r0, [r4, #8]
 801347a:	2201      	movs	r2, #1
 801347c:	2109      	movs	r1, #9
 801347e:	f7ff ff7d 	bl	801337c <std>
 8013482:	68e0      	ldr	r0, [r4, #12]
 8013484:	2202      	movs	r2, #2
 8013486:	2112      	movs	r1, #18
 8013488:	f7ff ff78 	bl	801337c <std>
 801348c:	2301      	movs	r3, #1
 801348e:	61a3      	str	r3, [r4, #24]
 8013490:	e7d2      	b.n	8013438 <__sinit+0xc>
 8013492:	bf00      	nop
 8013494:	0801df28 	.word	0x0801df28
 8013498:	080133c5 	.word	0x080133c5

0801349c <__sfp>:
 801349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801349e:	4607      	mov	r7, r0
 80134a0:	f7ff ffac 	bl	80133fc <__sfp_lock_acquire>
 80134a4:	4b1e      	ldr	r3, [pc, #120]	; (8013520 <__sfp+0x84>)
 80134a6:	681e      	ldr	r6, [r3, #0]
 80134a8:	69b3      	ldr	r3, [r6, #24]
 80134aa:	b913      	cbnz	r3, 80134b2 <__sfp+0x16>
 80134ac:	4630      	mov	r0, r6
 80134ae:	f7ff ffbd 	bl	801342c <__sinit>
 80134b2:	3648      	adds	r6, #72	; 0x48
 80134b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80134b8:	3b01      	subs	r3, #1
 80134ba:	d503      	bpl.n	80134c4 <__sfp+0x28>
 80134bc:	6833      	ldr	r3, [r6, #0]
 80134be:	b30b      	cbz	r3, 8013504 <__sfp+0x68>
 80134c0:	6836      	ldr	r6, [r6, #0]
 80134c2:	e7f7      	b.n	80134b4 <__sfp+0x18>
 80134c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80134c8:	b9d5      	cbnz	r5, 8013500 <__sfp+0x64>
 80134ca:	4b16      	ldr	r3, [pc, #88]	; (8013524 <__sfp+0x88>)
 80134cc:	60e3      	str	r3, [r4, #12]
 80134ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80134d2:	6665      	str	r5, [r4, #100]	; 0x64
 80134d4:	f000 f847 	bl	8013566 <__retarget_lock_init_recursive>
 80134d8:	f7ff ff96 	bl	8013408 <__sfp_lock_release>
 80134dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80134e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80134e4:	6025      	str	r5, [r4, #0]
 80134e6:	61a5      	str	r5, [r4, #24]
 80134e8:	2208      	movs	r2, #8
 80134ea:	4629      	mov	r1, r5
 80134ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80134f0:	f7fd fa6a 	bl	80109c8 <memset>
 80134f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80134f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80134fc:	4620      	mov	r0, r4
 80134fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013500:	3468      	adds	r4, #104	; 0x68
 8013502:	e7d9      	b.n	80134b8 <__sfp+0x1c>
 8013504:	2104      	movs	r1, #4
 8013506:	4638      	mov	r0, r7
 8013508:	f7ff ff62 	bl	80133d0 <__sfmoreglue>
 801350c:	4604      	mov	r4, r0
 801350e:	6030      	str	r0, [r6, #0]
 8013510:	2800      	cmp	r0, #0
 8013512:	d1d5      	bne.n	80134c0 <__sfp+0x24>
 8013514:	f7ff ff78 	bl	8013408 <__sfp_lock_release>
 8013518:	230c      	movs	r3, #12
 801351a:	603b      	str	r3, [r7, #0]
 801351c:	e7ee      	b.n	80134fc <__sfp+0x60>
 801351e:	bf00      	nop
 8013520:	0801df28 	.word	0x0801df28
 8013524:	ffff0001 	.word	0xffff0001

08013528 <_fwalk_reent>:
 8013528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801352c:	4606      	mov	r6, r0
 801352e:	4688      	mov	r8, r1
 8013530:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013534:	2700      	movs	r7, #0
 8013536:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801353a:	f1b9 0901 	subs.w	r9, r9, #1
 801353e:	d505      	bpl.n	801354c <_fwalk_reent+0x24>
 8013540:	6824      	ldr	r4, [r4, #0]
 8013542:	2c00      	cmp	r4, #0
 8013544:	d1f7      	bne.n	8013536 <_fwalk_reent+0xe>
 8013546:	4638      	mov	r0, r7
 8013548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801354c:	89ab      	ldrh	r3, [r5, #12]
 801354e:	2b01      	cmp	r3, #1
 8013550:	d907      	bls.n	8013562 <_fwalk_reent+0x3a>
 8013552:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013556:	3301      	adds	r3, #1
 8013558:	d003      	beq.n	8013562 <_fwalk_reent+0x3a>
 801355a:	4629      	mov	r1, r5
 801355c:	4630      	mov	r0, r6
 801355e:	47c0      	blx	r8
 8013560:	4307      	orrs	r7, r0
 8013562:	3568      	adds	r5, #104	; 0x68
 8013564:	e7e9      	b.n	801353a <_fwalk_reent+0x12>

08013566 <__retarget_lock_init_recursive>:
 8013566:	4770      	bx	lr

08013568 <__retarget_lock_acquire_recursive>:
 8013568:	4770      	bx	lr

0801356a <__retarget_lock_release_recursive>:
 801356a:	4770      	bx	lr

0801356c <__swhatbuf_r>:
 801356c:	b570      	push	{r4, r5, r6, lr}
 801356e:	460e      	mov	r6, r1
 8013570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013574:	2900      	cmp	r1, #0
 8013576:	b096      	sub	sp, #88	; 0x58
 8013578:	4614      	mov	r4, r2
 801357a:	461d      	mov	r5, r3
 801357c:	da08      	bge.n	8013590 <__swhatbuf_r+0x24>
 801357e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013582:	2200      	movs	r2, #0
 8013584:	602a      	str	r2, [r5, #0]
 8013586:	061a      	lsls	r2, r3, #24
 8013588:	d410      	bmi.n	80135ac <__swhatbuf_r+0x40>
 801358a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801358e:	e00e      	b.n	80135ae <__swhatbuf_r+0x42>
 8013590:	466a      	mov	r2, sp
 8013592:	f000 f96f 	bl	8013874 <_fstat_r>
 8013596:	2800      	cmp	r0, #0
 8013598:	dbf1      	blt.n	801357e <__swhatbuf_r+0x12>
 801359a:	9a01      	ldr	r2, [sp, #4]
 801359c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80135a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80135a4:	425a      	negs	r2, r3
 80135a6:	415a      	adcs	r2, r3
 80135a8:	602a      	str	r2, [r5, #0]
 80135aa:	e7ee      	b.n	801358a <__swhatbuf_r+0x1e>
 80135ac:	2340      	movs	r3, #64	; 0x40
 80135ae:	2000      	movs	r0, #0
 80135b0:	6023      	str	r3, [r4, #0]
 80135b2:	b016      	add	sp, #88	; 0x58
 80135b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080135b8 <__smakebuf_r>:
 80135b8:	898b      	ldrh	r3, [r1, #12]
 80135ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80135bc:	079d      	lsls	r5, r3, #30
 80135be:	4606      	mov	r6, r0
 80135c0:	460c      	mov	r4, r1
 80135c2:	d507      	bpl.n	80135d4 <__smakebuf_r+0x1c>
 80135c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80135c8:	6023      	str	r3, [r4, #0]
 80135ca:	6123      	str	r3, [r4, #16]
 80135cc:	2301      	movs	r3, #1
 80135ce:	6163      	str	r3, [r4, #20]
 80135d0:	b002      	add	sp, #8
 80135d2:	bd70      	pop	{r4, r5, r6, pc}
 80135d4:	ab01      	add	r3, sp, #4
 80135d6:	466a      	mov	r2, sp
 80135d8:	f7ff ffc8 	bl	801356c <__swhatbuf_r>
 80135dc:	9900      	ldr	r1, [sp, #0]
 80135de:	4605      	mov	r5, r0
 80135e0:	4630      	mov	r0, r6
 80135e2:	f7ff fa07 	bl	80129f4 <_malloc_r>
 80135e6:	b948      	cbnz	r0, 80135fc <__smakebuf_r+0x44>
 80135e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135ec:	059a      	lsls	r2, r3, #22
 80135ee:	d4ef      	bmi.n	80135d0 <__smakebuf_r+0x18>
 80135f0:	f023 0303 	bic.w	r3, r3, #3
 80135f4:	f043 0302 	orr.w	r3, r3, #2
 80135f8:	81a3      	strh	r3, [r4, #12]
 80135fa:	e7e3      	b.n	80135c4 <__smakebuf_r+0xc>
 80135fc:	4b0d      	ldr	r3, [pc, #52]	; (8013634 <__smakebuf_r+0x7c>)
 80135fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8013600:	89a3      	ldrh	r3, [r4, #12]
 8013602:	6020      	str	r0, [r4, #0]
 8013604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013608:	81a3      	strh	r3, [r4, #12]
 801360a:	9b00      	ldr	r3, [sp, #0]
 801360c:	6163      	str	r3, [r4, #20]
 801360e:	9b01      	ldr	r3, [sp, #4]
 8013610:	6120      	str	r0, [r4, #16]
 8013612:	b15b      	cbz	r3, 801362c <__smakebuf_r+0x74>
 8013614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013618:	4630      	mov	r0, r6
 801361a:	f000 f93d 	bl	8013898 <_isatty_r>
 801361e:	b128      	cbz	r0, 801362c <__smakebuf_r+0x74>
 8013620:	89a3      	ldrh	r3, [r4, #12]
 8013622:	f023 0303 	bic.w	r3, r3, #3
 8013626:	f043 0301 	orr.w	r3, r3, #1
 801362a:	81a3      	strh	r3, [r4, #12]
 801362c:	89a0      	ldrh	r0, [r4, #12]
 801362e:	4305      	orrs	r5, r0
 8013630:	81a5      	strh	r5, [r4, #12]
 8013632:	e7cd      	b.n	80135d0 <__smakebuf_r+0x18>
 8013634:	080133c5 	.word	0x080133c5

08013638 <__ascii_mbtowc>:
 8013638:	b082      	sub	sp, #8
 801363a:	b901      	cbnz	r1, 801363e <__ascii_mbtowc+0x6>
 801363c:	a901      	add	r1, sp, #4
 801363e:	b142      	cbz	r2, 8013652 <__ascii_mbtowc+0x1a>
 8013640:	b14b      	cbz	r3, 8013656 <__ascii_mbtowc+0x1e>
 8013642:	7813      	ldrb	r3, [r2, #0]
 8013644:	600b      	str	r3, [r1, #0]
 8013646:	7812      	ldrb	r2, [r2, #0]
 8013648:	1e10      	subs	r0, r2, #0
 801364a:	bf18      	it	ne
 801364c:	2001      	movne	r0, #1
 801364e:	b002      	add	sp, #8
 8013650:	4770      	bx	lr
 8013652:	4610      	mov	r0, r2
 8013654:	e7fb      	b.n	801364e <__ascii_mbtowc+0x16>
 8013656:	f06f 0001 	mvn.w	r0, #1
 801365a:	e7f8      	b.n	801364e <__ascii_mbtowc+0x16>

0801365c <memmove>:
 801365c:	4288      	cmp	r0, r1
 801365e:	b510      	push	{r4, lr}
 8013660:	eb01 0402 	add.w	r4, r1, r2
 8013664:	d902      	bls.n	801366c <memmove+0x10>
 8013666:	4284      	cmp	r4, r0
 8013668:	4623      	mov	r3, r4
 801366a:	d807      	bhi.n	801367c <memmove+0x20>
 801366c:	1e43      	subs	r3, r0, #1
 801366e:	42a1      	cmp	r1, r4
 8013670:	d008      	beq.n	8013684 <memmove+0x28>
 8013672:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013676:	f803 2f01 	strb.w	r2, [r3, #1]!
 801367a:	e7f8      	b.n	801366e <memmove+0x12>
 801367c:	4402      	add	r2, r0
 801367e:	4601      	mov	r1, r0
 8013680:	428a      	cmp	r2, r1
 8013682:	d100      	bne.n	8013686 <memmove+0x2a>
 8013684:	bd10      	pop	{r4, pc}
 8013686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801368a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801368e:	e7f7      	b.n	8013680 <memmove+0x24>

08013690 <__malloc_lock>:
 8013690:	4801      	ldr	r0, [pc, #4]	; (8013698 <__malloc_lock+0x8>)
 8013692:	f7ff bf69 	b.w	8013568 <__retarget_lock_acquire_recursive>
 8013696:	bf00      	nop
 8013698:	2400ef00 	.word	0x2400ef00

0801369c <__malloc_unlock>:
 801369c:	4801      	ldr	r0, [pc, #4]	; (80136a4 <__malloc_unlock+0x8>)
 801369e:	f7ff bf64 	b.w	801356a <__retarget_lock_release_recursive>
 80136a2:	bf00      	nop
 80136a4:	2400ef00 	.word	0x2400ef00

080136a8 <_realloc_r>:
 80136a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136ac:	4680      	mov	r8, r0
 80136ae:	4614      	mov	r4, r2
 80136b0:	460e      	mov	r6, r1
 80136b2:	b921      	cbnz	r1, 80136be <_realloc_r+0x16>
 80136b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136b8:	4611      	mov	r1, r2
 80136ba:	f7ff b99b 	b.w	80129f4 <_malloc_r>
 80136be:	b92a      	cbnz	r2, 80136cc <_realloc_r+0x24>
 80136c0:	f7ff f92c 	bl	801291c <_free_r>
 80136c4:	4625      	mov	r5, r4
 80136c6:	4628      	mov	r0, r5
 80136c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136cc:	f000 f906 	bl	80138dc <_malloc_usable_size_r>
 80136d0:	4284      	cmp	r4, r0
 80136d2:	4607      	mov	r7, r0
 80136d4:	d802      	bhi.n	80136dc <_realloc_r+0x34>
 80136d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80136da:	d812      	bhi.n	8013702 <_realloc_r+0x5a>
 80136dc:	4621      	mov	r1, r4
 80136de:	4640      	mov	r0, r8
 80136e0:	f7ff f988 	bl	80129f4 <_malloc_r>
 80136e4:	4605      	mov	r5, r0
 80136e6:	2800      	cmp	r0, #0
 80136e8:	d0ed      	beq.n	80136c6 <_realloc_r+0x1e>
 80136ea:	42bc      	cmp	r4, r7
 80136ec:	4622      	mov	r2, r4
 80136ee:	4631      	mov	r1, r6
 80136f0:	bf28      	it	cs
 80136f2:	463a      	movcs	r2, r7
 80136f4:	f7fd f95a 	bl	80109ac <memcpy>
 80136f8:	4631      	mov	r1, r6
 80136fa:	4640      	mov	r0, r8
 80136fc:	f7ff f90e 	bl	801291c <_free_r>
 8013700:	e7e1      	b.n	80136c6 <_realloc_r+0x1e>
 8013702:	4635      	mov	r5, r6
 8013704:	e7df      	b.n	80136c6 <_realloc_r+0x1e>

08013706 <_raise_r>:
 8013706:	291f      	cmp	r1, #31
 8013708:	b538      	push	{r3, r4, r5, lr}
 801370a:	4604      	mov	r4, r0
 801370c:	460d      	mov	r5, r1
 801370e:	d904      	bls.n	801371a <_raise_r+0x14>
 8013710:	2316      	movs	r3, #22
 8013712:	6003      	str	r3, [r0, #0]
 8013714:	f04f 30ff 	mov.w	r0, #4294967295
 8013718:	bd38      	pop	{r3, r4, r5, pc}
 801371a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801371c:	b112      	cbz	r2, 8013724 <_raise_r+0x1e>
 801371e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013722:	b94b      	cbnz	r3, 8013738 <_raise_r+0x32>
 8013724:	4620      	mov	r0, r4
 8013726:	f000 f831 	bl	801378c <_getpid_r>
 801372a:	462a      	mov	r2, r5
 801372c:	4601      	mov	r1, r0
 801372e:	4620      	mov	r0, r4
 8013730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013734:	f000 b818 	b.w	8013768 <_kill_r>
 8013738:	2b01      	cmp	r3, #1
 801373a:	d00a      	beq.n	8013752 <_raise_r+0x4c>
 801373c:	1c59      	adds	r1, r3, #1
 801373e:	d103      	bne.n	8013748 <_raise_r+0x42>
 8013740:	2316      	movs	r3, #22
 8013742:	6003      	str	r3, [r0, #0]
 8013744:	2001      	movs	r0, #1
 8013746:	e7e7      	b.n	8013718 <_raise_r+0x12>
 8013748:	2400      	movs	r4, #0
 801374a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801374e:	4628      	mov	r0, r5
 8013750:	4798      	blx	r3
 8013752:	2000      	movs	r0, #0
 8013754:	e7e0      	b.n	8013718 <_raise_r+0x12>
	...

08013758 <raise>:
 8013758:	4b02      	ldr	r3, [pc, #8]	; (8013764 <raise+0xc>)
 801375a:	4601      	mov	r1, r0
 801375c:	6818      	ldr	r0, [r3, #0]
 801375e:	f7ff bfd2 	b.w	8013706 <_raise_r>
 8013762:	bf00      	nop
 8013764:	24000558 	.word	0x24000558

08013768 <_kill_r>:
 8013768:	b538      	push	{r3, r4, r5, lr}
 801376a:	4d07      	ldr	r5, [pc, #28]	; (8013788 <_kill_r+0x20>)
 801376c:	2300      	movs	r3, #0
 801376e:	4604      	mov	r4, r0
 8013770:	4608      	mov	r0, r1
 8013772:	4611      	mov	r1, r2
 8013774:	602b      	str	r3, [r5, #0]
 8013776:	f7f2 fde7 	bl	8006348 <_kill>
 801377a:	1c43      	adds	r3, r0, #1
 801377c:	d102      	bne.n	8013784 <_kill_r+0x1c>
 801377e:	682b      	ldr	r3, [r5, #0]
 8013780:	b103      	cbz	r3, 8013784 <_kill_r+0x1c>
 8013782:	6023      	str	r3, [r4, #0]
 8013784:	bd38      	pop	{r3, r4, r5, pc}
 8013786:	bf00      	nop
 8013788:	2400ef04 	.word	0x2400ef04

0801378c <_getpid_r>:
 801378c:	f7f2 bdda 	b.w	8006344 <_getpid>

08013790 <__sread>:
 8013790:	b510      	push	{r4, lr}
 8013792:	460c      	mov	r4, r1
 8013794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013798:	f000 f8a8 	bl	80138ec <_read_r>
 801379c:	2800      	cmp	r0, #0
 801379e:	bfab      	itete	ge
 80137a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80137a2:	89a3      	ldrhlt	r3, [r4, #12]
 80137a4:	181b      	addge	r3, r3, r0
 80137a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80137aa:	bfac      	ite	ge
 80137ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80137ae:	81a3      	strhlt	r3, [r4, #12]
 80137b0:	bd10      	pop	{r4, pc}

080137b2 <__swrite>:
 80137b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137b6:	461f      	mov	r7, r3
 80137b8:	898b      	ldrh	r3, [r1, #12]
 80137ba:	05db      	lsls	r3, r3, #23
 80137bc:	4605      	mov	r5, r0
 80137be:	460c      	mov	r4, r1
 80137c0:	4616      	mov	r6, r2
 80137c2:	d505      	bpl.n	80137d0 <__swrite+0x1e>
 80137c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137c8:	2302      	movs	r3, #2
 80137ca:	2200      	movs	r2, #0
 80137cc:	f000 f874 	bl	80138b8 <_lseek_r>
 80137d0:	89a3      	ldrh	r3, [r4, #12]
 80137d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80137d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80137da:	81a3      	strh	r3, [r4, #12]
 80137dc:	4632      	mov	r2, r6
 80137de:	463b      	mov	r3, r7
 80137e0:	4628      	mov	r0, r5
 80137e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137e6:	f000 b823 	b.w	8013830 <_write_r>

080137ea <__sseek>:
 80137ea:	b510      	push	{r4, lr}
 80137ec:	460c      	mov	r4, r1
 80137ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137f2:	f000 f861 	bl	80138b8 <_lseek_r>
 80137f6:	1c43      	adds	r3, r0, #1
 80137f8:	89a3      	ldrh	r3, [r4, #12]
 80137fa:	bf15      	itete	ne
 80137fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80137fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013802:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013806:	81a3      	strheq	r3, [r4, #12]
 8013808:	bf18      	it	ne
 801380a:	81a3      	strhne	r3, [r4, #12]
 801380c:	bd10      	pop	{r4, pc}

0801380e <__sclose>:
 801380e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013812:	f000 b81f 	b.w	8013854 <_close_r>

08013816 <__ascii_wctomb>:
 8013816:	b149      	cbz	r1, 801382c <__ascii_wctomb+0x16>
 8013818:	2aff      	cmp	r2, #255	; 0xff
 801381a:	bf85      	ittet	hi
 801381c:	238a      	movhi	r3, #138	; 0x8a
 801381e:	6003      	strhi	r3, [r0, #0]
 8013820:	700a      	strbls	r2, [r1, #0]
 8013822:	f04f 30ff 	movhi.w	r0, #4294967295
 8013826:	bf98      	it	ls
 8013828:	2001      	movls	r0, #1
 801382a:	4770      	bx	lr
 801382c:	4608      	mov	r0, r1
 801382e:	4770      	bx	lr

08013830 <_write_r>:
 8013830:	b538      	push	{r3, r4, r5, lr}
 8013832:	4d07      	ldr	r5, [pc, #28]	; (8013850 <_write_r+0x20>)
 8013834:	4604      	mov	r4, r0
 8013836:	4608      	mov	r0, r1
 8013838:	4611      	mov	r1, r2
 801383a:	2200      	movs	r2, #0
 801383c:	602a      	str	r2, [r5, #0]
 801383e:	461a      	mov	r2, r3
 8013840:	f7f2 fda0 	bl	8006384 <_write>
 8013844:	1c43      	adds	r3, r0, #1
 8013846:	d102      	bne.n	801384e <_write_r+0x1e>
 8013848:	682b      	ldr	r3, [r5, #0]
 801384a:	b103      	cbz	r3, 801384e <_write_r+0x1e>
 801384c:	6023      	str	r3, [r4, #0]
 801384e:	bd38      	pop	{r3, r4, r5, pc}
 8013850:	2400ef04 	.word	0x2400ef04

08013854 <_close_r>:
 8013854:	b538      	push	{r3, r4, r5, lr}
 8013856:	4d06      	ldr	r5, [pc, #24]	; (8013870 <_close_r+0x1c>)
 8013858:	2300      	movs	r3, #0
 801385a:	4604      	mov	r4, r0
 801385c:	4608      	mov	r0, r1
 801385e:	602b      	str	r3, [r5, #0]
 8013860:	f7f2 fd9e 	bl	80063a0 <_close>
 8013864:	1c43      	adds	r3, r0, #1
 8013866:	d102      	bne.n	801386e <_close_r+0x1a>
 8013868:	682b      	ldr	r3, [r5, #0]
 801386a:	b103      	cbz	r3, 801386e <_close_r+0x1a>
 801386c:	6023      	str	r3, [r4, #0]
 801386e:	bd38      	pop	{r3, r4, r5, pc}
 8013870:	2400ef04 	.word	0x2400ef04

08013874 <_fstat_r>:
 8013874:	b538      	push	{r3, r4, r5, lr}
 8013876:	4d07      	ldr	r5, [pc, #28]	; (8013894 <_fstat_r+0x20>)
 8013878:	2300      	movs	r3, #0
 801387a:	4604      	mov	r4, r0
 801387c:	4608      	mov	r0, r1
 801387e:	4611      	mov	r1, r2
 8013880:	602b      	str	r3, [r5, #0]
 8013882:	f7f2 fd91 	bl	80063a8 <_fstat>
 8013886:	1c43      	adds	r3, r0, #1
 8013888:	d102      	bne.n	8013890 <_fstat_r+0x1c>
 801388a:	682b      	ldr	r3, [r5, #0]
 801388c:	b103      	cbz	r3, 8013890 <_fstat_r+0x1c>
 801388e:	6023      	str	r3, [r4, #0]
 8013890:	bd38      	pop	{r3, r4, r5, pc}
 8013892:	bf00      	nop
 8013894:	2400ef04 	.word	0x2400ef04

08013898 <_isatty_r>:
 8013898:	b538      	push	{r3, r4, r5, lr}
 801389a:	4d06      	ldr	r5, [pc, #24]	; (80138b4 <_isatty_r+0x1c>)
 801389c:	2300      	movs	r3, #0
 801389e:	4604      	mov	r4, r0
 80138a0:	4608      	mov	r0, r1
 80138a2:	602b      	str	r3, [r5, #0]
 80138a4:	f7f2 fd86 	bl	80063b4 <_isatty>
 80138a8:	1c43      	adds	r3, r0, #1
 80138aa:	d102      	bne.n	80138b2 <_isatty_r+0x1a>
 80138ac:	682b      	ldr	r3, [r5, #0]
 80138ae:	b103      	cbz	r3, 80138b2 <_isatty_r+0x1a>
 80138b0:	6023      	str	r3, [r4, #0]
 80138b2:	bd38      	pop	{r3, r4, r5, pc}
 80138b4:	2400ef04 	.word	0x2400ef04

080138b8 <_lseek_r>:
 80138b8:	b538      	push	{r3, r4, r5, lr}
 80138ba:	4d07      	ldr	r5, [pc, #28]	; (80138d8 <_lseek_r+0x20>)
 80138bc:	4604      	mov	r4, r0
 80138be:	4608      	mov	r0, r1
 80138c0:	4611      	mov	r1, r2
 80138c2:	2200      	movs	r2, #0
 80138c4:	602a      	str	r2, [r5, #0]
 80138c6:	461a      	mov	r2, r3
 80138c8:	f7f2 fd76 	bl	80063b8 <_lseek>
 80138cc:	1c43      	adds	r3, r0, #1
 80138ce:	d102      	bne.n	80138d6 <_lseek_r+0x1e>
 80138d0:	682b      	ldr	r3, [r5, #0]
 80138d2:	b103      	cbz	r3, 80138d6 <_lseek_r+0x1e>
 80138d4:	6023      	str	r3, [r4, #0]
 80138d6:	bd38      	pop	{r3, r4, r5, pc}
 80138d8:	2400ef04 	.word	0x2400ef04

080138dc <_malloc_usable_size_r>:
 80138dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80138e0:	1f18      	subs	r0, r3, #4
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	bfbc      	itt	lt
 80138e6:	580b      	ldrlt	r3, [r1, r0]
 80138e8:	18c0      	addlt	r0, r0, r3
 80138ea:	4770      	bx	lr

080138ec <_read_r>:
 80138ec:	b538      	push	{r3, r4, r5, lr}
 80138ee:	4d07      	ldr	r5, [pc, #28]	; (801390c <_read_r+0x20>)
 80138f0:	4604      	mov	r4, r0
 80138f2:	4608      	mov	r0, r1
 80138f4:	4611      	mov	r1, r2
 80138f6:	2200      	movs	r2, #0
 80138f8:	602a      	str	r2, [r5, #0]
 80138fa:	461a      	mov	r2, r3
 80138fc:	f7f2 fd34 	bl	8006368 <_read>
 8013900:	1c43      	adds	r3, r0, #1
 8013902:	d102      	bne.n	801390a <_read_r+0x1e>
 8013904:	682b      	ldr	r3, [r5, #0]
 8013906:	b103      	cbz	r3, 801390a <_read_r+0x1e>
 8013908:	6023      	str	r3, [r4, #0]
 801390a:	bd38      	pop	{r3, r4, r5, pc}
 801390c:	2400ef04 	.word	0x2400ef04

08013910 <exp>:
 8013910:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8013912:	ee10 3a90 	vmov	r3, s1
 8013916:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801391a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801391e:	18a2      	adds	r2, r4, r2
 8013920:	2a3e      	cmp	r2, #62	; 0x3e
 8013922:	ee10 1a10 	vmov	r1, s0
 8013926:	d922      	bls.n	801396e <exp+0x5e>
 8013928:	2a00      	cmp	r2, #0
 801392a:	da06      	bge.n	801393a <exp+0x2a>
 801392c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013930:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013934:	b004      	add	sp, #16
 8013936:	bcf0      	pop	{r4, r5, r6, r7}
 8013938:	4770      	bx	lr
 801393a:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 801393e:	f04f 0000 	mov.w	r0, #0
 8013942:	d913      	bls.n	801396c <exp+0x5c>
 8013944:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8013948:	bf08      	it	eq
 801394a:	4281      	cmpeq	r1, r0
 801394c:	f000 80a0 	beq.w	8013a90 <exp+0x180>
 8013950:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013954:	4294      	cmp	r4, r2
 8013956:	d0e9      	beq.n	801392c <exp+0x1c>
 8013958:	4283      	cmp	r3, r0
 801395a:	da03      	bge.n	8013964 <exp+0x54>
 801395c:	b004      	add	sp, #16
 801395e:	bcf0      	pop	{r4, r5, r6, r7}
 8013960:	f000 b8c6 	b.w	8013af0 <__math_uflow>
 8013964:	b004      	add	sp, #16
 8013966:	bcf0      	pop	{r4, r5, r6, r7}
 8013968:	f000 b8ca 	b.w	8013b00 <__math_oflow>
 801396c:	4604      	mov	r4, r0
 801396e:	4950      	ldr	r1, [pc, #320]	; (8013ab0 <exp+0x1a0>)
 8013970:	ed91 6b02 	vldr	d6, [r1, #8]
 8013974:	ed91 5b00 	vldr	d5, [r1]
 8013978:	eeb0 7b46 	vmov.f64	d7, d6
 801397c:	eea5 7b00 	vfma.f64	d7, d5, d0
 8013980:	ee17 5a10 	vmov	r5, s14
 8013984:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013988:	ed91 6b04 	vldr	d6, [r1, #16]
 801398c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8013990:	eea6 0b07 	vfma.f64	d0, d6, d7
 8013994:	ed91 6b06 	vldr	d6, [r1, #24]
 8013998:	18d8      	adds	r0, r3, r3
 801399a:	f100 030f 	add.w	r3, r0, #15
 801399e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80139a2:	eea6 0b07 	vfma.f64	d0, d6, d7
 80139a6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 80139aa:	ee20 7b00 	vmul.f64	d7, d0, d0
 80139ae:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 80139b2:	ed91 5b08 	vldr	d5, [r1, #32]
 80139b6:	ee30 6b06 	vadd.f64	d6, d0, d6
 80139ba:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80139be:	eea4 5b00 	vfma.f64	d5, d4, d0
 80139c2:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 80139c6:	eea5 6b07 	vfma.f64	d6, d5, d7
 80139ca:	ee27 7b07 	vmul.f64	d7, d7, d7
 80139ce:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80139d2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 80139d6:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80139da:	eea4 5b00 	vfma.f64	d5, d4, d0
 80139de:	2600      	movs	r6, #0
 80139e0:	19f2      	adds	r2, r6, r7
 80139e2:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 80139e6:	eea7 6b05 	vfma.f64	d6, d7, d5
 80139ea:	2c00      	cmp	r4, #0
 80139ec:	d14b      	bne.n	8013a86 <exp+0x176>
 80139ee:	42b5      	cmp	r5, r6
 80139f0:	db10      	blt.n	8013a14 <exp+0x104>
 80139f2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80139f6:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8013a98 <exp+0x188>
 80139fa:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80139fe:	4610      	mov	r0, r2
 8013a00:	ec41 0b10 	vmov	d0, r0, r1
 8013a04:	eea6 0b00 	vfma.f64	d0, d6, d0
 8013a08:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013a0c:	b004      	add	sp, #16
 8013a0e:	bcf0      	pop	{r4, r5, r6, r7}
 8013a10:	f000 b8ae 	b.w	8013b70 <__math_check_oflow>
 8013a14:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8013a18:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8013a1c:	4610      	mov	r0, r2
 8013a1e:	ec41 0b17 	vmov	d7, r0, r1
 8013a22:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8013a26:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013a2a:	ee37 5b06 	vadd.f64	d5, d7, d6
 8013a2e:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8013a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a36:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8013aa0 <exp+0x190>
 8013a3a:	d51e      	bpl.n	8013a7a <exp+0x16a>
 8013a3c:	ee35 3b04 	vadd.f64	d3, d5, d4
 8013a40:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013a44:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013a48:	ee34 6b43 	vsub.f64	d6, d4, d3
 8013a4c:	ee36 5b05 	vadd.f64	d5, d6, d5
 8013a50:	ee35 5b07 	vadd.f64	d5, d5, d7
 8013a54:	ee35 5b03 	vadd.f64	d5, d5, d3
 8013a58:	ee35 5b44 	vsub.f64	d5, d5, d4
 8013a5c:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8013a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a64:	d101      	bne.n	8013a6a <exp+0x15a>
 8013a66:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8013aa8 <exp+0x198>
 8013a6a:	ed8d 0b00 	vstr	d0, [sp]
 8013a6e:	ed9d 7b00 	vldr	d7, [sp]
 8013a72:	ee27 7b00 	vmul.f64	d7, d7, d0
 8013a76:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013a7a:	ee25 0b00 	vmul.f64	d0, d5, d0
 8013a7e:	b004      	add	sp, #16
 8013a80:	bcf0      	pop	{r4, r5, r6, r7}
 8013a82:	f000 b86c 	b.w	8013b5e <__math_check_uflow>
 8013a86:	ec43 2b10 	vmov	d0, r2, r3
 8013a8a:	eea6 0b00 	vfma.f64	d0, d6, d0
 8013a8e:	e751      	b.n	8013934 <exp+0x24>
 8013a90:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8013aa8 <exp+0x198>
 8013a94:	e74e      	b.n	8013934 <exp+0x24>
 8013a96:	bf00      	nop
 8013a98:	00000000 	.word	0x00000000
 8013a9c:	7f000000 	.word	0x7f000000
 8013aa0:	00000000 	.word	0x00000000
 8013aa4:	00100000 	.word	0x00100000
	...
 8013ab0:	0801e2c0 	.word	0x0801e2c0

08013ab4 <with_errno>:
 8013ab4:	b513      	push	{r0, r1, r4, lr}
 8013ab6:	4604      	mov	r4, r0
 8013ab8:	ed8d 0b00 	vstr	d0, [sp]
 8013abc:	f7fc ff4c 	bl	8010958 <__errno>
 8013ac0:	ed9d 0b00 	vldr	d0, [sp]
 8013ac4:	6004      	str	r4, [r0, #0]
 8013ac6:	b002      	add	sp, #8
 8013ac8:	bd10      	pop	{r4, pc}

08013aca <xflow>:
 8013aca:	b082      	sub	sp, #8
 8013acc:	b158      	cbz	r0, 8013ae6 <xflow+0x1c>
 8013ace:	eeb1 7b40 	vneg.f64	d7, d0
 8013ad2:	ed8d 7b00 	vstr	d7, [sp]
 8013ad6:	ed9d 7b00 	vldr	d7, [sp]
 8013ada:	2022      	movs	r0, #34	; 0x22
 8013adc:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013ae0:	b002      	add	sp, #8
 8013ae2:	f7ff bfe7 	b.w	8013ab4 <with_errno>
 8013ae6:	eeb0 7b40 	vmov.f64	d7, d0
 8013aea:	e7f2      	b.n	8013ad2 <xflow+0x8>
 8013aec:	0000      	movs	r0, r0
	...

08013af0 <__math_uflow>:
 8013af0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013af8 <__math_uflow+0x8>
 8013af4:	f7ff bfe9 	b.w	8013aca <xflow>
 8013af8:	00000000 	.word	0x00000000
 8013afc:	10000000 	.word	0x10000000

08013b00 <__math_oflow>:
 8013b00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013b08 <__math_oflow+0x8>
 8013b04:	f7ff bfe1 	b.w	8013aca <xflow>
 8013b08:	00000000 	.word	0x00000000
 8013b0c:	70000000 	.word	0x70000000

08013b10 <__math_divzero>:
 8013b10:	b082      	sub	sp, #8
 8013b12:	2800      	cmp	r0, #0
 8013b14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013b18:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8013b1c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8013b20:	ed8d 7b00 	vstr	d7, [sp]
 8013b24:	ed9d 0b00 	vldr	d0, [sp]
 8013b28:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8013b38 <__math_divzero+0x28>
 8013b2c:	2022      	movs	r0, #34	; 0x22
 8013b2e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8013b32:	b002      	add	sp, #8
 8013b34:	f7ff bfbe 	b.w	8013ab4 <with_errno>
	...

08013b40 <__math_invalid>:
 8013b40:	eeb0 7b40 	vmov.f64	d7, d0
 8013b44:	eeb4 7b47 	vcmp.f64	d7, d7
 8013b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b4c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8013b50:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8013b54:	d602      	bvs.n	8013b5c <__math_invalid+0x1c>
 8013b56:	2021      	movs	r0, #33	; 0x21
 8013b58:	f7ff bfac 	b.w	8013ab4 <with_errno>
 8013b5c:	4770      	bx	lr

08013b5e <__math_check_uflow>:
 8013b5e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b66:	d102      	bne.n	8013b6e <__math_check_uflow+0x10>
 8013b68:	2022      	movs	r0, #34	; 0x22
 8013b6a:	f7ff bfa3 	b.w	8013ab4 <with_errno>
 8013b6e:	4770      	bx	lr

08013b70 <__math_check_oflow>:
 8013b70:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8013b90 <__math_check_oflow+0x20>
 8013b74:	eeb0 7bc0 	vabs.f64	d7, d0
 8013b78:	eeb4 7b46 	vcmp.f64	d7, d6
 8013b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b80:	dd02      	ble.n	8013b88 <__math_check_oflow+0x18>
 8013b82:	2022      	movs	r0, #34	; 0x22
 8013b84:	f7ff bf96 	b.w	8013ab4 <with_errno>
 8013b88:	4770      	bx	lr
 8013b8a:	bf00      	nop
 8013b8c:	f3af 8000 	nop.w
 8013b90:	ffffffff 	.word	0xffffffff
 8013b94:	7fefffff 	.word	0x7fefffff

08013b98 <cos>:
 8013b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b9a:	eeb0 7b40 	vmov.f64	d7, d0
 8013b9e:	ee17 3a90 	vmov	r3, s15
 8013ba2:	4a21      	ldr	r2, [pc, #132]	; (8013c28 <cos+0x90>)
 8013ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013ba8:	4293      	cmp	r3, r2
 8013baa:	dc06      	bgt.n	8013bba <cos+0x22>
 8013bac:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8013c20 <cos+0x88>
 8013bb0:	b005      	add	sp, #20
 8013bb2:	f85d eb04 	ldr.w	lr, [sp], #4
 8013bb6:	f000 ba6f 	b.w	8014098 <__kernel_cos>
 8013bba:	4a1c      	ldr	r2, [pc, #112]	; (8013c2c <cos+0x94>)
 8013bbc:	4293      	cmp	r3, r2
 8013bbe:	dd04      	ble.n	8013bca <cos+0x32>
 8013bc0:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013bc4:	b005      	add	sp, #20
 8013bc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8013bca:	4668      	mov	r0, sp
 8013bcc:	f000 f920 	bl	8013e10 <__ieee754_rem_pio2>
 8013bd0:	f000 0003 	and.w	r0, r0, #3
 8013bd4:	2801      	cmp	r0, #1
 8013bd6:	d009      	beq.n	8013bec <cos+0x54>
 8013bd8:	2802      	cmp	r0, #2
 8013bda:	d010      	beq.n	8013bfe <cos+0x66>
 8013bdc:	b9b0      	cbnz	r0, 8013c0c <cos+0x74>
 8013bde:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013be2:	ed9d 0b00 	vldr	d0, [sp]
 8013be6:	f000 fa57 	bl	8014098 <__kernel_cos>
 8013bea:	e7eb      	b.n	8013bc4 <cos+0x2c>
 8013bec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013bf0:	ed9d 0b00 	vldr	d0, [sp]
 8013bf4:	f000 fd54 	bl	80146a0 <__kernel_sin>
 8013bf8:	eeb1 0b40 	vneg.f64	d0, d0
 8013bfc:	e7e2      	b.n	8013bc4 <cos+0x2c>
 8013bfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013c02:	ed9d 0b00 	vldr	d0, [sp]
 8013c06:	f000 fa47 	bl	8014098 <__kernel_cos>
 8013c0a:	e7f5      	b.n	8013bf8 <cos+0x60>
 8013c0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013c10:	ed9d 0b00 	vldr	d0, [sp]
 8013c14:	2001      	movs	r0, #1
 8013c16:	f000 fd43 	bl	80146a0 <__kernel_sin>
 8013c1a:	e7d3      	b.n	8013bc4 <cos+0x2c>
 8013c1c:	f3af 8000 	nop.w
	...
 8013c28:	3fe921fb 	.word	0x3fe921fb
 8013c2c:	7fefffff 	.word	0x7fefffff

08013c30 <sin>:
 8013c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013c32:	eeb0 7b40 	vmov.f64	d7, d0
 8013c36:	ee17 3a90 	vmov	r3, s15
 8013c3a:	4a21      	ldr	r2, [pc, #132]	; (8013cc0 <sin+0x90>)
 8013c3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013c40:	4293      	cmp	r3, r2
 8013c42:	dc07      	bgt.n	8013c54 <sin+0x24>
 8013c44:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8013cb8 <sin+0x88>
 8013c48:	2000      	movs	r0, #0
 8013c4a:	b005      	add	sp, #20
 8013c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013c50:	f000 bd26 	b.w	80146a0 <__kernel_sin>
 8013c54:	4a1b      	ldr	r2, [pc, #108]	; (8013cc4 <sin+0x94>)
 8013c56:	4293      	cmp	r3, r2
 8013c58:	dd04      	ble.n	8013c64 <sin+0x34>
 8013c5a:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013c5e:	b005      	add	sp, #20
 8013c60:	f85d fb04 	ldr.w	pc, [sp], #4
 8013c64:	4668      	mov	r0, sp
 8013c66:	f000 f8d3 	bl	8013e10 <__ieee754_rem_pio2>
 8013c6a:	f000 0003 	and.w	r0, r0, #3
 8013c6e:	2801      	cmp	r0, #1
 8013c70:	d00a      	beq.n	8013c88 <sin+0x58>
 8013c72:	2802      	cmp	r0, #2
 8013c74:	d00f      	beq.n	8013c96 <sin+0x66>
 8013c76:	b9c0      	cbnz	r0, 8013caa <sin+0x7a>
 8013c78:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013c7c:	ed9d 0b00 	vldr	d0, [sp]
 8013c80:	2001      	movs	r0, #1
 8013c82:	f000 fd0d 	bl	80146a0 <__kernel_sin>
 8013c86:	e7ea      	b.n	8013c5e <sin+0x2e>
 8013c88:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013c8c:	ed9d 0b00 	vldr	d0, [sp]
 8013c90:	f000 fa02 	bl	8014098 <__kernel_cos>
 8013c94:	e7e3      	b.n	8013c5e <sin+0x2e>
 8013c96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013c9a:	ed9d 0b00 	vldr	d0, [sp]
 8013c9e:	2001      	movs	r0, #1
 8013ca0:	f000 fcfe 	bl	80146a0 <__kernel_sin>
 8013ca4:	eeb1 0b40 	vneg.f64	d0, d0
 8013ca8:	e7d9      	b.n	8013c5e <sin+0x2e>
 8013caa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013cae:	ed9d 0b00 	vldr	d0, [sp]
 8013cb2:	f000 f9f1 	bl	8014098 <__kernel_cos>
 8013cb6:	e7f5      	b.n	8013ca4 <sin+0x74>
	...
 8013cc0:	3fe921fb 	.word	0x3fe921fb
 8013cc4:	7fefffff 	.word	0x7fefffff

08013cc8 <log10>:
 8013cc8:	b508      	push	{r3, lr}
 8013cca:	ed2d 8b02 	vpush	{d8}
 8013cce:	eeb0 8b40 	vmov.f64	d8, d0
 8013cd2:	f000 f82d 	bl	8013d30 <__ieee754_log10>
 8013cd6:	eeb4 8b48 	vcmp.f64	d8, d8
 8013cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cde:	d60f      	bvs.n	8013d00 <log10+0x38>
 8013ce0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8013ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ce8:	d80a      	bhi.n	8013d00 <log10+0x38>
 8013cea:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cf2:	d108      	bne.n	8013d06 <log10+0x3e>
 8013cf4:	f7fc fe30 	bl	8010958 <__errno>
 8013cf8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8013d20 <log10+0x58>
 8013cfc:	2322      	movs	r3, #34	; 0x22
 8013cfe:	6003      	str	r3, [r0, #0]
 8013d00:	ecbd 8b02 	vpop	{d8}
 8013d04:	bd08      	pop	{r3, pc}
 8013d06:	f7fc fe27 	bl	8010958 <__errno>
 8013d0a:	ecbd 8b02 	vpop	{d8}
 8013d0e:	2321      	movs	r3, #33	; 0x21
 8013d10:	6003      	str	r3, [r0, #0]
 8013d12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013d16:	4804      	ldr	r0, [pc, #16]	; (8013d28 <log10+0x60>)
 8013d18:	f000 be92 	b.w	8014a40 <nan>
 8013d1c:	f3af 8000 	nop.w
 8013d20:	00000000 	.word	0x00000000
 8013d24:	fff00000 	.word	0xfff00000
 8013d28:	0801e06a 	.word	0x0801e06a
 8013d2c:	00000000 	.word	0x00000000

08013d30 <__ieee754_log10>:
 8013d30:	b510      	push	{r4, lr}
 8013d32:	ee10 3a90 	vmov	r3, s1
 8013d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013d3a:	ed2d 8b02 	vpush	{d8}
 8013d3e:	da21      	bge.n	8013d84 <__ieee754_log10+0x54>
 8013d40:	ee10 1a10 	vmov	r1, s0
 8013d44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013d48:	430a      	orrs	r2, r1
 8013d4a:	d108      	bne.n	8013d5e <__ieee754_log10+0x2e>
 8013d4c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8013dd8 <__ieee754_log10+0xa8>
 8013d50:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8013de0 <__ieee754_log10+0xb0>
 8013d54:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8013d58:	ecbd 8b02 	vpop	{d8}
 8013d5c:	bd10      	pop	{r4, pc}
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	da02      	bge.n	8013d68 <__ieee754_log10+0x38>
 8013d62:	ee30 6b40 	vsub.f64	d6, d0, d0
 8013d66:	e7f3      	b.n	8013d50 <__ieee754_log10+0x20>
 8013d68:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8013de8 <__ieee754_log10+0xb8>
 8013d6c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013d70:	ee10 3a90 	vmov	r3, s1
 8013d74:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8013d78:	4923      	ldr	r1, [pc, #140]	; (8013e08 <__ieee754_log10+0xd8>)
 8013d7a:	428b      	cmp	r3, r1
 8013d7c:	dd04      	ble.n	8013d88 <__ieee754_log10+0x58>
 8013d7e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013d82:	e7e9      	b.n	8013d58 <__ieee754_log10+0x28>
 8013d84:	2200      	movs	r2, #0
 8013d86:	e7f7      	b.n	8013d78 <__ieee754_log10+0x48>
 8013d88:	1518      	asrs	r0, r3, #20
 8013d8a:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8013d8e:	4410      	add	r0, r2
 8013d90:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8013d94:	f240 34ff 	movw	r4, #1023	; 0x3ff
 8013d98:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8013d9c:	ee08 3a10 	vmov	s16, r3
 8013da0:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 8013da4:	ec53 2b10 	vmov	r2, r3, d0
 8013da8:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8013dac:	ec43 2b10 	vmov	d0, r2, r3
 8013db0:	f000 fcce 	bl	8014750 <log>
 8013db4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8013df0 <__ieee754_log10+0xc0>
 8013db8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013dbc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8013df8 <__ieee754_log10+0xc8>
 8013dc0:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 8013dc4:	eea8 0b07 	vfma.f64	d0, d8, d7
 8013dc8:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8013e00 <__ieee754_log10+0xd0>
 8013dcc:	eea8 0b07 	vfma.f64	d0, d8, d7
 8013dd0:	e7c2      	b.n	8013d58 <__ieee754_log10+0x28>
 8013dd2:	bf00      	nop
 8013dd4:	f3af 8000 	nop.w
 8013dd8:	00000000 	.word	0x00000000
 8013ddc:	c3500000 	.word	0xc3500000
	...
 8013dec:	43500000 	.word	0x43500000
 8013df0:	1526e50e 	.word	0x1526e50e
 8013df4:	3fdbcb7b 	.word	0x3fdbcb7b
 8013df8:	11f12b36 	.word	0x11f12b36
 8013dfc:	3d59fef3 	.word	0x3d59fef3
 8013e00:	509f6000 	.word	0x509f6000
 8013e04:	3fd34413 	.word	0x3fd34413
 8013e08:	7fefffff 	.word	0x7fefffff
 8013e0c:	00000000 	.word	0x00000000

08013e10 <__ieee754_rem_pio2>:
 8013e10:	b570      	push	{r4, r5, r6, lr}
 8013e12:	eeb0 7b40 	vmov.f64	d7, d0
 8013e16:	ee17 5a90 	vmov	r5, s15
 8013e1a:	4b99      	ldr	r3, [pc, #612]	; (8014080 <__ieee754_rem_pio2+0x270>)
 8013e1c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013e20:	429e      	cmp	r6, r3
 8013e22:	b088      	sub	sp, #32
 8013e24:	4604      	mov	r4, r0
 8013e26:	dc07      	bgt.n	8013e38 <__ieee754_rem_pio2+0x28>
 8013e28:	2200      	movs	r2, #0
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	ed84 0b00 	vstr	d0, [r4]
 8013e30:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013e34:	2000      	movs	r0, #0
 8013e36:	e01b      	b.n	8013e70 <__ieee754_rem_pio2+0x60>
 8013e38:	4b92      	ldr	r3, [pc, #584]	; (8014084 <__ieee754_rem_pio2+0x274>)
 8013e3a:	429e      	cmp	r6, r3
 8013e3c:	dc3b      	bgt.n	8013eb6 <__ieee754_rem_pio2+0xa6>
 8013e3e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8013e42:	2d00      	cmp	r5, #0
 8013e44:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8014040 <__ieee754_rem_pio2+0x230>
 8013e48:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8013e4c:	dd19      	ble.n	8013e82 <__ieee754_rem_pio2+0x72>
 8013e4e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8013e52:	429e      	cmp	r6, r3
 8013e54:	d00e      	beq.n	8013e74 <__ieee754_rem_pio2+0x64>
 8013e56:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8014048 <__ieee754_rem_pio2+0x238>
 8013e5a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8013e5e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013e62:	ed84 5b00 	vstr	d5, [r4]
 8013e66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013e6a:	ed84 7b02 	vstr	d7, [r4, #8]
 8013e6e:	2001      	movs	r0, #1
 8013e70:	b008      	add	sp, #32
 8013e72:	bd70      	pop	{r4, r5, r6, pc}
 8013e74:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8014050 <__ieee754_rem_pio2+0x240>
 8013e78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013e7c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8014058 <__ieee754_rem_pio2+0x248>
 8013e80:	e7eb      	b.n	8013e5a <__ieee754_rem_pio2+0x4a>
 8013e82:	429e      	cmp	r6, r3
 8013e84:	ee30 7b06 	vadd.f64	d7, d0, d6
 8013e88:	d00e      	beq.n	8013ea8 <__ieee754_rem_pio2+0x98>
 8013e8a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8014048 <__ieee754_rem_pio2+0x238>
 8013e8e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8013e92:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013e96:	ed84 5b00 	vstr	d5, [r4]
 8013e9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8013ea2:	ed84 7b02 	vstr	d7, [r4, #8]
 8013ea6:	e7e3      	b.n	8013e70 <__ieee754_rem_pio2+0x60>
 8013ea8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8014050 <__ieee754_rem_pio2+0x240>
 8013eac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013eb0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8014058 <__ieee754_rem_pio2+0x248>
 8013eb4:	e7eb      	b.n	8013e8e <__ieee754_rem_pio2+0x7e>
 8013eb6:	4b74      	ldr	r3, [pc, #464]	; (8014088 <__ieee754_rem_pio2+0x278>)
 8013eb8:	429e      	cmp	r6, r3
 8013eba:	dc70      	bgt.n	8013f9e <__ieee754_rem_pio2+0x18e>
 8013ebc:	f000 fd40 	bl	8014940 <fabs>
 8013ec0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8013ec4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8014060 <__ieee754_rem_pio2+0x250>
 8013ec8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8013ecc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8013ed0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8013ed4:	ee17 0a90 	vmov	r0, s15
 8013ed8:	eeb1 4b45 	vneg.f64	d4, d5
 8013edc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8014040 <__ieee754_rem_pio2+0x230>
 8013ee0:	eea5 0b47 	vfms.f64	d0, d5, d7
 8013ee4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8014048 <__ieee754_rem_pio2+0x238>
 8013ee8:	281f      	cmp	r0, #31
 8013eea:	ee25 7b07 	vmul.f64	d7, d5, d7
 8013eee:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013ef2:	dc08      	bgt.n	8013f06 <__ieee754_rem_pio2+0xf6>
 8013ef4:	4b65      	ldr	r3, [pc, #404]	; (801408c <__ieee754_rem_pio2+0x27c>)
 8013ef6:	1e42      	subs	r2, r0, #1
 8013ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013efc:	42b3      	cmp	r3, r6
 8013efe:	d002      	beq.n	8013f06 <__ieee754_rem_pio2+0xf6>
 8013f00:	ed84 6b00 	vstr	d6, [r4]
 8013f04:	e026      	b.n	8013f54 <__ieee754_rem_pio2+0x144>
 8013f06:	ee16 3a90 	vmov	r3, s13
 8013f0a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013f0e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8013f12:	2b10      	cmp	r3, #16
 8013f14:	ea4f 5226 	mov.w	r2, r6, asr #20
 8013f18:	ddf2      	ble.n	8013f00 <__ieee754_rem_pio2+0xf0>
 8013f1a:	eeb0 6b40 	vmov.f64	d6, d0
 8013f1e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8014050 <__ieee754_rem_pio2+0x240>
 8013f22:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8014058 <__ieee754_rem_pio2+0x248>
 8013f26:	eea4 6b07 	vfma.f64	d6, d4, d7
 8013f2a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8013f2e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8013f32:	eeb0 7b40 	vmov.f64	d7, d0
 8013f36:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8013f3a:	ee36 3b47 	vsub.f64	d3, d6, d7
 8013f3e:	ee13 3a90 	vmov	r3, s7
 8013f42:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013f46:	1ad3      	subs	r3, r2, r3
 8013f48:	2b31      	cmp	r3, #49	; 0x31
 8013f4a:	dc17      	bgt.n	8013f7c <__ieee754_rem_pio2+0x16c>
 8013f4c:	eeb0 0b46 	vmov.f64	d0, d6
 8013f50:	ed84 3b00 	vstr	d3, [r4]
 8013f54:	ed94 6b00 	vldr	d6, [r4]
 8013f58:	2d00      	cmp	r5, #0
 8013f5a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8013f5e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013f62:	ed84 0b02 	vstr	d0, [r4, #8]
 8013f66:	da83      	bge.n	8013e70 <__ieee754_rem_pio2+0x60>
 8013f68:	eeb1 6b46 	vneg.f64	d6, d6
 8013f6c:	eeb1 0b40 	vneg.f64	d0, d0
 8013f70:	ed84 6b00 	vstr	d6, [r4]
 8013f74:	ed84 0b02 	vstr	d0, [r4, #8]
 8013f78:	4240      	negs	r0, r0
 8013f7a:	e779      	b.n	8013e70 <__ieee754_rem_pio2+0x60>
 8013f7c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8014068 <__ieee754_rem_pio2+0x258>
 8013f80:	eeb0 0b46 	vmov.f64	d0, d6
 8013f84:	eea4 0b03 	vfma.f64	d0, d4, d3
 8013f88:	ee36 7b40 	vsub.f64	d7, d6, d0
 8013f8c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8014070 <__ieee754_rem_pio2+0x260>
 8013f90:	eea4 7b03 	vfma.f64	d7, d4, d3
 8013f94:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8013f98:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013f9c:	e7b0      	b.n	8013f00 <__ieee754_rem_pio2+0xf0>
 8013f9e:	4b3c      	ldr	r3, [pc, #240]	; (8014090 <__ieee754_rem_pio2+0x280>)
 8013fa0:	429e      	cmp	r6, r3
 8013fa2:	dd06      	ble.n	8013fb2 <__ieee754_rem_pio2+0x1a2>
 8013fa4:	ee30 7b40 	vsub.f64	d7, d0, d0
 8013fa8:	ed80 7b02 	vstr	d7, [r0, #8]
 8013fac:	ed80 7b00 	vstr	d7, [r0]
 8013fb0:	e740      	b.n	8013e34 <__ieee754_rem_pio2+0x24>
 8013fb2:	1532      	asrs	r2, r6, #20
 8013fb4:	ee10 0a10 	vmov	r0, s0
 8013fb8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8013fbc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8013fc0:	ec41 0b17 	vmov	d7, r0, r1
 8013fc4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013fc8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8014078 <__ieee754_rem_pio2+0x268>
 8013fcc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013fd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013fd4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013fd8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013fdc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013fe0:	a902      	add	r1, sp, #8
 8013fe2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013fe6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013fea:	ed8d 6b04 	vstr	d6, [sp, #16]
 8013fee:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013ff2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013ff6:	2603      	movs	r6, #3
 8013ff8:	4608      	mov	r0, r1
 8013ffa:	ed91 7b04 	vldr	d7, [r1, #16]
 8013ffe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014006:	4633      	mov	r3, r6
 8014008:	f1a1 0108 	sub.w	r1, r1, #8
 801400c:	f106 36ff 	add.w	r6, r6, #4294967295
 8014010:	d0f3      	beq.n	8013ffa <__ieee754_rem_pio2+0x1ea>
 8014012:	4920      	ldr	r1, [pc, #128]	; (8014094 <__ieee754_rem_pio2+0x284>)
 8014014:	9101      	str	r1, [sp, #4]
 8014016:	2102      	movs	r1, #2
 8014018:	9100      	str	r1, [sp, #0]
 801401a:	4621      	mov	r1, r4
 801401c:	f000 f8a8 	bl	8014170 <__kernel_rem_pio2>
 8014020:	2d00      	cmp	r5, #0
 8014022:	f6bf af25 	bge.w	8013e70 <__ieee754_rem_pio2+0x60>
 8014026:	ed94 7b00 	vldr	d7, [r4]
 801402a:	eeb1 7b47 	vneg.f64	d7, d7
 801402e:	ed84 7b00 	vstr	d7, [r4]
 8014032:	ed94 7b02 	vldr	d7, [r4, #8]
 8014036:	eeb1 7b47 	vneg.f64	d7, d7
 801403a:	ed84 7b02 	vstr	d7, [r4, #8]
 801403e:	e79b      	b.n	8013f78 <__ieee754_rem_pio2+0x168>
 8014040:	54400000 	.word	0x54400000
 8014044:	3ff921fb 	.word	0x3ff921fb
 8014048:	1a626331 	.word	0x1a626331
 801404c:	3dd0b461 	.word	0x3dd0b461
 8014050:	1a600000 	.word	0x1a600000
 8014054:	3dd0b461 	.word	0x3dd0b461
 8014058:	2e037073 	.word	0x2e037073
 801405c:	3ba3198a 	.word	0x3ba3198a
 8014060:	6dc9c883 	.word	0x6dc9c883
 8014064:	3fe45f30 	.word	0x3fe45f30
 8014068:	2e000000 	.word	0x2e000000
 801406c:	3ba3198a 	.word	0x3ba3198a
 8014070:	252049c1 	.word	0x252049c1
 8014074:	397b839a 	.word	0x397b839a
 8014078:	00000000 	.word	0x00000000
 801407c:	41700000 	.word	0x41700000
 8014080:	3fe921fb 	.word	0x3fe921fb
 8014084:	4002d97b 	.word	0x4002d97b
 8014088:	413921fb 	.word	0x413921fb
 801408c:	0801eb30 	.word	0x0801eb30
 8014090:	7fefffff 	.word	0x7fefffff
 8014094:	0801ebb0 	.word	0x0801ebb0

08014098 <__kernel_cos>:
 8014098:	ee10 1a90 	vmov	r1, s1
 801409c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80140a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80140a4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80140a8:	da05      	bge.n	80140b6 <__kernel_cos+0x1e>
 80140aa:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80140ae:	ee17 3a90 	vmov	r3, s15
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d03d      	beq.n	8014132 <__kernel_cos+0x9a>
 80140b6:	ee20 3b00 	vmul.f64	d3, d0, d0
 80140ba:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8014138 <__kernel_cos+0xa0>
 80140be:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8014140 <__kernel_cos+0xa8>
 80140c2:	eea3 6b07 	vfma.f64	d6, d3, d7
 80140c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014148 <__kernel_cos+0xb0>
 80140ca:	eea6 7b03 	vfma.f64	d7, d6, d3
 80140ce:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8014150 <__kernel_cos+0xb8>
 80140d2:	eea7 6b03 	vfma.f64	d6, d7, d3
 80140d6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014158 <__kernel_cos+0xc0>
 80140da:	4b23      	ldr	r3, [pc, #140]	; (8014168 <__kernel_cos+0xd0>)
 80140dc:	eea6 7b03 	vfma.f64	d7, d6, d3
 80140e0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8014160 <__kernel_cos+0xc8>
 80140e4:	4299      	cmp	r1, r3
 80140e6:	eea7 6b03 	vfma.f64	d6, d7, d3
 80140ea:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80140ee:	ee26 5b03 	vmul.f64	d5, d6, d3
 80140f2:	ee23 7b07 	vmul.f64	d7, d3, d7
 80140f6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80140fa:	eea3 6b05 	vfma.f64	d6, d3, d5
 80140fe:	dc04      	bgt.n	801410a <__kernel_cos+0x72>
 8014100:	ee37 6b46 	vsub.f64	d6, d7, d6
 8014104:	ee34 0b46 	vsub.f64	d0, d4, d6
 8014108:	4770      	bx	lr
 801410a:	4b18      	ldr	r3, [pc, #96]	; (801416c <__kernel_cos+0xd4>)
 801410c:	4299      	cmp	r1, r3
 801410e:	dc0d      	bgt.n	801412c <__kernel_cos+0x94>
 8014110:	2200      	movs	r2, #0
 8014112:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8014116:	ec43 2b15 	vmov	d5, r2, r3
 801411a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801411e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8014122:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014126:	ee30 0b47 	vsub.f64	d0, d0, d7
 801412a:	4770      	bx	lr
 801412c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8014130:	e7f3      	b.n	801411a <__kernel_cos+0x82>
 8014132:	eeb0 0b44 	vmov.f64	d0, d4
 8014136:	4770      	bx	lr
 8014138:	be8838d4 	.word	0xbe8838d4
 801413c:	bda8fae9 	.word	0xbda8fae9
 8014140:	bdb4b1c4 	.word	0xbdb4b1c4
 8014144:	3e21ee9e 	.word	0x3e21ee9e
 8014148:	809c52ad 	.word	0x809c52ad
 801414c:	be927e4f 	.word	0xbe927e4f
 8014150:	19cb1590 	.word	0x19cb1590
 8014154:	3efa01a0 	.word	0x3efa01a0
 8014158:	16c15177 	.word	0x16c15177
 801415c:	bf56c16c 	.word	0xbf56c16c
 8014160:	5555554c 	.word	0x5555554c
 8014164:	3fa55555 	.word	0x3fa55555
 8014168:	3fd33332 	.word	0x3fd33332
 801416c:	3fe90000 	.word	0x3fe90000

08014170 <__kernel_rem_pio2>:
 8014170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014174:	ed2d 8b06 	vpush	{d8-d10}
 8014178:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801417c:	460f      	mov	r7, r1
 801417e:	9002      	str	r0, [sp, #8]
 8014180:	49c5      	ldr	r1, [pc, #788]	; (8014498 <__kernel_rem_pio2+0x328>)
 8014182:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8014184:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8014188:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801418c:	9301      	str	r3, [sp, #4]
 801418e:	f112 0f14 	cmn.w	r2, #20
 8014192:	bfa8      	it	ge
 8014194:	2018      	movge	r0, #24
 8014196:	f103 31ff 	add.w	r1, r3, #4294967295
 801419a:	bfb8      	it	lt
 801419c:	2000      	movlt	r0, #0
 801419e:	f06f 0417 	mvn.w	r4, #23
 80141a2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8014480 <__kernel_rem_pio2+0x310>
 80141a6:	bfa4      	itt	ge
 80141a8:	f1a2 0a03 	subge.w	sl, r2, #3
 80141ac:	fb9a f0f0 	sdivge	r0, sl, r0
 80141b0:	fb00 4404 	mla	r4, r0, r4, r4
 80141b4:	1a46      	subs	r6, r0, r1
 80141b6:	4414      	add	r4, r2
 80141b8:	eb09 0c01 	add.w	ip, r9, r1
 80141bc:	ad1a      	add	r5, sp, #104	; 0x68
 80141be:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80141c2:	2200      	movs	r2, #0
 80141c4:	4562      	cmp	r2, ip
 80141c6:	dd10      	ble.n	80141ea <__kernel_rem_pio2+0x7a>
 80141c8:	9a01      	ldr	r2, [sp, #4]
 80141ca:	ab1a      	add	r3, sp, #104	; 0x68
 80141cc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80141d0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 80141d4:	f04f 0c00 	mov.w	ip, #0
 80141d8:	45cc      	cmp	ip, r9
 80141da:	dc26      	bgt.n	801422a <__kernel_rem_pio2+0xba>
 80141dc:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8014480 <__kernel_rem_pio2+0x310>
 80141e0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80141e4:	4616      	mov	r6, r2
 80141e6:	2500      	movs	r5, #0
 80141e8:	e015      	b.n	8014216 <__kernel_rem_pio2+0xa6>
 80141ea:	42d6      	cmn	r6, r2
 80141ec:	d409      	bmi.n	8014202 <__kernel_rem_pio2+0x92>
 80141ee:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 80141f2:	ee07 3a90 	vmov	s15, r3
 80141f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80141fa:	eca5 7b02 	vstmia	r5!, {d7}
 80141fe:	3201      	adds	r2, #1
 8014200:	e7e0      	b.n	80141c4 <__kernel_rem_pio2+0x54>
 8014202:	eeb0 7b46 	vmov.f64	d7, d6
 8014206:	e7f8      	b.n	80141fa <__kernel_rem_pio2+0x8a>
 8014208:	ecb8 5b02 	vldmia	r8!, {d5}
 801420c:	ed96 6b00 	vldr	d6, [r6]
 8014210:	3501      	adds	r5, #1
 8014212:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014216:	428d      	cmp	r5, r1
 8014218:	f1a6 0608 	sub.w	r6, r6, #8
 801421c:	ddf4      	ble.n	8014208 <__kernel_rem_pio2+0x98>
 801421e:	ecaa 7b02 	vstmia	sl!, {d7}
 8014222:	f10c 0c01 	add.w	ip, ip, #1
 8014226:	3208      	adds	r2, #8
 8014228:	e7d6      	b.n	80141d8 <__kernel_rem_pio2+0x68>
 801422a:	ab06      	add	r3, sp, #24
 801422c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8014488 <__kernel_rem_pio2+0x318>
 8014230:	ed9f ab97 	vldr	d10, [pc, #604]	; 8014490 <__kernel_rem_pio2+0x320>
 8014234:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8014238:	9303      	str	r3, [sp, #12]
 801423a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 801423e:	464d      	mov	r5, r9
 8014240:	00eb      	lsls	r3, r5, #3
 8014242:	9304      	str	r3, [sp, #16]
 8014244:	ab92      	add	r3, sp, #584	; 0x248
 8014246:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801424a:	f10d 0b18 	add.w	fp, sp, #24
 801424e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8014250:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8014254:	465e      	mov	r6, fp
 8014256:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801425a:	4628      	mov	r0, r5
 801425c:	2800      	cmp	r0, #0
 801425e:	f1a2 0208 	sub.w	r2, r2, #8
 8014262:	dc4c      	bgt.n	80142fe <__kernel_rem_pio2+0x18e>
 8014264:	4620      	mov	r0, r4
 8014266:	9105      	str	r1, [sp, #20]
 8014268:	f000 fbf2 	bl	8014a50 <scalbn>
 801426c:	eeb0 8b40 	vmov.f64	d8, d0
 8014270:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8014274:	ee28 0b00 	vmul.f64	d0, d8, d0
 8014278:	f000 fb6e 	bl	8014958 <floor>
 801427c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8014280:	eea0 8b47 	vfms.f64	d8, d0, d7
 8014284:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8014288:	2c00      	cmp	r4, #0
 801428a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801428e:	ee17 8a90 	vmov	r8, s15
 8014292:	ee38 8b40 	vsub.f64	d8, d8, d0
 8014296:	9905      	ldr	r1, [sp, #20]
 8014298:	dd43      	ble.n	8014322 <__kernel_rem_pio2+0x1b2>
 801429a:	1e68      	subs	r0, r5, #1
 801429c:	ab06      	add	r3, sp, #24
 801429e:	f1c4 0c18 	rsb	ip, r4, #24
 80142a2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80142a6:	fa46 f20c 	asr.w	r2, r6, ip
 80142aa:	4490      	add	r8, r2
 80142ac:	fa02 f20c 	lsl.w	r2, r2, ip
 80142b0:	1ab6      	subs	r6, r6, r2
 80142b2:	f1c4 0217 	rsb	r2, r4, #23
 80142b6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80142ba:	4116      	asrs	r6, r2
 80142bc:	2e00      	cmp	r6, #0
 80142be:	dd3f      	ble.n	8014340 <__kernel_rem_pio2+0x1d0>
 80142c0:	f04f 0c00 	mov.w	ip, #0
 80142c4:	f108 0801 	add.w	r8, r8, #1
 80142c8:	4660      	mov	r0, ip
 80142ca:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80142ce:	4565      	cmp	r5, ip
 80142d0:	dc6e      	bgt.n	80143b0 <__kernel_rem_pio2+0x240>
 80142d2:	2c00      	cmp	r4, #0
 80142d4:	dd04      	ble.n	80142e0 <__kernel_rem_pio2+0x170>
 80142d6:	2c01      	cmp	r4, #1
 80142d8:	d07f      	beq.n	80143da <__kernel_rem_pio2+0x26a>
 80142da:	2c02      	cmp	r4, #2
 80142dc:	f000 8087 	beq.w	80143ee <__kernel_rem_pio2+0x27e>
 80142e0:	2e02      	cmp	r6, #2
 80142e2:	d12d      	bne.n	8014340 <__kernel_rem_pio2+0x1d0>
 80142e4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80142e8:	ee30 8b48 	vsub.f64	d8, d0, d8
 80142ec:	b340      	cbz	r0, 8014340 <__kernel_rem_pio2+0x1d0>
 80142ee:	4620      	mov	r0, r4
 80142f0:	9105      	str	r1, [sp, #20]
 80142f2:	f000 fbad 	bl	8014a50 <scalbn>
 80142f6:	9905      	ldr	r1, [sp, #20]
 80142f8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80142fc:	e020      	b.n	8014340 <__kernel_rem_pio2+0x1d0>
 80142fe:	ee20 7b09 	vmul.f64	d7, d0, d9
 8014302:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8014306:	3801      	subs	r0, #1
 8014308:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801430c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8014310:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8014314:	eca6 0a01 	vstmia	r6!, {s0}
 8014318:	ed92 0b00 	vldr	d0, [r2]
 801431c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8014320:	e79c      	b.n	801425c <__kernel_rem_pio2+0xec>
 8014322:	d105      	bne.n	8014330 <__kernel_rem_pio2+0x1c0>
 8014324:	1e6a      	subs	r2, r5, #1
 8014326:	ab06      	add	r3, sp, #24
 8014328:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801432c:	15f6      	asrs	r6, r6, #23
 801432e:	e7c5      	b.n	80142bc <__kernel_rem_pio2+0x14c>
 8014330:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8014334:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801433c:	da36      	bge.n	80143ac <__kernel_rem_pio2+0x23c>
 801433e:	2600      	movs	r6, #0
 8014340:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014348:	f040 80aa 	bne.w	80144a0 <__kernel_rem_pio2+0x330>
 801434c:	f105 3bff 	add.w	fp, r5, #4294967295
 8014350:	4658      	mov	r0, fp
 8014352:	2200      	movs	r2, #0
 8014354:	4548      	cmp	r0, r9
 8014356:	da52      	bge.n	80143fe <__kernel_rem_pio2+0x28e>
 8014358:	2a00      	cmp	r2, #0
 801435a:	f000 8081 	beq.w	8014460 <__kernel_rem_pio2+0x2f0>
 801435e:	ab06      	add	r3, sp, #24
 8014360:	3c18      	subs	r4, #24
 8014362:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8014366:	2b00      	cmp	r3, #0
 8014368:	f000 8087 	beq.w	801447a <__kernel_rem_pio2+0x30a>
 801436c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014370:	4620      	mov	r0, r4
 8014372:	f000 fb6d 	bl	8014a50 <scalbn>
 8014376:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801437a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8014488 <__kernel_rem_pio2+0x318>
 801437e:	a96a      	add	r1, sp, #424	; 0x1a8
 8014380:	f103 0208 	add.w	r2, r3, #8
 8014384:	1888      	adds	r0, r1, r2
 8014386:	4659      	mov	r1, fp
 8014388:	2900      	cmp	r1, #0
 801438a:	f280 80b7 	bge.w	80144fc <__kernel_rem_pio2+0x38c>
 801438e:	4659      	mov	r1, fp
 8014390:	2900      	cmp	r1, #0
 8014392:	f2c0 80d5 	blt.w	8014540 <__kernel_rem_pio2+0x3d0>
 8014396:	a86a      	add	r0, sp, #424	; 0x1a8
 8014398:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 801439c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8014480 <__kernel_rem_pio2+0x310>
 80143a0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801449c <__kernel_rem_pio2+0x32c>
 80143a4:	2400      	movs	r4, #0
 80143a6:	ebab 0001 	sub.w	r0, fp, r1
 80143aa:	e0be      	b.n	801452a <__kernel_rem_pio2+0x3ba>
 80143ac:	2602      	movs	r6, #2
 80143ae:	e787      	b.n	80142c0 <__kernel_rem_pio2+0x150>
 80143b0:	f8db 2000 	ldr.w	r2, [fp]
 80143b4:	b958      	cbnz	r0, 80143ce <__kernel_rem_pio2+0x25e>
 80143b6:	b122      	cbz	r2, 80143c2 <__kernel_rem_pio2+0x252>
 80143b8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80143bc:	f8cb 2000 	str.w	r2, [fp]
 80143c0:	2201      	movs	r2, #1
 80143c2:	f10c 0c01 	add.w	ip, ip, #1
 80143c6:	f10b 0b04 	add.w	fp, fp, #4
 80143ca:	4610      	mov	r0, r2
 80143cc:	e77f      	b.n	80142ce <__kernel_rem_pio2+0x15e>
 80143ce:	ebae 0202 	sub.w	r2, lr, r2
 80143d2:	f8cb 2000 	str.w	r2, [fp]
 80143d6:	4602      	mov	r2, r0
 80143d8:	e7f3      	b.n	80143c2 <__kernel_rem_pio2+0x252>
 80143da:	f105 3cff 	add.w	ip, r5, #4294967295
 80143de:	ab06      	add	r3, sp, #24
 80143e0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80143e4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80143e8:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 80143ec:	e778      	b.n	80142e0 <__kernel_rem_pio2+0x170>
 80143ee:	f105 3cff 	add.w	ip, r5, #4294967295
 80143f2:	ab06      	add	r3, sp, #24
 80143f4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80143f8:	f3c2 0215 	ubfx	r2, r2, #0, #22
 80143fc:	e7f4      	b.n	80143e8 <__kernel_rem_pio2+0x278>
 80143fe:	ab06      	add	r3, sp, #24
 8014400:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014404:	3801      	subs	r0, #1
 8014406:	431a      	orrs	r2, r3
 8014408:	e7a4      	b.n	8014354 <__kernel_rem_pio2+0x1e4>
 801440a:	f10c 0c01 	add.w	ip, ip, #1
 801440e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8014412:	2800      	cmp	r0, #0
 8014414:	d0f9      	beq.n	801440a <__kernel_rem_pio2+0x29a>
 8014416:	9b04      	ldr	r3, [sp, #16]
 8014418:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801441c:	eb0d 0203 	add.w	r2, sp, r3
 8014420:	9b01      	ldr	r3, [sp, #4]
 8014422:	18e8      	adds	r0, r5, r3
 8014424:	ab1a      	add	r3, sp, #104	; 0x68
 8014426:	1c6e      	adds	r6, r5, #1
 8014428:	3a98      	subs	r2, #152	; 0x98
 801442a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801442e:	4465      	add	r5, ip
 8014430:	42b5      	cmp	r5, r6
 8014432:	f6ff af05 	blt.w	8014240 <__kernel_rem_pio2+0xd0>
 8014436:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 801443a:	f8dd e008 	ldr.w	lr, [sp, #8]
 801443e:	ee07 3a90 	vmov	s15, r3
 8014442:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014446:	f04f 0c00 	mov.w	ip, #0
 801444a:	eca0 7b02 	vstmia	r0!, {d7}
 801444e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8014480 <__kernel_rem_pio2+0x310>
 8014452:	4680      	mov	r8, r0
 8014454:	458c      	cmp	ip, r1
 8014456:	dd07      	ble.n	8014468 <__kernel_rem_pio2+0x2f8>
 8014458:	eca2 7b02 	vstmia	r2!, {d7}
 801445c:	3601      	adds	r6, #1
 801445e:	e7e7      	b.n	8014430 <__kernel_rem_pio2+0x2c0>
 8014460:	9a03      	ldr	r2, [sp, #12]
 8014462:	f04f 0c01 	mov.w	ip, #1
 8014466:	e7d2      	b.n	801440e <__kernel_rem_pio2+0x29e>
 8014468:	ecbe 5b02 	vldmia	lr!, {d5}
 801446c:	ed38 6b02 	vldmdb	r8!, {d6}
 8014470:	f10c 0c01 	add.w	ip, ip, #1
 8014474:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014478:	e7ec      	b.n	8014454 <__kernel_rem_pio2+0x2e4>
 801447a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801447e:	e76e      	b.n	801435e <__kernel_rem_pio2+0x1ee>
	...
 801448c:	3e700000 	.word	0x3e700000
 8014490:	00000000 	.word	0x00000000
 8014494:	41700000 	.word	0x41700000
 8014498:	0801ecf8 	.word	0x0801ecf8
 801449c:	0801ecb8 	.word	0x0801ecb8
 80144a0:	4260      	negs	r0, r4
 80144a2:	eeb0 0b48 	vmov.f64	d0, d8
 80144a6:	f000 fad3 	bl	8014a50 <scalbn>
 80144aa:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8014688 <__kernel_rem_pio2+0x518>
 80144ae:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80144b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144b6:	db18      	blt.n	80144ea <__kernel_rem_pio2+0x37a>
 80144b8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8014690 <__kernel_rem_pio2+0x520>
 80144bc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80144c0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80144c4:	aa06      	add	r2, sp, #24
 80144c6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80144ca:	eea5 0b46 	vfms.f64	d0, d5, d6
 80144ce:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80144d2:	f105 0b01 	add.w	fp, r5, #1
 80144d6:	ee10 3a10 	vmov	r3, s0
 80144da:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80144de:	ee17 3a10 	vmov	r3, s14
 80144e2:	3418      	adds	r4, #24
 80144e4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80144e8:	e740      	b.n	801436c <__kernel_rem_pio2+0x1fc>
 80144ea:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80144ee:	aa06      	add	r2, sp, #24
 80144f0:	ee10 3a10 	vmov	r3, s0
 80144f4:	46ab      	mov	fp, r5
 80144f6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80144fa:	e737      	b.n	801436c <__kernel_rem_pio2+0x1fc>
 80144fc:	ac06      	add	r4, sp, #24
 80144fe:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8014502:	9401      	str	r4, [sp, #4]
 8014504:	ee07 4a90 	vmov	s15, r4
 8014508:	3901      	subs	r1, #1
 801450a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801450e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8014512:	ee20 0b06 	vmul.f64	d0, d0, d6
 8014516:	ed20 7b02 	vstmdb	r0!, {d7}
 801451a:	e735      	b.n	8014388 <__kernel_rem_pio2+0x218>
 801451c:	ecbc 5b02 	vldmia	ip!, {d5}
 8014520:	ecb5 6b02 	vldmia	r5!, {d6}
 8014524:	3401      	adds	r4, #1
 8014526:	eea5 7b06 	vfma.f64	d7, d5, d6
 801452a:	454c      	cmp	r4, r9
 801452c:	dc01      	bgt.n	8014532 <__kernel_rem_pio2+0x3c2>
 801452e:	4284      	cmp	r4, r0
 8014530:	ddf4      	ble.n	801451c <__kernel_rem_pio2+0x3ac>
 8014532:	ac42      	add	r4, sp, #264	; 0x108
 8014534:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8014538:	ed80 7b00 	vstr	d7, [r0]
 801453c:	3901      	subs	r1, #1
 801453e:	e727      	b.n	8014390 <__kernel_rem_pio2+0x220>
 8014540:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8014542:	2902      	cmp	r1, #2
 8014544:	dc0a      	bgt.n	801455c <__kernel_rem_pio2+0x3ec>
 8014546:	2900      	cmp	r1, #0
 8014548:	dc2c      	bgt.n	80145a4 <__kernel_rem_pio2+0x434>
 801454a:	d045      	beq.n	80145d8 <__kernel_rem_pio2+0x468>
 801454c:	f008 0007 	and.w	r0, r8, #7
 8014550:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8014554:	ecbd 8b06 	vpop	{d8-d10}
 8014558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801455c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801455e:	2a03      	cmp	r2, #3
 8014560:	d1f4      	bne.n	801454c <__kernel_rem_pio2+0x3dc>
 8014562:	aa42      	add	r2, sp, #264	; 0x108
 8014564:	4413      	add	r3, r2
 8014566:	461a      	mov	r2, r3
 8014568:	4619      	mov	r1, r3
 801456a:	4658      	mov	r0, fp
 801456c:	2800      	cmp	r0, #0
 801456e:	f1a1 0108 	sub.w	r1, r1, #8
 8014572:	dc54      	bgt.n	801461e <__kernel_rem_pio2+0x4ae>
 8014574:	4659      	mov	r1, fp
 8014576:	2901      	cmp	r1, #1
 8014578:	f1a2 0208 	sub.w	r2, r2, #8
 801457c:	dc5f      	bgt.n	801463e <__kernel_rem_pio2+0x4ce>
 801457e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8014698 <__kernel_rem_pio2+0x528>
 8014582:	3308      	adds	r3, #8
 8014584:	f1bb 0f01 	cmp.w	fp, #1
 8014588:	dc69      	bgt.n	801465e <__kernel_rem_pio2+0x4ee>
 801458a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801458e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8014592:	2e00      	cmp	r6, #0
 8014594:	d16a      	bne.n	801466c <__kernel_rem_pio2+0x4fc>
 8014596:	ed87 5b00 	vstr	d5, [r7]
 801459a:	ed87 6b02 	vstr	d6, [r7, #8]
 801459e:	ed87 7b04 	vstr	d7, [r7, #16]
 80145a2:	e7d3      	b.n	801454c <__kernel_rem_pio2+0x3dc>
 80145a4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014698 <__kernel_rem_pio2+0x528>
 80145a8:	ab42      	add	r3, sp, #264	; 0x108
 80145aa:	441a      	add	r2, r3
 80145ac:	465b      	mov	r3, fp
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	da26      	bge.n	8014600 <__kernel_rem_pio2+0x490>
 80145b2:	b35e      	cbz	r6, 801460c <__kernel_rem_pio2+0x49c>
 80145b4:	eeb1 7b46 	vneg.f64	d7, d6
 80145b8:	ed87 7b00 	vstr	d7, [r7]
 80145bc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80145c0:	aa44      	add	r2, sp, #272	; 0x110
 80145c2:	2301      	movs	r3, #1
 80145c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80145c8:	459b      	cmp	fp, r3
 80145ca:	da22      	bge.n	8014612 <__kernel_rem_pio2+0x4a2>
 80145cc:	b10e      	cbz	r6, 80145d2 <__kernel_rem_pio2+0x462>
 80145ce:	eeb1 7b47 	vneg.f64	d7, d7
 80145d2:	ed87 7b02 	vstr	d7, [r7, #8]
 80145d6:	e7b9      	b.n	801454c <__kernel_rem_pio2+0x3dc>
 80145d8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8014698 <__kernel_rem_pio2+0x528>
 80145dc:	ab42      	add	r3, sp, #264	; 0x108
 80145de:	441a      	add	r2, r3
 80145e0:	f1bb 0f00 	cmp.w	fp, #0
 80145e4:	da05      	bge.n	80145f2 <__kernel_rem_pio2+0x482>
 80145e6:	b10e      	cbz	r6, 80145ec <__kernel_rem_pio2+0x47c>
 80145e8:	eeb1 7b47 	vneg.f64	d7, d7
 80145ec:	ed87 7b00 	vstr	d7, [r7]
 80145f0:	e7ac      	b.n	801454c <__kernel_rem_pio2+0x3dc>
 80145f2:	ed32 6b02 	vldmdb	r2!, {d6}
 80145f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80145fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80145fe:	e7ef      	b.n	80145e0 <__kernel_rem_pio2+0x470>
 8014600:	ed32 7b02 	vldmdb	r2!, {d7}
 8014604:	3b01      	subs	r3, #1
 8014606:	ee36 6b07 	vadd.f64	d6, d6, d7
 801460a:	e7d0      	b.n	80145ae <__kernel_rem_pio2+0x43e>
 801460c:	eeb0 7b46 	vmov.f64	d7, d6
 8014610:	e7d2      	b.n	80145b8 <__kernel_rem_pio2+0x448>
 8014612:	ecb2 6b02 	vldmia	r2!, {d6}
 8014616:	3301      	adds	r3, #1
 8014618:	ee37 7b06 	vadd.f64	d7, d7, d6
 801461c:	e7d4      	b.n	80145c8 <__kernel_rem_pio2+0x458>
 801461e:	ed91 7b00 	vldr	d7, [r1]
 8014622:	ed91 5b02 	vldr	d5, [r1, #8]
 8014626:	3801      	subs	r0, #1
 8014628:	ee37 6b05 	vadd.f64	d6, d7, d5
 801462c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014630:	ed81 6b00 	vstr	d6, [r1]
 8014634:	ee37 7b05 	vadd.f64	d7, d7, d5
 8014638:	ed81 7b02 	vstr	d7, [r1, #8]
 801463c:	e796      	b.n	801456c <__kernel_rem_pio2+0x3fc>
 801463e:	ed92 7b00 	vldr	d7, [r2]
 8014642:	ed92 5b02 	vldr	d5, [r2, #8]
 8014646:	3901      	subs	r1, #1
 8014648:	ee37 6b05 	vadd.f64	d6, d7, d5
 801464c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014650:	ed82 6b00 	vstr	d6, [r2]
 8014654:	ee37 7b05 	vadd.f64	d7, d7, d5
 8014658:	ed82 7b02 	vstr	d7, [r2, #8]
 801465c:	e78b      	b.n	8014576 <__kernel_rem_pio2+0x406>
 801465e:	ed33 6b02 	vldmdb	r3!, {d6}
 8014662:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014666:	ee37 7b06 	vadd.f64	d7, d7, d6
 801466a:	e78b      	b.n	8014584 <__kernel_rem_pio2+0x414>
 801466c:	eeb1 5b45 	vneg.f64	d5, d5
 8014670:	eeb1 6b46 	vneg.f64	d6, d6
 8014674:	ed87 5b00 	vstr	d5, [r7]
 8014678:	eeb1 7b47 	vneg.f64	d7, d7
 801467c:	ed87 6b02 	vstr	d6, [r7, #8]
 8014680:	e78d      	b.n	801459e <__kernel_rem_pio2+0x42e>
 8014682:	bf00      	nop
 8014684:	f3af 8000 	nop.w
 8014688:	00000000 	.word	0x00000000
 801468c:	41700000 	.word	0x41700000
 8014690:	00000000 	.word	0x00000000
 8014694:	3e700000 	.word	0x3e700000
	...

080146a0 <__kernel_sin>:
 80146a0:	ee10 3a90 	vmov	r3, s1
 80146a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80146a8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80146ac:	da04      	bge.n	80146b8 <__kernel_sin+0x18>
 80146ae:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80146b2:	ee17 3a90 	vmov	r3, s15
 80146b6:	b35b      	cbz	r3, 8014710 <__kernel_sin+0x70>
 80146b8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80146bc:	ee20 5b06 	vmul.f64	d5, d0, d6
 80146c0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8014718 <__kernel_sin+0x78>
 80146c4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014720 <__kernel_sin+0x80>
 80146c8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80146cc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8014728 <__kernel_sin+0x88>
 80146d0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80146d4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014730 <__kernel_sin+0x90>
 80146d8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80146dc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8014738 <__kernel_sin+0x98>
 80146e0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80146e4:	b930      	cbnz	r0, 80146f4 <__kernel_sin+0x54>
 80146e6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014740 <__kernel_sin+0xa0>
 80146ea:	eea6 4b07 	vfma.f64	d4, d6, d7
 80146ee:	eea4 0b05 	vfma.f64	d0, d4, d5
 80146f2:	4770      	bx	lr
 80146f4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80146f8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80146fc:	eea1 7b04 	vfma.f64	d7, d1, d4
 8014700:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8014704:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8014748 <__kernel_sin+0xa8>
 8014708:	eea5 1b07 	vfma.f64	d1, d5, d7
 801470c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8014710:	4770      	bx	lr
 8014712:	bf00      	nop
 8014714:	f3af 8000 	nop.w
 8014718:	5acfd57c 	.word	0x5acfd57c
 801471c:	3de5d93a 	.word	0x3de5d93a
 8014720:	8a2b9ceb 	.word	0x8a2b9ceb
 8014724:	be5ae5e6 	.word	0xbe5ae5e6
 8014728:	57b1fe7d 	.word	0x57b1fe7d
 801472c:	3ec71de3 	.word	0x3ec71de3
 8014730:	19c161d5 	.word	0x19c161d5
 8014734:	bf2a01a0 	.word	0xbf2a01a0
 8014738:	1110f8a6 	.word	0x1110f8a6
 801473c:	3f811111 	.word	0x3f811111
 8014740:	55555549 	.word	0x55555549
 8014744:	bfc55555 	.word	0xbfc55555
 8014748:	55555549 	.word	0x55555549
 801474c:	3fc55555 	.word	0x3fc55555

08014750 <log>:
 8014750:	b470      	push	{r4, r5, r6}
 8014752:	ee10 1a90 	vmov	r1, s1
 8014756:	ee10 2a10 	vmov	r2, s0
 801475a:	f04f 34ff 	mov.w	r4, #4294967295
 801475e:	4294      	cmp	r4, r2
 8014760:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 8014764:	4c72      	ldr	r4, [pc, #456]	; (8014930 <log+0x1e0>)
 8014766:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 801476a:	eb74 0000 	sbcs.w	r0, r4, r0
 801476e:	ed2d 8b02 	vpush	{d8}
 8014772:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8014776:	d35c      	bcc.n	8014832 <log+0xe2>
 8014778:	4b6e      	ldr	r3, [pc, #440]	; (8014934 <log+0x1e4>)
 801477a:	4299      	cmp	r1, r3
 801477c:	bf08      	it	eq
 801477e:	2a00      	cmpeq	r2, #0
 8014780:	f000 80c6 	beq.w	8014910 <log+0x1c0>
 8014784:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014788:	ee30 0b47 	vsub.f64	d0, d0, d7
 801478c:	4b6a      	ldr	r3, [pc, #424]	; (8014938 <log+0x1e8>)
 801478e:	ee20 2b00 	vmul.f64	d2, d0, d0
 8014792:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8014796:	ee20 4b02 	vmul.f64	d4, d0, d2
 801479a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 801479e:	eea6 7b00 	vfma.f64	d7, d6, d0
 80147a2:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80147a6:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 80147aa:	eea6 7b02 	vfma.f64	d7, d6, d2
 80147ae:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80147b2:	eea5 6b00 	vfma.f64	d6, d5, d0
 80147b6:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 80147ba:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 80147be:	eea5 6b02 	vfma.f64	d6, d5, d2
 80147c2:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 80147c6:	eea3 5b00 	vfma.f64	d5, d3, d0
 80147ca:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 80147ce:	eea3 5b02 	vfma.f64	d5, d3, d2
 80147d2:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 80147d6:	eeb0 2b40 	vmov.f64	d2, d0
 80147da:	eea3 5b04 	vfma.f64	d5, d3, d4
 80147de:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80147e2:	eea5 6b04 	vfma.f64	d6, d5, d4
 80147e6:	eea6 7b04 	vfma.f64	d7, d6, d4
 80147ea:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8014918 <log+0x1c8>
 80147ee:	eeb0 1b47 	vmov.f64	d1, d7
 80147f2:	eeb0 5b40 	vmov.f64	d5, d0
 80147f6:	eea0 5b06 	vfma.f64	d5, d0, d6
 80147fa:	eea0 5b46 	vfms.f64	d5, d0, d6
 80147fe:	ee30 8b45 	vsub.f64	d8, d0, d5
 8014802:	ee25 7b05 	vmul.f64	d7, d5, d5
 8014806:	ee30 5b05 	vadd.f64	d5, d0, d5
 801480a:	eea7 2b03 	vfma.f64	d2, d7, d3
 801480e:	ee30 6b42 	vsub.f64	d6, d0, d2
 8014812:	eea7 6b03 	vfma.f64	d6, d7, d3
 8014816:	ee23 3b08 	vmul.f64	d3, d3, d8
 801481a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801481e:	eeb0 0b46 	vmov.f64	d0, d6
 8014822:	eea1 0b04 	vfma.f64	d0, d1, d4
 8014826:	ee32 0b00 	vadd.f64	d0, d2, d0
 801482a:	ecbd 8b02 	vpop	{d8}
 801482e:	bc70      	pop	{r4, r5, r6}
 8014830:	4770      	bx	lr
 8014832:	f1a3 0410 	sub.w	r4, r3, #16
 8014836:	f647 70df 	movw	r0, #32735	; 0x7fdf
 801483a:	4284      	cmp	r4, r0
 801483c:	d923      	bls.n	8014886 <log+0x136>
 801483e:	1894      	adds	r4, r2, r2
 8014840:	eb41 0001 	adc.w	r0, r1, r1
 8014844:	4320      	orrs	r0, r4
 8014846:	d105      	bne.n	8014854 <log+0x104>
 8014848:	ecbd 8b02 	vpop	{d8}
 801484c:	2001      	movs	r0, #1
 801484e:	bc70      	pop	{r4, r5, r6}
 8014850:	f7ff b95e 	b.w	8013b10 <__math_divzero>
 8014854:	4839      	ldr	r0, [pc, #228]	; (801493c <log+0x1ec>)
 8014856:	4281      	cmp	r1, r0
 8014858:	bf08      	it	eq
 801485a:	2a00      	cmpeq	r2, #0
 801485c:	d0e5      	beq.n	801482a <log+0xda>
 801485e:	041a      	lsls	r2, r3, #16
 8014860:	d404      	bmi.n	801486c <log+0x11c>
 8014862:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 8014866:	ea32 0303 	bics.w	r3, r2, r3
 801486a:	d104      	bne.n	8014876 <log+0x126>
 801486c:	ecbd 8b02 	vpop	{d8}
 8014870:	bc70      	pop	{r4, r5, r6}
 8014872:	f7ff b965 	b.w	8013b40 <__math_invalid>
 8014876:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8014920 <log+0x1d0>
 801487a:	ee20 7b07 	vmul.f64	d7, d0, d7
 801487e:	ec53 2b17 	vmov	r2, r3, d7
 8014882:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 8014886:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 801488a:	f503 13d0 	add.w	r3, r3, #1703936	; 0x1a0000
 801488e:	0d1e      	lsrs	r6, r3, #20
 8014890:	1e14      	subs	r4, r2, #0
 8014892:	4a29      	ldr	r2, [pc, #164]	; (8014938 <log+0x1e8>)
 8014894:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8014898:	f3c3 3046 	ubfx	r0, r3, #13, #7
 801489c:	0536      	lsls	r6, r6, #20
 801489e:	1b8d      	subs	r5, r1, r6
 80148a0:	eb02 1100 	add.w	r1, r2, r0, lsl #4
 80148a4:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 80148a8:	ec45 4b16 	vmov	d6, r4, r5
 80148ac:	151b      	asrs	r3, r3, #20
 80148ae:	eea6 5b07 	vfma.f64	d5, d6, d7
 80148b2:	ee07 3a90 	vmov	s15, r3
 80148b6:	ee25 2b05 	vmul.f64	d2, d5, d5
 80148ba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80148be:	ed92 4b00 	vldr	d4, [r2]
 80148c2:	ee25 1b02 	vmul.f64	d1, d5, d2
 80148c6:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 80148ca:	eea4 7b06 	vfma.f64	d7, d4, d6
 80148ce:	ee35 4b07 	vadd.f64	d4, d5, d7
 80148d2:	ee37 0b44 	vsub.f64	d0, d7, d4
 80148d6:	ed92 7b02 	vldr	d7, [r2, #8]
 80148da:	ee30 0b05 	vadd.f64	d0, d0, d5
 80148de:	eea7 0b06 	vfma.f64	d0, d7, d6
 80148e2:	ed92 7b04 	vldr	d7, [r2, #16]
 80148e6:	ed92 6b08 	vldr	d6, [r2, #32]
 80148ea:	eea7 0b02 	vfma.f64	d0, d7, d2
 80148ee:	ed92 7b06 	vldr	d7, [r2, #24]
 80148f2:	ed92 3b0c 	vldr	d3, [r2, #48]	; 0x30
 80148f6:	eea6 7b05 	vfma.f64	d7, d6, d5
 80148fa:	ed92 6b0a 	vldr	d6, [r2, #40]	; 0x28
 80148fe:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014902:	eea6 7b02 	vfma.f64	d7, d6, d2
 8014906:	eea1 0b07 	vfma.f64	d0, d1, d7
 801490a:	ee30 0b04 	vadd.f64	d0, d0, d4
 801490e:	e78c      	b.n	801482a <log+0xda>
 8014910:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8014928 <log+0x1d8>
 8014914:	e789      	b.n	801482a <log+0xda>
 8014916:	bf00      	nop
 8014918:	00000000 	.word	0x00000000
 801491c:	41a00000 	.word	0x41a00000
 8014920:	00000000 	.word	0x00000000
 8014924:	43300000 	.word	0x43300000
	...
 8014930:	000308ff 	.word	0x000308ff
 8014934:	3ff00000 	.word	0x3ff00000
 8014938:	0801ed08 	.word	0x0801ed08
 801493c:	7ff00000 	.word	0x7ff00000

08014940 <fabs>:
 8014940:	ec51 0b10 	vmov	r0, r1, d0
 8014944:	ee10 2a10 	vmov	r2, s0
 8014948:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801494c:	ec43 2b10 	vmov	d0, r2, r3
 8014950:	4770      	bx	lr
 8014952:	0000      	movs	r0, r0
 8014954:	0000      	movs	r0, r0
	...

08014958 <floor>:
 8014958:	ee10 1a90 	vmov	r1, s1
 801495c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014960:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8014964:	2b13      	cmp	r3, #19
 8014966:	b530      	push	{r4, r5, lr}
 8014968:	ee10 0a10 	vmov	r0, s0
 801496c:	ee10 5a10 	vmov	r5, s0
 8014970:	dc31      	bgt.n	80149d6 <floor+0x7e>
 8014972:	2b00      	cmp	r3, #0
 8014974:	da15      	bge.n	80149a2 <floor+0x4a>
 8014976:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014a30 <floor+0xd8>
 801497a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801497e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014986:	dd07      	ble.n	8014998 <floor+0x40>
 8014988:	2900      	cmp	r1, #0
 801498a:	da4e      	bge.n	8014a2a <floor+0xd2>
 801498c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014990:	4318      	orrs	r0, r3
 8014992:	d001      	beq.n	8014998 <floor+0x40>
 8014994:	4928      	ldr	r1, [pc, #160]	; (8014a38 <floor+0xe0>)
 8014996:	2000      	movs	r0, #0
 8014998:	460b      	mov	r3, r1
 801499a:	4602      	mov	r2, r0
 801499c:	ec43 2b10 	vmov	d0, r2, r3
 80149a0:	e020      	b.n	80149e4 <floor+0x8c>
 80149a2:	4a26      	ldr	r2, [pc, #152]	; (8014a3c <floor+0xe4>)
 80149a4:	411a      	asrs	r2, r3
 80149a6:	ea01 0402 	and.w	r4, r1, r2
 80149aa:	4304      	orrs	r4, r0
 80149ac:	d01a      	beq.n	80149e4 <floor+0x8c>
 80149ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014a30 <floor+0xd8>
 80149b2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80149b6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80149ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149be:	ddeb      	ble.n	8014998 <floor+0x40>
 80149c0:	2900      	cmp	r1, #0
 80149c2:	bfbe      	ittt	lt
 80149c4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80149c8:	fa40 f303 	asrlt.w	r3, r0, r3
 80149cc:	18c9      	addlt	r1, r1, r3
 80149ce:	ea21 0102 	bic.w	r1, r1, r2
 80149d2:	2000      	movs	r0, #0
 80149d4:	e7e0      	b.n	8014998 <floor+0x40>
 80149d6:	2b33      	cmp	r3, #51	; 0x33
 80149d8:	dd05      	ble.n	80149e6 <floor+0x8e>
 80149da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80149de:	d101      	bne.n	80149e4 <floor+0x8c>
 80149e0:	ee30 0b00 	vadd.f64	d0, d0, d0
 80149e4:	bd30      	pop	{r4, r5, pc}
 80149e6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80149ea:	f04f 32ff 	mov.w	r2, #4294967295
 80149ee:	40e2      	lsrs	r2, r4
 80149f0:	4202      	tst	r2, r0
 80149f2:	d0f7      	beq.n	80149e4 <floor+0x8c>
 80149f4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8014a30 <floor+0xd8>
 80149f8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80149fc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a04:	ddc8      	ble.n	8014998 <floor+0x40>
 8014a06:	2900      	cmp	r1, #0
 8014a08:	da02      	bge.n	8014a10 <floor+0xb8>
 8014a0a:	2b14      	cmp	r3, #20
 8014a0c:	d103      	bne.n	8014a16 <floor+0xbe>
 8014a0e:	3101      	adds	r1, #1
 8014a10:	ea20 0002 	bic.w	r0, r0, r2
 8014a14:	e7c0      	b.n	8014998 <floor+0x40>
 8014a16:	2401      	movs	r4, #1
 8014a18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014a1c:	fa04 f303 	lsl.w	r3, r4, r3
 8014a20:	4418      	add	r0, r3
 8014a22:	42a8      	cmp	r0, r5
 8014a24:	bf38      	it	cc
 8014a26:	1909      	addcc	r1, r1, r4
 8014a28:	e7f2      	b.n	8014a10 <floor+0xb8>
 8014a2a:	2000      	movs	r0, #0
 8014a2c:	4601      	mov	r1, r0
 8014a2e:	e7b3      	b.n	8014998 <floor+0x40>
 8014a30:	8800759c 	.word	0x8800759c
 8014a34:	7e37e43c 	.word	0x7e37e43c
 8014a38:	bff00000 	.word	0xbff00000
 8014a3c:	000fffff 	.word	0x000fffff

08014a40 <nan>:
 8014a40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014a48 <nan+0x8>
 8014a44:	4770      	bx	lr
 8014a46:	bf00      	nop
 8014a48:	00000000 	.word	0x00000000
 8014a4c:	7ff80000 	.word	0x7ff80000

08014a50 <scalbn>:
 8014a50:	ee10 1a90 	vmov	r1, s1
 8014a54:	b510      	push	{r4, lr}
 8014a56:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8014a5a:	b98c      	cbnz	r4, 8014a80 <scalbn+0x30>
 8014a5c:	ee10 3a10 	vmov	r3, s0
 8014a60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014a64:	430b      	orrs	r3, r1
 8014a66:	d011      	beq.n	8014a8c <scalbn+0x3c>
 8014a68:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8014b30 <scalbn+0xe0>
 8014a6c:	4b3c      	ldr	r3, [pc, #240]	; (8014b60 <scalbn+0x110>)
 8014a6e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014a72:	4298      	cmp	r0, r3
 8014a74:	da0b      	bge.n	8014a8e <scalbn+0x3e>
 8014a76:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8014b38 <scalbn+0xe8>
 8014a7a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014a7e:	e005      	b.n	8014a8c <scalbn+0x3c>
 8014a80:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8014a84:	429c      	cmp	r4, r3
 8014a86:	d107      	bne.n	8014a98 <scalbn+0x48>
 8014a88:	ee30 0b00 	vadd.f64	d0, d0, d0
 8014a8c:	bd10      	pop	{r4, pc}
 8014a8e:	ee10 1a90 	vmov	r1, s1
 8014a92:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8014a96:	3c36      	subs	r4, #54	; 0x36
 8014a98:	4404      	add	r4, r0
 8014a9a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8014a9e:	429c      	cmp	r4, r3
 8014aa0:	dd0d      	ble.n	8014abe <scalbn+0x6e>
 8014aa2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8014b40 <scalbn+0xf0>
 8014aa6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8014b48 <scalbn+0xf8>
 8014aaa:	eeb0 6b47 	vmov.f64	d6, d7
 8014aae:	ee10 3a90 	vmov	r3, s1
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	fe27 7b05 	vselge.f64	d7, d7, d5
 8014ab8:	ee27 0b06 	vmul.f64	d0, d7, d6
 8014abc:	e7e6      	b.n	8014a8c <scalbn+0x3c>
 8014abe:	2c00      	cmp	r4, #0
 8014ac0:	dd0a      	ble.n	8014ad8 <scalbn+0x88>
 8014ac2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8014ac6:	ec53 2b10 	vmov	r2, r3, d0
 8014aca:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8014ace:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8014ad2:	ec43 2b10 	vmov	d0, r2, r3
 8014ad6:	e7d9      	b.n	8014a8c <scalbn+0x3c>
 8014ad8:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8014adc:	da19      	bge.n	8014b12 <scalbn+0xc2>
 8014ade:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014ae2:	4298      	cmp	r0, r3
 8014ae4:	ee10 3a90 	vmov	r3, s1
 8014ae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014aec:	dd09      	ble.n	8014b02 <scalbn+0xb2>
 8014aee:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8014b40 <scalbn+0xf0>
 8014af2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8014b48 <scalbn+0xf8>
 8014af6:	eeb0 7b40 	vmov.f64	d7, d0
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8014b00:	e7bb      	b.n	8014a7a <scalbn+0x2a>
 8014b02:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8014b38 <scalbn+0xe8>
 8014b06:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8014b50 <scalbn+0x100>
 8014b0a:	eeb0 7b40 	vmov.f64	d7, d0
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	e7f4      	b.n	8014afc <scalbn+0xac>
 8014b12:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8014b16:	ec53 2b10 	vmov	r2, r3, d0
 8014b1a:	3436      	adds	r4, #54	; 0x36
 8014b1c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8014b20:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8014b24:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8014b58 <scalbn+0x108>
 8014b28:	ec43 2b10 	vmov	d0, r2, r3
 8014b2c:	e7a5      	b.n	8014a7a <scalbn+0x2a>
 8014b2e:	bf00      	nop
 8014b30:	00000000 	.word	0x00000000
 8014b34:	43500000 	.word	0x43500000
 8014b38:	c2f8f359 	.word	0xc2f8f359
 8014b3c:	01a56e1f 	.word	0x01a56e1f
 8014b40:	8800759c 	.word	0x8800759c
 8014b44:	7e37e43c 	.word	0x7e37e43c
 8014b48:	8800759c 	.word	0x8800759c
 8014b4c:	fe37e43c 	.word	0xfe37e43c
 8014b50:	c2f8f359 	.word	0xc2f8f359
 8014b54:	81a56e1f 	.word	0x81a56e1f
 8014b58:	00000000 	.word	0x00000000
 8014b5c:	3c900000 	.word	0x3c900000
 8014b60:	ffff3cb0 	.word	0xffff3cb0

08014b64 <_init>:
 8014b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b66:	bf00      	nop
 8014b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b6a:	bc08      	pop	{r3}
 8014b6c:	469e      	mov	lr, r3
 8014b6e:	4770      	bx	lr

08014b70 <_fini>:
 8014b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b72:	bf00      	nop
 8014b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b76:	bc08      	pop	{r3}
 8014b78:	469e      	mov	lr, r3
 8014b7a:	4770      	bx	lr
