
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5b4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002638  0800d858  0800d858  0001d858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe90  0800fe90  0003f000  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe90  0800fe90  0001fe90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe98  0800fe98  0003f000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe98  0800fe98  0001fe98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe9c  0800fe9c  0001fe9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000054c  24000000  0800fea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000eb40  24000560  080103ec  00020560  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  2400f0a0  080103ec  0002f0a0  2**0
                  ALLOC
 11 .dtcm         0000f000  20000000  20000000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  0003f000  2**0
                  CONTENTS, READONLY
 13 .debug_info   00045fa9  00000000  00000000  0003f02e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00007406  00000000  00000000  00084fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00020376  00000000  00000000  0008c3dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001898  00000000  00000000  000ac758  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00004e30  00000000  00000000  000adff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003eae4  00000000  00000000  000b2e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00022622  00000000  00000000  000f1904  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001814ef  00000000  00000000  00113f26  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000e9  00000000  00000000  00295415  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000064c8  00000000  00000000  00295500  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000560 	.word	0x24000560
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d83c 	.word	0x0800d83c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000564 	.word	0x24000564
 80002dc:	0800d83c 	.word	0x0800d83c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <Load_Presets>:



// Load from the Presets table
void Load_Presets(void)
{
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <Load_Presets+0x40>)
 8000692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000696:	4c0f      	ldr	r4, [pc, #60]	; (80006d4 <Load_Presets+0x44>)
 8000698:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 800069c:	4f0e      	ldr	r7, [pc, #56]	; (80006d8 <Load_Presets+0x48>)
 800069e:	4e0f      	ldr	r6, [pc, #60]	; (80006dc <Load_Presets+0x4c>)
 80006a0:	4d0f      	ldr	r5, [pc, #60]	; (80006e0 <Load_Presets+0x50>)
	int k;

	for(k=0; k<MAXPRESETS; k++)
	{
		strcpy(psets[k].name, pNames[k]);
 80006a2:	4621      	mov	r1, r4
 80006a4:	4618      	mov	r0, r3
 80006a6:	f00a f8a7 	bl	800a7f8 <strcpy>
		psets[k].freq = pFreqs[k];
		psets[k].mode = pModes[k];
 80006aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		strcpy(psets[k].name, pNames[k]);
 80006ae:	4603      	mov	r3, r0
		psets[k].bw   = pBws[k];
 80006b0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
		psets[k].freq = pFreqs[k];
 80006b4:	f857 0b04 	ldr.w	r0, [r7], #4
 80006b8:	3410      	adds	r4, #16
		psets[k].mode = pModes[k];
 80006ba:	7519      	strb	r1, [r3, #20]
 80006bc:	3318      	adds	r3, #24
		psets[k].freq = pFreqs[k];
 80006be:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 80006c2:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 80006c6:	4543      	cmp	r3, r8
 80006c8:	d1eb      	bne.n	80006a2 <Load_Presets+0x12>
	}
}
 80006ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006ce:	bf00      	nop
 80006d0:	240088c0 	.word	0x240088c0
 80006d4:	24000000 	.word	0x24000000
 80006d8:	0800f868 	.word	0x0800f868
 80006dc:	0800f89f 	.word	0x0800f89f
 80006e0:	0800f857 	.word	0x0800f857

080006e4 <Tune_Preset>:
//-----------------------------------------------------------------------------
// Tune to the chosen preset
void Tune_Preset(uint8_t Idx)
{
 80006e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int kHz, Hz;

	LOfreq = psets[Idx].freq;
 80006e8:	0044      	lsls	r4, r0, #1
 80006ea:	4e5e      	ldr	r6, [pc, #376]	; (8000864 <Tune_Preset+0x180>)
 80006ec:	4a5e      	ldr	r2, [pc, #376]	; (8000868 <Tune_Preset+0x184>)
{
 80006ee:	4605      	mov	r5, r0
	LOfreq = psets[Idx].freq;
 80006f0:	1823      	adds	r3, r4, r0
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	CurrentMode = newmode;
 80006f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000898 <Tune_Preset+0x1b4>
	LOfreq = psets[Idx].freq;
 80006f6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80006fa:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 80006fc:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 80006fe:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 8000700:	f888 3000 	strb.w	r3, [r8]

	switch(CurrentMode)
 8000704:	2b03      	cmp	r3, #3
 8000706:	d812      	bhi.n	800072e <Tune_Preset+0x4a>
 8000708:	e8df f003 	tbb	[pc, r3]
 800070c:	02205031 	.word	0x02205031
		//     ChangeColor(ptr, hUSB, GUI_RED);
		//     ChangeColor(ptr, hCW,  GUI_BLACK);
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000710:	4b56      	ldr	r3, [pc, #344]	; (800086c <Tune_Preset+0x188>)
	Decay[CW]   = AGC_decay[newAGC];
 8000712:	4a57      	ldr	r2, [pc, #348]	; (8000870 <Tune_Preset+0x18c>)
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000714:	78db      	ldrb	r3, [r3, #3]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000716:	4957      	ldr	r1, [pc, #348]	; (8000874 <Tune_Preset+0x190>)
	Decay[CW]   = AGC_decay[newAGC];
 8000718:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	CurrentAGC =newAGC;
 800071c:	4f56      	ldr	r7, [pc, #344]	; (8000878 <Tune_Preset+0x194>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 800071e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000722:	6810      	ldr	r0, [r2, #0]
	CurrentAGC =newAGC;
 8000724:	703b      	strb	r3, [r7, #0]
	Decay[CW]   = AGC_decay[newAGC];
 8000726:	4a55      	ldr	r2, [pc, #340]	; (800087c <Tune_Preset+0x198>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000728:	4b55      	ldr	r3, [pc, #340]	; (8000880 <Tune_Preset+0x19c>)
	Decay[CW]   = AGC_decay[newAGC];
 800072a:	60d0      	str	r0, [r2, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 800072c:	80d9      	strh	r1, [r3, #6]
 800072e:	4f55      	ldr	r7, [pc, #340]	; (8000884 <Tune_Preset+0x1a0>)
	SetBW( psets[Idx].bw);
 8000730:	442c      	add	r4, r5
 8000732:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
	CurrentBW = newbw;
 8000736:	7d63      	ldrb	r3, [r4, #21]
 8000738:	703b      	strb	r3, [r7, #0]
	strcpy(msg, psets[Idx].name);
 800073a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800073e:	4852      	ldr	r0, [pc, #328]	; (8000888 <Tune_Preset+0x1a4>)
 8000740:	eb06 01c5 	add.w	r1, r6, r5, lsl #3
}
 8000744:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	strcpy(msg, psets[Idx].name);
 8000748:	f00a b856 	b.w	800a7f8 <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 800074c:	4b47      	ldr	r3, [pc, #284]	; (800086c <Tune_Preset+0x188>)
	Decay[USB]  = AGC_decay[newAGC];
 800074e:	4a48      	ldr	r2, [pc, #288]	; (8000870 <Tune_Preset+0x18c>)
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000750:	789b      	ldrb	r3, [r3, #2]
	CurrentAGC =newAGC;
 8000752:	4f49      	ldr	r7, [pc, #292]	; (8000878 <Tune_Preset+0x194>)
	Decay[USB]  = AGC_decay[newAGC];
 8000754:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Hcount[USB] = Hangcount[newAGC]; break;
 8000758:	4946      	ldr	r1, [pc, #280]	; (8000874 <Tune_Preset+0x190>)
	CurrentAGC =newAGC;
 800075a:	703b      	strb	r3, [r7, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 800075c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000760:	6810      	ldr	r0, [r2, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000762:	4b47      	ldr	r3, [pc, #284]	; (8000880 <Tune_Preset+0x19c>)
	Decay[USB]  = AGC_decay[newAGC];
 8000764:	4a45      	ldr	r2, [pc, #276]	; (800087c <Tune_Preset+0x198>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000766:	8099      	strh	r1, [r3, #4]
	Decay[USB]  = AGC_decay[newAGC];
 8000768:	6090      	str	r0, [r2, #8]
 800076a:	4f46      	ldr	r7, [pc, #280]	; (8000884 <Tune_Preset+0x1a0>)
 800076c:	e7e0      	b.n	8000730 <Tune_Preset+0x4c>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 800076e:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800089c <Tune_Preset+0x1b8>
		AMindex = 0; // TODO toglimi
 8000772:	f04f 0c00 	mov.w	ip, #0
	CurrentBW = newbw;
 8000776:	4f43      	ldr	r7, [pc, #268]	; (8000884 <Tune_Preset+0x1a0>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000778:	f44f 6380 	mov.w	r3, #1024	; 0x400
	CurrentBW = newbw;
 800077c:	f89a 0000 	ldrb.w	r0, [sl]
		AMindex = 0; // TODO toglimi
 8000780:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80008a0 <Tune_Preset+0x1bc>
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000784:	4a41      	ldr	r2, [pc, #260]	; (800088c <Tune_Preset+0x1a8>)
 8000786:	4942      	ldr	r1, [pc, #264]	; (8000890 <Tune_Preset+0x1ac>)
	CurrentBW = newbw;
 8000788:	7038      	strb	r0, [r7, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 800078a:	4842      	ldr	r0, [pc, #264]	; (8000894 <Tune_Preset+0x1b0>)
		AMindex = 0; // TODO toglimi
 800078c:	f8a9 c000 	strh.w	ip, [r9]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000790:	f001 f860 	bl	8001854 <SDR_2R_toC_f32>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000794:	4935      	ldr	r1, [pc, #212]	; (800086c <Tune_Preset+0x188>)
	CurrentAGC =newAGC;
 8000796:	4838      	ldr	r0, [pc, #224]	; (8000878 <Tune_Preset+0x194>)
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000798:	780b      	ldrb	r3, [r1, #0]
	switch(CurrentMode)
 800079a:	f898 2000 	ldrb.w	r2, [r8]
	CurrentAGC =newAGC;
 800079e:	7003      	strb	r3, [r0, #0]
	switch(CurrentMode)
 80007a0:	2a03      	cmp	r2, #3
 80007a2:	d8c5      	bhi.n	8000730 <Tune_Preset+0x4c>
 80007a4:	e8df f002 	tbb	[pc, r2]
 80007a8:	314f4013 	.word	0x314f4013
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80007ac:	4b2f      	ldr	r3, [pc, #188]	; (800086c <Tune_Preset+0x188>)
	Decay[LSB]  = AGC_decay[newAGC];
 80007ae:	4a30      	ldr	r2, [pc, #192]	; (8000870 <Tune_Preset+0x18c>)
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80007b0:	785b      	ldrb	r3, [r3, #1]
	CurrentAGC =newAGC;
 80007b2:	4f31      	ldr	r7, [pc, #196]	; (8000878 <Tune_Preset+0x194>)
	Decay[LSB]  = AGC_decay[newAGC];
 80007b4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Hcount[LSB] = Hangcount[newAGC]; break;
 80007b8:	492e      	ldr	r1, [pc, #184]	; (8000874 <Tune_Preset+0x190>)
	CurrentAGC =newAGC;
 80007ba:	703b      	strb	r3, [r7, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 80007bc:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 80007c0:	6810      	ldr	r0, [r2, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 80007c2:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <Tune_Preset+0x19c>)
	Decay[LSB]  = AGC_decay[newAGC];
 80007c4:	4a2d      	ldr	r2, [pc, #180]	; (800087c <Tune_Preset+0x198>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 80007c6:	8059      	strh	r1, [r3, #2]
	Decay[LSB]  = AGC_decay[newAGC];
 80007c8:	6050      	str	r0, [r2, #4]
 80007ca:	4f2e      	ldr	r7, [pc, #184]	; (8000884 <Tune_Preset+0x1a0>)
 80007cc:	e7b0      	b.n	8000730 <Tune_Preset+0x4c>
	SetBW( psets[Idx].bw);
 80007ce:	442c      	add	r4, r5
	Hcount[AM]  = Hangcount[newAGC]; break;
 80007d0:	4928      	ldr	r1, [pc, #160]	; (8000874 <Tune_Preset+0x190>)
	Decay[AM]   = AGC_decay[newAGC];
 80007d2:	4a27      	ldr	r2, [pc, #156]	; (8000870 <Tune_Preset+0x18c>)
	SetBW( psets[Idx].bw);
 80007d4:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
	Hcount[AM]  = Hangcount[newAGC]; break;
 80007d8:	f831 c013 	ldrh.w	ip, [r1, r3, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 80007dc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80007e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
	SetBW( psets[Idx].bw);
 80007e4:	7d61      	ldrb	r1, [r4, #21]
		AMindex = 0; // TODO toglimi
 80007e6:	2400      	movs	r4, #0
	Decay[AM]   = AGC_decay[newAGC];
 80007e8:	6810      	ldr	r0, [r2, #0]
	CurrentBW = newbw;
 80007ea:	7039      	strb	r1, [r7, #0]
		bw[AM] = newbw;
 80007ec:	f88a 1000 	strb.w	r1, [sl]
	Decay[AM]   = AGC_decay[newAGC];
 80007f0:	4922      	ldr	r1, [pc, #136]	; (800087c <Tune_Preset+0x198>)
		AMindex = 0; // TODO toglimi
 80007f2:	f8a9 4000 	strh.w	r4, [r9]
	Hcount[AM]  = Hangcount[newAGC]; break;
 80007f6:	4c22      	ldr	r4, [pc, #136]	; (8000880 <Tune_Preset+0x19c>)
	Decay[AM]   = AGC_decay[newAGC];
 80007f8:	6008      	str	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80007fa:	4a24      	ldr	r2, [pc, #144]	; (800088c <Tune_Preset+0x1a8>)
 80007fc:	4924      	ldr	r1, [pc, #144]	; (8000890 <Tune_Preset+0x1ac>)
 80007fe:	4825      	ldr	r0, [pc, #148]	; (8000894 <Tune_Preset+0x1b0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000800:	f8a4 c000 	strh.w	ip, [r4]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000804:	f001 f826 	bl	8001854 <SDR_2R_toC_f32>
 8000808:	e797      	b.n	800073a <Tune_Preset+0x56>
	Decay[CW]   = AGC_decay[newAGC];
 800080a:	4a19      	ldr	r2, [pc, #100]	; (8000870 <Tune_Preset+0x18c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 800080c:	4819      	ldr	r0, [pc, #100]	; (8000874 <Tune_Preset+0x190>)
	Decay[CW]   = AGC_decay[newAGC];
 800080e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case CW :       agc[CW] = newAGC;
 8000812:	70cb      	strb	r3, [r1, #3]
	Decay[CW]   = AGC_decay[newAGC];
 8000814:	4919      	ldr	r1, [pc, #100]	; (800087c <Tune_Preset+0x198>)
 8000816:	f8d2 c000 	ldr.w	ip, [r2]
	Hcount[CW]  = Hangcount[newAGC]; break;
 800081a:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <Tune_Preset+0x19c>)
	Decay[CW]   = AGC_decay[newAGC];
 8000820:	f8c1 c00c 	str.w	ip, [r1, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000824:	80da      	strh	r2, [r3, #6]
 8000826:	e783      	b.n	8000730 <Tune_Preset+0x4c>
	Decay[LSB]  = AGC_decay[newAGC];
 8000828:	4a11      	ldr	r2, [pc, #68]	; (8000870 <Tune_Preset+0x18c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 800082a:	4812      	ldr	r0, [pc, #72]	; (8000874 <Tune_Preset+0x190>)
	Decay[LSB]  = AGC_decay[newAGC];
 800082c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case LSB :      agc[LSB] = newAGC;
 8000830:	704b      	strb	r3, [r1, #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000832:	4912      	ldr	r1, [pc, #72]	; (800087c <Tune_Preset+0x198>)
 8000834:	f8d2 c000 	ldr.w	ip, [r2]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000838:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <Tune_Preset+0x19c>)
	Decay[LSB]  = AGC_decay[newAGC];
 800083e:	f8c1 c004 	str.w	ip, [r1, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000842:	805a      	strh	r2, [r3, #2]
 8000844:	e774      	b.n	8000730 <Tune_Preset+0x4c>
	Decay[USB]  = AGC_decay[newAGC];
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <Tune_Preset+0x18c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000848:	480a      	ldr	r0, [pc, #40]	; (8000874 <Tune_Preset+0x190>)
	Decay[USB]  = AGC_decay[newAGC];
 800084a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case USB :      agc[USB] = newAGC;
 800084e:	708b      	strb	r3, [r1, #2]
	Decay[USB]  = AGC_decay[newAGC];
 8000850:	490a      	ldr	r1, [pc, #40]	; (800087c <Tune_Preset+0x198>)
 8000852:	f8d2 c000 	ldr.w	ip, [r2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000856:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <Tune_Preset+0x19c>)
	Decay[USB]  = AGC_decay[newAGC];
 800085c:	f8c1 c008 	str.w	ip, [r1, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000860:	809a      	strh	r2, [r3, #4]
 8000862:	e765      	b.n	8000730 <Tune_Preset+0x4c>
 8000864:	240088c0 	.word	0x240088c0
 8000868:	24009e88 	.word	0x24009e88
 800086c:	240077e8 	.word	0x240077e8
 8000870:	2400c3ac 	.word	0x2400c3ac
 8000874:	24009e84 	.word	0x24009e84
 8000878:	24000660 	.word	0x24000660
 800087c:	24002a78 	.word	0x24002a78
 8000880:	24008028 	.word	0x24008028
 8000884:	24000a70 	.word	0x24000a70
 8000888:	2400443c 	.word	0x2400443c
 800088c:	20004000 	.word	0x20004000
 8000890:	0800d858 	.word	0x0800d858
 8000894:	0800e858 	.word	0x0800e858
 8000898:	2400c3bc 	.word	0x2400c3bc
 800089c:	24008e78 	.word	0x24008e78
 80008a0:	2400d7c2 	.word	0x2400d7c2

080008a4 <SetBW>:
	switch(CurrentMode)
 80008a4:	4a09      	ldr	r2, [pc, #36]	; (80008cc <SetBW+0x28>)
	CurrentBW = newbw;
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <SetBW+0x2c>)
{
 80008a8:	b430      	push	{r4, r5}
	switch(CurrentMode)
 80008aa:	7814      	ldrb	r4, [r2, #0]
	CurrentBW = newbw;
 80008ac:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 80008ae:	b10c      	cbz	r4, 80008b4 <SetBW+0x10>
}	
 80008b0:	bc30      	pop	{r4, r5}
 80008b2:	4770      	bx	lr
		bw[AM] = newbw;
 80008b4:	4907      	ldr	r1, [pc, #28]	; (80008d4 <SetBW+0x30>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80008b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 80008ba:	4d07      	ldr	r5, [pc, #28]	; (80008d8 <SetBW+0x34>)
		bw[AM] = newbw;
 80008bc:	7008      	strb	r0, [r1, #0]
		AMindex = 0; // TODO toglimi
 80008be:	802c      	strh	r4, [r5, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80008c0:	4a06      	ldr	r2, [pc, #24]	; (80008dc <SetBW+0x38>)
 80008c2:	4907      	ldr	r1, [pc, #28]	; (80008e0 <SetBW+0x3c>)
 80008c4:	4807      	ldr	r0, [pc, #28]	; (80008e4 <SetBW+0x40>)
}	
 80008c6:	bc30      	pop	{r4, r5}
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80008c8:	f000 bfc4 	b.w	8001854 <SDR_2R_toC_f32>
 80008cc:	2400c3bc 	.word	0x2400c3bc
 80008d0:	24000a70 	.word	0x24000a70
 80008d4:	24008e78 	.word	0x24008e78
 80008d8:	2400d7c2 	.word	0x2400d7c2
 80008dc:	20004000 	.word	0x20004000
 80008e0:	0800d858 	.word	0x0800d858
 80008e4:	0800e858 	.word	0x0800e858

080008e8 <SetAGC>:
	switch(CurrentMode)
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <SetAGC+0x90>)
	CurrentAGC =newAGC;
 80008ea:	4a24      	ldr	r2, [pc, #144]	; (800097c <SetAGC+0x94>)
	switch(CurrentMode)
 80008ec:	781b      	ldrb	r3, [r3, #0]
{
 80008ee:	b430      	push	{r4, r5}
	CurrentAGC =newAGC;
 80008f0:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	d810      	bhi.n	8000918 <SetAGC+0x30>
 80008f6:	e8df f003 	tbb	[pc, r3]
 80008fa:	202f      	.short	0x202f
 80008fc:	0211      	.short	0x0211
	Decay[CW]   = AGC_decay[newAGC];
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <SetAGC+0x98>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000900:	4a20      	ldr	r2, [pc, #128]	; (8000984 <SetAGC+0x9c>)
	Decay[CW]   = AGC_decay[newAGC];
 8000902:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000906:	4c20      	ldr	r4, [pc, #128]	; (8000988 <SetAGC+0xa0>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000908:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 800090c:	681d      	ldr	r5, [r3, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 800090e:	4a1f      	ldr	r2, [pc, #124]	; (800098c <SetAGC+0xa4>)
	case CW :       agc[CW] = newAGC;
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <SetAGC+0xa8>)
	Decay[CW]   = AGC_decay[newAGC];
 8000912:	60e5      	str	r5, [r4, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000914:	80d1      	strh	r1, [r2, #6]
	case CW :       agc[CW] = newAGC;
 8000916:	70d8      	strb	r0, [r3, #3]
}	
 8000918:	bc30      	pop	{r4, r5}
 800091a:	4770      	bx	lr
	Decay[USB]  = AGC_decay[newAGC];
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <SetAGC+0x98>)
	Hcount[USB] = Hangcount[newAGC]; break;
 800091e:	4a19      	ldr	r2, [pc, #100]	; (8000984 <SetAGC+0x9c>)
	Decay[USB]  = AGC_decay[newAGC];
 8000920:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000924:	4c18      	ldr	r4, [pc, #96]	; (8000988 <SetAGC+0xa0>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000926:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 800092a:	681d      	ldr	r5, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 800092c:	4a17      	ldr	r2, [pc, #92]	; (800098c <SetAGC+0xa4>)
	case USB :      agc[USB] = newAGC;
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 8000930:	60a5      	str	r5, [r4, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000932:	8091      	strh	r1, [r2, #4]
	case USB :      agc[USB] = newAGC;
 8000934:	7098      	strb	r0, [r3, #2]
}	
 8000936:	bc30      	pop	{r4, r5}
 8000938:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <SetAGC+0x98>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 800093c:	4a11      	ldr	r2, [pc, #68]	; (8000984 <SetAGC+0x9c>)
	Decay[LSB]  = AGC_decay[newAGC];
 800093e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000942:	4c11      	ldr	r4, [pc, #68]	; (8000988 <SetAGC+0xa0>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000944:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000948:	681d      	ldr	r5, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 800094a:	4a10      	ldr	r2, [pc, #64]	; (800098c <SetAGC+0xa4>)
	case LSB :      agc[LSB] = newAGC;
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 800094e:	6065      	str	r5, [r4, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000950:	8051      	strh	r1, [r2, #2]
	case LSB :      agc[LSB] = newAGC;
 8000952:	7058      	strb	r0, [r3, #1]
}	
 8000954:	bc30      	pop	{r4, r5}
 8000956:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <SetAGC+0x98>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <SetAGC+0x9c>)
	Decay[AM]   = AGC_decay[newAGC];
 800095c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000960:	4c09      	ldr	r4, [pc, #36]	; (8000988 <SetAGC+0xa0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000962:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8000966:	681d      	ldr	r5, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000968:	4a08      	ldr	r2, [pc, #32]	; (800098c <SetAGC+0xa4>)
	case AM :       agc[AM] = newAGC;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 800096c:	6025      	str	r5, [r4, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 800096e:	8011      	strh	r1, [r2, #0]
	case AM :       agc[AM] = newAGC;
 8000970:	7018      	strb	r0, [r3, #0]
}	
 8000972:	bc30      	pop	{r4, r5}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	2400c3bc 	.word	0x2400c3bc
 800097c:	24000660 	.word	0x24000660
 8000980:	2400c3ac 	.word	0x2400c3ac
 8000984:	24009e84 	.word	0x24009e84
 8000988:	24002a78 	.word	0x24002a78
 800098c:	24008028 	.word	0x24008028
 8000990:	240077e8 	.word	0x240077e8

08000994 <SetMode>:
{
 8000994:	b538      	push	{r3, r4, r5, lr}
	CurrentMode = newmode;
 8000996:	4c48      	ldr	r4, [pc, #288]	; (8000ab8 <SetMode+0x124>)
 8000998:	7020      	strb	r0, [r4, #0]
	switch(CurrentMode)
 800099a:	2803      	cmp	r0, #3
 800099c:	d816      	bhi.n	80009cc <SetMode+0x38>
 800099e:	e8df f000 	tbb	[pc, r0]
 80009a2:	2a3e      	.short	0x2a3e
 80009a4:	0216      	.short	0x0216
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80009a6:	4b45      	ldr	r3, [pc, #276]	; (8000abc <SetMode+0x128>)
	Decay[CW]   = AGC_decay[newAGC];
 80009a8:	4a45      	ldr	r2, [pc, #276]	; (8000ac0 <SetMode+0x12c>)
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80009aa:	78db      	ldrb	r3, [r3, #3]
 80009ac:	4c45      	ldr	r4, [pc, #276]	; (8000ac4 <SetMode+0x130>)
	Decay[CW]   = AGC_decay[newAGC];
 80009ae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	CurrentAGC =newAGC;
 80009b2:	4945      	ldr	r1, [pc, #276]	; (8000ac8 <SetMode+0x134>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 80009b4:	4845      	ldr	r0, [pc, #276]	; (8000acc <SetMode+0x138>)
	Decay[CW]   = AGC_decay[newAGC];
 80009b6:	6815      	ldr	r5, [r2, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 80009b8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	CurrentBW = newbw;
 80009bc:	78e2      	ldrb	r2, [r4, #3]
	CurrentAGC =newAGC;
 80009be:	700b      	strb	r3, [r1, #0]
	Decay[CW]   = AGC_decay[newAGC];
 80009c0:	4c43      	ldr	r4, [pc, #268]	; (8000ad0 <SetMode+0x13c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 80009c2:	4944      	ldr	r1, [pc, #272]	; (8000ad4 <SetMode+0x140>)
	CurrentBW = newbw;
 80009c4:	4b44      	ldr	r3, [pc, #272]	; (8000ad8 <SetMode+0x144>)
	Decay[CW]   = AGC_decay[newAGC];
 80009c6:	60e5      	str	r5, [r4, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 80009c8:	80c8      	strh	r0, [r1, #6]
	CurrentBW = newbw;
 80009ca:	701a      	strb	r2, [r3, #0]
		break;

	default :
		break;
	}
}	
 80009cc:	bd38      	pop	{r3, r4, r5, pc}
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 80009ce:	4b3b      	ldr	r3, [pc, #236]	; (8000abc <SetMode+0x128>)
	Decay[USB]  = AGC_decay[newAGC];
 80009d0:	4a3b      	ldr	r2, [pc, #236]	; (8000ac0 <SetMode+0x12c>)
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 80009d2:	789b      	ldrb	r3, [r3, #2]
 80009d4:	4c3b      	ldr	r4, [pc, #236]	; (8000ac4 <SetMode+0x130>)
	Decay[USB]  = AGC_decay[newAGC];
 80009d6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	CurrentAGC =newAGC;
 80009da:	493b      	ldr	r1, [pc, #236]	; (8000ac8 <SetMode+0x134>)
	Hcount[USB] = Hangcount[newAGC]; break;
 80009dc:	483b      	ldr	r0, [pc, #236]	; (8000acc <SetMode+0x138>)
	Decay[USB]  = AGC_decay[newAGC];
 80009de:	6815      	ldr	r5, [r2, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 80009e0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	CurrentBW = newbw;
 80009e4:	78a2      	ldrb	r2, [r4, #2]
	CurrentAGC =newAGC;
 80009e6:	700b      	strb	r3, [r1, #0]
	Decay[USB]  = AGC_decay[newAGC];
 80009e8:	4c39      	ldr	r4, [pc, #228]	; (8000ad0 <SetMode+0x13c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 80009ea:	493a      	ldr	r1, [pc, #232]	; (8000ad4 <SetMode+0x140>)
	CurrentBW = newbw;
 80009ec:	4b3a      	ldr	r3, [pc, #232]	; (8000ad8 <SetMode+0x144>)
	Decay[USB]  = AGC_decay[newAGC];
 80009ee:	60a5      	str	r5, [r4, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 80009f0:	8088      	strh	r0, [r1, #4]
	CurrentBW = newbw;
 80009f2:	701a      	strb	r2, [r3, #0]
}	
 80009f4:	bd38      	pop	{r3, r4, r5, pc}
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80009f6:	4b31      	ldr	r3, [pc, #196]	; (8000abc <SetMode+0x128>)
	Decay[LSB]  = AGC_decay[newAGC];
 80009f8:	4a31      	ldr	r2, [pc, #196]	; (8000ac0 <SetMode+0x12c>)
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80009fa:	785b      	ldrb	r3, [r3, #1]
 80009fc:	4c31      	ldr	r4, [pc, #196]	; (8000ac4 <SetMode+0x130>)
	Decay[LSB]  = AGC_decay[newAGC];
 80009fe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	CurrentAGC =newAGC;
 8000a02:	4931      	ldr	r1, [pc, #196]	; (8000ac8 <SetMode+0x134>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000a04:	4831      	ldr	r0, [pc, #196]	; (8000acc <SetMode+0x138>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000a06:	6815      	ldr	r5, [r2, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000a08:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	CurrentBW = newbw;
 8000a0c:	7862      	ldrb	r2, [r4, #1]
	CurrentAGC =newAGC;
 8000a0e:	700b      	strb	r3, [r1, #0]
	Decay[LSB]  = AGC_decay[newAGC];
 8000a10:	4c2f      	ldr	r4, [pc, #188]	; (8000ad0 <SetMode+0x13c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000a12:	4930      	ldr	r1, [pc, #192]	; (8000ad4 <SetMode+0x140>)
	CurrentBW = newbw;
 8000a14:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <SetMode+0x144>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000a16:	6065      	str	r5, [r4, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000a18:	8048      	strh	r0, [r1, #2]
	CurrentBW = newbw;
 8000a1a:	701a      	strb	r2, [r3, #0]
}	
 8000a1c:	bd38      	pop	{r3, r4, r5, pc}
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000a1e:	4929      	ldr	r1, [pc, #164]	; (8000ac4 <SetMode+0x130>)
		AMindex = 0; // TODO toglimi
 8000a20:	2500      	movs	r5, #0
	CurrentBW = newbw;
 8000a22:	4a2d      	ldr	r2, [pc, #180]	; (8000ad8 <SetMode+0x144>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
	CurrentBW = newbw;
 8000a28:	7809      	ldrb	r1, [r1, #0]
		AMindex = 0; // TODO toglimi
 8000a2a:	482c      	ldr	r0, [pc, #176]	; (8000adc <SetMode+0x148>)
	CurrentBW = newbw;
 8000a2c:	7011      	strb	r1, [r2, #0]
		AMindex = 0; // TODO toglimi
 8000a2e:	8005      	strh	r5, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000a30:	4a2b      	ldr	r2, [pc, #172]	; (8000ae0 <SetMode+0x14c>)
 8000a32:	492c      	ldr	r1, [pc, #176]	; (8000ae4 <SetMode+0x150>)
 8000a34:	482c      	ldr	r0, [pc, #176]	; (8000ae8 <SetMode+0x154>)
 8000a36:	f000 ff0d 	bl	8001854 <SDR_2R_toC_f32>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000a3a:	4920      	ldr	r1, [pc, #128]	; (8000abc <SetMode+0x128>)
	CurrentAGC =newAGC;
 8000a3c:	4822      	ldr	r0, [pc, #136]	; (8000ac8 <SetMode+0x134>)
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000a3e:	780b      	ldrb	r3, [r1, #0]
	switch(CurrentMode)
 8000a40:	7822      	ldrb	r2, [r4, #0]
	CurrentAGC =newAGC;
 8000a42:	7003      	strb	r3, [r0, #0]
	switch(CurrentMode)
 8000a44:	2a03      	cmp	r2, #3
 8000a46:	d8c1      	bhi.n	80009cc <SetMode+0x38>
 8000a48:	e8df f002 	tbb	[pc, r2]
 8000a4c:	02281b0f 	.word	0x02281b0f
	Decay[CW]   = AGC_decay[newAGC];
 8000a50:	4a1b      	ldr	r2, [pc, #108]	; (8000ac0 <SetMode+0x12c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000a52:	481e      	ldr	r0, [pc, #120]	; (8000acc <SetMode+0x138>)
	Decay[CW]   = AGC_decay[newAGC];
 8000a54:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000a58:	4c1d      	ldr	r4, [pc, #116]	; (8000ad0 <SetMode+0x13c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000a5a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000a5e:	6815      	ldr	r5, [r2, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000a60:	4a1c      	ldr	r2, [pc, #112]	; (8000ad4 <SetMode+0x140>)
	case CW :       agc[CW] = newAGC;
 8000a62:	70cb      	strb	r3, [r1, #3]
	Decay[CW]   = AGC_decay[newAGC];
 8000a64:	60e5      	str	r5, [r4, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000a66:	80d0      	strh	r0, [r2, #6]
}	
 8000a68:	bd38      	pop	{r3, r4, r5, pc}
	Decay[AM]   = AGC_decay[newAGC];
 8000a6a:	4a15      	ldr	r2, [pc, #84]	; (8000ac0 <SetMode+0x12c>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000a6c:	4917      	ldr	r1, [pc, #92]	; (8000acc <SetMode+0x138>)
	Decay[AM]   = AGC_decay[newAGC];
 8000a6e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000a72:	4817      	ldr	r0, [pc, #92]	; (8000ad0 <SetMode+0x13c>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000a74:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8000a78:	6812      	ldr	r2, [r2, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <SetMode+0x140>)
	Decay[AM]   = AGC_decay[newAGC];
 8000a7c:	6002      	str	r2, [r0, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000a7e:	8019      	strh	r1, [r3, #0]
}	
 8000a80:	bd38      	pop	{r3, r4, r5, pc}
	Decay[LSB]  = AGC_decay[newAGC];
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <SetMode+0x12c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000a84:	4811      	ldr	r0, [pc, #68]	; (8000acc <SetMode+0x138>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000a86:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000a8a:	4c11      	ldr	r4, [pc, #68]	; (8000ad0 <SetMode+0x13c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000a8c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000a90:	6815      	ldr	r5, [r2, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <SetMode+0x140>)
	case LSB :      agc[LSB] = newAGC;
 8000a94:	704b      	strb	r3, [r1, #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000a96:	6065      	str	r5, [r4, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000a98:	8050      	strh	r0, [r2, #2]
}	
 8000a9a:	bd38      	pop	{r3, r4, r5, pc}
	Decay[USB]  = AGC_decay[newAGC];
 8000a9c:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <SetMode+0x12c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000a9e:	480b      	ldr	r0, [pc, #44]	; (8000acc <SetMode+0x138>)
	Decay[USB]  = AGC_decay[newAGC];
 8000aa0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000aa4:	4c0a      	ldr	r4, [pc, #40]	; (8000ad0 <SetMode+0x13c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000aa6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000aaa:	6815      	ldr	r5, [r2, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000aac:	4a09      	ldr	r2, [pc, #36]	; (8000ad4 <SetMode+0x140>)
	case USB :      agc[USB] = newAGC;
 8000aae:	708b      	strb	r3, [r1, #2]
	Decay[USB]  = AGC_decay[newAGC];
 8000ab0:	60a5      	str	r5, [r4, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000ab2:	8090      	strh	r0, [r2, #4]
}	
 8000ab4:	bd38      	pop	{r3, r4, r5, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2400c3bc 	.word	0x2400c3bc
 8000abc:	240077e8 	.word	0x240077e8
 8000ac0:	2400c3ac 	.word	0x2400c3ac
 8000ac4:	24008e78 	.word	0x24008e78
 8000ac8:	24000660 	.word	0x24000660
 8000acc:	24009e84 	.word	0x24009e84
 8000ad0:	24002a78 	.word	0x24002a78
 8000ad4:	24008028 	.word	0x24008028
 8000ad8:	24000a70 	.word	0x24000a70
 8000adc:	2400d7c2 	.word	0x2400d7c2
 8000ae0:	20004000 	.word	0x20004000
 8000ae4:	0800d858 	.word	0x0800d858
 8000ae8:	0800e858 	.word	0x0800e858

08000aec <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	Fstep = pow(10, 5 - idx);
 8000aec:	f1c0 0005 	rsb	r0, r0, #5
 8000af0:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8000af4:	ee07 0a90 	vmov	s15, r0
{
 8000af8:	b508      	push	{r3, lr}
	Fstep = pow(10, 5 - idx);
 8000afa:	eeb8 1be7 	vcvt.f64.s32	d1, s15
 8000afe:	f00b f9ff 	bl	800bf00 <pow>
 8000b02:	eebc 0bc0 	vcvt.u32.f64	s0, d0
 8000b06:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <SetFstep+0x24>)
 8000b08:	ed83 0a00 	vstr	s0, [r3]
}	
 8000b0c:	bd08      	pop	{r3, pc}
 8000b0e:	bf00      	nop
 8000b10:	2400c3b4 	.word	0x2400c3b4

08000b14 <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked()
{	
	LOfreq += Fstep;
 8000b14:	4b5f      	ldr	r3, [pc, #380]	; (8000c94 <FplusClicked+0x180>)
 8000b16:	4960      	ldr	r1, [pc, #384]	; (8000c98 <FplusClicked+0x184>)
 8000b18:	edd3 7a00 	vldr	s15, [r3]
 8000b1c:	ed91 7a00 	vldr	s14, [r1]
 8000b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
{	
 8000b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000b28:	4f5c      	ldr	r7, [pc, #368]	; (8000c9c <FplusClicked+0x188>)
	LOfreq += Fstep;
 8000b2a:	ee77 7a87 	vadd.f32	s15, s15, s14
	psets[0].bw = bw[CurrentMode];
 8000b2e:	4d5c      	ldr	r5, [pc, #368]	; (8000ca0 <FplusClicked+0x18c>)
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000b30:	783b      	ldrb	r3, [r7, #0]
 8000b32:	4c5c      	ldr	r4, [pc, #368]	; (8000ca4 <FplusClicked+0x190>)
	LOfreq  = min(LOfreq, 50000000.f);
 8000b34:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8000ca8 <FplusClicked+0x194>
	psets[0].bw = bw[CurrentMode];
 8000b38:	5cea      	ldrb	r2, [r5, r3]
	LOfreq  = min(LOfreq, 50000000.f);
 8000b3a:	fec7 7ac7 	vminnm.f32	s15, s15, s14
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000b3e:	7523      	strb	r3, [r4, #20]
	LOfreq  = min(LOfreq, 50000000.f);
 8000b40:	edc1 7a00 	vstr	s15, [r1]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000b44:	edc4 7a04 	vstr	s15, [r4, #16]
	psets[0].bw = bw[CurrentMode];
 8000b48:	7562      	strb	r2, [r4, #21]
	switch(CurrentMode)
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	d812      	bhi.n	8000b74 <FplusClicked+0x60>
 8000b4e:	e8df f003 	tbb	[pc, r3]
 8000b52:	452a      	.short	0x452a
 8000b54:	0219      	.short	0x0219
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000b56:	4b55      	ldr	r3, [pc, #340]	; (8000cac <FplusClicked+0x198>)
	Decay[CW]   = AGC_decay[newAGC];
 8000b58:	4955      	ldr	r1, [pc, #340]	; (8000cb0 <FplusClicked+0x19c>)
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000b5a:	78db      	ldrb	r3, [r3, #3]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b5c:	4855      	ldr	r0, [pc, #340]	; (8000cb4 <FplusClicked+0x1a0>)
	Decay[CW]   = AGC_decay[newAGC];
 8000b5e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	CurrentAGC =newAGC;
 8000b62:	4d55      	ldr	r5, [pc, #340]	; (8000cb8 <FplusClicked+0x1a4>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b64:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000b68:	680c      	ldr	r4, [r1, #0]
	CurrentAGC =newAGC;
 8000b6a:	702b      	strb	r3, [r5, #0]
	Decay[CW]   = AGC_decay[newAGC];
 8000b6c:	4953      	ldr	r1, [pc, #332]	; (8000cbc <FplusClicked+0x1a8>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b6e:	4b54      	ldr	r3, [pc, #336]	; (8000cc0 <FplusClicked+0x1ac>)
	Decay[CW]   = AGC_decay[newAGC];
 8000b70:	60cc      	str	r4, [r1, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b72:	80d8      	strh	r0, [r3, #6]
 8000b74:	4e53      	ldr	r6, [pc, #332]	; (8000cc4 <FplusClicked+0x1b0>)
	CurrentBW = newbw;
 8000b76:	7032      	strb	r2, [r6, #0]
	strcpy(msg, psets[Idx].name);
 8000b78:	494a      	ldr	r1, [pc, #296]	; (8000ca4 <FplusClicked+0x190>)
 8000b7a:	4853      	ldr	r0, [pc, #332]	; (8000cc8 <FplusClicked+0x1b4>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 8000b7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000b80:	f009 be3a 	b.w	800a7f8 <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000b84:	4b49      	ldr	r3, [pc, #292]	; (8000cac <FplusClicked+0x198>)
	Decay[USB]  = AGC_decay[newAGC];
 8000b86:	494a      	ldr	r1, [pc, #296]	; (8000cb0 <FplusClicked+0x19c>)
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000b88:	789b      	ldrb	r3, [r3, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000b8a:	484a      	ldr	r0, [pc, #296]	; (8000cb4 <FplusClicked+0x1a0>)
	Decay[USB]  = AGC_decay[newAGC];
 8000b8c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	CurrentAGC =newAGC;
 8000b90:	4d49      	ldr	r5, [pc, #292]	; (8000cb8 <FplusClicked+0x1a4>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000b92:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000b96:	680c      	ldr	r4, [r1, #0]
	CurrentAGC =newAGC;
 8000b98:	702b      	strb	r3, [r5, #0]
	Decay[USB]  = AGC_decay[newAGC];
 8000b9a:	4948      	ldr	r1, [pc, #288]	; (8000cbc <FplusClicked+0x1a8>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000b9c:	4b48      	ldr	r3, [pc, #288]	; (8000cc0 <FplusClicked+0x1ac>)
	Decay[USB]  = AGC_decay[newAGC];
 8000b9e:	608c      	str	r4, [r1, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000ba0:	8098      	strh	r0, [r3, #4]
 8000ba2:	4e48      	ldr	r6, [pc, #288]	; (8000cc4 <FplusClicked+0x1b0>)
 8000ba4:	e7e7      	b.n	8000b76 <FplusClicked+0x62>
	CurrentBW = newbw;
 8000ba6:	7828      	ldrb	r0, [r5, #0]
		AMindex = 0; // TODO toglimi
 8000ba8:	f04f 0c00 	mov.w	ip, #0
	CurrentBW = newbw;
 8000bac:	4e45      	ldr	r6, [pc, #276]	; (8000cc4 <FplusClicked+0x1b0>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 8000bb2:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8000cd8 <FplusClicked+0x1c4>
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000bb6:	4a45      	ldr	r2, [pc, #276]	; (8000ccc <FplusClicked+0x1b8>)
 8000bb8:	4945      	ldr	r1, [pc, #276]	; (8000cd0 <FplusClicked+0x1bc>)
	CurrentBW = newbw;
 8000bba:	7030      	strb	r0, [r6, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000bbc:	4845      	ldr	r0, [pc, #276]	; (8000cd4 <FplusClicked+0x1c0>)
		AMindex = 0; // TODO toglimi
 8000bbe:	f8a8 c000 	strh.w	ip, [r8]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000bc2:	f000 fe47 	bl	8001854 <SDR_2R_toC_f32>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000bc6:	4939      	ldr	r1, [pc, #228]	; (8000cac <FplusClicked+0x198>)
	CurrentAGC =newAGC;
 8000bc8:	483b      	ldr	r0, [pc, #236]	; (8000cb8 <FplusClicked+0x1a4>)
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000bca:	780b      	ldrb	r3, [r1, #0]
	switch(CurrentMode)
 8000bcc:	783a      	ldrb	r2, [r7, #0]
	CurrentAGC =newAGC;
 8000bce:	7003      	strb	r3, [r0, #0]
	switch(CurrentMode)
 8000bd0:	2a03      	cmp	r2, #3
 8000bd2:	d85c      	bhi.n	8000c8e <FplusClicked+0x17a>
 8000bd4:	e8df f002 	tbb	[pc, r2]
 8000bd8:	314d3f13 	.word	0x314d3f13
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000bdc:	4b33      	ldr	r3, [pc, #204]	; (8000cac <FplusClicked+0x198>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000bde:	4934      	ldr	r1, [pc, #208]	; (8000cb0 <FplusClicked+0x19c>)
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000be0:	785b      	ldrb	r3, [r3, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000be2:	4834      	ldr	r0, [pc, #208]	; (8000cb4 <FplusClicked+0x1a0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000be4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	CurrentAGC =newAGC;
 8000be8:	4d33      	ldr	r5, [pc, #204]	; (8000cb8 <FplusClicked+0x1a4>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000bea:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000bee:	680c      	ldr	r4, [r1, #0]
	CurrentAGC =newAGC;
 8000bf0:	702b      	strb	r3, [r5, #0]
	Decay[LSB]  = AGC_decay[newAGC];
 8000bf2:	4932      	ldr	r1, [pc, #200]	; (8000cbc <FplusClicked+0x1a8>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000bf4:	4b32      	ldr	r3, [pc, #200]	; (8000cc0 <FplusClicked+0x1ac>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000bf6:	604c      	str	r4, [r1, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000bf8:	8058      	strh	r0, [r3, #2]
 8000bfa:	4e32      	ldr	r6, [pc, #200]	; (8000cc4 <FplusClicked+0x1b0>)
 8000bfc:	e7bb      	b.n	8000b76 <FplusClicked+0x62>
	Decay[AM]   = AGC_decay[newAGC];
 8000bfe:	4a2c      	ldr	r2, [pc, #176]	; (8000cb0 <FplusClicked+0x19c>)
 8000c00:	7d61      	ldrb	r1, [r4, #21]
 8000c02:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000c06:	4c2b      	ldr	r4, [pc, #172]	; (8000cb4 <FplusClicked+0x1a0>)
	CurrentBW = newbw;
 8000c08:	7031      	strb	r1, [r6, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8000c0a:	6810      	ldr	r0, [r2, #0]
		AMindex = 0; // TODO toglimi
 8000c0c:	2200      	movs	r2, #0
		bw[AM] = newbw;
 8000c0e:	7029      	strb	r1, [r5, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8000c10:	492a      	ldr	r1, [pc, #168]	; (8000cbc <FplusClicked+0x1a8>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000c12:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000c1a:	4c29      	ldr	r4, [pc, #164]	; (8000cc0 <FplusClicked+0x1ac>)
		AMindex = 0; // TODO toglimi
 8000c1c:	f8a8 2000 	strh.w	r2, [r8]
	Decay[AM]   = AGC_decay[newAGC];
 8000c20:	6008      	str	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c22:	4a2a      	ldr	r2, [pc, #168]	; (8000ccc <FplusClicked+0x1b8>)
 8000c24:	492a      	ldr	r1, [pc, #168]	; (8000cd0 <FplusClicked+0x1bc>)
 8000c26:	482b      	ldr	r0, [pc, #172]	; (8000cd4 <FplusClicked+0x1c0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000c28:	8026      	strh	r6, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c2a:	f000 fe13 	bl	8001854 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000c2e:	491d      	ldr	r1, [pc, #116]	; (8000ca4 <FplusClicked+0x190>)
 8000c30:	4825      	ldr	r0, [pc, #148]	; (8000cc8 <FplusClicked+0x1b4>)
}	
 8000c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000c36:	f009 bddf 	b.w	800a7f8 <strcpy>
	Decay[CW]   = AGC_decay[newAGC];
 8000c3a:	4a1d      	ldr	r2, [pc, #116]	; (8000cb0 <FplusClicked+0x19c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c3c:	4f1d      	ldr	r7, [pc, #116]	; (8000cb4 <FplusClicked+0x1a0>)
	Decay[CW]   = AGC_decay[newAGC];
 8000c3e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case CW :       agc[CW] = newAGC;
 8000c42:	70cb      	strb	r3, [r1, #3]
	Decay[CW]   = AGC_decay[newAGC];
 8000c44:	481d      	ldr	r0, [pc, #116]	; (8000cbc <FplusClicked+0x1a8>)
 8000c46:	6815      	ldr	r5, [r2, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c48:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <FplusClicked+0x1ac>)
 8000c4e:	7d62      	ldrb	r2, [r4, #21]
	Decay[CW]   = AGC_decay[newAGC];
 8000c50:	60c5      	str	r5, [r0, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c52:	80d9      	strh	r1, [r3, #6]
 8000c54:	e78f      	b.n	8000b76 <FplusClicked+0x62>
	Decay[LSB]  = AGC_decay[newAGC];
 8000c56:	4a16      	ldr	r2, [pc, #88]	; (8000cb0 <FplusClicked+0x19c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000c58:	4f16      	ldr	r7, [pc, #88]	; (8000cb4 <FplusClicked+0x1a0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000c5a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case LSB :      agc[LSB] = newAGC;
 8000c5e:	704b      	strb	r3, [r1, #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000c60:	4816      	ldr	r0, [pc, #88]	; (8000cbc <FplusClicked+0x1a8>)
 8000c62:	6815      	ldr	r5, [r2, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000c64:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <FplusClicked+0x1ac>)
 8000c6a:	7d62      	ldrb	r2, [r4, #21]
	Decay[LSB]  = AGC_decay[newAGC];
 8000c6c:	6045      	str	r5, [r0, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000c6e:	8059      	strh	r1, [r3, #2]
 8000c70:	e781      	b.n	8000b76 <FplusClicked+0x62>
	Decay[USB]  = AGC_decay[newAGC];
 8000c72:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <FplusClicked+0x19c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000c74:	4f0f      	ldr	r7, [pc, #60]	; (8000cb4 <FplusClicked+0x1a0>)
	Decay[USB]  = AGC_decay[newAGC];
 8000c76:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case USB :      agc[USB] = newAGC;
 8000c7a:	708b      	strb	r3, [r1, #2]
	Decay[USB]  = AGC_decay[newAGC];
 8000c7c:	480f      	ldr	r0, [pc, #60]	; (8000cbc <FplusClicked+0x1a8>)
 8000c7e:	6815      	ldr	r5, [r2, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000c80:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <FplusClicked+0x1ac>)
 8000c86:	7d62      	ldrb	r2, [r4, #21]
	Decay[USB]  = AGC_decay[newAGC];
 8000c88:	6085      	str	r5, [r0, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000c8a:	8099      	strh	r1, [r3, #4]
 8000c8c:	e773      	b.n	8000b76 <FplusClicked+0x62>
 8000c8e:	7d62      	ldrb	r2, [r4, #21]
 8000c90:	e771      	b.n	8000b76 <FplusClicked+0x62>
 8000c92:	bf00      	nop
 8000c94:	2400c3b4 	.word	0x2400c3b4
 8000c98:	24009e88 	.word	0x24009e88
 8000c9c:	2400c3bc 	.word	0x2400c3bc
 8000ca0:	24008e78 	.word	0x24008e78
 8000ca4:	240088c0 	.word	0x240088c0
 8000ca8:	4c3ebc20 	.word	0x4c3ebc20
 8000cac:	240077e8 	.word	0x240077e8
 8000cb0:	2400c3ac 	.word	0x2400c3ac
 8000cb4:	24009e84 	.word	0x24009e84
 8000cb8:	24000660 	.word	0x24000660
 8000cbc:	24002a78 	.word	0x24002a78
 8000cc0:	24008028 	.word	0x24008028
 8000cc4:	24000a70 	.word	0x24000a70
 8000cc8:	2400443c 	.word	0x2400443c
 8000ccc:	20004000 	.word	0x20004000
 8000cd0:	0800d858 	.word	0x0800d858
 8000cd4:	0800e858 	.word	0x0800e858
 8000cd8:	2400d7c2 	.word	0x2400d7c2

08000cdc <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked()
{	
	LOfreq -= Fstep;
 8000cdc:	4b5f      	ldr	r3, [pc, #380]	; (8000e5c <FminusClicked+0x180>)
 8000cde:	4960      	ldr	r1, [pc, #384]	; (8000e60 <FminusClicked+0x184>)
 8000ce0:	ed93 7a00 	vldr	s14, [r3]
 8000ce4:	edd1 7a00 	vldr	s15, [r1]
 8000ce8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{	
 8000cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000cf0:	4f5c      	ldr	r7, [pc, #368]	; (8000e64 <FminusClicked+0x188>)
	LOfreq -= Fstep;
 8000cf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
	psets[0].bw = bw[CurrentMode];
 8000cf6:	4d5c      	ldr	r5, [pc, #368]	; (8000e68 <FminusClicked+0x18c>)
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000cf8:	783b      	ldrb	r3, [r7, #0]
 8000cfa:	4c5c      	ldr	r4, [pc, #368]	; (8000e6c <FminusClicked+0x190>)
	LOfreq  = max(LOfreq, 8000.f);
 8000cfc:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8000e70 <FminusClicked+0x194>
	psets[0].bw = bw[CurrentMode];
 8000d00:	5cea      	ldrb	r2, [r5, r3]
	LOfreq  = max(LOfreq, 8000.f);
 8000d02:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000d06:	7523      	strb	r3, [r4, #20]
	LOfreq  = max(LOfreq, 8000.f);
 8000d08:	edc1 7a00 	vstr	s15, [r1]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000d0c:	edc4 7a04 	vstr	s15, [r4, #16]
	psets[0].bw = bw[CurrentMode];
 8000d10:	7562      	strb	r2, [r4, #21]
	switch(CurrentMode)
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d812      	bhi.n	8000d3c <FminusClicked+0x60>
 8000d16:	e8df f003 	tbb	[pc, r3]
 8000d1a:	452a      	.short	0x452a
 8000d1c:	0219      	.short	0x0219
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000d1e:	4b55      	ldr	r3, [pc, #340]	; (8000e74 <FminusClicked+0x198>)
	Decay[CW]   = AGC_decay[newAGC];
 8000d20:	4955      	ldr	r1, [pc, #340]	; (8000e78 <FminusClicked+0x19c>)
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000d22:	78db      	ldrb	r3, [r3, #3]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d24:	4855      	ldr	r0, [pc, #340]	; (8000e7c <FminusClicked+0x1a0>)
	Decay[CW]   = AGC_decay[newAGC];
 8000d26:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	CurrentAGC =newAGC;
 8000d2a:	4d55      	ldr	r5, [pc, #340]	; (8000e80 <FminusClicked+0x1a4>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d2c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000d30:	680c      	ldr	r4, [r1, #0]
	CurrentAGC =newAGC;
 8000d32:	702b      	strb	r3, [r5, #0]
	Decay[CW]   = AGC_decay[newAGC];
 8000d34:	4953      	ldr	r1, [pc, #332]	; (8000e84 <FminusClicked+0x1a8>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d36:	4b54      	ldr	r3, [pc, #336]	; (8000e88 <FminusClicked+0x1ac>)
	Decay[CW]   = AGC_decay[newAGC];
 8000d38:	60cc      	str	r4, [r1, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d3a:	80d8      	strh	r0, [r3, #6]
 8000d3c:	4e53      	ldr	r6, [pc, #332]	; (8000e8c <FminusClicked+0x1b0>)
	CurrentBW = newbw;
 8000d3e:	7032      	strb	r2, [r6, #0]
	strcpy(msg, psets[Idx].name);
 8000d40:	494a      	ldr	r1, [pc, #296]	; (8000e6c <FminusClicked+0x190>)
 8000d42:	4853      	ldr	r0, [pc, #332]	; (8000e90 <FminusClicked+0x1b4>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 8000d44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000d48:	f009 bd56 	b.w	800a7f8 <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000d4c:	4b49      	ldr	r3, [pc, #292]	; (8000e74 <FminusClicked+0x198>)
	Decay[USB]  = AGC_decay[newAGC];
 8000d4e:	494a      	ldr	r1, [pc, #296]	; (8000e78 <FminusClicked+0x19c>)
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000d50:	789b      	ldrb	r3, [r3, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d52:	484a      	ldr	r0, [pc, #296]	; (8000e7c <FminusClicked+0x1a0>)
	Decay[USB]  = AGC_decay[newAGC];
 8000d54:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	CurrentAGC =newAGC;
 8000d58:	4d49      	ldr	r5, [pc, #292]	; (8000e80 <FminusClicked+0x1a4>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d5a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000d5e:	680c      	ldr	r4, [r1, #0]
	CurrentAGC =newAGC;
 8000d60:	702b      	strb	r3, [r5, #0]
	Decay[USB]  = AGC_decay[newAGC];
 8000d62:	4948      	ldr	r1, [pc, #288]	; (8000e84 <FminusClicked+0x1a8>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d64:	4b48      	ldr	r3, [pc, #288]	; (8000e88 <FminusClicked+0x1ac>)
	Decay[USB]  = AGC_decay[newAGC];
 8000d66:	608c      	str	r4, [r1, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d68:	8098      	strh	r0, [r3, #4]
 8000d6a:	4e48      	ldr	r6, [pc, #288]	; (8000e8c <FminusClicked+0x1b0>)
 8000d6c:	e7e7      	b.n	8000d3e <FminusClicked+0x62>
	CurrentBW = newbw;
 8000d6e:	7828      	ldrb	r0, [r5, #0]
		AMindex = 0; // TODO toglimi
 8000d70:	f04f 0c00 	mov.w	ip, #0
	CurrentBW = newbw;
 8000d74:	4e45      	ldr	r6, [pc, #276]	; (8000e8c <FminusClicked+0x1b0>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 8000d7a:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8000ea0 <FminusClicked+0x1c4>
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000d7e:	4a45      	ldr	r2, [pc, #276]	; (8000e94 <FminusClicked+0x1b8>)
 8000d80:	4945      	ldr	r1, [pc, #276]	; (8000e98 <FminusClicked+0x1bc>)
	CurrentBW = newbw;
 8000d82:	7030      	strb	r0, [r6, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000d84:	4845      	ldr	r0, [pc, #276]	; (8000e9c <FminusClicked+0x1c0>)
		AMindex = 0; // TODO toglimi
 8000d86:	f8a8 c000 	strh.w	ip, [r8]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000d8a:	f000 fd63 	bl	8001854 <SDR_2R_toC_f32>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000d8e:	4939      	ldr	r1, [pc, #228]	; (8000e74 <FminusClicked+0x198>)
	CurrentAGC =newAGC;
 8000d90:	483b      	ldr	r0, [pc, #236]	; (8000e80 <FminusClicked+0x1a4>)
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000d92:	780b      	ldrb	r3, [r1, #0]
	switch(CurrentMode)
 8000d94:	783a      	ldrb	r2, [r7, #0]
	CurrentAGC =newAGC;
 8000d96:	7003      	strb	r3, [r0, #0]
	switch(CurrentMode)
 8000d98:	2a03      	cmp	r2, #3
 8000d9a:	d85c      	bhi.n	8000e56 <FminusClicked+0x17a>
 8000d9c:	e8df f002 	tbb	[pc, r2]
 8000da0:	314d3f13 	.word	0x314d3f13
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000da4:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <FminusClicked+0x198>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000da6:	4934      	ldr	r1, [pc, #208]	; (8000e78 <FminusClicked+0x19c>)
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000da8:	785b      	ldrb	r3, [r3, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000daa:	4834      	ldr	r0, [pc, #208]	; (8000e7c <FminusClicked+0x1a0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000dac:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	CurrentAGC =newAGC;
 8000db0:	4d33      	ldr	r5, [pc, #204]	; (8000e80 <FminusClicked+0x1a4>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000db2:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000db6:	680c      	ldr	r4, [r1, #0]
	CurrentAGC =newAGC;
 8000db8:	702b      	strb	r3, [r5, #0]
	Decay[LSB]  = AGC_decay[newAGC];
 8000dba:	4932      	ldr	r1, [pc, #200]	; (8000e84 <FminusClicked+0x1a8>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000dbc:	4b32      	ldr	r3, [pc, #200]	; (8000e88 <FminusClicked+0x1ac>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000dbe:	604c      	str	r4, [r1, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000dc0:	8058      	strh	r0, [r3, #2]
 8000dc2:	4e32      	ldr	r6, [pc, #200]	; (8000e8c <FminusClicked+0x1b0>)
 8000dc4:	e7bb      	b.n	8000d3e <FminusClicked+0x62>
	Decay[AM]   = AGC_decay[newAGC];
 8000dc6:	4a2c      	ldr	r2, [pc, #176]	; (8000e78 <FminusClicked+0x19c>)
 8000dc8:	7d61      	ldrb	r1, [r4, #21]
 8000dca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000dce:	4c2b      	ldr	r4, [pc, #172]	; (8000e7c <FminusClicked+0x1a0>)
	CurrentBW = newbw;
 8000dd0:	7031      	strb	r1, [r6, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8000dd2:	6810      	ldr	r0, [r2, #0]
		AMindex = 0; // TODO toglimi
 8000dd4:	2200      	movs	r2, #0
		bw[AM] = newbw;
 8000dd6:	7029      	strb	r1, [r5, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8000dd8:	492a      	ldr	r1, [pc, #168]	; (8000e84 <FminusClicked+0x1a8>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000dda:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000de2:	4c29      	ldr	r4, [pc, #164]	; (8000e88 <FminusClicked+0x1ac>)
		AMindex = 0; // TODO toglimi
 8000de4:	f8a8 2000 	strh.w	r2, [r8]
	Decay[AM]   = AGC_decay[newAGC];
 8000de8:	6008      	str	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000dea:	4a2a      	ldr	r2, [pc, #168]	; (8000e94 <FminusClicked+0x1b8>)
 8000dec:	492a      	ldr	r1, [pc, #168]	; (8000e98 <FminusClicked+0x1bc>)
 8000dee:	482b      	ldr	r0, [pc, #172]	; (8000e9c <FminusClicked+0x1c0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000df0:	8026      	strh	r6, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000df2:	f000 fd2f 	bl	8001854 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000df6:	491d      	ldr	r1, [pc, #116]	; (8000e6c <FminusClicked+0x190>)
 8000df8:	4825      	ldr	r0, [pc, #148]	; (8000e90 <FminusClicked+0x1b4>)
}
 8000dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000dfe:	f009 bcfb 	b.w	800a7f8 <strcpy>
	Decay[CW]   = AGC_decay[newAGC];
 8000e02:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <FminusClicked+0x19c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000e04:	4f1d      	ldr	r7, [pc, #116]	; (8000e7c <FminusClicked+0x1a0>)
	Decay[CW]   = AGC_decay[newAGC];
 8000e06:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case CW :       agc[CW] = newAGC;
 8000e0a:	70cb      	strb	r3, [r1, #3]
	Decay[CW]   = AGC_decay[newAGC];
 8000e0c:	481d      	ldr	r0, [pc, #116]	; (8000e84 <FminusClicked+0x1a8>)
 8000e0e:	6815      	ldr	r5, [r2, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000e10:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8000e14:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <FminusClicked+0x1ac>)
 8000e16:	7d62      	ldrb	r2, [r4, #21]
	Decay[CW]   = AGC_decay[newAGC];
 8000e18:	60c5      	str	r5, [r0, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000e1a:	80d9      	strh	r1, [r3, #6]
 8000e1c:	e78f      	b.n	8000d3e <FminusClicked+0x62>
	Decay[LSB]  = AGC_decay[newAGC];
 8000e1e:	4a16      	ldr	r2, [pc, #88]	; (8000e78 <FminusClicked+0x19c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000e20:	4f16      	ldr	r7, [pc, #88]	; (8000e7c <FminusClicked+0x1a0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000e22:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case LSB :      agc[LSB] = newAGC;
 8000e26:	704b      	strb	r3, [r1, #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000e28:	4816      	ldr	r0, [pc, #88]	; (8000e84 <FminusClicked+0x1a8>)
 8000e2a:	6815      	ldr	r5, [r2, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000e2c:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <FminusClicked+0x1ac>)
 8000e32:	7d62      	ldrb	r2, [r4, #21]
	Decay[LSB]  = AGC_decay[newAGC];
 8000e34:	6045      	str	r5, [r0, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000e36:	8059      	strh	r1, [r3, #2]
 8000e38:	e781      	b.n	8000d3e <FminusClicked+0x62>
	Decay[USB]  = AGC_decay[newAGC];
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <FminusClicked+0x19c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000e3c:	4f0f      	ldr	r7, [pc, #60]	; (8000e7c <FminusClicked+0x1a0>)
	Decay[USB]  = AGC_decay[newAGC];
 8000e3e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case USB :      agc[USB] = newAGC;
 8000e42:	708b      	strb	r3, [r1, #2]
	Decay[USB]  = AGC_decay[newAGC];
 8000e44:	480f      	ldr	r0, [pc, #60]	; (8000e84 <FminusClicked+0x1a8>)
 8000e46:	6815      	ldr	r5, [r2, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000e48:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <FminusClicked+0x1ac>)
 8000e4e:	7d62      	ldrb	r2, [r4, #21]
	Decay[USB]  = AGC_decay[newAGC];
 8000e50:	6085      	str	r5, [r0, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000e52:	8099      	strh	r1, [r3, #4]
 8000e54:	e773      	b.n	8000d3e <FminusClicked+0x62>
 8000e56:	7d62      	ldrb	r2, [r4, #21]
 8000e58:	e771      	b.n	8000d3e <FminusClicked+0x62>
 8000e5a:	bf00      	nop
 8000e5c:	2400c3b4 	.word	0x2400c3b4
 8000e60:	24009e88 	.word	0x24009e88
 8000e64:	2400c3bc 	.word	0x2400c3bc
 8000e68:	24008e78 	.word	0x24008e78
 8000e6c:	240088c0 	.word	0x240088c0
 8000e70:	45fa0000 	.word	0x45fa0000
 8000e74:	240077e8 	.word	0x240077e8
 8000e78:	2400c3ac 	.word	0x2400c3ac
 8000e7c:	24009e84 	.word	0x24009e84
 8000e80:	24000660 	.word	0x24000660
 8000e84:	24002a78 	.word	0x24002a78
 8000e88:	24008028 	.word	0x24008028
 8000e8c:	24000a70 	.word	0x24000a70
 8000e90:	2400443c 	.word	0x2400443c
 8000e94:	20004000 	.word	0x20004000
 8000e98:	0800d858 	.word	0x0800d858
 8000e9c:	0800e858 	.word	0x0800e858
 8000ea0:	2400d7c2 	.word	0x2400d7c2

08000ea4 <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <HAL_GPIO_EXTI_Callback>:
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
	//LED_YELLOW_OFF;


	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <ADC_Stream0_Handler>:

//-----------------------------------------------------------------------------  
// This the handler of the highest priority task interrupts, those generated
// by DMA2 Stream when a new ADC buffer is just filled
void ADC_Stream0_Handler(uint8_t FullConversion)
{
 8000eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
}
#endif


// compute the new NCO buffer, with the CWpitch offset if receiving CW  
if(CurrentMode == CW)
 8000eb0:	4b7c      	ldr	r3, [pc, #496]	; (80010a4 <ADC_Stream0_Handler+0x1f8>)
	pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
 8000eb2:	4c7d      	ldr	r4, [pc, #500]	; (80010a8 <ADC_Stream0_Handler+0x1fc>)
if(CurrentMode == CW)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
	pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
 8000eb6:	f504 6180 	add.w	r1, r4, #1024	; 0x400
 8000eba:	4a7c      	ldr	r2, [pc, #496]	; (80010ac <ADC_Stream0_Handler+0x200>)
 8000ebc:	2800      	cmp	r0, #0
 8000ebe:	bf18      	it	ne
 8000ec0:	460c      	movne	r4, r1
if(CurrentMode == CW)
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	ed92 0a00 	vldr	s0, [r2]
{
 8000ec8:	ed2d 8b10 	vpush	{d8-d15}
 8000ecc:	b095      	sub	sp, #84	; 0x54
if(CurrentMode == CW)
 8000ece:	f000 837c 	beq.w	80015ca <ADC_Stream0_Handler+0x71e>
	SDR_ComputeLO(LOfreq-cwpitch);  // prepare next LO buffer
else
	SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 8000ed2:	f000 fc03 	bl	80016dc <SDR_ComputeLO>
 8000ed6:	f204 33fe 	addw	r3, r4, #1022	; 0x3fe
 8000eda:	1ea2      	subs	r2, r4, #2

// compute the smoothed average value of the buffer, to be used as offset
// in the short words to floating point conversion routine  
sum = 0; k = BSIZE;
 8000edc:	ed9f 5a74 	vldr	s10, [pc, #464]	; 80010b0 <ADC_Stream0_Handler+0x204>
while(k)
{
	sum += pR[k-1];
 8000ee0:	8819      	ldrh	r1, [r3, #0]
 8000ee2:	3b08      	subs	r3, #8
 8000ee4:	ee07 1a90 	vmov	s15, r1
	sum += pR[k-2];
 8000ee8:	88d9      	ldrh	r1, [r3, #6]
 8000eea:	ee07 1a10 	vmov	s14, r1
	sum += pR[k-3];
 8000eee:	8899      	ldrh	r1, [r3, #4]
	sum += pR[k-1];
 8000ef0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
	sum += pR[k-4];
 8000ef4:	8858      	ldrh	r0, [r3, #2]
	sum += pR[k-3];
 8000ef6:	ee07 1a90 	vmov	s15, r1
	sum += pR[k-2];
 8000efa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	sum += pR[k-4];
 8000efe:	ee06 0a90 	vmov	s13, r0
while(k)
 8000f02:	429a      	cmp	r2, r3
	sum += pR[k-3];
 8000f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	sum += pR[k-4];
 8000f08:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f10:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000f14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000f18:	ee35 5a27 	vadd.f32	s10, s10, s15
while(k)
 8000f1c:	d1e0      	bne.n	8000ee0 <ADC_Stream0_Handler+0x34>
	k-=4;
}

TestSampledValue=pR[BSIZE/2];
 8000f1e:	f8b4 2200 	ldrh.w	r2, [r4, #512]	; 0x200
 8000f22:	2300      	movs	r3, #0

meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8000f24:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80010b4 <ADC_Stream0_Handler+0x208>

// downconvert to zero IF, by multiplication by the exp(-jwt) signal
// generated by the NCO, and at the same time convert to floating point  
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8000f28:	4620      	mov	r0, r4
TestSampledValue=pR[BSIZE/2];
 8000f2a:	ee07 2a90 	vmov	s15, r2
meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8000f2e:	4e62      	ldr	r6, [pc, #392]	; (80010b8 <ADC_Stream0_Handler+0x20c>)
 8000f30:	ee25 5a07 	vmul.f32	s10, s10, s14
TestSampledValue=pR[BSIZE/2];
 8000f34:	4c61      	ldr	r4, [pc, #388]	; (80010bc <ADC_Stream0_Handler+0x210>)
 8000f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f3a:	4d61      	ldr	r5, [pc, #388]	; (80010c0 <ADC_Stream0_Handler+0x214>)
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8000f3c:	4a61      	ldr	r2, [pc, #388]	; (80010c4 <ADC_Stream0_Handler+0x218>)
 8000f3e:	eeb0 0a45 	vmov.f32	s0, s10
 8000f42:	4961      	ldr	r1, [pc, #388]	; (80010c8 <ADC_Stream0_Handler+0x21c>)
meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8000f44:	ed86 5a00 	vstr	s10, [r6]
TestSampledValue=pR[BSIZE/2];
 8000f48:	edc4 7a00 	vstr	s15, [r4]
 8000f4c:	802b      	strh	r3, [r5, #0]
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8000f4e:	f000 fcb3 	bl	80018b8 <SDR_downconvert_f32>
// A dividing by 16, order 4, CIC is used. Then a 4096-entry buffer is filled, and
// passed to the baseband interrupt routine, where it is additionally filtered with a
// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
//-------------------------------------------------------------------------

k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
 8000f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f56:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8001150 <ADC_Stream0_Handler+0x2a4>
 8000f5a:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8001154 <ADC_Stream0_Handler+0x2a8>
while(k--)
 8000f5e:	23ff      	movs	r3, #255	; 0xff
k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
 8000f60:	8029      	strh	r1, [r5, #0]
	//        which being separated in even and odd samples in advance becomes
	// (1 + 6z^-1 + z^-2) for odd samples and (4 + 4z^-1) for even samples, which, when summed, give :
	// odd + 6odd_old + odd_old2 + 4even + 4even_old =	odd + 6odd_old + odd_old2 + 4(even + even_old)

	inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
	outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8000f62:	eeb1 5a08 	vmov.f32	s10, #24	; 0x40c00000  6.0
 8000f66:	4959      	ldr	r1, [pc, #356]	; (80010cc <ADC_Stream0_Handler+0x220>)
 8000f68:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 8000f6c:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8001158 <ADC_Stream0_Handler+0x2ac>
 8000f70:	ed91 4a00 	vldr	s8, [r1]
 8000f74:	4956      	ldr	r1, [pc, #344]	; (80010d0 <ADC_Stream0_Handler+0x224>)
 8000f76:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 800115c <ADC_Stream0_Handler+0x2b0>
 8000f7a:	edd1 4a00 	vldr	s9, [r1]
 8000f7e:	4955      	ldr	r1, [pc, #340]	; (80010d4 <ADC_Stream0_Handler+0x228>)
 8000f80:	ed9c fa00 	vldr	s30, [ip]
 8000f84:	ed91 7a00 	vldr	s14, [r1]
 8000f88:	4953      	ldr	r1, [pc, #332]	; (80010d8 <ADC_Stream0_Handler+0x22c>)
 8000f8a:	edde ea00 	vldr	s29, [lr]
 8000f8e:	ed91 2a00 	vldr	s4, [r1]
 8000f92:	4952      	ldr	r1, [pc, #328]	; (80010dc <ADC_Stream0_Handler+0x230>)
 8000f94:	edd8 9a00 	vldr	s19, [r8]
 8000f98:	edd1 7a00 	vldr	s15, [r1]
 8000f9c:	4950      	ldr	r1, [pc, #320]	; (80010e0 <ADC_Stream0_Handler+0x234>)
 8000f9e:	edd9 fa00 	vldr	s31, [r9]
 8000fa2:	edd1 2a00 	vldr	s5, [r1]
 8000fa6:	494f      	ldr	r1, [pc, #316]	; (80010e4 <ADC_Stream0_Handler+0x238>)
 8000fa8:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8001160 <ADC_Stream0_Handler+0x2b4>
 8000fac:	ed91 1a00 	vldr	s2, [r1]
 8000fb0:	494d      	ldr	r1, [pc, #308]	; (80010e8 <ADC_Stream0_Handler+0x23c>)
 8000fb2:	4c4e      	ldr	r4, [pc, #312]	; (80010ec <ADC_Stream0_Handler+0x240>)
 8000fb4:	edd1 1a00 	vldr	s3, [r1]
 8000fb8:	494d      	ldr	r1, [pc, #308]	; (80010f0 <ADC_Stream0_Handler+0x244>)
 8000fba:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 8001164 <ADC_Stream0_Handler+0x2b8>
 8000fbe:	ed91 6a00 	vldr	s12, [r1]
 8000fc2:	494c      	ldr	r1, [pc, #304]	; (80010f4 <ADC_Stream0_Handler+0x248>)
 8000fc4:	4a4c      	ldr	r2, [pc, #304]	; (80010f8 <ADC_Stream0_Handler+0x24c>)
 8000fc6:	edd1 aa00 	vldr	s21, [r1]
 8000fca:	494c      	ldr	r1, [pc, #304]	; (80010fc <ADC_Stream0_Handler+0x250>)
 8000fcc:	f502 6000 	add.w	r0, r2, #2048	; 0x800
 8000fd0:	edd1 6a00 	vldr	s13, [r1]
 8000fd4:	494a      	ldr	r1, [pc, #296]	; (8001100 <ADC_Stream0_Handler+0x254>)
 8000fd6:	ed91 aa00 	vldr	s20, [r1]
 8000fda:	494a      	ldr	r1, [pc, #296]	; (8001104 <ADC_Stream0_Handler+0x258>)
 8000fdc:	edd1 ba00 	vldr	s23, [r1]
 8000fe0:	4949      	ldr	r1, [pc, #292]	; (8001108 <ADC_Stream0_Handler+0x25c>)
 8000fe2:	ed91 ba00 	vldr	s22, [r1]
 8000fe6:	4949      	ldr	r1, [pc, #292]	; (800110c <ADC_Stream0_Handler+0x260>)
 8000fe8:	ed91 3a00 	vldr	s6, [r1]
 8000fec:	4948      	ldr	r1, [pc, #288]	; (8001110 <ADC_Stream0_Handler+0x264>)
 8000fee:	edd1 ca00 	vldr	s25, [r1]
 8000ff2:	4948      	ldr	r1, [pc, #288]	; (8001114 <ADC_Stream0_Handler+0x268>)
 8000ff4:	edd1 3a00 	vldr	s7, [r1]
 8000ff8:	4947      	ldr	r1, [pc, #284]	; (8001118 <ADC_Stream0_Handler+0x26c>)
 8000ffa:	ed91 ca00 	vldr	s24, [r1]
 8000ffe:	4947      	ldr	r1, [pc, #284]	; (800111c <ADC_Stream0_Handler+0x270>)
 8001000:	ed91 ea00 	vldr	s28, [r1]
 8001004:	4946      	ldr	r1, [pc, #280]	; (8001120 <ADC_Stream0_Handler+0x274>)
 8001006:	ed91 9a00 	vldr	s18, [r1]
 800100a:	4946      	ldr	r1, [pc, #280]	; (8001124 <ADC_Stream0_Handler+0x278>)
 800100c:	edd1 0a00 	vldr	s1, [r1]
 8001010:	4945      	ldr	r1, [pc, #276]	; (8001128 <ADC_Stream0_Handler+0x27c>)
 8001012:	edcd 0a05 	vstr	s1, [sp, #20]
 8001016:	edd1 0a00 	vldr	s1, [r1]
 800101a:	4944      	ldr	r1, [pc, #272]	; (800112c <ADC_Stream0_Handler+0x280>)
 800101c:	edcd 0a07 	vstr	s1, [sp, #28]
 8001020:	edd1 0a00 	vldr	s1, [r1]
 8001024:	4942      	ldr	r1, [pc, #264]	; (8001130 <ADC_Stream0_Handler+0x284>)
 8001026:	edcd 0a04 	vstr	s1, [sp, #16]
 800102a:	edd1 0a00 	vldr	s1, [r1]
 800102e:	4941      	ldr	r1, [pc, #260]	; (8001134 <ADC_Stream0_Handler+0x288>)
 8001030:	edcd 0a02 	vstr	s1, [sp, #8]
 8001034:	edd1 0a00 	vldr	s1, [r1]
 8001038:	493f      	ldr	r1, [pc, #252]	; (8001138 <ADC_Stream0_Handler+0x28c>)
 800103a:	edcd 0a06 	vstr	s1, [sp, #24]
 800103e:	edd1 0a00 	vldr	s1, [r1]
 8001042:	493e      	ldr	r1, [pc, #248]	; (800113c <ADC_Stream0_Handler+0x290>)
 8001044:	edcd 0a03 	vstr	s1, [sp, #12]
 8001048:	edd1 0a00 	vldr	s1, [r1]
 800104c:	493c      	ldr	r1, [pc, #240]	; (8001140 <ADC_Stream0_Handler+0x294>)
 800104e:	edcd 0a0d 	vstr	s1, [sp, #52]	; 0x34
 8001052:	edda 0a00 	vldr	s1, [sl]
 8001056:	edcd 0a0f 	vstr	s1, [sp, #60]	; 0x3c
 800105a:	edd4 0a00 	vldr	s1, [r4]
 800105e:	4c39      	ldr	r4, [pc, #228]	; (8001144 <ADC_Stream0_Handler+0x298>)
 8001060:	edcd 0a0c 	vstr	s1, [sp, #48]	; 0x30
 8001064:	edd4 0a00 	vldr	s1, [r4]
 8001068:	4c37      	ldr	r4, [pc, #220]	; (8001148 <ADC_Stream0_Handler+0x29c>)
 800106a:	edcd 0a08 	vstr	s1, [sp, #32]
 800106e:	edd4 0a00 	vldr	s1, [r4]
 8001072:	4c36      	ldr	r4, [pc, #216]	; (800114c <ADC_Stream0_Handler+0x2a0>)
 8001074:	edcd 0a0e 	vstr	s1, [sp, #56]	; 0x38
 8001078:	edd4 0a00 	vldr	s1, [r4]
 800107c:	f9bb 4000 	ldrsh.w	r4, [fp]
 8001080:	edcd 0a09 	vstr	s1, [sp, #36]	; 0x24
 8001084:	eef0 0a64 	vmov.f32	s1, s9
 8001088:	4626      	mov	r6, r4
 800108a:	eef0 4a61 	vmov.f32	s9, s3
 800108e:	460c      	mov	r4, r1
 8001090:	eef0 1a4f 	vmov.f32	s3, s30
 8001094:	eeb0 fa4c 	vmov.f32	s30, s24
 8001098:	eeb0 ca6d 	vmov.f32	s24, s27
 800109c:	eef0 da4d 	vmov.f32	s27, s26
while(k--)
 80010a0:	e160      	b.n	8001364 <ADC_Stream0_Handler+0x4b8>
 80010a2:	bf00      	nop
 80010a4:	2400c3bc 	.word	0x2400c3bc
 80010a8:	2400cbc0 	.word	0x2400cbc0
 80010ac:	24009e88 	.word	0x24009e88
 80010b0:	00000000 	.word	0x00000000
 80010b4:	3b000000 	.word	0x3b000000
 80010b8:	2400c3a0 	.word	0x2400c3a0
 80010bc:	2400c3b8 	.word	0x2400c3b8
 80010c0:	24000610 	.word	0x24000610
 80010c4:	24008038 	.word	0x24008038
 80010c8:	24007828 	.word	0x24007828
 80010cc:	24000584 	.word	0x24000584
 80010d0:	24000580 	.word	0x24000580
 80010d4:	240005bc 	.word	0x240005bc
 80010d8:	240005b8 	.word	0x240005b8
 80010dc:	240005b4 	.word	0x240005b4
 80010e0:	240005b0 	.word	0x240005b0
 80010e4:	2400058c 	.word	0x2400058c
 80010e8:	24000588 	.word	0x24000588
 80010ec:	2400060c 	.word	0x2400060c
 80010f0:	240005cc 	.word	0x240005cc
 80010f4:	240005c8 	.word	0x240005c8
 80010f8:	24007830 	.word	0x24007830
 80010fc:	240005c4 	.word	0x240005c4
 8001100:	240005c0 	.word	0x240005c0
 8001104:	24000594 	.word	0x24000594
 8001108:	24000590 	.word	0x24000590
 800110c:	240005dc 	.word	0x240005dc
 8001110:	240005d8 	.word	0x240005d8
 8001114:	240005d4 	.word	0x240005d4
 8001118:	240005d0 	.word	0x240005d0
 800111c:	24000598 	.word	0x24000598
 8001120:	240005e4 	.word	0x240005e4
 8001124:	240005a4 	.word	0x240005a4
 8001128:	240005a0 	.word	0x240005a0
 800112c:	240005fc 	.word	0x240005fc
 8001130:	240005f8 	.word	0x240005f8
 8001134:	240005f4 	.word	0x240005f4
 8001138:	240005f0 	.word	0x240005f0
 800113c:	240005ac 	.word	0x240005ac
 8001140:	24008040 	.word	0x24008040
 8001144:	24000608 	.word	0x24000608
 8001148:	24000604 	.word	0x24000604
 800114c:	24000600 	.word	0x24000600
 8001150:	2400059c 	.word	0x2400059c
 8001154:	240005ec 	.word	0x240005ec
 8001158:	240005e8 	.word	0x240005e8
 800115c:	240005e0 	.word	0x240005e0
 8001160:	240005a8 	.word	0x240005a8
 8001164:	2400057c 	.word	0x2400057c
	// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
	// produced using 4 input samples, totalling a decimation by 2
	// now compute the couple of elements for the next step

	inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
	outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 8001168:	eeaa 6a85 	vfma.f32	s12, s21, s10

	inE2Rold = inER;                           inE2Iold = inEI;
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;

	if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 800116c:	0799      	lsls	r1, r3, #30
	outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 800116e:	eeea 6a05 	vfma.f32	s13, s20, s10
 8001172:	ee3d 4aa4 	vadd.f32	s8, s27, s9
 8001176:	ee31 1a0c 	vadd.f32	s2, s2, s24
 800117a:	eea1 6a25 	vfma.f32	s12, s2, s11
 800117e:	eee4 6a25 	vfma.f32	s13, s8, s11
 8001182:	ee76 4a07 	vadd.f32	s9, s12, s14
 8001186:	ee36 4aa7 	vadd.f32	s8, s13, s15
	if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 800118a:	f100 810d 	bmi.w	80013a8 <ADC_Stream0_Handler+0x4fc>
	// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
	// and the odd element in outR, outI
	// now compute the couple of elements for the next step

	inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
	outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 800118e:	eeac 3a85 	vfma.f32	s6, s25, s10
 8001192:	eddd 6a00 	vldr	s13, [sp]
 8001196:	eeef 3a05 	vfma.f32	s7, s30, s10
 800119a:	ed9d 6a01 	vldr	s12, [sp, #4]
 800119e:	ee76 baab 	vadd.f32	s23, s13, s23

	inE3Rold  = inER;                          inE3Iold  = inEI;
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

	if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 80011a2:	075f      	lsls	r7, r3, #29
	outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 80011a4:	ee36 ba0b 	vadd.f32	s22, s12, s22
 80011a8:	eeab 3aa5 	vfma.f32	s6, s23, s11
 80011ac:	eeeb 3a25 	vfma.f32	s7, s22, s11
 80011b0:	ee33 1a24 	vadd.f32	s2, s6, s9
 80011b4:	ee73 0a84 	vadd.f32	s1, s7, s8
	if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 80011b8:	f100 8196 	bmi.w	80014e8 <ADC_Stream0_Handler+0x63c>
	// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
	// produced using 4 input samples, totalling a decimation by 8
	// now compute the couple of elements for the next step

	inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
	outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 80011bc:	eeef 9a85 	vfma.f32	s19, s31, s10
 80011c0:	eddd 3a0b 	vldr	s7, [sp, #44]	; 0x2c
 80011c4:	eea1 9a85 	vfma.f32	s18, s3, s10
 80011c8:	ed9d 3a0a 	vldr	s6, [sp, #40]	; 0x28
 80011cc:	ee7e eaa3 	vadd.f32	s29, s29, s7

	inE4Rold = inER;                           inE4Iold = inEI;
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

	if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 80011d0:	0719      	lsls	r1, r3, #28
	outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 80011d2:	ee3e ea03 	vadd.f32	s28, s28, s6
 80011d6:	eeee 9aa5 	vfma.f32	s19, s29, s11
 80011da:	eeae 9a25 	vfma.f32	s18, s28, s11
 80011de:	ee39 ba81 	vadd.f32	s22, s19, s2
 80011e2:	ee79 ba20 	vadd.f32	s23, s18, s1
	if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 80011e6:	f100 819c 	bmi.w	8001522 <ADC_Stream0_Handler+0x676>
	// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
	// and the odd element in outR, outI
	// now compute the couple of elements for the next step

	inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
	outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80011ea:	ed9d ea04 	vldr	s28, [sp, #16]

	inE5Rold  = inER;                          inE5Iold  = inEI;
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;

	if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80011ee:	f013 0110 	ands.w	r1, r3, #16
	outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80011f2:	ed9d 9a02 	vldr	s18, [sp, #8]
 80011f6:	eddd ea06 	vldr	s29, [sp, #24]
 80011fa:	eddd 9a03 	vldr	s19, [sp, #12]
 80011fe:	eea9 ea05 	vfma.f32	s28, s18, s10
 8001202:	ed9d 3a05 	vldr	s6, [sp, #20]
 8001206:	eddd 3a11 	vldr	s7, [sp, #68]	; 0x44
 800120a:	eee9 ea85 	vfma.f32	s29, s19, s10
 800120e:	eddd 6a07 	vldr	s13, [sp, #28]
 8001212:	ee33 6a83 	vadd.f32	s12, s7, s6
 8001216:	ed9d 3a10 	vldr	s6, [sp, #64]	; 0x40
	if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 800121a:	9105      	str	r1, [sp, #20]
	outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 800121c:	ee73 6a26 	vadd.f32	s13, s6, s13
 8001220:	eea6 ea25 	vfma.f32	s28, s12, s11
 8001224:	eee6 eaa5 	vfma.f32	s29, s13, s11
 8001228:	ee3e ea0b 	vadd.f32	s28, s28, s22
 800122c:	ee7e eaab 	vadd.f32	s29, s29, s23
	if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001230:	f040 81a0 	bne.w	8001574 <ADC_Stream0_Handler+0x6c8>
	// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
	// produced with 4 of the previous elem, i.e. with 16 input samples, totalling
	// a decimation by 16. Now compute the couple of elements for the next step

	inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001234:	ed9d 6a08 	vldr	s12, [sp, #32]
	// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
	// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band

	// create a block of BSIZE*4 entries, which will be then decimated by 4

	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001238:	00b1      	lsls	r1, r6, #2
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800123a:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800123e:	3601      	adds	r6, #1
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001240:	eddd 3a09 	vldr	s7, [sp, #36]	; 0x24
 8001244:	eee6 6a05 	vfma.f32	s13, s12, s10
 8001248:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 800124c:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001250:	b236      	sxth	r6, r6
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001252:	eea3 6a85 	vfma.f32	s12, s7, s10
 8001256:	eddd 3a0d 	vldr	s7, [sp, #52]	; 0x34
 800125a:	ed9d 9a0f 	vldr	s18, [sp, #60]	; 0x3c
	//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

	if(idx < BSIZE*4)
 800125e:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001262:	ee73 3a23 	vadd.f32	s7, s6, s7
 8001266:	ed9d 3a13 	vldr	s6, [sp, #76]	; 0x4c
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800126a:	4fdc      	ldr	r7, [pc, #880]	; (80015dc <ADC_Stream0_Handler+0x730>)
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800126c:	ee33 3a09 	vadd.f32	s6, s6, s18
 8001270:	eee3 6aa5 	vfma.f32	s13, s7, s11
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001274:	440f      	add	r7, r1
 8001276:	eddf 3ada 	vldr	s7, [pc, #872]	; 80015e0 <ADC_Stream0_Handler+0x734>
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800127a:	eea3 6a25 	vfma.f32	s12, s6, s11
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800127e:	9704      	str	r7, [sp, #16]
 8001280:	4fd8      	ldr	r7, [pc, #864]	; (80015e4 <ADC_Stream0_Handler+0x738>)
 8001282:	4439      	add	r1, r7
 8001284:	9f04      	ldr	r7, [sp, #16]
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001286:	ee76 6a8e 	vadd.f32	s13, s13, s28
 800128a:	ee36 6a2e 	vadd.f32	s12, s12, s29
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800128e:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8001292:	ee26 6a23 	vmul.f32	s12, s12, s7
 8001296:	edc7 6a00 	vstr	s13, [r7]
 800129a:	ed81 6a00 	vstr	s12, [r1]
	if(idx < BSIZE*4)
 800129e:	f2c0 81e3 	blt.w	8001668 <ADC_Stream0_Handler+0x7bc>

#endif

		// generate now an interrupt to signal the base band processing routine that it has a new buffer

		EXTI->SWIER1 |= GPIO_PIN_14;
 80012a2:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80012a6:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 80012aa:	ed9d 9a02 	vldr	s18, [sp, #8]
 80012ae:	eef0 3a4f 	vmov.f32	s7, s30
 80012b2:	68b9      	ldr	r1, [r7, #8]
 80012b4:	eeb0 3a6c 	vmov.f32	s6, s25
 80012b8:	ed9d 6a08 	vldr	s12, [sp, #32]
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80012bc:	eeb0 fa44 	vmov.f32	s30, s8
		EXTI->SWIER1 |= GPIO_PIN_14;
 80012c0:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80012c4:	eef0 6a4a 	vmov.f32	s13, s20
 80012c8:	edcd 9a06 	vstr	s19, [sp, #24]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80012cc:	eeb0 aa67 	vmov.f32	s20, s15
		EXTI->SWIER1 |= GPIO_PIN_14;
 80012d0:	ed8d 9a04 	vstr	s18, [sp, #16]
 80012d4:	eef0 9a6f 	vmov.f32	s19, s31
 80012d8:	eeb0 9a61 	vmov.f32	s18, s3
 80012dc:	ed8d 6a0c 	vstr	s12, [sp, #48]	; 0x30
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80012e0:	eef0 1a60 	vmov.f32	s3, s1
		EXTI->SWIER1 |= GPIO_PIN_14;
 80012e4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80012e8:	eef0 fa41 	vmov.f32	s31, s2
	inE6Rold = inER;                           inE6Iold = inEI;
 80012ec:	ed9d 4a13 	vldr	s8, [sp, #76]	; 0x4c
		EXTI->SWIER1 |= GPIO_PIN_14;
 80012f0:	eeb0 6a6a 	vmov.f32	s12, s21
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80012f4:	edcd ea09 	vstr	s29, [sp, #36]	; 0x24
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80012f8:	eef0 ca64 	vmov.f32	s25, s9
	inE6Rold = inER;                           inE6Iold = inEI;
 80012fc:	eddd 4a12 	vldr	s9, [sp, #72]	; 0x48
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001300:	eef0 aa47 	vmov.f32	s21, s14
	inE5Rold  = inER;                          inE5Iold  = inEI;
 8001304:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001308:	ed8d ea08 	vstr	s28, [sp, #32]
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800130c:	edcd ba03 	vstr	s23, [sp, #12]
 8001310:	ed8d ba02 	vstr	s22, [sp, #8]
	idx = 0;
 8001314:	9e05      	ldr	r6, [sp, #20]
		EXTI->SWIER1 |= GPIO_PIN_14;
 8001316:	60b9      	str	r1, [r7, #8]
	inE6Rold = inER;                           inE6Iold = inEI;
 8001318:	ed8d 4a0f 	vstr	s8, [sp, #60]	; 0x3c
 800131c:	edcd 4a0d 	vstr	s9, [sp, #52]	; 0x34
	inE5Rold  = inER;                          inE5Iold  = inEI;
 8001320:	ed8d 7a07 	vstr	s14, [sp, #28]
	inE2Rold = inER;                           inE2Iold = inEI;
 8001324:	eef0 4a6d 	vmov.f32	s9, s27
	inE5Rold  = inER;                          inE5Iold  = inEI;
 8001328:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
	inE2Rold = inER;                           inE2Iold = inEI;
 800132c:	eeb0 1a4c 	vmov.f32	s2, s24
	inE3Rold  = inER;                          inE3Iold  = inEI;
 8001330:	ed9d ba01 	vldr	s22, [sp, #4]
 8001334:	eddd ba00 	vldr	s23, [sp]
	inE4Rold = inER;                           inE4Iold = inEI;
 8001338:	ed9d ea0a 	vldr	s28, [sp, #40]	; 0x28
 800133c:	eddd ea0b 	vldr	s29, [sp, #44]	; 0x2c
	inE5Rold  = inER;                          inE5Iold  = inEI;
 8001340:	edcd 7a05 	vstr	s15, [sp, #20]
 8001344:	3b01      	subs	r3, #1
	inE1Rold = inER;                           inE1Iold = inEI;
 8001346:	eef0 7a62 	vmov.f32	s15, s5
 800134a:	eeb0 7a42 	vmov.f32	s14, s4
 800134e:	3208      	adds	r2, #8
 8001350:	eef0 0a4d 	vmov.f32	s1, s26
 8001354:	b29b      	uxth	r3, r3
	inO1Rold2 = inO1Rold; inO1Rold = inOR;     inO1Iold2 = inO1Iold; inO1Iold = inOI;
 8001356:	eef0 2a68 	vmov.f32	s5, s17
 800135a:	3408      	adds	r4, #8
	inE1Rold = inER;                           inE1Iold = inEI;
 800135c:	eeb0 4a48 	vmov.f32	s8, s16
	inO1Rold2 = inO1Rold; inO1Rold = inOR;     inO1Iold2 = inO1Iold; inO1Iold = inOI;
 8001360:	eeb0 2a40 	vmov.f32	s4, s0
while(k--)
 8001364:	4290      	cmp	r0, r2
 8001366:	d030      	beq.n	80013ca <ADC_Stream0_Handler+0x51e>
	outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001368:	eea2 7a05 	vfma.f32	s14, s4, s10
	inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 800136c:	ed12 0a01 	vldr	s0, [r2, #-4]
	outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001370:	eee2 7a85 	vfma.f32	s15, s5, s10
	inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 8001374:	ed12 8a02 	vldr	s16, [r2, #-8]
 8001378:	ed54 8a01 	vldr	s17, [r4, #-4]
	if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 800137c:	07df      	lsls	r7, r3, #31
	inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 800137e:	ed14 da02 	vldr	s26, [r4, #-8]
	outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001382:	ee34 4a08 	vadd.f32	s8, s8, s16
 8001386:	ee70 0a8d 	vadd.f32	s1, s1, s26
 800138a:	ee37 7a00 	vadd.f32	s14, s14, s0
 800138e:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8001392:	eea4 7a25 	vfma.f32	s14, s8, s11
 8001396:	eee0 7aa5 	vfma.f32	s15, s1, s11
	if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 800139a:	f57f aee5 	bpl.w	8001168 <ADC_Stream0_Handler+0x2bc>
		tmp1R = outR; tmp1I = outI;  // save the even element produced
 800139e:	eef0 da67 	vmov.f32	s27, s15
 80013a2:	eeb0 ca47 	vmov.f32	s24, s14
 80013a6:	e7cd      	b.n	8001344 <ADC_Stream0_Handler+0x498>
 80013a8:	eef0 6a4a 	vmov.f32	s13, s20
		tmp2R = outR; tmp2I = outI;  // save the even element produced
 80013ac:	edcd 4a00 	vstr	s9, [sp]
 80013b0:	eeb0 6a6a 	vmov.f32	s12, s21
 80013b4:	ed8d 4a01 	vstr	s8, [sp, #4]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80013b8:	eeb0 aa67 	vmov.f32	s20, s15
 80013bc:	eef0 aa47 	vmov.f32	s21, s14
	inE2Rold = inER;                           inE2Iold = inEI;
 80013c0:	eef0 4a6d 	vmov.f32	s9, s27
 80013c4:	eeb0 1a4c 	vmov.f32	s2, s24
 80013c8:	e7bc      	b.n	8001344 <ADC_Stream0_Handler+0x498>
 80013ca:	4a87      	ldr	r2, [pc, #540]	; (80015e8 <ADC_Stream0_Handler+0x73c>)
 80013cc:	eeb0 ca4f 	vmov.f32	s24, s30
 80013d0:	eeb0 fa61 	vmov.f32	s30, s3
 80013d4:	edc9 fa00 	vstr	s31, [r9]
 80013d8:	ed82 9a00 	vstr	s18, [r2]
 80013dc:	eef0 1a64 	vmov.f32	s3, s9
 80013e0:	4a82      	ldr	r2, [pc, #520]	; (80015ec <ADC_Stream0_Handler+0x740>)
 80013e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e6:	edc8 9a00 	vstr	s19, [r8]
 80013ea:	ed82 ea00 	vstr	s28, [r2]
 80013ee:	4a80      	ldr	r2, [pc, #512]	; (80015f0 <ADC_Stream0_Handler+0x744>)
 80013f0:	edce ea00 	vstr	s29, [lr]
 80013f4:	ed82 2a00 	vstr	s4, [r2]
 80013f8:	4a7e      	ldr	r2, [pc, #504]	; (80015f4 <ADC_Stream0_Handler+0x748>)
 80013fa:	ed8c fa00 	vstr	s30, [ip]
 80013fe:	ed82 7a00 	vstr	s14, [r2]
 8001402:	4a7d      	ldr	r2, [pc, #500]	; (80015f8 <ADC_Stream0_Handler+0x74c>)
 8001404:	ed82 4a00 	vstr	s8, [r2]
 8001408:	4a7c      	ldr	r2, [pc, #496]	; (80015fc <ADC_Stream0_Handler+0x750>)
 800140a:	edc2 2a00 	vstr	s5, [r2]
 800140e:	4a7c      	ldr	r2, [pc, #496]	; (8001600 <ADC_Stream0_Handler+0x754>)
 8001410:	edc2 7a00 	vstr	s15, [r2]
 8001414:	4a7b      	ldr	r2, [pc, #492]	; (8001604 <ADC_Stream0_Handler+0x758>)
 8001416:	eddd 7a02 	vldr	s15, [sp, #8]
 800141a:	edc2 0a00 	vstr	s1, [r2]
 800141e:	4a7a      	ldr	r2, [pc, #488]	; (8001608 <ADC_Stream0_Handler+0x75c>)
 8001420:	edc2 aa00 	vstr	s21, [r2]
 8001424:	4a79      	ldr	r2, [pc, #484]	; (800160c <ADC_Stream0_Handler+0x760>)
 8001426:	ed82 6a00 	vstr	s12, [r2]
 800142a:	4a79      	ldr	r2, [pc, #484]	; (8001610 <ADC_Stream0_Handler+0x764>)
 800142c:	ed82 1a00 	vstr	s2, [r2]
 8001430:	4a78      	ldr	r2, [pc, #480]	; (8001614 <ADC_Stream0_Handler+0x768>)
 8001432:	ed82 aa00 	vstr	s20, [r2]
 8001436:	4a78      	ldr	r2, [pc, #480]	; (8001618 <ADC_Stream0_Handler+0x76c>)
 8001438:	edc2 6a00 	vstr	s13, [r2]
 800143c:	4a77      	ldr	r2, [pc, #476]	; (800161c <ADC_Stream0_Handler+0x770>)
 800143e:	edc2 1a00 	vstr	s3, [r2]
 8001442:	4a77      	ldr	r2, [pc, #476]	; (8001620 <ADC_Stream0_Handler+0x774>)
 8001444:	edc2 ca00 	vstr	s25, [r2]
 8001448:	4a76      	ldr	r2, [pc, #472]	; (8001624 <ADC_Stream0_Handler+0x778>)
 800144a:	ed82 3a00 	vstr	s6, [r2]
 800144e:	4a76      	ldr	r2, [pc, #472]	; (8001628 <ADC_Stream0_Handler+0x77c>)
 8001450:	edc2 ba00 	vstr	s23, [r2]
 8001454:	4a75      	ldr	r2, [pc, #468]	; (800162c <ADC_Stream0_Handler+0x780>)
 8001456:	ed82 ca00 	vstr	s24, [r2]
 800145a:	4a75      	ldr	r2, [pc, #468]	; (8001630 <ADC_Stream0_Handler+0x784>)
 800145c:	edc2 3a00 	vstr	s7, [r2]
 8001460:	4a74      	ldr	r2, [pc, #464]	; (8001634 <ADC_Stream0_Handler+0x788>)
 8001462:	ed82 ba00 	vstr	s22, [r2]
 8001466:	4a74      	ldr	r2, [pc, #464]	; (8001638 <ADC_Stream0_Handler+0x78c>)
 8001468:	edc2 7a00 	vstr	s15, [r2]
 800146c:	eddd 7a04 	vldr	s15, [sp, #16]
 8001470:	4a72      	ldr	r2, [pc, #456]	; (800163c <ADC_Stream0_Handler+0x790>)
 8001472:	edc2 7a00 	vstr	s15, [r2]
 8001476:	eddd 7a05 	vldr	s15, [sp, #20]
 800147a:	4a71      	ldr	r2, [pc, #452]	; (8001640 <ADC_Stream0_Handler+0x794>)
 800147c:	edc2 7a00 	vstr	s15, [r2]
 8001480:	eddd 7a03 	vldr	s15, [sp, #12]
 8001484:	4a6f      	ldr	r2, [pc, #444]	; (8001644 <ADC_Stream0_Handler+0x798>)
 8001486:	edc2 7a00 	vstr	s15, [r2]
 800148a:	eddd 7a06 	vldr	s15, [sp, #24]
 800148e:	4a6e      	ldr	r2, [pc, #440]	; (8001648 <ADC_Stream0_Handler+0x79c>)
 8001490:	802b      	strh	r3, [r5, #0]
 8001492:	edc2 7a00 	vstr	s15, [r2]
 8001496:	eddd 7a07 	vldr	s15, [sp, #28]
 800149a:	4a6c      	ldr	r2, [pc, #432]	; (800164c <ADC_Stream0_Handler+0x7a0>)
 800149c:	4b6c      	ldr	r3, [pc, #432]	; (8001650 <ADC_Stream0_Handler+0x7a4>)
 800149e:	edc2 7a00 	vstr	s15, [r2]
 80014a2:	eddd 7a08 	vldr	s15, [sp, #32]
 80014a6:	4a6b      	ldr	r2, [pc, #428]	; (8001654 <ADC_Stream0_Handler+0x7a8>)
 80014a8:	f8ab 6000 	strh.w	r6, [fp]
 80014ac:	edc2 7a00 	vstr	s15, [r2]
 80014b0:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 80014b4:	edc3 7a00 	vstr	s15, [r3]
 80014b8:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80014bc:	4b66      	ldr	r3, [pc, #408]	; (8001658 <ADC_Stream0_Handler+0x7ac>)
 80014be:	edc3 7a00 	vstr	s15, [r3]
 80014c2:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80014c6:	4b65      	ldr	r3, [pc, #404]	; (800165c <ADC_Stream0_Handler+0x7b0>)
 80014c8:	edc3 7a00 	vstr	s15, [r3]
 80014cc:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80014d0:	4b63      	ldr	r3, [pc, #396]	; (8001660 <ADC_Stream0_Handler+0x7b4>)
 80014d2:	edc3 7a00 	vstr	s15, [r3]
 80014d6:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80014da:	edca 7a00 	vstr	s15, [sl]
	}

	// LED_YELLOW_OFF;

}
 80014de:	b015      	add	sp, #84	; 0x54
 80014e0:	ecbd 8b10 	vpop	{d8-d15}
 80014e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014e8:	eeb0 ba46 	vmov.f32	s22, s12
		tmp3R = outR; tmp3I = outI;  // save the even element produced
 80014ec:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 80014f0:	eef0 ba66 	vmov.f32	s23, s13
 80014f4:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 80014f8:	eef0 3a4f 	vmov.f32	s7, s30
 80014fc:	eeb0 3a6c 	vmov.f32	s6, s25
 8001500:	eef0 6a4a 	vmov.f32	s13, s20
 8001504:	eeb0 6a6a 	vmov.f32	s12, s21
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001508:	eef0 ca64 	vmov.f32	s25, s9
 800150c:	eeb0 fa44 	vmov.f32	s30, s8
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001510:	eeb0 aa67 	vmov.f32	s20, s15
 8001514:	eef0 aa47 	vmov.f32	s21, s14
	inE2Rold = inER;                           inE2Iold = inEI;
 8001518:	eef0 4a6d 	vmov.f32	s9, s27
 800151c:	eeb0 1a4c 	vmov.f32	s2, s24
 8001520:	e710      	b.n	8001344 <ADC_Stream0_Handler+0x498>
 8001522:	eeb0 ea43 	vmov.f32	s28, s6
		tmp4R = outR; tmp4I = outI;  // save the even element produced
 8001526:	edcd ba10 	vstr	s23, [sp, #64]	; 0x40
 800152a:	eef0 ea63 	vmov.f32	s29, s7
 800152e:	ed8d ba11 	vstr	s22, [sp, #68]	; 0x44
 8001532:	eef0 3a4f 	vmov.f32	s7, s30
	inE3Rold  = inER;                          inE3Iold  = inEI;
 8001536:	ed9d ba01 	vldr	s22, [sp, #4]
 800153a:	eeb0 3a6c 	vmov.f32	s6, s25
 800153e:	eddd ba00 	vldr	s23, [sp]
 8001542:	eef0 6a4a 	vmov.f32	s13, s20
 8001546:	eeb0 6a6a 	vmov.f32	s12, s21
 800154a:	eeb0 9a61 	vmov.f32	s18, s3
 800154e:	eef0 9a6f 	vmov.f32	s19, s31
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001552:	eef0 ca64 	vmov.f32	s25, s9
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001556:	eef0 fa41 	vmov.f32	s31, s2
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800155a:	eeb0 fa44 	vmov.f32	s30, s8
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800155e:	eeb0 aa67 	vmov.f32	s20, s15
 8001562:	eef0 aa47 	vmov.f32	s21, s14
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001566:	eef0 1a60 	vmov.f32	s3, s1
	inE2Rold = inER;                           inE2Iold = inEI;
 800156a:	eef0 4a6d 	vmov.f32	s9, s27
 800156e:	eeb0 1a4c 	vmov.f32	s2, s24
 8001572:	e6e7      	b.n	8001344 <ADC_Stream0_Handler+0x498>
 8001574:	eddd 6a02 	vldr	s13, [sp, #8]
 8001578:	eef0 3a4f 	vmov.f32	s7, s30
 800157c:	edcd 9a06 	vstr	s19, [sp, #24]
 8001580:	eeb0 3a6c 	vmov.f32	s6, s25
 8001584:	edcd 6a04 	vstr	s13, [sp, #16]
 8001588:	eeb0 6a6a 	vmov.f32	s12, s21
 800158c:	eef0 6a4a 	vmov.f32	s13, s20
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001590:	edcd ba03 	vstr	s23, [sp, #12]
 8001594:	eeb0 9a61 	vmov.f32	s18, s3
 8001598:	ed8d ba02 	vstr	s22, [sp, #8]
 800159c:	eef0 9a6f 	vmov.f32	s19, s31
		tmp5R = outR; tmp5I = outI;  // save the even element produced
 80015a0:	edcd ea13 	vstr	s29, [sp, #76]	; 0x4c
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80015a4:	eeb0 fa44 	vmov.f32	s30, s8
		tmp5R = outR; tmp5I = outI;  // save the even element produced
 80015a8:	ed8d ea12 	vstr	s28, [sp, #72]	; 0x48
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80015ac:	eef0 ca64 	vmov.f32	s25, s9
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80015b0:	eeb0 aa67 	vmov.f32	s20, s15
 80015b4:	eef0 aa47 	vmov.f32	s21, s14
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80015b8:	eef0 1a60 	vmov.f32	s3, s1
 80015bc:	eef0 fa41 	vmov.f32	s31, s2
	inE5Rold  = inER;                          inE5Iold  = inEI;
 80015c0:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 80015c4:	edcd 7a07 	vstr	s15, [sp, #28]
 80015c8:	e6ac      	b.n	8001324 <ADC_Stream0_Handler+0x478>
	SDR_ComputeLO(LOfreq-cwpitch);  // prepare next LO buffer
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <ADC_Stream0_Handler+0x7b8>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80015d4:	f000 f882 	bl	80016dc <SDR_ComputeLO>
 80015d8:	e47d      	b.n	8000ed6 <ADC_Stream0_Handler+0x2a>
 80015da:	bf00      	nop
 80015dc:	2000d000 	.word	0x2000d000
 80015e0:	34000000 	.word	0x34000000
 80015e4:	2000b000 	.word	0x2000b000
 80015e8:	240005e4 	.word	0x240005e4
 80015ec:	24000598 	.word	0x24000598
 80015f0:	240005b8 	.word	0x240005b8
 80015f4:	240005bc 	.word	0x240005bc
 80015f8:	24000584 	.word	0x24000584
 80015fc:	240005b0 	.word	0x240005b0
 8001600:	240005b4 	.word	0x240005b4
 8001604:	24000580 	.word	0x24000580
 8001608:	240005c8 	.word	0x240005c8
 800160c:	240005cc 	.word	0x240005cc
 8001610:	2400058c 	.word	0x2400058c
 8001614:	240005c0 	.word	0x240005c0
 8001618:	240005c4 	.word	0x240005c4
 800161c:	24000588 	.word	0x24000588
 8001620:	240005d8 	.word	0x240005d8
 8001624:	240005dc 	.word	0x240005dc
 8001628:	24000594 	.word	0x24000594
 800162c:	240005d0 	.word	0x240005d0
 8001630:	240005d4 	.word	0x240005d4
 8001634:	24000590 	.word	0x24000590
 8001638:	240005f8 	.word	0x240005f8
 800163c:	240005fc 	.word	0x240005fc
 8001640:	240005a4 	.word	0x240005a4
 8001644:	240005f0 	.word	0x240005f0
 8001648:	240005f4 	.word	0x240005f4
 800164c:	240005a0 	.word	0x240005a0
 8001650:	2400060c 	.word	0x2400060c
 8001654:	24000608 	.word	0x24000608
 8001658:	240005ac 	.word	0x240005ac
 800165c:	24000600 	.word	0x24000600
 8001660:	24000604 	.word	0x24000604
 8001664:	24009e80 	.word	0x24009e80
 8001668:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 800166c:	eef0 3a4f 	vmov.f32	s7, s30
 8001670:	eeb0 3a6c 	vmov.f32	s6, s25
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001674:	edcd ea09 	vstr	s29, [sp, #36]	; 0x24
 8001678:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800167c:	eeb0 6a6a 	vmov.f32	s12, s21
 8001680:	eddd 6a08 	vldr	s13, [sp, #32]
 8001684:	eeb0 9a61 	vmov.f32	s18, s3
 8001688:	eef0 9a6f 	vmov.f32	s19, s31
 800168c:	ed8d ea08 	vstr	s28, [sp, #32]
 8001690:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001694:	eeb0 fa44 	vmov.f32	s30, s8
 8001698:	eddd 6a03 	vldr	s13, [sp, #12]
 800169c:	eef0 ca64 	vmov.f32	s25, s9
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80016a0:	edcd ba03 	vstr	s23, [sp, #12]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80016a4:	eef0 aa47 	vmov.f32	s21, s14
 80016a8:	edcd 6a06 	vstr	s13, [sp, #24]
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80016ac:	eef0 1a60 	vmov.f32	s3, s1
 80016b0:	eddd 6a02 	vldr	s13, [sp, #8]
 80016b4:	eef0 fa41 	vmov.f32	s31, s2
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80016b8:	ed8d ba02 	vstr	s22, [sp, #8]
 80016bc:	edcd 6a04 	vstr	s13, [sp, #16]
 80016c0:	eef0 6a4a 	vmov.f32	s13, s20
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80016c4:	eeb0 aa67 	vmov.f32	s20, s15
	inE6Rold = inER;                           inE6Iold = inEI;
 80016c8:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 80016cc:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 80016d0:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 80016d4:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 80016d8:	e772      	b.n	80015c0 <ADC_Stream0_Handler+0x714>
 80016da:	bf00      	nop

080016dc <SDR_ComputeLO>:

#include "Globals.h"

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 80016dc:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
  static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f, 
	                ypi, ypq, tmpi, gain=1.f;
	
	if (oldfreq != freq)
 80016de:	4b4f      	ldr	r3, [pc, #316]	; (800181c <SDR_ComputeLO+0x140>)
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	eef4 7a40 	vcmp.f32	s15, s0
{
 80016e8:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 80016ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f0:	d171      	bne.n	80017d6 <SDR_ComputeLO+0xfa>
 80016f2:	4a4b      	ldr	r2, [pc, #300]	; (8001820 <SDR_ComputeLO+0x144>)
 80016f4:	4b4b      	ldr	r3, [pc, #300]	; (8001824 <SDR_ComputeLO+0x148>)
 80016f6:	ed92 8a00 	vldr	s16, [r2]
 80016fa:	ed93 6a00 	vldr	s12, [r3]
// Coupled Quadrature Oscillator with level stabilization	
	while(k)
	{                    
// loop partially unrolled for performance		

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80016fe:	484a      	ldr	r0, [pc, #296]	; (8001828 <SDR_ComputeLO+0x14c>)
 8001700:	4c4a      	ldr	r4, [pc, #296]	; (800182c <SDR_ComputeLO+0x150>)
 8001702:	4d4b      	ldr	r5, [pc, #300]	; (8001830 <SDR_ComputeLO+0x154>)
 8001704:	4b4b      	ldr	r3, [pc, #300]	; (8001834 <SDR_ComputeLO+0x158>)
 8001706:	edd0 5a00 	vldr	s11, [r0]
 800170a:	edd4 7a00 	vldr	s15, [r4]
 800170e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8001712:	ed95 5a00 	vldr	s10, [r5]
 8001716:	4a48      	ldr	r2, [pc, #288]	; (8001838 <SDR_ComputeLO+0x15c>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001718:	ee27 7a88 	vmul.f32	s14, s15, s16
 800171c:	3310      	adds	r3, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800171e:	ee66 7a67 	vnmul.f32	s15, s12, s15
 8001722:	3210      	adds	r2, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001724:	eea5 7a06 	vfma.f32	s14, s10, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001728:	eee5 7a08 	vfma.f32	s15, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800172c:	ee27 7a25 	vmul.f32	s14, s14, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001730:	ee67 6aa5 	vmul.f32	s13, s15, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001734:	ee67 7a08 	vmul.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001738:	ed02 7a08 	vstr	s14, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800173c:	ee26 7a47 	vnmul.f32	s14, s12, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001740:	ed43 6a08 	vstr	s13, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001744:	eee6 7a86 	vfma.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001748:	eea6 7a88 	vfma.f32	s14, s13, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800174c:	ee67 7aa5 	vmul.f32	s15, s15, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001750:	ee27 7a25 	vmul.f32	s14, s14, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001754:	ee67 6a88 	vmul.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001758:	ed42 7a07 	vstr	s15, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800175c:	ee66 7a67 	vnmul.f32	s15, s12, s15
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001760:	ed03 7a07 	vstr	s14, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001764:	eee7 6a06 	vfma.f32	s13, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001768:	eee7 7a08 	vfma.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800176c:	ee26 7aa5 	vmul.f32	s14, s13, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001770:	ee67 7aa5 	vmul.f32	s15, s15, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001774:	ee66 6a47 	vnmul.f32	s13, s12, s14
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001778:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800177c:	ee27 7a08 	vmul.f32	s14, s14, s16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001780:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001784:	eee7 6a88 	vfma.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001788:	eea7 7a86 	vfma.f32	s14, s15, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800178c:	ee25 5aa6 	vmul.f32	s10, s11, s13
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001790:	ee65 7a87 	vmul.f32	s15, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001794:	ed03 5a05 	vstr	s10, [r3, #-20]	; 0xffffffec
	while(k)
 8001798:	428b      	cmp	r3, r1
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800179a:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 800179e:	d1bb      	bne.n	8001718 <SDR_ComputeLO+0x3c>
    ym1i = tmpi;

    k--;
	}
// compute the gain to be applied to stabilize the level
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 80017a0:	ee67 5a07 	vmul.f32	s11, s14, s14
 80017a4:	ed9f 6a25 	vldr	s12, [pc, #148]	; 800183c <SDR_ComputeLO+0x160>
 80017a8:	edc4 7a00 	vstr	s15, [r4]
 80017ac:	eddf 4a24 	vldr	s9, [pc, #144]	; 8001840 <SDR_ComputeLO+0x164>
 80017b0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80017b4:	4a23      	ldr	r2, [pc, #140]	; (8001844 <SDR_ComputeLO+0x168>)
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <SDR_ComputeLO+0x16c>)
 80017b8:	ed85 5a00 	vstr	s10, [r5]
 80017bc:	edc2 6a00 	vstr	s13, [r2]
 80017c0:	ed83 7a00 	vstr	s14, [r3]
 80017c4:	ee76 7a65 	vsub.f32	s15, s12, s11
}	
 80017c8:	ecbd 8b04 	vpop	{d8-d9}
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 80017cc:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80017d0:	edc0 7a00 	vstr	s15, [r0]
}	
 80017d4:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 80017d6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800184c <SDR_ComputeLO+0x170>
 80017da:	4a1d      	ldr	r2, [pc, #116]	; (8001850 <SDR_ComputeLO+0x174>)
 80017dc:	ee60 7a27 	vmul.f32	s15, s0, s15
	  oldfreq  =  freq;
 80017e0:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 80017e4:	ed92 7a00 	vldr	s14, [r2]
 80017e8:	ee87 9a87 	vdiv.f32	s18, s15, s14
 80017ec:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 80017f0:	eeb0 0b49 	vmov.f64	d0, d9
 80017f4:	f00a fa9c 	bl	800bd30 <cos>
 80017f8:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <SDR_ComputeLO+0x144>)
    sintheta = -sin(TWOPI * freq / SamplingRate);
 80017fe:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001802:	ed83 8a00 	vstr	s16, [r3]
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001806:	f00a facf 	bl	800bda8 <sin>
 800180a:	eeb7 6bc0 	vcvt.f32.f64	s12, d0
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <SDR_ComputeLO+0x148>)
 8001810:	eeb1 6a46 	vneg.f32	s12, s12
 8001814:	ed83 6a00 	vstr	s12, [r3]
 8001818:	e771      	b.n	80016fe <SDR_ComputeLO+0x22>
 800181a:	bf00      	nop
 800181c:	240000e4 	.word	0x240000e4
 8001820:	24000614 	.word	0x24000614
 8001824:	24000618 	.word	0x24000618
 8001828:	240000e0 	.word	0x240000e0
 800182c:	2400061c 	.word	0x2400061c
 8001830:	240000e8 	.word	0x240000e8
 8001834:	24003bcc 	.word	0x24003bcc
 8001838:	2400457c 	.word	0x2400457c
 800183c:	46000200 	.word	0x46000200
 8001840:	39000000 	.word	0x39000000
 8001844:	24000620 	.word	0x24000620
 8001848:	24000624 	.word	0x24000624
 800184c:	40c90fdb 	.word	0x40c90fdb
 8001850:	24004464 	.word	0x24004464

08001854 <SDR_2R_toC_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time
  while(blkCnt)
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	d02e      	beq.n	80018b6 <SDR_2R_toC_f32+0x62>
 8001858:	3010      	adds	r0, #16
 800185a:	3110      	adds	r1, #16
 800185c:	3220      	adds	r2, #32
{
 800185e:	b410      	push	{r4}
  {
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001860:	f850 4c10 	ldr.w	r4, [r0, #-16]
  while(blkCnt)
 8001864:	3b01      	subs	r3, #1
 8001866:	f100 0010 	add.w	r0, r0, #16
 800186a:	f101 0110 	add.w	r1, r1, #16
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800186e:	f842 4c20 	str.w	r4, [r2, #-32]
 8001872:	f102 0220 	add.w	r2, r2, #32
 8001876:	f851 4c20 	ldr.w	r4, [r1, #-32]
 800187a:	f842 4c3c 	str.w	r4, [r2, #-60]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800187e:	f850 4c1c 	ldr.w	r4, [r0, #-28]
 8001882:	f842 4c38 	str.w	r4, [r2, #-56]
 8001886:	f851 4c1c 	ldr.w	r4, [r1, #-28]
 800188a:	f842 4c34 	str.w	r4, [r2, #-52]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800188e:	f850 4c18 	ldr.w	r4, [r0, #-24]
 8001892:	f842 4c30 	str.w	r4, [r2, #-48]
 8001896:	f851 4c18 	ldr.w	r4, [r1, #-24]
 800189a:	f842 4c2c 	str.w	r4, [r2, #-44]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800189e:	f850 4c14 	ldr.w	r4, [r0, #-20]
 80018a2:	f842 4c28 	str.w	r4, [r2, #-40]
 80018a6:	f851 4c14 	ldr.w	r4, [r1, #-20]
 80018aa:	f842 4c24 	str.w	r4, [r2, #-36]
  while(blkCnt)
 80018ae:	d1d7      	bne.n	8001860 <SDR_2R_toC_f32+0xc>
    
    blkCnt--;
  }
}
 80018b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	4770      	bx	lr

080018b8 <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <SDR_downconvert_f32+0xd8>)
 80018ba:	3110      	adds	r1, #16
 80018bc:	3210      	adds	r2, #16
 80018be:	3008      	adds	r0, #8
		 tmp2=((*(pt)  -offset)) / 2048.f;
		 tmp3=((*(pt+3)-offset)) / 2048.f;
		 tmp4=((*(pt+2)-offset)) / 2048.f;
*/

     tmp2=((*(pt+1)-offset)) / 2048.f;
 80018c0:	eddf 5a34 	vldr	s11, [pc, #208]	; 8001994 <SDR_downconvert_f32+0xdc>
{
 80018c4:	b430      	push	{r4, r5}
 80018c6:	f503 6500 	add.w	r5, r3, #2048	; 0x800
 80018ca:	4c33      	ldr	r4, [pc, #204]	; (8001998 <SDR_downconvert_f32+0xe0>)
		 tmp1=((*(pt)  -offset)) / 2048.f;
 80018cc:	f830 cc08 	ldrh.w	ip, [r0, #-8]
 80018d0:	3310      	adds	r3, #16
		 tmp4=((*(pt+3)-offset)) / 2048.f;
		 tmp3=((*(pt+2)-offset)) / 2048.f;

    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 80018d2:	ed13 5a08 	vldr	s10, [r3, #-32]	; 0xffffffe0
 80018d6:	3008      	adds	r0, #8
		 tmp1=((*(pt)  -offset)) / 2048.f;
 80018d8:	ee06 ca10 	vmov	s12, ip
     tmp2=((*(pt+1)-offset)) / 2048.f;
 80018dc:	f830 cc0e 	ldrh.w	ip, [r0, #-14]
 80018e0:	3110      	adds	r1, #16
 80018e2:	3410      	adds	r4, #16
		 tmp1=((*(pt)  -offset)) / 2048.f;
 80018e4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
     tmp2=((*(pt+1)-offset)) / 2048.f;
 80018e8:	ee06 ca90 	vmov	s13, ip
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 80018ec:	f830 cc0a 	ldrh.w	ip, [r0, #-10]
 80018f0:	3210      	adds	r2, #16
     tmp2=((*(pt+1)-offset)) / 2048.f;
 80018f2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		 tmp1=((*(pt)  -offset)) / 2048.f;
 80018f6:	ee36 6a40 	vsub.f32	s12, s12, s0
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 80018fa:	ee07 ca90 	vmov	s15, ip
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 80018fe:	f830 cc0c 	ldrh.w	ip, [r0, #-12]
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8001902:	ee76 6ac0 	vsub.f32	s13, s13, s0
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8001906:	ee26 6a25 	vmul.f32	s12, s12, s11
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 800190a:	ee07 ca10 	vmov	s14, ip
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 800190e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8001912:	ee66 6aa5 	vmul.f32	s13, s13, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001916:	ee25 5a06 	vmul.f32	s10, s10, s12
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 800191a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 800191e:	ee77 7ac0 	vsub.f32	s15, s15, s0
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001922:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 8001926:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 800192a:	ee37 7a40 	vsub.f32	s14, s14, s0
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 800192e:	ee67 7aa5 	vmul.f32	s15, s15, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001932:	ee25 6a06 	vmul.f32	s12, s10, s12
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 8001936:	ee27 7a25 	vmul.f32	s14, s14, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 800193a:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		 *zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 800193e:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8001942:	ee26 6a26 	vmul.f32	s12, s12, s13
 8001946:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 800194a:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 800194e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001952:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		 *zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 8001956:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800195a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800195e:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 8001962:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 8001966:	ee26 7a87 	vmul.f32	s14, s13, s14
 800196a:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 800196e:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
  while(blkCnt)
 8001972:	42ab      	cmp	r3, r5
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001974:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001978:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 800197c:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 8001980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001984:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
  while(blkCnt)
 8001988:	d1a0      	bne.n	80018cc <SDR_downconvert_f32+0x14>
     pt += 4;
     blkCnt--;
	}	
}
 800198a:	bc30      	pop	{r4, r5}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	24003bcc 	.word	0x24003bcc
 8001994:	3a000000 	.word	0x3a000000
 8001998:	2400457c 	.word	0x2400457c

0800199c <SDR_compute_IIR_parms>:
	}
}
// ------------------------------------------------------
// Compute the parameters for the double IIR filter used for the narrow CW mode
void SDR_compute_IIR_parms(void)
{
 800199c:	b508      	push	{r3, lr}

   r = Qfactor;

   a1 = a2 = b0 = 0.f; 
   r2 = r*r;
   wr = 2.f * cwpitch / rate * myPI;
 800199e:	4a2b      	ldr	r2, [pc, #172]	; (8001a4c <SDR_compute_IIR_parms+0xb0>)
	 float rate = SamplingRate/256; //SamplingRate / decimation
 80019a0:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <SDR_compute_IIR_parms+0xb4>)
   wr = 2.f * cwpitch / rate * myPI;
 80019a2:	edd2 7a00 	vldr	s15, [r2]
	 float rate = SamplingRate/256; //SamplingRate / decimation
 80019a6:	ed93 7a00 	vldr	s14, [r3]
 80019aa:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001a54 <SDR_compute_IIR_parms+0xb8>
   wr = 2.f * cwpitch / rate * myPI;
 80019ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
   r = Qfactor;
 80019b2:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <SDR_compute_IIR_parms+0xbc>)
	 float rate = SamplingRate/256; //SamplingRate / decimation
 80019b4:	ee27 7a26 	vmul.f32	s14, s14, s13
   wr = 2.f * cwpitch / rate * myPI;
 80019b8:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001a5c <SDR_compute_IIR_parms+0xc0>
{
 80019bc:	ed2d 8b06 	vpush	{d8-d10}
   wr = 2.f * cwpitch / rate * myPI;
 80019c0:	eec7 8a87 	vdiv.f32	s17, s15, s14
   r = Qfactor;
 80019c4:	edd3 9a00 	vldr	s19, [r3]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80019c8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   r2 = r*r;
 80019cc:	ee69 aaa9 	vmul.f32	s21, s19, s19
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80019d0:	ee39 aaa9 	vadd.f32	s20, s19, s19
 80019d4:	ee3a 9a88 	vadd.f32	s18, s21, s16
										                         // (see the Proakis & Manolakis book)
   a1 = -2.f * r * cosw0;
   a2 = r2;
// b0 is normalized for gain ~ 2dB on all the band
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80019d8:	ee38 8a69 	vsub.f32	s16, s16, s19
   wr = 2.f * cwpitch / rate * myPI;
 80019dc:	ee68 8aa6 	vmul.f32	s17, s17, s13
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80019e0:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 80019e4:	f00a f9a4 	bl	800bd30 <cos>
 80019e8:	ee8a 6a09 	vdiv.f32	s12, s20, s18
   a1 = -2.f * r * cosw0;
 80019ec:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <SDR_compute_IIR_parms+0xc4>)
   a2 = r2;
 80019ee:	4a1d      	ldr	r2, [pc, #116]	; (8001a64 <SDR_compute_IIR_parms+0xc8>)
 80019f0:	edc2 aa00 	vstr	s21, [r2]
   a1 = -2.f * r * cosw0;
 80019f4:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80019f8:	ee78 8aa8 	vadd.f32	s17, s17, s17
 80019fc:	eeb7 aaca 	vcvt.f64.f32	d10, s20
   a1 = -2.f * r * cosw0;
 8001a00:	ee69 7aa7 	vmul.f32	s15, s19, s15
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001a04:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8001a08:	ee26 6b00 	vmul.f64	d6, d6, d0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001a0c:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001a10:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
   a1 = -2.f * r * cosw0;
 8001a14:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a18:	ed83 6a00 	vstr	s12, [r3]
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001a1c:	f00a f988 	bl	800bd30 <cos>
 8001a20:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 8001a24:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001a68 <SDR_compute_IIR_parms+0xcc>
 8001a28:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <SDR_compute_IIR_parms+0xd0>)
 8001a2a:	ee28 7a07 	vmul.f32	s14, s16, s14
 8001a2e:	eeaa 6b40 	vfms.f64	d6, d10, d0
 8001a32:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 8001a36:	ecbd 8b06 	vpop	{d8-d10}
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001a3a:	eeb1 5bc6 	vsqrt.f64	d5, d6
 8001a3e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a42:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001a46:	ed83 7a00 	vstr	s14, [r3]
}
 8001a4a:	bd08      	pop	{r3, pc}
 8001a4c:	24009e80 	.word	0x24009e80
 8001a50:	24004464 	.word	0x24004464
 8001a54:	3b800000 	.word	0x3b800000
 8001a58:	24008e70 	.word	0x24008e70
 8001a5c:	40490fdb 	.word	0x40490fdb
 8001a60:	240043c0 	.word	0x240043c0
 8001a64:	24008e6c 	.word	0x24008e6c
 8001a68:	3f99999a 	.word	0x3f99999a
 8001a6c:	2400c3a8 	.word	0x2400c3a8

08001a70 <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non blocking mode
 * @param  AdcHandle : ADC handle

 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8001a70:	b508      	push	{r3, lr}
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t)addr;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_ADC_ConvCpltCallback+0x30>)
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a74:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCIMVAC = op_addr;
 8001a78:	490a      	ldr	r1, [pc, #40]	; (8001aa4 <HAL_ADC_ConvCpltCallback+0x34>)
 8001a7a:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8001a7e:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8001a82:	3320      	adds	r3, #32
    while (op_size > 0) {
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d1fa      	bne.n	8001a7e <HAL_ADC_ConvCpltCallback+0xe>
 8001a88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a8c:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[BSIZE/2], 4*BSIZE/2);
#endif
	ADC_Stream0_Handler(1);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f7ff fa0b 	bl	8000eac <ADC_Stream0_Handler>
	/* Set variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = SET;
 8001a96:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <HAL_ADC_ConvCpltCallback+0x38>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
}
 8001a9c:	bd08      	pop	{r3, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2400cfc0 	.word	0x2400cfc0
 8001aa4:	e000ed00 	.word	0xe000ed00
 8001aa8:	24000649 	.word	0x24000649

08001aac <HAL_ADC_ConvHalfCpltCallback>:
 * @brief  Conversion DMA half-transfer callback in non blocking mode
 * @param  hadc: ADC handle
 * */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001aac:	b508      	push	{r3, lr}
    uint32_t op_addr = (uint32_t)addr;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8001ab0:	f3bf 8f4f 	dsb	sy
      SCB->DCIMVAC = op_addr;
 8001ab4:	490a      	ldr	r1, [pc, #40]	; (8001ae0 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001ab6:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8001aba:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8001abe:	3320      	adds	r3, #32
    while (op_size > 0) {
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d1fa      	bne.n	8001aba <HAL_ADC_ConvHalfCpltCallback+0xe>
 8001ac4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ac8:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[0], 4*BSIZE/2);
#endif
	ADC_Stream0_Handler(0);
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff f9ed 	bl	8000eac <ADC_Stream0_Handler>
	/* Reset variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = RESET;
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
}
 8001ad8:	bd08      	pop	{r3, pc}
 8001ada:	bf00      	nop
 8001adc:	2400cbc0 	.word	0x2400cbc0
 8001ae0:	e000ed00 	.word	0xe000ed00
 8001ae4:	24000649 	.word	0x24000649

08001ae8 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ae8:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[BSIZE];
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
	LED_RED_ON;
 8001aec:	2201      	movs	r2, #1
	ValidAudioHalf = &AudioOut[BSIZE];
 8001aee:	4c05      	ldr	r4, [pc, #20]	; (8001b04 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
	LED_RED_ON;
 8001af0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001af4:	4804      	ldr	r0, [pc, #16]	; (8001b08 <HAL_DAC_ConvCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[BSIZE];
 8001af6:	601c      	str	r4, [r3, #0]

	//	 __HAL_RCC_PLL2_DISABLE();
	//	__HAL_RCC_PLL2_CONFIG(4, 240, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();

}
 8001af8:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_ON;
 8001afc:	f003 bbc4 	b.w	8005288 <HAL_GPIO_WritePin>
 8001b00:	24004468 	.word	0x24004468
 8001b04:	24007280 	.word	0x24007280
 8001b08:	58020400 	.word	0x58020400

08001b0c <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001b0c:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[0];
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
	LED_RED_OFF;
 8001b10:	2200      	movs	r2, #0
	ValidAudioHalf = &AudioOut[0];
 8001b12:	4c05      	ldr	r4, [pc, #20]	; (8001b28 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
	LED_RED_OFF;
 8001b14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b18:	4804      	ldr	r0, [pc, #16]	; (8001b2c <HAL_DAC_ConvHalfCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[0];
 8001b1a:	601c      	str	r4, [r3, #0]
	//	 __HAL_RCC_PLL2_DISABLE();
	//	 __HAL_RCC_PLL2_CONFIG(4, 120, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();
}
 8001b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_OFF;
 8001b20:	f003 bbb2 	b.w	8005288 <HAL_GPIO_WritePin>
 8001b24:	24004468 	.word	0x24004468
 8001b28:	24006e80 	.word	0x24006e80
 8001b2c:	58020400 	.word	0x58020400

08001b30 <DisplayStatus>:
	static char StringWidth[8];
	static char StringAGC[8];
	static char StringStep[8];


	switch(Fstep)
 8001b30:	4b57      	ldr	r3, [pc, #348]	; (8001c90 <DisplayStatus+0x160>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b64      	cmp	r3, #100	; 0x64
{
 8001b36:	b570      	push	{r4, r5, r6, lr}
 8001b38:	b086      	sub	sp, #24
	switch(Fstep)
 8001b3a:	f000 809f 	beq.w	8001c7c <DisplayStatus+0x14c>
 8001b3e:	d969      	bls.n	8001c14 <DisplayStatus+0xe4>
 8001b40:	f242 7210 	movw	r2, #10000	; 0x2710
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d07d      	beq.n	8001c44 <DisplayStatus+0x114>
 8001b48:	4a52      	ldr	r2, [pc, #328]	; (8001c94 <DisplayStatus+0x164>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	f000 808f 	beq.w	8001c6e <DisplayStatus+0x13e>
 8001b50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b54:	d07d      	beq.n	8001c52 <DisplayStatus+0x122>
 8001b56:	4c50      	ldr	r4, [pc, #320]	; (8001c98 <DisplayStatus+0x168>)
	case 1000: strcpy(StringStep,"  1K"); break;
	case 10000: strcpy(StringStep," 10K"); break;
	case 100000: strcpy(StringStep,"100K"); break;
	}

	switch(CurrentMode)
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <DisplayStatus+0x16c>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	f200 8094 	bhi.w	8001c8a <DisplayStatus+0x15a>
 8001b62:	e8df f003 	tbb	[pc, r3]
 8001b66:	5155      	.short	0x5155
 8001b68:	0238      	.short	0x0238
	{
	case LSB: strcpy(StringMode,"LSB"); break;
	case USB: strcpy(StringMode,"USB"); break;
	case AM: strcpy(StringMode,"AM"); break;
	case CW: strcpy(StringMode,"CW"); break;
 8001b6a:	4b4d      	ldr	r3, [pc, #308]	; (8001ca0 <DisplayStatus+0x170>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4d4d      	ldr	r5, [pc, #308]	; (8001ca4 <DisplayStatus+0x174>)
 8001b70:	0c1a      	lsrs	r2, r3, #16
 8001b72:	802b      	strh	r3, [r5, #0]
 8001b74:	70aa      	strb	r2, [r5, #2]
	}
	switch (CurrentAGC)
 8001b76:	4b4c      	ldr	r3, [pc, #304]	; (8001ca8 <DisplayStatus+0x178>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d032      	beq.n	8001be4 <DisplayStatus+0xb4>
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d059      	beq.n	8001c36 <DisplayStatus+0x106>
 8001b82:	4a4a      	ldr	r2, [pc, #296]	; (8001cac <DisplayStatus+0x17c>)
	{
	case Fast: strcpy(StringAGC,"Fast"); break;
	case Slow: strcpy(StringAGC,"Slow"); break;
	}
	switch (CurrentBW)
 8001b84:	4b4a      	ldr	r3, [pc, #296]	; (8001cb0 <DisplayStatus+0x180>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d035      	beq.n	8001bf8 <DisplayStatus+0xc8>
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d04c      	beq.n	8001c2a <DisplayStatus+0xfa>
 8001b90:	4b48      	ldr	r3, [pc, #288]	; (8001cb4 <DisplayStatus+0x184>)
	{
	case Narrow: strcpy(StringWidth,"Narrow"); break;
	case Wide: strcpy(StringWidth,"Wide"); break;
	}
	sprintf(UartTXString, "          Freq %.0f Step %s Mode %s BW %s AGG %s Volume %1.1f   \r", LOfreq, StringStep, StringMode, StringWidth, StringAGC, volume);
 8001b92:	4849      	ldr	r0, [pc, #292]	; (8001cb8 <DisplayStatus+0x188>)
 8001b94:	4949      	ldr	r1, [pc, #292]	; (8001cbc <DisplayStatus+0x18c>)
 8001b96:	ed90 7a00 	vldr	s14, [r0]
 8001b9a:	edd1 6a00 	vldr	s13, [r1]
 8001b9e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001ba2:	4947      	ldr	r1, [pc, #284]	; (8001cc0 <DisplayStatus+0x190>)
 8001ba4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001ba8:	4846      	ldr	r0, [pc, #280]	; (8001cc4 <DisplayStatus+0x194>)
 8001baa:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8001bae:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001bb2:	ec53 2b16 	vmov	r2, r3, d6
 8001bb6:	e9cd 4500 	strd	r4, r5, [sp]
 8001bba:	f008 fdfd 	bl	800a7b8 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) UartTXString, strlen(UartTXString), 100);
 8001bbe:	4841      	ldr	r0, [pc, #260]	; (8001cc4 <DisplayStatus+0x194>)
 8001bc0:	f7fe fb8e 	bl	80002e0 <strlen>
 8001bc4:	2364      	movs	r3, #100	; 0x64
 8001bc6:	b282      	uxth	r2, r0
 8001bc8:	493e      	ldr	r1, [pc, #248]	; (8001cc4 <DisplayStatus+0x194>)
 8001bca:	483f      	ldr	r0, [pc, #252]	; (8001cc8 <DisplayStatus+0x198>)
}
 8001bcc:	b006      	add	sp, #24
 8001bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Transmit(&huart3, (uint8_t *) UartTXString, strlen(UartTXString), 100);
 8001bd2:	f006 b837 	b.w	8007c44 <HAL_UART_Transmit>
	case USB: strcpy(StringMode,"USB"); break;
 8001bd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ccc <DisplayStatus+0x19c>)
 8001bd8:	4d32      	ldr	r5, [pc, #200]	; (8001ca4 <DisplayStatus+0x174>)
 8001bda:	602b      	str	r3, [r5, #0]
	switch (CurrentAGC)
 8001bdc:	4b32      	ldr	r3, [pc, #200]	; (8001ca8 <DisplayStatus+0x178>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1cc      	bne.n	8001b7e <DisplayStatus+0x4e>
	case Fast: strcpy(StringAGC,"Fast"); break;
 8001be4:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <DisplayStatus+0x1a0>)
 8001be6:	4a31      	ldr	r2, [pc, #196]	; (8001cac <DisplayStatus+0x17c>)
 8001be8:	e893 0003 	ldmia.w	r3, {r0, r1}
	switch (CurrentBW)
 8001bec:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <DisplayStatus+0x180>)
	case Fast: strcpy(StringAGC,"Fast"); break;
 8001bee:	6010      	str	r0, [r2, #0]
	switch (CurrentBW)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
	case Fast: strcpy(StringAGC,"Fast"); break;
 8001bf2:	7111      	strb	r1, [r2, #4]
	switch (CurrentBW)
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1c9      	bne.n	8001b8c <DisplayStatus+0x5c>
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 8001bf8:	4936      	ldr	r1, [pc, #216]	; (8001cd4 <DisplayStatus+0x1a4>)
 8001bfa:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <DisplayStatus+0x184>)
 8001bfc:	c903      	ldmia	r1, {r0, r1}
 8001bfe:	0c0e      	lsrs	r6, r1, #16
 8001c00:	6018      	str	r0, [r3, #0]
 8001c02:	8099      	strh	r1, [r3, #4]
 8001c04:	719e      	strb	r6, [r3, #6]
 8001c06:	e7c4      	b.n	8001b92 <DisplayStatus+0x62>
	case LSB: strcpy(StringMode,"LSB"); break;
 8001c08:	4d26      	ldr	r5, [pc, #152]	; (8001ca4 <DisplayStatus+0x174>)
 8001c0a:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <DisplayStatus+0x1a8>)
 8001c0c:	602b      	str	r3, [r5, #0]
 8001c0e:	e7b2      	b.n	8001b76 <DisplayStatus+0x46>
	case AM: strcpy(StringMode,"AM"); break;
 8001c10:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <DisplayStatus+0x1ac>)
 8001c12:	e7ab      	b.n	8001b6c <DisplayStatus+0x3c>
	switch(Fstep)
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d023      	beq.n	8001c60 <DisplayStatus+0x130>
 8001c18:	2b0a      	cmp	r3, #10
 8001c1a:	d19c      	bne.n	8001b56 <DisplayStatus+0x26>
	case 10: strcpy(StringStep,"  10"); break;
 8001c1c:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <DisplayStatus+0x1b0>)
 8001c1e:	4c1e      	ldr	r4, [pc, #120]	; (8001c98 <DisplayStatus+0x168>)
 8001c20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c24:	6020      	str	r0, [r4, #0]
 8001c26:	7121      	strb	r1, [r4, #4]
 8001c28:	e796      	b.n	8001b58 <DisplayStatus+0x28>
	case Wide: strcpy(StringWidth,"Wide"); break;
 8001c2a:	492e      	ldr	r1, [pc, #184]	; (8001ce4 <DisplayStatus+0x1b4>)
 8001c2c:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <DisplayStatus+0x184>)
 8001c2e:	c903      	ldmia	r1, {r0, r1}
 8001c30:	6018      	str	r0, [r3, #0]
 8001c32:	7119      	strb	r1, [r3, #4]
 8001c34:	e7ad      	b.n	8001b92 <DisplayStatus+0x62>
	case Slow: strcpy(StringAGC,"Slow"); break;
 8001c36:	4b2c      	ldr	r3, [pc, #176]	; (8001ce8 <DisplayStatus+0x1b8>)
 8001c38:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <DisplayStatus+0x17c>)
 8001c3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c3e:	6010      	str	r0, [r2, #0]
 8001c40:	7111      	strb	r1, [r2, #4]
 8001c42:	e79f      	b.n	8001b84 <DisplayStatus+0x54>
	case 10000: strcpy(StringStep," 10K"); break;
 8001c44:	4b29      	ldr	r3, [pc, #164]	; (8001cec <DisplayStatus+0x1bc>)
 8001c46:	4c14      	ldr	r4, [pc, #80]	; (8001c98 <DisplayStatus+0x168>)
 8001c48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c4c:	6020      	str	r0, [r4, #0]
 8001c4e:	7121      	strb	r1, [r4, #4]
 8001c50:	e782      	b.n	8001b58 <DisplayStatus+0x28>
	case 1000: strcpy(StringStep,"  1K"); break;
 8001c52:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <DisplayStatus+0x1c0>)
 8001c54:	4c10      	ldr	r4, [pc, #64]	; (8001c98 <DisplayStatus+0x168>)
 8001c56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c5a:	6020      	str	r0, [r4, #0]
 8001c5c:	7121      	strb	r1, [r4, #4]
 8001c5e:	e77b      	b.n	8001b58 <DisplayStatus+0x28>
	case 1: strcpy(StringStep,"   1"); break;
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <DisplayStatus+0x1c4>)
 8001c62:	4c0d      	ldr	r4, [pc, #52]	; (8001c98 <DisplayStatus+0x168>)
 8001c64:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c68:	6020      	str	r0, [r4, #0]
 8001c6a:	7121      	strb	r1, [r4, #4]
 8001c6c:	e774      	b.n	8001b58 <DisplayStatus+0x28>
	case 100000: strcpy(StringStep,"100K"); break;
 8001c6e:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <DisplayStatus+0x1c8>)
 8001c70:	4c09      	ldr	r4, [pc, #36]	; (8001c98 <DisplayStatus+0x168>)
 8001c72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c76:	6020      	str	r0, [r4, #0]
 8001c78:	7121      	strb	r1, [r4, #4]
 8001c7a:	e76d      	b.n	8001b58 <DisplayStatus+0x28>
	case 100: strcpy(StringStep," 100"); break;
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <DisplayStatus+0x1cc>)
 8001c7e:	4c06      	ldr	r4, [pc, #24]	; (8001c98 <DisplayStatus+0x168>)
 8001c80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c84:	6020      	str	r0, [r4, #0]
 8001c86:	7121      	strb	r1, [r4, #4]
 8001c88:	e766      	b.n	8001b58 <DisplayStatus+0x28>
 8001c8a:	4d06      	ldr	r5, [pc, #24]	; (8001ca4 <DisplayStatus+0x174>)
 8001c8c:	e773      	b.n	8001b76 <DisplayStatus+0x46>
 8001c8e:	bf00      	nop
 8001c90:	2400c3b4 	.word	0x2400c3b4
 8001c94:	000186a0 	.word	0x000186a0
 8001c98:	24000638 	.word	0x24000638
 8001c9c:	2400c3bc 	.word	0x2400c3bc
 8001ca0:	0800f8e4 	.word	0x0800f8e4
 8001ca4:	24000630 	.word	0x24000630
 8001ca8:	24000660 	.word	0x24000660
 8001cac:	24000628 	.word	0x24000628
 8001cb0:	24000a70 	.word	0x24000a70
 8001cb4:	24000640 	.word	0x24000640
 8001cb8:	240043bc 	.word	0x240043bc
 8001cbc:	24009e88 	.word	0x24009e88
 8001cc0:	0800f908 	.word	0x0800f908
 8001cc4:	24007680 	.word	0x24007680
 8001cc8:	24002a9c 	.word	0x24002a9c
 8001ccc:	00425355 	.word	0x00425355
 8001cd0:	0800f8e8 	.word	0x0800f8e8
 8001cd4:	0800f8f8 	.word	0x0800f8f8
 8001cd8:	0042534c 	.word	0x0042534c
 8001cdc:	0800f8e0 	.word	0x0800f8e0
 8001ce0:	0800f8b8 	.word	0x0800f8b8
 8001ce4:	0800f900 	.word	0x0800f900
 8001ce8:	0800f8f0 	.word	0x0800f8f0
 8001cec:	0800f8d0 	.word	0x0800f8d0
 8001cf0:	0800f8c8 	.word	0x0800f8c8
 8001cf4:	0800f8b0 	.word	0x0800f8b0
 8001cf8:	0800f8d8 	.word	0x0800f8d8
 8001cfc:	0800f8c0 	.word	0x0800f8c0

08001d00 <HAL_UART_RxCpltCallback>:
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{

	/* Turn LED2 on: Transfer in reception process is correct */
	LED_RED_OFF;
 8001d00:	2200      	movs	r2, #0
 8001d02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d06:	4801      	ldr	r0, [pc, #4]	; (8001d0c <HAL_UART_RxCpltCallback+0xc>)
 8001d08:	f003 babe 	b.w	8005288 <HAL_GPIO_WritePin>
 8001d0c:	58020400 	.word	0x58020400

08001d10 <SetFOutVHF>:
MCODIV = 1
	 */
	DivN2 = 291;
	FracN2 = 0;

	__HAL_RCC_PLL2_DISABLE();
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <SetFOutVHF+0x3c>)
{
 8001d12:	b082      	sub	sp, #8
	DivN2 = 291;
 8001d14:	f240 1123 	movw	r1, #291	; 0x123
	FracN2 = 0;
 8001d18:	2200      	movs	r2, #0
	DivN2 = 291;
 8001d1a:	9100      	str	r1, [sp, #0]
	FracN2 = 0;
 8001d1c:	9201      	str	r2, [sp, #4]
	__HAL_RCC_PLL2_DISABLE();
 8001d1e:	681a      	ldr	r2, [r3, #0]
	__HAL_RCC_PLL2_CONFIG(8, DivN2, 2, 2, 2);
 8001d20:	490b      	ldr	r1, [pc, #44]	; (8001d50 <SetFOutVHF+0x40>)
	__HAL_RCC_PLL2_DISABLE();
 8001d22:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001d26:	601a      	str	r2, [r3, #0]
	__HAL_RCC_PLL2_CONFIG(8, DivN2, 2, 2, 2);
 8001d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d2a:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8001d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
 8001d34:	9a00      	ldr	r2, [sp, #0]
 8001d36:	3a01      	subs	r2, #1
 8001d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d3c:	4311      	orrs	r1, r2
 8001d3e:	6399      	str	r1, [r3, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001d46:	601a      	str	r2, [r3, #0]


}
 8001d48:	b002      	add	sp, #8
 8001d4a:	4770      	bx	lr
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	01010200 	.word	0x01010200

08001d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d54:	4e07      	ldr	r6, [pc, #28]	; (8001d74 <Error_Handler+0x20>)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8001d56:	2532      	movs	r5, #50	; 0x32
 8001d58:	4c07      	ldr	r4, [pc, #28]	; (8001d78 <Error_Handler+0x24>)
{
 8001d5a:	b508      	push	{r3, lr}
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8001d5c:	6832      	ldr	r2, [r6, #0]
 8001d5e:	fba4 1302 	umull	r1, r3, r4, r2
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	fb05 2313 	mls	r3, r5, r3, r2
 8001d68:	b103      	cbz	r3, 8001d6c <Error_Handler+0x18>
 8001d6a:	e7fe      	b.n	8001d6a <Error_Handler+0x16>
			LED_switch();
 8001d6c:	f7ff f89a 	bl	8000ea4 <LED_switch>
 8001d70:	e7f4      	b.n	8001d5c <Error_Handler+0x8>
 8001d72:	bf00      	nop
 8001d74:	24009e8c 	.word	0x24009e8c
 8001d78:	51eb851f 	.word	0x51eb851f

08001d7c <SystemClock_Config_For_OC>:
{
 8001d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d80:	b0cc      	sub	sp, #304	; 0x130
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d82:	224c      	movs	r2, #76	; 0x4c
 8001d84:	2100      	movs	r1, #0
 8001d86:	a80a      	add	r0, sp, #40	; 0x28
 8001d88:	f008 f81a 	bl	8009dc0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	2100      	movs	r1, #0
 8001d90:	a802      	add	r0, sp, #8
 8001d92:	f008 f815 	bl	8009dc0 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d96:	22bc      	movs	r2, #188	; 0xbc
 8001d98:	2100      	movs	r1, #0
 8001d9a:	a81d      	add	r0, sp, #116	; 0x74
 8001d9c:	f008 f810 	bl	8009dc0 <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001da0:	2002      	movs	r0, #2
 8001da2:	f003 fd0f 	bl	80057c4 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001da6:	4b40      	ldr	r3, [pc, #256]	; (8001ea8 <SystemClock_Config_For_OC+0x12c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	4940      	ldr	r1, [pc, #256]	; (8001eac <SystemClock_Config_For_OC+0x130>)
 8001dac:	9201      	str	r2, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001dae:	461a      	mov	r2, r3
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001db0:	6998      	ldr	r0, [r3, #24]
 8001db2:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001db6:	6198      	str	r0, [r3, #24]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001dc8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001dd2:	6993      	ldr	r3, [r2, #24]
 8001dd4:	049b      	lsls	r3, r3, #18
 8001dd6:	d5fc      	bpl.n	8001dd2 <SystemClock_Config_For_OC+0x56>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001dd8:	4935      	ldr	r1, [pc, #212]	; (8001eb0 <SystemClock_Config_For_OC+0x134>)
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dda:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ddc:	2504      	movs	r5, #4
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001dde:	2200      	movs	r2, #0
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001de0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001de2:	2601      	movs	r6, #1
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001de4:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	RCC_OscInitStruct.PLL.PLLN = 300;
 8001de8:	f44f 7c96 	mov.w	ip, #300	; 0x12c
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001dec:	f023 0303 	bic.w	r3, r3, #3
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df0:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001df2:	4323      	orrs	r3, r4
 8001df4:	628b      	str	r3, [r1, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = 2;
 8001df6:	9417      	str	r4, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001df8:	9419      	str	r4, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLM = 2;
 8001dfa:	9415      	str	r4, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dfc:	9518      	str	r5, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001dfe:	921c      	str	r2, [sp, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 300;
 8001e00:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e04:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e08:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e0c:	e9cd 521a 	strd	r5, r2, [sp, #104]	; 0x68
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e10:	f003 fd06 	bl	8005820 <HAL_RCC_OscConfig>
 8001e14:	2800      	cmp	r0, #0
 8001e16:	d144      	bne.n	8001ea2 <SystemClock_Config_For_OC+0x126>
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001e18:	2308      	movs	r3, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e1a:	213f      	movs	r1, #63	; 0x3f
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e1c:	2203      	movs	r2, #3
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001e1e:	f04f 0840 	mov.w	r8, #64	; 0x40
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001e22:	f44f 6980 	mov.w	r9, #1024	; 0x400
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e26:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e28:	9102      	str	r1, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e2a:	eb0d 0003 	add.w	r0, sp, r3
 8001e2e:	4629      	mov	r1, r5
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001e30:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e32:	9203      	str	r2, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001e34:	e9cd 8806 	strd	r8, r8, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001e38:	e9cd 9808 	strd	r9, r8, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e3c:	f004 f8c4 	bl	8005fc8 <HAL_RCC_ClockConfig>
 8001e40:	4603      	mov	r3, r0
 8001e42:	bb70      	cbnz	r0, 8001ea2 <SystemClock_Config_For_OC+0x126>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8001e44:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8001eb4 <SystemClock_Config_For_OC+0x138>
	PeriphClkInitStruct.PLL3.PLL3N = 320;
 8001e48:	f44f 7ea0 	mov.w	lr, #320	; 0x140
	PeriphClkInitStruct.PLL2.PLL2N = 240;
 8001e4c:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
	PeriphClkInitStruct.PLL2.PLL2P = 16;
 8001e50:	2110      	movs	r1, #16
	PeriphClkInitStruct.PLL2.PLL2FRACN = 6000;
 8001e52:	f241 7270 	movw	r2, #6000	; 0x1770
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e56:	a81d      	add	r0, sp, #116	; 0x74
	PeriphClkInitStruct.PLL3.PLL3M = 4;
 8001e58:	9526      	str	r5, [sp, #152]	; 0x98
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001e5a:	951e      	str	r5, [sp, #120]	; 0x78
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001e5c:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001e60:	9324      	str	r3, [sp, #144]	; 0x90
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e62:	933a      	str	r3, [sp, #232]	; 0xe8
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8001e64:	f8cd 910c 	str.w	r9, [sp, #268]	; 0x10c
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8001e68:	9745      	str	r7, [sp, #276]	; 0x114
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8001e6a:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
	PeriphClkInitStruct.PLL3.PLL3N = 320;
 8001e6e:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
	PeriphClkInitStruct.PLL2.PLL2FRACN = 6000;
 8001e72:	9225      	str	r2, [sp, #148]	; 0x94
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001e74:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
	PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001e78:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8001e7c:	e9cd 592a 	strd	r5, r9, [sp, #168]	; 0xa8
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001e80:	e9cd 332c 	strd	r3, r3, [sp, #176]	; 0xb0
	PeriphClkInitStruct.PLL2.PLL2P = 16;
 8001e84:	e9cd c11f 	strd	ip, r1, [sp, #124]	; 0x7c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e88:	f004 fcc8 	bl	800681c <HAL_RCCEx_PeriphCLKConfig>
 8001e8c:	b948      	cbnz	r0, 8001ea2 <SystemClock_Config_For_OC+0x126>
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_1);
 8001e8e:	4630      	mov	r0, r6
 8001e90:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e94:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8001e98:	f003 ffba 	bl	8005e10 <HAL_RCC_MCOConfig>
}
 8001e9c:	b04c      	add	sp, #304	; 0x130
 8001e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Error_Handler();
 8001ea2:	f7ff ff57 	bl	8001d54 <Error_Handler>
 8001ea6:	bf00      	nop
 8001ea8:	58024800 	.word	0x58024800
 8001eac:	58000400 	.word	0x58000400
 8001eb0:	58024400 	.word	0x58024400
 8001eb4:	00080042 	.word	0x00080042

08001eb8 <MX_TIM6_Init_Custom_Rate>:
{
 8001eb8:	b510      	push	{r4, lr}
	htim6.Instance = TIM6;
 8001eba:	4810      	ldr	r0, [pc, #64]	; (8001efc <MX_TIM6_Init_Custom_Rate+0x44>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ebc:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 8001ebe:	4c10      	ldr	r4, [pc, #64]	; (8001f00 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 8001ec0:	b084      	sub	sp, #16
	htim6.Init.Period = 7679;
 8001ec2:	f641 51ff 	movw	r1, #7679	; 0x1dff
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ec6:	2280      	movs	r2, #128	; 0x80
	htim6.Instance = TIM6;
 8001ec8:	6020      	str	r0, [r4, #0]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001eca:	4620      	mov	r0, r4
	htim6.Init.Period = 7679;
 8001ecc:	60e1      	str	r1, [r4, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ece:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 8001ed0:	6063      	str	r3, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed2:	9301      	str	r3, [sp, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed4:	60a3      	str	r3, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001eda:	f005 fce3 	bl	80078a4 <HAL_TIM_Base_Init>
 8001ede:	b950      	cbnz	r0, 8001ef6 <MX_TIM6_Init_Custom_Rate+0x3e>
 8001ee0:	4603      	mov	r3, r0
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ee2:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ee4:	a901      	add	r1, sp, #4
 8001ee6:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee8:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001eea:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001eec:	f005 fe4a 	bl	8007b84 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef0:	b908      	cbnz	r0, 8001ef6 <MX_TIM6_Init_Custom_Rate+0x3e>
}
 8001ef2:	b004      	add	sp, #16
 8001ef4:	bd10      	pop	{r4, pc}
		Error_Handler();
 8001ef6:	f7ff ff2d 	bl	8001d54 <Error_Handler>
 8001efa:	bf00      	nop
 8001efc:	40001000 	.word	0x40001000
 8001f00:	24008e20 	.word	0x24008e20
 8001f04:	00000000 	.word	0x00000000

08001f08 <main>:
{
 8001f08:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001f0c:	b0a9      	sub	sp, #164	; 0xa4
  HAL_Init();
 8001f0e:	f000 fecf 	bl	8002cb0 <HAL_Init>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f16:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001f1a:	48ce      	ldr	r0, [pc, #824]	; (8002254 <main+0x34c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001f22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f26:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001f2a:	6943      	ldr	r3, [r0, #20]
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f30:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f36:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001f3a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001f3e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001f42:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f46:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001f4a:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001f4e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001f52:	07b7      	lsls	r7, r6, #30
 8001f54:	015d      	lsls	r5, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f56:	ea05 040c 	and.w	r4, r5, ip
 8001f5a:	4639      	mov	r1, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001f5c:	4632      	mov	r2, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f5e:	ea41 0304 	orr.w	r3, r1, r4
      } while (ways-- != 0U);
 8001f62:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f64:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
 8001f68:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8001f6c:	1c53      	adds	r3, r2, #1
 8001f6e:	d1f6      	bne.n	8001f5e <main+0x56>
 8001f70:	3d20      	subs	r5, #32
    } while(sets-- != 0U);
 8001f72:	f115 0f20 	cmn.w	r5, #32
 8001f76:	d1ee      	bne.n	8001f56 <main+0x4e>
 8001f78:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001f7c:	6943      	ldr	r3, [r0, #20]
 8001f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f82:	6143      	str	r3, [r0, #20]
 8001f84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f88:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	2600      	movs	r6, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	4db2      	ldr	r5, [pc, #712]	; (8002258 <main+0x350>)
	SystemClock_Config_For_OC();
 8001f90:	f7ff fef4 	bl	8001d7c <SystemClock_Config_For_OC>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f94:	2401      	movs	r4, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f96:	9620      	str	r6, [sp, #128]	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	f04f 0902 	mov.w	r9, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	9621      	str	r6, [sp, #132]	; 0x84
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001f9e:	f44f 7180 	mov.w	r1, #256	; 0x100
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa2:	9622      	str	r6, [sp, #136]	; 0x88
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001fa4:	4632      	mov	r2, r6
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa6:	9623      	str	r6, [sp, #140]	; 0x8c
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001fa8:	4688      	mov	r8, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001faa:	961f      	str	r6, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fac:	2703      	movs	r7, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fae:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001fb2:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001fb6:	48a9      	ldr	r0, [pc, #676]	; (800225c <main+0x354>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
  hadc1.Instance = ADC1;
 8001fbc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8002288 <main+0x380>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8001fc4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	9306      	str	r3, [sp, #24]
 8001fce:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fd0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8001fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8001fdc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8001fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe4:	9307      	str	r3, [sp, #28]
 8001fe6:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8001fec:	4323      	orrs	r3, r4
 8001fee:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8001ff2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8001ff6:	4023      	ands	r3, r4
 8001ff8:	9308      	str	r3, [sp, #32]
 8001ffa:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002000:	ea43 0309 	orr.w	r3, r3, r9
 8002004:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8002008:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800200c:	ea03 0309 	and.w	r3, r3, r9
 8002010:	9309      	str	r3, [sp, #36]	; 0x24
 8002012:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002014:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002018:	f043 0308 	orr.w	r3, r3, #8
 800201c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8002020:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	930a      	str	r3, [sp, #40]	; 0x28
 800202a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800202c:	f003 f92c 	bl	8005288 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SwInt1_Pin;
 8002030:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002034:	4a8a      	ldr	r2, [pc, #552]	; (8002260 <main+0x358>)
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8002036:	a91f      	add	r1, sp, #124	; 0x7c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002038:	9421      	str	r4, [sp, #132]	; 0x84
  GPIO_InitStruct.Pin = SwInt1_Pin;
 800203a:	901f      	str	r0, [sp, #124]	; 0x7c
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 800203c:	4889      	ldr	r0, [pc, #548]	; (8002264 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800203e:	9220      	str	r2, [sp, #128]	; 0x80
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8002040:	f003 f804 	bl	800504c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002044:	f44f 7200 	mov.w	r2, #512	; 0x200
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002048:	a91f      	add	r1, sp, #124	; 0x7c
 800204a:	4886      	ldr	r0, [pc, #536]	; (8002264 <main+0x35c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	9621      	str	r6, [sp, #132]	; 0x84
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800204e:	9623      	str	r6, [sp, #140]	; 0x8c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002050:	9722      	str	r7, [sp, #136]	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	e9cd 291f 	strd	r2, r9, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002056:	f002 fff9 	bl	800504c <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800205a:	a91f      	add	r1, sp, #124	; 0x7c
 800205c:	487f      	ldr	r0, [pc, #508]	; (800225c <main+0x354>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	9622      	str	r6, [sp, #136]	; 0x88
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002060:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	e9cd 4620 	strd	r4, r6, [sp, #128]	; 0x80
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002068:	f002 fff0 	bl	800504c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 800206c:	4632      	mov	r2, r6
 800206e:	2104      	movs	r1, #4
 8002070:	2028      	movs	r0, #40	; 0x28
 8002072:	f001 fc9f 	bl	80039b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002076:	2028      	movs	r0, #40	; 0x28
 8002078:	f001 fcd2 	bl	8003a20 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800207c:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002080:	4632      	mov	r2, r6
 8002082:	4631      	mov	r1, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002084:	4323      	orrs	r3, r4
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002086:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002088:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 800208c:	f8d5 50d8 	ldr.w	r5, [r5, #216]	; 0xd8
 8002090:	4025      	ands	r5, r4
 8002092:	9505      	str	r5, [sp, #20]
 8002094:	9d05      	ldr	r5, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002096:	f001 fc8d 	bl	80039b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800209a:	200b      	movs	r0, #11
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800209c:	2504      	movs	r5, #4
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800209e:	f001 fcbf 	bl	8003a20 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 80020a2:	4632      	mov	r2, r6
 80020a4:	4649      	mov	r1, r9
 80020a6:	200c      	movs	r0, #12
 80020a8:	f001 fc84 	bl	80039b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80020ac:	200c      	movs	r0, #12
 80020ae:	f001 fcb7 	bl	8003a20 <HAL_NVIC_EnableIRQ>
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80020b2:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  hadc1.Instance = ADC1;
 80020b6:	4a6c      	ldr	r2, [pc, #432]	; (8002268 <main+0x360>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020b8:	2308      	movs	r3, #8
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020ba:	4650      	mov	r0, sl
  ADC_MultiModeTypeDef multimode = {0};
 80020bc:	960e      	str	r6, [sp, #56]	; 0x38
  ADC_ChannelConfTypeDef sConfig = {0};
 80020be:	9618      	str	r6, [sp, #96]	; 0x60
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80020c0:	f8ca 702c 	str.w	r7, [sl, #44]	; 0x2c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020c4:	f8ca 600c 	str.w	r6, [sl, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80020c8:	f88a 6014 	strb.w	r6, [sl, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80020cc:	f88a 4015 	strb.w	r4, [sl, #21]
  hadc1.Init.NbrOfConversion = 1;
 80020d0:	f8ca 4018 	str.w	r4, [sl, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020d4:	f88a 601c 	strb.w	r6, [sl, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80020d8:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80020dc:	f88a 6038 	strb.w	r6, [sl, #56]	; 0x38
  hadc1.Instance = ADC1;
 80020e0:	f8ca 2000 	str.w	r2, [sl]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80020e4:	f8ca b004 	str.w	fp, [sl, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020e8:	f8ca 3008 	str.w	r3, [sl, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020ec:	f8ca 5010 	str.w	r5, [sl, #16]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80020f0:	f8ca 9030 	str.w	r9, [sl, #48]	; 0x30
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020f4:	e9ca 6609 	strd	r6, r6, [sl, #36]	; 0x24
  ADC_MultiModeTypeDef multimode = {0};
 80020f8:	e9cd 660f 	strd	r6, r6, [sp, #60]	; 0x3c
  ADC_ChannelConfTypeDef sConfig = {0};
 80020fc:	e9cd 6619 	strd	r6, r6, [sp, #100]	; 0x64
 8002100:	e9cd 661b 	strd	r6, r6, [sp, #108]	; 0x6c
 8002104:	e9cd 661d 	strd	r6, r6, [sp, #116]	; 0x74
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002108:	f001 f9f4 	bl	80034f4 <HAL_ADC_Init>
 800210c:	2800      	cmp	r0, #0
 800210e:	f040 8100 	bne.w	8002312 <main+0x40a>
  multimode.Mode = ADC_DUALMODE_INTERL;
 8002112:	2007      	movs	r0, #7
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8002114:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002118:	a90e      	add	r1, sp, #56	; 0x38
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 800211a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  multimode.Mode = ADC_DUALMODE_INTERL;
 800211e:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002120:	4650      	mov	r0, sl
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8002122:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002124:	f001 fbd2 	bl	80038cc <HAL_ADCEx_MultiModeConfigChannel>
 8002128:	4602      	mov	r2, r0
 800212a:	2800      	cmp	r0, #0
 800212c:	f040 80f1 	bne.w	8002312 <main+0x40a>
  sConfig.Channel = ADC_CHANNEL_5;
 8002130:	f8df 8158 	ldr.w	r8, [pc, #344]	; 800228c <main+0x384>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002134:	2706      	movs	r7, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002136:	f240 76ff 	movw	r6, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800213a:	a918      	add	r1, sp, #96	; 0x60
 800213c:	4650      	mov	r0, sl
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800213e:	921a      	str	r2, [sp, #104]	; 0x68
  sConfig.OffsetSignedSaturation = DISABLE;
 8002140:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002144:	961b      	str	r6, [sp, #108]	; 0x6c
  sConfig.Offset = 0;
 8002146:	e9cd 521c 	strd	r5, r2, [sp, #112]	; 0x70
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800214a:	e9cd 8718 	strd	r8, r7, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800214e:	f000 fe83 	bl	8002e58 <HAL_ADC_ConfigChannel>
 8002152:	4602      	mov	r2, r0
 8002154:	2800      	cmp	r0, #0
 8002156:	f040 80dc 	bne.w	8002312 <main+0x40a>
  hadc2.Instance = ADC2;
 800215a:	4b44      	ldr	r3, [pc, #272]	; (800226c <main+0x364>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800215c:	2108      	movs	r1, #8
  hadc2.Instance = ADC2;
 800215e:	f8df c130 	ldr.w	ip, [pc, #304]	; 8002290 <main+0x388>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002162:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002164:	4618      	mov	r0, r3
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002166:	751a      	strb	r2, [r3, #20]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002168:	771a      	strb	r2, [r3, #28]
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800216a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800216c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002170:	f8c3 b004 	str.w	fp, [r3, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002174:	611d      	str	r5, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002176:	755c      	strb	r4, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8002178:	619c      	str	r4, [r3, #24]
  hadc2.Instance = ADC2;
 800217a:	f8c3 c000 	str.w	ip, [r3]
 800217e:	9303      	str	r3, [sp, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002180:	e9c3 1202 	strd	r1, r2, [r3, #8]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002184:	e9c3 290b 	strd	r2, r9, [r3, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8002188:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
 800218c:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
 8002190:	e9cd 2216 	strd	r2, r2, [sp, #88]	; 0x58
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002194:	f001 f9ae 	bl	80034f4 <HAL_ADC_Init>
 8002198:	4602      	mov	r2, r0
 800219a:	2800      	cmp	r0, #0
 800219c:	f040 80b9 	bne.w	8002312 <main+0x40a>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80021a0:	9b03      	ldr	r3, [sp, #12]
 80021a2:	a911      	add	r1, sp, #68	; 0x44
  sConfig.OffsetSignedSaturation = DISABLE;
 80021a4:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80021a8:	4618      	mov	r0, r3
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021aa:	e9cd 8711 	strd	r8, r7, [sp, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021ae:	e9cd 2613 	strd	r2, r6, [sp, #76]	; 0x4c
  sConfig.Offset = 0;
 80021b2:	e9cd 5215 	strd	r5, r2, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80021b6:	f000 fe4f 	bl	8002e58 <HAL_ADC_ConfigChannel>
 80021ba:	4601      	mov	r1, r0
 80021bc:	2800      	cmp	r0, #0
 80021be:	f040 80a8 	bne.w	8002312 <main+0x40a>
  DAC_ChannelConfTypeDef sConfig = {0};
 80021c2:	2224      	movs	r2, #36	; 0x24
  hdac1.Instance = DAC1;
 80021c4:	4d2a      	ldr	r5, [pc, #168]	; (8002270 <main+0x368>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80021c6:	a81f      	add	r0, sp, #124	; 0x7c
 80021c8:	f007 fdfa 	bl	8009dc0 <memset>
  hdac1.Instance = DAC1;
 80021cc:	4b29      	ldr	r3, [pc, #164]	; (8002274 <main+0x36c>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80021ce:	4628      	mov	r0, r5
  hdac1.Instance = DAC1;
 80021d0:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80021d2:	f001 fc4b 	bl	8003a6c <HAL_DAC_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2800      	cmp	r0, #0
 80021da:	f040 809a 	bne.w	8002312 <main+0x40a>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80021de:	2616      	movs	r6, #22
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80021e0:	461a      	mov	r2, r3
 80021e2:	a91f      	add	r1, sp, #124	; 0x7c
 80021e4:	4628      	mov	r0, r5
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80021e6:	931f      	str	r3, [sp, #124]	; 0x7c
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80021e8:	9323      	str	r3, [sp, #140]	; 0x8c
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80021ea:	9620      	str	r6, [sp, #128]	; 0x80
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80021ec:	e9cd 3421 	strd	r3, r4, [sp, #132]	; 0x84
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80021f0:	f001 fd50 	bl	8003c94 <HAL_DAC_ConfigChannel>
 80021f4:	4602      	mov	r2, r0
 80021f6:	2800      	cmp	r0, #0
 80021f8:	f040 808b 	bne.w	8002312 <main+0x40a>
  hlptim2.Instance = LPTIM2;
 80021fc:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <main+0x370>)
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80021fe:	f64f 74ff 	movw	r4, #65535	; 0xffff
  hlptim2.Instance = LPTIM2;
 8002202:	4d1e      	ldr	r5, [pc, #120]	; (800227c <main+0x374>)
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8002204:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8002208:	4618      	mov	r0, r3
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800220a:	615c      	str	r4, [r3, #20]
  hlptim2.Instance = LPTIM2;
 800220c:	601d      	str	r5, [r3, #0]
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800220e:	6299      	str	r1, [r3, #40]	; 0x28
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8002210:	e9c3 2201 	strd	r2, r2, [r3, #4]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8002214:	e9c3 2203 	strd	r2, r2, [r3, #12]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002218:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800221c:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8002220:	f003 f844 	bl	80052ac <HAL_LPTIM_Init>
 8002224:	2800      	cmp	r0, #0
 8002226:	d174      	bne.n	8002312 <main+0x40a>
  htim6.Instance = TIM6;
 8002228:	4c15      	ldr	r4, [pc, #84]	; (8002280 <main+0x378>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800222a:	2300      	movs	r3, #0
  htim6.Instance = TIM6;
 800222c:	4815      	ldr	r0, [pc, #84]	; (8002284 <main+0x37c>)
  htim6.Init.Period = 8191;
 800222e:	f641 71ff 	movw	r1, #8191	; 0x1fff
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002232:	2280      	movs	r2, #128	; 0x80
  htim6.Init.Prescaler = 0;
 8002234:	6063      	str	r3, [r4, #4]
  htim6.Instance = TIM6;
 8002236:	6020      	str	r0, [r4, #0]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002238:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223a:	930b      	str	r3, [sp, #44]	; 0x2c
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223c:	60a3      	str	r3, [r4, #8]
  htim6.Init.Period = 8191;
 800223e:	60e1      	str	r1, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002240:	61a2      	str	r2, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002242:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002246:	f005 fb2d 	bl	80078a4 <HAL_TIM_Base_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2800      	cmp	r0, #0
 800224e:	d160      	bne.n	8002312 <main+0x40a>
 8002250:	e020      	b.n	8002294 <main+0x38c>
 8002252:	bf00      	nop
 8002254:	e000ed00 	.word	0xe000ed00
 8002258:	58024400 	.word	0x58024400
 800225c:	58020000 	.word	0x58020000
 8002260:	11110000 	.word	0x11110000
 8002264:	58020800 	.word	0x58020800
 8002268:	40022000 	.word	0x40022000
 800226c:	24002b28 	.word	0x24002b28
 8002270:	24002a88 	.word	0x24002a88
 8002274:	40007400 	.word	0x40007400
 8002278:	240077f0 	.word	0x240077f0
 800227c:	58002400 	.word	0x58002400
 8002280:	24008e20 	.word	0x24008e20
 8002284:	40001000 	.word	0x40001000
 8002288:	24007784 	.word	0x24007784
 800228c:	14f00020 	.word	0x14f00020
 8002290:	40022100 	.word	0x40022100
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002294:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002296:	a90b      	add	r1, sp, #44	; 0x2c
 8002298:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229a:	930d      	str	r3, [sp, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800229c:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800229e:	f005 fc71 	bl	8007b84 <HAL_TIMEx_MasterConfigSynchronization>
 80022a2:	4603      	mov	r3, r0
 80022a4:	bba8      	cbnz	r0, 8002312 <main+0x40a>
  huart3.Instance = USART3;
 80022a6:	4e4e      	ldr	r6, [pc, #312]	; (80023e0 <main+0x4d8>)
  huart3.Init.BaudRate = 115200;
 80022a8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022ac:	220c      	movs	r2, #12
  huart3.Instance = USART3;
 80022ae:	4c4d      	ldr	r4, [pc, #308]	; (80023e4 <main+0x4dc>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022b0:	4630      	mov	r0, r6
  huart3.Init.Parity = UART_PARITY_NONE;
 80022b2:	6133      	str	r3, [r6, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022b4:	62b3      	str	r3, [r6, #40]	; 0x28
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022b6:	6172      	str	r2, [r6, #20]
  huart3.Init.BaudRate = 115200;
 80022b8:	e9c6 4100 	strd	r4, r1, [r6]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022bc:	e9c6 3302 	strd	r3, r3, [r6, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c0:	e9c6 3306 	strd	r3, r3, [r6, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022c4:	e9c6 3308 	strd	r3, r3, [r6, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022c8:	f006 f88e 	bl	80083e8 <HAL_UART_Init>
 80022cc:	4601      	mov	r1, r0
 80022ce:	bb00      	cbnz	r0, 8002312 <main+0x40a>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022d0:	4630      	mov	r0, r6
 80022d2:	f006 fbed 	bl	8008ab0 <HAL_UARTEx_SetTxFifoThreshold>
 80022d6:	4601      	mov	r1, r0
 80022d8:	b9d8      	cbnz	r0, 8002312 <main+0x40a>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022da:	4630      	mov	r0, r6
 80022dc:	f006 fc3a 	bl	8008b54 <HAL_UARTEx_SetRxFifoThreshold>
 80022e0:	b9b8      	cbnz	r0, 8002312 <main+0x40a>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80022e2:	4630      	mov	r0, r6
 80022e4:	f006 fbc6 	bl	8008a74 <HAL_UARTEx_DisableFifoMode>
 80022e8:	4604      	mov	r4, r0
 80022ea:	b990      	cbnz	r0, 8002312 <main+0x40a>
  MX_USB_DEVICE_Init();
 80022ec:	f007 faea 	bl	80098c4 <MX_USB_DEVICE_Init>
	MX_TIM6_Init_Custom_Rate();
 80022f0:	f7ff fde2 	bl	8001eb8 <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 80022f4:	4621      	mov	r1, r4
 80022f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80022fa:	483b      	ldr	r0, [pc, #236]	; (80023e8 <main+0x4e0>)
 80022fc:	f001 fa12 	bl	8003724 <HAL_ADCEx_Calibration_Start>
 8002300:	b938      	cbnz	r0, 8002312 <main+0x40a>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8002302:	4601      	mov	r1, r0
 8002304:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002308:	4838      	ldr	r0, [pc, #224]	; (80023ec <main+0x4e4>)
 800230a:	f001 fa0b 	bl	8003724 <HAL_ADCEx_Calibration_Start>
 800230e:	4605      	mov	r5, r0
 8002310:	b108      	cbz	r0, 8002316 <main+0x40e>
    Error_Handler();
 8002312:	f7ff fd1f 	bl	8001d54 <Error_Handler>
	volume= 0.1;
 8002316:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <main+0x4e8>)
	SetFstep(2);
 8002318:	2002      	movs	r0, #2
	volume= 0.1;
 800231a:	f8df b15c 	ldr.w	fp, [pc, #348]	; 8002478 <main+0x570>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 800231e:	f44f 6700 	mov.w	r7, #2048	; 0x800
	SamplingRate = ((160000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8002322:	4c34      	ldr	r4, [pc, #208]	; (80023f4 <main+0x4ec>)
	volume= 0.1;
 8002324:	f8cb 3000 	str.w	r3, [fp]
	SetFstep(2);
 8002328:	f7fe fbe0 	bl	8000aec <SetFstep>
	cwpitch = CWPITCH;
 800232c:	4a32      	ldr	r2, [pc, #200]	; (80023f8 <main+0x4f0>)
	AMindex  = LSBindex = 1;
 800232e:	2301      	movs	r3, #1
	cwpitch = CWPITCH;
 8002330:	4932      	ldr	r1, [pc, #200]	; (80023fc <main+0x4f4>)
	bw[AM]   = bw[LSB]  = Wide;
 8002332:	f04f 3c01 	mov.w	ip, #16843009	; 0x1010101
	agc[AM]  = agc[LSB] = Slow;
 8002336:	4832      	ldr	r0, [pc, #200]	; (8002400 <main+0x4f8>)
	cwpitch = CWPITCH;
 8002338:	6011      	str	r1, [r2, #0]
	os_time = 0;
 800233a:	4932      	ldr	r1, [pc, #200]	; (8002404 <main+0x4fc>)
	meanavg = 0.f;
 800233c:	4a32      	ldr	r2, [pc, #200]	; (8002408 <main+0x500>)
	os_time = 0;
 800233e:	600d      	str	r5, [r1, #0]
	meanavg = 0.f;
 8002340:	2100      	movs	r1, #0
 8002342:	6011      	str	r1, [r2, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8002344:	4a31      	ldr	r2, [pc, #196]	; (800240c <main+0x504>)
 8002346:	4932      	ldr	r1, [pc, #200]	; (8002410 <main+0x508>)
 8002348:	6011      	str	r1, [r2, #0]
	Muted   = false;
 800234a:	4a32      	ldr	r2, [pc, #200]	; (8002414 <main+0x50c>)
	AMindex  = LSBindex = 1;
 800234c:	4932      	ldr	r1, [pc, #200]	; (8002418 <main+0x510>)
	Muted   = false;
 800234e:	7015      	strb	r5, [r2, #0]
	AMindex  = LSBindex = 1;
 8002350:	4a32      	ldr	r2, [pc, #200]	; (800241c <main+0x514>)
 8002352:	800b      	strh	r3, [r1, #0]
 8002354:	8013      	strh	r3, [r2, #0]
	USBindex = CWindex  = 1;
 8002356:	4932      	ldr	r1, [pc, #200]	; (8002420 <main+0x518>)
 8002358:	4a32      	ldr	r2, [pc, #200]	; (8002424 <main+0x51c>)
 800235a:	800b      	strh	r3, [r1, #0]
 800235c:	8013      	strh	r3, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 800235e:	4932      	ldr	r1, [pc, #200]	; (8002428 <main+0x520>)
	agc[AM]  = agc[LSB] = Slow;
 8002360:	4a32      	ldr	r2, [pc, #200]	; (800242c <main+0x524>)
	bw[AM]   = bw[LSB]  = Wide;
 8002362:	f8c1 c000 	str.w	ip, [r1]
	agc[AM]  = agc[LSB] = Slow;
 8002366:	6010      	str	r0, [r2, #0]
	AGC_decay[Fast] = 0.9995f;
 8002368:	4b31      	ldr	r3, [pc, #196]	; (8002430 <main+0x528>)
 800236a:	4932      	ldr	r1, [pc, #200]	; (8002434 <main+0x52c>)
	AGC_decay[Slow] = 0.99995f;
 800236c:	4a32      	ldr	r2, [pc, #200]	; (8002438 <main+0x530>)
	Hangcount[Fast] = 2;
 800236e:	4833      	ldr	r0, [pc, #204]	; (800243c <main+0x534>)
 8002370:	4d33      	ldr	r5, [pc, #204]	; (8002440 <main+0x538>)
	AGC_decay[Fast] = 0.9995f;
 8002372:	6019      	str	r1, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 8002374:	605a      	str	r2, [r3, #4]
	AgcThreshold    = 1.92e-4f;
 8002376:	4933      	ldr	r1, [pc, #204]	; (8002444 <main+0x53c>)
 8002378:	4a33      	ldr	r2, [pc, #204]	; (8002448 <main+0x540>)
	SamplingRate = ((160000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 800237a:	4b34      	ldr	r3, [pc, #208]	; (800244c <main+0x544>)
	Hangcount[Fast] = 2;
 800237c:	6005      	str	r5, [r0, #0]
	SetFOutVHF(10000000);
 800237e:	4834      	ldr	r0, [pc, #208]	; (8002450 <main+0x548>)
	AgcThreshold    = 1.92e-4f;
 8002380:	6011      	str	r1, [r2, #0]
	SamplingRate = ((160000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8002382:	6023      	str	r3, [r4, #0]
	SetFOutVHF(10000000);
 8002384:	f7ff fcc4 	bl	8001d10 <SetFOutVHF>
	SamplingRate = SamplingRate * 4000000.f / 3999300.f; // Correct Xtal error
 8002388:	edd4 7a00 	vldr	s15, [r4]
 800238c:	eddf 6a31 	vldr	s13, [pc, #196]	; 8002454 <main+0x54c>
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002390:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002458 <main+0x550>
	SamplingRate = SamplingRate * 4000000.f / 3999300.f; // Correct Xtal error
 8002394:	ee67 7aa6 	vmul.f32	s15, s15, s13
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002398:	4b30      	ldr	r3, [pc, #192]	; (800245c <main+0x554>)
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 800239a:	4d31      	ldr	r5, [pc, #196]	; (8002460 <main+0x558>)
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 800239c:	ee27 7a87 	vmul.f32	s14, s15, s14
	SamplingRate = SamplingRate * 4000000.f / 3999300.f; // Correct Xtal error
 80023a0:	edc4 7a00 	vstr	s15, [r4]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 80023a4:	ed83 7a00 	vstr	s14, [r3]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 80023a8:	f7ff faf8 	bl	800199c <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 80023ac:	4b2d      	ldr	r3, [pc, #180]	; (8002464 <main+0x55c>)
 80023ae:	2204      	movs	r2, #4
 80023b0:	9701      	str	r7, [sp, #4]
 80023b2:	2140      	movs	r1, #64	; 0x40
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	482c      	ldr	r0, [pc, #176]	; (8002468 <main+0x560>)
 80023b8:	4b2c      	ldr	r3, [pc, #176]	; (800246c <main+0x564>)
 80023ba:	f007 fca9 	bl	8009d10 <arm_fir_decimate_init_f32>
 80023be:	7028      	strb	r0, [r5, #0]
	while(arc != ARM_MATH_SUCCESS)
 80023c0:	b100      	cbz	r0, 80023c4 <main+0x4bc>
 80023c2:	e7fe      	b.n	80023c2 <main+0x4ba>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 80023c4:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <main+0x568>)
 80023c6:	2204      	movs	r2, #4
 80023c8:	9701      	str	r7, [sp, #4]
 80023ca:	2140      	movs	r1, #64	; 0x40
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	4829      	ldr	r0, [pc, #164]	; (8002474 <main+0x56c>)
 80023d0:	4b26      	ldr	r3, [pc, #152]	; (800246c <main+0x564>)
 80023d2:	f007 fc9d 	bl	8009d10 <arm_fir_decimate_init_f32>
 80023d6:	7028      	strb	r0, [r5, #0]
	while(arc != ARM_MATH_SUCCESS)
 80023d8:	2800      	cmp	r0, #0
 80023da:	d04f      	beq.n	800247c <main+0x574>
 80023dc:	e7fe      	b.n	80023dc <main+0x4d4>
 80023de:	bf00      	nop
 80023e0:	24002a9c 	.word	0x24002a9c
 80023e4:	40004800 	.word	0x40004800
 80023e8:	24007784 	.word	0x24007784
 80023ec:	24002b28 	.word	0x24002b28
 80023f0:	3dcccccd 	.word	0x3dcccccd
 80023f4:	24004464 	.word	0x24004464
 80023f8:	24009e80 	.word	0x24009e80
 80023fc:	44228000 	.word	0x44228000
 8002400:	00010101 	.word	0x00010101
 8002404:	24009e8c 	.word	0x24009e8c
 8002408:	2400c3a0 	.word	0x2400c3a0
 800240c:	24008e70 	.word	0x24008e70
 8002410:	3f7cac08 	.word	0x3f7cac08
 8002414:	24007780 	.word	0x24007780
 8002418:	2400d7c0 	.word	0x2400d7c0
 800241c:	2400d7c2 	.word	0x2400d7c2
 8002420:	24008e74 	.word	0x24008e74
 8002424:	24008034 	.word	0x24008034
 8002428:	24008e78 	.word	0x24008e78
 800242c:	240077e8 	.word	0x240077e8
 8002430:	2400c3ac 	.word	0x2400c3ac
 8002434:	3f7fdf3b 	.word	0x3f7fdf3b
 8002438:	3f7ffcb9 	.word	0x3f7ffcb9
 800243c:	24009e84 	.word	0x24009e84
 8002440:	001e0002 	.word	0x001e0002
 8002444:	3949539c 	.word	0x3949539c
 8002448:	24009e7c 	.word	0x24009e7c
 800244c:	4b189680 	.word	0x4b189680
 8002450:	00989680 	.word	0x00989680
 8002454:	3f8005bd 	.word	0x3f8005bd
 8002458:	3b800000 	.word	0x3b800000
 800245c:	24008030 	.word	0x24008030
 8002460:	2400c3a4 	.word	0x2400c3a4
 8002464:	24004d6c 	.word	0x24004d6c
 8002468:	24000664 	.word	0x24000664
 800246c:	240000ec 	.word	0x240000ec
 8002470:	24009e90 	.word	0x24009e90
 8002474:	240088b4 	.word	0x240088b4
 8002478:	240043bc 	.word	0x240043bc
	Load_Presets();
 800247c:	f7fe f908 	bl	8000690 <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 8002480:	2001      	movs	r0, #1
 8002482:	f7fe f92f 	bl	80006e4 <Tune_Preset>
	DisplayStatus();    // Display status, it would not be shown until a user input was given
 8002486:	f7ff fb53 	bl	8001b30 <DisplayStatus>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 800248a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800248e:	4980      	ldr	r1, [pc, #512]	; (8002690 <main+0x788>)
 8002490:	4880      	ldr	r0, [pc, #512]	; (8002694 <main+0x78c>)
 8002492:	f001 f99b 	bl	80037cc <HAL_ADCEx_MultiModeStart_DMA>
 8002496:	4604      	mov	r4, r0
 8002498:	2800      	cmp	r0, #0
 800249a:	f47f af3a 	bne.w	8002312 <main+0x40a>
	HAL_TIM_Base_Start(&htim6);
 800249e:	487e      	ldr	r0, [pc, #504]	; (8002698 <main+0x790>)
 80024a0:	f005 fa92 	bl	80079c8 <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80024a4:	4621      	mov	r1, r4
 80024a6:	487d      	ldr	r0, [pc, #500]	; (800269c <main+0x794>)
 80024a8:	f001 faf6 	bl	8003a98 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 80024ac:	9400      	str	r4, [sp, #0]
 80024ae:	4621      	mov	r1, r4
 80024b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b4:	4a7a      	ldr	r2, [pc, #488]	; (80026a0 <main+0x798>)
 80024b6:	4879      	ldr	r0, [pc, #484]	; (800269c <main+0x794>)
 80024b8:	f001 fb1c 	bl	8003af4 <HAL_DAC_Start_DMA>
	__HAL_RCC_PLL2FRACN_ENABLE();
 80024bc:	4a79      	ldr	r2, [pc, #484]	; (80026a4 <main+0x79c>)
 80024be:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 80026b8 <main+0x7b0>
 80024c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80024c4:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 80026c0 <main+0x7b8>
 80024c8:	f043 0310 	orr.w	r3, r3, #16
 80024cc:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80026c4 <main+0x7bc>
 80024d0:	4f75      	ldr	r7, [pc, #468]	; (80026a8 <main+0x7a0>)
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 80024d2:	4d76      	ldr	r5, [pc, #472]	; (80026ac <main+0x7a4>)
			if (volume < 0)
 80024d4:	ed9f ba76 	vldr	s22, [pc, #472]	; 80026b0 <main+0x7a8>
	sprintf((char*)UartTXString, "S %-4.1f\r", SValue);
 80024d8:	4c76      	ldr	r4, [pc, #472]	; (80026b4 <main+0x7ac>)
	__HAL_RCC_PLL2FRACN_ENABLE();
 80024da:	62d3      	str	r3, [r2, #44]	; 0x2c
			volume += 0.1;
 80024dc:	ed9f ab66 	vldr	d10, [pc, #408]	; 8002678 <main+0x770>
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 80024e0:	ed9f 9b67 	vldr	d9, [pc, #412]	; 8002680 <main+0x778>
 80024e4:	ed9f 8b68 	vldr	d8, [pc, #416]	; 8002688 <main+0x780>
	__HAL_UART_SEND_REQ (&huart3, UART_RXDATA_FLUSH_REQUEST);
 80024e8:	6833      	ldr	r3, [r6, #0]
	__HAL_UART_CLEAR_OREFLAG (&huart3);
 80024ea:	f04f 0e08 	mov.w	lr, #8
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 80024ee:	2201      	movs	r2, #1
 80024f0:	4971      	ldr	r1, [pc, #452]	; (80026b8 <main+0x7b0>)
	__HAL_UART_SEND_REQ (&huart3, UART_RXDATA_FLUSH_REQUEST);
 80024f2:	f8d3 c018 	ldr.w	ip, [r3, #24]
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 80024f6:	4628      	mov	r0, r5
	__HAL_UART_SEND_REQ (&huart3, UART_RXDATA_FLUSH_REQUEST);
 80024f8:	ea4c 0c0e 	orr.w	ip, ip, lr
 80024fc:	f8c3 c018 	str.w	ip, [r3, #24]
	__HAL_UART_CLEAR_OREFLAG (&huart3);
 8002500:	f8c3 e020 	str.w	lr, [r3, #32]
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 8002504:	f005 fc5a 	bl	8007dbc <HAL_UART_Receive_IT>
 8002508:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
	if (result == HAL_OK)
 800250c:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8002510:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002514:	bba3      	cbnz	r3, 8002580 <main+0x678>
		switch (UartRXString[0])
 8002516:	f89a 3000 	ldrb.w	r3, [sl]
		UartRXDataReady = RESET;
 800251a:	f889 2000 	strb.w	r2, [r9]
		switch (UartRXString[0])
 800251e:	3b2b      	subs	r3, #43	; 0x2b
 8002520:	2b4c      	cmp	r3, #76	; 0x4c
 8002522:	d82b      	bhi.n	800257c <main+0x674>
 8002524:	e8df f003 	tbb	[pc, r3]
 8002528:	2a802a90 	.word	0x2a802a90
 800252c:	9da02a2a 	.word	0x9da02a2a
 8002530:	7074787c 	.word	0x7074787c
 8002534:	2a2a686c 	.word	0x2a2a686c
 8002538:	2a2a2a2a 	.word	0x2a2a2a2a
 800253c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002540:	2a2a2a2a 	.word	0x2a2a2a2a
 8002544:	2a2a2a2a 	.word	0x2a2a2a2a
 8002548:	2a2a2a2a 	.word	0x2a2a2a2a
 800254c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002550:	2a2a2a2a 	.word	0x2a2a2a2a
 8002554:	2a2a2a2a 	.word	0x2a2a2a2a
 8002558:	2a2a2a2a 	.word	0x2a2a2a2a
 800255c:	2a642a2a 	.word	0x2a642a2a
 8002560:	5c2a2a60 	.word	0x5c2a2a60
 8002564:	2a2a2a2a 	.word	0x2a2a2a2a
 8002568:	542a582a 	.word	0x542a582a
 800256c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002570:	2a502a4c 	.word	0x2a502a4c
 8002574:	27          	.byte	0x27
 8002575:	00          	.byte	0x00
			SetBW((Bwidth)Wide);  break;
 8002576:	2001      	movs	r0, #1
 8002578:	f7fe f994 	bl	80008a4 <SetBW>
		DisplayStatus();
 800257c:	f7ff fad8 	bl	8001b30 <DisplayStatus>
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002580:	ed98 0a00 	vldr	s0, [r8]
 8002584:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8002588:	ee20 0b09 	vmul.f64	d0, d0, d9
 800258c:	f009 fc48 	bl	800be20 <log10>
	sprintf((char*)UartTXString, "S %-4.1f\r", SValue);
 8002590:	494a      	ldr	r1, [pc, #296]	; (80026bc <main+0x7b4>)
 8002592:	4620      	mov	r0, r4
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002594:	ee20 0b08 	vmul.f64	d0, d0, d8
 8002598:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
	sprintf((char*)UartTXString, "S %-4.1f\r", SValue);
 800259c:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 80025a0:	ed87 0a00 	vstr	s0, [r7]
	sprintf((char*)UartTXString, "S %-4.1f\r", SValue);
 80025a4:	ec53 2b17 	vmov	r2, r3, d7
 80025a8:	f008 f906 	bl	800a7b8 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) UartTXString, strlen(UartTXString), 100);
 80025ac:	4620      	mov	r0, r4
 80025ae:	f7fd fe97 	bl	80002e0 <strlen>
 80025b2:	2364      	movs	r3, #100	; 0x64
 80025b4:	b282      	uxth	r2, r0
 80025b6:	4621      	mov	r1, r4
 80025b8:	4628      	mov	r0, r5
 80025ba:	f005 fb43 	bl	8007c44 <HAL_UART_Transmit>
 80025be:	e793      	b.n	80024e8 <main+0x5e0>
			SetAGC((Agctype)Slow);  break;
 80025c0:	2001      	movs	r0, #1
 80025c2:	f7fe f991 	bl	80008e8 <SetAGC>
 80025c6:	e7d9      	b.n	800257c <main+0x674>
			SetMode((Mode)USB); break;
 80025c8:	2002      	movs	r0, #2
 80025ca:	f7fe f9e3 	bl	8000994 <SetMode>
 80025ce:	e7d5      	b.n	800257c <main+0x674>
			SetBW((Bwidth)Narrow);  break;
 80025d0:	2000      	movs	r0, #0
 80025d2:	f7fe f967 	bl	80008a4 <SetBW>
 80025d6:	e7d1      	b.n	800257c <main+0x674>
			SetMode((Mode)LSB); break;
 80025d8:	2001      	movs	r0, #1
 80025da:	f7fe f9db 	bl	8000994 <SetMode>
 80025de:	e7cd      	b.n	800257c <main+0x674>
			SetAGC((Agctype)Fast);  break;
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7fe f981 	bl	80008e8 <SetAGC>
 80025e6:	e7c9      	b.n	800257c <main+0x674>
			SetMode((Mode)CW); break;
 80025e8:	2003      	movs	r0, #3
 80025ea:	f7fe f9d3 	bl	8000994 <SetMode>
 80025ee:	e7c5      	b.n	800257c <main+0x674>
			SetMode((Mode)AM); break;
 80025f0:	2000      	movs	r0, #0
 80025f2:	f7fe f9cf 	bl	8000994 <SetMode>
 80025f6:	e7c1      	b.n	800257c <main+0x674>
			SetFstep(0); break;
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7fe fa77 	bl	8000aec <SetFstep>
 80025fe:	e7bd      	b.n	800257c <main+0x674>
			SetFstep(1); break;
 8002600:	2001      	movs	r0, #1
 8002602:	f7fe fa73 	bl	8000aec <SetFstep>
 8002606:	e7b9      	b.n	800257c <main+0x674>
			SetFstep(2);  break;
 8002608:	2002      	movs	r0, #2
 800260a:	f7fe fa6f 	bl	8000aec <SetFstep>
 800260e:	e7b5      	b.n	800257c <main+0x674>
			SetFstep(3);  break;
 8002610:	2003      	movs	r0, #3
 8002612:	f7fe fa6b 	bl	8000aec <SetFstep>
 8002616:	e7b1      	b.n	800257c <main+0x674>
			SetFstep(4);  break;
 8002618:	2004      	movs	r0, #4
 800261a:	f7fe fa67 	bl	8000aec <SetFstep>
 800261e:	e7ad      	b.n	800257c <main+0x674>
			SetFstep(5);  break;
 8002620:	2005      	movs	r0, #5
 8002622:	f7fe fa63 	bl	8000aec <SetFstep>
 8002626:	e7a9      	b.n	800257c <main+0x674>
			volume -= 0.1;
 8002628:	ed9b 7a00 	vldr	s14, [fp]
 800262c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002630:	ee37 7b4a 	vsub.f64	d7, d7, d10
 8002634:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (volume < 0)
 8002638:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800263c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002640:	d415      	bmi.n	800266e <main+0x766>
			volume += 0.1;
 8002642:	ed8b 7a00 	vstr	s14, [fp]
 8002646:	e799      	b.n	800257c <main+0x674>
 8002648:	ed9b 7a00 	vldr	s14, [fp]
			if (volume > 1.0)
 800264c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			volume += 0.1;
 8002650:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002654:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8002658:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800265c:	fe87 7a66 	vminnm.f32	s14, s14, s13
 8002660:	e7ef      	b.n	8002642 <main+0x73a>
			FplusClicked(); break;
 8002662:	f7fe fa57 	bl	8000b14 <FplusClicked>
 8002666:	e789      	b.n	800257c <main+0x674>
			FminusClicked(); break;
 8002668:	f7fe fb38 	bl	8000cdc <FminusClicked>
 800266c:	e786      	b.n	800257c <main+0x674>
				volume = 0;
 800266e:	ed8b ba00 	vstr	s22, [fp]
 8002672:	e783      	b.n	800257c <main+0x674>
 8002674:	f3af 8000 	nop.w
 8002678:	9999999a 	.word	0x9999999a
 800267c:	3fb99999 	.word	0x3fb99999
 8002680:	00000000 	.word	0x00000000
 8002684:	409f4000 	.word	0x409f4000
 8002688:	9916f6a6 	.word	0x9916f6a6
 800268c:	400a93fc 	.word	0x400a93fc
 8002690:	2400cbc0 	.word	0x2400cbc0
 8002694:	24007784 	.word	0x24007784
 8002698:	24008e20 	.word	0x24008e20
 800269c:	24002a88 	.word	0x24002a88
 80026a0:	24006e80 	.word	0x24006e80
 80026a4:	58024400 	.word	0x58024400
 80026a8:	2400445c 	.word	0x2400445c
 80026ac:	24002a9c 	.word	0x24002a9c
 80026b0:	00000000 	.word	0x00000000
 80026b4:	24007680 	.word	0x24007680
 80026b8:	2400446c 	.word	0x2400446c
 80026bc:	0800f94c 	.word	0x0800f94c
 80026c0:	24000648 	.word	0x24000648
 80026c4:	240088b0 	.word	0x240088b0

080026c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	4c14      	ldr	r4, [pc, #80]	; (800271c <HAL_MspInit+0x54>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 80026cc:	2102      	movs	r1, #2
{
 80026ce:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 80026d0:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 80026d6:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	430b      	orrs	r3, r1
 80026dc:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 80026e0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80026e4:	400b      	ands	r3, r1
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 80026ea:	f001 f963 	bl	80039b4 <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80026ee:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80026f2:	2010      	movs	r0, #16
  __HAL_RCC_VREF_CLK_ENABLE();
 80026f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 80026fc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8002700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8002708:	f000 fb2e 	bl	8002d68 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 800270c:	f000 fb40 	bl	8002d90 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8002710:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002712:	b002      	add	sp, #8
 8002714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8002718:	f000 bb30 	b.w	8002d7c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 800271c:	58024400 	.word	0x58024400

08002720 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8002720:	4943      	ldr	r1, [pc, #268]	; (8002830 <HAL_ADC_MspInit+0x110>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002722:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8002724:	6802      	ldr	r2, [r0, #0]
{
 8002726:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8002728:	428a      	cmp	r2, r1
{
 800272a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002730:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8002734:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8002736:	d01f      	beq.n	8002778 <HAL_ADC_MspInit+0x58>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002738:	4b3e      	ldr	r3, [pc, #248]	; (8002834 <HAL_ADC_MspInit+0x114>)
 800273a:	429a      	cmp	r2, r3
 800273c:	d001      	beq.n	8002742 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800273e:	b00a      	add	sp, #40	; 0x28
 8002740:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002742:	4a3d      	ldr	r2, [pc, #244]	; (8002838 <HAL_ADC_MspInit+0x118>)
 8002744:	6813      	ldr	r3, [r2, #0]
 8002746:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002748:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800274a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800274c:	d061      	beq.n	8002812 <HAL_ADC_MspInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800274e:	4b3b      	ldr	r3, [pc, #236]	; (800283c <HAL_ADC_MspInit+0x11c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002750:	2502      	movs	r5, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002752:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002754:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275a:	4839      	ldr	r0, [pc, #228]	; (8002840 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275c:	432a      	orrs	r2, r5
 800275e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002766:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002768:	402b      	ands	r3, r5
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800276a:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800276c:	9304      	str	r3, [sp, #16]
 800276e:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002770:	f002 fc6c 	bl	800504c <HAL_GPIO_Init>
}
 8002774:	b00a      	add	sp, #40	; 0x28
 8002776:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002778:	4a2f      	ldr	r2, [pc, #188]	; (8002838 <HAL_ADC_MspInit+0x118>)
 800277a:	4605      	mov	r5, r0
 800277c:	6813      	ldr	r3, [r2, #0]
 800277e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002780:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002782:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002784:	d037      	beq.n	80027f6 <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	4b2d      	ldr	r3, [pc, #180]	; (800283c <HAL_ADC_MspInit+0x11c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002788:	2402      	movs	r4, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800278a:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278c:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002792:	482b      	ldr	r0, [pc, #172]	; (8002840 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002794:	4322      	orrs	r2, r4
 8002796:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800279a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800279e:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a0:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027a2:	9606      	str	r6, [sp, #24]
    hdma_adc1.Instance = DMA1_Stream0;
 80027a4:	4c27      	ldr	r4, [pc, #156]	; (8002844 <HAL_ADC_MspInit+0x124>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a6:	9302      	str	r3, [sp, #8]
 80027a8:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027aa:	f002 fc4f 	bl	800504c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 80027ae:	4826      	ldr	r0, [pc, #152]	; (8002848 <HAL_ADC_MspInit+0x128>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80027b0:	2109      	movs	r1, #9
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_adc1.Instance = DMA1_Stream0;
 80027ba:	6020      	str	r0, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80027c0:	6061      	str	r1, [r4, #4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027c2:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027c6:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80027c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027cc:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ce:	2300      	movs	r3, #0
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027d0:	61a0      	str	r0, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027d2:	4620      	mov	r0, r4
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027d4:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80027d6:	e9c4 1207 	strd	r1, r2, [r4, #28]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027da:	e9c4 3302 	strd	r3, r3, [r4, #8]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027de:	f001 fba1 	bl	8003f24 <HAL_DMA_Init>
 80027e2:	b918      	cbnz	r0, 80027ec <HAL_ADC_MspInit+0xcc>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027e4:	64ec      	str	r4, [r5, #76]	; 0x4c
 80027e6:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80027e8:	b00a      	add	sp, #40	; 0x28
 80027ea:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80027ec:	f7ff fab2 	bl	8001d54 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027f0:	64ec      	str	r4, [r5, #76]	; 0x4c
 80027f2:	63a5      	str	r5, [r4, #56]	; 0x38
 80027f4:	e7f8      	b.n	80027e8 <HAL_ADC_MspInit+0xc8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <HAL_ADC_MspInit+0x11c>)
 80027f8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80027fc:	f042 0220 	orr.w	r2, r2, #32
 8002800:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8002804:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	9301      	str	r3, [sp, #4]
 800280e:	9b01      	ldr	r3, [sp, #4]
 8002810:	e7b9      	b.n	8002786 <HAL_ADC_MspInit+0x66>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_ADC_MspInit+0x11c>)
 8002814:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8002818:	f042 0220 	orr.w	r2, r2, #32
 800281c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8002820:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	9303      	str	r3, [sp, #12]
 800282a:	9b03      	ldr	r3, [sp, #12]
 800282c:	e78f      	b.n	800274e <HAL_ADC_MspInit+0x2e>
 800282e:	bf00      	nop
 8002830:	40022000 	.word	0x40022000
 8002834:	40022100 	.word	0x40022100
 8002838:	2400064c 	.word	0x2400064c
 800283c:	58024400 	.word	0x58024400
 8002840:	58020400 	.word	0x58020400
 8002844:	24008838 	.word	0x24008838
 8002848:	40020010 	.word	0x40020010

0800284c <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 800284c:	4b2d      	ldr	r3, [pc, #180]	; (8002904 <HAL_DAC_MspInit+0xb8>)
 800284e:	6802      	ldr	r2, [r0, #0]
{
 8002850:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hdac->Instance==DAC1)
 8002852:	429a      	cmp	r2, r3
{
 8002854:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002856:	f04f 0400 	mov.w	r4, #0
 800285a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800285e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8002862:	9407      	str	r4, [sp, #28]
  if(hdac->Instance==DAC1)
 8002864:	d001      	beq.n	800286a <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002866:	b009      	add	sp, #36	; 0x24
 8002868:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 800286a:	4b27      	ldr	r3, [pc, #156]	; (8002908 <HAL_DAC_MspInit+0xbc>)
 800286c:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800286e:	2010      	movs	r0, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002870:	2503      	movs	r5, #3
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002872:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002876:	a903      	add	r1, sp, #12
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002878:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_DAC12_CLK_ENABLE();
 800287c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002880:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002884:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002888:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800288c:	9201      	str	r2, [sp, #4]
 800288e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002890:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002894:	f042 0201 	orr.w	r2, r2, #1
 8002898:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800289c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028a0:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a2:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a6:	4819      	ldr	r0, [pc, #100]	; (800290c <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028a8:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028aa:	9302      	str	r3, [sp, #8]
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 80028ac:	4d18      	ldr	r5, [pc, #96]	; (8002910 <HAL_DAC_MspInit+0xc4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ae:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b0:	f002 fbcc 	bl	800504c <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 80028b4:	4b17      	ldr	r3, [pc, #92]	; (8002914 <HAL_DAC_MspInit+0xc8>)
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028b6:	2040      	movs	r0, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80028b8:	f04f 0c43 	mov.w	ip, #67	; 0x43
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 80028c4:	602b      	str	r3, [r5, #0]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80028c6:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ca:	60ec      	str	r4, [r5, #12]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028cc:	e9c5 c001 	strd	ip, r0, [r5, #4]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80028d0:	4628      	mov	r0, r5
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028d2:	e9c5 4408 	strd	r4, r4, [r5, #32]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028d6:	e9c5 7104 	strd	r7, r1, [r5, #16]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80028da:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80028de:	f001 fb21 	bl	8003f24 <HAL_DMA_Init>
 80028e2:	b958      	cbnz	r0, 80028fc <HAL_DAC_MspInit+0xb0>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80028e4:	60b5      	str	r5, [r6, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2101      	movs	r1, #1
 80028ea:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80028ec:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80028ee:	f001 f861 	bl	80039b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028f2:	2036      	movs	r0, #54	; 0x36
 80028f4:	f001 f894 	bl	8003a20 <HAL_NVIC_EnableIRQ>
}
 80028f8:	b009      	add	sp, #36	; 0x24
 80028fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80028fc:	f7ff fa2a 	bl	8001d54 <Error_Handler>
 8002900:	e7f0      	b.n	80028e4 <HAL_DAC_MspInit+0x98>
 8002902:	bf00      	nop
 8002904:	40007400 	.word	0x40007400
 8002908:	58024400 	.word	0x58024400
 800290c:	58020000 	.word	0x58020000
 8002910:	240043c4 	.word	0x240043c4
 8002914:	40020028 	.word	0x40020028

08002918 <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 8002918:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291a:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 800291c:	4a17      	ldr	r2, [pc, #92]	; (800297c <HAL_LPTIM_MspInit+0x64>)
{
 800291e:	b570      	push	{r4, r5, r6, lr}
  if(hlptim->Instance==LPTIM2)
 8002920:	4291      	cmp	r1, r2
{
 8002922:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002928:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800292c:	9307      	str	r3, [sp, #28]
  if(hlptim->Instance==LPTIM2)
 800292e:	d001      	beq.n	8002934 <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8002930:	b008      	add	sp, #32
 8002932:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8002934:	4b12      	ldr	r3, [pc, #72]	; (8002980 <HAL_LPTIM_MspInit+0x68>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002938:	f44f 6680 	mov.w	r6, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293c:	a903      	add	r1, sp, #12
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800293e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8002942:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002944:	480f      	ldr	r0, [pc, #60]	; (8002984 <HAL_LPTIM_MspInit+0x6c>)
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8002946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800294e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002952:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002956:	9201      	str	r2, [sp, #4]
 8002958:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800295e:	432a      	orrs	r2, r5
 8002960:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002968:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296a:	402b      	ands	r3, r5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 800296e:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002970:	9302      	str	r3, [sp, #8]
 8002972:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002974:	f002 fb6a 	bl	800504c <HAL_GPIO_Init>
}
 8002978:	b008      	add	sp, #32
 800297a:	bd70      	pop	{r4, r5, r6, pc}
 800297c:	58002400 	.word	0x58002400
 8002980:	58024400 	.word	0x58024400
 8002984:	58020400 	.word	0x58020400

08002988 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8002988:	6802      	ldr	r2, [r0, #0]
 800298a:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <HAL_TIM_Base_MspInit+0x40>)
 800298c:	429a      	cmp	r2, r3
 800298e:	d000      	beq.n	8002992 <HAL_TIM_Base_MspInit+0xa>
 8002990:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002992:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <HAL_TIM_Base_MspInit+0x44>)
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002994:	2200      	movs	r2, #0
 8002996:	2101      	movs	r1, #1
 8002998:	2036      	movs	r0, #54	; 0x36
{
 800299a:	b510      	push	{r4, lr}
    __HAL_RCC_TIM6_CLK_ENABLE();
 800299c:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
{
 80029a0:	b082      	sub	sp, #8
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029a2:	f044 0410 	orr.w	r4, r4, #16
 80029a6:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 80029aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80029b6:	f000 fffd 	bl	80039b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029ba:	2036      	movs	r0, #54	; 0x36
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80029bc:	b002      	add	sp, #8
 80029be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029c2:	f001 b82d 	b.w	8003a20 <HAL_NVIC_EnableIRQ>
 80029c6:	bf00      	nop
 80029c8:	40001000 	.word	0x40001000
 80029cc:	58024400 	.word	0x58024400

080029d0 <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART3)
 80029d0:	6802      	ldr	r2, [r0, #0]
 80029d2:	4b28      	ldr	r3, [pc, #160]	; (8002a74 <HAL_UART_MspInit+0xa4>)
{
 80029d4:	b570      	push	{r4, r5, r6, lr}
  if(huart->Instance==USART3)
 80029d6:	429a      	cmp	r2, r3
{
 80029d8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029da:	f04f 0400 	mov.w	r4, #0
 80029de:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80029e2:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80029e6:	9407      	str	r4, [sp, #28]
  if(huart->Instance==USART3)
 80029e8:	d001      	beq.n	80029ee <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029ea:	b008      	add	sp, #32
 80029ec:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 80029ee:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_UART_MspInit+0xa8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029f6:	2507      	movs	r5, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 80029f8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fc:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 80029fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a02:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002a06:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002a0a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002a0e:	9200      	str	r2, [sp, #0]
 8002a10:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a16:	4332      	orrs	r2, r6
 8002a18:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002a1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a20:	4032      	ands	r2, r6
 8002a22:	9201      	str	r2, [sp, #4]
 8002a24:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a26:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a2a:	f042 0208 	orr.w	r2, r2, #8
 8002a2e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a36:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a38:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3c:	480f      	ldr	r0, [pc, #60]	; (8002a7c <HAL_UART_MspInit+0xac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a40:	9302      	str	r3, [sp, #8]
 8002a42:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a44:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a46:	f002 fb01 	bl	800504c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a4e:	a903      	add	r1, sp, #12
 8002a50:	480b      	ldr	r0, [pc, #44]	; (8002a80 <HAL_UART_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a52:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a56:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a58:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a5c:	f002 faf6 	bl	800504c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002a60:	4622      	mov	r2, r4
 8002a62:	2101      	movs	r1, #1
 8002a64:	2027      	movs	r0, #39	; 0x27
 8002a66:	f000 ffa5 	bl	80039b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a6a:	2027      	movs	r0, #39	; 0x27
 8002a6c:	f000 ffd8 	bl	8003a20 <HAL_NVIC_EnableIRQ>
}
 8002a70:	b008      	add	sp, #32
 8002a72:	bd70      	pop	{r4, r5, r6, pc}
 8002a74:	40004800 	.word	0x40004800
 8002a78:	58024400 	.word	0x58024400
 8002a7c:	58020400 	.word	0x58020400
 8002a80:	58020c00 	.word	0x58020c00

08002a84 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop

08002a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a88:	e7fe      	b.n	8002a88 <HardFault_Handler>
 8002a8a:	bf00      	nop

08002a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a8c:	e7fe      	b.n	8002a8c <MemManage_Handler>
 8002a8e:	bf00      	nop

08002a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a90:	e7fe      	b.n	8002a90 <BusFault_Handler>
 8002a92:	bf00      	nop

08002a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a94:	e7fe      	b.n	8002a94 <UsageFault_Handler>
 8002a96:	bf00      	nop

08002a98 <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 8002a98:	f000 b8e2 	b.w	8002c60 <ADC3_IRQHandler>

08002a9c <DebugMon_Handler>:
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop

08002aa0 <PendSV_Handler>:
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop

08002aa4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aa4:	f000 b936 	b.w	8002d14 <HAL_IncTick>

08002aa8 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002aa8:	4801      	ldr	r0, [pc, #4]	; (8002ab0 <DMA1_Stream0_IRQHandler+0x8>)
 8002aaa:	f001 bf93 	b.w	80049d4 <HAL_DMA_IRQHandler>
 8002aae:	bf00      	nop
 8002ab0:	24008838 	.word	0x24008838

08002ab4 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002ab4:	4801      	ldr	r0, [pc, #4]	; (8002abc <DMA1_Stream1_IRQHandler+0x8>)
 8002ab6:	f001 bf8d 	b.w	80049d4 <HAL_DMA_IRQHandler>
 8002aba:	bf00      	nop
 8002abc:	240043c4 	.word	0x240043c4

08002ac0 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ac0:	4801      	ldr	r0, [pc, #4]	; (8002ac8 <USART3_IRQHandler+0x8>)
 8002ac2:	f005 bb33 	b.w	800812c <HAL_UART_IRQHandler>
 8002ac6:	bf00      	nop
 8002ac8:	24002a9c 	.word	0x24002a9c

08002acc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002acc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ad0:	f002 bbde 	b.w	8005290 <HAL_GPIO_EXTI_IRQHandler>

08002ad4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ad4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8002ad6:	4804      	ldr	r0, [pc, #16]	; (8002ae8 <TIM6_DAC_IRQHandler+0x14>)
 8002ad8:	f001 f8a8 	bl	8003c2c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002adc:	4803      	ldr	r0, [pc, #12]	; (8002aec <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ade:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8002ae2:	f004 bf97 	b.w	8007a14 <HAL_TIM_IRQHandler>
 8002ae6:	bf00      	nop
 8002ae8:	24002a88 	.word	0x24002a88
 8002aec:	24008e20 	.word	0x24008e20

08002af0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002af0:	490d      	ldr	r1, [pc, #52]	; (8002b28 <_sbrk+0x38>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af2:	4a0e      	ldr	r2, [pc, #56]	; (8002b2c <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8002af4:	680b      	ldr	r3, [r1, #0]
{
 8002af6:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af8:	4c0d      	ldr	r4, [pc, #52]	; (8002b30 <_sbrk+0x40>)
 8002afa:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002afc:	b12b      	cbz	r3, 8002b0a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002afe:	4418      	add	r0, r3
 8002b00:	4290      	cmp	r0, r2
 8002b02:	d808      	bhi.n	8002b16 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002b04:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002b0a:	4c0a      	ldr	r4, [pc, #40]	; (8002b34 <_sbrk+0x44>)
 8002b0c:	4623      	mov	r3, r4
 8002b0e:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002b10:	4418      	add	r0, r3
 8002b12:	4290      	cmp	r0, r2
 8002b14:	d9f6      	bls.n	8002b04 <_sbrk+0x14>
    errno = ENOMEM;
 8002b16:	f007 f919 	bl	8009d4c <__errno>
 8002b1a:	220c      	movs	r2, #12
    return (void *)-1;
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295
    errno = ENOMEM;
 8002b20:	6002      	str	r2, [r0, #0]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	bd10      	pop	{r4, pc}
 8002b26:	bf00      	nop
 8002b28:	24000650 	.word	0x24000650
 8002b2c:	24080000 	.word	0x24080000
 8002b30:	00000400 	.word	0x00000400
 8002b34:	2400f0a0 	.word	0x2400f0a0

08002b38 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b38:	492a      	ldr	r1, [pc, #168]	; (8002be4 <SystemInit+0xac>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b3a:	4a2b      	ldr	r2, [pc, #172]	; (8002be8 <SystemInit+0xb0>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b3c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8002b44:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b4a:	6813      	ldr	r3, [r2, #0]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	2b06      	cmp	r3, #6
 8002b52:	d805      	bhi.n	8002b60 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b54:	6813      	ldr	r3, [r2, #0]
 8002b56:	f023 030f 	bic.w	r3, r3, #15
 8002b5a:	f043 0307 	orr.w	r3, r3, #7
 8002b5e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002b60:	4b22      	ldr	r3, [pc, #136]	; (8002bec <SystemInit+0xb4>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b62:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002b64:	4a22      	ldr	r2, [pc, #136]	; (8002bf0 <SystemInit+0xb8>)
  RCC->CR |= RCC_CR_HSION;
 8002b66:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b68:	481f      	ldr	r0, [pc, #124]	; (8002be8 <SystemInit+0xb0>)
  RCC->CR |= RCC_CR_HSION;
 8002b6a:	f041 0101 	orr.w	r1, r1, #1
 8002b6e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002b70:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8002b72:	6819      	ldr	r1, [r3, #0]
 8002b74:	400a      	ands	r2, r1
 8002b76:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b78:	6803      	ldr	r3, [r0, #0]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	2b07      	cmp	r3, #7
 8002b80:	d905      	bls.n	8002b8e <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b82:	6803      	ldr	r3, [r0, #0]
 8002b84:	f023 030f 	bic.w	r3, r3, #15
 8002b88:	f043 0307 	orr.w	r3, r3, #7
 8002b8c:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002b8e:	4b17      	ldr	r3, [pc, #92]	; (8002bec <SystemInit+0xb4>)
 8002b90:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002b92:	4918      	ldr	r1, [pc, #96]	; (8002bf4 <SystemInit+0xbc>)
  RCC->PLLCKSELR = 0x02020200;
 8002b94:	4c18      	ldr	r4, [pc, #96]	; (8002bf8 <SystemInit+0xc0>)
  RCC->PLLCFGR = 0x01FF0000;
 8002b96:	4819      	ldr	r0, [pc, #100]	; (8002bfc <SystemInit+0xc4>)
  RCC->D1CFGR = 0x00000000;
 8002b98:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8002b9a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8002b9c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8002b9e:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8002ba0:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8002ba2:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ba4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ba6:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ba8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002baa:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002bac:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002bae:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002bb0:	4c13      	ldr	r4, [pc, #76]	; (8002c00 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 8002bb2:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002bb6:	4913      	ldr	r1, [pc, #76]	; (8002c04 <SystemInit+0xcc>)
  RCC->CR &= 0xFFFBFFFFU;
 8002bb8:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8002bba:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	4019      	ands	r1, r3
 8002bc0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8002bc4:	d202      	bcs.n	8002bcc <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <SystemInit+0xd0>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002bcc:	490f      	ldr	r1, [pc, #60]	; (8002c0c <SystemInit+0xd4>)
 8002bce:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002bd2:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <SystemInit+0xac>)
 8002bd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002bd8:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002bda:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002bde:	609a      	str	r2, [r3, #8]
}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000ed00 	.word	0xe000ed00
 8002be8:	52002000 	.word	0x52002000
 8002bec:	58024400 	.word	0x58024400
 8002bf0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002bf4:	01010280 	.word	0x01010280
 8002bf8:	02020200 	.word	0x02020200
 8002bfc:	01ff0000 	.word	0x01ff0000
 8002c00:	5c001000 	.word	0x5c001000
 8002c04:	ffff0000 	.word	0xffff0000
 8002c08:	51008108 	.word	0x51008108
 8002c0c:	52004000 	.word	0x52004000

08002c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c48 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002c14:	f7ff ff90 	bl	8002b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c1a:	e003      	b.n	8002c24 <LoopCopyDataInit>

08002c1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002c1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c22:	3104      	adds	r1, #4

08002c24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c24:	480a      	ldr	r0, [pc, #40]	; (8002c50 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002c28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c2c:	d3f6      	bcc.n	8002c1c <CopyDataInit>
  ldr  r2, =_sbss
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002c30:	e002      	b.n	8002c38 <LoopFillZerobss>

08002c32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c34:	f842 3b04 	str.w	r3, [r2], #4

08002c38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c38:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8002c3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c3c:	d3f9      	bcc.n	8002c32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c3e:	f007 f88b 	bl	8009d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c42:	f7ff f961 	bl	8001f08 <main>
  bx  lr    
 8002c46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c48:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002c4c:	0800fea0 	.word	0x0800fea0
  ldr  r0, =_sdata
 8002c50:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002c54:	2400054c 	.word	0x2400054c
  ldr  r2, =_sbss
 8002c58:	24000560 	.word	0x24000560
  ldr  r3, = _ebss
 8002c5c:	2400f0a0 	.word	0x2400f0a0

08002c60 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c60:	e7fe      	b.n	8002c60 <ADC3_IRQHandler>
	...

08002c64 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <HAL_InitTick+0x40>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	b90b      	cbnz	r3, 8002c6e <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8002c6a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002c6c:	4770      	bx	lr
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c72:	490d      	ldr	r1, [pc, #52]	; (8002ca8 <HAL_InitTick+0x44>)
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
{
 8002c78:	b510      	push	{r4, lr}
 8002c7a:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c7c:	6808      	ldr	r0, [r1, #0]
 8002c7e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c82:	f000 fedb 	bl	8003a3c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c86:	2c0f      	cmp	r4, #15
 8002c88:	d800      	bhi.n	8002c8c <HAL_InitTick+0x28>
 8002c8a:	b108      	cbz	r0, 8002c90 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8002c8c:	2001      	movs	r0, #1
}
 8002c8e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c90:	2200      	movs	r2, #0
 8002c92:	4621      	mov	r1, r4
 8002c94:	f04f 30ff 	mov.w	r0, #4294967295
 8002c98:	f000 fe8c 	bl	80039b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <HAL_InitTick+0x48>)
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	601c      	str	r4, [r3, #0]
}
 8002ca2:	bd10      	pop	{r4, pc}
 8002ca4:	240001f4 	.word	0x240001f4
 8002ca8:	240001ec 	.word	0x240001ec
 8002cac:	240001f8 	.word	0x240001f8

08002cb0 <HAL_Init>:
{
 8002cb0:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb2:	2003      	movs	r0, #3
{
 8002cb4:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb6:	f000 fe69 	bl	800398c <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cba:	4c12      	ldr	r4, [pc, #72]	; (8002d04 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cbc:	f003 f8f8 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 8002cc0:	4a11      	ldr	r2, [pc, #68]	; (8002d08 <HAL_Init+0x58>)
 8002cc2:	4912      	ldr	r1, [pc, #72]	; (8002d0c <HAL_Init+0x5c>)
 8002cc4:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cc6:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cc8:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8002ccc:	4d10      	ldr	r5, [pc, #64]	; (8002d10 <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cce:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cd2:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cd4:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cd6:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cda:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cde:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ce2:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ce4:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8002ce8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cea:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cec:	f7ff ffba 	bl	8002c64 <HAL_InitTick>
 8002cf0:	b110      	cbz	r0, 8002cf8 <HAL_Init+0x48>
    return HAL_ERROR;
 8002cf2:	2001      	movs	r0, #1
}
 8002cf4:	b003      	add	sp, #12
 8002cf6:	bd30      	pop	{r4, r5, pc}
 8002cf8:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 8002cfa:	f7ff fce5 	bl	80026c8 <HAL_MspInit>
  return HAL_OK;
 8002cfe:	9801      	ldr	r0, [sp, #4]
}
 8002d00:	b003      	add	sp, #12
 8002d02:	bd30      	pop	{r4, r5, pc}
 8002d04:	240001f0 	.word	0x240001f0
 8002d08:	58024400 	.word	0x58024400
 8002d0c:	0800f958 	.word	0x0800f958
 8002d10:	240001ec 	.word	0x240001ec

08002d14 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002d14:	4a03      	ldr	r2, [pc, #12]	; (8002d24 <HAL_IncTick+0x10>)
 8002d16:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <HAL_IncTick+0x14>)
 8002d18:	6811      	ldr	r1, [r2, #0]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	440b      	add	r3, r1
 8002d1e:	6013      	str	r3, [r2, #0]
}
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	24004460 	.word	0x24004460
 8002d28:	240001f4 	.word	0x240001f4

08002d2c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002d2c:	4b01      	ldr	r3, [pc, #4]	; (8002d34 <HAL_GetTick+0x8>)
 8002d2e:	6818      	ldr	r0, [r3, #0]
}
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	24004460 	.word	0x24004460

08002d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d38:	b538      	push	{r3, r4, r5, lr}
 8002d3a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002d3c:	f7ff fff6 	bl	8002d2c <HAL_GetTick>
 8002d40:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d42:	1c63      	adds	r3, r4, #1
 8002d44:	d002      	beq.n	8002d4c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d46:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <HAL_Delay+0x20>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d4c:	f7ff ffee 	bl	8002d2c <HAL_GetTick>
 8002d50:	1b40      	subs	r0, r0, r5
 8002d52:	42a0      	cmp	r0, r4
 8002d54:	d3fa      	bcc.n	8002d4c <HAL_Delay+0x14>
  {
  }
}
 8002d56:	bd38      	pop	{r3, r4, r5, pc}
 8002d58:	240001f4 	.word	0x240001f4

08002d5c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8002d5c:	4b01      	ldr	r3, [pc, #4]	; (8002d64 <HAL_GetREVID+0x8>)
 8002d5e:	6818      	ldr	r0, [r3, #0]
}
 8002d60:	0c00      	lsrs	r0, r0, #16
 8002d62:	4770      	bx	lr
 8002d64:	5c001000 	.word	0x5c001000

08002d68 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002d68:	4a03      	ldr	r2, [pc, #12]	; (8002d78 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 8002d6a:	6813      	ldr	r3, [r2, #0]
 8002d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d70:	4318      	orrs	r0, r3
 8002d72:	6010      	str	r0, [r2, #0]
}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	58003c00 	.word	0x58003c00

08002d7c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002d7c:	4a03      	ldr	r2, [pc, #12]	; (8002d8c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8002d7e:	6813      	ldr	r3, [r2, #0]
 8002d80:	f023 0302 	bic.w	r3, r3, #2
 8002d84:	4318      	orrs	r0, r3
 8002d86:	6010      	str	r0, [r2, #0]
}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	58003c00 	.word	0x58003c00

08002d90 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002d90:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_SYSCFG_EnableVREFBUF+0x30>)
 8002d94:	681a      	ldr	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8002d96:	461c      	mov	r4, r3
  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002d98:	f042 0201 	orr.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002d9e:	f7ff ffc5 	bl	8002d2c <HAL_GetTick>
 8002da2:	4605      	mov	r5, r0
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8002da4:	e004      	b.n	8002db0 <HAL_SYSCFG_EnableVREFBUF+0x20>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8002da6:	f7ff ffc1 	bl	8002d2c <HAL_GetTick>
 8002daa:	1b40      	subs	r0, r0, r5
 8002dac:	280a      	cmp	r0, #10
 8002dae:	d804      	bhi.n	8002dba <HAL_SYSCFG_EnableVREFBUF+0x2a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	071b      	lsls	r3, r3, #28
 8002db4:	d5f7      	bpl.n	8002da6 <HAL_SYSCFG_EnableVREFBUF+0x16>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8002db6:	2000      	movs	r0, #0
}
 8002db8:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8002dba:	2003      	movs	r0, #3
}
 8002dbc:	bd38      	pop	{r3, r4, r5, pc}
 8002dbe:	bf00      	nop
 8002dc0:	58003c00 	.word	0x58003c00

08002dc4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002dc6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002dc8:	f7fe fe70 	bl	8001aac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dcc:	bd08      	pop	{r3, pc}
 8002dce:	bf00      	nop

08002dd0 <HAL_ADC_ErrorCallback>:
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop

08002dd4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dd4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002dd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dd8:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 8002dde:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002de0:	d11d      	bne.n	8002e1e <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002de2:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de8:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002dea:	680a      	ldr	r2, [r1, #0]
 8002dec:	f012 0f08 	tst.w	r2, #8
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002df0:	68ca      	ldr	r2, [r1, #12]
 8002df2:	d01b      	beq.n	8002e2c <ADC_DMAConvCplt+0x58>
 8002df4:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002df8:	d10d      	bne.n	8002e16 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002dfa:	68ca      	ldr	r2, [r1, #12]
 8002dfc:	0494      	lsls	r4, r2, #18
 8002dfe:	d40a      	bmi.n	8002e16 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e06:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e0a:	04d1      	lsls	r1, r2, #19
 8002e0c:	d403      	bmi.n	8002e16 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e10:	f042 0201 	orr.w	r2, r2, #1
 8002e14:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fe2a 	bl	8001a70 <HAL_ADC_ConvCpltCallback>
}
 8002e1c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e1e:	06d2      	lsls	r2, r2, #27
 8002e20:	d407      	bmi.n	8002e32 <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2a:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002e2c:	0790      	lsls	r0, r2, #30
 8002e2e:	d1f2      	bne.n	8002e16 <ADC_DMAConvCplt+0x42>
 8002e30:	e7e6      	b.n	8002e00 <ADC_DMAConvCplt+0x2c>
      HAL_ADC_ErrorCallback(hadc);
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ffcc 	bl	8002dd0 <HAL_ADC_ErrorCallback>
}
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	bf00      	nop

08002e3c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3e:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e42:	4618      	mov	r0, r3
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e48:	655a      	str	r2, [r3, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e4c:	f042 0204 	orr.w	r2, r2, #4
 8002e50:	659a      	str	r2, [r3, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc);
 8002e52:	f7ff ffbd 	bl	8002dd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e56:	bd08      	pop	{r3, pc}

08002e58 <HAL_ADC_ConfigChannel>:
{
 8002e58:	4602      	mov	r2, r0
  __IO uint32_t wait_loop_index = 0;
 8002e5a:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8002e5c:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
{
 8002e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8002e64:	2b01      	cmp	r3, #1
{
 8002e66:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8002e68:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8002e6a:	f000 8134 	beq.w	80030d6 <HAL_ADC_ConfigChannel+0x27e>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e6e:	6813      	ldr	r3, [r2, #0]
  __HAL_LOCK(hadc);
 8002e70:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e72:	689c      	ldr	r4, [r3, #8]
 8002e74:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
 8002e78:	0767      	lsls	r7, r4, #29
 8002e7a:	d443      	bmi.n	8002f04 <HAL_ADC_ConfigChannel+0xac>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002e7c:	680c      	ldr	r4, [r1, #0]
 8002e7e:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8002e82:	f3c4 6784 	ubfx	r7, r4, #26, #5
 8002e86:	2d00      	cmp	r5, #0
 8002e88:	f040 80a5 	bne.w	8002fd6 <HAL_ADC_ConfigChannel+0x17e>
 8002e8c:	40b8      	lsls	r0, r7
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e8e:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8002e90:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002e94:	69dd      	ldr	r5, [r3, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e96:	09a6      	lsrs	r6, r4, #6
  MODIFY_REG(*preg,
 8002e98:	ea04 040c 	and.w	r4, r4, ip
 8002e9c:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e9e:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8002ea2:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8002ea6:	fa0c fc04 	lsl.w	ip, ip, r4
 8002eaa:	61d8      	str	r0, [r3, #28]
 8002eac:	fa07 f404 	lsl.w	r4, r7, r4
 8002eb0:	5970      	ldr	r0, [r6, r5]
 8002eb2:	ea20 000c 	bic.w	r0, r0, ip
 8002eb6:	4320      	orrs	r0, r4
 8002eb8:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eba:	6898      	ldr	r0, [r3, #8]
 8002ebc:	0746      	lsls	r6, r0, #29
 8002ebe:	f100 8088 	bmi.w	8002fd2 <HAL_ADC_ConfigChannel+0x17a>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ec2:	689d      	ldr	r5, [r3, #8]
 8002ec4:	f015 0508 	ands.w	r5, r5, #8
 8002ec8:	d026      	beq.n	8002f18 <HAL_ADC_ConfigChannel+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002eca:	6898      	ldr	r0, [r3, #8]
 8002ecc:	07c5      	lsls	r5, r0, #31
 8002ece:	d417      	bmi.n	8002f00 <HAL_ADC_ConfigChannel+0xa8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ed0:	68ce      	ldr	r6, [r1, #12]
 8002ed2:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8002ed4:	f006 0718 	and.w	r7, r6, #24
 8002ed8:	48bc      	ldr	r0, [pc, #752]	; (80031cc <HAL_ADC_ConfigChannel+0x374>)
 8002eda:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
 8002ede:	40f8      	lsrs	r0, r7
 8002ee0:	f3c4 0713 	ubfx	r7, r4, #0, #20
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ee4:	f8df c30c 	ldr.w	ip, [pc, #780]	; 80031f4 <HAL_ADC_ConfigChannel+0x39c>
 8002ee8:	4020      	ands	r0, r4
 8002eea:	ea25 0507 	bic.w	r5, r5, r7
 8002eee:	4566      	cmp	r6, ip
 8002ef0:	ea40 0005 	orr.w	r0, r0, r5
 8002ef4:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
 8002ef8:	f000 80a6 	beq.w	8003048 <HAL_ADC_ConfigChannel+0x1f0>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002efc:	2c00      	cmp	r4, #0
 8002efe:	db72      	blt.n	8002fe6 <HAL_ADC_ConfigChannel+0x18e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f00:	2000      	movs	r0, #0
 8002f02:	e003      	b.n	8002f0c <HAL_ADC_ConfigChannel+0xb4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f04:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f06:	f043 0320 	orr.w	r3, r3, #32
 8002f0a:	6553      	str	r3, [r2, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 8002f12:	b002      	add	sp, #8
 8002f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f18:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f1a:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8002f1e:	2007      	movs	r0, #7
 8002f20:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f22:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8002f26:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f2a:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8002f2e:	fa00 fe04 	lsl.w	lr, r0, r4
 8002f32:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f36:	4fa6      	ldr	r7, [pc, #664]	; (80031d0 <HAL_ADC_ConfigChannel+0x378>)
 8002f38:	f85c 0006 	ldr.w	r0, [ip, r6]
 8002f3c:	ea20 000e 	bic.w	r0, r0, lr
 8002f40:	4320      	orrs	r0, r4
 8002f42:	f84c 0006 	str.w	r0, [ip, r6]
 8002f46:	6838      	ldr	r0, [r7, #0]
 8002f48:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8002f4c:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8002f50:	f000 80b8 	beq.w	80030c4 <HAL_ADC_ConfigChannel+0x26c>
 8002f54:	68dc      	ldr	r4, [r3, #12]
 8002f56:	6948      	ldr	r0, [r1, #20]
 8002f58:	f014 0f10 	tst.w	r4, #16
 8002f5c:	68dc      	ldr	r4, [r3, #12]
 8002f5e:	f040 80d9 	bne.w	8003114 <HAL_ADC_ConfigChannel+0x2bc>
 8002f62:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8002f66:	0064      	lsls	r4, r4, #1
 8002f68:	fa00 fc04 	lsl.w	ip, r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f6c:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8002f70:	6808      	ldr	r0, [r1, #0]
 8002f72:	f1be 0f04 	cmp.w	lr, #4
 8002f76:	f000 80b2 	beq.w	80030de <HAL_ADC_ConfigChannel+0x286>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f7a:	f103 0660 	add.w	r6, r3, #96	; 0x60
    MODIFY_REG(*preg,
 8002f7e:	f000 44f8 	and.w	r4, r0, #2080374784	; 0x7c000000
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002f82:	7e4f      	ldrb	r7, [r1, #25]
 8002f84:	f856 002e 	ldr.w	r0, [r6, lr, lsl #2]
 8002f88:	2f01      	cmp	r7, #1
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002f8a:	7e0f      	ldrb	r7, [r1, #24]
 8002f8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002f90:	bf14      	ite	ne
 8002f92:	f04f 0800 	movne.w	r8, #0
 8002f96:	f04f 4800 	moveq.w	r8, #2147483648	; 0x80000000
 8002f9a:	4320      	orrs	r0, r4
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002f9c:	2f01      	cmp	r7, #1
 8002f9e:	ea40 000c 	orr.w	r0, r0, ip
 8002fa2:	f846 002e 	str.w	r0, [r6, lr, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002fa6:	690c      	ldr	r4, [r1, #16]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002fa8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002fac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002fb0:	ea40 0008 	orr.w	r0, r0, r8
 8002fb4:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002fb8:	6908      	ldr	r0, [r1, #16]
 8002fba:	d104      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x16e>
 8002fbc:	f000 001f 	and.w	r0, r0, #31
 8002fc0:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8002fc4:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002fc6:	6918      	ldr	r0, [r3, #16]
 8002fc8:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8002fcc:	4305      	orrs	r5, r0
 8002fce:	611d      	str	r5, [r3, #16]
 8002fd0:	e77b      	b.n	8002eca <HAL_ADC_ConfigChannel+0x72>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fd2:	6898      	ldr	r0, [r3, #8]
 8002fd4:	e779      	b.n	8002eca <HAL_ADC_ConfigChannel+0x72>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	fa94 f4a4 	rbit	r4, r4
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002fda:	fab4 f484 	clz	r4, r4
 8002fde:	f004 041f 	and.w	r4, r4, #31
 8002fe2:	40a0      	lsls	r0, r4
 8002fe4:	e753      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fe6:	497b      	ldr	r1, [pc, #492]	; (80031d4 <HAL_ADC_ConfigChannel+0x37c>)
 8002fe8:	428b      	cmp	r3, r1
 8002fea:	f000 80bd 	beq.w	8003168 <HAL_ADC_ConfigChannel+0x310>
 8002fee:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8002ff2:	428b      	cmp	r3, r1
 8002ff4:	f000 80b8 	beq.w	8003168 <HAL_ADC_ConfigChannel+0x310>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ff8:	4e77      	ldr	r6, [pc, #476]	; (80031d8 <HAL_ADC_ConfigChannel+0x380>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ffa:	4d78      	ldr	r5, [pc, #480]	; (80031dc <HAL_ADC_ConfigChannel+0x384>)
 8002ffc:	68a8      	ldr	r0, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ffe:	68b1      	ldr	r1, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003000:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8003004:	43c9      	mvns	r1, r1
 8003006:	f001 0101 	and.w	r1, r1, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800300a:	2900      	cmp	r1, #0
 800300c:	f000 80ba 	beq.w	8003184 <HAL_ADC_ConfigChannel+0x32c>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003010:	4973      	ldr	r1, [pc, #460]	; (80031e0 <HAL_ADC_ConfigChannel+0x388>)
 8003012:	428c      	cmp	r4, r1
 8003014:	f000 80f0 	beq.w	80031f8 <HAL_ADC_ConfigChannel+0x3a0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003018:	4972      	ldr	r1, [pc, #456]	; (80031e4 <HAL_ADC_ConfigChannel+0x38c>)
 800301a:	428c      	cmp	r4, r1
 800301c:	f000 810e 	beq.w	800323c <HAL_ADC_ConfigChannel+0x3e4>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003020:	4971      	ldr	r1, [pc, #452]	; (80031e8 <HAL_ADC_ConfigChannel+0x390>)
 8003022:	428c      	cmp	r4, r1
 8003024:	f47f af6c 	bne.w	8002f00 <HAL_ADC_ConfigChannel+0xa8>
            if (ADC_VREFINT_INSTANCE(hadc))
 8003028:	0241      	lsls	r1, r0, #9
 800302a:	f53f af69 	bmi.w	8002f00 <HAL_ADC_ConfigChannel+0xa8>
 800302e:	496a      	ldr	r1, [pc, #424]	; (80031d8 <HAL_ADC_ConfigChannel+0x380>)
 8003030:	428b      	cmp	r3, r1
 8003032:	f47f af65 	bne.w	8002f00 <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003036:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003038:	f446 0380 	orr.w	r3, r6, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800303c:	2000      	movs	r0, #0
 800303e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003042:	430b      	orrs	r3, r1
 8003044:	60ab      	str	r3, [r5, #8]
 8003046:	e761      	b.n	8002f0c <HAL_ADC_ConfigChannel+0xb4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003048:	2f00      	cmp	r7, #0
 800304a:	d069      	beq.n	8003120 <HAL_ADC_ConfigChannel+0x2c8>
 800304c:	fa94 f0a4 	rbit	r0, r4
 8003050:	fab0 f080 	clz	r0, r0
 8003054:	3001      	adds	r0, #1
 8003056:	f000 001f 	and.w	r0, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800305a:	2809      	cmp	r0, #9
 800305c:	f200 8098 	bhi.w	8003190 <HAL_ADC_ConfigChannel+0x338>
 8003060:	fa94 f0a4 	rbit	r0, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003064:	fab0 f080 	clz	r0, r0
 8003068:	fa94 f5a4 	rbit	r5, r4
 800306c:	2601      	movs	r6, #1
 800306e:	fab5 f585 	clz	r5, r5
 8003072:	3001      	adds	r0, #1
 8003074:	4435      	add	r5, r6
 8003076:	0680      	lsls	r0, r0, #26
 8003078:	f005 051f 	and.w	r5, r5, #31
 800307c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003080:	fa06 f505 	lsl.w	r5, r6, r5
 8003084:	4328      	orrs	r0, r5
 8003086:	fa94 f4a4 	rbit	r4, r4
 800308a:	fab4 f484 	clz	r4, r4
 800308e:	4434      	add	r4, r6
 8003090:	f004 041f 	and.w	r4, r4, #31
 8003094:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003098:	0524      	lsls	r4, r4, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800309a:	4304      	orrs	r4, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800309c:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 80030a0:	f04f 0c07 	mov.w	ip, #7
 80030a4:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80030a6:	0de7      	lsrs	r7, r4, #23
  MODIFY_REG(*preg,
 80030a8:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80030ac:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 80030b0:	fa0c fc04 	lsl.w	ip, ip, r4
 80030b4:	40a0      	lsls	r0, r4
 80030b6:	59bd      	ldr	r5, [r7, r6]
 80030b8:	ea25 040c 	bic.w	r4, r5, ip
 80030bc:	4304      	orrs	r4, r0
 80030be:	51bc      	str	r4, [r7, r6]
 80030c0:	680c      	ldr	r4, [r1, #0]
 80030c2:	e71b      	b.n	8002efc <HAL_ADC_ConfigChannel+0xa4>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030c4:	68dc      	ldr	r4, [r3, #12]
 80030c6:	6948      	ldr	r0, [r1, #20]
 80030c8:	f3c4 0c82 	ubfx	ip, r4, #2, #3
 80030cc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80030d0:	fa00 fc0c 	lsl.w	ip, r0, ip
 80030d4:	e74a      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x114>
  __HAL_LOCK(hadc);
 80030d6:	2002      	movs	r0, #2
}
 80030d8:	b002      	add	sp, #8
 80030da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030de:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80030e0:	0680      	lsls	r0, r0, #26
 80030e2:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80030e6:	4284      	cmp	r4, r0
 80030e8:	d039      	beq.n	800315e <HAL_ADC_ConfigChannel+0x306>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030ea:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 80030ec:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80030f0:	42a0      	cmp	r0, r4
 80030f2:	d02f      	beq.n	8003154 <HAL_ADC_ConfigChannel+0x2fc>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030f4:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 80030f6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80030fa:	42a0      	cmp	r0, r4
 80030fc:	d025      	beq.n	800314a <HAL_ADC_ConfigChannel+0x2f2>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030fe:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8003100:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003104:	42a0      	cmp	r0, r4
 8003106:	f47f aee0 	bne.w	8002eca <HAL_ADC_ConfigChannel+0x72>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800310a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800310c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003110:	66d8      	str	r0, [r3, #108]	; 0x6c
 8003112:	e6da      	b.n	8002eca <HAL_ADC_ConfigChannel+0x72>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003114:	0864      	lsrs	r4, r4, #1
 8003116:	f004 0408 	and.w	r4, r4, #8
 800311a:	fa00 fc04 	lsl.w	ip, r0, r4
 800311e:	e725      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x114>
 8003120:	2001      	movs	r0, #1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003122:	0ea4      	lsrs	r4, r4, #26
 8003124:	4404      	add	r4, r0
 8003126:	f004 051f 	and.w	r5, r4, #31
 800312a:	06a4      	lsls	r4, r4, #26
 800312c:	fa00 f605 	lsl.w	r6, r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003130:	2d09      	cmp	r5, #9
 8003132:	f004 40f8 	and.w	r0, r4, #2080374784	; 0x7c000000
 8003136:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800313a:	ea40 0006 	orr.w	r0, r0, r6
 800313e:	d9ab      	bls.n	8003098 <HAL_ADC_ConfigChannel+0x240>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003140:	3c1e      	subs	r4, #30
 8003142:	0524      	lsls	r4, r4, #20
 8003144:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 8003148:	e7a7      	b.n	800309a <HAL_ADC_ConfigChannel+0x242>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800314a:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800314c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003150:	669c      	str	r4, [r3, #104]	; 0x68
 8003152:	e7d4      	b.n	80030fe <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003154:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8003156:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800315a:	665c      	str	r4, [r3, #100]	; 0x64
 800315c:	e7ca      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800315e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003160:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003164:	661c      	str	r4, [r3, #96]	; 0x60
 8003166:	e7c0      	b.n	80030ea <HAL_ADC_ConfigChannel+0x292>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003168:	4920      	ldr	r1, [pc, #128]	; (80031ec <HAL_ADC_ConfigChannel+0x394>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800316a:	4e21      	ldr	r6, [pc, #132]	; (80031f0 <HAL_ADC_ConfigChannel+0x398>)
 800316c:	4f19      	ldr	r7, [pc, #100]	; (80031d4 <HAL_ADC_ConfigChannel+0x37c>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800316e:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003170:	6888      	ldr	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003172:	68bf      	ldr	r7, [r7, #8]
 8003174:	68b1      	ldr	r1, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003176:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 800317a:	4339      	orrs	r1, r7
 800317c:	43c9      	mvns	r1, r1
 800317e:	f001 0101 	and.w	r1, r1, #1
 8003182:	e742      	b.n	800300a <HAL_ADC_ConfigChannel+0x1b2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003184:	6d53      	ldr	r3, [r2, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8003186:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003188:	f043 0320 	orr.w	r3, r3, #32
 800318c:	6553      	str	r3, [r2, #84]	; 0x54
 800318e:	e6bd      	b.n	8002f0c <HAL_ADC_ConfigChannel+0xb4>
 8003190:	fa94 f0a4 	rbit	r0, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003194:	fab0 f080 	clz	r0, r0
 8003198:	fa94 f5a4 	rbit	r5, r4
 800319c:	2601      	movs	r6, #1
 800319e:	fab5 f585 	clz	r5, r5
 80031a2:	3001      	adds	r0, #1
 80031a4:	4435      	add	r5, r6
 80031a6:	0680      	lsls	r0, r0, #26
 80031a8:	f005 051f 	and.w	r5, r5, #31
 80031ac:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80031b0:	fa06 f505 	lsl.w	r5, r6, r5
 80031b4:	4328      	orrs	r0, r5
 80031b6:	fa94 f4a4 	rbit	r4, r4
 80031ba:	fab4 f484 	clz	r4, r4
 80031be:	4434      	add	r4, r6
 80031c0:	f004 041f 	and.w	r4, r4, #31
 80031c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80031c8:	e7ba      	b.n	8003140 <HAL_ADC_ConfigChannel+0x2e8>
 80031ca:	bf00      	nop
 80031cc:	000fffff 	.word	0x000fffff
 80031d0:	5c001000 	.word	0x5c001000
 80031d4:	40022000 	.word	0x40022000
 80031d8:	58026000 	.word	0x58026000
 80031dc:	58026300 	.word	0x58026300
 80031e0:	cb840000 	.word	0xcb840000
 80031e4:	c7520000 	.word	0xc7520000
 80031e8:	cfb80000 	.word	0xcfb80000
 80031ec:	40022300 	.word	0x40022300
 80031f0:	40022100 	.word	0x40022100
 80031f4:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031f8:	0204      	lsls	r4, r0, #8
 80031fa:	f53f ae81 	bmi.w	8002f00 <HAL_ADC_ConfigChannel+0xa8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031fe:	4917      	ldr	r1, [pc, #92]	; (800325c <HAL_ADC_ConfigChannel+0x404>)
 8003200:	428b      	cmp	r3, r1
 8003202:	f47f ae7d 	bne.w	8002f00 <HAL_ADC_ConfigChannel+0xa8>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003206:	4b16      	ldr	r3, [pc, #88]	; (8003260 <HAL_ADC_ConfigChannel+0x408>)
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003208:	f446 0100 	orr.w	r1, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800320c:	68a8      	ldr	r0, [r5, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f020 70e0 	bic.w	r0, r0, #29360128	; 0x1c00000
 8003214:	4c13      	ldr	r4, [pc, #76]	; (8003264 <HAL_ADC_ConfigChannel+0x40c>)
 8003216:	099b      	lsrs	r3, r3, #6
 8003218:	4301      	orrs	r1, r0
 800321a:	fba4 0303 	umull	r0, r3, r4, r3
 800321e:	60a9      	str	r1, [r5, #8]
 8003220:	099b      	lsrs	r3, r3, #6
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8003226:	9b01      	ldr	r3, [sp, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	f43f ae69 	beq.w	8002f00 <HAL_ADC_ConfigChannel+0xa8>
                wait_loop_index--;
 800322e:	9b01      	ldr	r3, [sp, #4]
 8003230:	3b01      	subs	r3, #1
 8003232:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8003234:	9b01      	ldr	r3, [sp, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f9      	bne.n	800322e <HAL_ADC_ConfigChannel+0x3d6>
 800323a:	e661      	b.n	8002f00 <HAL_ADC_ConfigChannel+0xa8>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800323c:	01c0      	lsls	r0, r0, #7
 800323e:	f53f ae5f 	bmi.w	8002f00 <HAL_ADC_ConfigChannel+0xa8>
 8003242:	4906      	ldr	r1, [pc, #24]	; (800325c <HAL_ADC_ConfigChannel+0x404>)
 8003244:	428b      	cmp	r3, r1
 8003246:	f47f ae5b 	bne.w	8002f00 <HAL_ADC_ConfigChannel+0xa8>
 800324a:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800324c:	f046 7380 	orr.w	r3, r6, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003250:	2000      	movs	r0, #0
 8003252:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003256:	430b      	orrs	r3, r1
 8003258:	60ab      	str	r3, [r5, #8]
 800325a:	e657      	b.n	8002f0c <HAL_ADC_ConfigChannel+0xb4>
 800325c:	58026000 	.word	0x58026000
 8003260:	240001ec 	.word	0x240001ec
 8003264:	053e2d63 	.word	0x053e2d63

08003268 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003268:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800326a:	6891      	ldr	r1, [r2, #8]
 800326c:	07cb      	lsls	r3, r1, #31
 800326e:	d40e      	bmi.n	800328e <ADC_Enable+0x26>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003270:	4926      	ldr	r1, [pc, #152]	; (800330c <ADC_Enable+0xa4>)
{
 8003272:	b570      	push	{r4, r5, r6, lr}
 8003274:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003276:	6890      	ldr	r0, [r2, #8]
 8003278:	4208      	tst	r0, r1
 800327a:	d00a      	beq.n	8003292 <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800327c:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_ERROR;
 800327e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003280:	f042 0210 	orr.w	r2, r2, #16
 8003284:	6562      	str	r2, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003286:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003288:	4302      	orrs	r2, r0
 800328a:	65a2      	str	r2, [r4, #88]	; 0x58
}
 800328c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800328e:	2000      	movs	r0, #0
}
 8003290:	4770      	bx	lr
  MODIFY_REG(ADCx->CR,
 8003292:	6891      	ldr	r1, [r2, #8]
 8003294:	4b1e      	ldr	r3, [pc, #120]	; (8003310 <ADC_Enable+0xa8>)
 8003296:	400b      	ands	r3, r1
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800329e:	f7ff fd45 	bl	8002d2c <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	4a1b      	ldr	r2, [pc, #108]	; (8003314 <ADC_Enable+0xac>)
    tickstart = HAL_GetTick();
 80032a6:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d026      	beq.n	80032fa <ADC_Enable+0x92>
 80032ac:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d022      	beq.n	80032fa <ADC_Enable+0x92>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80032b4:	4a18      	ldr	r2, [pc, #96]	; (8003318 <ADC_Enable+0xb0>)
 80032b6:	6892      	ldr	r2, [r2, #8]
  MODIFY_REG(ADCx->CR,
 80032b8:	4e15      	ldr	r6, [pc, #84]	; (8003310 <ADC_Enable+0xa8>)
 80032ba:	e00a      	b.n	80032d2 <ADC_Enable+0x6a>
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	4032      	ands	r2, r6
 80032c0:	f042 0201 	orr.w	r2, r2, #1
 80032c4:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032c6:	f7ff fd31 	bl	8002d2c <HAL_GetTick>
 80032ca:	1b40      	subs	r0, r0, r5
 80032cc:	2802      	cmp	r0, #2
 80032ce:	d80b      	bhi.n	80032e8 <ADC_Enable+0x80>
 80032d0:	6823      	ldr	r3, [r4, #0]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	07d2      	lsls	r2, r2, #31
 80032d6:	d417      	bmi.n	8003308 <ADC_Enable+0xa0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	07d1      	lsls	r1, r2, #31
 80032dc:	d5ee      	bpl.n	80032bc <ADC_Enable+0x54>
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032de:	f7ff fd25 	bl	8002d2c <HAL_GetTick>
 80032e2:	1b40      	subs	r0, r0, r5
 80032e4:	2802      	cmp	r0, #2
 80032e6:	d9f3      	bls.n	80032d0 <ADC_Enable+0x68>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 80032ea:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ec:	f043 0310 	orr.w	r3, r3, #16
 80032f0:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032f4:	4303      	orrs	r3, r0
 80032f6:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80032f8:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80032fa:	4a08      	ldr	r2, [pc, #32]	; (800331c <ADC_Enable+0xb4>)
 80032fc:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032fe:	06d0      	lsls	r0, r2, #27
 8003300:	d0da      	beq.n	80032b8 <ADC_Enable+0x50>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003302:	4a07      	ldr	r2, [pc, #28]	; (8003320 <ADC_Enable+0xb8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003304:	4293      	cmp	r3, r2
 8003306:	d1d7      	bne.n	80032b8 <ADC_Enable+0x50>
  return HAL_OK;
 8003308:	2000      	movs	r0, #0
}
 800330a:	bd70      	pop	{r4, r5, r6, pc}
 800330c:	8000003f 	.word	0x8000003f
 8003310:	7fffffc0 	.word	0x7fffffc0
 8003314:	40022000 	.word	0x40022000
 8003318:	58026300 	.word	0x58026300
 800331c:	40022300 	.word	0x40022300
 8003320:	40022100 	.word	0x40022100

08003324 <ADC_Disable>:
{
 8003324:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003326:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003328:	6899      	ldr	r1, [r3, #8]
 800332a:	0789      	lsls	r1, r1, #30
 800332c:	d502      	bpl.n	8003334 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800332e:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8003330:	2000      	movs	r0, #0
}
 8003332:	bd38      	pop	{r3, r4, r5, pc}
 8003334:	6899      	ldr	r1, [r3, #8]
 8003336:	07ca      	lsls	r2, r1, #31
 8003338:	d523      	bpl.n	8003382 <ADC_Disable+0x5e>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800333a:	6899      	ldr	r1, [r3, #8]
 800333c:	4604      	mov	r4, r0
 800333e:	f001 010d 	and.w	r1, r1, #13
 8003342:	2901      	cmp	r1, #1
 8003344:	d008      	beq.n	8003358 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003346:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8003348:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334a:	f043 0310 	orr.w	r3, r3, #16
 800334e:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003350:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003352:	4303      	orrs	r3, r0
 8003354:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8003356:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8003358:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800335a:	2103      	movs	r1, #3
 800335c:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <ADC_Disable+0x64>)
 800335e:	4002      	ands	r2, r0
 8003360:	f042 0202 	orr.w	r2, r2, #2
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8003368:	f7ff fce0 	bl	8002d2c <HAL_GetTick>
 800336c:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800336e:	e004      	b.n	800337a <ADC_Disable+0x56>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003370:	f7ff fcdc 	bl	8002d2c <HAL_GetTick>
 8003374:	1b40      	subs	r0, r0, r5
 8003376:	2802      	cmp	r0, #2
 8003378:	d8e5      	bhi.n	8003346 <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	07db      	lsls	r3, r3, #31
 8003380:	d4f6      	bmi.n	8003370 <ADC_Disable+0x4c>
  return HAL_OK;
 8003382:	2000      	movs	r0, #0
}
 8003384:	bd38      	pop	{r3, r4, r5, pc}
 8003386:	bf00      	nop
 8003388:	7fffffc0 	.word	0x7fffffc0

0800338c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800338c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800338e:	4a52      	ldr	r2, [pc, #328]	; (80034d8 <ADC_ConfigureBoostMode+0x14c>)
{
 8003390:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003392:	6803      	ldr	r3, [r0, #0]
 8003394:	4293      	cmp	r3, r2
 8003396:	d027      	beq.n	80033e8 <ADC_ConfigureBoostMode+0x5c>
 8003398:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800339c:	4293      	cmp	r3, r2
 800339e:	d023      	beq.n	80033e8 <ADC_ConfigureBoostMode+0x5c>
 80033a0:	4b4e      	ldr	r3, [pc, #312]	; (80034dc <ADC_ConfigureBoostMode+0x150>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80033a8:	bf14      	ite	ne
 80033aa:	2301      	movne	r3, #1
 80033ac:	2300      	moveq	r3, #0
 80033ae:	b323      	cbz	r3, 80033fa <ADC_ConfigureBoostMode+0x6e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80033b0:	f002 ff34 	bl	800621c <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80033b4:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 80033b6:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 80033b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033bc:	d062      	beq.n	8003484 <ADC_ConfigureBoostMode+0xf8>
 80033be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033c2:	d072      	beq.n	80034aa <ADC_ConfigureBoostMode+0x11e>
 80033c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c8:	d05c      	beq.n	8003484 <ADC_ConfigureBoostMode+0xf8>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80033ca:	f7ff fcc7 	bl	8002d5c <HAL_GetREVID>
 80033ce:	f241 0303 	movw	r3, #4099	; 0x1003
 80033d2:	4298      	cmp	r0, r3
 80033d4:	d832      	bhi.n	800343c <ADC_ConfigureBoostMode+0xb0>
  {
    if (freq > 20000000UL)
 80033d6:	4a42      	ldr	r2, [pc, #264]	; (80034e0 <ADC_ConfigureBoostMode+0x154>)
 80033d8:	682b      	ldr	r3, [r5, #0]
 80033da:	4294      	cmp	r4, r2
 80033dc:	d928      	bls.n	8003430 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033e4:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80033e6:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80033e8:	4b3e      	ldr	r3, [pc, #248]	; (80034e4 <ADC_ConfigureBoostMode+0x158>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80033f0:	bf14      	ite	ne
 80033f2:	2301      	movne	r3, #1
 80033f4:	2300      	moveq	r3, #0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1da      	bne.n	80033b0 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80033fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80033fe:	f004 f943 	bl	8007688 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8003402:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003404:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8003406:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800340a:	d049      	beq.n	80034a0 <ADC_ConfigureBoostMode+0x114>
 800340c:	d93e      	bls.n	800348c <ADC_ConfigureBoostMode+0x100>
 800340e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003412:	d04e      	beq.n	80034b2 <ADC_ConfigureBoostMode+0x126>
 8003414:	d927      	bls.n	8003466 <ADC_ConfigureBoostMode+0xda>
 8003416:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800341a:	d048      	beq.n	80034ae <ADC_ConfigureBoostMode+0x122>
 800341c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003420:	d1d3      	bne.n	80033ca <ADC_ConfigureBoostMode+0x3e>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003422:	f7ff fc9b 	bl	8002d5c <HAL_GetREVID>
 8003426:	f241 0303 	movw	r3, #4099	; 0x1003
 800342a:	4298      	cmp	r0, r3
 800342c:	d805      	bhi.n	800343a <ADC_ConfigureBoostMode+0xae>
 800342e:	682b      	ldr	r3, [r5, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003436:	609a      	str	r2, [r3, #8]
}
 8003438:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 256UL;
 800343a:	0a24      	lsrs	r4, r4, #8
    freq /= 2U; /* divider by 2 for Rev.V */
 800343c:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 800343e:	4a2a      	ldr	r2, [pc, #168]	; (80034e8 <ADC_ConfigureBoostMode+0x15c>)
 8003440:	682b      	ldr	r3, [r5, #0]
 8003442:	4294      	cmp	r4, r2
 8003444:	d90a      	bls.n	800345c <ADC_ConfigureBoostMode+0xd0>
    else if (freq <= 12500000UL)
 8003446:	4a29      	ldr	r2, [pc, #164]	; (80034ec <ADC_ConfigureBoostMode+0x160>)
 8003448:	4294      	cmp	r4, r2
 800344a:	d914      	bls.n	8003476 <ADC_ConfigureBoostMode+0xea>
    else if (freq <= 25000000UL)
 800344c:	4a28      	ldr	r2, [pc, #160]	; (80034f0 <ADC_ConfigureBoostMode+0x164>)
 800344e:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003450:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 8003452:	d932      	bls.n	80034ba <ADC_ConfigureBoostMode+0x12e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003454:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003458:	609a      	str	r2, [r3, #8]
}
 800345a:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003462:	609a      	str	r2, [r3, #8]
}
 8003464:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8003466:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800346a:	d024      	beq.n	80034b6 <ADC_ConfigureBoostMode+0x12a>
 800346c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003470:	d1ab      	bne.n	80033ca <ADC_ConfigureBoostMode+0x3e>
        freq /= 32UL;
 8003472:	0944      	lsrs	r4, r0, #5
        break;
 8003474:	e7a9      	b.n	80033ca <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800347c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003480:	609a      	str	r2, [r3, #8]
}
 8003482:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003484:	0c1b      	lsrs	r3, r3, #16
 8003486:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 800348a:	e79e      	b.n	80033ca <ADC_ConfigureBoostMode+0x3e>
    switch (hadc->Init.ClockPrescaler)
 800348c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003490:	d006      	beq.n	80034a0 <ADC_ConfigureBoostMode+0x114>
 8003492:	d818      	bhi.n	80034c6 <ADC_ConfigureBoostMode+0x13a>
 8003494:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003498:	d002      	beq.n	80034a0 <ADC_ConfigureBoostMode+0x114>
 800349a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800349e:	d194      	bne.n	80033ca <ADC_ConfigureBoostMode+0x3e>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80034a0:	0c9b      	lsrs	r3, r3, #18
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 80034a8:	e78f      	b.n	80033ca <ADC_ConfigureBoostMode+0x3e>
        freq /= 4UL;
 80034aa:	0884      	lsrs	r4, r0, #2
        break;
 80034ac:	e78d      	b.n	80033ca <ADC_ConfigureBoostMode+0x3e>
        freq /= 128UL;
 80034ae:	09c4      	lsrs	r4, r0, #7
        break;
 80034b0:	e78b      	b.n	80033ca <ADC_ConfigureBoostMode+0x3e>
        freq /= 64UL;
 80034b2:	0984      	lsrs	r4, r0, #6
        break;
 80034b4:	e789      	b.n	80033ca <ADC_ConfigureBoostMode+0x3e>
        freq /= 16UL;
 80034b6:	0904      	lsrs	r4, r0, #4
        break;
 80034b8:	e787      	b.n	80033ca <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80034ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c2:	609a      	str	r2, [r3, #8]
}
 80034c4:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 80034c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ca:	d0e9      	beq.n	80034a0 <ADC_ConfigureBoostMode+0x114>
 80034cc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80034d0:	f47f af7b 	bne.w	80033ca <ADC_ConfigureBoostMode+0x3e>
 80034d4:	e7e4      	b.n	80034a0 <ADC_ConfigureBoostMode+0x114>
 80034d6:	bf00      	nop
 80034d8:	40022000 	.word	0x40022000
 80034dc:	58026300 	.word	0x58026300
 80034e0:	01312d00 	.word	0x01312d00
 80034e4:	40022300 	.word	0x40022300
 80034e8:	005f5e10 	.word	0x005f5e10
 80034ec:	00bebc20 	.word	0x00bebc20
 80034f0:	017d7840 	.word	0x017d7840

080034f4 <HAL_ADC_Init>:
{
 80034f4:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80034f6:	2300      	movs	r3, #0
{
 80034f8:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80034fa:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80034fc:	2800      	cmp	r0, #0
 80034fe:	f000 80aa 	beq.w	8003656 <HAL_ADC_Init+0x162>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003502:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8003504:	4604      	mov	r4, r0
 8003506:	2d00      	cmp	r5, #0
 8003508:	f000 809a 	beq.w	8003640 <HAL_ADC_Init+0x14c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800350c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800350e:	6893      	ldr	r3, [r2, #8]
 8003510:	009d      	lsls	r5, r3, #2
 8003512:	d503      	bpl.n	800351c <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003514:	6891      	ldr	r1, [r2, #8]
 8003516:	4b77      	ldr	r3, [pc, #476]	; (80036f4 <HAL_ADC_Init+0x200>)
 8003518:	400b      	ands	r3, r1
 800351a:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800351c:	6893      	ldr	r3, [r2, #8]
 800351e:	00d8      	lsls	r0, r3, #3
 8003520:	d415      	bmi.n	800354e <HAL_ADC_Init+0x5a>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003522:	4b75      	ldr	r3, [pc, #468]	; (80036f8 <HAL_ADC_Init+0x204>)
  MODIFY_REG(ADCx->CR,
 8003524:	6890      	ldr	r0, [r2, #8]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4d74      	ldr	r5, [pc, #464]	; (80036fc <HAL_ADC_Init+0x208>)
 800352a:	099b      	lsrs	r3, r3, #6
 800352c:	4974      	ldr	r1, [pc, #464]	; (8003700 <HAL_ADC_Init+0x20c>)
 800352e:	fba5 5303 	umull	r5, r3, r5, r3
 8003532:	4001      	ands	r1, r0
 8003534:	099b      	lsrs	r3, r3, #6
 8003536:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800353a:	6091      	str	r1, [r2, #8]
 800353c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800353e:	9b01      	ldr	r3, [sp, #4]
 8003540:	b12b      	cbz	r3, 800354e <HAL_ADC_Init+0x5a>
      wait_loop_index--;
 8003542:	9b01      	ldr	r3, [sp, #4]
 8003544:	3b01      	subs	r3, #1
 8003546:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003548:	9b01      	ldr	r3, [sp, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f9      	bne.n	8003542 <HAL_ADC_Init+0x4e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800354e:	6893      	ldr	r3, [r2, #8]
 8003550:	00d9      	lsls	r1, r3, #3
 8003552:	d467      	bmi.n	8003624 <HAL_ADC_Init+0x130>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003554:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8003556:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003558:	f043 0310 	orr.w	r3, r3, #16
 800355c:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003560:	432b      	orrs	r3, r5
 8003562:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003564:	6893      	ldr	r3, [r2, #8]
 8003566:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800356a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800356c:	d160      	bne.n	8003630 <HAL_ADC_Init+0x13c>
 800356e:	06db      	lsls	r3, r3, #27
 8003570:	d45e      	bmi.n	8003630 <HAL_ADC_Init+0x13c>
    ADC_STATE_CLR_SET(hadc->State,
 8003572:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003574:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003578:	f043 0302 	orr.w	r3, r3, #2
 800357c:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800357e:	6893      	ldr	r3, [r2, #8]
 8003580:	07de      	lsls	r6, r3, #31
 8003582:	d413      	bmi.n	80035ac <HAL_ADC_Init+0xb8>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003584:	4b5f      	ldr	r3, [pc, #380]	; (8003704 <HAL_ADC_Init+0x210>)
 8003586:	429a      	cmp	r2, r3
 8003588:	f000 8092 	beq.w	80036b0 <HAL_ADC_Init+0x1bc>
 800358c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003590:	429a      	cmp	r2, r3
 8003592:	f000 808d 	beq.w	80036b0 <HAL_ADC_Init+0x1bc>
 8003596:	4b5c      	ldr	r3, [pc, #368]	; (8003708 <HAL_ADC_Init+0x214>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	07d9      	lsls	r1, r3, #31
 800359c:	d406      	bmi.n	80035ac <HAL_ADC_Init+0xb8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800359e:	4a5b      	ldr	r2, [pc, #364]	; (800370c <HAL_ADC_Init+0x218>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80035a0:	6893      	ldr	r3, [r2, #8]
 80035a2:	6861      	ldr	r1, [r4, #4]
 80035a4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80035ac:	f7ff fbd6 	bl	8002d5c <HAL_GetREVID>
 80035b0:	f241 0303 	movw	r3, #4099	; 0x1003
 80035b4:	7d62      	ldrb	r2, [r4, #21]
 80035b6:	4298      	cmp	r0, r3
 80035b8:	7f21      	ldrb	r1, [r4, #28]
 80035ba:	d96c      	bls.n	8003696 <HAL_ADC_Init+0x1a2>
 80035bc:	68a3      	ldr	r3, [r4, #8]
 80035be:	0352      	lsls	r2, r2, #13
 80035c0:	040e      	lsls	r6, r1, #16
 80035c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80035c4:	2b10      	cmp	r3, #16
 80035c6:	f000 808e 	beq.w	80036e6 <HAL_ADC_Init+0x1f2>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035ca:	431a      	orrs	r2, r3
 80035cc:	4332      	orrs	r2, r6
 80035ce:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035d0:	2901      	cmp	r1, #1
 80035d2:	d103      	bne.n	80035dc <HAL_ADC_Init+0xe8>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035d4:	6a23      	ldr	r3, [r4, #32]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035de:	b123      	cbz	r3, 80035ea <HAL_ADC_Init+0xf6>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035e0:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80035e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80035e6:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035e8:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	4948      	ldr	r1, [pc, #288]	; (8003710 <HAL_ADC_Init+0x21c>)
 80035ee:	68d8      	ldr	r0, [r3, #12]
 80035f0:	4001      	ands	r1, r0
 80035f2:	430a      	orrs	r2, r1
 80035f4:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035fc:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035fe:	d101      	bne.n	8003604 <HAL_ADC_Init+0x110>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003600:	0712      	lsls	r2, r2, #28
 8003602:	d52c      	bpl.n	800365e <HAL_ADC_Init+0x16a>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003604:	68e2      	ldr	r2, [r4, #12]
 8003606:	2a01      	cmp	r2, #1
 8003608:	d04a      	beq.n	80036a0 <HAL_ADC_Init+0x1ac>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800360a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800360c:	f022 020f 	bic.w	r2, r2, #15
 8003610:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003612:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8003614:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003616:	f023 0303 	bic.w	r3, r3, #3
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	6563      	str	r3, [r4, #84]	; 0x54
}
 8003620:	b002      	add	sp, #8
 8003622:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003624:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003626:	2500      	movs	r5, #0
 8003628:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800362c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800362e:	d09e      	beq.n	800356e <HAL_ADC_Init+0x7a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003630:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8003632:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003634:	f043 0310 	orr.w	r3, r3, #16
}
 8003638:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800363a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800363c:	b002      	add	sp, #8
 800363e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8003640:	f7ff f86e 	bl	8002720 <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003644:	6822      	ldr	r2, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8003646:	65a5      	str	r5, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003648:	6893      	ldr	r3, [r2, #8]
    hadc->Lock = HAL_UNLOCKED;
 800364a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800364e:	009d      	lsls	r5, r3, #2
 8003650:	f57f af64 	bpl.w	800351c <HAL_ADC_Init+0x28>
 8003654:	e75e      	b.n	8003514 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8003656:	2501      	movs	r5, #1
}
 8003658:	4628      	mov	r0, r5
 800365a:	b002      	add	sp, #8
 800365c:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800365e:	68d8      	ldr	r0, [r3, #12]
 8003660:	4a2c      	ldr	r2, [pc, #176]	; (8003714 <HAL_ADC_Init+0x220>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003662:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003664:	4002      	ands	r2, r0
 8003666:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003668:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
      if (hadc->Init.OversamplingMode == ENABLE)
 800366c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003670:	4302      	orrs	r2, r0
      if (hadc->Init.OversamplingMode == ENABLE)
 8003672:	2901      	cmp	r1, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003674:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8003676:	d025      	beq.n	80036c4 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	f022 0201 	bic.w	r2, r2, #1
 800367e:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003680:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8003682:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003686:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800368a:	430a      	orrs	r2, r1
 800368c:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800368e:	f7ff fe7d 	bl	800338c <ADC_ConfigureBoostMode>
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	e7b6      	b.n	8003604 <HAL_ADC_Init+0x110>
 8003696:	0352      	lsls	r2, r2, #13
 8003698:	68a3      	ldr	r3, [r4, #8]
 800369a:	040e      	lsls	r6, r1, #16
 800369c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800369e:	e794      	b.n	80035ca <HAL_ADC_Init+0xd6>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036a2:	69a2      	ldr	r2, [r4, #24]
 80036a4:	f021 010f 	bic.w	r1, r1, #15
 80036a8:	3a01      	subs	r2, #1
 80036aa:	430a      	orrs	r2, r1
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30
 80036ae:	e7b0      	b.n	8003612 <HAL_ADC_Init+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036b0:	4a14      	ldr	r2, [pc, #80]	; (8003704 <HAL_ADC_Init+0x210>)
 80036b2:	4b19      	ldr	r3, [pc, #100]	; (8003718 <HAL_ADC_Init+0x224>)
 80036b4:	6892      	ldr	r2, [r2, #8]
 80036b6:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	07d8      	lsls	r0, r3, #31
 80036bc:	f53f af76 	bmi.w	80035ac <HAL_ADC_Init+0xb8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036c0:	4a16      	ldr	r2, [pc, #88]	; (800371c <HAL_ADC_Init+0x228>)
 80036c2:	e76d      	b.n	80035a0 <HAL_ADC_Init+0xac>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80036c4:	e9d4 2110 	ldrd	r2, r1, [r4, #64]	; 0x40
 80036c8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80036ca:	430a      	orrs	r2, r1
 80036cc:	4e14      	ldr	r6, [pc, #80]	; (8003720 <HAL_ADC_Init+0x22c>)
 80036ce:	6919      	ldr	r1, [r3, #16]
 80036d0:	f042 0201 	orr.w	r2, r2, #1
 80036d4:	400e      	ands	r6, r1
 80036d6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80036d8:	4302      	orrs	r2, r0
 80036da:	3901      	subs	r1, #1
 80036dc:	4332      	orrs	r2, r6
 80036de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80036e2:	611a      	str	r2, [r3, #16]
 80036e4:	e7cc      	b.n	8003680 <HAL_ADC_Init+0x18c>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036e6:	f040 031c 	orr.w	r3, r0, #28
 80036ea:	4313      	orrs	r3, r2
 80036ec:	ea43 0206 	orr.w	r2, r3, r6
 80036f0:	e76e      	b.n	80035d0 <HAL_ADC_Init+0xdc>
 80036f2:	bf00      	nop
 80036f4:	5fffffc0 	.word	0x5fffffc0
 80036f8:	240001ec 	.word	0x240001ec
 80036fc:	053e2d63 	.word	0x053e2d63
 8003700:	6fffffc0 	.word	0x6fffffc0
 8003704:	40022000 	.word	0x40022000
 8003708:	58026000 	.word	0x58026000
 800370c:	58026300 	.word	0x58026300
 8003710:	fff0c003 	.word	0xfff0c003
 8003714:	ffffbffc 	.word	0xffffbffc
 8003718:	40022100 	.word	0x40022100
 800371c:	40022300 	.word	0x40022300
 8003720:	fc00f81e 	.word	0xfc00f81e

08003724 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003724:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003726:	f890 5050 	ldrb.w	r5, [r0, #80]	; 0x50
{
 800372a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800372c:	2600      	movs	r6, #0
  __HAL_LOCK(hadc);
 800372e:	2d01      	cmp	r5, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003730:	9601      	str	r6, [sp, #4]
  __HAL_LOCK(hadc);
 8003732:	d036      	beq.n	80037a2 <HAL_ADCEx_Calibration_Start+0x7e>
 8003734:	2301      	movs	r3, #1
 8003736:	4604      	mov	r4, r0
 8003738:	4615      	mov	r5, r2
 800373a:	460e      	mov	r6, r1
 800373c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003740:	f7ff fdf0 	bl	8003324 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003744:	bb20      	cbnz	r0, 8003790 <HAL_ADCEx_Calibration_Start+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003746:	6d67      	ldr	r7, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8003748:	f005 4380 	and.w	r3, r5, #1073741824	; 0x40000000
 800374c:	4d1c      	ldr	r5, [pc, #112]	; (80037c0 <HAL_ADCEx_Calibration_Start+0x9c>)
 800374e:	f406 3180 	and.w	r1, r6, #65536	; 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003752:	6822      	ldr	r2, [r4, #0]
 8003754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ADC_STATE_CLR_SET(hadc->State,
 8003758:	403d      	ands	r5, r7
 800375a:	4e1a      	ldr	r6, [pc, #104]	; (80037c4 <HAL_ADCEx_Calibration_Start+0xa0>)
 800375c:	430b      	orrs	r3, r1

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800375e:	491a      	ldr	r1, [pc, #104]	; (80037c8 <HAL_ADCEx_Calibration_Start+0xa4>)
    ADC_STATE_CLR_SET(hadc->State,
 8003760:	f045 0502 	orr.w	r5, r5, #2
 8003764:	6565      	str	r5, [r4, #84]	; 0x54
 8003766:	6895      	ldr	r5, [r2, #8]
 8003768:	402e      	ands	r6, r5
 800376a:	4333      	orrs	r3, r6
 800376c:	6093      	str	r3, [r2, #8]
 800376e:	e005      	b.n	800377c <HAL_ADCEx_Calibration_Start+0x58>
      wait_loop_index++;
 8003770:	9b01      	ldr	r3, [sp, #4]
 8003772:	3301      	adds	r3, #1
 8003774:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003776:	9b01      	ldr	r3, [sp, #4]
 8003778:	428b      	cmp	r3, r1
 800377a:	d815      	bhi.n	80037a8 <HAL_ADCEx_Calibration_Start+0x84>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800377c:	6893      	ldr	r3, [r2, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	dbf6      	blt.n	8003770 <HAL_ADCEx_Calibration_Start+0x4c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003782:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003784:	f023 0303 	bic.w	r3, r3, #3
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	6563      	str	r3, [r4, #84]	; 0x54
 800378e:	e003      	b.n	8003798 <HAL_ADCEx_Calibration_Start+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003790:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003792:	f043 0310 	orr.w	r3, r3, #16
 8003796:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003798:	2300      	movs	r3, #0
 800379a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800379e:	b003      	add	sp, #12
 80037a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 80037a2:	2002      	movs	r0, #2
}
 80037a4:	b003      	add	sp, #12
 80037a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ADC_STATE_CLR_SET(hadc->State,
 80037a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80037aa:	2200      	movs	r2, #0
        return HAL_ERROR;
 80037ac:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80037ae:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 80037b2:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 80037b6:	f043 0310 	orr.w	r3, r3, #16
 80037ba:	6563      	str	r3, [r4, #84]	; 0x54
}
 80037bc:	b003      	add	sp, #12
 80037be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037c0:	ffffeefd 	.word	0xffffeefd
 80037c4:	3ffeffc0 	.word	0x3ffeffc0
 80037c8:	25c3f7ff 	.word	0x25c3f7ff

080037cc <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80037cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80037d0:	6807      	ldr	r7, [r0, #0]
{
 80037d2:	b09a      	sub	sp, #104	; 0x68
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037d4:	68bd      	ldr	r5, [r7, #8]
 80037d6:	f015 0504 	ands.w	r5, r5, #4
 80037da:	d123      	bne.n	8003824 <HAL_ADCEx_MultiModeStart_DMA+0x58>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037dc:	f890 6050 	ldrb.w	r6, [r0, #80]	; 0x50
 80037e0:	4604      	mov	r4, r0
 80037e2:	2e01      	cmp	r6, #1
 80037e4:	d01e      	beq.n	8003824 <HAL_ADCEx_MultiModeStart_DMA+0x58>

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80037e6:	4b30      	ldr	r3, [pc, #192]	; (80038a8 <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
    __HAL_LOCK(hadc);
 80037e8:	2601      	movs	r6, #1
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80037ea:	429f      	cmp	r7, r3
    __HAL_LOCK(hadc);
 80037ec:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80037f0:	d009      	beq.n	8003806 <HAL_ADCEx_MultiModeStart_DMA+0x3a>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037f2:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 80037f4:	4630      	mov	r0, r6
      __HAL_UNLOCK(hadc);
 80037f6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037fa:	f043 0320 	orr.w	r3, r3, #32
 80037fe:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 8003800:	b01a      	add	sp, #104	; 0x68
 8003802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003806:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80038c0 <HAL_ADCEx_MultiModeStart_DMA+0xf4>
 800380a:	4616      	mov	r6, r2
 800380c:	460d      	mov	r5, r1
 800380e:	f8cd 8004 	str.w	r8, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 8003812:	f7ff fd29 	bl	8003268 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003816:	b148      	cbz	r0, 800382c <HAL_ADCEx_MultiModeStart_DMA+0x60>
      __HAL_UNLOCK(hadc);
 8003818:	2300      	movs	r3, #0
 800381a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800381e:	b01a      	add	sp, #104	; 0x68
 8003820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003824:	2002      	movs	r0, #2
}
 8003826:	b01a      	add	sp, #104	; 0x68
 8003828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 800382c:	a801      	add	r0, sp, #4
 800382e:	f7ff fd1b 	bl	8003268 <ADC_Enable>
 8003832:	4602      	mov	r2, r0
    if (tmp_hal_status == HAL_OK)
 8003834:	2800      	cmp	r0, #0
 8003836:	d1ef      	bne.n	8003818 <HAL_ADCEx_MultiModeStart_DMA+0x4c>
      ADC_STATE_CLR_SET(hadc->State,
 8003838:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800383a:	4b1c      	ldr	r3, [pc, #112]	; (80038ac <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800383c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      ADC_STATE_CLR_SET(hadc->State,
 800383e:	400b      	ands	r3, r1
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003840:	f8df c080 	ldr.w	ip, [pc, #128]	; 80038c4 <HAL_ADCEx_MultiModeStart_DMA+0xf8>
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003844:	f8df e080 	ldr.w	lr, [pc, #128]	; 80038c8 <HAL_ADCEx_MultiModeStart_DMA+0xfc>
      ADC_STATE_CLR_SET(hadc->State,
 8003848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800384c:	4918      	ldr	r1, [pc, #96]	; (80038b0 <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
      ADC_STATE_CLR_SET(hadc->State,
 800384e:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8003850:	65a2      	str	r2, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003852:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003856:	f8d4 c000 	ldr.w	ip, [r4]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800385a:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800385e:	45bc      	cmp	ip, r7
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8003860:	64c1      	str	r1, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003862:	d01e      	beq.n	80038a2 <HAL_ADCEx_MultiModeStart_DMA+0xd6>
 8003864:	45c4      	cmp	ip, r8
 8003866:	d01c      	beq.n	80038a2 <HAL_ADCEx_MultiModeStart_DMA+0xd6>
 8003868:	4912      	ldr	r1, [pc, #72]	; (80038b4 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800386a:	f04f 0e1c 	mov.w	lr, #28
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800386e:	462a      	mov	r2, r5
      __HAL_UNLOCK(hadc);
 8003870:	2700      	movs	r7, #0
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003872:	4633      	mov	r3, r6
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003874:	f8cc e000 	str.w	lr, [ip]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003878:	310c      	adds	r1, #12
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800387a:	f8dc 5004 	ldr.w	r5, [ip, #4]
      __HAL_UNLOCK(hadc);
 800387e:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003882:	f045 0510 	orr.w	r5, r5, #16
 8003886:	f8cc 5004 	str.w	r5, [ip, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800388a:	f000 fe17 	bl	80044bc <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 800388e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003890:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <HAL_ADCEx_MultiModeStart_DMA+0xec>)
 8003892:	6891      	ldr	r1, [r2, #8]
 8003894:	400b      	ands	r3, r1
 8003896:	f043 0304 	orr.w	r3, r3, #4
 800389a:	6093      	str	r3, [r2, #8]
}
 800389c:	b01a      	add	sp, #104	; 0x68
 800389e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038a2:	4906      	ldr	r1, [pc, #24]	; (80038bc <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 80038a4:	e7e1      	b.n	800386a <HAL_ADCEx_MultiModeStart_DMA+0x9e>
 80038a6:	bf00      	nop
 80038a8:	40022000 	.word	0x40022000
 80038ac:	fffff0fe 	.word	0xfffff0fe
 80038b0:	08002e3d 	.word	0x08002e3d
 80038b4:	58026300 	.word	0x58026300
 80038b8:	7fffffc0 	.word	0x7fffffc0
 80038bc:	40022300 	.word	0x40022300
 80038c0:	40022100 	.word	0x40022100
 80038c4:	08002dd5 	.word	0x08002dd5
 80038c8:	08002dc5 	.word	0x08002dc5

080038cc <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038cc:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80038d0:	2a01      	cmp	r2, #1
 80038d2:	d04b      	beq.n	800396c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80038d4:	4603      	mov	r3, r0

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80038d6:	4a29      	ldr	r2, [pc, #164]	; (800397c <HAL_ADCEx_MultiModeConfigChannel+0xb0>)
  __HAL_LOCK(hadc);
 80038d8:	2001      	movs	r0, #1
{
 80038da:	b4f0      	push	{r4, r5, r6, r7}
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80038dc:	681c      	ldr	r4, [r3, #0]
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038de:	680e      	ldr	r6, [r1, #0]
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80038e0:	4294      	cmp	r4, r2
  __HAL_LOCK(hadc);
 80038e2:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80038e6:	d008      	beq.n	80038fa <HAL_ADCEx_MultiModeConfigChannel+0x2e>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038ea:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ec:	f042 0220 	orr.w	r2, r2, #32
    __HAL_UNLOCK(hadc);
 80038f0:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80038f6:	bcf0      	pop	{r4, r5, r6, r7}
 80038f8:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038fa:	4d21      	ldr	r5, [pc, #132]	; (8003980 <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
 80038fc:	68aa      	ldr	r2, [r5, #8]
 80038fe:	0752      	lsls	r2, r2, #29
 8003900:	d50a      	bpl.n	8003918 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
 8003902:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8003906:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003908:	f042 0220 	orr.w	r2, r2, #32
 800390c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8003914:	bcf0      	pop	{r4, r5, r6, r7}
 8003916:	4770      	bx	lr
 8003918:	68a0      	ldr	r0, [r4, #8]
 800391a:	f010 0004 	ands.w	r0, r0, #4
 800391e:	d1f1      	bne.n	8003904 <HAL_ADCEx_MultiModeConfigChannel+0x38>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003920:	b1c6      	cbz	r6, 8003954 <HAL_ADCEx_MultiModeConfigChannel+0x88>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003922:	f8df c064 	ldr.w	ip, [pc, #100]	; 8003988 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 8003926:	684f      	ldr	r7, [r1, #4]
 8003928:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800392c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003930:	433a      	orrs	r2, r7
 8003932:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003936:	68a4      	ldr	r4, [r4, #8]
 8003938:	68aa      	ldr	r2, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800393a:	4322      	orrs	r2, r4
 800393c:	07d4      	lsls	r4, r2, #31
 800393e:	d413      	bmi.n	8003968 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
        MODIFY_REG(tmpADC_Common->CCR,
 8003940:	688a      	ldr	r2, [r1, #8]
 8003942:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8003946:	490f      	ldr	r1, [pc, #60]	; (8003984 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8003948:	4316      	orrs	r6, r2
 800394a:	4021      	ands	r1, r4
 800394c:	430e      	orrs	r6, r1
 800394e:	f8cc 6008 	str.w	r6, [ip, #8]
 8003952:	e7dc      	b.n	800390e <HAL_ADCEx_MultiModeConfigChannel+0x42>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003954:	490c      	ldr	r1, [pc, #48]	; (8003988 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8003956:	688a      	ldr	r2, [r1, #8]
 8003958:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800395c:	608a      	str	r2, [r1, #8]
 800395e:	68a0      	ldr	r0, [r4, #8]
 8003960:	68aa      	ldr	r2, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003962:	4302      	orrs	r2, r0
 8003964:	07d0      	lsls	r0, r2, #31
 8003966:	d503      	bpl.n	8003970 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003968:	2000      	movs	r0, #0
 800396a:	e7d0      	b.n	800390e <HAL_ADCEx_MultiModeConfigChannel+0x42>
  __HAL_LOCK(hadc);
 800396c:	2002      	movs	r0, #2
}
 800396e:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003970:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003972:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003974:	4a03      	ldr	r2, [pc, #12]	; (8003984 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8003976:	4022      	ands	r2, r4
 8003978:	608a      	str	r2, [r1, #8]
 800397a:	e7c8      	b.n	800390e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800397c:	40022000 	.word	0x40022000
 8003980:	40022100 	.word	0x40022100
 8003984:	fffff0e0 	.word	0xfffff0e0
 8003988:	40022300 	.word	0x40022300

0800398c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800398c:	4907      	ldr	r1, [pc, #28]	; (80039ac <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800398e:	0200      	lsls	r0, r0, #8
 8003990:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003992:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003994:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003998:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800399a:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800399e:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80039a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039a4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039a6:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 80039a8:	60c8      	str	r0, [r1, #12]
 80039aa:	4770      	bx	lr
 80039ac:	e000ed00 	.word	0xe000ed00
 80039b0:	05fa0000 	.word	0x05fa0000

080039b4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039b4:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <HAL_NVIC_SetPriority+0x60>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039bc:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039be:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039c2:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c4:	2d04      	cmp	r5, #4
 80039c6:	bf28      	it	cs
 80039c8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ca:	2c06      	cmp	r4, #6
 80039cc:	d918      	bls.n	8003a00 <HAL_NVIC_SetPriority+0x4c>
 80039ce:	3b03      	subs	r3, #3
 80039d0:	f04f 34ff 	mov.w	r4, #4294967295
 80039d4:	409c      	lsls	r4, r3
 80039d6:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039da:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80039de:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e0:	fa02 f205 	lsl.w	r2, r2, r5
 80039e4:	ea21 0102 	bic.w	r1, r1, r2
 80039e8:	fa01 f203 	lsl.w	r2, r1, r3
 80039ec:	ea42 0204 	orr.w	r2, r2, r4
 80039f0:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80039f4:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 80039f6:	db06      	blt.n	8003a06 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f8:	4b07      	ldr	r3, [pc, #28]	; (8003a18 <HAL_NVIC_SetPriority+0x64>)
 80039fa:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80039fc:	bc30      	pop	{r4, r5}
 80039fe:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a00:	2400      	movs	r4, #0
 8003a02:	4623      	mov	r3, r4
 8003a04:	e7e9      	b.n	80039da <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a06:	f000 000f 	and.w	r0, r0, #15
 8003a0a:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <HAL_NVIC_SetPriority+0x68>)
 8003a0c:	541a      	strb	r2, [r3, r0]
 8003a0e:	bc30      	pop	{r4, r5}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	e000ed00 	.word	0xe000ed00
 8003a18:	e000e400 	.word	0xe000e400
 8003a1c:	e000ed14 	.word	0xe000ed14

08003a20 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003a20:	2800      	cmp	r0, #0
 8003a22:	db07      	blt.n	8003a34 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a24:	f000 011f 	and.w	r1, r0, #31
 8003a28:	2301      	movs	r3, #1
 8003a2a:	0940      	lsrs	r0, r0, #5
 8003a2c:	4a02      	ldr	r2, [pc, #8]	; (8003a38 <HAL_NVIC_EnableIRQ+0x18>)
 8003a2e:	408b      	lsls	r3, r1
 8003a30:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	e000e100 	.word	0xe000e100

08003a3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a3c:	3801      	subs	r0, #1
 8003a3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003a42:	d20d      	bcs.n	8003a60 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a44:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a46:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a48:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a4a:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a4c:	25f0      	movs	r5, #240	; 0xf0
 8003a4e:	4c06      	ldr	r4, [pc, #24]	; (8003a68 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a50:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a52:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a54:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a5a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8003a5c:	bc30      	pop	{r4, r5}
 8003a5e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003a60:	2001      	movs	r0, #1
 8003a62:	4770      	bx	lr
 8003a64:	e000e010 	.word	0xe000e010
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8003a6c:	b188      	cbz	r0, 8003a92 <HAL_DAC_Init+0x26>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003a6e:	7903      	ldrb	r3, [r0, #4]
{
 8003a70:	b510      	push	{r4, lr}
  if (hdac->State == HAL_DAC_STATE_RESET)
 8003a72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003a76:	4604      	mov	r4, r0
 8003a78:	b13b      	cbz	r3, 8003a8a <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a7a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a7c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a7e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a80:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8003a82:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a84:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8003a86:	7122      	strb	r2, [r4, #4]
}
 8003a88:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8003a8a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003a8c:	f7fe fede 	bl	800284c <HAL_DAC_MspInit>
 8003a90:	e7f3      	b.n	8003a7a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8003a92:	2001      	movs	r0, #1
}
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop

08003a98 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a98:	7942      	ldrb	r2, [r0, #5]
 8003a9a:	2a01      	cmp	r2, #1
 8003a9c:	d028      	beq.n	8003af0 <HAL_DAC_Start+0x58>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003a9e:	6802      	ldr	r2, [r0, #0]
 8003aa0:	4603      	mov	r3, r0
{
 8003aa2:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdac);
 8003aa4:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8003aa6:	2402      	movs	r4, #2
  __HAL_DAC_ENABLE(hdac, Channel);
 8003aa8:	f001 0610 	and.w	r6, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 8003aac:	7104      	strb	r4, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8003aae:	fa05 f006 	lsl.w	r0, r5, r6
 8003ab2:	6817      	ldr	r7, [r2, #0]
  __HAL_LOCK(hdac);
 8003ab4:	715d      	strb	r5, [r3, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8003ab6:	4338      	orrs	r0, r7
 8003ab8:	6010      	str	r0, [r2, #0]

  if (Channel == DAC_CHANNEL_1)
 8003aba:	b971      	cbnz	r1, 8003ada <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003abc:	6811      	ldr	r1, [r2, #0]
 8003abe:	f001 013e 	and.w	r1, r1, #62	; 0x3e
 8003ac2:	42a1      	cmp	r1, r4
 8003ac4:	d102      	bne.n	8003acc <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003ac6:	6851      	ldr	r1, [r2, #4]
 8003ac8:	4329      	orrs	r1, r5
 8003aca:	6051      	str	r1, [r2, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003acc:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8003ace:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 8003ad0:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8003ad2:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 8003ad4:	715a      	strb	r2, [r3, #5]
}
 8003ad6:	bcf0      	pop	{r4, r5, r6, r7}
 8003ad8:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003ada:	6811      	ldr	r1, [r2, #0]
 8003adc:	40b4      	lsls	r4, r6
 8003ade:	f401 1178 	and.w	r1, r1, #4063232	; 0x3e0000
 8003ae2:	42a1      	cmp	r1, r4
 8003ae4:	d1f2      	bne.n	8003acc <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003ae6:	6851      	ldr	r1, [r2, #4]
 8003ae8:	f041 0102 	orr.w	r1, r1, #2
 8003aec:	6051      	str	r1, [r2, #4]
 8003aee:	e7ed      	b.n	8003acc <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 8003af0:	2002      	movs	r0, #2
}
 8003af2:	4770      	bx	lr

08003af4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003af6:	7944      	ldrb	r4, [r0, #5]
{
 8003af8:	9f06      	ldr	r7, [sp, #24]
  __HAL_LOCK(hdac);
 8003afa:	2c01      	cmp	r4, #1
 8003afc:	d05e      	beq.n	8003bbc <HAL_DAC_Start_DMA+0xc8>
 8003afe:	4604      	mov	r4, r0
 8003b00:	460e      	mov	r6, r1
 8003b02:	2001      	movs	r0, #1
 8003b04:	4611      	mov	r1, r2
 8003b06:	6825      	ldr	r5, [r4, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b08:	2202      	movs	r2, #2
  __HAL_LOCK(hdac);
 8003b0a:	7160      	strb	r0, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b0c:	7122      	strb	r2, [r4, #4]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003b0e:	682a      	ldr	r2, [r5, #0]
  if (Channel == DAC_CHANNEL_1)
 8003b10:	bb4e      	cbnz	r6, 8003b66 <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003b12:	68a0      	ldr	r0, [r4, #8]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003b14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003b18:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8003bd8 <HAL_DAC_Start_DMA+0xe4>

    /* Case of use of channel 1 */
    switch (Alignment)
 8003b1c:	2f04      	cmp	r7, #4
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003b1e:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 8003bdc <HAL_DAC_Start_DMA+0xe8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003b22:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003b26:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8003be0 <HAL_DAC_Start_DMA+0xec>
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003b2a:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003b2e:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003b32:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 8003b34:	d04d      	beq.n	8003bd2 <HAL_DAC_Start_DMA+0xde>
 8003b36:	2f08      	cmp	r7, #8
 8003b38:	d048      	beq.n	8003bcc <HAL_DAC_Start_DMA+0xd8>
 8003b3a:	2f00      	cmp	r7, #0
 8003b3c:	d038      	beq.n	8003bb0 <HAL_DAC_Start_DMA+0xbc>
        break;
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8003b3e:	2200      	movs	r2, #0
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003b40:	682f      	ldr	r7, [r5, #0]
 8003b42:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8003b46:	602f      	str	r7, [r5, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003b48:	f000 fcb8 	bl	80044bc <HAL_DMA_Start_IT>
    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8003b50:	bb48      	cbnz	r0, 8003ba6 <HAL_DAC_Start_DMA+0xb2>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	2101      	movs	r1, #1
 8003b56:	f006 0610 	and.w	r6, r6, #16
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	fa01 f606 	lsl.w	r6, r1, r6
 8003b60:	4316      	orrs	r6, r2
 8003b62:	601e      	str	r6, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8003b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003b66:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003b68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003b6c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8003be4 <HAL_DAC_Start_DMA+0xf0>
    switch (Alignment)
 8003b70:	2f04      	cmp	r7, #4
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003b72:	f8df e074 	ldr.w	lr, [pc, #116]	; 8003be8 <HAL_DAC_Start_DMA+0xf4>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003b76:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003b7a:	f8df c070 	ldr.w	ip, [pc, #112]	; 8003bec <HAL_DAC_Start_DMA+0xf8>
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003b7e:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003b82:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003b86:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 8003b88:	d01d      	beq.n	8003bc6 <HAL_DAC_Start_DMA+0xd2>
 8003b8a:	2f08      	cmp	r7, #8
 8003b8c:	d018      	beq.n	8003bc0 <HAL_DAC_Start_DMA+0xcc>
 8003b8e:	b197      	cbz	r7, 8003bb6 <HAL_DAC_Start_DMA+0xc2>
  if (Channel == DAC_CHANNEL_1)
 8003b90:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003b92:	682f      	ldr	r7, [r5, #0]
 8003b94:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8003b98:	602f      	str	r7, [r5, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003b9a:	f000 fc8f 	bl	80044bc <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d0d5      	beq.n	8003b52 <HAL_DAC_Start_DMA+0x5e>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003ba6:	6923      	ldr	r3, [r4, #16]
 8003ba8:	f043 0304 	orr.w	r3, r3, #4
 8003bac:	6123      	str	r3, [r4, #16]
}
 8003bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003bb0:	f105 0208 	add.w	r2, r5, #8
        break;
 8003bb4:	e7c4      	b.n	8003b40 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003bb6:	f105 0214 	add.w	r2, r5, #20
        break;
 8003bba:	e7ea      	b.n	8003b92 <HAL_DAC_Start_DMA+0x9e>
  __HAL_LOCK(hdac);
 8003bbc:	2002      	movs	r0, #2
}
 8003bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003bc0:	f105 021c 	add.w	r2, r5, #28
        break;
 8003bc4:	e7e5      	b.n	8003b92 <HAL_DAC_Start_DMA+0x9e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003bc6:	f105 0218 	add.w	r2, r5, #24
        break;
 8003bca:	e7e2      	b.n	8003b92 <HAL_DAC_Start_DMA+0x9e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003bcc:	f105 0210 	add.w	r2, r5, #16
        break;
 8003bd0:	e7b6      	b.n	8003b40 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003bd2:	f105 020c 	add.w	r2, r5, #12
        break;
 8003bd6:	e7b3      	b.n	8003b40 <HAL_DAC_Start_DMA+0x4c>
 8003bd8:	08003bf1 	.word	0x08003bf1
 8003bdc:	08003c01 	.word	0x08003c01
 8003be0:	08003c11 	.word	0x08003c11
 8003be4:	08003ded 	.word	0x08003ded
 8003be8:	08003e01 	.word	0x08003e01
 8003bec:	08003e11 	.word	0x08003e11

08003bf0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bf2:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f7fd ff77 	bl	8001ae8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	7123      	strb	r3, [r4, #4]
}
 8003bfe:	bd10      	pop	{r4, pc}

08003c00 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003c00:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003c02:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003c04:	f7fd ff82 	bl	8001b0c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003c08:	bd08      	pop	{r3, pc}
 8003c0a:	bf00      	nop

08003c0c <HAL_DAC_ErrorCallbackCh1>:
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop

08003c10 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003c10:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c12:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003c14:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003c16:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003c18:	f043 0304 	orr.w	r3, r3, #4
 8003c1c:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003c1e:	f7ff fff5 	bl	8003c0c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003c22:	2301      	movs	r3, #1
 8003c24:	7123      	strb	r3, [r4, #4]
}
 8003c26:	bd10      	pop	{r4, pc}

08003c28 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop

08003c2c <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003c2c:	6803      	ldr	r3, [r0, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	0491      	lsls	r1, r2, #18
{
 8003c32:	b510      	push	{r4, lr}
 8003c34:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003c36:	d502      	bpl.n	8003c3e <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c3a:	0492      	lsls	r2, r2, #18
 8003c3c:	d418      	bmi.n	8003c70 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	0091      	lsls	r1, r2, #2
 8003c42:	d502      	bpl.n	8003c4a <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c46:	0092      	lsls	r2, r2, #2
 8003c48:	d400      	bmi.n	8003c4c <HAL_DAC_IRQHandler+0x20>
}
 8003c4a:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8003c4c:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003c4e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003c52:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8003c54:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003c56:	6922      	ldr	r2, [r4, #16]
 8003c58:	f042 0202 	orr.w	r2, r2, #2
 8003c5c:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003c5e:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8003c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003c6a:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003c6c:	f000 b8dc 	b.w	8003e28 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8003c70:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003c72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8003c76:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003c78:	6902      	ldr	r2, [r0, #16]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003c80:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c88:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003c8a:	f7ff ffcd 	bl	8003c28 <HAL_DAC_DMAUnderrunCallbackCh1>
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	e7d5      	b.n	8003c3e <HAL_DAC_IRQHandler+0x12>
 8003c92:	bf00      	nop

08003c94 <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 8003c94:	7943      	ldrb	r3, [r0, #5]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d057      	beq.n	8003d4a <HAL_DAC_ConfigChannel+0xb6>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8003c9a:	680b      	ldr	r3, [r1, #0]
{
 8003c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	4617      	mov	r7, r2
 8003ca4:	460e      	mov	r6, r1
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ca6:	f04f 0202 	mov.w	r2, #2
  __HAL_LOCK(hdac);
 8003caa:	f04f 0101 	mov.w	r1, #1
 8003cae:	4604      	mov	r4, r0
  hdac->State = HAL_DAC_STATE_BUSY;
 8003cb0:	7102      	strb	r2, [r0, #4]
  __HAL_LOCK(hdac);
 8003cb2:	7141      	strb	r1, [r0, #5]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003cb4:	d04d      	beq.n	8003d52 <HAL_DAC_ConfigChannel+0xbe>
 8003cb6:	f007 0210 	and.w	r2, r7, #16
 8003cba:	6805      	ldr	r5, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003cbc:	6931      	ldr	r1, [r6, #16]
 8003cbe:	2901      	cmp	r1, #1
 8003cc0:	d039      	beq.n	8003d36 <HAL_DAC_ConfigChannel+0xa2>
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003cc2:	2107      	movs	r1, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003cc4:	68f0      	ldr	r0, [r6, #12]
  tmpreg1 = hdac->Instance->MCR;
 8003cc6:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003cca:	4091      	lsls	r1, r2
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003ccc:	2801      	cmp	r0, #1
 8003cce:	68b7      	ldr	r7, [r6, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003cd0:	ea2c 0101 	bic.w	r1, ip, r1
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003cd4:	d02d      	beq.n	8003d32 <HAL_DAC_ConfigChannel+0x9e>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003cd6:	2802      	cmp	r0, #2
 8003cd8:	d039      	beq.n	8003d4e <HAL_DAC_ConfigChannel+0xba>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003cda:	fab7 f087 	clz	r0, r7
 8003cde:	0940      	lsrs	r0, r0, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003ce0:	433b      	orrs	r3, r7
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003ce2:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ce6:	6876      	ldr	r6, [r6, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003ce8:	f640 77fe 	movw	r7, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003cec:	4303      	orrs	r3, r0
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003cee:	fa08 f802 	lsl.w	r8, r8, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003cf2:	4097      	lsls	r7, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003cf4:	4096      	lsls	r6, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003cf6:	4093      	lsls	r3, r2
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003cf8:	20c0      	movs	r0, #192	; 0xc0
  __HAL_UNLOCK(hdac);
 8003cfa:	f04f 0c00 	mov.w	ip, #0
  hdac->State = HAL_DAC_STATE_READY;
 8003cfe:	f04f 0e01 	mov.w	lr, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d02:	430b      	orrs	r3, r1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003d04:	fa00 f102 	lsl.w	r1, r0, r2
  return HAL_OK;
 8003d08:	4660      	mov	r0, ip
  hdac->Instance->MCR = tmpreg1;
 8003d0a:	63eb      	str	r3, [r5, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003d0c:	682b      	ldr	r3, [r5, #0]
 8003d0e:	ea23 0308 	bic.w	r3, r3, r8
 8003d12:	602b      	str	r3, [r5, #0]
  tmpreg1 = hdac->Instance->CR;
 8003d14:	682b      	ldr	r3, [r5, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003d16:	ea23 0307 	bic.w	r3, r3, r7
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d1a:	4333      	orrs	r3, r6
  hdac->Instance->CR = tmpreg1;
 8003d1c:	602b      	str	r3, [r5, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003d1e:	682a      	ldr	r2, [r5, #0]
 8003d20:	ea22 0201 	bic.w	r2, r2, r1
 8003d24:	602a      	str	r2, [r5, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8003d26:	f884 e004 	strb.w	lr, [r4, #4]
  __HAL_UNLOCK(hdac);
 8003d2a:	f884 c005 	strb.w	ip, [r4, #5]
}
 8003d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 8003d32:	2000      	movs	r0, #0
 8003d34:	e7d4      	b.n	8003ce0 <HAL_DAC_ConfigChannel+0x4c>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003d36:	271f      	movs	r7, #31
    tmpreg1 = hdac->Instance->CCR;
 8003d38:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d3a:	6971      	ldr	r1, [r6, #20]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003d3c:	4097      	lsls	r7, r2
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d3e:	4091      	lsls	r1, r2
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003d40:	ea20 0007 	bic.w	r0, r0, r7
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d44:	4301      	orrs	r1, r0
    hdac->Instance->CCR = tmpreg1;
 8003d46:	63a9      	str	r1, [r5, #56]	; 0x38
 8003d48:	e7bb      	b.n	8003cc2 <HAL_DAC_ConfigChannel+0x2e>
  __HAL_LOCK(hdac);
 8003d4a:	2002      	movs	r0, #2
}
 8003d4c:	4770      	bx	lr
    connectOnChip = DAC_MCR_MODE1_0;
 8003d4e:	2001      	movs	r0, #1
 8003d50:	e7c6      	b.n	8003ce0 <HAL_DAC_ConfigChannel+0x4c>
    tickstart = HAL_GetTick();
 8003d52:	f7fe ffeb 	bl	8002d2c <HAL_GetTick>
 8003d56:	4605      	mov	r5, r0
    if (Channel == DAC_CHANNEL_1)
 8003d58:	b9c7      	cbnz	r7, 8003d8c <HAL_DAC_ConfigChannel+0xf8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d5a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8003de4 <HAL_DAC_ConfigChannel+0x150>
 8003d5e:	e004      	b.n	8003d6a <HAL_DAC_ConfigChannel+0xd6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003d60:	f7fe ffe4 	bl	8002d2c <HAL_GetTick>
 8003d64:	1b40      	subs	r0, r0, r5
 8003d66:	2801      	cmp	r0, #1
 8003d68:	d833      	bhi.n	8003dd2 <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6e:	ea13 0f08 	tst.w	r3, r8
 8003d72:	d1f5      	bne.n	8003d60 <HAL_DAC_ConfigChannel+0xcc>
      HAL_Delay(1);
 8003d74:	2001      	movs	r0, #1
 8003d76:	f7fe ffdf 	bl	8002d38 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003d7a:	6825      	ldr	r5, [r4, #0]
 8003d7c:	69b3      	ldr	r3, [r6, #24]
 8003d7e:	642b      	str	r3, [r5, #64]	; 0x40
 8003d80:	e00e      	b.n	8003da0 <HAL_DAC_ConfigChannel+0x10c>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003d82:	f7fe ffd3 	bl	8002d2c <HAL_GetTick>
 8003d86:	1b40      	subs	r0, r0, r5
 8003d88:	2801      	cmp	r0, #1
 8003d8a:	d822      	bhi.n	8003dd2 <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	dbf6      	blt.n	8003d82 <HAL_DAC_ConfigChannel+0xee>
      HAL_Delay(1U);
 8003d94:	2001      	movs	r0, #1
 8003d96:	f7fe ffcf 	bl	8002d38 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003d9a:	6825      	ldr	r5, [r4, #0]
 8003d9c:	69b3      	ldr	r3, [r6, #24]
 8003d9e:	646b      	str	r3, [r5, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003da0:	f007 0210 	and.w	r2, r7, #16
 8003da4:	f240 3cff 	movw	ip, #1023	; 0x3ff
 8003da8:	6cab      	ldr	r3, [r5, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003daa:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003dac:	69f0      	ldr	r0, [r6, #28]
 8003dae:	fa0c fc02 	lsl.w	ip, ip, r2
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003db2:	fa01 f702 	lsl.w	r7, r1, r2
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003db6:	4090      	lsls	r0, r2
 8003db8:	ea23 030c 	bic.w	r3, r3, ip
 8003dbc:	4303      	orrs	r3, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003dbe:	6a30      	ldr	r0, [r6, #32]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003dc0:	64ab      	str	r3, [r5, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003dc2:	4090      	lsls	r0, r2
 8003dc4:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8003dc6:	6833      	ldr	r3, [r6, #0]
 8003dc8:	ea21 0107 	bic.w	r1, r1, r7
 8003dcc:	4301      	orrs	r1, r0
 8003dce:	64e9      	str	r1, [r5, #76]	; 0x4c
 8003dd0:	e774      	b.n	8003cbc <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003dd2:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003dd4:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003dd6:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 8003dda:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003ddc:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003dde:	7122      	strb	r2, [r4, #4]
          return HAL_TIMEOUT;
 8003de0:	e7a5      	b.n	8003d2e <HAL_DAC_ConfigChannel+0x9a>
 8003de2:	bf00      	nop
 8003de4:	20008000 	.word	0x20008000

08003de8 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop

08003dec <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003dec:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dee:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003df0:	4620      	mov	r0, r4
 8003df2:	f7ff fff9 	bl	8003de8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003df6:	2301      	movs	r3, #1
 8003df8:	7123      	strb	r3, [r4, #4]
}
 8003dfa:	bd10      	pop	{r4, pc}

08003dfc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop

08003e00 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003e00:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003e02:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003e04:	f7ff fffa 	bl	8003dfc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003e08:	bd08      	pop	{r3, pc}
 8003e0a:	bf00      	nop

08003e0c <HAL_DACEx_ErrorCallbackCh2>:
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop

08003e10 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003e10:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e12:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003e14:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003e16:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003e18:	f043 0304 	orr.w	r3, r3, #4
 8003e1c:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003e1e:	f7ff fff5 	bl	8003e0c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e22:	2301      	movs	r3, #1
 8003e24:	7123      	strb	r3, [r4, #4]
}
 8003e26:	bd10      	pop	{r4, pc}

08003e28 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop

08003e2c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e2c:	6802      	ldr	r2, [r0, #0]
{
 8003e2e:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e30:	4b34      	ldr	r3, [pc, #208]	; (8003f04 <DMA_CalcBaseAndBitshift+0xd8>)
 8003e32:	4835      	ldr	r0, [pc, #212]	; (8003f08 <DMA_CalcBaseAndBitshift+0xdc>)
{
 8003e34:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e36:	4c35      	ldr	r4, [pc, #212]	; (8003f0c <DMA_CalcBaseAndBitshift+0xe0>)
 8003e38:	4d35      	ldr	r5, [pc, #212]	; (8003f10 <DMA_CalcBaseAndBitshift+0xe4>)
 8003e3a:	42a2      	cmp	r2, r4
 8003e3c:	bf18      	it	ne
 8003e3e:	429a      	cmpne	r2, r3
 8003e40:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8003e44:	bf0c      	ite	eq
 8003e46:	2301      	moveq	r3, #1
 8003e48:	2300      	movne	r3, #0
 8003e4a:	4282      	cmp	r2, r0
 8003e4c:	bf08      	it	eq
 8003e4e:	f043 0301 	orreq.w	r3, r3, #1
 8003e52:	3048      	adds	r0, #72	; 0x48
 8003e54:	42aa      	cmp	r2, r5
 8003e56:	bf08      	it	eq
 8003e58:	f043 0301 	orreq.w	r3, r3, #1
 8003e5c:	3548      	adds	r5, #72	; 0x48
 8003e5e:	42a2      	cmp	r2, r4
 8003e60:	bf08      	it	eq
 8003e62:	f043 0301 	orreq.w	r3, r3, #1
 8003e66:	3448      	adds	r4, #72	; 0x48
 8003e68:	4282      	cmp	r2, r0
 8003e6a:	bf08      	it	eq
 8003e6c:	f043 0301 	orreq.w	r3, r3, #1
 8003e70:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8003e74:	42aa      	cmp	r2, r5
 8003e76:	bf08      	it	eq
 8003e78:	f043 0301 	orreq.w	r3, r3, #1
 8003e7c:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8003e80:	42a2      	cmp	r2, r4
 8003e82:	bf08      	it	eq
 8003e84:	f043 0301 	orreq.w	r3, r3, #1
 8003e88:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8003e8c:	4282      	cmp	r2, r0
 8003e8e:	bf08      	it	eq
 8003e90:	f043 0301 	orreq.w	r3, r3, #1
 8003e94:	3048      	adds	r0, #72	; 0x48
 8003e96:	42aa      	cmp	r2, r5
 8003e98:	bf08      	it	eq
 8003e9a:	f043 0301 	orreq.w	r3, r3, #1
 8003e9e:	3548      	adds	r5, #72	; 0x48
 8003ea0:	42a2      	cmp	r2, r4
 8003ea2:	bf08      	it	eq
 8003ea4:	f043 0301 	orreq.w	r3, r3, #1
 8003ea8:	3448      	adds	r4, #72	; 0x48
 8003eaa:	4282      	cmp	r2, r0
 8003eac:	bf08      	it	eq
 8003eae:	f043 0301 	orreq.w	r3, r3, #1
 8003eb2:	3048      	adds	r0, #72	; 0x48
 8003eb4:	42aa      	cmp	r2, r5
 8003eb6:	bf08      	it	eq
 8003eb8:	f043 0301 	orreq.w	r3, r3, #1
 8003ebc:	42a2      	cmp	r2, r4
 8003ebe:	bf08      	it	eq
 8003ec0:	f043 0301 	orreq.w	r3, r3, #1
 8003ec4:	4282      	cmp	r2, r0
 8003ec6:	bf08      	it	eq
 8003ec8:	f043 0301 	orreq.w	r3, r3, #1
 8003ecc:	b913      	cbnz	r3, 8003ed4 <DMA_CalcBaseAndBitshift+0xa8>
 8003ece:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <DMA_CalcBaseAndBitshift+0xe8>)
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d112      	bne.n	8003efa <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ed4:	b2d3      	uxtb	r3, r2
 8003ed6:	4d10      	ldr	r5, [pc, #64]	; (8003f18 <DMA_CalcBaseAndBitshift+0xec>)
 8003ed8:	4810      	ldr	r0, [pc, #64]	; (8003f1c <DMA_CalcBaseAndBitshift+0xf0>)
 8003eda:	3b10      	subs	r3, #16

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003edc:	4c10      	ldr	r4, [pc, #64]	; (8003f20 <DMA_CalcBaseAndBitshift+0xf4>)
 8003ede:	4010      	ands	r0, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ee0:	fba5 5303 	umull	r5, r3, r5, r3
 8003ee4:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ee6:	f003 0207 	and.w	r2, r3, #7

    if (stream_number > 3U)
 8003eea:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003eec:	5ca2      	ldrb	r2, [r4, r2]
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003eee:	bf88      	it	hi
 8003ef0:	3004      	addhi	r0, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ef2:	65ca      	str	r2, [r1, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003ef4:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8003ef6:	bc30      	pop	{r4, r5}
 8003ef8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003efa:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 8003efe:	6588      	str	r0, [r1, #88]	; 0x58
 8003f00:	e7f9      	b.n	8003ef6 <DMA_CalcBaseAndBitshift+0xca>
 8003f02:	bf00      	nop
 8003f04:	40020010 	.word	0x40020010
 8003f08:	40020040 	.word	0x40020040
 8003f0c:	40020028 	.word	0x40020028
 8003f10:	40020058 	.word	0x40020058
 8003f14:	400204b8 	.word	0x400204b8
 8003f18:	aaaaaaab 	.word	0xaaaaaaab
 8003f1c:	fffffc00 	.word	0xfffffc00
 8003f20:	0800f968 	.word	0x0800f968

08003f24 <HAL_DMA_Init>:
{
 8003f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f28:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003f2a:	f7fe feff 	bl	8002d2c <HAL_GetTick>
  if(hdma == NULL)
 8003f2e:	2c00      	cmp	r4, #0
 8003f30:	f000 8182 	beq.w	8004238 <HAL_DMA_Init+0x314>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	4605      	mov	r5, r0
 8003f38:	4a2b      	ldr	r2, [pc, #172]	; (8003fe8 <HAL_DMA_Init+0xc4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d049      	beq.n	8003fd2 <HAL_DMA_Init+0xae>
 8003f3e:	3218      	adds	r2, #24
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d046      	beq.n	8003fd2 <HAL_DMA_Init+0xae>
 8003f44:	3230      	adds	r2, #48	; 0x30
 8003f46:	4829      	ldr	r0, [pc, #164]	; (8003fec <HAL_DMA_Init+0xc8>)
 8003f48:	4929      	ldr	r1, [pc, #164]	; (8003ff0 <HAL_DMA_Init+0xcc>)
 8003f4a:	4283      	cmp	r3, r0
 8003f4c:	bf18      	it	ne
 8003f4e:	4293      	cmpne	r3, r2
 8003f50:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8003f54:	bf0c      	ite	eq
 8003f56:	2201      	moveq	r2, #1
 8003f58:	2200      	movne	r2, #0
 8003f5a:	428b      	cmp	r3, r1
 8003f5c:	bf08      	it	eq
 8003f5e:	f042 0201 	orreq.w	r2, r2, #1
 8003f62:	3130      	adds	r1, #48	; 0x30
 8003f64:	4283      	cmp	r3, r0
 8003f66:	bf08      	it	eq
 8003f68:	f042 0201 	orreq.w	r2, r2, #1
 8003f6c:	3030      	adds	r0, #48	; 0x30
 8003f6e:	428b      	cmp	r3, r1
 8003f70:	bf08      	it	eq
 8003f72:	f042 0201 	orreq.w	r2, r2, #1
 8003f76:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8003f7a:	4283      	cmp	r3, r0
 8003f7c:	bf08      	it	eq
 8003f7e:	f042 0201 	orreq.w	r2, r2, #1
 8003f82:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8003f86:	428b      	cmp	r3, r1
 8003f88:	bf08      	it	eq
 8003f8a:	f042 0201 	orreq.w	r2, r2, #1
 8003f8e:	3130      	adds	r1, #48	; 0x30
 8003f90:	4283      	cmp	r3, r0
 8003f92:	bf08      	it	eq
 8003f94:	f042 0201 	orreq.w	r2, r2, #1
 8003f98:	3030      	adds	r0, #48	; 0x30
 8003f9a:	428b      	cmp	r3, r1
 8003f9c:	bf08      	it	eq
 8003f9e:	f042 0201 	orreq.w	r2, r2, #1
 8003fa2:	3130      	adds	r1, #48	; 0x30
 8003fa4:	4283      	cmp	r3, r0
 8003fa6:	bf08      	it	eq
 8003fa8:	f042 0201 	orreq.w	r2, r2, #1
 8003fac:	3030      	adds	r0, #48	; 0x30
 8003fae:	428b      	cmp	r3, r1
 8003fb0:	bf08      	it	eq
 8003fb2:	f042 0201 	orreq.w	r2, r2, #1
 8003fb6:	3130      	adds	r1, #48	; 0x30
 8003fb8:	4283      	cmp	r3, r0
 8003fba:	bf08      	it	eq
 8003fbc:	f042 0201 	orreq.w	r2, r2, #1
 8003fc0:	428b      	cmp	r3, r1
 8003fc2:	bf08      	it	eq
 8003fc4:	f042 0201 	orreq.w	r2, r2, #1
 8003fc8:	b91a      	cbnz	r2, 8003fd2 <HAL_DMA_Init+0xae>
 8003fca:	4a0a      	ldr	r2, [pc, #40]	; (8003ff4 <HAL_DMA_Init+0xd0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	f040 81bf 	bne.w	8004350 <HAL_DMA_Init+0x42c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fd2:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8003fd4:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fd6:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8003fda:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 8003fdc:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	e00e      	b.n	8004006 <HAL_DMA_Init+0xe2>
 8003fe8:	40020010 	.word	0x40020010
 8003fec:	40020040 	.word	0x40020040
 8003ff0:	40020070 	.word	0x40020070
 8003ff4:	400204b8 	.word	0x400204b8
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ff8:	f7fe fe98 	bl	8002d2c <HAL_GetTick>
 8003ffc:	1b40      	subs	r0, r0, r5
 8003ffe:	2805      	cmp	r0, #5
 8004000:	f200 8112 	bhi.w	8004228 <HAL_DMA_Init+0x304>
 8004004:	6823      	ldr	r3, [r4, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	07d6      	lsls	r6, r2, #31
 800400a:	d4f5      	bmi.n	8003ff8 <HAL_DMA_Init+0xd4>
    registerValue |=  hdma->Init.Direction           |
 800400c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004010:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8004012:	430a      	orrs	r2, r1
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004014:	681f      	ldr	r7, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004016:	e9d4 6105 	ldrd	r6, r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401a:	4302      	orrs	r2, r0
 800401c:	4332      	orrs	r2, r6
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800401e:	4eb5      	ldr	r6, [pc, #724]	; (80042f4 <HAL_DMA_Init+0x3d0>)
            hdma->Init.Mode                | hdma->Init.Priority;
 8004020:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004024:	430a      	orrs	r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004026:	403e      	ands	r6, r7
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004028:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800402a:	6a65      	ldr	r5, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 800402c:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800402e:	2d04      	cmp	r5, #4
    registerValue |=  hdma->Init.Direction           |
 8004030:	ea42 0206 	orr.w	r2, r2, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004034:	f000 8103 	beq.w	800423e <HAL_DMA_Init+0x31a>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004038:	4eaf      	ldr	r6, [pc, #700]	; (80042f8 <HAL_DMA_Init+0x3d4>)
 800403a:	48b0      	ldr	r0, [pc, #704]	; (80042fc <HAL_DMA_Init+0x3d8>)
 800403c:	6836      	ldr	r6, [r6, #0]
 800403e:	4030      	ands	r0, r6
 8004040:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8004044:	f080 8108 	bcs.w	8004258 <HAL_DMA_Init+0x334>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004048:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800404a:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800404c:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8004050:	432a      	orrs	r2, r5
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004052:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004054:	4620      	mov	r0, r4
 8004056:	f7ff fee9 	bl	8003e2c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800405a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800405c:	233f      	movs	r3, #63	; 0x3f
 800405e:	f002 021f 	and.w	r2, r2, #31
 8004062:	4093      	lsls	r3, r2
 8004064:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004066:	6822      	ldr	r2, [r4, #0]
 8004068:	4ba5      	ldr	r3, [pc, #660]	; (8004300 <HAL_DMA_Init+0x3dc>)
 800406a:	48a6      	ldr	r0, [pc, #664]	; (8004304 <HAL_DMA_Init+0x3e0>)
 800406c:	49a6      	ldr	r1, [pc, #664]	; (8004308 <HAL_DMA_Init+0x3e4>)
 800406e:	4282      	cmp	r2, r0
 8004070:	bf18      	it	ne
 8004072:	429a      	cmpne	r2, r3
 8004074:	4ea5      	ldr	r6, [pc, #660]	; (800430c <HAL_DMA_Init+0x3e8>)
 8004076:	4da6      	ldr	r5, [pc, #664]	; (8004310 <HAL_DMA_Init+0x3ec>)
 8004078:	f100 0060 	add.w	r0, r0, #96	; 0x60
 800407c:	bf0c      	ite	eq
 800407e:	2301      	moveq	r3, #1
 8004080:	2300      	movne	r3, #0
 8004082:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 800433c <HAL_DMA_Init+0x418>
 8004086:	428a      	cmp	r2, r1
 8004088:	bf08      	it	eq
 800408a:	f043 0301 	orreq.w	r3, r3, #1
 800408e:	3160      	adds	r1, #96	; 0x60
 8004090:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8004340 <HAL_DMA_Init+0x41c>
 8004094:	42b2      	cmp	r2, r6
 8004096:	bf08      	it	eq
 8004098:	f043 0301 	orreq.w	r3, r3, #1
 800409c:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 8004344 <HAL_DMA_Init+0x420>
 80040a0:	4f9c      	ldr	r7, [pc, #624]	; (8004314 <HAL_DMA_Init+0x3f0>)
 80040a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80040a6:	42aa      	cmp	r2, r5
 80040a8:	bf08      	it	eq
 80040aa:	f043 0301 	orreq.w	r3, r3, #1
 80040ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80040b2:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004338 <HAL_DMA_Init+0x414>
 80040b6:	4282      	cmp	r2, r0
 80040b8:	bf08      	it	eq
 80040ba:	f043 0301 	orreq.w	r3, r3, #1
 80040be:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80040c2:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8004348 <HAL_DMA_Init+0x424>
 80040c6:	428a      	cmp	r2, r1
 80040c8:	bf08      	it	eq
 80040ca:	f043 0301 	orreq.w	r3, r3, #1
 80040ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80040d2:	4562      	cmp	r2, ip
 80040d4:	bf08      	it	eq
 80040d6:	f043 0301 	orreq.w	r3, r3, #1
 80040da:	f8df c254 	ldr.w	ip, [pc, #596]	; 8004330 <HAL_DMA_Init+0x40c>
 80040de:	4542      	cmp	r2, r8
 80040e0:	bf08      	it	eq
 80040e2:	f043 0301 	orreq.w	r3, r3, #1
 80040e6:	eba2 0c0c 	sub.w	ip, r2, ip
 80040ea:	f8df 8248 	ldr.w	r8, [pc, #584]	; 8004334 <HAL_DMA_Init+0x410>
 80040ee:	4572      	cmp	r2, lr
 80040f0:	bf08      	it	eq
 80040f2:	f043 0301 	orreq.w	r3, r3, #1
 80040f6:	fabc fc8c 	clz	ip, ip
 80040fa:	eba2 0808 	sub.w	r8, r2, r8
 80040fe:	f8df e24c 	ldr.w	lr, [pc, #588]	; 800434c <HAL_DMA_Init+0x428>
 8004102:	42ba      	cmp	r2, r7
 8004104:	bf08      	it	eq
 8004106:	f043 0301 	orreq.w	r3, r3, #1
 800410a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800410e:	eba2 070a 	sub.w	r7, r2, sl
 8004112:	fab8 f888 	clz	r8, r8
 8004116:	42b2      	cmp	r2, r6
 8004118:	bf08      	it	eq
 800411a:	f043 0301 	orreq.w	r3, r3, #1
 800411e:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 8004122:	eba2 060e 	sub.w	r6, r2, lr
 8004126:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800412a:	42aa      	cmp	r2, r5
 800412c:	bf08      	it	eq
 800412e:	f043 0301 	orreq.w	r3, r3, #1
 8004132:	fab7 f787 	clz	r7, r7
 8004136:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800413a:	eba2 050a 	sub.w	r5, r2, sl
 800413e:	4282      	cmp	r2, r0
 8004140:	bf08      	it	eq
 8004142:	f043 0301 	orreq.w	r3, r3, #1
 8004146:	097f      	lsrs	r7, r7, #5
 8004148:	fab6 f686 	clz	r6, r6
 800414c:	eba2 000e 	sub.w	r0, r2, lr
 8004150:	428a      	cmp	r2, r1
 8004152:	bf08      	it	eq
 8004154:	f043 0301 	orreq.w	r3, r3, #1
 8004158:	fab5 f585 	clz	r5, r5
 800415c:	0976      	lsrs	r6, r6, #5
 800415e:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 8004162:	454a      	cmp	r2, r9
 8004164:	bf08      	it	eq
 8004166:	f043 0301 	orreq.w	r3, r3, #1
 800416a:	096d      	lsrs	r5, r5, #5
 800416c:	fab0 f080 	clz	r0, r0
 8004170:	eba2 010a 	sub.w	r1, r2, sl
 8004174:	ea4c 0303 	orr.w	r3, ip, r3
 8004178:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800417c:	0940      	lsrs	r0, r0, #5
 800417e:	fab1 f181 	clz	r1, r1
 8004182:	ea48 0303 	orr.w	r3, r8, r3
 8004186:	eba2 0e0e 	sub.w	lr, r2, lr
 800418a:	0949      	lsrs	r1, r1, #5
 800418c:	433b      	orrs	r3, r7
 800418e:	fabe fe8e 	clz	lr, lr
 8004192:	4333      	orrs	r3, r6
 8004194:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8004198:	432b      	orrs	r3, r5
 800419a:	4303      	orrs	r3, r0
 800419c:	430b      	orrs	r3, r1
 800419e:	d102      	bne.n	80041a6 <HAL_DMA_Init+0x282>
 80041a0:	f1be 0f00 	cmp.w	lr, #0
 80041a4:	d039      	beq.n	800421a <HAL_DMA_Init+0x2f6>
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80041a6:	ea4c 0c08 	orr.w	ip, ip, r8
 80041aa:	b2d3      	uxtb	r3, r2
 80041ac:	ea47 070c 	orr.w	r7, r7, ip
 80041b0:	433e      	orrs	r6, r7
 80041b2:	4335      	orrs	r5, r6
 80041b4:	4328      	orrs	r0, r5
 80041b6:	4301      	orrs	r1, r0
 80041b8:	ea5e 0101 	orrs.w	r1, lr, r1
 80041bc:	f000 8127 	beq.w	800440e <HAL_DMA_Init+0x4ea>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80041c0:	4d55      	ldr	r5, [pc, #340]	; (8004318 <HAL_DMA_Init+0x3f4>)
 80041c2:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80041c4:	4a55      	ldr	r2, [pc, #340]	; (800431c <HAL_DMA_Init+0x3f8>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041c6:	2001      	movs	r0, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80041c8:	fba5 5303 	umull	r5, r3, r5, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80041cc:	4d54      	ldr	r5, [pc, #336]	; (8004320 <HAL_DMA_Init+0x3fc>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80041ce:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80041d0:	6665      	str	r5, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80041d2:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041d4:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80041d8:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041da:	fa00 f303 	lsl.w	r3, r0, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80041de:	6622      	str	r2, [r4, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041e0:	66a3      	str	r3, [r4, #104]	; 0x68
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80041e2:	68a0      	ldr	r0, [r4, #8]
 80041e4:	2880      	cmp	r0, #128	; 0x80
 80041e6:	d069      	beq.n	80042bc <HAL_DMA_Init+0x398>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80041e8:	6860      	ldr	r0, [r4, #4]
 80041ea:	b2c6      	uxtb	r6, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80041ec:	3801      	subs	r0, #1
 80041ee:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80041f0:	6016      	str	r6, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041f2:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80041f4:	d866      	bhi.n	80042c4 <HAL_DMA_Init+0x3a0>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80041f6:	1e70      	subs	r0, r6, #1
 80041f8:	2807      	cmp	r0, #7
 80041fa:	d868      	bhi.n	80042ce <HAL_DMA_Init+0x3aa>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80041fc:	2900      	cmp	r1, #0
 80041fe:	f000 8133 	beq.w	8004468 <HAL_DMA_Init+0x544>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004202:	4b48      	ldr	r3, [pc, #288]	; (8004324 <HAL_DMA_Init+0x400>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004204:	4948      	ldr	r1, [pc, #288]	; (8004328 <HAL_DMA_Init+0x404>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004206:	4433      	add	r3, r6
 8004208:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800420a:	2201      	movs	r2, #1
 800420c:	4082      	lsls	r2, r0
 800420e:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 8004212:	6762      	str	r2, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004214:	2000      	movs	r0, #0
 8004216:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004218:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800421a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800421c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800421e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004220:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004228:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800422a:	2303      	movs	r3, #3
        return HAL_ERROR;
 800422c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800422e:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004230:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 8004238:	2001      	movs	r0, #1
}
 800423a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800423e:	482e      	ldr	r0, [pc, #184]	; (80042f8 <HAL_DMA_Init+0x3d4>)
 8004240:	4e2e      	ldr	r6, [pc, #184]	; (80042fc <HAL_DMA_Init+0x3d8>)
 8004242:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004244:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004246:	403e      	ands	r6, r7
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004248:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800424a:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800424e:	ea40 0707 	orr.w	r7, r0, r7
 8004252:	ea42 0207 	orr.w	r2, r2, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004256:	d346      	bcc.n	80042e6 <HAL_DMA_Init+0x3c2>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004258:	6866      	ldr	r6, [r4, #4]
 800425a:	f1a6 0729 	sub.w	r7, r6, #41	; 0x29
 800425e:	2f1f      	cmp	r7, #31
 8004260:	d925      	bls.n	80042ae <HAL_DMA_Init+0x38a>
 8004262:	3e4f      	subs	r6, #79	; 0x4f
 8004264:	2e03      	cmp	r6, #3
 8004266:	d926      	bls.n	80042b6 <HAL_DMA_Init+0x392>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004268:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800426a:	2d04      	cmp	r5, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800426c:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800426e:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8004272:	ea42 0205 	orr.w	r2, r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004276:	f47f aeec 	bne.w	8004052 <HAL_DMA_Init+0x12e>
 800427a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800427c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800427e:	432a      	orrs	r2, r5
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004280:	2800      	cmp	r0, #0
 8004282:	f43f aee6 	beq.w	8004052 <HAL_DMA_Init+0x12e>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004286:	b331      	cbz	r1, 80042d6 <HAL_DMA_Init+0x3b2>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004288:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800428c:	f000 80dd 	beq.w	800444a <HAL_DMA_Init+0x526>
    switch (hdma->Init.FIFOThreshold)
 8004290:	2d02      	cmp	r5, #2
 8004292:	d905      	bls.n	80042a0 <HAL_DMA_Init+0x37c>
 8004294:	2d03      	cmp	r5, #3
 8004296:	f47f aedc 	bne.w	8004052 <HAL_DMA_Init+0x12e>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800429a:	01c1      	lsls	r1, r0, #7
 800429c:	f57f aed9 	bpl.w	8004052 <HAL_DMA_Init+0x12e>
          hdma->State = HAL_DMA_STATE_READY;
 80042a0:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042a2:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80042a4:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042a6:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80042a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          return HAL_ERROR;
 80042ac:	e7c2      	b.n	8004234 <HAL_DMA_Init+0x310>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80042ae:	481f      	ldr	r0, [pc, #124]	; (800432c <HAL_DMA_Init+0x408>)
 80042b0:	40f8      	lsrs	r0, r7
 80042b2:	07c0      	lsls	r0, r0, #31
 80042b4:	d5d5      	bpl.n	8004262 <HAL_DMA_Init+0x33e>
        registerValue |= DMA_SxCR_TRBUFF;
 80042b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80042ba:	e7d5      	b.n	8004268 <HAL_DMA_Init+0x344>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80042bc:	2100      	movs	r1, #0
 80042be:	6061      	str	r1, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80042c0:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042c2:	606b      	str	r3, [r5, #4]
      hdma->DMAmuxRequestGen = 0U;
 80042c4:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 80042c6:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80042ca:	6763      	str	r3, [r4, #116]	; 0x74
 80042cc:	e7a5      	b.n	800421a <HAL_DMA_Init+0x2f6>
 80042ce:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
 80042d2:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80042d4:	e79e      	b.n	8004214 <HAL_DMA_Init+0x2f0>
    switch (hdma->Init.FIFOThreshold)
 80042d6:	2d01      	cmp	r5, #1
 80042d8:	f000 80b2 	beq.w	8004440 <HAL_DMA_Init+0x51c>
 80042dc:	d3dd      	bcc.n	800429a <HAL_DMA_Init+0x376>
 80042de:	2d02      	cmp	r5, #2
 80042e0:	f47f aeb7 	bne.w	8004052 <HAL_DMA_Init+0x12e>
 80042e4:	e7d9      	b.n	800429a <HAL_DMA_Init+0x376>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80042e6:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80042e8:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042ea:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 80042ee:	f042 0204 	orr.w	r2, r2, #4
 80042f2:	e7c3      	b.n	800427c <HAL_DMA_Init+0x358>
 80042f4:	fe10803f 	.word	0xfe10803f
 80042f8:	5c001000 	.word	0x5c001000
 80042fc:	ffff0000 	.word	0xffff0000
 8004300:	40020010 	.word	0x40020010
 8004304:	40020028 	.word	0x40020028
 8004308:	40020040 	.word	0x40020040
 800430c:	40020058 	.word	0x40020058
 8004310:	40020070 	.word	0x40020070
 8004314:	40020440 	.word	0x40020440
 8004318:	cccccccd 	.word	0xcccccccd
 800431c:	16009600 	.word	0x16009600
 8004320:	58025880 	.word	0x58025880
 8004324:	1600963f 	.word	0x1600963f
 8004328:	58025940 	.word	0x58025940
 800432c:	c3c0003f 	.word	0xc3c0003f
 8004330:	58025408 	.word	0x58025408
 8004334:	5802541c 	.word	0x5802541c
 8004338:	58025430 	.word	0x58025430
 800433c:	400200b8 	.word	0x400200b8
 8004340:	40020410 	.word	0x40020410
 8004344:	40020428 	.word	0x40020428
 8004348:	400204b8 	.word	0x400204b8
 800434c:	58025444 	.word	0x58025444
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004350:	4a4c      	ldr	r2, [pc, #304]	; (8004484 <HAL_DMA_Init+0x560>)
 8004352:	494d      	ldr	r1, [pc, #308]	; (8004488 <HAL_DMA_Init+0x564>)
 8004354:	484d      	ldr	r0, [pc, #308]	; (800448c <HAL_DMA_Init+0x568>)
 8004356:	428b      	cmp	r3, r1
 8004358:	bf18      	it	ne
 800435a:	4293      	cmpne	r3, r2
 800435c:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8004360:	4d4b      	ldr	r5, [pc, #300]	; (8004490 <HAL_DMA_Init+0x56c>)
 8004362:	bf0c      	ite	eq
 8004364:	2201      	moveq	r2, #1
 8004366:	2200      	movne	r2, #0
 8004368:	4283      	cmp	r3, r0
 800436a:	bf08      	it	eq
 800436c:	f042 0201 	orreq.w	r2, r2, #1
 8004370:	303c      	adds	r0, #60	; 0x3c
 8004372:	428b      	cmp	r3, r1
 8004374:	bf08      	it	eq
 8004376:	f042 0201 	orreq.w	r2, r2, #1
 800437a:	313c      	adds	r1, #60	; 0x3c
 800437c:	42ab      	cmp	r3, r5
 800437e:	bf08      	it	eq
 8004380:	f042 0201 	orreq.w	r2, r2, #1
 8004384:	4283      	cmp	r3, r0
 8004386:	bf08      	it	eq
 8004388:	f042 0201 	orreq.w	r2, r2, #1
 800438c:	428b      	cmp	r3, r1
 800438e:	bf08      	it	eq
 8004390:	f042 0201 	orreq.w	r2, r2, #1
 8004394:	b912      	cbnz	r2, 800439c <HAL_DMA_Init+0x478>
 8004396:	4a3f      	ldr	r2, [pc, #252]	; (8004494 <HAL_DMA_Init+0x570>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d16c      	bne.n	8004476 <HAL_DMA_Init+0x552>
    hdma->State = HAL_DMA_STATE_BUSY;
 800439c:	2002      	movs	r0, #2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800439e:	68a2      	ldr	r2, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80043a0:	493d      	ldr	r1, [pc, #244]	; (8004498 <HAL_DMA_Init+0x574>)
    __HAL_UNLOCK(hdma);
 80043a2:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80043a4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043a8:	2a40      	cmp	r2, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80043aa:	6818      	ldr	r0, [r3, #0]
    __HAL_UNLOCK(hdma);
 80043ac:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80043b0:	ea01 0100 	and.w	r1, r1, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043b4:	d05d      	beq.n	8004472 <HAL_DMA_Init+0x54e>
 80043b6:	2a80      	cmp	r2, #128	; 0x80
 80043b8:	bf14      	ite	ne
 80043ba:	462f      	movne	r7, r5
 80043bc:	f44f 4780 	moveq.w	r7, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043c0:	6922      	ldr	r2, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043c2:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80043c4:	68e6      	ldr	r6, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043c6:	08d2      	lsrs	r2, r2, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80043c8:	6965      	ldr	r5, [r4, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80043ca:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 80044b8 <HAL_DMA_Init+0x594>
 80043ce:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80043d2:	69a6      	ldr	r6, [r4, #24]
 80043d4:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80043d8:	69e5      	ldr	r5, [r4, #28]
 80043da:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80043de:	4e2f      	ldr	r6, [pc, #188]	; (800449c <HAL_DMA_Init+0x578>)
 80043e0:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 80043e4:	441e      	add	r6, r3
 80043e6:	6a25      	ldr	r5, [r4, #32]
 80043e8:	ea42 1215 	orr.w	r2, r2, r5, lsr #4
 80043ec:	fbac 5606 	umull	r5, r6, ip, r6
 80043f0:	430a      	orrs	r2, r1
 80043f2:	0931      	lsrs	r1, r6, #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043f4:	433a      	orrs	r2, r7
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80043f6:	0089      	lsls	r1, r1, #2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80043f8:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80043fa:	65e1      	str	r1, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043fc:	f7ff fd16 	bl	8003e2c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004400:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004402:	2301      	movs	r3, #1
 8004404:	f002 021f 	and.w	r2, r2, #31
 8004408:	4093      	lsls	r3, r2
 800440a:	6043      	str	r3, [r0, #4]
 800440c:	e62b      	b.n	8004066 <HAL_DMA_Init+0x142>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800440e:	f1a3 0010 	sub.w	r0, r3, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004412:	4b23      	ldr	r3, [pc, #140]	; (80044a0 <HAL_DMA_Init+0x57c>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004414:	4d23      	ldr	r5, [pc, #140]	; (80044a4 <HAL_DMA_Init+0x580>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004416:	4413      	add	r3, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004418:	fba5 5000 	umull	r5, r0, r5, r0
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800441c:	2ba8      	cmp	r3, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800441e:	ea4f 1010 	mov.w	r0, r0, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004422:	d800      	bhi.n	8004426 <HAL_DMA_Init+0x502>
      stream_number += 8U;
 8004424:	3008      	adds	r0, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004426:	4a20      	ldr	r2, [pc, #128]	; (80044a8 <HAL_DMA_Init+0x584>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004428:	f000 051f 	and.w	r5, r0, #31
 800442c:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800442e:	4402      	add	r2, r0
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004430:	481e      	ldr	r0, [pc, #120]	; (80044ac <HAL_DMA_Init+0x588>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004432:	40ab      	lsls	r3, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004434:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004436:	4605      	mov	r5, r0
 8004438:	66a3      	str	r3, [r4, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800443a:	e9c4 2018 	strd	r2, r0, [r4, #96]	; 0x60
 800443e:	e6d0      	b.n	80041e2 <HAL_DMA_Init+0x2be>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004440:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004444:	f47f ae05 	bne.w	8004052 <HAL_DMA_Init+0x12e>
 8004448:	e72a      	b.n	80042a0 <HAL_DMA_Init+0x37c>
    switch (hdma->Init.FIFOThreshold)
 800444a:	2d03      	cmp	r5, #3
 800444c:	f63f ae01 	bhi.w	8004052 <HAL_DMA_Init+0x12e>
 8004450:	a101      	add	r1, pc, #4	; (adr r1, 8004458 <HAL_DMA_Init+0x534>)
 8004452:	f851 f025 	ldr.w	pc, [r1, r5, lsl #2]
 8004456:	bf00      	nop
 8004458:	080042a1 	.word	0x080042a1
 800445c:	0800429b 	.word	0x0800429b
 8004460:	080042a1 	.word	0x080042a1
 8004464:	08004441 	.word	0x08004441
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004468:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <HAL_DMA_Init+0x58c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800446a:	4912      	ldr	r1, [pc, #72]	; (80044b4 <HAL_DMA_Init+0x590>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800446c:	4433      	add	r3, r6
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	e6cb      	b.n	800420a <HAL_DMA_Init+0x2e6>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004472:	2710      	movs	r7, #16
 8004474:	e7a4      	b.n	80043c0 <HAL_DMA_Init+0x49c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004476:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004478:	2303      	movs	r3, #3
    return HAL_ERROR;
 800447a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800447c:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800447e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8004482:	e6d7      	b.n	8004234 <HAL_DMA_Init+0x310>
 8004484:	58025408 	.word	0x58025408
 8004488:	5802541c 	.word	0x5802541c
 800448c:	58025430 	.word	0x58025430
 8004490:	58025458 	.word	0x58025458
 8004494:	58025494 	.word	0x58025494
 8004498:	fffe000f 	.word	0xfffe000f
 800449c:	a7fdabf8 	.word	0xa7fdabf8
 80044a0:	bffdfbf0 	.word	0xbffdfbf0
 80044a4:	aaaaaaab 	.word	0xaaaaaaab
 80044a8:	10008200 	.word	0x10008200
 80044ac:	40020880 	.word	0x40020880
 80044b0:	1000823f 	.word	0x1000823f
 80044b4:	40020940 	.word	0x40020940
 80044b8:	cccccccd 	.word	0xcccccccd

080044bc <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80044bc:	2800      	cmp	r0, #0
 80044be:	f000 8104 	beq.w	80046ca <HAL_DMA_Start_IT+0x20e>
{
 80044c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c6:	4605      	mov	r5, r0
  __HAL_LOCK(hdma);
 80044c8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80044cc:	2801      	cmp	r0, #1
 80044ce:	f000 8138 	beq.w	8004742 <HAL_DMA_Start_IT+0x286>
 80044d2:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80044d4:	f895 4035 	ldrb.w	r4, [r5, #53]	; 0x35
 80044d8:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 80044da:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80044de:	d007      	beq.n	80044f0 <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 80044e0:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80044e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 80044e6:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80044ea:	656b      	str	r3, [r5, #84]	; 0x54
}
 80044ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_DMA_DISABLE(hdma);
 80044f0:	682c      	ldr	r4, [r5, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80044f2:	f04f 0e02 	mov.w	lr, #2
    __HAL_DMA_DISABLE(hdma);
 80044f6:	489b      	ldr	r0, [pc, #620]	; (8004764 <HAL_DMA_Start_IT+0x2a8>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044f8:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE(hdma);
 80044fc:	4f9a      	ldr	r7, [pc, #616]	; (8004768 <HAL_DMA_Start_IT+0x2ac>)
 80044fe:	4e9b      	ldr	r6, [pc, #620]	; (800476c <HAL_DMA_Start_IT+0x2b0>)
 8004500:	42bc      	cmp	r4, r7
 8004502:	bf18      	it	ne
 8004504:	4284      	cmpne	r4, r0
 8004506:	f107 0748 	add.w	r7, r7, #72	; 0x48
    hdma->State = HAL_DMA_STATE_BUSY;
 800450a:	f885 e035 	strb.w	lr, [r5, #53]	; 0x35
 800450e:	bf0c      	ite	eq
 8004510:	2001      	moveq	r0, #1
 8004512:	2000      	movne	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8004514:	f8df e264 	ldr.w	lr, [pc, #612]	; 800477c <HAL_DMA_Start_IT+0x2c0>
 8004518:	42b4      	cmp	r4, r6
 800451a:	bf08      	it	eq
 800451c:	f040 0001 	orreq.w	r0, r0, #1
 8004520:	3630      	adds	r6, #48	; 0x30
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004522:	f8c5 c054 	str.w	ip, [r5, #84]	; 0x54
 8004526:	42bc      	cmp	r4, r7
 8004528:	bf08      	it	eq
 800452a:	f040 0001 	orreq.w	r0, r0, #1
    __HAL_DMA_DISABLE(hdma);
 800452e:	f507 7762 	add.w	r7, r7, #904	; 0x388
 8004532:	f8df c24c 	ldr.w	ip, [pc, #588]	; 8004780 <HAL_DMA_Start_IT+0x2c4>
 8004536:	42b4      	cmp	r4, r6
 8004538:	bf08      	it	eq
 800453a:	f040 0001 	orreq.w	r0, r0, #1
 800453e:	f506 7662 	add.w	r6, r6, #904	; 0x388
 8004542:	4574      	cmp	r4, lr
 8004544:	bf08      	it	eq
 8004546:	f040 0001 	orreq.w	r0, r0, #1
 800454a:	f50e 7e68 	add.w	lr, lr, #928	; 0x3a0
 800454e:	42bc      	cmp	r4, r7
 8004550:	bf08      	it	eq
 8004552:	f040 0001 	orreq.w	r0, r0, #1
 8004556:	3760      	adds	r7, #96	; 0x60
 8004558:	42b4      	cmp	r4, r6
 800455a:	bf08      	it	eq
 800455c:	f040 0001 	orreq.w	r0, r0, #1
 8004560:	3660      	adds	r6, #96	; 0x60
 8004562:	4564      	cmp	r4, ip
 8004564:	bf08      	it	eq
 8004566:	f040 0001 	orreq.w	r0, r0, #1
 800456a:	f10c 0c60 	add.w	ip, ip, #96	; 0x60
 800456e:	4574      	cmp	r4, lr
 8004570:	bf08      	it	eq
 8004572:	f040 0001 	orreq.w	r0, r0, #1
 8004576:	f10e 0e60 	add.w	lr, lr, #96	; 0x60
 800457a:	42bc      	cmp	r4, r7
 800457c:	bf08      	it	eq
 800457e:	f040 0001 	orreq.w	r0, r0, #1
 8004582:	f5a7 678c 	sub.w	r7, r7, #1120	; 0x460
 8004586:	42b4      	cmp	r4, r6
 8004588:	bf08      	it	eq
 800458a:	f040 0001 	orreq.w	r0, r0, #1
 800458e:	f5a6 668c 	sub.w	r6, r6, #1120	; 0x460
 8004592:	4564      	cmp	r4, ip
 8004594:	bf08      	it	eq
 8004596:	f040 0001 	orreq.w	r0, r0, #1
 800459a:	f8d5 c058 	ldr.w	ip, [r5, #88]	; 0x58
 800459e:	4574      	cmp	r4, lr
 80045a0:	bf14      	ite	ne
 80045a2:	4682      	movne	sl, r0
 80045a4:	f040 0a01 	orreq.w	sl, r0, #1
 80045a8:	42b4      	cmp	r4, r6
 80045aa:	bf18      	it	ne
 80045ac:	42bc      	cmpne	r4, r7
 80045ae:	6827      	ldr	r7, [r4, #0]
 80045b0:	bf0c      	ite	eq
 80045b2:	2601      	moveq	r6, #1
 80045b4:	2600      	movne	r6, #0
 80045b6:	f027 0701 	bic.w	r7, r7, #1
 80045ba:	6027      	str	r7, [r4, #0]
 80045bc:	d003      	beq.n	80045c6 <HAL_DMA_Start_IT+0x10a>
 80045be:	f1ba 0f00 	cmp.w	sl, #0
 80045c2:	f000 8084 	beq.w	80046ce <HAL_DMA_Start_IT+0x212>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045c6:	2e00      	cmp	r6, #0
 80045c8:	f000 8081 	beq.w	80046ce <HAL_DMA_Start_IT+0x212>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045cc:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 80045ce:	e9d5 0e1a 	ldrd	r0, lr, [r5, #104]	; 0x68
 80045d2:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80045d4:	f1be 0f00 	cmp.w	lr, #0
 80045d8:	d007      	beq.n	80045ea <HAL_DMA_Start_IT+0x12e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045da:	e9d5 701c 	ldrd	r7, r0, [r5, #112]	; 0x70
 80045de:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045e0:	b91e      	cbnz	r6, 80045ea <HAL_DMA_Start_IT+0x12e>
 80045e2:	f1ba 0f00 	cmp.w	sl, #0
 80045e6:	f000 80cd 	beq.w	8004784 <HAL_DMA_Start_IT+0x2c8>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045ea:	6def      	ldr	r7, [r5, #92]	; 0x5c
 80045ec:	f04f 093f 	mov.w	r9, #63	; 0x3f
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045f0:	f8d5 8008 	ldr.w	r8, [r5, #8]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045f4:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045f8:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045fc:	fa09 f707 	lsl.w	r7, r9, r7
 8004600:	f8cc 7008 	str.w	r7, [ip, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004604:	6827      	ldr	r7, [r4, #0]
 8004606:	f427 2780 	bic.w	r7, r7, #262144	; 0x40000
 800460a:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800460c:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800460e:	f000 80a5 	beq.w	800475c <HAL_DMA_Start_IT+0x2a0>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004612:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004614:	60e2      	str	r2, [r4, #12]
 8004616:	6c2f      	ldr	r7, [r5, #64]	; 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004618:	2e00      	cmp	r6, #0
 800461a:	f040 8095 	bne.w	8004748 <HAL_DMA_Start_IT+0x28c>
 800461e:	f1ba 0f00 	cmp.w	sl, #0
 8004622:	f000 80ee 	beq.w	8004802 <HAL_DMA_Start_IT+0x346>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	f023 031e 	bic.w	r3, r3, #30
 800462c:	f043 0316 	orr.w	r3, r3, #22
 8004630:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004632:	b12f      	cbz	r7, 8004640 <HAL_DMA_Start_IT+0x184>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	f043 0308 	orr.w	r3, r3, #8
 800463a:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800463c:	2e00      	cmp	r6, #0
 800463e:	d12c      	bne.n	800469a <HAL_DMA_Start_IT+0x1de>
 8004640:	4b4b      	ldr	r3, [pc, #300]	; (8004770 <HAL_DMA_Start_IT+0x2b4>)
 8004642:	4a4c      	ldr	r2, [pc, #304]	; (8004774 <HAL_DMA_Start_IT+0x2b8>)
 8004644:	494c      	ldr	r1, [pc, #304]	; (8004778 <HAL_DMA_Start_IT+0x2bc>)
 8004646:	4294      	cmp	r4, r2
 8004648:	bf18      	it	ne
 800464a:	429c      	cmpne	r4, r3
 800464c:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8004650:	bf0c      	ite	eq
 8004652:	2301      	moveq	r3, #1
 8004654:	2300      	movne	r3, #0
 8004656:	428c      	cmp	r4, r1
 8004658:	bf08      	it	eq
 800465a:	f043 0301 	orreq.w	r3, r3, #1
 800465e:	3128      	adds	r1, #40	; 0x28
 8004660:	4294      	cmp	r4, r2
 8004662:	bf08      	it	eq
 8004664:	f043 0301 	orreq.w	r3, r3, #1
 8004668:	3228      	adds	r2, #40	; 0x28
 800466a:	428c      	cmp	r4, r1
 800466c:	bf08      	it	eq
 800466e:	f043 0301 	orreq.w	r3, r3, #1
 8004672:	3128      	adds	r1, #40	; 0x28
 8004674:	4294      	cmp	r4, r2
 8004676:	bf08      	it	eq
 8004678:	f043 0301 	orreq.w	r3, r3, #1
 800467c:	3228      	adds	r2, #40	; 0x28
 800467e:	428c      	cmp	r4, r1
 8004680:	bf08      	it	eq
 8004682:	f043 0301 	orreq.w	r3, r3, #1
 8004686:	4294      	cmp	r4, r2
 8004688:	bf08      	it	eq
 800468a:	f043 0301 	orreq.w	r3, r3, #1
 800468e:	b913      	cbnz	r3, 8004696 <HAL_DMA_Start_IT+0x1da>
 8004690:	f1ba 0f00 	cmp.w	sl, #0
 8004694:	d012      	beq.n	80046bc <HAL_DMA_Start_IT+0x200>
 8004696:	f8d5 e06c 	ldr.w	lr, [r5, #108]	; 0x6c
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800469a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	03d2      	lsls	r2, r2, #15
 80046a0:	d503      	bpl.n	80046aa <HAL_DMA_Start_IT+0x1ee>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046a8:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80046aa:	f1be 0f00 	cmp.w	lr, #0
 80046ae:	d005      	beq.n	80046bc <HAL_DMA_Start_IT+0x200>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046b0:	f8de 3000 	ldr.w	r3, [lr]
 80046b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b8:	f8ce 3000 	str.w	r3, [lr]
    __HAL_DMA_ENABLE(hdma);
 80046bc:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046be:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	6023      	str	r3, [r4, #0]
}
 80046c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 80046ca:	2001      	movs	r0, #1
}
 80046cc:	4770      	bx	lr
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046ce:	4f28      	ldr	r7, [pc, #160]	; (8004770 <HAL_DMA_Start_IT+0x2b4>)
 80046d0:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 8004774 <HAL_DMA_Start_IT+0x2b8>
 80046d4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8004778 <HAL_DMA_Start_IT+0x2bc>
 80046d8:	4574      	cmp	r4, lr
 80046da:	bf18      	it	ne
 80046dc:	42bc      	cmpne	r4, r7
 80046de:	f10e 0e3c 	add.w	lr, lr, #60	; 0x3c
 80046e2:	bf0c      	ite	eq
 80046e4:	2701      	moveq	r7, #1
 80046e6:	2700      	movne	r7, #0
 80046e8:	4544      	cmp	r4, r8
 80046ea:	bf08      	it	eq
 80046ec:	f047 0701 	orreq.w	r7, r7, #1
 80046f0:	f108 0828 	add.w	r8, r8, #40	; 0x28
 80046f4:	4574      	cmp	r4, lr
 80046f6:	bf08      	it	eq
 80046f8:	f047 0701 	orreq.w	r7, r7, #1
 80046fc:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8004700:	4544      	cmp	r4, r8
 8004702:	bf08      	it	eq
 8004704:	f047 0701 	orreq.w	r7, r7, #1
 8004708:	f108 0828 	add.w	r8, r8, #40	; 0x28
 800470c:	4574      	cmp	r4, lr
 800470e:	bf08      	it	eq
 8004710:	f047 0701 	orreq.w	r7, r7, #1
 8004714:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8004718:	4544      	cmp	r4, r8
 800471a:	bf08      	it	eq
 800471c:	f047 0701 	orreq.w	r7, r7, #1
 8004720:	4574      	cmp	r4, lr
 8004722:	bf08      	it	eq
 8004724:	f047 0701 	orreq.w	r7, r7, #1
 8004728:	b917      	cbnz	r7, 8004730 <HAL_DMA_Start_IT+0x274>
 800472a:	f1ba 0f00 	cmp.w	sl, #0
 800472e:	d029      	beq.n	8004784 <HAL_DMA_Start_IT+0x2c8>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004730:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 8004732:	e9d5 0e1a 	ldrd	r0, lr, [r5, #104]	; 0x68
 8004736:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004738:	f1be 0f00 	cmp.w	lr, #0
 800473c:	f47f af4d 	bne.w	80045da <HAL_DMA_Start_IT+0x11e>
 8004740:	e74f      	b.n	80045e2 <HAL_DMA_Start_IT+0x126>
  __HAL_LOCK(hdma);
 8004742:	2002      	movs	r0, #2
}
 8004744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	f023 031e 	bic.w	r3, r3, #30
 800474e:	f043 0316 	orr.w	r3, r3, #22
 8004752:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004754:	2f00      	cmp	r7, #0
 8004756:	f47f af6d 	bne.w	8004634 <HAL_DMA_Start_IT+0x178>
 800475a:	e79e      	b.n	800469a <HAL_DMA_Start_IT+0x1de>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800475c:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800475e:	60e1      	str	r1, [r4, #12]
 8004760:	e759      	b.n	8004616 <HAL_DMA_Start_IT+0x15a>
 8004762:	bf00      	nop
 8004764:	40020058 	.word	0x40020058
 8004768:	40020040 	.word	0x40020040
 800476c:	40020070 	.word	0x40020070
 8004770:	5802541c 	.word	0x5802541c
 8004774:	58025408 	.word	0x58025408
 8004778:	58025430 	.word	0x58025430
 800477c:	400200b8 	.word	0x400200b8
 8004780:	40020440 	.word	0x40020440
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004784:	4f28      	ldr	r7, [pc, #160]	; (8004828 <HAL_DMA_Start_IT+0x36c>)
 8004786:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004830 <HAL_DMA_Start_IT+0x374>
 800478a:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 8004834 <HAL_DMA_Start_IT+0x378>
 800478e:	4544      	cmp	r4, r8
 8004790:	bf18      	it	ne
 8004792:	42bc      	cmpne	r4, r7
 8004794:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8004798:	bf0c      	ite	eq
 800479a:	2701      	moveq	r7, #1
 800479c:	2700      	movne	r7, #0
 800479e:	4574      	cmp	r4, lr
 80047a0:	bf08      	it	eq
 80047a2:	f047 0701 	orreq.w	r7, r7, #1
 80047a6:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 80047aa:	4544      	cmp	r4, r8
 80047ac:	bf08      	it	eq
 80047ae:	f047 0701 	orreq.w	r7, r7, #1
 80047b2:	f108 0828 	add.w	r8, r8, #40	; 0x28
 80047b6:	4574      	cmp	r4, lr
 80047b8:	bf08      	it	eq
 80047ba:	f047 0701 	orreq.w	r7, r7, #1
 80047be:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 80047c2:	4544      	cmp	r4, r8
 80047c4:	bf08      	it	eq
 80047c6:	f047 0701 	orreq.w	r7, r7, #1
 80047ca:	4574      	cmp	r4, lr
 80047cc:	bf08      	it	eq
 80047ce:	f047 0701 	orreq.w	r7, r7, #1
 80047d2:	b927      	cbnz	r7, 80047de <HAL_DMA_Start_IT+0x322>
 80047d4:	4f15      	ldr	r7, [pc, #84]	; (800482c <HAL_DMA_Start_IT+0x370>)
 80047d6:	42bc      	cmp	r4, r7
 80047d8:	bf18      	it	ne
 80047da:	6c2f      	ldrne	r7, [r5, #64]	; 0x40
 80047dc:	d111      	bne.n	8004802 <HAL_DMA_Start_IT+0x346>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047de:	6def      	ldr	r7, [r5, #92]	; 0x5c
 80047e0:	f04f 0e01 	mov.w	lr, #1
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047e4:	f8d5 8008 	ldr.w	r8, [r5, #8]
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047e8:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047ec:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047f0:	fa0e f707 	lsl.w	r7, lr, r7
 80047f4:	f8cc 7004 	str.w	r7, [ip, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80047f8:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047fa:	d010      	beq.n	800481e <HAL_DMA_Start_IT+0x362>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80047fc:	60a1      	str	r1, [r4, #8]
 80047fe:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004800:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	f023 030e 	bic.w	r3, r3, #14
 8004808:	f043 030a 	orr.w	r3, r3, #10
 800480c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800480e:	2f00      	cmp	r7, #0
 8004810:	f43f af16 	beq.w	8004640 <HAL_DMA_Start_IT+0x184>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	f043 0304 	orr.w	r3, r3, #4
 800481a:	6023      	str	r3, [r4, #0]
 800481c:	e710      	b.n	8004640 <HAL_DMA_Start_IT+0x184>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800481e:	60a2      	str	r2, [r4, #8]
 8004820:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004822:	60e1      	str	r1, [r4, #12]
 8004824:	e7ed      	b.n	8004802 <HAL_DMA_Start_IT+0x346>
 8004826:	bf00      	nop
 8004828:	58025408 	.word	0x58025408
 800482c:	58025494 	.word	0x58025494
 8004830:	5802541c 	.word	0x5802541c
 8004834:	58025430 	.word	0x58025430

08004838 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8004838:	2800      	cmp	r0, #0
 800483a:	d060      	beq.n	80048fe <HAL_DMA_Abort_IT+0xc6>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800483c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8004840:	2a02      	cmp	r2, #2
{
 8004842:	b538      	push	{r3, r4, r5, lr}
 8004844:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004846:	d003      	beq.n	8004850 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004848:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800484a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800484c:	655a      	str	r2, [r3, #84]	; 0x54
}
 800484e:	bd38      	pop	{r3, r4, r5, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004850:	6801      	ldr	r1, [r0, #0]
 8004852:	4a57      	ldr	r2, [pc, #348]	; (80049b0 <HAL_DMA_Abort_IT+0x178>)
 8004854:	4291      	cmp	r1, r2
 8004856:	d049      	beq.n	80048ec <HAL_DMA_Abort_IT+0xb4>
 8004858:	3218      	adds	r2, #24
 800485a:	4291      	cmp	r1, r2
 800485c:	d046      	beq.n	80048ec <HAL_DMA_Abort_IT+0xb4>
 800485e:	3230      	adds	r2, #48	; 0x30
 8004860:	4854      	ldr	r0, [pc, #336]	; (80049b4 <HAL_DMA_Abort_IT+0x17c>)
 8004862:	4c55      	ldr	r4, [pc, #340]	; (80049b8 <HAL_DMA_Abort_IT+0x180>)
 8004864:	4281      	cmp	r1, r0
 8004866:	bf18      	it	ne
 8004868:	4291      	cmpne	r1, r2
 800486a:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800486e:	4d53      	ldr	r5, [pc, #332]	; (80049bc <HAL_DMA_Abort_IT+0x184>)
 8004870:	bf0c      	ite	eq
 8004872:	2201      	moveq	r2, #1
 8004874:	2200      	movne	r2, #0
 8004876:	42a1      	cmp	r1, r4
 8004878:	bf08      	it	eq
 800487a:	f042 0201 	orreq.w	r2, r2, #1
 800487e:	3448      	adds	r4, #72	; 0x48
 8004880:	4281      	cmp	r1, r0
 8004882:	bf08      	it	eq
 8004884:	f042 0201 	orreq.w	r2, r2, #1
 8004888:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800488c:	42a9      	cmp	r1, r5
 800488e:	bf08      	it	eq
 8004890:	f042 0201 	orreq.w	r2, r2, #1
 8004894:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8004898:	42a1      	cmp	r1, r4
 800489a:	bf08      	it	eq
 800489c:	f042 0201 	orreq.w	r2, r2, #1
 80048a0:	f504 7462 	add.w	r4, r4, #904	; 0x388
 80048a4:	4281      	cmp	r1, r0
 80048a6:	bf08      	it	eq
 80048a8:	f042 0201 	orreq.w	r2, r2, #1
 80048ac:	3048      	adds	r0, #72	; 0x48
 80048ae:	42a9      	cmp	r1, r5
 80048b0:	bf08      	it	eq
 80048b2:	f042 0201 	orreq.w	r2, r2, #1
 80048b6:	3548      	adds	r5, #72	; 0x48
 80048b8:	42a1      	cmp	r1, r4
 80048ba:	bf08      	it	eq
 80048bc:	f042 0201 	orreq.w	r2, r2, #1
 80048c0:	3448      	adds	r4, #72	; 0x48
 80048c2:	4281      	cmp	r1, r0
 80048c4:	bf08      	it	eq
 80048c6:	f042 0201 	orreq.w	r2, r2, #1
 80048ca:	3048      	adds	r0, #72	; 0x48
 80048cc:	42a9      	cmp	r1, r5
 80048ce:	bf08      	it	eq
 80048d0:	f042 0201 	orreq.w	r2, r2, #1
 80048d4:	42a1      	cmp	r1, r4
 80048d6:	bf08      	it	eq
 80048d8:	f042 0201 	orreq.w	r2, r2, #1
 80048dc:	4281      	cmp	r1, r0
 80048de:	bf08      	it	eq
 80048e0:	f042 0201 	orreq.w	r2, r2, #1
 80048e4:	b912      	cbnz	r2, 80048ec <HAL_DMA_Abort_IT+0xb4>
 80048e6:	4a36      	ldr	r2, [pc, #216]	; (80049c0 <HAL_DMA_Abort_IT+0x188>)
 80048e8:	4291      	cmp	r1, r2
 80048ea:	d10a      	bne.n	8004902 <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 80048ec:	2204      	movs	r2, #4
  return HAL_OK;
 80048ee:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80048f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80048f4:	680b      	ldr	r3, [r1, #0]
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	600b      	str	r3, [r1, #0]
}
 80048fc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80048fe:	2001      	movs	r0, #1
}
 8004900:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004902:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 8004906:	4a2f      	ldr	r2, [pc, #188]	; (80049c4 <HAL_DMA_Abort_IT+0x18c>)
 8004908:	482f      	ldr	r0, [pc, #188]	; (80049c8 <HAL_DMA_Abort_IT+0x190>)
 800490a:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 800490e:	4d2f      	ldr	r5, [pc, #188]	; (80049cc <HAL_DMA_Abort_IT+0x194>)
 8004910:	42a1      	cmp	r1, r4
 8004912:	bf18      	it	ne
 8004914:	4291      	cmpne	r1, r2
 8004916:	f104 0450 	add.w	r4, r4, #80	; 0x50
 800491a:	bf0c      	ite	eq
 800491c:	2201      	moveq	r2, #1
 800491e:	2200      	movne	r2, #0
 8004920:	4281      	cmp	r1, r0
 8004922:	bf08      	it	eq
 8004924:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004928:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800492a:	42a9      	cmp	r1, r5
 800492c:	bf08      	it	eq
 800492e:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004932:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004936:	3528      	adds	r5, #40	; 0x28
 8004938:	42a1      	cmp	r1, r4
 800493a:	bf08      	it	eq
 800493c:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004940:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004942:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 8004944:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004946:	42a9      	cmp	r1, r5
 8004948:	bf08      	it	eq
 800494a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800494e:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004952:	42a1      	cmp	r1, r4
 8004954:	bf08      	it	eq
 8004956:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800495a:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800495c:	b912      	cbnz	r2, 8004964 <HAL_DMA_Abort_IT+0x12c>
 800495e:	4a1c      	ldr	r2, [pc, #112]	; (80049d0 <HAL_DMA_Abort_IT+0x198>)
 8004960:	4291      	cmp	r1, r2
 8004962:	d117      	bne.n	8004994 <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004964:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004966:	2101      	movs	r1, #1
 8004968:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800496a:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800496c:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004970:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004972:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004976:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004978:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800497a:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 800497c:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004980:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004982:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8004984:	b132      	cbz	r2, 8004994 <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004986:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004988:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800498a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800498c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004990:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004992:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 8004994:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8004996:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 8004998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800499a:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800499e:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 80049a2:	b11a      	cbz	r2, 80049ac <HAL_DMA_Abort_IT+0x174>
 80049a4:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 80049a6:	4790      	blx	r2
  return HAL_OK;
 80049a8:	4620      	mov	r0, r4
}
 80049aa:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80049ac:	4610      	mov	r0, r2
}
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	40020010 	.word	0x40020010
 80049b4:	40020040 	.word	0x40020040
 80049b8:	40020070 	.word	0x40020070
 80049bc:	400200a0 	.word	0x400200a0
 80049c0:	400204b8 	.word	0x400204b8
 80049c4:	5802541c 	.word	0x5802541c
 80049c8:	58025430 	.word	0x58025430
 80049cc:	58025444 	.word	0x58025444
 80049d0:	58025494 	.word	0x58025494

080049d4 <HAL_DMA_IRQHandler>:
{
 80049d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t timeout = SystemCoreClock / 9600U;
 80049d8:	49a4      	ldr	r1, [pc, #656]	; (8004c6c <HAL_DMA_IRQHandler+0x298>)
{
 80049da:	b085      	sub	sp, #20
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80049dc:	4ea4      	ldr	r6, [pc, #656]	; (8004c70 <HAL_DMA_IRQHandler+0x29c>)
  __IO uint32_t count = 0U;
 80049de:	2400      	movs	r4, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80049e0:	6803      	ldr	r3, [r0, #0]
 80049e2:	4aa4      	ldr	r2, [pc, #656]	; (8004c74 <HAL_DMA_IRQHandler+0x2a0>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049e4:	f8d0 8058 	ldr.w	r8, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80049e8:	6809      	ldr	r1, [r1, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80049ea:	4293      	cmp	r3, r2
 80049ec:	bf18      	it	ne
 80049ee:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 80049f0:	9403      	str	r4, [sp, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049f2:	9101      	str	r1, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80049f4:	bf08      	it	eq
 80049f6:	2601      	moveq	r6, #1
  tmpisr_dma  = regs_dma->ISR;
 80049f8:	f8d8 5000 	ldr.w	r5, [r8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80049fc:	bf18      	it	ne
 80049fe:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 8004a00:	f8d8 1000 	ldr.w	r1, [r8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004a04:	d046      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xc0>
 8004a06:	3218      	adds	r2, #24
 8004a08:	4f9b      	ldr	r7, [pc, #620]	; (8004c78 <HAL_DMA_IRQHandler+0x2a4>)
 8004a0a:	4c9c      	ldr	r4, [pc, #624]	; (8004c7c <HAL_DMA_IRQHandler+0x2a8>)
 8004a0c:	42bb      	cmp	r3, r7
 8004a0e:	bf18      	it	ne
 8004a10:	4293      	cmpne	r3, r2
 8004a12:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8004a16:	bf0c      	ite	eq
 8004a18:	2201      	moveq	r2, #1
 8004a1a:	2200      	movne	r2, #0
 8004a1c:	42a3      	cmp	r3, r4
 8004a1e:	bf08      	it	eq
 8004a20:	f042 0201 	orreq.w	r2, r2, #1
 8004a24:	3430      	adds	r4, #48	; 0x30
 8004a26:	42bb      	cmp	r3, r7
 8004a28:	bf08      	it	eq
 8004a2a:	f042 0201 	orreq.w	r2, r2, #1
 8004a2e:	3730      	adds	r7, #48	; 0x30
 8004a30:	42a3      	cmp	r3, r4
 8004a32:	bf08      	it	eq
 8004a34:	f042 0201 	orreq.w	r2, r2, #1
 8004a38:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8004a3c:	42bb      	cmp	r3, r7
 8004a3e:	bf08      	it	eq
 8004a40:	f042 0201 	orreq.w	r2, r2, #1
 8004a44:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8004a48:	42a3      	cmp	r3, r4
 8004a4a:	bf08      	it	eq
 8004a4c:	f042 0201 	orreq.w	r2, r2, #1
 8004a50:	3430      	adds	r4, #48	; 0x30
 8004a52:	42bb      	cmp	r3, r7
 8004a54:	bf08      	it	eq
 8004a56:	f042 0201 	orreq.w	r2, r2, #1
 8004a5a:	3730      	adds	r7, #48	; 0x30
 8004a5c:	42a3      	cmp	r3, r4
 8004a5e:	bf08      	it	eq
 8004a60:	f042 0201 	orreq.w	r2, r2, #1
 8004a64:	3430      	adds	r4, #48	; 0x30
 8004a66:	42bb      	cmp	r3, r7
 8004a68:	bf08      	it	eq
 8004a6a:	f042 0201 	orreq.w	r2, r2, #1
 8004a6e:	3730      	adds	r7, #48	; 0x30
 8004a70:	42a3      	cmp	r3, r4
 8004a72:	bf08      	it	eq
 8004a74:	f042 0201 	orreq.w	r2, r2, #1
 8004a78:	3430      	adds	r4, #48	; 0x30
 8004a7a:	42bb      	cmp	r3, r7
 8004a7c:	bf08      	it	eq
 8004a7e:	f042 0201 	orreq.w	r2, r2, #1
 8004a82:	42a3      	cmp	r3, r4
 8004a84:	bf08      	it	eq
 8004a86:	f042 0201 	orreq.w	r2, r2, #1
 8004a8a:	b91a      	cbnz	r2, 8004a94 <HAL_DMA_IRQHandler+0xc0>
 8004a8c:	4a7c      	ldr	r2, [pc, #496]	; (8004c80 <HAL_DMA_IRQHandler+0x2ac>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	f040 81ef 	bne.w	8004e72 <HAL_DMA_IRQHandler+0x49e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a94:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8004a96:	2208      	movs	r2, #8
 8004a98:	f001 071f 	and.w	r7, r1, #31
 8004a9c:	40ba      	lsls	r2, r7
 8004a9e:	422a      	tst	r2, r5
 8004aa0:	f040 81d8 	bne.w	8004e54 <HAL_DMA_IRQHandler+0x480>
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	f04f 0c04 	mov.w	ip, #4
 8004aaa:	2010      	movs	r0, #16
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004aac:	fa25 f207 	lsr.w	r2, r5, r7
 8004ab0:	fa0c fc07 	lsl.w	ip, ip, r7
 8004ab4:	40b8      	lsls	r0, r7
 8004ab6:	07d2      	lsls	r2, r2, #31
 8004ab8:	ea05 090c 	and.w	r9, r5, ip
 8004abc:	ea05 0e00 	and.w	lr, r5, r0
 8004ac0:	d560      	bpl.n	8004b84 <HAL_DMA_IRQHandler+0x1b0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004ac2:	4a70      	ldr	r2, [pc, #448]	; (8004c84 <HAL_DMA_IRQHandler+0x2b0>)
 8004ac4:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 8004c78 <HAL_DMA_IRQHandler+0x2a4>
 8004ac8:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8004c7c <HAL_DMA_IRQHandler+0x2a8>
 8004acc:	4293      	cmp	r3, r2
 8004ace:	bf18      	it	ne
 8004ad0:	455b      	cmpne	r3, fp
 8004ad2:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8004ad6:	bf0c      	ite	eq
 8004ad8:	2201      	moveq	r2, #1
 8004ada:	2200      	movne	r2, #0
 8004adc:	4553      	cmp	r3, sl
 8004ade:	bf08      	it	eq
 8004ae0:	f042 0201 	orreq.w	r2, r2, #1
 8004ae4:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8004ae8:	455b      	cmp	r3, fp
 8004aea:	bf08      	it	eq
 8004aec:	f042 0201 	orreq.w	r2, r2, #1
 8004af0:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8004af4:	4553      	cmp	r3, sl
 8004af6:	bf08      	it	eq
 8004af8:	f042 0201 	orreq.w	r2, r2, #1
 8004afc:	f50a 7a5c 	add.w	sl, sl, #880	; 0x370
 8004b00:	455b      	cmp	r3, fp
 8004b02:	bf08      	it	eq
 8004b04:	f042 0201 	orreq.w	r2, r2, #1
 8004b08:	f50b 7b5c 	add.w	fp, fp, #880	; 0x370
 8004b0c:	4553      	cmp	r3, sl
 8004b0e:	bf08      	it	eq
 8004b10:	f042 0201 	orreq.w	r2, r2, #1
 8004b14:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8004b18:	455b      	cmp	r3, fp
 8004b1a:	bf08      	it	eq
 8004b1c:	f042 0201 	orreq.w	r2, r2, #1
 8004b20:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8004b24:	4553      	cmp	r3, sl
 8004b26:	bf08      	it	eq
 8004b28:	f042 0201 	orreq.w	r2, r2, #1
 8004b2c:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8004b30:	455b      	cmp	r3, fp
 8004b32:	bf08      	it	eq
 8004b34:	f042 0201 	orreq.w	r2, r2, #1
 8004b38:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8004b3c:	4553      	cmp	r3, sl
 8004b3e:	bf08      	it	eq
 8004b40:	f042 0201 	orreq.w	r2, r2, #1
 8004b44:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8004b48:	455b      	cmp	r3, fp
 8004b4a:	bf08      	it	eq
 8004b4c:	f042 0201 	orreq.w	r2, r2, #1
 8004b50:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8004b54:	4553      	cmp	r3, sl
 8004b56:	bf08      	it	eq
 8004b58:	f042 0201 	orreq.w	r2, r2, #1
 8004b5c:	455b      	cmp	r3, fp
 8004b5e:	bf08      	it	eq
 8004b60:	f042 0201 	orreq.w	r2, r2, #1
 8004b64:	b912      	cbnz	r2, 8004b6c <HAL_DMA_IRQHandler+0x198>
 8004b66:	2e00      	cmp	r6, #0
 8004b68:	f000 8245 	beq.w	8004ff6 <HAL_DMA_IRQHandler+0x622>
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	0612      	lsls	r2, r2, #24
 8004b70:	d508      	bpl.n	8004b84 <HAL_DMA_IRQHandler+0x1b0>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b72:	2201      	movs	r2, #1
 8004b74:	fa02 f707 	lsl.w	r7, r2, r7
 8004b78:	f8c8 7008 	str.w	r7, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b7c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004b7e:	f042 0202 	orr.w	r2, r2, #2
 8004b82:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b84:	f1b9 0f00 	cmp.w	r9, #0
 8004b88:	d055      	beq.n	8004c36 <HAL_DMA_IRQHandler+0x262>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004b8a:	2e00      	cmp	r6, #0
 8004b8c:	d14a      	bne.n	8004c24 <HAL_DMA_IRQHandler+0x250>
 8004b8e:	4a3d      	ldr	r2, [pc, #244]	; (8004c84 <HAL_DMA_IRQHandler+0x2b0>)
 8004b90:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8004c78 <HAL_DMA_IRQHandler+0x2a4>
 8004b94:	4f39      	ldr	r7, [pc, #228]	; (8004c7c <HAL_DMA_IRQHandler+0x2a8>)
 8004b96:	454b      	cmp	r3, r9
 8004b98:	bf18      	it	ne
 8004b9a:	4293      	cmpne	r3, r2
 8004b9c:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8004ba0:	bf0c      	ite	eq
 8004ba2:	2201      	moveq	r2, #1
 8004ba4:	2200      	movne	r2, #0
 8004ba6:	42bb      	cmp	r3, r7
 8004ba8:	bf08      	it	eq
 8004baa:	f042 0201 	orreq.w	r2, r2, #1
 8004bae:	3730      	adds	r7, #48	; 0x30
 8004bb0:	454b      	cmp	r3, r9
 8004bb2:	bf08      	it	eq
 8004bb4:	f042 0201 	orreq.w	r2, r2, #1
 8004bb8:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8004bbc:	42bb      	cmp	r3, r7
 8004bbe:	bf08      	it	eq
 8004bc0:	f042 0201 	orreq.w	r2, r2, #1
 8004bc4:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8004bc8:	454b      	cmp	r3, r9
 8004bca:	bf08      	it	eq
 8004bcc:	f042 0201 	orreq.w	r2, r2, #1
 8004bd0:	f509 795c 	add.w	r9, r9, #880	; 0x370
 8004bd4:	42bb      	cmp	r3, r7
 8004bd6:	bf08      	it	eq
 8004bd8:	f042 0201 	orreq.w	r2, r2, #1
 8004bdc:	3730      	adds	r7, #48	; 0x30
 8004bde:	454b      	cmp	r3, r9
 8004be0:	bf08      	it	eq
 8004be2:	f042 0201 	orreq.w	r2, r2, #1
 8004be6:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8004bea:	42bb      	cmp	r3, r7
 8004bec:	bf08      	it	eq
 8004bee:	f042 0201 	orreq.w	r2, r2, #1
 8004bf2:	3730      	adds	r7, #48	; 0x30
 8004bf4:	454b      	cmp	r3, r9
 8004bf6:	bf08      	it	eq
 8004bf8:	f042 0201 	orreq.w	r2, r2, #1
 8004bfc:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8004c00:	42bb      	cmp	r3, r7
 8004c02:	bf08      	it	eq
 8004c04:	f042 0201 	orreq.w	r2, r2, #1
 8004c08:	3730      	adds	r7, #48	; 0x30
 8004c0a:	454b      	cmp	r3, r9
 8004c0c:	bf08      	it	eq
 8004c0e:	f042 0201 	orreq.w	r2, r2, #1
 8004c12:	42bb      	cmp	r3, r7
 8004c14:	bf08      	it	eq
 8004c16:	f042 0201 	orreq.w	r2, r2, #1
 8004c1a:	b91a      	cbnz	r2, 8004c24 <HAL_DMA_IRQHandler+0x250>
 8004c1c:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <HAL_DMA_IRQHandler+0x2ac>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	f040 81b4 	bne.w	8004f8c <HAL_DMA_IRQHandler+0x5b8>
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	0792      	lsls	r2, r2, #30
 8004c28:	d505      	bpl.n	8004c36 <HAL_DMA_IRQHandler+0x262>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c2a:	f8c8 c008 	str.w	ip, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c2e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004c30:	f042 0204 	orr.w	r2, r2, #4
 8004c34:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c36:	f1be 0f00 	cmp.w	lr, #0
 8004c3a:	d06d      	beq.n	8004d18 <HAL_DMA_IRQHandler+0x344>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004c3c:	2e00      	cmp	r6, #0
 8004c3e:	d155      	bne.n	8004cec <HAL_DMA_IRQHandler+0x318>
 8004c40:	4a10      	ldr	r2, [pc, #64]	; (8004c84 <HAL_DMA_IRQHandler+0x2b0>)
 8004c42:	4f0d      	ldr	r7, [pc, #52]	; (8004c78 <HAL_DMA_IRQHandler+0x2a4>)
 8004c44:	4e0d      	ldr	r6, [pc, #52]	; (8004c7c <HAL_DMA_IRQHandler+0x2a8>)
 8004c46:	42bb      	cmp	r3, r7
 8004c48:	bf18      	it	ne
 8004c4a:	4293      	cmpne	r3, r2
 8004c4c:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8004c50:	bf0c      	ite	eq
 8004c52:	2201      	moveq	r2, #1
 8004c54:	2200      	movne	r2, #0
 8004c56:	42b3      	cmp	r3, r6
 8004c58:	bf08      	it	eq
 8004c5a:	f042 0201 	orreq.w	r2, r2, #1
 8004c5e:	3630      	adds	r6, #48	; 0x30
 8004c60:	42bb      	cmp	r3, r7
 8004c62:	bf08      	it	eq
 8004c64:	f042 0201 	orreq.w	r2, r2, #1
 8004c68:	3730      	adds	r7, #48	; 0x30
 8004c6a:	e00d      	b.n	8004c88 <HAL_DMA_IRQHandler+0x2b4>
 8004c6c:	240001ec 	.word	0x240001ec
 8004c70:	40020010 	.word	0x40020010
 8004c74:	40020028 	.word	0x40020028
 8004c78:	40020058 	.word	0x40020058
 8004c7c:	40020070 	.word	0x40020070
 8004c80:	400204b8 	.word	0x400204b8
 8004c84:	40020040 	.word	0x40020040
 8004c88:	42b3      	cmp	r3, r6
 8004c8a:	bf08      	it	eq
 8004c8c:	f042 0201 	orreq.w	r2, r2, #1
 8004c90:	f506 765c 	add.w	r6, r6, #880	; 0x370
 8004c94:	42bb      	cmp	r3, r7
 8004c96:	bf08      	it	eq
 8004c98:	f042 0201 	orreq.w	r2, r2, #1
 8004c9c:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8004ca0:	42b3      	cmp	r3, r6
 8004ca2:	bf08      	it	eq
 8004ca4:	f042 0201 	orreq.w	r2, r2, #1
 8004ca8:	3630      	adds	r6, #48	; 0x30
 8004caa:	42bb      	cmp	r3, r7
 8004cac:	bf08      	it	eq
 8004cae:	f042 0201 	orreq.w	r2, r2, #1
 8004cb2:	3730      	adds	r7, #48	; 0x30
 8004cb4:	42b3      	cmp	r3, r6
 8004cb6:	bf08      	it	eq
 8004cb8:	f042 0201 	orreq.w	r2, r2, #1
 8004cbc:	3630      	adds	r6, #48	; 0x30
 8004cbe:	42bb      	cmp	r3, r7
 8004cc0:	bf08      	it	eq
 8004cc2:	f042 0201 	orreq.w	r2, r2, #1
 8004cc6:	3730      	adds	r7, #48	; 0x30
 8004cc8:	42b3      	cmp	r3, r6
 8004cca:	bf08      	it	eq
 8004ccc:	f042 0201 	orreq.w	r2, r2, #1
 8004cd0:	3630      	adds	r6, #48	; 0x30
 8004cd2:	42bb      	cmp	r3, r7
 8004cd4:	bf08      	it	eq
 8004cd6:	f042 0201 	orreq.w	r2, r2, #1
 8004cda:	42b3      	cmp	r3, r6
 8004cdc:	bf08      	it	eq
 8004cde:	f042 0201 	orreq.w	r2, r2, #1
 8004ce2:	b91a      	cbnz	r2, 8004cec <HAL_DMA_IRQHandler+0x318>
 8004ce4:	4aa0      	ldr	r2, [pc, #640]	; (8004f68 <HAL_DMA_IRQHandler+0x594>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	f040 813a 	bne.w	8004f60 <HAL_DMA_IRQHandler+0x58c>
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8004cf2:	b18a      	cbz	r2, 8004d18 <HAL_DMA_IRQHandler+0x344>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cf4:	f8c8 0008 	str.w	r0, [r8, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	0357      	lsls	r7, r2, #13
 8004cfc:	f100 80f7 	bmi.w	8004eee <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	05d0      	lsls	r0, r2, #23
 8004d04:	d403      	bmi.n	8004d0e <HAL_DMA_IRQHandler+0x33a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	f022 0208 	bic.w	r2, r2, #8
 8004d0c:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8004d0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d10:	b113      	cbz	r3, 8004d18 <HAL_DMA_IRQHandler+0x344>
            hdma->XferHalfCpltCallback(hdma);
 8004d12:	4620      	mov	r0, r4
 8004d14:	4798      	blx	r3
 8004d16:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d18:	f001 011f 	and.w	r1, r1, #31
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	408a      	lsls	r2, r1
 8004d20:	422a      	tst	r2, r5
 8004d22:	d069      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x424>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004d24:	6820      	ldr	r0, [r4, #0]
 8004d26:	4b91      	ldr	r3, [pc, #580]	; (8004f6c <HAL_DMA_IRQHandler+0x598>)
 8004d28:	4e91      	ldr	r6, [pc, #580]	; (8004f70 <HAL_DMA_IRQHandler+0x59c>)
 8004d2a:	4d92      	ldr	r5, [pc, #584]	; (8004f74 <HAL_DMA_IRQHandler+0x5a0>)
 8004d2c:	42b0      	cmp	r0, r6
 8004d2e:	bf18      	it	ne
 8004d30:	4298      	cmpne	r0, r3
 8004d32:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	42a8      	cmp	r0, r5
 8004d3e:	bf08      	it	eq
 8004d40:	f043 0301 	orreq.w	r3, r3, #1
 8004d44:	3530      	adds	r5, #48	; 0x30
 8004d46:	42b0      	cmp	r0, r6
 8004d48:	bf08      	it	eq
 8004d4a:	f043 0301 	orreq.w	r3, r3, #1
 8004d4e:	3630      	adds	r6, #48	; 0x30
 8004d50:	42a8      	cmp	r0, r5
 8004d52:	bf08      	it	eq
 8004d54:	f043 0301 	orreq.w	r3, r3, #1
 8004d58:	3530      	adds	r5, #48	; 0x30
 8004d5a:	42b0      	cmp	r0, r6
 8004d5c:	bf08      	it	eq
 8004d5e:	f043 0301 	orreq.w	r3, r3, #1
 8004d62:	3630      	adds	r6, #48	; 0x30
 8004d64:	42a8      	cmp	r0, r5
 8004d66:	bf08      	it	eq
 8004d68:	f043 0301 	orreq.w	r3, r3, #1
 8004d6c:	f505 755c 	add.w	r5, r5, #880	; 0x370
 8004d70:	42b0      	cmp	r0, r6
 8004d72:	bf08      	it	eq
 8004d74:	f043 0301 	orreq.w	r3, r3, #1
 8004d78:	f506 765c 	add.w	r6, r6, #880	; 0x370
 8004d7c:	42a8      	cmp	r0, r5
 8004d7e:	bf08      	it	eq
 8004d80:	f043 0301 	orreq.w	r3, r3, #1
 8004d84:	3530      	adds	r5, #48	; 0x30
 8004d86:	42b0      	cmp	r0, r6
 8004d88:	bf08      	it	eq
 8004d8a:	f043 0301 	orreq.w	r3, r3, #1
 8004d8e:	3630      	adds	r6, #48	; 0x30
 8004d90:	42a8      	cmp	r0, r5
 8004d92:	bf08      	it	eq
 8004d94:	f043 0301 	orreq.w	r3, r3, #1
 8004d98:	3530      	adds	r5, #48	; 0x30
 8004d9a:	42b0      	cmp	r0, r6
 8004d9c:	bf08      	it	eq
 8004d9e:	f043 0301 	orreq.w	r3, r3, #1
 8004da2:	3630      	adds	r6, #48	; 0x30
 8004da4:	42a8      	cmp	r0, r5
 8004da6:	bf08      	it	eq
 8004da8:	f043 0301 	orreq.w	r3, r3, #1
 8004dac:	3530      	adds	r5, #48	; 0x30
 8004dae:	42b0      	cmp	r0, r6
 8004db0:	bf08      	it	eq
 8004db2:	f043 0301 	orreq.w	r3, r3, #1
 8004db6:	42a8      	cmp	r0, r5
 8004db8:	bf08      	it	eq
 8004dba:	f043 0301 	orreq.w	r3, r3, #1
 8004dbe:	b91b      	cbnz	r3, 8004dc8 <HAL_DMA_IRQHandler+0x3f4>
 8004dc0:	4b69      	ldr	r3, [pc, #420]	; (8004f68 <HAL_DMA_IRQHandler+0x594>)
 8004dc2:	4298      	cmp	r0, r3
 8004dc4:	f040 8121 	bne.w	800500a <HAL_DMA_IRQHandler+0x636>
 8004dc8:	6803      	ldr	r3, [r0, #0]
 8004dca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004dce:	b19b      	cbz	r3, 8004df8 <HAL_DMA_IRQHandler+0x424>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004dd0:	f8c8 2008 	str.w	r2, [r8, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dd4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004dd8:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dda:	6803      	ldr	r3, [r0, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ddc:	f000 8090 	beq.w	8004f00 <HAL_DMA_IRQHandler+0x52c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004de0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004de4:	6803      	ldr	r3, [r0, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004de6:	f000 80a8 	beq.w	8004f3a <HAL_DMA_IRQHandler+0x566>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004dea:	0319      	lsls	r1, r3, #12
 8004dec:	f140 80b3 	bpl.w	8004f56 <HAL_DMA_IRQHandler+0x582>
          if(hdma->XferCpltCallback != NULL)
 8004df0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004df2:	b10b      	cbz	r3, 8004df8 <HAL_DMA_IRQHandler+0x424>
            hdma->XferCpltCallback(hdma);
 8004df4:	4620      	mov	r0, r4
 8004df6:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004df8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d074      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x514>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004dfe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e00:	07da      	lsls	r2, r3, #31
 8004e02:	d51f      	bpl.n	8004e44 <HAL_DMA_IRQHandler+0x470>
        __HAL_DMA_DISABLE(hdma);
 8004e04:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8004e06:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e08:	495b      	ldr	r1, [pc, #364]	; (8004f78 <HAL_DMA_IRQHandler+0x5a4>)
        hdma->State = HAL_DMA_STATE_ABORT;
 8004e0a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8004e0e:	6813      	ldr	r3, [r2, #0]
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e16:	9b01      	ldr	r3, [sp, #4]
 8004e18:	fba1 3103 	umull	r3, r1, r1, r3
 8004e1c:	0a89      	lsrs	r1, r1, #10
 8004e1e:	e002      	b.n	8004e26 <HAL_DMA_IRQHandler+0x452>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004e20:	6813      	ldr	r3, [r2, #0]
 8004e22:	07db      	lsls	r3, r3, #31
 8004e24:	d504      	bpl.n	8004e30 <HAL_DMA_IRQHandler+0x45c>
          if (++count > timeout)
 8004e26:	9b03      	ldr	r3, [sp, #12]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	428b      	cmp	r3, r1
 8004e2c:	9303      	str	r3, [sp, #12]
 8004e2e:	d9f7      	bls.n	8004e20 <HAL_DMA_IRQHandler+0x44c>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e30:	6813      	ldr	r3, [r2, #0]
        __HAL_UNLOCK(hdma);
 8004e32:	2200      	movs	r2, #0
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e34:	07df      	lsls	r7, r3, #31
        __HAL_UNLOCK(hdma);
 8004e36:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_ERROR;
 8004e3a:	bf4c      	ite	mi
 8004e3c:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8004e3e:	2301      	movpl	r3, #1
 8004e40:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 8004e44:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d04e      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x514>
        hdma->XferErrorCallback(hdma);
 8004e4a:	4620      	mov	r0, r4
}
 8004e4c:	b005      	add	sp, #20
 8004e4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        hdma->XferErrorCallback(hdma);
 8004e52:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004e54:	681c      	ldr	r4, [r3, #0]
 8004e56:	0764      	lsls	r4, r4, #29
 8004e58:	f57f ae24 	bpl.w	8004aa4 <HAL_DMA_IRQHandler+0xd0>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004e5c:	681c      	ldr	r4, [r3, #0]
 8004e5e:	f024 0404 	bic.w	r4, r4, #4
 8004e62:	601c      	str	r4, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e64:	f8c8 2008 	str.w	r2, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e68:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	6542      	str	r2, [r0, #84]	; 0x54
 8004e70:	e618      	b.n	8004aa4 <HAL_DMA_IRQHandler+0xd0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004e72:	4a42      	ldr	r2, [pc, #264]	; (8004f7c <HAL_DMA_IRQHandler+0x5a8>)
 8004e74:	4d42      	ldr	r5, [pc, #264]	; (8004f80 <HAL_DMA_IRQHandler+0x5ac>)
 8004e76:	4c43      	ldr	r4, [pc, #268]	; (8004f84 <HAL_DMA_IRQHandler+0x5b0>)
 8004e78:	42ab      	cmp	r3, r5
 8004e7a:	bf18      	it	ne
 8004e7c:	4293      	cmpne	r3, r2
 8004e7e:	f105 0528 	add.w	r5, r5, #40	; 0x28
 8004e82:	bf0c      	ite	eq
 8004e84:	2201      	moveq	r2, #1
 8004e86:	2200      	movne	r2, #0
 8004e88:	42a3      	cmp	r3, r4
 8004e8a:	bf08      	it	eq
 8004e8c:	f042 0201 	orreq.w	r2, r2, #1
 8004e90:	3428      	adds	r4, #40	; 0x28
 8004e92:	42ab      	cmp	r3, r5
 8004e94:	bf08      	it	eq
 8004e96:	f042 0201 	orreq.w	r2, r2, #1
 8004e9a:	3528      	adds	r5, #40	; 0x28
 8004e9c:	42a3      	cmp	r3, r4
 8004e9e:	bf08      	it	eq
 8004ea0:	f042 0201 	orreq.w	r2, r2, #1
 8004ea4:	3428      	adds	r4, #40	; 0x28
 8004ea6:	42ab      	cmp	r3, r5
 8004ea8:	bf08      	it	eq
 8004eaa:	f042 0201 	orreq.w	r2, r2, #1
 8004eae:	42a3      	cmp	r3, r4
 8004eb0:	bf08      	it	eq
 8004eb2:	f042 0201 	orreq.w	r2, r2, #1
 8004eb6:	b912      	cbnz	r2, 8004ebe <HAL_DMA_IRQHandler+0x4ea>
 8004eb8:	4a33      	ldr	r2, [pc, #204]	; (8004f88 <HAL_DMA_IRQHandler+0x5b4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d114      	bne.n	8004ee8 <HAL_DMA_IRQHandler+0x514>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ebe:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8004ec0:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ec2:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ec4:	f004 041f 	and.w	r4, r4, #31
 8004ec8:	40a5      	lsls	r5, r4
 8004eca:	420d      	tst	r5, r1
 8004ecc:	d068      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0x5cc>
 8004ece:	0756      	lsls	r6, r2, #29
 8004ed0:	d566      	bpl.n	8004fa0 <HAL_DMA_IRQHandler+0x5cc>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ed2:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004ed4:	f8c8 5004 	str.w	r5, [r8, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ed8:	f140 80ac 	bpl.w	8005034 <HAL_DMA_IRQHandler+0x660>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004edc:	03d3      	lsls	r3, r2, #15
 8004ede:	f100 80af 	bmi.w	8005040 <HAL_DMA_IRQHandler+0x66c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ee2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1b1      	bne.n	8004e4c <HAL_DMA_IRQHandler+0x478>
}
 8004ee8:	b005      	add	sp, #20
 8004eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	031e      	lsls	r6, r3, #12
 8004ef2:	f57f af0c 	bpl.w	8004d0e <HAL_DMA_IRQHandler+0x33a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004ef6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f47f af0a 	bne.w	8004d12 <HAL_DMA_IRQHandler+0x33e>
 8004efe:	e70b      	b.n	8004d18 <HAL_DMA_IRQHandler+0x344>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f00:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f04:	6c22      	ldr	r2, [r4, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f06:	6003      	str	r3, [r0, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f08:	6943      	ldr	r3, [r0, #20]
 8004f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f0e:	6143      	str	r3, [r0, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f10:	2a00      	cmp	r2, #0
 8004f12:	d041      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x5c4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f14:	6803      	ldr	r3, [r0, #0]
 8004f16:	f023 0308 	bic.w	r3, r3, #8
 8004f1a:	6003      	str	r3, [r0, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f1c:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 8004f1e:	2000      	movs	r0, #0
          hdma->State = HAL_DMA_STATE_READY;
 8004f20:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f22:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 8004f26:	6d23      	ldr	r3, [r4, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f28:	f8c8 1008 	str.w	r1, [r8, #8]
          __HAL_UNLOCK(hdma);
 8004f2c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8004f30:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d188      	bne.n	8004e4a <HAL_DMA_IRQHandler+0x476>
 8004f38:	e7d6      	b.n	8004ee8 <HAL_DMA_IRQHandler+0x514>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f3a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8004f3e:	f47f af57 	bne.w	8004df0 <HAL_DMA_IRQHandler+0x41c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004f42:	6802      	ldr	r2, [r0, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8004f44:	2101      	movs	r1, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004f46:	f022 0210 	bic.w	r2, r2, #16
 8004f4a:	6002      	str	r2, [r0, #0]
            __HAL_UNLOCK(hdma);
 8004f4c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8004f50:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
 8004f54:	e74c      	b.n	8004df0 <HAL_DMA_IRQHandler+0x41c>
            if(hdma->XferM1CpltCallback != NULL)
 8004f56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f47f af4b 	bne.w	8004df4 <HAL_DMA_IRQHandler+0x420>
 8004f5e:	e74b      	b.n	8004df8 <HAL_DMA_IRQHandler+0x424>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8004f66:	e6c4      	b.n	8004cf2 <HAL_DMA_IRQHandler+0x31e>
 8004f68:	400204b8 	.word	0x400204b8
 8004f6c:	40020010 	.word	0x40020010
 8004f70:	40020028 	.word	0x40020028
 8004f74:	40020040 	.word	0x40020040
 8004f78:	1b4e81b5 	.word	0x1b4e81b5
 8004f7c:	58025408 	.word	0x58025408
 8004f80:	5802541c 	.word	0x5802541c
 8004f84:	58025430 	.word	0x58025430
 8004f88:	58025494 	.word	0x58025494
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004f8c:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f8e:	f1be 0f00 	cmp.w	lr, #0
 8004f92:	f43f aec1 	beq.w	8004d18 <HAL_DMA_IRQHandler+0x344>
 8004f96:	e653      	b.n	8004c40 <HAL_DMA_IRQHandler+0x26c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f98:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1ba      	bne.n	8004f14 <HAL_DMA_IRQHandler+0x540>
 8004f9e:	e7bd      	b.n	8004f1c <HAL_DMA_IRQHandler+0x548>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004fa0:	2502      	movs	r5, #2
 8004fa2:	40a5      	lsls	r5, r4
 8004fa4:	420d      	tst	r5, r1
 8004fa6:	d00c      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0x5ee>
 8004fa8:	0796      	lsls	r6, r2, #30
 8004faa:	d50a      	bpl.n	8004fc2 <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fac:	0414      	lsls	r4, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004fae:	f8c8 5004 	str.w	r5, [r8, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fb2:	d52e      	bpl.n	8005012 <HAL_DMA_IRQHandler+0x63e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004fb4:	03d1      	lsls	r1, r2, #15
 8004fb6:	d438      	bmi.n	800502a <HAL_DMA_IRQHandler+0x656>
          if(hdma->XferM1CpltCallback != NULL)
 8004fb8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f47f af46 	bne.w	8004e4c <HAL_DMA_IRQHandler+0x478>
 8004fc0:	e792      	b.n	8004ee8 <HAL_DMA_IRQHandler+0x514>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004fc2:	2508      	movs	r5, #8
 8004fc4:	40a5      	lsls	r5, r4
 8004fc6:	420d      	tst	r5, r1
 8004fc8:	d08e      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x514>
 8004fca:	0712      	lsls	r2, r2, #28
 8004fcc:	d58c      	bpl.n	8004ee8 <HAL_DMA_IRQHandler+0x514>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fce:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fd0:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8004fd2:	2500      	movs	r5, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fd4:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fd8:	fa02 f404 	lsl.w	r4, r2, r4
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fdc:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 8004fde:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fe0:	f8c8 4004 	str.w	r4, [r8, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fe4:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8004fe6:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004fea:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f47f af2c 	bne.w	8004e4c <HAL_DMA_IRQHandler+0x478>
 8004ff4:	e778      	b.n	8004ee8 <HAL_DMA_IRQHandler+0x514>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004ff6:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ff8:	f1b9 0f00 	cmp.w	r9, #0
 8004ffc:	f47f adc7 	bne.w	8004b8e <HAL_DMA_IRQHandler+0x1ba>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005000:	f1be 0f00 	cmp.w	lr, #0
 8005004:	f43f ae88 	beq.w	8004d18 <HAL_DMA_IRQHandler+0x344>
 8005008:	e618      	b.n	8004c3c <HAL_DMA_IRQHandler+0x268>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800500a:	6803      	ldr	r3, [r0, #0]
 800500c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005010:	e6dd      	b.n	8004dce <HAL_DMA_IRQHandler+0x3fa>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005012:	f012 0220 	ands.w	r2, r2, #32
 8005016:	d108      	bne.n	800502a <HAL_DMA_IRQHandler+0x656>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005018:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800501a:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800501c:	f021 010a 	bic.w	r1, r1, #10
 8005020:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 8005022:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005026:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800502a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800502c:	2b00      	cmp	r3, #0
 800502e:	f47f af0d 	bne.w	8004e4c <HAL_DMA_IRQHandler+0x478>
 8005032:	e759      	b.n	8004ee8 <HAL_DMA_IRQHandler+0x514>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005034:	0697      	lsls	r7, r2, #26
 8005036:	d403      	bmi.n	8005040 <HAL_DMA_IRQHandler+0x66c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	f022 0204 	bic.w	r2, r2, #4
 800503e:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8005040:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	f47f af02 	bne.w	8004e4c <HAL_DMA_IRQHandler+0x478>
 8005048:	e74e      	b.n	8004ee8 <HAL_DMA_IRQHandler+0x514>
 800504a:	bf00      	nop

0800504c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800504c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005050:	468e      	mov	lr, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005052:	6809      	ldr	r1, [r1, #0]
{
 8005054:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005056:	2900      	cmp	r1, #0
 8005058:	f000 80cd 	beq.w	80051f6 <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00U;
 800505c:	2600      	movs	r6, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800505e:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8005274 <HAL_GPIO_Init+0x228>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005062:	2301      	movs	r3, #1
 8005064:	40b3      	lsls	r3, r6
    if (iocurrent != 0x00U)
 8005066:	ea13 0501 	ands.w	r5, r3, r1
 800506a:	f000 80bf 	beq.w	80051ec <HAL_GPIO_Init+0x1a0>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800506e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005072:	0077      	lsls	r7, r6, #1
 8005074:	f04f 0c03 	mov.w	ip, #3
 8005078:	f022 0910 	bic.w	r9, r2, #16
 800507c:	fa0c fc07 	lsl.w	ip, ip, r7
 8005080:	f109 34ff 	add.w	r4, r9, #4294967295
 8005084:	ea6f 0c0c 	mvn.w	ip, ip
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005088:	2c01      	cmp	r4, #1
 800508a:	d812      	bhi.n	80050b2 <HAL_GPIO_Init+0x66>
        temp = GPIOx->OSPEEDR;
 800508c:	6884      	ldr	r4, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800508e:	f3c2 1a00 	ubfx	sl, r2, #4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005092:	ea04 0b0c 	and.w	fp, r4, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005096:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800509a:	fa0a fa06 	lsl.w	sl, sl, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800509e:	40bc      	lsls	r4, r7
 80050a0:	ea44 040b 	orr.w	r4, r4, fp
        GPIOx->OSPEEDR = temp;
 80050a4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80050a6:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050a8:	ea24 0303 	bic.w	r3, r4, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80050ac:	ea4a 0303 	orr.w	r3, sl, r3
        GPIOx->OTYPER = temp;
 80050b0:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80050b2:	68c3      	ldr	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050b4:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050b8:	f8de 4008 	ldr.w	r4, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050bc:	ea03 030c 	and.w	r3, r3, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050c0:	fa04 f407 	lsl.w	r4, r4, r7
 80050c4:	ea44 0403 	orr.w	r4, r4, r3
      GPIOx->PUPDR = temp;
 80050c8:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050ca:	d115      	bne.n	80050f8 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3U];
 80050cc:	08f3      	lsrs	r3, r6, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050ce:	f006 0907 	and.w	r9, r6, #7
 80050d2:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050d6:	f8de 4010 	ldr.w	r4, [lr, #16]
 80050da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050de:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80050e2:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050e6:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050ea:	fa04 f409 	lsl.w	r4, r4, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050ee:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050f2:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 80050f6:	621c      	str	r4, [r3, #32]
      temp = GPIOx->MODER;
 80050f8:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050fa:	f002 0303 	and.w	r3, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050fe:	ea04 0c0c 	and.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005102:	40bb      	lsls	r3, r7
 8005104:	ea43 030c 	orr.w	r3, r3, ip
      GPIOx->MODER = temp;
 8005108:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800510a:	00d3      	lsls	r3, r2, #3
 800510c:	d56e      	bpl.n	80051ec <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800510e:	4b53      	ldr	r3, [pc, #332]	; (800525c <HAL_GPIO_Init+0x210>)
 8005110:	f026 0903 	bic.w	r9, r6, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005114:	240f      	movs	r4, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005116:	f8d3 70f4 	ldr.w	r7, [r3, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800511a:	f006 0303 	and.w	r3, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800511e:	f047 0c02 	orr.w	ip, r7, #2
 8005122:	4f4f      	ldr	r7, [pc, #316]	; (8005260 <HAL_GPIO_Init+0x214>)
 8005124:	444f      	add	r7, r9
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005126:	ea4f 0983 	mov.w	r9, r3, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800512a:	4b4c      	ldr	r3, [pc, #304]	; (800525c <HAL_GPIO_Init+0x210>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800512c:	fa04 f409 	lsl.w	r4, r4, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005130:	f8c3 c0f4 	str.w	ip, [r3, #244]	; 0xf4
 8005134:	f8d3 c0f4 	ldr.w	ip, [r3, #244]	; 0xf4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005138:	f5a3 4388 	sub.w	r3, r3, #17408	; 0x4400
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800513c:	f00c 0c02 	and.w	ip, ip, #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005140:	4298      	cmp	r0, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005142:	f8cd c004 	str.w	ip, [sp, #4]
 8005146:	f8dd c004 	ldr.w	ip, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800514a:	f8d7 c008 	ldr.w	ip, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800514e:	ea2c 0404 	bic.w	r4, ip, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005152:	d026      	beq.n	80051a2 <HAL_GPIO_Init+0x156>
 8005154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005158:	4298      	cmp	r0, r3
 800515a:	d055      	beq.n	8005208 <HAL_GPIO_Init+0x1bc>
 800515c:	4b41      	ldr	r3, [pc, #260]	; (8005264 <HAL_GPIO_Init+0x218>)
 800515e:	4298      	cmp	r0, r3
 8005160:	d04c      	beq.n	80051fc <HAL_GPIO_Init+0x1b0>
 8005162:	4b41      	ldr	r3, [pc, #260]	; (8005268 <HAL_GPIO_Init+0x21c>)
 8005164:	4298      	cmp	r0, r3
 8005166:	d05b      	beq.n	8005220 <HAL_GPIO_Init+0x1d4>
 8005168:	4b40      	ldr	r3, [pc, #256]	; (800526c <HAL_GPIO_Init+0x220>)
 800516a:	4298      	cmp	r0, r3
 800516c:	d05e      	beq.n	800522c <HAL_GPIO_Init+0x1e0>
 800516e:	4b40      	ldr	r3, [pc, #256]	; (8005270 <HAL_GPIO_Init+0x224>)
 8005170:	4298      	cmp	r0, r3
 8005172:	d04f      	beq.n	8005214 <HAL_GPIO_Init+0x1c8>
 8005174:	f8df c100 	ldr.w	ip, [pc, #256]	; 8005278 <HAL_GPIO_Init+0x22c>
 8005178:	4560      	cmp	r0, ip
 800517a:	d05d      	beq.n	8005238 <HAL_GPIO_Init+0x1ec>
 800517c:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 800527c <HAL_GPIO_Init+0x230>
 8005180:	4560      	cmp	r0, ip
 8005182:	d05f      	beq.n	8005244 <HAL_GPIO_Init+0x1f8>
 8005184:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8005280 <HAL_GPIO_Init+0x234>
 8005188:	4560      	cmp	r0, ip
 800518a:	d061      	beq.n	8005250 <HAL_GPIO_Init+0x204>
 800518c:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8005284 <HAL_GPIO_Init+0x238>
 8005190:	4560      	cmp	r0, ip
 8005192:	bf0c      	ite	eq
 8005194:	f04f 0c09 	moveq.w	ip, #9
 8005198:	f04f 0c0a 	movne.w	ip, #10
 800519c:	fa0c f309 	lsl.w	r3, ip, r9
 80051a0:	431c      	orrs	r4, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051a2:	60bc      	str	r4, [r7, #8]
        temp &= ~(iocurrent);
 80051a4:	43ec      	mvns	r4, r5
        temp = EXTI_CurrentCPU->IMR1;
 80051a6:	f8d8 3000 	ldr.w	r3, [r8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051aa:	03d7      	lsls	r7, r2, #15
        {
          temp |= iocurrent;
 80051ac:	bf4c      	ite	mi
 80051ae:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 80051b0:	4023      	andpl	r3, r4
        }
        EXTI_CurrentCPU->IMR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051b2:	0397      	lsls	r7, r2, #14
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051b4:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 = temp;
 80051b8:	f8c8 3000 	str.w	r3, [r8]
        temp = EXTI_CurrentCPU->EMR1;
 80051bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
          temp |= iocurrent;
 80051c0:	bf4c      	ite	mi
 80051c2:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 80051c4:	4023      	andpl	r3, r4
        EXTI_CurrentCPU->EMR1 = temp;
 80051c6:	f8c8 3004 	str.w	r3, [r8, #4]
        temp = EXTI->RTSR1;
 80051ca:	683b      	ldr	r3, [r7, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051cc:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80051ce:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
          temp |= iocurrent;
 80051d2:	bf4c      	ite	mi
 80051d4:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 80051d6:	4023      	andpl	r3, r4

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051d8:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 80051da:	603b      	str	r3, [r7, #0]
        temp = EXTI->FTSR1;
 80051dc:	687b      	ldr	r3, [r7, #4]
        temp &= ~(iocurrent);
 80051de:	bf54      	ite	pl
 80051e0:	ea04 0503 	andpl.w	r5, r4, r3
        {
          temp |= iocurrent;
 80051e4:	431d      	orrmi	r5, r3
        }
        EXTI->FTSR1 = temp;
 80051e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ea:	605d      	str	r5, [r3, #4]
      }
    }

    position++;
 80051ec:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051ee:	fa31 f306 	lsrs.w	r3, r1, r6
 80051f2:	f47f af36 	bne.w	8005062 <HAL_GPIO_Init+0x16>
  }
}
 80051f6:	b003      	add	sp, #12
 80051f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fc:	f04f 0c02 	mov.w	ip, #2
 8005200:	fa0c f309 	lsl.w	r3, ip, r9
 8005204:	431c      	orrs	r4, r3
 8005206:	e7cc      	b.n	80051a2 <HAL_GPIO_Init+0x156>
 8005208:	f04f 0c01 	mov.w	ip, #1
 800520c:	fa0c f309 	lsl.w	r3, ip, r9
 8005210:	431c      	orrs	r4, r3
 8005212:	e7c6      	b.n	80051a2 <HAL_GPIO_Init+0x156>
 8005214:	f04f 0c05 	mov.w	ip, #5
 8005218:	fa0c f309 	lsl.w	r3, ip, r9
 800521c:	431c      	orrs	r4, r3
 800521e:	e7c0      	b.n	80051a2 <HAL_GPIO_Init+0x156>
 8005220:	f04f 0c03 	mov.w	ip, #3
 8005224:	fa0c f309 	lsl.w	r3, ip, r9
 8005228:	431c      	orrs	r4, r3
 800522a:	e7ba      	b.n	80051a2 <HAL_GPIO_Init+0x156>
 800522c:	f04f 0c04 	mov.w	ip, #4
 8005230:	fa0c f309 	lsl.w	r3, ip, r9
 8005234:	431c      	orrs	r4, r3
 8005236:	e7b4      	b.n	80051a2 <HAL_GPIO_Init+0x156>
 8005238:	f04f 0c06 	mov.w	ip, #6
 800523c:	fa0c f309 	lsl.w	r3, ip, r9
 8005240:	431c      	orrs	r4, r3
 8005242:	e7ae      	b.n	80051a2 <HAL_GPIO_Init+0x156>
 8005244:	f04f 0c07 	mov.w	ip, #7
 8005248:	fa0c f309 	lsl.w	r3, ip, r9
 800524c:	431c      	orrs	r4, r3
 800524e:	e7a8      	b.n	80051a2 <HAL_GPIO_Init+0x156>
 8005250:	f04f 0c08 	mov.w	ip, #8
 8005254:	fa0c f309 	lsl.w	r3, ip, r9
 8005258:	431c      	orrs	r4, r3
 800525a:	e7a2      	b.n	80051a2 <HAL_GPIO_Init+0x156>
 800525c:	58024400 	.word	0x58024400
 8005260:	58000400 	.word	0x58000400
 8005264:	58020800 	.word	0x58020800
 8005268:	58020c00 	.word	0x58020c00
 800526c:	58021000 	.word	0x58021000
 8005270:	58021400 	.word	0x58021400
 8005274:	58000080 	.word	0x58000080
 8005278:	58021800 	.word	0x58021800
 800527c:	58021c00 	.word	0x58021c00
 8005280:	58022000 	.word	0x58022000
 8005284:	58022400 	.word	0x58022400

08005288 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005288:	b902      	cbnz	r2, 800528c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800528a:	0409      	lsls	r1, r1, #16
 800528c:	6181      	str	r1, [r0, #24]
  }
}
 800528e:	4770      	bx	lr

08005290 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005294:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8005298:	4201      	tst	r1, r0
 800529a:	d100      	bne.n	800529e <HAL_GPIO_EXTI_IRQHandler+0xe>
 800529c:	4770      	bx	lr
{
 800529e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052a0:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052a4:	f7fb fe00 	bl	8000ea8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80052a8:	bd08      	pop	{r3, pc}
 80052aa:	bf00      	nop

080052ac <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80052ac:	2800      	cmp	r0, #0
 80052ae:	d066      	beq.n	800537e <HAL_LPTIM_Init+0xd2>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80052b0:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
{
 80052b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80052b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80052bc:	4604      	mov	r4, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d03c      	beq.n	800533c <HAL_LPTIM_Init+0x90>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80052c2:	2302      	movs	r3, #2
 80052c4:	6960      	ldr	r0, [r4, #20]
 80052c6:	68a2      	ldr	r2, [r4, #8]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80052c8:	f64f 7eff 	movw	lr, #65535	; 0xffff
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80052cc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 80052d0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80052d2:	e9d4 1500 	ldrd	r1, r5, [r4]
 80052d6:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 80052da:	2d01      	cmp	r5, #1
  tmpcfgr = hlptim->Instance->CFGR;
 80052dc:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80052e0:	d026      	beq.n	8005330 <HAL_LPTIM_Init+0x84>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80052e2:	4570      	cmp	r0, lr
 80052e4:	d001      	beq.n	80052ea <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 80052e6:	f42c 4c60 	bic.w	ip, ip, #57344	; 0xe000
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80052ea:	bbb5      	cbnz	r5, 800535a <HAL_LPTIM_Init+0xae>
  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80052ec:	4332      	orrs	r2, r6
 80052ee:	69e6      	ldr	r6, [r4, #28]
 80052f0:	6925      	ldr	r5, [r4, #16]
 80052f2:	4313      	orrs	r3, r2
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80052f4:	4a2e      	ldr	r2, [pc, #184]	; (80053b0 <HAL_LPTIM_Init+0x104>)
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80052f6:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80052f8:	ea0c 0202 	and.w	r2, ip, r2
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80052fc:	4333      	orrs	r3, r6
 80052fe:	432b      	orrs	r3, r5
 8005300:	4313      	orrs	r3, r2
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005306:	4290      	cmp	r0, r2
 8005308:	d002      	beq.n	8005310 <HAL_LPTIM_Init+0x64>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 800530a:	69a2      	ldr	r2, [r4, #24]
 800530c:	4310      	orrs	r0, r2
 800530e:	4303      	orrs	r3, r0

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8005310:	4a28      	ldr	r2, [pc, #160]	; (80053b4 <HAL_LPTIM_Init+0x108>)
  hlptim->Instance->CFGR = tmpcfgr;
 8005312:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8005314:	4291      	cmp	r1, r2
 8005316:	d016      	beq.n	8005346 <HAL_LPTIM_Init+0x9a>
 8005318:	4b27      	ldr	r3, [pc, #156]	; (80053b8 <HAL_LPTIM_Init+0x10c>)
 800531a:	4299      	cmp	r1, r3
 800531c:	d013      	beq.n	8005346 <HAL_LPTIM_Init+0x9a>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 800531e:	4b27      	ldr	r3, [pc, #156]	; (80053bc <HAL_LPTIM_Init+0x110>)
 8005320:	4299      	cmp	r1, r3
 8005322:	d03c      	beq.n	800539e <HAL_LPTIM_Init+0xf2>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005324:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8005326:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005328:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 800532c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005330:	4570      	cmp	r0, lr
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8005332:	f02c 0806 	bic.w	r8, ip, #6
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005336:	d024      	beq.n	8005382 <HAL_LPTIM_Init+0xd6>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8005338:	46c4      	mov	ip, r8
 800533a:	e7d4      	b.n	80052e6 <HAL_LPTIM_Init+0x3a>
    hlptim->Lock = HAL_UNLOCKED;
 800533c:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 8005340:	f7fd faea 	bl	8002918 <HAL_LPTIM_MspInit>
 8005344:	e7bd      	b.n	80052c2 <HAL_LPTIM_Init+0x16>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8005346:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 800534a:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800534c:	4313      	orrs	r3, r2
 800534e:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005350:	2301      	movs	r3, #1
 8005352:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8005356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800535a:	432a      	orrs	r2, r5
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800535c:	f8df e060 	ldr.w	lr, [pc, #96]	; 80053c0 <HAL_LPTIM_Init+0x114>
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005360:	2d01      	cmp	r5, #1
              hlptim->Init.Clock.Prescaler |
 8005362:	ea42 0206 	orr.w	r2, r2, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005366:	ea0c 0e0e 	and.w	lr, ip, lr
              hlptim->Init.OutputPolarity  |
 800536a:	ea43 0302 	orr.w	r3, r3, r2
              hlptim->Init.UpdateMode      |
 800536e:	ea43 0307 	orr.w	r3, r3, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005372:	ea43 030e 	orr.w	r3, r3, lr
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005376:	d1c4      	bne.n	8005302 <HAL_LPTIM_Init+0x56>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 8005378:	68e2      	ldr	r2, [r4, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	e7c1      	b.n	8005302 <HAL_LPTIM_Init+0x56>
    return HAL_ERROR;
 800537e:	2001      	movs	r0, #1
}
 8005380:	4770      	bx	lr
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005382:	f042 0501 	orr.w	r5, r2, #1
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005386:	f8df e038 	ldr.w	lr, [pc, #56]	; 80053c0 <HAL_LPTIM_Init+0x114>
              hlptim->Init.Clock.Prescaler |
 800538a:	ea45 0206 	orr.w	r2, r5, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800538e:	ea0c 0e0e 	and.w	lr, ip, lr
              hlptim->Init.OutputPolarity  |
 8005392:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005394:	ea42 0307 	orr.w	r3, r2, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005398:	ea43 030e 	orr.w	r3, r3, lr
 800539c:	e7ec      	b.n	8005378 <HAL_LPTIM_Init+0xcc>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800539e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80053a0:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80053a2:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 80053a4:	2301      	movs	r3, #1
 80053a6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80053aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053ae:	bf00      	nop
 80053b0:	ff19f120 	.word	0xff19f120
 80053b4:	40002400 	.word	0x40002400
 80053b8:	58002400 	.word	0x58002400
 80053bc:	58002800 	.word	0x58002800
 80053c0:	ff19f1f8 	.word	0xff19f1f8

080053c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80053c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053c6:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80053c8:	2800      	cmp	r0, #0
 80053ca:	f000 808a 	beq.w	80054e2 <HAL_PCD_Init+0x11e>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80053ce:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 80053d2:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 80053d4:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80053d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80053da:	b343      	cbz	r3, 800542e <HAL_PCD_Init+0x6a>
 80053dc:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80053de:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053e0:	466f      	mov	r7, sp
 80053e2:	1d26      	adds	r6, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80053e4:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80053e8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053ea:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80053ec:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 80053f0:	bf08      	it	eq
 80053f2:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 80053f4:	f003 fc72 	bl	8008cdc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053f8:	f855 eb10 	ldr.w	lr, [r5], #16
 80053fc:	46ac      	mov	ip, r5
 80053fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005402:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005404:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005408:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800540a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800540e:	e887 0003 	stmia.w	r7, {r0, r1}
 8005412:	4670      	mov	r0, lr
 8005414:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8005418:	f003 fbee 	bl	8008bf8 <USB_CoreInit>
 800541c:	4607      	mov	r7, r0
 800541e:	b160      	cbz	r0, 800543a <HAL_PCD_Init+0x76>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8005420:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005422:	2302      	movs	r3, #2
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8005424:	4628      	mov	r0, r5
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005426:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
}
 800542a:	b00b      	add	sp, #44	; 0x2c
 800542c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800542e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8005432:	f004 fba3 	bl	8009b7c <HAL_PCD_MspInit>
 8005436:	6820      	ldr	r0, [r4, #0]
 8005438:	e7d1      	b.n	80053de <HAL_PCD_Init+0x1a>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800543a:	4601      	mov	r1, r0
 800543c:	6820      	ldr	r0, [r4, #0]
 800543e:	f003 fc55 	bl	8008cec <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005442:	6860      	ldr	r0, [r4, #4]
 8005444:	b360      	cbz	r0, 80054a0 <HAL_PCD_Init+0xdc>
 8005446:	4639      	mov	r1, r7
    hpcd->IN_ep[i].is_in = 1U;
 8005448:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800544c:	463a      	mov	r2, r7
    hpcd->IN_ep[i].is_in = 1U;
 800544e:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005452:	1c4f      	adds	r7, r1, #1
    hpcd->IN_ep[i].is_in = 1U;
 8005454:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8005458:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800545c:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005460:	b2f9      	uxtb	r1, r7
    hpcd->IN_ep[i].is_in = 1U;
 8005462:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005466:	4281      	cmp	r1, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800546c:	651a      	str	r2, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800546e:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005472:	d3ec      	bcc.n	800544e <HAL_PCD_Init+0x8a>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005474:	2200      	movs	r2, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8005476:	4611      	mov	r1, r2
 8005478:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800547c:	1c57      	adds	r7, r2, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800547e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 8005482:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005486:	b2fa      	uxtb	r2, r7
    hpcd->OUT_ep[i].is_in = 0U;
 8005488:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800548c:	4282      	cmp	r2, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800548e:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005492:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005496:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 800549a:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800549e:	d3eb      	bcc.n	8005478 <HAL_PCD_Init+0xb4>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054a0:	466f      	mov	r7, sp
 80054a2:	f8d4 c000 	ldr.w	ip, [r4]
 80054a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054a8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80054aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80054ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80054b2:	e887 0003 	stmia.w	r7, {r0, r1}
 80054b6:	4660      	mov	r0, ip
 80054b8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80054bc:	f003 fc2e 	bl	8008d1c <USB_DevInit>
 80054c0:	4605      	mov	r5, r0
 80054c2:	2800      	cmp	r0, #0
 80054c4:	d1ac      	bne.n	8005420 <HAL_PCD_Init+0x5c>
  hpcd->State = HAL_PCD_STATE_READY;
 80054c6:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 80054c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hpcd->USB_Address = 0U;
 80054ca:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 80054ce:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 80054d0:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 80054d4:	d009      	beq.n	80054ea <HAL_PCD_Init+0x126>
  (void)USB_DevDisconnect(hpcd->Instance);
 80054d6:	6820      	ldr	r0, [r4, #0]
 80054d8:	f003 ff88 	bl	80093ec <USB_DevDisconnect>
}
 80054dc:	4628      	mov	r0, r5
 80054de:	b00b      	add	sp, #44	; 0x2c
 80054e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80054e2:	2501      	movs	r5, #1
}
 80054e4:	4628      	mov	r0, r5
 80054e6:	b00b      	add	sp, #44	; 0x2c
 80054e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80054ea:	4620      	mov	r0, r4
 80054ec:	f000 f954 	bl	8005798 <HAL_PCDEx_ActivateLPM>
 80054f0:	e7f1      	b.n	80054d6 <HAL_PCD_Init+0x112>
 80054f2:	bf00      	nop

080054f4 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80054f4:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d01a      	beq.n	8005532 <HAL_PCD_Start+0x3e>
 80054fc:	2101      	movs	r1, #1
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80054fe:	6a82      	ldr	r2, [r0, #40]	; 0x28
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005500:	6803      	ldr	r3, [r0, #0]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005502:	428a      	cmp	r2, r1
{
 8005504:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8005506:	f880 13bc 	strb.w	r1, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800550a:	d00a      	beq.n	8005522 <HAL_PCD_Start+0x2e>
 800550c:	4604      	mov	r4, r0
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800550e:	4618      	mov	r0, r3
 8005510:	f003 ff60 	bl	80093d4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005514:	6820      	ldr	r0, [r4, #0]
 8005516:	f003 fbd9 	bl	8008ccc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800551a:	2000      	movs	r0, #0
 800551c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 8005520:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005522:	6982      	ldr	r2, [r0, #24]
 8005524:	428a      	cmp	r2, r1
 8005526:	d0f1      	beq.n	800550c <HAL_PCD_Start+0x18>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800552a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800552e:	639a      	str	r2, [r3, #56]	; 0x38
 8005530:	e7ec      	b.n	800550c <HAL_PCD_Start+0x18>
  __HAL_LOCK(hpcd);
 8005532:	2002      	movs	r0, #2
}
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop

08005538 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553a:	f001 040f 	and.w	r4, r1, #15
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800553e:	0609      	lsls	r1, r1, #24
 8005540:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8005544:	ea4f 0585 	mov.w	r5, r5, lsl #2
 8005548:	d422      	bmi.n	8005590 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800554a:	f505 71fe 	add.w	r1, r5, #508	; 0x1fc
    ep->is_in = 0U;
 800554e:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8005552:	2600      	movs	r6, #0
 8005554:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005558:	4401      	add	r1, r0
    ep->is_in = 0U;
 800555a:	f885 61fd 	strb.w	r6, [r5, #509]	; 0x1fd

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;

  if (ep->is_in != 0U)
 800555e:	784d      	ldrb	r5, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005560:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8005562:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8005564:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8005566:	b105      	cbz	r5, 800556a <HAL_PCD_EP_Open+0x32>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005568:	80cc      	strh	r4, [r1, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800556a:	2b02      	cmp	r3, #2
 800556c:	d101      	bne.n	8005572 <HAL_PCD_EP_Open+0x3a>
  {
    ep->data_pid_start = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	710b      	strb	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8005572:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8005576:	2b01      	cmp	r3, #1
 8005578:	d015      	beq.n	80055a6 <HAL_PCD_EP_Open+0x6e>
 800557a:	4604      	mov	r4, r0
 800557c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800557e:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8005580:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005584:	f003 fcae 	bl	8008ee4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005588:	2000      	movs	r0, #0
 800558a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return ret;
}
 800558e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 8005590:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005594:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    ep->is_in = 1U;
 8005598:	2701      	movs	r7, #1
 800559a:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800559e:	4401      	add	r1, r0
    ep->is_in = 1U;
 80055a0:	f885 703d 	strb.w	r7, [r5, #61]	; 0x3d
 80055a4:	e7db      	b.n	800555e <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 80055a6:	2002      	movs	r0, #2
}
 80055a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055aa:	bf00      	nop

080055ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055ac:	f001 020f 	and.w	r2, r1, #15
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055b0:	0609      	lsls	r1, r1, #24
{
 80055b2:	b538      	push	{r3, r4, r5, lr}
 80055b4:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 80055b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 80055bc:	d419      	bmi.n	80055f2 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055be:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80055c2:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 80055c6:	2400      	movs	r4, #0
 80055c8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055cc:	4401      	add	r1, r0
    ep->is_in = 0U;
 80055ce:	f883 41fd 	strb.w	r4, [r3, #509]	; 0x1fd
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80055d2:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 80055d4:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d019      	beq.n	8005610 <HAL_PCD_EP_Close+0x64>
 80055dc:	4604      	mov	r4, r0
 80055de:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80055e0:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80055e2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80055e6:	f003 fcbf 	bl	8008f68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055ea:	2000      	movs	r0, #0
 80055ec:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 80055f0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055f2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 80055f6:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 80055fa:	2501      	movs	r5, #1
 80055fc:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005600:	4401      	add	r1, r0
    ep->is_in = 1U;
 8005602:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005606:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8005608:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800560c:	2b01      	cmp	r3, #1
 800560e:	d1e5      	bne.n	80055dc <HAL_PCD_EP_Close+0x30>
 8005610:	2002      	movs	r0, #2
}
 8005612:	bd38      	pop	{r3, r4, r5, pc}

08005614 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005614:	b570      	push	{r4, r5, r6, lr}
 8005616:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 800561a:	2600      	movs	r6, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800561c:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800561e:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005622:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8005626:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800562a:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 800562e:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8005632:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 8005636:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  ep->xfer_count = 0U;
 800563a:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
  ep->is_in = 0U;
 800563e:	f884 61fd 	strb.w	r6, [r4, #509]	; 0x1fd

  if (hpcd->Init.dma_enable == 1U)
 8005642:	6903      	ldr	r3, [r0, #16]
 8005644:	6800      	ldr	r0, [r0, #0]
 8005646:	2b01      	cmp	r3, #1
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005648:	bf08      	it	eq
 800564a:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 800564e:	b2da      	uxtb	r2, r3
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005650:	b11d      	cbz	r5, 800565a <HAL_PCD_EP_Receive+0x46>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005652:	f003 fce9 	bl	8009028 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8005656:	2000      	movs	r0, #0
 8005658:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800565a:	f003 fe01 	bl	8009260 <USB_EP0StartXfer>
}
 800565e:	2000      	movs	r0, #0
 8005660:	bd70      	pop	{r4, r5, r6, pc}
 8005662:	bf00      	nop

08005664 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005664:	f001 010f 	and.w	r1, r1, #15
 8005668:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800566c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8005670:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop

08005678 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	f001 050f 	and.w	r5, r1, #15

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
  ep->is_in = 1U;
 800567e:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 8005680:	2700      	movs	r7, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005682:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8005684:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005688:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 800568c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005690:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 8005692:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8005694:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 8005696:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 800569a:	6567      	str	r7, [r4, #84]	; 0x54
  ep->is_in = 1U;
 800569c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d

  if (hpcd->Init.dma_enable == 1U)
 80056a0:	6903      	ldr	r3, [r0, #16]
 80056a2:	6800      	ldr	r0, [r0, #0]
 80056a4:	42b3      	cmp	r3, r6
  {
    ep->dma_addr = (uint32_t)pBuf;
 80056a6:	bf08      	it	eq
 80056a8:	64e2      	streq	r2, [r4, #76]	; 0x4c
 80056aa:	b2da      	uxtb	r2, r3
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056ac:	b11d      	cbz	r5, 80056b6 <HAL_PCD_EP_Transmit+0x3e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056ae:	f003 fcbb 	bl	8009028 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80056b2:	2000      	movs	r0, #0
 80056b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056b6:	f003 fdd3 	bl	8009260 <USB_EP0StartXfer>
}
 80056ba:	2000      	movs	r0, #0
 80056bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056be:	bf00      	nop

080056c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056c0:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80056c2:	6843      	ldr	r3, [r0, #4]
 80056c4:	f001 050f 	and.w	r5, r1, #15
 80056c8:	429d      	cmp	r5, r3
 80056ca:	d81f      	bhi.n	800570c <HAL_PCD_EP_SetStall+0x4c>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056cc:	060b      	lsls	r3, r1, #24
 80056ce:	d41f      	bmi.n	8005710 <HAL_PCD_EP_SetStall+0x50>
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
    ep->is_in = 0U;
 80056d0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 80056d4:	241c      	movs	r4, #28
    ep->is_in = 0U;
 80056d6:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80056d8:	fb04 0101 	mla	r1, r4, r1, r0
    ep->is_in = 0U;
 80056dc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 80056e0:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 80056e4:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  }

  ep->is_stall = 1U;
 80056e8:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80056ea:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80056ec:	708b      	strb	r3, [r1, #2]

  __HAL_LOCK(hpcd);
 80056ee:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d01e      	beq.n	8005734 <HAL_PCD_EP_SetStall+0x74>
 80056f6:	4604      	mov	r4, r0
 80056f8:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80056fc:	6800      	ldr	r0, [r0, #0]
 80056fe:	f003 fe39 	bl	8009374 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005702:	b1cd      	cbz	r5, 8005738 <HAL_PCD_EP_SetStall+0x78>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd);
 8005704:	2000      	movs	r0, #0
 8005706:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 800570a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800570c:	2001      	movs	r0, #1
}
 800570e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005710:	211c      	movs	r1, #28
    ep->is_in = 1U;
 8005712:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8005716:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005718:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800571c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005720:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8005722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8005726:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8005728:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800572a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800572c:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8005730:	429a      	cmp	r2, r3
 8005732:	d1e0      	bne.n	80056f6 <HAL_PCD_EP_SetStall+0x36>
 8005734:	2002      	movs	r0, #2
}
 8005736:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005738:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800573c:	7c21      	ldrb	r1, [r4, #16]
 800573e:	6820      	ldr	r0, [r4, #0]
 8005740:	f003 fe60 	bl	8009404 <USB_EP0_OutStart>
 8005744:	e7de      	b.n	8005704 <HAL_PCD_EP_SetStall+0x44>
 8005746:	bf00      	nop

08005748 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005748:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800574a:	6805      	ldr	r5, [r0, #0]
 800574c:	0412      	lsls	r2, r2, #16
 800574e:	6a6c      	ldr	r4, [r5, #36]	; 0x24

  if (fifo == 0U)
 8005750:	b1c1      	cbz	r1, 8005784 <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005752:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8005754:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005756:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800575a:	d00b      	beq.n	8005774 <HAL_PCDEx_SetTxFiFo+0x2c>
 800575c:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800575e:	f103 0040 	add.w	r0, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 8005762:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005764:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8005768:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800576a:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800576c:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800576e:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8005772:	d3f4      	bcc.n	800575e <HAL_PCDEx_SetTxFiFo+0x16>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005774:	3140      	adds	r1, #64	; 0x40
 8005776:	4314      	orrs	r4, r2
  }

  return HAL_OK;
}
 8005778:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800577a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800577e:	604c      	str	r4, [r1, #4]
}
 8005780:	bc30      	pop	{r4, r5}
 8005782:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005784:	4314      	orrs	r4, r2
}
 8005786:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005788:	62ac      	str	r4, [r5, #40]	; 0x28
}
 800578a:	bc30      	pop	{r4, r5}
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop

08005790 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8005790:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8005792:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8005794:	6259      	str	r1, [r3, #36]	; 0x24
}
 8005796:	4770      	bx	lr

08005798 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005798:	6803      	ldr	r3, [r0, #0]

  hpcd->lpm_active = 1U;
 800579a:	2101      	movs	r1, #1
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800579c:	4a08      	ldr	r2, [pc, #32]	; (80057c0 <HAL_PCDEx_ActivateLPM+0x28>)
{
 800579e:	b430      	push	{r4, r5}
  hpcd->lpm_active = 1U;
 80057a0:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
{
 80057a4:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80057a6:	6999      	ldr	r1, [r3, #24]
  hpcd->LPM_State = LPM_L0;
 80057a8:	2500      	movs	r5, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80057aa:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  hpcd->LPM_State = LPM_L0;
 80057ae:	f884 53f4 	strb.w	r5, [r4, #1012]	; 0x3f4

  return HAL_OK;
}
 80057b2:	4628      	mov	r0, r5
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80057b4:	6199      	str	r1, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80057b6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057b8:	430a      	orrs	r2, r1
}
 80057ba:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80057bc:	655a      	str	r2, [r3, #84]	; 0x54
}
 80057be:	4770      	bx	lr
 80057c0:	10000003 	.word	0x10000003

080057c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80057c4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80057c6:	4b11      	ldr	r3, [pc, #68]	; (800580c <HAL_PWREx_ConfigSupply+0x48>)
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	0752      	lsls	r2, r2, #29
 80057cc:	d406      	bmi.n	80057dc <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80057d4:	1a18      	subs	r0, r3, r0
 80057d6:	bf18      	it	ne
 80057d8:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80057da:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80057dc:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80057de:	461c      	mov	r4, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80057e0:	f022 0207 	bic.w	r2, r2, #7
 80057e4:	4310      	orrs	r0, r2
 80057e6:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 80057e8:	f7fd faa0 	bl	8002d2c <HAL_GetTick>
 80057ec:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80057ee:	e005      	b.n	80057fc <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80057f0:	f7fd fa9c 	bl	8002d2c <HAL_GetTick>
 80057f4:	1b40      	subs	r0, r0, r5
 80057f6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80057fa:	d804      	bhi.n	8005806 <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80057fc:	6863      	ldr	r3, [r4, #4]
 80057fe:	049b      	lsls	r3, r3, #18
 8005800:	d5f6      	bpl.n	80057f0 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 8005802:	2000      	movs	r0, #0
}
 8005804:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8005806:	2001      	movs	r0, #1
}
 8005808:	bd38      	pop	{r3, r4, r5, pc}
 800580a:	bf00      	nop
 800580c:	58024800 	.word	0x58024800

08005810 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005810:	4a02      	ldr	r2, [pc, #8]	; (800581c <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8005812:	68d3      	ldr	r3, [r2, #12]
 8005814:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005818:	60d3      	str	r3, [r2, #12]
}
 800581a:	4770      	bx	lr
 800581c:	58024800 	.word	0x58024800

08005820 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005820:	2800      	cmp	r0, #0
 8005822:	f000 819d 	beq.w	8005b60 <HAL_RCC_OscConfig+0x340>
{
 8005826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005828:	6803      	ldr	r3, [r0, #0]
 800582a:	4604      	mov	r4, r0
 800582c:	07d9      	lsls	r1, r3, #31
 800582e:	d533      	bpl.n	8005898 <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005830:	49a7      	ldr	r1, [pc, #668]	; (8005ad0 <HAL_RCC_OscConfig+0x2b0>)
 8005832:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005834:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005836:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800583a:	2a10      	cmp	r2, #16
 800583c:	f000 8112 	beq.w	8005a64 <HAL_RCC_OscConfig+0x244>
 8005840:	2a18      	cmp	r2, #24
 8005842:	f000 810a 	beq.w	8005a5a <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005846:	6863      	ldr	r3, [r4, #4]
 8005848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800584c:	d010      	beq.n	8005870 <HAL_RCC_OscConfig+0x50>
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 816f 	beq.w	8005b32 <HAL_RCC_OscConfig+0x312>
 8005854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005858:	4b9d      	ldr	r3, [pc, #628]	; (8005ad0 <HAL_RCC_OscConfig+0x2b0>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	f000 81e4 	beq.w	8005c28 <HAL_RCC_OscConfig+0x408>
 8005860:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e004      	b.n	800587a <HAL_RCC_OscConfig+0x5a>
 8005870:	4a97      	ldr	r2, [pc, #604]	; (8005ad0 <HAL_RCC_OscConfig+0x2b0>)
 8005872:	6813      	ldr	r3, [r2, #0]
 8005874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005878:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587a:	f7fd fa57 	bl	8002d2c <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800587e:	4d94      	ldr	r5, [pc, #592]	; (8005ad0 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8005880:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005882:	e005      	b.n	8005890 <HAL_RCC_OscConfig+0x70>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005884:	f7fd fa52 	bl	8002d2c <HAL_GetTick>
 8005888:	1b80      	subs	r0, r0, r6
 800588a:	2864      	cmp	r0, #100	; 0x64
 800588c:	f200 814f 	bhi.w	8005b2e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005890:	682b      	ldr	r3, [r5, #0]
 8005892:	039f      	lsls	r7, r3, #14
 8005894:	d5f6      	bpl.n	8005884 <HAL_RCC_OscConfig+0x64>
 8005896:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005898:	0799      	lsls	r1, r3, #30
 800589a:	f100 808e 	bmi.w	80059ba <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800589e:	06d9      	lsls	r1, r3, #27
 80058a0:	d534      	bpl.n	800590c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058a2:	4a8b      	ldr	r2, [pc, #556]	; (8005ad0 <HAL_RCC_OscConfig+0x2b0>)
 80058a4:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058a6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	f000 80e9 	beq.w	8005a84 <HAL_RCC_OscConfig+0x264>
 80058b2:	2b18      	cmp	r3, #24
 80058b4:	f000 80e1 	beq.w	8005a7a <HAL_RCC_OscConfig+0x25a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80058b8:	69e3      	ldr	r3, [r4, #28]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 8178 	beq.w	8005bb0 <HAL_RCC_OscConfig+0x390>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80058c0:	4b83      	ldr	r3, [pc, #524]	; (8005ad0 <HAL_RCC_OscConfig+0x2b0>)
 80058c2:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058c4:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 80058c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80058cc:	f7fd fa2e 	bl	8002d2c <HAL_GetTick>
 80058d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058d2:	e005      	b.n	80058e0 <HAL_RCC_OscConfig+0xc0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80058d4:	f7fd fa2a 	bl	8002d2c <HAL_GetTick>
 80058d8:	1b80      	subs	r0, r0, r6
 80058da:	2802      	cmp	r0, #2
 80058dc:	f200 8127 	bhi.w	8005b2e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	05db      	lsls	r3, r3, #23
 80058e4:	d5f6      	bpl.n	80058d4 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058e6:	f7fd fa39 	bl	8002d5c <HAL_GetREVID>
 80058ea:	f241 0303 	movw	r3, #4099	; 0x1003
 80058ee:	4298      	cmp	r0, r3
 80058f0:	f200 825d 	bhi.w	8005dae <HAL_RCC_OscConfig+0x58e>
 80058f4:	6a22      	ldr	r2, [r4, #32]
 80058f6:	686b      	ldr	r3, [r5, #4]
 80058f8:	2a20      	cmp	r2, #32
 80058fa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80058fe:	bf0c      	ite	eq
 8005900:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8005904:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8005908:	606b      	str	r3, [r5, #4]
 800590a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800590c:	071d      	lsls	r5, r3, #28
 800590e:	d517      	bpl.n	8005940 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005910:	6963      	ldr	r3, [r4, #20]
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 8126 	beq.w	8005b64 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005918:	4b6d      	ldr	r3, [pc, #436]	; (8005ad0 <HAL_RCC_OscConfig+0x2b0>)
 800591a:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800591c:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 800591e:	f042 0201 	orr.w	r2, r2, #1
 8005922:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005924:	f7fd fa02 	bl	8002d2c <HAL_GetTick>
 8005928:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800592a:	e005      	b.n	8005938 <HAL_RCC_OscConfig+0x118>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800592c:	f7fd f9fe 	bl	8002d2c <HAL_GetTick>
 8005930:	1b80      	subs	r0, r0, r6
 8005932:	2802      	cmp	r0, #2
 8005934:	f200 80fb 	bhi.w	8005b2e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005938:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800593a:	0798      	lsls	r0, r3, #30
 800593c:	d5f6      	bpl.n	800592c <HAL_RCC_OscConfig+0x10c>
 800593e:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005940:	069a      	lsls	r2, r3, #26
 8005942:	d517      	bpl.n	8005974 <HAL_RCC_OscConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005944:	69a3      	ldr	r3, [r4, #24]
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 811f 	beq.w	8005b8a <HAL_RCC_OscConfig+0x36a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800594c:	4b60      	ldr	r3, [pc, #384]	; (8005ad0 <HAL_RCC_OscConfig+0x2b0>)
 800594e:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005950:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 8005952:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005956:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005958:	f7fd f9e8 	bl	8002d2c <HAL_GetTick>
 800595c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800595e:	e005      	b.n	800596c <HAL_RCC_OscConfig+0x14c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005960:	f7fd f9e4 	bl	8002d2c <HAL_GetTick>
 8005964:	1b80      	subs	r0, r0, r6
 8005966:	2802      	cmp	r0, #2
 8005968:	f200 80e1 	bhi.w	8005b2e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800596c:	682b      	ldr	r3, [r5, #0]
 800596e:	049f      	lsls	r7, r3, #18
 8005970:	d5f6      	bpl.n	8005960 <HAL_RCC_OscConfig+0x140>
 8005972:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005974:	0759      	lsls	r1, r3, #29
 8005976:	f100 80a0 	bmi.w	8005aba <HAL_RCC_OscConfig+0x29a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800597a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800597c:	b1d8      	cbz	r0, 80059b6 <HAL_RCC_OscConfig+0x196>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800597e:	4b54      	ldr	r3, [pc, #336]	; (8005ad0 <HAL_RCC_OscConfig+0x2b0>)
 8005980:	691a      	ldr	r2, [r3, #16]
 8005982:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8005986:	2a18      	cmp	r2, #24
 8005988:	f000 81c9 	beq.w	8005d1e <HAL_RCC_OscConfig+0x4fe>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800598c:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800598e:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005990:	f000 815b 	beq.w	8005c4a <HAL_RCC_OscConfig+0x42a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005994:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005998:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 800599a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800599c:	f7fd f9c6 	bl	8002d2c <HAL_GetTick>
 80059a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059a2:	e005      	b.n	80059b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059a4:	f7fd f9c2 	bl	8002d2c <HAL_GetTick>
 80059a8:	1b40      	subs	r0, r0, r5
 80059aa:	2802      	cmp	r0, #2
 80059ac:	f200 80bf 	bhi.w	8005b2e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	019b      	lsls	r3, r3, #6
 80059b4:	d4f6      	bmi.n	80059a4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80059b6:	2000      	movs	r0, #0
}
 80059b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ba:	4a45      	ldr	r2, [pc, #276]	; (8005ad0 <HAL_RCC_OscConfig+0x2b0>)
 80059bc:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80059be:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80059c0:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80059c4:	d02f      	beq.n	8005a26 <HAL_RCC_OscConfig+0x206>
 80059c6:	2b18      	cmp	r3, #24
 80059c8:	d02b      	beq.n	8005a22 <HAL_RCC_OscConfig+0x202>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059ca:	68e2      	ldr	r2, [r4, #12]
 80059cc:	2a00      	cmp	r2, #0
 80059ce:	f000 8103 	beq.w	8005bd8 <HAL_RCC_OscConfig+0x3b8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80059d2:	493f      	ldr	r1, [pc, #252]	; (8005ad0 <HAL_RCC_OscConfig+0x2b0>)
 80059d4:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059d6:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80059d8:	f023 0319 	bic.w	r3, r3, #25
 80059dc:	4313      	orrs	r3, r2
 80059de:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80059e0:	f7fd f9a4 	bl	8002d2c <HAL_GetTick>
 80059e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059e6:	e005      	b.n	80059f4 <HAL_RCC_OscConfig+0x1d4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059e8:	f7fd f9a0 	bl	8002d2c <HAL_GetTick>
 80059ec:	1b80      	subs	r0, r0, r6
 80059ee:	2802      	cmp	r0, #2
 80059f0:	f200 809d 	bhi.w	8005b2e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	075f      	lsls	r7, r3, #29
 80059f8:	d5f6      	bpl.n	80059e8 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059fa:	f7fd f9af 	bl	8002d5c <HAL_GetREVID>
 80059fe:	f241 0303 	movw	r3, #4099	; 0x1003
 8005a02:	4298      	cmp	r0, r3
 8005a04:	f200 81e2 	bhi.w	8005dcc <HAL_RCC_OscConfig+0x5ac>
 8005a08:	6922      	ldr	r2, [r4, #16]
 8005a0a:	686b      	ldr	r3, [r5, #4]
 8005a0c:	2a40      	cmp	r2, #64	; 0x40
 8005a0e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005a12:	bf0c      	ite	eq
 8005a14:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8005a18:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8005a1c:	606b      	str	r3, [r5, #4]
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	e73d      	b.n	800589e <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a22:	0792      	lsls	r2, r2, #30
 8005a24:	d1d1      	bne.n	80059ca <HAL_RCC_OscConfig+0x1aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a26:	4b2a      	ldr	r3, [pc, #168]	; (8005ad0 <HAL_RCC_OscConfig+0x2b0>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	075b      	lsls	r3, r3, #29
 8005a2c:	d501      	bpl.n	8005a32 <HAL_RCC_OscConfig+0x212>
 8005a2e:	68e3      	ldr	r3, [r4, #12]
 8005a30:	b30b      	cbz	r3, 8005a76 <HAL_RCC_OscConfig+0x256>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a32:	f7fd f993 	bl	8002d5c <HAL_GetREVID>
 8005a36:	f241 0303 	movw	r3, #4099	; 0x1003
 8005a3a:	4298      	cmp	r0, r3
 8005a3c:	f200 80e0 	bhi.w	8005c00 <HAL_RCC_OscConfig+0x3e0>
 8005a40:	6922      	ldr	r2, [r4, #16]
 8005a42:	2a40      	cmp	r2, #64	; 0x40
 8005a44:	f000 80f8 	beq.w	8005c38 <HAL_RCC_OscConfig+0x418>
 8005a48:	4921      	ldr	r1, [pc, #132]	; (8005ad0 <HAL_RCC_OscConfig+0x2b0>)
 8005a4a:	684b      	ldr	r3, [r1, #4]
 8005a4c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005a50:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8005a54:	604b      	str	r3, [r1, #4]
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	e721      	b.n	800589e <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a5a:	f001 0103 	and.w	r1, r1, #3
 8005a5e:	2902      	cmp	r1, #2
 8005a60:	f47f aef1 	bne.w	8005846 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a64:	4a1a      	ldr	r2, [pc, #104]	; (8005ad0 <HAL_RCC_OscConfig+0x2b0>)
 8005a66:	6812      	ldr	r2, [r2, #0]
 8005a68:	0392      	lsls	r2, r2, #14
 8005a6a:	f57f af15 	bpl.w	8005898 <HAL_RCC_OscConfig+0x78>
 8005a6e:	6862      	ldr	r2, [r4, #4]
 8005a70:	2a00      	cmp	r2, #0
 8005a72:	f47f af11 	bne.w	8005898 <HAL_RCC_OscConfig+0x78>
        return HAL_ERROR;
 8005a76:	2001      	movs	r0, #1
}
 8005a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a7a:	f002 0203 	and.w	r2, r2, #3
 8005a7e:	2a01      	cmp	r2, #1
 8005a80:	f47f af1a 	bne.w	80058b8 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a84:	4b12      	ldr	r3, [pc, #72]	; (8005ad0 <HAL_RCC_OscConfig+0x2b0>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	05da      	lsls	r2, r3, #23
 8005a8a:	d502      	bpl.n	8005a92 <HAL_RCC_OscConfig+0x272>
 8005a8c:	69e3      	ldr	r3, [r4, #28]
 8005a8e:	2b80      	cmp	r3, #128	; 0x80
 8005a90:	d1f1      	bne.n	8005a76 <HAL_RCC_OscConfig+0x256>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a92:	f7fd f963 	bl	8002d5c <HAL_GetREVID>
 8005a96:	f241 0303 	movw	r3, #4099	; 0x1003
 8005a9a:	4298      	cmp	r0, r3
 8005a9c:	f200 80ba 	bhi.w	8005c14 <HAL_RCC_OscConfig+0x3f4>
 8005aa0:	6a22      	ldr	r2, [r4, #32]
 8005aa2:	2a20      	cmp	r2, #32
 8005aa4:	f000 81a1 	beq.w	8005dea <HAL_RCC_OscConfig+0x5ca>
 8005aa8:	4909      	ldr	r1, [pc, #36]	; (8005ad0 <HAL_RCC_OscConfig+0x2b0>)
 8005aaa:	684b      	ldr	r3, [r1, #4]
 8005aac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005ab0:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8005ab4:	604b      	str	r3, [r1, #4]
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	e728      	b.n	800590c <HAL_RCC_OscConfig+0xec>
    PWR->CR1 |= PWR_CR1_DBP;
 8005aba:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <HAL_RCC_OscConfig+0x2b4>)
 8005abc:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005abe:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8005ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ac4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005ac6:	f7fd f931 	bl	8002d2c <HAL_GetTick>
 8005aca:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005acc:	e009      	b.n	8005ae2 <HAL_RCC_OscConfig+0x2c2>
 8005ace:	bf00      	nop
 8005ad0:	58024400 	.word	0x58024400
 8005ad4:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ad8:	f7fd f928 	bl	8002d2c <HAL_GetTick>
 8005adc:	1b80      	subs	r0, r0, r6
 8005ade:	2864      	cmp	r0, #100	; 0x64
 8005ae0:	d825      	bhi.n	8005b2e <HAL_RCC_OscConfig+0x30e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ae2:	682b      	ldr	r3, [r5, #0]
 8005ae4:	05da      	lsls	r2, r3, #23
 8005ae6:	d5f7      	bpl.n	8005ad8 <HAL_RCC_OscConfig+0x2b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ae8:	68a3      	ldr	r3, [r4, #8]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	f000 8177 	beq.w	8005dde <HAL_RCC_OscConfig+0x5be>
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 8142 	beq.w	8005d7a <HAL_RCC_OscConfig+0x55a>
 8005af6:	2b05      	cmp	r3, #5
 8005af8:	4bb1      	ldr	r3, [pc, #708]	; (8005dc0 <HAL_RCC_OscConfig+0x5a0>)
 8005afa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005afc:	f000 817e 	beq.w	8005dfc <HAL_RCC_OscConfig+0x5dc>
 8005b00:	f022 0201 	bic.w	r2, r2, #1
 8005b04:	671a      	str	r2, [r3, #112]	; 0x70
 8005b06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b08:	f022 0204 	bic.w	r2, r2, #4
 8005b0c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005b0e:	f7fd f90d 	bl	8002d2c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b12:	4dab      	ldr	r5, [pc, #684]	; (8005dc0 <HAL_RCC_OscConfig+0x5a0>)
      tickstart = HAL_GetTick();
 8005b14:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b16:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b1a:	e004      	b.n	8005b26 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b1c:	f7fd f906 	bl	8002d2c <HAL_GetTick>
 8005b20:	1bc0      	subs	r0, r0, r7
 8005b22:	42b0      	cmp	r0, r6
 8005b24:	d803      	bhi.n	8005b2e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b26:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005b28:	079b      	lsls	r3, r3, #30
 8005b2a:	d5f7      	bpl.n	8005b1c <HAL_RCC_OscConfig+0x2fc>
 8005b2c:	e725      	b.n	800597a <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 8005b2e:	2003      	movs	r0, #3
}
 8005b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b32:	4ba3      	ldr	r3, [pc, #652]	; (8005dc0 <HAL_RCC_OscConfig+0x5a0>)
 8005b34:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b36:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b44:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005b46:	f7fd f8f1 	bl	8002d2c <HAL_GetTick>
 8005b4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b4c:	e004      	b.n	8005b58 <HAL_RCC_OscConfig+0x338>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b4e:	f7fd f8ed 	bl	8002d2c <HAL_GetTick>
 8005b52:	1b80      	subs	r0, r0, r6
 8005b54:	2864      	cmp	r0, #100	; 0x64
 8005b56:	d8ea      	bhi.n	8005b2e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b58:	682b      	ldr	r3, [r5, #0]
 8005b5a:	0398      	lsls	r0, r3, #14
 8005b5c:	d4f7      	bmi.n	8005b4e <HAL_RCC_OscConfig+0x32e>
 8005b5e:	e69a      	b.n	8005896 <HAL_RCC_OscConfig+0x76>
    return HAL_ERROR;
 8005b60:	2001      	movs	r0, #1
}
 8005b62:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 8005b64:	4b96      	ldr	r3, [pc, #600]	; (8005dc0 <HAL_RCC_OscConfig+0x5a0>)
 8005b66:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b68:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8005b6a:	f022 0201 	bic.w	r2, r2, #1
 8005b6e:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005b70:	f7fd f8dc 	bl	8002d2c <HAL_GetTick>
 8005b74:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b76:	e004      	b.n	8005b82 <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b78:	f7fd f8d8 	bl	8002d2c <HAL_GetTick>
 8005b7c:	1b80      	subs	r0, r0, r6
 8005b7e:	2802      	cmp	r0, #2
 8005b80:	d8d5      	bhi.n	8005b2e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b82:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005b84:	0799      	lsls	r1, r3, #30
 8005b86:	d4f7      	bmi.n	8005b78 <HAL_RCC_OscConfig+0x358>
 8005b88:	e6d9      	b.n	800593e <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSI48_DISABLE();
 8005b8a:	4b8d      	ldr	r3, [pc, #564]	; (8005dc0 <HAL_RCC_OscConfig+0x5a0>)
 8005b8c:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b8e:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 8005b90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b94:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005b96:	f7fd f8c9 	bl	8002d2c <HAL_GetTick>
 8005b9a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b9c:	e004      	b.n	8005ba8 <HAL_RCC_OscConfig+0x388>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005b9e:	f7fd f8c5 	bl	8002d2c <HAL_GetTick>
 8005ba2:	1b80      	subs	r0, r0, r6
 8005ba4:	2802      	cmp	r0, #2
 8005ba6:	d8c2      	bhi.n	8005b2e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	0498      	lsls	r0, r3, #18
 8005bac:	d4f7      	bmi.n	8005b9e <HAL_RCC_OscConfig+0x37e>
 8005bae:	e6e0      	b.n	8005972 <HAL_RCC_OscConfig+0x152>
        __HAL_RCC_CSI_DISABLE();
 8005bb0:	4b83      	ldr	r3, [pc, #524]	; (8005dc0 <HAL_RCC_OscConfig+0x5a0>)
 8005bb2:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005bb4:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 8005bb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005bbc:	f7fd f8b6 	bl	8002d2c <HAL_GetTick>
 8005bc0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005bc2:	e004      	b.n	8005bce <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005bc4:	f7fd f8b2 	bl	8002d2c <HAL_GetTick>
 8005bc8:	1b80      	subs	r0, r0, r6
 8005bca:	2802      	cmp	r0, #2
 8005bcc:	d8af      	bhi.n	8005b2e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005bce:	682b      	ldr	r3, [r5, #0]
 8005bd0:	05df      	lsls	r7, r3, #23
 8005bd2:	d4f7      	bmi.n	8005bc4 <HAL_RCC_OscConfig+0x3a4>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	e699      	b.n	800590c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8005bd8:	4b79      	ldr	r3, [pc, #484]	; (8005dc0 <HAL_RCC_OscConfig+0x5a0>)
 8005bda:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bdc:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8005bde:	f022 0201 	bic.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005be4:	f7fd f8a2 	bl	8002d2c <HAL_GetTick>
 8005be8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bea:	e004      	b.n	8005bf6 <HAL_RCC_OscConfig+0x3d6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bec:	f7fd f89e 	bl	8002d2c <HAL_GetTick>
 8005bf0:	1b80      	subs	r0, r0, r6
 8005bf2:	2802      	cmp	r0, #2
 8005bf4:	d89b      	bhi.n	8005b2e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bf6:	682b      	ldr	r3, [r5, #0]
 8005bf8:	0758      	lsls	r0, r3, #29
 8005bfa:	d4f7      	bmi.n	8005bec <HAL_RCC_OscConfig+0x3cc>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	e64e      	b.n	800589e <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c00:	4a6f      	ldr	r2, [pc, #444]	; (8005dc0 <HAL_RCC_OscConfig+0x5a0>)
 8005c02:	6921      	ldr	r1, [r4, #16]
 8005c04:	6853      	ldr	r3, [r2, #4]
 8005c06:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c0a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005c0e:	6053      	str	r3, [r2, #4]
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	e644      	b.n	800589e <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c14:	4a6a      	ldr	r2, [pc, #424]	; (8005dc0 <HAL_RCC_OscConfig+0x5a0>)
 8005c16:	6a21      	ldr	r1, [r4, #32]
 8005c18:	68d3      	ldr	r3, [r2, #12]
 8005c1a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8005c1e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005c22:	60d3      	str	r3, [r2, #12]
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	e671      	b.n	800590c <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c28:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	e620      	b.n	800587a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c38:	4a61      	ldr	r2, [pc, #388]	; (8005dc0 <HAL_RCC_OscConfig+0x5a0>)
 8005c3a:	6853      	ldr	r3, [r2, #4]
 8005c3c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c44:	6053      	str	r3, [r2, #4]
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	e629      	b.n	800589e <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_PLL_DISABLE();
 8005c4a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c4e:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8005c50:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005c52:	f7fd f86b 	bl	8002d2c <HAL_GetTick>
 8005c56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c58:	e005      	b.n	8005c66 <HAL_RCC_OscConfig+0x446>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c5a:	f7fd f867 	bl	8002d2c <HAL_GetTick>
 8005c5e:	1b80      	subs	r0, r0, r6
 8005c60:	2802      	cmp	r0, #2
 8005c62:	f63f af64 	bhi.w	8005b2e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c66:	682b      	ldr	r3, [r5, #0]
 8005c68:	0199      	lsls	r1, r3, #6
 8005c6a:	d4f6      	bmi.n	8005c5a <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c6c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005c6e:	4b55      	ldr	r3, [pc, #340]	; (8005dc4 <HAL_RCC_OscConfig+0x5a4>)
 8005c70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005c72:	4013      	ands	r3, r2
 8005c74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005c76:	4954      	ldr	r1, [pc, #336]	; (8005dc8 <HAL_RCC_OscConfig+0x5a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c78:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c7a:	4e51      	ldr	r6, [pc, #324]	; (8005dc0 <HAL_RCC_OscConfig+0x5a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c7c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005c80:	62ab      	str	r3, [r5, #40]	; 0x28
 8005c82:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8005c84:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8005c88:	3f01      	subs	r7, #1
 8005c8a:	1e50      	subs	r0, r2, #1
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005c90:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8005c94:	025b      	lsls	r3, r3, #9
 8005c96:	0400      	lsls	r0, r0, #16
 8005c98:	3a01      	subs	r2, #1
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8005ca0:	0612      	lsls	r2, r2, #24
 8005ca2:	4303      	orrs	r3, r0
 8005ca4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005ca8:	433b      	orrs	r3, r7
 8005caa:	4313      	orrs	r3, r2
 8005cac:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8005cae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005cb0:	f023 0301 	bic.w	r3, r3, #1
 8005cb4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005cb6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005cb8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005cba:	4011      	ands	r1, r2
 8005cbc:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8005cc0:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005cc2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005cc4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005cc6:	f023 030c 	bic.w	r3, r3, #12
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005cce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005cd0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005cd2:	f023 0302 	bic.w	r3, r3, #2
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005cda:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ce2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ce8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005cea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cf0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8005cf2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005cf4:	f043 0301 	orr.w	r3, r3, #1
 8005cf8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8005cfa:	682b      	ldr	r3, [r5, #0]
 8005cfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d00:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005d02:	f7fd f813 	bl	8002d2c <HAL_GetTick>
 8005d06:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d08:	e005      	b.n	8005d16 <HAL_RCC_OscConfig+0x4f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d0a:	f7fd f80f 	bl	8002d2c <HAL_GetTick>
 8005d0e:	1b00      	subs	r0, r0, r4
 8005d10:	2802      	cmp	r0, #2
 8005d12:	f63f af0c 	bhi.w	8005b2e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d16:	6833      	ldr	r3, [r6, #0]
 8005d18:	019a      	lsls	r2, r3, #6
 8005d1a:	d5f6      	bpl.n	8005d0a <HAL_RCC_OscConfig+0x4ea>
 8005d1c:	e64b      	b.n	80059b6 <HAL_RCC_OscConfig+0x196>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d1e:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d22:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d24:	f43f ae48 	beq.w	80059b8 <HAL_RCC_OscConfig+0x198>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d28:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d2c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005d2e:	428b      	cmp	r3, r1
 8005d30:	f47f aea1 	bne.w	8005a76 <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d34:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	f47f ae9b 	bne.w	8005a76 <HAL_RCC_OscConfig+0x256>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d40:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005d42:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8005d46:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	f47f ae94 	bne.w	8005a76 <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d50:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8005d54:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d56:	429a      	cmp	r2, r3
 8005d58:	f47f ae8d 	bne.w	8005a76 <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d5e:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8005d62:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d64:	429a      	cmp	r2, r3
 8005d66:	f47f ae86 	bne.w	8005a76 <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005d6a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005d6c:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8005d70:	3801      	subs	r0, #1
    return HAL_ERROR;
 8005d72:	1a28      	subs	r0, r5, r0
 8005d74:	bf18      	it	ne
 8005d76:	2001      	movne	r0, #1
 8005d78:	e61e      	b.n	80059b8 <HAL_RCC_OscConfig+0x198>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d7a:	4b11      	ldr	r3, [pc, #68]	; (8005dc0 <HAL_RCC_OscConfig+0x5a0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d7c:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d82:	461d      	mov	r5, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d84:	f022 0201 	bic.w	r2, r2, #1
 8005d88:	671a      	str	r2, [r3, #112]	; 0x70
 8005d8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d8c:	f022 0204 	bic.w	r2, r2, #4
 8005d90:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005d92:	f7fc ffcb 	bl	8002d2c <HAL_GetTick>
 8005d96:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d98:	e005      	b.n	8005da6 <HAL_RCC_OscConfig+0x586>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d9a:	f7fc ffc7 	bl	8002d2c <HAL_GetTick>
 8005d9e:	1b80      	subs	r0, r0, r6
 8005da0:	42b8      	cmp	r0, r7
 8005da2:	f63f aec4 	bhi.w	8005b2e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005da6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005da8:	0798      	lsls	r0, r3, #30
 8005daa:	d4f6      	bmi.n	8005d9a <HAL_RCC_OscConfig+0x57a>
 8005dac:	e5e5      	b.n	800597a <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005dae:	68eb      	ldr	r3, [r5, #12]
 8005db0:	6a22      	ldr	r2, [r4, #32]
 8005db2:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8005db6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005dba:	60eb      	str	r3, [r5, #12]
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	e5a5      	b.n	800590c <HAL_RCC_OscConfig+0xec>
 8005dc0:	58024400 	.word	0x58024400
 8005dc4:	fffffc0c 	.word	0xfffffc0c
 8005dc8:	ffff0007 	.word	0xffff0007
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dcc:	686b      	ldr	r3, [r5, #4]
 8005dce:	6922      	ldr	r2, [r4, #16]
 8005dd0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005dd4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005dd8:	606b      	str	r3, [r5, #4]
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	e55f      	b.n	800589e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dde:	4a0b      	ldr	r2, [pc, #44]	; (8005e0c <HAL_RCC_OscConfig+0x5ec>)
 8005de0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005de2:	f043 0301 	orr.w	r3, r3, #1
 8005de6:	6713      	str	r3, [r2, #112]	; 0x70
 8005de8:	e691      	b.n	8005b0e <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005dea:	4a08      	ldr	r2, [pc, #32]	; (8005e0c <HAL_RCC_OscConfig+0x5ec>)
 8005dec:	6853      	ldr	r3, [r2, #4]
 8005dee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005df2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005df6:	6053      	str	r3, [r2, #4]
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	e587      	b.n	800590c <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dfc:	f042 0204 	orr.w	r2, r2, #4
 8005e00:	671a      	str	r2, [r3, #112]	; 0x70
 8005e02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e04:	f042 0201 	orr.w	r2, r2, #1
 8005e08:	671a      	str	r2, [r3, #112]	; 0x70
 8005e0a:	e680      	b.n	8005b0e <HAL_RCC_OscConfig+0x2ee>
 8005e0c:	58024400 	.word	0x58024400

08005e10 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e12:	460e      	mov	r6, r1
 8005e14:	b089      	sub	sp, #36	; 0x24
 8005e16:	4615      	mov	r5, r2
  if(RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005e18:	4c22      	ldr	r4, [pc, #136]	; (8005ea4 <HAL_RCC_MCOConfig+0x94>)
  if(RCC_MCOx == RCC_MCO1)
 8005e1a:	b310      	cbz	r0, 8005e62 <HAL_RCC_MCOConfig+0x52>
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 8005e1c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0

    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e20:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005e22:	f44f 7000 	mov.w	r0, #512	; 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e26:	2103      	movs	r1, #3
    MCO2_CLK_ENABLE();
 8005e28:	f043 0304 	orr.w	r3, r3, #4
 8005e2c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005e30:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e34:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e36:	2200      	movs	r2, #0
    MCO2_CLK_ENABLE();
 8005e38:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005e3c:	9003      	str	r0, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e3e:	9106      	str	r1, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005e40:	a903      	add	r1, sp, #12
    MCO2_CLK_ENABLE();
 8005e42:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005e44:	4818      	ldr	r0, [pc, #96]	; (8005ea8 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 8005e46:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e48:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005e4a:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005e4c:	f7ff f8fe 	bl	800504c <HAL_GPIO_Init>

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005e50:	6921      	ldr	r1, [r4, #16]
 8005e52:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8005e56:	4331      	orrs	r1, r6
 8005e58:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 8005e5c:	6121      	str	r1, [r4, #16]
  }
}
 8005e5e:	b009      	add	sp, #36	; 0x24
 8005e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MCO1_CLK_ENABLE();
 8005e62:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005e66:	f44f 7280 	mov.w	r2, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e6a:	2702      	movs	r7, #2
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005e6c:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8005e6e:	f043 0301 	orr.w	r3, r3, #1
 8005e72:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005e76:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005e7a:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e7c:	2203      	movs	r2, #3
    MCO1_CLK_ENABLE();
 8005e7e:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e82:	9005      	str	r0, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005e84:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 8005e86:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005e88:	4808      	ldr	r0, [pc, #32]	; (8005eac <HAL_RCC_MCOConfig+0x9c>)
    MCO1_CLK_ENABLE();
 8005e8a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e8c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e8e:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005e90:	f7ff f8dc 	bl	800504c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005e94:	6921      	ldr	r1, [r4, #16]
 8005e96:	f021 71fe 	bic.w	r1, r1, #33292288	; 0x1fc0000
 8005e9a:	4331      	orrs	r1, r6
 8005e9c:	4329      	orrs	r1, r5
 8005e9e:	6121      	str	r1, [r4, #16]
}
 8005ea0:	b009      	add	sp, #36	; 0x24
 8005ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ea4:	58024400 	.word	0x58024400
 8005ea8:	58020800 	.word	0x58020800
 8005eac:	58020000 	.word	0x58020000

08005eb0 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eb0:	4a3e      	ldr	r2, [pc, #248]	; (8005fac <HAL_RCC_GetSysClockFreq+0xfc>)
 8005eb2:	6913      	ldr	r3, [r2, #16]
 8005eb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eb8:	2b10      	cmp	r3, #16
 8005eba:	d04f      	beq.n	8005f5c <HAL_RCC_GetSysClockFreq+0xac>
 8005ebc:	2b18      	cmp	r3, #24
 8005ebe:	d00b      	beq.n	8005ed8 <HAL_RCC_GetSysClockFreq+0x28>
 8005ec0:	b10b      	cbz	r3, 8005ec6 <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005ec2:	483b      	ldr	r0, [pc, #236]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005ec4:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ec6:	6813      	ldr	r3, [r2, #0]
 8005ec8:	0699      	lsls	r1, r3, #26
 8005eca:	d549      	bpl.n	8005f60 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ecc:	6813      	ldr	r3, [r2, #0]
 8005ece:	4839      	ldr	r0, [pc, #228]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005ed0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005ed4:	40d8      	lsrs	r0, r3
 8005ed6:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ed8:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005eda:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005edc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005ede:	f3c0 1005 	ubfx	r0, r0, #4, #6
{
 8005ee2:	b410      	push	{r4}
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005ee4:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 8005ee6:	b3b0      	cbz	r0, 8005f56 <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005ee8:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005eec:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ef0:	f001 0103 	and.w	r1, r1, #3
 8005ef4:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005ef8:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 8005efc:	2901      	cmp	r1, #1
 8005efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005f02:	ee07 3a10 	vmov	s14, r3
 8005f06:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 8005f0a:	d002      	beq.n	8005f12 <HAL_RCC_GetSysClockFreq+0x62>
 8005f0c:	d32d      	bcc.n	8005f6a <HAL_RCC_GetSysClockFreq+0xba>
 8005f0e:	2902      	cmp	r1, #2
 8005f10:	d028      	beq.n	8005f64 <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f12:	eddf 5a29 	vldr	s11, [pc, #164]	; 8005fb8 <HAL_RCC_GetSysClockFreq+0x108>
 8005f16:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8005f1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f2c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005f30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f34:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005f38:	4b1c      	ldr	r3, [pc, #112]	; (8005fac <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005f40:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005f4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f52:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8005f56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f5a:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8005f5c:	4817      	ldr	r0, [pc, #92]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f5e:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f60:	4814      	ldr	r0, [pc, #80]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x104>)
}
 8005f62:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f64:	eddf 5a16 	vldr	s11, [pc, #88]	; 8005fc0 <HAL_RCC_GetSysClockFreq+0x110>
 8005f68:	e7d5      	b.n	8005f16 <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f6a:	6813      	ldr	r3, [r2, #0]
 8005f6c:	069b      	lsls	r3, r3, #26
 8005f6e:	d51a      	bpl.n	8005fa6 <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f70:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f72:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f76:	490f      	ldr	r1, [pc, #60]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005f78:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f7e:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f84:	ee06 1a90 	vmov	s13, r1
 8005f88:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 8005f8c:	ee06 3a90 	vmov	s13, r3
 8005f90:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8005f94:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8005f98:	ee76 7a05 	vadd.f32	s15, s12, s10
 8005f9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fa0:	ee26 7a87 	vmul.f32	s14, s13, s14
 8005fa4:	e7c8      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fa6:	eddf 5a07 	vldr	s11, [pc, #28]	; 8005fc4 <HAL_RCC_GetSysClockFreq+0x114>
 8005faa:	e7b4      	b.n	8005f16 <HAL_RCC_GetSysClockFreq+0x66>
 8005fac:	58024400 	.word	0x58024400
 8005fb0:	003d0900 	.word	0x003d0900
 8005fb4:	03d09000 	.word	0x03d09000
 8005fb8:	4a742400 	.word	0x4a742400
 8005fbc:	007a1200 	.word	0x007a1200
 8005fc0:	4af42400 	.word	0x4af42400
 8005fc4:	4c742400 	.word	0x4c742400

08005fc8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005fc8:	b178      	cbz	r0, 8005fea <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fca:	4a8e      	ldr	r2, [pc, #568]	; (8006204 <HAL_RCC_ClockConfig+0x23c>)
 8005fcc:	6813      	ldr	r3, [r2, #0]
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	428b      	cmp	r3, r1
 8005fd4:	d20b      	bcs.n	8005fee <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd6:	6813      	ldr	r3, [r2, #0]
 8005fd8:	f023 030f 	bic.w	r3, r3, #15
 8005fdc:	430b      	orrs	r3, r1
 8005fde:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe0:	6813      	ldr	r3, [r2, #0]
 8005fe2:	f003 030f 	and.w	r3, r3, #15
 8005fe6:	428b      	cmp	r3, r1
 8005fe8:	d001      	beq.n	8005fee <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8005fea:	2001      	movs	r0, #1
}
 8005fec:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005fee:	6803      	ldr	r3, [r0, #0]
{
 8005ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ff4:	075d      	lsls	r5, r3, #29
 8005ff6:	d50b      	bpl.n	8006010 <HAL_RCC_ClockConfig+0x48>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ff8:	4c83      	ldr	r4, [pc, #524]	; (8006208 <HAL_RCC_ClockConfig+0x240>)
 8005ffa:	6905      	ldr	r5, [r0, #16]
 8005ffc:	69a2      	ldr	r2, [r4, #24]
 8005ffe:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006002:	4295      	cmp	r5, r2
 8006004:	d904      	bls.n	8006010 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006006:	69a2      	ldr	r2, [r4, #24]
 8006008:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800600c:	432a      	orrs	r2, r5
 800600e:	61a2      	str	r2, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006010:	071c      	lsls	r4, r3, #28
 8006012:	d50b      	bpl.n	800602c <HAL_RCC_ClockConfig+0x64>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006014:	4c7c      	ldr	r4, [pc, #496]	; (8006208 <HAL_RCC_ClockConfig+0x240>)
 8006016:	6945      	ldr	r5, [r0, #20]
 8006018:	69e2      	ldr	r2, [r4, #28]
 800601a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800601e:	4295      	cmp	r5, r2
 8006020:	d904      	bls.n	800602c <HAL_RCC_ClockConfig+0x64>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006022:	69e2      	ldr	r2, [r4, #28]
 8006024:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006028:	432a      	orrs	r2, r5
 800602a:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800602c:	06da      	lsls	r2, r3, #27
 800602e:	d50b      	bpl.n	8006048 <HAL_RCC_ClockConfig+0x80>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006030:	4c75      	ldr	r4, [pc, #468]	; (8006208 <HAL_RCC_ClockConfig+0x240>)
 8006032:	6985      	ldr	r5, [r0, #24]
 8006034:	69e2      	ldr	r2, [r4, #28]
 8006036:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800603a:	4295      	cmp	r5, r2
 800603c:	d904      	bls.n	8006048 <HAL_RCC_ClockConfig+0x80>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800603e:	69e2      	ldr	r2, [r4, #28]
 8006040:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006044:	432a      	orrs	r2, r5
 8006046:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006048:	069f      	lsls	r7, r3, #26
 800604a:	d50b      	bpl.n	8006064 <HAL_RCC_ClockConfig+0x9c>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800604c:	4c6e      	ldr	r4, [pc, #440]	; (8006208 <HAL_RCC_ClockConfig+0x240>)
 800604e:	69c5      	ldr	r5, [r0, #28]
 8006050:	6a22      	ldr	r2, [r4, #32]
 8006052:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006056:	4295      	cmp	r5, r2
 8006058:	d904      	bls.n	8006064 <HAL_RCC_ClockConfig+0x9c>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800605a:	6a22      	ldr	r2, [r4, #32]
 800605c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006060:	432a      	orrs	r2, r5
 8006062:	6222      	str	r2, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006064:	079e      	lsls	r6, r3, #30
 8006066:	4604      	mov	r4, r0
 8006068:	460d      	mov	r5, r1
 800606a:	f003 0201 	and.w	r2, r3, #1
 800606e:	d55d      	bpl.n	800612c <HAL_RCC_ClockConfig+0x164>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006070:	4e65      	ldr	r6, [pc, #404]	; (8006208 <HAL_RCC_ClockConfig+0x240>)
 8006072:	68c0      	ldr	r0, [r0, #12]
 8006074:	69b1      	ldr	r1, [r6, #24]
 8006076:	f001 010f 	and.w	r1, r1, #15
 800607a:	4288      	cmp	r0, r1
 800607c:	d904      	bls.n	8006088 <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800607e:	69b1      	ldr	r1, [r6, #24]
 8006080:	f021 010f 	bic.w	r1, r1, #15
 8006084:	4301      	orrs	r1, r0
 8006086:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006088:	2a00      	cmp	r2, #0
 800608a:	d031      	beq.n	80060f0 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800608c:	4a5e      	ldr	r2, [pc, #376]	; (8006208 <HAL_RCC_ClockConfig+0x240>)
 800608e:	68a1      	ldr	r1, [r4, #8]
 8006090:	6993      	ldr	r3, [r2, #24]
 8006092:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006096:	430b      	orrs	r3, r1
 8006098:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800609a:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800609c:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800609e:	2b02      	cmp	r3, #2
 80060a0:	f000 80a2 	beq.w	80061e8 <HAL_RCC_ClockConfig+0x220>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	f000 80a5 	beq.w	80061f4 <HAL_RCC_ClockConfig+0x22c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	f000 80a6 	beq.w	80061fc <HAL_RCC_ClockConfig+0x234>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060b0:	0757      	lsls	r7, r2, #29
 80060b2:	d538      	bpl.n	8006126 <HAL_RCC_ClockConfig+0x15e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060b4:	4954      	ldr	r1, [pc, #336]	; (8006208 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b6:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060ba:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060bc:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060be:	f022 0207 	bic.w	r2, r2, #7
 80060c2:	4313      	orrs	r3, r2
 80060c4:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80060c6:	f7fc fe31 	bl	8002d2c <HAL_GetTick>
 80060ca:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060cc:	e005      	b.n	80060da <HAL_RCC_ClockConfig+0x112>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060ce:	f7fc fe2d 	bl	8002d2c <HAL_GetTick>
 80060d2:	1bc0      	subs	r0, r0, r7
 80060d4:	4540      	cmp	r0, r8
 80060d6:	f200 808b 	bhi.w	80061f0 <HAL_RCC_ClockConfig+0x228>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060da:	6933      	ldr	r3, [r6, #16]
 80060dc:	6862      	ldr	r2, [r4, #4]
 80060de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060e2:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80060e6:	d1f2      	bne.n	80060ce <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	079e      	lsls	r6, r3, #30
 80060ec:	d50b      	bpl.n	8006106 <HAL_RCC_ClockConfig+0x13e>
 80060ee:	68e0      	ldr	r0, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060f0:	4945      	ldr	r1, [pc, #276]	; (8006208 <HAL_RCC_ClockConfig+0x240>)
 80060f2:	698a      	ldr	r2, [r1, #24]
 80060f4:	f002 020f 	and.w	r2, r2, #15
 80060f8:	4282      	cmp	r2, r0
 80060fa:	d904      	bls.n	8006106 <HAL_RCC_ClockConfig+0x13e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060fc:	698a      	ldr	r2, [r1, #24]
 80060fe:	f022 020f 	bic.w	r2, r2, #15
 8006102:	4310      	orrs	r0, r2
 8006104:	6188      	str	r0, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006106:	493f      	ldr	r1, [pc, #252]	; (8006204 <HAL_RCC_ClockConfig+0x23c>)
 8006108:	680a      	ldr	r2, [r1, #0]
 800610a:	f002 020f 	and.w	r2, r2, #15
 800610e:	42aa      	cmp	r2, r5
 8006110:	d914      	bls.n	800613c <HAL_RCC_ClockConfig+0x174>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006112:	680a      	ldr	r2, [r1, #0]
 8006114:	f022 020f 	bic.w	r2, r2, #15
 8006118:	432a      	orrs	r2, r5
 800611a:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800611c:	680a      	ldr	r2, [r1, #0]
 800611e:	f002 020f 	and.w	r2, r2, #15
 8006122:	42aa      	cmp	r2, r5
 8006124:	d00a      	beq.n	800613c <HAL_RCC_ClockConfig+0x174>
    return HAL_ERROR;
 8006126:	2001      	movs	r0, #1
}
 8006128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800612c:	2a00      	cmp	r2, #0
 800612e:	d1ad      	bne.n	800608c <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006130:	4934      	ldr	r1, [pc, #208]	; (8006204 <HAL_RCC_ClockConfig+0x23c>)
 8006132:	680a      	ldr	r2, [r1, #0]
 8006134:	f002 020f 	and.w	r2, r2, #15
 8006138:	42aa      	cmp	r2, r5
 800613a:	d8ea      	bhi.n	8006112 <HAL_RCC_ClockConfig+0x14a>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800613c:	0758      	lsls	r0, r3, #29
 800613e:	d50b      	bpl.n	8006158 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006140:	4931      	ldr	r1, [pc, #196]	; (8006208 <HAL_RCC_ClockConfig+0x240>)
 8006142:	6920      	ldr	r0, [r4, #16]
 8006144:	698a      	ldr	r2, [r1, #24]
 8006146:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800614a:	4290      	cmp	r0, r2
 800614c:	d204      	bcs.n	8006158 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800614e:	698a      	ldr	r2, [r1, #24]
 8006150:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006154:	4302      	orrs	r2, r0
 8006156:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006158:	0719      	lsls	r1, r3, #28
 800615a:	d50b      	bpl.n	8006174 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800615c:	492a      	ldr	r1, [pc, #168]	; (8006208 <HAL_RCC_ClockConfig+0x240>)
 800615e:	6960      	ldr	r0, [r4, #20]
 8006160:	69ca      	ldr	r2, [r1, #28]
 8006162:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006166:	4290      	cmp	r0, r2
 8006168:	d204      	bcs.n	8006174 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800616a:	69ca      	ldr	r2, [r1, #28]
 800616c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006170:	4302      	orrs	r2, r0
 8006172:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006174:	06da      	lsls	r2, r3, #27
 8006176:	d50b      	bpl.n	8006190 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006178:	4923      	ldr	r1, [pc, #140]	; (8006208 <HAL_RCC_ClockConfig+0x240>)
 800617a:	69a0      	ldr	r0, [r4, #24]
 800617c:	69ca      	ldr	r2, [r1, #28]
 800617e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006182:	4290      	cmp	r0, r2
 8006184:	d204      	bcs.n	8006190 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006186:	69ca      	ldr	r2, [r1, #28]
 8006188:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800618c:	4302      	orrs	r2, r0
 800618e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006190:	069b      	lsls	r3, r3, #26
 8006192:	d50b      	bpl.n	80061ac <HAL_RCC_ClockConfig+0x1e4>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006194:	4a1c      	ldr	r2, [pc, #112]	; (8006208 <HAL_RCC_ClockConfig+0x240>)
 8006196:	69e1      	ldr	r1, [r4, #28]
 8006198:	6a13      	ldr	r3, [r2, #32]
 800619a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800619e:	4299      	cmp	r1, r3
 80061a0:	d204      	bcs.n	80061ac <HAL_RCC_ClockConfig+0x1e4>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80061a2:	6a13      	ldr	r3, [r2, #32]
 80061a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a8:	430b      	orrs	r3, r1
 80061aa:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061ac:	f7ff fe80 	bl	8005eb0 <HAL_RCC_GetSysClockFreq>
 80061b0:	4a15      	ldr	r2, [pc, #84]	; (8006208 <HAL_RCC_ClockConfig+0x240>)
 80061b2:	4916      	ldr	r1, [pc, #88]	; (800620c <HAL_RCC_ClockConfig+0x244>)
 80061b4:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061b6:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061b8:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 80061bc:	4d14      	ldr	r5, [pc, #80]	; (8006210 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061be:	f002 020f 	and.w	r2, r2, #15
 80061c2:	4c14      	ldr	r4, [pc, #80]	; (8006214 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061c4:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061c6:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061c8:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 80061cc:	4912      	ldr	r1, [pc, #72]	; (8006218 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061ce:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061d2:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 80061d6:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061d8:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 80061dc:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061de:	6022      	str	r2, [r4, #0]
}
 80061e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80061e4:	f7fc bd3e 	b.w	8002c64 <HAL_InitTick>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061e8:	0390      	lsls	r0, r2, #14
 80061ea:	f53f af63 	bmi.w	80060b4 <HAL_RCC_ClockConfig+0xec>
 80061ee:	e79a      	b.n	8006126 <HAL_RCC_ClockConfig+0x15e>
            return HAL_TIMEOUT;
 80061f0:	2003      	movs	r0, #3
 80061f2:	e799      	b.n	8006128 <HAL_RCC_ClockConfig+0x160>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061f4:	0191      	lsls	r1, r2, #6
 80061f6:	f53f af5d 	bmi.w	80060b4 <HAL_RCC_ClockConfig+0xec>
 80061fa:	e794      	b.n	8006126 <HAL_RCC_ClockConfig+0x15e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061fc:	05d2      	lsls	r2, r2, #23
 80061fe:	f53f af59 	bmi.w	80060b4 <HAL_RCC_ClockConfig+0xec>
 8006202:	e790      	b.n	8006126 <HAL_RCC_ClockConfig+0x15e>
 8006204:	52002000 	.word	0x52002000
 8006208:	58024400 	.word	0x58024400
 800620c:	0800f958 	.word	0x0800f958
 8006210:	240001f8 	.word	0x240001f8
 8006214:	240001f0 	.word	0x240001f0
 8006218:	240001ec 	.word	0x240001ec

0800621c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800621c:	4a49      	ldr	r2, [pc, #292]	; (8006344 <HAL_RCC_GetHCLKFreq+0x128>)
 800621e:	6913      	ldr	r3, [r2, #16]
 8006220:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006224:	2b10      	cmp	r3, #16
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006226:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006228:	d064      	beq.n	80062f4 <HAL_RCC_GetHCLKFreq+0xd8>
 800622a:	2b18      	cmp	r3, #24
 800622c:	d022      	beq.n	8006274 <HAL_RCC_GetHCLKFreq+0x58>
 800622e:	b1bb      	cbz	r3, 8006260 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 8006230:	4b45      	ldr	r3, [pc, #276]	; (8006348 <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006232:	4944      	ldr	r1, [pc, #272]	; (8006344 <HAL_RCC_GetHCLKFreq+0x128>)
 8006234:	4845      	ldr	r0, [pc, #276]	; (800634c <HAL_RCC_GetHCLKFreq+0x130>)
 8006236:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006238:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800623a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800623e:	4c44      	ldr	r4, [pc, #272]	; (8006350 <HAL_RCC_GetHCLKFreq+0x134>)
 8006240:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006244:	4d43      	ldr	r5, [pc, #268]	; (8006354 <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006246:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006248:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800624a:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800624e:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006252:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006254:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8006258:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800625a:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800625c:	bc30      	pop	{r4, r5}
 800625e:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006260:	6813      	ldr	r3, [r2, #0]
 8006262:	0699      	lsls	r1, r3, #26
 8006264:	d548      	bpl.n	80062f8 <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006266:	6813      	ldr	r3, [r2, #0]
 8006268:	4a3b      	ldr	r2, [pc, #236]	; (8006358 <HAL_RCC_GetHCLKFreq+0x13c>)
 800626a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800626e:	fa22 f303 	lsr.w	r3, r2, r3
 8006272:	e7de      	b.n	8006232 <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006274:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006276:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006278:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800627a:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800627e:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 8006280:	2b00      	cmp	r3, #0
 8006282:	d0d6      	beq.n	8006232 <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006284:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006288:	f001 0101 	and.w	r1, r1, #1
 800628c:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006290:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006294:	fb01 f304 	mul.w	r3, r1, r4
 8006298:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 800629c:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 80062a6:	d002      	beq.n	80062ae <HAL_RCC_GetHCLKFreq+0x92>
 80062a8:	d32b      	bcc.n	8006302 <HAL_RCC_GetHCLKFreq+0xe6>
 80062aa:	2802      	cmp	r0, #2
 80062ac:	d026      	beq.n	80062fc <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062ae:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800635c <HAL_RCC_GetHCLKFreq+0x140>
 80062b2:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80062b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80062b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062bc:	ee07 3a10 	vmov	s14, r3
 80062c0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80062c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80062c8:	ee37 7a25 	vadd.f32	s14, s14, s11
 80062cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062d0:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80062d4:	4b1b      	ldr	r3, [pc, #108]	; (8006344 <HAL_RCC_GetHCLKFreq+0x128>)
 80062d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80062dc:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80062de:	ee07 3a10 	vmov	s14, r3
 80062e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80062e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062ea:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80062ee:	ee17 3a90 	vmov	r3, s15
 80062f2:	e79e      	b.n	8006232 <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 80062f4:	4b1a      	ldr	r3, [pc, #104]	; (8006360 <HAL_RCC_GetHCLKFreq+0x144>)
 80062f6:	e79c      	b.n	8006232 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80062f8:	4b17      	ldr	r3, [pc, #92]	; (8006358 <HAL_RCC_GetHCLKFreq+0x13c>)
 80062fa:	e79a      	b.n	8006232 <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062fc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006364 <HAL_RCC_GetHCLKFreq+0x148>
 8006300:	e7d7      	b.n	80062b2 <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006302:	6813      	ldr	r3, [r2, #0]
 8006304:	069b      	lsls	r3, r3, #26
 8006306:	d51a      	bpl.n	800633e <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006308:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800630a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800630e:	4912      	ldr	r1, [pc, #72]	; (8006358 <HAL_RCC_GetHCLKFreq+0x13c>)
 8006310:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006314:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006316:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631c:	ee07 1a10 	vmov	s14, r1
 8006320:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8006324:	ee07 3a10 	vmov	s14, r3
 8006328:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800632c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8006330:	ee76 6a05 	vadd.f32	s13, s12, s10
 8006334:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633c:	e7ca      	b.n	80062d4 <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800633e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8006368 <HAL_RCC_GetHCLKFreq+0x14c>
 8006342:	e7b6      	b.n	80062b2 <HAL_RCC_GetHCLKFreq+0x96>
 8006344:	58024400 	.word	0x58024400
 8006348:	003d0900 	.word	0x003d0900
 800634c:	0800f958 	.word	0x0800f958
 8006350:	240001f0 	.word	0x240001f0
 8006354:	240001ec 	.word	0x240001ec
 8006358:	03d09000 	.word	0x03d09000
 800635c:	4a742400 	.word	0x4a742400
 8006360:	007a1200 	.word	0x007a1200
 8006364:	4af42400 	.word	0x4af42400
 8006368:	4c742400 	.word	0x4c742400

0800636c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800636c:	494d      	ldr	r1, [pc, #308]	; (80064a4 <HAL_RCC_GetPCLK1Freq+0x138>)
 800636e:	690b      	ldr	r3, [r1, #16]
 8006370:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006374:	2b10      	cmp	r3, #16
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006376:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006378:	d06b      	beq.n	8006452 <HAL_RCC_GetPCLK1Freq+0xe6>
 800637a:	2b18      	cmp	r3, #24
 800637c:	d029      	beq.n	80063d2 <HAL_RCC_GetPCLK1Freq+0x66>
 800637e:	b1fb      	cbz	r3, 80063c0 <HAL_RCC_GetPCLK1Freq+0x54>
    sysclockfreq = CSI_VALUE;
 8006380:	4a49      	ldr	r2, [pc, #292]	; (80064a8 <HAL_RCC_GetPCLK1Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006382:	4848      	ldr	r0, [pc, #288]	; (80064a4 <HAL_RCC_GetPCLK1Freq+0x138>)
 8006384:	4949      	ldr	r1, [pc, #292]	; (80064ac <HAL_RCC_GetPCLK1Freq+0x140>)
 8006386:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006388:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800638a:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 800638e:	4d48      	ldr	r5, [pc, #288]	; (80064b0 <HAL_RCC_GetPCLK1Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006390:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006394:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006396:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006398:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800639c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80063a0:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80063a2:	4c44      	ldr	r4, [pc, #272]	; (80064b4 <HAL_RCC_GetPCLK1Freq+0x148>)
 80063a4:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 80063a8:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80063aa:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80063ac:	69c2      	ldr	r2, [r0, #28]
 80063ae:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80063b2:	5c88      	ldrb	r0, [r1, r2]
 80063b4:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80063b8:	bc30      	pop	{r4, r5}
 80063ba:	fa23 f000 	lsr.w	r0, r3, r0
 80063be:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063c0:	680b      	ldr	r3, [r1, #0]
 80063c2:	069a      	lsls	r2, r3, #26
 80063c4:	d547      	bpl.n	8006456 <HAL_RCC_GetPCLK1Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80063c6:	680b      	ldr	r3, [r1, #0]
 80063c8:	4a3b      	ldr	r2, [pc, #236]	; (80064b8 <HAL_RCC_GetPCLK1Freq+0x14c>)
 80063ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80063ce:	40da      	lsrs	r2, r3
 80063d0:	e7d7      	b.n	8006382 <HAL_RCC_GetPCLK1Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063d2:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80063d4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80063d6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80063d8:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063dc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 80063de:	2a00      	cmp	r2, #0
 80063e0:	d0cf      	beq.n	8006382 <HAL_RCC_GetPCLK1Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063e2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063ee:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063f2:	fb03 f304 	mul.w	r3, r3, r4
 80063f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 80063fa:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063fc:	ee07 3a90 	vmov	s15, r3
 8006400:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8006404:	d002      	beq.n	800640c <HAL_RCC_GetPCLK1Freq+0xa0>
 8006406:	d32b      	bcc.n	8006460 <HAL_RCC_GetPCLK1Freq+0xf4>
 8006408:	2802      	cmp	r0, #2
 800640a:	d026      	beq.n	800645a <HAL_RCC_GetPCLK1Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800640c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80064bc <HAL_RCC_GetPCLK1Freq+0x150>
 8006410:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8006414:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8006416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641a:	ee07 3a10 	vmov	s14, r3
 800641e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006422:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006426:	ee37 7a25 	vadd.f32	s14, s14, s11
 800642a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800642e:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006432:	4b1c      	ldr	r3, [pc, #112]	; (80064a4 <HAL_RCC_GetPCLK1Freq+0x138>)
 8006434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006436:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800643a:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800643c:	ee07 3a10 	vmov	s14, r3
 8006440:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006444:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006448:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800644c:	ee17 2a90 	vmov	r2, s15
 8006450:	e797      	b.n	8006382 <HAL_RCC_GetPCLK1Freq+0x16>
    sysclockfreq = HSE_VALUE;
 8006452:	4a1b      	ldr	r2, [pc, #108]	; (80064c0 <HAL_RCC_GetPCLK1Freq+0x154>)
 8006454:	e795      	b.n	8006382 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006456:	4a18      	ldr	r2, [pc, #96]	; (80064b8 <HAL_RCC_GetPCLK1Freq+0x14c>)
 8006458:	e793      	b.n	8006382 <HAL_RCC_GetPCLK1Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800645a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80064c4 <HAL_RCC_GetPCLK1Freq+0x158>
 800645e:	e7d7      	b.n	8006410 <HAL_RCC_GetPCLK1Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006460:	680b      	ldr	r3, [r1, #0]
 8006462:	069b      	lsls	r3, r3, #26
 8006464:	d51a      	bpl.n	800649c <HAL_RCC_GetPCLK1Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006466:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006468:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800646c:	4a12      	ldr	r2, [pc, #72]	; (80064b8 <HAL_RCC_GetPCLK1Freq+0x14c>)
 800646e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006472:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006474:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647a:	ee07 2a10 	vmov	s14, r2
 800647e:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8006482:	ee07 3a10 	vmov	s14, r3
 8006486:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800648a:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800648e:	ee76 6a05 	vadd.f32	s13, s12, s10
 8006492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649a:	e7ca      	b.n	8006432 <HAL_RCC_GetPCLK1Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800649c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80064c8 <HAL_RCC_GetPCLK1Freq+0x15c>
 80064a0:	e7b6      	b.n	8006410 <HAL_RCC_GetPCLK1Freq+0xa4>
 80064a2:	bf00      	nop
 80064a4:	58024400 	.word	0x58024400
 80064a8:	003d0900 	.word	0x003d0900
 80064ac:	0800f958 	.word	0x0800f958
 80064b0:	240001ec 	.word	0x240001ec
 80064b4:	240001f0 	.word	0x240001f0
 80064b8:	03d09000 	.word	0x03d09000
 80064bc:	4a742400 	.word	0x4a742400
 80064c0:	007a1200 	.word	0x007a1200
 80064c4:	4af42400 	.word	0x4af42400
 80064c8:	4c742400 	.word	0x4c742400

080064cc <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064cc:	494d      	ldr	r1, [pc, #308]	; (8006604 <HAL_RCC_GetPCLK2Freq+0x138>)
 80064ce:	690b      	ldr	r3, [r1, #16]
 80064d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064d4:	2b10      	cmp	r3, #16
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064d6:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064d8:	d06b      	beq.n	80065b2 <HAL_RCC_GetPCLK2Freq+0xe6>
 80064da:	2b18      	cmp	r3, #24
 80064dc:	d029      	beq.n	8006532 <HAL_RCC_GetPCLK2Freq+0x66>
 80064de:	b1fb      	cbz	r3, 8006520 <HAL_RCC_GetPCLK2Freq+0x54>
    sysclockfreq = CSI_VALUE;
 80064e0:	4a49      	ldr	r2, [pc, #292]	; (8006608 <HAL_RCC_GetPCLK2Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064e2:	4848      	ldr	r0, [pc, #288]	; (8006604 <HAL_RCC_GetPCLK2Freq+0x138>)
 80064e4:	4949      	ldr	r1, [pc, #292]	; (800660c <HAL_RCC_GetPCLK2Freq+0x140>)
 80064e6:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064e8:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064ea:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 80064ee:	4d48      	ldr	r5, [pc, #288]	; (8006610 <HAL_RCC_GetPCLK2Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064f0:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064f4:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064f6:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064f8:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064fc:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006500:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006502:	4c44      	ldr	r4, [pc, #272]	; (8006614 <HAL_RCC_GetPCLK2Freq+0x148>)
 8006504:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8006508:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800650a:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800650c:	69c2      	ldr	r2, [r0, #28]
 800650e:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8006512:	5c88      	ldrb	r0, [r1, r2]
 8006514:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006518:	bc30      	pop	{r4, r5}
 800651a:	fa23 f000 	lsr.w	r0, r3, r0
 800651e:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006520:	680b      	ldr	r3, [r1, #0]
 8006522:	069a      	lsls	r2, r3, #26
 8006524:	d547      	bpl.n	80065b6 <HAL_RCC_GetPCLK2Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006526:	680b      	ldr	r3, [r1, #0]
 8006528:	4a3b      	ldr	r2, [pc, #236]	; (8006618 <HAL_RCC_GetPCLK2Freq+0x14c>)
 800652a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800652e:	40da      	lsrs	r2, r3
 8006530:	e7d7      	b.n	80064e2 <HAL_RCC_GetPCLK2Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006532:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006534:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006536:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006538:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800653c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 800653e:	2a00      	cmp	r2, #0
 8006540:	d0cf      	beq.n	80064e2 <HAL_RCC_GetPCLK2Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006542:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800654e:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006552:	fb03 f304 	mul.w	r3, r3, r4
 8006556:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 800655a:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800655c:	ee07 3a90 	vmov	s15, r3
 8006560:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8006564:	d002      	beq.n	800656c <HAL_RCC_GetPCLK2Freq+0xa0>
 8006566:	d32b      	bcc.n	80065c0 <HAL_RCC_GetPCLK2Freq+0xf4>
 8006568:	2802      	cmp	r0, #2
 800656a:	d026      	beq.n	80065ba <HAL_RCC_GetPCLK2Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800656c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800661c <HAL_RCC_GetPCLK2Freq+0x150>
 8006570:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8006574:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8006576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657a:	ee07 3a10 	vmov	s14, r3
 800657e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006582:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006586:	ee37 7a25 	vadd.f32	s14, s14, s11
 800658a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800658e:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006592:	4b1c      	ldr	r3, [pc, #112]	; (8006604 <HAL_RCC_GetPCLK2Freq+0x138>)
 8006594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006596:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800659a:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800659c:	ee07 3a10 	vmov	s14, r3
 80065a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80065a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80065a8:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80065ac:	ee17 2a90 	vmov	r2, s15
 80065b0:	e797      	b.n	80064e2 <HAL_RCC_GetPCLK2Freq+0x16>
    sysclockfreq = HSE_VALUE;
 80065b2:	4a1b      	ldr	r2, [pc, #108]	; (8006620 <HAL_RCC_GetPCLK2Freq+0x154>)
 80065b4:	e795      	b.n	80064e2 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80065b6:	4a18      	ldr	r2, [pc, #96]	; (8006618 <HAL_RCC_GetPCLK2Freq+0x14c>)
 80065b8:	e793      	b.n	80064e2 <HAL_RCC_GetPCLK2Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065ba:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006624 <HAL_RCC_GetPCLK2Freq+0x158>
 80065be:	e7d7      	b.n	8006570 <HAL_RCC_GetPCLK2Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065c0:	680b      	ldr	r3, [r1, #0]
 80065c2:	069b      	lsls	r3, r3, #26
 80065c4:	d51a      	bpl.n	80065fc <HAL_RCC_GetPCLK2Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065c6:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065c8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065cc:	4a12      	ldr	r2, [pc, #72]	; (8006618 <HAL_RCC_GetPCLK2Freq+0x14c>)
 80065ce:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065d2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065d4:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065da:	ee07 2a10 	vmov	s14, r2
 80065de:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80065e2:	ee07 3a10 	vmov	s14, r3
 80065e6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80065ea:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80065ee:	ee76 6a05 	vadd.f32	s13, s12, s10
 80065f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065fa:	e7ca      	b.n	8006592 <HAL_RCC_GetPCLK2Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065fc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8006628 <HAL_RCC_GetPCLK2Freq+0x15c>
 8006600:	e7b6      	b.n	8006570 <HAL_RCC_GetPCLK2Freq+0xa4>
 8006602:	bf00      	nop
 8006604:	58024400 	.word	0x58024400
 8006608:	003d0900 	.word	0x003d0900
 800660c:	0800f958 	.word	0x0800f958
 8006610:	240001ec 	.word	0x240001ec
 8006614:	240001f0 	.word	0x240001f0
 8006618:	03d09000 	.word	0x03d09000
 800661c:	4a742400 	.word	0x4a742400
 8006620:	007a1200 	.word	0x007a1200
 8006624:	4af42400 	.word	0x4af42400
 8006628:	4c742400 	.word	0x4c742400

0800662c <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800662c:	4a3b      	ldr	r2, [pc, #236]	; (800671c <RCCEx_PLL2_Config+0xf0>)
{
 800662e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006630:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	2b03      	cmp	r3, #3
 8006638:	d067      	beq.n	800670a <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800663a:	6813      	ldr	r3, [r2, #0]
 800663c:	460f      	mov	r7, r1
 800663e:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006640:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8006642:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006646:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006648:	f7fc fb70 	bl	8002d2c <HAL_GetTick>
 800664c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800664e:	e004      	b.n	800665a <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006650:	f7fc fb6c 	bl	8002d2c <HAL_GetTick>
 8006654:	1b80      	subs	r0, r0, r6
 8006656:	2802      	cmp	r0, #2
 8006658:	d859      	bhi.n	800670e <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	011a      	lsls	r2, r3, #4
 800665e:	d4f7      	bmi.n	8006650 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006660:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006662:	682a      	ldr	r2, [r5, #0]
 8006664:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006668:	492d      	ldr	r1, [pc, #180]	; (8006720 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800666a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800666e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006670:	686e      	ldr	r6, [r5, #4]
 8006672:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8006676:	3e01      	subs	r6, #1
 8006678:	1e50      	subs	r0, r2, #1
 800667a:	3b01      	subs	r3, #1
 800667c:	692a      	ldr	r2, [r5, #16]
 800667e:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8006682:	025b      	lsls	r3, r3, #9
 8006684:	0400      	lsls	r0, r0, #16
 8006686:	3a01      	subs	r2, #1
 8006688:	b29b      	uxth	r3, r3
 800668a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800668e:	0612      	lsls	r2, r2, #24
 8006690:	4303      	orrs	r3, r0
 8006692:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006696:	4333      	orrs	r3, r6
 8006698:	4313      	orrs	r3, r2
 800669a:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800669c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800669e:	696a      	ldr	r2, [r5, #20]
 80066a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80066a4:	4313      	orrs	r3, r2
 80066a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80066a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80066aa:	69aa      	ldr	r2, [r5, #24]
 80066ac:	f023 0320 	bic.w	r3, r3, #32
 80066b0:	4313      	orrs	r3, r2
 80066b2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80066b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80066b6:	f023 0310 	bic.w	r3, r3, #16
 80066ba:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80066bc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80066be:	69eb      	ldr	r3, [r5, #28]
 80066c0:	4011      	ands	r1, r2
 80066c2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80066c6:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80066c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80066ca:	f043 0310 	orr.w	r3, r3, #16
 80066ce:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80066d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80066d2:	b1f7      	cbz	r7, 8006712 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80066d4:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80066d6:	bf0c      	ite	eq
 80066d8:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80066dc:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80066e0:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80066e2:	4b0e      	ldr	r3, [pc, #56]	; (800671c <RCCEx_PLL2_Config+0xf0>)
 80066e4:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80066e6:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 80066e8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80066ec:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80066ee:	f7fc fb1d 	bl	8002d2c <HAL_GetTick>
 80066f2:	4605      	mov	r5, r0
 80066f4:	e004      	b.n	8006700 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80066f6:	f7fc fb19 	bl	8002d2c <HAL_GetTick>
 80066fa:	1b40      	subs	r0, r0, r5
 80066fc:	2802      	cmp	r0, #2
 80066fe:	d806      	bhi.n	800670e <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	d5f7      	bpl.n	80066f6 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8006706:	2000      	movs	r0, #0
}
 8006708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800670a:	2001      	movs	r0, #1
}
 800670c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800670e:	2003      	movs	r0, #3
}
 8006710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006712:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006716:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006718:	e7e3      	b.n	80066e2 <RCCEx_PLL2_Config+0xb6>
 800671a:	bf00      	nop
 800671c:	58024400 	.word	0x58024400
 8006720:	ffff0007 	.word	0xffff0007

08006724 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006724:	4a3b      	ldr	r2, [pc, #236]	; (8006814 <RCCEx_PLL3_Config+0xf0>)
{
 8006726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006728:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	2b03      	cmp	r3, #3
 8006730:	d067      	beq.n	8006802 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006732:	6813      	ldr	r3, [r2, #0]
 8006734:	460f      	mov	r7, r1
 8006736:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006738:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 800673a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800673e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006740:	f7fc faf4 	bl	8002d2c <HAL_GetTick>
 8006744:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006746:	e004      	b.n	8006752 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006748:	f7fc faf0 	bl	8002d2c <HAL_GetTick>
 800674c:	1b80      	subs	r0, r0, r6
 800674e:	2802      	cmp	r0, #2
 8006750:	d859      	bhi.n	8006806 <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	009a      	lsls	r2, r3, #2
 8006756:	d4f7      	bmi.n	8006748 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006758:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800675a:	682a      	ldr	r2, [r5, #0]
 800675c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006760:	492d      	ldr	r1, [pc, #180]	; (8006818 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006762:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8006766:	62a3      	str	r3, [r4, #40]	; 0x28
 8006768:	686e      	ldr	r6, [r5, #4]
 800676a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800676e:	3e01      	subs	r6, #1
 8006770:	1e50      	subs	r0, r2, #1
 8006772:	3b01      	subs	r3, #1
 8006774:	692a      	ldr	r2, [r5, #16]
 8006776:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800677a:	025b      	lsls	r3, r3, #9
 800677c:	0400      	lsls	r0, r0, #16
 800677e:	3a01      	subs	r2, #1
 8006780:	b29b      	uxth	r3, r3
 8006782:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8006786:	0612      	lsls	r2, r2, #24
 8006788:	4303      	orrs	r3, r0
 800678a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800678e:	4333      	orrs	r3, r6
 8006790:	4313      	orrs	r3, r2
 8006792:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006794:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006796:	696a      	ldr	r2, [r5, #20]
 8006798:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800679c:	4313      	orrs	r3, r2
 800679e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80067a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067a2:	69aa      	ldr	r2, [r5, #24]
 80067a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067a8:	4313      	orrs	r3, r2
 80067aa:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80067ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067b2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80067b4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80067b6:	69eb      	ldr	r3, [r5, #28]
 80067b8:	4011      	ands	r1, r2
 80067ba:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80067be:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80067c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067c6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80067c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80067ca:	b1f7      	cbz	r7, 800680a <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80067cc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80067ce:	bf0c      	ite	eq
 80067d0:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80067d4:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80067d8:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80067da:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <RCCEx_PLL3_Config+0xf0>)
 80067dc:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067de:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 80067e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80067e4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80067e6:	f7fc faa1 	bl	8002d2c <HAL_GetTick>
 80067ea:	4605      	mov	r5, r0
 80067ec:	e004      	b.n	80067f8 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80067ee:	f7fc fa9d 	bl	8002d2c <HAL_GetTick>
 80067f2:	1b40      	subs	r0, r0, r5
 80067f4:	2802      	cmp	r0, #2
 80067f6:	d806      	bhi.n	8006806 <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	d5f7      	bpl.n	80067ee <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 80067fe:	2000      	movs	r0, #0
}
 8006800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8006802:	2001      	movs	r0, #1
}
 8006804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006806:	2003      	movs	r0, #3
}
 8006808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800680a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800680e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006810:	e7e3      	b.n	80067da <RCCEx_PLL3_Config+0xb6>
 8006812:	bf00      	nop
 8006814:	58024400 	.word	0x58024400
 8006818:	ffff0007 	.word	0xffff0007

0800681c <HAL_RCCEx_PeriphCLKConfig>:
{
 800681c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006820:	6803      	ldr	r3, [r0, #0]
{
 8006822:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006824:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8006828:	d015      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800682a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800682c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8006830:	f000 844e 	beq.w	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006834:	f240 8501 	bls.w	800723a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006838:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800683c:	f000 8461 	beq.w	8007102 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8006840:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8006844:	f040 8512 	bne.w	800726c <HAL_RCCEx_PeriphCLKConfig+0xa50>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006848:	48a2      	ldr	r0, [pc, #648]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800684a:	2600      	movs	r6, #0
 800684c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800684e:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8006852:	430a      	orrs	r2, r1
 8006854:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006856:	05dd      	lsls	r5, r3, #23
 8006858:	d50a      	bpl.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->Sai1ClockSelection)
 800685a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800685c:	2a04      	cmp	r2, #4
 800685e:	d806      	bhi.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006860:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006864:	03e403dd 	.word	0x03e403dd
 8006868:	039e03d2 	.word	0x039e03d2
 800686c:	039e      	.short	0x039e
      ret = HAL_ERROR;
 800686e:	2601      	movs	r6, #1
 8006870:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006872:	0598      	lsls	r0, r3, #22
 8006874:	d51b      	bpl.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->Sai23ClockSelection)
 8006876:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006878:	2a80      	cmp	r2, #128	; 0x80
 800687a:	f000 8405 	beq.w	8007088 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800687e:	f200 84d1 	bhi.w	8007224 <HAL_RCCEx_PeriphCLKConfig+0xa08>
 8006882:	2a00      	cmp	r2, #0
 8006884:	f000 8443 	beq.w	800710e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8006888:	2a40      	cmp	r2, #64	; 0x40
 800688a:	f040 84d2 	bne.w	8007232 <HAL_RCCEx_PeriphCLKConfig+0xa16>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800688e:	2100      	movs	r1, #0
 8006890:	1d20      	adds	r0, r4, #4
 8006892:	f7ff fecb 	bl	800662c <RCCEx_PLL2_Config>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800689a:	2d00      	cmp	r5, #0
 800689c:	f040 83fe 	bne.w	800709c <HAL_RCCEx_PeriphCLKConfig+0x880>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80068a0:	498c      	ldr	r1, [pc, #560]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80068a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068a4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80068a6:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 80068aa:	4302      	orrs	r2, r0
 80068ac:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80068ae:	0559      	lsls	r1, r3, #21
 80068b0:	d51f      	bpl.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4AClockSelection)
 80068b2:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80068b6:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80068ba:	f000 83d4 	beq.w	8007066 <HAL_RCCEx_PeriphCLKConfig+0x84a>
 80068be:	f200 8499 	bhi.w	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 80068c2:	2a00      	cmp	r2, #0
 80068c4:	f000 8410 	beq.w	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 80068c8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80068cc:	f040 849a 	bne.w	8007204 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068d0:	2100      	movs	r1, #0
 80068d2:	1d20      	adds	r0, r4, #4
 80068d4:	f7ff feaa 	bl	800662c <RCCEx_PLL2_Config>
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80068dc:	2d00      	cmp	r5, #0
 80068de:	f040 83cc 	bne.w	800707a <HAL_RCCEx_PeriphCLKConfig+0x85e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80068e2:	497c      	ldr	r1, [pc, #496]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80068e4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80068e8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80068ea:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 80068ee:	4302      	orrs	r2, r0
 80068f0:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80068f2:	051a      	lsls	r2, r3, #20
 80068f4:	d51f      	bpl.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai4BClockSelection)
 80068f6:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 80068fa:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 80068fe:	f000 83cf 	beq.w	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x884>
 8006902:	f200 8483 	bhi.w	800720c <HAL_RCCEx_PeriphCLKConfig+0x9f0>
 8006906:	2a00      	cmp	r2, #0
 8006908:	f000 8408 	beq.w	800711c <HAL_RCCEx_PeriphCLKConfig+0x900>
 800690c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8006910:	f040 8484 	bne.w	800721c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006914:	2100      	movs	r1, #0
 8006916:	1d20      	adds	r0, r4, #4
 8006918:	f7ff fe88 	bl	800662c <RCCEx_PLL2_Config>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006920:	2d00      	cmp	r5, #0
 8006922:	f040 83c7 	bne.w	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x898>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006926:	496b      	ldr	r1, [pc, #428]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006928:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800692c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800692e:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8006932:	4302      	orrs	r2, r0
 8006934:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006936:	019f      	lsls	r7, r3, #6
 8006938:	d50d      	bpl.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    switch(PeriphClkInit->QspiClockSelection)
 800693a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800693c:	2a10      	cmp	r2, #16
 800693e:	f000 830c 	beq.w	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006942:	f240 848e 	bls.w	8007262 <HAL_RCCEx_PeriphCLKConfig+0xa46>
 8006946:	2a20      	cmp	r2, #32
 8006948:	f000 8349 	beq.w	8006fde <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 800694c:	2a30      	cmp	r2, #48	; 0x30
 800694e:	f000 8309 	beq.w	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x748>
      ret = HAL_ERROR;
 8006952:	2601      	movs	r6, #1
 8006954:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006956:	04d8      	lsls	r0, r3, #19
 8006958:	d51d      	bpl.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->Spi123ClockSelection)
 800695a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800695c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006960:	f000 83aa 	beq.w	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8006964:	f200 8471 	bhi.w	800724a <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8006968:	2a00      	cmp	r2, #0
 800696a:	f000 83c4 	beq.w	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800696e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8006972:	f040 8472 	bne.w	800725a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006976:	2100      	movs	r1, #0
 8006978:	1d20      	adds	r0, r4, #4
 800697a:	f7ff fe57 	bl	800662c <RCCEx_PLL2_Config>
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006982:	2d00      	cmp	r5, #0
 8006984:	f040 83a2 	bne.w	80070cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006988:	4952      	ldr	r1, [pc, #328]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800698a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800698c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800698e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006992:	4302      	orrs	r2, r0
 8006994:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006996:	0499      	lsls	r1, r3, #18
 8006998:	d51b      	bpl.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 800699a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800699c:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80069a0:	f000 8309 	beq.w	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80069a4:	f200 8407 	bhi.w	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x99a>
 80069a8:	b14a      	cbz	r2, 80069be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80069aa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80069ae:	f040 840e 	bne.w	80071ce <HAL_RCCEx_PeriphCLKConfig+0x9b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069b2:	2101      	movs	r1, #1
 80069b4:	1d20      	adds	r0, r4, #4
 80069b6:	f7ff fe39 	bl	800662c <RCCEx_PLL2_Config>
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80069be:	2d00      	cmp	r5, #0
 80069c0:	f040 8271 	bne.w	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80069c4:	4943      	ldr	r1, [pc, #268]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80069c6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80069c8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80069ca:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80069ce:	4302      	orrs	r2, r0
 80069d0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80069d2:	045a      	lsls	r2, r3, #17
 80069d4:	d51d      	bpl.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Spi6ClockSelection)
 80069d6:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80069da:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80069de:	f000 82b2 	beq.w	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x72a>
 80069e2:	f200 83f8 	bhi.w	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80069e6:	b14a      	cbz	r2, 80069fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 80069e8:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80069ec:	f040 83ff 	bne.w	80071ee <HAL_RCCEx_PeriphCLKConfig+0x9d2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069f0:	2101      	movs	r1, #1
 80069f2:	1d20      	adds	r0, r4, #4
 80069f4:	f7ff fe1a 	bl	800662c <RCCEx_PLL2_Config>
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80069fc:	2d00      	cmp	r5, #0
 80069fe:	f040 8250 	bne.w	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x686>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006a02:	4934      	ldr	r1, [pc, #208]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006a04:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8006a08:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006a0a:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8006a0e:	4302      	orrs	r2, r0
 8006a10:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a12:	041f      	lsls	r7, r3, #16
 8006a14:	d50d      	bpl.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch(PeriphClkInit->FdcanClockSelection)
 8006a16:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006a18:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8006a1c:	f000 82d6 	beq.w	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 8006a20:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8006a24:	f000 81ad 	beq.w	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006a28:	2a00      	cmp	r2, #0
 8006a2a:	f000 81b0 	beq.w	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x572>
      ret = HAL_ERROR;
 8006a2e:	2601      	movs	r6, #1
 8006a30:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006a32:	01d8      	lsls	r0, r3, #7
 8006a34:	d519      	bpl.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x24e>
    switch(PeriphClkInit->FmcClockSelection)
 8006a36:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006a38:	2a03      	cmp	r2, #3
 8006a3a:	f200 8442 	bhi.w	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
 8006a3e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006a42:	000a      	.short	0x000a
 8006a44:	00040264 	.word	0x00040264
 8006a48:	000a      	.short	0x000a
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006a4a:	2102      	movs	r1, #2
 8006a4c:	1d20      	adds	r0, r4, #4
 8006a4e:	f7ff fded 	bl	800662c <RCCEx_PLL2_Config>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006a56:	2d00      	cmp	r5, #0
 8006a58:	f040 821b 	bne.w	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x676>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006a5c:	491d      	ldr	r1, [pc, #116]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006a5e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006a60:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006a62:	f022 0203 	bic.w	r2, r2, #3
 8006a66:	4302      	orrs	r2, r0
 8006a68:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a6a:	0259      	lsls	r1, r3, #9
 8006a6c:	f100 81cb 	bmi.w	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a70:	07df      	lsls	r7, r3, #31
 8006a72:	d542      	bpl.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch(PeriphClkInit->Usart16ClockSelection)
 8006a74:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006a76:	2a28      	cmp	r2, #40	; 0x28
 8006a78:	f200 8369 	bhi.w	800714e <HAL_RCCEx_PeriphCLKConfig+0x932>
 8006a7c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006a80:	03670033 	.word	0x03670033
 8006a84:	03670367 	.word	0x03670367
 8006a88:	03670367 	.word	0x03670367
 8006a8c:	03670367 	.word	0x03670367
 8006a90:	03670256 	.word	0x03670256
 8006a94:	03670367 	.word	0x03670367
 8006a98:	03670367 	.word	0x03670367
 8006a9c:	03670367 	.word	0x03670367
 8006aa0:	0367002c 	.word	0x0367002c
 8006aa4:	03670367 	.word	0x03670367
 8006aa8:	03670367 	.word	0x03670367
 8006aac:	03670367 	.word	0x03670367
 8006ab0:	03670033 	.word	0x03670033
 8006ab4:	03670367 	.word	0x03670367
 8006ab8:	03670367 	.word	0x03670367
 8006abc:	03670367 	.word	0x03670367
 8006ac0:	03670033 	.word	0x03670033
 8006ac4:	03670367 	.word	0x03670367
 8006ac8:	03670367 	.word	0x03670367
 8006acc:	03670367 	.word	0x03670367
 8006ad0:	0033      	.short	0x0033
 8006ad2:	bf00      	nop
 8006ad4:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ad8:	2101      	movs	r1, #1
 8006ada:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006ade:	f7ff fe21 	bl	8006724 <RCCEx_PLL3_Config>
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006ae6:	2d00      	cmp	r5, #0
 8006ae8:	f040 81d1 	bne.w	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x672>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006aec:	49ad      	ldr	r1, [pc, #692]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006aee:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006af0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8006af2:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8006af6:	4302      	orrs	r2, r0
 8006af8:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006afa:	0798      	lsls	r0, r3, #30
 8006afc:	d51c      	bpl.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006afe:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006b00:	2a05      	cmp	r2, #5
 8006b02:	f200 83d8 	bhi.w	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 8006b06:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006b0a:	000d      	.short	0x000d
 8006b0c:	000601f7 	.word	0x000601f7
 8006b10:	000d000d 	.word	0x000d000d
 8006b14:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b16:	2101      	movs	r1, #1
 8006b18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006b1c:	f7ff fe02 	bl	8006724 <RCCEx_PLL3_Config>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006b24:	2d00      	cmp	r5, #0
 8006b26:	f040 81b6 	bne.w	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b2a:	499e      	ldr	r1, [pc, #632]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006b2c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006b2e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8006b30:	f022 0207 	bic.w	r2, r2, #7
 8006b34:	4302      	orrs	r2, r0
 8006b36:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b38:	0759      	lsls	r1, r3, #29
 8006b3a:	d51e      	bpl.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x35e>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006b3c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8006b40:	2a05      	cmp	r2, #5
 8006b42:	f200 83bb 	bhi.w	80072bc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8006b46:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006b4a:	000d      	.short	0x000d
 8006b4c:	000601e8 	.word	0x000601e8
 8006b50:	000d000d 	.word	0x000d000d
 8006b54:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b56:	2101      	movs	r1, #1
 8006b58:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006b5c:	f7ff fde2 	bl	8006724 <RCCEx_PLL3_Config>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006b64:	2d00      	cmp	r5, #0
 8006b66:	f040 8198 	bne.w	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b6a:	498e      	ldr	r1, [pc, #568]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006b6c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8006b70:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006b72:	f022 0207 	bic.w	r2, r2, #7
 8006b76:	4302      	orrs	r2, r0
 8006b78:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b7a:	069a      	lsls	r2, r3, #26
 8006b7c:	d51d      	bpl.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006b7e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006b82:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8006b86:	f000 81f7 	beq.w	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8006b8a:	f200 82e7 	bhi.w	800715c <HAL_RCCEx_PeriphCLKConfig+0x940>
 8006b8e:	b14a      	cbz	r2, 8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8006b90:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8006b94:	f040 82ee 	bne.w	8007174 <HAL_RCCEx_PeriphCLKConfig+0x958>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b98:	2100      	movs	r1, #0
 8006b9a:	1d20      	adds	r0, r4, #4
 8006b9c:	f7ff fd46 	bl	800662c <RCCEx_PLL2_Config>
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006ba4:	2d00      	cmp	r5, #0
 8006ba6:	f040 817a 	bne.w	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x682>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006baa:	497e      	ldr	r1, [pc, #504]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006bac:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8006bb0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8006bb2:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8006bb6:	4302      	orrs	r2, r0
 8006bb8:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006bba:	065f      	lsls	r7, r3, #25
 8006bbc:	d51d      	bpl.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006bbe:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8006bc2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006bc6:	f000 81e1 	beq.w	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x770>
 8006bca:	f200 82d6 	bhi.w	800717a <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8006bce:	b14a      	cbz	r2, 8006be4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8006bd0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006bd4:	f040 82dd 	bne.w	8007192 <HAL_RCCEx_PeriphCLKConfig+0x976>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bd8:	2100      	movs	r1, #0
 8006bda:	1d20      	adds	r0, r4, #4
 8006bdc:	f7ff fd26 	bl	800662c <RCCEx_PLL2_Config>
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006be4:	2d00      	cmp	r5, #0
 8006be6:	f040 8162 	bne.w	8006eae <HAL_RCCEx_PeriphCLKConfig+0x692>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bea:	496e      	ldr	r1, [pc, #440]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006bec:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8006bf0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006bf2:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8006bf6:	4302      	orrs	r2, r0
 8006bf8:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006bfa:	0618      	lsls	r0, r3, #24
 8006bfc:	d51d      	bpl.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006bfe:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8006c02:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006c06:	f000 81f4 	beq.w	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8006c0a:	f200 82c5 	bhi.w	8007198 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006c0e:	b14a      	cbz	r2, 8006c24 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006c10:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006c14:	f040 82cc 	bne.w	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x994>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c18:	2100      	movs	r1, #0
 8006c1a:	1d20      	adds	r0, r4, #4
 8006c1c:	f7ff fd06 	bl	800662c <RCCEx_PLL2_Config>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006c24:	2d00      	cmp	r5, #0
 8006c26:	f040 8144 	bne.w	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x696>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006c2a:	495e      	ldr	r1, [pc, #376]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006c2c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8006c30:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006c32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006c36:	4302      	orrs	r2, r0
 8006c38:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006c3a:	0719      	lsls	r1, r3, #28
 8006c3c:	d50b      	bpl.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006c3e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8006c42:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006c46:	f000 81f8 	beq.w	800703a <HAL_RCCEx_PeriphCLKConfig+0x81e>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006c4a:	4856      	ldr	r0, [pc, #344]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006c4c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8006c4e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006c52:	430a      	orrs	r2, r1
 8006c54:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c56:	06da      	lsls	r2, r3, #27
 8006c58:	d50b      	bpl.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x456>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006c5a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8006c5e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006c62:	f000 81f5 	beq.w	8007050 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c66:	484f      	ldr	r0, [pc, #316]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006c68:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8006c6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c72:	031f      	lsls	r7, r3, #12
 8006c74:	d50e      	bpl.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch(PeriphClkInit->AdcClockSelection)
 8006c76:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8006c7a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8006c7e:	f000 8093 	beq.w	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
 8006c82:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8006c86:	f000 8096 	beq.w	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006c8a:	2900      	cmp	r1, #0
 8006c8c:	f000 824d 	beq.w	800712a <HAL_RCCEx_PeriphCLKConfig+0x90e>
      ret = HAL_ERROR;
 8006c90:	2601      	movs	r6, #1
 8006c92:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c94:	0358      	lsls	r0, r3, #13
 8006c96:	d50f      	bpl.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    switch(PeriphClkInit->UsbClockSelection)
 8006c98:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006c9c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8006ca0:	f000 8094 	beq.w	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8006ca4:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8006ca8:	f000 8097 	beq.w	8006dda <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8006cac:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8006cb0:	f000 8244 	beq.w	800713c <HAL_RCCEx_PeriphCLKConfig+0x920>
      ret = HAL_ERROR;
 8006cb4:	2601      	movs	r6, #1
 8006cb6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006cb8:	03d9      	lsls	r1, r3, #15
 8006cba:	d517      	bpl.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    switch(PeriphClkInit->SdmmcClockSelection)
 8006cbc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006cbe:	2a00      	cmp	r2, #0
 8006cc0:	f000 8110 	beq.w	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8006cc4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006cc8:	f040 80f7 	bne.w	8006eba <HAL_RCCEx_PeriphCLKConfig+0x69e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ccc:	2102      	movs	r1, #2
 8006cce:	1d20      	adds	r0, r4, #4
 8006cd0:	f7ff fcac 	bl	800662c <RCCEx_PLL2_Config>
 8006cd4:	4605      	mov	r5, r0
 8006cd6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006cd8:	2d00      	cmp	r5, #0
 8006cda:	f040 810b 	bne.w	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006cde:	4931      	ldr	r1, [pc, #196]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006ce0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006ce2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006ce4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ce8:	4302      	orrs	r2, r0
 8006cea:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006cec:	009a      	lsls	r2, r3, #2
 8006cee:	d47f      	bmi.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006cf0:	039f      	lsls	r7, r3, #14
 8006cf2:	d435      	bmi.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8006cf4:	1c30      	adds	r0, r6, #0
 8006cf6:	bf18      	it	ne
 8006cf8:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006cfa:	02de      	lsls	r6, r3, #11
 8006cfc:	d506      	bpl.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006cfe:	4929      	ldr	r1, [pc, #164]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006d00:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8006d02:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006d04:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006d08:	432a      	orrs	r2, r5
 8006d0a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006d0c:	00dd      	lsls	r5, r3, #3
 8006d0e:	d507      	bpl.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x504>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006d10:	4924      	ldr	r1, [pc, #144]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006d12:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8006d16:	690a      	ldr	r2, [r1, #16]
 8006d18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d1c:	432a      	orrs	r2, r5
 8006d1e:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d20:	0299      	lsls	r1, r3, #10
 8006d22:	d506      	bpl.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x516>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d24:	491f      	ldr	r1, [pc, #124]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006d26:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8006d28:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006d2a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006d2e:	432a      	orrs	r2, r5
 8006d30:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d32:	005a      	lsls	r2, r3, #1
 8006d34:	d509      	bpl.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d36:	4a1b      	ldr	r2, [pc, #108]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006d38:	6911      	ldr	r1, [r2, #16]
 8006d3a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8006d3e:	6111      	str	r1, [r2, #16]
 8006d40:	6911      	ldr	r1, [r2, #16]
 8006d42:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8006d46:	4329      	orrs	r1, r5
 8006d48:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	da06      	bge.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x540>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d4e:	4a15      	ldr	r2, [pc, #84]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006d50:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006d52:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006d54:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8006d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8006d60:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006d62:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006d66:	f000 80ab 	beq.w	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8006d6a:	f240 80e8 	bls.w	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x722>
 8006d6e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8006d72:	f000 80aa 	beq.w	8006eca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8006d76:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006d7a:	f000 80a6 	beq.w	8006eca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8006d7e:	2001      	movs	r0, #1
 8006d80:	e7bb      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d82:	2101      	movs	r1, #1
 8006d84:	1d20      	adds	r0, r4, #4
 8006d86:	f7ff fc51 	bl	800662c <RCCEx_PLL2_Config>
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006d8e:	2d00      	cmp	r5, #0
 8006d90:	f040 808b 	bne.w	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d94:	4903      	ldr	r1, [pc, #12]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006d96:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006d98:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006d9a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d9e:	4302      	orrs	r2, r0
 8006da0:	650a      	str	r2, [r1, #80]	; 0x50
 8006da2:	e646      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8006da4:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006da8:	2102      	movs	r1, #2
 8006daa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006dae:	f7ff fcb9 	bl	8006724 <RCCEx_PLL3_Config>
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006db6:	2d00      	cmp	r5, #0
 8006db8:	d17d      	bne.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dba:	49b1      	ldr	r1, [pc, #708]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8006dbc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8006dc0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006dc2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006dc6:	4302      	orrs	r2, r0
 8006dc8:	658a      	str	r2, [r1, #88]	; 0x58
 8006dca:	e763      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006dcc:	2101      	movs	r1, #1
 8006dce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006dd2:	f7ff fca7 	bl	8006724 <RCCEx_PLL3_Config>
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006dda:	2d00      	cmp	r5, #0
 8006ddc:	d155      	bne.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006dde:	49a8      	ldr	r1, [pc, #672]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8006de0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8006de4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8006de6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006dea:	4302      	orrs	r2, r0
 8006dec:	654a      	str	r2, [r1, #84]	; 0x54
 8006dee:	e763      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006df0:	2102      	movs	r1, #2
 8006df2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006df6:	f7ff fc95 	bl	8006724 <RCCEx_PLL3_Config>
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	f43f af77 	beq.w	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      status=HAL_ERROR;
 8006e02:	2601      	movs	r6, #1
 8006e04:	e774      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e06:	4b9f      	ldr	r3, [pc, #636]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x868>)
 8006e08:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e0a:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e10:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006e12:	f7fb ff8b 	bl	8002d2c <HAL_GetTick>
 8006e16:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e18:	e006      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x60c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e1a:	f7fb ff87 	bl	8002d2c <HAL_GetTick>
 8006e1e:	eba0 0008 	sub.w	r0, r0, r8
 8006e22:	2864      	cmp	r0, #100	; 0x64
 8006e24:	f200 8196 	bhi.w	8007154 <HAL_RCCEx_PeriphCLKConfig+0x938>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	05da      	lsls	r2, r3, #23
 8006e2c:	d5f5      	bpl.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    if(ret == HAL_OK)
 8006e2e:	2d00      	cmp	r5, #0
 8006e30:	f040 823d 	bne.w	80072ae <HAL_RCCEx_PeriphCLKConfig+0xa92>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006e34:	4a92      	ldr	r2, [pc, #584]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8006e36:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8006e3a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8006e3c:	4059      	eors	r1, r3
 8006e3e:	f411 7f40 	tst.w	r1, #768	; 0x300
 8006e42:	d00b      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x640>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e44:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e46:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e48:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e4c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8006e50:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e52:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8006e54:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8006e58:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8006e5a:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e60:	f000 8207 	beq.w	8007272 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e64:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006e68:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006e6c:	f000 8215 	beq.w	800729a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006e70:	4983      	ldr	r1, [pc, #524]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8006e72:	690a      	ldr	r2, [r1, #16]
 8006e74:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8006e78:	610a      	str	r2, [r1, #16]
 8006e7a:	4a81      	ldr	r2, [pc, #516]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8006e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e80:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8006e82:	430b      	orrs	r3, r1
 8006e84:	6713      	str	r3, [r2, #112]	; 0x70
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	e5f2      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006e8a:	462e      	mov	r6, r5
 8006e8c:	e714      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006e8e:	462e      	mov	r6, r5
 8006e90:	e633      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006e92:	462e      	mov	r6, r5
 8006e94:	e5e9      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8006e96:	462e      	mov	r6, r5
 8006e98:	e64e      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006e9a:	462e      	mov	r6, r5
 8006e9c:	e66d      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006e9e:	462e      	mov	r6, r5
 8006ea0:	e68b      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8006ea2:	462e      	mov	r6, r5
 8006ea4:	e5b5      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006ea6:	462e      	mov	r6, r5
 8006ea8:	e593      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006eaa:	462e      	mov	r6, r5
 8006eac:	e5c1      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8006eae:	462e      	mov	r6, r5
 8006eb0:	e6a3      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006eb2:	462e      	mov	r6, r5
 8006eb4:	e6c1      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8006eb6:	462e      	mov	r6, r5
 8006eb8:	e6ec      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = HAL_ERROR;
 8006eba:	2601      	movs	r6, #1
 8006ebc:	4635      	mov	r5, r6
 8006ebe:	e715      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec0:	486f      	ldr	r0, [pc, #444]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8006ec2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006ec4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8006ec8:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8006eca:	2d00      	cmp	r5, #0
 8006ecc:	f47f af57 	bne.w	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x562>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ed0:	4d6b      	ldr	r5, [pc, #428]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8006ed2:	1c30      	adds	r0, r6, #0
 8006ed4:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8006ed6:	bf18      	it	ne
 8006ed8:	2001      	movne	r0, #1
 8006eda:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	656a      	str	r2, [r5, #84]	; 0x54
 8006ee2:	e70a      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x4de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee4:	4966      	ldr	r1, [pc, #408]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8006ee6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8006ee8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006eec:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8006eee:	2d00      	cmp	r5, #0
 8006ef0:	f43f aef5 	beq.w	8006cde <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006ef4:	462e      	mov	r6, r5
 8006ef6:	e6f9      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ef8:	2101      	movs	r1, #1
 8006efa:	1d20      	adds	r0, r4, #4
 8006efc:	f7ff fb96 	bl	800662c <RCCEx_PLL2_Config>
 8006f00:	4605      	mov	r5, r0
 8006f02:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006f04:	2d00      	cmp	r5, #0
 8006f06:	d1c6      	bne.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006f08:	e60f      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f0a:	495d      	ldr	r1, [pc, #372]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8006f0c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8006f0e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006f12:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8006f14:	2d00      	cmp	r5, #0
 8006f16:	d1bc      	bne.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006f18:	e5a0      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	1d20      	adds	r0, r4, #4
 8006f1e:	f7ff fb85 	bl	800662c <RCCEx_PLL2_Config>
 8006f22:	4605      	mov	r5, r0
 8006f24:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006f26:	2d00      	cmp	r5, #0
 8006f28:	d1b7      	bne.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006f2a:	e61e      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	1d20      	adds	r0, r4, #4
 8006f30:	f7ff fb7c 	bl	800662c <RCCEx_PLL2_Config>
 8006f34:	4605      	mov	r5, r0
 8006f36:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006f38:	2d00      	cmp	r5, #0
 8006f3a:	d1a8      	bne.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006f3c:	e5d6      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    switch(PeriphClkInit->RngClockSelection)
 8006f3e:	2a00      	cmp	r2, #0
 8006f40:	f47f af1d 	bne.w	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x562>
 8006f44:	e7c1      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f46:	2101      	movs	r1, #1
 8006f48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006f4c:	f7ff fbea 	bl	8006724 <RCCEx_PLL3_Config>
 8006f50:	4605      	mov	r5, r0
 8006f52:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006f54:	2d00      	cmp	r5, #0
 8006f56:	d1a4      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x686>
 8006f58:	e553      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f5a:	4949      	ldr	r1, [pc, #292]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8006f5c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8006f5e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006f62:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8006f64:	2d00      	cmp	r5, #0
 8006f66:	d142      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f68:	4945      	ldr	r1, [pc, #276]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8006f6a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006f6c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006f6e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8006f72:	4302      	orrs	r2, r0
 8006f74:	64ca      	str	r2, [r1, #76]	; 0x4c
 8006f76:	e4ee      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f78:	2102      	movs	r1, #2
 8006f7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006f7e:	f7ff fbd1 	bl	8006724 <RCCEx_PLL3_Config>
 8006f82:	4605      	mov	r5, r0
 8006f84:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006f86:	2d00      	cmp	r5, #0
 8006f88:	d189      	bne.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006f8a:	e60e      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x38e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f8c:	2102      	movs	r1, #2
 8006f8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006f92:	f7ff fbc7 	bl	8006724 <RCCEx_PLL3_Config>
 8006f96:	4605      	mov	r5, r0
 8006f98:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006f9a:	2d00      	cmp	r5, #0
 8006f9c:	d187      	bne.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x692>
 8006f9e:	e624      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006fa0:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8006fa2:	2d00      	cmp	r5, #0
 8006fa4:	d139      	bne.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fa6:	4936      	ldr	r1, [pc, #216]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8006fa8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006faa:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006fac:	f022 0207 	bic.w	r2, r2, #7
 8006fb0:	4302      	orrs	r2, r0
 8006fb2:	650a      	str	r2, [r1, #80]	; 0x50
 8006fb4:	e45d      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x56>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006fbc:	f7ff fbb2 	bl	8006724 <RCCEx_PLL3_Config>
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006fc4:	2d00      	cmp	r5, #0
 8006fc6:	f47f af6e 	bne.w	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
 8006fca:	e4fb      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fcc:	492c      	ldr	r1, [pc, #176]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8006fce:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8006fd0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006fd4:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8006fd6:	2d00      	cmp	r5, #0
 8006fd8:	f47f af67 	bne.w	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8006fdc:	e6da      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x578>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fde:	2102      	movs	r1, #2
 8006fe0:	1d20      	adds	r0, r4, #4
 8006fe2:	f7ff fb23 	bl	800662c <RCCEx_PLL2_Config>
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006fea:	2d00      	cmp	r5, #0
 8006fec:	d0bc      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8006fee:	462e      	mov	r6, r5
 8006ff0:	e4b1      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ff2:	2102      	movs	r1, #2
 8006ff4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006ff8:	f7ff fb94 	bl	8006724 <RCCEx_PLL3_Config>
 8006ffc:	4605      	mov	r5, r0
 8006ffe:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007000:	2d00      	cmp	r5, #0
 8007002:	f47f af56 	bne.w	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x696>
 8007006:	e610      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007008:	2100      	movs	r1, #0
 800700a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800700e:	f7ff fb89 	bl	8006724 <RCCEx_PLL3_Config>
 8007012:	4605      	mov	r5, r0
 8007014:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007016:	2d00      	cmp	r5, #0
 8007018:	d0c5      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800701a:	462e      	mov	r6, r5
 800701c:	e429      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800701e:	4918      	ldr	r1, [pc, #96]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x864>)
      break;
 8007020:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007022:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007024:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007028:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800702a:	e7ba      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x786>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800702c:	2100      	movs	r1, #0
 800702e:	1d20      	adds	r0, r4, #4
 8007030:	f7ff fafc 	bl	800662c <RCCEx_PLL2_Config>
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	4605      	mov	r5, r0
      break;
 8007038:	e7b3      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x786>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800703a:	2102      	movs	r1, #2
 800703c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007040:	f7ff fb70 	bl	8006724 <RCCEx_PLL3_Config>
 8007044:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8007048:	b100      	cbz	r0, 800704c <HAL_RCCEx_PeriphCLKConfig+0x830>
          status = HAL_ERROR;
 800704a:	2601      	movs	r6, #1
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	e5fc      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007050:	2102      	movs	r1, #2
 8007052:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007056:	f7ff fb65 	bl	8006724 <RCCEx_PLL3_Config>
 800705a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800705e:	b100      	cbz	r0, 8007062 <HAL_RCCEx_PeriphCLKConfig+0x846>
        status = HAL_ERROR;
 8007060:	2601      	movs	r6, #1
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	e5ff      	b.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007066:	2100      	movs	r1, #0
 8007068:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800706c:	f7ff fb5a 	bl	8006724 <RCCEx_PLL3_Config>
 8007070:	4605      	mov	r5, r0
 8007072:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007074:	2d00      	cmp	r5, #0
 8007076:	f43f ac34 	beq.w	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 800707a:	462e      	mov	r6, r5
 800707c:	e439      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 800707e:	bf00      	nop
 8007080:	58024400 	.word	0x58024400
 8007084:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007088:	2100      	movs	r1, #0
 800708a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800708e:	f7ff fb49 	bl	8006724 <RCCEx_PLL3_Config>
 8007092:	4605      	mov	r5, r0
 8007094:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007096:	2d00      	cmp	r5, #0
 8007098:	f43f ac02 	beq.w	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x84>
 800709c:	462e      	mov	r6, r5
 800709e:	e406      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070a0:	2100      	movs	r1, #0
 80070a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80070a6:	f7ff fb3d 	bl	8006724 <RCCEx_PLL3_Config>
 80070aa:	4605      	mov	r5, r0
 80070ac:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80070ae:	2d00      	cmp	r5, #0
 80070b0:	f43f ac39 	beq.w	8006926 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 80070b4:	462e      	mov	r6, r5
 80070b6:	e43e      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070b8:	2100      	movs	r1, #0
 80070ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80070be:	f7ff fb31 	bl	8006724 <RCCEx_PLL3_Config>
 80070c2:	4605      	mov	r5, r0
 80070c4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80070c6:	2d00      	cmp	r5, #0
 80070c8:	f43f ac5e 	beq.w	8006988 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80070cc:	462e      	mov	r6, r5
 80070ce:	e462      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80070d0:	2102      	movs	r1, #2
 80070d2:	3004      	adds	r0, #4
 80070d4:	f7ff faaa 	bl	800662c <RCCEx_PLL2_Config>
 80070d8:	4606      	mov	r6, r0
 80070da:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80070dc:	2e00      	cmp	r6, #0
 80070de:	f47f abba 	bne.w	8006856 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80070e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070e4:	f7ff bbb0 	b.w	8006848 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e8:	4978      	ldr	r1, [pc, #480]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 80070ea:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80070ec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80070f0:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80070f2:	f7ff bbf3 	b.w	80068dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070f6:	4975      	ldr	r1, [pc, #468]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 80070f8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80070fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80070fe:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007100:	e43f      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007102:	2102      	movs	r1, #2
 8007104:	3024      	adds	r0, #36	; 0x24
 8007106:	f7ff fb0d 	bl	8006724 <RCCEx_PLL3_Config>
 800710a:	4606      	mov	r6, r0
      break;
 800710c:	e7e5      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800710e:	496f      	ldr	r1, [pc, #444]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8007110:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007112:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007116:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007118:	f7ff bbbf 	b.w	800689a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800711c:	496b      	ldr	r1, [pc, #428]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 800711e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007120:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007124:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007126:	f7ff bbfb 	b.w	8006920 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800712a:	1d20      	adds	r0, r4, #4
 800712c:	f7ff fa7e 	bl	800662c <RCCEx_PLL2_Config>
 8007130:	4605      	mov	r5, r0
 8007132:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007134:	2d00      	cmp	r5, #0
 8007136:	f47f aebe 	bne.w	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
 800713a:	e63e      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800713c:	4963      	ldr	r1, [pc, #396]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 800713e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007140:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007144:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007146:	2d00      	cmp	r5, #0
 8007148:	f47f ae9f 	bne.w	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800714c:	e647      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      ret = HAL_ERROR;
 800714e:	2601      	movs	r6, #1
 8007150:	4635      	mov	r5, r6
 8007152:	e4d2      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x2de>
            ret = HAL_TIMEOUT;
 8007154:	2603      	movs	r6, #3
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	4635      	mov	r5, r6
 800715a:	e489      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800715c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007160:	f43f ad20 	beq.w	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8007164:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8007168:	f43f ad1c 	beq.w	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800716c:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8007170:	f43f ad18 	beq.w	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x388>
      ret = HAL_ERROR;
 8007174:	2601      	movs	r6, #1
 8007176:	4635      	mov	r5, r6
 8007178:	e51f      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800717a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800717e:	f43f ad31 	beq.w	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8007182:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8007186:	f43f ad2d 	beq.w	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 800718a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800718e:	f43f ad29 	beq.w	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
      ret = HAL_ERROR;
 8007192:	2601      	movs	r6, #1
 8007194:	4635      	mov	r5, r6
 8007196:	e530      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007198:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800719c:	f43f ad42 	beq.w	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80071a0:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 80071a4:	f43f ad3e 	beq.w	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80071a8:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 80071ac:	f43f ad3a 	beq.w	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x408>
      ret = HAL_ERROR;
 80071b0:	2601      	movs	r6, #1
 80071b2:	4635      	mov	r5, r6
 80071b4:	e541      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Spi45ClockSelection)
 80071b6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80071ba:	f43f ac00 	beq.w	80069be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80071be:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80071c2:	f43f abfc 	beq.w	80069be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80071c6:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80071ca:	f43f abf8 	beq.w	80069be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ret = HAL_ERROR;
 80071ce:	2601      	movs	r6, #1
 80071d0:	4635      	mov	r5, r6
 80071d2:	f7ff bbfe 	b.w	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi6ClockSelection)
 80071d6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80071da:	f43f ac0f 	beq.w	80069fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 80071de:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80071e2:	f43f ac0b 	beq.w	80069fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 80071e6:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80071ea:	f43f ac07 	beq.w	80069fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = HAL_ERROR;
 80071ee:	2601      	movs	r6, #1
 80071f0:	4635      	mov	r5, r6
 80071f2:	e40e      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Sai4AClockSelection)
 80071f4:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 80071f8:	f43f ab70 	beq.w	80068dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80071fc:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8007200:	f43f ab6c 	beq.w	80068dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
      ret = HAL_ERROR;
 8007204:	2601      	movs	r6, #1
 8007206:	4635      	mov	r5, r6
 8007208:	f7ff bb73 	b.w	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4BClockSelection)
 800720c:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8007210:	f43f ab86 	beq.w	8006920 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8007214:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8007218:	f43f ab82 	beq.w	8006920 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = HAL_ERROR;
 800721c:	2601      	movs	r6, #1
 800721e:	4635      	mov	r5, r6
 8007220:	f7ff bb89 	b.w	8006936 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8007224:	2ac0      	cmp	r2, #192	; 0xc0
 8007226:	f43f ab38 	beq.w	800689a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800722a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800722e:	f43f ab34 	beq.w	800689a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 8007232:	2601      	movs	r6, #1
 8007234:	4635      	mov	r5, r6
 8007236:	f7ff bb3a 	b.w	80068ae <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800723a:	b9ba      	cbnz	r2, 800726c <HAL_RCCEx_PeriphCLKConfig+0xa50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800723c:	4823      	ldr	r0, [pc, #140]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 800723e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007240:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8007244:	62c1      	str	r1, [r0, #44]	; 0x2c
 8007246:	f7ff baff 	b.w	8006848 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Spi123ClockSelection)
 800724a:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800724e:	f43f ab98 	beq.w	8006982 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007252:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8007256:	f43f ab94 	beq.w	8006982 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 800725a:	2601      	movs	r6, #1
 800725c:	4635      	mov	r5, r6
 800725e:	f7ff bb9a 	b.w	8006996 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->QspiClockSelection)
 8007262:	2a00      	cmp	r2, #0
 8007264:	f43f ae7e 	beq.w	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8007268:	f7ff bb73 	b.w	8006952 <HAL_RCCEx_PeriphCLKConfig+0x136>
      ret = HAL_ERROR;
 800726c:	2601      	movs	r6, #1
 800726e:	f7ff baf2 	b.w	8006856 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8007272:	f7fb fd5b 	bl	8002d2c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007276:	4f15      	ldr	r7, [pc, #84]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0xab0>)
        tickstart = HAL_GetTick();
 8007278:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800727a:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800727e:	e006      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xa72>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007280:	f7fb fd54 	bl	8002d2c <HAL_GetTick>
 8007284:	eba0 0009 	sub.w	r0, r0, r9
 8007288:	4540      	cmp	r0, r8
 800728a:	f63f af63 	bhi.w	8007154 <HAL_RCCEx_PeriphCLKConfig+0x938>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800728e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007290:	079b      	lsls	r3, r3, #30
 8007292:	d5f5      	bpl.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xa64>
 8007294:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007298:	e5e4      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x648>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800729a:	480c      	ldr	r0, [pc, #48]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 800729c:	4a0c      	ldr	r2, [pc, #48]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0xab4>)
 800729e:	6901      	ldr	r1, [r0, #16]
 80072a0:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80072a4:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80072a8:	430a      	orrs	r2, r1
 80072aa:	6102      	str	r2, [r0, #16]
 80072ac:	e5e5      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x65e>
 80072ae:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80072b0:	462e      	mov	r6, r5
 80072b2:	f7ff bbdd 	b.w	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = HAL_ERROR;
 80072b6:	2601      	movs	r6, #1
 80072b8:	4635      	mov	r5, r6
 80072ba:	e43d      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = HAL_ERROR;
 80072bc:	2601      	movs	r6, #1
 80072be:	4635      	mov	r5, r6
 80072c0:	e45b      	b.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      ret = HAL_ERROR;
 80072c2:	2601      	movs	r6, #1
 80072c4:	4635      	mov	r5, r6
 80072c6:	f7ff bbd0 	b.w	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80072ca:	bf00      	nop
 80072cc:	58024400 	.word	0x58024400
 80072d0:	00ffffcf 	.word	0x00ffffcf

080072d4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80072d4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80072d6:	f7fe ffa1 	bl	800621c <HAL_RCC_GetHCLKFreq>
 80072da:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80072dc:	4a05      	ldr	r2, [pc, #20]	; (80072f4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80072e4:	5cd3      	ldrb	r3, [r2, r3]
 80072e6:	f003 031f 	and.w	r3, r3, #31
}
 80072ea:	40d8      	lsrs	r0, r3
 80072ec:	bd08      	pop	{r3, pc}
 80072ee:	bf00      	nop
 80072f0:	58024400 	.word	0x58024400
 80072f4:	0800f958 	.word	0x0800f958

080072f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072f8:	4a46      	ldr	r2, [pc, #280]	; (8007414 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 80072fa:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072fc:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80072fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007300:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007302:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007306:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8007308:	2b00      	cmp	r3, #0
 800730a:	d059      	beq.n	80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800730c:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007310:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007314:	f004 0403 	and.w	r4, r4, #3
 8007318:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800731c:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8007320:	2c01      	cmp	r4, #1
 8007322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007326:	ee06 1a90 	vmov	s13, r1
 800732a:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800732e:	d002      	beq.n	8007336 <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 8007330:	d34e      	bcc.n	80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8007332:	2c02      	cmp	r4, #2
 8007334:	d049      	beq.n	80073ca <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007336:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 800733a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800733e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007344:	ee07 3a10 	vmov	s14, r3
 8007348:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800734c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007350:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007354:	ee77 7a26 	vadd.f32	s15, s14, s13
 8007358:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800735c:	4a2d      	ldr	r2, [pc, #180]	; (8007414 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 800735e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007362:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007364:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007368:	ee06 3a90 	vmov	s13, r3
 800736c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8007370:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007372:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007376:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800737a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800737e:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007382:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007384:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007388:	ee06 3a90 	vmov	s13, r3
 800738c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007390:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007394:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007398:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800739c:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80073a0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80073a2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80073a6:	ee07 3a10 	vmov	s14, r3
 80073aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80073ae:	ee37 7a06 	vadd.f32	s14, s14, s12
 80073b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80073b6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80073ba:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80073be:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073c0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073c4:	6083      	str	r3, [r0, #8]
}
 80073c6:	bc30      	pop	{r4, r5}
 80073c8:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073ca:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800741c <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 80073ce:	e7b4      	b.n	800733a <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073d0:	6813      	ldr	r3, [r2, #0]
 80073d2:	069b      	lsls	r3, r3, #26
 80073d4:	d51a      	bpl.n	800740c <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073d6:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073d8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073dc:	4910      	ldr	r1, [pc, #64]	; (8007420 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 80073de:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073e2:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073e4:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ea:	ee07 1a10 	vmov	s14, r1
 80073ee:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80073f2:	ee07 3a10 	vmov	s14, r3
 80073f6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80073fa:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80073fe:	ee76 7a05 	vadd.f32	s15, s12, s10
 8007402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800740a:	e7a7      	b.n	800735c <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800740c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8007410:	e793      	b.n	800733a <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8007412:	bf00      	nop
 8007414:	58024400 	.word	0x58024400
 8007418:	4a742400 	.word	0x4a742400
 800741c:	4af42400 	.word	0x4af42400
 8007420:	03d09000 	.word	0x03d09000
 8007424:	4c742400 	.word	0x4c742400

08007428 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007428:	4a46      	ldr	r2, [pc, #280]	; (8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 800742a:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800742c:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800742e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007430:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007432:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007436:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8007438:	2b00      	cmp	r3, #0
 800743a:	d059      	beq.n	80074f0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800743c:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007440:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007444:	f004 0403 	and.w	r4, r4, #3
 8007448:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800744c:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8007450:	2c01      	cmp	r4, #1
 8007452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007456:	ee06 1a90 	vmov	s13, r1
 800745a:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800745e:	d002      	beq.n	8007466 <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 8007460:	d34e      	bcc.n	8007500 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8007462:	2c02      	cmp	r4, #2
 8007464:	d049      	beq.n	80074fa <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007466:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 800746a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800746e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007474:	ee07 3a10 	vmov	s14, r3
 8007478:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800747c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007480:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007484:	ee77 7a26 	vadd.f32	s15, s14, s13
 8007488:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800748c:	4a2d      	ldr	r2, [pc, #180]	; (8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 800748e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007492:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007494:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007498:	ee06 3a90 	vmov	s13, r3
 800749c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 80074a0:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80074a2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80074a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80074aa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80074ae:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80074b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80074b4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80074b8:	ee06 3a90 	vmov	s13, r3
 80074bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80074c0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80074c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80074c8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80074cc:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80074d0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80074d2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80074d6:	ee07 3a10 	vmov	s14, r3
 80074da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80074de:	ee37 7a06 	vadd.f32	s14, s14, s12
 80074e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80074e6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80074ea:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80074ee:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80074f0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80074f4:	6083      	str	r3, [r0, #8]
}
 80074f6:	bc30      	pop	{r4, r5}
 80074f8:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074fa:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800754c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80074fe:	e7b4      	b.n	800746a <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007500:	6813      	ldr	r3, [r2, #0]
 8007502:	069b      	lsls	r3, r3, #26
 8007504:	d51a      	bpl.n	800753c <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007506:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007508:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800750c:	4910      	ldr	r1, [pc, #64]	; (8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 800750e:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007512:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007514:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751a:	ee07 1a10 	vmov	s14, r1
 800751e:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8007522:	ee07 3a10 	vmov	s14, r3
 8007526:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800752a:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800752e:	ee76 7a05 	vadd.f32	s15, s12, s10
 8007532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753a:	e7a7      	b.n	800748c <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800753c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8007540:	e793      	b.n	800746a <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8007542:	bf00      	nop
 8007544:	58024400 	.word	0x58024400
 8007548:	4a742400 	.word	0x4a742400
 800754c:	4af42400 	.word	0x4af42400
 8007550:	03d09000 	.word	0x03d09000
 8007554:	4c742400 	.word	0x4c742400

08007558 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007558:	4a46      	ldr	r2, [pc, #280]	; (8007674 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
{
 800755a:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800755c:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800755e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007560:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007562:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007566:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8007568:	2b00      	cmp	r3, #0
 800756a:	d059      	beq.n	8007620 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800756c:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007570:	f001 0101 	and.w	r1, r1, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007574:	f004 0403 	and.w	r4, r4, #3
 8007578:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800757c:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8007580:	2c01      	cmp	r4, #1
 8007582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007586:	ee06 1a90 	vmov	s13, r1
 800758a:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800758e:	d002      	beq.n	8007596 <HAL_RCCEx_GetPLL1ClockFreq+0x3e>
 8007590:	d34e      	bcc.n	8007630 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8007592:	2c02      	cmp	r4, #2
 8007594:	d049      	beq.n	800762a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007596:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x120>
 800759a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800759e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80075a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a4:	ee07 3a10 	vmov	s14, r3
 80075a8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80075ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80075b0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80075b4:	ee77 7a26 	vadd.f32	s15, s14, s13
 80075b8:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80075bc:	4a2d      	ldr	r2, [pc, #180]	; (8007674 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
 80075be:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80075c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80075c4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80075c8:	ee06 3a90 	vmov	s13, r3
 80075cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 80075d0:	bc30      	pop	{r4, r5}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80075d2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80075d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80075da:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80075de:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80075e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80075e4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80075e8:	ee06 3a90 	vmov	s13, r3
 80075ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80075f0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80075f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80075f8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80075fc:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007600:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007602:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007606:	ee07 3a10 	vmov	s14, r3
 800760a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800760e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007612:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007616:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800761a:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800761e:	4770      	bx	lr
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007620:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007624:	6083      	str	r3, [r0, #8]
}
 8007626:	bc30      	pop	{r4, r5}
 8007628:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800762a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800767c <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800762e:	e7b4      	b.n	800759a <HAL_RCCEx_GetPLL1ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007630:	6813      	ldr	r3, [r2, #0]
 8007632:	069b      	lsls	r3, r3, #26
 8007634:	d51a      	bpl.n	800766c <HAL_RCCEx_GetPLL1ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007636:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007638:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800763c:	4910      	ldr	r1, [pc, #64]	; (8007680 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 800763e:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007642:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007644:	40e1      	lsrs	r1, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764a:	ee07 1a10 	vmov	s14, r1
 800764e:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8007652:	ee07 3a10 	vmov	s14, r3
 8007656:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800765a:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800765e:	ee76 7a05 	vadd.f32	s15, s12, s10
 8007662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800766a:	e7a7      	b.n	80075bc <HAL_RCCEx_GetPLL1ClockFreq+0x64>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800766c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007684 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8007670:	e793      	b.n	800759a <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 8007672:	bf00      	nop
 8007674:	58024400 	.word	0x58024400
 8007678:	4a742400 	.word	0x4a742400
 800767c:	4af42400 	.word	0x4af42400
 8007680:	03d09000 	.word	0x03d09000
 8007684:	4c742400 	.word	0x4c742400

08007688 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007688:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 800768c:	b500      	push	{lr}
 800768e:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007690:	d02d      	beq.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007692:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007696:	d018      	beq.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007698:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800769c:	d04e      	beq.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800769e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80076a2:	d037      	beq.n	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80076a4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80076a8:	f000 808b 	beq.w	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80076ac:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80076b0:	f000 80ac 	beq.w	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80076b4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80076b8:	f000 80b6 	beq.w	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80076bc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80076c0:	d062      	beq.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
          frequency = 0;
 80076c2:	2000      	movs	r0, #0
}
 80076c4:	b005      	add	sp, #20
 80076c6:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80076ca:	4a70      	ldr	r2, [pc, #448]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80076cc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80076ce:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 80076d2:	2b80      	cmp	r3, #128	; 0x80
 80076d4:	d043      	beq.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80076d6:	d86a      	bhi.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d039      	beq.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80076dc:	2b40      	cmp	r3, #64	; 0x40
 80076de:	d1f0      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076e0:	a801      	add	r0, sp, #4
 80076e2:	f7ff fe09 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076e6:	9801      	ldr	r0, [sp, #4]
}
 80076e8:	b005      	add	sp, #20
 80076ea:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80076ee:	4b67      	ldr	r3, [pc, #412]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80076f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f2:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d8e3      	bhi.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80076fa:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x78>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	08007751 	.word	0x08007751
 8007704:	080076e1 	.word	0x080076e1
 8007708:	0800775f 	.word	0x0800775f
 800770c:	08007735 	.word	0x08007735
 8007710:	0800776d 	.word	0x0800776d
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007714:	4a5d      	ldr	r2, [pc, #372]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007716:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007718:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 800771c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007720:	d01d      	beq.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007722:	d85c      	bhi.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8007724:	b1a3      	cbz	r3, 8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8007726:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800772a:	d0d9      	beq.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 800772c:	e7c9      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 800772e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007732:	d15b      	bne.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = EXTERNAL_CLOCK_VALUE;
 8007734:	4856      	ldr	r0, [pc, #344]	; (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
}
 8007736:	b005      	add	sp, #20
 8007738:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800773c:	4a53      	ldr	r2, [pc, #332]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800773e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007740:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8007744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007748:	d009      	beq.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800774a:	d8f0      	bhi.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800774c:	2b00      	cmp	r3, #0
 800774e:	d151      	bne.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007750:	a801      	add	r0, sp, #4
 8007752:	f7ff ff01 	bl	8007558 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007756:	9802      	ldr	r0, [sp, #8]
}
 8007758:	b005      	add	sp, #20
 800775a:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800775e:	a801      	add	r0, sp, #4
 8007760:	f7ff fe62 	bl	8007428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007764:	9801      	ldr	r0, [sp, #4]
}
 8007766:	b005      	add	sp, #20
 8007768:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800776c:	4b47      	ldr	r3, [pc, #284]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800776e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007770:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8007774:	d019      	beq.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800777a:	d062      	beq.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
            frequency = HSE_VALUE;
 800777c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007780:	4844      	ldr	r0, [pc, #272]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 8007782:	bf18      	it	ne
 8007784:	2000      	movne	r0, #0
 8007786:	e79d      	b.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007788:	4b40      	ldr	r3, [pc, #256]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800778a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800778c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8007790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007794:	d068      	beq.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007796:	d95b      	bls.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8007798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800779c:	d051      	beq.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 800779e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077a2:	d05f      	beq.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80077a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077a8:	d18b      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            frequency = HSI_VALUE;
 80077aa:	483b      	ldr	r0, [pc, #236]	; (8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
 80077ac:	e78a      	b.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (saiclocksource)
 80077ae:	2bc0      	cmp	r3, #192	; 0xc0
 80077b0:	d0c0      	beq.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 80077b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077b6:	d184      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80077b8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80077ba:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80077be:	d1da      	bne.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80077c0:	e7f3      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80077c2:	4a32      	ldr	r2, [pc, #200]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80077c4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80077c6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 80077ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077ce:	d0c6      	beq.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80077d0:	d815      	bhi.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0bc      	beq.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80077d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077da:	d081      	beq.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 80077dc:	e771      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 80077de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80077e2:	d0a7      	beq.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 80077e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077e8:	d0e6      	beq.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80077ea:	e76a      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 80077ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077f0:	d0e2      	beq.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80077f2:	e766      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80077f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077f8:	f43f af72 	beq.w	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 80077fc:	e761      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (srcclk)
 80077fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007802:	d097      	beq.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8007804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007808:	d0d6      	beq.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800780a:	e75a      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800780c:	4a1f      	ldr	r2, [pc, #124]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800780e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8007814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007818:	d015      	beq.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800781a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800781e:	d0cb      	beq.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8007820:	2b00      	cmp	r3, #0
 8007822:	f47f af4e 	bne.w	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007826:	e75b      	b.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007828:	4b18      	ldr	r3, [pc, #96]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800782a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 800782c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8007830:	d08e      	beq.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8007832:	2b00      	cmp	r3, #0
 8007834:	f43f af45 	beq.w	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007838:	a801      	add	r0, sp, #4
 800783a:	f7ff fd5d 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800783e:	9803      	ldr	r0, [sp, #12]
          break;
 8007840:	e740      	b.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            frequency = CSI_VALUE;
 8007842:	4816      	ldr	r0, [pc, #88]	; (800789c <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 8007844:	e73e      	b.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007846:	a801      	add	r0, sp, #4
 8007848:	f7ff fdee 	bl	8007428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800784c:	9803      	ldr	r0, [sp, #12]
          break;
 800784e:	e739      	b.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 8007850:	b17b      	cbz	r3, 8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007856:	f47f af34 	bne.w	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800785a:	a801      	add	r0, sp, #4
 800785c:	f7ff fd4c 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007860:	9802      	ldr	r0, [sp, #8]
          break;
 8007862:	e72f      	b.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          frequency = HSE_VALUE;
 8007864:	480b      	ldr	r0, [pc, #44]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
          break;
 8007866:	e72d      	b.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007868:	a801      	add	r0, sp, #4
 800786a:	f7ff fddd 	bl	8007428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800786e:	9802      	ldr	r0, [sp, #8]
          break;
 8007870:	e728      	b.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007872:	f7fe fcd3 	bl	800621c <HAL_RCC_GetHCLKFreq>
 8007876:	4b05      	ldr	r3, [pc, #20]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007878:	4a09      	ldr	r2, [pc, #36]	; (80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007880:	5cd3      	ldrb	r3, [r2, r3]
 8007882:	f003 031f 	and.w	r3, r3, #31
 8007886:	40d8      	lsrs	r0, r3
          break;
 8007888:	e71c      	b.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800788a:	bf00      	nop
 800788c:	58024400 	.word	0x58024400
 8007890:	00bb8000 	.word	0x00bb8000
 8007894:	007a1200 	.word	0x007a1200
 8007898:	03d09000 	.word	0x03d09000
 800789c:	003d0900 	.word	0x003d0900
 80078a0:	0800f958 	.word	0x0800f958

080078a4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d076      	beq.n	8007996 <HAL_TIM_Base_Init+0xf2>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80078ac:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80078ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80078b2:	4604      	mov	r4, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d069      	beq.n	800798c <HAL_TIM_Base_Init+0xe8>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078b8:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80078ba:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078bc:	493c      	ldr	r1, [pc, #240]	; (80079b0 <HAL_TIM_Base_Init+0x10c>)
 80078be:	4e3d      	ldr	r6, [pc, #244]	; (80079b4 <HAL_TIM_Base_Init+0x110>)
 80078c0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80078c4:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 80078c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80078cc:	eba2 0606 	sub.w	r6, r2, r6
  tmpcr1 = TIMx->CR1;
 80078d0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078d2:	fab1 f181 	clz	r1, r1
 80078d6:	fab6 f686 	clz	r6, r6
 80078da:	ea4f 1151 	mov.w	r1, r1, lsr #5
 80078de:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80078e2:	d018      	beq.n	8007916 <HAL_TIM_Base_Init+0x72>
 80078e4:	b9b9      	cbnz	r1, 8007916 <HAL_TIM_Base_Init+0x72>
 80078e6:	4834      	ldr	r0, [pc, #208]	; (80079b8 <HAL_TIM_Base_Init+0x114>)
 80078e8:	4282      	cmp	r2, r0
 80078ea:	d014      	beq.n	8007916 <HAL_TIM_Base_Init+0x72>
 80078ec:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80078f0:	4282      	cmp	r2, r0
 80078f2:	d010      	beq.n	8007916 <HAL_TIM_Base_Init+0x72>
 80078f4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80078f8:	4282      	cmp	r2, r0
 80078fa:	d04e      	beq.n	800799a <HAL_TIM_Base_Init+0xf6>
 80078fc:	2e00      	cmp	r6, #0
 80078fe:	d14c      	bne.n	800799a <HAL_TIM_Base_Init+0xf6>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007900:	4d2e      	ldr	r5, [pc, #184]	; (80079bc <HAL_TIM_Base_Init+0x118>)
 8007902:	482f      	ldr	r0, [pc, #188]	; (80079c0 <HAL_TIM_Base_Init+0x11c>)
 8007904:	4282      	cmp	r2, r0
 8007906:	bf18      	it	ne
 8007908:	42aa      	cmpne	r2, r5
 800790a:	d008      	beq.n	800791e <HAL_TIM_Base_Init+0x7a>
 800790c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007910:	4282      	cmp	r2, r0
 8007912:	d108      	bne.n	8007926 <HAL_TIM_Base_Init+0x82>
 8007914:	e003      	b.n	800791e <HAL_TIM_Base_Init+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800791a:	68a0      	ldr	r0, [r4, #8]
 800791c:	4303      	orrs	r3, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800791e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007922:	6920      	ldr	r0, [r4, #16]
 8007924:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007926:	69a0      	ldr	r0, [r4, #24]
 8007928:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800792c:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800792e:	4303      	orrs	r3, r0

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007930:	6860      	ldr	r0, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007932:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007934:	62d5      	str	r5, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007936:	6290      	str	r0, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007938:	b951      	cbnz	r1, 8007950 <HAL_TIM_Base_Init+0xac>
 800793a:	b94e      	cbnz	r6, 8007950 <HAL_TIM_Base_Init+0xac>
 800793c:	491f      	ldr	r1, [pc, #124]	; (80079bc <HAL_TIM_Base_Init+0x118>)
 800793e:	4b20      	ldr	r3, [pc, #128]	; (80079c0 <HAL_TIM_Base_Init+0x11c>)
 8007940:	429a      	cmp	r2, r3
 8007942:	bf18      	it	ne
 8007944:	428a      	cmpne	r2, r1
 8007946:	d003      	beq.n	8007950 <HAL_TIM_Base_Init+0xac>
 8007948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800794c:	429a      	cmp	r2, r3
 800794e:	d101      	bne.n	8007954 <HAL_TIM_Base_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007950:	6963      	ldr	r3, [r4, #20]
 8007952:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007954:	2301      	movs	r3, #1
  return HAL_OK;
 8007956:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8007958:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800795a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800795e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007962:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007966:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800796a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800796e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007972:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007976:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800797a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800797e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007982:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007986:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800798a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800798c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007990:	f7fa fffa 	bl	8002988 <HAL_TIM_Base_MspInit>
 8007994:	e790      	b.n	80078b8 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8007996:	2001      	movs	r0, #1
}
 8007998:	4770      	bx	lr
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800799a:	480a      	ldr	r0, [pc, #40]	; (80079c4 <HAL_TIM_Base_Init+0x120>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800799c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80079a0:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079a2:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 80079a4:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079a8:	d0b9      	beq.n	800791e <HAL_TIM_Base_Init+0x7a>
 80079aa:	2e00      	cmp	r6, #0
 80079ac:	d1b7      	bne.n	800791e <HAL_TIM_Base_Init+0x7a>
 80079ae:	e7a7      	b.n	8007900 <HAL_TIM_Base_Init+0x5c>
 80079b0:	40010000 	.word	0x40010000
 80079b4:	40010400 	.word	0x40010400
 80079b8:	40000400 	.word	0x40000400
 80079bc:	40014000 	.word	0x40014000
 80079c0:	40014400 	.word	0x40014400
 80079c4:	40000c00 	.word	0x40000c00

080079c8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80079c8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d001      	beq.n	80079d4 <HAL_TIM_Base_Start+0xc>
    return HAL_ERROR;
 80079d0:	2001      	movs	r0, #1
 80079d2:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 80079d4:	2102      	movs	r1, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079d6:	6802      	ldr	r2, [r0, #0]
 80079d8:	4b08      	ldr	r3, [pc, #32]	; (80079fc <HAL_TIM_Base_Start+0x34>)
  htim->State = HAL_TIM_STATE_BUSY;
 80079da:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079de:	6891      	ldr	r1, [r2, #8]
 80079e0:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079e2:	2b06      	cmp	r3, #6
 80079e4:	d008      	beq.n	80079f8 <HAL_TIM_Base_Start+0x30>
 80079e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ea:	d005      	beq.n	80079f8 <HAL_TIM_Base_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 80079ec:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 80079ee:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80079f0:	f043 0301 	orr.w	r3, r3, #1
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	4770      	bx	lr
  return HAL_OK;
 80079f8:	2000      	movs	r0, #0
}
 80079fa:	4770      	bx	lr
 80079fc:	00010007 	.word	0x00010007

08007a00 <HAL_TIM_PeriodElapsedCallback>:
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop

08007a04 <HAL_TIM_OC_DelayElapsedCallback>:
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop

08007a08 <HAL_TIM_IC_CaptureCallback>:
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop

08007a0c <HAL_TIM_PWM_PulseFinishedCallback>:
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop

08007a10 <HAL_TIM_TriggerCallback>:
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop

08007a14 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a14:	6803      	ldr	r3, [r0, #0]
 8007a16:	691a      	ldr	r2, [r3, #16]
 8007a18:	0791      	lsls	r1, r2, #30
{
 8007a1a:	b510      	push	{r4, lr}
 8007a1c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a1e:	d502      	bpl.n	8007a26 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a20:	68da      	ldr	r2, [r3, #12]
 8007a22:	0792      	lsls	r2, r2, #30
 8007a24:	d468      	bmi.n	8007af8 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a26:	691a      	ldr	r2, [r3, #16]
 8007a28:	0752      	lsls	r2, r2, #29
 8007a2a:	d502      	bpl.n	8007a32 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a2c:	68da      	ldr	r2, [r3, #12]
 8007a2e:	0750      	lsls	r0, r2, #29
 8007a30:	d44f      	bmi.n	8007ad2 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a32:	691a      	ldr	r2, [r3, #16]
 8007a34:	0711      	lsls	r1, r2, #28
 8007a36:	d502      	bpl.n	8007a3e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	0712      	lsls	r2, r2, #28
 8007a3c:	d437      	bmi.n	8007aae <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a3e:	691a      	ldr	r2, [r3, #16]
 8007a40:	06d0      	lsls	r0, r2, #27
 8007a42:	d502      	bpl.n	8007a4a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a44:	68da      	ldr	r2, [r3, #12]
 8007a46:	06d1      	lsls	r1, r2, #27
 8007a48:	d41e      	bmi.n	8007a88 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a4a:	691a      	ldr	r2, [r3, #16]
 8007a4c:	07d2      	lsls	r2, r2, #31
 8007a4e:	d502      	bpl.n	8007a56 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a50:	68da      	ldr	r2, [r3, #12]
 8007a52:	07d0      	lsls	r0, r2, #31
 8007a54:	d469      	bmi.n	8007b2a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a56:	691a      	ldr	r2, [r3, #16]
 8007a58:	0611      	lsls	r1, r2, #24
 8007a5a:	d502      	bpl.n	8007a62 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a5c:	68da      	ldr	r2, [r3, #12]
 8007a5e:	0612      	lsls	r2, r2, #24
 8007a60:	d46b      	bmi.n	8007b3a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a62:	691a      	ldr	r2, [r3, #16]
 8007a64:	05d0      	lsls	r0, r2, #23
 8007a66:	d502      	bpl.n	8007a6e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	0611      	lsls	r1, r2, #24
 8007a6c:	d46d      	bmi.n	8007b4a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a6e:	691a      	ldr	r2, [r3, #16]
 8007a70:	0652      	lsls	r2, r2, #25
 8007a72:	d502      	bpl.n	8007a7a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a74:	68da      	ldr	r2, [r3, #12]
 8007a76:	0650      	lsls	r0, r2, #25
 8007a78:	d46f      	bmi.n	8007b5a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a7a:	691a      	ldr	r2, [r3, #16]
 8007a7c:	0691      	lsls	r1, r2, #26
 8007a7e:	d502      	bpl.n	8007a86 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a80:	68da      	ldr	r2, [r3, #12]
 8007a82:	0692      	lsls	r2, r2, #26
 8007a84:	d449      	bmi.n	8007b1a <HAL_TIM_IRQHandler+0x106>
}
 8007a86:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a88:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a8c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8007a8e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a90:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a92:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a94:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a96:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007a9a:	d16f      	bne.n	8007b7c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a9c:	f7ff ffb2 	bl	8007a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f7ff ffb3 	bl	8007a0c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	7722      	strb	r2, [r4, #28]
 8007aac:	e7cd      	b.n	8007a4a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007aae:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ab2:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8007ab4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ab6:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ab8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007aba:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007abc:	079b      	lsls	r3, r3, #30
 8007abe:	d15a      	bne.n	8007b76 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ac0:	f7ff ffa0 	bl	8007a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f7ff ffa1 	bl	8007a0c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aca:	2200      	movs	r2, #0
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	7722      	strb	r2, [r4, #28]
 8007ad0:	e7b5      	b.n	8007a3e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ad2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ad6:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8007ad8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ada:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007adc:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ade:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ae0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007ae4:	d144      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ae6:	f7ff ff8d 	bl	8007a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aea:	4620      	mov	r0, r4
 8007aec:	f7ff ff8e 	bl	8007a0c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af0:	2200      	movs	r2, #0
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	7722      	strb	r2, [r4, #28]
 8007af6:	e79c      	b.n	8007a32 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007af8:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007afc:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007afe:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b00:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b02:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b04:	0799      	lsls	r1, r3, #30
 8007b06:	d130      	bne.n	8007b6a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b08:	f7ff ff7c 	bl	8007a04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f7ff ff7d 	bl	8007a0c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b12:	2200      	movs	r2, #0
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	7722      	strb	r2, [r4, #28]
 8007b18:	e785      	b.n	8007a26 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b1a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8007b1e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b20:	611a      	str	r2, [r3, #16]
}
 8007b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8007b26:	f000 b887 	b.w	8007c38 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b2a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b2e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b30:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b32:	f7ff ff65 	bl	8007a00 <HAL_TIM_PeriodElapsedCallback>
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	e78d      	b.n	8007a56 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8007b3e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b40:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007b42:	f000 f87b 	bl	8007c3c <HAL_TIMEx_BreakCallback>
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	e78b      	b.n	8007a62 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8007b4e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b50:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007b52:	f000 f875 	bl	8007c40 <HAL_TIMEx_Break2Callback>
 8007b56:	6823      	ldr	r3, [r4, #0]
 8007b58:	e789      	b.n	8007a6e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8007b5e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b60:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007b62:	f7ff ff55 	bl	8007a10 <HAL_TIM_TriggerCallback>
 8007b66:	6823      	ldr	r3, [r4, #0]
 8007b68:	e787      	b.n	8007a7a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8007b6a:	f7ff ff4d 	bl	8007a08 <HAL_TIM_IC_CaptureCallback>
 8007b6e:	e7d0      	b.n	8007b12 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8007b70:	f7ff ff4a 	bl	8007a08 <HAL_TIM_IC_CaptureCallback>
 8007b74:	e7bc      	b.n	8007af0 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8007b76:	f7ff ff47 	bl	8007a08 <HAL_TIM_IC_CaptureCallback>
 8007b7a:	e7a6      	b.n	8007aca <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8007b7c:	f7ff ff44 	bl	8007a08 <HAL_TIM_IC_CaptureCallback>
 8007b80:	e791      	b.n	8007aa6 <HAL_TIM_IRQHandler+0x92>
 8007b82:	bf00      	nop

08007b84 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d045      	beq.n	8007c18 <HAL_TIMEx_MasterConfigSynchronization+0x94>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b8c:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b8e:	4a24      	ldr	r2, [pc, #144]	; (8007c20 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
{
 8007b90:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b92:	4e24      	ldr	r6, [pc, #144]	; (8007c24 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007b94:	2502      	movs	r5, #2
  __HAL_LOCK(htim);
 8007b96:	2401      	movs	r4, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	bf18      	it	ne
 8007b9c:	42b3      	cmpne	r3, r6
  htim->State = HAL_TIM_STATE_BUSY;
 8007b9e:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8007ba2:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ba6:	bf08      	it	eq
 8007ba8:	2601      	moveq	r6, #1
  tmpcr2 = htim->Instance->CR2;
 8007baa:	685c      	ldr	r4, [r3, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007bac:	bf18      	it	ne
 8007bae:	2600      	movne	r6, #0
  tmpsmcr = htim->Instance->SMCR;
 8007bb0:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007bb2:	d103      	bne.n	8007bbc <HAL_TIMEx_MasterConfigSynchronization+0x38>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007bb4:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007bb8:	684a      	ldr	r2, [r1, #4]
 8007bba:	4314      	orrs	r4, r2
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bbc:	4a1a      	ldr	r2, [pc, #104]	; (8007c28 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bbe:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bc2:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	bf18      	it	ne
 8007bc8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8007bcc:	f8df c064 	ldr.w	ip, [pc, #100]	; 8007c34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bd0:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bd4:	4f15      	ldr	r7, [pc, #84]	; (8007c2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007bd6:	bf0c      	ite	eq
 8007bd8:	2201      	moveq	r2, #1
 8007bda:	2200      	movne	r2, #0
  htim->Instance->CR2 = tmpcr2;
 8007bdc:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bde:	4563      	cmp	r3, ip
 8007be0:	bf08      	it	eq
 8007be2:	f042 0201 	orreq.w	r2, r2, #1
 8007be6:	4c12      	ldr	r4, [pc, #72]	; (8007c30 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8007be8:	42bb      	cmp	r3, r7
 8007bea:	bf08      	it	eq
 8007bec:	f042 0201 	orreq.w	r2, r2, #1
 8007bf0:	42a3      	cmp	r3, r4
 8007bf2:	bf08      	it	eq
 8007bf4:	f042 0201 	orreq.w	r2, r2, #1
 8007bf8:	b902      	cbnz	r2, 8007bfc <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8007bfa:	b126      	cbz	r6, 8007c06 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bfc:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bfe:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c02:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c04:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8007c06:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007c08:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8007c0a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8007c0e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	bcf0      	pop	{r4, r5, r6, r7}
 8007c16:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007c18:	2202      	movs	r2, #2
}
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	40010400 	.word	0x40010400
 8007c24:	40010000 	.word	0x40010000
 8007c28:	40000400 	.word	0x40000400
 8007c2c:	40000c00 	.word	0x40000c00
 8007c30:	40001800 	.word	0x40001800
 8007c34:	40000800 	.word	0x40000800

08007c38 <HAL_TIMEx_CommutCallback>:
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop

08007c3c <HAL_TIMEx_BreakCallback>:
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop

08007c40 <HAL_TIMEx_Break2Callback>:
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop

08007c44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c48:	461e      	mov	r6, r3
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c4a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8007c4e:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8007c50:	2b20      	cmp	r3, #32
 8007c52:	d14a      	bne.n	8007cea <HAL_UART_Transmit+0xa6>
 8007c54:	4689      	mov	r9, r1
  {
    if ((pData == NULL) || (Size == 0U))
 8007c56:	2900      	cmp	r1, #0
 8007c58:	d04b      	beq.n	8007cf2 <HAL_UART_Transmit+0xae>
 8007c5a:	fab2 f782 	clz	r7, r2
 8007c5e:	9201      	str	r2, [sp, #4]
 8007c60:	097f      	lsrs	r7, r7, #5
 8007c62:	2f00      	cmp	r7, #0
 8007c64:	d145      	bne.n	8007cf2 <HAL_UART_Transmit+0xae>
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8007c66:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8007c6a:	4605      	mov	r5, r0
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d03c      	beq.n	8007cea <HAL_UART_Transmit+0xa6>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c70:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8007c72:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c74:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
    __HAL_LOCK(huart);
 8007c78:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c7c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007c80:	f7fb f854 	bl	8002d2c <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c84:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 8007c86:	9a01      	ldr	r2, [sp, #4]
    tickstart = HAL_GetTick();
 8007c88:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 8007c8e:	f8a5 2054 	strh.w	r2, [r5, #84]	; 0x54
    huart->TxXferCount = Size;
 8007c92:	f8a5 2056 	strh.w	r2, [r5, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c96:	f000 8089 	beq.w	8007dac <HAL_UART_Transmit+0x168>
      pdata16bits = NULL;
    }

    __HAL_UNLOCK(huart);

    while (huart->TxXferCount > 0U)
 8007c9a:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	682c      	ldr	r4, [r5, #0]
    while (huart->TxXferCount > 0U)
 8007ca2:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8007ca4:	f885 207c 	strb.w	r2, [r5, #124]	; 0x7c
    while (huart->TxXferCount > 0U)
 8007ca8:	b1ab      	cbz	r3, 8007cd6 <HAL_UART_Transmit+0x92>
 8007caa:	1c71      	adds	r1, r6, #1
 8007cac:	d125      	bne.n	8007cfa <HAL_UART_Transmit+0xb6>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cae:	69e2      	ldr	r2, [r4, #28]
 8007cb0:	0612      	lsls	r2, r2, #24
 8007cb2:	d5fc      	bpl.n	8007cae <HAL_UART_Transmit+0x6a>
      if (pdata8bits == NULL)
 8007cb4:	f1b9 0f00 	cmp.w	r9, #0
 8007cb8:	d035      	beq.n	8007d26 <HAL_UART_Transmit+0xe2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cba:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007cbe:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8007cc0:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007ccc:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e9      	bne.n	8007caa <HAL_UART_Transmit+0x66>
 8007cd6:	1c71      	adds	r1, r6, #1
 8007cd8:	d12a      	bne.n	8007d30 <HAL_UART_Transmit+0xec>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cda:	69e3      	ldr	r3, [r4, #28]
 8007cdc:	065a      	lsls	r2, r3, #25
 8007cde:	d5fc      	bpl.n	8007cda <HAL_UART_Transmit+0x96>
    huart->gState = HAL_UART_STATE_READY;
 8007ce0:	2320      	movs	r3, #32
    return HAL_OK;
 8007ce2:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8007ce4:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    return HAL_OK;
 8007ce8:	e000      	b.n	8007cec <HAL_UART_Transmit+0xa8>
    return HAL_BUSY;
 8007cea:	2002      	movs	r0, #2
}
 8007cec:	b003      	add	sp, #12
 8007cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8007cf2:	2001      	movs	r0, #1
}
 8007cf4:	b003      	add	sp, #12
 8007cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cfa:	69e3      	ldr	r3, [r4, #28]
 8007cfc:	061b      	lsls	r3, r3, #24
 8007cfe:	d4d9      	bmi.n	8007cb4 <HAL_UART_Transmit+0x70>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d00:	f7fb f814 	bl	8002d2c <HAL_GetTick>
 8007d04:	eba0 0008 	sub.w	r0, r0, r8
 8007d08:	4286      	cmp	r6, r0
 8007d0a:	d33c      	bcc.n	8007d86 <HAL_UART_Transmit+0x142>
 8007d0c:	fab6 f386 	clz	r3, r6
 8007d10:	095b      	lsrs	r3, r3, #5
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d137      	bne.n	8007d86 <HAL_UART_Transmit+0x142>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d16:	682c      	ldr	r4, [r5, #0]
 8007d18:	6822      	ldr	r2, [r4, #0]
 8007d1a:	0752      	lsls	r2, r2, #29
 8007d1c:	d5c5      	bpl.n	8007caa <HAL_UART_Transmit+0x66>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d1e:	69e2      	ldr	r2, [r4, #28]
 8007d20:	0510      	lsls	r0, r2, #20
 8007d22:	d5c2      	bpl.n	8007caa <HAL_UART_Transmit+0x66>
 8007d24:	e019      	b.n	8007d5a <HAL_UART_Transmit+0x116>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d26:	f837 3b02 	ldrh.w	r3, [r7], #2
 8007d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d2e:	e7c6      	b.n	8007cbe <HAL_UART_Transmit+0x7a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d30:	69e3      	ldr	r3, [r4, #28]
 8007d32:	065b      	lsls	r3, r3, #25
 8007d34:	d4d4      	bmi.n	8007ce0 <HAL_UART_Transmit+0x9c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d36:	f7fa fff9 	bl	8002d2c <HAL_GetTick>
 8007d3a:	eba0 0008 	sub.w	r0, r0, r8
 8007d3e:	fab6 f386 	clz	r3, r6
 8007d42:	4286      	cmp	r6, r0
 8007d44:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8007d48:	d31d      	bcc.n	8007d86 <HAL_UART_Transmit+0x142>
 8007d4a:	b9e3      	cbnz	r3, 8007d86 <HAL_UART_Transmit+0x142>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d4c:	682c      	ldr	r4, [r5, #0]
 8007d4e:	6822      	ldr	r2, [r4, #0]
 8007d50:	0757      	lsls	r7, r2, #29
 8007d52:	d5c0      	bpl.n	8007cd6 <HAL_UART_Transmit+0x92>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d54:	69e2      	ldr	r2, [r4, #28]
 8007d56:	0510      	lsls	r0, r2, #20
 8007d58:	d5bd      	bpl.n	8007cd6 <HAL_UART_Transmit+0x92>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d5a:	f44f 6100 	mov.w	r1, #2048	; 0x800

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 8007d5e:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8007d60:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d62:	6221      	str	r1, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007d64:	6821      	ldr	r1, [r4, #0]
 8007d66:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8007d6a:	6021      	str	r1, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6c:	68a1      	ldr	r1, [r4, #8]
 8007d6e:	f021 0101 	bic.w	r1, r1, #1
 8007d72:	60a1      	str	r1, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 8007d74:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d78:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007d7c:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d80:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
 8007d84:	e7b2      	b.n	8007cec <HAL_UART_Transmit+0xa8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007d86:	682b      	ldr	r3, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 8007d88:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8007d8a:	2400      	movs	r4, #0
      return HAL_TIMEOUT;
 8007d8c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d94:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d96:	689a      	ldr	r2, [r3, #8]
 8007d98:	f022 0201 	bic.w	r2, r2, #1
 8007d9c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8007d9e:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
        __HAL_UNLOCK(huart);
 8007da2:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007da6:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
 8007daa:	e79f      	b.n	8007cec <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dac:	692b      	ldr	r3, [r5, #16]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f47f af73 	bne.w	8007c9a <HAL_UART_Transmit+0x56>
 8007db4:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 8007db6:	4699      	mov	r9, r3
 8007db8:	e76f      	b.n	8007c9a <HAL_UART_Transmit+0x56>
 8007dba:	bf00      	nop

08007dbc <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dbc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d13d      	bne.n	8007e40 <HAL_UART_Receive_IT+0x84>
    if ((pData == NULL) || (Size == 0U))
 8007dc4:	2900      	cmp	r1, #0
 8007dc6:	d039      	beq.n	8007e3c <HAL_UART_Receive_IT+0x80>
 8007dc8:	fab2 f382 	clz	r3, r2
 8007dcc:	095b      	lsrs	r3, r3, #5
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d134      	bne.n	8007e3c <HAL_UART_Receive_IT+0x80>
{
 8007dd2:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(huart);
 8007dd4:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
 8007dd8:	2c01      	cmp	r4, #1
 8007dda:	d062      	beq.n	8007ea2 <HAL_UART_Receive_IT+0xe6>
    UART_MASK_COMPUTATION(huart);
 8007ddc:	6884      	ldr	r4, [r0, #8]
    __HAL_LOCK(huart);
 8007dde:	2501      	movs	r5, #1
    huart->pRxBuffPtr  = pData;
 8007de0:	6581      	str	r1, [r0, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8007de2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    __HAL_LOCK(huart);
 8007de6:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->RxXferSize  = Size;
 8007dea:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007dee:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 8007df2:	66c3      	str	r3, [r0, #108]	; 0x6c
 8007df4:	6801      	ldr	r1, [r0, #0]
 8007df6:	6e45      	ldr	r5, [r0, #100]	; 0x64
    UART_MASK_COMPUTATION(huart);
 8007df8:	d024      	beq.n	8007e44 <HAL_UART_Receive_IT+0x88>
 8007dfa:	2c00      	cmp	r4, #0
 8007dfc:	d146      	bne.n	8007e8c <HAL_UART_Receive_IT+0xd0>
 8007dfe:	6903      	ldr	r3, [r0, #16]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d066      	beq.n	8007ed2 <HAL_UART_Receive_IT+0x116>
 8007e04:	237f      	movs	r3, #127	; 0x7f
 8007e06:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e0a:	2400      	movs	r4, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e0c:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e0e:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e12:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e16:	688b      	ldr	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007e18:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e1c:	f043 0301 	orr.w	r3, r3, #1
 8007e20:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007e22:	d020      	beq.n	8007e66 <HAL_UART_Receive_IT+0xaa>
        huart->RxISR = UART_RxISR_8BIT;
 8007e24:	4c31      	ldr	r4, [pc, #196]	; (8007eec <HAL_UART_Receive_IT+0x130>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007e26:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 8007e28:	2300      	movs	r3, #0
 8007e2a:	66c4      	str	r4, [r0, #108]	; 0x6c
 8007e2c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007e30:	f442 7290 	orr.w	r2, r2, #288	; 0x120
    return HAL_OK;
 8007e34:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007e36:	600a      	str	r2, [r1, #0]
}
 8007e38:	bc70      	pop	{r4, r5, r6}
 8007e3a:	4770      	bx	lr
      return HAL_ERROR;
 8007e3c:	2001      	movs	r0, #1
}
 8007e3e:	4770      	bx	lr
    return HAL_BUSY;
 8007e40:	2002      	movs	r0, #2
 8007e42:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8007e44:	6904      	ldr	r4, [r0, #16]
 8007e46:	b374      	cbz	r4, 8007ea6 <HAL_UART_Receive_IT+0xea>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e48:	2622      	movs	r6, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e4a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    UART_MASK_COMPUTATION(huart);
 8007e4e:	24ff      	movs	r4, #255	; 0xff
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007e50:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e54:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e58:	688b      	ldr	r3, [r1, #8]
    UART_MASK_COMPUTATION(huart);
 8007e5a:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5e:	f043 0301 	orr.w	r3, r3, #1
 8007e62:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007e64:	d1de      	bne.n	8007e24 <HAL_UART_Receive_IT+0x68>
 8007e66:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d8da      	bhi.n	8007e24 <HAL_UART_Receive_IT+0x68>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007e6e:	4c20      	ldr	r4, [pc, #128]	; (8007ef0 <HAL_UART_Receive_IT+0x134>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e70:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 8007e72:	2300      	movs	r3, #0
 8007e74:	66c4      	str	r4, [r0, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 8007e7a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    return HAL_OK;
 8007e7e:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e80:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e82:	688b      	ldr	r3, [r1, #8]
 8007e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e88:	608b      	str	r3, [r1, #8]
 8007e8a:	e7d5      	b.n	8007e38 <HAL_UART_Receive_IT+0x7c>
    UART_MASK_COMPUTATION(huart);
 8007e8c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8007e90:	d023      	beq.n	8007eda <HAL_UART_Receive_IT+0x11e>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e92:	2422      	movs	r4, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e94:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    UART_MASK_COMPUTATION(huart);
 8007e98:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e9c:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
 8007ea0:	e7b9      	b.n	8007e16 <HAL_UART_Receive_IT+0x5a>
    return HAL_BUSY;
 8007ea2:	2002      	movs	r0, #2
 8007ea4:	e7c8      	b.n	8007e38 <HAL_UART_Receive_IT+0x7c>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ea6:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea8:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007eac:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    UART_MASK_COMPUTATION(huart);
 8007eb0:	f240 14ff 	movw	r4, #511	; 0x1ff
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007eb4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb8:	688b      	ldr	r3, [r1, #8]
    UART_MASK_COMPUTATION(huart);
 8007eba:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ebe:	f043 0301 	orr.w	r3, r3, #1
 8007ec2:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007ec4:	d103      	bne.n	8007ece <HAL_UART_Receive_IT+0x112>
 8007ec6:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d90c      	bls.n	8007ee8 <HAL_UART_Receive_IT+0x12c>
        huart->RxISR = UART_RxISR_16BIT;
 8007ece:	4c09      	ldr	r4, [pc, #36]	; (8007ef4 <HAL_UART_Receive_IT+0x138>)
 8007ed0:	e7a9      	b.n	8007e26 <HAL_UART_Receive_IT+0x6a>
    UART_MASK_COMPUTATION(huart);
 8007ed2:	23ff      	movs	r3, #255	; 0xff
 8007ed4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007ed8:	e797      	b.n	8007e0a <HAL_UART_Receive_IT+0x4e>
 8007eda:	6903      	ldr	r3, [r0, #16]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d091      	beq.n	8007e04 <HAL_UART_Receive_IT+0x48>
 8007ee0:	233f      	movs	r3, #63	; 0x3f
 8007ee2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007ee6:	e790      	b.n	8007e0a <HAL_UART_Receive_IT+0x4e>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007ee8:	4c03      	ldr	r4, [pc, #12]	; (8007ef8 <HAL_UART_Receive_IT+0x13c>)
 8007eea:	e7c1      	b.n	8007e70 <HAL_UART_Receive_IT+0xb4>
 8007eec:	08007f01 	.word	0x08007f01
 8007ef0:	08007fbd 	.word	0x08007fbd
 8007ef4:	08007f61 	.word	0x08007f61
 8007ef8:	08008075 	.word	0x08008075

08007efc <HAL_UART_TxCpltCallback>:
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop

08007f00 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f00:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8007f04:	6802      	ldr	r2, [r0, #0]
 8007f06:	2922      	cmp	r1, #34	; 0x22
{
 8007f08:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f0a:	d004      	beq.n	8007f16 <UART_RxISR_8BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f0c:	6993      	ldr	r3, [r2, #24]
 8007f0e:	f043 0308 	orr.w	r3, r3, #8
 8007f12:	6193      	str	r3, [r2, #24]
  }
}
 8007f14:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f16:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f18:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 8007f1c:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8007f1e:	4022      	ands	r2, r4
 8007f20:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8007f22:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8007f26:	6d81      	ldr	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007f28:	3a01      	subs	r2, #1
    huart->pRxBuffPtr++;
 8007f2a:	3101      	adds	r1, #1
    huart->RxXferCount--;
 8007f2c:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8007f2e:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007f30:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007f34:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8007f38:	b292      	uxth	r2, r2
 8007f3a:	2a00      	cmp	r2, #0
 8007f3c:	d1ea      	bne.n	8007f14 <UART_RxISR_8BIT+0x14>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f3e:	6801      	ldr	r1, [r0, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8007f40:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f42:	680c      	ldr	r4, [r1, #0]
 8007f44:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8007f48:	600c      	str	r4, [r1, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4a:	688c      	ldr	r4, [r1, #8]
 8007f4c:	f024 0401 	bic.w	r4, r4, #1
 8007f50:	608c      	str	r4, [r1, #8]
      huart->RxISR = NULL;
 8007f52:	66c2      	str	r2, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 8007f54:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
      HAL_UART_RxCpltCallback(huart);
 8007f58:	f7f9 fed2 	bl	8001d00 <HAL_UART_RxCpltCallback>
}
 8007f5c:	bd38      	pop	{r3, r4, r5, pc}
 8007f5e:	bf00      	nop

08007f60 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f60:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8007f64:	6802      	ldr	r2, [r0, #0]
 8007f66:	2922      	cmp	r1, #34	; 0x22
{
 8007f68:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f6a:	d004      	beq.n	8007f76 <UART_RxISR_16BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f6c:	6993      	ldr	r3, [r2, #24]
 8007f6e:	f043 0308 	orr.w	r3, r3, #8
 8007f72:	6193      	str	r3, [r2, #24]
  }
}
 8007f74:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f76:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f78:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
 8007f7c:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8007f7e:	4029      	ands	r1, r5
 8007f80:	f824 1b02 	strh.w	r1, [r4], #2
    huart->RxXferCount--;
 8007f84:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 8007f88:	6584      	str	r4, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007f8a:	3901      	subs	r1, #1
 8007f8c:	b289      	uxth	r1, r1
 8007f8e:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007f92:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 8007f96:	b289      	uxth	r1, r1
 8007f98:	2900      	cmp	r1, #0
 8007f9a:	d1eb      	bne.n	8007f74 <UART_RxISR_16BIT+0x14>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f9c:	6814      	ldr	r4, [r2, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8007f9e:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fa0:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8007fa4:	6014      	str	r4, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa6:	6894      	ldr	r4, [r2, #8]
 8007fa8:	f024 0401 	bic.w	r4, r4, #1
 8007fac:	6094      	str	r4, [r2, #8]
      huart->RxISR = NULL;
 8007fae:	66c1      	str	r1, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 8007fb0:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
      HAL_UART_RxCpltCallback(huart);
 8007fb4:	f7f9 fea4 	bl	8001d00 <HAL_UART_RxCpltCallback>
}
 8007fb8:	bd38      	pop	{r3, r4, r5, pc}
 8007fba:	bf00      	nop

08007fbc <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fbc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8007fc0:	2b22      	cmp	r3, #34	; 0x22
 8007fc2:	d005      	beq.n	8007fd0 <UART_RxISR_8BIT_FIFOEN+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fc4:	6802      	ldr	r2, [r0, #0]
 8007fc6:	6993      	ldr	r3, [r2, #24]
 8007fc8:	f043 0308 	orr.w	r3, r3, #8
 8007fcc:	6193      	str	r3, [r2, #24]
 8007fce:	4770      	bx	lr
{
 8007fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8007fd4:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 8007fd8:	2d00      	cmp	r5, #0
 8007fda:	d043      	beq.n	8008064 <UART_RxISR_8BIT_FIFOEN+0xa8>
 8007fdc:	4604      	mov	r4, r0
 8007fde:	f890 8060 	ldrb.w	r8, [r0, #96]	; 0x60
        huart->RxState = HAL_UART_STATE_READY;
 8007fe2:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fe4:	4e21      	ldr	r6, [pc, #132]	; (800806c <UART_RxISR_8BIT_FIFOEN+0xb0>)
 8007fe6:	e002      	b.n	8007fee <UART_RxISR_8BIT_FIFOEN+0x32>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8007fe8:	3d01      	subs	r5, #1
 8007fea:	b2ad      	uxth	r5, r5
 8007fec:	b32d      	cbz	r5, 800803a <UART_RxISR_8BIT_FIFOEN+0x7e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fee:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ff0:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ff4:	ea08 0303 	and.w	r3, r8, r3
 8007ff8:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8007ffa:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr++;
 8007ffe:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008000:	3b01      	subs	r3, #1
      huart->pRxBuffPtr++;
 8008002:	3201      	adds	r2, #1
      huart->RxXferCount--;
 8008004:	b29b      	uxth	r3, r3
      huart->pRxBuffPtr++;
 8008006:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008008:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 800800c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008010:	b29b      	uxth	r3, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1e8      	bne.n	8007fe8 <UART_RxISR_8BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008016:	6822      	ldr	r2, [r4, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008018:	3d01      	subs	r5, #1
        HAL_UART_RxCpltCallback(huart);
 800801a:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800801c:	6811      	ldr	r1, [r2, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800801e:	b2ad      	uxth	r5, r5
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008020:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008024:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008026:	6891      	ldr	r1, [r2, #8]
 8008028:	4031      	ands	r1, r6
 800802a:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800802c:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8008030:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8008032:	f7f9 fe65 	bl	8001d00 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008036:	2d00      	cmp	r5, #0
 8008038:	d1d9      	bne.n	8007fee <UART_RxISR_8BIT_FIFOEN+0x32>
    rxdatacount = huart->RxXferCount;
 800803a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800803e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008040:	b173      	cbz	r3, 8008060 <UART_RxISR_8BIT_FIFOEN+0xa4>
 8008042:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8008046:	429a      	cmp	r2, r3
 8008048:	d90a      	bls.n	8008060 <UART_RxISR_8BIT_FIFOEN+0xa4>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800804a:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_8BIT;
 800804c:	4908      	ldr	r1, [pc, #32]	; (8008070 <UART_RxISR_8BIT_FIFOEN+0xb4>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800804e:	689a      	ldr	r2, [r3, #8]
 8008050:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008054:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008056:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8008058:	66e1      	str	r1, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800805a:	f042 0220 	orr.w	r2, r2, #32
 800805e:	601a      	str	r2, [r3, #0]
  }
}
 8008060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rxdatacount = huart->RxXferCount;
 8008064:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8008068:	e7fa      	b.n	8008060 <UART_RxISR_8BIT_FIFOEN+0xa4>
 800806a:	bf00      	nop
 800806c:	effffffe 	.word	0xeffffffe
 8008070:	08007f01 	.word	0x08007f01

08008074 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008074:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8008078:	2b22      	cmp	r3, #34	; 0x22
 800807a:	d005      	beq.n	8008088 <UART_RxISR_16BIT_FIFOEN+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800807c:	6802      	ldr	r2, [r0, #0]
 800807e:	6993      	ldr	r3, [r2, #24]
 8008080:	f043 0308 	orr.w	r3, r3, #8
 8008084:	6193      	str	r3, [r2, #24]
 8008086:	4770      	bx	lr
{
 8008088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800808c:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 8008090:	2d00      	cmp	r5, #0
 8008092:	d041      	beq.n	8008118 <UART_RxISR_16BIT_FIFOEN+0xa4>
 8008094:	4604      	mov	r4, r0
  uint16_t  uhMask = huart->Mask;
 8008096:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
        huart->RxState = HAL_UART_STATE_READY;
 800809a:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800809c:	4e20      	ldr	r6, [pc, #128]	; (8008120 <UART_RxISR_16BIT_FIFOEN+0xac>)
 800809e:	e002      	b.n	80080a6 <UART_RxISR_16BIT_FIFOEN+0x32>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80080a0:	3d01      	subs	r5, #1
 80080a2:	b2ad      	uxth	r5, r5
 80080a4:	b31d      	cbz	r5, 80080ee <UART_RxISR_16BIT_FIFOEN+0x7a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080a6:	6821      	ldr	r1, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 80080a8:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080aa:	6a4b      	ldr	r3, [r1, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 80080ac:	ea08 0303 	and.w	r3, r8, r3
 80080b0:	f822 3b02 	strh.w	r3, [r2], #2
      huart->RxXferCount--;
 80080b4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 80080b8:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80080ba:	3b01      	subs	r3, #1
 80080bc:	b29b      	uxth	r3, r3
 80080be:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 80080c2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1e9      	bne.n	80080a0 <UART_RxISR_16BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080cc:	680a      	ldr	r2, [r1, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80080ce:	3d01      	subs	r5, #1
        HAL_UART_RxCpltCallback(huart);
 80080d0:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80080d6:	b2ad      	uxth	r5, r5
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080d8:	600a      	str	r2, [r1, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080da:	688a      	ldr	r2, [r1, #8]
 80080dc:	4032      	ands	r2, r6
 80080de:	608a      	str	r2, [r1, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80080e0:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 80080e4:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 80080e6:	f7f9 fe0b 	bl	8001d00 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80080ea:	2d00      	cmp	r5, #0
 80080ec:	d1db      	bne.n	80080a6 <UART_RxISR_16BIT_FIFOEN+0x32>
    rxdatacount = huart->RxXferCount;
 80080ee:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80080f2:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80080f4:	b173      	cbz	r3, 8008114 <UART_RxISR_16BIT_FIFOEN+0xa0>
 80080f6:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d90a      	bls.n	8008114 <UART_RxISR_16BIT_FIFOEN+0xa0>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080fe:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8008100:	4908      	ldr	r1, [pc, #32]	; (8008124 <UART_RxISR_16BIT_FIFOEN+0xb0>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008108:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800810a:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 800810c:	66e1      	str	r1, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800810e:	f042 0220 	orr.w	r2, r2, #32
 8008112:	601a      	str	r2, [r3, #0]
  }
}
 8008114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rxdatacount = huart->RxXferCount;
 8008118:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800811c:	e7fa      	b.n	8008114 <UART_RxISR_16BIT_FIFOEN+0xa0>
 800811e:	bf00      	nop
 8008120:	effffffe 	.word	0xeffffffe
 8008124:	08007f61 	.word	0x08007f61

08008128 <HAL_UART_ErrorCallback>:
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop

0800812c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800812c:	6802      	ldr	r2, [r0, #0]
{
 800812e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008132:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008134:	f640 050f 	movw	r5, #2063	; 0x80f
{
 8008138:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800813a:	6810      	ldr	r0, [r2, #0]
  if (errorflags == 0U)
 800813c:	422b      	tst	r3, r5
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800813e:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8008140:	d070      	beq.n	8008224 <HAL_UART_IRQHandler+0xf8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008142:	4d73      	ldr	r5, [pc, #460]	; (8008310 <HAL_UART_IRQHandler+0x1e4>)
 8008144:	400d      	ands	r5, r1
 8008146:	f000 808f 	beq.w	8008268 <HAL_UART_IRQHandler+0x13c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800814a:	07df      	lsls	r7, r3, #31
 800814c:	d509      	bpl.n	8008162 <HAL_UART_IRQHandler+0x36>
 800814e:	05c6      	lsls	r6, r0, #23
 8008150:	d507      	bpl.n	8008162 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008152:	2601      	movs	r6, #1
 8008154:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008156:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 800815a:	f046 0601 	orr.w	r6, r6, #1
 800815e:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008162:	079f      	lsls	r7, r3, #30
 8008164:	f003 0604 	and.w	r6, r3, #4
 8008168:	f140 8093 	bpl.w	8008292 <HAL_UART_IRQHandler+0x166>
 800816c:	07cf      	lsls	r7, r1, #31
 800816e:	d50a      	bpl.n	8008186 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008170:	2702      	movs	r7, #2
 8008172:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008174:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
 8008178:	f047 0704 	orr.w	r7, r7, #4
 800817c:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008180:	2e00      	cmp	r6, #0
 8008182:	f040 808c 	bne.w	800829e <HAL_UART_IRQHandler+0x172>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008186:	071f      	lsls	r7, r3, #28
 8008188:	d505      	bpl.n	8008196 <HAL_UART_IRQHandler+0x6a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800818a:	0686      	lsls	r6, r0, #26
 800818c:	f100 8097 	bmi.w	80082be <HAL_UART_IRQHandler+0x192>
 8008190:	2d00      	cmp	r5, #0
 8008192:	f040 8094 	bne.w	80082be <HAL_UART_IRQHandler+0x192>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008196:	051f      	lsls	r7, r3, #20
 8008198:	d50a      	bpl.n	80081b0 <HAL_UART_IRQHandler+0x84>
 800819a:	0146      	lsls	r6, r0, #5
 800819c:	d508      	bpl.n	80081b0 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800819e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80081a2:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081a4:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80081a8:	f045 0520 	orr.w	r5, r5, #32
 80081ac:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081b0:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80081b4:	2d00      	cmp	r5, #0
 80081b6:	d06a      	beq.n	800828e <HAL_UART_IRQHandler+0x162>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081b8:	069d      	lsls	r5, r3, #26
 80081ba:	d507      	bpl.n	80081cc <HAL_UART_IRQHandler+0xa0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081bc:	0680      	lsls	r0, r0, #26
 80081be:	f140 808b 	bpl.w	80082d8 <HAL_UART_IRQHandler+0x1ac>
        if (huart->RxISR != NULL)
 80081c2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80081c4:	b113      	cbz	r3, 80081cc <HAL_UART_IRQHandler+0xa0>
          huart->RxISR(huart);
 80081c6:	4620      	mov	r0, r4
 80081c8:	4798      	blx	r3
 80081ca:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80081cc:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081d0:	6891      	ldr	r1, [r2, #8]
 80081d2:	064f      	lsls	r7, r1, #25
 80081d4:	d403      	bmi.n	80081de <HAL_UART_IRQHandler+0xb2>
 80081d6:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 80081da:	f000 8093 	beq.w	8008304 <HAL_UART_IRQHandler+0x1d8>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081de:	6811      	ldr	r1, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80081e0:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081e2:	4b4c      	ldr	r3, [pc, #304]	; (8008314 <HAL_UART_IRQHandler+0x1e8>)
  huart->RxISR = NULL;
 80081e4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081e6:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80081ea:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081ec:	6891      	ldr	r1, [r2, #8]
 80081ee:	400b      	ands	r3, r1
 80081f0:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80081f2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f6:	6893      	ldr	r3, [r2, #8]
  huart->RxISR = NULL;
 80081f8:	66e0      	str	r0, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081fa:	065e      	lsls	r6, r3, #25
 80081fc:	d568      	bpl.n	80082d0 <HAL_UART_IRQHandler+0x1a4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081fe:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8008200:	6fa1      	ldr	r1, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008206:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8008208:	2900      	cmp	r1, #0
 800820a:	d061      	beq.n	80082d0 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800820c:	4b42      	ldr	r3, [pc, #264]	; (8008318 <HAL_UART_IRQHandler+0x1ec>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800820e:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008210:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008212:	f7fc fb11 	bl	8004838 <HAL_DMA_Abort_IT>
 8008216:	2800      	cmp	r0, #0
 8008218:	d039      	beq.n	800828e <HAL_UART_IRQHandler+0x162>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800821a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
}
 800821c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008220:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008222:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008224:	069f      	lsls	r7, r3, #26
 8008226:	d509      	bpl.n	800823c <HAL_UART_IRQHandler+0x110>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008228:	0686      	lsls	r6, r0, #26
 800822a:	d505      	bpl.n	8008238 <HAL_UART_IRQHandler+0x10c>
      if (huart->RxISR != NULL)
 800822c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800822e:	b373      	cbz	r3, 800828e <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 8008230:	4620      	mov	r0, r4
}
 8008232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8008236:	4718      	bx	r3
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008238:	00cd      	lsls	r5, r1, #3
 800823a:	d4f7      	bmi.n	800822c <HAL_UART_IRQHandler+0x100>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800823c:	02dd      	lsls	r5, r3, #11
 800823e:	d409      	bmi.n	8008254 <HAL_UART_IRQHandler+0x128>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008240:	061e      	lsls	r6, r3, #24
 8008242:	d51a      	bpl.n	800827a <HAL_UART_IRQHandler+0x14e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008244:	0605      	lsls	r5, r0, #24
 8008246:	d516      	bpl.n	8008276 <HAL_UART_IRQHandler+0x14a>
    if (huart->TxISR != NULL)
 8008248:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800824a:	b303      	cbz	r3, 800828e <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 800824c:	4620      	mov	r0, r4
}
 800824e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8008252:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008254:	024f      	lsls	r7, r1, #9
 8008256:	d5f3      	bpl.n	8008240 <HAL_UART_IRQHandler+0x114>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008258:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800825c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800825e:	6213      	str	r3, [r2, #32]
}
 8008260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8008264:	f000 bc00 	b.w	8008a68 <HAL_UARTEx_WakeupCallback>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008268:	4e2c      	ldr	r6, [pc, #176]	; (800831c <HAL_UART_IRQHandler+0x1f0>)
 800826a:	4230      	tst	r0, r6
 800826c:	d0e6      	beq.n	800823c <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800826e:	07df      	lsls	r7, r3, #31
 8008270:	f57f af77 	bpl.w	8008162 <HAL_UART_IRQHandler+0x36>
 8008274:	e76b      	b.n	800814e <HAL_UART_IRQHandler+0x22>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008276:	020f      	lsls	r7, r1, #8
 8008278:	d4e6      	bmi.n	8008248 <HAL_UART_IRQHandler+0x11c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800827a:	065e      	lsls	r6, r3, #25
 800827c:	d501      	bpl.n	8008282 <HAL_UART_IRQHandler+0x156>
 800827e:	0645      	lsls	r5, r0, #25
 8008280:	d42e      	bmi.n	80082e0 <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008282:	0219      	lsls	r1, r3, #8
 8008284:	d414      	bmi.n	80082b0 <HAL_UART_IRQHandler+0x184>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008286:	01db      	lsls	r3, r3, #7
 8008288:	d501      	bpl.n	800828e <HAL_UART_IRQHandler+0x162>
 800828a:	2800      	cmp	r0, #0
 800828c:	db35      	blt.n	80082fa <HAL_UART_IRQHandler+0x1ce>
}
 800828e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008292:	2e00      	cmp	r6, #0
 8008294:	f43f af77 	beq.w	8008186 <HAL_UART_IRQHandler+0x5a>
 8008298:	07ce      	lsls	r6, r1, #31
 800829a:	f57f af74 	bpl.w	8008186 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800829e:	2604      	movs	r6, #4
 80082a0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082a2:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 80082a6:	f046 0602 	orr.w	r6, r6, #2
 80082aa:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 80082ae:	e76a      	b.n	8008186 <HAL_UART_IRQHandler+0x5a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80082b0:	0042      	lsls	r2, r0, #1
 80082b2:	d5e8      	bpl.n	8008286 <HAL_UART_IRQHandler+0x15a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80082b4:	4620      	mov	r0, r4
}
 80082b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80082ba:	f000 bbd9 	b.w	8008a70 <HAL_UARTEx_TxFifoEmptyCallback>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082be:	2508      	movs	r5, #8
 80082c0:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082c2:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80082c6:	f045 0508 	orr.w	r5, r5, #8
 80082ca:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 80082ce:	e762      	b.n	8008196 <HAL_UART_IRQHandler+0x6a>
            HAL_UART_ErrorCallback(huart);
 80082d0:	4620      	mov	r0, r4
 80082d2:	f7ff ff29 	bl	8008128 <HAL_UART_ErrorCallback>
 80082d6:	e7da      	b.n	800828e <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082d8:	00cb      	lsls	r3, r1, #3
 80082da:	f57f af77 	bpl.w	80081cc <HAL_UART_IRQHandler+0xa0>
 80082de:	e770      	b.n	80081c2 <HAL_UART_IRQHandler+0x96>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082e0:	6813      	ldr	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80082e2:	2520      	movs	r5, #32
  huart->TxISR = NULL;
 80082e4:	2100      	movs	r1, #0
  HAL_UART_TxCpltCallback(huart);
 80082e6:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ec:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80082ee:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 80082f2:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 80082f4:	f7ff fe02 	bl	8007efc <HAL_UART_TxCpltCallback>
 80082f8:	e7c9      	b.n	800828e <HAL_UART_IRQHandler+0x162>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80082fa:	4620      	mov	r0, r4
}
 80082fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008300:	f000 bbb4 	b.w	8008a6c <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8008304:	4620      	mov	r0, r4
 8008306:	f7ff ff0f 	bl	8008128 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800830a:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 800830e:	e7be      	b.n	800828e <HAL_UART_IRQHandler+0x162>
 8008310:	10000001 	.word	0x10000001
 8008314:	effffffe 	.word	0xeffffffe
 8008318:	08008321 	.word	0x08008321
 800831c:	04000120 	.word	0x04000120

08008320 <UART_DMAAbortOnError>:
{
 8008320:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 8008322:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008324:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8008326:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  HAL_UART_ErrorCallback(huart);
 800832a:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 800832c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8008330:	f7ff fefa 	bl	8008128 <HAL_UART_ErrorCallback>
}
 8008334:	bd08      	pop	{r3, pc}
 8008336:	bf00      	nop

08008338 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008338:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800833a:	07da      	lsls	r2, r3, #31
{
 800833c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800833e:	d506      	bpl.n	800834e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008340:	6801      	ldr	r1, [r0, #0]
 8008342:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008344:	684a      	ldr	r2, [r1, #4]
 8008346:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800834a:	4322      	orrs	r2, r4
 800834c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800834e:	079c      	lsls	r4, r3, #30
 8008350:	d506      	bpl.n	8008360 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008352:	6801      	ldr	r1, [r0, #0]
 8008354:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8008356:	684a      	ldr	r2, [r1, #4]
 8008358:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800835c:	4322      	orrs	r2, r4
 800835e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008360:	0759      	lsls	r1, r3, #29
 8008362:	d506      	bpl.n	8008372 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008364:	6801      	ldr	r1, [r0, #0]
 8008366:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008368:	684a      	ldr	r2, [r1, #4]
 800836a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800836e:	4322      	orrs	r2, r4
 8008370:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008372:	071a      	lsls	r2, r3, #28
 8008374:	d506      	bpl.n	8008384 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008376:	6801      	ldr	r1, [r0, #0]
 8008378:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800837a:	684a      	ldr	r2, [r1, #4]
 800837c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008380:	4322      	orrs	r2, r4
 8008382:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008384:	06dc      	lsls	r4, r3, #27
 8008386:	d506      	bpl.n	8008396 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008388:	6801      	ldr	r1, [r0, #0]
 800838a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800838c:	688a      	ldr	r2, [r1, #8]
 800838e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008392:	4322      	orrs	r2, r4
 8008394:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008396:	0699      	lsls	r1, r3, #26
 8008398:	d506      	bpl.n	80083a8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800839a:	6801      	ldr	r1, [r0, #0]
 800839c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800839e:	688a      	ldr	r2, [r1, #8]
 80083a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083a4:	4322      	orrs	r2, r4
 80083a6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083a8:	065a      	lsls	r2, r3, #25
 80083aa:	d50a      	bpl.n	80083c2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083ac:	6801      	ldr	r1, [r0, #0]
 80083ae:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80083b0:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083b2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083b6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80083ba:	ea42 0204 	orr.w	r2, r2, r4
 80083be:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083c0:	d00b      	beq.n	80083da <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083c2:	061b      	lsls	r3, r3, #24
 80083c4:	d506      	bpl.n	80083d4 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083c6:	6802      	ldr	r2, [r0, #0]
 80083c8:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80083ca:	6853      	ldr	r3, [r2, #4]
 80083cc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80083d0:	430b      	orrs	r3, r1
 80083d2:	6053      	str	r3, [r2, #4]
}
 80083d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083d8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083da:	684a      	ldr	r2, [r1, #4]
 80083dc:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80083de:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80083e2:	4322      	orrs	r2, r4
 80083e4:	604a      	str	r2, [r1, #4]
 80083e6:	e7ec      	b.n	80083c2 <UART_AdvFeatureConfig+0x8a>

080083e8 <HAL_UART_Init>:
  if (huart == NULL)
 80083e8:	2800      	cmp	r0, #0
 80083ea:	f000 80d2 	beq.w	8008592 <HAL_UART_Init+0x1aa>
  if (huart->gState == HAL_UART_STATE_RESET)
 80083ee:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 80083f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083f6:	4604      	mov	r4, r0
 80083f8:	b087      	sub	sp, #28
  if (huart->gState == HAL_UART_STATE_RESET)
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d058      	beq.n	80084b0 <HAL_UART_Init+0xc8>
  __HAL_UART_DISABLE(huart);
 80083fe:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008400:	2024      	movs	r0, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008402:	6921      	ldr	r1, [r4, #16]
 8008404:	68a2      	ldr	r2, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 8008406:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800840a:	430a      	orrs	r2, r1
  __HAL_UART_DISABLE(huart);
 800840c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800840e:	6960      	ldr	r0, [r4, #20]
 8008410:	69e1      	ldr	r1, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8008412:	f025 0501 	bic.w	r5, r5, #1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008416:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008418:	48a1      	ldr	r0, [pc, #644]	; (80086a0 <HAL_UART_Init+0x2b8>)
  __HAL_UART_DISABLE(huart);
 800841a:	601d      	str	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800841c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800841e:	681e      	ldr	r6, [r3, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8008420:	6e65      	ldr	r5, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008422:	4030      	ands	r0, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008424:	68e7      	ldr	r7, [r4, #12]
  tmpreg |= (uint32_t)huart->FifoMode;
 8008426:	432a      	orrs	r2, r5
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008428:	f8d4 c018 	ldr.w	ip, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800842c:	4e9d      	ldr	r6, [pc, #628]	; (80086a4 <HAL_UART_Init+0x2bc>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800842e:	4302      	orrs	r2, r0
 8008430:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008432:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008434:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800843c:	ea42 0207 	orr.w	r2, r2, r7
 8008440:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008442:	f000 808b 	beq.w	800855c <HAL_UART_Init+0x174>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008446:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8008448:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800844a:	4897      	ldr	r0, [pc, #604]	; (80086a8 <HAL_UART_Init+0x2c0>)
    tmpreg |= huart->Init.OneBitSampling;
 800844c:	ea4c 0202 	orr.w	r2, ip, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008450:	4030      	ands	r0, r6
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008452:	4e96      	ldr	r6, [pc, #600]	; (80086ac <HAL_UART_Init+0x2c4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008454:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008456:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008458:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800845a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845c:	f022 020f 	bic.w	r2, r2, #15
 8008460:	ea42 0205 	orr.w	r2, r2, r5
 8008464:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008466:	d028      	beq.n	80084ba <HAL_UART_Init+0xd2>
 8008468:	4a91      	ldr	r2, [pc, #580]	; (80086b0 <HAL_UART_Init+0x2c8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	f000 810e 	beq.w	800868c <HAL_UART_Init+0x2a4>
 8008470:	4a90      	ldr	r2, [pc, #576]	; (80086b4 <HAL_UART_Init+0x2cc>)
 8008472:	4293      	cmp	r3, r2
 8008474:	f000 8100 	beq.w	8008678 <HAL_UART_Init+0x290>
 8008478:	4a8f      	ldr	r2, [pc, #572]	; (80086b8 <HAL_UART_Init+0x2d0>)
 800847a:	4293      	cmp	r3, r2
 800847c:	f000 829e 	beq.w	80089bc <HAL_UART_Init+0x5d4>
 8008480:	4a8e      	ldr	r2, [pc, #568]	; (80086bc <HAL_UART_Init+0x2d4>)
 8008482:	4293      	cmp	r3, r2
 8008484:	f000 82a4 	beq.w	80089d0 <HAL_UART_Init+0x5e8>
 8008488:	4a8d      	ldr	r2, [pc, #564]	; (80086c0 <HAL_UART_Init+0x2d8>)
 800848a:	4293      	cmp	r3, r2
 800848c:	f000 82aa 	beq.w	80089e4 <HAL_UART_Init+0x5fc>
 8008490:	4a8c      	ldr	r2, [pc, #560]	; (80086c4 <HAL_UART_Init+0x2dc>)
 8008492:	4293      	cmp	r3, r2
 8008494:	f000 82c5 	beq.w	8008a22 <HAL_UART_Init+0x63a>
 8008498:	4a8b      	ldr	r2, [pc, #556]	; (80086c8 <HAL_UART_Init+0x2e0>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d16f      	bne.n	800857e <HAL_UART_Init+0x196>
 800849e:	4b8b      	ldr	r3, [pc, #556]	; (80086cc <HAL_UART_Init+0x2e4>)
 80084a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	2b05      	cmp	r3, #5
 80084a8:	d869      	bhi.n	800857e <HAL_UART_Init+0x196>
 80084aa:	4a89      	ldr	r2, [pc, #548]	; (80086d0 <HAL_UART_Init+0x2e8>)
 80084ac:	5cd3      	ldrb	r3, [r2, r3]
 80084ae:	e00c      	b.n	80084ca <HAL_UART_Init+0xe2>
    huart->Lock = HAL_UNLOCKED;
 80084b0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80084b4:	f7fa fa8c 	bl	80029d0 <HAL_UART_MspInit>
 80084b8:	e7a1      	b.n	80083fe <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084ba:	4b84      	ldr	r3, [pc, #528]	; (80086cc <HAL_UART_Init+0x2e4>)
 80084bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084c2:	2b28      	cmp	r3, #40	; 0x28
 80084c4:	d85b      	bhi.n	800857e <HAL_UART_Init+0x196>
 80084c6:	4a83      	ldr	r2, [pc, #524]	; (80086d4 <HAL_UART_Init+0x2ec>)
 80084c8:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084ca:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80084ce:	f000 810f 	beq.w	80086f0 <HAL_UART_Init+0x308>
    switch (clocksource)
 80084d2:	2b40      	cmp	r3, #64	; 0x40
 80084d4:	d853      	bhi.n	800857e <HAL_UART_Init+0x196>
 80084d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80084da:	0209      	.short	0x0209
 80084dc:	0052020c 	.word	0x0052020c
 80084e0:	02040052 	.word	0x02040052
 80084e4:	00520052 	.word	0x00520052
 80084e8:	01fc0052 	.word	0x01fc0052
 80084ec:	00520052 	.word	0x00520052
 80084f0:	00520052 	.word	0x00520052
 80084f4:	00520052 	.word	0x00520052
 80084f8:	01d00052 	.word	0x01d00052
 80084fc:	00520052 	.word	0x00520052
 8008500:	00520052 	.word	0x00520052
 8008504:	00520052 	.word	0x00520052
 8008508:	00520052 	.word	0x00520052
 800850c:	00520052 	.word	0x00520052
 8008510:	00520052 	.word	0x00520052
 8008514:	00520052 	.word	0x00520052
 8008518:	02120052 	.word	0x02120052
 800851c:	00520052 	.word	0x00520052
 8008520:	00520052 	.word	0x00520052
 8008524:	00520052 	.word	0x00520052
 8008528:	00520052 	.word	0x00520052
 800852c:	00520052 	.word	0x00520052
 8008530:	00520052 	.word	0x00520052
 8008534:	00520052 	.word	0x00520052
 8008538:	00520052 	.word	0x00520052
 800853c:	00520052 	.word	0x00520052
 8008540:	00520052 	.word	0x00520052
 8008544:	00520052 	.word	0x00520052
 8008548:	00520052 	.word	0x00520052
 800854c:	00520052 	.word	0x00520052
 8008550:	00520052 	.word	0x00520052
 8008554:	00520052 	.word	0x00520052
 8008558:	020f0052 	.word	0x020f0052
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800855c:	6898      	ldr	r0, [r3, #8]
 800855e:	4a52      	ldr	r2, [pc, #328]	; (80086a8 <HAL_UART_Init+0x2c0>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008560:	495a      	ldr	r1, [pc, #360]	; (80086cc <HAL_UART_Init+0x2e4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008562:	4002      	ands	r2, r0
 8008564:	ea42 020c 	orr.w	r2, r2, ip
 8008568:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800856a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856c:	f022 020f 	bic.w	r2, r2, #15
 8008570:	432a      	orrs	r2, r5
 8008572:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008574:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8008576:	f003 0307 	and.w	r3, r3, #7
 800857a:	2b05      	cmp	r3, #5
 800857c:	d90b      	bls.n	8008596 <HAL_UART_Init+0x1ae>
  huart->RxISR = NULL;
 800857e:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8008580:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    return HAL_ERROR;
 8008584:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 8008586:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8008588:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
}
 800858c:	b007      	add	sp, #28
 800858e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_ERROR;
 8008592:	2001      	movs	r0, #1
}
 8008594:	4770      	bx	lr
    switch (clocksource)
 8008596:	4a50      	ldr	r2, [pc, #320]	; (80086d8 <HAL_UART_Init+0x2f0>)
 8008598:	5cd3      	ldrb	r3, [r2, r3]
 800859a:	2b08      	cmp	r3, #8
 800859c:	f000 823c 	beq.w	8008a18 <HAL_UART_Init+0x630>
 80085a0:	f240 822a 	bls.w	80089f8 <HAL_UART_Init+0x610>
 80085a4:	2b20      	cmp	r3, #32
 80085a6:	f000 81ac 	beq.w	8008902 <HAL_UART_Init+0x51a>
 80085aa:	2b40      	cmp	r3, #64	; 0x40
 80085ac:	f000 8245 	beq.w	8008a3a <HAL_UART_Init+0x652>
 80085b0:	2b10      	cmp	r3, #16
 80085b2:	d1e4      	bne.n	800857e <HAL_UART_Init+0x196>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085b4:	680b      	ldr	r3, [r1, #0]
 80085b6:	069f      	lsls	r7, r3, #26
 80085b8:	f140 8242 	bpl.w	8008a40 <HAL_UART_Init+0x658>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085bc:	680b      	ldr	r3, [r1, #0]
 80085be:	4847      	ldr	r0, [pc, #284]	; (80086dc <HAL_UART_Init+0x2f4>)
 80085c0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80085c4:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80085c6:	4b46      	ldr	r3, [pc, #280]	; (80086e0 <HAL_UART_Init+0x2f8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085c8:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80085ca:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085ce:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80085d2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085d6:	428b      	cmp	r3, r1
 80085d8:	d3d1      	bcc.n	800857e <HAL_UART_Init+0x196>
 80085da:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80085de:	d8ce      	bhi.n	800857e <HAL_UART_Init+0x196>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085e0:	2500      	movs	r5, #0
 80085e2:	2300      	movs	r3, #0
 80085e4:	0877      	lsrs	r7, r6, #1
 80085e6:	4629      	mov	r1, r5
 80085e8:	f7f7 fed2 	bl	8000390 <__aeabi_uldivmod>
 80085ec:	4632      	mov	r2, r6
 80085ee:	ea4f 2901 	mov.w	r9, r1, lsl #8
 80085f2:	462b      	mov	r3, r5
 80085f4:	ea4f 2800 	mov.w	r8, r0, lsl #8
 80085f8:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 80085fc:	eb18 0007 	adds.w	r0, r8, r7
 8008600:	f149 0100 	adc.w	r1, r9, #0
 8008604:	f7f7 fec4 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008608:	4b36      	ldr	r3, [pc, #216]	; (80086e4 <HAL_UART_Init+0x2fc>)
 800860a:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800860e:	429a      	cmp	r2, r3
 8008610:	d8b5      	bhi.n	800857e <HAL_UART_Init+0x196>
          huart->Instance->BRR = usartdiv;
 8008612:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8008614:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8008618:	60d0      	str	r0, [r2, #12]
  huart->NbRxDataToProcess = 1;
 800861a:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800861c:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008620:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008622:	2b00      	cmp	r3, #0
 8008624:	f040 8151 	bne.w	80088ca <HAL_UART_Init+0x4e2>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008628:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800862a:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008634:	689a      	ldr	r2, [r3, #8]
 8008636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800863a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	f042 0201 	orr.w	r2, r2, #1
 8008642:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008644:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  tickstart = HAL_GetTick();
 8008648:	f7fa fb70 	bl	8002d2c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800864c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800864e:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	0711      	lsls	r1, r2, #28
 8008654:	f100 80d4 	bmi.w	8008800 <HAL_UART_Init+0x418>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	0750      	lsls	r0, r2, #29
 800865c:	f100 80f9 	bmi.w	8008852 <HAL_UART_Init+0x46a>
  __HAL_UNLOCK(huart);
 8008660:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008662:	2220      	movs	r2, #32
  return HAL_OK;
 8008664:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8008666:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800866a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800866e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 8008672:	b007      	add	sp, #28
 8008674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008678:	4b14      	ldr	r3, [pc, #80]	; (80086cc <HAL_UART_Init+0x2e4>)
 800867a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800867c:	f003 0307 	and.w	r3, r3, #7
 8008680:	2b05      	cmp	r3, #5
 8008682:	f63f af7c 	bhi.w	800857e <HAL_UART_Init+0x196>
 8008686:	4a18      	ldr	r2, [pc, #96]	; (80086e8 <HAL_UART_Init+0x300>)
 8008688:	5cd3      	ldrb	r3, [r2, r3]
 800868a:	e71e      	b.n	80084ca <HAL_UART_Init+0xe2>
 800868c:	4b0f      	ldr	r3, [pc, #60]	; (80086cc <HAL_UART_Init+0x2e4>)
 800868e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008690:	f003 0307 	and.w	r3, r3, #7
 8008694:	2b05      	cmp	r3, #5
 8008696:	f63f af72 	bhi.w	800857e <HAL_UART_Init+0x196>
 800869a:	4a14      	ldr	r2, [pc, #80]	; (80086ec <HAL_UART_Init+0x304>)
 800869c:	5cd3      	ldrb	r3, [r2, r3]
 800869e:	e714      	b.n	80084ca <HAL_UART_Init+0xe2>
 80086a0:	cfff69f3 	.word	0xcfff69f3
 80086a4:	58000c00 	.word	0x58000c00
 80086a8:	11fff4ff 	.word	0x11fff4ff
 80086ac:	40011000 	.word	0x40011000
 80086b0:	40004400 	.word	0x40004400
 80086b4:	40004800 	.word	0x40004800
 80086b8:	40004c00 	.word	0x40004c00
 80086bc:	40005000 	.word	0x40005000
 80086c0:	40011400 	.word	0x40011400
 80086c4:	40007800 	.word	0x40007800
 80086c8:	40007c00 	.word	0x40007c00
 80086cc:	58024400 	.word	0x58024400
 80086d0:	0800f99c 	.word	0x0800f99c
 80086d4:	0800f970 	.word	0x0800f970
 80086d8:	0800f9a4 	.word	0x0800f9a4
 80086dc:	03d09000 	.word	0x03d09000
 80086e0:	0800f9ac 	.word	0x0800f9ac
 80086e4:	000ffcff 	.word	0x000ffcff
 80086e8:	0800f99c 	.word	0x0800f99c
 80086ec:	0800f99c 	.word	0x0800f99c
    switch (clocksource)
 80086f0:	2b40      	cmp	r3, #64	; 0x40
 80086f2:	f63f af44 	bhi.w	800857e <HAL_UART_Init+0x196>
 80086f6:	a201      	add	r2, pc, #4	; (adr r2, 80086fc <HAL_UART_Init+0x314>)
 80086f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fc:	08008973 	.word	0x08008973
 8008700:	0800896d 	.word	0x0800896d
 8008704:	0800857f 	.word	0x0800857f
 8008708:	0800857f 	.word	0x0800857f
 800870c:	08008979 	.word	0x08008979
 8008710:	0800857f 	.word	0x0800857f
 8008714:	0800857f 	.word	0x0800857f
 8008718:	0800857f 	.word	0x0800857f
 800871c:	0800895f 	.word	0x0800895f
 8008720:	0800857f 	.word	0x0800857f
 8008724:	0800857f 	.word	0x0800857f
 8008728:	0800857f 	.word	0x0800857f
 800872c:	0800857f 	.word	0x0800857f
 8008730:	0800857f 	.word	0x0800857f
 8008734:	0800857f 	.word	0x0800857f
 8008738:	0800857f 	.word	0x0800857f
 800873c:	08008907 	.word	0x08008907
 8008740:	0800857f 	.word	0x0800857f
 8008744:	0800857f 	.word	0x0800857f
 8008748:	0800857f 	.word	0x0800857f
 800874c:	0800857f 	.word	0x0800857f
 8008750:	0800857f 	.word	0x0800857f
 8008754:	0800857f 	.word	0x0800857f
 8008758:	0800857f 	.word	0x0800857f
 800875c:	0800857f 	.word	0x0800857f
 8008760:	0800857f 	.word	0x0800857f
 8008764:	0800857f 	.word	0x0800857f
 8008768:	0800857f 	.word	0x0800857f
 800876c:	0800857f 	.word	0x0800857f
 8008770:	0800857f 	.word	0x0800857f
 8008774:	0800857f 	.word	0x0800857f
 8008778:	0800857f 	.word	0x0800857f
 800877c:	08008983 	.word	0x08008983
 8008780:	0800857f 	.word	0x0800857f
 8008784:	0800857f 	.word	0x0800857f
 8008788:	0800857f 	.word	0x0800857f
 800878c:	0800857f 	.word	0x0800857f
 8008790:	0800857f 	.word	0x0800857f
 8008794:	0800857f 	.word	0x0800857f
 8008798:	0800857f 	.word	0x0800857f
 800879c:	0800857f 	.word	0x0800857f
 80087a0:	0800857f 	.word	0x0800857f
 80087a4:	0800857f 	.word	0x0800857f
 80087a8:	0800857f 	.word	0x0800857f
 80087ac:	0800857f 	.word	0x0800857f
 80087b0:	0800857f 	.word	0x0800857f
 80087b4:	0800857f 	.word	0x0800857f
 80087b8:	0800857f 	.word	0x0800857f
 80087bc:	0800857f 	.word	0x0800857f
 80087c0:	0800857f 	.word	0x0800857f
 80087c4:	0800857f 	.word	0x0800857f
 80087c8:	0800857f 	.word	0x0800857f
 80087cc:	0800857f 	.word	0x0800857f
 80087d0:	0800857f 	.word	0x0800857f
 80087d4:	0800857f 	.word	0x0800857f
 80087d8:	0800857f 	.word	0x0800857f
 80087dc:	0800857f 	.word	0x0800857f
 80087e0:	0800857f 	.word	0x0800857f
 80087e4:	0800857f 	.word	0x0800857f
 80087e8:	0800857f 	.word	0x0800857f
 80087ec:	0800857f 	.word	0x0800857f
 80087f0:	0800857f 	.word	0x0800857f
 80087f4:	0800857f 	.word	0x0800857f
 80087f8:	0800857f 	.word	0x0800857f
 80087fc:	08008987 	.word	0x08008987
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008800:	69dd      	ldr	r5, [r3, #28]
 8008802:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8008806:	f47f af27 	bne.w	8008658 <HAL_UART_Init+0x270>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800880a:	f7fa fa8f 	bl	8002d2c <HAL_GetTick>
 800880e:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008810:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008812:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8008816:	f080 80c0 	bcs.w	800899a <HAL_UART_Init+0x5b2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	0752      	lsls	r2, r2, #29
 800881e:	d5ef      	bpl.n	8008800 <HAL_UART_Init+0x418>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008820:	69da      	ldr	r2, [r3, #28]
 8008822:	0517      	lsls	r7, r2, #20
 8008824:	d5ec      	bpl.n	8008800 <HAL_UART_Init+0x418>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008826:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 800882a:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800882c:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800882e:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008830:	6819      	ldr	r1, [r3, #0]
 8008832:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8008836:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008838:	6899      	ldr	r1, [r3, #8]
 800883a:	f021 0101 	bic.w	r1, r1, #1
 800883e:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8008840:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8008844:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008848:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800884c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8008850:	e69c      	b.n	800858c <HAL_UART_Init+0x1a4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008852:	69dd      	ldr	r5, [r3, #28]
 8008854:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8008858:	f47f af02 	bne.w	8008660 <HAL_UART_Init+0x278>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800885c:	f7fa fa66 	bl	8002d2c <HAL_GetTick>
 8008860:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008862:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008864:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8008868:	f080 8097 	bcs.w	800899a <HAL_UART_Init+0x5b2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	0751      	lsls	r1, r2, #29
 8008870:	d5ef      	bpl.n	8008852 <HAL_UART_Init+0x46a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008872:	69da      	ldr	r2, [r3, #28]
 8008874:	0512      	lsls	r2, r2, #20
 8008876:	d5ec      	bpl.n	8008852 <HAL_UART_Init+0x46a>
 8008878:	e7d5      	b.n	8008826 <HAL_UART_Init+0x43e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800887a:	4b73      	ldr	r3, [pc, #460]	; (8008a48 <HAL_UART_Init+0x660>)
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	0690      	lsls	r0, r2, #26
 8008880:	f140 80d9 	bpl.w	8008a36 <HAL_UART_Init+0x64e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4871      	ldr	r0, [pc, #452]	; (8008a4c <HAL_UART_Init+0x664>)
 8008888:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800888c:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800888e:	4b70      	ldr	r3, [pc, #448]	; (8008a50 <HAL_UART_Init+0x668>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008890:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008894:	6862      	ldr	r2, [r4, #4]
 8008896:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800889a:	fbb0 f3f3 	udiv	r3, r0, r3
 800889e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80088a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80088a6:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088a8:	f1a3 0210 	sub.w	r2, r3, #16
 80088ac:	428a      	cmp	r2, r1
 80088ae:	f63f ae66 	bhi.w	800857e <HAL_UART_Init+0x196>
        huart->Instance->BRR = usartdiv;
 80088b2:	6820      	ldr	r0, [r4, #0]
  huart->NbTxDataToProcess = 1;
 80088b4:	2200      	movs	r2, #0
  huart->NbRxDataToProcess = 1;
 80088b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        huart->Instance->BRR = usartdiv;
 80088ba:	60c3      	str	r3, [r0, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->RxISR = NULL;
 80088be:	6722      	str	r2, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 80088c0:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f43f aeaf 	beq.w	8008628 <HAL_UART_Init+0x240>
    UART_AdvFeatureConfig(huart);
 80088ca:	4620      	mov	r0, r4
 80088cc:	f7ff fd34 	bl	8008338 <UART_AdvFeatureConfig>
 80088d0:	e6aa      	b.n	8008628 <HAL_UART_Init+0x240>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088d2:	a803      	add	r0, sp, #12
 80088d4:	f7fe fda8 	bl	8007428 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088d8:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80088da:	2800      	cmp	r0, #0
 80088dc:	d056      	beq.n	800898c <HAL_UART_Init+0x5a4>
 80088de:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80088e0:	e7d5      	b.n	800888e <HAL_UART_Init+0x4a6>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088e2:	4668      	mov	r0, sp
 80088e4:	f7fe fd08 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088e8:	9801      	ldr	r0, [sp, #4]
 80088ea:	e7f6      	b.n	80088da <HAL_UART_Init+0x4f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80088ec:	f7fd fd3e 	bl	800636c <HAL_RCC_GetPCLK1Freq>
 80088f0:	e7f3      	b.n	80088da <HAL_UART_Init+0x4f2>
        pclk = HAL_RCC_GetPCLK2Freq();
 80088f2:	f7fd fdeb 	bl	80064cc <HAL_RCC_GetPCLK2Freq>
 80088f6:	e7f0      	b.n	80088da <HAL_UART_Init+0x4f2>
        pclk = (uint32_t) LSE_VALUE;
 80088f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80088fc:	e7c7      	b.n	800888e <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) CSI_VALUE;
 80088fe:	4855      	ldr	r0, [pc, #340]	; (8008a54 <HAL_UART_Init+0x66c>)
 8008900:	e7c5      	b.n	800888e <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) CSI_VALUE;
 8008902:	4854      	ldr	r0, [pc, #336]	; (8008a54 <HAL_UART_Init+0x66c>)
 8008904:	e65f      	b.n	80085c6 <HAL_UART_Init+0x1de>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008906:	4b50      	ldr	r3, [pc, #320]	; (8008a48 <HAL_UART_Init+0x660>)
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	0696      	lsls	r6, r2, #26
 800890c:	f140 809a 	bpl.w	8008a44 <HAL_UART_Init+0x65c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	484e      	ldr	r0, [pc, #312]	; (8008a4c <HAL_UART_Init+0x664>)
 8008914:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008918:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800891a:	4b4d      	ldr	r3, [pc, #308]	; (8008a50 <HAL_UART_Init+0x668>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800891c:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008920:	6862      	ldr	r2, [r4, #4]
 8008922:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]
 8008926:	0853      	lsrs	r3, r2, #1
 8008928:	fbb0 f0f5 	udiv	r0, r0, r5
 800892c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008930:	fbb3 f3f2 	udiv	r3, r3, r2
 8008934:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008936:	f1a2 0010 	sub.w	r0, r2, #16
 800893a:	4288      	cmp	r0, r1
 800893c:	f63f ae1f 	bhi.w	800857e <HAL_UART_Init+0x196>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008940:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008944:	f3c2 0242 	ubfx	r2, r2, #1, #3
  huart->NbTxDataToProcess = 1;
 8008948:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 800894a:	6825      	ldr	r5, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800894c:	b29b      	uxth	r3, r3
  huart->NbRxDataToProcess = 1;
 800894e:	f04f 1001 	mov.w	r0, #65537	; 0x10001
        huart->Instance->BRR = brrtemp;
 8008952:	4313      	orrs	r3, r2
 8008954:	60eb      	str	r3, [r5, #12]
  huart->RxISR = NULL;
 8008956:	6721      	str	r1, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 8008958:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
 800895c:	e660      	b.n	8008620 <HAL_UART_Init+0x238>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800895e:	a803      	add	r0, sp, #12
 8008960:	f7fe fd62 	bl	8007428 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008964:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8008966:	b188      	cbz	r0, 800898c <HAL_UART_Init+0x5a4>
 8008968:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800896a:	e7d6      	b.n	800891a <HAL_UART_Init+0x532>
        pclk = HAL_RCC_GetPCLK2Freq();
 800896c:	f7fd fdae 	bl	80064cc <HAL_RCC_GetPCLK2Freq>
 8008970:	e7f9      	b.n	8008966 <HAL_UART_Init+0x57e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008972:	f7fd fcfb 	bl	800636c <HAL_RCC_GetPCLK1Freq>
 8008976:	e7f6      	b.n	8008966 <HAL_UART_Init+0x57e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008978:	4668      	mov	r0, sp
 800897a:	f7fe fcbd 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800897e:	9801      	ldr	r0, [sp, #4]
 8008980:	e7f1      	b.n	8008966 <HAL_UART_Init+0x57e>
        pclk = (uint32_t) CSI_VALUE;
 8008982:	4834      	ldr	r0, [pc, #208]	; (8008a54 <HAL_UART_Init+0x66c>)
 8008984:	e7c9      	b.n	800891a <HAL_UART_Init+0x532>
        pclk = (uint32_t) LSE_VALUE;
 8008986:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800898a:	e7c6      	b.n	800891a <HAL_UART_Init+0x532>
  huart->RxISR = NULL;
 800898c:	2300      	movs	r3, #0
 800898e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8008992:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8008994:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
 8008998:	e642      	b.n	8008620 <HAL_UART_Init+0x238>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800899a:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 800899c:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 800899e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80089a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80089a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a6:	689a      	ldr	r2, [r3, #8]
 80089a8:	f022 0201 	bic.w	r2, r2, #1
 80089ac:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80089ae:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 80089b2:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80089b6:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 80089ba:	e5e7      	b.n	800858c <HAL_UART_Init+0x1a4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089bc:	4b22      	ldr	r3, [pc, #136]	; (8008a48 <HAL_UART_Init+0x660>)
 80089be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c0:	f003 0307 	and.w	r3, r3, #7
 80089c4:	2b05      	cmp	r3, #5
 80089c6:	f63f adda 	bhi.w	800857e <HAL_UART_Init+0x196>
 80089ca:	4a23      	ldr	r2, [pc, #140]	; (8008a58 <HAL_UART_Init+0x670>)
 80089cc:	5cd3      	ldrb	r3, [r2, r3]
 80089ce:	e57c      	b.n	80084ca <HAL_UART_Init+0xe2>
 80089d0:	4b1d      	ldr	r3, [pc, #116]	; (8008a48 <HAL_UART_Init+0x660>)
 80089d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d4:	f003 0307 	and.w	r3, r3, #7
 80089d8:	2b05      	cmp	r3, #5
 80089da:	f63f add0 	bhi.w	800857e <HAL_UART_Init+0x196>
 80089de:	4a1f      	ldr	r2, [pc, #124]	; (8008a5c <HAL_UART_Init+0x674>)
 80089e0:	5cd3      	ldrb	r3, [r2, r3]
 80089e2:	e572      	b.n	80084ca <HAL_UART_Init+0xe2>
 80089e4:	4b18      	ldr	r3, [pc, #96]	; (8008a48 <HAL_UART_Init+0x660>)
 80089e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089ec:	2b28      	cmp	r3, #40	; 0x28
 80089ee:	f63f adc6 	bhi.w	800857e <HAL_UART_Init+0x196>
 80089f2:	4a1b      	ldr	r2, [pc, #108]	; (8008a60 <HAL_UART_Init+0x678>)
 80089f4:	5cd3      	ldrb	r3, [r2, r3]
 80089f6:	e568      	b.n	80084ca <HAL_UART_Init+0xe2>
    switch (clocksource)
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d00a      	beq.n	8008a12 <HAL_UART_Init+0x62a>
 80089fc:	2b04      	cmp	r3, #4
 80089fe:	f47f adbe 	bne.w	800857e <HAL_UART_Init+0x196>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a02:	4668      	mov	r0, sp
 8008a04:	f7fe fc78 	bl	80072f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a08:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	d0be      	beq.n	800898c <HAL_UART_Init+0x5a4>
 8008a0e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008a10:	e5d9      	b.n	80085c6 <HAL_UART_Init+0x1de>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a12:	f7fe fc5f 	bl	80072d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a16:	e7f8      	b.n	8008a0a <HAL_UART_Init+0x622>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a18:	a803      	add	r0, sp, #12
 8008a1a:	f7fe fd05 	bl	8007428 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a1e:	9804      	ldr	r0, [sp, #16]
 8008a20:	e7f3      	b.n	8008a0a <HAL_UART_Init+0x622>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a22:	4b09      	ldr	r3, [pc, #36]	; (8008a48 <HAL_UART_Init+0x660>)
 8008a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a26:	f003 0307 	and.w	r3, r3, #7
 8008a2a:	2b05      	cmp	r3, #5
 8008a2c:	f63f ada7 	bhi.w	800857e <HAL_UART_Init+0x196>
 8008a30:	4a0c      	ldr	r2, [pc, #48]	; (8008a64 <HAL_UART_Init+0x67c>)
 8008a32:	5cd3      	ldrb	r3, [r2, r3]
 8008a34:	e549      	b.n	80084ca <HAL_UART_Init+0xe2>
          pclk = (uint32_t) HSI_VALUE;
 8008a36:	4805      	ldr	r0, [pc, #20]	; (8008a4c <HAL_UART_Init+0x664>)
 8008a38:	e729      	b.n	800888e <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) LSE_VALUE;
 8008a3a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008a3e:	e5c2      	b.n	80085c6 <HAL_UART_Init+0x1de>
          pclk = (uint32_t) HSI_VALUE;
 8008a40:	4802      	ldr	r0, [pc, #8]	; (8008a4c <HAL_UART_Init+0x664>)
 8008a42:	e5c0      	b.n	80085c6 <HAL_UART_Init+0x1de>
          pclk = (uint32_t) HSI_VALUE;
 8008a44:	4801      	ldr	r0, [pc, #4]	; (8008a4c <HAL_UART_Init+0x664>)
 8008a46:	e768      	b.n	800891a <HAL_UART_Init+0x532>
 8008a48:	58024400 	.word	0x58024400
 8008a4c:	03d09000 	.word	0x03d09000
 8008a50:	0800f9ac 	.word	0x0800f9ac
 8008a54:	003d0900 	.word	0x003d0900
 8008a58:	0800f99c 	.word	0x0800f99c
 8008a5c:	0800f99c 	.word	0x0800f99c
 8008a60:	0800f970 	.word	0x0800f970
 8008a64:	0800f99c 	.word	0x0800f99c

08008a68 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop

08008a6c <HAL_UARTEx_RxFifoFullCallback>:
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop

08008a70 <HAL_UARTEx_TxFifoEmptyCallback>:
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop

08008a74 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a74:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8008a78:	2a01      	cmp	r2, #1
 8008a7a:	d017      	beq.n	8008aac <HAL_UARTEx_DisableFifoMode+0x38>
 8008a7c:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8008a7e:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a80:	2100      	movs	r1, #0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a82:	681a      	ldr	r2, [r3, #0]
{
 8008a84:	b470      	push	{r4, r5, r6}
  huart->gState = HAL_UART_STATE_BUSY;
 8008a86:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8008a8a:	2620      	movs	r6, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a8c:	6814      	ldr	r4, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8008a8e:	4608      	mov	r0, r1
  __HAL_UART_DISABLE(huart);
 8008a90:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a92:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8008a96:	f025 0501 	bic.w	r5, r5, #1
 8008a9a:	6015      	str	r5, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a9c:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a9e:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008aa0:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8008aa4:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8008aa8:	bc70      	pop	{r4, r5, r6}
 8008aaa:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008aac:	2002      	movs	r0, #2
}
 8008aae:	4770      	bx	lr

08008ab0 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ab0:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8008ab4:	2a01      	cmp	r2, #1
 8008ab6:	d046      	beq.n	8008b46 <HAL_UARTEx_SetTxFifoThreshold+0x96>
 8008ab8:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8008aba:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008abc:	681a      	ldr	r2, [r3, #0]
{
 8008abe:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8008ac0:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
{
 8008ac4:	b084      	sub	sp, #16
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ac6:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ac8:	6810      	ldr	r0, [r2, #0]
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008aca:	4d20      	ldr	r5, [pc, #128]	; (8008b4c <HAL_UARTEx_SetTxFifoThreshold+0x9c>)
  __HAL_UART_DISABLE(huart);
 8008acc:	f020 0001 	bic.w	r0, r0, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008ad0:	4e1f      	ldr	r6, [pc, #124]	; (8008b50 <HAL_UARTEx_SetTxFifoThreshold+0xa0>)
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008ad2:	9500      	str	r5, [sp, #0]
 8008ad4:	f240 1507 	movw	r5, #263	; 0x107
  __HAL_UART_DISABLE(huart);
 8008ad8:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ada:	6890      	ldr	r0, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008adc:	9501      	str	r5, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008ade:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ae2:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008ae6:	9602      	str	r6, [sp, #8]
 8008ae8:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008aec:	4301      	orrs	r1, r0

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008aee:	6e58      	ldr	r0, [r3, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008af0:	9503      	str	r5, [sp, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008af2:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008af4:	b320      	cbz	r0, 8008b40 <HAL_UARTEx_SetTxFifoThreshold+0x90>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008af6:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008af8:	a904      	add	r1, sp, #16
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008afa:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008afc:	f3c5 6542 	ubfx	r5, r5, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008b00:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008b04:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008b06:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008b0a:	f815 1c10 	ldrb.w	r1, [r5, #-16]
 8008b0e:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008b12:	0100      	lsls	r0, r0, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008b14:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008b16:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008b1a:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008b1e:	fb90 f0f5 	sdiv	r0, r0, r5
 8008b22:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8008b26:	2100      	movs	r1, #0
 8008b28:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8008b2c:	2520      	movs	r5, #32
  return HAL_OK;
 8008b2e:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b30:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008b32:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8008b36:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8008b3a:	b004      	add	sp, #16
 8008b3c:	bcf0      	pop	{r4, r5, r6, r7}
 8008b3e:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8008b40:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8008b42:	4608      	mov	r0, r1
 8008b44:	e7ed      	b.n	8008b22 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 8008b46:	2002      	movs	r0, #2
}
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	03010101 	.word	0x03010101
 8008b50:	04020408 	.word	0x04020408

08008b54 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8008b54:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8008b58:	2a01      	cmp	r2, #1
 8008b5a:	d046      	beq.n	8008bea <HAL_UARTEx_SetRxFifoThreshold+0x96>
 8008b5c:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8008b5e:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b60:	681a      	ldr	r2, [r3, #0]
{
 8008b62:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8008b64:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
{
 8008b68:	b084      	sub	sp, #16
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b6a:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008b6c:	6810      	ldr	r0, [r2, #0]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008b6e:	4d20      	ldr	r5, [pc, #128]	; (8008bf0 <HAL_UARTEx_SetRxFifoThreshold+0x9c>)
  __HAL_UART_DISABLE(huart);
 8008b70:	f020 0001 	bic.w	r0, r0, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008b74:	4e1f      	ldr	r6, [pc, #124]	; (8008bf4 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008b76:	9500      	str	r5, [sp, #0]
 8008b78:	f240 1507 	movw	r5, #263	; 0x107
  __HAL_UART_DISABLE(huart);
 8008b7c:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b7e:	6890      	ldr	r0, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008b80:	9501      	str	r5, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008b82:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b86:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008b8a:	9602      	str	r6, [sp, #8]
 8008b8c:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b90:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b92:	6e58      	ldr	r0, [r3, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008b94:	9503      	str	r5, [sp, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b96:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b98:	b320      	cbz	r0, 8008be4 <HAL_UARTEx_SetRxFifoThreshold+0x90>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b9a:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008b9c:	a904      	add	r1, sp, #16
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b9e:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008ba0:	f3c5 6542 	ubfx	r5, r5, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008ba4:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008ba8:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008baa:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008bae:	f815 1c10 	ldrb.w	r1, [r5, #-16]
 8008bb2:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008bb6:	0100      	lsls	r0, r0, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008bb8:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008bba:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008bbe:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008bc2:	fb90 f0f5 	sdiv	r0, r0, r5
 8008bc6:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8008bca:	2100      	movs	r1, #0
 8008bcc:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8008bd0:	2520      	movs	r5, #32
  return HAL_OK;
 8008bd2:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bd4:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008bd6:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8008bda:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8008bde:	b004      	add	sp, #16
 8008be0:	bcf0      	pop	{r4, r5, r6, r7}
 8008be2:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8008be4:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8008be6:	4608      	mov	r0, r1
 8008be8:	e7ed      	b.n	8008bc6 <HAL_UARTEx_SetRxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 8008bea:	2002      	movs	r0, #2
}
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	03010101 	.word	0x03010101
 8008bf4:	04020408 	.word	0x04020408

08008bf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	b430      	push	{r4, r5}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008bfc:	9d08      	ldr	r5, [sp, #32]
{
 8008bfe:	ac03      	add	r4, sp, #12
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c00:	2d01      	cmp	r5, #1
{
 8008c02:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c06:	d131      	bne.n	8008c6c <USB_CoreInit+0x74>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c08:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008c0a:	4b2e      	ldr	r3, [pc, #184]	; (8008cc4 <USB_CoreInit+0xcc>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 8008c10:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c12:	6382      	str	r2, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 8008c14:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008c16:	68c2      	ldr	r2, [r0, #12]
 8008c18:	ea03 0302 	and.w	r3, r3, r2
 8008c1c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008c1e:	68c3      	ldr	r3, [r0, #12]
 8008c20:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008c24:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8008c26:	d044      	beq.n	8008cb2 <USB_CoreInit+0xba>
{
 8008c28:	4b27      	ldr	r3, [pc, #156]	; (8008cc8 <USB_CoreInit+0xd0>)
 8008c2a:	e001      	b.n	8008c30 <USB_CoreInit+0x38>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	d045      	beq.n	8008cbc <USB_CoreInit+0xc4>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c30:	6902      	ldr	r2, [r0, #16]
 8008c32:	2a00      	cmp	r2, #0
 8008c34:	dafa      	bge.n	8008c2c <USB_CoreInit+0x34>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c36:	6903      	ldr	r3, [r0, #16]
 8008c38:	4a23      	ldr	r2, [pc, #140]	; (8008cc8 <USB_CoreInit+0xd0>)
 8008c3a:	f043 0301 	orr.w	r3, r3, #1
 8008c3e:	6103      	str	r3, [r0, #16]
 8008c40:	e001      	b.n	8008c46 <USB_CoreInit+0x4e>

  do
  {
    if (++count > 200000U)
 8008c42:	3a01      	subs	r2, #1
 8008c44:	d03a      	beq.n	8008cbc <USB_CoreInit+0xc4>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c46:	6903      	ldr	r3, [r0, #16]
 8008c48:	f013 0301 	ands.w	r3, r3, #1
 8008c4c:	d1f9      	bne.n	8008c42 <USB_CoreInit+0x4a>
  if (cfg.dma_enable == 1U)
 8008c4e:	9a06      	ldr	r2, [sp, #24]
 8008c50:	2a01      	cmp	r2, #1
 8008c52:	d107      	bne.n	8008c64 <USB_CoreInit+0x6c>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c54:	6882      	ldr	r2, [r0, #8]
 8008c56:	f042 0206 	orr.w	r2, r2, #6
 8008c5a:	6082      	str	r2, [r0, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008c5c:	6882      	ldr	r2, [r0, #8]
 8008c5e:	f042 0220 	orr.w	r2, r2, #32
 8008c62:	6082      	str	r2, [r0, #8]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	bc30      	pop	{r4, r5}
 8008c68:	b004      	add	sp, #16
 8008c6a:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c6c:	68c2      	ldr	r2, [r0, #12]
 8008c6e:	4b16      	ldr	r3, [pc, #88]	; (8008cc8 <USB_CoreInit+0xd0>)
 8008c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c74:	60c2      	str	r2, [r0, #12]
 8008c76:	e001      	b.n	8008c7c <USB_CoreInit+0x84>
    if (++count > 200000U)
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	d021      	beq.n	8008cc0 <USB_CoreInit+0xc8>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c7c:	6902      	ldr	r2, [r0, #16]
 8008c7e:	2a00      	cmp	r2, #0
 8008c80:	dafa      	bge.n	8008c78 <USB_CoreInit+0x80>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c82:	6903      	ldr	r3, [r0, #16]
 8008c84:	4a10      	ldr	r2, [pc, #64]	; (8008cc8 <USB_CoreInit+0xd0>)
 8008c86:	f043 0301 	orr.w	r3, r3, #1
 8008c8a:	6103      	str	r3, [r0, #16]
 8008c8c:	e001      	b.n	8008c92 <USB_CoreInit+0x9a>
    if (++count > 200000U)
 8008c8e:	3a01      	subs	r2, #1
 8008c90:	d016      	beq.n	8008cc0 <USB_CoreInit+0xc8>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c92:	6903      	ldr	r3, [r0, #16]
 8008c94:	f013 0301 	ands.w	r3, r3, #1
 8008c98:	d1f9      	bne.n	8008c8e <USB_CoreInit+0x96>
    if (cfg.battery_charging_enable == 0U)
 8008c9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c9c:	b922      	cbnz	r2, 8008ca8 <USB_CoreInit+0xb0>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c9e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008ca0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008ca4:	6382      	str	r2, [r0, #56]	; 0x38
 8008ca6:	e7d2      	b.n	8008c4e <USB_CoreInit+0x56>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ca8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008caa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008cae:	6382      	str	r2, [r0, #56]	; 0x38
 8008cb0:	e7cd      	b.n	8008c4e <USB_CoreInit+0x56>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008cb2:	68c3      	ldr	r3, [r0, #12]
 8008cb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cb8:	60c3      	str	r3, [r0, #12]
 8008cba:	e7b5      	b.n	8008c28 <USB_CoreInit+0x30>
      return HAL_TIMEOUT;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e7c6      	b.n	8008c4e <USB_CoreInit+0x56>
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e7ea      	b.n	8008c9a <USB_CoreInit+0xa2>
 8008cc4:	ffbdffbf 	.word	0xffbdffbf
 8008cc8:	00030d40 	.word	0x00030d40

08008ccc <USB_EnableGlobalInt>:
{
 8008ccc:	4602      	mov	r2, r0
}
 8008cce:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008cd0:	6893      	ldr	r3, [r2, #8]
 8008cd2:	f043 0301 	orr.w	r3, r3, #1
 8008cd6:	6093      	str	r3, [r2, #8]
}
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop

08008cdc <USB_DisableGlobalInt>:
{
 8008cdc:	4602      	mov	r2, r0
}
 8008cde:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ce0:	6893      	ldr	r3, [r2, #8]
 8008ce2:	f023 0301 	bic.w	r3, r3, #1
 8008ce6:	6093      	str	r3, [r2, #8]
}
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop

08008cec <USB_SetCurrentMode>:
{
 8008cec:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008cee:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8008cf0:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008cf2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008cf6:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8008cf8:	d00b      	beq.n	8008d12 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 8008cfa:	b941      	cbnz	r1, 8008d0e <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008cfc:	68c3      	ldr	r3, [r0, #12]
 8008cfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d02:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8008d04:	2032      	movs	r0, #50	; 0x32
 8008d06:	f7fa f817 	bl	8002d38 <HAL_Delay>
  return HAL_OK;
 8008d0a:	2000      	movs	r0, #0
}
 8008d0c:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8008d0e:	2001      	movs	r0, #1
}
 8008d10:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d12:	68c3      	ldr	r3, [r0, #12]
 8008d14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d18:	60c3      	str	r3, [r0, #12]
 8008d1a:	e7f3      	b.n	8008d04 <USB_SetCurrentMode+0x18>

08008d1c <USB_DevInit>:
{
 8008d1c:	b084      	sub	sp, #16
 8008d1e:	468c      	mov	ip, r1
 8008d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d24:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8008d26:	4604      	mov	r4, r0
 8008d28:	ae08      	add	r6, sp, #32
    USBx->DIEPTXF[i] = 0U;
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8008d30:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
 8008d34:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8008d38:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
 8008d3c:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
 8008d40:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8008d44:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
 8008d48:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
 8008d4c:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
 8008d50:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
 8008d54:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8008d58:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
 8008d5c:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
 8008d60:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
 8008d64:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
 8008d68:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
{
 8008d6c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  if (cfg.vbus_sensing_enable == 0U)
 8008d70:	2d00      	cmp	r5, #0
 8008d72:	f040 8094 	bne.w	8008e9e <USB_DevInit+0x182>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f043 0302 	orr.w	r3, r3, #2
 8008d7c:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008d7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008d80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d84:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d8c:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d94:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8008d96:	2200      	movs	r2, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  USBx_PCGCCTL = 0U;
 8008d9a:	f8c4 2e00 	str.w	r2, [r4, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d9e:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008da0:	f8d4 2800 	ldr.w	r2, [r4, #2048]	; 0x800
 8008da4:	f8c4 2800 	str.w	r2, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008da8:	d07e      	beq.n	8008ea8 <USB_DevInit+0x18c>
  USBx_DEVICE->DCFG |= speed;
 8008daa:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8008dae:	f043 0303 	orr.w	r3, r3, #3
 8008db2:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008db6:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8008dba:	4b47      	ldr	r3, [pc, #284]	; (8008ed8 <USB_DevInit+0x1bc>)
 8008dbc:	6122      	str	r2, [r4, #16]
 8008dbe:	e001      	b.n	8008dc4 <USB_DevInit+0xa8>
    if (++count > 200000U)
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	d07f      	beq.n	8008ec4 <USB_DevInit+0x1a8>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008dc4:	6920      	ldr	r0, [r4, #16]
 8008dc6:	f010 0020 	ands.w	r0, r0, #32
 8008dca:	d1f9      	bne.n	8008dc0 <USB_DevInit+0xa4>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008dcc:	2210      	movs	r2, #16
 8008dce:	4b42      	ldr	r3, [pc, #264]	; (8008ed8 <USB_DevInit+0x1bc>)
 8008dd0:	6122      	str	r2, [r4, #16]
 8008dd2:	e001      	b.n	8008dd8 <USB_DevInit+0xbc>
    if (++count > 200000U)
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	d077      	beq.n	8008ec8 <USB_DevInit+0x1ac>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008dd8:	6922      	ldr	r2, [r4, #16]
 8008dda:	06d2      	lsls	r2, r2, #27
 8008ddc:	d4fa      	bmi.n	8008dd4 <USB_DevInit+0xb8>
  USBx_DEVICE->DIEPMSK = 0U;
 8008dde:	2200      	movs	r2, #0
 8008de0:	613a      	str	r2, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008de2:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008de4:	61fa      	str	r2, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008de6:	f1bc 0f00 	cmp.w	ip, #0
 8008dea:	d019      	beq.n	8008e20 <USB_DevInit+0x104>
 8008dec:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008df0:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008df4:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8008df8:	4616      	mov	r6, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008dfa:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8008dfe:	e007      	b.n	8008e10 <USB_DevInit+0xf4>
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e00:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e02:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e04:	611e      	str	r6, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e06:	f8c3 e008 	str.w	lr, [r3, #8]
 8008e0a:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e0c:	4562      	cmp	r2, ip
 8008e0e:	d02a      	beq.n	8008e66 <USB_DevInit+0x14a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e10:	6819      	ldr	r1, [r3, #0]
 8008e12:	2900      	cmp	r1, #0
 8008e14:	daf4      	bge.n	8008e00 <USB_DevInit+0xe4>
      if (i == 0U)
 8008e16:	2a00      	cmp	r2, #0
 8008e18:	d05b      	beq.n	8008ed2 <USB_DevInit+0x1b6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e1a:	f8c3 8000 	str.w	r8, [r3]
 8008e1e:	e7f0      	b.n	8008e02 <USB_DevInit+0xe6>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008e20:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8008e22:	2600      	movs	r6, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008e24:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
  if (cfg.dma_enable == 0U)
 8008e28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e2e:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8008e30:	61a6      	str	r6, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008e32:	6161      	str	r1, [r4, #20]
  if (cfg.dma_enable == 0U)
 8008e34:	b91a      	cbnz	r2, 8008e3e <USB_DevInit+0x122>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e36:	69a3      	ldr	r3, [r4, #24]
 8008e38:	f043 0310 	orr.w	r3, r3, #16
 8008e3c:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008e3e:	69a1      	ldr	r1, [r4, #24]
 8008e40:	4b26      	ldr	r3, [pc, #152]	; (8008edc <USB_DevInit+0x1c0>)
  if (cfg.Sof_enable != 0U)
 8008e42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008e44:	430b      	orrs	r3, r1
 8008e46:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8008e48:	b11a      	cbz	r2, 8008e52 <USB_DevInit+0x136>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e4a:	69a3      	ldr	r3, [r4, #24]
 8008e4c:	f043 0308 	orr.w	r3, r3, #8
 8008e50:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8008e52:	2d01      	cmp	r5, #1
 8008e54:	d103      	bne.n	8008e5e <USB_DevInit+0x142>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e56:	69a2      	ldr	r2, [r4, #24]
 8008e58:	4b21      	ldr	r3, [pc, #132]	; (8008ee0 <USB_DevInit+0x1c4>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	61a3      	str	r3, [r4, #24]
}
 8008e5e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e62:	b004      	add	sp, #16
 8008e64:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e66:	2100      	movs	r1, #0
 8008e68:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e6c:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e70:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008e74:	468c      	mov	ip, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008e76:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8008e7a:	e009      	b.n	8008e90 <USB_DevInit+0x174>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008e7c:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e80:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008e82:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008e86:	f8c3 e008 	str.w	lr, [r3, #8]
 8008e8a:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e8c:	4291      	cmp	r1, r2
 8008e8e:	d0c7      	beq.n	8008e20 <USB_DevInit+0x104>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e90:	681e      	ldr	r6, [r3, #0]
 8008e92:	2e00      	cmp	r6, #0
 8008e94:	daf2      	bge.n	8008e7c <USB_DevInit+0x160>
      if (i == 0U)
 8008e96:	b1c9      	cbz	r1, 8008ecc <USB_DevInit+0x1b0>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e98:	f8c3 8000 	str.w	r8, [r3]
 8008e9c:	e7f0      	b.n	8008e80 <USB_DevInit+0x164>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008e9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008ea0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ea4:	63a3      	str	r3, [r4, #56]	; 0x38
 8008ea6:	e776      	b.n	8008d96 <USB_DevInit+0x7a>
    if (cfg.speed == USBD_HS_SPEED)
 8008ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eaa:	b923      	cbnz	r3, 8008eb6 <USB_DevInit+0x19a>
  USBx_DEVICE->DCFG |= speed;
 8008eac:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8008eb0:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
 8008eb4:	e77f      	b.n	8008db6 <USB_DevInit+0x9a>
 8008eb6:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8008eba:	f043 0301 	orr.w	r3, r3, #1
 8008ebe:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
 8008ec2:	e778      	b.n	8008db6 <USB_DevInit+0x9a>
    ret = HAL_ERROR;
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	e781      	b.n	8008dcc <USB_DevInit+0xb0>
    ret = HAL_ERROR;
 8008ec8:	2001      	movs	r0, #1
 8008eca:	e788      	b.n	8008dde <USB_DevInit+0xc2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ecc:	f8c3 9000 	str.w	r9, [r3]
 8008ed0:	e7d6      	b.n	8008e80 <USB_DevInit+0x164>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ed2:	f8c3 9000 	str.w	r9, [r3]
 8008ed6:	e794      	b.n	8008e02 <USB_DevInit+0xe6>
 8008ed8:	00030d40 	.word	0x00030d40
 8008edc:	803c3800 	.word	0x803c3800
 8008ee0:	40000004 	.word	0x40000004

08008ee4 <USB_ActivateEndpoint>:
{
 8008ee4:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8008ee6:	780a      	ldrb	r2, [r1, #0]
 8008ee8:	2301      	movs	r3, #1
  if (ep->is_in == 1U)
 8008eea:	784d      	ldrb	r5, [r1, #1]
 8008eec:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 8008ef0:	f002 060f 	and.w	r6, r2, #15
 8008ef4:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8008ef8:	2d01      	cmp	r5, #1
 8008efa:	fa03 f306 	lsl.w	r3, r3, r6
 8008efe:	d017      	beq.n	8008f30 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008f00:	69e2      	ldr	r2, [r4, #28]
 8008f02:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8008f06:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008f08:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8008f0c:	041b      	lsls	r3, r3, #16
 8008f0e:	d40c      	bmi.n	8008f2a <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f10:	688a      	ldr	r2, [r1, #8]
 8008f12:	4b14      	ldr	r3, [pc, #80]	; (8008f64 <USB_ActivateEndpoint+0x80>)
 8008f14:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008f18:	78cc      	ldrb	r4, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f1a:	f8d0 1b00 	ldr.w	r1, [r0, #2816]	; 0xb00
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8008f24:	430b      	orrs	r3, r1
 8008f26:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	bc70      	pop	{r4, r5, r6}
 8008f2e:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008f30:	69e5      	ldr	r5, [r4, #28]
 8008f32:	432b      	orrs	r3, r5
 8008f34:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008f36:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8008f3a:	041c      	lsls	r4, r3, #16
 8008f3c:	d4f5      	bmi.n	8008f2a <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f3e:	688c      	ldr	r4, [r1, #8]
 8008f40:	4b08      	ldr	r3, [pc, #32]	; (8008f64 <USB_ActivateEndpoint+0x80>)
 8008f42:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f46:	78cd      	ldrb	r5, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f48:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 8008f4c:	4323      	orrs	r3, r4
 8008f4e:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 8008f52:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 8008f56:	430a      	orrs	r2, r1
}
 8008f58:	bc70      	pop	{r4, r5, r6}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f5a:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 8008f5e:	2000      	movs	r0, #0
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	10008000 	.word	0x10008000

08008f68 <USB_DeactivateEndpoint>:
{
 8008f68:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 8008f6a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8008f6c:	7849      	ldrb	r1, [r1, #1]
 8008f6e:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8008f72:	2901      	cmp	r1, #1
 8008f74:	d02a      	beq.n	8008fcc <USB_DeactivateEndpoint+0x64>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f76:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8008f7a:	2900      	cmp	r1, #0
 8008f7c:	db19      	blt.n	8008fb2 <USB_DeactivateEndpoint+0x4a>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f7e:	f003 010f 	and.w	r1, r3, #15
 8008f82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008f86:	4c26      	ldr	r4, [pc, #152]	; (8009020 <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f88:	408b      	lsls	r3, r1
 8008f8a:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8008f8e:	43db      	mvns	r3, r3
 8008f90:	4019      	ands	r1, r3
 8008f92:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f96:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8008f9a:	400b      	ands	r3, r1
 8008f9c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8008fa0:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008fa2:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8008fa6:	401c      	ands	r4, r3
 8008fa8:	f8c2 4b00 	str.w	r4, [r2, #2816]	; 0xb00
}
 8008fac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fb0:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008fb2:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8008fb6:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8008fba:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008fbe:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8008fc2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8008fc6:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
 8008fca:	e7d8      	b.n	8008f7e <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fcc:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8008fd0:	2900      	cmp	r1, #0
 8008fd2:	da0b      	bge.n	8008fec <USB_DeactivateEndpoint+0x84>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008fd4:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8008fd8:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8008fdc:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008fe0:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8008fe4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8008fe8:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008fec:	f003 040f 	and.w	r4, r3, #15
 8008ff0:	2301      	movs	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008ff2:	490c      	ldr	r1, [pc, #48]	; (8009024 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ff4:	40a3      	lsls	r3, r4
 8008ff6:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8008ffa:	43db      	mvns	r3, r3
 8008ffc:	401c      	ands	r4, r3
 8008ffe:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009002:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8009006:	4023      	ands	r3, r4
}
 8009008:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800900c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8009010:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009012:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8009016:	4019      	ands	r1, r3
 8009018:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
}
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	eff37800 	.word	0xeff37800
 8009024:	ec337800 	.word	0xec337800

08009028 <USB_EPStartXfer>:
{
 8009028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (ep->is_in == 1U)
 800902c:	f891 c001 	ldrb.w	ip, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8009030:	780f      	ldrb	r7, [r1, #0]
  if (ep->is_in == 1U)
 8009032:	f1bc 0f01 	cmp.w	ip, #1
 8009036:	694b      	ldr	r3, [r1, #20]
 8009038:	eb00 1547 	add.w	r5, r0, r7, lsl #5
 800903c:	78ce      	ldrb	r6, [r1, #3]
 800903e:	d055      	beq.n	80090ec <USB_EPStartXfer+0xc4>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009040:	f505 6730 	add.w	r7, r5, #2816	; 0xb00
 8009044:	f8df e214 	ldr.w	lr, [pc, #532]	; 800925c <USB_EPStartXfer+0x234>
 8009048:	f8d7 c010 	ldr.w	ip, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800904c:	4c81      	ldr	r4, [pc, #516]	; (8009254 <USB_EPStartXfer+0x22c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800904e:	ea0c 0e0e 	and.w	lr, ip, lr
 8009052:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8009056:	f8c7 e010 	str.w	lr, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800905a:	f8d7 e010 	ldr.w	lr, [r7, #16]
 800905e:	ea0e 0404 	and.w	r4, lr, r4
 8009062:	613c      	str	r4, [r7, #16]
    if (ep->xfer_len == 0U)
 8009064:	b38b      	cbz	r3, 80090ca <USB_EPStartXfer+0xa2>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009066:	eb03 040c 	add.w	r4, r3, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800906a:	4b7b      	ldr	r3, [pc, #492]	; (8009258 <USB_EPStartXfer+0x230>)
 800906c:	f8d7 8010 	ldr.w	r8, [r7, #16]
    if (dma == 1U)
 8009070:	2a01      	cmp	r2, #1
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009072:	f104 34ff 	add.w	r4, r4, #4294967295
 8009076:	fbb4 f4fc 	udiv	r4, r4, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800907a:	ea03 4ec4 	and.w	lr, r3, r4, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800907e:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009080:	ea4e 0e08 	orr.w	lr, lr, r8
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009084:	fb0c f304 	mul.w	r3, ip, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009088:	f8c7 e010 	str.w	lr, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800908c:	693c      	ldr	r4, [r7, #16]
 800908e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009092:	ea43 0304 	orr.w	r3, r3, r4
 8009096:	613b      	str	r3, [r7, #16]
    if (dma == 1U)
 8009098:	d023      	beq.n	80090e2 <USB_EPStartXfer+0xba>
    if (ep->type == EP_TYPE_ISOC)
 800909a:	2e01      	cmp	r6, #1
 800909c:	d10c      	bne.n	80090b8 <USB_EPStartXfer+0x90>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800909e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80090a2:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80090a6:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 80090aa:	bf0c      	ite	eq
 80090ac:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80090b0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80090b4:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80090b8:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 80090bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80090c0:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
}
 80090c4:	2000      	movs	r0, #0
 80090c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80090ca:	693c      	ldr	r4, [r7, #16]
 80090cc:	f3cc 0312 	ubfx	r3, ip, #0, #19
    if (dma == 1U)
 80090d0:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80090d2:	ea43 0304 	orr.w	r3, r3, r4
 80090d6:	613b      	str	r3, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090de:	613b      	str	r3, [r7, #16]
    if (dma == 1U)
 80090e0:	d1db      	bne.n	800909a <USB_EPStartXfer+0x72>
      if ((uint32_t)ep->xfer_buff != 0U)
 80090e2:	68cb      	ldr	r3, [r1, #12]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d0d8      	beq.n	800909a <USB_EPStartXfer+0x72>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80090e8:	617b      	str	r3, [r7, #20]
 80090ea:	e7d6      	b.n	800909a <USB_EPStartXfer+0x72>
 80090ec:	f505 6410 	add.w	r4, r5, #2304	; 0x900
    if (ep->xfer_len == 0U)
 80090f0:	b3f3      	cbz	r3, 8009170 <USB_EPStartXfer+0x148>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80090f2:	f8d1 9008 	ldr.w	r9, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80090f6:	f3c3 0e12 	ubfx	lr, r3, #0, #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80090fa:	f8d4 a010 	ldr.w	sl, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 80090fe:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009100:	eb09 0803 	add.w	r8, r9, r3
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009104:	f8df b154 	ldr.w	fp, [pc, #340]	; 800925c <USB_EPStartXfer+0x234>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009108:	f108 38ff 	add.w	r8, r8, #4294967295
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800910c:	ea0a 0b0b 	and.w	fp, sl, fp
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009110:	f8df a140 	ldr.w	sl, [pc, #320]	; 8009254 <USB_EPStartXfer+0x22c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009114:	f8c4 b010 	str.w	fp, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009118:	f8d4 b010 	ldr.w	fp, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800911c:	fbb8 f9f9 	udiv	r9, r8, r9
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009120:	ea0b 0a0a 	and.w	sl, fp, sl
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009124:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8009258 <USB_EPStartXfer+0x230>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009128:	f8c4 a010 	str.w	sl, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800912c:	ea08 48c9 	and.w	r8, r8, r9, lsl #19
 8009130:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009134:	ea48 0809 	orr.w	r8, r8, r9
 8009138:	f8c4 8010 	str.w	r8, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800913c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8009140:	ea4e 0e08 	orr.w	lr, lr, r8
 8009144:	f8c4 e010 	str.w	lr, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8009148:	d054      	beq.n	80091f4 <USB_EPStartXfer+0x1cc>
    if (dma == 1U)
 800914a:	2a01      	cmp	r2, #1
 800914c:	d060      	beq.n	8009210 <USB_EPStartXfer+0x1e8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800914e:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009152:	f007 070f 	and.w	r7, r7, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009156:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800915a:	fa0c fc07 	lsl.w	ip, ip, r7
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800915e:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009162:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 8009166:	ea4c 0707 	orr.w	r7, ip, r7
 800916a:	f8c0 7834 	str.w	r7, [r0, #2100]	; 0x834
  return HAL_OK;
 800916e:	e7a9      	b.n	80090c4 <USB_EPStartXfer+0x9c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009170:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (dma == 1U)
 8009174:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009176:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8009254 <USB_EPStartXfer+0x22c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800917a:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 800925c <USB_EPStartXfer+0x234>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800917e:	ea08 0e0e 	and.w	lr, r8, lr
 8009182:	f8c4 e010 	str.w	lr, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009186:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800918a:	f44e 2e00 	orr.w	lr, lr, #524288	; 0x80000
 800918e:	f8c4 e010 	str.w	lr, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009192:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8009196:	ea0e 0c0c 	and.w	ip, lr, ip
 800919a:	f8c4 c010 	str.w	ip, [r4, #16]
    if (dma == 1U)
 800919e:	d037      	beq.n	8009210 <USB_EPStartXfer+0x1e8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091a0:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80091a4:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091a6:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80091aa:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80091ae:	d189      	bne.n	80090c4 <USB_EPStartXfer+0x9c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80091b0:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 80091b4:	f414 7f80 	tst.w	r4, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80091b8:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 80091bc:	bf0c      	ite	eq
 80091be:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80091c2:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 80091c6:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
  if (dma == 0U)
 80091ca:	2a00      	cmp	r2, #0
 80091cc:	f47f af7a 	bne.w	80090c4 <USB_EPStartXfer+0x9c>
    count32b = ((uint32_t)len + 3U) / 4U;
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 80091d4:	089a      	lsrs	r2, r3, #2
 80091d6:	f43f af75 	beq.w	80090c4 <USB_EPStartXfer+0x9c>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80091da:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80091dc:	eb00 3007 	add.w	r0, r0, r7, lsl #12
 80091e0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80091e4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80091e8:	f853 1b04 	ldr.w	r1, [r3], #4
    for (i = 0U; i < count32b; i++)
 80091ec:	4293      	cmp	r3, r2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80091ee:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 80091f0:	d1fa      	bne.n	80091e8 <USB_EPStartXfer+0x1c0>
 80091f2:	e767      	b.n	80090c4 <USB_EPStartXfer+0x9c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80091f4:	f8d4 c010 	ldr.w	ip, [r4, #16]
    if (dma == 1U)
 80091f8:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80091fa:	f02c 4cc0 	bic.w	ip, ip, #1610612736	; 0x60000000
 80091fe:	f8c4 c010 	str.w	ip, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009202:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8009206:	f04c 5c00 	orr.w	ip, ip, #536870912	; 0x20000000
 800920a:	f8c4 c010 	str.w	ip, [r4, #16]
    if (dma == 1U)
 800920e:	d11a      	bne.n	8009246 <USB_EPStartXfer+0x21e>
      if ((uint32_t)ep->dma_addr != 0U)
 8009210:	690b      	ldr	r3, [r1, #16]
 8009212:	b103      	cbz	r3, 8009216 <USB_EPStartXfer+0x1ee>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009214:	6163      	str	r3, [r4, #20]
      if (ep->type == EP_TYPE_ISOC)
 8009216:	2e01      	cmp	r6, #1
 8009218:	d10c      	bne.n	8009234 <USB_EPStartXfer+0x20c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800921a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800921e:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009222:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 8009226:	bf0c      	ite	eq
 8009228:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800922c:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8009230:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009234:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
}
 8009238:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800923a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800923e:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
}
 8009242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009246:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 800924a:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800924e:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
 8009252:	e7ad      	b.n	80091b0 <USB_EPStartXfer+0x188>
 8009254:	e007ffff 	.word	0xe007ffff
 8009258:	1ff80000 	.word	0x1ff80000
 800925c:	fff80000 	.word	0xfff80000

08009260 <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 8009260:	784b      	ldrb	r3, [r1, #1]
{
 8009262:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8009264:	2b01      	cmp	r3, #1
  uint32_t epnum = (uint32_t)ep->num;
 8009266:	780d      	ldrb	r5, [r1, #0]
 8009268:	694f      	ldr	r7, [r1, #20]
 800926a:	eb00 1445 	add.w	r4, r0, r5, lsl #5
  if (ep->is_in == 1U)
 800926e:	d025      	beq.n	80092bc <USB_EP0StartXfer+0x5c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009270:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8009274:	4e3d      	ldr	r6, [pc, #244]	; (800936c <USB_EP0StartXfer+0x10c>)
 8009276:	6918      	ldr	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009278:	4d3d      	ldr	r5, [pc, #244]	; (8009370 <USB_EP0StartXfer+0x110>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800927a:	4006      	ands	r6, r0
 800927c:	6888      	ldr	r0, [r1, #8]
 800927e:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009280:	691e      	ldr	r6, [r3, #16]
 8009282:	4035      	ands	r5, r6
 8009284:	611d      	str	r5, [r3, #16]
    if (ep->xfer_len > 0U)
 8009286:	b107      	cbz	r7, 800928a <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 8009288:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800928a:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800928c:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 8009290:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009292:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8009296:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009298:	691d      	ldr	r5, [r3, #16]
 800929a:	ea40 0005 	orr.w	r0, r0, r5
 800929e:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 80092a0:	d007      	beq.n	80092b2 <USB_EP0StartXfer+0x52>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80092a2:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80092a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092aa:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 80092ae:	2000      	movs	r0, #0
 80092b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 80092b2:	68ca      	ldr	r2, [r1, #12]
 80092b4:	2a00      	cmp	r2, #0
 80092b6:	d0f4      	beq.n	80092a2 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80092b8:	615a      	str	r2, [r3, #20]
 80092ba:	e7f2      	b.n	80092a2 <USB_EP0StartXfer+0x42>
 80092bc:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 80092c0:	b3bf      	cbz	r7, 8009332 <USB_EP0StartXfer+0xd2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80092c2:	f8d3 e010 	ldr.w	lr, [r3, #16]
 80092c6:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 800936c <USB_EP0StartXfer+0x10c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092ca:	4e29      	ldr	r6, [pc, #164]	; (8009370 <USB_EP0StartXfer+0x110>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80092cc:	ea0e 0c0c 	and.w	ip, lr, ip
      if (ep->xfer_len > ep->maxpacket)
 80092d0:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80092d4:	f8c3 c010 	str.w	ip, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 80092d8:	45be      	cmp	lr, r7
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092da:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80092de:	ea0c 0606 	and.w	r6, ip, r6
 80092e2:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 80092e4:	d202      	bcs.n	80092ec <USB_EP0StartXfer+0x8c>
        ep->xfer_len = ep->maxpacket;
 80092e6:	4677      	mov	r7, lr
 80092e8:	f8c1 e014 	str.w	lr, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092ec:	f8d3 c010 	ldr.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80092f0:	f3c7 0612 	ubfx	r6, r7, #0, #19
    if (dma == 1U)
 80092f4:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092f6:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 80092fa:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80092fe:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8009302:	ea46 060c 	orr.w	r6, r6, ip
 8009306:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 8009308:	d02b      	beq.n	8009362 <USB_EP0StartXfer+0x102>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800930a:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800930e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009312:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8009316:	2f00      	cmp	r7, #0
 8009318:	d0c9      	beq.n	80092ae <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800931a:	2301      	movs	r3, #1
 800931c:	f005 050f 	and.w	r5, r5, #15
 8009320:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8009324:	fa03 f505 	lsl.w	r5, r3, r5
 8009328:	4315      	orrs	r5, r2
 800932a:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
}
 800932e:	2000      	movs	r0, #0
 8009330:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009332:	691e      	ldr	r6, [r3, #16]
    if (dma == 1U)
 8009334:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009336:	4d0e      	ldr	r5, [pc, #56]	; (8009370 <USB_EP0StartXfer+0x110>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009338:	480c      	ldr	r0, [pc, #48]	; (800936c <USB_EP0StartXfer+0x10c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800933a:	ea05 0506 	and.w	r5, r5, r6
 800933e:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009340:	691d      	ldr	r5, [r3, #16]
 8009342:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8009346:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009348:	691d      	ldr	r5, [r3, #16]
 800934a:	ea00 0005 	and.w	r0, r0, r5
 800934e:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8009350:	d007      	beq.n	8009362 <USB_EP0StartXfer+0x102>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009352:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
}
 8009356:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009358:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800935c:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 8009360:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 8009362:	690a      	ldr	r2, [r1, #16]
 8009364:	2a00      	cmp	r2, #0
 8009366:	d0f4      	beq.n	8009352 <USB_EP0StartXfer+0xf2>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009368:	615a      	str	r2, [r3, #20]
 800936a:	e7f2      	b.n	8009352 <USB_EP0StartXfer+0xf2>
 800936c:	fff80000 	.word	0xfff80000
 8009370:	e007ffff 	.word	0xe007ffff

08009374 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8009374:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8009376:	784a      	ldrb	r2, [r1, #1]
 8009378:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800937c:	3300      	adds	r3, #0
 800937e:	bf18      	it	ne
 8009380:	2301      	movne	r3, #1
 8009382:	2a01      	cmp	r2, #1
 8009384:	d012      	beq.n	80093ac <USB_EPSetStall+0x38>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009386:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800938a:	2a00      	cmp	r2, #0
 800938c:	db06      	blt.n	800939c <USB_EPSetStall+0x28>
 800938e:	b12b      	cbz	r3, 800939c <USB_EPSetStall+0x28>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009390:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8009394:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009398:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800939c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80093a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093a4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80093a8:	2000      	movs	r0, #0
 80093aa:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80093ac:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80093b0:	2a00      	cmp	r2, #0
 80093b2:	db06      	blt.n	80093c2 <USB_EPSetStall+0x4e>
 80093b4:	b12b      	cbz	r3, 80093c2 <USB_EPSetStall+0x4e>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80093b6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80093ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80093be:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80093c2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80093c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093ca:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80093ce:	2000      	movs	r0, #0
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop

080093d4 <USB_DevConnect>:
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80093d4:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 80093d8:	2003      	movs	r0, #3
{
 80093da:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80093dc:	6853      	ldr	r3, [r2, #4]
 80093de:	f023 0302 	bic.w	r3, r3, #2
 80093e2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80093e4:	f7f9 fca8 	bl	8002d38 <HAL_Delay>
}
 80093e8:	2000      	movs	r0, #0
 80093ea:	bd08      	pop	{r3, pc}

080093ec <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093ec:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 80093f0:	2003      	movs	r0, #3
{
 80093f2:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093f4:	6853      	ldr	r3, [r2, #4]
 80093f6:	f043 0302 	orr.w	r3, r3, #2
 80093fa:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80093fc:	f7f9 fc9c 	bl	8002d38 <HAL_Delay>
}
 8009400:	2000      	movs	r0, #0
 8009402:	bd08      	pop	{r3, pc}

08009404 <USB_EP0_OutStart>:
{
 8009404:	b430      	push	{r4, r5}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009406:	4c12      	ldr	r4, [pc, #72]	; (8009450 <USB_EP0_OutStart+0x4c>)
 8009408:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800940c:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800940e:	42a5      	cmp	r5, r4
 8009410:	d903      	bls.n	800941a <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009412:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 8009416:	2c00      	cmp	r4, #0
 8009418:	db16      	blt.n	8009448 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800941a:	2400      	movs	r4, #0
  if (dma == 1U)
 800941c:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800941e:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009420:	691c      	ldr	r4, [r3, #16]
 8009422:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8009426:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009428:	691c      	ldr	r4, [r3, #16]
 800942a:	f044 0418 	orr.w	r4, r4, #24
 800942e:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009430:	691c      	ldr	r4, [r3, #16]
 8009432:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8009436:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 8009438:	d106      	bne.n	8009448 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800943a:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800943c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8009440:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009444:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8009448:	2000      	movs	r0, #0
 800944a:	bc30      	pop	{r4, r5}
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	4f54300a 	.word	0x4f54300a

08009454 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009454:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8009458:	b183      	cbz	r3, 800947c <USBD_CDC_EP0_RxReady+0x28>
{
 800945a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800945c:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009460:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8009464:	28ff      	cmp	r0, #255	; 0xff
 8009466:	d007      	beq.n	8009478 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	4621      	mov	r1, r4
 800946c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8009470:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8009472:	23ff      	movs	r3, #255	; 0xff
 8009474:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 8009478:	2000      	movs	r0, #0
 800947a:	bd10      	pop	{r4, pc}
 800947c:	2000      	movs	r0, #0
 800947e:	4770      	bx	lr

08009480 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009480:	2343      	movs	r3, #67	; 0x43
 8009482:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8009484:	4800      	ldr	r0, [pc, #0]	; (8009488 <USBD_CDC_GetFSCfgDesc+0x8>)
 8009486:	4770      	bx	lr
 8009488:	24000234 	.word	0x24000234

0800948c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800948c:	2343      	movs	r3, #67	; 0x43
 800948e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8009490:	4800      	ldr	r0, [pc, #0]	; (8009494 <USBD_CDC_GetHSCfgDesc+0x8>)
 8009492:	4770      	bx	lr
 8009494:	24000278 	.word	0x24000278

08009498 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009498:	2343      	movs	r3, #67	; 0x43
 800949a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800949c:	4800      	ldr	r0, [pc, #0]	; (80094a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800949e:	4770      	bx	lr
 80094a0:	240002c8 	.word	0x240002c8

080094a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80094a4:	230a      	movs	r3, #10
 80094a6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80094a8:	4800      	ldr	r0, [pc, #0]	; (80094ac <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80094aa:	4770      	bx	lr
 80094ac:	240002bc 	.word	0x240002bc

080094b0 <USBD_CDC_DataOut>:
{
 80094b0:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094b2:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 80094b6:	b174      	cbz	r4, 80094d6 <USBD_CDC_DataOut+0x26>
 80094b8:	4605      	mov	r5, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094ba:	f000 fc25 	bl	8009d08 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80094be:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80094c2:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094c6:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80094d0:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80094d2:	2000      	movs	r0, #0
}
 80094d4:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80094d6:	2003      	movs	r0, #3
}
 80094d8:	bd38      	pop	{r3, r4, r5, pc}
 80094da:	bf00      	nop

080094dc <USBD_CDC_DataIn>:
{
 80094dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 80094de:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
 80094e2:	b1a7      	cbz	r7, 800950e <USBD_CDC_DataIn+0x32>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80094e4:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 80094e8:	4603      	mov	r3, r0
 80094ea:	460a      	mov	r2, r1
 80094ec:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80094f0:	69ae      	ldr	r6, [r5, #24]
 80094f2:	b976      	cbnz	r6, 8009512 <USBD_CDC_DataIn+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80094f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
    hcdc->TxState = 0U;
 80094f8:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80094fa:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80094fe:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8009502:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8009504:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009508:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800950a:	4620      	mov	r0, r4
}
 800950c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800950e:	2003      	movs	r0, #3
}
 8009510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009512:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 8009516:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800951a:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 800951e:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 8009522:	fbb6 f4fc 	udiv	r4, r6, ip
 8009526:	fb0c 6414 	mls	r4, ip, r4, r6
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800952a:	2c00      	cmp	r4, #0
 800952c:	d1e2      	bne.n	80094f4 <USBD_CDC_DataIn+0x18>
    pdev->ep_in[epnum].total_length = 0U;
 800952e:	61ac      	str	r4, [r5, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009530:	4623      	mov	r3, r4
 8009532:	4622      	mov	r2, r4
 8009534:	f000 fbcc 	bl	8009cd0 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8009538:	4620      	mov	r0, r4
}
 800953a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800953c <USBD_CDC_Setup>:
{
 800953c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009540:	780b      	ldrb	r3, [r1, #0]
{
 8009542:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 8009544:	2700      	movs	r7, #0
{
 8009546:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009548:	f013 0260 	ands.w	r2, r3, #96	; 0x60
{
 800954c:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800954e:	f8d0 82bc 	ldr.w	r8, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8009552:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 8009556:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800955a:	d01c      	beq.n	8009596 <USBD_CDC_Setup+0x5a>
 800955c:	2a20      	cmp	r2, #32
 800955e:	d112      	bne.n	8009586 <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 8009560:	88cd      	ldrh	r5, [r1, #6]
 8009562:	f891 c001 	ldrb.w	ip, [r1, #1]
 8009566:	2d00      	cmp	r5, #0
 8009568:	d147      	bne.n	80095fa <USBD_CDC_Setup+0xbe>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800956a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800956e:	462a      	mov	r2, r5
 8009570:	4660      	mov	r0, ip
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8009576:	4628      	mov	r0, r5
}
 8009578:	b002      	add	sp, #8
 800957a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800957e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009582:	2b03      	cmp	r3, #3
 8009584:	d049      	beq.n	800961a <USBD_CDC_Setup+0xde>
      USBD_CtlError(pdev, req);
 8009586:	4630      	mov	r0, r6
 8009588:	4621      	mov	r1, r4
 800958a:	f000 f94b 	bl	8009824 <USBD_CtlError>
      ret = USBD_FAIL;
 800958e:	2003      	movs	r0, #3
}
 8009590:	b002      	add	sp, #8
 8009592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8009596:	784b      	ldrb	r3, [r1, #1]
 8009598:	2b0b      	cmp	r3, #11
 800959a:	d8f4      	bhi.n	8009586 <USBD_CDC_Setup+0x4a>
 800959c:	a201      	add	r2, pc, #4	; (adr r2, 80095a4 <USBD_CDC_Setup+0x68>)
 800959e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a2:	bf00      	nop
 80095a4:	0800957f 	.word	0x0800957f
 80095a8:	080095dd 	.word	0x080095dd
 80095ac:	08009587 	.word	0x08009587
 80095b0:	08009587 	.word	0x08009587
 80095b4:	08009587 	.word	0x08009587
 80095b8:	08009587 	.word	0x08009587
 80095bc:	08009587 	.word	0x08009587
 80095c0:	08009587 	.word	0x08009587
 80095c4:	08009587 	.word	0x08009587
 80095c8:	08009587 	.word	0x08009587
 80095cc:	080095e5 	.word	0x080095e5
 80095d0:	080095d5 	.word	0x080095d5
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80095d4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80095d8:	2b03      	cmp	r3, #3
 80095da:	d1d4      	bne.n	8009586 <USBD_CDC_Setup+0x4a>
  USBD_StatusTypeDef ret = USBD_OK;
 80095dc:	2000      	movs	r0, #0
}
 80095de:	b002      	add	sp, #8
 80095e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095e4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d1cc      	bne.n	8009586 <USBD_CDC_Setup+0x4a>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80095ec:	2201      	movs	r2, #1
 80095ee:	f10d 0105 	add.w	r1, sp, #5
 80095f2:	f000 f949 	bl	8009888 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80095f6:	2000      	movs	r0, #0
 80095f8:	e7ca      	b.n	8009590 <USBD_CDC_Setup+0x54>
      if ((req->bmRequest & 0x80U) != 0U)
 80095fa:	061b      	lsls	r3, r3, #24
 80095fc:	d514      	bpl.n	8009628 <USBD_CDC_Setup+0xec>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80095fe:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8009602:	462a      	mov	r2, r5
 8009604:	4660      	mov	r0, ip
 8009606:	4641      	mov	r1, r8
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800960c:	88e2      	ldrh	r2, [r4, #6]
 800960e:	4641      	mov	r1, r8
 8009610:	4630      	mov	r0, r6
 8009612:	f000 f939 	bl	8009888 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8009616:	4638      	mov	r0, r7
 8009618:	e7ba      	b.n	8009590 <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800961a:	2202      	movs	r2, #2
 800961c:	f10d 0106 	add.w	r1, sp, #6
 8009620:	f000 f932 	bl	8009888 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8009624:	2000      	movs	r0, #0
 8009626:	e7b3      	b.n	8009590 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 8009628:	f888 c200 	strb.w	ip, [r8, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800962c:	462a      	mov	r2, r5
        hcdc->CmdLength = (uint8_t)req->wLength;
 800962e:	f888 5201 	strb.w	r5, [r8, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009632:	4641      	mov	r1, r8
 8009634:	f000 f936 	bl	80098a4 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8009638:	4638      	mov	r0, r7
 800963a:	e7a9      	b.n	8009590 <USBD_CDC_Setup+0x54>

0800963c <USBD_CDC_DeInit>:
{
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009640:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009642:	2181      	movs	r1, #129	; 0x81
 8009644:	f000 fb28 	bl	8009c98 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009648:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800964a:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800964c:	4620      	mov	r0, r4
 800964e:	f000 fb23 	bl	8009c98 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009652:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009656:	4620      	mov	r0, r4
 8009658:	2182      	movs	r1, #130	; 0x82
 800965a:	f000 fb1d 	bl	8009c98 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800965e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009662:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8009664:	b14b      	cbz	r3, 800967a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009666:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800966e:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8009672:	f000 fb9d 	bl	8009db0 <free>
    pdev->pClassData = NULL;
 8009676:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800967a:	2000      	movs	r0, #0
 800967c:	bd38      	pop	{r3, r4, r5, pc}
 800967e:	bf00      	nop

08009680 <USBD_CDC_Init>:
{
 8009680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009684:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009686:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800968a:	f000 fb89 	bl	8009da0 <malloc>
  if (hcdc == NULL)
 800968e:	4605      	mov	r5, r0
 8009690:	2800      	cmp	r0, #0
 8009692:	d04a      	beq.n	800972a <USBD_CDC_Init+0xaa>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009694:	7c23      	ldrb	r3, [r4, #16]
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009696:	2601      	movs	r6, #1
  pdev->pClassData = (void *)hcdc;
 8009698:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800969c:	b393      	cbz	r3, 8009704 <USBD_CDC_Init+0x84>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800969e:	2340      	movs	r3, #64	; 0x40
 80096a0:	2181      	movs	r1, #129	; 0x81
 80096a2:	2202      	movs	r2, #2
 80096a4:	4620      	mov	r0, r4
 80096a6:	f000 fae5 	bl	8009c74 <USBD_LL_OpenEP>
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80096aa:	4631      	mov	r1, r6
 80096ac:	2340      	movs	r3, #64	; 0x40
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80096ae:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80096b0:	2202      	movs	r2, #2
 80096b2:	4620      	mov	r0, r4
 80096b4:	f000 fade 	bl	8009c74 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80096b8:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80096ba:	2203      	movs	r2, #3
 80096bc:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80096be:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80096c2:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80096c4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80096c8:	2308      	movs	r3, #8
 80096ca:	f000 fad3 	bl	8009c74 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80096ce:	2701      	movs	r7, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80096d0:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 80096d4:	2600      	movs	r6, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80096d6:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096de:	f894 8010 	ldrb.w	r8, [r4, #16]
  hcdc->TxState = 0U;
 80096e2:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096e6:	4639      	mov	r1, r7
  hcdc->RxState = 0U;
 80096e8:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096ec:	4620      	mov	r0, r4
 80096ee:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096f2:	f1b8 0f00 	cmp.w	r8, #0
 80096f6:	d011      	beq.n	800971c <USBD_CDC_Init+0x9c>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096f8:	2340      	movs	r3, #64	; 0x40
 80096fa:	f000 faf7 	bl	8009cec <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80096fe:	4630      	mov	r0, r6
}
 8009700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009708:	2181      	movs	r1, #129	; 0x81
 800970a:	2202      	movs	r2, #2
 800970c:	4620      	mov	r0, r4
 800970e:	f000 fab1 	bl	8009c74 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009712:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009714:	4631      	mov	r1, r6
 8009716:	f44f 7300 	mov.w	r3, #512	; 0x200
 800971a:	e7c9      	b.n	80096b0 <USBD_CDC_Init+0x30>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800971c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009720:	f000 fae4 	bl	8009cec <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8009724:	4640      	mov	r0, r8
}
 8009726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassData = NULL;
 800972a:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800972e:	2002      	movs	r0, #2
}
 8009730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009734 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8009734:	b119      	cbz	r1, 800973e <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8009736:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800973a:	2000      	movs	r0, #0
 800973c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800973e:	2003      	movs	r0, #3
}
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop

08009744 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009744:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 8009748:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800974a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800974e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8009752:	4770      	bx	lr

08009754 <USBD_CDC_SetRxBuffer>:
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8009754:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
}
 8009758:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800975a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800975e:	4770      	bx	lr

08009760 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009760:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 8009764:	b19a      	cbz	r2, 800978e <USBD_CDC_TransmitPacket+0x2e>
{
 8009766:	b538      	push	{r3, r4, r5, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8009768:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800976c:	b10c      	cbz	r4, 8009772 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800976e:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 8009770:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009772:	f8d2 5210 	ldr.w	r5, [r2, #528]	; 0x210
    hcdc->TxState = 1U;
 8009776:	2301      	movs	r3, #1
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009778:	2181      	movs	r1, #129	; 0x81
    hcdc->TxState = 1U;
 800977a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800977e:	462b      	mov	r3, r5
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009780:	62c5      	str	r5, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009782:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8009786:	f000 faa3 	bl	8009cd0 <USBD_LL_Transmit>
    ret = USBD_OK;
 800978a:	4620      	mov	r0, r4
}
 800978c:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800978e:	2003      	movs	r0, #3
}
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop

08009794 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009794:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8009798:	b18a      	cbz	r2, 80097be <USBD_CDC_ReceivePacket+0x2a>
 800979a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
{
 800979e:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097a0:	7c04      	ldrb	r4, [r0, #16]
 80097a2:	b12c      	cbz	r4, 80097b0 <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80097a4:	2340      	movs	r3, #64	; 0x40
 80097a6:	2101      	movs	r1, #1
 80097a8:	f000 faa0 	bl	8009cec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80097ac:	2000      	movs	r0, #0
}
 80097ae:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80097b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097b4:	2101      	movs	r1, #1
 80097b6:	f000 fa99 	bl	8009cec <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80097ba:	4620      	mov	r0, r4
}
 80097bc:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80097be:	2003      	movs	r0, #3
}
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop

080097c4 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80097c4:	4603      	mov	r3, r0
 80097c6:	b1a8      	cbz	r0, 80097f4 <USBD_Init+0x30>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80097c8:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8
 80097cc:	b110      	cbz	r0, 80097d4 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80097ce:	2000      	movs	r0, #0
 80097d0:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80097d4:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 80097d8:	b110      	cbz	r0, 80097e0 <USBD_Init+0x1c>
  {
    pdev->pConfDesc = NULL;
 80097da:	2000      	movs	r0, #0
 80097dc:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80097e0:	b109      	cbz	r1, 80097e6 <USBD_Init+0x22>
  {
    pdev->pDesc = pdesc;
 80097e2:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097e6:	2101      	movs	r1, #1
  pdev->id = id;
 80097e8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80097ea:	4618      	mov	r0, r3
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097ec:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  ret = USBD_LL_Init(pdev);
 80097f0:	f000 b9fe 	b.w	8009bf0 <USBD_LL_Init>

  return ret;
}
 80097f4:	2003      	movs	r0, #3
 80097f6:	4770      	bx	lr

080097f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80097f8:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 80097fa:	2400      	movs	r4, #0
{
 80097fc:	b083      	sub	sp, #12
  uint16_t len = 0U;
 80097fe:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8009802:	b159      	cbz	r1, 800981c <USBD_RegisterClass+0x24>
 8009804:	4605      	mov	r5, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009806:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800980a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800980c:	f10d 0006 	add.w	r0, sp, #6
 8009810:	4798      	blx	r3
 8009812:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 8009816:	4620      	mov	r0, r4
 8009818:	b003      	add	sp, #12
 800981a:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800981c:	2403      	movs	r4, #3
 800981e:	e7fa      	b.n	8009816 <USBD_RegisterClass+0x1e>

08009820 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009820:	f000 ba1a 	b.w	8009c58 <USBD_LL_Start>

08009824 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009824:	b510      	push	{r4, lr}
 8009826:	4604      	mov	r4, r0
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009828:	2180      	movs	r1, #128	; 0x80
 800982a:	f000 fa43 	bl	8009cb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800982e:	2100      	movs	r1, #0
 8009830:	4620      	mov	r0, r4
}
 8009832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8009836:	f000 ba3d 	b.w	8009cb4 <USBD_LL_StallEP>
 800983a:	bf00      	nop

0800983c <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800983c:	b300      	cbz	r0, 8009880 <USBD_GetString+0x44>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800983e:	7803      	ldrb	r3, [r0, #0]
{
 8009840:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 8009842:	b1f3      	cbz	r3, 8009882 <USBD_GetString+0x46>
 8009844:	4604      	mov	r4, r0
  uint8_t  len = 0U;
 8009846:	2300      	movs	r3, #0
  {
    len++;
 8009848:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800984a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    len++;
 800984e:	b2db      	uxtb	r3, r3
  while (*pbuff != (uint8_t)'\0')
 8009850:	2d00      	cmp	r5, #0
 8009852:	d1f9      	bne.n	8009848 <USBD_GetString+0xc>
 8009854:	005b      	lsls	r3, r3, #1
 8009856:	3302      	adds	r3, #2
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009858:	2403      	movs	r4, #3
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800985a:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800985c:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800985e:	704c      	strb	r4, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8009860:	7804      	ldrb	r4, [r0, #0]
 8009862:	b15c      	cbz	r4, 800987c <USBD_GetString+0x40>
  idx++;
 8009864:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8009866:	2500      	movs	r5, #0
    idx++;
 8009868:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 800986a:	54cc      	strb	r4, [r1, r3]
    idx++;
 800986c:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800986e:	b2d2      	uxtb	r2, r2
    idx++;
 8009870:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8009872:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8009874:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8009878:	2c00      	cmp	r4, #0
 800987a:	d1f5      	bne.n	8009868 <USBD_GetString+0x2c>
}
 800987c:	bc30      	pop	{r4, r5}
 800987e:	4770      	bx	lr
 8009880:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8009882:	2302      	movs	r3, #2
 8009884:	e7e8      	b.n	8009858 <USBD_GetString+0x1c>
 8009886:	bf00      	nop

08009888 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009888:	b570      	push	{r4, r5, r6, lr}
 800988a:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800988c:	2602      	movs	r6, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800988e:	460a      	mov	r2, r1
 8009890:	2100      	movs	r1, #0
  pdev->ep_in[0].total_length = len;
 8009892:	6185      	str	r5, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009894:	462b      	mov	r3, r5
  pdev->ep_in[0].rem_length = len;
 8009896:	61c5      	str	r5, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009898:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800989c:	f000 fa18 	bl	8009cd0 <USBD_LL_Transmit>

  return USBD_OK;
}
 80098a0:	2000      	movs	r0, #0
 80098a2:	bd70      	pop	{r4, r5, r6, pc}

080098a4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80098a4:	b570      	push	{r4, r5, r6, lr}
 80098a6:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098a8:	2603      	movs	r6, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098aa:	460a      	mov	r2, r1
 80098ac:	2100      	movs	r1, #0
  pdev->ep_out[0].total_length = len;
 80098ae:	f8c0 5158 	str.w	r5, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098b2:	462b      	mov	r3, r5
  pdev->ep_out[0].rem_length = len;
 80098b4:	f8c0 515c 	str.w	r5, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098b8:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098bc:	f000 fa16 	bl	8009cec <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80098c0:	2000      	movs	r0, #0
 80098c2:	bd70      	pop	{r4, r5, r6, pc}

080098c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80098c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80098c6:	2200      	movs	r2, #0
 80098c8:	4910      	ldr	r1, [pc, #64]	; (800990c <MX_USB_DEVICE_Init+0x48>)
 80098ca:	4811      	ldr	r0, [pc, #68]	; (8009910 <MX_USB_DEVICE_Init+0x4c>)
 80098cc:	f7ff ff7a 	bl	80097c4 <USBD_Init>
 80098d0:	b9c8      	cbnz	r0, 8009906 <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80098d2:	4910      	ldr	r1, [pc, #64]	; (8009914 <MX_USB_DEVICE_Init+0x50>)
 80098d4:	480e      	ldr	r0, [pc, #56]	; (8009910 <MX_USB_DEVICE_Init+0x4c>)
 80098d6:	f7ff ff8f 	bl	80097f8 <USBD_RegisterClass>
 80098da:	b988      	cbnz	r0, 8009900 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80098dc:	490e      	ldr	r1, [pc, #56]	; (8009918 <MX_USB_DEVICE_Init+0x54>)
 80098de:	480c      	ldr	r0, [pc, #48]	; (8009910 <MX_USB_DEVICE_Init+0x4c>)
 80098e0:	f7ff ff28 	bl	8009734 <USBD_CDC_RegisterInterface>
 80098e4:	b948      	cbnz	r0, 80098fa <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80098e6:	480a      	ldr	r0, [pc, #40]	; (8009910 <MX_USB_DEVICE_Init+0x4c>)
 80098e8:	f7ff ff9a 	bl	8009820 <USBD_Start>
 80098ec:	b108      	cbz	r0, 80098f2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80098ee:	f7f8 fa31 	bl	8001d54 <Error_Handler>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80098f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 80098f6:	f7fb bf8b 	b.w	8005810 <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 80098fa:	f7f8 fa2b 	bl	8001d54 <Error_Handler>
 80098fe:	e7f2      	b.n	80098e6 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8009900:	f7f8 fa28 	bl	8001d54 <Error_Handler>
 8009904:	e7ea      	b.n	80098dc <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8009906:	f7f8 fa25 	bl	8001d54 <Error_Handler>
 800990a:	e7e2      	b.n	80098d2 <MX_USB_DEVICE_Init+0xe>
 800990c:	24000328 	.word	0x24000328
 8009910:	2400d7c4 	.word	0x2400d7c4
 8009914:	240001fc 	.word	0x240001fc
 8009918:	2400030c 	.word	0x2400030c

0800991c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800991c:	2000      	movs	r0, #0
 800991e:	4770      	bx	lr

08009920 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8009920:	2000      	movs	r0, #0
 8009922:	4770      	bx	lr

08009924 <CDC_Init_FS>:
{
 8009924:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009926:	4c06      	ldr	r4, [pc, #24]	; (8009940 <CDC_Init_FS+0x1c>)
 8009928:	2200      	movs	r2, #0
 800992a:	4906      	ldr	r1, [pc, #24]	; (8009944 <CDC_Init_FS+0x20>)
 800992c:	4620      	mov	r0, r4
 800992e:	f7ff ff09 	bl	8009744 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009932:	4620      	mov	r0, r4
 8009934:	4904      	ldr	r1, [pc, #16]	; (8009948 <CDC_Init_FS+0x24>)
 8009936:	f7ff ff0d 	bl	8009754 <USBD_CDC_SetRxBuffer>
}
 800993a:	2000      	movs	r0, #0
 800993c:	bd10      	pop	{r4, pc}
 800993e:	bf00      	nop
 8009940:	2400d7c4 	.word	0x2400d7c4
 8009944:	2400e294 	.word	0x2400e294
 8009948:	2400da94 	.word	0x2400da94

0800994c <CDC_Control_FS>:
  switch(cmd)
 800994c:	2820      	cmp	r0, #32
 800994e:	d00a      	beq.n	8009966 <CDC_Control_FS+0x1a>
 8009950:	2821      	cmp	r0, #33	; 0x21
 8009952:	d106      	bne.n	8009962 <CDC_Control_FS+0x16>
    	 memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8009954:	4b0a      	ldr	r3, [pc, #40]	; (8009980 <CDC_Control_FS+0x34>)
 8009956:	6818      	ldr	r0, [r3, #0]
 8009958:	889a      	ldrh	r2, [r3, #4]
 800995a:	799b      	ldrb	r3, [r3, #6]
 800995c:	6008      	str	r0, [r1, #0]
 800995e:	808a      	strh	r2, [r1, #4]
 8009960:	718b      	strb	r3, [r1, #6]
}
 8009962:	2000      	movs	r0, #0
 8009964:	4770      	bx	lr
{
 8009966:	b410      	push	{r4}
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8009968:	4b05      	ldr	r3, [pc, #20]	; (8009980 <CDC_Control_FS+0x34>)
 800996a:	6808      	ldr	r0, [r1, #0]
 800996c:	888c      	ldrh	r4, [r1, #4]
 800996e:	798a      	ldrb	r2, [r1, #6]
 8009970:	6018      	str	r0, [r3, #0]
}
 8009972:	2000      	movs	r0, #0
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8009974:	809c      	strh	r4, [r3, #4]
 8009976:	719a      	strb	r2, [r3, #6]
}
 8009978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	24000320 	.word	0x24000320

08009984 <CDC_Receive_FS>:
{
 8009984:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009986:	4c0c      	ldr	r4, [pc, #48]	; (80099b8 <CDC_Receive_FS+0x34>)
{
 8009988:	4605      	mov	r5, r0
 800998a:	460e      	mov	r6, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800998c:	4620      	mov	r0, r4
 800998e:	4629      	mov	r1, r5
 8009990:	f7ff fee0 	bl	8009754 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009994:	4620      	mov	r0, r4
 8009996:	f7ff fefd 	bl	8009794 <USBD_CDC_ReceivePacket>
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800999a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800999e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80099a2:	b93b      	cbnz	r3, 80099b4 <CDC_Receive_FS+0x30>
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80099a4:	8832      	ldrh	r2, [r6, #0]
 80099a6:	4629      	mov	r1, r5
 80099a8:	4620      	mov	r0, r4
 80099aa:	f7ff fecb 	bl	8009744 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80099ae:	4620      	mov	r0, r4
 80099b0:	f7ff fed6 	bl	8009760 <USBD_CDC_TransmitPacket>
}
 80099b4:	2000      	movs	r0, #0
 80099b6:	bd70      	pop	{r4, r5, r6, pc}
 80099b8:	2400d7c4 	.word	0x2400d7c4

080099bc <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80099bc:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80099be:	4801      	ldr	r0, [pc, #4]	; (80099c4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80099c0:	800b      	strh	r3, [r1, #0]
}
 80099c2:	4770      	bx	lr
 80099c4:	24000344 	.word	0x24000344

080099c8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80099c8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80099ca:	4801      	ldr	r0, [pc, #4]	; (80099d0 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80099cc:	800b      	strh	r3, [r1, #0]
}
 80099ce:	4770      	bx	lr
 80099d0:	24000358 	.word	0x24000358

080099d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099d4:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099d6:	4c04      	ldr	r4, [pc, #16]	; (80099e8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80099d8:	460a      	mov	r2, r1
 80099da:	4804      	ldr	r0, [pc, #16]	; (80099ec <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80099dc:	4621      	mov	r1, r4
 80099de:	f7ff ff2d 	bl	800983c <USBD_GetString>
  return USBD_StrDesc;
}
 80099e2:	4620      	mov	r0, r4
 80099e4:	bd10      	pop	{r4, pc}
 80099e6:	bf00      	nop
 80099e8:	2400ea94 	.word	0x2400ea94
 80099ec:	0800f9e0 	.word	0x0800f9e0

080099f0 <USBD_FS_ProductStrDescriptor>:
{
 80099f0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099f2:	4c04      	ldr	r4, [pc, #16]	; (8009a04 <USBD_FS_ProductStrDescriptor+0x14>)
 80099f4:	460a      	mov	r2, r1
 80099f6:	4804      	ldr	r0, [pc, #16]	; (8009a08 <USBD_FS_ProductStrDescriptor+0x18>)
 80099f8:	4621      	mov	r1, r4
 80099fa:	f7ff ff1f 	bl	800983c <USBD_GetString>
}
 80099fe:	4620      	mov	r0, r4
 8009a00:	bd10      	pop	{r4, pc}
 8009a02:	bf00      	nop
 8009a04:	2400ea94 	.word	0x2400ea94
 8009a08:	0800f9f4 	.word	0x0800f9f4

08009a0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a0c:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a0e:	4c04      	ldr	r4, [pc, #16]	; (8009a20 <USBD_FS_ConfigStrDescriptor+0x14>)
 8009a10:	460a      	mov	r2, r1
 8009a12:	4804      	ldr	r0, [pc, #16]	; (8009a24 <USBD_FS_ConfigStrDescriptor+0x18>)
 8009a14:	4621      	mov	r1, r4
 8009a16:	f7ff ff11 	bl	800983c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	bd10      	pop	{r4, pc}
 8009a1e:	bf00      	nop
 8009a20:	2400ea94 	.word	0x2400ea94
 8009a24:	0800f9c4 	.word	0x0800f9c4

08009a28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a28:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a2a:	4c04      	ldr	r4, [pc, #16]	; (8009a3c <USBD_FS_InterfaceStrDescriptor+0x14>)
 8009a2c:	460a      	mov	r2, r1
 8009a2e:	4804      	ldr	r0, [pc, #16]	; (8009a40 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8009a30:	4621      	mov	r1, r4
 8009a32:	f7ff ff03 	bl	800983c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8009a36:	4620      	mov	r0, r4
 8009a38:	bd10      	pop	{r4, pc}
 8009a3a:	bf00      	nop
 8009a3c:	2400ea94 	.word	0x2400ea94
 8009a40:	0800f9d0 	.word	0x0800f9d0

08009a44 <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a44:	4a49      	ldr	r2, [pc, #292]	; (8009b6c <USBD_FS_SerialStrDescriptor+0x128>)
  *length = USB_SIZ_STRING_SERIAL;
 8009a46:	201a      	movs	r0, #26
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a48:	4b49      	ldr	r3, [pc, #292]	; (8009b70 <USBD_FS_SerialStrDescriptor+0x12c>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a4a:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 8009a4c:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 8009a4e:	8008      	strh	r0, [r1, #0]

  if (deviceserial0 != 0)
 8009a50:	18d2      	adds	r2, r2, r3
 8009a52:	d101      	bne.n	8009a58 <USBD_FS_SerialStrDescriptor+0x14>
}
 8009a54:	4847      	ldr	r0, [pc, #284]	; (8009b74 <USBD_FS_SerialStrDescriptor+0x130>)
 8009a56:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 8009a58:	0f13      	lsrs	r3, r2, #28
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a5a:	4947      	ldr	r1, [pc, #284]	; (8009b78 <USBD_FS_SerialStrDescriptor+0x134>)
 8009a5c:	b2d8      	uxtb	r0, r3
    if (((value >> 28)) < 0xA)
 8009a5e:	2b09      	cmp	r3, #9
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a60:	4b44      	ldr	r3, [pc, #272]	; (8009b74 <USBD_FS_SerialStrDescriptor+0x130>)
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a62:	bf94      	ite	ls
 8009a64:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a66:	3037      	addhi	r0, #55	; 0x37
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a68:	6809      	ldr	r1, [r1, #0]
{
 8009a6a:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a6c:	7098      	strb	r0, [r3, #2]
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8009a6e:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8009a70:	f3c2 6003 	ubfx	r0, r2, #24, #4
    pbuf[2 * idx + 1] = 0;
 8009a74:	70dc      	strb	r4, [r3, #3]
    if (((value >> 28)) < 0xA)
 8009a76:	2809      	cmp	r0, #9
 8009a78:	b2c4      	uxtb	r4, r0
 8009a7a:	f3c2 5003 	ubfx	r0, r2, #20, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a7e:	bf94      	ite	ls
 8009a80:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a82:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8009a84:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a86:	711c      	strb	r4, [r3, #4]
    pbuf[2 * idx + 1] = 0;
 8009a88:	f04f 0400 	mov.w	r4, #0
 8009a8c:	715c      	strb	r4, [r3, #5]
 8009a8e:	b2c4      	uxtb	r4, r0
    if (((value >> 28)) < 0xA)
 8009a90:	f3c2 4003 	ubfx	r0, r2, #16, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a94:	bf94      	ite	ls
 8009a96:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a98:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8009a9a:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a9c:	719c      	strb	r4, [r3, #6]
    pbuf[2 * idx + 1] = 0;
 8009a9e:	f04f 0400 	mov.w	r4, #0
 8009aa2:	71dc      	strb	r4, [r3, #7]
 8009aa4:	b2c4      	uxtb	r4, r0
    if (((value >> 28)) < 0xA)
 8009aa6:	f3c2 3003 	ubfx	r0, r2, #12, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8009aaa:	bf94      	ite	ls
 8009aac:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009aae:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8009ab0:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ab2:	721c      	strb	r4, [r3, #8]
    pbuf[2 * idx + 1] = 0;
 8009ab4:	f04f 0400 	mov.w	r4, #0
 8009ab8:	725c      	strb	r4, [r3, #9]
 8009aba:	b2c4      	uxtb	r4, r0
    if (((value >> 28)) < 0xA)
 8009abc:	f3c2 2003 	ubfx	r0, r2, #8, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ac0:	bf94      	ite	ls
 8009ac2:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ac4:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8009ac6:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ac8:	729c      	strb	r4, [r3, #10]
    pbuf[2 * idx + 1] = 0;
 8009aca:	f04f 0400 	mov.w	r4, #0
 8009ace:	72dc      	strb	r4, [r3, #11]
 8009ad0:	b2c4      	uxtb	r4, r0
    if (((value >> 28)) < 0xA)
 8009ad2:	f3c2 1003 	ubfx	r0, r2, #4, #4
 8009ad6:	f002 020f 	and.w	r2, r2, #15
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ada:	bf94      	ite	ls
 8009adc:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ade:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8009ae0:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ae2:	731c      	strb	r4, [r3, #12]
    pbuf[2 * idx + 1] = 0;
 8009ae4:	f04f 0400 	mov.w	r4, #0
 8009ae8:	735c      	strb	r4, [r3, #13]
 8009aea:	b2c4      	uxtb	r4, r0
 8009aec:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8009aee:	bf94      	ite	ls
 8009af0:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009af2:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8009af4:	2a09      	cmp	r2, #9
 8009af6:	ea4f 7211 	mov.w	r2, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009afa:	739c      	strb	r4, [r3, #14]
    pbuf[2 * idx + 1] = 0;
 8009afc:	f04f 0400 	mov.w	r4, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b00:	bf94      	ite	ls
 8009b02:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b04:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8009b06:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8009b08:	73dc      	strb	r4, [r3, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b0a:	7418      	strb	r0, [r3, #16]
    pbuf[2 * idx + 1] = 0;
 8009b0c:	f04f 0000 	mov.w	r0, #0
 8009b10:	7458      	strb	r0, [r3, #17]
 8009b12:	b2d0      	uxtb	r0, r2
    if (((value >> 28)) < 0xA)
 8009b14:	f3c1 6203 	ubfx	r2, r1, #24, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b18:	bf94      	ite	ls
 8009b1a:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b1c:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8009b1e:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b20:	7498      	strb	r0, [r3, #18]
    pbuf[2 * idx + 1] = 0;
 8009b22:	f04f 0000 	mov.w	r0, #0
 8009b26:	74d8      	strb	r0, [r3, #19]
 8009b28:	b2d0      	uxtb	r0, r2
    if (((value >> 28)) < 0xA)
 8009b2a:	f3c1 5203 	ubfx	r2, r1, #20, #4
 8009b2e:	f3c1 4103 	ubfx	r1, r1, #16, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b32:	bf94      	ite	ls
 8009b34:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b36:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8009b38:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b3a:	7518      	strb	r0, [r3, #20]
    pbuf[2 * idx + 1] = 0;
 8009b3c:	f04f 0000 	mov.w	r0, #0
 8009b40:	7558      	strb	r0, [r3, #21]
 8009b42:	b2d0      	uxtb	r0, r2
 8009b44:	b2ca      	uxtb	r2, r1
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b46:	bf94      	ite	ls
 8009b48:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b4a:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8009b4c:	2909      	cmp	r1, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b4e:	7598      	strb	r0, [r3, #22]
    pbuf[2 * idx + 1] = 0;
 8009b50:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b54:	bf94      	ite	ls
 8009b56:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b58:	3237      	addhi	r2, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 8009b5a:	75d8      	strb	r0, [r3, #23]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b5c:	761a      	strb	r2, [r3, #24]
    pbuf[2 * idx + 1] = 0;
 8009b5e:	2200      	movs	r2, #0
}
 8009b60:	4804      	ldr	r0, [pc, #16]	; (8009b74 <USBD_FS_SerialStrDescriptor+0x130>)
    pbuf[2 * idx + 1] = 0;
 8009b62:	765a      	strb	r2, [r3, #25]
}
 8009b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	1ff1e800 	.word	0x1ff1e800
 8009b70:	1ff1e808 	.word	0x1ff1e808
 8009b74:	2400035c 	.word	0x2400035c
 8009b78:	1ff1e804 	.word	0x1ff1e804

08009b7c <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8009b7c:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b7e:	2300      	movs	r3, #0
  if(pcdHandle->Instance==USB_OTG_FS)
 8009b80:	4a18      	ldr	r2, [pc, #96]	; (8009be4 <HAL_PCD_MspInit+0x68>)
{
 8009b82:	b570      	push	{r4, r5, r6, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 8009b84:	4291      	cmp	r1, r2
{
 8009b86:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b88:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8009b8c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009b90:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009b92:	d001      	beq.n	8009b98 <HAL_PCD_MspInit+0x1c>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b94:	b008      	add	sp, #32
 8009b96:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b98:	4c13      	ldr	r4, [pc, #76]	; (8009be8 <HAL_PCD_MspInit+0x6c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8009b9a:	220a      	movs	r2, #10
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009b9c:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ba0:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ba2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ba6:	a903      	add	r1, sp, #12
 8009ba8:	4810      	ldr	r0, [pc, #64]	; (8009bec <HAL_PCD_MspInit+0x70>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009baa:	f043 0301 	orr.w	r3, r3, #1
 8009bae:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8009bb2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009bb6:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bb8:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bbc:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8009bbe:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bc0:	9301      	str	r3, [sp, #4]
 8009bc2:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bc4:	f7fb fa42 	bl	800504c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009bc8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8009bcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009bd0:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8009bd4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8009bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bdc:	9302      	str	r3, [sp, #8]
 8009bde:	9b02      	ldr	r3, [sp, #8]
}
 8009be0:	b008      	add	sp, #32
 8009be2:	bd70      	pop	{r4, r5, r6, pc}
 8009be4:	40080000 	.word	0x40080000
 8009be8:	58024400 	.word	0x58024400
 8009bec:	58020000 	.word	0x58020000

08009bf0 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009bf0:	7802      	ldrb	r2, [r0, #0]
 8009bf2:	b10a      	cbz	r2, 8009bf8 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	4770      	bx	lr
{
 8009bf8:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 8009bfa:	4b15      	ldr	r3, [pc, #84]	; (8009c50 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009bfc:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8009bfe:	2409      	movs	r4, #9
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009c00:	4d14      	ldr	r5, [pc, #80]	; (8009c54 <USBD_LL_Init+0x64>)
  hpcd_USB_OTG_FS.pData = pdev;
 8009c02:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009c06:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009c0a:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009c0c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009c0e:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009c10:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009c12:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009c16:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009c1a:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8009c1e:	e9c3 5400 	strd	r5, r4, [r3]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009c22:	f7fb fbcf 	bl	80053c4 <HAL_PCD_Init>
 8009c26:	b978      	cbnz	r0, 8009c48 <USBD_LL_Init+0x58>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009c28:	2180      	movs	r1, #128	; 0x80
 8009c2a:	4809      	ldr	r0, [pc, #36]	; (8009c50 <USBD_LL_Init+0x60>)
 8009c2c:	f7fb fdb0 	bl	8005790 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009c30:	2240      	movs	r2, #64	; 0x40
 8009c32:	2100      	movs	r1, #0
 8009c34:	4806      	ldr	r0, [pc, #24]	; (8009c50 <USBD_LL_Init+0x60>)
 8009c36:	f7fb fd87 	bl	8005748 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009c3a:	2280      	movs	r2, #128	; 0x80
 8009c3c:	2101      	movs	r1, #1
 8009c3e:	4804      	ldr	r0, [pc, #16]	; (8009c50 <USBD_LL_Init+0x60>)
 8009c40:	f7fb fd82 	bl	8005748 <HAL_PCDEx_SetTxFiFo>
}
 8009c44:	2000      	movs	r0, #0
 8009c46:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8009c48:	f7f8 f884 	bl	8001d54 <Error_Handler>
 8009c4c:	e7ec      	b.n	8009c28 <USBD_LL_Init+0x38>
 8009c4e:	bf00      	nop
 8009c50:	2400ec94 	.word	0x2400ec94
 8009c54:	40080000 	.word	0x40080000

08009c58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c58:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c5a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8009c5e:	f7fb fc49 	bl	80054f4 <HAL_PCD_Start>
 8009c62:	2803      	cmp	r0, #3
 8009c64:	d802      	bhi.n	8009c6c <USBD_LL_Start+0x14>
 8009c66:	4b02      	ldr	r3, [pc, #8]	; (8009c70 <USBD_LL_Start+0x18>)
 8009c68:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8009c6a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 8009c6c:	2003      	movs	r0, #3
}
 8009c6e:	bd08      	pop	{r3, pc}
 8009c70:	0800fa0c 	.word	0x0800fa0c

08009c74 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c74:	b510      	push	{r4, lr}
 8009c76:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c78:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	4622      	mov	r2, r4
 8009c80:	f7fb fc5a 	bl	8005538 <HAL_PCD_EP_Open>
 8009c84:	2803      	cmp	r0, #3
 8009c86:	d802      	bhi.n	8009c8e <USBD_LL_OpenEP+0x1a>
 8009c88:	4b02      	ldr	r3, [pc, #8]	; (8009c94 <USBD_LL_OpenEP+0x20>)
 8009c8a:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8009c8c:	bd10      	pop	{r4, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c8e:	2003      	movs	r0, #3
}
 8009c90:	bd10      	pop	{r4, pc}
 8009c92:	bf00      	nop
 8009c94:	0800fa0c 	.word	0x0800fa0c

08009c98 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c98:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c9a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8009c9e:	f7fb fc85 	bl	80055ac <HAL_PCD_EP_Close>
 8009ca2:	2803      	cmp	r0, #3
 8009ca4:	d802      	bhi.n	8009cac <USBD_LL_CloseEP+0x14>
 8009ca6:	4b02      	ldr	r3, [pc, #8]	; (8009cb0 <USBD_LL_CloseEP+0x18>)
 8009ca8:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8009caa:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009cac:	2003      	movs	r0, #3
}
 8009cae:	bd08      	pop	{r3, pc}
 8009cb0:	0800fa0c 	.word	0x0800fa0c

08009cb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cb4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009cb6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8009cba:	f7fb fd01 	bl	80056c0 <HAL_PCD_EP_SetStall>
 8009cbe:	2803      	cmp	r0, #3
 8009cc0:	d802      	bhi.n	8009cc8 <USBD_LL_StallEP+0x14>
 8009cc2:	4b02      	ldr	r3, [pc, #8]	; (8009ccc <USBD_LL_StallEP+0x18>)
 8009cc4:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8009cc6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009cc8:	2003      	movs	r0, #3
}
 8009cca:	bd08      	pop	{r3, pc}
 8009ccc:	0800fa0c 	.word	0x0800fa0c

08009cd0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cd0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009cd2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8009cd6:	f7fb fccf 	bl	8005678 <HAL_PCD_EP_Transmit>
 8009cda:	2803      	cmp	r0, #3
 8009cdc:	d802      	bhi.n	8009ce4 <USBD_LL_Transmit+0x14>
 8009cde:	4b02      	ldr	r3, [pc, #8]	; (8009ce8 <USBD_LL_Transmit+0x18>)
 8009ce0:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8009ce2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009ce4:	2003      	movs	r0, #3
}
 8009ce6:	bd08      	pop	{r3, pc}
 8009ce8:	0800fa0c 	.word	0x0800fa0c

08009cec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009cee:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8009cf2:	f7fb fc8f 	bl	8005614 <HAL_PCD_EP_Receive>
 8009cf6:	2803      	cmp	r0, #3
 8009cf8:	d802      	bhi.n	8009d00 <USBD_LL_PrepareReceive+0x14>
 8009cfa:	4b02      	ldr	r3, [pc, #8]	; (8009d04 <USBD_LL_PrepareReceive+0x18>)
 8009cfc:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8009cfe:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d00:	2003      	movs	r0, #3
}
 8009d02:	bd08      	pop	{r3, pc}
 8009d04:	0800fa0c 	.word	0x0800fa0c

08009d08 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d08:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8009d0c:	f7fb bcaa 	b.w	8005664 <HAL_PCD_EP_GetRxCount>

08009d10 <arm_fir_decimate_init_f32>:
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d12:	9f07      	ldr	r7, [sp, #28]
 8009d14:	fbb7 f4f2 	udiv	r4, r7, r2
 8009d18:	fb02 7414 	mls	r4, r2, r4, r7
 8009d1c:	b994      	cbnz	r4, 8009d44 <arm_fir_decimate_init_f32+0x34>
 8009d1e:	468e      	mov	lr, r1
 8009d20:	4616      	mov	r6, r2
 8009d22:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8009d26:	4605      	mov	r5, r0
 8009d28:	4472      	add	r2, lr
 8009d2a:	8069      	strh	r1, [r5, #2]
 8009d2c:	6043      	str	r3, [r0, #4]
 8009d2e:	4621      	mov	r1, r4
 8009d30:	443a      	add	r2, r7
 8009d32:	9806      	ldr	r0, [sp, #24]
 8009d34:	0092      	lsls	r2, r2, #2
 8009d36:	f000 f843 	bl	8009dc0 <memset>
 8009d3a:	9b06      	ldr	r3, [sp, #24]
 8009d3c:	702e      	strb	r6, [r5, #0]
 8009d3e:	4620      	mov	r0, r4
 8009d40:	60ab      	str	r3, [r5, #8]
 8009d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d44:	f06f 0001 	mvn.w	r0, #1
 8009d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d4a:	bf00      	nop

08009d4c <__errno>:
 8009d4c:	4b01      	ldr	r3, [pc, #4]	; (8009d54 <__errno+0x8>)
 8009d4e:	6818      	ldr	r0, [r3, #0]
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	24000378 	.word	0x24000378

08009d58 <__libc_init_array>:
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	4e0d      	ldr	r6, [pc, #52]	; (8009d90 <__libc_init_array+0x38>)
 8009d5c:	4c0d      	ldr	r4, [pc, #52]	; (8009d94 <__libc_init_array+0x3c>)
 8009d5e:	1ba4      	subs	r4, r4, r6
 8009d60:	10a4      	asrs	r4, r4, #2
 8009d62:	2500      	movs	r5, #0
 8009d64:	42a5      	cmp	r5, r4
 8009d66:	d109      	bne.n	8009d7c <__libc_init_array+0x24>
 8009d68:	4e0b      	ldr	r6, [pc, #44]	; (8009d98 <__libc_init_array+0x40>)
 8009d6a:	4c0c      	ldr	r4, [pc, #48]	; (8009d9c <__libc_init_array+0x44>)
 8009d6c:	f003 fd66 	bl	800d83c <_init>
 8009d70:	1ba4      	subs	r4, r4, r6
 8009d72:	10a4      	asrs	r4, r4, #2
 8009d74:	2500      	movs	r5, #0
 8009d76:	42a5      	cmp	r5, r4
 8009d78:	d105      	bne.n	8009d86 <__libc_init_array+0x2e>
 8009d7a:	bd70      	pop	{r4, r5, r6, pc}
 8009d7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d80:	4798      	blx	r3
 8009d82:	3501      	adds	r5, #1
 8009d84:	e7ee      	b.n	8009d64 <__libc_init_array+0xc>
 8009d86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d8a:	4798      	blx	r3
 8009d8c:	3501      	adds	r5, #1
 8009d8e:	e7f2      	b.n	8009d76 <__libc_init_array+0x1e>
 8009d90:	0800fe98 	.word	0x0800fe98
 8009d94:	0800fe98 	.word	0x0800fe98
 8009d98:	0800fe98 	.word	0x0800fe98
 8009d9c:	0800fe9c 	.word	0x0800fe9c

08009da0 <malloc>:
 8009da0:	4b02      	ldr	r3, [pc, #8]	; (8009dac <malloc+0xc>)
 8009da2:	4601      	mov	r1, r0
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	f000 b861 	b.w	8009e6c <_malloc_r>
 8009daa:	bf00      	nop
 8009dac:	24000378 	.word	0x24000378

08009db0 <free>:
 8009db0:	4b02      	ldr	r3, [pc, #8]	; (8009dbc <free+0xc>)
 8009db2:	4601      	mov	r1, r0
 8009db4:	6818      	ldr	r0, [r3, #0]
 8009db6:	f000 b80b 	b.w	8009dd0 <_free_r>
 8009dba:	bf00      	nop
 8009dbc:	24000378 	.word	0x24000378

08009dc0 <memset>:
 8009dc0:	4402      	add	r2, r0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d100      	bne.n	8009dca <memset+0xa>
 8009dc8:	4770      	bx	lr
 8009dca:	f803 1b01 	strb.w	r1, [r3], #1
 8009dce:	e7f9      	b.n	8009dc4 <memset+0x4>

08009dd0 <_free_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4605      	mov	r5, r0
 8009dd4:	2900      	cmp	r1, #0
 8009dd6:	d045      	beq.n	8009e64 <_free_r+0x94>
 8009dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ddc:	1f0c      	subs	r4, r1, #4
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	bfb8      	it	lt
 8009de2:	18e4      	addlt	r4, r4, r3
 8009de4:	f001 fb01 	bl	800b3ea <__malloc_lock>
 8009de8:	4a1f      	ldr	r2, [pc, #124]	; (8009e68 <_free_r+0x98>)
 8009dea:	6813      	ldr	r3, [r2, #0]
 8009dec:	4610      	mov	r0, r2
 8009dee:	b933      	cbnz	r3, 8009dfe <_free_r+0x2e>
 8009df0:	6063      	str	r3, [r4, #4]
 8009df2:	6014      	str	r4, [r2, #0]
 8009df4:	4628      	mov	r0, r5
 8009df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dfa:	f001 baf7 	b.w	800b3ec <__malloc_unlock>
 8009dfe:	42a3      	cmp	r3, r4
 8009e00:	d90c      	bls.n	8009e1c <_free_r+0x4c>
 8009e02:	6821      	ldr	r1, [r4, #0]
 8009e04:	1862      	adds	r2, r4, r1
 8009e06:	4293      	cmp	r3, r2
 8009e08:	bf04      	itt	eq
 8009e0a:	681a      	ldreq	r2, [r3, #0]
 8009e0c:	685b      	ldreq	r3, [r3, #4]
 8009e0e:	6063      	str	r3, [r4, #4]
 8009e10:	bf04      	itt	eq
 8009e12:	1852      	addeq	r2, r2, r1
 8009e14:	6022      	streq	r2, [r4, #0]
 8009e16:	6004      	str	r4, [r0, #0]
 8009e18:	e7ec      	b.n	8009df4 <_free_r+0x24>
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	b10a      	cbz	r2, 8009e24 <_free_r+0x54>
 8009e20:	42a2      	cmp	r2, r4
 8009e22:	d9fa      	bls.n	8009e1a <_free_r+0x4a>
 8009e24:	6819      	ldr	r1, [r3, #0]
 8009e26:	1858      	adds	r0, r3, r1
 8009e28:	42a0      	cmp	r0, r4
 8009e2a:	d10b      	bne.n	8009e44 <_free_r+0x74>
 8009e2c:	6820      	ldr	r0, [r4, #0]
 8009e2e:	4401      	add	r1, r0
 8009e30:	1858      	adds	r0, r3, r1
 8009e32:	4282      	cmp	r2, r0
 8009e34:	6019      	str	r1, [r3, #0]
 8009e36:	d1dd      	bne.n	8009df4 <_free_r+0x24>
 8009e38:	6810      	ldr	r0, [r2, #0]
 8009e3a:	6852      	ldr	r2, [r2, #4]
 8009e3c:	605a      	str	r2, [r3, #4]
 8009e3e:	4401      	add	r1, r0
 8009e40:	6019      	str	r1, [r3, #0]
 8009e42:	e7d7      	b.n	8009df4 <_free_r+0x24>
 8009e44:	d902      	bls.n	8009e4c <_free_r+0x7c>
 8009e46:	230c      	movs	r3, #12
 8009e48:	602b      	str	r3, [r5, #0]
 8009e4a:	e7d3      	b.n	8009df4 <_free_r+0x24>
 8009e4c:	6820      	ldr	r0, [r4, #0]
 8009e4e:	1821      	adds	r1, r4, r0
 8009e50:	428a      	cmp	r2, r1
 8009e52:	bf04      	itt	eq
 8009e54:	6811      	ldreq	r1, [r2, #0]
 8009e56:	6852      	ldreq	r2, [r2, #4]
 8009e58:	6062      	str	r2, [r4, #4]
 8009e5a:	bf04      	itt	eq
 8009e5c:	1809      	addeq	r1, r1, r0
 8009e5e:	6021      	streq	r1, [r4, #0]
 8009e60:	605c      	str	r4, [r3, #4]
 8009e62:	e7c7      	b.n	8009df4 <_free_r+0x24>
 8009e64:	bd38      	pop	{r3, r4, r5, pc}
 8009e66:	bf00      	nop
 8009e68:	24000654 	.word	0x24000654

08009e6c <_malloc_r>:
 8009e6c:	b570      	push	{r4, r5, r6, lr}
 8009e6e:	1ccd      	adds	r5, r1, #3
 8009e70:	f025 0503 	bic.w	r5, r5, #3
 8009e74:	3508      	adds	r5, #8
 8009e76:	2d0c      	cmp	r5, #12
 8009e78:	bf38      	it	cc
 8009e7a:	250c      	movcc	r5, #12
 8009e7c:	2d00      	cmp	r5, #0
 8009e7e:	4606      	mov	r6, r0
 8009e80:	db01      	blt.n	8009e86 <_malloc_r+0x1a>
 8009e82:	42a9      	cmp	r1, r5
 8009e84:	d903      	bls.n	8009e8e <_malloc_r+0x22>
 8009e86:	230c      	movs	r3, #12
 8009e88:	6033      	str	r3, [r6, #0]
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	bd70      	pop	{r4, r5, r6, pc}
 8009e8e:	f001 faac 	bl	800b3ea <__malloc_lock>
 8009e92:	4a21      	ldr	r2, [pc, #132]	; (8009f18 <_malloc_r+0xac>)
 8009e94:	6814      	ldr	r4, [r2, #0]
 8009e96:	4621      	mov	r1, r4
 8009e98:	b991      	cbnz	r1, 8009ec0 <_malloc_r+0x54>
 8009e9a:	4c20      	ldr	r4, [pc, #128]	; (8009f1c <_malloc_r+0xb0>)
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	b91b      	cbnz	r3, 8009ea8 <_malloc_r+0x3c>
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	f000 fc79 	bl	800a798 <_sbrk_r>
 8009ea6:	6020      	str	r0, [r4, #0]
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f000 fc74 	bl	800a798 <_sbrk_r>
 8009eb0:	1c43      	adds	r3, r0, #1
 8009eb2:	d124      	bne.n	8009efe <_malloc_r+0x92>
 8009eb4:	230c      	movs	r3, #12
 8009eb6:	6033      	str	r3, [r6, #0]
 8009eb8:	4630      	mov	r0, r6
 8009eba:	f001 fa97 	bl	800b3ec <__malloc_unlock>
 8009ebe:	e7e4      	b.n	8009e8a <_malloc_r+0x1e>
 8009ec0:	680b      	ldr	r3, [r1, #0]
 8009ec2:	1b5b      	subs	r3, r3, r5
 8009ec4:	d418      	bmi.n	8009ef8 <_malloc_r+0x8c>
 8009ec6:	2b0b      	cmp	r3, #11
 8009ec8:	d90f      	bls.n	8009eea <_malloc_r+0x7e>
 8009eca:	600b      	str	r3, [r1, #0]
 8009ecc:	50cd      	str	r5, [r1, r3]
 8009ece:	18cc      	adds	r4, r1, r3
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	f001 fa8b 	bl	800b3ec <__malloc_unlock>
 8009ed6:	f104 000b 	add.w	r0, r4, #11
 8009eda:	1d23      	adds	r3, r4, #4
 8009edc:	f020 0007 	bic.w	r0, r0, #7
 8009ee0:	1ac3      	subs	r3, r0, r3
 8009ee2:	d0d3      	beq.n	8009e8c <_malloc_r+0x20>
 8009ee4:	425a      	negs	r2, r3
 8009ee6:	50e2      	str	r2, [r4, r3]
 8009ee8:	e7d0      	b.n	8009e8c <_malloc_r+0x20>
 8009eea:	428c      	cmp	r4, r1
 8009eec:	684b      	ldr	r3, [r1, #4]
 8009eee:	bf16      	itet	ne
 8009ef0:	6063      	strne	r3, [r4, #4]
 8009ef2:	6013      	streq	r3, [r2, #0]
 8009ef4:	460c      	movne	r4, r1
 8009ef6:	e7eb      	b.n	8009ed0 <_malloc_r+0x64>
 8009ef8:	460c      	mov	r4, r1
 8009efa:	6849      	ldr	r1, [r1, #4]
 8009efc:	e7cc      	b.n	8009e98 <_malloc_r+0x2c>
 8009efe:	1cc4      	adds	r4, r0, #3
 8009f00:	f024 0403 	bic.w	r4, r4, #3
 8009f04:	42a0      	cmp	r0, r4
 8009f06:	d005      	beq.n	8009f14 <_malloc_r+0xa8>
 8009f08:	1a21      	subs	r1, r4, r0
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f000 fc44 	bl	800a798 <_sbrk_r>
 8009f10:	3001      	adds	r0, #1
 8009f12:	d0cf      	beq.n	8009eb4 <_malloc_r+0x48>
 8009f14:	6025      	str	r5, [r4, #0]
 8009f16:	e7db      	b.n	8009ed0 <_malloc_r+0x64>
 8009f18:	24000654 	.word	0x24000654
 8009f1c:	24000658 	.word	0x24000658

08009f20 <__cvt>:
 8009f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f22:	ed2d 8b02 	vpush	{d8}
 8009f26:	eeb0 8b40 	vmov.f64	d8, d0
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	4617      	mov	r7, r2
 8009f2e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009f30:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009f32:	ee18 2a90 	vmov	r2, s17
 8009f36:	f025 0520 	bic.w	r5, r5, #32
 8009f3a:	2a00      	cmp	r2, #0
 8009f3c:	bfb6      	itet	lt
 8009f3e:	222d      	movlt	r2, #45	; 0x2d
 8009f40:	2200      	movge	r2, #0
 8009f42:	eeb1 8b40 	vneglt.f64	d8, d0
 8009f46:	2d46      	cmp	r5, #70	; 0x46
 8009f48:	460c      	mov	r4, r1
 8009f4a:	701a      	strb	r2, [r3, #0]
 8009f4c:	d004      	beq.n	8009f58 <__cvt+0x38>
 8009f4e:	2d45      	cmp	r5, #69	; 0x45
 8009f50:	d100      	bne.n	8009f54 <__cvt+0x34>
 8009f52:	3401      	adds	r4, #1
 8009f54:	2102      	movs	r1, #2
 8009f56:	e000      	b.n	8009f5a <__cvt+0x3a>
 8009f58:	2103      	movs	r1, #3
 8009f5a:	ab03      	add	r3, sp, #12
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	ab02      	add	r3, sp, #8
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	4622      	mov	r2, r4
 8009f64:	4633      	mov	r3, r6
 8009f66:	eeb0 0b48 	vmov.f64	d0, d8
 8009f6a:	f000 fcd9 	bl	800a920 <_dtoa_r>
 8009f6e:	2d47      	cmp	r5, #71	; 0x47
 8009f70:	d101      	bne.n	8009f76 <__cvt+0x56>
 8009f72:	07fb      	lsls	r3, r7, #31
 8009f74:	d51e      	bpl.n	8009fb4 <__cvt+0x94>
 8009f76:	2d46      	cmp	r5, #70	; 0x46
 8009f78:	eb00 0304 	add.w	r3, r0, r4
 8009f7c:	d10c      	bne.n	8009f98 <__cvt+0x78>
 8009f7e:	7802      	ldrb	r2, [r0, #0]
 8009f80:	2a30      	cmp	r2, #48	; 0x30
 8009f82:	d107      	bne.n	8009f94 <__cvt+0x74>
 8009f84:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f8c:	bf1c      	itt	ne
 8009f8e:	f1c4 0401 	rsbne	r4, r4, #1
 8009f92:	6034      	strne	r4, [r6, #0]
 8009f94:	6832      	ldr	r2, [r6, #0]
 8009f96:	4413      	add	r3, r2
 8009f98:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fa0:	d007      	beq.n	8009fb2 <__cvt+0x92>
 8009fa2:	2130      	movs	r1, #48	; 0x30
 8009fa4:	9a03      	ldr	r2, [sp, #12]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d204      	bcs.n	8009fb4 <__cvt+0x94>
 8009faa:	1c54      	adds	r4, r2, #1
 8009fac:	9403      	str	r4, [sp, #12]
 8009fae:	7011      	strb	r1, [r2, #0]
 8009fb0:	e7f8      	b.n	8009fa4 <__cvt+0x84>
 8009fb2:	9303      	str	r3, [sp, #12]
 8009fb4:	9b03      	ldr	r3, [sp, #12]
 8009fb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fb8:	1a1b      	subs	r3, r3, r0
 8009fba:	6013      	str	r3, [r2, #0]
 8009fbc:	b005      	add	sp, #20
 8009fbe:	ecbd 8b02 	vpop	{d8}
 8009fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009fc4 <__exponent>:
 8009fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fc6:	2900      	cmp	r1, #0
 8009fc8:	4604      	mov	r4, r0
 8009fca:	bfba      	itte	lt
 8009fcc:	4249      	neglt	r1, r1
 8009fce:	232d      	movlt	r3, #45	; 0x2d
 8009fd0:	232b      	movge	r3, #43	; 0x2b
 8009fd2:	2909      	cmp	r1, #9
 8009fd4:	f804 2b02 	strb.w	r2, [r4], #2
 8009fd8:	7043      	strb	r3, [r0, #1]
 8009fda:	dd20      	ble.n	800a01e <__exponent+0x5a>
 8009fdc:	f10d 0307 	add.w	r3, sp, #7
 8009fe0:	461f      	mov	r7, r3
 8009fe2:	260a      	movs	r6, #10
 8009fe4:	fb91 f5f6 	sdiv	r5, r1, r6
 8009fe8:	fb06 1115 	mls	r1, r6, r5, r1
 8009fec:	3130      	adds	r1, #48	; 0x30
 8009fee:	2d09      	cmp	r5, #9
 8009ff0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009ff4:	f103 32ff 	add.w	r2, r3, #4294967295
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	dc09      	bgt.n	800a010 <__exponent+0x4c>
 8009ffc:	3130      	adds	r1, #48	; 0x30
 8009ffe:	3b02      	subs	r3, #2
 800a000:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a004:	42bb      	cmp	r3, r7
 800a006:	4622      	mov	r2, r4
 800a008:	d304      	bcc.n	800a014 <__exponent+0x50>
 800a00a:	1a10      	subs	r0, r2, r0
 800a00c:	b003      	add	sp, #12
 800a00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a010:	4613      	mov	r3, r2
 800a012:	e7e7      	b.n	8009fe4 <__exponent+0x20>
 800a014:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a018:	f804 2b01 	strb.w	r2, [r4], #1
 800a01c:	e7f2      	b.n	800a004 <__exponent+0x40>
 800a01e:	2330      	movs	r3, #48	; 0x30
 800a020:	4419      	add	r1, r3
 800a022:	7083      	strb	r3, [r0, #2]
 800a024:	1d02      	adds	r2, r0, #4
 800a026:	70c1      	strb	r1, [r0, #3]
 800a028:	e7ef      	b.n	800a00a <__exponent+0x46>
 800a02a:	0000      	movs	r0, r0
 800a02c:	0000      	movs	r0, r0
	...

0800a030 <_printf_float>:
 800a030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a034:	b08d      	sub	sp, #52	; 0x34
 800a036:	460c      	mov	r4, r1
 800a038:	4616      	mov	r6, r2
 800a03a:	461f      	mov	r7, r3
 800a03c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a040:	4605      	mov	r5, r0
 800a042:	f001 f9b9 	bl	800b3b8 <_localeconv_r>
 800a046:	f8d0 b000 	ldr.w	fp, [r0]
 800a04a:	4658      	mov	r0, fp
 800a04c:	f7f6 f948 	bl	80002e0 <strlen>
 800a050:	2300      	movs	r3, #0
 800a052:	930a      	str	r3, [sp, #40]	; 0x28
 800a054:	f8d8 3000 	ldr.w	r3, [r8]
 800a058:	9005      	str	r0, [sp, #20]
 800a05a:	3307      	adds	r3, #7
 800a05c:	f023 0307 	bic.w	r3, r3, #7
 800a060:	f103 0108 	add.w	r1, r3, #8
 800a064:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a068:	6822      	ldr	r2, [r4, #0]
 800a06a:	f8c8 1000 	str.w	r1, [r8]
 800a06e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a072:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800a076:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800a300 <_printf_float+0x2d0>
 800a07a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800a07e:	eeb0 6bc0 	vabs.f64	d6, d0
 800a082:	eeb4 6b47 	vcmp.f64	d6, d7
 800a086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a08a:	dd24      	ble.n	800a0d6 <_printf_float+0xa6>
 800a08c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a094:	d502      	bpl.n	800a09c <_printf_float+0x6c>
 800a096:	232d      	movs	r3, #45	; 0x2d
 800a098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a09c:	499a      	ldr	r1, [pc, #616]	; (800a308 <_printf_float+0x2d8>)
 800a09e:	4b9b      	ldr	r3, [pc, #620]	; (800a30c <_printf_float+0x2dc>)
 800a0a0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a0a4:	bf8c      	ite	hi
 800a0a6:	4688      	movhi	r8, r1
 800a0a8:	4698      	movls	r8, r3
 800a0aa:	f022 0204 	bic.w	r2, r2, #4
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	6123      	str	r3, [r4, #16]
 800a0b2:	6022      	str	r2, [r4, #0]
 800a0b4:	f04f 0a00 	mov.w	sl, #0
 800a0b8:	9700      	str	r7, [sp, #0]
 800a0ba:	4633      	mov	r3, r6
 800a0bc:	aa0b      	add	r2, sp, #44	; 0x2c
 800a0be:	4621      	mov	r1, r4
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	f000 f9e1 	bl	800a488 <_printf_common>
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	f040 8089 	bne.w	800a1de <_printf_float+0x1ae>
 800a0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d0:	b00d      	add	sp, #52	; 0x34
 800a0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d6:	eeb4 0b40 	vcmp.f64	d0, d0
 800a0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0de:	d702      	bvc.n	800a0e6 <_printf_float+0xb6>
 800a0e0:	498b      	ldr	r1, [pc, #556]	; (800a310 <_printf_float+0x2e0>)
 800a0e2:	4b8c      	ldr	r3, [pc, #560]	; (800a314 <_printf_float+0x2e4>)
 800a0e4:	e7dc      	b.n	800a0a0 <_printf_float+0x70>
 800a0e6:	6861      	ldr	r1, [r4, #4]
 800a0e8:	1c4b      	adds	r3, r1, #1
 800a0ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a0ee:	ab0a      	add	r3, sp, #40	; 0x28
 800a0f0:	a809      	add	r0, sp, #36	; 0x24
 800a0f2:	d13b      	bne.n	800a16c <_printf_float+0x13c>
 800a0f4:	2106      	movs	r1, #6
 800a0f6:	6061      	str	r1, [r4, #4]
 800a0f8:	f04f 0c00 	mov.w	ip, #0
 800a0fc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800a100:	e9cd 0900 	strd	r0, r9, [sp]
 800a104:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a108:	6022      	str	r2, [r4, #0]
 800a10a:	6861      	ldr	r1, [r4, #4]
 800a10c:	4628      	mov	r0, r5
 800a10e:	f7ff ff07 	bl	8009f20 <__cvt>
 800a112:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800a116:	2b47      	cmp	r3, #71	; 0x47
 800a118:	4680      	mov	r8, r0
 800a11a:	d109      	bne.n	800a130 <_printf_float+0x100>
 800a11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a11e:	1cd8      	adds	r0, r3, #3
 800a120:	db02      	blt.n	800a128 <_printf_float+0xf8>
 800a122:	6862      	ldr	r2, [r4, #4]
 800a124:	4293      	cmp	r3, r2
 800a126:	dd47      	ble.n	800a1b8 <_printf_float+0x188>
 800a128:	f1a9 0902 	sub.w	r9, r9, #2
 800a12c:	fa5f f989 	uxtb.w	r9, r9
 800a130:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a134:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a136:	d824      	bhi.n	800a182 <_printf_float+0x152>
 800a138:	3901      	subs	r1, #1
 800a13a:	464a      	mov	r2, r9
 800a13c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a140:	9109      	str	r1, [sp, #36]	; 0x24
 800a142:	f7ff ff3f 	bl	8009fc4 <__exponent>
 800a146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a148:	1813      	adds	r3, r2, r0
 800a14a:	2a01      	cmp	r2, #1
 800a14c:	4682      	mov	sl, r0
 800a14e:	6123      	str	r3, [r4, #16]
 800a150:	dc02      	bgt.n	800a158 <_printf_float+0x128>
 800a152:	6822      	ldr	r2, [r4, #0]
 800a154:	07d1      	lsls	r1, r2, #31
 800a156:	d501      	bpl.n	800a15c <_printf_float+0x12c>
 800a158:	3301      	adds	r3, #1
 800a15a:	6123      	str	r3, [r4, #16]
 800a15c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a160:	2b00      	cmp	r3, #0
 800a162:	d0a9      	beq.n	800a0b8 <_printf_float+0x88>
 800a164:	232d      	movs	r3, #45	; 0x2d
 800a166:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a16a:	e7a5      	b.n	800a0b8 <_printf_float+0x88>
 800a16c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800a170:	f000 8178 	beq.w	800a464 <_printf_float+0x434>
 800a174:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a178:	d1be      	bne.n	800a0f8 <_printf_float+0xc8>
 800a17a:	2900      	cmp	r1, #0
 800a17c:	d1bc      	bne.n	800a0f8 <_printf_float+0xc8>
 800a17e:	2101      	movs	r1, #1
 800a180:	e7b9      	b.n	800a0f6 <_printf_float+0xc6>
 800a182:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a186:	d119      	bne.n	800a1bc <_printf_float+0x18c>
 800a188:	2900      	cmp	r1, #0
 800a18a:	6863      	ldr	r3, [r4, #4]
 800a18c:	dd0c      	ble.n	800a1a8 <_printf_float+0x178>
 800a18e:	6121      	str	r1, [r4, #16]
 800a190:	b913      	cbnz	r3, 800a198 <_printf_float+0x168>
 800a192:	6822      	ldr	r2, [r4, #0]
 800a194:	07d2      	lsls	r2, r2, #31
 800a196:	d502      	bpl.n	800a19e <_printf_float+0x16e>
 800a198:	3301      	adds	r3, #1
 800a19a:	440b      	add	r3, r1
 800a19c:	6123      	str	r3, [r4, #16]
 800a19e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a0:	65a3      	str	r3, [r4, #88]	; 0x58
 800a1a2:	f04f 0a00 	mov.w	sl, #0
 800a1a6:	e7d9      	b.n	800a15c <_printf_float+0x12c>
 800a1a8:	b913      	cbnz	r3, 800a1b0 <_printf_float+0x180>
 800a1aa:	6822      	ldr	r2, [r4, #0]
 800a1ac:	07d0      	lsls	r0, r2, #31
 800a1ae:	d501      	bpl.n	800a1b4 <_printf_float+0x184>
 800a1b0:	3302      	adds	r3, #2
 800a1b2:	e7f3      	b.n	800a19c <_printf_float+0x16c>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e7f1      	b.n	800a19c <_printf_float+0x16c>
 800a1b8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a1bc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	db05      	blt.n	800a1d0 <_printf_float+0x1a0>
 800a1c4:	6822      	ldr	r2, [r4, #0]
 800a1c6:	6123      	str	r3, [r4, #16]
 800a1c8:	07d1      	lsls	r1, r2, #31
 800a1ca:	d5e8      	bpl.n	800a19e <_printf_float+0x16e>
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	e7e5      	b.n	800a19c <_printf_float+0x16c>
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	bfd4      	ite	le
 800a1d4:	f1c3 0302 	rsble	r3, r3, #2
 800a1d8:	2301      	movgt	r3, #1
 800a1da:	4413      	add	r3, r2
 800a1dc:	e7de      	b.n	800a19c <_printf_float+0x16c>
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	055a      	lsls	r2, r3, #21
 800a1e2:	d407      	bmi.n	800a1f4 <_printf_float+0x1c4>
 800a1e4:	6923      	ldr	r3, [r4, #16]
 800a1e6:	4642      	mov	r2, r8
 800a1e8:	4631      	mov	r1, r6
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	47b8      	blx	r7
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	d12a      	bne.n	800a248 <_printf_float+0x218>
 800a1f2:	e76b      	b.n	800a0cc <_printf_float+0x9c>
 800a1f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a1f8:	f240 80de 	bls.w	800a3b8 <_printf_float+0x388>
 800a1fc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a200:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a208:	d133      	bne.n	800a272 <_printf_float+0x242>
 800a20a:	2301      	movs	r3, #1
 800a20c:	4a42      	ldr	r2, [pc, #264]	; (800a318 <_printf_float+0x2e8>)
 800a20e:	4631      	mov	r1, r6
 800a210:	4628      	mov	r0, r5
 800a212:	47b8      	blx	r7
 800a214:	3001      	adds	r0, #1
 800a216:	f43f af59 	beq.w	800a0cc <_printf_float+0x9c>
 800a21a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a21e:	429a      	cmp	r2, r3
 800a220:	db02      	blt.n	800a228 <_printf_float+0x1f8>
 800a222:	6823      	ldr	r3, [r4, #0]
 800a224:	07d8      	lsls	r0, r3, #31
 800a226:	d50f      	bpl.n	800a248 <_printf_float+0x218>
 800a228:	9b05      	ldr	r3, [sp, #20]
 800a22a:	465a      	mov	r2, fp
 800a22c:	4631      	mov	r1, r6
 800a22e:	4628      	mov	r0, r5
 800a230:	47b8      	blx	r7
 800a232:	3001      	adds	r0, #1
 800a234:	f43f af4a 	beq.w	800a0cc <_printf_float+0x9c>
 800a238:	f04f 0800 	mov.w	r8, #0
 800a23c:	f104 091a 	add.w	r9, r4, #26
 800a240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a242:	3b01      	subs	r3, #1
 800a244:	4543      	cmp	r3, r8
 800a246:	dc09      	bgt.n	800a25c <_printf_float+0x22c>
 800a248:	6823      	ldr	r3, [r4, #0]
 800a24a:	079b      	lsls	r3, r3, #30
 800a24c:	f100 8105 	bmi.w	800a45a <_printf_float+0x42a>
 800a250:	68e0      	ldr	r0, [r4, #12]
 800a252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a254:	4298      	cmp	r0, r3
 800a256:	bfb8      	it	lt
 800a258:	4618      	movlt	r0, r3
 800a25a:	e739      	b.n	800a0d0 <_printf_float+0xa0>
 800a25c:	2301      	movs	r3, #1
 800a25e:	464a      	mov	r2, r9
 800a260:	4631      	mov	r1, r6
 800a262:	4628      	mov	r0, r5
 800a264:	47b8      	blx	r7
 800a266:	3001      	adds	r0, #1
 800a268:	f43f af30 	beq.w	800a0cc <_printf_float+0x9c>
 800a26c:	f108 0801 	add.w	r8, r8, #1
 800a270:	e7e6      	b.n	800a240 <_printf_float+0x210>
 800a272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a274:	2b00      	cmp	r3, #0
 800a276:	dc2b      	bgt.n	800a2d0 <_printf_float+0x2a0>
 800a278:	2301      	movs	r3, #1
 800a27a:	4a27      	ldr	r2, [pc, #156]	; (800a318 <_printf_float+0x2e8>)
 800a27c:	4631      	mov	r1, r6
 800a27e:	4628      	mov	r0, r5
 800a280:	47b8      	blx	r7
 800a282:	3001      	adds	r0, #1
 800a284:	f43f af22 	beq.w	800a0cc <_printf_float+0x9c>
 800a288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28a:	b923      	cbnz	r3, 800a296 <_printf_float+0x266>
 800a28c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a28e:	b913      	cbnz	r3, 800a296 <_printf_float+0x266>
 800a290:	6823      	ldr	r3, [r4, #0]
 800a292:	07d9      	lsls	r1, r3, #31
 800a294:	d5d8      	bpl.n	800a248 <_printf_float+0x218>
 800a296:	9b05      	ldr	r3, [sp, #20]
 800a298:	465a      	mov	r2, fp
 800a29a:	4631      	mov	r1, r6
 800a29c:	4628      	mov	r0, r5
 800a29e:	47b8      	blx	r7
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	f43f af13 	beq.w	800a0cc <_printf_float+0x9c>
 800a2a6:	f04f 0900 	mov.w	r9, #0
 800a2aa:	f104 0a1a 	add.w	sl, r4, #26
 800a2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2b0:	425b      	negs	r3, r3
 800a2b2:	454b      	cmp	r3, r9
 800a2b4:	dc01      	bgt.n	800a2ba <_printf_float+0x28a>
 800a2b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2b8:	e795      	b.n	800a1e6 <_printf_float+0x1b6>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	4652      	mov	r2, sl
 800a2be:	4631      	mov	r1, r6
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	47b8      	blx	r7
 800a2c4:	3001      	adds	r0, #1
 800a2c6:	f43f af01 	beq.w	800a0cc <_printf_float+0x9c>
 800a2ca:	f109 0901 	add.w	r9, r9, #1
 800a2ce:	e7ee      	b.n	800a2ae <_printf_float+0x27e>
 800a2d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	bfa8      	it	ge
 800a2d8:	461a      	movge	r2, r3
 800a2da:	2a00      	cmp	r2, #0
 800a2dc:	4691      	mov	r9, r2
 800a2de:	dd07      	ble.n	800a2f0 <_printf_float+0x2c0>
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	4642      	mov	r2, r8
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	47b8      	blx	r7
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	f43f aeee 	beq.w	800a0cc <_printf_float+0x9c>
 800a2f0:	f104 031a 	add.w	r3, r4, #26
 800a2f4:	f04f 0a00 	mov.w	sl, #0
 800a2f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2fc:	9307      	str	r3, [sp, #28]
 800a2fe:	e017      	b.n	800a330 <_printf_float+0x300>
 800a300:	ffffffff 	.word	0xffffffff
 800a304:	7fefffff 	.word	0x7fefffff
 800a308:	0800fa14 	.word	0x0800fa14
 800a30c:	0800fa10 	.word	0x0800fa10
 800a310:	0800fa1c 	.word	0x0800fa1c
 800a314:	0800fa18 	.word	0x0800fa18
 800a318:	0800fc6c 	.word	0x0800fc6c
 800a31c:	2301      	movs	r3, #1
 800a31e:	9a07      	ldr	r2, [sp, #28]
 800a320:	4631      	mov	r1, r6
 800a322:	4628      	mov	r0, r5
 800a324:	47b8      	blx	r7
 800a326:	3001      	adds	r0, #1
 800a328:	f43f aed0 	beq.w	800a0cc <_printf_float+0x9c>
 800a32c:	f10a 0a01 	add.w	sl, sl, #1
 800a330:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a332:	9306      	str	r3, [sp, #24]
 800a334:	eba3 0309 	sub.w	r3, r3, r9
 800a338:	4553      	cmp	r3, sl
 800a33a:	dcef      	bgt.n	800a31c <_printf_float+0x2ec>
 800a33c:	9b06      	ldr	r3, [sp, #24]
 800a33e:	4498      	add	r8, r3
 800a340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a344:	429a      	cmp	r2, r3
 800a346:	db15      	blt.n	800a374 <_printf_float+0x344>
 800a348:	6823      	ldr	r3, [r4, #0]
 800a34a:	07da      	lsls	r2, r3, #31
 800a34c:	d412      	bmi.n	800a374 <_printf_float+0x344>
 800a34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a350:	9a06      	ldr	r2, [sp, #24]
 800a352:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a354:	1a9a      	subs	r2, r3, r2
 800a356:	eba3 0a01 	sub.w	sl, r3, r1
 800a35a:	4592      	cmp	sl, r2
 800a35c:	bfa8      	it	ge
 800a35e:	4692      	movge	sl, r2
 800a360:	f1ba 0f00 	cmp.w	sl, #0
 800a364:	dc0e      	bgt.n	800a384 <_printf_float+0x354>
 800a366:	f04f 0800 	mov.w	r8, #0
 800a36a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a36e:	f104 091a 	add.w	r9, r4, #26
 800a372:	e019      	b.n	800a3a8 <_printf_float+0x378>
 800a374:	9b05      	ldr	r3, [sp, #20]
 800a376:	465a      	mov	r2, fp
 800a378:	4631      	mov	r1, r6
 800a37a:	4628      	mov	r0, r5
 800a37c:	47b8      	blx	r7
 800a37e:	3001      	adds	r0, #1
 800a380:	d1e5      	bne.n	800a34e <_printf_float+0x31e>
 800a382:	e6a3      	b.n	800a0cc <_printf_float+0x9c>
 800a384:	4653      	mov	r3, sl
 800a386:	4642      	mov	r2, r8
 800a388:	4631      	mov	r1, r6
 800a38a:	4628      	mov	r0, r5
 800a38c:	47b8      	blx	r7
 800a38e:	3001      	adds	r0, #1
 800a390:	d1e9      	bne.n	800a366 <_printf_float+0x336>
 800a392:	e69b      	b.n	800a0cc <_printf_float+0x9c>
 800a394:	2301      	movs	r3, #1
 800a396:	464a      	mov	r2, r9
 800a398:	4631      	mov	r1, r6
 800a39a:	4628      	mov	r0, r5
 800a39c:	47b8      	blx	r7
 800a39e:	3001      	adds	r0, #1
 800a3a0:	f43f ae94 	beq.w	800a0cc <_printf_float+0x9c>
 800a3a4:	f108 0801 	add.w	r8, r8, #1
 800a3a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3ac:	1a9b      	subs	r3, r3, r2
 800a3ae:	eba3 030a 	sub.w	r3, r3, sl
 800a3b2:	4543      	cmp	r3, r8
 800a3b4:	dcee      	bgt.n	800a394 <_printf_float+0x364>
 800a3b6:	e747      	b.n	800a248 <_printf_float+0x218>
 800a3b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3ba:	2a01      	cmp	r2, #1
 800a3bc:	dc01      	bgt.n	800a3c2 <_printf_float+0x392>
 800a3be:	07db      	lsls	r3, r3, #31
 800a3c0:	d539      	bpl.n	800a436 <_printf_float+0x406>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	4642      	mov	r2, r8
 800a3c6:	4631      	mov	r1, r6
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	47b8      	blx	r7
 800a3cc:	3001      	adds	r0, #1
 800a3ce:	f43f ae7d 	beq.w	800a0cc <_printf_float+0x9c>
 800a3d2:	9b05      	ldr	r3, [sp, #20]
 800a3d4:	465a      	mov	r2, fp
 800a3d6:	4631      	mov	r1, r6
 800a3d8:	4628      	mov	r0, r5
 800a3da:	47b8      	blx	r7
 800a3dc:	3001      	adds	r0, #1
 800a3de:	f108 0801 	add.w	r8, r8, #1
 800a3e2:	f43f ae73 	beq.w	800a0cc <_printf_float+0x9c>
 800a3e6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a3ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3f4:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3f8:	d018      	beq.n	800a42c <_printf_float+0x3fc>
 800a3fa:	4642      	mov	r2, r8
 800a3fc:	4631      	mov	r1, r6
 800a3fe:	4628      	mov	r0, r5
 800a400:	47b8      	blx	r7
 800a402:	3001      	adds	r0, #1
 800a404:	d10e      	bne.n	800a424 <_printf_float+0x3f4>
 800a406:	e661      	b.n	800a0cc <_printf_float+0x9c>
 800a408:	2301      	movs	r3, #1
 800a40a:	464a      	mov	r2, r9
 800a40c:	4631      	mov	r1, r6
 800a40e:	4628      	mov	r0, r5
 800a410:	47b8      	blx	r7
 800a412:	3001      	adds	r0, #1
 800a414:	f43f ae5a 	beq.w	800a0cc <_printf_float+0x9c>
 800a418:	f108 0801 	add.w	r8, r8, #1
 800a41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a41e:	3b01      	subs	r3, #1
 800a420:	4543      	cmp	r3, r8
 800a422:	dcf1      	bgt.n	800a408 <_printf_float+0x3d8>
 800a424:	4653      	mov	r3, sl
 800a426:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a42a:	e6dd      	b.n	800a1e8 <_printf_float+0x1b8>
 800a42c:	f04f 0800 	mov.w	r8, #0
 800a430:	f104 091a 	add.w	r9, r4, #26
 800a434:	e7f2      	b.n	800a41c <_printf_float+0x3ec>
 800a436:	2301      	movs	r3, #1
 800a438:	e7df      	b.n	800a3fa <_printf_float+0x3ca>
 800a43a:	2301      	movs	r3, #1
 800a43c:	464a      	mov	r2, r9
 800a43e:	4631      	mov	r1, r6
 800a440:	4628      	mov	r0, r5
 800a442:	47b8      	blx	r7
 800a444:	3001      	adds	r0, #1
 800a446:	f43f ae41 	beq.w	800a0cc <_printf_float+0x9c>
 800a44a:	f108 0801 	add.w	r8, r8, #1
 800a44e:	68e3      	ldr	r3, [r4, #12]
 800a450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a452:	1a9b      	subs	r3, r3, r2
 800a454:	4543      	cmp	r3, r8
 800a456:	dcf0      	bgt.n	800a43a <_printf_float+0x40a>
 800a458:	e6fa      	b.n	800a250 <_printf_float+0x220>
 800a45a:	f04f 0800 	mov.w	r8, #0
 800a45e:	f104 0919 	add.w	r9, r4, #25
 800a462:	e7f4      	b.n	800a44e <_printf_float+0x41e>
 800a464:	2900      	cmp	r1, #0
 800a466:	f43f ae8a 	beq.w	800a17e <_printf_float+0x14e>
 800a46a:	f04f 0c00 	mov.w	ip, #0
 800a46e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800a472:	e9cd 0900 	strd	r0, r9, [sp]
 800a476:	6022      	str	r2, [r4, #0]
 800a478:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a47c:	4628      	mov	r0, r5
 800a47e:	f7ff fd4f 	bl	8009f20 <__cvt>
 800a482:	4680      	mov	r8, r0
 800a484:	e64a      	b.n	800a11c <_printf_float+0xec>
 800a486:	bf00      	nop

0800a488 <_printf_common>:
 800a488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a48c:	4691      	mov	r9, r2
 800a48e:	461f      	mov	r7, r3
 800a490:	688a      	ldr	r2, [r1, #8]
 800a492:	690b      	ldr	r3, [r1, #16]
 800a494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a498:	4293      	cmp	r3, r2
 800a49a:	bfb8      	it	lt
 800a49c:	4613      	movlt	r3, r2
 800a49e:	f8c9 3000 	str.w	r3, [r9]
 800a4a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	460c      	mov	r4, r1
 800a4aa:	b112      	cbz	r2, 800a4b2 <_printf_common+0x2a>
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	f8c9 3000 	str.w	r3, [r9]
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	0699      	lsls	r1, r3, #26
 800a4b6:	bf42      	ittt	mi
 800a4b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a4bc:	3302      	addmi	r3, #2
 800a4be:	f8c9 3000 	strmi.w	r3, [r9]
 800a4c2:	6825      	ldr	r5, [r4, #0]
 800a4c4:	f015 0506 	ands.w	r5, r5, #6
 800a4c8:	d107      	bne.n	800a4da <_printf_common+0x52>
 800a4ca:	f104 0a19 	add.w	sl, r4, #25
 800a4ce:	68e3      	ldr	r3, [r4, #12]
 800a4d0:	f8d9 2000 	ldr.w	r2, [r9]
 800a4d4:	1a9b      	subs	r3, r3, r2
 800a4d6:	42ab      	cmp	r3, r5
 800a4d8:	dc28      	bgt.n	800a52c <_printf_common+0xa4>
 800a4da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a4de:	6822      	ldr	r2, [r4, #0]
 800a4e0:	3300      	adds	r3, #0
 800a4e2:	bf18      	it	ne
 800a4e4:	2301      	movne	r3, #1
 800a4e6:	0692      	lsls	r2, r2, #26
 800a4e8:	d42d      	bmi.n	800a546 <_printf_common+0xbe>
 800a4ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4ee:	4639      	mov	r1, r7
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	47c0      	blx	r8
 800a4f4:	3001      	adds	r0, #1
 800a4f6:	d020      	beq.n	800a53a <_printf_common+0xb2>
 800a4f8:	6823      	ldr	r3, [r4, #0]
 800a4fa:	68e5      	ldr	r5, [r4, #12]
 800a4fc:	f8d9 2000 	ldr.w	r2, [r9]
 800a500:	f003 0306 	and.w	r3, r3, #6
 800a504:	2b04      	cmp	r3, #4
 800a506:	bf08      	it	eq
 800a508:	1aad      	subeq	r5, r5, r2
 800a50a:	68a3      	ldr	r3, [r4, #8]
 800a50c:	6922      	ldr	r2, [r4, #16]
 800a50e:	bf0c      	ite	eq
 800a510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a514:	2500      	movne	r5, #0
 800a516:	4293      	cmp	r3, r2
 800a518:	bfc4      	itt	gt
 800a51a:	1a9b      	subgt	r3, r3, r2
 800a51c:	18ed      	addgt	r5, r5, r3
 800a51e:	f04f 0900 	mov.w	r9, #0
 800a522:	341a      	adds	r4, #26
 800a524:	454d      	cmp	r5, r9
 800a526:	d11a      	bne.n	800a55e <_printf_common+0xd6>
 800a528:	2000      	movs	r0, #0
 800a52a:	e008      	b.n	800a53e <_printf_common+0xb6>
 800a52c:	2301      	movs	r3, #1
 800a52e:	4652      	mov	r2, sl
 800a530:	4639      	mov	r1, r7
 800a532:	4630      	mov	r0, r6
 800a534:	47c0      	blx	r8
 800a536:	3001      	adds	r0, #1
 800a538:	d103      	bne.n	800a542 <_printf_common+0xba>
 800a53a:	f04f 30ff 	mov.w	r0, #4294967295
 800a53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a542:	3501      	adds	r5, #1
 800a544:	e7c3      	b.n	800a4ce <_printf_common+0x46>
 800a546:	18e1      	adds	r1, r4, r3
 800a548:	1c5a      	adds	r2, r3, #1
 800a54a:	2030      	movs	r0, #48	; 0x30
 800a54c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a550:	4422      	add	r2, r4
 800a552:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a556:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a55a:	3302      	adds	r3, #2
 800a55c:	e7c5      	b.n	800a4ea <_printf_common+0x62>
 800a55e:	2301      	movs	r3, #1
 800a560:	4622      	mov	r2, r4
 800a562:	4639      	mov	r1, r7
 800a564:	4630      	mov	r0, r6
 800a566:	47c0      	blx	r8
 800a568:	3001      	adds	r0, #1
 800a56a:	d0e6      	beq.n	800a53a <_printf_common+0xb2>
 800a56c:	f109 0901 	add.w	r9, r9, #1
 800a570:	e7d8      	b.n	800a524 <_printf_common+0x9c>
	...

0800a574 <_printf_i>:
 800a574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a578:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a57c:	460c      	mov	r4, r1
 800a57e:	7e09      	ldrb	r1, [r1, #24]
 800a580:	b085      	sub	sp, #20
 800a582:	296e      	cmp	r1, #110	; 0x6e
 800a584:	4617      	mov	r7, r2
 800a586:	4606      	mov	r6, r0
 800a588:	4698      	mov	r8, r3
 800a58a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a58c:	f000 80b3 	beq.w	800a6f6 <_printf_i+0x182>
 800a590:	d822      	bhi.n	800a5d8 <_printf_i+0x64>
 800a592:	2963      	cmp	r1, #99	; 0x63
 800a594:	d036      	beq.n	800a604 <_printf_i+0x90>
 800a596:	d80a      	bhi.n	800a5ae <_printf_i+0x3a>
 800a598:	2900      	cmp	r1, #0
 800a59a:	f000 80b9 	beq.w	800a710 <_printf_i+0x19c>
 800a59e:	2958      	cmp	r1, #88	; 0x58
 800a5a0:	f000 8083 	beq.w	800a6aa <_printf_i+0x136>
 800a5a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a5ac:	e032      	b.n	800a614 <_printf_i+0xa0>
 800a5ae:	2964      	cmp	r1, #100	; 0x64
 800a5b0:	d001      	beq.n	800a5b6 <_printf_i+0x42>
 800a5b2:	2969      	cmp	r1, #105	; 0x69
 800a5b4:	d1f6      	bne.n	800a5a4 <_printf_i+0x30>
 800a5b6:	6820      	ldr	r0, [r4, #0]
 800a5b8:	6813      	ldr	r3, [r2, #0]
 800a5ba:	0605      	lsls	r5, r0, #24
 800a5bc:	f103 0104 	add.w	r1, r3, #4
 800a5c0:	d52a      	bpl.n	800a618 <_printf_i+0xa4>
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	6011      	str	r1, [r2, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	da03      	bge.n	800a5d2 <_printf_i+0x5e>
 800a5ca:	222d      	movs	r2, #45	; 0x2d
 800a5cc:	425b      	negs	r3, r3
 800a5ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a5d2:	486f      	ldr	r0, [pc, #444]	; (800a790 <_printf_i+0x21c>)
 800a5d4:	220a      	movs	r2, #10
 800a5d6:	e039      	b.n	800a64c <_printf_i+0xd8>
 800a5d8:	2973      	cmp	r1, #115	; 0x73
 800a5da:	f000 809d 	beq.w	800a718 <_printf_i+0x1a4>
 800a5de:	d808      	bhi.n	800a5f2 <_printf_i+0x7e>
 800a5e0:	296f      	cmp	r1, #111	; 0x6f
 800a5e2:	d020      	beq.n	800a626 <_printf_i+0xb2>
 800a5e4:	2970      	cmp	r1, #112	; 0x70
 800a5e6:	d1dd      	bne.n	800a5a4 <_printf_i+0x30>
 800a5e8:	6823      	ldr	r3, [r4, #0]
 800a5ea:	f043 0320 	orr.w	r3, r3, #32
 800a5ee:	6023      	str	r3, [r4, #0]
 800a5f0:	e003      	b.n	800a5fa <_printf_i+0x86>
 800a5f2:	2975      	cmp	r1, #117	; 0x75
 800a5f4:	d017      	beq.n	800a626 <_printf_i+0xb2>
 800a5f6:	2978      	cmp	r1, #120	; 0x78
 800a5f8:	d1d4      	bne.n	800a5a4 <_printf_i+0x30>
 800a5fa:	2378      	movs	r3, #120	; 0x78
 800a5fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a600:	4864      	ldr	r0, [pc, #400]	; (800a794 <_printf_i+0x220>)
 800a602:	e055      	b.n	800a6b0 <_printf_i+0x13c>
 800a604:	6813      	ldr	r3, [r2, #0]
 800a606:	1d19      	adds	r1, r3, #4
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	6011      	str	r1, [r2, #0]
 800a60c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a614:	2301      	movs	r3, #1
 800a616:	e08c      	b.n	800a732 <_printf_i+0x1be>
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	6011      	str	r1, [r2, #0]
 800a61c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a620:	bf18      	it	ne
 800a622:	b21b      	sxthne	r3, r3
 800a624:	e7cf      	b.n	800a5c6 <_printf_i+0x52>
 800a626:	6813      	ldr	r3, [r2, #0]
 800a628:	6825      	ldr	r5, [r4, #0]
 800a62a:	1d18      	adds	r0, r3, #4
 800a62c:	6010      	str	r0, [r2, #0]
 800a62e:	0628      	lsls	r0, r5, #24
 800a630:	d501      	bpl.n	800a636 <_printf_i+0xc2>
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	e002      	b.n	800a63c <_printf_i+0xc8>
 800a636:	0668      	lsls	r0, r5, #25
 800a638:	d5fb      	bpl.n	800a632 <_printf_i+0xbe>
 800a63a:	881b      	ldrh	r3, [r3, #0]
 800a63c:	4854      	ldr	r0, [pc, #336]	; (800a790 <_printf_i+0x21c>)
 800a63e:	296f      	cmp	r1, #111	; 0x6f
 800a640:	bf14      	ite	ne
 800a642:	220a      	movne	r2, #10
 800a644:	2208      	moveq	r2, #8
 800a646:	2100      	movs	r1, #0
 800a648:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a64c:	6865      	ldr	r5, [r4, #4]
 800a64e:	60a5      	str	r5, [r4, #8]
 800a650:	2d00      	cmp	r5, #0
 800a652:	f2c0 8095 	blt.w	800a780 <_printf_i+0x20c>
 800a656:	6821      	ldr	r1, [r4, #0]
 800a658:	f021 0104 	bic.w	r1, r1, #4
 800a65c:	6021      	str	r1, [r4, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d13d      	bne.n	800a6de <_printf_i+0x16a>
 800a662:	2d00      	cmp	r5, #0
 800a664:	f040 808e 	bne.w	800a784 <_printf_i+0x210>
 800a668:	4665      	mov	r5, ip
 800a66a:	2a08      	cmp	r2, #8
 800a66c:	d10b      	bne.n	800a686 <_printf_i+0x112>
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	07db      	lsls	r3, r3, #31
 800a672:	d508      	bpl.n	800a686 <_printf_i+0x112>
 800a674:	6923      	ldr	r3, [r4, #16]
 800a676:	6862      	ldr	r2, [r4, #4]
 800a678:	429a      	cmp	r2, r3
 800a67a:	bfde      	ittt	le
 800a67c:	2330      	movle	r3, #48	; 0x30
 800a67e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a682:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a686:	ebac 0305 	sub.w	r3, ip, r5
 800a68a:	6123      	str	r3, [r4, #16]
 800a68c:	f8cd 8000 	str.w	r8, [sp]
 800a690:	463b      	mov	r3, r7
 800a692:	aa03      	add	r2, sp, #12
 800a694:	4621      	mov	r1, r4
 800a696:	4630      	mov	r0, r6
 800a698:	f7ff fef6 	bl	800a488 <_printf_common>
 800a69c:	3001      	adds	r0, #1
 800a69e:	d14d      	bne.n	800a73c <_printf_i+0x1c8>
 800a6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a4:	b005      	add	sp, #20
 800a6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6aa:	4839      	ldr	r0, [pc, #228]	; (800a790 <_printf_i+0x21c>)
 800a6ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a6b0:	6813      	ldr	r3, [r2, #0]
 800a6b2:	6821      	ldr	r1, [r4, #0]
 800a6b4:	1d1d      	adds	r5, r3, #4
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6015      	str	r5, [r2, #0]
 800a6ba:	060a      	lsls	r2, r1, #24
 800a6bc:	d50b      	bpl.n	800a6d6 <_printf_i+0x162>
 800a6be:	07ca      	lsls	r2, r1, #31
 800a6c0:	bf44      	itt	mi
 800a6c2:	f041 0120 	orrmi.w	r1, r1, #32
 800a6c6:	6021      	strmi	r1, [r4, #0]
 800a6c8:	b91b      	cbnz	r3, 800a6d2 <_printf_i+0x15e>
 800a6ca:	6822      	ldr	r2, [r4, #0]
 800a6cc:	f022 0220 	bic.w	r2, r2, #32
 800a6d0:	6022      	str	r2, [r4, #0]
 800a6d2:	2210      	movs	r2, #16
 800a6d4:	e7b7      	b.n	800a646 <_printf_i+0xd2>
 800a6d6:	064d      	lsls	r5, r1, #25
 800a6d8:	bf48      	it	mi
 800a6da:	b29b      	uxthmi	r3, r3
 800a6dc:	e7ef      	b.n	800a6be <_printf_i+0x14a>
 800a6de:	4665      	mov	r5, ip
 800a6e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6e4:	fb02 3311 	mls	r3, r2, r1, r3
 800a6e8:	5cc3      	ldrb	r3, [r0, r3]
 800a6ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	2900      	cmp	r1, #0
 800a6f2:	d1f5      	bne.n	800a6e0 <_printf_i+0x16c>
 800a6f4:	e7b9      	b.n	800a66a <_printf_i+0xf6>
 800a6f6:	6813      	ldr	r3, [r2, #0]
 800a6f8:	6825      	ldr	r5, [r4, #0]
 800a6fa:	6961      	ldr	r1, [r4, #20]
 800a6fc:	1d18      	adds	r0, r3, #4
 800a6fe:	6010      	str	r0, [r2, #0]
 800a700:	0628      	lsls	r0, r5, #24
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	d501      	bpl.n	800a70a <_printf_i+0x196>
 800a706:	6019      	str	r1, [r3, #0]
 800a708:	e002      	b.n	800a710 <_printf_i+0x19c>
 800a70a:	066a      	lsls	r2, r5, #25
 800a70c:	d5fb      	bpl.n	800a706 <_printf_i+0x192>
 800a70e:	8019      	strh	r1, [r3, #0]
 800a710:	2300      	movs	r3, #0
 800a712:	6123      	str	r3, [r4, #16]
 800a714:	4665      	mov	r5, ip
 800a716:	e7b9      	b.n	800a68c <_printf_i+0x118>
 800a718:	6813      	ldr	r3, [r2, #0]
 800a71a:	1d19      	adds	r1, r3, #4
 800a71c:	6011      	str	r1, [r2, #0]
 800a71e:	681d      	ldr	r5, [r3, #0]
 800a720:	6862      	ldr	r2, [r4, #4]
 800a722:	2100      	movs	r1, #0
 800a724:	4628      	mov	r0, r5
 800a726:	f7f5 fde3 	bl	80002f0 <memchr>
 800a72a:	b108      	cbz	r0, 800a730 <_printf_i+0x1bc>
 800a72c:	1b40      	subs	r0, r0, r5
 800a72e:	6060      	str	r0, [r4, #4]
 800a730:	6863      	ldr	r3, [r4, #4]
 800a732:	6123      	str	r3, [r4, #16]
 800a734:	2300      	movs	r3, #0
 800a736:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a73a:	e7a7      	b.n	800a68c <_printf_i+0x118>
 800a73c:	6923      	ldr	r3, [r4, #16]
 800a73e:	462a      	mov	r2, r5
 800a740:	4639      	mov	r1, r7
 800a742:	4630      	mov	r0, r6
 800a744:	47c0      	blx	r8
 800a746:	3001      	adds	r0, #1
 800a748:	d0aa      	beq.n	800a6a0 <_printf_i+0x12c>
 800a74a:	6823      	ldr	r3, [r4, #0]
 800a74c:	079b      	lsls	r3, r3, #30
 800a74e:	d413      	bmi.n	800a778 <_printf_i+0x204>
 800a750:	68e0      	ldr	r0, [r4, #12]
 800a752:	9b03      	ldr	r3, [sp, #12]
 800a754:	4298      	cmp	r0, r3
 800a756:	bfb8      	it	lt
 800a758:	4618      	movlt	r0, r3
 800a75a:	e7a3      	b.n	800a6a4 <_printf_i+0x130>
 800a75c:	2301      	movs	r3, #1
 800a75e:	464a      	mov	r2, r9
 800a760:	4639      	mov	r1, r7
 800a762:	4630      	mov	r0, r6
 800a764:	47c0      	blx	r8
 800a766:	3001      	adds	r0, #1
 800a768:	d09a      	beq.n	800a6a0 <_printf_i+0x12c>
 800a76a:	3501      	adds	r5, #1
 800a76c:	68e3      	ldr	r3, [r4, #12]
 800a76e:	9a03      	ldr	r2, [sp, #12]
 800a770:	1a9b      	subs	r3, r3, r2
 800a772:	42ab      	cmp	r3, r5
 800a774:	dcf2      	bgt.n	800a75c <_printf_i+0x1e8>
 800a776:	e7eb      	b.n	800a750 <_printf_i+0x1dc>
 800a778:	2500      	movs	r5, #0
 800a77a:	f104 0919 	add.w	r9, r4, #25
 800a77e:	e7f5      	b.n	800a76c <_printf_i+0x1f8>
 800a780:	2b00      	cmp	r3, #0
 800a782:	d1ac      	bne.n	800a6de <_printf_i+0x16a>
 800a784:	7803      	ldrb	r3, [r0, #0]
 800a786:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a78a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a78e:	e76c      	b.n	800a66a <_printf_i+0xf6>
 800a790:	0800fa20 	.word	0x0800fa20
 800a794:	0800fa31 	.word	0x0800fa31

0800a798 <_sbrk_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4c06      	ldr	r4, [pc, #24]	; (800a7b4 <_sbrk_r+0x1c>)
 800a79c:	2300      	movs	r3, #0
 800a79e:	4605      	mov	r5, r0
 800a7a0:	4608      	mov	r0, r1
 800a7a2:	6023      	str	r3, [r4, #0]
 800a7a4:	f7f8 f9a4 	bl	8002af0 <_sbrk>
 800a7a8:	1c43      	adds	r3, r0, #1
 800a7aa:	d102      	bne.n	800a7b2 <_sbrk_r+0x1a>
 800a7ac:	6823      	ldr	r3, [r4, #0]
 800a7ae:	b103      	cbz	r3, 800a7b2 <_sbrk_r+0x1a>
 800a7b0:	602b      	str	r3, [r5, #0]
 800a7b2:	bd38      	pop	{r3, r4, r5, pc}
 800a7b4:	2400f09c 	.word	0x2400f09c

0800a7b8 <siprintf>:
 800a7b8:	b40e      	push	{r1, r2, r3}
 800a7ba:	b500      	push	{lr}
 800a7bc:	b09c      	sub	sp, #112	; 0x70
 800a7be:	ab1d      	add	r3, sp, #116	; 0x74
 800a7c0:	9002      	str	r0, [sp, #8]
 800a7c2:	9006      	str	r0, [sp, #24]
 800a7c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7c8:	4809      	ldr	r0, [pc, #36]	; (800a7f0 <siprintf+0x38>)
 800a7ca:	9107      	str	r1, [sp, #28]
 800a7cc:	9104      	str	r1, [sp, #16]
 800a7ce:	4909      	ldr	r1, [pc, #36]	; (800a7f4 <siprintf+0x3c>)
 800a7d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7d4:	9105      	str	r1, [sp, #20]
 800a7d6:	6800      	ldr	r0, [r0, #0]
 800a7d8:	9301      	str	r3, [sp, #4]
 800a7da:	a902      	add	r1, sp, #8
 800a7dc:	f001 f94a 	bl	800ba74 <_svfiprintf_r>
 800a7e0:	9b02      	ldr	r3, [sp, #8]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	701a      	strb	r2, [r3, #0]
 800a7e6:	b01c      	add	sp, #112	; 0x70
 800a7e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7ec:	b003      	add	sp, #12
 800a7ee:	4770      	bx	lr
 800a7f0:	24000378 	.word	0x24000378
 800a7f4:	ffff0208 	.word	0xffff0208

0800a7f8 <strcpy>:
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7fe:	f803 2b01 	strb.w	r2, [r3], #1
 800a802:	2a00      	cmp	r2, #0
 800a804:	d1f9      	bne.n	800a7fa <strcpy+0x2>
 800a806:	4770      	bx	lr

0800a808 <quorem>:
 800a808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80c:	6903      	ldr	r3, [r0, #16]
 800a80e:	690c      	ldr	r4, [r1, #16]
 800a810:	42a3      	cmp	r3, r4
 800a812:	4680      	mov	r8, r0
 800a814:	f2c0 8082 	blt.w	800a91c <quorem+0x114>
 800a818:	3c01      	subs	r4, #1
 800a81a:	f101 0714 	add.w	r7, r1, #20
 800a81e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a822:	f100 0614 	add.w	r6, r0, #20
 800a826:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a82a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a82e:	eb06 030c 	add.w	r3, r6, ip
 800a832:	3501      	adds	r5, #1
 800a834:	eb07 090c 	add.w	r9, r7, ip
 800a838:	9301      	str	r3, [sp, #4]
 800a83a:	fbb0 f5f5 	udiv	r5, r0, r5
 800a83e:	b395      	cbz	r5, 800a8a6 <quorem+0x9e>
 800a840:	f04f 0a00 	mov.w	sl, #0
 800a844:	4638      	mov	r0, r7
 800a846:	46b6      	mov	lr, r6
 800a848:	46d3      	mov	fp, sl
 800a84a:	f850 2b04 	ldr.w	r2, [r0], #4
 800a84e:	b293      	uxth	r3, r2
 800a850:	fb05 a303 	mla	r3, r5, r3, sl
 800a854:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a858:	b29b      	uxth	r3, r3
 800a85a:	ebab 0303 	sub.w	r3, fp, r3
 800a85e:	0c12      	lsrs	r2, r2, #16
 800a860:	f8de b000 	ldr.w	fp, [lr]
 800a864:	fb05 a202 	mla	r2, r5, r2, sl
 800a868:	fa13 f38b 	uxtah	r3, r3, fp
 800a86c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a870:	fa1f fb82 	uxth.w	fp, r2
 800a874:	f8de 2000 	ldr.w	r2, [lr]
 800a878:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a87c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a880:	b29b      	uxth	r3, r3
 800a882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a886:	4581      	cmp	r9, r0
 800a888:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a88c:	f84e 3b04 	str.w	r3, [lr], #4
 800a890:	d2db      	bcs.n	800a84a <quorem+0x42>
 800a892:	f856 300c 	ldr.w	r3, [r6, ip]
 800a896:	b933      	cbnz	r3, 800a8a6 <quorem+0x9e>
 800a898:	9b01      	ldr	r3, [sp, #4]
 800a89a:	3b04      	subs	r3, #4
 800a89c:	429e      	cmp	r6, r3
 800a89e:	461a      	mov	r2, r3
 800a8a0:	d330      	bcc.n	800a904 <quorem+0xfc>
 800a8a2:	f8c8 4010 	str.w	r4, [r8, #16]
 800a8a6:	4640      	mov	r0, r8
 800a8a8:	f000 ffb6 	bl	800b818 <__mcmp>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	db25      	blt.n	800a8fc <quorem+0xf4>
 800a8b0:	3501      	adds	r5, #1
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	f04f 0c00 	mov.w	ip, #0
 800a8b8:	f857 2b04 	ldr.w	r2, [r7], #4
 800a8bc:	f8d0 e000 	ldr.w	lr, [r0]
 800a8c0:	b293      	uxth	r3, r2
 800a8c2:	ebac 0303 	sub.w	r3, ip, r3
 800a8c6:	0c12      	lsrs	r2, r2, #16
 800a8c8:	fa13 f38e 	uxtah	r3, r3, lr
 800a8cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a8d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8da:	45b9      	cmp	r9, r7
 800a8dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a8e0:	f840 3b04 	str.w	r3, [r0], #4
 800a8e4:	d2e8      	bcs.n	800a8b8 <quorem+0xb0>
 800a8e6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a8ea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a8ee:	b92a      	cbnz	r2, 800a8fc <quorem+0xf4>
 800a8f0:	3b04      	subs	r3, #4
 800a8f2:	429e      	cmp	r6, r3
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	d30b      	bcc.n	800a910 <quorem+0x108>
 800a8f8:	f8c8 4010 	str.w	r4, [r8, #16]
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	b003      	add	sp, #12
 800a900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a904:	6812      	ldr	r2, [r2, #0]
 800a906:	3b04      	subs	r3, #4
 800a908:	2a00      	cmp	r2, #0
 800a90a:	d1ca      	bne.n	800a8a2 <quorem+0x9a>
 800a90c:	3c01      	subs	r4, #1
 800a90e:	e7c5      	b.n	800a89c <quorem+0x94>
 800a910:	6812      	ldr	r2, [r2, #0]
 800a912:	3b04      	subs	r3, #4
 800a914:	2a00      	cmp	r2, #0
 800a916:	d1ef      	bne.n	800a8f8 <quorem+0xf0>
 800a918:	3c01      	subs	r4, #1
 800a91a:	e7ea      	b.n	800a8f2 <quorem+0xea>
 800a91c:	2000      	movs	r0, #0
 800a91e:	e7ee      	b.n	800a8fe <quorem+0xf6>

0800a920 <_dtoa_r>:
 800a920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a924:	ec57 6b10 	vmov	r6, r7, d0
 800a928:	b095      	sub	sp, #84	; 0x54
 800a92a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a92c:	9108      	str	r1, [sp, #32]
 800a92e:	4604      	mov	r4, r0
 800a930:	920a      	str	r2, [sp, #40]	; 0x28
 800a932:	9311      	str	r3, [sp, #68]	; 0x44
 800a934:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800a938:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a93c:	b93d      	cbnz	r5, 800a94e <_dtoa_r+0x2e>
 800a93e:	2010      	movs	r0, #16
 800a940:	f7ff fa2e 	bl	8009da0 <malloc>
 800a944:	6260      	str	r0, [r4, #36]	; 0x24
 800a946:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a94a:	6005      	str	r5, [r0, #0]
 800a94c:	60c5      	str	r5, [r0, #12]
 800a94e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a950:	6819      	ldr	r1, [r3, #0]
 800a952:	b151      	cbz	r1, 800a96a <_dtoa_r+0x4a>
 800a954:	685a      	ldr	r2, [r3, #4]
 800a956:	604a      	str	r2, [r1, #4]
 800a958:	2301      	movs	r3, #1
 800a95a:	4093      	lsls	r3, r2
 800a95c:	608b      	str	r3, [r1, #8]
 800a95e:	4620      	mov	r0, r4
 800a960:	f000 fd79 	bl	800b456 <_Bfree>
 800a964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a966:	2200      	movs	r2, #0
 800a968:	601a      	str	r2, [r3, #0]
 800a96a:	1e3b      	subs	r3, r7, #0
 800a96c:	bfb9      	ittee	lt
 800a96e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a972:	9303      	strlt	r3, [sp, #12]
 800a974:	2300      	movge	r3, #0
 800a976:	f8c8 3000 	strge.w	r3, [r8]
 800a97a:	9d03      	ldr	r5, [sp, #12]
 800a97c:	4bac      	ldr	r3, [pc, #688]	; (800ac30 <_dtoa_r+0x310>)
 800a97e:	bfbc      	itt	lt
 800a980:	2201      	movlt	r2, #1
 800a982:	f8c8 2000 	strlt.w	r2, [r8]
 800a986:	43ab      	bics	r3, r5
 800a988:	d11b      	bne.n	800a9c2 <_dtoa_r+0xa2>
 800a98a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a98c:	f242 730f 	movw	r3, #9999	; 0x270f
 800a990:	6013      	str	r3, [r2, #0]
 800a992:	9b02      	ldr	r3, [sp, #8]
 800a994:	b923      	cbnz	r3, 800a9a0 <_dtoa_r+0x80>
 800a996:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a99a:	2d00      	cmp	r5, #0
 800a99c:	f000 84dd 	beq.w	800b35a <_dtoa_r+0xa3a>
 800a9a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a9a2:	b953      	cbnz	r3, 800a9ba <_dtoa_r+0x9a>
 800a9a4:	4ba3      	ldr	r3, [pc, #652]	; (800ac34 <_dtoa_r+0x314>)
 800a9a6:	e020      	b.n	800a9ea <_dtoa_r+0xca>
 800a9a8:	4ba3      	ldr	r3, [pc, #652]	; (800ac38 <_dtoa_r+0x318>)
 800a9aa:	9304      	str	r3, [sp, #16]
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a9b0:	6013      	str	r3, [r2, #0]
 800a9b2:	9804      	ldr	r0, [sp, #16]
 800a9b4:	b015      	add	sp, #84	; 0x54
 800a9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ba:	4b9e      	ldr	r3, [pc, #632]	; (800ac34 <_dtoa_r+0x314>)
 800a9bc:	9304      	str	r3, [sp, #16]
 800a9be:	3303      	adds	r3, #3
 800a9c0:	e7f5      	b.n	800a9ae <_dtoa_r+0x8e>
 800a9c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ce:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a9d2:	d10c      	bne.n	800a9ee <_dtoa_r+0xce>
 800a9d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	6013      	str	r3, [r2, #0]
 800a9da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	f000 84b9 	beq.w	800b354 <_dtoa_r+0xa34>
 800a9e2:	4b96      	ldr	r3, [pc, #600]	; (800ac3c <_dtoa_r+0x31c>)
 800a9e4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a9e6:	6013      	str	r3, [r2, #0]
 800a9e8:	3b01      	subs	r3, #1
 800a9ea:	9304      	str	r3, [sp, #16]
 800a9ec:	e7e1      	b.n	800a9b2 <_dtoa_r+0x92>
 800a9ee:	a913      	add	r1, sp, #76	; 0x4c
 800a9f0:	aa12      	add	r2, sp, #72	; 0x48
 800a9f2:	ed9d 0b04 	vldr	d0, [sp, #16]
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f000 ff85 	bl	800b906 <__d2b>
 800a9fc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800aa00:	9001      	str	r0, [sp, #4]
 800aa02:	9912      	ldr	r1, [sp, #72]	; 0x48
 800aa04:	2e00      	cmp	r6, #0
 800aa06:	d046      	beq.n	800aa96 <_dtoa_r+0x176>
 800aa08:	9805      	ldr	r0, [sp, #20]
 800aa0a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800aa0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa12:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800aa16:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aa1a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800aa1e:	2700      	movs	r7, #0
 800aa20:	ee07 aa90 	vmov	s15, sl
 800aa24:	ec43 2b16 	vmov	d6, r2, r3
 800aa28:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800aa2c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800ac18 <_dtoa_r+0x2f8>
 800aa30:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800aa34:	ee36 7b47 	vsub.f64	d7, d6, d7
 800aa38:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800ac20 <_dtoa_r+0x300>
 800aa3c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800aa40:	eeb0 7b46 	vmov.f64	d7, d6
 800aa44:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800ac28 <_dtoa_r+0x308>
 800aa48:	eea5 7b06 	vfma.f64	d7, d5, d6
 800aa4c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800aa50:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800aa54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa58:	ee16 ba90 	vmov	fp, s13
 800aa5c:	d508      	bpl.n	800aa70 <_dtoa_r+0x150>
 800aa5e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800aa62:	eeb4 6b47 	vcmp.f64	d6, d7
 800aa66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa6a:	bf18      	it	ne
 800aa6c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800aa70:	f1bb 0f16 	cmp.w	fp, #22
 800aa74:	d834      	bhi.n	800aae0 <_dtoa_r+0x1c0>
 800aa76:	4b72      	ldr	r3, [pc, #456]	; (800ac40 <_dtoa_r+0x320>)
 800aa78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aa7c:	ed93 7b00 	vldr	d7, [r3]
 800aa80:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aa84:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aa88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa8c:	dd01      	ble.n	800aa92 <_dtoa_r+0x172>
 800aa8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa92:	2300      	movs	r3, #0
 800aa94:	e025      	b.n	800aae2 <_dtoa_r+0x1c2>
 800aa96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa98:	eb01 0a03 	add.w	sl, r1, r3
 800aa9c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800aaa0:	2b20      	cmp	r3, #32
 800aaa2:	dd17      	ble.n	800aad4 <_dtoa_r+0x1b4>
 800aaa4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800aaa8:	9a02      	ldr	r2, [sp, #8]
 800aaaa:	409d      	lsls	r5, r3
 800aaac:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800aab0:	fa22 f303 	lsr.w	r3, r2, r3
 800aab4:	432b      	orrs	r3, r5
 800aab6:	ee07 3a90 	vmov	s15, r3
 800aaba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800aabe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aac2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aac6:	9805      	ldr	r0, [sp, #20]
 800aac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aacc:	2701      	movs	r7, #1
 800aace:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800aad2:	e7a5      	b.n	800aa20 <_dtoa_r+0x100>
 800aad4:	9a02      	ldr	r2, [sp, #8]
 800aad6:	f1c3 0320 	rsb	r3, r3, #32
 800aada:	fa02 f303 	lsl.w	r3, r2, r3
 800aade:	e7ea      	b.n	800aab6 <_dtoa_r+0x196>
 800aae0:	2301      	movs	r3, #1
 800aae2:	eba1 0a0a 	sub.w	sl, r1, sl
 800aae6:	9310      	str	r3, [sp, #64]	; 0x40
 800aae8:	f1ba 0301 	subs.w	r3, sl, #1
 800aaec:	9307      	str	r3, [sp, #28]
 800aaee:	bf43      	ittte	mi
 800aaf0:	2300      	movmi	r3, #0
 800aaf2:	f1ca 0a01 	rsbmi	sl, sl, #1
 800aaf6:	9307      	strmi	r3, [sp, #28]
 800aaf8:	f04f 0a00 	movpl.w	sl, #0
 800aafc:	f1bb 0f00 	cmp.w	fp, #0
 800ab00:	db19      	blt.n	800ab36 <_dtoa_r+0x216>
 800ab02:	9b07      	ldr	r3, [sp, #28]
 800ab04:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ab08:	445b      	add	r3, fp
 800ab0a:	9307      	str	r3, [sp, #28]
 800ab0c:	f04f 0800 	mov.w	r8, #0
 800ab10:	9b08      	ldr	r3, [sp, #32]
 800ab12:	2b09      	cmp	r3, #9
 800ab14:	d866      	bhi.n	800abe4 <_dtoa_r+0x2c4>
 800ab16:	2b05      	cmp	r3, #5
 800ab18:	bfc4      	itt	gt
 800ab1a:	3b04      	subgt	r3, #4
 800ab1c:	9308      	strgt	r3, [sp, #32]
 800ab1e:	9b08      	ldr	r3, [sp, #32]
 800ab20:	f1a3 0302 	sub.w	r3, r3, #2
 800ab24:	bfcc      	ite	gt
 800ab26:	2500      	movgt	r5, #0
 800ab28:	2501      	movle	r5, #1
 800ab2a:	2b03      	cmp	r3, #3
 800ab2c:	d866      	bhi.n	800abfc <_dtoa_r+0x2dc>
 800ab2e:	e8df f003 	tbb	[pc, r3]
 800ab32:	5755      	.short	0x5755
 800ab34:	4909      	.short	0x4909
 800ab36:	2300      	movs	r3, #0
 800ab38:	ebaa 0a0b 	sub.w	sl, sl, fp
 800ab3c:	f1cb 0800 	rsb	r8, fp, #0
 800ab40:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab42:	e7e5      	b.n	800ab10 <_dtoa_r+0x1f0>
 800ab44:	2301      	movs	r3, #1
 800ab46:	9309      	str	r3, [sp, #36]	; 0x24
 800ab48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	dd59      	ble.n	800ac02 <_dtoa_r+0x2e2>
 800ab4e:	9306      	str	r3, [sp, #24]
 800ab50:	4699      	mov	r9, r3
 800ab52:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab54:	2200      	movs	r2, #0
 800ab56:	6072      	str	r2, [r6, #4]
 800ab58:	2204      	movs	r2, #4
 800ab5a:	f102 0014 	add.w	r0, r2, #20
 800ab5e:	4298      	cmp	r0, r3
 800ab60:	6871      	ldr	r1, [r6, #4]
 800ab62:	d953      	bls.n	800ac0c <_dtoa_r+0x2ec>
 800ab64:	4620      	mov	r0, r4
 800ab66:	f000 fc42 	bl	800b3ee <_Balloc>
 800ab6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab6c:	6030      	str	r0, [r6, #0]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	9304      	str	r3, [sp, #16]
 800ab72:	f1b9 0f0e 	cmp.w	r9, #14
 800ab76:	f200 80c2 	bhi.w	800acfe <_dtoa_r+0x3de>
 800ab7a:	2d00      	cmp	r5, #0
 800ab7c:	f000 80bf 	beq.w	800acfe <_dtoa_r+0x3de>
 800ab80:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab84:	f1bb 0f00 	cmp.w	fp, #0
 800ab88:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800ab8c:	f340 80e6 	ble.w	800ad5c <_dtoa_r+0x43c>
 800ab90:	4a2b      	ldr	r2, [pc, #172]	; (800ac40 <_dtoa_r+0x320>)
 800ab92:	f00b 030f 	and.w	r3, fp, #15
 800ab96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ab9a:	ed93 7b00 	vldr	d7, [r3]
 800ab9e:	ea4f 132b 	mov.w	r3, fp, asr #4
 800aba2:	06da      	lsls	r2, r3, #27
 800aba4:	f140 80d8 	bpl.w	800ad58 <_dtoa_r+0x438>
 800aba8:	4a26      	ldr	r2, [pc, #152]	; (800ac44 <_dtoa_r+0x324>)
 800abaa:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800abae:	ed92 6b08 	vldr	d6, [r2, #32]
 800abb2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800abb6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800abba:	f003 030f 	and.w	r3, r3, #15
 800abbe:	2203      	movs	r2, #3
 800abc0:	4920      	ldr	r1, [pc, #128]	; (800ac44 <_dtoa_r+0x324>)
 800abc2:	e04a      	b.n	800ac5a <_dtoa_r+0x33a>
 800abc4:	2301      	movs	r3, #1
 800abc6:	9309      	str	r3, [sp, #36]	; 0x24
 800abc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abca:	445b      	add	r3, fp
 800abcc:	f103 0901 	add.w	r9, r3, #1
 800abd0:	9306      	str	r3, [sp, #24]
 800abd2:	464b      	mov	r3, r9
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	bfb8      	it	lt
 800abd8:	2301      	movlt	r3, #1
 800abda:	e7ba      	b.n	800ab52 <_dtoa_r+0x232>
 800abdc:	2300      	movs	r3, #0
 800abde:	e7b2      	b.n	800ab46 <_dtoa_r+0x226>
 800abe0:	2300      	movs	r3, #0
 800abe2:	e7f0      	b.n	800abc6 <_dtoa_r+0x2a6>
 800abe4:	2501      	movs	r5, #1
 800abe6:	2300      	movs	r3, #0
 800abe8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800abec:	f04f 33ff 	mov.w	r3, #4294967295
 800abf0:	9306      	str	r3, [sp, #24]
 800abf2:	4699      	mov	r9, r3
 800abf4:	2200      	movs	r2, #0
 800abf6:	2312      	movs	r3, #18
 800abf8:	920a      	str	r2, [sp, #40]	; 0x28
 800abfa:	e7aa      	b.n	800ab52 <_dtoa_r+0x232>
 800abfc:	2301      	movs	r3, #1
 800abfe:	9309      	str	r3, [sp, #36]	; 0x24
 800ac00:	e7f4      	b.n	800abec <_dtoa_r+0x2cc>
 800ac02:	2301      	movs	r3, #1
 800ac04:	9306      	str	r3, [sp, #24]
 800ac06:	4699      	mov	r9, r3
 800ac08:	461a      	mov	r2, r3
 800ac0a:	e7f5      	b.n	800abf8 <_dtoa_r+0x2d8>
 800ac0c:	3101      	adds	r1, #1
 800ac0e:	6071      	str	r1, [r6, #4]
 800ac10:	0052      	lsls	r2, r2, #1
 800ac12:	e7a2      	b.n	800ab5a <_dtoa_r+0x23a>
 800ac14:	f3af 8000 	nop.w
 800ac18:	636f4361 	.word	0x636f4361
 800ac1c:	3fd287a7 	.word	0x3fd287a7
 800ac20:	8b60c8b3 	.word	0x8b60c8b3
 800ac24:	3fc68a28 	.word	0x3fc68a28
 800ac28:	509f79fb 	.word	0x509f79fb
 800ac2c:	3fd34413 	.word	0x3fd34413
 800ac30:	7ff00000 	.word	0x7ff00000
 800ac34:	0800fa4b 	.word	0x0800fa4b
 800ac38:	0800fa42 	.word	0x0800fa42
 800ac3c:	0800fc6d 	.word	0x0800fc6d
 800ac40:	0800fa78 	.word	0x0800fa78
 800ac44:	0800fa50 	.word	0x0800fa50
 800ac48:	07de      	lsls	r6, r3, #31
 800ac4a:	d504      	bpl.n	800ac56 <_dtoa_r+0x336>
 800ac4c:	ed91 6b00 	vldr	d6, [r1]
 800ac50:	3201      	adds	r2, #1
 800ac52:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac56:	105b      	asrs	r3, r3, #1
 800ac58:	3108      	adds	r1, #8
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d1f4      	bne.n	800ac48 <_dtoa_r+0x328>
 800ac5e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ac62:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ac66:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f000 80a7 	beq.w	800adc0 <_dtoa_r+0x4a0>
 800ac72:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ac76:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ac7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac82:	f140 809d 	bpl.w	800adc0 <_dtoa_r+0x4a0>
 800ac86:	f1b9 0f00 	cmp.w	r9, #0
 800ac8a:	f000 8099 	beq.w	800adc0 <_dtoa_r+0x4a0>
 800ac8e:	9b06      	ldr	r3, [sp, #24]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	dd30      	ble.n	800acf6 <_dtoa_r+0x3d6>
 800ac94:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ac98:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aca0:	9d06      	ldr	r5, [sp, #24]
 800aca2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800aca6:	3201      	adds	r2, #1
 800aca8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800acac:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800acb0:	ee07 2a90 	vmov	s15, r2
 800acb4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800acb8:	eea7 5b06 	vfma.f64	d5, d7, d6
 800acbc:	ed8d 5b02 	vstr	d5, [sp, #8]
 800acc0:	9a03      	ldr	r2, [sp, #12]
 800acc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acc6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800acca:	2d00      	cmp	r5, #0
 800accc:	d17b      	bne.n	800adc6 <_dtoa_r+0x4a6>
 800acce:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800acd2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800acd6:	ec41 0b17 	vmov	d7, r0, r1
 800acda:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800acde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ace2:	f300 8253 	bgt.w	800b18c <_dtoa_r+0x86c>
 800ace6:	eeb1 7b47 	vneg.f64	d7, d7
 800acea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800acee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf2:	f100 8249 	bmi.w	800b188 <_dtoa_r+0x868>
 800acf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800acfa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f2c0 8119 	blt.w	800af38 <_dtoa_r+0x618>
 800ad06:	f1bb 0f0e 	cmp.w	fp, #14
 800ad0a:	f300 8115 	bgt.w	800af38 <_dtoa_r+0x618>
 800ad0e:	4bc3      	ldr	r3, [pc, #780]	; (800b01c <_dtoa_r+0x6fc>)
 800ad10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ad14:	ed93 6b00 	vldr	d6, [r3]
 800ad18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f280 80ba 	bge.w	800ae94 <_dtoa_r+0x574>
 800ad20:	f1b9 0f00 	cmp.w	r9, #0
 800ad24:	f300 80b6 	bgt.w	800ae94 <_dtoa_r+0x574>
 800ad28:	f040 822d 	bne.w	800b186 <_dtoa_r+0x866>
 800ad2c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ad30:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ad34:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad38:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ad3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad40:	464d      	mov	r5, r9
 800ad42:	464f      	mov	r7, r9
 800ad44:	f280 8204 	bge.w	800b150 <_dtoa_r+0x830>
 800ad48:	9b04      	ldr	r3, [sp, #16]
 800ad4a:	9a04      	ldr	r2, [sp, #16]
 800ad4c:	1c5e      	adds	r6, r3, #1
 800ad4e:	2331      	movs	r3, #49	; 0x31
 800ad50:	7013      	strb	r3, [r2, #0]
 800ad52:	f10b 0b01 	add.w	fp, fp, #1
 800ad56:	e1ff      	b.n	800b158 <_dtoa_r+0x838>
 800ad58:	2202      	movs	r2, #2
 800ad5a:	e731      	b.n	800abc0 <_dtoa_r+0x2a0>
 800ad5c:	d02e      	beq.n	800adbc <_dtoa_r+0x49c>
 800ad5e:	f1cb 0300 	rsb	r3, fp, #0
 800ad62:	4aae      	ldr	r2, [pc, #696]	; (800b01c <_dtoa_r+0x6fc>)
 800ad64:	f003 010f 	and.w	r1, r3, #15
 800ad68:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ad6c:	ed92 7b00 	vldr	d7, [r2]
 800ad70:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800ad74:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ad78:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ad7c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800ad80:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ad84:	49a6      	ldr	r1, [pc, #664]	; (800b020 <_dtoa_r+0x700>)
 800ad86:	111b      	asrs	r3, r3, #4
 800ad88:	2000      	movs	r0, #0
 800ad8a:	2202      	movs	r2, #2
 800ad8c:	b93b      	cbnz	r3, 800ad9e <_dtoa_r+0x47e>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	f43f af6b 	beq.w	800ac6a <_dtoa_r+0x34a>
 800ad94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad9c:	e765      	b.n	800ac6a <_dtoa_r+0x34a>
 800ad9e:	07dd      	lsls	r5, r3, #31
 800ada0:	d509      	bpl.n	800adb6 <_dtoa_r+0x496>
 800ada2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800ada6:	ed91 7b00 	vldr	d7, [r1]
 800adaa:	ee26 7b07 	vmul.f64	d7, d6, d7
 800adae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800adb2:	3201      	adds	r2, #1
 800adb4:	2001      	movs	r0, #1
 800adb6:	105b      	asrs	r3, r3, #1
 800adb8:	3108      	adds	r1, #8
 800adba:	e7e7      	b.n	800ad8c <_dtoa_r+0x46c>
 800adbc:	2202      	movs	r2, #2
 800adbe:	e754      	b.n	800ac6a <_dtoa_r+0x34a>
 800adc0:	465b      	mov	r3, fp
 800adc2:	464d      	mov	r5, r9
 800adc4:	e770      	b.n	800aca8 <_dtoa_r+0x388>
 800adc6:	4a95      	ldr	r2, [pc, #596]	; (800b01c <_dtoa_r+0x6fc>)
 800adc8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800adcc:	ed12 4b02 	vldr	d4, [r2, #-8]
 800add0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800add2:	ec41 0b17 	vmov	d7, r0, r1
 800add6:	b35a      	cbz	r2, 800ae30 <_dtoa_r+0x510>
 800add8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800addc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ade0:	9e04      	ldr	r6, [sp, #16]
 800ade2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ade6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800adea:	ee35 7b47 	vsub.f64	d7, d5, d7
 800adee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800adf2:	ee14 2a90 	vmov	r2, s9
 800adf6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800adfa:	3230      	adds	r2, #48	; 0x30
 800adfc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ae00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ae04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae08:	f806 2b01 	strb.w	r2, [r6], #1
 800ae0c:	d43b      	bmi.n	800ae86 <_dtoa_r+0x566>
 800ae0e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ae12:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ae16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae1a:	d472      	bmi.n	800af02 <_dtoa_r+0x5e2>
 800ae1c:	9a04      	ldr	r2, [sp, #16]
 800ae1e:	1ab2      	subs	r2, r6, r2
 800ae20:	4295      	cmp	r5, r2
 800ae22:	f77f af68 	ble.w	800acf6 <_dtoa_r+0x3d6>
 800ae26:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ae2a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ae2e:	e7de      	b.n	800adee <_dtoa_r+0x4ce>
 800ae30:	9a04      	ldr	r2, [sp, #16]
 800ae32:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ae36:	1956      	adds	r6, r2, r5
 800ae38:	4611      	mov	r1, r2
 800ae3a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ae3e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ae42:	ee14 2a90 	vmov	r2, s9
 800ae46:	3230      	adds	r2, #48	; 0x30
 800ae48:	f801 2b01 	strb.w	r2, [r1], #1
 800ae4c:	42b1      	cmp	r1, r6
 800ae4e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ae52:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ae56:	d11a      	bne.n	800ae8e <_dtoa_r+0x56e>
 800ae58:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ae5c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ae60:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ae64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae68:	dc4b      	bgt.n	800af02 <_dtoa_r+0x5e2>
 800ae6a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ae6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ae72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae76:	f57f af3e 	bpl.w	800acf6 <_dtoa_r+0x3d6>
 800ae7a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ae7e:	2a30      	cmp	r2, #48	; 0x30
 800ae80:	f106 31ff 	add.w	r1, r6, #4294967295
 800ae84:	d001      	beq.n	800ae8a <_dtoa_r+0x56a>
 800ae86:	469b      	mov	fp, r3
 800ae88:	e02a      	b.n	800aee0 <_dtoa_r+0x5c0>
 800ae8a:	460e      	mov	r6, r1
 800ae8c:	e7f5      	b.n	800ae7a <_dtoa_r+0x55a>
 800ae8e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ae92:	e7d4      	b.n	800ae3e <_dtoa_r+0x51e>
 800ae94:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae98:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ae9c:	9e04      	ldr	r6, [sp, #16]
 800ae9e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800aea2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800aea6:	ee15 3a10 	vmov	r3, s10
 800aeaa:	3330      	adds	r3, #48	; 0x30
 800aeac:	f806 3b01 	strb.w	r3, [r6], #1
 800aeb0:	9b04      	ldr	r3, [sp, #16]
 800aeb2:	1af3      	subs	r3, r6, r3
 800aeb4:	4599      	cmp	r9, r3
 800aeb6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800aeba:	eea3 7b46 	vfms.f64	d7, d3, d6
 800aebe:	d133      	bne.n	800af28 <_dtoa_r+0x608>
 800aec0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800aec4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aecc:	dc18      	bgt.n	800af00 <_dtoa_r+0x5e0>
 800aece:	eeb4 7b46 	vcmp.f64	d7, d6
 800aed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed6:	d103      	bne.n	800aee0 <_dtoa_r+0x5c0>
 800aed8:	ee15 3a10 	vmov	r3, s10
 800aedc:	07db      	lsls	r3, r3, #31
 800aede:	d40f      	bmi.n	800af00 <_dtoa_r+0x5e0>
 800aee0:	9901      	ldr	r1, [sp, #4]
 800aee2:	4620      	mov	r0, r4
 800aee4:	f000 fab7 	bl	800b456 <_Bfree>
 800aee8:	2300      	movs	r3, #0
 800aeea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aeec:	7033      	strb	r3, [r6, #0]
 800aeee:	f10b 0301 	add.w	r3, fp, #1
 800aef2:	6013      	str	r3, [r2, #0]
 800aef4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f43f ad5b 	beq.w	800a9b2 <_dtoa_r+0x92>
 800aefc:	601e      	str	r6, [r3, #0]
 800aefe:	e558      	b.n	800a9b2 <_dtoa_r+0x92>
 800af00:	465b      	mov	r3, fp
 800af02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800af06:	2939      	cmp	r1, #57	; 0x39
 800af08:	f106 32ff 	add.w	r2, r6, #4294967295
 800af0c:	d106      	bne.n	800af1c <_dtoa_r+0x5fc>
 800af0e:	9904      	ldr	r1, [sp, #16]
 800af10:	4291      	cmp	r1, r2
 800af12:	d107      	bne.n	800af24 <_dtoa_r+0x604>
 800af14:	2230      	movs	r2, #48	; 0x30
 800af16:	700a      	strb	r2, [r1, #0]
 800af18:	3301      	adds	r3, #1
 800af1a:	460a      	mov	r2, r1
 800af1c:	7811      	ldrb	r1, [r2, #0]
 800af1e:	3101      	adds	r1, #1
 800af20:	7011      	strb	r1, [r2, #0]
 800af22:	e7b0      	b.n	800ae86 <_dtoa_r+0x566>
 800af24:	4616      	mov	r6, r2
 800af26:	e7ec      	b.n	800af02 <_dtoa_r+0x5e2>
 800af28:	ee27 7b04 	vmul.f64	d7, d7, d4
 800af2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800af30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af34:	d1b3      	bne.n	800ae9e <_dtoa_r+0x57e>
 800af36:	e7d3      	b.n	800aee0 <_dtoa_r+0x5c0>
 800af38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af3a:	2a00      	cmp	r2, #0
 800af3c:	f000 808d 	beq.w	800b05a <_dtoa_r+0x73a>
 800af40:	9a08      	ldr	r2, [sp, #32]
 800af42:	2a01      	cmp	r2, #1
 800af44:	dc72      	bgt.n	800b02c <_dtoa_r+0x70c>
 800af46:	2f00      	cmp	r7, #0
 800af48:	d06c      	beq.n	800b024 <_dtoa_r+0x704>
 800af4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af4e:	4645      	mov	r5, r8
 800af50:	4656      	mov	r6, sl
 800af52:	9a07      	ldr	r2, [sp, #28]
 800af54:	2101      	movs	r1, #1
 800af56:	441a      	add	r2, r3
 800af58:	4620      	mov	r0, r4
 800af5a:	449a      	add	sl, r3
 800af5c:	9207      	str	r2, [sp, #28]
 800af5e:	f000 fb1a 	bl	800b596 <__i2b>
 800af62:	4607      	mov	r7, r0
 800af64:	2e00      	cmp	r6, #0
 800af66:	dd0b      	ble.n	800af80 <_dtoa_r+0x660>
 800af68:	9b07      	ldr	r3, [sp, #28]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	dd08      	ble.n	800af80 <_dtoa_r+0x660>
 800af6e:	42b3      	cmp	r3, r6
 800af70:	9a07      	ldr	r2, [sp, #28]
 800af72:	bfa8      	it	ge
 800af74:	4633      	movge	r3, r6
 800af76:	ebaa 0a03 	sub.w	sl, sl, r3
 800af7a:	1af6      	subs	r6, r6, r3
 800af7c:	1ad3      	subs	r3, r2, r3
 800af7e:	9307      	str	r3, [sp, #28]
 800af80:	f1b8 0f00 	cmp.w	r8, #0
 800af84:	d01d      	beq.n	800afc2 <_dtoa_r+0x6a2>
 800af86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d06a      	beq.n	800b062 <_dtoa_r+0x742>
 800af8c:	b18d      	cbz	r5, 800afb2 <_dtoa_r+0x692>
 800af8e:	4639      	mov	r1, r7
 800af90:	462a      	mov	r2, r5
 800af92:	4620      	mov	r0, r4
 800af94:	f000 fb9e 	bl	800b6d4 <__pow5mult>
 800af98:	9a01      	ldr	r2, [sp, #4]
 800af9a:	4601      	mov	r1, r0
 800af9c:	4607      	mov	r7, r0
 800af9e:	4620      	mov	r0, r4
 800afa0:	f000 fb02 	bl	800b5a8 <__multiply>
 800afa4:	9901      	ldr	r1, [sp, #4]
 800afa6:	900c      	str	r0, [sp, #48]	; 0x30
 800afa8:	4620      	mov	r0, r4
 800afaa:	f000 fa54 	bl	800b456 <_Bfree>
 800afae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afb0:	9301      	str	r3, [sp, #4]
 800afb2:	ebb8 0205 	subs.w	r2, r8, r5
 800afb6:	d004      	beq.n	800afc2 <_dtoa_r+0x6a2>
 800afb8:	9901      	ldr	r1, [sp, #4]
 800afba:	4620      	mov	r0, r4
 800afbc:	f000 fb8a 	bl	800b6d4 <__pow5mult>
 800afc0:	9001      	str	r0, [sp, #4]
 800afc2:	2101      	movs	r1, #1
 800afc4:	4620      	mov	r0, r4
 800afc6:	f000 fae6 	bl	800b596 <__i2b>
 800afca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afcc:	4605      	mov	r5, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 81ca 	beq.w	800b368 <_dtoa_r+0xa48>
 800afd4:	461a      	mov	r2, r3
 800afd6:	4601      	mov	r1, r0
 800afd8:	4620      	mov	r0, r4
 800afda:	f000 fb7b 	bl	800b6d4 <__pow5mult>
 800afde:	9b08      	ldr	r3, [sp, #32]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	4605      	mov	r5, r0
 800afe4:	dc44      	bgt.n	800b070 <_dtoa_r+0x750>
 800afe6:	9b02      	ldr	r3, [sp, #8]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d13c      	bne.n	800b066 <_dtoa_r+0x746>
 800afec:	9b03      	ldr	r3, [sp, #12]
 800afee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d137      	bne.n	800b066 <_dtoa_r+0x746>
 800aff6:	9b03      	ldr	r3, [sp, #12]
 800aff8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800affc:	0d1b      	lsrs	r3, r3, #20
 800affe:	051b      	lsls	r3, r3, #20
 800b000:	2b00      	cmp	r3, #0
 800b002:	d033      	beq.n	800b06c <_dtoa_r+0x74c>
 800b004:	9b07      	ldr	r3, [sp, #28]
 800b006:	3301      	adds	r3, #1
 800b008:	f10a 0a01 	add.w	sl, sl, #1
 800b00c:	9307      	str	r3, [sp, #28]
 800b00e:	f04f 0801 	mov.w	r8, #1
 800b012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b014:	bb73      	cbnz	r3, 800b074 <_dtoa_r+0x754>
 800b016:	2001      	movs	r0, #1
 800b018:	e034      	b.n	800b084 <_dtoa_r+0x764>
 800b01a:	bf00      	nop
 800b01c:	0800fa78 	.word	0x0800fa78
 800b020:	0800fa50 	.word	0x0800fa50
 800b024:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b026:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b02a:	e790      	b.n	800af4e <_dtoa_r+0x62e>
 800b02c:	f109 35ff 	add.w	r5, r9, #4294967295
 800b030:	45a8      	cmp	r8, r5
 800b032:	bfbf      	itttt	lt
 800b034:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800b036:	eba5 0808 	sublt.w	r8, r5, r8
 800b03a:	4443      	addlt	r3, r8
 800b03c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800b03e:	bfb6      	itet	lt
 800b040:	46a8      	movlt	r8, r5
 800b042:	eba8 0505 	subge.w	r5, r8, r5
 800b046:	2500      	movlt	r5, #0
 800b048:	f1b9 0f00 	cmp.w	r9, #0
 800b04c:	bfb9      	ittee	lt
 800b04e:	ebaa 0609 	sublt.w	r6, sl, r9
 800b052:	2300      	movlt	r3, #0
 800b054:	4656      	movge	r6, sl
 800b056:	464b      	movge	r3, r9
 800b058:	e77b      	b.n	800af52 <_dtoa_r+0x632>
 800b05a:	4645      	mov	r5, r8
 800b05c:	4656      	mov	r6, sl
 800b05e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b060:	e780      	b.n	800af64 <_dtoa_r+0x644>
 800b062:	4642      	mov	r2, r8
 800b064:	e7a8      	b.n	800afb8 <_dtoa_r+0x698>
 800b066:	f04f 0800 	mov.w	r8, #0
 800b06a:	e7d2      	b.n	800b012 <_dtoa_r+0x6f2>
 800b06c:	4698      	mov	r8, r3
 800b06e:	e7d0      	b.n	800b012 <_dtoa_r+0x6f2>
 800b070:	f04f 0800 	mov.w	r8, #0
 800b074:	692b      	ldr	r3, [r5, #16]
 800b076:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b07a:	6918      	ldr	r0, [r3, #16]
 800b07c:	f000 fa3d 	bl	800b4fa <__hi0bits>
 800b080:	f1c0 0020 	rsb	r0, r0, #32
 800b084:	9b07      	ldr	r3, [sp, #28]
 800b086:	4418      	add	r0, r3
 800b088:	f010 001f 	ands.w	r0, r0, #31
 800b08c:	d047      	beq.n	800b11e <_dtoa_r+0x7fe>
 800b08e:	f1c0 0320 	rsb	r3, r0, #32
 800b092:	2b04      	cmp	r3, #4
 800b094:	dd3b      	ble.n	800b10e <_dtoa_r+0x7ee>
 800b096:	9b07      	ldr	r3, [sp, #28]
 800b098:	f1c0 001c 	rsb	r0, r0, #28
 800b09c:	4482      	add	sl, r0
 800b09e:	4406      	add	r6, r0
 800b0a0:	4403      	add	r3, r0
 800b0a2:	9307      	str	r3, [sp, #28]
 800b0a4:	f1ba 0f00 	cmp.w	sl, #0
 800b0a8:	dd05      	ble.n	800b0b6 <_dtoa_r+0x796>
 800b0aa:	4652      	mov	r2, sl
 800b0ac:	9901      	ldr	r1, [sp, #4]
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f000 fb5e 	bl	800b770 <__lshift>
 800b0b4:	9001      	str	r0, [sp, #4]
 800b0b6:	9b07      	ldr	r3, [sp, #28]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	dd05      	ble.n	800b0c8 <_dtoa_r+0x7a8>
 800b0bc:	4629      	mov	r1, r5
 800b0be:	461a      	mov	r2, r3
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f000 fb55 	bl	800b770 <__lshift>
 800b0c6:	4605      	mov	r5, r0
 800b0c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0ca:	b353      	cbz	r3, 800b122 <_dtoa_r+0x802>
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	9801      	ldr	r0, [sp, #4]
 800b0d0:	f000 fba2 	bl	800b818 <__mcmp>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	da24      	bge.n	800b122 <_dtoa_r+0x802>
 800b0d8:	2300      	movs	r3, #0
 800b0da:	220a      	movs	r2, #10
 800b0dc:	9901      	ldr	r1, [sp, #4]
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f000 f9d0 	bl	800b484 <__multadd>
 800b0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e6:	9001      	str	r0, [sp, #4]
 800b0e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f000 8142 	beq.w	800b376 <_dtoa_r+0xa56>
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	4639      	mov	r1, r7
 800b0f6:	220a      	movs	r2, #10
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f000 f9c3 	bl	800b484 <__multadd>
 800b0fe:	9b06      	ldr	r3, [sp, #24]
 800b100:	2b00      	cmp	r3, #0
 800b102:	4607      	mov	r7, r0
 800b104:	dc4b      	bgt.n	800b19e <_dtoa_r+0x87e>
 800b106:	9b08      	ldr	r3, [sp, #32]
 800b108:	2b02      	cmp	r3, #2
 800b10a:	dd48      	ble.n	800b19e <_dtoa_r+0x87e>
 800b10c:	e011      	b.n	800b132 <_dtoa_r+0x812>
 800b10e:	d0c9      	beq.n	800b0a4 <_dtoa_r+0x784>
 800b110:	9a07      	ldr	r2, [sp, #28]
 800b112:	331c      	adds	r3, #28
 800b114:	441a      	add	r2, r3
 800b116:	449a      	add	sl, r3
 800b118:	441e      	add	r6, r3
 800b11a:	4613      	mov	r3, r2
 800b11c:	e7c1      	b.n	800b0a2 <_dtoa_r+0x782>
 800b11e:	4603      	mov	r3, r0
 800b120:	e7f6      	b.n	800b110 <_dtoa_r+0x7f0>
 800b122:	f1b9 0f00 	cmp.w	r9, #0
 800b126:	dc34      	bgt.n	800b192 <_dtoa_r+0x872>
 800b128:	9b08      	ldr	r3, [sp, #32]
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	dd31      	ble.n	800b192 <_dtoa_r+0x872>
 800b12e:	f8cd 9018 	str.w	r9, [sp, #24]
 800b132:	9b06      	ldr	r3, [sp, #24]
 800b134:	b963      	cbnz	r3, 800b150 <_dtoa_r+0x830>
 800b136:	4629      	mov	r1, r5
 800b138:	2205      	movs	r2, #5
 800b13a:	4620      	mov	r0, r4
 800b13c:	f000 f9a2 	bl	800b484 <__multadd>
 800b140:	4601      	mov	r1, r0
 800b142:	4605      	mov	r5, r0
 800b144:	9801      	ldr	r0, [sp, #4]
 800b146:	f000 fb67 	bl	800b818 <__mcmp>
 800b14a:	2800      	cmp	r0, #0
 800b14c:	f73f adfc 	bgt.w	800ad48 <_dtoa_r+0x428>
 800b150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b152:	9e04      	ldr	r6, [sp, #16]
 800b154:	ea6f 0b03 	mvn.w	fp, r3
 800b158:	f04f 0900 	mov.w	r9, #0
 800b15c:	4629      	mov	r1, r5
 800b15e:	4620      	mov	r0, r4
 800b160:	f000 f979 	bl	800b456 <_Bfree>
 800b164:	2f00      	cmp	r7, #0
 800b166:	f43f aebb 	beq.w	800aee0 <_dtoa_r+0x5c0>
 800b16a:	f1b9 0f00 	cmp.w	r9, #0
 800b16e:	d005      	beq.n	800b17c <_dtoa_r+0x85c>
 800b170:	45b9      	cmp	r9, r7
 800b172:	d003      	beq.n	800b17c <_dtoa_r+0x85c>
 800b174:	4649      	mov	r1, r9
 800b176:	4620      	mov	r0, r4
 800b178:	f000 f96d 	bl	800b456 <_Bfree>
 800b17c:	4639      	mov	r1, r7
 800b17e:	4620      	mov	r0, r4
 800b180:	f000 f969 	bl	800b456 <_Bfree>
 800b184:	e6ac      	b.n	800aee0 <_dtoa_r+0x5c0>
 800b186:	2500      	movs	r5, #0
 800b188:	462f      	mov	r7, r5
 800b18a:	e7e1      	b.n	800b150 <_dtoa_r+0x830>
 800b18c:	469b      	mov	fp, r3
 800b18e:	462f      	mov	r7, r5
 800b190:	e5da      	b.n	800ad48 <_dtoa_r+0x428>
 800b192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b194:	f8cd 9018 	str.w	r9, [sp, #24]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f000 80f3 	beq.w	800b384 <_dtoa_r+0xa64>
 800b19e:	2e00      	cmp	r6, #0
 800b1a0:	dd05      	ble.n	800b1ae <_dtoa_r+0x88e>
 800b1a2:	4639      	mov	r1, r7
 800b1a4:	4632      	mov	r2, r6
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f000 fae2 	bl	800b770 <__lshift>
 800b1ac:	4607      	mov	r7, r0
 800b1ae:	f1b8 0f00 	cmp.w	r8, #0
 800b1b2:	d04c      	beq.n	800b24e <_dtoa_r+0x92e>
 800b1b4:	6879      	ldr	r1, [r7, #4]
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	f000 f919 	bl	800b3ee <_Balloc>
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	3202      	adds	r2, #2
 800b1c0:	4606      	mov	r6, r0
 800b1c2:	0092      	lsls	r2, r2, #2
 800b1c4:	f107 010c 	add.w	r1, r7, #12
 800b1c8:	300c      	adds	r0, #12
 800b1ca:	f000 f903 	bl	800b3d4 <memcpy>
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	4631      	mov	r1, r6
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f000 facc 	bl	800b770 <__lshift>
 800b1d8:	9b02      	ldr	r3, [sp, #8]
 800b1da:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b1de:	f003 0301 	and.w	r3, r3, #1
 800b1e2:	46b9      	mov	r9, r7
 800b1e4:	9307      	str	r3, [sp, #28]
 800b1e6:	4607      	mov	r7, r0
 800b1e8:	4629      	mov	r1, r5
 800b1ea:	9801      	ldr	r0, [sp, #4]
 800b1ec:	f7ff fb0c 	bl	800a808 <quorem>
 800b1f0:	4649      	mov	r1, r9
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b1f8:	9801      	ldr	r0, [sp, #4]
 800b1fa:	f000 fb0d 	bl	800b818 <__mcmp>
 800b1fe:	463a      	mov	r2, r7
 800b200:	9002      	str	r0, [sp, #8]
 800b202:	4629      	mov	r1, r5
 800b204:	4620      	mov	r0, r4
 800b206:	f000 fb21 	bl	800b84c <__mdiff>
 800b20a:	68c3      	ldr	r3, [r0, #12]
 800b20c:	4602      	mov	r2, r0
 800b20e:	bb03      	cbnz	r3, 800b252 <_dtoa_r+0x932>
 800b210:	4601      	mov	r1, r0
 800b212:	9009      	str	r0, [sp, #36]	; 0x24
 800b214:	9801      	ldr	r0, [sp, #4]
 800b216:	f000 faff 	bl	800b818 <__mcmp>
 800b21a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b21c:	4603      	mov	r3, r0
 800b21e:	4611      	mov	r1, r2
 800b220:	4620      	mov	r0, r4
 800b222:	9309      	str	r3, [sp, #36]	; 0x24
 800b224:	f000 f917 	bl	800b456 <_Bfree>
 800b228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b22a:	b9a3      	cbnz	r3, 800b256 <_dtoa_r+0x936>
 800b22c:	9a08      	ldr	r2, [sp, #32]
 800b22e:	b992      	cbnz	r2, 800b256 <_dtoa_r+0x936>
 800b230:	9a07      	ldr	r2, [sp, #28]
 800b232:	b982      	cbnz	r2, 800b256 <_dtoa_r+0x936>
 800b234:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b238:	d029      	beq.n	800b28e <_dtoa_r+0x96e>
 800b23a:	9b02      	ldr	r3, [sp, #8]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	dd01      	ble.n	800b244 <_dtoa_r+0x924>
 800b240:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800b244:	f10a 0601 	add.w	r6, sl, #1
 800b248:	f88a 8000 	strb.w	r8, [sl]
 800b24c:	e786      	b.n	800b15c <_dtoa_r+0x83c>
 800b24e:	4638      	mov	r0, r7
 800b250:	e7c2      	b.n	800b1d8 <_dtoa_r+0x8b8>
 800b252:	2301      	movs	r3, #1
 800b254:	e7e3      	b.n	800b21e <_dtoa_r+0x8fe>
 800b256:	9a02      	ldr	r2, [sp, #8]
 800b258:	2a00      	cmp	r2, #0
 800b25a:	db04      	blt.n	800b266 <_dtoa_r+0x946>
 800b25c:	d124      	bne.n	800b2a8 <_dtoa_r+0x988>
 800b25e:	9a08      	ldr	r2, [sp, #32]
 800b260:	bb12      	cbnz	r2, 800b2a8 <_dtoa_r+0x988>
 800b262:	9a07      	ldr	r2, [sp, #28]
 800b264:	bb02      	cbnz	r2, 800b2a8 <_dtoa_r+0x988>
 800b266:	2b00      	cmp	r3, #0
 800b268:	ddec      	ble.n	800b244 <_dtoa_r+0x924>
 800b26a:	2201      	movs	r2, #1
 800b26c:	9901      	ldr	r1, [sp, #4]
 800b26e:	4620      	mov	r0, r4
 800b270:	f000 fa7e 	bl	800b770 <__lshift>
 800b274:	4629      	mov	r1, r5
 800b276:	9001      	str	r0, [sp, #4]
 800b278:	f000 face 	bl	800b818 <__mcmp>
 800b27c:	2800      	cmp	r0, #0
 800b27e:	dc03      	bgt.n	800b288 <_dtoa_r+0x968>
 800b280:	d1e0      	bne.n	800b244 <_dtoa_r+0x924>
 800b282:	f018 0f01 	tst.w	r8, #1
 800b286:	d0dd      	beq.n	800b244 <_dtoa_r+0x924>
 800b288:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b28c:	d1d8      	bne.n	800b240 <_dtoa_r+0x920>
 800b28e:	2339      	movs	r3, #57	; 0x39
 800b290:	f10a 0601 	add.w	r6, sl, #1
 800b294:	f88a 3000 	strb.w	r3, [sl]
 800b298:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b29c:	2b39      	cmp	r3, #57	; 0x39
 800b29e:	f106 32ff 	add.w	r2, r6, #4294967295
 800b2a2:	d04c      	beq.n	800b33e <_dtoa_r+0xa1e>
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	e051      	b.n	800b34c <_dtoa_r+0xa2c>
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	f10a 0601 	add.w	r6, sl, #1
 800b2ae:	dd05      	ble.n	800b2bc <_dtoa_r+0x99c>
 800b2b0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b2b4:	d0eb      	beq.n	800b28e <_dtoa_r+0x96e>
 800b2b6:	f108 0801 	add.w	r8, r8, #1
 800b2ba:	e7c5      	b.n	800b248 <_dtoa_r+0x928>
 800b2bc:	9b04      	ldr	r3, [sp, #16]
 800b2be:	9a06      	ldr	r2, [sp, #24]
 800b2c0:	f806 8c01 	strb.w	r8, [r6, #-1]
 800b2c4:	1af3      	subs	r3, r6, r3
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d021      	beq.n	800b30e <_dtoa_r+0x9ee>
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	220a      	movs	r2, #10
 800b2ce:	9901      	ldr	r1, [sp, #4]
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f000 f8d7 	bl	800b484 <__multadd>
 800b2d6:	45b9      	cmp	r9, r7
 800b2d8:	9001      	str	r0, [sp, #4]
 800b2da:	f04f 0300 	mov.w	r3, #0
 800b2de:	f04f 020a 	mov.w	r2, #10
 800b2e2:	4649      	mov	r1, r9
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	d105      	bne.n	800b2f4 <_dtoa_r+0x9d4>
 800b2e8:	f000 f8cc 	bl	800b484 <__multadd>
 800b2ec:	4681      	mov	r9, r0
 800b2ee:	4607      	mov	r7, r0
 800b2f0:	46b2      	mov	sl, r6
 800b2f2:	e779      	b.n	800b1e8 <_dtoa_r+0x8c8>
 800b2f4:	f000 f8c6 	bl	800b484 <__multadd>
 800b2f8:	4639      	mov	r1, r7
 800b2fa:	4681      	mov	r9, r0
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	220a      	movs	r2, #10
 800b300:	4620      	mov	r0, r4
 800b302:	f000 f8bf 	bl	800b484 <__multadd>
 800b306:	4607      	mov	r7, r0
 800b308:	e7f2      	b.n	800b2f0 <_dtoa_r+0x9d0>
 800b30a:	f04f 0900 	mov.w	r9, #0
 800b30e:	2201      	movs	r2, #1
 800b310:	9901      	ldr	r1, [sp, #4]
 800b312:	4620      	mov	r0, r4
 800b314:	f000 fa2c 	bl	800b770 <__lshift>
 800b318:	4629      	mov	r1, r5
 800b31a:	9001      	str	r0, [sp, #4]
 800b31c:	f000 fa7c 	bl	800b818 <__mcmp>
 800b320:	2800      	cmp	r0, #0
 800b322:	dcb9      	bgt.n	800b298 <_dtoa_r+0x978>
 800b324:	d102      	bne.n	800b32c <_dtoa_r+0xa0c>
 800b326:	f018 0f01 	tst.w	r8, #1
 800b32a:	d1b5      	bne.n	800b298 <_dtoa_r+0x978>
 800b32c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b330:	2b30      	cmp	r3, #48	; 0x30
 800b332:	f106 32ff 	add.w	r2, r6, #4294967295
 800b336:	f47f af11 	bne.w	800b15c <_dtoa_r+0x83c>
 800b33a:	4616      	mov	r6, r2
 800b33c:	e7f6      	b.n	800b32c <_dtoa_r+0xa0c>
 800b33e:	9b04      	ldr	r3, [sp, #16]
 800b340:	4293      	cmp	r3, r2
 800b342:	d105      	bne.n	800b350 <_dtoa_r+0xa30>
 800b344:	9a04      	ldr	r2, [sp, #16]
 800b346:	f10b 0b01 	add.w	fp, fp, #1
 800b34a:	2331      	movs	r3, #49	; 0x31
 800b34c:	7013      	strb	r3, [r2, #0]
 800b34e:	e705      	b.n	800b15c <_dtoa_r+0x83c>
 800b350:	4616      	mov	r6, r2
 800b352:	e7a1      	b.n	800b298 <_dtoa_r+0x978>
 800b354:	4b16      	ldr	r3, [pc, #88]	; (800b3b0 <_dtoa_r+0xa90>)
 800b356:	f7ff bb48 	b.w	800a9ea <_dtoa_r+0xca>
 800b35a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f47f ab23 	bne.w	800a9a8 <_dtoa_r+0x88>
 800b362:	4b14      	ldr	r3, [pc, #80]	; (800b3b4 <_dtoa_r+0xa94>)
 800b364:	f7ff bb41 	b.w	800a9ea <_dtoa_r+0xca>
 800b368:	9b08      	ldr	r3, [sp, #32]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	f77f ae3b 	ble.w	800afe6 <_dtoa_r+0x6c6>
 800b370:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b374:	e64f      	b.n	800b016 <_dtoa_r+0x6f6>
 800b376:	9b06      	ldr	r3, [sp, #24]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	dc03      	bgt.n	800b384 <_dtoa_r+0xa64>
 800b37c:	9b08      	ldr	r3, [sp, #32]
 800b37e:	2b02      	cmp	r3, #2
 800b380:	f73f aed7 	bgt.w	800b132 <_dtoa_r+0x812>
 800b384:	9e04      	ldr	r6, [sp, #16]
 800b386:	9801      	ldr	r0, [sp, #4]
 800b388:	4629      	mov	r1, r5
 800b38a:	f7ff fa3d 	bl	800a808 <quorem>
 800b38e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b392:	f806 8b01 	strb.w	r8, [r6], #1
 800b396:	9b04      	ldr	r3, [sp, #16]
 800b398:	9a06      	ldr	r2, [sp, #24]
 800b39a:	1af3      	subs	r3, r6, r3
 800b39c:	429a      	cmp	r2, r3
 800b39e:	ddb4      	ble.n	800b30a <_dtoa_r+0x9ea>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	220a      	movs	r2, #10
 800b3a4:	9901      	ldr	r1, [sp, #4]
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f000 f86c 	bl	800b484 <__multadd>
 800b3ac:	9001      	str	r0, [sp, #4]
 800b3ae:	e7ea      	b.n	800b386 <_dtoa_r+0xa66>
 800b3b0:	0800fc6c 	.word	0x0800fc6c
 800b3b4:	0800fa42 	.word	0x0800fa42

0800b3b8 <_localeconv_r>:
 800b3b8:	4b04      	ldr	r3, [pc, #16]	; (800b3cc <_localeconv_r+0x14>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	6a18      	ldr	r0, [r3, #32]
 800b3be:	4b04      	ldr	r3, [pc, #16]	; (800b3d0 <_localeconv_r+0x18>)
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	bf08      	it	eq
 800b3c4:	4618      	moveq	r0, r3
 800b3c6:	30f0      	adds	r0, #240	; 0xf0
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	24000378 	.word	0x24000378
 800b3d0:	240003dc 	.word	0x240003dc

0800b3d4 <memcpy>:
 800b3d4:	b510      	push	{r4, lr}
 800b3d6:	1e43      	subs	r3, r0, #1
 800b3d8:	440a      	add	r2, r1
 800b3da:	4291      	cmp	r1, r2
 800b3dc:	d100      	bne.n	800b3e0 <memcpy+0xc>
 800b3de:	bd10      	pop	{r4, pc}
 800b3e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3e8:	e7f7      	b.n	800b3da <memcpy+0x6>

0800b3ea <__malloc_lock>:
 800b3ea:	4770      	bx	lr

0800b3ec <__malloc_unlock>:
 800b3ec:	4770      	bx	lr

0800b3ee <_Balloc>:
 800b3ee:	b570      	push	{r4, r5, r6, lr}
 800b3f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	460e      	mov	r6, r1
 800b3f6:	b93d      	cbnz	r5, 800b408 <_Balloc+0x1a>
 800b3f8:	2010      	movs	r0, #16
 800b3fa:	f7fe fcd1 	bl	8009da0 <malloc>
 800b3fe:	6260      	str	r0, [r4, #36]	; 0x24
 800b400:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b404:	6005      	str	r5, [r0, #0]
 800b406:	60c5      	str	r5, [r0, #12]
 800b408:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b40a:	68eb      	ldr	r3, [r5, #12]
 800b40c:	b183      	cbz	r3, 800b430 <_Balloc+0x42>
 800b40e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b410:	68db      	ldr	r3, [r3, #12]
 800b412:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b416:	b9b8      	cbnz	r0, 800b448 <_Balloc+0x5a>
 800b418:	2101      	movs	r1, #1
 800b41a:	fa01 f506 	lsl.w	r5, r1, r6
 800b41e:	1d6a      	adds	r2, r5, #5
 800b420:	0092      	lsls	r2, r2, #2
 800b422:	4620      	mov	r0, r4
 800b424:	f000 fabe 	bl	800b9a4 <_calloc_r>
 800b428:	b160      	cbz	r0, 800b444 <_Balloc+0x56>
 800b42a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b42e:	e00e      	b.n	800b44e <_Balloc+0x60>
 800b430:	2221      	movs	r2, #33	; 0x21
 800b432:	2104      	movs	r1, #4
 800b434:	4620      	mov	r0, r4
 800b436:	f000 fab5 	bl	800b9a4 <_calloc_r>
 800b43a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b43c:	60e8      	str	r0, [r5, #12]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1e4      	bne.n	800b40e <_Balloc+0x20>
 800b444:	2000      	movs	r0, #0
 800b446:	bd70      	pop	{r4, r5, r6, pc}
 800b448:	6802      	ldr	r2, [r0, #0]
 800b44a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b44e:	2300      	movs	r3, #0
 800b450:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b454:	e7f7      	b.n	800b446 <_Balloc+0x58>

0800b456 <_Bfree>:
 800b456:	b570      	push	{r4, r5, r6, lr}
 800b458:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b45a:	4606      	mov	r6, r0
 800b45c:	460d      	mov	r5, r1
 800b45e:	b93c      	cbnz	r4, 800b470 <_Bfree+0x1a>
 800b460:	2010      	movs	r0, #16
 800b462:	f7fe fc9d 	bl	8009da0 <malloc>
 800b466:	6270      	str	r0, [r6, #36]	; 0x24
 800b468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b46c:	6004      	str	r4, [r0, #0]
 800b46e:	60c4      	str	r4, [r0, #12]
 800b470:	b13d      	cbz	r5, 800b482 <_Bfree+0x2c>
 800b472:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b474:	686a      	ldr	r2, [r5, #4]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b47c:	6029      	str	r1, [r5, #0]
 800b47e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b482:	bd70      	pop	{r4, r5, r6, pc}

0800b484 <__multadd>:
 800b484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b488:	690d      	ldr	r5, [r1, #16]
 800b48a:	461f      	mov	r7, r3
 800b48c:	4606      	mov	r6, r0
 800b48e:	460c      	mov	r4, r1
 800b490:	f101 0c14 	add.w	ip, r1, #20
 800b494:	2300      	movs	r3, #0
 800b496:	f8dc 0000 	ldr.w	r0, [ip]
 800b49a:	b281      	uxth	r1, r0
 800b49c:	fb02 7101 	mla	r1, r2, r1, r7
 800b4a0:	0c0f      	lsrs	r7, r1, #16
 800b4a2:	0c00      	lsrs	r0, r0, #16
 800b4a4:	fb02 7000 	mla	r0, r2, r0, r7
 800b4a8:	b289      	uxth	r1, r1
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b4b0:	429d      	cmp	r5, r3
 800b4b2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b4b6:	f84c 1b04 	str.w	r1, [ip], #4
 800b4ba:	dcec      	bgt.n	800b496 <__multadd+0x12>
 800b4bc:	b1d7      	cbz	r7, 800b4f4 <__multadd+0x70>
 800b4be:	68a3      	ldr	r3, [r4, #8]
 800b4c0:	42ab      	cmp	r3, r5
 800b4c2:	dc12      	bgt.n	800b4ea <__multadd+0x66>
 800b4c4:	6861      	ldr	r1, [r4, #4]
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	3101      	adds	r1, #1
 800b4ca:	f7ff ff90 	bl	800b3ee <_Balloc>
 800b4ce:	6922      	ldr	r2, [r4, #16]
 800b4d0:	3202      	adds	r2, #2
 800b4d2:	f104 010c 	add.w	r1, r4, #12
 800b4d6:	4680      	mov	r8, r0
 800b4d8:	0092      	lsls	r2, r2, #2
 800b4da:	300c      	adds	r0, #12
 800b4dc:	f7ff ff7a 	bl	800b3d4 <memcpy>
 800b4e0:	4621      	mov	r1, r4
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f7ff ffb7 	bl	800b456 <_Bfree>
 800b4e8:	4644      	mov	r4, r8
 800b4ea:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4ee:	3501      	adds	r5, #1
 800b4f0:	615f      	str	r7, [r3, #20]
 800b4f2:	6125      	str	r5, [r4, #16]
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b4fa <__hi0bits>:
 800b4fa:	0c02      	lsrs	r2, r0, #16
 800b4fc:	0412      	lsls	r2, r2, #16
 800b4fe:	4603      	mov	r3, r0
 800b500:	b9b2      	cbnz	r2, 800b530 <__hi0bits+0x36>
 800b502:	0403      	lsls	r3, r0, #16
 800b504:	2010      	movs	r0, #16
 800b506:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b50a:	bf04      	itt	eq
 800b50c:	021b      	lsleq	r3, r3, #8
 800b50e:	3008      	addeq	r0, #8
 800b510:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b514:	bf04      	itt	eq
 800b516:	011b      	lsleq	r3, r3, #4
 800b518:	3004      	addeq	r0, #4
 800b51a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b51e:	bf04      	itt	eq
 800b520:	009b      	lsleq	r3, r3, #2
 800b522:	3002      	addeq	r0, #2
 800b524:	2b00      	cmp	r3, #0
 800b526:	db06      	blt.n	800b536 <__hi0bits+0x3c>
 800b528:	005b      	lsls	r3, r3, #1
 800b52a:	d503      	bpl.n	800b534 <__hi0bits+0x3a>
 800b52c:	3001      	adds	r0, #1
 800b52e:	4770      	bx	lr
 800b530:	2000      	movs	r0, #0
 800b532:	e7e8      	b.n	800b506 <__hi0bits+0xc>
 800b534:	2020      	movs	r0, #32
 800b536:	4770      	bx	lr

0800b538 <__lo0bits>:
 800b538:	6803      	ldr	r3, [r0, #0]
 800b53a:	f013 0207 	ands.w	r2, r3, #7
 800b53e:	4601      	mov	r1, r0
 800b540:	d00b      	beq.n	800b55a <__lo0bits+0x22>
 800b542:	07da      	lsls	r2, r3, #31
 800b544:	d423      	bmi.n	800b58e <__lo0bits+0x56>
 800b546:	0798      	lsls	r0, r3, #30
 800b548:	bf49      	itett	mi
 800b54a:	085b      	lsrmi	r3, r3, #1
 800b54c:	089b      	lsrpl	r3, r3, #2
 800b54e:	2001      	movmi	r0, #1
 800b550:	600b      	strmi	r3, [r1, #0]
 800b552:	bf5c      	itt	pl
 800b554:	600b      	strpl	r3, [r1, #0]
 800b556:	2002      	movpl	r0, #2
 800b558:	4770      	bx	lr
 800b55a:	b298      	uxth	r0, r3
 800b55c:	b9a8      	cbnz	r0, 800b58a <__lo0bits+0x52>
 800b55e:	0c1b      	lsrs	r3, r3, #16
 800b560:	2010      	movs	r0, #16
 800b562:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b566:	bf04      	itt	eq
 800b568:	0a1b      	lsreq	r3, r3, #8
 800b56a:	3008      	addeq	r0, #8
 800b56c:	071a      	lsls	r2, r3, #28
 800b56e:	bf04      	itt	eq
 800b570:	091b      	lsreq	r3, r3, #4
 800b572:	3004      	addeq	r0, #4
 800b574:	079a      	lsls	r2, r3, #30
 800b576:	bf04      	itt	eq
 800b578:	089b      	lsreq	r3, r3, #2
 800b57a:	3002      	addeq	r0, #2
 800b57c:	07da      	lsls	r2, r3, #31
 800b57e:	d402      	bmi.n	800b586 <__lo0bits+0x4e>
 800b580:	085b      	lsrs	r3, r3, #1
 800b582:	d006      	beq.n	800b592 <__lo0bits+0x5a>
 800b584:	3001      	adds	r0, #1
 800b586:	600b      	str	r3, [r1, #0]
 800b588:	4770      	bx	lr
 800b58a:	4610      	mov	r0, r2
 800b58c:	e7e9      	b.n	800b562 <__lo0bits+0x2a>
 800b58e:	2000      	movs	r0, #0
 800b590:	4770      	bx	lr
 800b592:	2020      	movs	r0, #32
 800b594:	4770      	bx	lr

0800b596 <__i2b>:
 800b596:	b510      	push	{r4, lr}
 800b598:	460c      	mov	r4, r1
 800b59a:	2101      	movs	r1, #1
 800b59c:	f7ff ff27 	bl	800b3ee <_Balloc>
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	6144      	str	r4, [r0, #20]
 800b5a4:	6102      	str	r2, [r0, #16]
 800b5a6:	bd10      	pop	{r4, pc}

0800b5a8 <__multiply>:
 800b5a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ac:	4614      	mov	r4, r2
 800b5ae:	690a      	ldr	r2, [r1, #16]
 800b5b0:	6923      	ldr	r3, [r4, #16]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	bfb8      	it	lt
 800b5b6:	460b      	movlt	r3, r1
 800b5b8:	4688      	mov	r8, r1
 800b5ba:	bfbc      	itt	lt
 800b5bc:	46a0      	movlt	r8, r4
 800b5be:	461c      	movlt	r4, r3
 800b5c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b5c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b5c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b5d0:	eb07 0609 	add.w	r6, r7, r9
 800b5d4:	42b3      	cmp	r3, r6
 800b5d6:	bfb8      	it	lt
 800b5d8:	3101      	addlt	r1, #1
 800b5da:	f7ff ff08 	bl	800b3ee <_Balloc>
 800b5de:	f100 0514 	add.w	r5, r0, #20
 800b5e2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b5e6:	462b      	mov	r3, r5
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	4573      	cmp	r3, lr
 800b5ec:	d316      	bcc.n	800b61c <__multiply+0x74>
 800b5ee:	f104 0214 	add.w	r2, r4, #20
 800b5f2:	f108 0114 	add.w	r1, r8, #20
 800b5f6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b5fa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b5fe:	9300      	str	r3, [sp, #0]
 800b600:	9b00      	ldr	r3, [sp, #0]
 800b602:	9201      	str	r2, [sp, #4]
 800b604:	4293      	cmp	r3, r2
 800b606:	d80c      	bhi.n	800b622 <__multiply+0x7a>
 800b608:	2e00      	cmp	r6, #0
 800b60a:	dd03      	ble.n	800b614 <__multiply+0x6c>
 800b60c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b610:	2b00      	cmp	r3, #0
 800b612:	d05d      	beq.n	800b6d0 <__multiply+0x128>
 800b614:	6106      	str	r6, [r0, #16]
 800b616:	b003      	add	sp, #12
 800b618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b61c:	f843 2b04 	str.w	r2, [r3], #4
 800b620:	e7e3      	b.n	800b5ea <__multiply+0x42>
 800b622:	f8b2 b000 	ldrh.w	fp, [r2]
 800b626:	f1bb 0f00 	cmp.w	fp, #0
 800b62a:	d023      	beq.n	800b674 <__multiply+0xcc>
 800b62c:	4689      	mov	r9, r1
 800b62e:	46ac      	mov	ip, r5
 800b630:	f04f 0800 	mov.w	r8, #0
 800b634:	f859 4b04 	ldr.w	r4, [r9], #4
 800b638:	f8dc a000 	ldr.w	sl, [ip]
 800b63c:	b2a3      	uxth	r3, r4
 800b63e:	fa1f fa8a 	uxth.w	sl, sl
 800b642:	fb0b a303 	mla	r3, fp, r3, sl
 800b646:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b64a:	f8dc 4000 	ldr.w	r4, [ip]
 800b64e:	4443      	add	r3, r8
 800b650:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b654:	fb0b 840a 	mla	r4, fp, sl, r8
 800b658:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b65c:	46e2      	mov	sl, ip
 800b65e:	b29b      	uxth	r3, r3
 800b660:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b664:	454f      	cmp	r7, r9
 800b666:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b66a:	f84a 3b04 	str.w	r3, [sl], #4
 800b66e:	d82b      	bhi.n	800b6c8 <__multiply+0x120>
 800b670:	f8cc 8004 	str.w	r8, [ip, #4]
 800b674:	9b01      	ldr	r3, [sp, #4]
 800b676:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b67a:	3204      	adds	r2, #4
 800b67c:	f1ba 0f00 	cmp.w	sl, #0
 800b680:	d020      	beq.n	800b6c4 <__multiply+0x11c>
 800b682:	682b      	ldr	r3, [r5, #0]
 800b684:	4689      	mov	r9, r1
 800b686:	46a8      	mov	r8, r5
 800b688:	f04f 0b00 	mov.w	fp, #0
 800b68c:	f8b9 c000 	ldrh.w	ip, [r9]
 800b690:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b694:	fb0a 440c 	mla	r4, sl, ip, r4
 800b698:	445c      	add	r4, fp
 800b69a:	46c4      	mov	ip, r8
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b6a2:	f84c 3b04 	str.w	r3, [ip], #4
 800b6a6:	f859 3b04 	ldr.w	r3, [r9], #4
 800b6aa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b6ae:	0c1b      	lsrs	r3, r3, #16
 800b6b0:	fb0a b303 	mla	r3, sl, r3, fp
 800b6b4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b6b8:	454f      	cmp	r7, r9
 800b6ba:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b6be:	d805      	bhi.n	800b6cc <__multiply+0x124>
 800b6c0:	f8c8 3004 	str.w	r3, [r8, #4]
 800b6c4:	3504      	adds	r5, #4
 800b6c6:	e79b      	b.n	800b600 <__multiply+0x58>
 800b6c8:	46d4      	mov	ip, sl
 800b6ca:	e7b3      	b.n	800b634 <__multiply+0x8c>
 800b6cc:	46e0      	mov	r8, ip
 800b6ce:	e7dd      	b.n	800b68c <__multiply+0xe4>
 800b6d0:	3e01      	subs	r6, #1
 800b6d2:	e799      	b.n	800b608 <__multiply+0x60>

0800b6d4 <__pow5mult>:
 800b6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6d8:	4615      	mov	r5, r2
 800b6da:	f012 0203 	ands.w	r2, r2, #3
 800b6de:	4606      	mov	r6, r0
 800b6e0:	460f      	mov	r7, r1
 800b6e2:	d007      	beq.n	800b6f4 <__pow5mult+0x20>
 800b6e4:	3a01      	subs	r2, #1
 800b6e6:	4c21      	ldr	r4, [pc, #132]	; (800b76c <__pow5mult+0x98>)
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6ee:	f7ff fec9 	bl	800b484 <__multadd>
 800b6f2:	4607      	mov	r7, r0
 800b6f4:	10ad      	asrs	r5, r5, #2
 800b6f6:	d035      	beq.n	800b764 <__pow5mult+0x90>
 800b6f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b6fa:	b93c      	cbnz	r4, 800b70c <__pow5mult+0x38>
 800b6fc:	2010      	movs	r0, #16
 800b6fe:	f7fe fb4f 	bl	8009da0 <malloc>
 800b702:	6270      	str	r0, [r6, #36]	; 0x24
 800b704:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b708:	6004      	str	r4, [r0, #0]
 800b70a:	60c4      	str	r4, [r0, #12]
 800b70c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b710:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b714:	b94c      	cbnz	r4, 800b72a <__pow5mult+0x56>
 800b716:	f240 2171 	movw	r1, #625	; 0x271
 800b71a:	4630      	mov	r0, r6
 800b71c:	f7ff ff3b 	bl	800b596 <__i2b>
 800b720:	2300      	movs	r3, #0
 800b722:	f8c8 0008 	str.w	r0, [r8, #8]
 800b726:	4604      	mov	r4, r0
 800b728:	6003      	str	r3, [r0, #0]
 800b72a:	f04f 0800 	mov.w	r8, #0
 800b72e:	07eb      	lsls	r3, r5, #31
 800b730:	d50a      	bpl.n	800b748 <__pow5mult+0x74>
 800b732:	4639      	mov	r1, r7
 800b734:	4622      	mov	r2, r4
 800b736:	4630      	mov	r0, r6
 800b738:	f7ff ff36 	bl	800b5a8 <__multiply>
 800b73c:	4639      	mov	r1, r7
 800b73e:	4681      	mov	r9, r0
 800b740:	4630      	mov	r0, r6
 800b742:	f7ff fe88 	bl	800b456 <_Bfree>
 800b746:	464f      	mov	r7, r9
 800b748:	106d      	asrs	r5, r5, #1
 800b74a:	d00b      	beq.n	800b764 <__pow5mult+0x90>
 800b74c:	6820      	ldr	r0, [r4, #0]
 800b74e:	b938      	cbnz	r0, 800b760 <__pow5mult+0x8c>
 800b750:	4622      	mov	r2, r4
 800b752:	4621      	mov	r1, r4
 800b754:	4630      	mov	r0, r6
 800b756:	f7ff ff27 	bl	800b5a8 <__multiply>
 800b75a:	6020      	str	r0, [r4, #0]
 800b75c:	f8c0 8000 	str.w	r8, [r0]
 800b760:	4604      	mov	r4, r0
 800b762:	e7e4      	b.n	800b72e <__pow5mult+0x5a>
 800b764:	4638      	mov	r0, r7
 800b766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b76a:	bf00      	nop
 800b76c:	0800fb40 	.word	0x0800fb40

0800b770 <__lshift>:
 800b770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b774:	460c      	mov	r4, r1
 800b776:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b77a:	6923      	ldr	r3, [r4, #16]
 800b77c:	6849      	ldr	r1, [r1, #4]
 800b77e:	eb0a 0903 	add.w	r9, sl, r3
 800b782:	68a3      	ldr	r3, [r4, #8]
 800b784:	4607      	mov	r7, r0
 800b786:	4616      	mov	r6, r2
 800b788:	f109 0501 	add.w	r5, r9, #1
 800b78c:	42ab      	cmp	r3, r5
 800b78e:	db32      	blt.n	800b7f6 <__lshift+0x86>
 800b790:	4638      	mov	r0, r7
 800b792:	f7ff fe2c 	bl	800b3ee <_Balloc>
 800b796:	2300      	movs	r3, #0
 800b798:	4680      	mov	r8, r0
 800b79a:	f100 0114 	add.w	r1, r0, #20
 800b79e:	461a      	mov	r2, r3
 800b7a0:	4553      	cmp	r3, sl
 800b7a2:	db2b      	blt.n	800b7fc <__lshift+0x8c>
 800b7a4:	6920      	ldr	r0, [r4, #16]
 800b7a6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7aa:	f104 0314 	add.w	r3, r4, #20
 800b7ae:	f016 021f 	ands.w	r2, r6, #31
 800b7b2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7b6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7ba:	d025      	beq.n	800b808 <__lshift+0x98>
 800b7bc:	f1c2 0e20 	rsb	lr, r2, #32
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	681e      	ldr	r6, [r3, #0]
 800b7c4:	468a      	mov	sl, r1
 800b7c6:	4096      	lsls	r6, r2
 800b7c8:	4330      	orrs	r0, r6
 800b7ca:	f84a 0b04 	str.w	r0, [sl], #4
 800b7ce:	f853 0b04 	ldr.w	r0, [r3], #4
 800b7d2:	459c      	cmp	ip, r3
 800b7d4:	fa20 f00e 	lsr.w	r0, r0, lr
 800b7d8:	d814      	bhi.n	800b804 <__lshift+0x94>
 800b7da:	6048      	str	r0, [r1, #4]
 800b7dc:	b108      	cbz	r0, 800b7e2 <__lshift+0x72>
 800b7de:	f109 0502 	add.w	r5, r9, #2
 800b7e2:	3d01      	subs	r5, #1
 800b7e4:	4638      	mov	r0, r7
 800b7e6:	f8c8 5010 	str.w	r5, [r8, #16]
 800b7ea:	4621      	mov	r1, r4
 800b7ec:	f7ff fe33 	bl	800b456 <_Bfree>
 800b7f0:	4640      	mov	r0, r8
 800b7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f6:	3101      	adds	r1, #1
 800b7f8:	005b      	lsls	r3, r3, #1
 800b7fa:	e7c7      	b.n	800b78c <__lshift+0x1c>
 800b7fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b800:	3301      	adds	r3, #1
 800b802:	e7cd      	b.n	800b7a0 <__lshift+0x30>
 800b804:	4651      	mov	r1, sl
 800b806:	e7dc      	b.n	800b7c2 <__lshift+0x52>
 800b808:	3904      	subs	r1, #4
 800b80a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b80e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b812:	459c      	cmp	ip, r3
 800b814:	d8f9      	bhi.n	800b80a <__lshift+0x9a>
 800b816:	e7e4      	b.n	800b7e2 <__lshift+0x72>

0800b818 <__mcmp>:
 800b818:	6903      	ldr	r3, [r0, #16]
 800b81a:	690a      	ldr	r2, [r1, #16]
 800b81c:	1a9b      	subs	r3, r3, r2
 800b81e:	b530      	push	{r4, r5, lr}
 800b820:	d10c      	bne.n	800b83c <__mcmp+0x24>
 800b822:	0092      	lsls	r2, r2, #2
 800b824:	3014      	adds	r0, #20
 800b826:	3114      	adds	r1, #20
 800b828:	1884      	adds	r4, r0, r2
 800b82a:	4411      	add	r1, r2
 800b82c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b830:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b834:	4295      	cmp	r5, r2
 800b836:	d003      	beq.n	800b840 <__mcmp+0x28>
 800b838:	d305      	bcc.n	800b846 <__mcmp+0x2e>
 800b83a:	2301      	movs	r3, #1
 800b83c:	4618      	mov	r0, r3
 800b83e:	bd30      	pop	{r4, r5, pc}
 800b840:	42a0      	cmp	r0, r4
 800b842:	d3f3      	bcc.n	800b82c <__mcmp+0x14>
 800b844:	e7fa      	b.n	800b83c <__mcmp+0x24>
 800b846:	f04f 33ff 	mov.w	r3, #4294967295
 800b84a:	e7f7      	b.n	800b83c <__mcmp+0x24>

0800b84c <__mdiff>:
 800b84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b850:	460d      	mov	r5, r1
 800b852:	4607      	mov	r7, r0
 800b854:	4611      	mov	r1, r2
 800b856:	4628      	mov	r0, r5
 800b858:	4614      	mov	r4, r2
 800b85a:	f7ff ffdd 	bl	800b818 <__mcmp>
 800b85e:	1e06      	subs	r6, r0, #0
 800b860:	d108      	bne.n	800b874 <__mdiff+0x28>
 800b862:	4631      	mov	r1, r6
 800b864:	4638      	mov	r0, r7
 800b866:	f7ff fdc2 	bl	800b3ee <_Balloc>
 800b86a:	2301      	movs	r3, #1
 800b86c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b874:	bfa4      	itt	ge
 800b876:	4623      	movge	r3, r4
 800b878:	462c      	movge	r4, r5
 800b87a:	4638      	mov	r0, r7
 800b87c:	6861      	ldr	r1, [r4, #4]
 800b87e:	bfa6      	itte	ge
 800b880:	461d      	movge	r5, r3
 800b882:	2600      	movge	r6, #0
 800b884:	2601      	movlt	r6, #1
 800b886:	f7ff fdb2 	bl	800b3ee <_Balloc>
 800b88a:	692b      	ldr	r3, [r5, #16]
 800b88c:	60c6      	str	r6, [r0, #12]
 800b88e:	6926      	ldr	r6, [r4, #16]
 800b890:	f105 0914 	add.w	r9, r5, #20
 800b894:	f104 0214 	add.w	r2, r4, #20
 800b898:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b89c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b8a0:	f100 0514 	add.w	r5, r0, #20
 800b8a4:	f04f 0e00 	mov.w	lr, #0
 800b8a8:	f852 ab04 	ldr.w	sl, [r2], #4
 800b8ac:	f859 4b04 	ldr.w	r4, [r9], #4
 800b8b0:	fa1e f18a 	uxtah	r1, lr, sl
 800b8b4:	b2a3      	uxth	r3, r4
 800b8b6:	1ac9      	subs	r1, r1, r3
 800b8b8:	0c23      	lsrs	r3, r4, #16
 800b8ba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b8be:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b8c2:	b289      	uxth	r1, r1
 800b8c4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b8c8:	45c8      	cmp	r8, r9
 800b8ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b8ce:	4694      	mov	ip, r2
 800b8d0:	f845 3b04 	str.w	r3, [r5], #4
 800b8d4:	d8e8      	bhi.n	800b8a8 <__mdiff+0x5c>
 800b8d6:	45bc      	cmp	ip, r7
 800b8d8:	d304      	bcc.n	800b8e4 <__mdiff+0x98>
 800b8da:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b8de:	b183      	cbz	r3, 800b902 <__mdiff+0xb6>
 800b8e0:	6106      	str	r6, [r0, #16]
 800b8e2:	e7c5      	b.n	800b870 <__mdiff+0x24>
 800b8e4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b8e8:	fa1e f381 	uxtah	r3, lr, r1
 800b8ec:	141a      	asrs	r2, r3, #16
 800b8ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8f8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b8fc:	f845 3b04 	str.w	r3, [r5], #4
 800b900:	e7e9      	b.n	800b8d6 <__mdiff+0x8a>
 800b902:	3e01      	subs	r6, #1
 800b904:	e7e9      	b.n	800b8da <__mdiff+0x8e>

0800b906 <__d2b>:
 800b906:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b90a:	460e      	mov	r6, r1
 800b90c:	2101      	movs	r1, #1
 800b90e:	ec59 8b10 	vmov	r8, r9, d0
 800b912:	4615      	mov	r5, r2
 800b914:	f7ff fd6b 	bl	800b3ee <_Balloc>
 800b918:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b91c:	4607      	mov	r7, r0
 800b91e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b922:	bb34      	cbnz	r4, 800b972 <__d2b+0x6c>
 800b924:	9301      	str	r3, [sp, #4]
 800b926:	f1b8 0300 	subs.w	r3, r8, #0
 800b92a:	d027      	beq.n	800b97c <__d2b+0x76>
 800b92c:	a802      	add	r0, sp, #8
 800b92e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b932:	f7ff fe01 	bl	800b538 <__lo0bits>
 800b936:	9900      	ldr	r1, [sp, #0]
 800b938:	b1f0      	cbz	r0, 800b978 <__d2b+0x72>
 800b93a:	9a01      	ldr	r2, [sp, #4]
 800b93c:	f1c0 0320 	rsb	r3, r0, #32
 800b940:	fa02 f303 	lsl.w	r3, r2, r3
 800b944:	430b      	orrs	r3, r1
 800b946:	40c2      	lsrs	r2, r0
 800b948:	617b      	str	r3, [r7, #20]
 800b94a:	9201      	str	r2, [sp, #4]
 800b94c:	9b01      	ldr	r3, [sp, #4]
 800b94e:	61bb      	str	r3, [r7, #24]
 800b950:	2b00      	cmp	r3, #0
 800b952:	bf14      	ite	ne
 800b954:	2102      	movne	r1, #2
 800b956:	2101      	moveq	r1, #1
 800b958:	6139      	str	r1, [r7, #16]
 800b95a:	b1c4      	cbz	r4, 800b98e <__d2b+0x88>
 800b95c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b960:	4404      	add	r4, r0
 800b962:	6034      	str	r4, [r6, #0]
 800b964:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b968:	6028      	str	r0, [r5, #0]
 800b96a:	4638      	mov	r0, r7
 800b96c:	b003      	add	sp, #12
 800b96e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b976:	e7d5      	b.n	800b924 <__d2b+0x1e>
 800b978:	6179      	str	r1, [r7, #20]
 800b97a:	e7e7      	b.n	800b94c <__d2b+0x46>
 800b97c:	a801      	add	r0, sp, #4
 800b97e:	f7ff fddb 	bl	800b538 <__lo0bits>
 800b982:	9b01      	ldr	r3, [sp, #4]
 800b984:	617b      	str	r3, [r7, #20]
 800b986:	2101      	movs	r1, #1
 800b988:	6139      	str	r1, [r7, #16]
 800b98a:	3020      	adds	r0, #32
 800b98c:	e7e5      	b.n	800b95a <__d2b+0x54>
 800b98e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b992:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b996:	6030      	str	r0, [r6, #0]
 800b998:	6918      	ldr	r0, [r3, #16]
 800b99a:	f7ff fdae 	bl	800b4fa <__hi0bits>
 800b99e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b9a2:	e7e1      	b.n	800b968 <__d2b+0x62>

0800b9a4 <_calloc_r>:
 800b9a4:	b538      	push	{r3, r4, r5, lr}
 800b9a6:	fb02 f401 	mul.w	r4, r2, r1
 800b9aa:	4621      	mov	r1, r4
 800b9ac:	f7fe fa5e 	bl	8009e6c <_malloc_r>
 800b9b0:	4605      	mov	r5, r0
 800b9b2:	b118      	cbz	r0, 800b9bc <_calloc_r+0x18>
 800b9b4:	4622      	mov	r2, r4
 800b9b6:	2100      	movs	r1, #0
 800b9b8:	f7fe fa02 	bl	8009dc0 <memset>
 800b9bc:	4628      	mov	r0, r5
 800b9be:	bd38      	pop	{r3, r4, r5, pc}

0800b9c0 <__ssputs_r>:
 800b9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9c4:	688e      	ldr	r6, [r1, #8]
 800b9c6:	429e      	cmp	r6, r3
 800b9c8:	4682      	mov	sl, r0
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	4690      	mov	r8, r2
 800b9ce:	4699      	mov	r9, r3
 800b9d0:	d837      	bhi.n	800ba42 <__ssputs_r+0x82>
 800b9d2:	898a      	ldrh	r2, [r1, #12]
 800b9d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b9d8:	d031      	beq.n	800ba3e <__ssputs_r+0x7e>
 800b9da:	6825      	ldr	r5, [r4, #0]
 800b9dc:	6909      	ldr	r1, [r1, #16]
 800b9de:	1a6f      	subs	r7, r5, r1
 800b9e0:	6965      	ldr	r5, [r4, #20]
 800b9e2:	2302      	movs	r3, #2
 800b9e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9e8:	fb95 f5f3 	sdiv	r5, r5, r3
 800b9ec:	f109 0301 	add.w	r3, r9, #1
 800b9f0:	443b      	add	r3, r7
 800b9f2:	429d      	cmp	r5, r3
 800b9f4:	bf38      	it	cc
 800b9f6:	461d      	movcc	r5, r3
 800b9f8:	0553      	lsls	r3, r2, #21
 800b9fa:	d530      	bpl.n	800ba5e <__ssputs_r+0x9e>
 800b9fc:	4629      	mov	r1, r5
 800b9fe:	f7fe fa35 	bl	8009e6c <_malloc_r>
 800ba02:	4606      	mov	r6, r0
 800ba04:	b950      	cbnz	r0, 800ba1c <__ssputs_r+0x5c>
 800ba06:	230c      	movs	r3, #12
 800ba08:	f8ca 3000 	str.w	r3, [sl]
 800ba0c:	89a3      	ldrh	r3, [r4, #12]
 800ba0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba12:	81a3      	strh	r3, [r4, #12]
 800ba14:	f04f 30ff 	mov.w	r0, #4294967295
 800ba18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba1c:	463a      	mov	r2, r7
 800ba1e:	6921      	ldr	r1, [r4, #16]
 800ba20:	f7ff fcd8 	bl	800b3d4 <memcpy>
 800ba24:	89a3      	ldrh	r3, [r4, #12]
 800ba26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba2e:	81a3      	strh	r3, [r4, #12]
 800ba30:	6126      	str	r6, [r4, #16]
 800ba32:	6165      	str	r5, [r4, #20]
 800ba34:	443e      	add	r6, r7
 800ba36:	1bed      	subs	r5, r5, r7
 800ba38:	6026      	str	r6, [r4, #0]
 800ba3a:	60a5      	str	r5, [r4, #8]
 800ba3c:	464e      	mov	r6, r9
 800ba3e:	454e      	cmp	r6, r9
 800ba40:	d900      	bls.n	800ba44 <__ssputs_r+0x84>
 800ba42:	464e      	mov	r6, r9
 800ba44:	4632      	mov	r2, r6
 800ba46:	4641      	mov	r1, r8
 800ba48:	6820      	ldr	r0, [r4, #0]
 800ba4a:	f000 f91d 	bl	800bc88 <memmove>
 800ba4e:	68a3      	ldr	r3, [r4, #8]
 800ba50:	1b9b      	subs	r3, r3, r6
 800ba52:	60a3      	str	r3, [r4, #8]
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	441e      	add	r6, r3
 800ba58:	6026      	str	r6, [r4, #0]
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	e7dc      	b.n	800ba18 <__ssputs_r+0x58>
 800ba5e:	462a      	mov	r2, r5
 800ba60:	f000 f92b 	bl	800bcba <_realloc_r>
 800ba64:	4606      	mov	r6, r0
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d1e2      	bne.n	800ba30 <__ssputs_r+0x70>
 800ba6a:	6921      	ldr	r1, [r4, #16]
 800ba6c:	4650      	mov	r0, sl
 800ba6e:	f7fe f9af 	bl	8009dd0 <_free_r>
 800ba72:	e7c8      	b.n	800ba06 <__ssputs_r+0x46>

0800ba74 <_svfiprintf_r>:
 800ba74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba78:	461d      	mov	r5, r3
 800ba7a:	898b      	ldrh	r3, [r1, #12]
 800ba7c:	061f      	lsls	r7, r3, #24
 800ba7e:	b09d      	sub	sp, #116	; 0x74
 800ba80:	4680      	mov	r8, r0
 800ba82:	460c      	mov	r4, r1
 800ba84:	4616      	mov	r6, r2
 800ba86:	d50f      	bpl.n	800baa8 <_svfiprintf_r+0x34>
 800ba88:	690b      	ldr	r3, [r1, #16]
 800ba8a:	b96b      	cbnz	r3, 800baa8 <_svfiprintf_r+0x34>
 800ba8c:	2140      	movs	r1, #64	; 0x40
 800ba8e:	f7fe f9ed 	bl	8009e6c <_malloc_r>
 800ba92:	6020      	str	r0, [r4, #0]
 800ba94:	6120      	str	r0, [r4, #16]
 800ba96:	b928      	cbnz	r0, 800baa4 <_svfiprintf_r+0x30>
 800ba98:	230c      	movs	r3, #12
 800ba9a:	f8c8 3000 	str.w	r3, [r8]
 800ba9e:	f04f 30ff 	mov.w	r0, #4294967295
 800baa2:	e0c8      	b.n	800bc36 <_svfiprintf_r+0x1c2>
 800baa4:	2340      	movs	r3, #64	; 0x40
 800baa6:	6163      	str	r3, [r4, #20]
 800baa8:	2300      	movs	r3, #0
 800baaa:	9309      	str	r3, [sp, #36]	; 0x24
 800baac:	2320      	movs	r3, #32
 800baae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bab2:	2330      	movs	r3, #48	; 0x30
 800bab4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bab8:	9503      	str	r5, [sp, #12]
 800baba:	f04f 0b01 	mov.w	fp, #1
 800babe:	4637      	mov	r7, r6
 800bac0:	463d      	mov	r5, r7
 800bac2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bac6:	b10b      	cbz	r3, 800bacc <_svfiprintf_r+0x58>
 800bac8:	2b25      	cmp	r3, #37	; 0x25
 800baca:	d13e      	bne.n	800bb4a <_svfiprintf_r+0xd6>
 800bacc:	ebb7 0a06 	subs.w	sl, r7, r6
 800bad0:	d00b      	beq.n	800baea <_svfiprintf_r+0x76>
 800bad2:	4653      	mov	r3, sl
 800bad4:	4632      	mov	r2, r6
 800bad6:	4621      	mov	r1, r4
 800bad8:	4640      	mov	r0, r8
 800bada:	f7ff ff71 	bl	800b9c0 <__ssputs_r>
 800bade:	3001      	adds	r0, #1
 800bae0:	f000 80a4 	beq.w	800bc2c <_svfiprintf_r+0x1b8>
 800bae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bae6:	4453      	add	r3, sl
 800bae8:	9309      	str	r3, [sp, #36]	; 0x24
 800baea:	783b      	ldrb	r3, [r7, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	f000 809d 	beq.w	800bc2c <_svfiprintf_r+0x1b8>
 800baf2:	2300      	movs	r3, #0
 800baf4:	f04f 32ff 	mov.w	r2, #4294967295
 800baf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bafc:	9304      	str	r3, [sp, #16]
 800bafe:	9307      	str	r3, [sp, #28]
 800bb00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb04:	931a      	str	r3, [sp, #104]	; 0x68
 800bb06:	462f      	mov	r7, r5
 800bb08:	2205      	movs	r2, #5
 800bb0a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bb0e:	4850      	ldr	r0, [pc, #320]	; (800bc50 <_svfiprintf_r+0x1dc>)
 800bb10:	f7f4 fbee 	bl	80002f0 <memchr>
 800bb14:	9b04      	ldr	r3, [sp, #16]
 800bb16:	b9d0      	cbnz	r0, 800bb4e <_svfiprintf_r+0xda>
 800bb18:	06d9      	lsls	r1, r3, #27
 800bb1a:	bf44      	itt	mi
 800bb1c:	2220      	movmi	r2, #32
 800bb1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb22:	071a      	lsls	r2, r3, #28
 800bb24:	bf44      	itt	mi
 800bb26:	222b      	movmi	r2, #43	; 0x2b
 800bb28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb2c:	782a      	ldrb	r2, [r5, #0]
 800bb2e:	2a2a      	cmp	r2, #42	; 0x2a
 800bb30:	d015      	beq.n	800bb5e <_svfiprintf_r+0xea>
 800bb32:	9a07      	ldr	r2, [sp, #28]
 800bb34:	462f      	mov	r7, r5
 800bb36:	2000      	movs	r0, #0
 800bb38:	250a      	movs	r5, #10
 800bb3a:	4639      	mov	r1, r7
 800bb3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb40:	3b30      	subs	r3, #48	; 0x30
 800bb42:	2b09      	cmp	r3, #9
 800bb44:	d94d      	bls.n	800bbe2 <_svfiprintf_r+0x16e>
 800bb46:	b1b8      	cbz	r0, 800bb78 <_svfiprintf_r+0x104>
 800bb48:	e00f      	b.n	800bb6a <_svfiprintf_r+0xf6>
 800bb4a:	462f      	mov	r7, r5
 800bb4c:	e7b8      	b.n	800bac0 <_svfiprintf_r+0x4c>
 800bb4e:	4a40      	ldr	r2, [pc, #256]	; (800bc50 <_svfiprintf_r+0x1dc>)
 800bb50:	1a80      	subs	r0, r0, r2
 800bb52:	fa0b f000 	lsl.w	r0, fp, r0
 800bb56:	4318      	orrs	r0, r3
 800bb58:	9004      	str	r0, [sp, #16]
 800bb5a:	463d      	mov	r5, r7
 800bb5c:	e7d3      	b.n	800bb06 <_svfiprintf_r+0x92>
 800bb5e:	9a03      	ldr	r2, [sp, #12]
 800bb60:	1d11      	adds	r1, r2, #4
 800bb62:	6812      	ldr	r2, [r2, #0]
 800bb64:	9103      	str	r1, [sp, #12]
 800bb66:	2a00      	cmp	r2, #0
 800bb68:	db01      	blt.n	800bb6e <_svfiprintf_r+0xfa>
 800bb6a:	9207      	str	r2, [sp, #28]
 800bb6c:	e004      	b.n	800bb78 <_svfiprintf_r+0x104>
 800bb6e:	4252      	negs	r2, r2
 800bb70:	f043 0302 	orr.w	r3, r3, #2
 800bb74:	9207      	str	r2, [sp, #28]
 800bb76:	9304      	str	r3, [sp, #16]
 800bb78:	783b      	ldrb	r3, [r7, #0]
 800bb7a:	2b2e      	cmp	r3, #46	; 0x2e
 800bb7c:	d10c      	bne.n	800bb98 <_svfiprintf_r+0x124>
 800bb7e:	787b      	ldrb	r3, [r7, #1]
 800bb80:	2b2a      	cmp	r3, #42	; 0x2a
 800bb82:	d133      	bne.n	800bbec <_svfiprintf_r+0x178>
 800bb84:	9b03      	ldr	r3, [sp, #12]
 800bb86:	1d1a      	adds	r2, r3, #4
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	9203      	str	r2, [sp, #12]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	bfb8      	it	lt
 800bb90:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb94:	3702      	adds	r7, #2
 800bb96:	9305      	str	r3, [sp, #20]
 800bb98:	4d2e      	ldr	r5, [pc, #184]	; (800bc54 <_svfiprintf_r+0x1e0>)
 800bb9a:	7839      	ldrb	r1, [r7, #0]
 800bb9c:	2203      	movs	r2, #3
 800bb9e:	4628      	mov	r0, r5
 800bba0:	f7f4 fba6 	bl	80002f0 <memchr>
 800bba4:	b138      	cbz	r0, 800bbb6 <_svfiprintf_r+0x142>
 800bba6:	2340      	movs	r3, #64	; 0x40
 800bba8:	1b40      	subs	r0, r0, r5
 800bbaa:	fa03 f000 	lsl.w	r0, r3, r0
 800bbae:	9b04      	ldr	r3, [sp, #16]
 800bbb0:	4303      	orrs	r3, r0
 800bbb2:	3701      	adds	r7, #1
 800bbb4:	9304      	str	r3, [sp, #16]
 800bbb6:	7839      	ldrb	r1, [r7, #0]
 800bbb8:	4827      	ldr	r0, [pc, #156]	; (800bc58 <_svfiprintf_r+0x1e4>)
 800bbba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbbe:	2206      	movs	r2, #6
 800bbc0:	1c7e      	adds	r6, r7, #1
 800bbc2:	f7f4 fb95 	bl	80002f0 <memchr>
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	d038      	beq.n	800bc3c <_svfiprintf_r+0x1c8>
 800bbca:	4b24      	ldr	r3, [pc, #144]	; (800bc5c <_svfiprintf_r+0x1e8>)
 800bbcc:	bb13      	cbnz	r3, 800bc14 <_svfiprintf_r+0x1a0>
 800bbce:	9b03      	ldr	r3, [sp, #12]
 800bbd0:	3307      	adds	r3, #7
 800bbd2:	f023 0307 	bic.w	r3, r3, #7
 800bbd6:	3308      	adds	r3, #8
 800bbd8:	9303      	str	r3, [sp, #12]
 800bbda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbdc:	444b      	add	r3, r9
 800bbde:	9309      	str	r3, [sp, #36]	; 0x24
 800bbe0:	e76d      	b.n	800babe <_svfiprintf_r+0x4a>
 800bbe2:	fb05 3202 	mla	r2, r5, r2, r3
 800bbe6:	2001      	movs	r0, #1
 800bbe8:	460f      	mov	r7, r1
 800bbea:	e7a6      	b.n	800bb3a <_svfiprintf_r+0xc6>
 800bbec:	2300      	movs	r3, #0
 800bbee:	3701      	adds	r7, #1
 800bbf0:	9305      	str	r3, [sp, #20]
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	250a      	movs	r5, #10
 800bbf6:	4638      	mov	r0, r7
 800bbf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbfc:	3a30      	subs	r2, #48	; 0x30
 800bbfe:	2a09      	cmp	r2, #9
 800bc00:	d903      	bls.n	800bc0a <_svfiprintf_r+0x196>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d0c8      	beq.n	800bb98 <_svfiprintf_r+0x124>
 800bc06:	9105      	str	r1, [sp, #20]
 800bc08:	e7c6      	b.n	800bb98 <_svfiprintf_r+0x124>
 800bc0a:	fb05 2101 	mla	r1, r5, r1, r2
 800bc0e:	2301      	movs	r3, #1
 800bc10:	4607      	mov	r7, r0
 800bc12:	e7f0      	b.n	800bbf6 <_svfiprintf_r+0x182>
 800bc14:	ab03      	add	r3, sp, #12
 800bc16:	9300      	str	r3, [sp, #0]
 800bc18:	4622      	mov	r2, r4
 800bc1a:	4b11      	ldr	r3, [pc, #68]	; (800bc60 <_svfiprintf_r+0x1ec>)
 800bc1c:	a904      	add	r1, sp, #16
 800bc1e:	4640      	mov	r0, r8
 800bc20:	f7fe fa06 	bl	800a030 <_printf_float>
 800bc24:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bc28:	4681      	mov	r9, r0
 800bc2a:	d1d6      	bne.n	800bbda <_svfiprintf_r+0x166>
 800bc2c:	89a3      	ldrh	r3, [r4, #12]
 800bc2e:	065b      	lsls	r3, r3, #25
 800bc30:	f53f af35 	bmi.w	800ba9e <_svfiprintf_r+0x2a>
 800bc34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc36:	b01d      	add	sp, #116	; 0x74
 800bc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc3c:	ab03      	add	r3, sp, #12
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	4622      	mov	r2, r4
 800bc42:	4b07      	ldr	r3, [pc, #28]	; (800bc60 <_svfiprintf_r+0x1ec>)
 800bc44:	a904      	add	r1, sp, #16
 800bc46:	4640      	mov	r0, r8
 800bc48:	f7fe fc94 	bl	800a574 <_printf_i>
 800bc4c:	e7ea      	b.n	800bc24 <_svfiprintf_r+0x1b0>
 800bc4e:	bf00      	nop
 800bc50:	0800fb4c 	.word	0x0800fb4c
 800bc54:	0800fb52 	.word	0x0800fb52
 800bc58:	0800fb56 	.word	0x0800fb56
 800bc5c:	0800a031 	.word	0x0800a031
 800bc60:	0800b9c1 	.word	0x0800b9c1

0800bc64 <__ascii_mbtowc>:
 800bc64:	b082      	sub	sp, #8
 800bc66:	b901      	cbnz	r1, 800bc6a <__ascii_mbtowc+0x6>
 800bc68:	a901      	add	r1, sp, #4
 800bc6a:	b142      	cbz	r2, 800bc7e <__ascii_mbtowc+0x1a>
 800bc6c:	b14b      	cbz	r3, 800bc82 <__ascii_mbtowc+0x1e>
 800bc6e:	7813      	ldrb	r3, [r2, #0]
 800bc70:	600b      	str	r3, [r1, #0]
 800bc72:	7812      	ldrb	r2, [r2, #0]
 800bc74:	1c10      	adds	r0, r2, #0
 800bc76:	bf18      	it	ne
 800bc78:	2001      	movne	r0, #1
 800bc7a:	b002      	add	sp, #8
 800bc7c:	4770      	bx	lr
 800bc7e:	4610      	mov	r0, r2
 800bc80:	e7fb      	b.n	800bc7a <__ascii_mbtowc+0x16>
 800bc82:	f06f 0001 	mvn.w	r0, #1
 800bc86:	e7f8      	b.n	800bc7a <__ascii_mbtowc+0x16>

0800bc88 <memmove>:
 800bc88:	4288      	cmp	r0, r1
 800bc8a:	b510      	push	{r4, lr}
 800bc8c:	eb01 0302 	add.w	r3, r1, r2
 800bc90:	d807      	bhi.n	800bca2 <memmove+0x1a>
 800bc92:	1e42      	subs	r2, r0, #1
 800bc94:	4299      	cmp	r1, r3
 800bc96:	d00a      	beq.n	800bcae <memmove+0x26>
 800bc98:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc9c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bca0:	e7f8      	b.n	800bc94 <memmove+0xc>
 800bca2:	4283      	cmp	r3, r0
 800bca4:	d9f5      	bls.n	800bc92 <memmove+0xa>
 800bca6:	1881      	adds	r1, r0, r2
 800bca8:	1ad2      	subs	r2, r2, r3
 800bcaa:	42d3      	cmn	r3, r2
 800bcac:	d100      	bne.n	800bcb0 <memmove+0x28>
 800bcae:	bd10      	pop	{r4, pc}
 800bcb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcb4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bcb8:	e7f7      	b.n	800bcaa <memmove+0x22>

0800bcba <_realloc_r>:
 800bcba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcbc:	4607      	mov	r7, r0
 800bcbe:	4614      	mov	r4, r2
 800bcc0:	460e      	mov	r6, r1
 800bcc2:	b921      	cbnz	r1, 800bcce <_realloc_r+0x14>
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bcca:	f7fe b8cf 	b.w	8009e6c <_malloc_r>
 800bcce:	b922      	cbnz	r2, 800bcda <_realloc_r+0x20>
 800bcd0:	f7fe f87e 	bl	8009dd0 <_free_r>
 800bcd4:	4625      	mov	r5, r4
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcda:	f000 f821 	bl	800bd20 <_malloc_usable_size_r>
 800bcde:	42a0      	cmp	r0, r4
 800bce0:	d20f      	bcs.n	800bd02 <_realloc_r+0x48>
 800bce2:	4621      	mov	r1, r4
 800bce4:	4638      	mov	r0, r7
 800bce6:	f7fe f8c1 	bl	8009e6c <_malloc_r>
 800bcea:	4605      	mov	r5, r0
 800bcec:	2800      	cmp	r0, #0
 800bcee:	d0f2      	beq.n	800bcd6 <_realloc_r+0x1c>
 800bcf0:	4631      	mov	r1, r6
 800bcf2:	4622      	mov	r2, r4
 800bcf4:	f7ff fb6e 	bl	800b3d4 <memcpy>
 800bcf8:	4631      	mov	r1, r6
 800bcfa:	4638      	mov	r0, r7
 800bcfc:	f7fe f868 	bl	8009dd0 <_free_r>
 800bd00:	e7e9      	b.n	800bcd6 <_realloc_r+0x1c>
 800bd02:	4635      	mov	r5, r6
 800bd04:	e7e7      	b.n	800bcd6 <_realloc_r+0x1c>

0800bd06 <__ascii_wctomb>:
 800bd06:	b149      	cbz	r1, 800bd1c <__ascii_wctomb+0x16>
 800bd08:	2aff      	cmp	r2, #255	; 0xff
 800bd0a:	bf85      	ittet	hi
 800bd0c:	238a      	movhi	r3, #138	; 0x8a
 800bd0e:	6003      	strhi	r3, [r0, #0]
 800bd10:	700a      	strbls	r2, [r1, #0]
 800bd12:	f04f 30ff 	movhi.w	r0, #4294967295
 800bd16:	bf98      	it	ls
 800bd18:	2001      	movls	r0, #1
 800bd1a:	4770      	bx	lr
 800bd1c:	4608      	mov	r0, r1
 800bd1e:	4770      	bx	lr

0800bd20 <_malloc_usable_size_r>:
 800bd20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd24:	1f18      	subs	r0, r3, #4
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	bfbc      	itt	lt
 800bd2a:	580b      	ldrlt	r3, [r1, r0]
 800bd2c:	18c0      	addlt	r0, r0, r3
 800bd2e:	4770      	bx	lr

0800bd30 <cos>:
 800bd30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd32:	eeb0 7b40 	vmov.f64	d7, d0
 800bd36:	ee17 3a90 	vmov	r3, s15
 800bd3a:	4a19      	ldr	r2, [pc, #100]	; (800bda0 <cos+0x70>)
 800bd3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd40:	4293      	cmp	r3, r2
 800bd42:	dc04      	bgt.n	800bd4e <cos+0x1e>
 800bd44:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800bd98 <cos+0x68>
 800bd48:	f000 ff4a 	bl	800cbe0 <__kernel_cos>
 800bd4c:	e004      	b.n	800bd58 <cos+0x28>
 800bd4e:	4a15      	ldr	r2, [pc, #84]	; (800bda4 <cos+0x74>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	dd04      	ble.n	800bd5e <cos+0x2e>
 800bd54:	ee30 0b40 	vsub.f64	d0, d0, d0
 800bd58:	b005      	add	sp, #20
 800bd5a:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd5e:	4668      	mov	r0, sp
 800bd60:	f000 fdfe 	bl	800c960 <__ieee754_rem_pio2>
 800bd64:	f000 0003 	and.w	r0, r0, #3
 800bd68:	2801      	cmp	r0, #1
 800bd6a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd6e:	ed9d 0b00 	vldr	d0, [sp]
 800bd72:	d007      	beq.n	800bd84 <cos+0x54>
 800bd74:	2802      	cmp	r0, #2
 800bd76:	d00a      	beq.n	800bd8e <cos+0x5e>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	d0e5      	beq.n	800bd48 <cos+0x18>
 800bd7c:	2001      	movs	r0, #1
 800bd7e:	f001 fa37 	bl	800d1f0 <__kernel_sin>
 800bd82:	e7e9      	b.n	800bd58 <cos+0x28>
 800bd84:	f001 fa34 	bl	800d1f0 <__kernel_sin>
 800bd88:	eeb1 0b40 	vneg.f64	d0, d0
 800bd8c:	e7e4      	b.n	800bd58 <cos+0x28>
 800bd8e:	f000 ff27 	bl	800cbe0 <__kernel_cos>
 800bd92:	e7f9      	b.n	800bd88 <cos+0x58>
 800bd94:	f3af 8000 	nop.w
	...
 800bda0:	3fe921fb 	.word	0x3fe921fb
 800bda4:	7fefffff 	.word	0x7fefffff

0800bda8 <sin>:
 800bda8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bdaa:	eeb0 7b40 	vmov.f64	d7, d0
 800bdae:	ee17 3a90 	vmov	r3, s15
 800bdb2:	4a19      	ldr	r2, [pc, #100]	; (800be18 <sin+0x70>)
 800bdb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	dc05      	bgt.n	800bdc8 <sin+0x20>
 800bdbc:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800be10 <sin+0x68>
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	f001 fa15 	bl	800d1f0 <__kernel_sin>
 800bdc6:	e004      	b.n	800bdd2 <sin+0x2a>
 800bdc8:	4a14      	ldr	r2, [pc, #80]	; (800be1c <sin+0x74>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	dd04      	ble.n	800bdd8 <sin+0x30>
 800bdce:	ee30 0b40 	vsub.f64	d0, d0, d0
 800bdd2:	b005      	add	sp, #20
 800bdd4:	f85d fb04 	ldr.w	pc, [sp], #4
 800bdd8:	4668      	mov	r0, sp
 800bdda:	f000 fdc1 	bl	800c960 <__ieee754_rem_pio2>
 800bdde:	f000 0003 	and.w	r0, r0, #3
 800bde2:	2801      	cmp	r0, #1
 800bde4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bde8:	ed9d 0b00 	vldr	d0, [sp]
 800bdec:	d004      	beq.n	800bdf8 <sin+0x50>
 800bdee:	2802      	cmp	r0, #2
 800bdf0:	d005      	beq.n	800bdfe <sin+0x56>
 800bdf2:	b950      	cbnz	r0, 800be0a <sin+0x62>
 800bdf4:	2001      	movs	r0, #1
 800bdf6:	e7e4      	b.n	800bdc2 <sin+0x1a>
 800bdf8:	f000 fef2 	bl	800cbe0 <__kernel_cos>
 800bdfc:	e7e9      	b.n	800bdd2 <sin+0x2a>
 800bdfe:	2001      	movs	r0, #1
 800be00:	f001 f9f6 	bl	800d1f0 <__kernel_sin>
 800be04:	eeb1 0b40 	vneg.f64	d0, d0
 800be08:	e7e3      	b.n	800bdd2 <sin+0x2a>
 800be0a:	f000 fee9 	bl	800cbe0 <__kernel_cos>
 800be0e:	e7f9      	b.n	800be04 <sin+0x5c>
	...
 800be18:	3fe921fb 	.word	0x3fe921fb
 800be1c:	7fefffff 	.word	0x7fefffff

0800be20 <log10>:
 800be20:	b500      	push	{lr}
 800be22:	ed2d 8b02 	vpush	{d8}
 800be26:	eeb0 8b40 	vmov.f64	d8, d0
 800be2a:	b08b      	sub	sp, #44	; 0x2c
 800be2c:	f000 f998 	bl	800c160 <__ieee754_log10>
 800be30:	4b2d      	ldr	r3, [pc, #180]	; (800bee8 <log10+0xc8>)
 800be32:	f993 3000 	ldrsb.w	r3, [r3]
 800be36:	1c5a      	adds	r2, r3, #1
 800be38:	d051      	beq.n	800bede <log10+0xbe>
 800be3a:	eeb4 8b48 	vcmp.f64	d8, d8
 800be3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be42:	d64c      	bvs.n	800bede <log10+0xbe>
 800be44:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800be48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be4c:	d847      	bhi.n	800bede <log10+0xbe>
 800be4e:	4a27      	ldr	r2, [pc, #156]	; (800beec <log10+0xcc>)
 800be50:	9201      	str	r2, [sp, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	9208      	str	r2, [sp, #32]
 800be56:	ed8d 8b02 	vstr	d8, [sp, #8]
 800be5a:	ed8d 8b04 	vstr	d8, [sp, #16]
 800be5e:	b993      	cbnz	r3, 800be86 <log10+0x66>
 800be60:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800be64:	4922      	ldr	r1, [pc, #136]	; (800bef0 <log10+0xd0>)
 800be66:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 800be6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be72:	d025      	beq.n	800bec0 <log10+0xa0>
 800be74:	2201      	movs	r2, #1
 800be76:	2b02      	cmp	r3, #2
 800be78:	9200      	str	r2, [sp, #0]
 800be7a:	d116      	bne.n	800beaa <log10+0x8a>
 800be7c:	f7fd ff66 	bl	8009d4c <__errno>
 800be80:	2321      	movs	r3, #33	; 0x21
 800be82:	6003      	str	r3, [r0, #0]
 800be84:	e016      	b.n	800beb4 <log10+0x94>
 800be86:	491b      	ldr	r1, [pc, #108]	; (800bef4 <log10+0xd4>)
 800be88:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800be8c:	2000      	movs	r0, #0
 800be8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be96:	d1ed      	bne.n	800be74 <log10+0x54>
 800be98:	2202      	movs	r2, #2
 800be9a:	4293      	cmp	r3, r2
 800be9c:	9200      	str	r2, [sp, #0]
 800be9e:	d111      	bne.n	800bec4 <log10+0xa4>
 800bea0:	f7fd ff54 	bl	8009d4c <__errno>
 800bea4:	2322      	movs	r3, #34	; 0x22
 800bea6:	6003      	str	r3, [r0, #0]
 800bea8:	e011      	b.n	800bece <log10+0xae>
 800beaa:	4668      	mov	r0, sp
 800beac:	f001 fa84 	bl	800d3b8 <matherr>
 800beb0:	2800      	cmp	r0, #0
 800beb2:	d0e3      	beq.n	800be7c <log10+0x5c>
 800beb4:	4810      	ldr	r0, [pc, #64]	; (800bef8 <log10+0xd8>)
 800beb6:	f001 fa83 	bl	800d3c0 <nan>
 800beba:	ed8d 0b06 	vstr	d0, [sp, #24]
 800bebe:	e006      	b.n	800bece <log10+0xae>
 800bec0:	2302      	movs	r3, #2
 800bec2:	9300      	str	r3, [sp, #0]
 800bec4:	4668      	mov	r0, sp
 800bec6:	f001 fa77 	bl	800d3b8 <matherr>
 800beca:	2800      	cmp	r0, #0
 800becc:	d0e8      	beq.n	800bea0 <log10+0x80>
 800bece:	9b08      	ldr	r3, [sp, #32]
 800bed0:	b11b      	cbz	r3, 800beda <log10+0xba>
 800bed2:	f7fd ff3b 	bl	8009d4c <__errno>
 800bed6:	9b08      	ldr	r3, [sp, #32]
 800bed8:	6003      	str	r3, [r0, #0]
 800beda:	ed9d 0b06 	vldr	d0, [sp, #24]
 800bede:	b00b      	add	sp, #44	; 0x2c
 800bee0:	ecbd 8b02 	vpop	{d8}
 800bee4:	f85d fb04 	ldr.w	pc, [sp], #4
 800bee8:	24000548 	.word	0x24000548
 800beec:	0800fc68 	.word	0x0800fc68
 800bef0:	c7efffff 	.word	0xc7efffff
 800bef4:	fff00000 	.word	0xfff00000
 800bef8:	0800fb51 	.word	0x0800fb51
 800befc:	00000000 	.word	0x00000000

0800bf00 <pow>:
 800bf00:	b570      	push	{r4, r5, r6, lr}
 800bf02:	ed2d 8b0a 	vpush	{d8-d12}
 800bf06:	eeb0 9b40 	vmov.f64	d9, d0
 800bf0a:	eeb0 8b41 	vmov.f64	d8, d1
 800bf0e:	4c8c      	ldr	r4, [pc, #560]	; (800c140 <pow+0x240>)
 800bf10:	b08a      	sub	sp, #40	; 0x28
 800bf12:	f000 f99d 	bl	800c250 <__ieee754_pow>
 800bf16:	f994 3000 	ldrsb.w	r3, [r4]
 800bf1a:	eeb0 ab40 	vmov.f64	d10, d0
 800bf1e:	1c5a      	adds	r2, r3, #1
 800bf20:	4626      	mov	r6, r4
 800bf22:	d04b      	beq.n	800bfbc <pow+0xbc>
 800bf24:	eeb4 8b48 	vcmp.f64	d8, d8
 800bf28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf2c:	d646      	bvs.n	800bfbc <pow+0xbc>
 800bf2e:	eeb4 9b49 	vcmp.f64	d9, d9
 800bf32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf36:	d719      	bvc.n	800bf6c <pow+0x6c>
 800bf38:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bf3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf40:	d13c      	bne.n	800bfbc <pow+0xbc>
 800bf42:	2201      	movs	r2, #1
 800bf44:	9200      	str	r2, [sp, #0]
 800bf46:	497f      	ldr	r1, [pc, #508]	; (800c144 <pow+0x244>)
 800bf48:	4a7f      	ldr	r2, [pc, #508]	; (800c148 <pow+0x248>)
 800bf4a:	9201      	str	r2, [sp, #4]
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	2200      	movs	r2, #0
 800bf50:	2b02      	cmp	r3, #2
 800bf52:	9208      	str	r2, [sp, #32]
 800bf54:	ed8d 9b02 	vstr	d9, [sp, #8]
 800bf58:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bf5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf60:	d02a      	beq.n	800bfb8 <pow+0xb8>
 800bf62:	4668      	mov	r0, sp
 800bf64:	f001 fa28 	bl	800d3b8 <matherr>
 800bf68:	bb00      	cbnz	r0, 800bfac <pow+0xac>
 800bf6a:	e04e      	b.n	800c00a <pow+0x10a>
 800bf6c:	ed9f bb72 	vldr	d11, [pc, #456]	; 800c138 <pow+0x238>
 800bf70:	eeb4 9b4b 	vcmp.f64	d9, d11
 800bf74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf78:	eeb0 cb4b 	vmov.f64	d12, d11
 800bf7c:	d14a      	bne.n	800c014 <pow+0x114>
 800bf7e:	eeb4 8b4b 	vcmp.f64	d8, d11
 800bf82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf86:	d11f      	bne.n	800bfc8 <pow+0xc8>
 800bf88:	2201      	movs	r2, #1
 800bf8a:	9200      	str	r2, [sp, #0]
 800bf8c:	4a6e      	ldr	r2, [pc, #440]	; (800c148 <pow+0x248>)
 800bf8e:	9201      	str	r2, [sp, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	9208      	str	r2, [sp, #32]
 800bf94:	ed8d 9b02 	vstr	d9, [sp, #8]
 800bf98:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bf9c:	ed8d bb06 	vstr	d11, [sp, #24]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d0de      	beq.n	800bf62 <pow+0x62>
 800bfa4:	4b67      	ldr	r3, [pc, #412]	; (800c144 <pow+0x244>)
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bfac:	9b08      	ldr	r3, [sp, #32]
 800bfae:	b11b      	cbz	r3, 800bfb8 <pow+0xb8>
 800bfb0:	f7fd fecc 	bl	8009d4c <__errno>
 800bfb4:	9b08      	ldr	r3, [sp, #32]
 800bfb6:	6003      	str	r3, [r0, #0]
 800bfb8:	ed9d ab06 	vldr	d10, [sp, #24]
 800bfbc:	eeb0 0b4a 	vmov.f64	d0, d10
 800bfc0:	b00a      	add	sp, #40	; 0x28
 800bfc2:	ecbd 8b0a 	vpop	{d8-d12}
 800bfc6:	bd70      	pop	{r4, r5, r6, pc}
 800bfc8:	eeb0 0b48 	vmov.f64	d0, d8
 800bfcc:	f001 f971 	bl	800d2b2 <finite>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	d0f3      	beq.n	800bfbc <pow+0xbc>
 800bfd4:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800bfd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfdc:	d5ee      	bpl.n	800bfbc <pow+0xbc>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	4b59      	ldr	r3, [pc, #356]	; (800c148 <pow+0x248>)
 800bfe4:	9301      	str	r3, [sp, #4]
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	9308      	str	r3, [sp, #32]
 800bfea:	f994 3000 	ldrsb.w	r3, [r4]
 800bfee:	ed8d 9b02 	vstr	d9, [sp, #8]
 800bff2:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bff6:	b913      	cbnz	r3, 800bffe <pow+0xfe>
 800bff8:	ed8d bb06 	vstr	d11, [sp, #24]
 800bffc:	e7b1      	b.n	800bf62 <pow+0x62>
 800bffe:	4953      	ldr	r1, [pc, #332]	; (800c14c <pow+0x24c>)
 800c000:	2000      	movs	r0, #0
 800c002:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c006:	2b02      	cmp	r3, #2
 800c008:	d1ab      	bne.n	800bf62 <pow+0x62>
 800c00a:	f7fd fe9f 	bl	8009d4c <__errno>
 800c00e:	2321      	movs	r3, #33	; 0x21
 800c010:	6003      	str	r3, [r0, #0]
 800c012:	e7cb      	b.n	800bfac <pow+0xac>
 800c014:	f001 f94d 	bl	800d2b2 <finite>
 800c018:	4605      	mov	r5, r0
 800c01a:	2800      	cmp	r0, #0
 800c01c:	d164      	bne.n	800c0e8 <pow+0x1e8>
 800c01e:	eeb0 0b49 	vmov.f64	d0, d9
 800c022:	f001 f946 	bl	800d2b2 <finite>
 800c026:	2800      	cmp	r0, #0
 800c028:	d05e      	beq.n	800c0e8 <pow+0x1e8>
 800c02a:	eeb0 0b48 	vmov.f64	d0, d8
 800c02e:	f001 f940 	bl	800d2b2 <finite>
 800c032:	2800      	cmp	r0, #0
 800c034:	d058      	beq.n	800c0e8 <pow+0x1e8>
 800c036:	eeb4 ab4a 	vcmp.f64	d10, d10
 800c03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c03e:	f994 3000 	ldrsb.w	r3, [r4]
 800c042:	4a41      	ldr	r2, [pc, #260]	; (800c148 <pow+0x248>)
 800c044:	d70e      	bvc.n	800c064 <pow+0x164>
 800c046:	2101      	movs	r1, #1
 800c048:	e9cd 1200 	strd	r1, r2, [sp]
 800c04c:	9508      	str	r5, [sp, #32]
 800c04e:	ed8d 9b02 	vstr	d9, [sp, #8]
 800c052:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d0ce      	beq.n	800bff8 <pow+0xf8>
 800c05a:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 800c05e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c062:	e7d0      	b.n	800c006 <pow+0x106>
 800c064:	2103      	movs	r1, #3
 800c066:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c06a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c06e:	ee28 8b07 	vmul.f64	d8, d8, d7
 800c072:	e9cd 1200 	strd	r1, r2, [sp]
 800c076:	9508      	str	r5, [sp, #32]
 800c078:	ed8d 9b02 	vstr	d9, [sp, #8]
 800c07c:	b9fb      	cbnz	r3, 800c0be <pow+0x1be>
 800c07e:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800c082:	4b33      	ldr	r3, [pc, #204]	; (800c150 <pow+0x250>)
 800c084:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c08c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c090:	d54b      	bpl.n	800c12a <pow+0x22a>
 800c092:	eeb0 0b48 	vmov.f64	d0, d8
 800c096:	f001 f99b 	bl	800d3d0 <rint>
 800c09a:	eeb4 0b48 	vcmp.f64	d0, d8
 800c09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a2:	d004      	beq.n	800c0ae <pow+0x1ae>
 800c0a4:	4b2b      	ldr	r3, [pc, #172]	; (800c154 <pow+0x254>)
 800c0a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c0aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c0ae:	f996 3000 	ldrsb.w	r3, [r6]
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d139      	bne.n	800c12a <pow+0x22a>
 800c0b6:	f7fd fe49 	bl	8009d4c <__errno>
 800c0ba:	2322      	movs	r3, #34	; 0x22
 800c0bc:	e7a8      	b.n	800c010 <pow+0x110>
 800c0be:	4b26      	ldr	r3, [pc, #152]	; (800c158 <pow+0x258>)
 800c0c0:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c0ce:	d5ee      	bpl.n	800c0ae <pow+0x1ae>
 800c0d0:	eeb0 0b48 	vmov.f64	d0, d8
 800c0d4:	f001 f97c 	bl	800d3d0 <rint>
 800c0d8:	eeb4 0b48 	vcmp.f64	d0, d8
 800c0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0e0:	d0e5      	beq.n	800c0ae <pow+0x1ae>
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	4b19      	ldr	r3, [pc, #100]	; (800c14c <pow+0x24c>)
 800c0e6:	e7e0      	b.n	800c0aa <pow+0x1aa>
 800c0e8:	eeb5 ab40 	vcmp.f64	d10, #0.0
 800c0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0f0:	f47f af64 	bne.w	800bfbc <pow+0xbc>
 800c0f4:	eeb0 0b49 	vmov.f64	d0, d9
 800c0f8:	f001 f8db 	bl	800d2b2 <finite>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	f43f af5d 	beq.w	800bfbc <pow+0xbc>
 800c102:	eeb0 0b48 	vmov.f64	d0, d8
 800c106:	f001 f8d4 	bl	800d2b2 <finite>
 800c10a:	2800      	cmp	r0, #0
 800c10c:	f43f af56 	beq.w	800bfbc <pow+0xbc>
 800c110:	2304      	movs	r3, #4
 800c112:	9300      	str	r3, [sp, #0]
 800c114:	4b0c      	ldr	r3, [pc, #48]	; (800c148 <pow+0x248>)
 800c116:	9301      	str	r3, [sp, #4]
 800c118:	2300      	movs	r3, #0
 800c11a:	9308      	str	r3, [sp, #32]
 800c11c:	ed8d 9b02 	vstr	d9, [sp, #8]
 800c120:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c124:	ed8d cb06 	vstr	d12, [sp, #24]
 800c128:	e7c1      	b.n	800c0ae <pow+0x1ae>
 800c12a:	4668      	mov	r0, sp
 800c12c:	f001 f944 	bl	800d3b8 <matherr>
 800c130:	2800      	cmp	r0, #0
 800c132:	f47f af3b 	bne.w	800bfac <pow+0xac>
 800c136:	e7be      	b.n	800c0b6 <pow+0x1b6>
	...
 800c140:	24000548 	.word	0x24000548
 800c144:	3ff00000 	.word	0x3ff00000
 800c148:	0800fc6e 	.word	0x0800fc6e
 800c14c:	fff00000 	.word	0xfff00000
 800c150:	47efffff 	.word	0x47efffff
 800c154:	c7efffff 	.word	0xc7efffff
 800c158:	7ff00000 	.word	0x7ff00000
 800c15c:	00000000 	.word	0x00000000

0800c160 <__ieee754_log10>:
 800c160:	b500      	push	{lr}
 800c162:	ed2d 8b02 	vpush	{d8}
 800c166:	b083      	sub	sp, #12
 800c168:	ed8d 0b00 	vstr	d0, [sp]
 800c16c:	9a01      	ldr	r2, [sp, #4]
 800c16e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800c172:	da29      	bge.n	800c1c8 <__ieee754_log10+0x68>
 800c174:	9900      	ldr	r1, [sp, #0]
 800c176:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c17a:	430b      	orrs	r3, r1
 800c17c:	d10a      	bne.n	800c194 <__ieee754_log10+0x34>
 800c17e:	ed9f 6b26 	vldr	d6, [pc, #152]	; 800c218 <__ieee754_log10+0xb8>
 800c182:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800c220 <__ieee754_log10+0xc0>
 800c186:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800c18a:	b003      	add	sp, #12
 800c18c:	ecbd 8b02 	vpop	{d8}
 800c190:	f85d fb04 	ldr.w	pc, [sp], #4
 800c194:	2a00      	cmp	r2, #0
 800c196:	da04      	bge.n	800c1a2 <__ieee754_log10+0x42>
 800c198:	ed9d 7b00 	vldr	d7, [sp]
 800c19c:	ee37 6b47 	vsub.f64	d6, d7, d7
 800c1a0:	e7ef      	b.n	800c182 <__ieee754_log10+0x22>
 800c1a2:	ed9d 6b00 	vldr	d6, [sp]
 800c1a6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c228 <__ieee754_log10+0xc8>
 800c1aa:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c1ae:	ed8d 7b00 	vstr	d7, [sp]
 800c1b2:	9a01      	ldr	r2, [sp, #4]
 800c1b4:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800c1b8:	4b23      	ldr	r3, [pc, #140]	; (800c248 <__ieee754_log10+0xe8>)
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	dd06      	ble.n	800c1cc <__ieee754_log10+0x6c>
 800c1be:	ed9d 7b00 	vldr	d7, [sp]
 800c1c2:	ee37 0b07 	vadd.f64	d0, d7, d7
 800c1c6:	e7e0      	b.n	800c18a <__ieee754_log10+0x2a>
 800c1c8:	2100      	movs	r1, #0
 800c1ca:	e7f5      	b.n	800c1b8 <__ieee754_log10+0x58>
 800c1cc:	1513      	asrs	r3, r2, #20
 800c1ce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c1d2:	440b      	add	r3, r1
 800c1d4:	0fd8      	lsrs	r0, r3, #31
 800c1d6:	4403      	add	r3, r0
 800c1d8:	ee07 3a90 	vmov	s15, r3
 800c1dc:	f3c2 0113 	ubfx	r1, r2, #0, #20
 800c1e0:	f5c0 707f 	rsb	r0, r0, #1020	; 0x3fc
 800c1e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1e8:	3003      	adds	r0, #3
 800c1ea:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800c1ee:	ec43 2b10 	vmov	d0, r2, r3
 800c1f2:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800c1f6:	f001 f9f7 	bl	800d5e8 <__ieee754_log>
 800c1fa:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800c230 <__ieee754_log10+0xd0>
 800c1fe:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c202:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800c238 <__ieee754_log10+0xd8>
 800c206:	eea8 0b07 	vfma.f64	d0, d8, d7
 800c20a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800c240 <__ieee754_log10+0xe0>
 800c20e:	eea8 0b07 	vfma.f64	d0, d8, d7
 800c212:	e7ba      	b.n	800c18a <__ieee754_log10+0x2a>
 800c214:	f3af 8000 	nop.w
 800c218:	00000000 	.word	0x00000000
 800c21c:	c3500000 	.word	0xc3500000
	...
 800c22c:	43500000 	.word	0x43500000
 800c230:	1526e50e 	.word	0x1526e50e
 800c234:	3fdbcb7b 	.word	0x3fdbcb7b
 800c238:	11f12b36 	.word	0x11f12b36
 800c23c:	3d59fef3 	.word	0x3d59fef3
 800c240:	509f6000 	.word	0x509f6000
 800c244:	3fd34413 	.word	0x3fd34413
 800c248:	7fefffff 	.word	0x7fefffff
 800c24c:	00000000 	.word	0x00000000

0800c250 <__ieee754_pow>:
 800c250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c254:	ec57 6b11 	vmov	r6, r7, d1
 800c258:	ed2d 8b02 	vpush	{d8}
 800c25c:	eeb0 8b40 	vmov.f64	d8, d0
 800c260:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c264:	ea58 0306 	orrs.w	r3, r8, r6
 800c268:	b085      	sub	sp, #20
 800c26a:	46b9      	mov	r9, r7
 800c26c:	ee11 2a10 	vmov	r2, s2
 800c270:	f000 8306 	beq.w	800c880 <__ieee754_pow+0x630>
 800c274:	ee18 aa90 	vmov	sl, s17
 800c278:	4bb9      	ldr	r3, [pc, #740]	; (800c560 <__ieee754_pow+0x310>)
 800c27a:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 800c27e:	429c      	cmp	r4, r3
 800c280:	ee10 ba10 	vmov	fp, s0
 800c284:	dc0b      	bgt.n	800c29e <__ieee754_pow+0x4e>
 800c286:	d105      	bne.n	800c294 <__ieee754_pow+0x44>
 800c288:	f1bb 0f00 	cmp.w	fp, #0
 800c28c:	d107      	bne.n	800c29e <__ieee754_pow+0x4e>
 800c28e:	45a0      	cmp	r8, r4
 800c290:	dc0d      	bgt.n	800c2ae <__ieee754_pow+0x5e>
 800c292:	e001      	b.n	800c298 <__ieee754_pow+0x48>
 800c294:	4598      	cmp	r8, r3
 800c296:	dc02      	bgt.n	800c29e <__ieee754_pow+0x4e>
 800c298:	4598      	cmp	r8, r3
 800c29a:	d110      	bne.n	800c2be <__ieee754_pow+0x6e>
 800c29c:	b17a      	cbz	r2, 800c2be <__ieee754_pow+0x6e>
 800c29e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c2a2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c2a6:	ea54 030b 	orrs.w	r3, r4, fp
 800c2aa:	f000 82e9 	beq.w	800c880 <__ieee754_pow+0x630>
 800c2ae:	48ad      	ldr	r0, [pc, #692]	; (800c564 <__ieee754_pow+0x314>)
 800c2b0:	b005      	add	sp, #20
 800c2b2:	ecbd 8b02 	vpop	{d8}
 800c2b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ba:	f001 b881 	b.w	800d3c0 <nan>
 800c2be:	f1ba 0f00 	cmp.w	sl, #0
 800c2c2:	da4e      	bge.n	800c362 <__ieee754_pow+0x112>
 800c2c4:	4ba8      	ldr	r3, [pc, #672]	; (800c568 <__ieee754_pow+0x318>)
 800c2c6:	4598      	cmp	r8, r3
 800c2c8:	dc49      	bgt.n	800c35e <__ieee754_pow+0x10e>
 800c2ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c2ce:	4598      	cmp	r8, r3
 800c2d0:	dd47      	ble.n	800c362 <__ieee754_pow+0x112>
 800c2d2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c2d6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c2da:	2b14      	cmp	r3, #20
 800c2dc:	dd24      	ble.n	800c328 <__ieee754_pow+0xd8>
 800c2de:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c2e2:	fa22 f503 	lsr.w	r5, r2, r3
 800c2e6:	fa05 f303 	lsl.w	r3, r5, r3
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d139      	bne.n	800c362 <__ieee754_pow+0x112>
 800c2ee:	f005 0501 	and.w	r5, r5, #1
 800c2f2:	f1c5 0502 	rsb	r5, r5, #2
 800c2f6:	2a00      	cmp	r2, #0
 800c2f8:	d15a      	bne.n	800c3b0 <__ieee754_pow+0x160>
 800c2fa:	4b99      	ldr	r3, [pc, #612]	; (800c560 <__ieee754_pow+0x310>)
 800c2fc:	4598      	cmp	r8, r3
 800c2fe:	d122      	bne.n	800c346 <__ieee754_pow+0xf6>
 800c300:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c304:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c308:	ea53 030b 	orrs.w	r3, r3, fp
 800c30c:	f000 82b8 	beq.w	800c880 <__ieee754_pow+0x630>
 800c310:	4b96      	ldr	r3, [pc, #600]	; (800c56c <__ieee754_pow+0x31c>)
 800c312:	429c      	cmp	r4, r3
 800c314:	dd27      	ble.n	800c366 <__ieee754_pow+0x116>
 800c316:	f1b9 0f00 	cmp.w	r9, #0
 800c31a:	f280 82b4 	bge.w	800c886 <__ieee754_pow+0x636>
 800c31e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 800c530 <__ieee754_pow+0x2e0>
 800c322:	ed8d 7b00 	vstr	d7, [sp]
 800c326:	e026      	b.n	800c376 <__ieee754_pow+0x126>
 800c328:	2a00      	cmp	r2, #0
 800c32a:	d140      	bne.n	800c3ae <__ieee754_pow+0x15e>
 800c32c:	f1c3 0314 	rsb	r3, r3, #20
 800c330:	fa48 f503 	asr.w	r5, r8, r3
 800c334:	fa05 f303 	lsl.w	r3, r5, r3
 800c338:	4543      	cmp	r3, r8
 800c33a:	f040 82aa 	bne.w	800c892 <__ieee754_pow+0x642>
 800c33e:	f005 0501 	and.w	r5, r5, #1
 800c342:	f1c5 0502 	rsb	r5, r5, #2
 800c346:	4b8a      	ldr	r3, [pc, #552]	; (800c570 <__ieee754_pow+0x320>)
 800c348:	4598      	cmp	r8, r3
 800c34a:	d11b      	bne.n	800c384 <__ieee754_pow+0x134>
 800c34c:	f1b9 0f00 	cmp.w	r9, #0
 800c350:	f280 829c 	bge.w	800c88c <__ieee754_pow+0x63c>
 800c354:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c358:	ee87 7b08 	vdiv.f64	d7, d7, d8
 800c35c:	e7e1      	b.n	800c322 <__ieee754_pow+0xd2>
 800c35e:	2502      	movs	r5, #2
 800c360:	e7c9      	b.n	800c2f6 <__ieee754_pow+0xa6>
 800c362:	2500      	movs	r5, #0
 800c364:	e7c7      	b.n	800c2f6 <__ieee754_pow+0xa6>
 800c366:	f1b9 0f00 	cmp.w	r9, #0
 800c36a:	dad8      	bge.n	800c31e <__ieee754_pow+0xce>
 800c36c:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 800c370:	4633      	mov	r3, r6
 800c372:	e9cd 3400 	strd	r3, r4, [sp]
 800c376:	ed9d 0b00 	vldr	d0, [sp]
 800c37a:	b005      	add	sp, #20
 800c37c:	ecbd 8b02 	vpop	{d8}
 800c380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c384:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c388:	d102      	bne.n	800c390 <__ieee754_pow+0x140>
 800c38a:	ee28 7b08 	vmul.f64	d7, d8, d8
 800c38e:	e7c8      	b.n	800c322 <__ieee754_pow+0xd2>
 800c390:	4b78      	ldr	r3, [pc, #480]	; (800c574 <__ieee754_pow+0x324>)
 800c392:	4599      	cmp	r9, r3
 800c394:	d10c      	bne.n	800c3b0 <__ieee754_pow+0x160>
 800c396:	f1ba 0f00 	cmp.w	sl, #0
 800c39a:	db09      	blt.n	800c3b0 <__ieee754_pow+0x160>
 800c39c:	eeb0 0b48 	vmov.f64	d0, d8
 800c3a0:	b005      	add	sp, #20
 800c3a2:	ecbd 8b02 	vpop	{d8}
 800c3a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3aa:	f000 bc15 	b.w	800cbd8 <__ieee754_sqrt>
 800c3ae:	2500      	movs	r5, #0
 800c3b0:	eeb0 0b48 	vmov.f64	d0, d8
 800c3b4:	f000 ff74 	bl	800d2a0 <fabs>
 800c3b8:	ed8d 0b00 	vstr	d0, [sp]
 800c3bc:	f1bb 0f00 	cmp.w	fp, #0
 800c3c0:	d128      	bne.n	800c414 <__ieee754_pow+0x1c4>
 800c3c2:	b124      	cbz	r4, 800c3ce <__ieee754_pow+0x17e>
 800c3c4:	4b6a      	ldr	r3, [pc, #424]	; (800c570 <__ieee754_pow+0x320>)
 800c3c6:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d122      	bne.n	800c414 <__ieee754_pow+0x1c4>
 800c3ce:	f1b9 0f00 	cmp.w	r9, #0
 800c3d2:	da07      	bge.n	800c3e4 <__ieee754_pow+0x194>
 800c3d4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c3d8:	ed9d 6b00 	vldr	d6, [sp]
 800c3dc:	ee87 7b06 	vdiv.f64	d7, d7, d6
 800c3e0:	ed8d 7b00 	vstr	d7, [sp]
 800c3e4:	f1ba 0f00 	cmp.w	sl, #0
 800c3e8:	dac5      	bge.n	800c376 <__ieee754_pow+0x126>
 800c3ea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c3ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c3f2:	ea54 0305 	orrs.w	r3, r4, r5
 800c3f6:	d106      	bne.n	800c406 <__ieee754_pow+0x1b6>
 800c3f8:	ed9d 7b00 	vldr	d7, [sp]
 800c3fc:	ee37 7b47 	vsub.f64	d7, d7, d7
 800c400:	ee87 7b07 	vdiv.f64	d7, d7, d7
 800c404:	e78d      	b.n	800c322 <__ieee754_pow+0xd2>
 800c406:	2d01      	cmp	r5, #1
 800c408:	d1b5      	bne.n	800c376 <__ieee754_pow+0x126>
 800c40a:	ed9d 7b00 	vldr	d7, [sp]
 800c40e:	eeb1 7b47 	vneg.f64	d7, d7
 800c412:	e786      	b.n	800c322 <__ieee754_pow+0xd2>
 800c414:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800c418:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c41c:	ea55 030a 	orrs.w	r3, r5, sl
 800c420:	d104      	bne.n	800c42c <__ieee754_pow+0x1dc>
 800c422:	ee38 8b48 	vsub.f64	d8, d8, d8
 800c426:	ee88 7b08 	vdiv.f64	d7, d8, d8
 800c42a:	e77a      	b.n	800c322 <__ieee754_pow+0xd2>
 800c42c:	4b52      	ldr	r3, [pc, #328]	; (800c578 <__ieee754_pow+0x328>)
 800c42e:	4598      	cmp	r8, r3
 800c430:	f340 80a8 	ble.w	800c584 <__ieee754_pow+0x334>
 800c434:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c438:	4598      	cmp	r8, r3
 800c43a:	dd0b      	ble.n	800c454 <__ieee754_pow+0x204>
 800c43c:	4b4b      	ldr	r3, [pc, #300]	; (800c56c <__ieee754_pow+0x31c>)
 800c43e:	429c      	cmp	r4, r3
 800c440:	dc0e      	bgt.n	800c460 <__ieee754_pow+0x210>
 800c442:	f1b9 0f00 	cmp.w	r9, #0
 800c446:	f6bf af6a 	bge.w	800c31e <__ieee754_pow+0xce>
 800c44a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800c538 <__ieee754_pow+0x2e8>
 800c44e:	ee27 7b07 	vmul.f64	d7, d7, d7
 800c452:	e766      	b.n	800c322 <__ieee754_pow+0xd2>
 800c454:	4b49      	ldr	r3, [pc, #292]	; (800c57c <__ieee754_pow+0x32c>)
 800c456:	429c      	cmp	r4, r3
 800c458:	ddf3      	ble.n	800c442 <__ieee754_pow+0x1f2>
 800c45a:	4b45      	ldr	r3, [pc, #276]	; (800c570 <__ieee754_pow+0x320>)
 800c45c:	429c      	cmp	r4, r3
 800c45e:	dd03      	ble.n	800c468 <__ieee754_pow+0x218>
 800c460:	f1b9 0f00 	cmp.w	r9, #0
 800c464:	dcf1      	bgt.n	800c44a <__ieee754_pow+0x1fa>
 800c466:	e75a      	b.n	800c31e <__ieee754_pow+0xce>
 800c468:	ed9d 7b00 	vldr	d7, [sp]
 800c46c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c470:	ed9f 5b33 	vldr	d5, [pc, #204]	; 800c540 <__ieee754_pow+0x2f0>
 800c474:	ee37 6b46 	vsub.f64	d6, d7, d6
 800c478:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 800c47c:	eeb1 3b46 	vneg.f64	d3, d6
 800c480:	eea3 5b07 	vfma.f64	d5, d3, d7
 800c484:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c488:	eea5 7b46 	vfms.f64	d7, d5, d6
 800c48c:	ee26 5b06 	vmul.f64	d5, d6, d6
 800c490:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c494:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800c548 <__ieee754_pow+0x2f8>
 800c498:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800c49c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800c550 <__ieee754_pow+0x300>
 800c4a0:	eea6 7b05 	vfma.f64	d7, d6, d5
 800c4a4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800c558 <__ieee754_pow+0x308>
 800c4a8:	eeb0 4b47 	vmov.f64	d4, d7
 800c4ac:	eea6 4b05 	vfma.f64	d4, d6, d5
 800c4b0:	ec53 2b14 	vmov	r2, r3, d4
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	ec43 2b14 	vmov	d4, r2, r3
 800c4ba:	eeb0 6b44 	vmov.f64	d6, d4
 800c4be:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c4c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c4c6:	3d01      	subs	r5, #1
 800c4c8:	ea55 030a 	orrs.w	r3, r5, sl
 800c4cc:	f04f 0200 	mov.w	r2, #0
 800c4d0:	463b      	mov	r3, r7
 800c4d2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800c4d6:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800c4da:	ec47 6b15 	vmov	d5, r6, r7
 800c4de:	fe06 8b08 	vseleq.f64	d8, d6, d8
 800c4e2:	ec47 6b13 	vmov	d3, r6, r7
 800c4e6:	ec43 2b16 	vmov	d6, r2, r3
 800c4ea:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c4ee:	ee35 5b46 	vsub.f64	d5, d5, d6
 800c4f2:	4b23      	ldr	r3, [pc, #140]	; (800c580 <__ieee754_pow+0x330>)
 800c4f4:	eea5 7b04 	vfma.f64	d7, d5, d4
 800c4f8:	ee24 6b06 	vmul.f64	d6, d4, d6
 800c4fc:	ee37 5b06 	vadd.f64	d5, d7, d6
 800c500:	ee15 1a90 	vmov	r1, s11
 800c504:	4299      	cmp	r1, r3
 800c506:	ee15 2a10 	vmov	r2, s10
 800c50a:	f340 819b 	ble.w	800c844 <__ieee754_pow+0x5f4>
 800c50e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c512:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c516:	4313      	orrs	r3, r2
 800c518:	f000 810a 	beq.w	800c730 <__ieee754_pow+0x4e0>
 800c51c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 800c538 <__ieee754_pow+0x2e8>
 800c520:	ee28 8b07 	vmul.f64	d8, d8, d7
 800c524:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c528:	e6fb      	b.n	800c322 <__ieee754_pow+0xd2>
 800c52a:	bf00      	nop
 800c52c:	f3af 8000 	nop.w
	...
 800c538:	8800759c 	.word	0x8800759c
 800c53c:	7e37e43c 	.word	0x7e37e43c
 800c540:	55555555 	.word	0x55555555
 800c544:	3fd55555 	.word	0x3fd55555
 800c548:	652b82fe 	.word	0x652b82fe
 800c54c:	3ff71547 	.word	0x3ff71547
 800c550:	f85ddf44 	.word	0xf85ddf44
 800c554:	3e54ae0b 	.word	0x3e54ae0b
 800c558:	60000000 	.word	0x60000000
 800c55c:	3ff71547 	.word	0x3ff71547
 800c560:	7ff00000 	.word	0x7ff00000
 800c564:	0800fb51 	.word	0x0800fb51
 800c568:	433fffff 	.word	0x433fffff
 800c56c:	3fefffff 	.word	0x3fefffff
 800c570:	3ff00000 	.word	0x3ff00000
 800c574:	3fe00000 	.word	0x3fe00000
 800c578:	41e00000 	.word	0x41e00000
 800c57c:	3feffffe 	.word	0x3feffffe
 800c580:	408fffff 	.word	0x408fffff
 800c584:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c588:	f280 80ce 	bge.w	800c728 <__ieee754_pow+0x4d8>
 800c58c:	ed9d 6b00 	vldr	d6, [sp]
 800c590:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 800c898 <__ieee754_pow+0x648>
 800c594:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c598:	ed8d 7b00 	vstr	d7, [sp]
 800c59c:	9c01      	ldr	r4, [sp, #4]
 800c59e:	f06f 0334 	mvn.w	r3, #52	; 0x34
 800c5a2:	1521      	asrs	r1, r4, #20
 800c5a4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c5a8:	4419      	add	r1, r3
 800c5aa:	4be3      	ldr	r3, [pc, #908]	; (800c938 <__ieee754_pow+0x6e8>)
 800c5ac:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c5b0:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 800c5b4:	429c      	cmp	r4, r3
 800c5b6:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 800c5ba:	dd06      	ble.n	800c5ca <__ieee754_pow+0x37a>
 800c5bc:	4bdf      	ldr	r3, [pc, #892]	; (800c93c <__ieee754_pow+0x6ec>)
 800c5be:	429c      	cmp	r4, r3
 800c5c0:	f340 80b4 	ble.w	800c72c <__ieee754_pow+0x4dc>
 800c5c4:	3101      	adds	r1, #1
 800c5c6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800c5ca:	2400      	movs	r4, #0
 800c5cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5d0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	ec43 2b17 	vmov	d7, r2, r3
 800c5da:	4bd9      	ldr	r3, [pc, #868]	; (800c940 <__ieee754_pow+0x6f0>)
 800c5dc:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 800c5e0:	4463      	add	r3, ip
 800c5e2:	ed93 5b00 	vldr	d5, [r3]
 800c5e6:	1040      	asrs	r0, r0, #1
 800c5e8:	ee37 2b45 	vsub.f64	d2, d7, d5
 800c5ec:	ee35 6b07 	vadd.f64	d6, d5, d7
 800c5f0:	ee84 1b06 	vdiv.f64	d1, d4, d6
 800c5f4:	ee22 6b01 	vmul.f64	d6, d2, d1
 800c5f8:	ed8d 6b00 	vstr	d6, [sp]
 800c5fc:	e9dd 8900 	ldrd	r8, r9, [sp]
 800c600:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800c604:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 800c608:	f04f 0800 	mov.w	r8, #0
 800c60c:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 800c610:	2200      	movs	r2, #0
 800c612:	ec49 8b14 	vmov	d4, r8, r9
 800c616:	ec43 2b16 	vmov	d6, r2, r3
 800c61a:	eeb1 3b44 	vneg.f64	d3, d4
 800c61e:	eea3 2b06 	vfma.f64	d2, d3, d6
 800c622:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c626:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c62a:	eea3 2b07 	vfma.f64	d2, d3, d7
 800c62e:	ed9d 7b00 	vldr	d7, [sp]
 800c632:	ee22 2b01 	vmul.f64	d2, d2, d1
 800c636:	ee27 5b07 	vmul.f64	d5, d7, d7
 800c63a:	ee37 6b04 	vadd.f64	d6, d7, d4
 800c63e:	ed9f 1b98 	vldr	d1, [pc, #608]	; 800c8a0 <__ieee754_pow+0x650>
 800c642:	ee25 0b05 	vmul.f64	d0, d5, d5
 800c646:	ee26 6b02 	vmul.f64	d6, d6, d2
 800c64a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800c8a8 <__ieee754_pow+0x658>
 800c64e:	eea5 7b01 	vfma.f64	d7, d5, d1
 800c652:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800c8b0 <__ieee754_pow+0x660>
 800c656:	eea7 1b05 	vfma.f64	d1, d7, d5
 800c65a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800c8b8 <__ieee754_pow+0x668>
 800c65e:	eea1 7b05 	vfma.f64	d7, d1, d5
 800c662:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800c8c0 <__ieee754_pow+0x670>
 800c666:	eea7 1b05 	vfma.f64	d1, d7, d5
 800c66a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800c8c8 <__ieee754_pow+0x678>
 800c66e:	eea1 7b05 	vfma.f64	d7, d1, d5
 800c672:	eea0 6b07 	vfma.f64	d6, d0, d7
 800c676:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 800c67a:	eeb0 5b47 	vmov.f64	d5, d7
 800c67e:	eea4 5b04 	vfma.f64	d5, d4, d4
 800c682:	ee35 5b06 	vadd.f64	d5, d5, d6
 800c686:	ed8d 5b02 	vstr	d5, [sp, #8]
 800c68a:	f8cd 8008 	str.w	r8, [sp, #8]
 800c68e:	ed9d 5b02 	vldr	d5, [sp, #8]
 800c692:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c696:	eea3 7b04 	vfma.f64	d7, d3, d4
 800c69a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c69e:	ed9d 6b00 	vldr	d6, [sp]
 800c6a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c6a6:	eea2 7b05 	vfma.f64	d7, d2, d5
 800c6aa:	eeb0 6b47 	vmov.f64	d6, d7
 800c6ae:	eea4 6b05 	vfma.f64	d6, d4, d5
 800c6b2:	ed8d 6b00 	vstr	d6, [sp]
 800c6b6:	f8cd 8000 	str.w	r8, [sp]
 800c6ba:	ed9d 2b00 	vldr	d2, [sp]
 800c6be:	eeb0 6b42 	vmov.f64	d6, d2
 800c6c2:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c6c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c6ca:	ed9f 6b81 	vldr	d6, [pc, #516]	; 800c8d0 <__ieee754_pow+0x680>
 800c6ce:	4b9d      	ldr	r3, [pc, #628]	; (800c944 <__ieee754_pow+0x6f4>)
 800c6d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c6d4:	ed9f 6b80 	vldr	d6, [pc, #512]	; 800c8d8 <__ieee754_pow+0x688>
 800c6d8:	4463      	add	r3, ip
 800c6da:	eea2 7b06 	vfma.f64	d7, d2, d6
 800c6de:	ed93 6b00 	vldr	d6, [r3]
 800c6e2:	4b99      	ldr	r3, [pc, #612]	; (800c948 <__ieee754_pow+0x6f8>)
 800c6e4:	ee37 6b06 	vadd.f64	d6, d7, d6
 800c6e8:	449c      	add	ip, r3
 800c6ea:	ed9c 1b00 	vldr	d1, [ip]
 800c6ee:	eeb0 4b46 	vmov.f64	d4, d6
 800c6f2:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 800c8e0 <__ieee754_pow+0x690>
 800c6f6:	ee07 1a90 	vmov	s15, r1
 800c6fa:	eea2 4b03 	vfma.f64	d4, d2, d3
 800c6fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c702:	ee34 4b01 	vadd.f64	d4, d4, d1
 800c706:	ee34 5b07 	vadd.f64	d5, d4, d7
 800c70a:	ed8d 5b00 	vstr	d5, [sp]
 800c70e:	f8cd 8000 	str.w	r8, [sp]
 800c712:	ed9d 4b00 	vldr	d4, [sp]
 800c716:	ee34 7b47 	vsub.f64	d7, d4, d7
 800c71a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800c71e:	eea2 7b43 	vfms.f64	d7, d2, d3
 800c722:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c726:	e6ce      	b.n	800c4c6 <__ieee754_pow+0x276>
 800c728:	2300      	movs	r3, #0
 800c72a:	e73a      	b.n	800c5a2 <__ieee754_pow+0x352>
 800c72c:	2401      	movs	r4, #1
 800c72e:	e74d      	b.n	800c5cc <__ieee754_pow+0x37c>
 800c730:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800c8e8 <__ieee754_pow+0x698>
 800c734:	ee35 5b46 	vsub.f64	d5, d5, d6
 800c738:	ee37 4b04 	vadd.f64	d4, d7, d4
 800c73c:	eeb4 4bc5 	vcmpe.f64	d4, d5
 800c740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c744:	f73f aeea 	bgt.w	800c51c <__ieee754_pow+0x2cc>
 800c748:	4a80      	ldr	r2, [pc, #512]	; (800c94c <__ieee754_pow+0x6fc>)
 800c74a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c74e:	4293      	cmp	r3, r2
 800c750:	f340 808e 	ble.w	800c870 <__ieee754_pow+0x620>
 800c754:	151b      	asrs	r3, r3, #20
 800c756:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 800c75a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c75e:	4103      	asrs	r3, r0
 800c760:	440b      	add	r3, r1
 800c762:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c766:	487a      	ldr	r0, [pc, #488]	; (800c950 <__ieee754_pow+0x700>)
 800c768:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c76c:	4110      	asrs	r0, r2
 800c76e:	ea23 0500 	bic.w	r5, r3, r0
 800c772:	f3c3 0013 	ubfx	r0, r3, #0, #20
 800c776:	2400      	movs	r4, #0
 800c778:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800c77c:	f1c2 0214 	rsb	r2, r2, #20
 800c780:	ec45 4b15 	vmov	d5, r4, r5
 800c784:	4110      	asrs	r0, r2
 800c786:	2900      	cmp	r1, #0
 800c788:	bfb8      	it	lt
 800c78a:	4240      	neglt	r0, r0
 800c78c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c790:	ee36 5b07 	vadd.f64	d5, d6, d7
 800c794:	ec53 2b15 	vmov	r2, r3, d5
 800c798:	2200      	movs	r2, #0
 800c79a:	ec43 2b15 	vmov	d5, r2, r3
 800c79e:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800c8f0 <__ieee754_pow+0x6a0>
 800c7a2:	ee35 6b46 	vsub.f64	d6, d5, d6
 800c7a6:	ee37 6b46 	vsub.f64	d6, d7, d6
 800c7aa:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800c8f8 <__ieee754_pow+0x6a8>
 800c7ae:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c7b2:	eea6 7b04 	vfma.f64	d7, d6, d4
 800c7b6:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800c900 <__ieee754_pow+0x6b0>
 800c7ba:	eeb0 4b47 	vmov.f64	d4, d7
 800c7be:	eea5 4b06 	vfma.f64	d4, d5, d6
 800c7c2:	eeb0 3b44 	vmov.f64	d3, d4
 800c7c6:	eea5 3b46 	vfms.f64	d3, d5, d6
 800c7ca:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 800c908 <__ieee754_pow+0x6b8>
 800c7ce:	ee37 7b43 	vsub.f64	d7, d7, d3
 800c7d2:	ee24 6b04 	vmul.f64	d6, d4, d4
 800c7d6:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 800c910 <__ieee754_pow+0x6c0>
 800c7da:	eea4 7b07 	vfma.f64	d7, d4, d7
 800c7de:	eea6 3b05 	vfma.f64	d3, d6, d5
 800c7e2:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800c918 <__ieee754_pow+0x6c8>
 800c7e6:	eea3 5b06 	vfma.f64	d5, d3, d6
 800c7ea:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800c920 <__ieee754_pow+0x6d0>
 800c7ee:	eea5 3b06 	vfma.f64	d3, d5, d6
 800c7f2:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800c928 <__ieee754_pow+0x6d8>
 800c7f6:	eea3 5b06 	vfma.f64	d5, d3, d6
 800c7fa:	eeb0 3b44 	vmov.f64	d3, d4
 800c7fe:	eea5 3b46 	vfms.f64	d3, d5, d6
 800c802:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c806:	eeb0 6b43 	vmov.f64	d6, d3
 800c80a:	ee24 3b03 	vmul.f64	d3, d4, d3
 800c80e:	ee36 5b45 	vsub.f64	d5, d6, d5
 800c812:	ee83 6b05 	vdiv.f64	d6, d3, d5
 800c816:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c81a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c81e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800c822:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c826:	ed8d 7b00 	vstr	d7, [sp]
 800c82a:	9901      	ldr	r1, [sp, #4]
 800c82c:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 800c830:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c834:	da1e      	bge.n	800c874 <__ieee754_pow+0x624>
 800c836:	eeb0 0b47 	vmov.f64	d0, d7
 800c83a:	f000 fe55 	bl	800d4e8 <scalbn>
 800c83e:	ee20 7b08 	vmul.f64	d7, d0, d8
 800c842:	e56e      	b.n	800c322 <__ieee754_pow+0xd2>
 800c844:	4b43      	ldr	r3, [pc, #268]	; (800c954 <__ieee754_pow+0x704>)
 800c846:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800c84a:	4298      	cmp	r0, r3
 800c84c:	f77f af7c 	ble.w	800c748 <__ieee754_pow+0x4f8>
 800c850:	4b41      	ldr	r3, [pc, #260]	; (800c958 <__ieee754_pow+0x708>)
 800c852:	440b      	add	r3, r1
 800c854:	4313      	orrs	r3, r2
 800c856:	d002      	beq.n	800c85e <__ieee754_pow+0x60e>
 800c858:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800c930 <__ieee754_pow+0x6e0>
 800c85c:	e660      	b.n	800c520 <__ieee754_pow+0x2d0>
 800c85e:	ee35 5b46 	vsub.f64	d5, d5, d6
 800c862:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c86a:	f6ff af6d 	blt.w	800c748 <__ieee754_pow+0x4f8>
 800c86e:	e7f3      	b.n	800c858 <__ieee754_pow+0x608>
 800c870:	2000      	movs	r0, #0
 800c872:	e78d      	b.n	800c790 <__ieee754_pow+0x540>
 800c874:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c878:	460b      	mov	r3, r1
 800c87a:	ec43 2b10 	vmov	d0, r2, r3
 800c87e:	e7de      	b.n	800c83e <__ieee754_pow+0x5ee>
 800c880:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c884:	e54d      	b.n	800c322 <__ieee754_pow+0xd2>
 800c886:	e9cd 6700 	strd	r6, r7, [sp]
 800c88a:	e574      	b.n	800c376 <__ieee754_pow+0x126>
 800c88c:	ed8d 8b00 	vstr	d8, [sp]
 800c890:	e571      	b.n	800c376 <__ieee754_pow+0x126>
 800c892:	4615      	mov	r5, r2
 800c894:	e557      	b.n	800c346 <__ieee754_pow+0xf6>
 800c896:	bf00      	nop
 800c898:	00000000 	.word	0x00000000
 800c89c:	43400000 	.word	0x43400000
 800c8a0:	4a454eef 	.word	0x4a454eef
 800c8a4:	3fca7e28 	.word	0x3fca7e28
 800c8a8:	93c9db65 	.word	0x93c9db65
 800c8ac:	3fcd864a 	.word	0x3fcd864a
 800c8b0:	a91d4101 	.word	0xa91d4101
 800c8b4:	3fd17460 	.word	0x3fd17460
 800c8b8:	518f264d 	.word	0x518f264d
 800c8bc:	3fd55555 	.word	0x3fd55555
 800c8c0:	db6fabff 	.word	0xdb6fabff
 800c8c4:	3fdb6db6 	.word	0x3fdb6db6
 800c8c8:	33333303 	.word	0x33333303
 800c8cc:	3fe33333 	.word	0x3fe33333
 800c8d0:	dc3a03fd 	.word	0xdc3a03fd
 800c8d4:	3feec709 	.word	0x3feec709
 800c8d8:	145b01f5 	.word	0x145b01f5
 800c8dc:	be3e2fe0 	.word	0xbe3e2fe0
 800c8e0:	e0000000 	.word	0xe0000000
 800c8e4:	3feec709 	.word	0x3feec709
 800c8e8:	652b82fe 	.word	0x652b82fe
 800c8ec:	3c971547 	.word	0x3c971547
 800c8f0:	fefa39ef 	.word	0xfefa39ef
 800c8f4:	3fe62e42 	.word	0x3fe62e42
 800c8f8:	0ca86c39 	.word	0x0ca86c39
 800c8fc:	be205c61 	.word	0xbe205c61
 800c900:	00000000 	.word	0x00000000
 800c904:	3fe62e43 	.word	0x3fe62e43
 800c908:	72bea4d0 	.word	0x72bea4d0
 800c90c:	3e663769 	.word	0x3e663769
 800c910:	c5d26bf1 	.word	0xc5d26bf1
 800c914:	bebbbd41 	.word	0xbebbbd41
 800c918:	af25de2c 	.word	0xaf25de2c
 800c91c:	3f11566a 	.word	0x3f11566a
 800c920:	16bebd93 	.word	0x16bebd93
 800c924:	bf66c16c 	.word	0xbf66c16c
 800c928:	5555553e 	.word	0x5555553e
 800c92c:	3fc55555 	.word	0x3fc55555
 800c930:	c2f8f359 	.word	0xc2f8f359
 800c934:	01a56e1f 	.word	0x01a56e1f
 800c938:	0003988e 	.word	0x0003988e
 800c93c:	000bb679 	.word	0x000bb679
 800c940:	0800fc78 	.word	0x0800fc78
 800c944:	0800fc98 	.word	0x0800fc98
 800c948:	0800fc88 	.word	0x0800fc88
 800c94c:	3fe00000 	.word	0x3fe00000
 800c950:	000fffff 	.word	0x000fffff
 800c954:	4090cbff 	.word	0x4090cbff
 800c958:	3f6f3400 	.word	0x3f6f3400
 800c95c:	00000000 	.word	0x00000000

0800c960 <__ieee754_rem_pio2>:
 800c960:	b570      	push	{r4, r5, r6, lr}
 800c962:	eeb0 7b40 	vmov.f64	d7, d0
 800c966:	ee17 5a90 	vmov	r5, s15
 800c96a:	4b95      	ldr	r3, [pc, #596]	; (800cbc0 <__ieee754_rem_pio2+0x260>)
 800c96c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c970:	429e      	cmp	r6, r3
 800c972:	b088      	sub	sp, #32
 800c974:	4604      	mov	r4, r0
 800c976:	dc07      	bgt.n	800c988 <__ieee754_rem_pio2+0x28>
 800c978:	2200      	movs	r2, #0
 800c97a:	2300      	movs	r3, #0
 800c97c:	ed84 0b00 	vstr	d0, [r4]
 800c980:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c984:	2000      	movs	r0, #0
 800c986:	e01b      	b.n	800c9c0 <__ieee754_rem_pio2+0x60>
 800c988:	4b8e      	ldr	r3, [pc, #568]	; (800cbc4 <__ieee754_rem_pio2+0x264>)
 800c98a:	429e      	cmp	r6, r3
 800c98c:	dc3b      	bgt.n	800ca06 <__ieee754_rem_pio2+0xa6>
 800c98e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800c992:	2d00      	cmp	r5, #0
 800c994:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800cb80 <__ieee754_rem_pio2+0x220>
 800c998:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800c99c:	dd19      	ble.n	800c9d2 <__ieee754_rem_pio2+0x72>
 800c99e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c9a2:	429e      	cmp	r6, r3
 800c9a4:	d00e      	beq.n	800c9c4 <__ieee754_rem_pio2+0x64>
 800c9a6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800cb88 <__ieee754_rem_pio2+0x228>
 800c9aa:	ee37 5b46 	vsub.f64	d5, d7, d6
 800c9ae:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c9b2:	ed84 5b00 	vstr	d5, [r4]
 800c9b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c9ba:	ed84 7b02 	vstr	d7, [r4, #8]
 800c9be:	2001      	movs	r0, #1
 800c9c0:	b008      	add	sp, #32
 800c9c2:	bd70      	pop	{r4, r5, r6, pc}
 800c9c4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800cb90 <__ieee754_rem_pio2+0x230>
 800c9c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c9cc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800cb98 <__ieee754_rem_pio2+0x238>
 800c9d0:	e7eb      	b.n	800c9aa <__ieee754_rem_pio2+0x4a>
 800c9d2:	429e      	cmp	r6, r3
 800c9d4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800c9d8:	d00e      	beq.n	800c9f8 <__ieee754_rem_pio2+0x98>
 800c9da:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800cb88 <__ieee754_rem_pio2+0x228>
 800c9de:	ee37 5b06 	vadd.f64	d5, d7, d6
 800c9e2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c9e6:	ed84 5b00 	vstr	d5, [r4]
 800c9ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f2:	ed84 7b02 	vstr	d7, [r4, #8]
 800c9f6:	e7e3      	b.n	800c9c0 <__ieee754_rem_pio2+0x60>
 800c9f8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800cb90 <__ieee754_rem_pio2+0x230>
 800c9fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ca00:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800cb98 <__ieee754_rem_pio2+0x238>
 800ca04:	e7eb      	b.n	800c9de <__ieee754_rem_pio2+0x7e>
 800ca06:	4b70      	ldr	r3, [pc, #448]	; (800cbc8 <__ieee754_rem_pio2+0x268>)
 800ca08:	429e      	cmp	r6, r3
 800ca0a:	dc6c      	bgt.n	800cae6 <__ieee754_rem_pio2+0x186>
 800ca0c:	f000 fc48 	bl	800d2a0 <fabs>
 800ca10:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ca14:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800cba0 <__ieee754_rem_pio2+0x240>
 800ca18:	eea0 7b06 	vfma.f64	d7, d0, d6
 800ca1c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ca20:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ca24:	ee17 0a90 	vmov	r0, s15
 800ca28:	eeb1 5b44 	vneg.f64	d5, d4
 800ca2c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800cb80 <__ieee754_rem_pio2+0x220>
 800ca30:	eea5 0b07 	vfma.f64	d0, d5, d7
 800ca34:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800cb88 <__ieee754_rem_pio2+0x228>
 800ca38:	281f      	cmp	r0, #31
 800ca3a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ca3e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ca42:	dc08      	bgt.n	800ca56 <__ieee754_rem_pio2+0xf6>
 800ca44:	1e42      	subs	r2, r0, #1
 800ca46:	4b61      	ldr	r3, [pc, #388]	; (800cbcc <__ieee754_rem_pio2+0x26c>)
 800ca48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca4c:	42b3      	cmp	r3, r6
 800ca4e:	d002      	beq.n	800ca56 <__ieee754_rem_pio2+0xf6>
 800ca50:	ed84 6b00 	vstr	d6, [r4]
 800ca54:	e022      	b.n	800ca9c <__ieee754_rem_pio2+0x13c>
 800ca56:	ee16 3a90 	vmov	r3, s13
 800ca5a:	1536      	asrs	r6, r6, #20
 800ca5c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ca60:	1af3      	subs	r3, r6, r3
 800ca62:	2b10      	cmp	r3, #16
 800ca64:	ddf4      	ble.n	800ca50 <__ieee754_rem_pio2+0xf0>
 800ca66:	eeb0 6b40 	vmov.f64	d6, d0
 800ca6a:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800cb90 <__ieee754_rem_pio2+0x230>
 800ca6e:	eea5 6b03 	vfma.f64	d6, d5, d3
 800ca72:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ca76:	eea5 7b03 	vfma.f64	d7, d5, d3
 800ca7a:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800cb98 <__ieee754_rem_pio2+0x238>
 800ca7e:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800ca82:	ee36 3b47 	vsub.f64	d3, d6, d7
 800ca86:	ee13 3a90 	vmov	r3, s7
 800ca8a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ca8e:	1af6      	subs	r6, r6, r3
 800ca90:	2e31      	cmp	r6, #49	; 0x31
 800ca92:	dc17      	bgt.n	800cac4 <__ieee754_rem_pio2+0x164>
 800ca94:	eeb0 0b46 	vmov.f64	d0, d6
 800ca98:	ed84 3b00 	vstr	d3, [r4]
 800ca9c:	ed94 6b00 	vldr	d6, [r4]
 800caa0:	2d00      	cmp	r5, #0
 800caa2:	ee30 0b46 	vsub.f64	d0, d0, d6
 800caa6:	ee30 7b47 	vsub.f64	d7, d0, d7
 800caaa:	ed84 7b02 	vstr	d7, [r4, #8]
 800caae:	da87      	bge.n	800c9c0 <__ieee754_rem_pio2+0x60>
 800cab0:	eeb1 6b46 	vneg.f64	d6, d6
 800cab4:	ed84 6b00 	vstr	d6, [r4]
 800cab8:	eeb1 7b47 	vneg.f64	d7, d7
 800cabc:	4240      	negs	r0, r0
 800cabe:	ed84 7b02 	vstr	d7, [r4, #8]
 800cac2:	e77d      	b.n	800c9c0 <__ieee754_rem_pio2+0x60>
 800cac4:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800cba8 <__ieee754_rem_pio2+0x248>
 800cac8:	eeb0 0b46 	vmov.f64	d0, d6
 800cacc:	eea5 0b03 	vfma.f64	d0, d5, d3
 800cad0:	ee36 7b40 	vsub.f64	d7, d6, d0
 800cad4:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800cbb0 <__ieee754_rem_pio2+0x250>
 800cad8:	eea5 7b03 	vfma.f64	d7, d5, d3
 800cadc:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800cae0:	ee30 6b47 	vsub.f64	d6, d0, d7
 800cae4:	e7b4      	b.n	800ca50 <__ieee754_rem_pio2+0xf0>
 800cae6:	4b3a      	ldr	r3, [pc, #232]	; (800cbd0 <__ieee754_rem_pio2+0x270>)
 800cae8:	429e      	cmp	r6, r3
 800caea:	dd06      	ble.n	800cafa <__ieee754_rem_pio2+0x19a>
 800caec:	ee30 7b40 	vsub.f64	d7, d0, d0
 800caf0:	ed80 7b02 	vstr	d7, [r0, #8]
 800caf4:	ed80 7b00 	vstr	d7, [r0]
 800caf8:	e744      	b.n	800c984 <__ieee754_rem_pio2+0x24>
 800cafa:	1532      	asrs	r2, r6, #20
 800cafc:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800cb00:	ee10 0a10 	vmov	r0, s0
 800cb04:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800cb08:	ec41 0b17 	vmov	d7, r0, r1
 800cb0c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800cb10:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800cbb8 <__ieee754_rem_pio2+0x258>
 800cb14:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800cb18:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cb1c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cb20:	ee27 7b05 	vmul.f64	d7, d7, d5
 800cb24:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800cb28:	a908      	add	r1, sp, #32
 800cb2a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800cb2e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cb32:	ed8d 6b04 	vstr	d6, [sp, #16]
 800cb36:	ee27 7b05 	vmul.f64	d7, d7, d5
 800cb3a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cb3e:	2303      	movs	r3, #3
 800cb40:	ed31 7b02 	vldmdb	r1!, {d7}
 800cb44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cb48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb4c:	f103 30ff 	add.w	r0, r3, #4294967295
 800cb50:	d013      	beq.n	800cb7a <__ieee754_rem_pio2+0x21a>
 800cb52:	4920      	ldr	r1, [pc, #128]	; (800cbd4 <__ieee754_rem_pio2+0x274>)
 800cb54:	9101      	str	r1, [sp, #4]
 800cb56:	2102      	movs	r1, #2
 800cb58:	9100      	str	r1, [sp, #0]
 800cb5a:	a802      	add	r0, sp, #8
 800cb5c:	4621      	mov	r1, r4
 800cb5e:	f000 f8ab 	bl	800ccb8 <__kernel_rem_pio2>
 800cb62:	2d00      	cmp	r5, #0
 800cb64:	f6bf af2c 	bge.w	800c9c0 <__ieee754_rem_pio2+0x60>
 800cb68:	ed94 7b00 	vldr	d7, [r4]
 800cb6c:	eeb1 7b47 	vneg.f64	d7, d7
 800cb70:	ed84 7b00 	vstr	d7, [r4]
 800cb74:	ed94 7b02 	vldr	d7, [r4, #8]
 800cb78:	e79e      	b.n	800cab8 <__ieee754_rem_pio2+0x158>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	e7e0      	b.n	800cb40 <__ieee754_rem_pio2+0x1e0>
 800cb7e:	bf00      	nop
 800cb80:	54400000 	.word	0x54400000
 800cb84:	3ff921fb 	.word	0x3ff921fb
 800cb88:	1a626331 	.word	0x1a626331
 800cb8c:	3dd0b461 	.word	0x3dd0b461
 800cb90:	1a600000 	.word	0x1a600000
 800cb94:	3dd0b461 	.word	0x3dd0b461
 800cb98:	2e037073 	.word	0x2e037073
 800cb9c:	3ba3198a 	.word	0x3ba3198a
 800cba0:	6dc9c883 	.word	0x6dc9c883
 800cba4:	3fe45f30 	.word	0x3fe45f30
 800cba8:	2e000000 	.word	0x2e000000
 800cbac:	3ba3198a 	.word	0x3ba3198a
 800cbb0:	252049c1 	.word	0x252049c1
 800cbb4:	397b839a 	.word	0x397b839a
 800cbb8:	00000000 	.word	0x00000000
 800cbbc:	41700000 	.word	0x41700000
 800cbc0:	3fe921fb 	.word	0x3fe921fb
 800cbc4:	4002d97b 	.word	0x4002d97b
 800cbc8:	413921fb 	.word	0x413921fb
 800cbcc:	0800fca8 	.word	0x0800fca8
 800cbd0:	7fefffff 	.word	0x7fefffff
 800cbd4:	0800fd28 	.word	0x0800fd28

0800cbd8 <__ieee754_sqrt>:
 800cbd8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800cbdc:	4770      	bx	lr
	...

0800cbe0 <__kernel_cos>:
 800cbe0:	ee10 1a90 	vmov	r1, s1
 800cbe4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800cbe8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cbec:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800cbf0:	da05      	bge.n	800cbfe <__kernel_cos+0x1e>
 800cbf2:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800cbf6:	ee16 3a90 	vmov	r3, s13
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d03d      	beq.n	800cc7a <__kernel_cos+0x9a>
 800cbfe:	ee20 4b00 	vmul.f64	d4, d0, d0
 800cc02:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800cc06:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800cc80 <__kernel_cos+0xa0>
 800cc0a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800cc0e:	ee24 6b06 	vmul.f64	d6, d4, d6
 800cc12:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800cc88 <__kernel_cos+0xa8>
 800cc16:	eea4 5b03 	vfma.f64	d5, d4, d3
 800cc1a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800cc90 <__kernel_cos+0xb0>
 800cc1e:	eea5 3b04 	vfma.f64	d3, d5, d4
 800cc22:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800cc98 <__kernel_cos+0xb8>
 800cc26:	eea3 5b04 	vfma.f64	d5, d3, d4
 800cc2a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800cca0 <__kernel_cos+0xc0>
 800cc2e:	4b20      	ldr	r3, [pc, #128]	; (800ccb0 <__kernel_cos+0xd0>)
 800cc30:	eea5 3b04 	vfma.f64	d3, d5, d4
 800cc34:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800cca8 <__kernel_cos+0xc8>
 800cc38:	4299      	cmp	r1, r3
 800cc3a:	eea3 5b04 	vfma.f64	d5, d3, d4
 800cc3e:	ee25 5b04 	vmul.f64	d5, d5, d4
 800cc42:	eea4 1b05 	vfma.f64	d1, d4, d5
 800cc46:	dc04      	bgt.n	800cc52 <__kernel_cos+0x72>
 800cc48:	ee36 6b41 	vsub.f64	d6, d6, d1
 800cc4c:	ee37 0b46 	vsub.f64	d0, d7, d6
 800cc50:	4770      	bx	lr
 800cc52:	4b18      	ldr	r3, [pc, #96]	; (800ccb4 <__kernel_cos+0xd4>)
 800cc54:	4299      	cmp	r1, r3
 800cc56:	dc0d      	bgt.n	800cc74 <__kernel_cos+0x94>
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800cc5e:	ec43 2b15 	vmov	d5, r2, r3
 800cc62:	ee37 0b45 	vsub.f64	d0, d7, d5
 800cc66:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cc6a:	ee36 6b41 	vsub.f64	d6, d6, d1
 800cc6e:	ee30 0b46 	vsub.f64	d0, d0, d6
 800cc72:	4770      	bx	lr
 800cc74:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800cc78:	e7f3      	b.n	800cc62 <__kernel_cos+0x82>
 800cc7a:	eeb0 0b47 	vmov.f64	d0, d7
 800cc7e:	4770      	bx	lr
 800cc80:	be8838d4 	.word	0xbe8838d4
 800cc84:	bda8fae9 	.word	0xbda8fae9
 800cc88:	bdb4b1c4 	.word	0xbdb4b1c4
 800cc8c:	3e21ee9e 	.word	0x3e21ee9e
 800cc90:	809c52ad 	.word	0x809c52ad
 800cc94:	be927e4f 	.word	0xbe927e4f
 800cc98:	19cb1590 	.word	0x19cb1590
 800cc9c:	3efa01a0 	.word	0x3efa01a0
 800cca0:	16c15177 	.word	0x16c15177
 800cca4:	bf56c16c 	.word	0xbf56c16c
 800cca8:	5555554c 	.word	0x5555554c
 800ccac:	3fa55555 	.word	0x3fa55555
 800ccb0:	3fd33332 	.word	0x3fd33332
 800ccb4:	3fe90000 	.word	0x3fe90000

0800ccb8 <__kernel_rem_pio2>:
 800ccb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccbc:	ed2d 8b06 	vpush	{d8-d10}
 800ccc0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800ccc4:	469b      	mov	fp, r3
 800ccc6:	460e      	mov	r6, r1
 800ccc8:	4bc7      	ldr	r3, [pc, #796]	; (800cfe8 <__kernel_rem_pio2+0x330>)
 800ccca:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800cccc:	9002      	str	r0, [sp, #8]
 800ccce:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800ccd2:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800ccd4:	1ed1      	subs	r1, r2, #3
 800ccd6:	2318      	movs	r3, #24
 800ccd8:	f06f 0417 	mvn.w	r4, #23
 800ccdc:	fb91 f1f3 	sdiv	r1, r1, r3
 800cce0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800cce4:	f10b 3aff 	add.w	sl, fp, #4294967295
 800cce8:	fb01 4404 	mla	r4, r1, r4, r4
 800ccec:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800cfd0 <__kernel_rem_pio2+0x318>
 800ccf0:	4414      	add	r4, r2
 800ccf2:	eba1 050a 	sub.w	r5, r1, sl
 800ccf6:	aa1a      	add	r2, sp, #104	; 0x68
 800ccf8:	eb09 070a 	add.w	r7, r9, sl
 800ccfc:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800cd00:	4696      	mov	lr, r2
 800cd02:	2300      	movs	r3, #0
 800cd04:	42bb      	cmp	r3, r7
 800cd06:	dd0f      	ble.n	800cd28 <__kernel_rem_pio2+0x70>
 800cd08:	af6a      	add	r7, sp, #424	; 0x1a8
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	454a      	cmp	r2, r9
 800cd0e:	dc28      	bgt.n	800cd62 <__kernel_rem_pio2+0xaa>
 800cd10:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800cd14:	eb0b 0302 	add.w	r3, fp, r2
 800cd18:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800cd1c:	9d02      	ldr	r5, [sp, #8]
 800cd1e:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800cfd0 <__kernel_rem_pio2+0x318>
 800cd22:	f04f 0c00 	mov.w	ip, #0
 800cd26:	e016      	b.n	800cd56 <__kernel_rem_pio2+0x9e>
 800cd28:	42dd      	cmn	r5, r3
 800cd2a:	d409      	bmi.n	800cd40 <__kernel_rem_pio2+0x88>
 800cd2c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800cd30:	ee07 2a90 	vmov	s15, r2
 800cd34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cd38:	ecae 7b02 	vstmia	lr!, {d7}
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	e7e1      	b.n	800cd04 <__kernel_rem_pio2+0x4c>
 800cd40:	eeb0 7b46 	vmov.f64	d7, d6
 800cd44:	e7f8      	b.n	800cd38 <__kernel_rem_pio2+0x80>
 800cd46:	ecb5 5b02 	vldmia	r5!, {d5}
 800cd4a:	ed33 6b02 	vldmdb	r3!, {d6}
 800cd4e:	f10c 0c01 	add.w	ip, ip, #1
 800cd52:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cd56:	45d4      	cmp	ip, sl
 800cd58:	ddf5      	ble.n	800cd46 <__kernel_rem_pio2+0x8e>
 800cd5a:	eca7 7b02 	vstmia	r7!, {d7}
 800cd5e:	3201      	adds	r2, #1
 800cd60:	e7d4      	b.n	800cd0c <__kernel_rem_pio2+0x54>
 800cd62:	ab06      	add	r3, sp, #24
 800cd64:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800cd68:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800cfd8 <__kernel_rem_pio2+0x320>
 800cd6c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800cfe0 <__kernel_rem_pio2+0x328>
 800cd70:	9304      	str	r3, [sp, #16]
 800cd72:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800cd76:	9303      	str	r3, [sp, #12]
 800cd78:	464d      	mov	r5, r9
 800cd7a:	ab92      	add	r3, sp, #584	; 0x248
 800cd7c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800cd80:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cd84:	3f01      	subs	r7, #1
 800cd86:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800cd8a:	00ff      	lsls	r7, r7, #3
 800cd8c:	ab92      	add	r3, sp, #584	; 0x248
 800cd8e:	19da      	adds	r2, r3, r7
 800cd90:	3a98      	subs	r2, #152	; 0x98
 800cd92:	2300      	movs	r3, #0
 800cd94:	1ae9      	subs	r1, r5, r3
 800cd96:	2900      	cmp	r1, #0
 800cd98:	dc4e      	bgt.n	800ce38 <__kernel_rem_pio2+0x180>
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f000 fba4 	bl	800d4e8 <scalbn>
 800cda0:	eeb0 8b40 	vmov.f64	d8, d0
 800cda4:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800cda8:	ee28 0b00 	vmul.f64	d0, d8, d0
 800cdac:	f000 fa8c 	bl	800d2c8 <floor>
 800cdb0:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800cdb4:	eea0 8b47 	vfms.f64	d8, d0, d7
 800cdb8:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800cdbc:	2c00      	cmp	r4, #0
 800cdbe:	edcd 7a01 	vstr	s15, [sp, #4]
 800cdc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cdc6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800cdca:	dd4a      	ble.n	800ce62 <__kernel_rem_pio2+0x1aa>
 800cdcc:	1e69      	subs	r1, r5, #1
 800cdce:	ab06      	add	r3, sp, #24
 800cdd0:	f1c4 0018 	rsb	r0, r4, #24
 800cdd4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800cdd8:	9a01      	ldr	r2, [sp, #4]
 800cdda:	fa4c f300 	asr.w	r3, ip, r0
 800cdde:	441a      	add	r2, r3
 800cde0:	4083      	lsls	r3, r0
 800cde2:	9201      	str	r2, [sp, #4]
 800cde4:	ebac 0203 	sub.w	r2, ip, r3
 800cde8:	ab06      	add	r3, sp, #24
 800cdea:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800cdee:	f1c4 0317 	rsb	r3, r4, #23
 800cdf2:	fa42 f803 	asr.w	r8, r2, r3
 800cdf6:	f1b8 0f00 	cmp.w	r8, #0
 800cdfa:	dd43      	ble.n	800ce84 <__kernel_rem_pio2+0x1cc>
 800cdfc:	9b01      	ldr	r3, [sp, #4]
 800cdfe:	2000      	movs	r0, #0
 800ce00:	3301      	adds	r3, #1
 800ce02:	9301      	str	r3, [sp, #4]
 800ce04:	4601      	mov	r1, r0
 800ce06:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800ce0a:	4285      	cmp	r5, r0
 800ce0c:	dc6e      	bgt.n	800ceec <__kernel_rem_pio2+0x234>
 800ce0e:	2c00      	cmp	r4, #0
 800ce10:	dd04      	ble.n	800ce1c <__kernel_rem_pio2+0x164>
 800ce12:	2c01      	cmp	r4, #1
 800ce14:	d07f      	beq.n	800cf16 <__kernel_rem_pio2+0x25e>
 800ce16:	2c02      	cmp	r4, #2
 800ce18:	f000 8087 	beq.w	800cf2a <__kernel_rem_pio2+0x272>
 800ce1c:	f1b8 0f02 	cmp.w	r8, #2
 800ce20:	d130      	bne.n	800ce84 <__kernel_rem_pio2+0x1cc>
 800ce22:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ce26:	ee30 8b48 	vsub.f64	d8, d0, d8
 800ce2a:	b359      	cbz	r1, 800ce84 <__kernel_rem_pio2+0x1cc>
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f000 fb5b 	bl	800d4e8 <scalbn>
 800ce32:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ce36:	e025      	b.n	800ce84 <__kernel_rem_pio2+0x1cc>
 800ce38:	ee20 7b09 	vmul.f64	d7, d0, d9
 800ce3c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ce40:	a806      	add	r0, sp, #24
 800ce42:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800ce46:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800ce4a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ce4e:	ee10 1a10 	vmov	r1, s0
 800ce52:	ed32 0b02 	vldmdb	r2!, {d0}
 800ce56:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800ce5a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800ce5e:	3301      	adds	r3, #1
 800ce60:	e798      	b.n	800cd94 <__kernel_rem_pio2+0xdc>
 800ce62:	d106      	bne.n	800ce72 <__kernel_rem_pio2+0x1ba>
 800ce64:	1e6b      	subs	r3, r5, #1
 800ce66:	aa06      	add	r2, sp, #24
 800ce68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ce6c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800ce70:	e7c1      	b.n	800cdf6 <__kernel_rem_pio2+0x13e>
 800ce72:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ce76:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ce7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce7e:	da32      	bge.n	800cee6 <__kernel_rem_pio2+0x22e>
 800ce80:	f04f 0800 	mov.w	r8, #0
 800ce84:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ce88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce8c:	f040 80b0 	bne.w	800cff0 <__kernel_rem_pio2+0x338>
 800ce90:	1e6b      	subs	r3, r5, #1
 800ce92:	4618      	mov	r0, r3
 800ce94:	2200      	movs	r2, #0
 800ce96:	4548      	cmp	r0, r9
 800ce98:	da4e      	bge.n	800cf38 <__kernel_rem_pio2+0x280>
 800ce9a:	2a00      	cmp	r2, #0
 800ce9c:	f000 8088 	beq.w	800cfb0 <__kernel_rem_pio2+0x2f8>
 800cea0:	aa06      	add	r2, sp, #24
 800cea2:	3c18      	subs	r4, #24
 800cea4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cea8:	2900      	cmp	r1, #0
 800ceaa:	f000 808e 	beq.w	800cfca <__kernel_rem_pio2+0x312>
 800ceae:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	9302      	str	r3, [sp, #8]
 800ceb6:	f000 fb17 	bl	800d4e8 <scalbn>
 800ceba:	9b02      	ldr	r3, [sp, #8]
 800cebc:	aa6a      	add	r2, sp, #424	; 0x1a8
 800cebe:	00d9      	lsls	r1, r3, #3
 800cec0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800cfd8 <__kernel_rem_pio2+0x320>
 800cec4:	1850      	adds	r0, r2, r1
 800cec6:	f100 0508 	add.w	r5, r0, #8
 800ceca:	461c      	mov	r4, r3
 800cecc:	2c00      	cmp	r4, #0
 800cece:	f280 80bd 	bge.w	800d04c <__kernel_rem_pio2+0x394>
 800ced2:	2500      	movs	r5, #0
 800ced4:	1b5c      	subs	r4, r3, r5
 800ced6:	2c00      	cmp	r4, #0
 800ced8:	f2c0 80dd 	blt.w	800d096 <__kernel_rem_pio2+0x3de>
 800cedc:	4f43      	ldr	r7, [pc, #268]	; (800cfec <__kernel_rem_pio2+0x334>)
 800cede:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800cfd0 <__kernel_rem_pio2+0x318>
 800cee2:	2400      	movs	r4, #0
 800cee4:	e0cb      	b.n	800d07e <__kernel_rem_pio2+0x3c6>
 800cee6:	f04f 0802 	mov.w	r8, #2
 800ceea:	e787      	b.n	800cdfc <__kernel_rem_pio2+0x144>
 800ceec:	ab06      	add	r3, sp, #24
 800ceee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cef2:	b949      	cbnz	r1, 800cf08 <__kernel_rem_pio2+0x250>
 800cef4:	b12b      	cbz	r3, 800cf02 <__kernel_rem_pio2+0x24a>
 800cef6:	aa06      	add	r2, sp, #24
 800cef8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cefc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800cf00:	2301      	movs	r3, #1
 800cf02:	3001      	adds	r0, #1
 800cf04:	4619      	mov	r1, r3
 800cf06:	e780      	b.n	800ce0a <__kernel_rem_pio2+0x152>
 800cf08:	aa06      	add	r2, sp, #24
 800cf0a:	ebac 0303 	sub.w	r3, ip, r3
 800cf0e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800cf12:	460b      	mov	r3, r1
 800cf14:	e7f5      	b.n	800cf02 <__kernel_rem_pio2+0x24a>
 800cf16:	1e68      	subs	r0, r5, #1
 800cf18:	ab06      	add	r3, sp, #24
 800cf1a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cf1e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cf22:	aa06      	add	r2, sp, #24
 800cf24:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800cf28:	e778      	b.n	800ce1c <__kernel_rem_pio2+0x164>
 800cf2a:	1e68      	subs	r0, r5, #1
 800cf2c:	ab06      	add	r3, sp, #24
 800cf2e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cf32:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cf36:	e7f4      	b.n	800cf22 <__kernel_rem_pio2+0x26a>
 800cf38:	a906      	add	r1, sp, #24
 800cf3a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800cf3e:	3801      	subs	r0, #1
 800cf40:	430a      	orrs	r2, r1
 800cf42:	e7a8      	b.n	800ce96 <__kernel_rem_pio2+0x1de>
 800cf44:	f10c 0c01 	add.w	ip, ip, #1
 800cf48:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cf4c:	2a00      	cmp	r2, #0
 800cf4e:	d0f9      	beq.n	800cf44 <__kernel_rem_pio2+0x28c>
 800cf50:	eb0b 0305 	add.w	r3, fp, r5
 800cf54:	aa1a      	add	r2, sp, #104	; 0x68
 800cf56:	00db      	lsls	r3, r3, #3
 800cf58:	1898      	adds	r0, r3, r2
 800cf5a:	3008      	adds	r0, #8
 800cf5c:	1c69      	adds	r1, r5, #1
 800cf5e:	3708      	adds	r7, #8
 800cf60:	2200      	movs	r2, #0
 800cf62:	4465      	add	r5, ip
 800cf64:	9005      	str	r0, [sp, #20]
 800cf66:	428d      	cmp	r5, r1
 800cf68:	f6ff af07 	blt.w	800cd7a <__kernel_rem_pio2+0xc2>
 800cf6c:	a81a      	add	r0, sp, #104	; 0x68
 800cf6e:	eb02 0c03 	add.w	ip, r2, r3
 800cf72:	4484      	add	ip, r0
 800cf74:	9803      	ldr	r0, [sp, #12]
 800cf76:	f8dd e008 	ldr.w	lr, [sp, #8]
 800cf7a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800cf7e:	9001      	str	r0, [sp, #4]
 800cf80:	ee07 0a90 	vmov	s15, r0
 800cf84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cf88:	9805      	ldr	r0, [sp, #20]
 800cf8a:	ed8c 7b00 	vstr	d7, [ip]
 800cf8e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800cfd0 <__kernel_rem_pio2+0x318>
 800cf92:	eb00 0802 	add.w	r8, r0, r2
 800cf96:	f04f 0c00 	mov.w	ip, #0
 800cf9a:	45d4      	cmp	ip, sl
 800cf9c:	dd0c      	ble.n	800cfb8 <__kernel_rem_pio2+0x300>
 800cf9e:	eb02 0c07 	add.w	ip, r2, r7
 800cfa2:	a86a      	add	r0, sp, #424	; 0x1a8
 800cfa4:	4484      	add	ip, r0
 800cfa6:	ed8c 7b02 	vstr	d7, [ip, #8]
 800cfaa:	3101      	adds	r1, #1
 800cfac:	3208      	adds	r2, #8
 800cfae:	e7da      	b.n	800cf66 <__kernel_rem_pio2+0x2ae>
 800cfb0:	9b04      	ldr	r3, [sp, #16]
 800cfb2:	f04f 0c01 	mov.w	ip, #1
 800cfb6:	e7c7      	b.n	800cf48 <__kernel_rem_pio2+0x290>
 800cfb8:	ecbe 5b02 	vldmia	lr!, {d5}
 800cfbc:	ed38 6b02 	vldmdb	r8!, {d6}
 800cfc0:	f10c 0c01 	add.w	ip, ip, #1
 800cfc4:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cfc8:	e7e7      	b.n	800cf9a <__kernel_rem_pio2+0x2e2>
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	e768      	b.n	800cea0 <__kernel_rem_pio2+0x1e8>
 800cfce:	bf00      	nop
	...
 800cfdc:	3e700000 	.word	0x3e700000
 800cfe0:	00000000 	.word	0x00000000
 800cfe4:	41700000 	.word	0x41700000
 800cfe8:	0800fe70 	.word	0x0800fe70
 800cfec:	0800fe30 	.word	0x0800fe30
 800cff0:	4260      	negs	r0, r4
 800cff2:	eeb0 0b48 	vmov.f64	d0, d8
 800cff6:	f000 fa77 	bl	800d4e8 <scalbn>
 800cffa:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800d1d8 <__kernel_rem_pio2+0x520>
 800cffe:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800d002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d006:	db18      	blt.n	800d03a <__kernel_rem_pio2+0x382>
 800d008:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800d1e0 <__kernel_rem_pio2+0x528>
 800d00c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d010:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d014:	aa06      	add	r2, sp, #24
 800d016:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800d01a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800d01e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d022:	a906      	add	r1, sp, #24
 800d024:	ee10 3a10 	vmov	r3, s0
 800d028:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d02c:	1c6b      	adds	r3, r5, #1
 800d02e:	ee17 2a10 	vmov	r2, s14
 800d032:	3418      	adds	r4, #24
 800d034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d038:	e739      	b.n	800ceae <__kernel_rem_pio2+0x1f6>
 800d03a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d03e:	aa06      	add	r2, sp, #24
 800d040:	ee10 3a10 	vmov	r3, s0
 800d044:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d048:	462b      	mov	r3, r5
 800d04a:	e730      	b.n	800ceae <__kernel_rem_pio2+0x1f6>
 800d04c:	aa06      	add	r2, sp, #24
 800d04e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800d052:	9202      	str	r2, [sp, #8]
 800d054:	ee07 2a90 	vmov	s15, r2
 800d058:	3c01      	subs	r4, #1
 800d05a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d05e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800d062:	ee20 0b06 	vmul.f64	d0, d0, d6
 800d066:	ed25 7b02 	vstmdb	r5!, {d7}
 800d06a:	e72f      	b.n	800cecc <__kernel_rem_pio2+0x214>
 800d06c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800d070:	ecb7 5b02 	vldmia	r7!, {d5}
 800d074:	ed9c 6b00 	vldr	d6, [ip]
 800d078:	3401      	adds	r4, #1
 800d07a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d07e:	454c      	cmp	r4, r9
 800d080:	dc01      	bgt.n	800d086 <__kernel_rem_pio2+0x3ce>
 800d082:	42a5      	cmp	r5, r4
 800d084:	daf2      	bge.n	800d06c <__kernel_rem_pio2+0x3b4>
 800d086:	aa42      	add	r2, sp, #264	; 0x108
 800d088:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800d08c:	ed84 7b00 	vstr	d7, [r4]
 800d090:	3501      	adds	r5, #1
 800d092:	3808      	subs	r0, #8
 800d094:	e71e      	b.n	800ced4 <__kernel_rem_pio2+0x21c>
 800d096:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800d098:	2a03      	cmp	r2, #3
 800d09a:	d84e      	bhi.n	800d13a <__kernel_rem_pio2+0x482>
 800d09c:	e8df f002 	tbb	[pc, r2]
 800d0a0:	021f1f3e 	.word	0x021f1f3e
 800d0a4:	3108      	adds	r1, #8
 800d0a6:	aa42      	add	r2, sp, #264	; 0x108
 800d0a8:	4411      	add	r1, r2
 800d0aa:	4608      	mov	r0, r1
 800d0ac:	461c      	mov	r4, r3
 800d0ae:	2c00      	cmp	r4, #0
 800d0b0:	dc61      	bgt.n	800d176 <__kernel_rem_pio2+0x4be>
 800d0b2:	4608      	mov	r0, r1
 800d0b4:	461c      	mov	r4, r3
 800d0b6:	2c01      	cmp	r4, #1
 800d0b8:	dc6d      	bgt.n	800d196 <__kernel_rem_pio2+0x4de>
 800d0ba:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800d1e8 <__kernel_rem_pio2+0x530>
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	dc79      	bgt.n	800d1b6 <__kernel_rem_pio2+0x4fe>
 800d0c2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800d0c6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800d0ca:	f1b8 0f00 	cmp.w	r8, #0
 800d0ce:	d178      	bne.n	800d1c2 <__kernel_rem_pio2+0x50a>
 800d0d0:	ed86 5b00 	vstr	d5, [r6]
 800d0d4:	ed86 6b02 	vstr	d6, [r6, #8]
 800d0d8:	ed86 7b04 	vstr	d7, [r6, #16]
 800d0dc:	e02d      	b.n	800d13a <__kernel_rem_pio2+0x482>
 800d0de:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800d1e8 <__kernel_rem_pio2+0x530>
 800d0e2:	3108      	adds	r1, #8
 800d0e4:	aa42      	add	r2, sp, #264	; 0x108
 800d0e6:	4411      	add	r1, r2
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	da34      	bge.n	800d158 <__kernel_rem_pio2+0x4a0>
 800d0ee:	f1b8 0f00 	cmp.w	r8, #0
 800d0f2:	d037      	beq.n	800d164 <__kernel_rem_pio2+0x4ac>
 800d0f4:	eeb1 7b46 	vneg.f64	d7, d6
 800d0f8:	ed86 7b00 	vstr	d7, [r6]
 800d0fc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800d100:	a844      	add	r0, sp, #272	; 0x110
 800d102:	2101      	movs	r1, #1
 800d104:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d108:	428b      	cmp	r3, r1
 800d10a:	da2e      	bge.n	800d16a <__kernel_rem_pio2+0x4b2>
 800d10c:	f1b8 0f00 	cmp.w	r8, #0
 800d110:	d001      	beq.n	800d116 <__kernel_rem_pio2+0x45e>
 800d112:	eeb1 7b47 	vneg.f64	d7, d7
 800d116:	ed86 7b02 	vstr	d7, [r6, #8]
 800d11a:	e00e      	b.n	800d13a <__kernel_rem_pio2+0x482>
 800d11c:	aa92      	add	r2, sp, #584	; 0x248
 800d11e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800d1e8 <__kernel_rem_pio2+0x530>
 800d122:	4411      	add	r1, r2
 800d124:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800d128:	2b00      	cmp	r3, #0
 800d12a:	da0f      	bge.n	800d14c <__kernel_rem_pio2+0x494>
 800d12c:	f1b8 0f00 	cmp.w	r8, #0
 800d130:	d001      	beq.n	800d136 <__kernel_rem_pio2+0x47e>
 800d132:	eeb1 7b47 	vneg.f64	d7, d7
 800d136:	ed86 7b00 	vstr	d7, [r6]
 800d13a:	9b01      	ldr	r3, [sp, #4]
 800d13c:	f003 0007 	and.w	r0, r3, #7
 800d140:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800d144:	ecbd 8b06 	vpop	{d8-d10}
 800d148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d14c:	ed31 6b02 	vldmdb	r1!, {d6}
 800d150:	3b01      	subs	r3, #1
 800d152:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d156:	e7e7      	b.n	800d128 <__kernel_rem_pio2+0x470>
 800d158:	ed31 7b02 	vldmdb	r1!, {d7}
 800d15c:	3801      	subs	r0, #1
 800d15e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d162:	e7c2      	b.n	800d0ea <__kernel_rem_pio2+0x432>
 800d164:	eeb0 7b46 	vmov.f64	d7, d6
 800d168:	e7c6      	b.n	800d0f8 <__kernel_rem_pio2+0x440>
 800d16a:	ecb0 6b02 	vldmia	r0!, {d6}
 800d16e:	3101      	adds	r1, #1
 800d170:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d174:	e7c8      	b.n	800d108 <__kernel_rem_pio2+0x450>
 800d176:	ed10 7b04 	vldr	d7, [r0, #-16]
 800d17a:	ed30 5b02 	vldmdb	r0!, {d5}
 800d17e:	3c01      	subs	r4, #1
 800d180:	ee37 6b05 	vadd.f64	d6, d7, d5
 800d184:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d188:	ed00 6b02 	vstr	d6, [r0, #-8]
 800d18c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d190:	ed80 7b00 	vstr	d7, [r0]
 800d194:	e78b      	b.n	800d0ae <__kernel_rem_pio2+0x3f6>
 800d196:	ed10 7b04 	vldr	d7, [r0, #-16]
 800d19a:	ed30 5b02 	vldmdb	r0!, {d5}
 800d19e:	3c01      	subs	r4, #1
 800d1a0:	ee37 6b05 	vadd.f64	d6, d7, d5
 800d1a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d1a8:	ed00 6b02 	vstr	d6, [r0, #-8]
 800d1ac:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d1b0:	ed80 7b00 	vstr	d7, [r0]
 800d1b4:	e77f      	b.n	800d0b6 <__kernel_rem_pio2+0x3fe>
 800d1b6:	ed31 6b02 	vldmdb	r1!, {d6}
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d1c0:	e77d      	b.n	800d0be <__kernel_rem_pio2+0x406>
 800d1c2:	eeb1 5b45 	vneg.f64	d5, d5
 800d1c6:	eeb1 6b46 	vneg.f64	d6, d6
 800d1ca:	ed86 5b00 	vstr	d5, [r6]
 800d1ce:	eeb1 7b47 	vneg.f64	d7, d7
 800d1d2:	ed86 6b02 	vstr	d6, [r6, #8]
 800d1d6:	e77f      	b.n	800d0d8 <__kernel_rem_pio2+0x420>
 800d1d8:	00000000 	.word	0x00000000
 800d1dc:	41700000 	.word	0x41700000
 800d1e0:	00000000 	.word	0x00000000
 800d1e4:	3e700000 	.word	0x3e700000
	...

0800d1f0 <__kernel_sin>:
 800d1f0:	ee10 3a90 	vmov	r3, s1
 800d1f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d1f8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d1fc:	da04      	bge.n	800d208 <__kernel_sin+0x18>
 800d1fe:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800d202:	ee17 3a90 	vmov	r3, s15
 800d206:	b35b      	cbz	r3, 800d260 <__kernel_sin+0x70>
 800d208:	ee20 6b00 	vmul.f64	d6, d0, d0
 800d20c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800d210:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800d268 <__kernel_sin+0x78>
 800d214:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800d270 <__kernel_sin+0x80>
 800d218:	eea6 4b07 	vfma.f64	d4, d6, d7
 800d21c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800d278 <__kernel_sin+0x88>
 800d220:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d224:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800d280 <__kernel_sin+0x90>
 800d228:	eea7 4b06 	vfma.f64	d4, d7, d6
 800d22c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800d288 <__kernel_sin+0x98>
 800d230:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d234:	b930      	cbnz	r0, 800d244 <__kernel_sin+0x54>
 800d236:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800d290 <__kernel_sin+0xa0>
 800d23a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800d23e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800d242:	4770      	bx	lr
 800d244:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800d248:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800d24c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800d250:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800d254:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800d298 <__kernel_sin+0xa8>
 800d258:	eea5 1b07 	vfma.f64	d1, d5, d7
 800d25c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	f3af 8000 	nop.w
 800d268:	5acfd57c 	.word	0x5acfd57c
 800d26c:	3de5d93a 	.word	0x3de5d93a
 800d270:	8a2b9ceb 	.word	0x8a2b9ceb
 800d274:	be5ae5e6 	.word	0xbe5ae5e6
 800d278:	57b1fe7d 	.word	0x57b1fe7d
 800d27c:	3ec71de3 	.word	0x3ec71de3
 800d280:	19c161d5 	.word	0x19c161d5
 800d284:	bf2a01a0 	.word	0xbf2a01a0
 800d288:	1110f8a6 	.word	0x1110f8a6
 800d28c:	3f811111 	.word	0x3f811111
 800d290:	55555549 	.word	0x55555549
 800d294:	bfc55555 	.word	0xbfc55555
 800d298:	55555549 	.word	0x55555549
 800d29c:	3fc55555 	.word	0x3fc55555

0800d2a0 <fabs>:
 800d2a0:	ec51 0b10 	vmov	r0, r1, d0
 800d2a4:	ee10 2a10 	vmov	r2, s0
 800d2a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d2ac:	ec43 2b10 	vmov	d0, r2, r3
 800d2b0:	4770      	bx	lr

0800d2b2 <finite>:
 800d2b2:	ee10 3a90 	vmov	r3, s1
 800d2b6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800d2ba:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d2be:	0fc0      	lsrs	r0, r0, #31
 800d2c0:	4770      	bx	lr
 800d2c2:	0000      	movs	r0, r0
 800d2c4:	0000      	movs	r0, r0
	...

0800d2c8 <floor>:
 800d2c8:	ee10 1a90 	vmov	r1, s1
 800d2cc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d2d0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800d2d4:	2b13      	cmp	r3, #19
 800d2d6:	b530      	push	{r4, r5, lr}
 800d2d8:	ee10 0a10 	vmov	r0, s0
 800d2dc:	ee10 5a10 	vmov	r5, s0
 800d2e0:	dc33      	bgt.n	800d34a <floor+0x82>
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	da17      	bge.n	800d316 <floor+0x4e>
 800d2e6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800d3a8 <floor+0xe0>
 800d2ea:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d2ee:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2f6:	dd09      	ble.n	800d30c <floor+0x44>
 800d2f8:	2900      	cmp	r1, #0
 800d2fa:	da50      	bge.n	800d39e <floor+0xd6>
 800d2fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d300:	4a2b      	ldr	r2, [pc, #172]	; (800d3b0 <floor+0xe8>)
 800d302:	4303      	orrs	r3, r0
 800d304:	2000      	movs	r0, #0
 800d306:	4283      	cmp	r3, r0
 800d308:	bf18      	it	ne
 800d30a:	4611      	movne	r1, r2
 800d30c:	460b      	mov	r3, r1
 800d30e:	4602      	mov	r2, r0
 800d310:	ec43 2b10 	vmov	d0, r2, r3
 800d314:	e020      	b.n	800d358 <floor+0x90>
 800d316:	4a27      	ldr	r2, [pc, #156]	; (800d3b4 <floor+0xec>)
 800d318:	411a      	asrs	r2, r3
 800d31a:	ea01 0402 	and.w	r4, r1, r2
 800d31e:	4304      	orrs	r4, r0
 800d320:	d01a      	beq.n	800d358 <floor+0x90>
 800d322:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800d3a8 <floor+0xe0>
 800d326:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d32a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d332:	ddeb      	ble.n	800d30c <floor+0x44>
 800d334:	2900      	cmp	r1, #0
 800d336:	bfbe      	ittt	lt
 800d338:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800d33c:	fa40 f303 	asrlt.w	r3, r0, r3
 800d340:	18c9      	addlt	r1, r1, r3
 800d342:	ea21 0102 	bic.w	r1, r1, r2
 800d346:	2000      	movs	r0, #0
 800d348:	e7e0      	b.n	800d30c <floor+0x44>
 800d34a:	2b33      	cmp	r3, #51	; 0x33
 800d34c:	dd05      	ble.n	800d35a <floor+0x92>
 800d34e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d352:	d101      	bne.n	800d358 <floor+0x90>
 800d354:	ee30 0b00 	vadd.f64	d0, d0, d0
 800d358:	bd30      	pop	{r4, r5, pc}
 800d35a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800d35e:	f04f 32ff 	mov.w	r2, #4294967295
 800d362:	40e2      	lsrs	r2, r4
 800d364:	4202      	tst	r2, r0
 800d366:	d0f7      	beq.n	800d358 <floor+0x90>
 800d368:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800d3a8 <floor+0xe0>
 800d36c:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d370:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d378:	ddc8      	ble.n	800d30c <floor+0x44>
 800d37a:	2900      	cmp	r1, #0
 800d37c:	da02      	bge.n	800d384 <floor+0xbc>
 800d37e:	2b14      	cmp	r3, #20
 800d380:	d103      	bne.n	800d38a <floor+0xc2>
 800d382:	3101      	adds	r1, #1
 800d384:	ea20 0002 	bic.w	r0, r0, r2
 800d388:	e7c0      	b.n	800d30c <floor+0x44>
 800d38a:	2401      	movs	r4, #1
 800d38c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d390:	fa04 f303 	lsl.w	r3, r4, r3
 800d394:	4418      	add	r0, r3
 800d396:	42a8      	cmp	r0, r5
 800d398:	bf38      	it	cc
 800d39a:	1909      	addcc	r1, r1, r4
 800d39c:	e7f2      	b.n	800d384 <floor+0xbc>
 800d39e:	2000      	movs	r0, #0
 800d3a0:	4601      	mov	r1, r0
 800d3a2:	e7b3      	b.n	800d30c <floor+0x44>
 800d3a4:	f3af 8000 	nop.w
 800d3a8:	8800759c 	.word	0x8800759c
 800d3ac:	7e37e43c 	.word	0x7e37e43c
 800d3b0:	bff00000 	.word	0xbff00000
 800d3b4:	000fffff 	.word	0x000fffff

0800d3b8 <matherr>:
 800d3b8:	2000      	movs	r0, #0
 800d3ba:	4770      	bx	lr
 800d3bc:	0000      	movs	r0, r0
	...

0800d3c0 <nan>:
 800d3c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d3c8 <nan+0x8>
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop
 800d3c8:	00000000 	.word	0x00000000
 800d3cc:	7ff80000 	.word	0x7ff80000

0800d3d0 <rint>:
 800d3d0:	b530      	push	{r4, r5, lr}
 800d3d2:	b085      	sub	sp, #20
 800d3d4:	ed8d 0b00 	vstr	d0, [sp]
 800d3d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3dc:	f3c3 510a 	ubfx	r1, r3, #20, #11
 800d3e0:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 800d3e4:	2813      	cmp	r0, #19
 800d3e6:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 800d3ea:	dc5a      	bgt.n	800d4a2 <rint+0xd2>
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	da2f      	bge.n	800d450 <rint+0x80>
 800d3f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d3f4:	4311      	orrs	r1, r2
 800d3f6:	d027      	beq.n	800d448 <rint+0x78>
 800d3f8:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800d3fc:	4315      	orrs	r5, r2
 800d3fe:	426a      	negs	r2, r5
 800d400:	432a      	orrs	r2, r5
 800d402:	0b12      	lsrs	r2, r2, #12
 800d404:	0c5b      	lsrs	r3, r3, #17
 800d406:	045b      	lsls	r3, r3, #17
 800d408:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800d40c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d410:	ea42 0103 	orr.w	r1, r2, r3
 800d414:	4b31      	ldr	r3, [pc, #196]	; (800d4dc <rint+0x10c>)
 800d416:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d41a:	ed93 6b00 	vldr	d6, [r3]
 800d41e:	ec41 0b17 	vmov	d7, r0, r1
 800d422:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d426:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d42a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d42e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d432:	ed8d 7b00 	vstr	d7, [sp]
 800d436:	9b01      	ldr	r3, [sp, #4]
 800d438:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d43c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d440:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 800d444:	e9cd 0100 	strd	r0, r1, [sp]
 800d448:	ed9d 0b00 	vldr	d0, [sp]
 800d44c:	b005      	add	sp, #20
 800d44e:	bd30      	pop	{r4, r5, pc}
 800d450:	4923      	ldr	r1, [pc, #140]	; (800d4e0 <rint+0x110>)
 800d452:	4101      	asrs	r1, r0
 800d454:	ea03 0501 	and.w	r5, r3, r1
 800d458:	4315      	orrs	r5, r2
 800d45a:	d0f5      	beq.n	800d448 <rint+0x78>
 800d45c:	0849      	lsrs	r1, r1, #1
 800d45e:	ea03 0501 	and.w	r5, r3, r1
 800d462:	432a      	orrs	r2, r5
 800d464:	d00b      	beq.n	800d47e <rint+0xae>
 800d466:	ea23 0101 	bic.w	r1, r3, r1
 800d46a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d46e:	2813      	cmp	r0, #19
 800d470:	fa43 f300 	asr.w	r3, r3, r0
 800d474:	bf0c      	ite	eq
 800d476:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800d47a:	2200      	movne	r2, #0
 800d47c:	430b      	orrs	r3, r1
 800d47e:	4619      	mov	r1, r3
 800d480:	4b16      	ldr	r3, [pc, #88]	; (800d4dc <rint+0x10c>)
 800d482:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d486:	ed94 6b00 	vldr	d6, [r4]
 800d48a:	4610      	mov	r0, r2
 800d48c:	ec41 0b17 	vmov	d7, r0, r1
 800d490:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d494:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d498:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d49c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d4a0:	e008      	b.n	800d4b4 <rint+0xe4>
 800d4a2:	2833      	cmp	r0, #51	; 0x33
 800d4a4:	dd09      	ble.n	800d4ba <rint+0xea>
 800d4a6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800d4aa:	d1cd      	bne.n	800d448 <rint+0x78>
 800d4ac:	ed9d 7b00 	vldr	d7, [sp]
 800d4b0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d4b4:	ed8d 7b00 	vstr	d7, [sp]
 800d4b8:	e7c6      	b.n	800d448 <rint+0x78>
 800d4ba:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 800d4be:	f04f 31ff 	mov.w	r1, #4294967295
 800d4c2:	40c1      	lsrs	r1, r0
 800d4c4:	420a      	tst	r2, r1
 800d4c6:	d0bf      	beq.n	800d448 <rint+0x78>
 800d4c8:	0849      	lsrs	r1, r1, #1
 800d4ca:	420a      	tst	r2, r1
 800d4cc:	bf1f      	itttt	ne
 800d4ce:	ea22 0101 	bicne.w	r1, r2, r1
 800d4d2:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800d4d6:	4102      	asrne	r2, r0
 800d4d8:	430a      	orrne	r2, r1
 800d4da:	e7d0      	b.n	800d47e <rint+0xae>
 800d4dc:	0800fe80 	.word	0x0800fe80
 800d4e0:	000fffff 	.word	0x000fffff
 800d4e4:	00000000 	.word	0x00000000

0800d4e8 <scalbn>:
 800d4e8:	b500      	push	{lr}
 800d4ea:	ed2d 8b02 	vpush	{d8}
 800d4ee:	b083      	sub	sp, #12
 800d4f0:	ed8d 0b00 	vstr	d0, [sp]
 800d4f4:	9b01      	ldr	r3, [sp, #4]
 800d4f6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d4fa:	b9a2      	cbnz	r2, 800d526 <scalbn+0x3e>
 800d4fc:	9a00      	ldr	r2, [sp, #0]
 800d4fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d502:	4313      	orrs	r3, r2
 800d504:	d03a      	beq.n	800d57c <scalbn+0x94>
 800d506:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800d5c0 <scalbn+0xd8>
 800d50a:	4b35      	ldr	r3, [pc, #212]	; (800d5e0 <scalbn+0xf8>)
 800d50c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d510:	4298      	cmp	r0, r3
 800d512:	ed8d 7b00 	vstr	d7, [sp]
 800d516:	da11      	bge.n	800d53c <scalbn+0x54>
 800d518:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800d5c8 <scalbn+0xe0>
 800d51c:	ed9d 6b00 	vldr	d6, [sp]
 800d520:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d524:	e007      	b.n	800d536 <scalbn+0x4e>
 800d526:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d52a:	428a      	cmp	r2, r1
 800d52c:	d10a      	bne.n	800d544 <scalbn+0x5c>
 800d52e:	ed9d 7b00 	vldr	d7, [sp]
 800d532:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d536:	ed8d 7b00 	vstr	d7, [sp]
 800d53a:	e01f      	b.n	800d57c <scalbn+0x94>
 800d53c:	9b01      	ldr	r3, [sp, #4]
 800d53e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d542:	3a36      	subs	r2, #54	; 0x36
 800d544:	4402      	add	r2, r0
 800d546:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d54a:	428a      	cmp	r2, r1
 800d54c:	dd0a      	ble.n	800d564 <scalbn+0x7c>
 800d54e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800d5d0 <scalbn+0xe8>
 800d552:	eeb0 0b48 	vmov.f64	d0, d8
 800d556:	ed9d 1b00 	vldr	d1, [sp]
 800d55a:	f000 f95f 	bl	800d81c <copysign>
 800d55e:	ee20 7b08 	vmul.f64	d7, d0, d8
 800d562:	e7e8      	b.n	800d536 <scalbn+0x4e>
 800d564:	2a00      	cmp	r2, #0
 800d566:	dd10      	ble.n	800d58a <scalbn+0xa2>
 800d568:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d56c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d570:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d574:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d578:	e9cd 0100 	strd	r0, r1, [sp]
 800d57c:	ed9d 0b00 	vldr	d0, [sp]
 800d580:	b003      	add	sp, #12
 800d582:	ecbd 8b02 	vpop	{d8}
 800d586:	f85d fb04 	ldr.w	pc, [sp], #4
 800d58a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d58e:	da06      	bge.n	800d59e <scalbn+0xb6>
 800d590:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d594:	4298      	cmp	r0, r3
 800d596:	dcda      	bgt.n	800d54e <scalbn+0x66>
 800d598:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800d5c8 <scalbn+0xe0>
 800d59c:	e7d9      	b.n	800d552 <scalbn+0x6a>
 800d59e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d5a6:	3236      	adds	r2, #54	; 0x36
 800d5a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d5ac:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d5b0:	ec41 0b17 	vmov	d7, r0, r1
 800d5b4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800d5d8 <scalbn+0xf0>
 800d5b8:	e7b2      	b.n	800d520 <scalbn+0x38>
 800d5ba:	bf00      	nop
 800d5bc:	f3af 8000 	nop.w
 800d5c0:	00000000 	.word	0x00000000
 800d5c4:	43500000 	.word	0x43500000
 800d5c8:	c2f8f359 	.word	0xc2f8f359
 800d5cc:	01a56e1f 	.word	0x01a56e1f
 800d5d0:	8800759c 	.word	0x8800759c
 800d5d4:	7e37e43c 	.word	0x7e37e43c
 800d5d8:	00000000 	.word	0x00000000
 800d5dc:	3c900000 	.word	0x3c900000
 800d5e0:	ffff3cb0 	.word	0xffff3cb0
 800d5e4:	00000000 	.word	0x00000000

0800d5e8 <__ieee754_log>:
 800d5e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5ea:	ed8d 0b00 	vstr	d0, [sp]
 800d5ee:	9a01      	ldr	r2, [sp, #4]
 800d5f0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800d5f4:	da26      	bge.n	800d644 <__ieee754_log+0x5c>
 800d5f6:	9900      	ldr	r1, [sp, #0]
 800d5f8:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800d5fc:	430b      	orrs	r3, r1
 800d5fe:	d107      	bne.n	800d610 <__ieee754_log+0x28>
 800d600:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800d7b0 <__ieee754_log+0x1c8>
 800d604:	ed9f 7b6c 	vldr	d7, [pc, #432]	; 800d7b8 <__ieee754_log+0x1d0>
 800d608:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800d60c:	b003      	add	sp, #12
 800d60e:	bd30      	pop	{r4, r5, pc}
 800d610:	2a00      	cmp	r2, #0
 800d612:	da04      	bge.n	800d61e <__ieee754_log+0x36>
 800d614:	ed9d 7b00 	vldr	d7, [sp]
 800d618:	ee37 6b47 	vsub.f64	d6, d7, d7
 800d61c:	e7f2      	b.n	800d604 <__ieee754_log+0x1c>
 800d61e:	ed9d 6b00 	vldr	d6, [sp]
 800d622:	ed9f 7b67 	vldr	d7, [pc, #412]	; 800d7c0 <__ieee754_log+0x1d8>
 800d626:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d62a:	ed8d 7b00 	vstr	d7, [sp]
 800d62e:	9a01      	ldr	r2, [sp, #4]
 800d630:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800d634:	4b78      	ldr	r3, [pc, #480]	; (800d818 <__ieee754_log+0x230>)
 800d636:	429a      	cmp	r2, r3
 800d638:	dd06      	ble.n	800d648 <__ieee754_log+0x60>
 800d63a:	ed9d 7b00 	vldr	d7, [sp]
 800d63e:	ee37 0b07 	vadd.f64	d0, d7, d7
 800d642:	e7e3      	b.n	800d60c <__ieee754_log+0x24>
 800d644:	2100      	movs	r1, #0
 800d646:	e7f5      	b.n	800d634 <__ieee754_log+0x4c>
 800d648:	1513      	asrs	r3, r2, #20
 800d64a:	f3c2 0013 	ubfx	r0, r2, #0, #20
 800d64e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d652:	4419      	add	r1, r3
 800d654:	f500 2315 	add.w	r3, r0, #610304	; 0x95000
 800d658:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800d65c:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
 800d660:	f084 557f 	eor.w	r5, r4, #1069547520	; 0x3fc00000
 800d664:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d668:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d66c:	f485 1540 	eor.w	r5, r5, #3145728	; 0x300000
 800d670:	ea45 0300 	orr.w	r3, r5, r0
 800d674:	ec43 2b10 	vmov	d0, r2, r3
 800d678:	1c82      	adds	r2, r0, #2
 800d67a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d67e:	2a02      	cmp	r2, #2
 800d680:	eb01 5414 	add.w	r4, r1, r4, lsr #20
 800d684:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d688:	dc31      	bgt.n	800d6ee <__ieee754_log+0x106>
 800d68a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d692:	d10f      	bne.n	800d6b4 <__ieee754_log+0xcc>
 800d694:	2c00      	cmp	r4, #0
 800d696:	f000 8086 	beq.w	800d7a6 <__ieee754_log+0x1be>
 800d69a:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800d7c8 <__ieee754_log+0x1e0>
 800d69e:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 800d7d0 <__ieee754_log+0x1e8>
 800d6a2:	ee07 4a90 	vmov	s15, r4
 800d6a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d6aa:	ee27 0b00 	vmul.f64	d0, d7, d0
 800d6ae:	eea7 0b06 	vfma.f64	d0, d7, d6
 800d6b2:	e7ab      	b.n	800d60c <__ieee754_log+0x24>
 800d6b4:	ed9f 7b48 	vldr	d7, [pc, #288]	; 800d7d8 <__ieee754_log+0x1f0>
 800d6b8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d6bc:	eea0 6b47 	vfms.f64	d6, d0, d7
 800d6c0:	ee20 7b00 	vmul.f64	d7, d0, d0
 800d6c4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d6c8:	b914      	cbnz	r4, 800d6d0 <__ieee754_log+0xe8>
 800d6ca:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d6ce:	e79d      	b.n	800d60c <__ieee754_log+0x24>
 800d6d0:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 800d7c8 <__ieee754_log+0x1e0>
 800d6d4:	ee07 4a90 	vmov	s15, r4
 800d6d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d6dc:	eea7 6b45 	vfms.f64	d6, d7, d5
 800d6e0:	ee36 0b40 	vsub.f64	d0, d6, d0
 800d6e4:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800d7d0 <__ieee754_log+0x1e8>
 800d6e8:	ee97 0b06 	vfnms.f64	d0, d7, d6
 800d6ec:	e78e      	b.n	800d60c <__ieee754_log+0x24>
 800d6ee:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800d6f2:	ee30 7b07 	vadd.f64	d7, d0, d7
 800d6f6:	ee80 4b07 	vdiv.f64	d4, d0, d7
 800d6fa:	ee07 4a90 	vmov	s15, r4
 800d6fe:	ee24 2b04 	vmul.f64	d2, d4, d4
 800d702:	ed9f 3b37 	vldr	d3, [pc, #220]	; 800d7e0 <__ieee754_log+0x1f8>
 800d706:	ee22 5b02 	vmul.f64	d5, d2, d2
 800d70a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800d70e:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800d7e8 <__ieee754_log+0x200>
 800d712:	eea5 7b03 	vfma.f64	d7, d5, d3
 800d716:	ed9f 3b36 	vldr	d3, [pc, #216]	; 800d7f0 <__ieee754_log+0x208>
 800d71a:	ed9f 1b37 	vldr	d1, [pc, #220]	; 800d7f8 <__ieee754_log+0x210>
 800d71e:	eea7 3b05 	vfma.f64	d3, d7, d5
 800d722:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800d800 <__ieee754_log+0x218>
 800d726:	eea5 7b01 	vfma.f64	d7, d5, d1
 800d72a:	ed9f 1b37 	vldr	d1, [pc, #220]	; 800d808 <__ieee754_log+0x220>
 800d72e:	f5a0 21c2 	sub.w	r1, r0, #397312	; 0x61000
 800d732:	f5c0 22d7 	rsb	r2, r0, #440320	; 0x6b800
 800d736:	eea7 1b05 	vfma.f64	d1, d7, d5
 800d73a:	f2a1 417a 	subw	r1, r1, #1146	; 0x47a
 800d73e:	ed9f 7b34 	vldr	d7, [pc, #208]	; 800d810 <__ieee754_log+0x228>
 800d742:	3251      	adds	r2, #81	; 0x51
 800d744:	430a      	orrs	r2, r1
 800d746:	2a00      	cmp	r2, #0
 800d748:	eea1 7b05 	vfma.f64	d7, d1, d5
 800d74c:	ee27 7b02 	vmul.f64	d7, d7, d2
 800d750:	eea3 7b05 	vfma.f64	d7, d3, d5
 800d754:	dd1c      	ble.n	800d790 <__ieee754_log+0x1a8>
 800d756:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d75a:	ee20 5b05 	vmul.f64	d5, d0, d5
 800d75e:	ee25 5b00 	vmul.f64	d5, d5, d0
 800d762:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d766:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d76a:	b924      	cbnz	r4, 800d776 <__ieee754_log+0x18e>
 800d76c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d770:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d774:	e74a      	b.n	800d60c <__ieee754_log+0x24>
 800d776:	ed9f 4b14 	vldr	d4, [pc, #80]	; 800d7c8 <__ieee754_log+0x1e0>
 800d77a:	eea6 7b04 	vfma.f64	d7, d6, d4
 800d77e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d782:	ee37 0b40 	vsub.f64	d0, d7, d0
 800d786:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800d7d0 <__ieee754_log+0x1e8>
 800d78a:	ee96 0b07 	vfnms.f64	d0, d6, d7
 800d78e:	e73d      	b.n	800d60c <__ieee754_log+0x24>
 800d790:	ee30 7b47 	vsub.f64	d7, d0, d7
 800d794:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d798:	2c00      	cmp	r4, #0
 800d79a:	d0e9      	beq.n	800d770 <__ieee754_log+0x188>
 800d79c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 800d7c8 <__ieee754_log+0x1e0>
 800d7a0:	eea6 7b45 	vfms.f64	d7, d6, d5
 800d7a4:	e7ed      	b.n	800d782 <__ieee754_log+0x19a>
 800d7a6:	ed9f 0b04 	vldr	d0, [pc, #16]	; 800d7b8 <__ieee754_log+0x1d0>
 800d7aa:	e72f      	b.n	800d60c <__ieee754_log+0x24>
 800d7ac:	f3af 8000 	nop.w
 800d7b0:	00000000 	.word	0x00000000
 800d7b4:	c3500000 	.word	0xc3500000
	...
 800d7c4:	43500000 	.word	0x43500000
 800d7c8:	35793c76 	.word	0x35793c76
 800d7cc:	3dea39ef 	.word	0x3dea39ef
 800d7d0:	fee00000 	.word	0xfee00000
 800d7d4:	3fe62e42 	.word	0x3fe62e42
 800d7d8:	55555555 	.word	0x55555555
 800d7dc:	3fd55555 	.word	0x3fd55555
 800d7e0:	d078c69f 	.word	0xd078c69f
 800d7e4:	3fc39a09 	.word	0x3fc39a09
 800d7e8:	1d8e78af 	.word	0x1d8e78af
 800d7ec:	3fcc71c5 	.word	0x3fcc71c5
 800d7f0:	9997fa04 	.word	0x9997fa04
 800d7f4:	3fd99999 	.word	0x3fd99999
 800d7f8:	df3e5244 	.word	0xdf3e5244
 800d7fc:	3fc2f112 	.word	0x3fc2f112
 800d800:	96cb03de 	.word	0x96cb03de
 800d804:	3fc74664 	.word	0x3fc74664
 800d808:	94229359 	.word	0x94229359
 800d80c:	3fd24924 	.word	0x3fd24924
 800d810:	55555593 	.word	0x55555593
 800d814:	3fe55555 	.word	0x3fe55555
 800d818:	7fefffff 	.word	0x7fefffff

0800d81c <copysign>:
 800d81c:	ec51 0b10 	vmov	r0, r1, d0
 800d820:	ee11 0a90 	vmov	r0, s3
 800d824:	ee10 2a10 	vmov	r2, s0
 800d828:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d82c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800d830:	ea41 0300 	orr.w	r3, r1, r0
 800d834:	ec43 2b10 	vmov	d0, r2, r3
 800d838:	4770      	bx	lr
	...

0800d83c <_init>:
 800d83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d83e:	bf00      	nop
 800d840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d842:	bc08      	pop	{r3}
 800d844:	469e      	mov	lr, r3
 800d846:	4770      	bx	lr

0800d848 <_fini>:
 800d848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d84a:	bf00      	nop
 800d84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d84e:	bc08      	pop	{r3}
 800d850:	469e      	mov	lr, r3
 800d852:	4770      	bx	lr
