
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d904  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005410  0800dba8  0800dba8  0001dba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012fb8  08012fb8  0004f000  2**0
                  CONTENTS
  4 .ARM          00000008  08012fb8  08012fb8  00022fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012fc0  08012fc0  0004f000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012fc0  08012fc0  00022fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012fc4  08012fc4  00022fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d8  24000000  08012fc8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d288  240003e0  080133a0  000303e0  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  2400d668  080133a0  0003d668  2**0
                  ALLOC
 11 .dtcm         0000f000  20000000  20000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  0004f000  2**0
                  CONTENTS, READONLY
 13 .debug_info   000368a9  00000000  00000000  0004f02e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00005392  00000000  00000000  000858d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001c6f9  00000000  00000000  0008ac69  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001348  00000000  00000000  000a7368  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00004518  00000000  00000000  000a86b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003acd0  00000000  00000000  000acbc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001a18d  00000000  00000000  000e7898  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0017deca  00000000  00000000  00101a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000e9  00000000  00000000  0027f8ef  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000054e0  00000000  00000000  0027f9d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240003e0 	.word	0x240003e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800db8c 	.word	0x0800db8c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240003e4 	.word	0x240003e4
 80002dc:	0800db8c 	.word	0x0800db8c

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <memchr>:
 80003b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003b4:	2a10      	cmp	r2, #16
 80003b6:	db2b      	blt.n	8000410 <memchr+0x60>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	d008      	beq.n	80003d0 <memchr+0x20>
 80003be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003c2:	3a01      	subs	r2, #1
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d02d      	beq.n	8000424 <memchr+0x74>
 80003c8:	f010 0f07 	tst.w	r0, #7
 80003cc:	b342      	cbz	r2, 8000420 <memchr+0x70>
 80003ce:	d1f6      	bne.n	80003be <memchr+0xe>
 80003d0:	b4f0      	push	{r4, r5, r6, r7}
 80003d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003da:	f022 0407 	bic.w	r4, r2, #7
 80003de:	f07f 0700 	mvns.w	r7, #0
 80003e2:	2300      	movs	r3, #0
 80003e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003e8:	3c08      	subs	r4, #8
 80003ea:	ea85 0501 	eor.w	r5, r5, r1
 80003ee:	ea86 0601 	eor.w	r6, r6, r1
 80003f2:	fa85 f547 	uadd8	r5, r5, r7
 80003f6:	faa3 f587 	sel	r5, r3, r7
 80003fa:	fa86 f647 	uadd8	r6, r6, r7
 80003fe:	faa5 f687 	sel	r6, r5, r7
 8000402:	b98e      	cbnz	r6, 8000428 <memchr+0x78>
 8000404:	d1ee      	bne.n	80003e4 <memchr+0x34>
 8000406:	bcf0      	pop	{r4, r5, r6, r7}
 8000408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800040c:	f002 0207 	and.w	r2, r2, #7
 8000410:	b132      	cbz	r2, 8000420 <memchr+0x70>
 8000412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000416:	3a01      	subs	r2, #1
 8000418:	ea83 0301 	eor.w	r3, r3, r1
 800041c:	b113      	cbz	r3, 8000424 <memchr+0x74>
 800041e:	d1f8      	bne.n	8000412 <memchr+0x62>
 8000420:	2000      	movs	r0, #0
 8000422:	4770      	bx	lr
 8000424:	3801      	subs	r0, #1
 8000426:	4770      	bx	lr
 8000428:	2d00      	cmp	r5, #0
 800042a:	bf06      	itte	eq
 800042c:	4635      	moveq	r5, r6
 800042e:	3803      	subeq	r0, #3
 8000430:	3807      	subne	r0, #7
 8000432:	f015 0f01 	tst.w	r5, #1
 8000436:	d107      	bne.n	8000448 <memchr+0x98>
 8000438:	3001      	adds	r0, #1
 800043a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800043e:	bf02      	ittt	eq
 8000440:	3001      	addeq	r0, #1
 8000442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000446:	3001      	addeq	r0, #1
 8000448:	bcf0      	pop	{r4, r5, r6, r7}
 800044a:	3801      	subs	r0, #1
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295
 8000460:	f04f 30ff 	movne.w	r0, #4294967295
 8000464:	f000 b972 	b.w	800074c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9e08      	ldr	r6, [sp, #32]
 8000486:	4604      	mov	r4, r0
 8000488:	4688      	mov	r8, r1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d14b      	bne.n	8000526 <__udivmoddi4+0xa6>
 800048e:	428a      	cmp	r2, r1
 8000490:	4615      	mov	r5, r2
 8000492:	d967      	bls.n	8000564 <__udivmoddi4+0xe4>
 8000494:	fab2 f282 	clz	r2, r2
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0720 	rsb	r7, r2, #32
 800049e:	fa01 f302 	lsl.w	r3, r1, r2
 80004a2:	fa20 f707 	lsr.w	r7, r0, r7
 80004a6:	4095      	lsls	r5, r2
 80004a8:	ea47 0803 	orr.w	r8, r7, r3
 80004ac:	4094      	lsls	r4, r2
 80004ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80004b8:	fa1f fc85 	uxth.w	ip, r5
 80004bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80004c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004c4:	fb07 f10c 	mul.w	r1, r7, ip
 80004c8:	4299      	cmp	r1, r3
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x60>
 80004cc:	18eb      	adds	r3, r5, r3
 80004ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80004d2:	f080 811b 	bcs.w	800070c <__udivmoddi4+0x28c>
 80004d6:	4299      	cmp	r1, r3
 80004d8:	f240 8118 	bls.w	800070c <__udivmoddi4+0x28c>
 80004dc:	3f02      	subs	r7, #2
 80004de:	442b      	add	r3, r5
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80004f4:	45a4      	cmp	ip, r4
 80004f6:	d909      	bls.n	800050c <__udivmoddi4+0x8c>
 80004f8:	192c      	adds	r4, r5, r4
 80004fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80004fe:	f080 8107 	bcs.w	8000710 <__udivmoddi4+0x290>
 8000502:	45a4      	cmp	ip, r4
 8000504:	f240 8104 	bls.w	8000710 <__udivmoddi4+0x290>
 8000508:	3802      	subs	r0, #2
 800050a:	442c      	add	r4, r5
 800050c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000510:	eba4 040c 	sub.w	r4, r4, ip
 8000514:	2700      	movs	r7, #0
 8000516:	b11e      	cbz	r6, 8000520 <__udivmoddi4+0xa0>
 8000518:	40d4      	lsrs	r4, r2
 800051a:	2300      	movs	r3, #0
 800051c:	e9c6 4300 	strd	r4, r3, [r6]
 8000520:	4639      	mov	r1, r7
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	428b      	cmp	r3, r1
 8000528:	d909      	bls.n	800053e <__udivmoddi4+0xbe>
 800052a:	2e00      	cmp	r6, #0
 800052c:	f000 80eb 	beq.w	8000706 <__udivmoddi4+0x286>
 8000530:	2700      	movs	r7, #0
 8000532:	e9c6 0100 	strd	r0, r1, [r6]
 8000536:	4638      	mov	r0, r7
 8000538:	4639      	mov	r1, r7
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	fab3 f783 	clz	r7, r3
 8000542:	2f00      	cmp	r7, #0
 8000544:	d147      	bne.n	80005d6 <__udivmoddi4+0x156>
 8000546:	428b      	cmp	r3, r1
 8000548:	d302      	bcc.n	8000550 <__udivmoddi4+0xd0>
 800054a:	4282      	cmp	r2, r0
 800054c:	f200 80fa 	bhi.w	8000744 <__udivmoddi4+0x2c4>
 8000550:	1a84      	subs	r4, r0, r2
 8000552:	eb61 0303 	sbc.w	r3, r1, r3
 8000556:	2001      	movs	r0, #1
 8000558:	4698      	mov	r8, r3
 800055a:	2e00      	cmp	r6, #0
 800055c:	d0e0      	beq.n	8000520 <__udivmoddi4+0xa0>
 800055e:	e9c6 4800 	strd	r4, r8, [r6]
 8000562:	e7dd      	b.n	8000520 <__udivmoddi4+0xa0>
 8000564:	b902      	cbnz	r2, 8000568 <__udivmoddi4+0xe8>
 8000566:	deff      	udf	#255	; 0xff
 8000568:	fab2 f282 	clz	r2, r2
 800056c:	2a00      	cmp	r2, #0
 800056e:	f040 808f 	bne.w	8000690 <__udivmoddi4+0x210>
 8000572:	1b49      	subs	r1, r1, r5
 8000574:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000578:	fa1f f885 	uxth.w	r8, r5
 800057c:	2701      	movs	r7, #1
 800057e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000582:	0c23      	lsrs	r3, r4, #16
 8000584:	fb0e 111c 	mls	r1, lr, ip, r1
 8000588:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058c:	fb08 f10c 	mul.w	r1, r8, ip
 8000590:	4299      	cmp	r1, r3
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x124>
 8000594:	18eb      	adds	r3, r5, r3
 8000596:	f10c 30ff 	add.w	r0, ip, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x122>
 800059c:	4299      	cmp	r1, r3
 800059e:	f200 80cd 	bhi.w	800073c <__udivmoddi4+0x2bc>
 80005a2:	4684      	mov	ip, r0
 80005a4:	1a59      	subs	r1, r3, r1
 80005a6:	b2a3      	uxth	r3, r4
 80005a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80005b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80005b4:	fb08 f800 	mul.w	r8, r8, r0
 80005b8:	45a0      	cmp	r8, r4
 80005ba:	d907      	bls.n	80005cc <__udivmoddi4+0x14c>
 80005bc:	192c      	adds	r4, r5, r4
 80005be:	f100 33ff 	add.w	r3, r0, #4294967295
 80005c2:	d202      	bcs.n	80005ca <__udivmoddi4+0x14a>
 80005c4:	45a0      	cmp	r8, r4
 80005c6:	f200 80b6 	bhi.w	8000736 <__udivmoddi4+0x2b6>
 80005ca:	4618      	mov	r0, r3
 80005cc:	eba4 0408 	sub.w	r4, r4, r8
 80005d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005d4:	e79f      	b.n	8000516 <__udivmoddi4+0x96>
 80005d6:	f1c7 0c20 	rsb	ip, r7, #32
 80005da:	40bb      	lsls	r3, r7
 80005dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80005e4:	fa01 f407 	lsl.w	r4, r1, r7
 80005e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80005ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80005f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80005f4:	4325      	orrs	r5, r4
 80005f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80005fa:	0c2c      	lsrs	r4, r5, #16
 80005fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000600:	fa1f fa8e 	uxth.w	sl, lr
 8000604:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000608:	fb09 f40a 	mul.w	r4, r9, sl
 800060c:	429c      	cmp	r4, r3
 800060e:	fa02 f207 	lsl.w	r2, r2, r7
 8000612:	fa00 f107 	lsl.w	r1, r0, r7
 8000616:	d90b      	bls.n	8000630 <__udivmoddi4+0x1b0>
 8000618:	eb1e 0303 	adds.w	r3, lr, r3
 800061c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000620:	f080 8087 	bcs.w	8000732 <__udivmoddi4+0x2b2>
 8000624:	429c      	cmp	r4, r3
 8000626:	f240 8084 	bls.w	8000732 <__udivmoddi4+0x2b2>
 800062a:	f1a9 0902 	sub.w	r9, r9, #2
 800062e:	4473      	add	r3, lr
 8000630:	1b1b      	subs	r3, r3, r4
 8000632:	b2ad      	uxth	r5, r5
 8000634:	fbb3 f0f8 	udiv	r0, r3, r8
 8000638:	fb08 3310 	mls	r3, r8, r0, r3
 800063c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000640:	fb00 fa0a 	mul.w	sl, r0, sl
 8000644:	45a2      	cmp	sl, r4
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x1da>
 8000648:	eb1e 0404 	adds.w	r4, lr, r4
 800064c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000650:	d26b      	bcs.n	800072a <__udivmoddi4+0x2aa>
 8000652:	45a2      	cmp	sl, r4
 8000654:	d969      	bls.n	800072a <__udivmoddi4+0x2aa>
 8000656:	3802      	subs	r0, #2
 8000658:	4474      	add	r4, lr
 800065a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800065e:	fba0 8902 	umull	r8, r9, r0, r2
 8000662:	eba4 040a 	sub.w	r4, r4, sl
 8000666:	454c      	cmp	r4, r9
 8000668:	46c2      	mov	sl, r8
 800066a:	464b      	mov	r3, r9
 800066c:	d354      	bcc.n	8000718 <__udivmoddi4+0x298>
 800066e:	d051      	beq.n	8000714 <__udivmoddi4+0x294>
 8000670:	2e00      	cmp	r6, #0
 8000672:	d069      	beq.n	8000748 <__udivmoddi4+0x2c8>
 8000674:	ebb1 050a 	subs.w	r5, r1, sl
 8000678:	eb64 0403 	sbc.w	r4, r4, r3
 800067c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000680:	40fd      	lsrs	r5, r7
 8000682:	40fc      	lsrs	r4, r7
 8000684:	ea4c 0505 	orr.w	r5, ip, r5
 8000688:	e9c6 5400 	strd	r5, r4, [r6]
 800068c:	2700      	movs	r7, #0
 800068e:	e747      	b.n	8000520 <__udivmoddi4+0xa0>
 8000690:	f1c2 0320 	rsb	r3, r2, #32
 8000694:	fa20 f703 	lsr.w	r7, r0, r3
 8000698:	4095      	lsls	r5, r2
 800069a:	fa01 f002 	lsl.w	r0, r1, r2
 800069e:	fa21 f303 	lsr.w	r3, r1, r3
 80006a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006a6:	4338      	orrs	r0, r7
 80006a8:	0c01      	lsrs	r1, r0, #16
 80006aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80006ae:	fa1f f885 	uxth.w	r8, r5
 80006b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80006b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ba:	fb07 f308 	mul.w	r3, r7, r8
 80006be:	428b      	cmp	r3, r1
 80006c0:	fa04 f402 	lsl.w	r4, r4, r2
 80006c4:	d907      	bls.n	80006d6 <__udivmoddi4+0x256>
 80006c6:	1869      	adds	r1, r5, r1
 80006c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80006cc:	d22f      	bcs.n	800072e <__udivmoddi4+0x2ae>
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d92d      	bls.n	800072e <__udivmoddi4+0x2ae>
 80006d2:	3f02      	subs	r7, #2
 80006d4:	4429      	add	r1, r5
 80006d6:	1acb      	subs	r3, r1, r3
 80006d8:	b281      	uxth	r1, r0
 80006da:	fbb3 f0fe 	udiv	r0, r3, lr
 80006de:	fb0e 3310 	mls	r3, lr, r0, r3
 80006e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006e6:	fb00 f308 	mul.w	r3, r0, r8
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d907      	bls.n	80006fe <__udivmoddi4+0x27e>
 80006ee:	1869      	adds	r1, r5, r1
 80006f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80006f4:	d217      	bcs.n	8000726 <__udivmoddi4+0x2a6>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d915      	bls.n	8000726 <__udivmoddi4+0x2a6>
 80006fa:	3802      	subs	r0, #2
 80006fc:	4429      	add	r1, r5
 80006fe:	1ac9      	subs	r1, r1, r3
 8000700:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000704:	e73b      	b.n	800057e <__udivmoddi4+0xfe>
 8000706:	4637      	mov	r7, r6
 8000708:	4630      	mov	r0, r6
 800070a:	e709      	b.n	8000520 <__udivmoddi4+0xa0>
 800070c:	4607      	mov	r7, r0
 800070e:	e6e7      	b.n	80004e0 <__udivmoddi4+0x60>
 8000710:	4618      	mov	r0, r3
 8000712:	e6fb      	b.n	800050c <__udivmoddi4+0x8c>
 8000714:	4541      	cmp	r1, r8
 8000716:	d2ab      	bcs.n	8000670 <__udivmoddi4+0x1f0>
 8000718:	ebb8 0a02 	subs.w	sl, r8, r2
 800071c:	eb69 020e 	sbc.w	r2, r9, lr
 8000720:	3801      	subs	r0, #1
 8000722:	4613      	mov	r3, r2
 8000724:	e7a4      	b.n	8000670 <__udivmoddi4+0x1f0>
 8000726:	4660      	mov	r0, ip
 8000728:	e7e9      	b.n	80006fe <__udivmoddi4+0x27e>
 800072a:	4618      	mov	r0, r3
 800072c:	e795      	b.n	800065a <__udivmoddi4+0x1da>
 800072e:	4667      	mov	r7, ip
 8000730:	e7d1      	b.n	80006d6 <__udivmoddi4+0x256>
 8000732:	4681      	mov	r9, r0
 8000734:	e77c      	b.n	8000630 <__udivmoddi4+0x1b0>
 8000736:	3802      	subs	r0, #2
 8000738:	442c      	add	r4, r5
 800073a:	e747      	b.n	80005cc <__udivmoddi4+0x14c>
 800073c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000740:	442b      	add	r3, r5
 8000742:	e72f      	b.n	80005a4 <__udivmoddi4+0x124>
 8000744:	4638      	mov	r0, r7
 8000746:	e708      	b.n	800055a <__udivmoddi4+0xda>
 8000748:	4637      	mov	r7, r6
 800074a:	e6e9      	b.n	8000520 <__udivmoddi4+0xa0>

0800074c <__aeabi_idiv0>:
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <Load_Presets>:



// Load from the Presets table
void Load_Presets(void)
{
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <Load_Presets+0x40>)
 8000752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000756:	4c0f      	ldr	r4, [pc, #60]	; (8000794 <Load_Presets+0x44>)
 8000758:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 800075c:	4f0e      	ldr	r7, [pc, #56]	; (8000798 <Load_Presets+0x48>)
 800075e:	4e0f      	ldr	r6, [pc, #60]	; (800079c <Load_Presets+0x4c>)
 8000760:	4d0f      	ldr	r5, [pc, #60]	; (80007a0 <Load_Presets+0x50>)
	int k;

	for(k=0; k<MAXPRESETS; k++)
	{
		strcpy(psets[k].name, pNames[k]);
 8000762:	4621      	mov	r1, r4
 8000764:	4618      	mov	r0, r3
 8000766:	f00a f92f 	bl	800a9c8 <strcpy>
		psets[k].freq = pFreqs[k];
		psets[k].mode = pModes[k];
 800076a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		strcpy(psets[k].name, pNames[k]);
 800076e:	4603      	mov	r3, r0
		psets[k].bw   = pBws[k];
 8000770:	f815 2f01 	ldrb.w	r2, [r5, #1]!
		psets[k].freq = pFreqs[k];
 8000774:	f857 0b04 	ldr.w	r0, [r7], #4
 8000778:	3410      	adds	r4, #16
		psets[k].mode = pModes[k];
 800077a:	7519      	strb	r1, [r3, #20]
 800077c:	3318      	adds	r3, #24
		psets[k].freq = pFreqs[k];
 800077e:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 8000782:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 8000786:	4543      	cmp	r3, r8
 8000788:	d1eb      	bne.n	8000762 <Load_Presets+0x12>
	}
}
 800078a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800078e:	bf00      	nop
 8000790:	24008760 	.word	0x24008760
 8000794:	24000000 	.word	0x24000000
 8000798:	0800fbb8 	.word	0x0800fbb8
 800079c:	0800fbef 	.word	0x0800fbef
 80007a0:	0800fba7 	.word	0x0800fba7

080007a4 <Tune_Preset>:
//-----------------------------------------------------------------------------
// Tune to the chosen preset
void Tune_Preset(uint8_t Idx)
{
 80007a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int kHz, Hz;

	LOfreq = psets[Idx].freq;
 80007a8:	0044      	lsls	r4, r0, #1
 80007aa:	4e5e      	ldr	r6, [pc, #376]	; (8000924 <Tune_Preset+0x180>)
 80007ac:	4a5e      	ldr	r2, [pc, #376]	; (8000928 <Tune_Preset+0x184>)
{
 80007ae:	4605      	mov	r5, r0
	LOfreq = psets[Idx].freq;
 80007b0:	1823      	adds	r3, r4, r0
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	CurrentMode = newmode;
 80007b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000958 <Tune_Preset+0x1b4>
	LOfreq = psets[Idx].freq;
 80007b6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80007ba:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 80007bc:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 80007be:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 80007c0:	f888 3000 	strb.w	r3, [r8]

	switch(CurrentMode)
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d812      	bhi.n	80007ee <Tune_Preset+0x4a>
 80007c8:	e8df f003 	tbb	[pc, r3]
 80007cc:	02205031 	.word	0x02205031
		//     ChangeColor(ptr, hUSB, GUI_RED);
		//     ChangeColor(ptr, hCW,  GUI_BLACK);
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80007d0:	4b56      	ldr	r3, [pc, #344]	; (800092c <Tune_Preset+0x188>)
	Decay[CW]   = AGC_decay[newAGC];
 80007d2:	4a57      	ldr	r2, [pc, #348]	; (8000930 <Tune_Preset+0x18c>)
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80007d4:	78db      	ldrb	r3, [r3, #3]
	Hcount[CW]  = Hangcount[newAGC]; break;
 80007d6:	4957      	ldr	r1, [pc, #348]	; (8000934 <Tune_Preset+0x190>)
	Decay[CW]   = AGC_decay[newAGC];
 80007d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	CurrentAGC =newAGC;
 80007dc:	4f56      	ldr	r7, [pc, #344]	; (8000938 <Tune_Preset+0x194>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 80007de:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 80007e2:	6810      	ldr	r0, [r2, #0]
	CurrentAGC =newAGC;
 80007e4:	703b      	strb	r3, [r7, #0]
	Decay[CW]   = AGC_decay[newAGC];
 80007e6:	4a55      	ldr	r2, [pc, #340]	; (800093c <Tune_Preset+0x198>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 80007e8:	4b55      	ldr	r3, [pc, #340]	; (8000940 <Tune_Preset+0x19c>)
	Decay[CW]   = AGC_decay[newAGC];
 80007ea:	60d0      	str	r0, [r2, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 80007ec:	80d9      	strh	r1, [r3, #6]
 80007ee:	4f55      	ldr	r7, [pc, #340]	; (8000944 <Tune_Preset+0x1a0>)
	SetBW( psets[Idx].bw);
 80007f0:	442c      	add	r4, r5
 80007f2:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
	CurrentBW = newbw;
 80007f6:	7d63      	ldrb	r3, [r4, #21]
 80007f8:	703b      	strb	r3, [r7, #0]
	strcpy(msg, psets[Idx].name);
 80007fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80007fe:	4852      	ldr	r0, [pc, #328]	; (8000948 <Tune_Preset+0x1a4>)
 8000800:	eb06 01c5 	add.w	r1, r6, r5, lsl #3
}
 8000804:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	strcpy(msg, psets[Idx].name);
 8000808:	f00a b8de 	b.w	800a9c8 <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 800080c:	4b47      	ldr	r3, [pc, #284]	; (800092c <Tune_Preset+0x188>)
	Decay[USB]  = AGC_decay[newAGC];
 800080e:	4a48      	ldr	r2, [pc, #288]	; (8000930 <Tune_Preset+0x18c>)
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000810:	789b      	ldrb	r3, [r3, #2]
	CurrentAGC =newAGC;
 8000812:	4f49      	ldr	r7, [pc, #292]	; (8000938 <Tune_Preset+0x194>)
	Decay[USB]  = AGC_decay[newAGC];
 8000814:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Hcount[USB] = Hangcount[newAGC]; break;
 8000818:	4946      	ldr	r1, [pc, #280]	; (8000934 <Tune_Preset+0x190>)
	CurrentAGC =newAGC;
 800081a:	703b      	strb	r3, [r7, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 800081c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000820:	6810      	ldr	r0, [r2, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000822:	4b47      	ldr	r3, [pc, #284]	; (8000940 <Tune_Preset+0x19c>)
	Decay[USB]  = AGC_decay[newAGC];
 8000824:	4a45      	ldr	r2, [pc, #276]	; (800093c <Tune_Preset+0x198>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000826:	8099      	strh	r1, [r3, #4]
	Decay[USB]  = AGC_decay[newAGC];
 8000828:	6090      	str	r0, [r2, #8]
 800082a:	4f46      	ldr	r7, [pc, #280]	; (8000944 <Tune_Preset+0x1a0>)
 800082c:	e7e0      	b.n	80007f0 <Tune_Preset+0x4c>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 800082e:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800095c <Tune_Preset+0x1b8>
		AMindex = 0; // TODO toglimi
 8000832:	f04f 0c00 	mov.w	ip, #0
	CurrentBW = newbw;
 8000836:	4f43      	ldr	r7, [pc, #268]	; (8000944 <Tune_Preset+0x1a0>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000838:	f44f 6380 	mov.w	r3, #1024	; 0x400
	CurrentBW = newbw;
 800083c:	f89a 0000 	ldrb.w	r0, [sl]
		AMindex = 0; // TODO toglimi
 8000840:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8000960 <Tune_Preset+0x1bc>
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000844:	4a41      	ldr	r2, [pc, #260]	; (800094c <Tune_Preset+0x1a8>)
 8000846:	4942      	ldr	r1, [pc, #264]	; (8000950 <Tune_Preset+0x1ac>)
	CurrentBW = newbw;
 8000848:	7038      	strb	r0, [r7, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 800084a:	4842      	ldr	r0, [pc, #264]	; (8000954 <Tune_Preset+0x1b0>)
		AMindex = 0; // TODO toglimi
 800084c:	f8a9 c000 	strh.w	ip, [r9]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000850:	f001 f912 	bl	8001a78 <SDR_2R_toC_f32>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000854:	4935      	ldr	r1, [pc, #212]	; (800092c <Tune_Preset+0x188>)
	CurrentAGC =newAGC;
 8000856:	4838      	ldr	r0, [pc, #224]	; (8000938 <Tune_Preset+0x194>)
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000858:	780b      	ldrb	r3, [r1, #0]
	switch(CurrentMode)
 800085a:	f898 2000 	ldrb.w	r2, [r8]
	CurrentAGC =newAGC;
 800085e:	7003      	strb	r3, [r0, #0]
	switch(CurrentMode)
 8000860:	2a03      	cmp	r2, #3
 8000862:	d8c5      	bhi.n	80007f0 <Tune_Preset+0x4c>
 8000864:	e8df f002 	tbb	[pc, r2]
 8000868:	314f4013 	.word	0x314f4013
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 800086c:	4b2f      	ldr	r3, [pc, #188]	; (800092c <Tune_Preset+0x188>)
	Decay[LSB]  = AGC_decay[newAGC];
 800086e:	4a30      	ldr	r2, [pc, #192]	; (8000930 <Tune_Preset+0x18c>)
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000870:	785b      	ldrb	r3, [r3, #1]
	CurrentAGC =newAGC;
 8000872:	4f31      	ldr	r7, [pc, #196]	; (8000938 <Tune_Preset+0x194>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000874:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000878:	492e      	ldr	r1, [pc, #184]	; (8000934 <Tune_Preset+0x190>)
	CurrentAGC =newAGC;
 800087a:	703b      	strb	r3, [r7, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 800087c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000880:	6810      	ldr	r0, [r2, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000882:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <Tune_Preset+0x19c>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000884:	4a2d      	ldr	r2, [pc, #180]	; (800093c <Tune_Preset+0x198>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000886:	8059      	strh	r1, [r3, #2]
	Decay[LSB]  = AGC_decay[newAGC];
 8000888:	6050      	str	r0, [r2, #4]
 800088a:	4f2e      	ldr	r7, [pc, #184]	; (8000944 <Tune_Preset+0x1a0>)
 800088c:	e7b0      	b.n	80007f0 <Tune_Preset+0x4c>
	SetBW( psets[Idx].bw);
 800088e:	442c      	add	r4, r5
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000890:	4928      	ldr	r1, [pc, #160]	; (8000934 <Tune_Preset+0x190>)
	Decay[AM]   = AGC_decay[newAGC];
 8000892:	4a27      	ldr	r2, [pc, #156]	; (8000930 <Tune_Preset+0x18c>)
	SetBW( psets[Idx].bw);
 8000894:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000898:	f831 c013 	ldrh.w	ip, [r1, r3, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 800089c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80008a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
	SetBW( psets[Idx].bw);
 80008a4:	7d61      	ldrb	r1, [r4, #21]
		AMindex = 0; // TODO toglimi
 80008a6:	2400      	movs	r4, #0
	Decay[AM]   = AGC_decay[newAGC];
 80008a8:	6810      	ldr	r0, [r2, #0]
	CurrentBW = newbw;
 80008aa:	7039      	strb	r1, [r7, #0]
		bw[AM] = newbw;
 80008ac:	f88a 1000 	strb.w	r1, [sl]
	Decay[AM]   = AGC_decay[newAGC];
 80008b0:	4922      	ldr	r1, [pc, #136]	; (800093c <Tune_Preset+0x198>)
		AMindex = 0; // TODO toglimi
 80008b2:	f8a9 4000 	strh.w	r4, [r9]
	Hcount[AM]  = Hangcount[newAGC]; break;
 80008b6:	4c22      	ldr	r4, [pc, #136]	; (8000940 <Tune_Preset+0x19c>)
	Decay[AM]   = AGC_decay[newAGC];
 80008b8:	6008      	str	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80008ba:	4a24      	ldr	r2, [pc, #144]	; (800094c <Tune_Preset+0x1a8>)
 80008bc:	4924      	ldr	r1, [pc, #144]	; (8000950 <Tune_Preset+0x1ac>)
 80008be:	4825      	ldr	r0, [pc, #148]	; (8000954 <Tune_Preset+0x1b0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 80008c0:	f8a4 c000 	strh.w	ip, [r4]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80008c4:	f001 f8d8 	bl	8001a78 <SDR_2R_toC_f32>
 80008c8:	e797      	b.n	80007fa <Tune_Preset+0x56>
	Decay[CW]   = AGC_decay[newAGC];
 80008ca:	4a19      	ldr	r2, [pc, #100]	; (8000930 <Tune_Preset+0x18c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 80008cc:	4819      	ldr	r0, [pc, #100]	; (8000934 <Tune_Preset+0x190>)
	Decay[CW]   = AGC_decay[newAGC];
 80008ce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case CW :       agc[CW] = newAGC;
 80008d2:	70cb      	strb	r3, [r1, #3]
	Decay[CW]   = AGC_decay[newAGC];
 80008d4:	4919      	ldr	r1, [pc, #100]	; (800093c <Tune_Preset+0x198>)
 80008d6:	f8d2 c000 	ldr.w	ip, [r2]
	Hcount[CW]  = Hangcount[newAGC]; break;
 80008da:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <Tune_Preset+0x19c>)
	Decay[CW]   = AGC_decay[newAGC];
 80008e0:	f8c1 c00c 	str.w	ip, [r1, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 80008e4:	80da      	strh	r2, [r3, #6]
 80008e6:	e783      	b.n	80007f0 <Tune_Preset+0x4c>
	Decay[LSB]  = AGC_decay[newAGC];
 80008e8:	4a11      	ldr	r2, [pc, #68]	; (8000930 <Tune_Preset+0x18c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 80008ea:	4812      	ldr	r0, [pc, #72]	; (8000934 <Tune_Preset+0x190>)
	Decay[LSB]  = AGC_decay[newAGC];
 80008ec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case LSB :      agc[LSB] = newAGC;
 80008f0:	704b      	strb	r3, [r1, #1]
	Decay[LSB]  = AGC_decay[newAGC];
 80008f2:	4912      	ldr	r1, [pc, #72]	; (800093c <Tune_Preset+0x198>)
 80008f4:	f8d2 c000 	ldr.w	ip, [r2]
	Hcount[LSB] = Hangcount[newAGC]; break;
 80008f8:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <Tune_Preset+0x19c>)
	Decay[LSB]  = AGC_decay[newAGC];
 80008fe:	f8c1 c004 	str.w	ip, [r1, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000902:	805a      	strh	r2, [r3, #2]
 8000904:	e774      	b.n	80007f0 <Tune_Preset+0x4c>
	Decay[USB]  = AGC_decay[newAGC];
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <Tune_Preset+0x18c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000908:	480a      	ldr	r0, [pc, #40]	; (8000934 <Tune_Preset+0x190>)
	Decay[USB]  = AGC_decay[newAGC];
 800090a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case USB :      agc[USB] = newAGC;
 800090e:	708b      	strb	r3, [r1, #2]
	Decay[USB]  = AGC_decay[newAGC];
 8000910:	490a      	ldr	r1, [pc, #40]	; (800093c <Tune_Preset+0x198>)
 8000912:	f8d2 c000 	ldr.w	ip, [r2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000916:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <Tune_Preset+0x19c>)
	Decay[USB]  = AGC_decay[newAGC];
 800091c:	f8c1 c008 	str.w	ip, [r1, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000920:	809a      	strh	r2, [r3, #4]
 8000922:	e765      	b.n	80007f0 <Tune_Preset+0x4c>
 8000924:	24008760 	.word	0x24008760
 8000928:	24009d28 	.word	0x24009d28
 800092c:	24007688 	.word	0x24007688
 8000930:	2400c24c 	.word	0x2400c24c
 8000934:	24009d24 	.word	0x24009d24
 8000938:	24000500 	.word	0x24000500
 800093c:	24002918 	.word	0x24002918
 8000940:	24007ec8 	.word	0x24007ec8
 8000944:	24000910 	.word	0x24000910
 8000948:	240042dc 	.word	0x240042dc
 800094c:	20004000 	.word	0x20004000
 8000950:	0800dba8 	.word	0x0800dba8
 8000954:	0800eba8 	.word	0x0800eba8
 8000958:	2400c25c 	.word	0x2400c25c
 800095c:	24008d18 	.word	0x24008d18
 8000960:	2400d662 	.word	0x2400d662

08000964 <SetBW>:
	switch(CurrentMode)
 8000964:	4a09      	ldr	r2, [pc, #36]	; (800098c <SetBW+0x28>)
	CurrentBW = newbw;
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <SetBW+0x2c>)
{
 8000968:	b430      	push	{r4, r5}
	switch(CurrentMode)
 800096a:	7814      	ldrb	r4, [r2, #0]
	CurrentBW = newbw;
 800096c:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 800096e:	b10c      	cbz	r4, 8000974 <SetBW+0x10>
}	
 8000970:	bc30      	pop	{r4, r5}
 8000972:	4770      	bx	lr
		bw[AM] = newbw;
 8000974:	4907      	ldr	r1, [pc, #28]	; (8000994 <SetBW+0x30>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000976:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 800097a:	4d07      	ldr	r5, [pc, #28]	; (8000998 <SetBW+0x34>)
		bw[AM] = newbw;
 800097c:	7008      	strb	r0, [r1, #0]
		AMindex = 0; // TODO toglimi
 800097e:	802c      	strh	r4, [r5, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <SetBW+0x38>)
 8000982:	4907      	ldr	r1, [pc, #28]	; (80009a0 <SetBW+0x3c>)
 8000984:	4807      	ldr	r0, [pc, #28]	; (80009a4 <SetBW+0x40>)
}	
 8000986:	bc30      	pop	{r4, r5}
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000988:	f001 b876 	b.w	8001a78 <SDR_2R_toC_f32>
 800098c:	2400c25c 	.word	0x2400c25c
 8000990:	24000910 	.word	0x24000910
 8000994:	24008d18 	.word	0x24008d18
 8000998:	2400d662 	.word	0x2400d662
 800099c:	20004000 	.word	0x20004000
 80009a0:	0800dba8 	.word	0x0800dba8
 80009a4:	0800eba8 	.word	0x0800eba8

080009a8 <SetAGC>:
	switch(CurrentMode)
 80009a8:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <SetAGC+0x90>)
	CurrentAGC =newAGC;
 80009aa:	4a24      	ldr	r2, [pc, #144]	; (8000a3c <SetAGC+0x94>)
	switch(CurrentMode)
 80009ac:	781b      	ldrb	r3, [r3, #0]
{
 80009ae:	b430      	push	{r4, r5}
	CurrentAGC =newAGC;
 80009b0:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d810      	bhi.n	80009d8 <SetAGC+0x30>
 80009b6:	e8df f003 	tbb	[pc, r3]
 80009ba:	202f      	.short	0x202f
 80009bc:	0211      	.short	0x0211
	Decay[CW]   = AGC_decay[newAGC];
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <SetAGC+0x98>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 80009c0:	4a20      	ldr	r2, [pc, #128]	; (8000a44 <SetAGC+0x9c>)
	Decay[CW]   = AGC_decay[newAGC];
 80009c2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80009c6:	4c20      	ldr	r4, [pc, #128]	; (8000a48 <SetAGC+0xa0>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 80009c8:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 80009cc:	681d      	ldr	r5, [r3, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <SetAGC+0xa4>)
	case CW :       agc[CW] = newAGC;
 80009d0:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <SetAGC+0xa8>)
	Decay[CW]   = AGC_decay[newAGC];
 80009d2:	60e5      	str	r5, [r4, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 80009d4:	80d1      	strh	r1, [r2, #6]
	case CW :       agc[CW] = newAGC;
 80009d6:	70d8      	strb	r0, [r3, #3]
}	
 80009d8:	bc30      	pop	{r4, r5}
 80009da:	4770      	bx	lr
	Decay[USB]  = AGC_decay[newAGC];
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <SetAGC+0x98>)
	Hcount[USB] = Hangcount[newAGC]; break;
 80009de:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <SetAGC+0x9c>)
	Decay[USB]  = AGC_decay[newAGC];
 80009e0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80009e4:	4c18      	ldr	r4, [pc, #96]	; (8000a48 <SetAGC+0xa0>)
	Hcount[USB] = Hangcount[newAGC]; break;
 80009e6:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 80009ea:	681d      	ldr	r5, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 80009ec:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <SetAGC+0xa4>)
	case USB :      agc[USB] = newAGC;
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 80009f0:	60a5      	str	r5, [r4, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 80009f2:	8091      	strh	r1, [r2, #4]
	case USB :      agc[USB] = newAGC;
 80009f4:	7098      	strb	r0, [r3, #2]
}	
 80009f6:	bc30      	pop	{r4, r5}
 80009f8:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <SetAGC+0x98>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 80009fc:	4a11      	ldr	r2, [pc, #68]	; (8000a44 <SetAGC+0x9c>)
	Decay[LSB]  = AGC_decay[newAGC];
 80009fe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000a02:	4c11      	ldr	r4, [pc, #68]	; (8000a48 <SetAGC+0xa0>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000a04:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000a08:	681d      	ldr	r5, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000a0a:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <SetAGC+0xa4>)
	case LSB :      agc[LSB] = newAGC;
 8000a0c:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000a0e:	6065      	str	r5, [r4, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000a10:	8051      	strh	r1, [r2, #2]
	case LSB :      agc[LSB] = newAGC;
 8000a12:	7058      	strb	r0, [r3, #1]
}	
 8000a14:	bc30      	pop	{r4, r5}
 8000a16:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <SetAGC+0x98>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <SetAGC+0x9c>)
	Decay[AM]   = AGC_decay[newAGC];
 8000a1c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000a20:	4c09      	ldr	r4, [pc, #36]	; (8000a48 <SetAGC+0xa0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000a22:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8000a26:	681d      	ldr	r5, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000a28:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <SetAGC+0xa4>)
	case AM :       agc[AM] = newAGC;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 8000a2c:	6025      	str	r5, [r4, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000a2e:	8011      	strh	r1, [r2, #0]
	case AM :       agc[AM] = newAGC;
 8000a30:	7018      	strb	r0, [r3, #0]
}	
 8000a32:	bc30      	pop	{r4, r5}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	2400c25c 	.word	0x2400c25c
 8000a3c:	24000500 	.word	0x24000500
 8000a40:	2400c24c 	.word	0x2400c24c
 8000a44:	24009d24 	.word	0x24009d24
 8000a48:	24002918 	.word	0x24002918
 8000a4c:	24007ec8 	.word	0x24007ec8
 8000a50:	24007688 	.word	0x24007688

08000a54 <SetMode>:
{
 8000a54:	b538      	push	{r3, r4, r5, lr}
	CurrentMode = newmode;
 8000a56:	4c48      	ldr	r4, [pc, #288]	; (8000b78 <SetMode+0x124>)
 8000a58:	7020      	strb	r0, [r4, #0]
	switch(CurrentMode)
 8000a5a:	2803      	cmp	r0, #3
 8000a5c:	d816      	bhi.n	8000a8c <SetMode+0x38>
 8000a5e:	e8df f000 	tbb	[pc, r0]
 8000a62:	2a3e      	.short	0x2a3e
 8000a64:	0216      	.short	0x0216
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000a66:	4b45      	ldr	r3, [pc, #276]	; (8000b7c <SetMode+0x128>)
	Decay[CW]   = AGC_decay[newAGC];
 8000a68:	4a45      	ldr	r2, [pc, #276]	; (8000b80 <SetMode+0x12c>)
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000a6a:	78db      	ldrb	r3, [r3, #3]
 8000a6c:	4c45      	ldr	r4, [pc, #276]	; (8000b84 <SetMode+0x130>)
	Decay[CW]   = AGC_decay[newAGC];
 8000a6e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	CurrentAGC =newAGC;
 8000a72:	4945      	ldr	r1, [pc, #276]	; (8000b88 <SetMode+0x134>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000a74:	4845      	ldr	r0, [pc, #276]	; (8000b8c <SetMode+0x138>)
	Decay[CW]   = AGC_decay[newAGC];
 8000a76:	6815      	ldr	r5, [r2, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000a78:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	CurrentBW = newbw;
 8000a7c:	78e2      	ldrb	r2, [r4, #3]
	CurrentAGC =newAGC;
 8000a7e:	700b      	strb	r3, [r1, #0]
	Decay[CW]   = AGC_decay[newAGC];
 8000a80:	4c43      	ldr	r4, [pc, #268]	; (8000b90 <SetMode+0x13c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000a82:	4944      	ldr	r1, [pc, #272]	; (8000b94 <SetMode+0x140>)
	CurrentBW = newbw;
 8000a84:	4b44      	ldr	r3, [pc, #272]	; (8000b98 <SetMode+0x144>)
	Decay[CW]   = AGC_decay[newAGC];
 8000a86:	60e5      	str	r5, [r4, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000a88:	80c8      	strh	r0, [r1, #6]
	CurrentBW = newbw;
 8000a8a:	701a      	strb	r2, [r3, #0]
		break;

	default :
		break;
	}
}	
 8000a8c:	bd38      	pop	{r3, r4, r5, pc}
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000a8e:	4b3b      	ldr	r3, [pc, #236]	; (8000b7c <SetMode+0x128>)
	Decay[USB]  = AGC_decay[newAGC];
 8000a90:	4a3b      	ldr	r2, [pc, #236]	; (8000b80 <SetMode+0x12c>)
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000a92:	789b      	ldrb	r3, [r3, #2]
 8000a94:	4c3b      	ldr	r4, [pc, #236]	; (8000b84 <SetMode+0x130>)
	Decay[USB]  = AGC_decay[newAGC];
 8000a96:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	CurrentAGC =newAGC;
 8000a9a:	493b      	ldr	r1, [pc, #236]	; (8000b88 <SetMode+0x134>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000a9c:	483b      	ldr	r0, [pc, #236]	; (8000b8c <SetMode+0x138>)
	Decay[USB]  = AGC_decay[newAGC];
 8000a9e:	6815      	ldr	r5, [r2, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000aa0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	CurrentBW = newbw;
 8000aa4:	78a2      	ldrb	r2, [r4, #2]
	CurrentAGC =newAGC;
 8000aa6:	700b      	strb	r3, [r1, #0]
	Decay[USB]  = AGC_decay[newAGC];
 8000aa8:	4c39      	ldr	r4, [pc, #228]	; (8000b90 <SetMode+0x13c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000aaa:	493a      	ldr	r1, [pc, #232]	; (8000b94 <SetMode+0x140>)
	CurrentBW = newbw;
 8000aac:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <SetMode+0x144>)
	Decay[USB]  = AGC_decay[newAGC];
 8000aae:	60a5      	str	r5, [r4, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000ab0:	8088      	strh	r0, [r1, #4]
	CurrentBW = newbw;
 8000ab2:	701a      	strb	r2, [r3, #0]
}	
 8000ab4:	bd38      	pop	{r3, r4, r5, pc}
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000ab6:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <SetMode+0x128>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000ab8:	4a31      	ldr	r2, [pc, #196]	; (8000b80 <SetMode+0x12c>)
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000aba:	785b      	ldrb	r3, [r3, #1]
 8000abc:	4c31      	ldr	r4, [pc, #196]	; (8000b84 <SetMode+0x130>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000abe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	CurrentAGC =newAGC;
 8000ac2:	4931      	ldr	r1, [pc, #196]	; (8000b88 <SetMode+0x134>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ac4:	4831      	ldr	r0, [pc, #196]	; (8000b8c <SetMode+0x138>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000ac6:	6815      	ldr	r5, [r2, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ac8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	CurrentBW = newbw;
 8000acc:	7862      	ldrb	r2, [r4, #1]
	CurrentAGC =newAGC;
 8000ace:	700b      	strb	r3, [r1, #0]
	Decay[LSB]  = AGC_decay[newAGC];
 8000ad0:	4c2f      	ldr	r4, [pc, #188]	; (8000b90 <SetMode+0x13c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ad2:	4930      	ldr	r1, [pc, #192]	; (8000b94 <SetMode+0x140>)
	CurrentBW = newbw;
 8000ad4:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <SetMode+0x144>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000ad6:	6065      	str	r5, [r4, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ad8:	8048      	strh	r0, [r1, #2]
	CurrentBW = newbw;
 8000ada:	701a      	strb	r2, [r3, #0]
}	
 8000adc:	bd38      	pop	{r3, r4, r5, pc}
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000ade:	4929      	ldr	r1, [pc, #164]	; (8000b84 <SetMode+0x130>)
		AMindex = 0; // TODO toglimi
 8000ae0:	2500      	movs	r5, #0
	CurrentBW = newbw;
 8000ae2:	4a2d      	ldr	r2, [pc, #180]	; (8000b98 <SetMode+0x144>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
	CurrentBW = newbw;
 8000ae8:	7809      	ldrb	r1, [r1, #0]
		AMindex = 0; // TODO toglimi
 8000aea:	482c      	ldr	r0, [pc, #176]	; (8000b9c <SetMode+0x148>)
	CurrentBW = newbw;
 8000aec:	7011      	strb	r1, [r2, #0]
		AMindex = 0; // TODO toglimi
 8000aee:	8005      	strh	r5, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000af0:	4a2b      	ldr	r2, [pc, #172]	; (8000ba0 <SetMode+0x14c>)
 8000af2:	492c      	ldr	r1, [pc, #176]	; (8000ba4 <SetMode+0x150>)
 8000af4:	482c      	ldr	r0, [pc, #176]	; (8000ba8 <SetMode+0x154>)
 8000af6:	f000 ffbf 	bl	8001a78 <SDR_2R_toC_f32>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000afa:	4920      	ldr	r1, [pc, #128]	; (8000b7c <SetMode+0x128>)
	CurrentAGC =newAGC;
 8000afc:	4822      	ldr	r0, [pc, #136]	; (8000b88 <SetMode+0x134>)
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000afe:	780b      	ldrb	r3, [r1, #0]
	switch(CurrentMode)
 8000b00:	7822      	ldrb	r2, [r4, #0]
	CurrentAGC =newAGC;
 8000b02:	7003      	strb	r3, [r0, #0]
	switch(CurrentMode)
 8000b04:	2a03      	cmp	r2, #3
 8000b06:	d8c1      	bhi.n	8000a8c <SetMode+0x38>
 8000b08:	e8df f002 	tbb	[pc, r2]
 8000b0c:	02281b0f 	.word	0x02281b0f
	Decay[CW]   = AGC_decay[newAGC];
 8000b10:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <SetMode+0x12c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b12:	481e      	ldr	r0, [pc, #120]	; (8000b8c <SetMode+0x138>)
	Decay[CW]   = AGC_decay[newAGC];
 8000b14:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000b18:	4c1d      	ldr	r4, [pc, #116]	; (8000b90 <SetMode+0x13c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b1a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000b1e:	6815      	ldr	r5, [r2, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b20:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <SetMode+0x140>)
	case CW :       agc[CW] = newAGC;
 8000b22:	70cb      	strb	r3, [r1, #3]
	Decay[CW]   = AGC_decay[newAGC];
 8000b24:	60e5      	str	r5, [r4, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b26:	80d0      	strh	r0, [r2, #6]
}	
 8000b28:	bd38      	pop	{r3, r4, r5, pc}
	Decay[AM]   = AGC_decay[newAGC];
 8000b2a:	4a15      	ldr	r2, [pc, #84]	; (8000b80 <SetMode+0x12c>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b2c:	4917      	ldr	r1, [pc, #92]	; (8000b8c <SetMode+0x138>)
	Decay[AM]   = AGC_decay[newAGC];
 8000b2e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000b32:	4817      	ldr	r0, [pc, #92]	; (8000b90 <SetMode+0x13c>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b34:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8000b38:	6812      	ldr	r2, [r2, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <SetMode+0x140>)
	Decay[AM]   = AGC_decay[newAGC];
 8000b3c:	6002      	str	r2, [r0, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b3e:	8019      	strh	r1, [r3, #0]
}	
 8000b40:	bd38      	pop	{r3, r4, r5, pc}
	Decay[LSB]  = AGC_decay[newAGC];
 8000b42:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <SetMode+0x12c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b44:	4811      	ldr	r0, [pc, #68]	; (8000b8c <SetMode+0x138>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000b46:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000b4a:	4c11      	ldr	r4, [pc, #68]	; (8000b90 <SetMode+0x13c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b4c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000b50:	6815      	ldr	r5, [r2, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <SetMode+0x140>)
	case LSB :      agc[LSB] = newAGC;
 8000b54:	704b      	strb	r3, [r1, #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000b56:	6065      	str	r5, [r4, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b58:	8050      	strh	r0, [r2, #2]
}	
 8000b5a:	bd38      	pop	{r3, r4, r5, pc}
	Decay[USB]  = AGC_decay[newAGC];
 8000b5c:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <SetMode+0x12c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000b5e:	480b      	ldr	r0, [pc, #44]	; (8000b8c <SetMode+0x138>)
	Decay[USB]  = AGC_decay[newAGC];
 8000b60:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000b64:	4c0a      	ldr	r4, [pc, #40]	; (8000b90 <SetMode+0x13c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000b66:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000b6a:	6815      	ldr	r5, [r2, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000b6c:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <SetMode+0x140>)
	case USB :      agc[USB] = newAGC;
 8000b6e:	708b      	strb	r3, [r1, #2]
	Decay[USB]  = AGC_decay[newAGC];
 8000b70:	60a5      	str	r5, [r4, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000b72:	8090      	strh	r0, [r2, #4]
}	
 8000b74:	bd38      	pop	{r3, r4, r5, pc}
 8000b76:	bf00      	nop
 8000b78:	2400c25c 	.word	0x2400c25c
 8000b7c:	24007688 	.word	0x24007688
 8000b80:	2400c24c 	.word	0x2400c24c
 8000b84:	24008d18 	.word	0x24008d18
 8000b88:	24000500 	.word	0x24000500
 8000b8c:	24009d24 	.word	0x24009d24
 8000b90:	24002918 	.word	0x24002918
 8000b94:	24007ec8 	.word	0x24007ec8
 8000b98:	24000910 	.word	0x24000910
 8000b9c:	2400d662 	.word	0x2400d662
 8000ba0:	20004000 	.word	0x20004000
 8000ba4:	0800dba8 	.word	0x0800dba8
 8000ba8:	0800eba8 	.word	0x0800eba8

08000bac <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	Fstep = pow(10, 5 - idx);
 8000bac:	f1c0 0005 	rsb	r0, r0, #5
 8000bb0:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8000bb4:	ee07 0a90 	vmov	s15, r0
{
 8000bb8:	b508      	push	{r3, lr}
	Fstep = pow(10, 5 - idx);
 8000bba:	eeb8 1be7 	vcvt.f64.s32	d1, s15
 8000bbe:	f00b fb47 	bl	800c250 <pow>
 8000bc2:	eebc 0bc0 	vcvt.u32.f64	s0, d0
 8000bc6:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <SetFstep+0x24>)
 8000bc8:	ed83 0a00 	vstr	s0, [r3]
}	
 8000bcc:	bd08      	pop	{r3, pc}
 8000bce:	bf00      	nop
 8000bd0:	2400c254 	.word	0x2400c254

08000bd4 <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked()
{	
	LOfreq += Fstep;
 8000bd4:	4b5f      	ldr	r3, [pc, #380]	; (8000d54 <FplusClicked+0x180>)
 8000bd6:	4960      	ldr	r1, [pc, #384]	; (8000d58 <FplusClicked+0x184>)
 8000bd8:	edd3 7a00 	vldr	s15, [r3]
 8000bdc:	ed91 7a00 	vldr	s14, [r1]
 8000be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
{	
 8000be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000be8:	4f5c      	ldr	r7, [pc, #368]	; (8000d5c <FplusClicked+0x188>)
	LOfreq += Fstep;
 8000bea:	ee77 7a87 	vadd.f32	s15, s15, s14
	psets[0].bw = bw[CurrentMode];
 8000bee:	4d5c      	ldr	r5, [pc, #368]	; (8000d60 <FplusClicked+0x18c>)
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000bf0:	783b      	ldrb	r3, [r7, #0]
 8000bf2:	4c5c      	ldr	r4, [pc, #368]	; (8000d64 <FplusClicked+0x190>)
	LOfreq  = min(LOfreq, 50000000.f);
 8000bf4:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8000d68 <FplusClicked+0x194>
	psets[0].bw = bw[CurrentMode];
 8000bf8:	5cea      	ldrb	r2, [r5, r3]
	LOfreq  = min(LOfreq, 50000000.f);
 8000bfa:	fec7 7ac7 	vminnm.f32	s15, s15, s14
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000bfe:	7523      	strb	r3, [r4, #20]
	LOfreq  = min(LOfreq, 50000000.f);
 8000c00:	edc1 7a00 	vstr	s15, [r1]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000c04:	edc4 7a04 	vstr	s15, [r4, #16]
	psets[0].bw = bw[CurrentMode];
 8000c08:	7562      	strb	r2, [r4, #21]
	switch(CurrentMode)
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d812      	bhi.n	8000c34 <FplusClicked+0x60>
 8000c0e:	e8df f003 	tbb	[pc, r3]
 8000c12:	452a      	.short	0x452a
 8000c14:	0219      	.short	0x0219
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000c16:	4b55      	ldr	r3, [pc, #340]	; (8000d6c <FplusClicked+0x198>)
	Decay[CW]   = AGC_decay[newAGC];
 8000c18:	4955      	ldr	r1, [pc, #340]	; (8000d70 <FplusClicked+0x19c>)
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000c1a:	78db      	ldrb	r3, [r3, #3]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c1c:	4855      	ldr	r0, [pc, #340]	; (8000d74 <FplusClicked+0x1a0>)
	Decay[CW]   = AGC_decay[newAGC];
 8000c1e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	CurrentAGC =newAGC;
 8000c22:	4d55      	ldr	r5, [pc, #340]	; (8000d78 <FplusClicked+0x1a4>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c24:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000c28:	680c      	ldr	r4, [r1, #0]
	CurrentAGC =newAGC;
 8000c2a:	702b      	strb	r3, [r5, #0]
	Decay[CW]   = AGC_decay[newAGC];
 8000c2c:	4953      	ldr	r1, [pc, #332]	; (8000d7c <FplusClicked+0x1a8>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c2e:	4b54      	ldr	r3, [pc, #336]	; (8000d80 <FplusClicked+0x1ac>)
	Decay[CW]   = AGC_decay[newAGC];
 8000c30:	60cc      	str	r4, [r1, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c32:	80d8      	strh	r0, [r3, #6]
 8000c34:	4e53      	ldr	r6, [pc, #332]	; (8000d84 <FplusClicked+0x1b0>)
	CurrentBW = newbw;
 8000c36:	7032      	strb	r2, [r6, #0]
	strcpy(msg, psets[Idx].name);
 8000c38:	494a      	ldr	r1, [pc, #296]	; (8000d64 <FplusClicked+0x190>)
 8000c3a:	4853      	ldr	r0, [pc, #332]	; (8000d88 <FplusClicked+0x1b4>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 8000c3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000c40:	f009 bec2 	b.w	800a9c8 <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000c44:	4b49      	ldr	r3, [pc, #292]	; (8000d6c <FplusClicked+0x198>)
	Decay[USB]  = AGC_decay[newAGC];
 8000c46:	494a      	ldr	r1, [pc, #296]	; (8000d70 <FplusClicked+0x19c>)
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000c48:	789b      	ldrb	r3, [r3, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000c4a:	484a      	ldr	r0, [pc, #296]	; (8000d74 <FplusClicked+0x1a0>)
	Decay[USB]  = AGC_decay[newAGC];
 8000c4c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	CurrentAGC =newAGC;
 8000c50:	4d49      	ldr	r5, [pc, #292]	; (8000d78 <FplusClicked+0x1a4>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000c52:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000c56:	680c      	ldr	r4, [r1, #0]
	CurrentAGC =newAGC;
 8000c58:	702b      	strb	r3, [r5, #0]
	Decay[USB]  = AGC_decay[newAGC];
 8000c5a:	4948      	ldr	r1, [pc, #288]	; (8000d7c <FplusClicked+0x1a8>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000c5c:	4b48      	ldr	r3, [pc, #288]	; (8000d80 <FplusClicked+0x1ac>)
	Decay[USB]  = AGC_decay[newAGC];
 8000c5e:	608c      	str	r4, [r1, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000c60:	8098      	strh	r0, [r3, #4]
 8000c62:	4e48      	ldr	r6, [pc, #288]	; (8000d84 <FplusClicked+0x1b0>)
 8000c64:	e7e7      	b.n	8000c36 <FplusClicked+0x62>
	CurrentBW = newbw;
 8000c66:	7828      	ldrb	r0, [r5, #0]
		AMindex = 0; // TODO toglimi
 8000c68:	f04f 0c00 	mov.w	ip, #0
	CurrentBW = newbw;
 8000c6c:	4e45      	ldr	r6, [pc, #276]	; (8000d84 <FplusClicked+0x1b0>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 8000c72:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8000d98 <FplusClicked+0x1c4>
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c76:	4a45      	ldr	r2, [pc, #276]	; (8000d8c <FplusClicked+0x1b8>)
 8000c78:	4945      	ldr	r1, [pc, #276]	; (8000d90 <FplusClicked+0x1bc>)
	CurrentBW = newbw;
 8000c7a:	7030      	strb	r0, [r6, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c7c:	4845      	ldr	r0, [pc, #276]	; (8000d94 <FplusClicked+0x1c0>)
		AMindex = 0; // TODO toglimi
 8000c7e:	f8a8 c000 	strh.w	ip, [r8]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c82:	f000 fef9 	bl	8001a78 <SDR_2R_toC_f32>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000c86:	4939      	ldr	r1, [pc, #228]	; (8000d6c <FplusClicked+0x198>)
	CurrentAGC =newAGC;
 8000c88:	483b      	ldr	r0, [pc, #236]	; (8000d78 <FplusClicked+0x1a4>)
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000c8a:	780b      	ldrb	r3, [r1, #0]
	switch(CurrentMode)
 8000c8c:	783a      	ldrb	r2, [r7, #0]
	CurrentAGC =newAGC;
 8000c8e:	7003      	strb	r3, [r0, #0]
	switch(CurrentMode)
 8000c90:	2a03      	cmp	r2, #3
 8000c92:	d85c      	bhi.n	8000d4e <FplusClicked+0x17a>
 8000c94:	e8df f002 	tbb	[pc, r2]
 8000c98:	314d3f13 	.word	0x314d3f13
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000c9c:	4b33      	ldr	r3, [pc, #204]	; (8000d6c <FplusClicked+0x198>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000c9e:	4934      	ldr	r1, [pc, #208]	; (8000d70 <FplusClicked+0x19c>)
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000ca0:	785b      	ldrb	r3, [r3, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ca2:	4834      	ldr	r0, [pc, #208]	; (8000d74 <FplusClicked+0x1a0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000ca4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	CurrentAGC =newAGC;
 8000ca8:	4d33      	ldr	r5, [pc, #204]	; (8000d78 <FplusClicked+0x1a4>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000caa:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000cae:	680c      	ldr	r4, [r1, #0]
	CurrentAGC =newAGC;
 8000cb0:	702b      	strb	r3, [r5, #0]
	Decay[LSB]  = AGC_decay[newAGC];
 8000cb2:	4932      	ldr	r1, [pc, #200]	; (8000d7c <FplusClicked+0x1a8>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000cb4:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <FplusClicked+0x1ac>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000cb6:	604c      	str	r4, [r1, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000cb8:	8058      	strh	r0, [r3, #2]
 8000cba:	4e32      	ldr	r6, [pc, #200]	; (8000d84 <FplusClicked+0x1b0>)
 8000cbc:	e7bb      	b.n	8000c36 <FplusClicked+0x62>
	Decay[AM]   = AGC_decay[newAGC];
 8000cbe:	4a2c      	ldr	r2, [pc, #176]	; (8000d70 <FplusClicked+0x19c>)
 8000cc0:	7d61      	ldrb	r1, [r4, #21]
 8000cc2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000cc6:	4c2b      	ldr	r4, [pc, #172]	; (8000d74 <FplusClicked+0x1a0>)
	CurrentBW = newbw;
 8000cc8:	7031      	strb	r1, [r6, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8000cca:	6810      	ldr	r0, [r2, #0]
		AMindex = 0; // TODO toglimi
 8000ccc:	2200      	movs	r2, #0
		bw[AM] = newbw;
 8000cce:	7029      	strb	r1, [r5, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8000cd0:	492a      	ldr	r1, [pc, #168]	; (8000d7c <FplusClicked+0x1a8>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000cd2:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000cda:	4c29      	ldr	r4, [pc, #164]	; (8000d80 <FplusClicked+0x1ac>)
		AMindex = 0; // TODO toglimi
 8000cdc:	f8a8 2000 	strh.w	r2, [r8]
	Decay[AM]   = AGC_decay[newAGC];
 8000ce0:	6008      	str	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000ce2:	4a2a      	ldr	r2, [pc, #168]	; (8000d8c <FplusClicked+0x1b8>)
 8000ce4:	492a      	ldr	r1, [pc, #168]	; (8000d90 <FplusClicked+0x1bc>)
 8000ce6:	482b      	ldr	r0, [pc, #172]	; (8000d94 <FplusClicked+0x1c0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000ce8:	8026      	strh	r6, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000cea:	f000 fec5 	bl	8001a78 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000cee:	491d      	ldr	r1, [pc, #116]	; (8000d64 <FplusClicked+0x190>)
 8000cf0:	4825      	ldr	r0, [pc, #148]	; (8000d88 <FplusClicked+0x1b4>)
}	
 8000cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000cf6:	f009 be67 	b.w	800a9c8 <strcpy>
	Decay[CW]   = AGC_decay[newAGC];
 8000cfa:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <FplusClicked+0x19c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000cfc:	4f1d      	ldr	r7, [pc, #116]	; (8000d74 <FplusClicked+0x1a0>)
	Decay[CW]   = AGC_decay[newAGC];
 8000cfe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case CW :       agc[CW] = newAGC;
 8000d02:	70cb      	strb	r3, [r1, #3]
	Decay[CW]   = AGC_decay[newAGC];
 8000d04:	481d      	ldr	r0, [pc, #116]	; (8000d7c <FplusClicked+0x1a8>)
 8000d06:	6815      	ldr	r5, [r2, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d08:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <FplusClicked+0x1ac>)
 8000d0e:	7d62      	ldrb	r2, [r4, #21]
	Decay[CW]   = AGC_decay[newAGC];
 8000d10:	60c5      	str	r5, [r0, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d12:	80d9      	strh	r1, [r3, #6]
 8000d14:	e78f      	b.n	8000c36 <FplusClicked+0x62>
	Decay[LSB]  = AGC_decay[newAGC];
 8000d16:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <FplusClicked+0x19c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d18:	4f16      	ldr	r7, [pc, #88]	; (8000d74 <FplusClicked+0x1a0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000d1a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case LSB :      agc[LSB] = newAGC;
 8000d1e:	704b      	strb	r3, [r1, #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000d20:	4816      	ldr	r0, [pc, #88]	; (8000d7c <FplusClicked+0x1a8>)
 8000d22:	6815      	ldr	r5, [r2, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d24:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <FplusClicked+0x1ac>)
 8000d2a:	7d62      	ldrb	r2, [r4, #21]
	Decay[LSB]  = AGC_decay[newAGC];
 8000d2c:	6045      	str	r5, [r0, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d2e:	8059      	strh	r1, [r3, #2]
 8000d30:	e781      	b.n	8000c36 <FplusClicked+0x62>
	Decay[USB]  = AGC_decay[newAGC];
 8000d32:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <FplusClicked+0x19c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d34:	4f0f      	ldr	r7, [pc, #60]	; (8000d74 <FplusClicked+0x1a0>)
	Decay[USB]  = AGC_decay[newAGC];
 8000d36:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case USB :      agc[USB] = newAGC;
 8000d3a:	708b      	strb	r3, [r1, #2]
	Decay[USB]  = AGC_decay[newAGC];
 8000d3c:	480f      	ldr	r0, [pc, #60]	; (8000d7c <FplusClicked+0x1a8>)
 8000d3e:	6815      	ldr	r5, [r2, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d40:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <FplusClicked+0x1ac>)
 8000d46:	7d62      	ldrb	r2, [r4, #21]
	Decay[USB]  = AGC_decay[newAGC];
 8000d48:	6085      	str	r5, [r0, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d4a:	8099      	strh	r1, [r3, #4]
 8000d4c:	e773      	b.n	8000c36 <FplusClicked+0x62>
 8000d4e:	7d62      	ldrb	r2, [r4, #21]
 8000d50:	e771      	b.n	8000c36 <FplusClicked+0x62>
 8000d52:	bf00      	nop
 8000d54:	2400c254 	.word	0x2400c254
 8000d58:	24009d28 	.word	0x24009d28
 8000d5c:	2400c25c 	.word	0x2400c25c
 8000d60:	24008d18 	.word	0x24008d18
 8000d64:	24008760 	.word	0x24008760
 8000d68:	4c3ebc20 	.word	0x4c3ebc20
 8000d6c:	24007688 	.word	0x24007688
 8000d70:	2400c24c 	.word	0x2400c24c
 8000d74:	24009d24 	.word	0x24009d24
 8000d78:	24000500 	.word	0x24000500
 8000d7c:	24002918 	.word	0x24002918
 8000d80:	24007ec8 	.word	0x24007ec8
 8000d84:	24000910 	.word	0x24000910
 8000d88:	240042dc 	.word	0x240042dc
 8000d8c:	20004000 	.word	0x20004000
 8000d90:	0800dba8 	.word	0x0800dba8
 8000d94:	0800eba8 	.word	0x0800eba8
 8000d98:	2400d662 	.word	0x2400d662

08000d9c <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked()
{	
	LOfreq -= Fstep;
 8000d9c:	4b5f      	ldr	r3, [pc, #380]	; (8000f1c <FminusClicked+0x180>)
 8000d9e:	4960      	ldr	r1, [pc, #384]	; (8000f20 <FminusClicked+0x184>)
 8000da0:	ed93 7a00 	vldr	s14, [r3]
 8000da4:	edd1 7a00 	vldr	s15, [r1]
 8000da8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{	
 8000dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000db0:	4f5c      	ldr	r7, [pc, #368]	; (8000f24 <FminusClicked+0x188>)
	LOfreq -= Fstep;
 8000db2:	ee77 7ac7 	vsub.f32	s15, s15, s14
	psets[0].bw = bw[CurrentMode];
 8000db6:	4d5c      	ldr	r5, [pc, #368]	; (8000f28 <FminusClicked+0x18c>)
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000db8:	783b      	ldrb	r3, [r7, #0]
 8000dba:	4c5c      	ldr	r4, [pc, #368]	; (8000f2c <FminusClicked+0x190>)
	LOfreq  = max(LOfreq, 8000.f);
 8000dbc:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8000f30 <FminusClicked+0x194>
	psets[0].bw = bw[CurrentMode];
 8000dc0:	5cea      	ldrb	r2, [r5, r3]
	LOfreq  = max(LOfreq, 8000.f);
 8000dc2:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000dc6:	7523      	strb	r3, [r4, #20]
	LOfreq  = max(LOfreq, 8000.f);
 8000dc8:	edc1 7a00 	vstr	s15, [r1]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000dcc:	edc4 7a04 	vstr	s15, [r4, #16]
	psets[0].bw = bw[CurrentMode];
 8000dd0:	7562      	strb	r2, [r4, #21]
	switch(CurrentMode)
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d812      	bhi.n	8000dfc <FminusClicked+0x60>
 8000dd6:	e8df f003 	tbb	[pc, r3]
 8000dda:	452a      	.short	0x452a
 8000ddc:	0219      	.short	0x0219
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000dde:	4b55      	ldr	r3, [pc, #340]	; (8000f34 <FminusClicked+0x198>)
	Decay[CW]   = AGC_decay[newAGC];
 8000de0:	4955      	ldr	r1, [pc, #340]	; (8000f38 <FminusClicked+0x19c>)
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000de2:	78db      	ldrb	r3, [r3, #3]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000de4:	4855      	ldr	r0, [pc, #340]	; (8000f3c <FminusClicked+0x1a0>)
	Decay[CW]   = AGC_decay[newAGC];
 8000de6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	CurrentAGC =newAGC;
 8000dea:	4d55      	ldr	r5, [pc, #340]	; (8000f40 <FminusClicked+0x1a4>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000dec:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000df0:	680c      	ldr	r4, [r1, #0]
	CurrentAGC =newAGC;
 8000df2:	702b      	strb	r3, [r5, #0]
	Decay[CW]   = AGC_decay[newAGC];
 8000df4:	4953      	ldr	r1, [pc, #332]	; (8000f44 <FminusClicked+0x1a8>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000df6:	4b54      	ldr	r3, [pc, #336]	; (8000f48 <FminusClicked+0x1ac>)
	Decay[CW]   = AGC_decay[newAGC];
 8000df8:	60cc      	str	r4, [r1, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000dfa:	80d8      	strh	r0, [r3, #6]
 8000dfc:	4e53      	ldr	r6, [pc, #332]	; (8000f4c <FminusClicked+0x1b0>)
	CurrentBW = newbw;
 8000dfe:	7032      	strb	r2, [r6, #0]
	strcpy(msg, psets[Idx].name);
 8000e00:	494a      	ldr	r1, [pc, #296]	; (8000f2c <FminusClicked+0x190>)
 8000e02:	4853      	ldr	r0, [pc, #332]	; (8000f50 <FminusClicked+0x1b4>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 8000e04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000e08:	f009 bdde 	b.w	800a9c8 <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000e0c:	4b49      	ldr	r3, [pc, #292]	; (8000f34 <FminusClicked+0x198>)
	Decay[USB]  = AGC_decay[newAGC];
 8000e0e:	494a      	ldr	r1, [pc, #296]	; (8000f38 <FminusClicked+0x19c>)
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000e10:	789b      	ldrb	r3, [r3, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000e12:	484a      	ldr	r0, [pc, #296]	; (8000f3c <FminusClicked+0x1a0>)
	Decay[USB]  = AGC_decay[newAGC];
 8000e14:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	CurrentAGC =newAGC;
 8000e18:	4d49      	ldr	r5, [pc, #292]	; (8000f40 <FminusClicked+0x1a4>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000e1a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000e1e:	680c      	ldr	r4, [r1, #0]
	CurrentAGC =newAGC;
 8000e20:	702b      	strb	r3, [r5, #0]
	Decay[USB]  = AGC_decay[newAGC];
 8000e22:	4948      	ldr	r1, [pc, #288]	; (8000f44 <FminusClicked+0x1a8>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000e24:	4b48      	ldr	r3, [pc, #288]	; (8000f48 <FminusClicked+0x1ac>)
	Decay[USB]  = AGC_decay[newAGC];
 8000e26:	608c      	str	r4, [r1, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000e28:	8098      	strh	r0, [r3, #4]
 8000e2a:	4e48      	ldr	r6, [pc, #288]	; (8000f4c <FminusClicked+0x1b0>)
 8000e2c:	e7e7      	b.n	8000dfe <FminusClicked+0x62>
	CurrentBW = newbw;
 8000e2e:	7828      	ldrb	r0, [r5, #0]
		AMindex = 0; // TODO toglimi
 8000e30:	f04f 0c00 	mov.w	ip, #0
	CurrentBW = newbw;
 8000e34:	4e45      	ldr	r6, [pc, #276]	; (8000f4c <FminusClicked+0x1b0>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 8000e3a:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8000f60 <FminusClicked+0x1c4>
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000e3e:	4a45      	ldr	r2, [pc, #276]	; (8000f54 <FminusClicked+0x1b8>)
 8000e40:	4945      	ldr	r1, [pc, #276]	; (8000f58 <FminusClicked+0x1bc>)
	CurrentBW = newbw;
 8000e42:	7030      	strb	r0, [r6, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000e44:	4845      	ldr	r0, [pc, #276]	; (8000f5c <FminusClicked+0x1c0>)
		AMindex = 0; // TODO toglimi
 8000e46:	f8a8 c000 	strh.w	ip, [r8]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000e4a:	f000 fe15 	bl	8001a78 <SDR_2R_toC_f32>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000e4e:	4939      	ldr	r1, [pc, #228]	; (8000f34 <FminusClicked+0x198>)
	CurrentAGC =newAGC;
 8000e50:	483b      	ldr	r0, [pc, #236]	; (8000f40 <FminusClicked+0x1a4>)
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000e52:	780b      	ldrb	r3, [r1, #0]
	switch(CurrentMode)
 8000e54:	783a      	ldrb	r2, [r7, #0]
	CurrentAGC =newAGC;
 8000e56:	7003      	strb	r3, [r0, #0]
	switch(CurrentMode)
 8000e58:	2a03      	cmp	r2, #3
 8000e5a:	d85c      	bhi.n	8000f16 <FminusClicked+0x17a>
 8000e5c:	e8df f002 	tbb	[pc, r2]
 8000e60:	314d3f13 	.word	0x314d3f13
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000e64:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <FminusClicked+0x198>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000e66:	4934      	ldr	r1, [pc, #208]	; (8000f38 <FminusClicked+0x19c>)
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000e68:	785b      	ldrb	r3, [r3, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000e6a:	4834      	ldr	r0, [pc, #208]	; (8000f3c <FminusClicked+0x1a0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000e6c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	CurrentAGC =newAGC;
 8000e70:	4d33      	ldr	r5, [pc, #204]	; (8000f40 <FminusClicked+0x1a4>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000e72:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000e76:	680c      	ldr	r4, [r1, #0]
	CurrentAGC =newAGC;
 8000e78:	702b      	strb	r3, [r5, #0]
	Decay[LSB]  = AGC_decay[newAGC];
 8000e7a:	4932      	ldr	r1, [pc, #200]	; (8000f44 <FminusClicked+0x1a8>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000e7c:	4b32      	ldr	r3, [pc, #200]	; (8000f48 <FminusClicked+0x1ac>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000e7e:	604c      	str	r4, [r1, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000e80:	8058      	strh	r0, [r3, #2]
 8000e82:	4e32      	ldr	r6, [pc, #200]	; (8000f4c <FminusClicked+0x1b0>)
 8000e84:	e7bb      	b.n	8000dfe <FminusClicked+0x62>
	Decay[AM]   = AGC_decay[newAGC];
 8000e86:	4a2c      	ldr	r2, [pc, #176]	; (8000f38 <FminusClicked+0x19c>)
 8000e88:	7d61      	ldrb	r1, [r4, #21]
 8000e8a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000e8e:	4c2b      	ldr	r4, [pc, #172]	; (8000f3c <FminusClicked+0x1a0>)
	CurrentBW = newbw;
 8000e90:	7031      	strb	r1, [r6, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8000e92:	6810      	ldr	r0, [r2, #0]
		AMindex = 0; // TODO toglimi
 8000e94:	2200      	movs	r2, #0
		bw[AM] = newbw;
 8000e96:	7029      	strb	r1, [r5, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8000e98:	492a      	ldr	r1, [pc, #168]	; (8000f44 <FminusClicked+0x1a8>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000e9a:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000ea2:	4c29      	ldr	r4, [pc, #164]	; (8000f48 <FminusClicked+0x1ac>)
		AMindex = 0; // TODO toglimi
 8000ea4:	f8a8 2000 	strh.w	r2, [r8]
	Decay[AM]   = AGC_decay[newAGC];
 8000ea8:	6008      	str	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000eaa:	4a2a      	ldr	r2, [pc, #168]	; (8000f54 <FminusClicked+0x1b8>)
 8000eac:	492a      	ldr	r1, [pc, #168]	; (8000f58 <FminusClicked+0x1bc>)
 8000eae:	482b      	ldr	r0, [pc, #172]	; (8000f5c <FminusClicked+0x1c0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000eb0:	8026      	strh	r6, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000eb2:	f000 fde1 	bl	8001a78 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000eb6:	491d      	ldr	r1, [pc, #116]	; (8000f2c <FminusClicked+0x190>)
 8000eb8:	4825      	ldr	r0, [pc, #148]	; (8000f50 <FminusClicked+0x1b4>)
}
 8000eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000ebe:	f009 bd83 	b.w	800a9c8 <strcpy>
	Decay[CW]   = AGC_decay[newAGC];
 8000ec2:	4a1d      	ldr	r2, [pc, #116]	; (8000f38 <FminusClicked+0x19c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000ec4:	4f1d      	ldr	r7, [pc, #116]	; (8000f3c <FminusClicked+0x1a0>)
	Decay[CW]   = AGC_decay[newAGC];
 8000ec6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case CW :       agc[CW] = newAGC;
 8000eca:	70cb      	strb	r3, [r1, #3]
	Decay[CW]   = AGC_decay[newAGC];
 8000ecc:	481d      	ldr	r0, [pc, #116]	; (8000f44 <FminusClicked+0x1a8>)
 8000ece:	6815      	ldr	r5, [r2, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000ed0:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <FminusClicked+0x1ac>)
 8000ed6:	7d62      	ldrb	r2, [r4, #21]
	Decay[CW]   = AGC_decay[newAGC];
 8000ed8:	60c5      	str	r5, [r0, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000eda:	80d9      	strh	r1, [r3, #6]
 8000edc:	e78f      	b.n	8000dfe <FminusClicked+0x62>
	Decay[LSB]  = AGC_decay[newAGC];
 8000ede:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <FminusClicked+0x19c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ee0:	4f16      	ldr	r7, [pc, #88]	; (8000f3c <FminusClicked+0x1a0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000ee2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case LSB :      agc[LSB] = newAGC;
 8000ee6:	704b      	strb	r3, [r1, #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000ee8:	4816      	ldr	r0, [pc, #88]	; (8000f44 <FminusClicked+0x1a8>)
 8000eea:	6815      	ldr	r5, [r2, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000eec:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <FminusClicked+0x1ac>)
 8000ef2:	7d62      	ldrb	r2, [r4, #21]
	Decay[LSB]  = AGC_decay[newAGC];
 8000ef4:	6045      	str	r5, [r0, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ef6:	8059      	strh	r1, [r3, #2]
 8000ef8:	e781      	b.n	8000dfe <FminusClicked+0x62>
	Decay[USB]  = AGC_decay[newAGC];
 8000efa:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <FminusClicked+0x19c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000efc:	4f0f      	ldr	r7, [pc, #60]	; (8000f3c <FminusClicked+0x1a0>)
	Decay[USB]  = AGC_decay[newAGC];
 8000efe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case USB :      agc[USB] = newAGC;
 8000f02:	708b      	strb	r3, [r1, #2]
	Decay[USB]  = AGC_decay[newAGC];
 8000f04:	480f      	ldr	r0, [pc, #60]	; (8000f44 <FminusClicked+0x1a8>)
 8000f06:	6815      	ldr	r5, [r2, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000f08:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <FminusClicked+0x1ac>)
 8000f0e:	7d62      	ldrb	r2, [r4, #21]
	Decay[USB]  = AGC_decay[newAGC];
 8000f10:	6085      	str	r5, [r0, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000f12:	8099      	strh	r1, [r3, #4]
 8000f14:	e773      	b.n	8000dfe <FminusClicked+0x62>
 8000f16:	7d62      	ldrb	r2, [r4, #21]
 8000f18:	e771      	b.n	8000dfe <FminusClicked+0x62>
 8000f1a:	bf00      	nop
 8000f1c:	2400c254 	.word	0x2400c254
 8000f20:	24009d28 	.word	0x24009d28
 8000f24:	2400c25c 	.word	0x2400c25c
 8000f28:	24008d18 	.word	0x24008d18
 8000f2c:	24008760 	.word	0x24008760
 8000f30:	45fa0000 	.word	0x45fa0000
 8000f34:	24007688 	.word	0x24007688
 8000f38:	2400c24c 	.word	0x2400c24c
 8000f3c:	24009d24 	.word	0x24009d24
 8000f40:	24000500 	.word	0x24000500
 8000f44:	24002918 	.word	0x24002918
 8000f48:	24007ec8 	.word	0x24007ec8
 8000f4c:	24000910 	.word	0x24000910
 8000f50:	240042dc 	.word	0x240042dc
 8000f54:	20004000 	.word	0x20004000
 8000f58:	0800dba8 	.word	0x0800dba8
 8000f5c:	0800eba8 	.word	0x0800eba8
 8000f60:	2400d662 	.word	0x2400d662

08000f64 <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <HAL_GPIO_EXTI_Callback>:
// This is the handler of the software interrupt generated by the highest
// priority task that handles the interrupts generated by DMA2 Stream 0,
// when an ADC buffer is filled
//void EXTI1_IRQHandler()
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8000f68:	b510      	push	{r4, lr}

	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // set bit 8 of GPIOF high, to be observed with an oscilloscope


	// copy into work buffers the data received by CIC decimator
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8000f6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f6e:	4942      	ldr	r1, [pc, #264]	; (8001078 <HAL_GPIO_EXTI_Callback+0x110>)
 8000f70:	4842      	ldr	r0, [pc, #264]	; (800107c <HAL_GPIO_EXTI_Callback+0x114>)
 8000f72:	f000 fe8f 	bl	8001c94 <SDR_memcpy_f32>
	SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 8000f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f7a:	4941      	ldr	r1, [pc, #260]	; (8001080 <HAL_GPIO_EXTI_Callback+0x118>)
 8000f7c:	4841      	ldr	r0, [pc, #260]	; (8001084 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000f7e:	f000 fe89 	bl	8001c94 <SDR_memcpy_f32>




	// inverse sync filtering and decimation by 4
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 8000f82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f86:	4a40      	ldr	r2, [pc, #256]	; (8001088 <HAL_GPIO_EXTI_Callback+0x120>)
 8000f88:	493c      	ldr	r1, [pc, #240]	; (800107c <HAL_GPIO_EXTI_Callback+0x114>)
 8000f8a:	4840      	ldr	r0, [pc, #256]	; (800108c <HAL_GPIO_EXTI_Callback+0x124>)
 8000f8c:	f008 fb42 	bl	8009614 <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 8000f90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f94:	4a3e      	ldr	r2, [pc, #248]	; (8001090 <HAL_GPIO_EXTI_Callback+0x128>)
 8000f96:	493b      	ldr	r1, [pc, #236]	; (8001084 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000f98:	483e      	ldr	r0, [pc, #248]	; (8001094 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000f9a:	f008 fb3b 	bl	8009614 <arm_fir_decimate_f32>

	// filter now with fast convolution
	//---------------------------------
	// shift the FFT buffer to the left
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8000f9e:	493e      	ldr	r1, [pc, #248]	; (8001098 <HAL_GPIO_EXTI_Callback+0x130>)
 8000fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400

	// compute the direct FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);

	// if LSB, copy the LSB in the lower half (USB)
	if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8000fa4:	4c3d      	ldr	r4, [pc, #244]	; (800109c <HAL_GPIO_EXTI_Callback+0x134>)
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8000fa6:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
 8000faa:	f000 fe73 	bl	8001c94 <SDR_memcpy_f32>
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);
 8000fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb2:	4a39      	ldr	r2, [pc, #228]	; (8001098 <HAL_GPIO_EXTI_Callback+0x130>)
 8000fb4:	4936      	ldr	r1, [pc, #216]	; (8001090 <HAL_GPIO_EXTI_Callback+0x128>)
 8000fb6:	4834      	ldr	r0, [pc, #208]	; (8001088 <HAL_GPIO_EXTI_Callback+0x120>)
 8000fb8:	f000 fd5e 	bl	8001a78 <SDR_2R_toC_f32>
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 8000fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc0:	4937      	ldr	r1, [pc, #220]	; (80010a0 <HAL_GPIO_EXTI_Callback+0x138>)
 8000fc2:	4838      	ldr	r0, [pc, #224]	; (80010a4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000fc4:	f000 fe66 	bl	8001c94 <SDR_memcpy_f32>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 8000fc8:	2301      	movs	r3, #1
 8000fca:	2200      	movs	r2, #0
 8000fcc:	4935      	ldr	r1, [pc, #212]	; (80010a4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000fce:	4836      	ldr	r0, [pc, #216]	; (80010a8 <HAL_GPIO_EXTI_Callback+0x140>)
 8000fd0:	f008 fa8a 	bl	80094e8 <arm_cfft_f32>
	if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8000fd4:	7823      	ldrb	r3, [r4, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d048      	beq.n	800106c <HAL_GPIO_EXTI_Callback+0x104>
	// mult. by the fast convolution mask
	arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 8000fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fde:	4a33      	ldr	r2, [pc, #204]	; (80010ac <HAL_GPIO_EXTI_Callback+0x144>)
 8000fe0:	4933      	ldr	r1, [pc, #204]	; (80010b0 <HAL_GPIO_EXTI_Callback+0x148>)
 8000fe2:	4830      	ldr	r0, [pc, #192]	; (80010a4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000fe4:	f008 fcd2 	bl	800998c <arm_cmplx_mult_cmplx_f32>

	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 8000fe8:	2301      	movs	r3, #1
 8000fea:	4930      	ldr	r1, [pc, #192]	; (80010ac <HAL_GPIO_EXTI_Callback+0x144>)
 8000fec:	461a      	mov	r2, r3
 8000fee:	482e      	ldr	r0, [pc, #184]	; (80010a8 <HAL_GPIO_EXTI_Callback+0x140>)
 8000ff0:	f008 fa7a 	bl	80094e8 <arm_cfft_f32>
	// then do the overlap-discard
	SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);
 8000ff4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff8:	492e      	ldr	r1, [pc, #184]	; (80010b4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000ffa:	482f      	ldr	r0, [pc, #188]	; (80010b8 <HAL_GPIO_EXTI_Callback+0x150>)
 8000ffc:	f000 fe4a 	bl	8001c94 <SDR_memcpy_f32>


	// we have now the bandpass filtered I/Q, demodulate the signal
	switch(CurrentMode)
 8001000:	7823      	ldrb	r3, [r4, #0]
 8001002:	2b03      	cmp	r3, #3
 8001004:	d807      	bhi.n	8001016 <HAL_GPIO_EXTI_Callback+0xae>
 8001006:	e8df f003 	tbb	[pc, r3]
 800100a:	022c      	.short	0x022c
 800100c:	1e02      	.short	0x1e02
	case AM :
		SDR_demodAM_AGC(tmpSamp, fAudio);  break;

	case LSB :
	case USB :
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 800100e:	492b      	ldr	r1, [pc, #172]	; (80010bc <HAL_GPIO_EXTI_Callback+0x154>)
 8001010:	4829      	ldr	r0, [pc, #164]	; (80010b8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001012:	f001 f80b 	bl	800202c <SDR_demodSSB_CW_AGC>
 8001016:	4b29      	ldr	r3, [pc, #164]	; (80010bc <HAL_GPIO_EXTI_Callback+0x154>)
{
 8001018:	2200      	movs	r2, #0
	for (i=0; i<BSIZE; i++)
	{
		if (i % 64 > 31)
			fAudio[i] = 0.1; //Volume
		else
			fAudio[i] = -0.1;
 800101a:	4c29      	ldr	r4, [pc, #164]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x158>)
			fAudio[i] = 0.1; //Volume
 800101c:	4829      	ldr	r0, [pc, #164]	; (80010c4 <HAL_GPIO_EXTI_Callback+0x15c>)
		if (i % 64 > 31)
 800101e:	f002 013f 	and.w	r1, r2, #63	; 0x3f
 8001022:	3201      	adds	r2, #1
 8001024:	3304      	adds	r3, #4
 8001026:	291f      	cmp	r1, #31
			fAudio[i] = 0.1; //Volume
 8001028:	bfcc      	ite	gt
 800102a:	f843 0c04 	strgt.w	r0, [r3, #-4]
			fAudio[i] = -0.1;
 800102e:	f843 4c04 	strle.w	r4, [r3, #-4]
	for (i=0; i<BSIZE; i++)
 8001032:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001036:	d1f2      	bne.n	800101e <HAL_GPIO_EXTI_Callback+0xb6>


	// send the demodulated audio to the DMA buffer just emptied

	//LED_YELLOW_ON;
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8001038:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x160>)
 800103a:	4820      	ldr	r0, [pc, #128]	; (80010bc <HAL_GPIO_EXTI_Callback+0x154>)
 800103c:	6819      	ldr	r1, [r3, #0]
	//LED_YELLOW_OFF;


	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 800103e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8001042:	f000 bdbd 	b.w	8001bc0 <SDR_float_to_DAC_audio>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 8001046:	491d      	ldr	r1, [pc, #116]	; (80010bc <HAL_GPIO_EXTI_Callback+0x154>)
 8001048:	481b      	ldr	r0, [pc, #108]	; (80010b8 <HAL_GPIO_EXTI_Callback+0x150>)
 800104a:	f000 ffef 	bl	800202c <SDR_demodSSB_CW_AGC>
		if(bw[CW] == Narrow)
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <HAL_GPIO_EXTI_Callback+0x164>)
 8001050:	78db      	ldrb	r3, [r3, #3]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1df      	bne.n	8001016 <HAL_GPIO_EXTI_Callback+0xae>
			SDR_CWPeak(fAudio, BSIZE);
 8001056:	f44f 7100 	mov.w	r1, #512	; 0x200
 800105a:	4818      	ldr	r0, [pc, #96]	; (80010bc <HAL_GPIO_EXTI_Callback+0x154>)
 800105c:	f000 fee0 	bl	8001e20 <SDR_CWPeak>
 8001060:	e7d9      	b.n	8001016 <HAL_GPIO_EXTI_Callback+0xae>
		SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 8001062:	4916      	ldr	r1, [pc, #88]	; (80010bc <HAL_GPIO_EXTI_Callback+0x154>)
 8001064:	4814      	ldr	r0, [pc, #80]	; (80010b8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001066:	f000 ff65 	bl	8001f34 <SDR_demodAM_AGC>
 800106a:	e7d4      	b.n	8001016 <HAL_GPIO_EXTI_Callback+0xae>
	if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 800106c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001072:	f000 fe2b 	bl	8001ccc <SDR_mirror_LSB>
 8001076:	e7b0      	b.n	8000fda <HAL_GPIO_EXTI_Callback+0x72>
 8001078:	2000d000 	.word	0x2000d000
 800107c:	20009000 	.word	0x20009000
 8001080:	2000b000 	.word	0x2000b000
 8001084:	20007000 	.word	0x20007000
 8001088:	20006800 	.word	0x20006800
 800108c:	24000504 	.word	0x24000504
 8001090:	20006000 	.word	0x20006000
 8001094:	24008754 	.word	0x24008754
 8001098:	24001918 	.word	0x24001918
 800109c:	2400c25c 	.word	0x2400c25c
 80010a0:	24000918 	.word	0x24000918
 80010a4:	20002000 	.word	0x20002000
 80010a8:	0800fd14 	.word	0x0800fd14
 80010ac:	20000000 	.word	0x20000000
 80010b0:	20004000 	.word	0x20004000
 80010b4:	20001000 	.word	0x20001000
 80010b8:	24002a2c 	.word	0x24002a2c
 80010bc:	2400c260 	.word	0x2400c260
 80010c0:	bdcccccd 	.word	0xbdcccccd
 80010c4:	3dcccccd 	.word	0x3dcccccd
 80010c8:	24004304 	.word	0x24004304
 80010cc:	24008d18 	.word	0x24008d18

080010d0 <ADC_Stream0_Handler>:

//-----------------------------------------------------------------------------  
// This the handler of the highest priority task interrupts, those generated
// by DMA2 Stream when a new ADC buffer is just filled
void ADC_Stream0_Handler(uint8_t FullConversion)
{
 80010d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
}
#endif


// compute the new NCO buffer, with the CWpitch offset if receiving CW  
if(CurrentMode == CW)
 80010d4:	4b7c      	ldr	r3, [pc, #496]	; (80012c8 <ADC_Stream0_Handler+0x1f8>)
	pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
 80010d6:	4c7d      	ldr	r4, [pc, #500]	; (80012cc <ADC_Stream0_Handler+0x1fc>)
if(CurrentMode == CW)
 80010d8:	781b      	ldrb	r3, [r3, #0]
	pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
 80010da:	f504 6180 	add.w	r1, r4, #1024	; 0x400
 80010de:	4a7c      	ldr	r2, [pc, #496]	; (80012d0 <ADC_Stream0_Handler+0x200>)
 80010e0:	2800      	cmp	r0, #0
 80010e2:	bf18      	it	ne
 80010e4:	460c      	movne	r4, r1
if(CurrentMode == CW)
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	ed92 0a00 	vldr	s0, [r2]
{
 80010ec:	ed2d 8b10 	vpush	{d8-d15}
 80010f0:	b095      	sub	sp, #84	; 0x54
if(CurrentMode == CW)
 80010f2:	f000 837c 	beq.w	80017ee <ADC_Stream0_Handler+0x71e>
	SDR_ComputeLO(LOfreq-cwpitch);  // prepare next LO buffer
else
	SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 80010f6:	f000 fc03 	bl	8001900 <SDR_ComputeLO>
 80010fa:	f204 33fe 	addw	r3, r4, #1022	; 0x3fe
 80010fe:	1ea2      	subs	r2, r4, #2

// compute the smoothed average value of the buffer, to be used as offset
// in the short words to floating point conversion routine  
sum = 0; k = BSIZE;
 8001100:	ed9f 5a74 	vldr	s10, [pc, #464]	; 80012d4 <ADC_Stream0_Handler+0x204>
while(k)
{
	sum += pR[k-1];
 8001104:	8819      	ldrh	r1, [r3, #0]
 8001106:	3b08      	subs	r3, #8
 8001108:	ee07 1a90 	vmov	s15, r1
	sum += pR[k-2];
 800110c:	88d9      	ldrh	r1, [r3, #6]
 800110e:	ee07 1a10 	vmov	s14, r1
	sum += pR[k-3];
 8001112:	8899      	ldrh	r1, [r3, #4]
	sum += pR[k-1];
 8001114:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
	sum += pR[k-4];
 8001118:	8858      	ldrh	r0, [r3, #2]
	sum += pR[k-3];
 800111a:	ee07 1a90 	vmov	s15, r1
	sum += pR[k-2];
 800111e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	sum += pR[k-4];
 8001122:	ee06 0a90 	vmov	s13, r0
while(k)
 8001126:	429a      	cmp	r2, r3
	sum += pR[k-3];
 8001128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	sum += pR[k-4];
 800112c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001134:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800113c:	ee35 5a27 	vadd.f32	s10, s10, s15
while(k)
 8001140:	d1e0      	bne.n	8001104 <ADC_Stream0_Handler+0x34>
	k-=4;
}

TestSampledValue=pR[BSIZE/2];
 8001142:	f8b4 2200 	ldrh.w	r2, [r4, #512]	; 0x200
 8001146:	2300      	movs	r3, #0

meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8001148:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80012d8 <ADC_Stream0_Handler+0x208>

// downconvert to zero IF, by multiplication by the exp(-jwt) signal
// generated by the NCO, and at the same time convert to floating point  
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 800114c:	4620      	mov	r0, r4
TestSampledValue=pR[BSIZE/2];
 800114e:	ee07 2a90 	vmov	s15, r2
meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8001152:	4e62      	ldr	r6, [pc, #392]	; (80012dc <ADC_Stream0_Handler+0x20c>)
 8001154:	ee25 5a07 	vmul.f32	s10, s10, s14
TestSampledValue=pR[BSIZE/2];
 8001158:	4c61      	ldr	r4, [pc, #388]	; (80012e0 <ADC_Stream0_Handler+0x210>)
 800115a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800115e:	4d61      	ldr	r5, [pc, #388]	; (80012e4 <ADC_Stream0_Handler+0x214>)
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001160:	4a61      	ldr	r2, [pc, #388]	; (80012e8 <ADC_Stream0_Handler+0x218>)
 8001162:	eeb0 0a45 	vmov.f32	s0, s10
 8001166:	4961      	ldr	r1, [pc, #388]	; (80012ec <ADC_Stream0_Handler+0x21c>)
meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8001168:	ed86 5a00 	vstr	s10, [r6]
TestSampledValue=pR[BSIZE/2];
 800116c:	edc4 7a00 	vstr	s15, [r4]
 8001170:	802b      	strh	r3, [r5, #0]
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001172:	f000 fcb3 	bl	8001adc <SDR_downconvert_f32>
// A dividing by 16, order 4, CIC is used. Then a 4096-entry buffer is filled, and
// passed to the baseband interrupt routine, where it is additionally filtered with a
// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
//-------------------------------------------------------------------------

k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
 8001176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117a:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8001374 <ADC_Stream0_Handler+0x2a4>
 800117e:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8001378 <ADC_Stream0_Handler+0x2a8>
while(k--)
 8001182:	23ff      	movs	r3, #255	; 0xff
k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
 8001184:	8029      	strh	r1, [r5, #0]
	//        which being separated in even and odd samples in advance becomes
	// (1 + 6z^-1 + z^-2) for odd samples and (4 + 4z^-1) for even samples, which, when summed, give :
	// odd + 6odd_old + odd_old2 + 4even + 4even_old =	odd + 6odd_old + odd_old2 + 4(even + even_old)

	inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
	outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001186:	eeb1 5a08 	vmov.f32	s10, #24	; 0x40c00000  6.0
 800118a:	4959      	ldr	r1, [pc, #356]	; (80012f0 <ADC_Stream0_Handler+0x220>)
 800118c:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 8001190:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 800137c <ADC_Stream0_Handler+0x2ac>
 8001194:	ed91 4a00 	vldr	s8, [r1]
 8001198:	4956      	ldr	r1, [pc, #344]	; (80012f4 <ADC_Stream0_Handler+0x224>)
 800119a:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 8001380 <ADC_Stream0_Handler+0x2b0>
 800119e:	edd1 4a00 	vldr	s9, [r1]
 80011a2:	4955      	ldr	r1, [pc, #340]	; (80012f8 <ADC_Stream0_Handler+0x228>)
 80011a4:	ed9c fa00 	vldr	s30, [ip]
 80011a8:	ed91 7a00 	vldr	s14, [r1]
 80011ac:	4953      	ldr	r1, [pc, #332]	; (80012fc <ADC_Stream0_Handler+0x22c>)
 80011ae:	edde ea00 	vldr	s29, [lr]
 80011b2:	ed91 2a00 	vldr	s4, [r1]
 80011b6:	4952      	ldr	r1, [pc, #328]	; (8001300 <ADC_Stream0_Handler+0x230>)
 80011b8:	edd8 9a00 	vldr	s19, [r8]
 80011bc:	edd1 7a00 	vldr	s15, [r1]
 80011c0:	4950      	ldr	r1, [pc, #320]	; (8001304 <ADC_Stream0_Handler+0x234>)
 80011c2:	edd9 fa00 	vldr	s31, [r9]
 80011c6:	edd1 2a00 	vldr	s5, [r1]
 80011ca:	494f      	ldr	r1, [pc, #316]	; (8001308 <ADC_Stream0_Handler+0x238>)
 80011cc:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8001384 <ADC_Stream0_Handler+0x2b4>
 80011d0:	ed91 1a00 	vldr	s2, [r1]
 80011d4:	494d      	ldr	r1, [pc, #308]	; (800130c <ADC_Stream0_Handler+0x23c>)
 80011d6:	4c4e      	ldr	r4, [pc, #312]	; (8001310 <ADC_Stream0_Handler+0x240>)
 80011d8:	edd1 1a00 	vldr	s3, [r1]
 80011dc:	494d      	ldr	r1, [pc, #308]	; (8001314 <ADC_Stream0_Handler+0x244>)
 80011de:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 8001388 <ADC_Stream0_Handler+0x2b8>
 80011e2:	ed91 6a00 	vldr	s12, [r1]
 80011e6:	494c      	ldr	r1, [pc, #304]	; (8001318 <ADC_Stream0_Handler+0x248>)
 80011e8:	4a4c      	ldr	r2, [pc, #304]	; (800131c <ADC_Stream0_Handler+0x24c>)
 80011ea:	edd1 aa00 	vldr	s21, [r1]
 80011ee:	494c      	ldr	r1, [pc, #304]	; (8001320 <ADC_Stream0_Handler+0x250>)
 80011f0:	f502 6000 	add.w	r0, r2, #2048	; 0x800
 80011f4:	edd1 6a00 	vldr	s13, [r1]
 80011f8:	494a      	ldr	r1, [pc, #296]	; (8001324 <ADC_Stream0_Handler+0x254>)
 80011fa:	ed91 aa00 	vldr	s20, [r1]
 80011fe:	494a      	ldr	r1, [pc, #296]	; (8001328 <ADC_Stream0_Handler+0x258>)
 8001200:	edd1 ba00 	vldr	s23, [r1]
 8001204:	4949      	ldr	r1, [pc, #292]	; (800132c <ADC_Stream0_Handler+0x25c>)
 8001206:	ed91 ba00 	vldr	s22, [r1]
 800120a:	4949      	ldr	r1, [pc, #292]	; (8001330 <ADC_Stream0_Handler+0x260>)
 800120c:	ed91 3a00 	vldr	s6, [r1]
 8001210:	4948      	ldr	r1, [pc, #288]	; (8001334 <ADC_Stream0_Handler+0x264>)
 8001212:	edd1 ca00 	vldr	s25, [r1]
 8001216:	4948      	ldr	r1, [pc, #288]	; (8001338 <ADC_Stream0_Handler+0x268>)
 8001218:	edd1 3a00 	vldr	s7, [r1]
 800121c:	4947      	ldr	r1, [pc, #284]	; (800133c <ADC_Stream0_Handler+0x26c>)
 800121e:	ed91 ca00 	vldr	s24, [r1]
 8001222:	4947      	ldr	r1, [pc, #284]	; (8001340 <ADC_Stream0_Handler+0x270>)
 8001224:	ed91 ea00 	vldr	s28, [r1]
 8001228:	4946      	ldr	r1, [pc, #280]	; (8001344 <ADC_Stream0_Handler+0x274>)
 800122a:	ed91 9a00 	vldr	s18, [r1]
 800122e:	4946      	ldr	r1, [pc, #280]	; (8001348 <ADC_Stream0_Handler+0x278>)
 8001230:	edd1 0a00 	vldr	s1, [r1]
 8001234:	4945      	ldr	r1, [pc, #276]	; (800134c <ADC_Stream0_Handler+0x27c>)
 8001236:	edcd 0a05 	vstr	s1, [sp, #20]
 800123a:	edd1 0a00 	vldr	s1, [r1]
 800123e:	4944      	ldr	r1, [pc, #272]	; (8001350 <ADC_Stream0_Handler+0x280>)
 8001240:	edcd 0a07 	vstr	s1, [sp, #28]
 8001244:	edd1 0a00 	vldr	s1, [r1]
 8001248:	4942      	ldr	r1, [pc, #264]	; (8001354 <ADC_Stream0_Handler+0x284>)
 800124a:	edcd 0a04 	vstr	s1, [sp, #16]
 800124e:	edd1 0a00 	vldr	s1, [r1]
 8001252:	4941      	ldr	r1, [pc, #260]	; (8001358 <ADC_Stream0_Handler+0x288>)
 8001254:	edcd 0a02 	vstr	s1, [sp, #8]
 8001258:	edd1 0a00 	vldr	s1, [r1]
 800125c:	493f      	ldr	r1, [pc, #252]	; (800135c <ADC_Stream0_Handler+0x28c>)
 800125e:	edcd 0a06 	vstr	s1, [sp, #24]
 8001262:	edd1 0a00 	vldr	s1, [r1]
 8001266:	493e      	ldr	r1, [pc, #248]	; (8001360 <ADC_Stream0_Handler+0x290>)
 8001268:	edcd 0a03 	vstr	s1, [sp, #12]
 800126c:	edd1 0a00 	vldr	s1, [r1]
 8001270:	493c      	ldr	r1, [pc, #240]	; (8001364 <ADC_Stream0_Handler+0x294>)
 8001272:	edcd 0a0d 	vstr	s1, [sp, #52]	; 0x34
 8001276:	edda 0a00 	vldr	s1, [sl]
 800127a:	edcd 0a0f 	vstr	s1, [sp, #60]	; 0x3c
 800127e:	edd4 0a00 	vldr	s1, [r4]
 8001282:	4c39      	ldr	r4, [pc, #228]	; (8001368 <ADC_Stream0_Handler+0x298>)
 8001284:	edcd 0a0c 	vstr	s1, [sp, #48]	; 0x30
 8001288:	edd4 0a00 	vldr	s1, [r4]
 800128c:	4c37      	ldr	r4, [pc, #220]	; (800136c <ADC_Stream0_Handler+0x29c>)
 800128e:	edcd 0a08 	vstr	s1, [sp, #32]
 8001292:	edd4 0a00 	vldr	s1, [r4]
 8001296:	4c36      	ldr	r4, [pc, #216]	; (8001370 <ADC_Stream0_Handler+0x2a0>)
 8001298:	edcd 0a0e 	vstr	s1, [sp, #56]	; 0x38
 800129c:	edd4 0a00 	vldr	s1, [r4]
 80012a0:	f9bb 4000 	ldrsh.w	r4, [fp]
 80012a4:	edcd 0a09 	vstr	s1, [sp, #36]	; 0x24
 80012a8:	eef0 0a64 	vmov.f32	s1, s9
 80012ac:	4626      	mov	r6, r4
 80012ae:	eef0 4a61 	vmov.f32	s9, s3
 80012b2:	460c      	mov	r4, r1
 80012b4:	eef0 1a4f 	vmov.f32	s3, s30
 80012b8:	eeb0 fa4c 	vmov.f32	s30, s24
 80012bc:	eeb0 ca6d 	vmov.f32	s24, s27
 80012c0:	eef0 da4d 	vmov.f32	s27, s26
while(k--)
 80012c4:	e160      	b.n	8001588 <ADC_Stream0_Handler+0x4b8>
 80012c6:	bf00      	nop
 80012c8:	2400c25c 	.word	0x2400c25c
 80012cc:	2400ca60 	.word	0x2400ca60
 80012d0:	24009d28 	.word	0x24009d28
 80012d4:	00000000 	.word	0x00000000
 80012d8:	3b000000 	.word	0x3b000000
 80012dc:	2400c240 	.word	0x2400c240
 80012e0:	2400c258 	.word	0x2400c258
 80012e4:	24000490 	.word	0x24000490
 80012e8:	24007ed8 	.word	0x24007ed8
 80012ec:	240076c8 	.word	0x240076c8
 80012f0:	24000404 	.word	0x24000404
 80012f4:	24000400 	.word	0x24000400
 80012f8:	2400043c 	.word	0x2400043c
 80012fc:	24000438 	.word	0x24000438
 8001300:	24000434 	.word	0x24000434
 8001304:	24000430 	.word	0x24000430
 8001308:	2400040c 	.word	0x2400040c
 800130c:	24000408 	.word	0x24000408
 8001310:	2400048c 	.word	0x2400048c
 8001314:	2400044c 	.word	0x2400044c
 8001318:	24000448 	.word	0x24000448
 800131c:	240076d0 	.word	0x240076d0
 8001320:	24000444 	.word	0x24000444
 8001324:	24000440 	.word	0x24000440
 8001328:	24000414 	.word	0x24000414
 800132c:	24000410 	.word	0x24000410
 8001330:	2400045c 	.word	0x2400045c
 8001334:	24000458 	.word	0x24000458
 8001338:	24000454 	.word	0x24000454
 800133c:	24000450 	.word	0x24000450
 8001340:	24000418 	.word	0x24000418
 8001344:	24000464 	.word	0x24000464
 8001348:	24000424 	.word	0x24000424
 800134c:	24000420 	.word	0x24000420
 8001350:	2400047c 	.word	0x2400047c
 8001354:	24000478 	.word	0x24000478
 8001358:	24000474 	.word	0x24000474
 800135c:	24000470 	.word	0x24000470
 8001360:	2400042c 	.word	0x2400042c
 8001364:	24007ee0 	.word	0x24007ee0
 8001368:	24000488 	.word	0x24000488
 800136c:	24000484 	.word	0x24000484
 8001370:	24000480 	.word	0x24000480
 8001374:	2400041c 	.word	0x2400041c
 8001378:	2400046c 	.word	0x2400046c
 800137c:	24000468 	.word	0x24000468
 8001380:	24000460 	.word	0x24000460
 8001384:	24000428 	.word	0x24000428
 8001388:	240003fc 	.word	0x240003fc
	// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
	// produced using 4 input samples, totalling a decimation by 2
	// now compute the couple of elements for the next step

	inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
	outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 800138c:	eeaa 6a85 	vfma.f32	s12, s21, s10

	inE2Rold = inER;                           inE2Iold = inEI;
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;

	if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 8001390:	0799      	lsls	r1, r3, #30
	outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 8001392:	eeea 6a05 	vfma.f32	s13, s20, s10
 8001396:	ee3d 4aa4 	vadd.f32	s8, s27, s9
 800139a:	ee31 1a0c 	vadd.f32	s2, s2, s24
 800139e:	eea1 6a25 	vfma.f32	s12, s2, s11
 80013a2:	eee4 6a25 	vfma.f32	s13, s8, s11
 80013a6:	ee76 4a07 	vadd.f32	s9, s12, s14
 80013aa:	ee36 4aa7 	vadd.f32	s8, s13, s15
	if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 80013ae:	f100 810d 	bmi.w	80015cc <ADC_Stream0_Handler+0x4fc>
	// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
	// and the odd element in outR, outI
	// now compute the couple of elements for the next step

	inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
	outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 80013b2:	eeac 3a85 	vfma.f32	s6, s25, s10
 80013b6:	eddd 6a00 	vldr	s13, [sp]
 80013ba:	eeef 3a05 	vfma.f32	s7, s30, s10
 80013be:	ed9d 6a01 	vldr	s12, [sp, #4]
 80013c2:	ee76 baab 	vadd.f32	s23, s13, s23

	inE3Rold  = inER;                          inE3Iold  = inEI;
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

	if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 80013c6:	075f      	lsls	r7, r3, #29
	outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 80013c8:	ee36 ba0b 	vadd.f32	s22, s12, s22
 80013cc:	eeab 3aa5 	vfma.f32	s6, s23, s11
 80013d0:	eeeb 3a25 	vfma.f32	s7, s22, s11
 80013d4:	ee33 1a24 	vadd.f32	s2, s6, s9
 80013d8:	ee73 0a84 	vadd.f32	s1, s7, s8
	if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 80013dc:	f100 8196 	bmi.w	800170c <ADC_Stream0_Handler+0x63c>
	// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
	// produced using 4 input samples, totalling a decimation by 8
	// now compute the couple of elements for the next step

	inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
	outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 80013e0:	eeef 9a85 	vfma.f32	s19, s31, s10
 80013e4:	eddd 3a0b 	vldr	s7, [sp, #44]	; 0x2c
 80013e8:	eea1 9a85 	vfma.f32	s18, s3, s10
 80013ec:	ed9d 3a0a 	vldr	s6, [sp, #40]	; 0x28
 80013f0:	ee7e eaa3 	vadd.f32	s29, s29, s7

	inE4Rold = inER;                           inE4Iold = inEI;
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

	if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 80013f4:	0719      	lsls	r1, r3, #28
	outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 80013f6:	ee3e ea03 	vadd.f32	s28, s28, s6
 80013fa:	eeee 9aa5 	vfma.f32	s19, s29, s11
 80013fe:	eeae 9a25 	vfma.f32	s18, s28, s11
 8001402:	ee39 ba81 	vadd.f32	s22, s19, s2
 8001406:	ee79 ba20 	vadd.f32	s23, s18, s1
	if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 800140a:	f100 819c 	bmi.w	8001746 <ADC_Stream0_Handler+0x676>
	// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
	// and the odd element in outR, outI
	// now compute the couple of elements for the next step

	inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
	outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 800140e:	ed9d ea04 	vldr	s28, [sp, #16]

	inE5Rold  = inER;                          inE5Iold  = inEI;
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;

	if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001412:	f013 0110 	ands.w	r1, r3, #16
	outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001416:	ed9d 9a02 	vldr	s18, [sp, #8]
 800141a:	eddd ea06 	vldr	s29, [sp, #24]
 800141e:	eddd 9a03 	vldr	s19, [sp, #12]
 8001422:	eea9 ea05 	vfma.f32	s28, s18, s10
 8001426:	ed9d 3a05 	vldr	s6, [sp, #20]
 800142a:	eddd 3a11 	vldr	s7, [sp, #68]	; 0x44
 800142e:	eee9 ea85 	vfma.f32	s29, s19, s10
 8001432:	eddd 6a07 	vldr	s13, [sp, #28]
 8001436:	ee33 6a83 	vadd.f32	s12, s7, s6
 800143a:	ed9d 3a10 	vldr	s6, [sp, #64]	; 0x40
	if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 800143e:	9105      	str	r1, [sp, #20]
	outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001440:	ee73 6a26 	vadd.f32	s13, s6, s13
 8001444:	eea6 ea25 	vfma.f32	s28, s12, s11
 8001448:	eee6 eaa5 	vfma.f32	s29, s13, s11
 800144c:	ee3e ea0b 	vadd.f32	s28, s28, s22
 8001450:	ee7e eaab 	vadd.f32	s29, s29, s23
	if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001454:	f040 81a0 	bne.w	8001798 <ADC_Stream0_Handler+0x6c8>
	// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
	// produced with 4 of the previous elem, i.e. with 16 input samples, totalling
	// a decimation by 16. Now compute the couple of elements for the next step

	inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001458:	ed9d 6a08 	vldr	s12, [sp, #32]
	// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
	// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band

	// create a block of BSIZE*4 entries, which will be then decimated by 4

	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800145c:	00b1      	lsls	r1, r6, #2
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800145e:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001462:	3601      	adds	r6, #1
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001464:	eddd 3a09 	vldr	s7, [sp, #36]	; 0x24
 8001468:	eee6 6a05 	vfma.f32	s13, s12, s10
 800146c:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 8001470:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001474:	b236      	sxth	r6, r6
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001476:	eea3 6a85 	vfma.f32	s12, s7, s10
 800147a:	eddd 3a0d 	vldr	s7, [sp, #52]	; 0x34
 800147e:	ed9d 9a0f 	vldr	s18, [sp, #60]	; 0x3c
	//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

	if(idx < BSIZE*4)
 8001482:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001486:	ee73 3a23 	vadd.f32	s7, s6, s7
 800148a:	ed9d 3a13 	vldr	s6, [sp, #76]	; 0x4c
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800148e:	4fdc      	ldr	r7, [pc, #880]	; (8001800 <ADC_Stream0_Handler+0x730>)
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001490:	ee33 3a09 	vadd.f32	s6, s6, s18
 8001494:	eee3 6aa5 	vfma.f32	s13, s7, s11
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001498:	440f      	add	r7, r1
 800149a:	eddf 3ada 	vldr	s7, [pc, #872]	; 8001804 <ADC_Stream0_Handler+0x734>
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800149e:	eea3 6a25 	vfma.f32	s12, s6, s11
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80014a2:	9704      	str	r7, [sp, #16]
 80014a4:	4fd8      	ldr	r7, [pc, #864]	; (8001808 <ADC_Stream0_Handler+0x738>)
 80014a6:	4439      	add	r1, r7
 80014a8:	9f04      	ldr	r7, [sp, #16]
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80014aa:	ee76 6a8e 	vadd.f32	s13, s13, s28
 80014ae:	ee36 6a2e 	vadd.f32	s12, s12, s29
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80014b2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80014b6:	ee26 6a23 	vmul.f32	s12, s12, s7
 80014ba:	edc7 6a00 	vstr	s13, [r7]
 80014be:	ed81 6a00 	vstr	s12, [r1]
	if(idx < BSIZE*4)
 80014c2:	f2c0 81e3 	blt.w	800188c <ADC_Stream0_Handler+0x7bc>

#endif

		// generate now an interrupt to signal the base band processing routine that it has a new buffer

		EXTI->SWIER1 |= GPIO_PIN_14;
 80014c6:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80014ca:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 80014ce:	ed9d 9a02 	vldr	s18, [sp, #8]
 80014d2:	eef0 3a4f 	vmov.f32	s7, s30
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	eeb0 3a6c 	vmov.f32	s6, s25
 80014dc:	ed9d 6a08 	vldr	s12, [sp, #32]
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80014e0:	eeb0 fa44 	vmov.f32	s30, s8
		EXTI->SWIER1 |= GPIO_PIN_14;
 80014e4:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80014e8:	eef0 6a4a 	vmov.f32	s13, s20
 80014ec:	edcd 9a06 	vstr	s19, [sp, #24]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80014f0:	eeb0 aa67 	vmov.f32	s20, s15
		EXTI->SWIER1 |= GPIO_PIN_14;
 80014f4:	ed8d 9a04 	vstr	s18, [sp, #16]
 80014f8:	eef0 9a6f 	vmov.f32	s19, s31
 80014fc:	eeb0 9a61 	vmov.f32	s18, s3
 8001500:	ed8d 6a0c 	vstr	s12, [sp, #48]	; 0x30
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001504:	eef0 1a60 	vmov.f32	s3, s1
		EXTI->SWIER1 |= GPIO_PIN_14;
 8001508:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800150c:	eef0 fa41 	vmov.f32	s31, s2
	inE6Rold = inER;                           inE6Iold = inEI;
 8001510:	ed9d 4a13 	vldr	s8, [sp, #76]	; 0x4c
		EXTI->SWIER1 |= GPIO_PIN_14;
 8001514:	eeb0 6a6a 	vmov.f32	s12, s21
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001518:	edcd ea09 	vstr	s29, [sp, #36]	; 0x24
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800151c:	eef0 ca64 	vmov.f32	s25, s9
	inE6Rold = inER;                           inE6Iold = inEI;
 8001520:	eddd 4a12 	vldr	s9, [sp, #72]	; 0x48
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001524:	eef0 aa47 	vmov.f32	s21, s14
	inE5Rold  = inER;                          inE5Iold  = inEI;
 8001528:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800152c:	ed8d ea08 	vstr	s28, [sp, #32]
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001530:	edcd ba03 	vstr	s23, [sp, #12]
 8001534:	ed8d ba02 	vstr	s22, [sp, #8]
	idx = 0;
 8001538:	9e05      	ldr	r6, [sp, #20]
		EXTI->SWIER1 |= GPIO_PIN_14;
 800153a:	60b9      	str	r1, [r7, #8]
	inE6Rold = inER;                           inE6Iold = inEI;
 800153c:	ed8d 4a0f 	vstr	s8, [sp, #60]	; 0x3c
 8001540:	edcd 4a0d 	vstr	s9, [sp, #52]	; 0x34
	inE5Rold  = inER;                          inE5Iold  = inEI;
 8001544:	ed8d 7a07 	vstr	s14, [sp, #28]
	inE2Rold = inER;                           inE2Iold = inEI;
 8001548:	eef0 4a6d 	vmov.f32	s9, s27
	inE5Rold  = inER;                          inE5Iold  = inEI;
 800154c:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
	inE2Rold = inER;                           inE2Iold = inEI;
 8001550:	eeb0 1a4c 	vmov.f32	s2, s24
	inE3Rold  = inER;                          inE3Iold  = inEI;
 8001554:	ed9d ba01 	vldr	s22, [sp, #4]
 8001558:	eddd ba00 	vldr	s23, [sp]
	inE4Rold = inER;                           inE4Iold = inEI;
 800155c:	ed9d ea0a 	vldr	s28, [sp, #40]	; 0x28
 8001560:	eddd ea0b 	vldr	s29, [sp, #44]	; 0x2c
	inE5Rold  = inER;                          inE5Iold  = inEI;
 8001564:	edcd 7a05 	vstr	s15, [sp, #20]
 8001568:	3b01      	subs	r3, #1
	inE1Rold = inER;                           inE1Iold = inEI;
 800156a:	eef0 7a62 	vmov.f32	s15, s5
 800156e:	eeb0 7a42 	vmov.f32	s14, s4
 8001572:	3208      	adds	r2, #8
 8001574:	eef0 0a4d 	vmov.f32	s1, s26
 8001578:	b29b      	uxth	r3, r3
	inO1Rold2 = inO1Rold; inO1Rold = inOR;     inO1Iold2 = inO1Iold; inO1Iold = inOI;
 800157a:	eef0 2a68 	vmov.f32	s5, s17
 800157e:	3408      	adds	r4, #8
	inE1Rold = inER;                           inE1Iold = inEI;
 8001580:	eeb0 4a48 	vmov.f32	s8, s16
	inO1Rold2 = inO1Rold; inO1Rold = inOR;     inO1Iold2 = inO1Iold; inO1Iold = inOI;
 8001584:	eeb0 2a40 	vmov.f32	s4, s0
while(k--)
 8001588:	4290      	cmp	r0, r2
 800158a:	d030      	beq.n	80015ee <ADC_Stream0_Handler+0x51e>
	outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 800158c:	eea2 7a05 	vfma.f32	s14, s4, s10
	inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 8001590:	ed12 0a01 	vldr	s0, [r2, #-4]
	outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001594:	eee2 7a85 	vfma.f32	s15, s5, s10
	inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 8001598:	ed12 8a02 	vldr	s16, [r2, #-8]
 800159c:	ed54 8a01 	vldr	s17, [r4, #-4]
	if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 80015a0:	07df      	lsls	r7, r3, #31
	inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 80015a2:	ed14 da02 	vldr	s26, [r4, #-8]
	outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 80015a6:	ee34 4a08 	vadd.f32	s8, s8, s16
 80015aa:	ee70 0a8d 	vadd.f32	s1, s1, s26
 80015ae:	ee37 7a00 	vadd.f32	s14, s14, s0
 80015b2:	ee77 7aa8 	vadd.f32	s15, s15, s17
 80015b6:	eea4 7a25 	vfma.f32	s14, s8, s11
 80015ba:	eee0 7aa5 	vfma.f32	s15, s1, s11
	if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 80015be:	f57f aee5 	bpl.w	800138c <ADC_Stream0_Handler+0x2bc>
		tmp1R = outR; tmp1I = outI;  // save the even element produced
 80015c2:	eef0 da67 	vmov.f32	s27, s15
 80015c6:	eeb0 ca47 	vmov.f32	s24, s14
 80015ca:	e7cd      	b.n	8001568 <ADC_Stream0_Handler+0x498>
 80015cc:	eef0 6a4a 	vmov.f32	s13, s20
		tmp2R = outR; tmp2I = outI;  // save the even element produced
 80015d0:	edcd 4a00 	vstr	s9, [sp]
 80015d4:	eeb0 6a6a 	vmov.f32	s12, s21
 80015d8:	ed8d 4a01 	vstr	s8, [sp, #4]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80015dc:	eeb0 aa67 	vmov.f32	s20, s15
 80015e0:	eef0 aa47 	vmov.f32	s21, s14
	inE2Rold = inER;                           inE2Iold = inEI;
 80015e4:	eef0 4a6d 	vmov.f32	s9, s27
 80015e8:	eeb0 1a4c 	vmov.f32	s2, s24
 80015ec:	e7bc      	b.n	8001568 <ADC_Stream0_Handler+0x498>
 80015ee:	4a87      	ldr	r2, [pc, #540]	; (800180c <ADC_Stream0_Handler+0x73c>)
 80015f0:	eeb0 ca4f 	vmov.f32	s24, s30
 80015f4:	eeb0 fa61 	vmov.f32	s30, s3
 80015f8:	edc9 fa00 	vstr	s31, [r9]
 80015fc:	ed82 9a00 	vstr	s18, [r2]
 8001600:	eef0 1a64 	vmov.f32	s3, s9
 8001604:	4a82      	ldr	r2, [pc, #520]	; (8001810 <ADC_Stream0_Handler+0x740>)
 8001606:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800160a:	edc8 9a00 	vstr	s19, [r8]
 800160e:	ed82 ea00 	vstr	s28, [r2]
 8001612:	4a80      	ldr	r2, [pc, #512]	; (8001814 <ADC_Stream0_Handler+0x744>)
 8001614:	edce ea00 	vstr	s29, [lr]
 8001618:	ed82 2a00 	vstr	s4, [r2]
 800161c:	4a7e      	ldr	r2, [pc, #504]	; (8001818 <ADC_Stream0_Handler+0x748>)
 800161e:	ed8c fa00 	vstr	s30, [ip]
 8001622:	ed82 7a00 	vstr	s14, [r2]
 8001626:	4a7d      	ldr	r2, [pc, #500]	; (800181c <ADC_Stream0_Handler+0x74c>)
 8001628:	ed82 4a00 	vstr	s8, [r2]
 800162c:	4a7c      	ldr	r2, [pc, #496]	; (8001820 <ADC_Stream0_Handler+0x750>)
 800162e:	edc2 2a00 	vstr	s5, [r2]
 8001632:	4a7c      	ldr	r2, [pc, #496]	; (8001824 <ADC_Stream0_Handler+0x754>)
 8001634:	edc2 7a00 	vstr	s15, [r2]
 8001638:	4a7b      	ldr	r2, [pc, #492]	; (8001828 <ADC_Stream0_Handler+0x758>)
 800163a:	eddd 7a02 	vldr	s15, [sp, #8]
 800163e:	edc2 0a00 	vstr	s1, [r2]
 8001642:	4a7a      	ldr	r2, [pc, #488]	; (800182c <ADC_Stream0_Handler+0x75c>)
 8001644:	edc2 aa00 	vstr	s21, [r2]
 8001648:	4a79      	ldr	r2, [pc, #484]	; (8001830 <ADC_Stream0_Handler+0x760>)
 800164a:	ed82 6a00 	vstr	s12, [r2]
 800164e:	4a79      	ldr	r2, [pc, #484]	; (8001834 <ADC_Stream0_Handler+0x764>)
 8001650:	ed82 1a00 	vstr	s2, [r2]
 8001654:	4a78      	ldr	r2, [pc, #480]	; (8001838 <ADC_Stream0_Handler+0x768>)
 8001656:	ed82 aa00 	vstr	s20, [r2]
 800165a:	4a78      	ldr	r2, [pc, #480]	; (800183c <ADC_Stream0_Handler+0x76c>)
 800165c:	edc2 6a00 	vstr	s13, [r2]
 8001660:	4a77      	ldr	r2, [pc, #476]	; (8001840 <ADC_Stream0_Handler+0x770>)
 8001662:	edc2 1a00 	vstr	s3, [r2]
 8001666:	4a77      	ldr	r2, [pc, #476]	; (8001844 <ADC_Stream0_Handler+0x774>)
 8001668:	edc2 ca00 	vstr	s25, [r2]
 800166c:	4a76      	ldr	r2, [pc, #472]	; (8001848 <ADC_Stream0_Handler+0x778>)
 800166e:	ed82 3a00 	vstr	s6, [r2]
 8001672:	4a76      	ldr	r2, [pc, #472]	; (800184c <ADC_Stream0_Handler+0x77c>)
 8001674:	edc2 ba00 	vstr	s23, [r2]
 8001678:	4a75      	ldr	r2, [pc, #468]	; (8001850 <ADC_Stream0_Handler+0x780>)
 800167a:	ed82 ca00 	vstr	s24, [r2]
 800167e:	4a75      	ldr	r2, [pc, #468]	; (8001854 <ADC_Stream0_Handler+0x784>)
 8001680:	edc2 3a00 	vstr	s7, [r2]
 8001684:	4a74      	ldr	r2, [pc, #464]	; (8001858 <ADC_Stream0_Handler+0x788>)
 8001686:	ed82 ba00 	vstr	s22, [r2]
 800168a:	4a74      	ldr	r2, [pc, #464]	; (800185c <ADC_Stream0_Handler+0x78c>)
 800168c:	edc2 7a00 	vstr	s15, [r2]
 8001690:	eddd 7a04 	vldr	s15, [sp, #16]
 8001694:	4a72      	ldr	r2, [pc, #456]	; (8001860 <ADC_Stream0_Handler+0x790>)
 8001696:	edc2 7a00 	vstr	s15, [r2]
 800169a:	eddd 7a05 	vldr	s15, [sp, #20]
 800169e:	4a71      	ldr	r2, [pc, #452]	; (8001864 <ADC_Stream0_Handler+0x794>)
 80016a0:	edc2 7a00 	vstr	s15, [r2]
 80016a4:	eddd 7a03 	vldr	s15, [sp, #12]
 80016a8:	4a6f      	ldr	r2, [pc, #444]	; (8001868 <ADC_Stream0_Handler+0x798>)
 80016aa:	edc2 7a00 	vstr	s15, [r2]
 80016ae:	eddd 7a06 	vldr	s15, [sp, #24]
 80016b2:	4a6e      	ldr	r2, [pc, #440]	; (800186c <ADC_Stream0_Handler+0x79c>)
 80016b4:	802b      	strh	r3, [r5, #0]
 80016b6:	edc2 7a00 	vstr	s15, [r2]
 80016ba:	eddd 7a07 	vldr	s15, [sp, #28]
 80016be:	4a6c      	ldr	r2, [pc, #432]	; (8001870 <ADC_Stream0_Handler+0x7a0>)
 80016c0:	4b6c      	ldr	r3, [pc, #432]	; (8001874 <ADC_Stream0_Handler+0x7a4>)
 80016c2:	edc2 7a00 	vstr	s15, [r2]
 80016c6:	eddd 7a08 	vldr	s15, [sp, #32]
 80016ca:	4a6b      	ldr	r2, [pc, #428]	; (8001878 <ADC_Stream0_Handler+0x7a8>)
 80016cc:	f8ab 6000 	strh.w	r6, [fp]
 80016d0:	edc2 7a00 	vstr	s15, [r2]
 80016d4:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 80016d8:	edc3 7a00 	vstr	s15, [r3]
 80016dc:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80016e0:	4b66      	ldr	r3, [pc, #408]	; (800187c <ADC_Stream0_Handler+0x7ac>)
 80016e2:	edc3 7a00 	vstr	s15, [r3]
 80016e6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80016ea:	4b65      	ldr	r3, [pc, #404]	; (8001880 <ADC_Stream0_Handler+0x7b0>)
 80016ec:	edc3 7a00 	vstr	s15, [r3]
 80016f0:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80016f4:	4b63      	ldr	r3, [pc, #396]	; (8001884 <ADC_Stream0_Handler+0x7b4>)
 80016f6:	edc3 7a00 	vstr	s15, [r3]
 80016fa:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80016fe:	edca 7a00 	vstr	s15, [sl]
	}

	// LED_YELLOW_OFF;

}
 8001702:	b015      	add	sp, #84	; 0x54
 8001704:	ecbd 8b10 	vpop	{d8-d15}
 8001708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800170c:	eeb0 ba46 	vmov.f32	s22, s12
		tmp3R = outR; tmp3I = outI;  // save the even element produced
 8001710:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 8001714:	eef0 ba66 	vmov.f32	s23, s13
 8001718:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 800171c:	eef0 3a4f 	vmov.f32	s7, s30
 8001720:	eeb0 3a6c 	vmov.f32	s6, s25
 8001724:	eef0 6a4a 	vmov.f32	s13, s20
 8001728:	eeb0 6a6a 	vmov.f32	s12, s21
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800172c:	eef0 ca64 	vmov.f32	s25, s9
 8001730:	eeb0 fa44 	vmov.f32	s30, s8
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001734:	eeb0 aa67 	vmov.f32	s20, s15
 8001738:	eef0 aa47 	vmov.f32	s21, s14
	inE2Rold = inER;                           inE2Iold = inEI;
 800173c:	eef0 4a6d 	vmov.f32	s9, s27
 8001740:	eeb0 1a4c 	vmov.f32	s2, s24
 8001744:	e710      	b.n	8001568 <ADC_Stream0_Handler+0x498>
 8001746:	eeb0 ea43 	vmov.f32	s28, s6
		tmp4R = outR; tmp4I = outI;  // save the even element produced
 800174a:	edcd ba10 	vstr	s23, [sp, #64]	; 0x40
 800174e:	eef0 ea63 	vmov.f32	s29, s7
 8001752:	ed8d ba11 	vstr	s22, [sp, #68]	; 0x44
 8001756:	eef0 3a4f 	vmov.f32	s7, s30
	inE3Rold  = inER;                          inE3Iold  = inEI;
 800175a:	ed9d ba01 	vldr	s22, [sp, #4]
 800175e:	eeb0 3a6c 	vmov.f32	s6, s25
 8001762:	eddd ba00 	vldr	s23, [sp]
 8001766:	eef0 6a4a 	vmov.f32	s13, s20
 800176a:	eeb0 6a6a 	vmov.f32	s12, s21
 800176e:	eeb0 9a61 	vmov.f32	s18, s3
 8001772:	eef0 9a6f 	vmov.f32	s19, s31
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001776:	eef0 ca64 	vmov.f32	s25, s9
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800177a:	eef0 fa41 	vmov.f32	s31, s2
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800177e:	eeb0 fa44 	vmov.f32	s30, s8
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001782:	eeb0 aa67 	vmov.f32	s20, s15
 8001786:	eef0 aa47 	vmov.f32	s21, s14
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800178a:	eef0 1a60 	vmov.f32	s3, s1
	inE2Rold = inER;                           inE2Iold = inEI;
 800178e:	eef0 4a6d 	vmov.f32	s9, s27
 8001792:	eeb0 1a4c 	vmov.f32	s2, s24
 8001796:	e6e7      	b.n	8001568 <ADC_Stream0_Handler+0x498>
 8001798:	eddd 6a02 	vldr	s13, [sp, #8]
 800179c:	eef0 3a4f 	vmov.f32	s7, s30
 80017a0:	edcd 9a06 	vstr	s19, [sp, #24]
 80017a4:	eeb0 3a6c 	vmov.f32	s6, s25
 80017a8:	edcd 6a04 	vstr	s13, [sp, #16]
 80017ac:	eeb0 6a6a 	vmov.f32	s12, s21
 80017b0:	eef0 6a4a 	vmov.f32	s13, s20
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80017b4:	edcd ba03 	vstr	s23, [sp, #12]
 80017b8:	eeb0 9a61 	vmov.f32	s18, s3
 80017bc:	ed8d ba02 	vstr	s22, [sp, #8]
 80017c0:	eef0 9a6f 	vmov.f32	s19, s31
		tmp5R = outR; tmp5I = outI;  // save the even element produced
 80017c4:	edcd ea13 	vstr	s29, [sp, #76]	; 0x4c
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80017c8:	eeb0 fa44 	vmov.f32	s30, s8
		tmp5R = outR; tmp5I = outI;  // save the even element produced
 80017cc:	ed8d ea12 	vstr	s28, [sp, #72]	; 0x48
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80017d0:	eef0 ca64 	vmov.f32	s25, s9
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80017d4:	eeb0 aa67 	vmov.f32	s20, s15
 80017d8:	eef0 aa47 	vmov.f32	s21, s14
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80017dc:	eef0 1a60 	vmov.f32	s3, s1
 80017e0:	eef0 fa41 	vmov.f32	s31, s2
	inE5Rold  = inER;                          inE5Iold  = inEI;
 80017e4:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 80017e8:	edcd 7a07 	vstr	s15, [sp, #28]
 80017ec:	e6ac      	b.n	8001548 <ADC_Stream0_Handler+0x478>
	SDR_ComputeLO(LOfreq-cwpitch);  // prepare next LO buffer
 80017ee:	4b26      	ldr	r3, [pc, #152]	; (8001888 <ADC_Stream0_Handler+0x7b8>)
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80017f8:	f000 f882 	bl	8001900 <SDR_ComputeLO>
 80017fc:	e47d      	b.n	80010fa <ADC_Stream0_Handler+0x2a>
 80017fe:	bf00      	nop
 8001800:	2000d000 	.word	0x2000d000
 8001804:	34000000 	.word	0x34000000
 8001808:	2000b000 	.word	0x2000b000
 800180c:	24000464 	.word	0x24000464
 8001810:	24000418 	.word	0x24000418
 8001814:	24000438 	.word	0x24000438
 8001818:	2400043c 	.word	0x2400043c
 800181c:	24000404 	.word	0x24000404
 8001820:	24000430 	.word	0x24000430
 8001824:	24000434 	.word	0x24000434
 8001828:	24000400 	.word	0x24000400
 800182c:	24000448 	.word	0x24000448
 8001830:	2400044c 	.word	0x2400044c
 8001834:	2400040c 	.word	0x2400040c
 8001838:	24000440 	.word	0x24000440
 800183c:	24000444 	.word	0x24000444
 8001840:	24000408 	.word	0x24000408
 8001844:	24000458 	.word	0x24000458
 8001848:	2400045c 	.word	0x2400045c
 800184c:	24000414 	.word	0x24000414
 8001850:	24000450 	.word	0x24000450
 8001854:	24000454 	.word	0x24000454
 8001858:	24000410 	.word	0x24000410
 800185c:	24000478 	.word	0x24000478
 8001860:	2400047c 	.word	0x2400047c
 8001864:	24000424 	.word	0x24000424
 8001868:	24000470 	.word	0x24000470
 800186c:	24000474 	.word	0x24000474
 8001870:	24000420 	.word	0x24000420
 8001874:	2400048c 	.word	0x2400048c
 8001878:	24000488 	.word	0x24000488
 800187c:	2400042c 	.word	0x2400042c
 8001880:	24000480 	.word	0x24000480
 8001884:	24000484 	.word	0x24000484
 8001888:	24009d20 	.word	0x24009d20
 800188c:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 8001890:	eef0 3a4f 	vmov.f32	s7, s30
 8001894:	eeb0 3a6c 	vmov.f32	s6, s25
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001898:	edcd ea09 	vstr	s29, [sp, #36]	; 0x24
 800189c:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80018a0:	eeb0 6a6a 	vmov.f32	s12, s21
 80018a4:	eddd 6a08 	vldr	s13, [sp, #32]
 80018a8:	eeb0 9a61 	vmov.f32	s18, s3
 80018ac:	eef0 9a6f 	vmov.f32	s19, s31
 80018b0:	ed8d ea08 	vstr	s28, [sp, #32]
 80018b4:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80018b8:	eeb0 fa44 	vmov.f32	s30, s8
 80018bc:	eddd 6a03 	vldr	s13, [sp, #12]
 80018c0:	eef0 ca64 	vmov.f32	s25, s9
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80018c4:	edcd ba03 	vstr	s23, [sp, #12]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80018c8:	eef0 aa47 	vmov.f32	s21, s14
 80018cc:	edcd 6a06 	vstr	s13, [sp, #24]
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80018d0:	eef0 1a60 	vmov.f32	s3, s1
 80018d4:	eddd 6a02 	vldr	s13, [sp, #8]
 80018d8:	eef0 fa41 	vmov.f32	s31, s2
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80018dc:	ed8d ba02 	vstr	s22, [sp, #8]
 80018e0:	edcd 6a04 	vstr	s13, [sp, #16]
 80018e4:	eef0 6a4a 	vmov.f32	s13, s20
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80018e8:	eeb0 aa67 	vmov.f32	s20, s15
	inE6Rold = inER;                           inE6Iold = inEI;
 80018ec:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 80018f0:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 80018f4:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 80018f8:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 80018fc:	e772      	b.n	80017e4 <ADC_Stream0_Handler+0x714>
 80018fe:	bf00      	nop

08001900 <SDR_ComputeLO>:

#include "Globals.h"

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 8001900:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
  static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f, 
	                ypi, ypq, tmpi, gain=1.f;
	
	if (oldfreq != freq)
 8001902:	4b4f      	ldr	r3, [pc, #316]	; (8001a40 <SDR_ComputeLO+0x140>)
 8001904:	edd3 7a00 	vldr	s15, [r3]
 8001908:	eef4 7a40 	vcmp.f32	s15, s0
{
 800190c:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 8001910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001914:	d171      	bne.n	80019fa <SDR_ComputeLO+0xfa>
 8001916:	4a4b      	ldr	r2, [pc, #300]	; (8001a44 <SDR_ComputeLO+0x144>)
 8001918:	4b4b      	ldr	r3, [pc, #300]	; (8001a48 <SDR_ComputeLO+0x148>)
 800191a:	ed92 8a00 	vldr	s16, [r2]
 800191e:	ed93 6a00 	vldr	s12, [r3]
// Coupled Quadrature Oscillator with level stabilization	
	while(k)
	{                    
// loop partially unrolled for performance		

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001922:	484a      	ldr	r0, [pc, #296]	; (8001a4c <SDR_ComputeLO+0x14c>)
 8001924:	4c4a      	ldr	r4, [pc, #296]	; (8001a50 <SDR_ComputeLO+0x150>)
 8001926:	4d4b      	ldr	r5, [pc, #300]	; (8001a54 <SDR_ComputeLO+0x154>)
 8001928:	4b4b      	ldr	r3, [pc, #300]	; (8001a58 <SDR_ComputeLO+0x158>)
 800192a:	edd0 5a00 	vldr	s11, [r0]
 800192e:	edd4 7a00 	vldr	s15, [r4]
 8001932:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8001936:	ed95 5a00 	vldr	s10, [r5]
 800193a:	4a48      	ldr	r2, [pc, #288]	; (8001a5c <SDR_ComputeLO+0x15c>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800193c:	ee27 7a88 	vmul.f32	s14, s15, s16
 8001940:	3310      	adds	r3, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001942:	ee66 7a67 	vnmul.f32	s15, s12, s15
 8001946:	3210      	adds	r2, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001948:	eea5 7a06 	vfma.f32	s14, s10, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800194c:	eee5 7a08 	vfma.f32	s15, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001950:	ee27 7a25 	vmul.f32	s14, s14, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001954:	ee67 6aa5 	vmul.f32	s13, s15, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001958:	ee67 7a08 	vmul.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800195c:	ed02 7a08 	vstr	s14, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001960:	ee26 7a47 	vnmul.f32	s14, s12, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001964:	ed43 6a08 	vstr	s13, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001968:	eee6 7a86 	vfma.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800196c:	eea6 7a88 	vfma.f32	s14, s13, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001970:	ee67 7aa5 	vmul.f32	s15, s15, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001974:	ee27 7a25 	vmul.f32	s14, s14, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001978:	ee67 6a88 	vmul.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800197c:	ed42 7a07 	vstr	s15, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001980:	ee66 7a67 	vnmul.f32	s15, s12, s15
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001984:	ed03 7a07 	vstr	s14, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001988:	eee7 6a06 	vfma.f32	s13, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800198c:	eee7 7a08 	vfma.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001990:	ee26 7aa5 	vmul.f32	s14, s13, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001994:	ee67 7aa5 	vmul.f32	s15, s15, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001998:	ee66 6a47 	vnmul.f32	s13, s12, s14
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800199c:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80019a0:	ee27 7a08 	vmul.f32	s14, s14, s16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80019a4:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80019a8:	eee7 6a88 	vfma.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80019ac:	eea7 7a86 	vfma.f32	s14, s15, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80019b0:	ee25 5aa6 	vmul.f32	s10, s11, s13
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80019b4:	ee65 7a87 	vmul.f32	s15, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80019b8:	ed03 5a05 	vstr	s10, [r3, #-20]	; 0xffffffec
	while(k)
 80019bc:	428b      	cmp	r3, r1
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 80019be:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 80019c2:	d1bb      	bne.n	800193c <SDR_ComputeLO+0x3c>
    ym1i = tmpi;

    k--;
	}
// compute the gain to be applied to stabilize the level
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 80019c4:	ee67 5a07 	vmul.f32	s11, s14, s14
 80019c8:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8001a60 <SDR_ComputeLO+0x160>
 80019cc:	edc4 7a00 	vstr	s15, [r4]
 80019d0:	eddf 4a24 	vldr	s9, [pc, #144]	; 8001a64 <SDR_ComputeLO+0x164>
 80019d4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80019d8:	4a23      	ldr	r2, [pc, #140]	; (8001a68 <SDR_ComputeLO+0x168>)
 80019da:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <SDR_ComputeLO+0x16c>)
 80019dc:	ed85 5a00 	vstr	s10, [r5]
 80019e0:	edc2 6a00 	vstr	s13, [r2]
 80019e4:	ed83 7a00 	vstr	s14, [r3]
 80019e8:	ee76 7a65 	vsub.f32	s15, s12, s11
}	
 80019ec:	ecbd 8b04 	vpop	{d8-d9}
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 80019f0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80019f4:	edc0 7a00 	vstr	s15, [r0]
}	
 80019f8:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 80019fa:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001a70 <SDR_ComputeLO+0x170>
 80019fe:	4a1d      	ldr	r2, [pc, #116]	; (8001a74 <SDR_ComputeLO+0x174>)
 8001a00:	ee60 7a27 	vmul.f32	s15, s0, s15
	  oldfreq  =  freq;
 8001a04:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001a08:	ed92 7a00 	vldr	s14, [r2]
 8001a0c:	ee87 9a87 	vdiv.f32	s18, s15, s14
 8001a10:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8001a14:	eeb0 0b49 	vmov.f64	d0, d9
 8001a18:	f00a fb32 	bl	800c080 <cos>
 8001a1c:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <SDR_ComputeLO+0x144>)
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001a22:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001a26:	ed83 8a00 	vstr	s16, [r3]
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001a2a:	f00a fb65 	bl	800c0f8 <sin>
 8001a2e:	eeb7 6bc0 	vcvt.f32.f64	s12, d0
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <SDR_ComputeLO+0x148>)
 8001a34:	eeb1 6a46 	vneg.f32	s12, s12
 8001a38:	ed83 6a00 	vstr	s12, [r3]
 8001a3c:	e771      	b.n	8001922 <SDR_ComputeLO+0x22>
 8001a3e:	bf00      	nop
 8001a40:	240000e4 	.word	0x240000e4
 8001a44:	24000494 	.word	0x24000494
 8001a48:	240004a4 	.word	0x240004a4
 8001a4c:	240000e0 	.word	0x240000e0
 8001a50:	240004bc 	.word	0x240004bc
 8001a54:	240000f0 	.word	0x240000f0
 8001a58:	24003a6c 	.word	0x24003a6c
 8001a5c:	24004418 	.word	0x24004418
 8001a60:	46000200 	.word	0x46000200
 8001a64:	39000000 	.word	0x39000000
 8001a68:	240004c0 	.word	0x240004c0
 8001a6c:	240004c4 	.word	0x240004c4
 8001a70:	40c90fdb 	.word	0x40c90fdb
 8001a74:	24004300 	.word	0x24004300

08001a78 <SDR_2R_toC_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time
  while(blkCnt)
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	d02e      	beq.n	8001ada <SDR_2R_toC_f32+0x62>
 8001a7c:	3010      	adds	r0, #16
 8001a7e:	3110      	adds	r1, #16
 8001a80:	3220      	adds	r2, #32
{
 8001a82:	b410      	push	{r4}
  {
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001a84:	f850 4c10 	ldr.w	r4, [r0, #-16]
  while(blkCnt)
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	f100 0010 	add.w	r0, r0, #16
 8001a8e:	f101 0110 	add.w	r1, r1, #16
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001a92:	f842 4c20 	str.w	r4, [r2, #-32]
 8001a96:	f102 0220 	add.w	r2, r2, #32
 8001a9a:	f851 4c20 	ldr.w	r4, [r1, #-32]
 8001a9e:	f842 4c3c 	str.w	r4, [r2, #-60]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001aa2:	f850 4c1c 	ldr.w	r4, [r0, #-28]
 8001aa6:	f842 4c38 	str.w	r4, [r2, #-56]
 8001aaa:	f851 4c1c 	ldr.w	r4, [r1, #-28]
 8001aae:	f842 4c34 	str.w	r4, [r2, #-52]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001ab2:	f850 4c18 	ldr.w	r4, [r0, #-24]
 8001ab6:	f842 4c30 	str.w	r4, [r2, #-48]
 8001aba:	f851 4c18 	ldr.w	r4, [r1, #-24]
 8001abe:	f842 4c2c 	str.w	r4, [r2, #-44]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001ac2:	f850 4c14 	ldr.w	r4, [r0, #-20]
 8001ac6:	f842 4c28 	str.w	r4, [r2, #-40]
 8001aca:	f851 4c14 	ldr.w	r4, [r1, #-20]
 8001ace:	f842 4c24 	str.w	r4, [r2, #-36]
  while(blkCnt)
 8001ad2:	d1d7      	bne.n	8001a84 <SDR_2R_toC_f32+0xc>
    
    blkCnt--;
  }
}
 8001ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	4770      	bx	lr

08001adc <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 8001adc:	4b35      	ldr	r3, [pc, #212]	; (8001bb4 <SDR_downconvert_f32+0xd8>)
 8001ade:	3110      	adds	r1, #16
 8001ae0:	3210      	adds	r2, #16
 8001ae2:	3008      	adds	r0, #8
		 tmp2=((*(pt)  -offset)) / 2048.f;
		 tmp3=((*(pt+3)-offset)) / 2048.f;
		 tmp4=((*(pt+2)-offset)) / 2048.f;
*/

     tmp2=((*(pt+1)-offset)) / 2048.f;
 8001ae4:	eddf 5a34 	vldr	s11, [pc, #208]	; 8001bb8 <SDR_downconvert_f32+0xdc>
{
 8001ae8:	b430      	push	{r4, r5}
 8001aea:	f503 6500 	add.w	r5, r3, #2048	; 0x800
 8001aee:	4c33      	ldr	r4, [pc, #204]	; (8001bbc <SDR_downconvert_f32+0xe0>)
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8001af0:	f830 cc08 	ldrh.w	ip, [r0, #-8]
 8001af4:	3310      	adds	r3, #16
		 tmp4=((*(pt+3)-offset)) / 2048.f;
		 tmp3=((*(pt+2)-offset)) / 2048.f;

    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001af6:	ed13 5a08 	vldr	s10, [r3, #-32]	; 0xffffffe0
 8001afa:	3008      	adds	r0, #8
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8001afc:	ee06 ca10 	vmov	s12, ip
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8001b00:	f830 cc0e 	ldrh.w	ip, [r0, #-14]
 8001b04:	3110      	adds	r1, #16
 8001b06:	3410      	adds	r4, #16
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8001b08:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8001b0c:	ee06 ca90 	vmov	s13, ip
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 8001b10:	f830 cc0a 	ldrh.w	ip, [r0, #-10]
 8001b14:	3210      	adds	r2, #16
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8001b16:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8001b1a:	ee36 6a40 	vsub.f32	s12, s12, s0
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 8001b1e:	ee07 ca90 	vmov	s15, ip
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 8001b22:	f830 cc0c 	ldrh.w	ip, [r0, #-12]
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8001b26:	ee76 6ac0 	vsub.f32	s13, s13, s0
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8001b2a:	ee26 6a25 	vmul.f32	s12, s12, s11
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 8001b2e:	ee07 ca10 	vmov	s14, ip
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 8001b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8001b36:	ee66 6aa5 	vmul.f32	s13, s13, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001b3a:	ee25 5a06 	vmul.f32	s10, s10, s12
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 8001b3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 8001b42:	ee77 7ac0 	vsub.f32	s15, s15, s0
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001b46:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 8001b4a:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 8001b4e:	ee37 7a40 	vsub.f32	s14, s14, s0
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 8001b52:	ee67 7aa5 	vmul.f32	s15, s15, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001b56:	ee25 6a06 	vmul.f32	s12, s10, s12
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 8001b5a:	ee27 7a25 	vmul.f32	s14, s14, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001b5e:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		 *zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 8001b62:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8001b66:	ee26 6a26 	vmul.f32	s12, s12, s13
 8001b6a:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 8001b6e:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 8001b72:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001b76:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		 *zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 8001b7a:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8001b7e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001b82:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 8001b86:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 8001b8a:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001b8e:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001b92:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
  while(blkCnt)
 8001b96:	42ab      	cmp	r3, r5
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001b98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b9c:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 8001ba0:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 8001ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba8:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
  while(blkCnt)
 8001bac:	d1a0      	bne.n	8001af0 <SDR_downconvert_f32+0x14>
     pt += 4;
     blkCnt--;
	}	
}
 8001bae:	bc30      	pop	{r4, r5}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	24003a6c 	.word	0x24003a6c
 8001bb8:	3a000000 	.word	0x3a000000
 8001bbc:	24004418 	.word	0x24004418

08001bc0 <SDR_float_to_DAC_audio>:
//---------------------------------------------------------------------------------------
// Convert back from floating point to short words, applying the volume setting
void SDR_float_to_DAC_audio(float *pSrc, short *pDst, uint16_t blockSize)
{
 8001bc0:	b470      	push	{r4, r5, r6}
  short *AudioBuffer;

  AudioBuffer = pDst;

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 8001bc2:	0894      	lsrs	r4, r2, #2
  while(blkCnt--)
 8001bc4:	2c00      	cmp	r4, #0
 8001bc6:	d04a      	beq.n	8001c5e <SDR_float_to_DAC_audio+0x9e>
 8001bc8:	1e66      	subs	r6, r4, #1
  {
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bca:	4c30      	ldr	r4, [pc, #192]	; (8001c8c <SDR_float_to_DAC_audio+0xcc>)
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bd0:	b2b3      	uxth	r3, r6
 8001bd2:	f100 0620 	add.w	r6, r0, #32
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bd6:	edd4 7a00 	vldr	s15, [r4]
 8001bda:	3010      	adds	r0, #16
 8001bdc:	eb06 1603 	add.w	r6, r6, r3, lsl #4
 8001be0:	460b      	mov	r3, r1
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001be2:	eeb0 5a47 	vmov.f32	s10, s14
 8001be6:	ed10 6a02 	vldr	s12, [r0, #-8]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bea:	eef0 4a47 	vmov.f32	s9, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bee:	ed50 6a04 	vldr	s13, [r0, #-16]
 8001bf2:	eef0 5a47 	vmov.f32	s11, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bf6:	2500      	movs	r5, #0
 8001bf8:	eea7 5a86 	vfma.f32	s10, s15, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bfc:	ed10 6a01 	vldr	s12, [r0, #-4]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c00:	462c      	mov	r4, r5
 8001c02:	3010      	adds	r0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c04:	eee7 4a86 	vfma.f32	s9, s15, s12
 8001c08:	3308      	adds	r3, #8
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c0a:	eee6 5aa7 	vfma.f32	s11, s13, s15
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c0e:	ed50 6a07 	vldr	s13, [r0, #-28]	; 0xffffffe4
  while(blkCnt--)
 8001c12:	4286      	cmp	r6, r0
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c14:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c18:	eeb0 6a64 	vmov.f32	s12, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c1c:	eef0 4a47 	vmov.f32	s9, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c20:	ee15 ca10 	vmov	ip, s10
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c24:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c28:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c2c:	f36c 050f 	bfi	r5, ip, #0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c30:	eee7 4aa6 	vfma.f32	s9, s15, s13
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c34:	ee15 ca90 	vmov	ip, s11
 8001c38:	f36c 040f 	bfi	r4, ip, #0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c3c:	ee16 ca10 	vmov	ip, s12
 8001c40:	f36c 451f 	bfi	r5, ip, #16, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c44:	eef0 6a64 	vmov.f32	s13, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c48:	f843 5c04 	str.w	r5, [r3, #-4]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c4c:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c50:	ee16 ca90 	vmov	ip, s13
 8001c54:	f36c 441f 	bfi	r4, ip, #16, #16
 8001c58:	f843 4c08 	str.w	r4, [r3, #-8]
  while(blkCnt--)
 8001c5c:	d1c1      	bne.n	8001be2 <SDR_float_to_DAC_audio+0x22>
	}	

  // SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
  SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 8001c5e:	0092      	lsls	r2, r2, #2
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c60:	f3bf 8f4f 	dsb	sy
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 8001c64:	b15a      	cbz	r2, 8001c7e <SDR_float_to_DAC_audio+0xbe>
 8001c66:	3a01      	subs	r2, #1
 8001c68:	f101 0320 	add.w	r3, r1, #32
      SCB->DCCMVAC = op_addr;
 8001c6c:	4808      	ldr	r0, [pc, #32]	; (8001c90 <SDR_float_to_DAC_audio+0xd0>)
 8001c6e:	f022 021f 	bic.w	r2, r2, #31
 8001c72:	4413      	add	r3, r2
 8001c74:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8001c78:	3120      	adds	r1, #32
    while (op_size > 0) {
 8001c7a:	4299      	cmp	r1, r3
 8001c7c:	d1fa      	bne.n	8001c74 <SDR_float_to_DAC_audio+0xb4>
 8001c7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c82:	f3bf 8f6f 	isb	sy
#endif
return;
}	
 8001c86:	bc70      	pop	{r4, r5, r6}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	2400425c 	.word	0x2400425c
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <SDR_memcpy_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time.    
  while(blkCnt > 0u)
 8001c94:	0892      	lsrs	r2, r2, #2
 8001c96:	d017      	beq.n	8001cc8 <SDR_memcpy_f32+0x34>
 8001c98:	3110      	adds	r1, #16
 8001c9a:	3010      	adds	r0, #16
  {
    /* Copy and then store the results in the destination buffer */
    in1 = *pSrc++;  *pDst++ = in1;
 8001c9c:	f851 3c10 	ldr.w	r3, [r1, #-16]
  while(blkCnt > 0u)
 8001ca0:	3a01      	subs	r2, #1
 8001ca2:	f101 0110 	add.w	r1, r1, #16
 8001ca6:	f100 0010 	add.w	r0, r0, #16
    in1 = *pSrc++;  *pDst++ = in1;
 8001caa:	f840 3c20 	str.w	r3, [r0, #-32]
    in2 = *pSrc++;  *pDst++ = in2;
 8001cae:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8001cb2:	f840 3c1c 	str.w	r3, [r0, #-28]
    in3 = *pSrc++;  *pDst++ = in3;
 8001cb6:	f851 3c18 	ldr.w	r3, [r1, #-24]
 8001cba:	f840 3c18 	str.w	r3, [r0, #-24]
    in4 = *pSrc++;  *pDst++ = in4;
 8001cbe:	f851 3c14 	ldr.w	r3, [r1, #-20]
 8001cc2:	f840 3c14 	str.w	r3, [r0, #-20]
  while(blkCnt > 0u)
 8001cc6:	d1e9      	bne.n	8001c9c <SDR_memcpy_f32+0x8>
		
// Decrement the loop counter
    blkCnt--;
  }
}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop

08001ccc <SDR_mirror_LSB>:
{
  uint32_t blkCnt;            /* loop counter */
  float *pbR, *pbI, *peR, *peI;
	
// loop Unrolling */
  blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 8001ccc:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001cce:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

//  Compute 4 outputs at a time.    
	while(blkCnt--)
 8001cd2:	2a01      	cmp	r2, #1
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001cd4:	440b      	add	r3, r1
	while(blkCnt--)
 8001cd6:	d037      	beq.n	8001d48 <SDR_mirror_LSB+0x7c>
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	1e91      	subs	r1, r2, #2
{
 8001cdc:	b410      	push	{r4}
 8001cde:	f1a3 0220 	sub.w	r2, r3, #32
 8001ce2:	f1a3 041c 	sub.w	r4, r3, #28
 8001ce6:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8001cea:	4402      	add	r2, r0
 8001cec:	4420      	add	r0, r4
	{
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001cee:	6a14      	ldr	r4, [r2, #32]
	while(blkCnt--)
 8001cf0:	3901      	subs	r1, #1
 8001cf2:	3a20      	subs	r2, #32
 8001cf4:	3820      	subs	r0, #32
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001cf6:	f843 4c20 	str.w	r4, [r3, #-32]
 8001cfa:	3320      	adds	r3, #32
 8001cfc:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
 8001d00:	eef1 7a67 	vneg.f32	s15, s15
 8001d04:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001d08:	6b94      	ldr	r4, [r2, #56]	; 0x38
 8001d0a:	f843 4c38 	str.w	r4, [r3, #-56]
 8001d0e:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 8001d12:	eef1 7a67 	vneg.f32	s15, s15
 8001d16:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001d1a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8001d1c:	f843 4c30 	str.w	r4, [r3, #-48]
 8001d20:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8001d24:	eef1 7a67 	vneg.f32	s15, s15
 8001d28:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001d2c:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8001d2e:	f843 4c28 	str.w	r4, [r3, #-40]
	while(blkCnt--)
 8001d32:	1c4c      	adds	r4, r1, #1
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001d34:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8001d38:	eef1 7a67 	vneg.f32	s15, s15
 8001d3c:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 8001d40:	d1d5      	bne.n	8001cee <SDR_mirror_LSB+0x22>
	}
}
 8001d42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop

08001d4c <SDR_compute_IIR_parms>:
// ------------------------------------------------------
// Compute the parameters for the double IIR filter used for the narrow CW mode
void SDR_compute_IIR_parms(void)
{
 8001d4c:	b508      	push	{r3, lr}

   r = Qfactor;

   a1 = a2 = b0 = 0.f; 
   r2 = r*r;
   wr = 2.f * cwpitch / rate * myPI;
 8001d4e:	4a2b      	ldr	r2, [pc, #172]	; (8001dfc <SDR_compute_IIR_parms+0xb0>)
	 float rate = SamplingRate/256; //SamplingRate / decimation
 8001d50:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <SDR_compute_IIR_parms+0xb4>)
   wr = 2.f * cwpitch / rate * myPI;
 8001d52:	edd2 7a00 	vldr	s15, [r2]
	 float rate = SamplingRate/256; //SamplingRate / decimation
 8001d56:	ed93 7a00 	vldr	s14, [r3]
 8001d5a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001e04 <SDR_compute_IIR_parms+0xb8>
   wr = 2.f * cwpitch / rate * myPI;
 8001d5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
   r = Qfactor;
 8001d62:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <SDR_compute_IIR_parms+0xbc>)
	 float rate = SamplingRate/256; //SamplingRate / decimation
 8001d64:	ee27 7a26 	vmul.f32	s14, s14, s13
   wr = 2.f * cwpitch / rate * myPI;
 8001d68:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001e0c <SDR_compute_IIR_parms+0xc0>
{
 8001d6c:	ed2d 8b06 	vpush	{d8-d10}
   wr = 2.f * cwpitch / rate * myPI;
 8001d70:	eec7 8a87 	vdiv.f32	s17, s15, s14
   r = Qfactor;
 8001d74:	edd3 9a00 	vldr	s19, [r3]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001d78:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   r2 = r*r;
 8001d7c:	ee69 aaa9 	vmul.f32	s21, s19, s19
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001d80:	ee39 aaa9 	vadd.f32	s20, s19, s19
 8001d84:	ee3a 9a88 	vadd.f32	s18, s21, s16
										                         // (see the Proakis & Manolakis book)
   a1 = -2.f * r * cosw0;
   a2 = r2;
// b0 is normalized for gain ~ 2dB on all the band
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001d88:	ee38 8a69 	vsub.f32	s16, s16, s19
   wr = 2.f * cwpitch / rate * myPI;
 8001d8c:	ee68 8aa6 	vmul.f32	s17, s17, s13
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001d90:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 8001d94:	f00a f974 	bl	800c080 <cos>
 8001d98:	ee8a 6a09 	vdiv.f32	s12, s20, s18
   a1 = -2.f * r * cosw0;
 8001d9c:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <SDR_compute_IIR_parms+0xc4>)
   a2 = r2;
 8001d9e:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <SDR_compute_IIR_parms+0xc8>)
 8001da0:	edc2 aa00 	vstr	s21, [r2]
   a1 = -2.f * r * cosw0;
 8001da4:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001da8:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8001dac:	eeb7 aaca 	vcvt.f64.f32	d10, s20
   a1 = -2.f * r * cosw0;
 8001db0:	ee69 7aa7 	vmul.f32	s15, s19, s15
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001db4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8001db8:	ee26 6b00 	vmul.f64	d6, d6, d0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001dbc:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001dc0:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
   a1 = -2.f * r * cosw0;
 8001dc4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dc8:	ed83 6a00 	vstr	s12, [r3]
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001dcc:	f00a f958 	bl	800c080 <cos>
 8001dd0:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 8001dd4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001e18 <SDR_compute_IIR_parms+0xcc>
 8001dd8:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <SDR_compute_IIR_parms+0xd0>)
 8001dda:	ee28 7a07 	vmul.f32	s14, s16, s14
 8001dde:	eeaa 6b40 	vfms.f64	d6, d10, d0
 8001de2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 8001de6:	ecbd 8b06 	vpop	{d8-d10}
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001dea:	eeb1 5bc6 	vsqrt.f64	d5, d6
 8001dee:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001df2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001df6:	ed83 7a00 	vstr	s14, [r3]
}
 8001dfa:	bd08      	pop	{r3, pc}
 8001dfc:	24009d20 	.word	0x24009d20
 8001e00:	24004300 	.word	0x24004300
 8001e04:	3b800000 	.word	0x3b800000
 8001e08:	24008d10 	.word	0x24008d10
 8001e0c:	40490fdb 	.word	0x40490fdb
 8001e10:	24004260 	.word	0x24004260
 8001e14:	24008d0c 	.word	0x24008d0c
 8001e18:	3f99999a 	.word	0x3f99999a
 8001e1c:	2400c248 	.word	0x2400c248

08001e20 <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
   static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	 register float x0, y0;
   uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 8001e20:	0889      	lsrs	r1, r1, #2
	
// Compute 4 outputs at a time, loop unrolled for performance     
	 while(blkCnt--)
 8001e22:	2900      	cmp	r1, #0
 8001e24:	d076      	beq.n	8001f14 <SDR_CWPeak+0xf4>
 8001e26:	1e4b      	subs	r3, r1, #1
 8001e28:	f8df c104 	ldr.w	ip, [pc, #260]	; 8001f30 <SDR_CWPeak+0x110>
 8001e2c:	493a      	ldr	r1, [pc, #232]	; (8001f18 <SDR_CWPeak+0xf8>)
 8001e2e:	3010      	adds	r0, #16
 8001e30:	4a3a      	ldr	r2, [pc, #232]	; (8001f1c <SDR_CWPeak+0xfc>)
 8001e32:	eddc 4a00 	vldr	s9, [ip]
 8001e36:	edd1 2a00 	vldr	s5, [r1]
 8001e3a:	edd2 5a00 	vldr	s11, [r2]
{
 8001e3e:	b4f0      	push	{r4, r5, r6, r7}
 8001e40:	4c37      	ldr	r4, [pc, #220]	; (8001f20 <SDR_CWPeak+0x100>)
 8001e42:	4f38      	ldr	r7, [pc, #224]	; (8001f24 <SDR_CWPeak+0x104>)
 8001e44:	edd4 7a00 	vldr	s15, [r4]
 8001e48:	4d37      	ldr	r5, [pc, #220]	; (8001f28 <SDR_CWPeak+0x108>)
 8001e4a:	4e38      	ldr	r6, [pc, #224]	; (8001f2c <SDR_CWPeak+0x10c>)
 8001e4c:	eef1 7a67 	vneg.f32	s15, s15
 8001e50:	ed97 7a00 	vldr	s14, [r7]
 8001e54:	edd5 6a00 	vldr	s13, [r5]
 8001e58:	ed96 5a00 	vldr	s10, [r6]
   {  
		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001e5c:	ee62 3ac7 	vnmul.f32	s7, s5, s14
 8001e60:	ed10 7a04 	vldr	s14, [r0, #-16]
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001e64:	ee22 4ae6 	vnmul.f32	s8, s5, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001e68:	ed10 6a03 	vldr	s12, [r0, #-12]
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001e6c:	ed50 6a02 	vldr	s13, [r0, #-8]
	 while(blkCnt--)
 8001e70:	3b01      	subs	r3, #1
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001e72:	eee7 3aa4 	vfma.f32	s7, s15, s9
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001e76:	ed10 2a01 	vldr	s4, [r0, #-4]
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001e7a:	eea7 4a85 	vfma.f32	s8, s15, s10
	 while(blkCnt--)
 8001e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e82:	f100 0010 	add.w	r0, r0, #16
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001e86:	eee7 3a25 	vfma.f32	s7, s14, s11
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001e8a:	eea3 4aa5 	vfma.f32	s8, s7, s11
	   *buf++ = y0;
 8001e8e:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001e92:	edd2 5a00 	vldr	s11, [r2]
 8001e96:	edd1 2a00 	vldr	s5, [r1]
 8001e9a:	ee25 6a86 	vmul.f32	s12, s11, s12
 8001e9e:	edd4 7a00 	vldr	s15, [r4]
 8001ea2:	eeb1 3a62 	vneg.f32	s6, s5
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001ea6:	ee25 7aa6 	vmul.f32	s14, s11, s13
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001eaa:	eef0 6a46 	vmov.f32	s13, s12
 8001eae:	eef1 7a67 	vneg.f32	s15, s15
 8001eb2:	eea3 7a23 	vfma.f32	s14, s6, s7
 8001eb6:	eee3 6a24 	vfma.f32	s13, s6, s9
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001eba:	ee65 4a82 	vmul.f32	s9, s11, s4
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001ebe:	eee7 6aa3 	vfma.f32	s13, s15, s7
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001ec2:	ee25 6aa6 	vmul.f32	s12, s11, s13
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001ec6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8001eca:	eee3 4a26 	vfma.f32	s9, s6, s13
 8001ece:	eea7 6a84 	vfma.f32	s12, s15, s8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001ed2:	ee65 6a87 	vmul.f32	s13, s11, s14
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001ed6:	eee7 4a87 	vfma.f32	s9, s15, s14
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001eda:	eea3 6a05 	vfma.f32	s12, s6, s10
 8001ede:	eee3 6a04 	vfma.f32	s13, s6, s8
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001ee2:	ee25 5aa4 	vmul.f32	s10, s11, s9
	   *buf++ = y0;
 8001ee6:	ed00 6a07 	vstr	s12, [r0, #-28]	; 0xffffffe4
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001eea:	eee7 6a86 	vfma.f32	s13, s15, s12
 8001eee:	eea3 5a06 	vfma.f32	s10, s6, s12
	   *buf++ = y0;
 8001ef2:	ed40 6a06 	vstr	s13, [r0, #-24]	; 0xffffffe8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001ef6:	eea7 5aa6 	vfma.f32	s10, s15, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;
 8001efa:	ed00 5a05 	vstr	s10, [r0, #-20]	; 0xffffffec
	 while(blkCnt--)
 8001efe:	d1ad      	bne.n	8001e5c <SDR_CWPeak+0x3c>
 8001f00:	ed87 7a00 	vstr	s14, [r7]
 8001f04:	ed86 5a00 	vstr	s10, [r6]
 8001f08:	edc5 6a00 	vstr	s13, [r5]
 8001f0c:	edcc 4a00 	vstr	s9, [ip]
   }
}
 8001f10:	bcf0      	pop	{r4, r5, r6, r7}
 8001f12:	4770      	bx	lr
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	24008d0c 	.word	0x24008d0c
 8001f1c:	2400c248 	.word	0x2400c248
 8001f20:	24004260 	.word	0x24004260
 8001f24:	240004b4 	.word	0x240004b4
 8001f28:	240004b8 	.word	0x240004b8
 8001f2c:	240004b0 	.word	0x240004b0
 8001f30:	240004ac 	.word	0x240004ac

08001f34 <SDR_demodAM_AGC>:
// ------------------------------------------------------
// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8001f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

	  if(pk < audiotmp)
	  {
			pk = audiotmp;
		  hangcnt = Hcount[AM]; 
 8001f38:	4b32      	ldr	r3, [pc, #200]	; (8002004 <SDR_demodAM_AGC+0xd0>)
{
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8002020 <SDR_demodAM_AGC+0xec>
 8001f40:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
 8001f44:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8002024 <SDR_demodAM_AGC+0xf0>
 8001f48:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8002028 <SDR_demodAM_AGC+0xf4>
		  hangcnt = Hcount[AM]; 
 8001f4c:	881f      	ldrh	r7, [r3, #0]
 8001f4e:	ed98 7a00 	vldr	s14, [r8]
 8001f52:	f8dc 3000 	ldr.w	r3, [ip]
 8001f56:	ed9e 6a00 	vldr	s12, [lr]
 8001f5a:	4c2b      	ldr	r4, [pc, #172]	; (8002008 <SDR_demodAM_AGC+0xd4>)
 8001f5c:	4a2b      	ldr	r2, [pc, #172]	; (800200c <SDR_demodAM_AGC+0xd8>)

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8001f5e:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8002010 <SDR_demodAM_AGC+0xdc>
	  }

    audiotmp /= max(pk, AgcThreshold);  
		
	  if(hangcnt == 0)
		  pk  *= Decay[AM];
 8001f62:	4e2c      	ldr	r6, [pc, #176]	; (8002014 <SDR_demodAM_AGC+0xe0>)
		
// DC removal filter -----------------------
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8001f64:	ed9f 5a2c 	vldr	s10, [pc, #176]	; 8002018 <SDR_demodAM_AGC+0xe4>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8001f68:	edd0 7a01 	vldr	s15, [r0, #4]
 8001f6c:	3008      	adds	r0, #8
 8001f6e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8001f72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f76:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8001f7a:	edcd 7a01 	vstr	s15, [sp, #4]
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 8001f7e:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 8001f82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = __builtin_sqrtf(in);
 8001f8a:	bfa8      	it	ge
 8001f8c:	eef1 6ae7 	vsqrtge.f32	s13, s15
    audiotmp /= max(pk, AgcThreshold);  
 8001f90:	edd4 7a00 	vldr	s15, [r4]
      *pOut = 0.0f;
 8001f94:	bfb8      	it	lt
 8001f96:	eef0 6a64 	vmovlt.f32	s13, s9
	  if(pk < audiotmp)
 8001f9a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8001f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa2:	d502      	bpl.n	8001faa <SDR_demodAM_AGC+0x76>
 8001fa4:	eeb0 7a66 	vmov.f32	s14, s13
		  hangcnt = Hcount[AM]; 
 8001fa8:	463b      	mov	r3, r7
    audiotmp /= max(pk, AgcThreshold);  
 8001faa:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8001fae:	eec6 5aa7 	vdiv.f32	s11, s13, s15
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8001fb2:	eef0 7a65 	vmov.f32	s15, s11
    audiotmp /= max(pk, AgcThreshold);  
 8001fb6:	edc2 5a00 	vstr	s11, [r2]
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8001fba:	eee6 7a05 	vfma.f32	s15, s12, s10
	  if(hangcnt == 0)
 8001fbe:	b91b      	cbnz	r3, 8001fc8 <SDR_demodAM_AGC+0x94>
		  pk  *= Decay[AM];
 8001fc0:	edd6 6a00 	vldr	s13, [r6]
 8001fc4:	ee27 7a26 	vmul.f32	s14, s14, s13
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8001fc8:	edcd 7a00 	vstr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8001fcc:	4285      	cmp	r5, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8001fce:	eddd 7a00 	vldr	s15, [sp]
 8001fd2:	ee77 7ac6 	vsub.f32	s15, s15, s12
	  wold = w;
 8001fd6:	ed9d 6a00 	vldr	s12, [sp]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8001fda:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 8001fde:	d1c3      	bne.n	8001f68 <SDR_demodAM_AGC+0x34>
// -----------------------------------------
	}
    PeakAudioValue=pk;
 8001fe0:	4a0e      	ldr	r2, [pc, #56]	; (800201c <SDR_demodAM_AGC+0xe8>)
	if(hangcnt > 0)  hangcnt--;
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	ed88 7a00 	vstr	s14, [r8]
 8001fe8:	f8cc 3000 	str.w	r3, [ip]
 8001fec:	ed8e 6a00 	vstr	s12, [lr]
    PeakAudioValue=pk;
 8001ff0:	ed82 7a00 	vstr	s14, [r2]
	if(hangcnt > 0)  hangcnt--;
 8001ff4:	dd02      	ble.n	8001ffc <SDR_demodAM_AGC+0xc8>
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	f8cc 3000 	str.w	r3, [ip]
}
 8001ffc:	b002      	add	sp, #8
 8001ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002002:	bf00      	nop
 8002004:	24007ec8 	.word	0x24007ec8
 8002008:	24009d1c 	.word	0x24009d1c
 800200c:	24000914 	.word	0x24000914
 8002010:	00000000 	.word	0x00000000
 8002014:	24002918 	.word	0x24002918
 8002018:	3f75c28f 	.word	0x3f75c28f
 800201c:	24008750 	.word	0x24008750
 8002020:	240000e8 	.word	0x240000e8
 8002024:	24000498 	.word	0x24000498
 8002028:	240004a8 	.word	0x240004a8

0800202c <SDR_demodSSB_CW_AGC>:
	  arm_sqrt_f32(tmp, &sav);  

	  if(pk < sav)
	  {
			pk = sav;
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 800202c:	4a4a      	ldr	r2, [pc, #296]	; (8002158 <SDR_demodSSB_CW_AGC+0x12c>)
      else
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 800202e:	4b4b      	ldr	r3, [pc, #300]	; (800215c <SDR_demodSSB_CW_AGC+0x130>)
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002030:	7812      	ldrb	r2, [r2, #0]
 8002032:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 8002036:	2a01      	cmp	r2, #1
{
 8002038:	b4f0      	push	{r4, r5, r6, r7}
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 800203a:	885c      	ldrh	r4, [r3, #2]
 800203c:	4e48      	ldr	r6, [pc, #288]	; (8002160 <SDR_demodSSB_CW_AGC+0x134>)
 800203e:	4f49      	ldr	r7, [pc, #292]	; (8002164 <SDR_demodSSB_CW_AGC+0x138>)
 8002040:	889d      	ldrh	r5, [r3, #4]
 8002042:	bf08      	it	eq
 8002044:	4625      	moveq	r5, r4
 8002046:	6833      	ldr	r3, [r6, #0]
 8002048:	ed97 7a00 	vldr	s14, [r7]
 800204c:	d05b      	beq.n	8002106 <SDR_demodSSB_CW_AGC+0xda>
 800204e:	2a03      	cmp	r2, #3
 8002050:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8002054:	4a44      	ldr	r2, [pc, #272]	; (8002168 <SDR_demodSSB_CW_AGC+0x13c>)
 8002056:	d032      	beq.n	80020be <SDR_demodSSB_CW_AGC+0x92>
		
	  if(hangcnt == 0)
    {  
      if(CurrentMode == CW) pk  *= Decay[CW];
      else
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002058:	f8df c118 	ldr.w	ip, [pc, #280]	; 8002174 <SDR_demodSSB_CW_AGC+0x148>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 800205c:	edd0 7a01 	vldr	s15, [r0, #4]
 8002060:	3008      	adds	r0, #8
 8002062:	ed10 6a02 	vldr	s12, [r0, #-8]
 8002066:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800206a:	eee6 7a06 	vfma.f32	s15, s12, s12
      *pOut = __builtin_sqrtf(in);
 800206e:	eef1 6ae7 	vsqrt.f32	s13, s15
	  if(pk < sav)
 8002072:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	d502      	bpl.n	8002082 <SDR_demodSSB_CW_AGC+0x56>
 800207c:	eeb0 7a66 	vmov.f32	s14, s13
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002080:	462b      	mov	r3, r5
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 8002082:	edd2 7a00 	vldr	s15, [r2]
 8002086:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 800208a:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800208e:	ece1 5a01 	vstmia	r1!, {s11}
	  if(hangcnt == 0)
 8002092:	b91b      	cbnz	r3, 800209c <SDR_demodSSB_CW_AGC+0x70>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002094:	eddc 7a02 	vldr	s15, [ip, #8]
 8002098:	ee27 7a27 	vmul.f32	s14, s14, s15
	for(k=j=0; k<BSIZE*2; k+=2)
 800209c:	4284      	cmp	r4, r0
 800209e:	d1dd      	bne.n	800205c <SDR_demodSSB_CW_AGC+0x30>
 80020a0:	4932      	ldr	r1, [pc, #200]	; (800216c <SDR_demodSSB_CW_AGC+0x140>)
    }  
	}
	PeakAudioValue=pk;
	if(hangcnt > 0)  hangcnt--;
 80020a2:	2b00      	cmp	r3, #0
	PeakAudioValue=pk;
 80020a4:	4a32      	ldr	r2, [pc, #200]	; (8002170 <SDR_demodSSB_CW_AGC+0x144>)
 80020a6:	ed87 7a00 	vstr	s14, [r7]
 80020aa:	6033      	str	r3, [r6, #0]
 80020ac:	edc1 6a00 	vstr	s13, [r1]
 80020b0:	ed82 7a00 	vstr	s14, [r2]
	if(hangcnt > 0)  hangcnt--;
 80020b4:	dd01      	ble.n	80020ba <SDR_demodSSB_CW_AGC+0x8e>
 80020b6:	3b01      	subs	r3, #1
 80020b8:	6033      	str	r3, [r6, #0]
}
 80020ba:	bcf0      	pop	{r4, r5, r6, r7}
 80020bc:	4770      	bx	lr
      if(CurrentMode == CW) pk  *= Decay[CW];
 80020be:	4d2d      	ldr	r5, [pc, #180]	; (8002174 <SDR_demodSSB_CW_AGC+0x148>)
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80020c0:	edd0 7a01 	vldr	s15, [r0, #4]
 80020c4:	3008      	adds	r0, #8
 80020c6:	ed10 6a02 	vldr	s12, [r0, #-8]
 80020ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80020ce:	eee6 7a06 	vfma.f32	s15, s12, s12
 80020d2:	eef1 6ae7 	vsqrt.f32	s13, s15
	  if(pk < sav)
 80020d6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80020da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020de:	d502      	bpl.n	80020e6 <SDR_demodSSB_CW_AGC+0xba>
 80020e0:	eeb0 7a66 	vmov.f32	s14, s13
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80020e4:	4663      	mov	r3, ip
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 80020e6:	edd2 7a00 	vldr	s15, [r2]
 80020ea:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 80020ee:	eec6 5a27 	vdiv.f32	s11, s12, s15
 80020f2:	ece1 5a01 	vstmia	r1!, {s11}
	  if(hangcnt == 0)
 80020f6:	b91b      	cbnz	r3, 8002100 <SDR_demodSSB_CW_AGC+0xd4>
      if(CurrentMode == CW) pk  *= Decay[CW];
 80020f8:	edd5 7a03 	vldr	s15, [r5, #12]
 80020fc:	ee27 7a27 	vmul.f32	s14, s14, s15
	for(k=j=0; k<BSIZE*2; k+=2)
 8002100:	4284      	cmp	r4, r0
 8002102:	d1dd      	bne.n	80020c0 <SDR_demodSSB_CW_AGC+0x94>
 8002104:	e7cc      	b.n	80020a0 <SDR_demodSSB_CW_AGC+0x74>
 8002106:	4a18      	ldr	r2, [pc, #96]	; (8002168 <SDR_demodSSB_CW_AGC+0x13c>)
 8002108:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 800210c:	f8df c064 	ldr.w	ip, [pc, #100]	; 8002174 <SDR_demodSSB_CW_AGC+0x148>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002110:	edd0 7a01 	vldr	s15, [r0, #4]
 8002114:	3008      	adds	r0, #8
 8002116:	ed10 6a02 	vldr	s12, [r0, #-8]
 800211a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800211e:	eee6 7a06 	vfma.f32	s15, s12, s12
 8002122:	eef1 6ae7 	vsqrt.f32	s13, s15
	  if(pk < sav)
 8002126:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800212a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212e:	d502      	bpl.n	8002136 <SDR_demodSSB_CW_AGC+0x10a>
 8002130:	eeb0 7a66 	vmov.f32	s14, s13
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002134:	462b      	mov	r3, r5
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 8002136:	edd2 7a00 	vldr	s15, [r2]
 800213a:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 800213e:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8002142:	ece1 5a01 	vstmia	r1!, {s11}
	  if(hangcnt == 0)
 8002146:	b91b      	cbnz	r3, 8002150 <SDR_demodSSB_CW_AGC+0x124>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002148:	eddc 7a01 	vldr	s15, [ip, #4]
 800214c:	ee27 7a27 	vmul.f32	s14, s14, s15
	for(k=j=0; k<BSIZE*2; k+=2)
 8002150:	42a0      	cmp	r0, r4
 8002152:	d1dd      	bne.n	8002110 <SDR_demodSSB_CW_AGC+0xe4>
 8002154:	e7a4      	b.n	80020a0 <SDR_demodSSB_CW_AGC+0x74>
 8002156:	bf00      	nop
 8002158:	2400c25c 	.word	0x2400c25c
 800215c:	24007ec8 	.word	0x24007ec8
 8002160:	2400049c 	.word	0x2400049c
 8002164:	240000ec 	.word	0x240000ec
 8002168:	24009d1c 	.word	0x24009d1c
 800216c:	240004a0 	.word	0x240004a0
 8002170:	24008750 	.word	0x24008750
 8002174:	24002918 	.word	0x24002918

08002178 <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non blocking mode
 * @param  AdcHandle : ADC handle

 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8002178:	b508      	push	{r3, lr}
    uint32_t op_addr = (uint32_t)addr;
 800217a:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 800217c:	f3bf 8f4f 	dsb	sy
      SCB->DCIMVAC = op_addr;
 8002180:	490a      	ldr	r1, [pc, #40]	; (80021ac <HAL_ADC_ConvCpltCallback+0x34>)
 8002182:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8002186:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800218a:	3320      	adds	r3, #32
    while (op_size > 0) {
 800218c:	4293      	cmp	r3, r2
 800218e:	d1fa      	bne.n	8002186 <HAL_ADC_ConvCpltCallback+0xe>
 8002190:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002194:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[BSIZE/2], 4*BSIZE/2);
#endif
	ADC_Stream0_Handler(1);
 8002198:	2001      	movs	r0, #1
 800219a:	f7fe ff99 	bl	80010d0 <ADC_Stream0_Handler>
	/* Set variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = SET;
 800219e:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <HAL_ADC_ConvCpltCallback+0x38>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
}
 80021a4:	bd08      	pop	{r3, pc}
 80021a6:	bf00      	nop
 80021a8:	2400ce60 	.word	0x2400ce60
 80021ac:	e000ed00 	.word	0xe000ed00
 80021b0:	240004e9 	.word	0x240004e9

080021b4 <HAL_ADC_ConvHalfCpltCallback>:
 * @brief  Conversion DMA half-transfer callback in non blocking mode
 * @param  hadc: ADC handle
 * */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021b4:	b508      	push	{r3, lr}
    uint32_t op_addr = (uint32_t)addr;
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 80021b8:	f3bf 8f4f 	dsb	sy
      SCB->DCIMVAC = op_addr;
 80021bc:	490a      	ldr	r1, [pc, #40]	; (80021e8 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80021be:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 80021c2:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80021c6:	3320      	adds	r3, #32
    while (op_size > 0) {
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d1fa      	bne.n	80021c2 <HAL_ADC_ConvHalfCpltCallback+0xe>
 80021cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80021d0:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[0], 4*BSIZE/2);
#endif
	ADC_Stream0_Handler(0);
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7fe ff7b 	bl	80010d0 <ADC_Stream0_Handler>
	/* Reset variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = RESET;
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
}
 80021e0:	bd08      	pop	{r3, pc}
 80021e2:	bf00      	nop
 80021e4:	2400ca60 	.word	0x2400ca60
 80021e8:	e000ed00 	.word	0xe000ed00
 80021ec:	240004e9 	.word	0x240004e9

080021f0 <DisplayStatus>:
	static char StringWidth[8];
	static char StringAGC[8];
	static char StringStep[8];


	switch(Fstep)
 80021f0:	4b57      	ldr	r3, [pc, #348]	; (8002350 <DisplayStatus+0x160>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b64      	cmp	r3, #100	; 0x64
{
 80021f6:	b570      	push	{r4, r5, r6, lr}
 80021f8:	b086      	sub	sp, #24
	switch(Fstep)
 80021fa:	f000 809f 	beq.w	800233c <DisplayStatus+0x14c>
 80021fe:	d969      	bls.n	80022d4 <DisplayStatus+0xe4>
 8002200:	f242 7210 	movw	r2, #10000	; 0x2710
 8002204:	4293      	cmp	r3, r2
 8002206:	d07d      	beq.n	8002304 <DisplayStatus+0x114>
 8002208:	4a52      	ldr	r2, [pc, #328]	; (8002354 <DisplayStatus+0x164>)
 800220a:	4293      	cmp	r3, r2
 800220c:	f000 808f 	beq.w	800232e <DisplayStatus+0x13e>
 8002210:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002214:	d07d      	beq.n	8002312 <DisplayStatus+0x122>
 8002216:	4c50      	ldr	r4, [pc, #320]	; (8002358 <DisplayStatus+0x168>)
	case 1000: strcpy(StringStep,"  1K"); break;
	case 10000: strcpy(StringStep," 10K"); break;
	case 100000: strcpy(StringStep,"100K"); break;
	}

	switch(CurrentMode)
 8002218:	4b50      	ldr	r3, [pc, #320]	; (800235c <DisplayStatus+0x16c>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b03      	cmp	r3, #3
 800221e:	f200 8094 	bhi.w	800234a <DisplayStatus+0x15a>
 8002222:	e8df f003 	tbb	[pc, r3]
 8002226:	5155      	.short	0x5155
 8002228:	0238      	.short	0x0238
	{
	case LSB: strcpy(StringMode,"LSB"); break;
	case USB: strcpy(StringMode,"USB"); break;
	case AM: strcpy(StringMode,"AM"); break;
	case CW: strcpy(StringMode,"CW"); break;
 800222a:	4b4d      	ldr	r3, [pc, #308]	; (8002360 <DisplayStatus+0x170>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4d4d      	ldr	r5, [pc, #308]	; (8002364 <DisplayStatus+0x174>)
 8002230:	0c1a      	lsrs	r2, r3, #16
 8002232:	802b      	strh	r3, [r5, #0]
 8002234:	70aa      	strb	r2, [r5, #2]
	}
	switch (CurrentAGC)
 8002236:	4b4c      	ldr	r3, [pc, #304]	; (8002368 <DisplayStatus+0x178>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d032      	beq.n	80022a4 <DisplayStatus+0xb4>
 800223e:	2b01      	cmp	r3, #1
 8002240:	d059      	beq.n	80022f6 <DisplayStatus+0x106>
 8002242:	4a4a      	ldr	r2, [pc, #296]	; (800236c <DisplayStatus+0x17c>)
	{
	case Fast: strcpy(StringAGC,"Fast"); break;
	case Slow: strcpy(StringAGC,"Slow"); break;
	}
	switch (CurrentBW)
 8002244:	4b4a      	ldr	r3, [pc, #296]	; (8002370 <DisplayStatus+0x180>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d035      	beq.n	80022b8 <DisplayStatus+0xc8>
 800224c:	2b01      	cmp	r3, #1
 800224e:	d04c      	beq.n	80022ea <DisplayStatus+0xfa>
 8002250:	4b48      	ldr	r3, [pc, #288]	; (8002374 <DisplayStatus+0x184>)
	{
	case Narrow: strcpy(StringWidth,"Narrow"); break;
	case Wide: strcpy(StringWidth,"Wide"); break;
	}
	sprintf(UartTXString, "          Freq %.0f Step %s Mode %s BW %s AGG %s Volume %1.1f   \r", LOfreq, StringStep, StringMode, StringWidth, StringAGC, volume);
 8002252:	4849      	ldr	r0, [pc, #292]	; (8002378 <DisplayStatus+0x188>)
 8002254:	4949      	ldr	r1, [pc, #292]	; (800237c <DisplayStatus+0x18c>)
 8002256:	ed90 7a00 	vldr	s14, [r0]
 800225a:	edd1 6a00 	vldr	s13, [r1]
 800225e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002262:	4947      	ldr	r1, [pc, #284]	; (8002380 <DisplayStatus+0x190>)
 8002264:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002268:	4846      	ldr	r0, [pc, #280]	; (8002384 <DisplayStatus+0x194>)
 800226a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800226e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002272:	ec53 2b16 	vmov	r2, r3, d6
 8002276:	e9cd 4500 	strd	r4, r5, [sp]
 800227a:	f008 fb85 	bl	800a988 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) UartTXString, strlen(UartTXString), 100);
 800227e:	4841      	ldr	r0, [pc, #260]	; (8002384 <DisplayStatus+0x194>)
 8002280:	f7fe f88e 	bl	80003a0 <strlen>
 8002284:	2364      	movs	r3, #100	; 0x64
 8002286:	b282      	uxth	r2, r0
 8002288:	493e      	ldr	r1, [pc, #248]	; (8002384 <DisplayStatus+0x194>)
 800228a:	483f      	ldr	r0, [pc, #252]	; (8002388 <DisplayStatus+0x198>)
}
 800228c:	b006      	add	sp, #24
 800228e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Transmit(&huart3, (uint8_t *) UartTXString, strlen(UartTXString), 100);
 8002292:	f005 be27 	b.w	8007ee4 <HAL_UART_Transmit>
	case USB: strcpy(StringMode,"USB"); break;
 8002296:	4b3d      	ldr	r3, [pc, #244]	; (800238c <DisplayStatus+0x19c>)
 8002298:	4d32      	ldr	r5, [pc, #200]	; (8002364 <DisplayStatus+0x174>)
 800229a:	602b      	str	r3, [r5, #0]
	switch (CurrentAGC)
 800229c:	4b32      	ldr	r3, [pc, #200]	; (8002368 <DisplayStatus+0x178>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1cc      	bne.n	800223e <DisplayStatus+0x4e>
	case Fast: strcpy(StringAGC,"Fast"); break;
 80022a4:	4b3a      	ldr	r3, [pc, #232]	; (8002390 <DisplayStatus+0x1a0>)
 80022a6:	4a31      	ldr	r2, [pc, #196]	; (800236c <DisplayStatus+0x17c>)
 80022a8:	e893 0003 	ldmia.w	r3, {r0, r1}
	switch (CurrentBW)
 80022ac:	4b30      	ldr	r3, [pc, #192]	; (8002370 <DisplayStatus+0x180>)
	case Fast: strcpy(StringAGC,"Fast"); break;
 80022ae:	6010      	str	r0, [r2, #0]
	switch (CurrentBW)
 80022b0:	781b      	ldrb	r3, [r3, #0]
	case Fast: strcpy(StringAGC,"Fast"); break;
 80022b2:	7111      	strb	r1, [r2, #4]
	switch (CurrentBW)
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1c9      	bne.n	800224c <DisplayStatus+0x5c>
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 80022b8:	4936      	ldr	r1, [pc, #216]	; (8002394 <DisplayStatus+0x1a4>)
 80022ba:	4b2e      	ldr	r3, [pc, #184]	; (8002374 <DisplayStatus+0x184>)
 80022bc:	c903      	ldmia	r1, {r0, r1}
 80022be:	0c0e      	lsrs	r6, r1, #16
 80022c0:	6018      	str	r0, [r3, #0]
 80022c2:	8099      	strh	r1, [r3, #4]
 80022c4:	719e      	strb	r6, [r3, #6]
 80022c6:	e7c4      	b.n	8002252 <DisplayStatus+0x62>
	case LSB: strcpy(StringMode,"LSB"); break;
 80022c8:	4d26      	ldr	r5, [pc, #152]	; (8002364 <DisplayStatus+0x174>)
 80022ca:	4b33      	ldr	r3, [pc, #204]	; (8002398 <DisplayStatus+0x1a8>)
 80022cc:	602b      	str	r3, [r5, #0]
 80022ce:	e7b2      	b.n	8002236 <DisplayStatus+0x46>
	case AM: strcpy(StringMode,"AM"); break;
 80022d0:	4b32      	ldr	r3, [pc, #200]	; (800239c <DisplayStatus+0x1ac>)
 80022d2:	e7ab      	b.n	800222c <DisplayStatus+0x3c>
	switch(Fstep)
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d023      	beq.n	8002320 <DisplayStatus+0x130>
 80022d8:	2b0a      	cmp	r3, #10
 80022da:	d19c      	bne.n	8002216 <DisplayStatus+0x26>
	case 10: strcpy(StringStep,"  10"); break;
 80022dc:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <DisplayStatus+0x1b0>)
 80022de:	4c1e      	ldr	r4, [pc, #120]	; (8002358 <DisplayStatus+0x168>)
 80022e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022e4:	6020      	str	r0, [r4, #0]
 80022e6:	7121      	strb	r1, [r4, #4]
 80022e8:	e796      	b.n	8002218 <DisplayStatus+0x28>
	case Wide: strcpy(StringWidth,"Wide"); break;
 80022ea:	492e      	ldr	r1, [pc, #184]	; (80023a4 <DisplayStatus+0x1b4>)
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <DisplayStatus+0x184>)
 80022ee:	c903      	ldmia	r1, {r0, r1}
 80022f0:	6018      	str	r0, [r3, #0]
 80022f2:	7119      	strb	r1, [r3, #4]
 80022f4:	e7ad      	b.n	8002252 <DisplayStatus+0x62>
	case Slow: strcpy(StringAGC,"Slow"); break;
 80022f6:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <DisplayStatus+0x1b8>)
 80022f8:	4a1c      	ldr	r2, [pc, #112]	; (800236c <DisplayStatus+0x17c>)
 80022fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022fe:	6010      	str	r0, [r2, #0]
 8002300:	7111      	strb	r1, [r2, #4]
 8002302:	e79f      	b.n	8002244 <DisplayStatus+0x54>
	case 10000: strcpy(StringStep," 10K"); break;
 8002304:	4b29      	ldr	r3, [pc, #164]	; (80023ac <DisplayStatus+0x1bc>)
 8002306:	4c14      	ldr	r4, [pc, #80]	; (8002358 <DisplayStatus+0x168>)
 8002308:	e893 0003 	ldmia.w	r3, {r0, r1}
 800230c:	6020      	str	r0, [r4, #0]
 800230e:	7121      	strb	r1, [r4, #4]
 8002310:	e782      	b.n	8002218 <DisplayStatus+0x28>
	case 1000: strcpy(StringStep,"  1K"); break;
 8002312:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <DisplayStatus+0x1c0>)
 8002314:	4c10      	ldr	r4, [pc, #64]	; (8002358 <DisplayStatus+0x168>)
 8002316:	e893 0003 	ldmia.w	r3, {r0, r1}
 800231a:	6020      	str	r0, [r4, #0]
 800231c:	7121      	strb	r1, [r4, #4]
 800231e:	e77b      	b.n	8002218 <DisplayStatus+0x28>
	case 1: strcpy(StringStep,"   1"); break;
 8002320:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <DisplayStatus+0x1c4>)
 8002322:	4c0d      	ldr	r4, [pc, #52]	; (8002358 <DisplayStatus+0x168>)
 8002324:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002328:	6020      	str	r0, [r4, #0]
 800232a:	7121      	strb	r1, [r4, #4]
 800232c:	e774      	b.n	8002218 <DisplayStatus+0x28>
	case 100000: strcpy(StringStep,"100K"); break;
 800232e:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <DisplayStatus+0x1c8>)
 8002330:	4c09      	ldr	r4, [pc, #36]	; (8002358 <DisplayStatus+0x168>)
 8002332:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002336:	6020      	str	r0, [r4, #0]
 8002338:	7121      	strb	r1, [r4, #4]
 800233a:	e76d      	b.n	8002218 <DisplayStatus+0x28>
	case 100: strcpy(StringStep," 100"); break;
 800233c:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <DisplayStatus+0x1cc>)
 800233e:	4c06      	ldr	r4, [pc, #24]	; (8002358 <DisplayStatus+0x168>)
 8002340:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002344:	6020      	str	r0, [r4, #0]
 8002346:	7121      	strb	r1, [r4, #4]
 8002348:	e766      	b.n	8002218 <DisplayStatus+0x28>
 800234a:	4d06      	ldr	r5, [pc, #24]	; (8002364 <DisplayStatus+0x174>)
 800234c:	e773      	b.n	8002236 <DisplayStatus+0x46>
 800234e:	bf00      	nop
 8002350:	2400c254 	.word	0x2400c254
 8002354:	000186a0 	.word	0x000186a0
 8002358:	240004d8 	.word	0x240004d8
 800235c:	2400c25c 	.word	0x2400c25c
 8002360:	0800fc34 	.word	0x0800fc34
 8002364:	240004d0 	.word	0x240004d0
 8002368:	24000500 	.word	0x24000500
 800236c:	240004c8 	.word	0x240004c8
 8002370:	24000910 	.word	0x24000910
 8002374:	240004e0 	.word	0x240004e0
 8002378:	2400425c 	.word	0x2400425c
 800237c:	24009d28 	.word	0x24009d28
 8002380:	0800fc58 	.word	0x0800fc58
 8002384:	24007520 	.word	0x24007520
 8002388:	2400293c 	.word	0x2400293c
 800238c:	00425355 	.word	0x00425355
 8002390:	0800fc38 	.word	0x0800fc38
 8002394:	0800fc48 	.word	0x0800fc48
 8002398:	0042534c 	.word	0x0042534c
 800239c:	0800fc30 	.word	0x0800fc30
 80023a0:	0800fc08 	.word	0x0800fc08
 80023a4:	0800fc50 	.word	0x0800fc50
 80023a8:	0800fc40 	.word	0x0800fc40
 80023ac:	0800fc20 	.word	0x0800fc20
 80023b0:	0800fc18 	.word	0x0800fc18
 80023b4:	0800fc00 	.word	0x0800fc00
 80023b8:	0800fc28 	.word	0x0800fc28
 80023bc:	0800fc10 	.word	0x0800fc10

080023c0 <HAL_UART_RxCpltCallback>:
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{

	/* Turn LED2 on: Transfer in reception process is correct */
	LED_RED_OFF;
 80023c0:	2200      	movs	r2, #0
 80023c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023c6:	4801      	ldr	r0, [pc, #4]	; (80023cc <HAL_UART_RxCpltCallback+0xc>)
 80023c8:	f003 bab6 	b.w	8005938 <HAL_GPIO_WritePin>
 80023cc:	58020400 	.word	0x58020400

080023d0 <SetFOutVHF>:
MCODIV = 1
	 */
	DivN2 = 291;
	FracN2 = 0;

	__HAL_RCC_PLL2_DISABLE();
 80023d0:	4b0e      	ldr	r3, [pc, #56]	; (800240c <SetFOutVHF+0x3c>)
{
 80023d2:	b082      	sub	sp, #8
	DivN2 = 291;
 80023d4:	f240 1123 	movw	r1, #291	; 0x123
	FracN2 = 0;
 80023d8:	2200      	movs	r2, #0
	DivN2 = 291;
 80023da:	9100      	str	r1, [sp, #0]
	FracN2 = 0;
 80023dc:	9201      	str	r2, [sp, #4]
	__HAL_RCC_PLL2_DISABLE();
 80023de:	681a      	ldr	r2, [r3, #0]
	__HAL_RCC_PLL2_CONFIG(8, DivN2, 2, 2, 2);
 80023e0:	490b      	ldr	r1, [pc, #44]	; (8002410 <SetFOutVHF+0x40>)
	__HAL_RCC_PLL2_DISABLE();
 80023e2:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80023e6:	601a      	str	r2, [r3, #0]
	__HAL_RCC_PLL2_CONFIG(8, DivN2, 2, 2, 2);
 80023e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ea:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 80023ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28
 80023f4:	9a00      	ldr	r2, [sp, #0]
 80023f6:	3a01      	subs	r2, #1
 80023f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023fc:	4311      	orrs	r1, r2
 80023fe:	6399      	str	r1, [r3, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002406:	601a      	str	r2, [r3, #0]


}
 8002408:	b002      	add	sp, #8
 800240a:	4770      	bx	lr
 800240c:	58024400 	.word	0x58024400
 8002410:	01010200 	.word	0x01010200

08002414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002414:	4e07      	ldr	r6, [pc, #28]	; (8002434 <Error_Handler+0x20>)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8002416:	2532      	movs	r5, #50	; 0x32
 8002418:	4c07      	ldr	r4, [pc, #28]	; (8002438 <Error_Handler+0x24>)
{
 800241a:	b508      	push	{r3, lr}
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 800241c:	6832      	ldr	r2, [r6, #0]
 800241e:	fba4 1302 	umull	r1, r3, r4, r2
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	fb05 2313 	mls	r3, r5, r3, r2
 8002428:	b103      	cbz	r3, 800242c <Error_Handler+0x18>
 800242a:	e7fe      	b.n	800242a <Error_Handler+0x16>
			LED_switch();
 800242c:	f7fe fd9a 	bl	8000f64 <LED_switch>
 8002430:	e7f4      	b.n	800241c <Error_Handler+0x8>
 8002432:	bf00      	nop
 8002434:	24009d2c 	.word	0x24009d2c
 8002438:	51eb851f 	.word	0x51eb851f

0800243c <SystemClock_Config_For_OC>:
{
 800243c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002440:	b0cc      	sub	sp, #304	; 0x130
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002442:	224c      	movs	r2, #76	; 0x4c
 8002444:	2100      	movs	r1, #0
 8002446:	a80a      	add	r0, sp, #40	; 0x28
 8002448:	f007 fe5c 	bl	800a104 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800244c:	2220      	movs	r2, #32
 800244e:	2100      	movs	r1, #0
 8002450:	a802      	add	r0, sp, #8
 8002452:	f007 fe57 	bl	800a104 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002456:	22bc      	movs	r2, #188	; 0xbc
 8002458:	2100      	movs	r1, #0
 800245a:	a81d      	add	r0, sp, #116	; 0x74
 800245c:	f007 fe52 	bl	800a104 <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002460:	2002      	movs	r0, #2
 8002462:	f003 fb07 	bl	8005a74 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002466:	4b40      	ldr	r3, [pc, #256]	; (8002568 <SystemClock_Config_For_OC+0x12c>)
 8002468:	2200      	movs	r2, #0
 800246a:	4940      	ldr	r1, [pc, #256]	; (800256c <SystemClock_Config_For_OC+0x130>)
 800246c:	9201      	str	r2, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800246e:	461a      	mov	r2, r3
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002470:	6998      	ldr	r0, [r3, #24]
 8002472:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8002476:	6198      	str	r0, [r3, #24]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002488:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002492:	6993      	ldr	r3, [r2, #24]
 8002494:	049b      	lsls	r3, r3, #18
 8002496:	d5fc      	bpl.n	8002492 <SystemClock_Config_For_OC+0x56>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002498:	4935      	ldr	r1, [pc, #212]	; (8002570 <SystemClock_Config_For_OC+0x134>)
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800249a:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800249c:	2504      	movs	r5, #4
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800249e:	2200      	movs	r2, #0
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80024a0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024a2:	2601      	movs	r6, #1
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024a4:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	RCC_OscInitStruct.PLL.PLLN = 300;
 80024a8:	f44f 7c96 	mov.w	ip, #300	; 0x12c
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80024ac:	f023 0303 	bic.w	r3, r3, #3
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b0:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80024b2:	4323      	orrs	r3, r4
 80024b4:	628b      	str	r3, [r1, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = 2;
 80024b6:	9417      	str	r4, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80024b8:	9419      	str	r4, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLM = 2;
 80024ba:	9415      	str	r4, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80024bc:	9518      	str	r5, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80024be:	921c      	str	r2, [sp, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 300;
 80024c0:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024c4:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024c8:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80024cc:	e9cd 521a 	strd	r5, r2, [sp, #104]	; 0x68
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d0:	f003 faf6 	bl	8005ac0 <HAL_RCC_OscConfig>
 80024d4:	2800      	cmp	r0, #0
 80024d6:	d144      	bne.n	8002562 <SystemClock_Config_For_OC+0x126>
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80024d8:	2308      	movs	r3, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024da:	213f      	movs	r1, #63	; 0x3f
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024dc:	2203      	movs	r2, #3
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80024de:	f04f 0840 	mov.w	r8, #64	; 0x40
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80024e2:	f44f 6980 	mov.w	r9, #1024	; 0x400
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80024e6:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024e8:	9102      	str	r1, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80024ea:	eb0d 0003 	add.w	r0, sp, r3
 80024ee:	4629      	mov	r1, r5
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80024f0:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024f2:	9203      	str	r2, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80024f4:	e9cd 8806 	strd	r8, r8, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80024f8:	e9cd 9808 	strd	r9, r8, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80024fc:	f003 feb4 	bl	8006268 <HAL_RCC_ClockConfig>
 8002500:	4603      	mov	r3, r0
 8002502:	bb70      	cbnz	r0, 8002562 <SystemClock_Config_For_OC+0x126>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8002504:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8002574 <SystemClock_Config_For_OC+0x138>
	PeriphClkInitStruct.PLL3.PLL3N = 320;
 8002508:	f44f 7ea0 	mov.w	lr, #320	; 0x140
	PeriphClkInitStruct.PLL2.PLL2N = 240;
 800250c:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
	PeriphClkInitStruct.PLL2.PLL2P = 16;
 8002510:	2110      	movs	r1, #16
	PeriphClkInitStruct.PLL2.PLL2FRACN = 6000;
 8002512:	f241 7270 	movw	r2, #6000	; 0x1770
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002516:	a81d      	add	r0, sp, #116	; 0x74
	PeriphClkInitStruct.PLL3.PLL3M = 4;
 8002518:	9526      	str	r5, [sp, #152]	; 0x98
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 800251a:	951e      	str	r5, [sp, #120]	; 0x78
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800251c:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002520:	9324      	str	r3, [sp, #144]	; 0x90
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002522:	933a      	str	r3, [sp, #232]	; 0xe8
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8002524:	f8cd 910c 	str.w	r9, [sp, #268]	; 0x10c
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8002528:	9745      	str	r7, [sp, #276]	; 0x114
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 800252a:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
	PeriphClkInitStruct.PLL3.PLL3N = 320;
 800252e:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
	PeriphClkInitStruct.PLL2.PLL2FRACN = 6000;
 8002532:	9225      	str	r2, [sp, #148]	; 0x94
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002534:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
	PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002538:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 800253c:	e9cd 592a 	strd	r5, r9, [sp, #168]	; 0xa8
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002540:	e9cd 332c 	strd	r3, r3, [sp, #176]	; 0xb0
	PeriphClkInitStruct.PLL2.PLL2P = 16;
 8002544:	e9cd c11f 	strd	ip, r1, [sp, #124]	; 0x7c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002548:	f004 fab8 	bl	8006abc <HAL_RCCEx_PeriphCLKConfig>
 800254c:	b948      	cbnz	r0, 8002562 <SystemClock_Config_For_OC+0x126>
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_1);
 800254e:	4630      	mov	r0, r6
 8002550:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002554:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8002558:	f003 fdaa 	bl	80060b0 <HAL_RCC_MCOConfig>
}
 800255c:	b04c      	add	sp, #304	; 0x130
 800255e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Error_Handler();
 8002562:	f7ff ff57 	bl	8002414 <Error_Handler>
 8002566:	bf00      	nop
 8002568:	58024800 	.word	0x58024800
 800256c:	58000400 	.word	0x58000400
 8002570:	58024400 	.word	0x58024400
 8002574:	00080042 	.word	0x00080042

08002578 <MX_TIM6_Init_Custom_Rate>:
{
 8002578:	b510      	push	{r4, lr}
	htim6.Instance = TIM6;
 800257a:	4810      	ldr	r0, [pc, #64]	; (80025bc <MX_TIM6_Init_Custom_Rate+0x44>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800257c:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 800257e:	4c10      	ldr	r4, [pc, #64]	; (80025c0 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 8002580:	b084      	sub	sp, #16
	htim6.Init.Period = 7679;
 8002582:	f641 51ff 	movw	r1, #7679	; 0x1dff
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002586:	2280      	movs	r2, #128	; 0x80
	htim6.Instance = TIM6;
 8002588:	6020      	str	r0, [r4, #0]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800258a:	4620      	mov	r0, r4
	htim6.Init.Period = 7679;
 800258c:	60e1      	str	r1, [r4, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800258e:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 8002590:	6063      	str	r3, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002592:	9301      	str	r3, [sp, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002594:	60a3      	str	r3, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002596:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800259a:	f005 fad3 	bl	8007b44 <HAL_TIM_Base_Init>
 800259e:	b950      	cbnz	r0, 80025b6 <MX_TIM6_Init_Custom_Rate+0x3e>
 80025a0:	4603      	mov	r3, r0
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025a2:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025a4:	a901      	add	r1, sp, #4
 80025a6:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a8:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025aa:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025ac:	f005 fc3a 	bl	8007e24 <HAL_TIMEx_MasterConfigSynchronization>
 80025b0:	b908      	cbnz	r0, 80025b6 <MX_TIM6_Init_Custom_Rate+0x3e>
}
 80025b2:	b004      	add	sp, #16
 80025b4:	bd10      	pop	{r4, pc}
		Error_Handler();
 80025b6:	f7ff ff2d 	bl	8002414 <Error_Handler>
 80025ba:	bf00      	nop
 80025bc:	40001000 	.word	0x40001000
 80025c0:	24008cc0 	.word	0x24008cc0
 80025c4:	00000000 	.word	0x00000000

080025c8 <main>:
{
 80025c8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80025cc:	b0a9      	sub	sp, #164	; 0xa4
  HAL_Init();
 80025ce:	f000 fec3 	bl	8003358 <HAL_Init>
  __ASM volatile ("dsb 0xF":::"memory");
 80025d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80025d6:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80025da:	48ce      	ldr	r0, [pc, #824]	; (8002914 <main+0x34c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80025e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80025e6:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80025ea:	6943      	ldr	r3, [r0, #20]
 80025ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f0:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80025f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80025f6:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80025fa:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80025fe:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002602:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002606:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800260a:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800260e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002612:	07b7      	lsls	r7, r6, #30
 8002614:	015d      	lsls	r5, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002616:	ea05 040c 	and.w	r4, r5, ip
 800261a:	4639      	mov	r1, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800261c:	4632      	mov	r2, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800261e:	ea41 0304 	orr.w	r3, r1, r4
      } while (ways-- != 0U);
 8002622:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002624:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
 8002628:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800262c:	1c53      	adds	r3, r2, #1
 800262e:	d1f6      	bne.n	800261e <main+0x56>
 8002630:	3d20      	subs	r5, #32
    } while(sets-- != 0U);
 8002632:	f115 0f20 	cmn.w	r5, #32
 8002636:	d1ee      	bne.n	8002616 <main+0x4e>
 8002638:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800263c:	6943      	ldr	r3, [r0, #20]
 800263e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002642:	6143      	str	r3, [r0, #20]
 8002644:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002648:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	2600      	movs	r6, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800264e:	4db2      	ldr	r5, [pc, #712]	; (8002918 <main+0x350>)
	SystemClock_Config_For_OC();
 8002650:	f7ff fef4 	bl	800243c <SystemClock_Config_For_OC>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002654:	2401      	movs	r4, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002656:	9620      	str	r6, [sp, #128]	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	f04f 0902 	mov.w	r9, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	9621      	str	r6, [sp, #132]	; 0x84
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800265e:	f44f 7180 	mov.w	r1, #256	; 0x100
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002662:	9622      	str	r6, [sp, #136]	; 0x88
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002664:	4632      	mov	r2, r6
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002666:	9623      	str	r6, [sp, #140]	; 0x8c
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002668:	4688      	mov	r8, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266a:	961f      	str	r6, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266c:	2703      	movs	r7, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800266e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002672:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002676:	48a9      	ldr	r0, [pc, #676]	; (800291c <main+0x354>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002678:	f043 0304 	orr.w	r3, r3, #4
  hadc1.Instance = ADC1;
 800267c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8002948 <main+0x380>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002680:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8002684:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	9306      	str	r3, [sp, #24]
 800268e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002690:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002698:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800269c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	9307      	str	r3, [sp, #28]
 80026a6:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80026ac:	4323      	orrs	r3, r4
 80026ae:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80026b2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80026b6:	4023      	ands	r3, r4
 80026b8:	9308      	str	r3, [sp, #32]
 80026ba:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026bc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80026c0:	ea43 0309 	orr.w	r3, r3, r9
 80026c4:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80026c8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80026cc:	ea03 0309 	and.w	r3, r3, r9
 80026d0:	9309      	str	r3, [sp, #36]	; 0x24
 80026d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80026d8:	f043 0308 	orr.w	r3, r3, #8
 80026dc:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80026e0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	930a      	str	r3, [sp, #40]	; 0x28
 80026ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80026ec:	f003 f924 	bl	8005938 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SwInt1_Pin;
 80026f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026f4:	4a8a      	ldr	r2, [pc, #552]	; (8002920 <main+0x358>)
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 80026f6:	a91f      	add	r1, sp, #124	; 0x7c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026f8:	9421      	str	r4, [sp, #132]	; 0x84
  GPIO_InitStruct.Pin = SwInt1_Pin;
 80026fa:	901f      	str	r0, [sp, #124]	; 0x7c
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 80026fc:	4889      	ldr	r0, [pc, #548]	; (8002924 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026fe:	9220      	str	r2, [sp, #128]	; 0x80
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8002700:	f002 fffc 	bl	80056fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002704:	f44f 7200 	mov.w	r2, #512	; 0x200
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002708:	a91f      	add	r1, sp, #124	; 0x7c
 800270a:	4886      	ldr	r0, [pc, #536]	; (8002924 <main+0x35c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	9621      	str	r6, [sp, #132]	; 0x84
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800270e:	9623      	str	r6, [sp, #140]	; 0x8c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002710:	9722      	str	r7, [sp, #136]	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	e9cd 291f 	strd	r2, r9, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002716:	f002 fff1 	bl	80056fc <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800271a:	a91f      	add	r1, sp, #124	; 0x7c
 800271c:	487f      	ldr	r0, [pc, #508]	; (800291c <main+0x354>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	9622      	str	r6, [sp, #136]	; 0x88
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002720:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	e9cd 4620 	strd	r4, r6, [sp, #128]	; 0x80
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002728:	f002 ffe8 	bl	80056fc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 800272c:	4632      	mov	r2, r6
 800272e:	2104      	movs	r1, #4
 8002730:	2028      	movs	r0, #40	; 0x28
 8002732:	f001 fc93 	bl	800405c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002736:	2028      	movs	r0, #40	; 0x28
 8002738:	f001 fcc6 	bl	80040c8 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800273c:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002740:	4632      	mov	r2, r6
 8002742:	4631      	mov	r1, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002744:	4323      	orrs	r3, r4
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002746:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002748:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 800274c:	f8d5 50d8 	ldr.w	r5, [r5, #216]	; 0xd8
 8002750:	4025      	ands	r5, r4
 8002752:	9505      	str	r5, [sp, #20]
 8002754:	9d05      	ldr	r5, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002756:	f001 fc81 	bl	800405c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800275a:	200b      	movs	r0, #11
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800275c:	2504      	movs	r5, #4
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800275e:	f001 fcb3 	bl	80040c8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8002762:	4632      	mov	r2, r6
 8002764:	4649      	mov	r1, r9
 8002766:	200c      	movs	r0, #12
 8002768:	f001 fc78 	bl	800405c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800276c:	200c      	movs	r0, #12
 800276e:	f001 fcab 	bl	80040c8 <HAL_NVIC_EnableIRQ>
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002772:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  hadc1.Instance = ADC1;
 8002776:	4a6c      	ldr	r2, [pc, #432]	; (8002928 <main+0x360>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002778:	2308      	movs	r3, #8
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800277a:	4650      	mov	r0, sl
  ADC_MultiModeTypeDef multimode = {0};
 800277c:	960e      	str	r6, [sp, #56]	; 0x38
  ADC_ChannelConfTypeDef sConfig = {0};
 800277e:	9618      	str	r6, [sp, #96]	; 0x60
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8002780:	f8ca 702c 	str.w	r7, [sl, #44]	; 0x2c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002784:	f8ca 600c 	str.w	r6, [sl, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002788:	f88a 6014 	strb.w	r6, [sl, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800278c:	f88a 4015 	strb.w	r4, [sl, #21]
  hadc1.Init.NbrOfConversion = 1;
 8002790:	f8ca 4018 	str.w	r4, [sl, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002794:	f88a 601c 	strb.w	r6, [sl, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002798:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800279c:	f88a 6038 	strb.w	r6, [sl, #56]	; 0x38
  hadc1.Instance = ADC1;
 80027a0:	f8ca 2000 	str.w	r2, [sl]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80027a4:	f8ca b004 	str.w	fp, [sl, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027a8:	f8ca 3008 	str.w	r3, [sl, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027ac:	f8ca 5010 	str.w	r5, [sl, #16]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80027b0:	f8ca 9030 	str.w	r9, [sl, #48]	; 0x30
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027b4:	e9ca 6609 	strd	r6, r6, [sl, #36]	; 0x24
  ADC_MultiModeTypeDef multimode = {0};
 80027b8:	e9cd 660f 	strd	r6, r6, [sp, #60]	; 0x3c
  ADC_ChannelConfTypeDef sConfig = {0};
 80027bc:	e9cd 6619 	strd	r6, r6, [sp, #100]	; 0x64
 80027c0:	e9cd 661b 	strd	r6, r6, [sp, #108]	; 0x6c
 80027c4:	e9cd 661d 	strd	r6, r6, [sp, #116]	; 0x74
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027c8:	f001 f9e8 	bl	8003b9c <HAL_ADC_Init>
 80027cc:	2800      	cmp	r0, #0
 80027ce:	f040 80fe 	bne.w	80029ce <main+0x406>
  multimode.Mode = ADC_DUALMODE_INTERL;
 80027d2:	2007      	movs	r0, #7
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 80027d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80027d8:	a90e      	add	r1, sp, #56	; 0x38
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 80027da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  multimode.Mode = ADC_DUALMODE_INTERL;
 80027de:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80027e0:	4650      	mov	r0, sl
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 80027e2:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80027e4:	f001 fbc6 	bl	8003f74 <HAL_ADCEx_MultiModeConfigChannel>
 80027e8:	4602      	mov	r2, r0
 80027ea:	2800      	cmp	r0, #0
 80027ec:	f040 80ef 	bne.w	80029ce <main+0x406>
  sConfig.Channel = ADC_CHANNEL_5;
 80027f0:	f8df 8158 	ldr.w	r8, [pc, #344]	; 800294c <main+0x384>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027f4:	2706      	movs	r7, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80027f6:	f240 76ff 	movw	r6, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027fa:	a918      	add	r1, sp, #96	; 0x60
 80027fc:	4650      	mov	r0, sl
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80027fe:	921a      	str	r2, [sp, #104]	; 0x68
  sConfig.OffsetSignedSaturation = DISABLE;
 8002800:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002804:	961b      	str	r6, [sp, #108]	; 0x6c
  sConfig.Offset = 0;
 8002806:	e9cd 521c 	strd	r5, r2, [sp, #112]	; 0x70
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800280a:	e9cd 8718 	strd	r8, r7, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800280e:	f000 fe77 	bl	8003500 <HAL_ADC_ConfigChannel>
 8002812:	4602      	mov	r2, r0
 8002814:	2800      	cmp	r0, #0
 8002816:	f040 80da 	bne.w	80029ce <main+0x406>
  hadc2.Instance = ADC2;
 800281a:	4b44      	ldr	r3, [pc, #272]	; (800292c <main+0x364>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800281c:	2108      	movs	r1, #8
  hadc2.Instance = ADC2;
 800281e:	f8df c130 	ldr.w	ip, [pc, #304]	; 8002950 <main+0x388>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002822:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002824:	4618      	mov	r0, r3
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002826:	751a      	strb	r2, [r3, #20]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002828:	771a      	strb	r2, [r3, #28]
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800282a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800282c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002830:	f8c3 b004 	str.w	fp, [r3, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002834:	611d      	str	r5, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002836:	755c      	strb	r4, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8002838:	619c      	str	r4, [r3, #24]
  hadc2.Instance = ADC2;
 800283a:	f8c3 c000 	str.w	ip, [r3]
 800283e:	9303      	str	r3, [sp, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002840:	e9c3 1202 	strd	r1, r2, [r3, #8]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002844:	e9c3 290b 	strd	r2, r9, [r3, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8002848:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
 800284c:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
 8002850:	e9cd 2216 	strd	r2, r2, [sp, #88]	; 0x58
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002854:	f001 f9a2 	bl	8003b9c <HAL_ADC_Init>
 8002858:	4602      	mov	r2, r0
 800285a:	2800      	cmp	r0, #0
 800285c:	f040 80b7 	bne.w	80029ce <main+0x406>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002860:	9b03      	ldr	r3, [sp, #12]
 8002862:	a911      	add	r1, sp, #68	; 0x44
  sConfig.OffsetSignedSaturation = DISABLE;
 8002864:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002868:	4618      	mov	r0, r3
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800286a:	e9cd 8711 	strd	r8, r7, [sp, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800286e:	e9cd 2613 	strd	r2, r6, [sp, #76]	; 0x4c
  sConfig.Offset = 0;
 8002872:	e9cd 5215 	strd	r5, r2, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002876:	f000 fe43 	bl	8003500 <HAL_ADC_ConfigChannel>
 800287a:	4601      	mov	r1, r0
 800287c:	2800      	cmp	r0, #0
 800287e:	f040 80a6 	bne.w	80029ce <main+0x406>
  DAC_ChannelConfTypeDef sConfig = {0};
 8002882:	2224      	movs	r2, #36	; 0x24
  hdac1.Instance = DAC1;
 8002884:	4d2a      	ldr	r5, [pc, #168]	; (8002930 <main+0x368>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8002886:	a81f      	add	r0, sp, #124	; 0x7c
 8002888:	f007 fc3c 	bl	800a104 <memset>
  hdac1.Instance = DAC1;
 800288c:	4b29      	ldr	r3, [pc, #164]	; (8002934 <main+0x36c>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800288e:	4628      	mov	r0, r5
  hdac1.Instance = DAC1;
 8002890:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002892:	f001 fc3f 	bl	8004114 <HAL_DAC_Init>
 8002896:	4603      	mov	r3, r0
 8002898:	2800      	cmp	r0, #0
 800289a:	f040 8098 	bne.w	80029ce <main+0x406>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800289e:	2616      	movs	r6, #22
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80028a0:	461a      	mov	r2, r3
 80028a2:	a91f      	add	r1, sp, #124	; 0x7c
 80028a4:	4628      	mov	r0, r5
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80028a6:	931f      	str	r3, [sp, #124]	; 0x7c
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80028a8:	9323      	str	r3, [sp, #140]	; 0x8c
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80028aa:	9620      	str	r6, [sp, #128]	; 0x80
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80028ac:	e9cd 3421 	strd	r3, r4, [sp, #132]	; 0x84
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80028b0:	f001 fd48 	bl	8004344 <HAL_DAC_ConfigChannel>
 80028b4:	4602      	mov	r2, r0
 80028b6:	2800      	cmp	r0, #0
 80028b8:	f040 8089 	bne.w	80029ce <main+0x406>
  hlptim2.Instance = LPTIM2;
 80028bc:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <main+0x370>)
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80028be:	f64f 74ff 	movw	r4, #65535	; 0xffff
  hlptim2.Instance = LPTIM2;
 80028c2:	4d1e      	ldr	r5, [pc, #120]	; (800293c <main+0x374>)
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80028c4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80028c8:	4618      	mov	r0, r3
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80028ca:	615c      	str	r4, [r3, #20]
  hlptim2.Instance = LPTIM2;
 80028cc:	601d      	str	r5, [r3, #0]
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80028ce:	6299      	str	r1, [r3, #40]	; 0x28
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80028d0:	e9c3 2201 	strd	r2, r2, [r3, #4]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80028d4:	e9c3 2203 	strd	r2, r2, [r3, #12]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80028d8:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80028dc:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80028e0:	f003 f83c 	bl	800595c <HAL_LPTIM_Init>
 80028e4:	2800      	cmp	r0, #0
 80028e6:	d172      	bne.n	80029ce <main+0x406>
  htim6.Instance = TIM6;
 80028e8:	4c15      	ldr	r4, [pc, #84]	; (8002940 <main+0x378>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ea:	2300      	movs	r3, #0
  htim6.Instance = TIM6;
 80028ec:	4815      	ldr	r0, [pc, #84]	; (8002944 <main+0x37c>)
  htim6.Init.Period = 8191;
 80028ee:	f641 71ff 	movw	r1, #8191	; 0x1fff
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028f2:	2280      	movs	r2, #128	; 0x80
  htim6.Init.Prescaler = 0;
 80028f4:	6063      	str	r3, [r4, #4]
  htim6.Instance = TIM6;
 80028f6:	6020      	str	r0, [r4, #0]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80028f8:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028fa:	930b      	str	r3, [sp, #44]	; 0x2c
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028fc:	60a3      	str	r3, [r4, #8]
  htim6.Init.Period = 8191;
 80028fe:	60e1      	str	r1, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002900:	61a2      	str	r2, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002902:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002906:	f005 f91d 	bl	8007b44 <HAL_TIM_Base_Init>
 800290a:	4603      	mov	r3, r0
 800290c:	2800      	cmp	r0, #0
 800290e:	d15e      	bne.n	80029ce <main+0x406>
 8002910:	e020      	b.n	8002954 <main+0x38c>
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00
 8002918:	58024400 	.word	0x58024400
 800291c:	58020000 	.word	0x58020000
 8002920:	11110000 	.word	0x11110000
 8002924:	58020800 	.word	0x58020800
 8002928:	40022000 	.word	0x40022000
 800292c:	240029c8 	.word	0x240029c8
 8002930:	24002928 	.word	0x24002928
 8002934:	40007400 	.word	0x40007400
 8002938:	24007690 	.word	0x24007690
 800293c:	58002400 	.word	0x58002400
 8002940:	24008cc0 	.word	0x24008cc0
 8002944:	40001000 	.word	0x40001000
 8002948:	24007624 	.word	0x24007624
 800294c:	14f00020 	.word	0x14f00020
 8002950:	40022100 	.word	0x40022100
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002954:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002956:	a90b      	add	r1, sp, #44	; 0x2c
 8002958:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800295a:	930d      	str	r3, [sp, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800295c:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800295e:	f005 fa61 	bl	8007e24 <HAL_TIMEx_MasterConfigSynchronization>
 8002962:	4603      	mov	r3, r0
 8002964:	bb98      	cbnz	r0, 80029ce <main+0x406>
  huart3.Instance = USART3;
 8002966:	4e4d      	ldr	r6, [pc, #308]	; (8002a9c <main+0x4d4>)
  huart3.Init.BaudRate = 115200;
 8002968:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 800296c:	220c      	movs	r2, #12
  huart3.Instance = USART3;
 800296e:	4c4c      	ldr	r4, [pc, #304]	; (8002aa0 <main+0x4d8>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002970:	4630      	mov	r0, r6
  huart3.Init.Parity = UART_PARITY_NONE;
 8002972:	6133      	str	r3, [r6, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002974:	62b3      	str	r3, [r6, #40]	; 0x28
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002976:	6172      	str	r2, [r6, #20]
  huart3.Init.BaudRate = 115200;
 8002978:	e9c6 4100 	strd	r4, r1, [r6]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800297c:	e9c6 3302 	strd	r3, r3, [r6, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002980:	e9c6 3306 	strd	r3, r3, [r6, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002984:	e9c6 3308 	strd	r3, r3, [r6, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002988:	f005 fe7e 	bl	8008688 <HAL_UART_Init>
 800298c:	4601      	mov	r1, r0
 800298e:	b9f0      	cbnz	r0, 80029ce <main+0x406>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002990:	4630      	mov	r0, r6
 8002992:	f006 f9dd 	bl	8008d50 <HAL_UARTEx_SetTxFifoThreshold>
 8002996:	4601      	mov	r1, r0
 8002998:	b9c8      	cbnz	r0, 80029ce <main+0x406>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800299a:	4630      	mov	r0, r6
 800299c:	f006 fa2a 	bl	8008df4 <HAL_UARTEx_SetRxFifoThreshold>
 80029a0:	b9a8      	cbnz	r0, 80029ce <main+0x406>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80029a2:	4630      	mov	r0, r6
 80029a4:	f006 f9b6 	bl	8008d14 <HAL_UARTEx_DisableFifoMode>
 80029a8:	4604      	mov	r4, r0
 80029aa:	b980      	cbnz	r0, 80029ce <main+0x406>
	MX_TIM6_Init_Custom_Rate();
 80029ac:	f7ff fde4 	bl	8002578 <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 80029b0:	4621      	mov	r1, r4
 80029b2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80029b6:	483b      	ldr	r0, [pc, #236]	; (8002aa4 <main+0x4dc>)
 80029b8:	f001 fa08 	bl	8003dcc <HAL_ADCEx_Calibration_Start>
 80029bc:	b938      	cbnz	r0, 80029ce <main+0x406>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 80029be:	4601      	mov	r1, r0
 80029c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80029c4:	4838      	ldr	r0, [pc, #224]	; (8002aa8 <main+0x4e0>)
 80029c6:	f001 fa01 	bl	8003dcc <HAL_ADCEx_Calibration_Start>
 80029ca:	4605      	mov	r5, r0
 80029cc:	b108      	cbz	r0, 80029d2 <main+0x40a>
    Error_Handler();
 80029ce:	f7ff fd21 	bl	8002414 <Error_Handler>
	volume= 0.1;
 80029d2:	4b36      	ldr	r3, [pc, #216]	; (8002aac <main+0x4e4>)
	SetFstep(2);
 80029d4:	2002      	movs	r0, #2
	volume= 0.1;
 80029d6:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8002b34 <main+0x56c>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 80029da:	f44f 6700 	mov.w	r7, #2048	; 0x800
	SamplingRate = ((160000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 80029de:	4c34      	ldr	r4, [pc, #208]	; (8002ab0 <main+0x4e8>)
	volume= 0.1;
 80029e0:	f8ca 3000 	str.w	r3, [sl]
	SetFstep(2);
 80029e4:	f7fe f8e2 	bl	8000bac <SetFstep>
	cwpitch = CWPITCH;
 80029e8:	4a32      	ldr	r2, [pc, #200]	; (8002ab4 <main+0x4ec>)
	AMindex  = LSBindex = 1;
 80029ea:	2301      	movs	r3, #1
	cwpitch = CWPITCH;
 80029ec:	4932      	ldr	r1, [pc, #200]	; (8002ab8 <main+0x4f0>)
	bw[AM]   = bw[LSB]  = Wide;
 80029ee:	f04f 3c01 	mov.w	ip, #16843009	; 0x1010101
	agc[AM]  = agc[LSB] = Slow;
 80029f2:	4832      	ldr	r0, [pc, #200]	; (8002abc <main+0x4f4>)
	cwpitch = CWPITCH;
 80029f4:	6011      	str	r1, [r2, #0]
	os_time = 0;
 80029f6:	4932      	ldr	r1, [pc, #200]	; (8002ac0 <main+0x4f8>)
	meanavg = 0.f;
 80029f8:	4a32      	ldr	r2, [pc, #200]	; (8002ac4 <main+0x4fc>)
	os_time = 0;
 80029fa:	600d      	str	r5, [r1, #0]
	meanavg = 0.f;
 80029fc:	2100      	movs	r1, #0
 80029fe:	6011      	str	r1, [r2, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8002a00:	4a31      	ldr	r2, [pc, #196]	; (8002ac8 <main+0x500>)
 8002a02:	4932      	ldr	r1, [pc, #200]	; (8002acc <main+0x504>)
 8002a04:	6011      	str	r1, [r2, #0]
	Muted   = false;
 8002a06:	4a32      	ldr	r2, [pc, #200]	; (8002ad0 <main+0x508>)
	AMindex  = LSBindex = 1;
 8002a08:	4932      	ldr	r1, [pc, #200]	; (8002ad4 <main+0x50c>)
	Muted   = false;
 8002a0a:	7015      	strb	r5, [r2, #0]
	AMindex  = LSBindex = 1;
 8002a0c:	4a32      	ldr	r2, [pc, #200]	; (8002ad8 <main+0x510>)
 8002a0e:	800b      	strh	r3, [r1, #0]
 8002a10:	8013      	strh	r3, [r2, #0]
	USBindex = CWindex  = 1;
 8002a12:	4932      	ldr	r1, [pc, #200]	; (8002adc <main+0x514>)
 8002a14:	4a32      	ldr	r2, [pc, #200]	; (8002ae0 <main+0x518>)
 8002a16:	800b      	strh	r3, [r1, #0]
 8002a18:	8013      	strh	r3, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8002a1a:	4932      	ldr	r1, [pc, #200]	; (8002ae4 <main+0x51c>)
	agc[AM]  = agc[LSB] = Slow;
 8002a1c:	4a32      	ldr	r2, [pc, #200]	; (8002ae8 <main+0x520>)
	bw[AM]   = bw[LSB]  = Wide;
 8002a1e:	f8c1 c000 	str.w	ip, [r1]
	agc[AM]  = agc[LSB] = Slow;
 8002a22:	6010      	str	r0, [r2, #0]
	AGC_decay[Fast] = 0.9995f;
 8002a24:	4b31      	ldr	r3, [pc, #196]	; (8002aec <main+0x524>)
 8002a26:	4932      	ldr	r1, [pc, #200]	; (8002af0 <main+0x528>)
	AGC_decay[Slow] = 0.99995f;
 8002a28:	4a32      	ldr	r2, [pc, #200]	; (8002af4 <main+0x52c>)
	Hangcount[Fast] = 2;
 8002a2a:	4833      	ldr	r0, [pc, #204]	; (8002af8 <main+0x530>)
 8002a2c:	4d33      	ldr	r5, [pc, #204]	; (8002afc <main+0x534>)
	AGC_decay[Fast] = 0.9995f;
 8002a2e:	6019      	str	r1, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 8002a30:	605a      	str	r2, [r3, #4]
	AgcThreshold    = 1.92e-4f;
 8002a32:	4933      	ldr	r1, [pc, #204]	; (8002b00 <main+0x538>)
 8002a34:	4a33      	ldr	r2, [pc, #204]	; (8002b04 <main+0x53c>)
	SamplingRate = ((160000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8002a36:	4b34      	ldr	r3, [pc, #208]	; (8002b08 <main+0x540>)
	Hangcount[Fast] = 2;
 8002a38:	6005      	str	r5, [r0, #0]
	SetFOutVHF(10000000);
 8002a3a:	4834      	ldr	r0, [pc, #208]	; (8002b0c <main+0x544>)
	AgcThreshold    = 1.92e-4f;
 8002a3c:	6011      	str	r1, [r2, #0]
	SamplingRate = ((160000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8002a3e:	6023      	str	r3, [r4, #0]
	SetFOutVHF(10000000);
 8002a40:	f7ff fcc6 	bl	80023d0 <SetFOutVHF>
	SamplingRate = SamplingRate * 4000000.f / 3999300.f; // Correct Xtal error
 8002a44:	edd4 7a00 	vldr	s15, [r4]
 8002a48:	eddf 6a31 	vldr	s13, [pc, #196]	; 8002b10 <main+0x548>
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002a4c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002b14 <main+0x54c>
	SamplingRate = SamplingRate * 4000000.f / 3999300.f; // Correct Xtal error
 8002a50:	ee67 7aa6 	vmul.f32	s15, s15, s13
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002a54:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <main+0x550>)
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8002a56:	4d31      	ldr	r5, [pc, #196]	; (8002b1c <main+0x554>)
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002a58:	ee27 7a87 	vmul.f32	s14, s15, s14
	SamplingRate = SamplingRate * 4000000.f / 3999300.f; // Correct Xtal error
 8002a5c:	edc4 7a00 	vstr	s15, [r4]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002a60:	ed83 7a00 	vstr	s14, [r3]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 8002a64:	f7ff f972 	bl	8001d4c <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8002a68:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <main+0x558>)
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	9701      	str	r7, [sp, #4]
 8002a6e:	2140      	movs	r1, #64	; 0x40
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	482c      	ldr	r0, [pc, #176]	; (8002b24 <main+0x55c>)
 8002a74:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <main+0x560>)
 8002a76:	f006 fdaf 	bl	80095d8 <arm_fir_decimate_init_f32>
 8002a7a:	7028      	strb	r0, [r5, #0]
	while(arc != ARM_MATH_SUCCESS)
 8002a7c:	b100      	cbz	r0, 8002a80 <main+0x4b8>
 8002a7e:	e7fe      	b.n	8002a7e <main+0x4b6>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 8002a80:	4b2a      	ldr	r3, [pc, #168]	; (8002b2c <main+0x564>)
 8002a82:	2204      	movs	r2, #4
 8002a84:	9701      	str	r7, [sp, #4]
 8002a86:	2140      	movs	r1, #64	; 0x40
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	4829      	ldr	r0, [pc, #164]	; (8002b30 <main+0x568>)
 8002a8c:	4b26      	ldr	r3, [pc, #152]	; (8002b28 <main+0x560>)
 8002a8e:	f006 fda3 	bl	80095d8 <arm_fir_decimate_init_f32>
 8002a92:	7028      	strb	r0, [r5, #0]
	while(arc != ARM_MATH_SUCCESS)
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d04f      	beq.n	8002b38 <main+0x570>
 8002a98:	e7fe      	b.n	8002a98 <main+0x4d0>
 8002a9a:	bf00      	nop
 8002a9c:	2400293c 	.word	0x2400293c
 8002aa0:	40004800 	.word	0x40004800
 8002aa4:	24007624 	.word	0x24007624
 8002aa8:	240029c8 	.word	0x240029c8
 8002aac:	3dcccccd 	.word	0x3dcccccd
 8002ab0:	24004300 	.word	0x24004300
 8002ab4:	24009d20 	.word	0x24009d20
 8002ab8:	44228000 	.word	0x44228000
 8002abc:	00010101 	.word	0x00010101
 8002ac0:	24009d2c 	.word	0x24009d2c
 8002ac4:	2400c240 	.word	0x2400c240
 8002ac8:	24008d10 	.word	0x24008d10
 8002acc:	3f7cac08 	.word	0x3f7cac08
 8002ad0:	24007620 	.word	0x24007620
 8002ad4:	2400d660 	.word	0x2400d660
 8002ad8:	2400d662 	.word	0x2400d662
 8002adc:	24008d14 	.word	0x24008d14
 8002ae0:	24007ed4 	.word	0x24007ed4
 8002ae4:	24008d18 	.word	0x24008d18
 8002ae8:	24007688 	.word	0x24007688
 8002aec:	2400c24c 	.word	0x2400c24c
 8002af0:	3f7fdf3b 	.word	0x3f7fdf3b
 8002af4:	3f7ffcb9 	.word	0x3f7ffcb9
 8002af8:	24009d24 	.word	0x24009d24
 8002afc:	001e0002 	.word	0x001e0002
 8002b00:	3949539c 	.word	0x3949539c
 8002b04:	24009d1c 	.word	0x24009d1c
 8002b08:	4b189680 	.word	0x4b189680
 8002b0c:	00989680 	.word	0x00989680
 8002b10:	3f8005bd 	.word	0x3f8005bd
 8002b14:	3b800000 	.word	0x3b800000
 8002b18:	24007ed0 	.word	0x24007ed0
 8002b1c:	2400c244 	.word	0x2400c244
 8002b20:	24004c08 	.word	0x24004c08
 8002b24:	24000504 	.word	0x24000504
 8002b28:	240000f4 	.word	0x240000f4
 8002b2c:	24009d30 	.word	0x24009d30
 8002b30:	24008754 	.word	0x24008754
 8002b34:	2400425c 	.word	0x2400425c
	Load_Presets();
 8002b38:	f7fd fe0a 	bl	8000750 <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	f7fd fe31 	bl	80007a4 <Tune_Preset>
	DisplayStatus();    // Display status, it would not be shown until a user input was given
 8002b42:	f7ff fb55 	bl	80021f0 <DisplayStatus>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 8002b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b4a:	497d      	ldr	r1, [pc, #500]	; (8002d40 <main+0x778>)
 8002b4c:	487d      	ldr	r0, [pc, #500]	; (8002d44 <main+0x77c>)
 8002b4e:	f001 f991 	bl	8003e74 <HAL_ADCEx_MultiModeStart_DMA>
 8002b52:	4604      	mov	r4, r0
 8002b54:	2800      	cmp	r0, #0
 8002b56:	f47f af3a 	bne.w	80029ce <main+0x406>
	HAL_TIM_Base_Start(&htim6);
 8002b5a:	487b      	ldr	r0, [pc, #492]	; (8002d48 <main+0x780>)
			if (volume < 0)
 8002b5c:	f04f 0b00 	mov.w	fp, #0
	HAL_TIM_Base_Start(&htim6);
 8002b60:	f005 f882 	bl	8007c68 <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002b64:	4621      	mov	r1, r4
 8002b66:	4879      	ldr	r0, [pc, #484]	; (8002d4c <main+0x784>)
 8002b68:	f001 faea 	bl	8004140 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 8002b6c:	9400      	str	r4, [sp, #0]
 8002b6e:	4621      	mov	r1, r4
 8002b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b74:	4a76      	ldr	r2, [pc, #472]	; (8002d50 <main+0x788>)
 8002b76:	4875      	ldr	r0, [pc, #468]	; (8002d4c <main+0x784>)
 8002b78:	f001 fb10 	bl	800419c <HAL_DAC_Start_DMA>
	__HAL_RCC_PLL2FRACN_ENABLE();
 8002b7c:	4a75      	ldr	r2, [pc, #468]	; (8002d54 <main+0x78c>)
 8002b7e:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8002d64 <main+0x79c>
 8002b82:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002b84:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 8002d6c <main+0x7a4>
 8002b88:	f043 0310 	orr.w	r3, r3, #16
 8002b8c:	4f72      	ldr	r7, [pc, #456]	; (8002d58 <main+0x790>)
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 8002b8e:	4d73      	ldr	r5, [pc, #460]	; (8002d5c <main+0x794>)
	sprintf((char*)UartTXString, "S %-4.1f\r", SValue);
 8002b90:	4c73      	ldr	r4, [pc, #460]	; (8002d60 <main+0x798>)
	__HAL_RCC_PLL2FRACN_ENABLE();
 8002b92:	62d3      	str	r3, [r2, #44]	; 0x2c
			volume += 0.1;
 8002b94:	ed9f ab64 	vldr	d10, [pc, #400]	; 8002d28 <main+0x760>
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002b98:	ed9f 9b65 	vldr	d9, [pc, #404]	; 8002d30 <main+0x768>
 8002b9c:	ed9f 8b66 	vldr	d8, [pc, #408]	; 8002d38 <main+0x770>
	__HAL_UART_SEND_REQ (&huart3, UART_RXDATA_FLUSH_REQUEST);
 8002ba0:	6833      	ldr	r3, [r6, #0]
	__HAL_UART_CLEAR_OREFLAG (&huart3);
 8002ba2:	f04f 0e08 	mov.w	lr, #8
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	496e      	ldr	r1, [pc, #440]	; (8002d64 <main+0x79c>)
	__HAL_UART_SEND_REQ (&huart3, UART_RXDATA_FLUSH_REQUEST);
 8002baa:	f8d3 c018 	ldr.w	ip, [r3, #24]
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 8002bae:	4628      	mov	r0, r5
	__HAL_UART_SEND_REQ (&huart3, UART_RXDATA_FLUSH_REQUEST);
 8002bb0:	ea4c 0c0e 	orr.w	ip, ip, lr
 8002bb4:	f8c3 c018 	str.w	ip, [r3, #24]
	__HAL_UART_CLEAR_OREFLAG (&huart3);
 8002bb8:	f8c3 e020 	str.w	lr, [r3, #32]
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 8002bbc:	f005 fa4e 	bl	800805c <HAL_UART_Receive_IT>
 8002bc0:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
	if (result == HAL_OK)
 8002bc4:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8002bc8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002bcc:	bba3      	cbnz	r3, 8002c38 <main+0x670>
		switch (UartRXString[0])
 8002bce:	f899 3000 	ldrb.w	r3, [r9]
		UartRXDataReady = RESET;
 8002bd2:	f888 2000 	strb.w	r2, [r8]
		switch (UartRXString[0])
 8002bd6:	3b2b      	subs	r3, #43	; 0x2b
 8002bd8:	2b4c      	cmp	r3, #76	; 0x4c
 8002bda:	d82b      	bhi.n	8002c34 <main+0x66c>
 8002bdc:	e8df f003 	tbb	[pc, r3]
 8002be0:	2a7e2a8e 	.word	0x2a7e2a8e
 8002be4:	9b9e2a2a 	.word	0x9b9e2a2a
 8002be8:	6e72767a 	.word	0x6e72767a
 8002bec:	2a2a666a 	.word	0x2a2a666a
 8002bf0:	2a2a2a2a 	.word	0x2a2a2a2a
 8002bf4:	2a2a2a2a 	.word	0x2a2a2a2a
 8002bf8:	2a2a2a2a 	.word	0x2a2a2a2a
 8002bfc:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c00:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c04:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c08:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c0c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c10:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c14:	2a622a2a 	.word	0x2a622a2a
 8002c18:	5a2a2a5e 	.word	0x5a2a2a5e
 8002c1c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c20:	522a562a 	.word	0x522a562a
 8002c24:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c28:	2a4e2a4a 	.word	0x2a4e2a4a
 8002c2c:	27          	.byte	0x27
 8002c2d:	00          	.byte	0x00
			SetBW((Bwidth)Wide);  break;
 8002c2e:	2001      	movs	r0, #1
 8002c30:	f7fd fe98 	bl	8000964 <SetBW>
		DisplayStatus();
 8002c34:	f7ff fadc 	bl	80021f0 <DisplayStatus>
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002c38:	ed97 0a00 	vldr	s0, [r7]
 8002c3c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8002c40:	ee20 0b09 	vmul.f64	d0, d0, d9
 8002c44:	f009 fa94 	bl	800c170 <log10>
	sprintf((char*)UartTXString, "S %-4.1f\r", SValue);
 8002c48:	4947      	ldr	r1, [pc, #284]	; (8002d68 <main+0x7a0>)
 8002c4a:	4620      	mov	r0, r4
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002c4c:	ee20 0b08 	vmul.f64	d0, d0, d8
 8002c50:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
	sprintf((char*)UartTXString, "S %-4.1f\r", SValue);
 8002c54:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8002c58:	ec53 2b17 	vmov	r2, r3, d7
 8002c5c:	f007 fe94 	bl	800a988 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) UartTXString, strlen(UartTXString), 100);
 8002c60:	4620      	mov	r0, r4
 8002c62:	f7fd fb9d 	bl	80003a0 <strlen>
 8002c66:	2364      	movs	r3, #100	; 0x64
 8002c68:	b282      	uxth	r2, r0
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	f005 f939 	bl	8007ee4 <HAL_UART_Transmit>
 8002c72:	e795      	b.n	8002ba0 <main+0x5d8>
			SetAGC((Agctype)Slow);  break;
 8002c74:	2001      	movs	r0, #1
 8002c76:	f7fd fe97 	bl	80009a8 <SetAGC>
 8002c7a:	e7db      	b.n	8002c34 <main+0x66c>
			SetMode((Mode)USB); break;
 8002c7c:	2002      	movs	r0, #2
 8002c7e:	f7fd fee9 	bl	8000a54 <SetMode>
 8002c82:	e7d7      	b.n	8002c34 <main+0x66c>
			SetBW((Bwidth)Narrow);  break;
 8002c84:	2000      	movs	r0, #0
 8002c86:	f7fd fe6d 	bl	8000964 <SetBW>
 8002c8a:	e7d3      	b.n	8002c34 <main+0x66c>
			SetMode((Mode)LSB); break;
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f7fd fee1 	bl	8000a54 <SetMode>
 8002c92:	e7cf      	b.n	8002c34 <main+0x66c>
			SetAGC((Agctype)Fast);  break;
 8002c94:	2000      	movs	r0, #0
 8002c96:	f7fd fe87 	bl	80009a8 <SetAGC>
 8002c9a:	e7cb      	b.n	8002c34 <main+0x66c>
			SetMode((Mode)CW); break;
 8002c9c:	2003      	movs	r0, #3
 8002c9e:	f7fd fed9 	bl	8000a54 <SetMode>
 8002ca2:	e7c7      	b.n	8002c34 <main+0x66c>
			SetMode((Mode)AM); break;
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f7fd fed5 	bl	8000a54 <SetMode>
 8002caa:	e7c3      	b.n	8002c34 <main+0x66c>
			SetFstep(0); break;
 8002cac:	2000      	movs	r0, #0
 8002cae:	f7fd ff7d 	bl	8000bac <SetFstep>
 8002cb2:	e7bf      	b.n	8002c34 <main+0x66c>
			SetFstep(1); break;
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	f7fd ff79 	bl	8000bac <SetFstep>
 8002cba:	e7bb      	b.n	8002c34 <main+0x66c>
			SetFstep(2);  break;
 8002cbc:	2002      	movs	r0, #2
 8002cbe:	f7fd ff75 	bl	8000bac <SetFstep>
 8002cc2:	e7b7      	b.n	8002c34 <main+0x66c>
			SetFstep(3);  break;
 8002cc4:	2003      	movs	r0, #3
 8002cc6:	f7fd ff71 	bl	8000bac <SetFstep>
 8002cca:	e7b3      	b.n	8002c34 <main+0x66c>
			SetFstep(4);  break;
 8002ccc:	2004      	movs	r0, #4
 8002cce:	f7fd ff6d 	bl	8000bac <SetFstep>
 8002cd2:	e7af      	b.n	8002c34 <main+0x66c>
			SetFstep(5);  break;
 8002cd4:	2005      	movs	r0, #5
 8002cd6:	f7fd ff69 	bl	8000bac <SetFstep>
 8002cda:	e7ab      	b.n	8002c34 <main+0x66c>
			volume -= 0.1;
 8002cdc:	ed9a 7a00 	vldr	s14, [sl]
 8002ce0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002ce4:	ee37 7b4a 	vsub.f64	d7, d7, d10
 8002ce8:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (volume < 0)
 8002cec:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf4:	d415      	bmi.n	8002d22 <main+0x75a>
			volume += 0.1;
 8002cf6:	ed8a 7a00 	vstr	s14, [sl]
 8002cfa:	e79b      	b.n	8002c34 <main+0x66c>
 8002cfc:	ed9a 7a00 	vldr	s14, [sl]
			if (volume > 1.0)
 8002d00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			volume += 0.1;
 8002d04:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002d08:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8002d0c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8002d10:	fe87 7a66 	vminnm.f32	s14, s14, s13
 8002d14:	e7ef      	b.n	8002cf6 <main+0x72e>
			FplusClicked(); break;
 8002d16:	f7fd ff5d 	bl	8000bd4 <FplusClicked>
 8002d1a:	e78b      	b.n	8002c34 <main+0x66c>
			FminusClicked(); break;
 8002d1c:	f7fe f83e 	bl	8000d9c <FminusClicked>
 8002d20:	e788      	b.n	8002c34 <main+0x66c>
				volume = 0;
 8002d22:	f8ca b000 	str.w	fp, [sl]
 8002d26:	e785      	b.n	8002c34 <main+0x66c>
 8002d28:	9999999a 	.word	0x9999999a
 8002d2c:	3fb99999 	.word	0x3fb99999
 8002d30:	00000000 	.word	0x00000000
 8002d34:	409f4000 	.word	0x409f4000
 8002d38:	9916f6a6 	.word	0x9916f6a6
 8002d3c:	400a93fc 	.word	0x400a93fc
 8002d40:	2400ca60 	.word	0x2400ca60
 8002d44:	24007624 	.word	0x24007624
 8002d48:	24008cc0 	.word	0x24008cc0
 8002d4c:	24002928 	.word	0x24002928
 8002d50:	24006d20 	.word	0x24006d20
 8002d54:	58024400 	.word	0x58024400
 8002d58:	24008750 	.word	0x24008750
 8002d5c:	2400293c 	.word	0x2400293c
 8002d60:	24007520 	.word	0x24007520
 8002d64:	24004308 	.word	0x24004308
 8002d68:	0800fc9c 	.word	0x0800fc9c
 8002d6c:	240004e8 	.word	0x240004e8

08002d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d70:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d72:	4c14      	ldr	r4, [pc, #80]	; (8002dc4 <HAL_MspInit+0x54>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8002d74:	2102      	movs	r1, #2
{
 8002d76:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8002d78:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8002d7e:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d82:	430b      	orrs	r3, r1
 8002d84:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8002d88:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8002d8c:	400b      	ands	r3, r1
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8002d92:	f001 f963 	bl	800405c <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8002d96:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8002d9a:	2010      	movs	r0, #16
  __HAL_RCC_VREF_CLK_ENABLE();
 8002d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8002da4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8002da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8002db0:	f000 fb2e 	bl	8003410 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8002db4:	f000 fb40 	bl	8003438 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8002db8:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dba:	b002      	add	sp, #8
 8002dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8002dc0:	f000 bb30 	b.w	8003424 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 8002dc4:	58024400 	.word	0x58024400

08002dc8 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8002dc8:	4943      	ldr	r1, [pc, #268]	; (8002ed8 <HAL_ADC_MspInit+0x110>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dca:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8002dcc:	6802      	ldr	r2, [r0, #0]
{
 8002dce:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8002dd0:	428a      	cmp	r2, r1
{
 8002dd2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002dd8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8002ddc:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8002dde:	d01f      	beq.n	8002e20 <HAL_ADC_MspInit+0x58>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002de0:	4b3e      	ldr	r3, [pc, #248]	; (8002edc <HAL_ADC_MspInit+0x114>)
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d001      	beq.n	8002dea <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002de6:	b00a      	add	sp, #40	; 0x28
 8002de8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002dea:	4a3d      	ldr	r2, [pc, #244]	; (8002ee0 <HAL_ADC_MspInit+0x118>)
 8002dec:	6813      	ldr	r3, [r2, #0]
 8002dee:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002df0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002df2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002df4:	d061      	beq.n	8002eba <HAL_ADC_MspInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df6:	4b3b      	ldr	r3, [pc, #236]	; (8002ee4 <HAL_ADC_MspInit+0x11c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002df8:	2502      	movs	r5, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dfa:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfc:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e02:	4839      	ldr	r0, [pc, #228]	; (8002ee8 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e04:	432a      	orrs	r2, r5
 8002e06:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e0e:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e10:	402b      	ands	r3, r5
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e12:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e14:	9304      	str	r3, [sp, #16]
 8002e16:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e18:	f002 fc70 	bl	80056fc <HAL_GPIO_Init>
}
 8002e1c:	b00a      	add	sp, #40	; 0x28
 8002e1e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002e20:	4a2f      	ldr	r2, [pc, #188]	; (8002ee0 <HAL_ADC_MspInit+0x118>)
 8002e22:	4605      	mov	r5, r0
 8002e24:	6813      	ldr	r3, [r2, #0]
 8002e26:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002e28:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002e2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002e2c:	d037      	beq.n	8002e9e <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ee4 <HAL_ADC_MspInit+0x11c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e30:	2402      	movs	r4, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e32:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e34:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e36:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3a:	482b      	ldr	r0, [pc, #172]	; (8002ee8 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3c:	4322      	orrs	r2, r4
 8002e3e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e46:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e48:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e4a:	9606      	str	r6, [sp, #24]
    hdma_adc1.Instance = DMA1_Stream0;
 8002e4c:	4c27      	ldr	r4, [pc, #156]	; (8002eec <HAL_ADC_MspInit+0x124>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4e:	9302      	str	r3, [sp, #8]
 8002e50:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e52:	f002 fc53 	bl	80056fc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8002e56:	4826      	ldr	r0, [pc, #152]	; (8002ef0 <HAL_ADC_MspInit+0x128>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002e58:	2109      	movs	r1, #9
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_adc1.Instance = DMA1_Stream0;
 8002e62:	6020      	str	r0, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e64:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002e68:	6061      	str	r1, [r4, #4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e6a:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e6e:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002e70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e74:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e76:	2300      	movs	r3, #0
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e78:	61a0      	str	r0, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e7a:	4620      	mov	r0, r4
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e7c:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002e7e:	e9c4 1207 	strd	r1, r2, [r4, #28]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e82:	e9c4 3302 	strd	r3, r3, [r4, #8]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e86:	f001 fba5 	bl	80045d4 <HAL_DMA_Init>
 8002e8a:	b918      	cbnz	r0, 8002e94 <HAL_ADC_MspInit+0xcc>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e8c:	64ec      	str	r4, [r5, #76]	; 0x4c
 8002e8e:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8002e90:	b00a      	add	sp, #40	; 0x28
 8002e92:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002e94:	f7ff fabe 	bl	8002414 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e98:	64ec      	str	r4, [r5, #76]	; 0x4c
 8002e9a:	63a5      	str	r5, [r4, #56]	; 0x38
 8002e9c:	e7f8      	b.n	8002e90 <HAL_ADC_MspInit+0xc8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002e9e:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <HAL_ADC_MspInit+0x11c>)
 8002ea0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8002ea4:	f042 0220 	orr.w	r2, r2, #32
 8002ea8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8002eac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	9301      	str	r3, [sp, #4]
 8002eb6:	9b01      	ldr	r3, [sp, #4]
 8002eb8:	e7b9      	b.n	8002e2e <HAL_ADC_MspInit+0x66>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002eba:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <HAL_ADC_MspInit+0x11c>)
 8002ebc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8002ec0:	f042 0220 	orr.w	r2, r2, #32
 8002ec4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8002ec8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	9303      	str	r3, [sp, #12]
 8002ed2:	9b03      	ldr	r3, [sp, #12]
 8002ed4:	e78f      	b.n	8002df6 <HAL_ADC_MspInit+0x2e>
 8002ed6:	bf00      	nop
 8002ed8:	40022000 	.word	0x40022000
 8002edc:	40022100 	.word	0x40022100
 8002ee0:	240004ec 	.word	0x240004ec
 8002ee4:	58024400 	.word	0x58024400
 8002ee8:	58020400 	.word	0x58020400
 8002eec:	240086d8 	.word	0x240086d8
 8002ef0:	40020010 	.word	0x40020010

08002ef4 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8002ef4:	4b2d      	ldr	r3, [pc, #180]	; (8002fac <HAL_DAC_MspInit+0xb8>)
 8002ef6:	6802      	ldr	r2, [r0, #0]
{
 8002ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hdac->Instance==DAC1)
 8002efa:	429a      	cmp	r2, r3
{
 8002efc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efe:	f04f 0400 	mov.w	r4, #0
 8002f02:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002f06:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8002f0a:	9407      	str	r4, [sp, #28]
  if(hdac->Instance==DAC1)
 8002f0c:	d001      	beq.n	8002f12 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002f0e:	b009      	add	sp, #36	; 0x24
 8002f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002f12:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <HAL_DAC_MspInit+0xbc>)
 8002f14:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f16:	2010      	movs	r0, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f18:	2503      	movs	r5, #3
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002f1a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1e:	a903      	add	r1, sp, #12
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002f20:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002f24:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002f28:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002f2c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002f30:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8002f34:	9201      	str	r2, [sp, #4]
 8002f36:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f48:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4a:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4e:	4819      	ldr	r0, [pc, #100]	; (8002fb4 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f50:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f52:	9302      	str	r3, [sp, #8]
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8002f54:	4d18      	ldr	r5, [pc, #96]	; (8002fb8 <HAL_DAC_MspInit+0xc4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f56:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f58:	f002 fbd0 	bl	80056fc <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8002f5c:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <HAL_DAC_MspInit+0xc8>)
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f5e:	2040      	movs	r0, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002f60:	f04f 0c43 	mov.w	ip, #67	; 0x43
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8002f6c:	602b      	str	r3, [r5, #0]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f72:	60ec      	str	r4, [r5, #12]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f74:	e9c5 c001 	strd	ip, r0, [r5, #4]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002f78:	4628      	mov	r0, r5
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f7a:	e9c5 4408 	strd	r4, r4, [r5, #32]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f7e:	e9c5 7104 	strd	r7, r1, [r5, #16]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002f82:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002f86:	f001 fb25 	bl	80045d4 <HAL_DMA_Init>
 8002f8a:	b958      	cbnz	r0, 8002fa4 <HAL_DAC_MspInit+0xb0>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002f8c:	60b5      	str	r5, [r6, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2101      	movs	r1, #1
 8002f92:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002f94:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002f96:	f001 f861 	bl	800405c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f9a:	2036      	movs	r0, #54	; 0x36
 8002f9c:	f001 f894 	bl	80040c8 <HAL_NVIC_EnableIRQ>
}
 8002fa0:	b009      	add	sp, #36	; 0x24
 8002fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8002fa4:	f7ff fa36 	bl	8002414 <Error_Handler>
 8002fa8:	e7f0      	b.n	8002f8c <HAL_DAC_MspInit+0x98>
 8002faa:	bf00      	nop
 8002fac:	40007400 	.word	0x40007400
 8002fb0:	58024400 	.word	0x58024400
 8002fb4:	58020000 	.word	0x58020000
 8002fb8:	24004264 	.word	0x24004264
 8002fbc:	40020028 	.word	0x40020028

08002fc0 <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 8002fc0:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc2:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 8002fc4:	4a17      	ldr	r2, [pc, #92]	; (8003024 <HAL_LPTIM_MspInit+0x64>)
{
 8002fc6:	b570      	push	{r4, r5, r6, lr}
  if(hlptim->Instance==LPTIM2)
 8002fc8:	4291      	cmp	r1, r2
{
 8002fca:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fcc:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002fd0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002fd4:	9307      	str	r3, [sp, #28]
  if(hlptim->Instance==LPTIM2)
 8002fd6:	d001      	beq.n	8002fdc <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8002fd8:	b008      	add	sp, #32
 8002fda:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8002fdc:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_LPTIM_MspInit+0x68>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fde:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002fe0:	f44f 6680 	mov.w	r6, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe4:	a903      	add	r1, sp, #12
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8002fe6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8002fea:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fec:	480f      	ldr	r0, [pc, #60]	; (800302c <HAL_LPTIM_MspInit+0x6c>)
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8002fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002ff6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002ffa:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002ffe:	9201      	str	r2, [sp, #4]
 8003000:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003002:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003006:	432a      	orrs	r2, r5
 8003008:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800300c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003010:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003012:	402b      	ands	r3, r5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8003016:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003018:	9302      	str	r3, [sp, #8]
 800301a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301c:	f002 fb6e 	bl	80056fc <HAL_GPIO_Init>
}
 8003020:	b008      	add	sp, #32
 8003022:	bd70      	pop	{r4, r5, r6, pc}
 8003024:	58002400 	.word	0x58002400
 8003028:	58024400 	.word	0x58024400
 800302c:	58020400 	.word	0x58020400

08003030 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8003030:	6802      	ldr	r2, [r0, #0]
 8003032:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <HAL_TIM_Base_MspInit+0x40>)
 8003034:	429a      	cmp	r2, r3
 8003036:	d000      	beq.n	800303a <HAL_TIM_Base_MspInit+0xa>
 8003038:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <HAL_TIM_Base_MspInit+0x44>)
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800303c:	2200      	movs	r2, #0
 800303e:	2101      	movs	r1, #1
 8003040:	2036      	movs	r0, #54	; 0x36
{
 8003042:	b510      	push	{r4, lr}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003044:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
{
 8003048:	b082      	sub	sp, #8
    __HAL_RCC_TIM6_CLK_ENABLE();
 800304a:	f044 0410 	orr.w	r4, r4, #16
 800304e:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8003052:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	9301      	str	r3, [sp, #4]
 800305c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800305e:	f000 fffd 	bl	800405c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003062:	2036      	movs	r0, #54	; 0x36
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003064:	b002      	add	sp, #8
 8003066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800306a:	f001 b82d 	b.w	80040c8 <HAL_NVIC_EnableIRQ>
 800306e:	bf00      	nop
 8003070:	40001000 	.word	0x40001000
 8003074:	58024400 	.word	0x58024400

08003078 <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART3)
 8003078:	6802      	ldr	r2, [r0, #0]
 800307a:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_UART_MspInit+0xa4>)
{
 800307c:	b570      	push	{r4, r5, r6, lr}
  if(huart->Instance==USART3)
 800307e:	429a      	cmp	r2, r3
{
 8003080:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003082:	f04f 0400 	mov.w	r4, #0
 8003086:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800308a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800308e:	9407      	str	r4, [sp, #28]
  if(huart->Instance==USART3)
 8003090:	d001      	beq.n	8003096 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003092:	b008      	add	sp, #32
 8003094:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8003096:	4b22      	ldr	r3, [pc, #136]	; (8003120 <HAL_UART_MspInit+0xa8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800309a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800309e:	2507      	movs	r5, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 80030a0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a4:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 80030a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80030aa:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80030ae:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80030b2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80030b6:	9200      	str	r2, [sp, #0]
 80030b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80030be:	4332      	orrs	r2, r6
 80030c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80030c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80030c8:	4032      	ands	r2, r6
 80030ca:	9201      	str	r2, [sp, #4]
 80030cc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80030d2:	f042 0208 	orr.w	r2, r2, #8
 80030d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80030da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80030de:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030e0:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e4:	480f      	ldr	r0, [pc, #60]	; (8003124 <HAL_UART_MspInit+0xac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e6:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030e8:	9302      	str	r3, [sp, #8]
 80030ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030ec:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ee:	f002 fb05 	bl	80056fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030f2:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030f6:	a903      	add	r1, sp, #12
 80030f8:	480b      	ldr	r0, [pc, #44]	; (8003128 <HAL_UART_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fc:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030fe:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003100:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003104:	f002 fafa 	bl	80056fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8003108:	4622      	mov	r2, r4
 800310a:	2101      	movs	r1, #1
 800310c:	2027      	movs	r0, #39	; 0x27
 800310e:	f000 ffa5 	bl	800405c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003112:	2027      	movs	r0, #39	; 0x27
 8003114:	f000 ffd8 	bl	80040c8 <HAL_NVIC_EnableIRQ>
}
 8003118:	b008      	add	sp, #32
 800311a:	bd70      	pop	{r4, r5, r6, pc}
 800311c:	40004800 	.word	0x40004800
 8003120:	58024400 	.word	0x58024400
 8003124:	58020400 	.word	0x58020400
 8003128:	58020c00 	.word	0x58020c00

0800312c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop

08003130 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003130:	e7fe      	b.n	8003130 <HardFault_Handler>
 8003132:	bf00      	nop

08003134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003134:	e7fe      	b.n	8003134 <MemManage_Handler>
 8003136:	bf00      	nop

08003138 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003138:	e7fe      	b.n	8003138 <BusFault_Handler>
 800313a:	bf00      	nop

0800313c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800313c:	e7fe      	b.n	800313c <UsageFault_Handler>
 800313e:	bf00      	nop

08003140 <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 8003140:	f000 b8e2 	b.w	8003308 <ADC3_IRQHandler>

08003144 <DebugMon_Handler>:
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop

08003148 <PendSV_Handler>:
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop

0800314c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800314c:	f000 b936 	b.w	80033bc <HAL_IncTick>

08003150 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003150:	4801      	ldr	r0, [pc, #4]	; (8003158 <DMA1_Stream0_IRQHandler+0x8>)
 8003152:	f001 bf97 	b.w	8005084 <HAL_DMA_IRQHandler>
 8003156:	bf00      	nop
 8003158:	240086d8 	.word	0x240086d8

0800315c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800315c:	4801      	ldr	r0, [pc, #4]	; (8003164 <DMA1_Stream1_IRQHandler+0x8>)
 800315e:	f001 bf91 	b.w	8005084 <HAL_DMA_IRQHandler>
 8003162:	bf00      	nop
 8003164:	24004264 	.word	0x24004264

08003168 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003168:	4801      	ldr	r0, [pc, #4]	; (8003170 <USART3_IRQHandler+0x8>)
 800316a:	f005 b92f 	b.w	80083cc <HAL_UART_IRQHandler>
 800316e:	bf00      	nop
 8003170:	2400293c 	.word	0x2400293c

08003174 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003174:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003178:	f002 bbe2 	b.w	8005940 <HAL_GPIO_EXTI_IRQHandler>

0800317c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800317c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800317e:	4804      	ldr	r0, [pc, #16]	; (8003190 <TIM6_DAC_IRQHandler+0x14>)
 8003180:	f001 f8ac 	bl	80042dc <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8003184:	4803      	ldr	r0, [pc, #12]	; (8003194 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 800318a:	f004 bd93 	b.w	8007cb4 <HAL_TIM_IRQHandler>
 800318e:	bf00      	nop
 8003190:	24002928 	.word	0x24002928
 8003194:	24008cc0 	.word	0x24008cc0

08003198 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003198:	490d      	ldr	r1, [pc, #52]	; (80031d0 <_sbrk+0x38>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800319a:	4a0e      	ldr	r2, [pc, #56]	; (80031d4 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 800319c:	680b      	ldr	r3, [r1, #0]
{
 800319e:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031a0:	4c0d      	ldr	r4, [pc, #52]	; (80031d8 <_sbrk+0x40>)
 80031a2:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80031a4:	b12b      	cbz	r3, 80031b2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031a6:	4418      	add	r0, r3
 80031a8:	4290      	cmp	r0, r2
 80031aa:	d808      	bhi.n	80031be <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80031ac:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80031b2:	4c0a      	ldr	r4, [pc, #40]	; (80031dc <_sbrk+0x44>)
 80031b4:	4623      	mov	r3, r4
 80031b6:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80031b8:	4418      	add	r0, r3
 80031ba:	4290      	cmp	r0, r2
 80031bc:	d9f6      	bls.n	80031ac <_sbrk+0x14>
    errno = ENOMEM;
 80031be:	f006 ff77 	bl	800a0b0 <__errno>
 80031c2:	220c      	movs	r2, #12
    return (void *)-1;
 80031c4:	f04f 33ff 	mov.w	r3, #4294967295
    errno = ENOMEM;
 80031c8:	6002      	str	r2, [r0, #0]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	bd10      	pop	{r4, pc}
 80031ce:	bf00      	nop
 80031d0:	240004f0 	.word	0x240004f0
 80031d4:	24080000 	.word	0x24080000
 80031d8:	00000400 	.word	0x00000400
 80031dc:	2400d668 	.word	0x2400d668

080031e0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80031e0:	492a      	ldr	r1, [pc, #168]	; (800328c <SystemInit+0xac>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80031e2:	4a2b      	ldr	r2, [pc, #172]	; (8003290 <SystemInit+0xb0>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80031e4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80031e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80031ec:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80031f2:	6813      	ldr	r3, [r2, #0]
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	2b06      	cmp	r3, #6
 80031fa:	d805      	bhi.n	8003208 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80031fc:	6813      	ldr	r3, [r2, #0]
 80031fe:	f023 030f 	bic.w	r3, r3, #15
 8003202:	f043 0307 	orr.w	r3, r3, #7
 8003206:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003208:	4b22      	ldr	r3, [pc, #136]	; (8003294 <SystemInit+0xb4>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800320a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800320c:	4a22      	ldr	r2, [pc, #136]	; (8003298 <SystemInit+0xb8>)
  RCC->CR |= RCC_CR_HSION;
 800320e:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003210:	481f      	ldr	r0, [pc, #124]	; (8003290 <SystemInit+0xb0>)
  RCC->CR |= RCC_CR_HSION;
 8003212:	f041 0101 	orr.w	r1, r1, #1
 8003216:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003218:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800321a:	6819      	ldr	r1, [r3, #0]
 800321c:	400a      	ands	r2, r1
 800321e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003220:	6803      	ldr	r3, [r0, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	2b07      	cmp	r3, #7
 8003228:	d905      	bls.n	8003236 <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800322a:	6803      	ldr	r3, [r0, #0]
 800322c:	f023 030f 	bic.w	r3, r3, #15
 8003230:	f043 0307 	orr.w	r3, r3, #7
 8003234:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003236:	4b17      	ldr	r3, [pc, #92]	; (8003294 <SystemInit+0xb4>)
 8003238:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800323a:	4918      	ldr	r1, [pc, #96]	; (800329c <SystemInit+0xbc>)
  RCC->PLLCKSELR = 0x02020200;
 800323c:	4c18      	ldr	r4, [pc, #96]	; (80032a0 <SystemInit+0xc0>)
  RCC->PLLCFGR = 0x01FF0000;
 800323e:	4819      	ldr	r0, [pc, #100]	; (80032a4 <SystemInit+0xc4>)
  RCC->D1CFGR = 0x00000000;
 8003240:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8003242:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8003244:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8003246:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8003248:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800324a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800324c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800324e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003250:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003252:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003254:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003256:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003258:	4c13      	ldr	r4, [pc, #76]	; (80032a8 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 800325a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800325e:	4913      	ldr	r1, [pc, #76]	; (80032ac <SystemInit+0xcc>)
  RCC->CR &= 0xFFFBFFFFU;
 8003260:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8003262:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003264:	6823      	ldr	r3, [r4, #0]
 8003266:	4019      	ands	r1, r3
 8003268:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800326c:	d202      	bcs.n	8003274 <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <SystemInit+0xd0>)
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003274:	490f      	ldr	r1, [pc, #60]	; (80032b4 <SystemInit+0xd4>)
 8003276:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800327a:	4b04      	ldr	r3, [pc, #16]	; (800328c <SystemInit+0xac>)
 800327c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003280:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003282:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003286:	609a      	str	r2, [r3, #8]
}
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000ed00 	.word	0xe000ed00
 8003290:	52002000 	.word	0x52002000
 8003294:	58024400 	.word	0x58024400
 8003298:	eaf6ed7f 	.word	0xeaf6ed7f
 800329c:	01010280 	.word	0x01010280
 80032a0:	02020200 	.word	0x02020200
 80032a4:	01ff0000 	.word	0x01ff0000
 80032a8:	5c001000 	.word	0x5c001000
 80032ac:	ffff0000 	.word	0xffff0000
 80032b0:	51008108 	.word	0x51008108
 80032b4:	52004000 	.word	0x52004000

080032b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032f0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80032bc:	f7ff ff90 	bl	80031e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032c2:	e003      	b.n	80032cc <LoopCopyDataInit>

080032c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80032c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032ca:	3104      	adds	r1, #4

080032cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032cc:	480a      	ldr	r0, [pc, #40]	; (80032f8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80032ce:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80032d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032d4:	d3f6      	bcc.n	80032c4 <CopyDataInit>
  ldr  r2, =_sbss
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80032d8:	e002      	b.n	80032e0 <LoopFillZerobss>

080032da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032dc:	f842 3b04 	str.w	r3, [r2], #4

080032e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032e0:	4b08      	ldr	r3, [pc, #32]	; (8003304 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80032e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032e4:	d3f9      	bcc.n	80032da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032e6:	f006 fee9 	bl	800a0bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ea:	f7ff f96d 	bl	80025c8 <main>
  bx  lr    
 80032ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032f0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80032f4:	08012fc8 	.word	0x08012fc8
  ldr  r0, =_sdata
 80032f8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80032fc:	240003d8 	.word	0x240003d8
  ldr  r2, =_sbss
 8003300:	240003e0 	.word	0x240003e0
  ldr  r3, = _ebss
 8003304:	2400d668 	.word	0x2400d668

08003308 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003308:	e7fe      	b.n	8003308 <ADC3_IRQHandler>
	...

0800330c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800330c:	4b0f      	ldr	r3, [pc, #60]	; (800334c <HAL_InitTick+0x40>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	b90b      	cbnz	r3, 8003316 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8003312:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003314:	4770      	bx	lr
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003316:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800331a:	490d      	ldr	r1, [pc, #52]	; (8003350 <HAL_InitTick+0x44>)
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
{
 8003320:	b510      	push	{r4, lr}
 8003322:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003324:	6808      	ldr	r0, [r1, #0]
 8003326:	fbb0 f0f3 	udiv	r0, r0, r3
 800332a:	f000 fedb 	bl	80040e4 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800332e:	2c0f      	cmp	r4, #15
 8003330:	d800      	bhi.n	8003334 <HAL_InitTick+0x28>
 8003332:	b108      	cbz	r0, 8003338 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8003334:	2001      	movs	r0, #1
}
 8003336:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003338:	2200      	movs	r2, #0
 800333a:	4621      	mov	r1, r4
 800333c:	f04f 30ff 	mov.w	r0, #4294967295
 8003340:	f000 fe8c 	bl	800405c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_InitTick+0x48>)
 8003346:	2000      	movs	r0, #0
 8003348:	601c      	str	r4, [r3, #0]
}
 800334a:	bd10      	pop	{r4, pc}
 800334c:	240001fc 	.word	0x240001fc
 8003350:	240001f4 	.word	0x240001f4
 8003354:	24000200 	.word	0x24000200

08003358 <HAL_Init>:
{
 8003358:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800335a:	2003      	movs	r0, #3
{
 800335c:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800335e:	f000 fe69 	bl	8004034 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003362:	4c12      	ldr	r4, [pc, #72]	; (80033ac <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003364:	f002 fef4 	bl	8006150 <HAL_RCC_GetSysClockFreq>
 8003368:	4a11      	ldr	r2, [pc, #68]	; (80033b0 <HAL_Init+0x58>)
 800336a:	4912      	ldr	r1, [pc, #72]	; (80033b4 <HAL_Init+0x5c>)
 800336c:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800336e:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003370:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8003374:	4d10      	ldr	r5, [pc, #64]	; (80033b8 <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003376:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800337a:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800337c:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800337e:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003382:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003386:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800338a:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800338c:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8003390:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003392:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003394:	f7ff ffba 	bl	800330c <HAL_InitTick>
 8003398:	b110      	cbz	r0, 80033a0 <HAL_Init+0x48>
    return HAL_ERROR;
 800339a:	2001      	movs	r0, #1
}
 800339c:	b003      	add	sp, #12
 800339e:	bd30      	pop	{r4, r5, pc}
 80033a0:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 80033a2:	f7ff fce5 	bl	8002d70 <HAL_MspInit>
  return HAL_OK;
 80033a6:	9801      	ldr	r0, [sp, #4]
}
 80033a8:	b003      	add	sp, #12
 80033aa:	bd30      	pop	{r4, r5, pc}
 80033ac:	240001f8 	.word	0x240001f8
 80033b0:	58024400 	.word	0x58024400
 80033b4:	0800fca8 	.word	0x0800fca8
 80033b8:	240001f4 	.word	0x240001f4

080033bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80033bc:	4a03      	ldr	r2, [pc, #12]	; (80033cc <HAL_IncTick+0x10>)
 80033be:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <HAL_IncTick+0x14>)
 80033c0:	6811      	ldr	r1, [r2, #0]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	440b      	add	r3, r1
 80033c6:	6013      	str	r3, [r2, #0]
}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	240042fc 	.word	0x240042fc
 80033d0:	240001fc 	.word	0x240001fc

080033d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80033d4:	4b01      	ldr	r3, [pc, #4]	; (80033dc <HAL_GetTick+0x8>)
 80033d6:	6818      	ldr	r0, [r3, #0]
}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	240042fc 	.word	0x240042fc

080033e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033e0:	b538      	push	{r3, r4, r5, lr}
 80033e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80033e4:	f7ff fff6 	bl	80033d4 <HAL_GetTick>
 80033e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ea:	1c63      	adds	r3, r4, #1
 80033ec:	d002      	beq.n	80033f4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ee:	4b04      	ldr	r3, [pc, #16]	; (8003400 <HAL_Delay+0x20>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033f4:	f7ff ffee 	bl	80033d4 <HAL_GetTick>
 80033f8:	1b40      	subs	r0, r0, r5
 80033fa:	42a0      	cmp	r0, r4
 80033fc:	d3fa      	bcc.n	80033f4 <HAL_Delay+0x14>
  {
  }
}
 80033fe:	bd38      	pop	{r3, r4, r5, pc}
 8003400:	240001fc 	.word	0x240001fc

08003404 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003404:	4b01      	ldr	r3, [pc, #4]	; (800340c <HAL_GetREVID+0x8>)
 8003406:	6818      	ldr	r0, [r3, #0]
}
 8003408:	0c00      	lsrs	r0, r0, #16
 800340a:	4770      	bx	lr
 800340c:	5c001000 	.word	0x5c001000

08003410 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8003410:	4a03      	ldr	r2, [pc, #12]	; (8003420 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 8003412:	6813      	ldr	r3, [r2, #0]
 8003414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003418:	4318      	orrs	r0, r3
 800341a:	6010      	str	r0, [r2, #0]
}
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	58003c00 	.word	0x58003c00

08003424 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8003424:	4a03      	ldr	r2, [pc, #12]	; (8003434 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8003426:	6813      	ldr	r3, [r2, #0]
 8003428:	f023 0302 	bic.w	r3, r3, #2
 800342c:	4318      	orrs	r0, r3
 800342e:	6010      	str	r0, [r2, #0]
}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	58003c00 	.word	0x58003c00

08003438 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8003438:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800343a:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_SYSCFG_EnableVREFBUF+0x30>)
 800343c:	681a      	ldr	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800343e:	461c      	mov	r4, r3
  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8003440:	f042 0201 	orr.w	r2, r2, #1
 8003444:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003446:	f7ff ffc5 	bl	80033d4 <HAL_GetTick>
 800344a:	4605      	mov	r5, r0
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800344c:	e004      	b.n	8003458 <HAL_SYSCFG_EnableVREFBUF+0x20>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800344e:	f7ff ffc1 	bl	80033d4 <HAL_GetTick>
 8003452:	1b40      	subs	r0, r0, r5
 8003454:	280a      	cmp	r0, #10
 8003456:	d804      	bhi.n	8003462 <HAL_SYSCFG_EnableVREFBUF+0x2a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	071b      	lsls	r3, r3, #28
 800345c:	d5f7      	bpl.n	800344e <HAL_SYSCFG_EnableVREFBUF+0x16>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800345e:	2000      	movs	r0, #0
}
 8003460:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8003462:	2003      	movs	r0, #3
}
 8003464:	bd38      	pop	{r3, r4, r5, pc}
 8003466:	bf00      	nop
 8003468:	58003c00 	.word	0x58003c00

0800346c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800346c:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800346e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003470:	f7fe fea0 	bl	80021b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003474:	bd08      	pop	{r3, pc}
 8003476:	bf00      	nop

08003478 <HAL_ADC_ErrorCallback>:
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop

0800347c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800347c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800347e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003480:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 8003486:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003488:	d11d      	bne.n	80034c6 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800348a:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800348c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003490:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003492:	680a      	ldr	r2, [r1, #0]
 8003494:	f012 0f08 	tst.w	r2, #8
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003498:	68ca      	ldr	r2, [r1, #12]
 800349a:	d01b      	beq.n	80034d4 <ADC_DMAConvCplt+0x58>
 800349c:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80034a0:	d10d      	bne.n	80034be <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80034a2:	68ca      	ldr	r2, [r1, #12]
 80034a4:	0494      	lsls	r4, r2, #18
 80034a6:	d40a      	bmi.n	80034be <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ae:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034b2:	04d1      	lsls	r1, r2, #19
 80034b4:	d403      	bmi.n	80034be <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034b8:	f042 0201 	orr.w	r2, r2, #1
 80034bc:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe fe5a 	bl	8002178 <HAL_ADC_ConvCpltCallback>
}
 80034c4:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034c6:	06d2      	lsls	r2, r2, #27
 80034c8:	d407      	bmi.n	80034da <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80034cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d2:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80034d4:	0790      	lsls	r0, r2, #30
 80034d6:	d1f2      	bne.n	80034be <ADC_DMAConvCplt+0x42>
 80034d8:	e7e6      	b.n	80034a8 <ADC_DMAConvCplt+0x2c>
      HAL_ADC_ErrorCallback(hadc);
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff ffcc 	bl	8003478 <HAL_ADC_ErrorCallback>
}
 80034e0:	bd10      	pop	{r4, pc}
 80034e2:	bf00      	nop

080034e4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80034e4:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034e6:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034ea:	4618      	mov	r0, r3
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034f0:	655a      	str	r2, [r3, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034f4:	f042 0204 	orr.w	r2, r2, #4
 80034f8:	659a      	str	r2, [r3, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc);
 80034fa:	f7ff ffbd 	bl	8003478 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034fe:	bd08      	pop	{r3, pc}

08003500 <HAL_ADC_ConfigChannel>:
{
 8003500:	4602      	mov	r2, r0
  __IO uint32_t wait_loop_index = 0;
 8003502:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8003504:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
{
 8003508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 800350c:	2b01      	cmp	r3, #1
{
 800350e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8003510:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003512:	f000 8134 	beq.w	800377e <HAL_ADC_ConfigChannel+0x27e>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003516:	6813      	ldr	r3, [r2, #0]
  __HAL_LOCK(hadc);
 8003518:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800351a:	689c      	ldr	r4, [r3, #8]
 800351c:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
 8003520:	0767      	lsls	r7, r4, #29
 8003522:	d443      	bmi.n	80035ac <HAL_ADC_ConfigChannel+0xac>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003524:	680c      	ldr	r4, [r1, #0]
 8003526:	f3c4 0513 	ubfx	r5, r4, #0, #20
 800352a:	f3c4 6784 	ubfx	r7, r4, #26, #5
 800352e:	2d00      	cmp	r5, #0
 8003530:	f040 80a5 	bne.w	800367e <HAL_ADC_ConfigChannel+0x17e>
 8003534:	40b8      	lsls	r0, r7
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003536:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8003538:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800353c:	69dd      	ldr	r5, [r3, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800353e:	09a6      	lsrs	r6, r4, #6
  MODIFY_REG(*preg,
 8003540:	ea04 040c 	and.w	r4, r4, ip
 8003544:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003546:	f103 0530 	add.w	r5, r3, #48	; 0x30
 800354a:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 800354e:	fa0c fc04 	lsl.w	ip, ip, r4
 8003552:	61d8      	str	r0, [r3, #28]
 8003554:	fa07 f404 	lsl.w	r4, r7, r4
 8003558:	5970      	ldr	r0, [r6, r5]
 800355a:	ea20 000c 	bic.w	r0, r0, ip
 800355e:	4320      	orrs	r0, r4
 8003560:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003562:	6898      	ldr	r0, [r3, #8]
 8003564:	0746      	lsls	r6, r0, #29
 8003566:	f100 8088 	bmi.w	800367a <HAL_ADC_ConfigChannel+0x17a>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800356a:	689d      	ldr	r5, [r3, #8]
 800356c:	f015 0508 	ands.w	r5, r5, #8
 8003570:	d026      	beq.n	80035c0 <HAL_ADC_ConfigChannel+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003572:	6898      	ldr	r0, [r3, #8]
 8003574:	07c5      	lsls	r5, r0, #31
 8003576:	d417      	bmi.n	80035a8 <HAL_ADC_ConfigChannel+0xa8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003578:	68ce      	ldr	r6, [r1, #12]
 800357a:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800357c:	f006 0718 	and.w	r7, r6, #24
 8003580:	48bc      	ldr	r0, [pc, #752]	; (8003874 <HAL_ADC_ConfigChannel+0x374>)
 8003582:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
 8003586:	40f8      	lsrs	r0, r7
 8003588:	f3c4 0713 	ubfx	r7, r4, #0, #20
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800358c:	f8df c30c 	ldr.w	ip, [pc, #780]	; 800389c <HAL_ADC_ConfigChannel+0x39c>
 8003590:	4020      	ands	r0, r4
 8003592:	ea25 0507 	bic.w	r5, r5, r7
 8003596:	4566      	cmp	r6, ip
 8003598:	ea40 0005 	orr.w	r0, r0, r5
 800359c:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
 80035a0:	f000 80a6 	beq.w	80036f0 <HAL_ADC_ConfigChannel+0x1f0>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035a4:	2c00      	cmp	r4, #0
 80035a6:	db72      	blt.n	800368e <HAL_ADC_ConfigChannel+0x18e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a8:	2000      	movs	r0, #0
 80035aa:	e003      	b.n	80035b4 <HAL_ADC_ConfigChannel+0xb4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ac:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80035ae:	f043 0320 	orr.w	r3, r3, #32
 80035b2:	6553      	str	r3, [r2, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80035b4:	2300      	movs	r3, #0
 80035b6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 80035ba:	b002      	add	sp, #8
 80035bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035c0:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80035c2:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 80035c6:	2007      	movs	r0, #7
 80035c8:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80035ca:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 80035ce:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80035d2:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 80035d6:	fa00 fe04 	lsl.w	lr, r0, r4
 80035da:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035de:	4fa6      	ldr	r7, [pc, #664]	; (8003878 <HAL_ADC_ConfigChannel+0x378>)
 80035e0:	f85c 0006 	ldr.w	r0, [ip, r6]
 80035e4:	ea20 000e 	bic.w	r0, r0, lr
 80035e8:	4320      	orrs	r0, r4
 80035ea:	f84c 0006 	str.w	r0, [ip, r6]
 80035ee:	6838      	ldr	r0, [r7, #0]
 80035f0:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80035f4:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80035f8:	f000 80b8 	beq.w	800376c <HAL_ADC_ConfigChannel+0x26c>
 80035fc:	68dc      	ldr	r4, [r3, #12]
 80035fe:	6948      	ldr	r0, [r1, #20]
 8003600:	f014 0f10 	tst.w	r4, #16
 8003604:	68dc      	ldr	r4, [r3, #12]
 8003606:	f040 80d9 	bne.w	80037bc <HAL_ADC_ConfigChannel+0x2bc>
 800360a:	f3c4 0482 	ubfx	r4, r4, #2, #3
 800360e:	0064      	lsls	r4, r4, #1
 8003610:	fa00 fc04 	lsl.w	ip, r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003614:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8003618:	6808      	ldr	r0, [r1, #0]
 800361a:	f1be 0f04 	cmp.w	lr, #4
 800361e:	f000 80b2 	beq.w	8003786 <HAL_ADC_ConfigChannel+0x286>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003622:	f103 0660 	add.w	r6, r3, #96	; 0x60
    MODIFY_REG(*preg,
 8003626:	f000 44f8 	and.w	r4, r0, #2080374784	; 0x7c000000
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800362a:	7e4f      	ldrb	r7, [r1, #25]
 800362c:	f856 002e 	ldr.w	r0, [r6, lr, lsl #2]
 8003630:	2f01      	cmp	r7, #1
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003632:	7e0f      	ldrb	r7, [r1, #24]
 8003634:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003638:	bf14      	ite	ne
 800363a:	f04f 0800 	movne.w	r8, #0
 800363e:	f04f 4800 	moveq.w	r8, #2147483648	; 0x80000000
 8003642:	4320      	orrs	r0, r4
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003644:	2f01      	cmp	r7, #1
 8003646:	ea40 000c 	orr.w	r0, r0, ip
 800364a:	f846 002e 	str.w	r0, [r6, lr, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800364e:	690c      	ldr	r4, [r1, #16]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003650:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003654:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003658:	ea40 0008 	orr.w	r0, r0, r8
 800365c:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003660:	6908      	ldr	r0, [r1, #16]
 8003662:	d104      	bne.n	800366e <HAL_ADC_ConfigChannel+0x16e>
 8003664:	f000 001f 	and.w	r0, r0, #31
 8003668:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800366c:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800366e:	6918      	ldr	r0, [r3, #16]
 8003670:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8003674:	4305      	orrs	r5, r0
 8003676:	611d      	str	r5, [r3, #16]
 8003678:	e77b      	b.n	8003572 <HAL_ADC_ConfigChannel+0x72>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800367a:	6898      	ldr	r0, [r3, #8]
 800367c:	e779      	b.n	8003572 <HAL_ADC_ConfigChannel+0x72>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	fa94 f4a4 	rbit	r4, r4
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003682:	fab4 f484 	clz	r4, r4
 8003686:	f004 041f 	and.w	r4, r4, #31
 800368a:	40a0      	lsls	r0, r4
 800368c:	e753      	b.n	8003536 <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800368e:	497b      	ldr	r1, [pc, #492]	; (800387c <HAL_ADC_ConfigChannel+0x37c>)
 8003690:	428b      	cmp	r3, r1
 8003692:	f000 80bd 	beq.w	8003810 <HAL_ADC_ConfigChannel+0x310>
 8003696:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800369a:	428b      	cmp	r3, r1
 800369c:	f000 80b8 	beq.w	8003810 <HAL_ADC_ConfigChannel+0x310>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036a0:	4e77      	ldr	r6, [pc, #476]	; (8003880 <HAL_ADC_ConfigChannel+0x380>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036a2:	4d78      	ldr	r5, [pc, #480]	; (8003884 <HAL_ADC_ConfigChannel+0x384>)
 80036a4:	68a8      	ldr	r0, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036a6:	68b1      	ldr	r1, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036a8:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80036ac:	43c9      	mvns	r1, r1
 80036ae:	f001 0101 	and.w	r1, r1, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036b2:	2900      	cmp	r1, #0
 80036b4:	f000 80ba 	beq.w	800382c <HAL_ADC_ConfigChannel+0x32c>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036b8:	4973      	ldr	r1, [pc, #460]	; (8003888 <HAL_ADC_ConfigChannel+0x388>)
 80036ba:	428c      	cmp	r4, r1
 80036bc:	f000 80f0 	beq.w	80038a0 <HAL_ADC_ConfigChannel+0x3a0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036c0:	4972      	ldr	r1, [pc, #456]	; (800388c <HAL_ADC_ConfigChannel+0x38c>)
 80036c2:	428c      	cmp	r4, r1
 80036c4:	f000 810e 	beq.w	80038e4 <HAL_ADC_ConfigChannel+0x3e4>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036c8:	4971      	ldr	r1, [pc, #452]	; (8003890 <HAL_ADC_ConfigChannel+0x390>)
 80036ca:	428c      	cmp	r4, r1
 80036cc:	f47f af6c 	bne.w	80035a8 <HAL_ADC_ConfigChannel+0xa8>
            if (ADC_VREFINT_INSTANCE(hadc))
 80036d0:	0241      	lsls	r1, r0, #9
 80036d2:	f53f af69 	bmi.w	80035a8 <HAL_ADC_ConfigChannel+0xa8>
 80036d6:	496a      	ldr	r1, [pc, #424]	; (8003880 <HAL_ADC_ConfigChannel+0x380>)
 80036d8:	428b      	cmp	r3, r1
 80036da:	f47f af65 	bne.w	80035a8 <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80036de:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80036e0:	f446 0380 	orr.w	r3, r6, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e4:	2000      	movs	r0, #0
 80036e6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80036ea:	430b      	orrs	r3, r1
 80036ec:	60ab      	str	r3, [r5, #8]
 80036ee:	e761      	b.n	80035b4 <HAL_ADC_ConfigChannel+0xb4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036f0:	2f00      	cmp	r7, #0
 80036f2:	d069      	beq.n	80037c8 <HAL_ADC_ConfigChannel+0x2c8>
 80036f4:	fa94 f0a4 	rbit	r0, r4
 80036f8:	fab0 f080 	clz	r0, r0
 80036fc:	3001      	adds	r0, #1
 80036fe:	f000 001f 	and.w	r0, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003702:	2809      	cmp	r0, #9
 8003704:	f200 8098 	bhi.w	8003838 <HAL_ADC_ConfigChannel+0x338>
 8003708:	fa94 f0a4 	rbit	r0, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800370c:	fab0 f080 	clz	r0, r0
 8003710:	fa94 f5a4 	rbit	r5, r4
 8003714:	2601      	movs	r6, #1
 8003716:	fab5 f585 	clz	r5, r5
 800371a:	3001      	adds	r0, #1
 800371c:	4435      	add	r5, r6
 800371e:	0680      	lsls	r0, r0, #26
 8003720:	f005 051f 	and.w	r5, r5, #31
 8003724:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003728:	fa06 f505 	lsl.w	r5, r6, r5
 800372c:	4328      	orrs	r0, r5
 800372e:	fa94 f4a4 	rbit	r4, r4
 8003732:	fab4 f484 	clz	r4, r4
 8003736:	4434      	add	r4, r6
 8003738:	f004 041f 	and.w	r4, r4, #31
 800373c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003740:	0524      	lsls	r4, r4, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003742:	4304      	orrs	r4, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003744:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8003748:	f04f 0c07 	mov.w	ip, #7
 800374c:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800374e:	0de7      	lsrs	r7, r4, #23
  MODIFY_REG(*preg,
 8003750:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003754:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8003758:	fa0c fc04 	lsl.w	ip, ip, r4
 800375c:	40a0      	lsls	r0, r4
 800375e:	59bd      	ldr	r5, [r7, r6]
 8003760:	ea25 040c 	bic.w	r4, r5, ip
 8003764:	4304      	orrs	r4, r0
 8003766:	51bc      	str	r4, [r7, r6]
 8003768:	680c      	ldr	r4, [r1, #0]
 800376a:	e71b      	b.n	80035a4 <HAL_ADC_ConfigChannel+0xa4>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800376c:	68dc      	ldr	r4, [r3, #12]
 800376e:	6948      	ldr	r0, [r1, #20]
 8003770:	f3c4 0c82 	ubfx	ip, r4, #2, #3
 8003774:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003778:	fa00 fc0c 	lsl.w	ip, r0, ip
 800377c:	e74a      	b.n	8003614 <HAL_ADC_ConfigChannel+0x114>
  __HAL_LOCK(hadc);
 800377e:	2002      	movs	r0, #2
}
 8003780:	b002      	add	sp, #8
 8003782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003786:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003788:	0680      	lsls	r0, r0, #26
 800378a:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800378e:	4284      	cmp	r4, r0
 8003790:	d039      	beq.n	8003806 <HAL_ADC_ConfigChannel+0x306>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003792:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8003794:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003798:	42a0      	cmp	r0, r4
 800379a:	d02f      	beq.n	80037fc <HAL_ADC_ConfigChannel+0x2fc>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800379c:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800379e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80037a2:	42a0      	cmp	r0, r4
 80037a4:	d025      	beq.n	80037f2 <HAL_ADC_ConfigChannel+0x2f2>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037a6:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 80037a8:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80037ac:	42a0      	cmp	r0, r4
 80037ae:	f47f aee0 	bne.w	8003572 <HAL_ADC_ConfigChannel+0x72>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80037b2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80037b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80037b8:	66d8      	str	r0, [r3, #108]	; 0x6c
 80037ba:	e6da      	b.n	8003572 <HAL_ADC_ConfigChannel+0x72>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80037bc:	0864      	lsrs	r4, r4, #1
 80037be:	f004 0408 	and.w	r4, r4, #8
 80037c2:	fa00 fc04 	lsl.w	ip, r0, r4
 80037c6:	e725      	b.n	8003614 <HAL_ADC_ConfigChannel+0x114>
 80037c8:	2001      	movs	r0, #1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037ca:	0ea4      	lsrs	r4, r4, #26
 80037cc:	4404      	add	r4, r0
 80037ce:	f004 051f 	and.w	r5, r4, #31
 80037d2:	06a4      	lsls	r4, r4, #26
 80037d4:	fa00 f605 	lsl.w	r6, r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037d8:	2d09      	cmp	r5, #9
 80037da:	f004 40f8 	and.w	r0, r4, #2080374784	; 0x7c000000
 80037de:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80037e2:	ea40 0006 	orr.w	r0, r0, r6
 80037e6:	d9ab      	bls.n	8003740 <HAL_ADC_ConfigChannel+0x240>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037e8:	3c1e      	subs	r4, #30
 80037ea:	0524      	lsls	r4, r4, #20
 80037ec:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 80037f0:	e7a7      	b.n	8003742 <HAL_ADC_ConfigChannel+0x242>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80037f2:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 80037f4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80037f8:	669c      	str	r4, [r3, #104]	; 0x68
 80037fa:	e7d4      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80037fc:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 80037fe:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003802:	665c      	str	r4, [r3, #100]	; 0x64
 8003804:	e7ca      	b.n	800379c <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003806:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003808:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800380c:	661c      	str	r4, [r3, #96]	; 0x60
 800380e:	e7c0      	b.n	8003792 <HAL_ADC_ConfigChannel+0x292>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003810:	4920      	ldr	r1, [pc, #128]	; (8003894 <HAL_ADC_ConfigChannel+0x394>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003812:	4e21      	ldr	r6, [pc, #132]	; (8003898 <HAL_ADC_ConfigChannel+0x398>)
 8003814:	4f19      	ldr	r7, [pc, #100]	; (800387c <HAL_ADC_ConfigChannel+0x37c>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003816:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003818:	6888      	ldr	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800381a:	68bf      	ldr	r7, [r7, #8]
 800381c:	68b1      	ldr	r1, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800381e:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8003822:	4339      	orrs	r1, r7
 8003824:	43c9      	mvns	r1, r1
 8003826:	f001 0101 	and.w	r1, r1, #1
 800382a:	e742      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x1b2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800382c:	6d53      	ldr	r3, [r2, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 800382e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003830:	f043 0320 	orr.w	r3, r3, #32
 8003834:	6553      	str	r3, [r2, #84]	; 0x54
 8003836:	e6bd      	b.n	80035b4 <HAL_ADC_ConfigChannel+0xb4>
 8003838:	fa94 f0a4 	rbit	r0, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800383c:	fab0 f080 	clz	r0, r0
 8003840:	fa94 f5a4 	rbit	r5, r4
 8003844:	2601      	movs	r6, #1
 8003846:	fab5 f585 	clz	r5, r5
 800384a:	3001      	adds	r0, #1
 800384c:	4435      	add	r5, r6
 800384e:	0680      	lsls	r0, r0, #26
 8003850:	f005 051f 	and.w	r5, r5, #31
 8003854:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003858:	fa06 f505 	lsl.w	r5, r6, r5
 800385c:	4328      	orrs	r0, r5
 800385e:	fa94 f4a4 	rbit	r4, r4
 8003862:	fab4 f484 	clz	r4, r4
 8003866:	4434      	add	r4, r6
 8003868:	f004 041f 	and.w	r4, r4, #31
 800386c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003870:	e7ba      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x2e8>
 8003872:	bf00      	nop
 8003874:	000fffff 	.word	0x000fffff
 8003878:	5c001000 	.word	0x5c001000
 800387c:	40022000 	.word	0x40022000
 8003880:	58026000 	.word	0x58026000
 8003884:	58026300 	.word	0x58026300
 8003888:	cb840000 	.word	0xcb840000
 800388c:	c7520000 	.word	0xc7520000
 8003890:	cfb80000 	.word	0xcfb80000
 8003894:	40022300 	.word	0x40022300
 8003898:	40022100 	.word	0x40022100
 800389c:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038a0:	0204      	lsls	r4, r0, #8
 80038a2:	f53f ae81 	bmi.w	80035a8 <HAL_ADC_ConfigChannel+0xa8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038a6:	4917      	ldr	r1, [pc, #92]	; (8003904 <HAL_ADC_ConfigChannel+0x404>)
 80038a8:	428b      	cmp	r3, r1
 80038aa:	f47f ae7d 	bne.w	80035a8 <HAL_ADC_ConfigChannel+0xa8>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80038ae:	4b16      	ldr	r3, [pc, #88]	; (8003908 <HAL_ADC_ConfigChannel+0x408>)
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80038b0:	f446 0100 	orr.w	r1, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80038b4:	68a8      	ldr	r0, [r5, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f020 70e0 	bic.w	r0, r0, #29360128	; 0x1c00000
 80038bc:	4c13      	ldr	r4, [pc, #76]	; (800390c <HAL_ADC_ConfigChannel+0x40c>)
 80038be:	099b      	lsrs	r3, r3, #6
 80038c0:	4301      	orrs	r1, r0
 80038c2:	fba4 0303 	umull	r0, r3, r4, r3
 80038c6:	60a9      	str	r1, [r5, #8]
 80038c8:	099b      	lsrs	r3, r3, #6
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 80038ce:	9b01      	ldr	r3, [sp, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f43f ae69 	beq.w	80035a8 <HAL_ADC_ConfigChannel+0xa8>
                wait_loop_index--;
 80038d6:	9b01      	ldr	r3, [sp, #4]
 80038d8:	3b01      	subs	r3, #1
 80038da:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 80038dc:	9b01      	ldr	r3, [sp, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f9      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x3d6>
 80038e2:	e661      	b.n	80035a8 <HAL_ADC_ConfigChannel+0xa8>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038e4:	01c0      	lsls	r0, r0, #7
 80038e6:	f53f ae5f 	bmi.w	80035a8 <HAL_ADC_ConfigChannel+0xa8>
 80038ea:	4906      	ldr	r1, [pc, #24]	; (8003904 <HAL_ADC_ConfigChannel+0x404>)
 80038ec:	428b      	cmp	r3, r1
 80038ee:	f47f ae5b 	bne.w	80035a8 <HAL_ADC_ConfigChannel+0xa8>
 80038f2:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80038f4:	f046 7380 	orr.w	r3, r6, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038f8:	2000      	movs	r0, #0
 80038fa:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80038fe:	430b      	orrs	r3, r1
 8003900:	60ab      	str	r3, [r5, #8]
 8003902:	e657      	b.n	80035b4 <HAL_ADC_ConfigChannel+0xb4>
 8003904:	58026000 	.word	0x58026000
 8003908:	240001f4 	.word	0x240001f4
 800390c:	053e2d63 	.word	0x053e2d63

08003910 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003910:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003912:	6891      	ldr	r1, [r2, #8]
 8003914:	07cb      	lsls	r3, r1, #31
 8003916:	d40e      	bmi.n	8003936 <ADC_Enable+0x26>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003918:	4926      	ldr	r1, [pc, #152]	; (80039b4 <ADC_Enable+0xa4>)
{
 800391a:	b570      	push	{r4, r5, r6, lr}
 800391c:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800391e:	6890      	ldr	r0, [r2, #8]
 8003920:	4208      	tst	r0, r1
 8003922:	d00a      	beq.n	800393a <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003924:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_ERROR;
 8003926:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003928:	f042 0210 	orr.w	r2, r2, #16
 800392c:	6562      	str	r2, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800392e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003930:	4302      	orrs	r2, r0
 8003932:	65a2      	str	r2, [r4, #88]	; 0x58
}
 8003934:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003936:	2000      	movs	r0, #0
}
 8003938:	4770      	bx	lr
  MODIFY_REG(ADCx->CR,
 800393a:	6891      	ldr	r1, [r2, #8]
 800393c:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <ADC_Enable+0xa8>)
 800393e:	400b      	ands	r3, r1
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003946:	f7ff fd45 	bl	80033d4 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	4a1b      	ldr	r2, [pc, #108]	; (80039bc <ADC_Enable+0xac>)
    tickstart = HAL_GetTick();
 800394e:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003950:	4293      	cmp	r3, r2
 8003952:	d026      	beq.n	80039a2 <ADC_Enable+0x92>
 8003954:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003958:	4293      	cmp	r3, r2
 800395a:	d022      	beq.n	80039a2 <ADC_Enable+0x92>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800395c:	4a18      	ldr	r2, [pc, #96]	; (80039c0 <ADC_Enable+0xb0>)
 800395e:	6892      	ldr	r2, [r2, #8]
  MODIFY_REG(ADCx->CR,
 8003960:	4e15      	ldr	r6, [pc, #84]	; (80039b8 <ADC_Enable+0xa8>)
 8003962:	e00a      	b.n	800397a <ADC_Enable+0x6a>
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	4032      	ands	r2, r6
 8003968:	f042 0201 	orr.w	r2, r2, #1
 800396c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800396e:	f7ff fd31 	bl	80033d4 <HAL_GetTick>
 8003972:	1b40      	subs	r0, r0, r5
 8003974:	2802      	cmp	r0, #2
 8003976:	d80b      	bhi.n	8003990 <ADC_Enable+0x80>
 8003978:	6823      	ldr	r3, [r4, #0]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	07d2      	lsls	r2, r2, #31
 800397e:	d417      	bmi.n	80039b0 <ADC_Enable+0xa0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	07d1      	lsls	r1, r2, #31
 8003984:	d5ee      	bpl.n	8003964 <ADC_Enable+0x54>
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003986:	f7ff fd25 	bl	80033d4 <HAL_GetTick>
 800398a:	1b40      	subs	r0, r0, r5
 800398c:	2802      	cmp	r0, #2
 800398e:	d9f3      	bls.n	8003978 <ADC_Enable+0x68>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003990:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8003992:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003994:	f043 0310 	orr.w	r3, r3, #16
 8003998:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800399a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800399c:	4303      	orrs	r3, r0
 800399e:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80039a0:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80039a2:	4a08      	ldr	r2, [pc, #32]	; (80039c4 <ADC_Enable+0xb4>)
 80039a4:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039a6:	06d0      	lsls	r0, r2, #27
 80039a8:	d0da      	beq.n	8003960 <ADC_Enable+0x50>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039aa:	4a07      	ldr	r2, [pc, #28]	; (80039c8 <ADC_Enable+0xb8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d1d7      	bne.n	8003960 <ADC_Enable+0x50>
  return HAL_OK;
 80039b0:	2000      	movs	r0, #0
}
 80039b2:	bd70      	pop	{r4, r5, r6, pc}
 80039b4:	8000003f 	.word	0x8000003f
 80039b8:	7fffffc0 	.word	0x7fffffc0
 80039bc:	40022000 	.word	0x40022000
 80039c0:	58026300 	.word	0x58026300
 80039c4:	40022300 	.word	0x40022300
 80039c8:	40022100 	.word	0x40022100

080039cc <ADC_Disable>:
{
 80039cc:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80039ce:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80039d0:	6899      	ldr	r1, [r3, #8]
 80039d2:	0789      	lsls	r1, r1, #30
 80039d4:	d502      	bpl.n	80039dc <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039d6:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 80039d8:	2000      	movs	r0, #0
}
 80039da:	bd38      	pop	{r3, r4, r5, pc}
 80039dc:	6899      	ldr	r1, [r3, #8]
 80039de:	07ca      	lsls	r2, r1, #31
 80039e0:	d523      	bpl.n	8003a2a <ADC_Disable+0x5e>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039e2:	6899      	ldr	r1, [r3, #8]
 80039e4:	4604      	mov	r4, r0
 80039e6:	f001 010d 	and.w	r1, r1, #13
 80039ea:	2901      	cmp	r1, #1
 80039ec:	d008      	beq.n	8003a00 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 80039f0:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039f2:	f043 0310 	orr.w	r3, r3, #16
 80039f6:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039fa:	4303      	orrs	r3, r0
 80039fc:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80039fe:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8003a00:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a02:	2103      	movs	r1, #3
 8003a04:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <ADC_Disable+0x64>)
 8003a06:	4002      	ands	r2, r0
 8003a08:	f042 0202 	orr.w	r2, r2, #2
 8003a0c:	609a      	str	r2, [r3, #8]
 8003a0e:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8003a10:	f7ff fce0 	bl	80033d4 <HAL_GetTick>
 8003a14:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a16:	e004      	b.n	8003a22 <ADC_Disable+0x56>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a18:	f7ff fcdc 	bl	80033d4 <HAL_GetTick>
 8003a1c:	1b40      	subs	r0, r0, r5
 8003a1e:	2802      	cmp	r0, #2
 8003a20:	d8e5      	bhi.n	80039ee <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	07db      	lsls	r3, r3, #31
 8003a28:	d4f6      	bmi.n	8003a18 <ADC_Disable+0x4c>
  return HAL_OK;
 8003a2a:	2000      	movs	r0, #0
}
 8003a2c:	bd38      	pop	{r3, r4, r5, pc}
 8003a2e:	bf00      	nop
 8003a30:	7fffffc0 	.word	0x7fffffc0

08003a34 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003a34:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a36:	4a52      	ldr	r2, [pc, #328]	; (8003b80 <ADC_ConfigureBoostMode+0x14c>)
{
 8003a38:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a3a:	6803      	ldr	r3, [r0, #0]
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d027      	beq.n	8003a90 <ADC_ConfigureBoostMode+0x5c>
 8003a40:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d023      	beq.n	8003a90 <ADC_ConfigureBoostMode+0x5c>
 8003a48:	4b4e      	ldr	r3, [pc, #312]	; (8003b84 <ADC_ConfigureBoostMode+0x150>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8003a50:	bf14      	ite	ne
 8003a52:	2301      	movne	r3, #1
 8003a54:	2300      	moveq	r3, #0
 8003a56:	b323      	cbz	r3, 8003aa2 <ADC_ConfigureBoostMode+0x6e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003a58:	f002 fd30 	bl	80064bc <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8003a5c:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8003a5e:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8003a60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a64:	d062      	beq.n	8003b2c <ADC_ConfigureBoostMode+0xf8>
 8003a66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a6a:	d072      	beq.n	8003b52 <ADC_ConfigureBoostMode+0x11e>
 8003a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a70:	d05c      	beq.n	8003b2c <ADC_ConfigureBoostMode+0xf8>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003a72:	f7ff fcc7 	bl	8003404 <HAL_GetREVID>
 8003a76:	f241 0303 	movw	r3, #4099	; 0x1003
 8003a7a:	4298      	cmp	r0, r3
 8003a7c:	d832      	bhi.n	8003ae4 <ADC_ConfigureBoostMode+0xb0>
  {
    if (freq > 20000000UL)
 8003a7e:	4a42      	ldr	r2, [pc, #264]	; (8003b88 <ADC_ConfigureBoostMode+0x154>)
 8003a80:	682b      	ldr	r3, [r5, #0]
 8003a82:	4294      	cmp	r4, r2
 8003a84:	d928      	bls.n	8003ad8 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a8c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003a8e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a90:	4b3e      	ldr	r3, [pc, #248]	; (8003b8c <ADC_ConfigureBoostMode+0x158>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8003a98:	bf14      	ite	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	2300      	moveq	r3, #0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1da      	bne.n	8003a58 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003aa2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003aa6:	f003 ff3f 	bl	8007928 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8003aaa:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003aac:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8003aae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003ab2:	d049      	beq.n	8003b48 <ADC_ConfigureBoostMode+0x114>
 8003ab4:	d93e      	bls.n	8003b34 <ADC_ConfigureBoostMode+0x100>
 8003ab6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003aba:	d04e      	beq.n	8003b5a <ADC_ConfigureBoostMode+0x126>
 8003abc:	d927      	bls.n	8003b0e <ADC_ConfigureBoostMode+0xda>
 8003abe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ac2:	d048      	beq.n	8003b56 <ADC_ConfigureBoostMode+0x122>
 8003ac4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ac8:	d1d3      	bne.n	8003a72 <ADC_ConfigureBoostMode+0x3e>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003aca:	f7ff fc9b 	bl	8003404 <HAL_GetREVID>
 8003ace:	f241 0303 	movw	r3, #4099	; 0x1003
 8003ad2:	4298      	cmp	r0, r3
 8003ad4:	d805      	bhi.n	8003ae2 <ADC_ConfigureBoostMode+0xae>
 8003ad6:	682b      	ldr	r3, [r5, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ade:	609a      	str	r2, [r3, #8]
}
 8003ae0:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 256UL;
 8003ae2:	0a24      	lsrs	r4, r4, #8
    freq /= 2U; /* divider by 2 for Rev.V */
 8003ae4:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 8003ae6:	4a2a      	ldr	r2, [pc, #168]	; (8003b90 <ADC_ConfigureBoostMode+0x15c>)
 8003ae8:	682b      	ldr	r3, [r5, #0]
 8003aea:	4294      	cmp	r4, r2
 8003aec:	d90a      	bls.n	8003b04 <ADC_ConfigureBoostMode+0xd0>
    else if (freq <= 12500000UL)
 8003aee:	4a29      	ldr	r2, [pc, #164]	; (8003b94 <ADC_ConfigureBoostMode+0x160>)
 8003af0:	4294      	cmp	r4, r2
 8003af2:	d914      	bls.n	8003b1e <ADC_ConfigureBoostMode+0xea>
    else if (freq <= 25000000UL)
 8003af4:	4a28      	ldr	r2, [pc, #160]	; (8003b98 <ADC_ConfigureBoostMode+0x164>)
 8003af6:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003af8:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 8003afa:	d932      	bls.n	8003b62 <ADC_ConfigureBoostMode+0x12e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003afc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003b00:	609a      	str	r2, [r3, #8]
}
 8003b02:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8003b0e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b12:	d024      	beq.n	8003b5e <ADC_ConfigureBoostMode+0x12a>
 8003b14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b18:	d1ab      	bne.n	8003a72 <ADC_ConfigureBoostMode+0x3e>
        freq /= 32UL;
 8003b1a:	0944      	lsrs	r4, r0, #5
        break;
 8003b1c:	e7a9      	b.n	8003a72 <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b28:	609a      	str	r2, [r3, #8]
}
 8003b2a:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003b2c:	0c1b      	lsrs	r3, r3, #16
 8003b2e:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8003b32:	e79e      	b.n	8003a72 <ADC_ConfigureBoostMode+0x3e>
    switch (hadc->Init.ClockPrescaler)
 8003b34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b38:	d006      	beq.n	8003b48 <ADC_ConfigureBoostMode+0x114>
 8003b3a:	d818      	bhi.n	8003b6e <ADC_ConfigureBoostMode+0x13a>
 8003b3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b40:	d002      	beq.n	8003b48 <ADC_ConfigureBoostMode+0x114>
 8003b42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b46:	d194      	bne.n	8003a72 <ADC_ConfigureBoostMode+0x3e>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003b48:	0c9b      	lsrs	r3, r3, #18
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8003b50:	e78f      	b.n	8003a72 <ADC_ConfigureBoostMode+0x3e>
        freq /= 4UL;
 8003b52:	0884      	lsrs	r4, r0, #2
        break;
 8003b54:	e78d      	b.n	8003a72 <ADC_ConfigureBoostMode+0x3e>
        freq /= 128UL;
 8003b56:	09c4      	lsrs	r4, r0, #7
        break;
 8003b58:	e78b      	b.n	8003a72 <ADC_ConfigureBoostMode+0x3e>
        freq /= 64UL;
 8003b5a:	0984      	lsrs	r4, r0, #6
        break;
 8003b5c:	e789      	b.n	8003a72 <ADC_ConfigureBoostMode+0x3e>
        freq /= 16UL;
 8003b5e:	0904      	lsrs	r4, r0, #4
        break;
 8003b60:	e787      	b.n	8003a72 <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003b62:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6a:	609a      	str	r2, [r3, #8]
}
 8003b6c:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8003b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b72:	d0e9      	beq.n	8003b48 <ADC_ConfigureBoostMode+0x114>
 8003b74:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b78:	f47f af7b 	bne.w	8003a72 <ADC_ConfigureBoostMode+0x3e>
 8003b7c:	e7e4      	b.n	8003b48 <ADC_ConfigureBoostMode+0x114>
 8003b7e:	bf00      	nop
 8003b80:	40022000 	.word	0x40022000
 8003b84:	58026300 	.word	0x58026300
 8003b88:	01312d00 	.word	0x01312d00
 8003b8c:	40022300 	.word	0x40022300
 8003b90:	005f5e10 	.word	0x005f5e10
 8003b94:	00bebc20 	.word	0x00bebc20
 8003b98:	017d7840 	.word	0x017d7840

08003b9c <HAL_ADC_Init>:
{
 8003b9c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8003b9e:	2300      	movs	r3, #0
{
 8003ba0:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8003ba2:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	f000 80aa 	beq.w	8003cfe <HAL_ADC_Init+0x162>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003baa:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8003bac:	4604      	mov	r4, r0
 8003bae:	2d00      	cmp	r5, #0
 8003bb0:	f000 809a 	beq.w	8003ce8 <HAL_ADC_Init+0x14c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003bb4:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003bb6:	6893      	ldr	r3, [r2, #8]
 8003bb8:	009d      	lsls	r5, r3, #2
 8003bba:	d503      	bpl.n	8003bc4 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003bbc:	6891      	ldr	r1, [r2, #8]
 8003bbe:	4b77      	ldr	r3, [pc, #476]	; (8003d9c <HAL_ADC_Init+0x200>)
 8003bc0:	400b      	ands	r3, r1
 8003bc2:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003bc4:	6893      	ldr	r3, [r2, #8]
 8003bc6:	00d8      	lsls	r0, r3, #3
 8003bc8:	d415      	bmi.n	8003bf6 <HAL_ADC_Init+0x5a>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003bca:	4b75      	ldr	r3, [pc, #468]	; (8003da0 <HAL_ADC_Init+0x204>)
  MODIFY_REG(ADCx->CR,
 8003bcc:	6890      	ldr	r0, [r2, #8]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4d74      	ldr	r5, [pc, #464]	; (8003da4 <HAL_ADC_Init+0x208>)
 8003bd2:	099b      	lsrs	r3, r3, #6
 8003bd4:	4974      	ldr	r1, [pc, #464]	; (8003da8 <HAL_ADC_Init+0x20c>)
 8003bd6:	fba5 5303 	umull	r5, r3, r5, r3
 8003bda:	4001      	ands	r1, r0
 8003bdc:	099b      	lsrs	r3, r3, #6
 8003bde:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003be2:	6091      	str	r1, [r2, #8]
 8003be4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003be6:	9b01      	ldr	r3, [sp, #4]
 8003be8:	b12b      	cbz	r3, 8003bf6 <HAL_ADC_Init+0x5a>
      wait_loop_index--;
 8003bea:	9b01      	ldr	r3, [sp, #4]
 8003bec:	3b01      	subs	r3, #1
 8003bee:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003bf0:	9b01      	ldr	r3, [sp, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f9      	bne.n	8003bea <HAL_ADC_Init+0x4e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003bf6:	6893      	ldr	r3, [r2, #8]
 8003bf8:	00d9      	lsls	r1, r3, #3
 8003bfa:	d467      	bmi.n	8003ccc <HAL_ADC_Init+0x130>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bfc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8003bfe:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c00:	f043 0310 	orr.w	r3, r3, #16
 8003c04:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c08:	432b      	orrs	r3, r5
 8003c0a:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c0c:	6893      	ldr	r3, [r2, #8]
 8003c0e:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c12:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c14:	d160      	bne.n	8003cd8 <HAL_ADC_Init+0x13c>
 8003c16:	06db      	lsls	r3, r3, #27
 8003c18:	d45e      	bmi.n	8003cd8 <HAL_ADC_Init+0x13c>
    ADC_STATE_CLR_SET(hadc->State,
 8003c1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003c20:	f043 0302 	orr.w	r3, r3, #2
 8003c24:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c26:	6893      	ldr	r3, [r2, #8]
 8003c28:	07de      	lsls	r6, r3, #31
 8003c2a:	d413      	bmi.n	8003c54 <HAL_ADC_Init+0xb8>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c2c:	4b5f      	ldr	r3, [pc, #380]	; (8003dac <HAL_ADC_Init+0x210>)
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	f000 8092 	beq.w	8003d58 <HAL_ADC_Init+0x1bc>
 8003c34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	f000 808d 	beq.w	8003d58 <HAL_ADC_Init+0x1bc>
 8003c3e:	4b5c      	ldr	r3, [pc, #368]	; (8003db0 <HAL_ADC_Init+0x214>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	07d9      	lsls	r1, r3, #31
 8003c44:	d406      	bmi.n	8003c54 <HAL_ADC_Init+0xb8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c46:	4a5b      	ldr	r2, [pc, #364]	; (8003db4 <HAL_ADC_Init+0x218>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c48:	6893      	ldr	r3, [r2, #8]
 8003c4a:	6861      	ldr	r1, [r4, #4]
 8003c4c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003c50:	430b      	orrs	r3, r1
 8003c52:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003c54:	f7ff fbd6 	bl	8003404 <HAL_GetREVID>
 8003c58:	f241 0303 	movw	r3, #4099	; 0x1003
 8003c5c:	7d62      	ldrb	r2, [r4, #21]
 8003c5e:	4298      	cmp	r0, r3
 8003c60:	7f21      	ldrb	r1, [r4, #28]
 8003c62:	d96c      	bls.n	8003d3e <HAL_ADC_Init+0x1a2>
 8003c64:	68a3      	ldr	r3, [r4, #8]
 8003c66:	0352      	lsls	r2, r2, #13
 8003c68:	040e      	lsls	r6, r1, #16
 8003c6a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	f000 808e 	beq.w	8003d8e <HAL_ADC_Init+0x1f2>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003c72:	431a      	orrs	r2, r3
 8003c74:	4332      	orrs	r2, r6
 8003c76:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c78:	2901      	cmp	r1, #1
 8003c7a:	d103      	bne.n	8003c84 <HAL_ADC_Init+0xe8>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c7c:	6a23      	ldr	r3, [r4, #32]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c86:	b123      	cbz	r3, 8003c92 <HAL_ADC_Init+0xf6>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c88:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003c8c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c8e:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c90:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	4948      	ldr	r1, [pc, #288]	; (8003db8 <HAL_ADC_Init+0x21c>)
 8003c96:	68d8      	ldr	r0, [r3, #12]
 8003c98:	4001      	ands	r1, r0
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ca4:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ca6:	d101      	bne.n	8003cac <HAL_ADC_Init+0x110>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ca8:	0712      	lsls	r2, r2, #28
 8003caa:	d52c      	bpl.n	8003d06 <HAL_ADC_Init+0x16a>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003cac:	68e2      	ldr	r2, [r4, #12]
 8003cae:	2a01      	cmp	r2, #1
 8003cb0:	d04a      	beq.n	8003d48 <HAL_ADC_Init+0x1ac>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cb4:	f022 020f 	bic.w	r2, r2, #15
 8003cb8:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003cba:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8003cbc:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	6563      	str	r3, [r4, #84]	; 0x54
}
 8003cc8:	b002      	add	sp, #8
 8003cca:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ccc:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cce:	2500      	movs	r5, #0
 8003cd0:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cd6:	d09e      	beq.n	8003c16 <HAL_ADC_Init+0x7a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8003cda:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cdc:	f043 0310 	orr.w	r3, r3, #16
}
 8003ce0:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce2:	6563      	str	r3, [r4, #84]	; 0x54
}
 8003ce4:	b002      	add	sp, #8
 8003ce6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8003ce8:	f7ff f86e 	bl	8002dc8 <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003cec:	6822      	ldr	r2, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8003cee:	65a5      	str	r5, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cf0:	6893      	ldr	r3, [r2, #8]
    hadc->Lock = HAL_UNLOCKED;
 8003cf2:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8003cf6:	009d      	lsls	r5, r3, #2
 8003cf8:	f57f af64 	bpl.w	8003bc4 <HAL_ADC_Init+0x28>
 8003cfc:	e75e      	b.n	8003bbc <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8003cfe:	2501      	movs	r5, #1
}
 8003d00:	4628      	mov	r0, r5
 8003d02:	b002      	add	sp, #8
 8003d04:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d06:	68d8      	ldr	r0, [r3, #12]
 8003d08:	4a2c      	ldr	r2, [pc, #176]	; (8003dbc <HAL_ADC_Init+0x220>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d0a:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d0c:	4002      	ands	r2, r0
 8003d0e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003d10:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
      if (hadc->Init.OversamplingMode == ENABLE)
 8003d14:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d18:	4302      	orrs	r2, r0
      if (hadc->Init.OversamplingMode == ENABLE)
 8003d1a:	2901      	cmp	r1, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d1c:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8003d1e:	d025      	beq.n	8003d6c <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d20:	691a      	ldr	r2, [r3, #16]
 8003d22:	f022 0201 	bic.w	r2, r2, #1
 8003d26:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003d28:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8003d2a:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d2e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003d32:	430a      	orrs	r2, r1
 8003d34:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8003d36:	f7ff fe7d 	bl	8003a34 <ADC_ConfigureBoostMode>
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	e7b6      	b.n	8003cac <HAL_ADC_Init+0x110>
 8003d3e:	0352      	lsls	r2, r2, #13
 8003d40:	68a3      	ldr	r3, [r4, #8]
 8003d42:	040e      	lsls	r6, r1, #16
 8003d44:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003d46:	e794      	b.n	8003c72 <HAL_ADC_Init+0xd6>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d4a:	69a2      	ldr	r2, [r4, #24]
 8003d4c:	f021 010f 	bic.w	r1, r1, #15
 8003d50:	3a01      	subs	r2, #1
 8003d52:	430a      	orrs	r2, r1
 8003d54:	631a      	str	r2, [r3, #48]	; 0x30
 8003d56:	e7b0      	b.n	8003cba <HAL_ADC_Init+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d58:	4a14      	ldr	r2, [pc, #80]	; (8003dac <HAL_ADC_Init+0x210>)
 8003d5a:	4b19      	ldr	r3, [pc, #100]	; (8003dc0 <HAL_ADC_Init+0x224>)
 8003d5c:	6892      	ldr	r2, [r2, #8]
 8003d5e:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	07d8      	lsls	r0, r3, #31
 8003d64:	f53f af76 	bmi.w	8003c54 <HAL_ADC_Init+0xb8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d68:	4a16      	ldr	r2, [pc, #88]	; (8003dc4 <HAL_ADC_Init+0x228>)
 8003d6a:	e76d      	b.n	8003c48 <HAL_ADC_Init+0xac>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003d6c:	e9d4 2110 	ldrd	r2, r1, [r4, #64]	; 0x40
 8003d70:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003d72:	430a      	orrs	r2, r1
 8003d74:	4e14      	ldr	r6, [pc, #80]	; (8003dc8 <HAL_ADC_Init+0x22c>)
 8003d76:	6919      	ldr	r1, [r3, #16]
 8003d78:	f042 0201 	orr.w	r2, r2, #1
 8003d7c:	400e      	ands	r6, r1
 8003d7e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003d80:	4302      	orrs	r2, r0
 8003d82:	3901      	subs	r1, #1
 8003d84:	4332      	orrs	r2, r6
 8003d86:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003d8a:	611a      	str	r2, [r3, #16]
 8003d8c:	e7cc      	b.n	8003d28 <HAL_ADC_Init+0x18c>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d8e:	f040 031c 	orr.w	r3, r0, #28
 8003d92:	4313      	orrs	r3, r2
 8003d94:	ea43 0206 	orr.w	r2, r3, r6
 8003d98:	e76e      	b.n	8003c78 <HAL_ADC_Init+0xdc>
 8003d9a:	bf00      	nop
 8003d9c:	5fffffc0 	.word	0x5fffffc0
 8003da0:	240001f4 	.word	0x240001f4
 8003da4:	053e2d63 	.word	0x053e2d63
 8003da8:	6fffffc0 	.word	0x6fffffc0
 8003dac:	40022000 	.word	0x40022000
 8003db0:	58026000 	.word	0x58026000
 8003db4:	58026300 	.word	0x58026300
 8003db8:	fff0c003 	.word	0xfff0c003
 8003dbc:	ffffbffc 	.word	0xffffbffc
 8003dc0:	40022100 	.word	0x40022100
 8003dc4:	40022300 	.word	0x40022300
 8003dc8:	fc00f81e 	.word	0xfc00f81e

08003dcc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dce:	f890 5050 	ldrb.w	r5, [r0, #80]	; 0x50
{
 8003dd2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003dd4:	2600      	movs	r6, #0
  __HAL_LOCK(hadc);
 8003dd6:	2d01      	cmp	r5, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003dd8:	9601      	str	r6, [sp, #4]
  __HAL_LOCK(hadc);
 8003dda:	d036      	beq.n	8003e4a <HAL_ADCEx_Calibration_Start+0x7e>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	4604      	mov	r4, r0
 8003de0:	4615      	mov	r5, r2
 8003de2:	460e      	mov	r6, r1
 8003de4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003de8:	f7ff fdf0 	bl	80039cc <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003dec:	bb20      	cbnz	r0, 8003e38 <HAL_ADCEx_Calibration_Start+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dee:	6d67      	ldr	r7, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8003df0:	f005 4380 	and.w	r3, r5, #1073741824	; 0x40000000
 8003df4:	4d1c      	ldr	r5, [pc, #112]	; (8003e68 <HAL_ADCEx_Calibration_Start+0x9c>)
 8003df6:	f406 3180 	and.w	r1, r6, #65536	; 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003dfa:	6822      	ldr	r2, [r4, #0]
 8003dfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ADC_STATE_CLR_SET(hadc->State,
 8003e00:	403d      	ands	r5, r7
 8003e02:	4e1a      	ldr	r6, [pc, #104]	; (8003e6c <HAL_ADCEx_Calibration_Start+0xa0>)
 8003e04:	430b      	orrs	r3, r1

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e06:	491a      	ldr	r1, [pc, #104]	; (8003e70 <HAL_ADCEx_Calibration_Start+0xa4>)
    ADC_STATE_CLR_SET(hadc->State,
 8003e08:	f045 0502 	orr.w	r5, r5, #2
 8003e0c:	6565      	str	r5, [r4, #84]	; 0x54
 8003e0e:	6895      	ldr	r5, [r2, #8]
 8003e10:	402e      	ands	r6, r5
 8003e12:	4333      	orrs	r3, r6
 8003e14:	6093      	str	r3, [r2, #8]
 8003e16:	e005      	b.n	8003e24 <HAL_ADCEx_Calibration_Start+0x58>
      wait_loop_index++;
 8003e18:	9b01      	ldr	r3, [sp, #4]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e1e:	9b01      	ldr	r3, [sp, #4]
 8003e20:	428b      	cmp	r3, r1
 8003e22:	d815      	bhi.n	8003e50 <HAL_ADCEx_Calibration_Start+0x84>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e24:	6893      	ldr	r3, [r2, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	dbf6      	blt.n	8003e18 <HAL_ADCEx_Calibration_Start+0x4c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e2c:	f023 0303 	bic.w	r3, r3, #3
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6563      	str	r3, [r4, #84]	; 0x54
 8003e36:	e003      	b.n	8003e40 <HAL_ADCEx_Calibration_Start+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e3a:	f043 0310 	orr.w	r3, r3, #16
 8003e3e:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e40:	2300      	movs	r3, #0
 8003e42:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003e46:	b003      	add	sp, #12
 8003e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8003e4a:	2002      	movs	r0, #2
}
 8003e4c:	b003      	add	sp, #12
 8003e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ADC_STATE_CLR_SET(hadc->State,
 8003e50:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8003e52:	2200      	movs	r2, #0
        return HAL_ERROR;
 8003e54:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8003e56:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8003e5a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 8003e5e:	f043 0310 	orr.w	r3, r3, #16
 8003e62:	6563      	str	r3, [r4, #84]	; 0x54
}
 8003e64:	b003      	add	sp, #12
 8003e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e68:	ffffeefd 	.word	0xffffeefd
 8003e6c:	3ffeffc0 	.word	0x3ffeffc0
 8003e70:	25c3f7ff 	.word	0x25c3f7ff

08003e74 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e78:	6807      	ldr	r7, [r0, #0]
{
 8003e7a:	b09a      	sub	sp, #104	; 0x68
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e7c:	68bd      	ldr	r5, [r7, #8]
 8003e7e:	f015 0504 	ands.w	r5, r5, #4
 8003e82:	d123      	bne.n	8003ecc <HAL_ADCEx_MultiModeStart_DMA+0x58>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e84:	f890 6050 	ldrb.w	r6, [r0, #80]	; 0x50
 8003e88:	4604      	mov	r4, r0
 8003e8a:	2e01      	cmp	r6, #1
 8003e8c:	d01e      	beq.n	8003ecc <HAL_ADCEx_MultiModeStart_DMA+0x58>

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003e8e:	4b30      	ldr	r3, [pc, #192]	; (8003f50 <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
    __HAL_LOCK(hadc);
 8003e90:	2601      	movs	r6, #1
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003e92:	429f      	cmp	r7, r3
    __HAL_LOCK(hadc);
 8003e94:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003e98:	d009      	beq.n	8003eae <HAL_ADCEx_MultiModeStart_DMA+0x3a>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e9a:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 8003e9c:	4630      	mov	r0, r6
      __HAL_UNLOCK(hadc);
 8003e9e:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ea2:	f043 0320 	orr.w	r3, r3, #32
 8003ea6:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 8003ea8:	b01a      	add	sp, #104	; 0x68
 8003eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eae:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8003f68 <HAL_ADCEx_MultiModeStart_DMA+0xf4>
 8003eb2:	4616      	mov	r6, r2
 8003eb4:	460d      	mov	r5, r1
 8003eb6:	f8cd 8004 	str.w	r8, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 8003eba:	f7ff fd29 	bl	8003910 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003ebe:	b148      	cbz	r0, 8003ed4 <HAL_ADCEx_MultiModeStart_DMA+0x60>
      __HAL_UNLOCK(hadc);
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003ec6:	b01a      	add	sp, #104	; 0x68
 8003ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003ecc:	2002      	movs	r0, #2
}
 8003ece:	b01a      	add	sp, #104	; 0x68
 8003ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8003ed4:	a801      	add	r0, sp, #4
 8003ed6:	f7ff fd1b 	bl	8003910 <ADC_Enable>
 8003eda:	4602      	mov	r2, r0
    if (tmp_hal_status == HAL_OK)
 8003edc:	2800      	cmp	r0, #0
 8003ede:	d1ef      	bne.n	8003ec0 <HAL_ADCEx_MultiModeStart_DMA+0x4c>
      ADC_STATE_CLR_SET(hadc->State,
 8003ee0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003ee2:	4b1c      	ldr	r3, [pc, #112]	; (8003f54 <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ee4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      ADC_STATE_CLR_SET(hadc->State,
 8003ee6:	400b      	ands	r3, r1
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ee8:	f8df c080 	ldr.w	ip, [pc, #128]	; 8003f6c <HAL_ADCEx_MultiModeStart_DMA+0xf8>
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003eec:	f8df e080 	ldr.w	lr, [pc, #128]	; 8003f70 <HAL_ADCEx_MultiModeStart_DMA+0xfc>
      ADC_STATE_CLR_SET(hadc->State,
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8003ef4:	4918      	ldr	r1, [pc, #96]	; (8003f58 <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
      ADC_STATE_CLR_SET(hadc->State,
 8003ef6:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8003ef8:	65a2      	str	r2, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003efa:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003efe:	f8d4 c000 	ldr.w	ip, [r4]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f02:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f06:	45bc      	cmp	ip, r7
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8003f08:	64c1      	str	r1, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f0a:	d01e      	beq.n	8003f4a <HAL_ADCEx_MultiModeStart_DMA+0xd6>
 8003f0c:	45c4      	cmp	ip, r8
 8003f0e:	d01c      	beq.n	8003f4a <HAL_ADCEx_MultiModeStart_DMA+0xd6>
 8003f10:	4912      	ldr	r1, [pc, #72]	; (8003f5c <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f12:	f04f 0e1c 	mov.w	lr, #28
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003f16:	462a      	mov	r2, r5
      __HAL_UNLOCK(hadc);
 8003f18:	2700      	movs	r7, #0
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003f1a:	4633      	mov	r3, r6
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f1c:	f8cc e000 	str.w	lr, [ip]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003f20:	310c      	adds	r1, #12
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f22:	f8dc 5004 	ldr.w	r5, [ip, #4]
      __HAL_UNLOCK(hadc);
 8003f26:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f2a:	f045 0510 	orr.w	r5, r5, #16
 8003f2e:	f8cc 5004 	str.w	r5, [ip, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003f32:	f000 fe1b 	bl	8004b6c <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003f36:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <HAL_ADCEx_MultiModeStart_DMA+0xec>)
 8003f3a:	6891      	ldr	r1, [r2, #8]
 8003f3c:	400b      	ands	r3, r1
 8003f3e:	f043 0304 	orr.w	r3, r3, #4
 8003f42:	6093      	str	r3, [r2, #8]
}
 8003f44:	b01a      	add	sp, #104	; 0x68
 8003f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f4a:	4906      	ldr	r1, [pc, #24]	; (8003f64 <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 8003f4c:	e7e1      	b.n	8003f12 <HAL_ADCEx_MultiModeStart_DMA+0x9e>
 8003f4e:	bf00      	nop
 8003f50:	40022000 	.word	0x40022000
 8003f54:	fffff0fe 	.word	0xfffff0fe
 8003f58:	080034e5 	.word	0x080034e5
 8003f5c:	58026300 	.word	0x58026300
 8003f60:	7fffffc0 	.word	0x7fffffc0
 8003f64:	40022300 	.word	0x40022300
 8003f68:	40022100 	.word	0x40022100
 8003f6c:	0800347d 	.word	0x0800347d
 8003f70:	0800346d 	.word	0x0800346d

08003f74 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f74:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8003f78:	2a01      	cmp	r2, #1
 8003f7a:	d04b      	beq.n	8004014 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003f7c:	4603      	mov	r3, r0

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f7e:	4a29      	ldr	r2, [pc, #164]	; (8004024 <HAL_ADCEx_MultiModeConfigChannel+0xb0>)
  __HAL_LOCK(hadc);
 8003f80:	2001      	movs	r0, #1
{
 8003f82:	b4f0      	push	{r4, r5, r6, r7}
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f84:	681c      	ldr	r4, [r3, #0]
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f86:	680e      	ldr	r6, [r1, #0]
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f88:	4294      	cmp	r4, r2
  __HAL_LOCK(hadc);
 8003f8a:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f8e:	d008      	beq.n	8003fa2 <HAL_ADCEx_MultiModeConfigChannel+0x2e>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f92:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f94:	f042 0220 	orr.w	r2, r2, #32
    __HAL_UNLOCK(hadc);
 8003f98:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f9c:	655a      	str	r2, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8003f9e:	bcf0      	pop	{r4, r5, r6, r7}
 8003fa0:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fa2:	4d21      	ldr	r5, [pc, #132]	; (8004028 <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
 8003fa4:	68aa      	ldr	r2, [r5, #8]
 8003fa6:	0752      	lsls	r2, r2, #29
 8003fa8:	d50a      	bpl.n	8003fc0 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
 8003faa:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8003fae:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fb0:	f042 0220 	orr.w	r2, r2, #32
 8003fb4:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8003fbc:	bcf0      	pop	{r4, r5, r6, r7}
 8003fbe:	4770      	bx	lr
 8003fc0:	68a0      	ldr	r0, [r4, #8]
 8003fc2:	f010 0004 	ands.w	r0, r0, #4
 8003fc6:	d1f1      	bne.n	8003fac <HAL_ADCEx_MultiModeConfigChannel+0x38>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fc8:	b1c6      	cbz	r6, 8003ffc <HAL_ADCEx_MultiModeConfigChannel+0x88>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003fca:	f8df c064 	ldr.w	ip, [pc, #100]	; 8004030 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 8003fce:	684f      	ldr	r7, [r1, #4]
 8003fd0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8003fd4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003fd8:	433a      	orrs	r2, r7
 8003fda:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fde:	68a4      	ldr	r4, [r4, #8]
 8003fe0:	68aa      	ldr	r2, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fe2:	4322      	orrs	r2, r4
 8003fe4:	07d4      	lsls	r4, r2, #31
 8003fe6:	d413      	bmi.n	8004010 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
        MODIFY_REG(tmpADC_Common->CCR,
 8003fe8:	688a      	ldr	r2, [r1, #8]
 8003fea:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8003fee:	490f      	ldr	r1, [pc, #60]	; (800402c <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8003ff0:	4316      	orrs	r6, r2
 8003ff2:	4021      	ands	r1, r4
 8003ff4:	430e      	orrs	r6, r1
 8003ff6:	f8cc 6008 	str.w	r6, [ip, #8]
 8003ffa:	e7dc      	b.n	8003fb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003ffc:	490c      	ldr	r1, [pc, #48]	; (8004030 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8003ffe:	688a      	ldr	r2, [r1, #8]
 8004000:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004004:	608a      	str	r2, [r1, #8]
 8004006:	68a0      	ldr	r0, [r4, #8]
 8004008:	68aa      	ldr	r2, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800400a:	4302      	orrs	r2, r0
 800400c:	07d0      	lsls	r0, r2, #31
 800400e:	d503      	bpl.n	8004018 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004010:	2000      	movs	r0, #0
 8004012:	e7d0      	b.n	8003fb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
  __HAL_LOCK(hadc);
 8004014:	2002      	movs	r0, #2
}
 8004016:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004018:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800401a:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800401c:	4a03      	ldr	r2, [pc, #12]	; (800402c <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 800401e:	4022      	ands	r2, r4
 8004020:	608a      	str	r2, [r1, #8]
 8004022:	e7c8      	b.n	8003fb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004024:	40022000 	.word	0x40022000
 8004028:	40022100 	.word	0x40022100
 800402c:	fffff0e0 	.word	0xfffff0e0
 8004030:	40022300 	.word	0x40022300

08004034 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004034:	4907      	ldr	r1, [pc, #28]	; (8004054 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004036:	0200      	lsls	r0, r0, #8
 8004038:	4b07      	ldr	r3, [pc, #28]	; (8004058 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800403a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800403c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004040:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004042:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8004046:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004048:	f85d 4b04 	ldr.w	r4, [sp], #4
 800404c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800404e:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8004050:	60c8      	str	r0, [r1, #12]
 8004052:	4770      	bx	lr
 8004054:	e000ed00 	.word	0xe000ed00
 8004058:	05fa0000 	.word	0x05fa0000

0800405c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800405c:	4b17      	ldr	r3, [pc, #92]	; (80040bc <HAL_NVIC_SetPriority+0x60>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004064:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004066:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800406a:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800406c:	2d04      	cmp	r5, #4
 800406e:	bf28      	it	cs
 8004070:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004072:	2c06      	cmp	r4, #6
 8004074:	d918      	bls.n	80040a8 <HAL_NVIC_SetPriority+0x4c>
 8004076:	3b03      	subs	r3, #3
 8004078:	f04f 34ff 	mov.w	r4, #4294967295
 800407c:	409c      	lsls	r4, r3
 800407e:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004082:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8004086:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004088:	fa02 f205 	lsl.w	r2, r2, r5
 800408c:	ea21 0102 	bic.w	r1, r1, r2
 8004090:	fa01 f203 	lsl.w	r2, r1, r3
 8004094:	ea42 0204 	orr.w	r2, r2, r4
 8004098:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800409c:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 800409e:	db06      	blt.n	80040ae <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040a0:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <HAL_NVIC_SetPriority+0x64>)
 80040a2:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80040a4:	bc30      	pop	{r4, r5}
 80040a6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040a8:	2400      	movs	r4, #0
 80040aa:	4623      	mov	r3, r4
 80040ac:	e7e9      	b.n	8004082 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ae:	f000 000f 	and.w	r0, r0, #15
 80040b2:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <HAL_NVIC_SetPriority+0x68>)
 80040b4:	541a      	strb	r2, [r3, r0]
 80040b6:	bc30      	pop	{r4, r5}
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	e000ed00 	.word	0xe000ed00
 80040c0:	e000e400 	.word	0xe000e400
 80040c4:	e000ed14 	.word	0xe000ed14

080040c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80040c8:	2800      	cmp	r0, #0
 80040ca:	db07      	blt.n	80040dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040cc:	f000 011f 	and.w	r1, r0, #31
 80040d0:	2301      	movs	r3, #1
 80040d2:	0940      	lsrs	r0, r0, #5
 80040d4:	4a02      	ldr	r2, [pc, #8]	; (80040e0 <HAL_NVIC_EnableIRQ+0x18>)
 80040d6:	408b      	lsls	r3, r1
 80040d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	e000e100 	.word	0xe000e100

080040e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040e4:	3801      	subs	r0, #1
 80040e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80040ea:	d20d      	bcs.n	8004108 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040ec:	4b07      	ldr	r3, [pc, #28]	; (800410c <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040ee:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040f0:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040f2:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f4:	25f0      	movs	r5, #240	; 0xf0
 80040f6:	4c06      	ldr	r4, [pc, #24]	; (8004110 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040f8:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040fa:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040fc:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004102:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8004104:	bc30      	pop	{r4, r5}
 8004106:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004108:	2001      	movs	r0, #1
 800410a:	4770      	bx	lr
 800410c:	e000e010 	.word	0xe000e010
 8004110:	e000ed00 	.word	0xe000ed00

08004114 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8004114:	b188      	cbz	r0, 800413a <HAL_DAC_Init+0x26>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004116:	7903      	ldrb	r3, [r0, #4]
{
 8004118:	b510      	push	{r4, lr}
  if (hdac->State == HAL_DAC_STATE_RESET)
 800411a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800411e:	4604      	mov	r4, r0
 8004120:	b13b      	cbz	r3, 8004132 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004122:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8004124:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004126:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8004128:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800412a:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800412c:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800412e:	7122      	strb	r2, [r4, #4]
}
 8004130:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8004132:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8004134:	f7fe fede 	bl	8002ef4 <HAL_DAC_MspInit>
 8004138:	e7f3      	b.n	8004122 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800413a:	2001      	movs	r0, #1
}
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop

08004140 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004140:	7942      	ldrb	r2, [r0, #5]
 8004142:	2a01      	cmp	r2, #1
 8004144:	d028      	beq.n	8004198 <HAL_DAC_Start+0x58>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004146:	6802      	ldr	r2, [r0, #0]
 8004148:	4603      	mov	r3, r0
{
 800414a:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdac);
 800414c:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800414e:	2402      	movs	r4, #2
  __HAL_DAC_ENABLE(hdac, Channel);
 8004150:	f001 0610 	and.w	r6, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 8004154:	7104      	strb	r4, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8004156:	fa05 f006 	lsl.w	r0, r5, r6
 800415a:	6817      	ldr	r7, [r2, #0]
  __HAL_LOCK(hdac);
 800415c:	715d      	strb	r5, [r3, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 800415e:	4338      	orrs	r0, r7
 8004160:	6010      	str	r0, [r2, #0]

  if (Channel == DAC_CHANNEL_1)
 8004162:	b971      	cbnz	r1, 8004182 <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004164:	6811      	ldr	r1, [r2, #0]
 8004166:	f001 013e 	and.w	r1, r1, #62	; 0x3e
 800416a:	42a1      	cmp	r1, r4
 800416c:	d102      	bne.n	8004174 <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800416e:	6851      	ldr	r1, [r2, #4]
 8004170:	4329      	orrs	r1, r5
 8004172:	6051      	str	r1, [r2, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004174:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8004176:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 8004178:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 800417a:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 800417c:	715a      	strb	r2, [r3, #5]
}
 800417e:	bcf0      	pop	{r4, r5, r6, r7}
 8004180:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004182:	6811      	ldr	r1, [r2, #0]
 8004184:	40b4      	lsls	r4, r6
 8004186:	f401 1178 	and.w	r1, r1, #4063232	; 0x3e0000
 800418a:	42a1      	cmp	r1, r4
 800418c:	d1f2      	bne.n	8004174 <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800418e:	6851      	ldr	r1, [r2, #4]
 8004190:	f041 0102 	orr.w	r1, r1, #2
 8004194:	6051      	str	r1, [r2, #4]
 8004196:	e7ed      	b.n	8004174 <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 8004198:	2002      	movs	r0, #2
}
 800419a:	4770      	bx	lr

0800419c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800419e:	7944      	ldrb	r4, [r0, #5]
{
 80041a0:	9f06      	ldr	r7, [sp, #24]
  __HAL_LOCK(hdac);
 80041a2:	2c01      	cmp	r4, #1
 80041a4:	d05e      	beq.n	8004264 <HAL_DAC_Start_DMA+0xc8>
 80041a6:	4604      	mov	r4, r0
 80041a8:	460e      	mov	r6, r1
 80041aa:	2001      	movs	r0, #1
 80041ac:	4611      	mov	r1, r2
 80041ae:	6825      	ldr	r5, [r4, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80041b0:	2202      	movs	r2, #2
  __HAL_LOCK(hdac);
 80041b2:	7160      	strb	r0, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80041b4:	7122      	strb	r2, [r4, #4]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80041b6:	682a      	ldr	r2, [r5, #0]
  if (Channel == DAC_CHANNEL_1)
 80041b8:	bb4e      	cbnz	r6, 800420e <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80041ba:	68a0      	ldr	r0, [r4, #8]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80041bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80041c0:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8004280 <HAL_DAC_Start_DMA+0xe4>

    /* Case of use of channel 1 */
    switch (Alignment)
 80041c4:	2f04      	cmp	r7, #4
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80041c6:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 8004284 <HAL_DAC_Start_DMA+0xe8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80041ca:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80041ce:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8004288 <HAL_DAC_Start_DMA+0xec>
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80041d2:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80041d6:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80041da:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 80041dc:	d04d      	beq.n	800427a <HAL_DAC_Start_DMA+0xde>
 80041de:	2f08      	cmp	r7, #8
 80041e0:	d048      	beq.n	8004274 <HAL_DAC_Start_DMA+0xd8>
 80041e2:	2f00      	cmp	r7, #0
 80041e4:	d038      	beq.n	8004258 <HAL_DAC_Start_DMA+0xbc>
        break;
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80041e6:	2200      	movs	r2, #0
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80041e8:	682f      	ldr	r7, [r5, #0]
 80041ea:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 80041ee:	602f      	str	r7, [r5, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80041f0:	f000 fcbc 	bl	8004b6c <HAL_DMA_Start_IT>
    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80041f4:	2300      	movs	r3, #0
 80041f6:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 80041f8:	bb48      	cbnz	r0, 800424e <HAL_DAC_Start_DMA+0xb2>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	2101      	movs	r1, #1
 80041fe:	f006 0610 	and.w	r6, r6, #16
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	fa01 f606 	lsl.w	r6, r1, r6
 8004208:	4316      	orrs	r6, r2
 800420a:	601e      	str	r6, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 800420c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800420e:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004210:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004214:	f8df c074 	ldr.w	ip, [pc, #116]	; 800428c <HAL_DAC_Start_DMA+0xf0>
    switch (Alignment)
 8004218:	2f04      	cmp	r7, #4
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800421a:	f8df e074 	ldr.w	lr, [pc, #116]	; 8004290 <HAL_DAC_Start_DMA+0xf4>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800421e:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004222:	f8df c070 	ldr.w	ip, [pc, #112]	; 8004294 <HAL_DAC_Start_DMA+0xf8>
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004226:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800422a:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800422e:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 8004230:	d01d      	beq.n	800426e <HAL_DAC_Start_DMA+0xd2>
 8004232:	2f08      	cmp	r7, #8
 8004234:	d018      	beq.n	8004268 <HAL_DAC_Start_DMA+0xcc>
 8004236:	b197      	cbz	r7, 800425e <HAL_DAC_Start_DMA+0xc2>
  if (Channel == DAC_CHANNEL_1)
 8004238:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800423a:	682f      	ldr	r7, [r5, #0]
 800423c:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8004240:	602f      	str	r7, [r5, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004242:	f000 fc93 	bl	8004b6c <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8004246:	2300      	movs	r3, #0
 8004248:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 800424a:	2800      	cmp	r0, #0
 800424c:	d0d5      	beq.n	80041fa <HAL_DAC_Start_DMA+0x5e>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800424e:	6923      	ldr	r3, [r4, #16]
 8004250:	f043 0304 	orr.w	r3, r3, #4
 8004254:	6123      	str	r3, [r4, #16]
}
 8004256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004258:	f105 0208 	add.w	r2, r5, #8
        break;
 800425c:	e7c4      	b.n	80041e8 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800425e:	f105 0214 	add.w	r2, r5, #20
        break;
 8004262:	e7ea      	b.n	800423a <HAL_DAC_Start_DMA+0x9e>
  __HAL_LOCK(hdac);
 8004264:	2002      	movs	r0, #2
}
 8004266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004268:	f105 021c 	add.w	r2, r5, #28
        break;
 800426c:	e7e5      	b.n	800423a <HAL_DAC_Start_DMA+0x9e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800426e:	f105 0218 	add.w	r2, r5, #24
        break;
 8004272:	e7e2      	b.n	800423a <HAL_DAC_Start_DMA+0x9e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004274:	f105 0210 	add.w	r2, r5, #16
        break;
 8004278:	e7b6      	b.n	80041e8 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800427a:	f105 020c 	add.w	r2, r5, #12
        break;
 800427e:	e7b3      	b.n	80041e8 <HAL_DAC_Start_DMA+0x4c>
 8004280:	0800429d 	.word	0x0800429d
 8004284:	080042b1 	.word	0x080042b1
 8004288:	080042c1 	.word	0x080042c1
 800428c:	0800449d 	.word	0x0800449d
 8004290:	080044b1 	.word	0x080044b1
 8004294:	080044c1 	.word	0x080044c1

08004298 <HAL_DAC_ConvCpltCallbackCh1>:
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop

0800429c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800429c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800429e:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80042a0:	4620      	mov	r0, r4
 80042a2:	f7ff fff9 	bl	8004298 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80042a6:	2301      	movs	r3, #1
 80042a8:	7123      	strb	r3, [r4, #4]
}
 80042aa:	bd10      	pop	{r4, pc}

080042ac <HAL_DAC_ConvHalfCpltCallbackCh1>:
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop

080042b0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80042b0:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80042b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80042b4:	f7ff fffa 	bl	80042ac <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80042b8:	bd08      	pop	{r3, pc}
 80042ba:	bf00      	nop

080042bc <HAL_DAC_ErrorCallbackCh1>:
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop

080042c0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80042c0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80042c4:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80042c6:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80042c8:	f043 0304 	orr.w	r3, r3, #4
 80042cc:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 80042ce:	f7ff fff5 	bl	80042bc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80042d2:	2301      	movs	r3, #1
 80042d4:	7123      	strb	r3, [r4, #4]
}
 80042d6:	bd10      	pop	{r4, pc}

080042d8 <HAL_DAC_DMAUnderrunCallbackCh1>:
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop

080042dc <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80042dc:	6803      	ldr	r3, [r0, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	0491      	lsls	r1, r2, #18
{
 80042e2:	b510      	push	{r4, lr}
 80042e4:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80042e6:	d502      	bpl.n	80042ee <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80042e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ea:	0492      	lsls	r2, r2, #18
 80042ec:	d418      	bmi.n	8004320 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	0091      	lsls	r1, r2, #2
 80042f2:	d502      	bpl.n	80042fa <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80042f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f6:	0092      	lsls	r2, r2, #2
 80042f8:	d400      	bmi.n	80042fc <HAL_DAC_IRQHandler+0x20>
}
 80042fa:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 80042fc:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80042fe:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004302:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8004304:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004306:	6922      	ldr	r2, [r4, #16]
 8004308:	f042 0202 	orr.w	r2, r2, #2
 800430c:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800430e:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8004316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800431a:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800431c:	f000 b8dc 	b.w	80044d8 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8004320:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8004326:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004328:	6902      	ldr	r2, [r0, #16]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004330:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004338:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800433a:	f7ff ffcd 	bl	80042d8 <HAL_DAC_DMAUnderrunCallbackCh1>
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	e7d5      	b.n	80042ee <HAL_DAC_IRQHandler+0x12>
 8004342:	bf00      	nop

08004344 <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 8004344:	7943      	ldrb	r3, [r0, #5]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d057      	beq.n	80043fa <HAL_DAC_ConfigChannel+0xb6>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800434a:	680b      	ldr	r3, [r1, #0]
{
 800434c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004350:	2b04      	cmp	r3, #4
 8004352:	4617      	mov	r7, r2
 8004354:	460e      	mov	r6, r1
  hdac->State = HAL_DAC_STATE_BUSY;
 8004356:	f04f 0202 	mov.w	r2, #2
  __HAL_LOCK(hdac);
 800435a:	f04f 0101 	mov.w	r1, #1
 800435e:	4604      	mov	r4, r0
  hdac->State = HAL_DAC_STATE_BUSY;
 8004360:	7102      	strb	r2, [r0, #4]
  __HAL_LOCK(hdac);
 8004362:	7141      	strb	r1, [r0, #5]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004364:	d04d      	beq.n	8004402 <HAL_DAC_ConfigChannel+0xbe>
 8004366:	f007 0210 	and.w	r2, r7, #16
 800436a:	6805      	ldr	r5, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800436c:	6931      	ldr	r1, [r6, #16]
 800436e:	2901      	cmp	r1, #1
 8004370:	d039      	beq.n	80043e6 <HAL_DAC_ConfigChannel+0xa2>
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004372:	2107      	movs	r1, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004374:	68f0      	ldr	r0, [r6, #12]
  tmpreg1 = hdac->Instance->MCR;
 8004376:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800437a:	4091      	lsls	r1, r2
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800437c:	2801      	cmp	r0, #1
 800437e:	68b7      	ldr	r7, [r6, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004380:	ea2c 0101 	bic.w	r1, ip, r1
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004384:	d02d      	beq.n	80043e2 <HAL_DAC_ConfigChannel+0x9e>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004386:	2802      	cmp	r0, #2
 8004388:	d039      	beq.n	80043fe <HAL_DAC_ConfigChannel+0xba>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800438a:	fab7 f087 	clz	r0, r7
 800438e:	0940      	lsrs	r0, r0, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004390:	433b      	orrs	r3, r7
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004392:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004396:	6876      	ldr	r6, [r6, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004398:	f640 77fe 	movw	r7, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800439c:	4303      	orrs	r3, r0
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800439e:	fa08 f802 	lsl.w	r8, r8, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80043a2:	4097      	lsls	r7, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043a4:	4096      	lsls	r6, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043a6:	4093      	lsls	r3, r2
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80043a8:	20c0      	movs	r0, #192	; 0xc0
  __HAL_UNLOCK(hdac);
 80043aa:	f04f 0c00 	mov.w	ip, #0
  hdac->State = HAL_DAC_STATE_READY;
 80043ae:	f04f 0e01 	mov.w	lr, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043b2:	430b      	orrs	r3, r1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80043b4:	fa00 f102 	lsl.w	r1, r0, r2
  return HAL_OK;
 80043b8:	4660      	mov	r0, ip
  hdac->Instance->MCR = tmpreg1;
 80043ba:	63eb      	str	r3, [r5, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80043bc:	682b      	ldr	r3, [r5, #0]
 80043be:	ea23 0308 	bic.w	r3, r3, r8
 80043c2:	602b      	str	r3, [r5, #0]
  tmpreg1 = hdac->Instance->CR;
 80043c4:	682b      	ldr	r3, [r5, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80043c6:	ea23 0307 	bic.w	r3, r3, r7
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043ca:	4333      	orrs	r3, r6
  hdac->Instance->CR = tmpreg1;
 80043cc:	602b      	str	r3, [r5, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80043ce:	682a      	ldr	r2, [r5, #0]
 80043d0:	ea22 0201 	bic.w	r2, r2, r1
 80043d4:	602a      	str	r2, [r5, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80043d6:	f884 e004 	strb.w	lr, [r4, #4]
  __HAL_UNLOCK(hdac);
 80043da:	f884 c005 	strb.w	ip, [r4, #5]
}
 80043de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 80043e2:	2000      	movs	r0, #0
 80043e4:	e7d4      	b.n	8004390 <HAL_DAC_ConfigChannel+0x4c>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80043e6:	271f      	movs	r7, #31
    tmpreg1 = hdac->Instance->CCR;
 80043e8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043ea:	6971      	ldr	r1, [r6, #20]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80043ec:	4097      	lsls	r7, r2
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043ee:	4091      	lsls	r1, r2
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80043f0:	ea20 0007 	bic.w	r0, r0, r7
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043f4:	4301      	orrs	r1, r0
    hdac->Instance->CCR = tmpreg1;
 80043f6:	63a9      	str	r1, [r5, #56]	; 0x38
 80043f8:	e7bb      	b.n	8004372 <HAL_DAC_ConfigChannel+0x2e>
  __HAL_LOCK(hdac);
 80043fa:	2002      	movs	r0, #2
}
 80043fc:	4770      	bx	lr
    connectOnChip = DAC_MCR_MODE1_0;
 80043fe:	2001      	movs	r0, #1
 8004400:	e7c6      	b.n	8004390 <HAL_DAC_ConfigChannel+0x4c>
    tickstart = HAL_GetTick();
 8004402:	f7fe ffe7 	bl	80033d4 <HAL_GetTick>
 8004406:	4605      	mov	r5, r0
    if (Channel == DAC_CHANNEL_1)
 8004408:	b9c7      	cbnz	r7, 800443c <HAL_DAC_ConfigChannel+0xf8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800440a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8004494 <HAL_DAC_ConfigChannel+0x150>
 800440e:	e004      	b.n	800441a <HAL_DAC_ConfigChannel+0xd6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004410:	f7fe ffe0 	bl	80033d4 <HAL_GetTick>
 8004414:	1b40      	subs	r0, r0, r5
 8004416:	2801      	cmp	r0, #1
 8004418:	d833      	bhi.n	8004482 <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441e:	ea13 0f08 	tst.w	r3, r8
 8004422:	d1f5      	bne.n	8004410 <HAL_DAC_ConfigChannel+0xcc>
      HAL_Delay(1);
 8004424:	2001      	movs	r0, #1
 8004426:	f7fe ffdb 	bl	80033e0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800442a:	6825      	ldr	r5, [r4, #0]
 800442c:	69b3      	ldr	r3, [r6, #24]
 800442e:	642b      	str	r3, [r5, #64]	; 0x40
 8004430:	e00e      	b.n	8004450 <HAL_DAC_ConfigChannel+0x10c>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004432:	f7fe ffcf 	bl	80033d4 <HAL_GetTick>
 8004436:	1b40      	subs	r0, r0, r5
 8004438:	2801      	cmp	r0, #1
 800443a:	d822      	bhi.n	8004482 <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004440:	2b00      	cmp	r3, #0
 8004442:	dbf6      	blt.n	8004432 <HAL_DAC_ConfigChannel+0xee>
      HAL_Delay(1U);
 8004444:	2001      	movs	r0, #1
 8004446:	f7fe ffcb 	bl	80033e0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800444a:	6825      	ldr	r5, [r4, #0]
 800444c:	69b3      	ldr	r3, [r6, #24]
 800444e:	646b      	str	r3, [r5, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004450:	f007 0210 	and.w	r2, r7, #16
 8004454:	f240 3cff 	movw	ip, #1023	; 0x3ff
 8004458:	6cab      	ldr	r3, [r5, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800445a:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800445c:	69f0      	ldr	r0, [r6, #28]
 800445e:	fa0c fc02 	lsl.w	ip, ip, r2
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004462:	fa01 f702 	lsl.w	r7, r1, r2
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004466:	4090      	lsls	r0, r2
 8004468:	ea23 030c 	bic.w	r3, r3, ip
 800446c:	4303      	orrs	r3, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800446e:	6a30      	ldr	r0, [r6, #32]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004470:	64ab      	str	r3, [r5, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004472:	4090      	lsls	r0, r2
 8004474:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8004476:	6833      	ldr	r3, [r6, #0]
 8004478:	ea21 0107 	bic.w	r1, r1, r7
 800447c:	4301      	orrs	r1, r0
 800447e:	64e9      	str	r1, [r5, #76]	; 0x4c
 8004480:	e774      	b.n	800436c <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004482:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004484:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004486:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 800448a:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800448c:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800448e:	7122      	strb	r2, [r4, #4]
          return HAL_TIMEOUT;
 8004490:	e7a5      	b.n	80043de <HAL_DAC_ConfigChannel+0x9a>
 8004492:	bf00      	nop
 8004494:	20008000 	.word	0x20008000

08004498 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop

0800449c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800449c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800449e:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80044a0:	4620      	mov	r0, r4
 80044a2:	f7ff fff9 	bl	8004498 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80044a6:	2301      	movs	r3, #1
 80044a8:	7123      	strb	r3, [r4, #4]
}
 80044aa:	bd10      	pop	{r4, pc}

080044ac <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop

080044b0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80044b0:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80044b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80044b4:	f7ff fffa 	bl	80044ac <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80044b8:	bd08      	pop	{r3, pc}
 80044ba:	bf00      	nop

080044bc <HAL_DACEx_ErrorCallbackCh2>:
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop

080044c0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80044c0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044c2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80044c4:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80044c6:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80044c8:	f043 0304 	orr.w	r3, r3, #4
 80044cc:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80044ce:	f7ff fff5 	bl	80044bc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80044d2:	2301      	movs	r3, #1
 80044d4:	7123      	strb	r3, [r4, #4]
}
 80044d6:	bd10      	pop	{r4, pc}

080044d8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop

080044dc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044dc:	6802      	ldr	r2, [r0, #0]
{
 80044de:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044e0:	4b34      	ldr	r3, [pc, #208]	; (80045b4 <DMA_CalcBaseAndBitshift+0xd8>)
 80044e2:	4835      	ldr	r0, [pc, #212]	; (80045b8 <DMA_CalcBaseAndBitshift+0xdc>)
{
 80044e4:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044e6:	4c35      	ldr	r4, [pc, #212]	; (80045bc <DMA_CalcBaseAndBitshift+0xe0>)
 80044e8:	4d35      	ldr	r5, [pc, #212]	; (80045c0 <DMA_CalcBaseAndBitshift+0xe4>)
 80044ea:	42a2      	cmp	r2, r4
 80044ec:	bf18      	it	ne
 80044ee:	429a      	cmpne	r2, r3
 80044f0:	f104 0448 	add.w	r4, r4, #72	; 0x48
 80044f4:	bf0c      	ite	eq
 80044f6:	2301      	moveq	r3, #1
 80044f8:	2300      	movne	r3, #0
 80044fa:	4282      	cmp	r2, r0
 80044fc:	bf08      	it	eq
 80044fe:	f043 0301 	orreq.w	r3, r3, #1
 8004502:	3048      	adds	r0, #72	; 0x48
 8004504:	42aa      	cmp	r2, r5
 8004506:	bf08      	it	eq
 8004508:	f043 0301 	orreq.w	r3, r3, #1
 800450c:	3548      	adds	r5, #72	; 0x48
 800450e:	42a2      	cmp	r2, r4
 8004510:	bf08      	it	eq
 8004512:	f043 0301 	orreq.w	r3, r3, #1
 8004516:	3448      	adds	r4, #72	; 0x48
 8004518:	4282      	cmp	r2, r0
 800451a:	bf08      	it	eq
 800451c:	f043 0301 	orreq.w	r3, r3, #1
 8004520:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8004524:	42aa      	cmp	r2, r5
 8004526:	bf08      	it	eq
 8004528:	f043 0301 	orreq.w	r3, r3, #1
 800452c:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8004530:	42a2      	cmp	r2, r4
 8004532:	bf08      	it	eq
 8004534:	f043 0301 	orreq.w	r3, r3, #1
 8004538:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800453c:	4282      	cmp	r2, r0
 800453e:	bf08      	it	eq
 8004540:	f043 0301 	orreq.w	r3, r3, #1
 8004544:	3048      	adds	r0, #72	; 0x48
 8004546:	42aa      	cmp	r2, r5
 8004548:	bf08      	it	eq
 800454a:	f043 0301 	orreq.w	r3, r3, #1
 800454e:	3548      	adds	r5, #72	; 0x48
 8004550:	42a2      	cmp	r2, r4
 8004552:	bf08      	it	eq
 8004554:	f043 0301 	orreq.w	r3, r3, #1
 8004558:	3448      	adds	r4, #72	; 0x48
 800455a:	4282      	cmp	r2, r0
 800455c:	bf08      	it	eq
 800455e:	f043 0301 	orreq.w	r3, r3, #1
 8004562:	3048      	adds	r0, #72	; 0x48
 8004564:	42aa      	cmp	r2, r5
 8004566:	bf08      	it	eq
 8004568:	f043 0301 	orreq.w	r3, r3, #1
 800456c:	42a2      	cmp	r2, r4
 800456e:	bf08      	it	eq
 8004570:	f043 0301 	orreq.w	r3, r3, #1
 8004574:	4282      	cmp	r2, r0
 8004576:	bf08      	it	eq
 8004578:	f043 0301 	orreq.w	r3, r3, #1
 800457c:	b913      	cbnz	r3, 8004584 <DMA_CalcBaseAndBitshift+0xa8>
 800457e:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <DMA_CalcBaseAndBitshift+0xe8>)
 8004580:	429a      	cmp	r2, r3
 8004582:	d112      	bne.n	80045aa <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004584:	b2d3      	uxtb	r3, r2
 8004586:	4d10      	ldr	r5, [pc, #64]	; (80045c8 <DMA_CalcBaseAndBitshift+0xec>)
 8004588:	4810      	ldr	r0, [pc, #64]	; (80045cc <DMA_CalcBaseAndBitshift+0xf0>)
 800458a:	3b10      	subs	r3, #16

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800458c:	4c10      	ldr	r4, [pc, #64]	; (80045d0 <DMA_CalcBaseAndBitshift+0xf4>)
 800458e:	4010      	ands	r0, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004590:	fba5 5303 	umull	r5, r3, r5, r3
 8004594:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004596:	f003 0207 	and.w	r2, r3, #7

    if (stream_number > 3U)
 800459a:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800459c:	5ca2      	ldrb	r2, [r4, r2]
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800459e:	bf88      	it	hi
 80045a0:	3004      	addhi	r0, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80045a2:	65ca      	str	r2, [r1, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80045a4:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 80045a6:	bc30      	pop	{r4, r5}
 80045a8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80045aa:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 80045ae:	6588      	str	r0, [r1, #88]	; 0x58
 80045b0:	e7f9      	b.n	80045a6 <DMA_CalcBaseAndBitshift+0xca>
 80045b2:	bf00      	nop
 80045b4:	40020010 	.word	0x40020010
 80045b8:	40020040 	.word	0x40020040
 80045bc:	40020028 	.word	0x40020028
 80045c0:	40020058 	.word	0x40020058
 80045c4:	400204b8 	.word	0x400204b8
 80045c8:	aaaaaaab 	.word	0xaaaaaaab
 80045cc:	fffffc00 	.word	0xfffffc00
 80045d0:	0800fcb8 	.word	0x0800fcb8

080045d4 <HAL_DMA_Init>:
{
 80045d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045d8:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80045da:	f7fe fefb 	bl	80033d4 <HAL_GetTick>
  if(hdma == NULL)
 80045de:	2c00      	cmp	r4, #0
 80045e0:	f000 8182 	beq.w	80048e8 <HAL_DMA_Init+0x314>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	4605      	mov	r5, r0
 80045e8:	4a2b      	ldr	r2, [pc, #172]	; (8004698 <HAL_DMA_Init+0xc4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d049      	beq.n	8004682 <HAL_DMA_Init+0xae>
 80045ee:	3218      	adds	r2, #24
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d046      	beq.n	8004682 <HAL_DMA_Init+0xae>
 80045f4:	3230      	adds	r2, #48	; 0x30
 80045f6:	4829      	ldr	r0, [pc, #164]	; (800469c <HAL_DMA_Init+0xc8>)
 80045f8:	4929      	ldr	r1, [pc, #164]	; (80046a0 <HAL_DMA_Init+0xcc>)
 80045fa:	4283      	cmp	r3, r0
 80045fc:	bf18      	it	ne
 80045fe:	4293      	cmpne	r3, r2
 8004600:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8004604:	bf0c      	ite	eq
 8004606:	2201      	moveq	r2, #1
 8004608:	2200      	movne	r2, #0
 800460a:	428b      	cmp	r3, r1
 800460c:	bf08      	it	eq
 800460e:	f042 0201 	orreq.w	r2, r2, #1
 8004612:	3130      	adds	r1, #48	; 0x30
 8004614:	4283      	cmp	r3, r0
 8004616:	bf08      	it	eq
 8004618:	f042 0201 	orreq.w	r2, r2, #1
 800461c:	3030      	adds	r0, #48	; 0x30
 800461e:	428b      	cmp	r3, r1
 8004620:	bf08      	it	eq
 8004622:	f042 0201 	orreq.w	r2, r2, #1
 8004626:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800462a:	4283      	cmp	r3, r0
 800462c:	bf08      	it	eq
 800462e:	f042 0201 	orreq.w	r2, r2, #1
 8004632:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004636:	428b      	cmp	r3, r1
 8004638:	bf08      	it	eq
 800463a:	f042 0201 	orreq.w	r2, r2, #1
 800463e:	3130      	adds	r1, #48	; 0x30
 8004640:	4283      	cmp	r3, r0
 8004642:	bf08      	it	eq
 8004644:	f042 0201 	orreq.w	r2, r2, #1
 8004648:	3030      	adds	r0, #48	; 0x30
 800464a:	428b      	cmp	r3, r1
 800464c:	bf08      	it	eq
 800464e:	f042 0201 	orreq.w	r2, r2, #1
 8004652:	3130      	adds	r1, #48	; 0x30
 8004654:	4283      	cmp	r3, r0
 8004656:	bf08      	it	eq
 8004658:	f042 0201 	orreq.w	r2, r2, #1
 800465c:	3030      	adds	r0, #48	; 0x30
 800465e:	428b      	cmp	r3, r1
 8004660:	bf08      	it	eq
 8004662:	f042 0201 	orreq.w	r2, r2, #1
 8004666:	3130      	adds	r1, #48	; 0x30
 8004668:	4283      	cmp	r3, r0
 800466a:	bf08      	it	eq
 800466c:	f042 0201 	orreq.w	r2, r2, #1
 8004670:	428b      	cmp	r3, r1
 8004672:	bf08      	it	eq
 8004674:	f042 0201 	orreq.w	r2, r2, #1
 8004678:	b91a      	cbnz	r2, 8004682 <HAL_DMA_Init+0xae>
 800467a:	4a0a      	ldr	r2, [pc, #40]	; (80046a4 <HAL_DMA_Init+0xd0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	f040 81bf 	bne.w	8004a00 <HAL_DMA_Init+0x42c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004682:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8004684:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004686:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800468a:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 800468c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8004690:	f022 0201 	bic.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	e00e      	b.n	80046b6 <HAL_DMA_Init+0xe2>
 8004698:	40020010 	.word	0x40020010
 800469c:	40020040 	.word	0x40020040
 80046a0:	40020070 	.word	0x40020070
 80046a4:	400204b8 	.word	0x400204b8
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046a8:	f7fe fe94 	bl	80033d4 <HAL_GetTick>
 80046ac:	1b40      	subs	r0, r0, r5
 80046ae:	2805      	cmp	r0, #5
 80046b0:	f200 8112 	bhi.w	80048d8 <HAL_DMA_Init+0x304>
 80046b4:	6823      	ldr	r3, [r4, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	07d6      	lsls	r6, r2, #31
 80046ba:	d4f5      	bmi.n	80046a8 <HAL_DMA_Init+0xd4>
    registerValue |=  hdma->Init.Direction           |
 80046bc:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046c0:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 80046c2:	430a      	orrs	r2, r1
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80046c4:	681f      	ldr	r7, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046c6:	e9d4 6105 	ldrd	r6, r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ca:	4302      	orrs	r2, r0
 80046cc:	4332      	orrs	r2, r6
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046ce:	4eb5      	ldr	r6, [pc, #724]	; (80049a4 <HAL_DMA_Init+0x3d0>)
            hdma->Init.Mode                | hdma->Init.Priority;
 80046d0:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d4:	430a      	orrs	r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046d6:	403e      	ands	r6, r7
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d8:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046da:	6a65      	ldr	r5, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 80046dc:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046de:	2d04      	cmp	r5, #4
    registerValue |=  hdma->Init.Direction           |
 80046e0:	ea42 0206 	orr.w	r2, r2, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046e4:	f000 8103 	beq.w	80048ee <HAL_DMA_Init+0x31a>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80046e8:	4eaf      	ldr	r6, [pc, #700]	; (80049a8 <HAL_DMA_Init+0x3d4>)
 80046ea:	48b0      	ldr	r0, [pc, #704]	; (80049ac <HAL_DMA_Init+0x3d8>)
 80046ec:	6836      	ldr	r6, [r6, #0]
 80046ee:	4030      	ands	r0, r6
 80046f0:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 80046f4:	f080 8108 	bcs.w	8004908 <HAL_DMA_Init+0x334>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80046f8:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80046fa:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046fc:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8004700:	432a      	orrs	r2, r5
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004702:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004704:	4620      	mov	r0, r4
 8004706:	f7ff fee9 	bl	80044dc <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800470a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800470c:	233f      	movs	r3, #63	; 0x3f
 800470e:	f002 021f 	and.w	r2, r2, #31
 8004712:	4093      	lsls	r3, r2
 8004714:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004716:	6822      	ldr	r2, [r4, #0]
 8004718:	4ba5      	ldr	r3, [pc, #660]	; (80049b0 <HAL_DMA_Init+0x3dc>)
 800471a:	48a6      	ldr	r0, [pc, #664]	; (80049b4 <HAL_DMA_Init+0x3e0>)
 800471c:	49a6      	ldr	r1, [pc, #664]	; (80049b8 <HAL_DMA_Init+0x3e4>)
 800471e:	4282      	cmp	r2, r0
 8004720:	bf18      	it	ne
 8004722:	429a      	cmpne	r2, r3
 8004724:	4ea5      	ldr	r6, [pc, #660]	; (80049bc <HAL_DMA_Init+0x3e8>)
 8004726:	4da6      	ldr	r5, [pc, #664]	; (80049c0 <HAL_DMA_Init+0x3ec>)
 8004728:	f100 0060 	add.w	r0, r0, #96	; 0x60
 800472c:	bf0c      	ite	eq
 800472e:	2301      	moveq	r3, #1
 8004730:	2300      	movne	r3, #0
 8004732:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 80049ec <HAL_DMA_Init+0x418>
 8004736:	428a      	cmp	r2, r1
 8004738:	bf08      	it	eq
 800473a:	f043 0301 	orreq.w	r3, r3, #1
 800473e:	3160      	adds	r1, #96	; 0x60
 8004740:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 80049f0 <HAL_DMA_Init+0x41c>
 8004744:	42b2      	cmp	r2, r6
 8004746:	bf08      	it	eq
 8004748:	f043 0301 	orreq.w	r3, r3, #1
 800474c:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 80049f4 <HAL_DMA_Init+0x420>
 8004750:	4f9c      	ldr	r7, [pc, #624]	; (80049c4 <HAL_DMA_Init+0x3f0>)
 8004752:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004756:	42aa      	cmp	r2, r5
 8004758:	bf08      	it	eq
 800475a:	f043 0301 	orreq.w	r3, r3, #1
 800475e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004762:	f8df a284 	ldr.w	sl, [pc, #644]	; 80049e8 <HAL_DMA_Init+0x414>
 8004766:	4282      	cmp	r2, r0
 8004768:	bf08      	it	eq
 800476a:	f043 0301 	orreq.w	r3, r3, #1
 800476e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004772:	f8df 9284 	ldr.w	r9, [pc, #644]	; 80049f8 <HAL_DMA_Init+0x424>
 8004776:	428a      	cmp	r2, r1
 8004778:	bf08      	it	eq
 800477a:	f043 0301 	orreq.w	r3, r3, #1
 800477e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004782:	4562      	cmp	r2, ip
 8004784:	bf08      	it	eq
 8004786:	f043 0301 	orreq.w	r3, r3, #1
 800478a:	f8df c254 	ldr.w	ip, [pc, #596]	; 80049e0 <HAL_DMA_Init+0x40c>
 800478e:	4542      	cmp	r2, r8
 8004790:	bf08      	it	eq
 8004792:	f043 0301 	orreq.w	r3, r3, #1
 8004796:	eba2 0c0c 	sub.w	ip, r2, ip
 800479a:	f8df 8248 	ldr.w	r8, [pc, #584]	; 80049e4 <HAL_DMA_Init+0x410>
 800479e:	4572      	cmp	r2, lr
 80047a0:	bf08      	it	eq
 80047a2:	f043 0301 	orreq.w	r3, r3, #1
 80047a6:	fabc fc8c 	clz	ip, ip
 80047aa:	eba2 0808 	sub.w	r8, r2, r8
 80047ae:	f8df e24c 	ldr.w	lr, [pc, #588]	; 80049fc <HAL_DMA_Init+0x428>
 80047b2:	42ba      	cmp	r2, r7
 80047b4:	bf08      	it	eq
 80047b6:	f043 0301 	orreq.w	r3, r3, #1
 80047ba:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80047be:	eba2 070a 	sub.w	r7, r2, sl
 80047c2:	fab8 f888 	clz	r8, r8
 80047c6:	42b2      	cmp	r2, r6
 80047c8:	bf08      	it	eq
 80047ca:	f043 0301 	orreq.w	r3, r3, #1
 80047ce:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 80047d2:	eba2 060e 	sub.w	r6, r2, lr
 80047d6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80047da:	42aa      	cmp	r2, r5
 80047dc:	bf08      	it	eq
 80047de:	f043 0301 	orreq.w	r3, r3, #1
 80047e2:	fab7 f787 	clz	r7, r7
 80047e6:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 80047ea:	eba2 050a 	sub.w	r5, r2, sl
 80047ee:	4282      	cmp	r2, r0
 80047f0:	bf08      	it	eq
 80047f2:	f043 0301 	orreq.w	r3, r3, #1
 80047f6:	097f      	lsrs	r7, r7, #5
 80047f8:	fab6 f686 	clz	r6, r6
 80047fc:	eba2 000e 	sub.w	r0, r2, lr
 8004800:	428a      	cmp	r2, r1
 8004802:	bf08      	it	eq
 8004804:	f043 0301 	orreq.w	r3, r3, #1
 8004808:	fab5 f585 	clz	r5, r5
 800480c:	0976      	lsrs	r6, r6, #5
 800480e:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 8004812:	454a      	cmp	r2, r9
 8004814:	bf08      	it	eq
 8004816:	f043 0301 	orreq.w	r3, r3, #1
 800481a:	096d      	lsrs	r5, r5, #5
 800481c:	fab0 f080 	clz	r0, r0
 8004820:	eba2 010a 	sub.w	r1, r2, sl
 8004824:	ea4c 0303 	orr.w	r3, ip, r3
 8004828:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800482c:	0940      	lsrs	r0, r0, #5
 800482e:	fab1 f181 	clz	r1, r1
 8004832:	ea48 0303 	orr.w	r3, r8, r3
 8004836:	eba2 0e0e 	sub.w	lr, r2, lr
 800483a:	0949      	lsrs	r1, r1, #5
 800483c:	433b      	orrs	r3, r7
 800483e:	fabe fe8e 	clz	lr, lr
 8004842:	4333      	orrs	r3, r6
 8004844:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8004848:	432b      	orrs	r3, r5
 800484a:	4303      	orrs	r3, r0
 800484c:	430b      	orrs	r3, r1
 800484e:	d102      	bne.n	8004856 <HAL_DMA_Init+0x282>
 8004850:	f1be 0f00 	cmp.w	lr, #0
 8004854:	d039      	beq.n	80048ca <HAL_DMA_Init+0x2f6>
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004856:	ea4c 0c08 	orr.w	ip, ip, r8
 800485a:	b2d3      	uxtb	r3, r2
 800485c:	ea47 070c 	orr.w	r7, r7, ip
 8004860:	433e      	orrs	r6, r7
 8004862:	4335      	orrs	r5, r6
 8004864:	4328      	orrs	r0, r5
 8004866:	4301      	orrs	r1, r0
 8004868:	ea5e 0101 	orrs.w	r1, lr, r1
 800486c:	f000 8127 	beq.w	8004abe <HAL_DMA_Init+0x4ea>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004870:	4d55      	ldr	r5, [pc, #340]	; (80049c8 <HAL_DMA_Init+0x3f4>)
 8004872:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004874:	4a55      	ldr	r2, [pc, #340]	; (80049cc <HAL_DMA_Init+0x3f8>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004876:	2001      	movs	r0, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004878:	fba5 5303 	umull	r5, r3, r5, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800487c:	4d54      	ldr	r5, [pc, #336]	; (80049d0 <HAL_DMA_Init+0x3fc>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800487e:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004880:	6665      	str	r5, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004882:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004884:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004888:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800488a:	fa00 f303 	lsl.w	r3, r0, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800488e:	6622      	str	r2, [r4, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004890:	66a3      	str	r3, [r4, #104]	; 0x68
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004892:	68a0      	ldr	r0, [r4, #8]
 8004894:	2880      	cmp	r0, #128	; 0x80
 8004896:	d069      	beq.n	800496c <HAL_DMA_Init+0x398>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004898:	6860      	ldr	r0, [r4, #4]
 800489a:	b2c6      	uxtb	r6, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800489c:	3801      	subs	r0, #1
 800489e:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048a0:	6016      	str	r6, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048a2:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80048a4:	d866      	bhi.n	8004974 <HAL_DMA_Init+0x3a0>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80048a6:	1e70      	subs	r0, r6, #1
 80048a8:	2807      	cmp	r0, #7
 80048aa:	d868      	bhi.n	800497e <HAL_DMA_Init+0x3aa>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048ac:	2900      	cmp	r1, #0
 80048ae:	f000 8133 	beq.w	8004b18 <HAL_DMA_Init+0x544>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80048b2:	4b48      	ldr	r3, [pc, #288]	; (80049d4 <HAL_DMA_Init+0x400>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80048b4:	4948      	ldr	r1, [pc, #288]	; (80049d8 <HAL_DMA_Init+0x404>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80048b6:	4433      	add	r3, r6
 80048b8:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80048ba:	2201      	movs	r2, #1
 80048bc:	4082      	lsls	r2, r0
 80048be:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 80048c2:	6762      	str	r2, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80048c4:	2000      	movs	r0, #0
 80048c6:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048c8:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048ca:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80048cc:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048ce:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80048d0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80048d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048d8:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80048da:	2303      	movs	r3, #3
        return HAL_ERROR;
 80048dc:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048de:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80048e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80048e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 80048e8:	2001      	movs	r0, #1
}
 80048ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80048ee:	482e      	ldr	r0, [pc, #184]	; (80049a8 <HAL_DMA_Init+0x3d4>)
 80048f0:	4e2e      	ldr	r6, [pc, #184]	; (80049ac <HAL_DMA_Init+0x3d8>)
 80048f2:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80048f6:	403e      	ands	r6, r7
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048f8:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80048fa:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048fe:	ea40 0707 	orr.w	r7, r0, r7
 8004902:	ea42 0207 	orr.w	r2, r2, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004906:	d346      	bcc.n	8004996 <HAL_DMA_Init+0x3c2>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004908:	6866      	ldr	r6, [r4, #4]
 800490a:	f1a6 0729 	sub.w	r7, r6, #41	; 0x29
 800490e:	2f1f      	cmp	r7, #31
 8004910:	d925      	bls.n	800495e <HAL_DMA_Init+0x38a>
 8004912:	3e4f      	subs	r6, #79	; 0x4f
 8004914:	2e03      	cmp	r6, #3
 8004916:	d926      	bls.n	8004966 <HAL_DMA_Init+0x392>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004918:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800491a:	2d04      	cmp	r5, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800491c:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800491e:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8004922:	ea42 0205 	orr.w	r2, r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004926:	f47f aeec 	bne.w	8004702 <HAL_DMA_Init+0x12e>
 800492a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800492c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800492e:	432a      	orrs	r2, r5
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004930:	2800      	cmp	r0, #0
 8004932:	f43f aee6 	beq.w	8004702 <HAL_DMA_Init+0x12e>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004936:	b331      	cbz	r1, 8004986 <HAL_DMA_Init+0x3b2>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004938:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800493c:	f000 80dd 	beq.w	8004afa <HAL_DMA_Init+0x526>
    switch (hdma->Init.FIFOThreshold)
 8004940:	2d02      	cmp	r5, #2
 8004942:	d905      	bls.n	8004950 <HAL_DMA_Init+0x37c>
 8004944:	2d03      	cmp	r5, #3
 8004946:	f47f aedc 	bne.w	8004702 <HAL_DMA_Init+0x12e>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800494a:	01c1      	lsls	r1, r0, #7
 800494c:	f57f aed9 	bpl.w	8004702 <HAL_DMA_Init+0x12e>
          hdma->State = HAL_DMA_STATE_READY;
 8004950:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004952:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8004954:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004956:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8004958:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          return HAL_ERROR;
 800495c:	e7c2      	b.n	80048e4 <HAL_DMA_Init+0x310>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800495e:	481f      	ldr	r0, [pc, #124]	; (80049dc <HAL_DMA_Init+0x408>)
 8004960:	40f8      	lsrs	r0, r7
 8004962:	07c0      	lsls	r0, r0, #31
 8004964:	d5d5      	bpl.n	8004912 <HAL_DMA_Init+0x33e>
        registerValue |= DMA_SxCR_TRBUFF;
 8004966:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800496a:	e7d5      	b.n	8004918 <HAL_DMA_Init+0x344>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800496c:	2100      	movs	r1, #0
 800496e:	6061      	str	r1, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004970:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004972:	606b      	str	r3, [r5, #4]
      hdma->DMAmuxRequestGen = 0U;
 8004974:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8004976:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800497a:	6763      	str	r3, [r4, #116]	; 0x74
 800497c:	e7a5      	b.n	80048ca <HAL_DMA_Init+0x2f6>
 800497e:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
 8004982:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004984:	e79e      	b.n	80048c4 <HAL_DMA_Init+0x2f0>
    switch (hdma->Init.FIFOThreshold)
 8004986:	2d01      	cmp	r5, #1
 8004988:	f000 80b2 	beq.w	8004af0 <HAL_DMA_Init+0x51c>
 800498c:	d3dd      	bcc.n	800494a <HAL_DMA_Init+0x376>
 800498e:	2d02      	cmp	r5, #2
 8004990:	f47f aeb7 	bne.w	8004702 <HAL_DMA_Init+0x12e>
 8004994:	e7d9      	b.n	800494a <HAL_DMA_Init+0x376>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004996:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004998:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800499a:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800499e:	f042 0204 	orr.w	r2, r2, #4
 80049a2:	e7c3      	b.n	800492c <HAL_DMA_Init+0x358>
 80049a4:	fe10803f 	.word	0xfe10803f
 80049a8:	5c001000 	.word	0x5c001000
 80049ac:	ffff0000 	.word	0xffff0000
 80049b0:	40020010 	.word	0x40020010
 80049b4:	40020028 	.word	0x40020028
 80049b8:	40020040 	.word	0x40020040
 80049bc:	40020058 	.word	0x40020058
 80049c0:	40020070 	.word	0x40020070
 80049c4:	40020440 	.word	0x40020440
 80049c8:	cccccccd 	.word	0xcccccccd
 80049cc:	16009600 	.word	0x16009600
 80049d0:	58025880 	.word	0x58025880
 80049d4:	1600963f 	.word	0x1600963f
 80049d8:	58025940 	.word	0x58025940
 80049dc:	c3c0003f 	.word	0xc3c0003f
 80049e0:	58025408 	.word	0x58025408
 80049e4:	5802541c 	.word	0x5802541c
 80049e8:	58025430 	.word	0x58025430
 80049ec:	400200b8 	.word	0x400200b8
 80049f0:	40020410 	.word	0x40020410
 80049f4:	40020428 	.word	0x40020428
 80049f8:	400204b8 	.word	0x400204b8
 80049fc:	58025444 	.word	0x58025444
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a00:	4a4c      	ldr	r2, [pc, #304]	; (8004b34 <HAL_DMA_Init+0x560>)
 8004a02:	494d      	ldr	r1, [pc, #308]	; (8004b38 <HAL_DMA_Init+0x564>)
 8004a04:	484d      	ldr	r0, [pc, #308]	; (8004b3c <HAL_DMA_Init+0x568>)
 8004a06:	428b      	cmp	r3, r1
 8004a08:	bf18      	it	ne
 8004a0a:	4293      	cmpne	r3, r2
 8004a0c:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8004a10:	4d4b      	ldr	r5, [pc, #300]	; (8004b40 <HAL_DMA_Init+0x56c>)
 8004a12:	bf0c      	ite	eq
 8004a14:	2201      	moveq	r2, #1
 8004a16:	2200      	movne	r2, #0
 8004a18:	4283      	cmp	r3, r0
 8004a1a:	bf08      	it	eq
 8004a1c:	f042 0201 	orreq.w	r2, r2, #1
 8004a20:	303c      	adds	r0, #60	; 0x3c
 8004a22:	428b      	cmp	r3, r1
 8004a24:	bf08      	it	eq
 8004a26:	f042 0201 	orreq.w	r2, r2, #1
 8004a2a:	313c      	adds	r1, #60	; 0x3c
 8004a2c:	42ab      	cmp	r3, r5
 8004a2e:	bf08      	it	eq
 8004a30:	f042 0201 	orreq.w	r2, r2, #1
 8004a34:	4283      	cmp	r3, r0
 8004a36:	bf08      	it	eq
 8004a38:	f042 0201 	orreq.w	r2, r2, #1
 8004a3c:	428b      	cmp	r3, r1
 8004a3e:	bf08      	it	eq
 8004a40:	f042 0201 	orreq.w	r2, r2, #1
 8004a44:	b912      	cbnz	r2, 8004a4c <HAL_DMA_Init+0x478>
 8004a46:	4a3f      	ldr	r2, [pc, #252]	; (8004b44 <HAL_DMA_Init+0x570>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d16c      	bne.n	8004b26 <HAL_DMA_Init+0x552>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a4c:	2002      	movs	r0, #2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a4e:	68a2      	ldr	r2, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004a50:	493d      	ldr	r1, [pc, #244]	; (8004b48 <HAL_DMA_Init+0x574>)
    __HAL_UNLOCK(hdma);
 8004a52:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a54:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a58:	2a40      	cmp	r2, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004a5a:	6818      	ldr	r0, [r3, #0]
    __HAL_UNLOCK(hdma);
 8004a5c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004a60:	ea01 0100 	and.w	r1, r1, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a64:	d05d      	beq.n	8004b22 <HAL_DMA_Init+0x54e>
 8004a66:	2a80      	cmp	r2, #128	; 0x80
 8004a68:	bf14      	ite	ne
 8004a6a:	462f      	movne	r7, r5
 8004a6c:	f44f 4780 	moveq.w	r7, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a70:	6922      	ldr	r2, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a72:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a74:	68e6      	ldr	r6, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a76:	08d2      	lsrs	r2, r2, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a78:	6965      	ldr	r5, [r4, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004a7a:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8004b68 <HAL_DMA_Init+0x594>
 8004a7e:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a82:	69a6      	ldr	r6, [r4, #24]
 8004a84:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a88:	69e5      	ldr	r5, [r4, #28]
 8004a8a:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004a8e:	4e2f      	ldr	r6, [pc, #188]	; (8004b4c <HAL_DMA_Init+0x578>)
 8004a90:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 8004a94:	441e      	add	r6, r3
 8004a96:	6a25      	ldr	r5, [r4, #32]
 8004a98:	ea42 1215 	orr.w	r2, r2, r5, lsr #4
 8004a9c:	fbac 5606 	umull	r5, r6, ip, r6
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	0931      	lsrs	r1, r6, #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004aa4:	433a      	orrs	r2, r7
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004aa6:	0089      	lsls	r1, r1, #2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004aa8:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004aaa:	65e1      	str	r1, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004aac:	f7ff fd16 	bl	80044dc <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ab0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	f002 021f 	and.w	r2, r2, #31
 8004ab8:	4093      	lsls	r3, r2
 8004aba:	6043      	str	r3, [r0, #4]
 8004abc:	e62b      	b.n	8004716 <HAL_DMA_Init+0x142>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004abe:	f1a3 0010 	sub.w	r0, r3, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ac2:	4b23      	ldr	r3, [pc, #140]	; (8004b50 <HAL_DMA_Init+0x57c>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ac4:	4d23      	ldr	r5, [pc, #140]	; (8004b54 <HAL_DMA_Init+0x580>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ac6:	4413      	add	r3, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ac8:	fba5 5000 	umull	r5, r0, r5, r0
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004acc:	2ba8      	cmp	r3, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ace:	ea4f 1010 	mov.w	r0, r0, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ad2:	d800      	bhi.n	8004ad6 <HAL_DMA_Init+0x502>
      stream_number += 8U;
 8004ad4:	3008      	adds	r0, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004ad6:	4a20      	ldr	r2, [pc, #128]	; (8004b58 <HAL_DMA_Init+0x584>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ad8:	f000 051f 	and.w	r5, r0, #31
 8004adc:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004ade:	4402      	add	r2, r0
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ae0:	481e      	ldr	r0, [pc, #120]	; (8004b5c <HAL_DMA_Init+0x588>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ae2:	40ab      	lsls	r3, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004ae4:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ae6:	4605      	mov	r5, r0
 8004ae8:	66a3      	str	r3, [r4, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004aea:	e9c4 2018 	strd	r2, r0, [r4, #96]	; 0x60
 8004aee:	e6d0      	b.n	8004892 <HAL_DMA_Init+0x2be>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004af0:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004af4:	f47f ae05 	bne.w	8004702 <HAL_DMA_Init+0x12e>
 8004af8:	e72a      	b.n	8004950 <HAL_DMA_Init+0x37c>
    switch (hdma->Init.FIFOThreshold)
 8004afa:	2d03      	cmp	r5, #3
 8004afc:	f63f ae01 	bhi.w	8004702 <HAL_DMA_Init+0x12e>
 8004b00:	a101      	add	r1, pc, #4	; (adr r1, 8004b08 <HAL_DMA_Init+0x534>)
 8004b02:	f851 f025 	ldr.w	pc, [r1, r5, lsl #2]
 8004b06:	bf00      	nop
 8004b08:	08004951 	.word	0x08004951
 8004b0c:	0800494b 	.word	0x0800494b
 8004b10:	08004951 	.word	0x08004951
 8004b14:	08004af1 	.word	0x08004af1
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b18:	4b11      	ldr	r3, [pc, #68]	; (8004b60 <HAL_DMA_Init+0x58c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b1a:	4912      	ldr	r1, [pc, #72]	; (8004b64 <HAL_DMA_Init+0x590>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b1c:	4433      	add	r3, r6
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	e6cb      	b.n	80048ba <HAL_DMA_Init+0x2e6>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b22:	2710      	movs	r7, #16
 8004b24:	e7a4      	b.n	8004a70 <HAL_DMA_Init+0x49c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b26:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004b28:	2303      	movs	r3, #3
    return HAL_ERROR;
 8004b2a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b2c:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004b2e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8004b32:	e6d7      	b.n	80048e4 <HAL_DMA_Init+0x310>
 8004b34:	58025408 	.word	0x58025408
 8004b38:	5802541c 	.word	0x5802541c
 8004b3c:	58025430 	.word	0x58025430
 8004b40:	58025458 	.word	0x58025458
 8004b44:	58025494 	.word	0x58025494
 8004b48:	fffe000f 	.word	0xfffe000f
 8004b4c:	a7fdabf8 	.word	0xa7fdabf8
 8004b50:	bffdfbf0 	.word	0xbffdfbf0
 8004b54:	aaaaaaab 	.word	0xaaaaaaab
 8004b58:	10008200 	.word	0x10008200
 8004b5c:	40020880 	.word	0x40020880
 8004b60:	1000823f 	.word	0x1000823f
 8004b64:	40020940 	.word	0x40020940
 8004b68:	cccccccd 	.word	0xcccccccd

08004b6c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	f000 8104 	beq.w	8004d7a <HAL_DMA_Start_IT+0x20e>
{
 8004b72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b76:	4605      	mov	r5, r0
  __HAL_LOCK(hdma);
 8004b78:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004b7c:	2801      	cmp	r0, #1
 8004b7e:	f000 8138 	beq.w	8004df2 <HAL_DMA_Start_IT+0x286>
 8004b82:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b84:	f895 4035 	ldrb.w	r4, [r5, #53]	; 0x35
 8004b88:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 8004b8a:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b8e:	d007      	beq.n	8004ba0 <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 8004b90:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004b92:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8004b96:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004b9a:	656b      	str	r3, [r5, #84]	; 0x54
}
 8004b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_DMA_DISABLE(hdma);
 8004ba0:	682c      	ldr	r4, [r5, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ba2:	f04f 0e02 	mov.w	lr, #2
    __HAL_DMA_DISABLE(hdma);
 8004ba6:	489b      	ldr	r0, [pc, #620]	; (8004e14 <HAL_DMA_Start_IT+0x2a8>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ba8:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE(hdma);
 8004bac:	4f9a      	ldr	r7, [pc, #616]	; (8004e18 <HAL_DMA_Start_IT+0x2ac>)
 8004bae:	4e9b      	ldr	r6, [pc, #620]	; (8004e1c <HAL_DMA_Start_IT+0x2b0>)
 8004bb0:	42bc      	cmp	r4, r7
 8004bb2:	bf18      	it	ne
 8004bb4:	4284      	cmpne	r4, r0
 8004bb6:	f107 0748 	add.w	r7, r7, #72	; 0x48
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bba:	f885 e035 	strb.w	lr, [r5, #53]	; 0x35
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2001      	moveq	r0, #1
 8004bc2:	2000      	movne	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8004bc4:	f8df e264 	ldr.w	lr, [pc, #612]	; 8004e2c <HAL_DMA_Start_IT+0x2c0>
 8004bc8:	42b4      	cmp	r4, r6
 8004bca:	bf08      	it	eq
 8004bcc:	f040 0001 	orreq.w	r0, r0, #1
 8004bd0:	3630      	adds	r6, #48	; 0x30
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bd2:	f8c5 c054 	str.w	ip, [r5, #84]	; 0x54
 8004bd6:	42bc      	cmp	r4, r7
 8004bd8:	bf08      	it	eq
 8004bda:	f040 0001 	orreq.w	r0, r0, #1
    __HAL_DMA_DISABLE(hdma);
 8004bde:	f507 7762 	add.w	r7, r7, #904	; 0x388
 8004be2:	f8df c24c 	ldr.w	ip, [pc, #588]	; 8004e30 <HAL_DMA_Start_IT+0x2c4>
 8004be6:	42b4      	cmp	r4, r6
 8004be8:	bf08      	it	eq
 8004bea:	f040 0001 	orreq.w	r0, r0, #1
 8004bee:	f506 7662 	add.w	r6, r6, #904	; 0x388
 8004bf2:	4574      	cmp	r4, lr
 8004bf4:	bf08      	it	eq
 8004bf6:	f040 0001 	orreq.w	r0, r0, #1
 8004bfa:	f50e 7e68 	add.w	lr, lr, #928	; 0x3a0
 8004bfe:	42bc      	cmp	r4, r7
 8004c00:	bf08      	it	eq
 8004c02:	f040 0001 	orreq.w	r0, r0, #1
 8004c06:	3760      	adds	r7, #96	; 0x60
 8004c08:	42b4      	cmp	r4, r6
 8004c0a:	bf08      	it	eq
 8004c0c:	f040 0001 	orreq.w	r0, r0, #1
 8004c10:	3660      	adds	r6, #96	; 0x60
 8004c12:	4564      	cmp	r4, ip
 8004c14:	bf08      	it	eq
 8004c16:	f040 0001 	orreq.w	r0, r0, #1
 8004c1a:	f10c 0c60 	add.w	ip, ip, #96	; 0x60
 8004c1e:	4574      	cmp	r4, lr
 8004c20:	bf08      	it	eq
 8004c22:	f040 0001 	orreq.w	r0, r0, #1
 8004c26:	f10e 0e60 	add.w	lr, lr, #96	; 0x60
 8004c2a:	42bc      	cmp	r4, r7
 8004c2c:	bf08      	it	eq
 8004c2e:	f040 0001 	orreq.w	r0, r0, #1
 8004c32:	f5a7 678c 	sub.w	r7, r7, #1120	; 0x460
 8004c36:	42b4      	cmp	r4, r6
 8004c38:	bf08      	it	eq
 8004c3a:	f040 0001 	orreq.w	r0, r0, #1
 8004c3e:	f5a6 668c 	sub.w	r6, r6, #1120	; 0x460
 8004c42:	4564      	cmp	r4, ip
 8004c44:	bf08      	it	eq
 8004c46:	f040 0001 	orreq.w	r0, r0, #1
 8004c4a:	f8d5 c058 	ldr.w	ip, [r5, #88]	; 0x58
 8004c4e:	4574      	cmp	r4, lr
 8004c50:	bf14      	ite	ne
 8004c52:	4682      	movne	sl, r0
 8004c54:	f040 0a01 	orreq.w	sl, r0, #1
 8004c58:	42b4      	cmp	r4, r6
 8004c5a:	bf18      	it	ne
 8004c5c:	42bc      	cmpne	r4, r7
 8004c5e:	6827      	ldr	r7, [r4, #0]
 8004c60:	bf0c      	ite	eq
 8004c62:	2601      	moveq	r6, #1
 8004c64:	2600      	movne	r6, #0
 8004c66:	f027 0701 	bic.w	r7, r7, #1
 8004c6a:	6027      	str	r7, [r4, #0]
 8004c6c:	d003      	beq.n	8004c76 <HAL_DMA_Start_IT+0x10a>
 8004c6e:	f1ba 0f00 	cmp.w	sl, #0
 8004c72:	f000 8084 	beq.w	8004d7e <HAL_DMA_Start_IT+0x212>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c76:	2e00      	cmp	r6, #0
 8004c78:	f000 8081 	beq.w	8004d7e <HAL_DMA_Start_IT+0x212>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c7c:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 8004c7e:	e9d5 0e1a 	ldrd	r0, lr, [r5, #104]	; 0x68
 8004c82:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004c84:	f1be 0f00 	cmp.w	lr, #0
 8004c88:	d007      	beq.n	8004c9a <HAL_DMA_Start_IT+0x12e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c8a:	e9d5 701c 	ldrd	r7, r0, [r5, #112]	; 0x70
 8004c8e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c90:	b91e      	cbnz	r6, 8004c9a <HAL_DMA_Start_IT+0x12e>
 8004c92:	f1ba 0f00 	cmp.w	sl, #0
 8004c96:	f000 80cd 	beq.w	8004e34 <HAL_DMA_Start_IT+0x2c8>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c9a:	6def      	ldr	r7, [r5, #92]	; 0x5c
 8004c9c:	f04f 093f 	mov.w	r9, #63	; 0x3f
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ca0:	f8d5 8008 	ldr.w	r8, [r5, #8]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ca4:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ca8:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cac:	fa09 f707 	lsl.w	r7, r9, r7
 8004cb0:	f8cc 7008 	str.w	r7, [ip, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004cb4:	6827      	ldr	r7, [r4, #0]
 8004cb6:	f427 2780 	bic.w	r7, r7, #262144	; 0x40000
 8004cba:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004cbc:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cbe:	f000 80a5 	beq.w	8004e0c <HAL_DMA_Start_IT+0x2a0>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004cc2:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004cc4:	60e2      	str	r2, [r4, #12]
 8004cc6:	6c2f      	ldr	r7, [r5, #64]	; 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cc8:	2e00      	cmp	r6, #0
 8004cca:	f040 8095 	bne.w	8004df8 <HAL_DMA_Start_IT+0x28c>
 8004cce:	f1ba 0f00 	cmp.w	sl, #0
 8004cd2:	f000 80ee 	beq.w	8004eb2 <HAL_DMA_Start_IT+0x346>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	f023 031e 	bic.w	r3, r3, #30
 8004cdc:	f043 0316 	orr.w	r3, r3, #22
 8004ce0:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004ce2:	b12f      	cbz	r7, 8004cf0 <HAL_DMA_Start_IT+0x184>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	f043 0308 	orr.w	r3, r3, #8
 8004cea:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cec:	2e00      	cmp	r6, #0
 8004cee:	d12c      	bne.n	8004d4a <HAL_DMA_Start_IT+0x1de>
 8004cf0:	4b4b      	ldr	r3, [pc, #300]	; (8004e20 <HAL_DMA_Start_IT+0x2b4>)
 8004cf2:	4a4c      	ldr	r2, [pc, #304]	; (8004e24 <HAL_DMA_Start_IT+0x2b8>)
 8004cf4:	494c      	ldr	r1, [pc, #304]	; (8004e28 <HAL_DMA_Start_IT+0x2bc>)
 8004cf6:	4294      	cmp	r4, r2
 8004cf8:	bf18      	it	ne
 8004cfa:	429c      	cmpne	r4, r3
 8004cfc:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8004d00:	bf0c      	ite	eq
 8004d02:	2301      	moveq	r3, #1
 8004d04:	2300      	movne	r3, #0
 8004d06:	428c      	cmp	r4, r1
 8004d08:	bf08      	it	eq
 8004d0a:	f043 0301 	orreq.w	r3, r3, #1
 8004d0e:	3128      	adds	r1, #40	; 0x28
 8004d10:	4294      	cmp	r4, r2
 8004d12:	bf08      	it	eq
 8004d14:	f043 0301 	orreq.w	r3, r3, #1
 8004d18:	3228      	adds	r2, #40	; 0x28
 8004d1a:	428c      	cmp	r4, r1
 8004d1c:	bf08      	it	eq
 8004d1e:	f043 0301 	orreq.w	r3, r3, #1
 8004d22:	3128      	adds	r1, #40	; 0x28
 8004d24:	4294      	cmp	r4, r2
 8004d26:	bf08      	it	eq
 8004d28:	f043 0301 	orreq.w	r3, r3, #1
 8004d2c:	3228      	adds	r2, #40	; 0x28
 8004d2e:	428c      	cmp	r4, r1
 8004d30:	bf08      	it	eq
 8004d32:	f043 0301 	orreq.w	r3, r3, #1
 8004d36:	4294      	cmp	r4, r2
 8004d38:	bf08      	it	eq
 8004d3a:	f043 0301 	orreq.w	r3, r3, #1
 8004d3e:	b913      	cbnz	r3, 8004d46 <HAL_DMA_Start_IT+0x1da>
 8004d40:	f1ba 0f00 	cmp.w	sl, #0
 8004d44:	d012      	beq.n	8004d6c <HAL_DMA_Start_IT+0x200>
 8004d46:	f8d5 e06c 	ldr.w	lr, [r5, #108]	; 0x6c
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d4a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	03d2      	lsls	r2, r2, #15
 8004d50:	d503      	bpl.n	8004d5a <HAL_DMA_Start_IT+0x1ee>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d58:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8004d5a:	f1be 0f00 	cmp.w	lr, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_DMA_Start_IT+0x200>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d60:	f8de 3000 	ldr.w	r3, [lr]
 8004d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d68:	f8ce 3000 	str.w	r3, [lr]
    __HAL_DMA_ENABLE(hdma);
 8004d6c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d6e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004d70:	f043 0301 	orr.w	r3, r3, #1
 8004d74:	6023      	str	r3, [r4, #0]
}
 8004d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 8004d7a:	2001      	movs	r0, #1
}
 8004d7c:	4770      	bx	lr
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d7e:	4f28      	ldr	r7, [pc, #160]	; (8004e20 <HAL_DMA_Start_IT+0x2b4>)
 8004d80:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 8004e24 <HAL_DMA_Start_IT+0x2b8>
 8004d84:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8004e28 <HAL_DMA_Start_IT+0x2bc>
 8004d88:	4574      	cmp	r4, lr
 8004d8a:	bf18      	it	ne
 8004d8c:	42bc      	cmpne	r4, r7
 8004d8e:	f10e 0e3c 	add.w	lr, lr, #60	; 0x3c
 8004d92:	bf0c      	ite	eq
 8004d94:	2701      	moveq	r7, #1
 8004d96:	2700      	movne	r7, #0
 8004d98:	4544      	cmp	r4, r8
 8004d9a:	bf08      	it	eq
 8004d9c:	f047 0701 	orreq.w	r7, r7, #1
 8004da0:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8004da4:	4574      	cmp	r4, lr
 8004da6:	bf08      	it	eq
 8004da8:	f047 0701 	orreq.w	r7, r7, #1
 8004dac:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8004db0:	4544      	cmp	r4, r8
 8004db2:	bf08      	it	eq
 8004db4:	f047 0701 	orreq.w	r7, r7, #1
 8004db8:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8004dbc:	4574      	cmp	r4, lr
 8004dbe:	bf08      	it	eq
 8004dc0:	f047 0701 	orreq.w	r7, r7, #1
 8004dc4:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8004dc8:	4544      	cmp	r4, r8
 8004dca:	bf08      	it	eq
 8004dcc:	f047 0701 	orreq.w	r7, r7, #1
 8004dd0:	4574      	cmp	r4, lr
 8004dd2:	bf08      	it	eq
 8004dd4:	f047 0701 	orreq.w	r7, r7, #1
 8004dd8:	b917      	cbnz	r7, 8004de0 <HAL_DMA_Start_IT+0x274>
 8004dda:	f1ba 0f00 	cmp.w	sl, #0
 8004dde:	d029      	beq.n	8004e34 <HAL_DMA_Start_IT+0x2c8>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004de0:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 8004de2:	e9d5 0e1a 	ldrd	r0, lr, [r5, #104]	; 0x68
 8004de6:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004de8:	f1be 0f00 	cmp.w	lr, #0
 8004dec:	f47f af4d 	bne.w	8004c8a <HAL_DMA_Start_IT+0x11e>
 8004df0:	e74f      	b.n	8004c92 <HAL_DMA_Start_IT+0x126>
  __HAL_LOCK(hdma);
 8004df2:	2002      	movs	r0, #2
}
 8004df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	f023 031e 	bic.w	r3, r3, #30
 8004dfe:	f043 0316 	orr.w	r3, r3, #22
 8004e02:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004e04:	2f00      	cmp	r7, #0
 8004e06:	f47f af6d 	bne.w	8004ce4 <HAL_DMA_Start_IT+0x178>
 8004e0a:	e79e      	b.n	8004d4a <HAL_DMA_Start_IT+0x1de>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004e0c:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004e0e:	60e1      	str	r1, [r4, #12]
 8004e10:	e759      	b.n	8004cc6 <HAL_DMA_Start_IT+0x15a>
 8004e12:	bf00      	nop
 8004e14:	40020058 	.word	0x40020058
 8004e18:	40020040 	.word	0x40020040
 8004e1c:	40020070 	.word	0x40020070
 8004e20:	5802541c 	.word	0x5802541c
 8004e24:	58025408 	.word	0x58025408
 8004e28:	58025430 	.word	0x58025430
 8004e2c:	400200b8 	.word	0x400200b8
 8004e30:	40020440 	.word	0x40020440
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e34:	4f28      	ldr	r7, [pc, #160]	; (8004ed8 <HAL_DMA_Start_IT+0x36c>)
 8004e36:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004ee0 <HAL_DMA_Start_IT+0x374>
 8004e3a:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 8004ee4 <HAL_DMA_Start_IT+0x378>
 8004e3e:	4544      	cmp	r4, r8
 8004e40:	bf18      	it	ne
 8004e42:	42bc      	cmpne	r4, r7
 8004e44:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8004e48:	bf0c      	ite	eq
 8004e4a:	2701      	moveq	r7, #1
 8004e4c:	2700      	movne	r7, #0
 8004e4e:	4574      	cmp	r4, lr
 8004e50:	bf08      	it	eq
 8004e52:	f047 0701 	orreq.w	r7, r7, #1
 8004e56:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8004e5a:	4544      	cmp	r4, r8
 8004e5c:	bf08      	it	eq
 8004e5e:	f047 0701 	orreq.w	r7, r7, #1
 8004e62:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8004e66:	4574      	cmp	r4, lr
 8004e68:	bf08      	it	eq
 8004e6a:	f047 0701 	orreq.w	r7, r7, #1
 8004e6e:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8004e72:	4544      	cmp	r4, r8
 8004e74:	bf08      	it	eq
 8004e76:	f047 0701 	orreq.w	r7, r7, #1
 8004e7a:	4574      	cmp	r4, lr
 8004e7c:	bf08      	it	eq
 8004e7e:	f047 0701 	orreq.w	r7, r7, #1
 8004e82:	b927      	cbnz	r7, 8004e8e <HAL_DMA_Start_IT+0x322>
 8004e84:	4f15      	ldr	r7, [pc, #84]	; (8004edc <HAL_DMA_Start_IT+0x370>)
 8004e86:	42bc      	cmp	r4, r7
 8004e88:	bf18      	it	ne
 8004e8a:	6c2f      	ldrne	r7, [r5, #64]	; 0x40
 8004e8c:	d111      	bne.n	8004eb2 <HAL_DMA_Start_IT+0x346>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e8e:	6def      	ldr	r7, [r5, #92]	; 0x5c
 8004e90:	f04f 0e01 	mov.w	lr, #1
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e94:	f8d5 8008 	ldr.w	r8, [r5, #8]
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e98:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e9c:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ea0:	fa0e f707 	lsl.w	r7, lr, r7
 8004ea4:	f8cc 7004 	str.w	r7, [ip, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004ea8:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eaa:	d010      	beq.n	8004ece <HAL_DMA_Start_IT+0x362>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004eac:	60a1      	str	r1, [r4, #8]
 8004eae:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004eb0:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	f023 030e 	bic.w	r3, r3, #14
 8004eb8:	f043 030a 	orr.w	r3, r3, #10
 8004ebc:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004ebe:	2f00      	cmp	r7, #0
 8004ec0:	f43f af16 	beq.w	8004cf0 <HAL_DMA_Start_IT+0x184>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004ec4:	6823      	ldr	r3, [r4, #0]
 8004ec6:	f043 0304 	orr.w	r3, r3, #4
 8004eca:	6023      	str	r3, [r4, #0]
 8004ecc:	e710      	b.n	8004cf0 <HAL_DMA_Start_IT+0x184>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004ece:	60a2      	str	r2, [r4, #8]
 8004ed0:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ed2:	60e1      	str	r1, [r4, #12]
 8004ed4:	e7ed      	b.n	8004eb2 <HAL_DMA_Start_IT+0x346>
 8004ed6:	bf00      	nop
 8004ed8:	58025408 	.word	0x58025408
 8004edc:	58025494 	.word	0x58025494
 8004ee0:	5802541c 	.word	0x5802541c
 8004ee4:	58025430 	.word	0x58025430

08004ee8 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	d060      	beq.n	8004fae <HAL_DMA_Abort_IT+0xc6>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004eec:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8004ef0:	2a02      	cmp	r2, #2
{
 8004ef2:	b538      	push	{r3, r4, r5, lr}
 8004ef4:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ef6:	d003      	beq.n	8004f00 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ef8:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8004efa:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004efc:	655a      	str	r2, [r3, #84]	; 0x54
}
 8004efe:	bd38      	pop	{r3, r4, r5, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f00:	6801      	ldr	r1, [r0, #0]
 8004f02:	4a57      	ldr	r2, [pc, #348]	; (8005060 <HAL_DMA_Abort_IT+0x178>)
 8004f04:	4291      	cmp	r1, r2
 8004f06:	d049      	beq.n	8004f9c <HAL_DMA_Abort_IT+0xb4>
 8004f08:	3218      	adds	r2, #24
 8004f0a:	4291      	cmp	r1, r2
 8004f0c:	d046      	beq.n	8004f9c <HAL_DMA_Abort_IT+0xb4>
 8004f0e:	3230      	adds	r2, #48	; 0x30
 8004f10:	4854      	ldr	r0, [pc, #336]	; (8005064 <HAL_DMA_Abort_IT+0x17c>)
 8004f12:	4c55      	ldr	r4, [pc, #340]	; (8005068 <HAL_DMA_Abort_IT+0x180>)
 8004f14:	4281      	cmp	r1, r0
 8004f16:	bf18      	it	ne
 8004f18:	4291      	cmpne	r1, r2
 8004f1a:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8004f1e:	4d53      	ldr	r5, [pc, #332]	; (800506c <HAL_DMA_Abort_IT+0x184>)
 8004f20:	bf0c      	ite	eq
 8004f22:	2201      	moveq	r2, #1
 8004f24:	2200      	movne	r2, #0
 8004f26:	42a1      	cmp	r1, r4
 8004f28:	bf08      	it	eq
 8004f2a:	f042 0201 	orreq.w	r2, r2, #1
 8004f2e:	3448      	adds	r4, #72	; 0x48
 8004f30:	4281      	cmp	r1, r0
 8004f32:	bf08      	it	eq
 8004f34:	f042 0201 	orreq.w	r2, r2, #1
 8004f38:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8004f3c:	42a9      	cmp	r1, r5
 8004f3e:	bf08      	it	eq
 8004f40:	f042 0201 	orreq.w	r2, r2, #1
 8004f44:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8004f48:	42a1      	cmp	r1, r4
 8004f4a:	bf08      	it	eq
 8004f4c:	f042 0201 	orreq.w	r2, r2, #1
 8004f50:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8004f54:	4281      	cmp	r1, r0
 8004f56:	bf08      	it	eq
 8004f58:	f042 0201 	orreq.w	r2, r2, #1
 8004f5c:	3048      	adds	r0, #72	; 0x48
 8004f5e:	42a9      	cmp	r1, r5
 8004f60:	bf08      	it	eq
 8004f62:	f042 0201 	orreq.w	r2, r2, #1
 8004f66:	3548      	adds	r5, #72	; 0x48
 8004f68:	42a1      	cmp	r1, r4
 8004f6a:	bf08      	it	eq
 8004f6c:	f042 0201 	orreq.w	r2, r2, #1
 8004f70:	3448      	adds	r4, #72	; 0x48
 8004f72:	4281      	cmp	r1, r0
 8004f74:	bf08      	it	eq
 8004f76:	f042 0201 	orreq.w	r2, r2, #1
 8004f7a:	3048      	adds	r0, #72	; 0x48
 8004f7c:	42a9      	cmp	r1, r5
 8004f7e:	bf08      	it	eq
 8004f80:	f042 0201 	orreq.w	r2, r2, #1
 8004f84:	42a1      	cmp	r1, r4
 8004f86:	bf08      	it	eq
 8004f88:	f042 0201 	orreq.w	r2, r2, #1
 8004f8c:	4281      	cmp	r1, r0
 8004f8e:	bf08      	it	eq
 8004f90:	f042 0201 	orreq.w	r2, r2, #1
 8004f94:	b912      	cbnz	r2, 8004f9c <HAL_DMA_Abort_IT+0xb4>
 8004f96:	4a36      	ldr	r2, [pc, #216]	; (8005070 <HAL_DMA_Abort_IT+0x188>)
 8004f98:	4291      	cmp	r1, r2
 8004f9a:	d10a      	bne.n	8004fb2 <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f9c:	2204      	movs	r2, #4
  return HAL_OK;
 8004f9e:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004fa4:	680b      	ldr	r3, [r1, #0]
 8004fa6:	f023 0301 	bic.w	r3, r3, #1
 8004faa:	600b      	str	r3, [r1, #0]
}
 8004fac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004fae:	2001      	movs	r0, #1
}
 8004fb0:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fb2:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 8004fb6:	4a2f      	ldr	r2, [pc, #188]	; (8005074 <HAL_DMA_Abort_IT+0x18c>)
 8004fb8:	482f      	ldr	r0, [pc, #188]	; (8005078 <HAL_DMA_Abort_IT+0x190>)
 8004fba:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 8004fbe:	4d2f      	ldr	r5, [pc, #188]	; (800507c <HAL_DMA_Abort_IT+0x194>)
 8004fc0:	42a1      	cmp	r1, r4
 8004fc2:	bf18      	it	ne
 8004fc4:	4291      	cmpne	r1, r2
 8004fc6:	f104 0450 	add.w	r4, r4, #80	; 0x50
 8004fca:	bf0c      	ite	eq
 8004fcc:	2201      	moveq	r2, #1
 8004fce:	2200      	movne	r2, #0
 8004fd0:	4281      	cmp	r1, r0
 8004fd2:	bf08      	it	eq
 8004fd4:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004fd8:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fda:	42a9      	cmp	r1, r5
 8004fdc:	bf08      	it	eq
 8004fde:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004fe2:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fe6:	3528      	adds	r5, #40	; 0x28
 8004fe8:	42a1      	cmp	r1, r4
 8004fea:	bf08      	it	eq
 8004fec:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004ff0:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ff2:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 8004ff4:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ff6:	42a9      	cmp	r1, r5
 8004ff8:	bf08      	it	eq
 8004ffa:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8004ffe:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005002:	42a1      	cmp	r1, r4
 8005004:	bf08      	it	eq
 8005006:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800500a:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800500c:	b912      	cbnz	r2, 8005014 <HAL_DMA_Abort_IT+0x12c>
 800500e:	4a1c      	ldr	r2, [pc, #112]	; (8005080 <HAL_DMA_Abort_IT+0x198>)
 8005010:	4291      	cmp	r1, r2
 8005012:	d117      	bne.n	8005044 <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005014:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005016:	2101      	movs	r1, #1
 8005018:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800501a:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800501c:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005020:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005022:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005026:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005028:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800502a:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 800502c:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005030:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005032:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005034:	b132      	cbz	r2, 8005044 <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005036:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005038:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800503a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800503c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005040:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005042:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 8005044:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8005046:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 8005048:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800504a:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800504e:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8005052:	b11a      	cbz	r2, 800505c <HAL_DMA_Abort_IT+0x174>
 8005054:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 8005056:	4790      	blx	r2
  return HAL_OK;
 8005058:	4620      	mov	r0, r4
}
 800505a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800505c:	4610      	mov	r0, r2
}
 800505e:	bd38      	pop	{r3, r4, r5, pc}
 8005060:	40020010 	.word	0x40020010
 8005064:	40020040 	.word	0x40020040
 8005068:	40020070 	.word	0x40020070
 800506c:	400200a0 	.word	0x400200a0
 8005070:	400204b8 	.word	0x400204b8
 8005074:	5802541c 	.word	0x5802541c
 8005078:	58025430 	.word	0x58025430
 800507c:	58025444 	.word	0x58025444
 8005080:	58025494 	.word	0x58025494

08005084 <HAL_DMA_IRQHandler>:
{
 8005084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t timeout = SystemCoreClock / 9600U;
 8005088:	49a4      	ldr	r1, [pc, #656]	; (800531c <HAL_DMA_IRQHandler+0x298>)
{
 800508a:	b085      	sub	sp, #20
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800508c:	4ea4      	ldr	r6, [pc, #656]	; (8005320 <HAL_DMA_IRQHandler+0x29c>)
  __IO uint32_t count = 0U;
 800508e:	2400      	movs	r4, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005090:	6803      	ldr	r3, [r0, #0]
 8005092:	4aa4      	ldr	r2, [pc, #656]	; (8005324 <HAL_DMA_IRQHandler+0x2a0>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005094:	f8d0 8058 	ldr.w	r8, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8005098:	6809      	ldr	r1, [r1, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800509a:	4293      	cmp	r3, r2
 800509c:	bf18      	it	ne
 800509e:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 80050a0:	9403      	str	r4, [sp, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050a2:	9101      	str	r1, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050a4:	bf08      	it	eq
 80050a6:	2601      	moveq	r6, #1
  tmpisr_dma  = regs_dma->ISR;
 80050a8:	f8d8 5000 	ldr.w	r5, [r8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050ac:	bf18      	it	ne
 80050ae:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 80050b0:	f8d8 1000 	ldr.w	r1, [r8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050b4:	d046      	beq.n	8005144 <HAL_DMA_IRQHandler+0xc0>
 80050b6:	3218      	adds	r2, #24
 80050b8:	4f9b      	ldr	r7, [pc, #620]	; (8005328 <HAL_DMA_IRQHandler+0x2a4>)
 80050ba:	4c9c      	ldr	r4, [pc, #624]	; (800532c <HAL_DMA_IRQHandler+0x2a8>)
 80050bc:	42bb      	cmp	r3, r7
 80050be:	bf18      	it	ne
 80050c0:	4293      	cmpne	r3, r2
 80050c2:	f107 0730 	add.w	r7, r7, #48	; 0x30
 80050c6:	bf0c      	ite	eq
 80050c8:	2201      	moveq	r2, #1
 80050ca:	2200      	movne	r2, #0
 80050cc:	42a3      	cmp	r3, r4
 80050ce:	bf08      	it	eq
 80050d0:	f042 0201 	orreq.w	r2, r2, #1
 80050d4:	3430      	adds	r4, #48	; 0x30
 80050d6:	42bb      	cmp	r3, r7
 80050d8:	bf08      	it	eq
 80050da:	f042 0201 	orreq.w	r2, r2, #1
 80050de:	3730      	adds	r7, #48	; 0x30
 80050e0:	42a3      	cmp	r3, r4
 80050e2:	bf08      	it	eq
 80050e4:	f042 0201 	orreq.w	r2, r2, #1
 80050e8:	f504 745c 	add.w	r4, r4, #880	; 0x370
 80050ec:	42bb      	cmp	r3, r7
 80050ee:	bf08      	it	eq
 80050f0:	f042 0201 	orreq.w	r2, r2, #1
 80050f4:	f507 775c 	add.w	r7, r7, #880	; 0x370
 80050f8:	42a3      	cmp	r3, r4
 80050fa:	bf08      	it	eq
 80050fc:	f042 0201 	orreq.w	r2, r2, #1
 8005100:	3430      	adds	r4, #48	; 0x30
 8005102:	42bb      	cmp	r3, r7
 8005104:	bf08      	it	eq
 8005106:	f042 0201 	orreq.w	r2, r2, #1
 800510a:	3730      	adds	r7, #48	; 0x30
 800510c:	42a3      	cmp	r3, r4
 800510e:	bf08      	it	eq
 8005110:	f042 0201 	orreq.w	r2, r2, #1
 8005114:	3430      	adds	r4, #48	; 0x30
 8005116:	42bb      	cmp	r3, r7
 8005118:	bf08      	it	eq
 800511a:	f042 0201 	orreq.w	r2, r2, #1
 800511e:	3730      	adds	r7, #48	; 0x30
 8005120:	42a3      	cmp	r3, r4
 8005122:	bf08      	it	eq
 8005124:	f042 0201 	orreq.w	r2, r2, #1
 8005128:	3430      	adds	r4, #48	; 0x30
 800512a:	42bb      	cmp	r3, r7
 800512c:	bf08      	it	eq
 800512e:	f042 0201 	orreq.w	r2, r2, #1
 8005132:	42a3      	cmp	r3, r4
 8005134:	bf08      	it	eq
 8005136:	f042 0201 	orreq.w	r2, r2, #1
 800513a:	b91a      	cbnz	r2, 8005144 <HAL_DMA_IRQHandler+0xc0>
 800513c:	4a7c      	ldr	r2, [pc, #496]	; (8005330 <HAL_DMA_IRQHandler+0x2ac>)
 800513e:	4293      	cmp	r3, r2
 8005140:	f040 81ef 	bne.w	8005522 <HAL_DMA_IRQHandler+0x49e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005144:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8005146:	2208      	movs	r2, #8
 8005148:	f001 071f 	and.w	r7, r1, #31
 800514c:	40ba      	lsls	r2, r7
 800514e:	422a      	tst	r2, r5
 8005150:	f040 81d8 	bne.w	8005504 <HAL_DMA_IRQHandler+0x480>
 8005154:	4604      	mov	r4, r0
 8005156:	f04f 0c04 	mov.w	ip, #4
 800515a:	2010      	movs	r0, #16
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800515c:	fa25 f207 	lsr.w	r2, r5, r7
 8005160:	fa0c fc07 	lsl.w	ip, ip, r7
 8005164:	40b8      	lsls	r0, r7
 8005166:	07d2      	lsls	r2, r2, #31
 8005168:	ea05 090c 	and.w	r9, r5, ip
 800516c:	ea05 0e00 	and.w	lr, r5, r0
 8005170:	d560      	bpl.n	8005234 <HAL_DMA_IRQHandler+0x1b0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005172:	4a70      	ldr	r2, [pc, #448]	; (8005334 <HAL_DMA_IRQHandler+0x2b0>)
 8005174:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 8005328 <HAL_DMA_IRQHandler+0x2a4>
 8005178:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 800532c <HAL_DMA_IRQHandler+0x2a8>
 800517c:	4293      	cmp	r3, r2
 800517e:	bf18      	it	ne
 8005180:	455b      	cmpne	r3, fp
 8005182:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8005186:	bf0c      	ite	eq
 8005188:	2201      	moveq	r2, #1
 800518a:	2200      	movne	r2, #0
 800518c:	4553      	cmp	r3, sl
 800518e:	bf08      	it	eq
 8005190:	f042 0201 	orreq.w	r2, r2, #1
 8005194:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8005198:	455b      	cmp	r3, fp
 800519a:	bf08      	it	eq
 800519c:	f042 0201 	orreq.w	r2, r2, #1
 80051a0:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 80051a4:	4553      	cmp	r3, sl
 80051a6:	bf08      	it	eq
 80051a8:	f042 0201 	orreq.w	r2, r2, #1
 80051ac:	f50a 7a5c 	add.w	sl, sl, #880	; 0x370
 80051b0:	455b      	cmp	r3, fp
 80051b2:	bf08      	it	eq
 80051b4:	f042 0201 	orreq.w	r2, r2, #1
 80051b8:	f50b 7b5c 	add.w	fp, fp, #880	; 0x370
 80051bc:	4553      	cmp	r3, sl
 80051be:	bf08      	it	eq
 80051c0:	f042 0201 	orreq.w	r2, r2, #1
 80051c4:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 80051c8:	455b      	cmp	r3, fp
 80051ca:	bf08      	it	eq
 80051cc:	f042 0201 	orreq.w	r2, r2, #1
 80051d0:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 80051d4:	4553      	cmp	r3, sl
 80051d6:	bf08      	it	eq
 80051d8:	f042 0201 	orreq.w	r2, r2, #1
 80051dc:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 80051e0:	455b      	cmp	r3, fp
 80051e2:	bf08      	it	eq
 80051e4:	f042 0201 	orreq.w	r2, r2, #1
 80051e8:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 80051ec:	4553      	cmp	r3, sl
 80051ee:	bf08      	it	eq
 80051f0:	f042 0201 	orreq.w	r2, r2, #1
 80051f4:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 80051f8:	455b      	cmp	r3, fp
 80051fa:	bf08      	it	eq
 80051fc:	f042 0201 	orreq.w	r2, r2, #1
 8005200:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8005204:	4553      	cmp	r3, sl
 8005206:	bf08      	it	eq
 8005208:	f042 0201 	orreq.w	r2, r2, #1
 800520c:	455b      	cmp	r3, fp
 800520e:	bf08      	it	eq
 8005210:	f042 0201 	orreq.w	r2, r2, #1
 8005214:	b912      	cbnz	r2, 800521c <HAL_DMA_IRQHandler+0x198>
 8005216:	2e00      	cmp	r6, #0
 8005218:	f000 8245 	beq.w	80056a6 <HAL_DMA_IRQHandler+0x622>
 800521c:	695a      	ldr	r2, [r3, #20]
 800521e:	0612      	lsls	r2, r2, #24
 8005220:	d508      	bpl.n	8005234 <HAL_DMA_IRQHandler+0x1b0>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005222:	2201      	movs	r2, #1
 8005224:	fa02 f707 	lsl.w	r7, r2, r7
 8005228:	f8c8 7008 	str.w	r7, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800522c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800522e:	f042 0202 	orr.w	r2, r2, #2
 8005232:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005234:	f1b9 0f00 	cmp.w	r9, #0
 8005238:	d055      	beq.n	80052e6 <HAL_DMA_IRQHandler+0x262>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800523a:	2e00      	cmp	r6, #0
 800523c:	d14a      	bne.n	80052d4 <HAL_DMA_IRQHandler+0x250>
 800523e:	4a3d      	ldr	r2, [pc, #244]	; (8005334 <HAL_DMA_IRQHandler+0x2b0>)
 8005240:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8005328 <HAL_DMA_IRQHandler+0x2a4>
 8005244:	4f39      	ldr	r7, [pc, #228]	; (800532c <HAL_DMA_IRQHandler+0x2a8>)
 8005246:	454b      	cmp	r3, r9
 8005248:	bf18      	it	ne
 800524a:	4293      	cmpne	r3, r2
 800524c:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8005250:	bf0c      	ite	eq
 8005252:	2201      	moveq	r2, #1
 8005254:	2200      	movne	r2, #0
 8005256:	42bb      	cmp	r3, r7
 8005258:	bf08      	it	eq
 800525a:	f042 0201 	orreq.w	r2, r2, #1
 800525e:	3730      	adds	r7, #48	; 0x30
 8005260:	454b      	cmp	r3, r9
 8005262:	bf08      	it	eq
 8005264:	f042 0201 	orreq.w	r2, r2, #1
 8005268:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800526c:	42bb      	cmp	r3, r7
 800526e:	bf08      	it	eq
 8005270:	f042 0201 	orreq.w	r2, r2, #1
 8005274:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8005278:	454b      	cmp	r3, r9
 800527a:	bf08      	it	eq
 800527c:	f042 0201 	orreq.w	r2, r2, #1
 8005280:	f509 795c 	add.w	r9, r9, #880	; 0x370
 8005284:	42bb      	cmp	r3, r7
 8005286:	bf08      	it	eq
 8005288:	f042 0201 	orreq.w	r2, r2, #1
 800528c:	3730      	adds	r7, #48	; 0x30
 800528e:	454b      	cmp	r3, r9
 8005290:	bf08      	it	eq
 8005292:	f042 0201 	orreq.w	r2, r2, #1
 8005296:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800529a:	42bb      	cmp	r3, r7
 800529c:	bf08      	it	eq
 800529e:	f042 0201 	orreq.w	r2, r2, #1
 80052a2:	3730      	adds	r7, #48	; 0x30
 80052a4:	454b      	cmp	r3, r9
 80052a6:	bf08      	it	eq
 80052a8:	f042 0201 	orreq.w	r2, r2, #1
 80052ac:	f109 0930 	add.w	r9, r9, #48	; 0x30
 80052b0:	42bb      	cmp	r3, r7
 80052b2:	bf08      	it	eq
 80052b4:	f042 0201 	orreq.w	r2, r2, #1
 80052b8:	3730      	adds	r7, #48	; 0x30
 80052ba:	454b      	cmp	r3, r9
 80052bc:	bf08      	it	eq
 80052be:	f042 0201 	orreq.w	r2, r2, #1
 80052c2:	42bb      	cmp	r3, r7
 80052c4:	bf08      	it	eq
 80052c6:	f042 0201 	orreq.w	r2, r2, #1
 80052ca:	b91a      	cbnz	r2, 80052d4 <HAL_DMA_IRQHandler+0x250>
 80052cc:	4a18      	ldr	r2, [pc, #96]	; (8005330 <HAL_DMA_IRQHandler+0x2ac>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	f040 81b4 	bne.w	800563c <HAL_DMA_IRQHandler+0x5b8>
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	0792      	lsls	r2, r2, #30
 80052d8:	d505      	bpl.n	80052e6 <HAL_DMA_IRQHandler+0x262>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052da:	f8c8 c008 	str.w	ip, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80052de:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80052e0:	f042 0204 	orr.w	r2, r2, #4
 80052e4:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052e6:	f1be 0f00 	cmp.w	lr, #0
 80052ea:	d06d      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x344>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80052ec:	2e00      	cmp	r6, #0
 80052ee:	d155      	bne.n	800539c <HAL_DMA_IRQHandler+0x318>
 80052f0:	4a10      	ldr	r2, [pc, #64]	; (8005334 <HAL_DMA_IRQHandler+0x2b0>)
 80052f2:	4f0d      	ldr	r7, [pc, #52]	; (8005328 <HAL_DMA_IRQHandler+0x2a4>)
 80052f4:	4e0d      	ldr	r6, [pc, #52]	; (800532c <HAL_DMA_IRQHandler+0x2a8>)
 80052f6:	42bb      	cmp	r3, r7
 80052f8:	bf18      	it	ne
 80052fa:	4293      	cmpne	r3, r2
 80052fc:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8005300:	bf0c      	ite	eq
 8005302:	2201      	moveq	r2, #1
 8005304:	2200      	movne	r2, #0
 8005306:	42b3      	cmp	r3, r6
 8005308:	bf08      	it	eq
 800530a:	f042 0201 	orreq.w	r2, r2, #1
 800530e:	3630      	adds	r6, #48	; 0x30
 8005310:	42bb      	cmp	r3, r7
 8005312:	bf08      	it	eq
 8005314:	f042 0201 	orreq.w	r2, r2, #1
 8005318:	3730      	adds	r7, #48	; 0x30
 800531a:	e00d      	b.n	8005338 <HAL_DMA_IRQHandler+0x2b4>
 800531c:	240001f4 	.word	0x240001f4
 8005320:	40020010 	.word	0x40020010
 8005324:	40020028 	.word	0x40020028
 8005328:	40020058 	.word	0x40020058
 800532c:	40020070 	.word	0x40020070
 8005330:	400204b8 	.word	0x400204b8
 8005334:	40020040 	.word	0x40020040
 8005338:	42b3      	cmp	r3, r6
 800533a:	bf08      	it	eq
 800533c:	f042 0201 	orreq.w	r2, r2, #1
 8005340:	f506 765c 	add.w	r6, r6, #880	; 0x370
 8005344:	42bb      	cmp	r3, r7
 8005346:	bf08      	it	eq
 8005348:	f042 0201 	orreq.w	r2, r2, #1
 800534c:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8005350:	42b3      	cmp	r3, r6
 8005352:	bf08      	it	eq
 8005354:	f042 0201 	orreq.w	r2, r2, #1
 8005358:	3630      	adds	r6, #48	; 0x30
 800535a:	42bb      	cmp	r3, r7
 800535c:	bf08      	it	eq
 800535e:	f042 0201 	orreq.w	r2, r2, #1
 8005362:	3730      	adds	r7, #48	; 0x30
 8005364:	42b3      	cmp	r3, r6
 8005366:	bf08      	it	eq
 8005368:	f042 0201 	orreq.w	r2, r2, #1
 800536c:	3630      	adds	r6, #48	; 0x30
 800536e:	42bb      	cmp	r3, r7
 8005370:	bf08      	it	eq
 8005372:	f042 0201 	orreq.w	r2, r2, #1
 8005376:	3730      	adds	r7, #48	; 0x30
 8005378:	42b3      	cmp	r3, r6
 800537a:	bf08      	it	eq
 800537c:	f042 0201 	orreq.w	r2, r2, #1
 8005380:	3630      	adds	r6, #48	; 0x30
 8005382:	42bb      	cmp	r3, r7
 8005384:	bf08      	it	eq
 8005386:	f042 0201 	orreq.w	r2, r2, #1
 800538a:	42b3      	cmp	r3, r6
 800538c:	bf08      	it	eq
 800538e:	f042 0201 	orreq.w	r2, r2, #1
 8005392:	b91a      	cbnz	r2, 800539c <HAL_DMA_IRQHandler+0x318>
 8005394:	4aa0      	ldr	r2, [pc, #640]	; (8005618 <HAL_DMA_IRQHandler+0x594>)
 8005396:	4293      	cmp	r3, r2
 8005398:	f040 813a 	bne.w	8005610 <HAL_DMA_IRQHandler+0x58c>
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80053a2:	b18a      	cbz	r2, 80053c8 <HAL_DMA_IRQHandler+0x344>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053a4:	f8c8 0008 	str.w	r0, [r8, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	0357      	lsls	r7, r2, #13
 80053ac:	f100 80f7 	bmi.w	800559e <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	05d0      	lsls	r0, r2, #23
 80053b4:	d403      	bmi.n	80053be <HAL_DMA_IRQHandler+0x33a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	f022 0208 	bic.w	r2, r2, #8
 80053bc:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80053be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053c0:	b113      	cbz	r3, 80053c8 <HAL_DMA_IRQHandler+0x344>
            hdma->XferHalfCpltCallback(hdma);
 80053c2:	4620      	mov	r0, r4
 80053c4:	4798      	blx	r3
 80053c6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053c8:	f001 011f 	and.w	r1, r1, #31
 80053cc:	2220      	movs	r2, #32
 80053ce:	408a      	lsls	r2, r1
 80053d0:	422a      	tst	r2, r5
 80053d2:	d069      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x424>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80053d4:	6820      	ldr	r0, [r4, #0]
 80053d6:	4b91      	ldr	r3, [pc, #580]	; (800561c <HAL_DMA_IRQHandler+0x598>)
 80053d8:	4e91      	ldr	r6, [pc, #580]	; (8005620 <HAL_DMA_IRQHandler+0x59c>)
 80053da:	4d92      	ldr	r5, [pc, #584]	; (8005624 <HAL_DMA_IRQHandler+0x5a0>)
 80053dc:	42b0      	cmp	r0, r6
 80053de:	bf18      	it	ne
 80053e0:	4298      	cmpne	r0, r3
 80053e2:	f106 0630 	add.w	r6, r6, #48	; 0x30
 80053e6:	bf0c      	ite	eq
 80053e8:	2301      	moveq	r3, #1
 80053ea:	2300      	movne	r3, #0
 80053ec:	42a8      	cmp	r0, r5
 80053ee:	bf08      	it	eq
 80053f0:	f043 0301 	orreq.w	r3, r3, #1
 80053f4:	3530      	adds	r5, #48	; 0x30
 80053f6:	42b0      	cmp	r0, r6
 80053f8:	bf08      	it	eq
 80053fa:	f043 0301 	orreq.w	r3, r3, #1
 80053fe:	3630      	adds	r6, #48	; 0x30
 8005400:	42a8      	cmp	r0, r5
 8005402:	bf08      	it	eq
 8005404:	f043 0301 	orreq.w	r3, r3, #1
 8005408:	3530      	adds	r5, #48	; 0x30
 800540a:	42b0      	cmp	r0, r6
 800540c:	bf08      	it	eq
 800540e:	f043 0301 	orreq.w	r3, r3, #1
 8005412:	3630      	adds	r6, #48	; 0x30
 8005414:	42a8      	cmp	r0, r5
 8005416:	bf08      	it	eq
 8005418:	f043 0301 	orreq.w	r3, r3, #1
 800541c:	f505 755c 	add.w	r5, r5, #880	; 0x370
 8005420:	42b0      	cmp	r0, r6
 8005422:	bf08      	it	eq
 8005424:	f043 0301 	orreq.w	r3, r3, #1
 8005428:	f506 765c 	add.w	r6, r6, #880	; 0x370
 800542c:	42a8      	cmp	r0, r5
 800542e:	bf08      	it	eq
 8005430:	f043 0301 	orreq.w	r3, r3, #1
 8005434:	3530      	adds	r5, #48	; 0x30
 8005436:	42b0      	cmp	r0, r6
 8005438:	bf08      	it	eq
 800543a:	f043 0301 	orreq.w	r3, r3, #1
 800543e:	3630      	adds	r6, #48	; 0x30
 8005440:	42a8      	cmp	r0, r5
 8005442:	bf08      	it	eq
 8005444:	f043 0301 	orreq.w	r3, r3, #1
 8005448:	3530      	adds	r5, #48	; 0x30
 800544a:	42b0      	cmp	r0, r6
 800544c:	bf08      	it	eq
 800544e:	f043 0301 	orreq.w	r3, r3, #1
 8005452:	3630      	adds	r6, #48	; 0x30
 8005454:	42a8      	cmp	r0, r5
 8005456:	bf08      	it	eq
 8005458:	f043 0301 	orreq.w	r3, r3, #1
 800545c:	3530      	adds	r5, #48	; 0x30
 800545e:	42b0      	cmp	r0, r6
 8005460:	bf08      	it	eq
 8005462:	f043 0301 	orreq.w	r3, r3, #1
 8005466:	42a8      	cmp	r0, r5
 8005468:	bf08      	it	eq
 800546a:	f043 0301 	orreq.w	r3, r3, #1
 800546e:	b91b      	cbnz	r3, 8005478 <HAL_DMA_IRQHandler+0x3f4>
 8005470:	4b69      	ldr	r3, [pc, #420]	; (8005618 <HAL_DMA_IRQHandler+0x594>)
 8005472:	4298      	cmp	r0, r3
 8005474:	f040 8121 	bne.w	80056ba <HAL_DMA_IRQHandler+0x636>
 8005478:	6803      	ldr	r3, [r0, #0]
 800547a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800547e:	b19b      	cbz	r3, 80054a8 <HAL_DMA_IRQHandler+0x424>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005480:	f8c8 2008 	str.w	r2, [r8, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005484:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005488:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800548a:	6803      	ldr	r3, [r0, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800548c:	f000 8090 	beq.w	80055b0 <HAL_DMA_IRQHandler+0x52c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005490:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005494:	6803      	ldr	r3, [r0, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005496:	f000 80a8 	beq.w	80055ea <HAL_DMA_IRQHandler+0x566>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800549a:	0319      	lsls	r1, r3, #12
 800549c:	f140 80b3 	bpl.w	8005606 <HAL_DMA_IRQHandler+0x582>
          if(hdma->XferCpltCallback != NULL)
 80054a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80054a2:	b10b      	cbz	r3, 80054a8 <HAL_DMA_IRQHandler+0x424>
            hdma->XferCpltCallback(hdma);
 80054a4:	4620      	mov	r0, r4
 80054a6:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d074      	beq.n	8005598 <HAL_DMA_IRQHandler+0x514>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80054ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80054b0:	07da      	lsls	r2, r3, #31
 80054b2:	d51f      	bpl.n	80054f4 <HAL_DMA_IRQHandler+0x470>
        __HAL_DMA_DISABLE(hdma);
 80054b4:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 80054b6:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 80054b8:	495b      	ldr	r1, [pc, #364]	; (8005628 <HAL_DMA_IRQHandler+0x5a4>)
        hdma->State = HAL_DMA_STATE_ABORT;
 80054ba:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80054be:	6813      	ldr	r3, [r2, #0]
 80054c0:	f023 0301 	bic.w	r3, r3, #1
 80054c4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054c6:	9b01      	ldr	r3, [sp, #4]
 80054c8:	fba1 3103 	umull	r3, r1, r1, r3
 80054cc:	0a89      	lsrs	r1, r1, #10
 80054ce:	e002      	b.n	80054d6 <HAL_DMA_IRQHandler+0x452>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80054d0:	6813      	ldr	r3, [r2, #0]
 80054d2:	07db      	lsls	r3, r3, #31
 80054d4:	d504      	bpl.n	80054e0 <HAL_DMA_IRQHandler+0x45c>
          if (++count > timeout)
 80054d6:	9b03      	ldr	r3, [sp, #12]
 80054d8:	3301      	adds	r3, #1
 80054da:	428b      	cmp	r3, r1
 80054dc:	9303      	str	r3, [sp, #12]
 80054de:	d9f7      	bls.n	80054d0 <HAL_DMA_IRQHandler+0x44c>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054e0:	6813      	ldr	r3, [r2, #0]
        __HAL_UNLOCK(hdma);
 80054e2:	2200      	movs	r2, #0
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054e4:	07df      	lsls	r7, r3, #31
        __HAL_UNLOCK(hdma);
 80054e6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_ERROR;
 80054ea:	bf4c      	ite	mi
 80054ec:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80054ee:	2301      	movpl	r3, #1
 80054f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 80054f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d04e      	beq.n	8005598 <HAL_DMA_IRQHandler+0x514>
        hdma->XferErrorCallback(hdma);
 80054fa:	4620      	mov	r0, r4
}
 80054fc:	b005      	add	sp, #20
 80054fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        hdma->XferErrorCallback(hdma);
 8005502:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005504:	681c      	ldr	r4, [r3, #0]
 8005506:	0764      	lsls	r4, r4, #29
 8005508:	f57f ae24 	bpl.w	8005154 <HAL_DMA_IRQHandler+0xd0>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800550c:	681c      	ldr	r4, [r3, #0]
 800550e:	f024 0404 	bic.w	r4, r4, #4
 8005512:	601c      	str	r4, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005514:	f8c8 2008 	str.w	r2, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005518:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	6542      	str	r2, [r0, #84]	; 0x54
 8005520:	e618      	b.n	8005154 <HAL_DMA_IRQHandler+0xd0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005522:	4a42      	ldr	r2, [pc, #264]	; (800562c <HAL_DMA_IRQHandler+0x5a8>)
 8005524:	4d42      	ldr	r5, [pc, #264]	; (8005630 <HAL_DMA_IRQHandler+0x5ac>)
 8005526:	4c43      	ldr	r4, [pc, #268]	; (8005634 <HAL_DMA_IRQHandler+0x5b0>)
 8005528:	42ab      	cmp	r3, r5
 800552a:	bf18      	it	ne
 800552c:	4293      	cmpne	r3, r2
 800552e:	f105 0528 	add.w	r5, r5, #40	; 0x28
 8005532:	bf0c      	ite	eq
 8005534:	2201      	moveq	r2, #1
 8005536:	2200      	movne	r2, #0
 8005538:	42a3      	cmp	r3, r4
 800553a:	bf08      	it	eq
 800553c:	f042 0201 	orreq.w	r2, r2, #1
 8005540:	3428      	adds	r4, #40	; 0x28
 8005542:	42ab      	cmp	r3, r5
 8005544:	bf08      	it	eq
 8005546:	f042 0201 	orreq.w	r2, r2, #1
 800554a:	3528      	adds	r5, #40	; 0x28
 800554c:	42a3      	cmp	r3, r4
 800554e:	bf08      	it	eq
 8005550:	f042 0201 	orreq.w	r2, r2, #1
 8005554:	3428      	adds	r4, #40	; 0x28
 8005556:	42ab      	cmp	r3, r5
 8005558:	bf08      	it	eq
 800555a:	f042 0201 	orreq.w	r2, r2, #1
 800555e:	42a3      	cmp	r3, r4
 8005560:	bf08      	it	eq
 8005562:	f042 0201 	orreq.w	r2, r2, #1
 8005566:	b912      	cbnz	r2, 800556e <HAL_DMA_IRQHandler+0x4ea>
 8005568:	4a33      	ldr	r2, [pc, #204]	; (8005638 <HAL_DMA_IRQHandler+0x5b4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d114      	bne.n	8005598 <HAL_DMA_IRQHandler+0x514>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800556e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8005570:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005572:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005574:	f004 041f 	and.w	r4, r4, #31
 8005578:	40a5      	lsls	r5, r4
 800557a:	420d      	tst	r5, r1
 800557c:	d068      	beq.n	8005650 <HAL_DMA_IRQHandler+0x5cc>
 800557e:	0756      	lsls	r6, r2, #29
 8005580:	d566      	bpl.n	8005650 <HAL_DMA_IRQHandler+0x5cc>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005582:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005584:	f8c8 5004 	str.w	r5, [r8, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005588:	f140 80ac 	bpl.w	80056e4 <HAL_DMA_IRQHandler+0x660>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800558c:	03d3      	lsls	r3, r2, #15
 800558e:	f100 80af 	bmi.w	80056f0 <HAL_DMA_IRQHandler+0x66c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005592:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1b1      	bne.n	80054fc <HAL_DMA_IRQHandler+0x478>
}
 8005598:	b005      	add	sp, #20
 800559a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	031e      	lsls	r6, r3, #12
 80055a2:	f57f af0c 	bpl.w	80053be <HAL_DMA_IRQHandler+0x33a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80055a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f47f af0a 	bne.w	80053c2 <HAL_DMA_IRQHandler+0x33e>
 80055ae:	e70b      	b.n	80053c8 <HAL_DMA_IRQHandler+0x344>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055b0:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055b6:	6003      	str	r3, [r0, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80055b8:	6943      	ldr	r3, [r0, #20]
 80055ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055be:	6143      	str	r3, [r0, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055c0:	2a00      	cmp	r2, #0
 80055c2:	d041      	beq.n	8005648 <HAL_DMA_IRQHandler+0x5c4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80055c4:	6803      	ldr	r3, [r0, #0]
 80055c6:	f023 0308 	bic.w	r3, r3, #8
 80055ca:	6003      	str	r3, [r0, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055cc:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 80055ce:	2000      	movs	r0, #0
          hdma->State = HAL_DMA_STATE_READY;
 80055d0:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055d2:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 80055d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055d8:	f8c8 1008 	str.w	r1, [r8, #8]
          __HAL_UNLOCK(hdma);
 80055dc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80055e0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d188      	bne.n	80054fa <HAL_DMA_IRQHandler+0x476>
 80055e8:	e7d6      	b.n	8005598 <HAL_DMA_IRQHandler+0x514>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80055ea:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80055ee:	f47f af57 	bne.w	80054a0 <HAL_DMA_IRQHandler+0x41c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80055f2:	6802      	ldr	r2, [r0, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80055f4:	2101      	movs	r1, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80055f6:	f022 0210 	bic.w	r2, r2, #16
 80055fa:	6002      	str	r2, [r0, #0]
            __HAL_UNLOCK(hdma);
 80055fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8005600:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
 8005604:	e74c      	b.n	80054a0 <HAL_DMA_IRQHandler+0x41c>
            if(hdma->XferM1CpltCallback != NULL)
 8005606:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005608:	2b00      	cmp	r3, #0
 800560a:	f47f af4b 	bne.w	80054a4 <HAL_DMA_IRQHandler+0x420>
 800560e:	e74b      	b.n	80054a8 <HAL_DMA_IRQHandler+0x424>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8005616:	e6c4      	b.n	80053a2 <HAL_DMA_IRQHandler+0x31e>
 8005618:	400204b8 	.word	0x400204b8
 800561c:	40020010 	.word	0x40020010
 8005620:	40020028 	.word	0x40020028
 8005624:	40020040 	.word	0x40020040
 8005628:	1b4e81b5 	.word	0x1b4e81b5
 800562c:	58025408 	.word	0x58025408
 8005630:	5802541c 	.word	0x5802541c
 8005634:	58025430 	.word	0x58025430
 8005638:	58025494 	.word	0x58025494
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800563c:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800563e:	f1be 0f00 	cmp.w	lr, #0
 8005642:	f43f aec1 	beq.w	80053c8 <HAL_DMA_IRQHandler+0x344>
 8005646:	e653      	b.n	80052f0 <HAL_DMA_IRQHandler+0x26c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005648:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1ba      	bne.n	80055c4 <HAL_DMA_IRQHandler+0x540>
 800564e:	e7bd      	b.n	80055cc <HAL_DMA_IRQHandler+0x548>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005650:	2502      	movs	r5, #2
 8005652:	40a5      	lsls	r5, r4
 8005654:	420d      	tst	r5, r1
 8005656:	d00c      	beq.n	8005672 <HAL_DMA_IRQHandler+0x5ee>
 8005658:	0796      	lsls	r6, r2, #30
 800565a:	d50a      	bpl.n	8005672 <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800565c:	0414      	lsls	r4, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800565e:	f8c8 5004 	str.w	r5, [r8, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005662:	d52e      	bpl.n	80056c2 <HAL_DMA_IRQHandler+0x63e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005664:	03d1      	lsls	r1, r2, #15
 8005666:	d438      	bmi.n	80056da <HAL_DMA_IRQHandler+0x656>
          if(hdma->XferM1CpltCallback != NULL)
 8005668:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800566a:	2b00      	cmp	r3, #0
 800566c:	f47f af46 	bne.w	80054fc <HAL_DMA_IRQHandler+0x478>
 8005670:	e792      	b.n	8005598 <HAL_DMA_IRQHandler+0x514>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005672:	2508      	movs	r5, #8
 8005674:	40a5      	lsls	r5, r4
 8005676:	420d      	tst	r5, r1
 8005678:	d08e      	beq.n	8005598 <HAL_DMA_IRQHandler+0x514>
 800567a:	0712      	lsls	r2, r2, #28
 800567c:	d58c      	bpl.n	8005598 <HAL_DMA_IRQHandler+0x514>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800567e:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005680:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8005682:	2500      	movs	r5, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005684:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005688:	fa02 f404 	lsl.w	r4, r2, r4
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800568c:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 800568e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005690:	f8c8 4004 	str.w	r4, [r8, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005694:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8005696:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800569a:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f47f af2c 	bne.w	80054fc <HAL_DMA_IRQHandler+0x478>
 80056a4:	e778      	b.n	8005598 <HAL_DMA_IRQHandler+0x514>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80056a6:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056a8:	f1b9 0f00 	cmp.w	r9, #0
 80056ac:	f47f adc7 	bne.w	800523e <HAL_DMA_IRQHandler+0x1ba>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056b0:	f1be 0f00 	cmp.w	lr, #0
 80056b4:	f43f ae88 	beq.w	80053c8 <HAL_DMA_IRQHandler+0x344>
 80056b8:	e618      	b.n	80052ec <HAL_DMA_IRQHandler+0x268>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80056ba:	6803      	ldr	r3, [r0, #0]
 80056bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80056c0:	e6dd      	b.n	800547e <HAL_DMA_IRQHandler+0x3fa>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80056c2:	f012 0220 	ands.w	r2, r2, #32
 80056c6:	d108      	bne.n	80056da <HAL_DMA_IRQHandler+0x656>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056c8:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80056ca:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056cc:	f021 010a 	bic.w	r1, r1, #10
 80056d0:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 80056d2:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80056d6:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80056da:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f47f af0d 	bne.w	80054fc <HAL_DMA_IRQHandler+0x478>
 80056e2:	e759      	b.n	8005598 <HAL_DMA_IRQHandler+0x514>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80056e4:	0697      	lsls	r7, r2, #26
 80056e6:	d403      	bmi.n	80056f0 <HAL_DMA_IRQHandler+0x66c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	f022 0204 	bic.w	r2, r2, #4
 80056ee:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80056f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f47f af02 	bne.w	80054fc <HAL_DMA_IRQHandler+0x478>
 80056f8:	e74e      	b.n	8005598 <HAL_DMA_IRQHandler+0x514>
 80056fa:	bf00      	nop

080056fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005700:	468e      	mov	lr, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005702:	6809      	ldr	r1, [r1, #0]
{
 8005704:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005706:	2900      	cmp	r1, #0
 8005708:	f000 80cd 	beq.w	80058a6 <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00U;
 800570c:	2600      	movs	r6, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800570e:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8005924 <HAL_GPIO_Init+0x228>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005712:	2301      	movs	r3, #1
 8005714:	40b3      	lsls	r3, r6
    if (iocurrent != 0x00U)
 8005716:	ea13 0501 	ands.w	r5, r3, r1
 800571a:	f000 80bf 	beq.w	800589c <HAL_GPIO_Init+0x1a0>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800571e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005722:	0077      	lsls	r7, r6, #1
 8005724:	f04f 0c03 	mov.w	ip, #3
 8005728:	f022 0910 	bic.w	r9, r2, #16
 800572c:	fa0c fc07 	lsl.w	ip, ip, r7
 8005730:	f109 34ff 	add.w	r4, r9, #4294967295
 8005734:	ea6f 0c0c 	mvn.w	ip, ip
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005738:	2c01      	cmp	r4, #1
 800573a:	d812      	bhi.n	8005762 <HAL_GPIO_Init+0x66>
        temp = GPIOx->OSPEEDR;
 800573c:	6884      	ldr	r4, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800573e:	f3c2 1a00 	ubfx	sl, r2, #4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005742:	ea04 0b0c 	and.w	fp, r4, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005746:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800574a:	fa0a fa06 	lsl.w	sl, sl, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800574e:	40bc      	lsls	r4, r7
 8005750:	ea44 040b 	orr.w	r4, r4, fp
        GPIOx->OSPEEDR = temp;
 8005754:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8005756:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005758:	ea24 0303 	bic.w	r3, r4, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800575c:	ea4a 0303 	orr.w	r3, sl, r3
        GPIOx->OTYPER = temp;
 8005760:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8005762:	68c3      	ldr	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005764:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005768:	f8de 4008 	ldr.w	r4, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800576c:	ea03 030c 	and.w	r3, r3, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005770:	fa04 f407 	lsl.w	r4, r4, r7
 8005774:	ea44 0403 	orr.w	r4, r4, r3
      GPIOx->PUPDR = temp;
 8005778:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800577a:	d115      	bne.n	80057a8 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3U];
 800577c:	08f3      	lsrs	r3, r6, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800577e:	f006 0907 	and.w	r9, r6, #7
 8005782:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005786:	f8de 4010 	ldr.w	r4, [lr, #16]
 800578a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800578e:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8005792:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005796:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800579a:	fa04 f409 	lsl.w	r4, r4, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800579e:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80057a2:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 80057a6:	621c      	str	r4, [r3, #32]
      temp = GPIOx->MODER;
 80057a8:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057aa:	f002 0303 	and.w	r3, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80057ae:	ea04 0c0c 	and.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057b2:	40bb      	lsls	r3, r7
 80057b4:	ea43 030c 	orr.w	r3, r3, ip
      GPIOx->MODER = temp;
 80057b8:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057ba:	00d3      	lsls	r3, r2, #3
 80057bc:	d56e      	bpl.n	800589c <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057be:	4b53      	ldr	r3, [pc, #332]	; (800590c <HAL_GPIO_Init+0x210>)
 80057c0:	f026 0903 	bic.w	r9, r6, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057c4:	240f      	movs	r4, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057c6:	f8d3 70f4 	ldr.w	r7, [r3, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057ca:	f006 0303 	and.w	r3, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ce:	f047 0c02 	orr.w	ip, r7, #2
 80057d2:	4f4f      	ldr	r7, [pc, #316]	; (8005910 <HAL_GPIO_Init+0x214>)
 80057d4:	444f      	add	r7, r9
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057d6:	ea4f 0983 	mov.w	r9, r3, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057da:	4b4c      	ldr	r3, [pc, #304]	; (800590c <HAL_GPIO_Init+0x210>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057dc:	fa04 f409 	lsl.w	r4, r4, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057e0:	f8c3 c0f4 	str.w	ip, [r3, #244]	; 0xf4
 80057e4:	f8d3 c0f4 	ldr.w	ip, [r3, #244]	; 0xf4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057e8:	f5a3 4388 	sub.w	r3, r3, #17408	; 0x4400
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ec:	f00c 0c02 	and.w	ip, ip, #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057f0:	4298      	cmp	r0, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057f2:	f8cd c004 	str.w	ip, [sp, #4]
 80057f6:	f8dd c004 	ldr.w	ip, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80057fa:	f8d7 c008 	ldr.w	ip, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057fe:	ea2c 0404 	bic.w	r4, ip, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005802:	d026      	beq.n	8005852 <HAL_GPIO_Init+0x156>
 8005804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005808:	4298      	cmp	r0, r3
 800580a:	d055      	beq.n	80058b8 <HAL_GPIO_Init+0x1bc>
 800580c:	4b41      	ldr	r3, [pc, #260]	; (8005914 <HAL_GPIO_Init+0x218>)
 800580e:	4298      	cmp	r0, r3
 8005810:	d04c      	beq.n	80058ac <HAL_GPIO_Init+0x1b0>
 8005812:	4b41      	ldr	r3, [pc, #260]	; (8005918 <HAL_GPIO_Init+0x21c>)
 8005814:	4298      	cmp	r0, r3
 8005816:	d05b      	beq.n	80058d0 <HAL_GPIO_Init+0x1d4>
 8005818:	4b40      	ldr	r3, [pc, #256]	; (800591c <HAL_GPIO_Init+0x220>)
 800581a:	4298      	cmp	r0, r3
 800581c:	d05e      	beq.n	80058dc <HAL_GPIO_Init+0x1e0>
 800581e:	4b40      	ldr	r3, [pc, #256]	; (8005920 <HAL_GPIO_Init+0x224>)
 8005820:	4298      	cmp	r0, r3
 8005822:	d04f      	beq.n	80058c4 <HAL_GPIO_Init+0x1c8>
 8005824:	f8df c100 	ldr.w	ip, [pc, #256]	; 8005928 <HAL_GPIO_Init+0x22c>
 8005828:	4560      	cmp	r0, ip
 800582a:	d05d      	beq.n	80058e8 <HAL_GPIO_Init+0x1ec>
 800582c:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 800592c <HAL_GPIO_Init+0x230>
 8005830:	4560      	cmp	r0, ip
 8005832:	d05f      	beq.n	80058f4 <HAL_GPIO_Init+0x1f8>
 8005834:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8005930 <HAL_GPIO_Init+0x234>
 8005838:	4560      	cmp	r0, ip
 800583a:	d061      	beq.n	8005900 <HAL_GPIO_Init+0x204>
 800583c:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8005934 <HAL_GPIO_Init+0x238>
 8005840:	4560      	cmp	r0, ip
 8005842:	bf0c      	ite	eq
 8005844:	f04f 0c09 	moveq.w	ip, #9
 8005848:	f04f 0c0a 	movne.w	ip, #10
 800584c:	fa0c f309 	lsl.w	r3, ip, r9
 8005850:	431c      	orrs	r4, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005852:	60bc      	str	r4, [r7, #8]
        temp &= ~(iocurrent);
 8005854:	43ec      	mvns	r4, r5
        temp = EXTI_CurrentCPU->IMR1;
 8005856:	f8d8 3000 	ldr.w	r3, [r8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800585a:	03d7      	lsls	r7, r2, #15
        {
          temp |= iocurrent;
 800585c:	bf4c      	ite	mi
 800585e:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 8005860:	4023      	andpl	r3, r4
        }
        EXTI_CurrentCPU->IMR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005862:	0397      	lsls	r7, r2, #14
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005864:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 = temp;
 8005868:	f8c8 3000 	str.w	r3, [r8]
        temp = EXTI_CurrentCPU->EMR1;
 800586c:	f8d8 3004 	ldr.w	r3, [r8, #4]
          temp |= iocurrent;
 8005870:	bf4c      	ite	mi
 8005872:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 8005874:	4023      	andpl	r3, r4
        EXTI_CurrentCPU->EMR1 = temp;
 8005876:	f8c8 3004 	str.w	r3, [r8, #4]
        temp = EXTI->RTSR1;
 800587a:	683b      	ldr	r3, [r7, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800587c:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800587e:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
          temp |= iocurrent;
 8005882:	bf4c      	ite	mi
 8005884:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 8005886:	4023      	andpl	r3, r4

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005888:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 800588a:	603b      	str	r3, [r7, #0]
        temp = EXTI->FTSR1;
 800588c:	687b      	ldr	r3, [r7, #4]
        temp &= ~(iocurrent);
 800588e:	bf54      	ite	pl
 8005890:	ea04 0503 	andpl.w	r5, r4, r3
        {
          temp |= iocurrent;
 8005894:	431d      	orrmi	r5, r3
        }
        EXTI->FTSR1 = temp;
 8005896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800589a:	605d      	str	r5, [r3, #4]
      }
    }

    position++;
 800589c:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800589e:	fa31 f306 	lsrs.w	r3, r1, r6
 80058a2:	f47f af36 	bne.w	8005712 <HAL_GPIO_Init+0x16>
  }
}
 80058a6:	b003      	add	sp, #12
 80058a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ac:	f04f 0c02 	mov.w	ip, #2
 80058b0:	fa0c f309 	lsl.w	r3, ip, r9
 80058b4:	431c      	orrs	r4, r3
 80058b6:	e7cc      	b.n	8005852 <HAL_GPIO_Init+0x156>
 80058b8:	f04f 0c01 	mov.w	ip, #1
 80058bc:	fa0c f309 	lsl.w	r3, ip, r9
 80058c0:	431c      	orrs	r4, r3
 80058c2:	e7c6      	b.n	8005852 <HAL_GPIO_Init+0x156>
 80058c4:	f04f 0c05 	mov.w	ip, #5
 80058c8:	fa0c f309 	lsl.w	r3, ip, r9
 80058cc:	431c      	orrs	r4, r3
 80058ce:	e7c0      	b.n	8005852 <HAL_GPIO_Init+0x156>
 80058d0:	f04f 0c03 	mov.w	ip, #3
 80058d4:	fa0c f309 	lsl.w	r3, ip, r9
 80058d8:	431c      	orrs	r4, r3
 80058da:	e7ba      	b.n	8005852 <HAL_GPIO_Init+0x156>
 80058dc:	f04f 0c04 	mov.w	ip, #4
 80058e0:	fa0c f309 	lsl.w	r3, ip, r9
 80058e4:	431c      	orrs	r4, r3
 80058e6:	e7b4      	b.n	8005852 <HAL_GPIO_Init+0x156>
 80058e8:	f04f 0c06 	mov.w	ip, #6
 80058ec:	fa0c f309 	lsl.w	r3, ip, r9
 80058f0:	431c      	orrs	r4, r3
 80058f2:	e7ae      	b.n	8005852 <HAL_GPIO_Init+0x156>
 80058f4:	f04f 0c07 	mov.w	ip, #7
 80058f8:	fa0c f309 	lsl.w	r3, ip, r9
 80058fc:	431c      	orrs	r4, r3
 80058fe:	e7a8      	b.n	8005852 <HAL_GPIO_Init+0x156>
 8005900:	f04f 0c08 	mov.w	ip, #8
 8005904:	fa0c f309 	lsl.w	r3, ip, r9
 8005908:	431c      	orrs	r4, r3
 800590a:	e7a2      	b.n	8005852 <HAL_GPIO_Init+0x156>
 800590c:	58024400 	.word	0x58024400
 8005910:	58000400 	.word	0x58000400
 8005914:	58020800 	.word	0x58020800
 8005918:	58020c00 	.word	0x58020c00
 800591c:	58021000 	.word	0x58021000
 8005920:	58021400 	.word	0x58021400
 8005924:	58000080 	.word	0x58000080
 8005928:	58021800 	.word	0x58021800
 800592c:	58021c00 	.word	0x58021c00
 8005930:	58022000 	.word	0x58022000
 8005934:	58022400 	.word	0x58022400

08005938 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005938:	b902      	cbnz	r2, 800593c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800593a:	0409      	lsls	r1, r1, #16
 800593c:	6181      	str	r1, [r0, #24]
  }
}
 800593e:	4770      	bx	lr

08005940 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005944:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8005948:	4201      	tst	r1, r0
 800594a:	d100      	bne.n	800594e <HAL_GPIO_EXTI_IRQHandler+0xe>
 800594c:	4770      	bx	lr
{
 800594e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005950:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005954:	f7fb fb08 	bl	8000f68 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005958:	bd08      	pop	{r3, pc}
 800595a:	bf00      	nop

0800595c <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800595c:	2800      	cmp	r0, #0
 800595e:	d066      	beq.n	8005a2e <HAL_LPTIM_Init+0xd2>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005960:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
{
 8005964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005968:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800596c:	4604      	mov	r4, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d03c      	beq.n	80059ec <HAL_LPTIM_Init+0x90>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005972:	2302      	movs	r3, #2
 8005974:	6960      	ldr	r0, [r4, #20]
 8005976:	68a2      	ldr	r2, [r4, #8]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005978:	f64f 7eff 	movw	lr, #65535	; 0xffff
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800597c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 8005980:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005982:	e9d4 1500 	ldrd	r1, r5, [r4]
 8005986:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 800598a:	2d01      	cmp	r5, #1
  tmpcfgr = hlptim->Instance->CFGR;
 800598c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005990:	d026      	beq.n	80059e0 <HAL_LPTIM_Init+0x84>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005992:	4570      	cmp	r0, lr
 8005994:	d001      	beq.n	800599a <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 8005996:	f42c 4c60 	bic.w	ip, ip, #57344	; 0xe000
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800599a:	bbb5      	cbnz	r5, 8005a0a <HAL_LPTIM_Init+0xae>
  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800599c:	4332      	orrs	r2, r6
 800599e:	69e6      	ldr	r6, [r4, #28]
 80059a0:	6925      	ldr	r5, [r4, #16]
 80059a2:	4313      	orrs	r3, r2
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80059a4:	4a2e      	ldr	r2, [pc, #184]	; (8005a60 <HAL_LPTIM_Init+0x104>)
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80059a6:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80059a8:	ea0c 0202 	and.w	r2, ip, r2
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80059ac:	4333      	orrs	r3, r6
 80059ae:	432b      	orrs	r3, r5
 80059b0:	4313      	orrs	r3, r2
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80059b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059b6:	4290      	cmp	r0, r2
 80059b8:	d002      	beq.n	80059c0 <HAL_LPTIM_Init+0x64>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 80059ba:	69a2      	ldr	r2, [r4, #24]
 80059bc:	4310      	orrs	r0, r2
 80059be:	4303      	orrs	r3, r0

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80059c0:	4a28      	ldr	r2, [pc, #160]	; (8005a64 <HAL_LPTIM_Init+0x108>)
  hlptim->Instance->CFGR = tmpcfgr;
 80059c2:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80059c4:	4291      	cmp	r1, r2
 80059c6:	d016      	beq.n	80059f6 <HAL_LPTIM_Init+0x9a>
 80059c8:	4b27      	ldr	r3, [pc, #156]	; (8005a68 <HAL_LPTIM_Init+0x10c>)
 80059ca:	4299      	cmp	r1, r3
 80059cc:	d013      	beq.n	80059f6 <HAL_LPTIM_Init+0x9a>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 80059ce:	4b27      	ldr	r3, [pc, #156]	; (8005a6c <HAL_LPTIM_Init+0x110>)
 80059d0:	4299      	cmp	r1, r3
 80059d2:	d03c      	beq.n	8005a4e <HAL_LPTIM_Init+0xf2>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80059d4:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 80059d6:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 80059d8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80059dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80059e0:	4570      	cmp	r0, lr
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 80059e2:	f02c 0806 	bic.w	r8, ip, #6
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80059e6:	d024      	beq.n	8005a32 <HAL_LPTIM_Init+0xd6>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 80059e8:	46c4      	mov	ip, r8
 80059ea:	e7d4      	b.n	8005996 <HAL_LPTIM_Init+0x3a>
    hlptim->Lock = HAL_UNLOCKED;
 80059ec:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 80059f0:	f7fd fae6 	bl	8002fc0 <HAL_LPTIM_MspInit>
 80059f4:	e7bd      	b.n	8005972 <HAL_LPTIM_Init+0x16>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80059f6:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 80059fa:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80059fc:	4313      	orrs	r3, r2
 80059fe:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8005a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005a0a:	432a      	orrs	r2, r5
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005a0c:	f8df e060 	ldr.w	lr, [pc, #96]	; 8005a70 <HAL_LPTIM_Init+0x114>
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005a10:	2d01      	cmp	r5, #1
              hlptim->Init.Clock.Prescaler |
 8005a12:	ea42 0206 	orr.w	r2, r2, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005a16:	ea0c 0e0e 	and.w	lr, ip, lr
              hlptim->Init.OutputPolarity  |
 8005a1a:	ea43 0302 	orr.w	r3, r3, r2
              hlptim->Init.UpdateMode      |
 8005a1e:	ea43 0307 	orr.w	r3, r3, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005a22:	ea43 030e 	orr.w	r3, r3, lr
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005a26:	d1c4      	bne.n	80059b2 <HAL_LPTIM_Init+0x56>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 8005a28:	68e2      	ldr	r2, [r4, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	e7c1      	b.n	80059b2 <HAL_LPTIM_Init+0x56>
    return HAL_ERROR;
 8005a2e:	2001      	movs	r0, #1
}
 8005a30:	4770      	bx	lr
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005a32:	f042 0501 	orr.w	r5, r2, #1
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005a36:	f8df e038 	ldr.w	lr, [pc, #56]	; 8005a70 <HAL_LPTIM_Init+0x114>
              hlptim->Init.Clock.Prescaler |
 8005a3a:	ea45 0206 	orr.w	r2, r5, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005a3e:	ea0c 0e0e 	and.w	lr, ip, lr
              hlptim->Init.OutputPolarity  |
 8005a42:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005a44:	ea42 0307 	orr.w	r3, r2, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005a48:	ea43 030e 	orr.w	r3, r3, lr
 8005a4c:	e7ec      	b.n	8005a28 <HAL_LPTIM_Init+0xcc>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8005a4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8005a50:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8005a52:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8005a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a5e:	bf00      	nop
 8005a60:	ff19f120 	.word	0xff19f120
 8005a64:	40002400 	.word	0x40002400
 8005a68:	58002400 	.word	0x58002400
 8005a6c:	58002800 	.word	0x58002800
 8005a70:	ff19f1f8 	.word	0xff19f1f8

08005a74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005a74:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005a76:	4b11      	ldr	r3, [pc, #68]	; (8005abc <HAL_PWREx_ConfigSupply+0x48>)
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	0752      	lsls	r2, r2, #29
 8005a7c:	d406      	bmi.n	8005a8c <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005a84:	1a18      	subs	r0, r3, r0
 8005a86:	bf18      	it	ne
 8005a88:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8005a8a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005a8c:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a8e:	461c      	mov	r4, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005a90:	f022 0207 	bic.w	r2, r2, #7
 8005a94:	4310      	orrs	r0, r2
 8005a96:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 8005a98:	f7fd fc9c 	bl	80033d4 <HAL_GetTick>
 8005a9c:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a9e:	e005      	b.n	8005aac <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005aa0:	f7fd fc98 	bl	80033d4 <HAL_GetTick>
 8005aa4:	1b40      	subs	r0, r0, r5
 8005aa6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005aaa:	d804      	bhi.n	8005ab6 <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005aac:	6863      	ldr	r3, [r4, #4]
 8005aae:	049b      	lsls	r3, r3, #18
 8005ab0:	d5f6      	bpl.n	8005aa0 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 8005ab2:	2000      	movs	r0, #0
}
 8005ab4:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8005ab6:	2001      	movs	r0, #1
}
 8005ab8:	bd38      	pop	{r3, r4, r5, pc}
 8005aba:	bf00      	nop
 8005abc:	58024800 	.word	0x58024800

08005ac0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	f000 819d 	beq.w	8005e00 <HAL_RCC_OscConfig+0x340>
{
 8005ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ac8:	6803      	ldr	r3, [r0, #0]
 8005aca:	4604      	mov	r4, r0
 8005acc:	07d9      	lsls	r1, r3, #31
 8005ace:	d533      	bpl.n	8005b38 <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ad0:	49a7      	ldr	r1, [pc, #668]	; (8005d70 <HAL_RCC_OscConfig+0x2b0>)
 8005ad2:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ad4:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ad6:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ada:	2a10      	cmp	r2, #16
 8005adc:	f000 8112 	beq.w	8005d04 <HAL_RCC_OscConfig+0x244>
 8005ae0:	2a18      	cmp	r2, #24
 8005ae2:	f000 810a 	beq.w	8005cfa <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ae6:	6863      	ldr	r3, [r4, #4]
 8005ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aec:	d010      	beq.n	8005b10 <HAL_RCC_OscConfig+0x50>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 816f 	beq.w	8005dd2 <HAL_RCC_OscConfig+0x312>
 8005af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005af8:	4b9d      	ldr	r3, [pc, #628]	; (8005d70 <HAL_RCC_OscConfig+0x2b0>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	f000 81e4 	beq.w	8005ec8 <HAL_RCC_OscConfig+0x408>
 8005b00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	e004      	b.n	8005b1a <HAL_RCC_OscConfig+0x5a>
 8005b10:	4a97      	ldr	r2, [pc, #604]	; (8005d70 <HAL_RCC_OscConfig+0x2b0>)
 8005b12:	6813      	ldr	r3, [r2, #0]
 8005b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1a:	f7fd fc5b 	bl	80033d4 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b1e:	4d94      	ldr	r5, [pc, #592]	; (8005d70 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8005b20:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b22:	e005      	b.n	8005b30 <HAL_RCC_OscConfig+0x70>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b24:	f7fd fc56 	bl	80033d4 <HAL_GetTick>
 8005b28:	1b80      	subs	r0, r0, r6
 8005b2a:	2864      	cmp	r0, #100	; 0x64
 8005b2c:	f200 814f 	bhi.w	8005dce <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	039f      	lsls	r7, r3, #14
 8005b34:	d5f6      	bpl.n	8005b24 <HAL_RCC_OscConfig+0x64>
 8005b36:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b38:	0799      	lsls	r1, r3, #30
 8005b3a:	f100 808e 	bmi.w	8005c5a <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005b3e:	06d9      	lsls	r1, r3, #27
 8005b40:	d534      	bpl.n	8005bac <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b42:	4a8b      	ldr	r2, [pc, #556]	; (8005d70 <HAL_RCC_OscConfig+0x2b0>)
 8005b44:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b46:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b48:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	f000 80e9 	beq.w	8005d24 <HAL_RCC_OscConfig+0x264>
 8005b52:	2b18      	cmp	r3, #24
 8005b54:	f000 80e1 	beq.w	8005d1a <HAL_RCC_OscConfig+0x25a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005b58:	69e3      	ldr	r3, [r4, #28]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 8178 	beq.w	8005e50 <HAL_RCC_OscConfig+0x390>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005b60:	4b83      	ldr	r3, [pc, #524]	; (8005d70 <HAL_RCC_OscConfig+0x2b0>)
 8005b62:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b64:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 8005b66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005b6c:	f7fd fc32 	bl	80033d4 <HAL_GetTick>
 8005b70:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b72:	e005      	b.n	8005b80 <HAL_RCC_OscConfig+0xc0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005b74:	f7fd fc2e 	bl	80033d4 <HAL_GetTick>
 8005b78:	1b80      	subs	r0, r0, r6
 8005b7a:	2802      	cmp	r0, #2
 8005b7c:	f200 8127 	bhi.w	8005dce <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	05db      	lsls	r3, r3, #23
 8005b84:	d5f6      	bpl.n	8005b74 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b86:	f7fd fc3d 	bl	8003404 <HAL_GetREVID>
 8005b8a:	f241 0303 	movw	r3, #4099	; 0x1003
 8005b8e:	4298      	cmp	r0, r3
 8005b90:	f200 825d 	bhi.w	800604e <HAL_RCC_OscConfig+0x58e>
 8005b94:	6a22      	ldr	r2, [r4, #32]
 8005b96:	686b      	ldr	r3, [r5, #4]
 8005b98:	2a20      	cmp	r2, #32
 8005b9a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005b9e:	bf0c      	ite	eq
 8005ba0:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8005ba4:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8005ba8:	606b      	str	r3, [r5, #4]
 8005baa:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bac:	071d      	lsls	r5, r3, #28
 8005bae:	d517      	bpl.n	8005be0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bb0:	6963      	ldr	r3, [r4, #20]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 8126 	beq.w	8005e04 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bb8:	4b6d      	ldr	r3, [pc, #436]	; (8005d70 <HAL_RCC_OscConfig+0x2b0>)
 8005bba:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bbc:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8005bbe:	f042 0201 	orr.w	r2, r2, #1
 8005bc2:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005bc4:	f7fd fc06 	bl	80033d4 <HAL_GetTick>
 8005bc8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bca:	e005      	b.n	8005bd8 <HAL_RCC_OscConfig+0x118>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bcc:	f7fd fc02 	bl	80033d4 <HAL_GetTick>
 8005bd0:	1b80      	subs	r0, r0, r6
 8005bd2:	2802      	cmp	r0, #2
 8005bd4:	f200 80fb 	bhi.w	8005dce <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bd8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005bda:	0798      	lsls	r0, r3, #30
 8005bdc:	d5f6      	bpl.n	8005bcc <HAL_RCC_OscConfig+0x10c>
 8005bde:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005be0:	069a      	lsls	r2, r3, #26
 8005be2:	d517      	bpl.n	8005c14 <HAL_RCC_OscConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005be4:	69a3      	ldr	r3, [r4, #24]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 811f 	beq.w	8005e2a <HAL_RCC_OscConfig+0x36a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bec:	4b60      	ldr	r3, [pc, #384]	; (8005d70 <HAL_RCC_OscConfig+0x2b0>)
 8005bee:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005bf0:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 8005bf2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bf6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005bf8:	f7fd fbec 	bl	80033d4 <HAL_GetTick>
 8005bfc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005bfe:	e005      	b.n	8005c0c <HAL_RCC_OscConfig+0x14c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005c00:	f7fd fbe8 	bl	80033d4 <HAL_GetTick>
 8005c04:	1b80      	subs	r0, r0, r6
 8005c06:	2802      	cmp	r0, #2
 8005c08:	f200 80e1 	bhi.w	8005dce <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c0c:	682b      	ldr	r3, [r5, #0]
 8005c0e:	049f      	lsls	r7, r3, #18
 8005c10:	d5f6      	bpl.n	8005c00 <HAL_RCC_OscConfig+0x140>
 8005c12:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c14:	0759      	lsls	r1, r3, #29
 8005c16:	f100 80a0 	bmi.w	8005d5a <HAL_RCC_OscConfig+0x29a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005c1c:	b1d8      	cbz	r0, 8005c56 <HAL_RCC_OscConfig+0x196>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005c1e:	4b54      	ldr	r3, [pc, #336]	; (8005d70 <HAL_RCC_OscConfig+0x2b0>)
 8005c20:	691a      	ldr	r2, [r3, #16]
 8005c22:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8005c26:	2a18      	cmp	r2, #24
 8005c28:	f000 81c9 	beq.w	8005fbe <HAL_RCC_OscConfig+0x4fe>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c2c:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c2e:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c30:	f000 815b 	beq.w	8005eea <HAL_RCC_OscConfig+0x42a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c34:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c38:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8005c3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005c3c:	f7fd fbca 	bl	80033d4 <HAL_GetTick>
 8005c40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c42:	e005      	b.n	8005c50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c44:	f7fd fbc6 	bl	80033d4 <HAL_GetTick>
 8005c48:	1b40      	subs	r0, r0, r5
 8005c4a:	2802      	cmp	r0, #2
 8005c4c:	f200 80bf 	bhi.w	8005dce <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	019b      	lsls	r3, r3, #6
 8005c54:	d4f6      	bmi.n	8005c44 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8005c56:	2000      	movs	r0, #0
}
 8005c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c5a:	4a45      	ldr	r2, [pc, #276]	; (8005d70 <HAL_RCC_OscConfig+0x2b0>)
 8005c5c:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c5e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c60:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8005c64:	d02f      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x206>
 8005c66:	2b18      	cmp	r3, #24
 8005c68:	d02b      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x202>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c6a:	68e2      	ldr	r2, [r4, #12]
 8005c6c:	2a00      	cmp	r2, #0
 8005c6e:	f000 8103 	beq.w	8005e78 <HAL_RCC_OscConfig+0x3b8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c72:	493f      	ldr	r1, [pc, #252]	; (8005d70 <HAL_RCC_OscConfig+0x2b0>)
 8005c74:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c76:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c78:	f023 0319 	bic.w	r3, r3, #25
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8005c80:	f7fd fba8 	bl	80033d4 <HAL_GetTick>
 8005c84:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c86:	e005      	b.n	8005c94 <HAL_RCC_OscConfig+0x1d4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c88:	f7fd fba4 	bl	80033d4 <HAL_GetTick>
 8005c8c:	1b80      	subs	r0, r0, r6
 8005c8e:	2802      	cmp	r0, #2
 8005c90:	f200 809d 	bhi.w	8005dce <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	075f      	lsls	r7, r3, #29
 8005c98:	d5f6      	bpl.n	8005c88 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c9a:	f7fd fbb3 	bl	8003404 <HAL_GetREVID>
 8005c9e:	f241 0303 	movw	r3, #4099	; 0x1003
 8005ca2:	4298      	cmp	r0, r3
 8005ca4:	f200 81e2 	bhi.w	800606c <HAL_RCC_OscConfig+0x5ac>
 8005ca8:	6922      	ldr	r2, [r4, #16]
 8005caa:	686b      	ldr	r3, [r5, #4]
 8005cac:	2a40      	cmp	r2, #64	; 0x40
 8005cae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005cb2:	bf0c      	ite	eq
 8005cb4:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8005cb8:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8005cbc:	606b      	str	r3, [r5, #4]
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	e73d      	b.n	8005b3e <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005cc2:	0792      	lsls	r2, r2, #30
 8005cc4:	d1d1      	bne.n	8005c6a <HAL_RCC_OscConfig+0x1aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cc6:	4b2a      	ldr	r3, [pc, #168]	; (8005d70 <HAL_RCC_OscConfig+0x2b0>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	075b      	lsls	r3, r3, #29
 8005ccc:	d501      	bpl.n	8005cd2 <HAL_RCC_OscConfig+0x212>
 8005cce:	68e3      	ldr	r3, [r4, #12]
 8005cd0:	b30b      	cbz	r3, 8005d16 <HAL_RCC_OscConfig+0x256>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cd2:	f7fd fb97 	bl	8003404 <HAL_GetREVID>
 8005cd6:	f241 0303 	movw	r3, #4099	; 0x1003
 8005cda:	4298      	cmp	r0, r3
 8005cdc:	f200 80e0 	bhi.w	8005ea0 <HAL_RCC_OscConfig+0x3e0>
 8005ce0:	6922      	ldr	r2, [r4, #16]
 8005ce2:	2a40      	cmp	r2, #64	; 0x40
 8005ce4:	f000 80f8 	beq.w	8005ed8 <HAL_RCC_OscConfig+0x418>
 8005ce8:	4921      	ldr	r1, [pc, #132]	; (8005d70 <HAL_RCC_OscConfig+0x2b0>)
 8005cea:	684b      	ldr	r3, [r1, #4]
 8005cec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005cf0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8005cf4:	604b      	str	r3, [r1, #4]
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	e721      	b.n	8005b3e <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005cfa:	f001 0103 	and.w	r1, r1, #3
 8005cfe:	2902      	cmp	r1, #2
 8005d00:	f47f aef1 	bne.w	8005ae6 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d04:	4a1a      	ldr	r2, [pc, #104]	; (8005d70 <HAL_RCC_OscConfig+0x2b0>)
 8005d06:	6812      	ldr	r2, [r2, #0]
 8005d08:	0392      	lsls	r2, r2, #14
 8005d0a:	f57f af15 	bpl.w	8005b38 <HAL_RCC_OscConfig+0x78>
 8005d0e:	6862      	ldr	r2, [r4, #4]
 8005d10:	2a00      	cmp	r2, #0
 8005d12:	f47f af11 	bne.w	8005b38 <HAL_RCC_OscConfig+0x78>
        return HAL_ERROR;
 8005d16:	2001      	movs	r0, #1
}
 8005d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005d1a:	f002 0203 	and.w	r2, r2, #3
 8005d1e:	2a01      	cmp	r2, #1
 8005d20:	f47f af1a 	bne.w	8005b58 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d24:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <HAL_RCC_OscConfig+0x2b0>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	05da      	lsls	r2, r3, #23
 8005d2a:	d502      	bpl.n	8005d32 <HAL_RCC_OscConfig+0x272>
 8005d2c:	69e3      	ldr	r3, [r4, #28]
 8005d2e:	2b80      	cmp	r3, #128	; 0x80
 8005d30:	d1f1      	bne.n	8005d16 <HAL_RCC_OscConfig+0x256>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d32:	f7fd fb67 	bl	8003404 <HAL_GetREVID>
 8005d36:	f241 0303 	movw	r3, #4099	; 0x1003
 8005d3a:	4298      	cmp	r0, r3
 8005d3c:	f200 80ba 	bhi.w	8005eb4 <HAL_RCC_OscConfig+0x3f4>
 8005d40:	6a22      	ldr	r2, [r4, #32]
 8005d42:	2a20      	cmp	r2, #32
 8005d44:	f000 81a1 	beq.w	800608a <HAL_RCC_OscConfig+0x5ca>
 8005d48:	4909      	ldr	r1, [pc, #36]	; (8005d70 <HAL_RCC_OscConfig+0x2b0>)
 8005d4a:	684b      	ldr	r3, [r1, #4]
 8005d4c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005d50:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8005d54:	604b      	str	r3, [r1, #4]
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	e728      	b.n	8005bac <HAL_RCC_OscConfig+0xec>
    PWR->CR1 |= PWR_CR1_DBP;
 8005d5a:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <HAL_RCC_OscConfig+0x2b4>)
 8005d5c:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d5e:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8005d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d64:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005d66:	f7fd fb35 	bl	80033d4 <HAL_GetTick>
 8005d6a:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d6c:	e009      	b.n	8005d82 <HAL_RCC_OscConfig+0x2c2>
 8005d6e:	bf00      	nop
 8005d70:	58024400 	.word	0x58024400
 8005d74:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d78:	f7fd fb2c 	bl	80033d4 <HAL_GetTick>
 8005d7c:	1b80      	subs	r0, r0, r6
 8005d7e:	2864      	cmp	r0, #100	; 0x64
 8005d80:	d825      	bhi.n	8005dce <HAL_RCC_OscConfig+0x30e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d82:	682b      	ldr	r3, [r5, #0]
 8005d84:	05da      	lsls	r2, r3, #23
 8005d86:	d5f7      	bpl.n	8005d78 <HAL_RCC_OscConfig+0x2b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d88:	68a3      	ldr	r3, [r4, #8]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	f000 8177 	beq.w	800607e <HAL_RCC_OscConfig+0x5be>
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 8142 	beq.w	800601a <HAL_RCC_OscConfig+0x55a>
 8005d96:	2b05      	cmp	r3, #5
 8005d98:	4bb1      	ldr	r3, [pc, #708]	; (8006060 <HAL_RCC_OscConfig+0x5a0>)
 8005d9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d9c:	f000 817e 	beq.w	800609c <HAL_RCC_OscConfig+0x5dc>
 8005da0:	f022 0201 	bic.w	r2, r2, #1
 8005da4:	671a      	str	r2, [r3, #112]	; 0x70
 8005da6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005da8:	f022 0204 	bic.w	r2, r2, #4
 8005dac:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005dae:	f7fd fb11 	bl	80033d4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005db2:	4dab      	ldr	r5, [pc, #684]	; (8006060 <HAL_RCC_OscConfig+0x5a0>)
      tickstart = HAL_GetTick();
 8005db4:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005db6:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dba:	e004      	b.n	8005dc6 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dbc:	f7fd fb0a 	bl	80033d4 <HAL_GetTick>
 8005dc0:	1bc0      	subs	r0, r0, r7
 8005dc2:	42b0      	cmp	r0, r6
 8005dc4:	d803      	bhi.n	8005dce <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dc6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005dc8:	079b      	lsls	r3, r3, #30
 8005dca:	d5f7      	bpl.n	8005dbc <HAL_RCC_OscConfig+0x2fc>
 8005dcc:	e725      	b.n	8005c1a <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 8005dce:	2003      	movs	r0, #3
}
 8005dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dd2:	4ba3      	ldr	r3, [pc, #652]	; (8006060 <HAL_RCC_OscConfig+0x5a0>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005dd6:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dd8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005de4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005de6:	f7fd faf5 	bl	80033d4 <HAL_GetTick>
 8005dea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005dec:	e004      	b.n	8005df8 <HAL_RCC_OscConfig+0x338>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dee:	f7fd faf1 	bl	80033d4 <HAL_GetTick>
 8005df2:	1b80      	subs	r0, r0, r6
 8005df4:	2864      	cmp	r0, #100	; 0x64
 8005df6:	d8ea      	bhi.n	8005dce <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	0398      	lsls	r0, r3, #14
 8005dfc:	d4f7      	bmi.n	8005dee <HAL_RCC_OscConfig+0x32e>
 8005dfe:	e69a      	b.n	8005b36 <HAL_RCC_OscConfig+0x76>
    return HAL_ERROR;
 8005e00:	2001      	movs	r0, #1
}
 8005e02:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 8005e04:	4b96      	ldr	r3, [pc, #600]	; (8006060 <HAL_RCC_OscConfig+0x5a0>)
 8005e06:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e08:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8005e0a:	f022 0201 	bic.w	r2, r2, #1
 8005e0e:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005e10:	f7fd fae0 	bl	80033d4 <HAL_GetTick>
 8005e14:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e16:	e004      	b.n	8005e22 <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e18:	f7fd fadc 	bl	80033d4 <HAL_GetTick>
 8005e1c:	1b80      	subs	r0, r0, r6
 8005e1e:	2802      	cmp	r0, #2
 8005e20:	d8d5      	bhi.n	8005dce <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e22:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005e24:	0799      	lsls	r1, r3, #30
 8005e26:	d4f7      	bmi.n	8005e18 <HAL_RCC_OscConfig+0x358>
 8005e28:	e6d9      	b.n	8005bde <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSI48_DISABLE();
 8005e2a:	4b8d      	ldr	r3, [pc, #564]	; (8006060 <HAL_RCC_OscConfig+0x5a0>)
 8005e2c:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e2e:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 8005e30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e34:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005e36:	f7fd facd 	bl	80033d4 <HAL_GetTick>
 8005e3a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e3c:	e004      	b.n	8005e48 <HAL_RCC_OscConfig+0x388>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005e3e:	f7fd fac9 	bl	80033d4 <HAL_GetTick>
 8005e42:	1b80      	subs	r0, r0, r6
 8005e44:	2802      	cmp	r0, #2
 8005e46:	d8c2      	bhi.n	8005dce <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e48:	682b      	ldr	r3, [r5, #0]
 8005e4a:	0498      	lsls	r0, r3, #18
 8005e4c:	d4f7      	bmi.n	8005e3e <HAL_RCC_OscConfig+0x37e>
 8005e4e:	e6e0      	b.n	8005c12 <HAL_RCC_OscConfig+0x152>
        __HAL_RCC_CSI_DISABLE();
 8005e50:	4b83      	ldr	r3, [pc, #524]	; (8006060 <HAL_RCC_OscConfig+0x5a0>)
 8005e52:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e54:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 8005e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e5a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005e5c:	f7fd faba 	bl	80033d4 <HAL_GetTick>
 8005e60:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e62:	e004      	b.n	8005e6e <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005e64:	f7fd fab6 	bl	80033d4 <HAL_GetTick>
 8005e68:	1b80      	subs	r0, r0, r6
 8005e6a:	2802      	cmp	r0, #2
 8005e6c:	d8af      	bhi.n	8005dce <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e6e:	682b      	ldr	r3, [r5, #0]
 8005e70:	05df      	lsls	r7, r3, #23
 8005e72:	d4f7      	bmi.n	8005e64 <HAL_RCC_OscConfig+0x3a4>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	e699      	b.n	8005bac <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8005e78:	4b79      	ldr	r3, [pc, #484]	; (8006060 <HAL_RCC_OscConfig+0x5a0>)
 8005e7a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e7c:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8005e7e:	f022 0201 	bic.w	r2, r2, #1
 8005e82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005e84:	f7fd faa6 	bl	80033d4 <HAL_GetTick>
 8005e88:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e8a:	e004      	b.n	8005e96 <HAL_RCC_OscConfig+0x3d6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e8c:	f7fd faa2 	bl	80033d4 <HAL_GetTick>
 8005e90:	1b80      	subs	r0, r0, r6
 8005e92:	2802      	cmp	r0, #2
 8005e94:	d89b      	bhi.n	8005dce <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e96:	682b      	ldr	r3, [r5, #0]
 8005e98:	0758      	lsls	r0, r3, #29
 8005e9a:	d4f7      	bmi.n	8005e8c <HAL_RCC_OscConfig+0x3cc>
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	e64e      	b.n	8005b3e <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ea0:	4a6f      	ldr	r2, [pc, #444]	; (8006060 <HAL_RCC_OscConfig+0x5a0>)
 8005ea2:	6921      	ldr	r1, [r4, #16]
 8005ea4:	6853      	ldr	r3, [r2, #4]
 8005ea6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005eaa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005eae:	6053      	str	r3, [r2, #4]
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	e644      	b.n	8005b3e <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005eb4:	4a6a      	ldr	r2, [pc, #424]	; (8006060 <HAL_RCC_OscConfig+0x5a0>)
 8005eb6:	6a21      	ldr	r1, [r4, #32]
 8005eb8:	68d3      	ldr	r3, [r2, #12]
 8005eba:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8005ebe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005ec2:	60d3      	str	r3, [r2, #12]
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	e671      	b.n	8005bac <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ec8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	e620      	b.n	8005b1a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed8:	4a61      	ldr	r2, [pc, #388]	; (8006060 <HAL_RCC_OscConfig+0x5a0>)
 8005eda:	6853      	ldr	r3, [r2, #4]
 8005edc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ee4:	6053      	str	r3, [r2, #4]
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	e629      	b.n	8005b3e <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_PLL_DISABLE();
 8005eea:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005eee:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8005ef0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005ef2:	f7fd fa6f 	bl	80033d4 <HAL_GetTick>
 8005ef6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ef8:	e005      	b.n	8005f06 <HAL_RCC_OscConfig+0x446>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005efa:	f7fd fa6b 	bl	80033d4 <HAL_GetTick>
 8005efe:	1b80      	subs	r0, r0, r6
 8005f00:	2802      	cmp	r0, #2
 8005f02:	f63f af64 	bhi.w	8005dce <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f06:	682b      	ldr	r3, [r5, #0]
 8005f08:	0199      	lsls	r1, r3, #6
 8005f0a:	d4f6      	bmi.n	8005efa <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f0c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005f0e:	4b55      	ldr	r3, [pc, #340]	; (8006064 <HAL_RCC_OscConfig+0x5a4>)
 8005f10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005f12:	4013      	ands	r3, r2
 8005f14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f16:	4954      	ldr	r1, [pc, #336]	; (8006068 <HAL_RCC_OscConfig+0x5a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f18:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f1a:	4e51      	ldr	r6, [pc, #324]	; (8006060 <HAL_RCC_OscConfig+0x5a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f1c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005f20:	62ab      	str	r3, [r5, #40]	; 0x28
 8005f22:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8005f24:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8005f28:	3f01      	subs	r7, #1
 8005f2a:	1e50      	subs	r0, r2, #1
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005f30:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8005f34:	025b      	lsls	r3, r3, #9
 8005f36:	0400      	lsls	r0, r0, #16
 8005f38:	3a01      	subs	r2, #1
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8005f40:	0612      	lsls	r2, r2, #24
 8005f42:	4303      	orrs	r3, r0
 8005f44:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005f48:	433b      	orrs	r3, r7
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8005f4e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005f50:	f023 0301 	bic.w	r3, r3, #1
 8005f54:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f56:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005f58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005f5a:	4011      	ands	r1, r2
 8005f5c:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8005f60:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005f62:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005f64:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005f66:	f023 030c 	bic.w	r3, r3, #12
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005f6e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005f70:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005f72:	f023 0302 	bic.w	r3, r3, #2
 8005f76:	4313      	orrs	r3, r2
 8005f78:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f7a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f80:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f82:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f88:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005f8a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f90:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8005f92:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005f94:	f043 0301 	orr.w	r3, r3, #1
 8005f98:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8005f9a:	682b      	ldr	r3, [r5, #0]
 8005f9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fa0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005fa2:	f7fd fa17 	bl	80033d4 <HAL_GetTick>
 8005fa6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fa8:	e005      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005faa:	f7fd fa13 	bl	80033d4 <HAL_GetTick>
 8005fae:	1b00      	subs	r0, r0, r4
 8005fb0:	2802      	cmp	r0, #2
 8005fb2:	f63f af0c 	bhi.w	8005dce <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fb6:	6833      	ldr	r3, [r6, #0]
 8005fb8:	019a      	lsls	r2, r3, #6
 8005fba:	d5f6      	bpl.n	8005faa <HAL_RCC_OscConfig+0x4ea>
 8005fbc:	e64b      	b.n	8005c56 <HAL_RCC_OscConfig+0x196>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fbe:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005fc2:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fc4:	f43f ae48 	beq.w	8005c58 <HAL_RCC_OscConfig+0x198>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fc8:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fcc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005fce:	428b      	cmp	r3, r1
 8005fd0:	f47f aea1 	bne.w	8005d16 <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fd4:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	f47f ae9b 	bne.w	8005d16 <HAL_RCC_OscConfig+0x256>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005fe0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005fe2:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8005fe6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	f47f ae94 	bne.w	8005d16 <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005fee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ff0:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8005ff4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	f47f ae8d 	bne.w	8005d16 <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ffc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ffe:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8006002:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006004:	429a      	cmp	r2, r3
 8006006:	f47f ae86 	bne.w	8005d16 <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800600a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800600c:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8006010:	3801      	subs	r0, #1
    return HAL_ERROR;
 8006012:	1a28      	subs	r0, r5, r0
 8006014:	bf18      	it	ne
 8006016:	2001      	movne	r0, #1
 8006018:	e61e      	b.n	8005c58 <HAL_RCC_OscConfig+0x198>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800601a:	4b11      	ldr	r3, [pc, #68]	; (8006060 <HAL_RCC_OscConfig+0x5a0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800601c:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006020:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006022:	461d      	mov	r5, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006024:	f022 0201 	bic.w	r2, r2, #1
 8006028:	671a      	str	r2, [r3, #112]	; 0x70
 800602a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800602c:	f022 0204 	bic.w	r2, r2, #4
 8006030:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006032:	f7fd f9cf 	bl	80033d4 <HAL_GetTick>
 8006036:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006038:	e005      	b.n	8006046 <HAL_RCC_OscConfig+0x586>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800603a:	f7fd f9cb 	bl	80033d4 <HAL_GetTick>
 800603e:	1b80      	subs	r0, r0, r6
 8006040:	42b8      	cmp	r0, r7
 8006042:	f63f aec4 	bhi.w	8005dce <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006046:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006048:	0798      	lsls	r0, r3, #30
 800604a:	d4f6      	bmi.n	800603a <HAL_RCC_OscConfig+0x57a>
 800604c:	e5e5      	b.n	8005c1a <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800604e:	68eb      	ldr	r3, [r5, #12]
 8006050:	6a22      	ldr	r2, [r4, #32]
 8006052:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006056:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800605a:	60eb      	str	r3, [r5, #12]
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	e5a5      	b.n	8005bac <HAL_RCC_OscConfig+0xec>
 8006060:	58024400 	.word	0x58024400
 8006064:	fffffc0c 	.word	0xfffffc0c
 8006068:	ffff0007 	.word	0xffff0007
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800606c:	686b      	ldr	r3, [r5, #4]
 800606e:	6922      	ldr	r2, [r4, #16]
 8006070:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006074:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006078:	606b      	str	r3, [r5, #4]
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	e55f      	b.n	8005b3e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800607e:	4a0b      	ldr	r2, [pc, #44]	; (80060ac <HAL_RCC_OscConfig+0x5ec>)
 8006080:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006082:	f043 0301 	orr.w	r3, r3, #1
 8006086:	6713      	str	r3, [r2, #112]	; 0x70
 8006088:	e691      	b.n	8005dae <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800608a:	4a08      	ldr	r2, [pc, #32]	; (80060ac <HAL_RCC_OscConfig+0x5ec>)
 800608c:	6853      	ldr	r3, [r2, #4]
 800608e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006092:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006096:	6053      	str	r3, [r2, #4]
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	e587      	b.n	8005bac <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800609c:	f042 0204 	orr.w	r2, r2, #4
 80060a0:	671a      	str	r2, [r3, #112]	; 0x70
 80060a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060a4:	f042 0201 	orr.w	r2, r2, #1
 80060a8:	671a      	str	r2, [r3, #112]	; 0x70
 80060aa:	e680      	b.n	8005dae <HAL_RCC_OscConfig+0x2ee>
 80060ac:	58024400 	.word	0x58024400

080060b0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80060b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060b2:	460e      	mov	r6, r1
 80060b4:	b089      	sub	sp, #36	; 0x24
 80060b6:	4615      	mov	r5, r2
  if(RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80060b8:	4c22      	ldr	r4, [pc, #136]	; (8006144 <HAL_RCC_MCOConfig+0x94>)
  if(RCC_MCOx == RCC_MCO1)
 80060ba:	b310      	cbz	r0, 8006102 <HAL_RCC_MCOConfig+0x52>
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 80060bc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0

    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060c0:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = MCO2_PIN;
 80060c2:	f44f 7000 	mov.w	r0, #512	; 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060c6:	2103      	movs	r1, #3
    MCO2_CLK_ENABLE();
 80060c8:	f043 0304 	orr.w	r3, r3, #4
 80060cc:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80060d0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d4:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d6:	2200      	movs	r2, #0
    MCO2_CLK_ENABLE();
 80060d8:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 80060dc:	9003      	str	r0, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060de:	9106      	str	r1, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80060e0:	a903      	add	r1, sp, #12
    MCO2_CLK_ENABLE();
 80060e2:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80060e4:	4818      	ldr	r0, [pc, #96]	; (8006148 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 80060e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e8:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80060ea:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80060ec:	f7ff fb06 	bl	80056fc <HAL_GPIO_Init>

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80060f0:	6921      	ldr	r1, [r4, #16]
 80060f2:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 80060f6:	4331      	orrs	r1, r6
 80060f8:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 80060fc:	6121      	str	r1, [r4, #16]
  }
}
 80060fe:	b009      	add	sp, #36	; 0x24
 8006100:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MCO1_CLK_ENABLE();
 8006102:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006106:	f44f 7280 	mov.w	r2, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800610a:	2702      	movs	r7, #2
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800610c:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800610e:	f043 0301 	orr.w	r3, r3, #1
 8006112:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8006116:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = MCO1_PIN;
 800611a:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800611c:	2203      	movs	r2, #3
    MCO1_CLK_ENABLE();
 800611e:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006122:	9005      	str	r0, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006124:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 8006126:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006128:	4808      	ldr	r0, [pc, #32]	; (800614c <HAL_RCC_MCOConfig+0x9c>)
    MCO1_CLK_ENABLE();
 800612a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800612c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800612e:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006130:	f7ff fae4 	bl	80056fc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006134:	6921      	ldr	r1, [r4, #16]
 8006136:	f021 71fe 	bic.w	r1, r1, #33292288	; 0x1fc0000
 800613a:	4331      	orrs	r1, r6
 800613c:	4329      	orrs	r1, r5
 800613e:	6121      	str	r1, [r4, #16]
}
 8006140:	b009      	add	sp, #36	; 0x24
 8006142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006144:	58024400 	.word	0x58024400
 8006148:	58020800 	.word	0x58020800
 800614c:	58020000 	.word	0x58020000

08006150 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006150:	4a3e      	ldr	r2, [pc, #248]	; (800624c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006152:	6913      	ldr	r3, [r2, #16]
 8006154:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006158:	2b10      	cmp	r3, #16
 800615a:	d04f      	beq.n	80061fc <HAL_RCC_GetSysClockFreq+0xac>
 800615c:	2b18      	cmp	r3, #24
 800615e:	d00b      	beq.n	8006178 <HAL_RCC_GetSysClockFreq+0x28>
 8006160:	b10b      	cbz	r3, 8006166 <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006162:	483b      	ldr	r0, [pc, #236]	; (8006250 <HAL_RCC_GetSysClockFreq+0x100>)
 8006164:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006166:	6813      	ldr	r3, [r2, #0]
 8006168:	0699      	lsls	r1, r3, #26
 800616a:	d549      	bpl.n	8006200 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800616c:	6813      	ldr	r3, [r2, #0]
 800616e:	4839      	ldr	r0, [pc, #228]	; (8006254 <HAL_RCC_GetSysClockFreq+0x104>)
 8006170:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006174:	40d8      	lsrs	r0, r3
 8006176:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006178:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800617a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800617c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800617e:	f3c0 1005 	ubfx	r0, r0, #4, #6
{
 8006182:	b410      	push	{r4}
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006184:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 8006186:	b3b0      	cbz	r0, 80061f6 <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006188:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800618c:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006190:	f001 0103 	and.w	r1, r1, #3
 8006194:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006198:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 800619c:	2901      	cmp	r1, #1
 800619e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80061a2:	ee07 3a10 	vmov	s14, r3
 80061a6:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 80061aa:	d002      	beq.n	80061b2 <HAL_RCC_GetSysClockFreq+0x62>
 80061ac:	d32d      	bcc.n	800620a <HAL_RCC_GetSysClockFreq+0xba>
 80061ae:	2902      	cmp	r1, #2
 80061b0:	d028      	beq.n	8006204 <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061b2:	eddf 5a29 	vldr	s11, [pc, #164]	; 8006258 <HAL_RCC_GetSysClockFreq+0x108>
 80061b6:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80061ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80061bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c0:	ee07 3a90 	vmov	s15, r3
 80061c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80061c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061cc:	ee77 7a86 	vadd.f32	s15, s15, s12
 80061d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061d4:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80061d8:	4b1c      	ldr	r3, [pc, #112]	; (800624c <HAL_RCC_GetSysClockFreq+0xfc>)
 80061da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061dc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80061e0:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80061e2:	ee07 3a90 	vmov	s15, r3
 80061e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80061ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061f2:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80061f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061fa:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80061fc:	4817      	ldr	r0, [pc, #92]	; (800625c <HAL_RCC_GetSysClockFreq+0x10c>)
 80061fe:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006200:	4814      	ldr	r0, [pc, #80]	; (8006254 <HAL_RCC_GetSysClockFreq+0x104>)
}
 8006202:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006204:	eddf 5a16 	vldr	s11, [pc, #88]	; 8006260 <HAL_RCC_GetSysClockFreq+0x110>
 8006208:	e7d5      	b.n	80061b6 <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800620a:	6813      	ldr	r3, [r2, #0]
 800620c:	069b      	lsls	r3, r3, #26
 800620e:	d51a      	bpl.n	8006246 <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006210:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006212:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006216:	490f      	ldr	r1, [pc, #60]	; (8006254 <HAL_RCC_GetSysClockFreq+0x104>)
 8006218:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800621c:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800621e:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006224:	ee06 1a90 	vmov	s13, r1
 8006228:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 800622c:	ee06 3a90 	vmov	s13, r3
 8006230:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8006234:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8006238:	ee76 7a05 	vadd.f32	s15, s12, s10
 800623c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006240:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006244:	e7c8      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006246:	eddf 5a07 	vldr	s11, [pc, #28]	; 8006264 <HAL_RCC_GetSysClockFreq+0x114>
 800624a:	e7b4      	b.n	80061b6 <HAL_RCC_GetSysClockFreq+0x66>
 800624c:	58024400 	.word	0x58024400
 8006250:	003d0900 	.word	0x003d0900
 8006254:	03d09000 	.word	0x03d09000
 8006258:	4a742400 	.word	0x4a742400
 800625c:	007a1200 	.word	0x007a1200
 8006260:	4af42400 	.word	0x4af42400
 8006264:	4c742400 	.word	0x4c742400

08006268 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8006268:	b178      	cbz	r0, 800628a <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800626a:	4a8e      	ldr	r2, [pc, #568]	; (80064a4 <HAL_RCC_ClockConfig+0x23c>)
 800626c:	6813      	ldr	r3, [r2, #0]
 800626e:	f003 030f 	and.w	r3, r3, #15
 8006272:	428b      	cmp	r3, r1
 8006274:	d20b      	bcs.n	800628e <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006276:	6813      	ldr	r3, [r2, #0]
 8006278:	f023 030f 	bic.w	r3, r3, #15
 800627c:	430b      	orrs	r3, r1
 800627e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006280:	6813      	ldr	r3, [r2, #0]
 8006282:	f003 030f 	and.w	r3, r3, #15
 8006286:	428b      	cmp	r3, r1
 8006288:	d001      	beq.n	800628e <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800628a:	2001      	movs	r0, #1
}
 800628c:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800628e:	6803      	ldr	r3, [r0, #0]
{
 8006290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006294:	075d      	lsls	r5, r3, #29
 8006296:	d50b      	bpl.n	80062b0 <HAL_RCC_ClockConfig+0x48>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006298:	4c83      	ldr	r4, [pc, #524]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 800629a:	6905      	ldr	r5, [r0, #16]
 800629c:	69a2      	ldr	r2, [r4, #24]
 800629e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80062a2:	4295      	cmp	r5, r2
 80062a4:	d904      	bls.n	80062b0 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80062a6:	69a2      	ldr	r2, [r4, #24]
 80062a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80062ac:	432a      	orrs	r2, r5
 80062ae:	61a2      	str	r2, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b0:	071c      	lsls	r4, r3, #28
 80062b2:	d50b      	bpl.n	80062cc <HAL_RCC_ClockConfig+0x64>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80062b4:	4c7c      	ldr	r4, [pc, #496]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 80062b6:	6945      	ldr	r5, [r0, #20]
 80062b8:	69e2      	ldr	r2, [r4, #28]
 80062ba:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80062be:	4295      	cmp	r5, r2
 80062c0:	d904      	bls.n	80062cc <HAL_RCC_ClockConfig+0x64>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062c2:	69e2      	ldr	r2, [r4, #28]
 80062c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80062c8:	432a      	orrs	r2, r5
 80062ca:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062cc:	06da      	lsls	r2, r3, #27
 80062ce:	d50b      	bpl.n	80062e8 <HAL_RCC_ClockConfig+0x80>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062d0:	4c75      	ldr	r4, [pc, #468]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 80062d2:	6985      	ldr	r5, [r0, #24]
 80062d4:	69e2      	ldr	r2, [r4, #28]
 80062d6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80062da:	4295      	cmp	r5, r2
 80062dc:	d904      	bls.n	80062e8 <HAL_RCC_ClockConfig+0x80>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062de:	69e2      	ldr	r2, [r4, #28]
 80062e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062e4:	432a      	orrs	r2, r5
 80062e6:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062e8:	069f      	lsls	r7, r3, #26
 80062ea:	d50b      	bpl.n	8006304 <HAL_RCC_ClockConfig+0x9c>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062ec:	4c6e      	ldr	r4, [pc, #440]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 80062ee:	69c5      	ldr	r5, [r0, #28]
 80062f0:	6a22      	ldr	r2, [r4, #32]
 80062f2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80062f6:	4295      	cmp	r5, r2
 80062f8:	d904      	bls.n	8006304 <HAL_RCC_ClockConfig+0x9c>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80062fa:	6a22      	ldr	r2, [r4, #32]
 80062fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006300:	432a      	orrs	r2, r5
 8006302:	6222      	str	r2, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006304:	079e      	lsls	r6, r3, #30
 8006306:	4604      	mov	r4, r0
 8006308:	460d      	mov	r5, r1
 800630a:	f003 0201 	and.w	r2, r3, #1
 800630e:	d55d      	bpl.n	80063cc <HAL_RCC_ClockConfig+0x164>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006310:	4e65      	ldr	r6, [pc, #404]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 8006312:	68c0      	ldr	r0, [r0, #12]
 8006314:	69b1      	ldr	r1, [r6, #24]
 8006316:	f001 010f 	and.w	r1, r1, #15
 800631a:	4288      	cmp	r0, r1
 800631c:	d904      	bls.n	8006328 <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800631e:	69b1      	ldr	r1, [r6, #24]
 8006320:	f021 010f 	bic.w	r1, r1, #15
 8006324:	4301      	orrs	r1, r0
 8006326:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006328:	2a00      	cmp	r2, #0
 800632a:	d031      	beq.n	8006390 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800632c:	4a5e      	ldr	r2, [pc, #376]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 800632e:	68a1      	ldr	r1, [r4, #8]
 8006330:	6993      	ldr	r3, [r2, #24]
 8006332:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006336:	430b      	orrs	r3, r1
 8006338:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800633a:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800633c:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800633e:	2b02      	cmp	r3, #2
 8006340:	f000 80a2 	beq.w	8006488 <HAL_RCC_ClockConfig+0x220>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006344:	2b03      	cmp	r3, #3
 8006346:	f000 80a5 	beq.w	8006494 <HAL_RCC_ClockConfig+0x22c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800634a:	2b01      	cmp	r3, #1
 800634c:	f000 80a6 	beq.w	800649c <HAL_RCC_ClockConfig+0x234>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006350:	0757      	lsls	r7, r2, #29
 8006352:	d538      	bpl.n	80063c6 <HAL_RCC_ClockConfig+0x15e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006354:	4954      	ldr	r1, [pc, #336]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006356:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800635a:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800635c:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800635e:	f022 0207 	bic.w	r2, r2, #7
 8006362:	4313      	orrs	r3, r2
 8006364:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8006366:	f7fd f835 	bl	80033d4 <HAL_GetTick>
 800636a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800636c:	e005      	b.n	800637a <HAL_RCC_ClockConfig+0x112>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800636e:	f7fd f831 	bl	80033d4 <HAL_GetTick>
 8006372:	1bc0      	subs	r0, r0, r7
 8006374:	4540      	cmp	r0, r8
 8006376:	f200 808b 	bhi.w	8006490 <HAL_RCC_ClockConfig+0x228>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800637a:	6933      	ldr	r3, [r6, #16]
 800637c:	6862      	ldr	r2, [r4, #4]
 800637e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006382:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8006386:	d1f2      	bne.n	800636e <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	079e      	lsls	r6, r3, #30
 800638c:	d50b      	bpl.n	80063a6 <HAL_RCC_ClockConfig+0x13e>
 800638e:	68e0      	ldr	r0, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006390:	4945      	ldr	r1, [pc, #276]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 8006392:	698a      	ldr	r2, [r1, #24]
 8006394:	f002 020f 	and.w	r2, r2, #15
 8006398:	4282      	cmp	r2, r0
 800639a:	d904      	bls.n	80063a6 <HAL_RCC_ClockConfig+0x13e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800639c:	698a      	ldr	r2, [r1, #24]
 800639e:	f022 020f 	bic.w	r2, r2, #15
 80063a2:	4310      	orrs	r0, r2
 80063a4:	6188      	str	r0, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063a6:	493f      	ldr	r1, [pc, #252]	; (80064a4 <HAL_RCC_ClockConfig+0x23c>)
 80063a8:	680a      	ldr	r2, [r1, #0]
 80063aa:	f002 020f 	and.w	r2, r2, #15
 80063ae:	42aa      	cmp	r2, r5
 80063b0:	d914      	bls.n	80063dc <HAL_RCC_ClockConfig+0x174>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063b2:	680a      	ldr	r2, [r1, #0]
 80063b4:	f022 020f 	bic.w	r2, r2, #15
 80063b8:	432a      	orrs	r2, r5
 80063ba:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063bc:	680a      	ldr	r2, [r1, #0]
 80063be:	f002 020f 	and.w	r2, r2, #15
 80063c2:	42aa      	cmp	r2, r5
 80063c4:	d00a      	beq.n	80063dc <HAL_RCC_ClockConfig+0x174>
    return HAL_ERROR;
 80063c6:	2001      	movs	r0, #1
}
 80063c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063cc:	2a00      	cmp	r2, #0
 80063ce:	d1ad      	bne.n	800632c <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063d0:	4934      	ldr	r1, [pc, #208]	; (80064a4 <HAL_RCC_ClockConfig+0x23c>)
 80063d2:	680a      	ldr	r2, [r1, #0]
 80063d4:	f002 020f 	and.w	r2, r2, #15
 80063d8:	42aa      	cmp	r2, r5
 80063da:	d8ea      	bhi.n	80063b2 <HAL_RCC_ClockConfig+0x14a>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063dc:	0758      	lsls	r0, r3, #29
 80063de:	d50b      	bpl.n	80063f8 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80063e0:	4931      	ldr	r1, [pc, #196]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 80063e2:	6920      	ldr	r0, [r4, #16]
 80063e4:	698a      	ldr	r2, [r1, #24]
 80063e6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80063ea:	4290      	cmp	r0, r2
 80063ec:	d204      	bcs.n	80063f8 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80063ee:	698a      	ldr	r2, [r1, #24]
 80063f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80063f4:	4302      	orrs	r2, r0
 80063f6:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063f8:	0719      	lsls	r1, r3, #28
 80063fa:	d50b      	bpl.n	8006414 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80063fc:	492a      	ldr	r1, [pc, #168]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 80063fe:	6960      	ldr	r0, [r4, #20]
 8006400:	69ca      	ldr	r2, [r1, #28]
 8006402:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006406:	4290      	cmp	r0, r2
 8006408:	d204      	bcs.n	8006414 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800640a:	69ca      	ldr	r2, [r1, #28]
 800640c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006410:	4302      	orrs	r2, r0
 8006412:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006414:	06da      	lsls	r2, r3, #27
 8006416:	d50b      	bpl.n	8006430 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006418:	4923      	ldr	r1, [pc, #140]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 800641a:	69a0      	ldr	r0, [r4, #24]
 800641c:	69ca      	ldr	r2, [r1, #28]
 800641e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006422:	4290      	cmp	r0, r2
 8006424:	d204      	bcs.n	8006430 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006426:	69ca      	ldr	r2, [r1, #28]
 8006428:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800642c:	4302      	orrs	r2, r0
 800642e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006430:	069b      	lsls	r3, r3, #26
 8006432:	d50b      	bpl.n	800644c <HAL_RCC_ClockConfig+0x1e4>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006434:	4a1c      	ldr	r2, [pc, #112]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 8006436:	69e1      	ldr	r1, [r4, #28]
 8006438:	6a13      	ldr	r3, [r2, #32]
 800643a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800643e:	4299      	cmp	r1, r3
 8006440:	d204      	bcs.n	800644c <HAL_RCC_ClockConfig+0x1e4>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006442:	6a13      	ldr	r3, [r2, #32]
 8006444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006448:	430b      	orrs	r3, r1
 800644a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800644c:	f7ff fe80 	bl	8006150 <HAL_RCC_GetSysClockFreq>
 8006450:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 8006452:	4916      	ldr	r1, [pc, #88]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 8006454:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006456:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006458:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 800645c:	4d14      	ldr	r5, [pc, #80]	; (80064b0 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800645e:	f002 020f 	and.w	r2, r2, #15
 8006462:	4c14      	ldr	r4, [pc, #80]	; (80064b4 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006464:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006466:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006468:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 800646c:	4912      	ldr	r1, [pc, #72]	; (80064b8 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800646e:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006472:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 8006476:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006478:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 800647c:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800647e:	6022      	str	r2, [r4, #0]
}
 8006480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8006484:	f7fc bf42 	b.w	800330c <HAL_InitTick>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006488:	0390      	lsls	r0, r2, #14
 800648a:	f53f af63 	bmi.w	8006354 <HAL_RCC_ClockConfig+0xec>
 800648e:	e79a      	b.n	80063c6 <HAL_RCC_ClockConfig+0x15e>
            return HAL_TIMEOUT;
 8006490:	2003      	movs	r0, #3
 8006492:	e799      	b.n	80063c8 <HAL_RCC_ClockConfig+0x160>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006494:	0191      	lsls	r1, r2, #6
 8006496:	f53f af5d 	bmi.w	8006354 <HAL_RCC_ClockConfig+0xec>
 800649a:	e794      	b.n	80063c6 <HAL_RCC_ClockConfig+0x15e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800649c:	05d2      	lsls	r2, r2, #23
 800649e:	f53f af59 	bmi.w	8006354 <HAL_RCC_ClockConfig+0xec>
 80064a2:	e790      	b.n	80063c6 <HAL_RCC_ClockConfig+0x15e>
 80064a4:	52002000 	.word	0x52002000
 80064a8:	58024400 	.word	0x58024400
 80064ac:	0800fca8 	.word	0x0800fca8
 80064b0:	24000200 	.word	0x24000200
 80064b4:	240001f8 	.word	0x240001f8
 80064b8:	240001f4 	.word	0x240001f4

080064bc <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064bc:	4a49      	ldr	r2, [pc, #292]	; (80065e4 <HAL_RCC_GetHCLKFreq+0x128>)
 80064be:	6913      	ldr	r3, [r2, #16]
 80064c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064c4:	2b10      	cmp	r3, #16
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064c6:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064c8:	d064      	beq.n	8006594 <HAL_RCC_GetHCLKFreq+0xd8>
 80064ca:	2b18      	cmp	r3, #24
 80064cc:	d022      	beq.n	8006514 <HAL_RCC_GetHCLKFreq+0x58>
 80064ce:	b1bb      	cbz	r3, 8006500 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 80064d0:	4b45      	ldr	r3, [pc, #276]	; (80065e8 <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064d2:	4944      	ldr	r1, [pc, #272]	; (80065e4 <HAL_RCC_GetHCLKFreq+0x128>)
 80064d4:	4845      	ldr	r0, [pc, #276]	; (80065ec <HAL_RCC_GetHCLKFreq+0x130>)
 80064d6:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064d8:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064da:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064de:	4c44      	ldr	r4, [pc, #272]	; (80065f0 <HAL_RCC_GetHCLKFreq+0x134>)
 80064e0:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064e4:	4d43      	ldr	r5, [pc, #268]	; (80065f4 <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064e6:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064e8:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064ea:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064ee:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064f2:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064f4:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 80064f8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064fa:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80064fc:	bc30      	pop	{r4, r5}
 80064fe:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006500:	6813      	ldr	r3, [r2, #0]
 8006502:	0699      	lsls	r1, r3, #26
 8006504:	d548      	bpl.n	8006598 <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006506:	6813      	ldr	r3, [r2, #0]
 8006508:	4a3b      	ldr	r2, [pc, #236]	; (80065f8 <HAL_RCC_GetHCLKFreq+0x13c>)
 800650a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800650e:	fa22 f303 	lsr.w	r3, r2, r3
 8006512:	e7de      	b.n	80064d2 <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006514:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006516:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006518:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800651a:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800651e:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0d6      	beq.n	80064d2 <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006524:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006528:	f001 0101 	and.w	r1, r1, #1
 800652c:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006530:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006534:	fb01 f304 	mul.w	r3, r1, r4
 8006538:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 800653c:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8006546:	d002      	beq.n	800654e <HAL_RCC_GetHCLKFreq+0x92>
 8006548:	d32b      	bcc.n	80065a2 <HAL_RCC_GetHCLKFreq+0xe6>
 800654a:	2802      	cmp	r0, #2
 800654c:	d026      	beq.n	800659c <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800654e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80065fc <HAL_RCC_GetHCLKFreq+0x140>
 8006552:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8006556:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800655c:	ee07 3a10 	vmov	s14, r3
 8006560:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006564:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006568:	ee37 7a25 	vadd.f32	s14, s14, s11
 800656c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006570:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006574:	4b1b      	ldr	r3, [pc, #108]	; (80065e4 <HAL_RCC_GetHCLKFreq+0x128>)
 8006576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006578:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800657c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800657e:	ee07 3a10 	vmov	s14, r3
 8006582:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006586:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800658a:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800658e:	ee17 3a90 	vmov	r3, s15
 8006592:	e79e      	b.n	80064d2 <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8006594:	4b1a      	ldr	r3, [pc, #104]	; (8006600 <HAL_RCC_GetHCLKFreq+0x144>)
 8006596:	e79c      	b.n	80064d2 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006598:	4b17      	ldr	r3, [pc, #92]	; (80065f8 <HAL_RCC_GetHCLKFreq+0x13c>)
 800659a:	e79a      	b.n	80064d2 <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800659c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006604 <HAL_RCC_GetHCLKFreq+0x148>
 80065a0:	e7d7      	b.n	8006552 <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065a2:	6813      	ldr	r3, [r2, #0]
 80065a4:	069b      	lsls	r3, r3, #26
 80065a6:	d51a      	bpl.n	80065de <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065a8:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065aa:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065ae:	4912      	ldr	r1, [pc, #72]	; (80065f8 <HAL_RCC_GetHCLKFreq+0x13c>)
 80065b0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065b6:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065bc:	ee07 1a10 	vmov	s14, r1
 80065c0:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80065c4:	ee07 3a10 	vmov	s14, r3
 80065c8:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80065cc:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80065d0:	ee76 6a05 	vadd.f32	s13, s12, s10
 80065d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065dc:	e7ca      	b.n	8006574 <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065de:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8006608 <HAL_RCC_GetHCLKFreq+0x14c>
 80065e2:	e7b6      	b.n	8006552 <HAL_RCC_GetHCLKFreq+0x96>
 80065e4:	58024400 	.word	0x58024400
 80065e8:	003d0900 	.word	0x003d0900
 80065ec:	0800fca8 	.word	0x0800fca8
 80065f0:	240001f8 	.word	0x240001f8
 80065f4:	240001f4 	.word	0x240001f4
 80065f8:	03d09000 	.word	0x03d09000
 80065fc:	4a742400 	.word	0x4a742400
 8006600:	007a1200 	.word	0x007a1200
 8006604:	4af42400 	.word	0x4af42400
 8006608:	4c742400 	.word	0x4c742400

0800660c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800660c:	494d      	ldr	r1, [pc, #308]	; (8006744 <HAL_RCC_GetPCLK1Freq+0x138>)
 800660e:	690b      	ldr	r3, [r1, #16]
 8006610:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006614:	2b10      	cmp	r3, #16
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006616:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006618:	d06b      	beq.n	80066f2 <HAL_RCC_GetPCLK1Freq+0xe6>
 800661a:	2b18      	cmp	r3, #24
 800661c:	d029      	beq.n	8006672 <HAL_RCC_GetPCLK1Freq+0x66>
 800661e:	b1fb      	cbz	r3, 8006660 <HAL_RCC_GetPCLK1Freq+0x54>
    sysclockfreq = CSI_VALUE;
 8006620:	4a49      	ldr	r2, [pc, #292]	; (8006748 <HAL_RCC_GetPCLK1Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006622:	4848      	ldr	r0, [pc, #288]	; (8006744 <HAL_RCC_GetPCLK1Freq+0x138>)
 8006624:	4949      	ldr	r1, [pc, #292]	; (800674c <HAL_RCC_GetPCLK1Freq+0x140>)
 8006626:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006628:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800662a:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 800662e:	4d48      	ldr	r5, [pc, #288]	; (8006750 <HAL_RCC_GetPCLK1Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006630:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006634:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006636:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006638:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800663c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006640:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006642:	4c44      	ldr	r4, [pc, #272]	; (8006754 <HAL_RCC_GetPCLK1Freq+0x148>)
 8006644:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8006648:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800664a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800664c:	69c2      	ldr	r2, [r0, #28]
 800664e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8006652:	5c88      	ldrb	r0, [r1, r2]
 8006654:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006658:	bc30      	pop	{r4, r5}
 800665a:	fa23 f000 	lsr.w	r0, r3, r0
 800665e:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006660:	680b      	ldr	r3, [r1, #0]
 8006662:	069a      	lsls	r2, r3, #26
 8006664:	d547      	bpl.n	80066f6 <HAL_RCC_GetPCLK1Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006666:	680b      	ldr	r3, [r1, #0]
 8006668:	4a3b      	ldr	r2, [pc, #236]	; (8006758 <HAL_RCC_GetPCLK1Freq+0x14c>)
 800666a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800666e:	40da      	lsrs	r2, r3
 8006670:	e7d7      	b.n	8006622 <HAL_RCC_GetPCLK1Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006672:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006674:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006676:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006678:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800667c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 800667e:	2a00      	cmp	r2, #0
 8006680:	d0cf      	beq.n	8006622 <HAL_RCC_GetPCLK1Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006682:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800668e:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006692:	fb03 f304 	mul.w	r3, r3, r4
 8006696:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 800669a:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800669c:	ee07 3a90 	vmov	s15, r3
 80066a0:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 80066a4:	d002      	beq.n	80066ac <HAL_RCC_GetPCLK1Freq+0xa0>
 80066a6:	d32b      	bcc.n	8006700 <HAL_RCC_GetPCLK1Freq+0xf4>
 80066a8:	2802      	cmp	r0, #2
 80066aa:	d026      	beq.n	80066fa <HAL_RCC_GetPCLK1Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066ac:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800675c <HAL_RCC_GetPCLK1Freq+0x150>
 80066b0:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80066b4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80066b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ba:	ee07 3a10 	vmov	s14, r3
 80066be:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80066c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80066c6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80066ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066ce:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80066d2:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <HAL_RCC_GetPCLK1Freq+0x138>)
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80066da:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80066dc:	ee07 3a10 	vmov	s14, r3
 80066e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80066e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80066e8:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80066ec:	ee17 2a90 	vmov	r2, s15
 80066f0:	e797      	b.n	8006622 <HAL_RCC_GetPCLK1Freq+0x16>
    sysclockfreq = HSE_VALUE;
 80066f2:	4a1b      	ldr	r2, [pc, #108]	; (8006760 <HAL_RCC_GetPCLK1Freq+0x154>)
 80066f4:	e795      	b.n	8006622 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80066f6:	4a18      	ldr	r2, [pc, #96]	; (8006758 <HAL_RCC_GetPCLK1Freq+0x14c>)
 80066f8:	e793      	b.n	8006622 <HAL_RCC_GetPCLK1Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066fa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006764 <HAL_RCC_GetPCLK1Freq+0x158>
 80066fe:	e7d7      	b.n	80066b0 <HAL_RCC_GetPCLK1Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006700:	680b      	ldr	r3, [r1, #0]
 8006702:	069b      	lsls	r3, r3, #26
 8006704:	d51a      	bpl.n	800673c <HAL_RCC_GetPCLK1Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006706:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006708:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800670c:	4a12      	ldr	r2, [pc, #72]	; (8006758 <HAL_RCC_GetPCLK1Freq+0x14c>)
 800670e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006712:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006714:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800671a:	ee07 2a10 	vmov	s14, r2
 800671e:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8006722:	ee07 3a10 	vmov	s14, r3
 8006726:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800672a:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800672e:	ee76 6a05 	vadd.f32	s13, s12, s10
 8006732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800673a:	e7ca      	b.n	80066d2 <HAL_RCC_GetPCLK1Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800673c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8006768 <HAL_RCC_GetPCLK1Freq+0x15c>
 8006740:	e7b6      	b.n	80066b0 <HAL_RCC_GetPCLK1Freq+0xa4>
 8006742:	bf00      	nop
 8006744:	58024400 	.word	0x58024400
 8006748:	003d0900 	.word	0x003d0900
 800674c:	0800fca8 	.word	0x0800fca8
 8006750:	240001f4 	.word	0x240001f4
 8006754:	240001f8 	.word	0x240001f8
 8006758:	03d09000 	.word	0x03d09000
 800675c:	4a742400 	.word	0x4a742400
 8006760:	007a1200 	.word	0x007a1200
 8006764:	4af42400 	.word	0x4af42400
 8006768:	4c742400 	.word	0x4c742400

0800676c <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800676c:	494d      	ldr	r1, [pc, #308]	; (80068a4 <HAL_RCC_GetPCLK2Freq+0x138>)
 800676e:	690b      	ldr	r3, [r1, #16]
 8006770:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006774:	2b10      	cmp	r3, #16
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006776:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006778:	d06b      	beq.n	8006852 <HAL_RCC_GetPCLK2Freq+0xe6>
 800677a:	2b18      	cmp	r3, #24
 800677c:	d029      	beq.n	80067d2 <HAL_RCC_GetPCLK2Freq+0x66>
 800677e:	b1fb      	cbz	r3, 80067c0 <HAL_RCC_GetPCLK2Freq+0x54>
    sysclockfreq = CSI_VALUE;
 8006780:	4a49      	ldr	r2, [pc, #292]	; (80068a8 <HAL_RCC_GetPCLK2Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006782:	4848      	ldr	r0, [pc, #288]	; (80068a4 <HAL_RCC_GetPCLK2Freq+0x138>)
 8006784:	4949      	ldr	r1, [pc, #292]	; (80068ac <HAL_RCC_GetPCLK2Freq+0x140>)
 8006786:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006788:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800678a:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 800678e:	4d48      	ldr	r5, [pc, #288]	; (80068b0 <HAL_RCC_GetPCLK2Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006790:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006794:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006796:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006798:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800679c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80067a0:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80067a2:	4c44      	ldr	r4, [pc, #272]	; (80068b4 <HAL_RCC_GetPCLK2Freq+0x148>)
 80067a4:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 80067a8:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80067aa:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80067ac:	69c2      	ldr	r2, [r0, #28]
 80067ae:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80067b2:	5c88      	ldrb	r0, [r1, r2]
 80067b4:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80067b8:	bc30      	pop	{r4, r5}
 80067ba:	fa23 f000 	lsr.w	r0, r3, r0
 80067be:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067c0:	680b      	ldr	r3, [r1, #0]
 80067c2:	069a      	lsls	r2, r3, #26
 80067c4:	d547      	bpl.n	8006856 <HAL_RCC_GetPCLK2Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067c6:	680b      	ldr	r3, [r1, #0]
 80067c8:	4a3b      	ldr	r2, [pc, #236]	; (80068b8 <HAL_RCC_GetPCLK2Freq+0x14c>)
 80067ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80067ce:	40da      	lsrs	r2, r3
 80067d0:	e7d7      	b.n	8006782 <HAL_RCC_GetPCLK2Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067d2:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80067d4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80067d6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80067d8:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80067dc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 80067de:	2a00      	cmp	r2, #0
 80067e0:	d0cf      	beq.n	8006782 <HAL_RCC_GetPCLK2Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80067e2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067ee:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80067f2:	fb03 f304 	mul.w	r3, r3, r4
 80067f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 80067fa:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80067fc:	ee07 3a90 	vmov	s15, r3
 8006800:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8006804:	d002      	beq.n	800680c <HAL_RCC_GetPCLK2Freq+0xa0>
 8006806:	d32b      	bcc.n	8006860 <HAL_RCC_GetPCLK2Freq+0xf4>
 8006808:	2802      	cmp	r0, #2
 800680a:	d026      	beq.n	800685a <HAL_RCC_GetPCLK2Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800680c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80068bc <HAL_RCC_GetPCLK2Freq+0x150>
 8006810:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8006814:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8006816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800681a:	ee07 3a10 	vmov	s14, r3
 800681e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006822:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006826:	ee37 7a25 	vadd.f32	s14, s14, s11
 800682a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800682e:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006832:	4b1c      	ldr	r3, [pc, #112]	; (80068a4 <HAL_RCC_GetPCLK2Freq+0x138>)
 8006834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006836:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800683a:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800683c:	ee07 3a10 	vmov	s14, r3
 8006840:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006844:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006848:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800684c:	ee17 2a90 	vmov	r2, s15
 8006850:	e797      	b.n	8006782 <HAL_RCC_GetPCLK2Freq+0x16>
    sysclockfreq = HSE_VALUE;
 8006852:	4a1b      	ldr	r2, [pc, #108]	; (80068c0 <HAL_RCC_GetPCLK2Freq+0x154>)
 8006854:	e795      	b.n	8006782 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006856:	4a18      	ldr	r2, [pc, #96]	; (80068b8 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8006858:	e793      	b.n	8006782 <HAL_RCC_GetPCLK2Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800685a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80068c4 <HAL_RCC_GetPCLK2Freq+0x158>
 800685e:	e7d7      	b.n	8006810 <HAL_RCC_GetPCLK2Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006860:	680b      	ldr	r3, [r1, #0]
 8006862:	069b      	lsls	r3, r3, #26
 8006864:	d51a      	bpl.n	800689c <HAL_RCC_GetPCLK2Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006866:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006868:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800686c:	4a12      	ldr	r2, [pc, #72]	; (80068b8 <HAL_RCC_GetPCLK2Freq+0x14c>)
 800686e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006872:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006874:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800687a:	ee07 2a10 	vmov	s14, r2
 800687e:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8006882:	ee07 3a10 	vmov	s14, r3
 8006886:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800688a:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800688e:	ee76 6a05 	vadd.f32	s13, s12, s10
 8006892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800689a:	e7ca      	b.n	8006832 <HAL_RCC_GetPCLK2Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800689c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80068c8 <HAL_RCC_GetPCLK2Freq+0x15c>
 80068a0:	e7b6      	b.n	8006810 <HAL_RCC_GetPCLK2Freq+0xa4>
 80068a2:	bf00      	nop
 80068a4:	58024400 	.word	0x58024400
 80068a8:	003d0900 	.word	0x003d0900
 80068ac:	0800fca8 	.word	0x0800fca8
 80068b0:	240001f4 	.word	0x240001f4
 80068b4:	240001f8 	.word	0x240001f8
 80068b8:	03d09000 	.word	0x03d09000
 80068bc:	4a742400 	.word	0x4a742400
 80068c0:	007a1200 	.word	0x007a1200
 80068c4:	4af42400 	.word	0x4af42400
 80068c8:	4c742400 	.word	0x4c742400

080068cc <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068cc:	4a3b      	ldr	r2, [pc, #236]	; (80069bc <RCCEx_PLL2_Config+0xf0>)
{
 80068ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d067      	beq.n	80069aa <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80068da:	6813      	ldr	r3, [r2, #0]
 80068dc:	460f      	mov	r7, r1
 80068de:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068e0:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 80068e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068e6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80068e8:	f7fc fd74 	bl	80033d4 <HAL_GetTick>
 80068ec:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068ee:	e004      	b.n	80068fa <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80068f0:	f7fc fd70 	bl	80033d4 <HAL_GetTick>
 80068f4:	1b80      	subs	r0, r0, r6
 80068f6:	2802      	cmp	r0, #2
 80068f8:	d859      	bhi.n	80069ae <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	011a      	lsls	r2, r3, #4
 80068fe:	d4f7      	bmi.n	80068f0 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006900:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006902:	682a      	ldr	r2, [r5, #0]
 8006904:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006908:	492d      	ldr	r1, [pc, #180]	; (80069c0 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800690a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800690e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006910:	686e      	ldr	r6, [r5, #4]
 8006912:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8006916:	3e01      	subs	r6, #1
 8006918:	1e50      	subs	r0, r2, #1
 800691a:	3b01      	subs	r3, #1
 800691c:	692a      	ldr	r2, [r5, #16]
 800691e:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8006922:	025b      	lsls	r3, r3, #9
 8006924:	0400      	lsls	r0, r0, #16
 8006926:	3a01      	subs	r2, #1
 8006928:	b29b      	uxth	r3, r3
 800692a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800692e:	0612      	lsls	r2, r2, #24
 8006930:	4303      	orrs	r3, r0
 8006932:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006936:	4333      	orrs	r3, r6
 8006938:	4313      	orrs	r3, r2
 800693a:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800693c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800693e:	696a      	ldr	r2, [r5, #20]
 8006940:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006944:	4313      	orrs	r3, r2
 8006946:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006948:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800694a:	69aa      	ldr	r2, [r5, #24]
 800694c:	f023 0320 	bic.w	r3, r3, #32
 8006950:	4313      	orrs	r3, r2
 8006952:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006954:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006956:	f023 0310 	bic.w	r3, r3, #16
 800695a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800695c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800695e:	69eb      	ldr	r3, [r5, #28]
 8006960:	4011      	ands	r1, r2
 8006962:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8006966:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006968:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800696a:	f043 0310 	orr.w	r3, r3, #16
 800696e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006970:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8006972:	b1f7      	cbz	r7, 80069b2 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006974:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006976:	bf0c      	ite	eq
 8006978:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800697c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8006980:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006982:	4b0e      	ldr	r3, [pc, #56]	; (80069bc <RCCEx_PLL2_Config+0xf0>)
 8006984:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006986:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 8006988:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800698c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800698e:	f7fc fd21 	bl	80033d4 <HAL_GetTick>
 8006992:	4605      	mov	r5, r0
 8006994:	e004      	b.n	80069a0 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006996:	f7fc fd1d 	bl	80033d4 <HAL_GetTick>
 800699a:	1b40      	subs	r0, r0, r5
 800699c:	2802      	cmp	r0, #2
 800699e:	d806      	bhi.n	80069ae <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	d5f7      	bpl.n	8006996 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 80069a6:	2000      	movs	r0, #0
}
 80069a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80069aa:	2001      	movs	r0, #1
}
 80069ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80069ae:	2003      	movs	r0, #3
}
 80069b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80069b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069b8:	e7e3      	b.n	8006982 <RCCEx_PLL2_Config+0xb6>
 80069ba:	bf00      	nop
 80069bc:	58024400 	.word	0x58024400
 80069c0:	ffff0007 	.word	0xffff0007

080069c4 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069c4:	4a3b      	ldr	r2, [pc, #236]	; (8006ab4 <RCCEx_PLL3_Config+0xf0>)
{
 80069c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80069ca:	f003 0303 	and.w	r3, r3, #3
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d067      	beq.n	8006aa2 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80069d2:	6813      	ldr	r3, [r2, #0]
 80069d4:	460f      	mov	r7, r1
 80069d6:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069d8:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 80069da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069de:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80069e0:	f7fc fcf8 	bl	80033d4 <HAL_GetTick>
 80069e4:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069e6:	e004      	b.n	80069f2 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80069e8:	f7fc fcf4 	bl	80033d4 <HAL_GetTick>
 80069ec:	1b80      	subs	r0, r0, r6
 80069ee:	2802      	cmp	r0, #2
 80069f0:	d859      	bhi.n	8006aa6 <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	009a      	lsls	r2, r3, #2
 80069f6:	d4f7      	bmi.n	80069e8 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80069f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80069fa:	682a      	ldr	r2, [r5, #0]
 80069fc:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a00:	492d      	ldr	r1, [pc, #180]	; (8006ab8 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006a02:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8006a06:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a08:	686e      	ldr	r6, [r5, #4]
 8006a0a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8006a0e:	3e01      	subs	r6, #1
 8006a10:	1e50      	subs	r0, r2, #1
 8006a12:	3b01      	subs	r3, #1
 8006a14:	692a      	ldr	r2, [r5, #16]
 8006a16:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8006a1a:	025b      	lsls	r3, r3, #9
 8006a1c:	0400      	lsls	r0, r0, #16
 8006a1e:	3a01      	subs	r2, #1
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8006a26:	0612      	lsls	r2, r2, #24
 8006a28:	4303      	orrs	r3, r0
 8006a2a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006a2e:	4333      	orrs	r3, r6
 8006a30:	4313      	orrs	r3, r2
 8006a32:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006a34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006a36:	696a      	ldr	r2, [r5, #20]
 8006a38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006a40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006a42:	69aa      	ldr	r2, [r5, #24]
 8006a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006a4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006a4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a52:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a54:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006a56:	69eb      	ldr	r3, [r5, #28]
 8006a58:	4011      	ands	r1, r2
 8006a5a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8006a5e:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006a60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a66:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006a68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8006a6a:	b1f7      	cbz	r7, 8006aaa <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006a6c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006a6e:	bf0c      	ite	eq
 8006a70:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a74:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8006a78:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a7a:	4b0e      	ldr	r3, [pc, #56]	; (8006ab4 <RCCEx_PLL3_Config+0xf0>)
 8006a7c:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a7e:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 8006a80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a84:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006a86:	f7fc fca5 	bl	80033d4 <HAL_GetTick>
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	e004      	b.n	8006a98 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006a8e:	f7fc fca1 	bl	80033d4 <HAL_GetTick>
 8006a92:	1b40      	subs	r0, r0, r5
 8006a94:	2802      	cmp	r0, #2
 8006a96:	d806      	bhi.n	8006aa6 <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	d5f7      	bpl.n	8006a8e <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8006a9e:	2000      	movs	r0, #0
}
 8006aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8006aa2:	2001      	movs	r0, #1
}
 8006aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006aa6:	2003      	movs	r0, #3
}
 8006aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006aaa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006aae:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ab0:	e7e3      	b.n	8006a7a <RCCEx_PLL3_Config+0xb6>
 8006ab2:	bf00      	nop
 8006ab4:	58024400 	.word	0x58024400
 8006ab8:	ffff0007 	.word	0xffff0007

08006abc <HAL_RCCEx_PeriphCLKConfig>:
{
 8006abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ac0:	6803      	ldr	r3, [r0, #0]
{
 8006ac2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ac4:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8006ac8:	d015      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8006aca:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006acc:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8006ad0:	f000 844e 	beq.w	8007370 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006ad4:	f240 8501 	bls.w	80074da <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006ad8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8006adc:	f000 8461 	beq.w	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8006ae0:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8006ae4:	f040 8512 	bne.w	800750c <HAL_RCCEx_PeriphCLKConfig+0xa50>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ae8:	48a2      	ldr	r0, [pc, #648]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006aea:	2600      	movs	r6, #0
 8006aec:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8006aee:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8006af2:	430a      	orrs	r2, r1
 8006af4:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006af6:	05dd      	lsls	r5, r3, #23
 8006af8:	d50a      	bpl.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006afa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006afc:	2a04      	cmp	r2, #4
 8006afe:	d806      	bhi.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006b00:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006b04:	03e403dd 	.word	0x03e403dd
 8006b08:	039e03d2 	.word	0x039e03d2
 8006b0c:	039e      	.short	0x039e
      ret = HAL_ERROR;
 8006b0e:	2601      	movs	r6, #1
 8006b10:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006b12:	0598      	lsls	r0, r3, #22
 8006b14:	d51b      	bpl.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->Sai23ClockSelection)
 8006b16:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006b18:	2a80      	cmp	r2, #128	; 0x80
 8006b1a:	f000 8405 	beq.w	8007328 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8006b1e:	f200 84d1 	bhi.w	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xa08>
 8006b22:	2a00      	cmp	r2, #0
 8006b24:	f000 8443 	beq.w	80073ae <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8006b28:	2a40      	cmp	r2, #64	; 0x40
 8006b2a:	f040 84d2 	bne.w	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b2e:	2100      	movs	r1, #0
 8006b30:	1d20      	adds	r0, r4, #4
 8006b32:	f7ff fecb 	bl	80068cc <RCCEx_PLL2_Config>
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006b3a:	2d00      	cmp	r5, #0
 8006b3c:	f040 83fe 	bne.w	800733c <HAL_RCCEx_PeriphCLKConfig+0x880>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006b40:	498c      	ldr	r1, [pc, #560]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006b42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b44:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006b46:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8006b4a:	4302      	orrs	r2, r0
 8006b4c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006b4e:	0559      	lsls	r1, r3, #21
 8006b50:	d51f      	bpl.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8006b52:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8006b56:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8006b5a:	f000 83d4 	beq.w	8007306 <HAL_RCCEx_PeriphCLKConfig+0x84a>
 8006b5e:	f200 8499 	bhi.w	8007494 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 8006b62:	2a00      	cmp	r2, #0
 8006b64:	f000 8410 	beq.w	8007388 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8006b68:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8006b6c:	f040 849a 	bne.w	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b70:	2100      	movs	r1, #0
 8006b72:	1d20      	adds	r0, r4, #4
 8006b74:	f7ff feaa 	bl	80068cc <RCCEx_PLL2_Config>
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006b7c:	2d00      	cmp	r5, #0
 8006b7e:	f040 83cc 	bne.w	800731a <HAL_RCCEx_PeriphCLKConfig+0x85e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006b82:	497c      	ldr	r1, [pc, #496]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006b84:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8006b88:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006b8a:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8006b8e:	4302      	orrs	r2, r0
 8006b90:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006b92:	051a      	lsls	r2, r3, #20
 8006b94:	d51f      	bpl.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai4BClockSelection)
 8006b96:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8006b9a:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8006b9e:	f000 83cf 	beq.w	8007340 <HAL_RCCEx_PeriphCLKConfig+0x884>
 8006ba2:	f200 8483 	bhi.w	80074ac <HAL_RCCEx_PeriphCLKConfig+0x9f0>
 8006ba6:	2a00      	cmp	r2, #0
 8006ba8:	f000 8408 	beq.w	80073bc <HAL_RCCEx_PeriphCLKConfig+0x900>
 8006bac:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8006bb0:	f040 8484 	bne.w	80074bc <HAL_RCCEx_PeriphCLKConfig+0xa00>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	1d20      	adds	r0, r4, #4
 8006bb8:	f7ff fe88 	bl	80068cc <RCCEx_PLL2_Config>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006bc0:	2d00      	cmp	r5, #0
 8006bc2:	f040 83c7 	bne.w	8007354 <HAL_RCCEx_PeriphCLKConfig+0x898>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006bc6:	496b      	ldr	r1, [pc, #428]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006bc8:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8006bcc:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006bce:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8006bd2:	4302      	orrs	r2, r0
 8006bd4:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006bd6:	019f      	lsls	r7, r3, #6
 8006bd8:	d50d      	bpl.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    switch(PeriphClkInit->QspiClockSelection)
 8006bda:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006bdc:	2a10      	cmp	r2, #16
 8006bde:	f000 830c 	beq.w	80071fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006be2:	f240 848e 	bls.w	8007502 <HAL_RCCEx_PeriphCLKConfig+0xa46>
 8006be6:	2a20      	cmp	r2, #32
 8006be8:	f000 8349 	beq.w	800727e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 8006bec:	2a30      	cmp	r2, #48	; 0x30
 8006bee:	f000 8309 	beq.w	8007204 <HAL_RCCEx_PeriphCLKConfig+0x748>
      ret = HAL_ERROR;
 8006bf2:	2601      	movs	r6, #1
 8006bf4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006bf6:	04d8      	lsls	r0, r3, #19
 8006bf8:	d51d      	bpl.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->Spi123ClockSelection)
 8006bfa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006bfc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006c00:	f000 83aa 	beq.w	8007358 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8006c04:	f200 8471 	bhi.w	80074ea <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8006c08:	2a00      	cmp	r2, #0
 8006c0a:	f000 83c4 	beq.w	8007396 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8006c0e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8006c12:	f040 8472 	bne.w	80074fa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c16:	2100      	movs	r1, #0
 8006c18:	1d20      	adds	r0, r4, #4
 8006c1a:	f7ff fe57 	bl	80068cc <RCCEx_PLL2_Config>
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006c22:	2d00      	cmp	r5, #0
 8006c24:	f040 83a2 	bne.w	800736c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c28:	4952      	ldr	r1, [pc, #328]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006c2a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006c2c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006c2e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006c32:	4302      	orrs	r2, r0
 8006c34:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c36:	0499      	lsls	r1, r3, #18
 8006c38:	d51b      	bpl.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8006c3a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006c3c:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8006c40:	f000 8309 	beq.w	8007256 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8006c44:	f200 8407 	bhi.w	8007456 <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8006c48:	b14a      	cbz	r2, 8006c5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8006c4a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006c4e:	f040 840e 	bne.w	800746e <HAL_RCCEx_PeriphCLKConfig+0x9b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c52:	2101      	movs	r1, #1
 8006c54:	1d20      	adds	r0, r4, #4
 8006c56:	f7ff fe39 	bl	80068cc <RCCEx_PLL2_Config>
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006c5e:	2d00      	cmp	r5, #0
 8006c60:	f040 8271 	bne.w	8007146 <HAL_RCCEx_PeriphCLKConfig+0x68a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006c64:	4943      	ldr	r1, [pc, #268]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006c66:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006c68:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006c6a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8006c6e:	4302      	orrs	r2, r0
 8006c70:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006c72:	045a      	lsls	r2, r3, #17
 8006c74:	d51d      	bpl.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Spi6ClockSelection)
 8006c76:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8006c7a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8006c7e:	f000 82b2 	beq.w	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x72a>
 8006c82:	f200 83f8 	bhi.w	8007476 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006c86:	b14a      	cbz	r2, 8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8006c88:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8006c8c:	f040 83ff 	bne.w	800748e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c90:	2101      	movs	r1, #1
 8006c92:	1d20      	adds	r0, r4, #4
 8006c94:	f7ff fe1a 	bl	80068cc <RCCEx_PLL2_Config>
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006c9c:	2d00      	cmp	r5, #0
 8006c9e:	f040 8250 	bne.w	8007142 <HAL_RCCEx_PeriphCLKConfig+0x686>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006ca2:	4934      	ldr	r1, [pc, #208]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006ca4:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8006ca8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006caa:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8006cae:	4302      	orrs	r2, r0
 8006cb0:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006cb2:	041f      	lsls	r7, r3, #16
 8006cb4:	d50d      	bpl.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch(PeriphClkInit->FdcanClockSelection)
 8006cb6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006cb8:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8006cbc:	f000 82d6 	beq.w	800726c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 8006cc0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8006cc4:	f000 81ad 	beq.w	8007022 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006cc8:	2a00      	cmp	r2, #0
 8006cca:	f000 81b0 	beq.w	800702e <HAL_RCCEx_PeriphCLKConfig+0x572>
      ret = HAL_ERROR;
 8006cce:	2601      	movs	r6, #1
 8006cd0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006cd2:	01d8      	lsls	r0, r3, #7
 8006cd4:	d519      	bpl.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x24e>
    switch(PeriphClkInit->FmcClockSelection)
 8006cd6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006cd8:	2a03      	cmp	r2, #3
 8006cda:	f200 8442 	bhi.w	8007562 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
 8006cde:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006ce2:	000a      	.short	0x000a
 8006ce4:	00040264 	.word	0x00040264
 8006ce8:	000a      	.short	0x000a
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006cea:	2102      	movs	r1, #2
 8006cec:	1d20      	adds	r0, r4, #4
 8006cee:	f7ff fded 	bl	80068cc <RCCEx_PLL2_Config>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006cf6:	2d00      	cmp	r5, #0
 8006cf8:	f040 821b 	bne.w	8007132 <HAL_RCCEx_PeriphCLKConfig+0x676>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006cfc:	491d      	ldr	r1, [pc, #116]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006cfe:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006d00:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006d02:	f022 0203 	bic.w	r2, r2, #3
 8006d06:	4302      	orrs	r2, r0
 8006d08:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d0a:	0259      	lsls	r1, r3, #9
 8006d0c:	f100 81cb 	bmi.w	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006d10:	07df      	lsls	r7, r3, #31
 8006d12:	d542      	bpl.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch(PeriphClkInit->Usart16ClockSelection)
 8006d14:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006d16:	2a28      	cmp	r2, #40	; 0x28
 8006d18:	f200 8369 	bhi.w	80073ee <HAL_RCCEx_PeriphCLKConfig+0x932>
 8006d1c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006d20:	03670033 	.word	0x03670033
 8006d24:	03670367 	.word	0x03670367
 8006d28:	03670367 	.word	0x03670367
 8006d2c:	03670367 	.word	0x03670367
 8006d30:	03670256 	.word	0x03670256
 8006d34:	03670367 	.word	0x03670367
 8006d38:	03670367 	.word	0x03670367
 8006d3c:	03670367 	.word	0x03670367
 8006d40:	0367002c 	.word	0x0367002c
 8006d44:	03670367 	.word	0x03670367
 8006d48:	03670367 	.word	0x03670367
 8006d4c:	03670367 	.word	0x03670367
 8006d50:	03670033 	.word	0x03670033
 8006d54:	03670367 	.word	0x03670367
 8006d58:	03670367 	.word	0x03670367
 8006d5c:	03670367 	.word	0x03670367
 8006d60:	03670033 	.word	0x03670033
 8006d64:	03670367 	.word	0x03670367
 8006d68:	03670367 	.word	0x03670367
 8006d6c:	03670367 	.word	0x03670367
 8006d70:	0033      	.short	0x0033
 8006d72:	bf00      	nop
 8006d74:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d78:	2101      	movs	r1, #1
 8006d7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006d7e:	f7ff fe21 	bl	80069c4 <RCCEx_PLL3_Config>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006d86:	2d00      	cmp	r5, #0
 8006d88:	f040 81d1 	bne.w	800712e <HAL_RCCEx_PeriphCLKConfig+0x672>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006d8c:	49ad      	ldr	r1, [pc, #692]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006d8e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006d90:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8006d92:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8006d96:	4302      	orrs	r2, r0
 8006d98:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006d9a:	0798      	lsls	r0, r3, #30
 8006d9c:	d51c      	bpl.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006d9e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006da0:	2a05      	cmp	r2, #5
 8006da2:	f200 83d8 	bhi.w	8007556 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 8006da6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006daa:	000d      	.short	0x000d
 8006dac:	000601f7 	.word	0x000601f7
 8006db0:	000d000d 	.word	0x000d000d
 8006db4:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006db6:	2101      	movs	r1, #1
 8006db8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006dbc:	f7ff fe02 	bl	80069c4 <RCCEx_PLL3_Config>
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006dc4:	2d00      	cmp	r5, #0
 8006dc6:	f040 81b6 	bne.w	8007136 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006dca:	499e      	ldr	r1, [pc, #632]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006dcc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006dce:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8006dd0:	f022 0207 	bic.w	r2, r2, #7
 8006dd4:	4302      	orrs	r2, r0
 8006dd6:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006dd8:	0759      	lsls	r1, r3, #29
 8006dda:	d51e      	bpl.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x35e>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006ddc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8006de0:	2a05      	cmp	r2, #5
 8006de2:	f200 83bb 	bhi.w	800755c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8006de6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006dea:	000d      	.short	0x000d
 8006dec:	000601e8 	.word	0x000601e8
 8006df0:	000d000d 	.word	0x000d000d
 8006df4:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006df6:	2101      	movs	r1, #1
 8006df8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006dfc:	f7ff fde2 	bl	80069c4 <RCCEx_PLL3_Config>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006e04:	2d00      	cmp	r5, #0
 8006e06:	f040 8198 	bne.w	800713a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e0a:	498e      	ldr	r1, [pc, #568]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006e0c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8006e10:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006e12:	f022 0207 	bic.w	r2, r2, #7
 8006e16:	4302      	orrs	r2, r0
 8006e18:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e1a:	069a      	lsls	r2, r3, #26
 8006e1c:	d51d      	bpl.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006e1e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006e22:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8006e26:	f000 81f7 	beq.w	8007218 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8006e2a:	f200 82e7 	bhi.w	80073fc <HAL_RCCEx_PeriphCLKConfig+0x940>
 8006e2e:	b14a      	cbz	r2, 8006e44 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8006e30:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8006e34:	f040 82ee 	bne.w	8007414 <HAL_RCCEx_PeriphCLKConfig+0x958>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e38:	2100      	movs	r1, #0
 8006e3a:	1d20      	adds	r0, r4, #4
 8006e3c:	f7ff fd46 	bl	80068cc <RCCEx_PLL2_Config>
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006e44:	2d00      	cmp	r5, #0
 8006e46:	f040 817a 	bne.w	800713e <HAL_RCCEx_PeriphCLKConfig+0x682>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e4a:	497e      	ldr	r1, [pc, #504]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006e4c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8006e50:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8006e52:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8006e56:	4302      	orrs	r2, r0
 8006e58:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006e5a:	065f      	lsls	r7, r3, #25
 8006e5c:	d51d      	bpl.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006e5e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8006e62:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006e66:	f000 81e1 	beq.w	800722c <HAL_RCCEx_PeriphCLKConfig+0x770>
 8006e6a:	f200 82d6 	bhi.w	800741a <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8006e6e:	b14a      	cbz	r2, 8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8006e70:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006e74:	f040 82dd 	bne.w	8007432 <HAL_RCCEx_PeriphCLKConfig+0x976>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e78:	2100      	movs	r1, #0
 8006e7a:	1d20      	adds	r0, r4, #4
 8006e7c:	f7ff fd26 	bl	80068cc <RCCEx_PLL2_Config>
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006e84:	2d00      	cmp	r5, #0
 8006e86:	f040 8162 	bne.w	800714e <HAL_RCCEx_PeriphCLKConfig+0x692>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e8a:	496e      	ldr	r1, [pc, #440]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006e8c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8006e90:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006e92:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8006e96:	4302      	orrs	r2, r0
 8006e98:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e9a:	0618      	lsls	r0, r3, #24
 8006e9c:	d51d      	bpl.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006e9e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8006ea2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006ea6:	f000 81f4 	beq.w	8007292 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8006eaa:	f200 82c5 	bhi.w	8007438 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006eae:	b14a      	cbz	r2, 8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006eb0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006eb4:	f040 82cc 	bne.w	8007450 <HAL_RCCEx_PeriphCLKConfig+0x994>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006eb8:	2100      	movs	r1, #0
 8006eba:	1d20      	adds	r0, r4, #4
 8006ebc:	f7ff fd06 	bl	80068cc <RCCEx_PLL2_Config>
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006ec4:	2d00      	cmp	r5, #0
 8006ec6:	f040 8144 	bne.w	8007152 <HAL_RCCEx_PeriphCLKConfig+0x696>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006eca:	495e      	ldr	r1, [pc, #376]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006ecc:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8006ed0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006ed2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006ed6:	4302      	orrs	r2, r0
 8006ed8:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006eda:	0719      	lsls	r1, r3, #28
 8006edc:	d50b      	bpl.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006ede:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8006ee2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006ee6:	f000 81f8 	beq.w	80072da <HAL_RCCEx_PeriphCLKConfig+0x81e>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006eea:	4856      	ldr	r0, [pc, #344]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006eec:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8006eee:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ef6:	06da      	lsls	r2, r3, #27
 8006ef8:	d50b      	bpl.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x456>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006efa:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8006efe:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006f02:	f000 81f5 	beq.w	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f06:	484f      	ldr	r0, [pc, #316]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006f08:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8006f0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f12:	031f      	lsls	r7, r3, #12
 8006f14:	d50e      	bpl.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch(PeriphClkInit->AdcClockSelection)
 8006f16:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8006f1a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8006f1e:	f000 8093 	beq.w	8007048 <HAL_RCCEx_PeriphCLKConfig+0x58c>
 8006f22:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8006f26:	f000 8096 	beq.w	8007056 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006f2a:	2900      	cmp	r1, #0
 8006f2c:	f000 824d 	beq.w	80073ca <HAL_RCCEx_PeriphCLKConfig+0x90e>
      ret = HAL_ERROR;
 8006f30:	2601      	movs	r6, #1
 8006f32:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f34:	0358      	lsls	r0, r3, #13
 8006f36:	d50f      	bpl.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    switch(PeriphClkInit->UsbClockSelection)
 8006f38:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006f3c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8006f40:	f000 8094 	beq.w	800706c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8006f44:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8006f48:	f000 8097 	beq.w	800707a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8006f4c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8006f50:	f000 8244 	beq.w	80073dc <HAL_RCCEx_PeriphCLKConfig+0x920>
      ret = HAL_ERROR;
 8006f54:	2601      	movs	r6, #1
 8006f56:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f58:	03d9      	lsls	r1, r3, #15
 8006f5a:	d517      	bpl.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    switch(PeriphClkInit->SdmmcClockSelection)
 8006f5c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006f5e:	2a00      	cmp	r2, #0
 8006f60:	f000 8110 	beq.w	8007184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8006f64:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006f68:	f040 80f7 	bne.w	800715a <HAL_RCCEx_PeriphCLKConfig+0x69e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f6c:	2102      	movs	r1, #2
 8006f6e:	1d20      	adds	r0, r4, #4
 8006f70:	f7ff fcac 	bl	80068cc <RCCEx_PLL2_Config>
 8006f74:	4605      	mov	r5, r0
 8006f76:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006f78:	2d00      	cmp	r5, #0
 8006f7a:	f040 810b 	bne.w	8007194 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f7e:	4931      	ldr	r1, [pc, #196]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006f80:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006f82:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006f84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f88:	4302      	orrs	r2, r0
 8006f8a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f8c:	009a      	lsls	r2, r3, #2
 8006f8e:	d47f      	bmi.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f90:	039f      	lsls	r7, r3, #14
 8006f92:	d435      	bmi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8006f94:	1c30      	adds	r0, r6, #0
 8006f96:	bf18      	it	ne
 8006f98:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f9a:	02de      	lsls	r6, r3, #11
 8006f9c:	d506      	bpl.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f9e:	4929      	ldr	r1, [pc, #164]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006fa0:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8006fa2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006fa4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006fa8:	432a      	orrs	r2, r5
 8006faa:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006fac:	00dd      	lsls	r5, r3, #3
 8006fae:	d507      	bpl.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006fb0:	4924      	ldr	r1, [pc, #144]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006fb2:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8006fb6:	690a      	ldr	r2, [r1, #16]
 8006fb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006fbc:	432a      	orrs	r2, r5
 8006fbe:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006fc0:	0299      	lsls	r1, r3, #10
 8006fc2:	d506      	bpl.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006fc4:	491f      	ldr	r1, [pc, #124]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006fc6:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8006fc8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006fca:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006fce:	432a      	orrs	r2, r5
 8006fd0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006fd2:	005a      	lsls	r2, r3, #1
 8006fd4:	d509      	bpl.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x52e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006fd6:	4a1b      	ldr	r2, [pc, #108]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006fd8:	6911      	ldr	r1, [r2, #16]
 8006fda:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8006fde:	6111      	str	r1, [r2, #16]
 8006fe0:	6911      	ldr	r1, [r2, #16]
 8006fe2:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8006fe6:	4329      	orrs	r1, r5
 8006fe8:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	da06      	bge.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x540>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006fee:	4a15      	ldr	r2, [pc, #84]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8006ff0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006ff2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006ff4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006ff8:	430b      	orrs	r3, r1
 8006ffa:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8006ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8007000:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8007002:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007006:	f000 80ab 	beq.w	8007160 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 800700a:	f240 80e8 	bls.w	80071de <HAL_RCCEx_PeriphCLKConfig+0x722>
 800700e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007012:	f000 80aa 	beq.w	800716a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007016:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800701a:	f000 80a6 	beq.w	800716a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800701e:	2001      	movs	r0, #1
 8007020:	e7bb      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007022:	2101      	movs	r1, #1
 8007024:	1d20      	adds	r0, r4, #4
 8007026:	f7ff fc51 	bl	80068cc <RCCEx_PLL2_Config>
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800702e:	2d00      	cmp	r5, #0
 8007030:	f040 808b 	bne.w	800714a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007034:	4903      	ldr	r1, [pc, #12]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007036:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007038:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800703a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800703e:	4302      	orrs	r2, r0
 8007040:	650a      	str	r2, [r1, #80]	; 0x50
 8007042:	e646      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8007044:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007048:	2102      	movs	r1, #2
 800704a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800704e:	f7ff fcb9 	bl	80069c4 <RCCEx_PLL3_Config>
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007056:	2d00      	cmp	r5, #0
 8007058:	d17d      	bne.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x69a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800705a:	49b1      	ldr	r1, [pc, #708]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 800705c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8007060:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007062:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007066:	4302      	orrs	r2, r0
 8007068:	658a      	str	r2, [r1, #88]	; 0x58
 800706a:	e763      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800706c:	2101      	movs	r1, #1
 800706e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007072:	f7ff fca7 	bl	80069c4 <RCCEx_PLL3_Config>
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800707a:	2d00      	cmp	r5, #0
 800707c:	d155      	bne.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800707e:	49a8      	ldr	r1, [pc, #672]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007080:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8007084:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8007086:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800708a:	4302      	orrs	r2, r0
 800708c:	654a      	str	r2, [r1, #84]	; 0x54
 800708e:	e763      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007090:	2102      	movs	r1, #2
 8007092:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007096:	f7ff fc95 	bl	80069c4 <RCCEx_PLL3_Config>
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	2800      	cmp	r0, #0
 800709e:	f43f af77 	beq.w	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      status=HAL_ERROR;
 80070a2:	2601      	movs	r6, #1
 80070a4:	e774      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070a6:	4b9f      	ldr	r3, [pc, #636]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x868>)
 80070a8:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070aa:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070b0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80070b2:	f7fc f98f 	bl	80033d4 <HAL_GetTick>
 80070b6:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070b8:	e006      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070ba:	f7fc f98b 	bl	80033d4 <HAL_GetTick>
 80070be:	eba0 0008 	sub.w	r0, r0, r8
 80070c2:	2864      	cmp	r0, #100	; 0x64
 80070c4:	f200 8196 	bhi.w	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x938>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	05da      	lsls	r2, r3, #23
 80070cc:	d5f5      	bpl.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    if(ret == HAL_OK)
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	f040 823d 	bne.w	800754e <HAL_RCCEx_PeriphCLKConfig+0xa92>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80070d4:	4a92      	ldr	r2, [pc, #584]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80070d6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80070da:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80070dc:	4059      	eors	r1, r3
 80070de:	f411 7f40 	tst.w	r1, #768	; 0x300
 80070e2:	d00b      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x640>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070e4:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80070e6:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070e8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80070ec:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80070f0:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070f2:	6f10      	ldr	r0, [r2, #112]	; 0x70
 80070f4:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80070f8:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80070fa:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80070fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007100:	f000 8207 	beq.w	8007512 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007104:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007108:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800710c:	f000 8215 	beq.w	800753a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007110:	4983      	ldr	r1, [pc, #524]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007112:	690a      	ldr	r2, [r1, #16]
 8007114:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8007118:	610a      	str	r2, [r1, #16]
 800711a:	4a81      	ldr	r2, [pc, #516]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 800711c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007120:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007122:	430b      	orrs	r3, r1
 8007124:	6713      	str	r3, [r2, #112]	; 0x70
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	e5f2      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800712a:	462e      	mov	r6, r5
 800712c:	e714      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800712e:	462e      	mov	r6, r5
 8007130:	e633      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007132:	462e      	mov	r6, r5
 8007134:	e5e9      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8007136:	462e      	mov	r6, r5
 8007138:	e64e      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800713a:	462e      	mov	r6, r5
 800713c:	e66d      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800713e:	462e      	mov	r6, r5
 8007140:	e68b      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8007142:	462e      	mov	r6, r5
 8007144:	e5b5      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007146:	462e      	mov	r6, r5
 8007148:	e593      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800714a:	462e      	mov	r6, r5
 800714c:	e5c1      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x216>
 800714e:	462e      	mov	r6, r5
 8007150:	e6a3      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007152:	462e      	mov	r6, r5
 8007154:	e6c1      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8007156:	462e      	mov	r6, r5
 8007158:	e6ec      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = HAL_ERROR;
 800715a:	2601      	movs	r6, #1
 800715c:	4635      	mov	r5, r6
 800715e:	e715      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007160:	486f      	ldr	r0, [pc, #444]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007162:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007164:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8007168:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800716a:	2d00      	cmp	r5, #0
 800716c:	f47f af57 	bne.w	800701e <HAL_RCCEx_PeriphCLKConfig+0x562>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007170:	4d6b      	ldr	r5, [pc, #428]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007172:	1c30      	adds	r0, r6, #0
 8007174:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8007176:	bf18      	it	ne
 8007178:	2001      	movne	r0, #1
 800717a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800717e:	430a      	orrs	r2, r1
 8007180:	656a      	str	r2, [r5, #84]	; 0x54
 8007182:	e70a      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007184:	4966      	ldr	r1, [pc, #408]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007186:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007188:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800718c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800718e:	2d00      	cmp	r5, #0
 8007190:	f43f aef5 	beq.w	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007194:	462e      	mov	r6, r5
 8007196:	e6f9      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007198:	2101      	movs	r1, #1
 800719a:	1d20      	adds	r0, r4, #4
 800719c:	f7ff fb96 	bl	80068cc <RCCEx_PLL2_Config>
 80071a0:	4605      	mov	r5, r0
 80071a2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80071a4:	2d00      	cmp	r5, #0
 80071a6:	d1c6      	bne.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80071a8:	e60f      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071aa:	495d      	ldr	r1, [pc, #372]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80071ac:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80071ae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80071b2:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80071b4:	2d00      	cmp	r5, #0
 80071b6:	d1bc      	bne.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80071b8:	e5a0      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071ba:	2101      	movs	r1, #1
 80071bc:	1d20      	adds	r0, r4, #4
 80071be:	f7ff fb85 	bl	80068cc <RCCEx_PLL2_Config>
 80071c2:	4605      	mov	r5, r0
 80071c4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80071c6:	2d00      	cmp	r5, #0
 80071c8:	d1b7      	bne.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80071ca:	e61e      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071cc:	2101      	movs	r1, #1
 80071ce:	1d20      	adds	r0, r4, #4
 80071d0:	f7ff fb7c 	bl	80068cc <RCCEx_PLL2_Config>
 80071d4:	4605      	mov	r5, r0
 80071d6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80071d8:	2d00      	cmp	r5, #0
 80071da:	d1a8      	bne.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80071dc:	e5d6      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    switch(PeriphClkInit->RngClockSelection)
 80071de:	2a00      	cmp	r2, #0
 80071e0:	f47f af1d 	bne.w	800701e <HAL_RCCEx_PeriphCLKConfig+0x562>
 80071e4:	e7c1      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071e6:	2101      	movs	r1, #1
 80071e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80071ec:	f7ff fbea 	bl	80069c4 <RCCEx_PLL3_Config>
 80071f0:	4605      	mov	r5, r0
 80071f2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80071f4:	2d00      	cmp	r5, #0
 80071f6:	d1a4      	bne.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x686>
 80071f8:	e553      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071fa:	4949      	ldr	r1, [pc, #292]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80071fc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80071fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007202:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007204:	2d00      	cmp	r5, #0
 8007206:	d142      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007208:	4945      	ldr	r1, [pc, #276]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 800720a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800720c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800720e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007212:	4302      	orrs	r2, r0
 8007214:	64ca      	str	r2, [r1, #76]	; 0x4c
 8007216:	e4ee      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007218:	2102      	movs	r1, #2
 800721a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800721e:	f7ff fbd1 	bl	80069c4 <RCCEx_PLL3_Config>
 8007222:	4605      	mov	r5, r0
 8007224:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007226:	2d00      	cmp	r5, #0
 8007228:	d189      	bne.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x682>
 800722a:	e60e      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800722c:	2102      	movs	r1, #2
 800722e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007232:	f7ff fbc7 	bl	80069c4 <RCCEx_PLL3_Config>
 8007236:	4605      	mov	r5, r0
 8007238:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800723a:	2d00      	cmp	r5, #0
 800723c:	d187      	bne.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x692>
 800723e:	e624      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007240:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8007242:	2d00      	cmp	r5, #0
 8007244:	d139      	bne.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007246:	4936      	ldr	r1, [pc, #216]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007248:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800724a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800724c:	f022 0207 	bic.w	r2, r2, #7
 8007250:	4302      	orrs	r2, r0
 8007252:	650a      	str	r2, [r1, #80]	; 0x50
 8007254:	e45d      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x56>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007256:	2101      	movs	r1, #1
 8007258:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800725c:	f7ff fbb2 	bl	80069c4 <RCCEx_PLL3_Config>
 8007260:	4605      	mov	r5, r0
 8007262:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007264:	2d00      	cmp	r5, #0
 8007266:	f47f af6e 	bne.w	8007146 <HAL_RCCEx_PeriphCLKConfig+0x68a>
 800726a:	e4fb      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800726c:	492c      	ldr	r1, [pc, #176]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 800726e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007270:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007274:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007276:	2d00      	cmp	r5, #0
 8007278:	f47f af67 	bne.w	800714a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800727c:	e6da      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x578>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800727e:	2102      	movs	r1, #2
 8007280:	1d20      	adds	r0, r4, #4
 8007282:	f7ff fb23 	bl	80068cc <RCCEx_PLL2_Config>
 8007286:	4605      	mov	r5, r0
 8007288:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800728a:	2d00      	cmp	r5, #0
 800728c:	d0bc      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800728e:	462e      	mov	r6, r5
 8007290:	e4b1      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007292:	2102      	movs	r1, #2
 8007294:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007298:	f7ff fb94 	bl	80069c4 <RCCEx_PLL3_Config>
 800729c:	4605      	mov	r5, r0
 800729e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80072a0:	2d00      	cmp	r5, #0
 80072a2:	f47f af56 	bne.w	8007152 <HAL_RCCEx_PeriphCLKConfig+0x696>
 80072a6:	e610      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x40e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072a8:	2100      	movs	r1, #0
 80072aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80072ae:	f7ff fb89 	bl	80069c4 <RCCEx_PLL3_Config>
 80072b2:	4605      	mov	r5, r0
 80072b4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80072b6:	2d00      	cmp	r5, #0
 80072b8:	d0c5      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80072ba:	462e      	mov	r6, r5
 80072bc:	e429      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072be:	4918      	ldr	r1, [pc, #96]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x864>)
      break;
 80072c0:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80072c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80072c8:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80072ca:	e7ba      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x786>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072cc:	2100      	movs	r1, #0
 80072ce:	1d20      	adds	r0, r4, #4
 80072d0:	f7ff fafc 	bl	80068cc <RCCEx_PLL2_Config>
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	4605      	mov	r5, r0
      break;
 80072d8:	e7b3      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x786>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80072da:	2102      	movs	r1, #2
 80072dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80072e0:	f7ff fb70 	bl	80069c4 <RCCEx_PLL3_Config>
 80072e4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80072e8:	b100      	cbz	r0, 80072ec <HAL_RCCEx_PeriphCLKConfig+0x830>
          status = HAL_ERROR;
 80072ea:	2601      	movs	r6, #1
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	e5fc      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x42e>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80072f0:	2102      	movs	r1, #2
 80072f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80072f6:	f7ff fb65 	bl	80069c4 <RCCEx_PLL3_Config>
 80072fa:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80072fe:	b100      	cbz	r0, 8007302 <HAL_RCCEx_PeriphCLKConfig+0x846>
        status = HAL_ERROR;
 8007300:	2601      	movs	r6, #1
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	e5ff      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007306:	2100      	movs	r1, #0
 8007308:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800730c:	f7ff fb5a 	bl	80069c4 <RCCEx_PLL3_Config>
 8007310:	4605      	mov	r5, r0
 8007312:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007314:	2d00      	cmp	r5, #0
 8007316:	f43f ac34 	beq.w	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 800731a:	462e      	mov	r6, r5
 800731c:	e439      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 800731e:	bf00      	nop
 8007320:	58024400 	.word	0x58024400
 8007324:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007328:	2100      	movs	r1, #0
 800732a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800732e:	f7ff fb49 	bl	80069c4 <RCCEx_PLL3_Config>
 8007332:	4605      	mov	r5, r0
 8007334:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007336:	2d00      	cmp	r5, #0
 8007338:	f43f ac02 	beq.w	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x84>
 800733c:	462e      	mov	r6, r5
 800733e:	e406      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007340:	2100      	movs	r1, #0
 8007342:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007346:	f7ff fb3d 	bl	80069c4 <RCCEx_PLL3_Config>
 800734a:	4605      	mov	r5, r0
 800734c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800734e:	2d00      	cmp	r5, #0
 8007350:	f43f ac39 	beq.w	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8007354:	462e      	mov	r6, r5
 8007356:	e43e      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007358:	2100      	movs	r1, #0
 800735a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800735e:	f7ff fb31 	bl	80069c4 <RCCEx_PLL3_Config>
 8007362:	4605      	mov	r5, r0
 8007364:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007366:	2d00      	cmp	r5, #0
 8007368:	f43f ac5e 	beq.w	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800736c:	462e      	mov	r6, r5
 800736e:	e462      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007370:	2102      	movs	r1, #2
 8007372:	3004      	adds	r0, #4
 8007374:	f7ff faaa 	bl	80068cc <RCCEx_PLL2_Config>
 8007378:	4606      	mov	r6, r0
 800737a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800737c:	2e00      	cmp	r6, #0
 800737e:	f47f abba 	bne.w	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8007382:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007384:	f7ff bbb0 	b.w	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007388:	4978      	ldr	r1, [pc, #480]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 800738a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800738c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007390:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007392:	f7ff bbf3 	b.w	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007396:	4975      	ldr	r1, [pc, #468]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8007398:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800739a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800739e:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80073a0:	e43f      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073a2:	2102      	movs	r1, #2
 80073a4:	3024      	adds	r0, #36	; 0x24
 80073a6:	f7ff fb0d 	bl	80069c4 <RCCEx_PLL3_Config>
 80073aa:	4606      	mov	r6, r0
      break;
 80073ac:	e7e5      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073ae:	496f      	ldr	r1, [pc, #444]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 80073b0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80073b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80073b6:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80073b8:	f7ff bbbf 	b.w	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073bc:	496b      	ldr	r1, [pc, #428]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 80073be:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80073c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80073c4:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80073c6:	f7ff bbfb 	b.w	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073ca:	1d20      	adds	r0, r4, #4
 80073cc:	f7ff fa7e 	bl	80068cc <RCCEx_PLL2_Config>
 80073d0:	4605      	mov	r5, r0
 80073d2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80073d4:	2d00      	cmp	r5, #0
 80073d6:	f47f aebe 	bne.w	8007156 <HAL_RCCEx_PeriphCLKConfig+0x69a>
 80073da:	e63e      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073dc:	4963      	ldr	r1, [pc, #396]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 80073de:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80073e0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80073e4:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80073e6:	2d00      	cmp	r5, #0
 80073e8:	f47f ae9f 	bne.w	800712a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80073ec:	e647      	b.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      ret = HAL_ERROR;
 80073ee:	2601      	movs	r6, #1
 80073f0:	4635      	mov	r5, r6
 80073f2:	e4d2      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
            ret = HAL_TIMEOUT;
 80073f4:	2603      	movs	r6, #3
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	4635      	mov	r5, r6
 80073fa:	e489      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80073fc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007400:	f43f ad20 	beq.w	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8007404:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8007408:	f43f ad1c 	beq.w	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800740c:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8007410:	f43f ad18 	beq.w	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x388>
      ret = HAL_ERROR;
 8007414:	2601      	movs	r6, #1
 8007416:	4635      	mov	r5, r6
 8007418:	e51f      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800741a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800741e:	f43f ad31 	beq.w	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8007422:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8007426:	f43f ad2d 	beq.w	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 800742a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800742e:	f43f ad29 	beq.w	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
      ret = HAL_ERROR;
 8007432:	2601      	movs	r6, #1
 8007434:	4635      	mov	r5, r6
 8007436:	e530      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007438:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800743c:	f43f ad42 	beq.w	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007440:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 8007444:	f43f ad3e 	beq.w	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007448:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800744c:	f43f ad3a 	beq.w	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x408>
      ret = HAL_ERROR;
 8007450:	2601      	movs	r6, #1
 8007452:	4635      	mov	r5, r6
 8007454:	e541      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007456:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800745a:	f43f ac00 	beq.w	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800745e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8007462:	f43f abfc 	beq.w	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8007466:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800746a:	f43f abf8 	beq.w	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ret = HAL_ERROR;
 800746e:	2601      	movs	r6, #1
 8007470:	4635      	mov	r5, r6
 8007472:	f7ff bbfe 	b.w	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007476:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800747a:	f43f ac0f 	beq.w	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800747e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8007482:	f43f ac0b 	beq.w	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8007486:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800748a:	f43f ac07 	beq.w	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = HAL_ERROR;
 800748e:	2601      	movs	r6, #1
 8007490:	4635      	mov	r5, r6
 8007492:	e40e      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007494:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8007498:	f43f ab70 	beq.w	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800749c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80074a0:	f43f ab6c 	beq.w	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      ret = HAL_ERROR;
 80074a4:	2601      	movs	r6, #1
 80074a6:	4635      	mov	r5, r6
 80074a8:	f7ff bb73 	b.w	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4BClockSelection)
 80074ac:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 80074b0:	f43f ab86 	beq.w	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80074b4:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80074b8:	f43f ab82 	beq.w	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = HAL_ERROR;
 80074bc:	2601      	movs	r6, #1
 80074be:	4635      	mov	r5, r6
 80074c0:	f7ff bb89 	b.w	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai23ClockSelection)
 80074c4:	2ac0      	cmp	r2, #192	; 0xc0
 80074c6:	f43f ab38 	beq.w	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 80074ca:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80074ce:	f43f ab34 	beq.w	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 80074d2:	2601      	movs	r6, #1
 80074d4:	4635      	mov	r5, r6
 80074d6:	f7ff bb3a 	b.w	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80074da:	b9ba      	cbnz	r2, 800750c <HAL_RCCEx_PeriphCLKConfig+0xa50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074dc:	4823      	ldr	r0, [pc, #140]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 80074de:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80074e0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80074e4:	62c1      	str	r1, [r0, #44]	; 0x2c
 80074e6:	f7ff baff 	b.w	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Spi123ClockSelection)
 80074ea:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80074ee:	f43f ab98 	beq.w	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80074f2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80074f6:	f43f ab94 	beq.w	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 80074fa:	2601      	movs	r6, #1
 80074fc:	4635      	mov	r5, r6
 80074fe:	f7ff bb9a 	b.w	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->QspiClockSelection)
 8007502:	2a00      	cmp	r2, #0
 8007504:	f43f ae7e 	beq.w	8007204 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8007508:	f7ff bb73 	b.w	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x136>
      ret = HAL_ERROR;
 800750c:	2601      	movs	r6, #1
 800750e:	f7ff baf2 	b.w	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8007512:	f7fb ff5f 	bl	80033d4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007516:	4f15      	ldr	r7, [pc, #84]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xab0>)
        tickstart = HAL_GetTick();
 8007518:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800751a:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800751e:	e006      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xa72>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007520:	f7fb ff58 	bl	80033d4 <HAL_GetTick>
 8007524:	eba0 0009 	sub.w	r0, r0, r9
 8007528:	4540      	cmp	r0, r8
 800752a:	f63f af63 	bhi.w	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x938>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800752e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007530:	079b      	lsls	r3, r3, #30
 8007532:	d5f5      	bpl.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0xa64>
 8007534:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007538:	e5e4      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x648>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800753a:	480c      	ldr	r0, [pc, #48]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 800753c:	4a0c      	ldr	r2, [pc, #48]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0xab4>)
 800753e:	6901      	ldr	r1, [r0, #16]
 8007540:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8007544:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8007548:	430a      	orrs	r2, r1
 800754a:	6102      	str	r2, [r0, #16]
 800754c:	e5e5      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x65e>
 800754e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007550:	462e      	mov	r6, r5
 8007552:	f7ff bbdd 	b.w	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = HAL_ERROR;
 8007556:	2601      	movs	r6, #1
 8007558:	4635      	mov	r5, r6
 800755a:	e43d      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = HAL_ERROR;
 800755c:	2601      	movs	r6, #1
 800755e:	4635      	mov	r5, r6
 8007560:	e45b      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      ret = HAL_ERROR;
 8007562:	2601      	movs	r6, #1
 8007564:	4635      	mov	r5, r6
 8007566:	f7ff bbd0 	b.w	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800756a:	bf00      	nop
 800756c:	58024400 	.word	0x58024400
 8007570:	00ffffcf 	.word	0x00ffffcf

08007574 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8007574:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007576:	f7fe ffa1 	bl	80064bc <HAL_RCC_GetHCLKFreq>
 800757a:	4b05      	ldr	r3, [pc, #20]	; (8007590 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800757c:	4a05      	ldr	r2, [pc, #20]	; (8007594 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007584:	5cd3      	ldrb	r3, [r2, r3]
 8007586:	f003 031f 	and.w	r3, r3, #31
}
 800758a:	40d8      	lsrs	r0, r3
 800758c:	bd08      	pop	{r3, pc}
 800758e:	bf00      	nop
 8007590:	58024400 	.word	0x58024400
 8007594:	0800fca8 	.word	0x0800fca8

08007598 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007598:	4a46      	ldr	r2, [pc, #280]	; (80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 800759a:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800759c:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800759e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80075a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80075a2:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80075a6:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d059      	beq.n	8007660 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80075ac:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80075b0:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075b4:	f004 0403 	and.w	r4, r4, #3
 80075b8:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80075bc:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 80075c0:	2c01      	cmp	r4, #1
 80075c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075c6:	ee06 1a90 	vmov	s13, r1
 80075ca:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80075ce:	d002      	beq.n	80075d6 <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 80075d0:	d34e      	bcc.n	8007670 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 80075d2:	2c02      	cmp	r4, #2
 80075d4:	d049      	beq.n	800766a <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075d6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80076b8 <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 80075da:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80075de:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80075e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e4:	ee07 3a10 	vmov	s14, r3
 80075e8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80075ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80075f0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80075f4:	ee77 7a26 	vadd.f32	s15, s14, s13
 80075f8:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80075fc:	4a2d      	ldr	r2, [pc, #180]	; (80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 80075fe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007602:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007604:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007608:	ee06 3a90 	vmov	s13, r3
 800760c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8007610:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007612:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007616:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800761a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800761e:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007622:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007624:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007628:	ee06 3a90 	vmov	s13, r3
 800762c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007630:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007634:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007638:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800763c:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007640:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007642:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007646:	ee07 3a10 	vmov	s14, r3
 800764a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800764e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007652:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007656:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800765a:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800765e:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007660:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007664:	6083      	str	r3, [r0, #8]
}
 8007666:	bc30      	pop	{r4, r5}
 8007668:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800766a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80076bc <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800766e:	e7b4      	b.n	80075da <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007670:	6813      	ldr	r3, [r2, #0]
 8007672:	069b      	lsls	r3, r3, #26
 8007674:	d51a      	bpl.n	80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007676:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007678:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800767c:	4910      	ldr	r1, [pc, #64]	; (80076c0 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 800767e:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007682:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007684:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800768a:	ee07 1a10 	vmov	s14, r1
 800768e:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8007692:	ee07 3a10 	vmov	s14, r3
 8007696:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800769a:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800769e:	ee76 7a05 	vadd.f32	s15, s12, s10
 80076a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076aa:	e7a7      	b.n	80075fc <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076ac:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80076c4 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 80076b0:	e793      	b.n	80075da <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 80076b2:	bf00      	nop
 80076b4:	58024400 	.word	0x58024400
 80076b8:	4a742400 	.word	0x4a742400
 80076bc:	4af42400 	.word	0x4af42400
 80076c0:	03d09000 	.word	0x03d09000
 80076c4:	4c742400 	.word	0x4c742400

080076c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076c8:	4a46      	ldr	r2, [pc, #280]	; (80077e4 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 80076ca:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076cc:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80076ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80076d2:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80076d6:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d059      	beq.n	8007790 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80076dc:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076e0:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076e4:	f004 0403 	and.w	r4, r4, #3
 80076e8:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80076ec:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 80076f0:	2c01      	cmp	r4, #1
 80076f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076f6:	ee06 1a90 	vmov	s13, r1
 80076fa:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80076fe:	d002      	beq.n	8007706 <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 8007700:	d34e      	bcc.n	80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8007702:	2c02      	cmp	r4, #2
 8007704:	d049      	beq.n	800779a <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007706:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80077e8 <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 800770a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800770e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007714:	ee07 3a10 	vmov	s14, r3
 8007718:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800771c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007720:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007724:	ee77 7a26 	vadd.f32	s15, s14, s13
 8007728:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800772c:	4a2d      	ldr	r2, [pc, #180]	; (80077e4 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 800772e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007732:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007734:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007738:	ee06 3a90 	vmov	s13, r3
 800773c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8007740:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007742:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007746:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800774a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800774e:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007752:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007754:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007758:	ee06 3a90 	vmov	s13, r3
 800775c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007760:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007764:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007768:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800776c:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007770:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007772:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007776:	ee07 3a10 	vmov	s14, r3
 800777a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800777e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007782:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007786:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800778a:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800778e:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007790:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007794:	6083      	str	r3, [r0, #8]
}
 8007796:	bc30      	pop	{r4, r5}
 8007798:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800779a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80077ec <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800779e:	e7b4      	b.n	800770a <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077a0:	6813      	ldr	r3, [r2, #0]
 80077a2:	069b      	lsls	r3, r3, #26
 80077a4:	d51a      	bpl.n	80077dc <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077a6:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077a8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077ac:	4910      	ldr	r1, [pc, #64]	; (80077f0 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 80077ae:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077b4:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ba:	ee07 1a10 	vmov	s14, r1
 80077be:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80077c2:	ee07 3a10 	vmov	s14, r3
 80077c6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80077ca:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80077ce:	ee76 7a05 	vadd.f32	s15, s12, s10
 80077d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077da:	e7a7      	b.n	800772c <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077dc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 80077e0:	e793      	b.n	800770a <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 80077e2:	bf00      	nop
 80077e4:	58024400 	.word	0x58024400
 80077e8:	4a742400 	.word	0x4a742400
 80077ec:	4af42400 	.word	0x4af42400
 80077f0:	03d09000 	.word	0x03d09000
 80077f4:	4c742400 	.word	0x4c742400

080077f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077f8:	4a46      	ldr	r2, [pc, #280]	; (8007914 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
{
 80077fa:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077fc:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80077fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007800:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007802:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007806:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8007808:	2b00      	cmp	r3, #0
 800780a:	d059      	beq.n	80078c0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800780c:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007810:	f001 0101 	and.w	r1, r1, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007814:	f004 0403 	and.w	r4, r4, #3
 8007818:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800781c:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8007820:	2c01      	cmp	r4, #1
 8007822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007826:	ee06 1a90 	vmov	s13, r1
 800782a:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800782e:	d002      	beq.n	8007836 <HAL_RCCEx_GetPLL1ClockFreq+0x3e>
 8007830:	d34e      	bcc.n	80078d0 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8007832:	2c02      	cmp	r4, #2
 8007834:	d049      	beq.n	80078ca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007836:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x120>
 800783a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800783e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007844:	ee07 3a10 	vmov	s14, r3
 8007848:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800784c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007850:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007854:	ee77 7a26 	vadd.f32	s15, s14, s13
 8007858:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800785c:	4a2d      	ldr	r2, [pc, #180]	; (8007914 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
 800785e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007862:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007864:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007868:	ee06 3a90 	vmov	s13, r3
 800786c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8007870:	bc30      	pop	{r4, r5}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007872:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007876:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800787a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800787e:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007882:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007884:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007888:	ee06 3a90 	vmov	s13, r3
 800788c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007890:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007894:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007898:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800789c:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80078a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80078a2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80078a6:	ee07 3a10 	vmov	s14, r3
 80078aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80078ae:	ee37 7a06 	vadd.f32	s14, s14, s12
 80078b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80078b6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80078ba:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80078be:	4770      	bx	lr
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80078c0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80078c4:	6083      	str	r3, [r0, #8]
}
 80078c6:	bc30      	pop	{r4, r5}
 80078c8:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078ca:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800791c <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 80078ce:	e7b4      	b.n	800783a <HAL_RCCEx_GetPLL1ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078d0:	6813      	ldr	r3, [r2, #0]
 80078d2:	069b      	lsls	r3, r3, #26
 80078d4:	d51a      	bpl.n	800790c <HAL_RCCEx_GetPLL1ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078d6:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078d8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078dc:	4910      	ldr	r1, [pc, #64]	; (8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 80078de:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078e4:	40e1      	lsrs	r1, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ea:	ee07 1a10 	vmov	s14, r1
 80078ee:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80078f2:	ee07 3a10 	vmov	s14, r3
 80078f6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80078fa:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80078fe:	ee76 7a05 	vadd.f32	s15, s12, s10
 8007902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790a:	e7a7      	b.n	800785c <HAL_RCCEx_GetPLL1ClockFreq+0x64>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800790c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007924 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8007910:	e793      	b.n	800783a <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 8007912:	bf00      	nop
 8007914:	58024400 	.word	0x58024400
 8007918:	4a742400 	.word	0x4a742400
 800791c:	4af42400 	.word	0x4af42400
 8007920:	03d09000 	.word	0x03d09000
 8007924:	4c742400 	.word	0x4c742400

08007928 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007928:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 800792c:	b500      	push	{lr}
 800792e:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007930:	d02d      	beq.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007932:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007936:	d018      	beq.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007938:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800793c:	d04e      	beq.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800793e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8007942:	d037      	beq.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007944:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8007948:	f000 808b 	beq.w	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800794c:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8007950:	f000 80ac 	beq.w	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x184>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007954:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8007958:	f000 80b6 	beq.w	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800795c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8007960:	d062      	beq.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
          frequency = 0;
 8007962:	2000      	movs	r0, #0
}
 8007964:	b005      	add	sp, #20
 8007966:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800796a:	4a70      	ldr	r2, [pc, #448]	; (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800796c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800796e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8007972:	2b80      	cmp	r3, #128	; 0x80
 8007974:	d043      	beq.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007976:	d86a      	bhi.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8007978:	2b00      	cmp	r3, #0
 800797a:	d039      	beq.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 800797c:	2b40      	cmp	r3, #64	; 0x40
 800797e:	d1f0      	bne.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007980:	a801      	add	r0, sp, #4
 8007982:	f7ff fe09 	bl	8007598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007986:	9801      	ldr	r0, [sp, #4]
}
 8007988:	b005      	add	sp, #20
 800798a:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800798e:	4b67      	ldr	r3, [pc, #412]	; (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007992:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8007996:	2b04      	cmp	r3, #4
 8007998:	d8e3      	bhi.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800799a:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78>)
 800799c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a0:	080079f1 	.word	0x080079f1
 80079a4:	08007981 	.word	0x08007981
 80079a8:	080079ff 	.word	0x080079ff
 80079ac:	080079d5 	.word	0x080079d5
 80079b0:	08007a0d 	.word	0x08007a0d
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80079b4:	4a5d      	ldr	r2, [pc, #372]	; (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80079b6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80079b8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 80079bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079c0:	d01d      	beq.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80079c2:	d85c      	bhi.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 80079c4:	b1a3      	cbz	r3, 80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80079c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079ca:	d0d9      	beq.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 80079cc:	e7c9      	b.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 80079ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079d2:	d15b      	bne.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = EXTERNAL_CLOCK_VALUE;
 80079d4:	4856      	ldr	r0, [pc, #344]	; (8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
}
 80079d6:	b005      	add	sp, #20
 80079d8:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80079dc:	4a53      	ldr	r2, [pc, #332]	; (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80079de:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80079e0:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 80079e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079e8:	d009      	beq.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80079ea:	d8f0      	bhi.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d151      	bne.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079f0:	a801      	add	r0, sp, #4
 80079f2:	f7ff ff01 	bl	80077f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079f6:	9802      	ldr	r0, [sp, #8]
}
 80079f8:	b005      	add	sp, #20
 80079fa:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079fe:	a801      	add	r0, sp, #4
 8007a00:	f7ff fe62 	bl	80076c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a04:	9801      	ldr	r0, [sp, #4]
}
 8007a06:	b005      	add	sp, #20
 8007a08:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a0c:	4b47      	ldr	r3, [pc, #284]	; (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007a10:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8007a14:	d019      	beq.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007a16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a1a:	d062      	beq.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
            frequency = HSE_VALUE;
 8007a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a20:	4844      	ldr	r0, [pc, #272]	; (8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 8007a22:	bf18      	it	ne
 8007a24:	2000      	movne	r0, #0
 8007a26:	e79d      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007a28:	4b40      	ldr	r3, [pc, #256]	; (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8007a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a34:	d068      	beq.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007a36:	d95b      	bls.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8007a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a3c:	d051      	beq.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8007a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a42:	d05f      	beq.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8007a44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a48:	d18b      	bne.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            frequency = HSI_VALUE;
 8007a4a:	483b      	ldr	r0, [pc, #236]	; (8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
 8007a4c:	e78a      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (saiclocksource)
 8007a4e:	2bc0      	cmp	r3, #192	; 0xc0
 8007a50:	d0c0      	beq.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8007a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a56:	d184      	bne.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a58:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007a5a:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8007a5e:	d1da      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8007a60:	e7f3      	b.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007a62:	4a32      	ldr	r2, [pc, #200]	; (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007a64:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007a66:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8007a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a6e:	d0c6      	beq.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007a70:	d815      	bhi.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0bc      	beq.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8007a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a7a:	d081      	beq.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8007a7c:	e771      	b.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8007a7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a82:	d0a7      	beq.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8007a84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a88:	d0e6      	beq.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8007a8a:	e76a      	b.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8007a8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a90:	d0e2      	beq.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8007a92:	e766      	b.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007a94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a98:	f43f af72 	beq.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8007a9c:	e761      	b.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (srcclk)
 8007a9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007aa2:	d097      	beq.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8007aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007aa8:	d0d6      	beq.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8007aaa:	e75a      	b.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007aac:	4a1f      	ldr	r2, [pc, #124]	; (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007aae:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8007ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab8:	d015      	beq.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007aba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007abe:	d0cb      	beq.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f47f af4e 	bne.w	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007ac6:	e75b      	b.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007ac8:	4b18      	ldr	r3, [pc, #96]	; (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8007acc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8007ad0:	d08e      	beq.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f43f af45 	beq.w	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ad8:	a801      	add	r0, sp, #4
 8007ada:	f7ff fd5d 	bl	8007598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007ade:	9803      	ldr	r0, [sp, #12]
          break;
 8007ae0:	e740      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            frequency = CSI_VALUE;
 8007ae2:	4816      	ldr	r0, [pc, #88]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 8007ae4:	e73e      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ae6:	a801      	add	r0, sp, #4
 8007ae8:	f7ff fdee 	bl	80076c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007aec:	9803      	ldr	r0, [sp, #12]
          break;
 8007aee:	e739      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 8007af0:	b17b      	cbz	r3, 8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007af2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007af6:	f47f af34 	bne.w	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007afa:	a801      	add	r0, sp, #4
 8007afc:	f7ff fd4c 	bl	8007598 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b00:	9802      	ldr	r0, [sp, #8]
          break;
 8007b02:	e72f      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          frequency = HSE_VALUE;
 8007b04:	480b      	ldr	r0, [pc, #44]	; (8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
          break;
 8007b06:	e72d      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b08:	a801      	add	r0, sp, #4
 8007b0a:	f7ff fddd 	bl	80076c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b0e:	9802      	ldr	r0, [sp, #8]
          break;
 8007b10:	e728      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007b12:	f7fe fcd3 	bl	80064bc <HAL_RCC_GetHCLKFreq>
 8007b16:	4b05      	ldr	r3, [pc, #20]	; (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007b18:	4a09      	ldr	r2, [pc, #36]	; (8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007b20:	5cd3      	ldrb	r3, [r2, r3]
 8007b22:	f003 031f 	and.w	r3, r3, #31
 8007b26:	40d8      	lsrs	r0, r3
          break;
 8007b28:	e71c      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007b2a:	bf00      	nop
 8007b2c:	58024400 	.word	0x58024400
 8007b30:	00bb8000 	.word	0x00bb8000
 8007b34:	007a1200 	.word	0x007a1200
 8007b38:	03d09000 	.word	0x03d09000
 8007b3c:	003d0900 	.word	0x003d0900
 8007b40:	0800fca8 	.word	0x0800fca8

08007b44 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b44:	2800      	cmp	r0, #0
 8007b46:	d076      	beq.n	8007c36 <HAL_TIM_Base_Init+0xf2>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b48:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8007b4c:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007b4e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007b52:	4604      	mov	r4, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d069      	beq.n	8007c2c <HAL_TIM_Base_Init+0xe8>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b58:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007b5a:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b5c:	493c      	ldr	r1, [pc, #240]	; (8007c50 <HAL_TIM_Base_Init+0x10c>)
 8007b5e:	4e3d      	ldr	r6, [pc, #244]	; (8007c54 <HAL_TIM_Base_Init+0x110>)
 8007b60:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007b64:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8007b68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8007b6c:	eba2 0606 	sub.w	r6, r2, r6
  tmpcr1 = TIMx->CR1;
 8007b70:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b72:	fab1 f181 	clz	r1, r1
 8007b76:	fab6 f686 	clz	r6, r6
 8007b7a:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8007b7e:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8007b82:	d018      	beq.n	8007bb6 <HAL_TIM_Base_Init+0x72>
 8007b84:	b9b9      	cbnz	r1, 8007bb6 <HAL_TIM_Base_Init+0x72>
 8007b86:	4834      	ldr	r0, [pc, #208]	; (8007c58 <HAL_TIM_Base_Init+0x114>)
 8007b88:	4282      	cmp	r2, r0
 8007b8a:	d014      	beq.n	8007bb6 <HAL_TIM_Base_Init+0x72>
 8007b8c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007b90:	4282      	cmp	r2, r0
 8007b92:	d010      	beq.n	8007bb6 <HAL_TIM_Base_Init+0x72>
 8007b94:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007b98:	4282      	cmp	r2, r0
 8007b9a:	d04e      	beq.n	8007c3a <HAL_TIM_Base_Init+0xf6>
 8007b9c:	2e00      	cmp	r6, #0
 8007b9e:	d14c      	bne.n	8007c3a <HAL_TIM_Base_Init+0xf6>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ba0:	4d2e      	ldr	r5, [pc, #184]	; (8007c5c <HAL_TIM_Base_Init+0x118>)
 8007ba2:	482f      	ldr	r0, [pc, #188]	; (8007c60 <HAL_TIM_Base_Init+0x11c>)
 8007ba4:	4282      	cmp	r2, r0
 8007ba6:	bf18      	it	ne
 8007ba8:	42aa      	cmpne	r2, r5
 8007baa:	d008      	beq.n	8007bbe <HAL_TIM_Base_Init+0x7a>
 8007bac:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007bb0:	4282      	cmp	r2, r0
 8007bb2:	d108      	bne.n	8007bc6 <HAL_TIM_Base_Init+0x82>
 8007bb4:	e003      	b.n	8007bbe <HAL_TIM_Base_Init+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007bba:	68a0      	ldr	r0, [r4, #8]
 8007bbc:	4303      	orrs	r3, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bc2:	6920      	ldr	r0, [r4, #16]
 8007bc4:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bc6:	69a0      	ldr	r0, [r4, #24]
 8007bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bcc:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bce:	4303      	orrs	r3, r0

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bd0:	6860      	ldr	r0, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007bd2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bd4:	62d5      	str	r5, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007bd6:	6290      	str	r0, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bd8:	b951      	cbnz	r1, 8007bf0 <HAL_TIM_Base_Init+0xac>
 8007bda:	b94e      	cbnz	r6, 8007bf0 <HAL_TIM_Base_Init+0xac>
 8007bdc:	491f      	ldr	r1, [pc, #124]	; (8007c5c <HAL_TIM_Base_Init+0x118>)
 8007bde:	4b20      	ldr	r3, [pc, #128]	; (8007c60 <HAL_TIM_Base_Init+0x11c>)
 8007be0:	429a      	cmp	r2, r3
 8007be2:	bf18      	it	ne
 8007be4:	428a      	cmpne	r2, r1
 8007be6:	d003      	beq.n	8007bf0 <HAL_TIM_Base_Init+0xac>
 8007be8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d101      	bne.n	8007bf4 <HAL_TIM_Base_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bf0:	6963      	ldr	r3, [r4, #20]
 8007bf2:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bf4:	2301      	movs	r3, #1
  return HAL_OK;
 8007bf6:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8007bf8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bfa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bfe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007c02:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007c06:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007c0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007c0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c16:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c1e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007c22:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007c26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007c2a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8007c2c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007c30:	f7fb f9fe 	bl	8003030 <HAL_TIM_Base_MspInit>
 8007c34:	e790      	b.n	8007b58 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8007c36:	2001      	movs	r0, #1
}
 8007c38:	4770      	bx	lr
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c3a:	480a      	ldr	r0, [pc, #40]	; (8007c64 <HAL_TIM_Base_Init+0x120>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007c40:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c42:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 8007c44:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c48:	d0b9      	beq.n	8007bbe <HAL_TIM_Base_Init+0x7a>
 8007c4a:	2e00      	cmp	r6, #0
 8007c4c:	d1b7      	bne.n	8007bbe <HAL_TIM_Base_Init+0x7a>
 8007c4e:	e7a7      	b.n	8007ba0 <HAL_TIM_Base_Init+0x5c>
 8007c50:	40010000 	.word	0x40010000
 8007c54:	40010400 	.word	0x40010400
 8007c58:	40000400 	.word	0x40000400
 8007c5c:	40014000 	.word	0x40014000
 8007c60:	40014400 	.word	0x40014400
 8007c64:	40000c00 	.word	0x40000c00

08007c68 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007c68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d001      	beq.n	8007c74 <HAL_TIM_Base_Start+0xc>
    return HAL_ERROR;
 8007c70:	2001      	movs	r0, #1
 8007c72:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 8007c74:	2102      	movs	r1, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c76:	6802      	ldr	r2, [r0, #0]
 8007c78:	4b08      	ldr	r3, [pc, #32]	; (8007c9c <HAL_TIM_Base_Start+0x34>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007c7a:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c7e:	6891      	ldr	r1, [r2, #8]
 8007c80:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c82:	2b06      	cmp	r3, #6
 8007c84:	d008      	beq.n	8007c98 <HAL_TIM_Base_Start+0x30>
 8007c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c8a:	d005      	beq.n	8007c98 <HAL_TIM_Base_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 8007c8c:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8007c8e:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8007c90:	f043 0301 	orr.w	r3, r3, #1
 8007c94:	6013      	str	r3, [r2, #0]
 8007c96:	4770      	bx	lr
  return HAL_OK;
 8007c98:	2000      	movs	r0, #0
}
 8007c9a:	4770      	bx	lr
 8007c9c:	00010007 	.word	0x00010007

08007ca0 <HAL_TIM_PeriodElapsedCallback>:
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop

08007ca4 <HAL_TIM_OC_DelayElapsedCallback>:
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop

08007ca8 <HAL_TIM_IC_CaptureCallback>:
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop

08007cac <HAL_TIM_PWM_PulseFinishedCallback>:
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop

08007cb0 <HAL_TIM_TriggerCallback>:
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop

08007cb4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cb4:	6803      	ldr	r3, [r0, #0]
 8007cb6:	691a      	ldr	r2, [r3, #16]
 8007cb8:	0791      	lsls	r1, r2, #30
{
 8007cba:	b510      	push	{r4, lr}
 8007cbc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cbe:	d502      	bpl.n	8007cc6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cc0:	68da      	ldr	r2, [r3, #12]
 8007cc2:	0792      	lsls	r2, r2, #30
 8007cc4:	d468      	bmi.n	8007d98 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cc6:	691a      	ldr	r2, [r3, #16]
 8007cc8:	0752      	lsls	r2, r2, #29
 8007cca:	d502      	bpl.n	8007cd2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ccc:	68da      	ldr	r2, [r3, #12]
 8007cce:	0750      	lsls	r0, r2, #29
 8007cd0:	d44f      	bmi.n	8007d72 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cd2:	691a      	ldr	r2, [r3, #16]
 8007cd4:	0711      	lsls	r1, r2, #28
 8007cd6:	d502      	bpl.n	8007cde <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	0712      	lsls	r2, r2, #28
 8007cdc:	d437      	bmi.n	8007d4e <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007cde:	691a      	ldr	r2, [r3, #16]
 8007ce0:	06d0      	lsls	r0, r2, #27
 8007ce2:	d502      	bpl.n	8007cea <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ce4:	68da      	ldr	r2, [r3, #12]
 8007ce6:	06d1      	lsls	r1, r2, #27
 8007ce8:	d41e      	bmi.n	8007d28 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cea:	691a      	ldr	r2, [r3, #16]
 8007cec:	07d2      	lsls	r2, r2, #31
 8007cee:	d502      	bpl.n	8007cf6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	07d0      	lsls	r0, r2, #31
 8007cf4:	d469      	bmi.n	8007dca <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cf6:	691a      	ldr	r2, [r3, #16]
 8007cf8:	0611      	lsls	r1, r2, #24
 8007cfa:	d502      	bpl.n	8007d02 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cfc:	68da      	ldr	r2, [r3, #12]
 8007cfe:	0612      	lsls	r2, r2, #24
 8007d00:	d46b      	bmi.n	8007dda <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007d02:	691a      	ldr	r2, [r3, #16]
 8007d04:	05d0      	lsls	r0, r2, #23
 8007d06:	d502      	bpl.n	8007d0e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	0611      	lsls	r1, r2, #24
 8007d0c:	d46d      	bmi.n	8007dea <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d0e:	691a      	ldr	r2, [r3, #16]
 8007d10:	0652      	lsls	r2, r2, #25
 8007d12:	d502      	bpl.n	8007d1a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d14:	68da      	ldr	r2, [r3, #12]
 8007d16:	0650      	lsls	r0, r2, #25
 8007d18:	d46f      	bmi.n	8007dfa <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d1a:	691a      	ldr	r2, [r3, #16]
 8007d1c:	0691      	lsls	r1, r2, #26
 8007d1e:	d502      	bpl.n	8007d26 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d20:	68da      	ldr	r2, [r3, #12]
 8007d22:	0692      	lsls	r2, r2, #26
 8007d24:	d449      	bmi.n	8007dba <HAL_TIM_IRQHandler+0x106>
}
 8007d26:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d28:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d2c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8007d2e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d30:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d32:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d34:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d36:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007d3a:	d16f      	bne.n	8007e1c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d3c:	f7ff ffb2 	bl	8007ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d40:	4620      	mov	r0, r4
 8007d42:	f7ff ffb3 	bl	8007cac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d46:	2200      	movs	r2, #0
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	7722      	strb	r2, [r4, #28]
 8007d4c:	e7cd      	b.n	8007cea <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d4e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d52:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8007d54:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d56:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d58:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d5a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d5c:	079b      	lsls	r3, r3, #30
 8007d5e:	d15a      	bne.n	8007e16 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d60:	f7ff ffa0 	bl	8007ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d64:	4620      	mov	r0, r4
 8007d66:	f7ff ffa1 	bl	8007cac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	7722      	strb	r2, [r4, #28]
 8007d70:	e7b5      	b.n	8007cde <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d72:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d76:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8007d78:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d7a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d7c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d7e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d80:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007d84:	d144      	bne.n	8007e10 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d86:	f7ff ff8d 	bl	8007ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f7ff ff8e 	bl	8007cac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d90:	2200      	movs	r2, #0
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	7722      	strb	r2, [r4, #28]
 8007d96:	e79c      	b.n	8007cd2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d98:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d9c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d9e:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007da0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007da2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007da4:	0799      	lsls	r1, r3, #30
 8007da6:	d130      	bne.n	8007e0a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007da8:	f7ff ff7c 	bl	8007ca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dac:	4620      	mov	r0, r4
 8007dae:	f7ff ff7d 	bl	8007cac <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007db2:	2200      	movs	r2, #0
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	7722      	strb	r2, [r4, #28]
 8007db8:	e785      	b.n	8007cc6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dba:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8007dbe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dc0:	611a      	str	r2, [r3, #16]
}
 8007dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8007dc6:	f000 b887 	b.w	8007ed8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007dca:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007dd0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dd2:	f7ff ff65 	bl	8007ca0 <HAL_TIM_PeriodElapsedCallback>
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	e78d      	b.n	8007cf6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007dda:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8007dde:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007de0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007de2:	f000 f87b 	bl	8007edc <HAL_TIMEx_BreakCallback>
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	e78b      	b.n	8007d02 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007dea:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8007dee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007df0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007df2:	f000 f875 	bl	8007ee0 <HAL_TIMEx_Break2Callback>
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	e789      	b.n	8007d0e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8007dfe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e00:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007e02:	f7ff ff55 	bl	8007cb0 <HAL_TIM_TriggerCallback>
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	e787      	b.n	8007d1a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8007e0a:	f7ff ff4d 	bl	8007ca8 <HAL_TIM_IC_CaptureCallback>
 8007e0e:	e7d0      	b.n	8007db2 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8007e10:	f7ff ff4a 	bl	8007ca8 <HAL_TIM_IC_CaptureCallback>
 8007e14:	e7bc      	b.n	8007d90 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8007e16:	f7ff ff47 	bl	8007ca8 <HAL_TIM_IC_CaptureCallback>
 8007e1a:	e7a6      	b.n	8007d6a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8007e1c:	f7ff ff44 	bl	8007ca8 <HAL_TIM_IC_CaptureCallback>
 8007e20:	e791      	b.n	8007d46 <HAL_TIM_IRQHandler+0x92>
 8007e22:	bf00      	nop

08007e24 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e24:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d045      	beq.n	8007eb8 <HAL_TIMEx_MasterConfigSynchronization+0x94>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e2c:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e2e:	4a24      	ldr	r2, [pc, #144]	; (8007ec0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
{
 8007e30:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e32:	4e24      	ldr	r6, [pc, #144]	; (8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007e34:	2502      	movs	r5, #2
  __HAL_LOCK(htim);
 8007e36:	2401      	movs	r4, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	bf18      	it	ne
 8007e3c:	42b3      	cmpne	r3, r6
  htim->State = HAL_TIM_STATE_BUSY;
 8007e3e:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8007e42:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e46:	bf08      	it	eq
 8007e48:	2601      	moveq	r6, #1
  tmpcr2 = htim->Instance->CR2;
 8007e4a:	685c      	ldr	r4, [r3, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e4c:	bf18      	it	ne
 8007e4e:	2600      	movne	r6, #0
  tmpsmcr = htim->Instance->SMCR;
 8007e50:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e52:	d103      	bne.n	8007e5c <HAL_TIMEx_MasterConfigSynchronization+0x38>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e54:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e58:	684a      	ldr	r2, [r1, #4]
 8007e5a:	4314      	orrs	r4, r2
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e5c:	4a1a      	ldr	r2, [pc, #104]	; (8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e5e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e62:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e64:	4293      	cmp	r3, r2
 8007e66:	bf18      	it	ne
 8007e68:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8007e6c:	f8df c064 	ldr.w	ip, [pc, #100]	; 8007ed4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e70:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e74:	4f15      	ldr	r7, [pc, #84]	; (8007ecc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007e76:	bf0c      	ite	eq
 8007e78:	2201      	moveq	r2, #1
 8007e7a:	2200      	movne	r2, #0
  htim->Instance->CR2 = tmpcr2;
 8007e7c:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e7e:	4563      	cmp	r3, ip
 8007e80:	bf08      	it	eq
 8007e82:	f042 0201 	orreq.w	r2, r2, #1
 8007e86:	4c12      	ldr	r4, [pc, #72]	; (8007ed0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8007e88:	42bb      	cmp	r3, r7
 8007e8a:	bf08      	it	eq
 8007e8c:	f042 0201 	orreq.w	r2, r2, #1
 8007e90:	42a3      	cmp	r3, r4
 8007e92:	bf08      	it	eq
 8007e94:	f042 0201 	orreq.w	r2, r2, #1
 8007e98:	b902      	cbnz	r2, 8007e9c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8007e9a:	b126      	cbz	r6, 8007ea6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e9c:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e9e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ea2:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ea4:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8007ea6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007ea8:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8007eaa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8007eae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	bcf0      	pop	{r4, r5, r6, r7}
 8007eb6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007eb8:	2202      	movs	r2, #2
}
 8007eba:	4610      	mov	r0, r2
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	40010400 	.word	0x40010400
 8007ec4:	40010000 	.word	0x40010000
 8007ec8:	40000400 	.word	0x40000400
 8007ecc:	40000c00 	.word	0x40000c00
 8007ed0:	40001800 	.word	0x40001800
 8007ed4:	40000800 	.word	0x40000800

08007ed8 <HAL_TIMEx_CommutCallback>:
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop

08007edc <HAL_TIMEx_BreakCallback>:
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop

08007ee0 <HAL_TIMEx_Break2Callback>:
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop

08007ee4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ee8:	461e      	mov	r6, r3
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007eea:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8007eee:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8007ef0:	2b20      	cmp	r3, #32
 8007ef2:	d14a      	bne.n	8007f8a <HAL_UART_Transmit+0xa6>
 8007ef4:	4689      	mov	r9, r1
  {
    if ((pData == NULL) || (Size == 0U))
 8007ef6:	2900      	cmp	r1, #0
 8007ef8:	d04b      	beq.n	8007f92 <HAL_UART_Transmit+0xae>
 8007efa:	fab2 f782 	clz	r7, r2
 8007efe:	9201      	str	r2, [sp, #4]
 8007f00:	097f      	lsrs	r7, r7, #5
 8007f02:	2f00      	cmp	r7, #0
 8007f04:	d145      	bne.n	8007f92 <HAL_UART_Transmit+0xae>
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8007f06:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8007f0a:	4605      	mov	r5, r0
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d03c      	beq.n	8007f8a <HAL_UART_Transmit+0xa6>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f10:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8007f12:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f14:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
    __HAL_LOCK(huart);
 8007f18:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f1c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007f20:	f7fb fa58 	bl	80033d4 <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f24:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 8007f26:	9a01      	ldr	r2, [sp, #4]
    tickstart = HAL_GetTick();
 8007f28:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 8007f2e:	f8a5 2054 	strh.w	r2, [r5, #84]	; 0x54
    huart->TxXferCount = Size;
 8007f32:	f8a5 2056 	strh.w	r2, [r5, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f36:	f000 8089 	beq.w	800804c <HAL_UART_Transmit+0x168>
      pdata16bits = NULL;
    }

    __HAL_UNLOCK(huart);

    while (huart->TxXferCount > 0U)
 8007f3a:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8007f3e:	2200      	movs	r2, #0
 8007f40:	682c      	ldr	r4, [r5, #0]
    while (huart->TxXferCount > 0U)
 8007f42:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8007f44:	f885 207c 	strb.w	r2, [r5, #124]	; 0x7c
    while (huart->TxXferCount > 0U)
 8007f48:	b1ab      	cbz	r3, 8007f76 <HAL_UART_Transmit+0x92>
 8007f4a:	1c71      	adds	r1, r6, #1
 8007f4c:	d125      	bne.n	8007f9a <HAL_UART_Transmit+0xb6>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f4e:	69e2      	ldr	r2, [r4, #28]
 8007f50:	0612      	lsls	r2, r2, #24
 8007f52:	d5fc      	bpl.n	8007f4e <HAL_UART_Transmit+0x6a>
      if (pdata8bits == NULL)
 8007f54:	f1b9 0f00 	cmp.w	r9, #0
 8007f58:	d035      	beq.n	8007fc6 <HAL_UART_Transmit+0xe2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f5a:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007f5e:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8007f60:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8007f64:	3b01      	subs	r3, #1
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007f6c:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1e9      	bne.n	8007f4a <HAL_UART_Transmit+0x66>
 8007f76:	1c71      	adds	r1, r6, #1
 8007f78:	d12a      	bne.n	8007fd0 <HAL_UART_Transmit+0xec>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f7a:	69e3      	ldr	r3, [r4, #28]
 8007f7c:	065a      	lsls	r2, r3, #25
 8007f7e:	d5fc      	bpl.n	8007f7a <HAL_UART_Transmit+0x96>
    huart->gState = HAL_UART_STATE_READY;
 8007f80:	2320      	movs	r3, #32
    return HAL_OK;
 8007f82:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8007f84:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    return HAL_OK;
 8007f88:	e000      	b.n	8007f8c <HAL_UART_Transmit+0xa8>
    return HAL_BUSY;
 8007f8a:	2002      	movs	r0, #2
}
 8007f8c:	b003      	add	sp, #12
 8007f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8007f92:	2001      	movs	r0, #1
}
 8007f94:	b003      	add	sp, #12
 8007f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f9a:	69e3      	ldr	r3, [r4, #28]
 8007f9c:	061b      	lsls	r3, r3, #24
 8007f9e:	d4d9      	bmi.n	8007f54 <HAL_UART_Transmit+0x70>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fa0:	f7fb fa18 	bl	80033d4 <HAL_GetTick>
 8007fa4:	eba0 0008 	sub.w	r0, r0, r8
 8007fa8:	4286      	cmp	r6, r0
 8007faa:	d33c      	bcc.n	8008026 <HAL_UART_Transmit+0x142>
 8007fac:	fab6 f386 	clz	r3, r6
 8007fb0:	095b      	lsrs	r3, r3, #5
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d137      	bne.n	8008026 <HAL_UART_Transmit+0x142>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fb6:	682c      	ldr	r4, [r5, #0]
 8007fb8:	6822      	ldr	r2, [r4, #0]
 8007fba:	0752      	lsls	r2, r2, #29
 8007fbc:	d5c5      	bpl.n	8007f4a <HAL_UART_Transmit+0x66>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fbe:	69e2      	ldr	r2, [r4, #28]
 8007fc0:	0510      	lsls	r0, r2, #20
 8007fc2:	d5c2      	bpl.n	8007f4a <HAL_UART_Transmit+0x66>
 8007fc4:	e019      	b.n	8007ffa <HAL_UART_Transmit+0x116>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fc6:	f837 3b02 	ldrh.w	r3, [r7], #2
 8007fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fce:	e7c6      	b.n	8007f5e <HAL_UART_Transmit+0x7a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fd0:	69e3      	ldr	r3, [r4, #28]
 8007fd2:	065b      	lsls	r3, r3, #25
 8007fd4:	d4d4      	bmi.n	8007f80 <HAL_UART_Transmit+0x9c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fd6:	f7fb f9fd 	bl	80033d4 <HAL_GetTick>
 8007fda:	eba0 0008 	sub.w	r0, r0, r8
 8007fde:	fab6 f386 	clz	r3, r6
 8007fe2:	4286      	cmp	r6, r0
 8007fe4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8007fe8:	d31d      	bcc.n	8008026 <HAL_UART_Transmit+0x142>
 8007fea:	b9e3      	cbnz	r3, 8008026 <HAL_UART_Transmit+0x142>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fec:	682c      	ldr	r4, [r5, #0]
 8007fee:	6822      	ldr	r2, [r4, #0]
 8007ff0:	0757      	lsls	r7, r2, #29
 8007ff2:	d5c0      	bpl.n	8007f76 <HAL_UART_Transmit+0x92>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ff4:	69e2      	ldr	r2, [r4, #28]
 8007ff6:	0510      	lsls	r0, r2, #20
 8007ff8:	d5bd      	bpl.n	8007f76 <HAL_UART_Transmit+0x92>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ffa:	f44f 6100 	mov.w	r1, #2048	; 0x800

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 8007ffe:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8008000:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008002:	6221      	str	r1, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008004:	6821      	ldr	r1, [r4, #0]
 8008006:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 800800a:	6021      	str	r1, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800800c:	68a1      	ldr	r1, [r4, #8]
 800800e:	f021 0101 	bic.w	r1, r1, #1
 8008012:	60a1      	str	r1, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 8008014:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008018:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800801c:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008020:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
 8008024:	e7b2      	b.n	8007f8c <HAL_UART_Transmit+0xa8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008026:	682b      	ldr	r3, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 8008028:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800802a:	2400      	movs	r4, #0
      return HAL_TIMEOUT;
 800802c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008034:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008036:	689a      	ldr	r2, [r3, #8]
 8008038:	f022 0201 	bic.w	r2, r2, #1
 800803c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800803e:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
        __HAL_UNLOCK(huart);
 8008042:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008046:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
 800804a:	e79f      	b.n	8007f8c <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800804c:	692b      	ldr	r3, [r5, #16]
 800804e:	2b00      	cmp	r3, #0
 8008050:	f47f af73 	bne.w	8007f3a <HAL_UART_Transmit+0x56>
 8008054:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 8008056:	4699      	mov	r9, r3
 8008058:	e76f      	b.n	8007f3a <HAL_UART_Transmit+0x56>
 800805a:	bf00      	nop

0800805c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800805c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8008060:	2b20      	cmp	r3, #32
 8008062:	d13d      	bne.n	80080e0 <HAL_UART_Receive_IT+0x84>
    if ((pData == NULL) || (Size == 0U))
 8008064:	2900      	cmp	r1, #0
 8008066:	d039      	beq.n	80080dc <HAL_UART_Receive_IT+0x80>
 8008068:	fab2 f382 	clz	r3, r2
 800806c:	095b      	lsrs	r3, r3, #5
 800806e:	2b00      	cmp	r3, #0
 8008070:	d134      	bne.n	80080dc <HAL_UART_Receive_IT+0x80>
{
 8008072:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(huart);
 8008074:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
 8008078:	2c01      	cmp	r4, #1
 800807a:	d062      	beq.n	8008142 <HAL_UART_Receive_IT+0xe6>
    UART_MASK_COMPUTATION(huart);
 800807c:	6884      	ldr	r4, [r0, #8]
    __HAL_LOCK(huart);
 800807e:	2501      	movs	r5, #1
    huart->pRxBuffPtr  = pData;
 8008080:	6581      	str	r1, [r0, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8008082:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    __HAL_LOCK(huart);
 8008086:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->RxXferSize  = Size;
 800808a:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 800808e:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 8008092:	66c3      	str	r3, [r0, #108]	; 0x6c
 8008094:	6801      	ldr	r1, [r0, #0]
 8008096:	6e45      	ldr	r5, [r0, #100]	; 0x64
    UART_MASK_COMPUTATION(huart);
 8008098:	d024      	beq.n	80080e4 <HAL_UART_Receive_IT+0x88>
 800809a:	2c00      	cmp	r4, #0
 800809c:	d146      	bne.n	800812c <HAL_UART_Receive_IT+0xd0>
 800809e:	6903      	ldr	r3, [r0, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d066      	beq.n	8008172 <HAL_UART_Receive_IT+0x116>
 80080a4:	237f      	movs	r3, #127	; 0x7f
 80080a6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080aa:	2400      	movs	r4, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080ac:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ae:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080b2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b6:	688b      	ldr	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80080b8:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080bc:	f043 0301 	orr.w	r3, r3, #1
 80080c0:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80080c2:	d020      	beq.n	8008106 <HAL_UART_Receive_IT+0xaa>
        huart->RxISR = UART_RxISR_8BIT;
 80080c4:	4c31      	ldr	r4, [pc, #196]	; (800818c <HAL_UART_Receive_IT+0x130>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80080c6:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 80080c8:	2300      	movs	r3, #0
 80080ca:	66c4      	str	r4, [r0, #108]	; 0x6c
 80080cc:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80080d0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
    return HAL_OK;
 80080d4:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80080d6:	600a      	str	r2, [r1, #0]
}
 80080d8:	bc70      	pop	{r4, r5, r6}
 80080da:	4770      	bx	lr
      return HAL_ERROR;
 80080dc:	2001      	movs	r0, #1
}
 80080de:	4770      	bx	lr
    return HAL_BUSY;
 80080e0:	2002      	movs	r0, #2
 80080e2:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80080e4:	6904      	ldr	r4, [r0, #16]
 80080e6:	b374      	cbz	r4, 8008146 <HAL_UART_Receive_IT+0xea>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080e8:	2622      	movs	r6, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ea:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    UART_MASK_COMPUTATION(huart);
 80080ee:	24ff      	movs	r4, #255	; 0xff
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80080f0:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080f4:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f8:	688b      	ldr	r3, [r1, #8]
    UART_MASK_COMPUTATION(huart);
 80080fa:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fe:	f043 0301 	orr.w	r3, r3, #1
 8008102:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008104:	d1de      	bne.n	80080c4 <HAL_UART_Receive_IT+0x68>
 8008106:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800810a:	4293      	cmp	r3, r2
 800810c:	d8da      	bhi.n	80080c4 <HAL_UART_Receive_IT+0x68>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800810e:	4c20      	ldr	r4, [pc, #128]	; (8008190 <HAL_UART_Receive_IT+0x134>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008110:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 8008112:	2300      	movs	r3, #0
 8008114:	66c4      	str	r4, [r0, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 800811a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    return HAL_OK;
 800811e:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008120:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008122:	688b      	ldr	r3, [r1, #8]
 8008124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008128:	608b      	str	r3, [r1, #8]
 800812a:	e7d5      	b.n	80080d8 <HAL_UART_Receive_IT+0x7c>
    UART_MASK_COMPUTATION(huart);
 800812c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8008130:	d023      	beq.n	800817a <HAL_UART_Receive_IT+0x11e>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008132:	2422      	movs	r4, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008134:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    UART_MASK_COMPUTATION(huart);
 8008138:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800813c:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
 8008140:	e7b9      	b.n	80080b6 <HAL_UART_Receive_IT+0x5a>
    return HAL_BUSY;
 8008142:	2002      	movs	r0, #2
 8008144:	e7c8      	b.n	80080d8 <HAL_UART_Receive_IT+0x7c>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008146:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008148:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800814c:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    UART_MASK_COMPUTATION(huart);
 8008150:	f240 14ff 	movw	r4, #511	; 0x1ff
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008154:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008158:	688b      	ldr	r3, [r1, #8]
    UART_MASK_COMPUTATION(huart);
 800815a:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800815e:	f043 0301 	orr.w	r3, r3, #1
 8008162:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008164:	d103      	bne.n	800816e <HAL_UART_Receive_IT+0x112>
 8008166:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800816a:	4293      	cmp	r3, r2
 800816c:	d90c      	bls.n	8008188 <HAL_UART_Receive_IT+0x12c>
        huart->RxISR = UART_RxISR_16BIT;
 800816e:	4c09      	ldr	r4, [pc, #36]	; (8008194 <HAL_UART_Receive_IT+0x138>)
 8008170:	e7a9      	b.n	80080c6 <HAL_UART_Receive_IT+0x6a>
    UART_MASK_COMPUTATION(huart);
 8008172:	23ff      	movs	r3, #255	; 0xff
 8008174:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008178:	e797      	b.n	80080aa <HAL_UART_Receive_IT+0x4e>
 800817a:	6903      	ldr	r3, [r0, #16]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d091      	beq.n	80080a4 <HAL_UART_Receive_IT+0x48>
 8008180:	233f      	movs	r3, #63	; 0x3f
 8008182:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008186:	e790      	b.n	80080aa <HAL_UART_Receive_IT+0x4e>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008188:	4c03      	ldr	r4, [pc, #12]	; (8008198 <HAL_UART_Receive_IT+0x13c>)
 800818a:	e7c1      	b.n	8008110 <HAL_UART_Receive_IT+0xb4>
 800818c:	080081a1 	.word	0x080081a1
 8008190:	0800825d 	.word	0x0800825d
 8008194:	08008201 	.word	0x08008201
 8008198:	08008315 	.word	0x08008315

0800819c <HAL_UART_TxCpltCallback>:
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop

080081a0 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081a0:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 80081a4:	6802      	ldr	r2, [r0, #0]
 80081a6:	2922      	cmp	r1, #34	; 0x22
{
 80081a8:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081aa:	d004      	beq.n	80081b6 <UART_RxISR_8BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081ac:	6993      	ldr	r3, [r2, #24]
 80081ae:	f043 0308 	orr.w	r3, r3, #8
 80081b2:	6193      	str	r3, [r2, #24]
  }
}
 80081b4:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80081b8:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 80081bc:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80081be:	4022      	ands	r2, r4
 80081c0:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 80081c2:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 80081c6:	6d81      	ldr	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80081c8:	3a01      	subs	r2, #1
    huart->pRxBuffPtr++;
 80081ca:	3101      	adds	r1, #1
    huart->RxXferCount--;
 80081cc:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 80081ce:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80081d0:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80081d4:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 80081d8:	b292      	uxth	r2, r2
 80081da:	2a00      	cmp	r2, #0
 80081dc:	d1ea      	bne.n	80081b4 <UART_RxISR_8BIT+0x14>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081de:	6801      	ldr	r1, [r0, #0]
      huart->RxState = HAL_UART_STATE_READY;
 80081e0:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081e2:	680c      	ldr	r4, [r1, #0]
 80081e4:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 80081e8:	600c      	str	r4, [r1, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ea:	688c      	ldr	r4, [r1, #8]
 80081ec:	f024 0401 	bic.w	r4, r4, #1
 80081f0:	608c      	str	r4, [r1, #8]
      huart->RxISR = NULL;
 80081f2:	66c2      	str	r2, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 80081f4:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
      HAL_UART_RxCpltCallback(huart);
 80081f8:	f7fa f8e2 	bl	80023c0 <HAL_UART_RxCpltCallback>
}
 80081fc:	bd38      	pop	{r3, r4, r5, pc}
 80081fe:	bf00      	nop

08008200 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008200:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8008204:	6802      	ldr	r2, [r0, #0]
 8008206:	2922      	cmp	r1, #34	; 0x22
{
 8008208:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800820a:	d004      	beq.n	8008216 <UART_RxISR_16BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800820c:	6993      	ldr	r3, [r2, #24]
 800820e:	f043 0308 	orr.w	r3, r3, #8
 8008212:	6193      	str	r3, [r2, #24]
  }
}
 8008214:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008216:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8008218:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
 800821c:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800821e:	4029      	ands	r1, r5
 8008220:	f824 1b02 	strh.w	r1, [r4], #2
    huart->RxXferCount--;
 8008224:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 8008228:	6584      	str	r4, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800822a:	3901      	subs	r1, #1
 800822c:	b289      	uxth	r1, r1
 800822e:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8008232:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 8008236:	b289      	uxth	r1, r1
 8008238:	2900      	cmp	r1, #0
 800823a:	d1eb      	bne.n	8008214 <UART_RxISR_16BIT+0x14>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800823c:	6814      	ldr	r4, [r2, #0]
      huart->RxState = HAL_UART_STATE_READY;
 800823e:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008240:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8008244:	6014      	str	r4, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008246:	6894      	ldr	r4, [r2, #8]
 8008248:	f024 0401 	bic.w	r4, r4, #1
 800824c:	6094      	str	r4, [r2, #8]
      huart->RxISR = NULL;
 800824e:	66c1      	str	r1, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 8008250:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
      HAL_UART_RxCpltCallback(huart);
 8008254:	f7fa f8b4 	bl	80023c0 <HAL_UART_RxCpltCallback>
}
 8008258:	bd38      	pop	{r3, r4, r5, pc}
 800825a:	bf00      	nop

0800825c <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800825c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8008260:	2b22      	cmp	r3, #34	; 0x22
 8008262:	d005      	beq.n	8008270 <UART_RxISR_8BIT_FIFOEN+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008264:	6802      	ldr	r2, [r0, #0]
 8008266:	6993      	ldr	r3, [r2, #24]
 8008268:	f043 0308 	orr.w	r3, r3, #8
 800826c:	6193      	str	r3, [r2, #24]
 800826e:	4770      	bx	lr
{
 8008270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008274:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 8008278:	2d00      	cmp	r5, #0
 800827a:	d043      	beq.n	8008304 <UART_RxISR_8BIT_FIFOEN+0xa8>
 800827c:	4604      	mov	r4, r0
 800827e:	f890 8060 	ldrb.w	r8, [r0, #96]	; 0x60
        huart->RxState = HAL_UART_STATE_READY;
 8008282:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008284:	4e21      	ldr	r6, [pc, #132]	; (800830c <UART_RxISR_8BIT_FIFOEN+0xb0>)
 8008286:	e002      	b.n	800828e <UART_RxISR_8BIT_FIFOEN+0x32>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008288:	3d01      	subs	r5, #1
 800828a:	b2ad      	uxth	r5, r5
 800828c:	b32d      	cbz	r5, 80082da <UART_RxISR_8BIT_FIFOEN+0x7e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800828e:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008290:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008294:	ea08 0303 	and.w	r3, r8, r3
 8008298:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 800829a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr++;
 800829e:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80082a0:	3b01      	subs	r3, #1
      huart->pRxBuffPtr++;
 80082a2:	3201      	adds	r2, #1
      huart->RxXferCount--;
 80082a4:	b29b      	uxth	r3, r3
      huart->pRxBuffPtr++;
 80082a6:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80082a8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 80082ac:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1e8      	bne.n	8008288 <UART_RxISR_8BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082b6:	6822      	ldr	r2, [r4, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80082b8:	3d01      	subs	r5, #1
        HAL_UART_RxCpltCallback(huart);
 80082ba:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082bc:	6811      	ldr	r1, [r2, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80082be:	b2ad      	uxth	r5, r5
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082c0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80082c4:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082c6:	6891      	ldr	r1, [r2, #8]
 80082c8:	4031      	ands	r1, r6
 80082ca:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80082cc:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 80082d0:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 80082d2:	f7fa f875 	bl	80023c0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80082d6:	2d00      	cmp	r5, #0
 80082d8:	d1d9      	bne.n	800828e <UART_RxISR_8BIT_FIFOEN+0x32>
    rxdatacount = huart->RxXferCount;
 80082da:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80082de:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80082e0:	b173      	cbz	r3, 8008300 <UART_RxISR_8BIT_FIFOEN+0xa4>
 80082e2:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d90a      	bls.n	8008300 <UART_RxISR_8BIT_FIFOEN+0xa4>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082ea:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_8BIT;
 80082ec:	4908      	ldr	r1, [pc, #32]	; (8008310 <UART_RxISR_8BIT_FIFOEN+0xb4>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082ee:	689a      	ldr	r2, [r3, #8]
 80082f0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80082f4:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80082f6:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 80082f8:	66e1      	str	r1, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80082fa:	f042 0220 	orr.w	r2, r2, #32
 80082fe:	601a      	str	r2, [r3, #0]
  }
}
 8008300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rxdatacount = huart->RxXferCount;
 8008304:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8008308:	e7fa      	b.n	8008300 <UART_RxISR_8BIT_FIFOEN+0xa4>
 800830a:	bf00      	nop
 800830c:	effffffe 	.word	0xeffffffe
 8008310:	080081a1 	.word	0x080081a1

08008314 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008314:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8008318:	2b22      	cmp	r3, #34	; 0x22
 800831a:	d005      	beq.n	8008328 <UART_RxISR_16BIT_FIFOEN+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800831c:	6802      	ldr	r2, [r0, #0]
 800831e:	6993      	ldr	r3, [r2, #24]
 8008320:	f043 0308 	orr.w	r3, r3, #8
 8008324:	6193      	str	r3, [r2, #24]
 8008326:	4770      	bx	lr
{
 8008328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800832c:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 8008330:	2d00      	cmp	r5, #0
 8008332:	d041      	beq.n	80083b8 <UART_RxISR_16BIT_FIFOEN+0xa4>
 8008334:	4604      	mov	r4, r0
  uint16_t  uhMask = huart->Mask;
 8008336:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
        huart->RxState = HAL_UART_STATE_READY;
 800833a:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800833c:	4e20      	ldr	r6, [pc, #128]	; (80083c0 <UART_RxISR_16BIT_FIFOEN+0xac>)
 800833e:	e002      	b.n	8008346 <UART_RxISR_16BIT_FIFOEN+0x32>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008340:	3d01      	subs	r5, #1
 8008342:	b2ad      	uxth	r5, r5
 8008344:	b31d      	cbz	r5, 800838e <UART_RxISR_16BIT_FIFOEN+0x7a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008346:	6821      	ldr	r1, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8008348:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800834a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800834c:	ea08 0303 	and.w	r3, r8, r3
 8008350:	f822 3b02 	strh.w	r3, [r2], #2
      huart->RxXferCount--;
 8008354:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 8008358:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800835a:	3b01      	subs	r3, #1
 800835c:	b29b      	uxth	r3, r3
 800835e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8008362:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008366:	b29b      	uxth	r3, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1e9      	bne.n	8008340 <UART_RxISR_16BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800836c:	680a      	ldr	r2, [r1, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800836e:	3d01      	subs	r5, #1
        HAL_UART_RxCpltCallback(huart);
 8008370:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008372:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008376:	b2ad      	uxth	r5, r5
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008378:	600a      	str	r2, [r1, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800837a:	688a      	ldr	r2, [r1, #8]
 800837c:	4032      	ands	r2, r6
 800837e:	608a      	str	r2, [r1, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8008380:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8008384:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8008386:	f7fa f81b 	bl	80023c0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800838a:	2d00      	cmp	r5, #0
 800838c:	d1db      	bne.n	8008346 <UART_RxISR_16BIT_FIFOEN+0x32>
    rxdatacount = huart->RxXferCount;
 800838e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008392:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008394:	b173      	cbz	r3, 80083b4 <UART_RxISR_16BIT_FIFOEN+0xa0>
 8008396:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800839a:	429a      	cmp	r2, r3
 800839c:	d90a      	bls.n	80083b4 <UART_RxISR_16BIT_FIFOEN+0xa0>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800839e:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_16BIT;
 80083a0:	4908      	ldr	r1, [pc, #32]	; (80083c4 <UART_RxISR_16BIT_FIFOEN+0xb0>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80083a8:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083aa:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 80083ac:	66e1      	str	r1, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083ae:	f042 0220 	orr.w	r2, r2, #32
 80083b2:	601a      	str	r2, [r3, #0]
  }
}
 80083b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rxdatacount = huart->RxXferCount;
 80083b8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80083bc:	e7fa      	b.n	80083b4 <UART_RxISR_16BIT_FIFOEN+0xa0>
 80083be:	bf00      	nop
 80083c0:	effffffe 	.word	0xeffffffe
 80083c4:	08008201 	.word	0x08008201

080083c8 <HAL_UART_ErrorCallback>:
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop

080083cc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80083cc:	6802      	ldr	r2, [r0, #0]
{
 80083ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80083d2:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80083d4:	f640 050f 	movw	r5, #2063	; 0x80f
{
 80083d8:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083da:	6810      	ldr	r0, [r2, #0]
  if (errorflags == 0U)
 80083dc:	422b      	tst	r3, r5
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083de:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 80083e0:	d070      	beq.n	80084c4 <HAL_UART_IRQHandler+0xf8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80083e2:	4d73      	ldr	r5, [pc, #460]	; (80085b0 <HAL_UART_IRQHandler+0x1e4>)
 80083e4:	400d      	ands	r5, r1
 80083e6:	f000 808f 	beq.w	8008508 <HAL_UART_IRQHandler+0x13c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083ea:	07df      	lsls	r7, r3, #31
 80083ec:	d509      	bpl.n	8008402 <HAL_UART_IRQHandler+0x36>
 80083ee:	05c6      	lsls	r6, r0, #23
 80083f0:	d507      	bpl.n	8008402 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083f2:	2601      	movs	r6, #1
 80083f4:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083f6:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 80083fa:	f046 0601 	orr.w	r6, r6, #1
 80083fe:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008402:	079f      	lsls	r7, r3, #30
 8008404:	f003 0604 	and.w	r6, r3, #4
 8008408:	f140 8093 	bpl.w	8008532 <HAL_UART_IRQHandler+0x166>
 800840c:	07cf      	lsls	r7, r1, #31
 800840e:	d50a      	bpl.n	8008426 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008410:	2702      	movs	r7, #2
 8008412:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008414:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
 8008418:	f047 0704 	orr.w	r7, r7, #4
 800841c:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008420:	2e00      	cmp	r6, #0
 8008422:	f040 808c 	bne.w	800853e <HAL_UART_IRQHandler+0x172>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008426:	071f      	lsls	r7, r3, #28
 8008428:	d505      	bpl.n	8008436 <HAL_UART_IRQHandler+0x6a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800842a:	0686      	lsls	r6, r0, #26
 800842c:	f100 8097 	bmi.w	800855e <HAL_UART_IRQHandler+0x192>
 8008430:	2d00      	cmp	r5, #0
 8008432:	f040 8094 	bne.w	800855e <HAL_UART_IRQHandler+0x192>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008436:	051f      	lsls	r7, r3, #20
 8008438:	d50a      	bpl.n	8008450 <HAL_UART_IRQHandler+0x84>
 800843a:	0146      	lsls	r6, r0, #5
 800843c:	d508      	bpl.n	8008450 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800843e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8008442:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008444:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8008448:	f045 0520 	orr.w	r5, r5, #32
 800844c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008450:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8008454:	2d00      	cmp	r5, #0
 8008456:	d06a      	beq.n	800852e <HAL_UART_IRQHandler+0x162>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008458:	069d      	lsls	r5, r3, #26
 800845a:	d507      	bpl.n	800846c <HAL_UART_IRQHandler+0xa0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800845c:	0680      	lsls	r0, r0, #26
 800845e:	f140 808b 	bpl.w	8008578 <HAL_UART_IRQHandler+0x1ac>
        if (huart->RxISR != NULL)
 8008462:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008464:	b113      	cbz	r3, 800846c <HAL_UART_IRQHandler+0xa0>
          huart->RxISR(huart);
 8008466:	4620      	mov	r0, r4
 8008468:	4798      	blx	r3
 800846a:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 800846c:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008470:	6891      	ldr	r1, [r2, #8]
 8008472:	064f      	lsls	r7, r1, #25
 8008474:	d403      	bmi.n	800847e <HAL_UART_IRQHandler+0xb2>
 8008476:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 800847a:	f000 8093 	beq.w	80085a4 <HAL_UART_IRQHandler+0x1d8>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800847e:	6811      	ldr	r1, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8008480:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008482:	4b4c      	ldr	r3, [pc, #304]	; (80085b4 <HAL_UART_IRQHandler+0x1e8>)
  huart->RxISR = NULL;
 8008484:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008486:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800848a:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800848c:	6891      	ldr	r1, [r2, #8]
 800848e:	400b      	ands	r3, r1
 8008490:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8008492:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008496:	6893      	ldr	r3, [r2, #8]
  huart->RxISR = NULL;
 8008498:	66e0      	str	r0, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800849a:	065e      	lsls	r6, r3, #25
 800849c:	d568      	bpl.n	8008570 <HAL_UART_IRQHandler+0x1a4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800849e:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 80084a0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084a6:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 80084a8:	2900      	cmp	r1, #0
 80084aa:	d061      	beq.n	8008570 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084ac:	4b42      	ldr	r3, [pc, #264]	; (80085b8 <HAL_UART_IRQHandler+0x1ec>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084ae:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084b0:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084b2:	f7fc fd19 	bl	8004ee8 <HAL_DMA_Abort_IT>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d039      	beq.n	800852e <HAL_UART_IRQHandler+0x162>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084ba:	6fa0      	ldr	r0, [r4, #120]	; 0x78
}
 80084bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084c0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80084c2:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084c4:	069f      	lsls	r7, r3, #26
 80084c6:	d509      	bpl.n	80084dc <HAL_UART_IRQHandler+0x110>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084c8:	0686      	lsls	r6, r0, #26
 80084ca:	d505      	bpl.n	80084d8 <HAL_UART_IRQHandler+0x10c>
      if (huart->RxISR != NULL)
 80084cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80084ce:	b373      	cbz	r3, 800852e <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 80084d0:	4620      	mov	r0, r4
}
 80084d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 80084d6:	4718      	bx	r3
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084d8:	00cd      	lsls	r5, r1, #3
 80084da:	d4f7      	bmi.n	80084cc <HAL_UART_IRQHandler+0x100>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80084dc:	02dd      	lsls	r5, r3, #11
 80084de:	d409      	bmi.n	80084f4 <HAL_UART_IRQHandler+0x128>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80084e0:	061e      	lsls	r6, r3, #24
 80084e2:	d51a      	bpl.n	800851a <HAL_UART_IRQHandler+0x14e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80084e4:	0605      	lsls	r5, r0, #24
 80084e6:	d516      	bpl.n	8008516 <HAL_UART_IRQHandler+0x14a>
    if (huart->TxISR != NULL)
 80084e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80084ea:	b303      	cbz	r3, 800852e <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 80084ec:	4620      	mov	r0, r4
}
 80084ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 80084f2:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80084f4:	024f      	lsls	r7, r1, #9
 80084f6:	d5f3      	bpl.n	80084e0 <HAL_UART_IRQHandler+0x114>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80084fc:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084fe:	6213      	str	r3, [r2, #32]
}
 8008500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8008504:	f000 bc00 	b.w	8008d08 <HAL_UARTEx_WakeupCallback>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008508:	4e2c      	ldr	r6, [pc, #176]	; (80085bc <HAL_UART_IRQHandler+0x1f0>)
 800850a:	4230      	tst	r0, r6
 800850c:	d0e6      	beq.n	80084dc <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800850e:	07df      	lsls	r7, r3, #31
 8008510:	f57f af77 	bpl.w	8008402 <HAL_UART_IRQHandler+0x36>
 8008514:	e76b      	b.n	80083ee <HAL_UART_IRQHandler+0x22>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008516:	020f      	lsls	r7, r1, #8
 8008518:	d4e6      	bmi.n	80084e8 <HAL_UART_IRQHandler+0x11c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800851a:	065e      	lsls	r6, r3, #25
 800851c:	d501      	bpl.n	8008522 <HAL_UART_IRQHandler+0x156>
 800851e:	0645      	lsls	r5, r0, #25
 8008520:	d42e      	bmi.n	8008580 <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008522:	0219      	lsls	r1, r3, #8
 8008524:	d414      	bmi.n	8008550 <HAL_UART_IRQHandler+0x184>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008526:	01db      	lsls	r3, r3, #7
 8008528:	d501      	bpl.n	800852e <HAL_UART_IRQHandler+0x162>
 800852a:	2800      	cmp	r0, #0
 800852c:	db35      	blt.n	800859a <HAL_UART_IRQHandler+0x1ce>
}
 800852e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008532:	2e00      	cmp	r6, #0
 8008534:	f43f af77 	beq.w	8008426 <HAL_UART_IRQHandler+0x5a>
 8008538:	07ce      	lsls	r6, r1, #31
 800853a:	f57f af74 	bpl.w	8008426 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800853e:	2604      	movs	r6, #4
 8008540:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008542:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8008546:	f046 0602 	orr.w	r6, r6, #2
 800854a:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 800854e:	e76a      	b.n	8008426 <HAL_UART_IRQHandler+0x5a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008550:	0042      	lsls	r2, r0, #1
 8008552:	d5e8      	bpl.n	8008526 <HAL_UART_IRQHandler+0x15a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008554:	4620      	mov	r0, r4
}
 8008556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800855a:	f000 bbd9 	b.w	8008d10 <HAL_UARTEx_TxFifoEmptyCallback>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800855e:	2508      	movs	r5, #8
 8008560:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008562:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8008566:	f045 0508 	orr.w	r5, r5, #8
 800856a:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 800856e:	e762      	b.n	8008436 <HAL_UART_IRQHandler+0x6a>
            HAL_UART_ErrorCallback(huart);
 8008570:	4620      	mov	r0, r4
 8008572:	f7ff ff29 	bl	80083c8 <HAL_UART_ErrorCallback>
 8008576:	e7da      	b.n	800852e <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008578:	00cb      	lsls	r3, r1, #3
 800857a:	f57f af77 	bpl.w	800846c <HAL_UART_IRQHandler+0xa0>
 800857e:	e770      	b.n	8008462 <HAL_UART_IRQHandler+0x96>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008580:	6813      	ldr	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008582:	2520      	movs	r5, #32
  huart->TxISR = NULL;
 8008584:	2100      	movs	r1, #0
  HAL_UART_TxCpltCallback(huart);
 8008586:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800858c:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800858e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 8008592:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 8008594:	f7ff fe02 	bl	800819c <HAL_UART_TxCpltCallback>
 8008598:	e7c9      	b.n	800852e <HAL_UART_IRQHandler+0x162>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800859a:	4620      	mov	r0, r4
}
 800859c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 80085a0:	f000 bbb4 	b.w	8008d0c <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 80085a4:	4620      	mov	r0, r4
 80085a6:	f7ff ff0f 	bl	80083c8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085aa:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 80085ae:	e7be      	b.n	800852e <HAL_UART_IRQHandler+0x162>
 80085b0:	10000001 	.word	0x10000001
 80085b4:	effffffe 	.word	0xeffffffe
 80085b8:	080085c1 	.word	0x080085c1
 80085bc:	04000120 	.word	0x04000120

080085c0 <UART_DMAAbortOnError>:
{
 80085c0:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 80085c2:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80085c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  HAL_UART_ErrorCallback(huart);
 80085ca:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 80085cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80085d0:	f7ff fefa 	bl	80083c8 <HAL_UART_ErrorCallback>
}
 80085d4:	bd08      	pop	{r3, pc}
 80085d6:	bf00      	nop

080085d8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80085da:	07da      	lsls	r2, r3, #31
{
 80085dc:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085de:	d506      	bpl.n	80085ee <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085e0:	6801      	ldr	r1, [r0, #0]
 80085e2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80085e4:	684a      	ldr	r2, [r1, #4]
 80085e6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80085ea:	4322      	orrs	r2, r4
 80085ec:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085ee:	079c      	lsls	r4, r3, #30
 80085f0:	d506      	bpl.n	8008600 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085f2:	6801      	ldr	r1, [r0, #0]
 80085f4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80085f6:	684a      	ldr	r2, [r1, #4]
 80085f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80085fc:	4322      	orrs	r2, r4
 80085fe:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008600:	0759      	lsls	r1, r3, #29
 8008602:	d506      	bpl.n	8008612 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008604:	6801      	ldr	r1, [r0, #0]
 8008606:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008608:	684a      	ldr	r2, [r1, #4]
 800860a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800860e:	4322      	orrs	r2, r4
 8008610:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008612:	071a      	lsls	r2, r3, #28
 8008614:	d506      	bpl.n	8008624 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008616:	6801      	ldr	r1, [r0, #0]
 8008618:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800861a:	684a      	ldr	r2, [r1, #4]
 800861c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008620:	4322      	orrs	r2, r4
 8008622:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008624:	06dc      	lsls	r4, r3, #27
 8008626:	d506      	bpl.n	8008636 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008628:	6801      	ldr	r1, [r0, #0]
 800862a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800862c:	688a      	ldr	r2, [r1, #8]
 800862e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008632:	4322      	orrs	r2, r4
 8008634:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008636:	0699      	lsls	r1, r3, #26
 8008638:	d506      	bpl.n	8008648 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800863a:	6801      	ldr	r1, [r0, #0]
 800863c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800863e:	688a      	ldr	r2, [r1, #8]
 8008640:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008644:	4322      	orrs	r2, r4
 8008646:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008648:	065a      	lsls	r2, r3, #25
 800864a:	d50a      	bpl.n	8008662 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800864c:	6801      	ldr	r1, [r0, #0]
 800864e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008650:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008652:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008656:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800865a:	ea42 0204 	orr.w	r2, r2, r4
 800865e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008660:	d00b      	beq.n	800867a <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008662:	061b      	lsls	r3, r3, #24
 8008664:	d506      	bpl.n	8008674 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008666:	6802      	ldr	r2, [r0, #0]
 8008668:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800866a:	6853      	ldr	r3, [r2, #4]
 800866c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008670:	430b      	orrs	r3, r1
 8008672:	6053      	str	r3, [r2, #4]
}
 8008674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008678:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800867a:	684a      	ldr	r2, [r1, #4]
 800867c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800867e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8008682:	4322      	orrs	r2, r4
 8008684:	604a      	str	r2, [r1, #4]
 8008686:	e7ec      	b.n	8008662 <UART_AdvFeatureConfig+0x8a>

08008688 <HAL_UART_Init>:
  if (huart == NULL)
 8008688:	2800      	cmp	r0, #0
 800868a:	f000 80d2 	beq.w	8008832 <HAL_UART_Init+0x1aa>
  if (huart->gState == HAL_UART_STATE_RESET)
 800868e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8008692:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008696:	4604      	mov	r4, r0
 8008698:	b087      	sub	sp, #28
  if (huart->gState == HAL_UART_STATE_RESET)
 800869a:	2b00      	cmp	r3, #0
 800869c:	d058      	beq.n	8008750 <HAL_UART_Init+0xc8>
  __HAL_UART_DISABLE(huart);
 800869e:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80086a0:	2024      	movs	r0, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086a2:	6921      	ldr	r1, [r4, #16]
 80086a4:	68a2      	ldr	r2, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 80086a6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086aa:	430a      	orrs	r2, r1
  __HAL_UART_DISABLE(huart);
 80086ac:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086ae:	6960      	ldr	r0, [r4, #20]
 80086b0:	69e1      	ldr	r1, [r4, #28]
  __HAL_UART_DISABLE(huart);
 80086b2:	f025 0501 	bic.w	r5, r5, #1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086b6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086b8:	48a1      	ldr	r0, [pc, #644]	; (8008940 <HAL_UART_Init+0x2b8>)
  __HAL_UART_DISABLE(huart);
 80086ba:	601d      	str	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086bc:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086be:	681e      	ldr	r6, [r3, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 80086c0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086c2:	4030      	ands	r0, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086c4:	68e7      	ldr	r7, [r4, #12]
  tmpreg |= (uint32_t)huart->FifoMode;
 80086c6:	432a      	orrs	r2, r5
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086c8:	f8d4 c018 	ldr.w	ip, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086cc:	4e9d      	ldr	r6, [pc, #628]	; (8008944 <HAL_UART_Init+0x2bc>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086ce:	4302      	orrs	r2, r0
 80086d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086d2:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086d4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80086dc:	ea42 0207 	orr.w	r2, r2, r7
 80086e0:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086e2:	f000 808b 	beq.w	80087fc <HAL_UART_Init+0x174>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086e6:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80086e8:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086ea:	4897      	ldr	r0, [pc, #604]	; (8008948 <HAL_UART_Init+0x2c0>)
    tmpreg |= huart->Init.OneBitSampling;
 80086ec:	ea4c 0202 	orr.w	r2, ip, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086f0:	4030      	ands	r0, r6
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086f2:	4e96      	ldr	r6, [pc, #600]	; (800894c <HAL_UART_Init+0x2c4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086f4:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086f6:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086f8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fc:	f022 020f 	bic.w	r2, r2, #15
 8008700:	ea42 0205 	orr.w	r2, r2, r5
 8008704:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008706:	d028      	beq.n	800875a <HAL_UART_Init+0xd2>
 8008708:	4a91      	ldr	r2, [pc, #580]	; (8008950 <HAL_UART_Init+0x2c8>)
 800870a:	4293      	cmp	r3, r2
 800870c:	f000 810e 	beq.w	800892c <HAL_UART_Init+0x2a4>
 8008710:	4a90      	ldr	r2, [pc, #576]	; (8008954 <HAL_UART_Init+0x2cc>)
 8008712:	4293      	cmp	r3, r2
 8008714:	f000 8100 	beq.w	8008918 <HAL_UART_Init+0x290>
 8008718:	4a8f      	ldr	r2, [pc, #572]	; (8008958 <HAL_UART_Init+0x2d0>)
 800871a:	4293      	cmp	r3, r2
 800871c:	f000 829e 	beq.w	8008c5c <HAL_UART_Init+0x5d4>
 8008720:	4a8e      	ldr	r2, [pc, #568]	; (800895c <HAL_UART_Init+0x2d4>)
 8008722:	4293      	cmp	r3, r2
 8008724:	f000 82a4 	beq.w	8008c70 <HAL_UART_Init+0x5e8>
 8008728:	4a8d      	ldr	r2, [pc, #564]	; (8008960 <HAL_UART_Init+0x2d8>)
 800872a:	4293      	cmp	r3, r2
 800872c:	f000 82aa 	beq.w	8008c84 <HAL_UART_Init+0x5fc>
 8008730:	4a8c      	ldr	r2, [pc, #560]	; (8008964 <HAL_UART_Init+0x2dc>)
 8008732:	4293      	cmp	r3, r2
 8008734:	f000 82c5 	beq.w	8008cc2 <HAL_UART_Init+0x63a>
 8008738:	4a8b      	ldr	r2, [pc, #556]	; (8008968 <HAL_UART_Init+0x2e0>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d16f      	bne.n	800881e <HAL_UART_Init+0x196>
 800873e:	4b8b      	ldr	r3, [pc, #556]	; (800896c <HAL_UART_Init+0x2e4>)
 8008740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008742:	f003 0307 	and.w	r3, r3, #7
 8008746:	2b05      	cmp	r3, #5
 8008748:	d869      	bhi.n	800881e <HAL_UART_Init+0x196>
 800874a:	4a89      	ldr	r2, [pc, #548]	; (8008970 <HAL_UART_Init+0x2e8>)
 800874c:	5cd3      	ldrb	r3, [r2, r3]
 800874e:	e00c      	b.n	800876a <HAL_UART_Init+0xe2>
    huart->Lock = HAL_UNLOCKED;
 8008750:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8008754:	f7fa fc90 	bl	8003078 <HAL_UART_MspInit>
 8008758:	e7a1      	b.n	800869e <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800875a:	4b84      	ldr	r3, [pc, #528]	; (800896c <HAL_UART_Init+0x2e4>)
 800875c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800875e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008762:	2b28      	cmp	r3, #40	; 0x28
 8008764:	d85b      	bhi.n	800881e <HAL_UART_Init+0x196>
 8008766:	4a83      	ldr	r2, [pc, #524]	; (8008974 <HAL_UART_Init+0x2ec>)
 8008768:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800876a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800876e:	f000 810f 	beq.w	8008990 <HAL_UART_Init+0x308>
    switch (clocksource)
 8008772:	2b40      	cmp	r3, #64	; 0x40
 8008774:	d853      	bhi.n	800881e <HAL_UART_Init+0x196>
 8008776:	e8df f013 	tbh	[pc, r3, lsl #1]
 800877a:	0209      	.short	0x0209
 800877c:	0052020c 	.word	0x0052020c
 8008780:	02040052 	.word	0x02040052
 8008784:	00520052 	.word	0x00520052
 8008788:	01fc0052 	.word	0x01fc0052
 800878c:	00520052 	.word	0x00520052
 8008790:	00520052 	.word	0x00520052
 8008794:	00520052 	.word	0x00520052
 8008798:	01d00052 	.word	0x01d00052
 800879c:	00520052 	.word	0x00520052
 80087a0:	00520052 	.word	0x00520052
 80087a4:	00520052 	.word	0x00520052
 80087a8:	00520052 	.word	0x00520052
 80087ac:	00520052 	.word	0x00520052
 80087b0:	00520052 	.word	0x00520052
 80087b4:	00520052 	.word	0x00520052
 80087b8:	02120052 	.word	0x02120052
 80087bc:	00520052 	.word	0x00520052
 80087c0:	00520052 	.word	0x00520052
 80087c4:	00520052 	.word	0x00520052
 80087c8:	00520052 	.word	0x00520052
 80087cc:	00520052 	.word	0x00520052
 80087d0:	00520052 	.word	0x00520052
 80087d4:	00520052 	.word	0x00520052
 80087d8:	00520052 	.word	0x00520052
 80087dc:	00520052 	.word	0x00520052
 80087e0:	00520052 	.word	0x00520052
 80087e4:	00520052 	.word	0x00520052
 80087e8:	00520052 	.word	0x00520052
 80087ec:	00520052 	.word	0x00520052
 80087f0:	00520052 	.word	0x00520052
 80087f4:	00520052 	.word	0x00520052
 80087f8:	020f0052 	.word	0x020f0052
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087fc:	6898      	ldr	r0, [r3, #8]
 80087fe:	4a52      	ldr	r2, [pc, #328]	; (8008948 <HAL_UART_Init+0x2c0>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008800:	495a      	ldr	r1, [pc, #360]	; (800896c <HAL_UART_Init+0x2e4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008802:	4002      	ands	r2, r0
 8008804:	ea42 020c 	orr.w	r2, r2, ip
 8008808:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800880a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800880c:	f022 020f 	bic.w	r2, r2, #15
 8008810:	432a      	orrs	r2, r5
 8008812:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008814:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8008816:	f003 0307 	and.w	r3, r3, #7
 800881a:	2b05      	cmp	r3, #5
 800881c:	d90b      	bls.n	8008836 <HAL_UART_Init+0x1ae>
  huart->RxISR = NULL;
 800881e:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8008820:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    return HAL_ERROR;
 8008824:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 8008826:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8008828:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
}
 800882c:	b007      	add	sp, #28
 800882e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_ERROR;
 8008832:	2001      	movs	r0, #1
}
 8008834:	4770      	bx	lr
    switch (clocksource)
 8008836:	4a50      	ldr	r2, [pc, #320]	; (8008978 <HAL_UART_Init+0x2f0>)
 8008838:	5cd3      	ldrb	r3, [r2, r3]
 800883a:	2b08      	cmp	r3, #8
 800883c:	f000 823c 	beq.w	8008cb8 <HAL_UART_Init+0x630>
 8008840:	f240 822a 	bls.w	8008c98 <HAL_UART_Init+0x610>
 8008844:	2b20      	cmp	r3, #32
 8008846:	f000 81ac 	beq.w	8008ba2 <HAL_UART_Init+0x51a>
 800884a:	2b40      	cmp	r3, #64	; 0x40
 800884c:	f000 8245 	beq.w	8008cda <HAL_UART_Init+0x652>
 8008850:	2b10      	cmp	r3, #16
 8008852:	d1e4      	bne.n	800881e <HAL_UART_Init+0x196>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008854:	680b      	ldr	r3, [r1, #0]
 8008856:	069f      	lsls	r7, r3, #26
 8008858:	f140 8242 	bpl.w	8008ce0 <HAL_UART_Init+0x658>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800885c:	680b      	ldr	r3, [r1, #0]
 800885e:	4847      	ldr	r0, [pc, #284]	; (800897c <HAL_UART_Init+0x2f4>)
 8008860:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008864:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008866:	4b46      	ldr	r3, [pc, #280]	; (8008980 <HAL_UART_Init+0x2f8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008868:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800886a:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800886e:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008872:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008876:	428b      	cmp	r3, r1
 8008878:	d3d1      	bcc.n	800881e <HAL_UART_Init+0x196>
 800887a:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 800887e:	d8ce      	bhi.n	800881e <HAL_UART_Init+0x196>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008880:	2500      	movs	r5, #0
 8008882:	2300      	movs	r3, #0
 8008884:	0877      	lsrs	r7, r6, #1
 8008886:	4629      	mov	r1, r5
 8008888:	f7f7 fde2 	bl	8000450 <__aeabi_uldivmod>
 800888c:	4632      	mov	r2, r6
 800888e:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8008892:	462b      	mov	r3, r5
 8008894:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8008898:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 800889c:	eb18 0007 	adds.w	r0, r8, r7
 80088a0:	f149 0100 	adc.w	r1, r9, #0
 80088a4:	f7f7 fdd4 	bl	8000450 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088a8:	4b36      	ldr	r3, [pc, #216]	; (8008984 <HAL_UART_Init+0x2fc>)
 80088aa:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d8b5      	bhi.n	800881e <HAL_UART_Init+0x196>
          huart->Instance->BRR = usartdiv;
 80088b2:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 80088b4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 80088b8:	60d0      	str	r0, [r2, #12]
  huart->NbRxDataToProcess = 1;
 80088ba:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80088bc:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f040 8151 	bne.w	8008b6a <HAL_UART_Init+0x4e2>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088c8:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ca:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088d4:	689a      	ldr	r2, [r3, #8]
 80088d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088da:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	f042 0201 	orr.w	r2, r2, #1
 80088e2:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088e4:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  tickstart = HAL_GetTick();
 80088e8:	f7fa fd74 	bl	80033d4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088ec:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80088ee:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	0711      	lsls	r1, r2, #28
 80088f4:	f100 80d4 	bmi.w	8008aa0 <HAL_UART_Init+0x418>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	0750      	lsls	r0, r2, #29
 80088fc:	f100 80f9 	bmi.w	8008af2 <HAL_UART_Init+0x46a>
  __HAL_UNLOCK(huart);
 8008900:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008902:	2220      	movs	r2, #32
  return HAL_OK;
 8008904:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8008906:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800890a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800890e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 8008912:	b007      	add	sp, #28
 8008914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008918:	4b14      	ldr	r3, [pc, #80]	; (800896c <HAL_UART_Init+0x2e4>)
 800891a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891c:	f003 0307 	and.w	r3, r3, #7
 8008920:	2b05      	cmp	r3, #5
 8008922:	f63f af7c 	bhi.w	800881e <HAL_UART_Init+0x196>
 8008926:	4a18      	ldr	r2, [pc, #96]	; (8008988 <HAL_UART_Init+0x300>)
 8008928:	5cd3      	ldrb	r3, [r2, r3]
 800892a:	e71e      	b.n	800876a <HAL_UART_Init+0xe2>
 800892c:	4b0f      	ldr	r3, [pc, #60]	; (800896c <HAL_UART_Init+0x2e4>)
 800892e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008930:	f003 0307 	and.w	r3, r3, #7
 8008934:	2b05      	cmp	r3, #5
 8008936:	f63f af72 	bhi.w	800881e <HAL_UART_Init+0x196>
 800893a:	4a14      	ldr	r2, [pc, #80]	; (800898c <HAL_UART_Init+0x304>)
 800893c:	5cd3      	ldrb	r3, [r2, r3]
 800893e:	e714      	b.n	800876a <HAL_UART_Init+0xe2>
 8008940:	cfff69f3 	.word	0xcfff69f3
 8008944:	58000c00 	.word	0x58000c00
 8008948:	11fff4ff 	.word	0x11fff4ff
 800894c:	40011000 	.word	0x40011000
 8008950:	40004400 	.word	0x40004400
 8008954:	40004800 	.word	0x40004800
 8008958:	40004c00 	.word	0x40004c00
 800895c:	40005000 	.word	0x40005000
 8008960:	40011400 	.word	0x40011400
 8008964:	40007800 	.word	0x40007800
 8008968:	40007c00 	.word	0x40007c00
 800896c:	58024400 	.word	0x58024400
 8008970:	0800fcec 	.word	0x0800fcec
 8008974:	0800fcc0 	.word	0x0800fcc0
 8008978:	0800fcf4 	.word	0x0800fcf4
 800897c:	03d09000 	.word	0x03d09000
 8008980:	0800fcfc 	.word	0x0800fcfc
 8008984:	000ffcff 	.word	0x000ffcff
 8008988:	0800fcec 	.word	0x0800fcec
 800898c:	0800fcec 	.word	0x0800fcec
    switch (clocksource)
 8008990:	2b40      	cmp	r3, #64	; 0x40
 8008992:	f63f af44 	bhi.w	800881e <HAL_UART_Init+0x196>
 8008996:	a201      	add	r2, pc, #4	; (adr r2, 800899c <HAL_UART_Init+0x314>)
 8008998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899c:	08008c13 	.word	0x08008c13
 80089a0:	08008c0d 	.word	0x08008c0d
 80089a4:	0800881f 	.word	0x0800881f
 80089a8:	0800881f 	.word	0x0800881f
 80089ac:	08008c19 	.word	0x08008c19
 80089b0:	0800881f 	.word	0x0800881f
 80089b4:	0800881f 	.word	0x0800881f
 80089b8:	0800881f 	.word	0x0800881f
 80089bc:	08008bff 	.word	0x08008bff
 80089c0:	0800881f 	.word	0x0800881f
 80089c4:	0800881f 	.word	0x0800881f
 80089c8:	0800881f 	.word	0x0800881f
 80089cc:	0800881f 	.word	0x0800881f
 80089d0:	0800881f 	.word	0x0800881f
 80089d4:	0800881f 	.word	0x0800881f
 80089d8:	0800881f 	.word	0x0800881f
 80089dc:	08008ba7 	.word	0x08008ba7
 80089e0:	0800881f 	.word	0x0800881f
 80089e4:	0800881f 	.word	0x0800881f
 80089e8:	0800881f 	.word	0x0800881f
 80089ec:	0800881f 	.word	0x0800881f
 80089f0:	0800881f 	.word	0x0800881f
 80089f4:	0800881f 	.word	0x0800881f
 80089f8:	0800881f 	.word	0x0800881f
 80089fc:	0800881f 	.word	0x0800881f
 8008a00:	0800881f 	.word	0x0800881f
 8008a04:	0800881f 	.word	0x0800881f
 8008a08:	0800881f 	.word	0x0800881f
 8008a0c:	0800881f 	.word	0x0800881f
 8008a10:	0800881f 	.word	0x0800881f
 8008a14:	0800881f 	.word	0x0800881f
 8008a18:	0800881f 	.word	0x0800881f
 8008a1c:	08008c23 	.word	0x08008c23
 8008a20:	0800881f 	.word	0x0800881f
 8008a24:	0800881f 	.word	0x0800881f
 8008a28:	0800881f 	.word	0x0800881f
 8008a2c:	0800881f 	.word	0x0800881f
 8008a30:	0800881f 	.word	0x0800881f
 8008a34:	0800881f 	.word	0x0800881f
 8008a38:	0800881f 	.word	0x0800881f
 8008a3c:	0800881f 	.word	0x0800881f
 8008a40:	0800881f 	.word	0x0800881f
 8008a44:	0800881f 	.word	0x0800881f
 8008a48:	0800881f 	.word	0x0800881f
 8008a4c:	0800881f 	.word	0x0800881f
 8008a50:	0800881f 	.word	0x0800881f
 8008a54:	0800881f 	.word	0x0800881f
 8008a58:	0800881f 	.word	0x0800881f
 8008a5c:	0800881f 	.word	0x0800881f
 8008a60:	0800881f 	.word	0x0800881f
 8008a64:	0800881f 	.word	0x0800881f
 8008a68:	0800881f 	.word	0x0800881f
 8008a6c:	0800881f 	.word	0x0800881f
 8008a70:	0800881f 	.word	0x0800881f
 8008a74:	0800881f 	.word	0x0800881f
 8008a78:	0800881f 	.word	0x0800881f
 8008a7c:	0800881f 	.word	0x0800881f
 8008a80:	0800881f 	.word	0x0800881f
 8008a84:	0800881f 	.word	0x0800881f
 8008a88:	0800881f 	.word	0x0800881f
 8008a8c:	0800881f 	.word	0x0800881f
 8008a90:	0800881f 	.word	0x0800881f
 8008a94:	0800881f 	.word	0x0800881f
 8008a98:	0800881f 	.word	0x0800881f
 8008a9c:	08008c27 	.word	0x08008c27
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aa0:	69dd      	ldr	r5, [r3, #28]
 8008aa2:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8008aa6:	f47f af27 	bne.w	80088f8 <HAL_UART_Init+0x270>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aaa:	f7fa fc93 	bl	80033d4 <HAL_GetTick>
 8008aae:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008ab0:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ab2:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8008ab6:	f080 80c0 	bcs.w	8008c3a <HAL_UART_Init+0x5b2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	0752      	lsls	r2, r2, #29
 8008abe:	d5ef      	bpl.n	8008aa0 <HAL_UART_Init+0x418>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ac0:	69da      	ldr	r2, [r3, #28]
 8008ac2:	0517      	lsls	r7, r2, #20
 8008ac4:	d5ec      	bpl.n	8008aa0 <HAL_UART_Init+0x418>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ac6:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 8008aca:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8008acc:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ace:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008ad0:	6819      	ldr	r1, [r3, #0]
 8008ad2:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8008ad6:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ad8:	6899      	ldr	r1, [r3, #8]
 8008ada:	f021 0101 	bic.w	r1, r1, #1
 8008ade:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8008ae0:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8008ae4:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008ae8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008aec:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8008af0:	e69c      	b.n	800882c <HAL_UART_Init+0x1a4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008af2:	69dd      	ldr	r5, [r3, #28]
 8008af4:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8008af8:	f47f af02 	bne.w	8008900 <HAL_UART_Init+0x278>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008afc:	f7fa fc6a 	bl	80033d4 <HAL_GetTick>
 8008b00:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008b02:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b04:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8008b08:	f080 8097 	bcs.w	8008c3a <HAL_UART_Init+0x5b2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	0751      	lsls	r1, r2, #29
 8008b10:	d5ef      	bpl.n	8008af2 <HAL_UART_Init+0x46a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b12:	69da      	ldr	r2, [r3, #28]
 8008b14:	0512      	lsls	r2, r2, #20
 8008b16:	d5ec      	bpl.n	8008af2 <HAL_UART_Init+0x46a>
 8008b18:	e7d5      	b.n	8008ac6 <HAL_UART_Init+0x43e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b1a:	4b73      	ldr	r3, [pc, #460]	; (8008ce8 <HAL_UART_Init+0x660>)
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	0690      	lsls	r0, r2, #26
 8008b20:	f140 80d9 	bpl.w	8008cd6 <HAL_UART_Init+0x64e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4871      	ldr	r0, [pc, #452]	; (8008cec <HAL_UART_Init+0x664>)
 8008b28:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008b2c:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b2e:	4b70      	ldr	r3, [pc, #448]	; (8008cf0 <HAL_UART_Init+0x668>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b30:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b34:	6862      	ldr	r2, [r4, #4]
 8008b36:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8008b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b3e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008b42:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b46:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b48:	f1a3 0210 	sub.w	r2, r3, #16
 8008b4c:	428a      	cmp	r2, r1
 8008b4e:	f63f ae66 	bhi.w	800881e <HAL_UART_Init+0x196>
        huart->Instance->BRR = usartdiv;
 8008b52:	6820      	ldr	r0, [r4, #0]
  huart->NbTxDataToProcess = 1;
 8008b54:	2200      	movs	r2, #0
  huart->NbRxDataToProcess = 1;
 8008b56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        huart->Instance->BRR = usartdiv;
 8008b5a:	60c3      	str	r3, [r0, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->RxISR = NULL;
 8008b5e:	6722      	str	r2, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 8008b60:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f43f aeaf 	beq.w	80088c8 <HAL_UART_Init+0x240>
    UART_AdvFeatureConfig(huart);
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f7ff fd34 	bl	80085d8 <UART_AdvFeatureConfig>
 8008b70:	e6aa      	b.n	80088c8 <HAL_UART_Init+0x240>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b72:	a803      	add	r0, sp, #12
 8008b74:	f7fe fda8 	bl	80076c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b78:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	d056      	beq.n	8008c2c <HAL_UART_Init+0x5a4>
 8008b7e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008b80:	e7d5      	b.n	8008b2e <HAL_UART_Init+0x4a6>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b82:	4668      	mov	r0, sp
 8008b84:	f7fe fd08 	bl	8007598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b88:	9801      	ldr	r0, [sp, #4]
 8008b8a:	e7f6      	b.n	8008b7a <HAL_UART_Init+0x4f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b8c:	f7fd fd3e 	bl	800660c <HAL_RCC_GetPCLK1Freq>
 8008b90:	e7f3      	b.n	8008b7a <HAL_UART_Init+0x4f2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b92:	f7fd fdeb 	bl	800676c <HAL_RCC_GetPCLK2Freq>
 8008b96:	e7f0      	b.n	8008b7a <HAL_UART_Init+0x4f2>
        pclk = (uint32_t) LSE_VALUE;
 8008b98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008b9c:	e7c7      	b.n	8008b2e <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) CSI_VALUE;
 8008b9e:	4855      	ldr	r0, [pc, #340]	; (8008cf4 <HAL_UART_Init+0x66c>)
 8008ba0:	e7c5      	b.n	8008b2e <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) CSI_VALUE;
 8008ba2:	4854      	ldr	r0, [pc, #336]	; (8008cf4 <HAL_UART_Init+0x66c>)
 8008ba4:	e65f      	b.n	8008866 <HAL_UART_Init+0x1de>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ba6:	4b50      	ldr	r3, [pc, #320]	; (8008ce8 <HAL_UART_Init+0x660>)
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	0696      	lsls	r6, r2, #26
 8008bac:	f140 809a 	bpl.w	8008ce4 <HAL_UART_Init+0x65c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	484e      	ldr	r0, [pc, #312]	; (8008cec <HAL_UART_Init+0x664>)
 8008bb4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008bb8:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bba:	4b4d      	ldr	r3, [pc, #308]	; (8008cf0 <HAL_UART_Init+0x668>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bbc:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bc0:	6862      	ldr	r2, [r4, #4]
 8008bc2:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]
 8008bc6:	0853      	lsrs	r3, r2, #1
 8008bc8:	fbb0 f0f5 	udiv	r0, r0, r5
 8008bcc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008bd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bd4:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bd6:	f1a2 0010 	sub.w	r0, r2, #16
 8008bda:	4288      	cmp	r0, r1
 8008bdc:	f63f ae1f 	bhi.w	800881e <HAL_UART_Init+0x196>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008be0:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008be4:	f3c2 0242 	ubfx	r2, r2, #1, #3
  huart->NbTxDataToProcess = 1;
 8008be8:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 8008bea:	6825      	ldr	r5, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bec:	b29b      	uxth	r3, r3
  huart->NbRxDataToProcess = 1;
 8008bee:	f04f 1001 	mov.w	r0, #65537	; 0x10001
        huart->Instance->BRR = brrtemp;
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	60eb      	str	r3, [r5, #12]
  huart->RxISR = NULL;
 8008bf6:	6721      	str	r1, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 8008bf8:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
 8008bfc:	e660      	b.n	80088c0 <HAL_UART_Init+0x238>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bfe:	a803      	add	r0, sp, #12
 8008c00:	f7fe fd62 	bl	80076c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c04:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8008c06:	b188      	cbz	r0, 8008c2c <HAL_UART_Init+0x5a4>
 8008c08:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008c0a:	e7d6      	b.n	8008bba <HAL_UART_Init+0x532>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c0c:	f7fd fdae 	bl	800676c <HAL_RCC_GetPCLK2Freq>
 8008c10:	e7f9      	b.n	8008c06 <HAL_UART_Init+0x57e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c12:	f7fd fcfb 	bl	800660c <HAL_RCC_GetPCLK1Freq>
 8008c16:	e7f6      	b.n	8008c06 <HAL_UART_Init+0x57e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c18:	4668      	mov	r0, sp
 8008c1a:	f7fe fcbd 	bl	8007598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c1e:	9801      	ldr	r0, [sp, #4]
 8008c20:	e7f1      	b.n	8008c06 <HAL_UART_Init+0x57e>
        pclk = (uint32_t) CSI_VALUE;
 8008c22:	4834      	ldr	r0, [pc, #208]	; (8008cf4 <HAL_UART_Init+0x66c>)
 8008c24:	e7c9      	b.n	8008bba <HAL_UART_Init+0x532>
        pclk = (uint32_t) LSE_VALUE;
 8008c26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008c2a:	e7c6      	b.n	8008bba <HAL_UART_Init+0x532>
  huart->RxISR = NULL;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8008c32:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8008c34:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
 8008c38:	e642      	b.n	80088c0 <HAL_UART_Init+0x238>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008c3a:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8008c3c:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 8008c3e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008c40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c46:	689a      	ldr	r2, [r3, #8]
 8008c48:	f022 0201 	bic.w	r2, r2, #1
 8008c4c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8008c4e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 8008c52:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008c56:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 8008c5a:	e5e7      	b.n	800882c <HAL_UART_Init+0x1a4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c5c:	4b22      	ldr	r3, [pc, #136]	; (8008ce8 <HAL_UART_Init+0x660>)
 8008c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c60:	f003 0307 	and.w	r3, r3, #7
 8008c64:	2b05      	cmp	r3, #5
 8008c66:	f63f adda 	bhi.w	800881e <HAL_UART_Init+0x196>
 8008c6a:	4a23      	ldr	r2, [pc, #140]	; (8008cf8 <HAL_UART_Init+0x670>)
 8008c6c:	5cd3      	ldrb	r3, [r2, r3]
 8008c6e:	e57c      	b.n	800876a <HAL_UART_Init+0xe2>
 8008c70:	4b1d      	ldr	r3, [pc, #116]	; (8008ce8 <HAL_UART_Init+0x660>)
 8008c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c74:	f003 0307 	and.w	r3, r3, #7
 8008c78:	2b05      	cmp	r3, #5
 8008c7a:	f63f add0 	bhi.w	800881e <HAL_UART_Init+0x196>
 8008c7e:	4a1f      	ldr	r2, [pc, #124]	; (8008cfc <HAL_UART_Init+0x674>)
 8008c80:	5cd3      	ldrb	r3, [r2, r3]
 8008c82:	e572      	b.n	800876a <HAL_UART_Init+0xe2>
 8008c84:	4b18      	ldr	r3, [pc, #96]	; (8008ce8 <HAL_UART_Init+0x660>)
 8008c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c8c:	2b28      	cmp	r3, #40	; 0x28
 8008c8e:	f63f adc6 	bhi.w	800881e <HAL_UART_Init+0x196>
 8008c92:	4a1b      	ldr	r2, [pc, #108]	; (8008d00 <HAL_UART_Init+0x678>)
 8008c94:	5cd3      	ldrb	r3, [r2, r3]
 8008c96:	e568      	b.n	800876a <HAL_UART_Init+0xe2>
    switch (clocksource)
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d00a      	beq.n	8008cb2 <HAL_UART_Init+0x62a>
 8008c9c:	2b04      	cmp	r3, #4
 8008c9e:	f47f adbe 	bne.w	800881e <HAL_UART_Init+0x196>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ca2:	4668      	mov	r0, sp
 8008ca4:	f7fe fc78 	bl	8007598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ca8:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8008caa:	2800      	cmp	r0, #0
 8008cac:	d0be      	beq.n	8008c2c <HAL_UART_Init+0x5a4>
 8008cae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008cb0:	e5d9      	b.n	8008866 <HAL_UART_Init+0x1de>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008cb2:	f7fe fc5f 	bl	8007574 <HAL_RCCEx_GetD3PCLK1Freq>
 8008cb6:	e7f8      	b.n	8008caa <HAL_UART_Init+0x622>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cb8:	a803      	add	r0, sp, #12
 8008cba:	f7fe fd05 	bl	80076c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008cbe:	9804      	ldr	r0, [sp, #16]
 8008cc0:	e7f3      	b.n	8008caa <HAL_UART_Init+0x622>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cc2:	4b09      	ldr	r3, [pc, #36]	; (8008ce8 <HAL_UART_Init+0x660>)
 8008cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc6:	f003 0307 	and.w	r3, r3, #7
 8008cca:	2b05      	cmp	r3, #5
 8008ccc:	f63f ada7 	bhi.w	800881e <HAL_UART_Init+0x196>
 8008cd0:	4a0c      	ldr	r2, [pc, #48]	; (8008d04 <HAL_UART_Init+0x67c>)
 8008cd2:	5cd3      	ldrb	r3, [r2, r3]
 8008cd4:	e549      	b.n	800876a <HAL_UART_Init+0xe2>
          pclk = (uint32_t) HSI_VALUE;
 8008cd6:	4805      	ldr	r0, [pc, #20]	; (8008cec <HAL_UART_Init+0x664>)
 8008cd8:	e729      	b.n	8008b2e <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) LSE_VALUE;
 8008cda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008cde:	e5c2      	b.n	8008866 <HAL_UART_Init+0x1de>
          pclk = (uint32_t) HSI_VALUE;
 8008ce0:	4802      	ldr	r0, [pc, #8]	; (8008cec <HAL_UART_Init+0x664>)
 8008ce2:	e5c0      	b.n	8008866 <HAL_UART_Init+0x1de>
          pclk = (uint32_t) HSI_VALUE;
 8008ce4:	4801      	ldr	r0, [pc, #4]	; (8008cec <HAL_UART_Init+0x664>)
 8008ce6:	e768      	b.n	8008bba <HAL_UART_Init+0x532>
 8008ce8:	58024400 	.word	0x58024400
 8008cec:	03d09000 	.word	0x03d09000
 8008cf0:	0800fcfc 	.word	0x0800fcfc
 8008cf4:	003d0900 	.word	0x003d0900
 8008cf8:	0800fcec 	.word	0x0800fcec
 8008cfc:	0800fcec 	.word	0x0800fcec
 8008d00:	0800fcc0 	.word	0x0800fcc0
 8008d04:	0800fcec 	.word	0x0800fcec

08008d08 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop

08008d0c <HAL_UARTEx_RxFifoFullCallback>:
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop

08008d10 <HAL_UARTEx_TxFifoEmptyCallback>:
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop

08008d14 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d14:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8008d18:	2a01      	cmp	r2, #1
 8008d1a:	d017      	beq.n	8008d4c <HAL_UARTEx_DisableFifoMode+0x38>
 8008d1c:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8008d1e:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d20:	2100      	movs	r1, #0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d22:	681a      	ldr	r2, [r3, #0]
{
 8008d24:	b470      	push	{r4, r5, r6}
  huart->gState = HAL_UART_STATE_BUSY;
 8008d26:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8008d2a:	2620      	movs	r6, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d2c:	6814      	ldr	r4, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8008d2e:	4608      	mov	r0, r1
  __HAL_UART_DISABLE(huart);
 8008d30:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d32:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8008d36:	f025 0501 	bic.w	r5, r5, #1
 8008d3a:	6015      	str	r5, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d3c:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d3e:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008d40:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8008d44:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8008d48:	bc70      	pop	{r4, r5, r6}
 8008d4a:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008d4c:	2002      	movs	r0, #2
}
 8008d4e:	4770      	bx	lr

08008d50 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d50:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8008d54:	2a01      	cmp	r2, #1
 8008d56:	d046      	beq.n	8008de6 <HAL_UARTEx_SetTxFifoThreshold+0x96>
 8008d58:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8008d5a:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d5c:	681a      	ldr	r2, [r3, #0]
{
 8008d5e:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8008d60:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
{
 8008d64:	b084      	sub	sp, #16
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d66:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d68:	6810      	ldr	r0, [r2, #0]
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008d6a:	4d20      	ldr	r5, [pc, #128]	; (8008dec <HAL_UARTEx_SetTxFifoThreshold+0x9c>)
  __HAL_UART_DISABLE(huart);
 8008d6c:	f020 0001 	bic.w	r0, r0, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008d70:	4e1f      	ldr	r6, [pc, #124]	; (8008df0 <HAL_UARTEx_SetTxFifoThreshold+0xa0>)
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008d72:	9500      	str	r5, [sp, #0]
 8008d74:	f240 1507 	movw	r5, #263	; 0x107
  __HAL_UART_DISABLE(huart);
 8008d78:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d7a:	6890      	ldr	r0, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008d7c:	9501      	str	r5, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008d7e:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d82:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008d86:	9602      	str	r6, [sp, #8]
 8008d88:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d8c:	4301      	orrs	r1, r0

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d8e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008d90:	9503      	str	r5, [sp, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d92:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d94:	b320      	cbz	r0, 8008de0 <HAL_UARTEx_SetTxFifoThreshold+0x90>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d96:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008d98:	a904      	add	r1, sp, #16
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d9a:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008d9c:	f3c5 6542 	ubfx	r5, r5, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008da0:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008da4:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008da6:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008daa:	f815 1c10 	ldrb.w	r1, [r5, #-16]
 8008dae:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008db2:	0100      	lsls	r0, r0, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008db4:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008db6:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008dba:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008dbe:	fb90 f0f5 	sdiv	r0, r0, r5
 8008dc2:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8008dcc:	2520      	movs	r5, #32
  return HAL_OK;
 8008dce:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dd0:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008dd2:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8008dd6:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8008dda:	b004      	add	sp, #16
 8008ddc:	bcf0      	pop	{r4, r5, r6, r7}
 8008dde:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8008de0:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8008de2:	4608      	mov	r0, r1
 8008de4:	e7ed      	b.n	8008dc2 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 8008de6:	2002      	movs	r0, #2
}
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	03010101 	.word	0x03010101
 8008df0:	04020408 	.word	0x04020408

08008df4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8008df4:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8008df8:	2a01      	cmp	r2, #1
 8008dfa:	d046      	beq.n	8008e8a <HAL_UARTEx_SetRxFifoThreshold+0x96>
 8008dfc:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8008dfe:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e00:	681a      	ldr	r2, [r3, #0]
{
 8008e02:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8008e04:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
{
 8008e08:	b084      	sub	sp, #16
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e0a:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008e0c:	6810      	ldr	r0, [r2, #0]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008e0e:	4d20      	ldr	r5, [pc, #128]	; (8008e90 <HAL_UARTEx_SetRxFifoThreshold+0x9c>)
  __HAL_UART_DISABLE(huart);
 8008e10:	f020 0001 	bic.w	r0, r0, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008e14:	4e1f      	ldr	r6, [pc, #124]	; (8008e94 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008e16:	9500      	str	r5, [sp, #0]
 8008e18:	f240 1507 	movw	r5, #263	; 0x107
  __HAL_UART_DISABLE(huart);
 8008e1c:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e1e:	6890      	ldr	r0, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008e20:	9501      	str	r5, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008e22:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e26:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008e2a:	9602      	str	r6, [sp, #8]
 8008e2c:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e30:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e32:	6e58      	ldr	r0, [r3, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008e34:	9503      	str	r5, [sp, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e36:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e38:	b320      	cbz	r0, 8008e84 <HAL_UARTEx_SetRxFifoThreshold+0x90>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e3a:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008e3c:	a904      	add	r1, sp, #16
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e3e:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008e40:	f3c5 6542 	ubfx	r5, r5, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008e44:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008e48:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008e4a:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008e4e:	f815 1c10 	ldrb.w	r1, [r5, #-16]
 8008e52:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008e56:	0100      	lsls	r0, r0, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008e58:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008e5a:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008e5e:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008e62:	fb90 f0f5 	sdiv	r0, r0, r5
 8008e66:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8008e70:	2520      	movs	r5, #32
  return HAL_OK;
 8008e72:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e74:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008e76:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8008e7a:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8008e7e:	b004      	add	sp, #16
 8008e80:	bcf0      	pop	{r4, r5, r6, r7}
 8008e82:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8008e84:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8008e86:	4608      	mov	r0, r1
 8008e88:	e7ed      	b.n	8008e66 <HAL_UARTEx_SetRxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 8008e8a:	2002      	movs	r0, #2
}
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	03010101 	.word	0x03010101
 8008e94:	04020408 	.word	0x04020408

08008e98 <arm_cfft_radix8by2_f32>:
 8008e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e9c:	4607      	mov	r7, r0
 8008e9e:	4608      	mov	r0, r1
 8008ea0:	ed2d 8b06 	vpush	{d8-d10}
 8008ea4:	f8b7 e000 	ldrh.w	lr, [r7]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8008eae:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8008eb2:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8008eb6:	f000 80b0 	beq.w	800901a <arm_cfft_radix8by2_f32+0x182>
 8008eba:	008b      	lsls	r3, r1, #2
 8008ebc:	3210      	adds	r2, #16
 8008ebe:	f100 0610 	add.w	r6, r0, #16
 8008ec2:	f108 0510 	add.w	r5, r8, #16
 8008ec6:	3310      	adds	r3, #16
 8008ec8:	18c4      	adds	r4, r0, r3
 8008eca:	4443      	add	r3, r8
 8008ecc:	ed55 6a04 	vldr	s13, [r5, #-16]
 8008ed0:	f1be 0e01 	subs.w	lr, lr, #1
 8008ed4:	ed56 4a04 	vldr	s9, [r6, #-16]
 8008ed8:	f104 0410 	add.w	r4, r4, #16
 8008edc:	ed15 7a03 	vldr	s14, [r5, #-12]
 8008ee0:	f106 0610 	add.w	r6, r6, #16
 8008ee4:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8008ee8:	ed55 7a02 	vldr	s15, [r5, #-8]
 8008eec:	ed55 2a01 	vldr	s5, [r5, #-4]
 8008ef0:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8008ef4:	ed53 0a04 	vldr	s1, [r3, #-16]
 8008ef8:	f102 0210 	add.w	r2, r2, #16
 8008efc:	ed13 5a03 	vldr	s10, [r3, #-12]
 8008f00:	f105 0510 	add.w	r5, r5, #16
 8008f04:	ed13 3a02 	vldr	s6, [r3, #-8]
 8008f08:	f103 0310 	add.w	r3, r3, #16
 8008f0c:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 8008f10:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8008f14:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8008f18:	ee33 8a83 	vadd.f32	s16, s7, s6
 8008f1c:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8008f20:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8008f24:	ee34 0a06 	vadd.f32	s0, s8, s12
 8008f28:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8008f2c:	ee76 aa87 	vadd.f32	s21, s13, s14
 8008f30:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8008f34:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008f38:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8008f3c:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8008f40:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8008f44:	ee71 8a05 	vadd.f32	s17, s2, s10
 8008f48:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8008f4c:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 8008f50:	ee72 9a22 	vadd.f32	s19, s4, s5
 8008f54:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8008f58:	ee35 5a41 	vsub.f32	s10, s10, s2
 8008f5c:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 8008f60:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8008f64:	ee36 6a44 	vsub.f32	s12, s12, s8
 8008f68:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8008f6c:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8008f70:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8008f74:	ee72 7a62 	vsub.f32	s15, s4, s5
 8008f78:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 8008f7c:	ee73 2a63 	vsub.f32	s5, s6, s7
 8008f80:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8008f84:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8008f88:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8008f8c:	ee24 3a84 	vmul.f32	s6, s9, s8
 8008f90:	ee27 2a26 	vmul.f32	s4, s14, s13
 8008f94:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8008f98:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8008f9c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8008fa0:	ee65 5a84 	vmul.f32	s11, s11, s8
 8008fa4:	ee65 6a26 	vmul.f32	s13, s10, s13
 8008fa8:	ee25 5a04 	vmul.f32	s10, s10, s8
 8008fac:	ee37 7a64 	vsub.f32	s14, s14, s9
 8008fb0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8008fb4:	ee33 4a02 	vadd.f32	s8, s6, s4
 8008fb8:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8008fbc:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 8008fc0:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8008fc4:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8008fc8:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8008fcc:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8008fd0:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8008fd4:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8008fd8:	ee27 4a87 	vmul.f32	s8, s15, s14
 8008fdc:	ee61 5a87 	vmul.f32	s11, s3, s14
 8008fe0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008fe4:	ee22 5a87 	vmul.f32	s10, s5, s14
 8008fe8:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008fec:	ee26 6a26 	vmul.f32	s12, s12, s13
 8008ff0:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8008ff4:	ee74 4a84 	vadd.f32	s9, s9, s8
 8008ff8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008ffc:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009000:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009004:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8009008:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 800900c:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 8009010:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8009014:	f47f af5a 	bne.w	8008ecc <arm_cfft_radix8by2_f32+0x34>
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	b28c      	uxth	r4, r1
 800901c:	2302      	movs	r3, #2
 800901e:	4621      	mov	r1, r4
 8009020:	f000 fd54 	bl	8009acc <arm_radix8_butterfly_f32>
 8009024:	4621      	mov	r1, r4
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	4640      	mov	r0, r8
 800902a:	2302      	movs	r3, #2
 800902c:	ecbd 8b06 	vpop	{d8-d10}
 8009030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009034:	f000 bd4a 	b.w	8009acc <arm_radix8_butterfly_f32>

08009038 <arm_cfft_radix8by4_f32>:
 8009038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903c:	ed2d 8b06 	vpush	{d8-d10}
 8009040:	8804      	ldrh	r4, [r0, #0]
 8009042:	b08f      	sub	sp, #60	; 0x3c
 8009044:	ed91 6a00 	vldr	s12, [r1]
 8009048:	460a      	mov	r2, r1
 800904a:	0864      	lsrs	r4, r4, #1
 800904c:	ed91 7a01 	vldr	s14, [r1, #4]
 8009050:	9101      	str	r1, [sp, #4]
 8009052:	00a3      	lsls	r3, r4, #2
 8009054:	6841      	ldr	r1, [r0, #4]
 8009056:	0864      	lsrs	r4, r4, #1
 8009058:	900c      	str	r0, [sp, #48]	; 0x30
 800905a:	9205      	str	r2, [sp, #20]
 800905c:	f101 0610 	add.w	r6, r1, #16
 8009060:	4625      	mov	r5, r4
 8009062:	940b      	str	r4, [sp, #44]	; 0x2c
 8009064:	f101 0408 	add.w	r4, r1, #8
 8009068:	9602      	str	r6, [sp, #8]
 800906a:	9407      	str	r4, [sp, #28]
 800906c:	18d4      	adds	r4, r2, r3
 800906e:	1eaa      	subs	r2, r5, #2
 8009070:	f101 0518 	add.w	r5, r1, #24
 8009074:	18e0      	adds	r0, r4, r3
 8009076:	edd4 4a00 	vldr	s9, [r4]
 800907a:	ed94 4a01 	vldr	s8, [r4, #4]
 800907e:	46a6      	mov	lr, r4
 8009080:	edd0 6a00 	vldr	s13, [r0]
 8009084:	18c7      	adds	r7, r0, r3
 8009086:	edd0 7a01 	vldr	s15, [r0, #4]
 800908a:	46a0      	mov	r8, r4
 800908c:	ee76 5a26 	vadd.f32	s11, s12, s13
 8009090:	ed97 5a00 	vldr	s10, [r7]
 8009094:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009098:	4604      	mov	r4, r0
 800909a:	9506      	str	r5, [sp, #24]
 800909c:	4605      	mov	r5, r0
 800909e:	ee75 2aa4 	vadd.f32	s5, s11, s9
 80090a2:	900a      	str	r0, [sp, #40]	; 0x28
 80090a4:	9801      	ldr	r0, [sp, #4]
 80090a6:	ee37 6a27 	vadd.f32	s12, s14, s15
 80090aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090ae:	ed97 3a01 	vldr	s6, [r7, #4]
 80090b2:	ee72 2a85 	vadd.f32	s5, s5, s10
 80090b6:	46bc      	mov	ip, r7
 80090b8:	ee76 3a84 	vadd.f32	s7, s13, s8
 80090bc:	9704      	str	r7, [sp, #16]
 80090be:	ee36 7a44 	vsub.f32	s14, s12, s8
 80090c2:	f8cd e00c 	str.w	lr, [sp, #12]
 80090c6:	ee12 9a90 	vmov	r9, s5
 80090ca:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80090ce:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80090d2:	1f3e      	subs	r6, r7, #4
 80090d4:	f840 9b08 	str.w	r9, [r0], #8
 80090d8:	ee37 4ae4 	vsub.f32	s8, s15, s9
 80090dc:	edde 2a01 	vldr	s5, [lr, #4]
 80090e0:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80090e4:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80090e8:	eddc 4a01 	vldr	s9, [ip, #4]
 80090ec:	ee36 6a22 	vadd.f32	s12, s12, s5
 80090f0:	9001      	str	r0, [sp, #4]
 80090f2:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80090f6:	9805      	ldr	r0, [sp, #20]
 80090f8:	ee13 9a90 	vmov	r9, s7
 80090fc:	ee37 7a43 	vsub.f32	s14, s14, s6
 8009100:	ee36 6a24 	vadd.f32	s12, s12, s9
 8009104:	f1ae 0704 	sub.w	r7, lr, #4
 8009108:	ee74 4a05 	vadd.f32	s9, s8, s10
 800910c:	ee76 6a83 	vadd.f32	s13, s13, s6
 8009110:	ed80 6a01 	vstr	s12, [r0, #4]
 8009114:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8009118:	f848 9b08 	str.w	r9, [r8], #8
 800911c:	edce 4a01 	vstr	s9, [lr, #4]
 8009120:	ee15 ea90 	vmov	lr, s11
 8009124:	f844 eb08 	str.w	lr, [r4], #8
 8009128:	ee16 ea90 	vmov	lr, s13
 800912c:	9408      	str	r4, [sp, #32]
 800912e:	462c      	mov	r4, r5
 8009130:	ed85 7a01 	vstr	s14, [r5, #4]
 8009134:	9d04      	ldr	r5, [sp, #16]
 8009136:	f84c eb08 	str.w	lr, [ip], #8
 800913a:	edc5 7a01 	vstr	s15, [r5, #4]
 800913e:	0855      	lsrs	r5, r2, #1
 8009140:	9509      	str	r5, [sp, #36]	; 0x24
 8009142:	f000 8130 	beq.w	80093a6 <arm_cfft_radix8by4_f32+0x36e>
 8009146:	9805      	ldr	r0, [sp, #20]
 8009148:	3b08      	subs	r3, #8
 800914a:	46ab      	mov	fp, r5
 800914c:	f1a4 020c 	sub.w	r2, r4, #12
 8009150:	f100 0510 	add.w	r5, r0, #16
 8009154:	f101 0920 	add.w	r9, r1, #32
 8009158:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800915c:	f8dd a008 	ldr.w	sl, [sp, #8]
 8009160:	4433      	add	r3, r6
 8009162:	3410      	adds	r4, #16
 8009164:	4660      	mov	r0, ip
 8009166:	4641      	mov	r1, r8
 8009168:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800916c:	ed54 6a02 	vldr	s13, [r4, #-8]
 8009170:	f1bb 0b01 	subs.w	fp, fp, #1
 8009174:	ed55 5a02 	vldr	s11, [r5, #-8]
 8009178:	f10a 0a08 	add.w	sl, sl, #8
 800917c:	edd1 7a00 	vldr	s15, [r1]
 8009180:	f105 0508 	add.w	r5, r5, #8
 8009184:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8009188:	edd0 2a00 	vldr	s5, [r0]
 800918c:	ed14 7a01 	vldr	s14, [r4, #-4]
 8009190:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8009194:	ed55 6a03 	vldr	s13, [r5, #-12]
 8009198:	f1a2 0208 	sub.w	r2, r2, #8
 800919c:	ee73 4aa7 	vadd.f32	s9, s7, s15
 80091a0:	ed90 2a01 	vldr	s4, [r0, #4]
 80091a4:	ee36 5a87 	vadd.f32	s10, s13, s14
 80091a8:	ed91 6a01 	vldr	s12, [r1, #4]
 80091ac:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80091b0:	f109 0910 	add.w	r9, r9, #16
 80091b4:	ee74 6aa2 	vadd.f32	s13, s9, s5
 80091b8:	f104 0408 	add.w	r4, r4, #8
 80091bc:	ee73 3ae7 	vsub.f32	s7, s7, s15
 80091c0:	f10e 0e18 	add.w	lr, lr, #24
 80091c4:	ee37 3a67 	vsub.f32	s6, s14, s15
 80091c8:	f1a3 0308 	sub.w	r3, r3, #8
 80091cc:	ed45 6a04 	vstr	s13, [r5, #-16]
 80091d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80091d4:	edd1 6a01 	vldr	s13, [r1, #4]
 80091d8:	ee75 1a86 	vadd.f32	s3, s11, s12
 80091dc:	edd0 4a01 	vldr	s9, [r0, #4]
 80091e0:	ee33 3a22 	vadd.f32	s6, s6, s5
 80091e4:	ee75 6a26 	vadd.f32	s13, s10, s13
 80091e8:	ee35 5a46 	vsub.f32	s10, s10, s12
 80091ec:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80091f0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80091f4:	ee71 1ac2 	vsub.f32	s3, s3, s4
 80091f8:	ee35 5a42 	vsub.f32	s10, s10, s4
 80091fc:	ed45 6a03 	vstr	s13, [r5, #-12]
 8009200:	ee36 2a02 	vadd.f32	s4, s12, s4
 8009204:	edd6 7a00 	vldr	s15, [r6]
 8009208:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800920c:	ed97 1a00 	vldr	s2, [r7]
 8009210:	ee77 2a62 	vsub.f32	s5, s14, s5
 8009214:	ed92 8a04 	vldr	s16, [r2, #16]
 8009218:	ee71 8a27 	vadd.f32	s17, s2, s15
 800921c:	ed93 aa04 	vldr	s20, [r3, #16]
 8009220:	ed16 7a01 	vldr	s14, [r6, #-4]
 8009224:	ee71 7a67 	vsub.f32	s15, s2, s15
 8009228:	ed57 0a01 	vldr	s1, [r7, #-4]
 800922c:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8009230:	ee38 6a88 	vadd.f32	s12, s17, s16
 8009234:	edd3 9a03 	vldr	s19, [r3, #12]
 8009238:	ee30 0a87 	vadd.f32	s0, s1, s14
 800923c:	ed92 9a03 	vldr	s18, [r2, #12]
 8009240:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8009244:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8009248:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800924c:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8009250:	ee16 ca10 	vmov	ip, s12
 8009254:	ee30 6a49 	vsub.f32	s12, s0, s18
 8009258:	ee77 4a01 	vadd.f32	s9, s14, s2
 800925c:	f847 c908 	str.w	ip, [r7], #-8
 8009260:	ee34 4a29 	vadd.f32	s8, s8, s19
 8009264:	edd2 8a03 	vldr	s17, [r2, #12]
 8009268:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800926c:	ed93 8a03 	vldr	s16, [r3, #12]
 8009270:	ee71 0a47 	vsub.f32	s1, s2, s14
 8009274:	ee30 0a28 	vadd.f32	s0, s0, s17
 8009278:	ee39 1a67 	vsub.f32	s2, s18, s15
 800927c:	ee36 6a69 	vsub.f32	s12, s12, s19
 8009280:	ee30 0a08 	vadd.f32	s0, s0, s16
 8009284:	ee75 5aca 	vsub.f32	s11, s11, s20
 8009288:	ed87 0a01 	vstr	s0, [r7, #4]
 800928c:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8009290:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8009294:	ee21 8a80 	vmul.f32	s16, s3, s0
 8009298:	ee23 7a26 	vmul.f32	s14, s6, s13
 800929c:	ee64 7a26 	vmul.f32	s15, s8, s13
 80092a0:	ee61 1aa6 	vmul.f32	s3, s3, s13
 80092a4:	ee24 4a00 	vmul.f32	s8, s8, s0
 80092a8:	ee23 3a00 	vmul.f32	s6, s6, s0
 80092ac:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80092b0:	ee24 0a80 	vmul.f32	s0, s9, s0
 80092b4:	ee38 7a07 	vadd.f32	s14, s16, s14
 80092b8:	ee76 6a84 	vadd.f32	s13, s13, s8
 80092bc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80092c0:	ee33 3a61 	vsub.f32	s6, s6, s3
 80092c4:	ee17 ca10 	vmov	ip, s14
 80092c8:	f841 cb08 	str.w	ip, [r1], #8
 80092cc:	ed01 3a01 	vstr	s6, [r1, #-4]
 80092d0:	ed82 0a04 	vstr	s0, [r2, #16]
 80092d4:	edc2 6a03 	vstr	s13, [r2, #12]
 80092d8:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 80092dc:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 80092e0:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 80092e4:	ee23 4aa6 	vmul.f32	s8, s7, s13
 80092e8:	ee65 4a27 	vmul.f32	s9, s10, s15
 80092ec:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80092f0:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80092f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80092f8:	ee25 5a26 	vmul.f32	s10, s10, s13
 80092fc:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009304:	ee34 6a24 	vadd.f32	s12, s8, s9
 8009308:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800930c:	ee35 5a63 	vsub.f32	s10, s10, s7
 8009310:	ee17 ca90 	vmov	ip, s15
 8009314:	ed04 6a04 	vstr	s12, [r4, #-16]
 8009318:	ed04 5a03 	vstr	s10, [r4, #-12]
 800931c:	f846 c908 	str.w	ip, [r6], #-8
 8009320:	edc6 6a01 	vstr	s13, [r6, #4]
 8009324:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8009328:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 800932c:	ee62 5a27 	vmul.f32	s11, s4, s15
 8009330:	ee22 6a87 	vmul.f32	s12, s5, s14
 8009334:	ee22 2a07 	vmul.f32	s4, s4, s14
 8009338:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800933c:	ee61 6a07 	vmul.f32	s13, s2, s14
 8009340:	ee20 7a87 	vmul.f32	s14, s1, s14
 8009344:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009348:	ee61 7a27 	vmul.f32	s15, s2, s15
 800934c:	ee35 6a86 	vadd.f32	s12, s11, s12
 8009350:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8009354:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8009358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800935c:	ee16 ca10 	vmov	ip, s12
 8009360:	f840 cb08 	str.w	ip, [r0], #8
 8009364:	ed40 2a01 	vstr	s5, [r0, #-4]
 8009368:	edc3 0a04 	vstr	s1, [r3, #16]
 800936c:	edc3 7a03 	vstr	s15, [r3, #12]
 8009370:	f47f aefc 	bne.w	800916c <arm_cfft_radix8by4_f32+0x134>
 8009374:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009376:	9802      	ldr	r0, [sp, #8]
 8009378:	00cb      	lsls	r3, r1, #3
 800937a:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800937e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8009382:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009386:	4498      	add	r8, r3
 8009388:	449c      	add	ip, r3
 800938a:	9102      	str	r1, [sp, #8]
 800938c:	9901      	ldr	r1, [sp, #4]
 800938e:	4419      	add	r1, r3
 8009390:	9101      	str	r1, [sp, #4]
 8009392:	9907      	ldr	r1, [sp, #28]
 8009394:	4419      	add	r1, r3
 8009396:	9107      	str	r1, [sp, #28]
 8009398:	9908      	ldr	r1, [sp, #32]
 800939a:	4419      	add	r1, r3
 800939c:	9b06      	ldr	r3, [sp, #24]
 800939e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093a2:	9108      	str	r1, [sp, #32]
 80093a4:	9306      	str	r3, [sp, #24]
 80093a6:	9a01      	ldr	r2, [sp, #4]
 80093a8:	2304      	movs	r3, #4
 80093aa:	9e08      	ldr	r6, [sp, #32]
 80093ac:	edd2 7a00 	vldr	s15, [r2]
 80093b0:	ed96 7a00 	vldr	s14, [r6]
 80093b4:	edd8 2a00 	vldr	s5, [r8]
 80093b8:	ee77 5a87 	vadd.f32	s11, s15, s14
 80093bc:	ed9c 3a00 	vldr	s6, [ip]
 80093c0:	ed92 6a01 	vldr	s12, [r2, #4]
 80093c4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80093c8:	edd6 6a01 	vldr	s13, [r6, #4]
 80093cc:	ee75 4aa2 	vadd.f32	s9, s11, s5
 80093d0:	ed9c 2a01 	vldr	s4, [ip, #4]
 80093d4:	ee36 5a26 	vadd.f32	s10, s12, s13
 80093d8:	edd8 7a01 	vldr	s15, [r8, #4]
 80093dc:	ee76 6a66 	vsub.f32	s13, s12, s13
 80093e0:	9d02      	ldr	r5, [sp, #8]
 80093e2:	ee34 6a83 	vadd.f32	s12, s9, s6
 80093e6:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80093ea:	ee37 4a27 	vadd.f32	s8, s14, s15
 80093ee:	9805      	ldr	r0, [sp, #20]
 80093f0:	ee76 4ae2 	vsub.f32	s9, s13, s5
 80093f4:	4621      	mov	r1, r4
 80093f6:	ed82 6a00 	vstr	s12, [r2]
 80093fa:	ee35 6ae2 	vsub.f32	s12, s11, s5
 80093fe:	edd8 3a01 	vldr	s7, [r8, #4]
 8009402:	ee75 5a67 	vsub.f32	s11, s10, s15
 8009406:	eddc 1a01 	vldr	s3, [ip, #4]
 800940a:	ee34 4a42 	vsub.f32	s8, s8, s4
 800940e:	ee75 3a23 	vadd.f32	s7, s10, s7
 8009412:	ee74 4a83 	vadd.f32	s9, s9, s6
 8009416:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800941a:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800941e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009422:	ee36 6a43 	vsub.f32	s12, s12, s6
 8009426:	ed82 5a01 	vstr	s10, [r2, #4]
 800942a:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800942e:	9a07      	ldr	r2, [sp, #28]
 8009430:	ee77 7a02 	vadd.f32	s15, s14, s4
 8009434:	ee36 7ac3 	vsub.f32	s14, s13, s6
 8009438:	edd2 2a00 	vldr	s5, [r2]
 800943c:	ed92 5a01 	vldr	s10, [r2, #4]
 8009440:	ee64 3a22 	vmul.f32	s7, s8, s5
 8009444:	ee24 4a05 	vmul.f32	s8, s8, s10
 8009448:	ee24 5a85 	vmul.f32	s10, s9, s10
 800944c:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8009450:	ee33 5a85 	vadd.f32	s10, s7, s10
 8009454:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8009458:	ed88 5a00 	vstr	s10, [r8]
 800945c:	edc8 4a01 	vstr	s9, [r8, #4]
 8009460:	edd5 4a01 	vldr	s9, [r5, #4]
 8009464:	edd5 6a00 	vldr	s13, [r5]
 8009468:	9d06      	ldr	r5, [sp, #24]
 800946a:	ee26 5a26 	vmul.f32	s10, s12, s13
 800946e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009472:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8009476:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800947a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800947e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8009482:	ed86 6a01 	vstr	s12, [r6, #4]
 8009486:	edc6 5a00 	vstr	s11, [r6]
 800948a:	edd5 5a01 	vldr	s11, [r5, #4]
 800948e:	edd5 6a00 	vldr	s13, [r5]
 8009492:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009494:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8009498:	ee67 6a26 	vmul.f32	s13, s14, s13
 800949c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80094a0:	ee27 7a25 	vmul.f32	s14, s14, s11
 80094a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80094a8:	ee36 7a07 	vadd.f32	s14, s12, s14
 80094ac:	edcc 7a01 	vstr	s15, [ip, #4]
 80094b0:	ed8c 7a00 	vstr	s14, [ip]
 80094b4:	6872      	ldr	r2, [r6, #4]
 80094b6:	f000 fb09 	bl	8009acc <arm_radix8_butterfly_f32>
 80094ba:	9803      	ldr	r0, [sp, #12]
 80094bc:	4621      	mov	r1, r4
 80094be:	6872      	ldr	r2, [r6, #4]
 80094c0:	2304      	movs	r3, #4
 80094c2:	f000 fb03 	bl	8009acc <arm_radix8_butterfly_f32>
 80094c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80094c8:	4621      	mov	r1, r4
 80094ca:	6872      	ldr	r2, [r6, #4]
 80094cc:	2304      	movs	r3, #4
 80094ce:	f000 fafd 	bl	8009acc <arm_radix8_butterfly_f32>
 80094d2:	4621      	mov	r1, r4
 80094d4:	6872      	ldr	r2, [r6, #4]
 80094d6:	2304      	movs	r3, #4
 80094d8:	9804      	ldr	r0, [sp, #16]
 80094da:	b00f      	add	sp, #60	; 0x3c
 80094dc:	ecbd 8b06 	vpop	{d8-d10}
 80094e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e4:	f000 baf2 	b.w	8009acc <arm_radix8_butterfly_f32>

080094e8 <arm_cfft_f32>:
 80094e8:	2a01      	cmp	r2, #1
 80094ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ee:	4606      	mov	r6, r0
 80094f0:	4617      	mov	r7, r2
 80094f2:	460c      	mov	r4, r1
 80094f4:	4698      	mov	r8, r3
 80094f6:	8805      	ldrh	r5, [r0, #0]
 80094f8:	d053      	beq.n	80095a2 <arm_cfft_f32+0xba>
 80094fa:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80094fe:	d04b      	beq.n	8009598 <arm_cfft_f32+0xb0>
 8009500:	d916      	bls.n	8009530 <arm_cfft_f32+0x48>
 8009502:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8009506:	d01a      	beq.n	800953e <arm_cfft_f32+0x56>
 8009508:	d95a      	bls.n	80095c0 <arm_cfft_f32+0xd8>
 800950a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800950e:	d043      	beq.n	8009598 <arm_cfft_f32+0xb0>
 8009510:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8009514:	d105      	bne.n	8009522 <arm_cfft_f32+0x3a>
 8009516:	2301      	movs	r3, #1
 8009518:	6872      	ldr	r2, [r6, #4]
 800951a:	4629      	mov	r1, r5
 800951c:	4620      	mov	r0, r4
 800951e:	f000 fad5 	bl	8009acc <arm_radix8_butterfly_f32>
 8009522:	f1b8 0f00 	cmp.w	r8, #0
 8009526:	d111      	bne.n	800954c <arm_cfft_f32+0x64>
 8009528:	2f01      	cmp	r7, #1
 800952a:	d016      	beq.n	800955a <arm_cfft_f32+0x72>
 800952c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009530:	2d20      	cmp	r5, #32
 8009532:	d031      	beq.n	8009598 <arm_cfft_f32+0xb0>
 8009534:	d948      	bls.n	80095c8 <arm_cfft_f32+0xe0>
 8009536:	2d40      	cmp	r5, #64	; 0x40
 8009538:	d0ed      	beq.n	8009516 <arm_cfft_f32+0x2e>
 800953a:	2d80      	cmp	r5, #128	; 0x80
 800953c:	d1f1      	bne.n	8009522 <arm_cfft_f32+0x3a>
 800953e:	4621      	mov	r1, r4
 8009540:	4630      	mov	r0, r6
 8009542:	f7ff fca9 	bl	8008e98 <arm_cfft_radix8by2_f32>
 8009546:	f1b8 0f00 	cmp.w	r8, #0
 800954a:	d0ed      	beq.n	8009528 <arm_cfft_f32+0x40>
 800954c:	68b2      	ldr	r2, [r6, #8]
 800954e:	4620      	mov	r0, r4
 8009550:	89b1      	ldrh	r1, [r6, #12]
 8009552:	f7f6 fec5 	bl	80002e0 <arm_bitreversal_32>
 8009556:	2f01      	cmp	r7, #1
 8009558:	d1e8      	bne.n	800952c <arm_cfft_f32+0x44>
 800955a:	ee07 5a90 	vmov	s15, r5
 800955e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009566:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800956a:	2d00      	cmp	r5, #0
 800956c:	d0de      	beq.n	800952c <arm_cfft_f32+0x44>
 800956e:	f104 0108 	add.w	r1, r4, #8
 8009572:	2300      	movs	r3, #0
 8009574:	ed11 7a02 	vldr	s14, [r1, #-8]
 8009578:	3301      	adds	r3, #1
 800957a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800957e:	3108      	adds	r1, #8
 8009580:	429d      	cmp	r5, r3
 8009582:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009586:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800958a:	ed01 7a04 	vstr	s14, [r1, #-16]
 800958e:	ed41 7a03 	vstr	s15, [r1, #-12]
 8009592:	d1ef      	bne.n	8009574 <arm_cfft_f32+0x8c>
 8009594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009598:	4621      	mov	r1, r4
 800959a:	4630      	mov	r0, r6
 800959c:	f7ff fd4c 	bl	8009038 <arm_cfft_radix8by4_f32>
 80095a0:	e7bf      	b.n	8009522 <arm_cfft_f32+0x3a>
 80095a2:	b1a5      	cbz	r5, 80095ce <arm_cfft_f32+0xe6>
 80095a4:	f101 030c 	add.w	r3, r1, #12
 80095a8:	2200      	movs	r2, #0
 80095aa:	ed53 7a02 	vldr	s15, [r3, #-8]
 80095ae:	3201      	adds	r2, #1
 80095b0:	3308      	adds	r3, #8
 80095b2:	eef1 7a67 	vneg.f32	s15, s15
 80095b6:	4295      	cmp	r5, r2
 80095b8:	ed43 7a04 	vstr	s15, [r3, #-16]
 80095bc:	d1f5      	bne.n	80095aa <arm_cfft_f32+0xc2>
 80095be:	e79c      	b.n	80094fa <arm_cfft_f32+0x12>
 80095c0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80095c4:	d0a7      	beq.n	8009516 <arm_cfft_f32+0x2e>
 80095c6:	e7ac      	b.n	8009522 <arm_cfft_f32+0x3a>
 80095c8:	2d10      	cmp	r5, #16
 80095ca:	d0b8      	beq.n	800953e <arm_cfft_f32+0x56>
 80095cc:	e7a9      	b.n	8009522 <arm_cfft_f32+0x3a>
 80095ce:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80095d2:	d896      	bhi.n	8009502 <arm_cfft_f32+0x1a>
 80095d4:	e7ac      	b.n	8009530 <arm_cfft_f32+0x48>
 80095d6:	bf00      	nop

080095d8 <arm_fir_decimate_init_f32>:
 80095d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095da:	9f07      	ldr	r7, [sp, #28]
 80095dc:	fbb7 f4f2 	udiv	r4, r7, r2
 80095e0:	fb02 7414 	mls	r4, r2, r4, r7
 80095e4:	b994      	cbnz	r4, 800960c <arm_fir_decimate_init_f32+0x34>
 80095e6:	468e      	mov	lr, r1
 80095e8:	4616      	mov	r6, r2
 80095ea:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80095ee:	4605      	mov	r5, r0
 80095f0:	4472      	add	r2, lr
 80095f2:	8069      	strh	r1, [r5, #2]
 80095f4:	6043      	str	r3, [r0, #4]
 80095f6:	4621      	mov	r1, r4
 80095f8:	443a      	add	r2, r7
 80095fa:	9806      	ldr	r0, [sp, #24]
 80095fc:	0092      	lsls	r2, r2, #2
 80095fe:	f000 fd81 	bl	800a104 <memset>
 8009602:	9b06      	ldr	r3, [sp, #24]
 8009604:	702e      	strb	r6, [r5, #0]
 8009606:	4620      	mov	r0, r4
 8009608:	60ab      	str	r3, [r5, #8]
 800960a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800960c:	f06f 0001 	mvn.w	r0, #1
 8009610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009612:	bf00      	nop

08009614 <arm_fir_decimate_f32>:
 8009614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009618:	7804      	ldrb	r4, [r0, #0]
 800961a:	4683      	mov	fp, r0
 800961c:	b08d      	sub	sp, #52	; 0x34
 800961e:	8840      	ldrh	r0, [r0, #2]
 8009620:	f8db 5004 	ldr.w	r5, [fp, #4]
 8009624:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
 8009628:	4696      	mov	lr, r2
 800962a:	9208      	str	r2, [sp, #32]
 800962c:	9502      	str	r5, [sp, #8]
 800962e:	462a      	mov	r2, r5
 8009630:	f8db 6008 	ldr.w	r6, [fp, #8]
 8009634:	4481      	add	r9, r0
 8009636:	9009      	str	r0, [sp, #36]	; 0x24
 8009638:	eb06 0989 	add.w	r9, r6, r9, lsl #2
 800963c:	fbb3 f3f4 	udiv	r3, r3, r4
 8009640:	089d      	lsrs	r5, r3, #2
 8009642:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
 8009646:	950a      	str	r5, [sp, #40]	; 0x28
 8009648:	930b      	str	r3, [sp, #44]	; 0x2c
 800964a:	2d00      	cmp	r5, #0
 800964c:	f000 80f8 	beq.w	8009840 <arm_fir_decimate_f32+0x22c>
 8009650:	0883      	lsrs	r3, r0, #2
 8009652:	f000 0003 	and.w	r0, r0, #3
 8009656:	462f      	mov	r7, r5
 8009658:	f8cd b010 	str.w	fp, [sp, #16]
 800965c:	9305      	str	r3, [sp, #20]
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	9006      	str	r0, [sp, #24]
 8009662:	f10e 0a10 	add.w	sl, lr, #16
 8009666:	441a      	add	r2, r3
 8009668:	469b      	mov	fp, r3
 800966a:	4648      	mov	r0, r9
 800966c:	9703      	str	r7, [sp, #12]
 800966e:	9207      	str	r2, [sp, #28]
 8009670:	f8cd 9004 	str.w	r9, [sp, #4]
 8009674:	00a4      	lsls	r4, r4, #2
 8009676:	460a      	mov	r2, r1
 8009678:	4623      	mov	r3, r4
 800967a:	f852 5b04 	ldr.w	r5, [r2], #4
 800967e:	3b01      	subs	r3, #1
 8009680:	f840 5b04 	str.w	r5, [r0], #4
 8009684:	d1f9      	bne.n	800967a <arm_fir_decimate_f32+0x66>
 8009686:	9b04      	ldr	r3, [sp, #16]
 8009688:	00a4      	lsls	r4, r4, #2
 800968a:	9f05      	ldr	r7, [sp, #20]
 800968c:	f893 8000 	ldrb.w	r8, [r3]
 8009690:	4421      	add	r1, r4
 8009692:	9b01      	ldr	r3, [sp, #4]
 8009694:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8009698:	ed9f 1abb 	vldr	s2, [pc, #748]	; 8009988 <arm_fir_decimate_f32+0x374>
 800969c:	4423      	add	r3, r4
 800969e:	eb06 0e08 	add.w	lr, r6, r8
 80096a2:	9301      	str	r3, [sp, #4]
 80096a4:	eb0e 0c08 	add.w	ip, lr, r8
 80096a8:	eb0c 0908 	add.w	r9, ip, r8
 80096ac:	2f00      	cmp	r7, #0
 80096ae:	f000 8161 	beq.w	8009974 <arm_fir_decimate_f32+0x360>
 80096b2:	9b02      	ldr	r3, [sp, #8]
 80096b4:	eef0 5a41 	vmov.f32	s11, s2
 80096b8:	eeb0 5a41 	vmov.f32	s10, s2
 80096bc:	f106 0410 	add.w	r4, r6, #16
 80096c0:	eef0 4a41 	vmov.f32	s9, s2
 80096c4:	f103 0510 	add.w	r5, r3, #16
 80096c8:	f10e 0010 	add.w	r0, lr, #16
 80096cc:	f10c 0210 	add.w	r2, ip, #16
 80096d0:	f109 0310 	add.w	r3, r9, #16
 80096d4:	ed55 6a04 	vldr	s13, [r5, #-16]
 80096d8:	3f01      	subs	r7, #1
 80096da:	ed13 6a04 	vldr	s12, [r3, #-16]
 80096de:	f105 0510 	add.w	r5, r5, #16
 80096e2:	ed14 4a04 	vldr	s8, [r4, #-16]
 80096e6:	f100 0010 	add.w	r0, r0, #16
 80096ea:	ed50 1a08 	vldr	s3, [r0, #-32]	; 0xffffffe0
 80096ee:	f104 0410 	add.w	r4, r4, #16
 80096f2:	ed52 2a04 	vldr	s5, [r2, #-16]
 80096f6:	ee26 4a84 	vmul.f32	s8, s13, s8
 80096fa:	ee66 1aa1 	vmul.f32	s3, s13, s3
 80096fe:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 8009702:	ee66 2aa2 	vmul.f32	s5, s13, s5
 8009706:	ed54 3a07 	vldr	s7, [r4, #-28]	; 0xffffffe4
 800970a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800970e:	ed10 2a07 	vldr	s4, [r0, #-28]	; 0xffffffe4
 8009712:	ed13 6a03 	vldr	s12, [r3, #-12]
 8009716:	ee74 4a24 	vadd.f32	s9, s8, s9
 800971a:	ed12 3a03 	vldr	s6, [r2, #-12]
 800971e:	ee31 5a85 	vadd.f32	s10, s3, s10
 8009722:	ee72 5aa5 	vadd.f32	s11, s5, s11
 8009726:	ed55 7a06 	vldr	s15, [r5, #-24]	; 0xffffffe8
 800972a:	ee67 3a23 	vmul.f32	s7, s14, s7
 800972e:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8009732:	ee27 2a02 	vmul.f32	s4, s14, s4
 8009736:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800973a:	ee27 3a03 	vmul.f32	s6, s14, s6
 800973e:	ed52 2a02 	vldr	s5, [r2, #-8]
 8009742:	ee76 6a81 	vadd.f32	s13, s13, s2
 8009746:	ed10 0a05 	vldr	s0, [r0, #-20]	; 0xffffffec
 800974a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800974e:	ed13 6a02 	vldr	s12, [r3, #-8]
 8009752:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8009756:	ed15 1a05 	vldr	s2, [r5, #-20]	; 0xffffffec
 800975a:	ee67 4a84 	vmul.f32	s9, s15, s8
 800975e:	ed52 0a01 	vldr	s1, [r2, #-4]
 8009762:	ee32 2a05 	vadd.f32	s4, s4, s10
 8009766:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800976a:	ee27 5aa1 	vmul.f32	s10, s15, s3
 800976e:	ed53 1a01 	vldr	s3, [r3, #-4]
 8009772:	ee33 3a25 	vadd.f32	s6, s6, s11
 8009776:	f102 0210 	add.w	r2, r2, #16
 800977a:	ee67 5aa2 	vmul.f32	s11, s15, s5
 800977e:	f103 0310 	add.w	r3, r3, #16
 8009782:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009786:	ee37 7a26 	vadd.f32	s14, s14, s13
 800978a:	ee34 6aa3 	vadd.f32	s12, s9, s7
 800978e:	ee61 4a04 	vmul.f32	s9, s2, s8
 8009792:	ee75 3a02 	vadd.f32	s7, s10, s4
 8009796:	ee35 4a83 	vadd.f32	s8, s11, s6
 800979a:	ee21 5a00 	vmul.f32	s10, s2, s0
 800979e:	ee61 5a20 	vmul.f32	s11, s2, s1
 80097a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80097a6:	ee21 1a21 	vmul.f32	s2, s2, s3
 80097aa:	ee74 4a86 	vadd.f32	s9, s9, s12
 80097ae:	ee35 5a23 	vadd.f32	s10, s10, s7
 80097b2:	ee75 5a84 	vadd.f32	s11, s11, s8
 80097b6:	ee31 1a27 	vadd.f32	s2, s2, s15
 80097ba:	d18b      	bne.n	80096d4 <arm_fir_decimate_f32+0xc0>
 80097bc:	445e      	add	r6, fp
 80097be:	44de      	add	lr, fp
 80097c0:	44dc      	add	ip, fp
 80097c2:	eb09 000b 	add.w	r0, r9, fp
 80097c6:	9a07      	ldr	r2, [sp, #28]
 80097c8:	9b06      	ldr	r3, [sp, #24]
 80097ca:	b1db      	cbz	r3, 8009804 <arm_fir_decimate_f32+0x1f0>
 80097cc:	ecb2 6a01 	vldmia	r2!, {s12}
 80097d0:	3b01      	subs	r3, #1
 80097d2:	ecf6 6a01 	vldmia	r6!, {s13}
 80097d6:	ecbe 7a01 	vldmia	lr!, {s14}
 80097da:	ecfc 7a01 	vldmia	ip!, {s15}
 80097de:	ee66 6a26 	vmul.f32	s13, s12, s13
 80097e2:	ecb0 4a01 	vldmia	r0!, {s8}
 80097e6:	ee26 7a07 	vmul.f32	s14, s12, s14
 80097ea:	ee66 7a27 	vmul.f32	s15, s12, s15
 80097ee:	ee26 6a04 	vmul.f32	s12, s12, s8
 80097f2:	ee74 4aa6 	vadd.f32	s9, s9, s13
 80097f6:	ee35 5a07 	vadd.f32	s10, s10, s14
 80097fa:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80097fe:	ee31 1a06 	vadd.f32	s2, s2, s12
 8009802:	d1e3      	bne.n	80097cc <arm_fir_decimate_f32+0x1b8>
 8009804:	9b03      	ldr	r3, [sp, #12]
 8009806:	eb09 0608 	add.w	r6, r9, r8
 800980a:	ed4a 4a04 	vstr	s9, [sl, #-16]
 800980e:	f10a 0a10 	add.w	sl, sl, #16
 8009812:	3b01      	subs	r3, #1
 8009814:	ed0a 5a07 	vstr	s10, [sl, #-28]	; 0xffffffe4
 8009818:	ed4a 5a06 	vstr	s11, [sl, #-24]	; 0xffffffe8
 800981c:	ed0a 1a05 	vstr	s2, [sl, #-20]	; 0xffffffec
 8009820:	9303      	str	r3, [sp, #12]
 8009822:	d003      	beq.n	800982c <arm_fir_decimate_f32+0x218>
 8009824:	9b04      	ldr	r3, [sp, #16]
 8009826:	9801      	ldr	r0, [sp, #4]
 8009828:	781c      	ldrb	r4, [r3, #0]
 800982a:	e723      	b.n	8009674 <arm_fir_decimate_f32+0x60>
 800982c:	9b08      	ldr	r3, [sp, #32]
 800982e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009830:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009834:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8009838:	f8dd b010 	ldr.w	fp, [sp, #16]
 800983c:	9308      	str	r3, [sp, #32]
 800983e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009840:	2b00      	cmp	r3, #0
 8009842:	d061      	beq.n	8009908 <arm_fir_decimate_f32+0x2f4>
 8009844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009846:	4698      	mov	r8, r3
 8009848:	f8dd a020 	ldr.w	sl, [sp, #32]
 800984c:	0895      	lsrs	r5, r2, #2
 800984e:	f002 0703 	and.w	r7, r2, #3
 8009852:	9a02      	ldr	r2, [sp, #8]
 8009854:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 8009858:	eb02 0c0e 	add.w	ip, r2, lr
 800985c:	f89b 4000 	ldrb.w	r4, [fp]
 8009860:	4648      	mov	r0, r9
 8009862:	460a      	mov	r2, r1
 8009864:	4623      	mov	r3, r4
 8009866:	ecf2 7a01 	vldmia	r2!, {s15}
 800986a:	3b01      	subs	r3, #1
 800986c:	ece0 7a01 	vstmia	r0!, {s15}
 8009870:	d1f9      	bne.n	8009866 <arm_fir_decimate_f32+0x252>
 8009872:	00a4      	lsls	r4, r4, #2
 8009874:	44a1      	add	r9, r4
 8009876:	4421      	add	r1, r4
 8009878:	2d00      	cmp	r5, #0
 800987a:	d076      	beq.n	800996a <arm_fir_decimate_f32+0x356>
 800987c:	9b02      	ldr	r3, [sp, #8]
 800987e:	4628      	mov	r0, r5
 8009880:	eddf 7a41 	vldr	s15, [pc, #260]	; 8009988 <arm_fir_decimate_f32+0x374>
 8009884:	f103 0210 	add.w	r2, r3, #16
 8009888:	f106 0310 	add.w	r3, r6, #16
 800988c:	ed52 6a04 	vldr	s13, [r2, #-16]
 8009890:	3801      	subs	r0, #1
 8009892:	ed13 7a04 	vldr	s14, [r3, #-16]
 8009896:	f102 0210 	add.w	r2, r2, #16
 800989a:	ed12 5a07 	vldr	s10, [r2, #-28]	; 0xffffffe4
 800989e:	f103 0310 	add.w	r3, r3, #16
 80098a2:	ee66 5a87 	vmul.f32	s11, s13, s14
 80098a6:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 80098aa:	ed12 6a06 	vldr	s12, [r2, #-24]	; 0xffffffe8
 80098ae:	ee25 5a07 	vmul.f32	s10, s10, s14
 80098b2:	ed13 7a06 	vldr	s14, [r3, #-24]	; 0xffffffe8
 80098b6:	ee75 6aa7 	vadd.f32	s13, s11, s15
 80098ba:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 80098be:	ee26 6a07 	vmul.f32	s12, s12, s14
 80098c2:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 80098c6:	ee75 6a26 	vadd.f32	s13, s10, s13
 80098ca:	ee25 7a87 	vmul.f32	s14, s11, s14
 80098ce:	ee76 7a26 	vadd.f32	s15, s12, s13
 80098d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098d6:	d1d9      	bne.n	800988c <arm_fir_decimate_f32+0x278>
 80098d8:	eb06 020e 	add.w	r2, r6, lr
 80098dc:	4660      	mov	r0, ip
 80098de:	b157      	cbz	r7, 80098f6 <arm_fir_decimate_f32+0x2e2>
 80098e0:	463b      	mov	r3, r7
 80098e2:	ecf0 6a01 	vldmia	r0!, {s13}
 80098e6:	3b01      	subs	r3, #1
 80098e8:	ecb2 7a01 	vldmia	r2!, {s14}
 80098ec:	ee26 7a87 	vmul.f32	s14, s13, s14
 80098f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098f4:	d1f5      	bne.n	80098e2 <arm_fir_decimate_f32+0x2ce>
 80098f6:	f89b 3000 	ldrb.w	r3, [fp]
 80098fa:	f1b8 0801 	subs.w	r8, r8, #1
 80098fe:	ecea 7a01 	vstmia	sl!, {s15}
 8009902:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8009906:	d1a9      	bne.n	800985c <arm_fir_decimate_f32+0x248>
 8009908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800990a:	f8db 4008 	ldr.w	r4, [fp, #8]
 800990e:	1e59      	subs	r1, r3, #1
 8009910:	088f      	lsrs	r7, r1, #2
 8009912:	d01d      	beq.n	8009950 <arm_fir_decimate_f32+0x33c>
 8009914:	f104 0210 	add.w	r2, r4, #16
 8009918:	f106 0310 	add.w	r3, r6, #16
 800991c:	4638      	mov	r0, r7
 800991e:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8009922:	3801      	subs	r0, #1
 8009924:	f103 0310 	add.w	r3, r3, #16
 8009928:	f102 0210 	add.w	r2, r2, #16
 800992c:	f842 5c20 	str.w	r5, [r2, #-32]
 8009930:	f853 5c1c 	ldr.w	r5, [r3, #-28]
 8009934:	f842 5c1c 	str.w	r5, [r2, #-28]
 8009938:	f853 5c18 	ldr.w	r5, [r3, #-24]
 800993c:	f842 5c18 	str.w	r5, [r2, #-24]
 8009940:	f853 5c14 	ldr.w	r5, [r3, #-20]
 8009944:	f842 5c14 	str.w	r5, [r2, #-20]
 8009948:	d1e9      	bne.n	800991e <arm_fir_decimate_f32+0x30a>
 800994a:	013b      	lsls	r3, r7, #4
 800994c:	441c      	add	r4, r3
 800994e:	441e      	add	r6, r3
 8009950:	f011 0303 	ands.w	r3, r1, #3
 8009954:	d006      	beq.n	8009964 <arm_fir_decimate_f32+0x350>
 8009956:	4622      	mov	r2, r4
 8009958:	f856 1b04 	ldr.w	r1, [r6], #4
 800995c:	3b01      	subs	r3, #1
 800995e:	f842 1b04 	str.w	r1, [r2], #4
 8009962:	d1f9      	bne.n	8009958 <arm_fir_decimate_f32+0x344>
 8009964:	b00d      	add	sp, #52	; 0x34
 8009966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800996a:	9802      	ldr	r0, [sp, #8]
 800996c:	4632      	mov	r2, r6
 800996e:	eddf 7a06 	vldr	s15, [pc, #24]	; 8009988 <arm_fir_decimate_f32+0x374>
 8009972:	e7b4      	b.n	80098de <arm_fir_decimate_f32+0x2ca>
 8009974:	4648      	mov	r0, r9
 8009976:	9a02      	ldr	r2, [sp, #8]
 8009978:	eef0 5a41 	vmov.f32	s11, s2
 800997c:	eeb0 5a41 	vmov.f32	s10, s2
 8009980:	eef0 4a41 	vmov.f32	s9, s2
 8009984:	e720      	b.n	80097c8 <arm_fir_decimate_f32+0x1b4>
 8009986:	bf00      	nop
 8009988:	00000000 	.word	0x00000000

0800998c <arm_cmplx_mult_cmplx_f32>:
 800998c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800998e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8009992:	d073      	beq.n	8009a7c <arm_cmplx_mult_cmplx_f32+0xf0>
 8009994:	f100 0620 	add.w	r6, r0, #32
 8009998:	f101 0520 	add.w	r5, r1, #32
 800999c:	f102 0420 	add.w	r4, r2, #32
 80099a0:	4677      	mov	r7, lr
 80099a2:	ed16 7a08 	vldr	s14, [r6, #-32]	; 0xffffffe0
 80099a6:	3f01      	subs	r7, #1
 80099a8:	ed55 7a08 	vldr	s15, [r5, #-32]	; 0xffffffe0
 80099ac:	f106 0620 	add.w	r6, r6, #32
 80099b0:	ed56 5a0f 	vldr	s11, [r6, #-60]	; 0xffffffc4
 80099b4:	f105 0520 	add.w	r5, r5, #32
 80099b8:	ed55 6a0f 	vldr	s13, [r5, #-60]	; 0xffffffc4
 80099bc:	ee27 3a27 	vmul.f32	s6, s14, s15
 80099c0:	ee67 4aa5 	vmul.f32	s9, s15, s11
 80099c4:	ed16 6a0e 	vldr	s12, [r6, #-56]	; 0xffffffc8
 80099c8:	ee25 4aa6 	vmul.f32	s8, s11, s13
 80099cc:	ed55 7a0e 	vldr	s15, [r5, #-56]	; 0xffffffc8
 80099d0:	ee67 6a26 	vmul.f32	s13, s14, s13
 80099d4:	ed15 5a0d 	vldr	s10, [r5, #-52]	; 0xffffffcc
 80099d8:	ed56 2a0d 	vldr	s5, [r6, #-52]	; 0xffffffcc
 80099dc:	ee66 3a27 	vmul.f32	s7, s12, s15
 80099e0:	ee66 5a05 	vmul.f32	s11, s12, s10
 80099e4:	ed16 7a0c 	vldr	s14, [r6, #-48]	; 0xffffffd0
 80099e8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80099ec:	ed15 6a0c 	vldr	s12, [r5, #-48]	; 0xffffffd0
 80099f0:	ee25 5a22 	vmul.f32	s10, s10, s5
 80099f4:	f104 0420 	add.w	r4, r4, #32
 80099f8:	ee33 4a44 	vsub.f32	s8, s6, s8
 80099fc:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8009a00:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8009a04:	ed04 4a10 	vstr	s8, [r4, #-64]	; 0xffffffc0
 8009a08:	ee67 4a06 	vmul.f32	s9, s14, s12
 8009a0c:	ed16 5a0b 	vldr	s10, [r6, #-44]	; 0xffffffd4
 8009a10:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009a14:	ed44 6a0f 	vstr	s13, [r4, #-60]	; 0xffffffc4
 8009a18:	ed55 6a0b 	vldr	s13, [r5, #-44]	; 0xffffffd4
 8009a1c:	ee66 5a05 	vmul.f32	s11, s12, s10
 8009a20:	ed44 3a0e 	vstr	s7, [r4, #-56]	; 0xffffffc8
 8009a24:	ee25 5a26 	vmul.f32	s10, s10, s13
 8009a28:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 8009a2c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009a30:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 8009a34:	ed55 6a0a 	vldr	s13, [r5, #-40]	; 0xffffffd8
 8009a38:	ed16 6a09 	vldr	s12, [r6, #-36]	; 0xffffffdc
 8009a3c:	ee34 5ac5 	vsub.f32	s10, s9, s10
 8009a40:	ed15 4a09 	vldr	s8, [r5, #-36]	; 0xffffffdc
 8009a44:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8009a48:	ee66 6a86 	vmul.f32	s13, s13, s12
 8009a4c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009a50:	ed04 5a0c 	vstr	s10, [r4, #-48]	; 0xffffffd0
 8009a54:	ee26 6a04 	vmul.f32	s12, s12, s8
 8009a58:	ee37 7a25 	vadd.f32	s14, s14, s11
 8009a5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a60:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8009a64:	ed04 7a0b 	vstr	s14, [r4, #-44]	; 0xffffffd4
 8009a68:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 8009a6c:	ed04 6a0a 	vstr	s12, [r4, #-40]	; 0xffffffd8
 8009a70:	d197      	bne.n	80099a2 <arm_cmplx_mult_cmplx_f32+0x16>
 8009a72:	ea4f 144e 	mov.w	r4, lr, lsl #5
 8009a76:	4420      	add	r0, r4
 8009a78:	4421      	add	r1, r4
 8009a7a:	4422      	add	r2, r4
 8009a7c:	f013 0303 	ands.w	r3, r3, #3
 8009a80:	d022      	beq.n	8009ac8 <arm_cmplx_mult_cmplx_f32+0x13c>
 8009a82:	3008      	adds	r0, #8
 8009a84:	3108      	adds	r1, #8
 8009a86:	3208      	adds	r2, #8
 8009a88:	ed50 7a02 	vldr	s15, [r0, #-8]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	ed11 7a02 	vldr	s14, [r1, #-8]
 8009a92:	f100 0008 	add.w	r0, r0, #8
 8009a96:	ed50 6a03 	vldr	s13, [r0, #-12]
 8009a9a:	f101 0108 	add.w	r1, r1, #8
 8009a9e:	ed51 5a03 	vldr	s11, [r1, #-12]
 8009aa2:	ee27 6a87 	vmul.f32	s12, s15, s14
 8009aa6:	ee26 7a87 	vmul.f32	s14, s13, s14
 8009aaa:	f102 0208 	add.w	r2, r2, #8
 8009aae:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009ab2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009ab6:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009aba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009abe:	ed42 6a04 	vstr	s13, [r2, #-16]
 8009ac2:	ed42 7a03 	vstr	s15, [r2, #-12]
 8009ac6:	d1df      	bne.n	8009a88 <arm_cmplx_mult_cmplx_f32+0xfc>
 8009ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aca:	bf00      	nop

08009acc <arm_radix8_butterfly_f32>:
 8009acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad0:	469e      	mov	lr, r3
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	468a      	mov	sl, r1
 8009ad6:	468b      	mov	fp, r1
 8009ad8:	3304      	adds	r3, #4
 8009ada:	ed2d 8b10 	vpush	{d8-d15}
 8009ade:	469c      	mov	ip, r3
 8009ae0:	b09d      	sub	sp, #116	; 0x74
 8009ae2:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 8009df0 <arm_radix8_butterfly_f32+0x324>
 8009ae6:	9019      	str	r0, [sp, #100]	; 0x64
 8009ae8:	921a      	str	r2, [sp, #104]	; 0x68
 8009aea:	931b      	str	r3, [sp, #108]	; 0x6c
 8009aec:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8009af0:	f04f 0800 	mov.w	r8, #0
 8009af4:	461a      	mov	r2, r3
 8009af6:	9311      	str	r3, [sp, #68]	; 0x44
 8009af8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009afc:	4611      	mov	r1, r2
 8009afe:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8009b02:	9300      	str	r3, [sp, #0]
 8009b04:	0053      	lsls	r3, r2, #1
 8009b06:	18d5      	adds	r5, r2, r3
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	0113      	lsls	r3, r2, #4
 8009b0c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009b0e:	194c      	adds	r4, r1, r5
 8009b10:	eb02 0609 	add.w	r6, r2, r9
 8009b14:	9302      	str	r3, [sp, #8]
 8009b16:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	190a      	adds	r2, r1, r4
 8009b1e:	eb06 0709 	add.w	r7, r6, r9
 8009b22:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009b26:	1888      	adds	r0, r1, r2
 8009b28:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8009b2c:	4401      	add	r1, r0
 8009b2e:	3204      	adds	r2, #4
 8009b30:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8009b34:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009b38:	9b00      	ldr	r3, [sp, #0]
 8009b3a:	3104      	adds	r1, #4
 8009b3c:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8009b40:	44d8      	add	r8, fp
 8009b42:	ed90 7a00 	vldr	s14, [r0]
 8009b46:	ed94 5a00 	vldr	s10, [r4]
 8009b4a:	45c2      	cmp	sl, r8
 8009b4c:	edd7 3a00 	vldr	s7, [r7]
 8009b50:	ed96 6a00 	vldr	s12, [r6]
 8009b54:	ee37 1a85 	vadd.f32	s2, s15, s10
 8009b58:	ed52 6a01 	vldr	s13, [r2, #-4]
 8009b5c:	ee73 4a87 	vadd.f32	s9, s7, s14
 8009b60:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8009b64:	edd5 7a00 	vldr	s15, [r5]
 8009b68:	ee73 3ac7 	vsub.f32	s7, s7, s14
 8009b6c:	ed11 7a01 	vldr	s14, [r1, #-4]
 8009b70:	ee36 2a26 	vadd.f32	s4, s12, s13
 8009b74:	ee37 4a87 	vadd.f32	s8, s15, s14
 8009b78:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009b7c:	ee71 5a24 	vadd.f32	s11, s2, s9
 8009b80:	ee32 6a04 	vadd.f32	s12, s4, s8
 8009b84:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009b88:	ee31 1a64 	vsub.f32	s2, s2, s9
 8009b8c:	ee75 4a86 	vadd.f32	s9, s11, s12
 8009b90:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8009b94:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8009b98:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8009b9c:	ee32 2a44 	vsub.f32	s4, s4, s8
 8009ba0:	ee67 7a89 	vmul.f32	s15, s15, s18
 8009ba4:	ed94 0a01 	vldr	s0, [r4, #4]
 8009ba8:	edc4 5a00 	vstr	s11, [r4]
 8009bac:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009bb0:	edd6 5a01 	vldr	s11, [r6, #4]
 8009bb4:	edd5 2a01 	vldr	s5, [r5, #4]
 8009bb8:	ee75 1a27 	vadd.f32	s3, s10, s15
 8009bbc:	ed92 4a00 	vldr	s8, [r2]
 8009bc0:	ee75 7a67 	vsub.f32	s15, s10, s15
 8009bc4:	edd1 4a00 	vldr	s9, [r1]
 8009bc8:	ee27 7a09 	vmul.f32	s14, s14, s18
 8009bcc:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8009bd0:	ed9c 6a00 	vldr	s12, [ip]
 8009bd4:	ee72 6ae4 	vsub.f32	s13, s5, s9
 8009bd8:	edd0 0a01 	vldr	s1, [r0, #4]
 8009bdc:	ed97 5a01 	vldr	s10, [r7, #4]
 8009be0:	ee35 4a84 	vadd.f32	s8, s11, s8
 8009be4:	ee72 4aa4 	vadd.f32	s9, s5, s9
 8009be8:	ee73 5a26 	vadd.f32	s11, s6, s13
 8009bec:	ee76 2a00 	vadd.f32	s5, s12, s0
 8009bf0:	ee73 6a66 	vsub.f32	s13, s6, s13
 8009bf4:	ee36 6a40 	vsub.f32	s12, s12, s0
 8009bf8:	ee35 0a20 	vadd.f32	s0, s10, s1
 8009bfc:	ee65 5a89 	vmul.f32	s11, s11, s18
 8009c00:	ee35 5a60 	vsub.f32	s10, s10, s1
 8009c04:	ee32 3a80 	vadd.f32	s6, s5, s0
 8009c08:	ee74 0a24 	vadd.f32	s1, s8, s9
 8009c0c:	ee66 6a89 	vmul.f32	s13, s13, s18
 8009c10:	ee74 4a64 	vsub.f32	s9, s8, s9
 8009c14:	ee32 4ac0 	vsub.f32	s8, s5, s0
 8009c18:	ee75 2a25 	vadd.f32	s5, s10, s11
 8009c1c:	ee33 0a20 	vadd.f32	s0, s6, s1
 8009c20:	ee75 5a65 	vsub.f32	s11, s10, s11
 8009c24:	ee33 3a60 	vsub.f32	s6, s6, s1
 8009c28:	ee36 5a26 	vadd.f32	s10, s12, s13
 8009c2c:	ed8c 0a00 	vstr	s0, [ip]
 8009c30:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009c34:	449c      	add	ip, r3
 8009c36:	ee33 6a87 	vadd.f32	s12, s7, s14
 8009c3a:	ed84 3a01 	vstr	s6, [r4, #4]
 8009c3e:	ee33 7ac7 	vsub.f32	s14, s7, s14
 8009c42:	441c      	add	r4, r3
 8009c44:	ee71 3a24 	vadd.f32	s7, s2, s9
 8009c48:	ee71 4a64 	vsub.f32	s9, s2, s9
 8009c4c:	ee31 3aa2 	vadd.f32	s6, s3, s5
 8009c50:	edc7 3a00 	vstr	s7, [r7]
 8009c54:	ee34 1a42 	vsub.f32	s2, s8, s4
 8009c58:	edc0 4a00 	vstr	s9, [r0]
 8009c5c:	ee77 3aa5 	vadd.f32	s7, s15, s11
 8009c60:	ee75 4a46 	vsub.f32	s9, s10, s12
 8009c64:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009c68:	ed87 1a01 	vstr	s2, [r7, #4]
 8009c6c:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8009c70:	441f      	add	r7, r3
 8009c72:	ee32 4a04 	vadd.f32	s8, s4, s8
 8009c76:	ee71 1ae2 	vsub.f32	s3, s3, s5
 8009c7a:	ee36 6a05 	vadd.f32	s12, s12, s10
 8009c7e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009c82:	ed80 4a01 	vstr	s8, [r0, #4]
 8009c86:	ed86 3a00 	vstr	s6, [r6]
 8009c8a:	4418      	add	r0, r3
 8009c8c:	ed41 1a01 	vstr	s3, [r1, #-4]
 8009c90:	ed42 3a01 	vstr	s7, [r2, #-4]
 8009c94:	edc5 7a00 	vstr	s15, [r5]
 8009c98:	edc6 4a01 	vstr	s9, [r6, #4]
 8009c9c:	441e      	add	r6, r3
 8009c9e:	ed81 6a00 	vstr	s12, [r1]
 8009ca2:	4419      	add	r1, r3
 8009ca4:	edc2 5a00 	vstr	s11, [r2]
 8009ca8:	441a      	add	r2, r3
 8009caa:	ed85 7a01 	vstr	s14, [r5, #4]
 8009cae:	441d      	add	r5, r3
 8009cb0:	f63f af44 	bhi.w	8009b3c <arm_radix8_butterfly_f32+0x70>
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cb8:	2b07      	cmp	r3, #7
 8009cba:	f240 81f4 	bls.w	800a0a6 <arm_radix8_butterfly_f32+0x5da>
 8009cbe:	9901      	ldr	r1, [sp, #4]
 8009cc0:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8009cc4:	9d02      	ldr	r5, [sp, #8]
 8009cc6:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 8009cca:	3101      	adds	r1, #1
 8009ccc:	eb04 000e 	add.w	r0, r4, lr
 8009cd0:	00e4      	lsls	r4, r4, #3
 8009cd2:	3508      	adds	r5, #8
 8009cd4:	4419      	add	r1, r3
 8009cd6:	eb00 0c0e 	add.w	ip, r0, lr
 8009cda:	9413      	str	r4, [sp, #76]	; 0x4c
 8009cdc:	00c0      	lsls	r0, r0, #3
 8009cde:	185e      	adds	r6, r3, r1
 8009ce0:	4617      	mov	r7, r2
 8009ce2:	9218      	str	r2, [sp, #96]	; 0x60
 8009ce4:	f109 0908 	add.w	r9, r9, #8
 8009ce8:	199c      	adds	r4, r3, r6
 8009cea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009cec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009cee:	9012      	str	r0, [sp, #72]	; 0x48
 8009cf0:	195d      	adds	r5, r3, r5
 8009cf2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009cf4:	443a      	add	r2, r7
 8009cf6:	950c      	str	r5, [sp, #48]	; 0x30
 8009cf8:	4698      	mov	r8, r3
 8009cfa:	4420      	add	r0, r4
 8009cfc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8009cfe:	19d7      	adds	r7, r2, r7
 8009d00:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009d04:	4405      	add	r5, r0
 8009d06:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8009d0a:	9710      	str	r7, [sp, #64]	; 0x40
 8009d0c:	eb0c 070e 	add.w	r7, ip, lr
 8009d10:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8009d14:	3404      	adds	r4, #4
 8009d16:	3004      	adds	r0, #4
 8009d18:	44c8      	add	r8, r9
 8009d1a:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8009d1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d20:	940a      	str	r4, [sp, #40]	; 0x28
 8009d22:	9009      	str	r0, [sp, #36]	; 0x24
 8009d24:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009d28:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8009d2a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009d2e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009d30:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8009d34:	eb07 080e 	add.w	r8, r7, lr
 8009d38:	eb04 0900 	add.w	r9, r4, r0
 8009d3c:	00f8      	lsls	r0, r7, #3
 8009d3e:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 8009d42:	3504      	adds	r5, #4
 8009d44:	4607      	mov	r7, r0
 8009d46:	9017      	str	r0, [sp, #92]	; 0x5c
 8009d48:	910b      	str	r1, [sp, #44]	; 0x2c
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 8009d50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d52:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 8009d56:	18e3      	adds	r3, r4, r3
 8009d58:	9508      	str	r5, [sp, #32]
 8009d5a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009d5c:	910e      	str	r1, [sp, #56]	; 0x38
 8009d5e:	4621      	mov	r1, r4
 8009d60:	eb04 0805 	add.w	r8, r4, r5
 8009d64:	9304      	str	r3, [sp, #16]
 8009d66:	19e5      	adds	r5, r4, r7
 8009d68:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8009d6c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009d6e:	9316      	str	r3, [sp, #88]	; 0x58
 8009d70:	190b      	adds	r3, r1, r4
 8009d72:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8009d74:	9505      	str	r5, [sp, #20]
 8009d76:	9303      	str	r3, [sp, #12]
 8009d78:	f100 0308 	add.w	r3, r0, #8
 8009d7c:	9707      	str	r7, [sp, #28]
 8009d7e:	4638      	mov	r0, r7
 8009d80:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d82:	2301      	movs	r3, #1
 8009d84:	9306      	str	r3, [sp, #24]
 8009d86:	9b00      	ldr	r3, [sp, #0]
 8009d88:	ed90 fa00 	vldr	s30, [r0]
 8009d8c:	edd0 ba01 	vldr	s23, [r0, #4]
 8009d90:	9803      	ldr	r0, [sp, #12]
 8009d92:	9903      	ldr	r1, [sp, #12]
 8009d94:	ed90 ba01 	vldr	s22, [r0, #4]
 8009d98:	9804      	ldr	r0, [sp, #16]
 8009d9a:	edd1 ea00 	vldr	s29, [r1]
 8009d9e:	edd0 aa01 	vldr	s21, [r0, #4]
 8009da2:	9805      	ldr	r0, [sp, #20]
 8009da4:	9905      	ldr	r1, [sp, #20]
 8009da6:	edd0 7a01 	vldr	s15, [r0, #4]
 8009daa:	ed91 da00 	vldr	s26, [r1]
 8009dae:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009db0:	9c04      	ldr	r4, [sp, #16]
 8009db2:	edcd 7a01 	vstr	s15, [sp, #4]
 8009db6:	edd8 7a01 	vldr	s15, [r8, #4]
 8009dba:	9100      	str	r1, [sp, #0]
 8009dbc:	edd2 fa00 	vldr	s31, [r2]
 8009dc0:	ed94 ea00 	vldr	s28, [r4]
 8009dc4:	ed92 ca01 	vldr	s24, [r2, #4]
 8009dc8:	f8dd e020 	ldr.w	lr, [sp, #32]
 8009dcc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009dce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009dd0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009dd2:	edd9 da00 	vldr	s27, [r9]
 8009dd6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009dd8:	edd8 ca00 	vldr	s25, [r8]
 8009ddc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009dde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009de0:	f8dd c018 	ldr.w	ip, [sp, #24]
 8009de4:	ed99 aa01 	vldr	s20, [r9, #4]
 8009de8:	edcd 7a02 	vstr	s15, [sp, #8]
 8009dec:	9800      	ldr	r0, [sp, #0]
 8009dee:	e001      	b.n	8009df4 <arm_radix8_butterfly_f32+0x328>
 8009df0:	3f3504f3 	.word	0x3f3504f3
 8009df4:	edd5 3a00 	vldr	s7, [r5]
 8009df8:	44dc      	add	ip, fp
 8009dfa:	ed91 7a00 	vldr	s14, [r1]
 8009dfe:	edd4 8a00 	vldr	s17, [r4]
 8009e02:	45e2      	cmp	sl, ip
 8009e04:	ed57 7a01 	vldr	s15, [r7, #-4]
 8009e08:	ed90 5a00 	vldr	s10, [r0]
 8009e0c:	ed56 5a01 	vldr	s11, [r6, #-4]
 8009e10:	ee38 6aa7 	vadd.f32	s12, s17, s15
 8009e14:	ed92 1a00 	vldr	s2, [r2]
 8009e18:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8009e1c:	ed1e 4a01 	vldr	s8, [lr, #-4]
 8009e20:	ee75 9a25 	vadd.f32	s19, s10, s11
 8009e24:	ee31 3a07 	vadd.f32	s6, s2, s14
 8009e28:	ed92 8a01 	vldr	s16, [r2, #4]
 8009e2c:	ee73 6a84 	vadd.f32	s13, s7, s8
 8009e30:	ee75 5a65 	vsub.f32	s11, s10, s11
 8009e34:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8009e38:	ee73 1a06 	vadd.f32	s3, s6, s12
 8009e3c:	ee39 5aa6 	vadd.f32	s10, s19, s13
 8009e40:	ee75 7a84 	vadd.f32	s15, s11, s8
 8009e44:	ee31 1a47 	vsub.f32	s2, s2, s14
 8009e48:	ee31 7a85 	vadd.f32	s14, s3, s10
 8009e4c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8009e50:	ee33 3a46 	vsub.f32	s6, s6, s12
 8009e54:	ed82 7a00 	vstr	s14, [r2]
 8009e58:	ee79 9ae6 	vsub.f32	s19, s19, s13
 8009e5c:	ed96 6a00 	vldr	s12, [r6]
 8009e60:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8009e64:	edd5 3a01 	vldr	s7, [r5, #4]
 8009e68:	ee74 8ae7 	vsub.f32	s17, s9, s15
 8009e6c:	ed90 7a01 	vldr	s14, [r0, #4]
 8009e70:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8009e74:	edde 4a00 	vldr	s9, [lr]
 8009e78:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8009e7c:	ee77 2a46 	vsub.f32	s5, s14, s12
 8009e80:	edd1 6a01 	vldr	s13, [r1, #4]
 8009e84:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8009e88:	edd7 0a00 	vldr	s1, [r7]
 8009e8c:	ee77 5a06 	vadd.f32	s11, s14, s12
 8009e90:	ed94 7a01 	vldr	s14, [r4, #4]
 8009e94:	ee33 6aa4 	vadd.f32	s12, s7, s9
 8009e98:	ee32 0ae7 	vsub.f32	s0, s5, s15
 8009e9c:	ee78 4a66 	vsub.f32	s9, s16, s13
 8009ea0:	ee78 3a26 	vadd.f32	s7, s16, s13
 8009ea4:	ee72 2aa7 	vadd.f32	s5, s5, s15
 8009ea8:	ee77 6a20 	vadd.f32	s13, s14, s1
 8009eac:	ee24 4a09 	vmul.f32	s8, s8, s18
 8009eb0:	ee37 7a60 	vsub.f32	s14, s14, s1
 8009eb4:	ee20 8a09 	vmul.f32	s16, s0, s18
 8009eb8:	ee75 0a86 	vadd.f32	s1, s11, s12
 8009ebc:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8009ec0:	ee62 2a89 	vmul.f32	s5, s5, s18
 8009ec4:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8009ec8:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8009ecc:	ee77 7a62 	vsub.f32	s15, s14, s5
 8009ed0:	ee74 5a88 	vadd.f32	s11, s9, s16
 8009ed4:	ee34 8ac8 	vsub.f32	s16, s9, s16
 8009ed8:	ee77 4a22 	vadd.f32	s9, s14, s5
 8009edc:	ee71 2a04 	vadd.f32	s5, s2, s8
 8009ee0:	ee31 7a44 	vsub.f32	s14, s2, s8
 8009ee4:	ee30 1a60 	vsub.f32	s2, s0, s1
 8009ee8:	ee73 1a06 	vadd.f32	s3, s6, s12
 8009eec:	ee33 6a46 	vsub.f32	s12, s6, s12
 8009ef0:	ee33 3ae9 	vsub.f32	s6, s7, s19
 8009ef4:	ee79 6aa3 	vadd.f32	s13, s19, s7
 8009ef8:	ee38 4a68 	vsub.f32	s8, s16, s17
 8009efc:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8009f00:	ee72 5a25 	vadd.f32	s11, s4, s11
 8009f04:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8009f08:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8009f0c:	ee77 2a27 	vadd.f32	s5, s14, s15
 8009f10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f14:	ee78 7a88 	vadd.f32	s15, s17, s16
 8009f18:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8009f1c:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8009f20:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8009f24:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8009f28:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8009f2c:	ee70 0a20 	vadd.f32	s1, s0, s1
 8009f30:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8009f34:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8009f38:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8009f3c:	edc2 0a01 	vstr	s1, [r2, #4]
 8009f40:	ee38 8a88 	vadd.f32	s16, s17, s16
 8009f44:	441a      	add	r2, r3
 8009f46:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8009f4a:	ee31 5a45 	vsub.f32	s10, s2, s10
 8009f4e:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8009f52:	ed81 8a00 	vstr	s16, [r1]
 8009f56:	ee39 0a80 	vadd.f32	s0, s19, s0
 8009f5a:	ee33 3a61 	vsub.f32	s6, s6, s3
 8009f5e:	ed81 5a01 	vstr	s10, [r1, #4]
 8009f62:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8009f66:	edcd 3a00 	vstr	s7, [sp]
 8009f6a:	ed9d 5a02 	vldr	s10, [sp, #8]
 8009f6e:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8009f72:	eddd 3a01 	vldr	s7, [sp, #4]
 8009f76:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8009f7a:	ed84 0a00 	vstr	s0, [r4]
 8009f7e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8009f82:	ed84 3a01 	vstr	s6, [r4, #4]
 8009f86:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8009f8a:	ee23 6a86 	vmul.f32	s12, s7, s12
 8009f8e:	eddd 3a00 	vldr	s7, [sp]
 8009f92:	ee25 5a25 	vmul.f32	s10, s10, s11
 8009f96:	4419      	add	r1, r3
 8009f98:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8009f9c:	441c      	add	r4, r3
 8009f9e:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8009fa2:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8009fa6:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8009faa:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8009fae:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8009fb2:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8009fb6:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8009fba:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8009fbe:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8009fc2:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8009fc6:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8009fca:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8009fce:	ee38 8a01 	vadd.f32	s16, s16, s2
 8009fd2:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8009fd6:	ee39 5a85 	vadd.f32	s10, s19, s10
 8009fda:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8009fde:	ed07 8a01 	vstr	s16, [r7, #-4]
 8009fe2:	ee30 0a21 	vadd.f32	s0, s0, s3
 8009fe6:	ed87 6a00 	vstr	s12, [r7]
 8009fea:	ee74 2a62 	vsub.f32	s5, s8, s5
 8009fee:	edc0 0a00 	vstr	s1, [r0]
 8009ff2:	ee33 3a28 	vadd.f32	s6, s6, s17
 8009ff6:	edc0 3a01 	vstr	s7, [r0, #4]
 8009ffa:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009ffe:	ed0e 5a01 	vstr	s10, [lr, #-4]
 800a002:	edce 4a00 	vstr	s9, [lr]
 800a006:	4418      	add	r0, r3
 800a008:	ed06 0a01 	vstr	s0, [r6, #-4]
 800a00c:	441f      	add	r7, r3
 800a00e:	edc6 2a00 	vstr	s5, [r6]
 800a012:	449e      	add	lr, r3
 800a014:	ed85 3a00 	vstr	s6, [r5]
 800a018:	441e      	add	r6, r3
 800a01a:	ed85 7a01 	vstr	s14, [r5, #4]
 800a01e:	441d      	add	r5, r3
 800a020:	f63f aee8 	bhi.w	8009df4 <arm_radix8_butterfly_f32+0x328>
 800a024:	9a06      	ldr	r2, [sp, #24]
 800a026:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a028:	3201      	adds	r2, #1
 800a02a:	4611      	mov	r1, r2
 800a02c:	9206      	str	r2, [sp, #24]
 800a02e:	9a07      	ldr	r2, [sp, #28]
 800a030:	4402      	add	r2, r0
 800a032:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a034:	9207      	str	r2, [sp, #28]
 800a036:	9a03      	ldr	r2, [sp, #12]
 800a038:	4402      	add	r2, r0
 800a03a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a03c:	9203      	str	r2, [sp, #12]
 800a03e:	9a04      	ldr	r2, [sp, #16]
 800a040:	4402      	add	r2, r0
 800a042:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a044:	9204      	str	r2, [sp, #16]
 800a046:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a048:	4491      	add	r9, r2
 800a04a:	9a05      	ldr	r2, [sp, #20]
 800a04c:	4402      	add	r2, r0
 800a04e:	9205      	str	r2, [sp, #20]
 800a050:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a052:	4490      	add	r8, r2
 800a054:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a056:	3208      	adds	r2, #8
 800a058:	920f      	str	r2, [sp, #60]	; 0x3c
 800a05a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a05c:	3208      	adds	r2, #8
 800a05e:	920e      	str	r2, [sp, #56]	; 0x38
 800a060:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a062:	3208      	adds	r2, #8
 800a064:	920d      	str	r2, [sp, #52]	; 0x34
 800a066:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a068:	3208      	adds	r2, #8
 800a06a:	920c      	str	r2, [sp, #48]	; 0x30
 800a06c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a06e:	3208      	adds	r2, #8
 800a070:	920b      	str	r2, [sp, #44]	; 0x2c
 800a072:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a074:	3208      	adds	r2, #8
 800a076:	920a      	str	r2, [sp, #40]	; 0x28
 800a078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a07a:	3208      	adds	r2, #8
 800a07c:	9209      	str	r2, [sp, #36]	; 0x24
 800a07e:	9a08      	ldr	r2, [sp, #32]
 800a080:	3208      	adds	r2, #8
 800a082:	9208      	str	r2, [sp, #32]
 800a084:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800a086:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a088:	4622      	mov	r2, r4
 800a08a:	4288      	cmp	r0, r1
 800a08c:	d005      	beq.n	800a09a <arm_radix8_butterfly_f32+0x5ce>
 800a08e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800a090:	4621      	mov	r1, r4
 800a092:	4401      	add	r1, r0
 800a094:	9807      	ldr	r0, [sp, #28]
 800a096:	9110      	str	r1, [sp, #64]	; 0x40
 800a098:	e676      	b.n	8009d88 <arm_radix8_butterfly_f32+0x2bc>
 800a09a:	4683      	mov	fp, r0
 800a09c:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 800a0a0:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800a0a4:	e522      	b.n	8009aec <arm_radix8_butterfly_f32+0x20>
 800a0a6:	b01d      	add	sp, #116	; 0x74
 800a0a8:	ecbd 8b10 	vpop	{d8-d15}
 800a0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0b0 <__errno>:
 800a0b0:	4b01      	ldr	r3, [pc, #4]	; (800a0b8 <__errno+0x8>)
 800a0b2:	6818      	ldr	r0, [r3, #0]
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	24000204 	.word	0x24000204

0800a0bc <__libc_init_array>:
 800a0bc:	b570      	push	{r4, r5, r6, lr}
 800a0be:	4e0d      	ldr	r6, [pc, #52]	; (800a0f4 <__libc_init_array+0x38>)
 800a0c0:	4c0d      	ldr	r4, [pc, #52]	; (800a0f8 <__libc_init_array+0x3c>)
 800a0c2:	1ba4      	subs	r4, r4, r6
 800a0c4:	10a4      	asrs	r4, r4, #2
 800a0c6:	2500      	movs	r5, #0
 800a0c8:	42a5      	cmp	r5, r4
 800a0ca:	d109      	bne.n	800a0e0 <__libc_init_array+0x24>
 800a0cc:	4e0b      	ldr	r6, [pc, #44]	; (800a0fc <__libc_init_array+0x40>)
 800a0ce:	4c0c      	ldr	r4, [pc, #48]	; (800a100 <__libc_init_array+0x44>)
 800a0d0:	f003 fd5c 	bl	800db8c <_init>
 800a0d4:	1ba4      	subs	r4, r4, r6
 800a0d6:	10a4      	asrs	r4, r4, #2
 800a0d8:	2500      	movs	r5, #0
 800a0da:	42a5      	cmp	r5, r4
 800a0dc:	d105      	bne.n	800a0ea <__libc_init_array+0x2e>
 800a0de:	bd70      	pop	{r4, r5, r6, pc}
 800a0e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0e4:	4798      	blx	r3
 800a0e6:	3501      	adds	r5, #1
 800a0e8:	e7ee      	b.n	800a0c8 <__libc_init_array+0xc>
 800a0ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0ee:	4798      	blx	r3
 800a0f0:	3501      	adds	r5, #1
 800a0f2:	e7f2      	b.n	800a0da <__libc_init_array+0x1e>
 800a0f4:	08012fc0 	.word	0x08012fc0
 800a0f8:	08012fc0 	.word	0x08012fc0
 800a0fc:	08012fc0 	.word	0x08012fc0
 800a100:	08012fc4 	.word	0x08012fc4

0800a104 <memset>:
 800a104:	4402      	add	r2, r0
 800a106:	4603      	mov	r3, r0
 800a108:	4293      	cmp	r3, r2
 800a10a:	d100      	bne.n	800a10e <memset+0xa>
 800a10c:	4770      	bx	lr
 800a10e:	f803 1b01 	strb.w	r1, [r3], #1
 800a112:	e7f9      	b.n	800a108 <memset+0x4>

0800a114 <__cvt>:
 800a114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a116:	ed2d 8b02 	vpush	{d8}
 800a11a:	eeb0 8b40 	vmov.f64	d8, d0
 800a11e:	b085      	sub	sp, #20
 800a120:	4617      	mov	r7, r2
 800a122:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a124:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a126:	ee18 2a90 	vmov	r2, s17
 800a12a:	f025 0520 	bic.w	r5, r5, #32
 800a12e:	2a00      	cmp	r2, #0
 800a130:	bfb6      	itet	lt
 800a132:	222d      	movlt	r2, #45	; 0x2d
 800a134:	2200      	movge	r2, #0
 800a136:	eeb1 8b40 	vneglt.f64	d8, d0
 800a13a:	2d46      	cmp	r5, #70	; 0x46
 800a13c:	460c      	mov	r4, r1
 800a13e:	701a      	strb	r2, [r3, #0]
 800a140:	d004      	beq.n	800a14c <__cvt+0x38>
 800a142:	2d45      	cmp	r5, #69	; 0x45
 800a144:	d100      	bne.n	800a148 <__cvt+0x34>
 800a146:	3401      	adds	r4, #1
 800a148:	2102      	movs	r1, #2
 800a14a:	e000      	b.n	800a14e <__cvt+0x3a>
 800a14c:	2103      	movs	r1, #3
 800a14e:	ab03      	add	r3, sp, #12
 800a150:	9301      	str	r3, [sp, #4]
 800a152:	ab02      	add	r3, sp, #8
 800a154:	9300      	str	r3, [sp, #0]
 800a156:	4622      	mov	r2, r4
 800a158:	4633      	mov	r3, r6
 800a15a:	eeb0 0b48 	vmov.f64	d0, d8
 800a15e:	f000 fcc7 	bl	800aaf0 <_dtoa_r>
 800a162:	2d47      	cmp	r5, #71	; 0x47
 800a164:	d101      	bne.n	800a16a <__cvt+0x56>
 800a166:	07fb      	lsls	r3, r7, #31
 800a168:	d51e      	bpl.n	800a1a8 <__cvt+0x94>
 800a16a:	2d46      	cmp	r5, #70	; 0x46
 800a16c:	eb00 0304 	add.w	r3, r0, r4
 800a170:	d10c      	bne.n	800a18c <__cvt+0x78>
 800a172:	7802      	ldrb	r2, [r0, #0]
 800a174:	2a30      	cmp	r2, #48	; 0x30
 800a176:	d107      	bne.n	800a188 <__cvt+0x74>
 800a178:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a180:	bf1c      	itt	ne
 800a182:	f1c4 0401 	rsbne	r4, r4, #1
 800a186:	6034      	strne	r4, [r6, #0]
 800a188:	6832      	ldr	r2, [r6, #0]
 800a18a:	4413      	add	r3, r2
 800a18c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a194:	d007      	beq.n	800a1a6 <__cvt+0x92>
 800a196:	2130      	movs	r1, #48	; 0x30
 800a198:	9a03      	ldr	r2, [sp, #12]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d204      	bcs.n	800a1a8 <__cvt+0x94>
 800a19e:	1c54      	adds	r4, r2, #1
 800a1a0:	9403      	str	r4, [sp, #12]
 800a1a2:	7011      	strb	r1, [r2, #0]
 800a1a4:	e7f8      	b.n	800a198 <__cvt+0x84>
 800a1a6:	9303      	str	r3, [sp, #12]
 800a1a8:	9b03      	ldr	r3, [sp, #12]
 800a1aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1ac:	1a1b      	subs	r3, r3, r0
 800a1ae:	6013      	str	r3, [r2, #0]
 800a1b0:	b005      	add	sp, #20
 800a1b2:	ecbd 8b02 	vpop	{d8}
 800a1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a1b8 <__exponent>:
 800a1b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1ba:	2900      	cmp	r1, #0
 800a1bc:	4604      	mov	r4, r0
 800a1be:	bfba      	itte	lt
 800a1c0:	4249      	neglt	r1, r1
 800a1c2:	232d      	movlt	r3, #45	; 0x2d
 800a1c4:	232b      	movge	r3, #43	; 0x2b
 800a1c6:	2909      	cmp	r1, #9
 800a1c8:	f804 2b02 	strb.w	r2, [r4], #2
 800a1cc:	7043      	strb	r3, [r0, #1]
 800a1ce:	dd20      	ble.n	800a212 <__exponent+0x5a>
 800a1d0:	f10d 0307 	add.w	r3, sp, #7
 800a1d4:	461f      	mov	r7, r3
 800a1d6:	260a      	movs	r6, #10
 800a1d8:	fb91 f5f6 	sdiv	r5, r1, r6
 800a1dc:	fb06 1115 	mls	r1, r6, r5, r1
 800a1e0:	3130      	adds	r1, #48	; 0x30
 800a1e2:	2d09      	cmp	r5, #9
 800a1e4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a1e8:	f103 32ff 	add.w	r2, r3, #4294967295
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	dc09      	bgt.n	800a204 <__exponent+0x4c>
 800a1f0:	3130      	adds	r1, #48	; 0x30
 800a1f2:	3b02      	subs	r3, #2
 800a1f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a1f8:	42bb      	cmp	r3, r7
 800a1fa:	4622      	mov	r2, r4
 800a1fc:	d304      	bcc.n	800a208 <__exponent+0x50>
 800a1fe:	1a10      	subs	r0, r2, r0
 800a200:	b003      	add	sp, #12
 800a202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a204:	4613      	mov	r3, r2
 800a206:	e7e7      	b.n	800a1d8 <__exponent+0x20>
 800a208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a20c:	f804 2b01 	strb.w	r2, [r4], #1
 800a210:	e7f2      	b.n	800a1f8 <__exponent+0x40>
 800a212:	2330      	movs	r3, #48	; 0x30
 800a214:	4419      	add	r1, r3
 800a216:	7083      	strb	r3, [r0, #2]
 800a218:	1d02      	adds	r2, r0, #4
 800a21a:	70c1      	strb	r1, [r0, #3]
 800a21c:	e7ef      	b.n	800a1fe <__exponent+0x46>
	...

0800a220 <_printf_float>:
 800a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a224:	b08d      	sub	sp, #52	; 0x34
 800a226:	460c      	mov	r4, r1
 800a228:	4616      	mov	r6, r2
 800a22a:	461f      	mov	r7, r3
 800a22c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a230:	4605      	mov	r5, r0
 800a232:	f001 f9a9 	bl	800b588 <_localeconv_r>
 800a236:	f8d0 b000 	ldr.w	fp, [r0]
 800a23a:	4658      	mov	r0, fp
 800a23c:	f7f6 f8b0 	bl	80003a0 <strlen>
 800a240:	2300      	movs	r3, #0
 800a242:	930a      	str	r3, [sp, #40]	; 0x28
 800a244:	f8d8 3000 	ldr.w	r3, [r8]
 800a248:	9005      	str	r0, [sp, #20]
 800a24a:	3307      	adds	r3, #7
 800a24c:	f023 0307 	bic.w	r3, r3, #7
 800a250:	f103 0108 	add.w	r1, r3, #8
 800a254:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a258:	6822      	ldr	r2, [r4, #0]
 800a25a:	f8c8 1000 	str.w	r1, [r8]
 800a25e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a262:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800a266:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800a4f0 <_printf_float+0x2d0>
 800a26a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800a26e:	eeb0 6bc0 	vabs.f64	d6, d0
 800a272:	eeb4 6b47 	vcmp.f64	d6, d7
 800a276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a27a:	dd24      	ble.n	800a2c6 <_printf_float+0xa6>
 800a27c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a284:	d502      	bpl.n	800a28c <_printf_float+0x6c>
 800a286:	232d      	movs	r3, #45	; 0x2d
 800a288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a28c:	499a      	ldr	r1, [pc, #616]	; (800a4f8 <_printf_float+0x2d8>)
 800a28e:	4b9b      	ldr	r3, [pc, #620]	; (800a4fc <_printf_float+0x2dc>)
 800a290:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a294:	bf8c      	ite	hi
 800a296:	4688      	movhi	r8, r1
 800a298:	4698      	movls	r8, r3
 800a29a:	f022 0204 	bic.w	r2, r2, #4
 800a29e:	2303      	movs	r3, #3
 800a2a0:	6123      	str	r3, [r4, #16]
 800a2a2:	6022      	str	r2, [r4, #0]
 800a2a4:	f04f 0a00 	mov.w	sl, #0
 800a2a8:	9700      	str	r7, [sp, #0]
 800a2aa:	4633      	mov	r3, r6
 800a2ac:	aa0b      	add	r2, sp, #44	; 0x2c
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	f000 f9e1 	bl	800a678 <_printf_common>
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	f040 8089 	bne.w	800a3ce <_printf_float+0x1ae>
 800a2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c0:	b00d      	add	sp, #52	; 0x34
 800a2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c6:	eeb4 0b40 	vcmp.f64	d0, d0
 800a2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ce:	d702      	bvc.n	800a2d6 <_printf_float+0xb6>
 800a2d0:	498b      	ldr	r1, [pc, #556]	; (800a500 <_printf_float+0x2e0>)
 800a2d2:	4b8c      	ldr	r3, [pc, #560]	; (800a504 <_printf_float+0x2e4>)
 800a2d4:	e7dc      	b.n	800a290 <_printf_float+0x70>
 800a2d6:	6861      	ldr	r1, [r4, #4]
 800a2d8:	1c4b      	adds	r3, r1, #1
 800a2da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a2de:	ab0a      	add	r3, sp, #40	; 0x28
 800a2e0:	a809      	add	r0, sp, #36	; 0x24
 800a2e2:	d13b      	bne.n	800a35c <_printf_float+0x13c>
 800a2e4:	2106      	movs	r1, #6
 800a2e6:	6061      	str	r1, [r4, #4]
 800a2e8:	f04f 0c00 	mov.w	ip, #0
 800a2ec:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800a2f0:	e9cd 0900 	strd	r0, r9, [sp]
 800a2f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a2f8:	6022      	str	r2, [r4, #0]
 800a2fa:	6861      	ldr	r1, [r4, #4]
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	f7ff ff09 	bl	800a114 <__cvt>
 800a302:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800a306:	2b47      	cmp	r3, #71	; 0x47
 800a308:	4680      	mov	r8, r0
 800a30a:	d109      	bne.n	800a320 <_printf_float+0x100>
 800a30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a30e:	1cd8      	adds	r0, r3, #3
 800a310:	db02      	blt.n	800a318 <_printf_float+0xf8>
 800a312:	6862      	ldr	r2, [r4, #4]
 800a314:	4293      	cmp	r3, r2
 800a316:	dd47      	ble.n	800a3a8 <_printf_float+0x188>
 800a318:	f1a9 0902 	sub.w	r9, r9, #2
 800a31c:	fa5f f989 	uxtb.w	r9, r9
 800a320:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a324:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a326:	d824      	bhi.n	800a372 <_printf_float+0x152>
 800a328:	3901      	subs	r1, #1
 800a32a:	464a      	mov	r2, r9
 800a32c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a330:	9109      	str	r1, [sp, #36]	; 0x24
 800a332:	f7ff ff41 	bl	800a1b8 <__exponent>
 800a336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a338:	1813      	adds	r3, r2, r0
 800a33a:	2a01      	cmp	r2, #1
 800a33c:	4682      	mov	sl, r0
 800a33e:	6123      	str	r3, [r4, #16]
 800a340:	dc02      	bgt.n	800a348 <_printf_float+0x128>
 800a342:	6822      	ldr	r2, [r4, #0]
 800a344:	07d1      	lsls	r1, r2, #31
 800a346:	d501      	bpl.n	800a34c <_printf_float+0x12c>
 800a348:	3301      	adds	r3, #1
 800a34a:	6123      	str	r3, [r4, #16]
 800a34c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a350:	2b00      	cmp	r3, #0
 800a352:	d0a9      	beq.n	800a2a8 <_printf_float+0x88>
 800a354:	232d      	movs	r3, #45	; 0x2d
 800a356:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a35a:	e7a5      	b.n	800a2a8 <_printf_float+0x88>
 800a35c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800a360:	f000 8178 	beq.w	800a654 <_printf_float+0x434>
 800a364:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a368:	d1be      	bne.n	800a2e8 <_printf_float+0xc8>
 800a36a:	2900      	cmp	r1, #0
 800a36c:	d1bc      	bne.n	800a2e8 <_printf_float+0xc8>
 800a36e:	2101      	movs	r1, #1
 800a370:	e7b9      	b.n	800a2e6 <_printf_float+0xc6>
 800a372:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a376:	d119      	bne.n	800a3ac <_printf_float+0x18c>
 800a378:	2900      	cmp	r1, #0
 800a37a:	6863      	ldr	r3, [r4, #4]
 800a37c:	dd0c      	ble.n	800a398 <_printf_float+0x178>
 800a37e:	6121      	str	r1, [r4, #16]
 800a380:	b913      	cbnz	r3, 800a388 <_printf_float+0x168>
 800a382:	6822      	ldr	r2, [r4, #0]
 800a384:	07d2      	lsls	r2, r2, #31
 800a386:	d502      	bpl.n	800a38e <_printf_float+0x16e>
 800a388:	3301      	adds	r3, #1
 800a38a:	440b      	add	r3, r1
 800a38c:	6123      	str	r3, [r4, #16]
 800a38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a390:	65a3      	str	r3, [r4, #88]	; 0x58
 800a392:	f04f 0a00 	mov.w	sl, #0
 800a396:	e7d9      	b.n	800a34c <_printf_float+0x12c>
 800a398:	b913      	cbnz	r3, 800a3a0 <_printf_float+0x180>
 800a39a:	6822      	ldr	r2, [r4, #0]
 800a39c:	07d0      	lsls	r0, r2, #31
 800a39e:	d501      	bpl.n	800a3a4 <_printf_float+0x184>
 800a3a0:	3302      	adds	r3, #2
 800a3a2:	e7f3      	b.n	800a38c <_printf_float+0x16c>
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e7f1      	b.n	800a38c <_printf_float+0x16c>
 800a3a8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a3ac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	db05      	blt.n	800a3c0 <_printf_float+0x1a0>
 800a3b4:	6822      	ldr	r2, [r4, #0]
 800a3b6:	6123      	str	r3, [r4, #16]
 800a3b8:	07d1      	lsls	r1, r2, #31
 800a3ba:	d5e8      	bpl.n	800a38e <_printf_float+0x16e>
 800a3bc:	3301      	adds	r3, #1
 800a3be:	e7e5      	b.n	800a38c <_printf_float+0x16c>
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	bfd4      	ite	le
 800a3c4:	f1c3 0302 	rsble	r3, r3, #2
 800a3c8:	2301      	movgt	r3, #1
 800a3ca:	4413      	add	r3, r2
 800a3cc:	e7de      	b.n	800a38c <_printf_float+0x16c>
 800a3ce:	6823      	ldr	r3, [r4, #0]
 800a3d0:	055a      	lsls	r2, r3, #21
 800a3d2:	d407      	bmi.n	800a3e4 <_printf_float+0x1c4>
 800a3d4:	6923      	ldr	r3, [r4, #16]
 800a3d6:	4642      	mov	r2, r8
 800a3d8:	4631      	mov	r1, r6
 800a3da:	4628      	mov	r0, r5
 800a3dc:	47b8      	blx	r7
 800a3de:	3001      	adds	r0, #1
 800a3e0:	d12a      	bne.n	800a438 <_printf_float+0x218>
 800a3e2:	e76b      	b.n	800a2bc <_printf_float+0x9c>
 800a3e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a3e8:	f240 80de 	bls.w	800a5a8 <_printf_float+0x388>
 800a3ec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a3f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3f8:	d133      	bne.n	800a462 <_printf_float+0x242>
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	4a42      	ldr	r2, [pc, #264]	; (800a508 <_printf_float+0x2e8>)
 800a3fe:	4631      	mov	r1, r6
 800a400:	4628      	mov	r0, r5
 800a402:	47b8      	blx	r7
 800a404:	3001      	adds	r0, #1
 800a406:	f43f af59 	beq.w	800a2bc <_printf_float+0x9c>
 800a40a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a40e:	429a      	cmp	r2, r3
 800a410:	db02      	blt.n	800a418 <_printf_float+0x1f8>
 800a412:	6823      	ldr	r3, [r4, #0]
 800a414:	07d8      	lsls	r0, r3, #31
 800a416:	d50f      	bpl.n	800a438 <_printf_float+0x218>
 800a418:	9b05      	ldr	r3, [sp, #20]
 800a41a:	465a      	mov	r2, fp
 800a41c:	4631      	mov	r1, r6
 800a41e:	4628      	mov	r0, r5
 800a420:	47b8      	blx	r7
 800a422:	3001      	adds	r0, #1
 800a424:	f43f af4a 	beq.w	800a2bc <_printf_float+0x9c>
 800a428:	f04f 0800 	mov.w	r8, #0
 800a42c:	f104 091a 	add.w	r9, r4, #26
 800a430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a432:	3b01      	subs	r3, #1
 800a434:	4543      	cmp	r3, r8
 800a436:	dc09      	bgt.n	800a44c <_printf_float+0x22c>
 800a438:	6823      	ldr	r3, [r4, #0]
 800a43a:	079b      	lsls	r3, r3, #30
 800a43c:	f100 8105 	bmi.w	800a64a <_printf_float+0x42a>
 800a440:	68e0      	ldr	r0, [r4, #12]
 800a442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a444:	4298      	cmp	r0, r3
 800a446:	bfb8      	it	lt
 800a448:	4618      	movlt	r0, r3
 800a44a:	e739      	b.n	800a2c0 <_printf_float+0xa0>
 800a44c:	2301      	movs	r3, #1
 800a44e:	464a      	mov	r2, r9
 800a450:	4631      	mov	r1, r6
 800a452:	4628      	mov	r0, r5
 800a454:	47b8      	blx	r7
 800a456:	3001      	adds	r0, #1
 800a458:	f43f af30 	beq.w	800a2bc <_printf_float+0x9c>
 800a45c:	f108 0801 	add.w	r8, r8, #1
 800a460:	e7e6      	b.n	800a430 <_printf_float+0x210>
 800a462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a464:	2b00      	cmp	r3, #0
 800a466:	dc2b      	bgt.n	800a4c0 <_printf_float+0x2a0>
 800a468:	2301      	movs	r3, #1
 800a46a:	4a27      	ldr	r2, [pc, #156]	; (800a508 <_printf_float+0x2e8>)
 800a46c:	4631      	mov	r1, r6
 800a46e:	4628      	mov	r0, r5
 800a470:	47b8      	blx	r7
 800a472:	3001      	adds	r0, #1
 800a474:	f43f af22 	beq.w	800a2bc <_printf_float+0x9c>
 800a478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a47a:	b923      	cbnz	r3, 800a486 <_printf_float+0x266>
 800a47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a47e:	b913      	cbnz	r3, 800a486 <_printf_float+0x266>
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	07d9      	lsls	r1, r3, #31
 800a484:	d5d8      	bpl.n	800a438 <_printf_float+0x218>
 800a486:	9b05      	ldr	r3, [sp, #20]
 800a488:	465a      	mov	r2, fp
 800a48a:	4631      	mov	r1, r6
 800a48c:	4628      	mov	r0, r5
 800a48e:	47b8      	blx	r7
 800a490:	3001      	adds	r0, #1
 800a492:	f43f af13 	beq.w	800a2bc <_printf_float+0x9c>
 800a496:	f04f 0900 	mov.w	r9, #0
 800a49a:	f104 0a1a 	add.w	sl, r4, #26
 800a49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a0:	425b      	negs	r3, r3
 800a4a2:	454b      	cmp	r3, r9
 800a4a4:	dc01      	bgt.n	800a4aa <_printf_float+0x28a>
 800a4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4a8:	e795      	b.n	800a3d6 <_printf_float+0x1b6>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	4652      	mov	r2, sl
 800a4ae:	4631      	mov	r1, r6
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	47b8      	blx	r7
 800a4b4:	3001      	adds	r0, #1
 800a4b6:	f43f af01 	beq.w	800a2bc <_printf_float+0x9c>
 800a4ba:	f109 0901 	add.w	r9, r9, #1
 800a4be:	e7ee      	b.n	800a49e <_printf_float+0x27e>
 800a4c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	bfa8      	it	ge
 800a4c8:	461a      	movge	r2, r3
 800a4ca:	2a00      	cmp	r2, #0
 800a4cc:	4691      	mov	r9, r2
 800a4ce:	dd07      	ble.n	800a4e0 <_printf_float+0x2c0>
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	4642      	mov	r2, r8
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	47b8      	blx	r7
 800a4da:	3001      	adds	r0, #1
 800a4dc:	f43f aeee 	beq.w	800a2bc <_printf_float+0x9c>
 800a4e0:	f104 031a 	add.w	r3, r4, #26
 800a4e4:	f04f 0a00 	mov.w	sl, #0
 800a4e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4ec:	9307      	str	r3, [sp, #28]
 800a4ee:	e017      	b.n	800a520 <_printf_float+0x300>
 800a4f0:	ffffffff 	.word	0xffffffff
 800a4f4:	7fefffff 	.word	0x7fefffff
 800a4f8:	08012b38 	.word	0x08012b38
 800a4fc:	08012b34 	.word	0x08012b34
 800a500:	08012b40 	.word	0x08012b40
 800a504:	08012b3c 	.word	0x08012b3c
 800a508:	08012d94 	.word	0x08012d94
 800a50c:	2301      	movs	r3, #1
 800a50e:	9a07      	ldr	r2, [sp, #28]
 800a510:	4631      	mov	r1, r6
 800a512:	4628      	mov	r0, r5
 800a514:	47b8      	blx	r7
 800a516:	3001      	adds	r0, #1
 800a518:	f43f aed0 	beq.w	800a2bc <_printf_float+0x9c>
 800a51c:	f10a 0a01 	add.w	sl, sl, #1
 800a520:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a522:	9306      	str	r3, [sp, #24]
 800a524:	eba3 0309 	sub.w	r3, r3, r9
 800a528:	4553      	cmp	r3, sl
 800a52a:	dcef      	bgt.n	800a50c <_printf_float+0x2ec>
 800a52c:	9b06      	ldr	r3, [sp, #24]
 800a52e:	4498      	add	r8, r3
 800a530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a534:	429a      	cmp	r2, r3
 800a536:	db15      	blt.n	800a564 <_printf_float+0x344>
 800a538:	6823      	ldr	r3, [r4, #0]
 800a53a:	07da      	lsls	r2, r3, #31
 800a53c:	d412      	bmi.n	800a564 <_printf_float+0x344>
 800a53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a540:	9a06      	ldr	r2, [sp, #24]
 800a542:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a544:	1a9a      	subs	r2, r3, r2
 800a546:	eba3 0a01 	sub.w	sl, r3, r1
 800a54a:	4592      	cmp	sl, r2
 800a54c:	bfa8      	it	ge
 800a54e:	4692      	movge	sl, r2
 800a550:	f1ba 0f00 	cmp.w	sl, #0
 800a554:	dc0e      	bgt.n	800a574 <_printf_float+0x354>
 800a556:	f04f 0800 	mov.w	r8, #0
 800a55a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a55e:	f104 091a 	add.w	r9, r4, #26
 800a562:	e019      	b.n	800a598 <_printf_float+0x378>
 800a564:	9b05      	ldr	r3, [sp, #20]
 800a566:	465a      	mov	r2, fp
 800a568:	4631      	mov	r1, r6
 800a56a:	4628      	mov	r0, r5
 800a56c:	47b8      	blx	r7
 800a56e:	3001      	adds	r0, #1
 800a570:	d1e5      	bne.n	800a53e <_printf_float+0x31e>
 800a572:	e6a3      	b.n	800a2bc <_printf_float+0x9c>
 800a574:	4653      	mov	r3, sl
 800a576:	4642      	mov	r2, r8
 800a578:	4631      	mov	r1, r6
 800a57a:	4628      	mov	r0, r5
 800a57c:	47b8      	blx	r7
 800a57e:	3001      	adds	r0, #1
 800a580:	d1e9      	bne.n	800a556 <_printf_float+0x336>
 800a582:	e69b      	b.n	800a2bc <_printf_float+0x9c>
 800a584:	2301      	movs	r3, #1
 800a586:	464a      	mov	r2, r9
 800a588:	4631      	mov	r1, r6
 800a58a:	4628      	mov	r0, r5
 800a58c:	47b8      	blx	r7
 800a58e:	3001      	adds	r0, #1
 800a590:	f43f ae94 	beq.w	800a2bc <_printf_float+0x9c>
 800a594:	f108 0801 	add.w	r8, r8, #1
 800a598:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a59c:	1a9b      	subs	r3, r3, r2
 800a59e:	eba3 030a 	sub.w	r3, r3, sl
 800a5a2:	4543      	cmp	r3, r8
 800a5a4:	dcee      	bgt.n	800a584 <_printf_float+0x364>
 800a5a6:	e747      	b.n	800a438 <_printf_float+0x218>
 800a5a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5aa:	2a01      	cmp	r2, #1
 800a5ac:	dc01      	bgt.n	800a5b2 <_printf_float+0x392>
 800a5ae:	07db      	lsls	r3, r3, #31
 800a5b0:	d539      	bpl.n	800a626 <_printf_float+0x406>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	4642      	mov	r2, r8
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	47b8      	blx	r7
 800a5bc:	3001      	adds	r0, #1
 800a5be:	f43f ae7d 	beq.w	800a2bc <_printf_float+0x9c>
 800a5c2:	9b05      	ldr	r3, [sp, #20]
 800a5c4:	465a      	mov	r2, fp
 800a5c6:	4631      	mov	r1, r6
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	47b8      	blx	r7
 800a5cc:	3001      	adds	r0, #1
 800a5ce:	f108 0801 	add.w	r8, r8, #1
 800a5d2:	f43f ae73 	beq.w	800a2bc <_printf_float+0x9c>
 800a5d6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a5da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5e4:	f103 33ff 	add.w	r3, r3, #4294967295
 800a5e8:	d018      	beq.n	800a61c <_printf_float+0x3fc>
 800a5ea:	4642      	mov	r2, r8
 800a5ec:	4631      	mov	r1, r6
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	47b8      	blx	r7
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	d10e      	bne.n	800a614 <_printf_float+0x3f4>
 800a5f6:	e661      	b.n	800a2bc <_printf_float+0x9c>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	464a      	mov	r2, r9
 800a5fc:	4631      	mov	r1, r6
 800a5fe:	4628      	mov	r0, r5
 800a600:	47b8      	blx	r7
 800a602:	3001      	adds	r0, #1
 800a604:	f43f ae5a 	beq.w	800a2bc <_printf_float+0x9c>
 800a608:	f108 0801 	add.w	r8, r8, #1
 800a60c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a60e:	3b01      	subs	r3, #1
 800a610:	4543      	cmp	r3, r8
 800a612:	dcf1      	bgt.n	800a5f8 <_printf_float+0x3d8>
 800a614:	4653      	mov	r3, sl
 800a616:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a61a:	e6dd      	b.n	800a3d8 <_printf_float+0x1b8>
 800a61c:	f04f 0800 	mov.w	r8, #0
 800a620:	f104 091a 	add.w	r9, r4, #26
 800a624:	e7f2      	b.n	800a60c <_printf_float+0x3ec>
 800a626:	2301      	movs	r3, #1
 800a628:	e7df      	b.n	800a5ea <_printf_float+0x3ca>
 800a62a:	2301      	movs	r3, #1
 800a62c:	464a      	mov	r2, r9
 800a62e:	4631      	mov	r1, r6
 800a630:	4628      	mov	r0, r5
 800a632:	47b8      	blx	r7
 800a634:	3001      	adds	r0, #1
 800a636:	f43f ae41 	beq.w	800a2bc <_printf_float+0x9c>
 800a63a:	f108 0801 	add.w	r8, r8, #1
 800a63e:	68e3      	ldr	r3, [r4, #12]
 800a640:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a642:	1a9b      	subs	r3, r3, r2
 800a644:	4543      	cmp	r3, r8
 800a646:	dcf0      	bgt.n	800a62a <_printf_float+0x40a>
 800a648:	e6fa      	b.n	800a440 <_printf_float+0x220>
 800a64a:	f04f 0800 	mov.w	r8, #0
 800a64e:	f104 0919 	add.w	r9, r4, #25
 800a652:	e7f4      	b.n	800a63e <_printf_float+0x41e>
 800a654:	2900      	cmp	r1, #0
 800a656:	f43f ae8a 	beq.w	800a36e <_printf_float+0x14e>
 800a65a:	f04f 0c00 	mov.w	ip, #0
 800a65e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800a662:	e9cd 0900 	strd	r0, r9, [sp]
 800a666:	6022      	str	r2, [r4, #0]
 800a668:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a66c:	4628      	mov	r0, r5
 800a66e:	f7ff fd51 	bl	800a114 <__cvt>
 800a672:	4680      	mov	r8, r0
 800a674:	e64a      	b.n	800a30c <_printf_float+0xec>
 800a676:	bf00      	nop

0800a678 <_printf_common>:
 800a678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a67c:	4691      	mov	r9, r2
 800a67e:	461f      	mov	r7, r3
 800a680:	688a      	ldr	r2, [r1, #8]
 800a682:	690b      	ldr	r3, [r1, #16]
 800a684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a688:	4293      	cmp	r3, r2
 800a68a:	bfb8      	it	lt
 800a68c:	4613      	movlt	r3, r2
 800a68e:	f8c9 3000 	str.w	r3, [r9]
 800a692:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a696:	4606      	mov	r6, r0
 800a698:	460c      	mov	r4, r1
 800a69a:	b112      	cbz	r2, 800a6a2 <_printf_common+0x2a>
 800a69c:	3301      	adds	r3, #1
 800a69e:	f8c9 3000 	str.w	r3, [r9]
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	0699      	lsls	r1, r3, #26
 800a6a6:	bf42      	ittt	mi
 800a6a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a6ac:	3302      	addmi	r3, #2
 800a6ae:	f8c9 3000 	strmi.w	r3, [r9]
 800a6b2:	6825      	ldr	r5, [r4, #0]
 800a6b4:	f015 0506 	ands.w	r5, r5, #6
 800a6b8:	d107      	bne.n	800a6ca <_printf_common+0x52>
 800a6ba:	f104 0a19 	add.w	sl, r4, #25
 800a6be:	68e3      	ldr	r3, [r4, #12]
 800a6c0:	f8d9 2000 	ldr.w	r2, [r9]
 800a6c4:	1a9b      	subs	r3, r3, r2
 800a6c6:	42ab      	cmp	r3, r5
 800a6c8:	dc28      	bgt.n	800a71c <_printf_common+0xa4>
 800a6ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a6ce:	6822      	ldr	r2, [r4, #0]
 800a6d0:	3300      	adds	r3, #0
 800a6d2:	bf18      	it	ne
 800a6d4:	2301      	movne	r3, #1
 800a6d6:	0692      	lsls	r2, r2, #26
 800a6d8:	d42d      	bmi.n	800a736 <_printf_common+0xbe>
 800a6da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6de:	4639      	mov	r1, r7
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	47c0      	blx	r8
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	d020      	beq.n	800a72a <_printf_common+0xb2>
 800a6e8:	6823      	ldr	r3, [r4, #0]
 800a6ea:	68e5      	ldr	r5, [r4, #12]
 800a6ec:	f8d9 2000 	ldr.w	r2, [r9]
 800a6f0:	f003 0306 	and.w	r3, r3, #6
 800a6f4:	2b04      	cmp	r3, #4
 800a6f6:	bf08      	it	eq
 800a6f8:	1aad      	subeq	r5, r5, r2
 800a6fa:	68a3      	ldr	r3, [r4, #8]
 800a6fc:	6922      	ldr	r2, [r4, #16]
 800a6fe:	bf0c      	ite	eq
 800a700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a704:	2500      	movne	r5, #0
 800a706:	4293      	cmp	r3, r2
 800a708:	bfc4      	itt	gt
 800a70a:	1a9b      	subgt	r3, r3, r2
 800a70c:	18ed      	addgt	r5, r5, r3
 800a70e:	f04f 0900 	mov.w	r9, #0
 800a712:	341a      	adds	r4, #26
 800a714:	454d      	cmp	r5, r9
 800a716:	d11a      	bne.n	800a74e <_printf_common+0xd6>
 800a718:	2000      	movs	r0, #0
 800a71a:	e008      	b.n	800a72e <_printf_common+0xb6>
 800a71c:	2301      	movs	r3, #1
 800a71e:	4652      	mov	r2, sl
 800a720:	4639      	mov	r1, r7
 800a722:	4630      	mov	r0, r6
 800a724:	47c0      	blx	r8
 800a726:	3001      	adds	r0, #1
 800a728:	d103      	bne.n	800a732 <_printf_common+0xba>
 800a72a:	f04f 30ff 	mov.w	r0, #4294967295
 800a72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a732:	3501      	adds	r5, #1
 800a734:	e7c3      	b.n	800a6be <_printf_common+0x46>
 800a736:	18e1      	adds	r1, r4, r3
 800a738:	1c5a      	adds	r2, r3, #1
 800a73a:	2030      	movs	r0, #48	; 0x30
 800a73c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a740:	4422      	add	r2, r4
 800a742:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a746:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a74a:	3302      	adds	r3, #2
 800a74c:	e7c5      	b.n	800a6da <_printf_common+0x62>
 800a74e:	2301      	movs	r3, #1
 800a750:	4622      	mov	r2, r4
 800a752:	4639      	mov	r1, r7
 800a754:	4630      	mov	r0, r6
 800a756:	47c0      	blx	r8
 800a758:	3001      	adds	r0, #1
 800a75a:	d0e6      	beq.n	800a72a <_printf_common+0xb2>
 800a75c:	f109 0901 	add.w	r9, r9, #1
 800a760:	e7d8      	b.n	800a714 <_printf_common+0x9c>
	...

0800a764 <_printf_i>:
 800a764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a768:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a76c:	460c      	mov	r4, r1
 800a76e:	7e09      	ldrb	r1, [r1, #24]
 800a770:	b085      	sub	sp, #20
 800a772:	296e      	cmp	r1, #110	; 0x6e
 800a774:	4617      	mov	r7, r2
 800a776:	4606      	mov	r6, r0
 800a778:	4698      	mov	r8, r3
 800a77a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a77c:	f000 80b3 	beq.w	800a8e6 <_printf_i+0x182>
 800a780:	d822      	bhi.n	800a7c8 <_printf_i+0x64>
 800a782:	2963      	cmp	r1, #99	; 0x63
 800a784:	d036      	beq.n	800a7f4 <_printf_i+0x90>
 800a786:	d80a      	bhi.n	800a79e <_printf_i+0x3a>
 800a788:	2900      	cmp	r1, #0
 800a78a:	f000 80b9 	beq.w	800a900 <_printf_i+0x19c>
 800a78e:	2958      	cmp	r1, #88	; 0x58
 800a790:	f000 8083 	beq.w	800a89a <_printf_i+0x136>
 800a794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a798:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a79c:	e032      	b.n	800a804 <_printf_i+0xa0>
 800a79e:	2964      	cmp	r1, #100	; 0x64
 800a7a0:	d001      	beq.n	800a7a6 <_printf_i+0x42>
 800a7a2:	2969      	cmp	r1, #105	; 0x69
 800a7a4:	d1f6      	bne.n	800a794 <_printf_i+0x30>
 800a7a6:	6820      	ldr	r0, [r4, #0]
 800a7a8:	6813      	ldr	r3, [r2, #0]
 800a7aa:	0605      	lsls	r5, r0, #24
 800a7ac:	f103 0104 	add.w	r1, r3, #4
 800a7b0:	d52a      	bpl.n	800a808 <_printf_i+0xa4>
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6011      	str	r1, [r2, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	da03      	bge.n	800a7c2 <_printf_i+0x5e>
 800a7ba:	222d      	movs	r2, #45	; 0x2d
 800a7bc:	425b      	negs	r3, r3
 800a7be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a7c2:	486f      	ldr	r0, [pc, #444]	; (800a980 <_printf_i+0x21c>)
 800a7c4:	220a      	movs	r2, #10
 800a7c6:	e039      	b.n	800a83c <_printf_i+0xd8>
 800a7c8:	2973      	cmp	r1, #115	; 0x73
 800a7ca:	f000 809d 	beq.w	800a908 <_printf_i+0x1a4>
 800a7ce:	d808      	bhi.n	800a7e2 <_printf_i+0x7e>
 800a7d0:	296f      	cmp	r1, #111	; 0x6f
 800a7d2:	d020      	beq.n	800a816 <_printf_i+0xb2>
 800a7d4:	2970      	cmp	r1, #112	; 0x70
 800a7d6:	d1dd      	bne.n	800a794 <_printf_i+0x30>
 800a7d8:	6823      	ldr	r3, [r4, #0]
 800a7da:	f043 0320 	orr.w	r3, r3, #32
 800a7de:	6023      	str	r3, [r4, #0]
 800a7e0:	e003      	b.n	800a7ea <_printf_i+0x86>
 800a7e2:	2975      	cmp	r1, #117	; 0x75
 800a7e4:	d017      	beq.n	800a816 <_printf_i+0xb2>
 800a7e6:	2978      	cmp	r1, #120	; 0x78
 800a7e8:	d1d4      	bne.n	800a794 <_printf_i+0x30>
 800a7ea:	2378      	movs	r3, #120	; 0x78
 800a7ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7f0:	4864      	ldr	r0, [pc, #400]	; (800a984 <_printf_i+0x220>)
 800a7f2:	e055      	b.n	800a8a0 <_printf_i+0x13c>
 800a7f4:	6813      	ldr	r3, [r2, #0]
 800a7f6:	1d19      	adds	r1, r3, #4
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	6011      	str	r1, [r2, #0]
 800a7fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a804:	2301      	movs	r3, #1
 800a806:	e08c      	b.n	800a922 <_printf_i+0x1be>
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	6011      	str	r1, [r2, #0]
 800a80c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a810:	bf18      	it	ne
 800a812:	b21b      	sxthne	r3, r3
 800a814:	e7cf      	b.n	800a7b6 <_printf_i+0x52>
 800a816:	6813      	ldr	r3, [r2, #0]
 800a818:	6825      	ldr	r5, [r4, #0]
 800a81a:	1d18      	adds	r0, r3, #4
 800a81c:	6010      	str	r0, [r2, #0]
 800a81e:	0628      	lsls	r0, r5, #24
 800a820:	d501      	bpl.n	800a826 <_printf_i+0xc2>
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	e002      	b.n	800a82c <_printf_i+0xc8>
 800a826:	0668      	lsls	r0, r5, #25
 800a828:	d5fb      	bpl.n	800a822 <_printf_i+0xbe>
 800a82a:	881b      	ldrh	r3, [r3, #0]
 800a82c:	4854      	ldr	r0, [pc, #336]	; (800a980 <_printf_i+0x21c>)
 800a82e:	296f      	cmp	r1, #111	; 0x6f
 800a830:	bf14      	ite	ne
 800a832:	220a      	movne	r2, #10
 800a834:	2208      	moveq	r2, #8
 800a836:	2100      	movs	r1, #0
 800a838:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a83c:	6865      	ldr	r5, [r4, #4]
 800a83e:	60a5      	str	r5, [r4, #8]
 800a840:	2d00      	cmp	r5, #0
 800a842:	f2c0 8095 	blt.w	800a970 <_printf_i+0x20c>
 800a846:	6821      	ldr	r1, [r4, #0]
 800a848:	f021 0104 	bic.w	r1, r1, #4
 800a84c:	6021      	str	r1, [r4, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d13d      	bne.n	800a8ce <_printf_i+0x16a>
 800a852:	2d00      	cmp	r5, #0
 800a854:	f040 808e 	bne.w	800a974 <_printf_i+0x210>
 800a858:	4665      	mov	r5, ip
 800a85a:	2a08      	cmp	r2, #8
 800a85c:	d10b      	bne.n	800a876 <_printf_i+0x112>
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	07db      	lsls	r3, r3, #31
 800a862:	d508      	bpl.n	800a876 <_printf_i+0x112>
 800a864:	6923      	ldr	r3, [r4, #16]
 800a866:	6862      	ldr	r2, [r4, #4]
 800a868:	429a      	cmp	r2, r3
 800a86a:	bfde      	ittt	le
 800a86c:	2330      	movle	r3, #48	; 0x30
 800a86e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a872:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a876:	ebac 0305 	sub.w	r3, ip, r5
 800a87a:	6123      	str	r3, [r4, #16]
 800a87c:	f8cd 8000 	str.w	r8, [sp]
 800a880:	463b      	mov	r3, r7
 800a882:	aa03      	add	r2, sp, #12
 800a884:	4621      	mov	r1, r4
 800a886:	4630      	mov	r0, r6
 800a888:	f7ff fef6 	bl	800a678 <_printf_common>
 800a88c:	3001      	adds	r0, #1
 800a88e:	d14d      	bne.n	800a92c <_printf_i+0x1c8>
 800a890:	f04f 30ff 	mov.w	r0, #4294967295
 800a894:	b005      	add	sp, #20
 800a896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a89a:	4839      	ldr	r0, [pc, #228]	; (800a980 <_printf_i+0x21c>)
 800a89c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a8a0:	6813      	ldr	r3, [r2, #0]
 800a8a2:	6821      	ldr	r1, [r4, #0]
 800a8a4:	1d1d      	adds	r5, r3, #4
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	6015      	str	r5, [r2, #0]
 800a8aa:	060a      	lsls	r2, r1, #24
 800a8ac:	d50b      	bpl.n	800a8c6 <_printf_i+0x162>
 800a8ae:	07ca      	lsls	r2, r1, #31
 800a8b0:	bf44      	itt	mi
 800a8b2:	f041 0120 	orrmi.w	r1, r1, #32
 800a8b6:	6021      	strmi	r1, [r4, #0]
 800a8b8:	b91b      	cbnz	r3, 800a8c2 <_printf_i+0x15e>
 800a8ba:	6822      	ldr	r2, [r4, #0]
 800a8bc:	f022 0220 	bic.w	r2, r2, #32
 800a8c0:	6022      	str	r2, [r4, #0]
 800a8c2:	2210      	movs	r2, #16
 800a8c4:	e7b7      	b.n	800a836 <_printf_i+0xd2>
 800a8c6:	064d      	lsls	r5, r1, #25
 800a8c8:	bf48      	it	mi
 800a8ca:	b29b      	uxthmi	r3, r3
 800a8cc:	e7ef      	b.n	800a8ae <_printf_i+0x14a>
 800a8ce:	4665      	mov	r5, ip
 800a8d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8d4:	fb02 3311 	mls	r3, r2, r1, r3
 800a8d8:	5cc3      	ldrb	r3, [r0, r3]
 800a8da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a8de:	460b      	mov	r3, r1
 800a8e0:	2900      	cmp	r1, #0
 800a8e2:	d1f5      	bne.n	800a8d0 <_printf_i+0x16c>
 800a8e4:	e7b9      	b.n	800a85a <_printf_i+0xf6>
 800a8e6:	6813      	ldr	r3, [r2, #0]
 800a8e8:	6825      	ldr	r5, [r4, #0]
 800a8ea:	6961      	ldr	r1, [r4, #20]
 800a8ec:	1d18      	adds	r0, r3, #4
 800a8ee:	6010      	str	r0, [r2, #0]
 800a8f0:	0628      	lsls	r0, r5, #24
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	d501      	bpl.n	800a8fa <_printf_i+0x196>
 800a8f6:	6019      	str	r1, [r3, #0]
 800a8f8:	e002      	b.n	800a900 <_printf_i+0x19c>
 800a8fa:	066a      	lsls	r2, r5, #25
 800a8fc:	d5fb      	bpl.n	800a8f6 <_printf_i+0x192>
 800a8fe:	8019      	strh	r1, [r3, #0]
 800a900:	2300      	movs	r3, #0
 800a902:	6123      	str	r3, [r4, #16]
 800a904:	4665      	mov	r5, ip
 800a906:	e7b9      	b.n	800a87c <_printf_i+0x118>
 800a908:	6813      	ldr	r3, [r2, #0]
 800a90a:	1d19      	adds	r1, r3, #4
 800a90c:	6011      	str	r1, [r2, #0]
 800a90e:	681d      	ldr	r5, [r3, #0]
 800a910:	6862      	ldr	r2, [r4, #4]
 800a912:	2100      	movs	r1, #0
 800a914:	4628      	mov	r0, r5
 800a916:	f7f5 fd4b 	bl	80003b0 <memchr>
 800a91a:	b108      	cbz	r0, 800a920 <_printf_i+0x1bc>
 800a91c:	1b40      	subs	r0, r0, r5
 800a91e:	6060      	str	r0, [r4, #4]
 800a920:	6863      	ldr	r3, [r4, #4]
 800a922:	6123      	str	r3, [r4, #16]
 800a924:	2300      	movs	r3, #0
 800a926:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a92a:	e7a7      	b.n	800a87c <_printf_i+0x118>
 800a92c:	6923      	ldr	r3, [r4, #16]
 800a92e:	462a      	mov	r2, r5
 800a930:	4639      	mov	r1, r7
 800a932:	4630      	mov	r0, r6
 800a934:	47c0      	blx	r8
 800a936:	3001      	adds	r0, #1
 800a938:	d0aa      	beq.n	800a890 <_printf_i+0x12c>
 800a93a:	6823      	ldr	r3, [r4, #0]
 800a93c:	079b      	lsls	r3, r3, #30
 800a93e:	d413      	bmi.n	800a968 <_printf_i+0x204>
 800a940:	68e0      	ldr	r0, [r4, #12]
 800a942:	9b03      	ldr	r3, [sp, #12]
 800a944:	4298      	cmp	r0, r3
 800a946:	bfb8      	it	lt
 800a948:	4618      	movlt	r0, r3
 800a94a:	e7a3      	b.n	800a894 <_printf_i+0x130>
 800a94c:	2301      	movs	r3, #1
 800a94e:	464a      	mov	r2, r9
 800a950:	4639      	mov	r1, r7
 800a952:	4630      	mov	r0, r6
 800a954:	47c0      	blx	r8
 800a956:	3001      	adds	r0, #1
 800a958:	d09a      	beq.n	800a890 <_printf_i+0x12c>
 800a95a:	3501      	adds	r5, #1
 800a95c:	68e3      	ldr	r3, [r4, #12]
 800a95e:	9a03      	ldr	r2, [sp, #12]
 800a960:	1a9b      	subs	r3, r3, r2
 800a962:	42ab      	cmp	r3, r5
 800a964:	dcf2      	bgt.n	800a94c <_printf_i+0x1e8>
 800a966:	e7eb      	b.n	800a940 <_printf_i+0x1dc>
 800a968:	2500      	movs	r5, #0
 800a96a:	f104 0919 	add.w	r9, r4, #25
 800a96e:	e7f5      	b.n	800a95c <_printf_i+0x1f8>
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1ac      	bne.n	800a8ce <_printf_i+0x16a>
 800a974:	7803      	ldrb	r3, [r0, #0]
 800a976:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a97a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a97e:	e76c      	b.n	800a85a <_printf_i+0xf6>
 800a980:	08012b44 	.word	0x08012b44
 800a984:	08012b55 	.word	0x08012b55

0800a988 <siprintf>:
 800a988:	b40e      	push	{r1, r2, r3}
 800a98a:	b500      	push	{lr}
 800a98c:	b09c      	sub	sp, #112	; 0x70
 800a98e:	ab1d      	add	r3, sp, #116	; 0x74
 800a990:	9002      	str	r0, [sp, #8]
 800a992:	9006      	str	r0, [sp, #24]
 800a994:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a998:	4809      	ldr	r0, [pc, #36]	; (800a9c0 <siprintf+0x38>)
 800a99a:	9107      	str	r1, [sp, #28]
 800a99c:	9104      	str	r1, [sp, #16]
 800a99e:	4909      	ldr	r1, [pc, #36]	; (800a9c4 <siprintf+0x3c>)
 800a9a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9a4:	9105      	str	r1, [sp, #20]
 800a9a6:	6800      	ldr	r0, [r0, #0]
 800a9a8:	9301      	str	r3, [sp, #4]
 800a9aa:	a902      	add	r1, sp, #8
 800a9ac:	f001 f9f8 	bl	800bda0 <_svfiprintf_r>
 800a9b0:	9b02      	ldr	r3, [sp, #8]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	701a      	strb	r2, [r3, #0]
 800a9b6:	b01c      	add	sp, #112	; 0x70
 800a9b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9bc:	b003      	add	sp, #12
 800a9be:	4770      	bx	lr
 800a9c0:	24000204 	.word	0x24000204
 800a9c4:	ffff0208 	.word	0xffff0208

0800a9c8 <strcpy>:
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9ce:	f803 2b01 	strb.w	r2, [r3], #1
 800a9d2:	2a00      	cmp	r2, #0
 800a9d4:	d1f9      	bne.n	800a9ca <strcpy+0x2>
 800a9d6:	4770      	bx	lr

0800a9d8 <quorem>:
 800a9d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9dc:	6903      	ldr	r3, [r0, #16]
 800a9de:	690c      	ldr	r4, [r1, #16]
 800a9e0:	42a3      	cmp	r3, r4
 800a9e2:	4680      	mov	r8, r0
 800a9e4:	f2c0 8082 	blt.w	800aaec <quorem+0x114>
 800a9e8:	3c01      	subs	r4, #1
 800a9ea:	f101 0714 	add.w	r7, r1, #20
 800a9ee:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a9f2:	f100 0614 	add.w	r6, r0, #20
 800a9f6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a9fa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a9fe:	eb06 030c 	add.w	r3, r6, ip
 800aa02:	3501      	adds	r5, #1
 800aa04:	eb07 090c 	add.w	r9, r7, ip
 800aa08:	9301      	str	r3, [sp, #4]
 800aa0a:	fbb0 f5f5 	udiv	r5, r0, r5
 800aa0e:	b395      	cbz	r5, 800aa76 <quorem+0x9e>
 800aa10:	f04f 0a00 	mov.w	sl, #0
 800aa14:	4638      	mov	r0, r7
 800aa16:	46b6      	mov	lr, r6
 800aa18:	46d3      	mov	fp, sl
 800aa1a:	f850 2b04 	ldr.w	r2, [r0], #4
 800aa1e:	b293      	uxth	r3, r2
 800aa20:	fb05 a303 	mla	r3, r5, r3, sl
 800aa24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	ebab 0303 	sub.w	r3, fp, r3
 800aa2e:	0c12      	lsrs	r2, r2, #16
 800aa30:	f8de b000 	ldr.w	fp, [lr]
 800aa34:	fb05 a202 	mla	r2, r5, r2, sl
 800aa38:	fa13 f38b 	uxtah	r3, r3, fp
 800aa3c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800aa40:	fa1f fb82 	uxth.w	fp, r2
 800aa44:	f8de 2000 	ldr.w	r2, [lr]
 800aa48:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800aa4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa56:	4581      	cmp	r9, r0
 800aa58:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800aa5c:	f84e 3b04 	str.w	r3, [lr], #4
 800aa60:	d2db      	bcs.n	800aa1a <quorem+0x42>
 800aa62:	f856 300c 	ldr.w	r3, [r6, ip]
 800aa66:	b933      	cbnz	r3, 800aa76 <quorem+0x9e>
 800aa68:	9b01      	ldr	r3, [sp, #4]
 800aa6a:	3b04      	subs	r3, #4
 800aa6c:	429e      	cmp	r6, r3
 800aa6e:	461a      	mov	r2, r3
 800aa70:	d330      	bcc.n	800aad4 <quorem+0xfc>
 800aa72:	f8c8 4010 	str.w	r4, [r8, #16]
 800aa76:	4640      	mov	r0, r8
 800aa78:	f000 ffbc 	bl	800b9f4 <__mcmp>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	db25      	blt.n	800aacc <quorem+0xf4>
 800aa80:	3501      	adds	r5, #1
 800aa82:	4630      	mov	r0, r6
 800aa84:	f04f 0c00 	mov.w	ip, #0
 800aa88:	f857 2b04 	ldr.w	r2, [r7], #4
 800aa8c:	f8d0 e000 	ldr.w	lr, [r0]
 800aa90:	b293      	uxth	r3, r2
 800aa92:	ebac 0303 	sub.w	r3, ip, r3
 800aa96:	0c12      	lsrs	r2, r2, #16
 800aa98:	fa13 f38e 	uxtah	r3, r3, lr
 800aa9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aaa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aaaa:	45b9      	cmp	r9, r7
 800aaac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aab0:	f840 3b04 	str.w	r3, [r0], #4
 800aab4:	d2e8      	bcs.n	800aa88 <quorem+0xb0>
 800aab6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800aaba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800aabe:	b92a      	cbnz	r2, 800aacc <quorem+0xf4>
 800aac0:	3b04      	subs	r3, #4
 800aac2:	429e      	cmp	r6, r3
 800aac4:	461a      	mov	r2, r3
 800aac6:	d30b      	bcc.n	800aae0 <quorem+0x108>
 800aac8:	f8c8 4010 	str.w	r4, [r8, #16]
 800aacc:	4628      	mov	r0, r5
 800aace:	b003      	add	sp, #12
 800aad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad4:	6812      	ldr	r2, [r2, #0]
 800aad6:	3b04      	subs	r3, #4
 800aad8:	2a00      	cmp	r2, #0
 800aada:	d1ca      	bne.n	800aa72 <quorem+0x9a>
 800aadc:	3c01      	subs	r4, #1
 800aade:	e7c5      	b.n	800aa6c <quorem+0x94>
 800aae0:	6812      	ldr	r2, [r2, #0]
 800aae2:	3b04      	subs	r3, #4
 800aae4:	2a00      	cmp	r2, #0
 800aae6:	d1ef      	bne.n	800aac8 <quorem+0xf0>
 800aae8:	3c01      	subs	r4, #1
 800aaea:	e7ea      	b.n	800aac2 <quorem+0xea>
 800aaec:	2000      	movs	r0, #0
 800aaee:	e7ee      	b.n	800aace <quorem+0xf6>

0800aaf0 <_dtoa_r>:
 800aaf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf4:	ec57 6b10 	vmov	r6, r7, d0
 800aaf8:	b095      	sub	sp, #84	; 0x54
 800aafa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aafc:	9108      	str	r1, [sp, #32]
 800aafe:	4604      	mov	r4, r0
 800ab00:	920a      	str	r2, [sp, #40]	; 0x28
 800ab02:	9311      	str	r3, [sp, #68]	; 0x44
 800ab04:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800ab08:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ab0c:	b93d      	cbnz	r5, 800ab1e <_dtoa_r+0x2e>
 800ab0e:	2010      	movs	r0, #16
 800ab10:	f000 fd48 	bl	800b5a4 <malloc>
 800ab14:	6260      	str	r0, [r4, #36]	; 0x24
 800ab16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ab1a:	6005      	str	r5, [r0, #0]
 800ab1c:	60c5      	str	r5, [r0, #12]
 800ab1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab20:	6819      	ldr	r1, [r3, #0]
 800ab22:	b151      	cbz	r1, 800ab3a <_dtoa_r+0x4a>
 800ab24:	685a      	ldr	r2, [r3, #4]
 800ab26:	604a      	str	r2, [r1, #4]
 800ab28:	2301      	movs	r3, #1
 800ab2a:	4093      	lsls	r3, r2
 800ab2c:	608b      	str	r3, [r1, #8]
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f000 fd7f 	bl	800b632 <_Bfree>
 800ab34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab36:	2200      	movs	r2, #0
 800ab38:	601a      	str	r2, [r3, #0]
 800ab3a:	1e3b      	subs	r3, r7, #0
 800ab3c:	bfb9      	ittee	lt
 800ab3e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ab42:	9303      	strlt	r3, [sp, #12]
 800ab44:	2300      	movge	r3, #0
 800ab46:	f8c8 3000 	strge.w	r3, [r8]
 800ab4a:	9d03      	ldr	r5, [sp, #12]
 800ab4c:	4bac      	ldr	r3, [pc, #688]	; (800ae00 <_dtoa_r+0x310>)
 800ab4e:	bfbc      	itt	lt
 800ab50:	2201      	movlt	r2, #1
 800ab52:	f8c8 2000 	strlt.w	r2, [r8]
 800ab56:	43ab      	bics	r3, r5
 800ab58:	d11b      	bne.n	800ab92 <_dtoa_r+0xa2>
 800ab5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ab5c:	f242 730f 	movw	r3, #9999	; 0x270f
 800ab60:	6013      	str	r3, [r2, #0]
 800ab62:	9b02      	ldr	r3, [sp, #8]
 800ab64:	b923      	cbnz	r3, 800ab70 <_dtoa_r+0x80>
 800ab66:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ab6a:	2d00      	cmp	r5, #0
 800ab6c:	f000 84dd 	beq.w	800b52a <_dtoa_r+0xa3a>
 800ab70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ab72:	b953      	cbnz	r3, 800ab8a <_dtoa_r+0x9a>
 800ab74:	4ba3      	ldr	r3, [pc, #652]	; (800ae04 <_dtoa_r+0x314>)
 800ab76:	e020      	b.n	800abba <_dtoa_r+0xca>
 800ab78:	4ba3      	ldr	r3, [pc, #652]	; (800ae08 <_dtoa_r+0x318>)
 800ab7a:	9304      	str	r3, [sp, #16]
 800ab7c:	3308      	adds	r3, #8
 800ab7e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ab80:	6013      	str	r3, [r2, #0]
 800ab82:	9804      	ldr	r0, [sp, #16]
 800ab84:	b015      	add	sp, #84	; 0x54
 800ab86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8a:	4b9e      	ldr	r3, [pc, #632]	; (800ae04 <_dtoa_r+0x314>)
 800ab8c:	9304      	str	r3, [sp, #16]
 800ab8e:	3303      	adds	r3, #3
 800ab90:	e7f5      	b.n	800ab7e <_dtoa_r+0x8e>
 800ab92:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ab9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab9e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aba2:	d10c      	bne.n	800abbe <_dtoa_r+0xce>
 800aba4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aba6:	2301      	movs	r3, #1
 800aba8:	6013      	str	r3, [r2, #0]
 800abaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800abac:	2b00      	cmp	r3, #0
 800abae:	f000 84b9 	beq.w	800b524 <_dtoa_r+0xa34>
 800abb2:	4b96      	ldr	r3, [pc, #600]	; (800ae0c <_dtoa_r+0x31c>)
 800abb4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800abb6:	6013      	str	r3, [r2, #0]
 800abb8:	3b01      	subs	r3, #1
 800abba:	9304      	str	r3, [sp, #16]
 800abbc:	e7e1      	b.n	800ab82 <_dtoa_r+0x92>
 800abbe:	a913      	add	r1, sp, #76	; 0x4c
 800abc0:	aa12      	add	r2, sp, #72	; 0x48
 800abc2:	ed9d 0b04 	vldr	d0, [sp, #16]
 800abc6:	4620      	mov	r0, r4
 800abc8:	f000 ff8b 	bl	800bae2 <__d2b>
 800abcc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800abd0:	9001      	str	r0, [sp, #4]
 800abd2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800abd4:	2e00      	cmp	r6, #0
 800abd6:	d046      	beq.n	800ac66 <_dtoa_r+0x176>
 800abd8:	9805      	ldr	r0, [sp, #20]
 800abda:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800abde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abe2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800abe6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800abea:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800abee:	2700      	movs	r7, #0
 800abf0:	ee07 aa90 	vmov	s15, sl
 800abf4:	ec43 2b16 	vmov	d6, r2, r3
 800abf8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800abfc:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800ade8 <_dtoa_r+0x2f8>
 800ac00:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800ac04:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ac08:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800adf0 <_dtoa_r+0x300>
 800ac0c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800ac10:	eeb0 7b46 	vmov.f64	d7, d6
 800ac14:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800adf8 <_dtoa_r+0x308>
 800ac18:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ac1c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ac20:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ac24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac28:	ee16 ba90 	vmov	fp, s13
 800ac2c:	d508      	bpl.n	800ac40 <_dtoa_r+0x150>
 800ac2e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ac32:	eeb4 6b47 	vcmp.f64	d6, d7
 800ac36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac3a:	bf18      	it	ne
 800ac3c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800ac40:	f1bb 0f16 	cmp.w	fp, #22
 800ac44:	d834      	bhi.n	800acb0 <_dtoa_r+0x1c0>
 800ac46:	4b72      	ldr	r3, [pc, #456]	; (800ae10 <_dtoa_r+0x320>)
 800ac48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ac4c:	ed93 7b00 	vldr	d7, [r3]
 800ac50:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ac54:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ac58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac5c:	dd01      	ble.n	800ac62 <_dtoa_r+0x172>
 800ac5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac62:	2300      	movs	r3, #0
 800ac64:	e025      	b.n	800acb2 <_dtoa_r+0x1c2>
 800ac66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac68:	eb01 0a03 	add.w	sl, r1, r3
 800ac6c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800ac70:	2b20      	cmp	r3, #32
 800ac72:	dd17      	ble.n	800aca4 <_dtoa_r+0x1b4>
 800ac74:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800ac78:	9a02      	ldr	r2, [sp, #8]
 800ac7a:	409d      	lsls	r5, r3
 800ac7c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800ac80:	fa22 f303 	lsr.w	r3, r2, r3
 800ac84:	432b      	orrs	r3, r5
 800ac86:	ee07 3a90 	vmov	s15, r3
 800ac8a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ac8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac92:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ac96:	9805      	ldr	r0, [sp, #20]
 800ac98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac9c:	2701      	movs	r7, #1
 800ac9e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800aca2:	e7a5      	b.n	800abf0 <_dtoa_r+0x100>
 800aca4:	9a02      	ldr	r2, [sp, #8]
 800aca6:	f1c3 0320 	rsb	r3, r3, #32
 800acaa:	fa02 f303 	lsl.w	r3, r2, r3
 800acae:	e7ea      	b.n	800ac86 <_dtoa_r+0x196>
 800acb0:	2301      	movs	r3, #1
 800acb2:	eba1 0a0a 	sub.w	sl, r1, sl
 800acb6:	9310      	str	r3, [sp, #64]	; 0x40
 800acb8:	f1ba 0301 	subs.w	r3, sl, #1
 800acbc:	9307      	str	r3, [sp, #28]
 800acbe:	bf43      	ittte	mi
 800acc0:	2300      	movmi	r3, #0
 800acc2:	f1ca 0a01 	rsbmi	sl, sl, #1
 800acc6:	9307      	strmi	r3, [sp, #28]
 800acc8:	f04f 0a00 	movpl.w	sl, #0
 800accc:	f1bb 0f00 	cmp.w	fp, #0
 800acd0:	db19      	blt.n	800ad06 <_dtoa_r+0x216>
 800acd2:	9b07      	ldr	r3, [sp, #28]
 800acd4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800acd8:	445b      	add	r3, fp
 800acda:	9307      	str	r3, [sp, #28]
 800acdc:	f04f 0800 	mov.w	r8, #0
 800ace0:	9b08      	ldr	r3, [sp, #32]
 800ace2:	2b09      	cmp	r3, #9
 800ace4:	d866      	bhi.n	800adb4 <_dtoa_r+0x2c4>
 800ace6:	2b05      	cmp	r3, #5
 800ace8:	bfc4      	itt	gt
 800acea:	3b04      	subgt	r3, #4
 800acec:	9308      	strgt	r3, [sp, #32]
 800acee:	9b08      	ldr	r3, [sp, #32]
 800acf0:	f1a3 0302 	sub.w	r3, r3, #2
 800acf4:	bfcc      	ite	gt
 800acf6:	2500      	movgt	r5, #0
 800acf8:	2501      	movle	r5, #1
 800acfa:	2b03      	cmp	r3, #3
 800acfc:	d866      	bhi.n	800adcc <_dtoa_r+0x2dc>
 800acfe:	e8df f003 	tbb	[pc, r3]
 800ad02:	5755      	.short	0x5755
 800ad04:	4909      	.short	0x4909
 800ad06:	2300      	movs	r3, #0
 800ad08:	ebaa 0a0b 	sub.w	sl, sl, fp
 800ad0c:	f1cb 0800 	rsb	r8, fp, #0
 800ad10:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad12:	e7e5      	b.n	800ace0 <_dtoa_r+0x1f0>
 800ad14:	2301      	movs	r3, #1
 800ad16:	9309      	str	r3, [sp, #36]	; 0x24
 800ad18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	dd59      	ble.n	800add2 <_dtoa_r+0x2e2>
 800ad1e:	9306      	str	r3, [sp, #24]
 800ad20:	4699      	mov	r9, r3
 800ad22:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ad24:	2200      	movs	r2, #0
 800ad26:	6072      	str	r2, [r6, #4]
 800ad28:	2204      	movs	r2, #4
 800ad2a:	f102 0014 	add.w	r0, r2, #20
 800ad2e:	4298      	cmp	r0, r3
 800ad30:	6871      	ldr	r1, [r6, #4]
 800ad32:	d953      	bls.n	800addc <_dtoa_r+0x2ec>
 800ad34:	4620      	mov	r0, r4
 800ad36:	f000 fc48 	bl	800b5ca <_Balloc>
 800ad3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad3c:	6030      	str	r0, [r6, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	9304      	str	r3, [sp, #16]
 800ad42:	f1b9 0f0e 	cmp.w	r9, #14
 800ad46:	f200 80c2 	bhi.w	800aece <_dtoa_r+0x3de>
 800ad4a:	2d00      	cmp	r5, #0
 800ad4c:	f000 80bf 	beq.w	800aece <_dtoa_r+0x3de>
 800ad50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad54:	f1bb 0f00 	cmp.w	fp, #0
 800ad58:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800ad5c:	f340 80e6 	ble.w	800af2c <_dtoa_r+0x43c>
 800ad60:	4a2b      	ldr	r2, [pc, #172]	; (800ae10 <_dtoa_r+0x320>)
 800ad62:	f00b 030f 	and.w	r3, fp, #15
 800ad66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad6a:	ed93 7b00 	vldr	d7, [r3]
 800ad6e:	ea4f 132b 	mov.w	r3, fp, asr #4
 800ad72:	06da      	lsls	r2, r3, #27
 800ad74:	f140 80d8 	bpl.w	800af28 <_dtoa_r+0x438>
 800ad78:	4a26      	ldr	r2, [pc, #152]	; (800ae14 <_dtoa_r+0x324>)
 800ad7a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800ad7e:	ed92 6b08 	vldr	d6, [r2, #32]
 800ad82:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800ad86:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ad8a:	f003 030f 	and.w	r3, r3, #15
 800ad8e:	2203      	movs	r2, #3
 800ad90:	4920      	ldr	r1, [pc, #128]	; (800ae14 <_dtoa_r+0x324>)
 800ad92:	e04a      	b.n	800ae2a <_dtoa_r+0x33a>
 800ad94:	2301      	movs	r3, #1
 800ad96:	9309      	str	r3, [sp, #36]	; 0x24
 800ad98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad9a:	445b      	add	r3, fp
 800ad9c:	f103 0901 	add.w	r9, r3, #1
 800ada0:	9306      	str	r3, [sp, #24]
 800ada2:	464b      	mov	r3, r9
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	bfb8      	it	lt
 800ada8:	2301      	movlt	r3, #1
 800adaa:	e7ba      	b.n	800ad22 <_dtoa_r+0x232>
 800adac:	2300      	movs	r3, #0
 800adae:	e7b2      	b.n	800ad16 <_dtoa_r+0x226>
 800adb0:	2300      	movs	r3, #0
 800adb2:	e7f0      	b.n	800ad96 <_dtoa_r+0x2a6>
 800adb4:	2501      	movs	r5, #1
 800adb6:	2300      	movs	r3, #0
 800adb8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800adbc:	f04f 33ff 	mov.w	r3, #4294967295
 800adc0:	9306      	str	r3, [sp, #24]
 800adc2:	4699      	mov	r9, r3
 800adc4:	2200      	movs	r2, #0
 800adc6:	2312      	movs	r3, #18
 800adc8:	920a      	str	r2, [sp, #40]	; 0x28
 800adca:	e7aa      	b.n	800ad22 <_dtoa_r+0x232>
 800adcc:	2301      	movs	r3, #1
 800adce:	9309      	str	r3, [sp, #36]	; 0x24
 800add0:	e7f4      	b.n	800adbc <_dtoa_r+0x2cc>
 800add2:	2301      	movs	r3, #1
 800add4:	9306      	str	r3, [sp, #24]
 800add6:	4699      	mov	r9, r3
 800add8:	461a      	mov	r2, r3
 800adda:	e7f5      	b.n	800adc8 <_dtoa_r+0x2d8>
 800addc:	3101      	adds	r1, #1
 800adde:	6071      	str	r1, [r6, #4]
 800ade0:	0052      	lsls	r2, r2, #1
 800ade2:	e7a2      	b.n	800ad2a <_dtoa_r+0x23a>
 800ade4:	f3af 8000 	nop.w
 800ade8:	636f4361 	.word	0x636f4361
 800adec:	3fd287a7 	.word	0x3fd287a7
 800adf0:	8b60c8b3 	.word	0x8b60c8b3
 800adf4:	3fc68a28 	.word	0x3fc68a28
 800adf8:	509f79fb 	.word	0x509f79fb
 800adfc:	3fd34413 	.word	0x3fd34413
 800ae00:	7ff00000 	.word	0x7ff00000
 800ae04:	08012b6f 	.word	0x08012b6f
 800ae08:	08012b66 	.word	0x08012b66
 800ae0c:	08012d95 	.word	0x08012d95
 800ae10:	08012ba0 	.word	0x08012ba0
 800ae14:	08012b78 	.word	0x08012b78
 800ae18:	07de      	lsls	r6, r3, #31
 800ae1a:	d504      	bpl.n	800ae26 <_dtoa_r+0x336>
 800ae1c:	ed91 6b00 	vldr	d6, [r1]
 800ae20:	3201      	adds	r2, #1
 800ae22:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ae26:	105b      	asrs	r3, r3, #1
 800ae28:	3108      	adds	r1, #8
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d1f4      	bne.n	800ae18 <_dtoa_r+0x328>
 800ae2e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ae32:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ae36:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f000 80a7 	beq.w	800af90 <_dtoa_r+0x4a0>
 800ae42:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ae46:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ae4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae52:	f140 809d 	bpl.w	800af90 <_dtoa_r+0x4a0>
 800ae56:	f1b9 0f00 	cmp.w	r9, #0
 800ae5a:	f000 8099 	beq.w	800af90 <_dtoa_r+0x4a0>
 800ae5e:	9b06      	ldr	r3, [sp, #24]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	dd30      	ble.n	800aec6 <_dtoa_r+0x3d6>
 800ae64:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ae68:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ae6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae70:	9d06      	ldr	r5, [sp, #24]
 800ae72:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ae76:	3201      	adds	r2, #1
 800ae78:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ae7c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ae80:	ee07 2a90 	vmov	s15, r2
 800ae84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ae88:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ae8c:	ed8d 5b02 	vstr	d5, [sp, #8]
 800ae90:	9a03      	ldr	r2, [sp, #12]
 800ae92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae96:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800ae9a:	2d00      	cmp	r5, #0
 800ae9c:	d17b      	bne.n	800af96 <_dtoa_r+0x4a6>
 800ae9e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800aea2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800aea6:	ec41 0b17 	vmov	d7, r0, r1
 800aeaa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aeae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb2:	f300 8253 	bgt.w	800b35c <_dtoa_r+0x86c>
 800aeb6:	eeb1 7b47 	vneg.f64	d7, d7
 800aeba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aec2:	f100 8249 	bmi.w	800b358 <_dtoa_r+0x868>
 800aec6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800aeca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aece:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f2c0 8119 	blt.w	800b108 <_dtoa_r+0x618>
 800aed6:	f1bb 0f0e 	cmp.w	fp, #14
 800aeda:	f300 8115 	bgt.w	800b108 <_dtoa_r+0x618>
 800aede:	4bc3      	ldr	r3, [pc, #780]	; (800b1ec <_dtoa_r+0x6fc>)
 800aee0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aee4:	ed93 6b00 	vldr	d6, [r3]
 800aee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f280 80ba 	bge.w	800b064 <_dtoa_r+0x574>
 800aef0:	f1b9 0f00 	cmp.w	r9, #0
 800aef4:	f300 80b6 	bgt.w	800b064 <_dtoa_r+0x574>
 800aef8:	f040 822d 	bne.w	800b356 <_dtoa_r+0x866>
 800aefc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800af00:	ee26 6b07 	vmul.f64	d6, d6, d7
 800af04:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800af0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af10:	464d      	mov	r5, r9
 800af12:	464f      	mov	r7, r9
 800af14:	f280 8204 	bge.w	800b320 <_dtoa_r+0x830>
 800af18:	9b04      	ldr	r3, [sp, #16]
 800af1a:	9a04      	ldr	r2, [sp, #16]
 800af1c:	1c5e      	adds	r6, r3, #1
 800af1e:	2331      	movs	r3, #49	; 0x31
 800af20:	7013      	strb	r3, [r2, #0]
 800af22:	f10b 0b01 	add.w	fp, fp, #1
 800af26:	e1ff      	b.n	800b328 <_dtoa_r+0x838>
 800af28:	2202      	movs	r2, #2
 800af2a:	e731      	b.n	800ad90 <_dtoa_r+0x2a0>
 800af2c:	d02e      	beq.n	800af8c <_dtoa_r+0x49c>
 800af2e:	f1cb 0300 	rsb	r3, fp, #0
 800af32:	4aae      	ldr	r2, [pc, #696]	; (800b1ec <_dtoa_r+0x6fc>)
 800af34:	f003 010f 	and.w	r1, r3, #15
 800af38:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800af3c:	ed92 7b00 	vldr	d7, [r2]
 800af40:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800af44:	ee26 7b07 	vmul.f64	d7, d6, d7
 800af48:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800af4c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800af50:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800af54:	49a6      	ldr	r1, [pc, #664]	; (800b1f0 <_dtoa_r+0x700>)
 800af56:	111b      	asrs	r3, r3, #4
 800af58:	2000      	movs	r0, #0
 800af5a:	2202      	movs	r2, #2
 800af5c:	b93b      	cbnz	r3, 800af6e <_dtoa_r+0x47e>
 800af5e:	2800      	cmp	r0, #0
 800af60:	f43f af6b 	beq.w	800ae3a <_dtoa_r+0x34a>
 800af64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af6c:	e765      	b.n	800ae3a <_dtoa_r+0x34a>
 800af6e:	07dd      	lsls	r5, r3, #31
 800af70:	d509      	bpl.n	800af86 <_dtoa_r+0x496>
 800af72:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800af76:	ed91 7b00 	vldr	d7, [r1]
 800af7a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800af7e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800af82:	3201      	adds	r2, #1
 800af84:	2001      	movs	r0, #1
 800af86:	105b      	asrs	r3, r3, #1
 800af88:	3108      	adds	r1, #8
 800af8a:	e7e7      	b.n	800af5c <_dtoa_r+0x46c>
 800af8c:	2202      	movs	r2, #2
 800af8e:	e754      	b.n	800ae3a <_dtoa_r+0x34a>
 800af90:	465b      	mov	r3, fp
 800af92:	464d      	mov	r5, r9
 800af94:	e770      	b.n	800ae78 <_dtoa_r+0x388>
 800af96:	4a95      	ldr	r2, [pc, #596]	; (800b1ec <_dtoa_r+0x6fc>)
 800af98:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800af9c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800afa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afa2:	ec41 0b17 	vmov	d7, r0, r1
 800afa6:	b35a      	cbz	r2, 800b000 <_dtoa_r+0x510>
 800afa8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800afac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800afb0:	9e04      	ldr	r6, [sp, #16]
 800afb2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800afb6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800afba:	ee35 7b47 	vsub.f64	d7, d5, d7
 800afbe:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800afc2:	ee14 2a90 	vmov	r2, s9
 800afc6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800afca:	3230      	adds	r2, #48	; 0x30
 800afcc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800afd0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800afd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afd8:	f806 2b01 	strb.w	r2, [r6], #1
 800afdc:	d43b      	bmi.n	800b056 <_dtoa_r+0x566>
 800afde:	ee32 5b46 	vsub.f64	d5, d2, d6
 800afe2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800afe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afea:	d472      	bmi.n	800b0d2 <_dtoa_r+0x5e2>
 800afec:	9a04      	ldr	r2, [sp, #16]
 800afee:	1ab2      	subs	r2, r6, r2
 800aff0:	4295      	cmp	r5, r2
 800aff2:	f77f af68 	ble.w	800aec6 <_dtoa_r+0x3d6>
 800aff6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800affa:	ee26 6b03 	vmul.f64	d6, d6, d3
 800affe:	e7de      	b.n	800afbe <_dtoa_r+0x4ce>
 800b000:	9a04      	ldr	r2, [sp, #16]
 800b002:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b006:	1956      	adds	r6, r2, r5
 800b008:	4611      	mov	r1, r2
 800b00a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b00e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b012:	ee14 2a90 	vmov	r2, s9
 800b016:	3230      	adds	r2, #48	; 0x30
 800b018:	f801 2b01 	strb.w	r2, [r1], #1
 800b01c:	42b1      	cmp	r1, r6
 800b01e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b022:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b026:	d11a      	bne.n	800b05e <_dtoa_r+0x56e>
 800b028:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b02c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b030:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b038:	dc4b      	bgt.n	800b0d2 <_dtoa_r+0x5e2>
 800b03a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b03e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b046:	f57f af3e 	bpl.w	800aec6 <_dtoa_r+0x3d6>
 800b04a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b04e:	2a30      	cmp	r2, #48	; 0x30
 800b050:	f106 31ff 	add.w	r1, r6, #4294967295
 800b054:	d001      	beq.n	800b05a <_dtoa_r+0x56a>
 800b056:	469b      	mov	fp, r3
 800b058:	e02a      	b.n	800b0b0 <_dtoa_r+0x5c0>
 800b05a:	460e      	mov	r6, r1
 800b05c:	e7f5      	b.n	800b04a <_dtoa_r+0x55a>
 800b05e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b062:	e7d4      	b.n	800b00e <_dtoa_r+0x51e>
 800b064:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b068:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b06c:	9e04      	ldr	r6, [sp, #16]
 800b06e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b072:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b076:	ee15 3a10 	vmov	r3, s10
 800b07a:	3330      	adds	r3, #48	; 0x30
 800b07c:	f806 3b01 	strb.w	r3, [r6], #1
 800b080:	9b04      	ldr	r3, [sp, #16]
 800b082:	1af3      	subs	r3, r6, r3
 800b084:	4599      	cmp	r9, r3
 800b086:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b08a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b08e:	d133      	bne.n	800b0f8 <_dtoa_r+0x608>
 800b090:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b094:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b09c:	dc18      	bgt.n	800b0d0 <_dtoa_r+0x5e0>
 800b09e:	eeb4 7b46 	vcmp.f64	d7, d6
 800b0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0a6:	d103      	bne.n	800b0b0 <_dtoa_r+0x5c0>
 800b0a8:	ee15 3a10 	vmov	r3, s10
 800b0ac:	07db      	lsls	r3, r3, #31
 800b0ae:	d40f      	bmi.n	800b0d0 <_dtoa_r+0x5e0>
 800b0b0:	9901      	ldr	r1, [sp, #4]
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f000 fabd 	bl	800b632 <_Bfree>
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b0bc:	7033      	strb	r3, [r6, #0]
 800b0be:	f10b 0301 	add.w	r3, fp, #1
 800b0c2:	6013      	str	r3, [r2, #0]
 800b0c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f43f ad5b 	beq.w	800ab82 <_dtoa_r+0x92>
 800b0cc:	601e      	str	r6, [r3, #0]
 800b0ce:	e558      	b.n	800ab82 <_dtoa_r+0x92>
 800b0d0:	465b      	mov	r3, fp
 800b0d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b0d6:	2939      	cmp	r1, #57	; 0x39
 800b0d8:	f106 32ff 	add.w	r2, r6, #4294967295
 800b0dc:	d106      	bne.n	800b0ec <_dtoa_r+0x5fc>
 800b0de:	9904      	ldr	r1, [sp, #16]
 800b0e0:	4291      	cmp	r1, r2
 800b0e2:	d107      	bne.n	800b0f4 <_dtoa_r+0x604>
 800b0e4:	2230      	movs	r2, #48	; 0x30
 800b0e6:	700a      	strb	r2, [r1, #0]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	460a      	mov	r2, r1
 800b0ec:	7811      	ldrb	r1, [r2, #0]
 800b0ee:	3101      	adds	r1, #1
 800b0f0:	7011      	strb	r1, [r2, #0]
 800b0f2:	e7b0      	b.n	800b056 <_dtoa_r+0x566>
 800b0f4:	4616      	mov	r6, r2
 800b0f6:	e7ec      	b.n	800b0d2 <_dtoa_r+0x5e2>
 800b0f8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b0fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b104:	d1b3      	bne.n	800b06e <_dtoa_r+0x57e>
 800b106:	e7d3      	b.n	800b0b0 <_dtoa_r+0x5c0>
 800b108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b10a:	2a00      	cmp	r2, #0
 800b10c:	f000 808d 	beq.w	800b22a <_dtoa_r+0x73a>
 800b110:	9a08      	ldr	r2, [sp, #32]
 800b112:	2a01      	cmp	r2, #1
 800b114:	dc72      	bgt.n	800b1fc <_dtoa_r+0x70c>
 800b116:	2f00      	cmp	r7, #0
 800b118:	d06c      	beq.n	800b1f4 <_dtoa_r+0x704>
 800b11a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b11e:	4645      	mov	r5, r8
 800b120:	4656      	mov	r6, sl
 800b122:	9a07      	ldr	r2, [sp, #28]
 800b124:	2101      	movs	r1, #1
 800b126:	441a      	add	r2, r3
 800b128:	4620      	mov	r0, r4
 800b12a:	449a      	add	sl, r3
 800b12c:	9207      	str	r2, [sp, #28]
 800b12e:	f000 fb20 	bl	800b772 <__i2b>
 800b132:	4607      	mov	r7, r0
 800b134:	2e00      	cmp	r6, #0
 800b136:	dd0b      	ble.n	800b150 <_dtoa_r+0x660>
 800b138:	9b07      	ldr	r3, [sp, #28]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	dd08      	ble.n	800b150 <_dtoa_r+0x660>
 800b13e:	42b3      	cmp	r3, r6
 800b140:	9a07      	ldr	r2, [sp, #28]
 800b142:	bfa8      	it	ge
 800b144:	4633      	movge	r3, r6
 800b146:	ebaa 0a03 	sub.w	sl, sl, r3
 800b14a:	1af6      	subs	r6, r6, r3
 800b14c:	1ad3      	subs	r3, r2, r3
 800b14e:	9307      	str	r3, [sp, #28]
 800b150:	f1b8 0f00 	cmp.w	r8, #0
 800b154:	d01d      	beq.n	800b192 <_dtoa_r+0x6a2>
 800b156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d06a      	beq.n	800b232 <_dtoa_r+0x742>
 800b15c:	b18d      	cbz	r5, 800b182 <_dtoa_r+0x692>
 800b15e:	4639      	mov	r1, r7
 800b160:	462a      	mov	r2, r5
 800b162:	4620      	mov	r0, r4
 800b164:	f000 fba4 	bl	800b8b0 <__pow5mult>
 800b168:	9a01      	ldr	r2, [sp, #4]
 800b16a:	4601      	mov	r1, r0
 800b16c:	4607      	mov	r7, r0
 800b16e:	4620      	mov	r0, r4
 800b170:	f000 fb08 	bl	800b784 <__multiply>
 800b174:	9901      	ldr	r1, [sp, #4]
 800b176:	900c      	str	r0, [sp, #48]	; 0x30
 800b178:	4620      	mov	r0, r4
 800b17a:	f000 fa5a 	bl	800b632 <_Bfree>
 800b17e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b180:	9301      	str	r3, [sp, #4]
 800b182:	ebb8 0205 	subs.w	r2, r8, r5
 800b186:	d004      	beq.n	800b192 <_dtoa_r+0x6a2>
 800b188:	9901      	ldr	r1, [sp, #4]
 800b18a:	4620      	mov	r0, r4
 800b18c:	f000 fb90 	bl	800b8b0 <__pow5mult>
 800b190:	9001      	str	r0, [sp, #4]
 800b192:	2101      	movs	r1, #1
 800b194:	4620      	mov	r0, r4
 800b196:	f000 faec 	bl	800b772 <__i2b>
 800b19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b19c:	4605      	mov	r5, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	f000 81ca 	beq.w	800b538 <_dtoa_r+0xa48>
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	4601      	mov	r1, r0
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f000 fb81 	bl	800b8b0 <__pow5mult>
 800b1ae:	9b08      	ldr	r3, [sp, #32]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	4605      	mov	r5, r0
 800b1b4:	dc44      	bgt.n	800b240 <_dtoa_r+0x750>
 800b1b6:	9b02      	ldr	r3, [sp, #8]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d13c      	bne.n	800b236 <_dtoa_r+0x746>
 800b1bc:	9b03      	ldr	r3, [sp, #12]
 800b1be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d137      	bne.n	800b236 <_dtoa_r+0x746>
 800b1c6:	9b03      	ldr	r3, [sp, #12]
 800b1c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1cc:	0d1b      	lsrs	r3, r3, #20
 800b1ce:	051b      	lsls	r3, r3, #20
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d033      	beq.n	800b23c <_dtoa_r+0x74c>
 800b1d4:	9b07      	ldr	r3, [sp, #28]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	f10a 0a01 	add.w	sl, sl, #1
 800b1dc:	9307      	str	r3, [sp, #28]
 800b1de:	f04f 0801 	mov.w	r8, #1
 800b1e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1e4:	bb73      	cbnz	r3, 800b244 <_dtoa_r+0x754>
 800b1e6:	2001      	movs	r0, #1
 800b1e8:	e034      	b.n	800b254 <_dtoa_r+0x764>
 800b1ea:	bf00      	nop
 800b1ec:	08012ba0 	.word	0x08012ba0
 800b1f0:	08012b78 	.word	0x08012b78
 800b1f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b1fa:	e790      	b.n	800b11e <_dtoa_r+0x62e>
 800b1fc:	f109 35ff 	add.w	r5, r9, #4294967295
 800b200:	45a8      	cmp	r8, r5
 800b202:	bfbf      	itttt	lt
 800b204:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800b206:	eba5 0808 	sublt.w	r8, r5, r8
 800b20a:	4443      	addlt	r3, r8
 800b20c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800b20e:	bfb6      	itet	lt
 800b210:	46a8      	movlt	r8, r5
 800b212:	eba8 0505 	subge.w	r5, r8, r5
 800b216:	2500      	movlt	r5, #0
 800b218:	f1b9 0f00 	cmp.w	r9, #0
 800b21c:	bfb9      	ittee	lt
 800b21e:	ebaa 0609 	sublt.w	r6, sl, r9
 800b222:	2300      	movlt	r3, #0
 800b224:	4656      	movge	r6, sl
 800b226:	464b      	movge	r3, r9
 800b228:	e77b      	b.n	800b122 <_dtoa_r+0x632>
 800b22a:	4645      	mov	r5, r8
 800b22c:	4656      	mov	r6, sl
 800b22e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b230:	e780      	b.n	800b134 <_dtoa_r+0x644>
 800b232:	4642      	mov	r2, r8
 800b234:	e7a8      	b.n	800b188 <_dtoa_r+0x698>
 800b236:	f04f 0800 	mov.w	r8, #0
 800b23a:	e7d2      	b.n	800b1e2 <_dtoa_r+0x6f2>
 800b23c:	4698      	mov	r8, r3
 800b23e:	e7d0      	b.n	800b1e2 <_dtoa_r+0x6f2>
 800b240:	f04f 0800 	mov.w	r8, #0
 800b244:	692b      	ldr	r3, [r5, #16]
 800b246:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b24a:	6918      	ldr	r0, [r3, #16]
 800b24c:	f000 fa43 	bl	800b6d6 <__hi0bits>
 800b250:	f1c0 0020 	rsb	r0, r0, #32
 800b254:	9b07      	ldr	r3, [sp, #28]
 800b256:	4418      	add	r0, r3
 800b258:	f010 001f 	ands.w	r0, r0, #31
 800b25c:	d047      	beq.n	800b2ee <_dtoa_r+0x7fe>
 800b25e:	f1c0 0320 	rsb	r3, r0, #32
 800b262:	2b04      	cmp	r3, #4
 800b264:	dd3b      	ble.n	800b2de <_dtoa_r+0x7ee>
 800b266:	9b07      	ldr	r3, [sp, #28]
 800b268:	f1c0 001c 	rsb	r0, r0, #28
 800b26c:	4482      	add	sl, r0
 800b26e:	4406      	add	r6, r0
 800b270:	4403      	add	r3, r0
 800b272:	9307      	str	r3, [sp, #28]
 800b274:	f1ba 0f00 	cmp.w	sl, #0
 800b278:	dd05      	ble.n	800b286 <_dtoa_r+0x796>
 800b27a:	4652      	mov	r2, sl
 800b27c:	9901      	ldr	r1, [sp, #4]
 800b27e:	4620      	mov	r0, r4
 800b280:	f000 fb64 	bl	800b94c <__lshift>
 800b284:	9001      	str	r0, [sp, #4]
 800b286:	9b07      	ldr	r3, [sp, #28]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	dd05      	ble.n	800b298 <_dtoa_r+0x7a8>
 800b28c:	4629      	mov	r1, r5
 800b28e:	461a      	mov	r2, r3
 800b290:	4620      	mov	r0, r4
 800b292:	f000 fb5b 	bl	800b94c <__lshift>
 800b296:	4605      	mov	r5, r0
 800b298:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b29a:	b353      	cbz	r3, 800b2f2 <_dtoa_r+0x802>
 800b29c:	4629      	mov	r1, r5
 800b29e:	9801      	ldr	r0, [sp, #4]
 800b2a0:	f000 fba8 	bl	800b9f4 <__mcmp>
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	da24      	bge.n	800b2f2 <_dtoa_r+0x802>
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	220a      	movs	r2, #10
 800b2ac:	9901      	ldr	r1, [sp, #4]
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	f000 f9d6 	bl	800b660 <__multadd>
 800b2b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2b6:	9001      	str	r0, [sp, #4]
 800b2b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f000 8142 	beq.w	800b546 <_dtoa_r+0xa56>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	4639      	mov	r1, r7
 800b2c6:	220a      	movs	r2, #10
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	f000 f9c9 	bl	800b660 <__multadd>
 800b2ce:	9b06      	ldr	r3, [sp, #24]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	4607      	mov	r7, r0
 800b2d4:	dc4b      	bgt.n	800b36e <_dtoa_r+0x87e>
 800b2d6:	9b08      	ldr	r3, [sp, #32]
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	dd48      	ble.n	800b36e <_dtoa_r+0x87e>
 800b2dc:	e011      	b.n	800b302 <_dtoa_r+0x812>
 800b2de:	d0c9      	beq.n	800b274 <_dtoa_r+0x784>
 800b2e0:	9a07      	ldr	r2, [sp, #28]
 800b2e2:	331c      	adds	r3, #28
 800b2e4:	441a      	add	r2, r3
 800b2e6:	449a      	add	sl, r3
 800b2e8:	441e      	add	r6, r3
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	e7c1      	b.n	800b272 <_dtoa_r+0x782>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	e7f6      	b.n	800b2e0 <_dtoa_r+0x7f0>
 800b2f2:	f1b9 0f00 	cmp.w	r9, #0
 800b2f6:	dc34      	bgt.n	800b362 <_dtoa_r+0x872>
 800b2f8:	9b08      	ldr	r3, [sp, #32]
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	dd31      	ble.n	800b362 <_dtoa_r+0x872>
 800b2fe:	f8cd 9018 	str.w	r9, [sp, #24]
 800b302:	9b06      	ldr	r3, [sp, #24]
 800b304:	b963      	cbnz	r3, 800b320 <_dtoa_r+0x830>
 800b306:	4629      	mov	r1, r5
 800b308:	2205      	movs	r2, #5
 800b30a:	4620      	mov	r0, r4
 800b30c:	f000 f9a8 	bl	800b660 <__multadd>
 800b310:	4601      	mov	r1, r0
 800b312:	4605      	mov	r5, r0
 800b314:	9801      	ldr	r0, [sp, #4]
 800b316:	f000 fb6d 	bl	800b9f4 <__mcmp>
 800b31a:	2800      	cmp	r0, #0
 800b31c:	f73f adfc 	bgt.w	800af18 <_dtoa_r+0x428>
 800b320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b322:	9e04      	ldr	r6, [sp, #16]
 800b324:	ea6f 0b03 	mvn.w	fp, r3
 800b328:	f04f 0900 	mov.w	r9, #0
 800b32c:	4629      	mov	r1, r5
 800b32e:	4620      	mov	r0, r4
 800b330:	f000 f97f 	bl	800b632 <_Bfree>
 800b334:	2f00      	cmp	r7, #0
 800b336:	f43f aebb 	beq.w	800b0b0 <_dtoa_r+0x5c0>
 800b33a:	f1b9 0f00 	cmp.w	r9, #0
 800b33e:	d005      	beq.n	800b34c <_dtoa_r+0x85c>
 800b340:	45b9      	cmp	r9, r7
 800b342:	d003      	beq.n	800b34c <_dtoa_r+0x85c>
 800b344:	4649      	mov	r1, r9
 800b346:	4620      	mov	r0, r4
 800b348:	f000 f973 	bl	800b632 <_Bfree>
 800b34c:	4639      	mov	r1, r7
 800b34e:	4620      	mov	r0, r4
 800b350:	f000 f96f 	bl	800b632 <_Bfree>
 800b354:	e6ac      	b.n	800b0b0 <_dtoa_r+0x5c0>
 800b356:	2500      	movs	r5, #0
 800b358:	462f      	mov	r7, r5
 800b35a:	e7e1      	b.n	800b320 <_dtoa_r+0x830>
 800b35c:	469b      	mov	fp, r3
 800b35e:	462f      	mov	r7, r5
 800b360:	e5da      	b.n	800af18 <_dtoa_r+0x428>
 800b362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b364:	f8cd 9018 	str.w	r9, [sp, #24]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f000 80f3 	beq.w	800b554 <_dtoa_r+0xa64>
 800b36e:	2e00      	cmp	r6, #0
 800b370:	dd05      	ble.n	800b37e <_dtoa_r+0x88e>
 800b372:	4639      	mov	r1, r7
 800b374:	4632      	mov	r2, r6
 800b376:	4620      	mov	r0, r4
 800b378:	f000 fae8 	bl	800b94c <__lshift>
 800b37c:	4607      	mov	r7, r0
 800b37e:	f1b8 0f00 	cmp.w	r8, #0
 800b382:	d04c      	beq.n	800b41e <_dtoa_r+0x92e>
 800b384:	6879      	ldr	r1, [r7, #4]
 800b386:	4620      	mov	r0, r4
 800b388:	f000 f91f 	bl	800b5ca <_Balloc>
 800b38c:	693a      	ldr	r2, [r7, #16]
 800b38e:	3202      	adds	r2, #2
 800b390:	4606      	mov	r6, r0
 800b392:	0092      	lsls	r2, r2, #2
 800b394:	f107 010c 	add.w	r1, r7, #12
 800b398:	300c      	adds	r0, #12
 800b39a:	f000 f90b 	bl	800b5b4 <memcpy>
 800b39e:	2201      	movs	r2, #1
 800b3a0:	4631      	mov	r1, r6
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	f000 fad2 	bl	800b94c <__lshift>
 800b3a8:	9b02      	ldr	r3, [sp, #8]
 800b3aa:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b3ae:	f003 0301 	and.w	r3, r3, #1
 800b3b2:	46b9      	mov	r9, r7
 800b3b4:	9307      	str	r3, [sp, #28]
 800b3b6:	4607      	mov	r7, r0
 800b3b8:	4629      	mov	r1, r5
 800b3ba:	9801      	ldr	r0, [sp, #4]
 800b3bc:	f7ff fb0c 	bl	800a9d8 <quorem>
 800b3c0:	4649      	mov	r1, r9
 800b3c2:	4606      	mov	r6, r0
 800b3c4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b3c8:	9801      	ldr	r0, [sp, #4]
 800b3ca:	f000 fb13 	bl	800b9f4 <__mcmp>
 800b3ce:	463a      	mov	r2, r7
 800b3d0:	9002      	str	r0, [sp, #8]
 800b3d2:	4629      	mov	r1, r5
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f000 fb27 	bl	800ba28 <__mdiff>
 800b3da:	68c3      	ldr	r3, [r0, #12]
 800b3dc:	4602      	mov	r2, r0
 800b3de:	bb03      	cbnz	r3, 800b422 <_dtoa_r+0x932>
 800b3e0:	4601      	mov	r1, r0
 800b3e2:	9009      	str	r0, [sp, #36]	; 0x24
 800b3e4:	9801      	ldr	r0, [sp, #4]
 800b3e6:	f000 fb05 	bl	800b9f4 <__mcmp>
 800b3ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	4611      	mov	r1, r2
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f4:	f000 f91d 	bl	800b632 <_Bfree>
 800b3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3fa:	b9a3      	cbnz	r3, 800b426 <_dtoa_r+0x936>
 800b3fc:	9a08      	ldr	r2, [sp, #32]
 800b3fe:	b992      	cbnz	r2, 800b426 <_dtoa_r+0x936>
 800b400:	9a07      	ldr	r2, [sp, #28]
 800b402:	b982      	cbnz	r2, 800b426 <_dtoa_r+0x936>
 800b404:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b408:	d029      	beq.n	800b45e <_dtoa_r+0x96e>
 800b40a:	9b02      	ldr	r3, [sp, #8]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	dd01      	ble.n	800b414 <_dtoa_r+0x924>
 800b410:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800b414:	f10a 0601 	add.w	r6, sl, #1
 800b418:	f88a 8000 	strb.w	r8, [sl]
 800b41c:	e786      	b.n	800b32c <_dtoa_r+0x83c>
 800b41e:	4638      	mov	r0, r7
 800b420:	e7c2      	b.n	800b3a8 <_dtoa_r+0x8b8>
 800b422:	2301      	movs	r3, #1
 800b424:	e7e3      	b.n	800b3ee <_dtoa_r+0x8fe>
 800b426:	9a02      	ldr	r2, [sp, #8]
 800b428:	2a00      	cmp	r2, #0
 800b42a:	db04      	blt.n	800b436 <_dtoa_r+0x946>
 800b42c:	d124      	bne.n	800b478 <_dtoa_r+0x988>
 800b42e:	9a08      	ldr	r2, [sp, #32]
 800b430:	bb12      	cbnz	r2, 800b478 <_dtoa_r+0x988>
 800b432:	9a07      	ldr	r2, [sp, #28]
 800b434:	bb02      	cbnz	r2, 800b478 <_dtoa_r+0x988>
 800b436:	2b00      	cmp	r3, #0
 800b438:	ddec      	ble.n	800b414 <_dtoa_r+0x924>
 800b43a:	2201      	movs	r2, #1
 800b43c:	9901      	ldr	r1, [sp, #4]
 800b43e:	4620      	mov	r0, r4
 800b440:	f000 fa84 	bl	800b94c <__lshift>
 800b444:	4629      	mov	r1, r5
 800b446:	9001      	str	r0, [sp, #4]
 800b448:	f000 fad4 	bl	800b9f4 <__mcmp>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	dc03      	bgt.n	800b458 <_dtoa_r+0x968>
 800b450:	d1e0      	bne.n	800b414 <_dtoa_r+0x924>
 800b452:	f018 0f01 	tst.w	r8, #1
 800b456:	d0dd      	beq.n	800b414 <_dtoa_r+0x924>
 800b458:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b45c:	d1d8      	bne.n	800b410 <_dtoa_r+0x920>
 800b45e:	2339      	movs	r3, #57	; 0x39
 800b460:	f10a 0601 	add.w	r6, sl, #1
 800b464:	f88a 3000 	strb.w	r3, [sl]
 800b468:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b46c:	2b39      	cmp	r3, #57	; 0x39
 800b46e:	f106 32ff 	add.w	r2, r6, #4294967295
 800b472:	d04c      	beq.n	800b50e <_dtoa_r+0xa1e>
 800b474:	3301      	adds	r3, #1
 800b476:	e051      	b.n	800b51c <_dtoa_r+0xa2c>
 800b478:	2b00      	cmp	r3, #0
 800b47a:	f10a 0601 	add.w	r6, sl, #1
 800b47e:	dd05      	ble.n	800b48c <_dtoa_r+0x99c>
 800b480:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b484:	d0eb      	beq.n	800b45e <_dtoa_r+0x96e>
 800b486:	f108 0801 	add.w	r8, r8, #1
 800b48a:	e7c5      	b.n	800b418 <_dtoa_r+0x928>
 800b48c:	9b04      	ldr	r3, [sp, #16]
 800b48e:	9a06      	ldr	r2, [sp, #24]
 800b490:	f806 8c01 	strb.w	r8, [r6, #-1]
 800b494:	1af3      	subs	r3, r6, r3
 800b496:	4293      	cmp	r3, r2
 800b498:	d021      	beq.n	800b4de <_dtoa_r+0x9ee>
 800b49a:	2300      	movs	r3, #0
 800b49c:	220a      	movs	r2, #10
 800b49e:	9901      	ldr	r1, [sp, #4]
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f000 f8dd 	bl	800b660 <__multadd>
 800b4a6:	45b9      	cmp	r9, r7
 800b4a8:	9001      	str	r0, [sp, #4]
 800b4aa:	f04f 0300 	mov.w	r3, #0
 800b4ae:	f04f 020a 	mov.w	r2, #10
 800b4b2:	4649      	mov	r1, r9
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	d105      	bne.n	800b4c4 <_dtoa_r+0x9d4>
 800b4b8:	f000 f8d2 	bl	800b660 <__multadd>
 800b4bc:	4681      	mov	r9, r0
 800b4be:	4607      	mov	r7, r0
 800b4c0:	46b2      	mov	sl, r6
 800b4c2:	e779      	b.n	800b3b8 <_dtoa_r+0x8c8>
 800b4c4:	f000 f8cc 	bl	800b660 <__multadd>
 800b4c8:	4639      	mov	r1, r7
 800b4ca:	4681      	mov	r9, r0
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	220a      	movs	r2, #10
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f000 f8c5 	bl	800b660 <__multadd>
 800b4d6:	4607      	mov	r7, r0
 800b4d8:	e7f2      	b.n	800b4c0 <_dtoa_r+0x9d0>
 800b4da:	f04f 0900 	mov.w	r9, #0
 800b4de:	2201      	movs	r2, #1
 800b4e0:	9901      	ldr	r1, [sp, #4]
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 fa32 	bl	800b94c <__lshift>
 800b4e8:	4629      	mov	r1, r5
 800b4ea:	9001      	str	r0, [sp, #4]
 800b4ec:	f000 fa82 	bl	800b9f4 <__mcmp>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	dcb9      	bgt.n	800b468 <_dtoa_r+0x978>
 800b4f4:	d102      	bne.n	800b4fc <_dtoa_r+0xa0c>
 800b4f6:	f018 0f01 	tst.w	r8, #1
 800b4fa:	d1b5      	bne.n	800b468 <_dtoa_r+0x978>
 800b4fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b500:	2b30      	cmp	r3, #48	; 0x30
 800b502:	f106 32ff 	add.w	r2, r6, #4294967295
 800b506:	f47f af11 	bne.w	800b32c <_dtoa_r+0x83c>
 800b50a:	4616      	mov	r6, r2
 800b50c:	e7f6      	b.n	800b4fc <_dtoa_r+0xa0c>
 800b50e:	9b04      	ldr	r3, [sp, #16]
 800b510:	4293      	cmp	r3, r2
 800b512:	d105      	bne.n	800b520 <_dtoa_r+0xa30>
 800b514:	9a04      	ldr	r2, [sp, #16]
 800b516:	f10b 0b01 	add.w	fp, fp, #1
 800b51a:	2331      	movs	r3, #49	; 0x31
 800b51c:	7013      	strb	r3, [r2, #0]
 800b51e:	e705      	b.n	800b32c <_dtoa_r+0x83c>
 800b520:	4616      	mov	r6, r2
 800b522:	e7a1      	b.n	800b468 <_dtoa_r+0x978>
 800b524:	4b16      	ldr	r3, [pc, #88]	; (800b580 <_dtoa_r+0xa90>)
 800b526:	f7ff bb48 	b.w	800abba <_dtoa_r+0xca>
 800b52a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	f47f ab23 	bne.w	800ab78 <_dtoa_r+0x88>
 800b532:	4b14      	ldr	r3, [pc, #80]	; (800b584 <_dtoa_r+0xa94>)
 800b534:	f7ff bb41 	b.w	800abba <_dtoa_r+0xca>
 800b538:	9b08      	ldr	r3, [sp, #32]
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	f77f ae3b 	ble.w	800b1b6 <_dtoa_r+0x6c6>
 800b540:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b544:	e64f      	b.n	800b1e6 <_dtoa_r+0x6f6>
 800b546:	9b06      	ldr	r3, [sp, #24]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	dc03      	bgt.n	800b554 <_dtoa_r+0xa64>
 800b54c:	9b08      	ldr	r3, [sp, #32]
 800b54e:	2b02      	cmp	r3, #2
 800b550:	f73f aed7 	bgt.w	800b302 <_dtoa_r+0x812>
 800b554:	9e04      	ldr	r6, [sp, #16]
 800b556:	9801      	ldr	r0, [sp, #4]
 800b558:	4629      	mov	r1, r5
 800b55a:	f7ff fa3d 	bl	800a9d8 <quorem>
 800b55e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b562:	f806 8b01 	strb.w	r8, [r6], #1
 800b566:	9b04      	ldr	r3, [sp, #16]
 800b568:	9a06      	ldr	r2, [sp, #24]
 800b56a:	1af3      	subs	r3, r6, r3
 800b56c:	429a      	cmp	r2, r3
 800b56e:	ddb4      	ble.n	800b4da <_dtoa_r+0x9ea>
 800b570:	2300      	movs	r3, #0
 800b572:	220a      	movs	r2, #10
 800b574:	9901      	ldr	r1, [sp, #4]
 800b576:	4620      	mov	r0, r4
 800b578:	f000 f872 	bl	800b660 <__multadd>
 800b57c:	9001      	str	r0, [sp, #4]
 800b57e:	e7ea      	b.n	800b556 <_dtoa_r+0xa66>
 800b580:	08012d94 	.word	0x08012d94
 800b584:	08012b66 	.word	0x08012b66

0800b588 <_localeconv_r>:
 800b588:	4b04      	ldr	r3, [pc, #16]	; (800b59c <_localeconv_r+0x14>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	6a18      	ldr	r0, [r3, #32]
 800b58e:	4b04      	ldr	r3, [pc, #16]	; (800b5a0 <_localeconv_r+0x18>)
 800b590:	2800      	cmp	r0, #0
 800b592:	bf08      	it	eq
 800b594:	4618      	moveq	r0, r3
 800b596:	30f0      	adds	r0, #240	; 0xf0
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	24000204 	.word	0x24000204
 800b5a0:	24000268 	.word	0x24000268

0800b5a4 <malloc>:
 800b5a4:	4b02      	ldr	r3, [pc, #8]	; (800b5b0 <malloc+0xc>)
 800b5a6:	4601      	mov	r1, r0
 800b5a8:	6818      	ldr	r0, [r3, #0]
 800b5aa:	f000 bb45 	b.w	800bc38 <_malloc_r>
 800b5ae:	bf00      	nop
 800b5b0:	24000204 	.word	0x24000204

0800b5b4 <memcpy>:
 800b5b4:	b510      	push	{r4, lr}
 800b5b6:	1e43      	subs	r3, r0, #1
 800b5b8:	440a      	add	r2, r1
 800b5ba:	4291      	cmp	r1, r2
 800b5bc:	d100      	bne.n	800b5c0 <memcpy+0xc>
 800b5be:	bd10      	pop	{r4, pc}
 800b5c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5c8:	e7f7      	b.n	800b5ba <memcpy+0x6>

0800b5ca <_Balloc>:
 800b5ca:	b570      	push	{r4, r5, r6, lr}
 800b5cc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	460e      	mov	r6, r1
 800b5d2:	b93d      	cbnz	r5, 800b5e4 <_Balloc+0x1a>
 800b5d4:	2010      	movs	r0, #16
 800b5d6:	f7ff ffe5 	bl	800b5a4 <malloc>
 800b5da:	6260      	str	r0, [r4, #36]	; 0x24
 800b5dc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b5e0:	6005      	str	r5, [r0, #0]
 800b5e2:	60c5      	str	r5, [r0, #12]
 800b5e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b5e6:	68eb      	ldr	r3, [r5, #12]
 800b5e8:	b183      	cbz	r3, 800b60c <_Balloc+0x42>
 800b5ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b5f2:	b9b8      	cbnz	r0, 800b624 <_Balloc+0x5a>
 800b5f4:	2101      	movs	r1, #1
 800b5f6:	fa01 f506 	lsl.w	r5, r1, r6
 800b5fa:	1d6a      	adds	r2, r5, #5
 800b5fc:	0092      	lsls	r2, r2, #2
 800b5fe:	4620      	mov	r0, r4
 800b600:	f000 fabe 	bl	800bb80 <_calloc_r>
 800b604:	b160      	cbz	r0, 800b620 <_Balloc+0x56>
 800b606:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b60a:	e00e      	b.n	800b62a <_Balloc+0x60>
 800b60c:	2221      	movs	r2, #33	; 0x21
 800b60e:	2104      	movs	r1, #4
 800b610:	4620      	mov	r0, r4
 800b612:	f000 fab5 	bl	800bb80 <_calloc_r>
 800b616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b618:	60e8      	str	r0, [r5, #12]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d1e4      	bne.n	800b5ea <_Balloc+0x20>
 800b620:	2000      	movs	r0, #0
 800b622:	bd70      	pop	{r4, r5, r6, pc}
 800b624:	6802      	ldr	r2, [r0, #0]
 800b626:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b62a:	2300      	movs	r3, #0
 800b62c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b630:	e7f7      	b.n	800b622 <_Balloc+0x58>

0800b632 <_Bfree>:
 800b632:	b570      	push	{r4, r5, r6, lr}
 800b634:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b636:	4606      	mov	r6, r0
 800b638:	460d      	mov	r5, r1
 800b63a:	b93c      	cbnz	r4, 800b64c <_Bfree+0x1a>
 800b63c:	2010      	movs	r0, #16
 800b63e:	f7ff ffb1 	bl	800b5a4 <malloc>
 800b642:	6270      	str	r0, [r6, #36]	; 0x24
 800b644:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b648:	6004      	str	r4, [r0, #0]
 800b64a:	60c4      	str	r4, [r0, #12]
 800b64c:	b13d      	cbz	r5, 800b65e <_Bfree+0x2c>
 800b64e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b650:	686a      	ldr	r2, [r5, #4]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b658:	6029      	str	r1, [r5, #0]
 800b65a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b65e:	bd70      	pop	{r4, r5, r6, pc}

0800b660 <__multadd>:
 800b660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b664:	690d      	ldr	r5, [r1, #16]
 800b666:	461f      	mov	r7, r3
 800b668:	4606      	mov	r6, r0
 800b66a:	460c      	mov	r4, r1
 800b66c:	f101 0c14 	add.w	ip, r1, #20
 800b670:	2300      	movs	r3, #0
 800b672:	f8dc 0000 	ldr.w	r0, [ip]
 800b676:	b281      	uxth	r1, r0
 800b678:	fb02 7101 	mla	r1, r2, r1, r7
 800b67c:	0c0f      	lsrs	r7, r1, #16
 800b67e:	0c00      	lsrs	r0, r0, #16
 800b680:	fb02 7000 	mla	r0, r2, r0, r7
 800b684:	b289      	uxth	r1, r1
 800b686:	3301      	adds	r3, #1
 800b688:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b68c:	429d      	cmp	r5, r3
 800b68e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b692:	f84c 1b04 	str.w	r1, [ip], #4
 800b696:	dcec      	bgt.n	800b672 <__multadd+0x12>
 800b698:	b1d7      	cbz	r7, 800b6d0 <__multadd+0x70>
 800b69a:	68a3      	ldr	r3, [r4, #8]
 800b69c:	42ab      	cmp	r3, r5
 800b69e:	dc12      	bgt.n	800b6c6 <__multadd+0x66>
 800b6a0:	6861      	ldr	r1, [r4, #4]
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	3101      	adds	r1, #1
 800b6a6:	f7ff ff90 	bl	800b5ca <_Balloc>
 800b6aa:	6922      	ldr	r2, [r4, #16]
 800b6ac:	3202      	adds	r2, #2
 800b6ae:	f104 010c 	add.w	r1, r4, #12
 800b6b2:	4680      	mov	r8, r0
 800b6b4:	0092      	lsls	r2, r2, #2
 800b6b6:	300c      	adds	r0, #12
 800b6b8:	f7ff ff7c 	bl	800b5b4 <memcpy>
 800b6bc:	4621      	mov	r1, r4
 800b6be:	4630      	mov	r0, r6
 800b6c0:	f7ff ffb7 	bl	800b632 <_Bfree>
 800b6c4:	4644      	mov	r4, r8
 800b6c6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6ca:	3501      	adds	r5, #1
 800b6cc:	615f      	str	r7, [r3, #20]
 800b6ce:	6125      	str	r5, [r4, #16]
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b6d6 <__hi0bits>:
 800b6d6:	0c02      	lsrs	r2, r0, #16
 800b6d8:	0412      	lsls	r2, r2, #16
 800b6da:	4603      	mov	r3, r0
 800b6dc:	b9b2      	cbnz	r2, 800b70c <__hi0bits+0x36>
 800b6de:	0403      	lsls	r3, r0, #16
 800b6e0:	2010      	movs	r0, #16
 800b6e2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b6e6:	bf04      	itt	eq
 800b6e8:	021b      	lsleq	r3, r3, #8
 800b6ea:	3008      	addeq	r0, #8
 800b6ec:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b6f0:	bf04      	itt	eq
 800b6f2:	011b      	lsleq	r3, r3, #4
 800b6f4:	3004      	addeq	r0, #4
 800b6f6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b6fa:	bf04      	itt	eq
 800b6fc:	009b      	lsleq	r3, r3, #2
 800b6fe:	3002      	addeq	r0, #2
 800b700:	2b00      	cmp	r3, #0
 800b702:	db06      	blt.n	800b712 <__hi0bits+0x3c>
 800b704:	005b      	lsls	r3, r3, #1
 800b706:	d503      	bpl.n	800b710 <__hi0bits+0x3a>
 800b708:	3001      	adds	r0, #1
 800b70a:	4770      	bx	lr
 800b70c:	2000      	movs	r0, #0
 800b70e:	e7e8      	b.n	800b6e2 <__hi0bits+0xc>
 800b710:	2020      	movs	r0, #32
 800b712:	4770      	bx	lr

0800b714 <__lo0bits>:
 800b714:	6803      	ldr	r3, [r0, #0]
 800b716:	f013 0207 	ands.w	r2, r3, #7
 800b71a:	4601      	mov	r1, r0
 800b71c:	d00b      	beq.n	800b736 <__lo0bits+0x22>
 800b71e:	07da      	lsls	r2, r3, #31
 800b720:	d423      	bmi.n	800b76a <__lo0bits+0x56>
 800b722:	0798      	lsls	r0, r3, #30
 800b724:	bf49      	itett	mi
 800b726:	085b      	lsrmi	r3, r3, #1
 800b728:	089b      	lsrpl	r3, r3, #2
 800b72a:	2001      	movmi	r0, #1
 800b72c:	600b      	strmi	r3, [r1, #0]
 800b72e:	bf5c      	itt	pl
 800b730:	600b      	strpl	r3, [r1, #0]
 800b732:	2002      	movpl	r0, #2
 800b734:	4770      	bx	lr
 800b736:	b298      	uxth	r0, r3
 800b738:	b9a8      	cbnz	r0, 800b766 <__lo0bits+0x52>
 800b73a:	0c1b      	lsrs	r3, r3, #16
 800b73c:	2010      	movs	r0, #16
 800b73e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b742:	bf04      	itt	eq
 800b744:	0a1b      	lsreq	r3, r3, #8
 800b746:	3008      	addeq	r0, #8
 800b748:	071a      	lsls	r2, r3, #28
 800b74a:	bf04      	itt	eq
 800b74c:	091b      	lsreq	r3, r3, #4
 800b74e:	3004      	addeq	r0, #4
 800b750:	079a      	lsls	r2, r3, #30
 800b752:	bf04      	itt	eq
 800b754:	089b      	lsreq	r3, r3, #2
 800b756:	3002      	addeq	r0, #2
 800b758:	07da      	lsls	r2, r3, #31
 800b75a:	d402      	bmi.n	800b762 <__lo0bits+0x4e>
 800b75c:	085b      	lsrs	r3, r3, #1
 800b75e:	d006      	beq.n	800b76e <__lo0bits+0x5a>
 800b760:	3001      	adds	r0, #1
 800b762:	600b      	str	r3, [r1, #0]
 800b764:	4770      	bx	lr
 800b766:	4610      	mov	r0, r2
 800b768:	e7e9      	b.n	800b73e <__lo0bits+0x2a>
 800b76a:	2000      	movs	r0, #0
 800b76c:	4770      	bx	lr
 800b76e:	2020      	movs	r0, #32
 800b770:	4770      	bx	lr

0800b772 <__i2b>:
 800b772:	b510      	push	{r4, lr}
 800b774:	460c      	mov	r4, r1
 800b776:	2101      	movs	r1, #1
 800b778:	f7ff ff27 	bl	800b5ca <_Balloc>
 800b77c:	2201      	movs	r2, #1
 800b77e:	6144      	str	r4, [r0, #20]
 800b780:	6102      	str	r2, [r0, #16]
 800b782:	bd10      	pop	{r4, pc}

0800b784 <__multiply>:
 800b784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b788:	4614      	mov	r4, r2
 800b78a:	690a      	ldr	r2, [r1, #16]
 800b78c:	6923      	ldr	r3, [r4, #16]
 800b78e:	429a      	cmp	r2, r3
 800b790:	bfb8      	it	lt
 800b792:	460b      	movlt	r3, r1
 800b794:	4688      	mov	r8, r1
 800b796:	bfbc      	itt	lt
 800b798:	46a0      	movlt	r8, r4
 800b79a:	461c      	movlt	r4, r3
 800b79c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b7a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b7a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b7a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b7ac:	eb07 0609 	add.w	r6, r7, r9
 800b7b0:	42b3      	cmp	r3, r6
 800b7b2:	bfb8      	it	lt
 800b7b4:	3101      	addlt	r1, #1
 800b7b6:	f7ff ff08 	bl	800b5ca <_Balloc>
 800b7ba:	f100 0514 	add.w	r5, r0, #20
 800b7be:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b7c2:	462b      	mov	r3, r5
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	4573      	cmp	r3, lr
 800b7c8:	d316      	bcc.n	800b7f8 <__multiply+0x74>
 800b7ca:	f104 0214 	add.w	r2, r4, #20
 800b7ce:	f108 0114 	add.w	r1, r8, #20
 800b7d2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b7d6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	9b00      	ldr	r3, [sp, #0]
 800b7de:	9201      	str	r2, [sp, #4]
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d80c      	bhi.n	800b7fe <__multiply+0x7a>
 800b7e4:	2e00      	cmp	r6, #0
 800b7e6:	dd03      	ble.n	800b7f0 <__multiply+0x6c>
 800b7e8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d05d      	beq.n	800b8ac <__multiply+0x128>
 800b7f0:	6106      	str	r6, [r0, #16]
 800b7f2:	b003      	add	sp, #12
 800b7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f8:	f843 2b04 	str.w	r2, [r3], #4
 800b7fc:	e7e3      	b.n	800b7c6 <__multiply+0x42>
 800b7fe:	f8b2 b000 	ldrh.w	fp, [r2]
 800b802:	f1bb 0f00 	cmp.w	fp, #0
 800b806:	d023      	beq.n	800b850 <__multiply+0xcc>
 800b808:	4689      	mov	r9, r1
 800b80a:	46ac      	mov	ip, r5
 800b80c:	f04f 0800 	mov.w	r8, #0
 800b810:	f859 4b04 	ldr.w	r4, [r9], #4
 800b814:	f8dc a000 	ldr.w	sl, [ip]
 800b818:	b2a3      	uxth	r3, r4
 800b81a:	fa1f fa8a 	uxth.w	sl, sl
 800b81e:	fb0b a303 	mla	r3, fp, r3, sl
 800b822:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b826:	f8dc 4000 	ldr.w	r4, [ip]
 800b82a:	4443      	add	r3, r8
 800b82c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b830:	fb0b 840a 	mla	r4, fp, sl, r8
 800b834:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b838:	46e2      	mov	sl, ip
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b840:	454f      	cmp	r7, r9
 800b842:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b846:	f84a 3b04 	str.w	r3, [sl], #4
 800b84a:	d82b      	bhi.n	800b8a4 <__multiply+0x120>
 800b84c:	f8cc 8004 	str.w	r8, [ip, #4]
 800b850:	9b01      	ldr	r3, [sp, #4]
 800b852:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b856:	3204      	adds	r2, #4
 800b858:	f1ba 0f00 	cmp.w	sl, #0
 800b85c:	d020      	beq.n	800b8a0 <__multiply+0x11c>
 800b85e:	682b      	ldr	r3, [r5, #0]
 800b860:	4689      	mov	r9, r1
 800b862:	46a8      	mov	r8, r5
 800b864:	f04f 0b00 	mov.w	fp, #0
 800b868:	f8b9 c000 	ldrh.w	ip, [r9]
 800b86c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b870:	fb0a 440c 	mla	r4, sl, ip, r4
 800b874:	445c      	add	r4, fp
 800b876:	46c4      	mov	ip, r8
 800b878:	b29b      	uxth	r3, r3
 800b87a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b87e:	f84c 3b04 	str.w	r3, [ip], #4
 800b882:	f859 3b04 	ldr.w	r3, [r9], #4
 800b886:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b88a:	0c1b      	lsrs	r3, r3, #16
 800b88c:	fb0a b303 	mla	r3, sl, r3, fp
 800b890:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b894:	454f      	cmp	r7, r9
 800b896:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b89a:	d805      	bhi.n	800b8a8 <__multiply+0x124>
 800b89c:	f8c8 3004 	str.w	r3, [r8, #4]
 800b8a0:	3504      	adds	r5, #4
 800b8a2:	e79b      	b.n	800b7dc <__multiply+0x58>
 800b8a4:	46d4      	mov	ip, sl
 800b8a6:	e7b3      	b.n	800b810 <__multiply+0x8c>
 800b8a8:	46e0      	mov	r8, ip
 800b8aa:	e7dd      	b.n	800b868 <__multiply+0xe4>
 800b8ac:	3e01      	subs	r6, #1
 800b8ae:	e799      	b.n	800b7e4 <__multiply+0x60>

0800b8b0 <__pow5mult>:
 800b8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8b4:	4615      	mov	r5, r2
 800b8b6:	f012 0203 	ands.w	r2, r2, #3
 800b8ba:	4606      	mov	r6, r0
 800b8bc:	460f      	mov	r7, r1
 800b8be:	d007      	beq.n	800b8d0 <__pow5mult+0x20>
 800b8c0:	3a01      	subs	r2, #1
 800b8c2:	4c21      	ldr	r4, [pc, #132]	; (800b948 <__pow5mult+0x98>)
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b8ca:	f7ff fec9 	bl	800b660 <__multadd>
 800b8ce:	4607      	mov	r7, r0
 800b8d0:	10ad      	asrs	r5, r5, #2
 800b8d2:	d035      	beq.n	800b940 <__pow5mult+0x90>
 800b8d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b8d6:	b93c      	cbnz	r4, 800b8e8 <__pow5mult+0x38>
 800b8d8:	2010      	movs	r0, #16
 800b8da:	f7ff fe63 	bl	800b5a4 <malloc>
 800b8de:	6270      	str	r0, [r6, #36]	; 0x24
 800b8e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8e4:	6004      	str	r4, [r0, #0]
 800b8e6:	60c4      	str	r4, [r0, #12]
 800b8e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b8ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8f0:	b94c      	cbnz	r4, 800b906 <__pow5mult+0x56>
 800b8f2:	f240 2171 	movw	r1, #625	; 0x271
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	f7ff ff3b 	bl	800b772 <__i2b>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800b902:	4604      	mov	r4, r0
 800b904:	6003      	str	r3, [r0, #0]
 800b906:	f04f 0800 	mov.w	r8, #0
 800b90a:	07eb      	lsls	r3, r5, #31
 800b90c:	d50a      	bpl.n	800b924 <__pow5mult+0x74>
 800b90e:	4639      	mov	r1, r7
 800b910:	4622      	mov	r2, r4
 800b912:	4630      	mov	r0, r6
 800b914:	f7ff ff36 	bl	800b784 <__multiply>
 800b918:	4639      	mov	r1, r7
 800b91a:	4681      	mov	r9, r0
 800b91c:	4630      	mov	r0, r6
 800b91e:	f7ff fe88 	bl	800b632 <_Bfree>
 800b922:	464f      	mov	r7, r9
 800b924:	106d      	asrs	r5, r5, #1
 800b926:	d00b      	beq.n	800b940 <__pow5mult+0x90>
 800b928:	6820      	ldr	r0, [r4, #0]
 800b92a:	b938      	cbnz	r0, 800b93c <__pow5mult+0x8c>
 800b92c:	4622      	mov	r2, r4
 800b92e:	4621      	mov	r1, r4
 800b930:	4630      	mov	r0, r6
 800b932:	f7ff ff27 	bl	800b784 <__multiply>
 800b936:	6020      	str	r0, [r4, #0]
 800b938:	f8c0 8000 	str.w	r8, [r0]
 800b93c:	4604      	mov	r4, r0
 800b93e:	e7e4      	b.n	800b90a <__pow5mult+0x5a>
 800b940:	4638      	mov	r0, r7
 800b942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b946:	bf00      	nop
 800b948:	08012c68 	.word	0x08012c68

0800b94c <__lshift>:
 800b94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b950:	460c      	mov	r4, r1
 800b952:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b956:	6923      	ldr	r3, [r4, #16]
 800b958:	6849      	ldr	r1, [r1, #4]
 800b95a:	eb0a 0903 	add.w	r9, sl, r3
 800b95e:	68a3      	ldr	r3, [r4, #8]
 800b960:	4607      	mov	r7, r0
 800b962:	4616      	mov	r6, r2
 800b964:	f109 0501 	add.w	r5, r9, #1
 800b968:	42ab      	cmp	r3, r5
 800b96a:	db32      	blt.n	800b9d2 <__lshift+0x86>
 800b96c:	4638      	mov	r0, r7
 800b96e:	f7ff fe2c 	bl	800b5ca <_Balloc>
 800b972:	2300      	movs	r3, #0
 800b974:	4680      	mov	r8, r0
 800b976:	f100 0114 	add.w	r1, r0, #20
 800b97a:	461a      	mov	r2, r3
 800b97c:	4553      	cmp	r3, sl
 800b97e:	db2b      	blt.n	800b9d8 <__lshift+0x8c>
 800b980:	6920      	ldr	r0, [r4, #16]
 800b982:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b986:	f104 0314 	add.w	r3, r4, #20
 800b98a:	f016 021f 	ands.w	r2, r6, #31
 800b98e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b992:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b996:	d025      	beq.n	800b9e4 <__lshift+0x98>
 800b998:	f1c2 0e20 	rsb	lr, r2, #32
 800b99c:	2000      	movs	r0, #0
 800b99e:	681e      	ldr	r6, [r3, #0]
 800b9a0:	468a      	mov	sl, r1
 800b9a2:	4096      	lsls	r6, r2
 800b9a4:	4330      	orrs	r0, r6
 800b9a6:	f84a 0b04 	str.w	r0, [sl], #4
 800b9aa:	f853 0b04 	ldr.w	r0, [r3], #4
 800b9ae:	459c      	cmp	ip, r3
 800b9b0:	fa20 f00e 	lsr.w	r0, r0, lr
 800b9b4:	d814      	bhi.n	800b9e0 <__lshift+0x94>
 800b9b6:	6048      	str	r0, [r1, #4]
 800b9b8:	b108      	cbz	r0, 800b9be <__lshift+0x72>
 800b9ba:	f109 0502 	add.w	r5, r9, #2
 800b9be:	3d01      	subs	r5, #1
 800b9c0:	4638      	mov	r0, r7
 800b9c2:	f8c8 5010 	str.w	r5, [r8, #16]
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	f7ff fe33 	bl	800b632 <_Bfree>
 800b9cc:	4640      	mov	r0, r8
 800b9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d2:	3101      	adds	r1, #1
 800b9d4:	005b      	lsls	r3, r3, #1
 800b9d6:	e7c7      	b.n	800b968 <__lshift+0x1c>
 800b9d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	e7cd      	b.n	800b97c <__lshift+0x30>
 800b9e0:	4651      	mov	r1, sl
 800b9e2:	e7dc      	b.n	800b99e <__lshift+0x52>
 800b9e4:	3904      	subs	r1, #4
 800b9e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ea:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9ee:	459c      	cmp	ip, r3
 800b9f0:	d8f9      	bhi.n	800b9e6 <__lshift+0x9a>
 800b9f2:	e7e4      	b.n	800b9be <__lshift+0x72>

0800b9f4 <__mcmp>:
 800b9f4:	6903      	ldr	r3, [r0, #16]
 800b9f6:	690a      	ldr	r2, [r1, #16]
 800b9f8:	1a9b      	subs	r3, r3, r2
 800b9fa:	b530      	push	{r4, r5, lr}
 800b9fc:	d10c      	bne.n	800ba18 <__mcmp+0x24>
 800b9fe:	0092      	lsls	r2, r2, #2
 800ba00:	3014      	adds	r0, #20
 800ba02:	3114      	adds	r1, #20
 800ba04:	1884      	adds	r4, r0, r2
 800ba06:	4411      	add	r1, r2
 800ba08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ba0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ba10:	4295      	cmp	r5, r2
 800ba12:	d003      	beq.n	800ba1c <__mcmp+0x28>
 800ba14:	d305      	bcc.n	800ba22 <__mcmp+0x2e>
 800ba16:	2301      	movs	r3, #1
 800ba18:	4618      	mov	r0, r3
 800ba1a:	bd30      	pop	{r4, r5, pc}
 800ba1c:	42a0      	cmp	r0, r4
 800ba1e:	d3f3      	bcc.n	800ba08 <__mcmp+0x14>
 800ba20:	e7fa      	b.n	800ba18 <__mcmp+0x24>
 800ba22:	f04f 33ff 	mov.w	r3, #4294967295
 800ba26:	e7f7      	b.n	800ba18 <__mcmp+0x24>

0800ba28 <__mdiff>:
 800ba28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba2c:	460d      	mov	r5, r1
 800ba2e:	4607      	mov	r7, r0
 800ba30:	4611      	mov	r1, r2
 800ba32:	4628      	mov	r0, r5
 800ba34:	4614      	mov	r4, r2
 800ba36:	f7ff ffdd 	bl	800b9f4 <__mcmp>
 800ba3a:	1e06      	subs	r6, r0, #0
 800ba3c:	d108      	bne.n	800ba50 <__mdiff+0x28>
 800ba3e:	4631      	mov	r1, r6
 800ba40:	4638      	mov	r0, r7
 800ba42:	f7ff fdc2 	bl	800b5ca <_Balloc>
 800ba46:	2301      	movs	r3, #1
 800ba48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ba4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba50:	bfa4      	itt	ge
 800ba52:	4623      	movge	r3, r4
 800ba54:	462c      	movge	r4, r5
 800ba56:	4638      	mov	r0, r7
 800ba58:	6861      	ldr	r1, [r4, #4]
 800ba5a:	bfa6      	itte	ge
 800ba5c:	461d      	movge	r5, r3
 800ba5e:	2600      	movge	r6, #0
 800ba60:	2601      	movlt	r6, #1
 800ba62:	f7ff fdb2 	bl	800b5ca <_Balloc>
 800ba66:	692b      	ldr	r3, [r5, #16]
 800ba68:	60c6      	str	r6, [r0, #12]
 800ba6a:	6926      	ldr	r6, [r4, #16]
 800ba6c:	f105 0914 	add.w	r9, r5, #20
 800ba70:	f104 0214 	add.w	r2, r4, #20
 800ba74:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ba78:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ba7c:	f100 0514 	add.w	r5, r0, #20
 800ba80:	f04f 0e00 	mov.w	lr, #0
 800ba84:	f852 ab04 	ldr.w	sl, [r2], #4
 800ba88:	f859 4b04 	ldr.w	r4, [r9], #4
 800ba8c:	fa1e f18a 	uxtah	r1, lr, sl
 800ba90:	b2a3      	uxth	r3, r4
 800ba92:	1ac9      	subs	r1, r1, r3
 800ba94:	0c23      	lsrs	r3, r4, #16
 800ba96:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ba9a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ba9e:	b289      	uxth	r1, r1
 800baa0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800baa4:	45c8      	cmp	r8, r9
 800baa6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800baaa:	4694      	mov	ip, r2
 800baac:	f845 3b04 	str.w	r3, [r5], #4
 800bab0:	d8e8      	bhi.n	800ba84 <__mdiff+0x5c>
 800bab2:	45bc      	cmp	ip, r7
 800bab4:	d304      	bcc.n	800bac0 <__mdiff+0x98>
 800bab6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800baba:	b183      	cbz	r3, 800bade <__mdiff+0xb6>
 800babc:	6106      	str	r6, [r0, #16]
 800babe:	e7c5      	b.n	800ba4c <__mdiff+0x24>
 800bac0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bac4:	fa1e f381 	uxtah	r3, lr, r1
 800bac8:	141a      	asrs	r2, r3, #16
 800baca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bace:	b29b      	uxth	r3, r3
 800bad0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bad4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800bad8:	f845 3b04 	str.w	r3, [r5], #4
 800badc:	e7e9      	b.n	800bab2 <__mdiff+0x8a>
 800bade:	3e01      	subs	r6, #1
 800bae0:	e7e9      	b.n	800bab6 <__mdiff+0x8e>

0800bae2 <__d2b>:
 800bae2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bae6:	460e      	mov	r6, r1
 800bae8:	2101      	movs	r1, #1
 800baea:	ec59 8b10 	vmov	r8, r9, d0
 800baee:	4615      	mov	r5, r2
 800baf0:	f7ff fd6b 	bl	800b5ca <_Balloc>
 800baf4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800baf8:	4607      	mov	r7, r0
 800bafa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bafe:	bb34      	cbnz	r4, 800bb4e <__d2b+0x6c>
 800bb00:	9301      	str	r3, [sp, #4]
 800bb02:	f1b8 0300 	subs.w	r3, r8, #0
 800bb06:	d027      	beq.n	800bb58 <__d2b+0x76>
 800bb08:	a802      	add	r0, sp, #8
 800bb0a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800bb0e:	f7ff fe01 	bl	800b714 <__lo0bits>
 800bb12:	9900      	ldr	r1, [sp, #0]
 800bb14:	b1f0      	cbz	r0, 800bb54 <__d2b+0x72>
 800bb16:	9a01      	ldr	r2, [sp, #4]
 800bb18:	f1c0 0320 	rsb	r3, r0, #32
 800bb1c:	fa02 f303 	lsl.w	r3, r2, r3
 800bb20:	430b      	orrs	r3, r1
 800bb22:	40c2      	lsrs	r2, r0
 800bb24:	617b      	str	r3, [r7, #20]
 800bb26:	9201      	str	r2, [sp, #4]
 800bb28:	9b01      	ldr	r3, [sp, #4]
 800bb2a:	61bb      	str	r3, [r7, #24]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	bf14      	ite	ne
 800bb30:	2102      	movne	r1, #2
 800bb32:	2101      	moveq	r1, #1
 800bb34:	6139      	str	r1, [r7, #16]
 800bb36:	b1c4      	cbz	r4, 800bb6a <__d2b+0x88>
 800bb38:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bb3c:	4404      	add	r4, r0
 800bb3e:	6034      	str	r4, [r6, #0]
 800bb40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb44:	6028      	str	r0, [r5, #0]
 800bb46:	4638      	mov	r0, r7
 800bb48:	b003      	add	sp, #12
 800bb4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb52:	e7d5      	b.n	800bb00 <__d2b+0x1e>
 800bb54:	6179      	str	r1, [r7, #20]
 800bb56:	e7e7      	b.n	800bb28 <__d2b+0x46>
 800bb58:	a801      	add	r0, sp, #4
 800bb5a:	f7ff fddb 	bl	800b714 <__lo0bits>
 800bb5e:	9b01      	ldr	r3, [sp, #4]
 800bb60:	617b      	str	r3, [r7, #20]
 800bb62:	2101      	movs	r1, #1
 800bb64:	6139      	str	r1, [r7, #16]
 800bb66:	3020      	adds	r0, #32
 800bb68:	e7e5      	b.n	800bb36 <__d2b+0x54>
 800bb6a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bb6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb72:	6030      	str	r0, [r6, #0]
 800bb74:	6918      	ldr	r0, [r3, #16]
 800bb76:	f7ff fdae 	bl	800b6d6 <__hi0bits>
 800bb7a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bb7e:	e7e1      	b.n	800bb44 <__d2b+0x62>

0800bb80 <_calloc_r>:
 800bb80:	b538      	push	{r3, r4, r5, lr}
 800bb82:	fb02 f401 	mul.w	r4, r2, r1
 800bb86:	4621      	mov	r1, r4
 800bb88:	f000 f856 	bl	800bc38 <_malloc_r>
 800bb8c:	4605      	mov	r5, r0
 800bb8e:	b118      	cbz	r0, 800bb98 <_calloc_r+0x18>
 800bb90:	4622      	mov	r2, r4
 800bb92:	2100      	movs	r1, #0
 800bb94:	f7fe fab6 	bl	800a104 <memset>
 800bb98:	4628      	mov	r0, r5
 800bb9a:	bd38      	pop	{r3, r4, r5, pc}

0800bb9c <_free_r>:
 800bb9c:	b538      	push	{r3, r4, r5, lr}
 800bb9e:	4605      	mov	r5, r0
 800bba0:	2900      	cmp	r1, #0
 800bba2:	d045      	beq.n	800bc30 <_free_r+0x94>
 800bba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bba8:	1f0c      	subs	r4, r1, #4
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	bfb8      	it	lt
 800bbae:	18e4      	addlt	r4, r4, r3
 800bbb0:	f000 fa29 	bl	800c006 <__malloc_lock>
 800bbb4:	4a1f      	ldr	r2, [pc, #124]	; (800bc34 <_free_r+0x98>)
 800bbb6:	6813      	ldr	r3, [r2, #0]
 800bbb8:	4610      	mov	r0, r2
 800bbba:	b933      	cbnz	r3, 800bbca <_free_r+0x2e>
 800bbbc:	6063      	str	r3, [r4, #4]
 800bbbe:	6014      	str	r4, [r2, #0]
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbc6:	f000 ba1f 	b.w	800c008 <__malloc_unlock>
 800bbca:	42a3      	cmp	r3, r4
 800bbcc:	d90c      	bls.n	800bbe8 <_free_r+0x4c>
 800bbce:	6821      	ldr	r1, [r4, #0]
 800bbd0:	1862      	adds	r2, r4, r1
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	bf04      	itt	eq
 800bbd6:	681a      	ldreq	r2, [r3, #0]
 800bbd8:	685b      	ldreq	r3, [r3, #4]
 800bbda:	6063      	str	r3, [r4, #4]
 800bbdc:	bf04      	itt	eq
 800bbde:	1852      	addeq	r2, r2, r1
 800bbe0:	6022      	streq	r2, [r4, #0]
 800bbe2:	6004      	str	r4, [r0, #0]
 800bbe4:	e7ec      	b.n	800bbc0 <_free_r+0x24>
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	685a      	ldr	r2, [r3, #4]
 800bbea:	b10a      	cbz	r2, 800bbf0 <_free_r+0x54>
 800bbec:	42a2      	cmp	r2, r4
 800bbee:	d9fa      	bls.n	800bbe6 <_free_r+0x4a>
 800bbf0:	6819      	ldr	r1, [r3, #0]
 800bbf2:	1858      	adds	r0, r3, r1
 800bbf4:	42a0      	cmp	r0, r4
 800bbf6:	d10b      	bne.n	800bc10 <_free_r+0x74>
 800bbf8:	6820      	ldr	r0, [r4, #0]
 800bbfa:	4401      	add	r1, r0
 800bbfc:	1858      	adds	r0, r3, r1
 800bbfe:	4282      	cmp	r2, r0
 800bc00:	6019      	str	r1, [r3, #0]
 800bc02:	d1dd      	bne.n	800bbc0 <_free_r+0x24>
 800bc04:	6810      	ldr	r0, [r2, #0]
 800bc06:	6852      	ldr	r2, [r2, #4]
 800bc08:	605a      	str	r2, [r3, #4]
 800bc0a:	4401      	add	r1, r0
 800bc0c:	6019      	str	r1, [r3, #0]
 800bc0e:	e7d7      	b.n	800bbc0 <_free_r+0x24>
 800bc10:	d902      	bls.n	800bc18 <_free_r+0x7c>
 800bc12:	230c      	movs	r3, #12
 800bc14:	602b      	str	r3, [r5, #0]
 800bc16:	e7d3      	b.n	800bbc0 <_free_r+0x24>
 800bc18:	6820      	ldr	r0, [r4, #0]
 800bc1a:	1821      	adds	r1, r4, r0
 800bc1c:	428a      	cmp	r2, r1
 800bc1e:	bf04      	itt	eq
 800bc20:	6811      	ldreq	r1, [r2, #0]
 800bc22:	6852      	ldreq	r2, [r2, #4]
 800bc24:	6062      	str	r2, [r4, #4]
 800bc26:	bf04      	itt	eq
 800bc28:	1809      	addeq	r1, r1, r0
 800bc2a:	6021      	streq	r1, [r4, #0]
 800bc2c:	605c      	str	r4, [r3, #4]
 800bc2e:	e7c7      	b.n	800bbc0 <_free_r+0x24>
 800bc30:	bd38      	pop	{r3, r4, r5, pc}
 800bc32:	bf00      	nop
 800bc34:	240004f4 	.word	0x240004f4

0800bc38 <_malloc_r>:
 800bc38:	b570      	push	{r4, r5, r6, lr}
 800bc3a:	1ccd      	adds	r5, r1, #3
 800bc3c:	f025 0503 	bic.w	r5, r5, #3
 800bc40:	3508      	adds	r5, #8
 800bc42:	2d0c      	cmp	r5, #12
 800bc44:	bf38      	it	cc
 800bc46:	250c      	movcc	r5, #12
 800bc48:	2d00      	cmp	r5, #0
 800bc4a:	4606      	mov	r6, r0
 800bc4c:	db01      	blt.n	800bc52 <_malloc_r+0x1a>
 800bc4e:	42a9      	cmp	r1, r5
 800bc50:	d903      	bls.n	800bc5a <_malloc_r+0x22>
 800bc52:	230c      	movs	r3, #12
 800bc54:	6033      	str	r3, [r6, #0]
 800bc56:	2000      	movs	r0, #0
 800bc58:	bd70      	pop	{r4, r5, r6, pc}
 800bc5a:	f000 f9d4 	bl	800c006 <__malloc_lock>
 800bc5e:	4a21      	ldr	r2, [pc, #132]	; (800bce4 <_malloc_r+0xac>)
 800bc60:	6814      	ldr	r4, [r2, #0]
 800bc62:	4621      	mov	r1, r4
 800bc64:	b991      	cbnz	r1, 800bc8c <_malloc_r+0x54>
 800bc66:	4c20      	ldr	r4, [pc, #128]	; (800bce8 <_malloc_r+0xb0>)
 800bc68:	6823      	ldr	r3, [r4, #0]
 800bc6a:	b91b      	cbnz	r3, 800bc74 <_malloc_r+0x3c>
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	f000 f98f 	bl	800bf90 <_sbrk_r>
 800bc72:	6020      	str	r0, [r4, #0]
 800bc74:	4629      	mov	r1, r5
 800bc76:	4630      	mov	r0, r6
 800bc78:	f000 f98a 	bl	800bf90 <_sbrk_r>
 800bc7c:	1c43      	adds	r3, r0, #1
 800bc7e:	d124      	bne.n	800bcca <_malloc_r+0x92>
 800bc80:	230c      	movs	r3, #12
 800bc82:	6033      	str	r3, [r6, #0]
 800bc84:	4630      	mov	r0, r6
 800bc86:	f000 f9bf 	bl	800c008 <__malloc_unlock>
 800bc8a:	e7e4      	b.n	800bc56 <_malloc_r+0x1e>
 800bc8c:	680b      	ldr	r3, [r1, #0]
 800bc8e:	1b5b      	subs	r3, r3, r5
 800bc90:	d418      	bmi.n	800bcc4 <_malloc_r+0x8c>
 800bc92:	2b0b      	cmp	r3, #11
 800bc94:	d90f      	bls.n	800bcb6 <_malloc_r+0x7e>
 800bc96:	600b      	str	r3, [r1, #0]
 800bc98:	50cd      	str	r5, [r1, r3]
 800bc9a:	18cc      	adds	r4, r1, r3
 800bc9c:	4630      	mov	r0, r6
 800bc9e:	f000 f9b3 	bl	800c008 <__malloc_unlock>
 800bca2:	f104 000b 	add.w	r0, r4, #11
 800bca6:	1d23      	adds	r3, r4, #4
 800bca8:	f020 0007 	bic.w	r0, r0, #7
 800bcac:	1ac3      	subs	r3, r0, r3
 800bcae:	d0d3      	beq.n	800bc58 <_malloc_r+0x20>
 800bcb0:	425a      	negs	r2, r3
 800bcb2:	50e2      	str	r2, [r4, r3]
 800bcb4:	e7d0      	b.n	800bc58 <_malloc_r+0x20>
 800bcb6:	428c      	cmp	r4, r1
 800bcb8:	684b      	ldr	r3, [r1, #4]
 800bcba:	bf16      	itet	ne
 800bcbc:	6063      	strne	r3, [r4, #4]
 800bcbe:	6013      	streq	r3, [r2, #0]
 800bcc0:	460c      	movne	r4, r1
 800bcc2:	e7eb      	b.n	800bc9c <_malloc_r+0x64>
 800bcc4:	460c      	mov	r4, r1
 800bcc6:	6849      	ldr	r1, [r1, #4]
 800bcc8:	e7cc      	b.n	800bc64 <_malloc_r+0x2c>
 800bcca:	1cc4      	adds	r4, r0, #3
 800bccc:	f024 0403 	bic.w	r4, r4, #3
 800bcd0:	42a0      	cmp	r0, r4
 800bcd2:	d005      	beq.n	800bce0 <_malloc_r+0xa8>
 800bcd4:	1a21      	subs	r1, r4, r0
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	f000 f95a 	bl	800bf90 <_sbrk_r>
 800bcdc:	3001      	adds	r0, #1
 800bcde:	d0cf      	beq.n	800bc80 <_malloc_r+0x48>
 800bce0:	6025      	str	r5, [r4, #0]
 800bce2:	e7db      	b.n	800bc9c <_malloc_r+0x64>
 800bce4:	240004f4 	.word	0x240004f4
 800bce8:	240004f8 	.word	0x240004f8

0800bcec <__ssputs_r>:
 800bcec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcf0:	688e      	ldr	r6, [r1, #8]
 800bcf2:	429e      	cmp	r6, r3
 800bcf4:	4682      	mov	sl, r0
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	4690      	mov	r8, r2
 800bcfa:	4699      	mov	r9, r3
 800bcfc:	d837      	bhi.n	800bd6e <__ssputs_r+0x82>
 800bcfe:	898a      	ldrh	r2, [r1, #12]
 800bd00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd04:	d031      	beq.n	800bd6a <__ssputs_r+0x7e>
 800bd06:	6825      	ldr	r5, [r4, #0]
 800bd08:	6909      	ldr	r1, [r1, #16]
 800bd0a:	1a6f      	subs	r7, r5, r1
 800bd0c:	6965      	ldr	r5, [r4, #20]
 800bd0e:	2302      	movs	r3, #2
 800bd10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd14:	fb95 f5f3 	sdiv	r5, r5, r3
 800bd18:	f109 0301 	add.w	r3, r9, #1
 800bd1c:	443b      	add	r3, r7
 800bd1e:	429d      	cmp	r5, r3
 800bd20:	bf38      	it	cc
 800bd22:	461d      	movcc	r5, r3
 800bd24:	0553      	lsls	r3, r2, #21
 800bd26:	d530      	bpl.n	800bd8a <__ssputs_r+0x9e>
 800bd28:	4629      	mov	r1, r5
 800bd2a:	f7ff ff85 	bl	800bc38 <_malloc_r>
 800bd2e:	4606      	mov	r6, r0
 800bd30:	b950      	cbnz	r0, 800bd48 <__ssputs_r+0x5c>
 800bd32:	230c      	movs	r3, #12
 800bd34:	f8ca 3000 	str.w	r3, [sl]
 800bd38:	89a3      	ldrh	r3, [r4, #12]
 800bd3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd3e:	81a3      	strh	r3, [r4, #12]
 800bd40:	f04f 30ff 	mov.w	r0, #4294967295
 800bd44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd48:	463a      	mov	r2, r7
 800bd4a:	6921      	ldr	r1, [r4, #16]
 800bd4c:	f7ff fc32 	bl	800b5b4 <memcpy>
 800bd50:	89a3      	ldrh	r3, [r4, #12]
 800bd52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd5a:	81a3      	strh	r3, [r4, #12]
 800bd5c:	6126      	str	r6, [r4, #16]
 800bd5e:	6165      	str	r5, [r4, #20]
 800bd60:	443e      	add	r6, r7
 800bd62:	1bed      	subs	r5, r5, r7
 800bd64:	6026      	str	r6, [r4, #0]
 800bd66:	60a5      	str	r5, [r4, #8]
 800bd68:	464e      	mov	r6, r9
 800bd6a:	454e      	cmp	r6, r9
 800bd6c:	d900      	bls.n	800bd70 <__ssputs_r+0x84>
 800bd6e:	464e      	mov	r6, r9
 800bd70:	4632      	mov	r2, r6
 800bd72:	4641      	mov	r1, r8
 800bd74:	6820      	ldr	r0, [r4, #0]
 800bd76:	f000 f92d 	bl	800bfd4 <memmove>
 800bd7a:	68a3      	ldr	r3, [r4, #8]
 800bd7c:	1b9b      	subs	r3, r3, r6
 800bd7e:	60a3      	str	r3, [r4, #8]
 800bd80:	6823      	ldr	r3, [r4, #0]
 800bd82:	441e      	add	r6, r3
 800bd84:	6026      	str	r6, [r4, #0]
 800bd86:	2000      	movs	r0, #0
 800bd88:	e7dc      	b.n	800bd44 <__ssputs_r+0x58>
 800bd8a:	462a      	mov	r2, r5
 800bd8c:	f000 f93d 	bl	800c00a <_realloc_r>
 800bd90:	4606      	mov	r6, r0
 800bd92:	2800      	cmp	r0, #0
 800bd94:	d1e2      	bne.n	800bd5c <__ssputs_r+0x70>
 800bd96:	6921      	ldr	r1, [r4, #16]
 800bd98:	4650      	mov	r0, sl
 800bd9a:	f7ff feff 	bl	800bb9c <_free_r>
 800bd9e:	e7c8      	b.n	800bd32 <__ssputs_r+0x46>

0800bda0 <_svfiprintf_r>:
 800bda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda4:	461d      	mov	r5, r3
 800bda6:	898b      	ldrh	r3, [r1, #12]
 800bda8:	061f      	lsls	r7, r3, #24
 800bdaa:	b09d      	sub	sp, #116	; 0x74
 800bdac:	4680      	mov	r8, r0
 800bdae:	460c      	mov	r4, r1
 800bdb0:	4616      	mov	r6, r2
 800bdb2:	d50f      	bpl.n	800bdd4 <_svfiprintf_r+0x34>
 800bdb4:	690b      	ldr	r3, [r1, #16]
 800bdb6:	b96b      	cbnz	r3, 800bdd4 <_svfiprintf_r+0x34>
 800bdb8:	2140      	movs	r1, #64	; 0x40
 800bdba:	f7ff ff3d 	bl	800bc38 <_malloc_r>
 800bdbe:	6020      	str	r0, [r4, #0]
 800bdc0:	6120      	str	r0, [r4, #16]
 800bdc2:	b928      	cbnz	r0, 800bdd0 <_svfiprintf_r+0x30>
 800bdc4:	230c      	movs	r3, #12
 800bdc6:	f8c8 3000 	str.w	r3, [r8]
 800bdca:	f04f 30ff 	mov.w	r0, #4294967295
 800bdce:	e0c8      	b.n	800bf62 <_svfiprintf_r+0x1c2>
 800bdd0:	2340      	movs	r3, #64	; 0x40
 800bdd2:	6163      	str	r3, [r4, #20]
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	9309      	str	r3, [sp, #36]	; 0x24
 800bdd8:	2320      	movs	r3, #32
 800bdda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdde:	2330      	movs	r3, #48	; 0x30
 800bde0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bde4:	9503      	str	r5, [sp, #12]
 800bde6:	f04f 0b01 	mov.w	fp, #1
 800bdea:	4637      	mov	r7, r6
 800bdec:	463d      	mov	r5, r7
 800bdee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bdf2:	b10b      	cbz	r3, 800bdf8 <_svfiprintf_r+0x58>
 800bdf4:	2b25      	cmp	r3, #37	; 0x25
 800bdf6:	d13e      	bne.n	800be76 <_svfiprintf_r+0xd6>
 800bdf8:	ebb7 0a06 	subs.w	sl, r7, r6
 800bdfc:	d00b      	beq.n	800be16 <_svfiprintf_r+0x76>
 800bdfe:	4653      	mov	r3, sl
 800be00:	4632      	mov	r2, r6
 800be02:	4621      	mov	r1, r4
 800be04:	4640      	mov	r0, r8
 800be06:	f7ff ff71 	bl	800bcec <__ssputs_r>
 800be0a:	3001      	adds	r0, #1
 800be0c:	f000 80a4 	beq.w	800bf58 <_svfiprintf_r+0x1b8>
 800be10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be12:	4453      	add	r3, sl
 800be14:	9309      	str	r3, [sp, #36]	; 0x24
 800be16:	783b      	ldrb	r3, [r7, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f000 809d 	beq.w	800bf58 <_svfiprintf_r+0x1b8>
 800be1e:	2300      	movs	r3, #0
 800be20:	f04f 32ff 	mov.w	r2, #4294967295
 800be24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be28:	9304      	str	r3, [sp, #16]
 800be2a:	9307      	str	r3, [sp, #28]
 800be2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be30:	931a      	str	r3, [sp, #104]	; 0x68
 800be32:	462f      	mov	r7, r5
 800be34:	2205      	movs	r2, #5
 800be36:	f817 1b01 	ldrb.w	r1, [r7], #1
 800be3a:	4850      	ldr	r0, [pc, #320]	; (800bf7c <_svfiprintf_r+0x1dc>)
 800be3c:	f7f4 fab8 	bl	80003b0 <memchr>
 800be40:	9b04      	ldr	r3, [sp, #16]
 800be42:	b9d0      	cbnz	r0, 800be7a <_svfiprintf_r+0xda>
 800be44:	06d9      	lsls	r1, r3, #27
 800be46:	bf44      	itt	mi
 800be48:	2220      	movmi	r2, #32
 800be4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be4e:	071a      	lsls	r2, r3, #28
 800be50:	bf44      	itt	mi
 800be52:	222b      	movmi	r2, #43	; 0x2b
 800be54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be58:	782a      	ldrb	r2, [r5, #0]
 800be5a:	2a2a      	cmp	r2, #42	; 0x2a
 800be5c:	d015      	beq.n	800be8a <_svfiprintf_r+0xea>
 800be5e:	9a07      	ldr	r2, [sp, #28]
 800be60:	462f      	mov	r7, r5
 800be62:	2000      	movs	r0, #0
 800be64:	250a      	movs	r5, #10
 800be66:	4639      	mov	r1, r7
 800be68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be6c:	3b30      	subs	r3, #48	; 0x30
 800be6e:	2b09      	cmp	r3, #9
 800be70:	d94d      	bls.n	800bf0e <_svfiprintf_r+0x16e>
 800be72:	b1b8      	cbz	r0, 800bea4 <_svfiprintf_r+0x104>
 800be74:	e00f      	b.n	800be96 <_svfiprintf_r+0xf6>
 800be76:	462f      	mov	r7, r5
 800be78:	e7b8      	b.n	800bdec <_svfiprintf_r+0x4c>
 800be7a:	4a40      	ldr	r2, [pc, #256]	; (800bf7c <_svfiprintf_r+0x1dc>)
 800be7c:	1a80      	subs	r0, r0, r2
 800be7e:	fa0b f000 	lsl.w	r0, fp, r0
 800be82:	4318      	orrs	r0, r3
 800be84:	9004      	str	r0, [sp, #16]
 800be86:	463d      	mov	r5, r7
 800be88:	e7d3      	b.n	800be32 <_svfiprintf_r+0x92>
 800be8a:	9a03      	ldr	r2, [sp, #12]
 800be8c:	1d11      	adds	r1, r2, #4
 800be8e:	6812      	ldr	r2, [r2, #0]
 800be90:	9103      	str	r1, [sp, #12]
 800be92:	2a00      	cmp	r2, #0
 800be94:	db01      	blt.n	800be9a <_svfiprintf_r+0xfa>
 800be96:	9207      	str	r2, [sp, #28]
 800be98:	e004      	b.n	800bea4 <_svfiprintf_r+0x104>
 800be9a:	4252      	negs	r2, r2
 800be9c:	f043 0302 	orr.w	r3, r3, #2
 800bea0:	9207      	str	r2, [sp, #28]
 800bea2:	9304      	str	r3, [sp, #16]
 800bea4:	783b      	ldrb	r3, [r7, #0]
 800bea6:	2b2e      	cmp	r3, #46	; 0x2e
 800bea8:	d10c      	bne.n	800bec4 <_svfiprintf_r+0x124>
 800beaa:	787b      	ldrb	r3, [r7, #1]
 800beac:	2b2a      	cmp	r3, #42	; 0x2a
 800beae:	d133      	bne.n	800bf18 <_svfiprintf_r+0x178>
 800beb0:	9b03      	ldr	r3, [sp, #12]
 800beb2:	1d1a      	adds	r2, r3, #4
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	9203      	str	r2, [sp, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	bfb8      	it	lt
 800bebc:	f04f 33ff 	movlt.w	r3, #4294967295
 800bec0:	3702      	adds	r7, #2
 800bec2:	9305      	str	r3, [sp, #20]
 800bec4:	4d2e      	ldr	r5, [pc, #184]	; (800bf80 <_svfiprintf_r+0x1e0>)
 800bec6:	7839      	ldrb	r1, [r7, #0]
 800bec8:	2203      	movs	r2, #3
 800beca:	4628      	mov	r0, r5
 800becc:	f7f4 fa70 	bl	80003b0 <memchr>
 800bed0:	b138      	cbz	r0, 800bee2 <_svfiprintf_r+0x142>
 800bed2:	2340      	movs	r3, #64	; 0x40
 800bed4:	1b40      	subs	r0, r0, r5
 800bed6:	fa03 f000 	lsl.w	r0, r3, r0
 800beda:	9b04      	ldr	r3, [sp, #16]
 800bedc:	4303      	orrs	r3, r0
 800bede:	3701      	adds	r7, #1
 800bee0:	9304      	str	r3, [sp, #16]
 800bee2:	7839      	ldrb	r1, [r7, #0]
 800bee4:	4827      	ldr	r0, [pc, #156]	; (800bf84 <_svfiprintf_r+0x1e4>)
 800bee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800beea:	2206      	movs	r2, #6
 800beec:	1c7e      	adds	r6, r7, #1
 800beee:	f7f4 fa5f 	bl	80003b0 <memchr>
 800bef2:	2800      	cmp	r0, #0
 800bef4:	d038      	beq.n	800bf68 <_svfiprintf_r+0x1c8>
 800bef6:	4b24      	ldr	r3, [pc, #144]	; (800bf88 <_svfiprintf_r+0x1e8>)
 800bef8:	bb13      	cbnz	r3, 800bf40 <_svfiprintf_r+0x1a0>
 800befa:	9b03      	ldr	r3, [sp, #12]
 800befc:	3307      	adds	r3, #7
 800befe:	f023 0307 	bic.w	r3, r3, #7
 800bf02:	3308      	adds	r3, #8
 800bf04:	9303      	str	r3, [sp, #12]
 800bf06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf08:	444b      	add	r3, r9
 800bf0a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf0c:	e76d      	b.n	800bdea <_svfiprintf_r+0x4a>
 800bf0e:	fb05 3202 	mla	r2, r5, r2, r3
 800bf12:	2001      	movs	r0, #1
 800bf14:	460f      	mov	r7, r1
 800bf16:	e7a6      	b.n	800be66 <_svfiprintf_r+0xc6>
 800bf18:	2300      	movs	r3, #0
 800bf1a:	3701      	adds	r7, #1
 800bf1c:	9305      	str	r3, [sp, #20]
 800bf1e:	4619      	mov	r1, r3
 800bf20:	250a      	movs	r5, #10
 800bf22:	4638      	mov	r0, r7
 800bf24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf28:	3a30      	subs	r2, #48	; 0x30
 800bf2a:	2a09      	cmp	r2, #9
 800bf2c:	d903      	bls.n	800bf36 <_svfiprintf_r+0x196>
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d0c8      	beq.n	800bec4 <_svfiprintf_r+0x124>
 800bf32:	9105      	str	r1, [sp, #20]
 800bf34:	e7c6      	b.n	800bec4 <_svfiprintf_r+0x124>
 800bf36:	fb05 2101 	mla	r1, r5, r1, r2
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	4607      	mov	r7, r0
 800bf3e:	e7f0      	b.n	800bf22 <_svfiprintf_r+0x182>
 800bf40:	ab03      	add	r3, sp, #12
 800bf42:	9300      	str	r3, [sp, #0]
 800bf44:	4622      	mov	r2, r4
 800bf46:	4b11      	ldr	r3, [pc, #68]	; (800bf8c <_svfiprintf_r+0x1ec>)
 800bf48:	a904      	add	r1, sp, #16
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	f7fe f968 	bl	800a220 <_printf_float>
 800bf50:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bf54:	4681      	mov	r9, r0
 800bf56:	d1d6      	bne.n	800bf06 <_svfiprintf_r+0x166>
 800bf58:	89a3      	ldrh	r3, [r4, #12]
 800bf5a:	065b      	lsls	r3, r3, #25
 800bf5c:	f53f af35 	bmi.w	800bdca <_svfiprintf_r+0x2a>
 800bf60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf62:	b01d      	add	sp, #116	; 0x74
 800bf64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf68:	ab03      	add	r3, sp, #12
 800bf6a:	9300      	str	r3, [sp, #0]
 800bf6c:	4622      	mov	r2, r4
 800bf6e:	4b07      	ldr	r3, [pc, #28]	; (800bf8c <_svfiprintf_r+0x1ec>)
 800bf70:	a904      	add	r1, sp, #16
 800bf72:	4640      	mov	r0, r8
 800bf74:	f7fe fbf6 	bl	800a764 <_printf_i>
 800bf78:	e7ea      	b.n	800bf50 <_svfiprintf_r+0x1b0>
 800bf7a:	bf00      	nop
 800bf7c:	08012c74 	.word	0x08012c74
 800bf80:	08012c7a 	.word	0x08012c7a
 800bf84:	08012c7e 	.word	0x08012c7e
 800bf88:	0800a221 	.word	0x0800a221
 800bf8c:	0800bced 	.word	0x0800bced

0800bf90 <_sbrk_r>:
 800bf90:	b538      	push	{r3, r4, r5, lr}
 800bf92:	4c06      	ldr	r4, [pc, #24]	; (800bfac <_sbrk_r+0x1c>)
 800bf94:	2300      	movs	r3, #0
 800bf96:	4605      	mov	r5, r0
 800bf98:	4608      	mov	r0, r1
 800bf9a:	6023      	str	r3, [r4, #0]
 800bf9c:	f7f7 f8fc 	bl	8003198 <_sbrk>
 800bfa0:	1c43      	adds	r3, r0, #1
 800bfa2:	d102      	bne.n	800bfaa <_sbrk_r+0x1a>
 800bfa4:	6823      	ldr	r3, [r4, #0]
 800bfa6:	b103      	cbz	r3, 800bfaa <_sbrk_r+0x1a>
 800bfa8:	602b      	str	r3, [r5, #0]
 800bfaa:	bd38      	pop	{r3, r4, r5, pc}
 800bfac:	2400d664 	.word	0x2400d664

0800bfb0 <__ascii_mbtowc>:
 800bfb0:	b082      	sub	sp, #8
 800bfb2:	b901      	cbnz	r1, 800bfb6 <__ascii_mbtowc+0x6>
 800bfb4:	a901      	add	r1, sp, #4
 800bfb6:	b142      	cbz	r2, 800bfca <__ascii_mbtowc+0x1a>
 800bfb8:	b14b      	cbz	r3, 800bfce <__ascii_mbtowc+0x1e>
 800bfba:	7813      	ldrb	r3, [r2, #0]
 800bfbc:	600b      	str	r3, [r1, #0]
 800bfbe:	7812      	ldrb	r2, [r2, #0]
 800bfc0:	1c10      	adds	r0, r2, #0
 800bfc2:	bf18      	it	ne
 800bfc4:	2001      	movne	r0, #1
 800bfc6:	b002      	add	sp, #8
 800bfc8:	4770      	bx	lr
 800bfca:	4610      	mov	r0, r2
 800bfcc:	e7fb      	b.n	800bfc6 <__ascii_mbtowc+0x16>
 800bfce:	f06f 0001 	mvn.w	r0, #1
 800bfd2:	e7f8      	b.n	800bfc6 <__ascii_mbtowc+0x16>

0800bfd4 <memmove>:
 800bfd4:	4288      	cmp	r0, r1
 800bfd6:	b510      	push	{r4, lr}
 800bfd8:	eb01 0302 	add.w	r3, r1, r2
 800bfdc:	d807      	bhi.n	800bfee <memmove+0x1a>
 800bfde:	1e42      	subs	r2, r0, #1
 800bfe0:	4299      	cmp	r1, r3
 800bfe2:	d00a      	beq.n	800bffa <memmove+0x26>
 800bfe4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfe8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bfec:	e7f8      	b.n	800bfe0 <memmove+0xc>
 800bfee:	4283      	cmp	r3, r0
 800bff0:	d9f5      	bls.n	800bfde <memmove+0xa>
 800bff2:	1881      	adds	r1, r0, r2
 800bff4:	1ad2      	subs	r2, r2, r3
 800bff6:	42d3      	cmn	r3, r2
 800bff8:	d100      	bne.n	800bffc <memmove+0x28>
 800bffa:	bd10      	pop	{r4, pc}
 800bffc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c000:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c004:	e7f7      	b.n	800bff6 <memmove+0x22>

0800c006 <__malloc_lock>:
 800c006:	4770      	bx	lr

0800c008 <__malloc_unlock>:
 800c008:	4770      	bx	lr

0800c00a <_realloc_r>:
 800c00a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c00c:	4607      	mov	r7, r0
 800c00e:	4614      	mov	r4, r2
 800c010:	460e      	mov	r6, r1
 800c012:	b921      	cbnz	r1, 800c01e <_realloc_r+0x14>
 800c014:	4611      	mov	r1, r2
 800c016:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c01a:	f7ff be0d 	b.w	800bc38 <_malloc_r>
 800c01e:	b922      	cbnz	r2, 800c02a <_realloc_r+0x20>
 800c020:	f7ff fdbc 	bl	800bb9c <_free_r>
 800c024:	4625      	mov	r5, r4
 800c026:	4628      	mov	r0, r5
 800c028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c02a:	f000 f821 	bl	800c070 <_malloc_usable_size_r>
 800c02e:	42a0      	cmp	r0, r4
 800c030:	d20f      	bcs.n	800c052 <_realloc_r+0x48>
 800c032:	4621      	mov	r1, r4
 800c034:	4638      	mov	r0, r7
 800c036:	f7ff fdff 	bl	800bc38 <_malloc_r>
 800c03a:	4605      	mov	r5, r0
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d0f2      	beq.n	800c026 <_realloc_r+0x1c>
 800c040:	4631      	mov	r1, r6
 800c042:	4622      	mov	r2, r4
 800c044:	f7ff fab6 	bl	800b5b4 <memcpy>
 800c048:	4631      	mov	r1, r6
 800c04a:	4638      	mov	r0, r7
 800c04c:	f7ff fda6 	bl	800bb9c <_free_r>
 800c050:	e7e9      	b.n	800c026 <_realloc_r+0x1c>
 800c052:	4635      	mov	r5, r6
 800c054:	e7e7      	b.n	800c026 <_realloc_r+0x1c>

0800c056 <__ascii_wctomb>:
 800c056:	b149      	cbz	r1, 800c06c <__ascii_wctomb+0x16>
 800c058:	2aff      	cmp	r2, #255	; 0xff
 800c05a:	bf85      	ittet	hi
 800c05c:	238a      	movhi	r3, #138	; 0x8a
 800c05e:	6003      	strhi	r3, [r0, #0]
 800c060:	700a      	strbls	r2, [r1, #0]
 800c062:	f04f 30ff 	movhi.w	r0, #4294967295
 800c066:	bf98      	it	ls
 800c068:	2001      	movls	r0, #1
 800c06a:	4770      	bx	lr
 800c06c:	4608      	mov	r0, r1
 800c06e:	4770      	bx	lr

0800c070 <_malloc_usable_size_r>:
 800c070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c074:	1f18      	subs	r0, r3, #4
 800c076:	2b00      	cmp	r3, #0
 800c078:	bfbc      	itt	lt
 800c07a:	580b      	ldrlt	r3, [r1, r0]
 800c07c:	18c0      	addlt	r0, r0, r3
 800c07e:	4770      	bx	lr

0800c080 <cos>:
 800c080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c082:	eeb0 7b40 	vmov.f64	d7, d0
 800c086:	ee17 3a90 	vmov	r3, s15
 800c08a:	4a19      	ldr	r2, [pc, #100]	; (800c0f0 <cos+0x70>)
 800c08c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c090:	4293      	cmp	r3, r2
 800c092:	dc04      	bgt.n	800c09e <cos+0x1e>
 800c094:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800c0e8 <cos+0x68>
 800c098:	f000 ff4a 	bl	800cf30 <__kernel_cos>
 800c09c:	e004      	b.n	800c0a8 <cos+0x28>
 800c09e:	4a15      	ldr	r2, [pc, #84]	; (800c0f4 <cos+0x74>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	dd04      	ble.n	800c0ae <cos+0x2e>
 800c0a4:	ee30 0b40 	vsub.f64	d0, d0, d0
 800c0a8:	b005      	add	sp, #20
 800c0aa:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0ae:	4668      	mov	r0, sp
 800c0b0:	f000 fdfe 	bl	800ccb0 <__ieee754_rem_pio2>
 800c0b4:	f000 0003 	and.w	r0, r0, #3
 800c0b8:	2801      	cmp	r0, #1
 800c0ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c0be:	ed9d 0b00 	vldr	d0, [sp]
 800c0c2:	d007      	beq.n	800c0d4 <cos+0x54>
 800c0c4:	2802      	cmp	r0, #2
 800c0c6:	d00a      	beq.n	800c0de <cos+0x5e>
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d0e5      	beq.n	800c098 <cos+0x18>
 800c0cc:	2001      	movs	r0, #1
 800c0ce:	f001 fa37 	bl	800d540 <__kernel_sin>
 800c0d2:	e7e9      	b.n	800c0a8 <cos+0x28>
 800c0d4:	f001 fa34 	bl	800d540 <__kernel_sin>
 800c0d8:	eeb1 0b40 	vneg.f64	d0, d0
 800c0dc:	e7e4      	b.n	800c0a8 <cos+0x28>
 800c0de:	f000 ff27 	bl	800cf30 <__kernel_cos>
 800c0e2:	e7f9      	b.n	800c0d8 <cos+0x58>
 800c0e4:	f3af 8000 	nop.w
	...
 800c0f0:	3fe921fb 	.word	0x3fe921fb
 800c0f4:	7fefffff 	.word	0x7fefffff

0800c0f8 <sin>:
 800c0f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0fa:	eeb0 7b40 	vmov.f64	d7, d0
 800c0fe:	ee17 3a90 	vmov	r3, s15
 800c102:	4a19      	ldr	r2, [pc, #100]	; (800c168 <sin+0x70>)
 800c104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c108:	4293      	cmp	r3, r2
 800c10a:	dc05      	bgt.n	800c118 <sin+0x20>
 800c10c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800c160 <sin+0x68>
 800c110:	2000      	movs	r0, #0
 800c112:	f001 fa15 	bl	800d540 <__kernel_sin>
 800c116:	e004      	b.n	800c122 <sin+0x2a>
 800c118:	4a14      	ldr	r2, [pc, #80]	; (800c16c <sin+0x74>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	dd04      	ble.n	800c128 <sin+0x30>
 800c11e:	ee30 0b40 	vsub.f64	d0, d0, d0
 800c122:	b005      	add	sp, #20
 800c124:	f85d fb04 	ldr.w	pc, [sp], #4
 800c128:	4668      	mov	r0, sp
 800c12a:	f000 fdc1 	bl	800ccb0 <__ieee754_rem_pio2>
 800c12e:	f000 0003 	and.w	r0, r0, #3
 800c132:	2801      	cmp	r0, #1
 800c134:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c138:	ed9d 0b00 	vldr	d0, [sp]
 800c13c:	d004      	beq.n	800c148 <sin+0x50>
 800c13e:	2802      	cmp	r0, #2
 800c140:	d005      	beq.n	800c14e <sin+0x56>
 800c142:	b950      	cbnz	r0, 800c15a <sin+0x62>
 800c144:	2001      	movs	r0, #1
 800c146:	e7e4      	b.n	800c112 <sin+0x1a>
 800c148:	f000 fef2 	bl	800cf30 <__kernel_cos>
 800c14c:	e7e9      	b.n	800c122 <sin+0x2a>
 800c14e:	2001      	movs	r0, #1
 800c150:	f001 f9f6 	bl	800d540 <__kernel_sin>
 800c154:	eeb1 0b40 	vneg.f64	d0, d0
 800c158:	e7e3      	b.n	800c122 <sin+0x2a>
 800c15a:	f000 fee9 	bl	800cf30 <__kernel_cos>
 800c15e:	e7f9      	b.n	800c154 <sin+0x5c>
	...
 800c168:	3fe921fb 	.word	0x3fe921fb
 800c16c:	7fefffff 	.word	0x7fefffff

0800c170 <log10>:
 800c170:	b500      	push	{lr}
 800c172:	ed2d 8b02 	vpush	{d8}
 800c176:	eeb0 8b40 	vmov.f64	d8, d0
 800c17a:	b08b      	sub	sp, #44	; 0x2c
 800c17c:	f000 f998 	bl	800c4b0 <__ieee754_log10>
 800c180:	4b2d      	ldr	r3, [pc, #180]	; (800c238 <log10+0xc8>)
 800c182:	f993 3000 	ldrsb.w	r3, [r3]
 800c186:	1c5a      	adds	r2, r3, #1
 800c188:	d051      	beq.n	800c22e <log10+0xbe>
 800c18a:	eeb4 8b48 	vcmp.f64	d8, d8
 800c18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c192:	d64c      	bvs.n	800c22e <log10+0xbe>
 800c194:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800c198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c19c:	d847      	bhi.n	800c22e <log10+0xbe>
 800c19e:	4a27      	ldr	r2, [pc, #156]	; (800c23c <log10+0xcc>)
 800c1a0:	9201      	str	r2, [sp, #4]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	9208      	str	r2, [sp, #32]
 800c1a6:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c1aa:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c1ae:	b993      	cbnz	r3, 800c1d6 <log10+0x66>
 800c1b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c1b4:	4922      	ldr	r1, [pc, #136]	; (800c240 <log10+0xd0>)
 800c1b6:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 800c1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c1c2:	d025      	beq.n	800c210 <log10+0xa0>
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	2b02      	cmp	r3, #2
 800c1c8:	9200      	str	r2, [sp, #0]
 800c1ca:	d116      	bne.n	800c1fa <log10+0x8a>
 800c1cc:	f7fd ff70 	bl	800a0b0 <__errno>
 800c1d0:	2321      	movs	r3, #33	; 0x21
 800c1d2:	6003      	str	r3, [r0, #0]
 800c1d4:	e016      	b.n	800c204 <log10+0x94>
 800c1d6:	491b      	ldr	r1, [pc, #108]	; (800c244 <log10+0xd4>)
 800c1d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c1dc:	2000      	movs	r0, #0
 800c1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c1e6:	d1ed      	bne.n	800c1c4 <log10+0x54>
 800c1e8:	2202      	movs	r2, #2
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	9200      	str	r2, [sp, #0]
 800c1ee:	d111      	bne.n	800c214 <log10+0xa4>
 800c1f0:	f7fd ff5e 	bl	800a0b0 <__errno>
 800c1f4:	2322      	movs	r3, #34	; 0x22
 800c1f6:	6003      	str	r3, [r0, #0]
 800c1f8:	e011      	b.n	800c21e <log10+0xae>
 800c1fa:	4668      	mov	r0, sp
 800c1fc:	f001 fa84 	bl	800d708 <matherr>
 800c200:	2800      	cmp	r0, #0
 800c202:	d0e3      	beq.n	800c1cc <log10+0x5c>
 800c204:	4810      	ldr	r0, [pc, #64]	; (800c248 <log10+0xd8>)
 800c206:	f001 fa83 	bl	800d710 <nan>
 800c20a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800c20e:	e006      	b.n	800c21e <log10+0xae>
 800c210:	2302      	movs	r3, #2
 800c212:	9300      	str	r3, [sp, #0]
 800c214:	4668      	mov	r0, sp
 800c216:	f001 fa77 	bl	800d708 <matherr>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d0e8      	beq.n	800c1f0 <log10+0x80>
 800c21e:	9b08      	ldr	r3, [sp, #32]
 800c220:	b11b      	cbz	r3, 800c22a <log10+0xba>
 800c222:	f7fd ff45 	bl	800a0b0 <__errno>
 800c226:	9b08      	ldr	r3, [sp, #32]
 800c228:	6003      	str	r3, [r0, #0]
 800c22a:	ed9d 0b06 	vldr	d0, [sp, #24]
 800c22e:	b00b      	add	sp, #44	; 0x2c
 800c230:	ecbd 8b02 	vpop	{d8}
 800c234:	f85d fb04 	ldr.w	pc, [sp], #4
 800c238:	240003d4 	.word	0x240003d4
 800c23c:	08012d90 	.word	0x08012d90
 800c240:	c7efffff 	.word	0xc7efffff
 800c244:	fff00000 	.word	0xfff00000
 800c248:	08012c79 	.word	0x08012c79
 800c24c:	00000000 	.word	0x00000000

0800c250 <pow>:
 800c250:	b570      	push	{r4, r5, r6, lr}
 800c252:	ed2d 8b0a 	vpush	{d8-d12}
 800c256:	eeb0 9b40 	vmov.f64	d9, d0
 800c25a:	eeb0 8b41 	vmov.f64	d8, d1
 800c25e:	4c8c      	ldr	r4, [pc, #560]	; (800c490 <pow+0x240>)
 800c260:	b08a      	sub	sp, #40	; 0x28
 800c262:	f000 f99d 	bl	800c5a0 <__ieee754_pow>
 800c266:	f994 3000 	ldrsb.w	r3, [r4]
 800c26a:	eeb0 ab40 	vmov.f64	d10, d0
 800c26e:	1c5a      	adds	r2, r3, #1
 800c270:	4626      	mov	r6, r4
 800c272:	d04b      	beq.n	800c30c <pow+0xbc>
 800c274:	eeb4 8b48 	vcmp.f64	d8, d8
 800c278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c27c:	d646      	bvs.n	800c30c <pow+0xbc>
 800c27e:	eeb4 9b49 	vcmp.f64	d9, d9
 800c282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c286:	d719      	bvc.n	800c2bc <pow+0x6c>
 800c288:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c290:	d13c      	bne.n	800c30c <pow+0xbc>
 800c292:	2201      	movs	r2, #1
 800c294:	9200      	str	r2, [sp, #0]
 800c296:	497f      	ldr	r1, [pc, #508]	; (800c494 <pow+0x244>)
 800c298:	4a7f      	ldr	r2, [pc, #508]	; (800c498 <pow+0x248>)
 800c29a:	9201      	str	r2, [sp, #4]
 800c29c:	2000      	movs	r0, #0
 800c29e:	2200      	movs	r2, #0
 800c2a0:	2b02      	cmp	r3, #2
 800c2a2:	9208      	str	r2, [sp, #32]
 800c2a4:	ed8d 9b02 	vstr	d9, [sp, #8]
 800c2a8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c2ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c2b0:	d02a      	beq.n	800c308 <pow+0xb8>
 800c2b2:	4668      	mov	r0, sp
 800c2b4:	f001 fa28 	bl	800d708 <matherr>
 800c2b8:	bb00      	cbnz	r0, 800c2fc <pow+0xac>
 800c2ba:	e04e      	b.n	800c35a <pow+0x10a>
 800c2bc:	ed9f bb72 	vldr	d11, [pc, #456]	; 800c488 <pow+0x238>
 800c2c0:	eeb4 9b4b 	vcmp.f64	d9, d11
 800c2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c8:	eeb0 cb4b 	vmov.f64	d12, d11
 800c2cc:	d14a      	bne.n	800c364 <pow+0x114>
 800c2ce:	eeb4 8b4b 	vcmp.f64	d8, d11
 800c2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d6:	d11f      	bne.n	800c318 <pow+0xc8>
 800c2d8:	2201      	movs	r2, #1
 800c2da:	9200      	str	r2, [sp, #0]
 800c2dc:	4a6e      	ldr	r2, [pc, #440]	; (800c498 <pow+0x248>)
 800c2de:	9201      	str	r2, [sp, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	9208      	str	r2, [sp, #32]
 800c2e4:	ed8d 9b02 	vstr	d9, [sp, #8]
 800c2e8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c2ec:	ed8d bb06 	vstr	d11, [sp, #24]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d0de      	beq.n	800c2b2 <pow+0x62>
 800c2f4:	4b67      	ldr	r3, [pc, #412]	; (800c494 <pow+0x244>)
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c2fc:	9b08      	ldr	r3, [sp, #32]
 800c2fe:	b11b      	cbz	r3, 800c308 <pow+0xb8>
 800c300:	f7fd fed6 	bl	800a0b0 <__errno>
 800c304:	9b08      	ldr	r3, [sp, #32]
 800c306:	6003      	str	r3, [r0, #0]
 800c308:	ed9d ab06 	vldr	d10, [sp, #24]
 800c30c:	eeb0 0b4a 	vmov.f64	d0, d10
 800c310:	b00a      	add	sp, #40	; 0x28
 800c312:	ecbd 8b0a 	vpop	{d8-d12}
 800c316:	bd70      	pop	{r4, r5, r6, pc}
 800c318:	eeb0 0b48 	vmov.f64	d0, d8
 800c31c:	f001 f971 	bl	800d602 <finite>
 800c320:	2800      	cmp	r0, #0
 800c322:	d0f3      	beq.n	800c30c <pow+0xbc>
 800c324:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800c328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c32c:	d5ee      	bpl.n	800c30c <pow+0xbc>
 800c32e:	2301      	movs	r3, #1
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	4b59      	ldr	r3, [pc, #356]	; (800c498 <pow+0x248>)
 800c334:	9301      	str	r3, [sp, #4]
 800c336:	2300      	movs	r3, #0
 800c338:	9308      	str	r3, [sp, #32]
 800c33a:	f994 3000 	ldrsb.w	r3, [r4]
 800c33e:	ed8d 9b02 	vstr	d9, [sp, #8]
 800c342:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c346:	b913      	cbnz	r3, 800c34e <pow+0xfe>
 800c348:	ed8d bb06 	vstr	d11, [sp, #24]
 800c34c:	e7b1      	b.n	800c2b2 <pow+0x62>
 800c34e:	4953      	ldr	r1, [pc, #332]	; (800c49c <pow+0x24c>)
 800c350:	2000      	movs	r0, #0
 800c352:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c356:	2b02      	cmp	r3, #2
 800c358:	d1ab      	bne.n	800c2b2 <pow+0x62>
 800c35a:	f7fd fea9 	bl	800a0b0 <__errno>
 800c35e:	2321      	movs	r3, #33	; 0x21
 800c360:	6003      	str	r3, [r0, #0]
 800c362:	e7cb      	b.n	800c2fc <pow+0xac>
 800c364:	f001 f94d 	bl	800d602 <finite>
 800c368:	4605      	mov	r5, r0
 800c36a:	2800      	cmp	r0, #0
 800c36c:	d164      	bne.n	800c438 <pow+0x1e8>
 800c36e:	eeb0 0b49 	vmov.f64	d0, d9
 800c372:	f001 f946 	bl	800d602 <finite>
 800c376:	2800      	cmp	r0, #0
 800c378:	d05e      	beq.n	800c438 <pow+0x1e8>
 800c37a:	eeb0 0b48 	vmov.f64	d0, d8
 800c37e:	f001 f940 	bl	800d602 <finite>
 800c382:	2800      	cmp	r0, #0
 800c384:	d058      	beq.n	800c438 <pow+0x1e8>
 800c386:	eeb4 ab4a 	vcmp.f64	d10, d10
 800c38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c38e:	f994 3000 	ldrsb.w	r3, [r4]
 800c392:	4a41      	ldr	r2, [pc, #260]	; (800c498 <pow+0x248>)
 800c394:	d70e      	bvc.n	800c3b4 <pow+0x164>
 800c396:	2101      	movs	r1, #1
 800c398:	e9cd 1200 	strd	r1, r2, [sp]
 800c39c:	9508      	str	r5, [sp, #32]
 800c39e:	ed8d 9b02 	vstr	d9, [sp, #8]
 800c3a2:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d0ce      	beq.n	800c348 <pow+0xf8>
 800c3aa:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 800c3ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c3b2:	e7d0      	b.n	800c356 <pow+0x106>
 800c3b4:	2103      	movs	r1, #3
 800c3b6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c3ba:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c3be:	ee28 8b07 	vmul.f64	d8, d8, d7
 800c3c2:	e9cd 1200 	strd	r1, r2, [sp]
 800c3c6:	9508      	str	r5, [sp, #32]
 800c3c8:	ed8d 9b02 	vstr	d9, [sp, #8]
 800c3cc:	b9fb      	cbnz	r3, 800c40e <pow+0x1be>
 800c3ce:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800c3d2:	4b33      	ldr	r3, [pc, #204]	; (800c4a0 <pow+0x250>)
 800c3d4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c3e0:	d54b      	bpl.n	800c47a <pow+0x22a>
 800c3e2:	eeb0 0b48 	vmov.f64	d0, d8
 800c3e6:	f001 f99b 	bl	800d720 <rint>
 800c3ea:	eeb4 0b48 	vcmp.f64	d0, d8
 800c3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3f2:	d004      	beq.n	800c3fe <pow+0x1ae>
 800c3f4:	4b2b      	ldr	r3, [pc, #172]	; (800c4a4 <pow+0x254>)
 800c3f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c3fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c3fe:	f996 3000 	ldrsb.w	r3, [r6]
 800c402:	2b02      	cmp	r3, #2
 800c404:	d139      	bne.n	800c47a <pow+0x22a>
 800c406:	f7fd fe53 	bl	800a0b0 <__errno>
 800c40a:	2322      	movs	r3, #34	; 0x22
 800c40c:	e7a8      	b.n	800c360 <pow+0x110>
 800c40e:	4b26      	ldr	r3, [pc, #152]	; (800c4a8 <pow+0x258>)
 800c410:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800c414:	2200      	movs	r2, #0
 800c416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c41a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c41e:	d5ee      	bpl.n	800c3fe <pow+0x1ae>
 800c420:	eeb0 0b48 	vmov.f64	d0, d8
 800c424:	f001 f97c 	bl	800d720 <rint>
 800c428:	eeb4 0b48 	vcmp.f64	d0, d8
 800c42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c430:	d0e5      	beq.n	800c3fe <pow+0x1ae>
 800c432:	2200      	movs	r2, #0
 800c434:	4b19      	ldr	r3, [pc, #100]	; (800c49c <pow+0x24c>)
 800c436:	e7e0      	b.n	800c3fa <pow+0x1aa>
 800c438:	eeb5 ab40 	vcmp.f64	d10, #0.0
 800c43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c440:	f47f af64 	bne.w	800c30c <pow+0xbc>
 800c444:	eeb0 0b49 	vmov.f64	d0, d9
 800c448:	f001 f8db 	bl	800d602 <finite>
 800c44c:	2800      	cmp	r0, #0
 800c44e:	f43f af5d 	beq.w	800c30c <pow+0xbc>
 800c452:	eeb0 0b48 	vmov.f64	d0, d8
 800c456:	f001 f8d4 	bl	800d602 <finite>
 800c45a:	2800      	cmp	r0, #0
 800c45c:	f43f af56 	beq.w	800c30c <pow+0xbc>
 800c460:	2304      	movs	r3, #4
 800c462:	9300      	str	r3, [sp, #0]
 800c464:	4b0c      	ldr	r3, [pc, #48]	; (800c498 <pow+0x248>)
 800c466:	9301      	str	r3, [sp, #4]
 800c468:	2300      	movs	r3, #0
 800c46a:	9308      	str	r3, [sp, #32]
 800c46c:	ed8d 9b02 	vstr	d9, [sp, #8]
 800c470:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c474:	ed8d cb06 	vstr	d12, [sp, #24]
 800c478:	e7c1      	b.n	800c3fe <pow+0x1ae>
 800c47a:	4668      	mov	r0, sp
 800c47c:	f001 f944 	bl	800d708 <matherr>
 800c480:	2800      	cmp	r0, #0
 800c482:	f47f af3b 	bne.w	800c2fc <pow+0xac>
 800c486:	e7be      	b.n	800c406 <pow+0x1b6>
	...
 800c490:	240003d4 	.word	0x240003d4
 800c494:	3ff00000 	.word	0x3ff00000
 800c498:	08012d96 	.word	0x08012d96
 800c49c:	fff00000 	.word	0xfff00000
 800c4a0:	47efffff 	.word	0x47efffff
 800c4a4:	c7efffff 	.word	0xc7efffff
 800c4a8:	7ff00000 	.word	0x7ff00000
 800c4ac:	00000000 	.word	0x00000000

0800c4b0 <__ieee754_log10>:
 800c4b0:	b500      	push	{lr}
 800c4b2:	ed2d 8b02 	vpush	{d8}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	ed8d 0b00 	vstr	d0, [sp]
 800c4bc:	9a01      	ldr	r2, [sp, #4]
 800c4be:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800c4c2:	da29      	bge.n	800c518 <__ieee754_log10+0x68>
 800c4c4:	9900      	ldr	r1, [sp, #0]
 800c4c6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c4ca:	430b      	orrs	r3, r1
 800c4cc:	d10a      	bne.n	800c4e4 <__ieee754_log10+0x34>
 800c4ce:	ed9f 6b26 	vldr	d6, [pc, #152]	; 800c568 <__ieee754_log10+0xb8>
 800c4d2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800c570 <__ieee754_log10+0xc0>
 800c4d6:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800c4da:	b003      	add	sp, #12
 800c4dc:	ecbd 8b02 	vpop	{d8}
 800c4e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800c4e4:	2a00      	cmp	r2, #0
 800c4e6:	da04      	bge.n	800c4f2 <__ieee754_log10+0x42>
 800c4e8:	ed9d 7b00 	vldr	d7, [sp]
 800c4ec:	ee37 6b47 	vsub.f64	d6, d7, d7
 800c4f0:	e7ef      	b.n	800c4d2 <__ieee754_log10+0x22>
 800c4f2:	ed9d 6b00 	vldr	d6, [sp]
 800c4f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c578 <__ieee754_log10+0xc8>
 800c4fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c4fe:	ed8d 7b00 	vstr	d7, [sp]
 800c502:	9a01      	ldr	r2, [sp, #4]
 800c504:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800c508:	4b23      	ldr	r3, [pc, #140]	; (800c598 <__ieee754_log10+0xe8>)
 800c50a:	429a      	cmp	r2, r3
 800c50c:	dd06      	ble.n	800c51c <__ieee754_log10+0x6c>
 800c50e:	ed9d 7b00 	vldr	d7, [sp]
 800c512:	ee37 0b07 	vadd.f64	d0, d7, d7
 800c516:	e7e0      	b.n	800c4da <__ieee754_log10+0x2a>
 800c518:	2100      	movs	r1, #0
 800c51a:	e7f5      	b.n	800c508 <__ieee754_log10+0x58>
 800c51c:	1513      	asrs	r3, r2, #20
 800c51e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c522:	440b      	add	r3, r1
 800c524:	0fd8      	lsrs	r0, r3, #31
 800c526:	4403      	add	r3, r0
 800c528:	ee07 3a90 	vmov	s15, r3
 800c52c:	f3c2 0113 	ubfx	r1, r2, #0, #20
 800c530:	f5c0 707f 	rsb	r0, r0, #1020	; 0x3fc
 800c534:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c538:	3003      	adds	r0, #3
 800c53a:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800c53e:	ec43 2b10 	vmov	d0, r2, r3
 800c542:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800c546:	f001 f9f7 	bl	800d938 <__ieee754_log>
 800c54a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800c580 <__ieee754_log10+0xd0>
 800c54e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c552:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800c588 <__ieee754_log10+0xd8>
 800c556:	eea8 0b07 	vfma.f64	d0, d8, d7
 800c55a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800c590 <__ieee754_log10+0xe0>
 800c55e:	eea8 0b07 	vfma.f64	d0, d8, d7
 800c562:	e7ba      	b.n	800c4da <__ieee754_log10+0x2a>
 800c564:	f3af 8000 	nop.w
 800c568:	00000000 	.word	0x00000000
 800c56c:	c3500000 	.word	0xc3500000
	...
 800c57c:	43500000 	.word	0x43500000
 800c580:	1526e50e 	.word	0x1526e50e
 800c584:	3fdbcb7b 	.word	0x3fdbcb7b
 800c588:	11f12b36 	.word	0x11f12b36
 800c58c:	3d59fef3 	.word	0x3d59fef3
 800c590:	509f6000 	.word	0x509f6000
 800c594:	3fd34413 	.word	0x3fd34413
 800c598:	7fefffff 	.word	0x7fefffff
 800c59c:	00000000 	.word	0x00000000

0800c5a0 <__ieee754_pow>:
 800c5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a4:	ec57 6b11 	vmov	r6, r7, d1
 800c5a8:	ed2d 8b02 	vpush	{d8}
 800c5ac:	eeb0 8b40 	vmov.f64	d8, d0
 800c5b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c5b4:	ea58 0306 	orrs.w	r3, r8, r6
 800c5b8:	b085      	sub	sp, #20
 800c5ba:	46b9      	mov	r9, r7
 800c5bc:	ee11 2a10 	vmov	r2, s2
 800c5c0:	f000 8306 	beq.w	800cbd0 <__ieee754_pow+0x630>
 800c5c4:	ee18 aa90 	vmov	sl, s17
 800c5c8:	4bb9      	ldr	r3, [pc, #740]	; (800c8b0 <__ieee754_pow+0x310>)
 800c5ca:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 800c5ce:	429c      	cmp	r4, r3
 800c5d0:	ee10 ba10 	vmov	fp, s0
 800c5d4:	dc0b      	bgt.n	800c5ee <__ieee754_pow+0x4e>
 800c5d6:	d105      	bne.n	800c5e4 <__ieee754_pow+0x44>
 800c5d8:	f1bb 0f00 	cmp.w	fp, #0
 800c5dc:	d107      	bne.n	800c5ee <__ieee754_pow+0x4e>
 800c5de:	45a0      	cmp	r8, r4
 800c5e0:	dc0d      	bgt.n	800c5fe <__ieee754_pow+0x5e>
 800c5e2:	e001      	b.n	800c5e8 <__ieee754_pow+0x48>
 800c5e4:	4598      	cmp	r8, r3
 800c5e6:	dc02      	bgt.n	800c5ee <__ieee754_pow+0x4e>
 800c5e8:	4598      	cmp	r8, r3
 800c5ea:	d110      	bne.n	800c60e <__ieee754_pow+0x6e>
 800c5ec:	b17a      	cbz	r2, 800c60e <__ieee754_pow+0x6e>
 800c5ee:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c5f2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c5f6:	ea54 030b 	orrs.w	r3, r4, fp
 800c5fa:	f000 82e9 	beq.w	800cbd0 <__ieee754_pow+0x630>
 800c5fe:	48ad      	ldr	r0, [pc, #692]	; (800c8b4 <__ieee754_pow+0x314>)
 800c600:	b005      	add	sp, #20
 800c602:	ecbd 8b02 	vpop	{d8}
 800c606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60a:	f001 b881 	b.w	800d710 <nan>
 800c60e:	f1ba 0f00 	cmp.w	sl, #0
 800c612:	da4e      	bge.n	800c6b2 <__ieee754_pow+0x112>
 800c614:	4ba8      	ldr	r3, [pc, #672]	; (800c8b8 <__ieee754_pow+0x318>)
 800c616:	4598      	cmp	r8, r3
 800c618:	dc49      	bgt.n	800c6ae <__ieee754_pow+0x10e>
 800c61a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c61e:	4598      	cmp	r8, r3
 800c620:	dd47      	ble.n	800c6b2 <__ieee754_pow+0x112>
 800c622:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c626:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c62a:	2b14      	cmp	r3, #20
 800c62c:	dd24      	ble.n	800c678 <__ieee754_pow+0xd8>
 800c62e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c632:	fa22 f503 	lsr.w	r5, r2, r3
 800c636:	fa05 f303 	lsl.w	r3, r5, r3
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d139      	bne.n	800c6b2 <__ieee754_pow+0x112>
 800c63e:	f005 0501 	and.w	r5, r5, #1
 800c642:	f1c5 0502 	rsb	r5, r5, #2
 800c646:	2a00      	cmp	r2, #0
 800c648:	d15a      	bne.n	800c700 <__ieee754_pow+0x160>
 800c64a:	4b99      	ldr	r3, [pc, #612]	; (800c8b0 <__ieee754_pow+0x310>)
 800c64c:	4598      	cmp	r8, r3
 800c64e:	d122      	bne.n	800c696 <__ieee754_pow+0xf6>
 800c650:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c654:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c658:	ea53 030b 	orrs.w	r3, r3, fp
 800c65c:	f000 82b8 	beq.w	800cbd0 <__ieee754_pow+0x630>
 800c660:	4b96      	ldr	r3, [pc, #600]	; (800c8bc <__ieee754_pow+0x31c>)
 800c662:	429c      	cmp	r4, r3
 800c664:	dd27      	ble.n	800c6b6 <__ieee754_pow+0x116>
 800c666:	f1b9 0f00 	cmp.w	r9, #0
 800c66a:	f280 82b4 	bge.w	800cbd6 <__ieee754_pow+0x636>
 800c66e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 800c880 <__ieee754_pow+0x2e0>
 800c672:	ed8d 7b00 	vstr	d7, [sp]
 800c676:	e026      	b.n	800c6c6 <__ieee754_pow+0x126>
 800c678:	2a00      	cmp	r2, #0
 800c67a:	d140      	bne.n	800c6fe <__ieee754_pow+0x15e>
 800c67c:	f1c3 0314 	rsb	r3, r3, #20
 800c680:	fa48 f503 	asr.w	r5, r8, r3
 800c684:	fa05 f303 	lsl.w	r3, r5, r3
 800c688:	4543      	cmp	r3, r8
 800c68a:	f040 82aa 	bne.w	800cbe2 <__ieee754_pow+0x642>
 800c68e:	f005 0501 	and.w	r5, r5, #1
 800c692:	f1c5 0502 	rsb	r5, r5, #2
 800c696:	4b8a      	ldr	r3, [pc, #552]	; (800c8c0 <__ieee754_pow+0x320>)
 800c698:	4598      	cmp	r8, r3
 800c69a:	d11b      	bne.n	800c6d4 <__ieee754_pow+0x134>
 800c69c:	f1b9 0f00 	cmp.w	r9, #0
 800c6a0:	f280 829c 	bge.w	800cbdc <__ieee754_pow+0x63c>
 800c6a4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c6a8:	ee87 7b08 	vdiv.f64	d7, d7, d8
 800c6ac:	e7e1      	b.n	800c672 <__ieee754_pow+0xd2>
 800c6ae:	2502      	movs	r5, #2
 800c6b0:	e7c9      	b.n	800c646 <__ieee754_pow+0xa6>
 800c6b2:	2500      	movs	r5, #0
 800c6b4:	e7c7      	b.n	800c646 <__ieee754_pow+0xa6>
 800c6b6:	f1b9 0f00 	cmp.w	r9, #0
 800c6ba:	dad8      	bge.n	800c66e <__ieee754_pow+0xce>
 800c6bc:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 800c6c0:	4633      	mov	r3, r6
 800c6c2:	e9cd 3400 	strd	r3, r4, [sp]
 800c6c6:	ed9d 0b00 	vldr	d0, [sp]
 800c6ca:	b005      	add	sp, #20
 800c6cc:	ecbd 8b02 	vpop	{d8}
 800c6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c6d8:	d102      	bne.n	800c6e0 <__ieee754_pow+0x140>
 800c6da:	ee28 7b08 	vmul.f64	d7, d8, d8
 800c6de:	e7c8      	b.n	800c672 <__ieee754_pow+0xd2>
 800c6e0:	4b78      	ldr	r3, [pc, #480]	; (800c8c4 <__ieee754_pow+0x324>)
 800c6e2:	4599      	cmp	r9, r3
 800c6e4:	d10c      	bne.n	800c700 <__ieee754_pow+0x160>
 800c6e6:	f1ba 0f00 	cmp.w	sl, #0
 800c6ea:	db09      	blt.n	800c700 <__ieee754_pow+0x160>
 800c6ec:	eeb0 0b48 	vmov.f64	d0, d8
 800c6f0:	b005      	add	sp, #20
 800c6f2:	ecbd 8b02 	vpop	{d8}
 800c6f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6fa:	f000 bc15 	b.w	800cf28 <__ieee754_sqrt>
 800c6fe:	2500      	movs	r5, #0
 800c700:	eeb0 0b48 	vmov.f64	d0, d8
 800c704:	f000 ff74 	bl	800d5f0 <fabs>
 800c708:	ed8d 0b00 	vstr	d0, [sp]
 800c70c:	f1bb 0f00 	cmp.w	fp, #0
 800c710:	d128      	bne.n	800c764 <__ieee754_pow+0x1c4>
 800c712:	b124      	cbz	r4, 800c71e <__ieee754_pow+0x17e>
 800c714:	4b6a      	ldr	r3, [pc, #424]	; (800c8c0 <__ieee754_pow+0x320>)
 800c716:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d122      	bne.n	800c764 <__ieee754_pow+0x1c4>
 800c71e:	f1b9 0f00 	cmp.w	r9, #0
 800c722:	da07      	bge.n	800c734 <__ieee754_pow+0x194>
 800c724:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c728:	ed9d 6b00 	vldr	d6, [sp]
 800c72c:	ee87 7b06 	vdiv.f64	d7, d7, d6
 800c730:	ed8d 7b00 	vstr	d7, [sp]
 800c734:	f1ba 0f00 	cmp.w	sl, #0
 800c738:	dac5      	bge.n	800c6c6 <__ieee754_pow+0x126>
 800c73a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c73e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c742:	ea54 0305 	orrs.w	r3, r4, r5
 800c746:	d106      	bne.n	800c756 <__ieee754_pow+0x1b6>
 800c748:	ed9d 7b00 	vldr	d7, [sp]
 800c74c:	ee37 7b47 	vsub.f64	d7, d7, d7
 800c750:	ee87 7b07 	vdiv.f64	d7, d7, d7
 800c754:	e78d      	b.n	800c672 <__ieee754_pow+0xd2>
 800c756:	2d01      	cmp	r5, #1
 800c758:	d1b5      	bne.n	800c6c6 <__ieee754_pow+0x126>
 800c75a:	ed9d 7b00 	vldr	d7, [sp]
 800c75e:	eeb1 7b47 	vneg.f64	d7, d7
 800c762:	e786      	b.n	800c672 <__ieee754_pow+0xd2>
 800c764:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800c768:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c76c:	ea55 030a 	orrs.w	r3, r5, sl
 800c770:	d104      	bne.n	800c77c <__ieee754_pow+0x1dc>
 800c772:	ee38 8b48 	vsub.f64	d8, d8, d8
 800c776:	ee88 7b08 	vdiv.f64	d7, d8, d8
 800c77a:	e77a      	b.n	800c672 <__ieee754_pow+0xd2>
 800c77c:	4b52      	ldr	r3, [pc, #328]	; (800c8c8 <__ieee754_pow+0x328>)
 800c77e:	4598      	cmp	r8, r3
 800c780:	f340 80a8 	ble.w	800c8d4 <__ieee754_pow+0x334>
 800c784:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c788:	4598      	cmp	r8, r3
 800c78a:	dd0b      	ble.n	800c7a4 <__ieee754_pow+0x204>
 800c78c:	4b4b      	ldr	r3, [pc, #300]	; (800c8bc <__ieee754_pow+0x31c>)
 800c78e:	429c      	cmp	r4, r3
 800c790:	dc0e      	bgt.n	800c7b0 <__ieee754_pow+0x210>
 800c792:	f1b9 0f00 	cmp.w	r9, #0
 800c796:	f6bf af6a 	bge.w	800c66e <__ieee754_pow+0xce>
 800c79a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800c888 <__ieee754_pow+0x2e8>
 800c79e:	ee27 7b07 	vmul.f64	d7, d7, d7
 800c7a2:	e766      	b.n	800c672 <__ieee754_pow+0xd2>
 800c7a4:	4b49      	ldr	r3, [pc, #292]	; (800c8cc <__ieee754_pow+0x32c>)
 800c7a6:	429c      	cmp	r4, r3
 800c7a8:	ddf3      	ble.n	800c792 <__ieee754_pow+0x1f2>
 800c7aa:	4b45      	ldr	r3, [pc, #276]	; (800c8c0 <__ieee754_pow+0x320>)
 800c7ac:	429c      	cmp	r4, r3
 800c7ae:	dd03      	ble.n	800c7b8 <__ieee754_pow+0x218>
 800c7b0:	f1b9 0f00 	cmp.w	r9, #0
 800c7b4:	dcf1      	bgt.n	800c79a <__ieee754_pow+0x1fa>
 800c7b6:	e75a      	b.n	800c66e <__ieee754_pow+0xce>
 800c7b8:	ed9d 7b00 	vldr	d7, [sp]
 800c7bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c7c0:	ed9f 5b33 	vldr	d5, [pc, #204]	; 800c890 <__ieee754_pow+0x2f0>
 800c7c4:	ee37 6b46 	vsub.f64	d6, d7, d6
 800c7c8:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 800c7cc:	eeb1 3b46 	vneg.f64	d3, d6
 800c7d0:	eea3 5b07 	vfma.f64	d5, d3, d7
 800c7d4:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c7d8:	eea5 7b46 	vfms.f64	d7, d5, d6
 800c7dc:	ee26 5b06 	vmul.f64	d5, d6, d6
 800c7e0:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c7e4:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800c898 <__ieee754_pow+0x2f8>
 800c7e8:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800c7ec:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800c8a0 <__ieee754_pow+0x300>
 800c7f0:	eea6 7b05 	vfma.f64	d7, d6, d5
 800c7f4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800c8a8 <__ieee754_pow+0x308>
 800c7f8:	eeb0 4b47 	vmov.f64	d4, d7
 800c7fc:	eea6 4b05 	vfma.f64	d4, d6, d5
 800c800:	ec53 2b14 	vmov	r2, r3, d4
 800c804:	2200      	movs	r2, #0
 800c806:	ec43 2b14 	vmov	d4, r2, r3
 800c80a:	eeb0 6b44 	vmov.f64	d6, d4
 800c80e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c812:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c816:	3d01      	subs	r5, #1
 800c818:	ea55 030a 	orrs.w	r3, r5, sl
 800c81c:	f04f 0200 	mov.w	r2, #0
 800c820:	463b      	mov	r3, r7
 800c822:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800c826:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800c82a:	ec47 6b15 	vmov	d5, r6, r7
 800c82e:	fe06 8b08 	vseleq.f64	d8, d6, d8
 800c832:	ec47 6b13 	vmov	d3, r6, r7
 800c836:	ec43 2b16 	vmov	d6, r2, r3
 800c83a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c83e:	ee35 5b46 	vsub.f64	d5, d5, d6
 800c842:	4b23      	ldr	r3, [pc, #140]	; (800c8d0 <__ieee754_pow+0x330>)
 800c844:	eea5 7b04 	vfma.f64	d7, d5, d4
 800c848:	ee24 6b06 	vmul.f64	d6, d4, d6
 800c84c:	ee37 5b06 	vadd.f64	d5, d7, d6
 800c850:	ee15 1a90 	vmov	r1, s11
 800c854:	4299      	cmp	r1, r3
 800c856:	ee15 2a10 	vmov	r2, s10
 800c85a:	f340 819b 	ble.w	800cb94 <__ieee754_pow+0x5f4>
 800c85e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c862:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c866:	4313      	orrs	r3, r2
 800c868:	f000 810a 	beq.w	800ca80 <__ieee754_pow+0x4e0>
 800c86c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 800c888 <__ieee754_pow+0x2e8>
 800c870:	ee28 8b07 	vmul.f64	d8, d8, d7
 800c874:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c878:	e6fb      	b.n	800c672 <__ieee754_pow+0xd2>
 800c87a:	bf00      	nop
 800c87c:	f3af 8000 	nop.w
	...
 800c888:	8800759c 	.word	0x8800759c
 800c88c:	7e37e43c 	.word	0x7e37e43c
 800c890:	55555555 	.word	0x55555555
 800c894:	3fd55555 	.word	0x3fd55555
 800c898:	652b82fe 	.word	0x652b82fe
 800c89c:	3ff71547 	.word	0x3ff71547
 800c8a0:	f85ddf44 	.word	0xf85ddf44
 800c8a4:	3e54ae0b 	.word	0x3e54ae0b
 800c8a8:	60000000 	.word	0x60000000
 800c8ac:	3ff71547 	.word	0x3ff71547
 800c8b0:	7ff00000 	.word	0x7ff00000
 800c8b4:	08012c79 	.word	0x08012c79
 800c8b8:	433fffff 	.word	0x433fffff
 800c8bc:	3fefffff 	.word	0x3fefffff
 800c8c0:	3ff00000 	.word	0x3ff00000
 800c8c4:	3fe00000 	.word	0x3fe00000
 800c8c8:	41e00000 	.word	0x41e00000
 800c8cc:	3feffffe 	.word	0x3feffffe
 800c8d0:	408fffff 	.word	0x408fffff
 800c8d4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c8d8:	f280 80ce 	bge.w	800ca78 <__ieee754_pow+0x4d8>
 800c8dc:	ed9d 6b00 	vldr	d6, [sp]
 800c8e0:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 800cbe8 <__ieee754_pow+0x648>
 800c8e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c8e8:	ed8d 7b00 	vstr	d7, [sp]
 800c8ec:	9c01      	ldr	r4, [sp, #4]
 800c8ee:	f06f 0334 	mvn.w	r3, #52	; 0x34
 800c8f2:	1521      	asrs	r1, r4, #20
 800c8f4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c8f8:	4419      	add	r1, r3
 800c8fa:	4be3      	ldr	r3, [pc, #908]	; (800cc88 <__ieee754_pow+0x6e8>)
 800c8fc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c900:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 800c904:	429c      	cmp	r4, r3
 800c906:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 800c90a:	dd06      	ble.n	800c91a <__ieee754_pow+0x37a>
 800c90c:	4bdf      	ldr	r3, [pc, #892]	; (800cc8c <__ieee754_pow+0x6ec>)
 800c90e:	429c      	cmp	r4, r3
 800c910:	f340 80b4 	ble.w	800ca7c <__ieee754_pow+0x4dc>
 800c914:	3101      	adds	r1, #1
 800c916:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800c91a:	2400      	movs	r4, #0
 800c91c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c920:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800c924:	4603      	mov	r3, r0
 800c926:	ec43 2b17 	vmov	d7, r2, r3
 800c92a:	4bd9      	ldr	r3, [pc, #868]	; (800cc90 <__ieee754_pow+0x6f0>)
 800c92c:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 800c930:	4463      	add	r3, ip
 800c932:	ed93 5b00 	vldr	d5, [r3]
 800c936:	1040      	asrs	r0, r0, #1
 800c938:	ee37 2b45 	vsub.f64	d2, d7, d5
 800c93c:	ee35 6b07 	vadd.f64	d6, d5, d7
 800c940:	ee84 1b06 	vdiv.f64	d1, d4, d6
 800c944:	ee22 6b01 	vmul.f64	d6, d2, d1
 800c948:	ed8d 6b00 	vstr	d6, [sp]
 800c94c:	e9dd 8900 	ldrd	r8, r9, [sp]
 800c950:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800c954:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 800c958:	f04f 0800 	mov.w	r8, #0
 800c95c:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 800c960:	2200      	movs	r2, #0
 800c962:	ec49 8b14 	vmov	d4, r8, r9
 800c966:	ec43 2b16 	vmov	d6, r2, r3
 800c96a:	eeb1 3b44 	vneg.f64	d3, d4
 800c96e:	eea3 2b06 	vfma.f64	d2, d3, d6
 800c972:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c976:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c97a:	eea3 2b07 	vfma.f64	d2, d3, d7
 800c97e:	ed9d 7b00 	vldr	d7, [sp]
 800c982:	ee22 2b01 	vmul.f64	d2, d2, d1
 800c986:	ee27 5b07 	vmul.f64	d5, d7, d7
 800c98a:	ee37 6b04 	vadd.f64	d6, d7, d4
 800c98e:	ed9f 1b98 	vldr	d1, [pc, #608]	; 800cbf0 <__ieee754_pow+0x650>
 800c992:	ee25 0b05 	vmul.f64	d0, d5, d5
 800c996:	ee26 6b02 	vmul.f64	d6, d6, d2
 800c99a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800cbf8 <__ieee754_pow+0x658>
 800c99e:	eea5 7b01 	vfma.f64	d7, d5, d1
 800c9a2:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800cc00 <__ieee754_pow+0x660>
 800c9a6:	eea7 1b05 	vfma.f64	d1, d7, d5
 800c9aa:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800cc08 <__ieee754_pow+0x668>
 800c9ae:	eea1 7b05 	vfma.f64	d7, d1, d5
 800c9b2:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800cc10 <__ieee754_pow+0x670>
 800c9b6:	eea7 1b05 	vfma.f64	d1, d7, d5
 800c9ba:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800cc18 <__ieee754_pow+0x678>
 800c9be:	eea1 7b05 	vfma.f64	d7, d1, d5
 800c9c2:	eea0 6b07 	vfma.f64	d6, d0, d7
 800c9c6:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 800c9ca:	eeb0 5b47 	vmov.f64	d5, d7
 800c9ce:	eea4 5b04 	vfma.f64	d5, d4, d4
 800c9d2:	ee35 5b06 	vadd.f64	d5, d5, d6
 800c9d6:	ed8d 5b02 	vstr	d5, [sp, #8]
 800c9da:	f8cd 8008 	str.w	r8, [sp, #8]
 800c9de:	ed9d 5b02 	vldr	d5, [sp, #8]
 800c9e2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c9e6:	eea3 7b04 	vfma.f64	d7, d3, d4
 800c9ea:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c9ee:	ed9d 6b00 	vldr	d6, [sp]
 800c9f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c9f6:	eea2 7b05 	vfma.f64	d7, d2, d5
 800c9fa:	eeb0 6b47 	vmov.f64	d6, d7
 800c9fe:	eea4 6b05 	vfma.f64	d6, d4, d5
 800ca02:	ed8d 6b00 	vstr	d6, [sp]
 800ca06:	f8cd 8000 	str.w	r8, [sp]
 800ca0a:	ed9d 2b00 	vldr	d2, [sp]
 800ca0e:	eeb0 6b42 	vmov.f64	d6, d2
 800ca12:	eea3 6b05 	vfma.f64	d6, d3, d5
 800ca16:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ca1a:	ed9f 6b81 	vldr	d6, [pc, #516]	; 800cc20 <__ieee754_pow+0x680>
 800ca1e:	4b9d      	ldr	r3, [pc, #628]	; (800cc94 <__ieee754_pow+0x6f4>)
 800ca20:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca24:	ed9f 6b80 	vldr	d6, [pc, #512]	; 800cc28 <__ieee754_pow+0x688>
 800ca28:	4463      	add	r3, ip
 800ca2a:	eea2 7b06 	vfma.f64	d7, d2, d6
 800ca2e:	ed93 6b00 	vldr	d6, [r3]
 800ca32:	4b99      	ldr	r3, [pc, #612]	; (800cc98 <__ieee754_pow+0x6f8>)
 800ca34:	ee37 6b06 	vadd.f64	d6, d7, d6
 800ca38:	449c      	add	ip, r3
 800ca3a:	ed9c 1b00 	vldr	d1, [ip]
 800ca3e:	eeb0 4b46 	vmov.f64	d4, d6
 800ca42:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 800cc30 <__ieee754_pow+0x690>
 800ca46:	ee07 1a90 	vmov	s15, r1
 800ca4a:	eea2 4b03 	vfma.f64	d4, d2, d3
 800ca4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ca52:	ee34 4b01 	vadd.f64	d4, d4, d1
 800ca56:	ee34 5b07 	vadd.f64	d5, d4, d7
 800ca5a:	ed8d 5b00 	vstr	d5, [sp]
 800ca5e:	f8cd 8000 	str.w	r8, [sp]
 800ca62:	ed9d 4b00 	vldr	d4, [sp]
 800ca66:	ee34 7b47 	vsub.f64	d7, d4, d7
 800ca6a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800ca6e:	eea2 7b43 	vfms.f64	d7, d2, d3
 800ca72:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ca76:	e6ce      	b.n	800c816 <__ieee754_pow+0x276>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	e73a      	b.n	800c8f2 <__ieee754_pow+0x352>
 800ca7c:	2401      	movs	r4, #1
 800ca7e:	e74d      	b.n	800c91c <__ieee754_pow+0x37c>
 800ca80:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800cc38 <__ieee754_pow+0x698>
 800ca84:	ee35 5b46 	vsub.f64	d5, d5, d6
 800ca88:	ee37 4b04 	vadd.f64	d4, d7, d4
 800ca8c:	eeb4 4bc5 	vcmpe.f64	d4, d5
 800ca90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca94:	f73f aeea 	bgt.w	800c86c <__ieee754_pow+0x2cc>
 800ca98:	4a80      	ldr	r2, [pc, #512]	; (800cc9c <__ieee754_pow+0x6fc>)
 800ca9a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	f340 808e 	ble.w	800cbc0 <__ieee754_pow+0x620>
 800caa4:	151b      	asrs	r3, r3, #20
 800caa6:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 800caaa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800caae:	4103      	asrs	r3, r0
 800cab0:	440b      	add	r3, r1
 800cab2:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cab6:	487a      	ldr	r0, [pc, #488]	; (800cca0 <__ieee754_pow+0x700>)
 800cab8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cabc:	4110      	asrs	r0, r2
 800cabe:	ea23 0500 	bic.w	r5, r3, r0
 800cac2:	f3c3 0013 	ubfx	r0, r3, #0, #20
 800cac6:	2400      	movs	r4, #0
 800cac8:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800cacc:	f1c2 0214 	rsb	r2, r2, #20
 800cad0:	ec45 4b15 	vmov	d5, r4, r5
 800cad4:	4110      	asrs	r0, r2
 800cad6:	2900      	cmp	r1, #0
 800cad8:	bfb8      	it	lt
 800cada:	4240      	neglt	r0, r0
 800cadc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cae0:	ee36 5b07 	vadd.f64	d5, d6, d7
 800cae4:	ec53 2b15 	vmov	r2, r3, d5
 800cae8:	2200      	movs	r2, #0
 800caea:	ec43 2b15 	vmov	d5, r2, r3
 800caee:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800cc40 <__ieee754_pow+0x6a0>
 800caf2:	ee35 6b46 	vsub.f64	d6, d5, d6
 800caf6:	ee37 6b46 	vsub.f64	d6, d7, d6
 800cafa:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800cc48 <__ieee754_pow+0x6a8>
 800cafe:	ee25 7b07 	vmul.f64	d7, d5, d7
 800cb02:	eea6 7b04 	vfma.f64	d7, d6, d4
 800cb06:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800cc50 <__ieee754_pow+0x6b0>
 800cb0a:	eeb0 4b47 	vmov.f64	d4, d7
 800cb0e:	eea5 4b06 	vfma.f64	d4, d5, d6
 800cb12:	eeb0 3b44 	vmov.f64	d3, d4
 800cb16:	eea5 3b46 	vfms.f64	d3, d5, d6
 800cb1a:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 800cc58 <__ieee754_pow+0x6b8>
 800cb1e:	ee37 7b43 	vsub.f64	d7, d7, d3
 800cb22:	ee24 6b04 	vmul.f64	d6, d4, d4
 800cb26:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 800cc60 <__ieee754_pow+0x6c0>
 800cb2a:	eea4 7b07 	vfma.f64	d7, d4, d7
 800cb2e:	eea6 3b05 	vfma.f64	d3, d6, d5
 800cb32:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800cc68 <__ieee754_pow+0x6c8>
 800cb36:	eea3 5b06 	vfma.f64	d5, d3, d6
 800cb3a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800cc70 <__ieee754_pow+0x6d0>
 800cb3e:	eea5 3b06 	vfma.f64	d3, d5, d6
 800cb42:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800cc78 <__ieee754_pow+0x6d8>
 800cb46:	eea3 5b06 	vfma.f64	d5, d3, d6
 800cb4a:	eeb0 3b44 	vmov.f64	d3, d4
 800cb4e:	eea5 3b46 	vfms.f64	d3, d5, d6
 800cb52:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cb56:	eeb0 6b43 	vmov.f64	d6, d3
 800cb5a:	ee24 3b03 	vmul.f64	d3, d4, d3
 800cb5e:	ee36 5b45 	vsub.f64	d5, d6, d5
 800cb62:	ee83 6b05 	vdiv.f64	d6, d3, d5
 800cb66:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cb6a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cb6e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800cb72:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cb76:	ed8d 7b00 	vstr	d7, [sp]
 800cb7a:	9901      	ldr	r1, [sp, #4]
 800cb7c:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 800cb80:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800cb84:	da1e      	bge.n	800cbc4 <__ieee754_pow+0x624>
 800cb86:	eeb0 0b47 	vmov.f64	d0, d7
 800cb8a:	f000 fe55 	bl	800d838 <scalbn>
 800cb8e:	ee20 7b08 	vmul.f64	d7, d0, d8
 800cb92:	e56e      	b.n	800c672 <__ieee754_pow+0xd2>
 800cb94:	4b43      	ldr	r3, [pc, #268]	; (800cca4 <__ieee754_pow+0x704>)
 800cb96:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800cb9a:	4298      	cmp	r0, r3
 800cb9c:	f77f af7c 	ble.w	800ca98 <__ieee754_pow+0x4f8>
 800cba0:	4b41      	ldr	r3, [pc, #260]	; (800cca8 <__ieee754_pow+0x708>)
 800cba2:	440b      	add	r3, r1
 800cba4:	4313      	orrs	r3, r2
 800cba6:	d002      	beq.n	800cbae <__ieee754_pow+0x60e>
 800cba8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800cc80 <__ieee754_pow+0x6e0>
 800cbac:	e660      	b.n	800c870 <__ieee754_pow+0x2d0>
 800cbae:	ee35 5b46 	vsub.f64	d5, d5, d6
 800cbb2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbba:	f6ff af6d 	blt.w	800ca98 <__ieee754_pow+0x4f8>
 800cbbe:	e7f3      	b.n	800cba8 <__ieee754_pow+0x608>
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	e78d      	b.n	800cae0 <__ieee754_pow+0x540>
 800cbc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbc8:	460b      	mov	r3, r1
 800cbca:	ec43 2b10 	vmov	d0, r2, r3
 800cbce:	e7de      	b.n	800cb8e <__ieee754_pow+0x5ee>
 800cbd0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800cbd4:	e54d      	b.n	800c672 <__ieee754_pow+0xd2>
 800cbd6:	e9cd 6700 	strd	r6, r7, [sp]
 800cbda:	e574      	b.n	800c6c6 <__ieee754_pow+0x126>
 800cbdc:	ed8d 8b00 	vstr	d8, [sp]
 800cbe0:	e571      	b.n	800c6c6 <__ieee754_pow+0x126>
 800cbe2:	4615      	mov	r5, r2
 800cbe4:	e557      	b.n	800c696 <__ieee754_pow+0xf6>
 800cbe6:	bf00      	nop
 800cbe8:	00000000 	.word	0x00000000
 800cbec:	43400000 	.word	0x43400000
 800cbf0:	4a454eef 	.word	0x4a454eef
 800cbf4:	3fca7e28 	.word	0x3fca7e28
 800cbf8:	93c9db65 	.word	0x93c9db65
 800cbfc:	3fcd864a 	.word	0x3fcd864a
 800cc00:	a91d4101 	.word	0xa91d4101
 800cc04:	3fd17460 	.word	0x3fd17460
 800cc08:	518f264d 	.word	0x518f264d
 800cc0c:	3fd55555 	.word	0x3fd55555
 800cc10:	db6fabff 	.word	0xdb6fabff
 800cc14:	3fdb6db6 	.word	0x3fdb6db6
 800cc18:	33333303 	.word	0x33333303
 800cc1c:	3fe33333 	.word	0x3fe33333
 800cc20:	dc3a03fd 	.word	0xdc3a03fd
 800cc24:	3feec709 	.word	0x3feec709
 800cc28:	145b01f5 	.word	0x145b01f5
 800cc2c:	be3e2fe0 	.word	0xbe3e2fe0
 800cc30:	e0000000 	.word	0xe0000000
 800cc34:	3feec709 	.word	0x3feec709
 800cc38:	652b82fe 	.word	0x652b82fe
 800cc3c:	3c971547 	.word	0x3c971547
 800cc40:	fefa39ef 	.word	0xfefa39ef
 800cc44:	3fe62e42 	.word	0x3fe62e42
 800cc48:	0ca86c39 	.word	0x0ca86c39
 800cc4c:	be205c61 	.word	0xbe205c61
 800cc50:	00000000 	.word	0x00000000
 800cc54:	3fe62e43 	.word	0x3fe62e43
 800cc58:	72bea4d0 	.word	0x72bea4d0
 800cc5c:	3e663769 	.word	0x3e663769
 800cc60:	c5d26bf1 	.word	0xc5d26bf1
 800cc64:	bebbbd41 	.word	0xbebbbd41
 800cc68:	af25de2c 	.word	0xaf25de2c
 800cc6c:	3f11566a 	.word	0x3f11566a
 800cc70:	16bebd93 	.word	0x16bebd93
 800cc74:	bf66c16c 	.word	0xbf66c16c
 800cc78:	5555553e 	.word	0x5555553e
 800cc7c:	3fc55555 	.word	0x3fc55555
 800cc80:	c2f8f359 	.word	0xc2f8f359
 800cc84:	01a56e1f 	.word	0x01a56e1f
 800cc88:	0003988e 	.word	0x0003988e
 800cc8c:	000bb679 	.word	0x000bb679
 800cc90:	08012da0 	.word	0x08012da0
 800cc94:	08012dc0 	.word	0x08012dc0
 800cc98:	08012db0 	.word	0x08012db0
 800cc9c:	3fe00000 	.word	0x3fe00000
 800cca0:	000fffff 	.word	0x000fffff
 800cca4:	4090cbff 	.word	0x4090cbff
 800cca8:	3f6f3400 	.word	0x3f6f3400
 800ccac:	00000000 	.word	0x00000000

0800ccb0 <__ieee754_rem_pio2>:
 800ccb0:	b570      	push	{r4, r5, r6, lr}
 800ccb2:	eeb0 7b40 	vmov.f64	d7, d0
 800ccb6:	ee17 5a90 	vmov	r5, s15
 800ccba:	4b95      	ldr	r3, [pc, #596]	; (800cf10 <__ieee754_rem_pio2+0x260>)
 800ccbc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ccc0:	429e      	cmp	r6, r3
 800ccc2:	b088      	sub	sp, #32
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	dc07      	bgt.n	800ccd8 <__ieee754_rem_pio2+0x28>
 800ccc8:	2200      	movs	r2, #0
 800ccca:	2300      	movs	r3, #0
 800cccc:	ed84 0b00 	vstr	d0, [r4]
 800ccd0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	e01b      	b.n	800cd10 <__ieee754_rem_pio2+0x60>
 800ccd8:	4b8e      	ldr	r3, [pc, #568]	; (800cf14 <__ieee754_rem_pio2+0x264>)
 800ccda:	429e      	cmp	r6, r3
 800ccdc:	dc3b      	bgt.n	800cd56 <__ieee754_rem_pio2+0xa6>
 800ccde:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800cce2:	2d00      	cmp	r5, #0
 800cce4:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800ced0 <__ieee754_rem_pio2+0x220>
 800cce8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800ccec:	dd19      	ble.n	800cd22 <__ieee754_rem_pio2+0x72>
 800ccee:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ccf2:	429e      	cmp	r6, r3
 800ccf4:	d00e      	beq.n	800cd14 <__ieee754_rem_pio2+0x64>
 800ccf6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800ced8 <__ieee754_rem_pio2+0x228>
 800ccfa:	ee37 5b46 	vsub.f64	d5, d7, d6
 800ccfe:	ee37 7b45 	vsub.f64	d7, d7, d5
 800cd02:	ed84 5b00 	vstr	d5, [r4]
 800cd06:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cd0a:	ed84 7b02 	vstr	d7, [r4, #8]
 800cd0e:	2001      	movs	r0, #1
 800cd10:	b008      	add	sp, #32
 800cd12:	bd70      	pop	{r4, r5, r6, pc}
 800cd14:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800cee0 <__ieee754_rem_pio2+0x230>
 800cd18:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cd1c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800cee8 <__ieee754_rem_pio2+0x238>
 800cd20:	e7eb      	b.n	800ccfa <__ieee754_rem_pio2+0x4a>
 800cd22:	429e      	cmp	r6, r3
 800cd24:	ee30 7b06 	vadd.f64	d7, d0, d6
 800cd28:	d00e      	beq.n	800cd48 <__ieee754_rem_pio2+0x98>
 800cd2a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800ced8 <__ieee754_rem_pio2+0x228>
 800cd2e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800cd32:	ee37 7b45 	vsub.f64	d7, d7, d5
 800cd36:	ed84 5b00 	vstr	d5, [r4]
 800cd3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cd3e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd42:	ed84 7b02 	vstr	d7, [r4, #8]
 800cd46:	e7e3      	b.n	800cd10 <__ieee754_rem_pio2+0x60>
 800cd48:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800cee0 <__ieee754_rem_pio2+0x230>
 800cd4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cd50:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800cee8 <__ieee754_rem_pio2+0x238>
 800cd54:	e7eb      	b.n	800cd2e <__ieee754_rem_pio2+0x7e>
 800cd56:	4b70      	ldr	r3, [pc, #448]	; (800cf18 <__ieee754_rem_pio2+0x268>)
 800cd58:	429e      	cmp	r6, r3
 800cd5a:	dc6c      	bgt.n	800ce36 <__ieee754_rem_pio2+0x186>
 800cd5c:	f000 fc48 	bl	800d5f0 <fabs>
 800cd60:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800cd64:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800cef0 <__ieee754_rem_pio2+0x240>
 800cd68:	eea0 7b06 	vfma.f64	d7, d0, d6
 800cd6c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800cd70:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800cd74:	ee17 0a90 	vmov	r0, s15
 800cd78:	eeb1 5b44 	vneg.f64	d5, d4
 800cd7c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800ced0 <__ieee754_rem_pio2+0x220>
 800cd80:	eea5 0b07 	vfma.f64	d0, d5, d7
 800cd84:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800ced8 <__ieee754_rem_pio2+0x228>
 800cd88:	281f      	cmp	r0, #31
 800cd8a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800cd8e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800cd92:	dc08      	bgt.n	800cda6 <__ieee754_rem_pio2+0xf6>
 800cd94:	1e42      	subs	r2, r0, #1
 800cd96:	4b61      	ldr	r3, [pc, #388]	; (800cf1c <__ieee754_rem_pio2+0x26c>)
 800cd98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd9c:	42b3      	cmp	r3, r6
 800cd9e:	d002      	beq.n	800cda6 <__ieee754_rem_pio2+0xf6>
 800cda0:	ed84 6b00 	vstr	d6, [r4]
 800cda4:	e022      	b.n	800cdec <__ieee754_rem_pio2+0x13c>
 800cda6:	ee16 3a90 	vmov	r3, s13
 800cdaa:	1536      	asrs	r6, r6, #20
 800cdac:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800cdb0:	1af3      	subs	r3, r6, r3
 800cdb2:	2b10      	cmp	r3, #16
 800cdb4:	ddf4      	ble.n	800cda0 <__ieee754_rem_pio2+0xf0>
 800cdb6:	eeb0 6b40 	vmov.f64	d6, d0
 800cdba:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800cee0 <__ieee754_rem_pio2+0x230>
 800cdbe:	eea5 6b03 	vfma.f64	d6, d5, d3
 800cdc2:	ee30 7b46 	vsub.f64	d7, d0, d6
 800cdc6:	eea5 7b03 	vfma.f64	d7, d5, d3
 800cdca:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800cee8 <__ieee754_rem_pio2+0x238>
 800cdce:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800cdd2:	ee36 3b47 	vsub.f64	d3, d6, d7
 800cdd6:	ee13 3a90 	vmov	r3, s7
 800cdda:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800cdde:	1af6      	subs	r6, r6, r3
 800cde0:	2e31      	cmp	r6, #49	; 0x31
 800cde2:	dc17      	bgt.n	800ce14 <__ieee754_rem_pio2+0x164>
 800cde4:	eeb0 0b46 	vmov.f64	d0, d6
 800cde8:	ed84 3b00 	vstr	d3, [r4]
 800cdec:	ed94 6b00 	vldr	d6, [r4]
 800cdf0:	2d00      	cmp	r5, #0
 800cdf2:	ee30 0b46 	vsub.f64	d0, d0, d6
 800cdf6:	ee30 7b47 	vsub.f64	d7, d0, d7
 800cdfa:	ed84 7b02 	vstr	d7, [r4, #8]
 800cdfe:	da87      	bge.n	800cd10 <__ieee754_rem_pio2+0x60>
 800ce00:	eeb1 6b46 	vneg.f64	d6, d6
 800ce04:	ed84 6b00 	vstr	d6, [r4]
 800ce08:	eeb1 7b47 	vneg.f64	d7, d7
 800ce0c:	4240      	negs	r0, r0
 800ce0e:	ed84 7b02 	vstr	d7, [r4, #8]
 800ce12:	e77d      	b.n	800cd10 <__ieee754_rem_pio2+0x60>
 800ce14:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800cef8 <__ieee754_rem_pio2+0x248>
 800ce18:	eeb0 0b46 	vmov.f64	d0, d6
 800ce1c:	eea5 0b03 	vfma.f64	d0, d5, d3
 800ce20:	ee36 7b40 	vsub.f64	d7, d6, d0
 800ce24:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800cf00 <__ieee754_rem_pio2+0x250>
 800ce28:	eea5 7b03 	vfma.f64	d7, d5, d3
 800ce2c:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800ce30:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ce34:	e7b4      	b.n	800cda0 <__ieee754_rem_pio2+0xf0>
 800ce36:	4b3a      	ldr	r3, [pc, #232]	; (800cf20 <__ieee754_rem_pio2+0x270>)
 800ce38:	429e      	cmp	r6, r3
 800ce3a:	dd06      	ble.n	800ce4a <__ieee754_rem_pio2+0x19a>
 800ce3c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800ce40:	ed80 7b02 	vstr	d7, [r0, #8]
 800ce44:	ed80 7b00 	vstr	d7, [r0]
 800ce48:	e744      	b.n	800ccd4 <__ieee754_rem_pio2+0x24>
 800ce4a:	1532      	asrs	r2, r6, #20
 800ce4c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800ce50:	ee10 0a10 	vmov	r0, s0
 800ce54:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800ce58:	ec41 0b17 	vmov	d7, r0, r1
 800ce5c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ce60:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800cf08 <__ieee754_rem_pio2+0x258>
 800ce64:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ce68:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ce6c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ce70:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ce74:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ce78:	a908      	add	r1, sp, #32
 800ce7a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ce7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ce82:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ce86:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ce8a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ce8e:	2303      	movs	r3, #3
 800ce90:	ed31 7b02 	vldmdb	r1!, {d7}
 800ce94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ce98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce9c:	f103 30ff 	add.w	r0, r3, #4294967295
 800cea0:	d013      	beq.n	800ceca <__ieee754_rem_pio2+0x21a>
 800cea2:	4920      	ldr	r1, [pc, #128]	; (800cf24 <__ieee754_rem_pio2+0x274>)
 800cea4:	9101      	str	r1, [sp, #4]
 800cea6:	2102      	movs	r1, #2
 800cea8:	9100      	str	r1, [sp, #0]
 800ceaa:	a802      	add	r0, sp, #8
 800ceac:	4621      	mov	r1, r4
 800ceae:	f000 f8ab 	bl	800d008 <__kernel_rem_pio2>
 800ceb2:	2d00      	cmp	r5, #0
 800ceb4:	f6bf af2c 	bge.w	800cd10 <__ieee754_rem_pio2+0x60>
 800ceb8:	ed94 7b00 	vldr	d7, [r4]
 800cebc:	eeb1 7b47 	vneg.f64	d7, d7
 800cec0:	ed84 7b00 	vstr	d7, [r4]
 800cec4:	ed94 7b02 	vldr	d7, [r4, #8]
 800cec8:	e79e      	b.n	800ce08 <__ieee754_rem_pio2+0x158>
 800ceca:	4603      	mov	r3, r0
 800cecc:	e7e0      	b.n	800ce90 <__ieee754_rem_pio2+0x1e0>
 800cece:	bf00      	nop
 800ced0:	54400000 	.word	0x54400000
 800ced4:	3ff921fb 	.word	0x3ff921fb
 800ced8:	1a626331 	.word	0x1a626331
 800cedc:	3dd0b461 	.word	0x3dd0b461
 800cee0:	1a600000 	.word	0x1a600000
 800cee4:	3dd0b461 	.word	0x3dd0b461
 800cee8:	2e037073 	.word	0x2e037073
 800ceec:	3ba3198a 	.word	0x3ba3198a
 800cef0:	6dc9c883 	.word	0x6dc9c883
 800cef4:	3fe45f30 	.word	0x3fe45f30
 800cef8:	2e000000 	.word	0x2e000000
 800cefc:	3ba3198a 	.word	0x3ba3198a
 800cf00:	252049c1 	.word	0x252049c1
 800cf04:	397b839a 	.word	0x397b839a
 800cf08:	00000000 	.word	0x00000000
 800cf0c:	41700000 	.word	0x41700000
 800cf10:	3fe921fb 	.word	0x3fe921fb
 800cf14:	4002d97b 	.word	0x4002d97b
 800cf18:	413921fb 	.word	0x413921fb
 800cf1c:	08012dd0 	.word	0x08012dd0
 800cf20:	7fefffff 	.word	0x7fefffff
 800cf24:	08012e50 	.word	0x08012e50

0800cf28 <__ieee754_sqrt>:
 800cf28:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800cf2c:	4770      	bx	lr
	...

0800cf30 <__kernel_cos>:
 800cf30:	ee10 1a90 	vmov	r1, s1
 800cf34:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800cf38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cf3c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800cf40:	da05      	bge.n	800cf4e <__kernel_cos+0x1e>
 800cf42:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800cf46:	ee16 3a90 	vmov	r3, s13
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d03d      	beq.n	800cfca <__kernel_cos+0x9a>
 800cf4e:	ee20 4b00 	vmul.f64	d4, d0, d0
 800cf52:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800cf56:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800cfd0 <__kernel_cos+0xa0>
 800cf5a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800cf5e:	ee24 6b06 	vmul.f64	d6, d4, d6
 800cf62:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800cfd8 <__kernel_cos+0xa8>
 800cf66:	eea4 5b03 	vfma.f64	d5, d4, d3
 800cf6a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800cfe0 <__kernel_cos+0xb0>
 800cf6e:	eea5 3b04 	vfma.f64	d3, d5, d4
 800cf72:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800cfe8 <__kernel_cos+0xb8>
 800cf76:	eea3 5b04 	vfma.f64	d5, d3, d4
 800cf7a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800cff0 <__kernel_cos+0xc0>
 800cf7e:	4b20      	ldr	r3, [pc, #128]	; (800d000 <__kernel_cos+0xd0>)
 800cf80:	eea5 3b04 	vfma.f64	d3, d5, d4
 800cf84:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800cff8 <__kernel_cos+0xc8>
 800cf88:	4299      	cmp	r1, r3
 800cf8a:	eea3 5b04 	vfma.f64	d5, d3, d4
 800cf8e:	ee25 5b04 	vmul.f64	d5, d5, d4
 800cf92:	eea4 1b05 	vfma.f64	d1, d4, d5
 800cf96:	dc04      	bgt.n	800cfa2 <__kernel_cos+0x72>
 800cf98:	ee36 6b41 	vsub.f64	d6, d6, d1
 800cf9c:	ee37 0b46 	vsub.f64	d0, d7, d6
 800cfa0:	4770      	bx	lr
 800cfa2:	4b18      	ldr	r3, [pc, #96]	; (800d004 <__kernel_cos+0xd4>)
 800cfa4:	4299      	cmp	r1, r3
 800cfa6:	dc0d      	bgt.n	800cfc4 <__kernel_cos+0x94>
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800cfae:	ec43 2b15 	vmov	d5, r2, r3
 800cfb2:	ee37 0b45 	vsub.f64	d0, d7, d5
 800cfb6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cfba:	ee36 6b41 	vsub.f64	d6, d6, d1
 800cfbe:	ee30 0b46 	vsub.f64	d0, d0, d6
 800cfc2:	4770      	bx	lr
 800cfc4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800cfc8:	e7f3      	b.n	800cfb2 <__kernel_cos+0x82>
 800cfca:	eeb0 0b47 	vmov.f64	d0, d7
 800cfce:	4770      	bx	lr
 800cfd0:	be8838d4 	.word	0xbe8838d4
 800cfd4:	bda8fae9 	.word	0xbda8fae9
 800cfd8:	bdb4b1c4 	.word	0xbdb4b1c4
 800cfdc:	3e21ee9e 	.word	0x3e21ee9e
 800cfe0:	809c52ad 	.word	0x809c52ad
 800cfe4:	be927e4f 	.word	0xbe927e4f
 800cfe8:	19cb1590 	.word	0x19cb1590
 800cfec:	3efa01a0 	.word	0x3efa01a0
 800cff0:	16c15177 	.word	0x16c15177
 800cff4:	bf56c16c 	.word	0xbf56c16c
 800cff8:	5555554c 	.word	0x5555554c
 800cffc:	3fa55555 	.word	0x3fa55555
 800d000:	3fd33332 	.word	0x3fd33332
 800d004:	3fe90000 	.word	0x3fe90000

0800d008 <__kernel_rem_pio2>:
 800d008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d00c:	ed2d 8b06 	vpush	{d8-d10}
 800d010:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800d014:	469b      	mov	fp, r3
 800d016:	460e      	mov	r6, r1
 800d018:	4bc7      	ldr	r3, [pc, #796]	; (800d338 <__kernel_rem_pio2+0x330>)
 800d01a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800d01c:	9002      	str	r0, [sp, #8]
 800d01e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800d022:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800d024:	1ed1      	subs	r1, r2, #3
 800d026:	2318      	movs	r3, #24
 800d028:	f06f 0417 	mvn.w	r4, #23
 800d02c:	fb91 f1f3 	sdiv	r1, r1, r3
 800d030:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800d034:	f10b 3aff 	add.w	sl, fp, #4294967295
 800d038:	fb01 4404 	mla	r4, r1, r4, r4
 800d03c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800d320 <__kernel_rem_pio2+0x318>
 800d040:	4414      	add	r4, r2
 800d042:	eba1 050a 	sub.w	r5, r1, sl
 800d046:	aa1a      	add	r2, sp, #104	; 0x68
 800d048:	eb09 070a 	add.w	r7, r9, sl
 800d04c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800d050:	4696      	mov	lr, r2
 800d052:	2300      	movs	r3, #0
 800d054:	42bb      	cmp	r3, r7
 800d056:	dd0f      	ble.n	800d078 <__kernel_rem_pio2+0x70>
 800d058:	af6a      	add	r7, sp, #424	; 0x1a8
 800d05a:	2200      	movs	r2, #0
 800d05c:	454a      	cmp	r2, r9
 800d05e:	dc28      	bgt.n	800d0b2 <__kernel_rem_pio2+0xaa>
 800d060:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800d064:	eb0b 0302 	add.w	r3, fp, r2
 800d068:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800d06c:	9d02      	ldr	r5, [sp, #8]
 800d06e:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800d320 <__kernel_rem_pio2+0x318>
 800d072:	f04f 0c00 	mov.w	ip, #0
 800d076:	e016      	b.n	800d0a6 <__kernel_rem_pio2+0x9e>
 800d078:	42dd      	cmn	r5, r3
 800d07a:	d409      	bmi.n	800d090 <__kernel_rem_pio2+0x88>
 800d07c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800d080:	ee07 2a90 	vmov	s15, r2
 800d084:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d088:	ecae 7b02 	vstmia	lr!, {d7}
 800d08c:	3301      	adds	r3, #1
 800d08e:	e7e1      	b.n	800d054 <__kernel_rem_pio2+0x4c>
 800d090:	eeb0 7b46 	vmov.f64	d7, d6
 800d094:	e7f8      	b.n	800d088 <__kernel_rem_pio2+0x80>
 800d096:	ecb5 5b02 	vldmia	r5!, {d5}
 800d09a:	ed33 6b02 	vldmdb	r3!, {d6}
 800d09e:	f10c 0c01 	add.w	ip, ip, #1
 800d0a2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d0a6:	45d4      	cmp	ip, sl
 800d0a8:	ddf5      	ble.n	800d096 <__kernel_rem_pio2+0x8e>
 800d0aa:	eca7 7b02 	vstmia	r7!, {d7}
 800d0ae:	3201      	adds	r2, #1
 800d0b0:	e7d4      	b.n	800d05c <__kernel_rem_pio2+0x54>
 800d0b2:	ab06      	add	r3, sp, #24
 800d0b4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d0b8:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800d328 <__kernel_rem_pio2+0x320>
 800d0bc:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800d330 <__kernel_rem_pio2+0x328>
 800d0c0:	9304      	str	r3, [sp, #16]
 800d0c2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800d0c6:	9303      	str	r3, [sp, #12]
 800d0c8:	464d      	mov	r5, r9
 800d0ca:	ab92      	add	r3, sp, #584	; 0x248
 800d0cc:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800d0d0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d0d4:	3f01      	subs	r7, #1
 800d0d6:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800d0da:	00ff      	lsls	r7, r7, #3
 800d0dc:	ab92      	add	r3, sp, #584	; 0x248
 800d0de:	19da      	adds	r2, r3, r7
 800d0e0:	3a98      	subs	r2, #152	; 0x98
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	1ae9      	subs	r1, r5, r3
 800d0e6:	2900      	cmp	r1, #0
 800d0e8:	dc4e      	bgt.n	800d188 <__kernel_rem_pio2+0x180>
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	f000 fba4 	bl	800d838 <scalbn>
 800d0f0:	eeb0 8b40 	vmov.f64	d8, d0
 800d0f4:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800d0f8:	ee28 0b00 	vmul.f64	d0, d8, d0
 800d0fc:	f000 fa8c 	bl	800d618 <floor>
 800d100:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800d104:	eea0 8b47 	vfms.f64	d8, d0, d7
 800d108:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800d10c:	2c00      	cmp	r4, #0
 800d10e:	edcd 7a01 	vstr	s15, [sp, #4]
 800d112:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d116:	ee38 8b47 	vsub.f64	d8, d8, d7
 800d11a:	dd4a      	ble.n	800d1b2 <__kernel_rem_pio2+0x1aa>
 800d11c:	1e69      	subs	r1, r5, #1
 800d11e:	ab06      	add	r3, sp, #24
 800d120:	f1c4 0018 	rsb	r0, r4, #24
 800d124:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800d128:	9a01      	ldr	r2, [sp, #4]
 800d12a:	fa4c f300 	asr.w	r3, ip, r0
 800d12e:	441a      	add	r2, r3
 800d130:	4083      	lsls	r3, r0
 800d132:	9201      	str	r2, [sp, #4]
 800d134:	ebac 0203 	sub.w	r2, ip, r3
 800d138:	ab06      	add	r3, sp, #24
 800d13a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800d13e:	f1c4 0317 	rsb	r3, r4, #23
 800d142:	fa42 f803 	asr.w	r8, r2, r3
 800d146:	f1b8 0f00 	cmp.w	r8, #0
 800d14a:	dd43      	ble.n	800d1d4 <__kernel_rem_pio2+0x1cc>
 800d14c:	9b01      	ldr	r3, [sp, #4]
 800d14e:	2000      	movs	r0, #0
 800d150:	3301      	adds	r3, #1
 800d152:	9301      	str	r3, [sp, #4]
 800d154:	4601      	mov	r1, r0
 800d156:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800d15a:	4285      	cmp	r5, r0
 800d15c:	dc6e      	bgt.n	800d23c <__kernel_rem_pio2+0x234>
 800d15e:	2c00      	cmp	r4, #0
 800d160:	dd04      	ble.n	800d16c <__kernel_rem_pio2+0x164>
 800d162:	2c01      	cmp	r4, #1
 800d164:	d07f      	beq.n	800d266 <__kernel_rem_pio2+0x25e>
 800d166:	2c02      	cmp	r4, #2
 800d168:	f000 8087 	beq.w	800d27a <__kernel_rem_pio2+0x272>
 800d16c:	f1b8 0f02 	cmp.w	r8, #2
 800d170:	d130      	bne.n	800d1d4 <__kernel_rem_pio2+0x1cc>
 800d172:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d176:	ee30 8b48 	vsub.f64	d8, d0, d8
 800d17a:	b359      	cbz	r1, 800d1d4 <__kernel_rem_pio2+0x1cc>
 800d17c:	4620      	mov	r0, r4
 800d17e:	f000 fb5b 	bl	800d838 <scalbn>
 800d182:	ee38 8b40 	vsub.f64	d8, d8, d0
 800d186:	e025      	b.n	800d1d4 <__kernel_rem_pio2+0x1cc>
 800d188:	ee20 7b09 	vmul.f64	d7, d0, d9
 800d18c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d190:	a806      	add	r0, sp, #24
 800d192:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800d196:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800d19a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d19e:	ee10 1a10 	vmov	r1, s0
 800d1a2:	ed32 0b02 	vldmdb	r2!, {d0}
 800d1a6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800d1aa:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	e798      	b.n	800d0e4 <__kernel_rem_pio2+0xdc>
 800d1b2:	d106      	bne.n	800d1c2 <__kernel_rem_pio2+0x1ba>
 800d1b4:	1e6b      	subs	r3, r5, #1
 800d1b6:	aa06      	add	r2, sp, #24
 800d1b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d1bc:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800d1c0:	e7c1      	b.n	800d146 <__kernel_rem_pio2+0x13e>
 800d1c2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d1c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ce:	da32      	bge.n	800d236 <__kernel_rem_pio2+0x22e>
 800d1d0:	f04f 0800 	mov.w	r8, #0
 800d1d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1dc:	f040 80b0 	bne.w	800d340 <__kernel_rem_pio2+0x338>
 800d1e0:	1e6b      	subs	r3, r5, #1
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	4548      	cmp	r0, r9
 800d1e8:	da4e      	bge.n	800d288 <__kernel_rem_pio2+0x280>
 800d1ea:	2a00      	cmp	r2, #0
 800d1ec:	f000 8088 	beq.w	800d300 <__kernel_rem_pio2+0x2f8>
 800d1f0:	aa06      	add	r2, sp, #24
 800d1f2:	3c18      	subs	r4, #24
 800d1f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d1f8:	2900      	cmp	r1, #0
 800d1fa:	f000 808e 	beq.w	800d31a <__kernel_rem_pio2+0x312>
 800d1fe:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d202:	4620      	mov	r0, r4
 800d204:	9302      	str	r3, [sp, #8]
 800d206:	f000 fb17 	bl	800d838 <scalbn>
 800d20a:	9b02      	ldr	r3, [sp, #8]
 800d20c:	aa6a      	add	r2, sp, #424	; 0x1a8
 800d20e:	00d9      	lsls	r1, r3, #3
 800d210:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800d328 <__kernel_rem_pio2+0x320>
 800d214:	1850      	adds	r0, r2, r1
 800d216:	f100 0508 	add.w	r5, r0, #8
 800d21a:	461c      	mov	r4, r3
 800d21c:	2c00      	cmp	r4, #0
 800d21e:	f280 80bd 	bge.w	800d39c <__kernel_rem_pio2+0x394>
 800d222:	2500      	movs	r5, #0
 800d224:	1b5c      	subs	r4, r3, r5
 800d226:	2c00      	cmp	r4, #0
 800d228:	f2c0 80dd 	blt.w	800d3e6 <__kernel_rem_pio2+0x3de>
 800d22c:	4f43      	ldr	r7, [pc, #268]	; (800d33c <__kernel_rem_pio2+0x334>)
 800d22e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800d320 <__kernel_rem_pio2+0x318>
 800d232:	2400      	movs	r4, #0
 800d234:	e0cb      	b.n	800d3ce <__kernel_rem_pio2+0x3c6>
 800d236:	f04f 0802 	mov.w	r8, #2
 800d23a:	e787      	b.n	800d14c <__kernel_rem_pio2+0x144>
 800d23c:	ab06      	add	r3, sp, #24
 800d23e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d242:	b949      	cbnz	r1, 800d258 <__kernel_rem_pio2+0x250>
 800d244:	b12b      	cbz	r3, 800d252 <__kernel_rem_pio2+0x24a>
 800d246:	aa06      	add	r2, sp, #24
 800d248:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d24c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d250:	2301      	movs	r3, #1
 800d252:	3001      	adds	r0, #1
 800d254:	4619      	mov	r1, r3
 800d256:	e780      	b.n	800d15a <__kernel_rem_pio2+0x152>
 800d258:	aa06      	add	r2, sp, #24
 800d25a:	ebac 0303 	sub.w	r3, ip, r3
 800d25e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d262:	460b      	mov	r3, r1
 800d264:	e7f5      	b.n	800d252 <__kernel_rem_pio2+0x24a>
 800d266:	1e68      	subs	r0, r5, #1
 800d268:	ab06      	add	r3, sp, #24
 800d26a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d26e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d272:	aa06      	add	r2, sp, #24
 800d274:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d278:	e778      	b.n	800d16c <__kernel_rem_pio2+0x164>
 800d27a:	1e68      	subs	r0, r5, #1
 800d27c:	ab06      	add	r3, sp, #24
 800d27e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d282:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d286:	e7f4      	b.n	800d272 <__kernel_rem_pio2+0x26a>
 800d288:	a906      	add	r1, sp, #24
 800d28a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d28e:	3801      	subs	r0, #1
 800d290:	430a      	orrs	r2, r1
 800d292:	e7a8      	b.n	800d1e6 <__kernel_rem_pio2+0x1de>
 800d294:	f10c 0c01 	add.w	ip, ip, #1
 800d298:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d29c:	2a00      	cmp	r2, #0
 800d29e:	d0f9      	beq.n	800d294 <__kernel_rem_pio2+0x28c>
 800d2a0:	eb0b 0305 	add.w	r3, fp, r5
 800d2a4:	aa1a      	add	r2, sp, #104	; 0x68
 800d2a6:	00db      	lsls	r3, r3, #3
 800d2a8:	1898      	adds	r0, r3, r2
 800d2aa:	3008      	adds	r0, #8
 800d2ac:	1c69      	adds	r1, r5, #1
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	4465      	add	r5, ip
 800d2b4:	9005      	str	r0, [sp, #20]
 800d2b6:	428d      	cmp	r5, r1
 800d2b8:	f6ff af07 	blt.w	800d0ca <__kernel_rem_pio2+0xc2>
 800d2bc:	a81a      	add	r0, sp, #104	; 0x68
 800d2be:	eb02 0c03 	add.w	ip, r2, r3
 800d2c2:	4484      	add	ip, r0
 800d2c4:	9803      	ldr	r0, [sp, #12]
 800d2c6:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d2ca:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800d2ce:	9001      	str	r0, [sp, #4]
 800d2d0:	ee07 0a90 	vmov	s15, r0
 800d2d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d2d8:	9805      	ldr	r0, [sp, #20]
 800d2da:	ed8c 7b00 	vstr	d7, [ip]
 800d2de:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800d320 <__kernel_rem_pio2+0x318>
 800d2e2:	eb00 0802 	add.w	r8, r0, r2
 800d2e6:	f04f 0c00 	mov.w	ip, #0
 800d2ea:	45d4      	cmp	ip, sl
 800d2ec:	dd0c      	ble.n	800d308 <__kernel_rem_pio2+0x300>
 800d2ee:	eb02 0c07 	add.w	ip, r2, r7
 800d2f2:	a86a      	add	r0, sp, #424	; 0x1a8
 800d2f4:	4484      	add	ip, r0
 800d2f6:	ed8c 7b02 	vstr	d7, [ip, #8]
 800d2fa:	3101      	adds	r1, #1
 800d2fc:	3208      	adds	r2, #8
 800d2fe:	e7da      	b.n	800d2b6 <__kernel_rem_pio2+0x2ae>
 800d300:	9b04      	ldr	r3, [sp, #16]
 800d302:	f04f 0c01 	mov.w	ip, #1
 800d306:	e7c7      	b.n	800d298 <__kernel_rem_pio2+0x290>
 800d308:	ecbe 5b02 	vldmia	lr!, {d5}
 800d30c:	ed38 6b02 	vldmdb	r8!, {d6}
 800d310:	f10c 0c01 	add.w	ip, ip, #1
 800d314:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d318:	e7e7      	b.n	800d2ea <__kernel_rem_pio2+0x2e2>
 800d31a:	3b01      	subs	r3, #1
 800d31c:	e768      	b.n	800d1f0 <__kernel_rem_pio2+0x1e8>
 800d31e:	bf00      	nop
	...
 800d32c:	3e700000 	.word	0x3e700000
 800d330:	00000000 	.word	0x00000000
 800d334:	41700000 	.word	0x41700000
 800d338:	08012f98 	.word	0x08012f98
 800d33c:	08012f58 	.word	0x08012f58
 800d340:	4260      	negs	r0, r4
 800d342:	eeb0 0b48 	vmov.f64	d0, d8
 800d346:	f000 fa77 	bl	800d838 <scalbn>
 800d34a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800d528 <__kernel_rem_pio2+0x520>
 800d34e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800d352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d356:	db18      	blt.n	800d38a <__kernel_rem_pio2+0x382>
 800d358:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800d530 <__kernel_rem_pio2+0x528>
 800d35c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d360:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d364:	aa06      	add	r2, sp, #24
 800d366:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800d36a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800d36e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d372:	a906      	add	r1, sp, #24
 800d374:	ee10 3a10 	vmov	r3, s0
 800d378:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d37c:	1c6b      	adds	r3, r5, #1
 800d37e:	ee17 2a10 	vmov	r2, s14
 800d382:	3418      	adds	r4, #24
 800d384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d388:	e739      	b.n	800d1fe <__kernel_rem_pio2+0x1f6>
 800d38a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d38e:	aa06      	add	r2, sp, #24
 800d390:	ee10 3a10 	vmov	r3, s0
 800d394:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d398:	462b      	mov	r3, r5
 800d39a:	e730      	b.n	800d1fe <__kernel_rem_pio2+0x1f6>
 800d39c:	aa06      	add	r2, sp, #24
 800d39e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800d3a2:	9202      	str	r2, [sp, #8]
 800d3a4:	ee07 2a90 	vmov	s15, r2
 800d3a8:	3c01      	subs	r4, #1
 800d3aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d3ae:	ee27 7b00 	vmul.f64	d7, d7, d0
 800d3b2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800d3b6:	ed25 7b02 	vstmdb	r5!, {d7}
 800d3ba:	e72f      	b.n	800d21c <__kernel_rem_pio2+0x214>
 800d3bc:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800d3c0:	ecb7 5b02 	vldmia	r7!, {d5}
 800d3c4:	ed9c 6b00 	vldr	d6, [ip]
 800d3c8:	3401      	adds	r4, #1
 800d3ca:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d3ce:	454c      	cmp	r4, r9
 800d3d0:	dc01      	bgt.n	800d3d6 <__kernel_rem_pio2+0x3ce>
 800d3d2:	42a5      	cmp	r5, r4
 800d3d4:	daf2      	bge.n	800d3bc <__kernel_rem_pio2+0x3b4>
 800d3d6:	aa42      	add	r2, sp, #264	; 0x108
 800d3d8:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800d3dc:	ed84 7b00 	vstr	d7, [r4]
 800d3e0:	3501      	adds	r5, #1
 800d3e2:	3808      	subs	r0, #8
 800d3e4:	e71e      	b.n	800d224 <__kernel_rem_pio2+0x21c>
 800d3e6:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800d3e8:	2a03      	cmp	r2, #3
 800d3ea:	d84e      	bhi.n	800d48a <__kernel_rem_pio2+0x482>
 800d3ec:	e8df f002 	tbb	[pc, r2]
 800d3f0:	021f1f3e 	.word	0x021f1f3e
 800d3f4:	3108      	adds	r1, #8
 800d3f6:	aa42      	add	r2, sp, #264	; 0x108
 800d3f8:	4411      	add	r1, r2
 800d3fa:	4608      	mov	r0, r1
 800d3fc:	461c      	mov	r4, r3
 800d3fe:	2c00      	cmp	r4, #0
 800d400:	dc61      	bgt.n	800d4c6 <__kernel_rem_pio2+0x4be>
 800d402:	4608      	mov	r0, r1
 800d404:	461c      	mov	r4, r3
 800d406:	2c01      	cmp	r4, #1
 800d408:	dc6d      	bgt.n	800d4e6 <__kernel_rem_pio2+0x4de>
 800d40a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800d538 <__kernel_rem_pio2+0x530>
 800d40e:	2b01      	cmp	r3, #1
 800d410:	dc79      	bgt.n	800d506 <__kernel_rem_pio2+0x4fe>
 800d412:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800d416:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800d41a:	f1b8 0f00 	cmp.w	r8, #0
 800d41e:	d178      	bne.n	800d512 <__kernel_rem_pio2+0x50a>
 800d420:	ed86 5b00 	vstr	d5, [r6]
 800d424:	ed86 6b02 	vstr	d6, [r6, #8]
 800d428:	ed86 7b04 	vstr	d7, [r6, #16]
 800d42c:	e02d      	b.n	800d48a <__kernel_rem_pio2+0x482>
 800d42e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800d538 <__kernel_rem_pio2+0x530>
 800d432:	3108      	adds	r1, #8
 800d434:	aa42      	add	r2, sp, #264	; 0x108
 800d436:	4411      	add	r1, r2
 800d438:	4618      	mov	r0, r3
 800d43a:	2800      	cmp	r0, #0
 800d43c:	da34      	bge.n	800d4a8 <__kernel_rem_pio2+0x4a0>
 800d43e:	f1b8 0f00 	cmp.w	r8, #0
 800d442:	d037      	beq.n	800d4b4 <__kernel_rem_pio2+0x4ac>
 800d444:	eeb1 7b46 	vneg.f64	d7, d6
 800d448:	ed86 7b00 	vstr	d7, [r6]
 800d44c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800d450:	a844      	add	r0, sp, #272	; 0x110
 800d452:	2101      	movs	r1, #1
 800d454:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d458:	428b      	cmp	r3, r1
 800d45a:	da2e      	bge.n	800d4ba <__kernel_rem_pio2+0x4b2>
 800d45c:	f1b8 0f00 	cmp.w	r8, #0
 800d460:	d001      	beq.n	800d466 <__kernel_rem_pio2+0x45e>
 800d462:	eeb1 7b47 	vneg.f64	d7, d7
 800d466:	ed86 7b02 	vstr	d7, [r6, #8]
 800d46a:	e00e      	b.n	800d48a <__kernel_rem_pio2+0x482>
 800d46c:	aa92      	add	r2, sp, #584	; 0x248
 800d46e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800d538 <__kernel_rem_pio2+0x530>
 800d472:	4411      	add	r1, r2
 800d474:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800d478:	2b00      	cmp	r3, #0
 800d47a:	da0f      	bge.n	800d49c <__kernel_rem_pio2+0x494>
 800d47c:	f1b8 0f00 	cmp.w	r8, #0
 800d480:	d001      	beq.n	800d486 <__kernel_rem_pio2+0x47e>
 800d482:	eeb1 7b47 	vneg.f64	d7, d7
 800d486:	ed86 7b00 	vstr	d7, [r6]
 800d48a:	9b01      	ldr	r3, [sp, #4]
 800d48c:	f003 0007 	and.w	r0, r3, #7
 800d490:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800d494:	ecbd 8b06 	vpop	{d8-d10}
 800d498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d49c:	ed31 6b02 	vldmdb	r1!, {d6}
 800d4a0:	3b01      	subs	r3, #1
 800d4a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d4a6:	e7e7      	b.n	800d478 <__kernel_rem_pio2+0x470>
 800d4a8:	ed31 7b02 	vldmdb	r1!, {d7}
 800d4ac:	3801      	subs	r0, #1
 800d4ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d4b2:	e7c2      	b.n	800d43a <__kernel_rem_pio2+0x432>
 800d4b4:	eeb0 7b46 	vmov.f64	d7, d6
 800d4b8:	e7c6      	b.n	800d448 <__kernel_rem_pio2+0x440>
 800d4ba:	ecb0 6b02 	vldmia	r0!, {d6}
 800d4be:	3101      	adds	r1, #1
 800d4c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d4c4:	e7c8      	b.n	800d458 <__kernel_rem_pio2+0x450>
 800d4c6:	ed10 7b04 	vldr	d7, [r0, #-16]
 800d4ca:	ed30 5b02 	vldmdb	r0!, {d5}
 800d4ce:	3c01      	subs	r4, #1
 800d4d0:	ee37 6b05 	vadd.f64	d6, d7, d5
 800d4d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d4d8:	ed00 6b02 	vstr	d6, [r0, #-8]
 800d4dc:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d4e0:	ed80 7b00 	vstr	d7, [r0]
 800d4e4:	e78b      	b.n	800d3fe <__kernel_rem_pio2+0x3f6>
 800d4e6:	ed10 7b04 	vldr	d7, [r0, #-16]
 800d4ea:	ed30 5b02 	vldmdb	r0!, {d5}
 800d4ee:	3c01      	subs	r4, #1
 800d4f0:	ee37 6b05 	vadd.f64	d6, d7, d5
 800d4f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d4f8:	ed00 6b02 	vstr	d6, [r0, #-8]
 800d4fc:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d500:	ed80 7b00 	vstr	d7, [r0]
 800d504:	e77f      	b.n	800d406 <__kernel_rem_pio2+0x3fe>
 800d506:	ed31 6b02 	vldmdb	r1!, {d6}
 800d50a:	3b01      	subs	r3, #1
 800d50c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d510:	e77d      	b.n	800d40e <__kernel_rem_pio2+0x406>
 800d512:	eeb1 5b45 	vneg.f64	d5, d5
 800d516:	eeb1 6b46 	vneg.f64	d6, d6
 800d51a:	ed86 5b00 	vstr	d5, [r6]
 800d51e:	eeb1 7b47 	vneg.f64	d7, d7
 800d522:	ed86 6b02 	vstr	d6, [r6, #8]
 800d526:	e77f      	b.n	800d428 <__kernel_rem_pio2+0x420>
 800d528:	00000000 	.word	0x00000000
 800d52c:	41700000 	.word	0x41700000
 800d530:	00000000 	.word	0x00000000
 800d534:	3e700000 	.word	0x3e700000
	...

0800d540 <__kernel_sin>:
 800d540:	ee10 3a90 	vmov	r3, s1
 800d544:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d548:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d54c:	da04      	bge.n	800d558 <__kernel_sin+0x18>
 800d54e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800d552:	ee17 3a90 	vmov	r3, s15
 800d556:	b35b      	cbz	r3, 800d5b0 <__kernel_sin+0x70>
 800d558:	ee20 6b00 	vmul.f64	d6, d0, d0
 800d55c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800d560:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800d5b8 <__kernel_sin+0x78>
 800d564:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800d5c0 <__kernel_sin+0x80>
 800d568:	eea6 4b07 	vfma.f64	d4, d6, d7
 800d56c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800d5c8 <__kernel_sin+0x88>
 800d570:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d574:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800d5d0 <__kernel_sin+0x90>
 800d578:	eea7 4b06 	vfma.f64	d4, d7, d6
 800d57c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800d5d8 <__kernel_sin+0x98>
 800d580:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d584:	b930      	cbnz	r0, 800d594 <__kernel_sin+0x54>
 800d586:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800d5e0 <__kernel_sin+0xa0>
 800d58a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800d58e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800d592:	4770      	bx	lr
 800d594:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800d598:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800d59c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800d5a0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800d5a4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800d5e8 <__kernel_sin+0xa8>
 800d5a8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800d5ac:	ee30 0b41 	vsub.f64	d0, d0, d1
 800d5b0:	4770      	bx	lr
 800d5b2:	bf00      	nop
 800d5b4:	f3af 8000 	nop.w
 800d5b8:	5acfd57c 	.word	0x5acfd57c
 800d5bc:	3de5d93a 	.word	0x3de5d93a
 800d5c0:	8a2b9ceb 	.word	0x8a2b9ceb
 800d5c4:	be5ae5e6 	.word	0xbe5ae5e6
 800d5c8:	57b1fe7d 	.word	0x57b1fe7d
 800d5cc:	3ec71de3 	.word	0x3ec71de3
 800d5d0:	19c161d5 	.word	0x19c161d5
 800d5d4:	bf2a01a0 	.word	0xbf2a01a0
 800d5d8:	1110f8a6 	.word	0x1110f8a6
 800d5dc:	3f811111 	.word	0x3f811111
 800d5e0:	55555549 	.word	0x55555549
 800d5e4:	bfc55555 	.word	0xbfc55555
 800d5e8:	55555549 	.word	0x55555549
 800d5ec:	3fc55555 	.word	0x3fc55555

0800d5f0 <fabs>:
 800d5f0:	ec51 0b10 	vmov	r0, r1, d0
 800d5f4:	ee10 2a10 	vmov	r2, s0
 800d5f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d5fc:	ec43 2b10 	vmov	d0, r2, r3
 800d600:	4770      	bx	lr

0800d602 <finite>:
 800d602:	ee10 3a90 	vmov	r3, s1
 800d606:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800d60a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d60e:	0fc0      	lsrs	r0, r0, #31
 800d610:	4770      	bx	lr
 800d612:	0000      	movs	r0, r0
 800d614:	0000      	movs	r0, r0
	...

0800d618 <floor>:
 800d618:	ee10 1a90 	vmov	r1, s1
 800d61c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d620:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800d624:	2b13      	cmp	r3, #19
 800d626:	b530      	push	{r4, r5, lr}
 800d628:	ee10 0a10 	vmov	r0, s0
 800d62c:	ee10 5a10 	vmov	r5, s0
 800d630:	dc33      	bgt.n	800d69a <floor+0x82>
 800d632:	2b00      	cmp	r3, #0
 800d634:	da17      	bge.n	800d666 <floor+0x4e>
 800d636:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800d6f8 <floor+0xe0>
 800d63a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d63e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d646:	dd09      	ble.n	800d65c <floor+0x44>
 800d648:	2900      	cmp	r1, #0
 800d64a:	da50      	bge.n	800d6ee <floor+0xd6>
 800d64c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d650:	4a2b      	ldr	r2, [pc, #172]	; (800d700 <floor+0xe8>)
 800d652:	4303      	orrs	r3, r0
 800d654:	2000      	movs	r0, #0
 800d656:	4283      	cmp	r3, r0
 800d658:	bf18      	it	ne
 800d65a:	4611      	movne	r1, r2
 800d65c:	460b      	mov	r3, r1
 800d65e:	4602      	mov	r2, r0
 800d660:	ec43 2b10 	vmov	d0, r2, r3
 800d664:	e020      	b.n	800d6a8 <floor+0x90>
 800d666:	4a27      	ldr	r2, [pc, #156]	; (800d704 <floor+0xec>)
 800d668:	411a      	asrs	r2, r3
 800d66a:	ea01 0402 	and.w	r4, r1, r2
 800d66e:	4304      	orrs	r4, r0
 800d670:	d01a      	beq.n	800d6a8 <floor+0x90>
 800d672:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800d6f8 <floor+0xe0>
 800d676:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d67a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d682:	ddeb      	ble.n	800d65c <floor+0x44>
 800d684:	2900      	cmp	r1, #0
 800d686:	bfbe      	ittt	lt
 800d688:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800d68c:	fa40 f303 	asrlt.w	r3, r0, r3
 800d690:	18c9      	addlt	r1, r1, r3
 800d692:	ea21 0102 	bic.w	r1, r1, r2
 800d696:	2000      	movs	r0, #0
 800d698:	e7e0      	b.n	800d65c <floor+0x44>
 800d69a:	2b33      	cmp	r3, #51	; 0x33
 800d69c:	dd05      	ble.n	800d6aa <floor+0x92>
 800d69e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6a2:	d101      	bne.n	800d6a8 <floor+0x90>
 800d6a4:	ee30 0b00 	vadd.f64	d0, d0, d0
 800d6a8:	bd30      	pop	{r4, r5, pc}
 800d6aa:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800d6ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d6b2:	40e2      	lsrs	r2, r4
 800d6b4:	4202      	tst	r2, r0
 800d6b6:	d0f7      	beq.n	800d6a8 <floor+0x90>
 800d6b8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800d6f8 <floor+0xe0>
 800d6bc:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d6c0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c8:	ddc8      	ble.n	800d65c <floor+0x44>
 800d6ca:	2900      	cmp	r1, #0
 800d6cc:	da02      	bge.n	800d6d4 <floor+0xbc>
 800d6ce:	2b14      	cmp	r3, #20
 800d6d0:	d103      	bne.n	800d6da <floor+0xc2>
 800d6d2:	3101      	adds	r1, #1
 800d6d4:	ea20 0002 	bic.w	r0, r0, r2
 800d6d8:	e7c0      	b.n	800d65c <floor+0x44>
 800d6da:	2401      	movs	r4, #1
 800d6dc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d6e0:	fa04 f303 	lsl.w	r3, r4, r3
 800d6e4:	4418      	add	r0, r3
 800d6e6:	42a8      	cmp	r0, r5
 800d6e8:	bf38      	it	cc
 800d6ea:	1909      	addcc	r1, r1, r4
 800d6ec:	e7f2      	b.n	800d6d4 <floor+0xbc>
 800d6ee:	2000      	movs	r0, #0
 800d6f0:	4601      	mov	r1, r0
 800d6f2:	e7b3      	b.n	800d65c <floor+0x44>
 800d6f4:	f3af 8000 	nop.w
 800d6f8:	8800759c 	.word	0x8800759c
 800d6fc:	7e37e43c 	.word	0x7e37e43c
 800d700:	bff00000 	.word	0xbff00000
 800d704:	000fffff 	.word	0x000fffff

0800d708 <matherr>:
 800d708:	2000      	movs	r0, #0
 800d70a:	4770      	bx	lr
 800d70c:	0000      	movs	r0, r0
	...

0800d710 <nan>:
 800d710:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d718 <nan+0x8>
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop
 800d718:	00000000 	.word	0x00000000
 800d71c:	7ff80000 	.word	0x7ff80000

0800d720 <rint>:
 800d720:	b530      	push	{r4, r5, lr}
 800d722:	b085      	sub	sp, #20
 800d724:	ed8d 0b00 	vstr	d0, [sp]
 800d728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d72c:	f3c3 510a 	ubfx	r1, r3, #20, #11
 800d730:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 800d734:	2813      	cmp	r0, #19
 800d736:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 800d73a:	dc5a      	bgt.n	800d7f2 <rint+0xd2>
 800d73c:	2800      	cmp	r0, #0
 800d73e:	da2f      	bge.n	800d7a0 <rint+0x80>
 800d740:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d744:	4311      	orrs	r1, r2
 800d746:	d027      	beq.n	800d798 <rint+0x78>
 800d748:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800d74c:	4315      	orrs	r5, r2
 800d74e:	426a      	negs	r2, r5
 800d750:	432a      	orrs	r2, r5
 800d752:	0b12      	lsrs	r2, r2, #12
 800d754:	0c5b      	lsrs	r3, r3, #17
 800d756:	045b      	lsls	r3, r3, #17
 800d758:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800d75c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d760:	ea42 0103 	orr.w	r1, r2, r3
 800d764:	4b31      	ldr	r3, [pc, #196]	; (800d82c <rint+0x10c>)
 800d766:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d76a:	ed93 6b00 	vldr	d6, [r3]
 800d76e:	ec41 0b17 	vmov	d7, r0, r1
 800d772:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d776:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d77a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d77e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d782:	ed8d 7b00 	vstr	d7, [sp]
 800d786:	9b01      	ldr	r3, [sp, #4]
 800d788:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d78c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d790:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 800d794:	e9cd 0100 	strd	r0, r1, [sp]
 800d798:	ed9d 0b00 	vldr	d0, [sp]
 800d79c:	b005      	add	sp, #20
 800d79e:	bd30      	pop	{r4, r5, pc}
 800d7a0:	4923      	ldr	r1, [pc, #140]	; (800d830 <rint+0x110>)
 800d7a2:	4101      	asrs	r1, r0
 800d7a4:	ea03 0501 	and.w	r5, r3, r1
 800d7a8:	4315      	orrs	r5, r2
 800d7aa:	d0f5      	beq.n	800d798 <rint+0x78>
 800d7ac:	0849      	lsrs	r1, r1, #1
 800d7ae:	ea03 0501 	and.w	r5, r3, r1
 800d7b2:	432a      	orrs	r2, r5
 800d7b4:	d00b      	beq.n	800d7ce <rint+0xae>
 800d7b6:	ea23 0101 	bic.w	r1, r3, r1
 800d7ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d7be:	2813      	cmp	r0, #19
 800d7c0:	fa43 f300 	asr.w	r3, r3, r0
 800d7c4:	bf0c      	ite	eq
 800d7c6:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800d7ca:	2200      	movne	r2, #0
 800d7cc:	430b      	orrs	r3, r1
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	4b16      	ldr	r3, [pc, #88]	; (800d82c <rint+0x10c>)
 800d7d2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d7d6:	ed94 6b00 	vldr	d6, [r4]
 800d7da:	4610      	mov	r0, r2
 800d7dc:	ec41 0b17 	vmov	d7, r0, r1
 800d7e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d7e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d7e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d7f0:	e008      	b.n	800d804 <rint+0xe4>
 800d7f2:	2833      	cmp	r0, #51	; 0x33
 800d7f4:	dd09      	ble.n	800d80a <rint+0xea>
 800d7f6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800d7fa:	d1cd      	bne.n	800d798 <rint+0x78>
 800d7fc:	ed9d 7b00 	vldr	d7, [sp]
 800d800:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d804:	ed8d 7b00 	vstr	d7, [sp]
 800d808:	e7c6      	b.n	800d798 <rint+0x78>
 800d80a:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 800d80e:	f04f 31ff 	mov.w	r1, #4294967295
 800d812:	40c1      	lsrs	r1, r0
 800d814:	420a      	tst	r2, r1
 800d816:	d0bf      	beq.n	800d798 <rint+0x78>
 800d818:	0849      	lsrs	r1, r1, #1
 800d81a:	420a      	tst	r2, r1
 800d81c:	bf1f      	itttt	ne
 800d81e:	ea22 0101 	bicne.w	r1, r2, r1
 800d822:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800d826:	4102      	asrne	r2, r0
 800d828:	430a      	orrne	r2, r1
 800d82a:	e7d0      	b.n	800d7ce <rint+0xae>
 800d82c:	08012fa8 	.word	0x08012fa8
 800d830:	000fffff 	.word	0x000fffff
 800d834:	00000000 	.word	0x00000000

0800d838 <scalbn>:
 800d838:	b500      	push	{lr}
 800d83a:	ed2d 8b02 	vpush	{d8}
 800d83e:	b083      	sub	sp, #12
 800d840:	ed8d 0b00 	vstr	d0, [sp]
 800d844:	9b01      	ldr	r3, [sp, #4]
 800d846:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d84a:	b9a2      	cbnz	r2, 800d876 <scalbn+0x3e>
 800d84c:	9a00      	ldr	r2, [sp, #0]
 800d84e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d852:	4313      	orrs	r3, r2
 800d854:	d03a      	beq.n	800d8cc <scalbn+0x94>
 800d856:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800d910 <scalbn+0xd8>
 800d85a:	4b35      	ldr	r3, [pc, #212]	; (800d930 <scalbn+0xf8>)
 800d85c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d860:	4298      	cmp	r0, r3
 800d862:	ed8d 7b00 	vstr	d7, [sp]
 800d866:	da11      	bge.n	800d88c <scalbn+0x54>
 800d868:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800d918 <scalbn+0xe0>
 800d86c:	ed9d 6b00 	vldr	d6, [sp]
 800d870:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d874:	e007      	b.n	800d886 <scalbn+0x4e>
 800d876:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d87a:	428a      	cmp	r2, r1
 800d87c:	d10a      	bne.n	800d894 <scalbn+0x5c>
 800d87e:	ed9d 7b00 	vldr	d7, [sp]
 800d882:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d886:	ed8d 7b00 	vstr	d7, [sp]
 800d88a:	e01f      	b.n	800d8cc <scalbn+0x94>
 800d88c:	9b01      	ldr	r3, [sp, #4]
 800d88e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d892:	3a36      	subs	r2, #54	; 0x36
 800d894:	4402      	add	r2, r0
 800d896:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d89a:	428a      	cmp	r2, r1
 800d89c:	dd0a      	ble.n	800d8b4 <scalbn+0x7c>
 800d89e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800d920 <scalbn+0xe8>
 800d8a2:	eeb0 0b48 	vmov.f64	d0, d8
 800d8a6:	ed9d 1b00 	vldr	d1, [sp]
 800d8aa:	f000 f95f 	bl	800db6c <copysign>
 800d8ae:	ee20 7b08 	vmul.f64	d7, d0, d8
 800d8b2:	e7e8      	b.n	800d886 <scalbn+0x4e>
 800d8b4:	2a00      	cmp	r2, #0
 800d8b6:	dd10      	ble.n	800d8da <scalbn+0xa2>
 800d8b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d8c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d8c4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d8c8:	e9cd 0100 	strd	r0, r1, [sp]
 800d8cc:	ed9d 0b00 	vldr	d0, [sp]
 800d8d0:	b003      	add	sp, #12
 800d8d2:	ecbd 8b02 	vpop	{d8}
 800d8d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d8da:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d8de:	da06      	bge.n	800d8ee <scalbn+0xb6>
 800d8e0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d8e4:	4298      	cmp	r0, r3
 800d8e6:	dcda      	bgt.n	800d89e <scalbn+0x66>
 800d8e8:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800d918 <scalbn+0xe0>
 800d8ec:	e7d9      	b.n	800d8a2 <scalbn+0x6a>
 800d8ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d8f6:	3236      	adds	r2, #54	; 0x36
 800d8f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d8fc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d900:	ec41 0b17 	vmov	d7, r0, r1
 800d904:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800d928 <scalbn+0xf0>
 800d908:	e7b2      	b.n	800d870 <scalbn+0x38>
 800d90a:	bf00      	nop
 800d90c:	f3af 8000 	nop.w
 800d910:	00000000 	.word	0x00000000
 800d914:	43500000 	.word	0x43500000
 800d918:	c2f8f359 	.word	0xc2f8f359
 800d91c:	01a56e1f 	.word	0x01a56e1f
 800d920:	8800759c 	.word	0x8800759c
 800d924:	7e37e43c 	.word	0x7e37e43c
 800d928:	00000000 	.word	0x00000000
 800d92c:	3c900000 	.word	0x3c900000
 800d930:	ffff3cb0 	.word	0xffff3cb0
 800d934:	00000000 	.word	0x00000000

0800d938 <__ieee754_log>:
 800d938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d93a:	ed8d 0b00 	vstr	d0, [sp]
 800d93e:	9a01      	ldr	r2, [sp, #4]
 800d940:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800d944:	da26      	bge.n	800d994 <__ieee754_log+0x5c>
 800d946:	9900      	ldr	r1, [sp, #0]
 800d948:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800d94c:	430b      	orrs	r3, r1
 800d94e:	d107      	bne.n	800d960 <__ieee754_log+0x28>
 800d950:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800db00 <__ieee754_log+0x1c8>
 800d954:	ed9f 7b6c 	vldr	d7, [pc, #432]	; 800db08 <__ieee754_log+0x1d0>
 800d958:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800d95c:	b003      	add	sp, #12
 800d95e:	bd30      	pop	{r4, r5, pc}
 800d960:	2a00      	cmp	r2, #0
 800d962:	da04      	bge.n	800d96e <__ieee754_log+0x36>
 800d964:	ed9d 7b00 	vldr	d7, [sp]
 800d968:	ee37 6b47 	vsub.f64	d6, d7, d7
 800d96c:	e7f2      	b.n	800d954 <__ieee754_log+0x1c>
 800d96e:	ed9d 6b00 	vldr	d6, [sp]
 800d972:	ed9f 7b67 	vldr	d7, [pc, #412]	; 800db10 <__ieee754_log+0x1d8>
 800d976:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d97a:	ed8d 7b00 	vstr	d7, [sp]
 800d97e:	9a01      	ldr	r2, [sp, #4]
 800d980:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800d984:	4b78      	ldr	r3, [pc, #480]	; (800db68 <__ieee754_log+0x230>)
 800d986:	429a      	cmp	r2, r3
 800d988:	dd06      	ble.n	800d998 <__ieee754_log+0x60>
 800d98a:	ed9d 7b00 	vldr	d7, [sp]
 800d98e:	ee37 0b07 	vadd.f64	d0, d7, d7
 800d992:	e7e3      	b.n	800d95c <__ieee754_log+0x24>
 800d994:	2100      	movs	r1, #0
 800d996:	e7f5      	b.n	800d984 <__ieee754_log+0x4c>
 800d998:	1513      	asrs	r3, r2, #20
 800d99a:	f3c2 0013 	ubfx	r0, r2, #0, #20
 800d99e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d9a2:	4419      	add	r1, r3
 800d9a4:	f500 2315 	add.w	r3, r0, #610304	; 0x95000
 800d9a8:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800d9ac:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
 800d9b0:	f084 557f 	eor.w	r5, r4, #1069547520	; 0x3fc00000
 800d9b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9b8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d9bc:	f485 1540 	eor.w	r5, r5, #3145728	; 0x300000
 800d9c0:	ea45 0300 	orr.w	r3, r5, r0
 800d9c4:	ec43 2b10 	vmov	d0, r2, r3
 800d9c8:	1c82      	adds	r2, r0, #2
 800d9ca:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d9ce:	2a02      	cmp	r2, #2
 800d9d0:	eb01 5414 	add.w	r4, r1, r4, lsr #20
 800d9d4:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d9d8:	dc31      	bgt.n	800da3e <__ieee754_log+0x106>
 800d9da:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e2:	d10f      	bne.n	800da04 <__ieee754_log+0xcc>
 800d9e4:	2c00      	cmp	r4, #0
 800d9e6:	f000 8086 	beq.w	800daf6 <__ieee754_log+0x1be>
 800d9ea:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800db18 <__ieee754_log+0x1e0>
 800d9ee:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 800db20 <__ieee754_log+0x1e8>
 800d9f2:	ee07 4a90 	vmov	s15, r4
 800d9f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d9fa:	ee27 0b00 	vmul.f64	d0, d7, d0
 800d9fe:	eea7 0b06 	vfma.f64	d0, d7, d6
 800da02:	e7ab      	b.n	800d95c <__ieee754_log+0x24>
 800da04:	ed9f 7b48 	vldr	d7, [pc, #288]	; 800db28 <__ieee754_log+0x1f0>
 800da08:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800da0c:	eea0 6b47 	vfms.f64	d6, d0, d7
 800da10:	ee20 7b00 	vmul.f64	d7, d0, d0
 800da14:	ee26 6b07 	vmul.f64	d6, d6, d7
 800da18:	b914      	cbnz	r4, 800da20 <__ieee754_log+0xe8>
 800da1a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800da1e:	e79d      	b.n	800d95c <__ieee754_log+0x24>
 800da20:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 800db18 <__ieee754_log+0x1e0>
 800da24:	ee07 4a90 	vmov	s15, r4
 800da28:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800da2c:	eea7 6b45 	vfms.f64	d6, d7, d5
 800da30:	ee36 0b40 	vsub.f64	d0, d6, d0
 800da34:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800db20 <__ieee754_log+0x1e8>
 800da38:	ee97 0b06 	vfnms.f64	d0, d7, d6
 800da3c:	e78e      	b.n	800d95c <__ieee754_log+0x24>
 800da3e:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800da42:	ee30 7b07 	vadd.f64	d7, d0, d7
 800da46:	ee80 4b07 	vdiv.f64	d4, d0, d7
 800da4a:	ee07 4a90 	vmov	s15, r4
 800da4e:	ee24 2b04 	vmul.f64	d2, d4, d4
 800da52:	ed9f 3b37 	vldr	d3, [pc, #220]	; 800db30 <__ieee754_log+0x1f8>
 800da56:	ee22 5b02 	vmul.f64	d5, d2, d2
 800da5a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800da5e:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800db38 <__ieee754_log+0x200>
 800da62:	eea5 7b03 	vfma.f64	d7, d5, d3
 800da66:	ed9f 3b36 	vldr	d3, [pc, #216]	; 800db40 <__ieee754_log+0x208>
 800da6a:	ed9f 1b37 	vldr	d1, [pc, #220]	; 800db48 <__ieee754_log+0x210>
 800da6e:	eea7 3b05 	vfma.f64	d3, d7, d5
 800da72:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800db50 <__ieee754_log+0x218>
 800da76:	eea5 7b01 	vfma.f64	d7, d5, d1
 800da7a:	ed9f 1b37 	vldr	d1, [pc, #220]	; 800db58 <__ieee754_log+0x220>
 800da7e:	f5a0 21c2 	sub.w	r1, r0, #397312	; 0x61000
 800da82:	f5c0 22d7 	rsb	r2, r0, #440320	; 0x6b800
 800da86:	eea7 1b05 	vfma.f64	d1, d7, d5
 800da8a:	f2a1 417a 	subw	r1, r1, #1146	; 0x47a
 800da8e:	ed9f 7b34 	vldr	d7, [pc, #208]	; 800db60 <__ieee754_log+0x228>
 800da92:	3251      	adds	r2, #81	; 0x51
 800da94:	430a      	orrs	r2, r1
 800da96:	2a00      	cmp	r2, #0
 800da98:	eea1 7b05 	vfma.f64	d7, d1, d5
 800da9c:	ee27 7b02 	vmul.f64	d7, d7, d2
 800daa0:	eea3 7b05 	vfma.f64	d7, d3, d5
 800daa4:	dd1c      	ble.n	800dae0 <__ieee754_log+0x1a8>
 800daa6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800daaa:	ee20 5b05 	vmul.f64	d5, d0, d5
 800daae:	ee25 5b00 	vmul.f64	d5, d5, d0
 800dab2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800dab6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800daba:	b924      	cbnz	r4, 800dac6 <__ieee754_log+0x18e>
 800dabc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dac0:	ee30 0b47 	vsub.f64	d0, d0, d7
 800dac4:	e74a      	b.n	800d95c <__ieee754_log+0x24>
 800dac6:	ed9f 4b14 	vldr	d4, [pc, #80]	; 800db18 <__ieee754_log+0x1e0>
 800daca:	eea6 7b04 	vfma.f64	d7, d6, d4
 800dace:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dad2:	ee37 0b40 	vsub.f64	d0, d7, d0
 800dad6:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800db20 <__ieee754_log+0x1e8>
 800dada:	ee96 0b07 	vfnms.f64	d0, d6, d7
 800dade:	e73d      	b.n	800d95c <__ieee754_log+0x24>
 800dae0:	ee30 7b47 	vsub.f64	d7, d0, d7
 800dae4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dae8:	2c00      	cmp	r4, #0
 800daea:	d0e9      	beq.n	800dac0 <__ieee754_log+0x188>
 800daec:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 800db18 <__ieee754_log+0x1e0>
 800daf0:	eea6 7b45 	vfms.f64	d7, d6, d5
 800daf4:	e7ed      	b.n	800dad2 <__ieee754_log+0x19a>
 800daf6:	ed9f 0b04 	vldr	d0, [pc, #16]	; 800db08 <__ieee754_log+0x1d0>
 800dafa:	e72f      	b.n	800d95c <__ieee754_log+0x24>
 800dafc:	f3af 8000 	nop.w
 800db00:	00000000 	.word	0x00000000
 800db04:	c3500000 	.word	0xc3500000
	...
 800db14:	43500000 	.word	0x43500000
 800db18:	35793c76 	.word	0x35793c76
 800db1c:	3dea39ef 	.word	0x3dea39ef
 800db20:	fee00000 	.word	0xfee00000
 800db24:	3fe62e42 	.word	0x3fe62e42
 800db28:	55555555 	.word	0x55555555
 800db2c:	3fd55555 	.word	0x3fd55555
 800db30:	d078c69f 	.word	0xd078c69f
 800db34:	3fc39a09 	.word	0x3fc39a09
 800db38:	1d8e78af 	.word	0x1d8e78af
 800db3c:	3fcc71c5 	.word	0x3fcc71c5
 800db40:	9997fa04 	.word	0x9997fa04
 800db44:	3fd99999 	.word	0x3fd99999
 800db48:	df3e5244 	.word	0xdf3e5244
 800db4c:	3fc2f112 	.word	0x3fc2f112
 800db50:	96cb03de 	.word	0x96cb03de
 800db54:	3fc74664 	.word	0x3fc74664
 800db58:	94229359 	.word	0x94229359
 800db5c:	3fd24924 	.word	0x3fd24924
 800db60:	55555593 	.word	0x55555593
 800db64:	3fe55555 	.word	0x3fe55555
 800db68:	7fefffff 	.word	0x7fefffff

0800db6c <copysign>:
 800db6c:	ec51 0b10 	vmov	r0, r1, d0
 800db70:	ee11 0a90 	vmov	r0, s3
 800db74:	ee10 2a10 	vmov	r2, s0
 800db78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800db7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800db80:	ea41 0300 	orr.w	r3, r1, r0
 800db84:	ec43 2b10 	vmov	d0, r2, r3
 800db88:	4770      	bx	lr
	...

0800db8c <_init>:
 800db8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db8e:	bf00      	nop
 800db90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db92:	bc08      	pop	{r3}
 800db94:	469e      	mov	lr, r3
 800db96:	4770      	bx	lr

0800db98 <_fini>:
 800db98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db9a:	bf00      	nop
 800db9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db9e:	bc08      	pop	{r3}
 800dba0:	469e      	mov	lr, r3
 800dba2:	4770      	bx	lr
