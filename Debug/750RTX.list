
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b14  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000aa08  08013db8  08013db8  00023db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e7c0  0801e7c0  0004f000  2**0
                  CONTENTS
  4 .ARM          00000008  0801e7c0  0801e7c0  0002e7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e7c8  0801e7c8  0004f000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e7c8  0801e7c8  0002e7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e7cc  0801e7cc  0002e7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000668  24000000  0801e7d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ee68  24000680  0801ee38  00030680  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  2400f4e8  0801ee38  0003f4e8  2**0
                  ALLOC
 11 .dtcm         0000f000  20000000  20000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  0004f000  2**0
                  CONTENTS, READONLY
 13 .debug_info   00049faa  00000000  00000000  0004f02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000086f0  00000000  00000000  00098fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000301c2  00000000  00000000  000a16c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b88  00000000  00000000  000d1890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004f68  00000000  00000000  000d3418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000090e2  00000000  00000000  000d8380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00043265  00000000  00000000  000e1462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001871ec  00000000  00000000  001246c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000c5  00000000  00000000  002ab8b3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007128  00000000  00000000  002ab978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000680 	.word	0x24000680
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013d9c 	.word	0x08013d9c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000684 	.word	0x24000684
 80002dc:	08013d9c 	.word	0x08013d9c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <loadWPM>:
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
	}
}

void loadWPM (int wpm) // Calculate new time constants based on wpm value
{
 8000694:	b510      	push	{r4, lr}

	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 8000696:	4c05      	ldr	r4, [pc, #20]	; (80006ac <loadWPM+0x18>)
{
 8000698:	4602      	mov	r2, r0
	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 800069a:	17c3      	asrs	r3, r0, #31
 800069c:	2100      	movs	r1, #0
 800069e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80006a2:	f7ff fe75 	bl	8000390 <__aeabi_uldivmod>
 80006a6:	6020      	str	r0, [r4, #0]

}
 80006a8:	bd10      	pop	{r4, pc}
 80006aa:	bf00      	nop
 80006ac:	24009c38 	.word	0x24009c38

080006b0 <HAL_TIM_PeriodElapsedCallback>:
		}
	}
}

HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80006b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

void DoKeyer(void)
{

#ifdef SEMI_QSK
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 80006b4:	4c9a      	ldr	r4, [pc, #616]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80006b6:	6823      	ldr	r3, [r4, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d12f      	bne.n	800071c <HAL_TIM_PeriodElapsedCallback+0x6c>
			semi_qsk_timeout = 0;
						pk = Saved_pk;
		}  // delayed QSK RX
#endif

	if(keyer_mode != SINGLE){  // check DIT/DAH keys for CW
 80006bc:	4a99      	ldr	r2, [pc, #612]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	2a02      	cmp	r2, #2
 80006c2:	d029      	beq.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>

		switch(keyerState){ // Basic Iambic Keyer, keyerControl contains processing flags and keyer mode bits, Supports Iambic A and B, State machine based, uses calls to millis() for timing.
 80006c4:	4d98      	ldr	r5, [pc, #608]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80006c6:	782a      	ldrb	r2, [r5, #0]
 80006c8:	2a05      	cmp	r2, #5
 80006ca:	d825      	bhi.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
 80006cc:	e8df f012 	tbh	[pc, r2, lsl #1]
 80006d0:	009f0070 	.word	0x009f0070
 80006d4:	000600d9 	.word	0x000600d9
 80006d8:	004000ad 	.word	0x004000ad
			} else {
				keyerState = IDLE;
			}
			break;
		case KEYED_PREP: // Assert key down, start timing, state shared for dit or dah
			Key_state = HIGH;
 80006dc:	4a93      	ldr	r2, [pc, #588]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80006de:	2001      	movs	r0, #1
 80006e0:	6010      	str	r0, [r2, #0]
	if(!(semi_qsk_timeout))
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	f000 80e2 	beq.w	80008ac <HAL_TIM_PeriodElapsedCallback+0x1fc>
 80006e8:	4f91      	ldr	r7, [pc, #580]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x280>)
	tx = tx_enable;
 80006ea:	2601      	movs	r6, #1
		semi_qsk_timeout = 0;
 80006ec:	2300      	movs	r3, #0
			CarrierEnable(1);
 80006ee:	4630      	mov	r0, r6
		semi_qsk_timeout = 0;
 80006f0:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 80006f2:	703e      	strb	r6, [r7, #0]
			CarrierEnable(1);
 80006f4:	f003 fe64 	bl	80043c0 <CarrierEnable>
		TXSwitch(1);
 80006f8:	4630      	mov	r0, r6
			switch_rxtx(Key_state);
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
			keyerState = KEYED;                 // next state
 80006fa:	2404      	movs	r4, #4
		TXSwitch(1);
 80006fc:	f003 fdfc 	bl	80042f8 <TXSwitch>
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8000700:	f005 f8e6 	bl	80058d0 <HAL_GetTick>
 8000704:	498b      	ldr	r1, [pc, #556]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 8000706:	4a8c      	ldr	r2, [pc, #560]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8000708:	680b      	ldr	r3, [r1, #0]
			keyerState = KEYED;                 // next state
 800070a:	702c      	strb	r4, [r5, #0]
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 800070c:	4418      	add	r0, r3
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 800070e:	7813      	ldrb	r3, [r2, #0]
 8000710:	f023 0303 	bic.w	r3, r3, #3
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8000714:	6008      	str	r0, [r1, #0]
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 8000716:	7013      	strb	r3, [r2, #0]
}
 8000718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 800071c:	f005 f8d8 	bl	80058d0 <HAL_GetTick>
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8000726:	4290      	cmp	r0, r2
 8000728:	f200 80b9 	bhi.w	800089e <HAL_TIM_PeriodElapsedCallback+0x1ee>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0c5      	beq.n	80006bc <HAL_TIM_PeriodElapsedCallback+0xc>
 8000730:	f005 f8ce 	bl	80058d0 <HAL_GetTick>
 8000734:	6823      	ldr	r3, [r4, #0]
 8000736:	4298      	cmp	r0, r3
 8000738:	d9c0      	bls.n	80006bc <HAL_TIM_PeriodElapsedCallback+0xc>
						pk = Saved_pk;
 800073a:	4f80      	ldr	r7, [pc, #512]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x28c>)
			TXSwitch(0);
 800073c:	2000      	movs	r0, #0
 800073e:	f003 fddb 	bl	80042f8 <TXSwitch>
						pk = Saved_pk;
 8000742:	4e7f      	ldr	r6, [pc, #508]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x290>)
			semi_qsk_timeout = 0;
 8000744:	2200      	movs	r2, #0
						pk = Saved_pk;
 8000746:	6839      	ldr	r1, [r7, #0]
 8000748:	4613      	mov	r3, r2
			semi_qsk_timeout = 0;
 800074a:	6022      	str	r2, [r4, #0]
						pk = Saved_pk;
 800074c:	6031      	str	r1, [r6, #0]
 800074e:	e7b5      	b.n	80006bc <HAL_TIM_PeriodElapsedCallback+0xc>
	if(KEYER_DASH) {
 8000750:	2140      	movs	r1, #64	; 0x40
 8000752:	487c      	ldr	r0, [pc, #496]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000754:	f008 f846 	bl	80087e4 <HAL_GPIO_ReadPin>
 8000758:	b948      	cbnz	r0, 800076e <HAL_TIM_PeriodElapsedCallback+0xbe>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 800075a:	4b7b      	ldr	r3, [pc, #492]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800075c:	4a76      	ldr	r2, [pc, #472]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	7811      	ldrb	r1, [r2, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	bf14      	ite	ne
 8000766:	2302      	movne	r3, #2
 8000768:	2301      	moveq	r3, #1
 800076a:	430b      	orrs	r3, r1
 800076c:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 800076e:	2180      	movs	r1, #128	; 0x80
 8000770:	4874      	ldr	r0, [pc, #464]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000772:	f008 f837 	bl	80087e4 <HAL_GPIO_ReadPin>
 8000776:	b948      	cbnz	r0, 800078c <HAL_TIM_PeriodElapsedCallback+0xdc>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 8000778:	4b73      	ldr	r3, [pc, #460]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800077a:	4a6f      	ldr	r2, [pc, #444]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	7811      	ldrb	r1, [r2, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	bf14      	ite	ne
 8000784:	2301      	movne	r3, #1
 8000786:	2302      	moveq	r3, #2
 8000788:	430b      	orrs	r3, r1
 800078a:	7013      	strb	r3, [r2, #0]
			}
			break;
		case INTER_ELEMENT:
			// Insert time between dits/dahs
			update_PaddleLatch();               // latch paddle state
			if(HAL_GetTick() > ktimer) {            // are we at end of inter-space ?
 800078c:	f005 f8a0 	bl	80058d0 <HAL_GetTick>
 8000790:	4b68      	ldr	r3, [pc, #416]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4298      	cmp	r0, r3
 8000796:	d9bf      	bls.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
				if(keyerControl & DIT_PROC) {             // was it a dit or dah ?
 8000798:	4a67      	ldr	r2, [pc, #412]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800079a:	7813      	ldrb	r3, [r2, #0]
 800079c:	f013 0104 	ands.w	r1, r3, #4
 80007a0:	f000 80b9 	beq.w	8000916 <HAL_TIM_PeriodElapsedCallback+0x266>
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 80007a4:	f023 0305 	bic.w	r3, r3, #5
					keyerState = CHK_DAH;                  // dit done, check for dah
 80007a8:	2102      	movs	r1, #2
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 80007aa:	7013      	strb	r3, [r2, #0]
					keyerState = CHK_DAH;                  // dit done, check for dah
 80007ac:	7029      	strb	r1, [r5, #0]
 80007ae:	e7b3      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if((KEYER_DASH) ||
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	4864      	ldr	r0, [pc, #400]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007b4:	f008 f816 	bl	80087e4 <HAL_GPIO_ReadPin>
 80007b8:	b140      	cbz	r0, 80007cc <HAL_TIM_PeriodElapsedCallback+0x11c>
					(KEYER_DOT) ||
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	4861      	ldr	r0, [pc, #388]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007be:	f008 f811 	bl	80087e4 <HAL_GPIO_ReadPin>
			if((KEYER_DASH) ||
 80007c2:	b118      	cbz	r0, 80007cc <HAL_TIM_PeriodElapsedCallback+0x11c>
					(keyerControl & 0x03))
 80007c4:	4b5c      	ldr	r3, [pc, #368]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
					(KEYER_DOT) ||
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	0798      	lsls	r0, r3, #30
 80007ca:	d0a5      	beq.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
	if(KEYER_DASH) {
 80007cc:	2140      	movs	r1, #64	; 0x40
 80007ce:	485d      	ldr	r0, [pc, #372]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007d0:	f008 f808 	bl	80087e4 <HAL_GPIO_ReadPin>
 80007d4:	b948      	cbnz	r0, 80007ea <HAL_TIM_PeriodElapsedCallback+0x13a>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 80007d6:	4b5c      	ldr	r3, [pc, #368]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80007d8:	4a57      	ldr	r2, [pc, #348]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	7811      	ldrb	r1, [r2, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf14      	ite	ne
 80007e2:	2302      	movne	r3, #2
 80007e4:	2301      	moveq	r3, #1
 80007e6:	430b      	orrs	r3, r1
 80007e8:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	4855      	ldr	r0, [pc, #340]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007ee:	f007 fff9 	bl	80087e4 <HAL_GPIO_ReadPin>
 80007f2:	b948      	cbnz	r0, 8000808 <HAL_TIM_PeriodElapsedCallback+0x158>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 80007f4:	4b54      	ldr	r3, [pc, #336]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80007f6:	4a50      	ldr	r2, [pc, #320]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	7811      	ldrb	r1, [r2, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	bf14      	ite	ne
 8000800:	2301      	movne	r3, #1
 8000802:	2302      	moveq	r3, #2
 8000804:	430b      	orrs	r3, r1
 8000806:	7013      	strb	r3, [r2, #0]
				keyerState = CHK_DIT;
 8000808:	2301      	movs	r3, #1
 800080a:	702b      	strb	r3, [r5, #0]
 800080c:	e784      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(keyerControl & DIT_L) {
 800080e:	4a4a      	ldr	r2, [pc, #296]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000810:	7813      	ldrb	r3, [r2, #0]
 8000812:	07d9      	lsls	r1, r3, #31
 8000814:	d55e      	bpl.n	80008d4 <HAL_TIM_PeriodElapsedCallback+0x224>
				keyerControl |= DIT_PROC;
 8000816:	f043 0304 	orr.w	r3, r3, #4
				ktimer = ditTime;
 800081a:	484c      	ldr	r0, [pc, #304]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800081c:	4945      	ldr	r1, [pc, #276]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800081e:	6800      	ldr	r0, [r0, #0]
				keyerControl |= DIT_PROC;
 8000820:	7013      	strb	r3, [r2, #0]
				keyerState = KEYED_PREP;
 8000822:	2303      	movs	r3, #3
				ktimer = ditTime;
 8000824:	6008      	str	r0, [r1, #0]
				keyerState = KEYED_PREP;
 8000826:	702b      	strb	r3, [r5, #0]
 8000828:	e776      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(HAL_GetTick() > ktimer) {            // are we at end of key down ?
 800082a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8000934 <HAL_TIM_PeriodElapsedCallback+0x284>
 800082e:	f005 f84f 	bl	80058d0 <HAL_GetTick>
 8000832:	f8d8 3000 	ldr.w	r3, [r8]
 8000836:	4298      	cmp	r0, r3
 8000838:	d84f      	bhi.n	80008da <HAL_TIM_PeriodElapsedCallback+0x22a>
			} else if(keyerControl & IAMBICB) {
 800083a:	4c3f      	ldr	r4, [pc, #252]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800083c:	7823      	ldrb	r3, [r4, #0]
 800083e:	06db      	lsls	r3, r3, #27
 8000840:	f57f af6a 	bpl.w	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
	if(KEYER_DASH) {
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	483f      	ldr	r0, [pc, #252]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000848:	f007 ffcc 	bl	80087e4 <HAL_GPIO_ReadPin>
 800084c:	b940      	cbnz	r0, 8000860 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 800084e:	4b3e      	ldr	r3, [pc, #248]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000850:	7822      	ldrb	r2, [r4, #0]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf14      	ite	ne
 8000858:	2302      	movne	r3, #2
 800085a:	2301      	moveq	r3, #1
 800085c:	4313      	orrs	r3, r2
 800085e:	7023      	strb	r3, [r4, #0]
	if(KEYER_DOT) {
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	4838      	ldr	r0, [pc, #224]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000864:	f007 ffbe 	bl	80087e4 <HAL_GPIO_ReadPin>
 8000868:	2800      	cmp	r0, #0
 800086a:	f47f af55 	bne.w	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 800086e:	4b36      	ldr	r3, [pc, #216]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000870:	7822      	ldrb	r2, [r4, #0]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf14      	ite	ne
 8000878:	2301      	movne	r3, #1
 800087a:	2302      	moveq	r3, #2
 800087c:	4313      	orrs	r3, r2
 800087e:	7023      	strb	r3, [r4, #0]
}
 8000880:	e74a      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(keyerControl & DAH_L) {
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	f013 0302 	ands.w	r3, r3, #2
 800088a:	d00d      	beq.n	80008a8 <HAL_TIM_PeriodElapsedCallback+0x1f8>
				ktimer = ditTime*3;
 800088c:	4b2f      	ldr	r3, [pc, #188]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x29c>)
				keyerState = KEYED_PREP;
 800088e:	2103      	movs	r1, #3
				ktimer = ditTime*3;
 8000890:	4a28      	ldr	r2, [pc, #160]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000892:	681b      	ldr	r3, [r3, #0]
				keyerState = KEYED_PREP;
 8000894:	7029      	strb	r1, [r5, #0]
				ktimer = ditTime*3;
 8000896:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800089a:	6013      	str	r3, [r2, #0]
				keyerState = KEYED_PREP;
 800089c:	e73c      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
		TXSwitch(0);
 800089e:	2000      	movs	r0, #0
 80008a0:	f003 fd2a 	bl	80042f8 <TXSwitch>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 80008a4:	6823      	ldr	r3, [r4, #0]
 80008a6:	e741      	b.n	800072c <HAL_TIM_PeriodElapsedCallback+0x7c>
				keyerState = IDLE;
 80008a8:	702b      	strb	r3, [r5, #0]
 80008aa:	e735      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 80008ac:	4e28      	ldr	r6, [pc, #160]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80008ae:	4f20      	ldr	r7, [pc, #128]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80008b0:	7833      	ldrb	r3, [r6, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f43f af19 	beq.w	80006ea <HAL_TIM_PeriodElapsedCallback+0x3a>
 80008b8:	783b      	ldrb	r3, [r7, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f47f af15 	bne.w	80006ea <HAL_TIM_PeriodElapsedCallback+0x3a>
					Saved_pk = pk;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80008c6:	601a      	str	r2, [r3, #0]
			TXSwitch(1);
 80008c8:	f003 fd16 	bl	80042f8 <TXSwitch>
			HAL_Delay(txdelay);
 80008cc:	7830      	ldrb	r0, [r6, #0]
 80008ce:	f005 f805 	bl	80058dc <HAL_Delay>
 80008d2:	e70a      	b.n	80006ea <HAL_TIM_PeriodElapsedCallback+0x3a>
				keyerState = CHK_DAH;
 80008d4:	2302      	movs	r3, #2
 80008d6:	702b      	strb	r3, [r5, #0]
 80008d8:	e71e      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
				Key_state = LOW;
 80008da:	4a14      	ldr	r2, [pc, #80]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80008dc:	2300      	movs	r3, #0
	if(!(semi_qsk_timeout))
 80008de:	6820      	ldr	r0, [r4, #0]
				Key_state = LOW;
 80008e0:	6013      	str	r3, [r2, #0]
	if(!(semi_qsk_timeout))
 80008e2:	bbb8      	cbnz	r0, 8000954 <HAL_TIM_PeriodElapsedCallback+0x2a4>
	tx = tx_enable;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x280>)
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 80008e6:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800094c <HAL_TIM_PeriodElapsedCallback+0x29c>
	tx = tx_enable;
 80008ea:	7018      	strb	r0, [r3, #0]
			CarrierEnable(0);
 80008ec:	f003 fd68 	bl	80043c0 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 80008f0:	f004 ffee 	bl	80058d0 <HAL_GetTick>
 80008f4:	f8d9 3000 	ldr.w	r3, [r9]
 80008f8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80008fc:	6020      	str	r0, [r4, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 80008fe:	2800      	cmp	r0, #0
 8000900:	d039      	beq.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x2c6>
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8000902:	f004 ffe5 	bl	80058d0 <HAL_GetTick>
 8000906:	f8d9 3000 	ldr.w	r3, [r9]
				keyerState = INTER_ELEMENT;     // next state
 800090a:	2205      	movs	r2, #5
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 800090c:	4418      	add	r0, r3
				keyerState = INTER_ELEMENT;     // next state
 800090e:	702a      	strb	r2, [r5, #0]
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8000910:	f8c8 0000 	str.w	r0, [r8]
				keyerState = INTER_ELEMENT;     // next state
 8000914:	e700      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
				} else {
					keyerControl &= ~(DAH_L);              // clear dah latch
 8000916:	f023 0302 	bic.w	r3, r3, #2
					keyerState = IDLE;                     // go idle
 800091a:	7029      	strb	r1, [r5, #0]
					keyerControl &= ~(DAH_L);              // clear dah latch
 800091c:	7013      	strb	r3, [r2, #0]
}
 800091e:	e6fb      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
 8000920:	2400c994 	.word	0x2400c994
 8000924:	2400c80a 	.word	0x2400c80a
 8000928:	2400c809 	.word	0x2400c809
 800092c:	24006260 	.word	0x24006260
 8000930:	2400d9c8 	.word	0x2400d9c8
 8000934:	2400c814 	.word	0x2400c814
 8000938:	2400c808 	.word	0x2400c808
 800093c:	24007288 	.word	0x24007288
 8000940:	2400c840 	.word	0x2400c840
 8000944:	58020000 	.word	0x58020000
 8000948:	2400c810 	.word	0x2400c810
 800094c:	24009c38 	.word	0x24009c38
 8000950:	2400d9c9 	.word	0x2400d9c9
	tx = tx_enable;
 8000954:	4a09      	ldr	r2, [pc, #36]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
			pk = Saved_pk;
 8000956:	4f0a      	ldr	r7, [pc, #40]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000958:	4e0a      	ldr	r6, [pc, #40]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
			semi_qsk_timeout = 0;
 800095a:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 800095c:	7013      	strb	r3, [r2, #0]
			pk = Saved_pk;
 800095e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8000988 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	6033      	str	r3, [r6, #0]
			TXSwitch(0);
 8000966:	2000      	movs	r0, #0
 8000968:	f003 fcc6 	bl	80042f8 <TXSwitch>
						pk = Saved_pk;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	6033      	str	r3, [r6, #0]
			semi_qsk_timeout = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	6023      	str	r3, [r4, #0]
						pk = Saved_pk;
 8000974:	e7c5      	b.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x252>
 8000976:	4e03      	ldr	r6, [pc, #12]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000978:	4f01      	ldr	r7, [pc, #4]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800097a:	e7f4      	b.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x2b6>
 800097c:	2400d9c8 	.word	0x2400d9c8
 8000980:	24007288 	.word	0x24007288
 8000984:	2400c840 	.word	0x2400c840
 8000988:	24009c38 	.word	0x24009c38

0800098c <cw_tx_char>:

uint8_t cw_msg_interval = 5; // number of seconds CW message is repeated
uint32_t cw_msg_event = 0;
uint8_t cw_msg_id = 0; // selected message

int cw_tx_char(char ch){    // Transmit message in CW
 800098c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sym;
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 8000990:	497d      	ldr	r1, [pc, #500]	; (8000b88 <cw_tx_char+0x1fc>)
 8000992:	237e      	movs	r3, #126	; 0x7e
 8000994:	2500      	movs	r5, #0
 8000996:	e004      	b.n	80009a2 <cw_tx_char+0x16>
 8000998:	b2d5      	uxtb	r5, r2
 800099a:	5d4b      	ldrb	r3, [r1, r5]
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 808b 	beq.w	8000ab8 <cw_tx_char+0x12c>
    if(sym == ch){  // found -> transmit CW character j
 80009a2:	4298      	cmp	r0, r3
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 80009a4:	f105 0201 	add.w	r2, r5, #1
    if(sym == ch){  // found -> transmit CW character j
 80009a8:	d1f6      	bne.n	8000998 <cw_tx_char+0xc>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 80009aa:	062b      	lsls	r3, r5, #24
 80009ac:	f100 80e6 	bmi.w	8000b7c <cw_tx_char+0x1f0>
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	461e      	mov	r6, r3
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	422b      	tst	r3, r5
 80009b8:	d0fb      	beq.n	80009b2 <cw_tx_char+0x26>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 80009ba:	08b6      	lsrs	r6, r6, #2
 80009bc:	f000 80b2 	beq.w	8000b24 <cw_tx_char+0x198>
 80009c0:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8000b9c <cw_tx_char+0x210>
 80009c4:	4f71      	ldr	r7, [pc, #452]	; (8000b8c <cw_tx_char+0x200>)
 80009c6:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8000ba4 <cw_tx_char+0x218>
					Saved_pk = pk;
 80009ca:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8000ba0 <cw_tx_char+0x214>
	if(!(semi_qsk_timeout))
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b93b      	cbnz	r3, 80009e2 <cw_tx_char+0x56>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 80009d2:	4b6f      	ldr	r3, [pc, #444]	; (8000b90 <cw_tx_char+0x204>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b123      	cbz	r3, 80009e2 <cw_tx_char+0x56>
 80009d8:	f898 3000 	ldrb.w	r3, [r8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f000 8095 	beq.w	8000b0c <cw_tx_char+0x180>
	tx = tx_enable;
 80009e2:	2401      	movs	r4, #1
		semi_qsk_timeout = 0;
 80009e4:	2300      	movs	r3, #0
			CarrierEnable(1);
 80009e6:	4620      	mov	r0, r4
		semi_qsk_timeout = 0;
 80009e8:	603b      	str	r3, [r7, #0]
	tx = tx_enable;
 80009ea:	f888 4000 	strb.w	r4, [r8]
			CarrierEnable(1);
 80009ee:	f003 fce7 	bl	80043c0 <CarrierEnable>
		TXSwitch(1);
 80009f2:	4620      	mov	r0, r4
    if(KEYER_DASH || KEYER_DOT){
 80009f4:	4c67      	ldr	r4, [pc, #412]	; (8000b94 <cw_tx_char+0x208>)
		TXSwitch(1);
 80009f6:	f003 fc7f 	bl	80042f8 <TXSwitch>
      else {
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
          switch_rxtx(1);  // key-on  tx
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 80009fa:	422e      	tst	r6, r5
 80009fc:	f8d9 0000 	ldr.w	r0, [r9]
 8000a00:	bf14      	ite	ne
 8000a02:	f04f 0b03 	movne.w	fp, #3
 8000a06:	f04f 0b01 	moveq.w	fp, #1
 8000a0a:	fb00 fb0b 	mul.w	fp, r0, fp
  uint32_t event = HAL_GetTick() + ms;
 8000a0e:	f004 ff5f 	bl	80058d0 <HAL_GetTick>
 8000a12:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 8000a14:	e00a      	b.n	8000a2c <cw_tx_char+0xa0>
    if(KEYER_DASH || KEYER_DOT){
 8000a16:	f007 fee5 	bl	80087e4 <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	4620      	mov	r0, r4
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d04c      	beq.n	8000abe <cw_tx_char+0x132>
 8000a24:	f007 fede 	bl	80087e4 <HAL_GPIO_ReadPin>
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d048      	beq.n	8000abe <cw_tx_char+0x132>
  while(HAL_GetTick() < event){
 8000a2c:	f004 ff50 	bl	80058d0 <HAL_GetTick>
 8000a30:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000a36:	459b      	cmp	fp, r3
 8000a38:	d8ed      	bhi.n	8000a16 <cw_tx_char+0x8a>
	if(!(semi_qsk_timeout))
 8000a3a:	6838      	ldr	r0, [r7, #0]
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	d151      	bne.n	8000ae4 <cw_tx_char+0x158>
	tx = tx_enable;
 8000a40:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 8000a44:	f003 fcbc 	bl	80043c0 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8000a48:	f004 ff42 	bl	80058d0 <HAL_GetTick>
 8000a4c:	f8d9 b000 	ldr.w	fp, [r9]
 8000a50:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
 8000a54:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d04c      	beq.n	8000af4 <cw_tx_char+0x168>
  uint32_t event = HAL_GetTick() + ms;
 8000a5a:	f004 ff39 	bl	80058d0 <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 8000a5e:	4c4d      	ldr	r4, [pc, #308]	; (8000b94 <cw_tx_char+0x208>)
  uint32_t event = HAL_GetTick() + ms;
 8000a60:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 8000a62:	e008      	b.n	8000a76 <cw_tx_char+0xea>
    if(KEYER_DASH || KEYER_DOT){
 8000a64:	f007 febe 	bl	80087e4 <HAL_GPIO_ReadPin>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	b3b3      	cbz	r3, 8000ade <cw_tx_char+0x152>
 8000a70:	f007 feb8 	bl	80087e4 <HAL_GPIO_ReadPin>
 8000a74:	b398      	cbz	r0, 8000ade <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 8000a76:	f004 ff2b 	bl	80058d0 <HAL_GetTick>
 8000a7a:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000a80:	459b      	cmp	fp, r3
 8000a82:	d8ef      	bhi.n	8000a64 <cw_tx_char+0xd8>
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
 8000a84:	0876      	lsrs	r6, r6, #1
 8000a86:	d1a2      	bne.n	80009ce <cw_tx_char+0x42>
          switch_rxtx(0);  // key-off tx
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
        }
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 8000a88:	f8d9 6000 	ldr.w	r6, [r9]
  uint32_t event = HAL_GetTick() + ms;
 8000a8c:	f004 ff20 	bl	80058d0 <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 8000a90:	4c40      	ldr	r4, [pc, #256]	; (8000b94 <cw_tx_char+0x208>)
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 8000a92:	0076      	lsls	r6, r6, #1
  uint32_t event = HAL_GetTick() + ms;
 8000a94:	4406      	add	r6, r0
  while(HAL_GetTick() < event){
 8000a96:	e008      	b.n	8000aaa <cw_tx_char+0x11e>
    if(KEYER_DASH || KEYER_DOT){
 8000a98:	f007 fea4 	bl	80087e4 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	4620      	mov	r0, r4
 8000aa2:	b1e3      	cbz	r3, 8000ade <cw_tx_char+0x152>
 8000aa4:	f007 fe9e 	bl	80087e4 <HAL_GPIO_ReadPin>
 8000aa8:	b1c8      	cbz	r0, 8000ade <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 8000aaa:	f004 ff11 	bl	80058d0 <HAL_GetTick>
 8000aae:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000ab0:	2140      	movs	r1, #64	; 0x40
 8000ab2:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000ab4:	429e      	cmp	r6, r3
 8000ab6:	d8ef      	bhi.n	8000a98 <cw_tx_char+0x10c>
      }
      break; // next character
    }
  }
  return 0;
 8000ab8:	2000      	movs	r0, #0
}
 8000aba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(!(semi_qsk_timeout))
 8000abe:	6838      	ldr	r0, [r7, #0]
 8000ac0:	2800      	cmp	r0, #0
 8000ac2:	d14a      	bne.n	8000b5a <cw_tx_char+0x1ce>
	tx = tx_enable;
 8000ac4:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 8000ac8:	f003 fc7a 	bl	80043c0 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8000acc:	f004 ff00 	bl	80058d0 <HAL_GetTick>
 8000ad0:	f8d9 3000 	ldr.w	r3, [r9]
 8000ad4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8000ad8:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8000ada:	2800      	cmp	r0, #0
 8000adc:	d050      	beq.n	8000b80 <cw_tx_char+0x1f4>
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8000ade:	2001      	movs	r0, #1
}
 8000ae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tx = tx_enable;
 8000ae4:	2300      	movs	r3, #0
			pk = Saved_pk;
 8000ae6:	4a2c      	ldr	r2, [pc, #176]	; (8000b98 <cw_tx_char+0x20c>)
	tx = tx_enable;
 8000ae8:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 8000aec:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 8000aee:	f8da 3000 	ldr.w	r3, [sl]
 8000af2:	6013      	str	r3, [r2, #0]
			TXSwitch(0);
 8000af4:	2000      	movs	r0, #0
 8000af6:	f003 fbff 	bl	80042f8 <TXSwitch>
			semi_qsk_timeout = 0;
 8000afa:	2300      	movs	r3, #0
						pk = Saved_pk;
 8000afc:	4a26      	ldr	r2, [pc, #152]	; (8000b98 <cw_tx_char+0x20c>)
			semi_qsk_timeout = 0;
 8000afe:	603b      	str	r3, [r7, #0]
						pk = Saved_pk;
 8000b00:	f8da 3000 	ldr.w	r3, [sl]
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
 8000b04:	f8d9 b000 	ldr.w	fp, [r9]
						pk = Saved_pk;
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	e7a6      	b.n	8000a5a <cw_tx_char+0xce>
					Saved_pk = pk;
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <cw_tx_char+0x20c>)
			TXSwitch(1);
 8000b0e:	2001      	movs	r0, #1
					Saved_pk = pk;
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f8ca 3000 	str.w	r3, [sl]
			TXSwitch(1);
 8000b16:	f003 fbef 	bl	80042f8 <TXSwitch>
			HAL_Delay(txdelay);
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <cw_tx_char+0x204>)
 8000b1c:	7818      	ldrb	r0, [r3, #0]
 8000b1e:	f004 fedd 	bl	80058dc <HAL_Delay>
 8000b22:	e75e      	b.n	80009e2 <cw_tx_char+0x56>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <cw_tx_char+0x210>)
    if(KEYER_DASH || KEYER_DOT){
 8000b26:	4c1b      	ldr	r4, [pc, #108]	; (8000b94 <cw_tx_char+0x208>)
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8000b28:	681e      	ldr	r6, [r3, #0]
  uint32_t event = HAL_GetTick() + ms;
 8000b2a:	f004 fed1 	bl	80058d0 <HAL_GetTick>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8000b2e:	00b6      	lsls	r6, r6, #2
  uint32_t event = HAL_GetTick() + ms;
 8000b30:	4406      	add	r6, r0
  while(HAL_GetTick() < event){
 8000b32:	e00a      	b.n	8000b4a <cw_tx_char+0x1be>
    if(KEYER_DASH || KEYER_DOT){
 8000b34:	f007 fe56 	bl	80087e4 <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2180      	movs	r1, #128	; 0x80
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0ba      	beq.n	8000ab8 <cw_tx_char+0x12c>
 8000b42:	f007 fe4f 	bl	80087e4 <HAL_GPIO_ReadPin>
 8000b46:	2800      	cmp	r0, #0
 8000b48:	d0b6      	beq.n	8000ab8 <cw_tx_char+0x12c>
  while(HAL_GetTick() < event){
 8000b4a:	f004 fec1 	bl	80058d0 <HAL_GetTick>
 8000b4e:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000b54:	429e      	cmp	r6, r3
 8000b56:	d8ed      	bhi.n	8000b34 <cw_tx_char+0x1a8>
 8000b58:	e7ae      	b.n	8000ab8 <cw_tx_char+0x12c>
	tx = tx_enable;
 8000b5a:	2300      	movs	r3, #0
			pk = Saved_pk;
 8000b5c:	4d10      	ldr	r5, [pc, #64]	; (8000ba0 <cw_tx_char+0x214>)
 8000b5e:	4c0e      	ldr	r4, [pc, #56]	; (8000b98 <cw_tx_char+0x20c>)
	tx = tx_enable;
 8000b60:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 8000b64:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 8000b66:	682b      	ldr	r3, [r5, #0]
 8000b68:	6023      	str	r3, [r4, #0]
			TXSwitch(0);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f003 fbc4 	bl	80042f8 <TXSwitch>
			semi_qsk_timeout = 0;
 8000b70:	2200      	movs	r2, #0
						pk = Saved_pk;
 8000b72:	682b      	ldr	r3, [r5, #0]
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8000b74:	2001      	movs	r0, #1
			semi_qsk_timeout = 0;
 8000b76:	603a      	str	r2, [r7, #0]
						pk = Saved_pk;
 8000b78:	6023      	str	r3, [r4, #0]
 8000b7a:	e79e      	b.n	8000aba <cw_tx_char+0x12e>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 8000b7c:	2640      	movs	r6, #64	; 0x40
 8000b7e:	e71f      	b.n	80009c0 <cw_tx_char+0x34>
 8000b80:	4d07      	ldr	r5, [pc, #28]	; (8000ba0 <cw_tx_char+0x214>)
 8000b82:	4c05      	ldr	r4, [pc, #20]	; (8000b98 <cw_tx_char+0x20c>)
 8000b84:	e7f1      	b.n	8000b6a <cw_tx_char+0x1de>
 8000b86:	bf00      	nop
 8000b88:	08013de0 	.word	0x08013de0
 8000b8c:	2400c994 	.word	0x2400c994
 8000b90:	2400d9c9 	.word	0x2400d9c9
 8000b94:	58020000 	.word	0x58020000
 8000b98:	2400c840 	.word	0x2400c840
 8000b9c:	24009c38 	.word	0x24009c38
 8000ba0:	24007288 	.word	0x24007288
 8000ba4:	2400d9c8 	.word	0x2400d9c8

08000ba8 <SendCWMessage>:
  return 0;
}


void SendCWMessage(uint8_t MessageNo)
{
 8000ba8:	b538      	push	{r3, r4, r5, lr}
	cw_tx(cw_msg[MessageNo]);
 8000baa:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <SendCWMessage+0x28>)
 8000bb0:	012a      	lsls	r2, r5, #4
 8000bb2:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  for(uint8_t i = 0; msg[i]; i++){  // loop over message
 8000bb6:	5c98      	ldrb	r0, [r3, r2]
 8000bb8:	b148      	cbz	r0, 8000bce <SendCWMessage+0x26>
 8000bba:	2400      	movs	r4, #0
 8000bbc:	e002      	b.n	8000bc4 <SendCWMessage+0x1c>
 8000bbe:	b2e4      	uxtb	r4, r4
 8000bc0:	5d28      	ldrb	r0, [r5, r4]
 8000bc2:	b120      	cbz	r0, 8000bce <SendCWMessage+0x26>
 8000bc4:	3401      	adds	r4, #1
    if(cw_tx_char(msg[i])) return 1;
 8000bc6:	f7ff fee1 	bl	800098c <cw_tx_char>
 8000bca:	2800      	cmp	r0, #0
 8000bcc:	d0f7      	beq.n	8000bbe <SendCWMessage+0x16>
}
 8000bce:	bd38      	pop	{r3, r4, r5, pc}
 8000bd0:	24000000 	.word	0x24000000

08000bd4 <Load_Presets>:
// Load from the Presets table
void Load_Presets(void)
{
	int k;

	for(k=0; k<MAXPRESETS; k++)
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <Load_Presets+0x40>)
{
 8000bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bda:	4c0f      	ldr	r4, [pc, #60]	; (8000c18 <Load_Presets+0x44>)
 8000bdc:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 8000be0:	4f0e      	ldr	r7, [pc, #56]	; (8000c1c <Load_Presets+0x48>)
 8000be2:	4e0f      	ldr	r6, [pc, #60]	; (8000c20 <Load_Presets+0x4c>)
 8000be4:	4d0f      	ldr	r5, [pc, #60]	; (8000c24 <Load_Presets+0x50>)
	{
		strcpy(psets[k].name, pNames[k]);
 8000be6:	4621      	mov	r1, r4
 8000be8:	4618      	mov	r0, r3
 8000bea:	f00f fcdf 	bl	80105ac <strcpy>
 8000bee:	4603      	mov	r3, r0
		psets[k].freq = pFreqs[k];
 8000bf0:	f857 0b04 	ldr.w	r0, [r7], #4
	for(k=0; k<MAXPRESETS; k++)
 8000bf4:	3410      	adds	r4, #16
 8000bf6:	3318      	adds	r3, #24
		psets[k].mode = pModes[k];
 8000bf8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		psets[k].freq = pFreqs[k];
 8000bfc:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 8000c00:	f815 2f01 	ldrb.w	r2, [r5, #1]!
	for(k=0; k<MAXPRESETS; k++)
 8000c04:	4543      	cmp	r3, r8
		psets[k].mode = pModes[k];
 8000c06:	f803 1c04 	strb.w	r1, [r3, #-4]
		psets[k].bw   = pBws[k];
 8000c0a:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 8000c0e:	d1ea      	bne.n	8000be6 <Load_Presets+0x12>
	}
}
 8000c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c14:	2400c844 	.word	0x2400c844
 8000c18:	24000120 	.word	0x24000120
 8000c1c:	08019e70 	.word	0x08019e70
 8000c20:	08019ea7 	.word	0x08019ea7
 8000c24:	08019e5f 	.word	0x08019e5f

08000c28 <SetBW>:
// Load the FFT mask according to the mode and the bandwidth chosen,
// and change the color of the buttons to indicate the active bandwidth
void SetBW(/*WM_HWIN ptr,*/ Bwidth newbw)
{
	CurrentBW = newbw;
	switch(CurrentMode)
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <SetBW+0x8c>)
	CurrentBW = newbw;
 8000c2a:	4a23      	ldr	r2, [pc, #140]	; (8000cb8 <SetBW+0x90>)
{
 8000c2c:	b410      	push	{r4}
	switch(CurrentMode)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
	CurrentBW = newbw;
 8000c30:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d83a      	bhi.n	8000cac <SetBW+0x84>
 8000c36:	e8df f003 	tbb	[pc, r3]
 8000c3a:	232b      	.short	0x232b
 8000c3c:	0210      	.short	0x0210

		break;

	case CW  :

		bw[CW] = newbw;
 8000c3e:	4c1f      	ldr	r4, [pc, #124]	; (8000cbc <SetBW+0x94>)
		CWindex = (newbw == Narrow) ? 0 : 1;
		CWindex = 0; // TODO toglimi
 8000c40:	2100      	movs	r1, #0
 8000c42:	4a1f      	ldr	r2, [pc, #124]	; (8000cc0 <SetBW+0x98>)
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[CW] = newbw;
 8000c48:	70e0      	strb	r0, [r4, #3]
		CWindex = 0; // TODO toglimi
 8000c4a:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000c4c:	481d      	ldr	r0, [pc, #116]	; (8000cc4 <SetBW+0x9c>)
 8000c4e:	4a1e      	ldr	r2, [pc, #120]	; (8000cc8 <SetBW+0xa0>)
 8000c50:	491e      	ldr	r1, [pc, #120]	; (8000ccc <SetBW+0xa4>)
		break;

	default :
		break;
	}
}	
 8000c52:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000c56:	f001 b8c9 	b.w	8001dec <SDR_2R_toC_f32>
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000c5a:	1e02      	subs	r2, r0, #0
		bw[USB] = newbw;
 8000c5c:	4917      	ldr	r1, [pc, #92]	; (8000cbc <SetBW+0x94>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <SetBW+0xa8>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000c60:	bf18      	it	ne
 8000c62:	2201      	movne	r2, #1
		USBindex = 0; // TODO toglimi
 8000c64:	4c1b      	ldr	r4, [pc, #108]	; (8000cd4 <SetBW+0xac>)
		bw[USB] = newbw;
 8000c66:	7088      	strb	r0, [r1, #2]
		USBindex = 0; // TODO toglimi
 8000c68:	2000      	movs	r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c6a:	801a      	strh	r2, [r3, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000c6c:	491a      	ldr	r1, [pc, #104]	; (8000cd8 <SetBW+0xb0>)
 8000c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
		USBindex = 0; // TODO toglimi
 8000c72:	8020      	strh	r0, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000c74:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <SetBW+0xa0>)
 8000c76:	4819      	ldr	r0, [pc, #100]	; (8000cdc <SetBW+0xb4>)
}	
 8000c78:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000c7c:	f001 b8b6 	b.w	8001dec <SDR_2R_toC_f32>
		bw[LSB] = newbw;
 8000c80:	490e      	ldr	r1, [pc, #56]	; (8000cbc <SetBW+0x94>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000c82:	1e02      	subs	r2, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <SetBW+0xa8>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000c86:	bf18      	it	ne
 8000c88:	2201      	movne	r2, #1
		LSBindex = 0; // TODO toglimi
 8000c8a:	4c15      	ldr	r4, [pc, #84]	; (8000ce0 <SetBW+0xb8>)
		bw[LSB] = newbw;
 8000c8c:	7048      	strb	r0, [r1, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c8e:	e7eb      	b.n	8000c68 <SetBW+0x40>
		bw[AM] = newbw;
 8000c90:	4c0a      	ldr	r4, [pc, #40]	; (8000cbc <SetBW+0x94>)
		AMindex = 0; // TODO toglimi
 8000c92:	2100      	movs	r1, #0
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <SetBW+0xa8>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[AM] = newbw;
 8000c9a:	7020      	strb	r0, [r4, #0]
		AMindex = 0; // TODO toglimi
 8000c9c:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c9e:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <SetBW+0xbc>)
 8000ca0:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <SetBW+0xa0>)
 8000ca2:	4911      	ldr	r1, [pc, #68]	; (8000ce8 <SetBW+0xc0>)
}	
 8000ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000ca8:	f001 b8a0 	b.w	8001dec <SDR_2R_toC_f32>
}	
 8000cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	2400202c 	.word	0x2400202c
 8000cb8:	2400202b 	.word	0x2400202b
 8000cbc:	24009c30 	.word	0x24009c30
 8000cc0:	24002028 	.word	0x24002028
 8000cc4:	08016e60 	.word	0x08016e60
 8000cc8:	20004000 	.word	0x20004000
 8000ccc:	08015e60 	.word	0x08015e60
 8000cd0:	24001810 	.word	0x24001810
 8000cd4:	240072f0 	.word	0x240072f0
 8000cd8:	08017e60 	.word	0x08017e60
 8000cdc:	08018e60 	.word	0x08018e60
 8000ce0:	24007268 	.word	0x24007268
 8000ce4:	08014e60 	.word	0x08014e60
 8000ce8:	08013e60 	.word	0x08013e60

08000cec <SetAGC>:
// Change the AGC constants according to the mode and the AGC chosen,
// and change the color of the buttons to indicate the active AGC speed
void SetAGC(/*WM_HWIN ptr,*/ Agctype newAGC)
{
	CurrentAGC =newAGC;
	switch(CurrentMode)
 8000cec:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <SetAGC+0x98>)
	CurrentAGC =newAGC;
 8000cee:	4a26      	ldr	r2, [pc, #152]	; (8000d88 <SetAGC+0x9c>)
{
 8000cf0:	b410      	push	{r4}
	switch(CurrentMode)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
	CurrentAGC =newAGC;
 8000cf4:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d811      	bhi.n	8000d1e <SetAGC+0x32>
 8000cfa:	e8df f003 	tbb	[pc, r3]
 8000cfe:	2333      	.short	0x2333
 8000d00:	0213      	.short	0x0213
	case USB :      agc[USB] = newAGC;
	Decay[USB]  = AGC_decay[newAGC];
	Hcount[USB] = Hangcount[newAGC]; break;

	case CW :       agc[CW] = newAGC;
	Decay[CW]   = AGC_decay[newAGC];
 8000d02:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <SetAGC+0xa0>)
	case CW :       agc[CW] = newAGC;
 8000d04:	4922      	ldr	r1, [pc, #136]	; (8000d90 <SetAGC+0xa4>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d06:	4c23      	ldr	r4, [pc, #140]	; (8000d94 <SetAGC+0xa8>)
	Decay[CW]   = AGC_decay[newAGC];
 8000d08:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000d0c:	4a22      	ldr	r2, [pc, #136]	; (8000d98 <SetAGC+0xac>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d0e:	f834 c010 	ldrh.w	ip, [r4, r0, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000d12:	681b      	ldr	r3, [r3, #0]
	case CW :       agc[CW] = newAGC;
 8000d14:	70c8      	strb	r0, [r1, #3]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d16:	4921      	ldr	r1, [pc, #132]	; (8000d9c <SetAGC+0xb0>)
	Decay[CW]   = AGC_decay[newAGC];
 8000d18:	60d3      	str	r3, [r2, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d1a:	f8a1 c006 	strh.w	ip, [r1, #6]
	}
	//  ChangeColor(ptr, hFAST, (newAGC == Fast) ? GUI_RED   : GUI_BLACK);
	//  ChangeColor(ptr, hSLOW, (newAGC == Slow) ? GUI_RED   : GUI_BLACK);
}	
 8000d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d22:	4770      	bx	lr
	Decay[USB]  = AGC_decay[newAGC];
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <SetAGC+0xa0>)
	case USB :      agc[USB] = newAGC;
 8000d26:	491a      	ldr	r1, [pc, #104]	; (8000d90 <SetAGC+0xa4>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d28:	4c1a      	ldr	r4, [pc, #104]	; (8000d94 <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 8000d2a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case USB :      agc[USB] = newAGC;
 8000d2e:	7088      	strb	r0, [r1, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d30:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000d34:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <SetAGC+0xac>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d36:	4919      	ldr	r1, [pc, #100]	; (8000d9c <SetAGC+0xb0>)
	Decay[USB]  = AGC_decay[newAGC];
 8000d38:	681b      	ldr	r3, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d3a:	808c      	strh	r4, [r1, #4]
	Decay[USB]  = AGC_decay[newAGC];
 8000d3c:	6093      	str	r3, [r2, #8]
}	
 8000d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d42:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <SetAGC+0xa0>)
	case LSB :      agc[LSB] = newAGC;
 8000d46:	4912      	ldr	r1, [pc, #72]	; (8000d90 <SetAGC+0xa4>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d48:	4c12      	ldr	r4, [pc, #72]	; (8000d94 <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000d4a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case LSB :      agc[LSB] = newAGC;
 8000d4e:	7048      	strb	r0, [r1, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d50:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000d54:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <SetAGC+0xac>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d56:	4911      	ldr	r1, [pc, #68]	; (8000d9c <SetAGC+0xb0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000d58:	681b      	ldr	r3, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d5a:	804c      	strh	r4, [r1, #2]
	Decay[LSB]  = AGC_decay[newAGC];
 8000d5c:	6053      	str	r3, [r2, #4]
}	
 8000d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d62:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <SetAGC+0xa0>)
	case AM :       agc[AM] = newAGC;
 8000d66:	490a      	ldr	r1, [pc, #40]	; (8000d90 <SetAGC+0xa4>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000d68:	4c0a      	ldr	r4, [pc, #40]	; (8000d94 <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 8000d6a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case AM :       agc[AM] = newAGC;
 8000d6e:	7008      	strb	r0, [r1, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000d70:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8000d74:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <SetAGC+0xac>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000d76:	4909      	ldr	r1, [pc, #36]	; (8000d9c <SetAGC+0xb0>)
	Decay[AM]   = AGC_decay[newAGC];
 8000d78:	681b      	ldr	r3, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000d7a:	800c      	strh	r4, [r1, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8000d7c:	6013      	str	r3, [r2, #0]
}	
 8000d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	2400202c 	.word	0x2400202c
 8000d88:	2400202a 	.word	0x2400202a
 8000d8c:	24001808 	.word	0x24001808
 8000d90:	24009c20 	.word	0x24009c20
 8000d94:	24006254 	.word	0x24006254
 8000d98:	24002030 	.word	0x24002030
 8000d9c:	24006258 	.word	0x24006258

08000da0 <Tune_Preset>:
{
 8000da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOfreq = psets[Idx].freq;
 8000da4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8000da8:	4e47      	ldr	r6, [pc, #284]	; (8000ec8 <Tune_Preset+0x128>)
 8000daa:	4a48      	ldr	r2, [pc, #288]	; (8000ecc <Tune_Preset+0x12c>)
{
 8000dac:	4604      	mov	r4, r0
	LOfreq = psets[Idx].freq;
 8000dae:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	CurrentMode = newmode;
 8000db2:	4f47      	ldr	r7, [pc, #284]	; (8000ed0 <Tune_Preset+0x130>)
	LOfreq = psets[Idx].freq;
 8000db4:	0045      	lsls	r5, r0, #1
 8000db6:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 8000db8:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 8000dba:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 8000dbc:	703b      	strb	r3, [r7, #0]

	switch(CurrentMode)
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d87b      	bhi.n	8000eba <Tune_Preset+0x11a>
 8000dc2:	e8df f003 	tbb	[pc, r3]
 8000dc6:	626e      	.short	0x626e
 8000dc8:	0256      	.short	0x0256
	case USB :
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000dca:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8000f0c <Tune_Preset+0x16c>
 8000dce:	f898 0003 	ldrb.w	r0, [r8, #3]
 8000dd2:	f7ff ff29 	bl	8000c28 <SetBW>
 8000dd6:	4b3f      	ldr	r3, [pc, #252]	; (8000ed4 <Tune_Preset+0x134>)
 8000dd8:	78d8      	ldrb	r0, [r3, #3]
 8000dda:	f7ff ff87 	bl	8000cec <SetAGC>
	switch(CurrentMode)
 8000dde:	783a      	ldrb	r2, [r7, #0]
	SetBW( psets[Idx].bw);
 8000de0:	4425      	add	r5, r4
	CurrentBW = newbw;
 8000de2:	493d      	ldr	r1, [pc, #244]	; (8000ed8 <Tune_Preset+0x138>)
	SetBW( psets[Idx].bw);
 8000de4:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8000de8:	7d6b      	ldrb	r3, [r5, #21]
	CurrentBW = newbw;
 8000dea:	700b      	strb	r3, [r1, #0]
	switch(CurrentMode)
 8000dec:	2a03      	cmp	r2, #3
 8000dee:	d80f      	bhi.n	8000e10 <Tune_Preset+0x70>
 8000df0:	e8df f002 	tbb	[pc, r2]
 8000df4:	02173629 	.word	0x02173629
		CWindex = 0; // TODO toglimi
 8000df8:	4a38      	ldr	r2, [pc, #224]	; (8000edc <Tune_Preset+0x13c>)
 8000dfa:	2100      	movs	r1, #0
		bw[CW] = newbw;
 8000dfc:	f888 3003 	strb.w	r3, [r8, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
		CWindex = 0; // TODO toglimi
 8000e04:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000e06:	4836      	ldr	r0, [pc, #216]	; (8000ee0 <Tune_Preset+0x140>)
 8000e08:	4a36      	ldr	r2, [pc, #216]	; (8000ee4 <Tune_Preset+0x144>)
 8000e0a:	4937      	ldr	r1, [pc, #220]	; (8000ee8 <Tune_Preset+0x148>)
 8000e0c:	f000 ffee 	bl	8001dec <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000e10:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000e14:	4835      	ldr	r0, [pc, #212]	; (8000eec <Tune_Preset+0x14c>)
 8000e16:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
}
 8000e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000e1e:	f00f bbc5 	b.w	80105ac <strcpy>
		bw[USB] = newbw;
 8000e22:	f888 3002 	strb.w	r3, [r8, #2]
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000e26:	3b00      	subs	r3, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000e28:	4a31      	ldr	r2, [pc, #196]	; (8000ef0 <Tune_Preset+0x150>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000e2a:	bf18      	it	ne
 8000e2c:	2301      	movne	r3, #1
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000e2e:	8013      	strh	r3, [r2, #0]
		USBindex = 0; // TODO toglimi
 8000e30:	4a30      	ldr	r2, [pc, #192]	; (8000ef4 <Tune_Preset+0x154>)
 8000e32:	2100      	movs	r1, #0
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e38:	482f      	ldr	r0, [pc, #188]	; (8000ef8 <Tune_Preset+0x158>)
		USBindex = 0; // TODO toglimi
 8000e3a:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000e3c:	4a29      	ldr	r2, [pc, #164]	; (8000ee4 <Tune_Preset+0x144>)
 8000e3e:	492f      	ldr	r1, [pc, #188]	; (8000efc <Tune_Preset+0x15c>)
 8000e40:	f000 ffd4 	bl	8001dec <SDR_2R_toC_f32>
		break;
 8000e44:	e7e4      	b.n	8000e10 <Tune_Preset+0x70>
		AMindex = 0; // TODO toglimi
 8000e46:	4a2a      	ldr	r2, [pc, #168]	; (8000ef0 <Tune_Preset+0x150>)
 8000e48:	2100      	movs	r1, #0
		bw[AM] = newbw;
 8000e4a:	f888 3000 	strb.w	r3, [r8]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 8000e52:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000e54:	482a      	ldr	r0, [pc, #168]	; (8000f00 <Tune_Preset+0x160>)
 8000e56:	4a23      	ldr	r2, [pc, #140]	; (8000ee4 <Tune_Preset+0x144>)
 8000e58:	492a      	ldr	r1, [pc, #168]	; (8000f04 <Tune_Preset+0x164>)
 8000e5a:	f000 ffc7 	bl	8001dec <SDR_2R_toC_f32>
		break;
 8000e5e:	e7d7      	b.n	8000e10 <Tune_Preset+0x70>
		bw[LSB] = newbw;
 8000e60:	f888 3001 	strb.w	r3, [r8, #1]
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000e64:	3b00      	subs	r3, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000e66:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <Tune_Preset+0x150>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000e68:	bf18      	it	ne
 8000e6a:	2301      	movne	r3, #1
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000e6c:	8013      	strh	r3, [r2, #0]
		LSBindex = 0; // TODO toglimi
 8000e6e:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <Tune_Preset+0x168>)
 8000e70:	e7df      	b.n	8000e32 <Tune_Preset+0x92>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000e72:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8000f0c <Tune_Preset+0x16c>
 8000e76:	f898 0002 	ldrb.w	r0, [r8, #2]
 8000e7a:	f7ff fed5 	bl	8000c28 <SetBW>
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <Tune_Preset+0x134>)
 8000e80:	7898      	ldrb	r0, [r3, #2]
 8000e82:	f7ff ff33 	bl	8000cec <SetAGC>
	switch(CurrentMode)
 8000e86:	783a      	ldrb	r2, [r7, #0]
		break;
 8000e88:	e7aa      	b.n	8000de0 <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000e8a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8000f0c <Tune_Preset+0x16c>
 8000e8e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8000e92:	f7ff fec9 	bl	8000c28 <SetBW>
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <Tune_Preset+0x134>)
 8000e98:	7858      	ldrb	r0, [r3, #1]
 8000e9a:	f7ff ff27 	bl	8000cec <SetAGC>
	switch(CurrentMode)
 8000e9e:	783a      	ldrb	r2, [r7, #0]
		break;
 8000ea0:	e79e      	b.n	8000de0 <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000ea2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8000f0c <Tune_Preset+0x16c>
 8000ea6:	f898 0000 	ldrb.w	r0, [r8]
 8000eaa:	f7ff febd 	bl	8000c28 <SetBW>
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <Tune_Preset+0x134>)
 8000eb0:	7818      	ldrb	r0, [r3, #0]
 8000eb2:	f7ff ff1b 	bl	8000cec <SetAGC>
	switch(CurrentMode)
 8000eb6:	783a      	ldrb	r2, [r7, #0]
		break;

	default :
		break;
	}
}	
 8000eb8:	e792      	b.n	8000de0 <Tune_Preset+0x40>
	SetBW( psets[Idx].bw);
 8000eba:	2318      	movs	r3, #24
	CurrentBW = newbw;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <Tune_Preset+0x138>)
	SetBW( psets[Idx].bw);
 8000ebe:	fb03 6300 	mla	r3, r3, r0, r6
	CurrentBW = newbw;
 8000ec2:	7d5b      	ldrb	r3, [r3, #21]
 8000ec4:	7013      	strb	r3, [r2, #0]
	switch(CurrentMode)
 8000ec6:	e7a3      	b.n	8000e10 <Tune_Preset+0x70>
 8000ec8:	2400c844 	.word	0x2400c844
 8000ecc:	24007264 	.word	0x24007264
 8000ed0:	2400202c 	.word	0x2400202c
 8000ed4:	24009c20 	.word	0x24009c20
 8000ed8:	2400202b 	.word	0x2400202b
 8000edc:	24002028 	.word	0x24002028
 8000ee0:	08016e60 	.word	0x08016e60
 8000ee4:	20004000 	.word	0x20004000
 8000ee8:	08015e60 	.word	0x08015e60
 8000eec:	2400c81c 	.word	0x2400c81c
 8000ef0:	24001810 	.word	0x24001810
 8000ef4:	240072f0 	.word	0x240072f0
 8000ef8:	08018e60 	.word	0x08018e60
 8000efc:	08017e60 	.word	0x08017e60
 8000f00:	08014e60 	.word	0x08014e60
 8000f04:	08013e60 	.word	0x08013e60
 8000f08:	24007268 	.word	0x24007268
 8000f0c:	24009c30 	.word	0x24009c30

08000f10 <SetMode>:
{
 8000f10:	b508      	push	{r3, lr}
	CurrentMode = newmode;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <SetMode+0x64>)
 8000f14:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 8000f16:	2803      	cmp	r0, #3
 8000f18:	d82b      	bhi.n	8000f72 <SetMode+0x62>
 8000f1a:	e8df f000 	tbb	[pc, r0]
 8000f1e:	1620      	.short	0x1620
 8000f20:	020c      	.short	0x020c
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <SetMode+0x68>)
 8000f24:	78d8      	ldrb	r0, [r3, #3]
 8000f26:	f7ff fe7f 	bl	8000c28 <SetBW>
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <SetMode+0x6c>)
 8000f2c:	78d8      	ldrb	r0, [r3, #3]
}	
 8000f2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000f32:	f7ff bedb 	b.w	8000cec <SetAGC>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <SetMode+0x68>)
 8000f38:	7898      	ldrb	r0, [r3, #2]
 8000f3a:	f7ff fe75 	bl	8000c28 <SetBW>
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <SetMode+0x6c>)
 8000f40:	7898      	ldrb	r0, [r3, #2]
}	
 8000f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000f46:	f7ff bed1 	b.w	8000cec <SetAGC>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <SetMode+0x68>)
 8000f4c:	7858      	ldrb	r0, [r3, #1]
 8000f4e:	f7ff fe6b 	bl	8000c28 <SetBW>
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <SetMode+0x6c>)
 8000f54:	7858      	ldrb	r0, [r3, #1]
}	
 8000f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000f5a:	f7ff bec7 	b.w	8000cec <SetAGC>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <SetMode+0x68>)
 8000f60:	7818      	ldrb	r0, [r3, #0]
 8000f62:	f7ff fe61 	bl	8000c28 <SetBW>
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <SetMode+0x6c>)
 8000f68:	7818      	ldrb	r0, [r3, #0]
}	
 8000f6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000f6e:	f7ff bebd 	b.w	8000cec <SetAGC>
}	
 8000f72:	bd08      	pop	{r3, pc}
 8000f74:	2400202c 	.word	0x2400202c
 8000f78:	24009c30 	.word	0x24009c30
 8000f7c:	24009c20 	.word	0x24009c20

08000f80 <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	if (idx == 9)
 8000f80:	2809      	cmp	r0, #9
{
 8000f82:	b508      	push	{r3, lr}
	if (idx == 9)
 8000f84:	d012      	beq.n	8000fac <SetFstep+0x2c>
		Fstep = 9000;  // MW Channel for Europe
	else
		Fstep = pow(10, 5 - idx);
 8000f86:	f1c0 0005 	rsb	r0, r0, #5
 8000f8a:	ee07 0a90 	vmov	s15, r0
 8000f8e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8000fb8 <SetFstep+0x38>
 8000f92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f96:	ee27 0b00 	vmul.f64	d0, d7, d0
 8000f9a:	f011 fdd5 	bl	8012b48 <exp>
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <SetFstep+0x40>)
 8000fa0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 8000fa4:	ee17 3a90 	vmov	r3, s15
 8000fa8:	6013      	str	r3, [r2, #0]
}	
 8000faa:	bd08      	pop	{r3, pc}
		Fstep = 9000;  // MW Channel for Europe
 8000fac:	f242 3328 	movw	r3, #9000	; 0x2328
 8000fb0:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <SetFstep+0x40>)
 8000fb2:	6013      	str	r3, [r2, #0]
}	
 8000fb4:	bd08      	pop	{r3, pc}
 8000fb6:	bf00      	nop
 8000fb8:	bbb55516 	.word	0xbbb55516
 8000fbc:	40026bb1 	.word	0x40026bb1
 8000fc0:	24006250 	.word	0x24006250

08000fc4 <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked(uint16_t Nsteps)
{	
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <FplusClicked+0xb4>)
 8000fc6:	ee07 0a90 	vmov	s15, r0
 8000fca:	4a2c      	ldr	r2, [pc, #176]	; (800107c <FplusClicked+0xb8>)
 8000fcc:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8000fd0:	ed93 6a00 	vldr	s12, [r3]
 8000fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000fd8:	ed92 7a00 	vldr	s14, [r2]
 8000fdc:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <FplusClicked+0xbc>)
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000fe2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	psets[0].bw = bw[CurrentMode];
 8000fe6:	4927      	ldr	r1, [pc, #156]	; (8001084 <FplusClicked+0xc0>)
	LOfreq  = min(LOfreq, 50000000.f);
 8000fe8:	eddf 5a27 	vldr	s11, [pc, #156]	; 8001088 <FplusClicked+0xc4>
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000fec:	ee26 6a26 	vmul.f32	s12, s12, s13
{	
 8000ff0:	b510      	push	{r4, lr}
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000ff2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4c24      	ldr	r4, [pc, #144]	; (800108c <FplusClicked+0xc8>)
	psets[0].bw = bw[CurrentMode];
 8000ffa:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000ffc:	eea6 7b04 	vfma.f64	d7, d6, d4
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001000:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 8001002:	7560      	strb	r0, [r4, #21]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8001004:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = min(LOfreq, 50000000.f);
 8001008:	fe87 7a65 	vminnm.f32	s14, s14, s11
 800100c:	ed82 7a00 	vstr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001010:	ed84 7a04 	vstr	s14, [r4, #16]
	switch(CurrentMode)
 8001014:	2b03      	cmp	r3, #3
 8001016:	d80b      	bhi.n	8001030 <FplusClicked+0x6c>
 8001018:	e8df f003 	tbb	[pc, r3]
 800101c:	02121b24 	.word	0x02121b24
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001020:	78c8      	ldrb	r0, [r1, #3]
 8001022:	f7ff fe01 	bl	8000c28 <SetBW>
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <FplusClicked+0xcc>)
 8001028:	78d8      	ldrb	r0, [r3, #3]
 800102a:	f7ff fe5f 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 800102e:	7d60      	ldrb	r0, [r4, #21]
 8001030:	f7ff fdfa 	bl	8000c28 <SetBW>
	strcpy(msg, psets[Idx].name);
 8001034:	4915      	ldr	r1, [pc, #84]	; (800108c <FplusClicked+0xc8>)
 8001036:	4817      	ldr	r0, [pc, #92]	; (8001094 <FplusClicked+0xd0>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 8001038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 800103c:	f00f bab6 	b.w	80105ac <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001040:	7888      	ldrb	r0, [r1, #2]
 8001042:	f7ff fdf1 	bl	8000c28 <SetBW>
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <FplusClicked+0xcc>)
 8001048:	7898      	ldrb	r0, [r3, #2]
 800104a:	f7ff fe4f 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 800104e:	7d60      	ldrb	r0, [r4, #21]
		break;
 8001050:	e7ee      	b.n	8001030 <FplusClicked+0x6c>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001052:	7848      	ldrb	r0, [r1, #1]
 8001054:	f7ff fde8 	bl	8000c28 <SetBW>
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <FplusClicked+0xcc>)
 800105a:	7858      	ldrb	r0, [r3, #1]
 800105c:	f7ff fe46 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 8001060:	7d60      	ldrb	r0, [r4, #21]
		break;
 8001062:	e7e5      	b.n	8001030 <FplusClicked+0x6c>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001064:	7808      	ldrb	r0, [r1, #0]
 8001066:	f7ff fddf 	bl	8000c28 <SetBW>
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <FplusClicked+0xcc>)
 800106c:	7818      	ldrb	r0, [r3, #0]
 800106e:	f7ff fe3d 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 8001072:	7d60      	ldrb	r0, [r4, #21]
}	
 8001074:	e7dc      	b.n	8001030 <FplusClicked+0x6c>
 8001076:	bf00      	nop
 8001078:	24006250 	.word	0x24006250
 800107c:	24007264 	.word	0x24007264
 8001080:	2400202c 	.word	0x2400202c
 8001084:	24009c30 	.word	0x24009c30
 8001088:	4c3ebc20 	.word	0x4c3ebc20
 800108c:	2400c844 	.word	0x2400c844
 8001090:	24009c20 	.word	0x24009c20
 8001094:	2400c81c 	.word	0x2400c81c

08001098 <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked(uint16_t Nsteps)
{	
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001098:	4b2c      	ldr	r3, [pc, #176]	; (800114c <FminusClicked+0xb4>)
 800109a:	ee07 0a90 	vmov	s15, r0
 800109e:	4a2c      	ldr	r2, [pc, #176]	; (8001150 <FminusClicked+0xb8>)
 80010a0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80010a4:	ed93 6a00 	vldr	s12, [r3]
 80010a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80010ac:	ed92 7a00 	vldr	s14, [r2]
 80010b0:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <FminusClicked+0xbc>)
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80010b6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	psets[0].bw = bw[CurrentMode];
 80010ba:	4927      	ldr	r1, [pc, #156]	; (8001158 <FminusClicked+0xc0>)
	LOfreq  = max(LOfreq, 8000.f);
 80010bc:	eddf 5a27 	vldr	s11, [pc, #156]	; 800115c <FminusClicked+0xc4>
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80010c0:	ee26 6a26 	vmul.f32	s12, s12, s13
{	
 80010c4:	b510      	push	{r4, lr}
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80010c6:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4c24      	ldr	r4, [pc, #144]	; (8001160 <FminusClicked+0xc8>)
	psets[0].bw = bw[CurrentMode];
 80010ce:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80010d0:	eea6 7b44 	vfms.f64	d7, d6, d4
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80010d4:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 80010d6:	7560      	strb	r0, [r4, #21]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80010d8:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = max(LOfreq, 8000.f);
 80010dc:	fe87 7a25 	vmaxnm.f32	s14, s14, s11
 80010e0:	ed82 7a00 	vstr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80010e4:	ed84 7a04 	vstr	s14, [r4, #16]
	switch(CurrentMode)
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d80b      	bhi.n	8001104 <FminusClicked+0x6c>
 80010ec:	e8df f003 	tbb	[pc, r3]
 80010f0:	02121b24 	.word	0x02121b24
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80010f4:	78c8      	ldrb	r0, [r1, #3]
 80010f6:	f7ff fd97 	bl	8000c28 <SetBW>
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <FminusClicked+0xcc>)
 80010fc:	78d8      	ldrb	r0, [r3, #3]
 80010fe:	f7ff fdf5 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 8001102:	7d60      	ldrb	r0, [r4, #21]
 8001104:	f7ff fd90 	bl	8000c28 <SetBW>
	strcpy(msg, psets[Idx].name);
 8001108:	4915      	ldr	r1, [pc, #84]	; (8001160 <FminusClicked+0xc8>)
 800110a:	4817      	ldr	r0, [pc, #92]	; (8001168 <FminusClicked+0xd0>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 800110c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8001110:	f00f ba4c 	b.w	80105ac <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001114:	7888      	ldrb	r0, [r1, #2]
 8001116:	f7ff fd87 	bl	8000c28 <SetBW>
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <FminusClicked+0xcc>)
 800111c:	7898      	ldrb	r0, [r3, #2]
 800111e:	f7ff fde5 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 8001122:	7d60      	ldrb	r0, [r4, #21]
		break;
 8001124:	e7ee      	b.n	8001104 <FminusClicked+0x6c>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001126:	7848      	ldrb	r0, [r1, #1]
 8001128:	f7ff fd7e 	bl	8000c28 <SetBW>
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <FminusClicked+0xcc>)
 800112e:	7858      	ldrb	r0, [r3, #1]
 8001130:	f7ff fddc 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 8001134:	7d60      	ldrb	r0, [r4, #21]
		break;
 8001136:	e7e5      	b.n	8001104 <FminusClicked+0x6c>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001138:	7808      	ldrb	r0, [r1, #0]
 800113a:	f7ff fd75 	bl	8000c28 <SetBW>
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <FminusClicked+0xcc>)
 8001140:	7818      	ldrb	r0, [r3, #0]
 8001142:	f7ff fdd3 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 8001146:	7d60      	ldrb	r0, [r4, #21]
}	
 8001148:	e7dc      	b.n	8001104 <FminusClicked+0x6c>
 800114a:	bf00      	nop
 800114c:	24006250 	.word	0x24006250
 8001150:	24007264 	.word	0x24007264
 8001154:	2400202c 	.word	0x2400202c
 8001158:	24009c30 	.word	0x24009c30
 800115c:	45fa0000 	.word	0x45fa0000
 8001160:	2400c844 	.word	0x2400c844
 8001164:	24009c20 	.word	0x24009c20
 8001168:	2400c81c 	.word	0x2400c81c

0800116c <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <HAL_GPIO_EXTI_Callback>:
// This is the handler of the software interrupt generated by the highest
// priority task that handles the interrupts generated by DMA2 Stream 0,
// when an ADC buffer is filled
//void EXTI1_IRQHandler()
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8001170:	b570      	push	{r4, r5, r6, lr}

	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // set bit 8 of GPIOF high, to be observed with an oscilloscope


	// copy into work buffers the data received by CIC decimator
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8001172:	f44f 6200 	mov.w	r2, #2048	; 0x800
{
 8001176:	b082      	sub	sp, #8
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8001178:	496c      	ldr	r1, [pc, #432]	; (800132c <HAL_GPIO_EXTI_Callback+0x1bc>)
 800117a:	486d      	ldr	r0, [pc, #436]	; (8001330 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800117c:	f000 ff4a 	bl	8002014 <SDR_memcpy_f32>
	SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 8001180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001184:	496b      	ldr	r1, [pc, #428]	; (8001334 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001186:	486c      	ldr	r0, [pc, #432]	; (8001338 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001188:	f000 ff44 	bl	8002014 <SDR_memcpy_f32>




	// inverse sync filtering and decimation by 4
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 800118c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001190:	4a6a      	ldr	r2, [pc, #424]	; (800133c <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001192:	4967      	ldr	r1, [pc, #412]	; (8001330 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001194:	486a      	ldr	r0, [pc, #424]	; (8001340 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001196:	f00e f807 	bl	800f1a8 <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 800119a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800119e:	4a69      	ldr	r2, [pc, #420]	; (8001344 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80011a0:	4965      	ldr	r1, [pc, #404]	; (8001338 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80011a2:	4869      	ldr	r0, [pc, #420]	; (8001348 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80011a4:	f00e f800 	bl	800f1a8 <arm_fir_decimate_f32>

	// filter now with fast convolution
	//---------------------------------
	// shift the FFT buffer to the left
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 80011a8:	4968      	ldr	r1, [pc, #416]	; (800134c <HAL_GPIO_EXTI_Callback+0x1dc>)
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);



	// copy into the (in place...) FFT buffer
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 80011aa:	4c69      	ldr	r4, [pc, #420]	; (8001350 <HAL_GPIO_EXTI_Callback+0x1e0>)
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 80011ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011b0:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
*/

// TODO: check why with the original code above LSB and USB are swapped

 //if USB, copy the USB in the lower half (LSB)
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80011b4:	4d67      	ldr	r5, [pc, #412]	; (8001354 <HAL_GPIO_EXTI_Callback+0x1e4>)
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 80011b6:	f000 ff2d 	bl	8002014 <SDR_memcpy_f32>
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);
 80011ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011be:	4a63      	ldr	r2, [pc, #396]	; (800134c <HAL_GPIO_EXTI_Callback+0x1dc>)
 80011c0:	4960      	ldr	r1, [pc, #384]	; (8001344 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80011c2:	485e      	ldr	r0, [pc, #376]	; (800133c <HAL_GPIO_EXTI_Callback+0x1cc>)
 80011c4:	f000 fe12 	bl	8001dec <SDR_2R_toC_f32>
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 80011c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011cc:	4962      	ldr	r1, [pc, #392]	; (8001358 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80011ce:	4620      	mov	r0, r4
 80011d0:	f000 ff20 	bl	8002014 <SDR_memcpy_f32>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 80011d4:	2301      	movs	r3, #1
 80011d6:	2200      	movs	r2, #0
 80011d8:	4621      	mov	r1, r4
 80011da:	4860      	ldr	r0, [pc, #384]	; (800135c <HAL_GPIO_EXTI_Callback+0x1ec>)
 80011dc:	f00d ff26 	bl	800f02c <arm_cfft_f32>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80011e0:	782b      	ldrb	r3, [r5, #0]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	f000 8089 	beq.w	80012fa <HAL_GPIO_EXTI_Callback+0x18a>

#ifdef TEST_WF
	if (ShowWF) {
 80011e8:	4b5d      	ldr	r3, [pc, #372]	; (8001360 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d04a      	beq.n	8001286 <HAL_GPIO_EXTI_Callback+0x116>
		for (WFSample=0; WFSample<(FFTLEN * 2); WFSample += 2)
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80011f6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001200:	d241      	bcs.n	8001286 <HAL_GPIO_EXTI_Callback+0x116>
 8001202:	4e58      	ldr	r6, [pc, #352]	; (8001364 <HAL_GPIO_EXTI_Callback+0x1f4>)
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001204:	f04f 0c00 	mov.w	ip, #0
		{
			tmp = FFTbuf[WFSample] * FFTbuf[WFSample] + FFTbuf[WFSample+1] * FFTbuf[WFSample+1];
 8001208:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800120c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8001210:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8001214:	b280      	uxth	r0, r0
 8001216:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800121a:	b289      	uxth	r1, r1
 800121c:	b292      	uxth	r2, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001224:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001228:	edd2 7a01 	vldr	s15, [r2, #4]
 800122c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001230:	ed93 6a01 	vldr	s12, [r3, #4]
 8001234:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001238:	edd0 6a00 	vldr	s13, [r0]
 800123c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001240:	ed91 7a00 	vldr	s14, [r1]
 8001244:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001248:	edcd 7a01 	vstr	s15, [sp, #4]
			arm_sqrt_f32(tmp, &WFBuffer[WFSample >> 1]);
 800124c:	eddd 7a01 	vldr	s15, [sp, #4]
 8001250:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001254:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001258:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8001264:	db4f      	blt.n	8001306 <HAL_GPIO_EXTI_Callback+0x196>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001266:	eeb1 7ae7 	vsqrt.f32	s14, s15
		for (WFSample=0; WFSample<(FFTLEN * 2); WFSample += 2)
 800126a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800126e:	3302      	adds	r3, #2
 8001270:	b29b      	uxth	r3, r3
 8001272:	f8ad 3002 	strh.w	r3, [sp, #2]
 8001276:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800127a:	b29b      	uxth	r3, r3
 800127c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001280:	ed82 7a00 	vstr	s14, [r2]
 8001284:	d3c0      	bcc.n	8001208 <HAL_GPIO_EXTI_Callback+0x98>

#endif
	 */

	// mult. by the fast convolution mask
	arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 8001286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128a:	4a37      	ldr	r2, [pc, #220]	; (8001368 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800128c:	4937      	ldr	r1, [pc, #220]	; (800136c <HAL_GPIO_EXTI_Callback+0x1fc>)
 800128e:	4830      	ldr	r0, [pc, #192]	; (8001350 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001290:	f00e f942 	bl	800f518 <arm_cmplx_mult_cmplx_f32>

	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 8001294:	2301      	movs	r3, #1
 8001296:	4934      	ldr	r1, [pc, #208]	; (8001368 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001298:	461a      	mov	r2, r3
 800129a:	4830      	ldr	r0, [pc, #192]	; (800135c <HAL_GPIO_EXTI_Callback+0x1ec>)
 800129c:	f00d fec6 	bl	800f02c <arm_cfft_f32>
	// then do the overlap-discard
	SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);
 80012a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012a4:	4932      	ldr	r1, [pc, #200]	; (8001370 <HAL_GPIO_EXTI_Callback+0x200>)
 80012a6:	4833      	ldr	r0, [pc, #204]	; (8001374 <HAL_GPIO_EXTI_Callback+0x204>)
 80012a8:	f000 feb4 	bl	8002014 <SDR_memcpy_f32>


	// we have now the bandpass filtered I/Q, demodulate the signal
	switch(CurrentMode)
 80012ac:	782b      	ldrb	r3, [r5, #0]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d80e      	bhi.n	80012d0 <HAL_GPIO_EXTI_Callback+0x160>
 80012b2:	b9eb      	cbnz	r3, 80012f0 <HAL_GPIO_EXTI_Callback+0x180>
	{	
	case AM :
		SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 80012b4:	4930      	ldr	r1, [pc, #192]	; (8001378 <HAL_GPIO_EXTI_Callback+0x208>)
 80012b6:	482f      	ldr	r0, [pc, #188]	; (8001374 <HAL_GPIO_EXTI_Callback+0x204>)
 80012b8:	f000 fffc 	bl	80022b4 <SDR_demodAM_AGC>
*/

	// send the demodulated audio to the DMA buffer just emptied

	//LED_YELLOW_ON;
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 80012bc:	4b2f      	ldr	r3, [pc, #188]	; (800137c <HAL_GPIO_EXTI_Callback+0x20c>)
 80012be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c2:	482d      	ldr	r0, [pc, #180]	; (8001378 <HAL_GPIO_EXTI_Callback+0x208>)
 80012c4:	6819      	ldr	r1, [r3, #0]
	//LED_YELLOW_OFF;


	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 80012c6:	b002      	add	sp, #8
 80012c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 80012cc:	f000 be2c 	b.w	8001f28 <SDR_float_to_DAC_audio>
	switch(CurrentMode)
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d1f3      	bne.n	80012bc <HAL_GPIO_EXTI_Callback+0x14c>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 80012d4:	4928      	ldr	r1, [pc, #160]	; (8001378 <HAL_GPIO_EXTI_Callback+0x208>)
 80012d6:	4827      	ldr	r0, [pc, #156]	; (8001374 <HAL_GPIO_EXTI_Callback+0x204>)
 80012d8:	f001 f87c 	bl	80023d4 <SDR_demodSSB_CW_AGC>
		if(bw[CW] == Narrow)
 80012dc:	4b28      	ldr	r3, [pc, #160]	; (8001380 <HAL_GPIO_EXTI_Callback+0x210>)
 80012de:	78db      	ldrb	r3, [r3, #3]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1eb      	bne.n	80012bc <HAL_GPIO_EXTI_Callback+0x14c>
			SDR_CWPeak(fAudio, BSIZE);
 80012e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e8:	4823      	ldr	r0, [pc, #140]	; (8001378 <HAL_GPIO_EXTI_Callback+0x208>)
 80012ea:	f000 ff59 	bl	80021a0 <SDR_CWPeak>
 80012ee:	e7e5      	b.n	80012bc <HAL_GPIO_EXTI_Callback+0x14c>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 80012f0:	4921      	ldr	r1, [pc, #132]	; (8001378 <HAL_GPIO_EXTI_Callback+0x208>)
 80012f2:	4820      	ldr	r0, [pc, #128]	; (8001374 <HAL_GPIO_EXTI_Callback+0x204>)
 80012f4:	f001 f86e 	bl	80023d4 <SDR_demodSSB_CW_AGC>
 80012f8:	e7e0      	b.n	80012bc <HAL_GPIO_EXTI_Callback+0x14c>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80012fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fe:	4620      	mov	r0, r4
 8001300:	f000 fea2 	bl	8002048 <SDR_mirror_LSB>
 8001304:	e770      	b.n	80011e8 <HAL_GPIO_EXTI_Callback+0x78>
		for (WFSample=0; WFSample<(FFTLEN * 2); WFSample += 2)
 8001306:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800130a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800130e:	3202      	adds	r2, #2
 8001310:	f8c3 c000 	str.w	ip, [r3]
 8001314:	b293      	uxth	r3, r2
 8001316:	f8ad 3002 	strh.w	r3, [sp, #2]
 800131a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800131e:	b29b      	uxth	r3, r3
 8001320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001324:	f4ff af70 	bcc.w	8001208 <HAL_GPIO_EXTI_Callback+0x98>
 8001328:	e7ad      	b.n	8001286 <HAL_GPIO_EXTI_Callback+0x116>
 800132a:	bf00      	nop
 800132c:	2000d000 	.word	0x2000d000
 8001330:	20009000 	.word	0x20009000
 8001334:	2000b000 	.word	0x2000b000
 8001338:	20007000 	.word	0x20007000
 800133c:	20006800 	.word	0x20006800
 8001340:	24007298 	.word	0x24007298
 8001344:	20006000 	.word	0x20006000
 8001348:	2400728c 	.word	0x2400728c
 800134c:	2400b43c 	.word	0x2400b43c
 8001350:	20002000 	.word	0x20002000
 8001354:	2400202c 	.word	0x2400202c
 8001358:	2400a43c 	.word	0x2400a43c
 800135c:	0801a280 	.word	0x0801a280
 8001360:	240072a4 	.word	0x240072a4
 8001364:	240083f8 	.word	0x240083f8
 8001368:	20000000 	.word	0x20000000
 800136c:	20004000 	.word	0x20004000
 8001370:	20001000 	.word	0x20001000
 8001374:	2400c998 	.word	0x2400c998
 8001378:	24009c3c 	.word	0x24009c3c
 800137c:	240083f4 	.word	0x240083f4
 8001380:	24009c30 	.word	0x24009c30

08001384 <ADC_Stream0_Handler>:

//#pragma GCC push_options
//#pragma GCC optimize ("O0")

void ADC_Stream0_Handler(uint8_t FullConversion)
{
 8001384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* It needs a delay between fract div disable and parameter setting.
 * Reference manual says otherwise.
 * So we disable at the top of the ISR and set the parameter near the bottom.
 */
if (TransmittingWSPR)
 8001388:	f8df 9434 	ldr.w	r9, [pc, #1076]	; 80017c0 <ADC_Stream0_Handler+0x43c>
{
 800138c:	ed2d 8b10 	vpush	{d8-d15}
if (TransmittingWSPR)
 8001390:	f899 3000 	ldrb.w	r3, [r9]
{
 8001394:	b097      	sub	sp, #92	; 0x5c
if (TransmittingWSPR)
 8001396:	b123      	cbz	r3, 80013a2 <ADC_Stream0_Handler+0x1e>
{
	__HAL_RCC_PLL2FRACN_DISABLE();
 8001398:	4ad5      	ldr	r2, [pc, #852]	; (80016f0 <ADC_Stream0_Handler+0x36c>)
 800139a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800139c:	f023 0310 	bic.w	r3, r3, #16
 80013a0:	62d3      	str	r3, [r2, #44]	; 0x2c

	// process the data contained in the just filled buffer
	if(FullConversion)
		pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
	else
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 80013a2:	4ed4      	ldr	r6, [pc, #848]	; (80016f4 <ADC_Stream0_Handler+0x370>)
	pR=TestSignalData;
#endif


	// compute the new NCO buffer, with the CWpitch offset if receiving CW
	if(CurrentMode == CW)
 80013a4:	4bd4      	ldr	r3, [pc, #848]	; (80016f8 <ADC_Stream0_Handler+0x374>)
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 80013a6:	f5a6 6280 	sub.w	r2, r6, #1024	; 0x400
	if(CurrentMode == CW)
 80013aa:	781b      	ldrb	r3, [r3, #0]
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 80013ac:	2800      	cmp	r0, #0
 80013ae:	bf08      	it	eq
 80013b0:	4616      	moveq	r6, r2
	if(CurrentMode == CW)
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	f000 83fb 	beq.w	8001bae <ADC_Stream0_Handler+0x82a>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
	else
		SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 80013b8:	4bd0      	ldr	r3, [pc, #832]	; (80016fc <ADC_Stream0_Handler+0x378>)
 80013ba:	ed93 0a00 	vldr	s0, [r3]
 80013be:	f000 fc57 	bl	8001c70 <SDR_ComputeLO>
	// in the short words to floating point conversion routine

	//TODO Check if it should be BSIZE/2

	sum = 0; k = BSIZE;
	while(k)
 80013c2:	f206 32fe 	addw	r2, r6, #1022	; 0x3fe
 80013c6:	1eb0      	subs	r0, r6, #2
	sum = 0; k = BSIZE;
 80013c8:	ed9f 0acd 	vldr	s0, [pc, #820]	; 8001700 <ADC_Stream0_Handler+0x37c>
	{
		sum += pR[k-1];
 80013cc:	8814      	ldrh	r4, [r2, #0]
	while(k)
 80013ce:	3a08      	subs	r2, #8
		sum += pR[k-2];
 80013d0:	88d3      	ldrh	r3, [r2, #6]
		sum += pR[k-1];
 80013d2:	b2a4      	uxth	r4, r4
		sum += pR[k-3];
 80013d4:	8895      	ldrh	r5, [r2, #4]
		sum += pR[k-2];
 80013d6:	b29b      	uxth	r3, r3
		sum += pR[k-4];
 80013d8:	8851      	ldrh	r1, [r2, #2]
		sum += pR[k-1];
 80013da:	ee07 4a90 	vmov	s15, r4
		sum += pR[k-3];
 80013de:	b2ad      	uxth	r5, r5
		sum += pR[k-2];
 80013e0:	ee07 3a10 	vmov	s14, r3
		sum += pR[k-4];
 80013e4:	b289      	uxth	r1, r1
		sum += pR[k-1];
 80013e6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
		sum += pR[k-3];
 80013ea:	ee07 5a90 	vmov	s15, r5
		sum += pR[k-2];
 80013ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		sum += pR[k-4];
 80013f2:	ee06 1a90 	vmov	s13, r1
		sum += pR[k-3];
 80013f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	while(k)
 80013fa:	4290      	cmp	r0, r2
		sum += pR[k-4];
 80013fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001404:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800140c:	ee30 0a27 	vadd.f32	s0, s0, s15
	while(k)
 8001410:	d1dc      	bne.n	80013cc <ADC_Stream0_Handler+0x48>
		k-=4;
	}

	TestSampledValue=pR[BSIZE/2];
 8001412:	f8b6 3200 	ldrh.w	r3, [r6, #512]	; 0x200
 8001416:	2200      	movs	r2, #0

	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8001418:	eddf 7aba 	vldr	s15, [pc, #744]	; 8001704 <ADC_Stream0_Handler+0x380>

	// downconvert to zero IF, by multiplication by the exp(-jwt) signal
	// generated by the NCO, and at the same time convert to floating point
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 800141c:	4630      	mov	r0, r6
	TestSampledValue=pR[BSIZE/2];
 800141e:	b29b      	uxth	r3, r3
 8001420:	4cb9      	ldr	r4, [pc, #740]	; (8001708 <ADC_Stream0_Handler+0x384>)
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8001422:	ee20 0a27 	vmul.f32	s0, s0, s15
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001426:	49b9      	ldr	r1, [pc, #740]	; (800170c <ADC_Stream0_Handler+0x388>)
	TestSampledValue=pR[BSIZE/2];
 8001428:	ee07 3a90 	vmov	s15, r3
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 800142c:	4bb8      	ldr	r3, [pc, #736]	; (8001710 <ADC_Stream0_Handler+0x38c>)
 800142e:	8022      	strh	r2, [r4, #0]
	TestSampledValue=pR[BSIZE/2];
 8001430:	eef8 7a67 	vcvt.f32.u32	s15, s15
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8001434:	ed83 0a00 	vstr	s0, [r3]
	TestSampledValue=pR[BSIZE/2];
 8001438:	4bb6      	ldr	r3, [pc, #728]	; (8001714 <ADC_Stream0_Handler+0x390>)
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 800143a:	4ab7      	ldr	r2, [pc, #732]	; (8001718 <ADC_Stream0_Handler+0x394>)
	TestSampledValue=pR[BSIZE/2];
 800143c:	edc3 7a00 	vstr	s15, [r3]
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001440:	f000 fd00 	bl	8001e44 <SDR_downconvert_f32>
	// passed to the baseband interrupt routine, where it is additionally filtered with a
	// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
	//-------------------------------------------------------------------------

	k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
	while(k--)
 8001444:	48b5      	ldr	r0, [pc, #724]	; (800171c <ADC_Stream0_Handler+0x398>)
 8001446:	23ff      	movs	r3, #255	; 0xff
 8001448:	4ab5      	ldr	r2, [pc, #724]	; (8001720 <ADC_Stream0_Handler+0x39c>)
 800144a:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800144e:	edd0 3a00 	vldr	s7, [r0]
 8001452:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8001456:	48b3      	ldr	r0, [pc, #716]	; (8001724 <ADC_Stream0_Handler+0x3a0>)
 8001458:	edd2 2a00 	vldr	s5, [r2]
 800145c:	edd0 9a00 	vldr	s19, [r0]
 8001460:	4ab1      	ldr	r2, [pc, #708]	; (8001728 <ADC_Stream0_Handler+0x3a4>)
 8001462:	48b2      	ldr	r0, [pc, #712]	; (800172c <ADC_Stream0_Handler+0x3a8>)
 8001464:	ed92 9a00 	vldr	s18, [r2]
 8001468:	edd0 ea00 	vldr	s29, [r0]
 800146c:	4ab0      	ldr	r2, [pc, #704]	; (8001730 <ADC_Stream0_Handler+0x3ac>)
 800146e:	48b1      	ldr	r0, [pc, #708]	; (8001734 <ADC_Stream0_Handler+0x3b0>)
 8001470:	ed92 5a00 	vldr	s10, [r2]
 8001474:	ed90 8a00 	vldr	s16, [r0]
 8001478:	4aaf      	ldr	r2, [pc, #700]	; (8001738 <ADC_Stream0_Handler+0x3b4>)
 800147a:	48b0      	ldr	r0, [pc, #704]	; (800173c <ADC_Stream0_Handler+0x3b8>)
 800147c:	edd2 fa00 	vldr	s31, [r2]
 8001480:	ed90 da00 	vldr	s26, [r0]
 8001484:	4aae      	ldr	r2, [pc, #696]	; (8001740 <ADC_Stream0_Handler+0x3bc>)
 8001486:	48af      	ldr	r0, [pc, #700]	; (8001744 <ADC_Stream0_Handler+0x3c0>)
 8001488:	edd2 8a00 	vldr	s17, [r2]
 800148c:	edd0 da00 	vldr	s27, [r0]
 8001490:	4aad      	ldr	r2, [pc, #692]	; (8001748 <ADC_Stream0_Handler+0x3c4>)
 8001492:	48ae      	ldr	r0, [pc, #696]	; (800174c <ADC_Stream0_Handler+0x3c8>)
 8001494:	edd2 5a00 	vldr	s11, [r2]
 8001498:	edd0 6a00 	vldr	s13, [r0]
 800149c:	4aac      	ldr	r2, [pc, #688]	; (8001750 <ADC_Stream0_Handler+0x3cc>)
 800149e:	48ad      	ldr	r0, [pc, #692]	; (8001754 <ADC_Stream0_Handler+0x3d0>)
 80014a0:	ed92 fa00 	vldr	s30, [r2]
 80014a4:	edd0 ca00 	vldr	s25, [r0]
 80014a8:	4aab      	ldr	r2, [pc, #684]	; (8001758 <ADC_Stream0_Handler+0x3d4>)
 80014aa:	48ac      	ldr	r0, [pc, #688]	; (800175c <ADC_Stream0_Handler+0x3d8>)
 80014ac:	ed92 ca00 	vldr	s24, [r2]
 80014b0:	edcd 6a03 	vstr	s13, [sp, #12]
 80014b4:	4aaa      	ldr	r2, [pc, #680]	; (8001760 <ADC_Stream0_Handler+0x3dc>)
 80014b6:	edd0 6a00 	vldr	s13, [r0]
 80014ba:	48aa      	ldr	r0, [pc, #680]	; (8001764 <ADC_Stream0_Handler+0x3e0>)
 80014bc:	ed92 3a00 	vldr	s6, [r2]
 80014c0:	edcd 6a01 	vstr	s13, [sp, #4]
 80014c4:	4aa8      	ldr	r2, [pc, #672]	; (8001768 <ADC_Stream0_Handler+0x3e4>)
 80014c6:	edd0 6a00 	vldr	s13, [r0]
 80014ca:	48a8      	ldr	r0, [pc, #672]	; (800176c <ADC_Stream0_Handler+0x3e8>)
 80014cc:	ed92 aa00 	vldr	s20, [r2]
 80014d0:	edcd 6a08 	vstr	s13, [sp, #32]
 80014d4:	4aa6      	ldr	r2, [pc, #664]	; (8001770 <ADC_Stream0_Handler+0x3ec>)
 80014d6:	edd0 6a00 	vldr	s13, [r0]
 80014da:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 80017c4 <ADC_Stream0_Handler+0x440>
 80014de:	48a5      	ldr	r0, [pc, #660]	; (8001774 <ADC_Stream0_Handler+0x3f0>)
 80014e0:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 80017c8 <ADC_Stream0_Handler+0x444>
 80014e4:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 80017cc <ADC_Stream0_Handler+0x448>
 80014e8:	4fa3      	ldr	r7, [pc, #652]	; (8001778 <ADC_Stream0_Handler+0x3f4>)
 80014ea:	4ea4      	ldr	r6, [pc, #656]	; (800177c <ADC_Stream0_Handler+0x3f8>)
 80014ec:	edd2 ba00 	vldr	s23, [r2]
 80014f0:	ed96 7a00 	vldr	s14, [r6]
 80014f4:	ed9b 1a00 	vldr	s2, [fp]
 80014f8:	edda 7a00 	vldr	s15, [sl]
 80014fc:	eeb0 6a47 	vmov.f32	s12, s14
 8001500:	ed98 2a00 	vldr	s4, [r8]
 8001504:	edd7 1a00 	vldr	s3, [r7]
 8001508:	8023      	strh	r3, [r4, #0]
 800150a:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
 800150e:	edd0 6a00 	vldr	s13, [r0]
 8001512:	489b      	ldr	r0, [pc, #620]	; (8001780 <ADC_Stream0_Handler+0x3fc>)
 8001514:	edcd 6a02 	vstr	s13, [sp, #8]
 8001518:	edd0 6a00 	vldr	s13, [r0]
 800151c:	4899      	ldr	r0, [pc, #612]	; (8001784 <ADC_Stream0_Handler+0x400>)

			if (TransmittingWSPR)
	{


		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 800151e:	499a      	ldr	r1, [pc, #616]	; (8001788 <ADC_Stream0_Handler+0x404>)
 8001520:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 8001524:	edd0 6a00 	vldr	s13, [r0]
 8001528:	4898      	ldr	r0, [pc, #608]	; (800178c <ADC_Stream0_Handler+0x408>)
 800152a:	7809      	ldrb	r1, [r1, #0]
 800152c:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 8001530:	edd0 6a00 	vldr	s13, [r0]
 8001534:	4896      	ldr	r0, [pc, #600]	; (8001790 <ADC_Stream0_Handler+0x40c>)
 8001536:	edcd 6a06 	vstr	s13, [sp, #24]
 800153a:	9115      	str	r1, [sp, #84]	; 0x54
 800153c:	edd0 6a00 	vldr	s13, [r0]
 8001540:	4994      	ldr	r1, [pc, #592]	; (8001794 <ADC_Stream0_Handler+0x410>)
 8001542:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 8001546:	edd1 6a00 	vldr	s13, [r1]
 800154a:	4993      	ldr	r1, [pc, #588]	; (8001798 <ADC_Stream0_Handler+0x414>)
 800154c:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8001550:	edd1 6a00 	vldr	s13, [r1]
 8001554:	4991      	ldr	r1, [pc, #580]	; (800179c <ADC_Stream0_Handler+0x418>)
 8001556:	edcd 6a07 	vstr	s13, [sp, #28]
 800155a:	edd1 6a00 	vldr	s13, [r1]
 800155e:	4990      	ldr	r1, [pc, #576]	; (80017a0 <ADC_Stream0_Handler+0x41c>)
			if (TransmittingWSPR)
 8001560:	f899 0000 	ldrb.w	r0, [r9]
 8001564:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8001568:	edd1 6a00 	vldr	s13, [r1]
 800156c:	498d      	ldr	r1, [pc, #564]	; (80017a4 <ADC_Stream0_Handler+0x420>)
 800156e:	4a8e      	ldr	r2, [pc, #568]	; (80017a8 <ADC_Stream0_Handler+0x424>)
 8001570:	9014      	str	r0, [sp, #80]	; 0x50
 8001572:	f9b1 0000 	ldrsh.w	r0, [r1]
 8001576:	f502 6c00 	add.w	ip, r2, #2048	; 0x800
 800157a:	498c      	ldr	r1, [pc, #560]	; (80017ac <ADC_Stream0_Handler+0x428>)
 800157c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8001580:	f9b1 9000 	ldrsh.w	r9, [r1]
 8001584:	498a      	ldr	r1, [pc, #552]	; (80017b0 <ADC_Stream0_Handler+0x42c>)
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 8001586:	eeb0 7a42 	vmov.f32	s14, s4
 800158a:	ed12 0a01 	vldr	s0, [r2, #-4]
 800158e:	ed12 2a02 	vldr	s4, [r2, #-8]
 8001592:	eef0 6a62 	vmov.f32	s13, s5
 8001596:	ed51 0a01 	vldr	s1, [r1, #-4]
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 800159a:	07dd      	lsls	r5, r3, #31
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 800159c:	ee72 2a07 	vadd.f32	s5, s4, s14
 80015a0:	eeb0 7a40 	vmov.f32	s14, s0
 80015a4:	eea1 7a04 	vfma.f32	s14, s2, s8
 80015a8:	eea2 7aa4 	vfma.f32	s14, s5, s9
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 80015ac:	ed51 2a02 	vldr	s5, [r1, #-8]
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 80015b0:	ee76 6aa2 	vadd.f32	s13, s13, s5
 80015b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015b8:	eeb0 7a60 	vmov.f32	s14, s1
 80015bc:	eea1 7a84 	vfma.f32	s14, s3, s8
 80015c0:	eea6 7aa4 	vfma.f32	s14, s13, s9
 80015c4:	ee36 7a07 	vadd.f32	s14, s12, s14
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 80015c8:	f100 8176 	bmi.w	80018b8 <ADC_Stream0_Handler+0x534>
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 80015cc:	eea9 5a04 	vfma.f32	s10, s18, s8
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 80015d0:	079d      	lsls	r5, r3, #30
 80015d2:	eee8 5a84 	vfma.f32	s11, s17, s8
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 80015d6:	ee7f fa8b 	vadd.f32	s31, s31, s22
 80015da:	ee3f fa2a 	vadd.f32	s30, s30, s21
 80015de:	eeaf 5aa4 	vfma.f32	s10, s31, s9
 80015e2:	eeef 5a24 	vfma.f32	s11, s30, s9
 80015e6:	ee75 6a27 	vadd.f32	s13, s10, s15
 80015ea:	ee35 6a87 	vadd.f32	s12, s11, s14
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 80015ee:	f100 8168 	bmi.w	80018c2 <ADC_Stream0_Handler+0x53e>
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 80015f2:	eeac 3a04 	vfma.f32	s6, s24, s8
 80015f6:	eddd 5a00 	vldr	s11, [sp]
 80015fa:	eeeb 3a84 	vfma.f32	s7, s23, s8
		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 80015fe:	075d      	lsls	r5, r3, #29
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8001600:	ee3a aa0e 	vadd.f32	s20, s20, s28
 8001604:	ee79 9aa5 	vadd.f32	s19, s19, s11
 8001608:	eeaa 3a24 	vfma.f32	s6, s20, s9
 800160c:	eee9 3aa4 	vfma.f32	s7, s19, s9
 8001610:	ee73 9a26 	vadd.f32	s19, s6, s13
 8001614:	ee33 aa86 	vadd.f32	s20, s7, s12
		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8001618:	f100 8164 	bmi.w	80018e4 <ADC_Stream0_Handler+0x560>
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 800161c:	eddd 5a03 	vldr	s11, [sp, #12]
 8001620:	eeae 8a84 	vfma.f32	s16, s29, s8
 8001624:	ed9d 5a05 	vldr	s10, [sp, #20]
		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8001628:	071d      	lsls	r5, r3, #28
 800162a:	eeed 5a84 	vfma.f32	s11, s27, s8
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 800162e:	ee3d da05 	vadd.f32	s26, s26, s10
 8001632:	ed9d 5a04 	vldr	s10, [sp, #16]
 8001636:	ee7c ca85 	vadd.f32	s25, s25, s10
 800163a:	eead 8a24 	vfma.f32	s16, s26, s9
 800163e:	eeec 5aa4 	vfma.f32	s11, s25, s9
 8001642:	ee79 ca88 	vadd.f32	s25, s19, s16
 8001646:	ee35 da8a 	vadd.f32	s26, s11, s20
		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 800164a:	f100 81f6 	bmi.w	8001a3a <ADC_Stream0_Handler+0x6b6>
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 800164e:	eddd 5a01 	vldr	s11, [sp, #4]
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001652:	06dd      	lsls	r5, r3, #27
 8001654:	ed9d fa08 	vldr	s30, [sp, #32]
 8001658:	eddd fa0a 	vldr	s31, [sp, #40]	; 0x28
 800165c:	eea5 fa84 	vfma.f32	s30, s11, s8
 8001660:	eddd 5a02 	vldr	s11, [sp, #8]
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001664:	ed9d 5a09 	vldr	s10, [sp, #36]	; 0x24
 8001668:	eee5 fa84 	vfma.f32	s31, s11, s8
 800166c:	eddd 5a11 	vldr	s11, [sp, #68]	; 0x44
 8001670:	ee75 5a85 	vadd.f32	s11, s11, s10
 8001674:	ed9d 5a0b 	vldr	s10, [sp, #44]	; 0x2c
 8001678:	eea5 faa4 	vfma.f32	s30, s11, s9
 800167c:	eddd 5a10 	vldr	s11, [sp, #64]	; 0x40
 8001680:	ee75 5a85 	vadd.f32	s11, s11, s10
 8001684:	eee5 faa4 	vfma.f32	s31, s11, s9
 8001688:	ee3c fa8f 	vadd.f32	s30, s25, s30
 800168c:	ee7d fa2f 	vadd.f32	s31, s26, s31
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001690:	f100 81fc 	bmi.w	8001a8c <ADC_Stream0_Handler+0x708>
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001694:	ed9d 5a06 	vldr	s10, [sp, #24]
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001698:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 800169c:	eddd 5a0c 	vldr	s11, [sp, #48]	; 0x30
 80016a0:	eddd 3a07 	vldr	s7, [sp, #28]
 80016a4:	eee5 5a04 	vfma.f32	s11, s10, s8
 80016a8:	ed9d 5a0e 	vldr	s10, [sp, #56]	; 0x38
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016ac:	ed9d 3a0d 	vldr	s6, [sp, #52]	; 0x34
 80016b0:	eea3 5a84 	vfma.f32	s10, s7, s8
 80016b4:	eddd 3a12 	vldr	s7, [sp, #72]	; 0x48
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016b8:	4d3e      	ldr	r5, [pc, #248]	; (80017b4 <ADC_Stream0_Handler+0x430>)
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016ba:	ee73 3a83 	vadd.f32	s7, s7, s6
 80016be:	ed9d 3a0f 	vldr	s6, [sp, #60]	; 0x3c
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016c2:	44ae      	add	lr, r5
 80016c4:	4d3c      	ldr	r5, [pc, #240]	; (80017b8 <ADC_Stream0_Handler+0x434>)
 80016c6:	eee3 5aa4 	vfma.f32	s11, s7, s9
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016ca:	eddd 3a13 	vldr	s7, [sp, #76]	; 0x4c
 80016ce:	ee73 3a83 	vadd.f32	s7, s7, s6
 80016d2:	eea3 5aa4 	vfma.f32	s10, s7, s9
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016d6:	eddf 3a39 	vldr	s7, [pc, #228]	; 80017bc <ADC_Stream0_Handler+0x438>
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016da:	ee75 5a8f 	vadd.f32	s11, s11, s30
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016de:	ee65 5aa3 	vmul.f32	s11, s11, s7
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016e2:	ee35 5a2f 	vadd.f32	s10, s10, s31
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016e6:	ee25 5a23 	vmul.f32	s10, s10, s7
 80016ea:	ed8e 5a00 	vstr	s10, [lr]
 80016ee:	e06f      	b.n	80017d0 <ADC_Stream0_Handler+0x44c>
 80016f0:	58024400 	.word	0x58024400
 80016f4:	24009820 	.word	0x24009820
 80016f8:	2400202c 	.word	0x2400202c
 80016fc:	24007264 	.word	0x24007264
 8001700:	00000000 	.word	0x00000000
 8001704:	3b000000 	.word	0x3b000000
 8001708:	24000730 	.word	0x24000730
 800170c:	24001008 	.word	0x24001008
 8001710:	2400c818 	.word	0x2400c818
 8001714:	240072e0 	.word	0x240072e0
 8001718:	24000808 	.word	0x24000808
 800171c:	240006f4 	.word	0x240006f4
 8001720:	240006a0 	.word	0x240006a0
 8001724:	240006b0 	.word	0x240006b0
 8001728:	240006e8 	.word	0x240006e8
 800172c:	24000708 	.word	0x24000708
 8001730:	240006ec 	.word	0x240006ec
 8001734:	2400070c 	.word	0x2400070c
 8001738:	240006ac 	.word	0x240006ac
 800173c:	240006bc 	.word	0x240006bc
 8001740:	240006e0 	.word	0x240006e0
 8001744:	24000700 	.word	0x24000700
 8001748:	240006e4 	.word	0x240006e4
 800174c:	24000704 	.word	0x24000704
 8001750:	240006a8 	.word	0x240006a8
 8001754:	240006b8 	.word	0x240006b8
 8001758:	240006f8 	.word	0x240006f8
 800175c:	24000718 	.word	0x24000718
 8001760:	240006fc 	.word	0x240006fc
 8001764:	2400071c 	.word	0x2400071c
 8001768:	240006b4 	.word	0x240006b4
 800176c:	240006c4 	.word	0x240006c4
 8001770:	240006f0 	.word	0x240006f0
 8001774:	24000710 	.word	0x24000710
 8001778:	240006d0 	.word	0x240006d0
 800177c:	240006d4 	.word	0x240006d4
 8001780:	24000714 	.word	0x24000714
 8001784:	240006c0 	.word	0x240006c0
 8001788:	240093f8 	.word	0x240093f8
 800178c:	24000728 	.word	0x24000728
 8001790:	2400072c 	.word	0x2400072c
 8001794:	240006cc 	.word	0x240006cc
 8001798:	24000720 	.word	0x24000720
 800179c:	24000724 	.word	0x24000724
 80017a0:	240006c8 	.word	0x240006c8
 80017a4:	2400069e 	.word	0x2400069e
 80017a8:	24001010 	.word	0x24001010
 80017ac:	2400069c 	.word	0x2400069c
 80017b0:	24000810 	.word	0x24000810
 80017b4:	2000b000 	.word	0x2000b000
 80017b8:	2000d000 	.word	0x2000d000
 80017bc:	34000000 	.word	0x34000000
 80017c0:	240072e5 	.word	0x240072e5
 80017c4:	240006d8 	.word	0x240006d8
 80017c8:	240006dc 	.word	0x240006dc
 80017cc:	240006a4 	.word	0x240006a4
 80017d0:	f100 0e01 	add.w	lr, r0, #1
 80017d4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80017d8:	edc0 5a00 	vstr	s11, [r0]
 80017dc:	fa0f f08e 	sxth.w	r0, lr
		if(idx < BSIZE*4)
 80017e0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80017e4:	f2c0 81aa 	blt.w	8001b3c <ADC_Stream0_Handler+0x7b8>
			if (TransmittingWSPR)
 80017e8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80017ea:	2800      	cmp	r0, #0
 80017ec:	f040 817f 	bne.w	8001aee <ADC_Stream0_Handler+0x76a>
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80017f0:	eddd 5a07 	vldr	s11, [sp, #28]

	}

			// generate now an interrupt to signal the base band processing routine that it has a new buffer

			EXTI->SWIER1 |= GPIO_PIN_14;
 80017f4:	f04f 4eb0 	mov.w	lr, #1476395008	; 0x58000000
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80017f8:	eeb0 5a49 	vmov.f32	s10, s18
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80017fc:	edcd da03 	vstr	s27, [sp, #12]
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001800:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001804:	eeb0 9a67 	vmov.f32	s18, s15
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001808:	eddd 5a06 	vldr	s11, [sp, #24]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800180c:	eef0 3a6b 	vmov.f32	s7, s23
		inE6Rold = inER;                           inE6Iold = inEI;
 8001810:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001814:	eeb0 3a4c 	vmov.f32	s6, s24
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001818:	edcd 5a0c 	vstr	s11, [sp, #48]	; 0x30
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800181c:	eef0 da4a 	vmov.f32	s27, s20
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001820:	eddd 5a02 	vldr	s11, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001824:	eef0 ba46 	vmov.f32	s23, s12
			EXTI->SWIER1 |= GPIO_PIN_14;
 8001828:	f8de 0008 	ldr.w	r0, [lr, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800182c:	eeb0 ca66 	vmov.f32	s24, s13
		inE6Rold = inER;                           inE6Iold = inEI;
 8001830:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8001834:	eeb0 aa4e 	vmov.f32	s20, s28
		inE6Rold = inER;                           inE6Iold = inEI;
 8001838:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
			EXTI->SWIER1 |= GPIO_PIN_14;
 800183c:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001840:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001844:	eeb0 8a6e 	vmov.f32	s16, s29
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001848:	eddd 5a01 	vldr	s11, [sp, #4]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800184c:	eef0 ea69 	vmov.f32	s29, s19
		inE6Rold = inER;                           inE6Iold = inEI;
 8001850:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8001854:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001858:	edcd 5a08 	vstr	s11, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800185c:	eef0 5a68 	vmov.f32	s11, s17
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001860:	edcd fa07 	vstr	s31, [sp, #28]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001864:	eef0 8a47 	vmov.f32	s17, s14
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001868:	ed8d fa06 	vstr	s30, [sp, #24]
		inE2Rold = inER;                           inE2Iold = inEI;
 800186c:	eef0 fa4b 	vmov.f32	s31, s22
 8001870:	eeb0 fa6a 	vmov.f32	s30, s21
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001874:	ed8d da02 	vstr	s26, [sp, #8]
 8001878:	edcd ca01 	vstr	s25, [sp, #4]
		inE5Rold  = inER;                          inE5Iold  = inEI;
 800187c:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
		inE4Rold = inER;                           inE4Iold = inEI;
 8001880:	eddd ca04 	vldr	s25, [sp, #16]
			EXTI->SWIER1 |= GPIO_PIN_14;
 8001884:	f8ce 0008 	str.w	r0, [lr, #8]
		idx = 0;
 8001888:	2000      	movs	r0, #0
		inE5Rold  = inER;                          inE5Iold  = inEI;
 800188a:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
		inE4Rold = inER;                           inE4Iold = inEI;
 800188e:	ed9d da05 	vldr	s26, [sp, #20]
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8001892:	eddd 9a00 	vldr	s19, [sp]
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8001896:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
	while(k--)
 800189a:	3208      	adds	r2, #8
 800189c:	3b01      	subs	r3, #1
 800189e:	eef0 7a41 	vmov.f32	s15, s2
 80018a2:	3108      	adds	r1, #8
 80018a4:	4594      	cmp	ip, r2
 80018a6:	eeb0 6a61 	vmov.f32	s12, s3
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	d037      	beq.n	800191e <ADC_Stream0_Handler+0x59a>
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 80018ae:	eef0 1a60 	vmov.f32	s3, s1
 80018b2:	eeb0 1a40 	vmov.f32	s2, s0
 80018b6:	e666      	b.n	8001586 <ADC_Stream0_Handler+0x202>
			tmp1R = outR; tmp1I = outI;  // save the even element produced
 80018b8:	eef0 aa47 	vmov.f32	s21, s14
 80018bc:	eeb0 ba67 	vmov.f32	s22, s15
 80018c0:	e7eb      	b.n	800189a <ADC_Stream0_Handler+0x516>
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80018c2:	eef0 5a68 	vmov.f32	s11, s17
			tmp2R = outR; tmp2I = outI;  // save the even element produced
 80018c6:	ed8d 6a00 	vstr	s12, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80018ca:	eeb0 5a49 	vmov.f32	s10, s18
 80018ce:	eef0 8a47 	vmov.f32	s17, s14
 80018d2:	eeb0 9a67 	vmov.f32	s18, s15
			tmp2R = outR; tmp2I = outI;  // save the even element produced
 80018d6:	eeb0 ea66 	vmov.f32	s28, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 80018da:	eeb0 fa6a 	vmov.f32	s30, s21
 80018de:	eef0 fa4b 	vmov.f32	s31, s22
 80018e2:	e7da      	b.n	800189a <ADC_Stream0_Handler+0x516>
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80018e4:	eef0 3a6b 	vmov.f32	s7, s23
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 80018e8:	ed8d aa04 	vstr	s20, [sp, #16]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80018ec:	eeb0 3a4c 	vmov.f32	s6, s24
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 80018f0:	edcd 9a05 	vstr	s19, [sp, #20]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80018f4:	eef0 5a68 	vmov.f32	s11, s17
		inE3Rold  = inER;                          inE3Iold  = inEI;
 80018f8:	eddd 9a00 	vldr	s19, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80018fc:	eeb0 5a49 	vmov.f32	s10, s18
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001900:	eef0 ba46 	vmov.f32	s23, s12
 8001904:	eeb0 ca66 	vmov.f32	s24, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001908:	eef0 8a47 	vmov.f32	s17, s14
 800190c:	eeb0 9a67 	vmov.f32	s18, s15
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8001910:	eeb0 aa4e 	vmov.f32	s20, s28
		inE2Rold = inER;                           inE2Iold = inEI;
 8001914:	eeb0 fa6a 	vmov.f32	s30, s21
 8001918:	eef0 fa4b 	vmov.f32	s31, s22
 800191c:	e7bd      	b.n	800189a <ADC_Stream0_Handler+0x516>
 800191e:	4bae      	ldr	r3, [pc, #696]	; (8001bd8 <ADC_Stream0_Handler+0x854>)
 8001920:	eddd 7a03 	vldr	s15, [sp, #12]
 8001924:	edc3 2a00 	vstr	s5, [r3]
 8001928:	4bac      	ldr	r3, [pc, #688]	; (8001bdc <ADC_Stream0_Handler+0x858>)
 800192a:	ed8b 0a00 	vstr	s0, [fp]
 800192e:	ed83 9a00 	vstr	s18, [r3]
 8001932:	4bab      	ldr	r3, [pc, #684]	; (8001be0 <ADC_Stream0_Handler+0x85c>)
 8001934:	ed8a 1a00 	vstr	s2, [sl]
 8001938:	ed83 5a00 	vstr	s10, [r3]
 800193c:	4ba9      	ldr	r3, [pc, #676]	; (8001be4 <ADC_Stream0_Handler+0x860>)
 800193e:	ed88 2a00 	vstr	s4, [r8]
 8001942:	edc3 fa00 	vstr	s31, [r3]
 8001946:	4ba8      	ldr	r3, [pc, #672]	; (8001be8 <ADC_Stream0_Handler+0x864>)
 8001948:	edc7 0a00 	vstr	s1, [r7]
 800194c:	edc3 8a00 	vstr	s17, [r3]
 8001950:	4ba6      	ldr	r3, [pc, #664]	; (8001bec <ADC_Stream0_Handler+0x868>)
 8001952:	edc6 1a00 	vstr	s3, [r6]
 8001956:	edc3 5a00 	vstr	s11, [r3]
 800195a:	4ba5      	ldr	r3, [pc, #660]	; (8001bf0 <ADC_Stream0_Handler+0x86c>)
 800195c:	4aa5      	ldr	r2, [pc, #660]	; (8001bf4 <ADC_Stream0_Handler+0x870>)
 800195e:	ed83 fa00 	vstr	s30, [r3]
 8001962:	4ba5      	ldr	r3, [pc, #660]	; (8001bf8 <ADC_Stream0_Handler+0x874>)
 8001964:	ed83 ca00 	vstr	s24, [r3]
 8001968:	4ba4      	ldr	r3, [pc, #656]	; (8001bfc <ADC_Stream0_Handler+0x878>)
 800196a:	ed83 3a00 	vstr	s6, [r3]
 800196e:	4ba4      	ldr	r3, [pc, #656]	; (8001c00 <ADC_Stream0_Handler+0x87c>)
 8001970:	ed83 aa00 	vstr	s20, [r3]
 8001974:	4ba3      	ldr	r3, [pc, #652]	; (8001c04 <ADC_Stream0_Handler+0x880>)
 8001976:	edc3 ba00 	vstr	s23, [r3]
 800197a:	4ba3      	ldr	r3, [pc, #652]	; (8001c08 <ADC_Stream0_Handler+0x884>)
 800197c:	edc3 3a00 	vstr	s7, [r3]
 8001980:	4ba2      	ldr	r3, [pc, #648]	; (8001c0c <ADC_Stream0_Handler+0x888>)
 8001982:	edc3 9a00 	vstr	s19, [r3]
 8001986:	4ba2      	ldr	r3, [pc, #648]	; (8001c10 <ADC_Stream0_Handler+0x88c>)
 8001988:	edc3 ea00 	vstr	s29, [r3]
 800198c:	4ba1      	ldr	r3, [pc, #644]	; (8001c14 <ADC_Stream0_Handler+0x890>)
 800198e:	ed83 8a00 	vstr	s16, [r3]
 8001992:	4ba1      	ldr	r3, [pc, #644]	; (8001c18 <ADC_Stream0_Handler+0x894>)
 8001994:	ed83 da00 	vstr	s26, [r3]
 8001998:	4ba0      	ldr	r3, [pc, #640]	; (8001c1c <ADC_Stream0_Handler+0x898>)
 800199a:	edc3 da00 	vstr	s27, [r3]
 800199e:	4ba0      	ldr	r3, [pc, #640]	; (8001c20 <ADC_Stream0_Handler+0x89c>)
 80019a0:	edc3 7a00 	vstr	s15, [r3]
 80019a4:	4b9f      	ldr	r3, [pc, #636]	; (8001c24 <ADC_Stream0_Handler+0x8a0>)
 80019a6:	eddd 7a01 	vldr	s15, [sp, #4]
 80019aa:	edc3 ca00 	vstr	s25, [r3]
 80019ae:	4b9e      	ldr	r3, [pc, #632]	; (8001c28 <ADC_Stream0_Handler+0x8a4>)
 80019b0:	edc3 7a00 	vstr	s15, [r3]
 80019b4:	eddd 7a08 	vldr	s15, [sp, #32]
 80019b8:	4b9c      	ldr	r3, [pc, #624]	; (8001c2c <ADC_Stream0_Handler+0x8a8>)
 80019ba:	edc3 7a00 	vstr	s15, [r3]
 80019be:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80019c2:	4b9b      	ldr	r3, [pc, #620]	; (8001c30 <ADC_Stream0_Handler+0x8ac>)
 80019c4:	edc3 7a00 	vstr	s15, [r3]
 80019c8:	eddd 7a02 	vldr	s15, [sp, #8]
 80019cc:	4b99      	ldr	r3, [pc, #612]	; (8001c34 <ADC_Stream0_Handler+0x8b0>)
 80019ce:	edc3 7a00 	vstr	s15, [r3]
 80019d2:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80019d6:	4b98      	ldr	r3, [pc, #608]	; (8001c38 <ADC_Stream0_Handler+0x8b4>)
 80019d8:	edc3 7a00 	vstr	s15, [r3]
 80019dc:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 80019e0:	4b96      	ldr	r3, [pc, #600]	; (8001c3c <ADC_Stream0_Handler+0x8b8>)
 80019e2:	edc3 7a00 	vstr	s15, [r3]
 80019e6:	eddd 7a06 	vldr	s15, [sp, #24]
 80019ea:	4b95      	ldr	r3, [pc, #596]	; (8001c40 <ADC_Stream0_Handler+0x8bc>)
 80019ec:	edc3 7a00 	vstr	s15, [r3]
 80019f0:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 80019f4:	4b93      	ldr	r3, [pc, #588]	; (8001c44 <ADC_Stream0_Handler+0x8c0>)
 80019f6:	edc3 7a00 	vstr	s15, [r3]
 80019fa:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80019fe:	4b92      	ldr	r3, [pc, #584]	; (8001c48 <ADC_Stream0_Handler+0x8c4>)
 8001a00:	edc3 7a00 	vstr	s15, [r3]
 8001a04:	4b91      	ldr	r3, [pc, #580]	; (8001c4c <ADC_Stream0_Handler+0x8c8>)
 8001a06:	eddd 7a07 	vldr	s15, [sp, #28]
 8001a0a:	8018      	strh	r0, [r3, #0]
 8001a0c:	4b90      	ldr	r3, [pc, #576]	; (8001c50 <ADC_Stream0_Handler+0x8cc>)
 8001a0e:	edc3 7a00 	vstr	s15, [r3]
 8001a12:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8001a16:	4b8f      	ldr	r3, [pc, #572]	; (8001c54 <ADC_Stream0_Handler+0x8d0>)
 8001a18:	edc3 7a00 	vstr	s15, [r3]
 8001a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a20:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8001a24:	8023      	strh	r3, [r4, #0]
 8001a26:	edc2 7a00 	vstr	s15, [r2]
 8001a2a:	4a8b      	ldr	r2, [pc, #556]	; (8001c58 <ADC_Stream0_Handler+0x8d4>)
 8001a2c:	f8a2 9000 	strh.w	r9, [r2]
		}

		// LED_YELLOW_OFF;

	}
 8001a30:	b017      	add	sp, #92	; 0x5c
 8001a32:	ecbd 8b10 	vpop	{d8-d15}
 8001a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a3a:	eeb0 8a6e 	vmov.f32	s16, s29
 8001a3e:	edcd da03 	vstr	s27, [sp, #12]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a42:	eef0 3a6b 	vmov.f32	s7, s23
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 8001a46:	ed8d da10 	vstr	s26, [sp, #64]	; 0x40
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a4a:	eeb0 3a4c 	vmov.f32	s6, s24
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 8001a4e:	edcd ca11 	vstr	s25, [sp, #68]	; 0x44
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a52:	eef0 5a68 	vmov.f32	s11, s17
 8001a56:	eeb0 5a49 	vmov.f32	s10, s18
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a5a:	eef0 da4a 	vmov.f32	s27, s20
 8001a5e:	eef0 ea69 	vmov.f32	s29, s19
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a62:	eef0 ba46 	vmov.f32	s23, s12
 8001a66:	eeb0 ca66 	vmov.f32	s24, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a6a:	eef0 8a47 	vmov.f32	s17, s14
 8001a6e:	eeb0 9a67 	vmov.f32	s18, s15
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8001a72:	eeb0 aa4e 	vmov.f32	s20, s28
		inE4Rold = inER;                           inE4Iold = inEI;
 8001a76:	eddd ca04 	vldr	s25, [sp, #16]
		inE2Rold = inER;                           inE2Iold = inEI;
 8001a7a:	eeb0 fa6a 	vmov.f32	s30, s21
		inE4Rold = inER;                           inE4Iold = inEI;
 8001a7e:	ed9d da05 	vldr	s26, [sp, #20]
		inE2Rold = inER;                           inE2Iold = inEI;
 8001a82:	eef0 fa4b 	vmov.f32	s31, s22
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8001a86:	eddd 9a00 	vldr	s19, [sp]
 8001a8a:	e706      	b.n	800189a <ADC_Stream0_Handler+0x516>
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a8c:	eddd 5a02 	vldr	s11, [sp, #8]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a90:	eeb0 8a6e 	vmov.f32	s16, s29
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a94:	eef0 3a6b 	vmov.f32	s7, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a98:	edcd da03 	vstr	s27, [sp, #12]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a9c:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001aa0:	eeb0 3a4c 	vmov.f32	s6, s24
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001aa4:	eddd 5a01 	vldr	s11, [sp, #4]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001aa8:	eeb0 5a49 	vmov.f32	s10, s18
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001aac:	eef0 da4a 	vmov.f32	s27, s20
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001ab0:	ed8d da02 	vstr	s26, [sp, #8]
 8001ab4:	edcd 5a08 	vstr	s11, [sp, #32]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001ab8:	eef0 ea69 	vmov.f32	s29, s19
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001abc:	eef0 5a68 	vmov.f32	s11, s17
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001ac0:	edcd ca01 	vstr	s25, [sp, #4]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001ac4:	eef0 ba46 	vmov.f32	s23, s12
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001ac8:	edcd fa13 	vstr	s31, [sp, #76]	; 0x4c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001acc:	eeb0 ca66 	vmov.f32	s24, s13
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001ad0:	ed8d fa12 	vstr	s30, [sp, #72]	; 0x48
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001ad4:	eef0 8a47 	vmov.f32	s17, s14
 8001ad8:	eeb0 9a67 	vmov.f32	s18, s15
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8001adc:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8001ae0:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 8001ae4:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8001ae8:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 8001aec:	e7c1      	b.n	8001a72 <ADC_Stream0_Handler+0x6ee>
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 8001aee:	f109 0001 	add.w	r0, r9, #1
 8001af2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001af4:	b200      	sxth	r0, r0
 8001af6:	9003      	str	r0, [sp, #12]
 8001af8:	4858      	ldr	r0, [pc, #352]	; (8001c5c <ADC_Stream0_Handler+0x8d8>)
 8001afa:	f830 e015 	ldrh.w	lr, [r0, r5, lsl #1]
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone]);
 8001afe:	4858      	ldr	r0, [pc, #352]	; (8001c60 <ADC_Stream0_Handler+0x8dc>)
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 8001b00:	45f1      	cmp	r9, lr
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone]);
 8001b02:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8001b06:	f42e 4e7f 	bic.w	lr, lr, #65280	; 0xff00
 8001b0a:	f02e 0ef8 	bic.w	lr, lr, #248	; 0xf8
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 8001b0e:	db5a      	blt.n	8001bc6 <ADC_Stream0_Handler+0x842>
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1); //rimettere 1
 8001b10:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001b12:	4d54      	ldr	r5, [pc, #336]	; (8001c64 <ADC_Stream0_Handler+0x8e0>)
 8001b14:	f835 9010 	ldrh.w	r9, [r5, r0, lsl #1]
 8001b18:	4851      	ldr	r0, [pc, #324]	; (8001c60 <ADC_Stream0_Handler+0x8dc>)
 8001b1a:	f109 0901 	add.w	r9, r9, #1
 8001b1e:	ea4e 0ec9 	orr.w	lr, lr, r9, lsl #3
 8001b22:	f8c0 e03c 	str.w	lr, [r0, #60]	; 0x3c
		if (IntCounter == 8)
 8001b26:	9803      	ldr	r0, [sp, #12]
		__HAL_RCC_PLL2FRACN_ENABLE();
 8001b28:	4d4d      	ldr	r5, [pc, #308]	; (8001c60 <ADC_Stream0_Handler+0x8dc>)
		if (IntCounter == 8)
 8001b2a:	2808      	cmp	r0, #8
 8001b2c:	bf08      	it	eq
 8001b2e:	2000      	moveq	r0, #0
 8001b30:	4681      	mov	r9, r0
		__HAL_RCC_PLL2FRACN_ENABLE();
 8001b32:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001b34:	f040 0010 	orr.w	r0, r0, #16
 8001b38:	62e8      	str	r0, [r5, #44]	; 0x2c
 8001b3a:	e659      	b.n	80017f0 <ADC_Stream0_Handler+0x46c>
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b3c:	eddd 5a07 	vldr	s11, [sp, #28]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b40:	eeb0 5a49 	vmov.f32	s10, s18
 8001b44:	eeb0 9a67 	vmov.f32	s18, s15
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b48:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b4c:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001b50:	eeb0 8a6e 	vmov.f32	s16, s29
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b54:	eddd 5a06 	vldr	s11, [sp, #24]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001b58:	eef0 3a6b 	vmov.f32	s7, s23
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b5c:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001b60:	eeb0 3a4c 	vmov.f32	s6, s24
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b64:	edcd 5a0c 	vstr	s11, [sp, #48]	; 0x30
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001b68:	eef0 ea69 	vmov.f32	s29, s19
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b6c:	eddd 5a02 	vldr	s11, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001b70:	eef0 ba46 	vmov.f32	s23, s12
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b74:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001b78:	eeb0 ca66 	vmov.f32	s24, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b7c:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
 8001b80:	eddd 5a01 	vldr	s11, [sp, #4]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001b84:	edcd da03 	vstr	s27, [sp, #12]
 8001b88:	eef0 da4a 	vmov.f32	s27, s20
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b8c:	edcd 5a08 	vstr	s11, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b90:	eef0 5a68 	vmov.f32	s11, s17
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b94:	edcd fa07 	vstr	s31, [sp, #28]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b98:	eef0 8a47 	vmov.f32	s17, s14
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b9c:	ed8d fa06 	vstr	s30, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001ba0:	ed8d da02 	vstr	s26, [sp, #8]
 8001ba4:	edcd ca01 	vstr	s25, [sp, #4]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001ba8:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8001bac:	e796      	b.n	8001adc <ADC_Stream0_Handler+0x758>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
 8001bae:	4a2e      	ldr	r2, [pc, #184]	; (8001c68 <ADC_Stream0_Handler+0x8e4>)
 8001bb0:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <ADC_Stream0_Handler+0x8e8>)
 8001bb2:	ed92 0a00 	vldr	s0, [r2]
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001bbe:	f000 f857 	bl	8001c70 <SDR_ComputeLO>
 8001bc2:	f7ff bbfe 	b.w	80013c2 <ADC_Stream0_Handler+0x3e>
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone]);
 8001bc6:	4827      	ldr	r0, [pc, #156]	; (8001c64 <ADC_Stream0_Handler+0x8e0>)
 8001bc8:	f830 9015 	ldrh.w	r9, [r0, r5, lsl #1]
 8001bcc:	4824      	ldr	r0, [pc, #144]	; (8001c60 <ADC_Stream0_Handler+0x8dc>)
 8001bce:	ea4e 0ec9 	orr.w	lr, lr, r9, lsl #3
 8001bd2:	f8c0 e03c 	str.w	lr, [r0, #60]	; 0x3c
 8001bd6:	e7a6      	b.n	8001b26 <ADC_Stream0_Handler+0x7a2>
 8001bd8:	240006a0 	.word	0x240006a0
 8001bdc:	240006e8 	.word	0x240006e8
 8001be0:	240006ec 	.word	0x240006ec
 8001be4:	240006ac 	.word	0x240006ac
 8001be8:	240006e0 	.word	0x240006e0
 8001bec:	240006e4 	.word	0x240006e4
 8001bf0:	240006a8 	.word	0x240006a8
 8001bf4:	240006c8 	.word	0x240006c8
 8001bf8:	240006f8 	.word	0x240006f8
 8001bfc:	240006fc 	.word	0x240006fc
 8001c00:	240006b4 	.word	0x240006b4
 8001c04:	240006f0 	.word	0x240006f0
 8001c08:	240006f4 	.word	0x240006f4
 8001c0c:	240006b0 	.word	0x240006b0
 8001c10:	24000708 	.word	0x24000708
 8001c14:	2400070c 	.word	0x2400070c
 8001c18:	240006bc 	.word	0x240006bc
 8001c1c:	24000700 	.word	0x24000700
 8001c20:	24000704 	.word	0x24000704
 8001c24:	240006b8 	.word	0x240006b8
 8001c28:	24000718 	.word	0x24000718
 8001c2c:	2400071c 	.word	0x2400071c
 8001c30:	240006c4 	.word	0x240006c4
 8001c34:	24000710 	.word	0x24000710
 8001c38:	24000714 	.word	0x24000714
 8001c3c:	240006c0 	.word	0x240006c0
 8001c40:	24000728 	.word	0x24000728
 8001c44:	2400072c 	.word	0x2400072c
 8001c48:	240006cc 	.word	0x240006cc
 8001c4c:	2400069e 	.word	0x2400069e
 8001c50:	24000720 	.word	0x24000720
 8001c54:	24000724 	.word	0x24000724
 8001c58:	2400069c 	.word	0x2400069c
 8001c5c:	24006248 	.word	0x24006248
 8001c60:	58024400 	.word	0x58024400
 8001c64:	2400623c 	.word	0x2400623c
 8001c68:	24007264 	.word	0x24007264
 8001c6c:	24009c34 	.word	0x24009c34

08001c70 <SDR_ComputeLO>:

#include "Globals.h"

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 8001c70:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
  static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f, 
	                ypi, ypq, tmpi, gain=1.f;
	
	if (oldfreq != freq)
 8001c72:	4b50      	ldr	r3, [pc, #320]	; (8001db4 <SDR_ComputeLO+0x144>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	eef4 7a40 	vcmp.f32	s15, s0
{
 8001c7c:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 8001c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c84:	d173      	bne.n	8001d6e <SDR_ComputeLO+0xfe>
// Coupled Quadrature Oscillator with level stabilization	
	while(k)
	{                    
// loop partially unrolled for performance		

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c86:	4a4c      	ldr	r2, [pc, #304]	; (8001db8 <SDR_ComputeLO+0x148>)
 8001c88:	4b4c      	ldr	r3, [pc, #304]	; (8001dbc <SDR_ComputeLO+0x14c>)
 8001c8a:	ed92 8a00 	vldr	s16, [r2]
 8001c8e:	ed93 7a00 	vldr	s14, [r3]
 8001c92:	4d4b      	ldr	r5, [pc, #300]	; (8001dc0 <SDR_ComputeLO+0x150>)
 8001c94:	4c4b      	ldr	r4, [pc, #300]	; (8001dc4 <SDR_ComputeLO+0x154>)
 8001c96:	484c      	ldr	r0, [pc, #304]	; (8001dc8 <SDR_ComputeLO+0x158>)
 8001c98:	4b4c      	ldr	r3, [pc, #304]	; (8001dcc <SDR_ComputeLO+0x15c>)
 8001c9a:	edd5 5a00 	vldr	s11, [r5]
 8001c9e:	edd4 7a00 	vldr	s15, [r4]
 8001ca2:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8001ca6:	edd0 6a00 	vldr	s13, [r0]
 8001caa:	4a49      	ldr	r2, [pc, #292]	; (8001dd0 <SDR_ComputeLO+0x160>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001cac:	ee27 6a88 	vmul.f32	s12, s15, s16
	while(k)
 8001cb0:	3210      	adds	r2, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001cb2:	ee67 7a67 	vnmul.f32	s15, s14, s15
	while(k)
 8001cb6:	3310      	adds	r3, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001cb8:	eea5 6a87 	vfma.f32	s12, s11, s14
	while(k)
 8001cbc:	428b      	cmp	r3, r1
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001cbe:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001cc2:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001cc6:	ee67 7aa6 	vmul.f32	s15, s15, s13
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001cca:	ee26 5a08 	vmul.f32	s10, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001cce:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001cd2:	ee67 5a46 	vnmul.f32	s11, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001cd6:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001cda:	eea7 5a87 	vfma.f32	s10, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001cde:	eee7 5a88 	vfma.f32	s11, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ce2:	ee26 5a85 	vmul.f32	s10, s13, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ce6:	ee66 5aa5 	vmul.f32	s11, s13, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001cea:	ee25 6a08 	vmul.f32	s12, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001cee:	ed02 5a07 	vstr	s10, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001cf2:	ee67 7a45 	vnmul.f32	s15, s14, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001cf6:	ed43 5a07 	vstr	s11, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001cfa:	eea5 6a87 	vfma.f32	s12, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001cfe:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001d02:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001d0a:	ee66 5a08 	vmul.f32	s11, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001d0e:	ed02 6a06 	vstr	s12, [r2, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001d12:	ee27 5a46 	vnmul.f32	s10, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001d16:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001d1a:	eeb0 6a65 	vmov.f32	s12, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001d1e:	eea7 5a88 	vfma.f32	s10, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001d22:	eea7 6a87 	vfma.f32	s12, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001d26:	ee66 5a85 	vmul.f32	s11, s13, s10
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001d2a:	ee66 7a86 	vmul.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001d2e:	ed43 5a05 	vstr	s11, [r3, #-20]	; 0xffffffec
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001d32:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 8001d36:	d1b9      	bne.n	8001cac <SDR_ComputeLO+0x3c>
    ym1i = tmpi;

    k--;
	}
// compute the gain to be applied to stabilize the level
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001d38:	ee66 6a06 	vmul.f32	s13, s12, s12
 8001d3c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001dd4 <SDR_ComputeLO+0x164>
 8001d40:	edc4 7a00 	vstr	s15, [r4]
 8001d44:	eddf 4a24 	vldr	s9, [pc, #144]	; 8001dd8 <SDR_ComputeLO+0x168>
 8001d48:	eee5 6a05 	vfma.f32	s13, s10, s10
 8001d4c:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <SDR_ComputeLO+0x16c>)
 8001d4e:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <SDR_ComputeLO+0x170>)
 8001d50:	edc5 5a00 	vstr	s11, [r5]
 8001d54:	ed82 5a00 	vstr	s10, [r2]
 8001d58:	ed83 6a00 	vstr	s12, [r3]
 8001d5c:	ee77 7a66 	vsub.f32	s15, s14, s13
}	
 8001d60:	ecbd 8b04 	vpop	{d8-d9}
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001d64:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8001d68:	edc0 7a00 	vstr	s15, [r0]
}	
 8001d6c:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001d6e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001de4 <SDR_ComputeLO+0x174>
 8001d72:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <SDR_ComputeLO+0x178>)
 8001d74:	ee60 7a27 	vmul.f32	s15, s0, s15
	  oldfreq  =  freq;
 8001d78:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001d7c:	ed92 7a00 	vldr	s14, [r2]
 8001d80:	ee87 9a87 	vdiv.f32	s18, s15, s14
 8001d84:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8001d88:	eeb0 0b49 	vmov.f64	d0, d9
 8001d8c:	f011 f918 	bl	8012fc0 <cos>
 8001d90:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <SDR_ComputeLO+0x148>)
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001d96:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001d9a:	ed83 8a00 	vstr	s16, [r3]
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001d9e:	f011 f95b 	bl	8013058 <sin>
 8001da2:	eeb7 7bc0 	vcvt.f32.f64	s14, d0
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <SDR_ComputeLO+0x14c>)
 8001da8:	eeb1 7a47 	vneg.f32	s14, s14
 8001dac:	ed83 7a00 	vstr	s14, [r3]
 8001db0:	e76f      	b.n	8001c92 <SDR_ComputeLO+0x22>
 8001db2:	bf00      	nop
 8001db4:	24000204 	.word	0x24000204
 8001db8:	24000734 	.word	0x24000734
 8001dbc:	2400073c 	.word	0x2400073c
 8001dc0:	24000208 	.word	0x24000208
 8001dc4:	24000754 	.word	0x24000754
 8001dc8:	24000200 	.word	0x24000200
 8001dcc:	24006a74 	.word	0x24006a74
 8001dd0:	24006274 	.word	0x24006274
 8001dd4:	46000200 	.word	0x46000200
 8001dd8:	39000000 	.word	0x39000000
 8001ddc:	24000758 	.word	0x24000758
 8001de0:	2400075c 	.word	0x2400075c
 8001de4:	40c90fdb 	.word	0x40c90fdb
 8001de8:	24007284 	.word	0x24007284

08001dec <SDR_2R_toC_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time
  while(blkCnt)
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	d028      	beq.n	8001e42 <SDR_2R_toC_f32+0x56>
 8001df0:	3010      	adds	r0, #16
 8001df2:	3110      	adds	r1, #16
 8001df4:	3220      	adds	r2, #32
  {
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001df6:	f850 cc10 	ldr.w	ip, [r0, #-16]
  while(blkCnt)
 8001dfa:	3110      	adds	r1, #16
 8001dfc:	3010      	adds	r0, #16
 8001dfe:	3b01      	subs	r3, #1
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001e00:	f842 cc20 	str.w	ip, [r2, #-32]
  while(blkCnt)
 8001e04:	f102 0220 	add.w	r2, r2, #32
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001e08:	f851 cc20 	ldr.w	ip, [r1, #-32]
 8001e0c:	f842 cc3c 	str.w	ip, [r2, #-60]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001e10:	f850 cc1c 	ldr.w	ip, [r0, #-28]
 8001e14:	f842 cc38 	str.w	ip, [r2, #-56]
 8001e18:	f851 cc1c 	ldr.w	ip, [r1, #-28]
 8001e1c:	f842 cc34 	str.w	ip, [r2, #-52]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001e20:	f850 cc18 	ldr.w	ip, [r0, #-24]
 8001e24:	f842 cc30 	str.w	ip, [r2, #-48]
 8001e28:	f851 cc18 	ldr.w	ip, [r1, #-24]
 8001e2c:	f842 cc2c 	str.w	ip, [r2, #-44]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001e30:	f850 cc14 	ldr.w	ip, [r0, #-20]
 8001e34:	f842 cc28 	str.w	ip, [r2, #-40]
 8001e38:	f851 cc14 	ldr.w	ip, [r1, #-20]
 8001e3c:	f842 cc24 	str.w	ip, [r2, #-36]
  while(blkCnt)
 8001e40:	d1d9      	bne.n	8001df6 <SDR_2R_toC_f32+0xa>
    
    blkCnt--;
  }
}
 8001e42:	4770      	bx	lr

08001e44 <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 8001e44:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <SDR_downconvert_f32+0xd8>)
  float  tmp1, tmp2, tmp3, tmp4, *LOI=LO_R, *LOR=LO_I;
	uint16_t *pt = signal;
	
// loop Unrolling
  blkCnt = BSIZE >> 2u;   // loop unrolling.  Compute 4 outputs at a time
  while(blkCnt)
 8001e46:	3110      	adds	r1, #16
 8001e48:	3210      	adds	r2, #16
 8001e4a:	3008      	adds	r0, #8
    tmp2=((*(pt+1)-offset)) / 2048.f;
	tmp1 = tmp2;
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3 = tmp4;
#else
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001e4c:	eddf 5a34 	vldr	s11, [pc, #208]	; 8001f20 <SDR_downconvert_f32+0xdc>
 8001e50:	f503 6c00 	add.w	ip, r3, #2048	; 0x800
{
 8001e54:	b510      	push	{r4, lr}
 8001e56:	4c33      	ldr	r4, [pc, #204]	; (8001f24 <SDR_downconvert_f32+0xe0>)
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001e58:	f830 ec08 	ldrh.w	lr, [r0, #-8]
  while(blkCnt)
 8001e5c:	3110      	adds	r1, #16
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3=((*(pt+2)-offset)) / 2048.f;
#endif


		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001e5e:	ed13 5a04 	vldr	s10, [r3, #-16]
  while(blkCnt)
 8001e62:	3410      	adds	r4, #16
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001e64:	ee06 ea10 	vmov	s12, lr
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001e68:	f830 ec06 	ldrh.w	lr, [r0, #-6]
  while(blkCnt)
 8001e6c:	3310      	adds	r3, #16
 8001e6e:	3210      	adds	r2, #16
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001e70:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001e74:	ee06 ea90 	vmov	s13, lr
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001e78:	f830 ec02 	ldrh.w	lr, [r0, #-2]
  while(blkCnt)
 8001e7c:	4563      	cmp	r3, ip
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001e7e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  while(blkCnt)
 8001e82:	f100 0008 	add.w	r0, r0, #8
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001e86:	ee36 6a40 	vsub.f32	s12, s12, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001e8a:	ee07 ea90 	vmov	s15, lr
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001e8e:	f830 ec0c 	ldrh.w	lr, [r0, #-12]
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001e92:	ee76 6ac0 	vsub.f32	s13, s13, s0
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001e96:	ee26 6a25 	vmul.f32	s12, s12, s11
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001e9a:	ee07 ea10 	vmov	s14, lr
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001ea2:	ee66 6aa5 	vmul.f32	s13, s13, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001ea6:	ee25 5a06 	vmul.f32	s10, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001eaa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001eae:	ee77 7ac0 	vsub.f32	s15, s15, s0
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001eb2:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 8001eb6:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001eba:	ee37 7a40 	vsub.f32	s14, s14, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001ebe:	ee67 7aa5 	vmul.f32	s15, s15, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001ec2:	ee25 6a06 	vmul.f32	s12, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001ec6:	ee27 7a25 	vmul.f32	s14, s14, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001eca:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		 *zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 8001ece:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8001ed2:	ee26 6a26 	vmul.f32	s12, s12, s13
 8001ed6:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 8001eda:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 8001ede:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001ee2:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		 *zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 8001ee6:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8001eea:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001eee:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 8001ef2:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 8001ef6:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001efa:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001efe:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8001f02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f06:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 8001f0a:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 8001f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f12:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
  while(blkCnt)
 8001f16:	d19f      	bne.n	8001e58 <SDR_downconvert_f32+0x14>
     pt += 4;
     blkCnt--;
	}	
}
 8001f18:	bd10      	pop	{r4, pc}
 8001f1a:	bf00      	nop
 8001f1c:	24006274 	.word	0x24006274
 8001f20:	3a000000 	.word	0x3a000000
 8001f24:	24006a74 	.word	0x24006a74

08001f28 <SDR_float_to_DAC_audio>:
  short *AudioBuffer;

  AudioBuffer = pDst;

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 8001f28:	0893      	lsrs	r3, r2, #2
  while(blkCnt--)
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d058      	beq.n	8001fe0 <SDR_float_to_DAC_audio+0xb8>
 8001f2e:	f103 3cff 	add.w	ip, r3, #4294967295
  {
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f32:	4b36      	ldr	r3, [pc, #216]	; (800200c <SDR_float_to_DAC_audio+0xe4>)
 8001f34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f38:	fa1f fc8c 	uxth.w	ip, ip
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	f100 0310 	add.w	r3, r0, #16
 8001f44:	3020      	adds	r0, #32
 8001f46:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
 8001f4a:	f101 0008 	add.w	r0, r1, #8
{
 8001f4e:	b500      	push	{lr}
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f50:	eeb0 5a47 	vmov.f32	s10, s14
 8001f54:	ed53 5a04 	vldr	s11, [r3, #-16]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f58:	ed13 6a03 	vldr	s12, [r3, #-12]
  while(blkCnt--)
 8001f5c:	3008      	adds	r0, #8
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f5e:	ed53 6a02 	vldr	s13, [r3, #-8]
  while(blkCnt--)
 8001f62:	3310      	adds	r3, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f64:	eea5 5aa7 	vfma.f32	s10, s11, s15
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f68:	ed53 4a05 	vldr	s9, [r3, #-20]	; 0xffffffec
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f6c:	eef0 5a47 	vmov.f32	s11, s14
  while(blkCnt--)
 8001f70:	459c      	cmp	ip, r3
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f72:	eee7 5a86 	vfma.f32	s11, s15, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f76:	eeb0 6a47 	vmov.f32	s12, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f7a:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f7e:	eea7 6aa6 	vfma.f32	s12, s15, s13
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f82:	eef0 6a47 	vmov.f32	s13, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f86:	ee15 ea10 	vmov	lr, s10
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f8a:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f8e:	f820 ec10 	strh.w	lr, [r0, #-16]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f92:	eee7 6aa4 	vfma.f32	s13, s15, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f96:	ee15 ea90 	vmov	lr, s11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f9a:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001f9e:	f820 ec0e 	strh.w	lr, [r0, #-14]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001fa2:	ee16 ea10 	vmov	lr, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001fa6:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001faa:	f820 ec0c 	strh.w	lr, [r0, #-12]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001fae:	ee16 ea90 	vmov	lr, s13
 8001fb2:	f820 ec0a 	strh.w	lr, [r0, #-10]
  while(blkCnt--)
 8001fb6:	d1cb      	bne.n	8001f50 <SDR_float_to_DAC_audio+0x28>
	}	

  // SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
  SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 8001fb8:	0093      	lsls	r3, r2, #2
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001fba:	f001 021f 	and.w	r2, r1, #31
 8001fbe:	441a      	add	r2, r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001fc0:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001fc4:	4812      	ldr	r0, [pc, #72]	; (8002010 <SDR_float_to_DAC_audio+0xe8>)
 8001fc6:	440a      	add	r2, r1
 8001fc8:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001fcc:	3120      	adds	r1, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8001fce:	1a53      	subs	r3, r2, r1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	dcf9      	bgt.n	8001fc8 <SDR_float_to_DAC_audio+0xa0>
 8001fd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001fd8:	f3bf 8f6f 	isb	sy
#endif
return;
}	
 8001fdc:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( dsize > 0 ) { 
 8001fe0:	0093      	lsls	r3, r2, #2
 8001fe2:	b902      	cbnz	r2, 8001fe6 <SDR_float_to_DAC_audio+0xbe>
 8001fe4:	4770      	bx	lr
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001fe6:	f001 021f 	and.w	r2, r1, #31
 8001fea:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8001fec:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001ff0:	4807      	ldr	r0, [pc, #28]	; (8002010 <SDR_float_to_DAC_audio+0xe8>)
 8001ff2:	440a      	add	r2, r1
 8001ff4:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001ff8:	3120      	adds	r1, #32
      } while ( op_size > 0 );
 8001ffa:	1a53      	subs	r3, r2, r1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	dcf9      	bgt.n	8001ff4 <SDR_float_to_DAC_audio+0xcc>
 8002000:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002004:	f3bf 8f6f 	isb	sy
return;
 8002008:	e7ec      	b.n	8001fe4 <SDR_float_to_DAC_audio+0xbc>
 800200a:	bf00      	nop
 800200c:	2400d9cc 	.word	0x2400d9cc
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <SDR_memcpy_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time.    
  while(blkCnt > 0u)
 8002014:	0892      	lsrs	r2, r2, #2
 8002016:	d016      	beq.n	8002046 <SDR_memcpy_f32+0x32>
 8002018:	3110      	adds	r1, #16
 800201a:	3010      	adds	r0, #16
  {
    /* Copy and then store the results in the destination buffer */
    in1 = *pSrc++;  *pDst++ = in1;
 800201c:	f851 3c10 	ldr.w	r3, [r1, #-16]
  while(blkCnt > 0u)
 8002020:	3110      	adds	r1, #16
 8002022:	3a01      	subs	r2, #1
 8002024:	f100 0010 	add.w	r0, r0, #16
    in1 = *pSrc++;  *pDst++ = in1;
 8002028:	f840 3c20 	str.w	r3, [r0, #-32]
    in2 = *pSrc++;  *pDst++ = in2;
 800202c:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8002030:	f840 3c1c 	str.w	r3, [r0, #-28]
    in3 = *pSrc++;  *pDst++ = in3;
 8002034:	f851 3c18 	ldr.w	r3, [r1, #-24]
 8002038:	f840 3c18 	str.w	r3, [r0, #-24]
    in4 = *pSrc++;  *pDst++ = in4;
 800203c:	f851 3c14 	ldr.w	r3, [r1, #-20]
 8002040:	f840 3c14 	str.w	r3, [r0, #-20]
  while(blkCnt > 0u)
 8002044:	d1ea      	bne.n	800201c <SDR_memcpy_f32+0x8>
		
// Decrement the loop counter
    blkCnt--;
  }
}
 8002046:	4770      	bx	lr

08002048 <SDR_mirror_LSB>:
{
  uint32_t blkCnt;            /* loop counter */
  float *pbR, *pbI, *peR, *peI;
	
// loop Unrolling */
  blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 8002048:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 800204a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

//  Compute 4 outputs at a time.    
	while(blkCnt--)
 800204e:	2a01      	cmp	r2, #1
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8002050:	440b      	add	r3, r1
	while(blkCnt--)
 8002052:	f1a2 0102 	sub.w	r1, r2, #2
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8002056:	ea4f 03c3 	mov.w	r3, r3, lsl #3
	while(blkCnt--)
 800205a:	d036      	beq.n	80020ca <SDR_mirror_LSB+0x82>
 800205c:	f1a3 0220 	sub.w	r2, r3, #32
 8002060:	f1a3 0c1c 	sub.w	ip, r3, #28
 8002064:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8002068:	4402      	add	r2, r0
 800206a:	4460      	add	r0, ip
	{
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 800206c:	f8d2 c020 	ldr.w	ip, [r2, #32]
	while(blkCnt--)
 8002070:	3a20      	subs	r2, #32
 8002072:	3820      	subs	r0, #32
 8002074:	3901      	subs	r1, #1
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002076:	f843 cc20 	str.w	ip, [r3, #-32]
	while(blkCnt--)
 800207a:	3320      	adds	r3, #32
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 800207c:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
	while(blkCnt--)
 8002080:	f1b1 3fff 	cmp.w	r1, #4294967295
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002084:	eef1 7a67 	vneg.f32	s15, s15
 8002088:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 800208c:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
 8002090:	f843 cc38 	str.w	ip, [r3, #-56]
 8002094:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 8002098:	eef1 7a67 	vneg.f32	s15, s15
 800209c:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80020a0:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
 80020a4:	f843 cc30 	str.w	ip, [r3, #-48]
 80020a8:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 80020ac:	eef1 7a67 	vneg.f32	s15, s15
 80020b0:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80020b4:	f8d2 c028 	ldr.w	ip, [r2, #40]	; 0x28
 80020b8:	f843 cc28 	str.w	ip, [r3, #-40]
 80020bc:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 80020c0:	eef1 7a67 	vneg.f32	s15, s15
 80020c4:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 80020c8:	d1d0      	bne.n	800206c <SDR_mirror_LSB+0x24>
	}
}
 80020ca:	4770      	bx	lr

080020cc <SDR_compute_IIR_parms>:
#endif
   r = Qfactor;

   a1 = a2 = b0 = 0.f; 
   r2 = r*r;
   wr = 2.f * cwpitch / rate * myPI;
 80020cc:	492b      	ldr	r1, [pc, #172]	; (800217c <SDR_compute_IIR_parms+0xb0>)
 80020ce:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8002180 <SDR_compute_IIR_parms+0xb4>
 80020d2:	edd1 7a00 	vldr	s15, [r1]
	 float rate = SamplingRate/256; //SamplingRate / decimation
 80020d6:	4a2b      	ldr	r2, [pc, #172]	; (8002184 <SDR_compute_IIR_parms+0xb8>)
   wr = 2.f * cwpitch / rate * myPI;
 80020d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020dc:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8002188 <SDR_compute_IIR_parms+0xbc>
 80020e0:	ed92 7a00 	vldr	s14, [r2]
{
 80020e4:	b508      	push	{r3, lr}
 80020e6:	ed2d 8b06 	vpush	{d8-d10}
   wr = 2.f * cwpitch / rate * myPI;
 80020ea:	eec7 8a87 	vdiv.f32	s17, s15, s14
   r = Qfactor;
 80020ee:	4b27      	ldr	r3, [pc, #156]	; (800218c <SDR_compute_IIR_parms+0xc0>)
 80020f0:	edd3 9a00 	vldr	s19, [r3]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80020f4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   r2 = r*r;
 80020f8:	ee69 aaa9 	vmul.f32	s21, s19, s19
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80020fc:	ee39 aaa9 	vadd.f32	s20, s19, s19
 8002100:	ee3a 9a88 	vadd.f32	s18, s21, s16
										                         // (see the Proakis & Manolakis book)
   a1 = -2.f * r * cosw0;
   a2 = r2;
// b0 is normalized for gain ~ 2dB on all the band
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002104:	ee38 8a69 	vsub.f32	s16, s16, s19
   wr = 2.f * cwpitch / rate * myPI;
 8002108:	ee68 8a80 	vmul.f32	s17, s17, s0
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 800210c:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 8002110:	f010 ff56 	bl	8012fc0 <cos>
 8002114:	ee8a 5a09 	vdiv.f32	s10, s20, s18
   a1 = -2.f * r * cosw0;
 8002118:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <SDR_compute_IIR_parms+0xc4>)
   a2 = r2;
 800211a:	4a1e      	ldr	r2, [pc, #120]	; (8002194 <SDR_compute_IIR_parms+0xc8>)
 800211c:	edc2 aa00 	vstr	s21, [r2]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002120:	eeb0 6b40 	vmov.f64	d6, d0
   a1 = -2.f * r * cosw0;
 8002124:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002128:	ee78 8aa8 	vadd.f32	s17, s17, s17
 800212c:	eeb7 aaca 	vcvt.f64.f32	d10, s20
   a1 = -2.f * r * cosw0;
 8002130:	ee69 7aa7 	vmul.f32	s15, s19, s15
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002134:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002138:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 800213c:	ee25 6b06 	vmul.f64	d6, d5, d6
 8002140:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
   a1 = -2.f * r * cosw0;
 8002144:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002148:	ed83 6a00 	vstr	s12, [r3]
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 800214c:	f010 ff38 	bl	8012fc0 <cos>
 8002150:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 8002154:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002198 <SDR_compute_IIR_parms+0xcc>
 8002158:	4b10      	ldr	r3, [pc, #64]	; (800219c <SDR_compute_IIR_parms+0xd0>)
 800215a:	ee28 7a07 	vmul.f32	s14, s16, s14
 800215e:	eeaa 6b40 	vfms.f64	d6, d10, d0
 8002162:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 8002166:	ecbd 8b06 	vpop	{d8-d10}
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 800216a:	eeb1 5bc6 	vsqrt.f64	d5, d6
 800216e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002172:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8002176:	ed83 7a00 	vstr	s14, [r3]
}
 800217a:	bd08      	pop	{r3, pc}
 800217c:	24009c34 	.word	0x24009c34
 8002180:	44000000 	.word	0x44000000
 8002184:	24007284 	.word	0x24007284
 8002188:	40490fdb 	.word	0x40490fdb
 800218c:	2400727c 	.word	0x2400727c
 8002190:	24009400 	.word	0x24009400
 8002194:	24009404 	.word	0x24009404
 8002198:	3f99999a 	.word	0x3f99999a
 800219c:	24009c2c 	.word	0x24009c2c

080021a0 <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
   static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	 register float x0, y0;
   uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 80021a0:	0889      	lsrs	r1, r1, #2
	
// Compute 4 outputs at a time, loop unrolled for performance     
	 while(blkCnt--)
 80021a2:	2900      	cmp	r1, #0
 80021a4:	d077      	beq.n	8002296 <SDR_CWPeak+0xf6>
 80021a6:	1e4b      	subs	r3, r1, #1
 80021a8:	f8df c104 	ldr.w	ip, [pc, #260]	; 80022b0 <SDR_CWPeak+0x110>
   {  
		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80021ac:	493a      	ldr	r1, [pc, #232]	; (8002298 <SDR_CWPeak+0xf8>)
 80021ae:	3010      	adds	r0, #16
 80021b0:	4a3a      	ldr	r2, [pc, #232]	; (800229c <SDR_CWPeak+0xfc>)
 80021b2:	eddc 2a00 	vldr	s5, [ip]
 80021b6:	ed91 6a00 	vldr	s12, [r1]
 80021ba:	ed92 5a00 	vldr	s10, [r2]
{
 80021be:	b4f0      	push	{r4, r5, r6, r7}
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80021c0:	4c37      	ldr	r4, [pc, #220]	; (80022a0 <SDR_CWPeak+0x100>)
 80021c2:	4f38      	ldr	r7, [pc, #224]	; (80022a4 <SDR_CWPeak+0x104>)
 80021c4:	edd4 4a00 	vldr	s9, [r4]
 80021c8:	4e37      	ldr	r6, [pc, #220]	; (80022a8 <SDR_CWPeak+0x108>)
 80021ca:	4d38      	ldr	r5, [pc, #224]	; (80022ac <SDR_CWPeak+0x10c>)
 80021cc:	eeb1 2a64 	vneg.f32	s4, s9
 80021d0:	ed97 7a00 	vldr	s14, [r7]
 80021d4:	edd6 5a00 	vldr	s11, [r6]
 80021d8:	edd5 6a00 	vldr	s13, [r5]
 80021dc:	ee66 3a47 	vnmul.f32	s7, s12, s14
 80021e0:	ed10 7a04 	vldr	s14, [r0, #-16]
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80021e4:	ee26 4a66 	vnmul.f32	s8, s12, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80021e8:	ed50 7a03 	vldr	s15, [r0, #-12]
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80021ec:	ed50 6a02 	vldr	s13, [r0, #-8]
	 while(blkCnt--)
 80021f0:	3010      	adds	r0, #16
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80021f2:	eee2 3a22 	vfma.f32	s7, s4, s5
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80021f6:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80021fa:	eea2 4a25 	vfma.f32	s8, s4, s11
	 while(blkCnt--)
 80021fe:	3b01      	subs	r3, #1
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002204:	eee7 3a05 	vfma.f32	s7, s14, s10
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002208:	eea3 4a85 	vfma.f32	s8, s7, s10
	   *buf++ = y0;
 800220c:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002210:	ed92 5a00 	vldr	s10, [r2]
 8002214:	ed91 6a00 	vldr	s12, [r1]
 8002218:	ee65 7a27 	vmul.f32	s15, s10, s15
 800221c:	edd4 4a00 	vldr	s9, [r4]
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002220:	ee25 7a26 	vmul.f32	s14, s10, s13
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002224:	ee65 6a03 	vmul.f32	s13, s10, s6
 8002228:	eee6 7a62 	vfms.f32	s15, s12, s5
 800222c:	eea6 7a63 	vfms.f32	s14, s12, s7
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002230:	eeb1 2a64 	vneg.f32	s4, s9
 8002234:	eee4 7ae3 	vfms.f32	s15, s9, s7
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002238:	eea4 7ae7 	vfms.f32	s14, s9, s15
 800223c:	eee6 6a67 	vfms.f32	s13, s12, s15
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002240:	ee65 7a27 	vmul.f32	s15, s10, s15
 8002244:	eee4 7ac4 	vfms.f32	s15, s9, s8
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002248:	eee4 6ac7 	vfms.f32	s13, s9, s14
 800224c:	eef0 2a66 	vmov.f32	s5, s13
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002250:	ee65 6a07 	vmul.f32	s13, s10, s14
 8002254:	eee6 6a44 	vfms.f32	s13, s12, s8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002258:	eeb0 4a67 	vmov.f32	s8, s15
 800225c:	eed6 7a25 	vfnms.f32	s15, s12, s11
 8002260:	eea6 4a65 	vfms.f32	s8, s12, s11
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002264:	ee65 5a22 	vmul.f32	s11, s10, s5
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002268:	eee4 6aa7 	vfma.f32	s13, s9, s15
 800226c:	eee6 5a44 	vfms.f32	s11, s12, s8
	   *buf++ = y0;
 8002270:	ed00 4a07 	vstr	s8, [r0, #-28]	; 0xffffffe4
	   *buf++ = y0;
 8002274:	ed40 6a06 	vstr	s13, [r0, #-24]	; 0xffffffe8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002278:	eee4 5ae6 	vfms.f32	s11, s9, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;
 800227c:	ed40 5a05 	vstr	s11, [r0, #-20]	; 0xffffffec
	 while(blkCnt--)
 8002280:	d1ac      	bne.n	80021dc <SDR_CWPeak+0x3c>
 8002282:	ed87 7a00 	vstr	s14, [r7]
 8002286:	edc6 5a00 	vstr	s11, [r6]
 800228a:	edc5 6a00 	vstr	s13, [r5]
 800228e:	edcc 2a00 	vstr	s5, [ip]
   }
}
 8002292:	bcf0      	pop	{r4, r5, r6, r7}
 8002294:	4770      	bx	lr
 8002296:	4770      	bx	lr
 8002298:	24009404 	.word	0x24009404
 800229c:	24009c2c 	.word	0x24009c2c
 80022a0:	24009400 	.word	0x24009400
 80022a4:	2400074c 	.word	0x2400074c
 80022a8:	24000748 	.word	0x24000748
 80022ac:	24000750 	.word	0x24000750
 80022b0:	24000744 	.word	0x24000744

080022b4 <SDR_demodAM_AGC>:
// ------------------------------------------------------

// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 80022b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

	  if(pk < audiotmp)
	  {
			pk = audiotmp;
		  hangcnt = Hcount[AM]; 
 80022b8:	4b3c      	ldr	r3, [pc, #240]	; (80023ac <SDR_demodAM_AGC+0xf8>)
{
 80022ba:	b082      	sub	sp, #8
 80022bc:	4f3c      	ldr	r7, [pc, #240]	; (80023b0 <SDR_demodAM_AGC+0xfc>)
 80022be:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
 80022c2:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80023d0 <SDR_demodAM_AGC+0x11c>
		  hangcnt = Hcount[AM]; 
 80022c6:	f8b3 e000 	ldrh.w	lr, [r3]
 80022ca:	683a      	ldr	r2, [r7, #0]

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80022cc:	eddf 4a39 	vldr	s9, [pc, #228]	; 80023b4 <SDR_demodAM_AGC+0x100>
		
	  if(hangcnt == 0)
		  pk  *= Decay[AM];
		
// DC removal filter -----------------------
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80022d0:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80023b8 <SDR_demodAM_AGC+0x104>
 80022d4:	ed98 7a00 	vldr	s14, [r8]
 80022d8:	4b38      	ldr	r3, [pc, #224]	; (80023bc <SDR_demodAM_AGC+0x108>)
 80022da:	4d39      	ldr	r5, [pc, #228]	; (80023c0 <SDR_demodAM_AGC+0x10c>)
 80022dc:	4c39      	ldr	r4, [pc, #228]	; (80023c4 <SDR_demodAM_AGC+0x110>)
		  pk  *= Decay[AM];
 80022de:	4e3a      	ldr	r6, [pc, #232]	; (80023c8 <SDR_demodAM_AGC+0x114>)
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80022e0:	edd0 7a01 	vldr	s15, [r0, #4]
 80022e4:	edd0 6a00 	vldr	s13, [r0]
 80022e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
    audiotmp /= max(pk, AgcThreshold);  
 80022ec:	ed95 6a00 	vldr	s12, [r5]
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80022f0:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80022f4:	edcd 7a01 	vstr	s15, [sp, #4]
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 80022f8:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 80022fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = sqrtf(in);
 8002304:	bfa8      	it	ge
 8002306:	eef1 5ae7 	vsqrtge.f32	s11, s15
	  if(pk < audiotmp)
 800230a:	edd3 7a00 	vldr	s15, [r3]
      *pOut = 0.0f;
 800230e:	bfb8      	it	lt
 8002310:	eef0 5a64 	vmovlt.f32	s11, s9
 8002314:	eef4 7ae5 	vcmpe.f32	s15, s11
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	d504      	bpl.n	8002328 <SDR_demodAM_AGC+0x74>
			pk = audiotmp;
 800231e:	eef0 7a65 	vmov.f32	s15, s11
		  hangcnt = Hcount[AM]; 
 8002322:	4672      	mov	r2, lr
			pk = audiotmp;
 8002324:	edc3 5a00 	vstr	s11, [r3]
    audiotmp /= max(pk, AgcThreshold);  
 8002328:	fe87 6a86 	vmaxnm.f32	s12, s15, s12
 800232c:	eec5 6a86 	vdiv.f32	s13, s11, s12
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002330:	eef0 5a66 	vmov.f32	s11, s13
    audiotmp /= max(pk, AgcThreshold);  
 8002334:	edc4 6a00 	vstr	s13, [r4]
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002338:	eee7 5a05 	vfma.f32	s11, s14, s10
	  if(hangcnt == 0)
 800233c:	b9da      	cbnz	r2, 8002376 <SDR_demodAM_AGC+0xc2>
		  pk  *= Decay[AM];
 800233e:	edd6 6a00 	vldr	s13, [r6]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002342:	3008      	adds	r0, #8
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002344:	edcd 5a00 	vstr	s11, [sp]
		  pk  *= Decay[AM];
 8002348:	ee66 6aa7 	vmul.f32	s13, s13, s15
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800234c:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002350:	4584      	cmp	ip, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002352:	ee77 7ac7 	vsub.f32	s15, s15, s14
	  wold = w;
 8002356:	ed9d 7a00 	vldr	s14, [sp]
		  pk  *= Decay[AM];
 800235a:	edc3 6a00 	vstr	s13, [r3]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800235e:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 8002362:	d1bd      	bne.n	80022e0 <SDR_demodAM_AGC+0x2c>
// -----------------------------------------
	}
    PeakAudioValue=pk;
 8002364:	4919      	ldr	r1, [pc, #100]	; (80023cc <SDR_demodAM_AGC+0x118>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	603a      	str	r2, [r7, #0]
 800236a:	ed88 7a00 	vstr	s14, [r8]
 800236e:	600b      	str	r3, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
}
 8002370:	b002      	add	sp, #8
 8002372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002376:	edcd 5a00 	vstr	s11, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 800237a:	3008      	adds	r0, #8
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800237c:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002380:	4584      	cmp	ip, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002382:	ee77 7ac7 	vsub.f32	s15, s15, s14
	  wold = w;
 8002386:	ed9d 7a00 	vldr	s14, [sp]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800238a:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 800238e:	d1a7      	bne.n	80022e0 <SDR_demodAM_AGC+0x2c>
    PeakAudioValue=pk;
 8002390:	490e      	ldr	r1, [pc, #56]	; (80023cc <SDR_demodAM_AGC+0x118>)
	if(hangcnt > 0)  hangcnt--;
 8002392:	2a00      	cmp	r2, #0
    PeakAudioValue=pk;
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	603a      	str	r2, [r7, #0]
 8002398:	ed88 7a00 	vstr	s14, [r8]
 800239c:	600b      	str	r3, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
 800239e:	dd01      	ble.n	80023a4 <SDR_demodAM_AGC+0xf0>
 80023a0:	3a01      	subs	r2, #1
 80023a2:	603a      	str	r2, [r7, #0]
}
 80023a4:	b002      	add	sp, #8
 80023a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023aa:	bf00      	nop
 80023ac:	24006258 	.word	0x24006258
 80023b0:	2400c504 	.word	0x2400c504
 80023b4:	00000000 	.word	0x00000000
 80023b8:	3f75c28f 	.word	0x3f75c28f
 80023bc:	2400c840 	.word	0x2400c840
 80023c0:	24001814 	.word	0x24001814
 80023c4:	24009c28 	.word	0x24009c28
 80023c8:	24002030 	.word	0x24002030
 80023cc:	24007278 	.word	0x24007278
 80023d0:	24000740 	.word	0x24000740

080023d4 <SDR_demodSSB_CW_AGC>:
//---------------------------------------------------------------------------
// SSB and CW demodulation with AGC
void SDR_demodSSB_CW_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 80023d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  if(pk < sav)
	  {
			pk = sav;
      if(CurrentMode == CW) hangcnt = Hcount[CW];
      else
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80023d8:	4b3a      	ldr	r3, [pc, #232]	; (80024c4 <SDR_demodSSB_CW_AGC+0xf0>)
 80023da:	f241 0e04 	movw	lr, #4100	; 0x1004
 80023de:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80024dc <SDR_demodSSB_CW_AGC+0x108>
	  if(pk < sav)
 80023e2:	4a39      	ldr	r2, [pc, #228]	; (80024c8 <SDR_demodSSB_CW_AGC+0xf4>)
 80023e4:	4486      	add	lr, r0
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80023e6:	889f      	ldrh	r7, [r3, #4]
 80023e8:	885e      	ldrh	r6, [r3, #2]
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80023ea:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 80023ee:	1d03      	adds	r3, r0, #4
	  if(pk < sav)
 80023f0:	edd2 7a00 	vldr	s15, [r2]
 80023f4:	f8d8 0000 	ldr.w	r0, [r8]
 80023f8:	4d34      	ldr	r5, [pc, #208]	; (80024cc <SDR_demodSSB_CW_AGC+0xf8>)
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80023fa:	4c35      	ldr	r4, [pc, #212]	; (80024d0 <SDR_demodSSB_CW_AGC+0xfc>)
		
	  if(hangcnt == 0)
    {  
      if(CurrentMode == CW) pk  *= Decay[CW];
      else
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 80023fc:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 80024e0 <SDR_demodSSB_CW_AGC+0x10c>
 8002400:	e014      	b.n	800242c <SDR_demodSSB_CW_AGC+0x58>
      if(CurrentMode == CW) pk  *= Decay[CW];
 8002402:	f894 c000 	ldrb.w	ip, [r4]
 8002406:	f1bc 0f03 	cmp.w	ip, #3
 800240a:	d052      	beq.n	80024b2 <SDR_demodSSB_CW_AGC+0xde>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 800240c:	f1bc 0f01 	cmp.w	ip, #1
 8002410:	ed92 7a00 	vldr	s14, [r2]
 8002414:	bf0c      	ite	eq
 8002416:	edda 7a01 	vldreq	s15, [sl, #4]
 800241a:	edda 7a02 	vldrne	s15, [sl, #8]
 800241e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002422:	edc2 7a00 	vstr	s15, [r2]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002426:	3308      	adds	r3, #8
 8002428:	459e      	cmp	lr, r3
 800242a:	d02d      	beq.n	8002488 <SDR_demodSSB_CW_AGC+0xb4>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 800242c:	ed93 7a00 	vldr	s14, [r3]
 8002430:	ed53 6a01 	vldr	s13, [r3, #-4]
 8002434:	ee27 7a07 	vmul.f32	s14, s14, s14
 8002438:	eea6 7aa6 	vfma.f32	s14, s13, s13
      *pOut = sqrtf(in);
 800243c:	eeb1 6ac7 	vsqrt.f32	s12, s14
	  if(pk < sav)
 8002440:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8002444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002448:	dd0f      	ble.n	800246a <SDR_demodSSB_CW_AGC+0x96>
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 800244a:	f894 c000 	ldrb.w	ip, [r4]
			pk = sav;
 800244e:	ed82 6a00 	vstr	s12, [r2]
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002452:	f1bc 0f03 	cmp.w	ip, #3
 8002456:	d026      	beq.n	80024a6 <SDR_demodSSB_CW_AGC+0xd2>
 8002458:	eef0 7a46 	vmov.f32	s15, s12
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 800245c:	f1bc 0f01 	cmp.w	ip, #1
 8002460:	bf0c      	ite	eq
 8002462:	4630      	moveq	r0, r6
 8002464:	4638      	movne	r0, r7
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 8002466:	ed53 6a01 	vldr	s13, [r3, #-4]
 800246a:	ed95 7a00 	vldr	s14, [r5]
 800246e:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8002472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002476:	eca1 7a01 	vstmia	r1!, {s14}
	  if(hangcnt == 0)
 800247a:	2800      	cmp	r0, #0
 800247c:	d0c1      	beq.n	8002402 <SDR_demodSSB_CW_AGC+0x2e>
	for(k=j=0; k<BSIZE*2; k+=2)
 800247e:	3308      	adds	r3, #8
    }  
	}
	PeakAudioValue=pk;
 8002480:	edd2 7a00 	vldr	s15, [r2]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002484:	459e      	cmp	lr, r3
 8002486:	d1d1      	bne.n	800242c <SDR_demodSSB_CW_AGC+0x58>
 8002488:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <SDR_demodSSB_CW_AGC+0x100>)
	if(hangcnt > 0)  hangcnt--;
 800248a:	2800      	cmp	r0, #0
	PeakAudioValue=pk;
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <SDR_demodSSB_CW_AGC+0x104>)
 800248e:	f8c8 0000 	str.w	r0, [r8]
 8002492:	ed82 6a00 	vstr	s12, [r2]
 8002496:	edc3 7a00 	vstr	s15, [r3]
	if(hangcnt > 0)  hangcnt--;
 800249a:	dd02      	ble.n	80024a2 <SDR_demodSSB_CW_AGC+0xce>
 800249c:	3801      	subs	r0, #1
 800249e:	f8c8 0000 	str.w	r0, [r8]
}
 80024a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024a6:	eef0 7a46 	vmov.f32	s15, s12
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 80024aa:	ed53 6a01 	vldr	s13, [r3, #-4]
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80024ae:	4648      	mov	r0, r9
 80024b0:	e7db      	b.n	800246a <SDR_demodSSB_CW_AGC+0x96>
      if(CurrentMode == CW) pk  *= Decay[CW];
 80024b2:	ed92 7a00 	vldr	s14, [r2]
 80024b6:	edda 7a03 	vldr	s15, [sl, #12]
 80024ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024be:	edc2 7a00 	vstr	s15, [r2]
 80024c2:	e7b0      	b.n	8002426 <SDR_demodSSB_CW_AGC+0x52>
 80024c4:	24006258 	.word	0x24006258
 80024c8:	2400c840 	.word	0x2400c840
 80024cc:	24001814 	.word	0x24001814
 80024d0:	2400202c 	.word	0x2400202c
 80024d4:	24000738 	.word	0x24000738
 80024d8:	24007278 	.word	0x24007278
 80024dc:	2400c504 	.word	0x2400c504
 80024e0:	24002030 	.word	0x24002030

080024e4 <pack_call>:
			return m;
		}

		static long
		unsigned int pack_call(char const *callsign)
		{
 80024e4:	b510      	push	{r4, lr}
			unsigned int i;
			long unsigned int n;
			char call6[6];
			memset(call6,' ',sizeof(call6));
 80024e6:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
		{
 80024ea:	b082      	sub	sp, #8
 80024ec:	4604      	mov	r4, r0
			memset(call6,' ',sizeof(call6));
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	f8ad 3004 	strh.w	r3, [sp, #4]
			// callsign is 6 characters in length. Exactly.
			size_t call_len = strlen(callsign);
 80024f4:	f7fd fef4 	bl	80002e0 <strlen>
			if( call_len > 6 ) {
 80024f8:	2806      	cmp	r0, #6
 80024fa:	f200 808f 	bhi.w	800261c <pack_call+0x138>
				return 0;
			}
			if( isdigit((int) callsign[2]) ) {
 80024fe:	78a2      	ldrb	r2, [r4, #2]
 8002500:	4b5b      	ldr	r3, [pc, #364]	; (8002670 <pack_call+0x18c>)
 8002502:	5cd2      	ldrb	r2, [r2, r3]
 8002504:	0752      	lsls	r2, r2, #29
 8002506:	d57c      	bpl.n	8002602 <pack_call+0x11e>
				for (i=0; i<call_len; i++) {
 8002508:	b120      	cbz	r0, 8002514 <pack_call+0x30>
					call6[i]=callsign[i];
 800250a:	4602      	mov	r2, r0
 800250c:	4621      	mov	r1, r4
 800250e:	4668      	mov	r0, sp
 8002510:	f00d fbbc 	bl	800fc8c <memcpy>
				for (i=1; i<call_len+1; i++) {
					call6[i]=callsign[i-1];
				}
			}
			for (i=0; i<6; i++) {
				call6[i]=get_callsign_character_code(call6[i]);
 8002514:	f89d 3000 	ldrb.w	r3, [sp]
			if( ch >=48 && ch <=57 ) { //0-9
 8002518:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800251c:	fa5f fe8c 	uxtb.w	lr, ip
 8002520:	f1be 0f09 	cmp.w	lr, #9
 8002524:	d908      	bls.n	8002538 <pack_call+0x54>
			if( ch == 32 ) {  //space
 8002526:	2b20      	cmp	r3, #32
 8002528:	f000 809a 	beq.w	8002660 <pack_call+0x17c>
			if( ch >= 65 && ch <= 90 ) { //A-Z
 800252c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002530:	2a19      	cmp	r2, #25
 8002532:	d976      	bls.n	8002622 <pack_call+0x13e>
			return -1;
 8002534:	f04f 0eff 	mov.w	lr, #255	; 0xff
				call6[i]=get_callsign_character_code(call6[i]);
 8002538:	f89d 3001 	ldrb.w	r3, [sp, #1]
			if( ch >=48 && ch <=57 ) { //0-9
 800253c:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8002540:	fa5f f48c 	uxtb.w	r4, ip
 8002544:	2c09      	cmp	r4, #9
 8002546:	d907      	bls.n	8002558 <pack_call+0x74>
			if( ch == 32 ) {  //space
 8002548:	2b20      	cmp	r3, #32
 800254a:	f000 8087 	beq.w	800265c <pack_call+0x178>
			if( ch >= 65 && ch <= 90 ) { //A-Z
 800254e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002552:	2a19      	cmp	r2, #25
 8002554:	d979      	bls.n	800264a <pack_call+0x166>
			return -1;
 8002556:	24ff      	movs	r4, #255	; 0xff
				call6[i]=get_callsign_character_code(call6[i]);
 8002558:	f89d 3002 	ldrb.w	r3, [sp, #2]
			if( ch >=48 && ch <=57 ) { //0-9
 800255c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	2a09      	cmp	r2, #9
 8002564:	d906      	bls.n	8002574 <pack_call+0x90>
			if( ch == 32 ) {  //space
 8002566:	2b20      	cmp	r3, #32
 8002568:	d076      	beq.n	8002658 <pack_call+0x174>
			if( ch >= 65 && ch <= 90 ) { //A-Z
 800256a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800256e:	2a19      	cmp	r2, #25
 8002570:	d968      	bls.n	8002644 <pack_call+0x160>
			return -1;
 8002572:	22ff      	movs	r2, #255	; 0xff
				call6[i]=get_callsign_character_code(call6[i]);
 8002574:	f89d 1003 	ldrb.w	r1, [sp, #3]
			if( ch >=48 && ch <=57 ) { //0-9
 8002578:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b09      	cmp	r3, #9
 8002580:	d906      	bls.n	8002590 <pack_call+0xac>
			if( ch == 32 ) {  //space
 8002582:	2920      	cmp	r1, #32
 8002584:	d066      	beq.n	8002654 <pack_call+0x170>
			if( ch >= 65 && ch <= 90 ) { //A-Z
 8002586:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 800258a:	2b19      	cmp	r3, #25
 800258c:	d956      	bls.n	800263c <pack_call+0x158>
			return -1;
 800258e:	23ff      	movs	r3, #255	; 0xff
				call6[i]=get_callsign_character_code(call6[i]);
 8002590:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if( ch >=48 && ch <=57 ) { //0-9
 8002594:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 8002598:	b2c9      	uxtb	r1, r1
 800259a:	2909      	cmp	r1, #9
 800259c:	d906      	bls.n	80025ac <pack_call+0xc8>
			if( ch == 32 ) {  //space
 800259e:	2820      	cmp	r0, #32
 80025a0:	d061      	beq.n	8002666 <pack_call+0x182>
			if( ch >= 65 && ch <= 90 ) { //A-Z
 80025a2:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 80025a6:	2919      	cmp	r1, #25
 80025a8:	d940      	bls.n	800262c <pack_call+0x148>
			return -1;
 80025aa:	21ff      	movs	r1, #255	; 0xff
				call6[i]=get_callsign_character_code(call6[i]);
 80025ac:	f89d c005 	ldrb.w	ip, [sp, #5]
			if( ch >=48 && ch <=57 ) { //0-9
 80025b0:	f1ac 0030 	sub.w	r0, ip, #48	; 0x30
 80025b4:	b2c0      	uxtb	r0, r0
 80025b6:	2809      	cmp	r0, #9
 80025b8:	d907      	bls.n	80025ca <pack_call+0xe6>
			if( ch == 32 ) {  //space
 80025ba:	f1bc 0f20 	cmp.w	ip, #32
 80025be:	d054      	beq.n	800266a <pack_call+0x186>
			if( ch >= 65 && ch <= 90 ) { //A-Z
 80025c0:	f1ac 0041 	sub.w	r0, ip, #65	; 0x41
 80025c4:	2819      	cmp	r0, #25
 80025c6:	d935      	bls.n	8002634 <pack_call+0x150>
			return -1;
 80025c8:	20ff      	movs	r0, #255	; 0xff
			}
			n = call6[0];
			n = n*36+call6[1];
 80025ca:	f04f 0c24 	mov.w	ip, #36	; 0x24
			n = n*10+call6[2];
			n = n*27+call6[3]-10;
 80025ce:	3b0a      	subs	r3, #10
			n = n*27+call6[4]-10;
 80025d0:	390a      	subs	r1, #10
			n = n*27+call6[5]-10;
 80025d2:	380a      	subs	r0, #10
			n = n*36+call6[1];
 80025d4:	fb1c 4c0e 	smlabb	ip, ip, lr, r4
			n = n*10+call6[2];
 80025d8:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80025dc:	eb02 024c 	add.w	r2, r2, ip, lsl #1
			n = n*27+call6[3]-10;
 80025e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80025e4:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80025e8:	4413      	add	r3, r2
			n = n*27+call6[4]-10;
 80025ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80025ee:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80025f2:	440b      	add	r3, r1
			n = n*27+call6[5]-10;
 80025f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80025f8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80025fc:	4418      	add	r0, r3
			return n;
		}
 80025fe:	b002      	add	sp, #8
 8002600:	bd10      	pop	{r4, pc}
			} else if( isdigit((int) callsign[1]) ) {
 8002602:	7862      	ldrb	r2, [r4, #1]
 8002604:	5cd3      	ldrb	r3, [r2, r3]
 8002606:	075b      	lsls	r3, r3, #29
 8002608:	d584      	bpl.n	8002514 <pack_call+0x30>
				for (i=1; i<call_len+1; i++) {
 800260a:	2800      	cmp	r0, #0
 800260c:	d082      	beq.n	8002514 <pack_call+0x30>
					call6[i]=callsign[i-1];
 800260e:	4602      	mov	r2, r0
 8002610:	4621      	mov	r1, r4
 8002612:	f10d 0001 	add.w	r0, sp, #1
 8002616:	f00d fb39 	bl	800fc8c <memcpy>
 800261a:	e77b      	b.n	8002514 <pack_call+0x30>
				return 0;
 800261c:	2000      	movs	r0, #0
		}
 800261e:	b002      	add	sp, #8
 8002620:	bd10      	pop	{r4, pc}
				return ch-55;
 8002622:	f1a3 0c37 	sub.w	ip, r3, #55	; 0x37
 8002626:	fa5f fe8c 	uxtb.w	lr, ip
 800262a:	e785      	b.n	8002538 <pack_call+0x54>
 800262c:	f1a0 0137 	sub.w	r1, r0, #55	; 0x37
 8002630:	b2c9      	uxtb	r1, r1
 8002632:	e7bb      	b.n	80025ac <pack_call+0xc8>
 8002634:	f1ac 0037 	sub.w	r0, ip, #55	; 0x37
 8002638:	b2c0      	uxtb	r0, r0
 800263a:	e7c6      	b.n	80025ca <pack_call+0xe6>
 800263c:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 8002640:	b2db      	uxtb	r3, r3
 8002642:	e7a5      	b.n	8002590 <pack_call+0xac>
 8002644:	3b37      	subs	r3, #55	; 0x37
 8002646:	b2da      	uxtb	r2, r3
 8002648:	e794      	b.n	8002574 <pack_call+0x90>
 800264a:	f1a3 0c37 	sub.w	ip, r3, #55	; 0x37
 800264e:	fa5f f48c 	uxtb.w	r4, ip
 8002652:	e781      	b.n	8002558 <pack_call+0x74>
				return 36;
 8002654:	2324      	movs	r3, #36	; 0x24
 8002656:	e79b      	b.n	8002590 <pack_call+0xac>
 8002658:	2224      	movs	r2, #36	; 0x24
 800265a:	e78b      	b.n	8002574 <pack_call+0x90>
 800265c:	2424      	movs	r4, #36	; 0x24
 800265e:	e77b      	b.n	8002558 <pack_call+0x74>
 8002660:	f04f 0e24 	mov.w	lr, #36	; 0x24
 8002664:	e768      	b.n	8002538 <pack_call+0x54>
 8002666:	2124      	movs	r1, #36	; 0x24
 8002668:	e7a0      	b.n	80025ac <pack_call+0xc8>
 800266a:	2024      	movs	r0, #36	; 0x24
 800266c:	e7ad      	b.n	80025ca <pack_call+0xe6>
 800266e:	bf00      	nop
 8002670:	0801d0a1 	.word	0x0801d0a1

08002674 <get_wspr_channel_symbols>:
			memcpy(sym, tmp, sizeof(tmp));
		}

		int
		get_wspr_channel_symbols(char* rawmessage, uint8_t* symbols)
		{
 8002674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					0,0,0,0,1,0,0,1,0,0,1,1,1,0,1,1,0,0,1,1,
					0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,1,0,0,1,1,
					0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,0,0,1,1,0,
					0,0
			};
			int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 8002678:	4abd      	ldr	r2, [pc, #756]	; (8002970 <get_wspr_channel_symbols+0x2fc>)
			char *callsign, *grid, *powstr;
			char grid4[5], message[23];

			memset(message,0,sizeof(char)*23);
 800267a:	2300      	movs	r3, #0
		{
 800267c:	4605      	mov	r5, r0
			int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 800267e:	4614      	mov	r4, r2
		{
 8002680:	ed2d 8b02 	vpush	{d8}
 8002684:	b0ed      	sub	sp, #436	; 0x1b4
 8002686:	af00      	add	r7, sp, #0
			i=0;
			while ( rawmessage[i] != 0 && i<23 ) {
 8002688:	f890 c000 	ldrb.w	ip, [r0]
			memset(message,0,sizeof(char)*23);
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
			int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 800268e:	f107 0634 	add.w	r6, r7, #52	; 0x34
		{
 8002692:	6039      	str	r1, [r7, #0]
			memset(message,0,sizeof(char)*23);
 8002694:	f8c7 302f 	str.w	r3, [r7, #47]	; 0x2f
 8002698:	e9c7 3307 	strd	r3, r3, [r7, #28]
 800269c:	e9c7 3309 	strd	r3, r3, [r7, #36]	; 0x24
			int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 80026a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80026a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80026a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ac:	e886 0003 	stmia.w	r6, {r0, r1}
			while ( rawmessage[i] != 0 && i<23 ) {
 80026b0:	f1bc 0f00 	cmp.w	ip, #0
 80026b4:	d00d      	beq.n	80026d2 <get_wspr_channel_symbols+0x5e>
 80026b6:	f107 021c 	add.w	r2, r7, #28
 80026ba:	1c6b      	adds	r3, r5, #1
 80026bc:	43e8      	mvns	r0, r5
 80026be:	4664      	mov	r4, ip
 80026c0:	e000      	b.n	80026c4 <get_wspr_channel_symbols+0x50>
 80026c2:	b134      	cbz	r4, 80026d2 <get_wspr_channel_symbols+0x5e>
				message[i]=rawmessage[i];
 80026c4:	f802 4b01 	strb.w	r4, [r2], #1
			while ( rawmessage[i] != 0 && i<23 ) {
 80026c8:	f813 4b01 	ldrb.w	r4, [r3], #1
 80026cc:	18c1      	adds	r1, r0, r3
 80026ce:	2917      	cmp	r1, #23
 80026d0:	d1f7      	bne.n	80026c2 <get_wspr_channel_symbols+0x4e>
				i++;
			}

			size_t i1=strcspn(message," ");
 80026d2:	49a8      	ldr	r1, [pc, #672]	; (8002974 <get_wspr_channel_symbols+0x300>)
 80026d4:	f107 001c 	add.w	r0, r7, #28
 80026d8:	f00d ff70 	bl	80105bc <strcspn>
			size_t i2=strcspn(message,"/");
 80026dc:	49a6      	ldr	r1, [pc, #664]	; (8002978 <get_wspr_channel_symbols+0x304>)
			size_t i1=strcspn(message," ");
 80026de:	4604      	mov	r4, r0
			size_t i2=strcspn(message,"/");
 80026e0:	f107 001c 	add.w	r0, r7, #28
 80026e4:	f00d ff6a 	bl	80105bc <strcspn>
			size_t i3=strcspn(message,"<");
 80026e8:	49a4      	ldr	r1, [pc, #656]	; (800297c <get_wspr_channel_symbols+0x308>)
			size_t i2=strcspn(message,"/");
 80026ea:	4606      	mov	r6, r0
			size_t i3=strcspn(message,"<");
 80026ec:	f107 001c 	add.w	r0, r7, #28
 80026f0:	f00d ff64 	bl	80105bc <strcspn>
			size_t mlen=strlen(message);

			// Use the presence and/or absence of "<" and "/" to decide what
			// type of message. No sanity checks! Beware!

			if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 80026f4:	3c04      	subs	r4, #4
			size_t i4=strcspn(message,">");
 80026f6:	49a2      	ldr	r1, [pc, #648]	; (8002980 <get_wspr_channel_symbols+0x30c>)
			size_t i3=strcspn(message,"<");
 80026f8:	4605      	mov	r5, r0
			size_t i4=strcspn(message,">");
 80026fa:	f107 001c 	add.w	r0, r7, #28
 80026fe:	f00d ff5d 	bl	80105bc <strcspn>
 8002702:	4680      	mov	r8, r0
			size_t mlen=strlen(message);
 8002704:	f107 001c 	add.w	r0, r7, #28
 8002708:	f7fd fdea 	bl	80002e0 <strlen>
			if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 800270c:	2c02      	cmp	r4, #2
			size_t mlen=strlen(message);
 800270e:	4603      	mov	r3, r0
			if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 8002710:	d804      	bhi.n	800271c <get_wspr_channel_symbols+0xa8>
 8002712:	4286      	cmp	r6, r0
 8002714:	d102      	bne.n	800271c <get_wspr_channel_symbols+0xa8>
 8002716:	4285      	cmp	r5, r0
 8002718:	f000 813a 	beq.w	8002990 <get_wspr_channel_symbols+0x31c>
				for (i=0; i<4; i++) {
					grid4[i]=get_locator_character_code(*(grid+i));
				}
				m = pack_grid4_power(grid4,power);

			} else if ( i3 == 0 && i4 < mlen ) {
 800271c:	b915      	cbnz	r5, 8002724 <get_wspr_channel_symbols+0xb0>
 800271e:	4598      	cmp	r8, r3
 8002720:	f0c0 8082 	bcc.w	8002828 <get_wspr_channel_symbols+0x1b4>
				for(i=0; i<j-1; i++) {
					grid6[i]=grid[i+1];
				}
				grid6[5]=grid[0];
				n = pack_call(grid6);
			} else if ( i2 < mlen ) {  // just looks for a right slash
 8002724:	429e      	cmp	r6, r3
 8002726:	d307      	bcc.n	8002738 <get_wspr_channel_symbols+0xc4>
				pack_prefix(callsign, &n1, &ng, &nadd);
				ntype=power + 1 + nadd;
				m=128*ng+ntype+64;
				n=n1;
			} else {
				return 0;
 8002728:	2000      	movs	r0, #0

			for (i=0; i < 162; i++) {
				symbols[i] = 2 * channelbits[i] + pr3[i];
			}
			return 1;
		}
 800272a:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 800272e:	46bd      	mov	sp, r7
 8002730:	ecbd 8b02 	vpop	{d8}
 8002734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				callsign = strtok (message," ");
 8002738:	498e      	ldr	r1, [pc, #568]	; (8002974 <get_wspr_channel_symbols+0x300>)
 800273a:	f107 001c 	add.w	r0, r7, #28
 800273e:	f00d ff4f 	bl	80105e0 <strtok>
 8002742:	4604      	mov	r4, r0
 8002744:	4682      	mov	sl, r0
				if( i2==0 || i2>strlen(callsign) ) return 0; //guards against pathological case
 8002746:	2e00      	cmp	r6, #0
 8002748:	d0ee      	beq.n	8002728 <get_wspr_channel_symbols+0xb4>
 800274a:	f7fd fdc9 	bl	80002e0 <strlen>
 800274e:	42b0      	cmp	r0, r6
 8002750:	d3ea      	bcc.n	8002728 <get_wspr_channel_symbols+0xb4>
				powstr = strtok (NULL," ");
 8002752:	4988      	ldr	r1, [pc, #544]	; (8002974 <get_wspr_channel_symbols+0x300>)
 8002754:	2000      	movs	r0, #0
 8002756:	f00d ff43 	bl	80105e0 <strtok>
				int power = atoi (powstr);
 800275a:	f00d fa69 	bl	800fc30 <atoi>
				if( power < 0 ) power=0;
 800275e:	283c      	cmp	r0, #60	; 0x3c
 8002760:	4605      	mov	r5, r0
				power=power+nu[power%10];
 8002762:	4b88      	ldr	r3, [pc, #544]	; (8002984 <get_wspr_channel_symbols+0x310>)
 8002764:	bfa8      	it	ge
 8002766:	253c      	movge	r5, #60	; 0x3c
			size_t i1 = strcspn(callsign,"/");
 8002768:	4983      	ldr	r1, [pc, #524]	; (8002978 <get_wspr_channel_symbols+0x304>)
 800276a:	4620      	mov	r0, r4
 800276c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
				power=power+nu[power%10];
 8002770:	fba3 2305 	umull	r2, r3, r3, r5
 8002774:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002778:	08db      	lsrs	r3, r3, #3
 800277a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800277e:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
 8002782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002786:	441d      	add	r5, r3
			size_t i1 = strcspn(callsign,"/");
 8002788:	f00d ff18 	bl	80105bc <strcspn>
			if( callsign[i1+2] == 0 ) {
 800278c:	f100 0802 	add.w	r8, r0, #2
			size_t i1 = strcspn(callsign,"/");
 8002790:	4606      	mov	r6, r0
			if( callsign[i1+2] == 0 ) {
 8002792:	f814 3008 	ldrb.w	r3, [r4, r8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8442 	beq.w	8003020 <get_wspr_channel_symbols+0x9ac>
			} else if( callsign[i1+3]==0 ) {
 800279c:	eb04 0900 	add.w	r9, r4, r0
 80027a0:	f899 3003 	ldrb.w	r3, [r9, #3]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f040 8525 	bne.w	80031f4 <get_wspr_channel_symbols+0xb80>
				for (i=0; i<i1; i++) {
 80027aa:	b300      	cbz	r0, 80027ee <get_wspr_channel_symbols+0x17a>
					call6[i]=callsign[i];
 80027ac:	7823      	ldrb	r3, [r4, #0]
				for (i=0; i<i1; i++) {
 80027ae:	2801      	cmp	r0, #1
					call6[i]=callsign[i];
 80027b0:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
				for (i=0; i<i1; i++) {
 80027b4:	d01b      	beq.n	80027ee <get_wspr_channel_symbols+0x17a>
					call6[i]=callsign[i];
 80027b6:	7863      	ldrb	r3, [r4, #1]
				for (i=0; i<i1; i++) {
 80027b8:	2802      	cmp	r0, #2
					call6[i]=callsign[i];
 80027ba:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
				for (i=0; i<i1; i++) {
 80027be:	d016      	beq.n	80027ee <get_wspr_channel_symbols+0x17a>
					call6[i]=callsign[i];
 80027c0:	78a3      	ldrb	r3, [r4, #2]
				for (i=0; i<i1; i++) {
 80027c2:	2803      	cmp	r0, #3
					call6[i]=callsign[i];
 80027c4:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
				for (i=0; i<i1; i++) {
 80027c8:	d011      	beq.n	80027ee <get_wspr_channel_symbols+0x17a>
					call6[i]=callsign[i];
 80027ca:	78e3      	ldrb	r3, [r4, #3]
				for (i=0; i<i1; i++) {
 80027cc:	2804      	cmp	r0, #4
					call6[i]=callsign[i];
 80027ce:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
				for (i=0; i<i1; i++) {
 80027d2:	d00c      	beq.n	80027ee <get_wspr_channel_symbols+0x17a>
					call6[i]=callsign[i];
 80027d4:	7923      	ldrb	r3, [r4, #4]
				for (i=0; i<i1; i++) {
 80027d6:	2805      	cmp	r0, #5
					call6[i]=callsign[i];
 80027d8:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				for (i=0; i<i1; i++) {
 80027dc:	d007      	beq.n	80027ee <get_wspr_channel_symbols+0x17a>
					call6[i]=callsign[i];
 80027de:	7963      	ldrb	r3, [r4, #5]
				for (i=0; i<i1; i++) {
 80027e0:	2806      	cmp	r0, #6
					call6[i]=callsign[i];
 80027e2:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				for (i=0; i<i1; i++) {
 80027e6:	d002      	beq.n	80027ee <get_wspr_channel_symbols+0x17a>
					call6[i]=callsign[i];
 80027e8:	79a3      	ldrb	r3, [r4, #6]
 80027ea:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				*n=pack_call(call6);
 80027ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80027f2:	4618      	mov	r0, r3
 80027f4:	ee08 3a10 	vmov	s16, r3
 80027f8:	f7ff fe74 	bl	80024e4 <pack_call>
				*m=10*(callsign[i1+1]-48)+(callsign[i1+2]-48);
 80027fc:	f899 2001 	ldrb.w	r2, [r9, #1]
 8002800:	f81a 1008 	ldrb.w	r1, [sl, r8]
				*n=pack_call(call6);
 8002804:	4604      	mov	r4, r0
				*m=10*(callsign[i1+1]-48)+(callsign[i1+2]-48);
 8002806:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800280a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800280e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
				*m=60000 + 26 + *m;
 8002812:	f64e 234a 	movw	r3, #59978	; 0xea4a
 8002816:	440b      	add	r3, r1
				m=128*ng+ntype+64;
 8002818:	01db      	lsls	r3, r3, #7
				*nadd=1;
 800281a:	2201      	movs	r2, #1
				ntype=power + 1 + nadd;
 800281c:	3501      	adds	r5, #1
 800281e:	4415      	add	r5, r2
				m=128*ng+ntype+64;
 8002820:	442b      	add	r3, r5
 8002822:	f103 0540 	add.w	r5, r3, #64	; 0x40
				n=n1;
 8002826:	e119      	b.n	8002a5c <get_wspr_channel_symbols+0x3e8>
				callsign=strtok(message,"<> ");
 8002828:	4957      	ldr	r1, [pc, #348]	; (8002988 <get_wspr_channel_symbols+0x314>)
 800282a:	f107 001c 	add.w	r0, r7, #28
 800282e:	f00d fed7 	bl	80105e0 <strtok>
				grid=strtok(NULL," ");
 8002832:	4950      	ldr	r1, [pc, #320]	; (8002974 <get_wspr_channel_symbols+0x300>)
				callsign=strtok(message,"<> ");
 8002834:	4606      	mov	r6, r0
				grid=strtok(NULL," ");
 8002836:	2000      	movs	r0, #0
 8002838:	f00d fed2 	bl	80105e0 <strtok>
				powstr=strtok(NULL," ");
 800283c:	494d      	ldr	r1, [pc, #308]	; (8002974 <get_wspr_channel_symbols+0x300>)
				grid=strtok(NULL," ");
 800283e:	4604      	mov	r4, r0
				powstr=strtok(NULL," ");
 8002840:	2000      	movs	r0, #0
 8002842:	f00d fecd 	bl	80105e0 <strtok>
				callsign=strtok(message,"<> ");
 8002846:	46b0      	mov	r8, r6
				int power = atoi(powstr);
 8002848:	f00d f9f2 	bl	800fc30 <atoi>
				if( power < 0 ) power=0;
 800284c:	283c      	cmp	r0, #60	; 0x3c
				power=power+nu[power%10];
 800284e:	4b4d      	ldr	r3, [pc, #308]	; (8002984 <get_wspr_channel_symbols+0x310>)
 8002850:	bfa8      	it	ge
 8002852:	203c      	movge	r0, #60	; 0x3c
 8002854:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
				ihash=nhash(callsign,strlen(callsign),(uint32_t)146);
 8002858:	4630      	mov	r0, r6
				power=power+nu[power%10];
 800285a:	fba3 1302 	umull	r1, r3, r3, r2
 800285e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002862:	08db      	lsrs	r3, r3, #3
 8002864:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002868:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 800286c:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8002870:	442a      	add	r2, r5
				ntype=-(power+1);
 8002872:	43d5      	mvns	r5, r2
				ihash=nhash(callsign,strlen(callsign),(uint32_t)146);
 8002874:	f7fd fd34 	bl	80002e0 <strlen>
			a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8002878:	4b44      	ldr	r3, [pc, #272]	; (800298c <get_wspr_channel_symbols+0x318>)
			if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {
 800287a:	07b1      	lsls	r1, r6, #30
			a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 800287c:	4403      	add	r3, r0
			if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {
 800287e:	f000 8296 	beq.w	8002dae <get_wspr_channel_symbols+0x73a>
			} else if (HASH_LITTLE_ENDIAN && ((u.i & 0x1) == 0)) {
 8002882:	4632      	mov	r2, r6
 8002884:	07d2      	lsls	r2, r2, #31
 8002886:	f140 8365 	bpl.w	8002f54 <get_wspr_channel_symbols+0x8e0>
				while (length > 12)
 800288a:	280c      	cmp	r0, #12
 800288c:	f240 8514 	bls.w	80032b8 <get_wspr_channel_symbols+0xc44>
 8002890:	360c      	adds	r6, #12
			a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8002892:	461a      	mov	r2, r3
 8002894:	4619      	mov	r1, r3
 8002896:	46a1      	mov	r9, r4
 8002898:	469c      	mov	ip, r3
					c += ((uint32_t)k[10])<<16;
 800289a:	f816 ec02 	ldrb.w	lr, [r6, #-2]
					length -= 12;
 800289e:	380c      	subs	r0, #12
					c += ((uint32_t)k[9])<<8;
 80028a0:	f816 3c03 	ldrb.w	r3, [r6, #-3]
					c += ((uint32_t)k[10])<<16;
 80028a4:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
					c += ((uint32_t)k[11])<<24;
 80028a8:	f816 8c01 	ldrb.w	r8, [r6, #-1]
				while (length > 12)
 80028ac:	280c      	cmp	r0, #12
					c += ((uint32_t)k[11])<<24;
 80028ae:	eb0e 2e03 	add.w	lr, lr, r3, lsl #8
					a += ((uint32_t)k[2])<<16;
 80028b2:	f816 3c0a 	ldrb.w	r3, [r6, #-10]
 80028b6:	ea4f 4403 	mov.w	r4, r3, lsl #16
					c += k[8];
 80028ba:	f816 3c04 	ldrb.w	r3, [r6, #-4]
					c += ((uint32_t)k[11])<<24;
 80028be:	449e      	add	lr, r3
					a += ((uint32_t)k[1])<<8;
 80028c0:	f816 3c0b 	ldrb.w	r3, [r6, #-11]
					c += ((uint32_t)k[11])<<24;
 80028c4:	eb0e 6e08 	add.w	lr, lr, r8, lsl #24
					mix(a,b,c);
 80028c8:	eb04 2403 	add.w	r4, r4, r3, lsl #8
					b += ((uint32_t)k[6])<<16;
 80028cc:	f816 3c06 	ldrb.w	r3, [r6, #-6]
					c += ((uint32_t)k[11])<<24;
 80028d0:	4472      	add	r2, lr
					a += k[0];
 80028d2:	f816 ec0c 	ldrb.w	lr, [r6, #-12]
					b += ((uint32_t)k[6])<<16;
 80028d6:	ea4f 4303 	mov.w	r3, r3, lsl #16
					mix(a,b,c);
 80028da:	4474      	add	r4, lr
					b += ((uint32_t)k[5])<<8;
 80028dc:	f816 ec07 	ldrb.w	lr, [r6, #-7]
					b += ((uint32_t)k[7])<<24;
 80028e0:	eb03 230e 	add.w	r3, r3, lr, lsl #8
					a += ((uint32_t)k[3])<<24;
 80028e4:	f816 ec09 	ldrb.w	lr, [r6, #-9]
					mix(a,b,c);
 80028e8:	eb04 640e 	add.w	r4, r4, lr, lsl #24
 80028ec:	46b6      	mov	lr, r6
				while (length > 12)
 80028ee:	f106 060c 	add.w	r6, r6, #12
					mix(a,b,c);
 80028f2:	eba4 0402 	sub.w	r4, r4, r2
 80028f6:	4464      	add	r4, ip
					b += k[4];
 80028f8:	f816 cc14 	ldrb.w	ip, [r6, #-20]
					b += ((uint32_t)k[7])<<24;
 80028fc:	4463      	add	r3, ip
 80028fe:	f816 cc11 	ldrb.w	ip, [r6, #-17]
					mix(a,b,c);
 8002902:	ea84 7432 	eor.w	r4, r4, r2, ror #28
					b += ((uint32_t)k[7])<<24;
 8002906:	eb03 630c 	add.w	r3, r3, ip, lsl #24
 800290a:	440b      	add	r3, r1
					mix(a,b,c);
 800290c:	4621      	mov	r1, r4
 800290e:	441a      	add	r2, r3
 8002910:	eba3 0304 	sub.w	r3, r3, r4
 8002914:	ea83 63b4 	eor.w	r3, r3, r4, ror #26
 8002918:	4411      	add	r1, r2
 800291a:	eba2 0203 	sub.w	r2, r2, r3
 800291e:	ea82 6233 	eor.w	r2, r2, r3, ror #24
 8002922:	440b      	add	r3, r1
 8002924:	eba1 0102 	sub.w	r1, r1, r2
 8002928:	ea81 4432 	eor.w	r4, r1, r2, ror #16
 800292c:	441a      	add	r2, r3
 800292e:	eba3 0304 	sub.w	r3, r3, r4
 8002932:	eb04 0c02 	add.w	ip, r4, r2
 8002936:	ea83 3174 	eor.w	r1, r3, r4, ror #13
 800293a:	eba2 0201 	sub.w	r2, r2, r1
 800293e:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8002942:	4461      	add	r1, ip
				while (length > 12)
 8002944:	d8a9      	bhi.n	800289a <get_wspr_channel_symbols+0x226>
 8002946:	464c      	mov	r4, r9
 8002948:	4663      	mov	r3, ip
 800294a:	46f0      	mov	r8, lr
				switch(length)                   /* all the case statements fall through */
 800294c:	3801      	subs	r0, #1
 800294e:	280b      	cmp	r0, #11
 8002950:	f200 82bd 	bhi.w	8002ece <get_wspr_channel_symbols+0x85a>
 8002954:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002958:	029b029f 	.word	0x029b029f
 800295c:	02930297 	.word	0x02930297
 8002960:	028c0290 	.word	0x028c0290
 8002964:	02840288 	.word	0x02840288
 8002968:	027d0281 	.word	0x027d0281
 800296c:	02750279 	.word	0x02750279
 8002970:	08013db8 	.word	0x08013db8
 8002974:	0801a094 	.word	0x0801a094
 8002978:	08019eb8 	.word	0x08019eb8
 800297c:	08019ebc 	.word	0x08019ebc
 8002980:	08019ec0 	.word	0x08019ec0
 8002984:	cccccccd 	.word	0xcccccccd
 8002988:	08019ec4 	.word	0x08019ec4
 800298c:	deadbf81 	.word	0xdeadbf81
				callsign = strtok(message," ");
 8002990:	49ce      	ldr	r1, [pc, #824]	; (8002ccc <get_wspr_channel_symbols+0x658>)
 8002992:	f107 001c 	add.w	r0, r7, #28
 8002996:	f00d fe23 	bl	80105e0 <strtok>
				grid = strtok(NULL," ");
 800299a:	49cc      	ldr	r1, [pc, #816]	; (8002ccc <get_wspr_channel_symbols+0x658>)
				callsign = strtok(message," ");
 800299c:	4604      	mov	r4, r0
				grid = strtok(NULL," ");
 800299e:	2000      	movs	r0, #0
 80029a0:	f00d fe1e 	bl	80105e0 <strtok>
				powstr = strtok(NULL," ");
 80029a4:	49c9      	ldr	r1, [pc, #804]	; (8002ccc <get_wspr_channel_symbols+0x658>)
				grid = strtok(NULL," ");
 80029a6:	4606      	mov	r6, r0
				powstr = strtok(NULL," ");
 80029a8:	2000      	movs	r0, #0
 80029aa:	f00d fe19 	bl	80105e0 <strtok>
				int power = atoi(powstr);
 80029ae:	f00d f93f 	bl	800fc30 <atoi>
 80029b2:	4605      	mov	r5, r0
				n = pack_call(callsign);
 80029b4:	4620      	mov	r0, r4
 80029b6:	f7ff fd95 	bl	80024e4 <pack_call>
					grid4[i]=get_locator_character_code(*(grid+i));
 80029ba:	7832      	ldrb	r2, [r6, #0]
				n = pack_call(callsign);
 80029bc:	4604      	mov	r4, r0
			if( ch >=48 && ch <=57 ) { //0-9
 80029be:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b09      	cmp	r3, #9
 80029c6:	d908      	bls.n	80029da <get_wspr_channel_symbols+0x366>
			if( ch == 32 ) {  //space
 80029c8:	2a20      	cmp	r2, #32
 80029ca:	f000 845c 	beq.w	8003286 <get_wspr_channel_symbols+0xc12>
			if( ch >= 65 && ch <= 82 ) { //A-Z
 80029ce:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 80029d2:	b2db      	uxtb	r3, r3
			return -1;
 80029d4:	2b12      	cmp	r3, #18
 80029d6:	bf28      	it	cs
 80029d8:	23ff      	movcs	r3, #255	; 0xff
					grid4[i]=get_locator_character_code(*(grid+i));
 80029da:	7871      	ldrb	r1, [r6, #1]
			if( ch >=48 && ch <=57 ) { //0-9
 80029dc:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	2a09      	cmp	r2, #9
 80029e4:	d908      	bls.n	80029f8 <get_wspr_channel_symbols+0x384>
			if( ch == 32 ) {  //space
 80029e6:	2920      	cmp	r1, #32
 80029e8:	f000 844a 	beq.w	8003280 <get_wspr_channel_symbols+0xc0c>
			if( ch >= 65 && ch <= 82 ) { //A-Z
 80029ec:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
 80029f0:	b2d2      	uxtb	r2, r2
			return -1;
 80029f2:	2a12      	cmp	r2, #18
 80029f4:	bf28      	it	cs
 80029f6:	22ff      	movcs	r2, #255	; 0xff
					grid4[i]=get_locator_character_code(*(grid+i));
 80029f8:	78b1      	ldrb	r1, [r6, #2]
			if( ch >=48 && ch <=57 ) { //0-9
 80029fa:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 80029fe:	b2c0      	uxtb	r0, r0
 8002a00:	2809      	cmp	r0, #9
 8002a02:	d907      	bls.n	8002a14 <get_wspr_channel_symbols+0x3a0>
			if( ch == 32 ) {  //space
 8002a04:	2920      	cmp	r1, #32
 8002a06:	f000 8441 	beq.w	800328c <get_wspr_channel_symbols+0xc18>
			if( ch >= 65 && ch <= 82 ) { //A-Z
 8002a0a:	3941      	subs	r1, #65	; 0x41
 8002a0c:	b2c8      	uxtb	r0, r1
			return -1;
 8002a0e:	2812      	cmp	r0, #18
 8002a10:	bf28      	it	cs
 8002a12:	20ff      	movcs	r0, #255	; 0xff
					grid4[i]=get_locator_character_code(*(grid+i));
 8002a14:	78f6      	ldrb	r6, [r6, #3]
			if( ch >=48 && ch <=57 ) { //0-9
 8002a16:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8002a1a:	b2c9      	uxtb	r1, r1
 8002a1c:	2909      	cmp	r1, #9
 8002a1e:	d908      	bls.n	8002a32 <get_wspr_channel_symbols+0x3be>
			if( ch == 32 ) {  //space
 8002a20:	2e20      	cmp	r6, #32
 8002a22:	f000 8427 	beq.w	8003274 <get_wspr_channel_symbols+0xc00>
			if( ch >= 65 && ch <= 82 ) { //A-Z
 8002a26:	f1a6 0141 	sub.w	r1, r6, #65	; 0x41
 8002a2a:	b2c9      	uxtb	r1, r1
			return -1;
 8002a2c:	2912      	cmp	r1, #18
 8002a2e:	bf28      	it	cs
 8002a30:	21ff      	movcs	r1, #255	; 0xff
			m=(179-10*grid4[0]-grid4[2])*180+10*grid4[1]+grid4[3];
 8002a32:	f06f 0609 	mvn.w	r6, #9
 8002a36:	b212      	sxth	r2, r2
 8002a38:	fb06 f303 	mul.w	r3, r6, r3
 8002a3c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002a40:	33b3      	adds	r3, #179	; 0xb3
 8002a42:	0052      	lsls	r2, r2, #1
 8002a44:	1a1b      	subs	r3, r3, r0
 8002a46:	20b4      	movs	r0, #180	; 0xb4
 8002a48:	fb00 2203 	mla	r2, r0, r3, r2
 8002a4c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a50:	440a      	add	r2, r1
 8002a52:	ee08 3a10 	vmov	s16, r3
 8002a56:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
			m=m*128+power+64;
 8002a5a:	3540      	adds	r5, #64	; 0x40
			it=0xFF & (n>>20);
 8002a5c:	0d23      	lsrs	r3, r4, #20
			it= ((n&(0x0F))<<4) + ((m>>18)&(0x0F));
 8002a5e:	f3c5 4283 	ubfx	r2, r5, #18, #4
			memset(data,0,sizeof(data));
 8002a62:	2600      	movs	r6, #0
			memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8002a64:	ee18 0a10 	vmov	r0, s16
			it=0xFF & (n>>20);
 8002a68:	743b      	strb	r3, [r7, #16]
			it=0xFF & (n>>12);
 8002a6a:	0b23      	lsrs	r3, r4, #12
			it= ((n&(0x0F))<<4) + ((m>>18)&(0x0F));
 8002a6c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
			memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8002a70:	4631      	mov	r1, r6
			it=0xFF & (n>>12);
 8002a72:	747b      	strb	r3, [r7, #17]
			it=0xFF & (n>>4);
 8002a74:	0923      	lsrs	r3, r4, #4
			data[3]=it;
 8002a76:	74fa      	strb	r2, [r7, #19]
			memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8002a78:	22b0      	movs	r2, #176	; 0xb0
			it=0xFF & (n>>4);
 8002a7a:	74bb      	strb	r3, [r7, #18]
			it=0xFF & (m>>10);
 8002a7c:	12ab      	asrs	r3, r5, #10
			memset(data,0,sizeof(data));
 8002a7e:	f8c7 6017 	str.w	r6, [r7, #23]
			it=0xFF & (m>>10);
 8002a82:	753b      	strb	r3, [r7, #20]
			it=0xFF & (m>>2);
 8002a84:	10ab      	asrs	r3, r5, #2
					ENCODE(sym,encstate);
 8002a86:	4c92      	ldr	r4, [pc, #584]	; (8002cd0 <get_wspr_channel_symbols+0x65c>)
			it=0xFF & (m>>2);
 8002a88:	757b      	strb	r3, [r7, #21]
			it=(m & 0x03)<<6 ;
 8002a8a:	01ab      	lsls	r3, r5, #6
					ENCODE(sym,encstate);
 8002a8c:	4d91      	ldr	r5, [pc, #580]	; (8002cd4 <get_wspr_channel_symbols+0x660>)
			it=(m & 0x03)<<6 ;
 8002a8e:	75bb      	strb	r3, [r7, #22]
			uint8_t channelbits[nbytes*8*2]; /* 162 rounded up */
 8002a90:	466b      	mov	r3, sp
 8002a92:	ee08 3a90 	vmov	s17, r3
			memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8002a96:	f00d f907 	bl	800fca8 <memset>
			while(nbytes-- != 0) {
 8002a9a:	f107 0310 	add.w	r3, r7, #16
 8002a9e:	4a8e      	ldr	r2, [pc, #568]	; (8002cd8 <get_wspr_channel_symbols+0x664>)
					ENCODE(sym,encstate);
 8002aa0:	60fe      	str	r6, [r7, #12]
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	f507 7388 	add.w	r3, r7, #272	; 0x110
					encstate = (encstate << 1) | ((*data >> i) & 1);
 8002aa8:	68b8      	ldr	r0, [r7, #8]
			while(nbytes-- != 0) {
 8002aaa:	3310      	adds	r3, #16
					encstate = (encstate << 1) | ((*data >> i) & 1);
 8002aac:	68f9      	ldr	r1, [r7, #12]
 8002aae:	f810 9b01 	ldrb.w	r9, [r0], #1
 8002ab2:	60b8      	str	r0, [r7, #8]
 8002ab4:	ea4f 10d9 	mov.w	r0, r9, lsr #7
 8002ab8:	f3c9 1880 	ubfx	r8, r9, #6, #1
 8002abc:	f3c9 1e40 	ubfx	lr, r9, #5, #1
 8002ac0:	ea40 0141 	orr.w	r1, r0, r1, lsl #1
 8002ac4:	f3c9 1c00 	ubfx	ip, r9, #4, #1
 8002ac8:	f3c9 0680 	ubfx	r6, r9, #2, #1
 8002acc:	ea48 0841 	orr.w	r8, r8, r1, lsl #1
					ENCODE(sym,encstate);
 8002ad0:	ea01 0005 	and.w	r0, r1, r5
 8002ad4:	4021      	ands	r1, r4
 8002ad6:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8002ada:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
					encstate = (encstate << 1) | ((*data >> i) & 1);
 8002ade:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
					ENCODE(sym,encstate);
 8002ae2:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8002ae6:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8002aea:	b2c9      	uxtb	r1, r1
					encstate = (encstate << 1) | ((*data >> i) & 1);
 8002aec:	ea4c 0c4e 	orr.w	ip, ip, lr, lsl #1
					ENCODE(sym,encstate);
 8002af0:	f812 a001 	ldrb.w	sl, [r2, r1]
 8002af4:	b2c0      	uxtb	r0, r0
					encstate = (encstate << 1) | ((*data >> i) & 1);
 8002af6:	f3c9 01c0 	ubfx	r1, r9, #3, #1
					ENCODE(sym,encstate);
 8002afa:	5c10      	ldrb	r0, [r2, r0]
					encstate = (encstate << 1) | ((*data >> i) & 1);
 8002afc:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
					ENCODE(sym,encstate);
 8002b00:	ea4a 0a40 	orr.w	sl, sl, r0, lsl #1
					encstate = (encstate << 1) | ((*data >> i) & 1);
 8002b04:	f3c9 0040 	ubfx	r0, r9, #1, #1
 8002b08:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
 8002b0c:	6079      	str	r1, [r7, #4]
 8002b0e:	f009 0101 	and.w	r1, r9, #1
					ENCODE(sym,encstate);
 8002b12:	ea08 0905 	and.w	r9, r8, r5
 8002b16:	ea08 0804 	and.w	r8, r8, r4
					encstate = (encstate << 1) | ((*data >> i) & 1);
 8002b1a:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
					ENCODE(sym,encstate);
 8002b1e:	ea89 4919 	eor.w	r9, r9, r9, lsr #16
 8002b22:	ea88 4818 	eor.w	r8, r8, r8, lsr #16
 8002b26:	ea89 2919 	eor.w	r9, r9, r9, lsr #8
 8002b2a:	ea88 2818 	eor.w	r8, r8, r8, lsr #8
 8002b2e:	fa5f f989 	uxtb.w	r9, r9
 8002b32:	fa5f f888 	uxtb.w	r8, r8
 8002b36:	f812 9009 	ldrb.w	r9, [r2, r9]
					encstate = (encstate << 1) | ((*data >> i) & 1);
 8002b3a:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
					ENCODE(sym,encstate);
 8002b3e:	f812 8008 	ldrb.w	r8, [r2, r8]
					encstate = (encstate << 1) | ((*data >> i) & 1);
 8002b42:	60f9      	str	r1, [r7, #12]
					ENCODE(sym,encstate);
 8002b44:	ea48 0949 	orr.w	r9, r8, r9, lsl #1
 8002b48:	ea0e 0805 	and.w	r8, lr, r5
 8002b4c:	ea0e 0e04 	and.w	lr, lr, r4
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	ea88 4818 	eor.w	r8, r8, r8, lsr #16
 8002b56:	ea8e 4e1e 	eor.w	lr, lr, lr, lsr #16
 8002b5a:	ea88 2818 	eor.w	r8, r8, r8, lsr #8
 8002b5e:	ea8e 2e1e 	eor.w	lr, lr, lr, lsr #8
 8002b62:	fa5f f888 	uxtb.w	r8, r8
 8002b66:	fa5f fe8e 	uxtb.w	lr, lr
 8002b6a:	f812 8008 	ldrb.w	r8, [r2, r8]
 8002b6e:	f812 e00e 	ldrb.w	lr, [r2, lr]
 8002b72:	ea4e 0848 	orr.w	r8, lr, r8, lsl #1
 8002b76:	ea0c 0e05 	and.w	lr, ip, r5
 8002b7a:	ea0c 0c04 	and.w	ip, ip, r4
 8002b7e:	ea8e 4e1e 	eor.w	lr, lr, lr, lsr #16
 8002b82:	ea8c 4c1c 	eor.w	ip, ip, ip, lsr #16
 8002b86:	ea8e 2e1e 	eor.w	lr, lr, lr, lsr #8
 8002b8a:	ea8c 2c1c 	eor.w	ip, ip, ip, lsr #8
 8002b8e:	fa5f fe8e 	uxtb.w	lr, lr
 8002b92:	fa5f fc8c 	uxtb.w	ip, ip
 8002b96:	f812 e00e 	ldrb.w	lr, [r2, lr]
 8002b9a:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002b9e:	ea4c 0e4e 	orr.w	lr, ip, lr, lsl #1
 8002ba2:	ea01 0c05 	and.w	ip, r1, r5
 8002ba6:	4021      	ands	r1, r4
 8002ba8:	ea8c 4c1c 	eor.w	ip, ip, ip, lsr #16
 8002bac:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
 8002bb0:	ea8c 2c1c 	eor.w	ip, ip, ip, lsr #8
 8002bb4:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8002bb8:	fa5f fc8c 	uxtb.w	ip, ip
 8002bbc:	b2c9      	uxtb	r1, r1
 8002bbe:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002bc2:	5c51      	ldrb	r1, [r2, r1]
 8002bc4:	ea41 0c4c 	orr.w	ip, r1, ip, lsl #1
 8002bc8:	ea06 0105 	and.w	r1, r6, r5
 8002bcc:	4026      	ands	r6, r4
 8002bce:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
 8002bd2:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 8002bd6:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8002bda:	ea86 2616 	eor.w	r6, r6, r6, lsr #8
 8002bde:	b2c9      	uxtb	r1, r1
 8002be0:	b2f6      	uxtb	r6, r6
 8002be2:	5c51      	ldrb	r1, [r2, r1]
 8002be4:	5d96      	ldrb	r6, [r2, r6]
 8002be6:	ea46 0141 	orr.w	r1, r6, r1, lsl #1
 8002bea:	ea00 0605 	and.w	r6, r0, r5
 8002bee:	4020      	ands	r0, r4
 8002bf0:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 8002bf4:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8002bf8:	ea86 2616 	eor.w	r6, r6, r6, lsr #8
 8002bfc:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8002c00:	b2f6      	uxtb	r6, r6
 8002c02:	b2c0      	uxtb	r0, r0
 8002c04:	5d96      	ldrb	r6, [r2, r6]
 8002c06:	5c10      	ldrb	r0, [r2, r0]
 8002c08:	ea40 0646 	orr.w	r6, r0, r6, lsl #1
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	4028      	ands	r0, r5
 8002c10:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8002c14:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8002c18:	b2c0      	uxtb	r0, r0
 8002c1a:	f812 b000 	ldrb.w	fp, [r2, r0]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	4020      	ands	r0, r4
 8002c22:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8002c26:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8002c2a:	b2c0      	uxtb	r0, r0
 8002c2c:	5c10      	ldrb	r0, [r2, r0]
 8002c2e:	ea40 0b4b 	orr.w	fp, r0, fp, lsl #1
					*symbols++ = sym >> 1;
 8002c32:	ea4f 006a 	mov.w	r0, sl, asr #1
					*symbols++ = sym & 1;
 8002c36:	f00a 0a01 	and.w	sl, sl, #1
					*symbols++ = sym >> 1;
 8002c3a:	f803 0c20 	strb.w	r0, [r3, #-32]
 8002c3e:	ea4f 0069 	mov.w	r0, r9, asr #1
					*symbols++ = sym & 1;
 8002c42:	f009 0901 	and.w	r9, r9, #1
 8002c46:	f803 ac1f 	strb.w	sl, [r3, #-31]
					*symbols++ = sym >> 1;
 8002c4a:	f803 0c1e 	strb.w	r0, [r3, #-30]
 8002c4e:	ea4f 0068 	mov.w	r0, r8, asr #1
					*symbols++ = sym & 1;
 8002c52:	f008 0801 	and.w	r8, r8, #1
 8002c56:	f803 9c1d 	strb.w	r9, [r3, #-29]
					*symbols++ = sym >> 1;
 8002c5a:	f803 0c1c 	strb.w	r0, [r3, #-28]
 8002c5e:	ea4f 006e 	mov.w	r0, lr, asr #1
					*symbols++ = sym & 1;
 8002c62:	f00e 0e01 	and.w	lr, lr, #1
 8002c66:	f803 8c1b 	strb.w	r8, [r3, #-27]
					*symbols++ = sym >> 1;
 8002c6a:	f803 0c1a 	strb.w	r0, [r3, #-26]
 8002c6e:	ea4f 006c 	mov.w	r0, ip, asr #1
					*symbols++ = sym & 1;
 8002c72:	f803 ec19 	strb.w	lr, [r3, #-25]
 8002c76:	f00c 0c01 	and.w	ip, ip, #1
					*symbols++ = sym >> 1;
 8002c7a:	f803 0c18 	strb.w	r0, [r3, #-24]
 8002c7e:	1048      	asrs	r0, r1, #1
					*symbols++ = sym & 1;
 8002c80:	f001 0101 	and.w	r1, r1, #1
 8002c84:	f803 cc17 	strb.w	ip, [r3, #-23]
					*symbols++ = sym >> 1;
 8002c88:	f803 0c16 	strb.w	r0, [r3, #-22]
 8002c8c:	1070      	asrs	r0, r6, #1
					*symbols++ = sym & 1;
 8002c8e:	f803 1c15 	strb.w	r1, [r3, #-21]
 8002c92:	f006 0601 	and.w	r6, r6, #1
					*symbols++ = sym >> 1;
 8002c96:	f803 0c14 	strb.w	r0, [r3, #-20]
 8002c9a:	ea4f 006b 	mov.w	r0, fp, asr #1
			while(nbytes-- != 0) {
 8002c9e:	f107 011b 	add.w	r1, r7, #27
					*symbols++ = sym & 1;
 8002ca2:	f00b 0b01 	and.w	fp, fp, #1
					*symbols++ = sym >> 1;
 8002ca6:	f803 0c12 	strb.w	r0, [r3, #-18]
			while(nbytes-- != 0) {
 8002caa:	68b8      	ldr	r0, [r7, #8]
					*symbols++ = sym & 1;
 8002cac:	f803 6c13 	strb.w	r6, [r3, #-19]
			while(nbytes-- != 0) {
 8002cb0:	4288      	cmp	r0, r1
					*symbols++ = sym & 1;
 8002cb2:	f803 bc11 	strb.w	fp, [r3, #-17]
			while(nbytes-- != 0) {
 8002cb6:	f47f aef7 	bne.w	8002aa8 <get_wspr_channel_symbols+0x434>
 8002cba:	f04f 0e00 	mov.w	lr, #0
 8002cbe:	f107 0b5c 	add.w	fp, r7, #92	; 0x5c
				j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8002cc2:	f8df a018 	ldr.w	sl, [pc, #24]	; 8002cdc <get_wspr_channel_symbols+0x668>
			i = p = 0;
 8002cc6:	46f4      	mov	ip, lr
 8002cc8:	e00a      	b.n	8002ce0 <get_wspr_channel_symbols+0x66c>
 8002cca:	bf00      	nop
 8002ccc:	0801a094 	.word	0x0801a094
 8002cd0:	e4613c47 	.word	0xe4613c47
 8002cd4:	f2d05351 	.word	0xf2d05351
 8002cd8:	08019edc 	.word	0x08019edc
 8002cdc:	84422110 	.word	0x84422110
				j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8002ce0:	fa5f f58e 	uxtb.w	r5, lr
					tmp[j] = sym[p];
 8002ce4:	f50c 72d0 	add.w	r2, ip, #416	; 0x1a0
 8002ce8:	f107 0110 	add.w	r1, r7, #16
				j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8002cec:	2300      	movs	r3, #0
					p++;
 8002cee:	f10c 0001 	add.w	r0, ip, #1
					tmp[j] = sym[p];
 8002cf2:	1854      	adds	r4, r2, r1
				j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8002cf4:	462a      	mov	r2, r5
 8002cf6:	02ad      	lsls	r5, r5, #10
 8002cf8:	18ad      	adds	r5, r5, r2
 8002cfa:	f143 0300 	adc.w	r3, r3, #0
 8002cfe:	052a      	lsls	r2, r5, #20
 8002d00:	051e      	lsls	r6, r3, #20
 8002d02:	18aa      	adds	r2, r5, r2
 8002d04:	ea46 3615 	orr.w	r6, r6, r5, lsr #12
 8002d08:	eb43 0306 	adc.w	r3, r3, r6
 8002d0c:	1892      	adds	r2, r2, r2
 8002d0e:	415b      	adcs	r3, r3
 8002d10:	ea02 060a 	and.w	r6, r2, sl
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	0235      	lsls	r5, r6, #8
 8002d1a:	021a      	lsls	r2, r3, #8
 8002d1c:	19ad      	adds	r5, r5, r6
 8002d1e:	ea42 6216 	orr.w	r2, r2, r6, lsr #24
 8002d22:	ea4f 4105 	mov.w	r1, r5, lsl #16
 8002d26:	eb43 0202 	adc.w	r2, r3, r2
 8002d2a:	1869      	adds	r1, r5, r1
 8002d2c:	ea4f 4902 	mov.w	r9, r2, lsl #16
 8002d30:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8002d34:	ea49 4915 	orr.w	r9, r9, r5, lsr #16
 8002d38:	eb42 0209 	adc.w	r2, r2, r9
 8002d3c:	eb18 0606 	adds.w	r6, r8, r6
 8002d40:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002d44:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
 8002d48:	eb43 0302 	adc.w	r3, r3, r2
 8002d4c:	b2db      	uxtb	r3, r3
				if (j < 162 ) {
 8002d4e:	2ba1      	cmp	r3, #161	; 0xa1
 8002d50:	f200 80f9 	bhi.w	8002f46 <get_wspr_channel_symbols+0x8d2>
					p++;
 8002d54:	fa5f fc80 	uxtb.w	ip, r0
					tmp[j] = sym[p];
 8002d58:	f814 2cb0 	ldrb.w	r2, [r4, #-176]
			while (p < 162) {
 8002d5c:	f10e 0e01 	add.w	lr, lr, #1
 8002d60:	f1bc 0fa2 	cmp.w	ip, #162	; 0xa2
					tmp[j] = sym[p];
 8002d64:	f80b 2003 	strb.w	r2, [fp, r3]
			while (p < 162) {
 8002d68:	d1ba      	bne.n	8002ce0 <get_wspr_channel_symbols+0x66c>
			memcpy(sym, tmp, sizeof(tmp));
 8002d6a:	22a2      	movs	r2, #162	; 0xa2
 8002d6c:	4659      	mov	r1, fp
 8002d6e:	ee18 0a10 	vmov	r0, s16
 8002d72:	f207 15a1 	addw	r5, r7, #417	; 0x1a1
 8002d76:	f00c ff89 	bl	800fc8c <memcpy>
			for (i=0; i < 162; i++) {
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	f107 02ff 	add.w	r2, r7, #255	; 0xff
 8002d80:	48d3      	ldr	r0, [pc, #844]	; (80030d0 <get_wspr_channel_symbols+0xa5c>)
 8002d82:	1e59      	subs	r1, r3, #1
				symbols[i] = 2 * channelbits[i] + pr3[i];
 8002d84:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8002d88:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8002d8c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
			for (i=0; i < 162; i++) {
 8002d90:	42aa      	cmp	r2, r5
				symbols[i] = 2 * channelbits[i] + pr3[i];
 8002d92:	f801 3f01 	strb.w	r3, [r1, #1]!
			for (i=0; i < 162; i++) {
 8002d96:	d1f5      	bne.n	8002d84 <get_wspr_channel_symbols+0x710>
			return 1;
 8002d98:	ee18 3a90 	vmov	r3, s17
 8002d9c:	2001      	movs	r0, #1
		}
 8002d9e:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8002da2:	469d      	mov	sp, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	ecbd 8b02 	vpop	{d8}
 8002daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while (length > 12)
 8002dae:	280c      	cmp	r0, #12
 8002db0:	f240 8263 	bls.w	800327a <get_wspr_channel_symbols+0xc06>
 8002db4:	360c      	adds	r6, #12
			a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8002db6:	461a      	mov	r2, r3
 8002db8:	4619      	mov	r1, r3
 8002dba:	46a6      	mov	lr, r4
					c += k[2];
 8002dbc:	f856 4c04 	ldr.w	r4, [r6, #-4]
					length -= 12;
 8002dc0:	380c      	subs	r0, #12
 8002dc2:	46b4      	mov	ip, r6
				while (length > 12)
 8002dc4:	360c      	adds	r6, #12
					c += k[2];
 8002dc6:	4422      	add	r2, r4
					mix(a,b,c);
 8002dc8:	f856 4c18 	ldr.w	r4, [r6, #-24]
				while (length > 12)
 8002dcc:	280c      	cmp	r0, #12
					mix(a,b,c);
 8002dce:	eba4 0402 	sub.w	r4, r4, r2
 8002dd2:	4423      	add	r3, r4
 8002dd4:	ea83 7332 	eor.w	r3, r3, r2, ror #28
 8002dd8:	461c      	mov	r4, r3
					b += k[1];
 8002dda:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8002dde:	440b      	add	r3, r1
					mix(a,b,c);
 8002de0:	4621      	mov	r1, r4
 8002de2:	441a      	add	r2, r3
 8002de4:	eba3 0304 	sub.w	r3, r3, r4
 8002de8:	ea83 63b4 	eor.w	r3, r3, r4, ror #26
 8002dec:	4411      	add	r1, r2
 8002dee:	eba2 0203 	sub.w	r2, r2, r3
 8002df2:	ea82 6233 	eor.w	r2, r2, r3, ror #24
 8002df6:	440b      	add	r3, r1
 8002df8:	eba1 0102 	sub.w	r1, r1, r2
 8002dfc:	ea81 4132 	eor.w	r1, r1, r2, ror #16
 8002e00:	441a      	add	r2, r3
 8002e02:	460c      	mov	r4, r1
 8002e04:	eba3 0301 	sub.w	r3, r3, r1
 8002e08:	ea83 3171 	eor.w	r1, r3, r1, ror #13
 8002e0c:	4623      	mov	r3, r4
 8002e0e:	4413      	add	r3, r2
 8002e10:	eba2 0201 	sub.w	r2, r2, r1
 8002e14:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8002e18:	4419      	add	r1, r3
				while (length > 12)
 8002e1a:	d8cf      	bhi.n	8002dbc <get_wspr_channel_symbols+0x748>
 8002e1c:	4674      	mov	r4, lr
 8002e1e:	46e0      	mov	r8, ip
				switch(length)
 8002e20:	3801      	subs	r0, #1
 8002e22:	280b      	cmp	r0, #11
 8002e24:	d853      	bhi.n	8002ece <get_wspr_channel_symbols+0x85a>
 8002e26:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002e2a:	0036      	.short	0x0036
 8002e2c:	017d013f 	.word	0x017d013f
 8002e30:	01720179 	.word	0x01720179
 8002e34:	0164016b 	.word	0x0164016b
 8002e38:	0159015d 	.word	0x0159015d
 8002e3c:	014c0155 	.word	0x014c0155
 8002e40:	0143      	.short	0x0143
				case 12: c+=((uint32_t)k[11])<<24;
 8002e42:	f898 000b 	ldrb.w	r0, [r8, #11]
 8002e46:	eb02 6200 	add.w	r2, r2, r0, lsl #24
				case 11: c+=((uint32_t)k[10])<<16;
 8002e4a:	f898 000a 	ldrb.w	r0, [r8, #10]
 8002e4e:	eb02 4200 	add.w	r2, r2, r0, lsl #16
				case 10: c+=((uint32_t)k[9])<<8;
 8002e52:	f898 0009 	ldrb.w	r0, [r8, #9]
 8002e56:	eb02 2200 	add.w	r2, r2, r0, lsl #8
				case 9 : c+=k[8];
 8002e5a:	f898 0008 	ldrb.w	r0, [r8, #8]
 8002e5e:	4402      	add	r2, r0
				case 8 : b+=((uint32_t)k[7])<<24;
 8002e60:	f898 0007 	ldrb.w	r0, [r8, #7]
 8002e64:	eb01 6100 	add.w	r1, r1, r0, lsl #24
				case 7 : b+=((uint32_t)k[6])<<16;
 8002e68:	f898 0006 	ldrb.w	r0, [r8, #6]
 8002e6c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
				case 6 : b+=((uint32_t)k[5])<<8;
 8002e70:	f898 0005 	ldrb.w	r0, [r8, #5]
 8002e74:	eb01 2100 	add.w	r1, r1, r0, lsl #8
				case 5 : b+=k[4];
 8002e78:	f898 0004 	ldrb.w	r0, [r8, #4]
 8002e7c:	4401      	add	r1, r0
				case 4 : a+=((uint32_t)k[3])<<24;
 8002e7e:	f898 0003 	ldrb.w	r0, [r8, #3]
 8002e82:	eb03 6300 	add.w	r3, r3, r0, lsl #24
				case 3 : a+=((uint32_t)k[2])<<16;
 8002e86:	f898 0002 	ldrb.w	r0, [r8, #2]
 8002e8a:	eb03 4300 	add.w	r3, r3, r0, lsl #16
				case 2 : a+=((uint32_t)k[1])<<8;
 8002e8e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8002e92:	eb03 2300 	add.w	r3, r3, r0, lsl #8
				case 1 : a+=k[0];
 8002e96:	f898 0000 	ldrb.w	r0, [r8]
 8002e9a:	4403      	add	r3, r0
			final(a,b,c);
 8002e9c:	404a      	eors	r2, r1
 8002e9e:	eba2 40b1 	sub.w	r0, r2, r1, ror #18
 8002ea2:	4043      	eors	r3, r0
 8002ea4:	eba3 5370 	sub.w	r3, r3, r0, ror #21
 8002ea8:	4059      	eors	r1, r3
 8002eaa:	eba1 12f3 	sub.w	r2, r1, r3, ror #7
 8002eae:	ea80 0102 	eor.w	r1, r0, r2
 8002eb2:	eba1 4132 	sub.w	r1, r1, r2, ror #16
 8002eb6:	404b      	eors	r3, r1
 8002eb8:	eba3 7331 	sub.w	r3, r3, r1, ror #28
 8002ebc:	405a      	eors	r2, r3
 8002ebe:	eba2 43b3 	sub.w	r3, r2, r3, ror #18
 8002ec2:	ea81 0203 	eor.w	r2, r1, r3
 8002ec6:	eba2 2333 	sub.w	r3, r2, r3, ror #8
			c=(32767&c);
 8002eca:	f3c3 020e 	ubfx	r2, r3, #0, #15
				memset(grid6,0,sizeof(char)*7);
 8002ece:	2300      	movs	r3, #0
				m=128*ihash + ntype + 64;
 8002ed0:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
				memset(grid6,0,sizeof(char)*7);
 8002ed4:	f507 7280 	add.w	r2, r7, #256	; 0x100
				j=strlen(grid);
 8002ed8:	4620      	mov	r0, r4
				memset(grid6,0,sizeof(char)*7);
 8002eda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
				m=128*ihash + ntype + 64;
 8002ede:	3540      	adds	r5, #64	; 0x40
				memset(grid6,0,sizeof(char)*7);
 8002ee0:	ee08 2a10 	vmov	s16, r2
 8002ee4:	f8c7 3103 	str.w	r3, [r7, #259]	; 0x103
				j=strlen(grid);
 8002ee8:	f7fd f9fa 	bl	80002e0 <strlen>
				for(i=0; i<j-1; i++) {
 8002eec:	3801      	subs	r0, #1
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	dd20      	ble.n	8002f34 <get_wspr_channel_symbols+0x8c0>
					grid6[i]=grid[i+1];
 8002ef2:	7863      	ldrb	r3, [r4, #1]
				for(i=0; i<j-1; i++) {
 8002ef4:	2801      	cmp	r0, #1
					grid6[i]=grid[i+1];
 8002ef6:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
				for(i=0; i<j-1; i++) {
 8002efa:	d01b      	beq.n	8002f34 <get_wspr_channel_symbols+0x8c0>
					grid6[i]=grid[i+1];
 8002efc:	78a3      	ldrb	r3, [r4, #2]
				for(i=0; i<j-1; i++) {
 8002efe:	2802      	cmp	r0, #2
					grid6[i]=grid[i+1];
 8002f00:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
				for(i=0; i<j-1; i++) {
 8002f04:	d016      	beq.n	8002f34 <get_wspr_channel_symbols+0x8c0>
					grid6[i]=grid[i+1];
 8002f06:	78e3      	ldrb	r3, [r4, #3]
				for(i=0; i<j-1; i++) {
 8002f08:	2803      	cmp	r0, #3
					grid6[i]=grid[i+1];
 8002f0a:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
				for(i=0; i<j-1; i++) {
 8002f0e:	d011      	beq.n	8002f34 <get_wspr_channel_symbols+0x8c0>
					grid6[i]=grid[i+1];
 8002f10:	7923      	ldrb	r3, [r4, #4]
				for(i=0; i<j-1; i++) {
 8002f12:	2804      	cmp	r0, #4
					grid6[i]=grid[i+1];
 8002f14:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
				for(i=0; i<j-1; i++) {
 8002f18:	d00c      	beq.n	8002f34 <get_wspr_channel_symbols+0x8c0>
					grid6[i]=grid[i+1];
 8002f1a:	7963      	ldrb	r3, [r4, #5]
				for(i=0; i<j-1; i++) {
 8002f1c:	2805      	cmp	r0, #5
					grid6[i]=grid[i+1];
 8002f1e:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				for(i=0; i<j-1; i++) {
 8002f22:	d007      	beq.n	8002f34 <get_wspr_channel_symbols+0x8c0>
					grid6[i]=grid[i+1];
 8002f24:	79a3      	ldrb	r3, [r4, #6]
				for(i=0; i<j-1; i++) {
 8002f26:	2806      	cmp	r0, #6
					grid6[i]=grid[i+1];
 8002f28:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				for(i=0; i<j-1; i++) {
 8002f2c:	d002      	beq.n	8002f34 <get_wspr_channel_symbols+0x8c0>
					grid6[i]=grid[i+1];
 8002f2e:	79e3      	ldrb	r3, [r4, #7]
 8002f30:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				grid6[5]=grid[0];
 8002f34:	7823      	ldrb	r3, [r4, #0]
				n = pack_call(grid6);
 8002f36:	ee18 0a10 	vmov	r0, s16
				grid6[5]=grid[0];
 8002f3a:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				n = pack_call(grid6);
 8002f3e:	f7ff fad1 	bl	80024e4 <pack_call>
 8002f42:	4604      	mov	r4, r0
 8002f44:	e58a      	b.n	8002a5c <get_wspr_channel_symbols+0x3e8>
			while (p < 162) {
 8002f46:	f1bc 0fa1 	cmp.w	ip, #161	; 0xa1
 8002f4a:	f10e 0e01 	add.w	lr, lr, #1
 8002f4e:	f67f aec7 	bls.w	8002ce0 <get_wspr_channel_symbols+0x66c>
 8002f52:	e70a      	b.n	8002d6a <get_wspr_channel_symbols+0x6f6>
				while (length > 12)
 8002f54:	280c      	cmp	r0, #12
 8002f56:	f240 81ac 	bls.w	80032b2 <get_wspr_channel_symbols+0xc3e>
 8002f5a:	360c      	adds	r6, #12
			a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4619      	mov	r1, r3
 8002f60:	46a6      	mov	lr, r4
					c += k[4] + (((uint32_t)k[5])<<16);
 8002f62:	f836 cc02 	ldrh.w	ip, [r6, #-2]
					length -= 12;
 8002f66:	380c      	subs	r0, #12
					c += k[4] + (((uint32_t)k[5])<<16);
 8002f68:	f836 4c04 	ldrh.w	r4, [r6, #-4]
				while (length > 12)
 8002f6c:	280c      	cmp	r0, #12
					c += k[4] + (((uint32_t)k[5])<<16);
 8002f6e:	eb04 440c 	add.w	r4, r4, ip, lsl #16
					a += k[0] + (((uint32_t)k[1])<<16);
 8002f72:	f836 cc0a 	ldrh.w	ip, [r6, #-10]
					c += k[4] + (((uint32_t)k[5])<<16);
 8002f76:	4422      	add	r2, r4
 8002f78:	4614      	mov	r4, r2
					a += k[0] + (((uint32_t)k[1])<<16);
 8002f7a:	f836 2c0c 	ldrh.w	r2, [r6, #-12]
					mix(a,b,c);
 8002f7e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
					b += k[2] + (((uint32_t)k[3])<<16);
 8002f82:	f836 cc06 	ldrh.w	ip, [r6, #-6]
					mix(a,b,c);
 8002f86:	eba2 0204 	sub.w	r2, r2, r4
 8002f8a:	441a      	add	r2, r3
					b += k[2] + (((uint32_t)k[3])<<16);
 8002f8c:	f836 3c08 	ldrh.w	r3, [r6, #-8]
 8002f90:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 8002f94:	46b4      	mov	ip, r6
					mix(a,b,c);
 8002f96:	ea82 7234 	eor.w	r2, r2, r4, ror #28
				while (length > 12)
 8002f9a:	f106 060c 	add.w	r6, r6, #12
					b += k[2] + (((uint32_t)k[3])<<16);
 8002f9e:	440b      	add	r3, r1
					mix(a,b,c);
 8002fa0:	eb03 0104 	add.w	r1, r3, r4
 8002fa4:	eba3 0302 	sub.w	r3, r3, r2
 8002fa8:	ea83 63b2 	eor.w	r3, r3, r2, ror #26
 8002fac:	440a      	add	r2, r1
 8002fae:	eba1 0103 	sub.w	r1, r1, r3
 8002fb2:	ea81 6133 	eor.w	r1, r1, r3, ror #24
 8002fb6:	4413      	add	r3, r2
 8002fb8:	eba2 0201 	sub.w	r2, r2, r1
 8002fbc:	eb01 0403 	add.w	r4, r1, r3
 8002fc0:	ea82 4231 	eor.w	r2, r2, r1, ror #16
 8002fc4:	eba3 0302 	sub.w	r3, r3, r2
 8002fc8:	ea83 3172 	eor.w	r1, r3, r2, ror #13
 8002fcc:	eb02 0304 	add.w	r3, r2, r4
 8002fd0:	eba4 0201 	sub.w	r2, r4, r1
 8002fd4:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8002fd8:	4419      	add	r1, r3
				while (length > 12)
 8002fda:	d8c2      	bhi.n	8002f62 <get_wspr_channel_symbols+0x8ee>
 8002fdc:	4674      	mov	r4, lr
 8002fde:	46e0      	mov	r8, ip
				switch(length)
 8002fe0:	3801      	subs	r0, #1
 8002fe2:	280b      	cmp	r0, #11
 8002fe4:	f63f af73 	bhi.w	8002ece <get_wspr_channel_symbols+0x85a>
 8002fe8:	a601      	add	r6, pc, #4	; (adr r6, 8002ff0 <get_wspr_channel_symbols+0x97c>)
 8002fea:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 8002fee:	bf00      	nop
 8002ff0:	08002e97 	.word	0x08002e97
 8002ff4:	080030a9 	.word	0x080030a9
 8002ff8:	080030a1 	.word	0x080030a1
 8002ffc:	080031a5 	.word	0x080031a5
 8003000:	0800319f 	.word	0x0800319f
 8003004:	08003189 	.word	0x08003189
 8003008:	08003181 	.word	0x08003181
 800300c:	08003163 	.word	0x08003163
 8003010:	0800315d 	.word	0x0800315d
 8003014:	08003139 	.word	0x08003139
 8003018:	08003131 	.word	0x08003131
 800301c:	080031b5 	.word	0x080031b5
				for (i=0; i<i1; i++) {
 8003020:	b300      	cbz	r0, 8003064 <get_wspr_channel_symbols+0x9f0>
					call6[i]=callsign[i];
 8003022:	7823      	ldrb	r3, [r4, #0]
				for (i=0; i<i1; i++) {
 8003024:	2801      	cmp	r0, #1
					call6[i]=callsign[i];
 8003026:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
				for (i=0; i<i1; i++) {
 800302a:	d01b      	beq.n	8003064 <get_wspr_channel_symbols+0x9f0>
					call6[i]=callsign[i];
 800302c:	7863      	ldrb	r3, [r4, #1]
				for (i=0; i<i1; i++) {
 800302e:	2802      	cmp	r0, #2
					call6[i]=callsign[i];
 8003030:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
				for (i=0; i<i1; i++) {
 8003034:	d016      	beq.n	8003064 <get_wspr_channel_symbols+0x9f0>
					call6[i]=callsign[i];
 8003036:	78a3      	ldrb	r3, [r4, #2]
				for (i=0; i<i1; i++) {
 8003038:	2803      	cmp	r0, #3
					call6[i]=callsign[i];
 800303a:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
				for (i=0; i<i1; i++) {
 800303e:	d011      	beq.n	8003064 <get_wspr_channel_symbols+0x9f0>
					call6[i]=callsign[i];
 8003040:	78e3      	ldrb	r3, [r4, #3]
				for (i=0; i<i1; i++) {
 8003042:	2804      	cmp	r0, #4
					call6[i]=callsign[i];
 8003044:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
				for (i=0; i<i1; i++) {
 8003048:	d00c      	beq.n	8003064 <get_wspr_channel_symbols+0x9f0>
					call6[i]=callsign[i];
 800304a:	7923      	ldrb	r3, [r4, #4]
				for (i=0; i<i1; i++) {
 800304c:	2805      	cmp	r0, #5
					call6[i]=callsign[i];
 800304e:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
				for (i=0; i<i1; i++) {
 8003052:	d007      	beq.n	8003064 <get_wspr_channel_symbols+0x9f0>
					call6[i]=callsign[i];
 8003054:	7963      	ldrb	r3, [r4, #5]
				for (i=0; i<i1; i++) {
 8003056:	2806      	cmp	r0, #6
					call6[i]=callsign[i];
 8003058:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
				for (i=0; i<i1; i++) {
 800305c:	d002      	beq.n	8003064 <get_wspr_channel_symbols+0x9f0>
					call6[i]=callsign[i];
 800305e:	79a3      	ldrb	r3, [r4, #6]
 8003060:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				call6[i] = '\0';
 8003064:	f107 0210 	add.w	r2, r7, #16
 8003068:	f506 73d0 	add.w	r3, r6, #416	; 0x1a0
 800306c:	4413      	add	r3, r2
				*n=pack_call(call6);
 800306e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8003072:	4610      	mov	r0, r2
 8003074:	ee08 2a10 	vmov	s16, r2
				call6[i] = '\0';
 8003078:	2200      	movs	r2, #0
 800307a:	f803 2cb0 	strb.w	r2, [r3, #-176]
				*n=pack_call(call6);
 800307e:	f7ff fa31 	bl	80024e4 <pack_call>
				int nc = callsign[i1+1];
 8003082:	4653      	mov	r3, sl
				*n=pack_call(call6);
 8003084:	4604      	mov	r4, r0
				int nc = callsign[i1+1];
 8003086:	4433      	add	r3, r6
 8003088:	785a      	ldrb	r2, [r3, #1]
				if( nc >= 48 && nc <= 57 ) {
 800308a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800308e:	2b09      	cmp	r3, #9
 8003090:	f200 80a6 	bhi.w	80031e0 <get_wspr_channel_symbols+0xb6c>
				*m=60000-32768+*m;
 8003094:	f646 2330 	movw	r3, #27184	; 0x6a30
 8003098:	4413      	add	r3, r2
				m=128*ng+ntype+64;
 800309a:	01db      	lsls	r3, r3, #7
 800309c:	f7ff bbbd 	b.w	800281a <get_wspr_channel_symbols+0x1a6>
				case 3 : a+=((uint32_t)k8[2])<<16;      /* fall through */
 80030a0:	f898 0002 	ldrb.w	r0, [r8, #2]
 80030a4:	eb03 4300 	add.w	r3, r3, r0, lsl #16
				case 2 : a+=k[0];
 80030a8:	f8b8 0000 	ldrh.w	r0, [r8]
 80030ac:	4403      	add	r3, r0
				break;
 80030ae:	e6f5      	b.n	8002e9c <get_wspr_channel_symbols+0x828>
				case 12: c+=k[2]; b+=k[1]; a+=k[0]; break;
 80030b0:	4646      	mov	r6, r8
 80030b2:	f8d8 0008 	ldr.w	r0, [r8, #8]
				case 11: c+=k[2]&0xffffff; b+=k[1]; a+=k[0]; break;
 80030b6:	4402      	add	r2, r0
 80030b8:	6870      	ldr	r0, [r6, #4]
 80030ba:	4401      	add	r1, r0
 80030bc:	6830      	ldr	r0, [r6, #0]
 80030be:	4403      	add	r3, r0
 80030c0:	e6ec      	b.n	8002e9c <get_wspr_channel_symbols+0x828>
 80030c2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80030c6:	4646      	mov	r6, r8
 80030c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80030cc:	e7f3      	b.n	80030b6 <get_wspr_channel_symbols+0xa42>
 80030ce:	bf00      	nop
 80030d0:	08019fdb 	.word	0x08019fdb
				case 10: c+=k[2]&0xffff; b+=k[1]; a+=k[0]; break;
 80030d4:	4646      	mov	r6, r8
 80030d6:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 80030da:	e7ec      	b.n	80030b6 <get_wspr_channel_symbols+0xa42>
				case 9 : c+=k[2]&0xff; b+=k[1]; a+=k[0]; break;
 80030dc:	4646      	mov	r6, r8
 80030de:	f898 0008 	ldrb.w	r0, [r8, #8]
 80030e2:	e7e8      	b.n	80030b6 <get_wspr_channel_symbols+0xa42>
				case 8 : b+=k[1]; a+=k[0]; break;
 80030e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80030e8:	4401      	add	r1, r0
 80030ea:	f8d8 0000 	ldr.w	r0, [r8]
 80030ee:	4403      	add	r3, r0
 80030f0:	e6d4      	b.n	8002e9c <get_wspr_channel_symbols+0x828>
				case 7 : b+=k[1]&0xffffff; a+=k[0]; break;
 80030f2:	e9d8 6000 	ldrd	r6, r0, [r8]
 80030f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80030fa:	4433      	add	r3, r6
 80030fc:	4401      	add	r1, r0
 80030fe:	e6cd      	b.n	8002e9c <get_wspr_channel_symbols+0x828>
				case 6 : b+=k[1]&0xffff; a+=k[0]; break;
 8003100:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8003104:	4401      	add	r1, r0
 8003106:	f8d8 0000 	ldr.w	r0, [r8]
 800310a:	4403      	add	r3, r0
 800310c:	e6c6      	b.n	8002e9c <get_wspr_channel_symbols+0x828>
				case 5 : b+=k[1]&0xff; a+=k[0]; break;
 800310e:	f898 0004 	ldrb.w	r0, [r8, #4]
 8003112:	4401      	add	r1, r0
 8003114:	f8d8 0000 	ldr.w	r0, [r8]
 8003118:	4403      	add	r3, r0
 800311a:	e6bf      	b.n	8002e9c <get_wspr_channel_symbols+0x828>
				case 4 : a+=k[0]; break;
 800311c:	f8d8 0000 	ldr.w	r0, [r8]
 8003120:	4403      	add	r3, r0
 8003122:	e6bb      	b.n	8002e9c <get_wspr_channel_symbols+0x828>
				case 3 : a+=k[0]&0xffffff; break;
 8003124:	f8d8 0000 	ldr.w	r0, [r8]
 8003128:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800312c:	4403      	add	r3, r0
 800312e:	e6b5      	b.n	8002e9c <get_wspr_channel_symbols+0x828>
				case 11: c+=((uint32_t)k8[10])<<16;     /* fall through */
 8003130:	f898 000a 	ldrb.w	r0, [r8, #10]
 8003134:	eb02 4200 	add.w	r2, r2, r0, lsl #16
				b+=k[2]+(((uint32_t)k[3])<<16);
 8003138:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800313c:	4401      	add	r1, r0
				a+=k[0]+(((uint32_t)k[1])<<16);
 800313e:	f8b8 0000 	ldrh.w	r0, [r8]
 8003142:	4418      	add	r0, r3
				case 10: c+=k[4];
 8003144:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8003148:	441a      	add	r2, r3
				b+=k[2]+(((uint32_t)k[3])<<16);
 800314a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800314e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
				a+=k[0]+(((uint32_t)k[1])<<16);
 8003152:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8003156:	eb00 4303 	add.w	r3, r0, r3, lsl #16
				break;
 800315a:	e69f      	b.n	8002e9c <get_wspr_channel_symbols+0x828>
				case 9 : c+=k8[8];                      /* fall through */
 800315c:	f898 0008 	ldrb.w	r0, [r8, #8]
 8003160:	4402      	add	r2, r0
				case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 8003162:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8003166:	4401      	add	r1, r0
				a+=k[0]+(((uint32_t)k[1])<<16);
 8003168:	f8b8 0000 	ldrh.w	r0, [r8]
 800316c:	4418      	add	r0, r3
				case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 800316e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8003172:	eb01 4103 	add.w	r1, r1, r3, lsl #16
				a+=k[0]+(((uint32_t)k[1])<<16);
 8003176:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800317a:	eb00 4303 	add.w	r3, r0, r3, lsl #16
				break;
 800317e:	e68d      	b.n	8002e9c <get_wspr_channel_symbols+0x828>
				case 7 : b+=((uint32_t)k8[6])<<16;      /* fall through */
 8003180:	f898 0006 	ldrb.w	r0, [r8, #6]
 8003184:	eb01 4100 	add.w	r1, r1, r0, lsl #16
				a+=k[0]+(((uint32_t)k[1])<<16);
 8003188:	f8b8 0000 	ldrh.w	r0, [r8]
 800318c:	4418      	add	r0, r3
				case 6 : b+=k[2];
 800318e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003192:	4419      	add	r1, r3
				a+=k[0]+(((uint32_t)k[1])<<16);
 8003194:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8003198:	eb00 4303 	add.w	r3, r0, r3, lsl #16
				break;
 800319c:	e67e      	b.n	8002e9c <get_wspr_channel_symbols+0x828>
				case 5 : b+=k8[4];                      /* fall through */
 800319e:	f898 0004 	ldrb.w	r0, [r8, #4]
 80031a2:	4401      	add	r1, r0
				case 4 : a+=k[0]+(((uint32_t)k[1])<<16);
 80031a4:	f8b8 0000 	ldrh.w	r0, [r8]
 80031a8:	4418      	add	r0, r3
 80031aa:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80031ae:	eb00 4303 	add.w	r3, r0, r3, lsl #16
				break;
 80031b2:	e673      	b.n	8002e9c <get_wspr_channel_symbols+0x828>
				case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 80031b4:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 80031b8:	4402      	add	r2, r0
				b+=k[2]+(((uint32_t)k[3])<<16);
 80031ba:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80031be:	4401      	add	r1, r0
				a+=k[0]+(((uint32_t)k[1])<<16);
 80031c0:	f8b8 0000 	ldrh.w	r0, [r8]
 80031c4:	4418      	add	r0, r3
				case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 80031c6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80031ca:	eb02 4203 	add.w	r2, r2, r3, lsl #16
				b+=k[2]+(((uint32_t)k[3])<<16);
 80031ce:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80031d2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
				a+=k[0]+(((uint32_t)k[1])<<16);
 80031d6:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80031da:	eb00 4303 	add.w	r3, r0, r3, lsl #16
				break;
 80031de:	e65d      	b.n	8002e9c <get_wspr_channel_symbols+0x828>
				} else if ( nc >= 65 && nc <= 90 ) {
 80031e0:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 80031e4:	2b19      	cmp	r3, #25
 80031e6:	d854      	bhi.n	8003292 <get_wspr_channel_symbols+0xc1e>
				*m=60000-32768+*m;
 80031e8:	f646 2329 	movw	r3, #27177	; 0x6a29
 80031ec:	4413      	add	r3, r2
				m=128*ng+ntype+64;
 80031ee:	01db      	lsls	r3, r3, #7
 80031f0:	f7ff bb13 	b.w	800281a <get_wspr_channel_symbols+0x1a6>
				char const * pfx = strtok (callsign,"/");
 80031f4:	4936      	ldr	r1, [pc, #216]	; (80032d0 <get_wspr_channel_symbols+0xc5c>)
 80031f6:	4620      	mov	r0, r4
 80031f8:	f00d f9f2 	bl	80105e0 <strtok>
				char const * call = strtok(NULL," ");
 80031fc:	4935      	ldr	r1, [pc, #212]	; (80032d4 <get_wspr_channel_symbols+0xc60>)
				char const * pfx = strtok (callsign,"/");
 80031fe:	4606      	mov	r6, r0
				char const * call = strtok(NULL," ");
 8003200:	2000      	movs	r0, #0
 8003202:	f00d f9ed 	bl	80105e0 <strtok>
				*n = pack_call (call);
 8003206:	f7ff f96d 	bl	80024e4 <pack_call>
 800320a:	4604      	mov	r4, r0
				size_t plen=strlen (pfx);
 800320c:	4630      	mov	r0, r6
 800320e:	f7fd f867 	bl	80002e0 <strlen>
				if( plen ==1 ) {
 8003212:	2801      	cmp	r0, #1
 8003214:	d042      	beq.n	800329c <get_wspr_channel_symbols+0xc28>
				} else if( plen == 2 ) {
 8003216:	2802      	cmp	r0, #2
 8003218:	d03e      	beq.n	8003298 <get_wspr_channel_symbols+0xc24>
				for (i=0; i<plen; i++) {
 800321a:	2800      	cmp	r0, #0
 800321c:	d050      	beq.n	80032c0 <get_wspr_channel_symbols+0xc4c>
					*m=0;
 800321e:	2300      	movs	r3, #0
 8003220:	f10a 3cff 	add.w	ip, sl, #4294967295
 8003224:	46d0      	mov	r8, sl
					} else if ( nc >= 65 && nc <= 90 ) {
 8003226:	4662      	mov	r2, ip
					int nc = callsign[i];
 8003228:	f81c 6f01 	ldrb.w	r6, [ip, #1]!
					if( nc >= 48 && nc <= 57 ) {
 800322c:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
					} else if ( nc >= 65 && nc <= 90 ) {
 8003230:	f1a6 0e41 	sub.w	lr, r6, #65	; 0x41
					if( nc >= 48 && nc <= 57 ) {
 8003234:	2909      	cmp	r1, #9
 8003236:	d906      	bls.n	8003246 <get_wspr_channel_symbols+0xbd2>
					} else if ( nc >= 65 && nc <= 90 ) {
 8003238:	f1be 0f19 	cmp.w	lr, #25
						nc=36;
 800323c:	f04f 0124 	mov.w	r1, #36	; 0x24
						nc=nc-65+10;
 8003240:	bf98      	it	ls
 8003242:	f1a6 0137 	subls.w	r1, r6, #55	; 0x37
				for (i=0; i<plen; i++) {
 8003246:	4646      	mov	r6, r8
 8003248:	3202      	adds	r2, #2
 800324a:	1b92      	subs	r2, r2, r6
					*m=37*(*m)+nc;
 800324c:	eb03 06c3 	add.w	r6, r3, r3, lsl #3
				for (i=0; i<plen; i++) {
 8003250:	4290      	cmp	r0, r2
					*m=37*(*m)+nc;
 8003252:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8003256:	440b      	add	r3, r1
				for (i=0; i<plen; i++) {
 8003258:	d8e5      	bhi.n	8003226 <get_wspr_channel_symbols+0xbb2>
				if( *m > 32768 ) {
 800325a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800325e:	dd20      	ble.n	80032a2 <get_wspr_channel_symbols+0xc2e>
					*m=*m-32768;
 8003260:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003264:	f507 7180 	add.w	r1, r7, #256	; 0x100
					*nadd=1;
 8003268:	2201      	movs	r2, #1
				m=128*ng+ntype+64;
 800326a:	01db      	lsls	r3, r3, #7
 800326c:	ee08 1a10 	vmov	s16, r1
 8003270:	f7ff bad4 	b.w	800281c <get_wspr_channel_symbols+0x1a8>
				return 36;
 8003274:	2124      	movs	r1, #36	; 0x24
 8003276:	f7ff bbdc 	b.w	8002a32 <get_wspr_channel_symbols+0x3be>
			a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 800327a:	461a      	mov	r2, r3
 800327c:	4619      	mov	r1, r3
 800327e:	e5cf      	b.n	8002e20 <get_wspr_channel_symbols+0x7ac>
				return 36;
 8003280:	2224      	movs	r2, #36	; 0x24
 8003282:	f7ff bbb9 	b.w	80029f8 <get_wspr_channel_symbols+0x384>
 8003286:	2324      	movs	r3, #36	; 0x24
 8003288:	f7ff bba7 	b.w	80029da <get_wspr_channel_symbols+0x366>
 800328c:	2024      	movs	r0, #36	; 0x24
 800328e:	f7ff bbc1 	b.w	8002a14 <get_wspr_channel_symbols+0x3a0>
 8003292:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <get_wspr_channel_symbols+0xc64>)
				*m=60000-32768+*m;
 8003294:	f7ff bac1 	b.w	800281a <get_wspr_channel_symbols+0x1a6>
					*m=36;
 8003298:	2324      	movs	r3, #36	; 0x24
 800329a:	e7c1      	b.n	8003220 <get_wspr_channel_symbols+0xbac>
					*m=37*(*m)+36;
 800329c:	f44f 63ab 	mov.w	r3, #1368	; 0x558
 80032a0:	e7be      	b.n	8003220 <get_wspr_channel_symbols+0xbac>
 80032a2:	f507 7180 	add.w	r1, r7, #256	; 0x100
				m=128*ng+ntype+64;
 80032a6:	01db      	lsls	r3, r3, #7
				*nadd=0;
 80032a8:	2200      	movs	r2, #0
 80032aa:	ee08 1a10 	vmov	s16, r1
 80032ae:	f7ff bab5 	b.w	800281c <get_wspr_channel_symbols+0x1a8>
			a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 80032b2:	461a      	mov	r2, r3
 80032b4:	4619      	mov	r1, r3
 80032b6:	e693      	b.n	8002fe0 <get_wspr_channel_symbols+0x96c>
 80032b8:	461a      	mov	r2, r3
 80032ba:	4619      	mov	r1, r3
 80032bc:	f7ff bb46 	b.w	800294c <get_wspr_channel_symbols+0x2d8>
 80032c0:	f507 7180 	add.w	r1, r7, #256	; 0x100
				for (i=0; i<plen; i++) {
 80032c4:	4603      	mov	r3, r0
				*nadd=0;
 80032c6:	4602      	mov	r2, r0
 80032c8:	ee08 1a10 	vmov	s16, r1
 80032cc:	f7ff baa6 	b.w	800281c <get_wspr_channel_symbols+0x1a8>
 80032d0:	08019eb8 	.word	0x08019eb8
 80032d4:	0801a094 	.word	0x0801a094
 80032d8:	00354300 	.word	0x00354300

080032dc <SendWSPR>:
{
 80032dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void) get_wspr_channel_symbols("<I4NZX> JN62KS 30", syms);
 80032e0:	4935      	ldr	r1, [pc, #212]	; (80033b8 <SendWSPR+0xdc>)
{
 80032e2:	b083      	sub	sp, #12
	(void) get_wspr_channel_symbols("<I4NZX> JN62KS 30", syms);
 80032e4:	4835      	ldr	r0, [pc, #212]	; (80033bc <SendWSPR+0xe0>)
 80032e6:	f7ff f9c5 	bl	8002674 <get_wspr_channel_symbols>
	for (i=0;i<162;i++)
 80032ea:	2300      	movs	r3, #0
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	9b01      	ldr	r3, [sp, #4]
 80032f0:	2ba1      	cmp	r3, #161	; 0xa1
 80032f2:	d80b      	bhi.n	800330c <SendWSPR+0x30>
 80032f4:	4930      	ldr	r1, [pc, #192]	; (80033b8 <SendWSPR+0xdc>)
		syms[i] = i & 3;
 80032f6:	9a01      	ldr	r2, [sp, #4]
 80032f8:	9801      	ldr	r0, [sp, #4]
	for (i=0;i<162;i++)
 80032fa:	9b01      	ldr	r3, [sp, #4]
		syms[i] = i & 3;
 80032fc:	f002 0203 	and.w	r2, r2, #3
	for (i=0;i<162;i++)
 8003300:	3301      	adds	r3, #1
		syms[i] = i & 3;
 8003302:	540a      	strb	r2, [r1, r0]
	for (i=0;i<162;i++)
 8003304:	9301      	str	r3, [sp, #4]
 8003306:	9b01      	ldr	r3, [sp, #4]
 8003308:	2ba1      	cmp	r3, #161	; 0xa1
 800330a:	d9f4      	bls.n	80032f6 <SendWSPR+0x1a>
			if(KEYER_DASH || KEYER_DOT){
 800330c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 80033c4 <SendWSPR+0xe8>
 8003310:	2140      	movs	r1, #64	; 0x40
				WSPRTone = syms[txIndex++];
 8003312:	4f2b      	ldr	r7, [pc, #172]	; (80033c0 <SendWSPR+0xe4>)
			if(KEYER_DASH || KEYER_DOT){
 8003314:	4650      	mov	r0, sl
 8003316:	f005 fa65 	bl	80087e4 <HAL_GPIO_ReadPin>
 800331a:	2800      	cmp	r0, #0
 800331c:	d049      	beq.n	80033b2 <SendWSPR+0xd6>
 800331e:	2180      	movs	r1, #128	; 0x80
 8003320:	4650      	mov	r0, sl
 8003322:	f005 fa5f 	bl	80087e4 <HAL_GPIO_ReadPin>
 8003326:	2800      	cmp	r0, #0
 8003328:	d043      	beq.n	80033b2 <SendWSPR+0xd6>
			TXSwitch(1);
 800332a:	2001      	movs	r0, #1
 800332c:	f000 ffe4 	bl	80042f8 <TXSwitch>
			CarrierEnable(1);
 8003330:	2001      	movs	r0, #1
 8003332:	f001 f845 	bl	80043c0 <CarrierEnable>
				if(KEYER_DASH || KEYER_DOT){
 8003336:	2140      	movs	r1, #64	; 0x40
 8003338:	4650      	mov	r0, sl
 800333a:	f005 fa53 	bl	80087e4 <HAL_GPIO_ReadPin>
 800333e:	b3c0      	cbz	r0, 80033b2 <SendWSPR+0xd6>
 8003340:	2180      	movs	r1, #128	; 0x80
 8003342:	4650      	mov	r0, sl
 8003344:	f005 fa4e 	bl	80087e4 <HAL_GPIO_ReadPin>
 8003348:	b398      	cbz	r0, 80033b2 <SendWSPR+0xd6>
				WSPRTone = syms[txIndex++];
 800334a:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <SendWSPR+0xdc>)
				WSPRStartTick = HAL_GetTick();
 800334c:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8003350:	4d19      	ldr	r5, [pc, #100]	; (80033b8 <SendWSPR+0xdc>)
				WSPRTone = syms[txIndex++];
 8003352:	781b      	ldrb	r3, [r3, #0]
				WSPRStartTick = HAL_GetTick();
 8003354:	f8df b070 	ldr.w	fp, [pc, #112]	; 80033c8 <SendWSPR+0xec>
 8003358:	f105 09a1 	add.w	r9, r5, #161	; 0xa1
					while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 800335c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80033cc <SendWSPR+0xf0>
				WSPRTone = syms[txIndex++];
 8003360:	703b      	strb	r3, [r7, #0]
				WSPRStartTick = HAL_GetTick();
 8003362:	f002 fab5 	bl	80058d0 <HAL_GetTick>
 8003366:	f8cb 0000 	str.w	r0, [fp]
					while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 800336a:	fba8 3406 	umull	r3, r4, r8, r6
 800336e:	08e4      	lsrs	r4, r4, #3
 8003370:	e005      	b.n	800337e <SendWSPR+0xa2>
						toglimi = HAL_GetTick() - WSPRStartTick;
 8003372:	f002 faad 	bl	80058d0 <HAL_GetTick>
 8003376:	f8db 3000 	ldr.w	r3, [fp]
 800337a:	1ac0      	subs	r0, r0, r3
 800337c:	9000      	str	r0, [sp, #0]
					while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 800337e:	f002 faa7 	bl	80058d0 <HAL_GetTick>
 8003382:	f8db 3000 	ldr.w	r3, [fp]
 8003386:	1ac0      	subs	r0, r0, r3
 8003388:	42a0      	cmp	r0, r4
 800338a:	d3f2      	bcc.n	8003372 <SendWSPR+0x96>
					WSPRTone = syms[txIndex++];
 800338c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
				while (txIndex < 162) {
 8003390:	f506 5600 	add.w	r6, r6, #8192	; 0x2000
 8003394:	454d      	cmp	r5, r9
					WSPRTone = syms[txIndex++];
 8003396:	703b      	strb	r3, [r7, #0]
				while (txIndex < 162) {
 8003398:	d1e7      	bne.n	800336a <SendWSPR+0x8e>
				TXSwitch(0);
 800339a:	2000      	movs	r0, #0
 800339c:	f000 ffac 	bl	80042f8 <TXSwitch>
				CarrierEnable(0);
 80033a0:	2000      	movs	r0, #0
 80033a2:	f001 f80d 	bl	80043c0 <CarrierEnable>
			if(KEYER_DASH || KEYER_DOT){
 80033a6:	2140      	movs	r1, #64	; 0x40
 80033a8:	4650      	mov	r0, sl
 80033aa:	f005 fa1b 	bl	80087e4 <HAL_GPIO_ReadPin>
 80033ae:	2800      	cmp	r0, #0
 80033b0:	d1b5      	bne.n	800331e <SendWSPR+0x42>
}
 80033b2:	b003      	add	sp, #12
 80033b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033b8:	24000764 	.word	0x24000764
 80033bc:	08019ec8 	.word	0x08019ec8
 80033c0:	240093f8 	.word	0x240093f8
 80033c4:	58020000 	.word	0x58020000
 80033c8:	24000760 	.word	0x24000760
 80033cc:	aaaaaaab 	.word	0xaaaaaaab

080033d0 <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non blocking mode
 * @param  AdcHandle : ADC handle

 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 80033d0:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80033d2:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 80033d4:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80033d8:	490a      	ldr	r1, [pc, #40]	; (8003404 <HAL_ADC_ConvCpltCallback+0x34>)
 80033da:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 80033de:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80033e2:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d1fa      	bne.n	80033de <HAL_ADC_ConvCpltCallback+0xe>
 80033e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80033ec:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[BSIZE/2], 2*BSIZE);
#endif
	ADC_Stream0_Handler(1);
 80033f0:	2001      	movs	r0, #1
 80033f2:	f7fd ffc7 	bl	8001384 <ADC_Stream0_Handler>
	/* Set variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = SET;
 80033f6:	4b04      	ldr	r3, [pc, #16]	; (8003408 <HAL_ADC_ConvCpltCallback+0x38>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	701a      	strb	r2, [r3, #0]
}
 80033fc:	bd08      	pop	{r3, pc}
 80033fe:	bf00      	nop
 8003400:	24009820 	.word	0x24009820
 8003404:	e000ed00 	.word	0xe000ed00
 8003408:	2400d9ca 	.word	0x2400d9ca

0800340c <HAL_ADC_ConvHalfCpltCallback>:
 * @brief  Conversion DMA half-transfer callback in non blocking mode
 * @param  hadc: ADC handle
 * */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800340c:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800340e:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8003410:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003414:	490a      	ldr	r1, [pc, #40]	; (8003440 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8003416:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800341a:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800341e:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8003420:	4293      	cmp	r3, r2
 8003422:	d1fa      	bne.n	800341a <HAL_ADC_ConvHalfCpltCallback+0xe>
 8003424:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003428:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[0], 2*BSIZE);
#endif
	ADC_Stream0_Handler(0);
 800342c:	2000      	movs	r0, #0
 800342e:	f7fd ffa9 	bl	8001384 <ADC_Stream0_Handler>
	/* Reset variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = RESET;
 8003432:	4b04      	ldr	r3, [pc, #16]	; (8003444 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]
}
 8003438:	bd08      	pop	{r3, pc}
 800343a:	bf00      	nop
 800343c:	24009420 	.word	0x24009420
 8003440:	e000ed00 	.word	0xe000ed00
 8003444:	2400d9ca 	.word	0x2400d9ca

08003448 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003448:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[BSIZE];
 800344a:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
	LED_RED_ON;
 800344c:	2201      	movs	r2, #1
	ValidAudioHalf = &AudioOut[BSIZE];
 800344e:	4c05      	ldr	r4, [pc, #20]	; (8003464 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
	LED_RED_ON;
 8003450:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003454:	4804      	ldr	r0, [pc, #16]	; (8003468 <HAL_DAC_ConvCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[BSIZE];
 8003456:	601c      	str	r4, [r3, #0]

	//	 __HAL_RCC_PLL2_DISABLE();
	//	__HAL_RCC_PLL2_CONFIG(4, 240, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();

}
 8003458:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_ON;
 800345c:	f005 b9c8 	b.w	80087f0 <HAL_GPIO_WritePin>
 8003460:	240083f4 	.word	0x240083f4
 8003464:	24001c20 	.word	0x24001c20
 8003468:	58020400 	.word	0x58020400

0800346c <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800346c:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[0];
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
	LED_RED_OFF;
 8003470:	2200      	movs	r2, #0
	ValidAudioHalf = &AudioOut[0];
 8003472:	4c05      	ldr	r4, [pc, #20]	; (8003488 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
	LED_RED_OFF;
 8003474:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003478:	4804      	ldr	r0, [pc, #16]	; (800348c <HAL_DAC_ConvHalfCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[0];
 800347a:	601c      	str	r4, [r3, #0]
	//	 __HAL_RCC_PLL2_DISABLE();
	//	 __HAL_RCC_PLL2_CONFIG(4, 120, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();
}
 800347c:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_OFF;
 8003480:	f005 b9b6 	b.w	80087f0 <HAL_GPIO_WritePin>
 8003484:	240083f4 	.word	0x240083f4
 8003488:	24001820 	.word	0x24001820
 800348c:	58020400 	.word	0x58020400

08003490 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
	OVFDetected = OVF_TIMEOUT;
	/* Reset register IER */
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8003490:	4907      	ldr	r1, [pc, #28]	; (80034b0 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
	OVFDetected = OVF_TIMEOUT;
 8003492:	2002      	movs	r0, #2
 8003494:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8003496:	6809      	ldr	r1, [r1, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8003498:	4a07      	ldr	r2, [pc, #28]	; (80034b8 <HAL_ADC_LevelOutOfWindowCallback+0x28>)
	OVFDetected = OVF_TIMEOUT;
 800349a:	8018      	strh	r0, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 800349c:	684b      	ldr	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 800349e:	6812      	ldr	r2, [r2, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80034a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034a4:	604b      	str	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80034a6:	6853      	ldr	r3, [r2, #4]
 80034a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ac:	6053      	str	r3, [r2, #4]
}
 80034ae:	4770      	bx	lr
 80034b0:	2400c43c 	.word	0x2400c43c
 80034b4:	24007274 	.word	0x24007274
 80034b8:	2400c4a0 	.word	0x2400c4a0

080034bc <DisplayStatus>:
	static char StringAGC[8];
	static char StringStep[8];
	static char StringTxPower[8];


	switch(Fstep)
 80034bc:	4b74      	ldr	r3, [pc, #464]	; (8003690 <DisplayStatus+0x1d4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
{
 80034c4:	b570      	push	{r4, r5, r6, lr}
 80034c6:	b08a      	sub	sp, #40	; 0x28
	switch(Fstep)
 80034c8:	f000 80d8 	beq.w	800367c <DisplayStatus+0x1c0>
 80034cc:	d81f      	bhi.n	800350e <DisplayStatus+0x52>
 80034ce:	2b0a      	cmp	r3, #10
 80034d0:	f000 80c6 	beq.w	8003660 <DisplayStatus+0x1a4>
 80034d4:	2b64      	cmp	r3, #100	; 0x64
 80034d6:	d110      	bne.n	80034fa <DisplayStatus+0x3e>
	{
	case 1:			strcpy(StringStep,"   1 "); break;
	case 10: 		strcpy(StringStep,"  10 "); break;
	case 100: 		strcpy(StringStep," 100 "); break;
 80034d8:	4b6e      	ldr	r3, [pc, #440]	; (8003694 <DisplayStatus+0x1d8>)
 80034da:	4a6f      	ldr	r2, [pc, #444]	; (8003698 <DisplayStatus+0x1dc>)
 80034dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80034e0:	6010      	str	r0, [r2, #0]
 80034e2:	8091      	strh	r1, [r2, #4]
	case 9000: 		strcpy(StringStep,"   9K"); break;
	case 10000:		strcpy(StringStep,"  10K"); break;
	case 100000: 	strcpy(StringStep," 100K"); break;
	}

	switch(CurrentMode)
 80034e4:	4b6d      	ldr	r3, [pc, #436]	; (800369c <DisplayStatus+0x1e0>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	f200 80ce 	bhi.w	800368a <DisplayStatus+0x1ce>
 80034ee:	e8df f013 	tbh	[pc, r3, lsl #1]
 80034f2:	00ab      	.short	0x00ab
 80034f4:	008500a7 	.word	0x008500a7
 80034f8:	0029      	.short	0x0029
	switch(Fstep)
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	f040 80aa 	bne.w	8003654 <DisplayStatus+0x198>
	case 1:			strcpy(StringStep,"   1 "); break;
 8003500:	4b67      	ldr	r3, [pc, #412]	; (80036a0 <DisplayStatus+0x1e4>)
 8003502:	4a65      	ldr	r2, [pc, #404]	; (8003698 <DisplayStatus+0x1dc>)
 8003504:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003508:	6010      	str	r0, [r2, #0]
 800350a:	8091      	strh	r1, [r2, #4]
 800350c:	e7ea      	b.n	80034e4 <DisplayStatus+0x28>
	switch(Fstep)
 800350e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003512:	4293      	cmp	r3, r2
 8003514:	f000 80ab 	beq.w	800366e <DisplayStatus+0x1b2>
 8003518:	4a62      	ldr	r2, [pc, #392]	; (80036a4 <DisplayStatus+0x1e8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d106      	bne.n	800352c <DisplayStatus+0x70>
	case 100000: 	strcpy(StringStep," 100K"); break;
 800351e:	4b62      	ldr	r3, [pc, #392]	; (80036a8 <DisplayStatus+0x1ec>)
 8003520:	4a5d      	ldr	r2, [pc, #372]	; (8003698 <DisplayStatus+0x1dc>)
 8003522:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003526:	6010      	str	r0, [r2, #0]
 8003528:	8091      	strh	r1, [r2, #4]
 800352a:	e7db      	b.n	80034e4 <DisplayStatus+0x28>
	switch(Fstep)
 800352c:	f242 3228 	movw	r2, #9000	; 0x2328
 8003530:	4293      	cmp	r3, r2
 8003532:	f040 808f 	bne.w	8003654 <DisplayStatus+0x198>
	case 9000: 		strcpy(StringStep,"   9K"); break;
 8003536:	4b5d      	ldr	r3, [pc, #372]	; (80036ac <DisplayStatus+0x1f0>)
 8003538:	4a57      	ldr	r2, [pc, #348]	; (8003698 <DisplayStatus+0x1dc>)
 800353a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800353e:	6010      	str	r0, [r2, #0]
 8003540:	8091      	strh	r1, [r2, #4]
 8003542:	e7cf      	b.n	80034e4 <DisplayStatus+0x28>
	{
	case LSB: strcpy(StringMode,"LSB"); break;
	case USB: strcpy(StringMode,"USB"); break;
	case AM: strcpy(StringMode,"AM"); break;
	case CW: strcpy(StringMode,"CW"); break;
 8003544:	4b5a      	ldr	r3, [pc, #360]	; (80036b0 <DisplayStatus+0x1f4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4e5a      	ldr	r6, [pc, #360]	; (80036b4 <DisplayStatus+0x1f8>)
 800354a:	0c19      	lsrs	r1, r3, #16
 800354c:	8033      	strh	r3, [r6, #0]
 800354e:	70b1      	strb	r1, [r6, #2]
	}
	switch (CurrentAGC)
 8003550:	4b59      	ldr	r3, [pc, #356]	; (80036b8 <DisplayStatus+0x1fc>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d058      	beq.n	800360a <DisplayStatus+0x14e>
 8003558:	2b01      	cmp	r3, #1
 800355a:	d179      	bne.n	8003650 <DisplayStatus+0x194>
	{
	case Fast: strcpy(StringAGC,"Fast"); break;
	case Slow: strcpy(StringAGC,"Slow"); break;
 800355c:	4b57      	ldr	r3, [pc, #348]	; (80036bc <DisplayStatus+0x200>)
 800355e:	4d58      	ldr	r5, [pc, #352]	; (80036c0 <DisplayStatus+0x204>)
 8003560:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003564:	6028      	str	r0, [r5, #0]
 8003566:	7129      	strb	r1, [r5, #4]
	}
	switch (CurrentBW)
 8003568:	4b56      	ldr	r3, [pc, #344]	; (80036c4 <DisplayStatus+0x208>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d056      	beq.n	800361e <DisplayStatus+0x162>
 8003570:	2b01      	cmp	r3, #1
 8003572:	d16b      	bne.n	800364c <DisplayStatus+0x190>
	{
	case Narrow: strcpy(StringWidth,"Narrow"); break;
	case Wide: strcpy(StringWidth,"Wide"); break;
 8003574:	4b54      	ldr	r3, [pc, #336]	; (80036c8 <DisplayStatus+0x20c>)
 8003576:	4c55      	ldr	r4, [pc, #340]	; (80036cc <DisplayStatus+0x210>)
 8003578:	e893 0003 	ldmia.w	r3, {r0, r1}
 800357c:	6020      	str	r0, [r4, #0]
 800357e:	7121      	strb	r1, [r4, #4]
	}
	switch (TxPowerOut)
 8003580:	4b53      	ldr	r3, [pc, #332]	; (80036d0 <DisplayStatus+0x214>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003588:	d056      	beq.n	8003638 <DisplayStatus+0x17c>
 800358a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800358e:	428b      	cmp	r3, r1
 8003590:	d062      	beq.n	8003658 <DisplayStatus+0x19c>
 8003592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003596:	4b4f      	ldr	r3, [pc, #316]	; (80036d4 <DisplayStatus+0x218>)
	{
	case LOW_POWER_OUT: strcpy(StringTxPower,"Low"); break;
 8003598:	bf04      	itt	eq
 800359a:	494f      	ldreq	r1, [pc, #316]	; (80036d8 <DisplayStatus+0x21c>)
 800359c:	6019      	streq	r1, [r3, #0]
	case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
	case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
	}
	sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s AGG %s ERR %d WPM %d PWR %s Volume %1.1f   \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, StringAGC, TXFreqError, keyer_speed, StringTxPower, volume);
 800359e:	9306      	str	r3, [sp, #24]
 80035a0:	4b4e      	ldr	r3, [pc, #312]	; (80036dc <DisplayStatus+0x220>)
 80035a2:	9503      	str	r5, [sp, #12]
 80035a4:	9402      	str	r4, [sp, #8]
 80035a6:	ed93 7a00 	vldr	s14, [r3]
 80035aa:	4b4d      	ldr	r3, [pc, #308]	; (80036e0 <DisplayStatus+0x224>)
 80035ac:	9601      	str	r6, [sp, #4]
 80035ae:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	484b      	ldr	r0, [pc, #300]	; (80036e4 <DisplayStatus+0x228>)
 80035b6:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80036e8 <DisplayStatus+0x22c>
 80035ba:	6804      	ldr	r4, [r0, #0]
 80035bc:	9304      	str	r3, [sp, #16]
 80035be:	4b4b      	ldr	r3, [pc, #300]	; (80036ec <DisplayStatus+0x230>)
 80035c0:	9200      	str	r2, [sp, #0]
 80035c2:	9405      	str	r4, [sp, #20]
 80035c4:	494a      	ldr	r1, [pc, #296]	; (80036f0 <DisplayStatus+0x234>)
 80035c6:	484b      	ldr	r0, [pc, #300]	; (80036f4 <DisplayStatus+0x238>)
 80035c8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80035cc:	edd3 7a00 	vldr	s15, [r3]
 80035d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035d8:	ec53 2b17 	vmov	r2, r3, d7
 80035dc:	f00c ffae 	bl	801053c <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 80035e0:	4844      	ldr	r0, [pc, #272]	; (80036f4 <DisplayStatus+0x238>)
 80035e2:	f7fc fe7d 	bl	80002e0 <strlen>
 80035e6:	4601      	mov	r1, r0
 80035e8:	4842      	ldr	r0, [pc, #264]	; (80036f4 <DisplayStatus+0x238>)
 80035ea:	b289      	uxth	r1, r1
 80035ec:	f00a ff76 	bl	800e4dc <CDC_Transmit_FS>
	HAL_Delay(1);
 80035f0:	2001      	movs	r0, #1
	PrintUI(UartTXString);
}
 80035f2:	b00a      	add	sp, #40	; 0x28
 80035f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(1);
 80035f8:	f002 b970 	b.w	80058dc <HAL_Delay>
	case USB: strcpy(StringMode,"USB"); break;
 80035fc:	4b3e      	ldr	r3, [pc, #248]	; (80036f8 <DisplayStatus+0x23c>)
 80035fe:	4e2d      	ldr	r6, [pc, #180]	; (80036b4 <DisplayStatus+0x1f8>)
 8003600:	6033      	str	r3, [r6, #0]
	switch (CurrentAGC)
 8003602:	4b2d      	ldr	r3, [pc, #180]	; (80036b8 <DisplayStatus+0x1fc>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1a6      	bne.n	8003558 <DisplayStatus+0x9c>
	case Fast: strcpy(StringAGC,"Fast"); break;
 800360a:	4b3c      	ldr	r3, [pc, #240]	; (80036fc <DisplayStatus+0x240>)
 800360c:	4d2c      	ldr	r5, [pc, #176]	; (80036c0 <DisplayStatus+0x204>)
 800360e:	e893 0003 	ldmia.w	r3, {r0, r1}
	switch (CurrentBW)
 8003612:	4b2c      	ldr	r3, [pc, #176]	; (80036c4 <DisplayStatus+0x208>)
	case Fast: strcpy(StringAGC,"Fast"); break;
 8003614:	6028      	str	r0, [r5, #0]
	switch (CurrentBW)
 8003616:	781b      	ldrb	r3, [r3, #0]
	case Fast: strcpy(StringAGC,"Fast"); break;
 8003618:	7129      	strb	r1, [r5, #4]
	switch (CurrentBW)
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1a8      	bne.n	8003570 <DisplayStatus+0xb4>
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 800361e:	4b38      	ldr	r3, [pc, #224]	; (8003700 <DisplayStatus+0x244>)
 8003620:	4c2a      	ldr	r4, [pc, #168]	; (80036cc <DisplayStatus+0x210>)
 8003622:	e893 0003 	ldmia.w	r3, {r0, r1}
	switch (TxPowerOut)
 8003626:	4b2a      	ldr	r3, [pc, #168]	; (80036d0 <DisplayStatus+0x214>)
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 8003628:	80a1      	strh	r1, [r4, #4]
 800362a:	0c09      	lsrs	r1, r1, #16
	switch (TxPowerOut)
 800362c:	681b      	ldr	r3, [r3, #0]
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 800362e:	6020      	str	r0, [r4, #0]
	switch (TxPowerOut)
 8003630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 8003634:	71a1      	strb	r1, [r4, #6]
	switch (TxPowerOut)
 8003636:	d1a8      	bne.n	800358a <DisplayStatus+0xce>
	case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
 8003638:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <DisplayStatus+0x218>)
 800363a:	4932      	ldr	r1, [pc, #200]	; (8003704 <DisplayStatus+0x248>)
 800363c:	6019      	str	r1, [r3, #0]
 800363e:	e7ae      	b.n	800359e <DisplayStatus+0xe2>
	case LSB: strcpy(StringMode,"LSB"); break;
 8003640:	4e1c      	ldr	r6, [pc, #112]	; (80036b4 <DisplayStatus+0x1f8>)
 8003642:	4b31      	ldr	r3, [pc, #196]	; (8003708 <DisplayStatus+0x24c>)
 8003644:	6033      	str	r3, [r6, #0]
 8003646:	e783      	b.n	8003550 <DisplayStatus+0x94>
	case AM: strcpy(StringMode,"AM"); break;
 8003648:	4b30      	ldr	r3, [pc, #192]	; (800370c <DisplayStatus+0x250>)
 800364a:	e77c      	b.n	8003546 <DisplayStatus+0x8a>
 800364c:	4c1f      	ldr	r4, [pc, #124]	; (80036cc <DisplayStatus+0x210>)
 800364e:	e797      	b.n	8003580 <DisplayStatus+0xc4>
 8003650:	4d1b      	ldr	r5, [pc, #108]	; (80036c0 <DisplayStatus+0x204>)
 8003652:	e789      	b.n	8003568 <DisplayStatus+0xac>
 8003654:	4a10      	ldr	r2, [pc, #64]	; (8003698 <DisplayStatus+0x1dc>)
 8003656:	e745      	b.n	80034e4 <DisplayStatus+0x28>
	case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
 8003658:	4b1e      	ldr	r3, [pc, #120]	; (80036d4 <DisplayStatus+0x218>)
 800365a:	492d      	ldr	r1, [pc, #180]	; (8003710 <DisplayStatus+0x254>)
 800365c:	6019      	str	r1, [r3, #0]
 800365e:	e79e      	b.n	800359e <DisplayStatus+0xe2>
	case 10: 		strcpy(StringStep,"  10 "); break;
 8003660:	4b2c      	ldr	r3, [pc, #176]	; (8003714 <DisplayStatus+0x258>)
 8003662:	4a0d      	ldr	r2, [pc, #52]	; (8003698 <DisplayStatus+0x1dc>)
 8003664:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003668:	6010      	str	r0, [r2, #0]
 800366a:	8091      	strh	r1, [r2, #4]
 800366c:	e73a      	b.n	80034e4 <DisplayStatus+0x28>
	case 10000:		strcpy(StringStep,"  10K"); break;
 800366e:	4b2a      	ldr	r3, [pc, #168]	; (8003718 <DisplayStatus+0x25c>)
 8003670:	4a09      	ldr	r2, [pc, #36]	; (8003698 <DisplayStatus+0x1dc>)
 8003672:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003676:	6010      	str	r0, [r2, #0]
 8003678:	8091      	strh	r1, [r2, #4]
 800367a:	e733      	b.n	80034e4 <DisplayStatus+0x28>
	case 1000: 		strcpy(StringStep,"   1K"); break;
 800367c:	4b27      	ldr	r3, [pc, #156]	; (800371c <DisplayStatus+0x260>)
 800367e:	4a06      	ldr	r2, [pc, #24]	; (8003698 <DisplayStatus+0x1dc>)
 8003680:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003684:	6010      	str	r0, [r2, #0]
 8003686:	8091      	strh	r1, [r2, #4]
 8003688:	e72c      	b.n	80034e4 <DisplayStatus+0x28>
 800368a:	4e0a      	ldr	r6, [pc, #40]	; (80036b4 <DisplayStatus+0x1f8>)
 800368c:	e760      	b.n	8003550 <DisplayStatus+0x94>
 800368e:	bf00      	nop
 8003690:	24006250 	.word	0x24006250
 8003694:	0801a090 	.word	0x0801a090
 8003698:	240072b8 	.word	0x240072b8
 800369c:	2400202c 	.word	0x2400202c
 80036a0:	0801a080 	.word	0x0801a080
 80036a4:	000186a0 	.word	0x000186a0
 80036a8:	0801a0b0 	.word	0x0801a0b0
 80036ac:	0801a0a0 	.word	0x0801a0a0
 80036b0:	0801a0bc 	.word	0x0801a0bc
 80036b4:	240072b0 	.word	0x240072b0
 80036b8:	2400202a 	.word	0x2400202a
 80036bc:	0801a0c8 	.word	0x0801a0c8
 80036c0:	240072a8 	.word	0x240072a8
 80036c4:	2400202b 	.word	0x2400202b
 80036c8:	0801a0d8 	.word	0x0801a0d8
 80036cc:	240072c8 	.word	0x240072c8
 80036d0:	240072e8 	.word	0x240072e8
 80036d4:	240072c0 	.word	0x240072c0
 80036d8:	00776f4c 	.word	0x00776f4c
 80036dc:	2400d9cc 	.word	0x2400d9cc
 80036e0:	240072dc 	.word	0x240072dc
 80036e4:	2400c80c 	.word	0x2400c80c
 80036e8:	3a83126f 	.word	0x3a83126f
 80036ec:	24007264 	.word	0x24007264
 80036f0:	0801a0e0 	.word	0x0801a0e0
 80036f4:	240073f4 	.word	0x240073f4
 80036f8:	00425355 	.word	0x00425355
 80036fc:	0801a0c0 	.word	0x0801a0c0
 8003700:	0801a0d0 	.word	0x0801a0d0
 8003704:	0064694d 	.word	0x0064694d
 8003708:	0042534c 	.word	0x0042534c
 800370c:	0801a0b8 	.word	0x0801a0b8
 8003710:	0078614d 	.word	0x0078614d
 8003714:	0801a088 	.word	0x0801a088
 8003718:	0801a0a8 	.word	0x0801a0a8
 800371c:	0801a098 	.word	0x0801a098

08003720 <SetWSPRPLLCoeff>:
 * for 7040.1 PLL coeffs are N 450, M 17, P 94, FracDiv 48
 */


void SetWSPRPLLCoeff(double TXFreq, uint16_t *FracDivCoeff, uint16_t *FracPWMCoeff)
{
 8003720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
	uint32_t m, n, p, od;
	volatile uint32_t fm, fn, fp, fdiff, fod, FMaxErr, FracDiv, i;
	LastTXFreq = (float)TXFreq;
#define TEST_COEFF 50
	for (i = 0; i < 4; i++) {
 8003724:	2300      	movs	r3, #0
	LastTXFreq = (float)TXFreq;
 8003726:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 800372a:	4aa9      	ldr	r2, [pc, #676]	; (80039d0 <SetWSPRPLLCoeff+0x2b0>)
{
 800372c:	ed2d 8b02 	vpush	{d8}
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
 8003730:	f20f 298c 	addw	r9, pc, #652	; 0x28c
 8003734:	e9d9 8900 	ldrd	r8, r9, [r9]
{
 8003738:	b08f      	sub	sp, #60	; 0x3c
	LastTXFreq = (float)TXFreq;
 800373a:	edc2 7a00 	vstr	s15, [r2]
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
 800373e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
	for (i = 0; i < 4; i++) {
 8003742:	9305      	str	r3, [sp, #20]
 8003744:	9b05      	ldr	r3, [sp, #20]
 8003746:	2b03      	cmp	r3, #3
 8003748:	f200 80d0 	bhi.w	80038ec <SetWSPRPLLCoeff+0x1cc>
		for (m = 2; m <= 25; m++) //was 64
		{
			for (n = 2; n <= 512; n++) //was 1
			{
				for (p = 2; p <= 128; p += 2) {
					OutF = XTalFreq * n / m / p / od;
 800374c:	4ba1      	ldr	r3, [pc, #644]	; (80039d4 <SetWSPRPLLCoeff+0x2b4>)
 800374e:	4604      	mov	r4, r0
 8003750:	460d      	mov	r5, r1
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 8003752:	ed9f 8aa1 	vldr	s16, [pc, #644]	; 80039d8 <SetWSPRPLLCoeff+0x2b8>
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
							&& ((XTalFreq * n / m) > 150000000.0)
 8003756:	ed9f 2aa1 	vldr	s4, [pc, #644]	; 80039dc <SetWSPRPLLCoeff+0x2bc>
						MinDiff = abs(OutF - TF);

						fp = p;
						fn = n;
						fm = m;
						fod = od;
 800375a:	2001      	movs	r0, #1
					OutF = XTalFreq * n / m / p / od;
 800375c:	edd3 2a00 	vldr	s5, [r3]
 8003760:	f8df c288 	ldr.w	ip, [pc, #648]	; 80039ec <SetWSPRPLLCoeff+0x2cc>
							&& ((XTalFreq * n / m) < 960000000.0)) {
 8003764:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 80039e0 <SetWSPRPLLCoeff+0x2c0>
 8003768:	4e9e      	ldr	r6, [pc, #632]	; (80039e4 <SetWSPRPLLCoeff+0x2c4>)
		}
		if (fn < 511) {
			OutF = XTalFreq * fn / fm / fp / fod;
			OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
					* 8192 * 8); //FracDiv PWM has 8 levels
 800376a:	ed9f 3b97 	vldr	d3, [pc, #604]	; 80039c8 <SetWSPRPLLCoeff+0x2a8>
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 800376e:	ed9d 7a05 	vldr	s14, [sp, #20]
 8003772:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
		for (m = 2; m <= 25; m++) //was 64
 8003776:	2102      	movs	r1, #2
			for (n = 2; n <= 512; n++) //was 1
 8003778:	f240 2e01 	movw	lr, #513	; 0x201
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 800377c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003780:	ee27 7a08 	vmul.f32	s14, s14, s16
 8003784:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003788:	ee37 7b00 	vadd.f64	d7, d7, d0
 800378c:	ed8d 7b06 	vstr	d7, [sp, #24]
		MinDiff = 999999999;
 8003790:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
					OutF = XTalFreq * n / m / p / od;
 8003794:	ee07 1a90 	vmov	s15, r1
			for (n = 2; n <= 512; n++) //was 1
 8003798:	2202      	movs	r2, #2
					OutF = XTalFreq * n / m / p / od;
 800379a:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 800379e:	eec8 1a84 	vdiv.f32	s3, s17, s8
 80037a2:	ee07 2a90 	vmov	s15, r2
				for (p = 2; p <= 128; p += 2) {
 80037a6:	2302      	movs	r3, #2
					OutF = XTalFreq * n / m / p / od;
 80037a8:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 80037ac:	ee64 4aa2 	vmul.f32	s9, s9, s5
							&& ((XTalFreq * n / m) > 150000000.0)
 80037b0:	ee64 7aa1 	vmul.f32	s15, s9, s3
 80037b4:	eef4 7a42 	vcmp.f32	s15, s4
 80037b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037bc:	dd05      	ble.n	80037ca <SetWSPRPLLCoeff+0xaa>
 80037be:	eef4 7ac1 	vcmpe.f32	s15, s2
 80037c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c6:	f100 80b2 	bmi.w	800392e <SetWSPRPLLCoeff+0x20e>
					OutF = XTalFreq * n / m / p / od;
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	3302      	adds	r3, #2
 80037d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037d4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80037d8:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 80037dc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80037e0:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
 80037e4:	ed9d 7b06 	vldr	d7, [sp, #24]
 80037e8:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80037ec:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80037f0:	ee37 7b45 	vsub.f64	d7, d7, d5
 80037f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80037f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fc:	dd03      	ble.n	8003806 <SetWSPRPLLCoeff+0xe6>
 80037fe:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003802:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
				for (p = 2; p <= 128; p += 2) {
 8003806:	2b82      	cmp	r3, #130	; 0x82
 8003808:	d1df      	bne.n	80037ca <SetWSPRPLLCoeff+0xaa>
			for (n = 2; n <= 512; n++) //was 1
 800380a:	3201      	adds	r2, #1
 800380c:	4572      	cmp	r2, lr
 800380e:	d1c8      	bne.n	80037a2 <SetWSPRPLLCoeff+0x82>
		for (m = 2; m <= 25; m++) //was 64
 8003810:	3101      	adds	r1, #1
 8003812:	291a      	cmp	r1, #26
 8003814:	d1be      	bne.n	8003794 <SetWSPRPLLCoeff+0x74>
		if (fn < 511) {
 8003816:	9b01      	ldr	r3, [sp, #4]
 8003818:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800381c:	f200 80ca 	bhi.w	80039b4 <SetWSPRPLLCoeff+0x294>
			OutF = XTalFreq * fn / fm / fp / fod;
 8003820:	ed9d 6a01 	vldr	s12, [sp, #4]
 8003824:	eddd 6a00 	vldr	s13, [sp]
 8003828:	eddd 7a02 	vldr	s15, [sp, #8]
 800382c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8003830:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003838:	ee26 6a22 	vmul.f32	s12, s12, s5
 800383c:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8003840:	eddd 7a03 	vldr	s15, [sp, #12]
 8003844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384c:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8003850:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003854:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
			OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 8003858:	9b01      	ldr	r3, [sp, #4]
 800385a:	eddd 6a00 	vldr	s13, [sp]
 800385e:	eddd 7a02 	vldr	s15, [sp, #8]
 8003862:	3301      	adds	r3, #1
 8003864:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800386c:	ee06 3a10 	vmov	s12, r3
 8003870:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8003874:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8003878:	eddd 7a03 	vldr	s15, [sp, #12]
 800387c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003880:	ee26 6a22 	vmul.f32	s12, s12, s5
 8003884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003888:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800388c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003890:	ed8d 7b08 	vstr	d7, [sp, #32]
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
 8003894:	ed9d 5b06 	vldr	d5, [sp, #24]
 8003898:	ed9d 4b0a 	vldr	d4, [sp, #40]	; 0x28
 800389c:	ed9d 6b08 	vldr	d6, [sp, #32]
 80038a0:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80038a4:	ee35 5b44 	vsub.f64	d5, d5, d4
 80038a8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80038ac:	ee85 7b06 	vdiv.f64	d7, d5, d6
					* 8192 * 8); //FracDiv PWM has 8 levels
 80038b0:	ee27 7b03 	vmul.f64	d7, d7, d3
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
 80038b4:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 80038b8:	ed8d 7a04 	vstr	s14, [sp, #16]
		} else {
			FracDiv = 8191 * 8;
		}

		FracDivPWM = LowestWSPRToneFracDivPWM = FracDiv & 0x07;
 80038bc:	9b04      	ldr	r3, [sp, #16]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	8033      	strh	r3, [r6, #0]
 80038c4:	f8ac 3000 	strh.w	r3, [ip]
		FracDiv >>= 0x03;
 80038c8:	9b04      	ldr	r3, [sp, #16]
 80038ca:	08db      	lsrs	r3, r3, #3
 80038cc:	9304      	str	r3, [sp, #16]
		FracDivCoeff[i] = FracDiv;
 80038ce:	9a04      	ldr	r2, [sp, #16]
 80038d0:	9b05      	ldr	r3, [sp, #20]
 80038d2:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		FracPWMCoeff[i] = FracDivPWM;
 80038d6:	9a05      	ldr	r2, [sp, #20]
	for (i = 0; i < 4; i++) {
 80038d8:	9b05      	ldr	r3, [sp, #20]
 80038da:	3301      	adds	r3, #1
 80038dc:	9305      	str	r3, [sp, #20]
		FracPWMCoeff[i] = FracDivPWM;
 80038de:	8833      	ldrh	r3, [r6, #0]
 80038e0:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
	for (i = 0; i < 4; i++) {
 80038e4:	9b05      	ldr	r3, [sp, #20]
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	f67f af41 	bls.w	800376e <SetWSPRPLLCoeff+0x4e>
	}
	__HAL_RCC_PLL2_DISABLE();
 80038ec:	4a3e      	ldr	r2, [pc, #248]	; (80039e8 <SetWSPRPLLCoeff+0x2c8>)
 80038ee:	6813      	ldr	r3, [r2, #0]
 80038f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038f4:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1); //These parameters should stay the same for the 4 WSPR tones
 80038f6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80038f8:	9900      	ldr	r1, [sp, #0]
 80038fa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80038fe:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8003902:	6293      	str	r3, [r2, #40]	; 0x28
 8003904:	9901      	ldr	r1, [sp, #4]
 8003906:	9b02      	ldr	r3, [sp, #8]
 8003908:	3901      	subs	r1, #1
 800390a:	3b01      	subs	r3, #1
 800390c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003910:	025b      	lsls	r3, r3, #9
 8003912:	b29b      	uxth	r3, r3
 8003914:	430b      	orrs	r3, r1
 8003916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391a:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 800391c:	6813      	ldr	r3, [r2, #0]
 800391e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003922:	6013      	str	r3, [r2, #0]
}
 8003924:	b00f      	add	sp, #60	; 0x3c
 8003926:	ecbd 8b02 	vpop	{d8}
 800392a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					OutF = XTalFreq * n / m / p / od;
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003936:	ee67 7a84 	vmul.f32	s15, s15, s8
 800393a:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 800393e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003942:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
 8003946:	ed9d 7b06 	vldr	d7, [sp, #24]
 800394a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800394e:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8003952:	ee37 7b45 	vsub.f64	d7, d7, d5
 8003956:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800395a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395e:	d521      	bpl.n	80039a4 <SetWSPRPLLCoeff+0x284>
 8003960:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003964:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8003968:	ee37 7b46 	vsub.f64	d7, d7, d6
 800396c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003974:	dd16      	ble.n	80039a4 <SetWSPRPLLCoeff+0x284>
						MinDiff = abs(OutF - TF);
 8003976:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800397a:	ed9d 6b06 	vldr	d6, [sp, #24]
 800397e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003982:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8003986:	ee17 7a10 	vmov	r7, s14
 800398a:	2f00      	cmp	r7, #0
 800398c:	bfb8      	it	lt
 800398e:	427f      	neglt	r7, r7
 8003990:	ee07 7a10 	vmov	s14, r7
 8003994:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8003998:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
						fp = p;
 800399c:	9302      	str	r3, [sp, #8]
						fn = n;
 800399e:	9201      	str	r2, [sp, #4]
						fm = m;
 80039a0:	9100      	str	r1, [sp, #0]
						fod = od;
 80039a2:	9003      	str	r0, [sp, #12]
				for (p = 2; p <= 128; p += 2) {
 80039a4:	3302      	adds	r3, #2
 80039a6:	2b82      	cmp	r3, #130	; 0x82
 80039a8:	d1c1      	bne.n	800392e <SetWSPRPLLCoeff+0x20e>
			for (n = 2; n <= 512; n++) //was 1
 80039aa:	3201      	adds	r2, #1
 80039ac:	4572      	cmp	r2, lr
 80039ae:	f47f aef8 	bne.w	80037a2 <SetWSPRPLLCoeff+0x82>
 80039b2:	e72d      	b.n	8003810 <SetWSPRPLLCoeff+0xf0>
			FracDiv = 8191 * 8;
 80039b4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80039b8:	9304      	str	r3, [sp, #16]
 80039ba:	e77f      	b.n	80038bc <SetWSPRPLLCoeff+0x19c>
 80039bc:	f3af 8000 	nop.w
 80039c0:	ff800000 	.word	0xff800000
 80039c4:	41cdcd64 	.word	0x41cdcd64
 80039c8:	00000000 	.word	0x00000000
 80039cc:	40f00000 	.word	0x40f00000
 80039d0:	2400726c 	.word	0x2400726c
 80039d4:	240093fc 	.word	0x240093fc
 80039d8:	42927ae1 	.word	0x42927ae1
 80039dc:	4d0f0d18 	.word	0x4d0f0d18
 80039e0:	4e64e1c0 	.word	0x4e64e1c0
 80039e4:	24006244 	.word	0x24006244
 80039e8:	58024400 	.word	0x58024400
 80039ec:	24007270 	.word	0x24007270

080039f0 <SetTXPLL>:
	{
		for (n = 2; n <= 512; n++) //was 1
		{
			for (p = 2; p <= 128; p+=2)
			{
				OutF = XTalFreq * n / m / p / od;
 80039f0:	4a56      	ldr	r2, [pc, #344]	; (8003b4c <SetTXPLL+0x15c>)
 80039f2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	volatile float OutF, MinDiff = 999999999;
 80039f6:	4b56      	ldr	r3, [pc, #344]	; (8003b50 <SetTXPLL+0x160>)
	for (m = 2; m <= 25; m++) //was 64
 80039f8:	2002      	movs	r0, #2
				OutF = XTalFreq * n / m / p / od;
 80039fa:	ed92 5a00 	vldr	s10, [r2]
		for (n = 2; n <= 512; n++) //was 1
 80039fe:	f240 2c01 	movw	ip, #513	; 0x201
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8003a02:	eddf 5a54 	vldr	s11, [pc, #336]	; 8003b54 <SetTXPLL+0x164>
 8003a06:	ed9f 4a54 	vldr	s8, [pc, #336]	; 8003b58 <SetTXPLL+0x168>
{
 8003a0a:	b410      	push	{r4}
					MinDiff = abs(OutF - TF);

					fp = p;
					fn = n;
					fm = m;
					fod = od;
 8003a0c:	2401      	movs	r4, #1
{
 8003a0e:	b087      	sub	sp, #28
	volatile float OutF, MinDiff = 999999999;
 8003a10:	9301      	str	r3, [sp, #4]
	MinDiff = 999999999;
 8003a12:	9301      	str	r3, [sp, #4]
				OutF = XTalFreq * n / m / p / od;
 8003a14:	ee07 0a90 	vmov	s15, r0
		for (n = 2; n <= 512; n++) //was 1
 8003a18:	2102      	movs	r1, #2
				OutF = XTalFreq * n / m / p / od;
 8003a1a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003a1e:	eec3 4a86 	vdiv.f32	s9, s7, s12
 8003a22:	ee07 1a90 	vmov	s15, r1
			for (p = 2; p <= 128; p+=2)
 8003a26:	2302      	movs	r3, #2
				OutF = XTalFreq * n / m / p / od;
 8003a28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a2c:	ee66 6a85 	vmul.f32	s13, s13, s10
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8003a30:	ee66 7aa4 	vmul.f32	s15, s13, s9
 8003a34:	eef4 7a65 	vcmp.f32	s15, s11
 8003a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3c:	dd04      	ble.n	8003a48 <SetTXPLL+0x58>
 8003a3e:	eef4 7ac4 	vcmpe.f32	s15, s8
 8003a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a46:	d445      	bmi.n	8003ad4 <SetTXPLL+0xe4>
				OutF = XTalFreq * n / m / p / od;
 8003a48:	ee07 3a90 	vmov	s15, r3
 8003a4c:	3302      	adds	r3, #2
 8003a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a52:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a5a:	ed8d 7a00 	vstr	s14, [sp]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8003a5e:	eddd 7a00 	vldr	s15, [sp]
 8003a62:	ed9d 7a01 	vldr	s14, [sp, #4]
 8003a66:	ee70 7a67 	vsub.f32	s15, s0, s15
 8003a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a72:	dd00      	ble.n	8003a76 <SetTXPLL+0x86>
 8003a74:	9a00      	ldr	r2, [sp, #0]
			for (p = 2; p <= 128; p+=2)
 8003a76:	2b82      	cmp	r3, #130	; 0x82
 8003a78:	d1e6      	bne.n	8003a48 <SetTXPLL+0x58>
		for (n = 2; n <= 512; n++) //was 1
 8003a7a:	3101      	adds	r1, #1
 8003a7c:	4561      	cmp	r1, ip
 8003a7e:	d1d0      	bne.n	8003a22 <SetTXPLL+0x32>
	for (m = 2; m <= 25; m++) //was 64
 8003a80:	3001      	adds	r0, #1
 8003a82:	281a      	cmp	r0, #26
 8003a84:	d1c6      	bne.n	8003a14 <SetTXPLL+0x24>
				}
			}
		}
	}

	TXFreqError = MinDiff;
 8003a86:	eddd 7a01 	vldr	s15, [sp, #4]
	__HAL_RCC_PLL2_DISABLE();
 8003a8a:	4a34      	ldr	r2, [pc, #208]	; (8003b5c <SetTXPLL+0x16c>)
	TXFreqError = MinDiff;
 8003a8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a90:	4b33      	ldr	r3, [pc, #204]	; (8003b60 <SetTXPLL+0x170>)
 8003a92:	edc3 7a00 	vstr	s15, [r3]
	__HAL_RCC_PLL2_DISABLE();
 8003a96:	6813      	ldr	r3, [r2, #0]
 8003a98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a9c:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 8003a9e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003aa0:	9902      	ldr	r1, [sp, #8]
 8003aa2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003aa6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8003aaa:	6293      	str	r3, [r2, #40]	; 0x28
 8003aac:	9903      	ldr	r1, [sp, #12]
 8003aae:	9b04      	ldr	r3, [sp, #16]
 8003ab0:	3901      	subs	r1, #1
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003ab8:	025b      	lsls	r3, r3, #9
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	430b      	orrs	r3, r1
 8003abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac2:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8003ac4:	6813      	ldr	r3, [r2, #0]
 8003ac6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aca:	6013      	str	r3, [r2, #0]

#endif

}
 8003acc:	b007      	add	sp, #28
 8003ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ad2:	4770      	bx	lr
				OutF = XTalFreq * n / m / p / od;
 8003ad4:	ee07 3a90 	vmov	s15, r3
 8003ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003adc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003ae0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ae4:	ed8d 7a00 	vstr	s14, [sp]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8003ae8:	eddd 7a00 	vldr	s15, [sp]
 8003aec:	ed9d 7a01 	vldr	s14, [sp, #4]
 8003af0:	ee70 7a67 	vsub.f32	s15, s0, s15
 8003af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003afc:	d51d      	bpl.n	8003b3a <SetTXPLL+0x14a>
 8003afe:	eddd 7a00 	vldr	s15, [sp]
 8003b02:	ee70 7a67 	vsub.f32	s15, s0, s15
 8003b06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0e:	dd14      	ble.n	8003b3a <SetTXPLL+0x14a>
					MinDiff = abs(OutF - TF);
 8003b10:	eddd 7a00 	vldr	s15, [sp]
 8003b14:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b1c:	ee17 2a90 	vmov	r2, s15
 8003b20:	2a00      	cmp	r2, #0
 8003b22:	bfb8      	it	lt
 8003b24:	4252      	neglt	r2, r2
 8003b26:	ee07 2a90 	vmov	s15, r2
 8003b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b2e:	edcd 7a01 	vstr	s15, [sp, #4]
					fp = p;
 8003b32:	9304      	str	r3, [sp, #16]
					fn = n;
 8003b34:	9103      	str	r1, [sp, #12]
					fm = m;
 8003b36:	9002      	str	r0, [sp, #8]
					fod = od;
 8003b38:	9405      	str	r4, [sp, #20]
			for (p = 2; p <= 128; p+=2)
 8003b3a:	3302      	adds	r3, #2
 8003b3c:	2b82      	cmp	r3, #130	; 0x82
 8003b3e:	d1c9      	bne.n	8003ad4 <SetTXPLL+0xe4>
		for (n = 2; n <= 512; n++) //was 1
 8003b40:	3101      	adds	r1, #1
 8003b42:	4561      	cmp	r1, ip
 8003b44:	f47f af6d 	bne.w	8003a22 <SetTXPLL+0x32>
 8003b48:	e79a      	b.n	8003a80 <SetTXPLL+0x90>
 8003b4a:	bf00      	nop
 8003b4c:	240093fc 	.word	0x240093fc
 8003b50:	4e6e6b28 	.word	0x4e6e6b28
 8003b54:	4d0f0d18 	.word	0x4d0f0d18
 8003b58:	4e64e1c0 	.word	0x4e64e1c0
 8003b5c:	58024400 	.word	0x58024400
 8003b60:	240072dc 	.word	0x240072dc
 8003b64:	00000000 	.word	0x00000000

08003b68 <UserInput>:
	if (USBRXLength)
 8003b68:	4b81      	ldr	r3, [pc, #516]	; (8003d70 <UserInput+0x208>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
{
 8003b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b70:	ed2d 8b06 	vpush	{d8-d10}
 8003b74:	b08f      	sub	sp, #60	; 0x3c
	if (USBRXLength)
 8003b76:	2a00      	cmp	r2, #0
 8003b78:	f000 80eb 	beq.w	8003d52 <UserInput+0x1ea>
		result = HAL_OK;
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f88d 2017 	strb.w	r2, [sp, #23]
		USBRXLength = 0;
 8003b82:	601a      	str	r2, [r3, #0]
	if (result == HAL_OK)
 8003b84:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003b88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d162      	bne.n	8003c56 <UserInput+0xee>
		switch (UartRXString[0])
 8003b90:	4b78      	ldr	r3, [pc, #480]	; (8003d74 <UserInput+0x20c>)
		UartRXDataReady = RESET;
 8003b92:	4979      	ldr	r1, [pc, #484]	; (8003d78 <UserInput+0x210>)
		switch (UartRXString[0])
 8003b94:	781b      	ldrb	r3, [r3, #0]
		UartRXDataReady = RESET;
 8003b96:	700a      	strb	r2, [r1, #0]
		switch (UartRXString[0])
 8003b98:	3b2b      	subs	r3, #43	; 0x2b
 8003b9a:	2b4c      	cmp	r3, #76	; 0x4c
 8003b9c:	d859      	bhi.n	8003c52 <UserInput+0xea>
 8003b9e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003ba2:	01cf      	.short	0x01cf
 8003ba4:	02170058 	.word	0x02170058
 8003ba8:	00580058 	.word	0x00580058
 8003bac:	02130058 	.word	0x02130058
 8003bb0:	020b020f 	.word	0x020b020f
 8003bb4:	02450249 	.word	0x02450249
 8003bb8:	023d0241 	.word	0x023d0241
 8003bbc:	02350239 	.word	0x02350239
 8003bc0:	00580058 	.word	0x00580058
 8003bc4:	00580058 	.word	0x00580058
 8003bc8:	00580058 	.word	0x00580058
 8003bcc:	00580058 	.word	0x00580058
 8003bd0:	02310058 	.word	0x02310058
 8003bd4:	00580058 	.word	0x00580058
 8003bd8:	00580058 	.word	0x00580058
 8003bdc:	00580058 	.word	0x00580058
 8003be0:	0374022c 	.word	0x0374022c
 8003be4:	0058036f 	.word	0x0058036f
 8003be8:	00580058 	.word	0x00580058
 8003bec:	00580058 	.word	0x00580058
 8003bf0:	00580058 	.word	0x00580058
 8003bf4:	00580058 	.word	0x00580058
 8003bf8:	03690058 	.word	0x03690058
 8003bfc:	035a0058 	.word	0x035a0058
 8003c00:	00580352 	.word	0x00580352
 8003c04:	00580058 	.word	0x00580058
 8003c08:	00580058 	.word	0x00580058
 8003c0c:	034e0058 	.word	0x034e0058
 8003c10:	0328032c 	.word	0x0328032c
 8003c14:	00580058 	.word	0x00580058
 8003c18:	031b0324 	.word	0x031b0324
 8003c1c:	0058004d 	.word	0x0058004d
 8003c20:	00580058 	.word	0x00580058
 8003c24:	00580317 	.word	0x00580317
 8003c28:	00580313 	.word	0x00580313
 8003c2c:	00580058 	.word	0x00580058
 8003c30:	02ce02d2 	.word	0x02ce02d2
 8003c34:	02070277 	.word	0x02070277
 8003c38:	01e101e5 	.word	0x01e101e5
			keyer_speed += 1;
 8003c3c:	4b4f      	ldr	r3, [pc, #316]	; (8003d7c <UserInput+0x214>)
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	3001      	adds	r0, #1
			if (keyer_speed > 50)
 8003c42:	2832      	cmp	r0, #50	; 0x32
 8003c44:	f340 8326 	ble.w	8004294 <UserInput+0x72c>
				keyer_speed = 50;
 8003c48:	2232      	movs	r2, #50	; 0x32
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 8003c4e:	f7fc fd21 	bl	8000694 <loadWPM>
		DisplayStatus();
 8003c52:	f7ff fc33 	bl	80034bc <DisplayStatus>
	EncVal = TIM4->CNT;
 8003c56:	4b4a      	ldr	r3, [pc, #296]	; (8003d80 <UserInput+0x218>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8003c58:	4c4a      	ldr	r4, [pc, #296]	; (8003d84 <UserInput+0x21c>)
	EncVal = TIM4->CNT;
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8003c5c:	8821      	ldrh	r1, [r4, #0]
	EncVal = TIM4->CNT;
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	4d49      	ldr	r5, [pc, #292]	; (8003d88 <UserInput+0x220>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8003c62:	1a5a      	subs	r2, r3, r1
	EncVal = TIM4->CNT;
 8003c64:	802b      	strh	r3, [r5, #0]
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8003c66:	b216      	sxth	r6, r2
 8003c68:	b290      	uxth	r0, r2
	if (DiffEncVal < 0)
 8003c6a:	2e00      	cmp	r6, #0
 8003c6c:	f2c0 815f 	blt.w	8003f2e <UserInput+0x3c6>
	if (DiffEncVal > 0)
 8003c70:	d005      	beq.n	8003c7e <UserInput+0x116>
		FminusClicked(DiffEncVal); // One encoder click is two counts
 8003c72:	f7fd fa11 	bl	8001098 <FminusClicked>
		DisplayStatus();
 8003c76:	f7ff fc21 	bl	80034bc <DisplayStatus>
		LastEncVal = EncVal;
 8003c7a:	882b      	ldrh	r3, [r5, #0]
 8003c7c:	8023      	strh	r3, [r4, #0]
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8003c7e:	4b43      	ldr	r3, [pc, #268]	; (8003d8c <UserInput+0x224>)
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d    %d  \r", SValue, SystemMinutes, SystemSeconds);
 8003c80:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8003dac <UserInput+0x244>
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8003c84:	ed93 7a00 	vldr	s14, [r3]
 8003c88:	4c41      	ldr	r4, [pc, #260]	; (8003d90 <UserInput+0x228>)
 8003c8a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003c8e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8003d60 <UserInput+0x1f8>
 8003c92:	ee27 0b00 	vmul.f64	d0, d7, d0
 8003c96:	f00f fa2b 	bl	80130f0 <log10>
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d    %d  \r", SValue, SystemMinutes, SystemSeconds);
 8003c9a:	4a3e      	ldr	r2, [pc, #248]	; (8003d94 <UserInput+0x22c>)
 8003c9c:	4b3e      	ldr	r3, [pc, #248]	; (8003d98 <UserInput+0x230>)
 8003c9e:	4648      	mov	r0, r9
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8003ca0:	eeb1 7b00 	vmov.f64	d7, #16	; 0x40800000  4.0
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d    %d  \r", SValue, SystemMinutes, SystemSeconds);
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	493c      	ldr	r1, [pc, #240]	; (8003d9c <UserInput+0x234>)
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8003caa:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8003d68 <UserInput+0x200>
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d    %d  \r", SValue, SystemMinutes, SystemSeconds);
 8003cae:	e9cd 3200 	strd	r3, r2, [sp]
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8003cb2:	eea0 7b06 	vfma.f64	d7, d0, d6
 8003cb6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d    %d  \r", SValue, SystemMinutes, SystemSeconds);
 8003cba:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8003cbe:	ed84 7a00 	vstr	s14, [r4]
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d    %d  \r", SValue, SystemMinutes, SystemSeconds);
 8003cc2:	ec53 2b16 	vmov	r2, r3, d6
 8003cc6:	f00c fc39 	bl	801053c <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8003cca:	4648      	mov	r0, r9
 8003ccc:	f7fc fb08 	bl	80002e0 <strlen>
 8003cd0:	4601      	mov	r1, r0
 8003cd2:	4648      	mov	r0, r9
 8003cd4:	b289      	uxth	r1, r1
 8003cd6:	f00a fc01 	bl	800e4dc <CDC_Transmit_FS>
	HAL_Delay(1);
 8003cda:	2001      	movs	r0, #1
 8003cdc:	f001 fdfe 	bl	80058dc <HAL_Delay>
	if (ShowWF) {
 8003ce0:	4b2f      	ldr	r3, [pc, #188]	; (8003da0 <UserInput+0x238>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d169      	bne.n	8003dbc <UserInput+0x254>
	if (OVFDetected)
 8003ce8:	4a2e      	ldr	r2, [pc, #184]	; (8003da4 <UserInput+0x23c>)
 8003cea:	8813      	ldrh	r3, [r2, #0]
 8003cec:	b343      	cbz	r3, 8003d40 <UserInput+0x1d8>
		OVFDetected--;
 8003cee:	3b01      	subs	r3, #1
		sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8003cf0:	492d      	ldr	r1, [pc, #180]	; (8003da8 <UserInput+0x240>)
 8003cf2:	4c2e      	ldr	r4, [pc, #184]	; (8003dac <UserInput+0x244>)
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8003cf4:	2580      	movs	r5, #128	; 0x80
		OVFDetected--;
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	8013      	strh	r3, [r2, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8003cfa:	4a2d      	ldr	r2, [pc, #180]	; (8003db0 <UserInput+0x248>)
 8003cfc:	6816      	ldr	r6, [r2, #0]
		sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8003cfe:	c907      	ldmia	r1, {r0, r1, r2}
 8003d00:	c403      	stmia	r4!, {r0, r1}
 8003d02:	f824 2b02 	strh.w	r2, [r4], #2
 8003d06:	0c12      	lsrs	r2, r2, #16
 8003d08:	7022      	strb	r2, [r4, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8003d0a:	4a2a      	ldr	r2, [pc, #168]	; (8003db4 <UserInput+0x24c>)
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8003d0c:	6035      	str	r5, [r6, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	6015      	str	r5, [r2, #0]
		if (!OVFDetected)
 8003d12:	b92b      	cbnz	r3, 8003d20 <UserInput+0x1b8>
			__HAL_ADC_ENABLE_IT(&hadc1, (ADC_IT_AWD1));
 8003d14:	6873      	ldr	r3, [r6, #4]
 8003d16:	432b      	orrs	r3, r5
 8003d18:	6073      	str	r3, [r6, #4]
			__HAL_ADC_ENABLE_IT(&hadc2, (ADC_IT_AWD1));
 8003d1a:	6853      	ldr	r3, [r2, #4]
 8003d1c:	432b      	orrs	r3, r5
 8003d1e:	6053      	str	r3, [r2, #4]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8003d20:	4822      	ldr	r0, [pc, #136]	; (8003dac <UserInput+0x244>)
 8003d22:	f7fc fadd 	bl	80002e0 <strlen>
 8003d26:	4601      	mov	r1, r0
 8003d28:	4820      	ldr	r0, [pc, #128]	; (8003dac <UserInput+0x244>)
 8003d2a:	b289      	uxth	r1, r1
 8003d2c:	f00a fbd6 	bl	800e4dc <CDC_Transmit_FS>
	HAL_Delay(1);
 8003d30:	2001      	movs	r0, #1
 8003d32:	f001 fdd3 	bl	80058dc <HAL_Delay>
}
 8003d36:	b00f      	add	sp, #60	; 0x3c
 8003d38:	ecbd 8b06 	vpop	{d8-d10}
 8003d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		sprintf((char*)UartTXString, "\e[4;1H   \r");
 8003d40:	4a1d      	ldr	r2, [pc, #116]	; (8003db8 <UserInput+0x250>)
 8003d42:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <UserInput+0x244>)
 8003d44:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d46:	0c14      	lsrs	r4, r2, #16
 8003d48:	c303      	stmia	r3!, {r0, r1}
 8003d4a:	f823 2b02 	strh.w	r2, [r3], #2
 8003d4e:	701c      	strb	r4, [r3, #0]
 8003d50:	e7e6      	b.n	8003d20 <UserInput+0x1b8>
		result = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f88d 3017 	strb.w	r3, [sp, #23]
 8003d58:	e714      	b.n	8003b84 <UserInput+0x1c>
 8003d5a:	bf00      	nop
 8003d5c:	f3af 8000 	nop.w
 8003d60:	00000000 	.word	0x00000000
 8003d64:	409f4000 	.word	0x409f4000
 8003d68:	9916f6a6 	.word	0x9916f6a6
 8003d6c:	400a93fc 	.word	0x400a93fc
 8003d70:	240072ec 	.word	0x240072ec
 8003d74:	240072f4 	.word	0x240072f4
 8003d78:	240072f2 	.word	0x240072f2
 8003d7c:	2400c80c 	.word	0x2400c80c
 8003d80:	40000800 	.word	0x40000800
 8003d84:	2400726a 	.word	0x2400726a
 8003d88:	24002040 	.word	0x24002040
 8003d8c:	24007278 	.word	0x24007278
 8003d90:	24007280 	.word	0x24007280
 8003d94:	240072d4 	.word	0x240072d4
 8003d98:	240072d0 	.word	0x240072d0
 8003d9c:	0801a13c 	.word	0x0801a13c
 8003da0:	240072a4 	.word	0x240072a4
 8003da4:	24007274 	.word	0x24007274
 8003da8:	0801a180 	.word	0x0801a180
 8003dac:	240073f4 	.word	0x240073f4
 8003db0:	2400c43c 	.word	0x2400c43c
 8003db4:	2400c4a0 	.word	0x2400c4a0
 8003db8:	0801a18c 	.word	0x0801a18c
		sprintf((char*)UartTXString, "\e[11;1H");
 8003dbc:	4ba8      	ldr	r3, [pc, #672]	; (8004060 <UserInput+0x4f8>)
 8003dbe:	ad08      	add	r5, sp, #32
 8003dc0:	4ca8      	ldr	r4, [pc, #672]	; (8004064 <UserInput+0x4fc>)
 8003dc2:	ed9f aaa9 	vldr	s20, [pc, #676]	; 8004068 <UserInput+0x500>
 8003dc6:	f5a4 6780 	sub.w	r7, r4, #1024	; 0x400
 8003dca:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 800408c <UserInput+0x524>
			BigBucketValue = 50 * log(StrongestSignal + 1.01);
 8003dce:	ed9f 9b9c 	vldr	d9, [pc, #624]	; 8004040 <UserInput+0x4d8>
 8003dd2:	ed9f 8b9d 	vldr	d8, [pc, #628]	; 8004048 <UserInput+0x4e0>
		sprintf((char*)UartTXString, "\e[11;1H");
 8003dd6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003dda:	e889 0003 	stmia.w	r9, {r0, r1}
				if (StrongestSignal < WFBuffer[i + j])
 8003dde:	edd4 4a01 	vldr	s9, [r4, #4]
 8003de2:	ed94 5a02 	vldr	s10, [r4, #8]
 8003de6:	edd4 5a04 	vldr	s11, [r4, #16]
 8003dea:	ed94 6a05 	vldr	s12, [r4, #20]
 8003dee:	edd4 6a06 	vldr	s13, [r4, #24]
			BigBucketValue = 50 * log(StrongestSignal + 1.01);
 8003df2:	ed94 7a07 	vldr	s14, [r4, #28]
 8003df6:	edd4 7a00 	vldr	s15, [r4]
 8003dfa:	ed94 0a03 	vldr	s0, [r4, #12]
 8003dfe:	fec7 7aa4 	vmaxnm.f32	s15, s15, s9
 8003e02:	fec7 7a8a 	vmaxnm.f32	s15, s15, s20
 8003e06:	fec7 7a85 	vmaxnm.f32	s15, s15, s10
 8003e0a:	fe87 0a80 	vmaxnm.f32	s0, s15, s0
 8003e0e:	fe80 0a25 	vmaxnm.f32	s0, s0, s11
 8003e12:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
 8003e16:	fe80 0a26 	vmaxnm.f32	s0, s0, s13
 8003e1a:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
 8003e1e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8003e22:	ee30 0b09 	vadd.f64	d0, d0, d9
 8003e26:	f00e ff63 	bl	8012cf0 <log>
 8003e2a:	ee20 0b08 	vmul.f64	d0, d0, d8
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 8003e2e:	498f      	ldr	r1, [pc, #572]	; (800406c <UserInput+0x504>)
 8003e30:	4628      	mov	r0, r5
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8003e32:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
			BigBucketValue = 50 * log(StrongestSignal + 1.01);
 8003e36:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8003e3a:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8003e3e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003e42:	edcd 7a03 	vstr	s15, [sp, #12]
 8003e46:	f89d 300c 	ldrb.w	r3, [sp, #12]
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 8003e4a:	f818 2003 	ldrb.w	r2, [r8, r3]
 8003e4e:	f00c fb75 	bl	801053c <siprintf>
			strcat(UartTXString, (int8_t *)WFString);
 8003e52:	4629      	mov	r1, r5
 8003e54:	4886      	ldr	r0, [pc, #536]	; (8004070 <UserInput+0x508>)
 8003e56:	f00c fb9a 	bl	801058e <strcat>
		for (i = 256; i >= 0; i -= 8)
 8003e5a:	42a7      	cmp	r7, r4
 8003e5c:	f1a4 0420 	sub.w	r4, r4, #32
 8003e60:	d1bd      	bne.n	8003dde <UserInput+0x276>
			BigBucketValue = 100 * log(StrongestSignal + 1);
 8003e62:	ed9f 8b7b 	vldr	d8, [pc, #492]	; 8004050 <UserInput+0x4e8>
 8003e66:	4c83      	ldr	r4, [pc, #524]	; (8004074 <UserInput+0x50c>)
 8003e68:	f507 673e 	add.w	r7, r7, #3040	; 0xbe0
 8003e6c:	ed9f 9a7e 	vldr	s18, [pc, #504]	; 8004068 <UserInput+0x500>
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 8003e70:	4e7e      	ldr	r6, [pc, #504]	; (800406c <UserInput+0x504>)
			BigBucketValue = 100 * log(StrongestSignal + 1);
 8003e72:	4623      	mov	r3, r4
 8003e74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e78:	ed94 4a06 	vldr	s8, [r4, #24]
 8003e7c:	3c20      	subs	r4, #32
 8003e7e:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 8003e82:	ed94 5a0b 	vldr	s10, [r4, #44]	; 0x2c
 8003e86:	edd4 5a0a 	vldr	s11, [r4, #40]	; 0x28
 8003e8a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8003e8e:	edd3 6a00 	vldr	s13, [r3]
 8003e92:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 8003e96:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8003e9a:	fec7 7a84 	vmaxnm.f32	s15, s15, s8
 8003e9e:	fec7 7a89 	vmaxnm.f32	s15, s15, s18
				if (StrongestSignal < WFBuffer[i - j])
 8003ea2:	fec7 7aa4 	vmaxnm.f32	s15, s15, s9
 8003ea6:	fe87 0a80 	vmaxnm.f32	s0, s15, s0
 8003eaa:	fe80 0a05 	vmaxnm.f32	s0, s0, s10
 8003eae:	fe80 0a25 	vmaxnm.f32	s0, s0, s11
 8003eb2:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
			BigBucketValue = 100 * log(StrongestSignal + 1);
 8003eb6:	fe80 0a26 	vmaxnm.f32	s0, s0, s13
 8003eba:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003ebe:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8003ec2:	f00e ff15 	bl	8012cf0 <log>
 8003ec6:	ee20 0b08 	vmul.f64	d0, d0, d8
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 8003eca:	4631      	mov	r1, r6
 8003ecc:	4628      	mov	r0, r5
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8003ece:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
			BigBucketValue = 100 * log(StrongestSignal + 1);
 8003ed2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8003ed6:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8003eda:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003ede:	edcd 7a03 	vstr	s15, [sp, #12]
 8003ee2:	f89d 300c 	ldrb.w	r3, [sp, #12]
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 8003ee6:	f818 2003 	ldrb.w	r2, [r8, r3]
 8003eea:	f00c fb27 	bl	801053c <siprintf>
			strcat(UartTXString, (int8_t *)WFString);
 8003eee:	4629      	mov	r1, r5
 8003ef0:	485f      	ldr	r0, [pc, #380]	; (8004070 <UserInput+0x508>)
 8003ef2:	f00c fb4c 	bl	801058e <strcat>
		for (i=FFTLEN-1; i>(FFTLEN-256); i -= 8)
 8003ef6:	42bc      	cmp	r4, r7
 8003ef8:	d1bb      	bne.n	8003e72 <UserInput+0x30a>
		sprintf((char*)WFString, "\e[48;5;16m"); // set black background
 8003efa:	4a5f      	ldr	r2, [pc, #380]	; (8004078 <UserInput+0x510>)
 8003efc:	462b      	mov	r3, r5
 8003efe:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f00:	c303      	stmia	r3!, {r0, r1}
 8003f02:	0c11      	lsrs	r1, r2, #16
 8003f04:	f823 2b02 	strh.w	r2, [r3], #2
 8003f08:	4859      	ldr	r0, [pc, #356]	; (8004070 <UserInput+0x508>)
 8003f0a:	7019      	strb	r1, [r3, #0]
		strcat(UartTXString, (int8_t *)WFString);
 8003f0c:	f7fc f9e8 	bl	80002e0 <strlen>
 8003f10:	4629      	mov	r1, r5
 8003f12:	4448      	add	r0, r9
 8003f14:	f00c fb32 	bl	801057c <stpcpy>
 8003f18:	4601      	mov	r1, r0
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8003f1a:	4855      	ldr	r0, [pc, #340]	; (8004070 <UserInput+0x508>)
 8003f1c:	eba1 0109 	sub.w	r1, r1, r9
 8003f20:	b289      	uxth	r1, r1
 8003f22:	f00a fadb 	bl	800e4dc <CDC_Transmit_FS>
	HAL_Delay(1);
 8003f26:	2001      	movs	r0, #1
 8003f28:	f001 fcd8 	bl	80058dc <HAL_Delay>
}
 8003f2c:	e6dc      	b.n	8003ce8 <UserInput+0x180>
		FplusClicked(-DiffEncVal); // One encoder click is two counts
 8003f2e:	1acb      	subs	r3, r1, r3
 8003f30:	b298      	uxth	r0, r3
 8003f32:	f7fd f847 	bl	8000fc4 <FplusClicked>
		DisplayStatus();
 8003f36:	f7ff fac1 	bl	80034bc <DisplayStatus>
		LastEncVal = EncVal;
 8003f3a:	882b      	ldrh	r3, [r5, #0]
 8003f3c:	8023      	strh	r3, [r4, #0]
	if (DiffEncVal > 0)
 8003f3e:	e69e      	b.n	8003c7e <UserInput+0x116>
			volume += 0.1;
 8003f40:	4b4e      	ldr	r3, [pc, #312]	; (800407c <UserInput+0x514>)
			if (volume > 1.0)
 8003f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			volume += 0.1;
 8003f46:	ed93 7a00 	vldr	s14, [r3]
 8003f4a:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8004058 <UserInput+0x4f0>
 8003f4e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003f52:	ee37 7b05 	vadd.f64	d7, d7, d5
 8003f56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003f5a:	fec7 7ae6 	vminnm.f32	s15, s15, s13
 8003f5e:	edc3 7a00 	vstr	s15, [r3]
 8003f62:	e676      	b.n	8003c52 <UserInput+0xea>
			SetBW((Bwidth)Wide);  break;
 8003f64:	2001      	movs	r0, #1
 8003f66:	f7fc fe5f 	bl	8000c28 <SetBW>
 8003f6a:	e672      	b.n	8003c52 <UserInput+0xea>
	__HAL_RCC_PLL2FRACN_DISABLE();
 8003f6c:	4a44      	ldr	r2, [pc, #272]	; (8004080 <UserInput+0x518>)
	for (i=0; i< 50; i++)
 8003f6e:	2100      	movs	r1, #0
	__HAL_RCC_PLL2FRACN_DISABLE();
 8003f70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f72:	f023 0310 	bic.w	r3, r3, #16
 8003f76:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 8003f78:	9107      	str	r1, [sp, #28]
 8003f7a:	9b07      	ldr	r3, [sp, #28]
 8003f7c:	2b31      	cmp	r3, #49	; 0x31
 8003f7e:	d80b      	bhi.n	8003f98 <UserInput+0x430>
		i++;
 8003f80:	9b07      	ldr	r3, [sp, #28]
 8003f82:	3301      	adds	r3, #1
 8003f84:	9307      	str	r3, [sp, #28]
		i--;
 8003f86:	9b07      	ldr	r3, [sp, #28]
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	9307      	str	r3, [sp, #28]
	for (i=0; i< 50; i++)
 8003f8c:	9b07      	ldr	r3, [sp, #28]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	9307      	str	r3, [sp, #28]
 8003f92:	9b07      	ldr	r3, [sp, #28]
 8003f94:	2b31      	cmp	r3, #49	; 0x31
 8003f96:	d9f3      	bls.n	8003f80 <UserInput+0x418>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 8003f98:	4a39      	ldr	r2, [pc, #228]	; (8004080 <UserInput+0x518>)
 8003f9a:	4b3a      	ldr	r3, [pc, #232]	; (8004084 <UserInput+0x51c>)
 8003f9c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003f9e:	400b      	ands	r3, r1
 8003fa0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003fa4:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 8003fa6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003fa8:	f043 0310 	orr.w	r3, r3, #16
 8003fac:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8003fae:	e650      	b.n	8003c52 <UserInput+0xea>
			SetMode((Mode)USB); break;
 8003fb0:	2002      	movs	r0, #2
 8003fb2:	f7fc ffad 	bl	8000f10 <SetMode>
 8003fb6:	e64c      	b.n	8003c52 <UserInput+0xea>
			SetFstep(5);  break;
 8003fb8:	2005      	movs	r0, #5
 8003fba:	f7fc ffe1 	bl	8000f80 <SetFstep>
 8003fbe:	e648      	b.n	8003c52 <UserInput+0xea>
			FplusClicked(2); break;
 8003fc0:	2002      	movs	r0, #2
 8003fc2:	f7fc ffff 	bl	8000fc4 <FplusClicked>
 8003fc6:	e644      	b.n	8003c52 <UserInput+0xea>
			FminusClicked(2); break;
 8003fc8:	2002      	movs	r0, #2
 8003fca:	f7fd f865 	bl	8001098 <FminusClicked>
 8003fce:	e640      	b.n	8003c52 <UserInput+0xea>
			volume -= 0.1;
 8003fd0:	4b2a      	ldr	r3, [pc, #168]	; (800407c <UserInput+0x514>)
			if (volume < 0)
 8003fd2:	2200      	movs	r2, #0
			volume -= 0.1;
 8003fd4:	ed93 7a00 	vldr	s14, [r3]
 8003fd8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8004058 <UserInput+0x4f0>
 8003fdc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003fe0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003fe4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (volume < 0)
 8003fe8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8003fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			volume -= 0.1;
 8003ff0:	bf54      	ite	pl
 8003ff2:	ed83 7a00 	vstrpl	s14, [r3]
				volume = 0;
 8003ff6:	601a      	strmi	r2, [r3, #0]
 8003ff8:	e62b      	b.n	8003c52 <UserInput+0xea>
			TxPowerOut = LOW_POWER_OUT;
 8003ffa:	4b23      	ldr	r3, [pc, #140]	; (8004088 <UserInput+0x520>)
 8003ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004000:	601a      	str	r2, [r3, #0]
			break;
 8004002:	e626      	b.n	8003c52 <UserInput+0xea>
			SendCWMessage(0); break;
 8004004:	2000      	movs	r0, #0
 8004006:	f7fc fdcf 	bl	8000ba8 <SendCWMessage>
 800400a:	e622      	b.n	8003c52 <UserInput+0xea>
			SetFstep(9); break;
 800400c:	2009      	movs	r0, #9
 800400e:	f7fc ffb7 	bl	8000f80 <SetFstep>
 8004012:	e61e      	b.n	8003c52 <UserInput+0xea>
			SetFstep(0); break;
 8004014:	2000      	movs	r0, #0
 8004016:	f7fc ffb3 	bl	8000f80 <SetFstep>
 800401a:	e61a      	b.n	8003c52 <UserInput+0xea>
			SetFstep(1); break;
 800401c:	2001      	movs	r0, #1
 800401e:	f7fc ffaf 	bl	8000f80 <SetFstep>
 8004022:	e616      	b.n	8003c52 <UserInput+0xea>
			SetFstep(2);  break;
 8004024:	2002      	movs	r0, #2
 8004026:	f7fc ffab 	bl	8000f80 <SetFstep>
 800402a:	e612      	b.n	8003c52 <UserInput+0xea>
			SetFstep(3);  break;
 800402c:	2003      	movs	r0, #3
 800402e:	f7fc ffa7 	bl	8000f80 <SetFstep>
 8004032:	e60e      	b.n	8003c52 <UserInput+0xea>
			SetFstep(4);  break;
 8004034:	2004      	movs	r0, #4
 8004036:	f7fc ffa3 	bl	8000f80 <SetFstep>
 800403a:	e60a      	b.n	8003c52 <UserInput+0xea>
 800403c:	f3af 8000 	nop.w
 8004040:	c28f5c29 	.word	0xc28f5c29
 8004044:	3ff028f5 	.word	0x3ff028f5
 8004048:	00000000 	.word	0x00000000
 800404c:	40490000 	.word	0x40490000
 8004050:	00000000 	.word	0x00000000
 8004054:	40590000 	.word	0x40590000
 8004058:	9999999a 	.word	0x9999999a
 800405c:	3fb99999 	.word	0x3fb99999
 8004060:	0801a160 	.word	0x0801a160
 8004064:	240087f8 	.word	0x240087f8
 8004068:	00000000 	.word	0x00000000
 800406c:	0801a168 	.word	0x0801a168
 8004070:	240073f4 	.word	0x240073f4
 8004074:	240093d8 	.word	0x240093d8
 8004078:	0801a174 	.word	0x0801a174
 800407c:	2400d9cc 	.word	0x2400d9cc
 8004080:	58024400 	.word	0x58024400
 8004084:	ffff0007 	.word	0xffff0007
 8004088:	240072e8 	.word	0x240072e8
 800408c:	0801a198 	.word	0x0801a198
	if (Status)
	{
		TransmissionEnabled = 1;
		//TODO: TXFreq should be calculated in a low priority task every time F is changed, during RX. In this way TX would start immediately and without
		// audio noise caused by RX starving
		if (LastTXFreq != LOfreq)
 8004090:	4e85      	ldr	r6, [pc, #532]	; (80042a8 <UserInput+0x740>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004092:	2300      	movs	r3, #0
		if (LastTXFreq != LOfreq)
 8004094:	4c85      	ldr	r4, [pc, #532]	; (80042ac <UserInput+0x744>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004096:	ad08      	add	r5, sp, #32
		if (LastTXFreq != LOfreq)
 8004098:	ed96 0a00 	vldr	s0, [r6]
 800409c:	edd4 7a00 	vldr	s15, [r4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a0:	9308      	str	r3, [sp, #32]
		if (LastTXFreq != LOfreq)
 80040a2:	eef4 7a40 	vcmp.f32	s15, s0
		TransmissionEnabled = 1;
 80040a6:	4a82      	ldr	r2, [pc, #520]	; (80042b0 <UserInput+0x748>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a8:	e9c5 3301 	strd	r3, r3, [r5, #4]
		if (LastTXFreq != LOfreq)
 80040ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b0:	e9c5 3303 	strd	r3, r3, [r5, #12]
		TransmissionEnabled = 1;
 80040b4:	f04f 0301 	mov.w	r3, #1
 80040b8:	7013      	strb	r3, [r2, #0]
		if (LastTXFreq != LOfreq)
 80040ba:	f040 80f0 	bne.w	800429e <UserInput+0x736>
		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80040be:	2400      	movs	r4, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040c0:	f44f 7800 	mov.w	r8, #512	; 0x200
 80040c4:	f04f 0902 	mov.w	r9, #2
 80040c8:	2600      	movs	r6, #0
 80040ca:	2703      	movs	r7, #3
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040cc:	4629      	mov	r1, r5
 80040ce:	4879      	ldr	r0, [pc, #484]	; (80042b4 <UserInput+0x74c>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80040d0:	940c      	str	r4, [sp, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040d2:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80040d6:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040da:	f004 fa49 	bl	8008570 <HAL_GPIO_Init>

		RELAY_TX_ON;
 80040de:	2201      	movs	r2, #1
 80040e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80040e4:	4874      	ldr	r0, [pc, #464]	; (80042b8 <UserInput+0x750>)
 80040e6:	f004 fb83 	bl	80087f0 <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 80040ea:	2201      	movs	r2, #1
 80040ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040f0:	4872      	ldr	r0, [pc, #456]	; (80042bc <UserInput+0x754>)
 80040f2:	f004 fb7d 	bl	80087f0 <HAL_GPIO_WritePin>
}


void CarrierEnable(uint8_t Status)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f6:	9408      	str	r4, [sp, #32]
	if (Status)
	{
		//TODO: Ramping
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80040f8:	4622      	mov	r2, r4
 80040fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80040fe:	486e      	ldr	r0, [pc, #440]	; (80042b8 <UserInput+0x750>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004100:	e9c5 4401 	strd	r4, r4, [r5, #4]
 8004104:	e9c5 4403 	strd	r4, r4, [r5, #12]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8004108:	f004 fb72 	bl	80087f0 <HAL_GPIO_WritePin>
		//approx bias vs. VRMS 50 Ohm out vs power
		//4095 17.1  5.8
		//2048 13.1  3.4
		//1024 7.5	 1.1
		// 256 3.8   0.3
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 800410c:	4b6c      	ldr	r3, [pc, #432]	; (80042c0 <UserInput+0x758>)
 800410e:	4622      	mov	r2, r4
 8004110:	2110      	movs	r1, #16
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	486b      	ldr	r0, [pc, #428]	; (80042c4 <UserInput+0x75c>)
 8004116:	f002 fe7f 	bl	8006e18 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800411a:	4629      	mov	r1, r5
 800411c:	4865      	ldr	r0, [pc, #404]	; (80042b4 <UserInput+0x74c>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800411e:	940c      	str	r4, [sp, #48]	; 0x30
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004120:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8004124:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004128:	f004 fa22 	bl	8008570 <HAL_GPIO_Init>

		TXCarrierEnabled = 1;
 800412c:	2201      	movs	r2, #1
 800412e:	4b66      	ldr	r3, [pc, #408]	; (80042c8 <UserInput+0x760>)
		LED_GREEN_ON;
 8004130:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004134:	4861      	ldr	r0, [pc, #388]	; (80042bc <UserInput+0x754>)
		TXCarrierEnabled = 1;
 8004136:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 8004138:	f004 fb5a 	bl	80087f0 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
		LED_GREEN_OFF;
	}
}
 800413c:	e589      	b.n	8003c52 <UserInput+0xea>
			SetAGC((Agctype)Slow);  break;
 800413e:	2001      	movs	r0, #1
 8004140:	f7fc fdd4 	bl	8000cec <SetAGC>
 8004144:	e585      	b.n	8003c52 <UserInput+0xea>
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004146:	ad08      	add	r5, sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004148:	2400      	movs	r4, #0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800414a:	2302      	movs	r3, #2
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800414c:	f44f 7600 	mov.w	r6, #512	; 0x200
 8004150:	2701      	movs	r7, #1
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004152:	4629      	mov	r1, r5
 8004154:	4857      	ldr	r0, [pc, #348]	; (80042b4 <UserInput+0x74c>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004156:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004158:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800415c:	e9cd 6708 	strd	r6, r7, [sp, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004160:	f004 fa06 	bl	8008570 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8004164:	4622      	mov	r2, r4
 8004166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800416a:	4853      	ldr	r0, [pc, #332]	; (80042b8 <UserInput+0x750>)
 800416c:	f004 fb40 	bl	80087f0 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8004170:	4622      	mov	r2, r4
 8004172:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004176:	4851      	ldr	r0, [pc, #324]	; (80042bc <UserInput+0x754>)
 8004178:	f004 fb3a 	bl	80087f0 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 800417c:	4b4c      	ldr	r3, [pc, #304]	; (80042b0 <UserInput+0x748>)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800417e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004182:	484d      	ldr	r0, [pc, #308]	; (80042b8 <UserInput+0x750>)
 8004184:	2201      	movs	r2, #1
		TransmissionEnabled = 0;
 8004186:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004188:	940c      	str	r4, [sp, #48]	; 0x30
 800418a:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800418e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8004192:	f004 fb2d 	bl	80087f0 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 8004196:	4623      	mov	r3, r4
 8004198:	4622      	mov	r2, r4
 800419a:	2110      	movs	r1, #16
 800419c:	4849      	ldr	r0, [pc, #292]	; (80042c4 <UserInput+0x75c>)
 800419e:	f002 fe3b 	bl	8006e18 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80041a2:	2202      	movs	r2, #2
 80041a4:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a6:	4629      	mov	r1, r5
 80041a8:	4842      	ldr	r0, [pc, #264]	; (80042b4 <UserInput+0x74c>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80041aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		TXCarrierEnabled = 0;
 80041ae:	4b46      	ldr	r3, [pc, #280]	; (80042c8 <UserInput+0x760>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80041b0:	e9cd 6708 	strd	r6, r7, [sp, #32]
		TXCarrierEnabled = 0;
 80041b4:	701c      	strb	r4, [r3, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041b6:	f004 f9db 	bl	8008570 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 80041ba:	4622      	mov	r2, r4
 80041bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041c0:	483e      	ldr	r0, [pc, #248]	; (80042bc <UserInput+0x754>)
 80041c2:	f004 fb15 	bl	80087f0 <HAL_GPIO_WritePin>
}
 80041c6:	e544      	b.n	8003c52 <UserInput+0xea>
			SetBW((Bwidth)Narrow);  break;
 80041c8:	2000      	movs	r0, #0
 80041ca:	f7fc fd2d 	bl	8000c28 <SetBW>
 80041ce:	e540      	b.n	8003c52 <UserInput+0xea>
			SetMode((Mode)LSB); break;
 80041d0:	2001      	movs	r0, #1
 80041d2:	f7fc fe9d 	bl	8000f10 <SetMode>
 80041d6:	e53c      	b.n	8003c52 <UserInput+0xea>
			keyer_speed -= 1;
 80041d8:	4b3c      	ldr	r3, [pc, #240]	; (80042cc <UserInput+0x764>)
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	3801      	subs	r0, #1
			if (keyer_speed < 3)
 80041de:	2802      	cmp	r0, #2
 80041e0:	dc58      	bgt.n	8004294 <UserInput+0x72c>
				keyer_speed = 3;
 80041e2:	2203      	movs	r2, #3
 80041e4:	4610      	mov	r0, r2
 80041e6:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 80041e8:	e531      	b.n	8003c4e <UserInput+0xe6>
			SetAGC((Agctype)Fast);  break;
 80041ea:	2000      	movs	r0, #0
 80041ec:	f7fc fd7e 	bl	8000cec <SetAGC>
 80041f0:	e52f      	b.n	8003c52 <UserInput+0xea>
			SetMode((Mode)CW); break;
 80041f2:	2003      	movs	r0, #3
 80041f4:	f7fc fe8c 	bl	8000f10 <SetMode>
 80041f8:	e52b      	b.n	8003c52 <UserInput+0xea>
	__HAL_RCC_PLL2FRACN_DISABLE();
 80041fa:	4a35      	ldr	r2, [pc, #212]	; (80042d0 <UserInput+0x768>)
	for (i=0; i< 50; i++)
 80041fc:	2100      	movs	r1, #0
	__HAL_RCC_PLL2FRACN_DISABLE();
 80041fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004200:	f023 0310 	bic.w	r3, r3, #16
 8004204:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 8004206:	9106      	str	r1, [sp, #24]
 8004208:	9b06      	ldr	r3, [sp, #24]
 800420a:	2b31      	cmp	r3, #49	; 0x31
 800420c:	d80b      	bhi.n	8004226 <UserInput+0x6be>
		i++;
 800420e:	9b06      	ldr	r3, [sp, #24]
 8004210:	3301      	adds	r3, #1
 8004212:	9306      	str	r3, [sp, #24]
		i--;
 8004214:	9b06      	ldr	r3, [sp, #24]
 8004216:	3b01      	subs	r3, #1
 8004218:	9306      	str	r3, [sp, #24]
	for (i=0; i< 50; i++)
 800421a:	9b06      	ldr	r3, [sp, #24]
 800421c:	3301      	adds	r3, #1
 800421e:	9306      	str	r3, [sp, #24]
 8004220:	9b06      	ldr	r3, [sp, #24]
 8004222:	2b31      	cmp	r3, #49	; 0x31
 8004224:	d9f3      	bls.n	800420e <UserInput+0x6a6>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 8004226:	4a2a      	ldr	r2, [pc, #168]	; (80042d0 <UserInput+0x768>)
 8004228:	4b2a      	ldr	r3, [pc, #168]	; (80042d4 <UserInput+0x76c>)
 800422a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800422c:	400b      	ands	r3, r1
 800422e:	f443 63dc 	orr.w	r3, r3, #1760	; 0x6e0
 8004232:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 8004234:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004236:	f043 0310 	orr.w	r3, r3, #16
 800423a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800423c:	e509      	b.n	8003c52 <UserInput+0xea>
			SetMode((Mode)AM); break;
 800423e:	2000      	movs	r0, #0
 8004240:	f7fc fe66 	bl	8000f10 <SetMode>
 8004244:	e505      	b.n	8003c52 <UserInput+0xea>
			uwTick = SystemSeconds = SystemMinutes = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	4823      	ldr	r0, [pc, #140]	; (80042d8 <UserInput+0x770>)
 800424a:	4924      	ldr	r1, [pc, #144]	; (80042dc <UserInput+0x774>)
 800424c:	4a24      	ldr	r2, [pc, #144]	; (80042e0 <UserInput+0x778>)
 800424e:	6003      	str	r3, [r0, #0]
 8004250:	600b      	str	r3, [r1, #0]
 8004252:	6013      	str	r3, [r2, #0]
					break;
 8004254:	e4fd      	b.n	8003c52 <UserInput+0xea>
			SetWSPRPLLCoeff((double)LOfreq, FracDivCoeff, FracPWMCoeff);
 8004256:	4b14      	ldr	r3, [pc, #80]	; (80042a8 <UserInput+0x740>)
 8004258:	4922      	ldr	r1, [pc, #136]	; (80042e4 <UserInput+0x77c>)
 800425a:	ed93 0a00 	vldr	s0, [r3]
 800425e:	4822      	ldr	r0, [pc, #136]	; (80042e8 <UserInput+0x780>)
 8004260:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8004264:	f7ff fa5c 	bl	8003720 <SetWSPRPLLCoeff>
			TransmittingWSPR = 1;
 8004268:	4b20      	ldr	r3, [pc, #128]	; (80042ec <UserInput+0x784>)
 800426a:	2201      	movs	r2, #1
 800426c:	701a      	strb	r2, [r3, #0]
			SendWSPR();
 800426e:	f7ff f835 	bl	80032dc <SendWSPR>
			break;
 8004272:	e4ee      	b.n	8003c52 <UserInput+0xea>
			if (ShowWF)
 8004274:	4b1e      	ldr	r3, [pc, #120]	; (80042f0 <UserInput+0x788>)
 8004276:	781a      	ldrb	r2, [r3, #0]
 8004278:	b172      	cbz	r2, 8004298 <UserInput+0x730>
				ShowWF=0;
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
 800427e:	e4e8      	b.n	8003c52 <UserInput+0xea>
			TxPowerOut = MAX_POWER_OUT;
 8004280:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <UserInput+0x758>)
 8004282:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004286:	601a      	str	r2, [r3, #0]
			break;
 8004288:	e4e3      	b.n	8003c52 <UserInput+0xea>
			TxPowerOut = MID_POWER_OUT;
 800428a:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <UserInput+0x758>)
 800428c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004290:	601a      	str	r2, [r3, #0]
			break;
 8004292:	e4de      	b.n	8003c52 <UserInput+0xea>
			keyer_speed += 1;
 8004294:	6018      	str	r0, [r3, #0]
 8004296:	e4da      	b.n	8003c4e <UserInput+0xe6>
				ShowWF=1;
 8004298:	2201      	movs	r2, #1
 800429a:	701a      	strb	r2, [r3, #0]
 800429c:	e4d9      	b.n	8003c52 <UserInput+0xea>
			SetTXPLL(LOfreq);
 800429e:	f7ff fba7 	bl	80039f0 <SetTXPLL>
			LastTXFreq = LOfreq;
 80042a2:	6833      	ldr	r3, [r6, #0]
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	e70a      	b.n	80040be <UserInput+0x556>
 80042a8:	24007264 	.word	0x24007264
 80042ac:	2400726c 	.word	0x2400726c
 80042b0:	240072e4 	.word	0x240072e4
 80042b4:	58020800 	.word	0x58020800
 80042b8:	58020c00 	.word	0x58020c00
 80042bc:	58020400 	.word	0x58020400
 80042c0:	240072e8 	.word	0x240072e8
 80042c4:	2400c508 	.word	0x2400c508
 80042c8:	240072d8 	.word	0x240072d8
 80042cc:	2400c80c 	.word	0x2400c80c
 80042d0:	58024400 	.word	0x58024400
 80042d4:	ffff0007 	.word	0xffff0007
 80042d8:	240072d0 	.word	0x240072d0
 80042dc:	240072d4 	.word	0x240072d4
 80042e0:	2400d9d8 	.word	0x2400d9d8
 80042e4:	24006248 	.word	0x24006248
 80042e8:	2400623c 	.word	0x2400623c
 80042ec:	240072e5 	.word	0x240072e5
 80042f0:	240072a4 	.word	0x240072a4
 80042f4:	00000000 	.word	0x00000000

080042f8 <TXSwitch>:
{
 80042f8:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042fa:	2300      	movs	r3, #0
{
 80042fc:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042fe:	e9cd 3300 	strd	r3, r3, [sp]
 8004302:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004306:	9304      	str	r3, [sp, #16]
	if (Status)
 8004308:	b378      	cbz	r0, 800436a <TXSwitch+0x72>
		if (LastTXFreq != LOfreq)
 800430a:	4d27      	ldr	r5, [pc, #156]	; (80043a8 <TXSwitch+0xb0>)
		TransmissionEnabled = 1;
 800430c:	2201      	movs	r2, #1
		if (LastTXFreq != LOfreq)
 800430e:	4c27      	ldr	r4, [pc, #156]	; (80043ac <TXSwitch+0xb4>)
 8004310:	ed95 0a00 	vldr	s0, [r5]
 8004314:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 8004318:	4b25      	ldr	r3, [pc, #148]	; (80043b0 <TXSwitch+0xb8>)
		if (LastTXFreq != LOfreq)
 800431a:	eef4 7a40 	vcmp.f32	s15, s0
		TransmissionEnabled = 1;
 800431e:	701a      	strb	r2, [r3, #0]
		if (LastTXFreq != LOfreq)
 8004320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004324:	d11c      	bne.n	8004360 <TXSwitch+0x68>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004326:	2200      	movs	r2, #0
 8004328:	2303      	movs	r3, #3
 800432a:	f44f 7400 	mov.w	r4, #512	; 0x200
 800432e:	2502      	movs	r5, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004330:	4669      	mov	r1, sp
 8004332:	4820      	ldr	r0, [pc, #128]	; (80043b4 <TXSwitch+0xbc>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004334:	e9cd 2302 	strd	r2, r3, [sp, #8]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004338:	2300      	movs	r3, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800433a:	e9cd 4500 	strd	r4, r5, [sp]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800433e:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004340:	f004 f916 	bl	8008570 <HAL_GPIO_Init>
		RELAY_TX_ON;
 8004344:	2201      	movs	r2, #1
 8004346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800434a:	481b      	ldr	r0, [pc, #108]	; (80043b8 <TXSwitch+0xc0>)
 800434c:	f004 fa50 	bl	80087f0 <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8004350:	2201      	movs	r2, #1
 8004352:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004356:	4819      	ldr	r0, [pc, #100]	; (80043bc <TXSwitch+0xc4>)
 8004358:	f004 fa4a 	bl	80087f0 <HAL_GPIO_WritePin>
}
 800435c:	b007      	add	sp, #28
 800435e:	bd30      	pop	{r4, r5, pc}
			SetTXPLL(LOfreq);
 8004360:	f7ff fb46 	bl	80039f0 <SetTXPLL>
			LastTXFreq = LOfreq;
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	6023      	str	r3, [r4, #0]
 8004368:	e7dd      	b.n	8004326 <TXSwitch+0x2e>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800436a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80043a0 <TXSwitch+0xa8>
 800436e:	4604      	mov	r4, r0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004370:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004372:	4669      	mov	r1, sp
 8004374:	480f      	ldr	r0, [pc, #60]	; (80043b4 <TXSwitch+0xbc>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004376:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004378:	ed8d 7b00 	vstr	d7, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800437c:	f004 f8f8 	bl	8008570 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8004380:	4622      	mov	r2, r4
 8004382:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004386:	480c      	ldr	r0, [pc, #48]	; (80043b8 <TXSwitch+0xc0>)
 8004388:	f004 fa32 	bl	80087f0 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 800438c:	4622      	mov	r2, r4
 800438e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004392:	480a      	ldr	r0, [pc, #40]	; (80043bc <TXSwitch+0xc4>)
 8004394:	f004 fa2c 	bl	80087f0 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <TXSwitch+0xb8>)
 800439a:	701c      	strb	r4, [r3, #0]
}
 800439c:	b007      	add	sp, #28
 800439e:	bd30      	pop	{r4, r5, pc}
 80043a0:	00000200 	.word	0x00000200
 80043a4:	00000001 	.word	0x00000001
 80043a8:	24007264 	.word	0x24007264
 80043ac:	2400726c 	.word	0x2400726c
 80043b0:	240072e4 	.word	0x240072e4
 80043b4:	58020800 	.word	0x58020800
 80043b8:	58020c00 	.word	0x58020c00
 80043bc:	58020400 	.word	0x58020400

080043c0 <CarrierEnable>:
{
 80043c0:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c2:	2400      	movs	r4, #0
{
 80043c4:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c6:	e9cd 4400 	strd	r4, r4, [sp]
 80043ca:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80043ce:	9404      	str	r4, [sp, #16]
	if (Status)
 80043d0:	b320      	cbz	r0, 800441c <CarrierEnable+0x5c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80043d2:	4622      	mov	r2, r4
 80043d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80043d8:	4822      	ldr	r0, [pc, #136]	; (8004464 <CarrierEnable+0xa4>)
 80043da:	f004 fa09 	bl	80087f0 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 80043de:	4b22      	ldr	r3, [pc, #136]	; (8004468 <CarrierEnable+0xa8>)
 80043e0:	4622      	mov	r2, r4
 80043e2:	2110      	movs	r1, #16
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4821      	ldr	r0, [pc, #132]	; (800446c <CarrierEnable+0xac>)
 80043e8:	f002 fd16 	bl	8006e18 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80043ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f0:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043f2:	4669      	mov	r1, sp
 80043f4:	481e      	ldr	r0, [pc, #120]	; (8004470 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80043f6:	9404      	str	r4, [sp, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80043f8:	e9cd 2300 	strd	r2, r3, [sp]
 80043fc:	2200      	movs	r2, #0
 80043fe:	2303      	movs	r3, #3
 8004400:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004404:	f004 f8b4 	bl	8008570 <HAL_GPIO_Init>
		TXCarrierEnabled = 1;
 8004408:	2201      	movs	r2, #1
 800440a:	4b1a      	ldr	r3, [pc, #104]	; (8004474 <CarrierEnable+0xb4>)
		LED_GREEN_ON;
 800440c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004410:	4819      	ldr	r0, [pc, #100]	; (8004478 <CarrierEnable+0xb8>)
		TXCarrierEnabled = 1;
 8004412:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 8004414:	f004 f9ec 	bl	80087f0 <HAL_GPIO_WritePin>
}
 8004418:	b007      	add	sp, #28
 800441a:	bd30      	pop	{r4, r5, pc}
 800441c:	4605      	mov	r5, r0
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800441e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004422:	4810      	ldr	r0, [pc, #64]	; (8004464 <CarrierEnable+0xa4>)
 8004424:	2201      	movs	r2, #1
 8004426:	f004 f9e3 	bl	80087f0 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 800442a:	462b      	mov	r3, r5
 800442c:	462a      	mov	r2, r5
 800442e:	2110      	movs	r1, #16
 8004430:	480e      	ldr	r0, [pc, #56]	; (800446c <CarrierEnable+0xac>)
 8004432:	f002 fcf1 	bl	8006e18 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800443a:	2301      	movs	r3, #1
		TXCarrierEnabled = 0;
 800443c:	480d      	ldr	r0, [pc, #52]	; (8004474 <CarrierEnable+0xb4>)
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800443e:	4669      	mov	r1, sp
		TXCarrierEnabled = 0;
 8004440:	7005      	strb	r5, [r0, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004442:	480b      	ldr	r0, [pc, #44]	; (8004470 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004444:	e9cd 2300 	strd	r2, r3, [sp]
 8004448:	2300      	movs	r3, #0
 800444a:	2202      	movs	r2, #2
 800444c:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004450:	f004 f88e 	bl	8008570 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 8004454:	462a      	mov	r2, r5
 8004456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800445a:	4807      	ldr	r0, [pc, #28]	; (8004478 <CarrierEnable+0xb8>)
 800445c:	f004 f9c8 	bl	80087f0 <HAL_GPIO_WritePin>
}
 8004460:	b007      	add	sp, #28
 8004462:	bd30      	pop	{r4, r5, pc}
 8004464:	58020c00 	.word	0x58020c00
 8004468:	240072e8 	.word	0x240072e8
 800446c:	2400c508 	.word	0x2400c508
 8004470:	58020800 	.word	0x58020800
 8004474:	240072d8 	.word	0x240072d8
 8004478:	58020400 	.word	0x58020400

0800447c <Error_Handler>:
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 800447c:	4e09      	ldr	r6, [pc, #36]	; (80044a4 <Error_Handler+0x28>)
{
 800447e:	4d0a      	ldr	r5, [pc, #40]	; (80044a8 <Error_Handler+0x2c>)
 8004480:	4c0a      	ldr	r4, [pc, #40]	; (80044ac <Error_Handler+0x30>)
 8004482:	b508      	push	{r3, lr}
 8004484:	6833      	ldr	r3, [r6, #0]
 8004486:	fb05 f303 	mul.w	r3, r5, r3
 800448a:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 800448e:	d200      	bcs.n	8004492 <Error_Handler+0x16>
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8004490:	e7fe      	b.n	8004490 <Error_Handler+0x14>
			LED_switch();
 8004492:	f7fc fe6b 	bl	800116c <LED_switch>
 8004496:	6833      	ldr	r3, [r6, #0]
 8004498:	fb05 f303 	mul.w	r3, r5, r3
 800449c:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 80044a0:	d2f7      	bcs.n	8004492 <Error_Handler+0x16>
 80044a2:	e7f5      	b.n	8004490 <Error_Handler+0x14>
 80044a4:	2400c83c 	.word	0x2400c83c
 80044a8:	c28f5c29 	.word	0xc28f5c29
 80044ac:	051eb851 	.word	0x051eb851

080044b0 <SystemClock_Config_For_OC>:
{
 80044b0:	b530      	push	{r4, r5, lr}
 80044b2:	b0cf      	sub	sp, #316	; 0x13c
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044b4:	224c      	movs	r2, #76	; 0x4c
 80044b6:	2100      	movs	r1, #0
 80044b8:	a80a      	add	r0, sp, #40	; 0x28
 80044ba:	f00b fbf5 	bl	800fca8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044be:	2220      	movs	r2, #32
 80044c0:	2100      	movs	r1, #0
 80044c2:	a802      	add	r0, sp, #8
 80044c4:	f00b fbf0 	bl	800fca8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80044c8:	22bc      	movs	r2, #188	; 0xbc
 80044ca:	2100      	movs	r1, #0
 80044cc:	a81e      	add	r0, sp, #120	; 0x78
 80044ce:	f00b fbeb 	bl	800fca8 <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80044d2:	2002      	movs	r0, #2
 80044d4:	f004 ff9e 	bl	8009414 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80044d8:	4a49      	ldr	r2, [pc, #292]	; (8004600 <SystemClock_Config_For_OC+0x150>)
 80044da:	2300      	movs	r3, #0
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	6991      	ldr	r1, [r2, #24]
 80044e0:	4b48      	ldr	r3, [pc, #288]	; (8004604 <SystemClock_Config_For_OC+0x154>)
 80044e2:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80044e6:	6191      	str	r1, [r2, #24]
 80044e8:	6991      	ldr	r1, [r2, #24]
 80044ea:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 80044ee:	9101      	str	r1, [sp, #4]
 80044f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044f2:	f041 0101 	orr.w	r1, r1, #1
 80044f6:	62d9      	str	r1, [r3, #44]	; 0x2c
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004502:	6993      	ldr	r3, [r2, #24]
 8004504:	0499      	lsls	r1, r3, #18
 8004506:	d5fc      	bpl.n	8004502 <SystemClock_Config_For_OC+0x52>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004508:	4a3f      	ldr	r2, [pc, #252]	; (8004608 <SystemClock_Config_For_OC+0x158>)
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800450a:	2404      	movs	r4, #4
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800450c:	2501      	movs	r5, #1
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800450e:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004510:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004512:	f023 0303 	bic.w	r3, r3, #3
 8004516:	f043 0302 	orr.w	r3, r3, #2
 800451a:	6293      	str	r3, [r2, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800451c:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLM = 10;
 800451e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004522:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = 2;
 8004524:	9317      	str	r3, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8004526:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8004528:	941a      	str	r4, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800452a:	9418      	str	r4, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800452c:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004530:	2300      	movs	r3, #0
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004532:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 10;
 8004536:	230a      	movs	r3, #10
 8004538:	e9cd 3215 	strd	r3, r2, [sp, #84]	; 0x54
	XTalFreq += XTalFreq * XTAL_F_ERROR;
 800453c:	4b33      	ldr	r3, [pc, #204]	; (800460c <SystemClock_Config_For_OC+0x15c>)
 800453e:	4a34      	ldr	r2, [pc, #208]	; (8004610 <SystemClock_Config_For_OC+0x160>)
 8004540:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8004542:	2221      	movs	r2, #33	; 0x21
 8004544:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004548:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800454c:	f005 f812 	bl	8009574 <HAL_RCC_OscConfig>
 8004550:	2800      	cmp	r0, #0
 8004552:	d152      	bne.n	80045fa <SystemClock_Config_For_OC+0x14a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004554:	223f      	movs	r2, #63	; 0x3f
 8004556:	2303      	movs	r3, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004558:	4621      	mov	r1, r4
 800455a:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800455c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004560:	2200      	movs	r2, #0
 8004562:	2308      	movs	r3, #8
 8004564:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004568:	2240      	movs	r2, #64	; 0x40
 800456a:	2340      	movs	r3, #64	; 0x40
 800456c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004570:	2340      	movs	r3, #64	; 0x40
 8004572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004576:	e9cd 2308 	strd	r2, r3, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800457a:	f005 fbc1 	bl	8009d00 <HAL_RCC_ClockConfig>
 800457e:	4603      	mov	r3, r0
 8004580:	2800      	cmp	r0, #0
 8004582:	d13a      	bne.n	80045fa <SystemClock_Config_For_OC+0x14a>
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8004584:	f44f 6280 	mov.w	r2, #1024	; 0x400
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8004588:	932e      	str	r3, [sp, #184]	; 0xb8
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800458a:	933b      	str	r3, [sp, #236]	; 0xec
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800458c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8004590:	9244      	str	r2, [sp, #272]	; 0x110
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8004592:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8004596:	4a1f      	ldr	r2, [pc, #124]	; (8004614 <SystemClock_Config_For_OC+0x164>)
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004598:	a81e      	add	r0, sp, #120	; 0x78
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800459a:	9346      	str	r3, [sp, #280]	; 0x118
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 800459c:	2304      	movs	r3, #4
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800459e:	913f      	str	r1, [sp, #252]	; 0xfc
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80045a0:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 80045a4:	2226      	movs	r2, #38	; 0x26
 80045a6:	2318      	movs	r3, #24
 80045a8:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 80045ac:	2202      	movs	r2, #2
 80045ae:	2302      	movs	r3, #2
 80045b0:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 80045b4:	2280      	movs	r2, #128	; 0x80
 80045b6:	2300      	movs	r3, #0
 80045b8:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 80045bc:	2200      	movs	r2, #0
 80045be:	2305      	movs	r3, #5
 80045c0:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 80045c4:	2280      	movs	r2, #128	; 0x80
 80045c6:	2302      	movs	r3, #2
 80045c8:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 80045cc:	2208      	movs	r2, #8
 80045ce:	2305      	movs	r3, #5
 80045d0:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
 80045d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045d8:	2300      	movs	r3, #0
 80045da:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045de:	f005 fe7b 	bl	800a2d8 <HAL_RCCEx_PeriphCLKConfig>
 80045e2:	b950      	cbnz	r0, 80045fa <SystemClock_Config_For_OC+0x14a>
	HAL_PWREx_EnableUSBVoltageDetector();
 80045e4:	f004 ff3a 	bl	800945c <HAL_PWREx_EnableUSBVoltageDetector>
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_1);
 80045e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80045ec:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80045f0:	4628      	mov	r0, r5
 80045f2:	f005 fa93 	bl	8009b1c <HAL_RCC_MCOConfig>
}
 80045f6:	b04f      	add	sp, #316	; 0x13c
 80045f8:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 80045fa:	f7ff ff3f 	bl	800447c <Error_Handler>
 80045fe:	bf00      	nop
 8004600:	58024800 	.word	0x58024800
 8004604:	58000400 	.word	0x58000400
 8004608:	58024400 	.word	0x58024400
 800460c:	240093fc 	.word	0x240093fc
 8004610:	4bbebbd3 	.word	0x4bbebbd3
 8004614:	000c0042 	.word	0x000c0042

08004618 <MX_TIM6_Init_Custom_Rate>:
{
 8004618:	b510      	push	{r4, lr}
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800461a:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 800461c:	4c0f      	ldr	r4, [pc, #60]	; (800465c <MX_TIM6_Init_Custom_Rate+0x44>)
 800461e:	4810      	ldr	r0, [pc, #64]	; (8004660 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 8004620:	b084      	sub	sp, #16
	htim6.Init.Period = 9599; //
 8004622:	f242 517f 	movw	r1, #9599	; 0x257f
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004626:	2280      	movs	r2, #128	; 0x80
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004628:	9301      	str	r3, [sp, #4]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800462a:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 800462c:	e9c4 0300 	strd	r0, r3, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004630:	4620      	mov	r0, r4
	htim6.Init.Period = 9599; //
 8004632:	e9c4 3102 	strd	r3, r1, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004636:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800463a:	f006 ff29 	bl	800b490 <HAL_TIM_Base_Init>
 800463e:	b950      	cbnz	r0, 8004656 <MX_TIM6_Init_Custom_Rate+0x3e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004640:	4603      	mov	r3, r0
 8004642:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004644:	a901      	add	r1, sp, #4
 8004646:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004648:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800464a:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800464c:	f007 fb5a 	bl	800bd04 <HAL_TIMEx_MasterConfigSynchronization>
 8004650:	b908      	cbnz	r0, 8004656 <MX_TIM6_Init_Custom_Rate+0x3e>
}
 8004652:	b004      	add	sp, #16
 8004654:	bd10      	pop	{r4, pc}
		Error_Handler();
 8004656:	f7ff ff11 	bl	800447c <Error_Handler>
 800465a:	bf00      	nop
 800465c:	2400c6e0 	.word	0x2400c6e0
 8004660:	40001000 	.word	0x40001000
 8004664:	00000000 	.word	0x00000000

08004668 <main>:
{
 8004668:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800466c:	b0cf      	sub	sp, #316	; 0x13c
	HAL_Init();
 800466e:	f001 f8f3 	bl	8005858 <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8004672:	4add      	ldr	r2, [pc, #884]	; (80049e8 <main+0x380>)
 8004674:	6953      	ldr	r3, [r2, #20]
 8004676:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 800467a:	d111      	bne.n	80046a0 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 800467c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004680:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004684:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004688:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800468c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004690:	6953      	ldr	r3, [r2, #20]
 8004692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004696:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004698:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800469c:	f3bf 8f6f 	isb	sy
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046a0:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80046a2:	f8df 8364 	ldr.w	r8, [pc, #868]	; 8004a08 <main+0x3a0>
	SystemClock_Config_For_OC();
 80046a6:	f7ff ff03 	bl	80044b0 <SystemClock_Config_For_OC>
	HAL_Delay(20);  //needed for USB setup. USB somentimes (and almost always on an Android phone) does not initialize
 80046aa:	2014      	movs	r0, #20
 80046ac:	f001 f916 	bl	80058dc <HAL_Delay>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b0:	9448      	str	r4, [sp, #288]	; 0x120
	HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 80046b2:	48ce      	ldr	r0, [pc, #824]	; (80049ec <main+0x384>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046b4:	2501      	movs	r5, #1
	hadc1.Instance = ADC1;
 80046b6:	f8df b354 	ldr.w	fp, [pc, #852]	; 8004a0c <main+0x3a4>
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80046ba:	f44f 7680 	mov.w	r6, #256	; 0x100
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80046be:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80046c2:	f04f 0908 	mov.w	r9, #8
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80046c6:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ca:	e9cd 4444 	strd	r4, r4, [sp, #272]	; 0x110
 80046ce:	e9cd 4446 	strd	r4, r4, [sp, #280]	; 0x118
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80046d2:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80046d6:	f042 0204 	orr.w	r2, r2, #4
 80046da:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 80046de:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80046e2:	f002 0204 	and.w	r2, r2, #4
 80046e6:	9205      	str	r2, [sp, #20]
 80046e8:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80046ea:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80046ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046f2:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 80046f6:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80046fa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80046fe:	9206      	str	r2, [sp, #24]
 8004700:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004702:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 800470e:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8004712:	f002 0201 	and.w	r2, r2, #1
 8004716:	9207      	str	r2, [sp, #28]
 8004718:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800471a:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 800471e:	f042 0202 	orr.w	r2, r2, #2
 8004722:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 8004726:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 800472a:	f002 0202 	and.w	r2, r2, #2
 800472e:	9208      	str	r2, [sp, #32]
 8004730:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004732:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8004736:	f042 0208 	orr.w	r2, r2, #8
 800473a:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 800473e:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8004742:	f002 0208 	and.w	r2, r2, #8
 8004746:	9209      	str	r2, [sp, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 8004748:	4622      	mov	r2, r4
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800474a:	9909      	ldr	r1, [sp, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 800474c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8004750:	f004 f84e 	bl	80087f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, RXTX_Pin|TX_ENA_Pin, GPIO_PIN_RESET);
 8004754:	4622      	mov	r2, r4
 8004756:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800475a:	48a5      	ldr	r0, [pc, #660]	; (80049f0 <main+0x388>)
 800475c:	f004 f848 	bl	80087f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8004760:	4622      	mov	r2, r4
 8004762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004766:	48a3      	ldr	r0, [pc, #652]	; (80049f4 <main+0x38c>)
 8004768:	f004 f842 	bl	80087f0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = IN_SW01_Pin;
 800476c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004770:	2100      	movs	r1, #0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004772:	9546      	str	r5, [sp, #280]	; 0x118
	GPIO_InitStruct.Pin = IN_SW01_Pin;
 8004774:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
	HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 8004778:	a944      	add	r1, sp, #272	; 0x110
 800477a:	489f      	ldr	r0, [pc, #636]	; (80049f8 <main+0x390>)
 800477c:	f003 fef8 	bl	8008570 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SwInt1_Pin;
 8004780:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004784:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004788:	9546      	str	r5, [sp, #280]	; 0x118
	GPIO_InitStruct.Pin = SwInt1_Pin;
 800478a:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
	HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 800478e:	a944      	add	r1, sp, #272	; 0x110
 8004790:	4899      	ldr	r0, [pc, #612]	; (80049f8 <main+0x390>)
 8004792:	f003 feed 	bl	8008570 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 8004796:	20c0      	movs	r0, #192	; 0xc0
 8004798:	2100      	movs	r1, #0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800479a:	9546      	str	r5, [sp, #280]	; 0x118
	GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 800479c:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a0:	a944      	add	r1, sp, #272	; 0x110
 80047a2:	4894      	ldr	r0, [pc, #592]	; (80049f4 <main+0x38c>)
 80047a4:	f003 fee4 	bl	8008570 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 80047a8:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 80047ac:	2101      	movs	r1, #1
 80047ae:	ed9f 8b78 	vldr	d8, [pc, #480]	; 8004990 <main+0x328>
 80047b2:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b6:	a944      	add	r1, sp, #272	; 0x110
 80047b8:	488c      	ldr	r0, [pc, #560]	; (80049ec <main+0x384>)
	GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 80047ba:	ed8d 8b46 	vstr	d8, [sp, #280]	; 0x118
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047be:	f003 fed7 	bl	8008570 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047c2:	a944      	add	r1, sp, #272	; 0x110
 80047c4:	488a      	ldr	r0, [pc, #552]	; (80049f0 <main+0x388>)
	GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 80047c6:	ed9f 7b74 	vldr	d7, [pc, #464]	; 8004998 <main+0x330>
 80047ca:	ed8d 7b44 	vstr	d7, [sp, #272]	; 0x110
 80047ce:	ed9f 7b74 	vldr	d7, [pc, #464]	; 80049a0 <main+0x338>
 80047d2:	ed8d 7b46 	vstr	d7, [sp, #280]	; 0x118
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047d6:	f003 fecb 	bl	8008570 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047da:	a944      	add	r1, sp, #272	; 0x110
 80047dc:	4886      	ldr	r0, [pc, #536]	; (80049f8 <main+0x390>)
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80047de:	9448      	str	r4, [sp, #288]	; 0x120
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80047e0:	ed9f 7b71 	vldr	d7, [pc, #452]	; 80049a8 <main+0x340>
 80047e4:	ed8d 7b44 	vstr	d7, [sp, #272]	; 0x110
 80047e8:	ed9f 7b71 	vldr	d7, [pc, #452]	; 80049b0 <main+0x348>
 80047ec:	ed8d 7b46 	vstr	d7, [sp, #280]	; 0x118
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047f0:	f003 febe 	bl	8008570 <HAL_GPIO_Init>
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80047f4:	a944      	add	r1, sp, #272	; 0x110
 80047f6:	487f      	ldr	r0, [pc, #508]	; (80049f4 <main+0x38c>)
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80047f8:	ed9f 7b6f 	vldr	d7, [pc, #444]	; 80049b8 <main+0x350>
 80047fc:	ed8d 8b46 	vstr	d8, [sp, #280]	; 0x118
 8004800:	ed8d 7b44 	vstr	d7, [sp, #272]	; 0x110
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8004804:	f003 feb4 	bl	8008570 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8004808:	4622      	mov	r2, r4
 800480a:	2104      	movs	r1, #4
 800480c:	2028      	movs	r0, #40	; 0x28
 800480e:	f002 f9cb 	bl	8006ba8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004812:	2028      	movs	r0, #40	; 0x28
 8004814:	f002 fa06 	bl	8006c24 <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004818:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800481c:	4621      	mov	r1, r4
 800481e:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004820:	432a      	orrs	r2, r5
 8004822:	f8c8 20d8 	str.w	r2, [r8, #216]	; 0xd8
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004826:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004828:	f8d8 30d8 	ldr.w	r3, [r8, #216]	; 0xd8
 800482c:	402b      	ands	r3, r5
 800482e:	9304      	str	r3, [sp, #16]
 8004830:	9b04      	ldr	r3, [sp, #16]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004832:	f002 f9b9 	bl	8006ba8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004836:	200b      	movs	r0, #11
 8004838:	f002 f9f4 	bl	8006c24 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 800483c:	4622      	mov	r2, r4
 800483e:	2102      	movs	r1, #2
 8004840:	200c      	movs	r0, #12
 8004842:	f002 f9b1 	bl	8006ba8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004846:	200c      	movs	r0, #12
 8004848:	f002 f9ec 	bl	8006c24 <HAL_NVIC_EnableIRQ>
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800484c:	2304      	movs	r3, #4
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800484e:	4658      	mov	r0, fp
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8004850:	f8ab 6014 	strh.w	r6, [fp, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004854:	f8cb 3010 	str.w	r3, [fp, #16]
	hadc1.Instance = ADC1;
 8004858:	4b68      	ldr	r3, [pc, #416]	; (80049fc <main+0x394>)
	ADC_MultiModeTypeDef multimode = {0};
 800485a:	940c      	str	r4, [sp, #48]	; 0x30
	hadc1.Instance = ADC1;
 800485c:	f8cb 3000 	str.w	r3, [fp]
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8004860:	2303      	movs	r3, #3
	ADC_ChannelConfTypeDef sConfig = {0};
 8004862:	9438      	str	r4, [sp, #224]	; 0xe0
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004864:	f8cb 400c 	str.w	r4, [fp, #12]
	hadc1.Init.NbrOfConversion = 1;
 8004868:	f8cb 5018 	str.w	r5, [fp, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800486c:	f88b 401c 	strb.w	r4, [fp, #28]
	hadc1.Init.OversamplingMode = DISABLE;
 8004870:	f88b 4038 	strb.w	r4, [fp, #56]	; 0x38
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8004874:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
	ADC_MultiModeTypeDef multimode = {0};
 8004878:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800487c:	e9cd 4424 	strd	r4, r4, [sp, #144]	; 0x90
 8004880:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
 8004884:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
	ADC_ChannelConfTypeDef sConfig = {0};
 8004888:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
 800488c:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
 8004890:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004894:	e9cb a901 	strd	sl, r9, [fp, #4]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004898:	e9cb 4409 	strd	r4, r4, [fp, #36]	; 0x24
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800489c:	e9cb 740c 	strd	r7, r4, [fp, #48]	; 0x30
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80048a0:	f001 ff22 	bl	80066e8 <HAL_ADC_Init>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	f040 8320 	bne.w	8004eea <main+0x882>
	multimode.Mode = ADC_DUALMODE_INTERL;
 80048aa:	2207      	movs	r2, #7
 80048ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80048b0:	a90a      	add	r1, sp, #40	; 0x28
 80048b2:	4658      	mov	r0, fp
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 80048b4:	960c      	str	r6, [sp, #48]	; 0x30
	multimode.Mode = ADC_DUALMODE_INTERL;
 80048b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80048ba:	f002 f8fb 	bl	8006ab4 <HAL_ADCEx_MultiModeConfigChannel>
 80048be:	2800      	cmp	r0, #0
 80048c0:	f040 8313 	bne.w	8004eea <main+0x882>
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80048c4:	4c4e      	ldr	r4, [pc, #312]	; (8004a00 <main+0x398>)
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80048c6:	a924      	add	r1, sp, #144	; 0x90
 80048c8:	4658      	mov	r0, fp
	AnalogWDGConfig.ITMode = ENABLE;
 80048ca:	f88d 509c 	strb.w	r5, [sp, #156]	; 0x9c
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80048ce:	9426      	str	r4, [sp, #152]	; 0x98
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80048d0:	ed9f cb3b 	vldr	d12, [pc, #236]	; 80049c0 <main+0x358>
	AnalogWDGConfig.HighThreshold = 4094;
 80048d4:	ed9f bb3c 	vldr	d11, [pc, #240]	; 80049c8 <main+0x360>
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80048d8:	ed8d cb24 	vstr	d12, [sp, #144]	; 0x90
	AnalogWDGConfig.HighThreshold = 4094;
 80048dc:	ed8d bb28 	vstr	d11, [sp, #160]	; 0xa0
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80048e0:	f001 fbfc 	bl	80060dc <HAL_ADC_AnalogWDGConfig>
 80048e4:	2800      	cmp	r0, #0
 80048e6:	f040 8300 	bne.w	8004eea <main+0x882>
	sConfig.OffsetSignedSaturation = DISABLE;
 80048ea:	f88d 00e1 	strb.w	r0, [sp, #225]	; 0xe1
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048ee:	a932      	add	r1, sp, #200	; 0xc8
 80048f0:	4658      	mov	r0, fp
	sConfig.Channel = ADC_CHANNEL_5;
 80048f2:	ed9f ab37 	vldr	d10, [pc, #220]	; 80049d0 <main+0x368>
 80048f6:	ed9f 9b38 	vldr	d9, [pc, #224]	; 80049d8 <main+0x370>
 80048fa:	ed9f 8b39 	vldr	d8, [pc, #228]	; 80049e0 <main+0x378>
 80048fe:	ed8d ab32 	vstr	d10, [sp, #200]	; 0xc8
 8004902:	ed8d 9b34 	vstr	d9, [sp, #208]	; 0xd0
 8004906:	ed8d 8b36 	vstr	d8, [sp, #216]	; 0xd8
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800490a:	f001 f9b7 	bl	8005c7c <HAL_ADC_ConfigChannel>
 800490e:	2800      	cmp	r0, #0
 8004910:	f040 82eb 	bne.w	8004eea <main+0x882>
	hadc2.Instance = ADC2;
 8004914:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8004a10 <main+0x3a8>
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004918:	2304      	movs	r3, #4
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800491a:	901e      	str	r0, [sp, #120]	; 0x78
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800491c:	f8cb 3010 	str.w	r3, [fp, #16]
	hadc2.Instance = ADC2;
 8004920:	4b38      	ldr	r3, [pc, #224]	; (8004a04 <main+0x39c>)
	ADC_ChannelConfTypeDef sConfig = {0};
 8004922:	902a      	str	r0, [sp, #168]	; 0xa8
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8004924:	9023      	str	r0, [sp, #140]	; 0x8c
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004926:	f8cb 000c 	str.w	r0, [fp, #12]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800492a:	f88b 001c 	strb.w	r0, [fp, #28]
	hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800492e:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
	hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8004932:	f8cb 0034 	str.w	r0, [fp, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 8004936:	f88b 0038 	strb.w	r0, [fp, #56]	; 0x38
	hadc2.Init.LowPowerAutoWait = DISABLE;
 800493a:	f8ab 6014 	strh.w	r6, [fp, #20]
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800493e:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
	hadc2.Init.NbrOfConversion = 1;
 8004942:	f8cb 5018 	str.w	r5, [fp, #24]
	hadc2.Instance = ADC2;
 8004946:	f8cb 3000 	str.w	r3, [fp]
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800494a:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
 800494e:	e9cd 0021 	strd	r0, r0, [sp, #132]	; 0x84
	ADC_ChannelConfTypeDef sConfig = {0};
 8004952:	e9cd 002b 	strd	r0, r0, [sp, #172]	; 0xac
 8004956:	e9cd 002d 	strd	r0, r0, [sp, #180]	; 0xb4
 800495a:	e9cd 002f 	strd	r0, r0, [sp, #188]	; 0xbc
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800495e:	4658      	mov	r0, fp
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004960:	e9cb a901 	strd	sl, r9, [fp, #4]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004964:	f001 fec0 	bl	80066e8 <HAL_ADC_Init>
 8004968:	2800      	cmp	r0, #0
 800496a:	f040 82be 	bne.w	8004eea <main+0x882>
	if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 800496e:	a91e      	add	r1, sp, #120	; 0x78
 8004970:	4658      	mov	r0, fp
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8004972:	9420      	str	r4, [sp, #128]	; 0x80
	AnalogWDGConfig.ITMode = ENABLE;
 8004974:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8004978:	ed8d cb1e 	vstr	d12, [sp, #120]	; 0x78
	AnalogWDGConfig.HighThreshold = 4094;
 800497c:	ed8d bb22 	vstr	d11, [sp, #136]	; 0x88
	if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8004980:	f001 fbac 	bl	80060dc <HAL_ADC_AnalogWDGConfig>
 8004984:	4603      	mov	r3, r0
 8004986:	2800      	cmp	r0, #0
 8004988:	f040 82af 	bne.w	8004eea <main+0x882>
 800498c:	e042      	b.n	8004a14 <main+0x3ac>
 800498e:	bf00      	nop
	...
 8004998:	00000c00 	.word	0x00000c00
 800499c:	00000001 	.word	0x00000001
 80049a0:	00000002 	.word	0x00000002
 80049a4:	00000000 	.word	0x00000000
 80049a8:	00000200 	.word	0x00000200
 80049ac:	00000002 	.word	0x00000002
 80049b0:	00000000 	.word	0x00000000
 80049b4:	00000003 	.word	0x00000003
 80049b8:	00000100 	.word	0x00000100
 80049bc:	00000001 	.word	0x00000001
 80049c0:	7dc00000 	.word	0x7dc00000
 80049c4:	00c00000 	.word	0x00c00000
 80049c8:	00000ffe 	.word	0x00000ffe
 80049cc:	00000001 	.word	0x00000001
 80049d0:	14f00020 	.word	0x14f00020
 80049d4:	00000006 	.word	0x00000006
 80049d8:	00000000 	.word	0x00000000
 80049dc:	000007ff 	.word	0x000007ff
 80049e0:	00000004 	.word	0x00000004
 80049e4:	00000000 	.word	0x00000000
 80049e8:	e000ed00 	.word	0xe000ed00
 80049ec:	58020400 	.word	0x58020400
 80049f0:	58020c00 	.word	0x58020c00
 80049f4:	58020000 	.word	0x58020000
 80049f8:	58020800 	.word	0x58020800
 80049fc:	40022000 	.word	0x40022000
 8004a00:	14f00020 	.word	0x14f00020
 8004a04:	40022100 	.word	0x40022100
 8004a08:	58024400 	.word	0x58024400
 8004a0c:	2400c43c 	.word	0x2400c43c
 8004a10:	2400c4a0 	.word	0x2400c4a0
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a14:	a92a      	add	r1, sp, #168	; 0xa8
 8004a16:	4658      	mov	r0, fp
	sConfig.OffsetSignedSaturation = DISABLE;
 8004a18:	f88d 30c1 	strb.w	r3, [sp, #193]	; 0xc1
	sConfig.Channel = ADC_CHANNEL_5;
 8004a1c:	ed8d ab2a 	vstr	d10, [sp, #168]	; 0xa8
 8004a20:	ed8d 9b2c 	vstr	d9, [sp, #176]	; 0xb0
 8004a24:	ed8d 8b2e 	vstr	d8, [sp, #184]	; 0xb8
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a28:	f001 f928 	bl	8005c7c <HAL_ADC_ConfigChannel>
 8004a2c:	4601      	mov	r1, r0
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	f040 825b 	bne.w	8004eea <main+0x882>
	DAC_ChannelConfTypeDef sConfig = {0};
 8004a34:	2224      	movs	r2, #36	; 0x24
	hdac1.Instance = DAC1;
 8004a36:	4cc4      	ldr	r4, [pc, #784]	; (8004d48 <main+0x6e0>)
	DAC_ChannelConfTypeDef sConfig = {0};
 8004a38:	a844      	add	r0, sp, #272	; 0x110
 8004a3a:	f00b f935 	bl	800fca8 <memset>
	hdac1.Instance = DAC1;
 8004a3e:	4bc3      	ldr	r3, [pc, #780]	; (8004d4c <main+0x6e4>)
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004a40:	4620      	mov	r0, r4
	hdac1.Instance = DAC1;
 8004a42:	6023      	str	r3, [r4, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004a44:	f002 f912 	bl	8006c6c <HAL_DAC_Init>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	f040 824d 	bne.w	8004eea <main+0x882>
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004a50:	2101      	movs	r1, #1
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004a52:	9048      	str	r0, [sp, #288]	; 0x120
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004a54:	2000      	movs	r0, #0
 8004a56:	2600      	movs	r6, #0
 8004a58:	2716      	movs	r7, #22
 8004a5a:	e9cd 0146 	strd	r0, r1, [sp, #280]	; 0x118
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004a5e:	a944      	add	r1, sp, #272	; 0x110
 8004a60:	4620      	mov	r0, r4
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004a62:	e9cd 6744 	strd	r6, r7, [sp, #272]	; 0x110
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004a66:	f002 fa41 	bl	8006eec <HAL_DAC_ConfigChannel>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	f040 823c 	bne.w	8004eea <main+0x882>
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004a72:	2210      	movs	r2, #16
 8004a74:	a944      	add	r1, sp, #272	; 0x110
 8004a76:	4620      	mov	r0, r4
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004a78:	9345      	str	r3, [sp, #276]	; 0x114
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004a7a:	f002 fa37 	bl	8006eec <HAL_DAC_ConfigChannel>
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	f040 8233 	bne.w	8004eea <main+0x882>
	hlptim2.Instance = LPTIM2;
 8004a84:	48b2      	ldr	r0, [pc, #712]	; (8004d50 <main+0x6e8>)
	hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8004a86:	2300      	movs	r3, #0
	hlptim2.Instance = LPTIM2;
 8004a88:	4ab2      	ldr	r2, [pc, #712]	; (8004d54 <main+0x6ec>)
	hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8004a8a:	f64f 76ff 	movw	r6, #65535	; 0xffff
	hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8004a8e:	6303      	str	r3, [r0, #48]	; 0x30
	hlptim2.Instance = LPTIM2;
 8004a90:	6002      	str	r2, [r0, #0]
	hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8004a92:	2200      	movs	r2, #0
	hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8004a94:	6146      	str	r6, [r0, #20]
	hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8004a96:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8004a9a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e9c0 2308 	strd	r2, r3, [r0, #32]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004aaa:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8004aae:	f003 feb1 	bl	8008814 <HAL_LPTIM_Init>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	f040 8218 	bne.w	8004eea <main+0x882>
	htim6.Instance = TIM6;
 8004aba:	4ca7      	ldr	r4, [pc, #668]	; (8004d58 <main+0x6f0>)
	htim6.Init.Period = 8191;
 8004abc:	f641 72ff 	movw	r2, #8191	; 0x1fff
	htim6.Instance = TIM6;
 8004ac0:	49a6      	ldr	r1, [pc, #664]	; (8004d5c <main+0x6f4>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ac2:	9017      	str	r0, [sp, #92]	; 0x5c
	htim6.Init.Period = 8191;
 8004ac4:	e9c4 0202 	strd	r0, r2, [r4, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ac8:	2280      	movs	r2, #128	; 0x80
	htim6.Init.Prescaler = 0;
 8004aca:	e9c4 1000 	strd	r1, r0, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004ace:	4620      	mov	r0, r4
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ad0:	61a2      	str	r2, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ad2:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004ad6:	f006 fcdb 	bl	800b490 <HAL_TIM_Base_Init>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2800      	cmp	r0, #0
 8004ade:	f040 8204 	bne.w	8004eea <main+0x882>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004ae2:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004ae4:	a917      	add	r1, sp, #92	; 0x5c
 8004ae6:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ae8:	9319      	str	r3, [sp, #100]	; 0x64
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004aea:	9217      	str	r2, [sp, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004aec:	f007 f90a 	bl	800bd04 <HAL_TIMEx_MasterConfigSynchronization>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2800      	cmp	r0, #0
 8004af4:	f040 81f9 	bne.w	8004eea <main+0x882>
	huart3.Instance = USART3;
 8004af8:	4c99      	ldr	r4, [pc, #612]	; (8004d60 <main+0x6f8>)
	huart3.Init.BaudRate = 115200;
 8004afa:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart3.Instance = USART3;
 8004afe:	4999      	ldr	r1, [pc, #612]	; (8004d64 <main+0x6fc>)
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8004b00:	4620      	mov	r0, r4
	huart3.Init.BaudRate = 115200;
 8004b02:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	huart3.Init.Mode = UART_MODE_TX_RX;
 8004b06:	220c      	movs	r2, #12
	huart3.Init.Parity = UART_PARITY_NONE;
 8004b08:	e9c4 3303 	strd	r3, r3, [r4, #12]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b0c:	e9c4 2305 	strd	r2, r3, [r4, #20]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b10:	e9c4 3307 	strd	r3, r3, [r4, #28]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b14:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8004b18:	f007 fe86 	bl	800c828 <HAL_UART_Init>
 8004b1c:	4601      	mov	r1, r0
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	f040 81e3 	bne.w	8004eea <main+0x882>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b24:	4620      	mov	r0, r4
 8004b26:	f007 ff0f 	bl	800c948 <HAL_UARTEx_SetTxFifoThreshold>
 8004b2a:	4601      	mov	r1, r0
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	f040 81dc 	bne.w	8004eea <main+0x882>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b32:	4620      	mov	r0, r4
 8004b34:	f007 ff4a 	bl	800c9cc <HAL_UARTEx_SetRxFifoThreshold>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	f040 81d6 	bne.w	8004eea <main+0x882>
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f007 fee4 	bl	800c90c <HAL_UARTEx_DisableFifoMode>
 8004b44:	4604      	mov	r4, r0
 8004b46:	2800      	cmp	r0, #0
 8004b48:	f040 81cf 	bne.w	8004eea <main+0x882>
	MX_USB_DEVICE_Init();
 8004b4c:	f009 fc3c 	bl	800e3c8 <MX_USB_DEVICE_Init>
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004b50:	2001      	movs	r0, #1
 8004b52:	2102      	movs	r1, #2
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004b54:	2301      	movs	r3, #1
	htim4.Instance = TIM4;
 8004b56:	4d84      	ldr	r5, [pc, #528]	; (8004d68 <main+0x700>)
 8004b58:	4a84      	ldr	r2, [pc, #528]	; (8004d6c <main+0x704>)
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004b5a:	933c      	str	r3, [sp, #240]	; 0xf0
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004b5c:	9340      	str	r3, [sp, #256]	; 0x100
	sConfig.IC2Filter = 8;
 8004b5e:	2308      	movs	r3, #8
	TIM_Encoder_InitTypeDef sConfig = {0};
 8004b60:	943d      	str	r4, [sp, #244]	; 0xf4
	sConfig.IC2Filter = 8;
 8004b62:	9342      	str	r3, [sp, #264]	; 0x108
	TIM_Encoder_InitTypeDef sConfig = {0};
 8004b64:	9441      	str	r4, [sp, #260]	; 0x104
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b66:	9414      	str	r4, [sp, #80]	; 0x50
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b68:	612c      	str	r4, [r5, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b6a:	61ac      	str	r4, [r5, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004b6c:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
	sConfig.IC1Filter = 8;
 8004b70:	2008      	movs	r0, #8
 8004b72:	2102      	movs	r1, #2
 8004b74:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004b78:	a93a      	add	r1, sp, #232	; 0xe8
 8004b7a:	4628      	mov	r0, r5
	htim4.Init.Prescaler = 0;
 8004b7c:	e9c5 2400 	strd	r2, r4, [r5]
	htim4.Init.Period = 65535;
 8004b80:	e9c5 4602 	strd	r4, r6, [r5, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b84:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004b88:	f006 fdec 	bl	800b764 <HAL_TIM_Encoder_Init>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	f040 81ab 	bne.w	8004eea <main+0x882>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004b94:	a914      	add	r1, sp, #80	; 0x50
 8004b96:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b98:	9314      	str	r3, [sp, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b9a:	9316      	str	r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004b9c:	f007 f8b2 	bl	800bd04 <HAL_TIMEx_MasterConfigSynchronization>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2800      	cmp	r0, #0
 8004ba4:	f040 81a1 	bne.w	8004eea <main+0x882>
	htim7.Instance = TIM7;
 8004ba8:	4c71      	ldr	r4, [pc, #452]	; (8004d70 <main+0x708>)
	htim7.Init.Period = 8192;
 8004baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	htim7.Instance = TIM7;
 8004bae:	4971      	ldr	r1, [pc, #452]	; (8004d74 <main+0x70c>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bb0:	9011      	str	r0, [sp, #68]	; 0x44
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004bb2:	4620      	mov	r0, r4
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bb4:	61a3      	str	r3, [r4, #24]
	htim7.Init.Prescaler = 0;
 8004bb6:	e9c4 1300 	strd	r1, r3, [r4]
	htim7.Init.Period = 8192;
 8004bba:	e9c4 3202 	strd	r3, r2, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bbe:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004bc2:	f006 fc65 	bl	800b490 <HAL_TIM_Base_Init>
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	f040 818f 	bne.w	8004eea <main+0x882>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bcc:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004bce:	a911      	add	r1, sp, #68	; 0x44
 8004bd0:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bd2:	9311      	str	r3, [sp, #68]	; 0x44
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bd4:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004bd6:	f007 f895 	bl	800bd04 <HAL_TIMEx_MasterConfigSynchronization>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	f040 8184 	bne.w	8004eea <main+0x882>
	htim7.Instance = TIM7;
 8004be2:	4964      	ldr	r1, [pc, #400]	; (8004d74 <main+0x70c>)
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 8004be4:	f247 5230 	movw	r2, #30000	; 0x7530
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004be8:	61a3      	str	r3, [r4, #24]
	htim7.Instance = TIM7;
 8004bea:	6021      	str	r1, [r4, #0]
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 8004bec:	60e2      	str	r2, [r4, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bee:	e9c4 0001 	strd	r0, r0, [r4, #4]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f006 fc4c 	bl	800b490 <HAL_TIM_Base_Init>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	f040 8175 	bne.w	8004eea <main+0x882>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004c00:	a911      	add	r1, sp, #68	; 0x44
 8004c02:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c04:	9311      	str	r3, [sp, #68]	; 0x44
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c06:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004c08:	f007 f87c 	bl	800bd04 <HAL_TIMEx_MasterConfigSynchronization>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	f040 816b 	bne.w	8004eea <main+0x882>
	htim2.Instance = TIM2;
 8004c14:	4c58      	ldr	r4, [pc, #352]	; (8004d78 <main+0x710>)
 8004c16:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
	htim2.Init.Period = 10000;
 8004c1a:	f242 7210 	movw	r2, #10000	; 0x2710
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c1e:	901a      	str	r0, [sp, #104]	; 0x68
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c20:	900e      	str	r0, [sp, #56]	; 0x38
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c22:	6123      	str	r3, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c24:	61a3      	str	r3, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c26:	931d      	str	r3, [sp, #116]	; 0x74
	htim2.Init.Prescaler = 0;
 8004c28:	e9c4 6000 	strd	r6, r0, [r4]
	htim2.Init.Period = 10000;
 8004c2c:	e9c4 0202 	strd	r0, r2, [r4, #8]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004c30:	4620      	mov	r0, r4
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c32:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c36:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004c3a:	f006 fc29 	bl	800b490 <HAL_TIM_Base_Init>
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	f040 8153 	bne.w	8004eea <main+0x882>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c44:	f44f 5580 	mov.w	r5, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004c48:	a91a      	add	r1, sp, #104	; 0x68
 8004c4a:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c4c:	951a      	str	r5, [sp, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004c4e:	f006 fecd 	bl	800b9ec <HAL_TIM_ConfigClockSource>
 8004c52:	2800      	cmp	r0, #0
 8004c54:	f040 8149 	bne.w	8004eea <main+0x882>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c58:	900e      	str	r0, [sp, #56]	; 0x38
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c5a:	a90e      	add	r1, sp, #56	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c5c:	9010      	str	r0, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f007 f850 	bl	800bd04 <HAL_TIMEx_MasterConfigSynchronization>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	f040 8140 	bne.w	8004eea <main+0x882>
	htim2.Init.Period = 15000;
 8004c6a:	f643 2398 	movw	r3, #15000	; 0x3a98
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c6e:	60a0      	str	r0, [r4, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c70:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c72:	61a0      	str	r0, [r4, #24]
	htim2.Init.Period = 15000;
 8004c74:	60e3      	str	r3, [r4, #12]
	htim2.Init.Prescaler = 0;
 8004c76:	e9c4 6000 	strd	r6, r0, [r4]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f006 fc08 	bl	800b490 <HAL_TIM_Base_Init>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	f040 8132 	bne.w	8004eea <main+0x882>
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004c86:	a91a      	add	r1, sp, #104	; 0x68
 8004c88:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c8a:	951a      	str	r5, [sp, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004c8c:	f006 feae 	bl	800b9ec <HAL_TIM_ConfigClockSource>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2800      	cmp	r0, #0
 8004c94:	f040 8129 	bne.w	8004eea <main+0x882>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c98:	a90e      	add	r1, sp, #56	; 0x38
 8004c9a:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c9c:	930e      	str	r3, [sp, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c9e:	9310      	str	r3, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ca0:	f007 f830 	bl	800bd04 <HAL_TIMEx_MasterConfigSynchronization>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	f040 8120 	bne.w	8004eea <main+0x882>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8004caa:	4b34      	ldr	r3, [pc, #208]	; (8004d7c <main+0x714>)
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	03d9      	lsls	r1, r3, #15
 8004cb0:	d426      	bmi.n	8004d00 <main+0x698>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004cb2:	4832      	ldr	r0, [pc, #200]	; (8004d7c <main+0x714>)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004cba:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8004cbe:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004cc2:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004cc6:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004cca:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8004cce:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004cd0:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004cd4:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004cd6:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 8004cda:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004cdc:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	d1f8      	bne.n	8004cd6 <main+0x66e>
    } while(sets-- != 0U);
 8004ce4:	3c20      	subs	r4, #32
 8004ce6:	f114 0f20 	cmn.w	r4, #32
 8004cea:	d1f1      	bne.n	8004cd0 <main+0x668>
 8004cec:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8004cf0:	6943      	ldr	r3, [r0, #20]
 8004cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf6:	6143      	str	r3, [r0, #20]
 8004cf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004cfc:	f3bf 8f6f 	isb	sy
	MX_TIM6_Init_Custom_Rate();
 8004d00:	f7ff fc8a 	bl	8004618 <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8004d04:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004d08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d0c:	481c      	ldr	r0, [pc, #112]	; (8004d80 <main+0x718>)
 8004d0e:	f001 fdf9 	bl	8006904 <HAL_ADCEx_Calibration_Start>
 8004d12:	2800      	cmp	r0, #0
 8004d14:	f040 80e9 	bne.w	8004eea <main+0x882>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8004d18:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004d1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d20:	4818      	ldr	r0, [pc, #96]	; (8004d84 <main+0x71c>)
 8004d22:	f001 fdef 	bl	8006904 <HAL_ADCEx_Calibration_Start>
 8004d26:	4604      	mov	r4, r0
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	f040 80de 	bne.w	8004eea <main+0x882>
	HAL_Delay(1);
 8004d2e:	2001      	movs	r0, #1
	volume= 0.1;
 8004d30:	4e15      	ldr	r6, [pc, #84]	; (8004d88 <main+0x720>)
	HAL_Delay(1);
 8004d32:	f000 fdd3 	bl	80058dc <HAL_Delay>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8004d36:	4621      	mov	r1, r4
 8004d38:	480b      	ldr	r0, [pc, #44]	; (8004d68 <main+0x700>)
	AMindex  = LSBindex = 1;
 8004d3a:	2501      	movs	r5, #1
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8004d3c:	f006 fdf6 	bl	800b92c <HAL_TIM_Encoder_Start>
	volume= 0.1;
 8004d40:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <main+0x724>)
	LED_GREEN_ON;
 8004d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d46:	e023      	b.n	8004d90 <main+0x728>
 8004d48:	2400c508 	.word	0x2400c508
 8004d4c:	40007400 	.word	0x40007400
 8004d50:	2400c610 	.word	0x2400c610
 8004d54:	58002400 	.word	0x58002400
 8004d58:	2400c6e0 	.word	0x2400c6e0
 8004d5c:	40001000 	.word	0x40001000
 8004d60:	2400c778 	.word	0x2400c778
 8004d64:	40004800 	.word	0x40004800
 8004d68:	2400c694 	.word	0x2400c694
 8004d6c:	40000800 	.word	0x40000800
 8004d70:	2400c72c 	.word	0x2400c72c
 8004d74:	40001400 	.word	0x40001400
 8004d78:	2400c648 	.word	0x2400c648
 8004d7c:	e000ed00 	.word	0xe000ed00
 8004d80:	2400c43c 	.word	0x2400c43c
 8004d84:	2400c4a0 	.word	0x2400c4a0
 8004d88:	3dcccccd 	.word	0x3dcccccd
 8004d8c:	2400d9cc 	.word	0x2400d9cc
 8004d90:	486f      	ldr	r0, [pc, #444]	; (8004f50 <main+0x8e8>)
 8004d92:	2201      	movs	r2, #1
	volume= 0.1;
 8004d94:	601e      	str	r6, [r3, #0]
	LED_GREEN_ON;
 8004d96:	f003 fd2b 	bl	80087f0 <HAL_GPIO_WritePin>
	LED_GREEN_OFF;
 8004d9a:	4622      	mov	r2, r4
 8004d9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004da0:	486b      	ldr	r0, [pc, #428]	; (8004f50 <main+0x8e8>)
 8004da2:	f003 fd25 	bl	80087f0 <HAL_GPIO_WritePin>
	SetFstep(2);
 8004da6:	2002      	movs	r0, #2
 8004da8:	f7fc f8ea 	bl	8000f80 <SetFstep>
	cwpitch = CWPITCH;
 8004dac:	4b69      	ldr	r3, [pc, #420]	; (8004f54 <main+0x8ec>)
 8004dae:	4a6a      	ldr	r2, [pc, #424]	; (8004f58 <main+0x8f0>)
	meanavg = 0.f;
 8004db0:	2100      	movs	r1, #0
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8004db2:	4f6a      	ldr	r7, [pc, #424]	; (8004f5c <main+0x8f4>)
	CarrierEnable(0);
 8004db4:	4620      	mov	r0, r4
	cwpitch = CWPITCH;
 8004db6:	601a      	str	r2, [r3, #0]
	meanavg = 0.f;
 8004db8:	4a69      	ldr	r2, [pc, #420]	; (8004f60 <main+0x8f8>)
	os_time = 0;
 8004dba:	4b6a      	ldr	r3, [pc, #424]	; (8004f64 <main+0x8fc>)
	meanavg = 0.f;
 8004dbc:	6011      	str	r1, [r2, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8004dbe:	4a6a      	ldr	r2, [pc, #424]	; (8004f68 <main+0x900>)
 8004dc0:	496a      	ldr	r1, [pc, #424]	; (8004f6c <main+0x904>)
	os_time = 0;
 8004dc2:	601c      	str	r4, [r3, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8004dc4:	6011      	str	r1, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8004dc6:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
	Muted   = false;
 8004dca:	4a69      	ldr	r2, [pc, #420]	; (8004f70 <main+0x908>)
	AGC_decay[Fast] = 0.9995f;
 8004dcc:	4b69      	ldr	r3, [pc, #420]	; (8004f74 <main+0x90c>)
	Muted   = false;
 8004dce:	7014      	strb	r4, [r2, #0]
	AMindex  = LSBindex = 1;
 8004dd0:	4a69      	ldr	r2, [pc, #420]	; (8004f78 <main+0x910>)
 8004dd2:	8015      	strh	r5, [r2, #0]
 8004dd4:	4a69      	ldr	r2, [pc, #420]	; (8004f7c <main+0x914>)
 8004dd6:	8015      	strh	r5, [r2, #0]
	USBindex = CWindex  = 1;
 8004dd8:	4a69      	ldr	r2, [pc, #420]	; (8004f80 <main+0x918>)
 8004dda:	8015      	strh	r5, [r2, #0]
 8004ddc:	4a69      	ldr	r2, [pc, #420]	; (8004f84 <main+0x91c>)
 8004dde:	8015      	strh	r5, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8004de0:	4a69      	ldr	r2, [pc, #420]	; (8004f88 <main+0x920>)
 8004de2:	6011      	str	r1, [r2, #0]
	agc[AM]  = agc[LSB] = Slow;
 8004de4:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
 8004de8:	4a68      	ldr	r2, [pc, #416]	; (8004f8c <main+0x924>)
 8004dea:	6011      	str	r1, [r2, #0]
	AGC_decay[Fast] = 0.9995f;
 8004dec:	4a68      	ldr	r2, [pc, #416]	; (8004f90 <main+0x928>)
 8004dee:	601a      	str	r2, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 8004df0:	4a68      	ldr	r2, [pc, #416]	; (8004f94 <main+0x92c>)
 8004df2:	605a      	str	r2, [r3, #4]
	Hangcount[Fast] = 2;
 8004df4:	4b68      	ldr	r3, [pc, #416]	; (8004f98 <main+0x930>)
 8004df6:	4a69      	ldr	r2, [pc, #420]	; (8004f9c <main+0x934>)
 8004df8:	601a      	str	r2, [r3, #0]
	AgcThreshold    = 1.92e-4f;
 8004dfa:	4b69      	ldr	r3, [pc, #420]	; (8004fa0 <main+0x938>)
 8004dfc:	4a69      	ldr	r2, [pc, #420]	; (8004fa4 <main+0x93c>)
 8004dfe:	601a      	str	r2, [r3, #0]
	pk = 0.02f;
 8004e00:	4a69      	ldr	r2, [pc, #420]	; (8004fa8 <main+0x940>)
 8004e02:	4b6a      	ldr	r3, [pc, #424]	; (8004fac <main+0x944>)
 8004e04:	601a      	str	r2, [r3, #0]
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8004e06:	4b6a      	ldr	r3, [pc, #424]	; (8004fb0 <main+0x948>)
 8004e08:	603b      	str	r3, [r7, #0]
	CarrierEnable(0);
 8004e0a:	f7ff fad9 	bl	80043c0 <CarrierEnable>
	TXSwitch(0);
 8004e0e:	4620      	mov	r0, r4
 8004e10:	f7ff fa72 	bl	80042f8 <TXSwitch>
	__HAL_RCC_PLL2_DISABLE();
 8004e14:	4a67      	ldr	r2, [pc, #412]	; (8004fb4 <main+0x94c>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8004e16:	231a      	movs	r3, #26
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8004e18:	ed97 7a00 	vldr	s14, [r7]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8004e1c:	4966      	ldr	r1, [pc, #408]	; (8004fb8 <main+0x950>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8004e1e:	9303      	str	r3, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8004e20:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	__HAL_RCC_PLL2_DISABLE();
 8004e24:	6813      	ldr	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8004e26:	eddf 6a65 	vldr	s13, [pc, #404]	; 8004fbc <main+0x954>
	__HAL_RCC_PLL2_DISABLE();
 8004e2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
	CWThreshold = 0.1;
 8004e2e:	4864      	ldr	r0, [pc, #400]	; (8004fc0 <main+0x958>)
	__HAL_RCC_PLL2_DISABLE();
 8004e30:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8004e32:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004e34:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8004e3c:	ed9f 5b42 	vldr	d5, [pc, #264]	; 8004f48 <main+0x8e0>
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8004e40:	6293      	str	r3, [r2, #40]	; 0x28
 8004e42:	9b03      	ldr	r3, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8004e44:	ee27 7b05 	vmul.f64	d7, d7, d5
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4e:	4319      	orrs	r1, r3
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8004e50:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8004e54:	6391      	str	r1, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8004e56:	6813      	ldr	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8004e58:	ee67 7a26 	vmul.f32	s15, s14, s13
	__HAL_RCC_PLL2_ENABLE();
 8004e5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e60:	6013      	str	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8004e62:	4b58      	ldr	r3, [pc, #352]	; (8004fc4 <main+0x95c>)
	CWThreshold = 0.1;
 8004e64:	6006      	str	r6, [r0, #0]
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8004e66:	f44f 6600 	mov.w	r6, #2048	; 0x800
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8004e6a:	ed87 7a00 	vstr	s14, [r7]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8004e6e:	edc3 7a00 	vstr	s15, [r3]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 8004e72:	f7fd f92b 	bl	80020cc <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8004e76:	4954      	ldr	r1, [pc, #336]	; (8004fc8 <main+0x960>)
 8004e78:	2204      	movs	r2, #4
 8004e7a:	4f54      	ldr	r7, [pc, #336]	; (8004fcc <main+0x964>)
 8004e7c:	4b54      	ldr	r3, [pc, #336]	; (8004fd0 <main+0x968>)
 8004e7e:	4855      	ldr	r0, [pc, #340]	; (8004fd4 <main+0x96c>)
 8004e80:	e9cd 1600 	strd	r1, r6, [sp]
 8004e84:	2140      	movs	r1, #64	; 0x40
 8004e86:	f00a f96f 	bl	800f168 <arm_fir_decimate_init_f32>
 8004e8a:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 8004e8c:	b100      	cbz	r0, 8004e90 <main+0x828>
 8004e8e:	e7fe      	b.n	8004e8e <main+0x826>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 8004e90:	4a51      	ldr	r2, [pc, #324]	; (8004fd8 <main+0x970>)
 8004e92:	2140      	movs	r1, #64	; 0x40
 8004e94:	4b4e      	ldr	r3, [pc, #312]	; (8004fd0 <main+0x968>)
 8004e96:	4851      	ldr	r0, [pc, #324]	; (8004fdc <main+0x974>)
 8004e98:	e9cd 2600 	strd	r2, r6, [sp]
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	f00a f963 	bl	800f168 <arm_fir_decimate_init_f32>
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 8004ea6:	bb10      	cbnz	r0, 8004eee <main+0x886>
	Load_Presets();
 8004ea8:	f7fb fe94 	bl	8000bd4 <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 8004eac:	4628      	mov	r0, r5
 8004eae:	f7fb ff77 	bl	8000da0 <Tune_Preset>
	keyerState = IDLE;
 8004eb2:	4b4b      	ldr	r3, [pc, #300]	; (8004fe0 <main+0x978>)
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 8004eb4:	2710      	movs	r7, #16
	keyer_speed = 15;
 8004eb6:	200f      	movs	r0, #15
	keyerState = IDLE;
 8004eb8:	701c      	strb	r4, [r3, #0]
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 8004eba:	4b4a      	ldr	r3, [pc, #296]	; (8004fe4 <main+0x97c>)
 8004ebc:	701f      	strb	r7, [r3, #0]
	keyer_speed = 15;
 8004ebe:	4b4a      	ldr	r3, [pc, #296]	; (8004fe8 <main+0x980>)
 8004ec0:	6018      	str	r0, [r3, #0]
	loadWPM(keyer_speed);        // Fix speed at 15 WPM
 8004ec2:	f7fb fbe7 	bl	8000694 <loadWPM>
	keyer_mode = 1; //->  iambic
 8004ec6:	4b49      	ldr	r3, [pc, #292]	; (8004fec <main+0x984>)
	txdelay = 10;
 8004ec8:	210a      	movs	r1, #10
 8004eca:	4a49      	ldr	r2, [pc, #292]	; (8004ff0 <main+0x988>)
	keyer_mode = 1; //->  iambic
 8004ecc:	701d      	strb	r5, [r3, #0]
	keyer_swap = 0; //->  DI/DAH
 8004ece:	4b49      	ldr	r3, [pc, #292]	; (8004ff4 <main+0x98c>)
	txdelay = 10;
 8004ed0:	7011      	strb	r1, [r2, #0]
	keyer_swap = 0; //->  DI/DAH
 8004ed2:	701c      	strb	r4, [r3, #0]
	TxPowerOut = MID_POWER_OUT;
 8004ed4:	4b48      	ldr	r3, [pc, #288]	; (8004ff8 <main+0x990>)
 8004ed6:	601e      	str	r6, [r3, #0]
	DisplayStatus();    // Display status, it would not be shown until a user input was given
 8004ed8:	f7fe faf0 	bl	80034bc <DisplayStatus>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 8004edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ee0:	4946      	ldr	r1, [pc, #280]	; (8004ffc <main+0x994>)
 8004ee2:	4847      	ldr	r0, [pc, #284]	; (8005000 <main+0x998>)
 8004ee4:	f001 fd60 	bl	80069a8 <HAL_ADCEx_MultiModeStart_DMA>
 8004ee8:	b110      	cbz	r0, 8004ef0 <main+0x888>
		Error_Handler();
 8004eea:	f7ff fac7 	bl	800447c <Error_Handler>
	while(arc != ARM_MATH_SUCCESS)
 8004eee:	e7fe      	b.n	8004eee <main+0x886>
	if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8004ef0:	4844      	ldr	r0, [pc, #272]	; (8005004 <main+0x99c>)
 8004ef2:	f006 fbdb 	bl	800b6ac <HAL_TIM_Base_Start_IT>
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	d1f6      	bne.n	8004eea <main+0x882>
	HAL_TIM_Base_Start(&htim6);
 8004efc:	4842      	ldr	r0, [pc, #264]	; (8005008 <main+0x9a0>)
 8004efe:	f006 fb7d 	bl	800b5fc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 8004f02:	4842      	ldr	r0, [pc, #264]	; (800500c <main+0x9a4>)
 8004f04:	f006 fb7a 	bl	800b5fc <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8004f08:	4621      	mov	r1, r4
 8004f0a:	4841      	ldr	r0, [pc, #260]	; (8005010 <main+0x9a8>)
 8004f0c:	f001 fec4 	bl	8006c98 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 8004f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f14:	4a3f      	ldr	r2, [pc, #252]	; (8005014 <main+0x9ac>)
 8004f16:	4621      	mov	r1, r4
 8004f18:	483d      	ldr	r0, [pc, #244]	; (8005010 <main+0x9a8>)
 8004f1a:	9400      	str	r4, [sp, #0]
 8004f1c:	f001 fef0 	bl	8006d00 <HAL_DAC_Start_DMA>
	HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8004f20:	4620      	mov	r0, r4
 8004f22:	f000 fcf3 	bl	800590c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8004f26:	4639      	mov	r1, r7
 8004f28:	4839      	ldr	r0, [pc, #228]	; (8005010 <main+0x9a8>)
 8004f2a:	f001 feb5 	bl	8006c98 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias
 8004f2e:	4623      	mov	r3, r4
 8004f30:	4622      	mov	r2, r4
 8004f32:	4639      	mov	r1, r7
 8004f34:	4836      	ldr	r0, [pc, #216]	; (8005010 <main+0x9a8>)
 8004f36:	f001 ff6f 	bl	8006e18 <HAL_DAC_SetValue>
		UserInput();
 8004f3a:	f7fe fe15 	bl	8003b68 <UserInput>
		HAL_Delay(100);
 8004f3e:	2064      	movs	r0, #100	; 0x64
 8004f40:	f000 fccc 	bl	80058dc <HAL_Delay>
		if (ubADCDualConversionComplete == RESET)
 8004f44:	e7f9      	b.n	8004f3a <main+0x8d2>
 8004f46:	bf00      	nop
 8004f48:	8f04fefd 	.word	0x8f04fefd
 8004f4c:	3feffff9 	.word	0x3feffff9
 8004f50:	58020400 	.word	0x58020400
 8004f54:	24009c34 	.word	0x24009c34
 8004f58:	44228000 	.word	0x44228000
 8004f5c:	24007284 	.word	0x24007284
 8004f60:	2400c818 	.word	0x2400c818
 8004f64:	2400c83c 	.word	0x2400c83c
 8004f68:	2400727c 	.word	0x2400727c
 8004f6c:	3f7cac08 	.word	0x3f7cac08
 8004f70:	24007272 	.word	0x24007272
 8004f74:	24001808 	.word	0x24001808
 8004f78:	24007268 	.word	0x24007268
 8004f7c:	24001810 	.word	0x24001810
 8004f80:	24002028 	.word	0x24002028
 8004f84:	240072f0 	.word	0x240072f0
 8004f88:	24009c30 	.word	0x24009c30
 8004f8c:	24009c20 	.word	0x24009c20
 8004f90:	3f7fdf3b 	.word	0x3f7fdf3b
 8004f94:	3f7ffcb9 	.word	0x3f7ffcb9
 8004f98:	24006254 	.word	0x24006254
 8004f9c:	001e0002 	.word	0x001e0002
 8004fa0:	24001814 	.word	0x24001814
 8004fa4:	3949539c 	.word	0x3949539c
 8004fa8:	3ca3d70a 	.word	0x3ca3d70a
 8004fac:	2400c840 	.word	0x2400c840
 8004fb0:	4af42400 	.word	0x4af42400
 8004fb4:	58024400 	.word	0x58024400
 8004fb8:	01012e00 	.word	0x01012e00
 8004fbc:	3b800000 	.word	0x3b800000
 8004fc0:	24002024 	.word	0x24002024
 8004fc4:	24002020 	.word	0x24002020
 8004fc8:	24004140 	.word	0x24004140
 8004fcc:	24009c24 	.word	0x24009c24
 8004fd0:	2400020c 	.word	0x2400020c
 8004fd4:	24007298 	.word	0x24007298
 8004fd8:	24002044 	.word	0x24002044
 8004fdc:	2400728c 	.word	0x2400728c
 8004fe0:	2400c809 	.word	0x2400c809
 8004fe4:	2400c808 	.word	0x2400c808
 8004fe8:	2400c80c 	.word	0x2400c80c
 8004fec:	2400c80a 	.word	0x2400c80a
 8004ff0:	2400d9c9 	.word	0x2400d9c9
 8004ff4:	2400c810 	.word	0x2400c810
 8004ff8:	240072e8 	.word	0x240072e8
 8004ffc:	24009420 	.word	0x24009420
 8005000:	2400c43c 	.word	0x2400c43c
 8005004:	2400c72c 	.word	0x2400c72c
 8005008:	2400c6e0 	.word	0x2400c6e0
 800500c:	2400c648 	.word	0x2400c648
 8005010:	2400c508 	.word	0x2400c508
 8005014:	24001820 	.word	0x24001820

08005018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005018:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800501a:	4c14      	ldr	r4, [pc, #80]	; (800506c <HAL_MspInit+0x54>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 800501c:	2102      	movs	r1, #2
{
 800501e:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8005020:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005022:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8005026:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800502a:	430b      	orrs	r3, r1
 800502c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8005030:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8005034:	400b      	ands	r3, r1
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 800503a:	f001 fdb5 	bl	8006ba8 <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 800503e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8005042:	2020      	movs	r0, #32
  __HAL_RCC_VREF_CLK_ENABLE();
 8005044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005048:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800504c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8005050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005054:	9301      	str	r3, [sp, #4]
 8005056:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8005058:	f000 fc58 	bl	800590c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 800505c:	f000 fc6a 	bl	8005934 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8005060:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005062:	b002      	add	sp, #8
 8005064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8005068:	f000 bc5a 	b.w	8005920 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 800506c:	58024400 	.word	0x58024400

08005070 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8005070:	494c      	ldr	r1, [pc, #304]	; (80051a4 <HAL_ADC_MspInit+0x134>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005072:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8005074:	6802      	ldr	r2, [r0, #0]
{
 8005076:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8005078:	428a      	cmp	r2, r1
{
 800507a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800507c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005080:	9306      	str	r3, [sp, #24]
 8005082:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8005086:	d029      	beq.n	80050dc <HAL_ADC_MspInit+0x6c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8005088:	4b47      	ldr	r3, [pc, #284]	; (80051a8 <HAL_ADC_MspInit+0x138>)
 800508a:	429a      	cmp	r2, r3
 800508c:	d001      	beq.n	8005092 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800508e:	b00a      	add	sp, #40	; 0x28
 8005090:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005092:	4a46      	ldr	r2, [pc, #280]	; (80051ac <HAL_ADC_MspInit+0x13c>)
 8005094:	6813      	ldr	r3, [r2, #0]
 8005096:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005098:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800509a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800509c:	d070      	beq.n	8005180 <HAL_ADC_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800509e:	4b44      	ldr	r3, [pc, #272]	; (80051b0 <HAL_ADC_MspInit+0x140>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80050a0:	2402      	movs	r4, #2
 80050a2:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050a4:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050aa:	4842      	ldr	r0, [pc, #264]	; (80051b4 <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ac:	f042 0202 	orr.w	r2, r2, #2
 80050b0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80050b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	9303      	str	r3, [sp, #12]
 80050be:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80050c0:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050c4:	f003 fa54 	bl	8008570 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80050c8:	2200      	movs	r2, #0
 80050ca:	2012      	movs	r0, #18
 80050cc:	4611      	mov	r1, r2
 80050ce:	f001 fd6b 	bl	8006ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80050d2:	2012      	movs	r0, #18
 80050d4:	f001 fda6 	bl	8006c24 <HAL_NVIC_EnableIRQ>
}
 80050d8:	b00a      	add	sp, #40	; 0x28
 80050da:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 80050dc:	4a33      	ldr	r2, [pc, #204]	; (80051ac <HAL_ADC_MspInit+0x13c>)
 80050de:	4604      	mov	r4, r0
 80050e0:	6813      	ldr	r3, [r2, #0]
 80050e2:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80050e4:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80050e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80050e8:	d03c      	beq.n	8005164 <HAL_ADC_MspInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ea:	4b31      	ldr	r3, [pc, #196]	; (80051b0 <HAL_ADC_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050ec:	a904      	add	r1, sp, #16
 80050ee:	4831      	ldr	r0, [pc, #196]	; (80051b4 <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    hdma_adc1.Instance = DMA1_Stream0;
 80050f4:	4d30      	ldr	r5, [pc, #192]	; (80051b8 <HAL_ADC_MspInit+0x148>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050f6:	f042 0202 	orr.w	r2, r2, #2
 80050fa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80050fe:	2202      	movs	r2, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800510a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800510c:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800510e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005112:	f003 fa2d 	bl	8008570 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8005116:	4929      	ldr	r1, [pc, #164]	; (80051bc <HAL_ADC_MspInit+0x14c>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005118:	2209      	movs	r2, #9
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800511a:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800511c:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800511e:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005120:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005124:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005128:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800512c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005130:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005138:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800513c:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8005140:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005144:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005146:	f002 f87b 	bl	8007240 <HAL_DMA_Init>
 800514a:	bb38      	cbnz	r0, 800519c <HAL_ADC_MspInit+0x12c>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800514c:	2200      	movs	r2, #0
 800514e:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005150:	64e5      	str	r5, [r4, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005152:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005154:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005156:	f001 fd27 	bl	8006ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800515a:	2012      	movs	r0, #18
 800515c:	f001 fd62 	bl	8006c24 <HAL_NVIC_EnableIRQ>
}
 8005160:	b00a      	add	sp, #40	; 0x28
 8005162:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005164:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <HAL_ADC_MspInit+0x140>)
 8005166:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800516a:	f042 0220 	orr.w	r2, r2, #32
 800516e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8005172:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	9b00      	ldr	r3, [sp, #0]
 800517e:	e7b4      	b.n	80050ea <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <HAL_ADC_MspInit+0x140>)
 8005182:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8005186:	f042 0220 	orr.w	r2, r2, #32
 800518a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800518e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	9302      	str	r3, [sp, #8]
 8005198:	9b02      	ldr	r3, [sp, #8]
 800519a:	e780      	b.n	800509e <HAL_ADC_MspInit+0x2e>
      Error_Handler();
 800519c:	f7ff f96e 	bl	800447c <Error_Handler>
 80051a0:	e7d4      	b.n	800514c <HAL_ADC_MspInit+0xdc>
 80051a2:	bf00      	nop
 80051a4:	40022000 	.word	0x40022000
 80051a8:	40022100 	.word	0x40022100
 80051ac:	2400d9d0 	.word	0x2400d9d0
 80051b0:	58024400 	.word	0x58024400
 80051b4:	58020400 	.word	0x58020400
 80051b8:	2400c51c 	.word	0x2400c51c
 80051bc:	40020010 	.word	0x40020010

080051c0 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 80051c0:	4b2c      	ldr	r3, [pc, #176]	; (8005274 <HAL_DAC_MspInit+0xb4>)
 80051c2:	6802      	ldr	r2, [r0, #0]
{
 80051c4:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 80051c6:	429a      	cmp	r2, r3
{
 80051c8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ca:	f04f 0400 	mov.w	r4, #0
 80051ce:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80051d2:	9404      	str	r4, [sp, #16]
 80051d4:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 80051d8:	d001      	beq.n	80051de <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80051da:	b008      	add	sp, #32
 80051dc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 80051de:	4b26      	ldr	r3, [pc, #152]	; (8005278 <HAL_DAC_MspInit+0xb8>)
 80051e0:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051e2:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 80051e4:	4e25      	ldr	r6, [pc, #148]	; (800527c <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 80051e6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80051ea:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80051ee:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80051f2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80051f6:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80051fa:	9200      	str	r2, [sp, #0]
 80051fc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800520a:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800520c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005216:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005218:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800521a:	4819      	ldr	r0, [pc, #100]	; (8005280 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800521c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005220:	f003 f9a6 	bl	8008570 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8005224:	4a17      	ldr	r2, [pc, #92]	; (8005284 <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8005226:	2343      	movs	r3, #67	; 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8005228:	4630      	mov	r0, r6
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 800522a:	6032      	str	r2, [r6, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800522c:	2240      	movs	r2, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 800522e:	6073      	str	r3, [r6, #4]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005230:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005234:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005236:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800523a:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800523c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005240:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005242:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005244:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005246:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800524a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800524e:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8005250:	f001 fff6 	bl	8007240 <HAL_DMA_Init>
 8005254:	b958      	cbnz	r0, 800526e <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005256:	2200      	movs	r2, #0
 8005258:	2101      	movs	r1, #1
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800525a:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800525c:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800525e:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005260:	f001 fca2 	bl	8006ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005264:	2036      	movs	r0, #54	; 0x36
 8005266:	f001 fcdd 	bl	8006c24 <HAL_NVIC_EnableIRQ>
}
 800526a:	b008      	add	sp, #32
 800526c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800526e:	f7ff f905 	bl	800447c <Error_Handler>
 8005272:	e7f0      	b.n	8005256 <HAL_DAC_MspInit+0x96>
 8005274:	40007400 	.word	0x40007400
 8005278:	58024400 	.word	0x58024400
 800527c:	2400c594 	.word	0x2400c594
 8005280:	58020000 	.word	0x58020000
 8005284:	40020028 	.word	0x40020028

08005288 <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 8005288:	4a1b      	ldr	r2, [pc, #108]	; (80052f8 <HAL_LPTIM_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800528a:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 800528c:	6801      	ldr	r1, [r0, #0]
{
 800528e:	b510      	push	{r4, lr}
  if(hlptim->Instance==LPTIM2)
 8005290:	4291      	cmp	r1, r2
{
 8005292:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005294:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005298:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800529c:	9306      	str	r3, [sp, #24]
  if(hlptim->Instance==LPTIM2)
 800529e:	d001      	beq.n	80052a4 <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80052a0:	b008      	add	sp, #32
 80052a2:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80052a4:	4b15      	ldr	r3, [pc, #84]	; (80052fc <HAL_LPTIM_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 80052a6:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052a8:	a902      	add	r1, sp, #8
 80052aa:	4815      	ldr	r0, [pc, #84]	; (8005300 <HAL_LPTIM_MspInit+0x78>)
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80052ac:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80052b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80052b8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80052bc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80052c0:	9200      	str	r2, [sp, #0]
 80052c2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80052c8:	f042 0202 	orr.w	r2, r2, #2
 80052cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80052d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 80052d4:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052d6:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80052da:	ed9f 7b05 	vldr	d7, [pc, #20]	; 80052f0 <HAL_LPTIM_MspInit+0x68>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052de:	9301      	str	r3, [sp, #4]
 80052e0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80052e2:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052e6:	f003 f943 	bl	8008570 <HAL_GPIO_Init>
}
 80052ea:	b008      	add	sp, #32
 80052ec:	bd10      	pop	{r4, pc}
 80052ee:	bf00      	nop
 80052f0:	00000400 	.word	0x00000400
 80052f4:	00000002 	.word	0x00000002
 80052f8:	58002400 	.word	0x58002400
 80052fc:	58024400 	.word	0x58024400
 8005300:	58020400 	.word	0x58020400

08005304 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8005304:	6803      	ldr	r3, [r0, #0]
 8005306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800530a:	b510      	push	{r4, lr}
 800530c:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM2)
 800530e:	d007      	beq.n	8005320 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8005310:	4a27      	ldr	r2, [pc, #156]	; (80053b0 <HAL_TIM_Base_MspInit+0xac>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d01c      	beq.n	8005350 <HAL_TIM_Base_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8005316:	4a27      	ldr	r2, [pc, #156]	; (80053b4 <HAL_TIM_Base_MspInit+0xb0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d031      	beq.n	8005380 <HAL_TIM_Base_MspInit+0x7c>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800531c:	b004      	add	sp, #16
 800531e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005320:	4b25      	ldr	r3, [pc, #148]	; (80053b8 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8005322:	201c      	movs	r0, #28
 8005324:	2200      	movs	r2, #0
 8005326:	2104      	movs	r1, #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005328:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 800532c:	f044 0401 	orr.w	r4, r4, #1
 8005330:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8005334:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	9301      	str	r3, [sp, #4]
 800533e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8005340:	f001 fc32 	bl	8006ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005344:	201c      	movs	r0, #28
}
 8005346:	b004      	add	sp, #16
 8005348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800534c:	f001 bc6a 	b.w	8006c24 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005350:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005352:	2036      	movs	r0, #54	; 0x36
 8005354:	2200      	movs	r2, #0
 8005356:	2101      	movs	r1, #1
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005358:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 800535c:	f044 0410 	orr.w	r4, r4, #16
 8005360:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8005364:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	9302      	str	r3, [sp, #8]
 800536e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005370:	f001 fc1a 	bl	8006ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005374:	2036      	movs	r0, #54	; 0x36
}
 8005376:	b004      	add	sp, #16
 8005378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800537c:	f001 bc52 	b.w	8006c24 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005380:	4b0d      	ldr	r3, [pc, #52]	; (80053b8 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8005382:	2037      	movs	r0, #55	; 0x37
 8005384:	2200      	movs	r2, #0
 8005386:	2101      	movs	r1, #1
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005388:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 800538c:	f044 0420 	orr.w	r4, r4, #32
 8005390:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8005394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	9303      	str	r3, [sp, #12]
 800539e:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80053a0:	f001 fc02 	bl	8006ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80053a4:	2037      	movs	r0, #55	; 0x37
}
 80053a6:	b004      	add	sp, #16
 80053a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80053ac:	f001 bc3a 	b.w	8006c24 <HAL_NVIC_EnableIRQ>
 80053b0:	40001000 	.word	0x40001000
 80053b4:	40001400 	.word	0x40001400
 80053b8:	58024400 	.word	0x58024400
 80053bc:	00000000 	.word	0x00000000

080053c0 <HAL_TIM_Encoder_MspInit>:
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 80053c0:	4a1d      	ldr	r2, [pc, #116]	; (8005438 <HAL_TIM_Encoder_MspInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053c2:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 80053c4:	6801      	ldr	r1, [r0, #0]
{
 80053c6:	b500      	push	{lr}
  if(htim_encoder->Instance==TIM4)
 80053c8:	4291      	cmp	r1, r2
{
 80053ca:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053cc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80053d0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80053d4:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 80053d6:	d002      	beq.n	80053de <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80053d8:	b009      	add	sp, #36	; 0x24
 80053da:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 80053de:	4b17      	ldr	r3, [pc, #92]	; (800543c <HAL_TIM_Encoder_MspInit+0x7c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053e0:	2001      	movs	r0, #1
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053e2:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 80053e4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80053e8:	f042 0204 	orr.w	r2, r2, #4
 80053ec:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80053f0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80053f4:	f002 0204 	and.w	r2, r2, #4
 80053f8:	9200      	str	r2, [sp, #0]
 80053fa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80053fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005400:	f042 0208 	orr.w	r2, r2, #8
 8005404:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005408:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800540a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800540e:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005410:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005414:	480a      	ldr	r0, [pc, #40]	; (8005440 <HAL_TIM_Encoder_MspInit+0x80>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005416:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005418:	9301      	str	r3, [sp, #4]
 800541a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800541c:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8005430 <HAL_TIM_Encoder_MspInit+0x70>
 8005420:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005424:	f003 f8a4 	bl	8008570 <HAL_GPIO_Init>
}
 8005428:	b009      	add	sp, #36	; 0x24
 800542a:	f85d fb04 	ldr.w	pc, [sp], #4
 800542e:	bf00      	nop
 8005430:	00003000 	.word	0x00003000
 8005434:	00000002 	.word	0x00000002
 8005438:	40000800 	.word	0x40000800
 800543c:	58024400 	.word	0x58024400
 8005440:	58020c00 	.word	0x58020c00

08005444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005444:	b5d0      	push	{r4, r6, r7, lr}
 8005446:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005448:	2100      	movs	r1, #0
{
 800544a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800544c:	22bc      	movs	r2, #188	; 0xbc
 800544e:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005450:	9108      	str	r1, [sp, #32]
 8005452:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8005456:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800545a:	f00a fc25 	bl	800fca8 <memset>
  if(huart->Instance==USART3)
 800545e:	4b2d      	ldr	r3, [pc, #180]	; (8005514 <HAL_UART_MspInit+0xd0>)
 8005460:	6822      	ldr	r2, [r4, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d001      	beq.n	800546a <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005466:	b038      	add	sp, #224	; 0xe0
 8005468:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800546a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800546c:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800546e:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005470:	f004 ff32 	bl	800a2d8 <HAL_RCCEx_PeriphCLKConfig>
 8005474:	2800      	cmp	r0, #0
 8005476:	d149      	bne.n	800550c <HAL_UART_MspInit+0xc8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005478:	4b27      	ldr	r3, [pc, #156]	; (8005518 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800547a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800547e:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005480:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8005482:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005486:	2600      	movs	r6, #0
 8005488:	2700      	movs	r7, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 800548a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800548e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8005492:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8005496:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800549a:	9201      	str	r2, [sp, #4]
 800549c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800549e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80054a2:	f042 0202 	orr.w	r2, r2, #2
 80054a6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80054aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80054ae:	f002 0202 	and.w	r2, r2, #2
 80054b2:	9202      	str	r2, [sp, #8]
 80054b4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80054ba:	f042 0208 	orr.w	r2, r2, #8
 80054be:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80054c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80054c6:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054c8:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80054cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054d0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054d2:	a904      	add	r1, sp, #16
 80054d4:	4811      	ldr	r0, [pc, #68]	; (800551c <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054d6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80054d8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054dc:	f003 f848 	bl	8008570 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80054e0:	2302      	movs	r3, #2
 80054e2:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054e6:	a904      	add	r1, sp, #16
 80054e8:	480d      	ldr	r0, [pc, #52]	; (8005520 <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80054ea:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80054ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054f0:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054f4:	f003 f83c 	bl	8008570 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80054f8:	2200      	movs	r2, #0
 80054fa:	2101      	movs	r1, #1
 80054fc:	2027      	movs	r0, #39	; 0x27
 80054fe:	f001 fb53 	bl	8006ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005502:	2027      	movs	r0, #39	; 0x27
 8005504:	f001 fb8e 	bl	8006c24 <HAL_NVIC_EnableIRQ>
}
 8005508:	b038      	add	sp, #224	; 0xe0
 800550a:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 800550c:	f7fe ffb6 	bl	800447c <Error_Handler>
 8005510:	e7b2      	b.n	8005478 <HAL_UART_MspInit+0x34>
 8005512:	bf00      	nop
 8005514:	40004800 	.word	0x40004800
 8005518:	58024400 	.word	0x58024400
 800551c:	58020400 	.word	0x58020400
 8005520:	58020c00 	.word	0x58020c00

08005524 <NMI_Handler>:

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop

08005528 <HardFault_Handler>:
void HardFault_Handler(void)
{
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8005528:	e7fe      	b.n	8005528 <HardFault_Handler>
 800552a:	bf00      	nop

0800552c <MemManage_Handler>:
void MemManage_Handler(void)
{
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 800552c:	e7fe      	b.n	800552c <MemManage_Handler>
 800552e:	bf00      	nop

08005530 <BusFault_Handler>:
void BusFault_Handler(void)
{
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8005530:	e7fe      	b.n	8005530 <BusFault_Handler>
 8005532:	bf00      	nop

08005534 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8005534:	e7fe      	b.n	8005534 <UsageFault_Handler>
 8005536:	bf00      	nop

08005538 <SVC_Handler>:
{
	/* USER CODE BEGIN SVCall_IRQn 0 */

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 8005538:	f000 b966 	b.w	8005808 <ADC3_IRQHandler>

0800553c <DebugMon_Handler>:
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop

08005540 <PendSV_Handler>:
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop

08005544 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8005544:	b508      	push	{r3, lr}
	/* USER CODE BEGIN SysTick_IRQn 0 */
	extern uint32_t SystemSeconds, SystemMinutes;
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8005546:	f000 f9b7 	bl	80058b8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */
	if ((uwTick % 1000) == 0)
 800554a:	4b0d      	ldr	r3, [pc, #52]	; (8005580 <SysTick_Handler+0x3c>)
 800554c:	490d      	ldr	r1, [pc, #52]	; (8005584 <SysTick_Handler+0x40>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a0d      	ldr	r2, [pc, #52]	; (8005588 <SysTick_Handler+0x44>)
 8005552:	fb01 f303 	mul.w	r3, r1, r3
 8005556:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 800555a:	d310      	bcc.n	800557e <SysTick_Handler+0x3a>
	{
		SystemSeconds++;
 800555c:	490b      	ldr	r1, [pc, #44]	; (800558c <SysTick_Handler+0x48>)
 800555e:	4a0c      	ldr	r2, [pc, #48]	; (8005590 <SysTick_Handler+0x4c>)
 8005560:	680b      	ldr	r3, [r1, #0]
		if((SystemSeconds % 60) == 0)
 8005562:	480c      	ldr	r0, [pc, #48]	; (8005594 <SysTick_Handler+0x50>)
		SystemSeconds++;
 8005564:	3301      	adds	r3, #1
 8005566:	fb03 f202 	mul.w	r2, r3, r2
 800556a:	600b      	str	r3, [r1, #0]
		if((SystemSeconds % 60) == 0)
 800556c:	ebb0 0fb2 	cmp.w	r0, r2, ror #2
 8005570:	d305      	bcc.n	800557e <SysTick_Handler+0x3a>
		{
			SystemMinutes++;
 8005572:	4a09      	ldr	r2, [pc, #36]	; (8005598 <SysTick_Handler+0x54>)
			SystemSeconds = 0;
 8005574:	2000      	movs	r0, #0
			SystemMinutes++;
 8005576:	6813      	ldr	r3, [r2, #0]
			SystemSeconds = 0;
 8005578:	6008      	str	r0, [r1, #0]
			SystemMinutes++;
 800557a:	3301      	adds	r3, #1
 800557c:	6013      	str	r3, [r2, #0]
		}
	}

	/* USER CODE END SysTick_IRQn 1 */
}
 800557e:	bd08      	pop	{r3, pc}
 8005580:	2400d9d8 	.word	0x2400d9d8
 8005584:	26e978d5 	.word	0x26e978d5
 8005588:	00418937 	.word	0x00418937
 800558c:	240072d4 	.word	0x240072d4
 8005590:	eeeeeeef 	.word	0xeeeeeeef
 8005594:	04444444 	.word	0x04444444
 8005598:	240072d0 	.word	0x240072d0

0800559c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 800559c:	4801      	ldr	r0, [pc, #4]	; (80055a4 <DMA1_Stream0_IRQHandler+0x8>)
 800559e:	f002 bc97 	b.w	8007ed0 <HAL_DMA_IRQHandler>
 80055a2:	bf00      	nop
 80055a4:	2400c51c 	.word	0x2400c51c

080055a8 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
	/* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

	/* USER CODE END DMA1_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80055a8:	4801      	ldr	r0, [pc, #4]	; (80055b0 <DMA1_Stream1_IRQHandler+0x8>)
 80055aa:	f002 bc91 	b.w	8007ed0 <HAL_DMA_IRQHandler>
 80055ae:	bf00      	nop
 80055b0:	2400c594 	.word	0x2400c594

080055b4 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
	/* USER CODE BEGIN ADC_IRQn 0 */

	/* USER CODE END ADC_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 80055b4:	4804      	ldr	r0, [pc, #16]	; (80055c8 <ADC_IRQHandler+0x14>)
{
 80055b6:	b508      	push	{r3, lr}
	HAL_ADC_IRQHandler(&hadc1);
 80055b8:	f000 f9dc 	bl	8005974 <HAL_ADC_IRQHandler>
	HAL_ADC_IRQHandler(&hadc2);
 80055bc:	4803      	ldr	r0, [pc, #12]	; (80055cc <ADC_IRQHandler+0x18>)
	/* USER CODE BEGIN ADC_IRQn 1 */

	/* USER CODE END ADC_IRQn 1 */
}
 80055be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_ADC_IRQHandler(&hadc2);
 80055c2:	f000 b9d7 	b.w	8005974 <HAL_ADC_IRQHandler>
 80055c6:	bf00      	nop
 80055c8:	2400c43c 	.word	0x2400c43c
 80055cc:	2400c4a0 	.word	0x2400c4a0

080055d0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 80055d0:	4801      	ldr	r0, [pc, #4]	; (80055d8 <TIM2_IRQHandler+0x8>)
 80055d2:	f006 badf 	b.w	800bb94 <HAL_TIM_IRQHandler>
 80055d6:	bf00      	nop
 80055d8:	2400c648 	.word	0x2400c648

080055dc <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 80055dc:	4801      	ldr	r0, [pc, #4]	; (80055e4 <USART3_IRQHandler+0x8>)
 80055de:	f006 bc01 	b.w	800bde4 <HAL_UART_IRQHandler>
 80055e2:	bf00      	nop
 80055e4:	2400c778 	.word	0x2400c778

080055e8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(SwInt1_Pin);
 80055e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80055ec:	f003 b904 	b.w	80087f8 <HAL_GPIO_EXTI_IRQHandler>

080055f0 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_DAC_IRQHandler(&hdac1);
 80055f0:	4804      	ldr	r0, [pc, #16]	; (8005604 <TIM6_DAC_IRQHandler+0x14>)
{
 80055f2:	b508      	push	{r3, lr}
	HAL_DAC_IRQHandler(&hdac1);
 80055f4:	f001 fc46 	bl	8006e84 <HAL_DAC_IRQHandler>
	HAL_TIM_IRQHandler(&htim6);
 80055f8:	4803      	ldr	r0, [pc, #12]	; (8005608 <TIM6_DAC_IRQHandler+0x18>)
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 80055fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_IRQHandler(&htim6);
 80055fe:	f006 bac9 	b.w	800bb94 <HAL_TIM_IRQHandler>
 8005602:	bf00      	nop
 8005604:	2400c508 	.word	0x2400c508
 8005608:	2400c6e0 	.word	0x2400c6e0

0800560c <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
	/* USER CODE BEGIN TIM7_IRQn 0 */

	/* USER CODE END TIM7_IRQn 0 */
	HAL_TIM_IRQHandler(&htim7);
 800560c:	4801      	ldr	r0, [pc, #4]	; (8005614 <TIM7_IRQHandler+0x8>)
 800560e:	f006 bac1 	b.w	800bb94 <HAL_TIM_IRQHandler>
 8005612:	bf00      	nop
 8005614:	2400c72c 	.word	0x2400c72c

08005618 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
	/* USER CODE BEGIN OTG_FS_IRQn 0 */

	/* USER CODE END OTG_FS_IRQn 0 */
	HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005618:	4801      	ldr	r0, [pc, #4]	; (8005620 <OTG_FS_IRQHandler+0x8>)
 800561a:	f003 ba25 	b.w	8008a68 <HAL_PCD_IRQHandler>
 800561e:	bf00      	nop
 8005620:	2400eeb0 	.word	0x2400eeb0

08005624 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005624:	2001      	movs	r0, #1
 8005626:	4770      	bx	lr

08005628 <_kill>:

int _kill(int pid, int sig)
{
 8005628:	b508      	push	{r3, lr}
	errno = EINVAL;
 800562a:	f00a fb05 	bl	800fc38 <__errno>
 800562e:	2216      	movs	r2, #22
 8005630:	4603      	mov	r3, r0
	return -1;
}
 8005632:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8005636:	601a      	str	r2, [r3, #0]
}
 8005638:	bd08      	pop	{r3, pc}
 800563a:	bf00      	nop

0800563c <_exit>:

void _exit (int status)
{
 800563c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800563e:	f00a fafb 	bl	800fc38 <__errno>
 8005642:	2316      	movs	r3, #22
 8005644:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8005646:	e7fe      	b.n	8005646 <_exit+0xa>

08005648 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005648:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800564a:	1e16      	subs	r6, r2, #0
 800564c:	dd07      	ble.n	800565e <_read+0x16>
 800564e:	460c      	mov	r4, r1
 8005650:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8005652:	f3af 8000 	nop.w
 8005656:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800565a:	42a5      	cmp	r5, r4
 800565c:	d1f9      	bne.n	8005652 <_read+0xa>
	}

return len;
}
 800565e:	4630      	mov	r0, r6
 8005660:	bd70      	pop	{r4, r5, r6, pc}
 8005662:	bf00      	nop

08005664 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005664:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005666:	1e16      	subs	r6, r2, #0
 8005668:	dd07      	ble.n	800567a <_write+0x16>
 800566a:	460c      	mov	r4, r1
 800566c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800566e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005672:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005676:	42ac      	cmp	r4, r5
 8005678:	d1f9      	bne.n	800566e <_write+0xa>
	}
	return len;
}
 800567a:	4630      	mov	r0, r6
 800567c:	bd70      	pop	{r4, r5, r6, pc}
 800567e:	bf00      	nop

08005680 <_close>:

int _close(int file)
{
	return -1;
}
 8005680:	f04f 30ff 	mov.w	r0, #4294967295
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop

08005688 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800568c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800568e:	604b      	str	r3, [r1, #4]
}
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop

08005694 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005694:	2001      	movs	r0, #1
 8005696:	4770      	bx	lr

08005698 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005698:	2000      	movs	r0, #0
 800569a:	4770      	bx	lr

0800569c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800569c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800569e:	4c0d      	ldr	r4, [pc, #52]	; (80056d4 <_sbrk+0x38>)
{
 80056a0:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056a2:	490d      	ldr	r1, [pc, #52]	; (80056d8 <_sbrk+0x3c>)
 80056a4:	4d0d      	ldr	r5, [pc, #52]	; (80056dc <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80056a6:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056a8:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 80056aa:	b12a      	cbz	r2, 80056b8 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056ac:	4413      	add	r3, r2
 80056ae:	428b      	cmp	r3, r1
 80056b0:	d808      	bhi.n	80056c4 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80056b2:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 80056b4:	6023      	str	r3, [r4, #0]
}
 80056b6:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 80056b8:	4809      	ldr	r0, [pc, #36]	; (80056e0 <_sbrk+0x44>)
 80056ba:	4602      	mov	r2, r0
 80056bc:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80056be:	4413      	add	r3, r2
 80056c0:	428b      	cmp	r3, r1
 80056c2:	d9f6      	bls.n	80056b2 <_sbrk+0x16>
    errno = ENOMEM;
 80056c4:	f00a fab8 	bl	800fc38 <__errno>
 80056c8:	230c      	movs	r3, #12
    return (void *)-1;
 80056ca:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80056ce:	6003      	str	r3, [r0, #0]
}
 80056d0:	4610      	mov	r0, r2
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	2400d9d4 	.word	0x2400d9d4
 80056d8:	24080000 	.word	0x24080000
 80056dc:	00000400 	.word	0x00000400
 80056e0:	2400f4e8 	.word	0x2400f4e8

080056e4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80056e4:	4929      	ldr	r1, [pc, #164]	; (800578c <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80056e6:	4a2a      	ldr	r2, [pc, #168]	; (8005790 <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80056e8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80056ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80056f0:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80056f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80056f6:	6813      	ldr	r3, [r2, #0]
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	2b06      	cmp	r3, #6
 80056fe:	d805      	bhi.n	800570c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005700:	6813      	ldr	r3, [r2, #0]
 8005702:	f023 030f 	bic.w	r3, r3, #15
 8005706:	f043 0307 	orr.w	r3, r3, #7
 800570a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800570c:	4b21      	ldr	r3, [pc, #132]	; (8005794 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800570e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005710:	4a21      	ldr	r2, [pc, #132]	; (8005798 <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 8005712:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005714:	481e      	ldr	r0, [pc, #120]	; (8005790 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8005716:	f041 0101 	orr.w	r1, r1, #1
 800571a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800571c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800571e:	6819      	ldr	r1, [r3, #0]
 8005720:	400a      	ands	r2, r1
 8005722:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005724:	6803      	ldr	r3, [r0, #0]
 8005726:	071b      	lsls	r3, r3, #28
 8005728:	d505      	bpl.n	8005736 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800572a:	6803      	ldr	r3, [r0, #0]
 800572c:	f023 030f 	bic.w	r3, r3, #15
 8005730:	f043 0307 	orr.w	r3, r3, #7
 8005734:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005736:	4b17      	ldr	r3, [pc, #92]	; (8005794 <SystemInit+0xb0>)
 8005738:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800573a:	4918      	ldr	r1, [pc, #96]	; (800579c <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 800573c:	4c18      	ldr	r4, [pc, #96]	; (80057a0 <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 800573e:	4819      	ldr	r0, [pc, #100]	; (80057a4 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 8005740:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8005742:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8005744:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8005746:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8005748:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800574a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800574c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800574e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005750:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005752:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005754:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005756:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005758:	4c13      	ldr	r4, [pc, #76]	; (80057a8 <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 800575a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800575e:	4913      	ldr	r1, [pc, #76]	; (80057ac <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 8005760:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8005762:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	4019      	ands	r1, r3
 8005768:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800576c:	d203      	bcs.n	8005776 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800576e:	4b10      	ldr	r3, [pc, #64]	; (80057b0 <SystemInit+0xcc>)
 8005770:	2201      	movs	r2, #1
 8005772:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005776:	490f      	ldr	r1, [pc, #60]	; (80057b4 <SystemInit+0xd0>)
 8005778:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800577c:	4b03      	ldr	r3, [pc, #12]	; (800578c <SystemInit+0xa8>)
 800577e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005782:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8005784:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005788:	609a      	str	r2, [r3, #8]
}
 800578a:	4770      	bx	lr
 800578c:	e000ed00 	.word	0xe000ed00
 8005790:	52002000 	.word	0x52002000
 8005794:	58024400 	.word	0x58024400
 8005798:	eaf6ed7f 	.word	0xeaf6ed7f
 800579c:	01010280 	.word	0x01010280
 80057a0:	02020200 	.word	0x02020200
 80057a4:	01ff0000 	.word	0x01ff0000
 80057a8:	5c001000 	.word	0x5c001000
 80057ac:	ffff0000 	.word	0xffff0000
 80057b0:	51008000 	.word	0x51008000
 80057b4:	52004000 	.word	0x52004000

080057b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80057b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057f0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80057bc:	f7ff ff92 	bl	80056e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80057c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80057c2:	e003      	b.n	80057cc <LoopCopyDataInit>

080057c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80057c4:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80057c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80057c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80057ca:	3104      	adds	r1, #4

080057cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80057cc:	480a      	ldr	r0, [pc, #40]	; (80057f8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80057ce:	4b0b      	ldr	r3, [pc, #44]	; (80057fc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80057d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80057d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80057d4:	d3f6      	bcc.n	80057c4 <CopyDataInit>
  ldr  r2, =_sbss
 80057d6:	4a0a      	ldr	r2, [pc, #40]	; (8005800 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80057d8:	e002      	b.n	80057e0 <LoopFillZerobss>

080057da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80057da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80057dc:	f842 3b04 	str.w	r3, [r2], #4

080057e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80057e0:	4b08      	ldr	r3, [pc, #32]	; (8005804 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80057e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80057e4:	d3f9      	bcc.n	80057da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80057e6:	f00a fa2d 	bl	800fc44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057ea:	f7fe ff3d 	bl	8004668 <main>
  bx  lr    
 80057ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80057f0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80057f4:	0801e7d0 	.word	0x0801e7d0
  ldr  r0, =_sdata
 80057f8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80057fc:	24000668 	.word	0x24000668
  ldr  r2, =_sbss
 8005800:	24000680 	.word	0x24000680
  ldr  r3, = _ebss
 8005804:	2400f4e8 	.word	0x2400f4e8

08005808 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005808:	e7fe      	b.n	8005808 <ADC3_IRQHandler>
	...

0800580c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800580c:	4b0f      	ldr	r3, [pc, #60]	; (800584c <HAL_InitTick+0x40>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	b90b      	cbnz	r3, 8005816 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8005812:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8005814:	4770      	bx	lr
{
 8005816:	b510      	push	{r4, lr}
 8005818:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800581a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800581e:	4a0c      	ldr	r2, [pc, #48]	; (8005850 <HAL_InitTick+0x44>)
 8005820:	fbb0 f3f3 	udiv	r3, r0, r3
 8005824:	6810      	ldr	r0, [r2, #0]
 8005826:	fbb0 f0f3 	udiv	r0, r0, r3
 800582a:	f001 fa09 	bl	8006c40 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800582e:	2c0f      	cmp	r4, #15
 8005830:	d800      	bhi.n	8005834 <HAL_InitTick+0x28>
 8005832:	b108      	cbz	r0, 8005838 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8005834:	2001      	movs	r0, #1
}
 8005836:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005838:	2200      	movs	r2, #0
 800583a:	4621      	mov	r1, r4
 800583c:	f04f 30ff 	mov.w	r0, #4294967295
 8005840:	f001 f9b2 	bl	8006ba8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005844:	4b03      	ldr	r3, [pc, #12]	; (8005854 <HAL_InitTick+0x48>)
 8005846:	2000      	movs	r0, #0
 8005848:	601c      	str	r4, [r3, #0]
}
 800584a:	bd10      	pop	{r4, pc}
 800584c:	24000314 	.word	0x24000314
 8005850:	2400030c 	.word	0x2400030c
 8005854:	24000318 	.word	0x24000318

08005858 <HAL_Init>:
{
 8005858:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800585a:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800585c:	4c12      	ldr	r4, [pc, #72]	; (80058a8 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800585e:	f001 f991 	bl	8006b84 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005862:	f004 f9ad 	bl	8009bc0 <HAL_RCC_GetSysClockFreq>
 8005866:	4b11      	ldr	r3, [pc, #68]	; (80058ac <HAL_Init+0x54>)
 8005868:	4911      	ldr	r1, [pc, #68]	; (80058b0 <HAL_Init+0x58>)
 800586a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800586c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800586e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005872:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005876:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005878:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800587a:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800587e:	490d      	ldr	r1, [pc, #52]	; (80058b4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005880:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005884:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005886:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800588a:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800588c:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800588e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005890:	f7ff ffbc 	bl	800580c <HAL_InitTick>
 8005894:	b110      	cbz	r0, 800589c <HAL_Init+0x44>
    return HAL_ERROR;
 8005896:	2401      	movs	r4, #1
}
 8005898:	4620      	mov	r0, r4
 800589a:	bd10      	pop	{r4, pc}
 800589c:	4604      	mov	r4, r0
  HAL_MspInit();
 800589e:	f7ff fbbb 	bl	8005018 <HAL_MspInit>
}
 80058a2:	4620      	mov	r0, r4
 80058a4:	bd10      	pop	{r4, pc}
 80058a6:	bf00      	nop
 80058a8:	24000310 	.word	0x24000310
 80058ac:	58024400 	.word	0x58024400
 80058b0:	0801a1b8 	.word	0x0801a1b8
 80058b4:	2400030c 	.word	0x2400030c

080058b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80058b8:	4a03      	ldr	r2, [pc, #12]	; (80058c8 <HAL_IncTick+0x10>)
 80058ba:	4b04      	ldr	r3, [pc, #16]	; (80058cc <HAL_IncTick+0x14>)
 80058bc:	6811      	ldr	r1, [r2, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	440b      	add	r3, r1
 80058c2:	6013      	str	r3, [r2, #0]
}
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	2400d9d8 	.word	0x2400d9d8
 80058cc:	24000314 	.word	0x24000314

080058d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80058d0:	4b01      	ldr	r3, [pc, #4]	; (80058d8 <HAL_GetTick+0x8>)
 80058d2:	6818      	ldr	r0, [r3, #0]
}
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	2400d9d8 	.word	0x2400d9d8

080058dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80058e0:	f7ff fff6 	bl	80058d0 <HAL_GetTick>
 80058e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058e6:	1c63      	adds	r3, r4, #1
 80058e8:	d002      	beq.n	80058f0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80058ea:	4b04      	ldr	r3, [pc, #16]	; (80058fc <HAL_Delay+0x20>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80058f0:	f7ff ffee 	bl	80058d0 <HAL_GetTick>
 80058f4:	1b43      	subs	r3, r0, r5
 80058f6:	42a3      	cmp	r3, r4
 80058f8:	d3fa      	bcc.n	80058f0 <HAL_Delay+0x14>
  {
  }
}
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
 80058fc:	24000314 	.word	0x24000314

08005900 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8005900:	4b01      	ldr	r3, [pc, #4]	; (8005908 <HAL_GetREVID+0x8>)
 8005902:	6818      	ldr	r0, [r3, #0]
}
 8005904:	0c00      	lsrs	r0, r0, #16
 8005906:	4770      	bx	lr
 8005908:	5c001000 	.word	0x5c001000

0800590c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 800590c:	4a03      	ldr	r2, [pc, #12]	; (800591c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 800590e:	6813      	ldr	r3, [r2, #0]
 8005910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005914:	4318      	orrs	r0, r3
 8005916:	6010      	str	r0, [r2, #0]
}
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	58003c00 	.word	0x58003c00

08005920 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8005920:	4a03      	ldr	r2, [pc, #12]	; (8005930 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8005922:	6813      	ldr	r3, [r2, #0]
 8005924:	f023 0302 	bic.w	r3, r3, #2
 8005928:	4318      	orrs	r0, r3
 800592a:	6010      	str	r0, [r2, #0]
}
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	58003c00 	.word	0x58003c00

08005934 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8005934:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8005936:	4c0a      	ldr	r4, [pc, #40]	; (8005960 <HAL_SYSCFG_EnableVREFBUF+0x2c>)
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005940:	f7ff ffc6 	bl	80058d0 <HAL_GetTick>
 8005944:	4605      	mov	r5, r0

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8005946:	e004      	b.n	8005952 <HAL_SYSCFG_EnableVREFBUF+0x1e>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8005948:	f7ff ffc2 	bl	80058d0 <HAL_GetTick>
 800594c:	1b40      	subs	r0, r0, r5
 800594e:	280a      	cmp	r0, #10
 8005950:	d804      	bhi.n	800595c <HAL_SYSCFG_EnableVREFBUF+0x28>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	071b      	lsls	r3, r3, #28
 8005956:	d5f7      	bpl.n	8005948 <HAL_SYSCFG_EnableVREFBUF+0x14>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8005958:	2000      	movs	r0, #0
}
 800595a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 800595c:	2003      	movs	r0, #3
}
 800595e:	bd38      	pop	{r3, r4, r5, pc}
 8005960:	58003c00 	.word	0x58003c00

08005964 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005964:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005966:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005968:	f7fd fd50 	bl	800340c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800596c:	bd08      	pop	{r3, pc}
 800596e:	bf00      	nop

08005970 <HAL_ADC_ErrorCallback>:
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop

08005974 <HAL_ADC_IRQHandler>:
{
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005976:	4a90      	ldr	r2, [pc, #576]	; (8005bb8 <HAL_ADC_IRQHandler+0x244>)
{
 8005978:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 800597a:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800597c:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 800597e:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005980:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005982:	f000 8095 	beq.w	8005ab0 <HAL_ADC_IRQHandler+0x13c>
 8005986:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800598a:	4293      	cmp	r3, r2
 800598c:	f000 8090 	beq.w	8005ab0 <HAL_ADC_IRQHandler+0x13c>
 8005990:	4a8a      	ldr	r2, [pc, #552]	; (8005bbc <HAL_ADC_IRQHandler+0x248>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005992:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005994:	07a9      	lsls	r1, r5, #30
 8005996:	f007 071f 	and.w	r7, r7, #31
 800599a:	d502      	bpl.n	80059a2 <HAL_ADC_IRQHandler+0x2e>
 800599c:	07b2      	lsls	r2, r6, #30
 800599e:	f100 80aa 	bmi.w	8005af6 <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80059a2:	0769      	lsls	r1, r5, #29
 80059a4:	d579      	bpl.n	8005a9a <HAL_ADC_IRQHandler+0x126>
 80059a6:	0772      	lsls	r2, r6, #29
 80059a8:	d577      	bpl.n	8005a9a <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80059aa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80059ac:	06d2      	lsls	r2, r2, #27
 80059ae:	d403      	bmi.n	80059b8 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059b0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80059b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b6:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80059be:	d11c      	bne.n	80059fa <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80059c0:	4a7f      	ldr	r2, [pc, #508]	; (8005bc0 <HAL_ADC_IRQHandler+0x24c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	f000 80e8 	beq.w	8005b98 <HAL_ADC_IRQHandler+0x224>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80059c8:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80059ca:	0490      	lsls	r0, r2, #18
 80059cc:	d415      	bmi.n	80059fa <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	0711      	lsls	r1, r2, #28
 80059d2:	d512      	bpl.n	80059fa <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	0752      	lsls	r2, r2, #29
 80059d8:	f100 80f6 	bmi.w	8005bc8 <HAL_ADC_IRQHandler+0x254>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	f022 020c 	bic.w	r2, r2, #12
 80059e2:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80059e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80059e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059ea:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80059ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80059ee:	04db      	lsls	r3, r3, #19
 80059f0:	d403      	bmi.n	80059fa <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80059f4:	f043 0301 	orr.w	r3, r3, #1
 80059f8:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80059fa:	4620      	mov	r0, r4
 80059fc:	f7fd fce8 	bl	80033d0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	220c      	movs	r2, #12
 8005a04:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005a06:	06a8      	lsls	r0, r5, #26
 8005a08:	d54d      	bpl.n	8005aa6 <HAL_ADC_IRQHandler+0x132>
 8005a0a:	06b1      	lsls	r1, r6, #26
 8005a0c:	d54b      	bpl.n	8005aa6 <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a0e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005a10:	06d1      	lsls	r1, r2, #27
 8005a12:	d403      	bmi.n	8005a1c <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005a14:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005a16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a1a:	6562      	str	r2, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a1c:	4968      	ldr	r1, [pc, #416]	; (8005bc0 <HAL_ADC_IRQHandler+0x24c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a20:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005a22:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005a24:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 8005a28:	d073      	beq.n	8005b12 <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005a2a:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005a2c:	b9d2      	cbnz	r2, 8005a64 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005a2e:	018a      	lsls	r2, r1, #6
 8005a30:	f100 80aa 	bmi.w	8005b88 <HAL_ADC_IRQHandler+0x214>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	0650      	lsls	r0, r2, #25
 8005a38:	d514      	bpl.n	8005a64 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005a3a:	0289      	lsls	r1, r1, #10
 8005a3c:	d412      	bmi.n	8005a64 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	0712      	lsls	r2, r2, #28
 8005a42:	f100 80cc 	bmi.w	8005bde <HAL_ADC_IRQHandler+0x26a>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a4c:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005a4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a54:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005a56:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a58:	05d8      	lsls	r0, r3, #23
 8005a5a:	d403      	bmi.n	8005a64 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a5e:	f043 0301 	orr.w	r3, r3, #1
 8005a62:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005a64:	4620      	mov	r0, r4
 8005a66:	f001 f81b 	bl	8006aa0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	2260      	movs	r2, #96	; 0x60
 8005a6e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005a70:	0629      	lsls	r1, r5, #24
 8005a72:	d501      	bpl.n	8005a78 <HAL_ADC_IRQHandler+0x104>
 8005a74:	0632      	lsls	r2, r6, #24
 8005a76:	d460      	bmi.n	8005b3a <HAL_ADC_IRQHandler+0x1c6>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005a78:	05e8      	lsls	r0, r5, #23
 8005a7a:	d501      	bpl.n	8005a80 <HAL_ADC_IRQHandler+0x10c>
 8005a7c:	05f1      	lsls	r1, r6, #23
 8005a7e:	d467      	bmi.n	8005b50 <HAL_ADC_IRQHandler+0x1dc>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005a80:	05aa      	lsls	r2, r5, #22
 8005a82:	d501      	bpl.n	8005a88 <HAL_ADC_IRQHandler+0x114>
 8005a84:	05b0      	lsls	r0, r6, #22
 8005a86:	d44c      	bmi.n	8005b22 <HAL_ADC_IRQHandler+0x1ae>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005a88:	06e9      	lsls	r1, r5, #27
 8005a8a:	d501      	bpl.n	8005a90 <HAL_ADC_IRQHandler+0x11c>
 8005a8c:	06f2      	lsls	r2, r6, #27
 8005a8e:	d411      	bmi.n	8005ab4 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005a90:	0568      	lsls	r0, r5, #21
 8005a92:	d501      	bpl.n	8005a98 <HAL_ADC_IRQHandler+0x124>
 8005a94:	0571      	lsls	r1, r6, #21
 8005a96:	d467      	bmi.n	8005b68 <HAL_ADC_IRQHandler+0x1f4>
}
 8005a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005a9a:	0728      	lsls	r0, r5, #28
 8005a9c:	d5b3      	bpl.n	8005a06 <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005a9e:	0731      	lsls	r1, r6, #28
 8005aa0:	d483      	bmi.n	80059aa <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005aa2:	06a8      	lsls	r0, r5, #26
 8005aa4:	d4b1      	bmi.n	8005a0a <HAL_ADC_IRQHandler+0x96>
 8005aa6:	066a      	lsls	r2, r5, #25
 8005aa8:	d5e2      	bpl.n	8005a70 <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005aaa:	0670      	lsls	r0, r6, #25
 8005aac:	d5e0      	bpl.n	8005a70 <HAL_ADC_IRQHandler+0xfc>
 8005aae:	e7ae      	b.n	8005a0e <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ab0:	4a44      	ldr	r2, [pc, #272]	; (8005bc4 <HAL_ADC_IRQHandler+0x250>)
 8005ab2:	e76e      	b.n	8005992 <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005ab4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005ab6:	b17a      	cbz	r2, 8005ad8 <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005ab8:	2f00      	cmp	r7, #0
 8005aba:	d072      	beq.n	8005ba2 <HAL_ADC_IRQHandler+0x22e>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005abc:	4a3e      	ldr	r2, [pc, #248]	; (8005bb8 <HAL_ADC_IRQHandler+0x244>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	f000 808b 	beq.w	8005bda <HAL_ADC_IRQHandler+0x266>
 8005ac4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	f000 8086 	beq.w	8005bda <HAL_ADC_IRQHandler+0x266>
 8005ace:	4a3b      	ldr	r2, [pc, #236]	; (8005bbc <HAL_ADC_IRQHandler+0x248>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8005ad0:	6892      	ldr	r2, [r2, #8]
 8005ad2:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8005ad6:	d00b      	beq.n	8005af0 <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005ad8:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_ADC_ErrorCallback(hadc);
 8005ada:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005adc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ae0:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005ae2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ae4:	f043 0302 	orr.w	r3, r3, #2
 8005ae8:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8005aea:	f7ff ff41 	bl	8005970 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	2210      	movs	r2, #16
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	e7cc      	b.n	8005a90 <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005af6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005af8:	06d8      	lsls	r0, r3, #27
 8005afa:	d403      	bmi.n	8005b04 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005afc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005afe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b02:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005b04:	4620      	mov	r0, r4
 8005b06:	f000 ffd3 	bl	8006ab0 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	e747      	b.n	80059a2 <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005b12:	1fb9      	subs	r1, r7, #6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005b14:	2901      	cmp	r1, #1
 8005b16:	d988      	bls.n	8005a2a <HAL_ADC_IRQHandler+0xb6>
 8005b18:	2f00      	cmp	r7, #0
 8005b1a:	d086      	beq.n	8005a2a <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005b1c:	4926      	ldr	r1, [pc, #152]	; (8005bb8 <HAL_ADC_IRQHandler+0x244>)
 8005b1e:	68c9      	ldr	r1, [r1, #12]
 8005b20:	e784      	b.n	8005a2c <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005b22:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005b24:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005b26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b2a:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005b2c:	f000 ffbe 	bl	8006aac <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	e7a6      	b.n	8005a88 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005b3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005b3c:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b42:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005b44:	f7fd fca4 	bl	8003490 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	2280      	movs	r2, #128	; 0x80
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	e793      	b.n	8005a78 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005b50:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005b52:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b58:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005b5a:	f000 ffa5 	bl	8006aa8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	e78b      	b.n	8005a80 <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005b68:	6d62      	ldr	r2, [r4, #84]	; 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005b6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005b6e:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005b70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b74:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005b76:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005b78:	f042 0208 	orr.w	r2, r2, #8
 8005b7c:	65a2      	str	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005b7e:	6019      	str	r1, [r3, #0]
}
 8005b80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005b84:	f000 bf8e 	b.w	8006aa4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005b88:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005b8c:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005b90:	4302      	orrs	r2, r0
 8005b92:	f47f af67 	bne.w	8005a64 <HAL_ADC_IRQHandler+0xf0>
 8005b96:	e74d      	b.n	8005a34 <HAL_ADC_IRQHandler+0xc0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b98:	2f09      	cmp	r7, #9
 8005b9a:	d906      	bls.n	8005baa <HAL_ADC_IRQHandler+0x236>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005b9c:	4a06      	ldr	r2, [pc, #24]	; (8005bb8 <HAL_ADC_IRQHandler+0x244>)
 8005b9e:	68d2      	ldr	r2, [r2, #12]
 8005ba0:	e713      	b.n	80059ca <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	0797      	lsls	r7, r2, #30
 8005ba6:	d0a3      	beq.n	8005af0 <HAL_ADC_IRQHandler+0x17c>
 8005ba8:	e796      	b.n	8005ad8 <HAL_ADC_IRQHandler+0x164>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005baa:	f240 2221 	movw	r2, #545	; 0x221
 8005bae:	40fa      	lsrs	r2, r7
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005bb0:	07d2      	lsls	r2, r2, #31
 8005bb2:	f53f af09 	bmi.w	80059c8 <HAL_ADC_IRQHandler+0x54>
 8005bb6:	e7f1      	b.n	8005b9c <HAL_ADC_IRQHandler+0x228>
 8005bb8:	40022000 	.word	0x40022000
 8005bbc:	58026300 	.word	0x58026300
 8005bc0:	40022100 	.word	0x40022100
 8005bc4:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bc8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005bca:	f043 0310 	orr.w	r3, r3, #16
 8005bce:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	65a3      	str	r3, [r4, #88]	; 0x58
 8005bd8:	e70f      	b.n	80059fa <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005bda:	4a05      	ldr	r2, [pc, #20]	; (8005bf0 <HAL_ADC_IRQHandler+0x27c>)
 8005bdc:	e778      	b.n	8005ad0 <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bde:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005be0:	f043 0310 	orr.w	r3, r3, #16
 8005be4:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005be6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005be8:	f043 0301 	orr.w	r3, r3, #1
 8005bec:	65a3      	str	r3, [r4, #88]	; 0x58
 8005bee:	e739      	b.n	8005a64 <HAL_ADC_IRQHandler+0xf0>
 8005bf0:	40022300 	.word	0x40022300

08005bf4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bf4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005bf6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bf8:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 8005bfe:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005c00:	d11d      	bne.n	8005c3e <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005c02:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c08:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005c0a:	680a      	ldr	r2, [r1, #0]
 8005c0c:	f012 0f08 	tst.w	r2, #8
 8005c10:	68ca      	ldr	r2, [r1, #12]
 8005c12:	d01b      	beq.n	8005c4c <ADC_DMAConvCplt+0x58>
 8005c14:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8005c18:	d10d      	bne.n	8005c36 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005c1a:	68ca      	ldr	r2, [r1, #12]
 8005c1c:	0494      	lsls	r4, r2, #18
 8005c1e:	d40a      	bmi.n	8005c36 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c26:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c2a:	04d1      	lsls	r1, r2, #19
 8005c2c:	d403      	bmi.n	8005c36 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c30:	f042 0201 	orr.w	r2, r2, #1
 8005c34:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fd fbca 	bl	80033d0 <HAL_ADC_ConvCpltCallback>
}
 8005c3c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005c3e:	06d2      	lsls	r2, r2, #27
 8005c40:	d40a      	bmi.n	8005c58 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c4a:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005c4c:	0790      	lsls	r0, r2, #30
 8005c4e:	d0e7      	beq.n	8005c20 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fd fbbd 	bl	80033d0 <HAL_ADC_ConvCpltCallback>
 8005c56:	e7f1      	b.n	8005c3c <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff fe89 	bl	8005970 <HAL_ADC_ErrorCallback>
}
 8005c5e:	bd10      	pop	{r4, pc}

08005c60 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c60:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005c62:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c64:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c6a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005c6c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005c6e:	f043 0304 	orr.w	r3, r3, #4
 8005c72:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c74:	f7ff fe7c 	bl	8005970 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c78:	bd08      	pop	{r3, pc}
 8005c7a:	bf00      	nop

08005c7c <HAL_ADC_ConfigChannel>:
{
 8005c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8005c7e:	2200      	movs	r2, #0
{
 8005c80:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8005c82:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8005c84:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8005c88:	2a01      	cmp	r2, #1
 8005c8a:	f000 813b 	beq.w	8005f04 <HAL_ADC_ConfigChannel+0x288>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c92:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8005c94:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c98:	6894      	ldr	r4, [r2, #8]
 8005c9a:	0764      	lsls	r4, r4, #29
 8005c9c:	f100 8099 	bmi.w	8005dd2 <HAL_ADC_ConfigChannel+0x156>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005ca0:	680c      	ldr	r4, [r1, #0]
 8005ca2:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8005ca6:	2d00      	cmp	r5, #0
 8005ca8:	f040 809e 	bne.w	8005de8 <HAL_ADC_ConfigChannel+0x16c>
 8005cac:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8005cb0:	40a0      	lsls	r0, r4
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005cb2:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(*preg,
 8005cb4:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005cb8:	69d6      	ldr	r6, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005cba:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 8005cbe:	4330      	orrs	r0, r6
 8005cc0:	f00c 0c0c 	and.w	ip, ip, #12
 8005cc4:	61d0      	str	r0, [r2, #28]
  MODIFY_REG(*preg,
 8005cc6:	f005 001f 	and.w	r0, r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005cca:	f102 0530 	add.w	r5, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8005cce:	4084      	lsls	r4, r0
 8005cd0:	fa0e fe00 	lsl.w	lr, lr, r0
 8005cd4:	f85c 0005 	ldr.w	r0, [ip, r5]
 8005cd8:	ea20 000e 	bic.w	r0, r0, lr
 8005cdc:	4304      	orrs	r4, r0
 8005cde:	f84c 4005 	str.w	r4, [ip, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ce2:	6890      	ldr	r0, [r2, #8]
 8005ce4:	0740      	lsls	r0, r0, #29
 8005ce6:	d47d      	bmi.n	8005de4 <HAL_ADC_ConfigChannel+0x168>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005ce8:	6895      	ldr	r5, [r2, #8]
 8005cea:	f015 0508 	ands.w	r5, r5, #8
 8005cee:	d156      	bne.n	8005d9e <HAL_ADC_ConfigChannel+0x122>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005cf0:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(*preg,
 8005cf2:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005cf4:	f102 0614 	add.w	r6, r2, #20
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005cf8:	4fb7      	ldr	r7, [pc, #732]	; (8005fd8 <HAL_ADC_ConfigChannel+0x35c>)
 8005cfa:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8005cfe:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005d02:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8005d06:	fa00 fe04 	lsl.w	lr, r0, r4
 8005d0a:	6888      	ldr	r0, [r1, #8]
 8005d0c:	fa00 f404 	lsl.w	r4, r0, r4
 8005d10:	f85c 0006 	ldr.w	r0, [ip, r6]
 8005d14:	ea20 000e 	bic.w	r0, r0, lr
 8005d18:	4320      	orrs	r0, r4
 8005d1a:	f84c 0006 	str.w	r0, [ip, r6]
 8005d1e:	6838      	ldr	r0, [r7, #0]
 8005d20:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8005d24:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8005d28:	f000 8095 	beq.w	8005e56 <HAL_ADC_ConfigChannel+0x1da>
 8005d2c:	68d0      	ldr	r0, [r2, #12]
 8005d2e:	68d6      	ldr	r6, [r2, #12]
 8005d30:	06c7      	lsls	r7, r0, #27
 8005d32:	f100 8107 	bmi.w	8005f44 <HAL_ADC_ConfigChannel+0x2c8>
 8005d36:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8005d3a:	6948      	ldr	r0, [r1, #20]
 8005d3c:	0076      	lsls	r6, r6, #1
 8005d3e:	fa00 f606 	lsl.w	r6, r0, r6
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005d42:	690f      	ldr	r7, [r1, #16]
 8005d44:	2f04      	cmp	r7, #4
 8005d46:	f000 80e0 	beq.w	8005f0a <HAL_ADC_ConfigChannel+0x28e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d4a:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 8005d4e:	6808      	ldr	r0, [r1, #0]
 8005d50:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8005d54:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005d58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8005d5c:	ea40 000c 	orr.w	r0, r0, ip
 8005d60:	4330      	orrs	r0, r6
 8005d62:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005d66:	7e48      	ldrb	r0, [r1, #25]
 8005d68:	690e      	ldr	r6, [r1, #16]
 8005d6a:	2801      	cmp	r0, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005d6c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8005d70:	bf0c      	ite	eq
 8005d72:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 8005d76:	2700      	movne	r7, #0
 8005d78:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d7c:	4338      	orrs	r0, r7
 8005d7e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005d82:	7e0c      	ldrb	r4, [r1, #24]
 8005d84:	6908      	ldr	r0, [r1, #16]
 8005d86:	2c01      	cmp	r4, #1
 8005d88:	d104      	bne.n	8005d94 <HAL_ADC_ConfigChannel+0x118>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005d8a:	f000 001f 	and.w	r0, r0, #31
 8005d8e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8005d92:	4085      	lsls	r5, r0
 8005d94:	6910      	ldr	r0, [r2, #16]
 8005d96:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8005d9a:	4305      	orrs	r5, r0
 8005d9c:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d9e:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005da0:	07c4      	lsls	r4, r0, #31
 8005da2:	d414      	bmi.n	8005dce <HAL_ADC_ConfigChannel+0x152>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005da4:	68ce      	ldr	r6, [r1, #12]
 8005da6:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8005da8:	f006 0718 	and.w	r7, r6, #24
 8005dac:	488b      	ldr	r0, [pc, #556]	; (8005fdc <HAL_ADC_ConfigChannel+0x360>)
 8005dae:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 8005db2:	40f8      	lsrs	r0, r7
 8005db4:	f3c4 0713 	ubfx	r7, r4, #0, #20
 8005db8:	4020      	ands	r0, r4
 8005dba:	ea25 0507 	bic.w	r5, r5, r7
 8005dbe:	4328      	orrs	r0, r5
 8005dc0:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005dc4:	4886      	ldr	r0, [pc, #536]	; (8005fe0 <HAL_ADC_ConfigChannel+0x364>)
 8005dc6:	4286      	cmp	r6, r0
 8005dc8:	d04d      	beq.n	8005e66 <HAL_ADC_ConfigChannel+0x1ea>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005dca:	2c00      	cmp	r4, #0
 8005dcc:	db15      	blt.n	8005dfa <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dce:	2000      	movs	r0, #0
 8005dd0:	e003      	b.n	8005dda <HAL_ADC_ConfigChannel+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dd4:	f042 0220 	orr.w	r2, r2, #32
 8005dd8:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8005de0:	b003      	add	sp, #12
 8005de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005de4:	6890      	ldr	r0, [r2, #8]
 8005de6:	e7da      	b.n	8005d9e <HAL_ADC_ConfigChannel+0x122>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de8:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005dec:	b115      	cbz	r5, 8005df4 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8005dee:	fab5 f585 	clz	r5, r5
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005df2:	40a8      	lsls	r0, r5
 8005df4:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8005df8:	e75b      	b.n	8005cb2 <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005dfa:	497a      	ldr	r1, [pc, #488]	; (8005fe4 <HAL_ADC_ConfigChannel+0x368>)
 8005dfc:	428a      	cmp	r2, r1
 8005dfe:	f000 80c7 	beq.w	8005f90 <HAL_ADC_ConfigChannel+0x314>
 8005e02:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8005e06:	428a      	cmp	r2, r1
 8005e08:	f000 80c2 	beq.w	8005f90 <HAL_ADC_ConfigChannel+0x314>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005e0c:	4d76      	ldr	r5, [pc, #472]	; (8005fe8 <HAL_ADC_ConfigChannel+0x36c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e0e:	4877      	ldr	r0, [pc, #476]	; (8005fec <HAL_ADC_ConfigChannel+0x370>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005e10:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e12:	6880      	ldr	r0, [r0, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005e14:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e18:	43c0      	mvns	r0, r0
 8005e1a:	f000 0001 	and.w	r0, r0, #1
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	f000 80c5 	beq.w	8005fae <HAL_ADC_ConfigChannel+0x332>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005e24:	4872      	ldr	r0, [pc, #456]	; (8005ff0 <HAL_ADC_ConfigChannel+0x374>)
 8005e26:	4284      	cmp	r4, r0
 8005e28:	f000 810e 	beq.w	8006048 <HAL_ADC_ConfigChannel+0x3cc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e2c:	4871      	ldr	r0, [pc, #452]	; (8005ff4 <HAL_ADC_ConfigChannel+0x378>)
 8005e2e:	4284      	cmp	r4, r0
 8005e30:	f000 812d 	beq.w	800608e <HAL_ADC_ConfigChannel+0x412>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005e34:	4870      	ldr	r0, [pc, #448]	; (8005ff8 <HAL_ADC_ConfigChannel+0x37c>)
 8005e36:	4284      	cmp	r4, r0
 8005e38:	d1c9      	bne.n	8005dce <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 8005e3a:	0249      	lsls	r1, r1, #9
 8005e3c:	d4c7      	bmi.n	8005dce <HAL_ADC_ConfigChannel+0x152>
 8005e3e:	496b      	ldr	r1, [pc, #428]	; (8005fec <HAL_ADC_ConfigChannel+0x370>)
 8005e40:	428a      	cmp	r2, r1
 8005e42:	d1c4      	bne.n	8005dce <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005e44:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e46:	2000      	movs	r0, #0
 8005e48:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005e4c:	4332      	orrs	r2, r6
 8005e4e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005e52:	60aa      	str	r2, [r5, #8]
}
 8005e54:	e7c1      	b.n	8005dda <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005e56:	68d6      	ldr	r6, [r2, #12]
 8005e58:	6948      	ldr	r0, [r1, #20]
 8005e5a:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8005e5e:	0076      	lsls	r6, r6, #1
 8005e60:	fa00 f606 	lsl.w	r6, r0, r6
 8005e64:	e76d      	b.n	8005d42 <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e66:	2f00      	cmp	r7, #0
 8005e68:	d073      	beq.n	8005f52 <HAL_ADC_ConfigChannel+0x2d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e6a:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	f000 80c6 	beq.w	8006000 <HAL_ADC_ConfigChannel+0x384>
  return __builtin_clz(value);
 8005e74:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e78:	3001      	adds	r0, #1
 8005e7a:	f000 001f 	and.w	r0, r0, #31
 8005e7e:	2809      	cmp	r0, #9
 8005e80:	f240 80be 	bls.w	8006000 <HAL_ADC_ConfigChannel+0x384>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e84:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	f000 8114 	beq.w	80060b6 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8005e8e:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e92:	3001      	adds	r0, #1
 8005e94:	0680      	lsls	r0, r0, #26
 8005e96:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e9a:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8005e9e:	2d00      	cmp	r5, #0
 8005ea0:	f000 8107 	beq.w	80060b2 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8005ea4:	fab5 f585 	clz	r5, r5
 8005ea8:	2601      	movs	r6, #1
 8005eaa:	3501      	adds	r5, #1
 8005eac:	f005 051f 	and.w	r5, r5, #31
 8005eb0:	fa06 f505 	lsl.w	r5, r6, r5
 8005eb4:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb6:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8005eba:	2c00      	cmp	r4, #0
 8005ebc:	f000 80f7 	beq.w	80060ae <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 8005ec0:	fab4 f484 	clz	r4, r4
 8005ec4:	f06f 061d 	mvn.w	r6, #29
 8005ec8:	1c60      	adds	r0, r4, #1
 8005eca:	f000 041f 	and.w	r4, r0, #31
 8005ece:	2003      	movs	r0, #3
 8005ed0:	fb10 6004 	smlabb	r0, r0, r4, r6
 8005ed4:	0500      	lsls	r0, r0, #20
 8005ed6:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005eda:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 8005edc:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005ede:	f102 0514 	add.w	r5, r2, #20
 8005ee2:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
 8005ee4:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005ee8:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8005eec:	fa04 f700 	lsl.w	r7, r4, r0
 8005ef0:	5974      	ldr	r4, [r6, r5]
 8005ef2:	ea24 0407 	bic.w	r4, r4, r7
 8005ef6:	688f      	ldr	r7, [r1, #8]
 8005ef8:	fa07 f000 	lsl.w	r0, r7, r0
 8005efc:	4320      	orrs	r0, r4
 8005efe:	5170      	str	r0, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005f00:	680c      	ldr	r4, [r1, #0]
}
 8005f02:	e762      	b.n	8005dca <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8005f04:	2002      	movs	r0, #2
}
 8005f06:	b003      	add	sp, #12
 8005f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005f0a:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005f0c:	680c      	ldr	r4, [r1, #0]
 8005f0e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005f12:	06a5      	lsls	r5, r4, #26
 8005f14:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8005f18:	d030      	beq.n	8005f7c <HAL_ADC_ConfigChannel+0x300>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005f1a:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8005f1c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005f20:	4285      	cmp	r5, r0
 8005f22:	d026      	beq.n	8005f72 <HAL_ADC_ConfigChannel+0x2f6>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005f24:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005f26:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005f2a:	4285      	cmp	r5, r0
 8005f2c:	d02b      	beq.n	8005f86 <HAL_ADC_ConfigChannel+0x30a>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005f2e:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005f30:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005f34:	4285      	cmp	r5, r0
 8005f36:	f47f af32 	bne.w	8005d9e <HAL_ADC_ConfigChannel+0x122>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005f3a:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005f3c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005f40:	66d0      	str	r0, [r2, #108]	; 0x6c
 8005f42:	e72c      	b.n	8005d9e <HAL_ADC_ConfigChannel+0x122>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005f44:	0876      	lsrs	r6, r6, #1
 8005f46:	6948      	ldr	r0, [r1, #20]
 8005f48:	f006 0608 	and.w	r6, r6, #8
 8005f4c:	fa00 f606 	lsl.w	r6, r0, r6
 8005f50:	e6f7      	b.n	8005d42 <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f52:	0ea4      	lsrs	r4, r4, #26
 8005f54:	3401      	adds	r4, #1
 8005f56:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f5a:	2e09      	cmp	r6, #9
 8005f5c:	d82d      	bhi.n	8005fba <HAL_ADC_ConfigChannel+0x33e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f5e:	06a5      	lsls	r5, r4, #26
 8005f60:	2001      	movs	r0, #1
 8005f62:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005f66:	40b0      	lsls	r0, r6
 8005f68:	4305      	orrs	r5, r0
 8005f6a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8005f6e:	0500      	lsls	r0, r0, #20
 8005f70:	e7b3      	b.n	8005eda <HAL_ADC_ConfigChannel+0x25e>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005f72:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8005f74:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005f78:	6650      	str	r0, [r2, #100]	; 0x64
 8005f7a:	e7d3      	b.n	8005f24 <HAL_ADC_ConfigChannel+0x2a8>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005f7c:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005f7e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005f82:	6610      	str	r0, [r2, #96]	; 0x60
 8005f84:	e7c9      	b.n	8005f1a <HAL_ADC_ConfigChannel+0x29e>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005f86:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005f88:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005f8c:	6690      	str	r0, [r2, #104]	; 0x68
 8005f8e:	e7ce      	b.n	8005f2e <HAL_ADC_ConfigChannel+0x2b2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f90:	4814      	ldr	r0, [pc, #80]	; (8005fe4 <HAL_ADC_ConfigChannel+0x368>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005f92:	4d1a      	ldr	r5, [pc, #104]	; (8005ffc <HAL_ADC_ConfigChannel+0x380>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f94:	f500 7080 	add.w	r0, r0, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005f98:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f9a:	f850 6cf8 	ldr.w	r6, [r0, #-248]
 8005f9e:	6880      	ldr	r0, [r0, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fa0:	4330      	orrs	r0, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005fa2:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
 8005fa6:	43c0      	mvns	r0, r0
 8005fa8:	f000 0001 	and.w	r0, r0, #1
 8005fac:	e737      	b.n	8005e1e <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8005fb0:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fb2:	f042 0220 	orr.w	r2, r2, #32
 8005fb6:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8005fb8:	e70f      	b.n	8005dda <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005fba:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8005fbe:	06a5      	lsls	r5, r4, #26
 8005fc0:	2401      	movs	r4, #1
 8005fc2:	381e      	subs	r0, #30
 8005fc4:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005fc8:	fa04 f606 	lsl.w	r6, r4, r6
 8005fcc:	0500      	lsls	r0, r0, #20
 8005fce:	4335      	orrs	r5, r6
 8005fd0:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8005fd4:	e781      	b.n	8005eda <HAL_ADC_ConfigChannel+0x25e>
 8005fd6:	bf00      	nop
 8005fd8:	5c001000 	.word	0x5c001000
 8005fdc:	000fffff 	.word	0x000fffff
 8005fe0:	47ff0000 	.word	0x47ff0000
 8005fe4:	40022000 	.word	0x40022000
 8005fe8:	58026300 	.word	0x58026300
 8005fec:	58026000 	.word	0x58026000
 8005ff0:	cb840000 	.word	0xcb840000
 8005ff4:	c7520000 	.word	0xc7520000
 8005ff8:	cfb80000 	.word	0xcfb80000
 8005ffc:	40022300 	.word	0x40022300
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006000:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8006004:	2800      	cmp	r0, #0
 8006006:	d05e      	beq.n	80060c6 <HAL_ADC_ConfigChannel+0x44a>
  return __builtin_clz(value);
 8006008:	fab0 f080 	clz	r0, r0
 800600c:	3001      	adds	r0, #1
 800600e:	0680      	lsls	r0, r0, #26
 8006010:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006014:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8006018:	2d00      	cmp	r5, #0
 800601a:	d052      	beq.n	80060c2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800601c:	fab5 f585 	clz	r5, r5
 8006020:	2601      	movs	r6, #1
 8006022:	3501      	adds	r5, #1
 8006024:	f005 051f 	and.w	r5, r5, #31
 8006028:	fa06 f505 	lsl.w	r5, r6, r5
 800602c:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602e:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8006032:	2c00      	cmp	r4, #0
 8006034:	d042      	beq.n	80060bc <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8006036:	fab4 f484 	clz	r4, r4
 800603a:	3401      	adds	r4, #1
 800603c:	f004 041f 	and.w	r4, r4, #31
 8006040:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006044:	0520      	lsls	r0, r4, #20
 8006046:	e748      	b.n	8005eda <HAL_ADC_ConfigChannel+0x25e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006048:	0208      	lsls	r0, r1, #8
 800604a:	f53f aec0 	bmi.w	8005dce <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800604e:	491f      	ldr	r1, [pc, #124]	; (80060cc <HAL_ADC_ConfigChannel+0x450>)
 8006050:	428a      	cmp	r2, r1
 8006052:	f47f aebc 	bne.w	8005dce <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006056:	4a1e      	ldr	r2, [pc, #120]	; (80060d0 <HAL_ADC_ConfigChannel+0x454>)
 8006058:	481e      	ldr	r0, [pc, #120]	; (80060d4 <HAL_ADC_ConfigChannel+0x458>)
 800605a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800605c:	68a9      	ldr	r1, [r5, #8]
 800605e:	0992      	lsrs	r2, r2, #6
 8006060:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8006064:	fba0 0202 	umull	r0, r2, r0, r2
 8006068:	4331      	orrs	r1, r6
 800606a:	0992      	lsrs	r2, r2, #6
 800606c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006070:	3201      	adds	r2, #1
 8006072:	60a9      	str	r1, [r5, #8]
 8006074:	0052      	lsls	r2, r2, #1
 8006076:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8006078:	9a01      	ldr	r2, [sp, #4]
 800607a:	2a00      	cmp	r2, #0
 800607c:	f43f aea7 	beq.w	8005dce <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 8006080:	9a01      	ldr	r2, [sp, #4]
 8006082:	3a01      	subs	r2, #1
 8006084:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8006086:	9a01      	ldr	r2, [sp, #4]
 8006088:	2a00      	cmp	r2, #0
 800608a:	d1f9      	bne.n	8006080 <HAL_ADC_ConfigChannel+0x404>
 800608c:	e69f      	b.n	8005dce <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800608e:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 8006092:	f47f ae9c 	bne.w	8005dce <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006096:	490d      	ldr	r1, [pc, #52]	; (80060cc <HAL_ADC_ConfigChannel+0x450>)
 8006098:	428a      	cmp	r2, r1
 800609a:	f47f ae98 	bne.w	8005dce <HAL_ADC_ConfigChannel+0x152>
 800609e:	68aa      	ldr	r2, [r5, #8]
 80060a0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80060a4:	4332      	orrs	r2, r6
 80060a6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80060aa:	60aa      	str	r2, [r5, #8]
}
 80060ac:	e695      	b.n	8005dda <HAL_ADC_ConfigChannel+0x15e>
 80060ae:	480a      	ldr	r0, [pc, #40]	; (80060d8 <HAL_ADC_ConfigChannel+0x45c>)
 80060b0:	e713      	b.n	8005eda <HAL_ADC_ConfigChannel+0x25e>
 80060b2:	2502      	movs	r5, #2
 80060b4:	e6fe      	b.n	8005eb4 <HAL_ADC_ConfigChannel+0x238>
 80060b6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80060ba:	e6ee      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x21e>
 80060bc:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80060c0:	e70b      	b.n	8005eda <HAL_ADC_ConfigChannel+0x25e>
 80060c2:	2502      	movs	r5, #2
 80060c4:	e7b2      	b.n	800602c <HAL_ADC_ConfigChannel+0x3b0>
 80060c6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80060ca:	e7a3      	b.n	8006014 <HAL_ADC_ConfigChannel+0x398>
 80060cc:	58026000 	.word	0x58026000
 80060d0:	2400030c 	.word	0x2400030c
 80060d4:	053e2d63 	.word	0x053e2d63
 80060d8:	fe500000 	.word	0xfe500000

080060dc <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 80060dc:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 80060e0:	4603      	mov	r3, r0
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80060e2:	6848      	ldr	r0, [r1, #4]
  __HAL_LOCK(hadc);
 80060e4:	2a01      	cmp	r2, #1
 80060e6:	f000 80f3 	beq.w	80062d0 <HAL_ADC_AnalogWDGConfig+0x1f4>
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060ea:	681a      	ldr	r2, [r3, #0]
{
 80060ec:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 80060ee:	2401      	movs	r4, #1
 80060f0:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060f4:	6894      	ldr	r4, [r2, #8]
 80060f6:	0765      	lsls	r5, r4, #29
 80060f8:	d428      	bmi.n	800614c <HAL_ADC_AnalogWDGConfig+0x70>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80060fa:	6894      	ldr	r4, [r2, #8]
 80060fc:	0724      	lsls	r4, r4, #28
 80060fe:	d426      	bmi.n	800614e <HAL_ADC_AnalogWDGConfig+0x72>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006100:	680c      	ldr	r4, [r1, #0]
 8006102:	4db8      	ldr	r5, [pc, #736]	; (80063e4 <HAL_ADC_AnalogWDGConfig+0x308>)
 8006104:	42ac      	cmp	r4, r5
 8006106:	f000 80a0 	beq.w	800624a <HAL_ADC_AnalogWDGConfig+0x16e>
      switch (AnalogWDGConfig->WatchdogMode)
 800610a:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 800610e:	d02e      	beq.n	800616e <HAL_ADC_AnalogWDGConfig+0x92>
 8006110:	d827      	bhi.n	8006162 <HAL_ADC_AnalogWDGConfig+0x86>
 8006112:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8006116:	d02a      	beq.n	800616e <HAL_ADC_AnalogWDGConfig+0x92>
 8006118:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800611c:	d027      	beq.n	800616e <HAL_ADC_AnalogWDGConfig+0x92>
 800611e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006122:	d024      	beq.n	800616e <HAL_ADC_AnalogWDGConfig+0x92>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8006124:	f004 0001 	and.w	r0, r4, #1
 8006128:	f3c4 5501 	ubfx	r5, r4, #20, #2
  MODIFY_REG(*preg,
 800612c:	4eae      	ldr	r6, [pc, #696]	; (80063e8 <HAL_ADC_AnalogWDGConfig+0x30c>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 800612e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  MODIFY_REG(*preg,
 8006132:	4026      	ands	r6, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8006134:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8006138:	f102 000c 	add.w	r0, r2, #12
  MODIFY_REG(*preg,
 800613c:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 8006140:	ea24 0406 	bic.w	r4, r4, r6
 8006144:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006148:	680c      	ldr	r4, [r1, #0]
}
 800614a:	e023      	b.n	8006194 <HAL_ADC_AnalogWDGConfig+0xb8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800614c:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800614e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006150:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006152:	f042 0220 	orr.w	r2, r2, #32
 8006156:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800615e:	bc70      	pop	{r4, r5, r6}
 8006160:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 8006162:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8006166:	d002      	beq.n	800616e <HAL_ADC_AnalogWDGConfig+0x92>
 8006168:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 800616c:	d1da      	bne.n	8006124 <HAL_ADC_AnalogWDGConfig+0x48>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800616e:	489f      	ldr	r0, [pc, #636]	; (80063ec <HAL_ADC_AnalogWDGConfig+0x310>)
 8006170:	4284      	cmp	r4, r0
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006172:	6888      	ldr	r0, [r1, #8]
 8006174:	f3c0 0513 	ubfx	r5, r0, #0, #20
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006178:	f000 80cb 	beq.w	8006312 <HAL_ADC_AnalogWDGConfig+0x236>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800617c:	2d00      	cmp	r5, #0
 800617e:	f040 80df 	bne.w	8006340 <HAL_ADC_AnalogWDGConfig+0x264>
 8006182:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8006186:	2501      	movs	r5, #1
 8006188:	4085      	lsls	r5, r0
 800618a:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
 800618e:	4328      	orrs	r0, r5
 8006190:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006194:	4896      	ldr	r0, [pc, #600]	; (80063f0 <HAL_ADC_AnalogWDGConfig+0x314>)
 8006196:	6800      	ldr	r0, [r0, #0]
 8006198:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 800619c:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80061a0:	68d0      	ldr	r0, [r2, #12]
 80061a2:	d04b      	beq.n	800623c <HAL_ADC_AnalogWDGConfig+0x160>
 80061a4:	f010 0f10 	tst.w	r0, #16
 80061a8:	68d0      	ldr	r0, [r2, #12]
 80061aa:	d047      	beq.n	800623c <HAL_ADC_AnalogWDGConfig+0x160>
 80061ac:	0840      	lsrs	r0, r0, #1
 80061ae:	690d      	ldr	r5, [r1, #16]
 80061b0:	f000 0008 	and.w	r0, r0, #8
 80061b4:	fa05 f000 	lsl.w	r0, r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80061b8:	4d8d      	ldr	r5, [pc, #564]	; (80063f0 <HAL_ADC_AnalogWDGConfig+0x314>)
 80061ba:	682d      	ldr	r5, [r5, #0]
 80061bc:	f005 4c70 	and.w	ip, r5, #4026531840	; 0xf0000000
 80061c0:	68d5      	ldr	r5, [r2, #12]
 80061c2:	f1bc 5f80 	cmp.w	ip, #268435456	; 0x10000000
 80061c6:	d031      	beq.n	800622c <HAL_ADC_AnalogWDGConfig+0x150>
 80061c8:	f015 0f10 	tst.w	r5, #16
 80061cc:	68d5      	ldr	r5, [r2, #12]
 80061ce:	d02d      	beq.n	800622c <HAL_ADC_AnalogWDGConfig+0x150>
 80061d0:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 80061d4:	694d      	ldr	r5, [r1, #20]
 80061d6:	f00c 0c08 	and.w	ip, ip, #8
 80061da:	fa05 fc0c 	lsl.w	ip, r5, ip
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80061de:	4d83      	ldr	r5, [pc, #524]	; (80063ec <HAL_ADC_AnalogWDGConfig+0x310>)
 80061e0:	42ac      	cmp	r4, r5
 80061e2:	d077      	beq.n	80062d4 <HAL_ADC_AnalogWDGConfig+0x1f8>
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80061e4:	f8d2 40b8 	ldr.w	r4, [r2, #184]	; 0xb8
 80061e8:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 80061ec:	ea44 040c 	orr.w	r4, r4, ip
 80061f0:	f8c2 40b8 	str.w	r4, [r2, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80061f4:	f8d2 40bc 	ldr.w	r4, [r2, #188]	; 0xbc
 80061f8:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 80061fc:	4320      	orrs	r0, r4
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80061fe:	f44f 7400 	mov.w	r4, #512	; 0x200
 8006202:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006206:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006208:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800620c:	6558      	str	r0, [r3, #84]	; 0x54
 800620e:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006210:	7b09      	ldrb	r1, [r1, #12]
 8006212:	2901      	cmp	r1, #1
 8006214:	f000 808e 	beq.w	8006334 <HAL_ADC_AnalogWDGConfig+0x258>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8006218:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800621a:	2000      	movs	r0, #0
 800621c:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8006220:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8006228:	bc70      	pop	{r4, r5, r6}
 800622a:	4770      	bx	lr
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800622c:	f3c5 0c82 	ubfx	ip, r5, #2, #3
 8006230:	694d      	ldr	r5, [r1, #20]
 8006232:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006236:	fa05 fc0c 	lsl.w	ip, r5, ip
 800623a:	e7d0      	b.n	80061de <HAL_ADC_AnalogWDGConfig+0x102>
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800623c:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8006240:	690d      	ldr	r5, [r1, #16]
 8006242:	0040      	lsls	r0, r0, #1
 8006244:	fa05 f000 	lsl.w	r0, r5, r0
 8006248:	e7b6      	b.n	80061b8 <HAL_ADC_AnalogWDGConfig+0xdc>
      switch (AnalogWDGConfig->WatchdogMode)
 800624a:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 800624e:	f000 80f0 	beq.w	8006432 <HAL_ADC_AnalogWDGConfig+0x356>
 8006252:	d82a      	bhi.n	80062aa <HAL_ADC_AnalogWDGConfig+0x1ce>
 8006254:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8006258:	f000 80e0 	beq.w	800641c <HAL_ADC_AnalogWDGConfig+0x340>
 800625c:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006260:	d118      	bne.n	8006294 <HAL_ADC_AnalogWDGConfig+0x1b8>
  MODIFY_REG(*preg,
 8006262:	68d4      	ldr	r4, [r2, #12]
 8006264:	4863      	ldr	r0, [pc, #396]	; (80063f4 <HAL_ADC_AnalogWDGConfig+0x318>)
 8006266:	4020      	ands	r0, r4
 8006268:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 800626c:	60d0      	str	r0, [r2, #12]
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800626e:	4860      	ldr	r0, [pc, #384]	; (80063f0 <HAL_ADC_AnalogWDGConfig+0x314>)
 8006270:	6800      	ldr	r0, [r0, #0]
 8006272:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8006276:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 800627a:	68d0      	ldr	r0, [r2, #12]
 800627c:	d069      	beq.n	8006352 <HAL_ADC_AnalogWDGConfig+0x276>
 800627e:	f010 0f10 	tst.w	r0, #16
 8006282:	690d      	ldr	r5, [r1, #16]
 8006284:	68d0      	ldr	r0, [r2, #12]
 8006286:	f040 8099 	bne.w	80063bc <HAL_ADC_AnalogWDGConfig+0x2e0>
 800628a:	f3c0 0082 	ubfx	r0, r0, #2, #3
 800628e:	0040      	lsls	r0, r0, #1
 8006290:	4085      	lsls	r5, r0
 8006292:	e063      	b.n	800635c <HAL_ADC_AnalogWDGConfig+0x280>
      switch (AnalogWDGConfig->WatchdogMode)
 8006294:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006298:	f040 80b4 	bne.w	8006404 <HAL_ADC_AnalogWDGConfig+0x328>
 800629c:	68d4      	ldr	r4, [r2, #12]
 800629e:	4855      	ldr	r0, [pc, #340]	; (80063f4 <HAL_ADC_AnalogWDGConfig+0x318>)
 80062a0:	4020      	ands	r0, r4
 80062a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80062a6:	60d0      	str	r0, [r2, #12]
}
 80062a8:	e7e1      	b.n	800626e <HAL_ADC_AnalogWDGConfig+0x192>
 80062aa:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80062ae:	f000 80ae 	beq.w	800640e <HAL_ADC_AnalogWDGConfig+0x332>
 80062b2:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 80062b6:	f040 80a5 	bne.w	8006404 <HAL_ADC_AnalogWDGConfig+0x328>
  MODIFY_REG(*preg,
 80062ba:	68d5      	ldr	r5, [r2, #12]
 80062bc:	6888      	ldr	r0, [r1, #8]
 80062be:	4c4d      	ldr	r4, [pc, #308]	; (80063f4 <HAL_ADC_AnalogWDGConfig+0x318>)
 80062c0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80062c4:	402c      	ands	r4, r5
 80062c6:	4320      	orrs	r0, r4
 80062c8:	f040 70e0 	orr.w	r0, r0, #29360128	; 0x1c00000
 80062cc:	60d0      	str	r0, [r2, #12]
}
 80062ce:	e7ce      	b.n	800626e <HAL_ADC_AnalogWDGConfig+0x192>
  __HAL_LOCK(hadc);
 80062d0:	2002      	movs	r0, #2
}
 80062d2:	4770      	bx	lr
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80062d4:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 80062d8:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 80062dc:	ea44 040c 	orr.w	r4, r4, ip
 80062e0:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80062e4:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
 80062e8:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 80062ec:	4320      	orrs	r0, r4
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80062ee:	f44f 7480 	mov.w	r4, #256	; 0x100
 80062f2:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80062f6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80062f8:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 80062fc:	6558      	str	r0, [r3, #84]	; 0x54
 80062fe:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006300:	7b09      	ldrb	r1, [r1, #12]
 8006302:	2901      	cmp	r1, #1
 8006304:	d078      	beq.n	80063f8 <HAL_ADC_AnalogWDGConfig+0x31c>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8006306:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006308:	2000      	movs	r0, #0
 800630a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800630e:	6051      	str	r1, [r2, #4]
}
 8006310:	e722      	b.n	8006158 <HAL_ADC_AnalogWDGConfig+0x7c>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006312:	2d00      	cmp	r5, #0
 8006314:	d05e      	beq.n	80063d4 <HAL_ADC_AnalogWDGConfig+0x2f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006316:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800631a:	2800      	cmp	r0, #0
 800631c:	f000 8094 	beq.w	8006448 <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 8006320:	fab0 f080 	clz	r0, r0
 8006324:	2501      	movs	r5, #1
 8006326:	4085      	lsls	r5, r0
 8006328:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
 800632c:	4328      	orrs	r0, r5
 800632e:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
 8006332:	e72f      	b.n	8006194 <HAL_ADC_AnalogWDGConfig+0xb8>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8006334:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006336:	2000      	movs	r0, #0
 8006338:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800633c:	6051      	str	r1, [r2, #4]
}
 800633e:	e70b      	b.n	8006158 <HAL_ADC_AnalogWDGConfig+0x7c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006340:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8006344:	2800      	cmp	r0, #0
 8006346:	d04a      	beq.n	80063de <HAL_ADC_AnalogWDGConfig+0x302>
  return __builtin_clz(value);
 8006348:	fab0 f080 	clz	r0, r0
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800634c:	2501      	movs	r5, #1
 800634e:	4085      	lsls	r5, r0
 8006350:	e71b      	b.n	800618a <HAL_ADC_AnalogWDGConfig+0xae>
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006352:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8006356:	690d      	ldr	r5, [r1, #16]
 8006358:	0040      	lsls	r0, r0, #1
 800635a:	4085      	lsls	r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800635c:	4824      	ldr	r0, [pc, #144]	; (80063f0 <HAL_ADC_AnalogWDGConfig+0x314>)
 800635e:	6800      	ldr	r0, [r0, #0]
 8006360:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8006364:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8006368:	68d0      	ldr	r0, [r2, #12]
 800636a:	d003      	beq.n	8006374 <HAL_ADC_AnalogWDGConfig+0x298>
 800636c:	f010 0f10 	tst.w	r0, #16
 8006370:	68d0      	ldr	r0, [r2, #12]
 8006372:	d128      	bne.n	80063c6 <HAL_ADC_AnalogWDGConfig+0x2ea>
 8006374:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8006378:	694c      	ldr	r4, [r1, #20]
 800637a:	0040      	lsls	r0, r0, #1
 800637c:	fa04 f000 	lsl.w	r0, r4, r0
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006380:	6a14      	ldr	r4, [r2, #32]
 8006382:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8006386:	4304      	orrs	r4, r0
 8006388:	6214      	str	r4, [r2, #32]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 800638a:	2480      	movs	r4, #128	; 0x80
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 800638c:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800638e:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 8006392:	4328      	orrs	r0, r5
 8006394:	6250      	str	r0, [r2, #36]	; 0x24
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006396:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006398:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800639c:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800639e:	2000      	movs	r0, #0
 80063a0:	6014      	str	r4, [r2, #0]
      if (AnalogWDGConfig->ITMode == ENABLE)
 80063a2:	7b09      	ldrb	r1, [r1, #12]
 80063a4:	2901      	cmp	r1, #1
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80063a6:	6851      	ldr	r1, [r2, #4]
 80063a8:	bf0c      	ite	eq
 80063aa:	4321      	orreq	r1, r4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80063ac:	f021 0180 	bicne.w	r1, r1, #128	; 0x80
 80063b0:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80063b8:	bc70      	pop	{r4, r5, r6}
 80063ba:	4770      	bx	lr
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80063bc:	0840      	lsrs	r0, r0, #1
 80063be:	f000 0008 	and.w	r0, r0, #8
 80063c2:	4085      	lsls	r5, r0
 80063c4:	e7ca      	b.n	800635c <HAL_ADC_AnalogWDGConfig+0x280>
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80063c6:	0840      	lsrs	r0, r0, #1
 80063c8:	694c      	ldr	r4, [r1, #20]
 80063ca:	f000 0008 	and.w	r0, r0, #8
 80063ce:	fa04 f000 	lsl.w	r0, r4, r0
 80063d2:	e7d5      	b.n	8006380 <HAL_ADC_AnalogWDGConfig+0x2a4>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80063d4:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80063d8:	2501      	movs	r5, #1
 80063da:	4085      	lsls	r5, r0
 80063dc:	e7a4      	b.n	8006328 <HAL_ADC_AnalogWDGConfig+0x24c>
 80063de:	2501      	movs	r5, #1
 80063e0:	e6d3      	b.n	800618a <HAL_ADC_AnalogWDGConfig+0xae>
 80063e2:	bf00      	nop
 80063e4:	7dc00000 	.word	0x7dc00000
 80063e8:	7dcfffff 	.word	0x7dcfffff
 80063ec:	001fffff 	.word	0x001fffff
 80063f0:	5c001000 	.word	0x5c001000
 80063f4:	823fffff 	.word	0x823fffff
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80063f8:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063fa:	2000      	movs	r0, #0
 80063fc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006400:	6051      	str	r1, [r2, #4]
}
 8006402:	e6a9      	b.n	8006158 <HAL_ADC_AnalogWDGConfig+0x7c>
  MODIFY_REG(*preg,
 8006404:	68d4      	ldr	r4, [r2, #12]
 8006406:	4811      	ldr	r0, [pc, #68]	; (800644c <HAL_ADC_AnalogWDGConfig+0x370>)
 8006408:	4020      	ands	r0, r4
 800640a:	60d0      	str	r0, [r2, #12]
}
 800640c:	e72f      	b.n	800626e <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 800640e:	68d4      	ldr	r4, [r2, #12]
 8006410:	480e      	ldr	r0, [pc, #56]	; (800644c <HAL_ADC_AnalogWDGConfig+0x370>)
 8006412:	4020      	ands	r0, r4
 8006414:	f040 70c0 	orr.w	r0, r0, #25165824	; 0x1800000
 8006418:	60d0      	str	r0, [r2, #12]
}
 800641a:	e728      	b.n	800626e <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 800641c:	68d5      	ldr	r5, [r2, #12]
 800641e:	6888      	ldr	r0, [r1, #8]
 8006420:	4c0a      	ldr	r4, [pc, #40]	; (800644c <HAL_ADC_AnalogWDGConfig+0x370>)
 8006422:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006426:	402c      	ands	r4, r5
 8006428:	4320      	orrs	r0, r4
 800642a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800642e:	60d0      	str	r0, [r2, #12]
}
 8006430:	e71d      	b.n	800626e <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 8006432:	68d5      	ldr	r5, [r2, #12]
 8006434:	6888      	ldr	r0, [r1, #8]
 8006436:	4c05      	ldr	r4, [pc, #20]	; (800644c <HAL_ADC_AnalogWDGConfig+0x370>)
 8006438:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800643c:	402c      	ands	r4, r5
 800643e:	4320      	orrs	r0, r4
 8006440:	f040 70a0 	orr.w	r0, r0, #20971520	; 0x1400000
 8006444:	60d0      	str	r0, [r2, #12]
}
 8006446:	e712      	b.n	800626e <HAL_ADC_AnalogWDGConfig+0x192>
 8006448:	2501      	movs	r5, #1
 800644a:	e76d      	b.n	8006328 <HAL_ADC_AnalogWDGConfig+0x24c>
 800644c:	823fffff 	.word	0x823fffff

08006450 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006450:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	07d1      	lsls	r1, r2, #31
 8006456:	d501      	bpl.n	800645c <ADC_Enable+0xc>
  return HAL_OK;
 8006458:	2000      	movs	r0, #0
}
 800645a:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800645c:	6899      	ldr	r1, [r3, #8]
 800645e:	4a21      	ldr	r2, [pc, #132]	; (80064e4 <ADC_Enable+0x94>)
 8006460:	4211      	tst	r1, r2
{
 8006462:	b570      	push	{r4, r5, r6, lr}
 8006464:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006466:	d12c      	bne.n	80064c2 <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8006468:	6899      	ldr	r1, [r3, #8]
 800646a:	4a1f      	ldr	r2, [pc, #124]	; (80064e8 <ADC_Enable+0x98>)
 800646c:	400a      	ands	r2, r1
 800646e:	f042 0201 	orr.w	r2, r2, #1
 8006472:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006474:	f7ff fa2c 	bl	80058d0 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	4a1c      	ldr	r2, [pc, #112]	; (80064ec <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 800647c:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800647e:	4293      	cmp	r3, r2
 8006480:	d028      	beq.n	80064d4 <ADC_Enable+0x84>
 8006482:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006486:	4293      	cmp	r3, r2
 8006488:	d024      	beq.n	80064d4 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800648a:	4a19      	ldr	r2, [pc, #100]	; (80064f0 <ADC_Enable+0xa0>)
 800648c:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	07d6      	lsls	r6, r2, #31
 8006492:	d414      	bmi.n	80064be <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 8006494:	4e14      	ldr	r6, [pc, #80]	; (80064e8 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006496:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006498:	07d0      	lsls	r0, r2, #31
 800649a:	d404      	bmi.n	80064a6 <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	4032      	ands	r2, r6
 80064a0:	f042 0201 	orr.w	r2, r2, #1
 80064a4:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80064a6:	f7ff fa13 	bl	80058d0 <HAL_GetTick>
 80064aa:	1b43      	subs	r3, r0, r5
 80064ac:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80064ae:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80064b0:	d902      	bls.n	80064b8 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	07d1      	lsls	r1, r2, #31
 80064b6:	d504      	bpl.n	80064c2 <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	07d2      	lsls	r2, r2, #31
 80064bc:	d5eb      	bpl.n	8006496 <ADC_Enable+0x46>
  return HAL_OK;
 80064be:	2000      	movs	r0, #0
}
 80064c0:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 80064c4:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064c6:	f043 0310 	orr.w	r3, r3, #16
 80064ca:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064ce:	4303      	orrs	r3, r0
 80064d0:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80064d2:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80064d4:	4a07      	ldr	r2, [pc, #28]	; (80064f4 <ADC_Enable+0xa4>)
 80064d6:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80064d8:	06d2      	lsls	r2, r2, #27
 80064da:	d0d8      	beq.n	800648e <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80064dc:	4a06      	ldr	r2, [pc, #24]	; (80064f8 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d1d5      	bne.n	800648e <ADC_Enable+0x3e>
 80064e2:	e7ec      	b.n	80064be <ADC_Enable+0x6e>
 80064e4:	8000003f 	.word	0x8000003f
 80064e8:	7fffffc0 	.word	0x7fffffc0
 80064ec:	40022000 	.word	0x40022000
 80064f0:	58026300 	.word	0x58026300
 80064f4:	40022300 	.word	0x40022300
 80064f8:	40022100 	.word	0x40022100

080064fc <ADC_Disable>:
{
 80064fc:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80064fe:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	0795      	lsls	r5, r2, #30
 8006504:	d502      	bpl.n	800650c <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006506:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8006508:	2000      	movs	r0, #0
}
 800650a:	bd38      	pop	{r3, r4, r5, pc}
 800650c:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800650e:	07d4      	lsls	r4, r2, #31
 8006510:	d529      	bpl.n	8006566 <ADC_Disable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	4604      	mov	r4, r0
 8006516:	f002 020d 	and.w	r2, r2, #13
 800651a:	2a01      	cmp	r2, #1
 800651c:	d008      	beq.n	8006530 <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800651e:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8006520:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006522:	f043 0310 	orr.w	r3, r3, #16
 8006526:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006528:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800652a:	4303      	orrs	r3, r0
 800652c:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800652e:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8006530:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006532:	2103      	movs	r1, #3
 8006534:	4a0d      	ldr	r2, [pc, #52]	; (800656c <ADC_Disable+0x70>)
 8006536:	4002      	ands	r2, r0
 8006538:	f042 0202 	orr.w	r2, r2, #2
 800653c:	609a      	str	r2, [r3, #8]
 800653e:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8006540:	f7ff f9c6 	bl	80058d0 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006544:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8006546:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	07d9      	lsls	r1, r3, #31
 800654c:	d50b      	bpl.n	8006566 <ADC_Disable+0x6a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800654e:	f7ff f9bf 	bl	80058d0 <HAL_GetTick>
 8006552:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006554:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006556:	2802      	cmp	r0, #2
 8006558:	d902      	bls.n	8006560 <ADC_Disable+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	07d2      	lsls	r2, r2, #31
 800655e:	d4de      	bmi.n	800651e <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	07db      	lsls	r3, r3, #31
 8006564:	d4f3      	bmi.n	800654e <ADC_Disable+0x52>
  return HAL_OK;
 8006566:	2000      	movs	r0, #0
}
 8006568:	bd38      	pop	{r3, r4, r5, pc}
 800656a:	bf00      	nop
 800656c:	7fffffc0 	.word	0x7fffffc0

08006570 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006570:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006572:	4a56      	ldr	r2, [pc, #344]	; (80066cc <ADC_ConfigureBoostMode+0x15c>)
{
 8006574:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006576:	6803      	ldr	r3, [r0, #0]
 8006578:	4293      	cmp	r3, r2
 800657a:	d025      	beq.n	80065c8 <ADC_ConfigureBoostMode+0x58>
 800657c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006580:	4293      	cmp	r3, r2
 8006582:	d021      	beq.n	80065c8 <ADC_ConfigureBoostMode+0x58>
 8006584:	4b52      	ldr	r3, [pc, #328]	; (80066d0 <ADC_ConfigureBoostMode+0x160>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800658c:	d021      	beq.n	80065d2 <ADC_ConfigureBoostMode+0x62>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800658e:	f003 fcdf 	bl	8009f50 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8006592:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8006594:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8006596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800659a:	f000 8086 	beq.w	80066aa <ADC_ConfigureBoostMode+0x13a>
 800659e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065a2:	d06a      	beq.n	800667a <ADC_ConfigureBoostMode+0x10a>
 80065a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a8:	d07f      	beq.n	80066aa <ADC_ConfigureBoostMode+0x13a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80065aa:	f7ff f9a9 	bl	8005900 <HAL_GetREVID>
 80065ae:	f241 0303 	movw	r3, #4099	; 0x1003
 80065b2:	4298      	cmp	r0, r3
 80065b4:	d84a      	bhi.n	800664c <ADC_ConfigureBoostMode+0xdc>
  {
    if (freq > 20000000UL)
 80065b6:	4b47      	ldr	r3, [pc, #284]	; (80066d4 <ADC_ConfigureBoostMode+0x164>)
 80065b8:	429d      	cmp	r5, r3
 80065ba:	d929      	bls.n	8006610 <ADC_ConfigureBoostMode+0xa0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80065bc:	6822      	ldr	r2, [r4, #0]
 80065be:	6893      	ldr	r3, [r2, #8]
 80065c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065c4:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80065c8:	4b43      	ldr	r3, [pc, #268]	; (80066d8 <ADC_ConfigureBoostMode+0x168>)
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80065d0:	d1dd      	bne.n	800658e <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80065d2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80065d6:	f004 fddd 	bl	800b194 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80065da:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80065dc:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80065de:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80065e2:	d06c      	beq.n	80066be <ADC_ConfigureBoostMode+0x14e>
 80065e4:	d808      	bhi.n	80065f8 <ADC_ConfigureBoostMode+0x88>
 80065e6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80065ea:	d050      	beq.n	800668e <ADC_ConfigureBoostMode+0x11e>
 80065ec:	d916      	bls.n	800661c <ADC_ConfigureBoostMode+0xac>
 80065ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065f2:	d1da      	bne.n	80065aa <ADC_ConfigureBoostMode+0x3a>
        freq /= 32UL;
 80065f4:	0945      	lsrs	r5, r0, #5
        break;
 80065f6:	e7d8      	b.n	80065aa <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 80065f8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80065fc:	d045      	beq.n	800668a <ADC_ConfigureBoostMode+0x11a>
 80065fe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006602:	d1d2      	bne.n	80065aa <ADC_ConfigureBoostMode+0x3a>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006604:	f7ff f97c 	bl	8005900 <HAL_GetREVID>
 8006608:	f241 0303 	movw	r3, #4099	; 0x1003
 800660c:	4298      	cmp	r0, r3
 800660e:	d840      	bhi.n	8006692 <ADC_ConfigureBoostMode+0x122>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006610:	6822      	ldr	r2, [r4, #0]
 8006612:	6893      	ldr	r3, [r2, #8]
 8006614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006618:	6093      	str	r3, [r2, #8]
}
 800661a:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 800661c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006620:	d006      	beq.n	8006630 <ADC_ConfigureBoostMode+0xc0>
 8006622:	d90a      	bls.n	800663a <ADC_ConfigureBoostMode+0xca>
 8006624:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006628:	d002      	beq.n	8006630 <ADC_ConfigureBoostMode+0xc0>
 800662a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800662e:	d1bc      	bne.n	80065aa <ADC_ConfigureBoostMode+0x3a>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006630:	0c9b      	lsrs	r3, r3, #18
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8006638:	e7b7      	b.n	80065aa <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 800663a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800663e:	d0f7      	beq.n	8006630 <ADC_ConfigureBoostMode+0xc0>
 8006640:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006644:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8006648:	d0f2      	beq.n	8006630 <ADC_ConfigureBoostMode+0xc0>
 800664a:	e7ae      	b.n	80065aa <ADC_ConfigureBoostMode+0x3a>
    if (freq <= 6250000UL)
 800664c:	4b23      	ldr	r3, [pc, #140]	; (80066dc <ADC_ConfigureBoostMode+0x16c>)
 800664e:	429d      	cmp	r5, r3
 8006650:	d805      	bhi.n	800665e <ADC_ConfigureBoostMode+0xee>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006652:	6822      	ldr	r2, [r4, #0]
 8006654:	6893      	ldr	r3, [r2, #8]
 8006656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800665a:	6093      	str	r3, [r2, #8]
}
 800665c:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 800665e:	4b20      	ldr	r3, [pc, #128]	; (80066e0 <ADC_ConfigureBoostMode+0x170>)
 8006660:	429d      	cmp	r5, r3
 8006662:	d91a      	bls.n	800669a <ADC_ConfigureBoostMode+0x12a>
    else if (freq <= 25000000UL)
 8006664:	4b1f      	ldr	r3, [pc, #124]	; (80066e4 <ADC_ConfigureBoostMode+0x174>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006666:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8006668:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800666a:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 800666c:	d829      	bhi.n	80066c2 <ADC_ConfigureBoostMode+0x152>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800666e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006676:	6093      	str	r3, [r2, #8]
}
 8006678:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 800667a:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800667c:	f7ff f940 	bl	8005900 <HAL_GetREVID>
 8006680:	f241 0303 	movw	r3, #4099	; 0x1003
 8006684:	4298      	cmp	r0, r3
 8006686:	d8e1      	bhi.n	800664c <ADC_ConfigureBoostMode+0xdc>
 8006688:	e795      	b.n	80065b6 <ADC_ConfigureBoostMode+0x46>
        freq /= 128UL;
 800668a:	09c5      	lsrs	r5, r0, #7
        break;
 800668c:	e78d      	b.n	80065aa <ADC_ConfigureBoostMode+0x3a>
        freq /= 16UL;
 800668e:	0905      	lsrs	r5, r0, #4
        break;
 8006690:	e78b      	b.n	80065aa <ADC_ConfigureBoostMode+0x3a>
    if (freq <= 6250000UL)
 8006692:	4b12      	ldr	r3, [pc, #72]	; (80066dc <ADC_ConfigureBoostMode+0x16c>)
 8006694:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8006698:	d2db      	bcs.n	8006652 <ADC_ConfigureBoostMode+0xe2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800669a:	6822      	ldr	r2, [r4, #0]
 800669c:	6893      	ldr	r3, [r2, #8]
 800669e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066a6:	6093      	str	r3, [r2, #8]
}
 80066a8:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80066aa:	0c1b      	lsrs	r3, r3, #16
 80066ac:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80066b0:	f7ff f926 	bl	8005900 <HAL_GetREVID>
 80066b4:	f241 0303 	movw	r3, #4099	; 0x1003
 80066b8:	4298      	cmp	r0, r3
 80066ba:	d8c7      	bhi.n	800664c <ADC_ConfigureBoostMode+0xdc>
 80066bc:	e77b      	b.n	80065b6 <ADC_ConfigureBoostMode+0x46>
        freq /= 64UL;
 80066be:	0985      	lsrs	r5, r0, #6
        break;
 80066c0:	e773      	b.n	80065aa <ADC_ConfigureBoostMode+0x3a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80066c2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80066c6:	6093      	str	r3, [r2, #8]
}
 80066c8:	bd38      	pop	{r3, r4, r5, pc}
 80066ca:	bf00      	nop
 80066cc:	40022000 	.word	0x40022000
 80066d0:	58026300 	.word	0x58026300
 80066d4:	01312d00 	.word	0x01312d00
 80066d8:	40022300 	.word	0x40022300
 80066dc:	00bebc21 	.word	0x00bebc21
 80066e0:	017d7841 	.word	0x017d7841
 80066e4:	02faf081 	.word	0x02faf081

080066e8 <HAL_ADC_Init>:
{
 80066e8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80066ea:	2300      	movs	r3, #0
{
 80066ec:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80066ee:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80066f0:	2800      	cmp	r0, #0
 80066f2:	f000 80d1 	beq.w	8006898 <HAL_ADC_Init+0x1b0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80066f6:	6d45      	ldr	r5, [r0, #84]	; 0x54
 80066f8:	4604      	mov	r4, r0
 80066fa:	2d00      	cmp	r5, #0
 80066fc:	f000 80bb 	beq.w	8006876 <HAL_ADC_Init+0x18e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006700:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006702:	6893      	ldr	r3, [r2, #8]
 8006704:	009d      	lsls	r5, r3, #2
 8006706:	d503      	bpl.n	8006710 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006708:	6891      	ldr	r1, [r2, #8]
 800670a:	4b72      	ldr	r3, [pc, #456]	; (80068d4 <HAL_ADC_Init+0x1ec>)
 800670c:	400b      	ands	r3, r1
 800670e:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006710:	6893      	ldr	r3, [r2, #8]
 8006712:	00d8      	lsls	r0, r3, #3
 8006714:	d416      	bmi.n	8006744 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006716:	4b70      	ldr	r3, [pc, #448]	; (80068d8 <HAL_ADC_Init+0x1f0>)
 8006718:	4970      	ldr	r1, [pc, #448]	; (80068dc <HAL_ADC_Init+0x1f4>)
 800671a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800671c:	6890      	ldr	r0, [r2, #8]
 800671e:	099b      	lsrs	r3, r3, #6
 8006720:	fba1 1303 	umull	r1, r3, r1, r3
 8006724:	496e      	ldr	r1, [pc, #440]	; (80068e0 <HAL_ADC_Init+0x1f8>)
 8006726:	099b      	lsrs	r3, r3, #6
 8006728:	4001      	ands	r1, r0
 800672a:	3301      	adds	r3, #1
 800672c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006730:	6091      	str	r1, [r2, #8]
 8006732:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006734:	9b01      	ldr	r3, [sp, #4]
 8006736:	b12b      	cbz	r3, 8006744 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8006738:	9b01      	ldr	r3, [sp, #4]
 800673a:	3b01      	subs	r3, #1
 800673c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800673e:	9b01      	ldr	r3, [sp, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1f9      	bne.n	8006738 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006744:	6893      	ldr	r3, [r2, #8]
 8006746:	00d9      	lsls	r1, r3, #3
 8006748:	d424      	bmi.n	8006794 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800674a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800674c:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800674e:	f043 0310 	orr.w	r3, r3, #16
 8006752:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006754:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006756:	432b      	orrs	r3, r5
 8006758:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800675a:	6893      	ldr	r3, [r2, #8]
 800675c:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006760:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006762:	d11d      	bne.n	80067a0 <HAL_ADC_Init+0xb8>
 8006764:	06db      	lsls	r3, r3, #27
 8006766:	d41b      	bmi.n	80067a0 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8006768:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800676a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800676e:	f043 0302 	orr.w	r3, r3, #2
 8006772:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006774:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006776:	07de      	lsls	r6, r3, #31
 8006778:	d428      	bmi.n	80067cc <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800677a:	4b5a      	ldr	r3, [pc, #360]	; (80068e4 <HAL_ADC_Init+0x1fc>)
 800677c:	429a      	cmp	r2, r3
 800677e:	d017      	beq.n	80067b0 <HAL_ADC_Init+0xc8>
 8006780:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006784:	429a      	cmp	r2, r3
 8006786:	d013      	beq.n	80067b0 <HAL_ADC_Init+0xc8>
 8006788:	4b57      	ldr	r3, [pc, #348]	; (80068e8 <HAL_ADC_Init+0x200>)
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	07d9      	lsls	r1, r3, #31
 800678e:	d41d      	bmi.n	80067cc <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006790:	4a56      	ldr	r2, [pc, #344]	; (80068ec <HAL_ADC_Init+0x204>)
 8006792:	e015      	b.n	80067c0 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006794:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006796:	2500      	movs	r5, #0
 8006798:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800679c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800679e:	d0e1      	beq.n	8006764 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80067a2:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067a4:	f043 0310 	orr.w	r3, r3, #16
}
 80067a8:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067aa:	6563      	str	r3, [r4, #84]	; 0x54
}
 80067ac:	b002      	add	sp, #8
 80067ae:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80067b0:	4a4c      	ldr	r2, [pc, #304]	; (80068e4 <HAL_ADC_Init+0x1fc>)
 80067b2:	4b4f      	ldr	r3, [pc, #316]	; (80068f0 <HAL_ADC_Init+0x208>)
 80067b4:	6892      	ldr	r2, [r2, #8]
 80067b6:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	07d8      	lsls	r0, r3, #31
 80067bc:	d406      	bmi.n	80067cc <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80067be:	4a4d      	ldr	r2, [pc, #308]	; (80068f4 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80067c0:	6893      	ldr	r3, [r2, #8]
 80067c2:	6861      	ldr	r1, [r4, #4]
 80067c4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80067c8:	430b      	orrs	r3, r1
 80067ca:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80067cc:	f7ff f898 	bl	8005900 <HAL_GetREVID>
 80067d0:	f241 0303 	movw	r3, #4099	; 0x1003
 80067d4:	68a1      	ldr	r1, [r4, #8]
 80067d6:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80067d8:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80067da:	d852      	bhi.n	8006882 <HAL_ADC_Init+0x19a>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80067dc:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80067e0:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80067e2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80067e4:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 80067e8:	4302      	orrs	r2, r0
 80067ea:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d103      	bne.n	80067f8 <HAL_ADC_Init+0x110>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80067f0:	6a23      	ldr	r3, [r4, #32]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80067f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067fa:	b123      	cbz	r3, 8006806 <HAL_ADC_Init+0x11e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80067fc:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006800:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006802:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006804:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	493b      	ldr	r1, [pc, #236]	; (80068f8 <HAL_ADC_Init+0x210>)
 800680a:	68d8      	ldr	r0, [r3, #12]
 800680c:	4001      	ands	r1, r0
 800680e:	430a      	orrs	r2, r1
 8006810:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006818:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800681a:	d11c      	bne.n	8006856 <HAL_ADC_Init+0x16e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800681c:	0712      	lsls	r2, r2, #28
 800681e:	d41a      	bmi.n	8006856 <HAL_ADC_Init+0x16e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006820:	68d8      	ldr	r0, [r3, #12]
 8006822:	4a36      	ldr	r2, [pc, #216]	; (80068fc <HAL_ADC_Init+0x214>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006824:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006826:	4002      	ands	r2, r0
 8006828:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 800682c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800682e:	430a      	orrs	r2, r1
 8006830:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8006832:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8006836:	2a01      	cmp	r2, #1
 8006838:	d03a      	beq.n	80068b0 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800683a:	691a      	ldr	r2, [r3, #16]
 800683c:	f022 0201 	bic.w	r2, r2, #1
 8006840:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006842:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006844:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006846:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006848:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800684c:	430a      	orrs	r2, r1
 800684e:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006850:	f7ff fe8e 	bl	8006570 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006854:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006856:	68e2      	ldr	r2, [r4, #12]
 8006858:	2a01      	cmp	r2, #1
 800685a:	d021      	beq.n	80068a0 <HAL_ADC_Init+0x1b8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800685c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800685e:	f022 020f 	bic.w	r2, r2, #15
 8006862:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006864:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8006866:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006868:	f023 0303 	bic.w	r3, r3, #3
 800686c:	f043 0301 	orr.w	r3, r3, #1
 8006870:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006872:	b002      	add	sp, #8
 8006874:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8006876:	f7fe fbfb 	bl	8005070 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800687a:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 800687c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8006880:	e73e      	b.n	8006700 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006882:	2910      	cmp	r1, #16
 8006884:	d1aa      	bne.n	80067dc <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006886:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006888:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800688a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800688e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006890:	430a      	orrs	r2, r1
 8006892:	f042 021c 	orr.w	r2, r2, #28
 8006896:	e7a9      	b.n	80067ec <HAL_ADC_Init+0x104>
    return HAL_ERROR;
 8006898:	2501      	movs	r5, #1
}
 800689a:	4628      	mov	r0, r5
 800689c:	b002      	add	sp, #8
 800689e:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80068a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80068a2:	69a2      	ldr	r2, [r4, #24]
 80068a4:	f021 010f 	bic.w	r1, r1, #15
 80068a8:	3a01      	subs	r2, #1
 80068aa:	430a      	orrs	r2, r1
 80068ac:	631a      	str	r2, [r3, #48]	; 0x30
 80068ae:	e7d9      	b.n	8006864 <HAL_ADC_Init+0x17c>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80068b0:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 80068b4:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80068b6:	3901      	subs	r1, #1
 80068b8:	6918      	ldr	r0, [r3, #16]
 80068ba:	4332      	orrs	r2, r6
 80068bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80068c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80068c2:	430a      	orrs	r2, r1
 80068c4:	490e      	ldr	r1, [pc, #56]	; (8006900 <HAL_ADC_Init+0x218>)
 80068c6:	4001      	ands	r1, r0
 80068c8:	430a      	orrs	r2, r1
 80068ca:	f042 0201 	orr.w	r2, r2, #1
 80068ce:	611a      	str	r2, [r3, #16]
 80068d0:	e7b7      	b.n	8006842 <HAL_ADC_Init+0x15a>
 80068d2:	bf00      	nop
 80068d4:	5fffffc0 	.word	0x5fffffc0
 80068d8:	2400030c 	.word	0x2400030c
 80068dc:	053e2d63 	.word	0x053e2d63
 80068e0:	6fffffc0 	.word	0x6fffffc0
 80068e4:	40022000 	.word	0x40022000
 80068e8:	58026000 	.word	0x58026000
 80068ec:	58026300 	.word	0x58026300
 80068f0:	40022100 	.word	0x40022100
 80068f4:	40022300 	.word	0x40022300
 80068f8:	fff0c003 	.word	0xfff0c003
 80068fc:	ffffbffc 	.word	0xffffbffc
 8006900:	fc00f81e 	.word	0xfc00f81e

08006904 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006904:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006906:	2300      	movs	r3, #0
{
 8006908:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800690a:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800690c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8006910:	2b01      	cmp	r3, #1
 8006912:	d040      	beq.n	8006996 <HAL_ADCEx_Calibration_Start+0x92>
 8006914:	2301      	movs	r3, #1
 8006916:	4604      	mov	r4, r0
 8006918:	460e      	mov	r6, r1
 800691a:	4615      	mov	r5, r2
 800691c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006920:	f7ff fdec 	bl	80064fc <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006924:	b9e8      	cbnz	r0, 8006962 <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006926:	6d67      	ldr	r7, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8006928:	f005 4280 	and.w	r2, r5, #1073741824	; 0x40000000
 800692c:	4b1b      	ldr	r3, [pc, #108]	; (800699c <HAL_ADCEx_Calibration_Start+0x98>)
 800692e:	f406 3180 	and.w	r1, r6, #65536	; 0x10000
 8006932:	4d1b      	ldr	r5, [pc, #108]	; (80069a0 <HAL_ADCEx_Calibration_Start+0x9c>)
 8006934:	403b      	ands	r3, r7

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006936:	4f1b      	ldr	r7, [pc, #108]	; (80069a4 <HAL_ADCEx_Calibration_Start+0xa0>)
    ADC_STATE_CLR_SET(hadc->State,
 8006938:	f043 0302 	orr.w	r3, r3, #2
 800693c:	6563      	str	r3, [r4, #84]	; 0x54
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	689e      	ldr	r6, [r3, #8]
 8006942:	4035      	ands	r5, r6
 8006944:	4315      	orrs	r5, r2
 8006946:	430d      	orrs	r5, r1
 8006948:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800694c:	609d      	str	r5, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	2a00      	cmp	r2, #0
 8006952:	db0f      	blt.n	8006974 <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006954:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006956:	f023 0303 	bic.w	r3, r3, #3
 800695a:	f043 0301 	orr.w	r3, r3, #1
 800695e:	6563      	str	r3, [r4, #84]	; 0x54
 8006960:	e003      	b.n	800696a <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006962:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006964:	f043 0310 	orr.w	r3, r3, #16
 8006968:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800696a:	2300      	movs	r3, #0
 800696c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8006970:	b003      	add	sp, #12
 8006972:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 8006974:	9a01      	ldr	r2, [sp, #4]
 8006976:	3201      	adds	r2, #1
 8006978:	9201      	str	r2, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800697a:	9a01      	ldr	r2, [sp, #4]
 800697c:	42ba      	cmp	r2, r7
 800697e:	d3e6      	bcc.n	800694e <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 8006980:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8006982:	2200      	movs	r2, #0
        return HAL_ERROR;
 8006984:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8006986:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 800698a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 800698e:	f043 0310 	orr.w	r3, r3, #16
 8006992:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8006994:	e7ec      	b.n	8006970 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 8006996:	2002      	movs	r0, #2
}
 8006998:	b003      	add	sp, #12
 800699a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800699c:	ffffeefd 	.word	0xffffeefd
 80069a0:	3ffeffc0 	.word	0x3ffeffc0
 80069a4:	25c3f800 	.word	0x25c3f800

080069a8 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80069a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80069ac:	f8d0 8000 	ldr.w	r8, [r0]
{
 80069b0:	b09a      	sub	sp, #104	; 0x68
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80069b2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80069b6:	f015 0504 	ands.w	r5, r5, #4
 80069ba:	d117      	bne.n	80069ec <HAL_ADCEx_MultiModeStart_DMA+0x44>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80069bc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80069c0:	4604      	mov	r4, r0
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d012      	beq.n	80069ec <HAL_ADCEx_MultiModeStart_DMA+0x44>

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80069c6:	4b2d      	ldr	r3, [pc, #180]	; (8006a7c <HAL_ADCEx_MultiModeStart_DMA+0xd4>)
    __HAL_LOCK(hadc);
 80069c8:	f04f 0c01 	mov.w	ip, #1
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80069cc:	9516      	str	r5, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80069ce:	4598      	cmp	r8, r3
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80069d0:	9517      	str	r5, [sp, #92]	; 0x5c
    __HAL_LOCK(hadc);
 80069d2:	f880 c050 	strb.w	ip, [r0, #80]	; 0x50
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80069d6:	d00d      	beq.n	80069f4 <HAL_ADCEx_MultiModeStart_DMA+0x4c>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069d8:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 80069da:	4660      	mov	r0, ip
      __HAL_UNLOCK(hadc);
 80069dc:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069e0:	f043 0320 	orr.w	r3, r3, #32
 80069e4:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 80069e6:	b01a      	add	sp, #104	; 0x68
 80069e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80069ec:	2002      	movs	r0, #2
}
 80069ee:	b01a      	add	sp, #104	; 0x68
 80069f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f4:	4d22      	ldr	r5, [pc, #136]	; (8006a80 <HAL_ADCEx_MultiModeStart_DMA+0xd8>)
 80069f6:	460e      	mov	r6, r1
 80069f8:	4617      	mov	r7, r2
 80069fa:	9501      	str	r5, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 80069fc:	f7ff fd28 	bl	8006450 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8006a00:	b128      	cbz	r0, 8006a0e <HAL_ADCEx_MultiModeStart_DMA+0x66>
      __HAL_UNLOCK(hadc);
 8006a02:	2300      	movs	r3, #0
 8006a04:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006a08:	b01a      	add	sp, #104	; 0x68
 8006a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8006a0e:	a801      	add	r0, sp, #4
 8006a10:	f7ff fd1e 	bl	8006450 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d1f4      	bne.n	8006a02 <HAL_ADCEx_MultiModeStart_DMA+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 8006a18:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006a1a:	4a1a      	ldr	r2, [pc, #104]	; (8006a84 <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006a1c:	4b1a      	ldr	r3, [pc, #104]	; (8006a88 <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      ADC_STATE_CLR_SET(hadc->State,
 8006a1e:	400a      	ands	r2, r1
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006a20:	f8d4 c000 	ldr.w	ip, [r4]
      ADC_STATE_CLR_SET(hadc->State,
 8006a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006a28:	45c4      	cmp	ip, r8
      ADC_STATE_CLR_SET(hadc->State,
 8006a2a:	6562      	str	r2, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8006a2c:	65a0      	str	r0, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006a2e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006a30:	63c3      	str	r3, [r0, #60]	; 0x3c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006a32:	4b16      	ldr	r3, [pc, #88]	; (8006a8c <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
 8006a34:	6403      	str	r3, [r0, #64]	; 0x40
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8006a36:	4b16      	ldr	r3, [pc, #88]	; (8006a90 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
 8006a38:	64c3      	str	r3, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006a3a:	d01d      	beq.n	8006a78 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 8006a3c:	45ac      	cmp	ip, r5
 8006a3e:	d01b      	beq.n	8006a78 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 8006a40:	4914      	ldr	r1, [pc, #80]	; (8006a94 <HAL_ADCEx_MultiModeStart_DMA+0xec>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006a42:	251c      	movs	r5, #28
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8006a44:	463b      	mov	r3, r7
 8006a46:	4632      	mov	r2, r6
 8006a48:	310c      	adds	r1, #12
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006a4a:	f8cc 5000 	str.w	r5, [ip]
      __HAL_UNLOCK(hadc);
 8006a4e:	2500      	movs	r5, #0
 8006a50:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006a54:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8006a58:	f045 0510 	orr.w	r5, r5, #16
 8006a5c:	f8cc 5004 	str.w	r5, [ip, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8006a60:	f000 fe5c 	bl	800771c <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006a64:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006a66:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 8006a68:	6891      	ldr	r1, [r2, #8]
 8006a6a:	400b      	ands	r3, r1
 8006a6c:	f043 0304 	orr.w	r3, r3, #4
 8006a70:	6093      	str	r3, [r2, #8]
}
 8006a72:	b01a      	add	sp, #104	; 0x68
 8006a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006a78:	4908      	ldr	r1, [pc, #32]	; (8006a9c <HAL_ADCEx_MultiModeStart_DMA+0xf4>)
 8006a7a:	e7e2      	b.n	8006a42 <HAL_ADCEx_MultiModeStart_DMA+0x9a>
 8006a7c:	40022000 	.word	0x40022000
 8006a80:	40022100 	.word	0x40022100
 8006a84:	fffff0fe 	.word	0xfffff0fe
 8006a88:	08005bf5 	.word	0x08005bf5
 8006a8c:	08005965 	.word	0x08005965
 8006a90:	08005c61 	.word	0x08005c61
 8006a94:	58026300 	.word	0x58026300
 8006a98:	7fffffc0 	.word	0x7fffffc0
 8006a9c:	40022300 	.word	0x40022300

08006aa0 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop

08006aa4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop

08006aa8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop

08006aac <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop

08006ab0 <HAL_ADCEx_EndOfSamplingCallback>:
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop

08006ab4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006ab4:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ab6:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8006aba:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006abc:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8006abe:	2a01      	cmp	r2, #1
 8006ac0:	d04d      	beq.n	8006b5e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8006ac2:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006ac4:	4c2b      	ldr	r4, [pc, #172]	; (8006b74 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006ac6:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8006ac8:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006aca:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006acc:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006ace:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 8006ad0:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006ad4:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006ad6:	d008      	beq.n	8006aea <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ad8:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ade:	f041 0120 	orr.w	r1, r1, #32
 8006ae2:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8006ae4:	b01a      	add	sp, #104	; 0x68
 8006ae6:	bcf0      	pop	{r4, r5, r6, r7}
 8006ae8:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006aea:	4c23      	ldr	r4, [pc, #140]	; (8006b78 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8006aec:	68a2      	ldr	r2, [r4, #8]
 8006aee:	0752      	lsls	r2, r2, #29
 8006af0:	d50b      	bpl.n	8006b0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006af2:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006af4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006af6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006af8:	f042 0220 	orr.w	r2, r2, #32
 8006afc:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8006b04:	b01a      	add	sp, #104	; 0x68
 8006b06:	bcf0      	pop	{r4, r5, r6, r7}
 8006b08:	4770      	bx	lr
 8006b0a:	68a8      	ldr	r0, [r5, #8]
 8006b0c:	f010 0004 	ands.w	r0, r0, #4
 8006b10:	d1f0      	bne.n	8006af4 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b12:	b1c6      	cbz	r6, 8006b46 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006b14:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006b80 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8006b18:	684f      	ldr	r7, [r1, #4]
 8006b1a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8006b1e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006b22:	433a      	orrs	r2, r7
 8006b24:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b28:	68ad      	ldr	r5, [r5, #8]
 8006b2a:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b2c:	432a      	orrs	r2, r5
 8006b2e:	07d4      	lsls	r4, r2, #31
 8006b30:	d413      	bmi.n	8006b5a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 8006b32:	688a      	ldr	r2, [r1, #8]
 8006b34:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8006b38:	4316      	orrs	r6, r2
 8006b3a:	4a10      	ldr	r2, [pc, #64]	; (8006b7c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8006b3c:	400a      	ands	r2, r1
 8006b3e:	4316      	orrs	r6, r2
 8006b40:	f8cc 6008 	str.w	r6, [ip, #8]
 8006b44:	e7db      	b.n	8006afe <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006b46:	490e      	ldr	r1, [pc, #56]	; (8006b80 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8006b48:	688a      	ldr	r2, [r1, #8]
 8006b4a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006b4e:	608a      	str	r2, [r1, #8]
 8006b50:	68a8      	ldr	r0, [r5, #8]
 8006b52:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b54:	4302      	orrs	r2, r0
 8006b56:	07d0      	lsls	r0, r2, #31
 8006b58:	d505      	bpl.n	8006b66 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	e7cf      	b.n	8006afe <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8006b5e:	2002      	movs	r0, #2
}
 8006b60:	b01a      	add	sp, #104	; 0x68
 8006b62:	bcf0      	pop	{r4, r5, r6, r7}
 8006b64:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006b66:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b68:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006b6a:	4a04      	ldr	r2, [pc, #16]	; (8006b7c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8006b6c:	4022      	ands	r2, r4
 8006b6e:	608a      	str	r2, [r1, #8]
 8006b70:	e7c5      	b.n	8006afe <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8006b72:	bf00      	nop
 8006b74:	40022000 	.word	0x40022000
 8006b78:	40022100 	.word	0x40022100
 8006b7c:	fffff0e0 	.word	0xfffff0e0
 8006b80:	40022300 	.word	0x40022300

08006b84 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b84:	4906      	ldr	r1, [pc, #24]	; (8006ba0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b86:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b8a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8006b8c:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b8e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b90:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b94:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b98:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8006b9a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8006b9c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006b9e:	4770      	bx	lr
 8006ba0:	e000ed00 	.word	0xe000ed00
 8006ba4:	05fa0000 	.word	0x05fa0000

08006ba8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ba8:	4b1b      	ldr	r3, [pc, #108]	; (8006c18 <HAL_NVIC_SetPriority+0x70>)
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bb0:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bb2:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bb6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bba:	f1be 0f04 	cmp.w	lr, #4
 8006bbe:	bf28      	it	cs
 8006bc0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bc4:	f1bc 0f06 	cmp.w	ip, #6
 8006bc8:	d91a      	bls.n	8006c00 <HAL_NVIC_SetPriority+0x58>
 8006bca:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006bcc:	f04f 3cff 	mov.w	ip, #4294967295
 8006bd0:	fa0c fc03 	lsl.w	ip, ip, r3
 8006bd4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bd8:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8006bdc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bde:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006be2:	ea21 010c 	bic.w	r1, r1, ip
 8006be6:	fa01 f103 	lsl.w	r1, r1, r3
 8006bea:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006bee:	db0a      	blt.n	8006c06 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bf0:	0109      	lsls	r1, r1, #4
 8006bf2:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <HAL_NVIC_SetPriority+0x74>)
 8006bf4:	b2c9      	uxtb	r1, r1
 8006bf6:	4403      	add	r3, r0
 8006bf8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006bfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c00:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c02:	4613      	mov	r3, r2
 8006c04:	e7e8      	b.n	8006bd8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c06:	f000 000f 	and.w	r0, r0, #15
 8006c0a:	0109      	lsls	r1, r1, #4
 8006c0c:	4b04      	ldr	r3, [pc, #16]	; (8006c20 <HAL_NVIC_SetPriority+0x78>)
 8006c0e:	b2c9      	uxtb	r1, r1
 8006c10:	4403      	add	r3, r0
 8006c12:	7619      	strb	r1, [r3, #24]
 8006c14:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c18:	e000ed00 	.word	0xe000ed00
 8006c1c:	e000e100 	.word	0xe000e100
 8006c20:	e000ecfc 	.word	0xe000ecfc

08006c24 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006c24:	2800      	cmp	r0, #0
 8006c26:	db07      	blt.n	8006c38 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f000 011f 	and.w	r1, r0, #31
 8006c2e:	4a03      	ldr	r2, [pc, #12]	; (8006c3c <HAL_NVIC_EnableIRQ+0x18>)
 8006c30:	0940      	lsrs	r0, r0, #5
 8006c32:	408b      	lsls	r3, r1
 8006c34:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	e000e100 	.word	0xe000e100

08006c40 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c40:	1e43      	subs	r3, r0, #1
 8006c42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c46:	d20c      	bcs.n	8006c62 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c48:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c4c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c4e:	4906      	ldr	r1, [pc, #24]	; (8006c68 <HAL_SYSTICK_Config+0x28>)
 8006c50:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c54:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c56:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c58:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c5c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c5e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c60:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006c62:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	e000ed00 	.word	0xe000ed00

08006c6c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8006c6c:	b188      	cbz	r0, 8006c92 <HAL_DAC_Init+0x26>
{
 8006c6e:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006c70:	7903      	ldrb	r3, [r0, #4]
 8006c72:	4604      	mov	r4, r0
 8006c74:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006c78:	b13b      	cbz	r3, 8006c8a <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006c7a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8006c7c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006c7e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8006c80:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8006c82:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006c84:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8006c86:	7122      	strb	r2, [r4, #4]
}
 8006c88:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8006c8a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8006c8c:	f7fe fa98 	bl	80051c0 <HAL_DAC_MspInit>
 8006c90:	e7f3      	b.n	8006c7a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8006c92:	2001      	movs	r0, #1
}
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop

08006c98 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006c98:	7942      	ldrb	r2, [r0, #5]
 8006c9a:	2a01      	cmp	r2, #1
 8006c9c:	d02e      	beq.n	8006cfc <HAL_DAC_Start+0x64>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	f04f 0c02 	mov.w	ip, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006ca4:	6800      	ldr	r0, [r0, #0]
 8006ca6:	2201      	movs	r2, #1
{
 8006ca8:	b510      	push	{r4, lr}
  __HAL_DAC_ENABLE(hdac, Channel);
 8006caa:	f001 0e10 	and.w	lr, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 8006cae:	f883 c004 	strb.w	ip, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8006cb2:	6804      	ldr	r4, [r0, #0]
 8006cb4:	fa02 f20e 	lsl.w	r2, r2, lr
 8006cb8:	4322      	orrs	r2, r4
 8006cba:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006cbc:	6802      	ldr	r2, [r0, #0]
  if (Channel == DAC_CHANNEL_1)
 8006cbe:	b969      	cbnz	r1, 8006cdc <HAL_DAC_Start+0x44>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006cc0:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 8006cc4:	4562      	cmp	r2, ip
 8006cc6:	d103      	bne.n	8006cd0 <HAL_DAC_Start+0x38>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006cc8:	6842      	ldr	r2, [r0, #4]
 8006cca:	f042 0201 	orr.w	r2, r2, #1
 8006cce:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006cd0:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8006cd2:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 8006cd4:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8006cd6:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 8006cd8:	715a      	strb	r2, [r3, #5]
}
 8006cda:	bd10      	pop	{r4, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006cdc:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006ce0:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 8006ce4:	4562      	cmp	r2, ip
 8006ce6:	d1f3      	bne.n	8006cd0 <HAL_DAC_Start+0x38>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006ce8:	6842      	ldr	r2, [r0, #4]
  hdac->State = HAL_DAC_STATE_READY;
 8006cea:	2101      	movs	r1, #1
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006cec:	f042 0202 	orr.w	r2, r2, #2
 8006cf0:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 8006cf2:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8006cf4:	7119      	strb	r1, [r3, #4]
  return HAL_OK;
 8006cf6:	4610      	mov	r0, r2
  __HAL_UNLOCK(hdac);
 8006cf8:	715a      	strb	r2, [r3, #5]
}
 8006cfa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdac);
 8006cfc:	2002      	movs	r0, #2
}
 8006cfe:	4770      	bx	lr

08006d00 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006d04:	7940      	ldrb	r0, [r0, #5]
{
 8006d06:	9f06      	ldr	r7, [sp, #24]
  __HAL_LOCK(hdac);
 8006d08:	2801      	cmp	r0, #1
 8006d0a:	d053      	beq.n	8006db4 <HAL_DAC_Start_DMA+0xb4>
 8006d0c:	460d      	mov	r5, r1
 8006d0e:	4611      	mov	r1, r2
 8006d10:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006d12:	6826      	ldr	r6, [r4, #0]
  __HAL_LOCK(hdac);
 8006d14:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8006d16:	2202      	movs	r2, #2
 8006d18:	7122      	strb	r2, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 8006d1a:	bb3d      	cbnz	r5, 8006d6c <HAL_DAC_Start_DMA+0x6c>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006d1c:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 8006d1e:	2f04      	cmp	r7, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006d20:	4a37      	ldr	r2, [pc, #220]	; (8006e00 <HAL_DAC_Start_DMA+0x100>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006d22:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006e08 <HAL_DAC_Start_DMA+0x108>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006d26:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006d28:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006d2a:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006d2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006d32:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8006e0c <HAL_DAC_Start_DMA+0x10c>
 8006d36:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006d3a:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 8006d3c:	d042      	beq.n	8006dc4 <HAL_DAC_Start_DMA+0xc4>
 8006d3e:	2f08      	cmp	r7, #8
 8006d40:	d03d      	beq.n	8006dbe <HAL_DAC_Start_DMA+0xbe>
 8006d42:	2f00      	cmp	r7, #0
 8006d44:	d038      	beq.n	8006db8 <HAL_DAC_Start_DMA+0xb8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006d46:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006d48:	6837      	ldr	r7, [r6, #0]
 8006d4a:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8006d4e:	6037      	str	r7, [r6, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006d50:	f000 fce4 	bl	800771c <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006d54:	2300      	movs	r3, #0
 8006d56:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8006d58:	bb38      	cbnz	r0, 8006daa <HAL_DAC_Start_DMA+0xaa>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	f005 0110 	and.w	r1, r5, #16
 8006d60:	2501      	movs	r5, #1
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	408d      	lsls	r5, r1
 8006d66:	4315      	orrs	r5, r2
 8006d68:	601d      	str	r5, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8006d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006d6c:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 8006d6e:	2f04      	cmp	r7, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006d70:	4a24      	ldr	r2, [pc, #144]	; (8006e04 <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006d72:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8006e10 <HAL_DAC_Start_DMA+0x110>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006d76:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006d78:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006d7a:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006d7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006d82:	f8df c090 	ldr.w	ip, [pc, #144]	; 8006e14 <HAL_DAC_Start_DMA+0x114>
 8006d86:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006d8a:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 8006d8c:	d02f      	beq.n	8006dee <HAL_DAC_Start_DMA+0xee>
 8006d8e:	2f08      	cmp	r7, #8
 8006d90:	d024      	beq.n	8006ddc <HAL_DAC_Start_DMA+0xdc>
 8006d92:	b1d7      	cbz	r7, 8006dca <HAL_DAC_Start_DMA+0xca>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006d94:	6837      	ldr	r7, [r6, #0]
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006d96:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006d98:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8006d9c:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006d9e:	f000 fcbd 	bl	800771c <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8006da2:	2300      	movs	r3, #0
 8006da4:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d0d7      	beq.n	8006d5a <HAL_DAC_Start_DMA+0x5a>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006daa:	6923      	ldr	r3, [r4, #16]
 8006dac:	f043 0304 	orr.w	r3, r3, #4
 8006db0:	6123      	str	r3, [r4, #16]
}
 8006db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8006db4:	2002      	movs	r0, #2
}
 8006db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006db8:	f106 0208 	add.w	r2, r6, #8
        break;
 8006dbc:	e7c4      	b.n	8006d48 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8006dbe:	f106 0210 	add.w	r2, r6, #16
        break;
 8006dc2:	e7c1      	b.n	8006d48 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006dc4:	f106 020c 	add.w	r2, r6, #12
        break;
 8006dc8:	e7be      	b.n	8006d48 <HAL_DAC_Start_DMA+0x48>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006dca:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006dcc:	f106 0214 	add.w	r2, r6, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006dd0:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8006dd4:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006dd6:	f000 fca1 	bl	800771c <HAL_DMA_Start_IT>
 8006dda:	e7e2      	b.n	8006da2 <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006ddc:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006dde:	f106 021c 	add.w	r2, r6, #28
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006de2:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8006de6:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006de8:	f000 fc98 	bl	800771c <HAL_DMA_Start_IT>
 8006dec:	e7d9      	b.n	8006da2 <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006dee:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006df0:	f106 0218 	add.w	r2, r6, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006df4:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8006df8:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006dfa:	f000 fc8f 	bl	800771c <HAL_DMA_Start_IT>
 8006dfe:	e7d0      	b.n	8006da2 <HAL_DAC_Start_DMA+0xa2>
 8006e00:	08006e49 	.word	0x08006e49
 8006e04:	08007035 	.word	0x08007035
 8006e08:	08006e59 	.word	0x08006e59
 8006e0c:	08006e69 	.word	0x08006e69
 8006e10:	08007049 	.word	0x08007049
 8006e14:	08007059 	.word	0x08007059

08006e18 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006e18:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006e1a:	6800      	ldr	r0, [r0, #0]
{
 8006e1c:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8006e1e:	2400      	movs	r4, #0
 8006e20:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8006e22:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8006e24:	b951      	cbnz	r1, 8006e3c <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006e26:	9901      	ldr	r1, [sp, #4]
 8006e28:	3108      	adds	r1, #8
 8006e2a:	440a      	add	r2, r1
 8006e2c:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006e2e:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8006e30:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8006e32:	6013      	str	r3, [r2, #0]
}
 8006e34:	b003      	add	sp, #12
 8006e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e3a:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006e3c:	9901      	ldr	r1, [sp, #4]
 8006e3e:	3114      	adds	r1, #20
 8006e40:	440a      	add	r2, r1
 8006e42:	9201      	str	r2, [sp, #4]
 8006e44:	e7f3      	b.n	8006e2e <HAL_DAC_SetValue+0x16>
 8006e46:	bf00      	nop

08006e48 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006e48:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e4a:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f7fc fafb 	bl	8003448 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006e52:	2301      	movs	r3, #1
 8006e54:	7123      	strb	r3, [r4, #4]
}
 8006e56:	bd10      	pop	{r4, pc}

08006e58 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006e58:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006e5a:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006e5c:	f7fc fb06 	bl	800346c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006e60:	bd08      	pop	{r3, pc}
 8006e62:	bf00      	nop

08006e64 <HAL_DAC_ErrorCallbackCh1>:
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop

08006e68 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006e68:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e6a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006e6c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006e6e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006e70:	f043 0304 	orr.w	r3, r3, #4
 8006e74:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006e76:	f7ff fff5 	bl	8006e64 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	7123      	strb	r3, [r4, #4]
}
 8006e7e:	bd10      	pop	{r4, pc}

08006e80 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop

08006e84 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006e84:	6803      	ldr	r3, [r0, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	0491      	lsls	r1, r2, #18
{
 8006e8a:	b510      	push	{r4, lr}
 8006e8c:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006e8e:	d502      	bpl.n	8006e96 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e92:	0492      	lsls	r2, r2, #18
 8006e94:	d418      	bmi.n	8006ec8 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	0091      	lsls	r1, r2, #2
 8006e9a:	d502      	bpl.n	8006ea2 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8006e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e9e:	0092      	lsls	r2, r2, #2
 8006ea0:	d400      	bmi.n	8006ea4 <HAL_DAC_IRQHandler+0x20>
}
 8006ea2:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8006ea4:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006ea6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006eaa:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8006eac:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006eae:	6922      	ldr	r2, [r4, #16]
 8006eb0:	f042 0202 	orr.w	r2, r2, #2
 8006eb4:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006eb6:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8006ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006ec2:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006ec4:	f000 b8d4 	b.w	8007070 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8006ec8:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006eca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8006ece:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006ed0:	6902      	ldr	r2, [r0, #16]
 8006ed2:	f042 0201 	orr.w	r2, r2, #1
 8006ed6:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006ed8:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ee0:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006ee2:	f7ff ffcd 	bl	8006e80 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	e7d5      	b.n	8006e96 <HAL_DAC_IRQHandler+0x12>
 8006eea:	bf00      	nop

08006eec <HAL_DAC_ConfigChannel>:
{
 8006eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdac);
 8006ef0:	7943      	ldrb	r3, [r0, #5]
{
 8006ef2:	460d      	mov	r5, r1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8006ef4:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	f000 808d 	beq.w	8007016 <HAL_DAC_ConfigChannel+0x12a>
 8006efc:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006efe:	2904      	cmp	r1, #4
 8006f00:	4604      	mov	r4, r0
 8006f02:	4616      	mov	r6, r2
  __HAL_LOCK(hdac);
 8006f04:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8006f06:	f04f 0302 	mov.w	r3, #2
 8006f0a:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006f0c:	d045      	beq.n	8006f9a <HAL_DAC_ConfigChannel+0xae>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006f0e:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 8006f12:	6800      	ldr	r0, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006f14:	692b      	ldr	r3, [r5, #16]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d108      	bne.n	8006f2c <HAL_DAC_ConfigChannel+0x40>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006f1a:	261f      	movs	r6, #31
    tmpreg1 = hdac->Instance->CCR;
 8006f1c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006f1e:	4096      	lsls	r6, r2
 8006f20:	ea23 0606 	bic.w	r6, r3, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f24:	696b      	ldr	r3, [r5, #20]
 8006f26:	4093      	lsls	r3, r2
 8006f28:	4333      	orrs	r3, r6
    hdac->Instance->CCR = tmpreg1;
 8006f2a:	6383      	str	r3, [r0, #56]	; 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006f2c:	2607      	movs	r6, #7
 8006f2e:	fa06 f302 	lsl.w	r3, r6, r2
  tmpreg1 = hdac->Instance->MCR;
 8006f32:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006f34:	ea26 0603 	bic.w	r6, r6, r3
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006f38:	e9d5 7302 	ldrd	r7, r3, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d028      	beq.n	8006f92 <HAL_DAC_ConfigChannel+0xa6>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d028      	beq.n	8006f96 <HAL_DAC_ConfigChannel+0xaa>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006f44:	fab7 f387 	clz	r3, r7
 8006f48:	095b      	lsrs	r3, r3, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006f4a:	433b      	orrs	r3, r7
 8006f4c:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f4e:	6869      	ldr	r1, [r5, #4]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006f50:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f54:	4093      	lsls	r3, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f56:	4091      	lsls	r1, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006f58:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f5a:	4333      	orrs	r3, r6
  hdac->Instance->MCR = tmpreg1;
 8006f5c:	63c3      	str	r3, [r0, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006f5e:	6803      	ldr	r3, [r0, #0]
 8006f60:	ea23 0305 	bic.w	r3, r3, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006f64:	f640 75fe 	movw	r5, #4094	; 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006f68:	6003      	str	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006f6a:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 8006f6c:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006f6e:	ea23 0305 	bic.w	r3, r3, r5
  hdac->State = HAL_DAC_STATE_READY;
 8006f72:	2501      	movs	r5, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f74:	430b      	orrs	r3, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006f76:	21c0      	movs	r1, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 8006f78:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006f7a:	fa01 f302 	lsl.w	r3, r1, r2
 8006f7e:	6802      	ldr	r2, [r0, #0]
  __HAL_UNLOCK(hdac);
 8006f80:	2100      	movs	r1, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006f82:	ea22 0203 	bic.w	r2, r2, r3
 8006f86:	6002      	str	r2, [r0, #0]
  return HAL_OK;
 8006f88:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 8006f8a:	7125      	strb	r5, [r4, #4]
  __HAL_UNLOCK(hdac);
 8006f8c:	7161      	strb	r1, [r4, #5]
}
 8006f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	e7d9      	b.n	8006f4a <HAL_DAC_ConfigChannel+0x5e>
    connectOnChip = DAC_MCR_MODE1_0;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e7d7      	b.n	8006f4a <HAL_DAC_ConfigChannel+0x5e>
    tickstart = HAL_GetTick();
 8006f9a:	f7fe fc99 	bl	80058d0 <HAL_GetTick>
 8006f9e:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8006fa0:	b9c6      	cbnz	r6, 8006fd4 <HAL_DAC_ConfigChannel+0xe8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006fa2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800702c <HAL_DAC_ConfigChannel+0x140>
 8006fa6:	e004      	b.n	8006fb2 <HAL_DAC_ConfigChannel+0xc6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006fa8:	f7fe fc92 	bl	80058d0 <HAL_GetTick>
 8006fac:	1bc3      	subs	r3, r0, r7
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d834      	bhi.n	800701c <HAL_DAC_ConfigChannel+0x130>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb6:	ea13 0f08 	tst.w	r3, r8
 8006fba:	d1f5      	bne.n	8006fa8 <HAL_DAC_ConfigChannel+0xbc>
      HAL_Delay(1);
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	f7fe fc8d 	bl	80058dc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006fc2:	6820      	ldr	r0, [r4, #0]
 8006fc4:	69ab      	ldr	r3, [r5, #24]
 8006fc6:	6403      	str	r3, [r0, #64]	; 0x40
 8006fc8:	e00e      	b.n	8006fe8 <HAL_DAC_ConfigChannel+0xfc>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006fca:	f7fe fc81 	bl	80058d0 <HAL_GetTick>
 8006fce:	1bc3      	subs	r3, r0, r7
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d823      	bhi.n	800701c <HAL_DAC_ConfigChannel+0x130>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	dbf6      	blt.n	8006fca <HAL_DAC_ConfigChannel+0xde>
      HAL_Delay(1U);
 8006fdc:	2001      	movs	r0, #1
 8006fde:	f7fe fc7d 	bl	80058dc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006fe2:	6820      	ldr	r0, [r4, #0]
 8006fe4:	69ab      	ldr	r3, [r5, #24]
 8006fe6:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006fe8:	f006 0210 	and.w	r2, r6, #16
 8006fec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006ff0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006ff2:	4091      	lsls	r1, r2
 8006ff4:	ea23 0301 	bic.w	r3, r3, r1
 8006ff8:	69e9      	ldr	r1, [r5, #28]
 8006ffa:	4091      	lsls	r1, r2
 8006ffc:	430b      	orrs	r3, r1
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006ffe:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007000:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007002:	4091      	lsls	r1, r2
 8007004:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007006:	ea23 0301 	bic.w	r3, r3, r1
 800700a:	6a29      	ldr	r1, [r5, #32]
 800700c:	4091      	lsls	r1, r2
 800700e:	430b      	orrs	r3, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007010:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007012:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007014:	e77e      	b.n	8006f14 <HAL_DAC_ConfigChannel+0x28>
  __HAL_LOCK(hdac);
 8007016:	2002      	movs	r0, #2
}
 8007018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800701c:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800701e:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007020:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 8007024:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007026:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007028:	7122      	strb	r2, [r4, #4]
          return HAL_TIMEOUT;
 800702a:	e7b0      	b.n	8006f8e <HAL_DAC_ConfigChannel+0xa2>
 800702c:	20008000 	.word	0x20008000

08007030 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop

08007034 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007034:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007036:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007038:	4620      	mov	r0, r4
 800703a:	f7ff fff9 	bl	8007030 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800703e:	2301      	movs	r3, #1
 8007040:	7123      	strb	r3, [r4, #4]
}
 8007042:	bd10      	pop	{r4, pc}

08007044 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop

08007048 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007048:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800704a:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800704c:	f7ff fffa 	bl	8007044 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007050:	bd08      	pop	{r3, pc}
 8007052:	bf00      	nop

08007054 <HAL_DACEx_ErrorCallbackCh2>:
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop

08007058 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007058:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800705a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800705c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800705e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007060:	f043 0304 	orr.w	r3, r3, #4
 8007064:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007066:	f7ff fff5 	bl	8007054 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800706a:	2301      	movs	r3, #1
 800706c:	7123      	strb	r3, [r4, #4]
}
 800706e:	bd10      	pop	{r4, pc}

08007070 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop

08007074 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007074:	6802      	ldr	r2, [r0, #0]
 8007076:	4b34      	ldr	r3, [pc, #208]	; (8007148 <DMA_CalcBaseAndBitshift+0xd4>)
 8007078:	4934      	ldr	r1, [pc, #208]	; (800714c <DMA_CalcBaseAndBitshift+0xd8>)
{
 800707a:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800707c:	4d34      	ldr	r5, [pc, #208]	; (8007150 <DMA_CalcBaseAndBitshift+0xdc>)
 800707e:	4c35      	ldr	r4, [pc, #212]	; (8007154 <DMA_CalcBaseAndBitshift+0xe0>)
 8007080:	42aa      	cmp	r2, r5
 8007082:	bf18      	it	ne
 8007084:	429a      	cmpne	r2, r3
 8007086:	bf0c      	ite	eq
 8007088:	2301      	moveq	r3, #1
 800708a:	2300      	movne	r3, #0
 800708c:	428a      	cmp	r2, r1
 800708e:	bf08      	it	eq
 8007090:	f043 0301 	orreq.w	r3, r3, #1
 8007094:	3130      	adds	r1, #48	; 0x30
 8007096:	42a2      	cmp	r2, r4
 8007098:	bf08      	it	eq
 800709a:	f043 0301 	orreq.w	r3, r3, #1
 800709e:	3430      	adds	r4, #48	; 0x30
 80070a0:	428a      	cmp	r2, r1
 80070a2:	bf08      	it	eq
 80070a4:	f043 0301 	orreq.w	r3, r3, #1
 80070a8:	3130      	adds	r1, #48	; 0x30
 80070aa:	42a2      	cmp	r2, r4
 80070ac:	bf08      	it	eq
 80070ae:	f043 0301 	orreq.w	r3, r3, #1
 80070b2:	3430      	adds	r4, #48	; 0x30
 80070b4:	428a      	cmp	r2, r1
 80070b6:	bf08      	it	eq
 80070b8:	f043 0301 	orreq.w	r3, r3, #1
 80070bc:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80070c0:	42a2      	cmp	r2, r4
 80070c2:	bf08      	it	eq
 80070c4:	f043 0301 	orreq.w	r3, r3, #1
 80070c8:	f504 745c 	add.w	r4, r4, #880	; 0x370
 80070cc:	428a      	cmp	r2, r1
 80070ce:	bf08      	it	eq
 80070d0:	f043 0301 	orreq.w	r3, r3, #1
 80070d4:	3130      	adds	r1, #48	; 0x30
 80070d6:	42a2      	cmp	r2, r4
 80070d8:	bf08      	it	eq
 80070da:	f043 0301 	orreq.w	r3, r3, #1
 80070de:	3430      	adds	r4, #48	; 0x30
 80070e0:	428a      	cmp	r2, r1
 80070e2:	bf08      	it	eq
 80070e4:	f043 0301 	orreq.w	r3, r3, #1
 80070e8:	3130      	adds	r1, #48	; 0x30
 80070ea:	42a2      	cmp	r2, r4
 80070ec:	bf08      	it	eq
 80070ee:	f043 0301 	orreq.w	r3, r3, #1
 80070f2:	3430      	adds	r4, #48	; 0x30
 80070f4:	428a      	cmp	r2, r1
 80070f6:	bf08      	it	eq
 80070f8:	f043 0301 	orreq.w	r3, r3, #1
 80070fc:	3130      	adds	r1, #48	; 0x30
 80070fe:	42a2      	cmp	r2, r4
 8007100:	bf08      	it	eq
 8007102:	f043 0301 	orreq.w	r3, r3, #1
 8007106:	428a      	cmp	r2, r1
 8007108:	bf08      	it	eq
 800710a:	f043 0301 	orreq.w	r3, r3, #1
 800710e:	b913      	cbnz	r3, 8007116 <DMA_CalcBaseAndBitshift+0xa2>
 8007110:	4b11      	ldr	r3, [pc, #68]	; (8007158 <DMA_CalcBaseAndBitshift+0xe4>)
 8007112:	429a      	cmp	r2, r3
 8007114:	d113      	bne.n	800713e <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007116:	b2d3      	uxtb	r3, r2
 8007118:	4910      	ldr	r1, [pc, #64]	; (800715c <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800711a:	4c11      	ldr	r4, [pc, #68]	; (8007160 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800711c:	3b10      	subs	r3, #16
 800711e:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 8007122:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007124:	4b0f      	ldr	r3, [pc, #60]	; (8007164 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007126:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800712a:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800712e:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007130:	bf88      	it	hi
 8007132:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007134:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007136:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8007138:	4618      	mov	r0, r3
 800713a:	bc30      	pop	{r4, r5}
 800713c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800713e:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8007142:	6583      	str	r3, [r0, #88]	; 0x58
 8007144:	e7f8      	b.n	8007138 <DMA_CalcBaseAndBitshift+0xc4>
 8007146:	bf00      	nop
 8007148:	40020010 	.word	0x40020010
 800714c:	40020040 	.word	0x40020040
 8007150:	40020028 	.word	0x40020028
 8007154:	40020058 	.word	0x40020058
 8007158:	400204b8 	.word	0x400204b8
 800715c:	aaaaaaab 	.word	0xaaaaaaab
 8007160:	0801a1c8 	.word	0x0801a1c8
 8007164:	fffffc00 	.word	0xfffffc00

08007168 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007168:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800716a:	4a29      	ldr	r2, [pc, #164]	; (8007210 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 800716c:	4929      	ldr	r1, [pc, #164]	; (8007214 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 800716e:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007170:	4d29      	ldr	r5, [pc, #164]	; (8007218 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8007172:	4c2a      	ldr	r4, [pc, #168]	; (800721c <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8007174:	42ab      	cmp	r3, r5
 8007176:	bf18      	it	ne
 8007178:	4293      	cmpne	r3, r2
 800717a:	bf0c      	ite	eq
 800717c:	2201      	moveq	r2, #1
 800717e:	2200      	movne	r2, #0
 8007180:	428b      	cmp	r3, r1
 8007182:	bf08      	it	eq
 8007184:	f042 0201 	orreq.w	r2, r2, #1
 8007188:	3128      	adds	r1, #40	; 0x28
 800718a:	42a3      	cmp	r3, r4
 800718c:	bf08      	it	eq
 800718e:	f042 0201 	orreq.w	r2, r2, #1
 8007192:	3428      	adds	r4, #40	; 0x28
 8007194:	428b      	cmp	r3, r1
 8007196:	bf08      	it	eq
 8007198:	f042 0201 	orreq.w	r2, r2, #1
 800719c:	3128      	adds	r1, #40	; 0x28
 800719e:	42a3      	cmp	r3, r4
 80071a0:	bf08      	it	eq
 80071a2:	f042 0201 	orreq.w	r2, r2, #1
 80071a6:	428b      	cmp	r3, r1
 80071a8:	bf08      	it	eq
 80071aa:	f042 0201 	orreq.w	r2, r2, #1
 80071ae:	b912      	cbnz	r2, 80071b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 80071b0:	4a1b      	ldr	r2, [pc, #108]	; (8007220 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d113      	bne.n	80071de <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	4c1a      	ldr	r4, [pc, #104]	; (8007224 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80071ba:	4a1b      	ldr	r2, [pc, #108]	; (8007228 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80071bc:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80071be:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80071c0:	4d1a      	ldr	r5, [pc, #104]	; (800722c <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80071c2:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80071c6:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80071c8:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80071cc:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80071d0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80071d2:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80071d6:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80071d8:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80071da:	bc30      	pop	{r4, r5}
 80071dc:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071de:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80071e0:	4913      	ldr	r1, [pc, #76]	; (8007230 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071e2:	4c14      	ldr	r4, [pc, #80]	; (8007234 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80071e4:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071e6:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80071e8:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071ea:	fba4 2302 	umull	r2, r3, r4, r2
 80071ee:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80071f2:	d800      	bhi.n	80071f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 80071f4:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80071f6:	4a10      	ldr	r2, [pc, #64]	; (8007238 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80071f8:	f003 051f 	and.w	r5, r3, #31
 80071fc:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80071fe:	4c0f      	ldr	r4, [pc, #60]	; (800723c <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007200:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007202:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007204:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007206:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007208:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800720a:	6602      	str	r2, [r0, #96]	; 0x60
}
 800720c:	e7e5      	b.n	80071da <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 800720e:	bf00      	nop
 8007210:	58025408 	.word	0x58025408
 8007214:	58025430 	.word	0x58025430
 8007218:	5802541c 	.word	0x5802541c
 800721c:	58025444 	.word	0x58025444
 8007220:	58025494 	.word	0x58025494
 8007224:	cccccccd 	.word	0xcccccccd
 8007228:	16009600 	.word	0x16009600
 800722c:	58025880 	.word	0x58025880
 8007230:	bffdfbf0 	.word	0xbffdfbf0
 8007234:	aaaaaaab 	.word	0xaaaaaaab
 8007238:	10008200 	.word	0x10008200
 800723c:	40020880 	.word	0x40020880

08007240 <HAL_DMA_Init>:
{
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007244:	f7fe fb44 	bl	80058d0 <HAL_GetTick>
  if(hdma == NULL)
 8007248:	2c00      	cmp	r4, #0
 800724a:	f000 8177 	beq.w	800753c <HAL_DMA_Init+0x2fc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	4605      	mov	r5, r0
 8007252:	4a92      	ldr	r2, [pc, #584]	; (800749c <HAL_DMA_Init+0x25c>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d048      	beq.n	80072ea <HAL_DMA_Init+0xaa>
 8007258:	3218      	adds	r2, #24
 800725a:	4293      	cmp	r3, r2
 800725c:	d045      	beq.n	80072ea <HAL_DMA_Init+0xaa>
 800725e:	3230      	adds	r2, #48	; 0x30
 8007260:	498f      	ldr	r1, [pc, #572]	; (80074a0 <HAL_DMA_Init+0x260>)
 8007262:	428b      	cmp	r3, r1
 8007264:	bf18      	it	ne
 8007266:	4293      	cmpne	r3, r2
 8007268:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800726c:	bf0c      	ite	eq
 800726e:	2201      	moveq	r2, #1
 8007270:	2200      	movne	r2, #0
 8007272:	428b      	cmp	r3, r1
 8007274:	bf08      	it	eq
 8007276:	f042 0201 	orreq.w	r2, r2, #1
 800727a:	3118      	adds	r1, #24
 800727c:	428b      	cmp	r3, r1
 800727e:	bf08      	it	eq
 8007280:	f042 0201 	orreq.w	r2, r2, #1
 8007284:	3118      	adds	r1, #24
 8007286:	428b      	cmp	r3, r1
 8007288:	bf08      	it	eq
 800728a:	f042 0201 	orreq.w	r2, r2, #1
 800728e:	3118      	adds	r1, #24
 8007290:	428b      	cmp	r3, r1
 8007292:	bf08      	it	eq
 8007294:	f042 0201 	orreq.w	r2, r2, #1
 8007298:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800729c:	428b      	cmp	r3, r1
 800729e:	bf08      	it	eq
 80072a0:	f042 0201 	orreq.w	r2, r2, #1
 80072a4:	3118      	adds	r1, #24
 80072a6:	428b      	cmp	r3, r1
 80072a8:	bf08      	it	eq
 80072aa:	f042 0201 	orreq.w	r2, r2, #1
 80072ae:	3118      	adds	r1, #24
 80072b0:	428b      	cmp	r3, r1
 80072b2:	bf08      	it	eq
 80072b4:	f042 0201 	orreq.w	r2, r2, #1
 80072b8:	3118      	adds	r1, #24
 80072ba:	428b      	cmp	r3, r1
 80072bc:	bf08      	it	eq
 80072be:	f042 0201 	orreq.w	r2, r2, #1
 80072c2:	3118      	adds	r1, #24
 80072c4:	428b      	cmp	r3, r1
 80072c6:	bf08      	it	eq
 80072c8:	f042 0201 	orreq.w	r2, r2, #1
 80072cc:	3118      	adds	r1, #24
 80072ce:	428b      	cmp	r3, r1
 80072d0:	bf08      	it	eq
 80072d2:	f042 0201 	orreq.w	r2, r2, #1
 80072d6:	3118      	adds	r1, #24
 80072d8:	428b      	cmp	r3, r1
 80072da:	bf08      	it	eq
 80072dc:	f042 0201 	orreq.w	r2, r2, #1
 80072e0:	b91a      	cbnz	r2, 80072ea <HAL_DMA_Init+0xaa>
 80072e2:	4a70      	ldr	r2, [pc, #448]	; (80074a4 <HAL_DMA_Init+0x264>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	f040 8198 	bne.w	800761a <HAL_DMA_Init+0x3da>
    __HAL_UNLOCK(hdma);
 80072ea:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80072ec:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 80072ee:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 80072f2:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	f022 0201 	bic.w	r2, r2, #1
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	e006      	b.n	800730e <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007300:	f7fe fae6 	bl	80058d0 <HAL_GetTick>
 8007304:	1b43      	subs	r3, r0, r5
 8007306:	2b05      	cmp	r3, #5
 8007308:	f200 80ff 	bhi.w	800750a <HAL_DMA_Init+0x2ca>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	07d6      	lsls	r6, r2, #31
 8007312:	d4f5      	bmi.n	8007300 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8007314:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007318:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800731a:	432a      	orrs	r2, r5
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800731c:	69a1      	ldr	r1, [r4, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800731e:	681d      	ldr	r5, [r3, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007320:	4302      	orrs	r2, r0
 8007322:	6960      	ldr	r0, [r4, #20]
 8007324:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007326:	69e0      	ldr	r0, [r4, #28]
 8007328:	430a      	orrs	r2, r1
 800732a:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800732c:	485e      	ldr	r0, [pc, #376]	; (80074a8 <HAL_DMA_Init+0x268>)
 800732e:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 8007330:	6a25      	ldr	r5, [r4, #32]
 8007332:	432a      	orrs	r2, r5
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007334:	4d5d      	ldr	r5, [pc, #372]	; (80074ac <HAL_DMA_Init+0x26c>)
    registerValue |=  hdma->Init.Direction           |
 8007336:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007338:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800733a:	2804      	cmp	r0, #4
 800733c:	f000 8100 	beq.w	8007540 <HAL_DMA_Init+0x300>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007340:	682e      	ldr	r6, [r5, #0]
 8007342:	4d5b      	ldr	r5, [pc, #364]	; (80074b0 <HAL_DMA_Init+0x270>)
 8007344:	4035      	ands	r5, r6
 8007346:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 800734a:	f080 80bb 	bcs.w	80074c4 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800734e:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007350:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007352:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8007356:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007358:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800735a:	4620      	mov	r0, r4
 800735c:	f7ff fe8a 	bl	8007074 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007360:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007362:	233f      	movs	r3, #63	; 0x3f
 8007364:	f002 021f 	and.w	r2, r2, #31
 8007368:	4093      	lsls	r3, r2
 800736a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800736c:	6822      	ldr	r2, [r4, #0]
 800736e:	4b4b      	ldr	r3, [pc, #300]	; (800749c <HAL_DMA_Init+0x25c>)
 8007370:	4850      	ldr	r0, [pc, #320]	; (80074b4 <HAL_DMA_Init+0x274>)
 8007372:	494b      	ldr	r1, [pc, #300]	; (80074a0 <HAL_DMA_Init+0x260>)
 8007374:	4282      	cmp	r2, r0
 8007376:	bf18      	it	ne
 8007378:	429a      	cmpne	r2, r3
 800737a:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800737e:	bf0c      	ite	eq
 8007380:	2301      	moveq	r3, #1
 8007382:	2300      	movne	r3, #0
 8007384:	428a      	cmp	r2, r1
 8007386:	bf08      	it	eq
 8007388:	f043 0301 	orreq.w	r3, r3, #1
 800738c:	3130      	adds	r1, #48	; 0x30
 800738e:	4282      	cmp	r2, r0
 8007390:	bf08      	it	eq
 8007392:	f043 0301 	orreq.w	r3, r3, #1
 8007396:	3030      	adds	r0, #48	; 0x30
 8007398:	428a      	cmp	r2, r1
 800739a:	bf08      	it	eq
 800739c:	f043 0301 	orreq.w	r3, r3, #1
 80073a0:	3130      	adds	r1, #48	; 0x30
 80073a2:	4282      	cmp	r2, r0
 80073a4:	bf08      	it	eq
 80073a6:	f043 0301 	orreq.w	r3, r3, #1
 80073aa:	3030      	adds	r0, #48	; 0x30
 80073ac:	428a      	cmp	r2, r1
 80073ae:	bf08      	it	eq
 80073b0:	f043 0301 	orreq.w	r3, r3, #1
 80073b4:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80073b8:	4282      	cmp	r2, r0
 80073ba:	bf08      	it	eq
 80073bc:	f043 0301 	orreq.w	r3, r3, #1
 80073c0:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80073c4:	428a      	cmp	r2, r1
 80073c6:	bf08      	it	eq
 80073c8:	f043 0301 	orreq.w	r3, r3, #1
 80073cc:	3130      	adds	r1, #48	; 0x30
 80073ce:	4282      	cmp	r2, r0
 80073d0:	bf08      	it	eq
 80073d2:	f043 0301 	orreq.w	r3, r3, #1
 80073d6:	3030      	adds	r0, #48	; 0x30
 80073d8:	428a      	cmp	r2, r1
 80073da:	bf08      	it	eq
 80073dc:	f043 0301 	orreq.w	r3, r3, #1
 80073e0:	3130      	adds	r1, #48	; 0x30
 80073e2:	4282      	cmp	r2, r0
 80073e4:	bf08      	it	eq
 80073e6:	f043 0301 	orreq.w	r3, r3, #1
 80073ea:	3030      	adds	r0, #48	; 0x30
 80073ec:	428a      	cmp	r2, r1
 80073ee:	bf08      	it	eq
 80073f0:	f043 0301 	orreq.w	r3, r3, #1
 80073f4:	3130      	adds	r1, #48	; 0x30
 80073f6:	4282      	cmp	r2, r0
 80073f8:	bf08      	it	eq
 80073fa:	f043 0301 	orreq.w	r3, r3, #1
 80073fe:	3030      	adds	r0, #48	; 0x30
 8007400:	428a      	cmp	r2, r1
 8007402:	bf08      	it	eq
 8007404:	f043 0301 	orreq.w	r3, r3, #1
 8007408:	492b      	ldr	r1, [pc, #172]	; (80074b8 <HAL_DMA_Init+0x278>)
 800740a:	4282      	cmp	r2, r0
 800740c:	bf08      	it	eq
 800740e:	f043 0301 	orreq.w	r3, r3, #1
 8007412:	482a      	ldr	r0, [pc, #168]	; (80074bc <HAL_DMA_Init+0x27c>)
 8007414:	428a      	cmp	r2, r1
 8007416:	bf08      	it	eq
 8007418:	f043 0301 	orreq.w	r3, r3, #1
 800741c:	3128      	adds	r1, #40	; 0x28
 800741e:	4282      	cmp	r2, r0
 8007420:	bf08      	it	eq
 8007422:	f043 0301 	orreq.w	r3, r3, #1
 8007426:	3028      	adds	r0, #40	; 0x28
 8007428:	428a      	cmp	r2, r1
 800742a:	bf08      	it	eq
 800742c:	f043 0301 	orreq.w	r3, r3, #1
 8007430:	3128      	adds	r1, #40	; 0x28
 8007432:	4282      	cmp	r2, r0
 8007434:	bf08      	it	eq
 8007436:	f043 0301 	orreq.w	r3, r3, #1
 800743a:	3028      	adds	r0, #40	; 0x28
 800743c:	428a      	cmp	r2, r1
 800743e:	bf08      	it	eq
 8007440:	f043 0301 	orreq.w	r3, r3, #1
 8007444:	3128      	adds	r1, #40	; 0x28
 8007446:	4282      	cmp	r2, r0
 8007448:	bf08      	it	eq
 800744a:	f043 0301 	orreq.w	r3, r3, #1
 800744e:	428a      	cmp	r2, r1
 8007450:	bf08      	it	eq
 8007452:	f043 0301 	orreq.w	r3, r3, #1
 8007456:	b913      	cbnz	r3, 800745e <HAL_DMA_Init+0x21e>
 8007458:	4b19      	ldr	r3, [pc, #100]	; (80074c0 <HAL_DMA_Init+0x280>)
 800745a:	429a      	cmp	r2, r3
 800745c:	d118      	bne.n	8007490 <HAL_DMA_Init+0x250>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800745e:	4620      	mov	r0, r4
 8007460:	f7ff fe82 	bl	8007168 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007464:	68a3      	ldr	r3, [r4, #8]
 8007466:	2b80      	cmp	r3, #128	; 0x80
 8007468:	d05c      	beq.n	8007524 <HAL_DMA_Init+0x2e4>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800746a:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800746c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800746e:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007470:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007472:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007476:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007478:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800747a:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800747c:	d859      	bhi.n	8007532 <HAL_DMA_Init+0x2f2>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800747e:	1e50      	subs	r0, r2, #1
 8007480:	2807      	cmp	r0, #7
 8007482:	d96e      	bls.n	8007562 <HAL_DMA_Init+0x322>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007484:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007486:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800748a:	2000      	movs	r0, #0
 800748c:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800748e:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007490:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8007492:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007494:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8007496:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800749a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800749c:	40020010 	.word	0x40020010
 80074a0:	40020040 	.word	0x40020040
 80074a4:	400204b8 	.word	0x400204b8
 80074a8:	fe10803f 	.word	0xfe10803f
 80074ac:	5c001000 	.word	0x5c001000
 80074b0:	ffff0000 	.word	0xffff0000
 80074b4:	40020028 	.word	0x40020028
 80074b8:	58025408 	.word	0x58025408
 80074bc:	5802541c 	.word	0x5802541c
 80074c0:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80074c4:	6865      	ldr	r5, [r4, #4]
 80074c6:	f1a5 0629 	sub.w	r6, r5, #41	; 0x29
 80074ca:	2e1f      	cmp	r6, #31
 80074cc:	d924      	bls.n	8007518 <HAL_DMA_Init+0x2d8>
 80074ce:	3d4f      	subs	r5, #79	; 0x4f
 80074d0:	2d03      	cmp	r5, #3
 80074d2:	d801      	bhi.n	80074d8 <HAL_DMA_Init+0x298>
        registerValue |= DMA_SxCR_TRBUFF;
 80074d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80074d8:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074da:	2804      	cmp	r0, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80074dc:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80074de:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 80074e2:	ea42 0200 	orr.w	r2, r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074e6:	f47f af37 	bne.w	8007358 <HAL_DMA_Init+0x118>
 80074ea:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 80074ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80074ee:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80074f0:	2d00      	cmp	r5, #0
 80074f2:	f43f af31 	beq.w	8007358 <HAL_DMA_Init+0x118>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80074f6:	2900      	cmp	r1, #0
 80074f8:	d169      	bne.n	80075ce <HAL_DMA_Init+0x38e>
    switch (hdma->Init.FIFOThreshold)
 80074fa:	2801      	cmp	r0, #1
 80074fc:	f000 8088 	beq.w	8007610 <HAL_DMA_Init+0x3d0>
 8007500:	f030 0102 	bics.w	r1, r0, #2
 8007504:	f47f af28 	bne.w	8007358 <HAL_DMA_Init+0x118>
 8007508:	e069      	b.n	80075de <HAL_DMA_Init+0x39e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800750a:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800750c:	2303      	movs	r3, #3
        return HAL_ERROR;
 800750e:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007510:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8007512:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007518:	4d73      	ldr	r5, [pc, #460]	; (80076e8 <HAL_DMA_Init+0x4a8>)
 800751a:	fa25 f606 	lsr.w	r6, r5, r6
 800751e:	07f5      	lsls	r5, r6, #31
 8007520:	d5da      	bpl.n	80074d8 <HAL_DMA_Init+0x298>
 8007522:	e7d7      	b.n	80074d4 <HAL_DMA_Init+0x294>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007524:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007526:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8007528:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800752c:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800752e:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007530:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8007532:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8007534:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007538:	6763      	str	r3, [r4, #116]	; 0x74
 800753a:	e7a9      	b.n	8007490 <HAL_DMA_Init+0x250>
    return HAL_ERROR;
 800753c:	2001      	movs	r0, #1
}
 800753e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007540:	682f      	ldr	r7, [r5, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007542:	e9d4 560b 	ldrd	r5, r6, [r4, #44]	; 0x2c
 8007546:	432e      	orrs	r6, r5
 8007548:	4332      	orrs	r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800754a:	4e68      	ldr	r6, [pc, #416]	; (80076ec <HAL_DMA_Init+0x4ac>)
 800754c:	403e      	ands	r6, r7
 800754e:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 8007552:	d2b7      	bcs.n	80074c4 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007554:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007556:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007558:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800755c:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007560:	e7c4      	b.n	80074ec <HAL_DMA_Init+0x2ac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007562:	6821      	ldr	r1, [r4, #0]
 8007564:	4b62      	ldr	r3, [pc, #392]	; (80076f0 <HAL_DMA_Init+0x4b0>)
 8007566:	4d63      	ldr	r5, [pc, #396]	; (80076f4 <HAL_DMA_Init+0x4b4>)
 8007568:	42a9      	cmp	r1, r5
 800756a:	bf18      	it	ne
 800756c:	4299      	cmpne	r1, r3
 800756e:	f105 0514 	add.w	r5, r5, #20
 8007572:	bf0c      	ite	eq
 8007574:	2301      	moveq	r3, #1
 8007576:	2300      	movne	r3, #0
 8007578:	42a9      	cmp	r1, r5
 800757a:	bf08      	it	eq
 800757c:	f043 0301 	orreq.w	r3, r3, #1
 8007580:	3514      	adds	r5, #20
 8007582:	42a9      	cmp	r1, r5
 8007584:	bf08      	it	eq
 8007586:	f043 0301 	orreq.w	r3, r3, #1
 800758a:	3514      	adds	r5, #20
 800758c:	42a9      	cmp	r1, r5
 800758e:	bf08      	it	eq
 8007590:	f043 0301 	orreq.w	r3, r3, #1
 8007594:	3514      	adds	r5, #20
 8007596:	42a9      	cmp	r1, r5
 8007598:	bf08      	it	eq
 800759a:	f043 0301 	orreq.w	r3, r3, #1
 800759e:	3514      	adds	r5, #20
 80075a0:	42a9      	cmp	r1, r5
 80075a2:	bf08      	it	eq
 80075a4:	f043 0301 	orreq.w	r3, r3, #1
 80075a8:	b93b      	cbnz	r3, 80075ba <HAL_DMA_Init+0x37a>
 80075aa:	4b53      	ldr	r3, [pc, #332]	; (80076f8 <HAL_DMA_Init+0x4b8>)
 80075ac:	4299      	cmp	r1, r3
 80075ae:	d004      	beq.n	80075ba <HAL_DMA_Init+0x37a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80075b0:	4b52      	ldr	r3, [pc, #328]	; (80076fc <HAL_DMA_Init+0x4bc>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80075b2:	4953      	ldr	r1, [pc, #332]	; (8007700 <HAL_DMA_Init+0x4c0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80075b4:	4413      	add	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80075b8:	e003      	b.n	80075c2 <HAL_DMA_Init+0x382>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80075ba:	4b52      	ldr	r3, [pc, #328]	; (8007704 <HAL_DMA_Init+0x4c4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80075bc:	4952      	ldr	r1, [pc, #328]	; (8007708 <HAL_DMA_Init+0x4c8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80075be:	4413      	add	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80075c2:	2201      	movs	r2, #1
 80075c4:	4082      	lsls	r2, r0
 80075c6:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 80075ca:	6762      	str	r2, [r4, #116]	; 0x74
 80075cc:	e75d      	b.n	800748a <HAL_DMA_Init+0x24a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80075ce:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80075d2:	d00e      	beq.n	80075f2 <HAL_DMA_Init+0x3b2>
    switch (hdma->Init.FIFOThreshold)
 80075d4:	2802      	cmp	r0, #2
 80075d6:	d905      	bls.n	80075e4 <HAL_DMA_Init+0x3a4>
 80075d8:	2803      	cmp	r0, #3
 80075da:	f47f aebd 	bne.w	8007358 <HAL_DMA_Init+0x118>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075de:	01e9      	lsls	r1, r5, #7
 80075e0:	f57f aeba 	bpl.w	8007358 <HAL_DMA_Init+0x118>
          hdma->State = HAL_DMA_STATE_READY;
 80075e4:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075e6:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80075e8:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075ea:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80075ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80075f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 80075f2:	2803      	cmp	r0, #3
 80075f4:	f63f aeb0 	bhi.w	8007358 <HAL_DMA_Init+0x118>
 80075f8:	a101      	add	r1, pc, #4	; (adr r1, 8007600 <HAL_DMA_Init+0x3c0>)
 80075fa:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 80075fe:	bf00      	nop
 8007600:	080075e5 	.word	0x080075e5
 8007604:	080075df 	.word	0x080075df
 8007608:	080075e5 	.word	0x080075e5
 800760c:	08007611 	.word	0x08007611
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007610:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8007614:	f47f aea0 	bne.w	8007358 <HAL_DMA_Init+0x118>
 8007618:	e7e4      	b.n	80075e4 <HAL_DMA_Init+0x3a4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800761a:	4a35      	ldr	r2, [pc, #212]	; (80076f0 <HAL_DMA_Init+0x4b0>)
 800761c:	4835      	ldr	r0, [pc, #212]	; (80076f4 <HAL_DMA_Init+0x4b4>)
 800761e:	493b      	ldr	r1, [pc, #236]	; (800770c <HAL_DMA_Init+0x4cc>)
 8007620:	4283      	cmp	r3, r0
 8007622:	bf18      	it	ne
 8007624:	4293      	cmpne	r3, r2
 8007626:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800762a:	bf0c      	ite	eq
 800762c:	2201      	moveq	r2, #1
 800762e:	2200      	movne	r2, #0
 8007630:	428b      	cmp	r3, r1
 8007632:	bf08      	it	eq
 8007634:	f042 0201 	orreq.w	r2, r2, #1
 8007638:	3128      	adds	r1, #40	; 0x28
 800763a:	4283      	cmp	r3, r0
 800763c:	bf08      	it	eq
 800763e:	f042 0201 	orreq.w	r2, r2, #1
 8007642:	3028      	adds	r0, #40	; 0x28
 8007644:	428b      	cmp	r3, r1
 8007646:	bf08      	it	eq
 8007648:	f042 0201 	orreq.w	r2, r2, #1
 800764c:	3128      	adds	r1, #40	; 0x28
 800764e:	4283      	cmp	r3, r0
 8007650:	bf08      	it	eq
 8007652:	f042 0201 	orreq.w	r2, r2, #1
 8007656:	428b      	cmp	r3, r1
 8007658:	bf08      	it	eq
 800765a:	f042 0201 	orreq.w	r2, r2, #1
 800765e:	b912      	cbnz	r2, 8007666 <HAL_DMA_Init+0x426>
 8007660:	4a25      	ldr	r2, [pc, #148]	; (80076f8 <HAL_DMA_Init+0x4b8>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d138      	bne.n	80076d8 <HAL_DMA_Init+0x498>
    __HAL_UNLOCK(hdma);
 8007666:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8007668:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800766a:	4d29      	ldr	r5, [pc, #164]	; (8007710 <HAL_DMA_Init+0x4d0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800766c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8007670:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007674:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007676:	4015      	ands	r5, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007678:	68a2      	ldr	r2, [r4, #8]
 800767a:	2a40      	cmp	r2, #64	; 0x40
 800767c:	d02a      	beq.n	80076d4 <HAL_DMA_Init+0x494>
 800767e:	2a80      	cmp	r2, #128	; 0x80
 8007680:	bf0c      	ite	eq
 8007682:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 8007686:	2000      	movne	r0, #0
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007688:	6a26      	ldr	r6, [r4, #32]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800768a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800768e:	08d2      	lsrs	r2, r2, #3
 8007690:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007694:	6961      	ldr	r1, [r4, #20]
 8007696:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800769a:	69a1      	ldr	r1, [r4, #24]
 800769c:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80076a0:	69e1      	ldr	r1, [r4, #28]
 80076a2:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80076a6:	491b      	ldr	r1, [pc, #108]	; (8007714 <HAL_DMA_Init+0x4d4>)
 80076a8:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 80076ac:	4419      	add	r1, r3
 80076ae:	432a      	orrs	r2, r5
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80076b0:	4302      	orrs	r2, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80076b2:	4819      	ldr	r0, [pc, #100]	; (8007718 <HAL_DMA_Init+0x4d8>)
 80076b4:	fba0 0101 	umull	r0, r1, r0, r1
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80076b8:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80076ba:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80076bc:	090b      	lsrs	r3, r1, #4
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80076c2:	f7ff fcd7 	bl	8007074 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80076c6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80076c8:	2301      	movs	r3, #1
 80076ca:	f002 021f 	and.w	r2, r2, #31
 80076ce:	4093      	lsls	r3, r2
 80076d0:	6043      	str	r3, [r0, #4]
 80076d2:	e64b      	b.n	800736c <HAL_DMA_Init+0x12c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80076d4:	2010      	movs	r0, #16
 80076d6:	e7d7      	b.n	8007688 <HAL_DMA_Init+0x448>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80076d8:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80076da:	2303      	movs	r3, #3
    return HAL_ERROR;
 80076dc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80076de:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80076e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80076e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e6:	bf00      	nop
 80076e8:	c3c0003f 	.word	0xc3c0003f
 80076ec:	ffff0000 	.word	0xffff0000
 80076f0:	58025408 	.word	0x58025408
 80076f4:	5802541c 	.word	0x5802541c
 80076f8:	58025494 	.word	0x58025494
 80076fc:	1000823f 	.word	0x1000823f
 8007700:	40020940 	.word	0x40020940
 8007704:	1600963f 	.word	0x1600963f
 8007708:	58025940 	.word	0x58025940
 800770c:	58025430 	.word	0x58025430
 8007710:	fffe000f 	.word	0xfffe000f
 8007714:	a7fdabf8 	.word	0xa7fdabf8
 8007718:	cccccccd 	.word	0xcccccccd

0800771c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800771c:	2800      	cmp	r0, #0
 800771e:	f000 8177 	beq.w	8007a10 <HAL_DMA_Start_IT+0x2f4>
 8007722:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8007724:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8007728:	2801      	cmp	r0, #1
 800772a:	f000 8173 	beq.w	8007a14 <HAL_DMA_Start_IT+0x2f8>
 800772e:	2001      	movs	r0, #1
{
 8007730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 8007734:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8007738:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800773c:	4284      	cmp	r4, r0
 800773e:	d008      	beq.n	8007752 <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007740:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8007744:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007746:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800774a:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 800774e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8007752:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8007754:	f8dc 4000 	ldr.w	r4, [ip]
 8007758:	4d53      	ldr	r5, [pc, #332]	; (80078a8 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800775a:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800775e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8007760:	4e52      	ldr	r6, [pc, #328]	; (80078ac <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007762:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8007766:	4852      	ldr	r0, [pc, #328]	; (80078b0 <HAL_DMA_Start_IT+0x194>)
 8007768:	42ac      	cmp	r4, r5
 800776a:	bf18      	it	ne
 800776c:	4284      	cmpne	r4, r0
 800776e:	f105 0518 	add.w	r5, r5, #24
 8007772:	bf0c      	ite	eq
 8007774:	2001      	moveq	r0, #1
 8007776:	2000      	movne	r0, #0
 8007778:	42ac      	cmp	r4, r5
 800777a:	bf08      	it	eq
 800777c:	f040 0001 	orreq.w	r0, r0, #1
 8007780:	3518      	adds	r5, #24
 8007782:	42ac      	cmp	r4, r5
 8007784:	bf08      	it	eq
 8007786:	f040 0001 	orreq.w	r0, r0, #1
 800778a:	3518      	adds	r5, #24
 800778c:	42ac      	cmp	r4, r5
 800778e:	bf08      	it	eq
 8007790:	f040 0001 	orreq.w	r0, r0, #1
 8007794:	3518      	adds	r5, #24
 8007796:	42ac      	cmp	r4, r5
 8007798:	bf08      	it	eq
 800779a:	f040 0001 	orreq.w	r0, r0, #1
 800779e:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80077a2:	42ac      	cmp	r4, r5
 80077a4:	bf08      	it	eq
 80077a6:	f040 0001 	orreq.w	r0, r0, #1
 80077aa:	3518      	adds	r5, #24
 80077ac:	42ac      	cmp	r4, r5
 80077ae:	bf08      	it	eq
 80077b0:	f040 0001 	orreq.w	r0, r0, #1
 80077b4:	3518      	adds	r5, #24
 80077b6:	42ac      	cmp	r4, r5
 80077b8:	bf08      	it	eq
 80077ba:	f040 0001 	orreq.w	r0, r0, #1
 80077be:	3518      	adds	r5, #24
 80077c0:	42ac      	cmp	r4, r5
 80077c2:	bf08      	it	eq
 80077c4:	f040 0001 	orreq.w	r0, r0, #1
 80077c8:	3518      	adds	r5, #24
 80077ca:	42ac      	cmp	r4, r5
 80077cc:	bf08      	it	eq
 80077ce:	f040 0001 	orreq.w	r0, r0, #1
 80077d2:	3518      	adds	r5, #24
 80077d4:	42ac      	cmp	r4, r5
 80077d6:	bf08      	it	eq
 80077d8:	f040 0001 	orreq.w	r0, r0, #1
 80077dc:	3518      	adds	r5, #24
 80077de:	42ac      	cmp	r4, r5
 80077e0:	bf08      	it	eq
 80077e2:	f040 0001 	orreq.w	r0, r0, #1
 80077e6:	3518      	adds	r5, #24
 80077e8:	42ac      	cmp	r4, r5
 80077ea:	bf14      	ite	ne
 80077ec:	4681      	movne	r9, r0
 80077ee:	f040 0901 	orreq.w	r9, r0, #1
 80077f2:	f5a5 6592 	sub.w	r5, r5, #1168	; 0x490
 80077f6:	42ac      	cmp	r4, r5
 80077f8:	bf18      	it	ne
 80077fa:	42b4      	cmpne	r4, r6
 80077fc:	bf0c      	ite	eq
 80077fe:	2501      	moveq	r5, #1
 8007800:	2500      	movne	r5, #0
 8007802:	d002      	beq.n	800780a <HAL_DMA_Start_IT+0xee>
 8007804:	f1b9 0f00 	cmp.w	r9, #0
 8007808:	d054      	beq.n	80078b4 <HAL_DMA_Start_IT+0x198>
 800780a:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800780c:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8007810:	f026 0601 	bic.w	r6, r6, #1
 8007814:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007816:	2d00      	cmp	r5, #0
 8007818:	d078      	beq.n	800790c <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800781a:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800781e:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8007820:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8007824:	b117      	cbz	r7, 800782c <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007826:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 800782a:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800782c:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 8007830:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8007834:	f006 081f 	and.w	r8, r6, #31
 8007838:	fa0e fe08 	lsl.w	lr, lr, r8
 800783c:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007840:	6826      	ldr	r6, [r4, #0]
 8007842:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8007846:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007848:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800784a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800784e:	2b40      	cmp	r3, #64	; 0x40
 8007850:	f000 80e2 	beq.w	8007a18 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007854:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007856:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007858:	b91d      	cbnz	r5, 8007862 <HAL_DMA_Start_IT+0x146>
 800785a:	f1b9 0f00 	cmp.w	r9, #0
 800785e:	f000 80e1 	beq.w	8007a24 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	f023 031e 	bic.w	r3, r3, #30
 8007868:	f043 0316 	orr.w	r3, r3, #22
 800786c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800786e:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8007872:	b11b      	cbz	r3, 800787c <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	f043 0308 	orr.w	r3, r3, #8
 800787a:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800787c:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	03d2      	lsls	r2, r2, #15
 8007884:	d503      	bpl.n	800788e <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800788c:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800788e:	b11f      	cbz	r7, 8007898 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007896:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 8007898:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800789a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800789c:	f043 0301 	orr.w	r3, r3, #1
 80078a0:	6023      	str	r3, [r4, #0]
}
 80078a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a6:	bf00      	nop
 80078a8:	40020058 	.word	0x40020058
 80078ac:	40020010 	.word	0x40020010
 80078b0:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80078b4:	4f61      	ldr	r7, [pc, #388]	; (8007a3c <HAL_DMA_Start_IT+0x320>)
 80078b6:	4e62      	ldr	r6, [pc, #392]	; (8007a40 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078b8:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80078bc:	42b4      	cmp	r4, r6
 80078be:	bf18      	it	ne
 80078c0:	42bc      	cmpne	r4, r7
 80078c2:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80078c6:	bf0c      	ite	eq
 80078c8:	2701      	moveq	r7, #1
 80078ca:	2700      	movne	r7, #0
 80078cc:	42b4      	cmp	r4, r6
 80078ce:	bf08      	it	eq
 80078d0:	f047 0701 	orreq.w	r7, r7, #1
 80078d4:	3614      	adds	r6, #20
 80078d6:	42b4      	cmp	r4, r6
 80078d8:	bf08      	it	eq
 80078da:	f047 0701 	orreq.w	r7, r7, #1
 80078de:	3614      	adds	r6, #20
 80078e0:	42b4      	cmp	r4, r6
 80078e2:	bf08      	it	eq
 80078e4:	f047 0701 	orreq.w	r7, r7, #1
 80078e8:	3614      	adds	r6, #20
 80078ea:	42b4      	cmp	r4, r6
 80078ec:	bf08      	it	eq
 80078ee:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 80078f2:	6826      	ldr	r6, [r4, #0]
 80078f4:	f026 0601 	bic.w	r6, r6, #1
 80078f8:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80078fa:	4e52      	ldr	r6, [pc, #328]	; (8007a44 <HAL_DMA_Start_IT+0x328>)
 80078fc:	42b4      	cmp	r4, r6
 80078fe:	bf08      	it	eq
 8007900:	f047 0701 	orreq.w	r7, r7, #1
 8007904:	b917      	cbnz	r7, 800790c <HAL_DMA_Start_IT+0x1f0>
 8007906:	4f50      	ldr	r7, [pc, #320]	; (8007a48 <HAL_DMA_Start_IT+0x32c>)
 8007908:	42bc      	cmp	r4, r7
 800790a:	d10b      	bne.n	8007924 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800790c:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8007910:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8007912:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8007916:	b117      	cbz	r7, 800791e <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007918:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 800791c:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800791e:	f1b9 0f00 	cmp.w	r9, #0
 8007922:	d183      	bne.n	800782c <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007924:	4f46      	ldr	r7, [pc, #280]	; (8007a40 <HAL_DMA_Start_IT+0x324>)
 8007926:	f8df e114 	ldr.w	lr, [pc, #276]	; 8007a3c <HAL_DMA_Start_IT+0x320>
 800792a:	4574      	cmp	r4, lr
 800792c:	bf18      	it	ne
 800792e:	42bc      	cmpne	r4, r7
 8007930:	f10e 0e14 	add.w	lr, lr, #20
 8007934:	bf0c      	ite	eq
 8007936:	2701      	moveq	r7, #1
 8007938:	2700      	movne	r7, #0
 800793a:	4574      	cmp	r4, lr
 800793c:	bf08      	it	eq
 800793e:	f047 0701 	orreq.w	r7, r7, #1
 8007942:	f10e 0e14 	add.w	lr, lr, #20
 8007946:	4574      	cmp	r4, lr
 8007948:	bf08      	it	eq
 800794a:	f047 0701 	orreq.w	r7, r7, #1
 800794e:	f10e 0e14 	add.w	lr, lr, #20
 8007952:	4574      	cmp	r4, lr
 8007954:	bf08      	it	eq
 8007956:	f047 0701 	orreq.w	r7, r7, #1
 800795a:	f10e 0e14 	add.w	lr, lr, #20
 800795e:	4574      	cmp	r4, lr
 8007960:	bf08      	it	eq
 8007962:	f047 0701 	orreq.w	r7, r7, #1
 8007966:	f10e 0e14 	add.w	lr, lr, #20
 800796a:	4574      	cmp	r4, lr
 800796c:	bf08      	it	eq
 800796e:	f047 0701 	orreq.w	r7, r7, #1
 8007972:	b917      	cbnz	r7, 800797a <HAL_DMA_Start_IT+0x25e>
 8007974:	4f34      	ldr	r7, [pc, #208]	; (8007a48 <HAL_DMA_Start_IT+0x32c>)
 8007976:	42bc      	cmp	r4, r7
 8007978:	d154      	bne.n	8007a24 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800797a:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800797e:	2701      	movs	r7, #1
 8007980:	f000 0e1f 	and.w	lr, r0, #31
 8007984:	fa07 f70e 	lsl.w	r7, r7, lr
 8007988:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800798c:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800798e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8007992:	2b40      	cmp	r3, #64	; 0x40
 8007994:	d043      	beq.n	8007a1e <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007996:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007998:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	f023 030e 	bic.w	r3, r3, #14
 80079a0:	f043 030a 	orr.w	r3, r3, #10
 80079a4:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80079a6:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d02d      	beq.n	8007a0a <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	f043 0304 	orr.w	r3, r3, #4
 80079b4:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80079b6:	4b21      	ldr	r3, [pc, #132]	; (8007a3c <HAL_DMA_Start_IT+0x320>)
 80079b8:	4a21      	ldr	r2, [pc, #132]	; (8007a40 <HAL_DMA_Start_IT+0x324>)
 80079ba:	4294      	cmp	r4, r2
 80079bc:	bf18      	it	ne
 80079be:	429c      	cmpne	r4, r3
 80079c0:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80079c4:	bf0c      	ite	eq
 80079c6:	2301      	moveq	r3, #1
 80079c8:	2300      	movne	r3, #0
 80079ca:	4294      	cmp	r4, r2
 80079cc:	bf08      	it	eq
 80079ce:	f043 0301 	orreq.w	r3, r3, #1
 80079d2:	3214      	adds	r2, #20
 80079d4:	4294      	cmp	r4, r2
 80079d6:	bf08      	it	eq
 80079d8:	f043 0301 	orreq.w	r3, r3, #1
 80079dc:	3214      	adds	r2, #20
 80079de:	4294      	cmp	r4, r2
 80079e0:	bf08      	it	eq
 80079e2:	f043 0301 	orreq.w	r3, r3, #1
 80079e6:	3214      	adds	r2, #20
 80079e8:	4294      	cmp	r4, r2
 80079ea:	bf08      	it	eq
 80079ec:	f043 0301 	orreq.w	r3, r3, #1
 80079f0:	3214      	adds	r2, #20
 80079f2:	4294      	cmp	r4, r2
 80079f4:	bf08      	it	eq
 80079f6:	f043 0301 	orreq.w	r3, r3, #1
 80079fa:	3214      	adds	r2, #20
 80079fc:	4294      	cmp	r4, r2
 80079fe:	bf08      	it	eq
 8007a00:	f043 0301 	orreq.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f43f af47 	beq.w	8007898 <HAL_DMA_Start_IT+0x17c>
 8007a0a:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8007a0e:	e735      	b.n	800787c <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 8007a10:	2001      	movs	r0, #1
 8007a12:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8007a14:	2002      	movs	r0, #2
}
 8007a16:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007a18:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007a1a:	60e1      	str	r1, [r4, #12]
 8007a1c:	e71c      	b.n	8007858 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007a1e:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007a20:	60e1      	str	r1, [r4, #12]
 8007a22:	e7ba      	b.n	800799a <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	f023 030e 	bic.w	r3, r3, #14
 8007a2a:	f043 030a 	orr.w	r3, r3, #10
 8007a2e:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8007a30:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1ba      	bne.n	80079ae <HAL_DMA_Start_IT+0x292>
 8007a38:	e7bd      	b.n	80079b6 <HAL_DMA_Start_IT+0x29a>
 8007a3a:	bf00      	nop
 8007a3c:	5802541c 	.word	0x5802541c
 8007a40:	58025408 	.word	0x58025408
 8007a44:	58025480 	.word	0x58025480
 8007a48:	58025494 	.word	0x58025494

08007a4c <HAL_DMA_Abort>:
{
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8007a50:	f7fd ff3e 	bl	80058d0 <HAL_GetTick>
  if(hdma == NULL)
 8007a54:	2d00      	cmp	r5, #0
 8007a56:	f000 8124 	beq.w	8007ca2 <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a5a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	f040 80dd 	bne.w	8007c1e <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a64:	682c      	ldr	r4, [r5, #0]
 8007a66:	4606      	mov	r6, r0
 8007a68:	4b8f      	ldr	r3, [pc, #572]	; (8007ca8 <HAL_DMA_Abort+0x25c>)
 8007a6a:	4890      	ldr	r0, [pc, #576]	; (8007cac <HAL_DMA_Abort+0x260>)
 8007a6c:	4a90      	ldr	r2, [pc, #576]	; (8007cb0 <HAL_DMA_Abort+0x264>)
 8007a6e:	4284      	cmp	r4, r0
 8007a70:	bf18      	it	ne
 8007a72:	429c      	cmpne	r4, r3
 8007a74:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8007a78:	498e      	ldr	r1, [pc, #568]	; (8007cb4 <HAL_DMA_Abort+0x268>)
 8007a7a:	bf0c      	ite	eq
 8007a7c:	2301      	moveq	r3, #1
 8007a7e:	2300      	movne	r3, #0
 8007a80:	4284      	cmp	r4, r0
 8007a82:	bf08      	it	eq
 8007a84:	f043 0301 	orreq.w	r3, r3, #1
 8007a88:	3018      	adds	r0, #24
 8007a8a:	4284      	cmp	r4, r0
 8007a8c:	bf08      	it	eq
 8007a8e:	f043 0301 	orreq.w	r3, r3, #1
 8007a92:	3018      	adds	r0, #24
 8007a94:	4284      	cmp	r4, r0
 8007a96:	bf08      	it	eq
 8007a98:	f043 0301 	orreq.w	r3, r3, #1
 8007a9c:	3018      	adds	r0, #24
 8007a9e:	4284      	cmp	r4, r0
 8007aa0:	bf08      	it	eq
 8007aa2:	f043 0301 	orreq.w	r3, r3, #1
 8007aa6:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8007aaa:	4284      	cmp	r4, r0
 8007aac:	bf08      	it	eq
 8007aae:	f043 0301 	orreq.w	r3, r3, #1
 8007ab2:	3018      	adds	r0, #24
 8007ab4:	4284      	cmp	r4, r0
 8007ab6:	bf08      	it	eq
 8007ab8:	f043 0301 	orreq.w	r3, r3, #1
 8007abc:	3018      	adds	r0, #24
 8007abe:	4284      	cmp	r4, r0
 8007ac0:	bf08      	it	eq
 8007ac2:	f043 0301 	orreq.w	r3, r3, #1
 8007ac6:	3018      	adds	r0, #24
 8007ac8:	4284      	cmp	r4, r0
 8007aca:	bf08      	it	eq
 8007acc:	f043 0301 	orreq.w	r3, r3, #1
 8007ad0:	3018      	adds	r0, #24
 8007ad2:	4284      	cmp	r4, r0
 8007ad4:	bf08      	it	eq
 8007ad6:	f043 0301 	orreq.w	r3, r3, #1
 8007ada:	3018      	adds	r0, #24
 8007adc:	4284      	cmp	r4, r0
 8007ade:	bf08      	it	eq
 8007ae0:	f043 0301 	orreq.w	r3, r3, #1
 8007ae4:	3018      	adds	r0, #24
 8007ae6:	4284      	cmp	r4, r0
 8007ae8:	bf08      	it	eq
 8007aea:	f043 0301 	orreq.w	r3, r3, #1
 8007aee:	3018      	adds	r0, #24
 8007af0:	4284      	cmp	r4, r0
 8007af2:	bf08      	it	eq
 8007af4:	f043 0301 	orreq.w	r3, r3, #1
 8007af8:	428c      	cmp	r4, r1
 8007afa:	bf18      	it	ne
 8007afc:	4294      	cmpne	r4, r2
 8007afe:	bf0c      	ite	eq
 8007b00:	2201      	moveq	r2, #1
 8007b02:	2200      	movne	r2, #0
 8007b04:	d002      	beq.n	8007b0c <HAL_DMA_Abort+0xc0>
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 8090 	beq.w	8007c2c <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007b0c:	6821      	ldr	r1, [r4, #0]
 8007b0e:	f021 011e 	bic.w	r1, r1, #30
 8007b12:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007b14:	6961      	ldr	r1, [r4, #20]
 8007b16:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007b1a:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b1c:	2a00      	cmp	r2, #0
 8007b1e:	f000 80b0 	beq.w	8007c82 <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007b22:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8007b24:	6813      	ldr	r3, [r2, #0]
 8007b26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b2a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	f023 0301 	bic.w	r3, r3, #1
 8007b32:	6023      	str	r3, [r4, #0]
 8007b34:	e005      	b.n	8007b42 <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b36:	f7fd fecb 	bl	80058d0 <HAL_GetTick>
 8007b3a:	1b83      	subs	r3, r0, r6
 8007b3c:	2b05      	cmp	r3, #5
 8007b3e:	f200 80a6 	bhi.w	8007c8e <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	07db      	lsls	r3, r3, #31
 8007b46:	d4f6      	bmi.n	8007b36 <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b48:	682a      	ldr	r2, [r5, #0]
 8007b4a:	4b57      	ldr	r3, [pc, #348]	; (8007ca8 <HAL_DMA_Abort+0x25c>)
 8007b4c:	4857      	ldr	r0, [pc, #348]	; (8007cac <HAL_DMA_Abort+0x260>)
 8007b4e:	495a      	ldr	r1, [pc, #360]	; (8007cb8 <HAL_DMA_Abort+0x26c>)
 8007b50:	4282      	cmp	r2, r0
 8007b52:	bf18      	it	ne
 8007b54:	429a      	cmpne	r2, r3
 8007b56:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8007b5a:	bf0c      	ite	eq
 8007b5c:	2301      	moveq	r3, #1
 8007b5e:	2300      	movne	r3, #0
 8007b60:	428a      	cmp	r2, r1
 8007b62:	bf08      	it	eq
 8007b64:	f043 0301 	orreq.w	r3, r3, #1
 8007b68:	3130      	adds	r1, #48	; 0x30
 8007b6a:	4282      	cmp	r2, r0
 8007b6c:	bf08      	it	eq
 8007b6e:	f043 0301 	orreq.w	r3, r3, #1
 8007b72:	3030      	adds	r0, #48	; 0x30
 8007b74:	428a      	cmp	r2, r1
 8007b76:	bf08      	it	eq
 8007b78:	f043 0301 	orreq.w	r3, r3, #1
 8007b7c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8007b80:	4282      	cmp	r2, r0
 8007b82:	bf08      	it	eq
 8007b84:	f043 0301 	orreq.w	r3, r3, #1
 8007b88:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8007b8c:	428a      	cmp	r2, r1
 8007b8e:	bf08      	it	eq
 8007b90:	f043 0301 	orreq.w	r3, r3, #1
 8007b94:	3130      	adds	r1, #48	; 0x30
 8007b96:	4282      	cmp	r2, r0
 8007b98:	bf08      	it	eq
 8007b9a:	f043 0301 	orreq.w	r3, r3, #1
 8007b9e:	3030      	adds	r0, #48	; 0x30
 8007ba0:	428a      	cmp	r2, r1
 8007ba2:	bf08      	it	eq
 8007ba4:	f043 0301 	orreq.w	r3, r3, #1
 8007ba8:	3130      	adds	r1, #48	; 0x30
 8007baa:	4282      	cmp	r2, r0
 8007bac:	bf08      	it	eq
 8007bae:	f043 0301 	orreq.w	r3, r3, #1
 8007bb2:	3030      	adds	r0, #48	; 0x30
 8007bb4:	428a      	cmp	r2, r1
 8007bb6:	bf08      	it	eq
 8007bb8:	f043 0301 	orreq.w	r3, r3, #1
 8007bbc:	3130      	adds	r1, #48	; 0x30
 8007bbe:	4282      	cmp	r2, r0
 8007bc0:	bf08      	it	eq
 8007bc2:	f043 0301 	orreq.w	r3, r3, #1
 8007bc6:	428a      	cmp	r2, r1
 8007bc8:	bf08      	it	eq
 8007bca:	f043 0301 	orreq.w	r3, r3, #1
 8007bce:	3118      	adds	r1, #24
 8007bd0:	428a      	cmp	r2, r1
 8007bd2:	bf08      	it	eq
 8007bd4:	f043 0301 	orreq.w	r3, r3, #1
 8007bd8:	b933      	cbnz	r3, 8007be8 <HAL_DMA_Abort+0x19c>
 8007bda:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 8007bde:	4b35      	ldr	r3, [pc, #212]	; (8007cb4 <HAL_DMA_Abort+0x268>)
 8007be0:	429a      	cmp	r2, r3
 8007be2:	bf18      	it	ne
 8007be4:	428a      	cmpne	r2, r1
 8007be6:	d16f      	bne.n	8007cc8 <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007be8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8007bea:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bec:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007bee:	f002 021f 	and.w	r2, r2, #31
 8007bf2:	4093      	lsls	r3, r2
 8007bf4:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 8007bf6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007bf8:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 8007bfc:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8007bfe:	b133      	cbz	r3, 8007c0e <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007c00:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c02:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007c06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c0a:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c0c:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8007c0e:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8007c10:	2201      	movs	r2, #1
  return HAL_OK;
 8007c12:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8007c14:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8007c18:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8007c1c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c1e:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8007c20:	2300      	movs	r3, #0
    return HAL_ERROR;
 8007c22:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c24:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8007c26:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8007c2a:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007c2c:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c2e:	4923      	ldr	r1, [pc, #140]	; (8007cbc <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007c30:	f022 020e 	bic.w	r2, r2, #14
 8007c34:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c36:	4a22      	ldr	r2, [pc, #136]	; (8007cc0 <HAL_DMA_Abort+0x274>)
 8007c38:	428c      	cmp	r4, r1
 8007c3a:	bf18      	it	ne
 8007c3c:	4294      	cmpne	r4, r2
 8007c3e:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8007c42:	bf0c      	ite	eq
 8007c44:	2201      	moveq	r2, #1
 8007c46:	2200      	movne	r2, #0
 8007c48:	428c      	cmp	r4, r1
 8007c4a:	bf08      	it	eq
 8007c4c:	f042 0201 	orreq.w	r2, r2, #1
 8007c50:	3114      	adds	r1, #20
 8007c52:	428c      	cmp	r4, r1
 8007c54:	bf08      	it	eq
 8007c56:	f042 0201 	orreq.w	r2, r2, #1
 8007c5a:	3114      	adds	r1, #20
 8007c5c:	428c      	cmp	r4, r1
 8007c5e:	bf08      	it	eq
 8007c60:	f042 0201 	orreq.w	r2, r2, #1
 8007c64:	3114      	adds	r1, #20
 8007c66:	428c      	cmp	r4, r1
 8007c68:	bf08      	it	eq
 8007c6a:	f042 0201 	orreq.w	r2, r2, #1
 8007c6e:	3114      	adds	r1, #20
 8007c70:	428c      	cmp	r4, r1
 8007c72:	bf08      	it	eq
 8007c74:	f042 0201 	orreq.w	r2, r2, #1
 8007c78:	b91a      	cbnz	r2, 8007c82 <HAL_DMA_Abort+0x236>
 8007c7a:	4a12      	ldr	r2, [pc, #72]	; (8007cc4 <HAL_DMA_Abort+0x278>)
 8007c7c:	4294      	cmp	r4, r2
 8007c7e:	f47f af55 	bne.w	8007b2c <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c82:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8007c84:	680a      	ldr	r2, [r1, #0]
 8007c86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c8a:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8007c8c:	e74e      	b.n	8007b2c <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007c8e:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8007c90:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 8007c92:	2300      	movs	r3, #0
        return HAL_ERROR;
 8007c94:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007c96:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8007c98:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8007c9c:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
 8007ca0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8007ca2:	2001      	movs	r0, #1
}
 8007ca4:	bd70      	pop	{r4, r5, r6, pc}
 8007ca6:	bf00      	nop
 8007ca8:	40020058 	.word	0x40020058
 8007cac:	40020040 	.word	0x40020040
 8007cb0:	40020010 	.word	0x40020010
 8007cb4:	40020028 	.word	0x40020028
 8007cb8:	40020070 	.word	0x40020070
 8007cbc:	58025408 	.word	0x58025408
 8007cc0:	5802541c 	.word	0x5802541c
 8007cc4:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007cc8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8007cca:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ccc:	4b16      	ldr	r3, [pc, #88]	; (8007d28 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007cce:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007cd2:	4c16      	ldr	r4, [pc, #88]	; (8007d2c <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007cd4:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007cd6:	42a2      	cmp	r2, r4
 8007cd8:	bf18      	it	ne
 8007cda:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007cde:	bf0c      	ite	eq
 8007ce0:	2301      	moveq	r3, #1
 8007ce2:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007ce4:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ce6:	4812      	ldr	r0, [pc, #72]	; (8007d30 <HAL_DMA_Abort+0x2e4>)
 8007ce8:	4912      	ldr	r1, [pc, #72]	; (8007d34 <HAL_DMA_Abort+0x2e8>)
 8007cea:	4282      	cmp	r2, r0
 8007cec:	bf08      	it	eq
 8007cee:	f043 0301 	orreq.w	r3, r3, #1
 8007cf2:	3028      	adds	r0, #40	; 0x28
 8007cf4:	428a      	cmp	r2, r1
 8007cf6:	bf08      	it	eq
 8007cf8:	f043 0301 	orreq.w	r3, r3, #1
 8007cfc:	3128      	adds	r1, #40	; 0x28
 8007cfe:	4282      	cmp	r2, r0
 8007d00:	bf08      	it	eq
 8007d02:	f043 0301 	orreq.w	r3, r3, #1
 8007d06:	428a      	cmp	r2, r1
 8007d08:	bf08      	it	eq
 8007d0a:	f043 0301 	orreq.w	r3, r3, #1
 8007d0e:	3114      	adds	r1, #20
 8007d10:	428a      	cmp	r2, r1
 8007d12:	bf08      	it	eq
 8007d14:	f043 0301 	orreq.w	r3, r3, #1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f47f af6c 	bne.w	8007bf6 <HAL_DMA_Abort+0x1aa>
 8007d1e:	4b06      	ldr	r3, [pc, #24]	; (8007d38 <HAL_DMA_Abort+0x2ec>)
 8007d20:	429a      	cmp	r2, r3
 8007d22:	f43f af68 	beq.w	8007bf6 <HAL_DMA_Abort+0x1aa>
 8007d26:	e772      	b.n	8007c0e <HAL_DMA_Abort+0x1c2>
 8007d28:	5802541c 	.word	0x5802541c
 8007d2c:	58025408 	.word	0x58025408
 8007d30:	58025430 	.word	0x58025430
 8007d34:	58025444 	.word	0x58025444
 8007d38:	58025494 	.word	0x58025494

08007d3c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d05f      	beq.n	8007e00 <HAL_DMA_Abort_IT+0xc4>
{
 8007d40:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d42:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8007d46:	4603      	mov	r3, r0
 8007d48:	2a02      	cmp	r2, #2
 8007d4a:	d155      	bne.n	8007df8 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d4c:	6801      	ldr	r1, [r0, #0]
 8007d4e:	4a57      	ldr	r2, [pc, #348]	; (8007eac <HAL_DMA_Abort_IT+0x170>)
 8007d50:	4291      	cmp	r1, r2
 8007d52:	d048      	beq.n	8007de6 <HAL_DMA_Abort_IT+0xaa>
 8007d54:	3218      	adds	r2, #24
 8007d56:	4291      	cmp	r1, r2
 8007d58:	d045      	beq.n	8007de6 <HAL_DMA_Abort_IT+0xaa>
 8007d5a:	3230      	adds	r2, #48	; 0x30
 8007d5c:	4c54      	ldr	r4, [pc, #336]	; (8007eb0 <HAL_DMA_Abort_IT+0x174>)
 8007d5e:	4855      	ldr	r0, [pc, #340]	; (8007eb4 <HAL_DMA_Abort_IT+0x178>)
 8007d60:	42a1      	cmp	r1, r4
 8007d62:	bf18      	it	ne
 8007d64:	4291      	cmpne	r1, r2
 8007d66:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8007d6a:	bf0c      	ite	eq
 8007d6c:	2201      	moveq	r2, #1
 8007d6e:	2200      	movne	r2, #0
 8007d70:	4281      	cmp	r1, r0
 8007d72:	bf08      	it	eq
 8007d74:	f042 0201 	orreq.w	r2, r2, #1
 8007d78:	3030      	adds	r0, #48	; 0x30
 8007d7a:	42a1      	cmp	r1, r4
 8007d7c:	bf08      	it	eq
 8007d7e:	f042 0201 	orreq.w	r2, r2, #1
 8007d82:	3430      	adds	r4, #48	; 0x30
 8007d84:	4281      	cmp	r1, r0
 8007d86:	bf08      	it	eq
 8007d88:	f042 0201 	orreq.w	r2, r2, #1
 8007d8c:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8007d90:	42a1      	cmp	r1, r4
 8007d92:	bf08      	it	eq
 8007d94:	f042 0201 	orreq.w	r2, r2, #1
 8007d98:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8007d9c:	4281      	cmp	r1, r0
 8007d9e:	bf08      	it	eq
 8007da0:	f042 0201 	orreq.w	r2, r2, #1
 8007da4:	3030      	adds	r0, #48	; 0x30
 8007da6:	42a1      	cmp	r1, r4
 8007da8:	bf08      	it	eq
 8007daa:	f042 0201 	orreq.w	r2, r2, #1
 8007dae:	3430      	adds	r4, #48	; 0x30
 8007db0:	4281      	cmp	r1, r0
 8007db2:	bf08      	it	eq
 8007db4:	f042 0201 	orreq.w	r2, r2, #1
 8007db8:	3030      	adds	r0, #48	; 0x30
 8007dba:	42a1      	cmp	r1, r4
 8007dbc:	bf08      	it	eq
 8007dbe:	f042 0201 	orreq.w	r2, r2, #1
 8007dc2:	3430      	adds	r4, #48	; 0x30
 8007dc4:	4281      	cmp	r1, r0
 8007dc6:	bf08      	it	eq
 8007dc8:	f042 0201 	orreq.w	r2, r2, #1
 8007dcc:	3030      	adds	r0, #48	; 0x30
 8007dce:	42a1      	cmp	r1, r4
 8007dd0:	bf08      	it	eq
 8007dd2:	f042 0201 	orreq.w	r2, r2, #1
 8007dd6:	4281      	cmp	r1, r0
 8007dd8:	bf08      	it	eq
 8007dda:	f042 0201 	orreq.w	r2, r2, #1
 8007dde:	b912      	cbnz	r2, 8007de6 <HAL_DMA_Abort_IT+0xaa>
 8007de0:	4a35      	ldr	r2, [pc, #212]	; (8007eb8 <HAL_DMA_Abort_IT+0x17c>)
 8007de2:	4291      	cmp	r1, r2
 8007de4:	d10e      	bne.n	8007e04 <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8007de6:	2204      	movs	r2, #4
  return HAL_OK;
 8007de8:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8007dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8007dee:	680b      	ldr	r3, [r1, #0]
 8007df0:	f023 0301 	bic.w	r3, r3, #1
 8007df4:	600b      	str	r3, [r1, #0]
}
 8007df6:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007df8:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8007dfa:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007dfc:	655a      	str	r2, [r3, #84]	; 0x54
}
 8007dfe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007e00:	2001      	movs	r0, #1
}
 8007e02:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e04:	4a2d      	ldr	r2, [pc, #180]	; (8007ebc <HAL_DMA_Abort_IT+0x180>)
 8007e06:	4d2e      	ldr	r5, [pc, #184]	; (8007ec0 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007e08:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e0a:	42a9      	cmp	r1, r5
 8007e0c:	bf18      	it	ne
 8007e0e:	4291      	cmpne	r1, r2
 8007e10:	4c2c      	ldr	r4, [pc, #176]	; (8007ec4 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007e12:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e16:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8007e1a:	bf0c      	ite	eq
 8007e1c:	2201      	moveq	r2, #1
 8007e1e:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007e20:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e22:	42a1      	cmp	r1, r4
 8007e24:	bf08      	it	eq
 8007e26:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8007e2a:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e2c:	3428      	adds	r4, #40	; 0x28
 8007e2e:	42a9      	cmp	r1, r5
 8007e30:	bf08      	it	eq
 8007e32:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8007e36:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e3a:	42a1      	cmp	r1, r4
 8007e3c:	bf08      	it	eq
 8007e3e:	f042 0201 	orreq.w	r2, r2, #1
 8007e42:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8007e44:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e46:	42a1      	cmp	r1, r4
 8007e48:	bf08      	it	eq
 8007e4a:	f042 0201 	orreq.w	r2, r2, #1
 8007e4e:	481e      	ldr	r0, [pc, #120]	; (8007ec8 <HAL_DMA_Abort_IT+0x18c>)
 8007e50:	4281      	cmp	r1, r0
 8007e52:	bf08      	it	eq
 8007e54:	f042 0201 	orreq.w	r2, r2, #1
 8007e58:	b912      	cbnz	r2, 8007e60 <HAL_DMA_Abort_IT+0x124>
 8007e5a:	4a1c      	ldr	r2, [pc, #112]	; (8007ecc <HAL_DMA_Abort_IT+0x190>)
 8007e5c:	4291      	cmp	r1, r2
 8007e5e:	d117      	bne.n	8007e90 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007e60:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e62:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007e64:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007e68:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007e6a:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007e6e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007e72:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007e74:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007e76:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8007e78:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e7a:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 8007e7e:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8007e80:	b132      	cbz	r2, 8007e90 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007e82:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e84:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007e88:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007e8c:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e8e:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8007e90:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8007e92:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8007e94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8007e96:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8007e9a:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8007e9e:	b11a      	cbz	r2, 8007ea8 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	4790      	blx	r2
  return HAL_OK;
 8007ea4:	4620      	mov	r0, r4
}
 8007ea6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8007ea8:	4610      	mov	r0, r2
}
 8007eaa:	bd38      	pop	{r3, r4, r5, pc}
 8007eac:	40020010 	.word	0x40020010
 8007eb0:	40020040 	.word	0x40020040
 8007eb4:	40020070 	.word	0x40020070
 8007eb8:	400204b8 	.word	0x400204b8
 8007ebc:	5802541c 	.word	0x5802541c
 8007ec0:	58025408 	.word	0x58025408
 8007ec4:	58025430 	.word	0x58025430
 8007ec8:	58025480 	.word	0x58025480
 8007ecc:	58025494 	.word	0x58025494

08007ed0 <HAL_DMA_IRQHandler>:
{
 8007ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
 8007ed4:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8007ed6:	4b9c      	ldr	r3, [pc, #624]	; (8008148 <HAL_DMA_IRQHandler+0x278>)
{
 8007ed8:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007eda:	4e9c      	ldr	r6, [pc, #624]	; (800814c <HAL_DMA_IRQHandler+0x27c>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8007edc:	681d      	ldr	r5, [r3, #0]
{
 8007ede:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
 8007ee0:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007ee2:	6803      	ldr	r3, [r0, #0]
 8007ee4:	4a9a      	ldr	r2, [pc, #616]	; (8008150 <HAL_DMA_IRQHandler+0x280>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ee6:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	bf18      	it	ne
 8007eec:	42b3      	cmpne	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 8007eee:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007ef0:	bf08      	it	eq
 8007ef2:	2601      	moveq	r6, #1
  tmpisr_bdma = regs_bdma->ISR;
 8007ef4:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007ef6:	bf18      	it	ne
 8007ef8:	2600      	movne	r6, #0
 8007efa:	d045      	beq.n	8007f88 <HAL_DMA_IRQHandler+0xb8>
 8007efc:	3218      	adds	r2, #24
 8007efe:	4895      	ldr	r0, [pc, #596]	; (8008154 <HAL_DMA_IRQHandler+0x284>)
 8007f00:	4283      	cmp	r3, r0
 8007f02:	bf18      	it	ne
 8007f04:	4293      	cmpne	r3, r2
 8007f06:	f100 0018 	add.w	r0, r0, #24
 8007f0a:	bf0c      	ite	eq
 8007f0c:	2201      	moveq	r2, #1
 8007f0e:	2200      	movne	r2, #0
 8007f10:	4283      	cmp	r3, r0
 8007f12:	bf08      	it	eq
 8007f14:	f042 0201 	orreq.w	r2, r2, #1
 8007f18:	3018      	adds	r0, #24
 8007f1a:	4283      	cmp	r3, r0
 8007f1c:	bf08      	it	eq
 8007f1e:	f042 0201 	orreq.w	r2, r2, #1
 8007f22:	3018      	adds	r0, #24
 8007f24:	4283      	cmp	r3, r0
 8007f26:	bf08      	it	eq
 8007f28:	f042 0201 	orreq.w	r2, r2, #1
 8007f2c:	3018      	adds	r0, #24
 8007f2e:	4283      	cmp	r3, r0
 8007f30:	bf08      	it	eq
 8007f32:	f042 0201 	orreq.w	r2, r2, #1
 8007f36:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8007f3a:	4283      	cmp	r3, r0
 8007f3c:	bf08      	it	eq
 8007f3e:	f042 0201 	orreq.w	r2, r2, #1
 8007f42:	3018      	adds	r0, #24
 8007f44:	4283      	cmp	r3, r0
 8007f46:	bf08      	it	eq
 8007f48:	f042 0201 	orreq.w	r2, r2, #1
 8007f4c:	3018      	adds	r0, #24
 8007f4e:	4283      	cmp	r3, r0
 8007f50:	bf08      	it	eq
 8007f52:	f042 0201 	orreq.w	r2, r2, #1
 8007f56:	3018      	adds	r0, #24
 8007f58:	4283      	cmp	r3, r0
 8007f5a:	bf08      	it	eq
 8007f5c:	f042 0201 	orreq.w	r2, r2, #1
 8007f60:	3018      	adds	r0, #24
 8007f62:	4283      	cmp	r3, r0
 8007f64:	bf08      	it	eq
 8007f66:	f042 0201 	orreq.w	r2, r2, #1
 8007f6a:	3018      	adds	r0, #24
 8007f6c:	4283      	cmp	r3, r0
 8007f6e:	bf08      	it	eq
 8007f70:	f042 0201 	orreq.w	r2, r2, #1
 8007f74:	3018      	adds	r0, #24
 8007f76:	4283      	cmp	r3, r0
 8007f78:	bf08      	it	eq
 8007f7a:	f042 0201 	orreq.w	r2, r2, #1
 8007f7e:	b91a      	cbnz	r2, 8007f88 <HAL_DMA_IRQHandler+0xb8>
 8007f80:	4a75      	ldr	r2, [pc, #468]	; (8008158 <HAL_DMA_IRQHandler+0x288>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	f040 8250 	bne.w	8008428 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f88:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 8007f8c:	2208      	movs	r2, #8
 8007f8e:	f001 0c1f 	and.w	ip, r1, #31
 8007f92:	fa02 f20c 	lsl.w	r2, r2, ip
 8007f96:	4217      	tst	r7, r2
 8007f98:	f040 8188 	bne.w	80082ac <HAL_DMA_IRQHandler+0x3dc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f9c:	fa27 f20c 	lsr.w	r2, r7, ip
 8007fa0:	07d2      	lsls	r2, r2, #31
 8007fa2:	d50c      	bpl.n	8007fbe <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007fa4:	695a      	ldr	r2, [r3, #20]
 8007fa6:	0610      	lsls	r0, r2, #24
 8007fa8:	d509      	bpl.n	8007fbe <HAL_DMA_IRQHandler+0xee>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007faa:	2201      	movs	r2, #1
 8007fac:	fa02 f20c 	lsl.w	r2, r2, ip
 8007fb0:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007fb2:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8007fb6:	f042 0202 	orr.w	r2, r2, #2
 8007fba:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fbe:	f04f 0e04 	mov.w	lr, #4
 8007fc2:	fa0e f00c 	lsl.w	r0, lr, ip
 8007fc6:	4238      	tst	r0, r7
 8007fc8:	d05b      	beq.n	8008082 <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007fca:	2e00      	cmp	r6, #0
 8007fcc:	d14f      	bne.n	800806e <HAL_DMA_IRQHandler+0x19e>
 8007fce:	4a61      	ldr	r2, [pc, #388]	; (8008154 <HAL_DMA_IRQHandler+0x284>)
 8007fd0:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800815c <HAL_DMA_IRQHandler+0x28c>
 8007fd4:	4543      	cmp	r3, r8
 8007fd6:	bf18      	it	ne
 8007fd8:	4293      	cmpne	r3, r2
 8007fda:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8007fde:	bf0c      	ite	eq
 8007fe0:	2201      	moveq	r2, #1
 8007fe2:	2200      	movne	r2, #0
 8007fe4:	4543      	cmp	r3, r8
 8007fe6:	bf08      	it	eq
 8007fe8:	f042 0201 	orreq.w	r2, r2, #1
 8007fec:	f108 0818 	add.w	r8, r8, #24
 8007ff0:	4543      	cmp	r3, r8
 8007ff2:	bf08      	it	eq
 8007ff4:	f042 0201 	orreq.w	r2, r2, #1
 8007ff8:	f108 0818 	add.w	r8, r8, #24
 8007ffc:	4543      	cmp	r3, r8
 8007ffe:	bf08      	it	eq
 8008000:	f042 0201 	orreq.w	r2, r2, #1
 8008004:	f108 0818 	add.w	r8, r8, #24
 8008008:	4543      	cmp	r3, r8
 800800a:	bf08      	it	eq
 800800c:	f042 0201 	orreq.w	r2, r2, #1
 8008010:	f508 7856 	add.w	r8, r8, #856	; 0x358
 8008014:	4543      	cmp	r3, r8
 8008016:	bf08      	it	eq
 8008018:	f042 0201 	orreq.w	r2, r2, #1
 800801c:	f108 0818 	add.w	r8, r8, #24
 8008020:	4543      	cmp	r3, r8
 8008022:	bf08      	it	eq
 8008024:	f042 0201 	orreq.w	r2, r2, #1
 8008028:	f108 0818 	add.w	r8, r8, #24
 800802c:	4543      	cmp	r3, r8
 800802e:	bf08      	it	eq
 8008030:	f042 0201 	orreq.w	r2, r2, #1
 8008034:	f108 0818 	add.w	r8, r8, #24
 8008038:	4543      	cmp	r3, r8
 800803a:	bf08      	it	eq
 800803c:	f042 0201 	orreq.w	r2, r2, #1
 8008040:	f108 0818 	add.w	r8, r8, #24
 8008044:	4543      	cmp	r3, r8
 8008046:	bf08      	it	eq
 8008048:	f042 0201 	orreq.w	r2, r2, #1
 800804c:	f108 0818 	add.w	r8, r8, #24
 8008050:	4543      	cmp	r3, r8
 8008052:	bf08      	it	eq
 8008054:	f042 0201 	orreq.w	r2, r2, #1
 8008058:	f108 0818 	add.w	r8, r8, #24
 800805c:	4543      	cmp	r3, r8
 800805e:	bf08      	it	eq
 8008060:	f042 0201 	orreq.w	r2, r2, #1
 8008064:	b91a      	cbnz	r2, 800806e <HAL_DMA_IRQHandler+0x19e>
 8008066:	4a3c      	ldr	r2, [pc, #240]	; (8008158 <HAL_DMA_IRQHandler+0x288>)
 8008068:	4293      	cmp	r3, r2
 800806a:	f040 8219 	bne.w	80084a0 <HAL_DMA_IRQHandler+0x5d0>
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	0792      	lsls	r2, r2, #30
 8008072:	d506      	bpl.n	8008082 <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008074:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008076:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 800807a:	f042 0204 	orr.w	r2, r2, #4
 800807e:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008082:	2210      	movs	r2, #16
 8008084:	fa02 fc0c 	lsl.w	ip, r2, ip
 8008088:	ea1c 0f07 	tst.w	ip, r7
 800808c:	d06c      	beq.n	8008168 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800808e:	2e00      	cmp	r6, #0
 8008090:	d145      	bne.n	800811e <HAL_DMA_IRQHandler+0x24e>
 8008092:	4a30      	ldr	r2, [pc, #192]	; (8008154 <HAL_DMA_IRQHandler+0x284>)
 8008094:	4e31      	ldr	r6, [pc, #196]	; (800815c <HAL_DMA_IRQHandler+0x28c>)
 8008096:	42b3      	cmp	r3, r6
 8008098:	bf18      	it	ne
 800809a:	4293      	cmpne	r3, r2
 800809c:	f106 0630 	add.w	r6, r6, #48	; 0x30
 80080a0:	bf0c      	ite	eq
 80080a2:	2201      	moveq	r2, #1
 80080a4:	2200      	movne	r2, #0
 80080a6:	42b3      	cmp	r3, r6
 80080a8:	bf08      	it	eq
 80080aa:	f042 0201 	orreq.w	r2, r2, #1
 80080ae:	3618      	adds	r6, #24
 80080b0:	42b3      	cmp	r3, r6
 80080b2:	bf08      	it	eq
 80080b4:	f042 0201 	orreq.w	r2, r2, #1
 80080b8:	3618      	adds	r6, #24
 80080ba:	42b3      	cmp	r3, r6
 80080bc:	bf08      	it	eq
 80080be:	f042 0201 	orreq.w	r2, r2, #1
 80080c2:	3618      	adds	r6, #24
 80080c4:	42b3      	cmp	r3, r6
 80080c6:	bf08      	it	eq
 80080c8:	f042 0201 	orreq.w	r2, r2, #1
 80080cc:	f506 7656 	add.w	r6, r6, #856	; 0x358
 80080d0:	42b3      	cmp	r3, r6
 80080d2:	bf08      	it	eq
 80080d4:	f042 0201 	orreq.w	r2, r2, #1
 80080d8:	3618      	adds	r6, #24
 80080da:	42b3      	cmp	r3, r6
 80080dc:	bf08      	it	eq
 80080de:	f042 0201 	orreq.w	r2, r2, #1
 80080e2:	3618      	adds	r6, #24
 80080e4:	42b3      	cmp	r3, r6
 80080e6:	bf08      	it	eq
 80080e8:	f042 0201 	orreq.w	r2, r2, #1
 80080ec:	3618      	adds	r6, #24
 80080ee:	42b3      	cmp	r3, r6
 80080f0:	bf08      	it	eq
 80080f2:	f042 0201 	orreq.w	r2, r2, #1
 80080f6:	3618      	adds	r6, #24
 80080f8:	42b3      	cmp	r3, r6
 80080fa:	bf08      	it	eq
 80080fc:	f042 0201 	orreq.w	r2, r2, #1
 8008100:	3618      	adds	r6, #24
 8008102:	42b3      	cmp	r3, r6
 8008104:	bf08      	it	eq
 8008106:	f042 0201 	orreq.w	r2, r2, #1
 800810a:	3618      	adds	r6, #24
 800810c:	42b3      	cmp	r3, r6
 800810e:	bf08      	it	eq
 8008110:	f042 0201 	orreq.w	r2, r2, #1
 8008114:	b91a      	cbnz	r2, 800811e <HAL_DMA_IRQHandler+0x24e>
 8008116:	4a10      	ldr	r2, [pc, #64]	; (8008158 <HAL_DMA_IRQHandler+0x288>)
 8008118:	4293      	cmp	r3, r2
 800811a:	f040 81c9 	bne.w	80084b0 <HAL_DMA_IRQHandler+0x5e0>
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	0710      	lsls	r0, r2, #28
 8008122:	d521      	bpl.n	8008168 <HAL_DMA_IRQHandler+0x298>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008124:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	0356      	lsls	r6, r2, #13
 800812c:	f100 814c 	bmi.w	80083c8 <HAL_DMA_IRQHandler+0x4f8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	05d2      	lsls	r2, r2, #23
 8008134:	d403      	bmi.n	800813e <HAL_DMA_IRQHandler+0x26e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	f022 0208 	bic.w	r2, r2, #8
 800813c:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800813e:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8008142:	b18b      	cbz	r3, 8008168 <HAL_DMA_IRQHandler+0x298>
 8008144:	e00c      	b.n	8008160 <HAL_DMA_IRQHandler+0x290>
 8008146:	bf00      	nop
 8008148:	2400030c 	.word	0x2400030c
 800814c:	40020010 	.word	0x40020010
 8008150:	40020028 	.word	0x40020028
 8008154:	40020058 	.word	0x40020058
 8008158:	400204b8 	.word	0x400204b8
 800815c:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 8008160:	4648      	mov	r0, r9
 8008162:	4798      	blx	r3
 8008164:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008168:	f001 011f 	and.w	r1, r1, #31
 800816c:	2620      	movs	r6, #32
 800816e:	408e      	lsls	r6, r1
 8008170:	423e      	tst	r6, r7
 8008172:	d068      	beq.n	8008246 <HAL_DMA_IRQHandler+0x376>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008174:	f8d9 2000 	ldr.w	r2, [r9]
 8008178:	4ba5      	ldr	r3, [pc, #660]	; (8008410 <HAL_DMA_IRQHandler+0x540>)
 800817a:	4fa6      	ldr	r7, [pc, #664]	; (8008414 <HAL_DMA_IRQHandler+0x544>)
 800817c:	42ba      	cmp	r2, r7
 800817e:	bf18      	it	ne
 8008180:	429a      	cmpne	r2, r3
 8008182:	f107 0718 	add.w	r7, r7, #24
 8008186:	bf0c      	ite	eq
 8008188:	2301      	moveq	r3, #1
 800818a:	2300      	movne	r3, #0
 800818c:	42ba      	cmp	r2, r7
 800818e:	bf08      	it	eq
 8008190:	f043 0301 	orreq.w	r3, r3, #1
 8008194:	3718      	adds	r7, #24
 8008196:	42ba      	cmp	r2, r7
 8008198:	bf08      	it	eq
 800819a:	f043 0301 	orreq.w	r3, r3, #1
 800819e:	3718      	adds	r7, #24
 80081a0:	42ba      	cmp	r2, r7
 80081a2:	bf08      	it	eq
 80081a4:	f043 0301 	orreq.w	r3, r3, #1
 80081a8:	3718      	adds	r7, #24
 80081aa:	42ba      	cmp	r2, r7
 80081ac:	bf08      	it	eq
 80081ae:	f043 0301 	orreq.w	r3, r3, #1
 80081b2:	3718      	adds	r7, #24
 80081b4:	42ba      	cmp	r2, r7
 80081b6:	bf08      	it	eq
 80081b8:	f043 0301 	orreq.w	r3, r3, #1
 80081bc:	3718      	adds	r7, #24
 80081be:	42ba      	cmp	r2, r7
 80081c0:	bf08      	it	eq
 80081c2:	f043 0301 	orreq.w	r3, r3, #1
 80081c6:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80081ca:	42ba      	cmp	r2, r7
 80081cc:	bf08      	it	eq
 80081ce:	f043 0301 	orreq.w	r3, r3, #1
 80081d2:	3718      	adds	r7, #24
 80081d4:	42ba      	cmp	r2, r7
 80081d6:	bf08      	it	eq
 80081d8:	f043 0301 	orreq.w	r3, r3, #1
 80081dc:	3718      	adds	r7, #24
 80081de:	42ba      	cmp	r2, r7
 80081e0:	bf08      	it	eq
 80081e2:	f043 0301 	orreq.w	r3, r3, #1
 80081e6:	3718      	adds	r7, #24
 80081e8:	42ba      	cmp	r2, r7
 80081ea:	bf08      	it	eq
 80081ec:	f043 0301 	orreq.w	r3, r3, #1
 80081f0:	3718      	adds	r7, #24
 80081f2:	42ba      	cmp	r2, r7
 80081f4:	bf08      	it	eq
 80081f6:	f043 0301 	orreq.w	r3, r3, #1
 80081fa:	3718      	adds	r7, #24
 80081fc:	42ba      	cmp	r2, r7
 80081fe:	bf08      	it	eq
 8008200:	f043 0301 	orreq.w	r3, r3, #1
 8008204:	3718      	adds	r7, #24
 8008206:	42ba      	cmp	r2, r7
 8008208:	bf08      	it	eq
 800820a:	f043 0301 	orreq.w	r3, r3, #1
 800820e:	b91b      	cbnz	r3, 8008218 <HAL_DMA_IRQHandler+0x348>
 8008210:	4b81      	ldr	r3, [pc, #516]	; (8008418 <HAL_DMA_IRQHandler+0x548>)
 8008212:	429a      	cmp	r2, r3
 8008214:	f040 8162 	bne.w	80084dc <HAL_DMA_IRQHandler+0x60c>
 8008218:	6813      	ldr	r3, [r2, #0]
 800821a:	06db      	lsls	r3, r3, #27
 800821c:	d513      	bpl.n	8008246 <HAL_DMA_IRQHandler+0x376>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800821e:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008220:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 8008224:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008226:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008228:	f000 80ae 	beq.w	8008388 <HAL_DMA_IRQHandler+0x4b8>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800822c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008230:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008232:	f000 80d3 	beq.w	80083dc <HAL_DMA_IRQHandler+0x50c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008236:	031c      	lsls	r4, r3, #12
 8008238:	f140 80de 	bpl.w	80083f8 <HAL_DMA_IRQHandler+0x528>
          if(hdma->XferCpltCallback != NULL)
 800823c:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8008240:	b10b      	cbz	r3, 8008246 <HAL_DMA_IRQHandler+0x376>
            hdma->XferCpltCallback(hdma);
 8008242:	4648      	mov	r0, r9
 8008244:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008246:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 80b9 	beq.w	80083c2 <HAL_DMA_IRQHandler+0x4f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008250:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8008254:	07d8      	lsls	r0, r3, #31
 8008256:	d51f      	bpl.n	8008298 <HAL_DMA_IRQHandler+0x3c8>
        __HAL_DMA_DISABLE(hdma);
 8008258:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
 800825c:	2104      	movs	r1, #4
 800825e:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8008262:	6813      	ldr	r3, [r2, #0]
 8008264:	f023 0301 	bic.w	r3, r3, #1
 8008268:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800826a:	4b6c      	ldr	r3, [pc, #432]	; (800841c <HAL_DMA_IRQHandler+0x54c>)
 800826c:	fba3 3505 	umull	r3, r5, r3, r5
 8008270:	0aad      	lsrs	r5, r5, #10
 8008272:	e002      	b.n	800827a <HAL_DMA_IRQHandler+0x3aa>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008274:	6813      	ldr	r3, [r2, #0]
 8008276:	07d9      	lsls	r1, r3, #31
 8008278:	d504      	bpl.n	8008284 <HAL_DMA_IRQHandler+0x3b4>
          if (++count > timeout)
 800827a:	9b01      	ldr	r3, [sp, #4]
 800827c:	3301      	adds	r3, #1
 800827e:	42ab      	cmp	r3, r5
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	d9f7      	bls.n	8008274 <HAL_DMA_IRQHandler+0x3a4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008284:	6813      	ldr	r3, [r2, #0]
 8008286:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8008288:	bf4c      	ite	mi
 800828a:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800828c:	2301      	movpl	r3, #1
 800828e:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8008292:	2300      	movs	r3, #0
 8008294:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8008298:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 8090 	beq.w	80083c2 <HAL_DMA_IRQHandler+0x4f2>
          hdma->XferCpltCallback(hdma);
 80082a2:	4648      	mov	r0, r9
}
 80082a4:	b003      	add	sp, #12
 80082a6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
          hdma->XferCpltCallback(hdma);
 80082aa:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80082ac:	6818      	ldr	r0, [r3, #0]
 80082ae:	0740      	lsls	r0, r0, #29
 80082b0:	d50a      	bpl.n	80082c8 <HAL_DMA_IRQHandler+0x3f8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80082b2:	6818      	ldr	r0, [r3, #0]
 80082b4:	f020 0004 	bic.w	r0, r0, #4
 80082b8:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80082ba:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80082bc:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 80082c0:	f042 0201 	orr.w	r2, r2, #1
 80082c4:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80082c8:	fa27 f20c 	lsr.w	r2, r7, ip
 80082cc:	07d2      	lsls	r2, r2, #31
 80082ce:	f57f ae76 	bpl.w	8007fbe <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80082d2:	4a53      	ldr	r2, [pc, #332]	; (8008420 <HAL_DMA_IRQHandler+0x550>)
 80082d4:	4853      	ldr	r0, [pc, #332]	; (8008424 <HAL_DMA_IRQHandler+0x554>)
 80082d6:	4283      	cmp	r3, r0
 80082d8:	bf18      	it	ne
 80082da:	4293      	cmpne	r3, r2
 80082dc:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80082e0:	bf0c      	ite	eq
 80082e2:	2201      	moveq	r2, #1
 80082e4:	2200      	movne	r2, #0
 80082e6:	4283      	cmp	r3, r0
 80082e8:	bf08      	it	eq
 80082ea:	f042 0201 	orreq.w	r2, r2, #1
 80082ee:	3018      	adds	r0, #24
 80082f0:	4283      	cmp	r3, r0
 80082f2:	bf08      	it	eq
 80082f4:	f042 0201 	orreq.w	r2, r2, #1
 80082f8:	3018      	adds	r0, #24
 80082fa:	4283      	cmp	r3, r0
 80082fc:	bf08      	it	eq
 80082fe:	f042 0201 	orreq.w	r2, r2, #1
 8008302:	3018      	adds	r0, #24
 8008304:	4283      	cmp	r3, r0
 8008306:	bf08      	it	eq
 8008308:	f042 0201 	orreq.w	r2, r2, #1
 800830c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8008310:	4283      	cmp	r3, r0
 8008312:	bf08      	it	eq
 8008314:	f042 0201 	orreq.w	r2, r2, #1
 8008318:	3018      	adds	r0, #24
 800831a:	4283      	cmp	r3, r0
 800831c:	bf08      	it	eq
 800831e:	f042 0201 	orreq.w	r2, r2, #1
 8008322:	3018      	adds	r0, #24
 8008324:	4283      	cmp	r3, r0
 8008326:	bf08      	it	eq
 8008328:	f042 0201 	orreq.w	r2, r2, #1
 800832c:	3018      	adds	r0, #24
 800832e:	4283      	cmp	r3, r0
 8008330:	bf08      	it	eq
 8008332:	f042 0201 	orreq.w	r2, r2, #1
 8008336:	3018      	adds	r0, #24
 8008338:	4283      	cmp	r3, r0
 800833a:	bf08      	it	eq
 800833c:	f042 0201 	orreq.w	r2, r2, #1
 8008340:	3018      	adds	r0, #24
 8008342:	4283      	cmp	r3, r0
 8008344:	bf08      	it	eq
 8008346:	f042 0201 	orreq.w	r2, r2, #1
 800834a:	3018      	adds	r0, #24
 800834c:	4283      	cmp	r3, r0
 800834e:	bf08      	it	eq
 8008350:	f042 0201 	orreq.w	r2, r2, #1
 8008354:	3018      	adds	r0, #24
 8008356:	4283      	cmp	r3, r0
 8008358:	bf08      	it	eq
 800835a:	f042 0201 	orreq.w	r2, r2, #1
 800835e:	2a00      	cmp	r2, #0
 8008360:	f47f ae20 	bne.w	8007fa4 <HAL_DMA_IRQHandler+0xd4>
 8008364:	2e00      	cmp	r6, #0
 8008366:	f47f ae1d 	bne.w	8007fa4 <HAL_DMA_IRQHandler+0xd4>
 800836a:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800836c:	2204      	movs	r2, #4
 800836e:	fa02 f20c 	lsl.w	r2, r2, ip
 8008372:	423a      	tst	r2, r7
 8008374:	f040 8094 	bne.w	80084a0 <HAL_DMA_IRQHandler+0x5d0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008378:	2210      	movs	r2, #16
 800837a:	fa02 fc0c 	lsl.w	ip, r2, ip
 800837e:	ea17 0f0c 	tst.w	r7, ip
 8008382:	f43f aef1 	beq.w	8008168 <HAL_DMA_IRQHandler+0x298>
 8008386:	e684      	b.n	8008092 <HAL_DMA_IRQHandler+0x1c2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008388:	f023 0316 	bic.w	r3, r3, #22
 800838c:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800838e:	6953      	ldr	r3, [r2, #20]
 8008390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008394:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008396:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800839a:	b39b      	cbz	r3, 8008404 <HAL_DMA_IRQHandler+0x534>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800839c:	6813      	ldr	r3, [r2, #0]
 800839e:	f023 0308 	bic.w	r3, r3, #8
 80083a2:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80083a4:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 80083a6:	2501      	movs	r5, #1
          __HAL_UNLOCK(hdma);
 80083a8:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80083aa:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 80083ae:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80083b2:	60a1      	str	r1, [r4, #8]
          hdma->State = HAL_DMA_STATE_READY;
 80083b4:	f889 5035 	strb.w	r5, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80083b8:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f47f af70 	bne.w	80082a2 <HAL_DMA_IRQHandler+0x3d2>
}
 80083c2:	b003      	add	sp, #12
 80083c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	0318      	lsls	r0, r3, #12
 80083cc:	f57f aeb7 	bpl.w	800813e <HAL_DMA_IRQHandler+0x26e>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80083d0:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f47f aec3 	bne.w	8008160 <HAL_DMA_IRQHandler+0x290>
 80083da:	e6c5      	b.n	8008168 <HAL_DMA_IRQHandler+0x298>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80083dc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80083e0:	f47f af2c 	bne.w	800823c <HAL_DMA_IRQHandler+0x36c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80083e4:	6811      	ldr	r1, [r2, #0]
 80083e6:	f021 0110 	bic.w	r1, r1, #16
 80083ea:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80083ec:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 80083ee:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80083f2:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 80083f6:	e721      	b.n	800823c <HAL_DMA_IRQHandler+0x36c>
            if(hdma->XferM1CpltCallback != NULL)
 80083f8:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f47f af20 	bne.w	8008242 <HAL_DMA_IRQHandler+0x372>
 8008402:	e720      	b.n	8008246 <HAL_DMA_IRQHandler+0x376>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008404:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1c7      	bne.n	800839c <HAL_DMA_IRQHandler+0x4cc>
 800840c:	e7ca      	b.n	80083a4 <HAL_DMA_IRQHandler+0x4d4>
 800840e:	bf00      	nop
 8008410:	40020010 	.word	0x40020010
 8008414:	40020028 	.word	0x40020028
 8008418:	400204b8 	.word	0x400204b8
 800841c:	1b4e81b5 	.word	0x1b4e81b5
 8008420:	40020058 	.word	0x40020058
 8008424:	40020040 	.word	0x40020040
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008428:	4a4e      	ldr	r2, [pc, #312]	; (8008564 <HAL_DMA_IRQHandler+0x694>)
 800842a:	4d4f      	ldr	r5, [pc, #316]	; (8008568 <HAL_DMA_IRQHandler+0x698>)
 800842c:	42ab      	cmp	r3, r5
 800842e:	bf18      	it	ne
 8008430:	4293      	cmpne	r3, r2
 8008432:	f105 0514 	add.w	r5, r5, #20
 8008436:	bf0c      	ite	eq
 8008438:	2201      	moveq	r2, #1
 800843a:	2200      	movne	r2, #0
 800843c:	42ab      	cmp	r3, r5
 800843e:	bf08      	it	eq
 8008440:	f042 0201 	orreq.w	r2, r2, #1
 8008444:	3514      	adds	r5, #20
 8008446:	42ab      	cmp	r3, r5
 8008448:	bf08      	it	eq
 800844a:	f042 0201 	orreq.w	r2, r2, #1
 800844e:	3514      	adds	r5, #20
 8008450:	42ab      	cmp	r3, r5
 8008452:	bf08      	it	eq
 8008454:	f042 0201 	orreq.w	r2, r2, #1
 8008458:	3514      	adds	r5, #20
 800845a:	42ab      	cmp	r3, r5
 800845c:	bf08      	it	eq
 800845e:	f042 0201 	orreq.w	r2, r2, #1
 8008462:	3514      	adds	r5, #20
 8008464:	42ab      	cmp	r3, r5
 8008466:	bf08      	it	eq
 8008468:	f042 0201 	orreq.w	r2, r2, #1
 800846c:	b912      	cbnz	r2, 8008474 <HAL_DMA_IRQHandler+0x5a4>
 800846e:	4a3f      	ldr	r2, [pc, #252]	; (800856c <HAL_DMA_IRQHandler+0x69c>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d1a6      	bne.n	80083c2 <HAL_DMA_IRQHandler+0x4f2>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008474:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
 8008478:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800847a:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800847c:	f005 051f 	and.w	r5, r5, #31
 8008480:	40ae      	lsls	r6, r5
 8008482:	420e      	tst	r6, r1
 8008484:	d019      	beq.n	80084ba <HAL_DMA_IRQHandler+0x5ea>
 8008486:	0757      	lsls	r7, r2, #29
 8008488:	d517      	bpl.n	80084ba <HAL_DMA_IRQHandler+0x5ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800848a:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800848c:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800848e:	d54b      	bpl.n	8008528 <HAL_DMA_IRQHandler+0x658>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008490:	03d1      	lsls	r1, r2, #15
 8008492:	d44f      	bmi.n	8008534 <HAL_DMA_IRQHandler+0x664>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008494:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8008498:	2b00      	cmp	r3, #0
 800849a:	f47f af02 	bne.w	80082a2 <HAL_DMA_IRQHandler+0x3d2>
 800849e:	e790      	b.n	80083c2 <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80084a0:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80084a2:	2210      	movs	r2, #16
 80084a4:	fa02 fc0c 	lsl.w	ip, r2, ip
 80084a8:	ea17 0f0c 	tst.w	r7, ip
 80084ac:	f43f ae5c 	beq.w	8008168 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	0752      	lsls	r2, r2, #29
 80084b4:	f57f ae58 	bpl.w	8008168 <HAL_DMA_IRQHandler+0x298>
 80084b8:	e634      	b.n	8008124 <HAL_DMA_IRQHandler+0x254>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80084ba:	2602      	movs	r6, #2
 80084bc:	40ae      	lsls	r6, r5
 80084be:	420e      	tst	r6, r1
 80084c0:	d011      	beq.n	80084e6 <HAL_DMA_IRQHandler+0x616>
 80084c2:	0797      	lsls	r7, r2, #30
 80084c4:	d50f      	bpl.n	80084e6 <HAL_DMA_IRQHandler+0x616>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80084c6:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084c8:	0414      	lsls	r4, r2, #16
 80084ca:	d539      	bpl.n	8008540 <HAL_DMA_IRQHandler+0x670>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80084cc:	03d0      	lsls	r0, r2, #15
 80084ce:	d443      	bmi.n	8008558 <HAL_DMA_IRQHandler+0x688>
          if(hdma->XferM1CpltCallback != NULL)
 80084d0:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f47f aee4 	bne.w	80082a2 <HAL_DMA_IRQHandler+0x3d2>
 80084da:	e772      	b.n	80083c2 <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80084dc:	6813      	ldr	r3, [r2, #0]
 80084de:	079f      	lsls	r7, r3, #30
 80084e0:	f57f aeb1 	bpl.w	8008246 <HAL_DMA_IRQHandler+0x376>
 80084e4:	e69b      	b.n	800821e <HAL_DMA_IRQHandler+0x34e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80084e6:	2608      	movs	r6, #8
 80084e8:	40ae      	lsls	r6, r5
 80084ea:	420e      	tst	r6, r1
 80084ec:	f43f af69 	beq.w	80083c2 <HAL_DMA_IRQHandler+0x4f2>
 80084f0:	0711      	lsls	r1, r2, #28
 80084f2:	f57f af66 	bpl.w	80083c2 <HAL_DMA_IRQHandler+0x4f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084f6:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 80084f8:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084fa:	f022 020e 	bic.w	r2, r2, #14
 80084fe:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008500:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8008502:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008506:	fa03 f505 	lsl.w	r5, r3, r5
 800850a:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800850c:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8008510:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8008514:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8008518:	2a00      	cmp	r2, #0
 800851a:	f43f af52 	beq.w	80083c2 <HAL_DMA_IRQHandler+0x4f2>
        hdma->XferErrorCallback(hdma);
 800851e:	4648      	mov	r0, r9
}
 8008520:	b003      	add	sp, #12
 8008522:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
 8008526:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008528:	0692      	lsls	r2, r2, #26
 800852a:	d403      	bmi.n	8008534 <HAL_DMA_IRQHandler+0x664>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	f022 0204 	bic.w	r2, r2, #4
 8008532:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8008534:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8008538:	2b00      	cmp	r3, #0
 800853a:	f47f aeb2 	bne.w	80082a2 <HAL_DMA_IRQHandler+0x3d2>
 800853e:	e740      	b.n	80083c2 <HAL_DMA_IRQHandler+0x4f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008540:	f012 0220 	ands.w	r2, r2, #32
 8008544:	d108      	bne.n	8008558 <HAL_DMA_IRQHandler+0x688>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008546:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8008548:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800854a:	f021 010a 	bic.w	r1, r1, #10
 800854e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8008550:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8008554:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8008558:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 800855c:	2b00      	cmp	r3, #0
 800855e:	f47f aea0 	bne.w	80082a2 <HAL_DMA_IRQHandler+0x3d2>
 8008562:	e72e      	b.n	80083c2 <HAL_DMA_IRQHandler+0x4f2>
 8008564:	58025408 	.word	0x58025408
 8008568:	5802541c 	.word	0x5802541c
 800856c:	58025494 	.word	0x58025494

08008570 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008574:	680c      	ldr	r4, [r1, #0]
{
 8008576:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008578:	2c00      	cmp	r4, #0
 800857a:	f000 80a6 	beq.w	80086ca <HAL_GPIO_Init+0x15a>
 800857e:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008582:	4f8e      	ldr	r7, [pc, #568]	; (80087bc <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
 8008584:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008586:	2201      	movs	r2, #1
 8008588:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800858a:	ea12 0e04 	ands.w	lr, r2, r4
 800858e:	f000 8095 	beq.w	80086bc <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008592:	684d      	ldr	r5, [r1, #4]
 8008594:	f005 0903 	and.w	r9, r5, #3
 8008598:	f109 36ff 	add.w	r6, r9, #4294967295
 800859c:	2e01      	cmp	r6, #1
 800859e:	f240 8097 	bls.w	80086d0 <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80085a2:	f1b9 0f03 	cmp.w	r9, #3
 80085a6:	f040 80d1 	bne.w	800874c <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085aa:	fa09 f20c 	lsl.w	r2, r9, ip
 80085ae:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 80085b2:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80085b4:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80085b8:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085bc:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 80085c0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80085c2:	d07b      	beq.n	80086bc <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085c4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80085c8:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80085cc:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085d0:	f042 0202 	orr.w	r2, r2, #2
 80085d4:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80085d8:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085dc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80085e0:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 80085e4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80085e8:	f002 0202 	and.w	r2, r2, #2
 80085ec:	9201      	str	r2, [sp, #4]
 80085ee:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80085f0:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 80085f2:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80085f6:	fa02 f209 	lsl.w	r2, r2, r9
 80085fa:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80085fe:	4e70      	ldr	r6, [pc, #448]	; (80087c0 <HAL_GPIO_Init+0x250>)
 8008600:	42b0      	cmp	r0, r6
 8008602:	d029      	beq.n	8008658 <HAL_GPIO_Init+0xe8>
 8008604:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008608:	42b0      	cmp	r0, r6
 800860a:	f000 80ac 	beq.w	8008766 <HAL_GPIO_Init+0x1f6>
 800860e:	4e6d      	ldr	r6, [pc, #436]	; (80087c4 <HAL_GPIO_Init+0x254>)
 8008610:	42b0      	cmp	r0, r6
 8008612:	f000 80ae 	beq.w	8008772 <HAL_GPIO_Init+0x202>
 8008616:	4e6c      	ldr	r6, [pc, #432]	; (80087c8 <HAL_GPIO_Init+0x258>)
 8008618:	42b0      	cmp	r0, r6
 800861a:	f000 809e 	beq.w	800875a <HAL_GPIO_Init+0x1ea>
 800861e:	4e6b      	ldr	r6, [pc, #428]	; (80087cc <HAL_GPIO_Init+0x25c>)
 8008620:	42b0      	cmp	r0, r6
 8008622:	f000 80b2 	beq.w	800878a <HAL_GPIO_Init+0x21a>
 8008626:	4e6a      	ldr	r6, [pc, #424]	; (80087d0 <HAL_GPIO_Init+0x260>)
 8008628:	42b0      	cmp	r0, r6
 800862a:	f000 80b4 	beq.w	8008796 <HAL_GPIO_Init+0x226>
 800862e:	4e69      	ldr	r6, [pc, #420]	; (80087d4 <HAL_GPIO_Init+0x264>)
 8008630:	42b0      	cmp	r0, r6
 8008632:	f000 80a4 	beq.w	800877e <HAL_GPIO_Init+0x20e>
 8008636:	4e68      	ldr	r6, [pc, #416]	; (80087d8 <HAL_GPIO_Init+0x268>)
 8008638:	42b0      	cmp	r0, r6
 800863a:	f000 80b2 	beq.w	80087a2 <HAL_GPIO_Init+0x232>
 800863e:	4e67      	ldr	r6, [pc, #412]	; (80087dc <HAL_GPIO_Init+0x26c>)
 8008640:	42b0      	cmp	r0, r6
 8008642:	f000 80b4 	beq.w	80087ae <HAL_GPIO_Init+0x23e>
 8008646:	4e66      	ldr	r6, [pc, #408]	; (80087e0 <HAL_GPIO_Init+0x270>)
 8008648:	42b0      	cmp	r0, r6
 800864a:	bf0c      	ite	eq
 800864c:	2609      	moveq	r6, #9
 800864e:	260a      	movne	r6, #10
 8008650:	fa06 f909 	lsl.w	r9, r6, r9
 8008654:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008658:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800865c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008660:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8008662:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
 8008666:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8008668:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800866c:	bf54      	ite	pl
 800866e:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 8008672:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 8008676:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008678:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
 800867a:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800867c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8008680:	bf54      	ite	pl
 8008682:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 8008686:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
 800868a:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800868c:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008690:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8008696:	bf54      	ite	pl
 8008698:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 800869c:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80086a0:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80086a2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 80086a6:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80086aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 80086ae:	bf54      	ite	pl
 80086b0:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 80086b4:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80086b8:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 80086bc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80086be:	f10c 0c02 	add.w	ip, ip, #2
 80086c2:	fa34 f203 	lsrs.w	r2, r4, r3
 80086c6:	f47f af5e 	bne.w	8008586 <HAL_GPIO_Init+0x16>
  }
}
 80086ca:	b003      	add	sp, #12
 80086cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80086d0:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 80086d4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80086d6:	fa08 f80c 	lsl.w	r8, r8, ip
 80086da:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086de:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80086e0:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086e4:	fa06 f60c 	lsl.w	r6, r6, ip
 80086e8:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 80086ec:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086ee:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 80086f2:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086f6:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80086f8:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086fc:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80086fe:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8008700:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008702:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008706:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008708:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800870c:	fa06 f60c 	lsl.w	r6, r6, ip
 8008710:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8008714:	fa09 f20c 	lsl.w	r2, r9, ip
 8008718:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800871a:	f47f af4a 	bne.w	80085b2 <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800871e:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8008722:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008726:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800872a:	260f      	movs	r6, #15
 800872c:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8008730:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
 8008734:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008738:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800873c:	690e      	ldr	r6, [r1, #16]
 800873e:	fa06 f60b 	lsl.w	r6, r6, fp
 8008742:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8008746:	f8c9 6020 	str.w	r6, [r9, #32]
 800874a:	e732      	b.n	80085b2 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800874c:	f04f 0803 	mov.w	r8, #3
 8008750:	fa08 f80c 	lsl.w	r8, r8, ip
 8008754:	ea6f 0808 	mvn.w	r8, r8
 8008758:	e7d2      	b.n	8008700 <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800875a:	2603      	movs	r6, #3
 800875c:	fa06 f909 	lsl.w	r9, r6, r9
 8008760:	ea42 0209 	orr.w	r2, r2, r9
 8008764:	e778      	b.n	8008658 <HAL_GPIO_Init+0xe8>
 8008766:	2601      	movs	r6, #1
 8008768:	fa06 f909 	lsl.w	r9, r6, r9
 800876c:	ea42 0209 	orr.w	r2, r2, r9
 8008770:	e772      	b.n	8008658 <HAL_GPIO_Init+0xe8>
 8008772:	2602      	movs	r6, #2
 8008774:	fa06 f909 	lsl.w	r9, r6, r9
 8008778:	ea42 0209 	orr.w	r2, r2, r9
 800877c:	e76c      	b.n	8008658 <HAL_GPIO_Init+0xe8>
 800877e:	2606      	movs	r6, #6
 8008780:	fa06 f909 	lsl.w	r9, r6, r9
 8008784:	ea42 0209 	orr.w	r2, r2, r9
 8008788:	e766      	b.n	8008658 <HAL_GPIO_Init+0xe8>
 800878a:	2604      	movs	r6, #4
 800878c:	fa06 f909 	lsl.w	r9, r6, r9
 8008790:	ea42 0209 	orr.w	r2, r2, r9
 8008794:	e760      	b.n	8008658 <HAL_GPIO_Init+0xe8>
 8008796:	2605      	movs	r6, #5
 8008798:	fa06 f909 	lsl.w	r9, r6, r9
 800879c:	ea42 0209 	orr.w	r2, r2, r9
 80087a0:	e75a      	b.n	8008658 <HAL_GPIO_Init+0xe8>
 80087a2:	2607      	movs	r6, #7
 80087a4:	fa06 f909 	lsl.w	r9, r6, r9
 80087a8:	ea42 0209 	orr.w	r2, r2, r9
 80087ac:	e754      	b.n	8008658 <HAL_GPIO_Init+0xe8>
 80087ae:	2608      	movs	r6, #8
 80087b0:	fa06 f909 	lsl.w	r9, r6, r9
 80087b4:	ea42 0209 	orr.w	r2, r2, r9
 80087b8:	e74e      	b.n	8008658 <HAL_GPIO_Init+0xe8>
 80087ba:	bf00      	nop
 80087bc:	58024400 	.word	0x58024400
 80087c0:	58020000 	.word	0x58020000
 80087c4:	58020800 	.word	0x58020800
 80087c8:	58020c00 	.word	0x58020c00
 80087cc:	58021000 	.word	0x58021000
 80087d0:	58021400 	.word	0x58021400
 80087d4:	58021800 	.word	0x58021800
 80087d8:	58021c00 	.word	0x58021c00
 80087dc:	58022000 	.word	0x58022000
 80087e0:	58022400 	.word	0x58022400

080087e4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80087e4:	6903      	ldr	r3, [r0, #16]
 80087e6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80087e8:	bf14      	ite	ne
 80087ea:	2001      	movne	r0, #1
 80087ec:	2000      	moveq	r0, #0
 80087ee:	4770      	bx	lr

080087f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80087f0:	b902      	cbnz	r2, 80087f4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80087f2:	0409      	lsls	r1, r1, #16
 80087f4:	6181      	str	r1, [r0, #24]
  }
}
 80087f6:	4770      	bx	lr

080087f8 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80087f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087fc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8008800:	4201      	tst	r1, r0
 8008802:	d100      	bne.n	8008806 <HAL_GPIO_EXTI_IRQHandler+0xe>
 8008804:	4770      	bx	lr
{
 8008806:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008808:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800880c:	f7f8 fcb0 	bl	8001170 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008810:	bd08      	pop	{r3, pc}
 8008812:	bf00      	nop

08008814 <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8008814:	2800      	cmp	r0, #0
 8008816:	d05e      	beq.n	80088d6 <HAL_LPTIM_Init+0xc2>
{
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800881a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800881e:	4604      	mov	r4, r0
 8008820:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008824:	2b00      	cmp	r3, #0
 8008826:	d051      	beq.n	80088cc <HAL_LPTIM_Init+0xb8>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008828:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800882a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800882c:	e9d4 1500 	ldrd	r1, r5, [r4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008830:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008834:	2d01      	cmp	r5, #1
  tmpcfgr = hlptim->Instance->CFGR;
 8008836:	68c8      	ldr	r0, [r1, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008838:	d03c      	beq.n	80088b4 <HAL_LPTIM_Init+0xa0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800883a:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 800883e:	d039      	beq.n	80088b4 <HAL_LPTIM_Init+0xa0>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008840:	6962      	ldr	r2, [r4, #20]
 8008842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008846:	429a      	cmp	r2, r3
 8008848:	d003      	beq.n	8008852 <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800884a:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 800884e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008852:	68a3      	ldr	r3, [r4, #8]
              hlptim->Init.Clock.Prescaler |
 8008854:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008856:	432b      	orrs	r3, r5
              hlptim->Init.Clock.Prescaler |
 8008858:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 800885a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800885c:	4333      	orrs	r3, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800885e:	4e22      	ldr	r6, [pc, #136]	; (80088e8 <HAL_LPTIM_Init+0xd4>)
              hlptim->Init.UpdateMode      |
 8008860:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008862:	4006      	ands	r6, r0
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008864:	4333      	orrs	r3, r6
              hlptim->Init.CounterSource);

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8008866:	b1ed      	cbz	r5, 80088a4 <HAL_LPTIM_Init+0x90>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008868:	2d01      	cmp	r5, #1
 800886a:	d11f      	bne.n	80088ac <HAL_LPTIM_Init+0x98>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800886c:	e9d4 0503 	ldrd	r0, r5, [r4, #12]
 8008870:	4328      	orrs	r0, r5
 8008872:	4303      	orrs	r3, r0
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008874:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008878:	4282      	cmp	r2, r0
 800887a:	d004      	beq.n	8008886 <HAL_LPTIM_Init+0x72>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800887c:	69a0      	ldr	r0, [r4, #24]
 800887e:	4302      	orrs	r2, r0
                hlptim->Init.Trigger.ActiveEdge |
 8008880:	69e0      	ldr	r0, [r4, #28]
 8008882:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008884:	4313      	orrs	r3, r2

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8008886:	4a19      	ldr	r2, [pc, #100]	; (80088ec <HAL_LPTIM_Init+0xd8>)
  hlptim->Instance->CFGR = tmpcfgr;
 8008888:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800888a:	4291      	cmp	r1, r2
 800888c:	d015      	beq.n	80088ba <HAL_LPTIM_Init+0xa6>
 800888e:	4b18      	ldr	r3, [pc, #96]	; (80088f0 <HAL_LPTIM_Init+0xdc>)
 8008890:	4299      	cmp	r1, r3
 8008892:	d012      	beq.n	80088ba <HAL_LPTIM_Init+0xa6>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8008894:	4b17      	ldr	r3, [pc, #92]	; (80088f4 <HAL_LPTIM_Init+0xe0>)
 8008896:	4299      	cmp	r1, r3
 8008898:	d01f      	beq.n	80088da <HAL_LPTIM_Init+0xc6>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800889a:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 800889c:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 800889e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80088a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80088a4:	69e0      	ldr	r0, [r4, #28]
 80088a6:	6925      	ldr	r5, [r4, #16]
 80088a8:	4328      	orrs	r0, r5
 80088aa:	4303      	orrs	r3, r0
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80088ac:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 80088b0:	d1e0      	bne.n	8008874 <HAL_LPTIM_Init+0x60>
 80088b2:	e7db      	b.n	800886c <HAL_LPTIM_Init+0x58>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80088b4:	f020 001e 	bic.w	r0, r0, #30
 80088b8:	e7c2      	b.n	8008840 <HAL_LPTIM_Init+0x2c>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80088ba:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 80088be:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80088c0:	4313      	orrs	r3, r2
 80088c2:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 80088c4:	2301      	movs	r3, #1
 80088c6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80088ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 80088cc:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 80088d0:	f7fc fcda 	bl	8005288 <HAL_LPTIM_MspInit>
 80088d4:	e7a8      	b.n	8008828 <HAL_LPTIM_Init+0x14>
    return HAL_ERROR;
 80088d6:	2001      	movs	r0, #1
}
 80088d8:	4770      	bx	lr
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80088da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80088dc:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80088de:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 80088e0:	2301      	movs	r3, #1
 80088e2:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80088e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088e8:	ff19f1fe 	.word	0xff19f1fe
 80088ec:	40002400 	.word	0x40002400
 80088f0:	58002400 	.word	0x58002400
 80088f4:	58002800 	.word	0x58002800

080088f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80088f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088fa:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80088fc:	2800      	cmp	r0, #0
 80088fe:	f000 8088 	beq.w	8008a12 <HAL_PCD_Init+0x11a>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008902:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8008906:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8008908:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800890a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800890e:	2b00      	cmp	r3, #0
 8008910:	d079      	beq.n	8008a06 <HAL_PCD_Init+0x10e>
 8008912:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008914:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008916:	462e      	mov	r6, r5
 8008918:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800891a:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800891e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008920:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008922:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8008926:	bf08      	it	eq
 8008928:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800892a:	f004 f9b1 	bl	800cc90 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800892e:	f856 eb10 	ldr.w	lr, [r6], #16
 8008932:	46b4      	mov	ip, r6
 8008934:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800893a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800893e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008940:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8008944:	e884 0003 	stmia.w	r4, {r0, r1}
 8008948:	4670      	mov	r0, lr
 800894a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800894e:	f004 f87f 	bl	800ca50 <USB_CoreInit>
 8008952:	4604      	mov	r4, r0
 8008954:	b130      	cbz	r0, 8008964 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8008956:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008958:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800895a:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800895c:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 8008960:	b00b      	add	sp, #44	; 0x2c
 8008962:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008964:	4601      	mov	r1, r0
 8008966:	6828      	ldr	r0, [r5, #0]
 8008968:	f004 f99a 	bl	800cca0 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800896c:	6868      	ldr	r0, [r5, #4]
 800896e:	b358      	cbz	r0, 80089c8 <HAL_PCD_Init+0xd0>
 8008970:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8008972:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008976:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8008978:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800897c:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 8008980:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8008984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008988:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800898c:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 8008990:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008994:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008996:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800899a:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800899c:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089a0:	d3ea      	bcc.n	8008978 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 80089a2:	2200      	movs	r2, #0
 80089a4:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089a8:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 80089aa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 80089ae:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089b2:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 80089b4:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089b8:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80089ba:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 80089be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80089c2:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089c6:	d3ed      	bcc.n	80089a4 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80089c8:	466c      	mov	r4, sp
 80089ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80089cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80089d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089d2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80089d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80089da:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80089de:	6828      	ldr	r0, [r5, #0]
 80089e0:	f004 f994 	bl	800cd0c <USB_DevInit>
 80089e4:	4604      	mov	r4, r0
 80089e6:	2800      	cmp	r0, #0
 80089e8:	d1b5      	bne.n	8008956 <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 80089ea:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 80089ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 80089ee:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 80089f2:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 80089f4:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 80089f8:	d00f      	beq.n	8008a1a <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 80089fa:	6828      	ldr	r0, [r5, #0]
 80089fc:	f004 fe00 	bl	800d600 <USB_DevDisconnect>
}
 8008a00:	4620      	mov	r0, r4
 8008a02:	b00b      	add	sp, #44	; 0x2c
 8008a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8008a06:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8008a0a:	f005 fe55 	bl	800e6b8 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8008a0e:	6828      	ldr	r0, [r5, #0]
 8008a10:	e780      	b.n	8008914 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 8008a12:	2401      	movs	r4, #1
}
 8008a14:	4620      	mov	r0, r4
 8008a16:	b00b      	add	sp, #44	; 0x2c
 8008a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	f000 fce0 	bl	80093e0 <HAL_PCDEx_ActivateLPM>
 8008a20:	e7eb      	b.n	80089fa <HAL_PCD_Init+0x102>
 8008a22:	bf00      	nop

08008a24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008a24:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8008a26:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 8008a2a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a2c:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d017      	beq.n	8008a62 <HAL_PCD_Start+0x3e>
 8008a32:	2201      	movs	r2, #1

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008a34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a36:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 8008a38:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008a3c:	d009      	beq.n	8008a52 <HAL_PCD_Start+0x2e>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8008a3e:	f004 f91f 	bl	800cc80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008a42:	6820      	ldr	r0, [r4, #0]
 8008a44:	f004 fdcc 	bl	800d5e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008a48:	2300      	movs	r3, #0

  return HAL_OK;
 8008a4a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8008a4c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 8008a50:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008a52:	69a3      	ldr	r3, [r4, #24]
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d0f2      	beq.n	8008a3e <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a58:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a5e:	6383      	str	r3, [r0, #56]	; 0x38
 8008a60:	e7ed      	b.n	8008a3e <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8008a62:	2002      	movs	r0, #2
}
 8008a64:	bd10      	pop	{r4, pc}
 8008a66:	bf00      	nop

08008a68 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a6c:	6807      	ldr	r7, [r0, #0]
{
 8008a6e:	b089      	sub	sp, #36	; 0x24
 8008a70:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008a72:	4638      	mov	r0, r7
 8008a74:	f004 fe02 	bl	800d67c <USB_GetMode>
 8008a78:	b110      	cbz	r0, 8008a80 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8008a7a:	b009      	add	sp, #36	; 0x24
 8008a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008a80:	4683      	mov	fp, r0
 8008a82:	6820      	ldr	r0, [r4, #0]
 8008a84:	f004 fdcc 	bl	800d620 <USB_ReadInterrupts>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d0f6      	beq.n	8008a7a <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008a8c:	6820      	ldr	r0, [r4, #0]
 8008a8e:	f004 fdc7 	bl	800d620 <USB_ReadInterrupts>
 8008a92:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008a96:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008a98:	d003      	beq.n	8008aa2 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008a9a:	6943      	ldr	r3, [r0, #20]
 8008a9c:	f003 0302 	and.w	r3, r3, #2
 8008aa0:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008aa2:	f004 fdbd 	bl	800d620 <USB_ReadInterrupts>
 8008aa6:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008aaa:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008aac:	d012      	beq.n	8008ad4 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008aae:	6983      	ldr	r3, [r0, #24]
 8008ab0:	f023 0310 	bic.w	r3, r3, #16
 8008ab4:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 8008ab6:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008ab8:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008abc:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	f000 8261 	beq.w	8008f88 <HAL_PCD_IRQHandler+0x520>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008ac6:	2b06      	cmp	r3, #6
 8008ac8:	f000 81b1 	beq.w	8008e2e <HAL_PCD_IRQHandler+0x3c6>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008acc:	6983      	ldr	r3, [r0, #24]
 8008ace:	f043 0310 	orr.w	r3, r3, #16
 8008ad2:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008ad4:	f004 fda4 	bl	800d620 <USB_ReadInterrupts>
 8008ad8:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008adc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008ade:	f040 80cf 	bne.w	8008c80 <HAL_PCD_IRQHandler+0x218>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008ae2:	f004 fd9d 	bl	800d620 <USB_ReadInterrupts>
 8008ae6:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008aea:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008aec:	d175      	bne.n	8008bda <HAL_PCD_IRQHandler+0x172>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008aee:	f004 fd97 	bl	800d620 <USB_ReadInterrupts>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	db5d      	blt.n	8008bb2 <HAL_PCD_IRQHandler+0x14a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008af6:	6820      	ldr	r0, [r4, #0]
 8008af8:	f004 fd92 	bl	800d620 <USB_ReadInterrupts>
 8008afc:	0500      	lsls	r0, r0, #20
 8008afe:	d44d      	bmi.n	8008b9c <HAL_PCD_IRQHandler+0x134>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008b00:	6820      	ldr	r0, [r4, #0]
 8008b02:	f004 fd8d 	bl	800d620 <USB_ReadInterrupts>
 8008b06:	0102      	lsls	r2, r0, #4
 8008b08:	d514      	bpl.n	8008b34 <HAL_PCD_IRQHandler+0xcc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008b0a:	6822      	ldr	r2, [r4, #0]
 8008b0c:	6953      	ldr	r3, [r2, #20]
 8008b0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b12:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8008b14:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f040 8172 	bne.w	8008e02 <HAL_PCD_IRQHandler+0x39a>
        hpcd->LPM_State = LPM_L1;
 8008b1e:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008b20:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 8008b22:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008b26:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008b28:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8008b2c:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008b30:	f000 fc6e 	bl	8009410 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008b34:	6820      	ldr	r0, [r4, #0]
 8008b36:	f004 fd73 	bl	800d620 <USB_ReadInterrupts>
 8008b3a:	04c3      	lsls	r3, r0, #19
 8008b3c:	f100 8116 	bmi.w	8008d6c <HAL_PCD_IRQHandler+0x304>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008b40:	6820      	ldr	r0, [r4, #0]
 8008b42:	f004 fd6d 	bl	800d620 <USB_ReadInterrupts>
 8008b46:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8008b4a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008b4c:	f040 80f7 	bne.w	8008d3e <HAL_PCD_IRQHandler+0x2d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008b50:	f004 fd66 	bl	800d620 <USB_ReadInterrupts>
 8008b54:	0707      	lsls	r7, r0, #28
 8008b56:	f100 80e9 	bmi.w	8008d2c <HAL_PCD_IRQHandler+0x2c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008b5a:	6820      	ldr	r0, [r4, #0]
 8008b5c:	f004 fd60 	bl	800d620 <USB_ReadInterrupts>
 8008b60:	02c6      	lsls	r6, r0, #11
 8008b62:	f100 80d9 	bmi.w	8008d18 <HAL_PCD_IRQHandler+0x2b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008b66:	6820      	ldr	r0, [r4, #0]
 8008b68:	f004 fd5a 	bl	800d620 <USB_ReadInterrupts>
 8008b6c:	0285      	lsls	r5, r0, #10
 8008b6e:	f100 80c9 	bmi.w	8008d04 <HAL_PCD_IRQHandler+0x29c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008b72:	6820      	ldr	r0, [r4, #0]
 8008b74:	f004 fd54 	bl	800d620 <USB_ReadInterrupts>
 8008b78:	0040      	lsls	r0, r0, #1
 8008b7a:	f100 80ba 	bmi.w	8008cf2 <HAL_PCD_IRQHandler+0x28a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008b7e:	6820      	ldr	r0, [r4, #0]
 8008b80:	f004 fd4e 	bl	800d620 <USB_ReadInterrupts>
 8008b84:	0741      	lsls	r1, r0, #29
 8008b86:	f57f af78 	bpl.w	8008a7a <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008b8e:	076a      	lsls	r2, r5, #29
 8008b90:	f100 821b 	bmi.w	8008fca <HAL_PCD_IRQHandler+0x562>
      hpcd->Instance->GOTGINT |= temp;
 8008b94:	685a      	ldr	r2, [r3, #4]
 8008b96:	432a      	orrs	r2, r5
 8008b98:	605a      	str	r2, [r3, #4]
 8008b9a:	e76e      	b.n	8008a7a <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008b9c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8008ba0:	07d9      	lsls	r1, r3, #31
 8008ba2:	f100 820e 	bmi.w	8008fc2 <HAL_PCD_IRQHandler+0x55a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008ba6:	6820      	ldr	r0, [r4, #0]
 8008ba8:	6943      	ldr	r3, [r0, #20]
 8008baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bae:	6143      	str	r3, [r0, #20]
 8008bb0:	e7a7      	b.n	8008b02 <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008bb2:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8008bb6:	f022 0201 	bic.w	r2, r2, #1
 8008bba:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8008bbe:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	f000 812c 	beq.w	8008e20 <HAL_PCD_IRQHandler+0x3b8>
        HAL_PCD_ResumeCallback(hpcd);
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f005 fe1f 	bl	800e80c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008bce:	6820      	ldr	r0, [r4, #0]
 8008bd0:	6943      	ldr	r3, [r0, #20]
 8008bd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bd6:	6143      	str	r3, [r0, #20]
 8008bd8:	e78e      	b.n	8008af8 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008bda:	f004 fd2d 	bl	800d638 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8008bde:	4680      	mov	r8, r0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008be0:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 8008be2:	f1b8 0f00 	cmp.w	r8, #0
 8008be6:	d082      	beq.n	8008aee <HAL_PCD_IRQHandler+0x86>
      epnum = 0U;
 8008be8:	f04f 0a00 	mov.w	sl, #0
 8008bec:	f507 6910 	add.w	r9, r7, #2304	; 0x900
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008bf0:	9703      	str	r7, [sp, #12]
 8008bf2:	4626      	mov	r6, r4
 8008bf4:	4657      	mov	r7, sl
 8008bf6:	f8cd b010 	str.w	fp, [sp, #16]
 8008bfa:	e009      	b.n	8008c10 <HAL_PCD_IRQHandler+0x1a8>
      while (ep_intr != 0U)
 8008bfc:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 8008c00:	f107 0701 	add.w	r7, r7, #1
      while (ep_intr != 0U)
 8008c04:	f106 061c 	add.w	r6, r6, #28
 8008c08:	f109 0920 	add.w	r9, r9, #32
 8008c0c:	f000 8124 	beq.w	8008e58 <HAL_PCD_IRQHandler+0x3f0>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008c10:	f018 0f01 	tst.w	r8, #1
 8008c14:	d0f2      	beq.n	8008bfc <HAL_PCD_IRQHandler+0x194>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008c16:	fa5f fa87 	uxtb.w	sl, r7
 8008c1a:	4651      	mov	r1, sl
 8008c1c:	f004 fd1e 	bl	800d65c <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008c20:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008c22:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008c24:	d515      	bpl.n	8008c52 <HAL_PCD_IRQHandler+0x1ea>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008c26:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008c28:	f007 030f 	and.w	r3, r7, #15
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008c30:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 8008c34:	ea23 0302 	bic.w	r3, r3, r2
 8008c38:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008c3c:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 8008c3e:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008c40:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f000 81c5 	beq.w	8008fd4 <HAL_PCD_IRQHandler+0x56c>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008c4a:	4651      	mov	r1, sl
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f005 fda1 	bl	800e794 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008c52:	0728      	lsls	r0, r5, #28
 8008c54:	d502      	bpl.n	8008c5c <HAL_PCD_IRQHandler+0x1f4>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008c56:	2308      	movs	r3, #8
 8008c58:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008c5c:	06e9      	lsls	r1, r5, #27
 8008c5e:	d502      	bpl.n	8008c66 <HAL_PCD_IRQHandler+0x1fe>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008c60:	2310      	movs	r3, #16
 8008c62:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008c66:	066a      	lsls	r2, r5, #25
 8008c68:	d502      	bpl.n	8008c70 <HAL_PCD_IRQHandler+0x208>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008c6a:	2340      	movs	r3, #64	; 0x40
 8008c6c:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008c70:	07ab      	lsls	r3, r5, #30
 8008c72:	f100 8181 	bmi.w	8008f78 <HAL_PCD_IRQHandler+0x510>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008c76:	062d      	lsls	r5, r5, #24
 8008c78:	f100 812a 	bmi.w	8008ed0 <HAL_PCD_IRQHandler+0x468>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008c7c:	6820      	ldr	r0, [r4, #0]
 8008c7e:	e7bd      	b.n	8008bfc <HAL_PCD_IRQHandler+0x194>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008c80:	f004 fcd2 	bl	800d628 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8008c84:	4605      	mov	r5, r0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008c86:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 8008c88:	2d00      	cmp	r5, #0
 8008c8a:	f43f af2a 	beq.w	8008ae2 <HAL_PCD_IRQHandler+0x7a>
 8008c8e:	f507 6630 	add.w	r6, r7, #2816	; 0xb00
 8008c92:	46a2      	mov	sl, r4
      epnum = 0U;
 8008c94:	f04f 0800 	mov.w	r8, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008c98:	9703      	str	r7, [sp, #12]
 8008c9a:	e008      	b.n	8008cae <HAL_PCD_IRQHandler+0x246>
      while (ep_intr != 0U)
 8008c9c:	086d      	lsrs	r5, r5, #1
        epnum++;
 8008c9e:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 8008ca2:	f106 0620 	add.w	r6, r6, #32
 8008ca6:	f10a 0a1c 	add.w	sl, sl, #28
 8008caa:	f000 80d3 	beq.w	8008e54 <HAL_PCD_IRQHandler+0x3ec>
        if ((ep_intr & 0x1U) != 0U)
 8008cae:	07ef      	lsls	r7, r5, #31
 8008cb0:	d5f4      	bpl.n	8008c9c <HAL_PCD_IRQHandler+0x234>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008cb2:	fa5f f788 	uxtb.w	r7, r8
 8008cb6:	4639      	mov	r1, r7
 8008cb8:	f004 fcc6 	bl	800d648 <USB_ReadDevOutEPInterrupt>
 8008cbc:	4681      	mov	r9, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cbe:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008cc0:	f019 0f01 	tst.w	r9, #1
 8008cc4:	f040 80e5 	bne.w	8008e92 <HAL_PCD_IRQHandler+0x42a>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008cc8:	f019 0f08 	tst.w	r9, #8
 8008ccc:	f040 80c7 	bne.w	8008e5e <HAL_PCD_IRQHandler+0x3f6>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008cd0:	f019 0f10 	tst.w	r9, #16
 8008cd4:	d001      	beq.n	8008cda <HAL_PCD_IRQHandler+0x272>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008cd6:	2310      	movs	r3, #16
 8008cd8:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008cda:	f019 0f20 	tst.w	r9, #32
 8008cde:	d001      	beq.n	8008ce4 <HAL_PCD_IRQHandler+0x27c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008ce0:	2320      	movs	r3, #32
 8008ce2:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008ce4:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8008ce8:	d0d8      	beq.n	8008c9c <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008cea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008cee:	60b3      	str	r3, [r6, #8]
 8008cf0:	e7d4      	b.n	8008c9c <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_ConnectCallback(hpcd);
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f005 fd96 	bl	800e824 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008cf8:	6820      	ldr	r0, [r4, #0]
 8008cfa:	6943      	ldr	r3, [r0, #20]
 8008cfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d00:	6143      	str	r3, [r0, #20]
 8008d02:	e73d      	b.n	8008b80 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008d04:	4620      	mov	r0, r4
 8008d06:	2100      	movs	r1, #0
 8008d08:	f005 fd84 	bl	800e814 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008d0c:	6820      	ldr	r0, [r4, #0]
 8008d0e:	6943      	ldr	r3, [r0, #20]
 8008d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d14:	6143      	str	r3, [r0, #20]
 8008d16:	e72d      	b.n	8008b74 <HAL_PCD_IRQHandler+0x10c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008d18:	4620      	mov	r0, r4
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	f005 fd7e 	bl	800e81c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008d20:	6820      	ldr	r0, [r4, #0]
 8008d22:	6943      	ldr	r3, [r0, #20]
 8008d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d28:	6143      	str	r3, [r0, #20]
 8008d2a:	e71d      	b.n	8008b68 <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f005 fd3b 	bl	800e7a8 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008d32:	6820      	ldr	r0, [r4, #0]
 8008d34:	6943      	ldr	r3, [r0, #20]
 8008d36:	f003 0308 	and.w	r3, r3, #8
 8008d3a:	6143      	str	r3, [r0, #20]
 8008d3c:	e70e      	b.n	8008b5c <HAL_PCD_IRQHandler+0xf4>
      (void)USB_ActivateSetup(hpcd->Instance);
 8008d3e:	f004 fca1 	bl	800d684 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008d42:	6820      	ldr	r0, [r4, #0]
 8008d44:	f004 f91a 	bl	800cf7c <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008d48:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008d4a:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008d4c:	f001 f900 	bl	8009f50 <HAL_RCC_GetHCLKFreq>
 8008d50:	7b22      	ldrb	r2, [r4, #12]
 8008d52:	4601      	mov	r1, r0
 8008d54:	4628      	mov	r0, r5
 8008d56:	f003 ff19 	bl	800cb8c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f005 fd28 	bl	800e7b0 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008d60:	6820      	ldr	r0, [r4, #0]
 8008d62:	6943      	ldr	r3, [r0, #20]
 8008d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d68:	6143      	str	r3, [r0, #20]
 8008d6a:	e6f1      	b.n	8008b50 <HAL_PCD_IRQHandler+0xe8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008d6c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8008d70:	f507 6500 	add.w	r5, r7, #2048	; 0x800
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008d74:	2110      	movs	r1, #16
 8008d76:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008d78:	f023 0301 	bic.w	r3, r3, #1
 8008d7c:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008d7e:	f004 f8d5 	bl	800cf2c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d82:	6860      	ldr	r0, [r4, #4]
 8008d84:	b1e0      	cbz	r0, 8008dc0 <HAL_PCD_IRQHandler+0x358>
 8008d86:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008d8a:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8008d8e:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d90:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008d94:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d96:	3320      	adds	r3, #32
 8008d98:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008d9a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8008d9e:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008da2:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008da6:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8008daa:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8008dae:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008db2:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8008db6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8008dba:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008dbe:	d1e6      	bne.n	8008d8e <HAL_PCD_IRQHandler+0x326>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008dc0:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008dc2:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008dc4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008dc8:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008dca:	b9f2      	cbnz	r2, 8008e0a <HAL_PCD_IRQHandler+0x3a2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008dcc:	696a      	ldr	r2, [r5, #20]
 8008dce:	f242 032b 	movw	r3, #8235	; 0x202b
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008dd6:	692b      	ldr	r3, [r5, #16]
 8008dd8:	f043 030b 	orr.w	r3, r3, #11
 8008ddc:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008dde:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008de2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008de6:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008de8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008dec:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008dee:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008df2:	f004 fc5d 	bl	800d6b0 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008df6:	6820      	ldr	r0, [r4, #0]
 8008df8:	6943      	ldr	r3, [r0, #20]
 8008dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008dfe:	6143      	str	r3, [r0, #20]
 8008e00:	e69f      	b.n	8008b42 <HAL_PCD_IRQHandler+0xda>
        HAL_PCD_SuspendCallback(hpcd);
 8008e02:	4620      	mov	r0, r4
 8008e04:	f005 fcea 	bl	800e7dc <HAL_PCD_SuspendCallback>
 8008e08:	e694      	b.n	8008b34 <HAL_PCD_IRQHandler+0xcc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008e0a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8008e0e:	f043 030b 	orr.w	r3, r3, #11
 8008e12:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008e16:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008e18:	f043 030b 	orr.w	r3, r3, #11
 8008e1c:	646b      	str	r3, [r5, #68]	; 0x44
 8008e1e:	e7de      	b.n	8008dde <HAL_PCD_IRQHandler+0x376>
        hpcd->LPM_State = LPM_L0;
 8008e20:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008e22:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8008e24:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008e28:	f000 faf2 	bl	8009410 <HAL_PCDEx_LPM_Callback>
 8008e2c:	e6cf      	b.n	8008bce <HAL_PCD_IRQHandler+0x166>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008e2e:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008e32:	2208      	movs	r2, #8
 8008e34:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8008e38:	4638      	mov	r0, r7
 8008e3a:	f004 fb39 	bl	800d4b0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008e3e:	f3c5 130a 	ubfx	r3, r5, #4, #11
 8008e42:	eb04 0286 	add.w	r2, r4, r6, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008e46:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008e48:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8008e4c:	440b      	add	r3, r1
 8008e4e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8008e52:	e63b      	b.n	8008acc <HAL_PCD_IRQHandler+0x64>
 8008e54:	9f03      	ldr	r7, [sp, #12]
 8008e56:	e644      	b.n	8008ae2 <HAL_PCD_IRQHandler+0x7a>
 8008e58:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 8008e5c:	e647      	b.n	8008aee <HAL_PCD_IRQHandler+0x86>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008e5e:	2208      	movs	r2, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008e60:	eb00 1348 	add.w	r3, r0, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008e64:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008e6a:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e6c:	4890      	ldr	r0, [pc, #576]	; (80090b0 <HAL_PCD_IRQHandler+0x648>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008e6e:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e70:	4282      	cmp	r2, r0
 8008e72:	f240 80c0 	bls.w	8008ff6 <HAL_PCD_IRQHandler+0x58e>
 8008e76:	040a      	lsls	r2, r1, #16
 8008e78:	d502      	bpl.n	8008e80 <HAL_PCD_IRQHandler+0x418>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008e7e:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008e80:	4620      	mov	r0, r4
 8008e82:	f005 fc77 	bl	800e774 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008e86:	6921      	ldr	r1, [r4, #16]
 8008e88:	2901      	cmp	r1, #1
 8008e8a:	f000 80df 	beq.w	800904c <HAL_PCD_IRQHandler+0x5e4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008e8e:	6820      	ldr	r0, [r4, #0]
 8008e90:	e71e      	b.n	8008cd0 <HAL_PCD_IRQHandler+0x268>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008e92:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 8008e94:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008e96:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008e98:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 8008e9c:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008e9e:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008ea2:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 8008ea6:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8008ea8:	f000 80aa 	beq.w	8009000 <HAL_PCD_IRQHandler+0x598>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008eac:	4981      	ldr	r1, [pc, #516]	; (80090b4 <HAL_PCD_IRQHandler+0x64c>)
 8008eae:	458c      	cmp	ip, r1
 8008eb0:	f000 80bf 	beq.w	8009032 <HAL_PCD_IRQHandler+0x5ca>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008eb4:	f1b8 0f00 	cmp.w	r8, #0
 8008eb8:	d104      	bne.n	8008ec4 <HAL_PCD_IRQHandler+0x45c>
 8008eba:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8008ebe:	2a00      	cmp	r2, #0
 8008ec0:	f000 80ef 	beq.w	80090a2 <HAL_PCD_IRQHandler+0x63a>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	f005 fc5a 	bl	800e780 <HAL_PCD_DataOutStageCallback>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ecc:	6820      	ldr	r0, [r4, #0]
 8008ece:	e6fb      	b.n	8008cc8 <HAL_PCD_IRQHandler+0x260>
  if (ep->xfer_count > ep->xfer_len)
 8008ed0:	e9d6 5314 	ldrd	r5, r3, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ed4:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 8008ed8:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008eda:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 8008edc:	f63f ae8e 	bhi.w	8008bfc <HAL_PCD_IRQHandler+0x194>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ee0:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8008ee4:	6c71      	ldr	r1, [r6, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee6:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008eea:	eb02 1247 	add.w	r2, r2, r7, lsl #5
 8008eee:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 8008ef0:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 8008ef2:	428a      	cmp	r2, r1
 8008ef4:	bf28      	it	cs
 8008ef6:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ef8:	9905      	ldr	r1, [sp, #20]
 8008efa:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 8008efc:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008efe:	b289      	uxth	r1, r1
 8008f00:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 8008f04:	f0c0 8091 	bcc.w	800902a <HAL_PCD_IRQHandler+0x5c2>
 8008f08:	464a      	mov	r2, r9
 8008f0a:	9706      	str	r7, [sp, #24]
 8008f0c:	46c1      	mov	r9, r8
 8008f0e:	4627      	mov	r7, r4
 8008f10:	46d0      	mov	r8, sl
 8008f12:	9c05      	ldr	r4, [sp, #20]
 8008f14:	4692      	mov	sl, r2
 8008f16:	e018      	b.n	8008f4a <HAL_PCD_IRQHandler+0x4e2>
 8008f18:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008f1a:	4642      	mov	r2, r8
 8008f1c:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8008f1e:	4658      	mov	r0, fp
 8008f20:	429d      	cmp	r5, r3
 8008f22:	bf28      	it	cs
 8008f24:	461d      	movcs	r5, r3
 8008f26:	7c3b      	ldrb	r3, [r7, #16]
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	b2ab      	uxth	r3, r5
 8008f2c:	f004 faaa 	bl	800d484 <USB_WritePacket>
    ep->xfer_buff  += len;
 8008f30:	6cb3      	ldr	r3, [r6, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008f32:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 8008f34:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008f36:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 8008f38:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 8008f3a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8008f3c:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 8008f3e:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008f40:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 8008f44:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008f46:	d368      	bcc.n	800901a <HAL_PCD_IRQHandler+0x5b2>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008f48:	6d35      	ldr	r5, [r6, #80]	; 0x50
 8008f4a:	42ab      	cmp	r3, r5
    len = ep->xfer_len - ep->xfer_count;
 8008f4c:	eba5 0503 	sub.w	r5, r5, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008f50:	d3e2      	bcc.n	8008f18 <HAL_PCD_IRQHandler+0x4b0>
 8008f52:	463c      	mov	r4, r7
 8008f54:	46c8      	mov	r8, r9
 8008f56:	9f06      	ldr	r7, [sp, #24]
 8008f58:	46d1      	mov	r9, sl
 8008f5a:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008f5e:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008f60:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008f62:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008f64:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008f68:	f007 030f 	and.w	r3, r7, #15
 8008f6c:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008f6e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8008f70:	ea23 0302 	bic.w	r3, r3, r2
 8008f74:	634b      	str	r3, [r1, #52]	; 0x34
 8008f76:	e641      	b.n	8008bfc <HAL_PCD_IRQHandler+0x194>
            (void)USB_FlushTxFifo(USBx, epnum);
 8008f78:	4639      	mov	r1, r7
 8008f7a:	9803      	ldr	r0, [sp, #12]
 8008f7c:	f003 ffd6 	bl	800cf2c <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008f80:	2302      	movs	r3, #2
 8008f82:	f8c9 3008 	str.w	r3, [r9, #8]
 8008f86:	e676      	b.n	8008c76 <HAL_PCD_IRQHandler+0x20e>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008f88:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008f8c:	421d      	tst	r5, r3
 8008f8e:	f43f ad9d 	beq.w	8008acc <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008f92:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8008f96:	f3c5 120a 	ubfx	r2, r5, #4, #11
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008fa0:	4615      	mov	r5, r2
 8008fa2:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 8008fa6:	f004 fa83 	bl	800d4b0 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008faa:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008fae:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008fb0:	442b      	add	r3, r5
 8008fb2:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008fb6:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 8008fba:	442b      	add	r3, r5
 8008fbc:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 8008fc0:	e584      	b.n	8008acc <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f005 fc0a 	bl	800e7dc <HAL_PCD_SuspendCallback>
 8008fc8:	e5ed      	b.n	8008ba6 <HAL_PCD_IRQHandler+0x13e>
        HAL_PCD_DisconnectCallback(hpcd);
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f005 fc2e 	bl	800e82c <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	e5df      	b.n	8008b94 <HAL_PCD_IRQHandler+0x12c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008fd4:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 8008fd8:	4413      	add	r3, r2
 8008fda:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008fdc:	2f00      	cmp	r7, #0
 8008fde:	f47f ae34 	bne.w	8008c4a <HAL_PCD_IRQHandler+0x1e2>
 8008fe2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f47f ae30 	bne.w	8008c4a <HAL_PCD_IRQHandler+0x1e2>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008fea:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008fee:	6820      	ldr	r0, [r4, #0]
 8008ff0:	f004 fb5e 	bl	800d6b0 <USB_EP0_OutStart>
 8008ff4:	e629      	b.n	8008c4a <HAL_PCD_IRQHandler+0x1e2>
  HAL_PCD_SetupStageCallback(hpcd);
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f005 fbbc 	bl	800e774 <HAL_PCD_SetupStageCallback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008ffc:	6820      	ldr	r0, [r4, #0]
 8008ffe:	e667      	b.n	8008cd0 <HAL_PCD_IRQHandler+0x268>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009000:	0719      	lsls	r1, r3, #28
 8009002:	d51e      	bpl.n	8009042 <HAL_PCD_IRQHandler+0x5da>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009004:	492a      	ldr	r1, [pc, #168]	; (80090b0 <HAL_PCD_IRQHandler+0x648>)
 8009006:	458c      	cmp	ip, r1
 8009008:	f67f ae5e 	bls.w	8008cc8 <HAL_PCD_IRQHandler+0x260>
 800900c:	041f      	lsls	r7, r3, #16
 800900e:	f57f ae5b 	bpl.w	8008cc8 <HAL_PCD_IRQHandler+0x260>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009016:	6093      	str	r3, [r2, #8]
 8009018:	e656      	b.n	8008cc8 <HAL_PCD_IRQHandler+0x260>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800901a:	463c      	mov	r4, r7
 800901c:	46c8      	mov	r8, r9
 800901e:	9f06      	ldr	r7, [sp, #24]
 8009020:	46d1      	mov	r9, sl
 8009022:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_len <= ep->xfer_count)
 8009026:	6d35      	ldr	r5, [r6, #80]	; 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009028:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 800902a:	42ab      	cmp	r3, r5
 800902c:	f4ff ade6 	bcc.w	8008bfc <HAL_PCD_IRQHandler+0x194>
 8009030:	e795      	b.n	8008f5e <HAL_PCD_IRQHandler+0x4f6>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009032:	0419      	lsls	r1, r3, #16
 8009034:	d4ed      	bmi.n	8009012 <HAL_PCD_IRQHandler+0x5aa>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009036:	0699      	lsls	r1, r3, #26
 8009038:	f57f af44 	bpl.w	8008ec4 <HAL_PCD_IRQHandler+0x45c>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800903c:	2120      	movs	r1, #32
 800903e:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009040:	e740      	b.n	8008ec4 <HAL_PCD_IRQHandler+0x45c>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009042:	0699      	lsls	r1, r3, #26
 8009044:	d508      	bpl.n	8009058 <HAL_PCD_IRQHandler+0x5f0>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009046:	2320      	movs	r3, #32
 8009048:	6093      	str	r3, [r2, #8]
 800904a:	e63d      	b.n	8008cc8 <HAL_PCD_IRQHandler+0x260>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800904c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8009050:	6820      	ldr	r0, [r4, #0]
 8009052:	f004 fb2d 	bl	800d6b0 <USB_EP0_OutStart>
 8009056:	e71a      	b.n	8008e8e <HAL_PCD_IRQHandler+0x426>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009058:	f013 0f28 	tst.w	r3, #40	; 0x28
 800905c:	f47f ae34 	bne.w	8008cc8 <HAL_PCD_IRQHandler+0x260>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009060:	4913      	ldr	r1, [pc, #76]	; (80090b0 <HAL_PCD_IRQHandler+0x648>)
 8009062:	458c      	cmp	ip, r1
 8009064:	d901      	bls.n	800906a <HAL_PCD_IRQHandler+0x602>
 8009066:	041b      	lsls	r3, r3, #16
 8009068:	d4d3      	bmi.n	8009012 <HAL_PCD_IRQHandler+0x5aa>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800906a:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800906c:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009070:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009074:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 8009076:	f8ca 2214 	str.w	r2, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800907a:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
 800907e:	440a      	add	r2, r1
 8009080:	f8ca 2208 	str.w	r2, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009084:	f1b8 0f00 	cmp.w	r8, #0
 8009088:	f47f af1c 	bne.w	8008ec4 <HAL_PCD_IRQHandler+0x45c>
 800908c:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8009090:	2a00      	cmp	r2, #0
 8009092:	f47f af17 	bne.w	8008ec4 <HAL_PCD_IRQHandler+0x45c>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009096:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800909a:	2101      	movs	r1, #1
 800909c:	f004 fb08 	bl	800d6b0 <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80090a0:	e710      	b.n	8008ec4 <HAL_PCD_IRQHandler+0x45c>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80090a2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80090a6:	4641      	mov	r1, r8
 80090a8:	f004 fb02 	bl	800d6b0 <USB_EP0_OutStart>
 80090ac:	e70a      	b.n	8008ec4 <HAL_PCD_IRQHandler+0x45c>
 80090ae:	bf00      	nop
 80090b0:	4f54300a 	.word	0x4f54300a
 80090b4:	4f54310a 	.word	0x4f54310a

080090b8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80090b8:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80090bc:	2a01      	cmp	r2, #1
 80090be:	d00e      	beq.n	80090de <HAL_PCD_SetAddress+0x26>
 80090c0:	2201      	movs	r2, #1
{
 80090c2:	b510      	push	{r4, lr}
 80090c4:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80090c6:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 80090c8:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 80090cc:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80090d0:	f004 fa74 	bl	800d5bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80090d4:	2300      	movs	r3, #0
  return HAL_OK;
 80090d6:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 80090d8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 80090dc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80090de:	2002      	movs	r0, #2
}
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop

080090e4 <HAL_PCD_EP_Open>:
{
 80090e4:	b510      	push	{r4, lr}
 80090e6:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 80090ea:	0609      	lsls	r1, r1, #24
{
 80090ec:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80090ee:	d427      	bmi.n	8009140 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090f0:	f04f 0c1c 	mov.w	ip, #28
 80090f4:	fb0c 0c0e 	mla	ip, ip, lr, r0
 80090f8:	f50c 71fe 	add.w	r1, ip, #508	; 0x1fc
    ep->is_in = 0U;
 80090fc:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 8009100:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8009104:	2000      	movs	r0, #0
 8009106:	f88c 01fd 	strb.w	r0, [ip, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 800910a:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800910c:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800910e:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 8009112:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8009114:	b10a      	cbz	r2, 800911a <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8009116:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800911a:	2b02      	cmp	r3, #2
 800911c:	d101      	bne.n	8009122 <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8009122:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8009126:	2b01      	cmp	r3, #1
 8009128:	d018      	beq.n	800915c <HAL_PCD_EP_Open+0x78>
 800912a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800912c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800912e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009132:	f003 ff2f 	bl	800cf94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009136:	2300      	movs	r3, #0
  return ret;
 8009138:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800913a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800913e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009140:	201c      	movs	r0, #28
    ep->is_in = 1U;
 8009142:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009146:	fb00 400e 	mla	r0, r0, lr, r4
 800914a:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800914e:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 8009152:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8009156:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 800915a:	e7d6      	b.n	800910a <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800915c:	2002      	movs	r0, #2
}
 800915e:	bd10      	pop	{r4, pc}

08009160 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8009160:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009164:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009168:	f04f 011c 	mov.w	r1, #28
{
 800916c:	b510      	push	{r4, lr}
 800916e:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8009170:	d11a      	bne.n	80091a8 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009172:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8009176:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800917a:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800917c:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8009180:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009184:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009188:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800918a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800918e:	2b01      	cmp	r3, #1
 8009190:	d019      	beq.n	80091c6 <HAL_PCD_EP_Close+0x66>
 8009192:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009194:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009196:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800919a:	f003 ff43 	bl	800d024 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800919e:	2300      	movs	r3, #0
  return HAL_OK;
 80091a0:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 80091a2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 80091a6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091a8:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 80091ac:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80091b0:	2001      	movs	r0, #1
 80091b2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091b6:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 80091b8:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 80091bc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80091be:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d1e5      	bne.n	8009192 <HAL_PCD_EP_Close+0x32>
 80091c6:	2002      	movs	r0, #2
}
 80091c8:	bd10      	pop	{r4, pc}
 80091ca:	bf00      	nop

080091cc <HAL_PCD_EP_Receive>:
{
 80091cc:	b510      	push	{r4, lr}
 80091ce:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091d2:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 80091d4:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091d8:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 80091dc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091e0:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 80091e4:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 80091e8:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 80091ea:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->num = ep_addr & EP_ADDR_MSK;
 80091ee:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  ep->xfer_count = 0U;
 80091f2:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 80091f6:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 80091fa:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80091fc:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 80091fe:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8009200:	bf08      	it	eq
 8009202:	f8cc 220c 	streq.w	r2, [ip, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009206:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009208:	b91c      	cbnz	r4, 8009212 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800920a:	f004 f881 	bl	800d310 <USB_EP0StartXfer>
}
 800920e:	2000      	movs	r0, #0
 8009210:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009212:	f003 ff65 	bl	800d0e0 <USB_EPStartXfer>
}
 8009216:	2000      	movs	r0, #0
 8009218:	bd10      	pop	{r4, pc}
 800921a:	bf00      	nop

0800921c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800921c:	f001 010f 	and.w	r1, r1, #15
 8009220:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009224:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8009228:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop

08009230 <HAL_PCD_EP_Transmit>:
{
 8009230:	b510      	push	{r4, lr}
 8009232:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009236:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8009238:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800923c:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 8009240:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009244:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8009246:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 800924a:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800924c:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 8009250:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 8009254:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8009256:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 800925a:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800925e:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009260:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8009262:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8009264:	bf08      	it	eq
 8009266:	f8cc 204c 	streq.w	r2, [ip, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800926a:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800926c:	b91c      	cbnz	r4, 8009276 <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800926e:	f004 f84f 	bl	800d310 <USB_EP0StartXfer>
}
 8009272:	2000      	movs	r0, #0
 8009274:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009276:	f003 ff33 	bl	800d0e0 <USB_EPStartXfer>
}
 800927a:	2000      	movs	r0, #0
 800927c:	bd10      	pop	{r4, pc}
 800927e:	bf00      	nop

08009280 <HAL_PCD_EP_SetStall>:
{
 8009280:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009282:	6843      	ldr	r3, [r0, #4]
 8009284:	f001 050f 	and.w	r5, r1, #15
 8009288:	429d      	cmp	r5, r3
 800928a:	d834      	bhi.n	80092f6 <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 800928c:	060b      	lsls	r3, r1, #24
 800928e:	4604      	mov	r4, r0
 8009290:	d41d      	bmi.n	80092ce <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 8009292:	221c      	movs	r2, #28
    ep->is_in = 0U;
 8009294:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8009298:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 800929c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80092a0:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80092a2:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 80092a6:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 80092aa:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80092ac:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80092ae:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80092b0:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d01c      	beq.n	80092f2 <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80092b8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80092ba:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80092be:	f004 f91d 	bl	800d4fc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80092c2:	b1d5      	cbz	r5, 80092fa <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 80092c4:	2300      	movs	r3, #0
  return HAL_OK;
 80092c6:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 80092c8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 80092cc:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092ce:	211c      	movs	r1, #28
    ep->is_in = 1U;
 80092d0:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80092d4:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092d6:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 80092da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092de:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 80092e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 80092e4:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80092e6:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80092e8:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80092ea:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d1e2      	bne.n	80092b8 <HAL_PCD_EP_SetStall+0x38>
 80092f2:	2002      	movs	r0, #2
}
 80092f4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80092f6:	2001      	movs	r0, #1
}
 80092f8:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80092fa:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80092fe:	7c21      	ldrb	r1, [r4, #16]
 8009300:	6820      	ldr	r0, [r4, #0]
 8009302:	f004 f9d5 	bl	800d6b0 <USB_EP0_OutStart>
 8009306:	e7dd      	b.n	80092c4 <HAL_PCD_EP_SetStall+0x44>

08009308 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009308:	6842      	ldr	r2, [r0, #4]
{
 800930a:	b538      	push	{r3, r4, r5, lr}
 800930c:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009310:	4293      	cmp	r3, r2
 8009312:	d832      	bhi.n	800937a <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8009314:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009318:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800931a:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800931e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8009322:	d119      	bne.n	8009358 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009324:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8009328:	2000      	movs	r0, #0
 800932a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800932e:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009330:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8009334:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8009338:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800933a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800933c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8009340:	2b01      	cmp	r3, #1
 8009342:	d018      	beq.n	8009376 <HAL_PCD_EP_ClrStall+0x6e>
 8009344:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009346:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009348:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800934c:	f004 f90a 	bl	800d564 <USB_EPClearStall>
  return HAL_OK;
 8009350:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8009352:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 8009356:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009358:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800935c:	2001      	movs	r0, #1
 800935e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 8009362:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009364:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8009366:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800936a:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800936c:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800936e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8009372:	2b01      	cmp	r3, #1
 8009374:	d1e6      	bne.n	8009344 <HAL_PCD_EP_ClrStall+0x3c>
 8009376:	2002      	movs	r0, #2
}
 8009378:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800937a:	2001      	movs	r0, #1
}
 800937c:	bd38      	pop	{r3, r4, r5, pc}
 800937e:	bf00      	nop

08009380 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009380:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009382:	6804      	ldr	r4, [r0, #0]
 8009384:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8009386:	b931      	cbnz	r1, 8009396 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009388:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800938c:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800938e:	2000      	movs	r0, #0
 8009390:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009394:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009396:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8009398:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800939c:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80093a0:	d00b      	beq.n	80093ba <HAL_PCDEx_SetTxFiFo+0x3a>
 80093a2:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80093a4:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 80093a8:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80093aa:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 80093ae:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80093b0:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 80093b2:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80093b4:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80093b8:	d3f4      	bcc.n	80093a4 <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80093ba:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80093be:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80093c2:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 80093c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80093ca:	f8cc 0004 	str.w	r0, [ip, #4]
}
 80093ce:	2000      	movs	r0, #0
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop

080093d4 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80093d4:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 80093d6:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	6259      	str	r1, [r3, #36]	; 0x24
}
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop

080093e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80093e0:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 80093e2:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80093e6:	4909      	ldr	r1, [pc, #36]	; (800940c <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093e8:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 80093ea:	4660      	mov	r0, ip
{
 80093ec:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 80093ee:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 80093f0:	f883 c3f4 	strb.w	ip, [r3, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 80093f4:	f8c3 43fc 	str.w	r4, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80093f8:	6993      	ldr	r3, [r2, #24]
}
 80093fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80093fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009402:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009404:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009406:	4319      	orrs	r1, r3
 8009408:	6551      	str	r1, [r2, #84]	; 0x54
}
 800940a:	4770      	bx	lr
 800940c:	10000003 	.word	0x10000003

08009410 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop

08009414 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009414:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009416:	4c10      	ldr	r4, [pc, #64]	; (8009458 <HAL_PWREx_ConfigSupply+0x44>)
 8009418:	68e3      	ldr	r3, [r4, #12]
 800941a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800941e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009420:	d105      	bne.n	800942e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009422:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009426:	1a18      	subs	r0, r3, r0
 8009428:	bf18      	it	ne
 800942a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800942c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800942e:	f023 0307 	bic.w	r3, r3, #7
 8009432:	4318      	orrs	r0, r3
 8009434:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8009436:	f7fc fa4b 	bl	80058d0 <HAL_GetTick>
 800943a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800943c:	e005      	b.n	800944a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800943e:	f7fc fa47 	bl	80058d0 <HAL_GetTick>
 8009442:	1b40      	subs	r0, r0, r5
 8009444:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009448:	d804      	bhi.n	8009454 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800944a:	6863      	ldr	r3, [r4, #4]
 800944c:	049b      	lsls	r3, r3, #18
 800944e:	d5f6      	bpl.n	800943e <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8009450:	2000      	movs	r0, #0
}
 8009452:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8009454:	2001      	movs	r0, #1
}
 8009456:	bd38      	pop	{r3, r4, r5, pc}
 8009458:	58024800 	.word	0x58024800

0800945c <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800945c:	4a02      	ldr	r2, [pc, #8]	; (8009468 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800945e:	68d3      	ldr	r3, [r2, #12]
 8009460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009464:	60d3      	str	r3, [r2, #12]
}
 8009466:	4770      	bx	lr
 8009468:	58024800 	.word	0x58024800

0800946c <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800946c:	4b3b      	ldr	r3, [pc, #236]	; (800955c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800946e:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009472:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009474:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8009476:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800947a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800947c:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8009480:	d038      	beq.n	80094f4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009482:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009486:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800948a:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800948e:	fb05 f101 	mul.w	r1, r5, r1
 8009492:	2a01      	cmp	r2, #1
 8009494:	ee07 1a90 	vmov	s15, r1
 8009498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 800949c:	d002      	beq.n	80094a4 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800949e:	2a02      	cmp	r2, #2
 80094a0:	d04e      	beq.n	8009540 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 80094a2:	b34a      	cbz	r2, 80094f8 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094a4:	ee07 0a90 	vmov	s15, r0
 80094a8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8009560 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 80094ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b2:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80094b6:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8009564 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80094ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094be:	ee06 3a90 	vmov	s13, r3
 80094c2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80094c6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80094ca:	ee76 6a85 	vadd.f32	s13, s13, s10
 80094ce:	eee7 6a25 	vfma.f32	s13, s14, s11
 80094d2:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80094d6:	4b21      	ldr	r3, [pc, #132]	; (800955c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 80094d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094da:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80094de:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80094e0:	ee07 3a90 	vmov	s15, r3
 80094e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80094e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094f0:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80094f4:	bc30      	pop	{r4, r5}
 80094f6:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	0692      	lsls	r2, r2, #26
 80094fc:	d527      	bpl.n	800954e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094fe:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009500:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009504:	4a18      	ldr	r2, [pc, #96]	; (8009568 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009506:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800950a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800950c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009514:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8009564 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8009518:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800951c:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800951e:	ee06 3a90 	vmov	s13, r3
 8009522:	ee05 2a90 	vmov	s11, r2
 8009526:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800952a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800952e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009532:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009536:	eee7 6a05 	vfma.f32	s13, s14, s10
 800953a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800953e:	e7ca      	b.n	80094d6 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009540:	ee07 0a90 	vmov	s15, r0
 8009544:	eddf 6a09 	vldr	s13, [pc, #36]	; 800956c <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8009548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800954c:	e7b0      	b.n	80094b0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800954e:	ee07 0a90 	vmov	s15, r0
 8009552:	eddf 6a07 	vldr	s13, [pc, #28]	; 8009570 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8009556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800955a:	e7a9      	b.n	80094b0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800955c:	58024400 	.word	0x58024400
 8009560:	4a742400 	.word	0x4a742400
 8009564:	39000000 	.word	0x39000000
 8009568:	03d09000 	.word	0x03d09000
 800956c:	4bbebc20 	.word	0x4bbebc20
 8009570:	4c742400 	.word	0x4c742400

08009574 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8009574:	2800      	cmp	r0, #0
 8009576:	f000 81e8 	beq.w	800994a <HAL_RCC_OscConfig+0x3d6>
{
 800957a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800957c:	6803      	ldr	r3, [r0, #0]
 800957e:	4604      	mov	r4, r0
 8009580:	07d9      	lsls	r1, r3, #31
 8009582:	d52e      	bpl.n	80095e2 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009584:	49a4      	ldr	r1, [pc, #656]	; (8009818 <HAL_RCC_OscConfig+0x2a4>)
 8009586:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009588:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800958a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800958e:	2a10      	cmp	r2, #16
 8009590:	f000 8107 	beq.w	80097a2 <HAL_RCC_OscConfig+0x22e>
 8009594:	2a18      	cmp	r2, #24
 8009596:	f000 80ff 	beq.w	8009798 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800959a:	6863      	ldr	r3, [r4, #4]
 800959c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095a0:	f000 812a 	beq.w	80097f8 <HAL_RCC_OscConfig+0x284>
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f000 8168 	beq.w	800987a <HAL_RCC_OscConfig+0x306>
 80095aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095ae:	4b9a      	ldr	r3, [pc, #616]	; (8009818 <HAL_RCC_OscConfig+0x2a4>)
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	f000 8269 	beq.w	8009a88 <HAL_RCC_OscConfig+0x514>
 80095b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80095c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80095c4:	f7fc f984 	bl	80058d0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80095c8:	4e93      	ldr	r6, [pc, #588]	; (8009818 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 80095ca:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80095cc:	e005      	b.n	80095da <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80095ce:	f7fc f97f 	bl	80058d0 <HAL_GetTick>
 80095d2:	1b40      	subs	r0, r0, r5
 80095d4:	2864      	cmp	r0, #100	; 0x64
 80095d6:	f200 814e 	bhi.w	8009876 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80095da:	6833      	ldr	r3, [r6, #0]
 80095dc:	039b      	lsls	r3, r3, #14
 80095de:	d5f6      	bpl.n	80095ce <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	079d      	lsls	r5, r3, #30
 80095e4:	f100 808a 	bmi.w	80096fc <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80095e8:	06d9      	lsls	r1, r3, #27
 80095ea:	d533      	bpl.n	8009654 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095ec:	4a8a      	ldr	r2, [pc, #552]	; (8009818 <HAL_RCC_OscConfig+0x2a4>)
 80095ee:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80095f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80095f6:	2b08      	cmp	r3, #8
 80095f8:	f000 80e3 	beq.w	80097c2 <HAL_RCC_OscConfig+0x24e>
 80095fc:	2b18      	cmp	r3, #24
 80095fe:	f000 80db 	beq.w	80097b8 <HAL_RCC_OscConfig+0x244>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009602:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8009604:	4d84      	ldr	r5, [pc, #528]	; (8009818 <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009606:	2b00      	cmp	r3, #0
 8009608:	f000 816f 	beq.w	80098ea <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 800960c:	682b      	ldr	r3, [r5, #0]
 800960e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009612:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009614:	f7fc f95c 	bl	80058d0 <HAL_GetTick>
 8009618:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800961a:	e005      	b.n	8009628 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800961c:	f7fc f958 	bl	80058d0 <HAL_GetTick>
 8009620:	1b80      	subs	r0, r0, r6
 8009622:	2802      	cmp	r0, #2
 8009624:	f200 8127 	bhi.w	8009876 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	05db      	lsls	r3, r3, #23
 800962c:	d5f6      	bpl.n	800961c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800962e:	f7fc f967 	bl	8005900 <HAL_GetREVID>
 8009632:	f241 0303 	movw	r3, #4099	; 0x1003
 8009636:	4298      	cmp	r0, r3
 8009638:	f200 8247 	bhi.w	8009aca <HAL_RCC_OscConfig+0x556>
 800963c:	6a22      	ldr	r2, [r4, #32]
 800963e:	686b      	ldr	r3, [r5, #4]
 8009640:	2a20      	cmp	r2, #32
 8009642:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009646:	bf0c      	ite	eq
 8009648:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800964c:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8009650:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009652:	6823      	ldr	r3, [r4, #0]
 8009654:	071d      	lsls	r5, r3, #28
 8009656:	d516      	bpl.n	8009686 <HAL_RCC_OscConfig+0x112>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009658:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800965a:	4d6f      	ldr	r5, [pc, #444]	; (8009818 <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800965c:	2b00      	cmp	r3, #0
 800965e:	f000 8122 	beq.w	80098a6 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 8009662:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009664:	f043 0301 	orr.w	r3, r3, #1
 8009668:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800966a:	f7fc f931 	bl	80058d0 <HAL_GetTick>
 800966e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009670:	e005      	b.n	800967e <HAL_RCC_OscConfig+0x10a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009672:	f7fc f92d 	bl	80058d0 <HAL_GetTick>
 8009676:	1b80      	subs	r0, r0, r6
 8009678:	2802      	cmp	r0, #2
 800967a:	f200 80fc 	bhi.w	8009876 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800967e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009680:	0798      	lsls	r0, r3, #30
 8009682:	d5f6      	bpl.n	8009672 <HAL_RCC_OscConfig+0xfe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	069a      	lsls	r2, r3, #26
 8009688:	d516      	bpl.n	80096b8 <HAL_RCC_OscConfig+0x144>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800968a:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800968c:	4d62      	ldr	r5, [pc, #392]	; (8009818 <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800968e:	2b00      	cmp	r3, #0
 8009690:	f000 811a 	beq.w	80098c8 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 8009694:	682b      	ldr	r3, [r5, #0]
 8009696:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800969a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800969c:	f7fc f918 	bl	80058d0 <HAL_GetTick>
 80096a0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80096a2:	e005      	b.n	80096b0 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80096a4:	f7fc f914 	bl	80058d0 <HAL_GetTick>
 80096a8:	1b80      	subs	r0, r0, r6
 80096aa:	2802      	cmp	r0, #2
 80096ac:	f200 80e3 	bhi.w	8009876 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	049f      	lsls	r7, r3, #18
 80096b4:	d5f6      	bpl.n	80096a4 <HAL_RCC_OscConfig+0x130>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	0759      	lsls	r1, r3, #29
 80096ba:	f100 80a3 	bmi.w	8009804 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80096be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80096c0:	b1d0      	cbz	r0, 80096f8 <HAL_RCC_OscConfig+0x184>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80096c2:	4d55      	ldr	r5, [pc, #340]	; (8009818 <HAL_RCC_OscConfig+0x2a4>)
 80096c4:	692b      	ldr	r3, [r5, #16]
 80096c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096ca:	2b18      	cmp	r3, #24
 80096cc:	f000 81ae 	beq.w	8009a2c <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 80096d0:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80096d2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80096d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096d8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80096da:	f000 8142 	beq.w	8009962 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 80096de:	f7fc f8f7 	bl	80058d0 <HAL_GetTick>
 80096e2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096e4:	e005      	b.n	80096f2 <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096e6:	f7fc f8f3 	bl	80058d0 <HAL_GetTick>
 80096ea:	1b00      	subs	r0, r0, r4
 80096ec:	2802      	cmp	r0, #2
 80096ee:	f200 80c2 	bhi.w	8009876 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096f2:	682b      	ldr	r3, [r5, #0]
 80096f4:	019b      	lsls	r3, r3, #6
 80096f6:	d4f6      	bmi.n	80096e6 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 80096f8:	2000      	movs	r0, #0
}
 80096fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096fc:	4a46      	ldr	r2, [pc, #280]	; (8009818 <HAL_RCC_OscConfig+0x2a4>)
 80096fe:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009700:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009702:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8009706:	d12d      	bne.n	8009764 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009708:	4b43      	ldr	r3, [pc, #268]	; (8009818 <HAL_RCC_OscConfig+0x2a4>)
 800970a:	68e2      	ldr	r2, [r4, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	0759      	lsls	r1, r3, #29
 8009710:	d501      	bpl.n	8009716 <HAL_RCC_OscConfig+0x1a2>
 8009712:	2a00      	cmp	r2, #0
 8009714:	d04e      	beq.n	80097b4 <HAL_RCC_OscConfig+0x240>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009716:	4d40      	ldr	r5, [pc, #256]	; (8009818 <HAL_RCC_OscConfig+0x2a4>)
 8009718:	682b      	ldr	r3, [r5, #0]
 800971a:	f023 0319 	bic.w	r3, r3, #25
 800971e:	4313      	orrs	r3, r2
 8009720:	602b      	str	r3, [r5, #0]
          tickstart = HAL_GetTick();
 8009722:	f7fc f8d5 	bl	80058d0 <HAL_GetTick>
 8009726:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009728:	e005      	b.n	8009736 <HAL_RCC_OscConfig+0x1c2>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800972a:	f7fc f8d1 	bl	80058d0 <HAL_GetTick>
 800972e:	1b80      	subs	r0, r0, r6
 8009730:	2802      	cmp	r0, #2
 8009732:	f200 80a0 	bhi.w	8009876 <HAL_RCC_OscConfig+0x302>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009736:	682b      	ldr	r3, [r5, #0]
 8009738:	075b      	lsls	r3, r3, #29
 800973a:	d5f6      	bpl.n	800972a <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800973c:	f7fc f8e0 	bl	8005900 <HAL_GetREVID>
 8009740:	f241 0303 	movw	r3, #4099	; 0x1003
 8009744:	4298      	cmp	r0, r3
 8009746:	f200 80f7 	bhi.w	8009938 <HAL_RCC_OscConfig+0x3c4>
 800974a:	6922      	ldr	r2, [r4, #16]
 800974c:	686b      	ldr	r3, [r5, #4]
 800974e:	2a40      	cmp	r2, #64	; 0x40
 8009750:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009754:	bf0c      	ite	eq
 8009756:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800975a:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800975e:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009760:	6823      	ldr	r3, [r4, #0]
 8009762:	e741      	b.n	80095e8 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009764:	2b18      	cmp	r3, #24
 8009766:	f000 80e3 	beq.w	8009930 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800976a:	4d2b      	ldr	r5, [pc, #172]	; (8009818 <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800976c:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800976e:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009770:	2a00      	cmp	r2, #0
 8009772:	f000 80cc 	beq.w	800990e <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009776:	f023 0319 	bic.w	r3, r3, #25
 800977a:	4313      	orrs	r3, r2
 800977c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800977e:	f7fc f8a7 	bl	80058d0 <HAL_GetTick>
 8009782:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009784:	e004      	b.n	8009790 <HAL_RCC_OscConfig+0x21c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009786:	f7fc f8a3 	bl	80058d0 <HAL_GetTick>
 800978a:	1b80      	subs	r0, r0, r6
 800978c:	2802      	cmp	r0, #2
 800978e:	d872      	bhi.n	8009876 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	075f      	lsls	r7, r3, #29
 8009794:	d5f7      	bpl.n	8009786 <HAL_RCC_OscConfig+0x212>
 8009796:	e7d1      	b.n	800973c <HAL_RCC_OscConfig+0x1c8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009798:	f001 0103 	and.w	r1, r1, #3
 800979c:	2902      	cmp	r1, #2
 800979e:	f47f aefc 	bne.w	800959a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097a2:	4a1d      	ldr	r2, [pc, #116]	; (8009818 <HAL_RCC_OscConfig+0x2a4>)
 80097a4:	6812      	ldr	r2, [r2, #0]
 80097a6:	0392      	lsls	r2, r2, #14
 80097a8:	f57f af1b 	bpl.w	80095e2 <HAL_RCC_OscConfig+0x6e>
 80097ac:	6862      	ldr	r2, [r4, #4]
 80097ae:	2a00      	cmp	r2, #0
 80097b0:	f47f af17 	bne.w	80095e2 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 80097b4:	2001      	movs	r0, #1
}
 80097b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80097b8:	f002 0203 	and.w	r2, r2, #3
 80097bc:	2a01      	cmp	r2, #1
 80097be:	f47f af20 	bne.w	8009602 <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80097c2:	4b15      	ldr	r3, [pc, #84]	; (8009818 <HAL_RCC_OscConfig+0x2a4>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	05da      	lsls	r2, r3, #23
 80097c8:	d502      	bpl.n	80097d0 <HAL_RCC_OscConfig+0x25c>
 80097ca:	69e3      	ldr	r3, [r4, #28]
 80097cc:	2b80      	cmp	r3, #128	; 0x80
 80097ce:	d1f1      	bne.n	80097b4 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80097d0:	f7fc f896 	bl	8005900 <HAL_GetREVID>
 80097d4:	f241 0303 	movw	r3, #4099	; 0x1003
 80097d8:	4298      	cmp	r0, r3
 80097da:	f200 80b8 	bhi.w	800994e <HAL_RCC_OscConfig+0x3da>
 80097de:	6a22      	ldr	r2, [r4, #32]
 80097e0:	2a20      	cmp	r2, #32
 80097e2:	f000 8187 	beq.w	8009af4 <HAL_RCC_OscConfig+0x580>
 80097e6:	490c      	ldr	r1, [pc, #48]	; (8009818 <HAL_RCC_OscConfig+0x2a4>)
 80097e8:	684b      	ldr	r3, [r1, #4]
 80097ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80097ee:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80097f2:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097f4:	6823      	ldr	r3, [r4, #0]
 80097f6:	e72d      	b.n	8009654 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097f8:	4a07      	ldr	r2, [pc, #28]	; (8009818 <HAL_RCC_OscConfig+0x2a4>)
 80097fa:	6813      	ldr	r3, [r2, #0]
 80097fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009800:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009802:	e6df      	b.n	80095c4 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8009804:	4d05      	ldr	r5, [pc, #20]	; (800981c <HAL_RCC_OscConfig+0x2a8>)
 8009806:	682b      	ldr	r3, [r5, #0]
 8009808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800980c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800980e:	f7fc f85f 	bl	80058d0 <HAL_GetTick>
 8009812:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009814:	e009      	b.n	800982a <HAL_RCC_OscConfig+0x2b6>
 8009816:	bf00      	nop
 8009818:	58024400 	.word	0x58024400
 800981c:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009820:	f7fc f856 	bl	80058d0 <HAL_GetTick>
 8009824:	1b80      	subs	r0, r0, r6
 8009826:	2864      	cmp	r0, #100	; 0x64
 8009828:	d825      	bhi.n	8009876 <HAL_RCC_OscConfig+0x302>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800982a:	682b      	ldr	r3, [r5, #0]
 800982c:	05da      	lsls	r2, r3, #23
 800982e:	d5f7      	bpl.n	8009820 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009830:	68a3      	ldr	r3, [r4, #8]
 8009832:	2b01      	cmp	r3, #1
 8009834:	f000 8158 	beq.w	8009ae8 <HAL_RCC_OscConfig+0x574>
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 812d 	beq.w	8009a98 <HAL_RCC_OscConfig+0x524>
 800983e:	2b05      	cmp	r3, #5
 8009840:	4ba6      	ldr	r3, [pc, #664]	; (8009adc <HAL_RCC_OscConfig+0x568>)
 8009842:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009844:	f000 815f 	beq.w	8009b06 <HAL_RCC_OscConfig+0x592>
 8009848:	f022 0201 	bic.w	r2, r2, #1
 800984c:	671a      	str	r2, [r3, #112]	; 0x70
 800984e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009850:	f022 0204 	bic.w	r2, r2, #4
 8009854:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8009856:	f7fc f83b 	bl	80058d0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800985a:	4ea0      	ldr	r6, [pc, #640]	; (8009adc <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800985c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009860:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009862:	e004      	b.n	800986e <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009864:	f7fc f834 	bl	80058d0 <HAL_GetTick>
 8009868:	1b40      	subs	r0, r0, r5
 800986a:	42b8      	cmp	r0, r7
 800986c:	d803      	bhi.n	8009876 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800986e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8009870:	079b      	lsls	r3, r3, #30
 8009872:	d5f7      	bpl.n	8009864 <HAL_RCC_OscConfig+0x2f0>
 8009874:	e723      	b.n	80096be <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 8009876:	2003      	movs	r0, #3
}
 8009878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800987a:	4d98      	ldr	r5, [pc, #608]	; (8009adc <HAL_RCC_OscConfig+0x568>)
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009882:	602b      	str	r3, [r5, #0]
 8009884:	682b      	ldr	r3, [r5, #0]
 8009886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800988a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800988c:	f7fc f820 	bl	80058d0 <HAL_GetTick>
 8009890:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009892:	e004      	b.n	800989e <HAL_RCC_OscConfig+0x32a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009894:	f7fc f81c 	bl	80058d0 <HAL_GetTick>
 8009898:	1b80      	subs	r0, r0, r6
 800989a:	2864      	cmp	r0, #100	; 0x64
 800989c:	d8eb      	bhi.n	8009876 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800989e:	682b      	ldr	r3, [r5, #0]
 80098a0:	039f      	lsls	r7, r3, #14
 80098a2:	d4f7      	bmi.n	8009894 <HAL_RCC_OscConfig+0x320>
 80098a4:	e69c      	b.n	80095e0 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 80098a6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80098a8:	f023 0301 	bic.w	r3, r3, #1
 80098ac:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80098ae:	f7fc f80f 	bl	80058d0 <HAL_GetTick>
 80098b2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80098b4:	e004      	b.n	80098c0 <HAL_RCC_OscConfig+0x34c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80098b6:	f7fc f80b 	bl	80058d0 <HAL_GetTick>
 80098ba:	1b80      	subs	r0, r0, r6
 80098bc:	2802      	cmp	r0, #2
 80098be:	d8da      	bhi.n	8009876 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80098c0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80098c2:	0799      	lsls	r1, r3, #30
 80098c4:	d4f7      	bmi.n	80098b6 <HAL_RCC_OscConfig+0x342>
 80098c6:	e6dd      	b.n	8009684 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 80098c8:	682b      	ldr	r3, [r5, #0]
 80098ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098ce:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80098d0:	f7fb fffe 	bl	80058d0 <HAL_GetTick>
 80098d4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80098d6:	e004      	b.n	80098e2 <HAL_RCC_OscConfig+0x36e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80098d8:	f7fb fffa 	bl	80058d0 <HAL_GetTick>
 80098dc:	1b80      	subs	r0, r0, r6
 80098de:	2802      	cmp	r0, #2
 80098e0:	d8c9      	bhi.n	8009876 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80098e2:	682b      	ldr	r3, [r5, #0]
 80098e4:	0498      	lsls	r0, r3, #18
 80098e6:	d4f7      	bmi.n	80098d8 <HAL_RCC_OscConfig+0x364>
 80098e8:	e6e5      	b.n	80096b6 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 80098ea:	682b      	ldr	r3, [r5, #0]
 80098ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098f0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80098f2:	f7fb ffed 	bl	80058d0 <HAL_GetTick>
 80098f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80098f8:	e004      	b.n	8009904 <HAL_RCC_OscConfig+0x390>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80098fa:	f7fb ffe9 	bl	80058d0 <HAL_GetTick>
 80098fe:	1b80      	subs	r0, r0, r6
 8009900:	2802      	cmp	r0, #2
 8009902:	d8b8      	bhi.n	8009876 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009904:	682b      	ldr	r3, [r5, #0]
 8009906:	05df      	lsls	r7, r3, #23
 8009908:	d4f7      	bmi.n	80098fa <HAL_RCC_OscConfig+0x386>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	e6a2      	b.n	8009654 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800990e:	f023 0301 	bic.w	r3, r3, #1
 8009912:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009914:	f7fb ffdc 	bl	80058d0 <HAL_GetTick>
 8009918:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800991a:	e004      	b.n	8009926 <HAL_RCC_OscConfig+0x3b2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800991c:	f7fb ffd8 	bl	80058d0 <HAL_GetTick>
 8009920:	1b80      	subs	r0, r0, r6
 8009922:	2802      	cmp	r0, #2
 8009924:	d8a7      	bhi.n	8009876 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009926:	682b      	ldr	r3, [r5, #0]
 8009928:	0758      	lsls	r0, r3, #29
 800992a:	d4f7      	bmi.n	800991c <HAL_RCC_OscConfig+0x3a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	e65b      	b.n	80095e8 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009930:	0790      	lsls	r0, r2, #30
 8009932:	f47f af1a 	bne.w	800976a <HAL_RCC_OscConfig+0x1f6>
 8009936:	e6e7      	b.n	8009708 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009938:	686b      	ldr	r3, [r5, #4]
 800993a:	6922      	ldr	r2, [r4, #16]
 800993c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009940:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009944:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009946:	6823      	ldr	r3, [r4, #0]
 8009948:	e64e      	b.n	80095e8 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 800994a:	2001      	movs	r0, #1
}
 800994c:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800994e:	4a63      	ldr	r2, [pc, #396]	; (8009adc <HAL_RCC_OscConfig+0x568>)
 8009950:	6a21      	ldr	r1, [r4, #32]
 8009952:	68d3      	ldr	r3, [r2, #12]
 8009954:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8009958:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800995c:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800995e:	6823      	ldr	r3, [r4, #0]
 8009960:	e678      	b.n	8009654 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8009962:	f7fb ffb5 	bl	80058d0 <HAL_GetTick>
 8009966:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009968:	e004      	b.n	8009974 <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800996a:	f7fb ffb1 	bl	80058d0 <HAL_GetTick>
 800996e:	1b80      	subs	r0, r0, r6
 8009970:	2802      	cmp	r0, #2
 8009972:	d880      	bhi.n	8009876 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	0199      	lsls	r1, r3, #6
 8009978:	d4f7      	bmi.n	800996a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800997a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800997c:	4b58      	ldr	r3, [pc, #352]	; (8009ae0 <HAL_RCC_OscConfig+0x56c>)
 800997e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009980:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009982:	4958      	ldr	r1, [pc, #352]	; (8009ae4 <HAL_RCC_OscConfig+0x570>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009984:	4e55      	ldr	r6, [pc, #340]	; (8009adc <HAL_RCC_OscConfig+0x568>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009986:	4313      	orrs	r3, r2
 8009988:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800998a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800998e:	62ab      	str	r3, [r5, #40]	; 0x28
 8009990:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8009994:	3b01      	subs	r3, #1
 8009996:	3a01      	subs	r2, #1
 8009998:	025b      	lsls	r3, r3, #9
 800999a:	0412      	lsls	r2, r2, #16
 800999c:	b29b      	uxth	r3, r3
 800999e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80099a2:	4313      	orrs	r3, r2
 80099a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80099a6:	3a01      	subs	r2, #1
 80099a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099ac:	4313      	orrs	r3, r2
 80099ae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80099b0:	3a01      	subs	r2, #1
 80099b2:	0612      	lsls	r2, r2, #24
 80099b4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80099b8:	4313      	orrs	r3, r2
 80099ba:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80099bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80099be:	f023 0301 	bic.w	r3, r3, #1
 80099c2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80099c4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80099c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80099c8:	4011      	ands	r1, r2
 80099ca:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80099ce:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80099d0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80099d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80099d4:	f023 030c 	bic.w	r3, r3, #12
 80099d8:	4313      	orrs	r3, r2
 80099da:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80099dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80099de:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80099e0:	f023 0302 	bic.w	r3, r3, #2
 80099e4:	4313      	orrs	r3, r2
 80099e6:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80099e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80099ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099ee:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80099f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099f6:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80099f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80099fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80099fe:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8009a00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009a02:	f043 0301 	orr.w	r3, r3, #1
 8009a06:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a0e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009a10:	f7fb ff5e 	bl	80058d0 <HAL_GetTick>
 8009a14:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009a16:	e005      	b.n	8009a24 <HAL_RCC_OscConfig+0x4b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a18:	f7fb ff5a 	bl	80058d0 <HAL_GetTick>
 8009a1c:	1b00      	subs	r0, r0, r4
 8009a1e:	2802      	cmp	r0, #2
 8009a20:	f63f af29 	bhi.w	8009876 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009a24:	6833      	ldr	r3, [r6, #0]
 8009a26:	019a      	lsls	r2, r3, #6
 8009a28:	d5f6      	bpl.n	8009a18 <HAL_RCC_OscConfig+0x4a4>
 8009a2a:	e665      	b.n	80096f8 <HAL_RCC_OscConfig+0x184>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a2c:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009a2e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009a30:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a32:	f43f ae62 	beq.w	80096fa <HAL_RCC_OscConfig+0x186>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a36:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a3a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009a3c:	428b      	cmp	r3, r1
 8009a3e:	f47f aeb9 	bne.w	80097b4 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a42:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	f47f aeb3 	bne.w	80097b4 <HAL_RCC_OscConfig+0x240>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009a50:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8009a54:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a56:	429a      	cmp	r2, r3
 8009a58:	f47f aeac 	bne.w	80097b4 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a5e:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8009a62:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a64:	429a      	cmp	r2, r3
 8009a66:	f47f aea5 	bne.w	80097b4 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009a6c:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8009a70:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a72:	429a      	cmp	r2, r3
 8009a74:	f47f ae9e 	bne.w	80097b4 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009a78:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009a7a:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8009a7e:	3801      	subs	r0, #1
  return HAL_OK;
 8009a80:	1a28      	subs	r0, r5, r0
 8009a82:	bf18      	it	ne
 8009a84:	2001      	movne	r0, #1
}
 8009a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a88:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009a8c:	601a      	str	r2, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009a94:	601a      	str	r2, [r3, #0]
 8009a96:	e595      	b.n	80095c4 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a98:	4d10      	ldr	r5, [pc, #64]	; (8009adc <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a9a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a9e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009aa0:	f023 0301 	bic.w	r3, r3, #1
 8009aa4:	672b      	str	r3, [r5, #112]	; 0x70
 8009aa6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009aa8:	f023 0304 	bic.w	r3, r3, #4
 8009aac:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8009aae:	f7fb ff0f 	bl	80058d0 <HAL_GetTick>
 8009ab2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ab4:	e005      	b.n	8009ac2 <HAL_RCC_OscConfig+0x54e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ab6:	f7fb ff0b 	bl	80058d0 <HAL_GetTick>
 8009aba:	1b80      	subs	r0, r0, r6
 8009abc:	42b8      	cmp	r0, r7
 8009abe:	f63f aeda 	bhi.w	8009876 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ac2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009ac4:	0798      	lsls	r0, r3, #30
 8009ac6:	d4f6      	bmi.n	8009ab6 <HAL_RCC_OscConfig+0x542>
 8009ac8:	e5f9      	b.n	80096be <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009aca:	68eb      	ldr	r3, [r5, #12]
 8009acc:	6a22      	ldr	r2, [r4, #32]
 8009ace:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8009ad2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009ad6:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	e5bb      	b.n	8009654 <HAL_RCC_OscConfig+0xe0>
 8009adc:	58024400 	.word	0x58024400
 8009ae0:	fffffc0c 	.word	0xfffffc0c
 8009ae4:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ae8:	4a0b      	ldr	r2, [pc, #44]	; (8009b18 <HAL_RCC_OscConfig+0x5a4>)
 8009aea:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8009aec:	f043 0301 	orr.w	r3, r3, #1
 8009af0:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009af2:	e6b0      	b.n	8009856 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009af4:	4a08      	ldr	r2, [pc, #32]	; (8009b18 <HAL_RCC_OscConfig+0x5a4>)
 8009af6:	6853      	ldr	r3, [r2, #4]
 8009af8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009afc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b00:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	e5a6      	b.n	8009654 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b06:	f042 0204 	orr.w	r2, r2, #4
 8009b0a:	671a      	str	r2, [r3, #112]	; 0x70
 8009b0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009b0e:	f042 0201 	orr.w	r2, r2, #1
 8009b12:	671a      	str	r2, [r3, #112]	; 0x70
 8009b14:	e69f      	b.n	8009856 <HAL_RCC_OscConfig+0x2e2>
 8009b16:	bf00      	nop
 8009b18:	58024400 	.word	0x58024400

08009b1c <HAL_RCC_MCOConfig>:
{
 8009b1c:	b570      	push	{r4, r5, r6, lr}
    MCO1_CLK_ENABLE();
 8009b1e:	4e25      	ldr	r6, [pc, #148]	; (8009bb4 <HAL_RCC_MCOConfig+0x98>)
{
 8009b20:	b088      	sub	sp, #32
 8009b22:	460d      	mov	r5, r1
 8009b24:	4614      	mov	r4, r2
    MCO1_CLK_ENABLE();
 8009b26:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
  if(RCC_MCOx == RCC_MCO1)
 8009b2a:	b9f8      	cbnz	r0, 8009b6c <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 8009b2c:	f043 0301 	orr.w	r3, r3, #1
    GPIO_InitStruct.Pin = MCO1_PIN;
 8009b30:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009b34:	a902      	add	r1, sp, #8
    MCO1_CLK_ENABLE();
 8009b36:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8009b3a:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009b3e:	9006      	str	r0, [sp, #24]
    MCO1_CLK_ENABLE();
 8009b40:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009b44:	481c      	ldr	r0, [pc, #112]	; (8009bb8 <HAL_RCC_MCOConfig+0x9c>)
    MCO1_CLK_ENABLE();
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b50:	2200      	movs	r2, #0
 8009b52:	2303      	movs	r3, #3
 8009b54:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009b58:	f7fe fd0a 	bl	8008570 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009b5c:	6932      	ldr	r2, [r6, #16]
 8009b5e:	f022 72fe 	bic.w	r2, r2, #33292288	; 0x1fc0000
 8009b62:	432a      	orrs	r2, r5
 8009b64:	4322      	orrs	r2, r4
 8009b66:	6132      	str	r2, [r6, #16]
}
 8009b68:	b008      	add	sp, #32
 8009b6a:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8009b6c:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 8009b70:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009b74:	4811      	ldr	r0, [pc, #68]	; (8009bbc <HAL_RCC_MCOConfig+0xa0>)
    MCO2_CLK_ENABLE();
 8009b76:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8009b7a:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8009b7e:	f003 0304 	and.w	r3, r3, #4
 8009b82:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8009b84:	2302      	movs	r3, #2
    MCO2_CLK_ENABLE();
 8009b86:	9901      	ldr	r1, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009b88:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = MCO2_PIN;
 8009b8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	2303      	movs	r3, #3
 8009b92:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009b96:	2300      	movs	r3, #0
 8009b98:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009b9a:	f7fe fce9 	bl	8008570 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009b9e:	6933      	ldr	r3, [r6, #16]
 8009ba0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8009ba4:	ea43 0105 	orr.w	r1, r3, r5
 8009ba8:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 8009bac:	6131      	str	r1, [r6, #16]
}
 8009bae:	b008      	add	sp, #32
 8009bb0:	bd70      	pop	{r4, r5, r6, pc}
 8009bb2:	bf00      	nop
 8009bb4:	58024400 	.word	0x58024400
 8009bb8:	58020000 	.word	0x58020000
 8009bbc:	58020800 	.word	0x58020800

08009bc0 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009bc0:	4a47      	ldr	r2, [pc, #284]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x120>)
 8009bc2:	6913      	ldr	r3, [r2, #16]
 8009bc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bc8:	2b10      	cmp	r3, #16
 8009bca:	d004      	beq.n	8009bd6 <HAL_RCC_GetSysClockFreq+0x16>
 8009bcc:	2b18      	cmp	r3, #24
 8009bce:	d00d      	beq.n	8009bec <HAL_RCC_GetSysClockFreq+0x2c>
 8009bd0:	b11b      	cbz	r3, 8009bda <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 8009bd2:	4844      	ldr	r0, [pc, #272]	; (8009ce4 <HAL_RCC_GetSysClockFreq+0x124>)
 8009bd4:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009bd6:	4844      	ldr	r0, [pc, #272]	; (8009ce8 <HAL_RCC_GetSysClockFreq+0x128>)
 8009bd8:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bda:	6813      	ldr	r3, [r2, #0]
 8009bdc:	0699      	lsls	r1, r3, #26
 8009bde:	d54a      	bpl.n	8009c76 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009be0:	6813      	ldr	r3, [r2, #0]
 8009be2:	4842      	ldr	r0, [pc, #264]	; (8009cec <HAL_RCC_GetSysClockFreq+0x12c>)
 8009be4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009be8:	40d8      	lsrs	r0, r3
 8009bea:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009bec:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8009bee:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009bf0:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009bf2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    if (pllm != 0U)
 8009bf4:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009bf8:	6b51      	ldr	r1, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009bfa:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8009bfe:	d038      	beq.n	8009c72 <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009c00:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009c04:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c08:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009c0c:	fb05 f101 	mul.w	r1, r5, r1
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	ee07 1a90 	vmov	s15, r1
 8009c16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 8009c1a:	d002      	beq.n	8009c22 <HAL_RCC_GetSysClockFreq+0x62>
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d02c      	beq.n	8009c7a <HAL_RCC_GetSysClockFreq+0xba>
 8009c20:	b393      	cbz	r3, 8009c88 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c22:	ee07 0a90 	vmov	s15, r0
 8009c26:	eddf 6a32 	vldr	s13, [pc, #200]	; 8009cf0 <HAL_RCC_GetSysClockFreq+0x130>
 8009c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c2e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009c30:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009c34:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8009cf4 <HAL_RCC_GetSysClockFreq+0x134>
 8009c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c3c:	ee06 3a90 	vmov	s13, r3
 8009c40:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8009c44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009c48:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009c4c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8009c50:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009c54:	4b22      	ldr	r3, [pc, #136]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x120>)
 8009c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c58:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009c5c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009c5e:	ee07 3a90 	vmov	s15, r3
 8009c62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c6e:	ee17 0a90 	vmov	r0, s15
}
 8009c72:	bc30      	pop	{r4, r5}
 8009c74:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009c76:	481d      	ldr	r0, [pc, #116]	; (8009cec <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8009c78:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c7a:	ee07 0a90 	vmov	s15, r0
 8009c7e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8009cf8 <HAL_RCC_GetSysClockFreq+0x138>
 8009c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c86:	e7d2      	b.n	8009c2e <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c88:	6813      	ldr	r3, [r2, #0]
 8009c8a:	069b      	lsls	r3, r3, #26
 8009c8c:	d520      	bpl.n	8009cd0 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c8e:	6814      	ldr	r4, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c90:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c94:	4915      	ldr	r1, [pc, #84]	; (8009cec <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c96:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009c9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c9c:	f3c4 04c1 	ubfx	r4, r4, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ca4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8009cf4 <HAL_RCC_GetSysClockFreq+0x134>
 8009ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009cac:	40e1      	lsrs	r1, r4
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009cae:	ee06 3a90 	vmov	s13, r3
 8009cb2:	ee05 1a90 	vmov	s11, r1
 8009cb6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009cba:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8009cbe:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009cc2:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009cc6:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009cca:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009cce:	e7c1      	b.n	8009c54 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009cd0:	ee07 0a90 	vmov	s15, r0
 8009cd4:	eddf 6a09 	vldr	s13, [pc, #36]	; 8009cfc <HAL_RCC_GetSysClockFreq+0x13c>
 8009cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cdc:	e7a7      	b.n	8009c2e <HAL_RCC_GetSysClockFreq+0x6e>
 8009cde:	bf00      	nop
 8009ce0:	58024400 	.word	0x58024400
 8009ce4:	003d0900 	.word	0x003d0900
 8009ce8:	017d7840 	.word	0x017d7840
 8009cec:	03d09000 	.word	0x03d09000
 8009cf0:	4a742400 	.word	0x4a742400
 8009cf4:	39000000 	.word	0x39000000
 8009cf8:	4bbebc20 	.word	0x4bbebc20
 8009cfc:	4c742400 	.word	0x4c742400

08009d00 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009d00:	2800      	cmp	r0, #0
 8009d02:	f000 810c 	beq.w	8009f1e <HAL_RCC_ClockConfig+0x21e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009d06:	4a8c      	ldr	r2, [pc, #560]	; (8009f38 <HAL_RCC_ClockConfig+0x238>)
 8009d08:	6813      	ldr	r3, [r2, #0]
 8009d0a:	f003 030f 	and.w	r3, r3, #15
 8009d0e:	428b      	cmp	r3, r1
{
 8009d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d14:	4604      	mov	r4, r0
 8009d16:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009d18:	d20c      	bcs.n	8009d34 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d1a:	6813      	ldr	r3, [r2, #0]
 8009d1c:	f023 030f 	bic.w	r3, r3, #15
 8009d20:	430b      	orrs	r3, r1
 8009d22:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d24:	6813      	ldr	r3, [r2, #0]
 8009d26:	f003 030f 	and.w	r3, r3, #15
 8009d2a:	428b      	cmp	r3, r1
 8009d2c:	d002      	beq.n	8009d34 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8009d2e:	2001      	movs	r0, #1
}
 8009d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	075f      	lsls	r7, r3, #29
 8009d38:	d50b      	bpl.n	8009d52 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009d3a:	4980      	ldr	r1, [pc, #512]	; (8009f3c <HAL_RCC_ClockConfig+0x23c>)
 8009d3c:	6920      	ldr	r0, [r4, #16]
 8009d3e:	698a      	ldr	r2, [r1, #24]
 8009d40:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009d44:	4290      	cmp	r0, r2
 8009d46:	d904      	bls.n	8009d52 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009d48:	698a      	ldr	r2, [r1, #24]
 8009d4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009d4e:	4302      	orrs	r2, r0
 8009d50:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d52:	071e      	lsls	r6, r3, #28
 8009d54:	d50b      	bpl.n	8009d6e <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009d56:	4979      	ldr	r1, [pc, #484]	; (8009f3c <HAL_RCC_ClockConfig+0x23c>)
 8009d58:	6960      	ldr	r0, [r4, #20]
 8009d5a:	69ca      	ldr	r2, [r1, #28]
 8009d5c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009d60:	4290      	cmp	r0, r2
 8009d62:	d904      	bls.n	8009d6e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009d64:	69ca      	ldr	r2, [r1, #28]
 8009d66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009d6a:	4302      	orrs	r2, r0
 8009d6c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d6e:	06d8      	lsls	r0, r3, #27
 8009d70:	d50b      	bpl.n	8009d8a <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009d72:	4972      	ldr	r1, [pc, #456]	; (8009f3c <HAL_RCC_ClockConfig+0x23c>)
 8009d74:	69a0      	ldr	r0, [r4, #24]
 8009d76:	69ca      	ldr	r2, [r1, #28]
 8009d78:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009d7c:	4290      	cmp	r0, r2
 8009d7e:	d904      	bls.n	8009d8a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009d80:	69ca      	ldr	r2, [r1, #28]
 8009d82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009d86:	4302      	orrs	r2, r0
 8009d88:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009d8a:	0699      	lsls	r1, r3, #26
 8009d8c:	d50b      	bpl.n	8009da6 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009d8e:	496b      	ldr	r1, [pc, #428]	; (8009f3c <HAL_RCC_ClockConfig+0x23c>)
 8009d90:	69e0      	ldr	r0, [r4, #28]
 8009d92:	6a0a      	ldr	r2, [r1, #32]
 8009d94:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009d98:	4290      	cmp	r0, r2
 8009d9a:	d904      	bls.n	8009da6 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009d9c:	6a0a      	ldr	r2, [r1, #32]
 8009d9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009da2:	4302      	orrs	r2, r0
 8009da4:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009da6:	079a      	lsls	r2, r3, #30
 8009da8:	f140 80ab 	bpl.w	8009f02 <HAL_RCC_ClockConfig+0x202>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009dac:	4863      	ldr	r0, [pc, #396]	; (8009f3c <HAL_RCC_ClockConfig+0x23c>)
 8009dae:	68e1      	ldr	r1, [r4, #12]
 8009db0:	6982      	ldr	r2, [r0, #24]
 8009db2:	f002 020f 	and.w	r2, r2, #15
 8009db6:	4291      	cmp	r1, r2
 8009db8:	d904      	bls.n	8009dc4 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009dba:	6982      	ldr	r2, [r0, #24]
 8009dbc:	f022 020f 	bic.w	r2, r2, #15
 8009dc0:	430a      	orrs	r2, r1
 8009dc2:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009dc4:	07d8      	lsls	r0, r3, #31
 8009dc6:	d530      	bpl.n	8009e2a <HAL_RCC_ClockConfig+0x12a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009dc8:	4a5c      	ldr	r2, [pc, #368]	; (8009f3c <HAL_RCC_ClockConfig+0x23c>)
 8009dca:	68a1      	ldr	r1, [r4, #8]
 8009dcc:	6993      	ldr	r3, [r2, #24]
 8009dce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009dd2:	430b      	orrs	r3, r1
 8009dd4:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009dd6:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009dd8:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009dda:	2902      	cmp	r1, #2
 8009ddc:	f000 80a1 	beq.w	8009f22 <HAL_RCC_ClockConfig+0x222>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009de0:	2903      	cmp	r1, #3
 8009de2:	f000 8098 	beq.w	8009f16 <HAL_RCC_ClockConfig+0x216>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009de6:	2901      	cmp	r1, #1
 8009de8:	f000 80a1 	beq.w	8009f2e <HAL_RCC_ClockConfig+0x22e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009dec:	0758      	lsls	r0, r3, #29
 8009dee:	d59e      	bpl.n	8009d2e <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009df0:	4e52      	ldr	r6, [pc, #328]	; (8009f3c <HAL_RCC_ClockConfig+0x23c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009df2:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009df6:	6933      	ldr	r3, [r6, #16]
 8009df8:	f023 0307 	bic.w	r3, r3, #7
 8009dfc:	430b      	orrs	r3, r1
 8009dfe:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8009e00:	f7fb fd66 	bl	80058d0 <HAL_GetTick>
 8009e04:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e06:	e005      	b.n	8009e14 <HAL_RCC_ClockConfig+0x114>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e08:	f7fb fd62 	bl	80058d0 <HAL_GetTick>
 8009e0c:	1bc0      	subs	r0, r0, r7
 8009e0e:	4540      	cmp	r0, r8
 8009e10:	f200 808b 	bhi.w	8009f2a <HAL_RCC_ClockConfig+0x22a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e14:	6933      	ldr	r3, [r6, #16]
 8009e16:	6862      	ldr	r2, [r4, #4]
 8009e18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e1c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8009e20:	d1f2      	bne.n	8009e08 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	0799      	lsls	r1, r3, #30
 8009e26:	d506      	bpl.n	8009e36 <HAL_RCC_ClockConfig+0x136>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009e28:	68e1      	ldr	r1, [r4, #12]
 8009e2a:	4844      	ldr	r0, [pc, #272]	; (8009f3c <HAL_RCC_ClockConfig+0x23c>)
 8009e2c:	6982      	ldr	r2, [r0, #24]
 8009e2e:	f002 020f 	and.w	r2, r2, #15
 8009e32:	428a      	cmp	r2, r1
 8009e34:	d869      	bhi.n	8009f0a <HAL_RCC_ClockConfig+0x20a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e36:	4940      	ldr	r1, [pc, #256]	; (8009f38 <HAL_RCC_ClockConfig+0x238>)
 8009e38:	680a      	ldr	r2, [r1, #0]
 8009e3a:	f002 020f 	and.w	r2, r2, #15
 8009e3e:	42aa      	cmp	r2, r5
 8009e40:	d90a      	bls.n	8009e58 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e42:	680a      	ldr	r2, [r1, #0]
 8009e44:	f022 020f 	bic.w	r2, r2, #15
 8009e48:	432a      	orrs	r2, r5
 8009e4a:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e4c:	680a      	ldr	r2, [r1, #0]
 8009e4e:	f002 020f 	and.w	r2, r2, #15
 8009e52:	42aa      	cmp	r2, r5
 8009e54:	f47f af6b 	bne.w	8009d2e <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009e58:	075a      	lsls	r2, r3, #29
 8009e5a:	d50b      	bpl.n	8009e74 <HAL_RCC_ClockConfig+0x174>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009e5c:	4937      	ldr	r1, [pc, #220]	; (8009f3c <HAL_RCC_ClockConfig+0x23c>)
 8009e5e:	6920      	ldr	r0, [r4, #16]
 8009e60:	698a      	ldr	r2, [r1, #24]
 8009e62:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009e66:	4290      	cmp	r0, r2
 8009e68:	d204      	bcs.n	8009e74 <HAL_RCC_ClockConfig+0x174>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009e6a:	698a      	ldr	r2, [r1, #24]
 8009e6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009e70:	4302      	orrs	r2, r0
 8009e72:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e74:	071f      	lsls	r7, r3, #28
 8009e76:	d50b      	bpl.n	8009e90 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009e78:	4930      	ldr	r1, [pc, #192]	; (8009f3c <HAL_RCC_ClockConfig+0x23c>)
 8009e7a:	6960      	ldr	r0, [r4, #20]
 8009e7c:	69ca      	ldr	r2, [r1, #28]
 8009e7e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009e82:	4290      	cmp	r0, r2
 8009e84:	d204      	bcs.n	8009e90 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009e86:	69ca      	ldr	r2, [r1, #28]
 8009e88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009e8c:	4302      	orrs	r2, r0
 8009e8e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e90:	06de      	lsls	r6, r3, #27
 8009e92:	d50b      	bpl.n	8009eac <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009e94:	4929      	ldr	r1, [pc, #164]	; (8009f3c <HAL_RCC_ClockConfig+0x23c>)
 8009e96:	69a0      	ldr	r0, [r4, #24]
 8009e98:	69ca      	ldr	r2, [r1, #28]
 8009e9a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009e9e:	4290      	cmp	r0, r2
 8009ea0:	d204      	bcs.n	8009eac <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009ea2:	69ca      	ldr	r2, [r1, #28]
 8009ea4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009ea8:	4302      	orrs	r2, r0
 8009eaa:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009eac:	069d      	lsls	r5, r3, #26
 8009eae:	d50b      	bpl.n	8009ec8 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009eb0:	4a22      	ldr	r2, [pc, #136]	; (8009f3c <HAL_RCC_ClockConfig+0x23c>)
 8009eb2:	69e1      	ldr	r1, [r4, #28]
 8009eb4:	6a13      	ldr	r3, [r2, #32]
 8009eb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009eba:	4299      	cmp	r1, r3
 8009ebc:	d204      	bcs.n	8009ec8 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009ebe:	6a13      	ldr	r3, [r2, #32]
 8009ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ec4:	430b      	orrs	r3, r1
 8009ec6:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009ec8:	f7ff fe7a 	bl	8009bc0 <HAL_RCC_GetSysClockFreq>
 8009ecc:	4a1b      	ldr	r2, [pc, #108]	; (8009f3c <HAL_RCC_ClockConfig+0x23c>)
 8009ece:	4603      	mov	r3, r0
 8009ed0:	481b      	ldr	r0, [pc, #108]	; (8009f40 <HAL_RCC_ClockConfig+0x240>)
 8009ed2:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ed4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009ed6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8009eda:	4d1a      	ldr	r5, [pc, #104]	; (8009f44 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009edc:	f002 020f 	and.w	r2, r2, #15
 8009ee0:	4c19      	ldr	r4, [pc, #100]	; (8009f48 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009ee2:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ee4:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009ee6:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8009eea:	4818      	ldr	r0, [pc, #96]	; (8009f4c <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009eec:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009ef0:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 8009ef2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8009ef4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ef6:	40d3      	lsrs	r3, r2
 8009ef8:	6023      	str	r3, [r4, #0]
}
 8009efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8009efe:	f7fb bc85 	b.w	800580c <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f02:	07da      	lsls	r2, r3, #31
 8009f04:	f53f af60 	bmi.w	8009dc8 <HAL_RCC_ClockConfig+0xc8>
 8009f08:	e795      	b.n	8009e36 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f0a:	6982      	ldr	r2, [r0, #24]
 8009f0c:	f022 020f 	bic.w	r2, r2, #15
 8009f10:	4311      	orrs	r1, r2
 8009f12:	6181      	str	r1, [r0, #24]
 8009f14:	e78f      	b.n	8009e36 <HAL_RCC_ClockConfig+0x136>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f16:	019f      	lsls	r7, r3, #6
 8009f18:	f53f af6a 	bmi.w	8009df0 <HAL_RCC_ClockConfig+0xf0>
 8009f1c:	e707      	b.n	8009d2e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8009f1e:	2001      	movs	r0, #1
}
 8009f20:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009f22:	039b      	lsls	r3, r3, #14
 8009f24:	f53f af64 	bmi.w	8009df0 <HAL_RCC_ClockConfig+0xf0>
 8009f28:	e701      	b.n	8009d2e <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8009f2a:	2003      	movs	r0, #3
 8009f2c:	e700      	b.n	8009d30 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009f2e:	05de      	lsls	r6, r3, #23
 8009f30:	f53f af5e 	bmi.w	8009df0 <HAL_RCC_ClockConfig+0xf0>
 8009f34:	e6fb      	b.n	8009d2e <HAL_RCC_ClockConfig+0x2e>
 8009f36:	bf00      	nop
 8009f38:	52002000 	.word	0x52002000
 8009f3c:	58024400 	.word	0x58024400
 8009f40:	0801a1b8 	.word	0x0801a1b8
 8009f44:	2400030c 	.word	0x2400030c
 8009f48:	24000310 	.word	0x24000310
 8009f4c:	24000318 	.word	0x24000318

08009f50 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f50:	4a18      	ldr	r2, [pc, #96]	; (8009fb4 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f52:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f54:	6913      	ldr	r3, [r2, #16]
 8009f56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f5a:	2b10      	cmp	r3, #16
 8009f5c:	d01a      	beq.n	8009f94 <HAL_RCC_GetHCLKFreq+0x44>
 8009f5e:	2b18      	cmp	r3, #24
 8009f60:	d023      	beq.n	8009faa <HAL_RCC_GetHCLKFreq+0x5a>
 8009f62:	b1cb      	cbz	r3, 8009f98 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8009f64:	4814      	ldr	r0, [pc, #80]	; (8009fb8 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009f66:	4b13      	ldr	r3, [pc, #76]	; (8009fb4 <HAL_RCC_GetHCLKFreq+0x64>)
 8009f68:	4914      	ldr	r1, [pc, #80]	; (8009fbc <HAL_RCC_GetHCLKFreq+0x6c>)
 8009f6a:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f6c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009f6e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f72:	4c13      	ldr	r4, [pc, #76]	; (8009fc0 <HAL_RCC_GetHCLKFreq+0x70>)
 8009f74:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009f78:	4d12      	ldr	r5, [pc, #72]	; (8009fc4 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009f7a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f7c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009f7e:	f002 021f 	and.w	r2, r2, #31
 8009f82:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f86:	f003 001f 	and.w	r0, r3, #31
 8009f8a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8009f8e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f90:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8009f92:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f94:	480c      	ldr	r0, [pc, #48]	; (8009fc8 <HAL_RCC_GetHCLKFreq+0x78>)
 8009f96:	e7e6      	b.n	8009f66 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f98:	6813      	ldr	r3, [r2, #0]
 8009f9a:	069b      	lsls	r3, r3, #26
 8009f9c:	d508      	bpl.n	8009fb0 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f9e:	6812      	ldr	r2, [r2, #0]
 8009fa0:	480a      	ldr	r0, [pc, #40]	; (8009fcc <HAL_RCC_GetHCLKFreq+0x7c>)
 8009fa2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8009fa6:	40d0      	lsrs	r0, r2
 8009fa8:	e7dd      	b.n	8009f66 <HAL_RCC_GetHCLKFreq+0x16>
 8009faa:	f7ff fa5f 	bl	800946c <HAL_RCC_GetSysClockFreq.part.0>
 8009fae:	e7da      	b.n	8009f66 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009fb0:	4806      	ldr	r0, [pc, #24]	; (8009fcc <HAL_RCC_GetHCLKFreq+0x7c>)
 8009fb2:	e7d8      	b.n	8009f66 <HAL_RCC_GetHCLKFreq+0x16>
 8009fb4:	58024400 	.word	0x58024400
 8009fb8:	003d0900 	.word	0x003d0900
 8009fbc:	0801a1b8 	.word	0x0801a1b8
 8009fc0:	24000310 	.word	0x24000310
 8009fc4:	2400030c 	.word	0x2400030c
 8009fc8:	017d7840 	.word	0x017d7840
 8009fcc:	03d09000 	.word	0x03d09000

08009fd0 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009fd0:	4a1c      	ldr	r2, [pc, #112]	; (800a044 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009fd2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009fd4:	6913      	ldr	r3, [r2, #16]
 8009fd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fda:	2b10      	cmp	r3, #16
 8009fdc:	d021      	beq.n	800a022 <HAL_RCC_GetPCLK1Freq+0x52>
 8009fde:	2b18      	cmp	r3, #24
 8009fe0:	d02b      	beq.n	800a03a <HAL_RCC_GetPCLK1Freq+0x6a>
 8009fe2:	b303      	cbz	r3, 800a026 <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8009fe4:	4818      	ldr	r0, [pc, #96]	; (800a048 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009fe6:	4a17      	ldr	r2, [pc, #92]	; (800a044 <HAL_RCC_GetPCLK1Freq+0x74>)
 8009fe8:	4918      	ldr	r1, [pc, #96]	; (800a04c <HAL_RCC_GetPCLK1Freq+0x7c>)
 8009fea:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8009fec:	4d18      	ldr	r5, [pc, #96]	; (800a050 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009fee:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ff2:	4c18      	ldr	r4, [pc, #96]	; (800a054 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009ff4:	5ccb      	ldrb	r3, [r1, r3]
 8009ff6:	f003 031f 	and.w	r3, r3, #31
 8009ffa:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ffe:	6990      	ldr	r0, [r2, #24]
 800a000:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800a004:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a006:	5c08      	ldrb	r0, [r1, r0]
 800a008:	f000 001f 	and.w	r0, r0, #31
 800a00c:	40c3      	lsrs	r3, r0
 800a00e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a010:	69d2      	ldr	r2, [r2, #28]
 800a012:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800a016:	5c88      	ldrb	r0, [r1, r2]
 800a018:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a01c:	fa23 f000 	lsr.w	r0, r3, r0
 800a020:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a022:	480d      	ldr	r0, [pc, #52]	; (800a058 <HAL_RCC_GetPCLK1Freq+0x88>)
 800a024:	e7df      	b.n	8009fe6 <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a026:	6813      	ldr	r3, [r2, #0]
 800a028:	069b      	lsls	r3, r3, #26
 800a02a:	d509      	bpl.n	800a040 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a02c:	6810      	ldr	r0, [r2, #0]
 800a02e:	4b0b      	ldr	r3, [pc, #44]	; (800a05c <HAL_RCC_GetPCLK1Freq+0x8c>)
 800a030:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800a034:	fa23 f000 	lsr.w	r0, r3, r0
 800a038:	e7d5      	b.n	8009fe6 <HAL_RCC_GetPCLK1Freq+0x16>
 800a03a:	f7ff fa17 	bl	800946c <HAL_RCC_GetSysClockFreq.part.0>
 800a03e:	e7d2      	b.n	8009fe6 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a040:	4806      	ldr	r0, [pc, #24]	; (800a05c <HAL_RCC_GetPCLK1Freq+0x8c>)
 800a042:	e7d0      	b.n	8009fe6 <HAL_RCC_GetPCLK1Freq+0x16>
 800a044:	58024400 	.word	0x58024400
 800a048:	003d0900 	.word	0x003d0900
 800a04c:	0801a1b8 	.word	0x0801a1b8
 800a050:	2400030c 	.word	0x2400030c
 800a054:	24000310 	.word	0x24000310
 800a058:	017d7840 	.word	0x017d7840
 800a05c:	03d09000 	.word	0x03d09000

0800a060 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a060:	4a1c      	ldr	r2, [pc, #112]	; (800a0d4 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a062:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a064:	6913      	ldr	r3, [r2, #16]
 800a066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a06a:	2b10      	cmp	r3, #16
 800a06c:	d021      	beq.n	800a0b2 <HAL_RCC_GetPCLK2Freq+0x52>
 800a06e:	2b18      	cmp	r3, #24
 800a070:	d02b      	beq.n	800a0ca <HAL_RCC_GetPCLK2Freq+0x6a>
 800a072:	b303      	cbz	r3, 800a0b6 <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 800a074:	4818      	ldr	r0, [pc, #96]	; (800a0d8 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a076:	4a17      	ldr	r2, [pc, #92]	; (800a0d4 <HAL_RCC_GetPCLK2Freq+0x74>)
 800a078:	4918      	ldr	r1, [pc, #96]	; (800a0dc <HAL_RCC_GetPCLK2Freq+0x7c>)
 800a07a:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800a07c:	4d18      	ldr	r5, [pc, #96]	; (800a0e0 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a07e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a082:	4c18      	ldr	r4, [pc, #96]	; (800a0e4 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a084:	5ccb      	ldrb	r3, [r1, r3]
 800a086:	f003 031f 	and.w	r3, r3, #31
 800a08a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a08e:	6990      	ldr	r0, [r2, #24]
 800a090:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800a094:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a096:	5c08      	ldrb	r0, [r1, r0]
 800a098:	f000 001f 	and.w	r0, r0, #31
 800a09c:	40c3      	lsrs	r3, r0
 800a09e:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a0a0:	69d2      	ldr	r2, [r2, #28]
 800a0a2:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800a0a6:	5c88      	ldrb	r0, [r1, r2]
 800a0a8:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a0ac:	fa23 f000 	lsr.w	r0, r3, r0
 800a0b0:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a0b2:	480d      	ldr	r0, [pc, #52]	; (800a0e8 <HAL_RCC_GetPCLK2Freq+0x88>)
 800a0b4:	e7df      	b.n	800a076 <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0b6:	6813      	ldr	r3, [r2, #0]
 800a0b8:	069b      	lsls	r3, r3, #26
 800a0ba:	d509      	bpl.n	800a0d0 <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0bc:	6810      	ldr	r0, [r2, #0]
 800a0be:	4b0b      	ldr	r3, [pc, #44]	; (800a0ec <HAL_RCC_GetPCLK2Freq+0x8c>)
 800a0c0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800a0c4:	fa23 f000 	lsr.w	r0, r3, r0
 800a0c8:	e7d5      	b.n	800a076 <HAL_RCC_GetPCLK2Freq+0x16>
 800a0ca:	f7ff f9cf 	bl	800946c <HAL_RCC_GetSysClockFreq.part.0>
 800a0ce:	e7d2      	b.n	800a076 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a0d0:	4806      	ldr	r0, [pc, #24]	; (800a0ec <HAL_RCC_GetPCLK2Freq+0x8c>)
 800a0d2:	e7d0      	b.n	800a076 <HAL_RCC_GetPCLK2Freq+0x16>
 800a0d4:	58024400 	.word	0x58024400
 800a0d8:	003d0900 	.word	0x003d0900
 800a0dc:	0801a1b8 	.word	0x0801a1b8
 800a0e0:	2400030c 	.word	0x2400030c
 800a0e4:	24000310 	.word	0x24000310
 800a0e8:	017d7840 	.word	0x017d7840
 800a0ec:	03d09000 	.word	0x03d09000

0800a0f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a0f2:	4c3a      	ldr	r4, [pc, #232]	; (800a1dc <RCCEx_PLL2_Config+0xec>)
 800a0f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a0f6:	f003 0303 	and.w	r3, r3, #3
 800a0fa:	2b03      	cmp	r3, #3
 800a0fc:	d067      	beq.n	800a1ce <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	4606      	mov	r6, r0
 800a102:	460f      	mov	r7, r1
 800a104:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a108:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a10a:	f7fb fbe1 	bl	80058d0 <HAL_GetTick>
 800a10e:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a110:	e004      	b.n	800a11c <RCCEx_PLL2_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a112:	f7fb fbdd 	bl	80058d0 <HAL_GetTick>
 800a116:	1b43      	subs	r3, r0, r5
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d856      	bhi.n	800a1ca <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	011a      	lsls	r2, r3, #4
 800a120:	d4f7      	bmi.n	800a112 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a122:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a124:	6832      	ldr	r2, [r6, #0]
 800a126:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a12a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800a12e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a130:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800a134:	3b01      	subs	r3, #1
 800a136:	3a01      	subs	r2, #1
 800a138:	025b      	lsls	r3, r3, #9
 800a13a:	0412      	lsls	r2, r2, #16
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a142:	4313      	orrs	r3, r2
 800a144:	6872      	ldr	r2, [r6, #4]
 800a146:	3a01      	subs	r2, #1
 800a148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a14c:	4313      	orrs	r3, r2
 800a14e:	6932      	ldr	r2, [r6, #16]
 800a150:	3a01      	subs	r2, #1
 800a152:	0612      	lsls	r2, r2, #24
 800a154:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a158:	4313      	orrs	r3, r2
 800a15a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a15c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a15e:	6972      	ldr	r2, [r6, #20]
 800a160:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a164:	4313      	orrs	r3, r2
 800a166:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a168:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a16a:	69b3      	ldr	r3, [r6, #24]
 800a16c:	f022 0220 	bic.w	r2, r2, #32
 800a170:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a172:	4b1b      	ldr	r3, [pc, #108]	; (800a1e0 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a174:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a176:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a178:	f022 0210 	bic.w	r2, r2, #16
 800a17c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a17e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a180:	69f2      	ldr	r2, [r6, #28]
 800a182:	400b      	ands	r3, r1
 800a184:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a188:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a18a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a18c:	f043 0310 	orr.w	r3, r3, #16
 800a190:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a192:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800a194:	b1ef      	cbz	r7, 800a1d2 <RCCEx_PLL2_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a196:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a198:	bf0c      	ite	eq
 800a19a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a19e:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800a1a2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a1a4:	4c0d      	ldr	r4, [pc, #52]	; (800a1dc <RCCEx_PLL2_Config+0xec>)
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a1ac:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1ae:	f7fb fb8f 	bl	80058d0 <HAL_GetTick>
 800a1b2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1b4:	e004      	b.n	800a1c0 <RCCEx_PLL2_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a1b6:	f7fb fb8b 	bl	80058d0 <HAL_GetTick>
 800a1ba:	1b40      	subs	r0, r0, r5
 800a1bc:	2802      	cmp	r0, #2
 800a1be:	d804      	bhi.n	800a1ca <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	011b      	lsls	r3, r3, #4
 800a1c4:	d5f7      	bpl.n	800a1b6 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800a1c6:	2000      	movs	r0, #0
}
 800a1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800a1ca:	2003      	movs	r0, #3
}
 800a1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800a1ce:	2001      	movs	r0, #1
}
 800a1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a1d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1d8:	e7e4      	b.n	800a1a4 <RCCEx_PLL2_Config+0xb4>
 800a1da:	bf00      	nop
 800a1dc:	58024400 	.word	0x58024400
 800a1e0:	ffff0007 	.word	0xffff0007

0800a1e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1e6:	4c3a      	ldr	r4, [pc, #232]	; (800a2d0 <RCCEx_PLL3_Config+0xec>)
 800a1e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a1ea:	f003 0303 	and.w	r3, r3, #3
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	d067      	beq.n	800a2c2 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	460f      	mov	r7, r1
 800a1f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1fc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1fe:	f7fb fb67 	bl	80058d0 <HAL_GetTick>
 800a202:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a204:	e004      	b.n	800a210 <RCCEx_PLL3_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a206:	f7fb fb63 	bl	80058d0 <HAL_GetTick>
 800a20a:	1b43      	subs	r3, r0, r5
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d856      	bhi.n	800a2be <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	009a      	lsls	r2, r3, #2
 800a214:	d4f7      	bmi.n	800a206 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a216:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a218:	6832      	ldr	r2, [r6, #0]
 800a21a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800a21e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800a222:	62a3      	str	r3, [r4, #40]	; 0x28
 800a224:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800a228:	3b01      	subs	r3, #1
 800a22a:	3a01      	subs	r2, #1
 800a22c:	025b      	lsls	r3, r3, #9
 800a22e:	0412      	lsls	r2, r2, #16
 800a230:	b29b      	uxth	r3, r3
 800a232:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a236:	4313      	orrs	r3, r2
 800a238:	6872      	ldr	r2, [r6, #4]
 800a23a:	3a01      	subs	r2, #1
 800a23c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a240:	4313      	orrs	r3, r2
 800a242:	6932      	ldr	r2, [r6, #16]
 800a244:	3a01      	subs	r2, #1
 800a246:	0612      	lsls	r2, r2, #24
 800a248:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a24c:	4313      	orrs	r3, r2
 800a24e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a250:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a252:	6972      	ldr	r2, [r6, #20]
 800a254:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a258:	4313      	orrs	r3, r2
 800a25a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a25c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a25e:	69b3      	ldr	r3, [r6, #24]
 800a260:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a264:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a266:	4b1b      	ldr	r3, [pc, #108]	; (800a2d4 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a268:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a26a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a26c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a270:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a272:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a274:	69f2      	ldr	r2, [r6, #28]
 800a276:	400b      	ands	r3, r1
 800a278:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a27c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a27e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a284:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a286:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800a288:	b1ef      	cbz	r7, 800a2c6 <RCCEx_PLL3_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a28a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a28c:	bf0c      	ite	eq
 800a28e:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a292:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800a296:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a298:	4c0d      	ldr	r4, [pc, #52]	; (800a2d0 <RCCEx_PLL3_Config+0xec>)
 800a29a:	6823      	ldr	r3, [r4, #0]
 800a29c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2a0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2a2:	f7fb fb15 	bl	80058d0 <HAL_GetTick>
 800a2a6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2a8:	e004      	b.n	800a2b4 <RCCEx_PLL3_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a2aa:	f7fb fb11 	bl	80058d0 <HAL_GetTick>
 800a2ae:	1b40      	subs	r0, r0, r5
 800a2b0:	2802      	cmp	r0, #2
 800a2b2:	d804      	bhi.n	800a2be <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2b4:	6823      	ldr	r3, [r4, #0]
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	d5f7      	bpl.n	800a2aa <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800a2ba:	2000      	movs	r0, #0
}
 800a2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800a2be:	2003      	movs	r0, #3
}
 800a2c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800a2c2:	2001      	movs	r0, #1
}
 800a2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a2c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a2ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2cc:	e7e4      	b.n	800a298 <RCCEx_PLL3_Config+0xb4>
 800a2ce:	bf00      	nop
 800a2d0:	58024400 	.word	0x58024400
 800a2d4:	ffff0007 	.word	0xffff0007

0800a2d8 <HAL_RCCEx_PeriphCLKConfig>:
{
 800a2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a2dc:	6803      	ldr	r3, [r0, #0]
{
 800a2de:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a2e0:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 800a2e4:	d022      	beq.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800a2e6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800a2e8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800a2ec:	f000 8499 	beq.w	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a2f0:	d811      	bhi.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 800a2f2:	2a00      	cmp	r2, #0
 800a2f4:	f000 8503 	beq.w	800acfe <HAL_RCCEx_PeriphCLKConfig+0xa26>
 800a2f8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800a2fc:	f040 84fc 	bne.w	800acf8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a300:	2102      	movs	r1, #2
 800a302:	3004      	adds	r0, #4
 800a304:	f7ff fef4 	bl	800a0f0 <RCCEx_PLL2_Config>
 800a308:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800a30a:	2e00      	cmp	r6, #0
 800a30c:	f040 8491 	bne.w	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x95a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a310:	6e62      	ldr	r2, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	e003      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x46>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800a316:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800a31a:	f040 84ed 	bne.w	800acf8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a31e:	48a8      	ldr	r0, [pc, #672]	; (800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a320:	2600      	movs	r6, #0
 800a322:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800a324:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800a328:	430a      	orrs	r2, r1
 800a32a:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a32c:	05dd      	lsls	r5, r3, #23
 800a32e:	d50a      	bpl.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a330:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a332:	2a04      	cmp	r2, #4
 800a334:	d806      	bhi.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800a336:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a33a:	04ad      	.short	0x04ad
 800a33c:	0493048c 	.word	0x0493048c
 800a340:	02e902e9 	.word	0x02e902e9
 800a344:	2601      	movs	r6, #1
 800a346:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a348:	0598      	lsls	r0, r3, #22
 800a34a:	d51b      	bpl.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai23ClockSelection)
 800a34c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800a34e:	2a80      	cmp	r2, #128	; 0x80
 800a350:	f000 8497 	beq.w	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 800a354:	f200 80ec 	bhi.w	800a530 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800a358:	2a00      	cmp	r2, #0
 800a35a:	f000 8394 	beq.w	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800a35e:	2a40      	cmp	r2, #64	; 0x40
 800a360:	f040 80ed 	bne.w	800a53e <HAL_RCCEx_PeriphCLKConfig+0x266>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a364:	2100      	movs	r1, #0
 800a366:	1d20      	adds	r0, r4, #4
 800a368:	f7ff fec2 	bl	800a0f0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a36c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a36e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a370:	2d00      	cmp	r5, #0
 800a372:	f040 836e 	bne.w	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a376:	4992      	ldr	r1, [pc, #584]	; (800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a37a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a37c:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 800a380:	4302      	orrs	r2, r0
 800a382:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a384:	0559      	lsls	r1, r3, #21
 800a386:	d51f      	bpl.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4AClockSelection)
 800a388:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800a38c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800a390:	f000 8456 	beq.w	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x968>
 800a394:	f200 80d6 	bhi.w	800a544 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800a398:	2a00      	cmp	r2, #0
 800a39a:	f000 837a 	beq.w	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
 800a39e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800a3a2:	f040 80d7 	bne.w	800a554 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	1d20      	adds	r0, r4, #4
 800a3aa:	f7ff fea1 	bl	800a0f0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a3ae:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a3b0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a3b2:	2d00      	cmp	r5, #0
 800a3b4:	f040 8351 	bne.w	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x782>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a3b8:	4981      	ldr	r1, [pc, #516]	; (800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a3ba:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800a3be:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800a3c0:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 800a3c4:	4302      	orrs	r2, r0
 800a3c6:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a3c8:	051a      	lsls	r2, r3, #20
 800a3ca:	d51f      	bpl.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->Sai4BClockSelection)
 800a3cc:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800a3d0:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800a3d4:	f000 8465 	beq.w	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 800a3d8:	f200 80bf 	bhi.w	800a55a <HAL_RCCEx_PeriphCLKConfig+0x282>
 800a3dc:	2a00      	cmp	r2, #0
 800a3de:	f000 835e 	beq.w	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800a3e2:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800a3e6:	f040 80c0 	bne.w	800a56a <HAL_RCCEx_PeriphCLKConfig+0x292>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	1d20      	adds	r0, r4, #4
 800a3ee:	f7ff fe7f 	bl	800a0f0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a3f2:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a3f4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a3f6:	2d00      	cmp	r5, #0
 800a3f8:	f040 8333 	bne.w	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a3fc:	4970      	ldr	r1, [pc, #448]	; (800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a3fe:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800a402:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800a404:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800a408:	4302      	orrs	r2, r0
 800a40a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a40c:	019f      	lsls	r7, r3, #6
 800a40e:	d518      	bpl.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->QspiClockSelection)
 800a410:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a412:	2a20      	cmp	r2, #32
 800a414:	f000 83ce 	beq.w	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a418:	f200 80aa 	bhi.w	800a570 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a41c:	b13a      	cbz	r2, 800a42e <HAL_RCCEx_PeriphCLKConfig+0x156>
 800a41e:	2a10      	cmp	r2, #16
 800a420:	f040 80a9 	bne.w	800a576 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a424:	4966      	ldr	r1, [pc, #408]	; (800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a426:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a428:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a42c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800a42e:	2d00      	cmp	r5, #0
 800a430:	f040 8360 	bne.w	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a434:	4962      	ldr	r1, [pc, #392]	; (800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a436:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a438:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800a43a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a43e:	4302      	orrs	r2, r0
 800a440:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a442:	04d8      	lsls	r0, r3, #19
 800a444:	d51d      	bpl.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi123ClockSelection)
 800a446:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a448:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a44c:	f000 8410 	beq.w	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800a450:	f200 8094 	bhi.w	800a57c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 800a454:	2a00      	cmp	r2, #0
 800a456:	f000 8328 	beq.w	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a45a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800a45e:	f040 8095 	bne.w	800a58c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a462:	2100      	movs	r1, #0
 800a464:	1d20      	adds	r0, r4, #4
 800a466:	f7ff fe43 	bl	800a0f0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a46a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a46c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a46e:	2d00      	cmp	r5, #0
 800a470:	f040 82f1 	bne.w	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a474:	4952      	ldr	r1, [pc, #328]	; (800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a476:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800a478:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a47a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a47e:	4302      	orrs	r2, r0
 800a480:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a482:	0499      	lsls	r1, r3, #18
 800a484:	d51a      	bpl.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi45ClockSelection)
 800a486:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a488:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800a48c:	f000 8376 	beq.w	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800a490:	d87f      	bhi.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800a492:	b14a      	cbz	r2, 800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800a494:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a498:	f040 8083 	bne.w	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a49c:	2101      	movs	r1, #1
 800a49e:	1d20      	adds	r0, r4, #4
 800a4a0:	f7ff fe26 	bl	800a0f0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a4a4:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a4a6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a4a8:	2d00      	cmp	r5, #0
 800a4aa:	f040 8325 	bne.w	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a4ae:	4944      	ldr	r1, [pc, #272]	; (800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a4b0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800a4b2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a4b4:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800a4b8:	4302      	orrs	r2, r0
 800a4ba:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a4bc:	045a      	lsls	r2, r3, #17
 800a4be:	d51b      	bpl.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x220>
    switch(PeriphClkInit->Spi6ClockSelection)
 800a4c0:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800a4c4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800a4c8:	f000 8362 	beq.w	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800a4cc:	d86c      	bhi.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a4ce:	b142      	cbz	r2, 800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a4d0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800a4d4:	d170      	bne.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a4d6:	2101      	movs	r1, #1
 800a4d8:	1d20      	adds	r0, r4, #4
 800a4da:	f7ff fe09 	bl	800a0f0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a4de:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a4e0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a4e2:	2d00      	cmp	r5, #0
 800a4e4:	f040 830a 	bne.w	800aafc <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a4e8:	4935      	ldr	r1, [pc, #212]	; (800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a4ea:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800a4ee:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800a4f0:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800a4f4:	4302      	orrs	r2, r0
 800a4f6:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a4f8:	041f      	lsls	r7, r3, #16
 800a4fa:	d50d      	bpl.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->FdcanClockSelection)
 800a4fc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800a4fe:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800a502:	f000 834f 	beq.w	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800a506:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800a50a:	f000 820b 	beq.w	800a924 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a50e:	2a00      	cmp	r2, #0
 800a510:	f000 820e 	beq.w	800a930 <HAL_RCCEx_PeriphCLKConfig+0x658>
 800a514:	2601      	movs	r6, #1
 800a516:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a518:	01d8      	lsls	r0, r3, #7
 800a51a:	d55d      	bpl.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->FmcClockSelection)
 800a51c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a51e:	2a03      	cmp	r2, #3
 800a520:	f200 8418 	bhi.w	800ad54 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
 800a524:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a528:	035a0054 	.word	0x035a0054
 800a52c:	0054004e 	.word	0x0054004e
    switch(PeriphClkInit->Sai23ClockSelection)
 800a530:	2ac0      	cmp	r2, #192	; 0xc0
 800a532:	f43f af1d 	beq.w	800a370 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a536:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a53a:	f43f af19 	beq.w	800a370 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a53e:	2601      	movs	r6, #1
 800a540:	4635      	mov	r5, r6
 800a542:	e71f      	b.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai4AClockSelection)
 800a544:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800a548:	f43f af33 	beq.w	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 800a54c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800a550:	f43f af2f 	beq.w	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 800a554:	2601      	movs	r6, #1
 800a556:	4635      	mov	r5, r6
 800a558:	e736      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4BClockSelection)
 800a55a:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 800a55e:	f43f af4a 	beq.w	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800a562:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800a566:	f43f af46 	beq.w	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800a56a:	2601      	movs	r6, #1
 800a56c:	4635      	mov	r5, r6
 800a56e:	e74d      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->QspiClockSelection)
 800a570:	2a30      	cmp	r2, #48	; 0x30
 800a572:	f43f af5c 	beq.w	800a42e <HAL_RCCEx_PeriphCLKConfig+0x156>
 800a576:	2601      	movs	r6, #1
 800a578:	4635      	mov	r5, r6
 800a57a:	e762      	b.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Spi123ClockSelection)
 800a57c:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800a580:	f43f af75 	beq.w	800a46e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a584:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a588:	f43f af71 	beq.w	800a46e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a58c:	2601      	movs	r6, #1
 800a58e:	4635      	mov	r5, r6
 800a590:	e777      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi45ClockSelection)
 800a592:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800a596:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800a59a:	d085      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800a59c:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800a5a0:	d082      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800a5a2:	2601      	movs	r6, #1
 800a5a4:	4635      	mov	r5, r6
 800a5a6:	e789      	b.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi6ClockSelection)
 800a5a8:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800a5ac:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800a5b0:	d097      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a5b2:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800a5b6:	d094      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a5b8:	2601      	movs	r6, #1
 800a5ba:	4635      	mov	r5, r6
 800a5bc:	e79c      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800a5be:	bf00      	nop
 800a5c0:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a5c4:	2102      	movs	r1, #2
 800a5c6:	1d20      	adds	r0, r4, #4
 800a5c8:	f7ff fd92 	bl	800a0f0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a5cc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a5ce:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a5d0:	2d00      	cmp	r5, #0
 800a5d2:	f000 8272 	beq.w	800aaba <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 800a5d6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a5d8:	0259      	lsls	r1, r3, #9
 800a5da:	f100 81ee 	bmi.w	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a5de:	07df      	lsls	r7, r3, #31
 800a5e0:	d52f      	bpl.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    switch(PeriphClkInit->Usart16ClockSelection)
 800a5e2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a5e4:	2a28      	cmp	r2, #40	; 0x28
 800a5e6:	d82a      	bhi.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x366>
 800a5e8:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a5ec:	002901dc 	.word	0x002901dc
 800a5f0:	00290029 	.word	0x00290029
 800a5f4:	00290029 	.word	0x00290029
 800a5f8:	00290029 	.word	0x00290029
 800a5fc:	00290378 	.word	0x00290378
 800a600:	00290029 	.word	0x00290029
 800a604:	00290029 	.word	0x00290029
 800a608:	00290029 	.word	0x00290029
 800a60c:	002901d5 	.word	0x002901d5
 800a610:	00290029 	.word	0x00290029
 800a614:	00290029 	.word	0x00290029
 800a618:	00290029 	.word	0x00290029
 800a61c:	002901dc 	.word	0x002901dc
 800a620:	00290029 	.word	0x00290029
 800a624:	00290029 	.word	0x00290029
 800a628:	00290029 	.word	0x00290029
 800a62c:	002901dc 	.word	0x002901dc
 800a630:	00290029 	.word	0x00290029
 800a634:	00290029 	.word	0x00290029
 800a638:	00290029 	.word	0x00290029
 800a63c:	01dc      	.short	0x01dc
 800a63e:	2601      	movs	r6, #1
 800a640:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a642:	0798      	lsls	r0, r3, #30
 800a644:	d516      	bpl.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a646:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800a648:	2a05      	cmp	r2, #5
 800a64a:	f200 8380 	bhi.w	800ad4e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800a64e:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a652:	000d      	.short	0x000d
 800a654:	00060331 	.word	0x00060331
 800a658:	000d000d 	.word	0x000d000d
 800a65c:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a65e:	2101      	movs	r1, #1
 800a660:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a664:	f7ff fdbe 	bl	800a1e4 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a668:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a66a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a66c:	2d00      	cmp	r5, #0
 800a66e:	f000 822e 	beq.w	800aace <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800a672:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a674:	0759      	lsls	r1, r3, #29
 800a676:	d517      	bpl.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a678:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a67c:	2a05      	cmp	r2, #5
 800a67e:	f200 836c 	bhi.w	800ad5a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a682:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a686:	000d      	.short	0x000d
 800a688:	00060321 	.word	0x00060321
 800a68c:	000d000d 	.word	0x000d000d
 800a690:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a692:	2101      	movs	r1, #1
 800a694:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a698:	f7ff fda4 	bl	800a1e4 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a69c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a69e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a6a0:	2d00      	cmp	r5, #0
 800a6a2:	f000 821c 	beq.w	800aade <HAL_RCCEx_PeriphCLKConfig+0x806>
 800a6a6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a6a8:	069a      	lsls	r2, r3, #26
 800a6aa:	d51d      	bpl.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a6ac:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800a6b0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800a6b4:	f000 8287 	beq.w	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a6b8:	f200 80e6 	bhi.w	800a888 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 800a6bc:	b14a      	cbz	r2, 800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800a6be:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800a6c2:	f040 80eb 	bne.w	800a89c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	1d20      	adds	r0, r4, #4
 800a6ca:	f7ff fd11 	bl	800a0f0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a6ce:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6d0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a6d2:	2d00      	cmp	r5, #0
 800a6d4:	f040 81ef 	bne.w	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a6d8:	49a4      	ldr	r1, [pc, #656]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a6da:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a6de:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800a6e0:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800a6e4:	4302      	orrs	r2, r0
 800a6e6:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a6e8:	065f      	lsls	r7, r3, #25
 800a6ea:	d51d      	bpl.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a6ec:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800a6f0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800a6f4:	f000 822e 	beq.w	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800a6f8:	f200 80d3 	bhi.w	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800a6fc:	b14a      	cbz	r2, 800a712 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800a6fe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a702:	f040 80d8 	bne.w	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a706:	2100      	movs	r1, #0
 800a708:	1d20      	adds	r0, r4, #4
 800a70a:	f7ff fcf1 	bl	800a0f0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a70e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a710:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a712:	2d00      	cmp	r5, #0
 800a714:	f040 81f4 	bne.w	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x828>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a718:	4994      	ldr	r1, [pc, #592]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a71a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800a71e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800a720:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800a724:	4302      	orrs	r2, r0
 800a726:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a728:	0618      	lsls	r0, r3, #24
 800a72a:	d51d      	bpl.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a72c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800a730:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a734:	f000 8218 	beq.w	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x890>
 800a738:	f200 80c0 	bhi.w	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 800a73c:	b14a      	cbz	r2, 800a752 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800a73e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a742:	f040 80c5 	bne.w	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a746:	2100      	movs	r1, #0
 800a748:	1d20      	adds	r0, r4, #4
 800a74a:	f7ff fcd1 	bl	800a0f0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a74e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a750:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a752:	2d00      	cmp	r5, #0
 800a754:	f040 81b9 	bne.w	800aaca <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a758:	4984      	ldr	r1, [pc, #528]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a75a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800a75e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800a760:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a764:	4302      	orrs	r2, r0
 800a766:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a768:	0719      	lsls	r1, r3, #28
 800a76a:	d50b      	bpl.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a76c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800a770:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800a774:	f000 823b 	beq.w	800abee <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a778:	487c      	ldr	r0, [pc, #496]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a77a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800a77c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800a780:	430a      	orrs	r2, r1
 800a782:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a784:	06da      	lsls	r2, r3, #27
 800a786:	d50b      	bpl.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a788:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a78c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a790:	f000 823a 	beq.w	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a794:	4875      	ldr	r0, [pc, #468]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a796:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800a798:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a79c:	430a      	orrs	r2, r1
 800a79e:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a7a0:	031f      	lsls	r7, r3, #12
 800a7a2:	d50e      	bpl.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch(PeriphClkInit->AdcClockSelection)
 800a7a4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800a7a8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a7ac:	f000 80e0 	beq.w	800a970 <HAL_RCCEx_PeriphCLKConfig+0x698>
 800a7b0:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800a7b4:	f000 80e3 	beq.w	800a97e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 800a7b8:	2900      	cmp	r1, #0
 800a7ba:	f000 81c3 	beq.w	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800a7be:	2601      	movs	r6, #1
 800a7c0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a7c2:	0358      	lsls	r0, r3, #13
 800a7c4:	d50f      	bpl.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch(PeriphClkInit->UsbClockSelection)
 800a7c6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800a7ca:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800a7ce:	f000 80ba 	beq.w	800a946 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a7d2:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800a7d6:	f000 80bd 	beq.w	800a954 <HAL_RCCEx_PeriphCLKConfig+0x67c>
 800a7da:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800a7de:	f000 81a9 	beq.w	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 800a7e2:	2601      	movs	r6, #1
 800a7e4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a7e6:	03d9      	lsls	r1, r3, #15
 800a7e8:	d509      	bpl.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->SdmmcClockSelection)
 800a7ea:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a7ec:	2a00      	cmp	r2, #0
 800a7ee:	f000 818f 	beq.w	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a7f2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a7f6:	f000 8136 	beq.w	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 800a7fa:	2601      	movs	r6, #1
 800a7fc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a7fe:	009a      	lsls	r2, r3, #2
 800a800:	f100 811c 	bmi.w	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x764>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a804:	039f      	lsls	r7, r3, #14
 800a806:	d466      	bmi.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    return HAL_OK;
 800a808:	1e30      	subs	r0, r6, #0
 800a80a:	bf18      	it	ne
 800a80c:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a80e:	02de      	lsls	r6, r3, #11
 800a810:	d506      	bpl.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x548>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a812:	4956      	ldr	r1, [pc, #344]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a814:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800a816:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a818:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800a81c:	432a      	orrs	r2, r5
 800a81e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a820:	00dd      	lsls	r5, r3, #3
 800a822:	d507      	bpl.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a824:	4951      	ldr	r1, [pc, #324]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a826:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 800a82a:	690a      	ldr	r2, [r1, #16]
 800a82c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a830:	432a      	orrs	r2, r5
 800a832:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a834:	0299      	lsls	r1, r3, #10
 800a836:	d506      	bpl.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x56e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a838:	494c      	ldr	r1, [pc, #304]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a83a:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 800a83c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a83e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a842:	432a      	orrs	r2, r5
 800a844:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a846:	005a      	lsls	r2, r3, #1
 800a848:	d509      	bpl.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0x586>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a84a:	4a48      	ldr	r2, [pc, #288]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a84c:	6911      	ldr	r1, [r2, #16]
 800a84e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800a852:	6111      	str	r1, [r2, #16]
 800a854:	6911      	ldr	r1, [r2, #16]
 800a856:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800a85a:	4329      	orrs	r1, r5
 800a85c:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a85e:	2b00      	cmp	r3, #0
 800a860:	da06      	bge.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x598>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a862:	4942      	ldr	r1, [pc, #264]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a864:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800a866:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800a868:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a86c:	432a      	orrs	r2, r5
 800a86e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a870:	021b      	lsls	r3, r3, #8
 800a872:	d507      	bpl.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a874:	4a3d      	ldr	r2, [pc, #244]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a876:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800a87a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a87c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a880:	430b      	orrs	r3, r1
 800a882:	6553      	str	r3, [r2, #84]	; 0x54
}
 800a884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a888:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800a88c:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800a890:	f43f af1f 	beq.w	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800a894:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800a898:	f43f af1b 	beq.w	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800a89c:	2601      	movs	r6, #1
 800a89e:	4635      	mov	r5, r6
 800a8a0:	e722      	b.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a8a2:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 800a8a6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800a8aa:	f43f af32 	beq.w	800a712 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800a8ae:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800a8b2:	f43f af2e 	beq.w	800a712 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800a8b6:	2601      	movs	r6, #1
 800a8b8:	4635      	mov	r5, r6
 800a8ba:	e735      	b.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a8bc:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800a8c0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a8c4:	f43f af45 	beq.w	800a752 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800a8c8:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800a8cc:	f43f af41 	beq.w	800a752 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800a8d0:	2601      	movs	r6, #1
 800a8d2:	4635      	mov	r5, r6
 800a8d4:	e748      	b.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->RngClockSelection)
 800a8d6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a8d8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a8dc:	f000 8121 	beq.w	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x84a>
 800a8e0:	d906      	bls.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800a8e2:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800a8e6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a8ea:	d003      	beq.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800a8ec:	2001      	movs	r0, #1
 800a8ee:	e78e      	b.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0x536>
 800a8f0:	2a00      	cmp	r2, #0
 800a8f2:	d1fb      	bne.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x614>
    if(ret == HAL_OK)
 800a8f4:	2d00      	cmp	r5, #0
 800a8f6:	d1f9      	bne.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x614>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a8f8:	4d1c      	ldr	r5, [pc, #112]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x694>)
    return HAL_OK;
 800a8fa:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a8fc:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_OK;
 800a8fe:	bf18      	it	ne
 800a900:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a902:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800a906:	430a      	orrs	r2, r1
 800a908:	656a      	str	r2, [r5, #84]	; 0x54
 800a90a:	e780      	b.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a90c:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800a90e:	2d00      	cmp	r5, #0
 800a910:	f040 80a5 	bne.w	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a914:	4915      	ldr	r1, [pc, #84]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a916:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a918:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a91a:	f022 0207 	bic.w	r2, r2, #7
 800a91e:	4302      	orrs	r2, r0
 800a920:	650a      	str	r2, [r1, #80]	; 0x50
 800a922:	e511      	b.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x70>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a924:	2101      	movs	r1, #1
 800a926:	1d20      	adds	r0, r4, #4
 800a928:	f7ff fbe2 	bl	800a0f0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a92c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a92e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a930:	2d00      	cmp	r5, #0
 800a932:	f040 80dd 	bne.w	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x818>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a936:	490d      	ldr	r1, [pc, #52]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a938:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800a93a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a93c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a940:	4302      	orrs	r2, r0
 800a942:	650a      	str	r2, [r1, #80]	; 0x50
 800a944:	e5e8      	b.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a946:	2101      	movs	r1, #1
 800a948:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a94c:	f7ff fc4a 	bl	800a1e4 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a950:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a952:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a954:	2d00      	cmp	r5, #0
 800a956:	f040 80d9 	bne.w	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a95a:	4904      	ldr	r1, [pc, #16]	; (800a96c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a95c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800a960:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800a962:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800a966:	4302      	orrs	r2, r0
 800a968:	654a      	str	r2, [r1, #84]	; 0x54
 800a96a:	e73c      	b.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 800a96c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a970:	2102      	movs	r1, #2
 800a972:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a976:	f7ff fc35 	bl	800a1e4 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a97a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a97c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a97e:	2d00      	cmp	r5, #0
 800a980:	f040 80c2 	bne.w	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x830>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a984:	49ac      	ldr	r1, [pc, #688]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800a986:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800a98a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800a98c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800a990:	4302      	orrs	r2, r0
 800a992:	658a      	str	r2, [r1, #88]	; 0x58
 800a994:	e715      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a996:	2101      	movs	r1, #1
 800a998:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a99c:	f7ff fc22 	bl	800a1e4 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a9a0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a9a2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a9a4:	2d00      	cmp	r5, #0
 800a9a6:	f040 80ad 	bne.w	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x82c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a9aa:	49a3      	ldr	r1, [pc, #652]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800a9ac:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800a9ae:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800a9b0:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800a9b4:	4302      	orrs	r2, r0
 800a9b6:	654a      	str	r2, [r1, #84]	; 0x54
 800a9b8:	e643      	b.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9ba:	4fa0      	ldr	r7, [pc, #640]	; (800ac3c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9c2:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a9c4:	f7fa ff84 	bl	80058d0 <HAL_GetTick>
 800a9c8:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9ca:	e006      	b.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x702>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9cc:	f7fa ff80 	bl	80058d0 <HAL_GetTick>
 800a9d0:	eba0 0008 	sub.w	r0, r0, r8
 800a9d4:	2864      	cmp	r0, #100	; 0x64
 800a9d6:	f200 818b 	bhi.w	800acf0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	05da      	lsls	r2, r3, #23
 800a9de:	d5f5      	bpl.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    if(ret == HAL_OK)
 800a9e0:	2d00      	cmp	r5, #0
 800a9e2:	f040 81b1 	bne.w	800ad48 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a9e6:	4a94      	ldr	r2, [pc, #592]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800a9e8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800a9ec:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800a9ee:	4059      	eors	r1, r3
 800a9f0:	f411 7f40 	tst.w	r1, #768	; 0x300
 800a9f4:	d00b      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x736>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a9f6:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800a9f8:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a9fa:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800a9fe:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800aa02:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa04:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800aa06:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800aa0a:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800aa0c:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aa0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa12:	f000 817b 	beq.w	800ad0c <HAL_RCCEx_PeriphCLKConfig+0xa34>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa16:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800aa1a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800aa1e:	f000 8189 	beq.w	800ad34 <HAL_RCCEx_PeriphCLKConfig+0xa5c>
 800aa22:	4985      	ldr	r1, [pc, #532]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800aa24:	690a      	ldr	r2, [r1, #16]
 800aa26:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800aa2a:	610a      	str	r2, [r1, #16]
 800aa2c:	4a82      	ldr	r2, [pc, #520]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800aa2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa32:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800aa34:	430b      	orrs	r3, r1
 800aa36:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800aa38:	6823      	ldr	r3, [r4, #0]
 800aa3a:	e5d0      	b.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x306>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800aa3c:	2102      	movs	r1, #2
 800aa3e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800aa42:	f7ff fbcf 	bl	800a1e4 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aa46:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	f43f aedb 	beq.w	800a804 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      status=HAL_ERROR;
 800aa4e:	2601      	movs	r6, #1
 800aa50:	e6d8      	b.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800aa52:	462e      	mov	r6, r5
 800aa54:	e496      	b.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800aa56:	462e      	mov	r6, r5
 800aa58:	e513      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800aa5a:	462e      	mov	r6, r5
 800aa5c:	e4b4      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 800aa5e:	462e      	mov	r6, r5
 800aa60:	e472      	b.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800aa62:	462e      	mov	r6, r5
 800aa64:	e4d2      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x134>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aa66:	2102      	movs	r1, #2
 800aa68:	1d20      	adds	r0, r4, #4
 800aa6a:	f7ff fb41 	bl	800a0f0 <RCCEx_PLL2_Config>
 800aa6e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aa70:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800aa72:	2d00      	cmp	r5, #0
 800aa74:	d153      	bne.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aa76:	4970      	ldr	r1, [pc, #448]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800aa78:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800aa7a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800aa7c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aa80:	4302      	orrs	r2, r0
 800aa82:	64ca      	str	r2, [r1, #76]	; 0x4c
 800aa84:	e6bb      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa86:	496c      	ldr	r1, [pc, #432]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800aa88:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800aa8a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800aa8e:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800aa90:	e46e      	b.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa92:	4969      	ldr	r1, [pc, #420]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800aa94:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800aa96:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800aa9a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800aa9c:	e489      	b.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0xda>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa9e:	4966      	ldr	r1, [pc, #408]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800aaa0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800aaa2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800aaa6:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800aaa8:	e4a5      	b.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaaa:	4963      	ldr	r1, [pc, #396]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800aaac:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800aaae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800aab2:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800aab4:	e4db      	b.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800aab6:	462e      	mov	r6, r5
 800aab8:	e616      	b.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x410>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800aaba:	495f      	ldr	r1, [pc, #380]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800aabc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800aabe:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800aac0:	f022 0203 	bic.w	r2, r2, #3
 800aac4:	4302      	orrs	r2, r0
 800aac6:	64ca      	str	r2, [r1, #76]	; 0x4c
 800aac8:	e586      	b.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800aaca:	462e      	mov	r6, r5
 800aacc:	e64c      	b.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x490>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800aace:	495a      	ldr	r1, [pc, #360]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800aad0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800aad2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800aad4:	f022 0207 	bic.w	r2, r2, #7
 800aad8:	4302      	orrs	r2, r0
 800aada:	654a      	str	r2, [r1, #84]	; 0x54
 800aadc:	e5ca      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aade:	4956      	ldr	r1, [pc, #344]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800aae0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800aae4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800aae6:	f022 0207 	bic.w	r2, r2, #7
 800aaea:	4302      	orrs	r2, r0
 800aaec:	658a      	str	r2, [r1, #88]	; 0x58
 800aaee:	e5db      	b.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800aaf0:	462e      	mov	r6, r5
 800aaf2:	e511      	b.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800aaf4:	462e      	mov	r6, r5
 800aaf6:	e4a4      	b.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800aaf8:	462e      	mov	r6, r5
 800aafa:	e4df      	b.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800aafc:	462e      	mov	r6, r5
 800aafe:	e4fb      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800ab00:	462e      	mov	r6, r5
 800ab02:	e611      	b.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x450>
 800ab04:	462e      	mov	r6, r5
 800ab06:	e59c      	b.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800ab08:	462e      	mov	r6, r5
 800ab0a:	e65a      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800ab0c:	462e      	mov	r6, r5
 800ab0e:	e66a      	b.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab10:	4949      	ldr	r1, [pc, #292]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800ab12:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ab14:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ab18:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800ab1a:	2d00      	cmp	r5, #0
 800ab1c:	d0ab      	beq.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 800ab1e:	462e      	mov	r6, r5
 800ab20:	e66d      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab22:	4845      	ldr	r0, [pc, #276]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800ab24:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800ab26:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800ab2a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800ab2c:	2d00      	cmp	r5, #0
 800ab2e:	f47f aedd 	bne.w	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x614>
 800ab32:	e6e1      	b.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab34:	4940      	ldr	r1, [pc, #256]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800ab36:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ab38:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ab3c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800ab3e:	2d00      	cmp	r5, #0
 800ab40:	d1e4      	bne.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x834>
 800ab42:	e70a      	b.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x682>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab44:	1d20      	adds	r0, r4, #4
 800ab46:	f7ff fad3 	bl	800a0f0 <RCCEx_PLL2_Config>
 800ab4a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ab4c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ab4e:	2d00      	cmp	r5, #0
 800ab50:	d1da      	bne.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800ab52:	e717      	b.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ab54:	2102      	movs	r1, #2
 800ab56:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ab5a:	f7ff fb43 	bl	800a1e4 <RCCEx_PLL3_Config>
 800ab5e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ab60:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ab62:	2d00      	cmp	r5, #0
 800ab64:	d1cc      	bne.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x828>
 800ab66:	e5d7      	b.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x440>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ab68:	2102      	movs	r1, #2
 800ab6a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ab6e:	f7ff fb39 	bl	800a1e4 <RCCEx_PLL3_Config>
 800ab72:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ab74:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ab76:	2d00      	cmp	r5, #0
 800ab78:	d1a7      	bne.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800ab7a:	e5ed      	b.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ab7c:	2101      	movs	r1, #1
 800ab7e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ab82:	f7ff fb2f 	bl	800a1e4 <RCCEx_PLL3_Config>
 800ab86:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ab88:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ab8a:	2d00      	cmp	r5, #0
 800ab8c:	d1b4      	bne.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x820>
 800ab8e:	e48e      	b.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ab90:	2101      	movs	r1, #1
 800ab92:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ab96:	f7ff fb25 	bl	800a1e4 <RCCEx_PLL3_Config>
 800ab9a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ab9c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ab9e:	2d00      	cmp	r5, #0
 800aba0:	d1ac      	bne.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x824>
 800aba2:	e4a1      	b.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aba4:	4924      	ldr	r1, [pc, #144]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800aba6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800aba8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800abac:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800abae:	2d00      	cmp	r5, #0
 800abb0:	d19e      	bne.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x818>
 800abb2:	e6c0      	b.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800abb4:	2102      	movs	r1, #2
 800abb6:	1d20      	adds	r0, r4, #4
 800abb8:	f7ff fa9a 	bl	800a0f0 <RCCEx_PLL2_Config>
 800abbc:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800abbe:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800abc0:	2d00      	cmp	r5, #0
 800abc2:	d197      	bne.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 800abc4:	e436      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800abc6:	2102      	movs	r1, #2
 800abc8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800abcc:	f7ff fb0a 	bl	800a1e4 <RCCEx_PLL3_Config>
 800abd0:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800abd2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800abd4:	2d00      	cmp	r5, #0
 800abd6:	f47f af6e 	bne.w	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800abda:	e57d      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abdc:	4916      	ldr	r1, [pc, #88]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800abde:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800abe0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800abe4:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800abe6:	2d00      	cmp	r5, #0
 800abe8:	f47f acf5 	bne.w	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800abec:	e765      	b.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800abee:	2102      	movs	r1, #2
 800abf0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800abf4:	f7ff faf6 	bl	800a1e4 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800abf8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800abfc:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800abfe:	2800      	cmp	r0, #0
 800ac00:	f43f adba 	beq.w	800a778 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
          status = HAL_ERROR;
 800ac04:	2601      	movs	r6, #1
 800ac06:	e5b7      	b.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ac08:	2102      	movs	r1, #2
 800ac0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ac0e:	f7ff fae9 	bl	800a1e4 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac12:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ac16:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	f43f adbb 	beq.w	800a794 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
        status = HAL_ERROR;
 800ac1e:	2601      	movs	r6, #1
 800ac20:	e5b8      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ac22:	2102      	movs	r1, #2
 800ac24:	3024      	adds	r0, #36	; 0x24
 800ac26:	f7ff fadd 	bl	800a1e4 <RCCEx_PLL3_Config>
 800ac2a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800ac2c:	2e00      	cmp	r6, #0
 800ac2e:	f43f ab6f 	beq.w	800a310 <HAL_RCCEx_PeriphCLKConfig+0x38>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ac32:	6823      	ldr	r3, [r4, #0]
 800ac34:	f7ff bb7a 	b.w	800a32c <HAL_RCCEx_PeriphCLKConfig+0x54>
 800ac38:	58024400 	.word	0x58024400
 800ac3c:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ac40:	2100      	movs	r1, #0
 800ac42:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ac46:	f7ff facd 	bl	800a1e4 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ac4a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ac4c:	4605      	mov	r5, r0
      break;
 800ac4e:	f7ff bbb0 	b.w	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0xda>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac52:	2100      	movs	r1, #0
 800ac54:	1d20      	adds	r0, r4, #4
 800ac56:	f7ff fa4b 	bl	800a0f0 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ac5a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac5c:	4605      	mov	r5, r0
      break;
 800ac5e:	e656      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ac60:	2100      	movs	r1, #0
 800ac62:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ac66:	f7ff fabd 	bl	800a1e4 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ac6a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ac6c:	4605      	mov	r5, r0
      break;
 800ac6e:	e64e      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ac70:	2100      	movs	r1, #0
 800ac72:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ac76:	f7ff fab5 	bl	800a1e4 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ac7a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ac7c:	4605      	mov	r5, r0
      break;
 800ac7e:	f7ff bbf6 	b.w	800a46e <HAL_RCCEx_PeriphCLKConfig+0x196>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ac82:	2100      	movs	r1, #0
 800ac84:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ac88:	f7ff faac 	bl	800a1e4 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ac8c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ac8e:	4605      	mov	r5, r0
      break;
 800ac90:	f7ff bb6e 	b.w	800a370 <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac94:	4932      	ldr	r1, [pc, #200]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
      break;
 800ac96:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac98:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ac9a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ac9e:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800aca0:	e635      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aca2:	2100      	movs	r1, #0
 800aca4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800aca8:	f7ff fa9c 	bl	800a1e4 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800acac:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800acae:	4605      	mov	r5, r0
      break;
 800acb0:	f7ff bba1 	b.w	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800acb4:	2101      	movs	r1, #1
 800acb6:	1d20      	adds	r0, r4, #4
 800acb8:	f7ff fa1a 	bl	800a0f0 <RCCEx_PLL2_Config>
 800acbc:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800acbe:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800acc0:	2d00      	cmp	r5, #0
 800acc2:	f47f acd6 	bne.w	800a672 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800acc6:	e702      	b.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x7f6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800acc8:	2101      	movs	r1, #1
 800acca:	1d20      	adds	r0, r4, #4
 800accc:	f7ff fa10 	bl	800a0f0 <RCCEx_PLL2_Config>
 800acd0:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800acd2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800acd4:	2d00      	cmp	r5, #0
 800acd6:	f47f ace6 	bne.w	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800acda:	e700      	b.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800acdc:	2101      	movs	r1, #1
 800acde:	1d20      	adds	r0, r4, #4
 800ace0:	f7ff fa06 	bl	800a0f0 <RCCEx_PLL2_Config>
 800ace4:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ace6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ace8:	2d00      	cmp	r5, #0
 800acea:	f47f af0b 	bne.w	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800acee:	e65c      	b.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x6d2>
            ret = HAL_TIMEOUT;
 800acf0:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800acf2:	6823      	ldr	r3, [r4, #0]
            ret = HAL_TIMEOUT;
 800acf4:	4635      	mov	r5, r6
 800acf6:	e472      	b.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800acf8:	2601      	movs	r6, #1
 800acfa:	f7ff bb17 	b.w	800a32c <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acfe:	4818      	ldr	r0, [pc, #96]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ad00:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800ad02:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800ad06:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800ad08:	f7ff bb09 	b.w	800a31e <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 800ad0c:	f7fa fde0 	bl	80058d0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad10:	f8df 804c 	ldr.w	r8, [pc, #76]	; 800ad60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
        tickstart = HAL_GetTick();
 800ad14:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad16:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad1a:	e004      	b.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad1c:	f7fa fdd8 	bl	80058d0 <HAL_GetTick>
 800ad20:	1bc0      	subs	r0, r0, r7
 800ad22:	4548      	cmp	r0, r9
 800ad24:	d8e4      	bhi.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad26:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800ad2a:	079b      	lsls	r3, r3, #30
 800ad2c:	d5f6      	bpl.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0xa44>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad2e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800ad32:	e670      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800ad34:	480a      	ldr	r0, [pc, #40]	; (800ad60 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ad36:	4a0b      	ldr	r2, [pc, #44]	; (800ad64 <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 800ad38:	6901      	ldr	r1, [r0, #16]
 800ad3a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800ad3e:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800ad42:	430a      	orrs	r2, r1
 800ad44:	6102      	str	r2, [r0, #16]
 800ad46:	e671      	b.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x754>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	462e      	mov	r6, r5
 800ad4c:	e447      	b.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ad4e:	2601      	movs	r6, #1
 800ad50:	4635      	mov	r5, r6
 800ad52:	e48f      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->FmcClockSelection)
 800ad54:	2601      	movs	r6, #1
 800ad56:	4635      	mov	r5, r6
 800ad58:	e43e      	b.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ad5a:	2601      	movs	r6, #1
 800ad5c:	4635      	mov	r5, r6
 800ad5e:	e4a3      	b.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800ad60:	58024400 	.word	0x58024400
 800ad64:	00ffffcf 	.word	0x00ffffcf

0800ad68 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800ad68:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ad6a:	f7ff f8f1 	bl	8009f50 <HAL_RCC_GetHCLKFreq>
 800ad6e:	4b05      	ldr	r3, [pc, #20]	; (800ad84 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800ad70:	4a05      	ldr	r2, [pc, #20]	; (800ad88 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ad78:	5cd3      	ldrb	r3, [r2, r3]
 800ad7a:	f003 031f 	and.w	r3, r3, #31
}
 800ad7e:	40d8      	lsrs	r0, r3
 800ad80:	bd08      	pop	{r3, pc}
 800ad82:	bf00      	nop
 800ad84:	58024400 	.word	0x58024400
 800ad88:	0801a1b8 	.word	0x0801a1b8

0800ad8c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad8c:	4b4f      	ldr	r3, [pc, #316]	; (800aecc <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800ad8e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad90:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ad92:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ad94:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800ad96:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ad9a:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ad9e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800ada0:	d05c      	beq.n	800ae5c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ada2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ada6:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adaa:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800adae:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800adb2:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800adb4:	ee07 4a90 	vmov	s15, r4
 800adb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800adbc:	d003      	beq.n	800adc6 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800adbe:	2902      	cmp	r1, #2
 800adc0:	d075      	beq.n	800aeae <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800adc2:	2900      	cmp	r1, #0
 800adc4:	d04f      	beq.n	800ae66 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800adc6:	ee07 2a90 	vmov	s15, r2
 800adca:	eddf 6a41 	vldr	s13, [pc, #260]	; 800aed0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800adce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800add2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800add8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800aed4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800addc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ade0:	ee06 3a90 	vmov	s13, r3
 800ade4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800ade8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800adec:	ee76 6a85 	vadd.f32	s13, s13, s10
 800adf0:	eee7 6a25 	vfma.f32	s13, s14, s11
 800adf4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800adf8:	4a34      	ldr	r2, [pc, #208]	; (800aecc <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800adfa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800adfe:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ae00:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ae04:	ee07 3a10 	vmov	s14, r3
 800ae08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800ae0c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ae0e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ae12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae1a:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ae1e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ae20:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800ae24:	ee07 3a10 	vmov	s14, r3
 800ae28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ae2c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ae30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae38:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ae3c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ae3e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800ae42:	ee07 3a90 	vmov	s15, r3
 800ae46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae4a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ae4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae52:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ae56:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800ae5a:	4770      	bx	lr
 800ae5c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ae5e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ae62:	6082      	str	r2, [r0, #8]
}
 800ae64:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae66:	6819      	ldr	r1, [r3, #0]
 800ae68:	0689      	lsls	r1, r1, #26
 800ae6a:	d527      	bpl.n	800aebc <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae6c:	681c      	ldr	r4, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae6e:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae72:	4919      	ldr	r1, [pc, #100]	; (800aed8 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae74:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ae78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae7a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae82:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800aed4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800ae86:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae8a:	40d1      	lsrs	r1, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ae8c:	ee06 3a90 	vmov	s13, r3
 800ae90:	ee05 1a90 	vmov	s11, r1
 800ae94:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ae98:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800ae9c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800aea0:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800aea4:	eee7 6a05 	vfma.f32	s13, s14, s10
 800aea8:	ee66 6a26 	vmul.f32	s13, s12, s13
 800aeac:	e7a4      	b.n	800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aeae:	ee07 2a90 	vmov	s15, r2
 800aeb2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800aedc <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800aeb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aeba:	e78a      	b.n	800add2 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aebc:	ee07 2a90 	vmov	s15, r2
 800aec0:	eddf 6a07 	vldr	s13, [pc, #28]	; 800aee0 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800aec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aec8:	e783      	b.n	800add2 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800aeca:	bf00      	nop
 800aecc:	58024400 	.word	0x58024400
 800aed0:	4a742400 	.word	0x4a742400
 800aed4:	39000000 	.word	0x39000000
 800aed8:	03d09000 	.word	0x03d09000
 800aedc:	4bbebc20 	.word	0x4bbebc20
 800aee0:	4c742400 	.word	0x4c742400

0800aee4 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aee4:	4b4f      	ldr	r3, [pc, #316]	; (800b024 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800aee6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aee8:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800aeea:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aeec:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800aeee:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800aef2:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800aef6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 800aef8:	d05c      	beq.n	800afb4 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800aefa:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aefe:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af02:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800af06:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800af0a:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800af0c:	ee07 4a90 	vmov	s15, r4
 800af10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800af14:	d003      	beq.n	800af1e <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800af16:	2902      	cmp	r1, #2
 800af18:	d075      	beq.n	800b006 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800af1a:	2900      	cmp	r1, #0
 800af1c:	d04f      	beq.n	800afbe <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af1e:	ee07 2a90 	vmov	s15, r2
 800af22:	eddf 6a41 	vldr	s13, [pc, #260]	; 800b028 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800af26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800af30:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800b02c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800af34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af38:	ee06 3a90 	vmov	s13, r3
 800af3c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800af40:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800af44:	ee76 6a85 	vadd.f32	s13, s13, s10
 800af48:	eee7 6a25 	vfma.f32	s13, s14, s11
 800af4c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800af50:	4a34      	ldr	r2, [pc, #208]	; (800b024 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800af52:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800af56:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800af58:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800af5c:	ee07 3a10 	vmov	s14, r3
 800af60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800af64:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800af66:	ee37 7a06 	vadd.f32	s14, s14, s12
 800af6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af72:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800af76:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800af78:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800af7c:	ee07 3a10 	vmov	s14, r3
 800af80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800af84:	ee37 7a06 	vadd.f32	s14, s14, s12
 800af88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af90:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800af94:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800af96:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800af9a:	ee07 3a90 	vmov	s15, r3
 800af9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afa2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800afa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afaa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800afae:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800afb2:	4770      	bx	lr
 800afb4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800afb6:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800afba:	6082      	str	r2, [r0, #8]
}
 800afbc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afbe:	6819      	ldr	r1, [r3, #0]
 800afc0:	0689      	lsls	r1, r1, #26
 800afc2:	d527      	bpl.n	800b014 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800afc4:	681c      	ldr	r4, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800afc6:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800afca:	4919      	ldr	r1, [pc, #100]	; (800b030 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800afcc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800afd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800afd2:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800afd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afda:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800b02c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800afde:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800afe2:	40d1      	lsrs	r1, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800afe4:	ee06 3a90 	vmov	s13, r3
 800afe8:	ee05 1a90 	vmov	s11, r1
 800afec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800aff0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800aff4:	ee76 6a86 	vadd.f32	s13, s13, s12
 800aff8:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800affc:	eee7 6a05 	vfma.f32	s13, s14, s10
 800b000:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b004:	e7a4      	b.n	800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b006:	ee07 2a90 	vmov	s15, r2
 800b00a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800b034 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800b00e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b012:	e78a      	b.n	800af2a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b014:	ee07 2a90 	vmov	s15, r2
 800b018:	eddf 6a07 	vldr	s13, [pc, #28]	; 800b038 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800b01c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b020:	e783      	b.n	800af2a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800b022:	bf00      	nop
 800b024:	58024400 	.word	0x58024400
 800b028:	4a742400 	.word	0x4a742400
 800b02c:	39000000 	.word	0x39000000
 800b030:	03d09000 	.word	0x03d09000
 800b034:	4bbebc20 	.word	0x4bbebc20
 800b038:	4c742400 	.word	0x4c742400

0800b03c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b03c:	4b4f      	ldr	r3, [pc, #316]	; (800b17c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800b03e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b040:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b042:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b044:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 800b046:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b04a:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b04e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 800b050:	d05c      	beq.n	800b10c <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b052:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b056:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b05a:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b05e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800b062:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b064:	ee07 4a90 	vmov	s15, r4
 800b068:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800b06c:	d07e      	beq.n	800b16c <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800b06e:	2902      	cmp	r1, #2
 800b070:	d075      	beq.n	800b15e <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 800b072:	2900      	cmp	r1, #0
 800b074:	d04f      	beq.n	800b116 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b076:	ee07 2a90 	vmov	s15, r2
 800b07a:	eddf 6a41 	vldr	s13, [pc, #260]	; 800b180 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800b07e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b084:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800b088:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800b184 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800b08c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b090:	ee06 3a90 	vmov	s13, r3
 800b094:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800b098:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b09c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b0a0:	eee7 6a25 	vfma.f32	s13, s14, s11
 800b0a4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b0a8:	4a34      	ldr	r2, [pc, #208]	; (800b17c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800b0aa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b0ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b0b0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b0b4:	ee07 3a10 	vmov	s14, r3
 800b0b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800b0bc:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b0be:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b0c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0ca:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b0ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b0d0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800b0d4:	ee07 3a10 	vmov	s14, r3
 800b0d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b0dc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b0e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0e8:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b0ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b0ee:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b0f2:	ee07 3a90 	vmov	s15, r3
 800b0f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0fa:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b0fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b102:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b106:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800b10a:	4770      	bx	lr
 800b10c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b10e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b112:	6082      	str	r2, [r0, #8]
}
 800b114:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b116:	6819      	ldr	r1, [r3, #0]
 800b118:	0689      	lsls	r1, r1, #26
 800b11a:	d5ac      	bpl.n	800b076 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b11c:	681c      	ldr	r4, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b11e:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b122:	4919      	ldr	r1, [pc, #100]	; (800b188 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b124:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b12a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b12e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b132:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800b184 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800b136:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b13a:	40d1      	lsrs	r1, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b13c:	ee06 3a90 	vmov	s13, r3
 800b140:	ee05 1a90 	vmov	s11, r1
 800b144:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b148:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800b14c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b150:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800b154:	eee7 6a05 	vfma.f32	s13, s14, s10
 800b158:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b15c:	e7a4      	b.n	800b0a8 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b15e:	ee07 2a90 	vmov	s15, r2
 800b162:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800b18c <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800b166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b16a:	e78a      	b.n	800b082 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b16c:	ee07 2a90 	vmov	s15, r2
 800b170:	eddf 6a07 	vldr	s13, [pc, #28]	; 800b190 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 800b174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b178:	e783      	b.n	800b082 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 800b17a:	bf00      	nop
 800b17c:	58024400 	.word	0x58024400
 800b180:	4c742400 	.word	0x4c742400
 800b184:	39000000 	.word	0x39000000
 800b188:	03d09000 	.word	0x03d09000
 800b18c:	4bbebc20 	.word	0x4bbebc20
 800b190:	4a742400 	.word	0x4a742400

0800b194 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b194:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 800b198:	b500      	push	{lr}
 800b19a:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b19c:	d074      	beq.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b19e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800b1a2:	d02c      	beq.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b1a4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b1a8:	f000 80cd 	beq.w	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b1ac:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800b1b0:	d07e      	beq.n	800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b1b2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800b1b6:	d058      	beq.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b1b8:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800b1bc:	f000 8102 	beq.w	800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b1c0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800b1c4:	f000 810d 	beq.w	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b1c8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800b1cc:	f000 80e1 	beq.w	800b392 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b1d0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800b1d4:	d138      	bne.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b1d6:	4b99      	ldr	r3, [pc, #612]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b1d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 800b1de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1e2:	f000 808d 	beq.w	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800b1e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1ea:	f000 813d 	beq.w	800b468 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 800b1ee:	bb5b      	cbnz	r3, 800b248 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b1f0:	4b92      	ldr	r3, [pc, #584]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b1f2:	6818      	ldr	r0, [r3, #0]
 800b1f4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800b1f8:	d043      	beq.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
            frequency = HSE_VALUE;
 800b1fa:	4891      	ldr	r0, [pc, #580]	; (800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800b1fc:	e041      	b.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b1fe:	4a8f      	ldr	r2, [pc, #572]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b200:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b202:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 800b206:	2b80      	cmp	r3, #128	; 0x80
 800b208:	f000 8098 	beq.w	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800b20c:	d920      	bls.n	800b250 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800b20e:	2bc0      	cmp	r3, #192	; 0xc0
 800b210:	d036      	beq.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b216:	d117      	bne.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b218:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b21a:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b21c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b220:	0749      	lsls	r1, r1, #29
 800b222:	d502      	bpl.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 800b224:	2b00      	cmp	r3, #0
 800b226:	f000 80ae 	beq.w	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b22a:	4a84      	ldr	r2, [pc, #528]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b22c:	6812      	ldr	r2, [r2, #0]
 800b22e:	05d0      	lsls	r0, r2, #23
 800b230:	d503      	bpl.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800b232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b236:	f000 80ff 	beq.w	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b23a:	4a80      	ldr	r2, [pc, #512]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b23c:	6812      	ldr	r2, [r2, #0]
 800b23e:	0391      	lsls	r1, r2, #14
 800b240:	d502      	bpl.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800b242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b246:	d0d8      	beq.n	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      switch (srcclk)
 800b248:	2000      	movs	r0, #0
}
 800b24a:	b005      	add	sp, #20
 800b24c:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 800b250:	2b00      	cmp	r3, #0
 800b252:	d04c      	beq.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800b254:	2b40      	cmp	r3, #64	; 0x40
 800b256:	d1f7      	bne.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b258:	6810      	ldr	r0, [r2, #0]
 800b25a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b25e:	d010      	beq.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b260:	a801      	add	r0, sp, #4
 800b262:	f7ff fd93 	bl	800ad8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b266:	9801      	ldr	r0, [sp, #4]
 800b268:	e00b      	b.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b26a:	4a74      	ldr	r2, [pc, #464]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b26c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b26e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 800b272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b276:	d061      	beq.n	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800b278:	d937      	bls.n	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 800b27a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b27e:	d179      	bne.n	800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          frequency = EXTERNAL_CLOCK_VALUE;
 800b280:	4870      	ldr	r0, [pc, #448]	; (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
}
 800b282:	b005      	add	sp, #20
 800b284:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b288:	4b6c      	ldr	r3, [pc, #432]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b28a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b28c:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 800b290:	2b04      	cmp	r3, #4
 800b292:	d8d9      	bhi.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800b294:	a201      	add	r2, pc, #4	; (adr r2, 800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 800b296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b29a:	bf00      	nop
 800b29c:	0800b301 	.word	0x0800b301
 800b2a0:	0800b325 	.word	0x0800b325
 800b2a4:	0800b311 	.word	0x0800b311
 800b2a8:	0800b281 	.word	0x0800b281
 800b2ac:	0800b30d 	.word	0x0800b30d
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b2b0:	4a62      	ldr	r2, [pc, #392]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b2b2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b2b4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 800b2b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2bc:	d03e      	beq.n	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800b2be:	d937      	bls.n	800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 800b2c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b2c4:	d0dc      	beq.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b2c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b2ca:	d1bd      	bne.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b2cc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2ce:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b2d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2d4:	0752      	lsls	r2, r2, #29
 800b2d6:	d5a8      	bpl.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1a6      	bne.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b2dc:	4b57      	ldr	r3, [pc, #348]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b2de:	485a      	ldr	r0, [pc, #360]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b2e6:	40d8      	lsrs	r0, r3
 800b2e8:	e7cb      	b.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d146      	bne.n	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2ee:	6810      	ldr	r0, [r2, #0]
 800b2f0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800b2f4:	d0c5      	beq.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2f6:	a801      	add	r0, sp, #4
 800b2f8:	f7ff fea0 	bl	800b03c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2fc:	9802      	ldr	r0, [sp, #8]
 800b2fe:	e7c0      	b.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b300:	4b4e      	ldr	r3, [pc, #312]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b302:	6818      	ldr	r0, [r3, #0]
 800b304:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800b308:	d0bb      	beq.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800b30a:	e7f4      	b.n	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b30c:	4a4b      	ldr	r2, [pc, #300]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b30e:	e783      	b.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b310:	4b4a      	ldr	r3, [pc, #296]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b312:	6818      	ldr	r0, [r3, #0]
 800b314:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b318:	d0b3      	beq.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b31a:	a801      	add	r0, sp, #4
 800b31c:	f7ff fde2 	bl	800aee4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b320:	9801      	ldr	r0, [sp, #4]
 800b322:	e7ae      	b.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b324:	4b45      	ldr	r3, [pc, #276]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b326:	6818      	ldr	r0, [r3, #0]
 800b328:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b32c:	d0a9      	beq.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800b32e:	e797      	b.n	800b260 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      switch (saiclocksource)
 800b330:	2b00      	cmp	r3, #0
 800b332:	d0dc      	beq.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800b334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b338:	d08e      	beq.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 800b33a:	e785      	b.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b33c:	6810      	ldr	r0, [r2, #0]
 800b33e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b342:	d09e      	beq.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800b344:	e7e9      	b.n	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b346:	4a3d      	ldr	r2, [pc, #244]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b348:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b34a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 800b34e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b352:	d0f3      	beq.n	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800b354:	d806      	bhi.n	800b364 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800b356:	2b00      	cmp	r3, #0
 800b358:	d0c9      	beq.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800b35a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b35e:	f43f af7b 	beq.w	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 800b362:	e771      	b.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800b364:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b368:	d08a      	beq.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b36a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b36e:	f43f af53 	beq.w	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 800b372:	e769      	b.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      switch (srcclk)
 800b374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b378:	d0a8      	beq.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b37a:	e765      	b.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800b37c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b380:	f43f af6a 	beq.w	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 800b384:	e760      	b.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b386:	6813      	ldr	r3, [r2, #0]
 800b388:	482f      	ldr	r0, [pc, #188]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b38a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b38e:	40d8      	lsrs	r0, r3
 800b390:	e777      	b.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b392:	4a2a      	ldr	r2, [pc, #168]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b394:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b396:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800b39a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b39e:	d06e      	beq.n	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800b3a0:	d83c      	bhi.n	800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x288>
 800b3a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3a6:	d05f      	beq.n	800b468 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 800b3a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3ac:	d127      	bne.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3ae:	4b23      	ldr	r3, [pc, #140]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b3b0:	6818      	ldr	r0, [r3, #0]
 800b3b2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b3b6:	f43f af64 	beq.w	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3ba:	a801      	add	r0, sp, #4
 800b3bc:	f7ff fd92 	bl	800aee4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b3c0:	9802      	ldr	r0, [sp, #8]
 800b3c2:	e75e      	b.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b3c4:	4a1d      	ldr	r2, [pc, #116]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b3c6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b3c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800b3cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3d0:	d040      	beq.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800b3d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3d6:	f43f af79 	beq.w	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f47f af34 	bne.w	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800b3e0:	e73a      	b.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b3e2:	4b16      	ldr	r3, [pc, #88]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b3e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 800b3e6:	03d2      	lsls	r2, r2, #15
 800b3e8:	d58b      	bpl.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3ea:	6818      	ldr	r0, [r3, #0]
 800b3ec:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b3f0:	f43f af47 	beq.w	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3f4:	a801      	add	r0, sp, #4
 800b3f6:	f7ff fcc9 	bl	800ad8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b3fa:	9803      	ldr	r0, [sp, #12]
 800b3fc:	e741      	b.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	f47f af22 	bne.w	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b404:	f7fe fda4 	bl	8009f50 <HAL_RCC_GetHCLKFreq>
 800b408:	4b0c      	ldr	r3, [pc, #48]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b40a:	4a10      	ldr	r2, [pc, #64]	; (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800b40c:	6a1b      	ldr	r3, [r3, #32]
 800b40e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b412:	5cd3      	ldrb	r3, [r2, r3]
 800b414:	f003 031f 	and.w	r3, r3, #31
 800b418:	40d8      	lsrs	r0, r3
          break;
 800b41a:	e732      	b.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 800b41c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b420:	d004      	beq.n	800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 800b422:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b426:	f43f aee3 	beq.w	800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 800b42a:	e70d      	b.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b42c:	4b03      	ldr	r3, [pc, #12]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b42e:	6818      	ldr	r0, [r3, #0]
 800b430:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800b434:	f43f af25 	beq.w	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
            frequency = CSI_VALUE;
 800b438:	4805      	ldr	r0, [pc, #20]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b43a:	e722      	b.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800b43c:	58024400 	.word	0x58024400
 800b440:	017d7840 	.word	0x017d7840
 800b444:	00bb8000 	.word	0x00bb8000
 800b448:	03d09000 	.word	0x03d09000
 800b44c:	0801a1b8 	.word	0x0801a1b8
 800b450:	003d0900 	.word	0x003d0900
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b454:	6810      	ldr	r0, [r2, #0]
 800b456:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b45a:	f43f af12 	beq.w	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b45e:	a801      	add	r0, sp, #4
 800b460:	f7ff fd40 	bl	800aee4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b464:	9803      	ldr	r0, [sp, #12]
 800b466:	e70c      	b.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b468:	4b08      	ldr	r3, [pc, #32]	; (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800b46a:	6818      	ldr	r0, [r3, #0]
 800b46c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b470:	f43f af07 	beq.w	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b474:	a801      	add	r0, sp, #4
 800b476:	f7ff fc89 	bl	800ad8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b47a:	9802      	ldr	r0, [sp, #8]
 800b47c:	e701      	b.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b47e:	6810      	ldr	r0, [r2, #0]
 800b480:	f010 0004 	ands.w	r0, r0, #4
 800b484:	f43f aefd 	beq.w	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800b488:	e728      	b.n	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800b48a:	bf00      	nop
 800b48c:	58024400 	.word	0x58024400

0800b490 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b490:	2800      	cmp	r0, #0
 800b492:	f000 80a5 	beq.w	800b5e0 <HAL_TIM_Base_Init+0x150>
{
 800b496:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b498:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b49c:	4604      	mov	r4, r0
 800b49e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d076      	beq.n	800b594 <HAL_TIM_Base_Init+0x104>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4a6:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800b4a8:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4aa:	494e      	ldr	r1, [pc, #312]	; (800b5e4 <HAL_TIM_Base_Init+0x154>)
 800b4ac:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800b4b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4b4:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 800b4b8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4ba:	fab1 f181 	clz	r1, r1
 800b4be:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800b4c2:	d027      	beq.n	800b514 <HAL_TIM_Base_Init+0x84>
 800b4c4:	bb31      	cbnz	r1, 800b514 <HAL_TIM_Base_Init+0x84>
 800b4c6:	4848      	ldr	r0, [pc, #288]	; (800b5e8 <HAL_TIM_Base_Init+0x158>)
 800b4c8:	4d48      	ldr	r5, [pc, #288]	; (800b5ec <HAL_TIM_Base_Init+0x15c>)
 800b4ca:	4282      	cmp	r2, r0
 800b4cc:	d067      	beq.n	800b59e <HAL_TIM_Base_Init+0x10e>
 800b4ce:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800b4d2:	4282      	cmp	r2, r0
 800b4d4:	d063      	beq.n	800b59e <HAL_TIM_Base_Init+0x10e>
 800b4d6:	1b55      	subs	r5, r2, r5
 800b4d8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800b4dc:	fab5 f585 	clz	r5, r5
 800b4e0:	4282      	cmp	r2, r0
 800b4e2:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800b4e6:	d063      	beq.n	800b5b0 <HAL_TIM_Base_Init+0x120>
 800b4e8:	2d00      	cmp	r5, #0
 800b4ea:	d161      	bne.n	800b5b0 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4ec:	4840      	ldr	r0, [pc, #256]	; (800b5f0 <HAL_TIM_Base_Init+0x160>)
 800b4ee:	4941      	ldr	r1, [pc, #260]	; (800b5f4 <HAL_TIM_Base_Init+0x164>)
 800b4f0:	428a      	cmp	r2, r1
 800b4f2:	bf18      	it	ne
 800b4f4:	4282      	cmpne	r2, r0
 800b4f6:	d065      	beq.n	800b5c4 <HAL_TIM_Base_Init+0x134>
 800b4f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b4fc:	428a      	cmp	r2, r1
 800b4fe:	d061      	beq.n	800b5c4 <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b500:	69a0      	ldr	r0, [r4, #24]
 800b502:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b506:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b508:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800b50a:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b50c:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b50e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b510:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b512:	e023      	b.n	800b55c <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b514:	4d35      	ldr	r5, [pc, #212]	; (800b5ec <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b51a:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b51c:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800b51e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b520:	fab5 f585 	clz	r5, r5
 800b524:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b526:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b52c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b52e:	69a0      	ldr	r0, [r4, #24]
 800b530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b534:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800b536:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b538:	68e3      	ldr	r3, [r4, #12]
 800b53a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b53c:	6863      	ldr	r3, [r4, #4]
 800b53e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b540:	b951      	cbnz	r1, 800b558 <HAL_TIM_Base_Init+0xc8>
 800b542:	b94d      	cbnz	r5, 800b558 <HAL_TIM_Base_Init+0xc8>
 800b544:	492a      	ldr	r1, [pc, #168]	; (800b5f0 <HAL_TIM_Base_Init+0x160>)
 800b546:	4b2b      	ldr	r3, [pc, #172]	; (800b5f4 <HAL_TIM_Base_Init+0x164>)
 800b548:	429a      	cmp	r2, r3
 800b54a:	bf18      	it	ne
 800b54c:	428a      	cmpne	r2, r1
 800b54e:	d003      	beq.n	800b558 <HAL_TIM_Base_Init+0xc8>
 800b550:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b554:	429a      	cmp	r2, r3
 800b556:	d101      	bne.n	800b55c <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b558:	6963      	ldr	r3, [r4, #20]
 800b55a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b55c:	2301      	movs	r3, #1
  return HAL_OK;
 800b55e:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800b560:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b562:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b566:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b56a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b56e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b572:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800b576:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b57a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b57e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b582:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b586:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800b58a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800b58e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800b592:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800b594:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800b598:	f7f9 feb4 	bl	8005304 <HAL_TIM_Base_MspInit>
 800b59c:	e783      	b.n	800b4a6 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b59e:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b5a4:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5a6:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 800b5aa:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5ac:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5ae:	e7ba      	b.n	800b526 <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 800b5b0:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b5b6:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5b8:	480f      	ldr	r0, [pc, #60]	; (800b5f8 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5ba:	4282      	cmp	r2, r0
 800b5bc:	d0b3      	beq.n	800b526 <HAL_TIM_Base_Init+0x96>
 800b5be:	2d00      	cmp	r5, #0
 800b5c0:	d1b1      	bne.n	800b526 <HAL_TIM_Base_Init+0x96>
 800b5c2:	e793      	b.n	800b4ec <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5c4:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5ca:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5cc:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b5ce:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5d4:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800b5d6:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800b5d8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b5da:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b5dc:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b5de:	e7b1      	b.n	800b544 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
 800b5e0:	2001      	movs	r0, #1
}
 800b5e2:	4770      	bx	lr
 800b5e4:	40010000 	.word	0x40010000
 800b5e8:	40000400 	.word	0x40000400
 800b5ec:	40010400 	.word	0x40010400
 800b5f0:	40014000 	.word	0x40014000
 800b5f4:	40014400 	.word	0x40014400
 800b5f8:	40000c00 	.word	0x40000c00

0800b5fc <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800b5fc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b600:	2b01      	cmp	r3, #1
 800b602:	d13d      	bne.n	800b680 <HAL_TIM_Base_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b604:	6802      	ldr	r2, [r0, #0]
 800b606:	4b23      	ldr	r3, [pc, #140]	; (800b694 <HAL_TIM_Base_Start+0x98>)
 800b608:	4923      	ldr	r1, [pc, #140]	; (800b698 <HAL_TIM_Base_Start+0x9c>)
 800b60a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800b60e:	bf18      	it	ne
 800b610:	429a      	cmpne	r2, r3
{
 800b612:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b614:	bf0c      	ite	eq
 800b616:	2301      	moveq	r3, #1
 800b618:	2300      	movne	r3, #0
 800b61a:	4d20      	ldr	r5, [pc, #128]	; (800b69c <HAL_TIM_Base_Start+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800b61c:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b61e:	42aa      	cmp	r2, r5
 800b620:	bf08      	it	eq
 800b622:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800b626:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b62a:	4c1d      	ldr	r4, [pc, #116]	; (800b6a0 <HAL_TIM_Base_Start+0xa4>)
 800b62c:	428a      	cmp	r2, r1
 800b62e:	bf08      	it	eq
 800b630:	f043 0301 	orreq.w	r3, r3, #1
 800b634:	481b      	ldr	r0, [pc, #108]	; (800b6a4 <HAL_TIM_Base_Start+0xa8>)
 800b636:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800b63a:	42a2      	cmp	r2, r4
 800b63c:	bf08      	it	eq
 800b63e:	f043 0301 	orreq.w	r3, r3, #1
 800b642:	4282      	cmp	r2, r0
 800b644:	bf08      	it	eq
 800b646:	f043 0301 	orreq.w	r3, r3, #1
 800b64a:	428a      	cmp	r2, r1
 800b64c:	bf08      	it	eq
 800b64e:	f043 0301 	orreq.w	r3, r3, #1
 800b652:	b933      	cbnz	r3, 800b662 <HAL_TIM_Base_Start+0x66>
 800b654:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800b658:	1a10      	subs	r0, r2, r0
 800b65a:	fab0 f080 	clz	r0, r0
 800b65e:	0940      	lsrs	r0, r0, #5
 800b660:	b198      	cbz	r0, 800b68a <HAL_TIM_Base_Start+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b662:	6891      	ldr	r1, [r2, #8]
 800b664:	4b10      	ldr	r3, [pc, #64]	; (800b6a8 <HAL_TIM_Base_Start+0xac>)
 800b666:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b668:	2b06      	cmp	r3, #6
 800b66a:	d00b      	beq.n	800b684 <HAL_TIM_Base_Start+0x88>
 800b66c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b670:	d008      	beq.n	800b684 <HAL_TIM_Base_Start+0x88>
      __HAL_TIM_ENABLE(htim);
 800b672:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800b674:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800b676:	f043 0301 	orr.w	r3, r3, #1
 800b67a:	6013      	str	r3, [r2, #0]
}
 800b67c:	bc30      	pop	{r4, r5}
 800b67e:	4770      	bx	lr
    return HAL_ERROR;
 800b680:	2001      	movs	r0, #1
}
 800b682:	4770      	bx	lr
  return HAL_OK;
 800b684:	2000      	movs	r0, #0
}
 800b686:	bc30      	pop	{r4, r5}
 800b688:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800b68a:	6813      	ldr	r3, [r2, #0]
 800b68c:	f043 0301 	orr.w	r3, r3, #1
 800b690:	6013      	str	r3, [r2, #0]
 800b692:	e7f3      	b.n	800b67c <HAL_TIM_Base_Start+0x80>
 800b694:	40010000 	.word	0x40010000
 800b698:	40000800 	.word	0x40000800
 800b69c:	40000400 	.word	0x40000400
 800b6a0:	40000c00 	.word	0x40000c00
 800b6a4:	40010400 	.word	0x40010400
 800b6a8:	00010007 	.word	0x00010007

0800b6ac <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800b6ac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d141      	bne.n	800b738 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b6b4:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800b6b6:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6b8:	4b24      	ldr	r3, [pc, #144]	; (800b74c <HAL_TIM_Base_Start_IT+0xa0>)
 800b6ba:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800b6be:	bf18      	it	ne
 800b6c0:	429a      	cmpne	r2, r3
{
 800b6c2:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6c4:	bf0c      	ite	eq
 800b6c6:	2301      	moveq	r3, #1
 800b6c8:	2300      	movne	r3, #0
 800b6ca:	4d21      	ldr	r5, [pc, #132]	; (800b750 <HAL_TIM_Base_Start_IT+0xa4>)
 800b6cc:	4c21      	ldr	r4, [pc, #132]	; (800b754 <HAL_TIM_Base_Start_IT+0xa8>)
 800b6ce:	42aa      	cmp	r2, r5
 800b6d0:	bf08      	it	eq
 800b6d2:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800b6d6:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b6da:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6dc:	42a2      	cmp	r2, r4
 800b6de:	bf08      	it	eq
 800b6e0:	f043 0301 	orreq.w	r3, r3, #1
 800b6e4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b6e8:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6ec:	481a      	ldr	r0, [pc, #104]	; (800b758 <HAL_TIM_Base_Start_IT+0xac>)
 800b6ee:	42a2      	cmp	r2, r4
 800b6f0:	bf08      	it	eq
 800b6f2:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b6f6:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6f8:	4282      	cmp	r2, r0
 800b6fa:	bf08      	it	eq
 800b6fc:	f043 0301 	orreq.w	r3, r3, #1
 800b700:	4916      	ldr	r1, [pc, #88]	; (800b75c <HAL_TIM_Base_Start_IT+0xb0>)
 800b702:	428a      	cmp	r2, r1
 800b704:	bf08      	it	eq
 800b706:	f043 0301 	orreq.w	r3, r3, #1
 800b70a:	b933      	cbnz	r3, 800b71a <HAL_TIM_Base_Start_IT+0x6e>
 800b70c:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800b710:	1a10      	subs	r0, r2, r0
 800b712:	fab0 f080 	clz	r0, r0
 800b716:	0940      	lsrs	r0, r0, #5
 800b718:	b198      	cbz	r0, 800b742 <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b71a:	6891      	ldr	r1, [r2, #8]
 800b71c:	4b10      	ldr	r3, [pc, #64]	; (800b760 <HAL_TIM_Base_Start_IT+0xb4>)
 800b71e:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b720:	2b06      	cmp	r3, #6
 800b722:	d00b      	beq.n	800b73c <HAL_TIM_Base_Start_IT+0x90>
 800b724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b728:	d008      	beq.n	800b73c <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 800b72a:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800b72c:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800b72e:	f043 0301 	orr.w	r3, r3, #1
 800b732:	6013      	str	r3, [r2, #0]
}
 800b734:	bc30      	pop	{r4, r5}
 800b736:	4770      	bx	lr
    return HAL_ERROR;
 800b738:	2001      	movs	r0, #1
}
 800b73a:	4770      	bx	lr
  return HAL_OK;
 800b73c:	2000      	movs	r0, #0
}
 800b73e:	bc30      	pop	{r4, r5}
 800b740:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800b742:	6813      	ldr	r3, [r2, #0]
 800b744:	f043 0301 	orr.w	r3, r3, #1
 800b748:	6013      	str	r3, [r2, #0]
 800b74a:	e7f3      	b.n	800b734 <HAL_TIM_Base_Start_IT+0x88>
 800b74c:	40010000 	.word	0x40010000
 800b750:	40000400 	.word	0x40000400
 800b754:	40000800 	.word	0x40000800
 800b758:	40010400 	.word	0x40010400
 800b75c:	40001800 	.word	0x40001800
 800b760:	00010007 	.word	0x00010007

0800b764 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800b764:	2800      	cmp	r0, #0
 800b766:	f000 80cc 	beq.w	800b902 <HAL_TIM_Encoder_Init+0x19e>
{
 800b76a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800b76c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b770:	4604      	mov	r4, r0
 800b772:	460d      	mov	r5, r1
 800b774:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f000 809b 	beq.w	800b8b4 <HAL_TIM_Encoder_Init+0x150>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b77e:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800b780:	2102      	movs	r1, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b782:	4a61      	ldr	r2, [pc, #388]	; (800b908 <HAL_TIM_Encoder_Init+0x1a4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800b784:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b78c:	6899      	ldr	r1, [r3, #8]
 800b78e:	ea02 0201 	and.w	r2, r2, r1
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b792:	495e      	ldr	r1, [pc, #376]	; (800b90c <HAL_TIM_Encoder_Init+0x1a8>)
 800b794:	eba3 0101 	sub.w	r1, r3, r1
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b798:	609a      	str	r2, [r3, #8]
  tmpcr1 = TIMx->CR1;
 800b79a:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b79c:	fab1 f181 	clz	r1, r1
 800b7a0:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800b7a4:	d02b      	beq.n	800b7fe <HAL_TIM_Encoder_Init+0x9a>
 800b7a6:	bb51      	cbnz	r1, 800b7fe <HAL_TIM_Encoder_Init+0x9a>
 800b7a8:	4859      	ldr	r0, [pc, #356]	; (800b910 <HAL_TIM_Encoder_Init+0x1ac>)
 800b7aa:	4283      	cmp	r3, r0
 800b7ac:	f000 8087 	beq.w	800b8be <HAL_TIM_Encoder_Init+0x15a>
 800b7b0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800b7b4:	4283      	cmp	r3, r0
 800b7b6:	f000 8082 	beq.w	800b8be <HAL_TIM_Encoder_Init+0x15a>
 800b7ba:	4e56      	ldr	r6, [pc, #344]	; (800b914 <HAL_TIM_Encoder_Init+0x1b0>)
 800b7bc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800b7c0:	1b9e      	subs	r6, r3, r6
 800b7c2:	4283      	cmp	r3, r0
 800b7c4:	fab6 f686 	clz	r6, r6
 800b7c8:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800b7cc:	f000 8081 	beq.w	800b8d2 <HAL_TIM_Encoder_Init+0x16e>
 800b7d0:	2e00      	cmp	r6, #0
 800b7d2:	d17e      	bne.n	800b8d2 <HAL_TIM_Encoder_Init+0x16e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7d4:	4850      	ldr	r0, [pc, #320]	; (800b918 <HAL_TIM_Encoder_Init+0x1b4>)
 800b7d6:	4951      	ldr	r1, [pc, #324]	; (800b91c <HAL_TIM_Encoder_Init+0x1b8>)
 800b7d8:	428b      	cmp	r3, r1
 800b7da:	bf18      	it	ne
 800b7dc:	4283      	cmpne	r3, r0
 800b7de:	f000 8082 	beq.w	800b8e6 <HAL_TIM_Encoder_Init+0x182>
 800b7e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b7e6:	428b      	cmp	r3, r1
 800b7e8:	d07d      	beq.n	800b8e6 <HAL_TIM_Encoder_Init+0x182>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b7ea:	69a1      	ldr	r1, [r4, #24]
 800b7ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b7f0:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b7f2:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800b7f4:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800b7f6:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b7f8:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b7fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7fc:	e023      	b.n	800b846 <HAL_TIM_Encoder_Init+0xe2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7fe:	4e45      	ldr	r6, [pc, #276]	; (800b914 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b800:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b804:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b806:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800b808:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b80a:	fab6 f686 	clz	r6, r6
 800b80e:	0976      	lsrs	r6, r6, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b810:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b812:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b816:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b818:	69a0      	ldr	r0, [r4, #24]
 800b81a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b81e:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800b820:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b822:	68e2      	ldr	r2, [r4, #12]
 800b824:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b826:	6862      	ldr	r2, [r4, #4]
 800b828:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b82a:	b951      	cbnz	r1, 800b842 <HAL_TIM_Encoder_Init+0xde>
 800b82c:	b94e      	cbnz	r6, 800b842 <HAL_TIM_Encoder_Init+0xde>
 800b82e:	493a      	ldr	r1, [pc, #232]	; (800b918 <HAL_TIM_Encoder_Init+0x1b4>)
 800b830:	4a3a      	ldr	r2, [pc, #232]	; (800b91c <HAL_TIM_Encoder_Init+0x1b8>)
 800b832:	4293      	cmp	r3, r2
 800b834:	bf18      	it	ne
 800b836:	428b      	cmpne	r3, r1
 800b838:	d003      	beq.n	800b842 <HAL_TIM_Encoder_Init+0xde>
 800b83a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b83e:	4293      	cmp	r3, r2
 800b840:	d101      	bne.n	800b846 <HAL_TIM_Encoder_Init+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 800b842:	6962      	ldr	r2, [r4, #20]
 800b844:	631a      	str	r2, [r3, #48]	; 0x30
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b846:	692a      	ldr	r2, [r5, #16]
  TIMx->EGR = TIM_EGR_UG;
 800b848:	2601      	movs	r6, #1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b84a:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b84c:	ea4f 1e02 	mov.w	lr, r2, lsl #4
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b850:	69aa      	ldr	r2, [r5, #24]
  TIMx->EGR = TIM_EGR_UG;
 800b852:	615e      	str	r6, [r3, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b854:	ea41 2c02 	orr.w	ip, r1, r2, lsl #8
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b858:	69e9      	ldr	r1, [r5, #28]
  tmpsmcr = htim->Instance->SMCR;
 800b85a:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b85c:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
  tmpccmr1 = htim->Instance->CCMR1;
 800b860:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b862:	492f      	ldr	r1, [pc, #188]	; (800b920 <HAL_TIM_Encoder_Init+0x1bc>)
 800b864:	4039      	ands	r1, r7
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b866:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b868:	ea4c 0c01 	orr.w	ip, ip, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b86c:	68e9      	ldr	r1, [r5, #12]
 800b86e:	430a      	orrs	r2, r1
  tmpccer = htim->Instance->CCER;
 800b870:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b872:	f021 0eaa 	bic.w	lr, r1, #170	; 0xaa
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b876:	6a29      	ldr	r1, [r5, #32]
 800b878:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b87c:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 800b87e:	682d      	ldr	r5, [r5, #0]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b880:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 800b884:	4328      	orrs	r0, r5
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b886:	ea41 010e 	orr.w	r1, r1, lr
  htim->Instance->SMCR = tmpsmcr;
 800b88a:	6098      	str	r0, [r3, #8]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b88c:	4825      	ldr	r0, [pc, #148]	; (800b924 <HAL_TIM_Encoder_Init+0x1c0>)
 800b88e:	ea0c 0000 	and.w	r0, ip, r0
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b892:	4302      	orrs	r2, r0
  return HAL_OK;
 800b894:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 800b896:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800b898:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b89a:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b89e:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b8a2:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b8a6:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b8aa:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800b8ae:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 800b8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800b8b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800b8b8:	f7f9 fd82 	bl	80053c0 <HAL_TIM_Encoder_MspInit>
 800b8bc:	e75f      	b.n	800b77e <HAL_TIM_Encoder_Init+0x1a>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8be:	4e15      	ldr	r6, [pc, #84]	; (800b914 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b8c4:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8c6:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800b8c8:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8ca:	fab6 f686 	clz	r6, r6
 800b8ce:	0976      	lsrs	r6, r6, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8d0:	e79e      	b.n	800b810 <HAL_TIM_Encoder_Init+0xac>
    tmpcr1 |= Structure->CounterMode;
 800b8d2:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b8d8:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8da:	4813      	ldr	r0, [pc, #76]	; (800b928 <HAL_TIM_Encoder_Init+0x1c4>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8dc:	4283      	cmp	r3, r0
 800b8de:	d097      	beq.n	800b810 <HAL_TIM_Encoder_Init+0xac>
 800b8e0:	2e00      	cmp	r6, #0
 800b8e2:	d195      	bne.n	800b810 <HAL_TIM_Encoder_Init+0xac>
 800b8e4:	e776      	b.n	800b7d4 <HAL_TIM_Encoder_Init+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8e6:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8ec:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8ee:	69a1      	ldr	r1, [r4, #24]
 800b8f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8f4:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8f6:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800b8f8:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800b8fa:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8fc:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b8fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b900:	e795      	b.n	800b82e <HAL_TIM_Encoder_Init+0xca>
    return HAL_ERROR;
 800b902:	2001      	movs	r0, #1
}
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	fffebff8 	.word	0xfffebff8
 800b90c:	40010000 	.word	0x40010000
 800b910:	40000400 	.word	0x40000400
 800b914:	40010400 	.word	0x40010400
 800b918:	40014000 	.word	0x40014000
 800b91c:	40014400 	.word	0x40014400
 800b920:	fffffcfc 	.word	0xfffffcfc
 800b924:	ffff0303 	.word	0xffff0303
 800b928:	40000c00 	.word	0x40000c00

0800b92c <HAL_TIM_Encoder_Start>:
{
 800b92c:	b500      	push	{lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b92e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b932:	f890 c03f 	ldrb.w	ip, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b936:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b93a:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b93c:	f890 e045 	ldrb.w	lr, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b940:	b2d2      	uxtb	r2, r2
  if (Channel == TIM_CHANNEL_1)
 800b942:	b9c1      	cbnz	r1, 800b976 <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b944:	2b01      	cmp	r3, #1
 800b946:	d123      	bne.n	800b990 <HAL_TIM_Encoder_Start+0x64>
 800b948:	2a01      	cmp	r2, #1
 800b94a:	d121      	bne.n	800b990 <HAL_TIM_Encoder_Start+0x64>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b94c:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b94e:	2302      	movs	r3, #2
 800b950:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b954:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b958:	6a13      	ldr	r3, [r2, #32]
 800b95a:	f023 0301 	bic.w	r3, r3, #1
 800b95e:	6213      	str	r3, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b960:	6a13      	ldr	r3, [r2, #32]
 800b962:	f043 0301 	orr.w	r3, r3, #1
 800b966:	6213      	str	r3, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 800b968:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800b96a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800b96c:	f043 0301 	orr.w	r3, r3, #1
 800b970:	6013      	str	r3, [r2, #0]
}
 800b972:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (Channel == TIM_CHANNEL_2)
 800b976:	2904      	cmp	r1, #4
 800b978:	fa5f fc8c 	uxtb.w	ip, ip
 800b97c:	fa5f fe8e 	uxtb.w	lr, lr
 800b980:	d027      	beq.n	800b9d2 <HAL_TIM_Encoder_Start+0xa6>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b982:	2b01      	cmp	r3, #1
 800b984:	d104      	bne.n	800b990 <HAL_TIM_Encoder_Start+0x64>
 800b986:	f1bc 0f01 	cmp.w	ip, #1
 800b98a:	d101      	bne.n	800b990 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b98c:	2a01      	cmp	r2, #1
 800b98e:	d002      	beq.n	800b996 <HAL_TIM_Encoder_Start+0x6a>
      return HAL_ERROR;
 800b990:	2001      	movs	r0, #1
}
 800b992:	f85d fb04 	ldr.w	pc, [sp], #4
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b996:	f1be 0f01 	cmp.w	lr, #1
 800b99a:	d1f9      	bne.n	800b990 <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b99c:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b99e:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9a0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9a4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9a8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9ac:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800b9b0:	6a13      	ldr	r3, [r2, #32]
 800b9b2:	f023 0301 	bic.w	r3, r3, #1
 800b9b6:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b9b8:	6a13      	ldr	r3, [r2, #32]
 800b9ba:	f043 0301 	orr.w	r3, r3, #1
 800b9be:	6213      	str	r3, [r2, #32]
  TIMx->CCER &= ~tmp;
 800b9c0:	6a13      	ldr	r3, [r2, #32]
 800b9c2:	f023 0310 	bic.w	r3, r3, #16
 800b9c6:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b9c8:	6a13      	ldr	r3, [r2, #32]
 800b9ca:	f043 0310 	orr.w	r3, r3, #16
 800b9ce:	6213      	str	r3, [r2, #32]
}
 800b9d0:	e7ca      	b.n	800b968 <HAL_TIM_Encoder_Start+0x3c>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9d2:	f1bc 0f01 	cmp.w	ip, #1
 800b9d6:	d1db      	bne.n	800b990 <HAL_TIM_Encoder_Start+0x64>
 800b9d8:	f1be 0f01 	cmp.w	lr, #1
 800b9dc:	d1d8      	bne.n	800b990 <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9de:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b9e0:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9e2:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9e6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800b9ea:	e7e9      	b.n	800b9c0 <HAL_TIM_Encoder_Start+0x94>

0800b9ec <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800b9ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	f000 8081 	beq.w	800baf8 <HAL_TIM_ConfigClockSource+0x10c>
 800b9f6:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800b9f8:	2302      	movs	r3, #2
{
 800b9fa:	b470      	push	{r4, r5, r6}
  tmpsmcr = htim->Instance->SMCR;
 800b9fc:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 800b9fe:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800ba00:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800ba04:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba08:	4b5a      	ldr	r3, [pc, #360]	; (800bb74 <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 800ba0a:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba0c:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800ba0e:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800ba10:	680b      	ldr	r3, [r1, #0]
 800ba12:	2b70      	cmp	r3, #112	; 0x70
 800ba14:	f000 809c 	beq.w	800bb50 <HAL_TIM_ConfigClockSource+0x164>
 800ba18:	d825      	bhi.n	800ba66 <HAL_TIM_ConfigClockSource+0x7a>
 800ba1a:	2b50      	cmp	r3, #80	; 0x50
 800ba1c:	d06e      	beq.n	800bafc <HAL_TIM_ConfigClockSource+0x110>
 800ba1e:	d939      	bls.n	800ba94 <HAL_TIM_ConfigClockSource+0xa8>
 800ba20:	2b60      	cmp	r3, #96	; 0x60
 800ba22:	d118      	bne.n	800ba56 <HAL_TIM_ConfigClockSource+0x6a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba24:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba26:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba28:	f020 0010 	bic.w	r0, r0, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba2c:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba2e:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800ba30:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800ba32:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba38:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer = TIMx->CCER;
 800ba3c:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba3e:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 800ba42:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba44:	4b4c      	ldr	r3, [pc, #304]	; (800bb78 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba46:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCER = tmpccer;
 800ba4a:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800ba4c:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba4e:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba50:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800ba54:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800ba56:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800ba58:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800ba5a:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ba5e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800ba62:	bc70      	pop	{r4, r5, r6}
 800ba64:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800ba66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba6a:	d060      	beq.n	800bb2e <HAL_TIM_ConfigClockSource+0x142>
 800ba6c:	d933      	bls.n	800bad6 <HAL_TIM_ConfigClockSource+0xea>
 800ba6e:	4943      	ldr	r1, [pc, #268]	; (800bb7c <HAL_TIM_ConfigClockSource+0x190>)
 800ba70:	428b      	cmp	r3, r1
 800ba72:	d006      	beq.n	800ba82 <HAL_TIM_ConfigClockSource+0x96>
 800ba74:	d929      	bls.n	800baca <HAL_TIM_ConfigClockSource+0xde>
 800ba76:	4942      	ldr	r1, [pc, #264]	; (800bb80 <HAL_TIM_ConfigClockSource+0x194>)
 800ba78:	428b      	cmp	r3, r1
 800ba7a:	d002      	beq.n	800ba82 <HAL_TIM_ConfigClockSource+0x96>
 800ba7c:	3110      	adds	r1, #16
 800ba7e:	428b      	cmp	r3, r1
 800ba80:	d1e9      	bne.n	800ba56 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 800ba82:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba84:	493c      	ldr	r1, [pc, #240]	; (800bb78 <HAL_TIM_ConfigClockSource+0x18c>)
 800ba86:	4001      	ands	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800ba88:	2000      	movs	r0, #0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba8a:	430b      	orrs	r3, r1
 800ba8c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800ba90:	60a3      	str	r3, [r4, #8]
}
 800ba92:	e7e0      	b.n	800ba56 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800ba94:	2b40      	cmp	r3, #64	; 0x40
 800ba96:	d123      	bne.n	800bae0 <HAL_TIM_ConfigClockSource+0xf4>
  tmpccer = TIMx->CCER;
 800ba98:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba9a:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba9c:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba9e:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800baa2:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800baa6:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800baa8:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800baaa:	4b33      	ldr	r3, [pc, #204]	; (800bb78 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800baac:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800baae:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bab0:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bab4:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800bab8:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800baba:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800babc:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800babe:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800bac0:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bac2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800bac6:	60a3      	str	r3, [r4, #8]
}
 800bac8:	e7c5      	b.n	800ba56 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800baca:	f023 0110 	bic.w	r1, r3, #16
 800bace:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800bad2:	d1c0      	bne.n	800ba56 <HAL_TIM_ConfigClockSource+0x6a>
 800bad4:	e7d5      	b.n	800ba82 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 800bad6:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 800bada:	bf18      	it	ne
 800badc:	2001      	movne	r0, #1
 800bade:	e7ba      	b.n	800ba56 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800bae0:	d8b9      	bhi.n	800ba56 <HAL_TIM_ConfigClockSource+0x6a>
 800bae2:	2b20      	cmp	r3, #32
 800bae4:	d0cd      	beq.n	800ba82 <HAL_TIM_ConfigClockSource+0x96>
 800bae6:	d903      	bls.n	800baf0 <HAL_TIM_ConfigClockSource+0x104>
 800bae8:	2b30      	cmp	r3, #48	; 0x30
 800baea:	d0ca      	beq.n	800ba82 <HAL_TIM_ConfigClockSource+0x96>
 800baec:	2001      	movs	r0, #1
 800baee:	e7b2      	b.n	800ba56 <HAL_TIM_ConfigClockSource+0x6a>
 800baf0:	f033 0110 	bics.w	r1, r3, #16
 800baf4:	d1af      	bne.n	800ba56 <HAL_TIM_ConfigClockSource+0x6a>
 800baf6:	e7c4      	b.n	800ba82 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 800baf8:	2002      	movs	r0, #2
}
 800bafa:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800bafc:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bafe:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb00:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb02:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb06:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb0a:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800bb0c:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb0e:	4b1a      	ldr	r3, [pc, #104]	; (800bb78 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb10:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb12:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb14:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb18:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800bb1c:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800bb1e:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800bb20:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800bb22:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb24:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb26:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800bb2a:	60a3      	str	r3, [r4, #8]
}
 800bb2c:	e793      	b.n	800ba56 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb2e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800bb32:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb34:	432b      	orrs	r3, r5
 800bb36:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb38:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800bb3c:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb3e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800bb42:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800bb44:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb46:	68a3      	ldr	r3, [r4, #8]
 800bb48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb4c:	60a3      	str	r3, [r4, #8]
      break;
 800bb4e:	e782      	b.n	800ba56 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb50:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800bb54:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb56:	432b      	orrs	r3, r5
 800bb58:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb5a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800bb5e:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb60:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800bb64:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800bb66:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800bb68:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bb6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800bb6e:	60a3      	str	r3, [r4, #8]
      break;
 800bb70:	e771      	b.n	800ba56 <HAL_TIM_ConfigClockSource+0x6a>
 800bb72:	bf00      	nop
 800bb74:	ffce0088 	.word	0xffce0088
 800bb78:	ffcfff8f 	.word	0xffcfff8f
 800bb7c:	00100020 	.word	0x00100020
 800bb80:	00100030 	.word	0x00100030

0800bb84 <HAL_TIM_OC_DelayElapsedCallback>:
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop

0800bb88 <HAL_TIM_IC_CaptureCallback>:
 800bb88:	4770      	bx	lr
 800bb8a:	bf00      	nop

0800bb8c <HAL_TIM_PWM_PulseFinishedCallback>:
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop

0800bb90 <HAL_TIM_TriggerCallback>:
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop

0800bb94 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bb94:	6803      	ldr	r3, [r0, #0]
 800bb96:	691a      	ldr	r2, [r3, #16]
 800bb98:	0791      	lsls	r1, r2, #30
{
 800bb9a:	b510      	push	{r4, lr}
 800bb9c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bb9e:	d502      	bpl.n	800bba6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bba0:	68da      	ldr	r2, [r3, #12]
 800bba2:	0792      	lsls	r2, r2, #30
 800bba4:	d468      	bmi.n	800bc78 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bba6:	691a      	ldr	r2, [r3, #16]
 800bba8:	0752      	lsls	r2, r2, #29
 800bbaa:	d502      	bpl.n	800bbb2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bbac:	68da      	ldr	r2, [r3, #12]
 800bbae:	0750      	lsls	r0, r2, #29
 800bbb0:	d44f      	bmi.n	800bc52 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bbb2:	691a      	ldr	r2, [r3, #16]
 800bbb4:	0711      	lsls	r1, r2, #28
 800bbb6:	d502      	bpl.n	800bbbe <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bbb8:	68da      	ldr	r2, [r3, #12]
 800bbba:	0712      	lsls	r2, r2, #28
 800bbbc:	d437      	bmi.n	800bc2e <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bbbe:	691a      	ldr	r2, [r3, #16]
 800bbc0:	06d0      	lsls	r0, r2, #27
 800bbc2:	d502      	bpl.n	800bbca <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bbc4:	68da      	ldr	r2, [r3, #12]
 800bbc6:	06d1      	lsls	r1, r2, #27
 800bbc8:	d41e      	bmi.n	800bc08 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bbca:	691a      	ldr	r2, [r3, #16]
 800bbcc:	07d2      	lsls	r2, r2, #31
 800bbce:	d502      	bpl.n	800bbd6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bbd0:	68da      	ldr	r2, [r3, #12]
 800bbd2:	07d0      	lsls	r0, r2, #31
 800bbd4:	d469      	bmi.n	800bcaa <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bbd6:	691a      	ldr	r2, [r3, #16]
 800bbd8:	0611      	lsls	r1, r2, #24
 800bbda:	d502      	bpl.n	800bbe2 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbdc:	68da      	ldr	r2, [r3, #12]
 800bbde:	0612      	lsls	r2, r2, #24
 800bbe0:	d46b      	bmi.n	800bcba <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bbe2:	691a      	ldr	r2, [r3, #16]
 800bbe4:	05d0      	lsls	r0, r2, #23
 800bbe6:	d502      	bpl.n	800bbee <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbe8:	68da      	ldr	r2, [r3, #12]
 800bbea:	0611      	lsls	r1, r2, #24
 800bbec:	d46d      	bmi.n	800bcca <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bbee:	691a      	ldr	r2, [r3, #16]
 800bbf0:	0652      	lsls	r2, r2, #25
 800bbf2:	d502      	bpl.n	800bbfa <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bbf4:	68da      	ldr	r2, [r3, #12]
 800bbf6:	0650      	lsls	r0, r2, #25
 800bbf8:	d46f      	bmi.n	800bcda <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bbfa:	691a      	ldr	r2, [r3, #16]
 800bbfc:	0691      	lsls	r1, r2, #26
 800bbfe:	d502      	bpl.n	800bc06 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc00:	68da      	ldr	r2, [r3, #12]
 800bc02:	0692      	lsls	r2, r2, #26
 800bc04:	d449      	bmi.n	800bc9a <HAL_TIM_IRQHandler+0x106>
}
 800bc06:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bc08:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc0c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800bc0e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bc10:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc12:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc14:	69db      	ldr	r3, [r3, #28]
 800bc16:	f413 7f40 	tst.w	r3, #768	; 0x300
 800bc1a:	d16f      	bne.n	800bcfc <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc1c:	f7ff ffb2 	bl	800bb84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc20:	4620      	mov	r0, r4
 800bc22:	f7ff ffb3 	bl	800bb8c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc26:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc28:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc2a:	7722      	strb	r2, [r4, #28]
 800bc2c:	e7cd      	b.n	800bbca <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bc2e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc32:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800bc34:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bc36:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc38:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bc3a:	69db      	ldr	r3, [r3, #28]
 800bc3c:	079b      	lsls	r3, r3, #30
 800bc3e:	d15a      	bne.n	800bcf6 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc40:	f7ff ffa0 	bl	800bb84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc44:	4620      	mov	r0, r4
 800bc46:	f7ff ffa1 	bl	800bb8c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc4a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bc4c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc4e:	7722      	strb	r2, [r4, #28]
 800bc50:	e7b5      	b.n	800bbbe <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bc52:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc56:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800bc58:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bc5a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc5c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bc5e:	699b      	ldr	r3, [r3, #24]
 800bc60:	f413 7f40 	tst.w	r3, #768	; 0x300
 800bc64:	d144      	bne.n	800bcf0 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc66:	f7ff ff8d 	bl	800bb84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	f7ff ff8e 	bl	800bb8c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc70:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bc72:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc74:	7722      	strb	r2, [r4, #28]
 800bc76:	e79c      	b.n	800bbb2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bc78:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc7c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bc7e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc80:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bc82:	699b      	ldr	r3, [r3, #24]
 800bc84:	0799      	lsls	r1, r3, #30
 800bc86:	d130      	bne.n	800bcea <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc88:	f7ff ff7c 	bl	800bb84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	f7ff ff7d 	bl	800bb8c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc92:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bc94:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc96:	7722      	strb	r2, [r4, #28]
 800bc98:	e785      	b.n	800bba6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc9a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800bc9e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bca0:	611a      	str	r2, [r3, #16]
}
 800bca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800bca6:	f000 b887 	b.w	800bdb8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bcaa:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800bcae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bcb0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800bcb2:	f7f4 fcfd 	bl	80006b0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bcb6:	6823      	ldr	r3, [r4, #0]
 800bcb8:	e78d      	b.n	800bbd6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bcba:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800bcbe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bcc0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800bcc2:	f000 f87b 	bl	800bdbc <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bcc6:	6823      	ldr	r3, [r4, #0]
 800bcc8:	e78b      	b.n	800bbe2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bcca:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800bcce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bcd0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800bcd2:	f000 f875 	bl	800bdc0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bcd6:	6823      	ldr	r3, [r4, #0]
 800bcd8:	e789      	b.n	800bbee <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bcda:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800bcde:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bce0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800bce2:	f7ff ff55 	bl	800bb90 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bce6:	6823      	ldr	r3, [r4, #0]
 800bce8:	e787      	b.n	800bbfa <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800bcea:	f7ff ff4d 	bl	800bb88 <HAL_TIM_IC_CaptureCallback>
 800bcee:	e7d0      	b.n	800bc92 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800bcf0:	f7ff ff4a 	bl	800bb88 <HAL_TIM_IC_CaptureCallback>
 800bcf4:	e7bc      	b.n	800bc70 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800bcf6:	f7ff ff47 	bl	800bb88 <HAL_TIM_IC_CaptureCallback>
 800bcfa:	e7a6      	b.n	800bc4a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800bcfc:	f7ff ff44 	bl	800bb88 <HAL_TIM_IC_CaptureCallback>
 800bd00:	e791      	b.n	800bc26 <HAL_TIM_IRQHandler+0x92>
 800bd02:	bf00      	nop

0800bd04 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d04b      	beq.n	800bda4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd0c:	6803      	ldr	r3, [r0, #0]
 800bd0e:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800bd10:	2002      	movs	r0, #2
{
 800bd12:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bd14:	4d24      	ldr	r5, [pc, #144]	; (800bda8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800bd16:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bd1a:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800bd1c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800bd1e:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bd20:	d029      	beq.n	800bd76 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800bd22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bd26:	42ab      	cmp	r3, r5
 800bd28:	d025      	beq.n	800bd76 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd2a:	4d20      	ldr	r5, [pc, #128]	; (800bdac <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd2c:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd30:	42ab      	cmp	r3, r5
 800bd32:	bf18      	it	ne
 800bd34:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800bd38:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bd3c:	bf0c      	ite	eq
 800bd3e:	f04f 0c01 	moveq.w	ip, #1
 800bd42:	f04f 0c00 	movne.w	ip, #0
 800bd46:	42ab      	cmp	r3, r5
 800bd48:	bf08      	it	eq
 800bd4a:	f04c 0c01 	orreq.w	ip, ip, #1
 800bd4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bd52:	42ab      	cmp	r3, r5
 800bd54:	bf08      	it	eq
 800bd56:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd5a:	680d      	ldr	r5, [r1, #0]
 800bd5c:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd5e:	4d14      	ldr	r5, [pc, #80]	; (800bdb0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 800bd60:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd62:	42ab      	cmp	r3, r5
 800bd64:	bf14      	ite	ne
 800bd66:	4660      	movne	r0, ip
 800bd68:	f04c 0001 	orreq.w	r0, ip, #1
 800bd6c:	b960      	cbnz	r0, 800bd88 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800bd6e:	4811      	ldr	r0, [pc, #68]	; (800bdb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800bd70:	4283      	cmp	r3, r0
 800bd72:	d009      	beq.n	800bd88 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800bd74:	e00d      	b.n	800bd92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bd76:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bd78:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bd7c:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd7e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd80:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd84:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800bd86:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd88:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd8a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd8e:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd90:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800bd92:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800bd94:	2101      	movs	r1, #1

  return HAL_OK;
 800bd96:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800bd98:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bd9c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800bda0:	bc30      	pop	{r4, r5}
 800bda2:	4770      	bx	lr
  __HAL_LOCK(htim);
 800bda4:	2002      	movs	r0, #2
}
 800bda6:	4770      	bx	lr
 800bda8:	40010000 	.word	0x40010000
 800bdac:	40000400 	.word	0x40000400
 800bdb0:	40001800 	.word	0x40001800
 800bdb4:	40014000 	.word	0x40014000

0800bdb8 <HAL_TIMEx_CommutCallback>:
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop

0800bdbc <HAL_TIMEx_BreakCallback>:
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop

0800bdc0 <HAL_TIMEx_Break2Callback>:
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop

0800bdc4 <HAL_UART_TxCpltCallback>:
 800bdc4:	4770      	bx	lr
 800bdc6:	bf00      	nop

0800bdc8 <HAL_UART_ErrorCallback>:
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop

0800bdcc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bdcc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bdce:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bdd6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bdda:	f7ff fff5 	bl	800bdc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdde:	bd08      	pop	{r3, pc}

0800bde0 <HAL_UARTEx_RxEventCallback>:
}
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop

0800bde4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bde4:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bde6:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bdea:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 800bdec:	ea12 0f0c 	tst.w	r2, ip
{
 800bdf0:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bdf2:	681d      	ldr	r5, [r3, #0]
{
 800bdf4:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bdf6:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 800bdf8:	f000 811c 	beq.w	800c034 <HAL_UART_IRQHandler+0x250>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bdfc:	4eae      	ldr	r6, [pc, #696]	; (800c0b8 <HAL_UART_IRQHandler+0x2d4>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bdfe:	48af      	ldr	r0, [pc, #700]	; (800c0bc <HAL_UART_IRQHandler+0x2d8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800be00:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800be04:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800be06:	ea5c 0600 	orrs.w	r6, ip, r0
 800be0a:	f040 8086 	bne.w	800bf1a <HAL_UART_IRQHandler+0x136>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be0e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800be10:	2801      	cmp	r0, #1
 800be12:	d022      	beq.n	800be5a <HAL_UART_IRQHandler+0x76>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800be14:	02d0      	lsls	r0, r2, #11
 800be16:	d502      	bpl.n	800be1e <HAL_UART_IRQHandler+0x3a>
 800be18:	024e      	lsls	r6, r1, #9
 800be1a:	f100 8134 	bmi.w	800c086 <HAL_UART_IRQHandler+0x2a2>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800be1e:	0610      	lsls	r0, r2, #24
 800be20:	d506      	bpl.n	800be30 <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800be22:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800be26:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800be2a:	4301      	orrs	r1, r0
 800be2c:	f040 8123 	bne.w	800c076 <HAL_UART_IRQHandler+0x292>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800be30:	0651      	lsls	r1, r2, #25
 800be32:	d564      	bpl.n	800befe <HAL_UART_IRQHandler+0x11a>
 800be34:	066e      	lsls	r6, r5, #25
 800be36:	d562      	bpl.n	800befe <HAL_UART_IRQHandler+0x11a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be38:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be40:	e843 2100 	strex	r1, r2, [r3]
 800be44:	2900      	cmp	r1, #0
 800be46:	d1f7      	bne.n	800be38 <HAL_UART_IRQHandler+0x54>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be48:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800be4a:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be4c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800be4e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 800be52:	6763      	str	r3, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 800be54:	f7ff ffb6 	bl	800bdc4 <HAL_UART_TxCpltCallback>
}
 800be58:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800be5a:	06d0      	lsls	r0, r2, #27
 800be5c:	d5da      	bpl.n	800be14 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800be5e:	06ee      	lsls	r6, r5, #27
 800be60:	d5d8      	bpl.n	800be14 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be62:	2210      	movs	r2, #16
 800be64:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be66:	689a      	ldr	r2, [r3, #8]
 800be68:	0655      	lsls	r5, r2, #25
 800be6a:	f140 8136 	bpl.w	800c0da <HAL_UART_IRQHandler+0x2f6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be6e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800be70:	6801      	ldr	r1, [r0, #0]
 800be72:	684a      	ldr	r2, [r1, #4]
 800be74:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800be76:	2a00      	cmp	r2, #0
 800be78:	d0ee      	beq.n	800be58 <HAL_UART_IRQHandler+0x74>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800be7a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800be7e:	4291      	cmp	r1, r2
 800be80:	d9ea      	bls.n	800be58 <HAL_UART_IRQHandler+0x74>
        huart->RxXferCount = nb_remaining_rx_data;
 800be82:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800be86:	69c2      	ldr	r2, [r0, #28]
 800be88:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800be8c:	d02f      	beq.n	800beee <HAL_UART_IRQHandler+0x10a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be96:	e843 2100 	strex	r1, r2, [r3]
 800be9a:	2900      	cmp	r1, #0
 800be9c:	d1f7      	bne.n	800be8e <HAL_UART_IRQHandler+0xaa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be9e:	f103 0208 	add.w	r2, r3, #8
 800bea2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bea6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beaa:	f103 0508 	add.w	r5, r3, #8
 800beae:	e845 2100 	strex	r1, r2, [r5]
 800beb2:	2900      	cmp	r1, #0
 800beb4:	d1f3      	bne.n	800be9e <HAL_UART_IRQHandler+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb6:	f103 0208 	add.w	r2, r3, #8
 800beba:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec2:	f103 0508 	add.w	r5, r3, #8
 800bec6:	e845 2100 	strex	r1, r2, [r5]
 800beca:	2900      	cmp	r1, #0
 800becc:	d1f3      	bne.n	800beb6 <HAL_UART_IRQHandler+0xd2>
          huart->RxState = HAL_UART_STATE_READY;
 800bece:	2220      	movs	r2, #32
 800bed0:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bed4:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed6:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800beda:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bede:	e843 2100 	strex	r1, r2, [r3]
 800bee2:	2900      	cmp	r1, #0
 800bee4:	d1f7      	bne.n	800bed6 <HAL_UART_IRQHandler+0xf2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bee6:	f7fb fdb1 	bl	8007a4c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800beea:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800beee:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800bef2:	4620      	mov	r0, r4
 800bef4:	1ac9      	subs	r1, r1, r3
 800bef6:	b289      	uxth	r1, r1
 800bef8:	f7ff ff72 	bl	800bde0 <HAL_UARTEx_RxEventCallback>
}
 800befc:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800befe:	0210      	lsls	r0, r2, #8
 800bf00:	d502      	bpl.n	800bf08 <HAL_UART_IRQHandler+0x124>
 800bf02:	0069      	lsls	r1, r5, #1
 800bf04:	f100 80e4 	bmi.w	800c0d0 <HAL_UART_IRQHandler+0x2ec>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bf08:	01d3      	lsls	r3, r2, #7
 800bf0a:	d5a5      	bpl.n	800be58 <HAL_UART_IRQHandler+0x74>
 800bf0c:	2d00      	cmp	r5, #0
 800bf0e:	daa3      	bge.n	800be58 <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bf10:	4620      	mov	r0, r4
}
 800bf12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bf16:	f000 bcf5 	b.w	800c904 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bf1a:	07d6      	lsls	r6, r2, #31
 800bf1c:	d509      	bpl.n	800bf32 <HAL_UART_IRQHandler+0x14e>
 800bf1e:	05ee      	lsls	r6, r5, #23
 800bf20:	d507      	bpl.n	800bf32 <HAL_UART_IRQHandler+0x14e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bf22:	2601      	movs	r6, #1
 800bf24:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf26:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800bf2a:	f046 0601 	orr.w	r6, r6, #1
 800bf2e:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf32:	0796      	lsls	r6, r2, #30
 800bf34:	f140 8090 	bpl.w	800c058 <HAL_UART_IRQHandler+0x274>
 800bf38:	07ce      	lsls	r6, r1, #31
 800bf3a:	d50a      	bpl.n	800bf52 <HAL_UART_IRQHandler+0x16e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bf3c:	2602      	movs	r6, #2
 800bf3e:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf40:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800bf44:	f046 0604 	orr.w	r6, r6, #4
 800bf48:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf4c:	0756      	lsls	r6, r2, #29
 800bf4e:	f100 8089 	bmi.w	800c064 <HAL_UART_IRQHandler+0x280>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bf52:	0716      	lsls	r6, r2, #28
 800bf54:	d50b      	bpl.n	800bf6e <HAL_UART_IRQHandler+0x18a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bf56:	f005 0620 	and.w	r6, r5, #32
 800bf5a:	4330      	orrs	r0, r6
 800bf5c:	d007      	beq.n	800bf6e <HAL_UART_IRQHandler+0x18a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf5e:	2008      	movs	r0, #8
 800bf60:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf62:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800bf66:	f040 0008 	orr.w	r0, r0, #8
 800bf6a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bf6e:	0516      	lsls	r6, r2, #20
 800bf70:	d50a      	bpl.n	800bf88 <HAL_UART_IRQHandler+0x1a4>
 800bf72:	0168      	lsls	r0, r5, #5
 800bf74:	d508      	bpl.n	800bf88 <HAL_UART_IRQHandler+0x1a4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf76:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bf7a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf7c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800bf80:	f040 0020 	orr.w	r0, r0, #32
 800bf84:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf88:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	f43f af63 	beq.w	800be58 <HAL_UART_IRQHandler+0x74>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf92:	0696      	lsls	r6, r2, #26
 800bf94:	d50b      	bpl.n	800bfae <HAL_UART_IRQHandler+0x1ca>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf96:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf9a:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800bf9e:	ea55 0201 	orrs.w	r2, r5, r1
 800bfa2:	d004      	beq.n	800bfae <HAL_UART_IRQHandler+0x1ca>
        if (huart->RxISR != NULL)
 800bfa4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800bfa6:	b112      	cbz	r2, 800bfae <HAL_UART_IRQHandler+0x1ca>
          huart->RxISR(huart);
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bfac:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800bfae:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bfb2:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bfb4:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bfb8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800bfbc:	4315      	orrs	r5, r2
 800bfbe:	f000 80c0 	beq.w	800c142 <HAL_UART_IRQHandler+0x35e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfca:	e843 2100 	strex	r1, r2, [r3]
 800bfce:	2900      	cmp	r1, #0
 800bfd0:	d1f7      	bne.n	800bfc2 <HAL_UART_IRQHandler+0x1de>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bfd2:	483b      	ldr	r0, [pc, #236]	; (800c0c0 <HAL_UART_IRQHandler+0x2dc>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd4:	f103 0208 	add.w	r2, r3, #8
 800bfd8:	e852 2f00 	ldrex	r2, [r2]
 800bfdc:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfde:	f103 0508 	add.w	r5, r3, #8
 800bfe2:	e845 2100 	strex	r1, r2, [r5]
 800bfe6:	2900      	cmp	r1, #0
 800bfe8:	d1f4      	bne.n	800bfd4 <HAL_UART_IRQHandler+0x1f0>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfea:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800bfec:	2a01      	cmp	r2, #1
 800bfee:	d052      	beq.n	800c096 <HAL_UART_IRQHandler+0x2b2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bff0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800bff2:	2120      	movs	r1, #32
 800bff4:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bff8:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bffa:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800bffc:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bffe:	064d      	lsls	r5, r1, #25
 800c000:	d562      	bpl.n	800c0c8 <HAL_UART_IRQHandler+0x2e4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c002:	f103 0208 	add.w	r2, r3, #8
 800c006:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c00a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00e:	f103 0008 	add.w	r0, r3, #8
 800c012:	e840 2100 	strex	r1, r2, [r0]
 800c016:	2900      	cmp	r1, #0
 800c018:	d1f3      	bne.n	800c002 <HAL_UART_IRQHandler+0x21e>
          if (huart->hdmarx != NULL)
 800c01a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d053      	beq.n	800c0c8 <HAL_UART_IRQHandler+0x2e4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c020:	4b28      	ldr	r3, [pc, #160]	; (800c0c4 <HAL_UART_IRQHandler+0x2e0>)
 800c022:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c024:	f7fb fe8a 	bl	8007d3c <HAL_DMA_Abort_IT>
 800c028:	2800      	cmp	r0, #0
 800c02a:	f43f af15 	beq.w	800be58 <HAL_UART_IRQHandler+0x74>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c02e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800c030:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c032:	e00e      	b.n	800c052 <HAL_UART_IRQHandler+0x26e>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c034:	0696      	lsls	r6, r2, #26
 800c036:	f57f aeea 	bpl.w	800be0e <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c03a:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c03e:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 800c042:	ea56 060c 	orrs.w	r6, r6, ip
 800c046:	f43f aee2 	beq.w	800be0e <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800c04a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f43f af03 	beq.w	800be58 <HAL_UART_IRQHandler+0x74>
}
 800c052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c056:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c058:	0756      	lsls	r6, r2, #29
 800c05a:	f57f af7a 	bpl.w	800bf52 <HAL_UART_IRQHandler+0x16e>
 800c05e:	07ce      	lsls	r6, r1, #31
 800c060:	f57f af77 	bpl.w	800bf52 <HAL_UART_IRQHandler+0x16e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c064:	2604      	movs	r6, #4
 800c066:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c068:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800c06c:	f046 0602 	orr.w	r6, r6, #2
 800c070:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800c074:	e76d      	b.n	800bf52 <HAL_UART_IRQHandler+0x16e>
    if (huart->TxISR != NULL)
 800c076:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f43f aeed 	beq.w	800be58 <HAL_UART_IRQHandler+0x74>
      huart->TxISR(huart);
 800c07e:	4620      	mov	r0, r4
}
 800c080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800c084:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c086:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800c08a:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c08c:	621a      	str	r2, [r3, #32]
}
 800c08e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800c092:	f000 bc35 	b.w	800c900 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c096:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c09a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c09e:	e843 2100 	strex	r1, r2, [r3]
 800c0a2:	2900      	cmp	r1, #0
 800c0a4:	d0a4      	beq.n	800bff0 <HAL_UART_IRQHandler+0x20c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a6:	e853 2f00 	ldrex	r2, [r3]
 800c0aa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ae:	e843 2100 	strex	r1, r2, [r3]
 800c0b2:	2900      	cmp	r1, #0
 800c0b4:	d1ef      	bne.n	800c096 <HAL_UART_IRQHandler+0x2b2>
 800c0b6:	e79b      	b.n	800bff0 <HAL_UART_IRQHandler+0x20c>
 800c0b8:	04000120 	.word	0x04000120
 800c0bc:	10000001 	.word	0x10000001
 800c0c0:	effffffe 	.word	0xeffffffe
 800c0c4:	0800bdcd 	.word	0x0800bdcd
            HAL_UART_ErrorCallback(huart);
 800c0c8:	4620      	mov	r0, r4
 800c0ca:	f7ff fe7d 	bl	800bdc8 <HAL_UART_ErrorCallback>
}
 800c0ce:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c0d0:	4620      	mov	r0, r4
}
 800c0d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c0d6:	f000 bc17 	b.w	800c908 <HAL_UARTEx_TxFifoEmptyCallback>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c0da:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 800c0de:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 800c0e2:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c0e6:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 800c0e8:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c0ea:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800c0ec:	2a00      	cmp	r2, #0
 800c0ee:	f43f aeb3 	beq.w	800be58 <HAL_UART_IRQHandler+0x74>
 800c0f2:	2900      	cmp	r1, #0
 800c0f4:	f43f aeb0 	beq.w	800be58 <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c100:	e843 2000 	strex	r0, r2, [r3]
 800c104:	2800      	cmp	r0, #0
 800c106:	d1f7      	bne.n	800c0f8 <HAL_UART_IRQHandler+0x314>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c108:	4d11      	ldr	r5, [pc, #68]	; (800c150 <HAL_UART_IRQHandler+0x36c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c10a:	f103 0208 	add.w	r2, r3, #8
 800c10e:	e852 2f00 	ldrex	r2, [r2]
 800c112:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c114:	f103 0608 	add.w	r6, r3, #8
 800c118:	e846 2000 	strex	r0, r2, [r6]
 800c11c:	2800      	cmp	r0, #0
 800c11e:	d1f4      	bne.n	800c10a <HAL_UART_IRQHandler+0x326>
        huart->RxState = HAL_UART_STATE_READY;
 800c120:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800c122:	6720      	str	r0, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800c124:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c128:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c12e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c132:	e843 2000 	strex	r0, r2, [r3]
 800c136:	2800      	cmp	r0, #0
 800c138:	d1f7      	bne.n	800c12a <HAL_UART_IRQHandler+0x346>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c13a:	4620      	mov	r0, r4
 800c13c:	f7ff fe50 	bl	800bde0 <HAL_UARTEx_RxEventCallback>
}
 800c140:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800c142:	4620      	mov	r0, r4
 800c144:	f7ff fe40 	bl	800bdc8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c148:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 800c14c:	bd70      	pop	{r4, r5, r6, pc}
 800c14e:	bf00      	nop
 800c150:	effffffe 	.word	0xeffffffe

0800c154 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c154:	6901      	ldr	r1, [r0, #16]
 800c156:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800c158:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c15a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c15c:	49c0      	ldr	r1, [pc, #768]	; (800c460 <UART_SetConfig+0x30c>)
{
 800c15e:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c160:	6945      	ldr	r5, [r0, #20]
{
 800c162:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c164:	69c0      	ldr	r0, [r0, #28]
{
 800c166:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c168:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c16a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c16c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c16e:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c170:	4dbc      	ldr	r5, [pc, #752]	; (800c464 <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c172:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c174:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c176:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c178:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800c180:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c184:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c186:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c188:	f000 80e0 	beq.w	800c34c <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
 800c18c:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c18e:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800c190:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c192:	4ab5      	ldr	r2, [pc, #724]	; (800c468 <UART_SetConfig+0x314>)
 800c194:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c196:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c198:	4311      	orrs	r1, r2
 800c19a:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c19e:	f022 020f 	bic.w	r2, r2, #15
 800c1a2:	432a      	orrs	r2, r5
 800c1a4:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c1a6:	4ab1      	ldr	r2, [pc, #708]	; (800c46c <UART_SetConfig+0x318>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d023      	beq.n	800c1f4 <UART_SetConfig+0xa0>
 800c1ac:	4ab0      	ldr	r2, [pc, #704]	; (800c470 <UART_SetConfig+0x31c>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d076      	beq.n	800c2a0 <UART_SetConfig+0x14c>
 800c1b2:	4ab0      	ldr	r2, [pc, #704]	; (800c474 <UART_SetConfig+0x320>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	f000 818f 	beq.w	800c4d8 <UART_SetConfig+0x384>
 800c1ba:	4aaf      	ldr	r2, [pc, #700]	; (800c478 <UART_SetConfig+0x324>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	f000 81e1 	beq.w	800c584 <UART_SetConfig+0x430>
 800c1c2:	4aae      	ldr	r2, [pc, #696]	; (800c47c <UART_SetConfig+0x328>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	f000 8121 	beq.w	800c40c <UART_SetConfig+0x2b8>
 800c1ca:	4aad      	ldr	r2, [pc, #692]	; (800c480 <UART_SetConfig+0x32c>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	f000 81e3 	beq.w	800c598 <UART_SetConfig+0x444>
 800c1d2:	4aac      	ldr	r2, [pc, #688]	; (800c484 <UART_SetConfig+0x330>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	f000 8234 	beq.w	800c642 <UART_SetConfig+0x4ee>
 800c1da:	4aab      	ldr	r2, [pc, #684]	; (800c488 <UART_SetConfig+0x334>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	f000 81e7 	beq.w	800c5b0 <UART_SetConfig+0x45c>
        ret = HAL_ERROR;
 800c1e2:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800c1e4:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800c1e6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800c1ea:	6723      	str	r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800c1ec:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800c1ee:	6763      	str	r3, [r4, #116]	; 0x74
}
 800c1f0:	b007      	add	sp, #28
 800c1f2:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c1f4:	4ba5      	ldr	r3, [pc, #660]	; (800c48c <UART_SetConfig+0x338>)
 800c1f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1fc:	2b28      	cmp	r3, #40	; 0x28
 800c1fe:	d8f0      	bhi.n	800c1e2 <UART_SetConfig+0x8e>
 800c200:	4aa3      	ldr	r2, [pc, #652]	; (800c490 <UART_SetConfig+0x33c>)
 800c202:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c204:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c208:	d055      	beq.n	800c2b6 <UART_SetConfig+0x162>
    switch (clocksource)
 800c20a:	2b20      	cmp	r3, #32
 800c20c:	f200 814a 	bhi.w	800c4a4 <UART_SetConfig+0x350>
 800c210:	2b20      	cmp	r3, #32
 800c212:	d8e6      	bhi.n	800c1e2 <UART_SetConfig+0x8e>
 800c214:	a201      	add	r2, pc, #4	; (adr r2, 800c21c <UART_SetConfig+0xc8>)
 800c216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c21a:	bf00      	nop
 800c21c:	0800c45b 	.word	0x0800c45b
 800c220:	0800c455 	.word	0x0800c455
 800c224:	0800c1e3 	.word	0x0800c1e3
 800c228:	0800c1e3 	.word	0x0800c1e3
 800c22c:	0800c445 	.word	0x0800c445
 800c230:	0800c1e3 	.word	0x0800c1e3
 800c234:	0800c1e3 	.word	0x0800c1e3
 800c238:	0800c1e3 	.word	0x0800c1e3
 800c23c:	0800c437 	.word	0x0800c437
 800c240:	0800c1e3 	.word	0x0800c1e3
 800c244:	0800c1e3 	.word	0x0800c1e3
 800c248:	0800c1e3 	.word	0x0800c1e3
 800c24c:	0800c1e3 	.word	0x0800c1e3
 800c250:	0800c1e3 	.word	0x0800c1e3
 800c254:	0800c1e3 	.word	0x0800c1e3
 800c258:	0800c1e3 	.word	0x0800c1e3
 800c25c:	0800c421 	.word	0x0800c421
 800c260:	0800c1e3 	.word	0x0800c1e3
 800c264:	0800c1e3 	.word	0x0800c1e3
 800c268:	0800c1e3 	.word	0x0800c1e3
 800c26c:	0800c1e3 	.word	0x0800c1e3
 800c270:	0800c1e3 	.word	0x0800c1e3
 800c274:	0800c1e3 	.word	0x0800c1e3
 800c278:	0800c1e3 	.word	0x0800c1e3
 800c27c:	0800c1e3 	.word	0x0800c1e3
 800c280:	0800c1e3 	.word	0x0800c1e3
 800c284:	0800c1e3 	.word	0x0800c1e3
 800c288:	0800c1e3 	.word	0x0800c1e3
 800c28c:	0800c1e3 	.word	0x0800c1e3
 800c290:	0800c1e3 	.word	0x0800c1e3
 800c294:	0800c1e3 	.word	0x0800c1e3
 800c298:	0800c1e3 	.word	0x0800c1e3
 800c29c:	0800c5c5 	.word	0x0800c5c5
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2a0:	4b7a      	ldr	r3, [pc, #488]	; (800c48c <UART_SetConfig+0x338>)
 800c2a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2a4:	f003 0307 	and.w	r3, r3, #7
 800c2a8:	2b05      	cmp	r3, #5
 800c2aa:	d89a      	bhi.n	800c1e2 <UART_SetConfig+0x8e>
 800c2ac:	4a79      	ldr	r2, [pc, #484]	; (800c494 <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c2ae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c2b2:	5cd3      	ldrb	r3, [r2, r3]
 800c2b4:	d1a9      	bne.n	800c20a <UART_SetConfig+0xb6>
    switch (clocksource)
 800c2b6:	2b20      	cmp	r3, #32
 800c2b8:	f200 8145 	bhi.w	800c546 <UART_SetConfig+0x3f2>
 800c2bc:	2b20      	cmp	r3, #32
 800c2be:	d890      	bhi.n	800c1e2 <UART_SetConfig+0x8e>
 800c2c0:	a201      	add	r2, pc, #4	; (adr r2, 800c2c8 <UART_SetConfig+0x174>)
 800c2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c6:	bf00      	nop
 800c2c8:	0800c62f 	.word	0x0800c62f
 800c2cc:	0800c629 	.word	0x0800c629
 800c2d0:	0800c1e3 	.word	0x0800c1e3
 800c2d4:	0800c1e3 	.word	0x0800c1e3
 800c2d8:	0800c635 	.word	0x0800c635
 800c2dc:	0800c1e3 	.word	0x0800c1e3
 800c2e0:	0800c1e3 	.word	0x0800c1e3
 800c2e4:	0800c1e3 	.word	0x0800c1e3
 800c2e8:	0800c617 	.word	0x0800c617
 800c2ec:	0800c1e3 	.word	0x0800c1e3
 800c2f0:	0800c1e3 	.word	0x0800c1e3
 800c2f4:	0800c1e3 	.word	0x0800c1e3
 800c2f8:	0800c1e3 	.word	0x0800c1e3
 800c2fc:	0800c1e3 	.word	0x0800c1e3
 800c300:	0800c1e3 	.word	0x0800c1e3
 800c304:	0800c1e3 	.word	0x0800c1e3
 800c308:	0800c603 	.word	0x0800c603
 800c30c:	0800c1e3 	.word	0x0800c1e3
 800c310:	0800c1e3 	.word	0x0800c1e3
 800c314:	0800c1e3 	.word	0x0800c1e3
 800c318:	0800c1e3 	.word	0x0800c1e3
 800c31c:	0800c1e3 	.word	0x0800c1e3
 800c320:	0800c1e3 	.word	0x0800c1e3
 800c324:	0800c1e3 	.word	0x0800c1e3
 800c328:	0800c1e3 	.word	0x0800c1e3
 800c32c:	0800c1e3 	.word	0x0800c1e3
 800c330:	0800c1e3 	.word	0x0800c1e3
 800c334:	0800c1e3 	.word	0x0800c1e3
 800c338:	0800c1e3 	.word	0x0800c1e3
 800c33c:	0800c1e3 	.word	0x0800c1e3
 800c340:	0800c1e3 	.word	0x0800c1e3
 800c344:	0800c1e3 	.word	0x0800c1e3
 800c348:	0800c63f 	.word	0x0800c63f
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c34c:	6898      	ldr	r0, [r3, #8]
 800c34e:	4a46      	ldr	r2, [pc, #280]	; (800c468 <UART_SetConfig+0x314>)
 800c350:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c352:	484e      	ldr	r0, [pc, #312]	; (800c48c <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c354:	430a      	orrs	r2, r1
 800c356:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c35a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c35c:	f022 020f 	bic.w	r2, r2, #15
 800c360:	430a      	orrs	r2, r1
 800c362:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c364:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800c366:	f003 0307 	and.w	r3, r3, #7
 800c36a:	2b05      	cmp	r3, #5
 800c36c:	f63f af39 	bhi.w	800c1e2 <UART_SetConfig+0x8e>
 800c370:	4a49      	ldr	r2, [pc, #292]	; (800c498 <UART_SetConfig+0x344>)
 800c372:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 800c374:	2b20      	cmp	r3, #32
 800c376:	f200 80b9 	bhi.w	800c4ec <UART_SetConfig+0x398>
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	f67f af31 	bls.w	800c1e2 <UART_SetConfig+0x8e>
 800c380:	3b02      	subs	r3, #2
 800c382:	2b1e      	cmp	r3, #30
 800c384:	f63f af2d 	bhi.w	800c1e2 <UART_SetConfig+0x8e>
 800c388:	a201      	add	r2, pc, #4	; (adr r2, 800c390 <UART_SetConfig+0x23c>)
 800c38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38e:	bf00      	nop
 800c390:	0800c5f9 	.word	0x0800c5f9
 800c394:	0800c1e3 	.word	0x0800c1e3
 800c398:	0800c5ef 	.word	0x0800c5ef
 800c39c:	0800c1e3 	.word	0x0800c1e3
 800c3a0:	0800c1e3 	.word	0x0800c1e3
 800c3a4:	0800c1e3 	.word	0x0800c1e3
 800c3a8:	0800c5dd 	.word	0x0800c5dd
 800c3ac:	0800c1e3 	.word	0x0800c1e3
 800c3b0:	0800c1e3 	.word	0x0800c1e3
 800c3b4:	0800c1e3 	.word	0x0800c1e3
 800c3b8:	0800c1e3 	.word	0x0800c1e3
 800c3bc:	0800c1e3 	.word	0x0800c1e3
 800c3c0:	0800c1e3 	.word	0x0800c1e3
 800c3c4:	0800c1e3 	.word	0x0800c1e3
 800c3c8:	0800c5c9 	.word	0x0800c5c9
 800c3cc:	0800c1e3 	.word	0x0800c1e3
 800c3d0:	0800c1e3 	.word	0x0800c1e3
 800c3d4:	0800c1e3 	.word	0x0800c1e3
 800c3d8:	0800c1e3 	.word	0x0800c1e3
 800c3dc:	0800c1e3 	.word	0x0800c1e3
 800c3e0:	0800c1e3 	.word	0x0800c1e3
 800c3e4:	0800c1e3 	.word	0x0800c1e3
 800c3e8:	0800c1e3 	.word	0x0800c1e3
 800c3ec:	0800c1e3 	.word	0x0800c1e3
 800c3f0:	0800c1e3 	.word	0x0800c1e3
 800c3f4:	0800c1e3 	.word	0x0800c1e3
 800c3f8:	0800c1e3 	.word	0x0800c1e3
 800c3fc:	0800c1e3 	.word	0x0800c1e3
 800c400:	0800c1e3 	.word	0x0800c1e3
 800c404:	0800c1e3 	.word	0x0800c1e3
 800c408:	0800c5ff 	.word	0x0800c5ff
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c40c:	4b1f      	ldr	r3, [pc, #124]	; (800c48c <UART_SetConfig+0x338>)
 800c40e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c410:	f003 0307 	and.w	r3, r3, #7
 800c414:	2b05      	cmp	r3, #5
 800c416:	f63f aee4 	bhi.w	800c1e2 <UART_SetConfig+0x8e>
 800c41a:	4a20      	ldr	r2, [pc, #128]	; (800c49c <UART_SetConfig+0x348>)
 800c41c:	5cd3      	ldrb	r3, [r2, r3]
 800c41e:	e6f1      	b.n	800c204 <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c420:	4b1a      	ldr	r3, [pc, #104]	; (800c48c <UART_SetConfig+0x338>)
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	0692      	lsls	r2, r2, #26
 800c426:	f140 80c1 	bpl.w	800c5ac <UART_SetConfig+0x458>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	481c      	ldr	r0, [pc, #112]	; (800c4a0 <UART_SetConfig+0x34c>)
 800c42e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c432:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c434:	e03b      	b.n	800c4ae <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c436:	a803      	add	r0, sp, #12
 800c438:	f7fe fd54 	bl	800aee4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c43c:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800c43e:	b938      	cbnz	r0, 800c450 <UART_SetConfig+0x2fc>
          pclk = (uint32_t) HSI_VALUE;
 800c440:	2000      	movs	r0, #0
 800c442:	e6cf      	b.n	800c1e4 <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c444:	4668      	mov	r0, sp
 800c446:	f7fe fca1 	bl	800ad8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c44a:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800c44c:	2800      	cmp	r0, #0
 800c44e:	d0f7      	beq.n	800c440 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c450:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c452:	e02c      	b.n	800c4ae <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c454:	f7fd fe04 	bl	800a060 <HAL_RCC_GetPCLK2Freq>
        break;
 800c458:	e7f1      	b.n	800c43e <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c45a:	f7fd fdb9 	bl	8009fd0 <HAL_RCC_GetPCLK1Freq>
        break;
 800c45e:	e7ee      	b.n	800c43e <UART_SetConfig+0x2ea>
 800c460:	cfff69f3 	.word	0xcfff69f3
 800c464:	58000c00 	.word	0x58000c00
 800c468:	11fff4ff 	.word	0x11fff4ff
 800c46c:	40011000 	.word	0x40011000
 800c470:	40004400 	.word	0x40004400
 800c474:	40004800 	.word	0x40004800
 800c478:	40004c00 	.word	0x40004c00
 800c47c:	40005000 	.word	0x40005000
 800c480:	40011400 	.word	0x40011400
 800c484:	40007800 	.word	0x40007800
 800c488:	40007c00 	.word	0x40007c00
 800c48c:	58024400 	.word	0x58024400
 800c490:	0801a1d0 	.word	0x0801a1d0
 800c494:	0801a1fc 	.word	0x0801a1fc
 800c498:	0801a204 	.word	0x0801a204
 800c49c:	0801a1fc 	.word	0x0801a1fc
 800c4a0:	03d09000 	.word	0x03d09000
    switch (clocksource)
 800c4a4:	2b40      	cmp	r3, #64	; 0x40
 800c4a6:	f47f ae9c 	bne.w	800c1e2 <UART_SetConfig+0x8e>
 800c4aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4ae:	4b6c      	ldr	r3, [pc, #432]	; (800c660 <UART_SetConfig+0x50c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4b0:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4b4:	6862      	ldr	r2, [r4, #4]
 800c4b6:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800c4ba:	fbb0 f3f3 	udiv	r3, r0, r3
 800c4be:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800c4c2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4c6:	f1a3 0210 	sub.w	r2, r3, #16
 800c4ca:	428a      	cmp	r2, r1
 800c4cc:	f63f ae89 	bhi.w	800c1e2 <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c4d0:	6822      	ldr	r2, [r4, #0]
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	60d3      	str	r3, [r2, #12]
 800c4d6:	e685      	b.n	800c1e4 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c4d8:	4b62      	ldr	r3, [pc, #392]	; (800c664 <UART_SetConfig+0x510>)
 800c4da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4dc:	f003 0307 	and.w	r3, r3, #7
 800c4e0:	2b05      	cmp	r3, #5
 800c4e2:	f63f ae7e 	bhi.w	800c1e2 <UART_SetConfig+0x8e>
 800c4e6:	4a60      	ldr	r2, [pc, #384]	; (800c668 <UART_SetConfig+0x514>)
 800c4e8:	5cd3      	ldrb	r3, [r2, r3]
 800c4ea:	e68b      	b.n	800c204 <UART_SetConfig+0xb0>
    switch (clocksource)
 800c4ec:	2b40      	cmp	r3, #64	; 0x40
 800c4ee:	f47f ae78 	bne.w	800c1e2 <UART_SetConfig+0x8e>
 800c4f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c4f6:	4b5a      	ldr	r3, [pc, #360]	; (800c660 <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c4f8:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c4fa:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c4fe:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c502:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c506:	4299      	cmp	r1, r3
 800c508:	f63f ae6b 	bhi.w	800c1e2 <UART_SetConfig+0x8e>
 800c50c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800c510:	f63f ae67 	bhi.w	800c1e2 <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c514:	2300      	movs	r3, #0
 800c516:	4619      	mov	r1, r3
 800c518:	f7f3 ff3a 	bl	8000390 <__aeabi_uldivmod>
 800c51c:	462a      	mov	r2, r5
 800c51e:	0209      	lsls	r1, r1, #8
 800c520:	0203      	lsls	r3, r0, #8
 800c522:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800c526:	0868      	lsrs	r0, r5, #1
 800c528:	1818      	adds	r0, r3, r0
 800c52a:	f04f 0300 	mov.w	r3, #0
 800c52e:	f141 0100 	adc.w	r1, r1, #0
 800c532:	f7f3 ff2d 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c536:	4a4d      	ldr	r2, [pc, #308]	; (800c66c <UART_SetConfig+0x518>)
 800c538:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c53c:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c53e:	4291      	cmp	r1, r2
 800c540:	f63f ae4f 	bhi.w	800c1e2 <UART_SetConfig+0x8e>
 800c544:	e7c4      	b.n	800c4d0 <UART_SetConfig+0x37c>
    switch (clocksource)
 800c546:	2b40      	cmp	r3, #64	; 0x40
 800c548:	f47f ae4b 	bne.w	800c1e2 <UART_SetConfig+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c54c:	4b44      	ldr	r3, [pc, #272]	; (800c660 <UART_SetConfig+0x50c>)
 800c54e:	6862      	ldr	r2, [r4, #4]
 800c550:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800c554:	0853      	lsrs	r3, r2, #1
 800c556:	fbb0 f0f1 	udiv	r0, r0, r1
 800c55a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c55e:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c562:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c566:	f1a0 0210 	sub.w	r2, r0, #16
 800c56a:	429a      	cmp	r2, r3
 800c56c:	f63f ae39 	bhi.w	800c1e2 <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c570:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c574:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800c578:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c57a:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 800c57c:	4303      	orrs	r3, r0
 800c57e:	2000      	movs	r0, #0
 800c580:	60d3      	str	r3, [r2, #12]
 800c582:	e62f      	b.n	800c1e4 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c584:	4b37      	ldr	r3, [pc, #220]	; (800c664 <UART_SetConfig+0x510>)
 800c586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c588:	f003 0307 	and.w	r3, r3, #7
 800c58c:	2b05      	cmp	r3, #5
 800c58e:	f63f ae28 	bhi.w	800c1e2 <UART_SetConfig+0x8e>
 800c592:	4a37      	ldr	r2, [pc, #220]	; (800c670 <UART_SetConfig+0x51c>)
 800c594:	5cd3      	ldrb	r3, [r2, r3]
 800c596:	e635      	b.n	800c204 <UART_SetConfig+0xb0>
 800c598:	4b32      	ldr	r3, [pc, #200]	; (800c664 <UART_SetConfig+0x510>)
 800c59a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c59c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c5a0:	2b28      	cmp	r3, #40	; 0x28
 800c5a2:	f63f ae1e 	bhi.w	800c1e2 <UART_SetConfig+0x8e>
 800c5a6:	4a33      	ldr	r2, [pc, #204]	; (800c674 <UART_SetConfig+0x520>)
 800c5a8:	5cd3      	ldrb	r3, [r2, r3]
 800c5aa:	e62b      	b.n	800c204 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800c5ac:	4832      	ldr	r0, [pc, #200]	; (800c678 <UART_SetConfig+0x524>)
 800c5ae:	e77e      	b.n	800c4ae <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c5b0:	4b2c      	ldr	r3, [pc, #176]	; (800c664 <UART_SetConfig+0x510>)
 800c5b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5b4:	f003 0307 	and.w	r3, r3, #7
 800c5b8:	2b05      	cmp	r3, #5
 800c5ba:	f63f ae12 	bhi.w	800c1e2 <UART_SetConfig+0x8e>
 800c5be:	4a2f      	ldr	r2, [pc, #188]	; (800c67c <UART_SetConfig+0x528>)
 800c5c0:	5cd3      	ldrb	r3, [r2, r3]
 800c5c2:	e61f      	b.n	800c204 <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
 800c5c4:	482e      	ldr	r0, [pc, #184]	; (800c680 <UART_SetConfig+0x52c>)
 800c5c6:	e772      	b.n	800c4ae <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5c8:	4b26      	ldr	r3, [pc, #152]	; (800c664 <UART_SetConfig+0x510>)
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	0690      	lsls	r0, r2, #26
 800c5ce:	d542      	bpl.n	800c656 <UART_SetConfig+0x502>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4829      	ldr	r0, [pc, #164]	; (800c678 <UART_SetConfig+0x524>)
 800c5d4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c5d8:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c5da:	e78c      	b.n	800c4f6 <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5dc:	a803      	add	r0, sp, #12
 800c5de:	f7fe fc81 	bl	800aee4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5e2:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	f43f af2b 	beq.w	800c440 <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c5ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c5ec:	e783      	b.n	800c4f6 <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5ee:	4668      	mov	r0, sp
 800c5f0:	f7fe fbcc 	bl	800ad8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c5f4:	9801      	ldr	r0, [sp, #4]
        break;
 800c5f6:	e7f5      	b.n	800c5e4 <UART_SetConfig+0x490>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c5f8:	f7fe fbb6 	bl	800ad68 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800c5fc:	e7f2      	b.n	800c5e4 <UART_SetConfig+0x490>
        pclk = (uint32_t) CSI_VALUE;
 800c5fe:	4820      	ldr	r0, [pc, #128]	; (800c680 <UART_SetConfig+0x52c>)
 800c600:	e779      	b.n	800c4f6 <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c602:	4b18      	ldr	r3, [pc, #96]	; (800c664 <UART_SetConfig+0x510>)
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	0691      	lsls	r1, r2, #26
 800c608:	d527      	bpl.n	800c65a <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	481a      	ldr	r0, [pc, #104]	; (800c678 <UART_SetConfig+0x524>)
 800c60e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c612:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c614:	e79a      	b.n	800c54c <UART_SetConfig+0x3f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c616:	a803      	add	r0, sp, #12
 800c618:	f7fe fc64 	bl	800aee4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c61c:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800c61e:	2800      	cmp	r0, #0
 800c620:	f43f af0e 	beq.w	800c440 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c624:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c626:	e791      	b.n	800c54c <UART_SetConfig+0x3f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c628:	f7fd fd1a 	bl	800a060 <HAL_RCC_GetPCLK2Freq>
        break;
 800c62c:	e7f7      	b.n	800c61e <UART_SetConfig+0x4ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c62e:	f7fd fccf 	bl	8009fd0 <HAL_RCC_GetPCLK1Freq>
        break;
 800c632:	e7f4      	b.n	800c61e <UART_SetConfig+0x4ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c634:	4668      	mov	r0, sp
 800c636:	f7fe fba9 	bl	800ad8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c63a:	9801      	ldr	r0, [sp, #4]
        break;
 800c63c:	e7ef      	b.n	800c61e <UART_SetConfig+0x4ca>
        pclk = (uint32_t) CSI_VALUE;
 800c63e:	4810      	ldr	r0, [pc, #64]	; (800c680 <UART_SetConfig+0x52c>)
 800c640:	e784      	b.n	800c54c <UART_SetConfig+0x3f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c642:	4b08      	ldr	r3, [pc, #32]	; (800c664 <UART_SetConfig+0x510>)
 800c644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c646:	f003 0307 	and.w	r3, r3, #7
 800c64a:	2b05      	cmp	r3, #5
 800c64c:	f63f adc9 	bhi.w	800c1e2 <UART_SetConfig+0x8e>
 800c650:	4a0c      	ldr	r2, [pc, #48]	; (800c684 <UART_SetConfig+0x530>)
 800c652:	5cd3      	ldrb	r3, [r2, r3]
 800c654:	e5d6      	b.n	800c204 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800c656:	4808      	ldr	r0, [pc, #32]	; (800c678 <UART_SetConfig+0x524>)
 800c658:	e74d      	b.n	800c4f6 <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
 800c65a:	4807      	ldr	r0, [pc, #28]	; (800c678 <UART_SetConfig+0x524>)
 800c65c:	e776      	b.n	800c54c <UART_SetConfig+0x3f8>
 800c65e:	bf00      	nop
 800c660:	0801a20c 	.word	0x0801a20c
 800c664:	58024400 	.word	0x58024400
 800c668:	0801a1fc 	.word	0x0801a1fc
 800c66c:	000ffcff 	.word	0x000ffcff
 800c670:	0801a1fc 	.word	0x0801a1fc
 800c674:	0801a1d0 	.word	0x0801a1d0
 800c678:	03d09000 	.word	0x03d09000
 800c67c:	0801a1fc 	.word	0x0801a1fc
 800c680:	003d0900 	.word	0x003d0900
 800c684:	0801a1fc 	.word	0x0801a1fc

0800c688 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c688:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c68a:	07da      	lsls	r2, r3, #31
{
 800c68c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c68e:	d506      	bpl.n	800c69e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c690:	6801      	ldr	r1, [r0, #0]
 800c692:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800c694:	684a      	ldr	r2, [r1, #4]
 800c696:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c69a:	4322      	orrs	r2, r4
 800c69c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c69e:	079c      	lsls	r4, r3, #30
 800c6a0:	d506      	bpl.n	800c6b0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c6a2:	6801      	ldr	r1, [r0, #0]
 800c6a4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800c6a6:	684a      	ldr	r2, [r1, #4]
 800c6a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c6ac:	4322      	orrs	r2, r4
 800c6ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c6b0:	0759      	lsls	r1, r3, #29
 800c6b2:	d506      	bpl.n	800c6c2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c6b4:	6801      	ldr	r1, [r0, #0]
 800c6b6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c6b8:	684a      	ldr	r2, [r1, #4]
 800c6ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c6be:	4322      	orrs	r2, r4
 800c6c0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c6c2:	071a      	lsls	r2, r3, #28
 800c6c4:	d506      	bpl.n	800c6d4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c6c6:	6801      	ldr	r1, [r0, #0]
 800c6c8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800c6ca:	684a      	ldr	r2, [r1, #4]
 800c6cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c6d0:	4322      	orrs	r2, r4
 800c6d2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c6d4:	06dc      	lsls	r4, r3, #27
 800c6d6:	d506      	bpl.n	800c6e6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c6d8:	6801      	ldr	r1, [r0, #0]
 800c6da:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800c6dc:	688a      	ldr	r2, [r1, #8]
 800c6de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c6e2:	4322      	orrs	r2, r4
 800c6e4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c6e6:	0699      	lsls	r1, r3, #26
 800c6e8:	d506      	bpl.n	800c6f8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c6ea:	6801      	ldr	r1, [r0, #0]
 800c6ec:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800c6ee:	688a      	ldr	r2, [r1, #8]
 800c6f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c6f4:	4322      	orrs	r2, r4
 800c6f6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c6f8:	065a      	lsls	r2, r3, #25
 800c6fa:	d50a      	bpl.n	800c712 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c6fc:	6801      	ldr	r1, [r0, #0]
 800c6fe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800c700:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c702:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c706:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c70a:	ea42 0204 	orr.w	r2, r2, r4
 800c70e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c710:	d00b      	beq.n	800c72a <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c712:	061b      	lsls	r3, r3, #24
 800c714:	d506      	bpl.n	800c724 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c716:	6802      	ldr	r2, [r0, #0]
 800c718:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800c71a:	6853      	ldr	r3, [r2, #4]
 800c71c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c720:	430b      	orrs	r3, r1
 800c722:	6053      	str	r3, [r2, #4]
}
 800c724:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c728:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c72a:	684a      	ldr	r2, [r1, #4]
 800c72c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800c72e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800c732:	4322      	orrs	r2, r4
 800c734:	604a      	str	r2, [r1, #4]
 800c736:	e7ec      	b.n	800c712 <UART_AdvFeatureConfig+0x8a>

0800c738 <UART_WaitOnFlagUntilTimeout>:
{
 800c738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c73c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c740:	4607      	mov	r7, r0
 800c742:	460e      	mov	r6, r1
 800c744:	4615      	mov	r5, r2
 800c746:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c748:	6804      	ldr	r4, [r0, #0]
 800c74a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800c74e:	d10a      	bne.n	800c766 <UART_WaitOnFlagUntilTimeout+0x2e>
 800c750:	69e3      	ldr	r3, [r4, #28]
 800c752:	ea36 0303 	bics.w	r3, r6, r3
 800c756:	bf0c      	ite	eq
 800c758:	2301      	moveq	r3, #1
 800c75a:	2300      	movne	r3, #0
 800c75c:	429d      	cmp	r5, r3
 800c75e:	d0f7      	beq.n	800c750 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 800c760:	2000      	movs	r0, #0
}
 800c762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c766:	69e3      	ldr	r3, [r4, #28]
 800c768:	ea36 0303 	bics.w	r3, r6, r3
 800c76c:	bf0c      	ite	eq
 800c76e:	2301      	moveq	r3, #1
 800c770:	2300      	movne	r3, #0
 800c772:	42ab      	cmp	r3, r5
 800c774:	d1f4      	bne.n	800c760 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c776:	f7f9 f8ab 	bl	80058d0 <HAL_GetTick>
 800c77a:	eba0 0009 	sub.w	r0, r0, r9
 800c77e:	4540      	cmp	r0, r8
 800c780:	d833      	bhi.n	800c7ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800c782:	f1b8 0f00 	cmp.w	r8, #0
 800c786:	d030      	beq.n	800c7ea <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c788:	683c      	ldr	r4, [r7, #0]
 800c78a:	6823      	ldr	r3, [r4, #0]
 800c78c:	4622      	mov	r2, r4
 800c78e:	0759      	lsls	r1, r3, #29
 800c790:	d5db      	bpl.n	800c74a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c792:	69e3      	ldr	r3, [r4, #28]
 800c794:	051b      	lsls	r3, r3, #20
 800c796:	d5d8      	bpl.n	800c74a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c798:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c79c:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c79e:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c7a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a6:	e844 3100 	strex	r1, r3, [r4]
 800c7aa:	b139      	cbz	r1, 800c7bc <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ac:	e852 3f00 	ldrex	r3, [r2]
 800c7b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b4:	e842 3100 	strex	r1, r3, [r2]
 800c7b8:	2900      	cmp	r1, #0
 800c7ba:	d1f7      	bne.n	800c7ac <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7bc:	f102 0308 	add.w	r3, r2, #8
 800c7c0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7c4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c8:	f102 0008 	add.w	r0, r2, #8
 800c7cc:	e840 3100 	strex	r1, r3, [r0]
 800c7d0:	2900      	cmp	r1, #0
 800c7d2:	d1f3      	bne.n	800c7bc <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800c7d4:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 800c7d6:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800c7d8:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 800c7dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c7e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c7e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 800c7e8:	e7bb      	b.n	800c762 <UART_WaitOnFlagUntilTimeout+0x2a>
 800c7ea:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ec:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c7f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f4:	e842 3100 	strex	r1, r3, [r2]
 800c7f8:	2900      	cmp	r1, #0
 800c7fa:	d1f7      	bne.n	800c7ec <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7fc:	f102 0308 	add.w	r3, r2, #8
 800c800:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c804:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c808:	f102 0008 	add.w	r0, r2, #8
 800c80c:	e840 3100 	strex	r1, r3, [r0]
 800c810:	2900      	cmp	r1, #0
 800c812:	d1f3      	bne.n	800c7fc <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800c814:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800c816:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800c818:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 800c81c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800c824:	e79d      	b.n	800c762 <UART_WaitOnFlagUntilTimeout+0x2a>
 800c826:	bf00      	nop

0800c828 <HAL_UART_Init>:
  if (huart == NULL)
 800c828:	2800      	cmp	r0, #0
 800c82a:	d066      	beq.n	800c8fa <HAL_UART_Init+0xd2>
  if (huart->gState == HAL_UART_STATE_RESET)
 800c82c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800c830:	b570      	push	{r4, r5, r6, lr}
 800c832:	4604      	mov	r4, r0
 800c834:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_RESET)
 800c836:	2b00      	cmp	r3, #0
 800c838:	d04c      	beq.n	800c8d4 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800c83a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c83c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c83e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800c840:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800c844:	6813      	ldr	r3, [r2, #0]
 800c846:	f023 0301 	bic.w	r3, r3, #1
 800c84a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c84c:	f7ff fc82 	bl	800c154 <UART_SetConfig>
 800c850:	2801      	cmp	r0, #1
 800c852:	d03c      	beq.n	800c8ce <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c854:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c856:	2b00      	cmp	r3, #0
 800c858:	d135      	bne.n	800c8c6 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c85a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c85c:	2500      	movs	r5, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c85e:	6859      	ldr	r1, [r3, #4]
 800c860:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800c864:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c866:	6899      	ldr	r1, [r3, #8]
 800c868:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800c86c:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c86e:	6819      	ldr	r1, [r3, #0]
 800c870:	f041 0101 	orr.w	r1, r1, #1
 800c874:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c876:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800c87a:	f7f9 f829 	bl	80058d0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c87e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c880:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	0712      	lsls	r2, r2, #28
 800c886:	d40e      	bmi.n	800c8a6 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	075b      	lsls	r3, r3, #29
 800c88c:	d427      	bmi.n	800c8de <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c88e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800c890:	2220      	movs	r2, #32
  return HAL_OK;
 800c892:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800c894:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800c898:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c89c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8a0:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800c8a2:	b002      	add	sp, #8
 800c8a4:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8a6:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	462a      	mov	r2, r5
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	9100      	str	r1, [sp, #0]
 800c8b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c8b6:	f7ff ff3f 	bl	800c738 <UART_WaitOnFlagUntilTimeout>
 800c8ba:	b9e0      	cbnz	r0, 800c8f6 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c8bc:	6823      	ldr	r3, [r4, #0]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	075b      	lsls	r3, r3, #29
 800c8c2:	d40c      	bmi.n	800c8de <HAL_UART_Init+0xb6>
 800c8c4:	e7e3      	b.n	800c88e <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	f7ff fede 	bl	800c688 <UART_AdvFeatureConfig>
 800c8cc:	e7c5      	b.n	800c85a <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800c8ce:	2001      	movs	r0, #1
}
 800c8d0:	b002      	add	sp, #8
 800c8d2:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800c8d4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800c8d8:	f7f8 fdb4 	bl	8005444 <HAL_UART_MspInit>
 800c8dc:	e7ad      	b.n	800c83a <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8de:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 800c8e2:	4633      	mov	r3, r6
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c8ea:	9000      	str	r0, [sp, #0]
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f7ff ff23 	bl	800c738 <UART_WaitOnFlagUntilTimeout>
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	d0cb      	beq.n	800c88e <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800c8f6:	2003      	movs	r0, #3
 800c8f8:	e7d3      	b.n	800c8a2 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 800c8fa:	2001      	movs	r0, #1
}
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop

0800c900 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop

0800c904 <HAL_UARTEx_RxFifoFullCallback>:
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop

0800c908 <HAL_UARTEx_TxFifoEmptyCallback>:
 800c908:	4770      	bx	lr
 800c90a:	bf00      	nop

0800c90c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c90c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800c910:	2a01      	cmp	r2, #1
 800c912:	d017      	beq.n	800c944 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c914:	6802      	ldr	r2, [r0, #0]
 800c916:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800c918:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c91a:	2100      	movs	r1, #0
{
 800c91c:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800c91e:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800c922:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c924:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800c926:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c928:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800c92c:	f024 0401 	bic.w	r4, r4, #1
 800c930:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c932:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c934:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800c936:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800c938:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800c93c:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800c940:	bc30      	pop	{r4, r5}
 800c942:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c944:	2002      	movs	r0, #2
}
 800c946:	4770      	bx	lr

0800c948 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c948:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800c94c:	2a01      	cmp	r2, #1
 800c94e:	d037      	beq.n	800c9c0 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c950:	6802      	ldr	r2, [r0, #0]
 800c952:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800c954:	2024      	movs	r0, #36	; 0x24
{
 800c956:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800c958:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c95c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c95e:	6810      	ldr	r0, [r2, #0]
 800c960:	f020 0001 	bic.w	r0, r0, #1
 800c964:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c966:	6890      	ldr	r0, [r2, #8]
 800c968:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800c96c:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c96e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c970:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c972:	b310      	cbz	r0, 800c9ba <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c974:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c976:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c978:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c97c:	4911      	ldr	r1, [pc, #68]	; (800c9c4 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c97e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800c982:	4d11      	ldr	r5, [pc, #68]	; (800c9c8 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c984:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c988:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800c98c:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c990:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800c992:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c996:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c998:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c99c:	fbb1 f1f5 	udiv	r1, r1, r5
 800c9a0:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800c9a4:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800c9a6:	2100      	movs	r1, #0
 800c9a8:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9ac:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800c9ae:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800c9b0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800c9b4:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800c9b8:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800c9ba:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800c9bc:	4608      	mov	r0, r1
 800c9be:	e7ef      	b.n	800c9a0 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800c9c0:	2002      	movs	r0, #2
}
 800c9c2:	4770      	bx	lr
 800c9c4:	0801a22c 	.word	0x0801a22c
 800c9c8:	0801a224 	.word	0x0801a224

0800c9cc <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800c9cc:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800c9d0:	2a01      	cmp	r2, #1
 800c9d2:	d037      	beq.n	800ca44 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9d4:	6802      	ldr	r2, [r0, #0]
 800c9d6:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800c9d8:	2024      	movs	r0, #36	; 0x24
{
 800c9da:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800c9dc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9e0:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800c9e2:	6810      	ldr	r0, [r2, #0]
 800c9e4:	f020 0001 	bic.w	r0, r0, #1
 800c9e8:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c9ea:	6890      	ldr	r0, [r2, #8]
 800c9ec:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800c9f0:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c9f2:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c9f4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c9f6:	b310      	cbz	r0, 800ca3e <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c9f8:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c9fa:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9fc:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca00:	4911      	ldr	r1, [pc, #68]	; (800ca48 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ca02:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800ca06:	4d11      	ldr	r5, [pc, #68]	; (800ca4c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca08:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca0c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800ca10:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca14:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800ca16:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca1a:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca1c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca20:	fbb1 f1f5 	udiv	r1, r1, r5
 800ca24:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800ca28:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800ca2a:	2100      	movs	r1, #0
 800ca2c:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca30:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800ca32:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800ca34:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800ca38:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800ca3c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800ca3e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800ca40:	4608      	mov	r0, r1
 800ca42:	e7ef      	b.n	800ca24 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800ca44:	2002      	movs	r0, #2
}
 800ca46:	4770      	bx	lr
 800ca48:	0801a22c 	.word	0x0801a22c
 800ca4c:	0801a224 	.word	0x0801a224

0800ca50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca50:	b084      	sub	sp, #16
 800ca52:	4684      	mov	ip, r0
 800ca54:	b500      	push	{lr}
 800ca56:	b083      	sub	sp, #12
 800ca58:	f10d 0e14 	add.w	lr, sp, #20
 800ca5c:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ca60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d13d      	bne.n	800cae2 <USB_CoreInit+0x92>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ca66:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ca68:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800ca6c:	9911      	ldr	r1, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ca6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800ca72:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ca74:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ca76:	68c2      	ldr	r2, [r0, #12]
 800ca78:	ea03 0302 	and.w	r3, r3, r2
 800ca7c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ca7e:	68c3      	ldr	r3, [r0, #12]
 800ca80:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ca84:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800ca86:	d078      	beq.n	800cb7a <USB_CoreInit+0x12a>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 800ca88:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ca8a:	4a3e      	ldr	r2, [pc, #248]	; (800cb84 <USB_CoreInit+0x134>)
  __IO uint32_t count = 0U;
 800ca8c:	9300      	str	r3, [sp, #0]
 800ca8e:	e003      	b.n	800ca98 <USB_CoreInit+0x48>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca90:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	db3f      	blt.n	800cb18 <USB_CoreInit+0xc8>
    if (++count > 200000U)
 800ca98:	9b00      	ldr	r3, [sp, #0]
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	9300      	str	r3, [sp, #0]
 800caa0:	d9f6      	bls.n	800ca90 <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 800caa2:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 800caa4:	9b08      	ldr	r3, [sp, #32]
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d116      	bne.n	800cad8 <USB_CoreInit+0x88>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800caaa:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800caae:	4b36      	ldr	r3, [pc, #216]	; (800cb88 <USB_CoreInit+0x138>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800cab0:	b292      	uxth	r2, r2
 800cab2:	f8cc 205c 	str.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800cab6:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
 800caba:	4313      	orrs	r3, r2
 800cabc:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cac0:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800cac4:	f043 0306 	orr.w	r3, r3, #6
 800cac8:	f8cc 3008 	str.w	r3, [ip, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cacc:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800cad0:	f043 0320 	orr.w	r3, r3, #32
 800cad4:	f8cc 3008 	str.w	r3, [ip, #8]
}
 800cad8:	b003      	add	sp, #12
 800cada:	f85d eb04 	ldr.w	lr, [sp], #4
 800cade:	b004      	add	sp, #16
 800cae0:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cae2:	68c3      	ldr	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800cae4:	2100      	movs	r1, #0
    if (++count > 200000U)
 800cae6:	4a27      	ldr	r2, [pc, #156]	; (800cb84 <USB_CoreInit+0x134>)
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caec:	60c3      	str	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800caee:	9101      	str	r1, [sp, #4]
 800caf0:	e003      	b.n	800cafa <USB_CoreInit+0xaa>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800caf2:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	db2a      	blt.n	800cb50 <USB_CoreInit+0x100>
    if (++count > 200000U)
 800cafa:	9b01      	ldr	r3, [sp, #4]
 800cafc:	3301      	adds	r3, #1
 800cafe:	4293      	cmp	r3, r2
 800cb00:	9301      	str	r3, [sp, #4]
 800cb02:	d9f6      	bls.n	800caf2 <USB_CoreInit+0xa2>
      return HAL_TIMEOUT;
 800cb04:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 800cb06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb08:	b9db      	cbnz	r3, 800cb42 <USB_CoreInit+0xf2>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cb0a:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800cb0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb12:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800cb16:	e7c5      	b.n	800caa4 <USB_CoreInit+0x54>

  /* Core Soft Reset */
  count = 0U;
 800cb18:	2300      	movs	r3, #0
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;

  do
  {
    if (++count > 200000U)
 800cb1a:	4a1a      	ldr	r2, [pc, #104]	; (800cb84 <USB_CoreInit+0x134>)
  count = 0U;
 800cb1c:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cb1e:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800cb22:	f043 0301 	orr.w	r3, r3, #1
 800cb26:	f8cc 3010 	str.w	r3, [ip, #16]
 800cb2a:	e004      	b.n	800cb36 <USB_CoreInit+0xe6>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cb2c:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800cb30:	f010 0001 	ands.w	r0, r0, #1
 800cb34:	d0b6      	beq.n	800caa4 <USB_CoreInit+0x54>
    if (++count > 200000U)
 800cb36:	9b00      	ldr	r3, [sp, #0]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	9300      	str	r3, [sp, #0]
 800cb3e:	d9f5      	bls.n	800cb2c <USB_CoreInit+0xdc>
 800cb40:	e7af      	b.n	800caa2 <USB_CoreInit+0x52>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb42:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800cb46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cb4a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800cb4e:	e7a9      	b.n	800caa4 <USB_CoreInit+0x54>
  count = 0U;
 800cb50:	2300      	movs	r3, #0
    if (++count > 200000U)
 800cb52:	4a0c      	ldr	r2, [pc, #48]	; (800cb84 <USB_CoreInit+0x134>)
  count = 0U;
 800cb54:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cb56:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800cb5a:	f043 0301 	orr.w	r3, r3, #1
 800cb5e:	f8cc 3010 	str.w	r3, [ip, #16]
 800cb62:	e004      	b.n	800cb6e <USB_CoreInit+0x11e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cb64:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800cb68:	f010 0001 	ands.w	r0, r0, #1
 800cb6c:	d0cb      	beq.n	800cb06 <USB_CoreInit+0xb6>
    if (++count > 200000U)
 800cb6e:	9b01      	ldr	r3, [sp, #4]
 800cb70:	3301      	adds	r3, #1
 800cb72:	4293      	cmp	r3, r2
 800cb74:	9301      	str	r3, [sp, #4]
 800cb76:	d9f5      	bls.n	800cb64 <USB_CoreInit+0x114>
 800cb78:	e7c4      	b.n	800cb04 <USB_CoreInit+0xb4>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cb7a:	68c3      	ldr	r3, [r0, #12]
 800cb7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb80:	60c3      	str	r3, [r0, #12]
 800cb82:	e781      	b.n	800ca88 <USB_CoreInit+0x38>
 800cb84:	00030d40 	.word	0x00030d40
 800cb88:	03ee0000 	.word	0x03ee0000

0800cb8c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800cb8c:	2a02      	cmp	r2, #2
{
 800cb8e:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 800cb90:	d00b      	beq.n	800cbaa <USB_SetTurnaroundTime+0x1e>
 800cb92:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cb96:	68d9      	ldr	r1, [r3, #12]
}
 800cb98:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cb9a:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800cb9e:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cba0:	68da      	ldr	r2, [r3, #12]
 800cba2:	ea42 020c 	orr.w	r2, r2, ip
 800cba6:	60da      	str	r2, [r3, #12]
}
 800cba8:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cbaa:	4a23      	ldr	r2, [pc, #140]	; (800cc38 <USB_SetTurnaroundTime+0xac>)
 800cbac:	4823      	ldr	r0, [pc, #140]	; (800cc3c <USB_SetTurnaroundTime+0xb0>)
 800cbae:	440a      	add	r2, r1
 800cbb0:	4282      	cmp	r2, r0
 800cbb2:	d92c      	bls.n	800cc0e <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cbb4:	4a22      	ldr	r2, [pc, #136]	; (800cc40 <USB_SetTurnaroundTime+0xb4>)
 800cbb6:	4823      	ldr	r0, [pc, #140]	; (800cc44 <USB_SetTurnaroundTime+0xb8>)
 800cbb8:	440a      	add	r2, r1
 800cbba:	4282      	cmp	r2, r0
 800cbbc:	d92a      	bls.n	800cc14 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cbbe:	4a22      	ldr	r2, [pc, #136]	; (800cc48 <USB_SetTurnaroundTime+0xbc>)
 800cbc0:	4822      	ldr	r0, [pc, #136]	; (800cc4c <USB_SetTurnaroundTime+0xc0>)
 800cbc2:	440a      	add	r2, r1
 800cbc4:	4282      	cmp	r2, r0
 800cbc6:	d928      	bls.n	800cc1a <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cbc8:	4a21      	ldr	r2, [pc, #132]	; (800cc50 <USB_SetTurnaroundTime+0xc4>)
 800cbca:	4822      	ldr	r0, [pc, #136]	; (800cc54 <USB_SetTurnaroundTime+0xc8>)
 800cbcc:	440a      	add	r2, r1
 800cbce:	4282      	cmp	r2, r0
 800cbd0:	d326      	bcc.n	800cc20 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cbd2:	4a21      	ldr	r2, [pc, #132]	; (800cc58 <USB_SetTurnaroundTime+0xcc>)
 800cbd4:	4821      	ldr	r0, [pc, #132]	; (800cc5c <USB_SetTurnaroundTime+0xd0>)
 800cbd6:	440a      	add	r2, r1
 800cbd8:	4282      	cmp	r2, r0
 800cbda:	d924      	bls.n	800cc26 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cbdc:	4a20      	ldr	r2, [pc, #128]	; (800cc60 <USB_SetTurnaroundTime+0xd4>)
 800cbde:	4821      	ldr	r0, [pc, #132]	; (800cc64 <USB_SetTurnaroundTime+0xd8>)
 800cbe0:	440a      	add	r2, r1
 800cbe2:	4282      	cmp	r2, r0
 800cbe4:	d322      	bcc.n	800cc2c <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cbe6:	4a20      	ldr	r2, [pc, #128]	; (800cc68 <USB_SetTurnaroundTime+0xdc>)
 800cbe8:	4820      	ldr	r0, [pc, #128]	; (800cc6c <USB_SetTurnaroundTime+0xe0>)
 800cbea:	440a      	add	r2, r1
 800cbec:	4282      	cmp	r2, r0
 800cbee:	d3d0      	bcc.n	800cb92 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cbf0:	4a1f      	ldr	r2, [pc, #124]	; (800cc70 <USB_SetTurnaroundTime+0xe4>)
 800cbf2:	4820      	ldr	r0, [pc, #128]	; (800cc74 <USB_SetTurnaroundTime+0xe8>)
 800cbf4:	440a      	add	r2, r1
 800cbf6:	4282      	cmp	r2, r0
 800cbf8:	d31b      	bcc.n	800cc32 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cbfa:	4a1f      	ldr	r2, [pc, #124]	; (800cc78 <USB_SetTurnaroundTime+0xec>)
 800cbfc:	481f      	ldr	r0, [pc, #124]	; (800cc7c <USB_SetTurnaroundTime+0xf0>)
 800cbfe:	440a      	add	r2, r1
 800cc00:	4282      	cmp	r2, r0
 800cc02:	bf34      	ite	cc
 800cc04:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 800cc08:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 800cc0c:	e7c3      	b.n	800cb96 <USB_SetTurnaroundTime+0xa>
 800cc0e:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 800cc12:	e7c0      	b.n	800cb96 <USB_SetTurnaroundTime+0xa>
 800cc14:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 800cc18:	e7bd      	b.n	800cb96 <USB_SetTurnaroundTime+0xa>
 800cc1a:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 800cc1e:	e7ba      	b.n	800cb96 <USB_SetTurnaroundTime+0xa>
 800cc20:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 800cc24:	e7b7      	b.n	800cb96 <USB_SetTurnaroundTime+0xa>
 800cc26:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 800cc2a:	e7b4      	b.n	800cb96 <USB_SetTurnaroundTime+0xa>
 800cc2c:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 800cc30:	e7b1      	b.n	800cb96 <USB_SetTurnaroundTime+0xa>
 800cc32:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 800cc36:	e7ae      	b.n	800cb96 <USB_SetTurnaroundTime+0xa>
 800cc38:	ff275340 	.word	0xff275340
 800cc3c:	000c34ff 	.word	0x000c34ff
 800cc40:	ff1b1e40 	.word	0xff1b1e40
 800cc44:	000f423f 	.word	0x000f423f
 800cc48:	ff0bdc00 	.word	0xff0bdc00
 800cc4c:	00124f7f 	.word	0x00124f7f
 800cc50:	fef98c80 	.word	0xfef98c80
 800cc54:	0013d620 	.word	0x0013d620
 800cc58:	fee5b660 	.word	0xfee5b660
 800cc5c:	0016e35f 	.word	0x0016e35f
 800cc60:	feced300 	.word	0xfeced300
 800cc64:	001b7740 	.word	0x001b7740
 800cc68:	feb35bc0 	.word	0xfeb35bc0
 800cc6c:	002191c0 	.word	0x002191c0
 800cc70:	fe91ca00 	.word	0xfe91ca00
 800cc74:	00387520 	.word	0x00387520
 800cc78:	fe5954e0 	.word	0xfe5954e0
 800cc7c:	00419ce0 	.word	0x00419ce0

0800cc80 <USB_EnableGlobalInt>:
{
 800cc80:	4603      	mov	r3, r0
}
 800cc82:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cc84:	689a      	ldr	r2, [r3, #8]
 800cc86:	f042 0201 	orr.w	r2, r2, #1
 800cc8a:	609a      	str	r2, [r3, #8]
}
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop

0800cc90 <USB_DisableGlobalInt>:
{
 800cc90:	4603      	mov	r3, r0
}
 800cc92:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cc94:	689a      	ldr	r2, [r3, #8]
 800cc96:	f022 0201 	bic.w	r2, r2, #1
 800cc9a:	609a      	str	r2, [r3, #8]
}
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop

0800cca0 <USB_SetCurrentMode>:
{
 800cca0:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cca2:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800cca4:	2901      	cmp	r1, #1
{
 800cca6:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cca8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ccac:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800ccae:	d017      	beq.n	800cce0 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 800ccb0:	b9a1      	cbnz	r1, 800ccdc <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ccb2:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800ccb4:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ccb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ccba:	60c3      	str	r3, [r0, #12]
 800ccbc:	e001      	b.n	800ccc2 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ccbe:	2c32      	cmp	r4, #50	; 0x32
 800ccc0:	d00c      	beq.n	800ccdc <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800ccc2:	2001      	movs	r0, #1
      ms++;
 800ccc4:	4404      	add	r4, r0
      HAL_Delay(1U);
 800ccc6:	f7f8 fe09 	bl	80058dc <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800ccca:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cccc:	07db      	lsls	r3, r3, #31
 800ccce:	d4f6      	bmi.n	800ccbe <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 800ccd0:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800ccd4:	fab0 f080 	clz	r0, r0
 800ccd8:	0940      	lsrs	r0, r0, #5
}
 800ccda:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ccdc:	2001      	movs	r0, #1
}
 800ccde:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cce0:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800cce2:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cce4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cce8:	60c3      	str	r3, [r0, #12]
 800ccea:	e001      	b.n	800ccf0 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ccec:	2c32      	cmp	r4, #50	; 0x32
 800ccee:	d0f5      	beq.n	800ccdc <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800ccf0:	2001      	movs	r0, #1
      ms++;
 800ccf2:	4404      	add	r4, r0
      HAL_Delay(1U);
 800ccf4:	f7f8 fdf2 	bl	80058dc <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800ccf8:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ccfa:	07da      	lsls	r2, r3, #31
 800ccfc:	d5f6      	bpl.n	800ccec <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 800ccfe:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800cd02:	fab0 f080 	clz	r0, r0
 800cd06:	0940      	lsrs	r0, r0, #5
 800cd08:	e7e7      	b.n	800ccda <USB_SetCurrentMode+0x3a>
 800cd0a:	bf00      	nop

0800cd0c <USB_DevInit>:
{
 800cd0c:	b084      	sub	sp, #16
 800cd0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd12:	b083      	sub	sp, #12
 800cd14:	ac0b      	add	r4, sp, #44	; 0x2c
 800cd16:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800cd1e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800cd22:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800cd26:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 800cd2a:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 800cd2e:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800cd32:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800cd36:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 800cd3a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 800cd3e:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 800cd42:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 800cd46:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 800cd4a:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 800cd4e:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 800cd52:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 800cd56:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 800cd5a:	2c00      	cmp	r4, #0
 800cd5c:	f040 80a8 	bne.w	800ceb0 <USB_DevInit+0x1a4>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cd60:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800cd64:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
 800cd68:	f043 0302 	orr.w	r3, r3, #2
 800cd6c:	f8cc 3004 	str.w	r3, [ip, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cd70:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cd72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cd76:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cd78:	6803      	ldr	r3, [r0, #0]
 800cd7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd7e:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cd80:	6803      	ldr	r3, [r0, #0]
 800cd82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd86:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cd8e:	f8dc 3000 	ldr.w	r3, [ip]
 800cd92:	f8cc 3000 	str.w	r3, [ip]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cd96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	f000 80b0 	beq.w	800cefe <USB_DevInit+0x1f2>
  USBx_DEVICE->DCFG |= speed;
 800cd9e:	f8dc 3000 	ldr.w	r3, [ip]
 800cda2:	f043 0303 	orr.w	r3, r3, #3
 800cda6:	f8cc 3000 	str.w	r3, [ip]
  __IO uint32_t count = 0U;
 800cdaa:	2300      	movs	r3, #0
    if (++count > 200000U)
 800cdac:	4a5c      	ldr	r2, [pc, #368]	; (800cf20 <USB_DevInit+0x214>)
  __IO uint32_t count = 0U;
 800cdae:	9300      	str	r3, [sp, #0]
 800cdb0:	e003      	b.n	800cdba <USB_DevInit+0xae>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cdb2:	6903      	ldr	r3, [r0, #16]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	f2c0 8091 	blt.w	800cedc <USB_DevInit+0x1d0>
    if (++count > 200000U)
 800cdba:	9b00      	ldr	r3, [sp, #0]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	9300      	str	r3, [sp, #0]
 800cdc2:	d9f6      	bls.n	800cdb2 <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 800cdc4:	f04f 0e01 	mov.w	lr, #1
  __IO uint32_t count = 0U;
 800cdc8:	2300      	movs	r3, #0
    if (++count > 200000U)
 800cdca:	4a55      	ldr	r2, [pc, #340]	; (800cf20 <USB_DevInit+0x214>)
  __IO uint32_t count = 0U;
 800cdcc:	9301      	str	r3, [sp, #4]
 800cdce:	e002      	b.n	800cdd6 <USB_DevInit+0xca>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cdd0:	6903      	ldr	r3, [r0, #16]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	db73      	blt.n	800cebe <USB_DevInit+0x1b2>
    if (++count > 200000U)
 800cdd6:	9b01      	ldr	r3, [sp, #4]
 800cdd8:	3301      	adds	r3, #1
 800cdda:	4293      	cmp	r3, r2
 800cddc:	9301      	str	r3, [sp, #4]
 800cdde:	d9f7      	bls.n	800cdd0 <USB_DevInit+0xc4>
    ret = HAL_ERROR;
 800cde0:	f04f 0e01 	mov.w	lr, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800cde4:	2200      	movs	r2, #0
 800cde6:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cdea:	f8cc 2014 	str.w	r2, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cdee:	f8cc 201c 	str.w	r2, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cdf2:	b1d1      	cbz	r1, 800ce2a <USB_DevInit+0x11e>
 800cdf4:	f500 6310 	add.w	r3, r0, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cdf8:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cdfc:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800ce00:	4616      	mov	r6, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ce02:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 800ce06:	e006      	b.n	800ce16 <USB_DevInit+0x10a>
      USBx_INEP(i)->DIEPCTL = 0U;
 800ce08:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce0a:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ce0c:	611e      	str	r6, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ce0e:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce10:	3320      	adds	r3, #32
 800ce12:	4291      	cmp	r1, r2
 800ce14:	d030      	beq.n	800ce78 <USB_DevInit+0x16c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ce16:	681d      	ldr	r5, [r3, #0]
 800ce18:	2d00      	cmp	r5, #0
 800ce1a:	daf5      	bge.n	800ce08 <USB_DevInit+0xfc>
      if (i == 0U)
 800ce1c:	b112      	cbz	r2, 800ce24 <USB_DevInit+0x118>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ce1e:	f8c3 8000 	str.w	r8, [r3]
 800ce22:	e7f2      	b.n	800ce0a <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ce24:	f8c3 9000 	str.w	r9, [r3]
 800ce28:	e7ef      	b.n	800ce0a <USB_DevInit+0xfe>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ce2a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 800ce2e:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ce30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce34:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ce38:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 800ce3c:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ce3e:	6143      	str	r3, [r0, #20]
  if (cfg.dma_enable == 0U)
 800ce40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce42:	b91b      	cbnz	r3, 800ce4c <USB_DevInit+0x140>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ce44:	6983      	ldr	r3, [r0, #24]
 800ce46:	f043 0310 	orr.w	r3, r3, #16
 800ce4a:	6183      	str	r3, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ce4c:	6982      	ldr	r2, [r0, #24]
 800ce4e:	4b35      	ldr	r3, [pc, #212]	; (800cf24 <USB_DevInit+0x218>)
 800ce50:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 800ce52:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ce54:	6183      	str	r3, [r0, #24]
  if (cfg.Sof_enable != 0U)
 800ce56:	b11a      	cbz	r2, 800ce60 <USB_DevInit+0x154>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ce58:	6983      	ldr	r3, [r0, #24]
 800ce5a:	f043 0308 	orr.w	r3, r3, #8
 800ce5e:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800ce60:	2c01      	cmp	r4, #1
 800ce62:	d103      	bne.n	800ce6c <USB_DevInit+0x160>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ce64:	6982      	ldr	r2, [r0, #24]
 800ce66:	4b30      	ldr	r3, [pc, #192]	; (800cf28 <USB_DevInit+0x21c>)
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	6183      	str	r3, [r0, #24]
}
 800ce6c:	4670      	mov	r0, lr
 800ce6e:	b003      	add	sp, #12
 800ce70:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce74:	b004      	add	sp, #16
 800ce76:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ce7e:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ce82:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ce86:	4616      	mov	r6, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ce88:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 800ce8c:	e006      	b.n	800ce9c <USB_DevInit+0x190>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ce8e:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce90:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ce92:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ce94:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce96:	3320      	adds	r3, #32
 800ce98:	4291      	cmp	r1, r2
 800ce9a:	d0c6      	beq.n	800ce2a <USB_DevInit+0x11e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce9c:	681d      	ldr	r5, [r3, #0]
 800ce9e:	2d00      	cmp	r5, #0
 800cea0:	daf5      	bge.n	800ce8e <USB_DevInit+0x182>
      if (i == 0U)
 800cea2:	b112      	cbz	r2, 800ceaa <USB_DevInit+0x19e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cea4:	f8c3 8000 	str.w	r8, [r3]
 800cea8:	e7f2      	b.n	800ce90 <USB_DevInit+0x184>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ceaa:	f8c3 9000 	str.w	r9, [r3]
 800ceae:	e7ef      	b.n	800ce90 <USB_DevInit+0x184>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ceb0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ceb2:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ceb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ceba:	6383      	str	r3, [r0, #56]	; 0x38
 800cebc:	e764      	b.n	800cd88 <USB_DevInit+0x7c>
  count = 0U;
 800cebe:	2300      	movs	r3, #0
    if (++count > 200000U)
 800cec0:	4a17      	ldr	r2, [pc, #92]	; (800cf20 <USB_DevInit+0x214>)
  count = 0U;
 800cec2:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cec4:	2310      	movs	r3, #16
 800cec6:	6103      	str	r3, [r0, #16]
 800cec8:	e002      	b.n	800ced0 <USB_DevInit+0x1c4>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ceca:	6903      	ldr	r3, [r0, #16]
 800cecc:	06db      	lsls	r3, r3, #27
 800cece:	d589      	bpl.n	800cde4 <USB_DevInit+0xd8>
    if (++count > 200000U)
 800ced0:	9b01      	ldr	r3, [sp, #4]
 800ced2:	3301      	adds	r3, #1
 800ced4:	4293      	cmp	r3, r2
 800ced6:	9301      	str	r3, [sp, #4]
 800ced8:	d9f7      	bls.n	800ceca <USB_DevInit+0x1be>
 800ceda:	e781      	b.n	800cde0 <USB_DevInit+0xd4>
  count = 0U;
 800cedc:	2300      	movs	r3, #0
    if (++count > 200000U)
 800cede:	4a10      	ldr	r2, [pc, #64]	; (800cf20 <USB_DevInit+0x214>)
  count = 0U;
 800cee0:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cee2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800cee6:	6103      	str	r3, [r0, #16]
 800cee8:	e003      	b.n	800cef2 <USB_DevInit+0x1e6>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ceea:	6903      	ldr	r3, [r0, #16]
 800ceec:	f013 0320 	ands.w	r3, r3, #32
 800cef0:	d00c      	beq.n	800cf0c <USB_DevInit+0x200>
    if (++count > 200000U)
 800cef2:	9b00      	ldr	r3, [sp, #0]
 800cef4:	3301      	adds	r3, #1
 800cef6:	4293      	cmp	r3, r2
 800cef8:	9300      	str	r3, [sp, #0]
 800cefa:	d9f6      	bls.n	800ceea <USB_DevInit+0x1de>
 800cefc:	e762      	b.n	800cdc4 <USB_DevInit+0xb8>
    if (cfg.speed == USBD_HS_SPEED)
 800cefe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf00:	b933      	cbnz	r3, 800cf10 <USB_DevInit+0x204>
  USBx_DEVICE->DCFG |= speed;
 800cf02:	f8dc 3000 	ldr.w	r3, [ip]
 800cf06:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 800cf0a:	e74e      	b.n	800cdaa <USB_DevInit+0x9e>
  HAL_StatusTypeDef ret = HAL_OK;
 800cf0c:	469e      	mov	lr, r3
 800cf0e:	e75b      	b.n	800cdc8 <USB_DevInit+0xbc>
  USBx_DEVICE->DCFG |= speed;
 800cf10:	f8dc 3000 	ldr.w	r3, [ip]
 800cf14:	f043 0301 	orr.w	r3, r3, #1
 800cf18:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 800cf1c:	e745      	b.n	800cdaa <USB_DevInit+0x9e>
 800cf1e:	bf00      	nop
 800cf20:	00030d40 	.word	0x00030d40
 800cf24:	803c3800 	.word	0x803c3800
 800cf28:	40000004 	.word	0x40000004

0800cf2c <USB_FlushTxFifo>:
{
 800cf2c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800cf2e:	2300      	movs	r3, #0
    if (++count > 200000U)
 800cf30:	4a11      	ldr	r2, [pc, #68]	; (800cf78 <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 800cf32:	9301      	str	r3, [sp, #4]
 800cf34:	e002      	b.n	800cf3c <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf36:	6903      	ldr	r3, [r0, #16]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	db07      	blt.n	800cf4c <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 800cf3c:	9b01      	ldr	r3, [sp, #4]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	4293      	cmp	r3, r2
 800cf42:	9301      	str	r3, [sp, #4]
 800cf44:	d9f7      	bls.n	800cf36 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 800cf46:	2003      	movs	r0, #3
}
 800cf48:	b002      	add	sp, #8
 800cf4a:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cf4c:	0189      	lsls	r1, r1, #6
  count = 0U;
 800cf4e:	2300      	movs	r3, #0
    if (++count > 200000U)
 800cf50:	4a09      	ldr	r2, [pc, #36]	; (800cf78 <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cf52:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800cf56:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cf58:	6101      	str	r1, [r0, #16]
 800cf5a:	e003      	b.n	800cf64 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cf5c:	6903      	ldr	r3, [r0, #16]
 800cf5e:	f013 0320 	ands.w	r3, r3, #32
 800cf62:	d005      	beq.n	800cf70 <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 800cf64:	9b01      	ldr	r3, [sp, #4]
 800cf66:	3301      	adds	r3, #1
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	9301      	str	r3, [sp, #4]
 800cf6c:	d9f6      	bls.n	800cf5c <USB_FlushTxFifo+0x30>
 800cf6e:	e7ea      	b.n	800cf46 <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 800cf70:	4618      	mov	r0, r3
}
 800cf72:	b002      	add	sp, #8
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	00030d40 	.word	0x00030d40

0800cf7c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cf7c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cf80:	f013 0006 	ands.w	r0, r3, #6
 800cf84:	d004      	beq.n	800cf90 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 800cf86:	f013 0f02 	tst.w	r3, #2
 800cf8a:	bf14      	ite	ne
 800cf8c:	2002      	movne	r0, #2
 800cf8e:	200f      	moveq	r0, #15
}
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop

0800cf94 <USB_ActivateEndpoint>:
{
 800cf94:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800cf96:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800cf98:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d020      	beq.n	800cfe0 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cf9e:	f002 0c0f 	and.w	ip, r2, #15
 800cfa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cfa6:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cfaa:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cfae:	fa03 f30c 	lsl.w	r3, r3, ip
 800cfb2:	4323      	orrs	r3, r4
 800cfb4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cfb8:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800cfbc:	041b      	lsls	r3, r3, #16
 800cfbe:	d40c      	bmi.n	800cfda <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cfc0:	688b      	ldr	r3, [r1, #8]
 800cfc2:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 800cfc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cfca:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cfcc:	4914      	ldr	r1, [pc, #80]	; (800d020 <USB_ActivateEndpoint+0x8c>)
 800cfce:	4323      	orrs	r3, r4
 800cfd0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 800cfd4:	4319      	orrs	r1, r3
 800cfd6:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 800cfda:	2000      	movs	r0, #0
 800cfdc:	bc30      	pop	{r4, r5}
 800cfde:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cfe0:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800cfe4:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cfe8:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cfec:	40ab      	lsls	r3, r5
 800cfee:	69e5      	ldr	r5, [r4, #28]
 800cff0:	432b      	orrs	r3, r5
 800cff2:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cff4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800cff8:	041c      	lsls	r4, r3, #16
 800cffa:	d4ee      	bmi.n	800cfda <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cffc:	688b      	ldr	r3, [r1, #8]
 800cffe:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 800d002:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d006:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d008:	4905      	ldr	r1, [pc, #20]	; (800d020 <USB_ActivateEndpoint+0x8c>)
 800d00a:	432b      	orrs	r3, r5
 800d00c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800d010:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800d014:	4311      	orrs	r1, r2
}
 800d016:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d018:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 800d01c:	2000      	movs	r0, #0
 800d01e:	4770      	bx	lr
 800d020:	10008000 	.word	0x10008000

0800d024 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 800d024:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800d026:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800d028:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d02a:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800d02e:	d02a      	beq.n	800d086 <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d030:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800d034:	2a00      	cmp	r2, #0
 800d036:	db19      	blt.n	800d06c <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d038:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d03c:	f003 030f 	and.w	r3, r3, #15
 800d040:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800d044:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d048:	4a23      	ldr	r2, [pc, #140]	; (800d0d8 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d04a:	ea21 0103 	bic.w	r1, r1, r3
 800d04e:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d052:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800d056:	ea21 0303 	bic.w	r3, r1, r3
 800d05a:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800d05e:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d060:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 800d064:	401a      	ands	r2, r3
 800d066:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 800d06a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d06c:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800d070:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800d074:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d078:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800d07c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d080:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 800d084:	e7d8      	b.n	800d038 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d086:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800d08a:	2a00      	cmp	r2, #0
 800d08c:	da0b      	bge.n	800d0a6 <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d08e:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800d092:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800d096:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d09a:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800d09e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d0a2:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d0a6:	f003 020f 	and.w	r2, r3, #15
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800d0b0:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d0b2:	4a0a      	ldr	r2, [pc, #40]	; (800d0dc <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d0b4:	ea21 0103 	bic.w	r1, r1, r3
 800d0b8:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d0bc:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800d0c0:	ea21 0303 	bic.w	r3, r1, r3
 800d0c4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800d0c8:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d0ca:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 800d0ce:	401a      	ands	r2, r3
 800d0d0:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop
 800d0d8:	eff37800 	.word	0xeff37800
 800d0dc:	ec337800 	.word	0xec337800

0800d0e0 <USB_EPStartXfer>:
{
 800d0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 800d0e4:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800d0e6:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d051      	beq.n	800d192 <USB_EPStartXfer+0xb2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d0ee:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 800d0f2:	4c84      	ldr	r4, [pc, #528]	; (800d304 <USB_EPStartXfer+0x224>)
 800d0f4:	f8dc 5b10 	ldr.w	r5, [ip, #2832]	; 0xb10
 800d0f8:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 800d0fc:	402c      	ands	r4, r5
 800d0fe:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d100:	4c81      	ldr	r4, [pc, #516]	; (800d308 <USB_EPStartXfer+0x228>)
 800d102:	691d      	ldr	r5, [r3, #16]
 800d104:	402c      	ands	r4, r5
 800d106:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 800d108:	694c      	ldr	r4, [r1, #20]
 800d10a:	b384      	cbz	r4, 800d16e <USB_EPStartXfer+0x8e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d10c:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 800d10e:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d110:	4e7e      	ldr	r6, [pc, #504]	; (800d30c <USB_EPStartXfer+0x22c>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d112:	442c      	add	r4, r5
 800d114:	f104 34ff 	add.w	r4, r4, #4294967295
 800d118:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d11c:	ea06 4ec4 	and.w	lr, r6, r4, lsl #19
 800d120:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d122:	fb05 f404 	mul.w	r4, r5, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d126:	691d      	ldr	r5, [r3, #16]
 800d128:	ea4e 0505 	orr.w	r5, lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d12c:	f3c4 0412 	ubfx	r4, r4, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d130:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d132:	691d      	ldr	r5, [r3, #16]
 800d134:	ea44 0405 	orr.w	r4, r4, r5
 800d138:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800d13a:	d025      	beq.n	800d188 <USB_EPStartXfer+0xa8>
    if (ep->type == EP_TYPE_ISOC)
 800d13c:	78cb      	ldrb	r3, [r1, #3]
 800d13e:	2b01      	cmp	r3, #1
 800d140:	d10c      	bne.n	800d15c <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d142:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800d146:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d14a:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 800d14e:	bf0c      	ite	eq
 800d150:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d154:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800d158:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d15c:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 800d160:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d164:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 800d168:	2000      	movs	r0, #0
 800d16a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d16e:	688c      	ldr	r4, [r1, #8]
    if (dma == 1U)
 800d170:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d172:	691d      	ldr	r5, [r3, #16]
 800d174:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800d178:	ea44 0405 	orr.w	r4, r4, r5
 800d17c:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d17e:	691c      	ldr	r4, [r3, #16]
 800d180:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800d184:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800d186:	d1d9      	bne.n	800d13c <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 800d188:	68ca      	ldr	r2, [r1, #12]
 800d18a:	2a00      	cmp	r2, #0
 800d18c:	d0d6      	beq.n	800d13c <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d18e:	615a      	str	r2, [r3, #20]
 800d190:	e7d4      	b.n	800d13c <USB_EPStartXfer+0x5c>
    if (ep->xfer_len == 0U)
 800d192:	694d      	ldr	r5, [r1, #20]
 800d194:	2d00      	cmp	r5, #0
 800d196:	d03d      	beq.n	800d214 <USB_EPStartXfer+0x134>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d198:	eb00 144c 	add.w	r4, r0, ip, lsl #5
 800d19c:	4e59      	ldr	r6, [pc, #356]	; (800d304 <USB_EPStartXfer+0x224>)
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d19e:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d1a2:	f8d4 8910 	ldr.w	r8, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d1a6:	4f58      	ldr	r7, [pc, #352]	; (800d308 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d1a8:	ea08 0606 	and.w	r6, r8, r6
 800d1ac:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d1b0:	eb05 060e 	add.w	r6, r5, lr
 800d1b4:	3e01      	subs	r6, #1
 800d1b6:	fbb6 fefe 	udiv	lr, r6, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d1ba:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800d1be:	4037      	ands	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d1c0:	4e52      	ldr	r6, [pc, #328]	; (800d30c <USB_EPStartXfer+0x22c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d1c2:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d1c6:	ea06 46ce 	and.w	r6, r6, lr, lsl #19
 800d1ca:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 800d1ce:	433e      	orrs	r6, r7
 800d1d0:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d1d4:	f3c5 0612 	ubfx	r6, r5, #0, #19
 800d1d8:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 800d1dc:	433e      	orrs	r6, r7
 800d1de:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d1e2:	f504 6610 	add.w	r6, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800d1e6:	f891 e003 	ldrb.w	lr, [r1, #3]
 800d1ea:	f1be 0f01 	cmp.w	lr, #1
 800d1ee:	d057      	beq.n	800d2a0 <USB_EPStartXfer+0x1c0>
    if (dma == 1U)
 800d1f0:	2a01      	cmp	r2, #1
 800d1f2:	d072      	beq.n	800d2da <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d1f4:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d1f8:	f00c 0c0f 	and.w	ip, ip, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d1fc:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d200:	fa03 f30c 	lsl.w	r3, r3, ip
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d204:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d208:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800d20c:	4313      	orrs	r3, r2
 800d20e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 800d212:	e7a9      	b.n	800d168 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d214:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 800d218:	4e3b      	ldr	r6, [pc, #236]	; (800d308 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d21a:	4c3a      	ldr	r4, [pc, #232]	; (800d304 <USB_EPStartXfer+0x224>)
    if (dma == 1U)
 800d21c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d21e:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 800d222:	ea06 0607 	and.w	r6, r6, r7
 800d226:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d22a:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 800d22e:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800d232:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d236:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 800d23a:	ea04 0406 	and.w	r4, r4, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d23e:	f503 6610 	add.w	r6, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d242:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 800d246:	f891 e003 	ldrb.w	lr, [r1, #3]
    if (dma == 1U)
 800d24a:	d03a      	beq.n	800d2c2 <USB_EPStartXfer+0x1e2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d24c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800d250:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d254:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800d258:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800d25c:	d184      	bne.n	800d168 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d25e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800d262:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d266:	6833      	ldr	r3, [r6, #0]
 800d268:	bf0c      	ite	eq
 800d26a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d26e:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800d272:	6033      	str	r3, [r6, #0]
  if (dma == 0U)
 800d274:	2a00      	cmp	r2, #0
 800d276:	f47f af77 	bne.w	800d168 <USB_EPStartXfer+0x88>
    count32b = ((uint32_t)len + 3U) / 4U;
 800d27a:	b2ad      	uxth	r5, r5
 800d27c:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 800d27e:	08ad      	lsrs	r5, r5, #2
 800d280:	f43f af72 	beq.w	800d168 <USB_EPStartXfer+0x88>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d284:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d286:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 800d28a:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 800d28e:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 800d292:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 800d296:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d298:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 800d29c:	d1f9      	bne.n	800d292 <USB_EPStartXfer+0x1b2>
 800d29e:	e763      	b.n	800d168 <USB_EPStartXfer+0x88>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d2a0:	6933      	ldr	r3, [r6, #16]
    if (dma == 1U)
 800d2a2:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d2a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d2a8:	6133      	str	r3, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d2aa:	6933      	ldr	r3, [r6, #16]
 800d2ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d2b0:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 800d2b2:	d017      	beq.n	800d2e4 <USB_EPStartXfer+0x204>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d2b4:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800d2b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d2bc:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800d2c0:	e7cd      	b.n	800d25e <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->dma_addr != 0U)
 800d2c2:	690b      	ldr	r3, [r1, #16]
 800d2c4:	b963      	cbnz	r3, 800d2e0 <USB_EPStartXfer+0x200>
      if (ep->type == EP_TYPE_ISOC)
 800d2c6:	f1be 0f01 	cmp.w	lr, #1
 800d2ca:	d00e      	beq.n	800d2ea <USB_EPStartXfer+0x20a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d2cc:	6833      	ldr	r3, [r6, #0]
}
 800d2ce:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d2d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d2d4:	6033      	str	r3, [r6, #0]
}
 800d2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800d2da:	690b      	ldr	r3, [r1, #16]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d0f5      	beq.n	800d2cc <USB_EPStartXfer+0x1ec>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d2e0:	6173      	str	r3, [r6, #20]
 800d2e2:	e7f0      	b.n	800d2c6 <USB_EPStartXfer+0x1e6>
      if ((uint32_t)ep->dma_addr != 0U)
 800d2e4:	690b      	ldr	r3, [r1, #16]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d1fa      	bne.n	800d2e0 <USB_EPStartXfer+0x200>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d2ea:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800d2ee:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d2f2:	6833      	ldr	r3, [r6, #0]
 800d2f4:	bf0c      	ite	eq
 800d2f6:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d2fa:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800d2fe:	6033      	str	r3, [r6, #0]
 800d300:	e7e4      	b.n	800d2cc <USB_EPStartXfer+0x1ec>
 800d302:	bf00      	nop
 800d304:	fff80000 	.word	0xfff80000
 800d308:	e007ffff 	.word	0xe007ffff
 800d30c:	1ff80000 	.word	0x1ff80000

0800d310 <USB_EP0StartXfer>:
{
 800d310:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800d312:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800d314:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800d316:	2c01      	cmp	r4, #1
 800d318:	d026      	beq.n	800d368 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d31a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800d31e:	4c57      	ldr	r4, [pc, #348]	; (800d47c <USB_EP0StartXfer+0x16c>)
 800d320:	f8d0 5b10 	ldr.w	r5, [r0, #2832]	; 0xb10
 800d324:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800d328:	402c      	ands	r4, r5
 800d32a:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d32c:	4c54      	ldr	r4, [pc, #336]	; (800d480 <USB_EP0StartXfer+0x170>)
 800d32e:	691d      	ldr	r5, [r3, #16]
 800d330:	402c      	ands	r4, r5
 800d332:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 800d334:	694c      	ldr	r4, [r1, #20]
 800d336:	b9a4      	cbnz	r4, 800d362 <USB_EP0StartXfer+0x52>
      if (ep->xfer_len > ep->maxpacket)
 800d338:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d33a:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d33c:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800d340:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d342:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800d346:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d348:	691d      	ldr	r5, [r3, #16]
 800d34a:	ea44 0405 	orr.w	r4, r4, r5
 800d34e:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800d350:	d049      	beq.n	800d3e6 <USB_EP0StartXfer+0xd6>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d352:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d356:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d35a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800d35e:	2000      	movs	r0, #0
 800d360:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ep->xfer_len = ep->maxpacket;
 800d362:	688c      	ldr	r4, [r1, #8]
 800d364:	614c      	str	r4, [r1, #20]
 800d366:	e7e8      	b.n	800d33a <USB_EP0StartXfer+0x2a>
    if (ep->xfer_len == 0U)
 800d368:	694c      	ldr	r4, [r1, #20]
 800d36a:	2c00      	cmp	r4, #0
 800d36c:	d040      	beq.n	800d3f0 <USB_EP0StartXfer+0xe0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d36e:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 800d372:	4f42      	ldr	r7, [pc, #264]	; (800d47c <USB_EP0StartXfer+0x16c>)
      if (ep->xfer_len > ep->maxpacket)
 800d374:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d378:	f8d5 c910 	ldr.w	ip, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d37c:	4e40      	ldr	r6, [pc, #256]	; (800d480 <USB_EP0StartXfer+0x170>)
      if (ep->xfer_len > ep->maxpacket)
 800d37e:	4574      	cmp	r4, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d380:	ea0c 0707 	and.w	r7, ip, r7
 800d384:	f505 6c10 	add.w	ip, r5, #2304	; 0x900
 800d388:	f8c5 7910 	str.w	r7, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d38c:	f8d5 7910 	ldr.w	r7, [r5, #2320]	; 0x910
 800d390:	ea06 0607 	and.w	r6, r6, r7
 800d394:	f8c5 6910 	str.w	r6, [r5, #2320]	; 0x910
      if (ep->xfer_len > ep->maxpacket)
 800d398:	d958      	bls.n	800d44c <USB_EP0StartXfer+0x13c>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d39a:	f8dc 4010 	ldr.w	r4, [ip, #16]
    if (dma == 1U)
 800d39e:	2a01      	cmp	r2, #1
        ep->xfer_len = ep->maxpacket;
 800d3a0:	f8c1 e014 	str.w	lr, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d3a4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800d3a8:	f8cc 4010 	str.w	r4, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d3ac:	f3ce 0412 	ubfx	r4, lr, #0, #19
 800d3b0:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800d3b4:	ea44 0406 	orr.w	r4, r4, r6
 800d3b8:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 800d3bc:	d03a      	beq.n	800d434 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d3be:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800d3c2:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800d3c6:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800d3ca:	f1be 0f00 	cmp.w	lr, #0
 800d3ce:	d0c6      	beq.n	800d35e <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d3d0:	f003 010f 	and.w	r1, r3, #15
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800d3da:	408b      	lsls	r3, r1
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 800d3e6:	68ca      	ldr	r2, [r1, #12]
 800d3e8:	2a00      	cmp	r2, #0
 800d3ea:	d0b2      	beq.n	800d352 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d3ec:	615a      	str	r2, [r3, #20]
 800d3ee:	e7b0      	b.n	800d352 <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d3f0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800d3f4:	4b22      	ldr	r3, [pc, #136]	; (800d480 <USB_EP0StartXfer+0x170>)
    if (dma == 1U)
 800d3f6:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d3f8:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
 800d3fc:	f500 6c10 	add.w	ip, r0, #2304	; 0x900
 800d400:	ea03 0304 	and.w	r3, r3, r4
 800d404:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d408:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800d40c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d410:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d414:	4b19      	ldr	r3, [pc, #100]	; (800d47c <USB_EP0StartXfer+0x16c>)
 800d416:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800d41a:	ea03 0304 	and.w	r3, r3, r4
 800d41e:	f8cc 3010 	str.w	r3, [ip, #16]
    if (dma == 1U)
 800d422:	d007      	beq.n	800d434 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d424:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d428:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d42c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800d430:	2000      	movs	r0, #0
 800d432:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800d434:	690b      	ldr	r3, [r1, #16]
 800d436:	b10b      	cbz	r3, 800d43c <USB_EP0StartXfer+0x12c>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d438:	f8cc 3014 	str.w	r3, [ip, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d43c:	f8dc 3000 	ldr.w	r3, [ip]
}
 800d440:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d442:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d446:	f8cc 3000 	str.w	r3, [ip]
}
 800d44a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d44c:	f8dc 6010 	ldr.w	r6, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d450:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800d454:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d456:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800d45a:	f8cc 6010 	str.w	r6, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d45e:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800d462:	ea44 0406 	orr.w	r4, r4, r6
 800d466:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 800d46a:	d0e3      	beq.n	800d434 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d46c:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800d470:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800d474:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800d478:	e7aa      	b.n	800d3d0 <USB_EP0StartXfer+0xc0>
 800d47a:	bf00      	nop
 800d47c:	fff80000 	.word	0xfff80000
 800d480:	e007ffff 	.word	0xe007ffff

0800d484 <USB_WritePacket>:
{
 800d484:	b410      	push	{r4}
 800d486:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800d48a:	b964      	cbnz	r4, 800d4a6 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 800d48c:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800d48e:	089b      	lsrs	r3, r3, #2
 800d490:	d009      	beq.n	800d4a6 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d492:	3201      	adds	r2, #1
 800d494:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d498:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800d49c:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800d4a0:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d4a2:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800d4a4:	d1fa      	bne.n	800d49c <USB_WritePacket+0x18>
}
 800d4a6:	2000      	movs	r0, #0
 800d4a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4ac:	4770      	bx	lr
 800d4ae:	bf00      	nop

0800d4b0 <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 800d4b0:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 800d4b4:	b570      	push	{r4, r5, r6, lr}
 800d4b6:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 800d4b8:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 800d4bc:	d01c      	beq.n	800d4f8 <USB_ReadPacket+0x48>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d4be:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 800d4c2:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d4c8:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 800d4cc:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d4ce:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 800d4d2:	d1f8      	bne.n	800d4c6 <USB_ReadPacket+0x16>
    pDest++;
 800d4d4:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 800d4d8:	b16e      	cbz	r6, 800d4f6 <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d4da:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
      remaining_bytes--;
 800d4de:	1e73      	subs	r3, r6, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d4e0:	682a      	ldr	r2, [r5, #0]
      remaining_bytes--;
 800d4e2:	b29b      	uxth	r3, r3
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d4e4:	7002      	strb	r2, [r0, #0]
    } while (remaining_bytes != 0U);
 800d4e6:	b12b      	cbz	r3, 800d4f4 <USB_ReadPacket+0x44>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d4e8:	0a11      	lsrs	r1, r2, #8
    } while (remaining_bytes != 0U);
 800d4ea:	2b01      	cmp	r3, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d4ec:	7041      	strb	r1, [r0, #1]
    } while (remaining_bytes != 0U);
 800d4ee:	d001      	beq.n	800d4f4 <USB_ReadPacket+0x44>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d4f0:	0c12      	lsrs	r2, r2, #16
 800d4f2:	7082      	strb	r2, [r0, #2]
      pDest++;
 800d4f4:	4430      	add	r0, r6
}
 800d4f6:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 800d4f8:	4608      	mov	r0, r1
 800d4fa:	e7ed      	b.n	800d4d8 <USB_ReadPacket+0x28>

0800d4fc <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800d4fc:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800d4fe:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800d500:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d502:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800d506:	d00c      	beq.n	800d522 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d508:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800d50c:	b10b      	cbz	r3, 800d512 <USB_EPSetStall+0x16>
 800d50e:	2a00      	cmp	r2, #0
 800d510:	da14      	bge.n	800d53c <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d512:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d516:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d51a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800d51e:	2000      	movs	r0, #0
 800d520:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d522:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800d526:	2a00      	cmp	r2, #0
 800d528:	db00      	blt.n	800d52c <USB_EPSetStall+0x30>
 800d52a:	b973      	cbnz	r3, 800d54a <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d52c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d530:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d534:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800d538:	2000      	movs	r0, #0
 800d53a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d53c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d540:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d544:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800d548:	e7e3      	b.n	800d512 <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d54a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d54e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d552:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d556:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d55a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d55e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800d562:	e7e9      	b.n	800d538 <USB_EPSetStall+0x3c>

0800d564 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 800d564:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800d566:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800d568:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d56a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800d56e:	d013      	beq.n	800d598 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d570:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d574:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d578:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d57c:	78cb      	ldrb	r3, [r1, #3]
 800d57e:	3b02      	subs	r3, #2
 800d580:	2b01      	cmp	r3, #1
 800d582:	d901      	bls.n	800d588 <USB_EPClearStall+0x24>
}
 800d584:	2000      	movs	r0, #0
 800d586:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d588:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d58c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d590:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800d594:	2000      	movs	r0, #0
 800d596:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d598:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d59c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d5a0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d5a4:	78cb      	ldrb	r3, [r1, #3]
 800d5a6:	3b02      	subs	r3, #2
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d8eb      	bhi.n	800d584 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d5ac:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d5b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5b4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800d5b8:	2000      	movs	r0, #0
 800d5ba:	4770      	bx	lr

0800d5bc <USB_SetDevAddress>:
{
 800d5bc:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d5be:	0109      	lsls	r1, r1, #4
}
 800d5c0:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d5c2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d5c6:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d5ca:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800d5ce:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d5d2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800d5d6:	4311      	orrs	r1, r2
 800d5d8:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800d5dc:	4770      	bx	lr
 800d5de:	bf00      	nop

0800d5e0 <USB_DevConnect>:
{
 800d5e0:	4603      	mov	r3, r0
}
 800d5e2:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d5e4:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d5e8:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d5ec:	f022 0203 	bic.w	r2, r2, #3
 800d5f0:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d5f4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800d5f8:	f023 0302 	bic.w	r3, r3, #2
 800d5fc:	604b      	str	r3, [r1, #4]
}
 800d5fe:	4770      	bx	lr

0800d600 <USB_DevDisconnect>:
{
 800d600:	4603      	mov	r3, r0
}
 800d602:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d604:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d608:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d60c:	f022 0203 	bic.w	r2, r2, #3
 800d610:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d614:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800d618:	f043 0302 	orr.w	r3, r3, #2
 800d61c:	604b      	str	r3, [r1, #4]
}
 800d61e:	4770      	bx	lr

0800d620 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800d620:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800d622:	6980      	ldr	r0, [r0, #24]
}
 800d624:	4010      	ands	r0, r2
 800d626:	4770      	bx	lr

0800d628 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800d628:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d62c:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 800d630:	4018      	ands	r0, r3
}
 800d632:	0c00      	lsrs	r0, r0, #16
 800d634:	4770      	bx	lr
 800d636:	bf00      	nop

0800d638 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800d638:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d63c:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 800d640:	4018      	ands	r0, r3
}
 800d642:	b280      	uxth	r0, r0
 800d644:	4770      	bx	lr
 800d646:	bf00      	nop

0800d648 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d648:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d64c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d650:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d654:	6940      	ldr	r0, [r0, #20]
}
 800d656:	4010      	ands	r0, r2
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop

0800d65c <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800d65c:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d660:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d664:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d668:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d66c:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d670:	40cb      	lsrs	r3, r1
 800d672:	01db      	lsls	r3, r3, #7
 800d674:	b2db      	uxtb	r3, r3
 800d676:	4313      	orrs	r3, r2
}
 800d678:	4018      	ands	r0, r3
 800d67a:	4770      	bx	lr

0800d67c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800d67c:	6940      	ldr	r0, [r0, #20]
}
 800d67e:	f000 0001 	and.w	r0, r0, #1
 800d682:	4770      	bx	lr

0800d684 <USB_ActivateSetup>:
{
 800d684:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d686:	4a09      	ldr	r2, [pc, #36]	; (800d6ac <USB_ActivateSetup+0x28>)
}
 800d688:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d68a:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 800d68e:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d690:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800d694:	4022      	ands	r2, r4
}
 800d696:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d69a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d69e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800d6a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6a6:	604b      	str	r3, [r1, #4]
}
 800d6a8:	4770      	bx	lr
 800d6aa:	bf00      	nop
 800d6ac:	fffff800 	.word	0xfffff800

0800d6b0 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d6b0:	4b14      	ldr	r3, [pc, #80]	; (800d704 <USB_EP0_OutStart+0x54>)
{
 800d6b2:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d6b4:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d6b6:	429c      	cmp	r4, r3
 800d6b8:	d81a      	bhi.n	800d6f0 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d6ba:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d6be:	2300      	movs	r3, #0
  if (dma == 1U)
 800d6c0:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d6c2:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d6c4:	6903      	ldr	r3, [r0, #16]
 800d6c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d6ca:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d6cc:	6903      	ldr	r3, [r0, #16]
 800d6ce:	f043 0318 	orr.w	r3, r3, #24
 800d6d2:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d6d4:	6903      	ldr	r3, [r0, #16]
 800d6d6:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d6da:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 800d6dc:	d104      	bne.n	800d6e8 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d6de:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d6e0:	6803      	ldr	r3, [r0, #0]
 800d6e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d6e6:	6003      	str	r3, [r0, #0]
}
 800d6e8:	2000      	movs	r0, #0
 800d6ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6ee:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d6f0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d6f4:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	dae0      	bge.n	800d6be <USB_EP0_OutStart+0xe>
}
 800d6fc:	2000      	movs	r0, #0
 800d6fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d702:	4770      	bx	lr
 800d704:	4f54300a 	.word	0x4f54300a

0800d708 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d708:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d70a:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800d70e:	b194      	cbz	r4, 800d736 <USBD_CDC_EP0_RxReady+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d710:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800d714:	b16b      	cbz	r3, 800d732 <USBD_CDC_EP0_RxReady+0x2a>
 800d716:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800d71a:	28ff      	cmp	r0, #255	; 0xff
 800d71c:	d009      	beq.n	800d732 <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	4621      	mov	r1, r4
 800d722:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800d726:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800d728:	23ff      	movs	r3, #255	; 0xff
  }

  return (uint8_t)USBD_OK;
 800d72a:	2000      	movs	r0, #0
    hcdc->CmdOpCode = 0xFFU;
 800d72c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
 800d730:	bd10      	pop	{r4, pc}
  return (uint8_t)USBD_OK;
 800d732:	2000      	movs	r0, #0
}
 800d734:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800d736:	2003      	movs	r0, #3
}
 800d738:	bd10      	pop	{r4, pc}
 800d73a:	bf00      	nop

0800d73c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d73c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d73e:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 800d740:	4801      	ldr	r0, [pc, #4]	; (800d748 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d742:	801a      	strh	r2, [r3, #0]
}
 800d744:	4770      	bx	lr
 800d746:	bf00      	nop
 800d748:	24000354 	.word	0x24000354

0800d74c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d74c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d74e:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 800d750:	4801      	ldr	r0, [pc, #4]	; (800d758 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d752:	801a      	strh	r2, [r3, #0]
}
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop
 800d758:	24000398 	.word	0x24000398

0800d75c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d75c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d75e:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800d760:	4801      	ldr	r0, [pc, #4]	; (800d768 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d762:	801a      	strh	r2, [r3, #0]
}
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop
 800d768:	240003e8 	.word	0x240003e8

0800d76c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d76c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d76e:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 800d770:	4801      	ldr	r0, [pc, #4]	; (800d778 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d772:	801a      	strh	r2, [r3, #0]
}
 800d774:	4770      	bx	lr
 800d776:	bf00      	nop
 800d778:	240003dc 	.word	0x240003dc

0800d77c <USBD_CDC_DataOut>:
{
 800d77c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d77e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800d782:	b17d      	cbz	r5, 800d7a4 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d784:	4604      	mov	r4, r0
 800d786:	f001 f91f 	bl	800e9c8 <USBD_LL_GetRxDataSize>
 800d78a:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d78c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800d790:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800d794:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800d798:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d79a:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d79e:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800d7a0:	2000      	movs	r0, #0
}
 800d7a2:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800d7a4:	2003      	movs	r0, #3
}
 800d7a6:	bd38      	pop	{r3, r4, r5, pc}

0800d7a8 <USBD_CDC_DataIn>:
{
 800d7a8:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 800d7aa:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 800d7ae:	b36d      	cbz	r5, 800d80c <USBD_CDC_DataIn+0x64>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d7b0:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 800d7b4:	4684      	mov	ip, r0
 800d7b6:	460a      	mov	r2, r1
 800d7b8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800d7bc:	f8de 3018 	ldr.w	r3, [lr, #24]
 800d7c0:	b96b      	cbnz	r3, 800d7de <USBD_CDC_DataIn+0x36>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d7c2:	f8dc 32c0 	ldr.w	r3, [ip, #704]	; 0x2c0
    hcdc->TxState = 0U;
 800d7c6:	2400      	movs	r4, #0
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d7c8:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800d7ca:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d7ce:	b1db      	cbz	r3, 800d808 <USBD_CDC_DataIn+0x60>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d7d0:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800d7d4:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 800d7d8:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800d7da:	4620      	mov	r0, r4
}
 800d7dc:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d7de:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 800d7e2:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800d7e6:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800d7ea:	6c64      	ldr	r4, [r4, #68]	; 0x44
 800d7ec:	fbb3 f6f4 	udiv	r6, r3, r4
 800d7f0:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d7f4:	2c00      	cmp	r4, #0
 800d7f6:	d1e4      	bne.n	800d7c2 <USBD_CDC_DataIn+0x1a>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d7f8:	4623      	mov	r3, r4
 800d7fa:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 800d7fc:	f8ce 4018 	str.w	r4, [lr, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d800:	f001 f8c6 	bl	800e990 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800d804:	4620      	mov	r0, r4
}
 800d806:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 800d808:	4618      	mov	r0, r3
}
 800d80a:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 800d80c:	2003      	movs	r0, #3
}
 800d80e:	bd70      	pop	{r4, r5, r6, pc}

0800d810 <USBD_CDC_Setup>:
{
 800d810:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t ifalt = 0U;
 800d812:	2300      	movs	r3, #0
{
 800d814:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d816:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800d81a:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 800d81e:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hcdc == NULL)
 800d822:	2d00      	cmp	r5, #0
 800d824:	d067      	beq.n	800d8f6 <USBD_CDC_Setup+0xe6>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d826:	f891 c000 	ldrb.w	ip, [r1]
 800d82a:	4606      	mov	r6, r0
 800d82c:	460c      	mov	r4, r1
 800d82e:	f01c 0760 	ands.w	r7, ip, #96	; 0x60
 800d832:	d01e      	beq.n	800d872 <USBD_CDC_Setup+0x62>
 800d834:	2f20      	cmp	r7, #32
 800d836:	d007      	beq.n	800d848 <USBD_CDC_Setup+0x38>
          USBD_CtlError(pdev, req);
 800d838:	4621      	mov	r1, r4
 800d83a:	4630      	mov	r0, r6
          ret = USBD_FAIL;
 800d83c:	2703      	movs	r7, #3
          USBD_CtlError(pdev, req);
 800d83e:	f000 fd45 	bl	800e2cc <USBD_CtlError>
}
 800d842:	4638      	mov	r0, r7
 800d844:	b003      	add	sp, #12
 800d846:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (req->wLength != 0U)
 800d848:	88ca      	ldrh	r2, [r1, #6]
 800d84a:	b38a      	cbz	r2, 800d8b0 <USBD_CDC_Setup+0xa0>
        if ((req->bmRequest & 0x80U) != 0U)
 800d84c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800d850:	d055      	beq.n	800d8fe <USBD_CDC_Setup+0xee>
  USBD_StatusTypeDef ret = USBD_OK;
 800d852:	461f      	mov	r7, r3
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d854:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800d858:	4629      	mov	r1, r5
 800d85a:	7860      	ldrb	r0, [r4, #1]
 800d85c:	689b      	ldr	r3, [r3, #8]
 800d85e:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d860:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d862:	4629      	mov	r1, r5
 800d864:	4630      	mov	r0, r6
 800d866:	2a07      	cmp	r2, #7
 800d868:	bf28      	it	cs
 800d86a:	2207      	movcs	r2, #7
 800d86c:	f000 fd64 	bl	800e338 <USBD_CtlSendData>
 800d870:	e7e7      	b.n	800d842 <USBD_CDC_Setup+0x32>
      switch (req->bRequest)
 800d872:	784b      	ldrb	r3, [r1, #1]
 800d874:	2b0b      	cmp	r3, #11
 800d876:	d8df      	bhi.n	800d838 <USBD_CDC_Setup+0x28>
 800d878:	a201      	add	r2, pc, #4	; (adr r2, 800d880 <USBD_CDC_Setup+0x70>)
 800d87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d87e:	bf00      	nop
 800d880:	0800d8e1 	.word	0x0800d8e1
 800d884:	0800d843 	.word	0x0800d843
 800d888:	0800d839 	.word	0x0800d839
 800d88c:	0800d839 	.word	0x0800d839
 800d890:	0800d839 	.word	0x0800d839
 800d894:	0800d839 	.word	0x0800d839
 800d898:	0800d839 	.word	0x0800d839
 800d89c:	0800d839 	.word	0x0800d839
 800d8a0:	0800d839 	.word	0x0800d839
 800d8a4:	0800d839 	.word	0x0800d839
 800d8a8:	0800d8cd 	.word	0x0800d8cd
 800d8ac:	0800d8c3 	.word	0x0800d8c3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d8b0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 800d8b4:	4617      	mov	r7, r2
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d8b6:	7848      	ldrb	r0, [r1, #1]
 800d8b8:	689b      	ldr	r3, [r3, #8]
 800d8ba:	4798      	blx	r3
}
 800d8bc:	4638      	mov	r0, r7
 800d8be:	b003      	add	sp, #12
 800d8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d8c2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800d8c6:	2b03      	cmp	r3, #3
 800d8c8:	d0bb      	beq.n	800d842 <USBD_CDC_Setup+0x32>
 800d8ca:	e7b5      	b.n	800d838 <USBD_CDC_Setup+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8cc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800d8d0:	2b03      	cmp	r3, #3
 800d8d2:	d1b1      	bne.n	800d838 <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	f10d 0105 	add.w	r1, sp, #5
 800d8da:	f000 fd2d 	bl	800e338 <USBD_CtlSendData>
 800d8de:	e7b0      	b.n	800d842 <USBD_CDC_Setup+0x32>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8e0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800d8e4:	2a03      	cmp	r2, #3
 800d8e6:	d1a7      	bne.n	800d838 <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d8e8:	2202      	movs	r2, #2
 800d8ea:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 800d8ee:	461f      	mov	r7, r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d8f0:	f000 fd22 	bl	800e338 <USBD_CtlSendData>
 800d8f4:	e7a5      	b.n	800d842 <USBD_CDC_Setup+0x32>
    return (uint8_t)USBD_FAIL;
 800d8f6:	2703      	movs	r7, #3
}
 800d8f8:	4638      	mov	r0, r7
 800d8fa:	b003      	add	sp, #12
 800d8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hcdc->CmdOpCode = req->bRequest;
 800d8fe:	7849      	ldrb	r1, [r1, #1]
  USBD_StatusTypeDef ret = USBD_OK;
 800d900:	461f      	mov	r7, r3
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d902:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
          hcdc->CmdOpCode = req->bRequest;
 800d906:	f885 1200 	strb.w	r1, [r5, #512]	; 0x200
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d90a:	4629      	mov	r1, r5
 800d90c:	f000 fd2c 	bl	800e368 <USBD_CtlPrepareRx>
 800d910:	e797      	b.n	800d842 <USBD_CDC_Setup+0x32>
 800d912:	bf00      	nop

0800d914 <USBD_CDC_DeInit>:
{
 800d914:	b538      	push	{r3, r4, r5, lr}
 800d916:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d918:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d91a:	2181      	movs	r1, #129	; 0x81
 800d91c:	f000 ffec 	bl	800e8f8 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d920:	2101      	movs	r1, #1
 800d922:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d924:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d926:	f000 ffe7 	bl	800e8f8 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d92a:	2182      	movs	r1, #130	; 0x82
 800d92c:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d92e:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d932:	f000 ffe1 	bl	800e8f8 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800d936:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d93a:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800d93c:	b14b      	cbz	r3, 800d952 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d93e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d946:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800d94a:	f001 f845 	bl	800e9d8 <USBD_static_free>
    pdev->pClassData = NULL;
 800d94e:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800d952:	2000      	movs	r0, #0
 800d954:	bd38      	pop	{r3, r4, r5, pc}
 800d956:	bf00      	nop

0800d958 <USBD_CDC_Init>:
{
 800d958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d95c:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d95e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d962:	f001 f835 	bl	800e9d0 <USBD_static_malloc>
  if (hcdc == NULL)
 800d966:	4605      	mov	r5, r0
 800d968:	2800      	cmp	r0, #0
 800d96a:	d04c      	beq.n	800da06 <USBD_CDC_Init+0xae>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d96c:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 800d96e:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d972:	b393      	cbz	r3, 800d9da <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d974:	2340      	movs	r3, #64	; 0x40
 800d976:	2202      	movs	r2, #2
 800d978:	2181      	movs	r1, #129	; 0x81
 800d97a:	4620      	mov	r0, r4
 800d97c:	f000 ffaa 	bl	800e8d4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d980:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d982:	2340      	movs	r3, #64	; 0x40
 800d984:	4631      	mov	r1, r6
 800d986:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d988:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d98a:	4620      	mov	r0, r4
 800d98c:	f000 ffa2 	bl	800e8d4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d990:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d992:	2203      	movs	r2, #3
 800d994:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d996:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d99a:	4620      	mov	r0, r4
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d99c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d9a0:	2308      	movs	r3, #8
 800d9a2:	f000 ff97 	bl	800e8d4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d9a6:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d9aa:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 800d9ae:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d9b0:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	4798      	blx	r3
  hcdc->TxState = 0U;
 800d9b8:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800d9bc:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9c0:	7c26      	ldrb	r6, [r4, #16]
 800d9c2:	b9ae      	cbnz	r6, 800d9f0 <USBD_CDC_Init+0x98>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d9c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9c8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800d9cc:	4641      	mov	r1, r8
 800d9ce:	4620      	mov	r0, r4
 800d9d0:	f000 ffec 	bl	800e9ac <USBD_LL_PrepareReceive>
}
 800d9d4:	4630      	mov	r0, r6
 800d9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d9da:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9de:	2202      	movs	r2, #2
 800d9e0:	2181      	movs	r1, #129	; 0x81
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	f000 ff76 	bl	800e8d4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d9e8:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d9ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9ee:	e7c9      	b.n	800d984 <USBD_CDC_Init+0x2c>
  return (uint8_t)USBD_OK;
 800d9f0:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d9f2:	2340      	movs	r3, #64	; 0x40
 800d9f4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800d9f8:	4641      	mov	r1, r8
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	f000 ffd6 	bl	800e9ac <USBD_LL_PrepareReceive>
}
 800da00:	4630      	mov	r0, r6
 800da02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 800da06:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 800da08:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
}
 800da0c:	4630      	mov	r0, r6
 800da0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da12:	bf00      	nop

0800da14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800da14:	4603      	mov	r3, r0
  if (fops == NULL)
 800da16:	b119      	cbz	r1, 800da20 <USBD_CDC_RegisterInterface+0xc>
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;

  return (uint8_t)USBD_OK;
 800da18:	2000      	movs	r0, #0
  pdev->pUserData = fops;
 800da1a:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
  return (uint8_t)USBD_OK;
 800da1e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800da20:	2003      	movs	r0, #3
}
 800da22:	4770      	bx	lr

0800da24 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da24:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800da28:	b12b      	cbz	r3, 800da36 <USBD_CDC_SetTxBuffer+0x12>
  }

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
 800da2a:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800da2c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800da30:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  return (uint8_t)USBD_OK;
 800da34:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800da36:	2003      	movs	r0, #3
}
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop

0800da3c <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da3c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800da40:	b11b      	cbz	r3, 800da4a <USBD_CDC_SetRxBuffer+0xe>
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
 800da42:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800da44:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  return (uint8_t)USBD_OK;
 800da48:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800da4a:	2003      	movs	r0, #3
}
 800da4c:	4770      	bx	lr
 800da4e:	bf00      	nop

0800da50 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da50:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800da54:	b192      	cbz	r2, 800da7c <USBD_CDC_TransmitPacket+0x2c>
{
 800da56:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800da58:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800da5c:	b10c      	cbz	r4, 800da62 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800da5e:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800da60:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 800da62:	2301      	movs	r3, #1
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800da64:	2181      	movs	r1, #129	; 0x81
    hcdc->TxState = 1U;
 800da66:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800da6a:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800da6e:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800da72:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800da74:	f000 ff8c 	bl	800e990 <USBD_LL_Transmit>
    ret = USBD_OK;
 800da78:	4620      	mov	r0, r4
}
 800da7a:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800da7c:	2003      	movs	r0, #3
}
 800da7e:	4770      	bx	lr

0800da80 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da80:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800da84:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800da86:	b19a      	cbz	r2, 800dab0 <USBD_CDC_ReceivePacket+0x30>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da88:	7c04      	ldrb	r4, [r0, #16]
 800da8a:	b144      	cbz	r4, 800da9e <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800da8c:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800da8e:	2340      	movs	r3, #64	; 0x40
 800da90:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800da94:	2101      	movs	r1, #1
 800da96:	f000 ff89 	bl	800e9ac <USBD_LL_PrepareReceive>
}
 800da9a:	4620      	mov	r0, r4
 800da9c:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800da9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800daa2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800daa6:	2101      	movs	r1, #1
 800daa8:	f000 ff80 	bl	800e9ac <USBD_LL_PrepareReceive>
}
 800daac:	4620      	mov	r0, r4
 800daae:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800dab0:	2403      	movs	r4, #3
}
 800dab2:	4620      	mov	r0, r4
 800dab4:	bd10      	pop	{r4, pc}
 800dab6:	bf00      	nop

0800dab8 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dab8:	b178      	cbz	r0, 800dada <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800daba:	2300      	movs	r3, #0
 800dabc:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800dac0:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800dac4:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dac8:	b109      	cbz	r1, 800dace <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800daca:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dace:	2301      	movs	r3, #1
  pdev->id = id;
 800dad0:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dad2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dad6:	f000 beaf 	b.w	800e838 <USBD_LL_Init>

  return ret;
}
 800dada:	2003      	movs	r0, #3
 800dadc:	4770      	bx	lr
 800dade:	bf00      	nop

0800dae0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dae0:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 800dae2:	2400      	movs	r4, #0
{
 800dae4:	b083      	sub	sp, #12
  uint16_t len = 0U;
 800dae6:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800daea:	b181      	cbz	r1, 800db0e <USBD_RegisterClass+0x2e>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800daec:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800daee:	4605      	mov	r5, r0
  pdev->pClass = pclass;
 800daf0:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800daf4:	b143      	cbz	r3, 800db08 <USBD_RegisterClass+0x28>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800daf6:	f10d 0006 	add.w	r0, sp, #6
 800dafa:	4798      	blx	r3
 800dafc:	4603      	mov	r3, r0
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800dafe:	4620      	mov	r0, r4
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800db00:	f8c5 32cc 	str.w	r3, [r5, #716]	; 0x2cc
}
 800db04:	b003      	add	sp, #12
 800db06:	bd30      	pop	{r4, r5, pc}
  return USBD_OK;
 800db08:	4618      	mov	r0, r3
}
 800db0a:	b003      	add	sp, #12
 800db0c:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800db0e:	2003      	movs	r0, #3
}
 800db10:	b003      	add	sp, #12
 800db12:	bd30      	pop	{r4, r5, pc}

0800db14 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800db14:	f000 bed0 	b.w	800e8b8 <USBD_LL_Start>

0800db18 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800db18:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800db1c:	b10b      	cbz	r3, 800db22 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4718      	bx	r3
  }

  return ret;
}
 800db22:	2003      	movs	r0, #3
 800db24:	4770      	bx	lr
 800db26:	bf00      	nop

0800db28 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db28:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800db2a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800db2e:	b10b      	cbz	r3, 800db34 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	4798      	blx	r3
  }

  return USBD_OK;
}
 800db34:	2000      	movs	r0, #0
 800db36:	bd08      	pop	{r3, pc}

0800db38 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800db38:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800db3a:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800db3e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800db40:	4628      	mov	r0, r5
 800db42:	f000 fbb7 	bl	800e2b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;
 800db46:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 800db4a:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800db4e:	2201      	movs	r2, #1
  pdev->ep0_data_len = pdev->request.wLength;
 800db50:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 800db54:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 800db58:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d009      	beq.n	800db74 <USBD_LL_SetupStage+0x3c>
 800db60:	2b02      	cmp	r3, #2
 800db62:	d013      	beq.n	800db8c <USBD_LL_SetupStage+0x54>
 800db64:	b163      	cbz	r3, 800db80 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800db66:	4620      	mov	r0, r4
 800db68:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800db6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800db70:	f000 bed0 	b.w	800e914 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800db74:	4629      	mov	r1, r5
 800db76:	4620      	mov	r0, r4
}
 800db78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800db7c:	f000 bac6 	b.w	800e10c <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800db80:	4629      	mov	r1, r5
 800db82:	4620      	mov	r0, r4
}
 800db84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800db88:	f000 b92a 	b.w	800dde0 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800db8c:	4629      	mov	r1, r5
 800db8e:	4620      	mov	r0, r4
}
 800db90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800db94:	f000 baf2 	b.w	800e17c <USBD_StdEPReq>

0800db98 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800db98:	b570      	push	{r4, r5, r6, lr}
 800db9a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800db9c:	b929      	cbnz	r1, 800dbaa <USBD_LL_DataOutStage+0x12>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800db9e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800dba2:	2b03      	cmp	r3, #3
 800dba4:	d00d      	beq.n	800dbc2 <USBD_LL_DataOutStage+0x2a>
      }
    }
  }

  return USBD_OK;
}
 800dba6:	2000      	movs	r0, #0
 800dba8:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbaa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dbae:	2b03      	cmp	r3, #3
 800dbb0:	d1f9      	bne.n	800dba6 <USBD_LL_DataOutStage+0xe>
      if (pdev->pClass->DataOut != NULL)
 800dbb2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dbb6:	699b      	ldr	r3, [r3, #24]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d0f4      	beq.n	800dba6 <USBD_LL_DataOutStage+0xe>
}
 800dbbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800dbc0:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800dbc2:	e9d0 3557 	ldrd	r3, r5, [r0, #348]	; 0x15c
 800dbc6:	42ab      	cmp	r3, r5
 800dbc8:	d808      	bhi.n	800dbdc <USBD_LL_DataOutStage+0x44>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dbce:	2b03      	cmp	r3, #3
 800dbd0:	d00f      	beq.n	800dbf2 <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f000 fbe0 	bl	800e398 <USBD_CtlSendStatus>
}
 800dbd8:	2000      	movs	r0, #0
 800dbda:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800dbdc:	1b5b      	subs	r3, r3, r5
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dbde:	4611      	mov	r1, r2
 800dbe0:	462a      	mov	r2, r5
 800dbe2:	429d      	cmp	r5, r3
        pep->rem_length -= pep->maxpacket;
 800dbe4:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dbe8:	bf28      	it	cs
 800dbea:	461a      	movcs	r2, r3
 800dbec:	f000 fbca 	bl	800e384 <USBD_CtlContinueRx>
 800dbf0:	e7d9      	b.n	800dba6 <USBD_LL_DataOutStage+0xe>
          if (pdev->pClass->EP0_RxReady != NULL)
 800dbf2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dbf6:	691b      	ldr	r3, [r3, #16]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d0ea      	beq.n	800dbd2 <USBD_LL_DataOutStage+0x3a>
            pdev->pClass->EP0_RxReady(pdev);
 800dbfc:	4798      	blx	r3
 800dbfe:	e7e8      	b.n	800dbd2 <USBD_LL_DataOutStage+0x3a>

0800dc00 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dc00:	b570      	push	{r4, r5, r6, lr}
 800dc02:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dc04:	b949      	cbnz	r1, 800dc1a <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dc06:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800dc0a:	2b02      	cmp	r3, #2
 800dc0c:	d011      	beq.n	800dc32 <USBD_LL_DataInStage+0x32>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800dc0e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d022      	beq.n	800dc5c <USBD_LL_DataInStage+0x5c>
      }
    }
  }

  return USBD_OK;
}
 800dc16:	2000      	movs	r0, #0
 800dc18:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc1a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dc1e:	2b03      	cmp	r3, #3
 800dc20:	d1f9      	bne.n	800dc16 <USBD_LL_DataInStage+0x16>
      if (pdev->pClass->DataIn != NULL)
 800dc22:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dc26:	695b      	ldr	r3, [r3, #20]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d0f4      	beq.n	800dc16 <USBD_LL_DataInStage+0x16>
}
 800dc2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800dc30:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800dc32:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 800dc36:	460d      	mov	r5, r1
 800dc38:	42b3      	cmp	r3, r6
 800dc3a:	d814      	bhi.n	800dc66 <USBD_LL_DataInStage+0x66>
        if ((pep->maxpacket == pep->rem_length) &&
 800dc3c:	d020      	beq.n	800dc80 <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc3e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800dc42:	2b03      	cmp	r3, #3
 800dc44:	d02f      	beq.n	800dca6 <USBD_LL_DataInStage+0xa6>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc46:	2180      	movs	r1, #128	; 0x80
 800dc48:	4620      	mov	r0, r4
 800dc4a:	f000 fe63 	bl	800e914 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f000 fbae 	bl	800e3b0 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800dc54:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d1dc      	bne.n	800dc16 <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 800dc5c:	2300      	movs	r3, #0
}
 800dc5e:	2000      	movs	r0, #0
      pdev->dev_test_mode = 0U;
 800dc60:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 800dc64:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800dc66:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dc68:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800dc6a:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	f000 fb71 	bl	800e354 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc72:	462b      	mov	r3, r5
 800dc74:	462a      	mov	r2, r5
 800dc76:	4629      	mov	r1, r5
 800dc78:	4620      	mov	r0, r4
 800dc7a:	f000 fe97 	bl	800e9ac <USBD_LL_PrepareReceive>
 800dc7e:	e7c6      	b.n	800dc0e <USBD_LL_DataInStage+0xe>
            (pep->total_length >= pep->maxpacket) &&
 800dc80:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d8db      	bhi.n	800dc3e <USBD_LL_DataInStage+0x3e>
            (pep->total_length >= pep->maxpacket) &&
 800dc86:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d2d7      	bcs.n	800dc3e <USBD_LL_DataInStage+0x3e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dc8e:	460a      	mov	r2, r1
 800dc90:	f000 fb60 	bl	800e354 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc94:	462b      	mov	r3, r5
 800dc96:	462a      	mov	r2, r5
 800dc98:	4629      	mov	r1, r5
 800dc9a:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 800dc9c:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dca0:	f000 fe84 	bl	800e9ac <USBD_LL_PrepareReceive>
 800dca4:	e7b3      	b.n	800dc0e <USBD_LL_DataInStage+0xe>
            if (pdev->pClass->EP0_TxSent != NULL)
 800dca6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d0ca      	beq.n	800dc46 <USBD_LL_DataInStage+0x46>
              pdev->pClass->EP0_TxSent(pdev);
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	4798      	blx	r3
 800dcb4:	e7c7      	b.n	800dc46 <USBD_LL_DataInStage+0x46>
 800dcb6:	bf00      	nop

0800dcb8 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800dcb8:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dcba:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 800dcbc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dcc0:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 800dcc4:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800dcc6:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 800dcca:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 800dcce:	b1eb      	cbz	r3, 800dd0c <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800dcd0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800dcd4:	b570      	push	{r4, r5, r6, lr}
 800dcd6:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 800dcd8:	b112      	cbz	r2, 800dce0 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	b103      	cbz	r3, 800dce0 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dcde:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dce0:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dce2:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dce4:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dce6:	4620      	mov	r0, r4
 800dce8:	462b      	mov	r3, r5
 800dcea:	4611      	mov	r1, r2
 800dcec:	f000 fdf2 	bl	800e8d4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dcf0:	462b      	mov	r3, r5
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	2180      	movs	r1, #128	; 0x80
 800dcf6:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dcf8:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dcfc:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd00:	f000 fde8 	bl	800e8d4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
 800dd04:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dd06:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd08:	6225      	str	r5, [r4, #32]
}
 800dd0a:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800dd0c:	2003      	movs	r0, #3
}
 800dd0e:	4770      	bx	lr

0800dd10 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dd10:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 800dd12:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800dd14:	7419      	strb	r1, [r3, #16]
}
 800dd16:	4770      	bx	lr

0800dd18 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dd18:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dd1a:	2104      	movs	r1, #4

  return USBD_OK;
}
 800dd1c:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 800dd1e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800dd22:	b2d2      	uxtb	r2, r2
 800dd24:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dd28:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 800dd2c:	4770      	bx	lr
 800dd2e:	bf00      	nop

0800dd30 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dd30:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dd34:	2b04      	cmp	r3, #4
 800dd36:	d104      	bne.n	800dd42 <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dd38:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800dd42:	2000      	movs	r0, #0
 800dd44:	4770      	bx	lr
 800dd46:	bf00      	nop

0800dd48 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800dd48:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800dd4c:	b15a      	cbz	r2, 800dd66 <USBD_LL_SOF+0x1e>
{
 800dd4e:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd50:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dd54:	2b03      	cmp	r3, #3
 800dd56:	d001      	beq.n	800dd5c <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800dd58:	2000      	movs	r0, #0
}
 800dd5a:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800dd5c:	69d3      	ldr	r3, [r2, #28]
 800dd5e:	b123      	cbz	r3, 800dd6a <USBD_LL_SOF+0x22>
      (void)pdev->pClass->SOF(pdev);
 800dd60:	4798      	blx	r3
  return USBD_OK;
 800dd62:	2000      	movs	r0, #0
}
 800dd64:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800dd66:	2003      	movs	r0, #3
}
 800dd68:	4770      	bx	lr
  return USBD_OK;
 800dd6a:	4618      	mov	r0, r3
}
 800dd6c:	bd08      	pop	{r3, pc}
 800dd6e:	bf00      	nop

0800dd70 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800dd70:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800dd74:	b15a      	cbz	r2, 800dd8e <USBD_LL_IsoINIncomplete+0x1e>
{
 800dd76:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd78:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dd7c:	2b03      	cmp	r3, #3
 800dd7e:	d001      	beq.n	800dd84 <USBD_LL_IsoINIncomplete+0x14>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800dd80:	2000      	movs	r0, #0
}
 800dd82:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800dd84:	6a13      	ldr	r3, [r2, #32]
 800dd86:	b123      	cbz	r3, 800dd92 <USBD_LL_IsoINIncomplete+0x22>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800dd88:	4798      	blx	r3
  return USBD_OK;
 800dd8a:	2000      	movs	r0, #0
}
 800dd8c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800dd8e:	2003      	movs	r0, #3
}
 800dd90:	4770      	bx	lr
  return USBD_OK;
 800dd92:	4618      	mov	r0, r3
}
 800dd94:	bd08      	pop	{r3, pc}
 800dd96:	bf00      	nop

0800dd98 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800dd98:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800dd9c:	b15a      	cbz	r2, 800ddb6 <USBD_LL_IsoOUTIncomplete+0x1e>
{
 800dd9e:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dda0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dda4:	2b03      	cmp	r3, #3
 800dda6:	d001      	beq.n	800ddac <USBD_LL_IsoOUTIncomplete+0x14>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800dda8:	2000      	movs	r0, #0
}
 800ddaa:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ddac:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800ddae:	b123      	cbz	r3, 800ddba <USBD_LL_IsoOUTIncomplete+0x22>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ddb0:	4798      	blx	r3
  return USBD_OK;
 800ddb2:	2000      	movs	r0, #0
}
 800ddb4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800ddb6:	2003      	movs	r0, #3
}
 800ddb8:	4770      	bx	lr
  return USBD_OK;
 800ddba:	4618      	mov	r0, r3
}
 800ddbc:	bd08      	pop	{r3, pc}
 800ddbe:	bf00      	nop

0800ddc0 <USBD_LL_DevConnected>:
 800ddc0:	2000      	movs	r0, #0
 800ddc2:	4770      	bx	lr

0800ddc4 <USBD_LL_DevDisconnected>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ddc4:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 800ddc6:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ddca:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 800ddce:	b12a      	cbz	r2, 800dddc <USBD_LL_DevDisconnected+0x18>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ddd0:	6852      	ldr	r2, [r2, #4]
 800ddd2:	7901      	ldrb	r1, [r0, #4]
{
 800ddd4:	b508      	push	{r3, lr}
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ddd6:	4790      	blx	r2
  }

  return USBD_OK;
}
 800ddd8:	2000      	movs	r0, #0
 800ddda:	bd08      	pop	{r3, pc}
 800dddc:	2000      	movs	r0, #0
 800ddde:	4770      	bx	lr

0800dde0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dde0:	b570      	push	{r4, r5, r6, lr}
 800dde2:	780c      	ldrb	r4, [r1, #0]
 800dde4:	b082      	sub	sp, #8
 800dde6:	460e      	mov	r6, r1
 800dde8:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ddea:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800ddee:	2c20      	cmp	r4, #32
 800ddf0:	d00e      	beq.n	800de10 <USBD_StdDevReq+0x30>
 800ddf2:	2c40      	cmp	r4, #64	; 0x40
 800ddf4:	d00c      	beq.n	800de10 <USBD_StdDevReq+0x30>
 800ddf6:	b1a4      	cbz	r4, 800de22 <USBD_StdDevReq+0x42>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddf8:	2180      	movs	r1, #128	; 0x80
 800ddfa:	4628      	mov	r0, r5
 800ddfc:	f000 fd8a 	bl	800e914 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800de00:	2100      	movs	r1, #0
 800de02:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800de04:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800de06:	f000 fd85 	bl	800e914 <USBD_LL_StallEP>
}
 800de0a:	4620      	mov	r0, r4
 800de0c:	b002      	add	sp, #8
 800de0e:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800de10:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800de14:	4631      	mov	r1, r6
 800de16:	4628      	mov	r0, r5
 800de18:	689b      	ldr	r3, [r3, #8]
}
 800de1a:	b002      	add	sp, #8
 800de1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800de20:	4718      	bx	r3
      switch (req->bRequest)
 800de22:	784b      	ldrb	r3, [r1, #1]
 800de24:	2b09      	cmp	r3, #9
 800de26:	d8e7      	bhi.n	800ddf8 <USBD_StdDevReq+0x18>
 800de28:	a201      	add	r2, pc, #4	; (adr r2, 800de30 <USBD_StdDevReq+0x50>)
 800de2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de2e:	bf00      	nop
 800de30:	0800de91 	.word	0x0800de91
 800de34:	0800debf 	.word	0x0800debf
 800de38:	0800ddf9 	.word	0x0800ddf9
 800de3c:	0800dedd 	.word	0x0800dedd
 800de40:	0800ddf9 	.word	0x0800ddf9
 800de44:	0800dee5 	.word	0x0800dee5
 800de48:	0800df1d 	.word	0x0800df1d
 800de4c:	0800ddf9 	.word	0x0800ddf9
 800de50:	0800df39 	.word	0x0800df39
 800de54:	0800de59 	.word	0x0800de59
  cfgidx = (uint8_t)(req->wValue);
 800de58:	7889      	ldrb	r1, [r1, #2]
 800de5a:	4eab      	ldr	r6, [pc, #684]	; (800e108 <USBD_StdDevReq+0x328>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800de5c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800de5e:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800de60:	f200 8140 	bhi.w	800e0e4 <USBD_StdDevReq+0x304>
  switch (pdev->dev_state)
 800de64:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800de68:	2b02      	cmp	r3, #2
 800de6a:	b2da      	uxtb	r2, r3
 800de6c:	f000 8129 	beq.w	800e0c2 <USBD_StdDevReq+0x2e2>
 800de70:	2a03      	cmp	r2, #3
 800de72:	f000 8105 	beq.w	800e080 <USBD_StdDevReq+0x2a0>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800de76:	2180      	movs	r1, #128	; 0x80
      ret = USBD_FAIL;
 800de78:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800de7a:	f000 fd4b 	bl	800e914 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800de7e:	2100      	movs	r1, #0
 800de80:	4628      	mov	r0, r5
 800de82:	f000 fd47 	bl	800e914 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800de86:	7831      	ldrb	r1, [r6, #0]
 800de88:	4628      	mov	r0, r5
 800de8a:	f7ff fe4d 	bl	800db28 <USBD_ClrClassConfig>
      break;
 800de8e:	e7bc      	b.n	800de0a <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800de90:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800de94:	3a01      	subs	r2, #1
 800de96:	2a02      	cmp	r2, #2
 800de98:	d866      	bhi.n	800df68 <USBD_StdDevReq+0x188>
      if (req->wLength != 0x2U)
 800de9a:	88ca      	ldrh	r2, [r1, #6]
 800de9c:	2a02      	cmp	r2, #2
 800de9e:	d163      	bne.n	800df68 <USBD_StdDevReq+0x188>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dea0:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup != 0U)
 800dea2:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dea6:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800dea8:	b10a      	cbz	r2, 800deae <USBD_StdDevReq+0xce>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800deaa:	2203      	movs	r2, #3
 800deac:	60c2      	str	r2, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800deae:	2202      	movs	r2, #2
 800deb0:	f105 010c 	add.w	r1, r5, #12
 800deb4:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800deb6:	461c      	mov	r4, r3
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800deb8:	f000 fa3e 	bl	800e338 <USBD_CtlSendData>
      break;
 800debc:	e7a5      	b.n	800de0a <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800debe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dec2:	3b01      	subs	r3, #1
 800dec4:	2b02      	cmp	r3, #2
 800dec6:	d84f      	bhi.n	800df68 <USBD_StdDevReq+0x188>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dec8:	884b      	ldrh	r3, [r1, #2]
 800deca:	2b01      	cmp	r3, #1
 800decc:	d19d      	bne.n	800de0a <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800dece:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 800ded0:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 800ded2:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ded6:	f000 fa5f 	bl	800e398 <USBD_CtlSendStatus>
 800deda:	e796      	b.n	800de0a <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dedc:	884b      	ldrh	r3, [r1, #2]
 800dede:	2b01      	cmp	r3, #1
 800dee0:	d193      	bne.n	800de0a <USBD_StdDevReq+0x2a>
 800dee2:	e7f5      	b.n	800ded0 <USBD_StdDevReq+0xf0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dee4:	888b      	ldrh	r3, [r1, #4]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d13e      	bne.n	800df68 <USBD_StdDevReq+0x188>
 800deea:	88cb      	ldrh	r3, [r1, #6]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d13b      	bne.n	800df68 <USBD_StdDevReq+0x188>
 800def0:	884e      	ldrh	r6, [r1, #2]
 800def2:	2e7f      	cmp	r6, #127	; 0x7f
 800def4:	d838      	bhi.n	800df68 <USBD_StdDevReq+0x188>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800def6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800defa:	2b03      	cmp	r3, #3
 800defc:	d034      	beq.n	800df68 <USBD_StdDevReq+0x188>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800defe:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800df00:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800df04:	f000 fd36 	bl	800e974 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800df08:	4628      	mov	r0, r5
 800df0a:	f000 fa45 	bl	800e398 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800df0e:	2e00      	cmp	r6, #0
 800df10:	f040 80d3 	bne.w	800e0ba <USBD_StdDevReq+0x2da>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800df14:	2301      	movs	r3, #1
 800df16:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800df1a:	e776      	b.n	800de0a <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 800df1c:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 800df1e:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800df20:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800df24:	0a13      	lsrs	r3, r2, #8
 800df26:	3b01      	subs	r3, #1
 800df28:	2b06      	cmp	r3, #6
 800df2a:	d81d      	bhi.n	800df68 <USBD_StdDevReq+0x188>
 800df2c:	e8df f003 	tbb	[pc, r3]
 800df30:	1c624d5a 	.word	0x1c624d5a
 800df34:	431c      	.short	0x431c
 800df36:	27          	.byte	0x27
 800df37:	00          	.byte	0x00
  if (req->wLength != 1U)
 800df38:	88ca      	ldrh	r2, [r1, #6]
 800df3a:	2a01      	cmp	r2, #1
 800df3c:	d114      	bne.n	800df68 <USBD_StdDevReq+0x188>
    switch (pdev->dev_state)
 800df3e:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800df42:	2902      	cmp	r1, #2
 800df44:	b2cb      	uxtb	r3, r1
 800df46:	f200 8094 	bhi.w	800e072 <USBD_StdDevReq+0x292>
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	f43f af54 	beq.w	800ddf8 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800df50:	4601      	mov	r1, r0
 800df52:	2300      	movs	r3, #0
 800df54:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800df58:	f000 f9ee 	bl	800e338 <USBD_CtlSendData>
        break;
 800df5c:	e755      	b.n	800de0a <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800df5e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d15c      	bne.n	800e022 <USBD_StdDevReq+0x242>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800df68:	2180      	movs	r1, #128	; 0x80
 800df6a:	4628      	mov	r0, r5
 800df6c:	f000 fcd2 	bl	800e914 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800df70:	2100      	movs	r1, #0
 800df72:	4628      	mov	r0, r5
 800df74:	f000 fcce 	bl	800e914 <USBD_LL_StallEP>
}
 800df78:	4620      	mov	r0, r4
 800df7a:	b002      	add	sp, #8
 800df7c:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df7e:	7c03      	ldrb	r3, [r0, #16]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d1f1      	bne.n	800df68 <USBD_StdDevReq+0x188>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800df84:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800df88:	f10d 0006 	add.w	r0, sp, #6
 800df8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df8e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800df90:	2307      	movs	r3, #7
 800df92:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 800df94:	88f2      	ldrh	r2, [r6, #6]
 800df96:	2a00      	cmp	r2, #0
 800df98:	d067      	beq.n	800e06a <USBD_StdDevReq+0x28a>
    if (len != 0U)
 800df9a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d0e2      	beq.n	800df68 <USBD_StdDevReq+0x188>
      len = MIN(len, req->wLength);
 800dfa2:	429a      	cmp	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dfa4:	4601      	mov	r1, r0
 800dfa6:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 800dfa8:	bf28      	it	cs
 800dfaa:	461a      	movcs	r2, r3
 800dfac:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dfb0:	f000 f9c2 	bl	800e338 <USBD_CtlSendData>
 800dfb4:	e729      	b.n	800de0a <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfb6:	7c03      	ldrb	r3, [r0, #16]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d1d5      	bne.n	800df68 <USBD_StdDevReq+0x188>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800dfbc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dfc0:	f10d 0006 	add.w	r0, sp, #6
 800dfc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfc6:	4798      	blx	r3
  if (err != 0U)
 800dfc8:	e7e4      	b.n	800df94 <USBD_StdDevReq+0x1b4>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfca:	7c03      	ldrb	r3, [r0, #16]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	f040 8092 	bne.w	800e0f6 <USBD_StdDevReq+0x316>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800dfd2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dfd6:	f10d 0006 	add.w	r0, sp, #6
 800dfda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfdc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dfde:	2302      	movs	r3, #2
 800dfe0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800dfe2:	e7d7      	b.n	800df94 <USBD_StdDevReq+0x1b4>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dfe4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800dfe8:	f10d 0106 	add.w	r1, sp, #6
 800dfec:	7c00      	ldrb	r0, [r0, #16]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4798      	blx	r3
  if (err != 0U)
 800dff2:	e7cf      	b.n	800df94 <USBD_StdDevReq+0x1b4>
      switch ((uint8_t)(req->wValue))
 800dff4:	b2d2      	uxtb	r2, r2
 800dff6:	2a05      	cmp	r2, #5
 800dff8:	d8b6      	bhi.n	800df68 <USBD_StdDevReq+0x188>
 800dffa:	a301      	add	r3, pc, #4	; (adr r3, 800e000 <USBD_StdDevReq+0x220>)
 800dffc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800e000:	0800df5f 	.word	0x0800df5f
 800e004:	0800e051 	.word	0x0800e051
 800e008:	0800e045 	.word	0x0800e045
 800e00c:	0800e039 	.word	0x0800e039
 800e010:	0800e02d 	.word	0x0800e02d
 800e014:	0800e019 	.word	0x0800e019
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e018:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e01c:	699b      	ldr	r3, [r3, #24]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d0a2      	beq.n	800df68 <USBD_StdDevReq+0x188>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e022:	f10d 0106 	add.w	r1, sp, #6
 800e026:	7c28      	ldrb	r0, [r5, #16]
 800e028:	4798      	blx	r3
  if (err != 0U)
 800e02a:	e7b3      	b.n	800df94 <USBD_StdDevReq+0x1b4>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e02c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e030:	695b      	ldr	r3, [r3, #20]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d1f5      	bne.n	800e022 <USBD_StdDevReq+0x242>
 800e036:	e797      	b.n	800df68 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e038:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e03c:	691b      	ldr	r3, [r3, #16]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d1ef      	bne.n	800e022 <USBD_StdDevReq+0x242>
 800e042:	e791      	b.n	800df68 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e044:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d1e9      	bne.n	800e022 <USBD_StdDevReq+0x242>
 800e04e:	e78b      	b.n	800df68 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e050:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800e054:	689b      	ldr	r3, [r3, #8]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1e3      	bne.n	800e022 <USBD_StdDevReq+0x242>
 800e05a:	e785      	b.n	800df68 <USBD_StdDevReq+0x188>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e05c:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800e05e:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e060:	460c      	mov	r4, r1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e062:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e066:	f7ff fd5f 	bl	800db28 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e06a:	4628      	mov	r0, r5
 800e06c:	f000 f994 	bl	800e398 <USBD_CtlSendStatus>
 800e070:	e6cb      	b.n	800de0a <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 800e072:	2b03      	cmp	r3, #3
 800e074:	f47f aec0 	bne.w	800ddf8 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e078:	1d01      	adds	r1, r0, #4
 800e07a:	f000 f95d 	bl	800e338 <USBD_CtlSendData>
        break;
 800e07e:	e6c4      	b.n	800de0a <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 800e080:	2900      	cmp	r1, #0
 800e082:	d0eb      	beq.n	800e05c <USBD_StdDevReq+0x27c>
      else if (cfgidx != pdev->dev_config)
 800e084:	6841      	ldr	r1, [r0, #4]
 800e086:	2901      	cmp	r1, #1
 800e088:	d0ef      	beq.n	800e06a <USBD_StdDevReq+0x28a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e08a:	b2c9      	uxtb	r1, r1
 800e08c:	f7ff fd4c 	bl	800db28 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e090:	7831      	ldrb	r1, [r6, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e092:	4628      	mov	r0, r5
        pdev->dev_config = cfgidx;
 800e094:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e096:	f7ff fd3f 	bl	800db18 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800e09a:	4606      	mov	r6, r0
 800e09c:	2800      	cmp	r0, #0
 800e09e:	d0e4      	beq.n	800e06a <USBD_StdDevReq+0x28a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e0a0:	2180      	movs	r1, #128	; 0x80
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	f000 fc36 	bl	800e914 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e0a8:	2100      	movs	r1, #0
 800e0aa:	4628      	mov	r0, r5
 800e0ac:	4634      	mov	r4, r6
 800e0ae:	f000 fc31 	bl	800e914 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e0b2:	7929      	ldrb	r1, [r5, #4]
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	f7ff fd37 	bl	800db28 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e0ba:	2302      	movs	r3, #2
 800e0bc:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800e0c0:	e6a3      	b.n	800de0a <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800e0c2:	2900      	cmp	r1, #0
 800e0c4:	d0d1      	beq.n	800e06a <USBD_StdDevReq+0x28a>
        pdev->dev_config = cfgidx;
 800e0c6:	2101      	movs	r1, #1
 800e0c8:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e0ca:	f7ff fd25 	bl	800db18 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800e0ce:	4604      	mov	r4, r0
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	f47f af49 	bne.w	800df68 <USBD_StdDevReq+0x188>
          (void)USBD_CtlSendStatus(pdev);
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	f000 f95e 	bl	800e398 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e0dc:	2303      	movs	r3, #3
 800e0de:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800e0e2:	e692      	b.n	800de0a <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e0e4:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 800e0e6:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e0e8:	f000 fc14 	bl	800e914 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e0ec:	2100      	movs	r1, #0
 800e0ee:	4628      	mov	r0, r5
 800e0f0:	f000 fc10 	bl	800e914 <USBD_LL_StallEP>
    return USBD_FAIL;
 800e0f4:	e689      	b.n	800de0a <USBD_StdDevReq+0x2a>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e0f6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e0fa:	f10d 0006 	add.w	r0, sp, #6
 800e0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e100:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e102:	2302      	movs	r3, #2
 800e104:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800e106:	e745      	b.n	800df94 <USBD_StdDevReq+0x1b4>
 800e108:	2400d9dc 	.word	0x2400d9dc

0800e10c <USBD_StdItfReq>:
{
 800e10c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e10e:	780b      	ldrb	r3, [r1, #0]
{
 800e110:	460d      	mov	r5, r1
 800e112:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e114:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800e118:	2a40      	cmp	r2, #64	; 0x40
 800e11a:	d00b      	beq.n	800e134 <USBD_StdItfReq+0x28>
 800e11c:	065b      	lsls	r3, r3, #25
 800e11e:	d509      	bpl.n	800e134 <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 800e120:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e122:	2180      	movs	r1, #128	; 0x80
 800e124:	f000 fbf6 	bl	800e914 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e128:	4620      	mov	r0, r4
 800e12a:	4629      	mov	r1, r5
 800e12c:	f000 fbf2 	bl	800e914 <USBD_LL_StallEP>
}
 800e130:	4628      	mov	r0, r5
 800e132:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800e134:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800e138:	3b01      	subs	r3, #1
 800e13a:	2b02      	cmp	r3, #2
 800e13c:	d812      	bhi.n	800e164 <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e13e:	792b      	ldrb	r3, [r5, #4]
 800e140:	2b01      	cmp	r3, #1
 800e142:	d80f      	bhi.n	800e164 <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e144:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e148:	4629      	mov	r1, r5
 800e14a:	4620      	mov	r0, r4
 800e14c:	689b      	ldr	r3, [r3, #8]
 800e14e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e150:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e152:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e154:	2b00      	cmp	r3, #0
 800e156:	d1eb      	bne.n	800e130 <USBD_StdItfReq+0x24>
 800e158:	2800      	cmp	r0, #0
 800e15a:	d1e9      	bne.n	800e130 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 800e15c:	4620      	mov	r0, r4
 800e15e:	f000 f91b 	bl	800e398 <USBD_CtlSendStatus>
 800e162:	e7e5      	b.n	800e130 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e164:	2180      	movs	r1, #128	; 0x80
 800e166:	4620      	mov	r0, r4
 800e168:	f000 fbd4 	bl	800e914 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e16c:	2100      	movs	r1, #0
 800e16e:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800e170:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800e172:	f000 fbcf 	bl	800e914 <USBD_LL_StallEP>
}
 800e176:	4628      	mov	r0, r5
 800e178:	bd38      	pop	{r3, r4, r5, pc}
 800e17a:	bf00      	nop

0800e17c <USBD_StdEPReq>:
{
 800e17c:	b570      	push	{r4, r5, r6, lr}
 800e17e:	780b      	ldrb	r3, [r1, #0]
 800e180:	460d      	mov	r5, r1
 800e182:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e184:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e188:	2b20      	cmp	r3, #32
 800e18a:	d01b      	beq.n	800e1c4 <USBD_StdEPReq+0x48>
 800e18c:	2b40      	cmp	r3, #64	; 0x40
 800e18e:	d019      	beq.n	800e1c4 <USBD_StdEPReq+0x48>
 800e190:	b303      	cbz	r3, 800e1d4 <USBD_StdEPReq+0x58>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e192:	2180      	movs	r1, #128	; 0x80
 800e194:	4620      	mov	r0, r4
 800e196:	f000 fbbd 	bl	800e914 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e19a:	2100      	movs	r1, #0
 800e19c:	4620      	mov	r0, r4
 800e19e:	f000 fbb9 	bl	800e914 <USBD_LL_StallEP>
}
 800e1a2:	2000      	movs	r0, #0
 800e1a4:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800e1a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e1aa:	2b02      	cmp	r3, #2
 800e1ac:	b2da      	uxtb	r2, r3
 800e1ae:	d04e      	beq.n	800e24e <USBD_StdEPReq+0xd2>
 800e1b0:	2a03      	cmp	r2, #3
 800e1b2:	d1ee      	bne.n	800e192 <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e1b4:	886b      	ldrh	r3, [r5, #2]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1f3      	bne.n	800e1a2 <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 800e1ba:	064e      	lsls	r6, r1, #25
 800e1bc:	d172      	bne.n	800e2a4 <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 800e1be:	4620      	mov	r0, r4
 800e1c0:	f000 f8ea 	bl	800e398 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e1c4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e1c8:	4629      	mov	r1, r5
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	689b      	ldr	r3, [r3, #8]
}
 800e1ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e1d2:	4718      	bx	r3
      switch (req->bRequest)
 800e1d4:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 800e1d6:	888a      	ldrh	r2, [r1, #4]
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 800e1dc:	d0e3      	beq.n	800e1a6 <USBD_StdEPReq+0x2a>
 800e1de:	2b03      	cmp	r3, #3
 800e1e0:	d024      	beq.n	800e22c <USBD_StdEPReq+0xb0>
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d1d5      	bne.n	800e192 <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 800e1e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e1ea:	2b02      	cmp	r3, #2
 800e1ec:	b2d8      	uxtb	r0, r3
 800e1ee:	d037      	beq.n	800e260 <USBD_StdEPReq+0xe4>
 800e1f0:	2803      	cmp	r0, #3
 800e1f2:	d1ce      	bne.n	800e192 <USBD_StdEPReq+0x16>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e1f4:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800e1f8:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e1fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e1fe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800e202:	d43e      	bmi.n	800e282 <USBD_StdEPReq+0x106>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e204:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d0c2      	beq.n	800e192 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e20c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800e210:	2514      	movs	r5, #20
 800e212:	fb05 4503 	mla	r5, r5, r3, r4
 800e216:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d13c      	bne.n	800e298 <USBD_StdEPReq+0x11c>
                pep->status = 0x0001U;
 800e21e:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e220:	2202      	movs	r2, #2
 800e222:	4629      	mov	r1, r5
 800e224:	4620      	mov	r0, r4
 800e226:	f000 f887 	bl	800e338 <USBD_CtlSendData>
              break;
 800e22a:	e7ba      	b.n	800e1a2 <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 800e22c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e230:	2b02      	cmp	r3, #2
 800e232:	b2da      	uxtb	r2, r3
 800e234:	d00b      	beq.n	800e24e <USBD_StdEPReq+0xd2>
 800e236:	2a03      	cmp	r2, #3
 800e238:	d1ab      	bne.n	800e192 <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e23a:	886b      	ldrh	r3, [r5, #2]
 800e23c:	b91b      	cbnz	r3, 800e246 <USBD_StdEPReq+0xca>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e23e:	064a      	lsls	r2, r1, #25
 800e240:	d001      	beq.n	800e246 <USBD_StdEPReq+0xca>
 800e242:	88eb      	ldrh	r3, [r5, #6]
 800e244:	b39b      	cbz	r3, 800e2ae <USBD_StdEPReq+0x132>
              (void)USBD_CtlSendStatus(pdev);
 800e246:	4620      	mov	r0, r4
 800e248:	f000 f8a6 	bl	800e398 <USBD_CtlSendStatus>
              break;
 800e24c:	e7a9      	b.n	800e1a2 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e24e:	064b      	lsls	r3, r1, #25
 800e250:	d09f      	beq.n	800e192 <USBD_StdEPReq+0x16>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e252:	f000 fb5f 	bl	800e914 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e256:	2180      	movs	r1, #128	; 0x80
 800e258:	4620      	mov	r0, r4
 800e25a:	f000 fb5b 	bl	800e914 <USBD_LL_StallEP>
 800e25e:	e7a0      	b.n	800e1a2 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e260:	0648      	lsls	r0, r1, #25
 800e262:	d196      	bne.n	800e192 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e264:	0611      	lsls	r1, r2, #24
              pep->status = 0x0000U;
 800e266:	f04f 0300 	mov.w	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e26a:	f04f 0202 	mov.w	r2, #2
 800e26e:	4620      	mov	r0, r4
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e270:	bf4c      	ite	mi
 800e272:	f104 0114 	addmi.w	r1, r4, #20
 800e276:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 800e27a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e27c:	f000 f85c 	bl	800e338 <USBD_CtlSendData>
              break;
 800e280:	e78f      	b.n	800e1a2 <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e282:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e284:	2b00      	cmp	r3, #0
 800e286:	d084      	beq.n	800e192 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e288:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800e28c:	1c5d      	adds	r5, r3, #1
 800e28e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800e292:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e296:	e7c0      	b.n	800e21a <USBD_StdEPReq+0x9e>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e298:	4620      	mov	r0, r4
 800e29a:	f000 fb57 	bl	800e94c <USBD_LL_IsStallEP>
 800e29e:	b120      	cbz	r0, 800e2aa <USBD_StdEPReq+0x12e>
                pep->status = 0x0001U;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	e7bc      	b.n	800e21e <USBD_StdEPReq+0xa2>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e2a4:	f000 fb44 	bl	800e930 <USBD_LL_ClearStallEP>
 800e2a8:	e789      	b.n	800e1be <USBD_StdEPReq+0x42>
                pep->status = 0x0000U;
 800e2aa:	6028      	str	r0, [r5, #0]
 800e2ac:	e7b8      	b.n	800e220 <USBD_StdEPReq+0xa4>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e2ae:	f000 fb31 	bl	800e914 <USBD_LL_StallEP>
 800e2b2:	e7c8      	b.n	800e246 <USBD_StdEPReq+0xca>

0800e2b4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800e2b4:	780b      	ldrb	r3, [r1, #0]
 800e2b6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800e2b8:	784b      	ldrb	r3, [r1, #1]
 800e2ba:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800e2bc:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 800e2be:	8043      	strh	r3, [r0, #2]
 800e2c0:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 800e2c2:	8083      	strh	r3, [r0, #4]
 800e2c4:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 800e2c6:	80c3      	strh	r3, [r0, #6]
}
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop

0800e2cc <USBD_CtlError>:
{
 800e2cc:	b510      	push	{r4, lr}
 800e2ce:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e2d0:	2180      	movs	r1, #128	; 0x80
 800e2d2:	f000 fb1f 	bl	800e914 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e2d6:	2100      	movs	r1, #0
 800e2d8:	4620      	mov	r0, r4
}
 800e2da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800e2de:	f000 bb19 	b.w	800e914 <USBD_LL_StallEP>
 800e2e2:	bf00      	nop

0800e2e4 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800e2e4:	b318      	cbz	r0, 800e32e <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800e2e6:	7803      	ldrb	r3, [r0, #0]
{
 800e2e8:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 800e2ea:	b30b      	cbz	r3, 800e330 <USBD_GetString+0x4c>
 800e2ec:	4604      	mov	r4, r0
 800e2ee:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 800e2f2:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 800e2f6:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800e2fa:	b2db      	uxtb	r3, r3
 800e2fc:	2d00      	cmp	r5, #0
 800e2fe:	d1f8      	bne.n	800e2f2 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e300:	3301      	adds	r3, #1
 800e302:	005b      	lsls	r3, r3, #1
 800e304:	b2dc      	uxtb	r4, r3
 800e306:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e308:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 800e30a:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e30c:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 800e30e:	7804      	ldrb	r4, [r0, #0]
 800e310:	b15c      	cbz	r4, 800e32a <USBD_GetString+0x46>
  idx++;
 800e312:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800e314:	2500      	movs	r5, #0
    idx++;
 800e316:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 800e318:	54cc      	strb	r4, [r1, r3]
    idx++;
 800e31a:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800e31c:	b2d2      	uxtb	r2, r2
    idx++;
 800e31e:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 800e320:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 800e322:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800e326:	2c00      	cmp	r4, #0
 800e328:	d1f5      	bne.n	800e316 <USBD_GetString+0x32>
}
 800e32a:	bc30      	pop	{r4, r5}
 800e32c:	4770      	bx	lr
 800e32e:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 800e330:	2402      	movs	r4, #2
 800e332:	4623      	mov	r3, r4
 800e334:	e7e7      	b.n	800e306 <USBD_GetString+0x22>
 800e336:	bf00      	nop

0800e338 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e338:	b510      	push	{r4, lr}
 800e33a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e33c:	2402      	movs	r4, #2
{
 800e33e:	460a      	mov	r2, r1
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e340:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e342:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 800e346:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e34a:	f000 fb21 	bl	800e990 <USBD_LL_Transmit>

  return USBD_OK;
}
 800e34e:	2000      	movs	r0, #0
 800e350:	bd10      	pop	{r4, pc}
 800e352:	bf00      	nop

0800e354 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e354:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e356:	2100      	movs	r1, #0
{
 800e358:	b508      	push	{r3, lr}
 800e35a:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e35c:	4662      	mov	r2, ip
 800e35e:	f000 fb17 	bl	800e990 <USBD_LL_Transmit>

  return USBD_OK;
}
 800e362:	2000      	movs	r0, #0
 800e364:	bd08      	pop	{r3, pc}
 800e366:	bf00      	nop

0800e368 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e368:	b510      	push	{r4, lr}
 800e36a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e36c:	2403      	movs	r4, #3
{
 800e36e:	460a      	mov	r2, r1
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e370:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e372:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 800e376:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e37a:	f000 fb17 	bl	800e9ac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e37e:	2000      	movs	r0, #0
 800e380:	bd10      	pop	{r4, pc}
 800e382:	bf00      	nop

0800e384 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e384:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e386:	2100      	movs	r1, #0
{
 800e388:	b508      	push	{r3, lr}
 800e38a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e38c:	4662      	mov	r2, ip
 800e38e:	f000 fb0d 	bl	800e9ac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e392:	2000      	movs	r0, #0
 800e394:	bd08      	pop	{r3, pc}
 800e396:	bf00      	nop

0800e398 <USBD_CtlSendStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e398:	2300      	movs	r3, #0
{
 800e39a:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e39c:	2404      	movs	r4, #4
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e39e:	461a      	mov	r2, r3
 800e3a0:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e3a2:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e3a6:	f000 faf3 	bl	800e990 <USBD_LL_Transmit>

  return USBD_OK;
}
 800e3aa:	2000      	movs	r0, #0
 800e3ac:	bd10      	pop	{r4, pc}
 800e3ae:	bf00      	nop

0800e3b0 <USBD_CtlReceiveStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e3b0:	2300      	movs	r3, #0
{
 800e3b2:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e3b4:	2405      	movs	r4, #5
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e3ba:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e3be:	f000 faf5 	bl	800e9ac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e3c2:	2000      	movs	r0, #0
 800e3c4:	bd10      	pop	{r4, pc}
 800e3c6:	bf00      	nop

0800e3c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e3c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	4919      	ldr	r1, [pc, #100]	; (800e434 <MX_USB_DEVICE_Init+0x6c>)
 800e3ce:	481a      	ldr	r0, [pc, #104]	; (800e438 <MX_USB_DEVICE_Init+0x70>)
 800e3d0:	f7ff fb72 	bl	800dab8 <USBD_Init>
 800e3d4:	b988      	cbnz	r0, 800e3fa <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e3d6:	4919      	ldr	r1, [pc, #100]	; (800e43c <MX_USB_DEVICE_Init+0x74>)
 800e3d8:	4817      	ldr	r0, [pc, #92]	; (800e438 <MX_USB_DEVICE_Init+0x70>)
 800e3da:	f7ff fb81 	bl	800dae0 <USBD_RegisterClass>
 800e3de:	b9a0      	cbnz	r0, 800e40a <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e3e0:	4917      	ldr	r1, [pc, #92]	; (800e440 <MX_USB_DEVICE_Init+0x78>)
 800e3e2:	4815      	ldr	r0, [pc, #84]	; (800e438 <MX_USB_DEVICE_Init+0x70>)
 800e3e4:	f7ff fb16 	bl	800da14 <USBD_CDC_RegisterInterface>
 800e3e8:	b9b8      	cbnz	r0, 800e41a <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e3ea:	4813      	ldr	r0, [pc, #76]	; (800e438 <MX_USB_DEVICE_Init+0x70>)
 800e3ec:	f7ff fb92 	bl	800db14 <USBD_Start>
 800e3f0:	b9d0      	cbnz	r0, 800e428 <MX_USB_DEVICE_Init+0x60>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e3f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800e3f6:	f7fb b831 	b.w	800945c <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 800e3fa:	f7f6 f83f 	bl	800447c <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e3fe:	490f      	ldr	r1, [pc, #60]	; (800e43c <MX_USB_DEVICE_Init+0x74>)
 800e400:	480d      	ldr	r0, [pc, #52]	; (800e438 <MX_USB_DEVICE_Init+0x70>)
 800e402:	f7ff fb6d 	bl	800dae0 <USBD_RegisterClass>
 800e406:	2800      	cmp	r0, #0
 800e408:	d0ea      	beq.n	800e3e0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800e40a:	f7f6 f837 	bl	800447c <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e40e:	490c      	ldr	r1, [pc, #48]	; (800e440 <MX_USB_DEVICE_Init+0x78>)
 800e410:	4809      	ldr	r0, [pc, #36]	; (800e438 <MX_USB_DEVICE_Init+0x70>)
 800e412:	f7ff faff 	bl	800da14 <USBD_CDC_RegisterInterface>
 800e416:	2800      	cmp	r0, #0
 800e418:	d0e7      	beq.n	800e3ea <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800e41a:	f7f6 f82f 	bl	800447c <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e41e:	4806      	ldr	r0, [pc, #24]	; (800e438 <MX_USB_DEVICE_Init+0x70>)
 800e420:	f7ff fb78 	bl	800db14 <USBD_Start>
 800e424:	2800      	cmp	r0, #0
 800e426:	d0e4      	beq.n	800e3f2 <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 800e428:	f7f6 f828 	bl	800447c <Error_Handler>
}
 800e42c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800e430:	f7fb b814 	b.w	800945c <HAL_PWREx_EnableUSBVoltageDetector>
 800e434:	24000448 	.word	0x24000448
 800e438:	2400d9e0 	.word	0x2400d9e0
 800e43c:	2400031c 	.word	0x2400031c
 800e440:	2400042c 	.word	0x2400042c

0800e444 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800e444:	2000      	movs	r0, #0
 800e446:	4770      	bx	lr

0800e448 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800e448:	2000      	movs	r0, #0
 800e44a:	4770      	bx	lr

0800e44c <CDC_Receive_FS>:
{
 800e44c:	b570      	push	{r4, r5, r6, lr}
 800e44e:	4604      	mov	r4, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e450:	4e08      	ldr	r6, [pc, #32]	; (800e474 <CDC_Receive_FS+0x28>)
{
 800e452:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e454:	4630      	mov	r0, r6
 800e456:	4621      	mov	r1, r4
 800e458:	f7ff faf0 	bl	800da3c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800e45c:	4630      	mov	r0, r6
 800e45e:	f7ff fb0f 	bl	800da80 <USBD_CDC_ReceivePacket>
 800e462:	682a      	ldr	r2, [r5, #0]
 800e464:	4b04      	ldr	r3, [pc, #16]	; (800e478 <CDC_Receive_FS+0x2c>)
  memcpy(UartRXString, Buf, USBRXLength);
 800e466:	4621      	mov	r1, r4
 800e468:	4804      	ldr	r0, [pc, #16]	; (800e47c <CDC_Receive_FS+0x30>)
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800e46a:	601a      	str	r2, [r3, #0]
  memcpy(UartRXString, Buf, USBRXLength);
 800e46c:	f001 fc0e 	bl	800fc8c <memcpy>
}
 800e470:	2000      	movs	r0, #0
 800e472:	bd70      	pop	{r4, r5, r6, pc}
 800e474:	2400d9e0 	.word	0x2400d9e0
 800e478:	240072ec 	.word	0x240072ec
 800e47c:	240072f4 	.word	0x240072f4

0800e480 <CDC_Init_FS>:
{
 800e480:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e482:	4c06      	ldr	r4, [pc, #24]	; (800e49c <CDC_Init_FS+0x1c>)
 800e484:	2200      	movs	r2, #0
 800e486:	4906      	ldr	r1, [pc, #24]	; (800e4a0 <CDC_Init_FS+0x20>)
 800e488:	4620      	mov	r0, r4
 800e48a:	f7ff facb 	bl	800da24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e48e:	4905      	ldr	r1, [pc, #20]	; (800e4a4 <CDC_Init_FS+0x24>)
 800e490:	4620      	mov	r0, r4
 800e492:	f7ff fad3 	bl	800da3c <USBD_CDC_SetRxBuffer>
}
 800e496:	2000      	movs	r0, #0
 800e498:	bd10      	pop	{r4, pc}
 800e49a:	bf00      	nop
 800e49c:	2400d9e0 	.word	0x2400d9e0
 800e4a0:	2400e4b0 	.word	0x2400e4b0
 800e4a4:	2400dcb0 	.word	0x2400dcb0

0800e4a8 <CDC_Control_FS>:
  switch(cmd)
 800e4a8:	2820      	cmp	r0, #32
 800e4aa:	d00a      	beq.n	800e4c2 <CDC_Control_FS+0x1a>
 800e4ac:	2821      	cmp	r0, #33	; 0x21
 800e4ae:	d106      	bne.n	800e4be <CDC_Control_FS+0x16>
    	 memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800e4b0:	4b09      	ldr	r3, [pc, #36]	; (800e4d8 <CDC_Control_FS+0x30>)
 800e4b2:	6818      	ldr	r0, [r3, #0]
 800e4b4:	889a      	ldrh	r2, [r3, #4]
 800e4b6:	799b      	ldrb	r3, [r3, #6]
 800e4b8:	6008      	str	r0, [r1, #0]
 800e4ba:	808a      	strh	r2, [r1, #4]
 800e4bc:	718b      	strb	r3, [r1, #6]
}
 800e4be:	2000      	movs	r0, #0
 800e4c0:	4770      	bx	lr
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800e4c2:	4b05      	ldr	r3, [pc, #20]	; (800e4d8 <CDC_Control_FS+0x30>)
 800e4c4:	6808      	ldr	r0, [r1, #0]
 800e4c6:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 800e4ca:	798a      	ldrb	r2, [r1, #6]
 800e4cc:	6018      	str	r0, [r3, #0]
}
 800e4ce:	2000      	movs	r0, #0
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800e4d0:	f8a3 c004 	strh.w	ip, [r3, #4]
 800e4d4:	719a      	strb	r2, [r3, #6]
}
 800e4d6:	4770      	bx	lr
 800e4d8:	24000440 	.word	0x24000440

0800e4dc <CDC_Transmit_FS>:
{
 800e4dc:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e4de:	4c09      	ldr	r4, [pc, #36]	; (800e504 <CDC_Transmit_FS+0x28>)
 800e4e0:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800e4e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e4e8:	b10b      	cbz	r3, 800e4ee <CDC_Transmit_FS+0x12>
}
 800e4ea:	2001      	movs	r0, #1
 800e4ec:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e4ee:	460a      	mov	r2, r1
 800e4f0:	4601      	mov	r1, r0
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	f7ff fa96 	bl	800da24 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e4f8:	4620      	mov	r0, r4
}
 800e4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e4fe:	f7ff baa7 	b.w	800da50 <USBD_CDC_TransmitPacket>
 800e502:	bf00      	nop
 800e504:	2400d9e0 	.word	0x2400d9e0

0800e508 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e508:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800e50a:	4801      	ldr	r0, [pc, #4]	; (800e510 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800e50c:	800b      	strh	r3, [r1, #0]
}
 800e50e:	4770      	bx	lr
 800e510:	24000464 	.word	0x24000464

0800e514 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e514:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800e516:	4801      	ldr	r0, [pc, #4]	; (800e51c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800e518:	800b      	strh	r3, [r1, #0]
}
 800e51a:	4770      	bx	lr
 800e51c:	24000478 	.word	0x24000478

0800e520 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e520:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e522:	4c04      	ldr	r4, [pc, #16]	; (800e534 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800e524:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e526:	4804      	ldr	r0, [pc, #16]	; (800e538 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800e528:	4621      	mov	r1, r4
 800e52a:	f7ff fedb 	bl	800e2e4 <USBD_GetString>
  return USBD_StrDesc;
}
 800e52e:	4620      	mov	r0, r4
 800e530:	bd10      	pop	{r4, pc}
 800e532:	bf00      	nop
 800e534:	2400ecb0 	.word	0x2400ecb0
 800e538:	0801a234 	.word	0x0801a234

0800e53c <USBD_FS_ProductStrDescriptor>:
{
 800e53c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e53e:	4c04      	ldr	r4, [pc, #16]	; (800e550 <USBD_FS_ProductStrDescriptor+0x14>)
{
 800e540:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e542:	4804      	ldr	r0, [pc, #16]	; (800e554 <USBD_FS_ProductStrDescriptor+0x18>)
 800e544:	4621      	mov	r1, r4
 800e546:	f7ff fecd 	bl	800e2e4 <USBD_GetString>
}
 800e54a:	4620      	mov	r0, r4
 800e54c:	bd10      	pop	{r4, pc}
 800e54e:	bf00      	nop
 800e550:	2400ecb0 	.word	0x2400ecb0
 800e554:	0801a248 	.word	0x0801a248

0800e558 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e558:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e55a:	4c04      	ldr	r4, [pc, #16]	; (800e56c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800e55c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e55e:	4804      	ldr	r0, [pc, #16]	; (800e570 <USBD_FS_ConfigStrDescriptor+0x18>)
 800e560:	4621      	mov	r1, r4
 800e562:	f7ff febf 	bl	800e2e4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800e566:	4620      	mov	r0, r4
 800e568:	bd10      	pop	{r4, pc}
 800e56a:	bf00      	nop
 800e56c:	2400ecb0 	.word	0x2400ecb0
 800e570:	0801a260 	.word	0x0801a260

0800e574 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e574:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e576:	4c04      	ldr	r4, [pc, #16]	; (800e588 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800e578:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e57a:	4804      	ldr	r0, [pc, #16]	; (800e58c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800e57c:	4621      	mov	r1, r4
 800e57e:	f7ff feb1 	bl	800e2e4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800e582:	4620      	mov	r0, r4
 800e584:	bd10      	pop	{r4, pc}
 800e586:	bf00      	nop
 800e588:	2400ecb0 	.word	0x2400ecb0
 800e58c:	0801a26c 	.word	0x0801a26c

0800e590 <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e590:	4a46      	ldr	r2, [pc, #280]	; (800e6ac <USBD_FS_SerialStrDescriptor+0x11c>)
  *length = USB_SIZ_STRING_SERIAL;
 800e592:	f04f 0c1a 	mov.w	ip, #26
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e596:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800e59a:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
  *length = USB_SIZ_STRING_SERIAL;
 800e59e:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 800e5a2:	18c3      	adds	r3, r0, r3
 800e5a4:	d101      	bne.n	800e5aa <USBD_FS_SerialStrDescriptor+0x1a>
}
 800e5a6:	4842      	ldr	r0, [pc, #264]	; (800e6b0 <USBD_FS_SerialStrDescriptor+0x120>)
 800e5a8:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 800e5aa:	0f18      	lsrs	r0, r3, #28
 800e5ac:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e5b0:	f8d2 1804 	ldr.w	r1, [r2, #2052]	; 0x804
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800e5b4:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800e5b8:	4a3d      	ldr	r2, [pc, #244]	; (800e6b0 <USBD_FS_SerialStrDescriptor+0x120>)
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e5ba:	bf2c      	ite	cs
 800e5bc:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e5be:	3030      	addcc	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800e5c0:	f882 c003 	strb.w	ip, [r2, #3]
 800e5c4:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800e5c8:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800e5ca:	f3c3 6003 	ubfx	r0, r3, #24, #4
    pbuf[2 * idx + 1] = 0;
 800e5ce:	f882 c005 	strb.w	ip, [r2, #5]
 800e5d2:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800e5d6:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800e5d8:	f882 c007 	strb.w	ip, [r2, #7]
 800e5dc:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e5e0:	bf8c      	ite	hi
 800e5e2:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e5e4:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800e5e6:	f882 c009 	strb.w	ip, [r2, #9]
 800e5ea:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800e5ee:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800e5f0:	f3c3 5003 	ubfx	r0, r3, #20, #4
    pbuf[2 * idx + 1] = 0;
 800e5f4:	f882 c00b 	strb.w	ip, [r2, #11]
 800e5f8:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800e5fc:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800e5fe:	f882 c00d 	strb.w	ip, [r2, #13]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e602:	bf8c      	ite	hi
 800e604:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e606:	3030      	addls	r0, #48	; 0x30
 800e608:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800e60a:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800e60e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e610:	bf8c      	ite	hi
 800e612:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e614:	3030      	addls	r0, #48	; 0x30
 800e616:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800e618:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800e61c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e61e:	bf8c      	ite	hi
 800e620:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e622:	3030      	addls	r0, #48	; 0x30
 800e624:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800e626:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800e62a:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e62c:	bf8c      	ite	hi
 800e62e:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e630:	3030      	addls	r0, #48	; 0x30
 800e632:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 800e634:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800e638:	f003 030f 	and.w	r3, r3, #15
 800e63c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e63e:	bf8c      	ite	hi
 800e640:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e642:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 800e644:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800e646:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 800e648:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800e64c:	bf94      	ite	ls
 800e64e:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e650:	3337      	addhi	r3, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800e652:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 800e656:	73d0      	strb	r0, [r2, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e658:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800e65a:	ea4f 7311 	mov.w	r3, r1, lsr #28
    pbuf[2 * idx + 1] = 0;
 800e65e:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e662:	bf2c      	ite	cs
 800e664:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e666:	3330      	addcc	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800e668:	7450      	strb	r0, [r2, #17]
 800e66a:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800e66c:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800e66e:	f3c1 6303 	ubfx	r3, r1, #24, #4
    pbuf[2 * idx + 1] = 0;
 800e672:	74d0      	strb	r0, [r2, #19]
 800e674:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800e676:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 800e678:	7550      	strb	r0, [r2, #21]
 800e67a:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e67e:	bf8c      	ite	hi
 800e680:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e682:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800e684:	75d0      	strb	r0, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 800e686:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800e688:	f3c1 5303 	ubfx	r3, r1, #20, #4
}
 800e68c:	4808      	ldr	r0, [pc, #32]	; (800e6b0 <USBD_FS_SerialStrDescriptor+0x120>)
    if (((value >> 28)) < 0xA)
 800e68e:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e690:	bf8c      	ite	hi
 800e692:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e694:	3330      	addls	r3, #48	; 0x30
 800e696:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800e698:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800e69c:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800e69e:	bf94      	ite	ls
 800e6a0:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e6a2:	3337      	addhi	r3, #55	; 0x37
 800e6a4:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	7653      	strb	r3, [r2, #25]
}
 800e6aa:	4770      	bx	lr
 800e6ac:	1ff1e000 	.word	0x1ff1e000
 800e6b0:	2400047c 	.word	0x2400047c
 800e6b4:	00000000 	.word	0x00000000

0800e6b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e6b8:	b510      	push	{r4, lr}
 800e6ba:	b0b6      	sub	sp, #216	; 0xd8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6bc:	2100      	movs	r1, #0
{
 800e6be:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e6c0:	22bc      	movs	r2, #188	; 0xbc
 800e6c2:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6c4:	9106      	str	r1, [sp, #24]
 800e6c6:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800e6ca:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e6ce:	f001 faeb 	bl	800fca8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e6d2:	4b25      	ldr	r3, [pc, #148]	; (800e768 <HAL_PCD_MspInit+0xb0>)
 800e6d4:	6822      	ldr	r2, [r4, #0]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d001      	beq.n	800e6de <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e6da:	b036      	add	sp, #216	; 0xd8
 800e6dc:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e6de:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e6e2:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e6e6:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e6e8:	9207      	str	r2, [sp, #28]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e6ea:	9328      	str	r3, [sp, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e6ec:	f7fb fdf4 	bl	800a2d8 <HAL_RCCEx_PeriphCLKConfig>
 800e6f0:	bb90      	cbnz	r0, 800e758 <HAL_PCD_MspInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6f2:	4c1e      	ldr	r4, [pc, #120]	; (800e76c <HAL_PCD_MspInit+0xb4>)
    HAL_PWREx_EnableUSBVoltageDetector();
 800e6f4:	f7fa feb2 	bl	800945c <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800e6f8:	220a      	movs	r2, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e6fa:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6fc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e700:	481b      	ldr	r0, [pc, #108]	; (800e770 <HAL_PCD_MspInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e702:	f043 0301 	orr.w	r3, r3, #1
 800e706:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800e70a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800e70e:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e710:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e712:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e716:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800e760 <HAL_PCD_MspInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e71e:	2300      	movs	r3, #0
 800e720:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e724:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e728:	f7f9 ff22 	bl	8008570 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e72c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e730:	2200      	movs	r2, #0
 800e732:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e734:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e738:	4611      	mov	r1, r2
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e73a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800e73e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800e742:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e746:	9301      	str	r3, [sp, #4]
 800e748:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e74a:	f7f8 fa2d 	bl	8006ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e74e:	2065      	movs	r0, #101	; 0x65
 800e750:	f7f8 fa68 	bl	8006c24 <HAL_NVIC_EnableIRQ>
}
 800e754:	b036      	add	sp, #216	; 0xd8
 800e756:	bd10      	pop	{r4, pc}
      Error_Handler();
 800e758:	f7f5 fe90 	bl	800447c <Error_Handler>
 800e75c:	e7c9      	b.n	800e6f2 <HAL_PCD_MspInit+0x3a>
 800e75e:	bf00      	nop
 800e760:	00001800 	.word	0x00001800
 800e764:	00000002 	.word	0x00000002
 800e768:	40080000 	.word	0x40080000
 800e76c:	58024400 	.word	0x58024400
 800e770:	58020000 	.word	0x58020000

0800e774 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e774:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800e778:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e77c:	f7ff b9dc 	b.w	800db38 <USBD_LL_SetupStage>

0800e780 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e780:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800e784:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e788:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e78c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e790:	f7ff ba02 	b.w	800db98 <USBD_LL_DataOutStage>

0800e794 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e794:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800e798:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e79c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e7a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e7a2:	f7ff ba2d 	b.w	800dc00 <USBD_LL_DataInStage>
 800e7a6:	bf00      	nop

0800e7a8 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e7a8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e7ac:	f7ff bacc 	b.w	800dd48 <USBD_LL_SOF>

0800e7b0 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e7b0:	68c1      	ldr	r1, [r0, #12]
{
 800e7b2:	b510      	push	{r4, lr}
 800e7b4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e7b6:	b111      	cbz	r1, 800e7be <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e7b8:	2902      	cmp	r1, #2
 800e7ba:	d10a      	bne.n	800e7d2 <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 800e7bc:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e7be:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800e7c2:	f7ff faa5 	bl	800dd10 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e7c6:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 800e7ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e7ce:	f7ff ba73 	b.w	800dcb8 <USBD_LL_Reset>
    Error_Handler();
 800e7d2:	f7f5 fe53 	bl	800447c <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e7d6:	2101      	movs	r1, #1
 800e7d8:	e7f1      	b.n	800e7be <HAL_PCD_ResetCallback+0xe>
 800e7da:	bf00      	nop

0800e7dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7dc:	b510      	push	{r4, lr}
 800e7de:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e7e0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e7e4:	f7ff fa98 	bl	800dd18 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e7e8:	6822      	ldr	r2, [r4, #0]
 800e7ea:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800e7ee:	f043 0301 	orr.w	r3, r3, #1
 800e7f2:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e7f6:	6a23      	ldr	r3, [r4, #32]
 800e7f8:	b123      	cbz	r3, 800e804 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e7fa:	4a03      	ldr	r2, [pc, #12]	; (800e808 <HAL_PCD_SuspendCallback+0x2c>)
 800e7fc:	6913      	ldr	r3, [r2, #16]
 800e7fe:	f043 0306 	orr.w	r3, r3, #6
 800e802:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e804:	bd10      	pop	{r4, pc}
 800e806:	bf00      	nop
 800e808:	e000ed00 	.word	0xe000ed00

0800e80c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e80c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e810:	f7ff ba8e 	b.w	800dd30 <USBD_LL_Resume>

0800e814 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e814:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e818:	f7ff babe 	b.w	800dd98 <USBD_LL_IsoOUTIncomplete>

0800e81c <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e81c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e820:	f7ff baa6 	b.w	800dd70 <USBD_LL_IsoINIncomplete>

0800e824 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e824:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e828:	f7ff baca 	b.w	800ddc0 <USBD_LL_DevConnected>

0800e82c <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e82c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e830:	f7ff bac8 	b.w	800ddc4 <USBD_LL_DevDisconnected>
 800e834:	0000      	movs	r0, r0
	...

0800e838 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e838:	7802      	ldrb	r2, [r0, #0]
 800e83a:	b10a      	cbz	r2, 800e840 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
}
 800e83c:	2000      	movs	r0, #0
 800e83e:	4770      	bx	lr
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e840:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800e8a0 <USBD_LL_Init+0x68>
  hpcd_USB_OTG_FS.pData = pdev;
 800e844:	4b1a      	ldr	r3, [pc, #104]	; (800e8b0 <USBD_LL_Init+0x78>)
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e846:	491b      	ldr	r1, [pc, #108]	; (800e8b4 <USBD_LL_Init+0x7c>)
{
 800e848:	b510      	push	{r4, lr}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e84a:	ed83 7b06 	vstr	d7, [r3, #24]
 800e84e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e8a8 <USBD_LL_Init+0x70>
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800e852:	2409      	movs	r4, #9
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e854:	6019      	str	r1, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e856:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.pData = pdev;
 800e858:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e85c:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e860:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800e862:	605c      	str	r4, [r3, #4]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e864:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e866:	ed83 7b08 	vstr	d7, [r3, #32]
 800e86a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e86e:	e9c3 1203 	strd	r1, r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e872:	f7fa f841 	bl	80088f8 <HAL_PCD_Init>
 800e876:	b978      	cbnz	r0, 800e898 <USBD_LL_Init+0x60>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e878:	2180      	movs	r1, #128	; 0x80
 800e87a:	480d      	ldr	r0, [pc, #52]	; (800e8b0 <USBD_LL_Init+0x78>)
 800e87c:	f7fa fdaa 	bl	80093d4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e880:	2240      	movs	r2, #64	; 0x40
 800e882:	2100      	movs	r1, #0
 800e884:	480a      	ldr	r0, [pc, #40]	; (800e8b0 <USBD_LL_Init+0x78>)
 800e886:	f7fa fd7b 	bl	8009380 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e88a:	2280      	movs	r2, #128	; 0x80
 800e88c:	2101      	movs	r1, #1
 800e88e:	4808      	ldr	r0, [pc, #32]	; (800e8b0 <USBD_LL_Init+0x78>)
 800e890:	f7fa fd76 	bl	8009380 <HAL_PCDEx_SetTxFiFo>
}
 800e894:	2000      	movs	r0, #0
 800e896:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800e898:	f7f5 fdf0 	bl	800447c <Error_Handler>
 800e89c:	e7ec      	b.n	800e878 <USBD_LL_Init+0x40>
 800e89e:	bf00      	nop
 800e8a0:	00000002 	.word	0x00000002
	...
 800e8b0:	2400eeb0 	.word	0x2400eeb0
 800e8b4:	40080000 	.word	0x40080000

0800e8b8 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800e8b8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800e8bc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800e8be:	f7fa f8b1 	bl	8008a24 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800e8c2:	2803      	cmp	r0, #3
 800e8c4:	d802      	bhi.n	800e8cc <USBD_LL_Start+0x14>
 800e8c6:	4b02      	ldr	r3, [pc, #8]	; (800e8d0 <USBD_LL_Start+0x18>)
 800e8c8:	5c18      	ldrb	r0, [r3, r0]
}
 800e8ca:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 800e8cc:	2003      	movs	r0, #3
}
 800e8ce:	bd08      	pop	{r3, pc}
 800e8d0:	0801a27c 	.word	0x0801a27c

0800e8d4 <USBD_LL_OpenEP>:
{
 800e8d4:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e8d6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800e8da:	461a      	mov	r2, r3
 800e8dc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e8de:	4663      	mov	r3, ip
 800e8e0:	f7fa fc00 	bl	80090e4 <HAL_PCD_EP_Open>
  switch (hal_status)
 800e8e4:	2803      	cmp	r0, #3
 800e8e6:	d802      	bhi.n	800e8ee <USBD_LL_OpenEP+0x1a>
 800e8e8:	4b02      	ldr	r3, [pc, #8]	; (800e8f4 <USBD_LL_OpenEP+0x20>)
 800e8ea:	5c18      	ldrb	r0, [r3, r0]
}
 800e8ec:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e8ee:	2003      	movs	r0, #3
}
 800e8f0:	bd08      	pop	{r3, pc}
 800e8f2:	bf00      	nop
 800e8f4:	0801a27c 	.word	0x0801a27c

0800e8f8 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e8f8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800e8fc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e8fe:	f7fa fc2f 	bl	8009160 <HAL_PCD_EP_Close>
  switch (hal_status)
 800e902:	2803      	cmp	r0, #3
 800e904:	d802      	bhi.n	800e90c <USBD_LL_CloseEP+0x14>
 800e906:	4b02      	ldr	r3, [pc, #8]	; (800e910 <USBD_LL_CloseEP+0x18>)
 800e908:	5c18      	ldrb	r0, [r3, r0]
}
 800e90a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e90c:	2003      	movs	r0, #3
}
 800e90e:	bd08      	pop	{r3, pc}
 800e910:	0801a27c 	.word	0x0801a27c

0800e914 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e914:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800e918:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e91a:	f7fa fcb1 	bl	8009280 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800e91e:	2803      	cmp	r0, #3
 800e920:	d802      	bhi.n	800e928 <USBD_LL_StallEP+0x14>
 800e922:	4b02      	ldr	r3, [pc, #8]	; (800e92c <USBD_LL_StallEP+0x18>)
 800e924:	5c18      	ldrb	r0, [r3, r0]
}
 800e926:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e928:	2003      	movs	r0, #3
}
 800e92a:	bd08      	pop	{r3, pc}
 800e92c:	0801a27c 	.word	0x0801a27c

0800e930 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e930:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800e934:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e936:	f7fa fce7 	bl	8009308 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800e93a:	2803      	cmp	r0, #3
 800e93c:	d802      	bhi.n	800e944 <USBD_LL_ClearStallEP+0x14>
 800e93e:	4b02      	ldr	r3, [pc, #8]	; (800e948 <USBD_LL_ClearStallEP+0x18>)
 800e940:	5c18      	ldrb	r0, [r3, r0]
}
 800e942:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e944:	2003      	movs	r0, #3
}
 800e946:	bd08      	pop	{r3, pc}
 800e948:	0801a27c 	.word	0x0801a27c

0800e94c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800e94c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e94e:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800e952:	d406      	bmi.n	800e962 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e954:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800e958:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e95c:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 800e960:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e962:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800e966:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800e96a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e96e:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 800e972:	4770      	bx	lr

0800e974 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e974:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800e978:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e97a:	f7fa fb9d 	bl	80090b8 <HAL_PCD_SetAddress>
  switch (hal_status)
 800e97e:	2803      	cmp	r0, #3
 800e980:	d802      	bhi.n	800e988 <USBD_LL_SetUSBAddress+0x14>
 800e982:	4b02      	ldr	r3, [pc, #8]	; (800e98c <USBD_LL_SetUSBAddress+0x18>)
 800e984:	5c18      	ldrb	r0, [r3, r0]
}
 800e986:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e988:	2003      	movs	r0, #3
}
 800e98a:	bd08      	pop	{r3, pc}
 800e98c:	0801a27c 	.word	0x0801a27c

0800e990 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e990:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800e994:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e996:	f7fa fc4b 	bl	8009230 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800e99a:	2803      	cmp	r0, #3
 800e99c:	d802      	bhi.n	800e9a4 <USBD_LL_Transmit+0x14>
 800e99e:	4b02      	ldr	r3, [pc, #8]	; (800e9a8 <USBD_LL_Transmit+0x18>)
 800e9a0:	5c18      	ldrb	r0, [r3, r0]
}
 800e9a2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e9a4:	2003      	movs	r0, #3
}
 800e9a6:	bd08      	pop	{r3, pc}
 800e9a8:	0801a27c 	.word	0x0801a27c

0800e9ac <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e9ac:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800e9b0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e9b2:	f7fa fc0b 	bl	80091cc <HAL_PCD_EP_Receive>
  switch (hal_status)
 800e9b6:	2803      	cmp	r0, #3
 800e9b8:	d802      	bhi.n	800e9c0 <USBD_LL_PrepareReceive+0x14>
 800e9ba:	4b02      	ldr	r3, [pc, #8]	; (800e9c4 <USBD_LL_PrepareReceive+0x18>)
 800e9bc:	5c18      	ldrb	r0, [r3, r0]
}
 800e9be:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e9c0:	2003      	movs	r0, #3
}
 800e9c2:	bd08      	pop	{r3, pc}
 800e9c4:	0801a27c 	.word	0x0801a27c

0800e9c8 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e9c8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e9cc:	f7fa bc26 	b.w	800921c <HAL_PCD_EP_GetRxCount>

0800e9d0 <USBD_static_malloc>:
}
 800e9d0:	4800      	ldr	r0, [pc, #0]	; (800e9d4 <USBD_static_malloc+0x4>)
 800e9d2:	4770      	bx	lr
 800e9d4:	2400f2b8 	.word	0x2400f2b8

0800e9d8 <USBD_static_free>:
}
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop

0800e9dc <arm_cfft_radix8by2_f32>:
 800e9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e0:	4607      	mov	r7, r0
 800e9e2:	4608      	mov	r0, r1
 800e9e4:	ed2d 8b06 	vpush	{d8-d10}
 800e9e8:	f8b7 c000 	ldrh.w	ip, [r7]
 800e9ec:	687a      	ldr	r2, [r7, #4]
 800e9ee:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800e9f2:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800e9f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800e9fa:	f000 80ac 	beq.w	800eb56 <arm_cfft_radix8by2_f32+0x17a>
 800e9fe:	008c      	lsls	r4, r1, #2
 800ea00:	f100 0310 	add.w	r3, r0, #16
 800ea04:	3210      	adds	r2, #16
 800ea06:	f108 0610 	add.w	r6, r8, #16
 800ea0a:	3410      	adds	r4, #16
 800ea0c:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800ea10:	1905      	adds	r5, r0, r4
 800ea12:	4444      	add	r4, r8
 800ea14:	ed16 7a04 	vldr	s14, [r6, #-16]
 800ea18:	3310      	adds	r3, #16
 800ea1a:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 800ea1e:	3510      	adds	r5, #16
 800ea20:	ed56 0a03 	vldr	s1, [r6, #-12]
 800ea24:	3210      	adds	r2, #16
 800ea26:	ee74 9a87 	vadd.f32	s19, s9, s14
 800ea2a:	ed56 7a02 	vldr	s15, [r6, #-8]
 800ea2e:	ed56 2a01 	vldr	s5, [r6, #-4]
 800ea32:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800ea36:	ed54 5a04 	vldr	s11, [r4, #-16]
 800ea3a:	3610      	adds	r6, #16
 800ea3c:	ed14 5a03 	vldr	s10, [r4, #-12]
 800ea40:	3410      	adds	r4, #16
 800ea42:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 800ea46:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800ea4a:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800ea4e:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800ea52:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 800ea56:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800ea5a:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 800ea5e:	ee33 8a83 	vadd.f32	s16, s7, s6
 800ea62:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800ea66:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800ea6a:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800ea6e:	ee34 0a06 	vadd.f32	s0, s8, s12
 800ea72:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 800ea76:	ee77 aa20 	vadd.f32	s21, s14, s1
 800ea7a:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 800ea7e:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800ea82:	ee72 9a22 	vadd.f32	s19, s4, s5
 800ea86:	ee71 8a05 	vadd.f32	s17, s2, s10
 800ea8a:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 800ea8e:	ee37 7a60 	vsub.f32	s14, s14, s1
 800ea92:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 800ea96:	ee35 5a41 	vsub.f32	s10, s10, s2
 800ea9a:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 800ea9e:	ee36 6a44 	vsub.f32	s12, s12, s8
 800eaa2:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 800eaa6:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 800eaaa:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800eaae:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 800eab2:	ee72 7a62 	vsub.f32	s15, s4, s5
 800eab6:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 800eaba:	ee73 2a63 	vsub.f32	s5, s6, s7
 800eabe:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800eac2:	4563      	cmp	r3, ip
 800eac4:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800eac8:	ee24 3a84 	vmul.f32	s6, s9, s8
 800eacc:	ee27 2a26 	vmul.f32	s4, s14, s13
 800ead0:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800ead4:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800ead8:	ee27 7a04 	vmul.f32	s14, s14, s8
 800eadc:	ee65 5a84 	vmul.f32	s11, s11, s8
 800eae0:	ee65 6a26 	vmul.f32	s13, s10, s13
 800eae4:	ee25 5a04 	vmul.f32	s10, s10, s8
 800eae8:	ee37 7a64 	vsub.f32	s14, s14, s9
 800eaec:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800eaf0:	ee33 4a02 	vadd.f32	s8, s6, s4
 800eaf4:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800eaf8:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 800eafc:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 800eb00:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 800eb04:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800eb08:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800eb0c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800eb10:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800eb14:	ee27 4a87 	vmul.f32	s8, s15, s14
 800eb18:	ee61 5a87 	vmul.f32	s11, s3, s14
 800eb1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800eb20:	ee22 5a87 	vmul.f32	s10, s5, s14
 800eb24:	ee26 7a07 	vmul.f32	s14, s12, s14
 800eb28:	ee26 6a26 	vmul.f32	s12, s12, s13
 800eb2c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800eb30:	ee74 4a84 	vadd.f32	s9, s9, s8
 800eb34:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800eb38:	ee35 6a46 	vsub.f32	s12, s10, s12
 800eb3c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800eb40:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 800eb44:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 800eb48:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 800eb4c:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800eb50:	f47f af60 	bne.w	800ea14 <arm_cfft_radix8by2_f32+0x38>
 800eb54:	687a      	ldr	r2, [r7, #4]
 800eb56:	b28c      	uxth	r4, r1
 800eb58:	2302      	movs	r3, #2
 800eb5a:	4621      	mov	r1, r4
 800eb5c:	f000 fda6 	bl	800f6ac <arm_radix8_butterfly_f32>
 800eb60:	4621      	mov	r1, r4
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	4640      	mov	r0, r8
 800eb66:	2302      	movs	r3, #2
 800eb68:	ecbd 8b06 	vpop	{d8-d10}
 800eb6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb70:	f000 bd9c 	b.w	800f6ac <arm_radix8_butterfly_f32>

0800eb74 <arm_cfft_radix8by4_f32>:
 800eb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb78:	ed2d 8b04 	vpush	{d8-d9}
 800eb7c:	8804      	ldrh	r4, [r0, #0]
 800eb7e:	b08d      	sub	sp, #52	; 0x34
 800eb80:	6842      	ldr	r2, [r0, #4]
 800eb82:	460d      	mov	r5, r1
 800eb84:	0864      	lsrs	r4, r4, #1
 800eb86:	edd1 7a00 	vldr	s15, [r1]
 800eb8a:	edd1 5a01 	vldr	s11, [r1, #4]
 800eb8e:	00a3      	lsls	r3, r4, #2
 800eb90:	18ce      	adds	r6, r1, r3
 800eb92:	18f7      	adds	r7, r6, r3
 800eb94:	ed96 7a00 	vldr	s14, [r6]
 800eb98:	ed96 4a01 	vldr	s8, [r6, #4]
 800eb9c:	ed97 6a00 	vldr	s12, [r7]
 800eba0:	edd7 4a01 	vldr	s9, [r7, #4]
 800eba4:	ee77 6a86 	vadd.f32	s13, s15, s12
 800eba8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ebac:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800ebb0:	ee77 2a26 	vadd.f32	s5, s14, s13
 800ebb4:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800ebb8:	ee74 3a27 	vadd.f32	s7, s8, s15
 800ebbc:	ee76 4a44 	vsub.f32	s9, s12, s8
 800ebc0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800ebc4:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800ebc8:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800ebcc:	ee37 7a25 	vadd.f32	s14, s14, s11
 800ebd0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ebd4:	0860      	lsrs	r0, r4, #1
 800ebd6:	f102 0408 	add.w	r4, r2, #8
 800ebda:	9405      	str	r4, [sp, #20]
 800ebdc:	f102 0410 	add.w	r4, r2, #16
 800ebe0:	9009      	str	r0, [sp, #36]	; 0x24
 800ebe2:	f1a0 0902 	sub.w	r9, r0, #2
 800ebe6:	9403      	str	r4, [sp, #12]
 800ebe8:	18fc      	adds	r4, r7, r3
 800ebea:	f102 0018 	add.w	r0, r2, #24
 800ebee:	ed94 5a00 	vldr	s10, [r4]
 800ebf2:	ed94 3a01 	vldr	s6, [r4, #4]
 800ebf6:	ee72 2a85 	vadd.f32	s5, s5, s10
 800ebfa:	9004      	str	r0, [sp, #16]
 800ebfc:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800ec00:	4620      	mov	r0, r4
 800ec02:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800ec06:	9408      	str	r4, [sp, #32]
 800ec08:	ee12 ca90 	vmov	ip, s5
 800ec0c:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800ec10:	ee77 7a83 	vadd.f32	s15, s15, s6
 800ec14:	f845 cb08 	str.w	ip, [r5], #8
 800ec18:	ee13 ca90 	vmov	ip, s7
 800ec1c:	ed96 2a01 	vldr	s4, [r6, #4]
 800ec20:	ee74 4a05 	vadd.f32	s9, s8, s10
 800ec24:	edd4 2a01 	vldr	s5, [r4, #4]
 800ec28:	ee37 7a45 	vsub.f32	s14, s14, s10
 800ec2c:	ee36 6a02 	vadd.f32	s12, s12, s4
 800ec30:	9500      	str	r5, [sp, #0]
 800ec32:	460d      	mov	r5, r1
 800ec34:	ee36 6a22 	vadd.f32	s12, s12, s5
 800ec38:	ed81 6a01 	vstr	s12, [r1, #4]
 800ec3c:	4631      	mov	r1, r6
 800ec3e:	f841 cb08 	str.w	ip, [r1], #8
 800ec42:	ee16 ca90 	vmov	ip, s13
 800ec46:	9106      	str	r1, [sp, #24]
 800ec48:	4639      	mov	r1, r7
 800ec4a:	edc6 4a01 	vstr	s9, [r6, #4]
 800ec4e:	f841 cb08 	str.w	ip, [r1], #8
 800ec52:	9102      	str	r1, [sp, #8]
 800ec54:	ee17 1a90 	vmov	r1, s15
 800ec58:	edc7 5a01 	vstr	s11, [r7, #4]
 800ec5c:	f840 1b08 	str.w	r1, [r0], #8
 800ec60:	ea5f 0159 	movs.w	r1, r9, lsr #1
 800ec64:	9001      	str	r0, [sp, #4]
 800ec66:	ed84 7a01 	vstr	s14, [r4, #4]
 800ec6a:	9107      	str	r1, [sp, #28]
 800ec6c:	f000 8135 	beq.w	800eeda <arm_cfft_radix8by4_f32+0x366>
 800ec70:	3b0c      	subs	r3, #12
 800ec72:	f102 0920 	add.w	r9, r2, #32
 800ec76:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800ec7a:	4622      	mov	r2, r4
 800ec7c:	468b      	mov	fp, r1
 800ec7e:	f105 0e10 	add.w	lr, r5, #16
 800ec82:	4423      	add	r3, r4
 800ec84:	f1a6 0c0c 	sub.w	ip, r6, #12
 800ec88:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800ec8c:	f106 0010 	add.w	r0, r6, #16
 800ec90:	f1a7 010c 	sub.w	r1, r7, #12
 800ec94:	f107 0510 	add.w	r5, r7, #16
 800ec98:	3c0c      	subs	r4, #12
 800ec9a:	3210      	adds	r2, #16
 800ec9c:	ed15 7a02 	vldr	s14, [r5, #-8]
 800eca0:	f1bb 0b01 	subs.w	fp, fp, #1
 800eca4:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800eca8:	f1ac 0c08 	sub.w	ip, ip, #8
 800ecac:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ecb0:	f10e 0e08 	add.w	lr, lr, #8
 800ecb4:	ee77 1a87 	vadd.f32	s3, s15, s14
 800ecb8:	ed52 4a02 	vldr	s9, [r2, #-8]
 800ecbc:	ed55 5a01 	vldr	s11, [r5, #-4]
 800ecc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ecc4:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800ecc8:	f10a 0a08 	add.w	sl, sl, #8
 800eccc:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800ecd0:	ed10 3a01 	vldr	s6, [r0, #-4]
 800ecd4:	ee37 4a25 	vadd.f32	s8, s14, s11
 800ecd8:	ed52 3a01 	vldr	s7, [r2, #-4]
 800ecdc:	ee37 7a65 	vsub.f32	s14, s14, s11
 800ece0:	f100 0008 	add.w	r0, r0, #8
 800ece4:	ee36 6a24 	vadd.f32	s12, s12, s9
 800ece8:	f1a1 0108 	sub.w	r1, r1, #8
 800ecec:	ee73 2a27 	vadd.f32	s5, s6, s15
 800ecf0:	f109 0910 	add.w	r9, r9, #16
 800ecf4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800ecf8:	f105 0508 	add.w	r5, r5, #8
 800ecfc:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800ed00:	ee37 5a66 	vsub.f32	s10, s14, s13
 800ed04:	ed50 5a03 	vldr	s11, [r0, #-12]
 800ed08:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800ed0c:	ed12 6a01 	vldr	s12, [r2, #-4]
 800ed10:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ed14:	ee74 5a25 	vadd.f32	s11, s8, s11
 800ed18:	f1a4 0408 	sub.w	r4, r4, #8
 800ed1c:	ee34 4a43 	vsub.f32	s8, s8, s6
 800ed20:	f108 0818 	add.w	r8, r8, #24
 800ed24:	ee32 0ae3 	vsub.f32	s0, s5, s7
 800ed28:	f102 0208 	add.w	r2, r2, #8
 800ed2c:	ee75 5a86 	vadd.f32	s11, s11, s12
 800ed30:	f1a3 0308 	sub.w	r3, r3, #8
 800ed34:	ee34 6a63 	vsub.f32	s12, s8, s7
 800ed38:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800ed3c:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800ed40:	ee35 5a24 	vadd.f32	s10, s10, s9
 800ed44:	ed94 4a04 	vldr	s8, [r4, #16]
 800ed48:	ee71 1ae4 	vsub.f32	s3, s3, s9
 800ed4c:	ed9c 3a04 	vldr	s6, [ip, #16]
 800ed50:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ed54:	edd1 7a04 	vldr	s15, [r1, #16]
 800ed58:	ee73 6a04 	vadd.f32	s13, s6, s8
 800ed5c:	ed93 8a04 	vldr	s16, [r3, #16]
 800ed60:	edd4 5a03 	vldr	s11, [r4, #12]
 800ed64:	ee33 3a44 	vsub.f32	s6, s6, s8
 800ed68:	ed9c 2a03 	vldr	s4, [ip, #12]
 800ed6c:	ee77 8ac8 	vsub.f32	s17, s15, s16
 800ed70:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800ed74:	ed91 1a03 	vldr	s2, [r1, #12]
 800ed78:	ee32 4a25 	vadd.f32	s8, s4, s11
 800ed7c:	edd3 2a03 	vldr	s5, [r3, #12]
 800ed80:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ed84:	ee70 0a88 	vadd.f32	s1, s1, s16
 800ed88:	ee73 4a41 	vsub.f32	s9, s6, s2
 800ed8c:	ee32 2a65 	vsub.f32	s4, s4, s11
 800ed90:	edcc 0a04 	vstr	s1, [ip, #16]
 800ed94:	ee74 0a41 	vsub.f32	s1, s8, s2
 800ed98:	edd1 6a03 	vldr	s13, [r1, #12]
 800ed9c:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800eda0:	ed93 9a03 	vldr	s18, [r3, #12]
 800eda4:	ee78 5a82 	vadd.f32	s11, s17, s4
 800eda8:	ee34 4a26 	vadd.f32	s8, s8, s13
 800edac:	ee70 0ae2 	vsub.f32	s1, s1, s5
 800edb0:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800edb4:	ee34 4a09 	vadd.f32	s8, s8, s18
 800edb8:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800edbc:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800edc0:	ed8c 4a03 	vstr	s8, [ip, #12]
 800edc4:	ee38 2ac2 	vsub.f32	s4, s17, s4
 800edc8:	ed1a 1a03 	vldr	s2, [sl, #-12]
 800edcc:	ed1a 4a04 	vldr	s8, [sl, #-16]
 800edd0:	ee60 2a01 	vmul.f32	s5, s0, s2
 800edd4:	ee64 6a81 	vmul.f32	s13, s9, s2
 800edd8:	ee20 8a04 	vmul.f32	s16, s0, s8
 800eddc:	ee64 4a84 	vmul.f32	s9, s9, s8
 800ede0:	ee25 0a01 	vmul.f32	s0, s10, s2
 800ede4:	ee25 5a04 	vmul.f32	s10, s10, s8
 800ede8:	ee25 4a84 	vmul.f32	s8, s11, s8
 800edec:	ee65 5a81 	vmul.f32	s11, s11, s2
 800edf0:	ee35 5a62 	vsub.f32	s10, s10, s5
 800edf4:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800edf8:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800edfc:	ee38 1a00 	vadd.f32	s2, s16, s0
 800ee00:	ed00 5a03 	vstr	s10, [r0, #-12]
 800ee04:	ed00 1a04 	vstr	s2, [r0, #-16]
 800ee08:	ed81 4a04 	vstr	s8, [r1, #16]
 800ee0c:	edc1 5a03 	vstr	s11, [r1, #12]
 800ee10:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 800ee14:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 800ee18:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 800ee1c:	ee66 2a25 	vmul.f32	s5, s12, s11
 800ee20:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800ee24:	ee21 4a85 	vmul.f32	s8, s3, s10
 800ee28:	ee60 7a85 	vmul.f32	s15, s1, s10
 800ee2c:	ee61 1aa5 	vmul.f32	s3, s3, s11
 800ee30:	ee26 6a05 	vmul.f32	s12, s12, s10
 800ee34:	ee60 5aa5 	vmul.f32	s11, s1, s11
 800ee38:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ee3c:	ee34 5a22 	vadd.f32	s10, s8, s5
 800ee40:	ee36 6a61 	vsub.f32	s12, s12, s3
 800ee44:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800ee48:	ed05 5a04 	vstr	s10, [r5, #-16]
 800ee4c:	ed05 6a03 	vstr	s12, [r5, #-12]
 800ee50:	edc4 5a04 	vstr	s11, [r4, #16]
 800ee54:	edc4 6a03 	vstr	s13, [r4, #12]
 800ee58:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 800ee5c:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 800ee60:	ee23 6aa2 	vmul.f32	s12, s7, s5
 800ee64:	ee67 5a27 	vmul.f32	s11, s14, s15
 800ee68:	ee63 6a27 	vmul.f32	s13, s6, s15
 800ee6c:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800ee70:	ee27 7a22 	vmul.f32	s14, s14, s5
 800ee74:	ee62 7a27 	vmul.f32	s15, s4, s15
 800ee78:	ee23 3a22 	vmul.f32	s6, s6, s5
 800ee7c:	ee22 2a22 	vmul.f32	s4, s4, s5
 800ee80:	ee36 6a25 	vadd.f32	s12, s12, s11
 800ee84:	ee37 7a63 	vsub.f32	s14, s14, s7
 800ee88:	ee36 2ac2 	vsub.f32	s4, s13, s4
 800ee8c:	ee77 7a83 	vadd.f32	s15, s15, s6
 800ee90:	ed02 6a04 	vstr	s12, [r2, #-16]
 800ee94:	ed02 7a03 	vstr	s14, [r2, #-12]
 800ee98:	ed83 2a04 	vstr	s4, [r3, #16]
 800ee9c:	edc3 7a03 	vstr	s15, [r3, #12]
 800eea0:	f47f aefc 	bne.w	800ec9c <arm_cfft_radix8by4_f32+0x128>
 800eea4:	9907      	ldr	r1, [sp, #28]
 800eea6:	9803      	ldr	r0, [sp, #12]
 800eea8:	00cb      	lsls	r3, r1, #3
 800eeaa:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800eeae:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800eeb2:	9103      	str	r1, [sp, #12]
 800eeb4:	9900      	ldr	r1, [sp, #0]
 800eeb6:	4419      	add	r1, r3
 800eeb8:	9100      	str	r1, [sp, #0]
 800eeba:	9905      	ldr	r1, [sp, #20]
 800eebc:	4419      	add	r1, r3
 800eebe:	9105      	str	r1, [sp, #20]
 800eec0:	9906      	ldr	r1, [sp, #24]
 800eec2:	4419      	add	r1, r3
 800eec4:	9106      	str	r1, [sp, #24]
 800eec6:	9902      	ldr	r1, [sp, #8]
 800eec8:	4419      	add	r1, r3
 800eeca:	9102      	str	r1, [sp, #8]
 800eecc:	9901      	ldr	r1, [sp, #4]
 800eece:	4419      	add	r1, r3
 800eed0:	9b04      	ldr	r3, [sp, #16]
 800eed2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eed6:	9101      	str	r1, [sp, #4]
 800eed8:	9304      	str	r3, [sp, #16]
 800eeda:	9b00      	ldr	r3, [sp, #0]
 800eedc:	9902      	ldr	r1, [sp, #8]
 800eede:	ed93 7a00 	vldr	s14, [r3]
 800eee2:	edd1 7a00 	vldr	s15, [r1]
 800eee6:	9a06      	ldr	r2, [sp, #24]
 800eee8:	ee37 6a27 	vadd.f32	s12, s14, s15
 800eeec:	9d01      	ldr	r5, [sp, #4]
 800eeee:	edd2 6a00 	vldr	s13, [r2]
 800eef2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eef6:	9b02      	ldr	r3, [sp, #8]
 800eef8:	ee76 3a86 	vadd.f32	s7, s13, s12
 800eefc:	ed95 3a00 	vldr	s6, [r5]
 800ef00:	ed93 5a01 	vldr	s10, [r3, #4]
 800ef04:	ee36 6a66 	vsub.f32	s12, s12, s13
 800ef08:	9b00      	ldr	r3, [sp, #0]
 800ef0a:	ee73 3a83 	vadd.f32	s7, s7, s6
 800ef0e:	edd5 2a01 	vldr	s5, [r5, #4]
 800ef12:	ed93 4a01 	vldr	s8, [r3, #4]
 800ef16:	ee36 6a43 	vsub.f32	s12, s12, s6
 800ef1a:	9b00      	ldr	r3, [sp, #0]
 800ef1c:	ee74 5a05 	vadd.f32	s11, s8, s10
 800ef20:	edd2 7a01 	vldr	s15, [r2, #4]
 800ef24:	edc3 3a00 	vstr	s7, [r3]
 800ef28:	ee34 4a45 	vsub.f32	s8, s8, s10
 800ef2c:	edd2 3a01 	vldr	s7, [r2, #4]
 800ef30:	ee77 4a87 	vadd.f32	s9, s15, s14
 800ef34:	ed95 2a01 	vldr	s4, [r5, #4]
 800ef38:	ee75 3aa3 	vadd.f32	s7, s11, s7
 800ef3c:	9d05      	ldr	r5, [sp, #20]
 800ef3e:	ee34 5a66 	vsub.f32	s10, s8, s13
 800ef42:	9b00      	ldr	r3, [sp, #0]
 800ef44:	ee74 4ae2 	vsub.f32	s9, s9, s5
 800ef48:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800ef4c:	ee73 3a82 	vadd.f32	s7, s7, s4
 800ef50:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ef52:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ef56:	4621      	mov	r1, r4
 800ef58:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800ef5c:	edc3 3a01 	vstr	s7, [r3, #4]
 800ef60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef64:	edd5 3a00 	vldr	s7, [r5]
 800ef68:	ee76 6a84 	vadd.f32	s13, s13, s8
 800ef6c:	ed95 7a01 	vldr	s14, [r5, #4]
 800ef70:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800ef74:	ee24 4aa3 	vmul.f32	s8, s9, s7
 800ef78:	2304      	movs	r3, #4
 800ef7a:	ee64 4a87 	vmul.f32	s9, s9, s14
 800ef7e:	ee25 7a07 	vmul.f32	s14, s10, s14
 800ef82:	ee25 5a23 	vmul.f32	s10, s10, s7
 800ef86:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800ef8a:	ee34 7a07 	vadd.f32	s14, s8, s14
 800ef8e:	ee35 5a64 	vsub.f32	s10, s10, s9
 800ef92:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800ef96:	ed82 7a00 	vstr	s14, [r2]
 800ef9a:	ed82 5a01 	vstr	s10, [r2, #4]
 800ef9e:	9a03      	ldr	r2, [sp, #12]
 800efa0:	edd2 4a01 	vldr	s9, [r2, #4]
 800efa4:	ed92 7a00 	vldr	s14, [r2]
 800efa8:	9a02      	ldr	r2, [sp, #8]
 800efaa:	ee26 5a07 	vmul.f32	s10, s12, s14
 800efae:	ee26 6a24 	vmul.f32	s12, s12, s9
 800efb2:	ee25 7a87 	vmul.f32	s14, s11, s14
 800efb6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800efba:	ee37 6a46 	vsub.f32	s12, s14, s12
 800efbe:	ee75 5a25 	vadd.f32	s11, s10, s11
 800efc2:	edc2 5a00 	vstr	s11, [r2]
 800efc6:	ed82 6a01 	vstr	s12, [r2, #4]
 800efca:	9a04      	ldr	r2, [sp, #16]
 800efcc:	9d01      	ldr	r5, [sp, #4]
 800efce:	edd2 5a01 	vldr	s11, [r2, #4]
 800efd2:	ed92 7a00 	vldr	s14, [r2]
 800efd6:	ee27 6a87 	vmul.f32	s12, s15, s14
 800efda:	ee26 7a87 	vmul.f32	s14, s13, s14
 800efde:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800efe2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800efe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efea:	ee76 6a26 	vadd.f32	s13, s12, s13
 800efee:	edc5 7a01 	vstr	s15, [r5, #4]
 800eff2:	edc5 6a00 	vstr	s13, [r5]
 800eff6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800eff8:	686a      	ldr	r2, [r5, #4]
 800effa:	f000 fb57 	bl	800f6ac <arm_radix8_butterfly_f32>
 800effe:	4630      	mov	r0, r6
 800f000:	4621      	mov	r1, r4
 800f002:	686a      	ldr	r2, [r5, #4]
 800f004:	2304      	movs	r3, #4
 800f006:	f000 fb51 	bl	800f6ac <arm_radix8_butterfly_f32>
 800f00a:	4638      	mov	r0, r7
 800f00c:	4621      	mov	r1, r4
 800f00e:	686a      	ldr	r2, [r5, #4]
 800f010:	2304      	movs	r3, #4
 800f012:	f000 fb4b 	bl	800f6ac <arm_radix8_butterfly_f32>
 800f016:	4621      	mov	r1, r4
 800f018:	686a      	ldr	r2, [r5, #4]
 800f01a:	2304      	movs	r3, #4
 800f01c:	9808      	ldr	r0, [sp, #32]
 800f01e:	b00d      	add	sp, #52	; 0x34
 800f020:	ecbd 8b04 	vpop	{d8-d9}
 800f024:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f028:	f000 bb40 	b.w	800f6ac <arm_radix8_butterfly_f32>

0800f02c <arm_cfft_f32>:
 800f02c:	2a01      	cmp	r2, #1
 800f02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f032:	4606      	mov	r6, r0
 800f034:	4617      	mov	r7, r2
 800f036:	460c      	mov	r4, r1
 800f038:	4698      	mov	r8, r3
 800f03a:	8805      	ldrh	r5, [r0, #0]
 800f03c:	d055      	beq.n	800f0ea <arm_cfft_f32+0xbe>
 800f03e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800f042:	d061      	beq.n	800f108 <arm_cfft_f32+0xdc>
 800f044:	d916      	bls.n	800f074 <arm_cfft_f32+0x48>
 800f046:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800f04a:	d01a      	beq.n	800f082 <arm_cfft_f32+0x56>
 800f04c:	d946      	bls.n	800f0dc <arm_cfft_f32+0xb0>
 800f04e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800f052:	d059      	beq.n	800f108 <arm_cfft_f32+0xdc>
 800f054:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800f058:	d105      	bne.n	800f066 <arm_cfft_f32+0x3a>
 800f05a:	2301      	movs	r3, #1
 800f05c:	6872      	ldr	r2, [r6, #4]
 800f05e:	4629      	mov	r1, r5
 800f060:	4620      	mov	r0, r4
 800f062:	f000 fb23 	bl	800f6ac <arm_radix8_butterfly_f32>
 800f066:	f1b8 0f00 	cmp.w	r8, #0
 800f06a:	d111      	bne.n	800f090 <arm_cfft_f32+0x64>
 800f06c:	2f01      	cmp	r7, #1
 800f06e:	d016      	beq.n	800f09e <arm_cfft_f32+0x72>
 800f070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f074:	2d20      	cmp	r5, #32
 800f076:	d047      	beq.n	800f108 <arm_cfft_f32+0xdc>
 800f078:	d934      	bls.n	800f0e4 <arm_cfft_f32+0xb8>
 800f07a:	2d40      	cmp	r5, #64	; 0x40
 800f07c:	d0ed      	beq.n	800f05a <arm_cfft_f32+0x2e>
 800f07e:	2d80      	cmp	r5, #128	; 0x80
 800f080:	d1f1      	bne.n	800f066 <arm_cfft_f32+0x3a>
 800f082:	4621      	mov	r1, r4
 800f084:	4630      	mov	r0, r6
 800f086:	f7ff fca9 	bl	800e9dc <arm_cfft_radix8by2_f32>
 800f08a:	f1b8 0f00 	cmp.w	r8, #0
 800f08e:	d0ed      	beq.n	800f06c <arm_cfft_f32+0x40>
 800f090:	68b2      	ldr	r2, [r6, #8]
 800f092:	4620      	mov	r0, r4
 800f094:	89b1      	ldrh	r1, [r6, #12]
 800f096:	f000 f83f 	bl	800f118 <arm_bitreversal_32>
 800f09a:	2f01      	cmp	r7, #1
 800f09c:	d1e8      	bne.n	800f070 <arm_cfft_f32+0x44>
 800f09e:	ee07 5a90 	vmov	s15, r5
 800f0a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f0ae:	2d00      	cmp	r5, #0
 800f0b0:	d0de      	beq.n	800f070 <arm_cfft_f32+0x44>
 800f0b2:	f104 0108 	add.w	r1, r4, #8
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	ed11 7a02 	vldr	s14, [r1, #-8]
 800f0bc:	3301      	adds	r3, #1
 800f0be:	ed51 7a01 	vldr	s15, [r1, #-4]
 800f0c2:	3108      	adds	r1, #8
 800f0c4:	429d      	cmp	r5, r3
 800f0c6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f0ca:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f0ce:	ed01 7a04 	vstr	s14, [r1, #-16]
 800f0d2:	ed41 7a03 	vstr	s15, [r1, #-12]
 800f0d6:	d1ef      	bne.n	800f0b8 <arm_cfft_f32+0x8c>
 800f0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0dc:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800f0e0:	d0bb      	beq.n	800f05a <arm_cfft_f32+0x2e>
 800f0e2:	e7c0      	b.n	800f066 <arm_cfft_f32+0x3a>
 800f0e4:	2d10      	cmp	r5, #16
 800f0e6:	d0cc      	beq.n	800f082 <arm_cfft_f32+0x56>
 800f0e8:	e7bd      	b.n	800f066 <arm_cfft_f32+0x3a>
 800f0ea:	b195      	cbz	r5, 800f112 <arm_cfft_f32+0xe6>
 800f0ec:	f101 030c 	add.w	r3, r1, #12
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	ed53 7a02 	vldr	s15, [r3, #-8]
 800f0f6:	3201      	adds	r2, #1
 800f0f8:	3308      	adds	r3, #8
 800f0fa:	eef1 7a67 	vneg.f32	s15, s15
 800f0fe:	4295      	cmp	r5, r2
 800f100:	ed43 7a04 	vstr	s15, [r3, #-16]
 800f104:	d1f5      	bne.n	800f0f2 <arm_cfft_f32+0xc6>
 800f106:	e79a      	b.n	800f03e <arm_cfft_f32+0x12>
 800f108:	4621      	mov	r1, r4
 800f10a:	4630      	mov	r0, r6
 800f10c:	f7ff fd32 	bl	800eb74 <arm_cfft_radix8by4_f32>
 800f110:	e7a9      	b.n	800f066 <arm_cfft_f32+0x3a>
 800f112:	2b00      	cmp	r3, #0
 800f114:	d0ac      	beq.n	800f070 <arm_cfft_f32+0x44>
 800f116:	e7bb      	b.n	800f090 <arm_cfft_f32+0x64>

0800f118 <arm_bitreversal_32>:
 800f118:	b321      	cbz	r1, 800f164 <arm_bitreversal_32+0x4c>
 800f11a:	f102 0c02 	add.w	ip, r2, #2
 800f11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f122:	4690      	mov	r8, r2
 800f124:	2500      	movs	r5, #0
 800f126:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 800f12a:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 800f12e:	3502      	adds	r5, #2
 800f130:	08a4      	lsrs	r4, r4, #2
 800f132:	089b      	lsrs	r3, r3, #2
 800f134:	428d      	cmp	r5, r1
 800f136:	ea4f 0784 	mov.w	r7, r4, lsl #2
 800f13a:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 800f13e:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800f142:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800f146:	f107 0704 	add.w	r7, r7, #4
 800f14a:	f106 0604 	add.w	r6, r6, #4
 800f14e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800f152:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 800f156:	59c4      	ldr	r4, [r0, r7]
 800f158:	5983      	ldr	r3, [r0, r6]
 800f15a:	51c3      	str	r3, [r0, r7]
 800f15c:	5184      	str	r4, [r0, r6]
 800f15e:	d3e2      	bcc.n	800f126 <arm_bitreversal_32+0xe>
 800f160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f164:	4770      	bx	lr
 800f166:	bf00      	nop

0800f168 <arm_fir_decimate_init_f32>:
 800f168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f16c:	e9dd 8c06 	ldrd	r8, ip, [sp, #24]
 800f170:	fbbc f4f2 	udiv	r4, ip, r2
 800f174:	fb02 c414 	mls	r4, r2, r4, ip
 800f178:	b99c      	cbnz	r4, 800f1a2 <arm_fir_decimate_init_f32+0x3a>
 800f17a:	460f      	mov	r7, r1
 800f17c:	4616      	mov	r6, r2
 800f17e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800f182:	4605      	mov	r5, r0
 800f184:	443a      	add	r2, r7
 800f186:	8069      	strh	r1, [r5, #2]
 800f188:	6043      	str	r3, [r0, #4]
 800f18a:	4621      	mov	r1, r4
 800f18c:	4462      	add	r2, ip
 800f18e:	4640      	mov	r0, r8
 800f190:	0092      	lsls	r2, r2, #2
 800f192:	f000 fd89 	bl	800fca8 <memset>
 800f196:	4620      	mov	r0, r4
 800f198:	f8c5 8008 	str.w	r8, [r5, #8]
 800f19c:	702e      	strb	r6, [r5, #0]
 800f19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1a2:	f06f 0001 	mvn.w	r0, #1
 800f1a6:	e7fa      	b.n	800f19e <arm_fir_decimate_init_f32+0x36>

0800f1a8 <arm_fir_decimate_f32>:
 800f1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ac:	4605      	mov	r5, r0
 800f1ae:	b08d      	sub	sp, #52	; 0x34
 800f1b0:	4694      	mov	ip, r2
 800f1b2:	782c      	ldrb	r4, [r5, #0]
 800f1b4:	886f      	ldrh	r7, [r5, #2]
 800f1b6:	9001      	str	r0, [sp, #4]
 800f1b8:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800f1bc:	68ae      	ldr	r6, [r5, #8]
 800f1be:	4438      	add	r0, r7
 800f1c0:	686d      	ldr	r5, [r5, #4]
 800f1c2:	9207      	str	r2, [sp, #28]
 800f1c4:	970a      	str	r7, [sp, #40]	; 0x28
 800f1c6:	eb06 0b80 	add.w	fp, r6, r0, lsl #2
 800f1ca:	9508      	str	r5, [sp, #32]
 800f1cc:	fbb3 f3f4 	udiv	r3, r3, r4
 800f1d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1d2:	089b      	lsrs	r3, r3, #2
 800f1d4:	9309      	str	r3, [sp, #36]	; 0x24
 800f1d6:	f000 80ef 	beq.w	800f3b8 <arm_fir_decimate_f32+0x210>
 800f1da:	08ba      	lsrs	r2, r7, #2
 800f1dc:	462b      	mov	r3, r5
 800f1de:	3510      	adds	r5, #16
 800f1e0:	f007 0703 	and.w	r7, r7, #3
 800f1e4:	9205      	str	r2, [sp, #20]
 800f1e6:	0112      	lsls	r2, r2, #4
 800f1e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1ea:	f10c 0910 	add.w	r9, ip, #16
 800f1ee:	4413      	add	r3, r2
 800f1f0:	9100      	str	r1, [sp, #0]
 800f1f2:	eb05 0e02 	add.w	lr, r5, r2
 800f1f6:	4611      	mov	r1, r2
 800f1f8:	9503      	str	r5, [sp, #12]
 800f1fa:	9704      	str	r7, [sp, #16]
 800f1fc:	9002      	str	r0, [sp, #8]
 800f1fe:	9306      	str	r3, [sp, #24]
 800f200:	00a4      	lsls	r4, r4, #2
 800f202:	4658      	mov	r0, fp
 800f204:	9a00      	ldr	r2, [sp, #0]
 800f206:	4623      	mov	r3, r4
 800f208:	f852 5b04 	ldr.w	r5, [r2], #4
 800f20c:	3b01      	subs	r3, #1
 800f20e:	f840 5b04 	str.w	r5, [r0], #4
 800f212:	d1f9      	bne.n	800f208 <arm_fir_decimate_f32+0x60>
 800f214:	9b01      	ldr	r3, [sp, #4]
 800f216:	00a4      	lsls	r4, r4, #2
 800f218:	eddf 0abe 	vldr	s1, [pc, #760]	; 800f514 <arm_fir_decimate_f32+0x36c>
 800f21c:	f893 8000 	ldrb.w	r8, [r3]
 800f220:	44a3      	add	fp, r4
 800f222:	9b00      	ldr	r3, [sp, #0]
 800f224:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800f228:	4423      	add	r3, r4
 800f22a:	eb06 0708 	add.w	r7, r6, r8
 800f22e:	9300      	str	r3, [sp, #0]
 800f230:	eb07 0c08 	add.w	ip, r7, r8
 800f234:	9b05      	ldr	r3, [sp, #20]
 800f236:	eb0c 0a08 	add.w	sl, ip, r8
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	f000 815c 	beq.w	800f4f8 <arm_fir_decimate_f32+0x350>
 800f240:	eef0 4a60 	vmov.f32	s9, s1
 800f244:	9b03      	ldr	r3, [sp, #12]
 800f246:	eef0 7a60 	vmov.f32	s15, s1
 800f24a:	f106 0510 	add.w	r5, r6, #16
 800f24e:	eeb0 7a60 	vmov.f32	s14, s1
 800f252:	f107 0410 	add.w	r4, r7, #16
 800f256:	f10c 0010 	add.w	r0, ip, #16
 800f25a:	f10a 0210 	add.w	r2, sl, #16
 800f25e:	ed53 5a04 	vldr	s11, [r3, #-16]
 800f262:	3310      	adds	r3, #16
 800f264:	ed12 5a04 	vldr	s10, [r2, #-16]
 800f268:	3510      	adds	r5, #16
 800f26a:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800f26e:	3410      	adds	r4, #16
 800f270:	ed14 1a08 	vldr	s2, [r4, #-32]	; 0xffffffe0
 800f274:	3010      	adds	r0, #16
 800f276:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 800f27a:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800f27e:	ee25 1a81 	vmul.f32	s2, s11, s2
 800f282:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 800f286:	ee65 3aa3 	vmul.f32	s7, s11, s7
 800f28a:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 800f28e:	ee65 5a85 	vmul.f32	s11, s11, s10
 800f292:	ed15 2a07 	vldr	s4, [r5, #-28]	; 0xffffffe4
 800f296:	ed12 5a03 	vldr	s10, [r2, #-12]
 800f29a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f29e:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800f2a2:	ee73 1aa4 	vadd.f32	s3, s7, s9
 800f2a6:	ee26 2a02 	vmul.f32	s4, s12, s4
 800f2aa:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800f2ae:	ee31 1a27 	vadd.f32	s2, s2, s15
 800f2b2:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800f2b6:	ee66 7a22 	vmul.f32	s15, s12, s5
 800f2ba:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800f2be:	ee26 3a03 	vmul.f32	s6, s12, s6
 800f2c2:	ed50 4a06 	vldr	s9, [r0, #-24]	; 0xffffffe8
 800f2c6:	ee75 5aa0 	vadd.f32	s11, s11, s1
 800f2ca:	ed52 0a02 	vldr	s1, [r2, #-8]
 800f2ce:	ee26 6a05 	vmul.f32	s12, s12, s10
 800f2d2:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 800f2d6:	ee72 2a07 	vadd.f32	s5, s4, s14
 800f2da:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800f2de:	ee77 7a81 	vadd.f32	s15, s15, s2
 800f2e2:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 800f2e6:	ee33 3a21 	vadd.f32	s6, s6, s3
 800f2ea:	ed14 1a05 	vldr	s2, [r4, #-20]	; 0xffffffec
 800f2ee:	ee66 3aa3 	vmul.f32	s7, s13, s7
 800f2f2:	ed52 1a01 	vldr	s3, [r2, #-4]
 800f2f6:	ee26 4a84 	vmul.f32	s8, s13, s8
 800f2fa:	459e      	cmp	lr, r3
 800f2fc:	ee66 4aa4 	vmul.f32	s9, s13, s9
 800f300:	f102 0210 	add.w	r2, r2, #16
 800f304:	ee66 6aa0 	vmul.f32	s13, s13, s1
 800f308:	ee36 6a25 	vadd.f32	s12, s12, s11
 800f30c:	ee25 7a07 	vmul.f32	s14, s10, s14
 800f310:	ee34 4a27 	vadd.f32	s8, s8, s15
 800f314:	ee74 4a83 	vadd.f32	s9, s9, s6
 800f318:	ee65 7a01 	vmul.f32	s15, s10, s2
 800f31c:	ee25 3a02 	vmul.f32	s6, s10, s4
 800f320:	ee73 3aa2 	vadd.f32	s7, s7, s5
 800f324:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f328:	ee25 5a21 	vmul.f32	s10, s10, s3
 800f32c:	ee37 7a23 	vadd.f32	s14, s14, s7
 800f330:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f334:	ee73 4a24 	vadd.f32	s9, s6, s9
 800f338:	ee75 0a26 	vadd.f32	s1, s10, s13
 800f33c:	d18f      	bne.n	800f25e <arm_fir_decimate_f32+0xb6>
 800f33e:	440e      	add	r6, r1
 800f340:	440f      	add	r7, r1
 800f342:	448c      	add	ip, r1
 800f344:	eb0a 0001 	add.w	r0, sl, r1
 800f348:	9a06      	ldr	r2, [sp, #24]
 800f34a:	9b04      	ldr	r3, [sp, #16]
 800f34c:	b1db      	cbz	r3, 800f386 <arm_fir_decimate_f32+0x1de>
 800f34e:	ecb2 5a01 	vldmia	r2!, {s10}
 800f352:	3b01      	subs	r3, #1
 800f354:	ecf6 2a01 	vldmia	r6!, {s5}
 800f358:	ecf7 3a01 	vldmia	r7!, {s7}
 800f35c:	ecbc 4a01 	vldmia	ip!, {s8}
 800f360:	ee65 2a22 	vmul.f32	s5, s10, s5
 800f364:	ecf0 6a01 	vldmia	r0!, {s13}
 800f368:	ee65 3a23 	vmul.f32	s7, s10, s7
 800f36c:	ee25 4a04 	vmul.f32	s8, s10, s8
 800f370:	ee25 5a26 	vmul.f32	s10, s10, s13
 800f374:	ee37 7a22 	vadd.f32	s14, s14, s5
 800f378:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800f37c:	ee74 4a84 	vadd.f32	s9, s9, s8
 800f380:	ee70 0a85 	vadd.f32	s1, s1, s10
 800f384:	d1e3      	bne.n	800f34e <arm_fir_decimate_f32+0x1a6>
 800f386:	9b02      	ldr	r3, [sp, #8]
 800f388:	eb0a 0608 	add.w	r6, sl, r8
 800f38c:	ed09 7a04 	vstr	s14, [r9, #-16]
 800f390:	f109 0910 	add.w	r9, r9, #16
 800f394:	3b01      	subs	r3, #1
 800f396:	ed49 7a07 	vstr	s15, [r9, #-28]	; 0xffffffe4
 800f39a:	ed49 4a06 	vstr	s9, [r9, #-24]	; 0xffffffe8
 800f39e:	ed49 0a05 	vstr	s1, [r9, #-20]	; 0xffffffec
 800f3a2:	9302      	str	r3, [sp, #8]
 800f3a4:	d002      	beq.n	800f3ac <arm_fir_decimate_f32+0x204>
 800f3a6:	9b01      	ldr	r3, [sp, #4]
 800f3a8:	781c      	ldrb	r4, [r3, #0]
 800f3aa:	e729      	b.n	800f200 <arm_fir_decimate_f32+0x58>
 800f3ac:	9b07      	ldr	r3, [sp, #28]
 800f3ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3b0:	9900      	ldr	r1, [sp, #0]
 800f3b2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800f3b6:	9307      	str	r3, [sp, #28]
 800f3b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3ba:	f013 0803 	ands.w	r8, r3, #3
 800f3be:	d067      	beq.n	800f490 <arm_fir_decimate_f32+0x2e8>
 800f3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3c2:	9808      	ldr	r0, [sp, #32]
 800f3c4:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 800f3c8:	9d07      	ldr	r5, [sp, #28]
 800f3ca:	4602      	mov	r2, r0
 800f3cc:	f003 0703 	and.w	r7, r3, #3
 800f3d0:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
 800f3d4:	f8cd e000 	str.w	lr, [sp]
 800f3d8:	3210      	adds	r2, #16
 800f3da:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800f3de:	eb00 090c 	add.w	r9, r0, ip
 800f3e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f3e6:	eb02 040c 	add.w	r4, r2, ip
 800f3ea:	46aa      	mov	sl, r5
 800f3ec:	9203      	str	r2, [sp, #12]
 800f3ee:	f89e 5000 	ldrb.w	r5, [lr]
 800f3f2:	4658      	mov	r0, fp
 800f3f4:	460a      	mov	r2, r1
 800f3f6:	462b      	mov	r3, r5
 800f3f8:	ecf2 7a01 	vldmia	r2!, {s15}
 800f3fc:	3b01      	subs	r3, #1
 800f3fe:	ece0 7a01 	vstmia	r0!, {s15}
 800f402:	d1f9      	bne.n	800f3f8 <arm_fir_decimate_f32+0x250>
 800f404:	00ad      	lsls	r5, r5, #2
 800f406:	9b00      	ldr	r3, [sp, #0]
 800f408:	4429      	add	r1, r5
 800f40a:	44ab      	add	fp, r5
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d07c      	beq.n	800f50a <arm_fir_decimate_f32+0x362>
 800f410:	9b03      	ldr	r3, [sp, #12]
 800f412:	f106 0210 	add.w	r2, r6, #16
 800f416:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800f514 <arm_fir_decimate_f32+0x36c>
 800f41a:	ed13 7a04 	vldr	s14, [r3, #-16]
 800f41e:	3310      	adds	r3, #16
 800f420:	ed52 6a04 	vldr	s13, [r2, #-16]
 800f424:	3210      	adds	r2, #16
 800f426:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 800f42a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f42e:	ed52 5a07 	vldr	s11, [r2, #-28]	; 0xffffffe4
 800f432:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800f436:	ee26 6a25 	vmul.f32	s12, s12, s11
 800f43a:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
 800f43e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f442:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 800f446:	ee26 7a85 	vmul.f32	s14, s13, s10
 800f44a:	ed52 6a05 	vldr	s13, [r2, #-20]	; 0xffffffec
 800f44e:	429c      	cmp	r4, r3
 800f450:	ee76 7a27 	vadd.f32	s15, s12, s15
 800f454:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800f458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f45c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f460:	d1db      	bne.n	800f41a <arm_fir_decimate_f32+0x272>
 800f462:	eb06 000c 	add.w	r0, r6, ip
 800f466:	464a      	mov	r2, r9
 800f468:	b157      	cbz	r7, 800f480 <arm_fir_decimate_f32+0x2d8>
 800f46a:	463b      	mov	r3, r7
 800f46c:	ecb2 7a01 	vldmia	r2!, {s14}
 800f470:	3b01      	subs	r3, #1
 800f472:	ecf0 6a01 	vldmia	r0!, {s13}
 800f476:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f47a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f47e:	d1f5      	bne.n	800f46c <arm_fir_decimate_f32+0x2c4>
 800f480:	f89e 3000 	ldrb.w	r3, [lr]
 800f484:	ecea 7a01 	vstmia	sl!, {s15}
 800f488:	45c2      	cmp	sl, r8
 800f48a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800f48e:	d1ae      	bne.n	800f3ee <arm_fir_decimate_f32+0x246>
 800f490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f492:	1e5c      	subs	r4, r3, #1
 800f494:	9b01      	ldr	r3, [sp, #4]
 800f496:	08a5      	lsrs	r5, r4, #2
 800f498:	689f      	ldr	r7, [r3, #8]
 800f49a:	d01d      	beq.n	800f4d8 <arm_fir_decimate_f32+0x330>
 800f49c:	f106 0210 	add.w	r2, r6, #16
 800f4a0:	f107 0310 	add.w	r3, r7, #16
 800f4a4:	4629      	mov	r1, r5
 800f4a6:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800f4aa:	3901      	subs	r1, #1
 800f4ac:	f102 0210 	add.w	r2, r2, #16
 800f4b0:	f103 0310 	add.w	r3, r3, #16
 800f4b4:	f843 0c20 	str.w	r0, [r3, #-32]
 800f4b8:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 800f4bc:	f843 0c1c 	str.w	r0, [r3, #-28]
 800f4c0:	f852 0c18 	ldr.w	r0, [r2, #-24]
 800f4c4:	f843 0c18 	str.w	r0, [r3, #-24]
 800f4c8:	f852 0c14 	ldr.w	r0, [r2, #-20]
 800f4cc:	f843 0c14 	str.w	r0, [r3, #-20]
 800f4d0:	d1e9      	bne.n	800f4a6 <arm_fir_decimate_f32+0x2fe>
 800f4d2:	012d      	lsls	r5, r5, #4
 800f4d4:	442e      	add	r6, r5
 800f4d6:	442f      	add	r7, r5
 800f4d8:	f014 0403 	ands.w	r4, r4, #3
 800f4dc:	d009      	beq.n	800f4f2 <arm_fir_decimate_f32+0x34a>
 800f4de:	6833      	ldr	r3, [r6, #0]
 800f4e0:	3c01      	subs	r4, #1
 800f4e2:	603b      	str	r3, [r7, #0]
 800f4e4:	d005      	beq.n	800f4f2 <arm_fir_decimate_f32+0x34a>
 800f4e6:	6873      	ldr	r3, [r6, #4]
 800f4e8:	2c01      	cmp	r4, #1
 800f4ea:	607b      	str	r3, [r7, #4]
 800f4ec:	d001      	beq.n	800f4f2 <arm_fir_decimate_f32+0x34a>
 800f4ee:	68b3      	ldr	r3, [r6, #8]
 800f4f0:	60bb      	str	r3, [r7, #8]
 800f4f2:	b00d      	add	sp, #52	; 0x34
 800f4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f8:	4650      	mov	r0, sl
 800f4fa:	9a08      	ldr	r2, [sp, #32]
 800f4fc:	eef0 4a60 	vmov.f32	s9, s1
 800f500:	eef0 7a60 	vmov.f32	s15, s1
 800f504:	eeb0 7a60 	vmov.f32	s14, s1
 800f508:	e71f      	b.n	800f34a <arm_fir_decimate_f32+0x1a2>
 800f50a:	9a08      	ldr	r2, [sp, #32]
 800f50c:	4630      	mov	r0, r6
 800f50e:	eddf 7a01 	vldr	s15, [pc, #4]	; 800f514 <arm_fir_decimate_f32+0x36c>
 800f512:	e7a9      	b.n	800f468 <arm_fir_decimate_f32+0x2c0>
 800f514:	00000000 	.word	0x00000000

0800f518 <arm_cmplx_mult_cmplx_f32>:
 800f518:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800f51c:	b4f0      	push	{r4, r5, r6, r7}
 800f51e:	d073      	beq.n	800f608 <arm_cmplx_mult_cmplx_f32+0xf0>
 800f520:	f100 0620 	add.w	r6, r0, #32
 800f524:	f101 0520 	add.w	r5, r1, #32
 800f528:	f102 0420 	add.w	r4, r2, #32
 800f52c:	4667      	mov	r7, ip
 800f52e:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800f532:	3f01      	subs	r7, #1
 800f534:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 800f538:	f105 0520 	add.w	r5, r5, #32
 800f53c:	ed15 7a10 	vldr	s14, [r5, #-64]	; 0xffffffc0
 800f540:	f106 0620 	add.w	r6, r6, #32
 800f544:	ed56 6a0f 	vldr	s13, [r6, #-60]	; 0xffffffc4
 800f548:	f104 0420 	add.w	r4, r4, #32
 800f54c:	ee27 6a87 	vmul.f32	s12, s15, s14
 800f550:	ee26 7a87 	vmul.f32	s14, s13, s14
 800f554:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f558:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800f55c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f560:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f564:	ed44 7a0f 	vstr	s15, [r4, #-60]	; 0xffffffc4
 800f568:	ed44 6a10 	vstr	s13, [r4, #-64]	; 0xffffffc0
 800f56c:	ed55 5a0d 	vldr	s11, [r5, #-52]	; 0xffffffcc
 800f570:	ed56 7a0e 	vldr	s15, [r6, #-56]	; 0xffffffc8
 800f574:	ed15 7a0e 	vldr	s14, [r5, #-56]	; 0xffffffc8
 800f578:	ed56 6a0d 	vldr	s13, [r6, #-52]	; 0xffffffcc
 800f57c:	ee27 6a87 	vmul.f32	s12, s15, s14
 800f580:	ee26 7a87 	vmul.f32	s14, s13, s14
 800f584:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f588:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800f58c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f590:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f594:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 800f598:	ed44 6a0e 	vstr	s13, [r4, #-56]	; 0xffffffc8
 800f59c:	ed55 5a0b 	vldr	s11, [r5, #-44]	; 0xffffffd4
 800f5a0:	ed56 7a0c 	vldr	s15, [r6, #-48]	; 0xffffffd0
 800f5a4:	ed15 7a0c 	vldr	s14, [r5, #-48]	; 0xffffffd0
 800f5a8:	ed56 6a0b 	vldr	s13, [r6, #-44]	; 0xffffffd4
 800f5ac:	ee27 6a87 	vmul.f32	s12, s15, s14
 800f5b0:	ee26 7a87 	vmul.f32	s14, s13, s14
 800f5b4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f5b8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800f5bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f5c0:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f5c4:	ed44 7a0b 	vstr	s15, [r4, #-44]	; 0xffffffd4
 800f5c8:	ed44 6a0c 	vstr	s13, [r4, #-48]	; 0xffffffd0
 800f5cc:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 800f5d0:	ed15 7a0a 	vldr	s14, [r5, #-40]	; 0xffffffd8
 800f5d4:	ed56 6a09 	vldr	s13, [r6, #-36]	; 0xffffffdc
 800f5d8:	ed55 5a09 	vldr	s11, [r5, #-36]	; 0xffffffdc
 800f5dc:	ee27 6a87 	vmul.f32	s12, s15, s14
 800f5e0:	ee26 7a87 	vmul.f32	s14, s13, s14
 800f5e4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f5e8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800f5ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f5f0:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f5f4:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 800f5f8:	ed44 6a0a 	vstr	s13, [r4, #-40]	; 0xffffffd8
 800f5fc:	d197      	bne.n	800f52e <arm_cmplx_mult_cmplx_f32+0x16>
 800f5fe:	ea4f 144c 	mov.w	r4, ip, lsl #5
 800f602:	4420      	add	r0, r4
 800f604:	4421      	add	r1, r4
 800f606:	4422      	add	r2, r4
 800f608:	f013 0303 	ands.w	r3, r3, #3
 800f60c:	d04b      	beq.n	800f6a6 <arm_cmplx_mult_cmplx_f32+0x18e>
 800f60e:	edd0 5a00 	vldr	s11, [r0]
 800f612:	3b01      	subs	r3, #1
 800f614:	edd1 7a00 	vldr	s15, [r1]
 800f618:	edd0 6a01 	vldr	s13, [r0, #4]
 800f61c:	ed91 7a01 	vldr	s14, [r1, #4]
 800f620:	ee27 6aa5 	vmul.f32	s12, s15, s11
 800f624:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f628:	ee67 6a26 	vmul.f32	s13, s14, s13
 800f62c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f630:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f634:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f638:	edc2 6a00 	vstr	s13, [r2]
 800f63c:	edc2 7a01 	vstr	s15, [r2, #4]
 800f640:	d031      	beq.n	800f6a6 <arm_cmplx_mult_cmplx_f32+0x18e>
 800f642:	edd0 7a02 	vldr	s15, [r0, #8]
 800f646:	2b01      	cmp	r3, #1
 800f648:	ed91 7a02 	vldr	s14, [r1, #8]
 800f64c:	edd0 6a03 	vldr	s13, [r0, #12]
 800f650:	edd1 5a03 	vldr	s11, [r1, #12]
 800f654:	ee27 6a87 	vmul.f32	s12, s15, s14
 800f658:	ee26 7a87 	vmul.f32	s14, s13, s14
 800f65c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f660:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800f664:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f668:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f66c:	edc2 7a03 	vstr	s15, [r2, #12]
 800f670:	edc2 6a02 	vstr	s13, [r2, #8]
 800f674:	d017      	beq.n	800f6a6 <arm_cmplx_mult_cmplx_f32+0x18e>
 800f676:	edd0 7a04 	vldr	s15, [r0, #16]
 800f67a:	ed91 7a04 	vldr	s14, [r1, #16]
 800f67e:	edd0 6a05 	vldr	s13, [r0, #20]
 800f682:	edd1 5a05 	vldr	s11, [r1, #20]
 800f686:	ee27 6a87 	vmul.f32	s12, s15, s14
 800f68a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800f68e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f692:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800f696:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f69a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f69e:	edc2 7a05 	vstr	s15, [r2, #20]
 800f6a2:	edc2 6a04 	vstr	s13, [r2, #16]
 800f6a6:	bcf0      	pop	{r4, r5, r6, r7}
 800f6a8:	4770      	bx	lr
 800f6aa:	bf00      	nop

0800f6ac <arm_radix8_butterfly_f32>:
 800f6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b0:	ed2d 8b10 	vpush	{d8-d15}
 800f6b4:	b095      	sub	sp, #84	; 0x54
 800f6b6:	468a      	mov	sl, r1
 800f6b8:	468b      	mov	fp, r1
 800f6ba:	eddf 8abb 	vldr	s17, [pc, #748]	; 800f9a8 <arm_radix8_butterfly_f32+0x2fc>
 800f6be:	9012      	str	r0, [sp, #72]	; 0x48
 800f6c0:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	3304      	adds	r3, #4
 800f6c8:	9313      	str	r3, [sp, #76]	; 0x4c
 800f6ca:	ea4f 02db 	mov.w	r2, fp, lsr #3
 800f6ce:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f6d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f6d4:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800f6d8:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800f6dc:	920f      	str	r2, [sp, #60]	; 0x3c
 800f6de:	9303      	str	r3, [sp, #12]
 800f6e0:	0153      	lsls	r3, r2, #5
 800f6e2:	0114      	lsls	r4, r2, #4
 800f6e4:	eba9 0002 	sub.w	r0, r9, r2
 800f6e8:	18ce      	adds	r6, r1, r3
 800f6ea:	9302      	str	r3, [sp, #8]
 800f6ec:	0097      	lsls	r7, r2, #2
 800f6ee:	4613      	mov	r3, r2
 800f6f0:	eb06 0509 	add.w	r5, r6, r9
 800f6f4:	9004      	str	r0, [sp, #16]
 800f6f6:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 800f6fa:	1bd2      	subs	r2, r2, r7
 800f6fc:	eb05 0109 	add.w	r1, r5, r9
 800f700:	441f      	add	r7, r3
 800f702:	9405      	str	r4, [sp, #20]
 800f704:	f109 0004 	add.w	r0, r9, #4
 800f708:	9101      	str	r1, [sp, #4]
 800f70a:	1d21      	adds	r1, r4, #4
 800f70c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f70e:	f04f 0e00 	mov.w	lr, #0
 800f712:	9c01      	ldr	r4, [sp, #4]
 800f714:	4418      	add	r0, r3
 800f716:	4419      	add	r1, r3
 800f718:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800f71c:	9b02      	ldr	r3, [sp, #8]
 800f71e:	00fc      	lsls	r4, r7, #3
 800f720:	18d7      	adds	r7, r2, r3
 800f722:	9b04      	ldr	r3, [sp, #16]
 800f724:	9406      	str	r4, [sp, #24]
 800f726:	00db      	lsls	r3, r3, #3
 800f728:	9c01      	ldr	r4, [sp, #4]
 800f72a:	9307      	str	r3, [sp, #28]
 800f72c:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800f730:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800f734:	9304      	str	r3, [sp, #16]
 800f736:	9b03      	ldr	r3, [sp, #12]
 800f738:	edd6 6a00 	vldr	s13, [r6]
 800f73c:	44de      	add	lr, fp
 800f73e:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800f742:	ed94 7a00 	vldr	s14, [r4]
 800f746:	45f2      	cmp	sl, lr
 800f748:	ed10 6a01 	vldr	s12, [r0, #-4]
 800f74c:	ee37 2aa6 	vadd.f32	s4, s15, s13
 800f750:	edd5 2a00 	vldr	s5, [r5]
 800f754:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f758:	edd7 3a00 	vldr	s7, [r7]
 800f75c:	ed11 5a01 	vldr	s10, [r1, #-4]
 800f760:	ee36 3a22 	vadd.f32	s6, s12, s5
 800f764:	edd2 6a00 	vldr	s13, [r2]
 800f768:	ee75 5a07 	vadd.f32	s11, s10, s14
 800f76c:	ee36 4aa3 	vadd.f32	s8, s13, s7
 800f770:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800f774:	ee72 4a25 	vadd.f32	s9, s4, s11
 800f778:	ee73 3a04 	vadd.f32	s7, s6, s8
 800f77c:	ee35 5a47 	vsub.f32	s10, s10, s14
 800f780:	ee36 7a62 	vsub.f32	s14, s12, s5
 800f784:	ee32 2a65 	vsub.f32	s4, s4, s11
 800f788:	ee74 5aa3 	vadd.f32	s11, s9, s7
 800f78c:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800f790:	ee37 6a66 	vsub.f32	s12, s14, s13
 800f794:	ed4c 5a01 	vstr	s11, [ip, #-4]
 800f798:	ee33 3a44 	vsub.f32	s6, s6, s8
 800f79c:	edc6 4a00 	vstr	s9, [r6]
 800f7a0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f7a4:	ed97 4a01 	vldr	s8, [r7, #4]
 800f7a8:	ee66 6a28 	vmul.f32	s13, s12, s17
 800f7ac:	edd0 5a00 	vldr	s11, [r0]
 800f7b0:	ed95 6a01 	vldr	s12, [r5, #4]
 800f7b4:	ee27 7a28 	vmul.f32	s14, s14, s17
 800f7b8:	edd2 3a01 	vldr	s7, [r2, #4]
 800f7bc:	ee77 2aa6 	vadd.f32	s5, s15, s13
 800f7c0:	ee75 4ac6 	vsub.f32	s9, s11, s12
 800f7c4:	ed96 1a01 	vldr	s2, [r6, #4]
 800f7c8:	ee33 0ac4 	vsub.f32	s0, s7, s8
 800f7cc:	edd4 0a01 	vldr	s1, [r4, #4]
 800f7d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f7d4:	eddc 6a00 	vldr	s13, [ip]
 800f7d8:	ee75 5a86 	vadd.f32	s11, s11, s12
 800f7dc:	ed91 6a00 	vldr	s12, [r1]
 800f7e0:	ee73 3a84 	vadd.f32	s7, s7, s8
 800f7e4:	ee74 1a80 	vadd.f32	s3, s9, s0
 800f7e8:	ee36 4a81 	vadd.f32	s8, s13, s2
 800f7ec:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800f7f0:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800f7f4:	ee36 1a20 	vadd.f32	s2, s12, s1
 800f7f8:	ee61 1aa8 	vmul.f32	s3, s3, s17
 800f7fc:	ee36 6a60 	vsub.f32	s12, s12, s1
 800f800:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800f804:	ee75 0aa3 	vadd.f32	s1, s11, s7
 800f808:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800f80c:	ee74 3a01 	vadd.f32	s7, s8, s2
 800f810:	ee34 4a41 	vsub.f32	s8, s8, s2
 800f814:	ee36 1a21 	vadd.f32	s2, s12, s3
 800f818:	ee33 0aa0 	vadd.f32	s0, s7, s1
 800f81c:	ee36 6a61 	vsub.f32	s12, s12, s3
 800f820:	ee73 3ae0 	vsub.f32	s7, s7, s1
 800f824:	ee76 1aa4 	vadd.f32	s3, s13, s9
 800f828:	ed8c 0a00 	vstr	s0, [ip]
 800f82c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800f830:	449c      	add	ip, r3
 800f832:	ee75 4a07 	vadd.f32	s9, s10, s14
 800f836:	edc6 3a01 	vstr	s7, [r6, #4]
 800f83a:	ee35 7a47 	vsub.f32	s14, s10, s14
 800f83e:	441e      	add	r6, r3
 800f840:	ee32 5a25 	vadd.f32	s10, s4, s11
 800f844:	ee72 5a65 	vsub.f32	s11, s4, s11
 800f848:	ee72 3a81 	vadd.f32	s7, s5, s2
 800f84c:	ed01 5a01 	vstr	s10, [r1, #-4]
 800f850:	ee34 2a43 	vsub.f32	s4, s8, s6
 800f854:	edc4 5a00 	vstr	s11, [r4]
 800f858:	ee37 5a86 	vadd.f32	s10, s15, s12
 800f85c:	ee71 5ae4 	vsub.f32	s11, s3, s9
 800f860:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f864:	ed81 2a00 	vstr	s4, [r1]
 800f868:	ee36 6ac7 	vsub.f32	s12, s13, s14
 800f86c:	4419      	add	r1, r3
 800f86e:	ee33 4a04 	vadd.f32	s8, s6, s8
 800f872:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800f876:	ee74 4aa1 	vadd.f32	s9, s9, s3
 800f87a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f87e:	ed84 4a01 	vstr	s8, [r4, #4]
 800f882:	ed40 3a01 	vstr	s7, [r0, #-4]
 800f886:	441c      	add	r4, r3
 800f888:	edc7 2a00 	vstr	s5, [r7]
 800f88c:	ed85 5a00 	vstr	s10, [r5]
 800f890:	edc2 7a00 	vstr	s15, [r2]
 800f894:	edc0 5a00 	vstr	s11, [r0]
 800f898:	4418      	add	r0, r3
 800f89a:	edc7 4a01 	vstr	s9, [r7, #4]
 800f89e:	441f      	add	r7, r3
 800f8a0:	ed85 6a01 	vstr	s12, [r5, #4]
 800f8a4:	441d      	add	r5, r3
 800f8a6:	ed82 7a01 	vstr	s14, [r2, #4]
 800f8aa:	441a      	add	r2, r3
 800f8ac:	f63f af44 	bhi.w	800f738 <arm_radix8_butterfly_f32+0x8c>
 800f8b0:	469c      	mov	ip, r3
 800f8b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8b4:	2b07      	cmp	r3, #7
 800f8b6:	f240 81b6 	bls.w	800fc26 <arm_radix8_butterfly_f32+0x57a>
 800f8ba:	9a02      	ldr	r2, [sp, #8]
 800f8bc:	f109 0608 	add.w	r6, r9, #8
 800f8c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f8c2:	f108 0408 	add.w	r4, r8, #8
 800f8c6:	3208      	adds	r2, #8
 800f8c8:	9f06      	ldr	r7, [sp, #24]
 800f8ca:	9d04      	ldr	r5, [sp, #16]
 800f8cc:	189a      	adds	r2, r3, r2
 800f8ce:	3708      	adds	r7, #8
 800f8d0:	3508      	adds	r5, #8
 800f8d2:	9807      	ldr	r0, [sp, #28]
 800f8d4:	920c      	str	r2, [sp, #48]	; 0x30
 800f8d6:	199a      	adds	r2, r3, r6
 800f8d8:	9905      	ldr	r1, [sp, #20]
 800f8da:	3008      	adds	r0, #8
 800f8dc:	920b      	str	r2, [sp, #44]	; 0x2c
 800f8de:	19da      	adds	r2, r3, r7
 800f8e0:	310c      	adds	r1, #12
 800f8e2:	920a      	str	r2, [sp, #40]	; 0x28
 800f8e4:	195a      	adds	r2, r3, r5
 800f8e6:	9209      	str	r2, [sp, #36]	; 0x24
 800f8e8:	191a      	adds	r2, r3, r4
 800f8ea:	9208      	str	r2, [sp, #32]
 800f8ec:	181a      	adds	r2, r3, r0
 800f8ee:	9207      	str	r2, [sp, #28]
 800f8f0:	185a      	adds	r2, r3, r1
 800f8f2:	330c      	adds	r3, #12
 800f8f4:	9205      	str	r2, [sp, #20]
 800f8f6:	9306      	str	r3, [sp, #24]
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	9304      	str	r3, [sp, #16]
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	930d      	str	r3, [sp, #52]	; 0x34
 800f900:	4663      	mov	r3, ip
 800f902:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f904:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f906:	f8dd c014 	ldr.w	ip, [sp, #20]
 800f90a:	440a      	add	r2, r1
 800f90c:	9f06      	ldr	r7, [sp, #24]
 800f90e:	9e07      	ldr	r6, [sp, #28]
 800f910:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800f914:	920d      	str	r2, [sp, #52]	; 0x34
 800f916:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 800f91a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f91c:	9d08      	ldr	r5, [sp, #32]
 800f91e:	4442      	add	r2, r8
 800f920:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f922:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f924:	eb02 0108 	add.w	r1, r2, r8
 800f928:	ed92 ea00 	vldr	s28, [r2]
 800f92c:	eb01 0208 	add.w	r2, r1, r8
 800f930:	edd1 da00 	vldr	s27, [r1]
 800f934:	eb02 0108 	add.w	r1, r2, r8
 800f938:	ed92 da00 	vldr	s26, [r2]
 800f93c:	eb01 0208 	add.w	r2, r1, r8
 800f940:	edd1 ca00 	vldr	s25, [r1]
 800f944:	eb02 0108 	add.w	r1, r2, r8
 800f948:	ed92 ca00 	vldr	s24, [r2]
 800f94c:	eb01 0208 	add.w	r2, r1, r8
 800f950:	edd1 ba00 	vldr	s23, [r1]
 800f954:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f956:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 800f95a:	ed92 ba00 	vldr	s22, [r2]
 800f95e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f960:	eb0e 0908 	add.w	r9, lr, r8
 800f964:	910e      	str	r1, [sp, #56]	; 0x38
 800f966:	9201      	str	r2, [sp, #4]
 800f968:	eb09 0208 	add.w	r2, r9, r8
 800f96c:	ed99 aa01 	vldr	s20, [r9, #4]
 800f970:	edde aa01 	vldr	s21, [lr, #4]
 800f974:	eb02 0908 	add.w	r9, r2, r8
 800f978:	edd2 9a01 	vldr	s19, [r2, #4]
 800f97c:	f8dd e010 	ldr.w	lr, [sp, #16]
 800f980:	eb09 0208 	add.w	r2, r9, r8
 800f984:	ed99 9a01 	vldr	s18, [r9, #4]
 800f988:	eb02 0908 	add.w	r9, r2, r8
 800f98c:	ed92 8a01 	vldr	s16, [r2, #4]
 800f990:	9a01      	ldr	r2, [sp, #4]
 800f992:	edd9 7a01 	vldr	s15, [r9, #4]
 800f996:	44c8      	add	r8, r9
 800f998:	edcd 7a02 	vstr	s15, [sp, #8]
 800f99c:	edd8 7a01 	vldr	s15, [r8, #4]
 800f9a0:	edcd 7a03 	vstr	s15, [sp, #12]
 800f9a4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f9a6:	e001      	b.n	800f9ac <arm_radix8_butterfly_f32+0x300>
 800f9a8:	3f3504f3 	.word	0x3f3504f3
 800f9ac:	ed92 7a00 	vldr	s14, [r2]
 800f9b0:	44de      	add	lr, fp
 800f9b2:	ed17 1a01 	vldr	s2, [r7, #-4]
 800f9b6:	ed90 5a00 	vldr	s10, [r0]
 800f9ba:	45f2      	cmp	sl, lr
 800f9bc:	ed1c fa01 	vldr	s30, [ip, #-4]
 800f9c0:	ee31 3a07 	vadd.f32	s6, s2, s14
 800f9c4:	edd6 5a00 	vldr	s11, [r6]
 800f9c8:	ee31 1a47 	vsub.f32	s2, s2, s14
 800f9cc:	edd4 7a00 	vldr	s15, [r4]
 800f9d0:	ed95 7a00 	vldr	s14, [r5]
 800f9d4:	ed91 4a00 	vldr	s8, [r1]
 800f9d8:	ee3f 6a27 	vadd.f32	s12, s30, s15
 800f9dc:	ee77 6a25 	vadd.f32	s13, s14, s11
 800f9e0:	edd7 ea00 	vldr	s29, [r7]
 800f9e4:	ee74 fa05 	vadd.f32	s31, s8, s10
 800f9e8:	ee73 1a06 	vadd.f32	s3, s6, s12
 800f9ec:	ee34 4a45 	vsub.f32	s8, s8, s10
 800f9f0:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 800f9f4:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f9f8:	ee33 3a46 	vsub.f32	s6, s6, s12
 800f9fc:	ee31 6a85 	vadd.f32	s12, s3, s10
 800fa00:	ee7f 7a67 	vsub.f32	s15, s30, s15
 800fa04:	ee34 fa07 	vadd.f32	s30, s8, s14
 800fa08:	ed07 6a01 	vstr	s12, [r7, #-4]
 800fa0c:	ee34 4a47 	vsub.f32	s8, s8, s14
 800fa10:	edd5 3a01 	vldr	s7, [r5, #4]
 800fa14:	ee7f fae6 	vsub.f32	s31, s31, s13
 800fa18:	ed90 7a01 	vldr	s14, [r0, #4]
 800fa1c:	ee2f fa28 	vmul.f32	s30, s30, s17
 800fa20:	edd1 5a01 	vldr	s11, [r1, #4]
 800fa24:	ee24 4a28 	vmul.f32	s8, s8, s17
 800fa28:	ed96 6a01 	vldr	s12, [r6, #4]
 800fa2c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800fa30:	ee75 0ac7 	vsub.f32	s1, s11, s14
 800fa34:	edd2 6a01 	vldr	s13, [r2, #4]
 800fa38:	ee73 2ac6 	vsub.f32	s5, s7, s12
 800fa3c:	edd4 4a01 	vldr	s9, [r4, #4]
 800fa40:	ee75 5a87 	vadd.f32	s11, s11, s14
 800fa44:	ed9c 7a00 	vldr	s14, [ip]
 800fa48:	ee37 2a8f 	vadd.f32	s4, s15, s30
 800fa4c:	ee33 6a86 	vadd.f32	s12, s7, s12
 800fa50:	ee37 facf 	vsub.f32	s30, s15, s30
 800fa54:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 800fa58:	ee70 7ae2 	vsub.f32	s15, s1, s5
 800fa5c:	ee7e eae6 	vsub.f32	s29, s29, s13
 800fa60:	ee70 2aa2 	vadd.f32	s5, s1, s5
 800fa64:	ee77 6a24 	vadd.f32	s13, s14, s9
 800fa68:	ee75 0a86 	vadd.f32	s1, s11, s12
 800fa6c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800fa70:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800fa74:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800fa78:	ee62 2aa8 	vmul.f32	s5, s5, s17
 800fa7c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800fa80:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800fa84:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 800fa88:	ee77 4a22 	vadd.f32	s9, s14, s5
 800fa8c:	ee7e eae7 	vsub.f32	s29, s29, s15
 800fa90:	ee77 7a62 	vsub.f32	s15, s14, s5
 800fa94:	ee71 2a04 	vadd.f32	s5, s2, s8
 800fa98:	ee31 7a44 	vsub.f32	s14, s2, s8
 800fa9c:	ee30 1a60 	vsub.f32	s2, s0, s1
 800faa0:	ee73 1a06 	vadd.f32	s3, s6, s12
 800faa4:	ee33 6a46 	vsub.f32	s12, s6, s12
 800faa8:	ee33 3aef 	vsub.f32	s6, s7, s31
 800faac:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 800fab0:	ee3e 4acf 	vsub.f32	s8, s29, s30
 800fab4:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800fab8:	ee72 5a25 	vadd.f32	s11, s4, s11
 800fabc:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800fac0:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800fac4:	ee77 2a27 	vadd.f32	s5, s14, s15
 800fac8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800facc:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 800fad0:	ee2c fa85 	vmul.f32	s30, s25, s10
 800fad4:	ee69 ea01 	vmul.f32	s29, s18, s2
 800fad8:	ee29 5a05 	vmul.f32	s10, s18, s10
 800fadc:	ee2c 1a81 	vmul.f32	s2, s25, s2
 800fae0:	ee6d faa1 	vmul.f32	s31, s27, s3
 800fae4:	ee70 0a20 	vadd.f32	s1, s0, s1
 800fae8:	ee6a 1a21 	vmul.f32	s3, s20, s3
 800faec:	ee2a 0a03 	vmul.f32	s0, s20, s6
 800faf0:	ee2d 3a83 	vmul.f32	s6, s27, s6
 800faf4:	edc7 0a00 	vstr	s1, [r7]
 800faf8:	ee7f ea2e 	vadd.f32	s29, s30, s29
 800fafc:	441f      	add	r7, r3
 800fafe:	ee2a faa3 	vmul.f32	s30, s21, s7
 800fb02:	ee31 5a45 	vsub.f32	s10, s2, s10
 800fb06:	ee6e 3a23 	vmul.f32	s7, s28, s7
 800fb0a:	edc2 ea00 	vstr	s29, [r2]
 800fb0e:	ee3f 0a80 	vadd.f32	s0, s31, s0
 800fb12:	ee33 3a61 	vsub.f32	s6, s6, s3
 800fb16:	ed82 5a01 	vstr	s10, [r2, #4]
 800fb1a:	ee6e 0a02 	vmul.f32	s1, s28, s4
 800fb1e:	edcd 3a01 	vstr	s7, [sp, #4]
 800fb22:	ed9d 5a03 	vldr	s10, [sp, #12]
 800fb26:	ee6b ea86 	vmul.f32	s29, s23, s12
 800fb2a:	eddd 3a02 	vldr	s7, [sp, #8]
 800fb2e:	ee6b fa24 	vmul.f32	s31, s22, s9
 800fb32:	ed0c 0a01 	vstr	s0, [ip, #-4]
 800fb36:	ee65 4a24 	vmul.f32	s9, s10, s9
 800fb3a:	ed8c 3a00 	vstr	s6, [ip]
 800fb3e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800fb42:	ee23 6a86 	vmul.f32	s12, s7, s12
 800fb46:	eddd 3a01 	vldr	s7, [sp, #4]
 800fb4a:	ee25 5a25 	vmul.f32	s10, s10, s11
 800fb4e:	441a      	add	r2, r3
 800fb50:	ee2c 0a22 	vmul.f32	s0, s24, s5
 800fb54:	449c      	add	ip, r3
 800fb56:	ee68 1a04 	vmul.f32	s3, s16, s8
 800fb5a:	ee70 0a8f 	vadd.f32	s1, s1, s30
 800fb5e:	ee2d 3a07 	vmul.f32	s6, s26, s14
 800fb62:	ee29 faa7 	vmul.f32	s30, s19, s15
 800fb66:	ee2a 2a82 	vmul.f32	s4, s21, s4
 800fb6a:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 800fb6e:	ee6b 5a25 	vmul.f32	s11, s22, s11
 800fb72:	ee68 2a22 	vmul.f32	s5, s16, s5
 800fb76:	ee2c 4a04 	vmul.f32	s8, s24, s8
 800fb7a:	ee29 7a87 	vmul.f32	s14, s19, s14
 800fb7e:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800fb82:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800fb86:	ee7e ea81 	vadd.f32	s29, s29, s2
 800fb8a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800fb8e:	ee3f 5a85 	vadd.f32	s10, s31, s10
 800fb92:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800fb96:	edc4 ea00 	vstr	s29, [r4]
 800fb9a:	ee30 0a21 	vadd.f32	s0, s0, s3
 800fb9e:	ed84 6a01 	vstr	s12, [r4, #4]
 800fba2:	ee74 2a62 	vsub.f32	s5, s8, s5
 800fba6:	edc1 0a00 	vstr	s1, [r1]
 800fbaa:	ee33 3a0f 	vadd.f32	s6, s6, s30
 800fbae:	edc1 3a01 	vstr	s7, [r1, #4]
 800fbb2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800fbb6:	ed86 5a00 	vstr	s10, [r6]
 800fbba:	edc6 4a01 	vstr	s9, [r6, #4]
 800fbbe:	4419      	add	r1, r3
 800fbc0:	ed80 0a00 	vstr	s0, [r0]
 800fbc4:	441c      	add	r4, r3
 800fbc6:	edc0 2a01 	vstr	s5, [r0, #4]
 800fbca:	441e      	add	r6, r3
 800fbcc:	ed85 3a00 	vstr	s6, [r5]
 800fbd0:	4418      	add	r0, r3
 800fbd2:	ed85 7a01 	vstr	s14, [r5, #4]
 800fbd6:	441d      	add	r5, r3
 800fbd8:	f63f aee8 	bhi.w	800f9ac <arm_radix8_butterfly_f32+0x300>
 800fbdc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fbde:	9a04      	ldr	r2, [sp, #16]
 800fbe0:	3108      	adds	r1, #8
 800fbe2:	3201      	adds	r2, #1
 800fbe4:	910c      	str	r1, [sp, #48]	; 0x30
 800fbe6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fbe8:	9204      	str	r2, [sp, #16]
 800fbea:	3108      	adds	r1, #8
 800fbec:	910b      	str	r1, [sp, #44]	; 0x2c
 800fbee:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fbf0:	3108      	adds	r1, #8
 800fbf2:	910a      	str	r1, [sp, #40]	; 0x28
 800fbf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fbf6:	3108      	adds	r1, #8
 800fbf8:	9109      	str	r1, [sp, #36]	; 0x24
 800fbfa:	9908      	ldr	r1, [sp, #32]
 800fbfc:	3108      	adds	r1, #8
 800fbfe:	9108      	str	r1, [sp, #32]
 800fc00:	9907      	ldr	r1, [sp, #28]
 800fc02:	3108      	adds	r1, #8
 800fc04:	9107      	str	r1, [sp, #28]
 800fc06:	9906      	ldr	r1, [sp, #24]
 800fc08:	3108      	adds	r1, #8
 800fc0a:	9106      	str	r1, [sp, #24]
 800fc0c:	9905      	ldr	r1, [sp, #20]
 800fc0e:	3108      	adds	r1, #8
 800fc10:	9105      	str	r1, [sp, #20]
 800fc12:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fc14:	4291      	cmp	r1, r2
 800fc16:	f47f ae74 	bne.w	800f902 <arm_radix8_butterfly_f32+0x256>
 800fc1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fc1c:	468b      	mov	fp, r1
 800fc1e:	00db      	lsls	r3, r3, #3
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	9310      	str	r3, [sp, #64]	; 0x40
 800fc24:	e551      	b.n	800f6ca <arm_radix8_butterfly_f32+0x1e>
 800fc26:	b015      	add	sp, #84	; 0x54
 800fc28:	ecbd 8b10 	vpop	{d8-d15}
 800fc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fc30 <atoi>:
 800fc30:	220a      	movs	r2, #10
 800fc32:	2100      	movs	r1, #0
 800fc34:	f000 bdb2 	b.w	801079c <strtol>

0800fc38 <__errno>:
 800fc38:	4b01      	ldr	r3, [pc, #4]	; (800fc40 <__errno+0x8>)
 800fc3a:	6818      	ldr	r0, [r3, #0]
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop
 800fc40:	24000498 	.word	0x24000498

0800fc44 <__libc_init_array>:
 800fc44:	b570      	push	{r4, r5, r6, lr}
 800fc46:	4d0d      	ldr	r5, [pc, #52]	; (800fc7c <__libc_init_array+0x38>)
 800fc48:	4c0d      	ldr	r4, [pc, #52]	; (800fc80 <__libc_init_array+0x3c>)
 800fc4a:	1b64      	subs	r4, r4, r5
 800fc4c:	10a4      	asrs	r4, r4, #2
 800fc4e:	2600      	movs	r6, #0
 800fc50:	42a6      	cmp	r6, r4
 800fc52:	d109      	bne.n	800fc68 <__libc_init_array+0x24>
 800fc54:	4d0b      	ldr	r5, [pc, #44]	; (800fc84 <__libc_init_array+0x40>)
 800fc56:	4c0c      	ldr	r4, [pc, #48]	; (800fc88 <__libc_init_array+0x44>)
 800fc58:	f004 f8a0 	bl	8013d9c <_init>
 800fc5c:	1b64      	subs	r4, r4, r5
 800fc5e:	10a4      	asrs	r4, r4, #2
 800fc60:	2600      	movs	r6, #0
 800fc62:	42a6      	cmp	r6, r4
 800fc64:	d105      	bne.n	800fc72 <__libc_init_array+0x2e>
 800fc66:	bd70      	pop	{r4, r5, r6, pc}
 800fc68:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc6c:	4798      	blx	r3
 800fc6e:	3601      	adds	r6, #1
 800fc70:	e7ee      	b.n	800fc50 <__libc_init_array+0xc>
 800fc72:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc76:	4798      	blx	r3
 800fc78:	3601      	adds	r6, #1
 800fc7a:	e7f2      	b.n	800fc62 <__libc_init_array+0x1e>
 800fc7c:	0801e7c8 	.word	0x0801e7c8
 800fc80:	0801e7c8 	.word	0x0801e7c8
 800fc84:	0801e7c8 	.word	0x0801e7c8
 800fc88:	0801e7cc 	.word	0x0801e7cc

0800fc8c <memcpy>:
 800fc8c:	440a      	add	r2, r1
 800fc8e:	4291      	cmp	r1, r2
 800fc90:	f100 33ff 	add.w	r3, r0, #4294967295
 800fc94:	d100      	bne.n	800fc98 <memcpy+0xc>
 800fc96:	4770      	bx	lr
 800fc98:	b510      	push	{r4, lr}
 800fc9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fca2:	4291      	cmp	r1, r2
 800fca4:	d1f9      	bne.n	800fc9a <memcpy+0xe>
 800fca6:	bd10      	pop	{r4, pc}

0800fca8 <memset>:
 800fca8:	4402      	add	r2, r0
 800fcaa:	4603      	mov	r3, r0
 800fcac:	4293      	cmp	r3, r2
 800fcae:	d100      	bne.n	800fcb2 <memset+0xa>
 800fcb0:	4770      	bx	lr
 800fcb2:	f803 1b01 	strb.w	r1, [r3], #1
 800fcb6:	e7f9      	b.n	800fcac <memset+0x4>

0800fcb8 <__cvt>:
 800fcb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcba:	ed2d 8b02 	vpush	{d8}
 800fcbe:	eeb0 8b40 	vmov.f64	d8, d0
 800fcc2:	b085      	sub	sp, #20
 800fcc4:	4617      	mov	r7, r2
 800fcc6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fcc8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fcca:	ee18 2a90 	vmov	r2, s17
 800fcce:	f025 0520 	bic.w	r5, r5, #32
 800fcd2:	2a00      	cmp	r2, #0
 800fcd4:	bfb6      	itet	lt
 800fcd6:	222d      	movlt	r2, #45	; 0x2d
 800fcd8:	2200      	movge	r2, #0
 800fcda:	eeb1 8b40 	vneglt.f64	d8, d0
 800fcde:	2d46      	cmp	r5, #70	; 0x46
 800fce0:	460c      	mov	r4, r1
 800fce2:	701a      	strb	r2, [r3, #0]
 800fce4:	d004      	beq.n	800fcf0 <__cvt+0x38>
 800fce6:	2d45      	cmp	r5, #69	; 0x45
 800fce8:	d100      	bne.n	800fcec <__cvt+0x34>
 800fcea:	3401      	adds	r4, #1
 800fcec:	2102      	movs	r1, #2
 800fcee:	e000      	b.n	800fcf2 <__cvt+0x3a>
 800fcf0:	2103      	movs	r1, #3
 800fcf2:	ab03      	add	r3, sp, #12
 800fcf4:	9301      	str	r3, [sp, #4]
 800fcf6:	ab02      	add	r3, sp, #8
 800fcf8:	9300      	str	r3, [sp, #0]
 800fcfa:	4622      	mov	r2, r4
 800fcfc:	4633      	mov	r3, r6
 800fcfe:	eeb0 0b48 	vmov.f64	d0, d8
 800fd02:	f000 fe01 	bl	8010908 <_dtoa_r>
 800fd06:	2d47      	cmp	r5, #71	; 0x47
 800fd08:	d101      	bne.n	800fd0e <__cvt+0x56>
 800fd0a:	07fb      	lsls	r3, r7, #31
 800fd0c:	d51a      	bpl.n	800fd44 <__cvt+0x8c>
 800fd0e:	2d46      	cmp	r5, #70	; 0x46
 800fd10:	eb00 0204 	add.w	r2, r0, r4
 800fd14:	d10c      	bne.n	800fd30 <__cvt+0x78>
 800fd16:	7803      	ldrb	r3, [r0, #0]
 800fd18:	2b30      	cmp	r3, #48	; 0x30
 800fd1a:	d107      	bne.n	800fd2c <__cvt+0x74>
 800fd1c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd24:	bf1c      	itt	ne
 800fd26:	f1c4 0401 	rsbne	r4, r4, #1
 800fd2a:	6034      	strne	r4, [r6, #0]
 800fd2c:	6833      	ldr	r3, [r6, #0]
 800fd2e:	441a      	add	r2, r3
 800fd30:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd38:	bf08      	it	eq
 800fd3a:	9203      	streq	r2, [sp, #12]
 800fd3c:	2130      	movs	r1, #48	; 0x30
 800fd3e:	9b03      	ldr	r3, [sp, #12]
 800fd40:	4293      	cmp	r3, r2
 800fd42:	d307      	bcc.n	800fd54 <__cvt+0x9c>
 800fd44:	9b03      	ldr	r3, [sp, #12]
 800fd46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd48:	1a1b      	subs	r3, r3, r0
 800fd4a:	6013      	str	r3, [r2, #0]
 800fd4c:	b005      	add	sp, #20
 800fd4e:	ecbd 8b02 	vpop	{d8}
 800fd52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd54:	1c5c      	adds	r4, r3, #1
 800fd56:	9403      	str	r4, [sp, #12]
 800fd58:	7019      	strb	r1, [r3, #0]
 800fd5a:	e7f0      	b.n	800fd3e <__cvt+0x86>

0800fd5c <__exponent>:
 800fd5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd5e:	4603      	mov	r3, r0
 800fd60:	2900      	cmp	r1, #0
 800fd62:	bfb8      	it	lt
 800fd64:	4249      	neglt	r1, r1
 800fd66:	f803 2b02 	strb.w	r2, [r3], #2
 800fd6a:	bfb4      	ite	lt
 800fd6c:	222d      	movlt	r2, #45	; 0x2d
 800fd6e:	222b      	movge	r2, #43	; 0x2b
 800fd70:	2909      	cmp	r1, #9
 800fd72:	7042      	strb	r2, [r0, #1]
 800fd74:	dd2a      	ble.n	800fdcc <__exponent+0x70>
 800fd76:	f10d 0407 	add.w	r4, sp, #7
 800fd7a:	46a4      	mov	ip, r4
 800fd7c:	270a      	movs	r7, #10
 800fd7e:	46a6      	mov	lr, r4
 800fd80:	460a      	mov	r2, r1
 800fd82:	fb91 f6f7 	sdiv	r6, r1, r7
 800fd86:	fb07 1516 	mls	r5, r7, r6, r1
 800fd8a:	3530      	adds	r5, #48	; 0x30
 800fd8c:	2a63      	cmp	r2, #99	; 0x63
 800fd8e:	f104 34ff 	add.w	r4, r4, #4294967295
 800fd92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fd96:	4631      	mov	r1, r6
 800fd98:	dcf1      	bgt.n	800fd7e <__exponent+0x22>
 800fd9a:	3130      	adds	r1, #48	; 0x30
 800fd9c:	f1ae 0502 	sub.w	r5, lr, #2
 800fda0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fda4:	1c44      	adds	r4, r0, #1
 800fda6:	4629      	mov	r1, r5
 800fda8:	4561      	cmp	r1, ip
 800fdaa:	d30a      	bcc.n	800fdc2 <__exponent+0x66>
 800fdac:	f10d 0209 	add.w	r2, sp, #9
 800fdb0:	eba2 020e 	sub.w	r2, r2, lr
 800fdb4:	4565      	cmp	r5, ip
 800fdb6:	bf88      	it	hi
 800fdb8:	2200      	movhi	r2, #0
 800fdba:	4413      	add	r3, r2
 800fdbc:	1a18      	subs	r0, r3, r0
 800fdbe:	b003      	add	sp, #12
 800fdc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdc6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fdca:	e7ed      	b.n	800fda8 <__exponent+0x4c>
 800fdcc:	2330      	movs	r3, #48	; 0x30
 800fdce:	3130      	adds	r1, #48	; 0x30
 800fdd0:	7083      	strb	r3, [r0, #2]
 800fdd2:	70c1      	strb	r1, [r0, #3]
 800fdd4:	1d03      	adds	r3, r0, #4
 800fdd6:	e7f1      	b.n	800fdbc <__exponent+0x60>

0800fdd8 <_printf_float>:
 800fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fddc:	b08b      	sub	sp, #44	; 0x2c
 800fdde:	460c      	mov	r4, r1
 800fde0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800fde4:	4616      	mov	r6, r2
 800fde6:	461f      	mov	r7, r3
 800fde8:	4605      	mov	r5, r0
 800fdea:	f001 fb0d 	bl	8011408 <_localeconv_r>
 800fdee:	f8d0 b000 	ldr.w	fp, [r0]
 800fdf2:	4658      	mov	r0, fp
 800fdf4:	f7f0 fa74 	bl	80002e0 <strlen>
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	9308      	str	r3, [sp, #32]
 800fdfc:	f8d8 3000 	ldr.w	r3, [r8]
 800fe00:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fe04:	6822      	ldr	r2, [r4, #0]
 800fe06:	3307      	adds	r3, #7
 800fe08:	f023 0307 	bic.w	r3, r3, #7
 800fe0c:	f103 0108 	add.w	r1, r3, #8
 800fe10:	f8c8 1000 	str.w	r1, [r8]
 800fe14:	4682      	mov	sl, r0
 800fe16:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe1a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800fe1e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8010080 <_printf_float+0x2a8>
 800fe22:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800fe26:	eeb0 6bc0 	vabs.f64	d6, d0
 800fe2a:	eeb4 6b47 	vcmp.f64	d6, d7
 800fe2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe32:	dd24      	ble.n	800fe7e <_printf_float+0xa6>
 800fe34:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fe38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe3c:	d502      	bpl.n	800fe44 <_printf_float+0x6c>
 800fe3e:	232d      	movs	r3, #45	; 0x2d
 800fe40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe44:	4b90      	ldr	r3, [pc, #576]	; (8010088 <_printf_float+0x2b0>)
 800fe46:	4891      	ldr	r0, [pc, #580]	; (801008c <_printf_float+0x2b4>)
 800fe48:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800fe4c:	bf94      	ite	ls
 800fe4e:	4698      	movls	r8, r3
 800fe50:	4680      	movhi	r8, r0
 800fe52:	2303      	movs	r3, #3
 800fe54:	6123      	str	r3, [r4, #16]
 800fe56:	f022 0204 	bic.w	r2, r2, #4
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	6022      	str	r2, [r4, #0]
 800fe5e:	9304      	str	r3, [sp, #16]
 800fe60:	9700      	str	r7, [sp, #0]
 800fe62:	4633      	mov	r3, r6
 800fe64:	aa09      	add	r2, sp, #36	; 0x24
 800fe66:	4621      	mov	r1, r4
 800fe68:	4628      	mov	r0, r5
 800fe6a:	f000 f9d3 	bl	8010214 <_printf_common>
 800fe6e:	3001      	adds	r0, #1
 800fe70:	f040 808a 	bne.w	800ff88 <_printf_float+0x1b0>
 800fe74:	f04f 30ff 	mov.w	r0, #4294967295
 800fe78:	b00b      	add	sp, #44	; 0x2c
 800fe7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe7e:	eeb4 0b40 	vcmp.f64	d0, d0
 800fe82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe86:	d709      	bvc.n	800fe9c <_printf_float+0xc4>
 800fe88:	ee10 3a90 	vmov	r3, s1
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	bfbc      	itt	lt
 800fe90:	232d      	movlt	r3, #45	; 0x2d
 800fe92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fe96:	487e      	ldr	r0, [pc, #504]	; (8010090 <_printf_float+0x2b8>)
 800fe98:	4b7e      	ldr	r3, [pc, #504]	; (8010094 <_printf_float+0x2bc>)
 800fe9a:	e7d5      	b.n	800fe48 <_printf_float+0x70>
 800fe9c:	6863      	ldr	r3, [r4, #4]
 800fe9e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800fea2:	9104      	str	r1, [sp, #16]
 800fea4:	1c59      	adds	r1, r3, #1
 800fea6:	d13c      	bne.n	800ff22 <_printf_float+0x14a>
 800fea8:	2306      	movs	r3, #6
 800feaa:	6063      	str	r3, [r4, #4]
 800feac:	2300      	movs	r3, #0
 800feae:	9303      	str	r3, [sp, #12]
 800feb0:	ab08      	add	r3, sp, #32
 800feb2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800feb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800feba:	ab07      	add	r3, sp, #28
 800febc:	6861      	ldr	r1, [r4, #4]
 800febe:	9300      	str	r3, [sp, #0]
 800fec0:	6022      	str	r2, [r4, #0]
 800fec2:	f10d 031b 	add.w	r3, sp, #27
 800fec6:	4628      	mov	r0, r5
 800fec8:	f7ff fef6 	bl	800fcb8 <__cvt>
 800fecc:	9b04      	ldr	r3, [sp, #16]
 800fece:	9907      	ldr	r1, [sp, #28]
 800fed0:	2b47      	cmp	r3, #71	; 0x47
 800fed2:	4680      	mov	r8, r0
 800fed4:	d108      	bne.n	800fee8 <_printf_float+0x110>
 800fed6:	1cc8      	adds	r0, r1, #3
 800fed8:	db02      	blt.n	800fee0 <_printf_float+0x108>
 800feda:	6863      	ldr	r3, [r4, #4]
 800fedc:	4299      	cmp	r1, r3
 800fede:	dd41      	ble.n	800ff64 <_printf_float+0x18c>
 800fee0:	f1a9 0902 	sub.w	r9, r9, #2
 800fee4:	fa5f f989 	uxtb.w	r9, r9
 800fee8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800feec:	d820      	bhi.n	800ff30 <_printf_float+0x158>
 800feee:	3901      	subs	r1, #1
 800fef0:	464a      	mov	r2, r9
 800fef2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fef6:	9107      	str	r1, [sp, #28]
 800fef8:	f7ff ff30 	bl	800fd5c <__exponent>
 800fefc:	9a08      	ldr	r2, [sp, #32]
 800fefe:	9004      	str	r0, [sp, #16]
 800ff00:	1813      	adds	r3, r2, r0
 800ff02:	2a01      	cmp	r2, #1
 800ff04:	6123      	str	r3, [r4, #16]
 800ff06:	dc02      	bgt.n	800ff0e <_printf_float+0x136>
 800ff08:	6822      	ldr	r2, [r4, #0]
 800ff0a:	07d2      	lsls	r2, r2, #31
 800ff0c:	d501      	bpl.n	800ff12 <_printf_float+0x13a>
 800ff0e:	3301      	adds	r3, #1
 800ff10:	6123      	str	r3, [r4, #16]
 800ff12:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d0a2      	beq.n	800fe60 <_printf_float+0x88>
 800ff1a:	232d      	movs	r3, #45	; 0x2d
 800ff1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff20:	e79e      	b.n	800fe60 <_printf_float+0x88>
 800ff22:	9904      	ldr	r1, [sp, #16]
 800ff24:	2947      	cmp	r1, #71	; 0x47
 800ff26:	d1c1      	bne.n	800feac <_printf_float+0xd4>
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d1bf      	bne.n	800feac <_printf_float+0xd4>
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	e7bc      	b.n	800feaa <_printf_float+0xd2>
 800ff30:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ff34:	d118      	bne.n	800ff68 <_printf_float+0x190>
 800ff36:	2900      	cmp	r1, #0
 800ff38:	6863      	ldr	r3, [r4, #4]
 800ff3a:	dd0b      	ble.n	800ff54 <_printf_float+0x17c>
 800ff3c:	6121      	str	r1, [r4, #16]
 800ff3e:	b913      	cbnz	r3, 800ff46 <_printf_float+0x16e>
 800ff40:	6822      	ldr	r2, [r4, #0]
 800ff42:	07d0      	lsls	r0, r2, #31
 800ff44:	d502      	bpl.n	800ff4c <_printf_float+0x174>
 800ff46:	3301      	adds	r3, #1
 800ff48:	440b      	add	r3, r1
 800ff4a:	6123      	str	r3, [r4, #16]
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ff50:	9304      	str	r3, [sp, #16]
 800ff52:	e7de      	b.n	800ff12 <_printf_float+0x13a>
 800ff54:	b913      	cbnz	r3, 800ff5c <_printf_float+0x184>
 800ff56:	6822      	ldr	r2, [r4, #0]
 800ff58:	07d2      	lsls	r2, r2, #31
 800ff5a:	d501      	bpl.n	800ff60 <_printf_float+0x188>
 800ff5c:	3302      	adds	r3, #2
 800ff5e:	e7f4      	b.n	800ff4a <_printf_float+0x172>
 800ff60:	2301      	movs	r3, #1
 800ff62:	e7f2      	b.n	800ff4a <_printf_float+0x172>
 800ff64:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ff68:	9b08      	ldr	r3, [sp, #32]
 800ff6a:	4299      	cmp	r1, r3
 800ff6c:	db05      	blt.n	800ff7a <_printf_float+0x1a2>
 800ff6e:	6823      	ldr	r3, [r4, #0]
 800ff70:	6121      	str	r1, [r4, #16]
 800ff72:	07d8      	lsls	r0, r3, #31
 800ff74:	d5ea      	bpl.n	800ff4c <_printf_float+0x174>
 800ff76:	1c4b      	adds	r3, r1, #1
 800ff78:	e7e7      	b.n	800ff4a <_printf_float+0x172>
 800ff7a:	2900      	cmp	r1, #0
 800ff7c:	bfd4      	ite	le
 800ff7e:	f1c1 0202 	rsble	r2, r1, #2
 800ff82:	2201      	movgt	r2, #1
 800ff84:	4413      	add	r3, r2
 800ff86:	e7e0      	b.n	800ff4a <_printf_float+0x172>
 800ff88:	6823      	ldr	r3, [r4, #0]
 800ff8a:	055a      	lsls	r2, r3, #21
 800ff8c:	d407      	bmi.n	800ff9e <_printf_float+0x1c6>
 800ff8e:	6923      	ldr	r3, [r4, #16]
 800ff90:	4642      	mov	r2, r8
 800ff92:	4631      	mov	r1, r6
 800ff94:	4628      	mov	r0, r5
 800ff96:	47b8      	blx	r7
 800ff98:	3001      	adds	r0, #1
 800ff9a:	d12a      	bne.n	800fff2 <_printf_float+0x21a>
 800ff9c:	e76a      	b.n	800fe74 <_printf_float+0x9c>
 800ff9e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ffa2:	f240 80e2 	bls.w	801016a <_printf_float+0x392>
 800ffa6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ffaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ffae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffb2:	d133      	bne.n	801001c <_printf_float+0x244>
 800ffb4:	4a38      	ldr	r2, [pc, #224]	; (8010098 <_printf_float+0x2c0>)
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	4631      	mov	r1, r6
 800ffba:	4628      	mov	r0, r5
 800ffbc:	47b8      	blx	r7
 800ffbe:	3001      	adds	r0, #1
 800ffc0:	f43f af58 	beq.w	800fe74 <_printf_float+0x9c>
 800ffc4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	db02      	blt.n	800ffd2 <_printf_float+0x1fa>
 800ffcc:	6823      	ldr	r3, [r4, #0]
 800ffce:	07d8      	lsls	r0, r3, #31
 800ffd0:	d50f      	bpl.n	800fff2 <_printf_float+0x21a>
 800ffd2:	4653      	mov	r3, sl
 800ffd4:	465a      	mov	r2, fp
 800ffd6:	4631      	mov	r1, r6
 800ffd8:	4628      	mov	r0, r5
 800ffda:	47b8      	blx	r7
 800ffdc:	3001      	adds	r0, #1
 800ffde:	f43f af49 	beq.w	800fe74 <_printf_float+0x9c>
 800ffe2:	f04f 0800 	mov.w	r8, #0
 800ffe6:	f104 091a 	add.w	r9, r4, #26
 800ffea:	9b08      	ldr	r3, [sp, #32]
 800ffec:	3b01      	subs	r3, #1
 800ffee:	4543      	cmp	r3, r8
 800fff0:	dc09      	bgt.n	8010006 <_printf_float+0x22e>
 800fff2:	6823      	ldr	r3, [r4, #0]
 800fff4:	079b      	lsls	r3, r3, #30
 800fff6:	f100 8108 	bmi.w	801020a <_printf_float+0x432>
 800fffa:	68e0      	ldr	r0, [r4, #12]
 800fffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fffe:	4298      	cmp	r0, r3
 8010000:	bfb8      	it	lt
 8010002:	4618      	movlt	r0, r3
 8010004:	e738      	b.n	800fe78 <_printf_float+0xa0>
 8010006:	2301      	movs	r3, #1
 8010008:	464a      	mov	r2, r9
 801000a:	4631      	mov	r1, r6
 801000c:	4628      	mov	r0, r5
 801000e:	47b8      	blx	r7
 8010010:	3001      	adds	r0, #1
 8010012:	f43f af2f 	beq.w	800fe74 <_printf_float+0x9c>
 8010016:	f108 0801 	add.w	r8, r8, #1
 801001a:	e7e6      	b.n	800ffea <_printf_float+0x212>
 801001c:	9b07      	ldr	r3, [sp, #28]
 801001e:	2b00      	cmp	r3, #0
 8010020:	dc3c      	bgt.n	801009c <_printf_float+0x2c4>
 8010022:	4a1d      	ldr	r2, [pc, #116]	; (8010098 <_printf_float+0x2c0>)
 8010024:	2301      	movs	r3, #1
 8010026:	4631      	mov	r1, r6
 8010028:	4628      	mov	r0, r5
 801002a:	47b8      	blx	r7
 801002c:	3001      	adds	r0, #1
 801002e:	f43f af21 	beq.w	800fe74 <_printf_float+0x9c>
 8010032:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010036:	4313      	orrs	r3, r2
 8010038:	d102      	bne.n	8010040 <_printf_float+0x268>
 801003a:	6823      	ldr	r3, [r4, #0]
 801003c:	07d9      	lsls	r1, r3, #31
 801003e:	d5d8      	bpl.n	800fff2 <_printf_float+0x21a>
 8010040:	4653      	mov	r3, sl
 8010042:	465a      	mov	r2, fp
 8010044:	4631      	mov	r1, r6
 8010046:	4628      	mov	r0, r5
 8010048:	47b8      	blx	r7
 801004a:	3001      	adds	r0, #1
 801004c:	f43f af12 	beq.w	800fe74 <_printf_float+0x9c>
 8010050:	f04f 0900 	mov.w	r9, #0
 8010054:	f104 0a1a 	add.w	sl, r4, #26
 8010058:	9b07      	ldr	r3, [sp, #28]
 801005a:	425b      	negs	r3, r3
 801005c:	454b      	cmp	r3, r9
 801005e:	dc01      	bgt.n	8010064 <_printf_float+0x28c>
 8010060:	9b08      	ldr	r3, [sp, #32]
 8010062:	e795      	b.n	800ff90 <_printf_float+0x1b8>
 8010064:	2301      	movs	r3, #1
 8010066:	4652      	mov	r2, sl
 8010068:	4631      	mov	r1, r6
 801006a:	4628      	mov	r0, r5
 801006c:	47b8      	blx	r7
 801006e:	3001      	adds	r0, #1
 8010070:	f43f af00 	beq.w	800fe74 <_printf_float+0x9c>
 8010074:	f109 0901 	add.w	r9, r9, #1
 8010078:	e7ee      	b.n	8010058 <_printf_float+0x280>
 801007a:	bf00      	nop
 801007c:	f3af 8000 	nop.w
 8010080:	ffffffff 	.word	0xffffffff
 8010084:	7fefffff 	.word	0x7fefffff
 8010088:	0801d1a8 	.word	0x0801d1a8
 801008c:	0801d1ac 	.word	0x0801d1ac
 8010090:	0801d1b4 	.word	0x0801d1b4
 8010094:	0801d1b0 	.word	0x0801d1b0
 8010098:	0801d1b8 	.word	0x0801d1b8
 801009c:	9a08      	ldr	r2, [sp, #32]
 801009e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80100a0:	429a      	cmp	r2, r3
 80100a2:	bfa8      	it	ge
 80100a4:	461a      	movge	r2, r3
 80100a6:	2a00      	cmp	r2, #0
 80100a8:	4691      	mov	r9, r2
 80100aa:	dc38      	bgt.n	801011e <_printf_float+0x346>
 80100ac:	2300      	movs	r3, #0
 80100ae:	9305      	str	r3, [sp, #20]
 80100b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80100b4:	f104 021a 	add.w	r2, r4, #26
 80100b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80100ba:	9905      	ldr	r1, [sp, #20]
 80100bc:	9304      	str	r3, [sp, #16]
 80100be:	eba3 0309 	sub.w	r3, r3, r9
 80100c2:	428b      	cmp	r3, r1
 80100c4:	dc33      	bgt.n	801012e <_printf_float+0x356>
 80100c6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80100ca:	429a      	cmp	r2, r3
 80100cc:	db3c      	blt.n	8010148 <_printf_float+0x370>
 80100ce:	6823      	ldr	r3, [r4, #0]
 80100d0:	07da      	lsls	r2, r3, #31
 80100d2:	d439      	bmi.n	8010148 <_printf_float+0x370>
 80100d4:	9b08      	ldr	r3, [sp, #32]
 80100d6:	9a04      	ldr	r2, [sp, #16]
 80100d8:	9907      	ldr	r1, [sp, #28]
 80100da:	1a9a      	subs	r2, r3, r2
 80100dc:	eba3 0901 	sub.w	r9, r3, r1
 80100e0:	4591      	cmp	r9, r2
 80100e2:	bfa8      	it	ge
 80100e4:	4691      	movge	r9, r2
 80100e6:	f1b9 0f00 	cmp.w	r9, #0
 80100ea:	dc35      	bgt.n	8010158 <_printf_float+0x380>
 80100ec:	f04f 0800 	mov.w	r8, #0
 80100f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80100f4:	f104 0a1a 	add.w	sl, r4, #26
 80100f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80100fc:	1a9b      	subs	r3, r3, r2
 80100fe:	eba3 0309 	sub.w	r3, r3, r9
 8010102:	4543      	cmp	r3, r8
 8010104:	f77f af75 	ble.w	800fff2 <_printf_float+0x21a>
 8010108:	2301      	movs	r3, #1
 801010a:	4652      	mov	r2, sl
 801010c:	4631      	mov	r1, r6
 801010e:	4628      	mov	r0, r5
 8010110:	47b8      	blx	r7
 8010112:	3001      	adds	r0, #1
 8010114:	f43f aeae 	beq.w	800fe74 <_printf_float+0x9c>
 8010118:	f108 0801 	add.w	r8, r8, #1
 801011c:	e7ec      	b.n	80100f8 <_printf_float+0x320>
 801011e:	4613      	mov	r3, r2
 8010120:	4631      	mov	r1, r6
 8010122:	4642      	mov	r2, r8
 8010124:	4628      	mov	r0, r5
 8010126:	47b8      	blx	r7
 8010128:	3001      	adds	r0, #1
 801012a:	d1bf      	bne.n	80100ac <_printf_float+0x2d4>
 801012c:	e6a2      	b.n	800fe74 <_printf_float+0x9c>
 801012e:	2301      	movs	r3, #1
 8010130:	4631      	mov	r1, r6
 8010132:	4628      	mov	r0, r5
 8010134:	9204      	str	r2, [sp, #16]
 8010136:	47b8      	blx	r7
 8010138:	3001      	adds	r0, #1
 801013a:	f43f ae9b 	beq.w	800fe74 <_printf_float+0x9c>
 801013e:	9b05      	ldr	r3, [sp, #20]
 8010140:	9a04      	ldr	r2, [sp, #16]
 8010142:	3301      	adds	r3, #1
 8010144:	9305      	str	r3, [sp, #20]
 8010146:	e7b7      	b.n	80100b8 <_printf_float+0x2e0>
 8010148:	4653      	mov	r3, sl
 801014a:	465a      	mov	r2, fp
 801014c:	4631      	mov	r1, r6
 801014e:	4628      	mov	r0, r5
 8010150:	47b8      	blx	r7
 8010152:	3001      	adds	r0, #1
 8010154:	d1be      	bne.n	80100d4 <_printf_float+0x2fc>
 8010156:	e68d      	b.n	800fe74 <_printf_float+0x9c>
 8010158:	9a04      	ldr	r2, [sp, #16]
 801015a:	464b      	mov	r3, r9
 801015c:	4442      	add	r2, r8
 801015e:	4631      	mov	r1, r6
 8010160:	4628      	mov	r0, r5
 8010162:	47b8      	blx	r7
 8010164:	3001      	adds	r0, #1
 8010166:	d1c1      	bne.n	80100ec <_printf_float+0x314>
 8010168:	e684      	b.n	800fe74 <_printf_float+0x9c>
 801016a:	9a08      	ldr	r2, [sp, #32]
 801016c:	2a01      	cmp	r2, #1
 801016e:	dc01      	bgt.n	8010174 <_printf_float+0x39c>
 8010170:	07db      	lsls	r3, r3, #31
 8010172:	d537      	bpl.n	80101e4 <_printf_float+0x40c>
 8010174:	2301      	movs	r3, #1
 8010176:	4642      	mov	r2, r8
 8010178:	4631      	mov	r1, r6
 801017a:	4628      	mov	r0, r5
 801017c:	47b8      	blx	r7
 801017e:	3001      	adds	r0, #1
 8010180:	f43f ae78 	beq.w	800fe74 <_printf_float+0x9c>
 8010184:	4653      	mov	r3, sl
 8010186:	465a      	mov	r2, fp
 8010188:	4631      	mov	r1, r6
 801018a:	4628      	mov	r0, r5
 801018c:	47b8      	blx	r7
 801018e:	3001      	adds	r0, #1
 8010190:	f43f ae70 	beq.w	800fe74 <_printf_float+0x9c>
 8010194:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010198:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801019c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a0:	d01b      	beq.n	80101da <_printf_float+0x402>
 80101a2:	9b08      	ldr	r3, [sp, #32]
 80101a4:	f108 0201 	add.w	r2, r8, #1
 80101a8:	3b01      	subs	r3, #1
 80101aa:	4631      	mov	r1, r6
 80101ac:	4628      	mov	r0, r5
 80101ae:	47b8      	blx	r7
 80101b0:	3001      	adds	r0, #1
 80101b2:	d10e      	bne.n	80101d2 <_printf_float+0x3fa>
 80101b4:	e65e      	b.n	800fe74 <_printf_float+0x9c>
 80101b6:	2301      	movs	r3, #1
 80101b8:	464a      	mov	r2, r9
 80101ba:	4631      	mov	r1, r6
 80101bc:	4628      	mov	r0, r5
 80101be:	47b8      	blx	r7
 80101c0:	3001      	adds	r0, #1
 80101c2:	f43f ae57 	beq.w	800fe74 <_printf_float+0x9c>
 80101c6:	f108 0801 	add.w	r8, r8, #1
 80101ca:	9b08      	ldr	r3, [sp, #32]
 80101cc:	3b01      	subs	r3, #1
 80101ce:	4543      	cmp	r3, r8
 80101d0:	dcf1      	bgt.n	80101b6 <_printf_float+0x3de>
 80101d2:	9b04      	ldr	r3, [sp, #16]
 80101d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80101d8:	e6db      	b.n	800ff92 <_printf_float+0x1ba>
 80101da:	f04f 0800 	mov.w	r8, #0
 80101de:	f104 091a 	add.w	r9, r4, #26
 80101e2:	e7f2      	b.n	80101ca <_printf_float+0x3f2>
 80101e4:	2301      	movs	r3, #1
 80101e6:	4642      	mov	r2, r8
 80101e8:	e7df      	b.n	80101aa <_printf_float+0x3d2>
 80101ea:	2301      	movs	r3, #1
 80101ec:	464a      	mov	r2, r9
 80101ee:	4631      	mov	r1, r6
 80101f0:	4628      	mov	r0, r5
 80101f2:	47b8      	blx	r7
 80101f4:	3001      	adds	r0, #1
 80101f6:	f43f ae3d 	beq.w	800fe74 <_printf_float+0x9c>
 80101fa:	f108 0801 	add.w	r8, r8, #1
 80101fe:	68e3      	ldr	r3, [r4, #12]
 8010200:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010202:	1a5b      	subs	r3, r3, r1
 8010204:	4543      	cmp	r3, r8
 8010206:	dcf0      	bgt.n	80101ea <_printf_float+0x412>
 8010208:	e6f7      	b.n	800fffa <_printf_float+0x222>
 801020a:	f04f 0800 	mov.w	r8, #0
 801020e:	f104 0919 	add.w	r9, r4, #25
 8010212:	e7f4      	b.n	80101fe <_printf_float+0x426>

08010214 <_printf_common>:
 8010214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010218:	4616      	mov	r6, r2
 801021a:	4699      	mov	r9, r3
 801021c:	688a      	ldr	r2, [r1, #8]
 801021e:	690b      	ldr	r3, [r1, #16]
 8010220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010224:	4293      	cmp	r3, r2
 8010226:	bfb8      	it	lt
 8010228:	4613      	movlt	r3, r2
 801022a:	6033      	str	r3, [r6, #0]
 801022c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010230:	4607      	mov	r7, r0
 8010232:	460c      	mov	r4, r1
 8010234:	b10a      	cbz	r2, 801023a <_printf_common+0x26>
 8010236:	3301      	adds	r3, #1
 8010238:	6033      	str	r3, [r6, #0]
 801023a:	6823      	ldr	r3, [r4, #0]
 801023c:	0699      	lsls	r1, r3, #26
 801023e:	bf42      	ittt	mi
 8010240:	6833      	ldrmi	r3, [r6, #0]
 8010242:	3302      	addmi	r3, #2
 8010244:	6033      	strmi	r3, [r6, #0]
 8010246:	6825      	ldr	r5, [r4, #0]
 8010248:	f015 0506 	ands.w	r5, r5, #6
 801024c:	d106      	bne.n	801025c <_printf_common+0x48>
 801024e:	f104 0a19 	add.w	sl, r4, #25
 8010252:	68e3      	ldr	r3, [r4, #12]
 8010254:	6832      	ldr	r2, [r6, #0]
 8010256:	1a9b      	subs	r3, r3, r2
 8010258:	42ab      	cmp	r3, r5
 801025a:	dc26      	bgt.n	80102aa <_printf_common+0x96>
 801025c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010260:	1e13      	subs	r3, r2, #0
 8010262:	6822      	ldr	r2, [r4, #0]
 8010264:	bf18      	it	ne
 8010266:	2301      	movne	r3, #1
 8010268:	0692      	lsls	r2, r2, #26
 801026a:	d42b      	bmi.n	80102c4 <_printf_common+0xb0>
 801026c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010270:	4649      	mov	r1, r9
 8010272:	4638      	mov	r0, r7
 8010274:	47c0      	blx	r8
 8010276:	3001      	adds	r0, #1
 8010278:	d01e      	beq.n	80102b8 <_printf_common+0xa4>
 801027a:	6823      	ldr	r3, [r4, #0]
 801027c:	68e5      	ldr	r5, [r4, #12]
 801027e:	6832      	ldr	r2, [r6, #0]
 8010280:	f003 0306 	and.w	r3, r3, #6
 8010284:	2b04      	cmp	r3, #4
 8010286:	bf08      	it	eq
 8010288:	1aad      	subeq	r5, r5, r2
 801028a:	68a3      	ldr	r3, [r4, #8]
 801028c:	6922      	ldr	r2, [r4, #16]
 801028e:	bf0c      	ite	eq
 8010290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010294:	2500      	movne	r5, #0
 8010296:	4293      	cmp	r3, r2
 8010298:	bfc4      	itt	gt
 801029a:	1a9b      	subgt	r3, r3, r2
 801029c:	18ed      	addgt	r5, r5, r3
 801029e:	2600      	movs	r6, #0
 80102a0:	341a      	adds	r4, #26
 80102a2:	42b5      	cmp	r5, r6
 80102a4:	d11a      	bne.n	80102dc <_printf_common+0xc8>
 80102a6:	2000      	movs	r0, #0
 80102a8:	e008      	b.n	80102bc <_printf_common+0xa8>
 80102aa:	2301      	movs	r3, #1
 80102ac:	4652      	mov	r2, sl
 80102ae:	4649      	mov	r1, r9
 80102b0:	4638      	mov	r0, r7
 80102b2:	47c0      	blx	r8
 80102b4:	3001      	adds	r0, #1
 80102b6:	d103      	bne.n	80102c0 <_printf_common+0xac>
 80102b8:	f04f 30ff 	mov.w	r0, #4294967295
 80102bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102c0:	3501      	adds	r5, #1
 80102c2:	e7c6      	b.n	8010252 <_printf_common+0x3e>
 80102c4:	18e1      	adds	r1, r4, r3
 80102c6:	1c5a      	adds	r2, r3, #1
 80102c8:	2030      	movs	r0, #48	; 0x30
 80102ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80102ce:	4422      	add	r2, r4
 80102d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80102d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80102d8:	3302      	adds	r3, #2
 80102da:	e7c7      	b.n	801026c <_printf_common+0x58>
 80102dc:	2301      	movs	r3, #1
 80102de:	4622      	mov	r2, r4
 80102e0:	4649      	mov	r1, r9
 80102e2:	4638      	mov	r0, r7
 80102e4:	47c0      	blx	r8
 80102e6:	3001      	adds	r0, #1
 80102e8:	d0e6      	beq.n	80102b8 <_printf_common+0xa4>
 80102ea:	3601      	adds	r6, #1
 80102ec:	e7d9      	b.n	80102a2 <_printf_common+0x8e>
	...

080102f0 <_printf_i>:
 80102f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80102f4:	7e0f      	ldrb	r7, [r1, #24]
 80102f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80102f8:	2f78      	cmp	r7, #120	; 0x78
 80102fa:	4691      	mov	r9, r2
 80102fc:	4680      	mov	r8, r0
 80102fe:	460c      	mov	r4, r1
 8010300:	469a      	mov	sl, r3
 8010302:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010306:	d807      	bhi.n	8010318 <_printf_i+0x28>
 8010308:	2f62      	cmp	r7, #98	; 0x62
 801030a:	d80a      	bhi.n	8010322 <_printf_i+0x32>
 801030c:	2f00      	cmp	r7, #0
 801030e:	f000 80d8 	beq.w	80104c2 <_printf_i+0x1d2>
 8010312:	2f58      	cmp	r7, #88	; 0x58
 8010314:	f000 80a3 	beq.w	801045e <_printf_i+0x16e>
 8010318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801031c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010320:	e03a      	b.n	8010398 <_printf_i+0xa8>
 8010322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010326:	2b15      	cmp	r3, #21
 8010328:	d8f6      	bhi.n	8010318 <_printf_i+0x28>
 801032a:	a101      	add	r1, pc, #4	; (adr r1, 8010330 <_printf_i+0x40>)
 801032c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010330:	08010389 	.word	0x08010389
 8010334:	0801039d 	.word	0x0801039d
 8010338:	08010319 	.word	0x08010319
 801033c:	08010319 	.word	0x08010319
 8010340:	08010319 	.word	0x08010319
 8010344:	08010319 	.word	0x08010319
 8010348:	0801039d 	.word	0x0801039d
 801034c:	08010319 	.word	0x08010319
 8010350:	08010319 	.word	0x08010319
 8010354:	08010319 	.word	0x08010319
 8010358:	08010319 	.word	0x08010319
 801035c:	080104a9 	.word	0x080104a9
 8010360:	080103cd 	.word	0x080103cd
 8010364:	0801048b 	.word	0x0801048b
 8010368:	08010319 	.word	0x08010319
 801036c:	08010319 	.word	0x08010319
 8010370:	080104cb 	.word	0x080104cb
 8010374:	08010319 	.word	0x08010319
 8010378:	080103cd 	.word	0x080103cd
 801037c:	08010319 	.word	0x08010319
 8010380:	08010319 	.word	0x08010319
 8010384:	08010493 	.word	0x08010493
 8010388:	682b      	ldr	r3, [r5, #0]
 801038a:	1d1a      	adds	r2, r3, #4
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	602a      	str	r2, [r5, #0]
 8010390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010398:	2301      	movs	r3, #1
 801039a:	e0a3      	b.n	80104e4 <_printf_i+0x1f4>
 801039c:	6820      	ldr	r0, [r4, #0]
 801039e:	6829      	ldr	r1, [r5, #0]
 80103a0:	0606      	lsls	r6, r0, #24
 80103a2:	f101 0304 	add.w	r3, r1, #4
 80103a6:	d50a      	bpl.n	80103be <_printf_i+0xce>
 80103a8:	680e      	ldr	r6, [r1, #0]
 80103aa:	602b      	str	r3, [r5, #0]
 80103ac:	2e00      	cmp	r6, #0
 80103ae:	da03      	bge.n	80103b8 <_printf_i+0xc8>
 80103b0:	232d      	movs	r3, #45	; 0x2d
 80103b2:	4276      	negs	r6, r6
 80103b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103b8:	485e      	ldr	r0, [pc, #376]	; (8010534 <_printf_i+0x244>)
 80103ba:	230a      	movs	r3, #10
 80103bc:	e019      	b.n	80103f2 <_printf_i+0x102>
 80103be:	680e      	ldr	r6, [r1, #0]
 80103c0:	602b      	str	r3, [r5, #0]
 80103c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80103c6:	bf18      	it	ne
 80103c8:	b236      	sxthne	r6, r6
 80103ca:	e7ef      	b.n	80103ac <_printf_i+0xbc>
 80103cc:	682b      	ldr	r3, [r5, #0]
 80103ce:	6820      	ldr	r0, [r4, #0]
 80103d0:	1d19      	adds	r1, r3, #4
 80103d2:	6029      	str	r1, [r5, #0]
 80103d4:	0601      	lsls	r1, r0, #24
 80103d6:	d501      	bpl.n	80103dc <_printf_i+0xec>
 80103d8:	681e      	ldr	r6, [r3, #0]
 80103da:	e002      	b.n	80103e2 <_printf_i+0xf2>
 80103dc:	0646      	lsls	r6, r0, #25
 80103de:	d5fb      	bpl.n	80103d8 <_printf_i+0xe8>
 80103e0:	881e      	ldrh	r6, [r3, #0]
 80103e2:	4854      	ldr	r0, [pc, #336]	; (8010534 <_printf_i+0x244>)
 80103e4:	2f6f      	cmp	r7, #111	; 0x6f
 80103e6:	bf0c      	ite	eq
 80103e8:	2308      	moveq	r3, #8
 80103ea:	230a      	movne	r3, #10
 80103ec:	2100      	movs	r1, #0
 80103ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80103f2:	6865      	ldr	r5, [r4, #4]
 80103f4:	60a5      	str	r5, [r4, #8]
 80103f6:	2d00      	cmp	r5, #0
 80103f8:	bfa2      	ittt	ge
 80103fa:	6821      	ldrge	r1, [r4, #0]
 80103fc:	f021 0104 	bicge.w	r1, r1, #4
 8010400:	6021      	strge	r1, [r4, #0]
 8010402:	b90e      	cbnz	r6, 8010408 <_printf_i+0x118>
 8010404:	2d00      	cmp	r5, #0
 8010406:	d04d      	beq.n	80104a4 <_printf_i+0x1b4>
 8010408:	4615      	mov	r5, r2
 801040a:	fbb6 f1f3 	udiv	r1, r6, r3
 801040e:	fb03 6711 	mls	r7, r3, r1, r6
 8010412:	5dc7      	ldrb	r7, [r0, r7]
 8010414:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010418:	4637      	mov	r7, r6
 801041a:	42bb      	cmp	r3, r7
 801041c:	460e      	mov	r6, r1
 801041e:	d9f4      	bls.n	801040a <_printf_i+0x11a>
 8010420:	2b08      	cmp	r3, #8
 8010422:	d10b      	bne.n	801043c <_printf_i+0x14c>
 8010424:	6823      	ldr	r3, [r4, #0]
 8010426:	07de      	lsls	r6, r3, #31
 8010428:	d508      	bpl.n	801043c <_printf_i+0x14c>
 801042a:	6923      	ldr	r3, [r4, #16]
 801042c:	6861      	ldr	r1, [r4, #4]
 801042e:	4299      	cmp	r1, r3
 8010430:	bfde      	ittt	le
 8010432:	2330      	movle	r3, #48	; 0x30
 8010434:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010438:	f105 35ff 	addle.w	r5, r5, #4294967295
 801043c:	1b52      	subs	r2, r2, r5
 801043e:	6122      	str	r2, [r4, #16]
 8010440:	f8cd a000 	str.w	sl, [sp]
 8010444:	464b      	mov	r3, r9
 8010446:	aa03      	add	r2, sp, #12
 8010448:	4621      	mov	r1, r4
 801044a:	4640      	mov	r0, r8
 801044c:	f7ff fee2 	bl	8010214 <_printf_common>
 8010450:	3001      	adds	r0, #1
 8010452:	d14c      	bne.n	80104ee <_printf_i+0x1fe>
 8010454:	f04f 30ff 	mov.w	r0, #4294967295
 8010458:	b004      	add	sp, #16
 801045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801045e:	4835      	ldr	r0, [pc, #212]	; (8010534 <_printf_i+0x244>)
 8010460:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010464:	6829      	ldr	r1, [r5, #0]
 8010466:	6823      	ldr	r3, [r4, #0]
 8010468:	f851 6b04 	ldr.w	r6, [r1], #4
 801046c:	6029      	str	r1, [r5, #0]
 801046e:	061d      	lsls	r5, r3, #24
 8010470:	d514      	bpl.n	801049c <_printf_i+0x1ac>
 8010472:	07df      	lsls	r7, r3, #31
 8010474:	bf44      	itt	mi
 8010476:	f043 0320 	orrmi.w	r3, r3, #32
 801047a:	6023      	strmi	r3, [r4, #0]
 801047c:	b91e      	cbnz	r6, 8010486 <_printf_i+0x196>
 801047e:	6823      	ldr	r3, [r4, #0]
 8010480:	f023 0320 	bic.w	r3, r3, #32
 8010484:	6023      	str	r3, [r4, #0]
 8010486:	2310      	movs	r3, #16
 8010488:	e7b0      	b.n	80103ec <_printf_i+0xfc>
 801048a:	6823      	ldr	r3, [r4, #0]
 801048c:	f043 0320 	orr.w	r3, r3, #32
 8010490:	6023      	str	r3, [r4, #0]
 8010492:	2378      	movs	r3, #120	; 0x78
 8010494:	4828      	ldr	r0, [pc, #160]	; (8010538 <_printf_i+0x248>)
 8010496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801049a:	e7e3      	b.n	8010464 <_printf_i+0x174>
 801049c:	0659      	lsls	r1, r3, #25
 801049e:	bf48      	it	mi
 80104a0:	b2b6      	uxthmi	r6, r6
 80104a2:	e7e6      	b.n	8010472 <_printf_i+0x182>
 80104a4:	4615      	mov	r5, r2
 80104a6:	e7bb      	b.n	8010420 <_printf_i+0x130>
 80104a8:	682b      	ldr	r3, [r5, #0]
 80104aa:	6826      	ldr	r6, [r4, #0]
 80104ac:	6961      	ldr	r1, [r4, #20]
 80104ae:	1d18      	adds	r0, r3, #4
 80104b0:	6028      	str	r0, [r5, #0]
 80104b2:	0635      	lsls	r5, r6, #24
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	d501      	bpl.n	80104bc <_printf_i+0x1cc>
 80104b8:	6019      	str	r1, [r3, #0]
 80104ba:	e002      	b.n	80104c2 <_printf_i+0x1d2>
 80104bc:	0670      	lsls	r0, r6, #25
 80104be:	d5fb      	bpl.n	80104b8 <_printf_i+0x1c8>
 80104c0:	8019      	strh	r1, [r3, #0]
 80104c2:	2300      	movs	r3, #0
 80104c4:	6123      	str	r3, [r4, #16]
 80104c6:	4615      	mov	r5, r2
 80104c8:	e7ba      	b.n	8010440 <_printf_i+0x150>
 80104ca:	682b      	ldr	r3, [r5, #0]
 80104cc:	1d1a      	adds	r2, r3, #4
 80104ce:	602a      	str	r2, [r5, #0]
 80104d0:	681d      	ldr	r5, [r3, #0]
 80104d2:	6862      	ldr	r2, [r4, #4]
 80104d4:	2100      	movs	r1, #0
 80104d6:	4628      	mov	r0, r5
 80104d8:	f7ef ff0a 	bl	80002f0 <memchr>
 80104dc:	b108      	cbz	r0, 80104e2 <_printf_i+0x1f2>
 80104de:	1b40      	subs	r0, r0, r5
 80104e0:	6060      	str	r0, [r4, #4]
 80104e2:	6863      	ldr	r3, [r4, #4]
 80104e4:	6123      	str	r3, [r4, #16]
 80104e6:	2300      	movs	r3, #0
 80104e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104ec:	e7a8      	b.n	8010440 <_printf_i+0x150>
 80104ee:	6923      	ldr	r3, [r4, #16]
 80104f0:	462a      	mov	r2, r5
 80104f2:	4649      	mov	r1, r9
 80104f4:	4640      	mov	r0, r8
 80104f6:	47d0      	blx	sl
 80104f8:	3001      	adds	r0, #1
 80104fa:	d0ab      	beq.n	8010454 <_printf_i+0x164>
 80104fc:	6823      	ldr	r3, [r4, #0]
 80104fe:	079b      	lsls	r3, r3, #30
 8010500:	d413      	bmi.n	801052a <_printf_i+0x23a>
 8010502:	68e0      	ldr	r0, [r4, #12]
 8010504:	9b03      	ldr	r3, [sp, #12]
 8010506:	4298      	cmp	r0, r3
 8010508:	bfb8      	it	lt
 801050a:	4618      	movlt	r0, r3
 801050c:	e7a4      	b.n	8010458 <_printf_i+0x168>
 801050e:	2301      	movs	r3, #1
 8010510:	4632      	mov	r2, r6
 8010512:	4649      	mov	r1, r9
 8010514:	4640      	mov	r0, r8
 8010516:	47d0      	blx	sl
 8010518:	3001      	adds	r0, #1
 801051a:	d09b      	beq.n	8010454 <_printf_i+0x164>
 801051c:	3501      	adds	r5, #1
 801051e:	68e3      	ldr	r3, [r4, #12]
 8010520:	9903      	ldr	r1, [sp, #12]
 8010522:	1a5b      	subs	r3, r3, r1
 8010524:	42ab      	cmp	r3, r5
 8010526:	dcf2      	bgt.n	801050e <_printf_i+0x21e>
 8010528:	e7eb      	b.n	8010502 <_printf_i+0x212>
 801052a:	2500      	movs	r5, #0
 801052c:	f104 0619 	add.w	r6, r4, #25
 8010530:	e7f5      	b.n	801051e <_printf_i+0x22e>
 8010532:	bf00      	nop
 8010534:	0801d1ba 	.word	0x0801d1ba
 8010538:	0801d1cb 	.word	0x0801d1cb

0801053c <siprintf>:
 801053c:	b40e      	push	{r1, r2, r3}
 801053e:	b500      	push	{lr}
 8010540:	b09c      	sub	sp, #112	; 0x70
 8010542:	ab1d      	add	r3, sp, #116	; 0x74
 8010544:	9002      	str	r0, [sp, #8]
 8010546:	9006      	str	r0, [sp, #24]
 8010548:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801054c:	4809      	ldr	r0, [pc, #36]	; (8010574 <siprintf+0x38>)
 801054e:	9107      	str	r1, [sp, #28]
 8010550:	9104      	str	r1, [sp, #16]
 8010552:	4909      	ldr	r1, [pc, #36]	; (8010578 <siprintf+0x3c>)
 8010554:	f853 2b04 	ldr.w	r2, [r3], #4
 8010558:	9105      	str	r1, [sp, #20]
 801055a:	6800      	ldr	r0, [r0, #0]
 801055c:	9301      	str	r3, [sp, #4]
 801055e:	a902      	add	r1, sp, #8
 8010560:	f001 fc34 	bl	8011dcc <_svfiprintf_r>
 8010564:	9b02      	ldr	r3, [sp, #8]
 8010566:	2200      	movs	r2, #0
 8010568:	701a      	strb	r2, [r3, #0]
 801056a:	b01c      	add	sp, #112	; 0x70
 801056c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010570:	b003      	add	sp, #12
 8010572:	4770      	bx	lr
 8010574:	24000498 	.word	0x24000498
 8010578:	ffff0208 	.word	0xffff0208

0801057c <stpcpy>:
 801057c:	4603      	mov	r3, r0
 801057e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010582:	4618      	mov	r0, r3
 8010584:	f803 2b01 	strb.w	r2, [r3], #1
 8010588:	2a00      	cmp	r2, #0
 801058a:	d1f8      	bne.n	801057e <stpcpy+0x2>
 801058c:	4770      	bx	lr

0801058e <strcat>:
 801058e:	b510      	push	{r4, lr}
 8010590:	4602      	mov	r2, r0
 8010592:	7814      	ldrb	r4, [r2, #0]
 8010594:	4613      	mov	r3, r2
 8010596:	3201      	adds	r2, #1
 8010598:	2c00      	cmp	r4, #0
 801059a:	d1fa      	bne.n	8010592 <strcat+0x4>
 801059c:	3b01      	subs	r3, #1
 801059e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80105a6:	2a00      	cmp	r2, #0
 80105a8:	d1f9      	bne.n	801059e <strcat+0x10>
 80105aa:	bd10      	pop	{r4, pc}

080105ac <strcpy>:
 80105ac:	4603      	mov	r3, r0
 80105ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105b2:	f803 2b01 	strb.w	r2, [r3], #1
 80105b6:	2a00      	cmp	r2, #0
 80105b8:	d1f9      	bne.n	80105ae <strcpy+0x2>
 80105ba:	4770      	bx	lr

080105bc <strcspn>:
 80105bc:	b570      	push	{r4, r5, r6, lr}
 80105be:	4603      	mov	r3, r0
 80105c0:	461e      	mov	r6, r3
 80105c2:	f813 4b01 	ldrb.w	r4, [r3], #1
 80105c6:	b144      	cbz	r4, 80105da <strcspn+0x1e>
 80105c8:	1e4a      	subs	r2, r1, #1
 80105ca:	e001      	b.n	80105d0 <strcspn+0x14>
 80105cc:	42a5      	cmp	r5, r4
 80105ce:	d004      	beq.n	80105da <strcspn+0x1e>
 80105d0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80105d4:	2d00      	cmp	r5, #0
 80105d6:	d1f9      	bne.n	80105cc <strcspn+0x10>
 80105d8:	e7f2      	b.n	80105c0 <strcspn+0x4>
 80105da:	1a30      	subs	r0, r6, r0
 80105dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080105e0 <strtok>:
 80105e0:	4b16      	ldr	r3, [pc, #88]	; (801063c <strtok+0x5c>)
 80105e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80105e4:	681e      	ldr	r6, [r3, #0]
 80105e6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80105e8:	4605      	mov	r5, r0
 80105ea:	b9fc      	cbnz	r4, 801062c <strtok+0x4c>
 80105ec:	2050      	movs	r0, #80	; 0x50
 80105ee:	9101      	str	r1, [sp, #4]
 80105f0:	f000 ff0e 	bl	8011410 <malloc>
 80105f4:	9901      	ldr	r1, [sp, #4]
 80105f6:	65b0      	str	r0, [r6, #88]	; 0x58
 80105f8:	4602      	mov	r2, r0
 80105fa:	b920      	cbnz	r0, 8010606 <strtok+0x26>
 80105fc:	4b10      	ldr	r3, [pc, #64]	; (8010640 <strtok+0x60>)
 80105fe:	4811      	ldr	r0, [pc, #68]	; (8010644 <strtok+0x64>)
 8010600:	2157      	movs	r1, #87	; 0x57
 8010602:	f000 f8d5 	bl	80107b0 <__assert_func>
 8010606:	e9c0 4400 	strd	r4, r4, [r0]
 801060a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801060e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010612:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8010616:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801061a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801061e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8010622:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8010626:	6184      	str	r4, [r0, #24]
 8010628:	7704      	strb	r4, [r0, #28]
 801062a:	6244      	str	r4, [r0, #36]	; 0x24
 801062c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801062e:	2301      	movs	r3, #1
 8010630:	4628      	mov	r0, r5
 8010632:	b002      	add	sp, #8
 8010634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010638:	f000 b806 	b.w	8010648 <__strtok_r>
 801063c:	24000498 	.word	0x24000498
 8010640:	0801d1dc 	.word	0x0801d1dc
 8010644:	0801d1f3 	.word	0x0801d1f3

08010648 <__strtok_r>:
 8010648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801064a:	b908      	cbnz	r0, 8010650 <__strtok_r+0x8>
 801064c:	6810      	ldr	r0, [r2, #0]
 801064e:	b188      	cbz	r0, 8010674 <__strtok_r+0x2c>
 8010650:	4604      	mov	r4, r0
 8010652:	4620      	mov	r0, r4
 8010654:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010658:	460f      	mov	r7, r1
 801065a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801065e:	b91e      	cbnz	r6, 8010668 <__strtok_r+0x20>
 8010660:	b965      	cbnz	r5, 801067c <__strtok_r+0x34>
 8010662:	6015      	str	r5, [r2, #0]
 8010664:	4628      	mov	r0, r5
 8010666:	e005      	b.n	8010674 <__strtok_r+0x2c>
 8010668:	42b5      	cmp	r5, r6
 801066a:	d1f6      	bne.n	801065a <__strtok_r+0x12>
 801066c:	2b00      	cmp	r3, #0
 801066e:	d1f0      	bne.n	8010652 <__strtok_r+0xa>
 8010670:	6014      	str	r4, [r2, #0]
 8010672:	7003      	strb	r3, [r0, #0]
 8010674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010676:	461c      	mov	r4, r3
 8010678:	e00c      	b.n	8010694 <__strtok_r+0x4c>
 801067a:	b915      	cbnz	r5, 8010682 <__strtok_r+0x3a>
 801067c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010680:	460e      	mov	r6, r1
 8010682:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010686:	42ab      	cmp	r3, r5
 8010688:	d1f7      	bne.n	801067a <__strtok_r+0x32>
 801068a:	2b00      	cmp	r3, #0
 801068c:	d0f3      	beq.n	8010676 <__strtok_r+0x2e>
 801068e:	2300      	movs	r3, #0
 8010690:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010694:	6014      	str	r4, [r2, #0]
 8010696:	e7ed      	b.n	8010674 <__strtok_r+0x2c>

08010698 <_strtol_l.constprop.0>:
 8010698:	2b01      	cmp	r3, #1
 801069a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801069e:	d001      	beq.n	80106a4 <_strtol_l.constprop.0+0xc>
 80106a0:	2b24      	cmp	r3, #36	; 0x24
 80106a2:	d906      	bls.n	80106b2 <_strtol_l.constprop.0+0x1a>
 80106a4:	f7ff fac8 	bl	800fc38 <__errno>
 80106a8:	2316      	movs	r3, #22
 80106aa:	6003      	str	r3, [r0, #0]
 80106ac:	2000      	movs	r0, #0
 80106ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010798 <_strtol_l.constprop.0+0x100>
 80106b6:	460d      	mov	r5, r1
 80106b8:	462e      	mov	r6, r5
 80106ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80106be:	f814 700c 	ldrb.w	r7, [r4, ip]
 80106c2:	f017 0708 	ands.w	r7, r7, #8
 80106c6:	d1f7      	bne.n	80106b8 <_strtol_l.constprop.0+0x20>
 80106c8:	2c2d      	cmp	r4, #45	; 0x2d
 80106ca:	d132      	bne.n	8010732 <_strtol_l.constprop.0+0x9a>
 80106cc:	782c      	ldrb	r4, [r5, #0]
 80106ce:	2701      	movs	r7, #1
 80106d0:	1cb5      	adds	r5, r6, #2
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d05b      	beq.n	801078e <_strtol_l.constprop.0+0xf6>
 80106d6:	2b10      	cmp	r3, #16
 80106d8:	d109      	bne.n	80106ee <_strtol_l.constprop.0+0x56>
 80106da:	2c30      	cmp	r4, #48	; 0x30
 80106dc:	d107      	bne.n	80106ee <_strtol_l.constprop.0+0x56>
 80106de:	782c      	ldrb	r4, [r5, #0]
 80106e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80106e4:	2c58      	cmp	r4, #88	; 0x58
 80106e6:	d14d      	bne.n	8010784 <_strtol_l.constprop.0+0xec>
 80106e8:	786c      	ldrb	r4, [r5, #1]
 80106ea:	2310      	movs	r3, #16
 80106ec:	3502      	adds	r5, #2
 80106ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80106f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80106f6:	f04f 0c00 	mov.w	ip, #0
 80106fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80106fe:	4666      	mov	r6, ip
 8010700:	fb03 8a19 	mls	sl, r3, r9, r8
 8010704:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010708:	f1be 0f09 	cmp.w	lr, #9
 801070c:	d816      	bhi.n	801073c <_strtol_l.constprop.0+0xa4>
 801070e:	4674      	mov	r4, lr
 8010710:	42a3      	cmp	r3, r4
 8010712:	dd24      	ble.n	801075e <_strtol_l.constprop.0+0xc6>
 8010714:	f1bc 0f00 	cmp.w	ip, #0
 8010718:	db1e      	blt.n	8010758 <_strtol_l.constprop.0+0xc0>
 801071a:	45b1      	cmp	r9, r6
 801071c:	d31c      	bcc.n	8010758 <_strtol_l.constprop.0+0xc0>
 801071e:	d101      	bne.n	8010724 <_strtol_l.constprop.0+0x8c>
 8010720:	45a2      	cmp	sl, r4
 8010722:	db19      	blt.n	8010758 <_strtol_l.constprop.0+0xc0>
 8010724:	fb06 4603 	mla	r6, r6, r3, r4
 8010728:	f04f 0c01 	mov.w	ip, #1
 801072c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010730:	e7e8      	b.n	8010704 <_strtol_l.constprop.0+0x6c>
 8010732:	2c2b      	cmp	r4, #43	; 0x2b
 8010734:	bf04      	itt	eq
 8010736:	782c      	ldrbeq	r4, [r5, #0]
 8010738:	1cb5      	addeq	r5, r6, #2
 801073a:	e7ca      	b.n	80106d2 <_strtol_l.constprop.0+0x3a>
 801073c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010740:	f1be 0f19 	cmp.w	lr, #25
 8010744:	d801      	bhi.n	801074a <_strtol_l.constprop.0+0xb2>
 8010746:	3c37      	subs	r4, #55	; 0x37
 8010748:	e7e2      	b.n	8010710 <_strtol_l.constprop.0+0x78>
 801074a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801074e:	f1be 0f19 	cmp.w	lr, #25
 8010752:	d804      	bhi.n	801075e <_strtol_l.constprop.0+0xc6>
 8010754:	3c57      	subs	r4, #87	; 0x57
 8010756:	e7db      	b.n	8010710 <_strtol_l.constprop.0+0x78>
 8010758:	f04f 3cff 	mov.w	ip, #4294967295
 801075c:	e7e6      	b.n	801072c <_strtol_l.constprop.0+0x94>
 801075e:	f1bc 0f00 	cmp.w	ip, #0
 8010762:	da05      	bge.n	8010770 <_strtol_l.constprop.0+0xd8>
 8010764:	2322      	movs	r3, #34	; 0x22
 8010766:	6003      	str	r3, [r0, #0]
 8010768:	4646      	mov	r6, r8
 801076a:	b942      	cbnz	r2, 801077e <_strtol_l.constprop.0+0xe6>
 801076c:	4630      	mov	r0, r6
 801076e:	e79e      	b.n	80106ae <_strtol_l.constprop.0+0x16>
 8010770:	b107      	cbz	r7, 8010774 <_strtol_l.constprop.0+0xdc>
 8010772:	4276      	negs	r6, r6
 8010774:	2a00      	cmp	r2, #0
 8010776:	d0f9      	beq.n	801076c <_strtol_l.constprop.0+0xd4>
 8010778:	f1bc 0f00 	cmp.w	ip, #0
 801077c:	d000      	beq.n	8010780 <_strtol_l.constprop.0+0xe8>
 801077e:	1e69      	subs	r1, r5, #1
 8010780:	6011      	str	r1, [r2, #0]
 8010782:	e7f3      	b.n	801076c <_strtol_l.constprop.0+0xd4>
 8010784:	2430      	movs	r4, #48	; 0x30
 8010786:	2b00      	cmp	r3, #0
 8010788:	d1b1      	bne.n	80106ee <_strtol_l.constprop.0+0x56>
 801078a:	2308      	movs	r3, #8
 801078c:	e7af      	b.n	80106ee <_strtol_l.constprop.0+0x56>
 801078e:	2c30      	cmp	r4, #48	; 0x30
 8010790:	d0a5      	beq.n	80106de <_strtol_l.constprop.0+0x46>
 8010792:	230a      	movs	r3, #10
 8010794:	e7ab      	b.n	80106ee <_strtol_l.constprop.0+0x56>
 8010796:	bf00      	nop
 8010798:	0801d0a1 	.word	0x0801d0a1

0801079c <strtol>:
 801079c:	4613      	mov	r3, r2
 801079e:	460a      	mov	r2, r1
 80107a0:	4601      	mov	r1, r0
 80107a2:	4802      	ldr	r0, [pc, #8]	; (80107ac <strtol+0x10>)
 80107a4:	6800      	ldr	r0, [r0, #0]
 80107a6:	f7ff bf77 	b.w	8010698 <_strtol_l.constprop.0>
 80107aa:	bf00      	nop
 80107ac:	24000498 	.word	0x24000498

080107b0 <__assert_func>:
 80107b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80107b2:	4614      	mov	r4, r2
 80107b4:	461a      	mov	r2, r3
 80107b6:	4b09      	ldr	r3, [pc, #36]	; (80107dc <__assert_func+0x2c>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	4605      	mov	r5, r0
 80107bc:	68d8      	ldr	r0, [r3, #12]
 80107be:	b14c      	cbz	r4, 80107d4 <__assert_func+0x24>
 80107c0:	4b07      	ldr	r3, [pc, #28]	; (80107e0 <__assert_func+0x30>)
 80107c2:	9100      	str	r1, [sp, #0]
 80107c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80107c8:	4906      	ldr	r1, [pc, #24]	; (80107e4 <__assert_func+0x34>)
 80107ca:	462b      	mov	r3, r5
 80107cc:	f000 fe0a 	bl	80113e4 <fiprintf>
 80107d0:	f001 fe26 	bl	8012420 <abort>
 80107d4:	4b04      	ldr	r3, [pc, #16]	; (80107e8 <__assert_func+0x38>)
 80107d6:	461c      	mov	r4, r3
 80107d8:	e7f3      	b.n	80107c2 <__assert_func+0x12>
 80107da:	bf00      	nop
 80107dc:	24000498 	.word	0x24000498
 80107e0:	0801d250 	.word	0x0801d250
 80107e4:	0801d25d 	.word	0x0801d25d
 80107e8:	0801d28b 	.word	0x0801d28b

080107ec <quorem>:
 80107ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f0:	6903      	ldr	r3, [r0, #16]
 80107f2:	690c      	ldr	r4, [r1, #16]
 80107f4:	42a3      	cmp	r3, r4
 80107f6:	4607      	mov	r7, r0
 80107f8:	f2c0 8081 	blt.w	80108fe <quorem+0x112>
 80107fc:	3c01      	subs	r4, #1
 80107fe:	f101 0814 	add.w	r8, r1, #20
 8010802:	f100 0514 	add.w	r5, r0, #20
 8010806:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801080a:	9301      	str	r3, [sp, #4]
 801080c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010810:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010814:	3301      	adds	r3, #1
 8010816:	429a      	cmp	r2, r3
 8010818:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801081c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010820:	fbb2 f6f3 	udiv	r6, r2, r3
 8010824:	d331      	bcc.n	801088a <quorem+0x9e>
 8010826:	f04f 0e00 	mov.w	lr, #0
 801082a:	4640      	mov	r0, r8
 801082c:	46ac      	mov	ip, r5
 801082e:	46f2      	mov	sl, lr
 8010830:	f850 2b04 	ldr.w	r2, [r0], #4
 8010834:	b293      	uxth	r3, r2
 8010836:	fb06 e303 	mla	r3, r6, r3, lr
 801083a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801083e:	b29b      	uxth	r3, r3
 8010840:	ebaa 0303 	sub.w	r3, sl, r3
 8010844:	f8dc a000 	ldr.w	sl, [ip]
 8010848:	0c12      	lsrs	r2, r2, #16
 801084a:	fa13 f38a 	uxtah	r3, r3, sl
 801084e:	fb06 e202 	mla	r2, r6, r2, lr
 8010852:	9300      	str	r3, [sp, #0]
 8010854:	9b00      	ldr	r3, [sp, #0]
 8010856:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801085a:	b292      	uxth	r2, r2
 801085c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010860:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010864:	f8bd 3000 	ldrh.w	r3, [sp]
 8010868:	4581      	cmp	r9, r0
 801086a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801086e:	f84c 3b04 	str.w	r3, [ip], #4
 8010872:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010876:	d2db      	bcs.n	8010830 <quorem+0x44>
 8010878:	f855 300b 	ldr.w	r3, [r5, fp]
 801087c:	b92b      	cbnz	r3, 801088a <quorem+0x9e>
 801087e:	9b01      	ldr	r3, [sp, #4]
 8010880:	3b04      	subs	r3, #4
 8010882:	429d      	cmp	r5, r3
 8010884:	461a      	mov	r2, r3
 8010886:	d32e      	bcc.n	80108e6 <quorem+0xfa>
 8010888:	613c      	str	r4, [r7, #16]
 801088a:	4638      	mov	r0, r7
 801088c:	f001 f84a 	bl	8011924 <__mcmp>
 8010890:	2800      	cmp	r0, #0
 8010892:	db24      	blt.n	80108de <quorem+0xf2>
 8010894:	3601      	adds	r6, #1
 8010896:	4628      	mov	r0, r5
 8010898:	f04f 0c00 	mov.w	ip, #0
 801089c:	f858 2b04 	ldr.w	r2, [r8], #4
 80108a0:	f8d0 e000 	ldr.w	lr, [r0]
 80108a4:	b293      	uxth	r3, r2
 80108a6:	ebac 0303 	sub.w	r3, ip, r3
 80108aa:	0c12      	lsrs	r2, r2, #16
 80108ac:	fa13 f38e 	uxtah	r3, r3, lr
 80108b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80108b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80108b8:	b29b      	uxth	r3, r3
 80108ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80108be:	45c1      	cmp	r9, r8
 80108c0:	f840 3b04 	str.w	r3, [r0], #4
 80108c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80108c8:	d2e8      	bcs.n	801089c <quorem+0xb0>
 80108ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80108ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80108d2:	b922      	cbnz	r2, 80108de <quorem+0xf2>
 80108d4:	3b04      	subs	r3, #4
 80108d6:	429d      	cmp	r5, r3
 80108d8:	461a      	mov	r2, r3
 80108da:	d30a      	bcc.n	80108f2 <quorem+0x106>
 80108dc:	613c      	str	r4, [r7, #16]
 80108de:	4630      	mov	r0, r6
 80108e0:	b003      	add	sp, #12
 80108e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108e6:	6812      	ldr	r2, [r2, #0]
 80108e8:	3b04      	subs	r3, #4
 80108ea:	2a00      	cmp	r2, #0
 80108ec:	d1cc      	bne.n	8010888 <quorem+0x9c>
 80108ee:	3c01      	subs	r4, #1
 80108f0:	e7c7      	b.n	8010882 <quorem+0x96>
 80108f2:	6812      	ldr	r2, [r2, #0]
 80108f4:	3b04      	subs	r3, #4
 80108f6:	2a00      	cmp	r2, #0
 80108f8:	d1f0      	bne.n	80108dc <quorem+0xf0>
 80108fa:	3c01      	subs	r4, #1
 80108fc:	e7eb      	b.n	80108d6 <quorem+0xea>
 80108fe:	2000      	movs	r0, #0
 8010900:	e7ee      	b.n	80108e0 <quorem+0xf4>
 8010902:	0000      	movs	r0, r0
 8010904:	0000      	movs	r0, r0
	...

08010908 <_dtoa_r>:
 8010908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801090c:	ed2d 8b02 	vpush	{d8}
 8010910:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010912:	b091      	sub	sp, #68	; 0x44
 8010914:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010918:	ec59 8b10 	vmov	r8, r9, d0
 801091c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801091e:	9106      	str	r1, [sp, #24]
 8010920:	4606      	mov	r6, r0
 8010922:	9208      	str	r2, [sp, #32]
 8010924:	930c      	str	r3, [sp, #48]	; 0x30
 8010926:	b975      	cbnz	r5, 8010946 <_dtoa_r+0x3e>
 8010928:	2010      	movs	r0, #16
 801092a:	f000 fd71 	bl	8011410 <malloc>
 801092e:	4602      	mov	r2, r0
 8010930:	6270      	str	r0, [r6, #36]	; 0x24
 8010932:	b920      	cbnz	r0, 801093e <_dtoa_r+0x36>
 8010934:	4baa      	ldr	r3, [pc, #680]	; (8010be0 <_dtoa_r+0x2d8>)
 8010936:	21ea      	movs	r1, #234	; 0xea
 8010938:	48aa      	ldr	r0, [pc, #680]	; (8010be4 <_dtoa_r+0x2dc>)
 801093a:	f7ff ff39 	bl	80107b0 <__assert_func>
 801093e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010942:	6005      	str	r5, [r0, #0]
 8010944:	60c5      	str	r5, [r0, #12]
 8010946:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010948:	6819      	ldr	r1, [r3, #0]
 801094a:	b151      	cbz	r1, 8010962 <_dtoa_r+0x5a>
 801094c:	685a      	ldr	r2, [r3, #4]
 801094e:	604a      	str	r2, [r1, #4]
 8010950:	2301      	movs	r3, #1
 8010952:	4093      	lsls	r3, r2
 8010954:	608b      	str	r3, [r1, #8]
 8010956:	4630      	mov	r0, r6
 8010958:	f000 fda2 	bl	80114a0 <_Bfree>
 801095c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801095e:	2200      	movs	r2, #0
 8010960:	601a      	str	r2, [r3, #0]
 8010962:	f1b9 0300 	subs.w	r3, r9, #0
 8010966:	bfbb      	ittet	lt
 8010968:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801096c:	9303      	strlt	r3, [sp, #12]
 801096e:	2300      	movge	r3, #0
 8010970:	2201      	movlt	r2, #1
 8010972:	bfac      	ite	ge
 8010974:	6023      	strge	r3, [r4, #0]
 8010976:	6022      	strlt	r2, [r4, #0]
 8010978:	4b9b      	ldr	r3, [pc, #620]	; (8010be8 <_dtoa_r+0x2e0>)
 801097a:	9c03      	ldr	r4, [sp, #12]
 801097c:	43a3      	bics	r3, r4
 801097e:	d11c      	bne.n	80109ba <_dtoa_r+0xb2>
 8010980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010982:	f242 730f 	movw	r3, #9999	; 0x270f
 8010986:	6013      	str	r3, [r2, #0]
 8010988:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801098c:	ea53 0308 	orrs.w	r3, r3, r8
 8010990:	f000 84fd 	beq.w	801138e <_dtoa_r+0xa86>
 8010994:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010996:	b963      	cbnz	r3, 80109b2 <_dtoa_r+0xaa>
 8010998:	4b94      	ldr	r3, [pc, #592]	; (8010bec <_dtoa_r+0x2e4>)
 801099a:	e01f      	b.n	80109dc <_dtoa_r+0xd4>
 801099c:	4b94      	ldr	r3, [pc, #592]	; (8010bf0 <_dtoa_r+0x2e8>)
 801099e:	9301      	str	r3, [sp, #4]
 80109a0:	3308      	adds	r3, #8
 80109a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80109a4:	6013      	str	r3, [r2, #0]
 80109a6:	9801      	ldr	r0, [sp, #4]
 80109a8:	b011      	add	sp, #68	; 0x44
 80109aa:	ecbd 8b02 	vpop	{d8}
 80109ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109b2:	4b8e      	ldr	r3, [pc, #568]	; (8010bec <_dtoa_r+0x2e4>)
 80109b4:	9301      	str	r3, [sp, #4]
 80109b6:	3303      	adds	r3, #3
 80109b8:	e7f3      	b.n	80109a2 <_dtoa_r+0x9a>
 80109ba:	ed9d 8b02 	vldr	d8, [sp, #8]
 80109be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80109c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109c6:	d10b      	bne.n	80109e0 <_dtoa_r+0xd8>
 80109c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109ca:	2301      	movs	r3, #1
 80109cc:	6013      	str	r3, [r2, #0]
 80109ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	f000 84d9 	beq.w	8011388 <_dtoa_r+0xa80>
 80109d6:	4887      	ldr	r0, [pc, #540]	; (8010bf4 <_dtoa_r+0x2ec>)
 80109d8:	6018      	str	r0, [r3, #0]
 80109da:	1e43      	subs	r3, r0, #1
 80109dc:	9301      	str	r3, [sp, #4]
 80109de:	e7e2      	b.n	80109a6 <_dtoa_r+0x9e>
 80109e0:	a90f      	add	r1, sp, #60	; 0x3c
 80109e2:	aa0e      	add	r2, sp, #56	; 0x38
 80109e4:	4630      	mov	r0, r6
 80109e6:	eeb0 0b48 	vmov.f64	d0, d8
 80109ea:	f001 f841 	bl	8011a70 <__d2b>
 80109ee:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80109f2:	4605      	mov	r5, r0
 80109f4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80109f6:	2900      	cmp	r1, #0
 80109f8:	d046      	beq.n	8010a88 <_dtoa_r+0x180>
 80109fa:	ee18 4a90 	vmov	r4, s17
 80109fe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010a02:	ec53 2b18 	vmov	r2, r3, d8
 8010a06:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8010a0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010a0e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010a12:	2400      	movs	r4, #0
 8010a14:	ec43 2b16 	vmov	d6, r2, r3
 8010a18:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8010a1c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8010bc8 <_dtoa_r+0x2c0>
 8010a20:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010a24:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8010bd0 <_dtoa_r+0x2c8>
 8010a28:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010a2c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8010bd8 <_dtoa_r+0x2d0>
 8010a30:	ee07 1a90 	vmov	s15, r1
 8010a34:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010a38:	eeb0 7b46 	vmov.f64	d7, d6
 8010a3c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010a40:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010a44:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a4c:	ee16 ba90 	vmov	fp, s13
 8010a50:	940a      	str	r4, [sp, #40]	; 0x28
 8010a52:	d508      	bpl.n	8010a66 <_dtoa_r+0x15e>
 8010a54:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010a58:	eeb4 6b47 	vcmp.f64	d6, d7
 8010a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a60:	bf18      	it	ne
 8010a62:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8010a66:	f1bb 0f16 	cmp.w	fp, #22
 8010a6a:	d82f      	bhi.n	8010acc <_dtoa_r+0x1c4>
 8010a6c:	4b62      	ldr	r3, [pc, #392]	; (8010bf8 <_dtoa_r+0x2f0>)
 8010a6e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010a72:	ed93 7b00 	vldr	d7, [r3]
 8010a76:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a7e:	d501      	bpl.n	8010a84 <_dtoa_r+0x17c>
 8010a80:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010a84:	2300      	movs	r3, #0
 8010a86:	e022      	b.n	8010ace <_dtoa_r+0x1c6>
 8010a88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010a8a:	4401      	add	r1, r0
 8010a8c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8010a90:	2b20      	cmp	r3, #32
 8010a92:	bfc1      	itttt	gt
 8010a94:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010a98:	fa04 f303 	lslgt.w	r3, r4, r3
 8010a9c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8010aa0:	fa28 f804 	lsrgt.w	r8, r8, r4
 8010aa4:	bfd6      	itet	le
 8010aa6:	f1c3 0320 	rsble	r3, r3, #32
 8010aaa:	ea43 0808 	orrgt.w	r8, r3, r8
 8010aae:	fa08 f803 	lslle.w	r8, r8, r3
 8010ab2:	ee07 8a90 	vmov	s15, r8
 8010ab6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010aba:	3901      	subs	r1, #1
 8010abc:	ee17 4a90 	vmov	r4, s15
 8010ac0:	ec53 2b17 	vmov	r2, r3, d7
 8010ac4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8010ac8:	2401      	movs	r4, #1
 8010aca:	e7a3      	b.n	8010a14 <_dtoa_r+0x10c>
 8010acc:	2301      	movs	r3, #1
 8010ace:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ad0:	1a43      	subs	r3, r0, r1
 8010ad2:	1e5a      	subs	r2, r3, #1
 8010ad4:	bf45      	ittet	mi
 8010ad6:	f1c3 0301 	rsbmi	r3, r3, #1
 8010ada:	9304      	strmi	r3, [sp, #16]
 8010adc:	2300      	movpl	r3, #0
 8010ade:	2300      	movmi	r3, #0
 8010ae0:	9205      	str	r2, [sp, #20]
 8010ae2:	bf54      	ite	pl
 8010ae4:	9304      	strpl	r3, [sp, #16]
 8010ae6:	9305      	strmi	r3, [sp, #20]
 8010ae8:	f1bb 0f00 	cmp.w	fp, #0
 8010aec:	db18      	blt.n	8010b20 <_dtoa_r+0x218>
 8010aee:	9b05      	ldr	r3, [sp, #20]
 8010af0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8010af4:	445b      	add	r3, fp
 8010af6:	9305      	str	r3, [sp, #20]
 8010af8:	2300      	movs	r3, #0
 8010afa:	9a06      	ldr	r2, [sp, #24]
 8010afc:	2a09      	cmp	r2, #9
 8010afe:	d849      	bhi.n	8010b94 <_dtoa_r+0x28c>
 8010b00:	2a05      	cmp	r2, #5
 8010b02:	bfc4      	itt	gt
 8010b04:	3a04      	subgt	r2, #4
 8010b06:	9206      	strgt	r2, [sp, #24]
 8010b08:	9a06      	ldr	r2, [sp, #24]
 8010b0a:	f1a2 0202 	sub.w	r2, r2, #2
 8010b0e:	bfcc      	ite	gt
 8010b10:	2400      	movgt	r4, #0
 8010b12:	2401      	movle	r4, #1
 8010b14:	2a03      	cmp	r2, #3
 8010b16:	d848      	bhi.n	8010baa <_dtoa_r+0x2a2>
 8010b18:	e8df f002 	tbb	[pc, r2]
 8010b1c:	3a2c2e0b 	.word	0x3a2c2e0b
 8010b20:	9b04      	ldr	r3, [sp, #16]
 8010b22:	2200      	movs	r2, #0
 8010b24:	eba3 030b 	sub.w	r3, r3, fp
 8010b28:	9304      	str	r3, [sp, #16]
 8010b2a:	9209      	str	r2, [sp, #36]	; 0x24
 8010b2c:	f1cb 0300 	rsb	r3, fp, #0
 8010b30:	e7e3      	b.n	8010afa <_dtoa_r+0x1f2>
 8010b32:	2200      	movs	r2, #0
 8010b34:	9207      	str	r2, [sp, #28]
 8010b36:	9a08      	ldr	r2, [sp, #32]
 8010b38:	2a00      	cmp	r2, #0
 8010b3a:	dc39      	bgt.n	8010bb0 <_dtoa_r+0x2a8>
 8010b3c:	f04f 0a01 	mov.w	sl, #1
 8010b40:	46d1      	mov	r9, sl
 8010b42:	4652      	mov	r2, sl
 8010b44:	f8cd a020 	str.w	sl, [sp, #32]
 8010b48:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8010b4a:	2100      	movs	r1, #0
 8010b4c:	6079      	str	r1, [r7, #4]
 8010b4e:	2004      	movs	r0, #4
 8010b50:	f100 0c14 	add.w	ip, r0, #20
 8010b54:	4594      	cmp	ip, r2
 8010b56:	6879      	ldr	r1, [r7, #4]
 8010b58:	d92f      	bls.n	8010bba <_dtoa_r+0x2b2>
 8010b5a:	4630      	mov	r0, r6
 8010b5c:	930d      	str	r3, [sp, #52]	; 0x34
 8010b5e:	f000 fc5f 	bl	8011420 <_Balloc>
 8010b62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b64:	9001      	str	r0, [sp, #4]
 8010b66:	4602      	mov	r2, r0
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	d149      	bne.n	8010c00 <_dtoa_r+0x2f8>
 8010b6c:	4b23      	ldr	r3, [pc, #140]	; (8010bfc <_dtoa_r+0x2f4>)
 8010b6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010b72:	e6e1      	b.n	8010938 <_dtoa_r+0x30>
 8010b74:	2201      	movs	r2, #1
 8010b76:	e7dd      	b.n	8010b34 <_dtoa_r+0x22c>
 8010b78:	2200      	movs	r2, #0
 8010b7a:	9207      	str	r2, [sp, #28]
 8010b7c:	9a08      	ldr	r2, [sp, #32]
 8010b7e:	eb0b 0a02 	add.w	sl, fp, r2
 8010b82:	f10a 0901 	add.w	r9, sl, #1
 8010b86:	464a      	mov	r2, r9
 8010b88:	2a01      	cmp	r2, #1
 8010b8a:	bfb8      	it	lt
 8010b8c:	2201      	movlt	r2, #1
 8010b8e:	e7db      	b.n	8010b48 <_dtoa_r+0x240>
 8010b90:	2201      	movs	r2, #1
 8010b92:	e7f2      	b.n	8010b7a <_dtoa_r+0x272>
 8010b94:	2401      	movs	r4, #1
 8010b96:	2200      	movs	r2, #0
 8010b98:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8010b9c:	f04f 3aff 	mov.w	sl, #4294967295
 8010ba0:	2100      	movs	r1, #0
 8010ba2:	46d1      	mov	r9, sl
 8010ba4:	2212      	movs	r2, #18
 8010ba6:	9108      	str	r1, [sp, #32]
 8010ba8:	e7ce      	b.n	8010b48 <_dtoa_r+0x240>
 8010baa:	2201      	movs	r2, #1
 8010bac:	9207      	str	r2, [sp, #28]
 8010bae:	e7f5      	b.n	8010b9c <_dtoa_r+0x294>
 8010bb0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010bb4:	46d1      	mov	r9, sl
 8010bb6:	4652      	mov	r2, sl
 8010bb8:	e7c6      	b.n	8010b48 <_dtoa_r+0x240>
 8010bba:	3101      	adds	r1, #1
 8010bbc:	6079      	str	r1, [r7, #4]
 8010bbe:	0040      	lsls	r0, r0, #1
 8010bc0:	e7c6      	b.n	8010b50 <_dtoa_r+0x248>
 8010bc2:	bf00      	nop
 8010bc4:	f3af 8000 	nop.w
 8010bc8:	636f4361 	.word	0x636f4361
 8010bcc:	3fd287a7 	.word	0x3fd287a7
 8010bd0:	8b60c8b3 	.word	0x8b60c8b3
 8010bd4:	3fc68a28 	.word	0x3fc68a28
 8010bd8:	509f79fb 	.word	0x509f79fb
 8010bdc:	3fd34413 	.word	0x3fd34413
 8010be0:	0801d1dc 	.word	0x0801d1dc
 8010be4:	0801d299 	.word	0x0801d299
 8010be8:	7ff00000 	.word	0x7ff00000
 8010bec:	0801d295 	.word	0x0801d295
 8010bf0:	0801d28c 	.word	0x0801d28c
 8010bf4:	0801d1b9 	.word	0x0801d1b9
 8010bf8:	0801d390 	.word	0x0801d390
 8010bfc:	0801d2f4 	.word	0x0801d2f4
 8010c00:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8010c02:	9901      	ldr	r1, [sp, #4]
 8010c04:	6011      	str	r1, [r2, #0]
 8010c06:	f1b9 0f0e 	cmp.w	r9, #14
 8010c0a:	d86c      	bhi.n	8010ce6 <_dtoa_r+0x3de>
 8010c0c:	2c00      	cmp	r4, #0
 8010c0e:	d06a      	beq.n	8010ce6 <_dtoa_r+0x3de>
 8010c10:	f1bb 0f00 	cmp.w	fp, #0
 8010c14:	f340 80a0 	ble.w	8010d58 <_dtoa_r+0x450>
 8010c18:	49c1      	ldr	r1, [pc, #772]	; (8010f20 <_dtoa_r+0x618>)
 8010c1a:	f00b 020f 	and.w	r2, fp, #15
 8010c1e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8010c22:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010c26:	ed92 7b00 	vldr	d7, [r2]
 8010c2a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8010c2e:	f000 8087 	beq.w	8010d40 <_dtoa_r+0x438>
 8010c32:	4abc      	ldr	r2, [pc, #752]	; (8010f24 <_dtoa_r+0x61c>)
 8010c34:	ed92 6b08 	vldr	d6, [r2, #32]
 8010c38:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010c3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010c40:	f001 010f 	and.w	r1, r1, #15
 8010c44:	2203      	movs	r2, #3
 8010c46:	48b7      	ldr	r0, [pc, #732]	; (8010f24 <_dtoa_r+0x61c>)
 8010c48:	2900      	cmp	r1, #0
 8010c4a:	d17b      	bne.n	8010d44 <_dtoa_r+0x43c>
 8010c4c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010c50:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010c54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010c58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010c5a:	2900      	cmp	r1, #0
 8010c5c:	f000 80a2 	beq.w	8010da4 <_dtoa_r+0x49c>
 8010c60:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010c64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010c68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c70:	f140 8098 	bpl.w	8010da4 <_dtoa_r+0x49c>
 8010c74:	f1b9 0f00 	cmp.w	r9, #0
 8010c78:	f000 8094 	beq.w	8010da4 <_dtoa_r+0x49c>
 8010c7c:	f1ba 0f00 	cmp.w	sl, #0
 8010c80:	dd2f      	ble.n	8010ce2 <_dtoa_r+0x3da>
 8010c82:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010c86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010c8a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010c8e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010c92:	3201      	adds	r2, #1
 8010c94:	4650      	mov	r0, sl
 8010c96:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010c9a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010c9e:	ee07 2a90 	vmov	s15, r2
 8010ca2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010ca6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010caa:	ee15 4a90 	vmov	r4, s11
 8010cae:	ec52 1b15 	vmov	r1, r2, d5
 8010cb2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	d177      	bne.n	8010daa <_dtoa_r+0x4a2>
 8010cba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010cbe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010cc2:	ec42 1b17 	vmov	d7, r1, r2
 8010cc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cce:	f300 8263 	bgt.w	8011198 <_dtoa_r+0x890>
 8010cd2:	eeb1 7b47 	vneg.f64	d7, d7
 8010cd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cde:	f100 8258 	bmi.w	8011192 <_dtoa_r+0x88a>
 8010ce2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010ce6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010ce8:	2a00      	cmp	r2, #0
 8010cea:	f2c0 811d 	blt.w	8010f28 <_dtoa_r+0x620>
 8010cee:	f1bb 0f0e 	cmp.w	fp, #14
 8010cf2:	f300 8119 	bgt.w	8010f28 <_dtoa_r+0x620>
 8010cf6:	4b8a      	ldr	r3, [pc, #552]	; (8010f20 <_dtoa_r+0x618>)
 8010cf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010cfc:	ed93 6b00 	vldr	d6, [r3]
 8010d00:	9b08      	ldr	r3, [sp, #32]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	f280 80b7 	bge.w	8010e76 <_dtoa_r+0x56e>
 8010d08:	f1b9 0f00 	cmp.w	r9, #0
 8010d0c:	f300 80b3 	bgt.w	8010e76 <_dtoa_r+0x56e>
 8010d10:	f040 823f 	bne.w	8011192 <_dtoa_r+0x88a>
 8010d14:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010d18:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010d1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d28:	464c      	mov	r4, r9
 8010d2a:	464f      	mov	r7, r9
 8010d2c:	f280 8215 	bge.w	801115a <_dtoa_r+0x852>
 8010d30:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010d34:	2331      	movs	r3, #49	; 0x31
 8010d36:	f808 3b01 	strb.w	r3, [r8], #1
 8010d3a:	f10b 0b01 	add.w	fp, fp, #1
 8010d3e:	e211      	b.n	8011164 <_dtoa_r+0x85c>
 8010d40:	2202      	movs	r2, #2
 8010d42:	e780      	b.n	8010c46 <_dtoa_r+0x33e>
 8010d44:	07cc      	lsls	r4, r1, #31
 8010d46:	d504      	bpl.n	8010d52 <_dtoa_r+0x44a>
 8010d48:	ed90 6b00 	vldr	d6, [r0]
 8010d4c:	3201      	adds	r2, #1
 8010d4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d52:	1049      	asrs	r1, r1, #1
 8010d54:	3008      	adds	r0, #8
 8010d56:	e777      	b.n	8010c48 <_dtoa_r+0x340>
 8010d58:	d022      	beq.n	8010da0 <_dtoa_r+0x498>
 8010d5a:	f1cb 0100 	rsb	r1, fp, #0
 8010d5e:	4a70      	ldr	r2, [pc, #448]	; (8010f20 <_dtoa_r+0x618>)
 8010d60:	f001 000f 	and.w	r0, r1, #15
 8010d64:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010d68:	ed92 7b00 	vldr	d7, [r2]
 8010d6c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010d70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d74:	486b      	ldr	r0, [pc, #428]	; (8010f24 <_dtoa_r+0x61c>)
 8010d76:	1109      	asrs	r1, r1, #4
 8010d78:	2400      	movs	r4, #0
 8010d7a:	2202      	movs	r2, #2
 8010d7c:	b929      	cbnz	r1, 8010d8a <_dtoa_r+0x482>
 8010d7e:	2c00      	cmp	r4, #0
 8010d80:	f43f af6a 	beq.w	8010c58 <_dtoa_r+0x350>
 8010d84:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d88:	e766      	b.n	8010c58 <_dtoa_r+0x350>
 8010d8a:	07cf      	lsls	r7, r1, #31
 8010d8c:	d505      	bpl.n	8010d9a <_dtoa_r+0x492>
 8010d8e:	ed90 6b00 	vldr	d6, [r0]
 8010d92:	3201      	adds	r2, #1
 8010d94:	2401      	movs	r4, #1
 8010d96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d9a:	1049      	asrs	r1, r1, #1
 8010d9c:	3008      	adds	r0, #8
 8010d9e:	e7ed      	b.n	8010d7c <_dtoa_r+0x474>
 8010da0:	2202      	movs	r2, #2
 8010da2:	e759      	b.n	8010c58 <_dtoa_r+0x350>
 8010da4:	465f      	mov	r7, fp
 8010da6:	4648      	mov	r0, r9
 8010da8:	e775      	b.n	8010c96 <_dtoa_r+0x38e>
 8010daa:	ec42 1b17 	vmov	d7, r1, r2
 8010dae:	4a5c      	ldr	r2, [pc, #368]	; (8010f20 <_dtoa_r+0x618>)
 8010db0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010db4:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010db8:	9a01      	ldr	r2, [sp, #4]
 8010dba:	1814      	adds	r4, r2, r0
 8010dbc:	9a07      	ldr	r2, [sp, #28]
 8010dbe:	b352      	cbz	r2, 8010e16 <_dtoa_r+0x50e>
 8010dc0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010dc4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010dc8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010dcc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010dd0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010dd4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010dd8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010ddc:	ee14 2a90 	vmov	r2, s9
 8010de0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010de4:	3230      	adds	r2, #48	; 0x30
 8010de6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010dea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010df2:	f808 2b01 	strb.w	r2, [r8], #1
 8010df6:	d439      	bmi.n	8010e6c <_dtoa_r+0x564>
 8010df8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010dfc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e04:	d472      	bmi.n	8010eec <_dtoa_r+0x5e4>
 8010e06:	45a0      	cmp	r8, r4
 8010e08:	f43f af6b 	beq.w	8010ce2 <_dtoa_r+0x3da>
 8010e0c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010e10:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010e14:	e7e0      	b.n	8010dd8 <_dtoa_r+0x4d0>
 8010e16:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010e1a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010e1e:	4621      	mov	r1, r4
 8010e20:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010e24:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010e28:	ee14 2a90 	vmov	r2, s9
 8010e2c:	3230      	adds	r2, #48	; 0x30
 8010e2e:	f808 2b01 	strb.w	r2, [r8], #1
 8010e32:	45a0      	cmp	r8, r4
 8010e34:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010e38:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010e3c:	d118      	bne.n	8010e70 <_dtoa_r+0x568>
 8010e3e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010e42:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010e46:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e4e:	dc4d      	bgt.n	8010eec <_dtoa_r+0x5e4>
 8010e50:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010e54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e5c:	f57f af41 	bpl.w	8010ce2 <_dtoa_r+0x3da>
 8010e60:	4688      	mov	r8, r1
 8010e62:	3901      	subs	r1, #1
 8010e64:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010e68:	2b30      	cmp	r3, #48	; 0x30
 8010e6a:	d0f9      	beq.n	8010e60 <_dtoa_r+0x558>
 8010e6c:	46bb      	mov	fp, r7
 8010e6e:	e02a      	b.n	8010ec6 <_dtoa_r+0x5be>
 8010e70:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010e74:	e7d6      	b.n	8010e24 <_dtoa_r+0x51c>
 8010e76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e7a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010e7e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010e82:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010e86:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010e8a:	ee15 3a10 	vmov	r3, s10
 8010e8e:	3330      	adds	r3, #48	; 0x30
 8010e90:	f808 3b01 	strb.w	r3, [r8], #1
 8010e94:	9b01      	ldr	r3, [sp, #4]
 8010e96:	eba8 0303 	sub.w	r3, r8, r3
 8010e9a:	4599      	cmp	r9, r3
 8010e9c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010ea0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010ea4:	d133      	bne.n	8010f0e <_dtoa_r+0x606>
 8010ea6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010eaa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb2:	dc1a      	bgt.n	8010eea <_dtoa_r+0x5e2>
 8010eb4:	eeb4 7b46 	vcmp.f64	d7, d6
 8010eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ebc:	d103      	bne.n	8010ec6 <_dtoa_r+0x5be>
 8010ebe:	ee15 3a10 	vmov	r3, s10
 8010ec2:	07d9      	lsls	r1, r3, #31
 8010ec4:	d411      	bmi.n	8010eea <_dtoa_r+0x5e2>
 8010ec6:	4629      	mov	r1, r5
 8010ec8:	4630      	mov	r0, r6
 8010eca:	f000 fae9 	bl	80114a0 <_Bfree>
 8010ece:	2300      	movs	r3, #0
 8010ed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ed2:	f888 3000 	strb.w	r3, [r8]
 8010ed6:	f10b 0301 	add.w	r3, fp, #1
 8010eda:	6013      	str	r3, [r2, #0]
 8010edc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	f43f ad61 	beq.w	80109a6 <_dtoa_r+0x9e>
 8010ee4:	f8c3 8000 	str.w	r8, [r3]
 8010ee8:	e55d      	b.n	80109a6 <_dtoa_r+0x9e>
 8010eea:	465f      	mov	r7, fp
 8010eec:	4643      	mov	r3, r8
 8010eee:	4698      	mov	r8, r3
 8010ef0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ef4:	2a39      	cmp	r2, #57	; 0x39
 8010ef6:	d106      	bne.n	8010f06 <_dtoa_r+0x5fe>
 8010ef8:	9a01      	ldr	r2, [sp, #4]
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d1f7      	bne.n	8010eee <_dtoa_r+0x5e6>
 8010efe:	9901      	ldr	r1, [sp, #4]
 8010f00:	2230      	movs	r2, #48	; 0x30
 8010f02:	3701      	adds	r7, #1
 8010f04:	700a      	strb	r2, [r1, #0]
 8010f06:	781a      	ldrb	r2, [r3, #0]
 8010f08:	3201      	adds	r2, #1
 8010f0a:	701a      	strb	r2, [r3, #0]
 8010f0c:	e7ae      	b.n	8010e6c <_dtoa_r+0x564>
 8010f0e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010f12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f1a:	d1b2      	bne.n	8010e82 <_dtoa_r+0x57a>
 8010f1c:	e7d3      	b.n	8010ec6 <_dtoa_r+0x5be>
 8010f1e:	bf00      	nop
 8010f20:	0801d390 	.word	0x0801d390
 8010f24:	0801d368 	.word	0x0801d368
 8010f28:	9907      	ldr	r1, [sp, #28]
 8010f2a:	2900      	cmp	r1, #0
 8010f2c:	f000 80d0 	beq.w	80110d0 <_dtoa_r+0x7c8>
 8010f30:	9906      	ldr	r1, [sp, #24]
 8010f32:	2901      	cmp	r1, #1
 8010f34:	f300 80b4 	bgt.w	80110a0 <_dtoa_r+0x798>
 8010f38:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010f3a:	2900      	cmp	r1, #0
 8010f3c:	f000 80ac 	beq.w	8011098 <_dtoa_r+0x790>
 8010f40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010f44:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010f48:	461c      	mov	r4, r3
 8010f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8010f4c:	9b04      	ldr	r3, [sp, #16]
 8010f4e:	4413      	add	r3, r2
 8010f50:	9304      	str	r3, [sp, #16]
 8010f52:	9b05      	ldr	r3, [sp, #20]
 8010f54:	2101      	movs	r1, #1
 8010f56:	4413      	add	r3, r2
 8010f58:	4630      	mov	r0, r6
 8010f5a:	9305      	str	r3, [sp, #20]
 8010f5c:	f000 fb58 	bl	8011610 <__i2b>
 8010f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f62:	4607      	mov	r7, r0
 8010f64:	f1b8 0f00 	cmp.w	r8, #0
 8010f68:	dd0d      	ble.n	8010f86 <_dtoa_r+0x67e>
 8010f6a:	9a05      	ldr	r2, [sp, #20]
 8010f6c:	2a00      	cmp	r2, #0
 8010f6e:	dd0a      	ble.n	8010f86 <_dtoa_r+0x67e>
 8010f70:	4542      	cmp	r2, r8
 8010f72:	9904      	ldr	r1, [sp, #16]
 8010f74:	bfa8      	it	ge
 8010f76:	4642      	movge	r2, r8
 8010f78:	1a89      	subs	r1, r1, r2
 8010f7a:	9104      	str	r1, [sp, #16]
 8010f7c:	9905      	ldr	r1, [sp, #20]
 8010f7e:	eba8 0802 	sub.w	r8, r8, r2
 8010f82:	1a8a      	subs	r2, r1, r2
 8010f84:	9205      	str	r2, [sp, #20]
 8010f86:	b303      	cbz	r3, 8010fca <_dtoa_r+0x6c2>
 8010f88:	9a07      	ldr	r2, [sp, #28]
 8010f8a:	2a00      	cmp	r2, #0
 8010f8c:	f000 80a5 	beq.w	80110da <_dtoa_r+0x7d2>
 8010f90:	2c00      	cmp	r4, #0
 8010f92:	dd13      	ble.n	8010fbc <_dtoa_r+0x6b4>
 8010f94:	4639      	mov	r1, r7
 8010f96:	4622      	mov	r2, r4
 8010f98:	4630      	mov	r0, r6
 8010f9a:	930d      	str	r3, [sp, #52]	; 0x34
 8010f9c:	f000 fbf8 	bl	8011790 <__pow5mult>
 8010fa0:	462a      	mov	r2, r5
 8010fa2:	4601      	mov	r1, r0
 8010fa4:	4607      	mov	r7, r0
 8010fa6:	4630      	mov	r0, r6
 8010fa8:	f000 fb48 	bl	801163c <__multiply>
 8010fac:	4629      	mov	r1, r5
 8010fae:	900a      	str	r0, [sp, #40]	; 0x28
 8010fb0:	4630      	mov	r0, r6
 8010fb2:	f000 fa75 	bl	80114a0 <_Bfree>
 8010fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fba:	4615      	mov	r5, r2
 8010fbc:	1b1a      	subs	r2, r3, r4
 8010fbe:	d004      	beq.n	8010fca <_dtoa_r+0x6c2>
 8010fc0:	4629      	mov	r1, r5
 8010fc2:	4630      	mov	r0, r6
 8010fc4:	f000 fbe4 	bl	8011790 <__pow5mult>
 8010fc8:	4605      	mov	r5, r0
 8010fca:	2101      	movs	r1, #1
 8010fcc:	4630      	mov	r0, r6
 8010fce:	f000 fb1f 	bl	8011610 <__i2b>
 8010fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	4604      	mov	r4, r0
 8010fd8:	f340 8081 	ble.w	80110de <_dtoa_r+0x7d6>
 8010fdc:	461a      	mov	r2, r3
 8010fde:	4601      	mov	r1, r0
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	f000 fbd5 	bl	8011790 <__pow5mult>
 8010fe6:	9b06      	ldr	r3, [sp, #24]
 8010fe8:	2b01      	cmp	r3, #1
 8010fea:	4604      	mov	r4, r0
 8010fec:	dd7a      	ble.n	80110e4 <_dtoa_r+0x7dc>
 8010fee:	2300      	movs	r3, #0
 8010ff0:	930a      	str	r3, [sp, #40]	; 0x28
 8010ff2:	6922      	ldr	r2, [r4, #16]
 8010ff4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010ff8:	6910      	ldr	r0, [r2, #16]
 8010ffa:	f000 fab9 	bl	8011570 <__hi0bits>
 8010ffe:	f1c0 0020 	rsb	r0, r0, #32
 8011002:	9b05      	ldr	r3, [sp, #20]
 8011004:	4418      	add	r0, r3
 8011006:	f010 001f 	ands.w	r0, r0, #31
 801100a:	f000 808c 	beq.w	8011126 <_dtoa_r+0x81e>
 801100e:	f1c0 0220 	rsb	r2, r0, #32
 8011012:	2a04      	cmp	r2, #4
 8011014:	f340 8085 	ble.w	8011122 <_dtoa_r+0x81a>
 8011018:	f1c0 001c 	rsb	r0, r0, #28
 801101c:	9b04      	ldr	r3, [sp, #16]
 801101e:	4403      	add	r3, r0
 8011020:	9304      	str	r3, [sp, #16]
 8011022:	9b05      	ldr	r3, [sp, #20]
 8011024:	4403      	add	r3, r0
 8011026:	4480      	add	r8, r0
 8011028:	9305      	str	r3, [sp, #20]
 801102a:	9b04      	ldr	r3, [sp, #16]
 801102c:	2b00      	cmp	r3, #0
 801102e:	dd05      	ble.n	801103c <_dtoa_r+0x734>
 8011030:	4629      	mov	r1, r5
 8011032:	461a      	mov	r2, r3
 8011034:	4630      	mov	r0, r6
 8011036:	f000 fc05 	bl	8011844 <__lshift>
 801103a:	4605      	mov	r5, r0
 801103c:	9b05      	ldr	r3, [sp, #20]
 801103e:	2b00      	cmp	r3, #0
 8011040:	dd05      	ble.n	801104e <_dtoa_r+0x746>
 8011042:	4621      	mov	r1, r4
 8011044:	461a      	mov	r2, r3
 8011046:	4630      	mov	r0, r6
 8011048:	f000 fbfc 	bl	8011844 <__lshift>
 801104c:	4604      	mov	r4, r0
 801104e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011050:	2b00      	cmp	r3, #0
 8011052:	d06a      	beq.n	801112a <_dtoa_r+0x822>
 8011054:	4621      	mov	r1, r4
 8011056:	4628      	mov	r0, r5
 8011058:	f000 fc64 	bl	8011924 <__mcmp>
 801105c:	2800      	cmp	r0, #0
 801105e:	da64      	bge.n	801112a <_dtoa_r+0x822>
 8011060:	2300      	movs	r3, #0
 8011062:	4629      	mov	r1, r5
 8011064:	220a      	movs	r2, #10
 8011066:	4630      	mov	r0, r6
 8011068:	f000 fa3c 	bl	80114e4 <__multadd>
 801106c:	9b07      	ldr	r3, [sp, #28]
 801106e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011072:	4605      	mov	r5, r0
 8011074:	2b00      	cmp	r3, #0
 8011076:	f000 8191 	beq.w	801139c <_dtoa_r+0xa94>
 801107a:	4639      	mov	r1, r7
 801107c:	2300      	movs	r3, #0
 801107e:	220a      	movs	r2, #10
 8011080:	4630      	mov	r0, r6
 8011082:	f000 fa2f 	bl	80114e4 <__multadd>
 8011086:	f1ba 0f00 	cmp.w	sl, #0
 801108a:	4607      	mov	r7, r0
 801108c:	f300 808d 	bgt.w	80111aa <_dtoa_r+0x8a2>
 8011090:	9b06      	ldr	r3, [sp, #24]
 8011092:	2b02      	cmp	r3, #2
 8011094:	dc50      	bgt.n	8011138 <_dtoa_r+0x830>
 8011096:	e088      	b.n	80111aa <_dtoa_r+0x8a2>
 8011098:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801109a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801109e:	e751      	b.n	8010f44 <_dtoa_r+0x63c>
 80110a0:	f109 34ff 	add.w	r4, r9, #4294967295
 80110a4:	42a3      	cmp	r3, r4
 80110a6:	bfbf      	itttt	lt
 80110a8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80110aa:	1ae3      	sublt	r3, r4, r3
 80110ac:	18d2      	addlt	r2, r2, r3
 80110ae:	9209      	strlt	r2, [sp, #36]	; 0x24
 80110b0:	bfb6      	itet	lt
 80110b2:	4623      	movlt	r3, r4
 80110b4:	1b1c      	subge	r4, r3, r4
 80110b6:	2400      	movlt	r4, #0
 80110b8:	f1b9 0f00 	cmp.w	r9, #0
 80110bc:	bfb5      	itete	lt
 80110be:	9a04      	ldrlt	r2, [sp, #16]
 80110c0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80110c4:	eba2 0809 	sublt.w	r8, r2, r9
 80110c8:	464a      	movge	r2, r9
 80110ca:	bfb8      	it	lt
 80110cc:	2200      	movlt	r2, #0
 80110ce:	e73c      	b.n	8010f4a <_dtoa_r+0x642>
 80110d0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80110d4:	9f07      	ldr	r7, [sp, #28]
 80110d6:	461c      	mov	r4, r3
 80110d8:	e744      	b.n	8010f64 <_dtoa_r+0x65c>
 80110da:	461a      	mov	r2, r3
 80110dc:	e770      	b.n	8010fc0 <_dtoa_r+0x6b8>
 80110de:	9b06      	ldr	r3, [sp, #24]
 80110e0:	2b01      	cmp	r3, #1
 80110e2:	dc18      	bgt.n	8011116 <_dtoa_r+0x80e>
 80110e4:	9b02      	ldr	r3, [sp, #8]
 80110e6:	b9b3      	cbnz	r3, 8011116 <_dtoa_r+0x80e>
 80110e8:	9b03      	ldr	r3, [sp, #12]
 80110ea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80110ee:	b9a2      	cbnz	r2, 801111a <_dtoa_r+0x812>
 80110f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80110f4:	0d12      	lsrs	r2, r2, #20
 80110f6:	0512      	lsls	r2, r2, #20
 80110f8:	b18a      	cbz	r2, 801111e <_dtoa_r+0x816>
 80110fa:	9b04      	ldr	r3, [sp, #16]
 80110fc:	3301      	adds	r3, #1
 80110fe:	9304      	str	r3, [sp, #16]
 8011100:	9b05      	ldr	r3, [sp, #20]
 8011102:	3301      	adds	r3, #1
 8011104:	9305      	str	r3, [sp, #20]
 8011106:	2301      	movs	r3, #1
 8011108:	930a      	str	r3, [sp, #40]	; 0x28
 801110a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801110c:	2b00      	cmp	r3, #0
 801110e:	f47f af70 	bne.w	8010ff2 <_dtoa_r+0x6ea>
 8011112:	2001      	movs	r0, #1
 8011114:	e775      	b.n	8011002 <_dtoa_r+0x6fa>
 8011116:	2300      	movs	r3, #0
 8011118:	e7f6      	b.n	8011108 <_dtoa_r+0x800>
 801111a:	9b02      	ldr	r3, [sp, #8]
 801111c:	e7f4      	b.n	8011108 <_dtoa_r+0x800>
 801111e:	920a      	str	r2, [sp, #40]	; 0x28
 8011120:	e7f3      	b.n	801110a <_dtoa_r+0x802>
 8011122:	d082      	beq.n	801102a <_dtoa_r+0x722>
 8011124:	4610      	mov	r0, r2
 8011126:	301c      	adds	r0, #28
 8011128:	e778      	b.n	801101c <_dtoa_r+0x714>
 801112a:	f1b9 0f00 	cmp.w	r9, #0
 801112e:	dc37      	bgt.n	80111a0 <_dtoa_r+0x898>
 8011130:	9b06      	ldr	r3, [sp, #24]
 8011132:	2b02      	cmp	r3, #2
 8011134:	dd34      	ble.n	80111a0 <_dtoa_r+0x898>
 8011136:	46ca      	mov	sl, r9
 8011138:	f1ba 0f00 	cmp.w	sl, #0
 801113c:	d10d      	bne.n	801115a <_dtoa_r+0x852>
 801113e:	4621      	mov	r1, r4
 8011140:	4653      	mov	r3, sl
 8011142:	2205      	movs	r2, #5
 8011144:	4630      	mov	r0, r6
 8011146:	f000 f9cd 	bl	80114e4 <__multadd>
 801114a:	4601      	mov	r1, r0
 801114c:	4604      	mov	r4, r0
 801114e:	4628      	mov	r0, r5
 8011150:	f000 fbe8 	bl	8011924 <__mcmp>
 8011154:	2800      	cmp	r0, #0
 8011156:	f73f adeb 	bgt.w	8010d30 <_dtoa_r+0x428>
 801115a:	9b08      	ldr	r3, [sp, #32]
 801115c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011160:	ea6f 0b03 	mvn.w	fp, r3
 8011164:	f04f 0900 	mov.w	r9, #0
 8011168:	4621      	mov	r1, r4
 801116a:	4630      	mov	r0, r6
 801116c:	f000 f998 	bl	80114a0 <_Bfree>
 8011170:	2f00      	cmp	r7, #0
 8011172:	f43f aea8 	beq.w	8010ec6 <_dtoa_r+0x5be>
 8011176:	f1b9 0f00 	cmp.w	r9, #0
 801117a:	d005      	beq.n	8011188 <_dtoa_r+0x880>
 801117c:	45b9      	cmp	r9, r7
 801117e:	d003      	beq.n	8011188 <_dtoa_r+0x880>
 8011180:	4649      	mov	r1, r9
 8011182:	4630      	mov	r0, r6
 8011184:	f000 f98c 	bl	80114a0 <_Bfree>
 8011188:	4639      	mov	r1, r7
 801118a:	4630      	mov	r0, r6
 801118c:	f000 f988 	bl	80114a0 <_Bfree>
 8011190:	e699      	b.n	8010ec6 <_dtoa_r+0x5be>
 8011192:	2400      	movs	r4, #0
 8011194:	4627      	mov	r7, r4
 8011196:	e7e0      	b.n	801115a <_dtoa_r+0x852>
 8011198:	46bb      	mov	fp, r7
 801119a:	4604      	mov	r4, r0
 801119c:	4607      	mov	r7, r0
 801119e:	e5c7      	b.n	8010d30 <_dtoa_r+0x428>
 80111a0:	9b07      	ldr	r3, [sp, #28]
 80111a2:	46ca      	mov	sl, r9
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	f000 8100 	beq.w	80113aa <_dtoa_r+0xaa2>
 80111aa:	f1b8 0f00 	cmp.w	r8, #0
 80111ae:	dd05      	ble.n	80111bc <_dtoa_r+0x8b4>
 80111b0:	4639      	mov	r1, r7
 80111b2:	4642      	mov	r2, r8
 80111b4:	4630      	mov	r0, r6
 80111b6:	f000 fb45 	bl	8011844 <__lshift>
 80111ba:	4607      	mov	r7, r0
 80111bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d05d      	beq.n	801127e <_dtoa_r+0x976>
 80111c2:	6879      	ldr	r1, [r7, #4]
 80111c4:	4630      	mov	r0, r6
 80111c6:	f000 f92b 	bl	8011420 <_Balloc>
 80111ca:	4680      	mov	r8, r0
 80111cc:	b928      	cbnz	r0, 80111da <_dtoa_r+0x8d2>
 80111ce:	4b82      	ldr	r3, [pc, #520]	; (80113d8 <_dtoa_r+0xad0>)
 80111d0:	4602      	mov	r2, r0
 80111d2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80111d6:	f7ff bbaf 	b.w	8010938 <_dtoa_r+0x30>
 80111da:	693a      	ldr	r2, [r7, #16]
 80111dc:	3202      	adds	r2, #2
 80111de:	0092      	lsls	r2, r2, #2
 80111e0:	f107 010c 	add.w	r1, r7, #12
 80111e4:	300c      	adds	r0, #12
 80111e6:	f7fe fd51 	bl	800fc8c <memcpy>
 80111ea:	2201      	movs	r2, #1
 80111ec:	4641      	mov	r1, r8
 80111ee:	4630      	mov	r0, r6
 80111f0:	f000 fb28 	bl	8011844 <__lshift>
 80111f4:	9b01      	ldr	r3, [sp, #4]
 80111f6:	3301      	adds	r3, #1
 80111f8:	9304      	str	r3, [sp, #16]
 80111fa:	9b01      	ldr	r3, [sp, #4]
 80111fc:	4453      	add	r3, sl
 80111fe:	9308      	str	r3, [sp, #32]
 8011200:	9b02      	ldr	r3, [sp, #8]
 8011202:	f003 0301 	and.w	r3, r3, #1
 8011206:	46b9      	mov	r9, r7
 8011208:	9307      	str	r3, [sp, #28]
 801120a:	4607      	mov	r7, r0
 801120c:	9b04      	ldr	r3, [sp, #16]
 801120e:	4621      	mov	r1, r4
 8011210:	3b01      	subs	r3, #1
 8011212:	4628      	mov	r0, r5
 8011214:	9302      	str	r3, [sp, #8]
 8011216:	f7ff fae9 	bl	80107ec <quorem>
 801121a:	4603      	mov	r3, r0
 801121c:	3330      	adds	r3, #48	; 0x30
 801121e:	9005      	str	r0, [sp, #20]
 8011220:	4649      	mov	r1, r9
 8011222:	4628      	mov	r0, r5
 8011224:	9309      	str	r3, [sp, #36]	; 0x24
 8011226:	f000 fb7d 	bl	8011924 <__mcmp>
 801122a:	463a      	mov	r2, r7
 801122c:	4682      	mov	sl, r0
 801122e:	4621      	mov	r1, r4
 8011230:	4630      	mov	r0, r6
 8011232:	f000 fb93 	bl	801195c <__mdiff>
 8011236:	68c2      	ldr	r2, [r0, #12]
 8011238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801123a:	4680      	mov	r8, r0
 801123c:	bb0a      	cbnz	r2, 8011282 <_dtoa_r+0x97a>
 801123e:	4601      	mov	r1, r0
 8011240:	4628      	mov	r0, r5
 8011242:	f000 fb6f 	bl	8011924 <__mcmp>
 8011246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011248:	4602      	mov	r2, r0
 801124a:	4641      	mov	r1, r8
 801124c:	4630      	mov	r0, r6
 801124e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8011252:	f000 f925 	bl	80114a0 <_Bfree>
 8011256:	9b06      	ldr	r3, [sp, #24]
 8011258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801125a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801125e:	ea43 0102 	orr.w	r1, r3, r2
 8011262:	9b07      	ldr	r3, [sp, #28]
 8011264:	430b      	orrs	r3, r1
 8011266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011268:	d10d      	bne.n	8011286 <_dtoa_r+0x97e>
 801126a:	2b39      	cmp	r3, #57	; 0x39
 801126c:	d029      	beq.n	80112c2 <_dtoa_r+0x9ba>
 801126e:	f1ba 0f00 	cmp.w	sl, #0
 8011272:	dd01      	ble.n	8011278 <_dtoa_r+0x970>
 8011274:	9b05      	ldr	r3, [sp, #20]
 8011276:	3331      	adds	r3, #49	; 0x31
 8011278:	9a02      	ldr	r2, [sp, #8]
 801127a:	7013      	strb	r3, [r2, #0]
 801127c:	e774      	b.n	8011168 <_dtoa_r+0x860>
 801127e:	4638      	mov	r0, r7
 8011280:	e7b8      	b.n	80111f4 <_dtoa_r+0x8ec>
 8011282:	2201      	movs	r2, #1
 8011284:	e7e1      	b.n	801124a <_dtoa_r+0x942>
 8011286:	f1ba 0f00 	cmp.w	sl, #0
 801128a:	db06      	blt.n	801129a <_dtoa_r+0x992>
 801128c:	9906      	ldr	r1, [sp, #24]
 801128e:	ea41 0a0a 	orr.w	sl, r1, sl
 8011292:	9907      	ldr	r1, [sp, #28]
 8011294:	ea5a 0101 	orrs.w	r1, sl, r1
 8011298:	d120      	bne.n	80112dc <_dtoa_r+0x9d4>
 801129a:	2a00      	cmp	r2, #0
 801129c:	ddec      	ble.n	8011278 <_dtoa_r+0x970>
 801129e:	4629      	mov	r1, r5
 80112a0:	2201      	movs	r2, #1
 80112a2:	4630      	mov	r0, r6
 80112a4:	9304      	str	r3, [sp, #16]
 80112a6:	f000 facd 	bl	8011844 <__lshift>
 80112aa:	4621      	mov	r1, r4
 80112ac:	4605      	mov	r5, r0
 80112ae:	f000 fb39 	bl	8011924 <__mcmp>
 80112b2:	2800      	cmp	r0, #0
 80112b4:	9b04      	ldr	r3, [sp, #16]
 80112b6:	dc02      	bgt.n	80112be <_dtoa_r+0x9b6>
 80112b8:	d1de      	bne.n	8011278 <_dtoa_r+0x970>
 80112ba:	07da      	lsls	r2, r3, #31
 80112bc:	d5dc      	bpl.n	8011278 <_dtoa_r+0x970>
 80112be:	2b39      	cmp	r3, #57	; 0x39
 80112c0:	d1d8      	bne.n	8011274 <_dtoa_r+0x96c>
 80112c2:	9a02      	ldr	r2, [sp, #8]
 80112c4:	2339      	movs	r3, #57	; 0x39
 80112c6:	7013      	strb	r3, [r2, #0]
 80112c8:	4643      	mov	r3, r8
 80112ca:	4698      	mov	r8, r3
 80112cc:	3b01      	subs	r3, #1
 80112ce:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80112d2:	2a39      	cmp	r2, #57	; 0x39
 80112d4:	d051      	beq.n	801137a <_dtoa_r+0xa72>
 80112d6:	3201      	adds	r2, #1
 80112d8:	701a      	strb	r2, [r3, #0]
 80112da:	e745      	b.n	8011168 <_dtoa_r+0x860>
 80112dc:	2a00      	cmp	r2, #0
 80112de:	dd03      	ble.n	80112e8 <_dtoa_r+0x9e0>
 80112e0:	2b39      	cmp	r3, #57	; 0x39
 80112e2:	d0ee      	beq.n	80112c2 <_dtoa_r+0x9ba>
 80112e4:	3301      	adds	r3, #1
 80112e6:	e7c7      	b.n	8011278 <_dtoa_r+0x970>
 80112e8:	9a04      	ldr	r2, [sp, #16]
 80112ea:	9908      	ldr	r1, [sp, #32]
 80112ec:	f802 3c01 	strb.w	r3, [r2, #-1]
 80112f0:	428a      	cmp	r2, r1
 80112f2:	d02b      	beq.n	801134c <_dtoa_r+0xa44>
 80112f4:	4629      	mov	r1, r5
 80112f6:	2300      	movs	r3, #0
 80112f8:	220a      	movs	r2, #10
 80112fa:	4630      	mov	r0, r6
 80112fc:	f000 f8f2 	bl	80114e4 <__multadd>
 8011300:	45b9      	cmp	r9, r7
 8011302:	4605      	mov	r5, r0
 8011304:	f04f 0300 	mov.w	r3, #0
 8011308:	f04f 020a 	mov.w	r2, #10
 801130c:	4649      	mov	r1, r9
 801130e:	4630      	mov	r0, r6
 8011310:	d107      	bne.n	8011322 <_dtoa_r+0xa1a>
 8011312:	f000 f8e7 	bl	80114e4 <__multadd>
 8011316:	4681      	mov	r9, r0
 8011318:	4607      	mov	r7, r0
 801131a:	9b04      	ldr	r3, [sp, #16]
 801131c:	3301      	adds	r3, #1
 801131e:	9304      	str	r3, [sp, #16]
 8011320:	e774      	b.n	801120c <_dtoa_r+0x904>
 8011322:	f000 f8df 	bl	80114e4 <__multadd>
 8011326:	4639      	mov	r1, r7
 8011328:	4681      	mov	r9, r0
 801132a:	2300      	movs	r3, #0
 801132c:	220a      	movs	r2, #10
 801132e:	4630      	mov	r0, r6
 8011330:	f000 f8d8 	bl	80114e4 <__multadd>
 8011334:	4607      	mov	r7, r0
 8011336:	e7f0      	b.n	801131a <_dtoa_r+0xa12>
 8011338:	f1ba 0f00 	cmp.w	sl, #0
 801133c:	9a01      	ldr	r2, [sp, #4]
 801133e:	bfcc      	ite	gt
 8011340:	46d0      	movgt	r8, sl
 8011342:	f04f 0801 	movle.w	r8, #1
 8011346:	4490      	add	r8, r2
 8011348:	f04f 0900 	mov.w	r9, #0
 801134c:	4629      	mov	r1, r5
 801134e:	2201      	movs	r2, #1
 8011350:	4630      	mov	r0, r6
 8011352:	9302      	str	r3, [sp, #8]
 8011354:	f000 fa76 	bl	8011844 <__lshift>
 8011358:	4621      	mov	r1, r4
 801135a:	4605      	mov	r5, r0
 801135c:	f000 fae2 	bl	8011924 <__mcmp>
 8011360:	2800      	cmp	r0, #0
 8011362:	dcb1      	bgt.n	80112c8 <_dtoa_r+0x9c0>
 8011364:	d102      	bne.n	801136c <_dtoa_r+0xa64>
 8011366:	9b02      	ldr	r3, [sp, #8]
 8011368:	07db      	lsls	r3, r3, #31
 801136a:	d4ad      	bmi.n	80112c8 <_dtoa_r+0x9c0>
 801136c:	4643      	mov	r3, r8
 801136e:	4698      	mov	r8, r3
 8011370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011374:	2a30      	cmp	r2, #48	; 0x30
 8011376:	d0fa      	beq.n	801136e <_dtoa_r+0xa66>
 8011378:	e6f6      	b.n	8011168 <_dtoa_r+0x860>
 801137a:	9a01      	ldr	r2, [sp, #4]
 801137c:	429a      	cmp	r2, r3
 801137e:	d1a4      	bne.n	80112ca <_dtoa_r+0x9c2>
 8011380:	f10b 0b01 	add.w	fp, fp, #1
 8011384:	2331      	movs	r3, #49	; 0x31
 8011386:	e778      	b.n	801127a <_dtoa_r+0x972>
 8011388:	4b14      	ldr	r3, [pc, #80]	; (80113dc <_dtoa_r+0xad4>)
 801138a:	f7ff bb27 	b.w	80109dc <_dtoa_r+0xd4>
 801138e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011390:	2b00      	cmp	r3, #0
 8011392:	f47f ab03 	bne.w	801099c <_dtoa_r+0x94>
 8011396:	4b12      	ldr	r3, [pc, #72]	; (80113e0 <_dtoa_r+0xad8>)
 8011398:	f7ff bb20 	b.w	80109dc <_dtoa_r+0xd4>
 801139c:	f1ba 0f00 	cmp.w	sl, #0
 80113a0:	dc03      	bgt.n	80113aa <_dtoa_r+0xaa2>
 80113a2:	9b06      	ldr	r3, [sp, #24]
 80113a4:	2b02      	cmp	r3, #2
 80113a6:	f73f aec7 	bgt.w	8011138 <_dtoa_r+0x830>
 80113aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80113ae:	4621      	mov	r1, r4
 80113b0:	4628      	mov	r0, r5
 80113b2:	f7ff fa1b 	bl	80107ec <quorem>
 80113b6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80113ba:	f808 3b01 	strb.w	r3, [r8], #1
 80113be:	9a01      	ldr	r2, [sp, #4]
 80113c0:	eba8 0202 	sub.w	r2, r8, r2
 80113c4:	4592      	cmp	sl, r2
 80113c6:	ddb7      	ble.n	8011338 <_dtoa_r+0xa30>
 80113c8:	4629      	mov	r1, r5
 80113ca:	2300      	movs	r3, #0
 80113cc:	220a      	movs	r2, #10
 80113ce:	4630      	mov	r0, r6
 80113d0:	f000 f888 	bl	80114e4 <__multadd>
 80113d4:	4605      	mov	r5, r0
 80113d6:	e7ea      	b.n	80113ae <_dtoa_r+0xaa6>
 80113d8:	0801d2f4 	.word	0x0801d2f4
 80113dc:	0801d1b8 	.word	0x0801d1b8
 80113e0:	0801d28c 	.word	0x0801d28c

080113e4 <fiprintf>:
 80113e4:	b40e      	push	{r1, r2, r3}
 80113e6:	b503      	push	{r0, r1, lr}
 80113e8:	4601      	mov	r1, r0
 80113ea:	ab03      	add	r3, sp, #12
 80113ec:	4805      	ldr	r0, [pc, #20]	; (8011404 <fiprintf+0x20>)
 80113ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80113f2:	6800      	ldr	r0, [r0, #0]
 80113f4:	9301      	str	r3, [sp, #4]
 80113f6:	f000 fe13 	bl	8012020 <_vfiprintf_r>
 80113fa:	b002      	add	sp, #8
 80113fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011400:	b003      	add	sp, #12
 8011402:	4770      	bx	lr
 8011404:	24000498 	.word	0x24000498

08011408 <_localeconv_r>:
 8011408:	4800      	ldr	r0, [pc, #0]	; (801140c <_localeconv_r+0x4>)
 801140a:	4770      	bx	lr
 801140c:	240005ec 	.word	0x240005ec

08011410 <malloc>:
 8011410:	4b02      	ldr	r3, [pc, #8]	; (801141c <malloc+0xc>)
 8011412:	4601      	mov	r1, r0
 8011414:	6818      	ldr	r0, [r3, #0]
 8011416:	f000 bc09 	b.w	8011c2c <_malloc_r>
 801141a:	bf00      	nop
 801141c:	24000498 	.word	0x24000498

08011420 <_Balloc>:
 8011420:	b570      	push	{r4, r5, r6, lr}
 8011422:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011424:	4604      	mov	r4, r0
 8011426:	460d      	mov	r5, r1
 8011428:	b976      	cbnz	r6, 8011448 <_Balloc+0x28>
 801142a:	2010      	movs	r0, #16
 801142c:	f7ff fff0 	bl	8011410 <malloc>
 8011430:	4602      	mov	r2, r0
 8011432:	6260      	str	r0, [r4, #36]	; 0x24
 8011434:	b920      	cbnz	r0, 8011440 <_Balloc+0x20>
 8011436:	4b18      	ldr	r3, [pc, #96]	; (8011498 <_Balloc+0x78>)
 8011438:	4818      	ldr	r0, [pc, #96]	; (801149c <_Balloc+0x7c>)
 801143a:	2166      	movs	r1, #102	; 0x66
 801143c:	f7ff f9b8 	bl	80107b0 <__assert_func>
 8011440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011444:	6006      	str	r6, [r0, #0]
 8011446:	60c6      	str	r6, [r0, #12]
 8011448:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801144a:	68f3      	ldr	r3, [r6, #12]
 801144c:	b183      	cbz	r3, 8011470 <_Balloc+0x50>
 801144e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011450:	68db      	ldr	r3, [r3, #12]
 8011452:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011456:	b9b8      	cbnz	r0, 8011488 <_Balloc+0x68>
 8011458:	2101      	movs	r1, #1
 801145a:	fa01 f605 	lsl.w	r6, r1, r5
 801145e:	1d72      	adds	r2, r6, #5
 8011460:	0092      	lsls	r2, r2, #2
 8011462:	4620      	mov	r0, r4
 8011464:	f000 fb60 	bl	8011b28 <_calloc_r>
 8011468:	b160      	cbz	r0, 8011484 <_Balloc+0x64>
 801146a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801146e:	e00e      	b.n	801148e <_Balloc+0x6e>
 8011470:	2221      	movs	r2, #33	; 0x21
 8011472:	2104      	movs	r1, #4
 8011474:	4620      	mov	r0, r4
 8011476:	f000 fb57 	bl	8011b28 <_calloc_r>
 801147a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801147c:	60f0      	str	r0, [r6, #12]
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d1e4      	bne.n	801144e <_Balloc+0x2e>
 8011484:	2000      	movs	r0, #0
 8011486:	bd70      	pop	{r4, r5, r6, pc}
 8011488:	6802      	ldr	r2, [r0, #0]
 801148a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801148e:	2300      	movs	r3, #0
 8011490:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011494:	e7f7      	b.n	8011486 <_Balloc+0x66>
 8011496:	bf00      	nop
 8011498:	0801d1dc 	.word	0x0801d1dc
 801149c:	0801d305 	.word	0x0801d305

080114a0 <_Bfree>:
 80114a0:	b570      	push	{r4, r5, r6, lr}
 80114a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80114a4:	4605      	mov	r5, r0
 80114a6:	460c      	mov	r4, r1
 80114a8:	b976      	cbnz	r6, 80114c8 <_Bfree+0x28>
 80114aa:	2010      	movs	r0, #16
 80114ac:	f7ff ffb0 	bl	8011410 <malloc>
 80114b0:	4602      	mov	r2, r0
 80114b2:	6268      	str	r0, [r5, #36]	; 0x24
 80114b4:	b920      	cbnz	r0, 80114c0 <_Bfree+0x20>
 80114b6:	4b09      	ldr	r3, [pc, #36]	; (80114dc <_Bfree+0x3c>)
 80114b8:	4809      	ldr	r0, [pc, #36]	; (80114e0 <_Bfree+0x40>)
 80114ba:	218a      	movs	r1, #138	; 0x8a
 80114bc:	f7ff f978 	bl	80107b0 <__assert_func>
 80114c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114c4:	6006      	str	r6, [r0, #0]
 80114c6:	60c6      	str	r6, [r0, #12]
 80114c8:	b13c      	cbz	r4, 80114da <_Bfree+0x3a>
 80114ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80114cc:	6862      	ldr	r2, [r4, #4]
 80114ce:	68db      	ldr	r3, [r3, #12]
 80114d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80114d4:	6021      	str	r1, [r4, #0]
 80114d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80114da:	bd70      	pop	{r4, r5, r6, pc}
 80114dc:	0801d1dc 	.word	0x0801d1dc
 80114e0:	0801d305 	.word	0x0801d305

080114e4 <__multadd>:
 80114e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114e8:	690d      	ldr	r5, [r1, #16]
 80114ea:	4607      	mov	r7, r0
 80114ec:	460c      	mov	r4, r1
 80114ee:	461e      	mov	r6, r3
 80114f0:	f101 0c14 	add.w	ip, r1, #20
 80114f4:	2000      	movs	r0, #0
 80114f6:	f8dc 3000 	ldr.w	r3, [ip]
 80114fa:	b299      	uxth	r1, r3
 80114fc:	fb02 6101 	mla	r1, r2, r1, r6
 8011500:	0c1e      	lsrs	r6, r3, #16
 8011502:	0c0b      	lsrs	r3, r1, #16
 8011504:	fb02 3306 	mla	r3, r2, r6, r3
 8011508:	b289      	uxth	r1, r1
 801150a:	3001      	adds	r0, #1
 801150c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011510:	4285      	cmp	r5, r0
 8011512:	f84c 1b04 	str.w	r1, [ip], #4
 8011516:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801151a:	dcec      	bgt.n	80114f6 <__multadd+0x12>
 801151c:	b30e      	cbz	r6, 8011562 <__multadd+0x7e>
 801151e:	68a3      	ldr	r3, [r4, #8]
 8011520:	42ab      	cmp	r3, r5
 8011522:	dc19      	bgt.n	8011558 <__multadd+0x74>
 8011524:	6861      	ldr	r1, [r4, #4]
 8011526:	4638      	mov	r0, r7
 8011528:	3101      	adds	r1, #1
 801152a:	f7ff ff79 	bl	8011420 <_Balloc>
 801152e:	4680      	mov	r8, r0
 8011530:	b928      	cbnz	r0, 801153e <__multadd+0x5a>
 8011532:	4602      	mov	r2, r0
 8011534:	4b0c      	ldr	r3, [pc, #48]	; (8011568 <__multadd+0x84>)
 8011536:	480d      	ldr	r0, [pc, #52]	; (801156c <__multadd+0x88>)
 8011538:	21b5      	movs	r1, #181	; 0xb5
 801153a:	f7ff f939 	bl	80107b0 <__assert_func>
 801153e:	6922      	ldr	r2, [r4, #16]
 8011540:	3202      	adds	r2, #2
 8011542:	f104 010c 	add.w	r1, r4, #12
 8011546:	0092      	lsls	r2, r2, #2
 8011548:	300c      	adds	r0, #12
 801154a:	f7fe fb9f 	bl	800fc8c <memcpy>
 801154e:	4621      	mov	r1, r4
 8011550:	4638      	mov	r0, r7
 8011552:	f7ff ffa5 	bl	80114a0 <_Bfree>
 8011556:	4644      	mov	r4, r8
 8011558:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801155c:	3501      	adds	r5, #1
 801155e:	615e      	str	r6, [r3, #20]
 8011560:	6125      	str	r5, [r4, #16]
 8011562:	4620      	mov	r0, r4
 8011564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011568:	0801d2f4 	.word	0x0801d2f4
 801156c:	0801d305 	.word	0x0801d305

08011570 <__hi0bits>:
 8011570:	0c03      	lsrs	r3, r0, #16
 8011572:	041b      	lsls	r3, r3, #16
 8011574:	b9d3      	cbnz	r3, 80115ac <__hi0bits+0x3c>
 8011576:	0400      	lsls	r0, r0, #16
 8011578:	2310      	movs	r3, #16
 801157a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801157e:	bf04      	itt	eq
 8011580:	0200      	lsleq	r0, r0, #8
 8011582:	3308      	addeq	r3, #8
 8011584:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011588:	bf04      	itt	eq
 801158a:	0100      	lsleq	r0, r0, #4
 801158c:	3304      	addeq	r3, #4
 801158e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011592:	bf04      	itt	eq
 8011594:	0080      	lsleq	r0, r0, #2
 8011596:	3302      	addeq	r3, #2
 8011598:	2800      	cmp	r0, #0
 801159a:	db05      	blt.n	80115a8 <__hi0bits+0x38>
 801159c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80115a0:	f103 0301 	add.w	r3, r3, #1
 80115a4:	bf08      	it	eq
 80115a6:	2320      	moveq	r3, #32
 80115a8:	4618      	mov	r0, r3
 80115aa:	4770      	bx	lr
 80115ac:	2300      	movs	r3, #0
 80115ae:	e7e4      	b.n	801157a <__hi0bits+0xa>

080115b0 <__lo0bits>:
 80115b0:	6803      	ldr	r3, [r0, #0]
 80115b2:	f013 0207 	ands.w	r2, r3, #7
 80115b6:	4601      	mov	r1, r0
 80115b8:	d00b      	beq.n	80115d2 <__lo0bits+0x22>
 80115ba:	07da      	lsls	r2, r3, #31
 80115bc:	d423      	bmi.n	8011606 <__lo0bits+0x56>
 80115be:	0798      	lsls	r0, r3, #30
 80115c0:	bf49      	itett	mi
 80115c2:	085b      	lsrmi	r3, r3, #1
 80115c4:	089b      	lsrpl	r3, r3, #2
 80115c6:	2001      	movmi	r0, #1
 80115c8:	600b      	strmi	r3, [r1, #0]
 80115ca:	bf5c      	itt	pl
 80115cc:	600b      	strpl	r3, [r1, #0]
 80115ce:	2002      	movpl	r0, #2
 80115d0:	4770      	bx	lr
 80115d2:	b298      	uxth	r0, r3
 80115d4:	b9a8      	cbnz	r0, 8011602 <__lo0bits+0x52>
 80115d6:	0c1b      	lsrs	r3, r3, #16
 80115d8:	2010      	movs	r0, #16
 80115da:	b2da      	uxtb	r2, r3
 80115dc:	b90a      	cbnz	r2, 80115e2 <__lo0bits+0x32>
 80115de:	3008      	adds	r0, #8
 80115e0:	0a1b      	lsrs	r3, r3, #8
 80115e2:	071a      	lsls	r2, r3, #28
 80115e4:	bf04      	itt	eq
 80115e6:	091b      	lsreq	r3, r3, #4
 80115e8:	3004      	addeq	r0, #4
 80115ea:	079a      	lsls	r2, r3, #30
 80115ec:	bf04      	itt	eq
 80115ee:	089b      	lsreq	r3, r3, #2
 80115f0:	3002      	addeq	r0, #2
 80115f2:	07da      	lsls	r2, r3, #31
 80115f4:	d403      	bmi.n	80115fe <__lo0bits+0x4e>
 80115f6:	085b      	lsrs	r3, r3, #1
 80115f8:	f100 0001 	add.w	r0, r0, #1
 80115fc:	d005      	beq.n	801160a <__lo0bits+0x5a>
 80115fe:	600b      	str	r3, [r1, #0]
 8011600:	4770      	bx	lr
 8011602:	4610      	mov	r0, r2
 8011604:	e7e9      	b.n	80115da <__lo0bits+0x2a>
 8011606:	2000      	movs	r0, #0
 8011608:	4770      	bx	lr
 801160a:	2020      	movs	r0, #32
 801160c:	4770      	bx	lr
	...

08011610 <__i2b>:
 8011610:	b510      	push	{r4, lr}
 8011612:	460c      	mov	r4, r1
 8011614:	2101      	movs	r1, #1
 8011616:	f7ff ff03 	bl	8011420 <_Balloc>
 801161a:	4602      	mov	r2, r0
 801161c:	b928      	cbnz	r0, 801162a <__i2b+0x1a>
 801161e:	4b05      	ldr	r3, [pc, #20]	; (8011634 <__i2b+0x24>)
 8011620:	4805      	ldr	r0, [pc, #20]	; (8011638 <__i2b+0x28>)
 8011622:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011626:	f7ff f8c3 	bl	80107b0 <__assert_func>
 801162a:	2301      	movs	r3, #1
 801162c:	6144      	str	r4, [r0, #20]
 801162e:	6103      	str	r3, [r0, #16]
 8011630:	bd10      	pop	{r4, pc}
 8011632:	bf00      	nop
 8011634:	0801d2f4 	.word	0x0801d2f4
 8011638:	0801d305 	.word	0x0801d305

0801163c <__multiply>:
 801163c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011640:	4691      	mov	r9, r2
 8011642:	690a      	ldr	r2, [r1, #16]
 8011644:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011648:	429a      	cmp	r2, r3
 801164a:	bfb8      	it	lt
 801164c:	460b      	movlt	r3, r1
 801164e:	460c      	mov	r4, r1
 8011650:	bfbc      	itt	lt
 8011652:	464c      	movlt	r4, r9
 8011654:	4699      	movlt	r9, r3
 8011656:	6927      	ldr	r7, [r4, #16]
 8011658:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801165c:	68a3      	ldr	r3, [r4, #8]
 801165e:	6861      	ldr	r1, [r4, #4]
 8011660:	eb07 060a 	add.w	r6, r7, sl
 8011664:	42b3      	cmp	r3, r6
 8011666:	b085      	sub	sp, #20
 8011668:	bfb8      	it	lt
 801166a:	3101      	addlt	r1, #1
 801166c:	f7ff fed8 	bl	8011420 <_Balloc>
 8011670:	b930      	cbnz	r0, 8011680 <__multiply+0x44>
 8011672:	4602      	mov	r2, r0
 8011674:	4b44      	ldr	r3, [pc, #272]	; (8011788 <__multiply+0x14c>)
 8011676:	4845      	ldr	r0, [pc, #276]	; (801178c <__multiply+0x150>)
 8011678:	f240 115d 	movw	r1, #349	; 0x15d
 801167c:	f7ff f898 	bl	80107b0 <__assert_func>
 8011680:	f100 0514 	add.w	r5, r0, #20
 8011684:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011688:	462b      	mov	r3, r5
 801168a:	2200      	movs	r2, #0
 801168c:	4543      	cmp	r3, r8
 801168e:	d321      	bcc.n	80116d4 <__multiply+0x98>
 8011690:	f104 0314 	add.w	r3, r4, #20
 8011694:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011698:	f109 0314 	add.w	r3, r9, #20
 801169c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80116a0:	9202      	str	r2, [sp, #8]
 80116a2:	1b3a      	subs	r2, r7, r4
 80116a4:	3a15      	subs	r2, #21
 80116a6:	f022 0203 	bic.w	r2, r2, #3
 80116aa:	3204      	adds	r2, #4
 80116ac:	f104 0115 	add.w	r1, r4, #21
 80116b0:	428f      	cmp	r7, r1
 80116b2:	bf38      	it	cc
 80116b4:	2204      	movcc	r2, #4
 80116b6:	9201      	str	r2, [sp, #4]
 80116b8:	9a02      	ldr	r2, [sp, #8]
 80116ba:	9303      	str	r3, [sp, #12]
 80116bc:	429a      	cmp	r2, r3
 80116be:	d80c      	bhi.n	80116da <__multiply+0x9e>
 80116c0:	2e00      	cmp	r6, #0
 80116c2:	dd03      	ble.n	80116cc <__multiply+0x90>
 80116c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d05a      	beq.n	8011782 <__multiply+0x146>
 80116cc:	6106      	str	r6, [r0, #16]
 80116ce:	b005      	add	sp, #20
 80116d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116d4:	f843 2b04 	str.w	r2, [r3], #4
 80116d8:	e7d8      	b.n	801168c <__multiply+0x50>
 80116da:	f8b3 a000 	ldrh.w	sl, [r3]
 80116de:	f1ba 0f00 	cmp.w	sl, #0
 80116e2:	d024      	beq.n	801172e <__multiply+0xf2>
 80116e4:	f104 0e14 	add.w	lr, r4, #20
 80116e8:	46a9      	mov	r9, r5
 80116ea:	f04f 0c00 	mov.w	ip, #0
 80116ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80116f2:	f8d9 1000 	ldr.w	r1, [r9]
 80116f6:	fa1f fb82 	uxth.w	fp, r2
 80116fa:	b289      	uxth	r1, r1
 80116fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8011700:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011704:	f8d9 2000 	ldr.w	r2, [r9]
 8011708:	4461      	add	r1, ip
 801170a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801170e:	fb0a c20b 	mla	r2, sl, fp, ip
 8011712:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011716:	b289      	uxth	r1, r1
 8011718:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801171c:	4577      	cmp	r7, lr
 801171e:	f849 1b04 	str.w	r1, [r9], #4
 8011722:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011726:	d8e2      	bhi.n	80116ee <__multiply+0xb2>
 8011728:	9a01      	ldr	r2, [sp, #4]
 801172a:	f845 c002 	str.w	ip, [r5, r2]
 801172e:	9a03      	ldr	r2, [sp, #12]
 8011730:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011734:	3304      	adds	r3, #4
 8011736:	f1b9 0f00 	cmp.w	r9, #0
 801173a:	d020      	beq.n	801177e <__multiply+0x142>
 801173c:	6829      	ldr	r1, [r5, #0]
 801173e:	f104 0c14 	add.w	ip, r4, #20
 8011742:	46ae      	mov	lr, r5
 8011744:	f04f 0a00 	mov.w	sl, #0
 8011748:	f8bc b000 	ldrh.w	fp, [ip]
 801174c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011750:	fb09 220b 	mla	r2, r9, fp, r2
 8011754:	4492      	add	sl, r2
 8011756:	b289      	uxth	r1, r1
 8011758:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801175c:	f84e 1b04 	str.w	r1, [lr], #4
 8011760:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011764:	f8be 1000 	ldrh.w	r1, [lr]
 8011768:	0c12      	lsrs	r2, r2, #16
 801176a:	fb09 1102 	mla	r1, r9, r2, r1
 801176e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011772:	4567      	cmp	r7, ip
 8011774:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011778:	d8e6      	bhi.n	8011748 <__multiply+0x10c>
 801177a:	9a01      	ldr	r2, [sp, #4]
 801177c:	50a9      	str	r1, [r5, r2]
 801177e:	3504      	adds	r5, #4
 8011780:	e79a      	b.n	80116b8 <__multiply+0x7c>
 8011782:	3e01      	subs	r6, #1
 8011784:	e79c      	b.n	80116c0 <__multiply+0x84>
 8011786:	bf00      	nop
 8011788:	0801d2f4 	.word	0x0801d2f4
 801178c:	0801d305 	.word	0x0801d305

08011790 <__pow5mult>:
 8011790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011794:	4615      	mov	r5, r2
 8011796:	f012 0203 	ands.w	r2, r2, #3
 801179a:	4606      	mov	r6, r0
 801179c:	460f      	mov	r7, r1
 801179e:	d007      	beq.n	80117b0 <__pow5mult+0x20>
 80117a0:	4c25      	ldr	r4, [pc, #148]	; (8011838 <__pow5mult+0xa8>)
 80117a2:	3a01      	subs	r2, #1
 80117a4:	2300      	movs	r3, #0
 80117a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80117aa:	f7ff fe9b 	bl	80114e4 <__multadd>
 80117ae:	4607      	mov	r7, r0
 80117b0:	10ad      	asrs	r5, r5, #2
 80117b2:	d03d      	beq.n	8011830 <__pow5mult+0xa0>
 80117b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80117b6:	b97c      	cbnz	r4, 80117d8 <__pow5mult+0x48>
 80117b8:	2010      	movs	r0, #16
 80117ba:	f7ff fe29 	bl	8011410 <malloc>
 80117be:	4602      	mov	r2, r0
 80117c0:	6270      	str	r0, [r6, #36]	; 0x24
 80117c2:	b928      	cbnz	r0, 80117d0 <__pow5mult+0x40>
 80117c4:	4b1d      	ldr	r3, [pc, #116]	; (801183c <__pow5mult+0xac>)
 80117c6:	481e      	ldr	r0, [pc, #120]	; (8011840 <__pow5mult+0xb0>)
 80117c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80117cc:	f7fe fff0 	bl	80107b0 <__assert_func>
 80117d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80117d4:	6004      	str	r4, [r0, #0]
 80117d6:	60c4      	str	r4, [r0, #12]
 80117d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80117dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80117e0:	b94c      	cbnz	r4, 80117f6 <__pow5mult+0x66>
 80117e2:	f240 2171 	movw	r1, #625	; 0x271
 80117e6:	4630      	mov	r0, r6
 80117e8:	f7ff ff12 	bl	8011610 <__i2b>
 80117ec:	2300      	movs	r3, #0
 80117ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80117f2:	4604      	mov	r4, r0
 80117f4:	6003      	str	r3, [r0, #0]
 80117f6:	f04f 0900 	mov.w	r9, #0
 80117fa:	07eb      	lsls	r3, r5, #31
 80117fc:	d50a      	bpl.n	8011814 <__pow5mult+0x84>
 80117fe:	4639      	mov	r1, r7
 8011800:	4622      	mov	r2, r4
 8011802:	4630      	mov	r0, r6
 8011804:	f7ff ff1a 	bl	801163c <__multiply>
 8011808:	4639      	mov	r1, r7
 801180a:	4680      	mov	r8, r0
 801180c:	4630      	mov	r0, r6
 801180e:	f7ff fe47 	bl	80114a0 <_Bfree>
 8011812:	4647      	mov	r7, r8
 8011814:	106d      	asrs	r5, r5, #1
 8011816:	d00b      	beq.n	8011830 <__pow5mult+0xa0>
 8011818:	6820      	ldr	r0, [r4, #0]
 801181a:	b938      	cbnz	r0, 801182c <__pow5mult+0x9c>
 801181c:	4622      	mov	r2, r4
 801181e:	4621      	mov	r1, r4
 8011820:	4630      	mov	r0, r6
 8011822:	f7ff ff0b 	bl	801163c <__multiply>
 8011826:	6020      	str	r0, [r4, #0]
 8011828:	f8c0 9000 	str.w	r9, [r0]
 801182c:	4604      	mov	r4, r0
 801182e:	e7e4      	b.n	80117fa <__pow5mult+0x6a>
 8011830:	4638      	mov	r0, r7
 8011832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011836:	bf00      	nop
 8011838:	0801d458 	.word	0x0801d458
 801183c:	0801d1dc 	.word	0x0801d1dc
 8011840:	0801d305 	.word	0x0801d305

08011844 <__lshift>:
 8011844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011848:	460c      	mov	r4, r1
 801184a:	6849      	ldr	r1, [r1, #4]
 801184c:	6923      	ldr	r3, [r4, #16]
 801184e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011852:	68a3      	ldr	r3, [r4, #8]
 8011854:	4607      	mov	r7, r0
 8011856:	4691      	mov	r9, r2
 8011858:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801185c:	f108 0601 	add.w	r6, r8, #1
 8011860:	42b3      	cmp	r3, r6
 8011862:	db0b      	blt.n	801187c <__lshift+0x38>
 8011864:	4638      	mov	r0, r7
 8011866:	f7ff fddb 	bl	8011420 <_Balloc>
 801186a:	4605      	mov	r5, r0
 801186c:	b948      	cbnz	r0, 8011882 <__lshift+0x3e>
 801186e:	4602      	mov	r2, r0
 8011870:	4b2a      	ldr	r3, [pc, #168]	; (801191c <__lshift+0xd8>)
 8011872:	482b      	ldr	r0, [pc, #172]	; (8011920 <__lshift+0xdc>)
 8011874:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011878:	f7fe ff9a 	bl	80107b0 <__assert_func>
 801187c:	3101      	adds	r1, #1
 801187e:	005b      	lsls	r3, r3, #1
 8011880:	e7ee      	b.n	8011860 <__lshift+0x1c>
 8011882:	2300      	movs	r3, #0
 8011884:	f100 0114 	add.w	r1, r0, #20
 8011888:	f100 0210 	add.w	r2, r0, #16
 801188c:	4618      	mov	r0, r3
 801188e:	4553      	cmp	r3, sl
 8011890:	db37      	blt.n	8011902 <__lshift+0xbe>
 8011892:	6920      	ldr	r0, [r4, #16]
 8011894:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011898:	f104 0314 	add.w	r3, r4, #20
 801189c:	f019 091f 	ands.w	r9, r9, #31
 80118a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80118a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80118a8:	d02f      	beq.n	801190a <__lshift+0xc6>
 80118aa:	f1c9 0e20 	rsb	lr, r9, #32
 80118ae:	468a      	mov	sl, r1
 80118b0:	f04f 0c00 	mov.w	ip, #0
 80118b4:	681a      	ldr	r2, [r3, #0]
 80118b6:	fa02 f209 	lsl.w	r2, r2, r9
 80118ba:	ea42 020c 	orr.w	r2, r2, ip
 80118be:	f84a 2b04 	str.w	r2, [sl], #4
 80118c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80118c6:	4298      	cmp	r0, r3
 80118c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80118cc:	d8f2      	bhi.n	80118b4 <__lshift+0x70>
 80118ce:	1b03      	subs	r3, r0, r4
 80118d0:	3b15      	subs	r3, #21
 80118d2:	f023 0303 	bic.w	r3, r3, #3
 80118d6:	3304      	adds	r3, #4
 80118d8:	f104 0215 	add.w	r2, r4, #21
 80118dc:	4290      	cmp	r0, r2
 80118de:	bf38      	it	cc
 80118e0:	2304      	movcc	r3, #4
 80118e2:	f841 c003 	str.w	ip, [r1, r3]
 80118e6:	f1bc 0f00 	cmp.w	ip, #0
 80118ea:	d001      	beq.n	80118f0 <__lshift+0xac>
 80118ec:	f108 0602 	add.w	r6, r8, #2
 80118f0:	3e01      	subs	r6, #1
 80118f2:	4638      	mov	r0, r7
 80118f4:	612e      	str	r6, [r5, #16]
 80118f6:	4621      	mov	r1, r4
 80118f8:	f7ff fdd2 	bl	80114a0 <_Bfree>
 80118fc:	4628      	mov	r0, r5
 80118fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011902:	f842 0f04 	str.w	r0, [r2, #4]!
 8011906:	3301      	adds	r3, #1
 8011908:	e7c1      	b.n	801188e <__lshift+0x4a>
 801190a:	3904      	subs	r1, #4
 801190c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011910:	f841 2f04 	str.w	r2, [r1, #4]!
 8011914:	4298      	cmp	r0, r3
 8011916:	d8f9      	bhi.n	801190c <__lshift+0xc8>
 8011918:	e7ea      	b.n	80118f0 <__lshift+0xac>
 801191a:	bf00      	nop
 801191c:	0801d2f4 	.word	0x0801d2f4
 8011920:	0801d305 	.word	0x0801d305

08011924 <__mcmp>:
 8011924:	b530      	push	{r4, r5, lr}
 8011926:	6902      	ldr	r2, [r0, #16]
 8011928:	690c      	ldr	r4, [r1, #16]
 801192a:	1b12      	subs	r2, r2, r4
 801192c:	d10e      	bne.n	801194c <__mcmp+0x28>
 801192e:	f100 0314 	add.w	r3, r0, #20
 8011932:	3114      	adds	r1, #20
 8011934:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011938:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801193c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011940:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011944:	42a5      	cmp	r5, r4
 8011946:	d003      	beq.n	8011950 <__mcmp+0x2c>
 8011948:	d305      	bcc.n	8011956 <__mcmp+0x32>
 801194a:	2201      	movs	r2, #1
 801194c:	4610      	mov	r0, r2
 801194e:	bd30      	pop	{r4, r5, pc}
 8011950:	4283      	cmp	r3, r0
 8011952:	d3f3      	bcc.n	801193c <__mcmp+0x18>
 8011954:	e7fa      	b.n	801194c <__mcmp+0x28>
 8011956:	f04f 32ff 	mov.w	r2, #4294967295
 801195a:	e7f7      	b.n	801194c <__mcmp+0x28>

0801195c <__mdiff>:
 801195c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011960:	460c      	mov	r4, r1
 8011962:	4606      	mov	r6, r0
 8011964:	4611      	mov	r1, r2
 8011966:	4620      	mov	r0, r4
 8011968:	4690      	mov	r8, r2
 801196a:	f7ff ffdb 	bl	8011924 <__mcmp>
 801196e:	1e05      	subs	r5, r0, #0
 8011970:	d110      	bne.n	8011994 <__mdiff+0x38>
 8011972:	4629      	mov	r1, r5
 8011974:	4630      	mov	r0, r6
 8011976:	f7ff fd53 	bl	8011420 <_Balloc>
 801197a:	b930      	cbnz	r0, 801198a <__mdiff+0x2e>
 801197c:	4b3a      	ldr	r3, [pc, #232]	; (8011a68 <__mdiff+0x10c>)
 801197e:	4602      	mov	r2, r0
 8011980:	f240 2132 	movw	r1, #562	; 0x232
 8011984:	4839      	ldr	r0, [pc, #228]	; (8011a6c <__mdiff+0x110>)
 8011986:	f7fe ff13 	bl	80107b0 <__assert_func>
 801198a:	2301      	movs	r3, #1
 801198c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011994:	bfa4      	itt	ge
 8011996:	4643      	movge	r3, r8
 8011998:	46a0      	movge	r8, r4
 801199a:	4630      	mov	r0, r6
 801199c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80119a0:	bfa6      	itte	ge
 80119a2:	461c      	movge	r4, r3
 80119a4:	2500      	movge	r5, #0
 80119a6:	2501      	movlt	r5, #1
 80119a8:	f7ff fd3a 	bl	8011420 <_Balloc>
 80119ac:	b920      	cbnz	r0, 80119b8 <__mdiff+0x5c>
 80119ae:	4b2e      	ldr	r3, [pc, #184]	; (8011a68 <__mdiff+0x10c>)
 80119b0:	4602      	mov	r2, r0
 80119b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80119b6:	e7e5      	b.n	8011984 <__mdiff+0x28>
 80119b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80119bc:	6926      	ldr	r6, [r4, #16]
 80119be:	60c5      	str	r5, [r0, #12]
 80119c0:	f104 0914 	add.w	r9, r4, #20
 80119c4:	f108 0514 	add.w	r5, r8, #20
 80119c8:	f100 0e14 	add.w	lr, r0, #20
 80119cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80119d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80119d4:	f108 0210 	add.w	r2, r8, #16
 80119d8:	46f2      	mov	sl, lr
 80119da:	2100      	movs	r1, #0
 80119dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80119e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80119e4:	fa1f f883 	uxth.w	r8, r3
 80119e8:	fa11 f18b 	uxtah	r1, r1, fp
 80119ec:	0c1b      	lsrs	r3, r3, #16
 80119ee:	eba1 0808 	sub.w	r8, r1, r8
 80119f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80119f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80119fa:	fa1f f888 	uxth.w	r8, r8
 80119fe:	1419      	asrs	r1, r3, #16
 8011a00:	454e      	cmp	r6, r9
 8011a02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011a06:	f84a 3b04 	str.w	r3, [sl], #4
 8011a0a:	d8e7      	bhi.n	80119dc <__mdiff+0x80>
 8011a0c:	1b33      	subs	r3, r6, r4
 8011a0e:	3b15      	subs	r3, #21
 8011a10:	f023 0303 	bic.w	r3, r3, #3
 8011a14:	3304      	adds	r3, #4
 8011a16:	3415      	adds	r4, #21
 8011a18:	42a6      	cmp	r6, r4
 8011a1a:	bf38      	it	cc
 8011a1c:	2304      	movcc	r3, #4
 8011a1e:	441d      	add	r5, r3
 8011a20:	4473      	add	r3, lr
 8011a22:	469e      	mov	lr, r3
 8011a24:	462e      	mov	r6, r5
 8011a26:	4566      	cmp	r6, ip
 8011a28:	d30e      	bcc.n	8011a48 <__mdiff+0xec>
 8011a2a:	f10c 0203 	add.w	r2, ip, #3
 8011a2e:	1b52      	subs	r2, r2, r5
 8011a30:	f022 0203 	bic.w	r2, r2, #3
 8011a34:	3d03      	subs	r5, #3
 8011a36:	45ac      	cmp	ip, r5
 8011a38:	bf38      	it	cc
 8011a3a:	2200      	movcc	r2, #0
 8011a3c:	441a      	add	r2, r3
 8011a3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011a42:	b17b      	cbz	r3, 8011a64 <__mdiff+0x108>
 8011a44:	6107      	str	r7, [r0, #16]
 8011a46:	e7a3      	b.n	8011990 <__mdiff+0x34>
 8011a48:	f856 8b04 	ldr.w	r8, [r6], #4
 8011a4c:	fa11 f288 	uxtah	r2, r1, r8
 8011a50:	1414      	asrs	r4, r2, #16
 8011a52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011a56:	b292      	uxth	r2, r2
 8011a58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011a5c:	f84e 2b04 	str.w	r2, [lr], #4
 8011a60:	1421      	asrs	r1, r4, #16
 8011a62:	e7e0      	b.n	8011a26 <__mdiff+0xca>
 8011a64:	3f01      	subs	r7, #1
 8011a66:	e7ea      	b.n	8011a3e <__mdiff+0xe2>
 8011a68:	0801d2f4 	.word	0x0801d2f4
 8011a6c:	0801d305 	.word	0x0801d305

08011a70 <__d2b>:
 8011a70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a74:	4689      	mov	r9, r1
 8011a76:	2101      	movs	r1, #1
 8011a78:	ec57 6b10 	vmov	r6, r7, d0
 8011a7c:	4690      	mov	r8, r2
 8011a7e:	f7ff fccf 	bl	8011420 <_Balloc>
 8011a82:	4604      	mov	r4, r0
 8011a84:	b930      	cbnz	r0, 8011a94 <__d2b+0x24>
 8011a86:	4602      	mov	r2, r0
 8011a88:	4b25      	ldr	r3, [pc, #148]	; (8011b20 <__d2b+0xb0>)
 8011a8a:	4826      	ldr	r0, [pc, #152]	; (8011b24 <__d2b+0xb4>)
 8011a8c:	f240 310a 	movw	r1, #778	; 0x30a
 8011a90:	f7fe fe8e 	bl	80107b0 <__assert_func>
 8011a94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011a98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011a9c:	bb35      	cbnz	r5, 8011aec <__d2b+0x7c>
 8011a9e:	2e00      	cmp	r6, #0
 8011aa0:	9301      	str	r3, [sp, #4]
 8011aa2:	d028      	beq.n	8011af6 <__d2b+0x86>
 8011aa4:	4668      	mov	r0, sp
 8011aa6:	9600      	str	r6, [sp, #0]
 8011aa8:	f7ff fd82 	bl	80115b0 <__lo0bits>
 8011aac:	9900      	ldr	r1, [sp, #0]
 8011aae:	b300      	cbz	r0, 8011af2 <__d2b+0x82>
 8011ab0:	9a01      	ldr	r2, [sp, #4]
 8011ab2:	f1c0 0320 	rsb	r3, r0, #32
 8011ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8011aba:	430b      	orrs	r3, r1
 8011abc:	40c2      	lsrs	r2, r0
 8011abe:	6163      	str	r3, [r4, #20]
 8011ac0:	9201      	str	r2, [sp, #4]
 8011ac2:	9b01      	ldr	r3, [sp, #4]
 8011ac4:	61a3      	str	r3, [r4, #24]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	bf14      	ite	ne
 8011aca:	2202      	movne	r2, #2
 8011acc:	2201      	moveq	r2, #1
 8011ace:	6122      	str	r2, [r4, #16]
 8011ad0:	b1d5      	cbz	r5, 8011b08 <__d2b+0x98>
 8011ad2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011ad6:	4405      	add	r5, r0
 8011ad8:	f8c9 5000 	str.w	r5, [r9]
 8011adc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011ae0:	f8c8 0000 	str.w	r0, [r8]
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	b003      	add	sp, #12
 8011ae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011aec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011af0:	e7d5      	b.n	8011a9e <__d2b+0x2e>
 8011af2:	6161      	str	r1, [r4, #20]
 8011af4:	e7e5      	b.n	8011ac2 <__d2b+0x52>
 8011af6:	a801      	add	r0, sp, #4
 8011af8:	f7ff fd5a 	bl	80115b0 <__lo0bits>
 8011afc:	9b01      	ldr	r3, [sp, #4]
 8011afe:	6163      	str	r3, [r4, #20]
 8011b00:	2201      	movs	r2, #1
 8011b02:	6122      	str	r2, [r4, #16]
 8011b04:	3020      	adds	r0, #32
 8011b06:	e7e3      	b.n	8011ad0 <__d2b+0x60>
 8011b08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011b0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011b10:	f8c9 0000 	str.w	r0, [r9]
 8011b14:	6918      	ldr	r0, [r3, #16]
 8011b16:	f7ff fd2b 	bl	8011570 <__hi0bits>
 8011b1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011b1e:	e7df      	b.n	8011ae0 <__d2b+0x70>
 8011b20:	0801d2f4 	.word	0x0801d2f4
 8011b24:	0801d305 	.word	0x0801d305

08011b28 <_calloc_r>:
 8011b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b2a:	fba1 2402 	umull	r2, r4, r1, r2
 8011b2e:	b94c      	cbnz	r4, 8011b44 <_calloc_r+0x1c>
 8011b30:	4611      	mov	r1, r2
 8011b32:	9201      	str	r2, [sp, #4]
 8011b34:	f000 f87a 	bl	8011c2c <_malloc_r>
 8011b38:	9a01      	ldr	r2, [sp, #4]
 8011b3a:	4605      	mov	r5, r0
 8011b3c:	b930      	cbnz	r0, 8011b4c <_calloc_r+0x24>
 8011b3e:	4628      	mov	r0, r5
 8011b40:	b003      	add	sp, #12
 8011b42:	bd30      	pop	{r4, r5, pc}
 8011b44:	220c      	movs	r2, #12
 8011b46:	6002      	str	r2, [r0, #0]
 8011b48:	2500      	movs	r5, #0
 8011b4a:	e7f8      	b.n	8011b3e <_calloc_r+0x16>
 8011b4c:	4621      	mov	r1, r4
 8011b4e:	f7fe f8ab 	bl	800fca8 <memset>
 8011b52:	e7f4      	b.n	8011b3e <_calloc_r+0x16>

08011b54 <_free_r>:
 8011b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b56:	2900      	cmp	r1, #0
 8011b58:	d044      	beq.n	8011be4 <_free_r+0x90>
 8011b5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b5e:	9001      	str	r0, [sp, #4]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	f1a1 0404 	sub.w	r4, r1, #4
 8011b66:	bfb8      	it	lt
 8011b68:	18e4      	addlt	r4, r4, r3
 8011b6a:	f000 fead 	bl	80128c8 <__malloc_lock>
 8011b6e:	4a1e      	ldr	r2, [pc, #120]	; (8011be8 <_free_r+0x94>)
 8011b70:	9801      	ldr	r0, [sp, #4]
 8011b72:	6813      	ldr	r3, [r2, #0]
 8011b74:	b933      	cbnz	r3, 8011b84 <_free_r+0x30>
 8011b76:	6063      	str	r3, [r4, #4]
 8011b78:	6014      	str	r4, [r2, #0]
 8011b7a:	b003      	add	sp, #12
 8011b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b80:	f000 bea8 	b.w	80128d4 <__malloc_unlock>
 8011b84:	42a3      	cmp	r3, r4
 8011b86:	d908      	bls.n	8011b9a <_free_r+0x46>
 8011b88:	6825      	ldr	r5, [r4, #0]
 8011b8a:	1961      	adds	r1, r4, r5
 8011b8c:	428b      	cmp	r3, r1
 8011b8e:	bf01      	itttt	eq
 8011b90:	6819      	ldreq	r1, [r3, #0]
 8011b92:	685b      	ldreq	r3, [r3, #4]
 8011b94:	1949      	addeq	r1, r1, r5
 8011b96:	6021      	streq	r1, [r4, #0]
 8011b98:	e7ed      	b.n	8011b76 <_free_r+0x22>
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	685b      	ldr	r3, [r3, #4]
 8011b9e:	b10b      	cbz	r3, 8011ba4 <_free_r+0x50>
 8011ba0:	42a3      	cmp	r3, r4
 8011ba2:	d9fa      	bls.n	8011b9a <_free_r+0x46>
 8011ba4:	6811      	ldr	r1, [r2, #0]
 8011ba6:	1855      	adds	r5, r2, r1
 8011ba8:	42a5      	cmp	r5, r4
 8011baa:	d10b      	bne.n	8011bc4 <_free_r+0x70>
 8011bac:	6824      	ldr	r4, [r4, #0]
 8011bae:	4421      	add	r1, r4
 8011bb0:	1854      	adds	r4, r2, r1
 8011bb2:	42a3      	cmp	r3, r4
 8011bb4:	6011      	str	r1, [r2, #0]
 8011bb6:	d1e0      	bne.n	8011b7a <_free_r+0x26>
 8011bb8:	681c      	ldr	r4, [r3, #0]
 8011bba:	685b      	ldr	r3, [r3, #4]
 8011bbc:	6053      	str	r3, [r2, #4]
 8011bbe:	4421      	add	r1, r4
 8011bc0:	6011      	str	r1, [r2, #0]
 8011bc2:	e7da      	b.n	8011b7a <_free_r+0x26>
 8011bc4:	d902      	bls.n	8011bcc <_free_r+0x78>
 8011bc6:	230c      	movs	r3, #12
 8011bc8:	6003      	str	r3, [r0, #0]
 8011bca:	e7d6      	b.n	8011b7a <_free_r+0x26>
 8011bcc:	6825      	ldr	r5, [r4, #0]
 8011bce:	1961      	adds	r1, r4, r5
 8011bd0:	428b      	cmp	r3, r1
 8011bd2:	bf04      	itt	eq
 8011bd4:	6819      	ldreq	r1, [r3, #0]
 8011bd6:	685b      	ldreq	r3, [r3, #4]
 8011bd8:	6063      	str	r3, [r4, #4]
 8011bda:	bf04      	itt	eq
 8011bdc:	1949      	addeq	r1, r1, r5
 8011bde:	6021      	streq	r1, [r4, #0]
 8011be0:	6054      	str	r4, [r2, #4]
 8011be2:	e7ca      	b.n	8011b7a <_free_r+0x26>
 8011be4:	b003      	add	sp, #12
 8011be6:	bd30      	pop	{r4, r5, pc}
 8011be8:	2400f4d8 	.word	0x2400f4d8

08011bec <sbrk_aligned>:
 8011bec:	b570      	push	{r4, r5, r6, lr}
 8011bee:	4e0e      	ldr	r6, [pc, #56]	; (8011c28 <sbrk_aligned+0x3c>)
 8011bf0:	460c      	mov	r4, r1
 8011bf2:	6831      	ldr	r1, [r6, #0]
 8011bf4:	4605      	mov	r5, r0
 8011bf6:	b911      	cbnz	r1, 8011bfe <sbrk_aligned+0x12>
 8011bf8:	f000 fb42 	bl	8012280 <_sbrk_r>
 8011bfc:	6030      	str	r0, [r6, #0]
 8011bfe:	4621      	mov	r1, r4
 8011c00:	4628      	mov	r0, r5
 8011c02:	f000 fb3d 	bl	8012280 <_sbrk_r>
 8011c06:	1c43      	adds	r3, r0, #1
 8011c08:	d00a      	beq.n	8011c20 <sbrk_aligned+0x34>
 8011c0a:	1cc4      	adds	r4, r0, #3
 8011c0c:	f024 0403 	bic.w	r4, r4, #3
 8011c10:	42a0      	cmp	r0, r4
 8011c12:	d007      	beq.n	8011c24 <sbrk_aligned+0x38>
 8011c14:	1a21      	subs	r1, r4, r0
 8011c16:	4628      	mov	r0, r5
 8011c18:	f000 fb32 	bl	8012280 <_sbrk_r>
 8011c1c:	3001      	adds	r0, #1
 8011c1e:	d101      	bne.n	8011c24 <sbrk_aligned+0x38>
 8011c20:	f04f 34ff 	mov.w	r4, #4294967295
 8011c24:	4620      	mov	r0, r4
 8011c26:	bd70      	pop	{r4, r5, r6, pc}
 8011c28:	2400f4dc 	.word	0x2400f4dc

08011c2c <_malloc_r>:
 8011c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c30:	1ccd      	adds	r5, r1, #3
 8011c32:	f025 0503 	bic.w	r5, r5, #3
 8011c36:	3508      	adds	r5, #8
 8011c38:	2d0c      	cmp	r5, #12
 8011c3a:	bf38      	it	cc
 8011c3c:	250c      	movcc	r5, #12
 8011c3e:	2d00      	cmp	r5, #0
 8011c40:	4607      	mov	r7, r0
 8011c42:	db01      	blt.n	8011c48 <_malloc_r+0x1c>
 8011c44:	42a9      	cmp	r1, r5
 8011c46:	d905      	bls.n	8011c54 <_malloc_r+0x28>
 8011c48:	230c      	movs	r3, #12
 8011c4a:	603b      	str	r3, [r7, #0]
 8011c4c:	2600      	movs	r6, #0
 8011c4e:	4630      	mov	r0, r6
 8011c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c54:	4e2e      	ldr	r6, [pc, #184]	; (8011d10 <_malloc_r+0xe4>)
 8011c56:	f000 fe37 	bl	80128c8 <__malloc_lock>
 8011c5a:	6833      	ldr	r3, [r6, #0]
 8011c5c:	461c      	mov	r4, r3
 8011c5e:	bb34      	cbnz	r4, 8011cae <_malloc_r+0x82>
 8011c60:	4629      	mov	r1, r5
 8011c62:	4638      	mov	r0, r7
 8011c64:	f7ff ffc2 	bl	8011bec <sbrk_aligned>
 8011c68:	1c43      	adds	r3, r0, #1
 8011c6a:	4604      	mov	r4, r0
 8011c6c:	d14d      	bne.n	8011d0a <_malloc_r+0xde>
 8011c6e:	6834      	ldr	r4, [r6, #0]
 8011c70:	4626      	mov	r6, r4
 8011c72:	2e00      	cmp	r6, #0
 8011c74:	d140      	bne.n	8011cf8 <_malloc_r+0xcc>
 8011c76:	6823      	ldr	r3, [r4, #0]
 8011c78:	4631      	mov	r1, r6
 8011c7a:	4638      	mov	r0, r7
 8011c7c:	eb04 0803 	add.w	r8, r4, r3
 8011c80:	f000 fafe 	bl	8012280 <_sbrk_r>
 8011c84:	4580      	cmp	r8, r0
 8011c86:	d13a      	bne.n	8011cfe <_malloc_r+0xd2>
 8011c88:	6821      	ldr	r1, [r4, #0]
 8011c8a:	3503      	adds	r5, #3
 8011c8c:	1a6d      	subs	r5, r5, r1
 8011c8e:	f025 0503 	bic.w	r5, r5, #3
 8011c92:	3508      	adds	r5, #8
 8011c94:	2d0c      	cmp	r5, #12
 8011c96:	bf38      	it	cc
 8011c98:	250c      	movcc	r5, #12
 8011c9a:	4629      	mov	r1, r5
 8011c9c:	4638      	mov	r0, r7
 8011c9e:	f7ff ffa5 	bl	8011bec <sbrk_aligned>
 8011ca2:	3001      	adds	r0, #1
 8011ca4:	d02b      	beq.n	8011cfe <_malloc_r+0xd2>
 8011ca6:	6823      	ldr	r3, [r4, #0]
 8011ca8:	442b      	add	r3, r5
 8011caa:	6023      	str	r3, [r4, #0]
 8011cac:	e00e      	b.n	8011ccc <_malloc_r+0xa0>
 8011cae:	6822      	ldr	r2, [r4, #0]
 8011cb0:	1b52      	subs	r2, r2, r5
 8011cb2:	d41e      	bmi.n	8011cf2 <_malloc_r+0xc6>
 8011cb4:	2a0b      	cmp	r2, #11
 8011cb6:	d916      	bls.n	8011ce6 <_malloc_r+0xba>
 8011cb8:	1961      	adds	r1, r4, r5
 8011cba:	42a3      	cmp	r3, r4
 8011cbc:	6025      	str	r5, [r4, #0]
 8011cbe:	bf18      	it	ne
 8011cc0:	6059      	strne	r1, [r3, #4]
 8011cc2:	6863      	ldr	r3, [r4, #4]
 8011cc4:	bf08      	it	eq
 8011cc6:	6031      	streq	r1, [r6, #0]
 8011cc8:	5162      	str	r2, [r4, r5]
 8011cca:	604b      	str	r3, [r1, #4]
 8011ccc:	4638      	mov	r0, r7
 8011cce:	f104 060b 	add.w	r6, r4, #11
 8011cd2:	f000 fdff 	bl	80128d4 <__malloc_unlock>
 8011cd6:	f026 0607 	bic.w	r6, r6, #7
 8011cda:	1d23      	adds	r3, r4, #4
 8011cdc:	1af2      	subs	r2, r6, r3
 8011cde:	d0b6      	beq.n	8011c4e <_malloc_r+0x22>
 8011ce0:	1b9b      	subs	r3, r3, r6
 8011ce2:	50a3      	str	r3, [r4, r2]
 8011ce4:	e7b3      	b.n	8011c4e <_malloc_r+0x22>
 8011ce6:	6862      	ldr	r2, [r4, #4]
 8011ce8:	42a3      	cmp	r3, r4
 8011cea:	bf0c      	ite	eq
 8011cec:	6032      	streq	r2, [r6, #0]
 8011cee:	605a      	strne	r2, [r3, #4]
 8011cf0:	e7ec      	b.n	8011ccc <_malloc_r+0xa0>
 8011cf2:	4623      	mov	r3, r4
 8011cf4:	6864      	ldr	r4, [r4, #4]
 8011cf6:	e7b2      	b.n	8011c5e <_malloc_r+0x32>
 8011cf8:	4634      	mov	r4, r6
 8011cfa:	6876      	ldr	r6, [r6, #4]
 8011cfc:	e7b9      	b.n	8011c72 <_malloc_r+0x46>
 8011cfe:	230c      	movs	r3, #12
 8011d00:	603b      	str	r3, [r7, #0]
 8011d02:	4638      	mov	r0, r7
 8011d04:	f000 fde6 	bl	80128d4 <__malloc_unlock>
 8011d08:	e7a1      	b.n	8011c4e <_malloc_r+0x22>
 8011d0a:	6025      	str	r5, [r4, #0]
 8011d0c:	e7de      	b.n	8011ccc <_malloc_r+0xa0>
 8011d0e:	bf00      	nop
 8011d10:	2400f4d8 	.word	0x2400f4d8

08011d14 <__ssputs_r>:
 8011d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d18:	688e      	ldr	r6, [r1, #8]
 8011d1a:	429e      	cmp	r6, r3
 8011d1c:	4682      	mov	sl, r0
 8011d1e:	460c      	mov	r4, r1
 8011d20:	4690      	mov	r8, r2
 8011d22:	461f      	mov	r7, r3
 8011d24:	d838      	bhi.n	8011d98 <__ssputs_r+0x84>
 8011d26:	898a      	ldrh	r2, [r1, #12]
 8011d28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011d2c:	d032      	beq.n	8011d94 <__ssputs_r+0x80>
 8011d2e:	6825      	ldr	r5, [r4, #0]
 8011d30:	6909      	ldr	r1, [r1, #16]
 8011d32:	eba5 0901 	sub.w	r9, r5, r1
 8011d36:	6965      	ldr	r5, [r4, #20]
 8011d38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011d40:	3301      	adds	r3, #1
 8011d42:	444b      	add	r3, r9
 8011d44:	106d      	asrs	r5, r5, #1
 8011d46:	429d      	cmp	r5, r3
 8011d48:	bf38      	it	cc
 8011d4a:	461d      	movcc	r5, r3
 8011d4c:	0553      	lsls	r3, r2, #21
 8011d4e:	d531      	bpl.n	8011db4 <__ssputs_r+0xa0>
 8011d50:	4629      	mov	r1, r5
 8011d52:	f7ff ff6b 	bl	8011c2c <_malloc_r>
 8011d56:	4606      	mov	r6, r0
 8011d58:	b950      	cbnz	r0, 8011d70 <__ssputs_r+0x5c>
 8011d5a:	230c      	movs	r3, #12
 8011d5c:	f8ca 3000 	str.w	r3, [sl]
 8011d60:	89a3      	ldrh	r3, [r4, #12]
 8011d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d66:	81a3      	strh	r3, [r4, #12]
 8011d68:	f04f 30ff 	mov.w	r0, #4294967295
 8011d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d70:	6921      	ldr	r1, [r4, #16]
 8011d72:	464a      	mov	r2, r9
 8011d74:	f7fd ff8a 	bl	800fc8c <memcpy>
 8011d78:	89a3      	ldrh	r3, [r4, #12]
 8011d7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d82:	81a3      	strh	r3, [r4, #12]
 8011d84:	6126      	str	r6, [r4, #16]
 8011d86:	6165      	str	r5, [r4, #20]
 8011d88:	444e      	add	r6, r9
 8011d8a:	eba5 0509 	sub.w	r5, r5, r9
 8011d8e:	6026      	str	r6, [r4, #0]
 8011d90:	60a5      	str	r5, [r4, #8]
 8011d92:	463e      	mov	r6, r7
 8011d94:	42be      	cmp	r6, r7
 8011d96:	d900      	bls.n	8011d9a <__ssputs_r+0x86>
 8011d98:	463e      	mov	r6, r7
 8011d9a:	6820      	ldr	r0, [r4, #0]
 8011d9c:	4632      	mov	r2, r6
 8011d9e:	4641      	mov	r1, r8
 8011da0:	f000 fd78 	bl	8012894 <memmove>
 8011da4:	68a3      	ldr	r3, [r4, #8]
 8011da6:	1b9b      	subs	r3, r3, r6
 8011da8:	60a3      	str	r3, [r4, #8]
 8011daa:	6823      	ldr	r3, [r4, #0]
 8011dac:	4433      	add	r3, r6
 8011dae:	6023      	str	r3, [r4, #0]
 8011db0:	2000      	movs	r0, #0
 8011db2:	e7db      	b.n	8011d6c <__ssputs_r+0x58>
 8011db4:	462a      	mov	r2, r5
 8011db6:	f000 fd93 	bl	80128e0 <_realloc_r>
 8011dba:	4606      	mov	r6, r0
 8011dbc:	2800      	cmp	r0, #0
 8011dbe:	d1e1      	bne.n	8011d84 <__ssputs_r+0x70>
 8011dc0:	6921      	ldr	r1, [r4, #16]
 8011dc2:	4650      	mov	r0, sl
 8011dc4:	f7ff fec6 	bl	8011b54 <_free_r>
 8011dc8:	e7c7      	b.n	8011d5a <__ssputs_r+0x46>
	...

08011dcc <_svfiprintf_r>:
 8011dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dd0:	4698      	mov	r8, r3
 8011dd2:	898b      	ldrh	r3, [r1, #12]
 8011dd4:	061b      	lsls	r3, r3, #24
 8011dd6:	b09d      	sub	sp, #116	; 0x74
 8011dd8:	4607      	mov	r7, r0
 8011dda:	460d      	mov	r5, r1
 8011ddc:	4614      	mov	r4, r2
 8011dde:	d50e      	bpl.n	8011dfe <_svfiprintf_r+0x32>
 8011de0:	690b      	ldr	r3, [r1, #16]
 8011de2:	b963      	cbnz	r3, 8011dfe <_svfiprintf_r+0x32>
 8011de4:	2140      	movs	r1, #64	; 0x40
 8011de6:	f7ff ff21 	bl	8011c2c <_malloc_r>
 8011dea:	6028      	str	r0, [r5, #0]
 8011dec:	6128      	str	r0, [r5, #16]
 8011dee:	b920      	cbnz	r0, 8011dfa <_svfiprintf_r+0x2e>
 8011df0:	230c      	movs	r3, #12
 8011df2:	603b      	str	r3, [r7, #0]
 8011df4:	f04f 30ff 	mov.w	r0, #4294967295
 8011df8:	e0d1      	b.n	8011f9e <_svfiprintf_r+0x1d2>
 8011dfa:	2340      	movs	r3, #64	; 0x40
 8011dfc:	616b      	str	r3, [r5, #20]
 8011dfe:	2300      	movs	r3, #0
 8011e00:	9309      	str	r3, [sp, #36]	; 0x24
 8011e02:	2320      	movs	r3, #32
 8011e04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e08:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e0c:	2330      	movs	r3, #48	; 0x30
 8011e0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011fb8 <_svfiprintf_r+0x1ec>
 8011e12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e16:	f04f 0901 	mov.w	r9, #1
 8011e1a:	4623      	mov	r3, r4
 8011e1c:	469a      	mov	sl, r3
 8011e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e22:	b10a      	cbz	r2, 8011e28 <_svfiprintf_r+0x5c>
 8011e24:	2a25      	cmp	r2, #37	; 0x25
 8011e26:	d1f9      	bne.n	8011e1c <_svfiprintf_r+0x50>
 8011e28:	ebba 0b04 	subs.w	fp, sl, r4
 8011e2c:	d00b      	beq.n	8011e46 <_svfiprintf_r+0x7a>
 8011e2e:	465b      	mov	r3, fp
 8011e30:	4622      	mov	r2, r4
 8011e32:	4629      	mov	r1, r5
 8011e34:	4638      	mov	r0, r7
 8011e36:	f7ff ff6d 	bl	8011d14 <__ssputs_r>
 8011e3a:	3001      	adds	r0, #1
 8011e3c:	f000 80aa 	beq.w	8011f94 <_svfiprintf_r+0x1c8>
 8011e40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e42:	445a      	add	r2, fp
 8011e44:	9209      	str	r2, [sp, #36]	; 0x24
 8011e46:	f89a 3000 	ldrb.w	r3, [sl]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	f000 80a2 	beq.w	8011f94 <_svfiprintf_r+0x1c8>
 8011e50:	2300      	movs	r3, #0
 8011e52:	f04f 32ff 	mov.w	r2, #4294967295
 8011e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e5a:	f10a 0a01 	add.w	sl, sl, #1
 8011e5e:	9304      	str	r3, [sp, #16]
 8011e60:	9307      	str	r3, [sp, #28]
 8011e62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e66:	931a      	str	r3, [sp, #104]	; 0x68
 8011e68:	4654      	mov	r4, sl
 8011e6a:	2205      	movs	r2, #5
 8011e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e70:	4851      	ldr	r0, [pc, #324]	; (8011fb8 <_svfiprintf_r+0x1ec>)
 8011e72:	f7ee fa3d 	bl	80002f0 <memchr>
 8011e76:	9a04      	ldr	r2, [sp, #16]
 8011e78:	b9d8      	cbnz	r0, 8011eb2 <_svfiprintf_r+0xe6>
 8011e7a:	06d0      	lsls	r0, r2, #27
 8011e7c:	bf44      	itt	mi
 8011e7e:	2320      	movmi	r3, #32
 8011e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e84:	0711      	lsls	r1, r2, #28
 8011e86:	bf44      	itt	mi
 8011e88:	232b      	movmi	r3, #43	; 0x2b
 8011e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8011e92:	2b2a      	cmp	r3, #42	; 0x2a
 8011e94:	d015      	beq.n	8011ec2 <_svfiprintf_r+0xf6>
 8011e96:	9a07      	ldr	r2, [sp, #28]
 8011e98:	4654      	mov	r4, sl
 8011e9a:	2000      	movs	r0, #0
 8011e9c:	f04f 0c0a 	mov.w	ip, #10
 8011ea0:	4621      	mov	r1, r4
 8011ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ea6:	3b30      	subs	r3, #48	; 0x30
 8011ea8:	2b09      	cmp	r3, #9
 8011eaa:	d94e      	bls.n	8011f4a <_svfiprintf_r+0x17e>
 8011eac:	b1b0      	cbz	r0, 8011edc <_svfiprintf_r+0x110>
 8011eae:	9207      	str	r2, [sp, #28]
 8011eb0:	e014      	b.n	8011edc <_svfiprintf_r+0x110>
 8011eb2:	eba0 0308 	sub.w	r3, r0, r8
 8011eb6:	fa09 f303 	lsl.w	r3, r9, r3
 8011eba:	4313      	orrs	r3, r2
 8011ebc:	9304      	str	r3, [sp, #16]
 8011ebe:	46a2      	mov	sl, r4
 8011ec0:	e7d2      	b.n	8011e68 <_svfiprintf_r+0x9c>
 8011ec2:	9b03      	ldr	r3, [sp, #12]
 8011ec4:	1d19      	adds	r1, r3, #4
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	9103      	str	r1, [sp, #12]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	bfbb      	ittet	lt
 8011ece:	425b      	neglt	r3, r3
 8011ed0:	f042 0202 	orrlt.w	r2, r2, #2
 8011ed4:	9307      	strge	r3, [sp, #28]
 8011ed6:	9307      	strlt	r3, [sp, #28]
 8011ed8:	bfb8      	it	lt
 8011eda:	9204      	strlt	r2, [sp, #16]
 8011edc:	7823      	ldrb	r3, [r4, #0]
 8011ede:	2b2e      	cmp	r3, #46	; 0x2e
 8011ee0:	d10c      	bne.n	8011efc <_svfiprintf_r+0x130>
 8011ee2:	7863      	ldrb	r3, [r4, #1]
 8011ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8011ee6:	d135      	bne.n	8011f54 <_svfiprintf_r+0x188>
 8011ee8:	9b03      	ldr	r3, [sp, #12]
 8011eea:	1d1a      	adds	r2, r3, #4
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	9203      	str	r2, [sp, #12]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	bfb8      	it	lt
 8011ef4:	f04f 33ff 	movlt.w	r3, #4294967295
 8011ef8:	3402      	adds	r4, #2
 8011efa:	9305      	str	r3, [sp, #20]
 8011efc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011fc8 <_svfiprintf_r+0x1fc>
 8011f00:	7821      	ldrb	r1, [r4, #0]
 8011f02:	2203      	movs	r2, #3
 8011f04:	4650      	mov	r0, sl
 8011f06:	f7ee f9f3 	bl	80002f0 <memchr>
 8011f0a:	b140      	cbz	r0, 8011f1e <_svfiprintf_r+0x152>
 8011f0c:	2340      	movs	r3, #64	; 0x40
 8011f0e:	eba0 000a 	sub.w	r0, r0, sl
 8011f12:	fa03 f000 	lsl.w	r0, r3, r0
 8011f16:	9b04      	ldr	r3, [sp, #16]
 8011f18:	4303      	orrs	r3, r0
 8011f1a:	3401      	adds	r4, #1
 8011f1c:	9304      	str	r3, [sp, #16]
 8011f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f22:	4826      	ldr	r0, [pc, #152]	; (8011fbc <_svfiprintf_r+0x1f0>)
 8011f24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f28:	2206      	movs	r2, #6
 8011f2a:	f7ee f9e1 	bl	80002f0 <memchr>
 8011f2e:	2800      	cmp	r0, #0
 8011f30:	d038      	beq.n	8011fa4 <_svfiprintf_r+0x1d8>
 8011f32:	4b23      	ldr	r3, [pc, #140]	; (8011fc0 <_svfiprintf_r+0x1f4>)
 8011f34:	bb1b      	cbnz	r3, 8011f7e <_svfiprintf_r+0x1b2>
 8011f36:	9b03      	ldr	r3, [sp, #12]
 8011f38:	3307      	adds	r3, #7
 8011f3a:	f023 0307 	bic.w	r3, r3, #7
 8011f3e:	3308      	adds	r3, #8
 8011f40:	9303      	str	r3, [sp, #12]
 8011f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f44:	4433      	add	r3, r6
 8011f46:	9309      	str	r3, [sp, #36]	; 0x24
 8011f48:	e767      	b.n	8011e1a <_svfiprintf_r+0x4e>
 8011f4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f4e:	460c      	mov	r4, r1
 8011f50:	2001      	movs	r0, #1
 8011f52:	e7a5      	b.n	8011ea0 <_svfiprintf_r+0xd4>
 8011f54:	2300      	movs	r3, #0
 8011f56:	3401      	adds	r4, #1
 8011f58:	9305      	str	r3, [sp, #20]
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	f04f 0c0a 	mov.w	ip, #10
 8011f60:	4620      	mov	r0, r4
 8011f62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f66:	3a30      	subs	r2, #48	; 0x30
 8011f68:	2a09      	cmp	r2, #9
 8011f6a:	d903      	bls.n	8011f74 <_svfiprintf_r+0x1a8>
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d0c5      	beq.n	8011efc <_svfiprintf_r+0x130>
 8011f70:	9105      	str	r1, [sp, #20]
 8011f72:	e7c3      	b.n	8011efc <_svfiprintf_r+0x130>
 8011f74:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f78:	4604      	mov	r4, r0
 8011f7a:	2301      	movs	r3, #1
 8011f7c:	e7f0      	b.n	8011f60 <_svfiprintf_r+0x194>
 8011f7e:	ab03      	add	r3, sp, #12
 8011f80:	9300      	str	r3, [sp, #0]
 8011f82:	462a      	mov	r2, r5
 8011f84:	4b0f      	ldr	r3, [pc, #60]	; (8011fc4 <_svfiprintf_r+0x1f8>)
 8011f86:	a904      	add	r1, sp, #16
 8011f88:	4638      	mov	r0, r7
 8011f8a:	f7fd ff25 	bl	800fdd8 <_printf_float>
 8011f8e:	1c42      	adds	r2, r0, #1
 8011f90:	4606      	mov	r6, r0
 8011f92:	d1d6      	bne.n	8011f42 <_svfiprintf_r+0x176>
 8011f94:	89ab      	ldrh	r3, [r5, #12]
 8011f96:	065b      	lsls	r3, r3, #25
 8011f98:	f53f af2c 	bmi.w	8011df4 <_svfiprintf_r+0x28>
 8011f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f9e:	b01d      	add	sp, #116	; 0x74
 8011fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fa4:	ab03      	add	r3, sp, #12
 8011fa6:	9300      	str	r3, [sp, #0]
 8011fa8:	462a      	mov	r2, r5
 8011faa:	4b06      	ldr	r3, [pc, #24]	; (8011fc4 <_svfiprintf_r+0x1f8>)
 8011fac:	a904      	add	r1, sp, #16
 8011fae:	4638      	mov	r0, r7
 8011fb0:	f7fe f99e 	bl	80102f0 <_printf_i>
 8011fb4:	e7eb      	b.n	8011f8e <_svfiprintf_r+0x1c2>
 8011fb6:	bf00      	nop
 8011fb8:	0801d464 	.word	0x0801d464
 8011fbc:	0801d46e 	.word	0x0801d46e
 8011fc0:	0800fdd9 	.word	0x0800fdd9
 8011fc4:	08011d15 	.word	0x08011d15
 8011fc8:	0801d46a 	.word	0x0801d46a

08011fcc <__sfputc_r>:
 8011fcc:	6893      	ldr	r3, [r2, #8]
 8011fce:	3b01      	subs	r3, #1
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	b410      	push	{r4}
 8011fd4:	6093      	str	r3, [r2, #8]
 8011fd6:	da08      	bge.n	8011fea <__sfputc_r+0x1e>
 8011fd8:	6994      	ldr	r4, [r2, #24]
 8011fda:	42a3      	cmp	r3, r4
 8011fdc:	db01      	blt.n	8011fe2 <__sfputc_r+0x16>
 8011fde:	290a      	cmp	r1, #10
 8011fe0:	d103      	bne.n	8011fea <__sfputc_r+0x1e>
 8011fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fe6:	f000 b95b 	b.w	80122a0 <__swbuf_r>
 8011fea:	6813      	ldr	r3, [r2, #0]
 8011fec:	1c58      	adds	r0, r3, #1
 8011fee:	6010      	str	r0, [r2, #0]
 8011ff0:	7019      	strb	r1, [r3, #0]
 8011ff2:	4608      	mov	r0, r1
 8011ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ff8:	4770      	bx	lr

08011ffa <__sfputs_r>:
 8011ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ffc:	4606      	mov	r6, r0
 8011ffe:	460f      	mov	r7, r1
 8012000:	4614      	mov	r4, r2
 8012002:	18d5      	adds	r5, r2, r3
 8012004:	42ac      	cmp	r4, r5
 8012006:	d101      	bne.n	801200c <__sfputs_r+0x12>
 8012008:	2000      	movs	r0, #0
 801200a:	e007      	b.n	801201c <__sfputs_r+0x22>
 801200c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012010:	463a      	mov	r2, r7
 8012012:	4630      	mov	r0, r6
 8012014:	f7ff ffda 	bl	8011fcc <__sfputc_r>
 8012018:	1c43      	adds	r3, r0, #1
 801201a:	d1f3      	bne.n	8012004 <__sfputs_r+0xa>
 801201c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012020 <_vfiprintf_r>:
 8012020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012024:	460d      	mov	r5, r1
 8012026:	b09d      	sub	sp, #116	; 0x74
 8012028:	4614      	mov	r4, r2
 801202a:	4698      	mov	r8, r3
 801202c:	4606      	mov	r6, r0
 801202e:	b118      	cbz	r0, 8012038 <_vfiprintf_r+0x18>
 8012030:	6983      	ldr	r3, [r0, #24]
 8012032:	b90b      	cbnz	r3, 8012038 <_vfiprintf_r+0x18>
 8012034:	f000 fb16 	bl	8012664 <__sinit>
 8012038:	4b89      	ldr	r3, [pc, #548]	; (8012260 <_vfiprintf_r+0x240>)
 801203a:	429d      	cmp	r5, r3
 801203c:	d11b      	bne.n	8012076 <_vfiprintf_r+0x56>
 801203e:	6875      	ldr	r5, [r6, #4]
 8012040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012042:	07d9      	lsls	r1, r3, #31
 8012044:	d405      	bmi.n	8012052 <_vfiprintf_r+0x32>
 8012046:	89ab      	ldrh	r3, [r5, #12]
 8012048:	059a      	lsls	r2, r3, #22
 801204a:	d402      	bmi.n	8012052 <_vfiprintf_r+0x32>
 801204c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801204e:	f000 fba7 	bl	80127a0 <__retarget_lock_acquire_recursive>
 8012052:	89ab      	ldrh	r3, [r5, #12]
 8012054:	071b      	lsls	r3, r3, #28
 8012056:	d501      	bpl.n	801205c <_vfiprintf_r+0x3c>
 8012058:	692b      	ldr	r3, [r5, #16]
 801205a:	b9eb      	cbnz	r3, 8012098 <_vfiprintf_r+0x78>
 801205c:	4629      	mov	r1, r5
 801205e:	4630      	mov	r0, r6
 8012060:	f000 f970 	bl	8012344 <__swsetup_r>
 8012064:	b1c0      	cbz	r0, 8012098 <_vfiprintf_r+0x78>
 8012066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012068:	07dc      	lsls	r4, r3, #31
 801206a:	d50e      	bpl.n	801208a <_vfiprintf_r+0x6a>
 801206c:	f04f 30ff 	mov.w	r0, #4294967295
 8012070:	b01d      	add	sp, #116	; 0x74
 8012072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012076:	4b7b      	ldr	r3, [pc, #492]	; (8012264 <_vfiprintf_r+0x244>)
 8012078:	429d      	cmp	r5, r3
 801207a:	d101      	bne.n	8012080 <_vfiprintf_r+0x60>
 801207c:	68b5      	ldr	r5, [r6, #8]
 801207e:	e7df      	b.n	8012040 <_vfiprintf_r+0x20>
 8012080:	4b79      	ldr	r3, [pc, #484]	; (8012268 <_vfiprintf_r+0x248>)
 8012082:	429d      	cmp	r5, r3
 8012084:	bf08      	it	eq
 8012086:	68f5      	ldreq	r5, [r6, #12]
 8012088:	e7da      	b.n	8012040 <_vfiprintf_r+0x20>
 801208a:	89ab      	ldrh	r3, [r5, #12]
 801208c:	0598      	lsls	r0, r3, #22
 801208e:	d4ed      	bmi.n	801206c <_vfiprintf_r+0x4c>
 8012090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012092:	f000 fb86 	bl	80127a2 <__retarget_lock_release_recursive>
 8012096:	e7e9      	b.n	801206c <_vfiprintf_r+0x4c>
 8012098:	2300      	movs	r3, #0
 801209a:	9309      	str	r3, [sp, #36]	; 0x24
 801209c:	2320      	movs	r3, #32
 801209e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80120a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80120a6:	2330      	movs	r3, #48	; 0x30
 80120a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801226c <_vfiprintf_r+0x24c>
 80120ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80120b0:	f04f 0901 	mov.w	r9, #1
 80120b4:	4623      	mov	r3, r4
 80120b6:	469a      	mov	sl, r3
 80120b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120bc:	b10a      	cbz	r2, 80120c2 <_vfiprintf_r+0xa2>
 80120be:	2a25      	cmp	r2, #37	; 0x25
 80120c0:	d1f9      	bne.n	80120b6 <_vfiprintf_r+0x96>
 80120c2:	ebba 0b04 	subs.w	fp, sl, r4
 80120c6:	d00b      	beq.n	80120e0 <_vfiprintf_r+0xc0>
 80120c8:	465b      	mov	r3, fp
 80120ca:	4622      	mov	r2, r4
 80120cc:	4629      	mov	r1, r5
 80120ce:	4630      	mov	r0, r6
 80120d0:	f7ff ff93 	bl	8011ffa <__sfputs_r>
 80120d4:	3001      	adds	r0, #1
 80120d6:	f000 80aa 	beq.w	801222e <_vfiprintf_r+0x20e>
 80120da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120dc:	445a      	add	r2, fp
 80120de:	9209      	str	r2, [sp, #36]	; 0x24
 80120e0:	f89a 3000 	ldrb.w	r3, [sl]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	f000 80a2 	beq.w	801222e <_vfiprintf_r+0x20e>
 80120ea:	2300      	movs	r3, #0
 80120ec:	f04f 32ff 	mov.w	r2, #4294967295
 80120f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120f4:	f10a 0a01 	add.w	sl, sl, #1
 80120f8:	9304      	str	r3, [sp, #16]
 80120fa:	9307      	str	r3, [sp, #28]
 80120fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012100:	931a      	str	r3, [sp, #104]	; 0x68
 8012102:	4654      	mov	r4, sl
 8012104:	2205      	movs	r2, #5
 8012106:	f814 1b01 	ldrb.w	r1, [r4], #1
 801210a:	4858      	ldr	r0, [pc, #352]	; (801226c <_vfiprintf_r+0x24c>)
 801210c:	f7ee f8f0 	bl	80002f0 <memchr>
 8012110:	9a04      	ldr	r2, [sp, #16]
 8012112:	b9d8      	cbnz	r0, 801214c <_vfiprintf_r+0x12c>
 8012114:	06d1      	lsls	r1, r2, #27
 8012116:	bf44      	itt	mi
 8012118:	2320      	movmi	r3, #32
 801211a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801211e:	0713      	lsls	r3, r2, #28
 8012120:	bf44      	itt	mi
 8012122:	232b      	movmi	r3, #43	; 0x2b
 8012124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012128:	f89a 3000 	ldrb.w	r3, [sl]
 801212c:	2b2a      	cmp	r3, #42	; 0x2a
 801212e:	d015      	beq.n	801215c <_vfiprintf_r+0x13c>
 8012130:	9a07      	ldr	r2, [sp, #28]
 8012132:	4654      	mov	r4, sl
 8012134:	2000      	movs	r0, #0
 8012136:	f04f 0c0a 	mov.w	ip, #10
 801213a:	4621      	mov	r1, r4
 801213c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012140:	3b30      	subs	r3, #48	; 0x30
 8012142:	2b09      	cmp	r3, #9
 8012144:	d94e      	bls.n	80121e4 <_vfiprintf_r+0x1c4>
 8012146:	b1b0      	cbz	r0, 8012176 <_vfiprintf_r+0x156>
 8012148:	9207      	str	r2, [sp, #28]
 801214a:	e014      	b.n	8012176 <_vfiprintf_r+0x156>
 801214c:	eba0 0308 	sub.w	r3, r0, r8
 8012150:	fa09 f303 	lsl.w	r3, r9, r3
 8012154:	4313      	orrs	r3, r2
 8012156:	9304      	str	r3, [sp, #16]
 8012158:	46a2      	mov	sl, r4
 801215a:	e7d2      	b.n	8012102 <_vfiprintf_r+0xe2>
 801215c:	9b03      	ldr	r3, [sp, #12]
 801215e:	1d19      	adds	r1, r3, #4
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	9103      	str	r1, [sp, #12]
 8012164:	2b00      	cmp	r3, #0
 8012166:	bfbb      	ittet	lt
 8012168:	425b      	neglt	r3, r3
 801216a:	f042 0202 	orrlt.w	r2, r2, #2
 801216e:	9307      	strge	r3, [sp, #28]
 8012170:	9307      	strlt	r3, [sp, #28]
 8012172:	bfb8      	it	lt
 8012174:	9204      	strlt	r2, [sp, #16]
 8012176:	7823      	ldrb	r3, [r4, #0]
 8012178:	2b2e      	cmp	r3, #46	; 0x2e
 801217a:	d10c      	bne.n	8012196 <_vfiprintf_r+0x176>
 801217c:	7863      	ldrb	r3, [r4, #1]
 801217e:	2b2a      	cmp	r3, #42	; 0x2a
 8012180:	d135      	bne.n	80121ee <_vfiprintf_r+0x1ce>
 8012182:	9b03      	ldr	r3, [sp, #12]
 8012184:	1d1a      	adds	r2, r3, #4
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	9203      	str	r2, [sp, #12]
 801218a:	2b00      	cmp	r3, #0
 801218c:	bfb8      	it	lt
 801218e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012192:	3402      	adds	r4, #2
 8012194:	9305      	str	r3, [sp, #20]
 8012196:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801227c <_vfiprintf_r+0x25c>
 801219a:	7821      	ldrb	r1, [r4, #0]
 801219c:	2203      	movs	r2, #3
 801219e:	4650      	mov	r0, sl
 80121a0:	f7ee f8a6 	bl	80002f0 <memchr>
 80121a4:	b140      	cbz	r0, 80121b8 <_vfiprintf_r+0x198>
 80121a6:	2340      	movs	r3, #64	; 0x40
 80121a8:	eba0 000a 	sub.w	r0, r0, sl
 80121ac:	fa03 f000 	lsl.w	r0, r3, r0
 80121b0:	9b04      	ldr	r3, [sp, #16]
 80121b2:	4303      	orrs	r3, r0
 80121b4:	3401      	adds	r4, #1
 80121b6:	9304      	str	r3, [sp, #16]
 80121b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121bc:	482c      	ldr	r0, [pc, #176]	; (8012270 <_vfiprintf_r+0x250>)
 80121be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80121c2:	2206      	movs	r2, #6
 80121c4:	f7ee f894 	bl	80002f0 <memchr>
 80121c8:	2800      	cmp	r0, #0
 80121ca:	d03f      	beq.n	801224c <_vfiprintf_r+0x22c>
 80121cc:	4b29      	ldr	r3, [pc, #164]	; (8012274 <_vfiprintf_r+0x254>)
 80121ce:	bb1b      	cbnz	r3, 8012218 <_vfiprintf_r+0x1f8>
 80121d0:	9b03      	ldr	r3, [sp, #12]
 80121d2:	3307      	adds	r3, #7
 80121d4:	f023 0307 	bic.w	r3, r3, #7
 80121d8:	3308      	adds	r3, #8
 80121da:	9303      	str	r3, [sp, #12]
 80121dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121de:	443b      	add	r3, r7
 80121e0:	9309      	str	r3, [sp, #36]	; 0x24
 80121e2:	e767      	b.n	80120b4 <_vfiprintf_r+0x94>
 80121e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80121e8:	460c      	mov	r4, r1
 80121ea:	2001      	movs	r0, #1
 80121ec:	e7a5      	b.n	801213a <_vfiprintf_r+0x11a>
 80121ee:	2300      	movs	r3, #0
 80121f0:	3401      	adds	r4, #1
 80121f2:	9305      	str	r3, [sp, #20]
 80121f4:	4619      	mov	r1, r3
 80121f6:	f04f 0c0a 	mov.w	ip, #10
 80121fa:	4620      	mov	r0, r4
 80121fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012200:	3a30      	subs	r2, #48	; 0x30
 8012202:	2a09      	cmp	r2, #9
 8012204:	d903      	bls.n	801220e <_vfiprintf_r+0x1ee>
 8012206:	2b00      	cmp	r3, #0
 8012208:	d0c5      	beq.n	8012196 <_vfiprintf_r+0x176>
 801220a:	9105      	str	r1, [sp, #20]
 801220c:	e7c3      	b.n	8012196 <_vfiprintf_r+0x176>
 801220e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012212:	4604      	mov	r4, r0
 8012214:	2301      	movs	r3, #1
 8012216:	e7f0      	b.n	80121fa <_vfiprintf_r+0x1da>
 8012218:	ab03      	add	r3, sp, #12
 801221a:	9300      	str	r3, [sp, #0]
 801221c:	462a      	mov	r2, r5
 801221e:	4b16      	ldr	r3, [pc, #88]	; (8012278 <_vfiprintf_r+0x258>)
 8012220:	a904      	add	r1, sp, #16
 8012222:	4630      	mov	r0, r6
 8012224:	f7fd fdd8 	bl	800fdd8 <_printf_float>
 8012228:	4607      	mov	r7, r0
 801222a:	1c78      	adds	r0, r7, #1
 801222c:	d1d6      	bne.n	80121dc <_vfiprintf_r+0x1bc>
 801222e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012230:	07d9      	lsls	r1, r3, #31
 8012232:	d405      	bmi.n	8012240 <_vfiprintf_r+0x220>
 8012234:	89ab      	ldrh	r3, [r5, #12]
 8012236:	059a      	lsls	r2, r3, #22
 8012238:	d402      	bmi.n	8012240 <_vfiprintf_r+0x220>
 801223a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801223c:	f000 fab1 	bl	80127a2 <__retarget_lock_release_recursive>
 8012240:	89ab      	ldrh	r3, [r5, #12]
 8012242:	065b      	lsls	r3, r3, #25
 8012244:	f53f af12 	bmi.w	801206c <_vfiprintf_r+0x4c>
 8012248:	9809      	ldr	r0, [sp, #36]	; 0x24
 801224a:	e711      	b.n	8012070 <_vfiprintf_r+0x50>
 801224c:	ab03      	add	r3, sp, #12
 801224e:	9300      	str	r3, [sp, #0]
 8012250:	462a      	mov	r2, r5
 8012252:	4b09      	ldr	r3, [pc, #36]	; (8012278 <_vfiprintf_r+0x258>)
 8012254:	a904      	add	r1, sp, #16
 8012256:	4630      	mov	r0, r6
 8012258:	f7fe f84a 	bl	80102f0 <_printf_i>
 801225c:	e7e4      	b.n	8012228 <_vfiprintf_r+0x208>
 801225e:	bf00      	nop
 8012260:	0801d498 	.word	0x0801d498
 8012264:	0801d4b8 	.word	0x0801d4b8
 8012268:	0801d478 	.word	0x0801d478
 801226c:	0801d464 	.word	0x0801d464
 8012270:	0801d46e 	.word	0x0801d46e
 8012274:	0800fdd9 	.word	0x0800fdd9
 8012278:	08011ffb 	.word	0x08011ffb
 801227c:	0801d46a 	.word	0x0801d46a

08012280 <_sbrk_r>:
 8012280:	b538      	push	{r3, r4, r5, lr}
 8012282:	4d06      	ldr	r5, [pc, #24]	; (801229c <_sbrk_r+0x1c>)
 8012284:	2300      	movs	r3, #0
 8012286:	4604      	mov	r4, r0
 8012288:	4608      	mov	r0, r1
 801228a:	602b      	str	r3, [r5, #0]
 801228c:	f7f3 fa06 	bl	800569c <_sbrk>
 8012290:	1c43      	adds	r3, r0, #1
 8012292:	d102      	bne.n	801229a <_sbrk_r+0x1a>
 8012294:	682b      	ldr	r3, [r5, #0]
 8012296:	b103      	cbz	r3, 801229a <_sbrk_r+0x1a>
 8012298:	6023      	str	r3, [r4, #0]
 801229a:	bd38      	pop	{r3, r4, r5, pc}
 801229c:	2400f4e4 	.word	0x2400f4e4

080122a0 <__swbuf_r>:
 80122a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122a2:	460e      	mov	r6, r1
 80122a4:	4614      	mov	r4, r2
 80122a6:	4605      	mov	r5, r0
 80122a8:	b118      	cbz	r0, 80122b2 <__swbuf_r+0x12>
 80122aa:	6983      	ldr	r3, [r0, #24]
 80122ac:	b90b      	cbnz	r3, 80122b2 <__swbuf_r+0x12>
 80122ae:	f000 f9d9 	bl	8012664 <__sinit>
 80122b2:	4b21      	ldr	r3, [pc, #132]	; (8012338 <__swbuf_r+0x98>)
 80122b4:	429c      	cmp	r4, r3
 80122b6:	d12b      	bne.n	8012310 <__swbuf_r+0x70>
 80122b8:	686c      	ldr	r4, [r5, #4]
 80122ba:	69a3      	ldr	r3, [r4, #24]
 80122bc:	60a3      	str	r3, [r4, #8]
 80122be:	89a3      	ldrh	r3, [r4, #12]
 80122c0:	071a      	lsls	r2, r3, #28
 80122c2:	d52f      	bpl.n	8012324 <__swbuf_r+0x84>
 80122c4:	6923      	ldr	r3, [r4, #16]
 80122c6:	b36b      	cbz	r3, 8012324 <__swbuf_r+0x84>
 80122c8:	6923      	ldr	r3, [r4, #16]
 80122ca:	6820      	ldr	r0, [r4, #0]
 80122cc:	1ac0      	subs	r0, r0, r3
 80122ce:	6963      	ldr	r3, [r4, #20]
 80122d0:	b2f6      	uxtb	r6, r6
 80122d2:	4283      	cmp	r3, r0
 80122d4:	4637      	mov	r7, r6
 80122d6:	dc04      	bgt.n	80122e2 <__swbuf_r+0x42>
 80122d8:	4621      	mov	r1, r4
 80122da:	4628      	mov	r0, r5
 80122dc:	f000 f92e 	bl	801253c <_fflush_r>
 80122e0:	bb30      	cbnz	r0, 8012330 <__swbuf_r+0x90>
 80122e2:	68a3      	ldr	r3, [r4, #8]
 80122e4:	3b01      	subs	r3, #1
 80122e6:	60a3      	str	r3, [r4, #8]
 80122e8:	6823      	ldr	r3, [r4, #0]
 80122ea:	1c5a      	adds	r2, r3, #1
 80122ec:	6022      	str	r2, [r4, #0]
 80122ee:	701e      	strb	r6, [r3, #0]
 80122f0:	6963      	ldr	r3, [r4, #20]
 80122f2:	3001      	adds	r0, #1
 80122f4:	4283      	cmp	r3, r0
 80122f6:	d004      	beq.n	8012302 <__swbuf_r+0x62>
 80122f8:	89a3      	ldrh	r3, [r4, #12]
 80122fa:	07db      	lsls	r3, r3, #31
 80122fc:	d506      	bpl.n	801230c <__swbuf_r+0x6c>
 80122fe:	2e0a      	cmp	r6, #10
 8012300:	d104      	bne.n	801230c <__swbuf_r+0x6c>
 8012302:	4621      	mov	r1, r4
 8012304:	4628      	mov	r0, r5
 8012306:	f000 f919 	bl	801253c <_fflush_r>
 801230a:	b988      	cbnz	r0, 8012330 <__swbuf_r+0x90>
 801230c:	4638      	mov	r0, r7
 801230e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012310:	4b0a      	ldr	r3, [pc, #40]	; (801233c <__swbuf_r+0x9c>)
 8012312:	429c      	cmp	r4, r3
 8012314:	d101      	bne.n	801231a <__swbuf_r+0x7a>
 8012316:	68ac      	ldr	r4, [r5, #8]
 8012318:	e7cf      	b.n	80122ba <__swbuf_r+0x1a>
 801231a:	4b09      	ldr	r3, [pc, #36]	; (8012340 <__swbuf_r+0xa0>)
 801231c:	429c      	cmp	r4, r3
 801231e:	bf08      	it	eq
 8012320:	68ec      	ldreq	r4, [r5, #12]
 8012322:	e7ca      	b.n	80122ba <__swbuf_r+0x1a>
 8012324:	4621      	mov	r1, r4
 8012326:	4628      	mov	r0, r5
 8012328:	f000 f80c 	bl	8012344 <__swsetup_r>
 801232c:	2800      	cmp	r0, #0
 801232e:	d0cb      	beq.n	80122c8 <__swbuf_r+0x28>
 8012330:	f04f 37ff 	mov.w	r7, #4294967295
 8012334:	e7ea      	b.n	801230c <__swbuf_r+0x6c>
 8012336:	bf00      	nop
 8012338:	0801d498 	.word	0x0801d498
 801233c:	0801d4b8 	.word	0x0801d4b8
 8012340:	0801d478 	.word	0x0801d478

08012344 <__swsetup_r>:
 8012344:	4b32      	ldr	r3, [pc, #200]	; (8012410 <__swsetup_r+0xcc>)
 8012346:	b570      	push	{r4, r5, r6, lr}
 8012348:	681d      	ldr	r5, [r3, #0]
 801234a:	4606      	mov	r6, r0
 801234c:	460c      	mov	r4, r1
 801234e:	b125      	cbz	r5, 801235a <__swsetup_r+0x16>
 8012350:	69ab      	ldr	r3, [r5, #24]
 8012352:	b913      	cbnz	r3, 801235a <__swsetup_r+0x16>
 8012354:	4628      	mov	r0, r5
 8012356:	f000 f985 	bl	8012664 <__sinit>
 801235a:	4b2e      	ldr	r3, [pc, #184]	; (8012414 <__swsetup_r+0xd0>)
 801235c:	429c      	cmp	r4, r3
 801235e:	d10f      	bne.n	8012380 <__swsetup_r+0x3c>
 8012360:	686c      	ldr	r4, [r5, #4]
 8012362:	89a3      	ldrh	r3, [r4, #12]
 8012364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012368:	0719      	lsls	r1, r3, #28
 801236a:	d42c      	bmi.n	80123c6 <__swsetup_r+0x82>
 801236c:	06dd      	lsls	r5, r3, #27
 801236e:	d411      	bmi.n	8012394 <__swsetup_r+0x50>
 8012370:	2309      	movs	r3, #9
 8012372:	6033      	str	r3, [r6, #0]
 8012374:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012378:	81a3      	strh	r3, [r4, #12]
 801237a:	f04f 30ff 	mov.w	r0, #4294967295
 801237e:	e03e      	b.n	80123fe <__swsetup_r+0xba>
 8012380:	4b25      	ldr	r3, [pc, #148]	; (8012418 <__swsetup_r+0xd4>)
 8012382:	429c      	cmp	r4, r3
 8012384:	d101      	bne.n	801238a <__swsetup_r+0x46>
 8012386:	68ac      	ldr	r4, [r5, #8]
 8012388:	e7eb      	b.n	8012362 <__swsetup_r+0x1e>
 801238a:	4b24      	ldr	r3, [pc, #144]	; (801241c <__swsetup_r+0xd8>)
 801238c:	429c      	cmp	r4, r3
 801238e:	bf08      	it	eq
 8012390:	68ec      	ldreq	r4, [r5, #12]
 8012392:	e7e6      	b.n	8012362 <__swsetup_r+0x1e>
 8012394:	0758      	lsls	r0, r3, #29
 8012396:	d512      	bpl.n	80123be <__swsetup_r+0x7a>
 8012398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801239a:	b141      	cbz	r1, 80123ae <__swsetup_r+0x6a>
 801239c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80123a0:	4299      	cmp	r1, r3
 80123a2:	d002      	beq.n	80123aa <__swsetup_r+0x66>
 80123a4:	4630      	mov	r0, r6
 80123a6:	f7ff fbd5 	bl	8011b54 <_free_r>
 80123aa:	2300      	movs	r3, #0
 80123ac:	6363      	str	r3, [r4, #52]	; 0x34
 80123ae:	89a3      	ldrh	r3, [r4, #12]
 80123b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80123b4:	81a3      	strh	r3, [r4, #12]
 80123b6:	2300      	movs	r3, #0
 80123b8:	6063      	str	r3, [r4, #4]
 80123ba:	6923      	ldr	r3, [r4, #16]
 80123bc:	6023      	str	r3, [r4, #0]
 80123be:	89a3      	ldrh	r3, [r4, #12]
 80123c0:	f043 0308 	orr.w	r3, r3, #8
 80123c4:	81a3      	strh	r3, [r4, #12]
 80123c6:	6923      	ldr	r3, [r4, #16]
 80123c8:	b94b      	cbnz	r3, 80123de <__swsetup_r+0x9a>
 80123ca:	89a3      	ldrh	r3, [r4, #12]
 80123cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80123d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80123d4:	d003      	beq.n	80123de <__swsetup_r+0x9a>
 80123d6:	4621      	mov	r1, r4
 80123d8:	4630      	mov	r0, r6
 80123da:	f000 fa09 	bl	80127f0 <__smakebuf_r>
 80123de:	89a0      	ldrh	r0, [r4, #12]
 80123e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80123e4:	f010 0301 	ands.w	r3, r0, #1
 80123e8:	d00a      	beq.n	8012400 <__swsetup_r+0xbc>
 80123ea:	2300      	movs	r3, #0
 80123ec:	60a3      	str	r3, [r4, #8]
 80123ee:	6963      	ldr	r3, [r4, #20]
 80123f0:	425b      	negs	r3, r3
 80123f2:	61a3      	str	r3, [r4, #24]
 80123f4:	6923      	ldr	r3, [r4, #16]
 80123f6:	b943      	cbnz	r3, 801240a <__swsetup_r+0xc6>
 80123f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80123fc:	d1ba      	bne.n	8012374 <__swsetup_r+0x30>
 80123fe:	bd70      	pop	{r4, r5, r6, pc}
 8012400:	0781      	lsls	r1, r0, #30
 8012402:	bf58      	it	pl
 8012404:	6963      	ldrpl	r3, [r4, #20]
 8012406:	60a3      	str	r3, [r4, #8]
 8012408:	e7f4      	b.n	80123f4 <__swsetup_r+0xb0>
 801240a:	2000      	movs	r0, #0
 801240c:	e7f7      	b.n	80123fe <__swsetup_r+0xba>
 801240e:	bf00      	nop
 8012410:	24000498 	.word	0x24000498
 8012414:	0801d498 	.word	0x0801d498
 8012418:	0801d4b8 	.word	0x0801d4b8
 801241c:	0801d478 	.word	0x0801d478

08012420 <abort>:
 8012420:	b508      	push	{r3, lr}
 8012422:	2006      	movs	r0, #6
 8012424:	f000 fab4 	bl	8012990 <raise>
 8012428:	2001      	movs	r0, #1
 801242a:	f7f3 f907 	bl	800563c <_exit>
	...

08012430 <__sflush_r>:
 8012430:	898a      	ldrh	r2, [r1, #12]
 8012432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012436:	4605      	mov	r5, r0
 8012438:	0710      	lsls	r0, r2, #28
 801243a:	460c      	mov	r4, r1
 801243c:	d458      	bmi.n	80124f0 <__sflush_r+0xc0>
 801243e:	684b      	ldr	r3, [r1, #4]
 8012440:	2b00      	cmp	r3, #0
 8012442:	dc05      	bgt.n	8012450 <__sflush_r+0x20>
 8012444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012446:	2b00      	cmp	r3, #0
 8012448:	dc02      	bgt.n	8012450 <__sflush_r+0x20>
 801244a:	2000      	movs	r0, #0
 801244c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012452:	2e00      	cmp	r6, #0
 8012454:	d0f9      	beq.n	801244a <__sflush_r+0x1a>
 8012456:	2300      	movs	r3, #0
 8012458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801245c:	682f      	ldr	r7, [r5, #0]
 801245e:	602b      	str	r3, [r5, #0]
 8012460:	d032      	beq.n	80124c8 <__sflush_r+0x98>
 8012462:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012464:	89a3      	ldrh	r3, [r4, #12]
 8012466:	075a      	lsls	r2, r3, #29
 8012468:	d505      	bpl.n	8012476 <__sflush_r+0x46>
 801246a:	6863      	ldr	r3, [r4, #4]
 801246c:	1ac0      	subs	r0, r0, r3
 801246e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012470:	b10b      	cbz	r3, 8012476 <__sflush_r+0x46>
 8012472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012474:	1ac0      	subs	r0, r0, r3
 8012476:	2300      	movs	r3, #0
 8012478:	4602      	mov	r2, r0
 801247a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801247c:	6a21      	ldr	r1, [r4, #32]
 801247e:	4628      	mov	r0, r5
 8012480:	47b0      	blx	r6
 8012482:	1c43      	adds	r3, r0, #1
 8012484:	89a3      	ldrh	r3, [r4, #12]
 8012486:	d106      	bne.n	8012496 <__sflush_r+0x66>
 8012488:	6829      	ldr	r1, [r5, #0]
 801248a:	291d      	cmp	r1, #29
 801248c:	d82c      	bhi.n	80124e8 <__sflush_r+0xb8>
 801248e:	4a2a      	ldr	r2, [pc, #168]	; (8012538 <__sflush_r+0x108>)
 8012490:	40ca      	lsrs	r2, r1
 8012492:	07d6      	lsls	r6, r2, #31
 8012494:	d528      	bpl.n	80124e8 <__sflush_r+0xb8>
 8012496:	2200      	movs	r2, #0
 8012498:	6062      	str	r2, [r4, #4]
 801249a:	04d9      	lsls	r1, r3, #19
 801249c:	6922      	ldr	r2, [r4, #16]
 801249e:	6022      	str	r2, [r4, #0]
 80124a0:	d504      	bpl.n	80124ac <__sflush_r+0x7c>
 80124a2:	1c42      	adds	r2, r0, #1
 80124a4:	d101      	bne.n	80124aa <__sflush_r+0x7a>
 80124a6:	682b      	ldr	r3, [r5, #0]
 80124a8:	b903      	cbnz	r3, 80124ac <__sflush_r+0x7c>
 80124aa:	6560      	str	r0, [r4, #84]	; 0x54
 80124ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80124ae:	602f      	str	r7, [r5, #0]
 80124b0:	2900      	cmp	r1, #0
 80124b2:	d0ca      	beq.n	801244a <__sflush_r+0x1a>
 80124b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80124b8:	4299      	cmp	r1, r3
 80124ba:	d002      	beq.n	80124c2 <__sflush_r+0x92>
 80124bc:	4628      	mov	r0, r5
 80124be:	f7ff fb49 	bl	8011b54 <_free_r>
 80124c2:	2000      	movs	r0, #0
 80124c4:	6360      	str	r0, [r4, #52]	; 0x34
 80124c6:	e7c1      	b.n	801244c <__sflush_r+0x1c>
 80124c8:	6a21      	ldr	r1, [r4, #32]
 80124ca:	2301      	movs	r3, #1
 80124cc:	4628      	mov	r0, r5
 80124ce:	47b0      	blx	r6
 80124d0:	1c41      	adds	r1, r0, #1
 80124d2:	d1c7      	bne.n	8012464 <__sflush_r+0x34>
 80124d4:	682b      	ldr	r3, [r5, #0]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d0c4      	beq.n	8012464 <__sflush_r+0x34>
 80124da:	2b1d      	cmp	r3, #29
 80124dc:	d001      	beq.n	80124e2 <__sflush_r+0xb2>
 80124de:	2b16      	cmp	r3, #22
 80124e0:	d101      	bne.n	80124e6 <__sflush_r+0xb6>
 80124e2:	602f      	str	r7, [r5, #0]
 80124e4:	e7b1      	b.n	801244a <__sflush_r+0x1a>
 80124e6:	89a3      	ldrh	r3, [r4, #12]
 80124e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124ec:	81a3      	strh	r3, [r4, #12]
 80124ee:	e7ad      	b.n	801244c <__sflush_r+0x1c>
 80124f0:	690f      	ldr	r7, [r1, #16]
 80124f2:	2f00      	cmp	r7, #0
 80124f4:	d0a9      	beq.n	801244a <__sflush_r+0x1a>
 80124f6:	0793      	lsls	r3, r2, #30
 80124f8:	680e      	ldr	r6, [r1, #0]
 80124fa:	bf08      	it	eq
 80124fc:	694b      	ldreq	r3, [r1, #20]
 80124fe:	600f      	str	r7, [r1, #0]
 8012500:	bf18      	it	ne
 8012502:	2300      	movne	r3, #0
 8012504:	eba6 0807 	sub.w	r8, r6, r7
 8012508:	608b      	str	r3, [r1, #8]
 801250a:	f1b8 0f00 	cmp.w	r8, #0
 801250e:	dd9c      	ble.n	801244a <__sflush_r+0x1a>
 8012510:	6a21      	ldr	r1, [r4, #32]
 8012512:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012514:	4643      	mov	r3, r8
 8012516:	463a      	mov	r2, r7
 8012518:	4628      	mov	r0, r5
 801251a:	47b0      	blx	r6
 801251c:	2800      	cmp	r0, #0
 801251e:	dc06      	bgt.n	801252e <__sflush_r+0xfe>
 8012520:	89a3      	ldrh	r3, [r4, #12]
 8012522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012526:	81a3      	strh	r3, [r4, #12]
 8012528:	f04f 30ff 	mov.w	r0, #4294967295
 801252c:	e78e      	b.n	801244c <__sflush_r+0x1c>
 801252e:	4407      	add	r7, r0
 8012530:	eba8 0800 	sub.w	r8, r8, r0
 8012534:	e7e9      	b.n	801250a <__sflush_r+0xda>
 8012536:	bf00      	nop
 8012538:	20400001 	.word	0x20400001

0801253c <_fflush_r>:
 801253c:	b538      	push	{r3, r4, r5, lr}
 801253e:	690b      	ldr	r3, [r1, #16]
 8012540:	4605      	mov	r5, r0
 8012542:	460c      	mov	r4, r1
 8012544:	b913      	cbnz	r3, 801254c <_fflush_r+0x10>
 8012546:	2500      	movs	r5, #0
 8012548:	4628      	mov	r0, r5
 801254a:	bd38      	pop	{r3, r4, r5, pc}
 801254c:	b118      	cbz	r0, 8012556 <_fflush_r+0x1a>
 801254e:	6983      	ldr	r3, [r0, #24]
 8012550:	b90b      	cbnz	r3, 8012556 <_fflush_r+0x1a>
 8012552:	f000 f887 	bl	8012664 <__sinit>
 8012556:	4b14      	ldr	r3, [pc, #80]	; (80125a8 <_fflush_r+0x6c>)
 8012558:	429c      	cmp	r4, r3
 801255a:	d11b      	bne.n	8012594 <_fflush_r+0x58>
 801255c:	686c      	ldr	r4, [r5, #4]
 801255e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d0ef      	beq.n	8012546 <_fflush_r+0xa>
 8012566:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012568:	07d0      	lsls	r0, r2, #31
 801256a:	d404      	bmi.n	8012576 <_fflush_r+0x3a>
 801256c:	0599      	lsls	r1, r3, #22
 801256e:	d402      	bmi.n	8012576 <_fflush_r+0x3a>
 8012570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012572:	f000 f915 	bl	80127a0 <__retarget_lock_acquire_recursive>
 8012576:	4628      	mov	r0, r5
 8012578:	4621      	mov	r1, r4
 801257a:	f7ff ff59 	bl	8012430 <__sflush_r>
 801257e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012580:	07da      	lsls	r2, r3, #31
 8012582:	4605      	mov	r5, r0
 8012584:	d4e0      	bmi.n	8012548 <_fflush_r+0xc>
 8012586:	89a3      	ldrh	r3, [r4, #12]
 8012588:	059b      	lsls	r3, r3, #22
 801258a:	d4dd      	bmi.n	8012548 <_fflush_r+0xc>
 801258c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801258e:	f000 f908 	bl	80127a2 <__retarget_lock_release_recursive>
 8012592:	e7d9      	b.n	8012548 <_fflush_r+0xc>
 8012594:	4b05      	ldr	r3, [pc, #20]	; (80125ac <_fflush_r+0x70>)
 8012596:	429c      	cmp	r4, r3
 8012598:	d101      	bne.n	801259e <_fflush_r+0x62>
 801259a:	68ac      	ldr	r4, [r5, #8]
 801259c:	e7df      	b.n	801255e <_fflush_r+0x22>
 801259e:	4b04      	ldr	r3, [pc, #16]	; (80125b0 <_fflush_r+0x74>)
 80125a0:	429c      	cmp	r4, r3
 80125a2:	bf08      	it	eq
 80125a4:	68ec      	ldreq	r4, [r5, #12]
 80125a6:	e7da      	b.n	801255e <_fflush_r+0x22>
 80125a8:	0801d498 	.word	0x0801d498
 80125ac:	0801d4b8 	.word	0x0801d4b8
 80125b0:	0801d478 	.word	0x0801d478

080125b4 <std>:
 80125b4:	2300      	movs	r3, #0
 80125b6:	b510      	push	{r4, lr}
 80125b8:	4604      	mov	r4, r0
 80125ba:	e9c0 3300 	strd	r3, r3, [r0]
 80125be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80125c2:	6083      	str	r3, [r0, #8]
 80125c4:	8181      	strh	r1, [r0, #12]
 80125c6:	6643      	str	r3, [r0, #100]	; 0x64
 80125c8:	81c2      	strh	r2, [r0, #14]
 80125ca:	6183      	str	r3, [r0, #24]
 80125cc:	4619      	mov	r1, r3
 80125ce:	2208      	movs	r2, #8
 80125d0:	305c      	adds	r0, #92	; 0x5c
 80125d2:	f7fd fb69 	bl	800fca8 <memset>
 80125d6:	4b05      	ldr	r3, [pc, #20]	; (80125ec <std+0x38>)
 80125d8:	6263      	str	r3, [r4, #36]	; 0x24
 80125da:	4b05      	ldr	r3, [pc, #20]	; (80125f0 <std+0x3c>)
 80125dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80125de:	4b05      	ldr	r3, [pc, #20]	; (80125f4 <std+0x40>)
 80125e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80125e2:	4b05      	ldr	r3, [pc, #20]	; (80125f8 <std+0x44>)
 80125e4:	6224      	str	r4, [r4, #32]
 80125e6:	6323      	str	r3, [r4, #48]	; 0x30
 80125e8:	bd10      	pop	{r4, pc}
 80125ea:	bf00      	nop
 80125ec:	080129c9 	.word	0x080129c9
 80125f0:	080129eb 	.word	0x080129eb
 80125f4:	08012a23 	.word	0x08012a23
 80125f8:	08012a47 	.word	0x08012a47

080125fc <_cleanup_r>:
 80125fc:	4901      	ldr	r1, [pc, #4]	; (8012604 <_cleanup_r+0x8>)
 80125fe:	f000 b8af 	b.w	8012760 <_fwalk_reent>
 8012602:	bf00      	nop
 8012604:	0801253d 	.word	0x0801253d

08012608 <__sfmoreglue>:
 8012608:	b570      	push	{r4, r5, r6, lr}
 801260a:	2268      	movs	r2, #104	; 0x68
 801260c:	1e4d      	subs	r5, r1, #1
 801260e:	4355      	muls	r5, r2
 8012610:	460e      	mov	r6, r1
 8012612:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012616:	f7ff fb09 	bl	8011c2c <_malloc_r>
 801261a:	4604      	mov	r4, r0
 801261c:	b140      	cbz	r0, 8012630 <__sfmoreglue+0x28>
 801261e:	2100      	movs	r1, #0
 8012620:	e9c0 1600 	strd	r1, r6, [r0]
 8012624:	300c      	adds	r0, #12
 8012626:	60a0      	str	r0, [r4, #8]
 8012628:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801262c:	f7fd fb3c 	bl	800fca8 <memset>
 8012630:	4620      	mov	r0, r4
 8012632:	bd70      	pop	{r4, r5, r6, pc}

08012634 <__sfp_lock_acquire>:
 8012634:	4801      	ldr	r0, [pc, #4]	; (801263c <__sfp_lock_acquire+0x8>)
 8012636:	f000 b8b3 	b.w	80127a0 <__retarget_lock_acquire_recursive>
 801263a:	bf00      	nop
 801263c:	2400f4e1 	.word	0x2400f4e1

08012640 <__sfp_lock_release>:
 8012640:	4801      	ldr	r0, [pc, #4]	; (8012648 <__sfp_lock_release+0x8>)
 8012642:	f000 b8ae 	b.w	80127a2 <__retarget_lock_release_recursive>
 8012646:	bf00      	nop
 8012648:	2400f4e1 	.word	0x2400f4e1

0801264c <__sinit_lock_acquire>:
 801264c:	4801      	ldr	r0, [pc, #4]	; (8012654 <__sinit_lock_acquire+0x8>)
 801264e:	f000 b8a7 	b.w	80127a0 <__retarget_lock_acquire_recursive>
 8012652:	bf00      	nop
 8012654:	2400f4e2 	.word	0x2400f4e2

08012658 <__sinit_lock_release>:
 8012658:	4801      	ldr	r0, [pc, #4]	; (8012660 <__sinit_lock_release+0x8>)
 801265a:	f000 b8a2 	b.w	80127a2 <__retarget_lock_release_recursive>
 801265e:	bf00      	nop
 8012660:	2400f4e2 	.word	0x2400f4e2

08012664 <__sinit>:
 8012664:	b510      	push	{r4, lr}
 8012666:	4604      	mov	r4, r0
 8012668:	f7ff fff0 	bl	801264c <__sinit_lock_acquire>
 801266c:	69a3      	ldr	r3, [r4, #24]
 801266e:	b11b      	cbz	r3, 8012678 <__sinit+0x14>
 8012670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012674:	f7ff bff0 	b.w	8012658 <__sinit_lock_release>
 8012678:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801267c:	6523      	str	r3, [r4, #80]	; 0x50
 801267e:	4b13      	ldr	r3, [pc, #76]	; (80126cc <__sinit+0x68>)
 8012680:	4a13      	ldr	r2, [pc, #76]	; (80126d0 <__sinit+0x6c>)
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	62a2      	str	r2, [r4, #40]	; 0x28
 8012686:	42a3      	cmp	r3, r4
 8012688:	bf04      	itt	eq
 801268a:	2301      	moveq	r3, #1
 801268c:	61a3      	streq	r3, [r4, #24]
 801268e:	4620      	mov	r0, r4
 8012690:	f000 f820 	bl	80126d4 <__sfp>
 8012694:	6060      	str	r0, [r4, #4]
 8012696:	4620      	mov	r0, r4
 8012698:	f000 f81c 	bl	80126d4 <__sfp>
 801269c:	60a0      	str	r0, [r4, #8]
 801269e:	4620      	mov	r0, r4
 80126a0:	f000 f818 	bl	80126d4 <__sfp>
 80126a4:	2200      	movs	r2, #0
 80126a6:	60e0      	str	r0, [r4, #12]
 80126a8:	2104      	movs	r1, #4
 80126aa:	6860      	ldr	r0, [r4, #4]
 80126ac:	f7ff ff82 	bl	80125b4 <std>
 80126b0:	68a0      	ldr	r0, [r4, #8]
 80126b2:	2201      	movs	r2, #1
 80126b4:	2109      	movs	r1, #9
 80126b6:	f7ff ff7d 	bl	80125b4 <std>
 80126ba:	68e0      	ldr	r0, [r4, #12]
 80126bc:	2202      	movs	r2, #2
 80126be:	2112      	movs	r1, #18
 80126c0:	f7ff ff78 	bl	80125b4 <std>
 80126c4:	2301      	movs	r3, #1
 80126c6:	61a3      	str	r3, [r4, #24]
 80126c8:	e7d2      	b.n	8012670 <__sinit+0xc>
 80126ca:	bf00      	nop
 80126cc:	0801d1a4 	.word	0x0801d1a4
 80126d0:	080125fd 	.word	0x080125fd

080126d4 <__sfp>:
 80126d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126d6:	4607      	mov	r7, r0
 80126d8:	f7ff ffac 	bl	8012634 <__sfp_lock_acquire>
 80126dc:	4b1e      	ldr	r3, [pc, #120]	; (8012758 <__sfp+0x84>)
 80126de:	681e      	ldr	r6, [r3, #0]
 80126e0:	69b3      	ldr	r3, [r6, #24]
 80126e2:	b913      	cbnz	r3, 80126ea <__sfp+0x16>
 80126e4:	4630      	mov	r0, r6
 80126e6:	f7ff ffbd 	bl	8012664 <__sinit>
 80126ea:	3648      	adds	r6, #72	; 0x48
 80126ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80126f0:	3b01      	subs	r3, #1
 80126f2:	d503      	bpl.n	80126fc <__sfp+0x28>
 80126f4:	6833      	ldr	r3, [r6, #0]
 80126f6:	b30b      	cbz	r3, 801273c <__sfp+0x68>
 80126f8:	6836      	ldr	r6, [r6, #0]
 80126fa:	e7f7      	b.n	80126ec <__sfp+0x18>
 80126fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012700:	b9d5      	cbnz	r5, 8012738 <__sfp+0x64>
 8012702:	4b16      	ldr	r3, [pc, #88]	; (801275c <__sfp+0x88>)
 8012704:	60e3      	str	r3, [r4, #12]
 8012706:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801270a:	6665      	str	r5, [r4, #100]	; 0x64
 801270c:	f000 f847 	bl	801279e <__retarget_lock_init_recursive>
 8012710:	f7ff ff96 	bl	8012640 <__sfp_lock_release>
 8012714:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012718:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801271c:	6025      	str	r5, [r4, #0]
 801271e:	61a5      	str	r5, [r4, #24]
 8012720:	2208      	movs	r2, #8
 8012722:	4629      	mov	r1, r5
 8012724:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012728:	f7fd fabe 	bl	800fca8 <memset>
 801272c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012730:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012734:	4620      	mov	r0, r4
 8012736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012738:	3468      	adds	r4, #104	; 0x68
 801273a:	e7d9      	b.n	80126f0 <__sfp+0x1c>
 801273c:	2104      	movs	r1, #4
 801273e:	4638      	mov	r0, r7
 8012740:	f7ff ff62 	bl	8012608 <__sfmoreglue>
 8012744:	4604      	mov	r4, r0
 8012746:	6030      	str	r0, [r6, #0]
 8012748:	2800      	cmp	r0, #0
 801274a:	d1d5      	bne.n	80126f8 <__sfp+0x24>
 801274c:	f7ff ff78 	bl	8012640 <__sfp_lock_release>
 8012750:	230c      	movs	r3, #12
 8012752:	603b      	str	r3, [r7, #0]
 8012754:	e7ee      	b.n	8012734 <__sfp+0x60>
 8012756:	bf00      	nop
 8012758:	0801d1a4 	.word	0x0801d1a4
 801275c:	ffff0001 	.word	0xffff0001

08012760 <_fwalk_reent>:
 8012760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012764:	4606      	mov	r6, r0
 8012766:	4688      	mov	r8, r1
 8012768:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801276c:	2700      	movs	r7, #0
 801276e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012772:	f1b9 0901 	subs.w	r9, r9, #1
 8012776:	d505      	bpl.n	8012784 <_fwalk_reent+0x24>
 8012778:	6824      	ldr	r4, [r4, #0]
 801277a:	2c00      	cmp	r4, #0
 801277c:	d1f7      	bne.n	801276e <_fwalk_reent+0xe>
 801277e:	4638      	mov	r0, r7
 8012780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012784:	89ab      	ldrh	r3, [r5, #12]
 8012786:	2b01      	cmp	r3, #1
 8012788:	d907      	bls.n	801279a <_fwalk_reent+0x3a>
 801278a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801278e:	3301      	adds	r3, #1
 8012790:	d003      	beq.n	801279a <_fwalk_reent+0x3a>
 8012792:	4629      	mov	r1, r5
 8012794:	4630      	mov	r0, r6
 8012796:	47c0      	blx	r8
 8012798:	4307      	orrs	r7, r0
 801279a:	3568      	adds	r5, #104	; 0x68
 801279c:	e7e9      	b.n	8012772 <_fwalk_reent+0x12>

0801279e <__retarget_lock_init_recursive>:
 801279e:	4770      	bx	lr

080127a0 <__retarget_lock_acquire_recursive>:
 80127a0:	4770      	bx	lr

080127a2 <__retarget_lock_release_recursive>:
 80127a2:	4770      	bx	lr

080127a4 <__swhatbuf_r>:
 80127a4:	b570      	push	{r4, r5, r6, lr}
 80127a6:	460e      	mov	r6, r1
 80127a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127ac:	2900      	cmp	r1, #0
 80127ae:	b096      	sub	sp, #88	; 0x58
 80127b0:	4614      	mov	r4, r2
 80127b2:	461d      	mov	r5, r3
 80127b4:	da08      	bge.n	80127c8 <__swhatbuf_r+0x24>
 80127b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80127ba:	2200      	movs	r2, #0
 80127bc:	602a      	str	r2, [r5, #0]
 80127be:	061a      	lsls	r2, r3, #24
 80127c0:	d410      	bmi.n	80127e4 <__swhatbuf_r+0x40>
 80127c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80127c6:	e00e      	b.n	80127e6 <__swhatbuf_r+0x42>
 80127c8:	466a      	mov	r2, sp
 80127ca:	f000 f96f 	bl	8012aac <_fstat_r>
 80127ce:	2800      	cmp	r0, #0
 80127d0:	dbf1      	blt.n	80127b6 <__swhatbuf_r+0x12>
 80127d2:	9a01      	ldr	r2, [sp, #4]
 80127d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80127d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80127dc:	425a      	negs	r2, r3
 80127de:	415a      	adcs	r2, r3
 80127e0:	602a      	str	r2, [r5, #0]
 80127e2:	e7ee      	b.n	80127c2 <__swhatbuf_r+0x1e>
 80127e4:	2340      	movs	r3, #64	; 0x40
 80127e6:	2000      	movs	r0, #0
 80127e8:	6023      	str	r3, [r4, #0]
 80127ea:	b016      	add	sp, #88	; 0x58
 80127ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080127f0 <__smakebuf_r>:
 80127f0:	898b      	ldrh	r3, [r1, #12]
 80127f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80127f4:	079d      	lsls	r5, r3, #30
 80127f6:	4606      	mov	r6, r0
 80127f8:	460c      	mov	r4, r1
 80127fa:	d507      	bpl.n	801280c <__smakebuf_r+0x1c>
 80127fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012800:	6023      	str	r3, [r4, #0]
 8012802:	6123      	str	r3, [r4, #16]
 8012804:	2301      	movs	r3, #1
 8012806:	6163      	str	r3, [r4, #20]
 8012808:	b002      	add	sp, #8
 801280a:	bd70      	pop	{r4, r5, r6, pc}
 801280c:	ab01      	add	r3, sp, #4
 801280e:	466a      	mov	r2, sp
 8012810:	f7ff ffc8 	bl	80127a4 <__swhatbuf_r>
 8012814:	9900      	ldr	r1, [sp, #0]
 8012816:	4605      	mov	r5, r0
 8012818:	4630      	mov	r0, r6
 801281a:	f7ff fa07 	bl	8011c2c <_malloc_r>
 801281e:	b948      	cbnz	r0, 8012834 <__smakebuf_r+0x44>
 8012820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012824:	059a      	lsls	r2, r3, #22
 8012826:	d4ef      	bmi.n	8012808 <__smakebuf_r+0x18>
 8012828:	f023 0303 	bic.w	r3, r3, #3
 801282c:	f043 0302 	orr.w	r3, r3, #2
 8012830:	81a3      	strh	r3, [r4, #12]
 8012832:	e7e3      	b.n	80127fc <__smakebuf_r+0xc>
 8012834:	4b0d      	ldr	r3, [pc, #52]	; (801286c <__smakebuf_r+0x7c>)
 8012836:	62b3      	str	r3, [r6, #40]	; 0x28
 8012838:	89a3      	ldrh	r3, [r4, #12]
 801283a:	6020      	str	r0, [r4, #0]
 801283c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012840:	81a3      	strh	r3, [r4, #12]
 8012842:	9b00      	ldr	r3, [sp, #0]
 8012844:	6163      	str	r3, [r4, #20]
 8012846:	9b01      	ldr	r3, [sp, #4]
 8012848:	6120      	str	r0, [r4, #16]
 801284a:	b15b      	cbz	r3, 8012864 <__smakebuf_r+0x74>
 801284c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012850:	4630      	mov	r0, r6
 8012852:	f000 f93d 	bl	8012ad0 <_isatty_r>
 8012856:	b128      	cbz	r0, 8012864 <__smakebuf_r+0x74>
 8012858:	89a3      	ldrh	r3, [r4, #12]
 801285a:	f023 0303 	bic.w	r3, r3, #3
 801285e:	f043 0301 	orr.w	r3, r3, #1
 8012862:	81a3      	strh	r3, [r4, #12]
 8012864:	89a0      	ldrh	r0, [r4, #12]
 8012866:	4305      	orrs	r5, r0
 8012868:	81a5      	strh	r5, [r4, #12]
 801286a:	e7cd      	b.n	8012808 <__smakebuf_r+0x18>
 801286c:	080125fd 	.word	0x080125fd

08012870 <__ascii_mbtowc>:
 8012870:	b082      	sub	sp, #8
 8012872:	b901      	cbnz	r1, 8012876 <__ascii_mbtowc+0x6>
 8012874:	a901      	add	r1, sp, #4
 8012876:	b142      	cbz	r2, 801288a <__ascii_mbtowc+0x1a>
 8012878:	b14b      	cbz	r3, 801288e <__ascii_mbtowc+0x1e>
 801287a:	7813      	ldrb	r3, [r2, #0]
 801287c:	600b      	str	r3, [r1, #0]
 801287e:	7812      	ldrb	r2, [r2, #0]
 8012880:	1e10      	subs	r0, r2, #0
 8012882:	bf18      	it	ne
 8012884:	2001      	movne	r0, #1
 8012886:	b002      	add	sp, #8
 8012888:	4770      	bx	lr
 801288a:	4610      	mov	r0, r2
 801288c:	e7fb      	b.n	8012886 <__ascii_mbtowc+0x16>
 801288e:	f06f 0001 	mvn.w	r0, #1
 8012892:	e7f8      	b.n	8012886 <__ascii_mbtowc+0x16>

08012894 <memmove>:
 8012894:	4288      	cmp	r0, r1
 8012896:	b510      	push	{r4, lr}
 8012898:	eb01 0402 	add.w	r4, r1, r2
 801289c:	d902      	bls.n	80128a4 <memmove+0x10>
 801289e:	4284      	cmp	r4, r0
 80128a0:	4623      	mov	r3, r4
 80128a2:	d807      	bhi.n	80128b4 <memmove+0x20>
 80128a4:	1e43      	subs	r3, r0, #1
 80128a6:	42a1      	cmp	r1, r4
 80128a8:	d008      	beq.n	80128bc <memmove+0x28>
 80128aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80128ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80128b2:	e7f8      	b.n	80128a6 <memmove+0x12>
 80128b4:	4402      	add	r2, r0
 80128b6:	4601      	mov	r1, r0
 80128b8:	428a      	cmp	r2, r1
 80128ba:	d100      	bne.n	80128be <memmove+0x2a>
 80128bc:	bd10      	pop	{r4, pc}
 80128be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80128c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80128c6:	e7f7      	b.n	80128b8 <memmove+0x24>

080128c8 <__malloc_lock>:
 80128c8:	4801      	ldr	r0, [pc, #4]	; (80128d0 <__malloc_lock+0x8>)
 80128ca:	f7ff bf69 	b.w	80127a0 <__retarget_lock_acquire_recursive>
 80128ce:	bf00      	nop
 80128d0:	2400f4e0 	.word	0x2400f4e0

080128d4 <__malloc_unlock>:
 80128d4:	4801      	ldr	r0, [pc, #4]	; (80128dc <__malloc_unlock+0x8>)
 80128d6:	f7ff bf64 	b.w	80127a2 <__retarget_lock_release_recursive>
 80128da:	bf00      	nop
 80128dc:	2400f4e0 	.word	0x2400f4e0

080128e0 <_realloc_r>:
 80128e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128e4:	4680      	mov	r8, r0
 80128e6:	4614      	mov	r4, r2
 80128e8:	460e      	mov	r6, r1
 80128ea:	b921      	cbnz	r1, 80128f6 <_realloc_r+0x16>
 80128ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128f0:	4611      	mov	r1, r2
 80128f2:	f7ff b99b 	b.w	8011c2c <_malloc_r>
 80128f6:	b92a      	cbnz	r2, 8012904 <_realloc_r+0x24>
 80128f8:	f7ff f92c 	bl	8011b54 <_free_r>
 80128fc:	4625      	mov	r5, r4
 80128fe:	4628      	mov	r0, r5
 8012900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012904:	f000 f906 	bl	8012b14 <_malloc_usable_size_r>
 8012908:	4284      	cmp	r4, r0
 801290a:	4607      	mov	r7, r0
 801290c:	d802      	bhi.n	8012914 <_realloc_r+0x34>
 801290e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012912:	d812      	bhi.n	801293a <_realloc_r+0x5a>
 8012914:	4621      	mov	r1, r4
 8012916:	4640      	mov	r0, r8
 8012918:	f7ff f988 	bl	8011c2c <_malloc_r>
 801291c:	4605      	mov	r5, r0
 801291e:	2800      	cmp	r0, #0
 8012920:	d0ed      	beq.n	80128fe <_realloc_r+0x1e>
 8012922:	42bc      	cmp	r4, r7
 8012924:	4622      	mov	r2, r4
 8012926:	4631      	mov	r1, r6
 8012928:	bf28      	it	cs
 801292a:	463a      	movcs	r2, r7
 801292c:	f7fd f9ae 	bl	800fc8c <memcpy>
 8012930:	4631      	mov	r1, r6
 8012932:	4640      	mov	r0, r8
 8012934:	f7ff f90e 	bl	8011b54 <_free_r>
 8012938:	e7e1      	b.n	80128fe <_realloc_r+0x1e>
 801293a:	4635      	mov	r5, r6
 801293c:	e7df      	b.n	80128fe <_realloc_r+0x1e>

0801293e <_raise_r>:
 801293e:	291f      	cmp	r1, #31
 8012940:	b538      	push	{r3, r4, r5, lr}
 8012942:	4604      	mov	r4, r0
 8012944:	460d      	mov	r5, r1
 8012946:	d904      	bls.n	8012952 <_raise_r+0x14>
 8012948:	2316      	movs	r3, #22
 801294a:	6003      	str	r3, [r0, #0]
 801294c:	f04f 30ff 	mov.w	r0, #4294967295
 8012950:	bd38      	pop	{r3, r4, r5, pc}
 8012952:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012954:	b112      	cbz	r2, 801295c <_raise_r+0x1e>
 8012956:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801295a:	b94b      	cbnz	r3, 8012970 <_raise_r+0x32>
 801295c:	4620      	mov	r0, r4
 801295e:	f000 f831 	bl	80129c4 <_getpid_r>
 8012962:	462a      	mov	r2, r5
 8012964:	4601      	mov	r1, r0
 8012966:	4620      	mov	r0, r4
 8012968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801296c:	f000 b818 	b.w	80129a0 <_kill_r>
 8012970:	2b01      	cmp	r3, #1
 8012972:	d00a      	beq.n	801298a <_raise_r+0x4c>
 8012974:	1c59      	adds	r1, r3, #1
 8012976:	d103      	bne.n	8012980 <_raise_r+0x42>
 8012978:	2316      	movs	r3, #22
 801297a:	6003      	str	r3, [r0, #0]
 801297c:	2001      	movs	r0, #1
 801297e:	e7e7      	b.n	8012950 <_raise_r+0x12>
 8012980:	2400      	movs	r4, #0
 8012982:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012986:	4628      	mov	r0, r5
 8012988:	4798      	blx	r3
 801298a:	2000      	movs	r0, #0
 801298c:	e7e0      	b.n	8012950 <_raise_r+0x12>
	...

08012990 <raise>:
 8012990:	4b02      	ldr	r3, [pc, #8]	; (801299c <raise+0xc>)
 8012992:	4601      	mov	r1, r0
 8012994:	6818      	ldr	r0, [r3, #0]
 8012996:	f7ff bfd2 	b.w	801293e <_raise_r>
 801299a:	bf00      	nop
 801299c:	24000498 	.word	0x24000498

080129a0 <_kill_r>:
 80129a0:	b538      	push	{r3, r4, r5, lr}
 80129a2:	4d07      	ldr	r5, [pc, #28]	; (80129c0 <_kill_r+0x20>)
 80129a4:	2300      	movs	r3, #0
 80129a6:	4604      	mov	r4, r0
 80129a8:	4608      	mov	r0, r1
 80129aa:	4611      	mov	r1, r2
 80129ac:	602b      	str	r3, [r5, #0]
 80129ae:	f7f2 fe3b 	bl	8005628 <_kill>
 80129b2:	1c43      	adds	r3, r0, #1
 80129b4:	d102      	bne.n	80129bc <_kill_r+0x1c>
 80129b6:	682b      	ldr	r3, [r5, #0]
 80129b8:	b103      	cbz	r3, 80129bc <_kill_r+0x1c>
 80129ba:	6023      	str	r3, [r4, #0]
 80129bc:	bd38      	pop	{r3, r4, r5, pc}
 80129be:	bf00      	nop
 80129c0:	2400f4e4 	.word	0x2400f4e4

080129c4 <_getpid_r>:
 80129c4:	f7f2 be2e 	b.w	8005624 <_getpid>

080129c8 <__sread>:
 80129c8:	b510      	push	{r4, lr}
 80129ca:	460c      	mov	r4, r1
 80129cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129d0:	f000 f8a8 	bl	8012b24 <_read_r>
 80129d4:	2800      	cmp	r0, #0
 80129d6:	bfab      	itete	ge
 80129d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80129da:	89a3      	ldrhlt	r3, [r4, #12]
 80129dc:	181b      	addge	r3, r3, r0
 80129de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80129e2:	bfac      	ite	ge
 80129e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80129e6:	81a3      	strhlt	r3, [r4, #12]
 80129e8:	bd10      	pop	{r4, pc}

080129ea <__swrite>:
 80129ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129ee:	461f      	mov	r7, r3
 80129f0:	898b      	ldrh	r3, [r1, #12]
 80129f2:	05db      	lsls	r3, r3, #23
 80129f4:	4605      	mov	r5, r0
 80129f6:	460c      	mov	r4, r1
 80129f8:	4616      	mov	r6, r2
 80129fa:	d505      	bpl.n	8012a08 <__swrite+0x1e>
 80129fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a00:	2302      	movs	r3, #2
 8012a02:	2200      	movs	r2, #0
 8012a04:	f000 f874 	bl	8012af0 <_lseek_r>
 8012a08:	89a3      	ldrh	r3, [r4, #12]
 8012a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a12:	81a3      	strh	r3, [r4, #12]
 8012a14:	4632      	mov	r2, r6
 8012a16:	463b      	mov	r3, r7
 8012a18:	4628      	mov	r0, r5
 8012a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a1e:	f000 b823 	b.w	8012a68 <_write_r>

08012a22 <__sseek>:
 8012a22:	b510      	push	{r4, lr}
 8012a24:	460c      	mov	r4, r1
 8012a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a2a:	f000 f861 	bl	8012af0 <_lseek_r>
 8012a2e:	1c43      	adds	r3, r0, #1
 8012a30:	89a3      	ldrh	r3, [r4, #12]
 8012a32:	bf15      	itete	ne
 8012a34:	6560      	strne	r0, [r4, #84]	; 0x54
 8012a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012a3e:	81a3      	strheq	r3, [r4, #12]
 8012a40:	bf18      	it	ne
 8012a42:	81a3      	strhne	r3, [r4, #12]
 8012a44:	bd10      	pop	{r4, pc}

08012a46 <__sclose>:
 8012a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a4a:	f000 b81f 	b.w	8012a8c <_close_r>

08012a4e <__ascii_wctomb>:
 8012a4e:	b149      	cbz	r1, 8012a64 <__ascii_wctomb+0x16>
 8012a50:	2aff      	cmp	r2, #255	; 0xff
 8012a52:	bf85      	ittet	hi
 8012a54:	238a      	movhi	r3, #138	; 0x8a
 8012a56:	6003      	strhi	r3, [r0, #0]
 8012a58:	700a      	strbls	r2, [r1, #0]
 8012a5a:	f04f 30ff 	movhi.w	r0, #4294967295
 8012a5e:	bf98      	it	ls
 8012a60:	2001      	movls	r0, #1
 8012a62:	4770      	bx	lr
 8012a64:	4608      	mov	r0, r1
 8012a66:	4770      	bx	lr

08012a68 <_write_r>:
 8012a68:	b538      	push	{r3, r4, r5, lr}
 8012a6a:	4d07      	ldr	r5, [pc, #28]	; (8012a88 <_write_r+0x20>)
 8012a6c:	4604      	mov	r4, r0
 8012a6e:	4608      	mov	r0, r1
 8012a70:	4611      	mov	r1, r2
 8012a72:	2200      	movs	r2, #0
 8012a74:	602a      	str	r2, [r5, #0]
 8012a76:	461a      	mov	r2, r3
 8012a78:	f7f2 fdf4 	bl	8005664 <_write>
 8012a7c:	1c43      	adds	r3, r0, #1
 8012a7e:	d102      	bne.n	8012a86 <_write_r+0x1e>
 8012a80:	682b      	ldr	r3, [r5, #0]
 8012a82:	b103      	cbz	r3, 8012a86 <_write_r+0x1e>
 8012a84:	6023      	str	r3, [r4, #0]
 8012a86:	bd38      	pop	{r3, r4, r5, pc}
 8012a88:	2400f4e4 	.word	0x2400f4e4

08012a8c <_close_r>:
 8012a8c:	b538      	push	{r3, r4, r5, lr}
 8012a8e:	4d06      	ldr	r5, [pc, #24]	; (8012aa8 <_close_r+0x1c>)
 8012a90:	2300      	movs	r3, #0
 8012a92:	4604      	mov	r4, r0
 8012a94:	4608      	mov	r0, r1
 8012a96:	602b      	str	r3, [r5, #0]
 8012a98:	f7f2 fdf2 	bl	8005680 <_close>
 8012a9c:	1c43      	adds	r3, r0, #1
 8012a9e:	d102      	bne.n	8012aa6 <_close_r+0x1a>
 8012aa0:	682b      	ldr	r3, [r5, #0]
 8012aa2:	b103      	cbz	r3, 8012aa6 <_close_r+0x1a>
 8012aa4:	6023      	str	r3, [r4, #0]
 8012aa6:	bd38      	pop	{r3, r4, r5, pc}
 8012aa8:	2400f4e4 	.word	0x2400f4e4

08012aac <_fstat_r>:
 8012aac:	b538      	push	{r3, r4, r5, lr}
 8012aae:	4d07      	ldr	r5, [pc, #28]	; (8012acc <_fstat_r+0x20>)
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	4604      	mov	r4, r0
 8012ab4:	4608      	mov	r0, r1
 8012ab6:	4611      	mov	r1, r2
 8012ab8:	602b      	str	r3, [r5, #0]
 8012aba:	f7f2 fde5 	bl	8005688 <_fstat>
 8012abe:	1c43      	adds	r3, r0, #1
 8012ac0:	d102      	bne.n	8012ac8 <_fstat_r+0x1c>
 8012ac2:	682b      	ldr	r3, [r5, #0]
 8012ac4:	b103      	cbz	r3, 8012ac8 <_fstat_r+0x1c>
 8012ac6:	6023      	str	r3, [r4, #0]
 8012ac8:	bd38      	pop	{r3, r4, r5, pc}
 8012aca:	bf00      	nop
 8012acc:	2400f4e4 	.word	0x2400f4e4

08012ad0 <_isatty_r>:
 8012ad0:	b538      	push	{r3, r4, r5, lr}
 8012ad2:	4d06      	ldr	r5, [pc, #24]	; (8012aec <_isatty_r+0x1c>)
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	4604      	mov	r4, r0
 8012ad8:	4608      	mov	r0, r1
 8012ada:	602b      	str	r3, [r5, #0]
 8012adc:	f7f2 fdda 	bl	8005694 <_isatty>
 8012ae0:	1c43      	adds	r3, r0, #1
 8012ae2:	d102      	bne.n	8012aea <_isatty_r+0x1a>
 8012ae4:	682b      	ldr	r3, [r5, #0]
 8012ae6:	b103      	cbz	r3, 8012aea <_isatty_r+0x1a>
 8012ae8:	6023      	str	r3, [r4, #0]
 8012aea:	bd38      	pop	{r3, r4, r5, pc}
 8012aec:	2400f4e4 	.word	0x2400f4e4

08012af0 <_lseek_r>:
 8012af0:	b538      	push	{r3, r4, r5, lr}
 8012af2:	4d07      	ldr	r5, [pc, #28]	; (8012b10 <_lseek_r+0x20>)
 8012af4:	4604      	mov	r4, r0
 8012af6:	4608      	mov	r0, r1
 8012af8:	4611      	mov	r1, r2
 8012afa:	2200      	movs	r2, #0
 8012afc:	602a      	str	r2, [r5, #0]
 8012afe:	461a      	mov	r2, r3
 8012b00:	f7f2 fdca 	bl	8005698 <_lseek>
 8012b04:	1c43      	adds	r3, r0, #1
 8012b06:	d102      	bne.n	8012b0e <_lseek_r+0x1e>
 8012b08:	682b      	ldr	r3, [r5, #0]
 8012b0a:	b103      	cbz	r3, 8012b0e <_lseek_r+0x1e>
 8012b0c:	6023      	str	r3, [r4, #0]
 8012b0e:	bd38      	pop	{r3, r4, r5, pc}
 8012b10:	2400f4e4 	.word	0x2400f4e4

08012b14 <_malloc_usable_size_r>:
 8012b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b18:	1f18      	subs	r0, r3, #4
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	bfbc      	itt	lt
 8012b1e:	580b      	ldrlt	r3, [r1, r0]
 8012b20:	18c0      	addlt	r0, r0, r3
 8012b22:	4770      	bx	lr

08012b24 <_read_r>:
 8012b24:	b538      	push	{r3, r4, r5, lr}
 8012b26:	4d07      	ldr	r5, [pc, #28]	; (8012b44 <_read_r+0x20>)
 8012b28:	4604      	mov	r4, r0
 8012b2a:	4608      	mov	r0, r1
 8012b2c:	4611      	mov	r1, r2
 8012b2e:	2200      	movs	r2, #0
 8012b30:	602a      	str	r2, [r5, #0]
 8012b32:	461a      	mov	r2, r3
 8012b34:	f7f2 fd88 	bl	8005648 <_read>
 8012b38:	1c43      	adds	r3, r0, #1
 8012b3a:	d102      	bne.n	8012b42 <_read_r+0x1e>
 8012b3c:	682b      	ldr	r3, [r5, #0]
 8012b3e:	b103      	cbz	r3, 8012b42 <_read_r+0x1e>
 8012b40:	6023      	str	r3, [r4, #0]
 8012b42:	bd38      	pop	{r3, r4, r5, pc}
 8012b44:	2400f4e4 	.word	0x2400f4e4

08012b48 <exp>:
 8012b48:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8012b4a:	ee10 3a90 	vmov	r3, s1
 8012b4e:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8012b52:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8012b56:	18a2      	adds	r2, r4, r2
 8012b58:	2a3e      	cmp	r2, #62	; 0x3e
 8012b5a:	ee10 1a10 	vmov	r1, s0
 8012b5e:	d922      	bls.n	8012ba6 <exp+0x5e>
 8012b60:	2a00      	cmp	r2, #0
 8012b62:	da06      	bge.n	8012b72 <exp+0x2a>
 8012b64:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8012b68:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012b6c:	b004      	add	sp, #16
 8012b6e:	bcf0      	pop	{r4, r5, r6, r7}
 8012b70:	4770      	bx	lr
 8012b72:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 8012b76:	f04f 0000 	mov.w	r0, #0
 8012b7a:	d913      	bls.n	8012ba4 <exp+0x5c>
 8012b7c:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8012b80:	bf08      	it	eq
 8012b82:	4281      	cmpeq	r1, r0
 8012b84:	f000 80a0 	beq.w	8012cc8 <exp+0x180>
 8012b88:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8012b8c:	4294      	cmp	r4, r2
 8012b8e:	d0e9      	beq.n	8012b64 <exp+0x1c>
 8012b90:	4283      	cmp	r3, r0
 8012b92:	da03      	bge.n	8012b9c <exp+0x54>
 8012b94:	b004      	add	sp, #16
 8012b96:	bcf0      	pop	{r4, r5, r6, r7}
 8012b98:	f000 b9be 	b.w	8012f18 <__math_uflow>
 8012b9c:	b004      	add	sp, #16
 8012b9e:	bcf0      	pop	{r4, r5, r6, r7}
 8012ba0:	f000 b9c2 	b.w	8012f28 <__math_oflow>
 8012ba4:	4604      	mov	r4, r0
 8012ba6:	4950      	ldr	r1, [pc, #320]	; (8012ce8 <exp+0x1a0>)
 8012ba8:	ed91 6b02 	vldr	d6, [r1, #8]
 8012bac:	ed91 5b00 	vldr	d5, [r1]
 8012bb0:	eeb0 7b46 	vmov.f64	d7, d6
 8012bb4:	eea5 7b00 	vfma.f64	d7, d5, d0
 8012bb8:	ee17 5a10 	vmov	r5, s14
 8012bbc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012bc0:	ed91 6b04 	vldr	d6, [r1, #16]
 8012bc4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8012bc8:	eea6 0b07 	vfma.f64	d0, d6, d7
 8012bcc:	ed91 6b06 	vldr	d6, [r1, #24]
 8012bd0:	18d8      	adds	r0, r3, r3
 8012bd2:	f100 030f 	add.w	r3, r0, #15
 8012bd6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8012bda:	eea6 0b07 	vfma.f64	d0, d6, d7
 8012bde:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8012be2:	ee20 7b00 	vmul.f64	d7, d0, d0
 8012be6:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 8012bea:	ed91 5b08 	vldr	d5, [r1, #32]
 8012bee:	ee30 6b06 	vadd.f64	d6, d0, d6
 8012bf2:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8012bf6:	eea4 5b00 	vfma.f64	d5, d4, d0
 8012bfa:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8012bfe:	eea5 6b07 	vfma.f64	d6, d5, d7
 8012c02:	ee27 7b07 	vmul.f64	d7, d7, d7
 8012c06:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8012c0a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 8012c0e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8012c12:	eea4 5b00 	vfma.f64	d5, d4, d0
 8012c16:	2600      	movs	r6, #0
 8012c18:	19f2      	adds	r2, r6, r7
 8012c1a:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 8012c1e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012c22:	2c00      	cmp	r4, #0
 8012c24:	d14b      	bne.n	8012cbe <exp+0x176>
 8012c26:	42b5      	cmp	r5, r6
 8012c28:	db10      	blt.n	8012c4c <exp+0x104>
 8012c2a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8012c2e:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8012cd0 <exp+0x188>
 8012c32:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8012c36:	4610      	mov	r0, r2
 8012c38:	ec41 0b10 	vmov	d0, r0, r1
 8012c3c:	eea6 0b00 	vfma.f64	d0, d6, d0
 8012c40:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012c44:	b004      	add	sp, #16
 8012c46:	bcf0      	pop	{r4, r5, r6, r7}
 8012c48:	f000 b9a6 	b.w	8012f98 <__math_check_oflow>
 8012c4c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8012c50:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8012c54:	4610      	mov	r0, r2
 8012c56:	ec41 0b17 	vmov	d7, r0, r1
 8012c5a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8012c5e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012c62:	ee37 5b06 	vadd.f64	d5, d7, d6
 8012c66:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8012c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c6e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012cd8 <exp+0x190>
 8012c72:	d51e      	bpl.n	8012cb2 <exp+0x16a>
 8012c74:	ee35 3b04 	vadd.f64	d3, d5, d4
 8012c78:	ee37 7b45 	vsub.f64	d7, d7, d5
 8012c7c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012c80:	ee34 6b43 	vsub.f64	d6, d4, d3
 8012c84:	ee36 5b05 	vadd.f64	d5, d6, d5
 8012c88:	ee35 5b07 	vadd.f64	d5, d5, d7
 8012c8c:	ee35 5b03 	vadd.f64	d5, d5, d3
 8012c90:	ee35 5b44 	vsub.f64	d5, d5, d4
 8012c94:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8012c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c9c:	d101      	bne.n	8012ca2 <exp+0x15a>
 8012c9e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8012ce0 <exp+0x198>
 8012ca2:	ed8d 0b00 	vstr	d0, [sp]
 8012ca6:	ed9d 7b00 	vldr	d7, [sp]
 8012caa:	ee27 7b00 	vmul.f64	d7, d7, d0
 8012cae:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012cb2:	ee25 0b00 	vmul.f64	d0, d5, d0
 8012cb6:	b004      	add	sp, #16
 8012cb8:	bcf0      	pop	{r4, r5, r6, r7}
 8012cba:	f000 b964 	b.w	8012f86 <__math_check_uflow>
 8012cbe:	ec43 2b10 	vmov	d0, r2, r3
 8012cc2:	eea6 0b00 	vfma.f64	d0, d6, d0
 8012cc6:	e751      	b.n	8012b6c <exp+0x24>
 8012cc8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8012ce0 <exp+0x198>
 8012ccc:	e74e      	b.n	8012b6c <exp+0x24>
 8012cce:	bf00      	nop
 8012cd0:	00000000 	.word	0x00000000
 8012cd4:	7f000000 	.word	0x7f000000
 8012cd8:	00000000 	.word	0x00000000
 8012cdc:	00100000 	.word	0x00100000
	...
 8012ce8:	0801d4e8 	.word	0x0801d4e8
 8012cec:	00000000 	.word	0x00000000

08012cf0 <log>:
 8012cf0:	b470      	push	{r4, r5, r6}
 8012cf2:	ee10 1a90 	vmov	r1, s1
 8012cf6:	ee10 2a10 	vmov	r2, s0
 8012cfa:	f04f 34ff 	mov.w	r4, #4294967295
 8012cfe:	4294      	cmp	r4, r2
 8012d00:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 8012d04:	4c72      	ldr	r4, [pc, #456]	; (8012ed0 <log+0x1e0>)
 8012d06:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 8012d0a:	eb74 0000 	sbcs.w	r0, r4, r0
 8012d0e:	ed2d 8b02 	vpush	{d8}
 8012d12:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8012d16:	d35c      	bcc.n	8012dd2 <log+0xe2>
 8012d18:	4b6e      	ldr	r3, [pc, #440]	; (8012ed4 <log+0x1e4>)
 8012d1a:	4299      	cmp	r1, r3
 8012d1c:	bf08      	it	eq
 8012d1e:	2a00      	cmpeq	r2, #0
 8012d20:	f000 80c6 	beq.w	8012eb0 <log+0x1c0>
 8012d24:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8012d28:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012d2c:	4b6a      	ldr	r3, [pc, #424]	; (8012ed8 <log+0x1e8>)
 8012d2e:	ee20 2b00 	vmul.f64	d2, d0, d0
 8012d32:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8012d36:	ee20 4b02 	vmul.f64	d4, d0, d2
 8012d3a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8012d3e:	eea6 7b00 	vfma.f64	d7, d6, d0
 8012d42:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8012d46:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8012d4a:	eea6 7b02 	vfma.f64	d7, d6, d2
 8012d4e:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8012d52:	eea5 6b00 	vfma.f64	d6, d5, d0
 8012d56:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8012d5a:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 8012d5e:	eea5 6b02 	vfma.f64	d6, d5, d2
 8012d62:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 8012d66:	eea3 5b00 	vfma.f64	d5, d3, d0
 8012d6a:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 8012d6e:	eea3 5b02 	vfma.f64	d5, d3, d2
 8012d72:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 8012d76:	eeb0 2b40 	vmov.f64	d2, d0
 8012d7a:	eea3 5b04 	vfma.f64	d5, d3, d4
 8012d7e:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8012d82:	eea5 6b04 	vfma.f64	d6, d5, d4
 8012d86:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012d8a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8012eb8 <log+0x1c8>
 8012d8e:	eeb0 1b47 	vmov.f64	d1, d7
 8012d92:	eeb0 5b40 	vmov.f64	d5, d0
 8012d96:	eea0 5b06 	vfma.f64	d5, d0, d6
 8012d9a:	eea0 5b46 	vfms.f64	d5, d0, d6
 8012d9e:	ee30 8b45 	vsub.f64	d8, d0, d5
 8012da2:	ee25 7b05 	vmul.f64	d7, d5, d5
 8012da6:	ee30 5b05 	vadd.f64	d5, d0, d5
 8012daa:	eea7 2b03 	vfma.f64	d2, d7, d3
 8012dae:	ee30 6b42 	vsub.f64	d6, d0, d2
 8012db2:	eea7 6b03 	vfma.f64	d6, d7, d3
 8012db6:	ee23 3b08 	vmul.f64	d3, d3, d8
 8012dba:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012dbe:	eeb0 0b46 	vmov.f64	d0, d6
 8012dc2:	eea1 0b04 	vfma.f64	d0, d1, d4
 8012dc6:	ee32 0b00 	vadd.f64	d0, d2, d0
 8012dca:	ecbd 8b02 	vpop	{d8}
 8012dce:	bc70      	pop	{r4, r5, r6}
 8012dd0:	4770      	bx	lr
 8012dd2:	f1a3 0410 	sub.w	r4, r3, #16
 8012dd6:	f647 70df 	movw	r0, #32735	; 0x7fdf
 8012dda:	4284      	cmp	r4, r0
 8012ddc:	d923      	bls.n	8012e26 <log+0x136>
 8012dde:	1894      	adds	r4, r2, r2
 8012de0:	eb41 0001 	adc.w	r0, r1, r1
 8012de4:	4320      	orrs	r0, r4
 8012de6:	d105      	bne.n	8012df4 <log+0x104>
 8012de8:	ecbd 8b02 	vpop	{d8}
 8012dec:	2001      	movs	r0, #1
 8012dee:	bc70      	pop	{r4, r5, r6}
 8012df0:	f000 b8a2 	b.w	8012f38 <__math_divzero>
 8012df4:	4839      	ldr	r0, [pc, #228]	; (8012edc <log+0x1ec>)
 8012df6:	4281      	cmp	r1, r0
 8012df8:	bf08      	it	eq
 8012dfa:	2a00      	cmpeq	r2, #0
 8012dfc:	d0e5      	beq.n	8012dca <log+0xda>
 8012dfe:	041a      	lsls	r2, r3, #16
 8012e00:	d404      	bmi.n	8012e0c <log+0x11c>
 8012e02:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 8012e06:	ea32 0303 	bics.w	r3, r2, r3
 8012e0a:	d104      	bne.n	8012e16 <log+0x126>
 8012e0c:	ecbd 8b02 	vpop	{d8}
 8012e10:	bc70      	pop	{r4, r5, r6}
 8012e12:	f000 b8a9 	b.w	8012f68 <__math_invalid>
 8012e16:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8012ec0 <log+0x1d0>
 8012e1a:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012e1e:	ec53 2b17 	vmov	r2, r3, d7
 8012e22:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 8012e26:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8012e2a:	f503 13d0 	add.w	r3, r3, #1703936	; 0x1a0000
 8012e2e:	0d1e      	lsrs	r6, r3, #20
 8012e30:	1e14      	subs	r4, r2, #0
 8012e32:	4a29      	ldr	r2, [pc, #164]	; (8012ed8 <log+0x1e8>)
 8012e34:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8012e38:	f3c3 3046 	ubfx	r0, r3, #13, #7
 8012e3c:	0536      	lsls	r6, r6, #20
 8012e3e:	1b8d      	subs	r5, r1, r6
 8012e40:	eb02 1100 	add.w	r1, r2, r0, lsl #4
 8012e44:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 8012e48:	ec45 4b16 	vmov	d6, r4, r5
 8012e4c:	151b      	asrs	r3, r3, #20
 8012e4e:	eea6 5b07 	vfma.f64	d5, d6, d7
 8012e52:	ee07 3a90 	vmov	s15, r3
 8012e56:	ee25 2b05 	vmul.f64	d2, d5, d5
 8012e5a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8012e5e:	ed92 4b00 	vldr	d4, [r2]
 8012e62:	ee25 1b02 	vmul.f64	d1, d5, d2
 8012e66:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 8012e6a:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012e6e:	ee35 4b07 	vadd.f64	d4, d5, d7
 8012e72:	ee37 0b44 	vsub.f64	d0, d7, d4
 8012e76:	ed92 7b02 	vldr	d7, [r2, #8]
 8012e7a:	ee30 0b05 	vadd.f64	d0, d0, d5
 8012e7e:	eea7 0b06 	vfma.f64	d0, d7, d6
 8012e82:	ed92 7b04 	vldr	d7, [r2, #16]
 8012e86:	ed92 6b08 	vldr	d6, [r2, #32]
 8012e8a:	eea7 0b02 	vfma.f64	d0, d7, d2
 8012e8e:	ed92 7b06 	vldr	d7, [r2, #24]
 8012e92:	ed92 3b0c 	vldr	d3, [r2, #48]	; 0x30
 8012e96:	eea6 7b05 	vfma.f64	d7, d6, d5
 8012e9a:	ed92 6b0a 	vldr	d6, [r2, #40]	; 0x28
 8012e9e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012ea2:	eea6 7b02 	vfma.f64	d7, d6, d2
 8012ea6:	eea1 0b07 	vfma.f64	d0, d1, d7
 8012eaa:	ee30 0b04 	vadd.f64	d0, d0, d4
 8012eae:	e78c      	b.n	8012dca <log+0xda>
 8012eb0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8012ec8 <log+0x1d8>
 8012eb4:	e789      	b.n	8012dca <log+0xda>
 8012eb6:	bf00      	nop
 8012eb8:	00000000 	.word	0x00000000
 8012ebc:	41a00000 	.word	0x41a00000
 8012ec0:	00000000 	.word	0x00000000
 8012ec4:	43300000 	.word	0x43300000
	...
 8012ed0:	000308ff 	.word	0x000308ff
 8012ed4:	3ff00000 	.word	0x3ff00000
 8012ed8:	0801dd58 	.word	0x0801dd58
 8012edc:	7ff00000 	.word	0x7ff00000

08012ee0 <with_errno>:
 8012ee0:	b513      	push	{r0, r1, r4, lr}
 8012ee2:	4604      	mov	r4, r0
 8012ee4:	ed8d 0b00 	vstr	d0, [sp]
 8012ee8:	f7fc fea6 	bl	800fc38 <__errno>
 8012eec:	ed9d 0b00 	vldr	d0, [sp]
 8012ef0:	6004      	str	r4, [r0, #0]
 8012ef2:	b002      	add	sp, #8
 8012ef4:	bd10      	pop	{r4, pc}

08012ef6 <xflow>:
 8012ef6:	b082      	sub	sp, #8
 8012ef8:	b158      	cbz	r0, 8012f12 <xflow+0x1c>
 8012efa:	eeb1 7b40 	vneg.f64	d7, d0
 8012efe:	ed8d 7b00 	vstr	d7, [sp]
 8012f02:	ed9d 7b00 	vldr	d7, [sp]
 8012f06:	2022      	movs	r0, #34	; 0x22
 8012f08:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012f0c:	b002      	add	sp, #8
 8012f0e:	f7ff bfe7 	b.w	8012ee0 <with_errno>
 8012f12:	eeb0 7b40 	vmov.f64	d7, d0
 8012f16:	e7f2      	b.n	8012efe <xflow+0x8>

08012f18 <__math_uflow>:
 8012f18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012f20 <__math_uflow+0x8>
 8012f1c:	f7ff bfeb 	b.w	8012ef6 <xflow>
 8012f20:	00000000 	.word	0x00000000
 8012f24:	10000000 	.word	0x10000000

08012f28 <__math_oflow>:
 8012f28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012f30 <__math_oflow+0x8>
 8012f2c:	f7ff bfe3 	b.w	8012ef6 <xflow>
 8012f30:	00000000 	.word	0x00000000
 8012f34:	70000000 	.word	0x70000000

08012f38 <__math_divzero>:
 8012f38:	b082      	sub	sp, #8
 8012f3a:	2800      	cmp	r0, #0
 8012f3c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012f40:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8012f44:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8012f48:	ed8d 7b00 	vstr	d7, [sp]
 8012f4c:	ed9d 0b00 	vldr	d0, [sp]
 8012f50:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8012f60 <__math_divzero+0x28>
 8012f54:	2022      	movs	r0, #34	; 0x22
 8012f56:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8012f5a:	b002      	add	sp, #8
 8012f5c:	f7ff bfc0 	b.w	8012ee0 <with_errno>
	...

08012f68 <__math_invalid>:
 8012f68:	eeb0 7b40 	vmov.f64	d7, d0
 8012f6c:	eeb4 7b47 	vcmp.f64	d7, d7
 8012f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f74:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012f78:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8012f7c:	d602      	bvs.n	8012f84 <__math_invalid+0x1c>
 8012f7e:	2021      	movs	r0, #33	; 0x21
 8012f80:	f7ff bfae 	b.w	8012ee0 <with_errno>
 8012f84:	4770      	bx	lr

08012f86 <__math_check_uflow>:
 8012f86:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8012f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f8e:	d102      	bne.n	8012f96 <__math_check_uflow+0x10>
 8012f90:	2022      	movs	r0, #34	; 0x22
 8012f92:	f7ff bfa5 	b.w	8012ee0 <with_errno>
 8012f96:	4770      	bx	lr

08012f98 <__math_check_oflow>:
 8012f98:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8012fb8 <__math_check_oflow+0x20>
 8012f9c:	eeb0 7bc0 	vabs.f64	d7, d0
 8012fa0:	eeb4 7b46 	vcmp.f64	d7, d6
 8012fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fa8:	dd02      	ble.n	8012fb0 <__math_check_oflow+0x18>
 8012faa:	2022      	movs	r0, #34	; 0x22
 8012fac:	f7ff bf98 	b.w	8012ee0 <with_errno>
 8012fb0:	4770      	bx	lr
 8012fb2:	bf00      	nop
 8012fb4:	f3af 8000 	nop.w
 8012fb8:	ffffffff 	.word	0xffffffff
 8012fbc:	7fefffff 	.word	0x7fefffff

08012fc0 <cos>:
 8012fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012fc2:	eeb0 7b40 	vmov.f64	d7, d0
 8012fc6:	ee17 3a90 	vmov	r3, s15
 8012fca:	4a21      	ldr	r2, [pc, #132]	; (8013050 <cos+0x90>)
 8012fcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012fd0:	4293      	cmp	r3, r2
 8012fd2:	dc06      	bgt.n	8012fe2 <cos+0x22>
 8012fd4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8013048 <cos+0x88>
 8012fd8:	b005      	add	sp, #20
 8012fda:	f85d eb04 	ldr.w	lr, [sp], #4
 8012fde:	f000 ba6f 	b.w	80134c0 <__kernel_cos>
 8012fe2:	4a1c      	ldr	r2, [pc, #112]	; (8013054 <cos+0x94>)
 8012fe4:	4293      	cmp	r3, r2
 8012fe6:	dd04      	ble.n	8012ff2 <cos+0x32>
 8012fe8:	ee30 0b40 	vsub.f64	d0, d0, d0
 8012fec:	b005      	add	sp, #20
 8012fee:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ff2:	4668      	mov	r0, sp
 8012ff4:	f000 f920 	bl	8013238 <__ieee754_rem_pio2>
 8012ff8:	f000 0003 	and.w	r0, r0, #3
 8012ffc:	2801      	cmp	r0, #1
 8012ffe:	d009      	beq.n	8013014 <cos+0x54>
 8013000:	2802      	cmp	r0, #2
 8013002:	d010      	beq.n	8013026 <cos+0x66>
 8013004:	b9b0      	cbnz	r0, 8013034 <cos+0x74>
 8013006:	ed9d 1b02 	vldr	d1, [sp, #8]
 801300a:	ed9d 0b00 	vldr	d0, [sp]
 801300e:	f000 fa57 	bl	80134c0 <__kernel_cos>
 8013012:	e7eb      	b.n	8012fec <cos+0x2c>
 8013014:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013018:	ed9d 0b00 	vldr	d0, [sp]
 801301c:	f000 fd54 	bl	8013ac8 <__kernel_sin>
 8013020:	eeb1 0b40 	vneg.f64	d0, d0
 8013024:	e7e2      	b.n	8012fec <cos+0x2c>
 8013026:	ed9d 1b02 	vldr	d1, [sp, #8]
 801302a:	ed9d 0b00 	vldr	d0, [sp]
 801302e:	f000 fa47 	bl	80134c0 <__kernel_cos>
 8013032:	e7f5      	b.n	8013020 <cos+0x60>
 8013034:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013038:	ed9d 0b00 	vldr	d0, [sp]
 801303c:	2001      	movs	r0, #1
 801303e:	f000 fd43 	bl	8013ac8 <__kernel_sin>
 8013042:	e7d3      	b.n	8012fec <cos+0x2c>
 8013044:	f3af 8000 	nop.w
	...
 8013050:	3fe921fb 	.word	0x3fe921fb
 8013054:	7fefffff 	.word	0x7fefffff

08013058 <sin>:
 8013058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801305a:	eeb0 7b40 	vmov.f64	d7, d0
 801305e:	ee17 3a90 	vmov	r3, s15
 8013062:	4a21      	ldr	r2, [pc, #132]	; (80130e8 <sin+0x90>)
 8013064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013068:	4293      	cmp	r3, r2
 801306a:	dc07      	bgt.n	801307c <sin+0x24>
 801306c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80130e0 <sin+0x88>
 8013070:	2000      	movs	r0, #0
 8013072:	b005      	add	sp, #20
 8013074:	f85d eb04 	ldr.w	lr, [sp], #4
 8013078:	f000 bd26 	b.w	8013ac8 <__kernel_sin>
 801307c:	4a1b      	ldr	r2, [pc, #108]	; (80130ec <sin+0x94>)
 801307e:	4293      	cmp	r3, r2
 8013080:	dd04      	ble.n	801308c <sin+0x34>
 8013082:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013086:	b005      	add	sp, #20
 8013088:	f85d fb04 	ldr.w	pc, [sp], #4
 801308c:	4668      	mov	r0, sp
 801308e:	f000 f8d3 	bl	8013238 <__ieee754_rem_pio2>
 8013092:	f000 0003 	and.w	r0, r0, #3
 8013096:	2801      	cmp	r0, #1
 8013098:	d00a      	beq.n	80130b0 <sin+0x58>
 801309a:	2802      	cmp	r0, #2
 801309c:	d00f      	beq.n	80130be <sin+0x66>
 801309e:	b9c0      	cbnz	r0, 80130d2 <sin+0x7a>
 80130a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130a4:	ed9d 0b00 	vldr	d0, [sp]
 80130a8:	2001      	movs	r0, #1
 80130aa:	f000 fd0d 	bl	8013ac8 <__kernel_sin>
 80130ae:	e7ea      	b.n	8013086 <sin+0x2e>
 80130b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130b4:	ed9d 0b00 	vldr	d0, [sp]
 80130b8:	f000 fa02 	bl	80134c0 <__kernel_cos>
 80130bc:	e7e3      	b.n	8013086 <sin+0x2e>
 80130be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130c2:	ed9d 0b00 	vldr	d0, [sp]
 80130c6:	2001      	movs	r0, #1
 80130c8:	f000 fcfe 	bl	8013ac8 <__kernel_sin>
 80130cc:	eeb1 0b40 	vneg.f64	d0, d0
 80130d0:	e7d9      	b.n	8013086 <sin+0x2e>
 80130d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130d6:	ed9d 0b00 	vldr	d0, [sp]
 80130da:	f000 f9f1 	bl	80134c0 <__kernel_cos>
 80130de:	e7f5      	b.n	80130cc <sin+0x74>
	...
 80130e8:	3fe921fb 	.word	0x3fe921fb
 80130ec:	7fefffff 	.word	0x7fefffff

080130f0 <log10>:
 80130f0:	b508      	push	{r3, lr}
 80130f2:	ed2d 8b02 	vpush	{d8}
 80130f6:	eeb0 8b40 	vmov.f64	d8, d0
 80130fa:	f000 f82d 	bl	8013158 <__ieee754_log10>
 80130fe:	eeb4 8b48 	vcmp.f64	d8, d8
 8013102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013106:	d60f      	bvs.n	8013128 <log10+0x38>
 8013108:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 801310c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013110:	d80a      	bhi.n	8013128 <log10+0x38>
 8013112:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801311a:	d108      	bne.n	801312e <log10+0x3e>
 801311c:	f7fc fd8c 	bl	800fc38 <__errno>
 8013120:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8013148 <log10+0x58>
 8013124:	2322      	movs	r3, #34	; 0x22
 8013126:	6003      	str	r3, [r0, #0]
 8013128:	ecbd 8b02 	vpop	{d8}
 801312c:	bd08      	pop	{r3, pc}
 801312e:	f7fc fd83 	bl	800fc38 <__errno>
 8013132:	ecbd 8b02 	vpop	{d8}
 8013136:	2321      	movs	r3, #33	; 0x21
 8013138:	6003      	str	r3, [r0, #0]
 801313a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801313e:	4804      	ldr	r0, [pc, #16]	; (8013150 <log10+0x60>)
 8013140:	f000 bd9a 	b.w	8013c78 <nan>
 8013144:	f3af 8000 	nop.w
 8013148:	00000000 	.word	0x00000000
 801314c:	fff00000 	.word	0xfff00000
 8013150:	0801d28b 	.word	0x0801d28b
 8013154:	00000000 	.word	0x00000000

08013158 <__ieee754_log10>:
 8013158:	b510      	push	{r4, lr}
 801315a:	ee10 3a90 	vmov	r3, s1
 801315e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013162:	ed2d 8b02 	vpush	{d8}
 8013166:	da21      	bge.n	80131ac <__ieee754_log10+0x54>
 8013168:	ee10 1a10 	vmov	r1, s0
 801316c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013170:	430a      	orrs	r2, r1
 8013172:	d108      	bne.n	8013186 <__ieee754_log10+0x2e>
 8013174:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8013200 <__ieee754_log10+0xa8>
 8013178:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8013208 <__ieee754_log10+0xb0>
 801317c:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8013180:	ecbd 8b02 	vpop	{d8}
 8013184:	bd10      	pop	{r4, pc}
 8013186:	2b00      	cmp	r3, #0
 8013188:	da02      	bge.n	8013190 <__ieee754_log10+0x38>
 801318a:	ee30 6b40 	vsub.f64	d6, d0, d0
 801318e:	e7f3      	b.n	8013178 <__ieee754_log10+0x20>
 8013190:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8013210 <__ieee754_log10+0xb8>
 8013194:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013198:	ee10 3a90 	vmov	r3, s1
 801319c:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80131a0:	4923      	ldr	r1, [pc, #140]	; (8013230 <__ieee754_log10+0xd8>)
 80131a2:	428b      	cmp	r3, r1
 80131a4:	dd04      	ble.n	80131b0 <__ieee754_log10+0x58>
 80131a6:	ee30 0b00 	vadd.f64	d0, d0, d0
 80131aa:	e7e9      	b.n	8013180 <__ieee754_log10+0x28>
 80131ac:	2200      	movs	r2, #0
 80131ae:	e7f7      	b.n	80131a0 <__ieee754_log10+0x48>
 80131b0:	1518      	asrs	r0, r3, #20
 80131b2:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80131b6:	4410      	add	r0, r2
 80131b8:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80131bc:	f240 34ff 	movw	r4, #1023	; 0x3ff
 80131c0:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 80131c4:	ee08 3a10 	vmov	s16, r3
 80131c8:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 80131cc:	ec53 2b10 	vmov	r2, r3, d0
 80131d0:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80131d4:	ec43 2b10 	vmov	d0, r2, r3
 80131d8:	f7ff fd8a 	bl	8012cf0 <log>
 80131dc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8013218 <__ieee754_log10+0xc0>
 80131e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80131e4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8013220 <__ieee754_log10+0xc8>
 80131e8:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 80131ec:	eea8 0b07 	vfma.f64	d0, d8, d7
 80131f0:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8013228 <__ieee754_log10+0xd0>
 80131f4:	eea8 0b07 	vfma.f64	d0, d8, d7
 80131f8:	e7c2      	b.n	8013180 <__ieee754_log10+0x28>
 80131fa:	bf00      	nop
 80131fc:	f3af 8000 	nop.w
 8013200:	00000000 	.word	0x00000000
 8013204:	c3500000 	.word	0xc3500000
	...
 8013214:	43500000 	.word	0x43500000
 8013218:	1526e50e 	.word	0x1526e50e
 801321c:	3fdbcb7b 	.word	0x3fdbcb7b
 8013220:	11f12b36 	.word	0x11f12b36
 8013224:	3d59fef3 	.word	0x3d59fef3
 8013228:	509f6000 	.word	0x509f6000
 801322c:	3fd34413 	.word	0x3fd34413
 8013230:	7fefffff 	.word	0x7fefffff
 8013234:	00000000 	.word	0x00000000

08013238 <__ieee754_rem_pio2>:
 8013238:	b570      	push	{r4, r5, r6, lr}
 801323a:	eeb0 7b40 	vmov.f64	d7, d0
 801323e:	ee17 5a90 	vmov	r5, s15
 8013242:	4b99      	ldr	r3, [pc, #612]	; (80134a8 <__ieee754_rem_pio2+0x270>)
 8013244:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013248:	429e      	cmp	r6, r3
 801324a:	b088      	sub	sp, #32
 801324c:	4604      	mov	r4, r0
 801324e:	dc07      	bgt.n	8013260 <__ieee754_rem_pio2+0x28>
 8013250:	2200      	movs	r2, #0
 8013252:	2300      	movs	r3, #0
 8013254:	ed84 0b00 	vstr	d0, [r4]
 8013258:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801325c:	2000      	movs	r0, #0
 801325e:	e01b      	b.n	8013298 <__ieee754_rem_pio2+0x60>
 8013260:	4b92      	ldr	r3, [pc, #584]	; (80134ac <__ieee754_rem_pio2+0x274>)
 8013262:	429e      	cmp	r6, r3
 8013264:	dc3b      	bgt.n	80132de <__ieee754_rem_pio2+0xa6>
 8013266:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801326a:	2d00      	cmp	r5, #0
 801326c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8013468 <__ieee754_rem_pio2+0x230>
 8013270:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8013274:	dd19      	ble.n	80132aa <__ieee754_rem_pio2+0x72>
 8013276:	ee30 7b46 	vsub.f64	d7, d0, d6
 801327a:	429e      	cmp	r6, r3
 801327c:	d00e      	beq.n	801329c <__ieee754_rem_pio2+0x64>
 801327e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8013470 <__ieee754_rem_pio2+0x238>
 8013282:	ee37 5b46 	vsub.f64	d5, d7, d6
 8013286:	ee37 7b45 	vsub.f64	d7, d7, d5
 801328a:	ed84 5b00 	vstr	d5, [r4]
 801328e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013292:	ed84 7b02 	vstr	d7, [r4, #8]
 8013296:	2001      	movs	r0, #1
 8013298:	b008      	add	sp, #32
 801329a:	bd70      	pop	{r4, r5, r6, pc}
 801329c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8013478 <__ieee754_rem_pio2+0x240>
 80132a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80132a4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8013480 <__ieee754_rem_pio2+0x248>
 80132a8:	e7eb      	b.n	8013282 <__ieee754_rem_pio2+0x4a>
 80132aa:	429e      	cmp	r6, r3
 80132ac:	ee30 7b06 	vadd.f64	d7, d0, d6
 80132b0:	d00e      	beq.n	80132d0 <__ieee754_rem_pio2+0x98>
 80132b2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8013470 <__ieee754_rem_pio2+0x238>
 80132b6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80132ba:	ee37 7b45 	vsub.f64	d7, d7, d5
 80132be:	ed84 5b00 	vstr	d5, [r4]
 80132c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80132c6:	f04f 30ff 	mov.w	r0, #4294967295
 80132ca:	ed84 7b02 	vstr	d7, [r4, #8]
 80132ce:	e7e3      	b.n	8013298 <__ieee754_rem_pio2+0x60>
 80132d0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8013478 <__ieee754_rem_pio2+0x240>
 80132d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80132d8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8013480 <__ieee754_rem_pio2+0x248>
 80132dc:	e7eb      	b.n	80132b6 <__ieee754_rem_pio2+0x7e>
 80132de:	4b74      	ldr	r3, [pc, #464]	; (80134b0 <__ieee754_rem_pio2+0x278>)
 80132e0:	429e      	cmp	r6, r3
 80132e2:	dc70      	bgt.n	80133c6 <__ieee754_rem_pio2+0x18e>
 80132e4:	f000 fc48 	bl	8013b78 <fabs>
 80132e8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80132ec:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8013488 <__ieee754_rem_pio2+0x250>
 80132f0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80132f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80132f8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80132fc:	ee17 0a90 	vmov	r0, s15
 8013300:	eeb1 4b45 	vneg.f64	d4, d5
 8013304:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8013468 <__ieee754_rem_pio2+0x230>
 8013308:	eea5 0b47 	vfms.f64	d0, d5, d7
 801330c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8013470 <__ieee754_rem_pio2+0x238>
 8013310:	281f      	cmp	r0, #31
 8013312:	ee25 7b07 	vmul.f64	d7, d5, d7
 8013316:	ee30 6b47 	vsub.f64	d6, d0, d7
 801331a:	dc08      	bgt.n	801332e <__ieee754_rem_pio2+0xf6>
 801331c:	4b65      	ldr	r3, [pc, #404]	; (80134b4 <__ieee754_rem_pio2+0x27c>)
 801331e:	1e42      	subs	r2, r0, #1
 8013320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013324:	42b3      	cmp	r3, r6
 8013326:	d002      	beq.n	801332e <__ieee754_rem_pio2+0xf6>
 8013328:	ed84 6b00 	vstr	d6, [r4]
 801332c:	e026      	b.n	801337c <__ieee754_rem_pio2+0x144>
 801332e:	ee16 3a90 	vmov	r3, s13
 8013332:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013336:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801333a:	2b10      	cmp	r3, #16
 801333c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8013340:	ddf2      	ble.n	8013328 <__ieee754_rem_pio2+0xf0>
 8013342:	eeb0 6b40 	vmov.f64	d6, d0
 8013346:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8013478 <__ieee754_rem_pio2+0x240>
 801334a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8013480 <__ieee754_rem_pio2+0x248>
 801334e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8013352:	ee30 0b46 	vsub.f64	d0, d0, d6
 8013356:	eea4 0b07 	vfma.f64	d0, d4, d7
 801335a:	eeb0 7b40 	vmov.f64	d7, d0
 801335e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8013362:	ee36 3b47 	vsub.f64	d3, d6, d7
 8013366:	ee13 3a90 	vmov	r3, s7
 801336a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801336e:	1ad3      	subs	r3, r2, r3
 8013370:	2b31      	cmp	r3, #49	; 0x31
 8013372:	dc17      	bgt.n	80133a4 <__ieee754_rem_pio2+0x16c>
 8013374:	eeb0 0b46 	vmov.f64	d0, d6
 8013378:	ed84 3b00 	vstr	d3, [r4]
 801337c:	ed94 6b00 	vldr	d6, [r4]
 8013380:	2d00      	cmp	r5, #0
 8013382:	ee30 0b46 	vsub.f64	d0, d0, d6
 8013386:	ee30 0b47 	vsub.f64	d0, d0, d7
 801338a:	ed84 0b02 	vstr	d0, [r4, #8]
 801338e:	da83      	bge.n	8013298 <__ieee754_rem_pio2+0x60>
 8013390:	eeb1 6b46 	vneg.f64	d6, d6
 8013394:	eeb1 0b40 	vneg.f64	d0, d0
 8013398:	ed84 6b00 	vstr	d6, [r4]
 801339c:	ed84 0b02 	vstr	d0, [r4, #8]
 80133a0:	4240      	negs	r0, r0
 80133a2:	e779      	b.n	8013298 <__ieee754_rem_pio2+0x60>
 80133a4:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8013490 <__ieee754_rem_pio2+0x258>
 80133a8:	eeb0 0b46 	vmov.f64	d0, d6
 80133ac:	eea4 0b03 	vfma.f64	d0, d4, d3
 80133b0:	ee36 7b40 	vsub.f64	d7, d6, d0
 80133b4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8013498 <__ieee754_rem_pio2+0x260>
 80133b8:	eea4 7b03 	vfma.f64	d7, d4, d3
 80133bc:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80133c0:	ee30 6b47 	vsub.f64	d6, d0, d7
 80133c4:	e7b0      	b.n	8013328 <__ieee754_rem_pio2+0xf0>
 80133c6:	4b3c      	ldr	r3, [pc, #240]	; (80134b8 <__ieee754_rem_pio2+0x280>)
 80133c8:	429e      	cmp	r6, r3
 80133ca:	dd06      	ble.n	80133da <__ieee754_rem_pio2+0x1a2>
 80133cc:	ee30 7b40 	vsub.f64	d7, d0, d0
 80133d0:	ed80 7b02 	vstr	d7, [r0, #8]
 80133d4:	ed80 7b00 	vstr	d7, [r0]
 80133d8:	e740      	b.n	801325c <__ieee754_rem_pio2+0x24>
 80133da:	1532      	asrs	r2, r6, #20
 80133dc:	ee10 0a10 	vmov	r0, s0
 80133e0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80133e4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80133e8:	ec41 0b17 	vmov	d7, r0, r1
 80133ec:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80133f0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80134a0 <__ieee754_rem_pio2+0x268>
 80133f4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80133f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80133fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013400:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013404:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013408:	a902      	add	r1, sp, #8
 801340a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801340e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013412:	ed8d 6b04 	vstr	d6, [sp, #16]
 8013416:	ee27 7b05 	vmul.f64	d7, d7, d5
 801341a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801341e:	2603      	movs	r6, #3
 8013420:	4608      	mov	r0, r1
 8013422:	ed91 7b04 	vldr	d7, [r1, #16]
 8013426:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801342a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801342e:	4633      	mov	r3, r6
 8013430:	f1a1 0108 	sub.w	r1, r1, #8
 8013434:	f106 36ff 	add.w	r6, r6, #4294967295
 8013438:	d0f3      	beq.n	8013422 <__ieee754_rem_pio2+0x1ea>
 801343a:	4920      	ldr	r1, [pc, #128]	; (80134bc <__ieee754_rem_pio2+0x284>)
 801343c:	9101      	str	r1, [sp, #4]
 801343e:	2102      	movs	r1, #2
 8013440:	9100      	str	r1, [sp, #0]
 8013442:	4621      	mov	r1, r4
 8013444:	f000 f8a8 	bl	8013598 <__kernel_rem_pio2>
 8013448:	2d00      	cmp	r5, #0
 801344a:	f6bf af25 	bge.w	8013298 <__ieee754_rem_pio2+0x60>
 801344e:	ed94 7b00 	vldr	d7, [r4]
 8013452:	eeb1 7b47 	vneg.f64	d7, d7
 8013456:	ed84 7b00 	vstr	d7, [r4]
 801345a:	ed94 7b02 	vldr	d7, [r4, #8]
 801345e:	eeb1 7b47 	vneg.f64	d7, d7
 8013462:	ed84 7b02 	vstr	d7, [r4, #8]
 8013466:	e79b      	b.n	80133a0 <__ieee754_rem_pio2+0x168>
 8013468:	54400000 	.word	0x54400000
 801346c:	3ff921fb 	.word	0x3ff921fb
 8013470:	1a626331 	.word	0x1a626331
 8013474:	3dd0b461 	.word	0x3dd0b461
 8013478:	1a600000 	.word	0x1a600000
 801347c:	3dd0b461 	.word	0x3dd0b461
 8013480:	2e037073 	.word	0x2e037073
 8013484:	3ba3198a 	.word	0x3ba3198a
 8013488:	6dc9c883 	.word	0x6dc9c883
 801348c:	3fe45f30 	.word	0x3fe45f30
 8013490:	2e000000 	.word	0x2e000000
 8013494:	3ba3198a 	.word	0x3ba3198a
 8013498:	252049c1 	.word	0x252049c1
 801349c:	397b839a 	.word	0x397b839a
 80134a0:	00000000 	.word	0x00000000
 80134a4:	41700000 	.word	0x41700000
 80134a8:	3fe921fb 	.word	0x3fe921fb
 80134ac:	4002d97b 	.word	0x4002d97b
 80134b0:	413921fb 	.word	0x413921fb
 80134b4:	0801e5e8 	.word	0x0801e5e8
 80134b8:	7fefffff 	.word	0x7fefffff
 80134bc:	0801e668 	.word	0x0801e668

080134c0 <__kernel_cos>:
 80134c0:	ee10 1a90 	vmov	r1, s1
 80134c4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80134c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80134cc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80134d0:	da05      	bge.n	80134de <__kernel_cos+0x1e>
 80134d2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80134d6:	ee17 3a90 	vmov	r3, s15
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d03d      	beq.n	801355a <__kernel_cos+0x9a>
 80134de:	ee20 3b00 	vmul.f64	d3, d0, d0
 80134e2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8013560 <__kernel_cos+0xa0>
 80134e6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8013568 <__kernel_cos+0xa8>
 80134ea:	eea3 6b07 	vfma.f64	d6, d3, d7
 80134ee:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8013570 <__kernel_cos+0xb0>
 80134f2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80134f6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8013578 <__kernel_cos+0xb8>
 80134fa:	eea7 6b03 	vfma.f64	d6, d7, d3
 80134fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8013580 <__kernel_cos+0xc0>
 8013502:	4b23      	ldr	r3, [pc, #140]	; (8013590 <__kernel_cos+0xd0>)
 8013504:	eea6 7b03 	vfma.f64	d7, d6, d3
 8013508:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8013588 <__kernel_cos+0xc8>
 801350c:	4299      	cmp	r1, r3
 801350e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8013512:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8013516:	ee26 5b03 	vmul.f64	d5, d6, d3
 801351a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801351e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8013522:	eea3 6b05 	vfma.f64	d6, d3, d5
 8013526:	dc04      	bgt.n	8013532 <__kernel_cos+0x72>
 8013528:	ee37 6b46 	vsub.f64	d6, d7, d6
 801352c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8013530:	4770      	bx	lr
 8013532:	4b18      	ldr	r3, [pc, #96]	; (8013594 <__kernel_cos+0xd4>)
 8013534:	4299      	cmp	r1, r3
 8013536:	dc0d      	bgt.n	8013554 <__kernel_cos+0x94>
 8013538:	2200      	movs	r2, #0
 801353a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801353e:	ec43 2b15 	vmov	d5, r2, r3
 8013542:	ee34 0b45 	vsub.f64	d0, d4, d5
 8013546:	ee37 7b45 	vsub.f64	d7, d7, d5
 801354a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801354e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013552:	4770      	bx	lr
 8013554:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8013558:	e7f3      	b.n	8013542 <__kernel_cos+0x82>
 801355a:	eeb0 0b44 	vmov.f64	d0, d4
 801355e:	4770      	bx	lr
 8013560:	be8838d4 	.word	0xbe8838d4
 8013564:	bda8fae9 	.word	0xbda8fae9
 8013568:	bdb4b1c4 	.word	0xbdb4b1c4
 801356c:	3e21ee9e 	.word	0x3e21ee9e
 8013570:	809c52ad 	.word	0x809c52ad
 8013574:	be927e4f 	.word	0xbe927e4f
 8013578:	19cb1590 	.word	0x19cb1590
 801357c:	3efa01a0 	.word	0x3efa01a0
 8013580:	16c15177 	.word	0x16c15177
 8013584:	bf56c16c 	.word	0xbf56c16c
 8013588:	5555554c 	.word	0x5555554c
 801358c:	3fa55555 	.word	0x3fa55555
 8013590:	3fd33332 	.word	0x3fd33332
 8013594:	3fe90000 	.word	0x3fe90000

08013598 <__kernel_rem_pio2>:
 8013598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801359c:	ed2d 8b06 	vpush	{d8-d10}
 80135a0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80135a4:	460f      	mov	r7, r1
 80135a6:	9002      	str	r0, [sp, #8]
 80135a8:	49c5      	ldr	r1, [pc, #788]	; (80138c0 <__kernel_rem_pio2+0x328>)
 80135aa:	98a2      	ldr	r0, [sp, #648]	; 0x288
 80135ac:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 80135b0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 80135b4:	9301      	str	r3, [sp, #4]
 80135b6:	f112 0f14 	cmn.w	r2, #20
 80135ba:	bfa8      	it	ge
 80135bc:	2018      	movge	r0, #24
 80135be:	f103 31ff 	add.w	r1, r3, #4294967295
 80135c2:	bfb8      	it	lt
 80135c4:	2000      	movlt	r0, #0
 80135c6:	f06f 0417 	mvn.w	r4, #23
 80135ca:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80138a8 <__kernel_rem_pio2+0x310>
 80135ce:	bfa4      	itt	ge
 80135d0:	f1a2 0a03 	subge.w	sl, r2, #3
 80135d4:	fb9a f0f0 	sdivge	r0, sl, r0
 80135d8:	fb00 4404 	mla	r4, r0, r4, r4
 80135dc:	1a46      	subs	r6, r0, r1
 80135de:	4414      	add	r4, r2
 80135e0:	eb09 0c01 	add.w	ip, r9, r1
 80135e4:	ad1a      	add	r5, sp, #104	; 0x68
 80135e6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80135ea:	2200      	movs	r2, #0
 80135ec:	4562      	cmp	r2, ip
 80135ee:	dd10      	ble.n	8013612 <__kernel_rem_pio2+0x7a>
 80135f0:	9a01      	ldr	r2, [sp, #4]
 80135f2:	ab1a      	add	r3, sp, #104	; 0x68
 80135f4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80135f8:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 80135fc:	f04f 0c00 	mov.w	ip, #0
 8013600:	45cc      	cmp	ip, r9
 8013602:	dc26      	bgt.n	8013652 <__kernel_rem_pio2+0xba>
 8013604:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 80138a8 <__kernel_rem_pio2+0x310>
 8013608:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801360c:	4616      	mov	r6, r2
 801360e:	2500      	movs	r5, #0
 8013610:	e015      	b.n	801363e <__kernel_rem_pio2+0xa6>
 8013612:	42d6      	cmn	r6, r2
 8013614:	d409      	bmi.n	801362a <__kernel_rem_pio2+0x92>
 8013616:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 801361a:	ee07 3a90 	vmov	s15, r3
 801361e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013622:	eca5 7b02 	vstmia	r5!, {d7}
 8013626:	3201      	adds	r2, #1
 8013628:	e7e0      	b.n	80135ec <__kernel_rem_pio2+0x54>
 801362a:	eeb0 7b46 	vmov.f64	d7, d6
 801362e:	e7f8      	b.n	8013622 <__kernel_rem_pio2+0x8a>
 8013630:	ecb8 5b02 	vldmia	r8!, {d5}
 8013634:	ed96 6b00 	vldr	d6, [r6]
 8013638:	3501      	adds	r5, #1
 801363a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801363e:	428d      	cmp	r5, r1
 8013640:	f1a6 0608 	sub.w	r6, r6, #8
 8013644:	ddf4      	ble.n	8013630 <__kernel_rem_pio2+0x98>
 8013646:	ecaa 7b02 	vstmia	sl!, {d7}
 801364a:	f10c 0c01 	add.w	ip, ip, #1
 801364e:	3208      	adds	r2, #8
 8013650:	e7d6      	b.n	8013600 <__kernel_rem_pio2+0x68>
 8013652:	ab06      	add	r3, sp, #24
 8013654:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80138b0 <__kernel_rem_pio2+0x318>
 8013658:	ed9f ab97 	vldr	d10, [pc, #604]	; 80138b8 <__kernel_rem_pio2+0x320>
 801365c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8013660:	9303      	str	r3, [sp, #12]
 8013662:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8013666:	464d      	mov	r5, r9
 8013668:	00eb      	lsls	r3, r5, #3
 801366a:	9304      	str	r3, [sp, #16]
 801366c:	ab92      	add	r3, sp, #584	; 0x248
 801366e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8013672:	f10d 0b18 	add.w	fp, sp, #24
 8013676:	ab6a      	add	r3, sp, #424	; 0x1a8
 8013678:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801367c:	465e      	mov	r6, fp
 801367e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8013682:	4628      	mov	r0, r5
 8013684:	2800      	cmp	r0, #0
 8013686:	f1a2 0208 	sub.w	r2, r2, #8
 801368a:	dc4c      	bgt.n	8013726 <__kernel_rem_pio2+0x18e>
 801368c:	4620      	mov	r0, r4
 801368e:	9105      	str	r1, [sp, #20]
 8013690:	f000 fafa 	bl	8013c88 <scalbn>
 8013694:	eeb0 8b40 	vmov.f64	d8, d0
 8013698:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801369c:	ee28 0b00 	vmul.f64	d0, d8, d0
 80136a0:	f000 fa76 	bl	8013b90 <floor>
 80136a4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80136a8:	eea0 8b47 	vfms.f64	d8, d0, d7
 80136ac:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80136b0:	2c00      	cmp	r4, #0
 80136b2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80136b6:	ee17 8a90 	vmov	r8, s15
 80136ba:	ee38 8b40 	vsub.f64	d8, d8, d0
 80136be:	9905      	ldr	r1, [sp, #20]
 80136c0:	dd43      	ble.n	801374a <__kernel_rem_pio2+0x1b2>
 80136c2:	1e68      	subs	r0, r5, #1
 80136c4:	ab06      	add	r3, sp, #24
 80136c6:	f1c4 0c18 	rsb	ip, r4, #24
 80136ca:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80136ce:	fa46 f20c 	asr.w	r2, r6, ip
 80136d2:	4490      	add	r8, r2
 80136d4:	fa02 f20c 	lsl.w	r2, r2, ip
 80136d8:	1ab6      	subs	r6, r6, r2
 80136da:	f1c4 0217 	rsb	r2, r4, #23
 80136de:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80136e2:	4116      	asrs	r6, r2
 80136e4:	2e00      	cmp	r6, #0
 80136e6:	dd3f      	ble.n	8013768 <__kernel_rem_pio2+0x1d0>
 80136e8:	f04f 0c00 	mov.w	ip, #0
 80136ec:	f108 0801 	add.w	r8, r8, #1
 80136f0:	4660      	mov	r0, ip
 80136f2:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80136f6:	4565      	cmp	r5, ip
 80136f8:	dc6e      	bgt.n	80137d8 <__kernel_rem_pio2+0x240>
 80136fa:	2c00      	cmp	r4, #0
 80136fc:	dd04      	ble.n	8013708 <__kernel_rem_pio2+0x170>
 80136fe:	2c01      	cmp	r4, #1
 8013700:	d07f      	beq.n	8013802 <__kernel_rem_pio2+0x26a>
 8013702:	2c02      	cmp	r4, #2
 8013704:	f000 8087 	beq.w	8013816 <__kernel_rem_pio2+0x27e>
 8013708:	2e02      	cmp	r6, #2
 801370a:	d12d      	bne.n	8013768 <__kernel_rem_pio2+0x1d0>
 801370c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8013710:	ee30 8b48 	vsub.f64	d8, d0, d8
 8013714:	b340      	cbz	r0, 8013768 <__kernel_rem_pio2+0x1d0>
 8013716:	4620      	mov	r0, r4
 8013718:	9105      	str	r1, [sp, #20]
 801371a:	f000 fab5 	bl	8013c88 <scalbn>
 801371e:	9905      	ldr	r1, [sp, #20]
 8013720:	ee38 8b40 	vsub.f64	d8, d8, d0
 8013724:	e020      	b.n	8013768 <__kernel_rem_pio2+0x1d0>
 8013726:	ee20 7b09 	vmul.f64	d7, d0, d9
 801372a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801372e:	3801      	subs	r0, #1
 8013730:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8013734:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8013738:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801373c:	eca6 0a01 	vstmia	r6!, {s0}
 8013740:	ed92 0b00 	vldr	d0, [r2]
 8013744:	ee37 0b00 	vadd.f64	d0, d7, d0
 8013748:	e79c      	b.n	8013684 <__kernel_rem_pio2+0xec>
 801374a:	d105      	bne.n	8013758 <__kernel_rem_pio2+0x1c0>
 801374c:	1e6a      	subs	r2, r5, #1
 801374e:	ab06      	add	r3, sp, #24
 8013750:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013754:	15f6      	asrs	r6, r6, #23
 8013756:	e7c5      	b.n	80136e4 <__kernel_rem_pio2+0x14c>
 8013758:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801375c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013764:	da36      	bge.n	80137d4 <__kernel_rem_pio2+0x23c>
 8013766:	2600      	movs	r6, #0
 8013768:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801376c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013770:	f040 80aa 	bne.w	80138c8 <__kernel_rem_pio2+0x330>
 8013774:	f105 3bff 	add.w	fp, r5, #4294967295
 8013778:	4658      	mov	r0, fp
 801377a:	2200      	movs	r2, #0
 801377c:	4548      	cmp	r0, r9
 801377e:	da52      	bge.n	8013826 <__kernel_rem_pio2+0x28e>
 8013780:	2a00      	cmp	r2, #0
 8013782:	f000 8081 	beq.w	8013888 <__kernel_rem_pio2+0x2f0>
 8013786:	ab06      	add	r3, sp, #24
 8013788:	3c18      	subs	r4, #24
 801378a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801378e:	2b00      	cmp	r3, #0
 8013790:	f000 8087 	beq.w	80138a2 <__kernel_rem_pio2+0x30a>
 8013794:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8013798:	4620      	mov	r0, r4
 801379a:	f000 fa75 	bl	8013c88 <scalbn>
 801379e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80137a2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80138b0 <__kernel_rem_pio2+0x318>
 80137a6:	a96a      	add	r1, sp, #424	; 0x1a8
 80137a8:	f103 0208 	add.w	r2, r3, #8
 80137ac:	1888      	adds	r0, r1, r2
 80137ae:	4659      	mov	r1, fp
 80137b0:	2900      	cmp	r1, #0
 80137b2:	f280 80b7 	bge.w	8013924 <__kernel_rem_pio2+0x38c>
 80137b6:	4659      	mov	r1, fp
 80137b8:	2900      	cmp	r1, #0
 80137ba:	f2c0 80d5 	blt.w	8013968 <__kernel_rem_pio2+0x3d0>
 80137be:	a86a      	add	r0, sp, #424	; 0x1a8
 80137c0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 80137c4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80138a8 <__kernel_rem_pio2+0x310>
 80137c8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80138c4 <__kernel_rem_pio2+0x32c>
 80137cc:	2400      	movs	r4, #0
 80137ce:	ebab 0001 	sub.w	r0, fp, r1
 80137d2:	e0be      	b.n	8013952 <__kernel_rem_pio2+0x3ba>
 80137d4:	2602      	movs	r6, #2
 80137d6:	e787      	b.n	80136e8 <__kernel_rem_pio2+0x150>
 80137d8:	f8db 2000 	ldr.w	r2, [fp]
 80137dc:	b958      	cbnz	r0, 80137f6 <__kernel_rem_pio2+0x25e>
 80137de:	b122      	cbz	r2, 80137ea <__kernel_rem_pio2+0x252>
 80137e0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80137e4:	f8cb 2000 	str.w	r2, [fp]
 80137e8:	2201      	movs	r2, #1
 80137ea:	f10c 0c01 	add.w	ip, ip, #1
 80137ee:	f10b 0b04 	add.w	fp, fp, #4
 80137f2:	4610      	mov	r0, r2
 80137f4:	e77f      	b.n	80136f6 <__kernel_rem_pio2+0x15e>
 80137f6:	ebae 0202 	sub.w	r2, lr, r2
 80137fa:	f8cb 2000 	str.w	r2, [fp]
 80137fe:	4602      	mov	r2, r0
 8013800:	e7f3      	b.n	80137ea <__kernel_rem_pio2+0x252>
 8013802:	f105 3cff 	add.w	ip, r5, #4294967295
 8013806:	ab06      	add	r3, sp, #24
 8013808:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801380c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8013810:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8013814:	e778      	b.n	8013708 <__kernel_rem_pio2+0x170>
 8013816:	f105 3cff 	add.w	ip, r5, #4294967295
 801381a:	ab06      	add	r3, sp, #24
 801381c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8013820:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8013824:	e7f4      	b.n	8013810 <__kernel_rem_pio2+0x278>
 8013826:	ab06      	add	r3, sp, #24
 8013828:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801382c:	3801      	subs	r0, #1
 801382e:	431a      	orrs	r2, r3
 8013830:	e7a4      	b.n	801377c <__kernel_rem_pio2+0x1e4>
 8013832:	f10c 0c01 	add.w	ip, ip, #1
 8013836:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801383a:	2800      	cmp	r0, #0
 801383c:	d0f9      	beq.n	8013832 <__kernel_rem_pio2+0x29a>
 801383e:	9b04      	ldr	r3, [sp, #16]
 8013840:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8013844:	eb0d 0203 	add.w	r2, sp, r3
 8013848:	9b01      	ldr	r3, [sp, #4]
 801384a:	18e8      	adds	r0, r5, r3
 801384c:	ab1a      	add	r3, sp, #104	; 0x68
 801384e:	1c6e      	adds	r6, r5, #1
 8013850:	3a98      	subs	r2, #152	; 0x98
 8013852:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8013856:	4465      	add	r5, ip
 8013858:	42b5      	cmp	r5, r6
 801385a:	f6ff af05 	blt.w	8013668 <__kernel_rem_pio2+0xd0>
 801385e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8013862:	f8dd e008 	ldr.w	lr, [sp, #8]
 8013866:	ee07 3a90 	vmov	s15, r3
 801386a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801386e:	f04f 0c00 	mov.w	ip, #0
 8013872:	eca0 7b02 	vstmia	r0!, {d7}
 8013876:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80138a8 <__kernel_rem_pio2+0x310>
 801387a:	4680      	mov	r8, r0
 801387c:	458c      	cmp	ip, r1
 801387e:	dd07      	ble.n	8013890 <__kernel_rem_pio2+0x2f8>
 8013880:	eca2 7b02 	vstmia	r2!, {d7}
 8013884:	3601      	adds	r6, #1
 8013886:	e7e7      	b.n	8013858 <__kernel_rem_pio2+0x2c0>
 8013888:	9a03      	ldr	r2, [sp, #12]
 801388a:	f04f 0c01 	mov.w	ip, #1
 801388e:	e7d2      	b.n	8013836 <__kernel_rem_pio2+0x29e>
 8013890:	ecbe 5b02 	vldmia	lr!, {d5}
 8013894:	ed38 6b02 	vldmdb	r8!, {d6}
 8013898:	f10c 0c01 	add.w	ip, ip, #1
 801389c:	eea5 7b06 	vfma.f64	d7, d5, d6
 80138a0:	e7ec      	b.n	801387c <__kernel_rem_pio2+0x2e4>
 80138a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80138a6:	e76e      	b.n	8013786 <__kernel_rem_pio2+0x1ee>
	...
 80138b4:	3e700000 	.word	0x3e700000
 80138b8:	00000000 	.word	0x00000000
 80138bc:	41700000 	.word	0x41700000
 80138c0:	0801e7b0 	.word	0x0801e7b0
 80138c4:	0801e770 	.word	0x0801e770
 80138c8:	4260      	negs	r0, r4
 80138ca:	eeb0 0b48 	vmov.f64	d0, d8
 80138ce:	f000 f9db 	bl	8013c88 <scalbn>
 80138d2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8013ab0 <__kernel_rem_pio2+0x518>
 80138d6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80138da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138de:	db18      	blt.n	8013912 <__kernel_rem_pio2+0x37a>
 80138e0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8013ab8 <__kernel_rem_pio2+0x520>
 80138e4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80138e8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80138ec:	aa06      	add	r2, sp, #24
 80138ee:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80138f2:	eea5 0b46 	vfms.f64	d0, d5, d6
 80138f6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80138fa:	f105 0b01 	add.w	fp, r5, #1
 80138fe:	ee10 3a10 	vmov	r3, s0
 8013902:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8013906:	ee17 3a10 	vmov	r3, s14
 801390a:	3418      	adds	r4, #24
 801390c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8013910:	e740      	b.n	8013794 <__kernel_rem_pio2+0x1fc>
 8013912:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8013916:	aa06      	add	r2, sp, #24
 8013918:	ee10 3a10 	vmov	r3, s0
 801391c:	46ab      	mov	fp, r5
 801391e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8013922:	e737      	b.n	8013794 <__kernel_rem_pio2+0x1fc>
 8013924:	ac06      	add	r4, sp, #24
 8013926:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801392a:	9401      	str	r4, [sp, #4]
 801392c:	ee07 4a90 	vmov	s15, r4
 8013930:	3901      	subs	r1, #1
 8013932:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013936:	ee27 7b00 	vmul.f64	d7, d7, d0
 801393a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801393e:	ed20 7b02 	vstmdb	r0!, {d7}
 8013942:	e735      	b.n	80137b0 <__kernel_rem_pio2+0x218>
 8013944:	ecbc 5b02 	vldmia	ip!, {d5}
 8013948:	ecb5 6b02 	vldmia	r5!, {d6}
 801394c:	3401      	adds	r4, #1
 801394e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013952:	454c      	cmp	r4, r9
 8013954:	dc01      	bgt.n	801395a <__kernel_rem_pio2+0x3c2>
 8013956:	4284      	cmp	r4, r0
 8013958:	ddf4      	ble.n	8013944 <__kernel_rem_pio2+0x3ac>
 801395a:	ac42      	add	r4, sp, #264	; 0x108
 801395c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8013960:	ed80 7b00 	vstr	d7, [r0]
 8013964:	3901      	subs	r1, #1
 8013966:	e727      	b.n	80137b8 <__kernel_rem_pio2+0x220>
 8013968:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801396a:	2902      	cmp	r1, #2
 801396c:	dc0a      	bgt.n	8013984 <__kernel_rem_pio2+0x3ec>
 801396e:	2900      	cmp	r1, #0
 8013970:	dc2c      	bgt.n	80139cc <__kernel_rem_pio2+0x434>
 8013972:	d045      	beq.n	8013a00 <__kernel_rem_pio2+0x468>
 8013974:	f008 0007 	and.w	r0, r8, #7
 8013978:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801397c:	ecbd 8b06 	vpop	{d8-d10}
 8013980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013984:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8013986:	2a03      	cmp	r2, #3
 8013988:	d1f4      	bne.n	8013974 <__kernel_rem_pio2+0x3dc>
 801398a:	aa42      	add	r2, sp, #264	; 0x108
 801398c:	4413      	add	r3, r2
 801398e:	461a      	mov	r2, r3
 8013990:	4619      	mov	r1, r3
 8013992:	4658      	mov	r0, fp
 8013994:	2800      	cmp	r0, #0
 8013996:	f1a1 0108 	sub.w	r1, r1, #8
 801399a:	dc54      	bgt.n	8013a46 <__kernel_rem_pio2+0x4ae>
 801399c:	4659      	mov	r1, fp
 801399e:	2901      	cmp	r1, #1
 80139a0:	f1a2 0208 	sub.w	r2, r2, #8
 80139a4:	dc5f      	bgt.n	8013a66 <__kernel_rem_pio2+0x4ce>
 80139a6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8013ac0 <__kernel_rem_pio2+0x528>
 80139aa:	3308      	adds	r3, #8
 80139ac:	f1bb 0f01 	cmp.w	fp, #1
 80139b0:	dc69      	bgt.n	8013a86 <__kernel_rem_pio2+0x4ee>
 80139b2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80139b6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80139ba:	2e00      	cmp	r6, #0
 80139bc:	d16a      	bne.n	8013a94 <__kernel_rem_pio2+0x4fc>
 80139be:	ed87 5b00 	vstr	d5, [r7]
 80139c2:	ed87 6b02 	vstr	d6, [r7, #8]
 80139c6:	ed87 7b04 	vstr	d7, [r7, #16]
 80139ca:	e7d3      	b.n	8013974 <__kernel_rem_pio2+0x3dc>
 80139cc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8013ac0 <__kernel_rem_pio2+0x528>
 80139d0:	ab42      	add	r3, sp, #264	; 0x108
 80139d2:	441a      	add	r2, r3
 80139d4:	465b      	mov	r3, fp
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	da26      	bge.n	8013a28 <__kernel_rem_pio2+0x490>
 80139da:	b35e      	cbz	r6, 8013a34 <__kernel_rem_pio2+0x49c>
 80139dc:	eeb1 7b46 	vneg.f64	d7, d6
 80139e0:	ed87 7b00 	vstr	d7, [r7]
 80139e4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80139e8:	aa44      	add	r2, sp, #272	; 0x110
 80139ea:	2301      	movs	r3, #1
 80139ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80139f0:	459b      	cmp	fp, r3
 80139f2:	da22      	bge.n	8013a3a <__kernel_rem_pio2+0x4a2>
 80139f4:	b10e      	cbz	r6, 80139fa <__kernel_rem_pio2+0x462>
 80139f6:	eeb1 7b47 	vneg.f64	d7, d7
 80139fa:	ed87 7b02 	vstr	d7, [r7, #8]
 80139fe:	e7b9      	b.n	8013974 <__kernel_rem_pio2+0x3dc>
 8013a00:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8013ac0 <__kernel_rem_pio2+0x528>
 8013a04:	ab42      	add	r3, sp, #264	; 0x108
 8013a06:	441a      	add	r2, r3
 8013a08:	f1bb 0f00 	cmp.w	fp, #0
 8013a0c:	da05      	bge.n	8013a1a <__kernel_rem_pio2+0x482>
 8013a0e:	b10e      	cbz	r6, 8013a14 <__kernel_rem_pio2+0x47c>
 8013a10:	eeb1 7b47 	vneg.f64	d7, d7
 8013a14:	ed87 7b00 	vstr	d7, [r7]
 8013a18:	e7ac      	b.n	8013974 <__kernel_rem_pio2+0x3dc>
 8013a1a:	ed32 6b02 	vldmdb	r2!, {d6}
 8013a1e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013a22:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013a26:	e7ef      	b.n	8013a08 <__kernel_rem_pio2+0x470>
 8013a28:	ed32 7b02 	vldmdb	r2!, {d7}
 8013a2c:	3b01      	subs	r3, #1
 8013a2e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8013a32:	e7d0      	b.n	80139d6 <__kernel_rem_pio2+0x43e>
 8013a34:	eeb0 7b46 	vmov.f64	d7, d6
 8013a38:	e7d2      	b.n	80139e0 <__kernel_rem_pio2+0x448>
 8013a3a:	ecb2 6b02 	vldmia	r2!, {d6}
 8013a3e:	3301      	adds	r3, #1
 8013a40:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013a44:	e7d4      	b.n	80139f0 <__kernel_rem_pio2+0x458>
 8013a46:	ed91 7b00 	vldr	d7, [r1]
 8013a4a:	ed91 5b02 	vldr	d5, [r1, #8]
 8013a4e:	3801      	subs	r0, #1
 8013a50:	ee37 6b05 	vadd.f64	d6, d7, d5
 8013a54:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013a58:	ed81 6b00 	vstr	d6, [r1]
 8013a5c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8013a60:	ed81 7b02 	vstr	d7, [r1, #8]
 8013a64:	e796      	b.n	8013994 <__kernel_rem_pio2+0x3fc>
 8013a66:	ed92 7b00 	vldr	d7, [r2]
 8013a6a:	ed92 5b02 	vldr	d5, [r2, #8]
 8013a6e:	3901      	subs	r1, #1
 8013a70:	ee37 6b05 	vadd.f64	d6, d7, d5
 8013a74:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013a78:	ed82 6b00 	vstr	d6, [r2]
 8013a7c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8013a80:	ed82 7b02 	vstr	d7, [r2, #8]
 8013a84:	e78b      	b.n	801399e <__kernel_rem_pio2+0x406>
 8013a86:	ed33 6b02 	vldmdb	r3!, {d6}
 8013a8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013a8e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013a92:	e78b      	b.n	80139ac <__kernel_rem_pio2+0x414>
 8013a94:	eeb1 5b45 	vneg.f64	d5, d5
 8013a98:	eeb1 6b46 	vneg.f64	d6, d6
 8013a9c:	ed87 5b00 	vstr	d5, [r7]
 8013aa0:	eeb1 7b47 	vneg.f64	d7, d7
 8013aa4:	ed87 6b02 	vstr	d6, [r7, #8]
 8013aa8:	e78d      	b.n	80139c6 <__kernel_rem_pio2+0x42e>
 8013aaa:	bf00      	nop
 8013aac:	f3af 8000 	nop.w
 8013ab0:	00000000 	.word	0x00000000
 8013ab4:	41700000 	.word	0x41700000
 8013ab8:	00000000 	.word	0x00000000
 8013abc:	3e700000 	.word	0x3e700000
	...

08013ac8 <__kernel_sin>:
 8013ac8:	ee10 3a90 	vmov	r3, s1
 8013acc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013ad0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013ad4:	da04      	bge.n	8013ae0 <__kernel_sin+0x18>
 8013ad6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8013ada:	ee17 3a90 	vmov	r3, s15
 8013ade:	b35b      	cbz	r3, 8013b38 <__kernel_sin+0x70>
 8013ae0:	ee20 6b00 	vmul.f64	d6, d0, d0
 8013ae4:	ee20 5b06 	vmul.f64	d5, d0, d6
 8013ae8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8013b40 <__kernel_sin+0x78>
 8013aec:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8013b48 <__kernel_sin+0x80>
 8013af0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8013af4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8013b50 <__kernel_sin+0x88>
 8013af8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8013afc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8013b58 <__kernel_sin+0x90>
 8013b00:	eea7 4b06 	vfma.f64	d4, d7, d6
 8013b04:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8013b60 <__kernel_sin+0x98>
 8013b08:	eea4 7b06 	vfma.f64	d7, d4, d6
 8013b0c:	b930      	cbnz	r0, 8013b1c <__kernel_sin+0x54>
 8013b0e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8013b68 <__kernel_sin+0xa0>
 8013b12:	eea6 4b07 	vfma.f64	d4, d6, d7
 8013b16:	eea4 0b05 	vfma.f64	d0, d4, d5
 8013b1a:	4770      	bx	lr
 8013b1c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8013b20:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8013b24:	eea1 7b04 	vfma.f64	d7, d1, d4
 8013b28:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8013b2c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8013b70 <__kernel_sin+0xa8>
 8013b30:	eea5 1b07 	vfma.f64	d1, d5, d7
 8013b34:	ee30 0b41 	vsub.f64	d0, d0, d1
 8013b38:	4770      	bx	lr
 8013b3a:	bf00      	nop
 8013b3c:	f3af 8000 	nop.w
 8013b40:	5acfd57c 	.word	0x5acfd57c
 8013b44:	3de5d93a 	.word	0x3de5d93a
 8013b48:	8a2b9ceb 	.word	0x8a2b9ceb
 8013b4c:	be5ae5e6 	.word	0xbe5ae5e6
 8013b50:	57b1fe7d 	.word	0x57b1fe7d
 8013b54:	3ec71de3 	.word	0x3ec71de3
 8013b58:	19c161d5 	.word	0x19c161d5
 8013b5c:	bf2a01a0 	.word	0xbf2a01a0
 8013b60:	1110f8a6 	.word	0x1110f8a6
 8013b64:	3f811111 	.word	0x3f811111
 8013b68:	55555549 	.word	0x55555549
 8013b6c:	bfc55555 	.word	0xbfc55555
 8013b70:	55555549 	.word	0x55555549
 8013b74:	3fc55555 	.word	0x3fc55555

08013b78 <fabs>:
 8013b78:	ec51 0b10 	vmov	r0, r1, d0
 8013b7c:	ee10 2a10 	vmov	r2, s0
 8013b80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013b84:	ec43 2b10 	vmov	d0, r2, r3
 8013b88:	4770      	bx	lr
 8013b8a:	0000      	movs	r0, r0
 8013b8c:	0000      	movs	r0, r0
	...

08013b90 <floor>:
 8013b90:	ee10 1a90 	vmov	r1, s1
 8013b94:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013b98:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8013b9c:	2b13      	cmp	r3, #19
 8013b9e:	b530      	push	{r4, r5, lr}
 8013ba0:	ee10 0a10 	vmov	r0, s0
 8013ba4:	ee10 5a10 	vmov	r5, s0
 8013ba8:	dc31      	bgt.n	8013c0e <floor+0x7e>
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	da15      	bge.n	8013bda <floor+0x4a>
 8013bae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8013c68 <floor+0xd8>
 8013bb2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013bb6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bbe:	dd07      	ble.n	8013bd0 <floor+0x40>
 8013bc0:	2900      	cmp	r1, #0
 8013bc2:	da4e      	bge.n	8013c62 <floor+0xd2>
 8013bc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013bc8:	4318      	orrs	r0, r3
 8013bca:	d001      	beq.n	8013bd0 <floor+0x40>
 8013bcc:	4928      	ldr	r1, [pc, #160]	; (8013c70 <floor+0xe0>)
 8013bce:	2000      	movs	r0, #0
 8013bd0:	460b      	mov	r3, r1
 8013bd2:	4602      	mov	r2, r0
 8013bd4:	ec43 2b10 	vmov	d0, r2, r3
 8013bd8:	e020      	b.n	8013c1c <floor+0x8c>
 8013bda:	4a26      	ldr	r2, [pc, #152]	; (8013c74 <floor+0xe4>)
 8013bdc:	411a      	asrs	r2, r3
 8013bde:	ea01 0402 	and.w	r4, r1, r2
 8013be2:	4304      	orrs	r4, r0
 8013be4:	d01a      	beq.n	8013c1c <floor+0x8c>
 8013be6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8013c68 <floor+0xd8>
 8013bea:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013bee:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bf6:	ddeb      	ble.n	8013bd0 <floor+0x40>
 8013bf8:	2900      	cmp	r1, #0
 8013bfa:	bfbe      	ittt	lt
 8013bfc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8013c00:	fa40 f303 	asrlt.w	r3, r0, r3
 8013c04:	18c9      	addlt	r1, r1, r3
 8013c06:	ea21 0102 	bic.w	r1, r1, r2
 8013c0a:	2000      	movs	r0, #0
 8013c0c:	e7e0      	b.n	8013bd0 <floor+0x40>
 8013c0e:	2b33      	cmp	r3, #51	; 0x33
 8013c10:	dd05      	ble.n	8013c1e <floor+0x8e>
 8013c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013c16:	d101      	bne.n	8013c1c <floor+0x8c>
 8013c18:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013c1c:	bd30      	pop	{r4, r5, pc}
 8013c1e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8013c22:	f04f 32ff 	mov.w	r2, #4294967295
 8013c26:	40e2      	lsrs	r2, r4
 8013c28:	4202      	tst	r2, r0
 8013c2a:	d0f7      	beq.n	8013c1c <floor+0x8c>
 8013c2c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8013c68 <floor+0xd8>
 8013c30:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013c34:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c3c:	ddc8      	ble.n	8013bd0 <floor+0x40>
 8013c3e:	2900      	cmp	r1, #0
 8013c40:	da02      	bge.n	8013c48 <floor+0xb8>
 8013c42:	2b14      	cmp	r3, #20
 8013c44:	d103      	bne.n	8013c4e <floor+0xbe>
 8013c46:	3101      	adds	r1, #1
 8013c48:	ea20 0002 	bic.w	r0, r0, r2
 8013c4c:	e7c0      	b.n	8013bd0 <floor+0x40>
 8013c4e:	2401      	movs	r4, #1
 8013c50:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013c54:	fa04 f303 	lsl.w	r3, r4, r3
 8013c58:	4418      	add	r0, r3
 8013c5a:	42a8      	cmp	r0, r5
 8013c5c:	bf38      	it	cc
 8013c5e:	1909      	addcc	r1, r1, r4
 8013c60:	e7f2      	b.n	8013c48 <floor+0xb8>
 8013c62:	2000      	movs	r0, #0
 8013c64:	4601      	mov	r1, r0
 8013c66:	e7b3      	b.n	8013bd0 <floor+0x40>
 8013c68:	8800759c 	.word	0x8800759c
 8013c6c:	7e37e43c 	.word	0x7e37e43c
 8013c70:	bff00000 	.word	0xbff00000
 8013c74:	000fffff 	.word	0x000fffff

08013c78 <nan>:
 8013c78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013c80 <nan+0x8>
 8013c7c:	4770      	bx	lr
 8013c7e:	bf00      	nop
 8013c80:	00000000 	.word	0x00000000
 8013c84:	7ff80000 	.word	0x7ff80000

08013c88 <scalbn>:
 8013c88:	ee10 1a90 	vmov	r1, s1
 8013c8c:	b510      	push	{r4, lr}
 8013c8e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8013c92:	b98c      	cbnz	r4, 8013cb8 <scalbn+0x30>
 8013c94:	ee10 3a10 	vmov	r3, s0
 8013c98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013c9c:	430b      	orrs	r3, r1
 8013c9e:	d011      	beq.n	8013cc4 <scalbn+0x3c>
 8013ca0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8013d68 <scalbn+0xe0>
 8013ca4:	4b3c      	ldr	r3, [pc, #240]	; (8013d98 <scalbn+0x110>)
 8013ca6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013caa:	4298      	cmp	r0, r3
 8013cac:	da0b      	bge.n	8013cc6 <scalbn+0x3e>
 8013cae:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8013d70 <scalbn+0xe8>
 8013cb2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013cb6:	e005      	b.n	8013cc4 <scalbn+0x3c>
 8013cb8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8013cbc:	429c      	cmp	r4, r3
 8013cbe:	d107      	bne.n	8013cd0 <scalbn+0x48>
 8013cc0:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013cc4:	bd10      	pop	{r4, pc}
 8013cc6:	ee10 1a90 	vmov	r1, s1
 8013cca:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8013cce:	3c36      	subs	r4, #54	; 0x36
 8013cd0:	4404      	add	r4, r0
 8013cd2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8013cd6:	429c      	cmp	r4, r3
 8013cd8:	dd0d      	ble.n	8013cf6 <scalbn+0x6e>
 8013cda:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8013d78 <scalbn+0xf0>
 8013cde:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8013d80 <scalbn+0xf8>
 8013ce2:	eeb0 6b47 	vmov.f64	d6, d7
 8013ce6:	ee10 3a90 	vmov	r3, s1
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	fe27 7b05 	vselge.f64	d7, d7, d5
 8013cf0:	ee27 0b06 	vmul.f64	d0, d7, d6
 8013cf4:	e7e6      	b.n	8013cc4 <scalbn+0x3c>
 8013cf6:	2c00      	cmp	r4, #0
 8013cf8:	dd0a      	ble.n	8013d10 <scalbn+0x88>
 8013cfa:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8013cfe:	ec53 2b10 	vmov	r2, r3, d0
 8013d02:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8013d06:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8013d0a:	ec43 2b10 	vmov	d0, r2, r3
 8013d0e:	e7d9      	b.n	8013cc4 <scalbn+0x3c>
 8013d10:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8013d14:	da19      	bge.n	8013d4a <scalbn+0xc2>
 8013d16:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013d1a:	4298      	cmp	r0, r3
 8013d1c:	ee10 3a90 	vmov	r3, s1
 8013d20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013d24:	dd09      	ble.n	8013d3a <scalbn+0xb2>
 8013d26:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8013d78 <scalbn+0xf0>
 8013d2a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8013d80 <scalbn+0xf8>
 8013d2e:	eeb0 7b40 	vmov.f64	d7, d0
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8013d38:	e7bb      	b.n	8013cb2 <scalbn+0x2a>
 8013d3a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8013d70 <scalbn+0xe8>
 8013d3e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8013d88 <scalbn+0x100>
 8013d42:	eeb0 7b40 	vmov.f64	d7, d0
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	e7f4      	b.n	8013d34 <scalbn+0xac>
 8013d4a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8013d4e:	ec53 2b10 	vmov	r2, r3, d0
 8013d52:	3436      	adds	r4, #54	; 0x36
 8013d54:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8013d58:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8013d5c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8013d90 <scalbn+0x108>
 8013d60:	ec43 2b10 	vmov	d0, r2, r3
 8013d64:	e7a5      	b.n	8013cb2 <scalbn+0x2a>
 8013d66:	bf00      	nop
 8013d68:	00000000 	.word	0x00000000
 8013d6c:	43500000 	.word	0x43500000
 8013d70:	c2f8f359 	.word	0xc2f8f359
 8013d74:	01a56e1f 	.word	0x01a56e1f
 8013d78:	8800759c 	.word	0x8800759c
 8013d7c:	7e37e43c 	.word	0x7e37e43c
 8013d80:	8800759c 	.word	0x8800759c
 8013d84:	fe37e43c 	.word	0xfe37e43c
 8013d88:	c2f8f359 	.word	0xc2f8f359
 8013d8c:	81a56e1f 	.word	0x81a56e1f
 8013d90:	00000000 	.word	0x00000000
 8013d94:	3c900000 	.word	0x3c900000
 8013d98:	ffff3cb0 	.word	0xffff3cb0

08013d9c <_init>:
 8013d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d9e:	bf00      	nop
 8013da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013da2:	bc08      	pop	{r3}
 8013da4:	469e      	mov	lr, r3
 8013da6:	4770      	bx	lr

08013da8 <_fini>:
 8013da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013daa:	bf00      	nop
 8013dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013dae:	bc08      	pop	{r3}
 8013db0:	469e      	mov	lr, r3
 8013db2:	4770      	bx	lr
