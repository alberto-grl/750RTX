
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e1c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a758  080120c0  080120c0  000220c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c818  0801c818  0004f000  2**0
                  CONTENTS
  4 .ARM          00000008  0801c818  0801c818  0002c818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c820  0801c820  0004f000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c820  0801c820  0002c820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c824  0801c824  0002c824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005e0  24000000  0801c828  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f630  240005e0  0801ce08  000305e0  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  2400fc10  0801ce08  0003fc10  2**0
                  ALLOC
 11 .dtcm         0000f000  20000000  20000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  0004f000  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005bdeb  00000000  00000000  0004f02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000097f9  00000000  00000000  000aae19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b18  00000000  00000000  000b4618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000046e8  00000000  00000000  000b6130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004020a  00000000  00000000  000ba818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003dede  00000000  00000000  000faa22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00183ee7  00000000  00000000  00138900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  002bc7e7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007280  00000000  00000000  002bc8b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000288d4  00000000  00000000  002c3b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240005e0 	.word	0x240005e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080120a4 	.word	0x080120a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240005e4 	.word	0x240005e4
 80002dc:	080120a4 	.word	0x080120a4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <shiftBits>:
void shiftBits() {
	// we know we've got a dit or a dah, let's find out which
	// then we will shift the bits in myNum and then add 1 or not add 1

	//	if (downTime < dit / 3) return;  // ignore my keybounce //TODO serve? blocca l'autoregolazione
	if (downTime < 10) return;
 8000688:	4b41      	ldr	r3, [pc, #260]	; (8000790 <shiftBits+0x108>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	2a09      	cmp	r2, #9
 800068e:	dd5e      	ble.n	800074e <shiftBits+0xc6>

	myNum = myNum << 1;   // shift bits left
 8000690:	4940      	ldr	r1, [pc, #256]	; (8000794 <shiftBits+0x10c>)
	ditOrDah = true;        // we will know which one in two lines


	// If it is a dit we add 1. If it is a dah we do nothing!
	if (downTime < dit) {
 8000692:	4841      	ldr	r0, [pc, #260]	; (8000798 <shiftBits+0x110>)
	myNum = myNum << 1;   // shift bits left
 8000694:	680b      	ldr	r3, [r1, #0]
void shiftBits() {
 8000696:	b470      	push	{r4, r5, r6}
	ditOrDah = true;        // we will know which one in two lines
 8000698:	2601      	movs	r6, #1
	if (downTime < dit) {
 800069a:	6804      	ldr	r4, [r0, #0]
	ditOrDah = true;        // we will know which one in two lines
 800069c:	4d3f      	ldr	r5, [pc, #252]	; (800079c <shiftBits+0x114>)
	myNum = myNum << 1;   // shift bits left
 800069e:	40b3      	lsls	r3, r6
	if (downTime < dit) {
 80006a0:	42a2      	cmp	r2, r4
	ditOrDah = true;        // we will know which one in two lines
 80006a2:	702e      	strb	r6, [r5, #0]
	myNum = myNum << 1;   // shift bits left
 80006a4:	600b      	str	r3, [r1, #0]
	if (downTime < dit) {
 80006a6:	da01      	bge.n	80006ac <shiftBits+0x24>
		myNum++;           // add one because it is a dit
 80006a8:	4433      	add	r3, r6
 80006aa:	600b      	str	r3, [r1, #0]
	}
	LastPulsesRatio =  (float)downTime/ LastDownTime;
 80006ac:	ee07 2a90 	vmov	s15, r2
 80006b0:	493b      	ldr	r1, [pc, #236]	; (80007a0 <shiftBits+0x118>)
	if (((LastPulsesRatio > 1.8) && (LastPulsesRatio < 5.0)) || ((LastPulsesRatio > (1/1.8)) && (LastPulsesRatio < (1 / 5.0))))
 80006b2:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
	LastPulsesRatio =  (float)downTime/ LastDownTime;
 80006b6:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <shiftBits+0x11c>)
 80006b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006bc:	edd1 7a00 	vldr	s15, [r1]
 80006c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	if (((LastPulsesRatio > 1.8) && (LastPulsesRatio < 5.0)) || ((LastPulsesRatio > (1/1.8)) && (LastPulsesRatio < (1 / 5.0))))
 80006c4:	eeb4 7a46 	vcmp.f32	s14, s12
	LastPulsesRatio =  (float)downTime/ LastDownTime;
 80006c8:	ed83 7a00 	vstr	s14, [r3]
	if (((LastPulsesRatio > 1.8) && (LastPulsesRatio < 5.0)) || ((LastPulsesRatio > (1/1.8)) && (LastPulsesRatio < (1 / 5.0))))
 80006cc:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
 80006d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d4:	d506      	bpl.n	80006e4 <shiftBits+0x5c>
 80006d6:	ed9f 4b28 	vldr	d4, [pc, #160]	; 8000778 <shiftBits+0xf0>
 80006da:	eeb4 5bc4 	vcmpe.f64	d5, d4
 80006de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e2:	dc11      	bgt.n	8000708 <shiftBits+0x80>
 80006e4:	ed9f 4b26 	vldr	d4, [pc, #152]	; 8000780 <shiftBits+0xf8>
 80006e8:	eeb4 5b44 	vcmp.f64	d5, d4
 80006ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f0:	d506      	bpl.n	8000700 <shiftBits+0x78>
 80006f2:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8000788 <shiftBits+0x100>
 80006f6:	eeb4 5b44 	vcmp.f64	d5, d4
 80006fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006fe:	dc03      	bgt.n	8000708 <shiftBits+0x80>
		if (averageDah < 50)
			averageDah = 50;
		dit = averageDah / 3;                    // normal dit would be this
		dit = dit * 2;    // double it to get the threshold between dits and dahs
	}
	LastDownTime = downTime;
 8000700:	edc1 6a00 	vstr	s13, [r1]
}
 8000704:	bc70      	pop	{r4, r5, r6}
 8000706:	4770      	bx	lr
		if (LastPulsesRatio > 1)
 8000708:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800070c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8000710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000714:	dd1c      	ble.n	8000750 <shiftBits+0xc8>
 8000716:	4613      	mov	r3, r2
		averageDah = (downTime + 7 * averageDah) / 8;  // running average of dahs
 8000718:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		if (averageDah > 400)
 800071c:	f640 4587 	movw	r5, #3207	; 0xc87
		CurrentAverageDah = averageDah;
 8000720:	4e21      	ldr	r6, [pc, #132]	; (80007a8 <shiftBits+0x120>)
		averageDah = (downTime + 7 * averageDah) / 8;  // running average of dahs
 8000722:	4413      	add	r3, r2
 8000724:	4c21      	ldr	r4, [pc, #132]	; (80007ac <shiftBits+0x124>)
 8000726:	2b00      	cmp	r3, #0
 8000728:	461a      	mov	r2, r3
 800072a:	bfb8      	it	lt
 800072c:	1dda      	addlt	r2, r3, #7
		if (averageDah > 400)
 800072e:	42ab      	cmp	r3, r5
		averageDah = (downTime + 7 * averageDah) / 8;  // running average of dahs
 8000730:	ea4f 02e2 	mov.w	r2, r2, asr #3
		CurrentAverageDah = averageDah;
 8000734:	6032      	str	r2, [r6, #0]
		averageDah = (downTime + 7 * averageDah) / 8;  // running average of dahs
 8000736:	6022      	str	r2, [r4, #0]
		if (averageDah > 400)
 8000738:	dd0f      	ble.n	800075a <shiftBits+0xd2>
			averageDah = 400;
 800073a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800073e:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8000742:	6022      	str	r2, [r4, #0]
		dit = dit * 2;    // double it to get the threshold between dits and dahs
 8000744:	6003      	str	r3, [r0, #0]
	LastDownTime = downTime;
 8000746:	edc1 6a00 	vstr	s13, [r1]
}
 800074a:	bc70      	pop	{r4, r5, r6}
 800074c:	4770      	bx	lr
 800074e:	4770      	bx	lr
			averageDah = LastDownTime;
 8000750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000754:	ee17 3a90 	vmov	r3, s15
 8000758:	e7de      	b.n	8000718 <shiftBits+0x90>
		if (averageDah < 50)
 800075a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800075e:	da03      	bge.n	8000768 <shiftBits+0xe0>
			averageDah = 50;
 8000760:	2232      	movs	r2, #50	; 0x32
 8000762:	2320      	movs	r3, #32
 8000764:	6022      	str	r2, [r4, #0]
 8000766:	e7ed      	b.n	8000744 <shiftBits+0xbc>
 8000768:	2218      	movs	r2, #24
 800076a:	fb93 f3f2 	sdiv	r3, r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	e7e8      	b.n	8000744 <shiftBits+0xbc>
 8000772:	bf00      	nop
 8000774:	f3af 8000 	nop.w
 8000778:	cccccccd 	.word	0xcccccccd
 800077c:	3ffccccc 	.word	0x3ffccccc
 8000780:	9999999a 	.word	0x9999999a
 8000784:	3fc99999 	.word	0x3fc99999
 8000788:	71c71c72 	.word	0x71c71c72
 800078c:	3fe1c71c 	.word	0x3fe1c71c
 8000790:	240005fc 	.word	0x240005fc
 8000794:	2400060c 	.word	0x2400060c
 8000798:	24000024 	.word	0x24000024
 800079c:	24000028 	.word	0x24000028
 80007a0:	24008dd4 	.word	0x24008dd4
 80007a4:	24002f7c 	.word	0x24002f7c
 80007a8:	2400df20 	.word	0x2400df20
 80007ac:	24000000 	.word	0x24000000

080007b0 <printPunctuation>:
	// marks. Then as I was copying code off of web sites I added
	// characters we don't normally see on the air and the list got
	// a little long. Using 'switch' to handle them is much better.


	switch (myNum) {
 80007b0:	4b2a      	ldr	r3, [pc, #168]	; (800085c <printPunctuation+0xac>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b7a      	cmp	r3, #122	; 0x7a
 80007b6:	dc20      	bgt.n	80007fa <printPunctuation+0x4a>
 80007b8:	2b46      	cmp	r3, #70	; 0x46
 80007ba:	dd2a      	ble.n	8000812 <printPunctuation+0x62>
 80007bc:	3b47      	subs	r3, #71	; 0x47
 80007be:	2b33      	cmp	r3, #51	; 0x33
 80007c0:	d827      	bhi.n	8000812 <printPunctuation+0x62>
 80007c2:	e8df f003 	tbb	[pc, r3]
 80007c6:	262b      	.short	0x262b
 80007c8:	2f262626 	.word	0x2f262626
 80007cc:	26262626 	.word	0x26262626
 80007d0:	33262626 	.word	0x33262626
 80007d4:	26262626 	.word	0x26262626
 80007d8:	26262626 	.word	0x26262626
 80007dc:	26263726 	.word	0x26263726
 80007e0:	2626263b 	.word	0x2626263b
 80007e4:	2626263f 	.word	0x2626263f
 80007e8:	26264326 	.word	0x26264326
 80007ec:	26262626 	.word	0x26262626
 80007f0:	26472626 	.word	0x26472626
 80007f4:	26262626 	.word	0x26262626
 80007f8:	2226      	.short	0x2226
 80007fa:	2bf6      	cmp	r3, #246	; 0xf6
 80007fc:	d109      	bne.n	8000812 <printPunctuation+0x62>
		break;
	case 115:
		lcdGuy = '?';
		break;
	case 246:
		lcdGuy = '$';
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <printPunctuation+0xb0>)
 8000800:	2324      	movs	r3, #36	; 0x24
 8000802:	7013      	strb	r3, [r2, #0]
	sendToLCD();    // go figure out where to put it on the display
}

void sendToLCD(){

	DecodedCWChar = lcdGuy;
 8000804:	4a17      	ldr	r2, [pc, #92]	; (8000864 <printPunctuation+0xb4>)
 8000806:	7013      	strb	r3, [r2, #0]
}
 8000808:	4770      	bx	lr
		lcdGuy = 'k';
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <printPunctuation+0xb0>)
 800080c:	236b      	movs	r3, #107	; 0x6b
 800080e:	7013      	strb	r3, [r2, #0]
		break;
 8000810:	e7f8      	b.n	8000804 <printPunctuation+0x54>
		lcdGuy = '#';    // Should not get here
 8000812:	2223      	movs	r2, #35	; 0x23
 8000814:	4912      	ldr	r1, [pc, #72]	; (8000860 <printPunctuation+0xb0>)
		break;
 8000816:	4613      	mov	r3, r2
		lcdGuy = '#';    // Should not get here
 8000818:	700a      	strb	r2, [r1, #0]
		break;
 800081a:	e7f3      	b.n	8000804 <printPunctuation+0x54>
		lcdGuy = ':';
 800081c:	4a10      	ldr	r2, [pc, #64]	; (8000860 <printPunctuation+0xb0>)
 800081e:	233a      	movs	r3, #58	; 0x3a
 8000820:	7013      	strb	r3, [r2, #0]
		break;
 8000822:	e7ef      	b.n	8000804 <printPunctuation+0x54>
		lcdGuy = ',';
 8000824:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <printPunctuation+0xb0>)
 8000826:	232c      	movs	r3, #44	; 0x2c
 8000828:	7013      	strb	r3, [r2, #0]
		break;
 800082a:	e7eb      	b.n	8000804 <printPunctuation+0x54>
		lcdGuy = '!';
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <printPunctuation+0xb0>)
 800082e:	2321      	movs	r3, #33	; 0x21
 8000830:	7013      	strb	r3, [r2, #0]
		break;
 8000832:	e7e7      	b.n	8000804 <printPunctuation+0x54>
		lcdGuy = '-';
 8000834:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <printPunctuation+0xb0>)
 8000836:	232d      	movs	r3, #45	; 0x2d
 8000838:	7013      	strb	r3, [r2, #0]
		break;
 800083a:	e7e3      	b.n	8000804 <printPunctuation+0x54>
		lcdGuy = 39;    // Apostrophe
 800083c:	4a08      	ldr	r2, [pc, #32]	; (8000860 <printPunctuation+0xb0>)
 800083e:	2327      	movs	r3, #39	; 0x27
 8000840:	7013      	strb	r3, [r2, #0]
		break;
 8000842:	e7df      	b.n	8000804 <printPunctuation+0x54>
		lcdGuy = '@';
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <printPunctuation+0xb0>)
 8000846:	2340      	movs	r3, #64	; 0x40
 8000848:	7013      	strb	r3, [r2, #0]
		break;
 800084a:	e7db      	b.n	8000804 <printPunctuation+0x54>
		lcdGuy = '.';
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <printPunctuation+0xb0>)
 800084e:	232e      	movs	r3, #46	; 0x2e
 8000850:	7013      	strb	r3, [r2, #0]
		break;
 8000852:	e7d7      	b.n	8000804 <printPunctuation+0x54>
		lcdGuy = '?';
 8000854:	4a02      	ldr	r2, [pc, #8]	; (8000860 <printPunctuation+0xb0>)
 8000856:	233f      	movs	r3, #63	; 0x3f
 8000858:	7013      	strb	r3, [r2, #0]
		break;
 800085a:	e7d3      	b.n	8000804 <printPunctuation+0x54>
 800085c:	2400060c 	.word	0x2400060c
 8000860:	24000041 	.word	0x24000041
 8000864:	24009de4 	.word	0x24009de4

08000868 <keyIsUp>:
void keyIsUp() {
 8000868:	b570      	push	{r4, r5, r6, lr}
	if (startUpTime == 0){startUpTime = HAL_GetTick();}
 800086a:	4c3d      	ldr	r4, [pc, #244]	; (8000960 <keyIsUp+0xf8>)
	LED_GREEN_OFF;
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000872:	483c      	ldr	r0, [pc, #240]	; (8000964 <keyIsUp+0xfc>)
 8000874:	f006 fca0 	bl	80071b8 <HAL_GPIO_WritePin>
	if (startUpTime == 0){startUpTime = HAL_GetTick();}
 8000878:	6823      	ldr	r3, [r4, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d069      	beq.n	8000952 <keyIsUp+0xea>
	upTime = HAL_GetTick() - startUpTime;
 800087e:	f003 fcd1 	bl	8004224 <HAL_GetTick>
 8000882:	6823      	ldr	r3, [r4, #0]
 8000884:	4c38      	ldr	r4, [pc, #224]	; (8000968 <keyIsUp+0x100>)
 8000886:	1ac0      	subs	r0, r0, r3
	if (upTime<10)return;
 8000888:	2809      	cmp	r0, #9
	upTime = HAL_GetTick() - startUpTime;
 800088a:	6020      	str	r0, [r4, #0]
	if (upTime<10)return;
 800088c:	dd4d      	ble.n	800092a <keyIsUp+0xc2>
	if (upTime > (averageDah*2)) {
 800088e:	4b37      	ldr	r3, [pc, #220]	; (800096c <keyIsUp+0x104>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 8000896:	dd26      	ble.n	80008e6 <keyIsUp+0x7e>
	if (justDid) return;  // only one space, no matter how long the gap
 8000898:	4b35      	ldr	r3, [pc, #212]	; (8000970 <keyIsUp+0x108>)
 800089a:	781a      	ldrb	r2, [r3, #0]
 800089c:	bb1a      	cbnz	r2, 80008e6 <keyIsUp+0x7e>
	averageWordGap = ((averageWordGap + upTime) / 2) + 20;
 800089e:	4a35      	ldr	r2, [pc, #212]	; (8000974 <keyIsUp+0x10c>)
	justDid = true;       // so we don't do this twice
 80008a0:	2501      	movs	r5, #1
	currentLine[letterCount]=' ';  // and a space to the variable that stores the current line
 80008a2:	4e35      	ldr	r6, [pc, #212]	; (8000978 <keyIsUp+0x110>)
	averageWordGap = ((averageWordGap + upTime) / 2) + 20;
 80008a4:	6811      	ldr	r1, [r2, #0]
	justDid = true;       // so we don't do this twice
 80008a6:	701d      	strb	r5, [r3, #0]
	averageWordGap = ((averageWordGap + upTime) / 2) + 20;
 80008a8:	1840      	adds	r0, r0, r1
	currentLine[letterCount]=' ';  // and a space to the variable that stores the current line
 80008aa:	4b34      	ldr	r3, [pc, #208]	; (800097c <keyIsUp+0x114>)
	averageWordGap = ((averageWordGap + upTime) / 2) + 20;
 80008ac:	bf48      	it	mi
 80008ae:	1940      	addmi	r0, r0, r5
	currentLine[letterCount]=' ';  // and a space to the variable that stores the current line
 80008b0:	6819      	ldr	r1, [r3, #0]
	lastSpace=letterCount;         // keep track of this, our last, space
 80008b2:	4b33      	ldr	r3, [pc, #204]	; (8000980 <keyIsUp+0x118>)
	currentLine[letterCount]=' ';  // and a space to the variable that stores the current line
 80008b4:	2520      	movs	r5, #32
	averageWordGap = ((averageWordGap + upTime) / 2) + 20;
 80008b6:	1040      	asrs	r0, r0, #1
	if (letterCount < 20) {
 80008b8:	2913      	cmp	r1, #19
	lastSpace=letterCount;         // keep track of this, our last, space
 80008ba:	6019      	str	r1, [r3, #0]
	averageWordGap = ((averageWordGap + upTime) / 2) + 20;
 80008bc:	f100 0014 	add.w	r0, r0, #20
	lastWordCount=0;      // start counting length of word again
 80008c0:	4b30      	ldr	r3, [pc, #192]	; (8000984 <keyIsUp+0x11c>)
	currentLine[letterCount]=' ';  // and a space to the variable that stores the current line
 80008c2:	5475      	strb	r5, [r6, r1]
	averageWordGap = ((averageWordGap + upTime) / 2) + 20;
 80008c4:	6010      	str	r0, [r2, #0]
	lastWordCount=0;      // start counting length of word again
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lcdGuy=' ';         // this is going to go to the LCD
 80008ce:	4e2e      	ldr	r6, [pc, #184]	; (8000988 <keyIsUp+0x120>)
	lastWordCount=0;      // start counting length of word again
 80008d0:	6018      	str	r0, [r3, #0]
	for (int i=0; i<20; i++) {
 80008d2:	4b2e      	ldr	r3, [pc, #184]	; (800098c <keyIsUp+0x124>)
	lcdGuy=' ';         // this is going to go to the LCD
 80008d4:	7035      	strb	r5, [r6, #0]
 80008d6:	611a      	str	r2, [r3, #16]
	if (letterCount < 20) {
 80008d8:	e9c3 2200 	strd	r2, r2, [r3]
 80008dc:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80008e0:	dc01      	bgt.n	80008e6 <keyIsUp+0x7e>
	DecodedCWChar = lcdGuy;
 80008e2:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <keyIsUp+0x128>)
 80008e4:	701d      	strb	r5, [r3, #0]
	if (startDownTime > 0){
 80008e6:	4d2b      	ldr	r5, [pc, #172]	; (8000994 <keyIsUp+0x12c>)
 80008e8:	682b      	ldr	r3, [r5, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dc1e      	bgt.n	800092c <keyIsUp+0xc4>
	if (!ditOrDah) {
 80008ee:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <keyIsUp+0x130>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b33b      	cbz	r3, 8000944 <keyIsUp+0xdc>
	if (!characterDone) {
 80008f4:	4829      	ldr	r0, [pc, #164]	; (800099c <keyIsUp+0x134>)
 80008f6:	7803      	ldrb	r3, [r0, #0]
 80008f8:	b9bb      	cbnz	r3, 800092a <keyIsUp+0xc2>
		if (upTime > dit) {
 80008fa:	4a29      	ldr	r2, [pc, #164]	; (80009a0 <keyIsUp+0x138>)
 80008fc:	6821      	ldr	r1, [r4, #0]
 80008fe:	6812      	ldr	r2, [r2, #0]
 8000900:	4291      	cmp	r1, r2
 8000902:	dd0f      	ble.n	8000924 <keyIsUp+0xbc>
	if (myNum > 63) {
 8000904:	4c27      	ldr	r4, [pc, #156]	; (80009a4 <keyIsUp+0x13c>)
	justDid = false;         // OK to print a space again after this
 8000906:	491a      	ldr	r1, [pc, #104]	; (8000970 <keyIsUp+0x108>)
	if (myNum > 63) {
 8000908:	6822      	ldr	r2, [r4, #0]
	justDid = false;         // OK to print a space again after this
 800090a:	700b      	strb	r3, [r1, #0]
	if (myNum > 63) {
 800090c:	2a3f      	cmp	r2, #63	; 0x3f
 800090e:	dc24      	bgt.n	800095a <keyIsUp+0xf2>
	lcdGuy = mySet[myNum]; // Find the letter in the character set
 8000910:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <keyIsUp+0x140>)
 8000912:	491d      	ldr	r1, [pc, #116]	; (8000988 <keyIsUp+0x120>)
 8000914:	5c9b      	ldrb	r3, [r3, r2]
	DecodedCWChar = lcdGuy;
 8000916:	4a1e      	ldr	r2, [pc, #120]	; (8000990 <keyIsUp+0x128>)
	lcdGuy = mySet[myNum]; // Find the letter in the character set
 8000918:	700b      	strb	r3, [r1, #0]
	DecodedCWChar = lcdGuy;
 800091a:	7013      	strb	r3, [r2, #0]
			characterDone=true;     // We got him, we're done here
 800091c:	2201      	movs	r2, #1
			myNum=0;                // This sets us up for getting the next start bit
 800091e:	2300      	movs	r3, #0
			characterDone=true;     // We got him, we're done here
 8000920:	7002      	strb	r2, [r0, #0]
			myNum=0;                // This sets us up for getting the next start bit
 8000922:	6023      	str	r3, [r4, #0]
		downTime=0;               // Reset our keyDown counter
 8000924:	4b21      	ldr	r3, [pc, #132]	; (80009ac <keyIsUp+0x144>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
}
 800092a:	bd70      	pop	{r4, r5, r6, pc}
		downTime = HAL_GetTick() - startDownTime;  // how long was the tone on?
 800092c:	f003 fc7a 	bl	8004224 <HAL_GetTick>
 8000930:	6829      	ldr	r1, [r5, #0]
 8000932:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <keyIsUp+0x144>)
		startDownTime=0;      // clear the 'Key Down' timer
 8000934:	2200      	movs	r2, #0
		downTime = HAL_GetTick() - startDownTime;  // how long was the tone on?
 8000936:	1a40      	subs	r0, r0, r1
		startDownTime=0;      // clear the 'Key Down' timer
 8000938:	602a      	str	r2, [r5, #0]
		downTime = HAL_GetTick() - startDownTime;  // how long was the tone on?
 800093a:	6018      	str	r0, [r3, #0]
	if (!ditOrDah) {
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <keyIsUp+0x130>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1d7      	bne.n	80008f4 <keyIsUp+0x8c>
		shiftBits();    // let's go find out! And do our Magic with the bits
 8000944:	f7ff fea0 	bl	8000688 <shiftBits>
	if (!characterDone) {
 8000948:	4814      	ldr	r0, [pc, #80]	; (800099c <keyIsUp+0x134>)
 800094a:	7803      	ldrb	r3, [r0, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d1ec      	bne.n	800092a <keyIsUp+0xc2>
 8000950:	e7d3      	b.n	80008fa <keyIsUp+0x92>
	if (startUpTime == 0){startUpTime = HAL_GetTick();}
 8000952:	f003 fc67 	bl	8004224 <HAL_GetTick>
 8000956:	6020      	str	r0, [r4, #0]
 8000958:	e791      	b.n	800087e <keyIsUp+0x16>
		printPunctuation();  // The value we parsed is bigger than our character array
 800095a:	f7ff ff29 	bl	80007b0 <printPunctuation>
		return;              // Go back to the main loop(), we're done here.
 800095e:	e7dd      	b.n	800091c <keyIsUp+0xb4>
 8000960:	24000614 	.word	0x24000614
 8000964:	58020000 	.word	0x58020000
 8000968:	24000618 	.word	0x24000618
 800096c:	24000000 	.word	0x24000000
 8000970:	24000029 	.word	0x24000029
 8000974:	24000004 	.word	0x24000004
 8000978:	2400000c 	.word	0x2400000c
 800097c:	24000608 	.word	0x24000608
 8000980:	24000600 	.word	0x24000600
 8000984:	24000604 	.word	0x24000604
 8000988:	24000041 	.word	0x24000041
 800098c:	2400002c 	.word	0x2400002c
 8000990:	24009de4 	.word	0x24009de4
 8000994:	24000610 	.word	0x24000610
 8000998:	24000028 	.word	0x24000028
 800099c:	24000008 	.word	0x24000008
 80009a0:	24000024 	.word	0x24000024
 80009a4:	2400060c 	.word	0x2400060c
 80009a8:	24000044 	.word	0x24000044
 80009ac:	240005fc 	.word	0x240005fc

080009b0 <DecodeCW>:
	if (CWIn > 1) keyIsDown();       // tone is being decoded
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <DecodeCW+0x4c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d91a      	bls.n	80009ee <DecodeCW+0x3e>
	LED_GREEN_ON;
 80009b8:	2201      	movs	r2, #1
 80009ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009be:	4810      	ldr	r0, [pc, #64]	; (8000a00 <DecodeCW+0x50>)
{
 80009c0:	b510      	push	{r4, lr}
	LED_GREEN_ON;
 80009c2:	f006 fbf9 	bl	80071b8 <HAL_GPIO_WritePin>
	if (startUpTime>0){
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <DecodeCW+0x54>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	dd01      	ble.n	80009d2 <DecodeCW+0x22>
		startUpTime=0;    // clear the 'Key Up' timer
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
	if (startDownTime == 0){
 80009d2:	4c0d      	ldr	r4, [pc, #52]	; (8000a08 <DecodeCW+0x58>)
 80009d4:	6823      	ldr	r3, [r4, #0]
 80009d6:	b163      	cbz	r3, 80009f2 <DecodeCW+0x42>
	if (myNum == 0) {      // myNum will equal zero at the beginning of a character
 80009d8:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <DecodeCW+0x5c>)
	characterDone=false; // we're still building a character
 80009da:	2300      	movs	r3, #0
 80009dc:	4c0c      	ldr	r4, [pc, #48]	; (8000a10 <DecodeCW+0x60>)
	ditOrDah=false;      // the key is still down we're not done with the tone
 80009de:	480d      	ldr	r0, [pc, #52]	; (8000a14 <DecodeCW+0x64>)
	if (myNum == 0) {      // myNum will equal zero at the beginning of a character
 80009e0:	6811      	ldr	r1, [r2, #0]
	characterDone=false; // we're still building a character
 80009e2:	7023      	strb	r3, [r4, #0]
	ditOrDah=false;      // the key is still down we're not done with the tone
 80009e4:	7003      	strb	r3, [r0, #0]
	if (myNum == 0) {      // myNum will equal zero at the beginning of a character
 80009e6:	b909      	cbnz	r1, 80009ec <DecodeCW+0x3c>
		myNum = 1;          // This is our start bit  - it only does this once per letter
 80009e8:	2301      	movs	r3, #1
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bd10      	pop	{r4, pc}
	else keyIsUp();          //  no tone is there
 80009ee:	f7ff bf3b 	b.w	8000868 <keyIsUp>
		startDownTime = HAL_GetTick();  // get Arduino's current clock time
 80009f2:	f003 fc17 	bl	8004224 <HAL_GetTick>
 80009f6:	6020      	str	r0, [r4, #0]
 80009f8:	e7ee      	b.n	80009d8 <DecodeCW+0x28>
 80009fa:	bf00      	nop
 80009fc:	24007b4c 	.word	0x24007b4c
 8000a00:	58020000 	.word	0x58020000
 8000a04:	24000614 	.word	0x24000614
 8000a08:	24000610 	.word	0x24000610
 8000a0c:	2400060c 	.word	0x2400060c
 8000a10:	24000008 	.word	0x24000008
 8000a14:	24000028 	.word	0x24000028

08000a18 <Load_Presets>:
// Load from the Presets table
void Load_Presets(void)
{
	int k;

	for(k=0; k<MAXPRESETS; k++)
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <Load_Presets+0x40>)
{
 8000a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a1e:	4c0f      	ldr	r4, [pc, #60]	; (8000a5c <Load_Presets+0x44>)
 8000a20:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 8000a24:	4f0e      	ldr	r7, [pc, #56]	; (8000a60 <Load_Presets+0x48>)
 8000a26:	4e0f      	ldr	r6, [pc, #60]	; (8000a64 <Load_Presets+0x4c>)
 8000a28:	4d0f      	ldr	r5, [pc, #60]	; (8000a68 <Load_Presets+0x50>)
	{
		strcpy(psets[k].name, pNames[k]);
 8000a2a:	4621      	mov	r1, r4
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f00e f841 	bl	800eab4 <strcpy>
		psets[k].freq = pFreqs[k];
		psets[k].mode = pModes[k];
 8000a32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		strcpy(psets[k].name, pNames[k]);
 8000a36:	4603      	mov	r3, r0
		psets[k].bw   = pBws[k];
 8000a38:	f815 2f01 	ldrb.w	r2, [r5, #1]!
		psets[k].freq = pFreqs[k];
 8000a3c:	f857 0b04 	ldr.w	r0, [r7], #4
 8000a40:	3410      	adds	r4, #16
		psets[k].mode = pModes[k];
 8000a42:	7519      	strb	r1, [r3, #20]
 8000a44:	3318      	adds	r3, #24
		psets[k].freq = pFreqs[k];
 8000a46:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 8000a4a:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 8000a4e:	4543      	cmp	r3, r8
 8000a50:	d1eb      	bne.n	8000a2a <Load_Presets+0x12>
	}
}
 8000a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a56:	bf00      	nop
 8000a58:	24008c30 	.word	0x24008c30
 8000a5c:	24000088 	.word	0x24000088
 8000a60:	080180d0 	.word	0x080180d0
 8000a64:	08018107 	.word	0x08018107
 8000a68:	080180bf 	.word	0x080180bf

08000a6c <SetBW>:
// Load the FFT mask according to the mode and the bandwidth chosen,
// and change the color of the buttons to indicate the active bandwidth
void SetBW(/*WM_HWIN ptr,*/ Bwidth newbw)
{
	CurrentBW = newbw;
	switch(CurrentMode)
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <SetBW+0x8c>)
	CurrentBW = newbw;
 8000a6e:	4a23      	ldr	r2, [pc, #140]	; (8000afc <SetBW+0x90>)
{
 8000a70:	b470      	push	{r4, r5, r6}
 8000a72:	781b      	ldrb	r3, [r3, #0]
	CurrentBW = newbw;
 8000a74:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d83c      	bhi.n	8000af4 <SetBW+0x88>
 8000a7a:	e8df f003 	tbb	[pc, r3]
 8000a7e:	1c0f      	.short	0x1c0f
 8000a80:	022f      	.short	0x022f

		break;

	case CW  :

		bw[CW] = newbw;
 8000a82:	491f      	ldr	r1, [pc, #124]	; (8000b00 <SetBW+0x94>)
		CWindex = (newbw == Narrow) ? 0 : 1;
		CWindex = 0; // TODO toglimi
 8000a84:	2500      	movs	r5, #0
 8000a86:	4c1f      	ldr	r4, [pc, #124]	; (8000b04 <SetBW+0x98>)
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[CW] = newbw;
 8000a8c:	70c8      	strb	r0, [r1, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000a8e:	4a1e      	ldr	r2, [pc, #120]	; (8000b08 <SetBW+0x9c>)
		CWindex = 0; // TODO toglimi
 8000a90:	8025      	strh	r5, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000a92:	491e      	ldr	r1, [pc, #120]	; (8000b0c <SetBW+0xa0>)
 8000a94:	481e      	ldr	r0, [pc, #120]	; (8000b10 <SetBW+0xa4>)
		break;

	default :
		break;
	}
}	
 8000a96:	bc70      	pop	{r4, r5, r6}
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000a98:	f001 b924 	b.w	8001ce4 <SDR_2R_toC_f32>
		bw[AM] = newbw;
 8000a9c:	4918      	ldr	r1, [pc, #96]	; (8000b00 <SetBW+0x94>)
		AMindex = 0; // TODO toglimi
 8000a9e:	2500      	movs	r5, #0
 8000aa0:	4c1c      	ldr	r4, [pc, #112]	; (8000b14 <SetBW+0xa8>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[AM] = newbw;
 8000aa6:	7008      	strb	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000aa8:	4a17      	ldr	r2, [pc, #92]	; (8000b08 <SetBW+0x9c>)
		AMindex = 0; // TODO toglimi
 8000aaa:	8025      	strh	r5, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000aac:	491a      	ldr	r1, [pc, #104]	; (8000b18 <SetBW+0xac>)
 8000aae:	481b      	ldr	r0, [pc, #108]	; (8000b1c <SetBW+0xb0>)
}	
 8000ab0:	bc70      	pop	{r4, r5, r6}
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000ab2:	f001 b917 	b.w	8001ce4 <SDR_2R_toC_f32>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000ab6:	1e06      	subs	r6, r0, #0
		bw[LSB] = newbw;
 8000ab8:	4a11      	ldr	r2, [pc, #68]	; (8000b00 <SetBW+0x94>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000aba:	4916      	ldr	r1, [pc, #88]	; (8000b14 <SetBW+0xa8>)
		LSBindex = 0; // TODO toglimi
 8000abc:	f04f 0500 	mov.w	r5, #0
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000ac0:	bf18      	it	ne
 8000ac2:	2601      	movne	r6, #1
		LSBindex = 0; // TODO toglimi
 8000ac4:	4c16      	ldr	r4, [pc, #88]	; (8000b20 <SetBW+0xb4>)
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex],
 8000ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[LSB] = newbw;
 8000aca:	7050      	strb	r0, [r2, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000acc:	800e      	strh	r6, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000ace:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <SetBW+0x9c>)
		USBindex = 0; // TODO toglimi
 8000ad0:	8025      	strh	r5, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000ad2:	4914      	ldr	r1, [pc, #80]	; (8000b24 <SetBW+0xb8>)
 8000ad4:	4814      	ldr	r0, [pc, #80]	; (8000b28 <SetBW+0xbc>)
}	
 8000ad6:	bc70      	pop	{r4, r5, r6}
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000ad8:	f001 b904 	b.w	8001ce4 <SDR_2R_toC_f32>
		bw[USB] = newbw;
 8000adc:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <SetBW+0x94>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000ade:	1e06      	subs	r6, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000ae0:	490c      	ldr	r1, [pc, #48]	; (8000b14 <SetBW+0xa8>)
		USBindex = 0; // TODO toglimi
 8000ae2:	f04f 0500 	mov.w	r5, #0
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000ae6:	bf18      	it	ne
 8000ae8:	2601      	movne	r6, #1
		USBindex = 0; // TODO toglimi
 8000aea:	4c10      	ldr	r4, [pc, #64]	; (8000b2c <SetBW+0xc0>)
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[USB] = newbw;
 8000af0:	7090      	strb	r0, [r2, #2]
 8000af2:	e7eb      	b.n	8000acc <SetBW+0x60>
}	
 8000af4:	bc70      	pop	{r4, r5, r6}
 8000af6:	4770      	bx	lr
 8000af8:	2400cf18 	.word	0x2400cf18
 8000afc:	24000f70 	.word	0x24000f70
 8000b00:	24008de0 	.word	0x24008de0
 8000b04:	24008ddc 	.word	0x24008ddc
 8000b08:	20004000 	.word	0x20004000
 8000b0c:	080140c0 	.word	0x080140c0
 8000b10:	080150c0 	.word	0x080150c0
 8000b14:	2400e326 	.word	0x2400e326
 8000b18:	080120c0 	.word	0x080120c0
 8000b1c:	080130c0 	.word	0x080130c0
 8000b20:	2400e324 	.word	0x2400e324
 8000b24:	080160c0 	.word	0x080160c0
 8000b28:	080170c0 	.word	0x080170c0
 8000b2c:	240083a4 	.word	0x240083a4

08000b30 <SetAGC>:
// Change the AGC constants according to the mode and the AGC chosen,
// and change the color of the buttons to indicate the active AGC speed
void SetAGC(/*WM_HWIN ptr,*/ Agctype newAGC)
{
	CurrentAGC =newAGC;
	switch(CurrentMode)
 8000b30:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <SetAGC+0x90>)
	CurrentAGC =newAGC;
 8000b32:	4a24      	ldr	r2, [pc, #144]	; (8000bc4 <SetAGC+0x94>)
{
 8000b34:	b430      	push	{r4, r5}
 8000b36:	781b      	ldrb	r3, [r3, #0]
	CurrentAGC =newAGC;
 8000b38:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d810      	bhi.n	8000b60 <SetAGC+0x30>
 8000b3e:	e8df f003 	tbb	[pc, r3]
 8000b42:	2011      	.short	0x2011
 8000b44:	022f      	.short	0x022f
	case USB :      agc[USB] = newAGC;
	Decay[USB]  = AGC_decay[newAGC];
	Hcount[USB] = Hangcount[newAGC]; break;

	case CW :       agc[CW] = newAGC;
	Decay[CW]   = AGC_decay[newAGC];
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <SetAGC+0x98>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b48:	4a20      	ldr	r2, [pc, #128]	; (8000bcc <SetAGC+0x9c>)
	Decay[CW]   = AGC_decay[newAGC];
 8000b4a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000b4e:	4c20      	ldr	r4, [pc, #128]	; (8000bd0 <SetAGC+0xa0>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b50:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000b54:	681d      	ldr	r5, [r3, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b56:	4a1f      	ldr	r2, [pc, #124]	; (8000bd4 <SetAGC+0xa4>)
	case CW :       agc[CW] = newAGC;
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <SetAGC+0xa8>)
	Decay[CW]   = AGC_decay[newAGC];
 8000b5a:	60e5      	str	r5, [r4, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b5c:	80d1      	strh	r1, [r2, #6]
	case CW :       agc[CW] = newAGC;
 8000b5e:	70d8      	strb	r0, [r3, #3]
	}
	//  ChangeColor(ptr, hFAST, (newAGC == Fast) ? GUI_RED   : GUI_BLACK);
	//  ChangeColor(ptr, hSLOW, (newAGC == Slow) ? GUI_RED   : GUI_BLACK);
}	
 8000b60:	bc30      	pop	{r4, r5}
 8000b62:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <SetAGC+0x98>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b66:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <SetAGC+0x9c>)
	Decay[AM]   = AGC_decay[newAGC];
 8000b68:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000b6c:	4c18      	ldr	r4, [pc, #96]	; (8000bd0 <SetAGC+0xa0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b6e:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8000b72:	681d      	ldr	r5, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b74:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <SetAGC+0xa4>)
	case AM :       agc[AM] = newAGC;
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 8000b78:	6025      	str	r5, [r4, #0]
	case AM :       agc[AM] = newAGC;
 8000b7a:	7018      	strb	r0, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b7c:	8011      	strh	r1, [r2, #0]
}	
 8000b7e:	bc30      	pop	{r4, r5}
 8000b80:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <SetAGC+0x98>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b84:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <SetAGC+0x9c>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000b86:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000b8a:	4c11      	ldr	r4, [pc, #68]	; (8000bd0 <SetAGC+0xa0>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b8c:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000b90:	681d      	ldr	r5, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <SetAGC+0xa4>)
	case LSB :      agc[LSB] = newAGC;
 8000b94:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000b96:	6065      	str	r5, [r4, #4]
	case LSB :      agc[LSB] = newAGC;
 8000b98:	7058      	strb	r0, [r3, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b9a:	8051      	strh	r1, [r2, #2]
}	
 8000b9c:	bc30      	pop	{r4, r5}
 8000b9e:	4770      	bx	lr
	Decay[USB]  = AGC_decay[newAGC];
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <SetAGC+0x98>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <SetAGC+0x9c>)
	Decay[USB]  = AGC_decay[newAGC];
 8000ba4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000ba8:	4c09      	ldr	r4, [pc, #36]	; (8000bd0 <SetAGC+0xa0>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000baa:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000bae:	681d      	ldr	r5, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000bb0:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <SetAGC+0xa4>)
	case USB :      agc[USB] = newAGC;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 8000bb4:	60a5      	str	r5, [r4, #8]
	case USB :      agc[USB] = newAGC;
 8000bb6:	7098      	strb	r0, [r3, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000bb8:	8091      	strh	r1, [r2, #4]
}	
 8000bba:	bc30      	pop	{r4, r5}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	2400cf18 	.word	0x2400cf18
 8000bc4:	24000b60 	.word	0x24000b60
 8000bc8:	2400cf08 	.word	0x2400cf08
 8000bcc:	24009df0 	.word	0x24009df0
 8000bd0:	24002f80 	.word	0x24002f80
 8000bd4:	2400838c 	.word	0x2400838c
 8000bd8:	24007b48 	.word	0x24007b48

08000bdc <Tune_Preset>:
{
 8000bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOfreq = psets[Idx].freq;
 8000be0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8000be4:	4e48      	ldr	r6, [pc, #288]	; (8000d08 <Tune_Preset+0x12c>)
 8000be6:	4a49      	ldr	r2, [pc, #292]	; (8000d0c <Tune_Preset+0x130>)
{
 8000be8:	4604      	mov	r4, r0
	LOfreq = psets[Idx].freq;
 8000bea:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	CurrentMode = newmode;
 8000bee:	4f48      	ldr	r7, [pc, #288]	; (8000d10 <Tune_Preset+0x134>)
	LOfreq = psets[Idx].freq;
 8000bf0:	0045      	lsls	r5, r0, #1
 8000bf2:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 8000bf4:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 8000bf6:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 8000bf8:	703b      	strb	r3, [r7, #0]

	switch(CurrentMode)
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d87d      	bhi.n	8000cfa <Tune_Preset+0x11e>
 8000bfe:	e8df f003 	tbb	[pc, r3]
 8000c02:	6458      	.short	0x6458
 8000c04:	0270      	.short	0x0270
		//     ChangeColor(ptr, hUSB, GUI_RED);
		//     ChangeColor(ptr, hCW,  GUI_BLACK);
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000c06:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8000d4c <Tune_Preset+0x170>
 8000c0a:	f898 0003 	ldrb.w	r0, [r8, #3]
 8000c0e:	f7ff ff2d 	bl	8000a6c <SetBW>
 8000c12:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <Tune_Preset+0x138>)
 8000c14:	78d8      	ldrb	r0, [r3, #3]
 8000c16:	f7ff ff8b 	bl	8000b30 <SetAGC>
		//     ChangeColor(ptr, hAM,  GUI_BLACK);
		//     ChangeColor(ptr, hLSB, GUI_BLACK);
		//     ChangeColor(ptr, hUSB, GUI_BLACK);
		//     ChangeColor(ptr, hCW,  GUI_RED);
		break;
 8000c1a:	783b      	ldrb	r3, [r7, #0]
	SetBW( psets[Idx].bw);
 8000c1c:	4425      	add	r5, r4
	CurrentBW = newbw;
 8000c1e:	493e      	ldr	r1, [pc, #248]	; (8000d18 <Tune_Preset+0x13c>)
	SetBW( psets[Idx].bw);
 8000c20:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8000c24:	7d6a      	ldrb	r2, [r5, #21]
	CurrentBW = newbw;
 8000c26:	700a      	strb	r2, [r1, #0]
	switch(CurrentMode)
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	d80f      	bhi.n	8000c4c <Tune_Preset+0x70>
 8000c2c:	e8df f003 	tbb	[pc, r3]
 8000c30:	0217372a 	.word	0x0217372a
		CWindex = 0; // TODO toglimi
 8000c34:	4839      	ldr	r0, [pc, #228]	; (8000d1c <Tune_Preset+0x140>)
 8000c36:	2500      	movs	r5, #0
		bw[CW] = newbw;
 8000c38:	f888 2003 	strb.w	r2, [r8, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
		CWindex = 0; // TODO toglimi
 8000c40:	8005      	strh	r5, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000c42:	4a37      	ldr	r2, [pc, #220]	; (8000d20 <Tune_Preset+0x144>)
 8000c44:	4937      	ldr	r1, [pc, #220]	; (8000d24 <Tune_Preset+0x148>)
 8000c46:	4838      	ldr	r0, [pc, #224]	; (8000d28 <Tune_Preset+0x14c>)
 8000c48:	f001 f84c 	bl	8001ce4 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000c4c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000c50:	4836      	ldr	r0, [pc, #216]	; (8000d2c <Tune_Preset+0x150>)
 8000c52:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
}
 8000c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000c5a:	f00d bf2b 	b.w	800eab4 <strcpy>
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000c5e:	1e17      	subs	r7, r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c60:	4933      	ldr	r1, [pc, #204]	; (8000d30 <Tune_Preset+0x154>)
		USBindex = 0; // TODO toglimi
 8000c62:	4834      	ldr	r0, [pc, #208]	; (8000d34 <Tune_Preset+0x158>)
 8000c64:	f04f 0500 	mov.w	r5, #0
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000c68:	bf18      	it	ne
 8000c6a:	2701      	movne	r7, #1
		bw[USB] = newbw;
 8000c6c:	f888 2002 	strb.w	r2, [r8, #2]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c70:	800f      	strh	r7, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
		USBindex = 0; // TODO toglimi
 8000c76:	8005      	strh	r5, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000c78:	4a29      	ldr	r2, [pc, #164]	; (8000d20 <Tune_Preset+0x144>)
 8000c7a:	492f      	ldr	r1, [pc, #188]	; (8000d38 <Tune_Preset+0x15c>)
 8000c7c:	482f      	ldr	r0, [pc, #188]	; (8000d3c <Tune_Preset+0x160>)
 8000c7e:	f001 f831 	bl	8001ce4 <SDR_2R_toC_f32>
		break;
 8000c82:	e7e3      	b.n	8000c4c <Tune_Preset+0x70>
		AMindex = 0; // TODO toglimi
 8000c84:	482a      	ldr	r0, [pc, #168]	; (8000d30 <Tune_Preset+0x154>)
 8000c86:	2500      	movs	r5, #0
		bw[AM] = newbw;
 8000c88:	f888 2000 	strb.w	r2, [r8]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 8000c90:	8005      	strh	r5, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c92:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <Tune_Preset+0x144>)
 8000c94:	492a      	ldr	r1, [pc, #168]	; (8000d40 <Tune_Preset+0x164>)
 8000c96:	482b      	ldr	r0, [pc, #172]	; (8000d44 <Tune_Preset+0x168>)
 8000c98:	f001 f824 	bl	8001ce4 <SDR_2R_toC_f32>
		break;
 8000c9c:	e7d6      	b.n	8000c4c <Tune_Preset+0x70>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000c9e:	1e17      	subs	r7, r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000ca0:	4923      	ldr	r1, [pc, #140]	; (8000d30 <Tune_Preset+0x154>)
		LSBindex = 0; // TODO toglimi
 8000ca2:	4829      	ldr	r0, [pc, #164]	; (8000d48 <Tune_Preset+0x16c>)
 8000ca4:	f04f 0500 	mov.w	r5, #0
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000ca8:	bf18      	it	ne
 8000caa:	2701      	movne	r7, #1
		bw[LSB] = newbw;
 8000cac:	f888 2001 	strb.w	r2, [r8, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000cb0:	e7de      	b.n	8000c70 <Tune_Preset+0x94>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000cb2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8000d4c <Tune_Preset+0x170>
 8000cb6:	f898 0000 	ldrb.w	r0, [r8]
 8000cba:	f7ff fed7 	bl	8000a6c <SetBW>
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <Tune_Preset+0x138>)
 8000cc0:	7818      	ldrb	r0, [r3, #0]
 8000cc2:	f7ff ff35 	bl	8000b30 <SetAGC>
		break;
 8000cc6:	783b      	ldrb	r3, [r7, #0]

	default :
		break;
	}
}	
 8000cc8:	e7a8      	b.n	8000c1c <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000cca:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8000d4c <Tune_Preset+0x170>
 8000cce:	f898 0001 	ldrb.w	r0, [r8, #1]
 8000cd2:	f7ff fecb 	bl	8000a6c <SetBW>
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <Tune_Preset+0x138>)
 8000cd8:	7858      	ldrb	r0, [r3, #1]
 8000cda:	f7ff ff29 	bl	8000b30 <SetAGC>
		break;
 8000cde:	783b      	ldrb	r3, [r7, #0]
 8000ce0:	e79c      	b.n	8000c1c <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000ce2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8000d4c <Tune_Preset+0x170>
 8000ce6:	f898 0002 	ldrb.w	r0, [r8, #2]
 8000cea:	f7ff febf 	bl	8000a6c <SetBW>
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <Tune_Preset+0x138>)
 8000cf0:	7898      	ldrb	r0, [r3, #2]
 8000cf2:	f7ff ff1d 	bl	8000b30 <SetAGC>
		break;
 8000cf6:	783b      	ldrb	r3, [r7, #0]
 8000cf8:	e790      	b.n	8000c1c <Tune_Preset+0x40>
	SetBW( psets[Idx].bw);
 8000cfa:	2318      	movs	r3, #24
	CurrentBW = newbw;
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <Tune_Preset+0x13c>)
	SetBW( psets[Idx].bw);
 8000cfe:	fb03 6300 	mla	r3, r3, r0, r6
	CurrentBW = newbw;
 8000d02:	7d5b      	ldrb	r3, [r3, #21]
 8000d04:	7013      	strb	r3, [r2, #0]
	switch(CurrentMode)
 8000d06:	e7a1      	b.n	8000c4c <Tune_Preset+0x70>
 8000d08:	24008c30 	.word	0x24008c30
 8000d0c:	24009df4 	.word	0x24009df4
 8000d10:	2400cf18 	.word	0x2400cf18
 8000d14:	24007b48 	.word	0x24007b48
 8000d18:	24000f70 	.word	0x24000f70
 8000d1c:	24008ddc 	.word	0x24008ddc
 8000d20:	20004000 	.word	0x20004000
 8000d24:	080140c0 	.word	0x080140c0
 8000d28:	080150c0 	.word	0x080150c0
 8000d2c:	24004998 	.word	0x24004998
 8000d30:	2400e326 	.word	0x2400e326
 8000d34:	240083a4 	.word	0x240083a4
 8000d38:	080160c0 	.word	0x080160c0
 8000d3c:	080170c0 	.word	0x080170c0
 8000d40:	080120c0 	.word	0x080120c0
 8000d44:	080130c0 	.word	0x080130c0
 8000d48:	2400e324 	.word	0x2400e324
 8000d4c:	24008de0 	.word	0x24008de0

08000d50 <SetMode>:
{
 8000d50:	b508      	push	{r3, lr}
	CurrentMode = newmode;
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <SetMode+0x64>)
 8000d54:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 8000d56:	2803      	cmp	r0, #3
 8000d58:	d82b      	bhi.n	8000db2 <SetMode+0x62>
 8000d5a:	e8df f000 	tbb	[pc, r0]
 8000d5e:	160c      	.short	0x160c
 8000d60:	0220      	.short	0x0220
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <SetMode+0x68>)
 8000d64:	78d8      	ldrb	r0, [r3, #3]
 8000d66:	f7ff fe81 	bl	8000a6c <SetBW>
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <SetMode+0x6c>)
 8000d6c:	78d8      	ldrb	r0, [r3, #3]
}	
 8000d6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000d72:	f7ff bedd 	b.w	8000b30 <SetAGC>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <SetMode+0x68>)
 8000d78:	7818      	ldrb	r0, [r3, #0]
 8000d7a:	f7ff fe77 	bl	8000a6c <SetBW>
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <SetMode+0x6c>)
 8000d80:	7818      	ldrb	r0, [r3, #0]
}	
 8000d82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000d86:	f7ff bed3 	b.w	8000b30 <SetAGC>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <SetMode+0x68>)
 8000d8c:	7858      	ldrb	r0, [r3, #1]
 8000d8e:	f7ff fe6d 	bl	8000a6c <SetBW>
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <SetMode+0x6c>)
 8000d94:	7858      	ldrb	r0, [r3, #1]
}	
 8000d96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000d9a:	f7ff bec9 	b.w	8000b30 <SetAGC>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SetMode+0x68>)
 8000da0:	7898      	ldrb	r0, [r3, #2]
 8000da2:	f7ff fe63 	bl	8000a6c <SetBW>
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SetMode+0x6c>)
 8000da8:	7898      	ldrb	r0, [r3, #2]
}	
 8000daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000dae:	f7ff bebf 	b.w	8000b30 <SetAGC>
}	
 8000db2:	bd08      	pop	{r3, pc}
 8000db4:	2400cf18 	.word	0x2400cf18
 8000db8:	24008de0 	.word	0x24008de0
 8000dbc:	24007b48 	.word	0x24007b48

08000dc0 <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	if (idx == 9)
 8000dc0:	2809      	cmp	r0, #9
{
 8000dc2:	b508      	push	{r3, lr}
	if (idx == 9)
 8000dc4:	d012      	beq.n	8000dec <SetFstep+0x2c>
		Fstep = 9000;  // MW Channel for Europe
	else
		Fstep = pow(10, 5 - idx);
 8000dc6:	f1c0 0005 	rsb	r0, r0, #5
 8000dca:	ee06 0a90 	vmov	s13, r0
 8000dce:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000df8 <SetFstep+0x38>
 8000dd2:	eeb8 0be6 	vcvt.f64.s32	d0, s13
 8000dd6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8000dda:	f010 f809 	bl	8010df0 <exp>
 8000dde:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <SetFstep+0x40>)
 8000de0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 8000de4:	ee17 3a90 	vmov	r3, s15
 8000de8:	6013      	str	r3, [r2, #0]
}	
 8000dea:	bd08      	pop	{r3, pc}
		Fstep = 9000;  // MW Channel for Europe
 8000dec:	f242 3328 	movw	r3, #9000	; 0x2328
 8000df0:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <SetFstep+0x40>)
 8000df2:	6013      	str	r3, [r2, #0]
}	
 8000df4:	bd08      	pop	{r3, pc}
 8000df6:	bf00      	nop
 8000df8:	bbb55516 	.word	0xbbb55516
 8000dfc:	40026bb1 	.word	0x40026bb1
 8000e00:	2400cf10 	.word	0x2400cf10

08000e04 <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked(uint16_t Nsteps)
{	
	LOfreq += Fstep * Nsteps;
 8000e04:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <FplusClicked+0x9c>)
 8000e06:	4a27      	ldr	r2, [pc, #156]	; (8000ea4 <FplusClicked+0xa0>)
 8000e08:	681b      	ldr	r3, [r3, #0]
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000e0a:	4927      	ldr	r1, [pc, #156]	; (8000ea8 <FplusClicked+0xa4>)
	LOfreq += Fstep * Nsteps;
 8000e0c:	fb03 f300 	mul.w	r3, r3, r0
 8000e10:	edd2 6a00 	vldr	s13, [r2]
	LOfreq  = min(LOfreq, 50000000.f);
 8000e14:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000eac <FplusClicked+0xa8>
	LOfreq += Fstep * Nsteps;
 8000e18:	ee07 3a90 	vmov	s15, r3
 8000e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
{	
 8000e20:	b510      	push	{r4, lr}
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000e22:	780b      	ldrb	r3, [r1, #0]
	LOfreq += Fstep * Nsteps;
 8000e24:	ee77 7aa6 	vadd.f32	s15, s15, s13
	psets[0].bw = bw[CurrentMode];
 8000e28:	4921      	ldr	r1, [pc, #132]	; (8000eb0 <FplusClicked+0xac>)
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000e2a:	4c22      	ldr	r4, [pc, #136]	; (8000eb4 <FplusClicked+0xb0>)
	psets[0].bw = bw[CurrentMode];
 8000e2c:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq  = min(LOfreq, 50000000.f);
 8000e2e:	fec7 7ac7 	vminnm.f32	s15, s15, s14
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000e32:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 8000e34:	7560      	strb	r0, [r4, #21]
	LOfreq  = min(LOfreq, 50000000.f);
 8000e36:	edc2 7a00 	vstr	s15, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000e3a:	edc4 7a04 	vstr	s15, [r4, #16]
	switch(CurrentMode)
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d80b      	bhi.n	8000e5a <FplusClicked+0x56>
 8000e42:	e8df f003 	tbb	[pc, r3]
 8000e46:	1b12      	.short	0x1b12
 8000e48:	0224      	.short	0x0224
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000e4a:	78c8      	ldrb	r0, [r1, #3]
 8000e4c:	f7ff fe0e 	bl	8000a6c <SetBW>
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <FplusClicked+0xb4>)
 8000e52:	78d8      	ldrb	r0, [r3, #3]
 8000e54:	f7ff fe6c 	bl	8000b30 <SetAGC>
		break;
 8000e58:	7d60      	ldrb	r0, [r4, #21]
	SetBW( psets[Idx].bw);
 8000e5a:	f7ff fe07 	bl	8000a6c <SetBW>
	strcpy(msg, psets[Idx].name);
 8000e5e:	4915      	ldr	r1, [pc, #84]	; (8000eb4 <FplusClicked+0xb0>)
 8000e60:	4816      	ldr	r0, [pc, #88]	; (8000ebc <FplusClicked+0xb8>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 8000e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8000e66:	f00d be25 	b.w	800eab4 <strcpy>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000e6a:	7808      	ldrb	r0, [r1, #0]
 8000e6c:	f7ff fdfe 	bl	8000a6c <SetBW>
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <FplusClicked+0xb4>)
 8000e72:	7818      	ldrb	r0, [r3, #0]
 8000e74:	f7ff fe5c 	bl	8000b30 <SetAGC>
		break;
 8000e78:	7d60      	ldrb	r0, [r4, #21]
}	
 8000e7a:	e7ee      	b.n	8000e5a <FplusClicked+0x56>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000e7c:	7848      	ldrb	r0, [r1, #1]
 8000e7e:	f7ff fdf5 	bl	8000a6c <SetBW>
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <FplusClicked+0xb4>)
 8000e84:	7858      	ldrb	r0, [r3, #1]
 8000e86:	f7ff fe53 	bl	8000b30 <SetAGC>
		break;
 8000e8a:	7d60      	ldrb	r0, [r4, #21]
 8000e8c:	e7e5      	b.n	8000e5a <FplusClicked+0x56>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000e8e:	7888      	ldrb	r0, [r1, #2]
 8000e90:	f7ff fdec 	bl	8000a6c <SetBW>
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <FplusClicked+0xb4>)
 8000e96:	7898      	ldrb	r0, [r3, #2]
 8000e98:	f7ff fe4a 	bl	8000b30 <SetAGC>
		break;
 8000e9c:	7d60      	ldrb	r0, [r4, #21]
 8000e9e:	e7dc      	b.n	8000e5a <FplusClicked+0x56>
 8000ea0:	2400cf10 	.word	0x2400cf10
 8000ea4:	24009df4 	.word	0x24009df4
 8000ea8:	2400cf18 	.word	0x2400cf18
 8000eac:	4c3ebc20 	.word	0x4c3ebc20
 8000eb0:	24008de0 	.word	0x24008de0
 8000eb4:	24008c30 	.word	0x24008c30
 8000eb8:	24007b48 	.word	0x24007b48
 8000ebc:	24004998 	.word	0x24004998

08000ec0 <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked(uint16_t Nsteps)
{	
	LOfreq -= Fstep * Nsteps;
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <FminusClicked+0x9c>)
 8000ec2:	4a27      	ldr	r2, [pc, #156]	; (8000f60 <FminusClicked+0xa0>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000ec6:	4927      	ldr	r1, [pc, #156]	; (8000f64 <FminusClicked+0xa4>)
	LOfreq -= Fstep * Nsteps;
 8000ec8:	fb03 f300 	mul.w	r3, r3, r0
 8000ecc:	ed92 7a00 	vldr	s14, [r2]
	LOfreq  = max(LOfreq, 8000.f);
 8000ed0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8000f68 <FminusClicked+0xa8>
	LOfreq -= Fstep * Nsteps;
 8000ed4:	ee07 3a90 	vmov	s15, r3
 8000ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
{	
 8000edc:	b510      	push	{r4, lr}
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000ede:	780b      	ldrb	r3, [r1, #0]
	LOfreq -= Fstep * Nsteps;
 8000ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
	psets[0].bw = bw[CurrentMode];
 8000ee4:	4921      	ldr	r1, [pc, #132]	; (8000f6c <FminusClicked+0xac>)
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000ee6:	4c22      	ldr	r4, [pc, #136]	; (8000f70 <FminusClicked+0xb0>)
	psets[0].bw = bw[CurrentMode];
 8000ee8:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq  = max(LOfreq, 8000.f);
 8000eea:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000eee:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 8000ef0:	7560      	strb	r0, [r4, #21]
	LOfreq  = max(LOfreq, 8000.f);
 8000ef2:	edc2 7a00 	vstr	s15, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000ef6:	edc4 7a04 	vstr	s15, [r4, #16]
	switch(CurrentMode)
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d80b      	bhi.n	8000f16 <FminusClicked+0x56>
 8000efe:	e8df f003 	tbb	[pc, r3]
 8000f02:	1b12      	.short	0x1b12
 8000f04:	0224      	.short	0x0224
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000f06:	78c8      	ldrb	r0, [r1, #3]
 8000f08:	f7ff fdb0 	bl	8000a6c <SetBW>
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <FminusClicked+0xb4>)
 8000f0e:	78d8      	ldrb	r0, [r3, #3]
 8000f10:	f7ff fe0e 	bl	8000b30 <SetAGC>
		break;
 8000f14:	7d60      	ldrb	r0, [r4, #21]
	SetBW( psets[Idx].bw);
 8000f16:	f7ff fda9 	bl	8000a6c <SetBW>
	strcpy(msg, psets[Idx].name);
 8000f1a:	4915      	ldr	r1, [pc, #84]	; (8000f70 <FminusClicked+0xb0>)
 8000f1c:	4816      	ldr	r0, [pc, #88]	; (8000f78 <FminusClicked+0xb8>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 8000f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8000f22:	f00d bdc7 	b.w	800eab4 <strcpy>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000f26:	7808      	ldrb	r0, [r1, #0]
 8000f28:	f7ff fda0 	bl	8000a6c <SetBW>
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <FminusClicked+0xb4>)
 8000f2e:	7818      	ldrb	r0, [r3, #0]
 8000f30:	f7ff fdfe 	bl	8000b30 <SetAGC>
		break;
 8000f34:	7d60      	ldrb	r0, [r4, #21]
}	
 8000f36:	e7ee      	b.n	8000f16 <FminusClicked+0x56>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000f38:	7848      	ldrb	r0, [r1, #1]
 8000f3a:	f7ff fd97 	bl	8000a6c <SetBW>
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <FminusClicked+0xb4>)
 8000f40:	7858      	ldrb	r0, [r3, #1]
 8000f42:	f7ff fdf5 	bl	8000b30 <SetAGC>
		break;
 8000f46:	7d60      	ldrb	r0, [r4, #21]
 8000f48:	e7e5      	b.n	8000f16 <FminusClicked+0x56>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000f4a:	7888      	ldrb	r0, [r1, #2]
 8000f4c:	f7ff fd8e 	bl	8000a6c <SetBW>
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <FminusClicked+0xb4>)
 8000f52:	7898      	ldrb	r0, [r3, #2]
 8000f54:	f7ff fdec 	bl	8000b30 <SetAGC>
		break;
 8000f58:	7d60      	ldrb	r0, [r4, #21]
 8000f5a:	e7dc      	b.n	8000f16 <FminusClicked+0x56>
 8000f5c:	2400cf10 	.word	0x2400cf10
 8000f60:	24009df4 	.word	0x24009df4
 8000f64:	2400cf18 	.word	0x2400cf18
 8000f68:	45fa0000 	.word	0x45fa0000
 8000f6c:	24008de0 	.word	0x24008de0
 8000f70:	24008c30 	.word	0x24008c30
 8000f74:	24007b48 	.word	0x24007b48
 8000f78:	24004998 	.word	0x24004998

08000f7c <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <HAL_GPIO_EXTI_Callback>:
	volatile float tmp;
	float BinValue;
	int16_t i;


	if (TransmissionEnabled && SW01_IN)
 8000f80:	4bc7      	ldr	r3, [pc, #796]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x320>)
{
 8000f82:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (TransmissionEnabled && SW01_IN)
 8000f84:	781b      	ldrb	r3, [r3, #0]
{
 8000f86:	b083      	sub	sp, #12
	if (TransmissionEnabled && SW01_IN)
 8000f88:	b13b      	cbz	r3, 8000f9a <HAL_GPIO_EXTI_Callback+0x1a>
 8000f8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f8e:	48c5      	ldr	r0, [pc, #788]	; (80012a4 <HAL_GPIO_EXTI_Callback+0x324>)
 8000f90:	f006 f90c 	bl	80071ac <HAL_GPIO_ReadPin>
 8000f94:	2800      	cmp	r0, #0
 8000f96:	f000 815d 	beq.w	8001254 <HAL_GPIO_EXTI_Callback+0x2d4>
	{
		CarrierEnable(1);
	}
	else
	{
		CarrierEnable(0);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f002 f884 	bl	80030a8 <CarrierEnable>

	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // set bit 8 of GPIOF high, to be observed with an oscilloscope


	// copy into work buffers the data received by CIC decimator
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8000fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa4:	49c0      	ldr	r1, [pc, #768]	; (80012a8 <HAL_GPIO_EXTI_Callback+0x328>)
 8000fa6:	48c1      	ldr	r0, [pc, #772]	; (80012ac <HAL_GPIO_EXTI_Callback+0x32c>)
 8000fa8:	f000 ffaa 	bl	8001f00 <SDR_memcpy_f32>
	SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 8000fac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fb0:	49bf      	ldr	r1, [pc, #764]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x330>)
 8000fb2:	48c0      	ldr	r0, [pc, #768]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x334>)
 8000fb4:	f000 ffa4 	bl	8001f00 <SDR_memcpy_f32>




	// inverse sync filtering and decimation by 4
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 8000fb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fbc:	4abe      	ldr	r2, [pc, #760]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x338>)
 8000fbe:	49bb      	ldr	r1, [pc, #748]	; (80012ac <HAL_GPIO_EXTI_Callback+0x32c>)
 8000fc0:	48be      	ldr	r0, [pc, #760]	; (80012bc <HAL_GPIO_EXTI_Callback+0x33c>)
 8000fc2:	f00c fb91 	bl	800d6e8 <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 8000fc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fca:	4abd      	ldr	r2, [pc, #756]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x340>)
 8000fcc:	49b9      	ldr	r1, [pc, #740]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x334>)
 8000fce:	48bd      	ldr	r0, [pc, #756]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x344>)
 8000fd0:	f00c fb8a 	bl	800d6e8 <arm_fir_decimate_f32>

	// filter now with fast convolution
	//---------------------------------
	// shift the FFT buffer to the left
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8000fd4:	49bc      	ldr	r1, [pc, #752]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x348>)
 8000fd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);



	// copy into the (in place...) FFT buffer
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 8000fda:	4cbc      	ldr	r4, [pc, #752]	; (80012cc <HAL_GPIO_EXTI_Callback+0x34c>)
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8000fdc:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000

	// compute the direct FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);

	// if LSB, copy the LSB in the lower half (USB)
	if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8000fe0:	4dbb      	ldr	r5, [pc, #748]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x350>)
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8000fe2:	f000 ff8d 	bl	8001f00 <SDR_memcpy_f32>
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);
 8000fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fea:	4ab7      	ldr	r2, [pc, #732]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x348>)
 8000fec:	49b4      	ldr	r1, [pc, #720]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x340>)
 8000fee:	48b2      	ldr	r0, [pc, #712]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x338>)
 8000ff0:	f000 fe78 	bl	8001ce4 <SDR_2R_toC_f32>
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ffa:	49b6      	ldr	r1, [pc, #728]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x354>)
 8000ffc:	f000 ff80 	bl	8001f00 <SDR_memcpy_f32>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 8001000:	2301      	movs	r3, #1
 8001002:	4621      	mov	r1, r4
 8001004:	2200      	movs	r2, #0
 8001006:	48b4      	ldr	r0, [pc, #720]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x358>)
 8001008:	f00c fab0 	bl	800d56c <arm_cfft_f32>
	if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 800100c:	782b      	ldrb	r3, [r5, #0]
 800100e:	2b01      	cmp	r3, #1
 8001010:	f000 811a 	beq.w	8001248 <HAL_GPIO_EXTI_Callback+0x2c8>

#ifdef TEST_WF
	for (WFSample=0; WFSample<(FFTLEN * 2); WFSample += 2)
 8001014:	2300      	movs	r3, #0
 8001016:	f8ad 3002 	strh.w	r3, [sp, #2]
 800101a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800101e:	b29b      	uxth	r3, r3
 8001020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001024:	d241      	bcs.n	80010aa <HAL_GPIO_EXTI_Callback+0x12a>
 8001026:	4ead      	ldr	r6, [pc, #692]	; (80012dc <HAL_GPIO_EXTI_Callback+0x35c>)
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001028:	2700      	movs	r7, #0
	{
		tmp = FFTbuf[WFSample] * FFTbuf[WFSample] + FFTbuf[WFSample+1] * FFTbuf[WFSample+1];
 800102a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800102e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001032:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8001036:	b292      	uxth	r2, r2
 8001038:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800103c:	b29b      	uxth	r3, r3
 800103e:	b280      	uxth	r0, r0
 8001040:	b289      	uxth	r1, r1
 8001042:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001046:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800104a:	edd0 7a01 	vldr	s15, [r0, #4]
 800104e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001052:	ed91 7a01 	vldr	s14, [r1, #4]
 8001056:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800105a:	edd2 6a00 	vldr	s13, [r2]
 800105e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001062:	ed93 7a00 	vldr	s14, [r3]
 8001066:	eee6 7a87 	vfma.f32	s15, s13, s14
 800106a:	edcd 7a01 	vstr	s15, [sp, #4]
		arm_sqrt_f32(tmp, &WFBuffer[WFSample >> 1]);
 800106e:	eddd 7a01 	vldr	s15, [sp, #4]
 8001072:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001076:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800107a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001082:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8001086:	f2c0 80e9 	blt.w	800125c <HAL_GPIO_EXTI_Callback+0x2dc>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800108a:	eeb1 7ae7 	vsqrt.f32	s14, s15
	for (WFSample=0; WFSample<(FFTLEN * 2); WFSample += 2)
 800108e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001092:	3302      	adds	r3, #2
 8001094:	b29b      	uxth	r3, r3
 8001096:	f8ad 3002 	strh.w	r3, [sp, #2]
 800109a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010a4:	ed82 7a00 	vstr	s14, [r2]
 80010a8:	d3bf      	bcc.n	800102a <HAL_GPIO_EXTI_Callback+0xaa>

#ifdef CW_DECODER

	CWLevel = 0;
	BaseNoiseLevel = 9999.f;
	for (WFSample=48; WFSample<68; WFSample += 2)
 80010aa:	2330      	movs	r3, #48	; 0x30
	CWLevel = 0;
 80010ac:	4e8c      	ldr	r6, [pc, #560]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x360>)
 80010ae:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80012e4 <HAL_GPIO_EXTI_Callback+0x364>
	for (WFSample=48; WFSample<68; WFSample += 2)
 80010b2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80010b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	BaseNoiseLevel = 9999.f;
 80010ba:	488b      	ldr	r0, [pc, #556]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x368>)
	for (WFSample=48; WFSample<68; WFSample += 2)
 80010bc:	b29b      	uxth	r3, r3
	BaseNoiseLevel = 9999.f;
 80010be:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 80012ec <HAL_GPIO_EXTI_Callback+0x36c>
	CWLevel = 0;
 80010c2:	ed86 7a00 	vstr	s14, [r6]
	for (WFSample=48; WFSample<68; WFSample += 2)
 80010c6:	2b43      	cmp	r3, #67	; 0x43
	BaseNoiseLevel = 9999.f;
 80010c8:	ed80 6a00 	vstr	s12, [r0]
	for (WFSample=48; WFSample<68; WFSample += 2)
 80010cc:	f200 80d7 	bhi.w	800127e <HAL_GPIO_EXTI_Callback+0x2fe>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80010d0:	eeb0 5a47 	vmov.f32	s10, s14
//	for (WFSample=64; WFSample<84; WFSample += 2)
		//		for (WFSample=2*FFTLEN -50; WFSample<(2*FFTLEN - 40); WFSample += 2)
		//for (WFSample=46; WFSample<52; WFSample += 2)
	{
		tmp = FFTbuf[WFSample] * FFTbuf[WFSample] + FFTbuf[WFSample+1] * FFTbuf[WFSample+1];
 80010d4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80010d8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80010dc:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80010e0:	b292      	uxth	r2, r2
 80010e2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	b2bf      	uxth	r7, r7
 80010ea:	b289      	uxth	r1, r1
 80010ec:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80010f0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80010f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80010fc:	edd1 5a01 	vldr	s11, [r1, #4]
 8001100:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001104:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001108:	edd2 6a00 	vldr	s13, [r2]
 800110c:	edd3 5a00 	vldr	s11, [r3]
 8001110:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8001114:	edcd 7a01 	vstr	s15, [sp, #4]
		arm_sqrt_f32(tmp, &BinValue);
 8001118:	eddd 6a01 	vldr	s13, [sp, #4]
	for (WFSample=48; WFSample<68; WFSample += 2)
 800111c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    if (in >= 0.0f)
 8001120:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8001124:	3302      	adds	r3, #2
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	b29b      	uxth	r3, r3
 800112c:	f8ad 3002 	strh.w	r3, [sp, #2]
      *pOut = sqrtf(in);
 8001130:	bfa8      	it	ge
 8001132:	eef1 7ae6 	vsqrtge.f32	s15, s13
 8001136:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800113a:	b29b      	uxth	r3, r3
      *pOut = 0.0f;
 800113c:	bfb8      	it	lt
 800113e:	eef0 7a45 	vmovlt.f32	s15, s10
 8001142:	2b43      	cmp	r3, #67	; 0x43
 8001144:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
		if (CWLevel < BinValue)
			CWLevel = BinValue;
		if (BaseNoiseLevel > BinValue)
 8001148:	fe86 6a67 	vminnm.f32	s12, s12, s15
	for (WFSample=48; WFSample<68; WFSample += 2)
 800114c:	d9c2      	bls.n	80010d4 <HAL_GPIO_EXTI_Callback+0x154>
 800114e:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
 8001152:	ed86 7a00 	vstr	s14, [r6]
 8001156:	ed80 6a00 	vstr	s12, [r0]
 800115a:	ee37 7a46 	vsub.f32	s14, s14, s12
 800115e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8001288 <HAL_GPIO_EXTI_Callback+0x308>
 8001162:	ee25 6b06 	vmul.f64	d6, d5, d6
			BaseNoiseLevel = BinValue;
	}
	SignalAverage = SIGNAL_AVERAGE_T_CONST * CWLevel + (1 - SIGNAL_AVERAGE_T_CONST) * OldSignalAverage;
 8001166:	4b62      	ldr	r3, [pc, #392]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x370>)
	//We shorten the pulse by filtering out the first sample at attack.
	// This gives a 50% duty cycle for a square wave.
	// Without filter a square wave would have an higher on time than off time.

	//	if (CWLevel > (SignalAverage + CW_THRESHOLD))
	if (CWLevel - BaseNoiseLevel > (CWThreshold))
 8001168:	4962      	ldr	r1, [pc, #392]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x374>)
	SignalAverage = SIGNAL_AVERAGE_T_CONST * CWLevel + (1 - SIGNAL_AVERAGE_T_CONST) * OldSignalAverage;
 800116a:	ed93 5a00 	vldr	s10, [r3]
	if (CWLevel - BaseNoiseLevel > (CWThreshold))
 800116e:	edd1 7a00 	vldr	s15, [r1]
	SignalAverage = SIGNAL_AVERAGE_T_CONST * CWLevel + (1 - SIGNAL_AVERAGE_T_CONST) * OldSignalAverage;
 8001172:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8001176:	4a60      	ldr	r2, [pc, #384]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x378>)
	if (CWLevel - BaseNoiseLevel > (CWThreshold))
 8001178:	eef4 7ac7 	vcmpe.f32	s15, s14
	SignalAverage = SIGNAL_AVERAGE_T_CONST * CWLevel + (1 - SIGNAL_AVERAGE_T_CONST) * OldSignalAverage;
 800117c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 8001290 <HAL_GPIO_EXTI_Callback+0x310>
	if (CWLevel - BaseNoiseLevel > (CWThreshold))
 8001180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	SignalAverage = SIGNAL_AVERAGE_T_CONST * CWLevel + (1 - SIGNAL_AVERAGE_T_CONST) * OldSignalAverage;
 8001184:	eea5 6b04 	vfma.f64	d6, d5, d4
 8001188:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
	OldSignalAverage = SignalAverage;
 800118c:	ed83 6a00 	vstr	s12, [r3]
	SignalAverage = SIGNAL_AVERAGE_T_CONST * CWLevel + (1 - SIGNAL_AVERAGE_T_CONST) * OldSignalAverage;
 8001190:	ed82 6a00 	vstr	s12, [r2]
	if (CWLevel - BaseNoiseLevel > (CWThreshold))
 8001194:	d43e      	bmi.n	8001214 <HAL_GPIO_EXTI_Callback+0x294>
		//			if (!SW01_IN)
		CWIn += 1; //TODO limit CW increase
	else
		CWIn = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	4a58      	ldr	r2, [pc, #352]	; (80012fc <HAL_GPIO_EXTI_Callback+0x37c>)
 800119a:	7013      	strb	r3, [r2, #0]

	DecodeCW();
 800119c:	f7ff fc08 	bl	80009b0 <DecodeCW>

#endif
	 */

	// mult. by the fast convolution mask
	arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 80011a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011a4:	4a56      	ldr	r2, [pc, #344]	; (8001300 <HAL_GPIO_EXTI_Callback+0x380>)
 80011a6:	4957      	ldr	r1, [pc, #348]	; (8001304 <HAL_GPIO_EXTI_Callback+0x384>)
 80011a8:	4848      	ldr	r0, [pc, #288]	; (80012cc <HAL_GPIO_EXTI_Callback+0x34c>)
 80011aa:	f00c fc55 	bl	800da58 <arm_cmplx_mult_cmplx_f32>

	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 80011ae:	2301      	movs	r3, #1
 80011b0:	4953      	ldr	r1, [pc, #332]	; (8001300 <HAL_GPIO_EXTI_Callback+0x380>)
 80011b2:	461a      	mov	r2, r3
 80011b4:	4848      	ldr	r0, [pc, #288]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x358>)
 80011b6:	f00c f9d9 	bl	800d56c <arm_cfft_f32>
	// then do the overlap-discard
	SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);
 80011ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011be:	4952      	ldr	r1, [pc, #328]	; (8001308 <HAL_GPIO_EXTI_Callback+0x388>)
 80011c0:	4852      	ldr	r0, [pc, #328]	; (800130c <HAL_GPIO_EXTI_Callback+0x38c>)
 80011c2:	f000 fe9d 	bl	8001f00 <SDR_memcpy_f32>


	// we have now the bandpass filtered I/Q, demodulate the signal
	switch(CurrentMode)
 80011c6:	782b      	ldrb	r3, [r5, #0]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d828      	bhi.n	800121e <HAL_GPIO_EXTI_Callback+0x29e>
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d136      	bne.n	800123e <HAL_GPIO_EXTI_Callback+0x2be>
	{	
	case AM :
		SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 80011d0:	494f      	ldr	r1, [pc, #316]	; (8001310 <HAL_GPIO_EXTI_Callback+0x390>)
 80011d2:	484e      	ldr	r0, [pc, #312]	; (800130c <HAL_GPIO_EXTI_Callback+0x38c>)
 80011d4:	f000 ffea 	bl	80021ac <SDR_demodAM_AGC>
#endif


	// CW tone while keying
	//TODO: make it sine and with attack/decay
	if (TXCarrierEnabled)
 80011d8:	4b4e      	ldr	r3, [pc, #312]	; (8001314 <HAL_GPIO_EXTI_Callback+0x394>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b183      	cbz	r3, 8001200 <HAL_GPIO_EXTI_Callback+0x280>
 80011de:	4a4c      	ldr	r2, [pc, #304]	; (8001310 <HAL_GPIO_EXTI_Callback+0x390>)
 80011e0:	2300      	movs	r3, #0
		for (i=0; i<BSIZE; i++)
		{
			if (i % 64 > 31)
				fAudio[i] = 0.1; //Volume
			else
				fAudio[i] = -0.1;
 80011e2:	484d      	ldr	r0, [pc, #308]	; (8001318 <HAL_GPIO_EXTI_Callback+0x398>)
				fAudio[i] = 0.1; //Volume
 80011e4:	494d      	ldr	r1, [pc, #308]	; (800131c <HAL_GPIO_EXTI_Callback+0x39c>)
			if (i % 64 > 31)
 80011e6:	069c      	lsls	r4, r3, #26
 80011e8:	f103 0301 	add.w	r3, r3, #1
 80011ec:	f102 0204 	add.w	r2, r2, #4
				fAudio[i] = 0.1; //Volume
 80011f0:	bf4c      	ite	mi
 80011f2:	f842 1c04 	strmi.w	r1, [r2, #-4]
				fAudio[i] = -0.1;
 80011f6:	f842 0c04 	strpl.w	r0, [r2, #-4]
		for (i=0; i<BSIZE; i++)
 80011fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011fe:	d1f2      	bne.n	80011e6 <HAL_GPIO_EXTI_Callback+0x266>


	// send the demodulated audio to the DMA buffer just emptied

	//LED_YELLOW_ON;
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8001200:	4b47      	ldr	r3, [pc, #284]	; (8001320 <HAL_GPIO_EXTI_Callback+0x3a0>)
 8001202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001206:	4842      	ldr	r0, [pc, #264]	; (8001310 <HAL_GPIO_EXTI_Callback+0x390>)
 8001208:	6819      	ldr	r1, [r3, #0]
	//LED_YELLOW_OFF;


	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 800120a:	b003      	add	sp, #12
 800120c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8001210:	f000 be0c 	b.w	8001e2c <SDR_float_to_DAC_audio>
		CWIn += 1; //TODO limit CW increase
 8001214:	4a39      	ldr	r2, [pc, #228]	; (80012fc <HAL_GPIO_EXTI_Callback+0x37c>)
 8001216:	7813      	ldrb	r3, [r2, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	e7bd      	b.n	800119a <HAL_GPIO_EXTI_Callback+0x21a>
	switch(CurrentMode)
 800121e:	2b03      	cmp	r3, #3
 8001220:	d1da      	bne.n	80011d8 <HAL_GPIO_EXTI_Callback+0x258>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 8001222:	493b      	ldr	r1, [pc, #236]	; (8001310 <HAL_GPIO_EXTI_Callback+0x390>)
 8001224:	4839      	ldr	r0, [pc, #228]	; (800130c <HAL_GPIO_EXTI_Callback+0x38c>)
 8001226:	f001 f83d 	bl	80022a4 <SDR_demodSSB_CW_AGC>
		if(bw[CW] == Narrow)
 800122a:	4b3e      	ldr	r3, [pc, #248]	; (8001324 <HAL_GPIO_EXTI_Callback+0x3a4>)
 800122c:	78db      	ldrb	r3, [r3, #3]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1d2      	bne.n	80011d8 <HAL_GPIO_EXTI_Callback+0x258>
			SDR_CWPeak(fAudio, BSIZE);
 8001232:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001236:	4836      	ldr	r0, [pc, #216]	; (8001310 <HAL_GPIO_EXTI_Callback+0x390>)
 8001238:	f000 ff28 	bl	800208c <SDR_CWPeak>
 800123c:	e7cc      	b.n	80011d8 <HAL_GPIO_EXTI_Callback+0x258>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 800123e:	4934      	ldr	r1, [pc, #208]	; (8001310 <HAL_GPIO_EXTI_Callback+0x390>)
 8001240:	4832      	ldr	r0, [pc, #200]	; (800130c <HAL_GPIO_EXTI_Callback+0x38c>)
 8001242:	f001 f82f 	bl	80022a4 <SDR_demodSSB_CW_AGC>
 8001246:	e7c7      	b.n	80011d8 <HAL_GPIO_EXTI_Callback+0x258>
	if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8001248:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800124c:	4620      	mov	r0, r4
 800124e:	f000 fe73 	bl	8001f38 <SDR_mirror_LSB>
 8001252:	e6df      	b.n	8001014 <HAL_GPIO_EXTI_Callback+0x94>
		CarrierEnable(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f001 ff27 	bl	80030a8 <CarrierEnable>
 800125a:	e6a1      	b.n	8000fa0 <HAL_GPIO_EXTI_Callback+0x20>
	for (WFSample=0; WFSample<(FFTLEN * 2); WFSample += 2)
 800125c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8001260:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8001264:	3202      	adds	r2, #2
 8001266:	601f      	str	r7, [r3, #0]
 8001268:	b293      	uxth	r3, r2
 800126a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800126e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001272:	b29b      	uxth	r3, r3
 8001274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001278:	f4ff aed7 	bcc.w	800102a <HAL_GPIO_EXTI_Callback+0xaa>
 800127c:	e715      	b.n	80010aa <HAL_GPIO_EXTI_Callback+0x12a>
	for (WFSample=48; WFSample<68; WFSample += 2)
 800127e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8001298 <HAL_GPIO_EXTI_Callback+0x318>
 8001282:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001328 <HAL_GPIO_EXTI_Callback+0x3a8>
 8001286:	e76e      	b.n	8001166 <HAL_GPIO_EXTI_Callback+0x1e6>
 8001288:	9999999a 	.word	0x9999999a
 800128c:	3fc99999 	.word	0x3fc99999
 8001290:	9999999a 	.word	0x9999999a
 8001294:	3fe99999 	.word	0x3fe99999
	...
 80012a0:	24008d80 	.word	0x24008d80
 80012a4:	58020800 	.word	0x58020800
 80012a8:	2000d000 	.word	0x2000d000
 80012ac:	20009000 	.word	0x20009000
 80012b0:	2000b000 	.word	0x2000b000
 80012b4:	20007000 	.word	0x20007000
 80012b8:	20006800 	.word	0x20006800
 80012bc:	24000b64 	.word	0x24000b64
 80012c0:	20006000 	.word	0x20006000
 80012c4:	24008c24 	.word	0x24008c24
 80012c8:	24001f7c 	.word	0x24001f7c
 80012cc:	20002000 	.word	0x20002000
 80012d0:	2400cf18 	.word	0x2400cf18
 80012d4:	24000f7c 	.word	0x24000f7c
 80012d8:	08018338 	.word	0x08018338
 80012dc:	2400bf08 	.word	0x2400bf08
 80012e0:	240051cc 	.word	0x240051cc
 80012e4:	00000000 	.word	0x00000000
 80012e8:	240051d0 	.word	0x240051d0
 80012ec:	461c3c00 	.word	0x461c3c00
 80012f0:	2400befc 	.word	0x2400befc
 80012f4:	24008398 	.word	0x24008398
 80012f8:	240049c0 	.word	0x240049c0
 80012fc:	24007b4c 	.word	0x24007b4c
 8001300:	20000000 	.word	0x20000000
 8001304:	20004000 	.word	0x20004000
 8001308:	20001000 	.word	0x20001000
 800130c:	240030e8 	.word	0x240030e8
 8001310:	2400cf1c 	.word	0x2400cf1c
 8001314:	24007ae0 	.word	0x24007ae0
 8001318:	bdcccccd 	.word	0xbdcccccd
 800131c:	3dcccccd 	.word	0x3dcccccd
 8001320:	240049c8 	.word	0x240049c8
 8001324:	24008de0 	.word	0x24008de0
 8001328:	c61c3c00 	.word	0xc61c3c00

0800132c <ADC_Stream0_Handler>:
// by DMA2 Stream when a new ADC buffer is just filled
// Frequency is FADC / bitsPerSampleADC / BSIZE/2
// 150000000 /16 /512 = 18310,54688

void ADC_Stream0_Handler(uint8_t FullConversion)
{
 800132c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pR=TestSignalData;
#endif


	// compute the new NCO buffer, with the CWpitch offset if receiving CW
	if(CurrentMode == CW)
 8001330:	4a79      	ldr	r2, [pc, #484]	; (8001518 <ADC_Stream0_Handler+0x1ec>)
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8001332:	4e7a      	ldr	r6, [pc, #488]	; (800151c <ADC_Stream0_Handler+0x1f0>)
{
 8001334:	ed2d 8b10 	vpush	{d8-d15}
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8001338:	f5a6 6180 	sub.w	r1, r6, #1024	; 0x400
	if(CurrentMode == CW)
 800133c:	7812      	ldrb	r2, [r2, #0]
{
 800133e:	b097      	sub	sp, #92	; 0x5c
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8001340:	2800      	cmp	r0, #0
 8001342:	bf08      	it	eq
 8001344:	460e      	moveq	r6, r1
	if(CurrentMode == CW)
 8001346:	2a03      	cmp	r2, #3
 8001348:	f000 83ff 	beq.w	8001b4a <ADC_Stream0_Handler+0x81e>
		SDR_ComputeLO(LOfreq+cwpitch);  // prepare next LO buffer
	else
		SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 800134c:	4b74      	ldr	r3, [pc, #464]	; (8001520 <ADC_Stream0_Handler+0x1f4>)
 800134e:	ed93 0a00 	vldr	s0, [r3]
 8001352:	f000 fc0b 	bl	8001b6c <SDR_ComputeLO>
	// in the short words to floating point conversion routine

	//TODO Check if it should be BSIZE/2

	sum = 0; k = BSIZE;
	while(k)
 8001356:	f206 32fe 	addw	r2, r6, #1022	; 0x3fe
 800135a:	1eb5      	subs	r5, r6, #2
	sum = 0; k = BSIZE;
 800135c:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8001524 <ADC_Stream0_Handler+0x1f8>
	{
		sum += pR[k-1];
 8001360:	8811      	ldrh	r1, [r2, #0]
 8001362:	3a08      	subs	r2, #8
		sum += pR[k-2];
 8001364:	88d3      	ldrh	r3, [r2, #6]
		sum += pR[k-1];
 8001366:	b289      	uxth	r1, r1
		sum += pR[k-3];
 8001368:	8890      	ldrh	r0, [r2, #4]
		sum += pR[k-2];
 800136a:	b29b      	uxth	r3, r3
		sum += pR[k-1];
 800136c:	ee07 1a90 	vmov	s15, r1
		sum += pR[k-3];
 8001370:	b280      	uxth	r0, r0
		sum += pR[k-4];
 8001372:	8851      	ldrh	r1, [r2, #2]
	while(k)
 8001374:	4295      	cmp	r5, r2
		sum += pR[k-1];
 8001376:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
		sum += pR[k-2];
 800137a:	ee07 3a90 	vmov	s15, r3
		sum += pR[k-4];
 800137e:	b289      	uxth	r1, r1
		sum += pR[k-2];
 8001380:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		sum += pR[k-3];
 8001384:	ee07 0a90 	vmov	s15, r0
		sum += pR[k-4];
 8001388:	ee06 1a90 	vmov	s13, r1
		sum += pR[k-3];
 800138c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		sum += pR[k-4];
 8001390:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001398:	ee77 7a86 	vadd.f32	s15, s15, s12
 800139c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80013a0:	ee30 0a27 	vadd.f32	s0, s0, s15
	while(k)
 80013a4:	d1dc      	bne.n	8001360 <ADC_Stream0_Handler+0x34>
		k-=4;
	}

	TestSampledValue=pR[BSIZE/2];
 80013a6:	f8b6 3200 	ldrh.w	r3, [r6, #512]	; 0x200

	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio

	// downconvert to zero IF, by multiplication by the exp(-jwt) signal
	// generated by the NCO, and at the same time convert to floating point
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80013aa:	4630      	mov	r0, r6
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80013ac:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8001528 <ADC_Stream0_Handler+0x1fc>
 80013b0:	2400      	movs	r4, #0
	TestSampledValue=pR[BSIZE/2];
 80013b2:	b29b      	uxth	r3, r3
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80013b4:	4d5d      	ldr	r5, [pc, #372]	; (800152c <ADC_Stream0_Handler+0x200>)
 80013b6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80013ba:	4e5d      	ldr	r6, [pc, #372]	; (8001530 <ADC_Stream0_Handler+0x204>)
	TestSampledValue=pR[BSIZE/2];
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	4f5c      	ldr	r7, [pc, #368]	; (8001534 <ADC_Stream0_Handler+0x208>)
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80013c2:	4a5d      	ldr	r2, [pc, #372]	; (8001538 <ADC_Stream0_Handler+0x20c>)
	TestSampledValue=pR[BSIZE/2];
 80013c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80013c8:	495c      	ldr	r1, [pc, #368]	; (800153c <ADC_Stream0_Handler+0x210>)
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80013ca:	ed85 0a00 	vstr	s0, [r5]
 80013ce:	8034      	strh	r4, [r6, #0]
	TestSampledValue=pR[BSIZE/2];
 80013d0:	edc7 7a00 	vstr	s15, [r7]
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80013d4:	f000 fcb8 	bl	8001d48 <SDR_downconvert_f32>
	// passed to the baseband interrupt routine, where it is additionally filtered with a
	// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
	//-------------------------------------------------------------------------

	k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
	while(k--)
 80013d8:	21ff      	movs	r1, #255	; 0xff
 80013da:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80015c4 <ADC_Stream0_Handler+0x298>
 80013de:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 80015c8 <ADC_Stream0_Handler+0x29c>
 80013e2:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 80013e6:	8031      	strh	r1, [r6, #0]
 80013e8:	460b      	mov	r3, r1
 80013ea:	4955      	ldr	r1, [pc, #340]	; (8001540 <ADC_Stream0_Handler+0x214>)
 80013ec:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 80013f0:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80015cc <ADC_Stream0_Handler+0x2a0>
 80013f4:	edd1 0a00 	vldr	s1, [r1]
 80013f8:	4952      	ldr	r1, [pc, #328]	; (8001544 <ADC_Stream0_Handler+0x218>)
 80013fa:	ed98 0a00 	vldr	s0, [r8]
 80013fe:	ed91 7a00 	vldr	s14, [r1]
 8001402:	4951      	ldr	r1, [pc, #324]	; (8001548 <ADC_Stream0_Handler+0x21c>)
 8001404:	edde 7a00 	vldr	s15, [lr]
 8001408:	edd1 1a00 	vldr	s3, [r1]
 800140c:	494f      	ldr	r1, [pc, #316]	; (800154c <ADC_Stream0_Handler+0x220>)
 800140e:	ed9c 1a00 	vldr	s2, [ip]
 8001412:	edd1 aa00 	vldr	s21, [r1]
 8001416:	494e      	ldr	r1, [pc, #312]	; (8001550 <ADC_Stream0_Handler+0x224>)
 8001418:	484e      	ldr	r0, [pc, #312]	; (8001554 <ADC_Stream0_Handler+0x228>)
 800141a:	ed91 5a00 	vldr	s10, [r1]
 800141e:	494e      	ldr	r1, [pc, #312]	; (8001558 <ADC_Stream0_Handler+0x22c>)
 8001420:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 80015d0 <ADC_Stream0_Handler+0x2a4>
 8001424:	edd1 9a00 	vldr	s19, [r1]
 8001428:	494c      	ldr	r1, [pc, #304]	; (800155c <ADC_Stream0_Handler+0x230>)
 800142a:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80015d4 <ADC_Stream0_Handler+0x2a8>
 800142e:	ed91 aa00 	vldr	s20, [r1]
 8001432:	494b      	ldr	r1, [pc, #300]	; (8001560 <ADC_Stream0_Handler+0x234>)
 8001434:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 80015d8 <ADC_Stream0_Handler+0x2ac>
 8001438:	edd1 5a00 	vldr	s11, [r1]
 800143c:	4949      	ldr	r1, [pc, #292]	; (8001564 <ADC_Stream0_Handler+0x238>)
 800143e:	4a4a      	ldr	r2, [pc, #296]	; (8001568 <ADC_Stream0_Handler+0x23c>)
 8001440:	ed91 9a00 	vldr	s18, [r1]
 8001444:	4949      	ldr	r1, [pc, #292]	; (800156c <ADC_Stream0_Handler+0x240>)
 8001446:	f502 6400 	add.w	r4, r2, #2048	; 0x800
 800144a:	edd1 da00 	vldr	s27, [r1]
 800144e:	4948      	ldr	r1, [pc, #288]	; (8001570 <ADC_Stream0_Handler+0x244>)
 8001450:	ed91 3a00 	vldr	s6, [r1]
 8001454:	4947      	ldr	r1, [pc, #284]	; (8001574 <ADC_Stream0_Handler+0x248>)
 8001456:	edd1 ba00 	vldr	s23, [r1]
 800145a:	4947      	ldr	r1, [pc, #284]	; (8001578 <ADC_Stream0_Handler+0x24c>)
 800145c:	ed91 da00 	vldr	s26, [r1]
 8001460:	4946      	ldr	r1, [pc, #280]	; (800157c <ADC_Stream0_Handler+0x250>)
 8001462:	edd1 3a00 	vldr	s7, [r1]
 8001466:	4946      	ldr	r1, [pc, #280]	; (8001580 <ADC_Stream0_Handler+0x254>)
 8001468:	ed91 ba00 	vldr	s22, [r1]
 800146c:	4945      	ldr	r1, [pc, #276]	; (8001584 <ADC_Stream0_Handler+0x258>)
 800146e:	edd1 fa00 	vldr	s31, [r1]
 8001472:	4945      	ldr	r1, [pc, #276]	; (8001588 <ADC_Stream0_Handler+0x25c>)
 8001474:	edd1 6a00 	vldr	s13, [r1]
 8001478:	4944      	ldr	r1, [pc, #272]	; (800158c <ADC_Stream0_Handler+0x260>)
 800147a:	edcd 6a04 	vstr	s13, [sp, #16]
 800147e:	edd1 ea00 	vldr	s29, [r1]
 8001482:	4943      	ldr	r1, [pc, #268]	; (8001590 <ADC_Stream0_Handler+0x264>)
 8001484:	ed91 fa00 	vldr	s30, [r1]
 8001488:	4942      	ldr	r1, [pc, #264]	; (8001594 <ADC_Stream0_Handler+0x268>)
 800148a:	edd1 6a00 	vldr	s13, [r1]
 800148e:	4942      	ldr	r1, [pc, #264]	; (8001598 <ADC_Stream0_Handler+0x26c>)
 8001490:	edcd 6a03 	vstr	s13, [sp, #12]
 8001494:	ed91 ea00 	vldr	s28, [r1]
 8001498:	4940      	ldr	r1, [pc, #256]	; (800159c <ADC_Stream0_Handler+0x270>)
 800149a:	edd1 6a00 	vldr	s13, [r1]
 800149e:	4940      	ldr	r1, [pc, #256]	; (80015a0 <ADC_Stream0_Handler+0x274>)
 80014a0:	edcd 6a02 	vstr	s13, [sp, #8]
 80014a4:	edd1 6a00 	vldr	s13, [r1]
 80014a8:	493e      	ldr	r1, [pc, #248]	; (80015a4 <ADC_Stream0_Handler+0x278>)
 80014aa:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 80014ae:	edd1 6a00 	vldr	s13, [r1]
 80014b2:	493d      	ldr	r1, [pc, #244]	; (80015a8 <ADC_Stream0_Handler+0x27c>)
 80014b4:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 80014b8:	edd1 6a00 	vldr	s13, [r1]
 80014bc:	493b      	ldr	r1, [pc, #236]	; (80015ac <ADC_Stream0_Handler+0x280>)
 80014be:	edcd 6a05 	vstr	s13, [sp, #20]
 80014c2:	edd1 6a00 	vldr	s13, [r1]
 80014c6:	493a      	ldr	r1, [pc, #232]	; (80015b0 <ADC_Stream0_Handler+0x284>)
 80014c8:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 80014cc:	edd1 6a00 	vldr	s13, [r1]
 80014d0:	4938      	ldr	r1, [pc, #224]	; (80015b4 <ADC_Stream0_Handler+0x288>)
 80014d2:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80014d6:	edd1 6a00 	vldr	s13, [r1]
 80014da:	4937      	ldr	r1, [pc, #220]	; (80015b8 <ADC_Stream0_Handler+0x28c>)
 80014dc:	edcd 6a08 	vstr	s13, [sp, #32]
 80014e0:	edd0 6a00 	vldr	s13, [r0]
 80014e4:	4835      	ldr	r0, [pc, #212]	; (80015bc <ADC_Stream0_Handler+0x290>)
 80014e6:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80014ea:	edd0 6a00 	vldr	s13, [r0]
 80014ee:	4834      	ldr	r0, [pc, #208]	; (80015c0 <ADC_Stream0_Handler+0x294>)
 80014f0:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80014f4:	edd0 6a00 	vldr	s13, [r0]
 80014f8:	f9ba 0000 	ldrsh.w	r0, [sl]
 80014fc:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
 8001500:	eddb 6a00 	vldr	s13, [fp]
 8001504:	4605      	mov	r5, r0
 8001506:	4608      	mov	r0, r1
 8001508:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 800150c:	edd9 6a00 	vldr	s13, [r9]
 8001510:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8001514:	e165      	b.n	80017e2 <ADC_Stream0_Handler+0x4b6>
 8001516:	bf00      	nop
 8001518:	2400cf18 	.word	0x2400cf18
 800151c:	2400db20 	.word	0x2400db20
 8001520:	24009df4 	.word	0x24009df4
 8001524:	00000000 	.word	0x00000000
 8001528:	3b000000 	.word	0x3b000000
 800152c:	2400bef8 	.word	0x2400bef8
 8001530:	240006b0 	.word	0x240006b0
 8001534:	2400cf14 	.word	0x2400cf14
 8001538:	240083a8 	.word	0x240083a8
 800153c:	24007b8c 	.word	0x24007b8c
 8001540:	24000650 	.word	0x24000650
 8001544:	24000654 	.word	0x24000654
 8001548:	24000620 	.word	0x24000620
 800154c:	24000668 	.word	0x24000668
 8001550:	2400066c 	.word	0x2400066c
 8001554:	240006ac 	.word	0x240006ac
 8001558:	2400062c 	.word	0x2400062c
 800155c:	24000660 	.word	0x24000660
 8001560:	24000664 	.word	0x24000664
 8001564:	24000628 	.word	0x24000628
 8001568:	24007b94 	.word	0x24007b94
 800156c:	24000678 	.word	0x24000678
 8001570:	2400067c 	.word	0x2400067c
 8001574:	24000634 	.word	0x24000634
 8001578:	24000670 	.word	0x24000670
 800157c:	24000674 	.word	0x24000674
 8001580:	24000630 	.word	0x24000630
 8001584:	24000688 	.word	0x24000688
 8001588:	2400068c 	.word	0x2400068c
 800158c:	2400063c 	.word	0x2400063c
 8001590:	24000680 	.word	0x24000680
 8001594:	24000684 	.word	0x24000684
 8001598:	24000638 	.word	0x24000638
 800159c:	24000698 	.word	0x24000698
 80015a0:	2400069c 	.word	0x2400069c
 80015a4:	24000644 	.word	0x24000644
 80015a8:	24000690 	.word	0x24000690
 80015ac:	24000694 	.word	0x24000694
 80015b0:	24000640 	.word	0x24000640
 80015b4:	240006a8 	.word	0x240006a8
 80015b8:	240083b0 	.word	0x240083b0
 80015bc:	2400064c 	.word	0x2400064c
 80015c0:	240006a0 	.word	0x240006a0
 80015c4:	24000658 	.word	0x24000658
 80015c8:	2400065c 	.word	0x2400065c
 80015cc:	24000624 	.word	0x24000624
 80015d0:	240006a4 	.word	0x240006a4
 80015d4:	24000648 	.word	0x24000648
 80015d8:	2400061c 	.word	0x2400061c
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 2
		// now compute the couple of elements for the next step

		inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 80015dc:	eeaa 5a84 	vfma.f32	s10, s21, s8

		inE2Rold = inER;                           inE2Iold = inEI;
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;

		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 80015e0:	0799      	lsls	r1, r3, #30
 80015e2:	eeea 5a04 	vfma.f32	s11, s20, s8
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 80015e6:	ee79 9aac 	vadd.f32	s19, s19, s25
 80015ea:	ee39 9a0c 	vadd.f32	s18, s18, s24
 80015ee:	eea9 5aa4 	vfma.f32	s10, s19, s9
 80015f2:	eee9 5a24 	vfma.f32	s11, s18, s9
 80015f6:	ee75 2a26 	vadd.f32	s5, s10, s13
 80015fa:	ee75 7a86 	vadd.f32	s15, s11, s12
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 80015fe:	f100 8118 	bmi.w	8001832 <ADC_Stream0_Handler+0x506>
		// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8001602:	eead 3a84 	vfma.f32	s6, s27, s8
 8001606:	ed9d 7a01 	vldr	s14, [sp, #4]
 800160a:	eeed 3a04 	vfma.f32	s7, s26, s8
 800160e:	eddd 5a00 	vldr	s11, [sp]
 8001612:	ee7b ba87 	vadd.f32	s23, s23, s14

		inE3Rold  = inER;                          inE3Iold  = inEI;
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8001616:	075f      	lsls	r7, r3, #29
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8001618:	ee3b ba25 	vadd.f32	s22, s22, s11
 800161c:	eeab 3aa4 	vfma.f32	s6, s23, s9
 8001620:	eeeb 3a24 	vfma.f32	s7, s22, s9
 8001624:	ee33 7a22 	vadd.f32	s14, s6, s5
 8001628:	ee33 2aa7 	vadd.f32	s4, s7, s15
		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 800162c:	f100 8112 	bmi.w	8001854 <ADC_Stream0_Handler+0x528>
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 8
		// now compute the couple of elements for the next step

		inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 8001630:	ed9d 9a04 	vldr	s18, [sp, #16]

		inE4Rold = inER;                           inE4Iold = inEI;
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8001634:	0719      	lsls	r1, r3, #28
 8001636:	eddd 9a03 	vldr	s19, [sp, #12]
 800163a:	eeaf 9a84 	vfma.f32	s18, s31, s8
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 800163e:	ed9d 5a07 	vldr	s10, [sp, #28]
 8001642:	eeef 9a04 	vfma.f32	s19, s30, s8
 8001646:	eddd 3a06 	vldr	s7, [sp, #24]
 800164a:	ee7e ea85 	vadd.f32	s29, s29, s10
 800164e:	ee3e ea23 	vadd.f32	s28, s28, s7
 8001652:	eeae 9aa4 	vfma.f32	s18, s29, s9
 8001656:	eeee 9a24 	vfma.f32	s19, s28, s9
 800165a:	ee37 9a09 	vadd.f32	s18, s14, s18
 800165e:	ee79 9a82 	vadd.f32	s19, s19, s4
		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8001662:	f100 81a1 	bmi.w	80019a8 <ADC_Stream0_Handler+0x67c>
		// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001666:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28

		inE5Rold  = inER;                          inE5Iold  = inEI;
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;

		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 800166a:	f013 0110 	ands.w	r1, r3, #16
 800166e:	ed9d ea02 	vldr	s28, [sp, #8]
 8001672:	eddd ba0c 	vldr	s23, [sp, #48]	; 0x30
 8001676:	eddd ea05 	vldr	s29, [sp, #20]
 800167a:	eeae ba04 	vfma.f32	s22, s28, s8
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 800167e:	ed9d 3a13 	vldr	s6, [sp, #76]	; 0x4c
 8001682:	ed9d 5a0b 	vldr	s10, [sp, #44]	; 0x2c
 8001686:	eeee ba84 	vfma.f32	s23, s29, s8
 800168a:	eddd 3a0d 	vldr	s7, [sp, #52]	; 0x34
 800168e:	ee33 5a05 	vadd.f32	s10, s6, s10
 8001692:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001696:	910b      	str	r1, [sp, #44]	; 0x2c
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001698:	ee73 5a23 	vadd.f32	s11, s6, s7
 800169c:	eea5 ba24 	vfma.f32	s22, s10, s9
 80016a0:	eee5 baa4 	vfma.f32	s23, s11, s9
 80016a4:	ee39 ba0b 	vadd.f32	s22, s18, s22
 80016a8:	ee79 baab 	vadd.f32	s23, s19, s23
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80016ac:	f040 81a5 	bne.w	80019fa <ADC_Stream0_Handler+0x6ce>
		// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
		// produced with 4 of the previous elem, i.e. with 16 input samples, totalling
		// a decimation by 16. Now compute the couple of elements for the next step

		inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016b0:	eddd 3a08 	vldr	s7, [sp, #32]
 80016b4:	ed9d 5a0e 	vldr	s10, [sp, #56]	; 0x38
 80016b8:	ed9d 3a09 	vldr	s6, [sp, #36]	; 0x24
 80016bc:	eea3 5a84 	vfma.f32	s10, s7, s8
 80016c0:	eddd 3a10 	vldr	s7, [sp, #64]	; 0x40
 80016c4:	ed9d ea11 	vldr	s28, [sp, #68]	; 0x44
 80016c8:	eee3 3a04 	vfma.f32	s7, s6, s8
 80016cc:	ed9d 3a0f 	vldr	s6, [sp, #60]	; 0x3c
		// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
		// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band

		// create a block of BSIZE*4 entries, which will be then decimated by 4

		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016d0:	49df      	ldr	r1, [pc, #892]	; (8001a50 <ADC_Stream0_Handler+0x724>)
 80016d2:	eb01 0785 	add.w	r7, r1, r5, lsl #2
 80016d6:	00a9      	lsls	r1, r5, #2
 80016d8:	3501      	adds	r5, #1
 80016da:	9703      	str	r7, [sp, #12]
 80016dc:	eef0 5a63 	vmov.f32	s11, s7
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016e0:	eddd 3a14 	vldr	s7, [sp, #80]	; 0x50
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016e4:	4fdb      	ldr	r7, [pc, #876]	; (8001a54 <ADC_Stream0_Handler+0x728>)
 80016e6:	b22d      	sxth	r5, r5
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016e8:	ee33 3a83 	vadd.f32	s6, s7, s6
 80016ec:	eddd 3a15 	vldr	s7, [sp, #84]	; 0x54
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016f0:	4439      	add	r1, r7
		//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

		if(idx < BSIZE*4)
 80016f2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016f6:	ee73 3a8e 	vadd.f32	s7, s7, s28
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016fa:	9f03      	ldr	r7, [sp, #12]
 80016fc:	eea3 5a24 	vfma.f32	s10, s6, s9
 8001700:	eee3 5aa4 	vfma.f32	s11, s7, s9
 8001704:	eddf 3ad4 	vldr	s7, [pc, #848]	; 8001a58 <ADC_Stream0_Handler+0x72c>
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001708:	ee35 5a0b 	vadd.f32	s10, s10, s22
 800170c:	ee75 5aab 	vadd.f32	s11, s11, s23
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001710:	ee25 5a23 	vmul.f32	s10, s10, s7
 8001714:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8001718:	ed87 5a00 	vstr	s10, [r7]
 800171c:	edc1 5a00 	vstr	s11, [r1]
		if(idx < BSIZE*4)
 8001720:	f2c0 81da 	blt.w	8001ad8 <ADC_Stream0_Handler+0x7ac>

#endif

			// generate now an interrupt to signal the base band processing routine that it has a new buffer

			EXTI->SWIER1 |= GPIO_PIN_14;
 8001724:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001728:	eddd 3a08 	vldr	s7, [sp, #32]
 800172c:	ed9d 5a09 	vldr	s10, [sp, #36]	; 0x24
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001730:	eef0 5a4a 	vmov.f32	s11, s20
			EXTI->SWIER1 |= GPIO_PIN_14;
 8001734:	68b9      	ldr	r1, [r7, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001736:	eeb0 aa46 	vmov.f32	s20, s12
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800173a:	ed9d 3a02 	vldr	s6, [sp, #8]
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800173e:	edcd 3a0e 	vstr	s7, [sp, #56]	; 0x38
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001742:	eef0 3a4d 	vmov.f32	s7, s26
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001746:	ed8d fa03 	vstr	s30, [sp, #12]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800174a:	eeb0 da67 	vmov.f32	s26, s15
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800174e:	edcd fa04 	vstr	s31, [sp, #16]
 8001752:	eeb0 fa42 	vmov.f32	s30, s4
 8001756:	eef0 fa47 	vmov.f32	s31, s14
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800175a:	ed8d 5a10 	vstr	s10, [sp, #64]	; 0x40
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800175e:	ed8d 3a0a 	vstr	s6, [sp, #40]	; 0x28
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001762:	eeb0 5a6a 	vmov.f32	s10, s21
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001766:	eeb0 3a6d 	vmov.f32	s6, s27
			EXTI->SWIER1 |= GPIO_PIN_14;
 800176a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800176e:	eef0 da62 	vmov.f32	s27, s5
		inE6Rold = inER;                           inE6Iold = inEI;
 8001772:	ed9d 6a14 	vldr	s12, [sp, #80]	; 0x50
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001776:	eef0 aa66 	vmov.f32	s21, s13
		inE6Rold = inER;                           inE6Iold = inEI;
 800177a:	eddd 2a15 	vldr	s5, [sp, #84]	; 0x54
		inE5Rold  = inER;                          inE5Iold  = inEI;
 800177e:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
		idx = 0;
 8001782:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001784:	edcd ea0c 	vstr	s29, [sp, #48]	; 0x30
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001788:	edcd ba09 	vstr	s23, [sp, #36]	; 0x24
 800178c:	ed8d ba08 	vstr	s22, [sp, #32]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001790:	edcd 9a05 	vstr	s19, [sp, #20]
 8001794:	ed8d 9a02 	vstr	s18, [sp, #8]
			EXTI->SWIER1 |= GPIO_PIN_14;
 8001798:	60b9      	str	r1, [r7, #8]
		inE6Rold = inER;                           inE6Iold = inEI;
 800179a:	edcd 2a11 	vstr	s5, [sp, #68]	; 0x44
 800179e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
		inE5Rold  = inER;                          inE5Iold  = inEI;
 80017a2:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
		inE2Rold = inER;                           inE2Iold = inEI;
 80017a6:	eeb0 9a4c 	vmov.f32	s18, s24
		inE5Rold  = inER;                          inE5Iold  = inEI;
 80017aa:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
		inE2Rold = inER;                           inE2Iold = inEI;
 80017ae:	eef0 9a6c 	vmov.f32	s19, s25
		inE4Rold = inER;                           inE4Iold = inEI;
 80017b2:	ed9d ea06 	vldr	s28, [sp, #24]
 80017b6:	eddd ea07 	vldr	s29, [sp, #28]
		inE3Rold  = inER;                          inE3Iold  = inEI;
 80017ba:	ed9d ba00 	vldr	s22, [sp]
 80017be:	eddd ba01 	vldr	s23, [sp, #4]
		inE5Rold  = inER;                          inE5Iold  = inEI;
 80017c2:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
	while(k--)
 80017c6:	3208      	adds	r2, #8
 80017c8:	3b01      	subs	r3, #1
 80017ca:	eef0 7a40 	vmov.f32	s15, s0
 80017ce:	3008      	adds	r0, #8
 80017d0:	4294      	cmp	r4, r2
 80017d2:	eeb0 7a60 	vmov.f32	s14, s1
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	d059      	beq.n	800188e <ADC_Stream0_Handler+0x562>
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 80017da:	eef0 0a48 	vmov.f32	s1, s16
 80017de:	eeb0 0a68 	vmov.f32	s0, s17
 80017e2:	ed52 8a01 	vldr	s17, [r2, #-4]
 80017e6:	eeb0 2a41 	vmov.f32	s4, s2
 80017ea:	ed10 8a01 	vldr	s16, [r0, #-4]
 80017ee:	eef0 2a61 	vmov.f32	s5, s3
 80017f2:	eef0 6a68 	vmov.f32	s13, s17
 80017f6:	ed12 1a02 	vldr	s2, [r2, #-8]
 80017fa:	eeb0 6a48 	vmov.f32	s12, s16
 80017fe:	ed50 1a02 	vldr	s3, [r0, #-8]
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001802:	ee31 2a02 	vadd.f32	s4, s2, s4
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8001806:	07df      	lsls	r7, r3, #31
 8001808:	eee0 6a04 	vfma.f32	s13, s0, s8
 800180c:	eea0 6a84 	vfma.f32	s12, s1, s8
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001810:	ee72 2aa1 	vadd.f32	s5, s5, s3
 8001814:	eee2 6a24 	vfma.f32	s13, s4, s9
 8001818:	eea2 6aa4 	vfma.f32	s12, s5, s9
 800181c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001820:	ee37 6a06 	vadd.f32	s12, s14, s12
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8001824:	f57f aeda 	bpl.w	80015dc <ADC_Stream0_Handler+0x2b0>
			tmp1R = outR; tmp1I = outI;  // save the even element produced
 8001828:	eeb0 ca46 	vmov.f32	s24, s12
 800182c:	eef0 ca66 	vmov.f32	s25, s13
 8001830:	e7c9      	b.n	80017c6 <ADC_Stream0_Handler+0x49a>
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001832:	eef0 5a4a 	vmov.f32	s11, s20
			tmp2R = outR; tmp2I = outI;  // save the even element produced
 8001836:	edcd 7a00 	vstr	s15, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800183a:	eeb0 5a6a 	vmov.f32	s10, s21
			tmp2R = outR; tmp2I = outI;  // save the even element produced
 800183e:	edcd 2a01 	vstr	s5, [sp, #4]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001842:	eeb0 aa46 	vmov.f32	s20, s12
 8001846:	eef0 aa66 	vmov.f32	s21, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 800184a:	eeb0 9a4c 	vmov.f32	s18, s24
 800184e:	eef0 9a6c 	vmov.f32	s19, s25
 8001852:	e7b8      	b.n	80017c6 <ADC_Stream0_Handler+0x49a>
 8001854:	eeb0 ba65 	vmov.f32	s22, s11
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8001858:	eddd ba01 	vldr	s23, [sp, #4]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800185c:	eef0 3a4d 	vmov.f32	s7, s26
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 8001860:	ed8d 2a06 	vstr	s4, [sp, #24]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001864:	eeb0 3a6d 	vmov.f32	s6, s27
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 8001868:	ed8d 7a07 	vstr	s14, [sp, #28]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800186c:	eef0 5a4a 	vmov.f32	s11, s20
 8001870:	eeb0 5a6a 	vmov.f32	s10, s21
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001874:	eeb0 da67 	vmov.f32	s26, s15
 8001878:	eef0 da62 	vmov.f32	s27, s5
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800187c:	eeb0 aa46 	vmov.f32	s20, s12
 8001880:	eef0 aa66 	vmov.f32	s21, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 8001884:	eeb0 9a4c 	vmov.f32	s18, s24
 8001888:	eef0 9a6c 	vmov.f32	s19, s25
 800188c:	e79b      	b.n	80017c6 <ADC_Stream0_Handler+0x49a>
 800188e:	4a73      	ldr	r2, [pc, #460]	; (8001a5c <ADC_Stream0_Handler+0x730>)
 8001890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001894:	eddd 7a04 	vldr	s15, [sp, #16]
 8001898:	ed82 8a00 	vstr	s16, [r2]
 800189c:	4a70      	ldr	r2, [pc, #448]	; (8001a60 <ADC_Stream0_Handler+0x734>)
 800189e:	edc8 8a00 	vstr	s17, [r8]
 80018a2:	edc2 0a00 	vstr	s1, [r2]
 80018a6:	4a6f      	ldr	r2, [pc, #444]	; (8001a64 <ADC_Stream0_Handler+0x738>)
 80018a8:	ed8e 0a00 	vstr	s0, [lr]
 80018ac:	edc2 1a00 	vstr	s3, [r2]
 80018b0:	4a6d      	ldr	r2, [pc, #436]	; (8001a68 <ADC_Stream0_Handler+0x73c>)
 80018b2:	ed8c 1a00 	vstr	s2, [ip]
 80018b6:	edc2 aa00 	vstr	s21, [r2]
 80018ba:	4a6c      	ldr	r2, [pc, #432]	; (8001a6c <ADC_Stream0_Handler+0x740>)
 80018bc:	ed82 5a00 	vstr	s10, [r2]
 80018c0:	4a6b      	ldr	r2, [pc, #428]	; (8001a70 <ADC_Stream0_Handler+0x744>)
 80018c2:	edc2 9a00 	vstr	s19, [r2]
 80018c6:	4a6b      	ldr	r2, [pc, #428]	; (8001a74 <ADC_Stream0_Handler+0x748>)
 80018c8:	ed82 aa00 	vstr	s20, [r2]
 80018cc:	4a6a      	ldr	r2, [pc, #424]	; (8001a78 <ADC_Stream0_Handler+0x74c>)
 80018ce:	edc2 5a00 	vstr	s11, [r2]
 80018d2:	4a6a      	ldr	r2, [pc, #424]	; (8001a7c <ADC_Stream0_Handler+0x750>)
 80018d4:	ed82 9a00 	vstr	s18, [r2]
 80018d8:	4a69      	ldr	r2, [pc, #420]	; (8001a80 <ADC_Stream0_Handler+0x754>)
 80018da:	edc2 da00 	vstr	s27, [r2]
 80018de:	4a69      	ldr	r2, [pc, #420]	; (8001a84 <ADC_Stream0_Handler+0x758>)
 80018e0:	ed82 3a00 	vstr	s6, [r2]
 80018e4:	4a68      	ldr	r2, [pc, #416]	; (8001a88 <ADC_Stream0_Handler+0x75c>)
 80018e6:	edc2 ba00 	vstr	s23, [r2]
 80018ea:	4a68      	ldr	r2, [pc, #416]	; (8001a8c <ADC_Stream0_Handler+0x760>)
 80018ec:	ed82 da00 	vstr	s26, [r2]
 80018f0:	4a67      	ldr	r2, [pc, #412]	; (8001a90 <ADC_Stream0_Handler+0x764>)
 80018f2:	edc2 3a00 	vstr	s7, [r2]
 80018f6:	4a67      	ldr	r2, [pc, #412]	; (8001a94 <ADC_Stream0_Handler+0x768>)
 80018f8:	ed82 ba00 	vstr	s22, [r2]
 80018fc:	4a66      	ldr	r2, [pc, #408]	; (8001a98 <ADC_Stream0_Handler+0x76c>)
 80018fe:	edc2 fa00 	vstr	s31, [r2]
 8001902:	4a66      	ldr	r2, [pc, #408]	; (8001a9c <ADC_Stream0_Handler+0x770>)
 8001904:	edc2 7a00 	vstr	s15, [r2]
 8001908:	4a65      	ldr	r2, [pc, #404]	; (8001aa0 <ADC_Stream0_Handler+0x774>)
 800190a:	eddd 7a03 	vldr	s15, [sp, #12]
 800190e:	edc2 ea00 	vstr	s29, [r2]
 8001912:	4a64      	ldr	r2, [pc, #400]	; (8001aa4 <ADC_Stream0_Handler+0x778>)
 8001914:	ed82 fa00 	vstr	s30, [r2]
 8001918:	4a63      	ldr	r2, [pc, #396]	; (8001aa8 <ADC_Stream0_Handler+0x77c>)
 800191a:	edc2 7a00 	vstr	s15, [r2]
 800191e:	4a63      	ldr	r2, [pc, #396]	; (8001aac <ADC_Stream0_Handler+0x780>)
 8001920:	eddd 7a02 	vldr	s15, [sp, #8]
 8001924:	ed82 ea00 	vstr	s28, [r2]
 8001928:	4a61      	ldr	r2, [pc, #388]	; (8001ab0 <ADC_Stream0_Handler+0x784>)
 800192a:	edc2 7a00 	vstr	s15, [r2]
 800192e:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8001932:	4a60      	ldr	r2, [pc, #384]	; (8001ab4 <ADC_Stream0_Handler+0x788>)
 8001934:	edc2 7a00 	vstr	s15, [r2]
 8001938:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800193c:	4a5e      	ldr	r2, [pc, #376]	; (8001ab8 <ADC_Stream0_Handler+0x78c>)
 800193e:	edc2 7a00 	vstr	s15, [r2]
 8001942:	eddd 7a05 	vldr	s15, [sp, #20]
 8001946:	4a5d      	ldr	r2, [pc, #372]	; (8001abc <ADC_Stream0_Handler+0x790>)
 8001948:	f8aa 5000 	strh.w	r5, [sl]
 800194c:	edc2 7a00 	vstr	s15, [r2]
 8001950:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8001954:	4a5a      	ldr	r2, [pc, #360]	; (8001ac0 <ADC_Stream0_Handler+0x794>)
 8001956:	8033      	strh	r3, [r6, #0]
 8001958:	edc2 7a00 	vstr	s15, [r2]
 800195c:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8001960:	4a58      	ldr	r2, [pc, #352]	; (8001ac4 <ADC_Stream0_Handler+0x798>)
 8001962:	edc2 7a00 	vstr	s15, [r2]
 8001966:	eddd 7a08 	vldr	s15, [sp, #32]
 800196a:	4a57      	ldr	r2, [pc, #348]	; (8001ac8 <ADC_Stream0_Handler+0x79c>)
 800196c:	edc2 7a00 	vstr	s15, [r2]
 8001970:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8001974:	4a55      	ldr	r2, [pc, #340]	; (8001acc <ADC_Stream0_Handler+0x7a0>)
 8001976:	edc2 7a00 	vstr	s15, [r2]
 800197a:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800197e:	4a54      	ldr	r2, [pc, #336]	; (8001ad0 <ADC_Stream0_Handler+0x7a4>)
 8001980:	edc2 7a00 	vstr	s15, [r2]
 8001984:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8001988:	4a52      	ldr	r2, [pc, #328]	; (8001ad4 <ADC_Stream0_Handler+0x7a8>)
 800198a:	edc2 7a00 	vstr	s15, [r2]
 800198e:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8001992:	edcb 7a00 	vstr	s15, [fp]
 8001996:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 800199a:	edc9 7a00 	vstr	s15, [r9]
		}

		// LED_YELLOW_OFF;

	}
 800199e:	b017      	add	sp, #92	; 0x5c
 80019a0:	ecbd 8b10 	vpop	{d8-d15}
 80019a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019a8:	eeb0 ea63 	vmov.f32	s28, s7
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80019ac:	ed8d fa03 	vstr	s30, [sp, #12]
 80019b0:	eef0 ea45 	vmov.f32	s29, s10
 80019b4:	edcd fa04 	vstr	s31, [sp, #16]
 80019b8:	eeb0 ba65 	vmov.f32	s22, s11
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 80019bc:	edcd 9a12 	vstr	s19, [sp, #72]	; 0x48
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80019c0:	eef0 3a4d 	vmov.f32	s7, s26
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 80019c4:	ed8d 9a13 	vstr	s18, [sp, #76]	; 0x4c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80019c8:	eeb0 3a6d 	vmov.f32	s6, s27
		inE3Rold  = inER;                          inE3Iold  = inEI;
 80019cc:	eddd ba01 	vldr	s23, [sp, #4]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80019d0:	eef0 5a4a 	vmov.f32	s11, s20
 80019d4:	eeb0 5a6a 	vmov.f32	s10, s21
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80019d8:	eeb0 fa42 	vmov.f32	s30, s4
 80019dc:	eef0 fa47 	vmov.f32	s31, s14
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80019e0:	eeb0 da67 	vmov.f32	s26, s15
 80019e4:	eef0 da62 	vmov.f32	s27, s5
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80019e8:	eeb0 aa46 	vmov.f32	s20, s12
 80019ec:	eef0 aa66 	vmov.f32	s21, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 80019f0:	eeb0 9a4c 	vmov.f32	s18, s24
 80019f4:	eef0 9a6c 	vmov.f32	s19, s25
 80019f8:	e6e5      	b.n	80017c6 <ADC_Stream0_Handler+0x49a>
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80019fa:	eddd 5a02 	vldr	s11, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80019fe:	eef0 3a4d 	vmov.f32	s7, s26
 8001a02:	eeb0 3a6d 	vmov.f32	s6, s27
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a06:	ed8d fa03 	vstr	s30, [sp, #12]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a0a:	eeb0 5a6a 	vmov.f32	s10, s21
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a0e:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a12:	edcd fa04 	vstr	s31, [sp, #16]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a16:	eef0 5a4a 	vmov.f32	s11, s20
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a1a:	eeb0 fa42 	vmov.f32	s30, s4
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a1e:	edcd ea0c 	vstr	s29, [sp, #48]	; 0x30
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a22:	eef0 fa47 	vmov.f32	s31, s14
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a26:	edcd 9a05 	vstr	s19, [sp, #20]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a2a:	eeb0 da67 	vmov.f32	s26, s15
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a2e:	ed8d 9a02 	vstr	s18, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a32:	eef0 da62 	vmov.f32	s27, s5
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001a36:	edcd ba15 	vstr	s23, [sp, #84]	; 0x54
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a3a:	eeb0 aa46 	vmov.f32	s20, s12
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001a3e:	ed8d ba14 	vstr	s22, [sp, #80]	; 0x50
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a42:	eef0 aa66 	vmov.f32	s21, s13
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8001a46:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 8001a4a:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8001a4e:	e6aa      	b.n	80017a6 <ADC_Stream0_Handler+0x47a>
 8001a50:	2000d000 	.word	0x2000d000
 8001a54:	2000b000 	.word	0x2000b000
 8001a58:	34000000 	.word	0x34000000
 8001a5c:	24000650 	.word	0x24000650
 8001a60:	24000654 	.word	0x24000654
 8001a64:	24000620 	.word	0x24000620
 8001a68:	24000668 	.word	0x24000668
 8001a6c:	2400066c 	.word	0x2400066c
 8001a70:	2400062c 	.word	0x2400062c
 8001a74:	24000660 	.word	0x24000660
 8001a78:	24000664 	.word	0x24000664
 8001a7c:	24000628 	.word	0x24000628
 8001a80:	24000678 	.word	0x24000678
 8001a84:	2400067c 	.word	0x2400067c
 8001a88:	24000634 	.word	0x24000634
 8001a8c:	24000670 	.word	0x24000670
 8001a90:	24000674 	.word	0x24000674
 8001a94:	24000630 	.word	0x24000630
 8001a98:	24000688 	.word	0x24000688
 8001a9c:	2400068c 	.word	0x2400068c
 8001aa0:	2400063c 	.word	0x2400063c
 8001aa4:	24000680 	.word	0x24000680
 8001aa8:	24000684 	.word	0x24000684
 8001aac:	24000638 	.word	0x24000638
 8001ab0:	24000698 	.word	0x24000698
 8001ab4:	2400069c 	.word	0x2400069c
 8001ab8:	24000644 	.word	0x24000644
 8001abc:	24000690 	.word	0x24000690
 8001ac0:	24000694 	.word	0x24000694
 8001ac4:	24000640 	.word	0x24000640
 8001ac8:	240006a8 	.word	0x240006a8
 8001acc:	240006ac 	.word	0x240006ac
 8001ad0:	2400064c 	.word	0x2400064c
 8001ad4:	240006a0 	.word	0x240006a0
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001ad8:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001adc:	eef0 3a4d 	vmov.f32	s7, s26
 8001ae0:	eeb0 da67 	vmov.f32	s26, s15
		inE6Rold = inER;                           inE6Iold = inEI;
 8001ae4:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001ae8:	edcd 5a10 	vstr	s11, [sp, #64]	; 0x40
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001aec:	eeb0 3a6d 	vmov.f32	s6, s27
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001af0:	eddd 5a08 	vldr	s11, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001af4:	eeb0 5a6a 	vmov.f32	s10, s21
		inE6Rold = inER;                           inE6Iold = inEI;
 8001af8:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001afc:	eef0 da62 	vmov.f32	s27, s5
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b00:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b04:	eef0 aa66 	vmov.f32	s21, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b08:	eddd 5a05 	vldr	s11, [sp, #20]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b0c:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b10:	edcd 5a0c 	vstr	s11, [sp, #48]	; 0x30
 8001b14:	eddd 5a02 	vldr	s11, [sp, #8]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001b18:	ed8d fa03 	vstr	s30, [sp, #12]
 8001b1c:	eeb0 fa42 	vmov.f32	s30, s4
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b20:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b24:	eef0 5a4a 	vmov.f32	s11, s20
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001b28:	edcd fa04 	vstr	s31, [sp, #16]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b2c:	eeb0 aa46 	vmov.f32	s20, s12
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001b30:	eef0 fa47 	vmov.f32	s31, s14
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b34:	edcd ba09 	vstr	s23, [sp, #36]	; 0x24
 8001b38:	ed8d ba08 	vstr	s22, [sp, #32]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b3c:	edcd 9a05 	vstr	s19, [sp, #20]
 8001b40:	ed8d 9a02 	vstr	s18, [sp, #8]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b44:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8001b48:	e77d      	b.n	8001a46 <ADC_Stream0_Handler+0x71a>
		SDR_ComputeLO(LOfreq+cwpitch);  // prepare next LO buffer
 8001b4a:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <ADC_Stream0_Handler+0x838>)
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <ADC_Stream0_Handler+0x83c>)
 8001b4e:	ed92 0a00 	vldr	s0, [r2]
 8001b52:	edd3 7a00 	vldr	s15, [r3]
 8001b56:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001b5a:	f000 f807 	bl	8001b6c <SDR_ComputeLO>
 8001b5e:	f7ff bbfa 	b.w	8001356 <ADC_Stream0_Handler+0x2a>
 8001b62:	bf00      	nop
 8001b64:	24009df4 	.word	0x24009df4
 8001b68:	24009dec 	.word	0x24009dec

08001b6c <SDR_ComputeLO>:

#include "Globals.h"

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 8001b6c:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
  static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f, 
	                ypi, ypq, tmpi, gain=1.f;
	
	if (oldfreq != freq)
 8001b6e:	4b4f      	ldr	r3, [pc, #316]	; (8001cac <SDR_ComputeLO+0x140>)
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	eef4 7a40 	vcmp.f32	s15, s0
{
 8001b78:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 8001b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b80:	d171      	bne.n	8001c66 <SDR_ComputeLO+0xfa>
 8001b82:	4a4b      	ldr	r2, [pc, #300]	; (8001cb0 <SDR_ComputeLO+0x144>)
 8001b84:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <SDR_ComputeLO+0x148>)
 8001b86:	ed92 8a00 	vldr	s16, [r2]
 8001b8a:	ed93 6a00 	vldr	s12, [r3]
 8001b8e:	4d4a      	ldr	r5, [pc, #296]	; (8001cb8 <SDR_ComputeLO+0x14c>)
 8001b90:	4c4a      	ldr	r4, [pc, #296]	; (8001cbc <SDR_ComputeLO+0x150>)
// Coupled Quadrature Oscillator with level stabilization	
	while(k)
	{                    
// loop partially unrolled for performance		

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001b92:	484b      	ldr	r0, [pc, #300]	; (8001cc0 <SDR_ComputeLO+0x154>)
 8001b94:	4b4b      	ldr	r3, [pc, #300]	; (8001cc4 <SDR_ComputeLO+0x158>)
 8001b96:	ed95 5a00 	vldr	s10, [r5]
 8001b9a:	edd4 7a00 	vldr	s15, [r4]
 8001b9e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8001ba2:	edd0 5a00 	vldr	s11, [r0]
 8001ba6:	4a48      	ldr	r2, [pc, #288]	; (8001cc8 <SDR_ComputeLO+0x15c>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ba8:	ee27 7a88 	vmul.f32	s14, s15, s16
 8001bac:	3310      	adds	r3, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bae:	ee66 7a67 	vnmul.f32	s15, s12, s15
 8001bb2:	3210      	adds	r2, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bb4:	eea5 7a06 	vfma.f32	s14, s10, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bb8:	eee5 7a08 	vfma.f32	s15, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bbc:	ee25 7a87 	vmul.f32	s14, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bc0:	ee67 6aa5 	vmul.f32	s13, s15, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bc4:	ee67 7a08 	vmul.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bc8:	ed02 7a08 	vstr	s14, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bcc:	ee26 7a47 	vnmul.f32	s14, s12, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bd0:	ed43 6a08 	vstr	s13, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bd4:	eee6 7a86 	vfma.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bd8:	eea6 7a88 	vfma.f32	s14, s13, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bdc:	ee65 7aa7 	vmul.f32	s15, s11, s15
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001be0:	ee25 7a87 	vmul.f32	s14, s11, s14
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001be4:	ee67 6a88 	vmul.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001be8:	ed42 7a07 	vstr	s15, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bec:	ee66 7a67 	vnmul.f32	s15, s12, s15
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bf0:	ed03 7a07 	vstr	s14, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bf4:	eee7 6a06 	vfma.f32	s13, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bf8:	eee7 7a08 	vfma.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bfc:	ee25 7aa6 	vmul.f32	s14, s11, s13
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c00:	ee65 7aa7 	vmul.f32	s15, s11, s15
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c04:	ee66 6a47 	vnmul.f32	s13, s12, s14
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c08:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c0c:	ee27 7a08 	vmul.f32	s14, s14, s16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c10:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c14:	eee7 6a88 	vfma.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c18:	eea7 7a86 	vfma.f32	s14, s15, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c1c:	ee25 5aa6 	vmul.f32	s10, s11, s13
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c20:	ee65 7a87 	vmul.f32	s15, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c24:	ed03 5a05 	vstr	s10, [r3, #-20]	; 0xffffffec
	while(k)
 8001c28:	428b      	cmp	r3, r1
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c2a:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 8001c2e:	d1bb      	bne.n	8001ba8 <SDR_ComputeLO+0x3c>
    ym1i = tmpi;

    k--;
	}
// compute the gain to be applied to stabilize the level
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001c30:	ee67 5a07 	vmul.f32	s11, s14, s14
 8001c34:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8001ccc <SDR_ComputeLO+0x160>
 8001c38:	edc4 7a00 	vstr	s15, [r4]
 8001c3c:	eddf 4a24 	vldr	s9, [pc, #144]	; 8001cd0 <SDR_ComputeLO+0x164>
 8001c40:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8001c44:	4a23      	ldr	r2, [pc, #140]	; (8001cd4 <SDR_ComputeLO+0x168>)
 8001c46:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <SDR_ComputeLO+0x16c>)
 8001c48:	ed85 5a00 	vstr	s10, [r5]
 8001c4c:	edc2 6a00 	vstr	s13, [r2]
 8001c50:	ed83 7a00 	vstr	s14, [r3]
 8001c54:	ee76 7a65 	vsub.f32	s15, s12, s11
}	
 8001c58:	ecbd 8b04 	vpop	{d8-d9}
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001c5c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8001c60:	edc0 7a00 	vstr	s15, [r0]
}	
 8001c64:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001c66:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001cdc <SDR_ComputeLO+0x170>
 8001c6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ce0 <SDR_ComputeLO+0x174>)
 8001c6c:	ee60 7a27 	vmul.f32	s15, s0, s15
	  oldfreq  =  freq;
 8001c70:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001c74:	ed92 7a00 	vldr	s14, [r2]
 8001c78:	ee87 9a87 	vdiv.f32	s18, s15, s14
 8001c7c:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8001c80:	eeb0 0b49 	vmov.f64	d0, d9
 8001c84:	f00f fb30 	bl	80112e8 <cos>
 8001c88:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <SDR_ComputeLO+0x144>)
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001c8e:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001c92:	ed83 8a00 	vstr	s16, [r3]
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001c96:	f00f fb6f 	bl	8011378 <sin>
 8001c9a:	eeb7 6bc0 	vcvt.f32.f64	s12, d0
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <SDR_ComputeLO+0x148>)
 8001ca0:	eeb1 6a46 	vneg.f32	s12, s12
 8001ca4:	ed83 6a00 	vstr	s12, [r3]
 8001ca8:	e771      	b.n	8001b8e <SDR_ComputeLO+0x22>
 8001caa:	bf00      	nop
 8001cac:	2400016c 	.word	0x2400016c
 8001cb0:	240006b4 	.word	0x240006b4
 8001cb4:	240006c4 	.word	0x240006c4
 8001cb8:	24000178 	.word	0x24000178
 8001cbc:	240006dc 	.word	0x240006dc
 8001cc0:	24000168 	.word	0x24000168
 8001cc4:	24004128 	.word	0x24004128
 8001cc8:	240049dc 	.word	0x240049dc
 8001ccc:	46000200 	.word	0x46000200
 8001cd0:	39000000 	.word	0x39000000
 8001cd4:	240006e0 	.word	0x240006e0
 8001cd8:	240006e4 	.word	0x240006e4
 8001cdc:	40c90fdb 	.word	0x40c90fdb
 8001ce0:	240049c4 	.word	0x240049c4

08001ce4 <SDR_2R_toC_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time
  while(blkCnt)
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	d02e      	beq.n	8001d46 <SDR_2R_toC_f32+0x62>
 8001ce8:	3010      	adds	r0, #16
 8001cea:	3110      	adds	r1, #16
 8001cec:	3220      	adds	r2, #32
{
 8001cee:	b410      	push	{r4}
  {
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001cf0:	f850 4c10 	ldr.w	r4, [r0, #-16]
  while(blkCnt)
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	f100 0010 	add.w	r0, r0, #16
 8001cfa:	f101 0110 	add.w	r1, r1, #16
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001cfe:	f842 4c20 	str.w	r4, [r2, #-32]
 8001d02:	f102 0220 	add.w	r2, r2, #32
 8001d06:	f851 4c20 	ldr.w	r4, [r1, #-32]
 8001d0a:	f842 4c3c 	str.w	r4, [r2, #-60]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d0e:	f850 4c1c 	ldr.w	r4, [r0, #-28]
 8001d12:	f842 4c38 	str.w	r4, [r2, #-56]
 8001d16:	f851 4c1c 	ldr.w	r4, [r1, #-28]
 8001d1a:	f842 4c34 	str.w	r4, [r2, #-52]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d1e:	f850 4c18 	ldr.w	r4, [r0, #-24]
 8001d22:	f842 4c30 	str.w	r4, [r2, #-48]
 8001d26:	f851 4c18 	ldr.w	r4, [r1, #-24]
 8001d2a:	f842 4c2c 	str.w	r4, [r2, #-44]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d2e:	f850 4c14 	ldr.w	r4, [r0, #-20]
 8001d32:	f842 4c28 	str.w	r4, [r2, #-40]
 8001d36:	f851 4c14 	ldr.w	r4, [r1, #-20]
 8001d3a:	f842 4c24 	str.w	r4, [r2, #-36]
  while(blkCnt)
 8001d3e:	d1d7      	bne.n	8001cf0 <SDR_2R_toC_f32+0xc>
    
    blkCnt--;
  }
}
 8001d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	4770      	bx	lr

08001d48 <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 8001d48:	4b35      	ldr	r3, [pc, #212]	; (8001e20 <SDR_downconvert_f32+0xd8>)
 8001d4a:	3008      	adds	r0, #8
 8001d4c:	3110      	adds	r1, #16
 8001d4e:	3210      	adds	r2, #16
    tmp2=((*(pt+1)-offset)) / 2048.f;
	tmp1 = tmp2;
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3 = tmp4;
#else
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d50:	eddf 5a34 	vldr	s11, [pc, #208]	; 8001e24 <SDR_downconvert_f32+0xdc>
{
 8001d54:	b430      	push	{r4, r5}
 8001d56:	f503 6500 	add.w	r5, r3, #2048	; 0x800
 8001d5a:	4c33      	ldr	r4, [pc, #204]	; (8001e28 <SDR_downconvert_f32+0xe0>)
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001d5c:	f830 cc08 	ldrh.w	ip, [r0, #-8]
 8001d60:	3310      	adds	r3, #16
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3=((*(pt+2)-offset)) / 2048.f;
#endif


		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001d62:	ed13 5a08 	vldr	s10, [r3, #-32]	; 0xffffffe0
 8001d66:	3008      	adds	r0, #8
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001d68:	ee06 ca10 	vmov	s12, ip
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d6c:	f830 cc0e 	ldrh.w	ip, [r0, #-14]
 8001d70:	3110      	adds	r1, #16
 8001d72:	3410      	adds	r4, #16
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001d74:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d78:	ee06 ca90 	vmov	s13, ip
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001d7c:	f830 cc0a 	ldrh.w	ip, [r0, #-10]
 8001d80:	3210      	adds	r2, #16
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d82:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001d86:	ee36 6a40 	vsub.f32	s12, s12, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001d8a:	ee07 ca90 	vmov	s15, ip
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001d8e:	f830 cc0c 	ldrh.w	ip, [r0, #-12]
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d92:	ee76 6ac0 	vsub.f32	s13, s13, s0
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001d96:	ee26 6a25 	vmul.f32	s12, s12, s11
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001d9a:	ee07 ca10 	vmov	s14, ip
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001da2:	ee66 6aa5 	vmul.f32	s13, s13, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001da6:	ee25 5a06 	vmul.f32	s10, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001daa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001dae:	ee77 7ac0 	vsub.f32	s15, s15, s0
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001db2:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 8001db6:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001dba:	ee37 7a40 	vsub.f32	s14, s14, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001dbe:	ee67 7aa5 	vmul.f32	s15, s15, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001dc2:	ee25 6a06 	vmul.f32	s12, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001dc6:	ee27 7a25 	vmul.f32	s14, s14, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001dca:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		 *zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 8001dce:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8001dd2:	ee26 6a26 	vmul.f32	s12, s12, s13
 8001dd6:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 8001dda:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 8001dde:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001de2:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		 *zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 8001de6:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8001dea:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001dee:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 8001df2:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 8001df6:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001dfa:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001dfe:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
  while(blkCnt)
 8001e02:	42ab      	cmp	r3, r5
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001e04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e08:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 8001e0c:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 8001e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e14:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
  while(blkCnt)
 8001e18:	d1a0      	bne.n	8001d5c <SDR_downconvert_f32+0x14>
     pt += 4;
     blkCnt--;
	}	
}
 8001e1a:	bc30      	pop	{r4, r5}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	240049dc 	.word	0x240049dc
 8001e24:	3a000000 	.word	0x3a000000
 8001e28:	24004128 	.word	0x24004128

08001e2c <SDR_float_to_DAC_audio>:
//---------------------------------------------------------------------------------------
// Convert back from floating point to short words, applying the volume setting
void SDR_float_to_DAC_audio(float *pSrc, short *pDst, uint16_t blockSize)
{
 8001e2c:	b430      	push	{r4, r5}
  short *AudioBuffer;

  AudioBuffer = pDst;

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 8001e2e:	0895      	lsrs	r5, r2, #2
  while(blkCnt--)
 8001e30:	2d00      	cmp	r5, #0
 8001e32:	d05b      	beq.n	8001eec <SDR_float_to_DAC_audio+0xc0>
 8001e34:	1e6c      	subs	r4, r5, #1
  {
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e36:	4d30      	ldr	r5, [pc, #192]	; (8001ef8 <SDR_float_to_DAC_audio+0xcc>)
 8001e38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e3c:	b2a3      	uxth	r3, r4
 8001e3e:	f100 0420 	add.w	r4, r0, #32
 8001e42:	edd5 7a00 	vldr	s15, [r5]
 8001e46:	3010      	adds	r0, #16
 8001e48:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 8001e4c:	f101 0308 	add.w	r3, r1, #8
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e50:	eef0 4a47 	vmov.f32	s9, s14
 8001e54:	ed50 5a03 	vldr	s11, [r0, #-12]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e58:	ed10 6a02 	vldr	s12, [r0, #-8]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e5c:	eeb0 5a47 	vmov.f32	s10, s14
 8001e60:	ed50 6a04 	vldr	s13, [r0, #-16]
 8001e64:	3010      	adds	r0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e66:	eee7 4aa5 	vfma.f32	s9, s15, s11
 8001e6a:	3308      	adds	r3, #8
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e6c:	eea6 5aa7 	vfma.f32	s10, s13, s15
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e70:	ed50 6a05 	vldr	s13, [r0, #-20]	; 0xffffffec
  while(blkCnt--)
 8001e74:	4284      	cmp	r4, r0
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e76:	eef0 5a64 	vmov.f32	s11, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e7a:	eef0 4a47 	vmov.f32	s9, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e7e:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e82:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e86:	eee7 4a86 	vfma.f32	s9, s15, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e8a:	ee15 5a10 	vmov	r5, s10
 8001e8e:	f823 5c10 	strh.w	r5, [r3, #-16]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e92:	ee15 5a90 	vmov	r5, s11
 8001e96:	f823 5c0e 	strh.w	r5, [r3, #-14]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e9a:	eeb0 6a64 	vmov.f32	s12, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e9e:	eef0 4a47 	vmov.f32	s9, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ea2:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ea6:	eee7 4aa6 	vfma.f32	s9, s15, s13
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001eaa:	ee16 5a10 	vmov	r5, s12
 8001eae:	f823 5c0c 	strh.w	r5, [r3, #-12]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001eb2:	eef0 6a64 	vmov.f32	s13, s9
 8001eb6:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
 8001eba:	ee16 5a90 	vmov	r5, s13
 8001ebe:	f823 5c0a 	strh.w	r5, [r3, #-10]
  while(blkCnt--)
 8001ec2:	d1c5      	bne.n	8001e50 <SDR_float_to_DAC_audio+0x24>
	}	

  // SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
  SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 8001ec4:	0093      	lsls	r3, r2, #2
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001ec6:	f001 021f 	and.w	r2, r1, #31
 8001eca:	441a      	add	r2, r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ecc:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001ed0:	480a      	ldr	r0, [pc, #40]	; (8001efc <SDR_float_to_DAC_audio+0xd0>)
 8001ed2:	440a      	add	r2, r1
 8001ed4:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001ed8:	3120      	adds	r1, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8001eda:	1a53      	subs	r3, r2, r1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	dcf9      	bgt.n	8001ed4 <SDR_float_to_DAC_audio+0xa8>
 8001ee0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ee4:	f3bf 8f6f 	isb	sy
#endif
return;
}	
 8001ee8:	bc30      	pop	{r4, r5}
 8001eea:	4770      	bx	lr
    if ( dsize > 0 ) { 
 8001eec:	0093      	lsls	r3, r2, #2
 8001eee:	2a00      	cmp	r2, #0
 8001ef0:	d1e9      	bne.n	8001ec6 <SDR_float_to_DAC_audio+0x9a>
 8001ef2:	bc30      	pop	{r4, r5}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	24004918 	.word	0x24004918
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <SDR_memcpy_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time.    
  while(blkCnt > 0u)
 8001f00:	0892      	lsrs	r2, r2, #2
 8001f02:	d017      	beq.n	8001f34 <SDR_memcpy_f32+0x34>
 8001f04:	3110      	adds	r1, #16
 8001f06:	3010      	adds	r0, #16
  {
    /* Copy and then store the results in the destination buffer */
    in1 = *pSrc++;  *pDst++ = in1;
 8001f08:	f851 3c10 	ldr.w	r3, [r1, #-16]
  while(blkCnt > 0u)
 8001f0c:	3a01      	subs	r2, #1
 8001f0e:	f101 0110 	add.w	r1, r1, #16
 8001f12:	f100 0010 	add.w	r0, r0, #16
    in1 = *pSrc++;  *pDst++ = in1;
 8001f16:	f840 3c20 	str.w	r3, [r0, #-32]
    in2 = *pSrc++;  *pDst++ = in2;
 8001f1a:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8001f1e:	f840 3c1c 	str.w	r3, [r0, #-28]
    in3 = *pSrc++;  *pDst++ = in3;
 8001f22:	f851 3c18 	ldr.w	r3, [r1, #-24]
 8001f26:	f840 3c18 	str.w	r3, [r0, #-24]
    in4 = *pSrc++;  *pDst++ = in4;
 8001f2a:	f851 3c14 	ldr.w	r3, [r1, #-20]
 8001f2e:	f840 3c14 	str.w	r3, [r0, #-20]
  while(blkCnt > 0u)
 8001f32:	d1e9      	bne.n	8001f08 <SDR_memcpy_f32+0x8>
		
// Decrement the loop counter
    blkCnt--;
  }
}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop

08001f38 <SDR_mirror_LSB>:
{
  uint32_t blkCnt;            /* loop counter */
  float *pbR, *pbI, *peR, *peI;
	
// loop Unrolling */
  blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 8001f38:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001f3a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

//  Compute 4 outputs at a time.    
	while(blkCnt--)
 8001f3e:	2a01      	cmp	r2, #1
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001f40:	440b      	add	r3, r1
	while(blkCnt--)
 8001f42:	d037      	beq.n	8001fb4 <SDR_mirror_LSB+0x7c>
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	1e91      	subs	r1, r2, #2
{
 8001f48:	b410      	push	{r4}
 8001f4a:	f1a3 0220 	sub.w	r2, r3, #32
 8001f4e:	f1a3 041c 	sub.w	r4, r3, #28
 8001f52:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8001f56:	4402      	add	r2, r0
 8001f58:	4420      	add	r0, r4
	{
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f5a:	6a14      	ldr	r4, [r2, #32]
	while(blkCnt--)
 8001f5c:	3901      	subs	r1, #1
 8001f5e:	3a20      	subs	r2, #32
 8001f60:	3820      	subs	r0, #32
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f62:	f843 4c20 	str.w	r4, [r3, #-32]
 8001f66:	3320      	adds	r3, #32
 8001f68:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
 8001f6c:	eef1 7a67 	vneg.f32	s15, s15
 8001f70:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f74:	6b94      	ldr	r4, [r2, #56]	; 0x38
 8001f76:	f843 4c38 	str.w	r4, [r3, #-56]
 8001f7a:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 8001f7e:	eef1 7a67 	vneg.f32	s15, s15
 8001f82:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f86:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8001f88:	f843 4c30 	str.w	r4, [r3, #-48]
 8001f8c:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8001f90:	eef1 7a67 	vneg.f32	s15, s15
 8001f94:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f98:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8001f9a:	f843 4c28 	str.w	r4, [r3, #-40]
	while(blkCnt--)
 8001f9e:	1c4c      	adds	r4, r1, #1
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001fa0:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8001fa4:	eef1 7a67 	vneg.f32	s15, s15
 8001fa8:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 8001fac:	d1d5      	bne.n	8001f5a <SDR_mirror_LSB+0x22>
	}
}
 8001fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop

08001fb8 <SDR_compute_IIR_parms>:
// ------------------------------------------------------
// Compute the parameters for the double IIR filter used for the narrow CW mode
void SDR_compute_IIR_parms(void)
{
 8001fb8:	b508      	push	{r3, lr}

   r = Qfactor;

   a1 = a2 = b0 = 0.f; 
   r2 = r*r;
   wr = 2.f * cwpitch / rate * myPI;
 8001fba:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <SDR_compute_IIR_parms+0xb0>)
 8001fbc:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800206c <SDR_compute_IIR_parms+0xb4>
 8001fc0:	edd3 7a00 	vldr	s15, [r3]
	 float rate = SamplingRate/256; //SamplingRate / decimation
 8001fc4:	4a2a      	ldr	r2, [pc, #168]	; (8002070 <SDR_compute_IIR_parms+0xb8>)
   wr = 2.f * cwpitch / rate * myPI;
 8001fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
   r = Qfactor;
 8001fca:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <SDR_compute_IIR_parms+0xbc>)
   wr = 2.f * cwpitch / rate * myPI;
 8001fcc:	ed92 7a00 	vldr	s14, [r2]
 8001fd0:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8002078 <SDR_compute_IIR_parms+0xc0>
{
 8001fd4:	ed2d 8b06 	vpush	{d8-d10}
   wr = 2.f * cwpitch / rate * myPI;
 8001fd8:	eec7 8a87 	vdiv.f32	s17, s15, s14
   r = Qfactor;
 8001fdc:	edd3 9a00 	vldr	s19, [r3]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001fe0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   r2 = r*r;
 8001fe4:	ee69 aaa9 	vmul.f32	s21, s19, s19
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001fe8:	ee39 aaa9 	vadd.f32	s20, s19, s19
 8001fec:	ee3a 9a88 	vadd.f32	s18, s21, s16
										                         // (see the Proakis & Manolakis book)
   a1 = -2.f * r * cosw0;
   a2 = r2;
// b0 is normalized for gain ~ 2dB on all the band
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001ff0:	ee38 8a69 	vsub.f32	s16, s16, s19
   wr = 2.f * cwpitch / rate * myPI;
 8001ff4:	ee68 8a80 	vmul.f32	s17, s17, s0
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001ff8:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 8001ffc:	f00f f974 	bl	80112e8 <cos>
 8002000:	ee8a 5a09 	vdiv.f32	s10, s20, s18
   a1 = -2.f * r * cosw0;
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <SDR_compute_IIR_parms+0xc4>)
   a2 = r2;
 8002006:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <SDR_compute_IIR_parms+0xc8>)
 8002008:	edc2 aa00 	vstr	s21, [r2]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 800200c:	eeb0 6b40 	vmov.f64	d6, d0
   a1 = -2.f * r * cosw0;
 8002010:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002014:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8002018:	eeb7 aaca 	vcvt.f64.f32	d10, s20
   a1 = -2.f * r * cosw0;
 800201c:	ee69 7aa7 	vmul.f32	s15, s19, s15
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002020:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002024:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8002028:	ee25 6b06 	vmul.f64	d6, d5, d6
 800202c:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
   a1 = -2.f * r * cosw0;
 8002030:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002034:	ed83 6a00 	vstr	s12, [r3]
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002038:	f00f f956 	bl	80112e8 <cos>
 800203c:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 8002040:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002084 <SDR_compute_IIR_parms+0xcc>
 8002044:	4b10      	ldr	r3, [pc, #64]	; (8002088 <SDR_compute_IIR_parms+0xd0>)
 8002046:	ee28 7a07 	vmul.f32	s14, s16, s14
 800204a:	eeaa 6b40 	vfms.f64	d6, d10, d0
 800204e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 8002052:	ecbd 8b06 	vpop	{d8-d10}
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002056:	eeb1 5bc6 	vsqrt.f64	d5, d6
 800205a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800205e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8002062:	ed83 7a00 	vstr	s14, [r3]
}
 8002066:	bd08      	pop	{r3, pc}
 8002068:	24009dec 	.word	0x24009dec
 800206c:	44000000 	.word	0x44000000
 8002070:	240049c4 	.word	0x240049c4
 8002074:	24008dd8 	.word	0x24008dd8
 8002078:	40490fdb 	.word	0x40490fdb
 800207c:	2400491c 	.word	0x2400491c
 8002080:	24008dd0 	.word	0x24008dd0
 8002084:	3f99999a 	.word	0x3f99999a
 8002088:	2400bf04 	.word	0x2400bf04

0800208c <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
   static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	 register float x0, y0;
   uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 800208c:	0889      	lsrs	r1, r1, #2
	
// Compute 4 outputs at a time, loop unrolled for performance     
	 while(blkCnt--)
 800208e:	2900      	cmp	r1, #0
 8002090:	d07c      	beq.n	800218c <SDR_CWPeak+0x100>
 8002092:	1e4b      	subs	r3, r1, #1
 8002094:	f8df c110 	ldr.w	ip, [pc, #272]	; 80021a8 <SDR_CWPeak+0x11c>
 8002098:	493d      	ldr	r1, [pc, #244]	; (8002190 <SDR_CWPeak+0x104>)
 800209a:	3010      	adds	r0, #16
 800209c:	4a3d      	ldr	r2, [pc, #244]	; (8002194 <SDR_CWPeak+0x108>)
 800209e:	eddc 2a00 	vldr	s5, [ip]
 80020a2:	edd1 6a00 	vldr	s13, [r1]
 80020a6:	ed92 5a00 	vldr	s10, [r2]
{
 80020aa:	b4f0      	push	{r4, r5, r6, r7}
 80020ac:	4c3a      	ldr	r4, [pc, #232]	; (8002198 <SDR_CWPeak+0x10c>)
 80020ae:	4f3b      	ldr	r7, [pc, #236]	; (800219c <SDR_CWPeak+0x110>)
 80020b0:	edd4 4a00 	vldr	s9, [r4]
 80020b4:	4e3a      	ldr	r6, [pc, #232]	; (80021a0 <SDR_CWPeak+0x114>)
 80020b6:	4d3b      	ldr	r5, [pc, #236]	; (80021a4 <SDR_CWPeak+0x118>)
 80020b8:	eeb1 2a64 	vneg.f32	s4, s9
 80020bc:	edd7 7a00 	vldr	s15, [r7]
 80020c0:	edd6 5a00 	vldr	s11, [r6]
 80020c4:	ed95 7a00 	vldr	s14, [r5]
   {  
		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020c8:	ee66 3ae7 	vnmul.f32	s7, s13, s15
 80020cc:	ed50 7a04 	vldr	s15, [r0, #-16]
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80020d0:	ee26 4ac7 	vnmul.f32	s8, s13, s14
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020d4:	ed10 6a03 	vldr	s12, [r0, #-12]
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020d8:	ed10 7a02 	vldr	s14, [r0, #-8]
	 while(blkCnt--)
 80020dc:	3b01      	subs	r3, #1
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020de:	eee2 3a22 	vfma.f32	s7, s4, s5
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020e2:	ed10 3a01 	vldr	s6, [r0, #-4]
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80020e6:	eea2 4a25 	vfma.f32	s8, s4, s11
	 while(blkCnt--)
 80020ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ee:	f100 0010 	add.w	r0, r0, #16
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020f2:	eee7 3a85 	vfma.f32	s7, s15, s10
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80020f6:	eea3 4a85 	vfma.f32	s8, s7, s10
	   *buf++ = y0;
 80020fa:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020fe:	ed92 5a00 	vldr	s10, [r2]
 8002102:	edd1 6a00 	vldr	s13, [r1]
 8002106:	ee25 6a06 	vmul.f32	s12, s10, s12
 800210a:	edd4 4a00 	vldr	s9, [r4]
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800210e:	ee65 7a07 	vmul.f32	s15, s10, s14
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002112:	ee25 3a03 	vmul.f32	s6, s10, s6
 8002116:	eeb0 7a46 	vmov.f32	s14, s12
 800211a:	eee6 7ae3 	vfms.f32	s15, s13, s7
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800211e:	eeb1 2a64 	vneg.f32	s4, s9
 8002122:	eea6 7ae2 	vfms.f32	s14, s13, s5
 8002126:	eea4 7ae3 	vfms.f32	s14, s9, s7
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800212a:	eef0 3a43 	vmov.f32	s7, s6
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800212e:	eee4 7ac7 	vfms.f32	s15, s9, s14
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002132:	ee25 6a07 	vmul.f32	s12, s10, s14
 8002136:	eee6 3ac7 	vfms.f32	s7, s13, s14
 800213a:	eea4 6ac4 	vfms.f32	s12, s9, s8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800213e:	ee25 7a27 	vmul.f32	s14, s10, s15
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002142:	eee4 3ae7 	vfms.f32	s7, s9, s15
 8002146:	eea6 7ac4 	vfms.f32	s14, s13, s8
 800214a:	eeb0 4a46 	vmov.f32	s8, s12
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800214e:	eea6 6ae5 	vfms.f32	s12, s13, s11
	   *buf++ = y0;
 8002152:	ee96 4aa5 	vfnms.f32	s8, s13, s11
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002156:	ee65 5a23 	vmul.f32	s11, s10, s7
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800215a:	eef0 2a63 	vmov.f32	s5, s7
 800215e:	eee6 5ac6 	vfms.f32	s11, s13, s12
	   *buf++ = y0;
 8002162:	ed00 6a07 	vstr	s12, [r0, #-28]	; 0xffffffe4
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002166:	eea4 7a84 	vfma.f32	s14, s9, s8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800216a:	eee4 5ac7 	vfms.f32	s11, s9, s14
	   *buf++ = y0;
 800216e:	ed00 7a06 	vstr	s14, [r0, #-24]	; 0xffffffe8
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;
 8002172:	ed40 5a05 	vstr	s11, [r0, #-20]	; 0xffffffec
	 while(blkCnt--)
 8002176:	d1a7      	bne.n	80020c8 <SDR_CWPeak+0x3c>
 8002178:	edc7 7a00 	vstr	s15, [r7]
 800217c:	edc6 5a00 	vstr	s11, [r6]
 8002180:	ed85 7a00 	vstr	s14, [r5]
 8002184:	edcc 3a00 	vstr	s7, [ip]
   }
}
 8002188:	bcf0      	pop	{r4, r5, r6, r7}
 800218a:	4770      	bx	lr
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	24008dd0 	.word	0x24008dd0
 8002194:	2400bf04 	.word	0x2400bf04
 8002198:	2400491c 	.word	0x2400491c
 800219c:	240006d4 	.word	0x240006d4
 80021a0:	240006d0 	.word	0x240006d0
 80021a4:	240006d8 	.word	0x240006d8
 80021a8:	240006cc 	.word	0x240006cc

080021ac <SDR_demodAM_AGC>:
// ------------------------------------------------------
// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 80021ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

	  if(pk < audiotmp)
	  {
			pk = audiotmp;
		  hangcnt = Hcount[AM]; 
 80021b0:	4b32      	ldr	r3, [pc, #200]	; (800227c <SDR_demodAM_AGC+0xd0>)
{
 80021b2:	b082      	sub	sp, #8
 80021b4:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8002298 <SDR_demodAM_AGC+0xec>
 80021b8:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
 80021bc:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800229c <SDR_demodAM_AGC+0xf0>
 80021c0:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 80022a0 <SDR_demodAM_AGC+0xf4>
		  hangcnt = Hcount[AM]; 
 80021c4:	881f      	ldrh	r7, [r3, #0]
 80021c6:	ed98 7a00 	vldr	s14, [r8]
 80021ca:	f8dc 3000 	ldr.w	r3, [ip]
 80021ce:	ed9e 6a00 	vldr	s12, [lr]
 80021d2:	4c2b      	ldr	r4, [pc, #172]	; (8002280 <SDR_demodAM_AGC+0xd4>)
 80021d4:	4a2b      	ldr	r2, [pc, #172]	; (8002284 <SDR_demodAM_AGC+0xd8>)
 80021d6:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8002288 <SDR_demodAM_AGC+0xdc>
	  }

    audiotmp /= max(pk, AgcThreshold);  
		
	  if(hangcnt == 0)
		  pk  *= Decay[AM];
 80021da:	4e2c      	ldr	r6, [pc, #176]	; (800228c <SDR_demodAM_AGC+0xe0>)
		
// DC removal filter -----------------------
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80021dc:	ed9f 5a2c 	vldr	s10, [pc, #176]	; 8002290 <SDR_demodAM_AGC+0xe4>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80021e0:	edd0 7a01 	vldr	s15, [r0, #4]
 80021e4:	3008      	adds	r0, #8
 80021e6:	ed50 6a02 	vldr	s13, [r0, #-8]
 80021ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021ee:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80021f2:	edcd 7a01 	vstr	s15, [sp, #4]
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 80021f6:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 80021fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = sqrtf(in);
 8002202:	bfa8      	it	ge
 8002204:	eef1 6ae7 	vsqrtge.f32	s13, s15
    audiotmp /= max(pk, AgcThreshold);  
 8002208:	edd4 7a00 	vldr	s15, [r4]
      *pOut = 0.0f;
 800220c:	bfb8      	it	lt
 800220e:	eef0 6a64 	vmovlt.f32	s13, s9
	  if(pk < audiotmp)
 8002212:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221a:	d502      	bpl.n	8002222 <SDR_demodAM_AGC+0x76>
 800221c:	eeb0 7a66 	vmov.f32	s14, s13
		  hangcnt = Hcount[AM]; 
 8002220:	463b      	mov	r3, r7
    audiotmp /= max(pk, AgcThreshold);  
 8002222:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8002226:	eec6 5aa7 	vdiv.f32	s11, s13, s15
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 800222a:	eef0 7a65 	vmov.f32	s15, s11
    audiotmp /= max(pk, AgcThreshold);  
 800222e:	edc2 5a00 	vstr	s11, [r2]
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002232:	eee6 7a05 	vfma.f32	s15, s12, s10
	  if(hangcnt == 0)
 8002236:	b91b      	cbnz	r3, 8002240 <SDR_demodAM_AGC+0x94>
		  pk  *= Decay[AM];
 8002238:	edd6 6a00 	vldr	s13, [r6]
 800223c:	ee27 7a26 	vmul.f32	s14, s14, s13
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002240:	edcd 7a00 	vstr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002244:	4285      	cmp	r5, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002246:	eddd 7a00 	vldr	s15, [sp]
 800224a:	ee77 7ac6 	vsub.f32	s15, s15, s12
	  wold = w;
 800224e:	ed9d 6a00 	vldr	s12, [sp]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002252:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 8002256:	d1c3      	bne.n	80021e0 <SDR_demodAM_AGC+0x34>
// -----------------------------------------
	}
    PeakAudioValue=pk;
 8002258:	4a0e      	ldr	r2, [pc, #56]	; (8002294 <SDR_demodAM_AGC+0xe8>)
	if(hangcnt > 0)  hangcnt--;
 800225a:	2b00      	cmp	r3, #0
 800225c:	ed88 7a00 	vstr	s14, [r8]
 8002260:	f8cc 3000 	str.w	r3, [ip]
 8002264:	ed8e 6a00 	vstr	s12, [lr]
    PeakAudioValue=pk;
 8002268:	ed82 7a00 	vstr	s14, [r2]
	if(hangcnt > 0)  hangcnt--;
 800226c:	dd02      	ble.n	8002274 <SDR_demodAM_AGC+0xc8>
 800226e:	3b01      	subs	r3, #1
 8002270:	f8cc 3000 	str.w	r3, [ip]
}
 8002274:	b002      	add	sp, #8
 8002276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800227a:	bf00      	nop
 800227c:	2400838c 	.word	0x2400838c
 8002280:	24009de8 	.word	0x24009de8
 8002284:	24000f74 	.word	0x24000f74
 8002288:	00000000 	.word	0x00000000
 800228c:	24002f80 	.word	0x24002f80
 8002290:	3f75c28f 	.word	0x3f75c28f
 8002294:	24008c20 	.word	0x24008c20
 8002298:	24000170 	.word	0x24000170
 800229c:	240006b8 	.word	0x240006b8
 80022a0:	240006c8 	.word	0x240006c8

080022a4 <SDR_demodSSB_CW_AGC>:
	  if(pk < sav)
	  {
			pk = sav;
      if(CurrentMode == CW) hangcnt = Hcount[CW];
      else
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80022a4:	4b5d      	ldr	r3, [pc, #372]	; (800241c <SDR_demodSSB_CW_AGC+0x178>)
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80022a6:	4a5e      	ldr	r2, [pc, #376]	; (8002420 <SDR_demodSSB_CW_AGC+0x17c>)
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80022a8:	f8b3 c004 	ldrh.w	ip, [r3, #4]
{
 80022ac:	b5f0      	push	{r4, r5, r6, r7, lr}
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80022ae:	7814      	ldrb	r4, [r2, #0]
{
 80022b0:	460a      	mov	r2, r1
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80022b2:	8859      	ldrh	r1, [r3, #2]
 80022b4:	f241 0504 	movw	r5, #4100	; 0x1004
 80022b8:	4f5a      	ldr	r7, [pc, #360]	; (8002424 <SDR_demodSSB_CW_AGC+0x180>)
 80022ba:	2c01      	cmp	r4, #1
 80022bc:	bf08      	it	eq
 80022be:	468c      	moveq	ip, r1
 80022c0:	4e59      	ldr	r6, [pc, #356]	; (8002428 <SDR_demodSSB_CW_AGC+0x184>)
 80022c2:	2c03      	cmp	r4, #3
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80022c4:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 80022c8:	ed97 7a00 	vldr	s14, [r7]
 80022cc:	f100 0304 	add.w	r3, r0, #4
 80022d0:	6831      	ldr	r1, [r6, #0]
 80022d2:	d06f      	beq.n	80023b4 <SDR_demodSSB_CW_AGC+0x110>
 80022d4:	2c01      	cmp	r4, #1
 80022d6:	4405      	add	r5, r0
 80022d8:	4c54      	ldr	r4, [pc, #336]	; (800242c <SDR_demodSSB_CW_AGC+0x188>)
 80022da:	4855      	ldr	r0, [pc, #340]	; (8002430 <SDR_demodSSB_CW_AGC+0x18c>)
		
	  if(hangcnt == 0)
    {  
      if(CurrentMode == CW) pk  *= Decay[CW];
      else
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 80022dc:	f8df e15c 	ldr.w	lr, [pc, #348]	; 800243c <SDR_demodSSB_CW_AGC+0x198>
 80022e0:	d03a      	beq.n	8002358 <SDR_demodSSB_CW_AGC+0xb4>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	ed13 6a01 	vldr	s12, [r3, #-4]
 80022ea:	ee67 6aa7 	vmul.f32	s13, s15, s15
	  if ((sav) > CWLevel)
 80022ee:	edd4 5a00 	vldr	s11, [r4]
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80022f2:	eee6 6a06 	vfma.f32	s13, s12, s12
      *pOut = sqrtf(in);
 80022f6:	eef1 7ae6 	vsqrt.f32	s15, s13
	  if ((sav) > CWLevel)
 80022fa:	eef4 7ae5 	vcmpe.f32	s15, s11
 80022fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002302:	dd03      	ble.n	800230c <SDR_demodSSB_CW_AGC+0x68>
		  CWLevel= (sav);
 8002304:	edc4 7a00 	vstr	s15, [r4]
 8002308:	ed13 6a01 	vldr	s12, [r3, #-4]
	  if(pk < sav)
 800230c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002310:	3308      	adds	r3, #8
 8002312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002316:	d502      	bpl.n	800231e <SDR_demodSSB_CW_AGC+0x7a>
 8002318:	eeb0 7a67 	vmov.f32	s14, s15
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 800231c:	4661      	mov	r1, ip
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 800231e:	edd0 6a00 	vldr	s13, [r0]
 8002322:	fec7 6a26 	vmaxnm.f32	s13, s14, s13
 8002326:	eec6 5a26 	vdiv.f32	s11, s12, s13
 800232a:	ece2 5a01 	vstmia	r2!, {s11}
	  if(hangcnt == 0)
 800232e:	b919      	cbnz	r1, 8002338 <SDR_demodSSB_CW_AGC+0x94>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002330:	edde 6a02 	vldr	s13, [lr, #8]
 8002334:	ee27 7a26 	vmul.f32	s14, s14, s13
	for(k=j=0; k<BSIZE*2; k+=2)
 8002338:	429d      	cmp	r5, r3
 800233a:	d1d2      	bne.n	80022e2 <SDR_demodSSB_CW_AGC+0x3e>
 800233c:	4a3d      	ldr	r2, [pc, #244]	; (8002434 <SDR_demodSSB_CW_AGC+0x190>)
    }  
	}
	PeakAudioValue=pk;
	if(hangcnt > 0)  hangcnt--;
 800233e:	2900      	cmp	r1, #0
	PeakAudioValue=pk;
 8002340:	4b3d      	ldr	r3, [pc, #244]	; (8002438 <SDR_demodSSB_CW_AGC+0x194>)
 8002342:	ed87 7a00 	vstr	s14, [r7]
 8002346:	6031      	str	r1, [r6, #0]
 8002348:	edc2 7a00 	vstr	s15, [r2]
 800234c:	ed83 7a00 	vstr	s14, [r3]
	if(hangcnt > 0)  hangcnt--;
 8002350:	dd01      	ble.n	8002356 <SDR_demodSSB_CW_AGC+0xb2>
 8002352:	3901      	subs	r1, #1
 8002354:	6031      	str	r1, [r6, #0]
}
 8002356:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002358:	edd3 7a00 	vldr	s15, [r3]
 800235c:	ed13 6a01 	vldr	s12, [r3, #-4]
 8002360:	ee67 6aa7 	vmul.f32	s13, s15, s15
	  if ((sav) > CWLevel)
 8002364:	edd4 5a00 	vldr	s11, [r4]
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002368:	eee6 6a06 	vfma.f32	s13, s12, s12
 800236c:	eef1 7ae6 	vsqrt.f32	s15, s13
	  if ((sav) > CWLevel)
 8002370:	eef4 7ae5 	vcmpe.f32	s15, s11
 8002374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002378:	dd03      	ble.n	8002382 <SDR_demodSSB_CW_AGC+0xde>
		  CWLevel= (sav);
 800237a:	edc4 7a00 	vstr	s15, [r4]
 800237e:	ed13 6a01 	vldr	s12, [r3, #-4]
	  if(pk < sav)
 8002382:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002386:	3308      	adds	r3, #8
 8002388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238c:	d502      	bpl.n	8002394 <SDR_demodSSB_CW_AGC+0xf0>
 800238e:	eeb0 7a67 	vmov.f32	s14, s15
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002392:	4661      	mov	r1, ip
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 8002394:	edd0 6a00 	vldr	s13, [r0]
 8002398:	fec7 6a26 	vmaxnm.f32	s13, s14, s13
 800239c:	eec6 5a26 	vdiv.f32	s11, s12, s13
 80023a0:	ece2 5a01 	vstmia	r2!, {s11}
	  if(hangcnt == 0)
 80023a4:	b919      	cbnz	r1, 80023ae <SDR_demodSSB_CW_AGC+0x10a>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 80023a6:	edde 6a01 	vldr	s13, [lr, #4]
 80023aa:	ee27 7a26 	vmul.f32	s14, s14, s13
	for(k=j=0; k<BSIZE*2; k+=2)
 80023ae:	42ab      	cmp	r3, r5
 80023b0:	d1d2      	bne.n	8002358 <SDR_demodSSB_CW_AGC+0xb4>
 80023b2:	e7c3      	b.n	800233c <SDR_demodSSB_CW_AGC+0x98>
 80023b4:	4405      	add	r5, r0
 80023b6:	4c1d      	ldr	r4, [pc, #116]	; (800242c <SDR_demodSSB_CW_AGC+0x188>)
 80023b8:	481d      	ldr	r0, [pc, #116]	; (8002430 <SDR_demodSSB_CW_AGC+0x18c>)
      if(CurrentMode == CW) pk  *= Decay[CW];
 80023ba:	f8df c080 	ldr.w	ip, [pc, #128]	; 800243c <SDR_demodSSB_CW_AGC+0x198>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80023be:	edd3 7a00 	vldr	s15, [r3]
 80023c2:	ed13 6a01 	vldr	s12, [r3, #-4]
 80023c6:	ee67 6aa7 	vmul.f32	s13, s15, s15
	  if ((sav) > CWLevel)
 80023ca:	edd4 5a00 	vldr	s11, [r4]
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80023ce:	eee6 6a06 	vfma.f32	s13, s12, s12
 80023d2:	eef1 7ae6 	vsqrt.f32	s15, s13
	  if ((sav) > CWLevel)
 80023d6:	eef4 7ae5 	vcmpe.f32	s15, s11
 80023da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023de:	dd03      	ble.n	80023e8 <SDR_demodSSB_CW_AGC+0x144>
		  CWLevel= (sav);
 80023e0:	edc4 7a00 	vstr	s15, [r4]
 80023e4:	ed13 6a01 	vldr	s12, [r3, #-4]
	  if(pk < sav)
 80023e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023ec:	3308      	adds	r3, #8
 80023ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f2:	d502      	bpl.n	80023fa <SDR_demodSSB_CW_AGC+0x156>
 80023f4:	eeb0 7a67 	vmov.f32	s14, s15
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80023f8:	4671      	mov	r1, lr
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 80023fa:	edd0 6a00 	vldr	s13, [r0]
 80023fe:	fec7 6a26 	vmaxnm.f32	s13, s14, s13
 8002402:	eec6 5a26 	vdiv.f32	s11, s12, s13
 8002406:	ece2 5a01 	vstmia	r2!, {s11}
	  if(hangcnt == 0)
 800240a:	b919      	cbnz	r1, 8002414 <SDR_demodSSB_CW_AGC+0x170>
      if(CurrentMode == CW) pk  *= Decay[CW];
 800240c:	eddc 6a03 	vldr	s13, [ip, #12]
 8002410:	ee27 7a26 	vmul.f32	s14, s14, s13
	for(k=j=0; k<BSIZE*2; k+=2)
 8002414:	42ab      	cmp	r3, r5
 8002416:	d1d2      	bne.n	80023be <SDR_demodSSB_CW_AGC+0x11a>
 8002418:	e790      	b.n	800233c <SDR_demodSSB_CW_AGC+0x98>
 800241a:	bf00      	nop
 800241c:	2400838c 	.word	0x2400838c
 8002420:	2400cf18 	.word	0x2400cf18
 8002424:	24000174 	.word	0x24000174
 8002428:	240006bc 	.word	0x240006bc
 800242c:	240051cc 	.word	0x240051cc
 8002430:	24009de8 	.word	0x24009de8
 8002434:	240006c0 	.word	0x240006c0
 8002438:	24008c20 	.word	0x24008c20
 800243c:	24002f80 	.word	0x24002f80

08002440 <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non blocking mode
 * @param  AdcHandle : ADC handle

 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8002440:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8002444:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002448:	490a      	ldr	r1, [pc, #40]	; (8002474 <HAL_ADC_ConvCpltCallback+0x34>)
 800244a:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800244e:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002452:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8002454:	4293      	cmp	r3, r2
 8002456:	d1fa      	bne.n	800244e <HAL_ADC_ConvCpltCallback+0xe>
 8002458:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800245c:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[BSIZE/2], 2*BSIZE);
#endif
	ADC_Stream0_Handler(1);
 8002460:	2001      	movs	r0, #1
 8002462:	f7fe ff63 	bl	800132c <ADC_Stream0_Handler>
	/* Set variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = SET;
 8002466:	4b04      	ldr	r3, [pc, #16]	; (8002478 <HAL_ADC_ConvCpltCallback+0x38>)
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
}
 800246c:	bd08      	pop	{r3, pc}
 800246e:	bf00      	nop
 8002470:	2400db20 	.word	0x2400db20
 8002474:	e000ed00 	.word	0xe000ed00
 8002478:	24000711 	.word	0x24000711

0800247c <HAL_ADC_ConvHalfCpltCallback>:
 * @brief  Conversion DMA half-transfer callback in non blocking mode
 * @param  hadc: ADC handle
 * */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800247c:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8002480:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002484:	490a      	ldr	r1, [pc, #40]	; (80024b0 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002486:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800248a:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800248e:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8002490:	4293      	cmp	r3, r2
 8002492:	d1fa      	bne.n	800248a <HAL_ADC_ConvHalfCpltCallback+0xe>
 8002494:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002498:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[0], 2*BSIZE);
#endif
	ADC_Stream0_Handler(0);
 800249c:	2000      	movs	r0, #0
 800249e:	f7fe ff45 	bl	800132c <ADC_Stream0_Handler>
	/* Reset variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = RESET;
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
}
 80024a8:	bd08      	pop	{r3, pc}
 80024aa:	bf00      	nop
 80024ac:	2400d720 	.word	0x2400d720
 80024b0:	e000ed00 	.word	0xe000ed00
 80024b4:	24000711 	.word	0x24000711

080024b8 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024b8:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[BSIZE];
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
	LED_RED_ON;
 80024bc:	2201      	movs	r2, #1
	ValidAudioHalf = &AudioOut[BSIZE];
 80024be:	4c05      	ldr	r4, [pc, #20]	; (80024d4 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
	LED_RED_ON;
 80024c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024c4:	4804      	ldr	r0, [pc, #16]	; (80024d8 <HAL_DAC_ConvCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[BSIZE];
 80024c6:	601c      	str	r4, [r3, #0]

	//	 __HAL_RCC_PLL2_DISABLE();
	//	__HAL_RCC_PLL2_CONFIG(4, 240, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();

}
 80024c8:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_ON;
 80024cc:	f004 be74 	b.w	80071b8 <HAL_GPIO_WritePin>
 80024d0:	240049c8 	.word	0x240049c8
 80024d4:	240076e0 	.word	0x240076e0
 80024d8:	58020400 	.word	0x58020400

080024dc <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024dc:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[0];
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
	LED_RED_OFF;
 80024e0:	2200      	movs	r2, #0
	ValidAudioHalf = &AudioOut[0];
 80024e2:	4c05      	ldr	r4, [pc, #20]	; (80024f8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
	LED_RED_OFF;
 80024e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024e8:	4804      	ldr	r0, [pc, #16]	; (80024fc <HAL_DAC_ConvHalfCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[0];
 80024ea:	601c      	str	r4, [r3, #0]
	//	 __HAL_RCC_PLL2_DISABLE();
	//	 __HAL_RCC_PLL2_CONFIG(4, 120, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();
}
 80024ec:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_OFF;
 80024f0:	f004 be62 	b.w	80071b8 <HAL_GPIO_WritePin>
 80024f4:	240049c8 	.word	0x240049c8
 80024f8:	240072e0 	.word	0x240072e0
 80024fc:	58020400 	.word	0x58020400

08002500 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
	OVFDetected = OVF_TIMEOUT;
	/* Reset register IER */
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8002500:	4a09      	ldr	r2, [pc, #36]	; (8002528 <HAL_ADC_LevelOutOfWindowCallback+0x28>)
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_ADC_LevelOutOfWindowCallback+0x2c>)
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8002504:	6811      	ldr	r1, [r2, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8002506:	681a      	ldr	r2, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8002508:	684b      	ldr	r3, [r1, #4]
	OVFDetected = OVF_TIMEOUT;
 800250a:	4809      	ldr	r0, [pc, #36]	; (8002530 <HAL_ADC_LevelOutOfWindowCallback+0x30>)
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 800250c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
{
 8002510:	b410      	push	{r4}
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8002512:	604b      	str	r3, [r1, #4]
	OVFDetected = OVF_TIMEOUT;
 8002514:	2402      	movs	r4, #2
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8002516:	6853      	ldr	r3, [r2, #4]
	OVFDetected = OVF_TIMEOUT;
 8002518:	8004      	strh	r4, [r0, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 800251a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
}
 800251e:	f85d 4b04 	ldr.w	r4, [sp], #4
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8002522:	6053      	str	r3, [r2, #4]
}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	24007ae4 	.word	0x24007ae4
 800252c:	24003084 	.word	0x24003084
 8002530:	24000f78 	.word	0x24000f78

08002534 <DisplayCW>:
#endif
}

#ifdef CW_DECODER
void DisplayCW(void)
{
 8002534:	b570      	push	{r4, r5, r6, lr}
	static uint8_t PosColumn;
	static uint8_t PosRow = 13;
	if ((uint8_t)DecodedCWChar == 0)
 8002536:	4c19      	ldr	r4, [pc, #100]	; (800259c <DisplayCW+0x68>)
{
 8002538:	b082      	sub	sp, #8
	if ((uint8_t)DecodedCWChar == 0)
 800253a:	7821      	ldrb	r1, [r4, #0]
 800253c:	b321      	cbz	r1, 8002588 <DisplayCW+0x54>
		return;
	NCharReceived++;

	if (PosColumn++ >= 40)
 800253e:	4818      	ldr	r0, [pc, #96]	; (80025a0 <DisplayCW+0x6c>)
	NCharReceived++;
 8002540:	4e18      	ldr	r6, [pc, #96]	; (80025a4 <DisplayCW+0x70>)
	if (PosColumn++ >= 40)
 8002542:	7805      	ldrb	r5, [r0, #0]
	NCharReceived++;
 8002544:	6832      	ldr	r2, [r6, #0]
	if (PosColumn++ >= 40)
 8002546:	1c6b      	adds	r3, r5, #1
 8002548:	2d27      	cmp	r5, #39	; 0x27
	NCharReceived++;
 800254a:	f102 0201 	add.w	r2, r2, #1
	{
		PosColumn = 1;
		PosRow++;
 800254e:	4d16      	ldr	r5, [pc, #88]	; (80025a8 <DisplayCW+0x74>)
	if (PosColumn++ >= 40)
 8002550:	b2db      	uxtb	r3, r3
	NCharReceived++;
 8002552:	6032      	str	r2, [r6, #0]
	if (PosColumn++ >= 40)
 8002554:	7003      	strb	r3, [r0, #0]
 8002556:	d819      	bhi.n	800258c <DisplayCW+0x58>
 8002558:	782a      	ldrb	r2, [r5, #0]
	}
	if (PosRow >= 13 + 4)
 800255a:	2a10      	cmp	r2, #16
 800255c:	d902      	bls.n	8002564 <DisplayCW+0x30>
	{
		PosRow = 13;
 800255e:	200d      	movs	r0, #13
 8002560:	4602      	mov	r2, r0
 8002562:	7028      	strb	r0, [r5, #0]
	}
	sprintf((char*)UartTXString, "\e[%d;%dH%c        ", PosRow, PosColumn, DecodedCWChar);
 8002564:	9100      	str	r1, [sp, #0]
 8002566:	4811      	ldr	r0, [pc, #68]	; (80025ac <DisplayCW+0x78>)
 8002568:	4911      	ldr	r1, [pc, #68]	; (80025b0 <DisplayCW+0x7c>)
 800256a:	f00c fa83 	bl	800ea74 <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 800256e:	480f      	ldr	r0, [pc, #60]	; (80025ac <DisplayCW+0x78>)
 8002570:	f7fd feb6 	bl	80002e0 <strlen>
 8002574:	4601      	mov	r1, r0
 8002576:	480d      	ldr	r0, [pc, #52]	; (80025ac <DisplayCW+0x78>)
 8002578:	b289      	uxth	r1, r1
 800257a:	f00a fa61 	bl	800ca40 <CDC_Transmit_FS>
	HAL_Delay(1);
 800257e:	2001      	movs	r0, #1
 8002580:	f001 fe56 	bl	8004230 <HAL_Delay>
	PrintUI(UartTXString);

	DecodedCWChar = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	7023      	strb	r3, [r4, #0]
}
 8002588:	b002      	add	sp, #8
 800258a:	bd70      	pop	{r4, r5, r6, pc}
		PosColumn = 1;
 800258c:	2601      	movs	r6, #1
		PosRow++;
 800258e:	782a      	ldrb	r2, [r5, #0]
 8002590:	4432      	add	r2, r6
 8002592:	4633      	mov	r3, r6
		PosColumn = 1;
 8002594:	7006      	strb	r6, [r0, #0]
		PosRow++;
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	702a      	strb	r2, [r5, #0]
 800259a:	e7de      	b.n	800255a <DisplayCW+0x26>
 800259c:	24009de4 	.word	0x24009de4
 80025a0:	240006ec 	.word	0x240006ec
 80025a4:	24002f90 	.word	0x24002f90
 80025a8:	2400027c 	.word	0x2400027c
 80025ac:	24000a4c 	.word	0x24000a4c
 80025b0:	08018118 	.word	0x08018118

080025b4 <DisplayStatus>:
	static char StringWidth[8];
	static char StringAGC[8];
	static char StringStep[8];


	switch(Fstep)
 80025b4:	4b60      	ldr	r3, [pc, #384]	; (8002738 <DisplayStatus+0x184>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
{
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	b086      	sub	sp, #24
	switch(Fstep)
 80025c0:	f000 80a2 	beq.w	8002708 <DisplayStatus+0x154>
 80025c4:	d81c      	bhi.n	8002600 <DisplayStatus+0x4c>
 80025c6:	2b0a      	cmp	r3, #10
 80025c8:	f000 80a5 	beq.w	8002716 <DisplayStatus+0x162>
 80025cc:	2b64      	cmp	r3, #100	; 0x64
 80025ce:	d10e      	bne.n	80025ee <DisplayStatus+0x3a>
	{
	case 1: strcpy(StringStep,"   1"); break;
	case 10: strcpy(StringStep,"  10"); break;
	case 100: strcpy(StringStep," 100"); break;
 80025d0:	4a5a      	ldr	r2, [pc, #360]	; (800273c <DisplayStatus+0x188>)
 80025d2:	4b5b      	ldr	r3, [pc, #364]	; (8002740 <DisplayStatus+0x18c>)
 80025d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025d8:	6018      	str	r0, [r3, #0]
 80025da:	7119      	strb	r1, [r3, #4]
	case 9000: strcpy(StringStep,"   9K"); break;
	case 10000: strcpy(StringStep," 10K"); break;
	case 100000: strcpy(StringStep,"100K"); break;
	}

	switch(CurrentMode)
 80025dc:	4a59      	ldr	r2, [pc, #356]	; (8002744 <DisplayStatus+0x190>)
 80025de:	7812      	ldrb	r2, [r2, #0]
 80025e0:	2a03      	cmp	r2, #3
 80025e2:	f200 80a6 	bhi.w	8002732 <DisplayStatus+0x17e>
 80025e6:	e8df f002 	tbb	[pc, r2]
 80025ea:	6e6c      	.short	0x6e6c
 80025ec:	2787      	.short	0x2787
	switch(Fstep)
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d120      	bne.n	8002634 <DisplayStatus+0x80>
	case 1: strcpy(StringStep,"   1"); break;
 80025f2:	4a55      	ldr	r2, [pc, #340]	; (8002748 <DisplayStatus+0x194>)
 80025f4:	4b52      	ldr	r3, [pc, #328]	; (8002740 <DisplayStatus+0x18c>)
 80025f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025fa:	6018      	str	r0, [r3, #0]
 80025fc:	7119      	strb	r1, [r3, #4]
 80025fe:	e7ed      	b.n	80025dc <DisplayStatus+0x28>
	switch(Fstep)
 8002600:	f242 7210 	movw	r2, #10000	; 0x2710
 8002604:	4293      	cmp	r3, r2
 8002606:	f000 808d 	beq.w	8002724 <DisplayStatus+0x170>
 800260a:	4a50      	ldr	r2, [pc, #320]	; (800274c <DisplayStatus+0x198>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d106      	bne.n	800261e <DisplayStatus+0x6a>
	case 100000: strcpy(StringStep,"100K"); break;
 8002610:	4a4f      	ldr	r2, [pc, #316]	; (8002750 <DisplayStatus+0x19c>)
 8002612:	4b4b      	ldr	r3, [pc, #300]	; (8002740 <DisplayStatus+0x18c>)
 8002614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002618:	6018      	str	r0, [r3, #0]
 800261a:	7119      	strb	r1, [r3, #4]
 800261c:	e7de      	b.n	80025dc <DisplayStatus+0x28>
	switch(Fstep)
 800261e:	f242 3228 	movw	r2, #9000	; 0x2328
 8002622:	4293      	cmp	r3, r2
 8002624:	d106      	bne.n	8002634 <DisplayStatus+0x80>
	case 9000: strcpy(StringStep,"   9K"); break;
 8002626:	4a4b      	ldr	r2, [pc, #300]	; (8002754 <DisplayStatus+0x1a0>)
 8002628:	4b45      	ldr	r3, [pc, #276]	; (8002740 <DisplayStatus+0x18c>)
 800262a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800262e:	6018      	str	r0, [r3, #0]
 8002630:	8099      	strh	r1, [r3, #4]
 8002632:	e7d3      	b.n	80025dc <DisplayStatus+0x28>
 8002634:	4b42      	ldr	r3, [pc, #264]	; (8002740 <DisplayStatus+0x18c>)
 8002636:	e7d1      	b.n	80025dc <DisplayStatus+0x28>
	{
	case LSB: strcpy(StringMode,"LSB"); break;
	case USB: strcpy(StringMode,"USB"); break;
	case AM: strcpy(StringMode,"AM"); break;
	case CW: strcpy(StringMode,"CW"); break;
 8002638:	4a47      	ldr	r2, [pc, #284]	; (8002758 <DisplayStatus+0x1a4>)
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	4d47      	ldr	r5, [pc, #284]	; (800275c <DisplayStatus+0x1a8>)
 800263e:	0c11      	lsrs	r1, r2, #16
 8002640:	802a      	strh	r2, [r5, #0]
 8002642:	70a9      	strb	r1, [r5, #2]
	}
	switch (CurrentAGC)
 8002644:	4a46      	ldr	r2, [pc, #280]	; (8002760 <DisplayStatus+0x1ac>)
 8002646:	7812      	ldrb	r2, [r2, #0]
 8002648:	2a00      	cmp	r2, #0
 800264a:	d043      	beq.n	80026d4 <DisplayStatus+0x120>
 800264c:	2a01      	cmp	r2, #1
 800264e:	d157      	bne.n	8002700 <DisplayStatus+0x14c>
	{
	case Fast: strcpy(StringAGC,"Fast"); break;
	case Slow: strcpy(StringAGC,"Slow"); break;
 8002650:	4a44      	ldr	r2, [pc, #272]	; (8002764 <DisplayStatus+0x1b0>)
 8002652:	4c45      	ldr	r4, [pc, #276]	; (8002768 <DisplayStatus+0x1b4>)
 8002654:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002658:	6020      	str	r0, [r4, #0]
 800265a:	7121      	strb	r1, [r4, #4]
	}
	switch (CurrentBW)
 800265c:	4a43      	ldr	r2, [pc, #268]	; (800276c <DisplayStatus+0x1b8>)
 800265e:	7812      	ldrb	r2, [r2, #0]
 8002660:	2a00      	cmp	r2, #0
 8002662:	d041      	beq.n	80026e8 <DisplayStatus+0x134>
 8002664:	2a01      	cmp	r2, #1
 8002666:	d14d      	bne.n	8002704 <DisplayStatus+0x150>
	{
	case Narrow: strcpy(StringWidth,"Narrow"); break;
	case Wide: strcpy(StringWidth,"Wide"); break;
 8002668:	4941      	ldr	r1, [pc, #260]	; (8002770 <DisplayStatus+0x1bc>)
 800266a:	4a42      	ldr	r2, [pc, #264]	; (8002774 <DisplayStatus+0x1c0>)
 800266c:	c903      	ldmia	r1, {r0, r1}
 800266e:	6010      	str	r0, [r2, #0]
 8002670:	7111      	strb	r1, [r2, #4]
	}
	sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s AGG %s Volume %1.1f   \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, StringAGC, volume);
 8002672:	4841      	ldr	r0, [pc, #260]	; (8002778 <DisplayStatus+0x1c4>)
 8002674:	eddf 7a41 	vldr	s15, [pc, #260]	; 800277c <DisplayStatus+0x1c8>
 8002678:	edd0 6a00 	vldr	s13, [r0]
 800267c:	4940      	ldr	r1, [pc, #256]	; (8002780 <DisplayStatus+0x1cc>)
 800267e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002682:	4840      	ldr	r0, [pc, #256]	; (8002784 <DisplayStatus+0x1d0>)
 8002684:	ed91 7a00 	vldr	s14, [r1]
 8002688:	493f      	ldr	r1, [pc, #252]	; (8002788 <DisplayStatus+0x1d4>)
 800268a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002694:	9403      	str	r4, [sp, #12]
 8002696:	ed8d 7b04 	vstr	d7, [sp, #16]
 800269a:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800269e:	ec53 2b16 	vmov	r2, r3, d6
 80026a2:	f00c f9e7 	bl	800ea74 <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 80026a6:	4837      	ldr	r0, [pc, #220]	; (8002784 <DisplayStatus+0x1d0>)
 80026a8:	f7fd fe1a 	bl	80002e0 <strlen>
 80026ac:	4601      	mov	r1, r0
 80026ae:	4835      	ldr	r0, [pc, #212]	; (8002784 <DisplayStatus+0x1d0>)
 80026b0:	b289      	uxth	r1, r1
 80026b2:	f00a f9c5 	bl	800ca40 <CDC_Transmit_FS>
	HAL_Delay(1);
 80026b6:	2001      	movs	r0, #1
	PrintUI(UartTXString);
}
 80026b8:	b006      	add	sp, #24
 80026ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(1);
 80026be:	f001 bdb7 	b.w	8004230 <HAL_Delay>
	case AM: strcpy(StringMode,"AM"); break;
 80026c2:	4a32      	ldr	r2, [pc, #200]	; (800278c <DisplayStatus+0x1d8>)
 80026c4:	e7b9      	b.n	800263a <DisplayStatus+0x86>
	case LSB: strcpy(StringMode,"LSB"); break;
 80026c6:	4a32      	ldr	r2, [pc, #200]	; (8002790 <DisplayStatus+0x1dc>)
 80026c8:	4d24      	ldr	r5, [pc, #144]	; (800275c <DisplayStatus+0x1a8>)
 80026ca:	602a      	str	r2, [r5, #0]
	switch (CurrentAGC)
 80026cc:	4a24      	ldr	r2, [pc, #144]	; (8002760 <DisplayStatus+0x1ac>)
 80026ce:	7812      	ldrb	r2, [r2, #0]
 80026d0:	2a00      	cmp	r2, #0
 80026d2:	d1bb      	bne.n	800264c <DisplayStatus+0x98>
	case Fast: strcpy(StringAGC,"Fast"); break;
 80026d4:	4a2f      	ldr	r2, [pc, #188]	; (8002794 <DisplayStatus+0x1e0>)
 80026d6:	4c24      	ldr	r4, [pc, #144]	; (8002768 <DisplayStatus+0x1b4>)
 80026d8:	e892 0003 	ldmia.w	r2, {r0, r1}
	switch (CurrentBW)
 80026dc:	4a23      	ldr	r2, [pc, #140]	; (800276c <DisplayStatus+0x1b8>)
	case Fast: strcpy(StringAGC,"Fast"); break;
 80026de:	6020      	str	r0, [r4, #0]
	switch (CurrentBW)
 80026e0:	7812      	ldrb	r2, [r2, #0]
	case Fast: strcpy(StringAGC,"Fast"); break;
 80026e2:	7121      	strb	r1, [r4, #4]
	switch (CurrentBW)
 80026e4:	2a00      	cmp	r2, #0
 80026e6:	d1bd      	bne.n	8002664 <DisplayStatus+0xb0>
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 80026e8:	492b      	ldr	r1, [pc, #172]	; (8002798 <DisplayStatus+0x1e4>)
 80026ea:	4a22      	ldr	r2, [pc, #136]	; (8002774 <DisplayStatus+0x1c0>)
 80026ec:	c903      	ldmia	r1, {r0, r1}
 80026ee:	0c0e      	lsrs	r6, r1, #16
 80026f0:	6010      	str	r0, [r2, #0]
 80026f2:	8091      	strh	r1, [r2, #4]
 80026f4:	7196      	strb	r6, [r2, #6]
 80026f6:	e7bc      	b.n	8002672 <DisplayStatus+0xbe>
	case USB: strcpy(StringMode,"USB"); break;
 80026f8:	4d18      	ldr	r5, [pc, #96]	; (800275c <DisplayStatus+0x1a8>)
 80026fa:	4a28      	ldr	r2, [pc, #160]	; (800279c <DisplayStatus+0x1e8>)
 80026fc:	602a      	str	r2, [r5, #0]
 80026fe:	e7a1      	b.n	8002644 <DisplayStatus+0x90>
 8002700:	4c19      	ldr	r4, [pc, #100]	; (8002768 <DisplayStatus+0x1b4>)
 8002702:	e7ab      	b.n	800265c <DisplayStatus+0xa8>
 8002704:	4a1b      	ldr	r2, [pc, #108]	; (8002774 <DisplayStatus+0x1c0>)
 8002706:	e7b4      	b.n	8002672 <DisplayStatus+0xbe>
	case 1000: strcpy(StringStep,"  1K"); break;
 8002708:	4a25      	ldr	r2, [pc, #148]	; (80027a0 <DisplayStatus+0x1ec>)
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <DisplayStatus+0x18c>)
 800270c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002710:	6018      	str	r0, [r3, #0]
 8002712:	7119      	strb	r1, [r3, #4]
 8002714:	e762      	b.n	80025dc <DisplayStatus+0x28>
	case 10: strcpy(StringStep,"  10"); break;
 8002716:	4a23      	ldr	r2, [pc, #140]	; (80027a4 <DisplayStatus+0x1f0>)
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <DisplayStatus+0x18c>)
 800271a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800271e:	6018      	str	r0, [r3, #0]
 8002720:	7119      	strb	r1, [r3, #4]
 8002722:	e75b      	b.n	80025dc <DisplayStatus+0x28>
	case 10000: strcpy(StringStep," 10K"); break;
 8002724:	4a20      	ldr	r2, [pc, #128]	; (80027a8 <DisplayStatus+0x1f4>)
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <DisplayStatus+0x18c>)
 8002728:	e892 0003 	ldmia.w	r2, {r0, r1}
 800272c:	6018      	str	r0, [r3, #0]
 800272e:	7119      	strb	r1, [r3, #4]
 8002730:	e754      	b.n	80025dc <DisplayStatus+0x28>
 8002732:	4d0a      	ldr	r5, [pc, #40]	; (800275c <DisplayStatus+0x1a8>)
 8002734:	e786      	b.n	8002644 <DisplayStatus+0x90>
 8002736:	bf00      	nop
 8002738:	2400cf10 	.word	0x2400cf10
 800273c:	0801813c 	.word	0x0801813c
 8002740:	24000700 	.word	0x24000700
 8002744:	2400cf18 	.word	0x2400cf18
 8002748:	0801812c 	.word	0x0801812c
 800274c:	000186a0 	.word	0x000186a0
 8002750:	0801815c 	.word	0x0801815c
 8002754:	0801814c 	.word	0x0801814c
 8002758:	08018168 	.word	0x08018168
 800275c:	240006f8 	.word	0x240006f8
 8002760:	24000b60 	.word	0x24000b60
 8002764:	08018174 	.word	0x08018174
 8002768:	240006f0 	.word	0x240006f0
 800276c:	24000f70 	.word	0x24000f70
 8002770:	08018184 	.word	0x08018184
 8002774:	24000708 	.word	0x24000708
 8002778:	24009df4 	.word	0x24009df4
 800277c:	3a83126f 	.word	0x3a83126f
 8002780:	24004918 	.word	0x24004918
 8002784:	24000a4c 	.word	0x24000a4c
 8002788:	0801818c 	.word	0x0801818c
 800278c:	08018164 	.word	0x08018164
 8002790:	0042534c 	.word	0x0042534c
 8002794:	0801816c 	.word	0x0801816c
 8002798:	0801817c 	.word	0x0801817c
 800279c:	00425355 	.word	0x00425355
 80027a0:	08018144 	.word	0x08018144
 80027a4:	08018134 	.word	0x08018134
 80027a8:	08018154 	.word	0x08018154

080027ac <SetTXPLL>:
	{
		for (n = 2; n <= 512; n++) //was 1
		{
			for (p = 2; p <= 128; p+=2)
			{
				OutF = XTalFreq * n / m / p / od;
 80027ac:	4b37      	ldr	r3, [pc, #220]	; (800288c <SetTXPLL+0xe0>)
 80027ae:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	MinDiff = 999999999;
 80027b2:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002890 <SetTXPLL+0xe4>
				OutF = XTalFreq * n / m / p / od;
 80027b6:	edd3 4a00 	vldr	s9, [r3]
				if ((abs(OutF - TF) < MinDiff) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 80027ba:	ed9f 5a36 	vldr	s10, [pc, #216]	; 8002894 <SetTXPLL+0xe8>
 80027be:	eddf 3a36 	vldr	s7, [pc, #216]	; 8002898 <SetTXPLL+0xec>
{
 80027c2:	b4f0      	push	{r4, r5, r6, r7}
	for (m = 2; m <= 25; m++) //was 64
 80027c4:	2502      	movs	r5, #2
		for (n = 2; n <= 512; n++) //was 1
 80027c6:	f240 2601 	movw	r6, #513	; 0x201
				OutF = XTalFreq * n / m / p / od;
 80027ca:	ee07 5a90 	vmov	s15, r5
		for (n = 2; n <= 512; n++) //was 1
 80027ce:	2202      	movs	r2, #2
				OutF = XTalFreq * n / m / p / od;
 80027d0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80027d4:	ee83 4a25 	vdiv.f32	s8, s6, s11
 80027d8:	e002      	b.n	80027e0 <SetTXPLL+0x34>
		for (n = 2; n <= 512; n++) //was 1
 80027da:	3201      	adds	r2, #1
 80027dc:	42b2      	cmp	r2, r6
 80027de:	d037      	beq.n	8002850 <SetTXPLL+0xa4>
				OutF = XTalFreq * n / m / p / od;
 80027e0:	ee07 2a90 	vmov	s15, r2
 80027e4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80027e8:	ee26 6a24 	vmul.f32	s12, s12, s9
				if ((abs(OutF - TF) < MinDiff) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 80027ec:	ee66 7a04 	vmul.f32	s15, s12, s8
 80027f0:	eef4 7a45 	vcmp.f32	s15, s10
 80027f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f8:	d5ef      	bpl.n	80027da <SetTXPLL+0x2e>
 80027fa:	eef4 7ae3 	vcmpe.f32	s15, s7
 80027fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002802:	ddea      	ble.n	80027da <SetTXPLL+0x2e>
			for (p = 2; p <= 128; p+=2)
 8002804:	2302      	movs	r3, #2
				OutF = XTalFreq * n / m / p / od;
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800280e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8002812:	eec6 7a07 	vdiv.f32	s15, s12, s14
				if ((abs(OutF - TF) < MinDiff) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8002816:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800281a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800281e:	ee17 7a90 	vmov	r7, s15
 8002822:	2f00      	cmp	r7, #0
 8002824:	bfb8      	it	lt
 8002826:	427f      	neglt	r7, r7
 8002828:	ee07 7a90 	vmov	s15, r7
 800282c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002830:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002838:	d504      	bpl.n	8002844 <SetTXPLL+0x98>
 800283a:	eef0 6a67 	vmov.f32	s13, s15
 800283e:	4619      	mov	r1, r3
 8002840:	4610      	mov	r0, r2
 8002842:	462c      	mov	r4, r5
			for (p = 2; p <= 128; p+=2)
 8002844:	3302      	adds	r3, #2
 8002846:	2b82      	cmp	r3, #130	; 0x82
 8002848:	d1dd      	bne.n	8002806 <SetTXPLL+0x5a>
		for (n = 2; n <= 512; n++) //was 1
 800284a:	3201      	adds	r2, #1
 800284c:	42b2      	cmp	r2, r6
 800284e:	d1c7      	bne.n	80027e0 <SetTXPLL+0x34>
	for (m = 2; m <= 25; m++) //was 64
 8002850:	3501      	adds	r5, #1
 8002852:	2d1a      	cmp	r5, #26
 8002854:	d1b9      	bne.n	80027ca <SetTXPLL+0x1e>
					fod = od;
				}
			}
		}
	}
	__HAL_RCC_PLL2_DISABLE();
 8002856:	4d11      	ldr	r5, [pc, #68]	; (800289c <SetTXPLL+0xf0>)
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 8002858:	1e4b      	subs	r3, r1, #1
 800285a:	1e42      	subs	r2, r0, #1
	__HAL_RCC_PLL2_DISABLE();
 800285c:	6829      	ldr	r1, [r5, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 800285e:	025b      	lsls	r3, r3, #9
 8002860:	f3c2 0208 	ubfx	r2, r2, #0, #9
	__HAL_RCC_PLL2_DISABLE();
 8002864:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 8002868:	b29b      	uxth	r3, r3
	__HAL_RCC_PLL2_DISABLE();
 800286a:	6029      	str	r1, [r5, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 800286c:	4313      	orrs	r3, r2
 800286e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002874:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8002878:	ea42 3404 	orr.w	r4, r2, r4, lsl #12
 800287c:	62ac      	str	r4, [r5, #40]	; 0x28
 800287e:	63ab      	str	r3, [r5, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8002880:	682b      	ldr	r3, [r5, #0]
 8002882:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002886:	602b      	str	r3, [r5, #0]

}
 8002888:	bcf0      	pop	{r4, r5, r6, r7}
 800288a:	4770      	bx	lr
 800288c:	24008394 	.word	0x24008394
 8002890:	4e6e6b28 	.word	0x4e6e6b28
 8002894:	4e64e1c0 	.word	0x4e64e1c0
 8002898:	4d0f0d18 	.word	0x4d0f0d18
 800289c:	58024400 	.word	0x58024400

080028a0 <UserInput>:
	if (USBRXLength)
 80028a0:	4b97      	ldr	r3, [pc, #604]	; (8002b00 <UserInput+0x260>)
 80028a2:	681a      	ldr	r2, [r3, #0]
{
 80028a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028a8:	ed2d 8b04 	vpush	{d8-d9}
 80028ac:	b091      	sub	sp, #68	; 0x44
	if (USBRXLength)
 80028ae:	2a00      	cmp	r2, #0
 80028b0:	f000 82ec 	beq.w	8002e8c <UserInput+0x5ec>
		result = HAL_OK;
 80028b4:	2200      	movs	r2, #0
 80028b6:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		USBRXLength = 0;
 80028ba:	601a      	str	r2, [r3, #0]
	if (result == HAL_OK)
 80028bc:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80028c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f040 8082 	bne.w	80029ce <UserInput+0x12e>
		switch (UartRXString[0])
 80028ca:	4b8e      	ldr	r3, [pc, #568]	; (8002b04 <UserInput+0x264>)
		UartRXDataReady = RESET;
 80028cc:	498e      	ldr	r1, [pc, #568]	; (8002b08 <UserInput+0x268>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	700a      	strb	r2, [r1, #0]
		switch (UartRXString[0])
 80028d2:	3b2b      	subs	r3, #43	; 0x2b
 80028d4:	2b4c      	cmp	r3, #76	; 0x4c
 80028d6:	d878      	bhi.n	80029ca <UserInput+0x12a>
 80028d8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80028dc:	00770373 	.word	0x00770373
 80028e0:	0077035e 	.word	0x0077035e
 80028e4:	00770077 	.word	0x00770077
 80028e8:	0339033d 	.word	0x0339033d
 80028ec:	03310335 	.word	0x03310335
 80028f0:	0329032d 	.word	0x0329032d
 80028f4:	03210325 	.word	0x03210325
 80028f8:	0077031d 	.word	0x0077031d
 80028fc:	00770077 	.word	0x00770077
 8002900:	00770077 	.word	0x00770077
 8002904:	00770077 	.word	0x00770077
 8002908:	00770077 	.word	0x00770077
 800290c:	00770077 	.word	0x00770077
 8002910:	00770077 	.word	0x00770077
 8002914:	00770077 	.word	0x00770077
 8002918:	00770077 	.word	0x00770077
 800291c:	00770077 	.word	0x00770077
 8002920:	00770077 	.word	0x00770077
 8002924:	00770077 	.word	0x00770077
 8002928:	00770077 	.word	0x00770077
 800292c:	00770077 	.word	0x00770077
 8002930:	00770077 	.word	0x00770077
 8002934:	00770077 	.word	0x00770077
 8002938:	00770077 	.word	0x00770077
 800293c:	00770077 	.word	0x00770077
 8002940:	00770077 	.word	0x00770077
 8002944:	00770077 	.word	0x00770077
 8002948:	00770319 	.word	0x00770319
 800294c:	00770315 	.word	0x00770315
 8002950:	03110077 	.word	0x03110077
 8002954:	00770077 	.word	0x00770077
 8002958:	00770077 	.word	0x00770077
 800295c:	030d0077 	.word	0x030d0077
 8002960:	03090077 	.word	0x03090077
 8002964:	00770077 	.word	0x00770077
 8002968:	02f10077 	.word	0x02f10077
 800296c:	004d02ed 	.word	0x004d02ed
 8002970:	007702e9 	.word	0x007702e9
 8002974:	02e5      	.short	0x02e5
{
	static float LastTXFreq;
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	if (Status)
	{
		if (LastTXFreq != LOfreq)
 8002976:	4d65      	ldr	r5, [pc, #404]	; (8002b0c <UserInput+0x26c>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	2300      	movs	r3, #0
		if (LastTXFreq != LOfreq)
 800297a:	4c65      	ldr	r4, [pc, #404]	; (8002b10 <UserInput+0x270>)
 800297c:	ed95 0a00 	vldr	s0, [r5]
 8002980:	edd4 7a00 	vldr	s15, [r4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002984:	930e      	str	r3, [sp, #56]	; 0x38
		if (LastTXFreq != LOfreq)
 8002986:	eef4 7a40 	vcmp.f32	s15, s0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		if (LastTXFreq != LOfreq)
 800298e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002992:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
		if (LastTXFreq != LOfreq)
 8002996:	f040 8326 	bne.w	8002fe6 <UserInput+0x746>
		{
			SetTXPLL(LOfreq);
			LastTXFreq = LOfreq;
		}
		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800299a:	2303      	movs	r3, #3
 800299c:	2200      	movs	r2, #0
 800299e:	f44f 7400 	mov.w	r4, #512	; 0x200
 80029a2:	2502      	movs	r5, #2
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80029a4:	2600      	movs	r6, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a6:	a90a      	add	r1, sp, #40	; 0x28
 80029a8:	485a      	ldr	r0, [pc, #360]	; (8002b14 <UserInput+0x274>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80029aa:	960e      	str	r6, [sp, #56]	; 0x38
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80029b0:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029b4:	f004 fadc 	bl	8006f70 <HAL_GPIO_Init>

		RELAY_TX_ON;
 80029b8:	2201      	movs	r2, #1
 80029ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029be:	4856      	ldr	r0, [pc, #344]	; (8002b18 <UserInput+0x278>)
 80029c0:	f004 fbfa 	bl	80071b8 <HAL_GPIO_WritePin>
		TransmissionEnabled = 1;
 80029c4:	4b55      	ldr	r3, [pc, #340]	; (8002b1c <UserInput+0x27c>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]
		DisplayStatus();
 80029ca:	f7ff fdf3 	bl	80025b4 <DisplayStatus>
	EncVal = TIM4->CNT;
 80029ce:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <UserInput+0x280>)
 80029d0:	4c54      	ldr	r4, [pc, #336]	; (8002b24 <UserInput+0x284>)
 80029d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80029d4:	b200      	sxth	r0, r0
	if (EncVal > 0)
 80029d6:	2800      	cmp	r0, #0
	EncVal = TIM4->CNT;
 80029d8:	8020      	strh	r0, [r4, #0]
	if (EncVal > 0)
 80029da:	dd07      	ble.n	80029ec <UserInput+0x14c>
		FplusClicked(EncVal/2); // One encoder click is two counts
 80029dc:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80029e0:	f7fe fa10 	bl	8000e04 <FplusClicked>
		DisplayStatus();
 80029e4:	f7ff fde6 	bl	80025b4 <DisplayStatus>
 80029e8:	f9b4 0000 	ldrsh.w	r0, [r4]
	if (EncVal < 0)
 80029ec:	2800      	cmp	r0, #0
 80029ee:	f2c0 8251 	blt.w	8002e94 <UserInput+0x5f4>
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 80029f2:	4b4d      	ldr	r3, [pc, #308]	; (8002b28 <UserInput+0x288>)
	TIM4->CNT = 0;
 80029f4:	2100      	movs	r1, #0
 80029f6:	4a4a      	ldr	r2, [pc, #296]	; (8002b20 <UserInput+0x280>)
			StrongestSignal = 0;
 80029f8:	f04f 0800 	mov.w	r8, #0
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 80029fc:	ed93 7a00 	vldr	s14, [r3]
	TIM4->CNT = 0;
 8002a00:	6251      	str	r1, [r2, #36]	; 0x24
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002a02:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     \r", SValue);
 8002a06:	4f49      	ldr	r7, [pc, #292]	; (8002b2c <UserInput+0x28c>)
 8002a08:	4c49      	ldr	r4, [pc, #292]	; (8002b30 <UserInput+0x290>)
 8002a0a:	4e4a      	ldr	r6, [pc, #296]	; (8002b34 <UserInput+0x294>)
 8002a0c:	f5a4 6980 	sub.w	r9, r4, #1024	; 0x400
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002a10:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8002ae0 <UserInput+0x240>
			BigBucketValue = 50 * log(StrongestSignal + 1.01);
 8002a14:	ed9f 9b34 	vldr	d9, [pc, #208]	; 8002ae8 <UserInput+0x248>
 8002a18:	ed9f 8b35 	vldr	d8, [pc, #212]	; 8002af0 <UserInput+0x250>
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002a1c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8002a20:	f00e fcf2 	bl	8011408 <log10>
 8002a24:	4b44      	ldr	r3, [pc, #272]	; (8002b38 <UserInput+0x298>)
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     \r", SValue);
 8002a26:	4945      	ldr	r1, [pc, #276]	; (8002b3c <UserInput+0x29c>)
 8002a28:	4638      	mov	r0, r7
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002a2a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8002af8 <UserInput+0x258>
 8002a2e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8002a32:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     \r", SValue);
 8002a36:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002a3a:	ed83 0a00 	vstr	s0, [r3]
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     \r", SValue);
 8002a3e:	ec53 2b17 	vmov	r2, r3, d7
 8002a42:	f00c f817 	bl	800ea74 <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002a46:	4638      	mov	r0, r7
 8002a48:	f7fd fc4a 	bl	80002e0 <strlen>
 8002a4c:	4601      	mov	r1, r0
 8002a4e:	4638      	mov	r0, r7
 8002a50:	b289      	uxth	r1, r1
 8002a52:	f009 fff5 	bl	800ca40 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002a56:	2001      	movs	r0, #1
 8002a58:	f001 fbea 	bl	8004230 <HAL_Delay>
	sprintf((char*)UartTXString, "\e[7;1HS %-4.1f, %-4.1f, %-4.1f, %d      ", CWLevel*100, SignalAverage*100, (CWLevel - BaseNoiseLevel)*100, CurrentAverageDah);
 8002a5c:	4a38      	ldr	r2, [pc, #224]	; (8002b40 <UserInput+0x2a0>)
 8002a5e:	4b39      	ldr	r3, [pc, #228]	; (8002b44 <UserInput+0x2a4>)
 8002a60:	4638      	mov	r0, r7
 8002a62:	edd2 7a00 	vldr	s15, [r2]
 8002a66:	ed93 7a00 	vldr	s14, [r3]
 8002a6a:	4b37      	ldr	r3, [pc, #220]	; (8002b48 <UserInput+0x2a8>)
 8002a6c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002a70:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002b4c <UserInput+0x2ac>
 8002a74:	ed93 6a00 	vldr	s12, [r3]
 8002a78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a7c:	4b34      	ldr	r3, [pc, #208]	; (8002b50 <UserInput+0x2b0>)
 8002a7e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002a82:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002a86:	6819      	ldr	r1, [r3, #0]
 8002a88:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002a8c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002a90:	9104      	str	r1, [sp, #16]
 8002a92:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8002a96:	492f      	ldr	r1, [pc, #188]	; (8002b54 <UserInput+0x2b4>)
 8002a98:	ec53 2b15 	vmov	r2, r3, d5
 8002a9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002aa0:	ed8d 6b00 	vstr	d6, [sp]
 8002aa4:	f00b ffe6 	bl	800ea74 <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002aa8:	4638      	mov	r0, r7
 8002aaa:	f7fd fc19 	bl	80002e0 <strlen>
 8002aae:	4601      	mov	r1, r0
 8002ab0:	4638      	mov	r0, r7
 8002ab2:	b289      	uxth	r1, r1
 8002ab4:	f009 ffc4 	bl	800ca40 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002ab8:	2001      	movs	r0, #1
 8002aba:	f001 fbb9 	bl	8004230 <HAL_Delay>
	DisplayCW();
 8002abe:	f7ff fd39 	bl	8002534 <DisplayCW>
	sprintf((char*)UartTXString, "\e[11;1H");
 8002ac2:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <UserInput+0x2b8>)
 8002ac4:	cb03      	ldmia	r3!, {r0, r1}
 8002ac6:	6038      	str	r0, [r7, #0]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002ac8:	4638      	mov	r0, r7
	sprintf((char*)UartTXString, "\e[11;1H");
 8002aca:	6079      	str	r1, [r7, #4]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002acc:	2107      	movs	r1, #7
 8002ace:	f009 ffb7 	bl	800ca40 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	f001 fbac 	bl	8004230 <HAL_Delay>
		for (i = 256; i >= 0; i -= 8)
 8002ad8:	e041      	b.n	8002b5e <UserInput+0x2be>
 8002ada:	bf00      	nop
 8002adc:	f3af 8000 	nop.w
 8002ae0:	00000000 	.word	0x00000000
 8002ae4:	409f4000 	.word	0x409f4000
 8002ae8:	c28f5c29 	.word	0xc28f5c29
 8002aec:	3ff028f5 	.word	0x3ff028f5
 8002af0:	00000000 	.word	0x00000000
 8002af4:	40490000 	.word	0x40490000
 8002af8:	9916f6a6 	.word	0x9916f6a6
 8002afc:	400a93fc 	.word	0x400a93fc
 8002b00:	24000a48 	.word	0x24000a48
 8002b04:	24000948 	.word	0x24000948
 8002b08:	24000710 	.word	0x24000710
 8002b0c:	24009df4 	.word	0x24009df4
 8002b10:	240006e8 	.word	0x240006e8
 8002b14:	58020800 	.word	0x58020800
 8002b18:	58020c00 	.word	0x58020c00
 8002b1c:	24008d80 	.word	0x24008d80
 8002b20:	40000800 	.word	0x40000800
 8002b24:	2400839c 	.word	0x2400839c
 8002b28:	24008c20 	.word	0x24008c20
 8002b2c:	24000a4c 	.word	0x24000a4c
 8002b30:	2400c308 	.word	0x2400c308
 8002b34:	08018250 	.word	0x08018250
 8002b38:	240049b8 	.word	0x240049b8
 8002b3c:	080181d4 	.word	0x080181d4
 8002b40:	240051cc 	.word	0x240051cc
 8002b44:	240051d0 	.word	0x240051d0
 8002b48:	240049c0 	.word	0x240049c0
 8002b4c:	42c80000 	.word	0x42c80000
 8002b50:	2400df20 	.word	0x2400df20
 8002b54:	080181ec 	.word	0x080181ec
 8002b58:	08018218 	.word	0x08018218
{
 8002b5c:	461c      	mov	r4, r3
			StrongestSignal = 0;
 8002b5e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
				if (StrongestSignal < WFBuffer[i + j])
 8002b62:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8002b66:	edd4 7a00 	vldr	s15, [r4]
 8002b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b72:	dd01      	ble.n	8002b78 <UserInput+0x2d8>
					StrongestSignal = WFBuffer[i + j];
 8002b74:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
				if (StrongestSignal < WFBuffer[i + j])
 8002b78:	edd4 7a01 	vldr	s15, [r4, #4]
 8002b7c:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8002b80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b88:	dd01      	ble.n	8002b8e <UserInput+0x2ee>
					StrongestSignal = WFBuffer[i + j];
 8002b8a:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
				if (StrongestSignal < WFBuffer[i + j])
 8002b8e:	edd4 7a02 	vldr	s15, [r4, #8]
 8002b92:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8002b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9e:	dd01      	ble.n	8002ba4 <UserInput+0x304>
					StrongestSignal = WFBuffer[i + j];
 8002ba0:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
				if (StrongestSignal < WFBuffer[i + j])
 8002ba4:	edd4 7a03 	vldr	s15, [r4, #12]
 8002ba8:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8002bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb4:	dd01      	ble.n	8002bba <UserInput+0x31a>
					StrongestSignal = WFBuffer[i + j];
 8002bb6:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
				if (StrongestSignal < WFBuffer[i + j])
 8002bba:	edd4 7a04 	vldr	s15, [r4, #16]
 8002bbe:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8002bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bca:	dd01      	ble.n	8002bd0 <UserInput+0x330>
					StrongestSignal = WFBuffer[i + j];
 8002bcc:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
				if (StrongestSignal < WFBuffer[i + j])
 8002bd0:	edd4 7a05 	vldr	s15, [r4, #20]
 8002bd4:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8002bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be0:	dd01      	ble.n	8002be6 <UserInput+0x346>
					StrongestSignal = WFBuffer[i + j];
 8002be2:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
				if (StrongestSignal < WFBuffer[i + j])
 8002be6:	edd4 7a06 	vldr	s15, [r4, #24]
 8002bea:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8002bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf6:	dd01      	ble.n	8002bfc <UserInput+0x35c>
					StrongestSignal = WFBuffer[i + j];
 8002bf8:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
				if (StrongestSignal < WFBuffer[i + j])
 8002bfc:	edd4 7a07 	vldr	s15, [r4, #28]
 8002c00:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8002c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0c:	dd01      	ble.n	8002c12 <UserInput+0x372>
					StrongestSignal = WFBuffer[i + j];
 8002c0e:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
			BigBucketValue = 50 * log(StrongestSignal + 1.01);
 8002c12:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 8002c16:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8002c1a:	ee30 0b09 	vadd.f64	d0, d0, d9
 8002c1e:	f00e f9d7 	bl	8010fd0 <log>
 8002c22:	ee20 0b08 	vmul.f64	d0, d0, d8
			if (BigBucketValue >30)
 8002c26:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
			BigBucketValue = 50 * log(StrongestSignal + 1.01);
 8002c2a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8002c2e:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
			if (BigBucketValue >30)
 8002c32:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 8002c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3e:	dd01      	ble.n	8002c44 <UserInput+0x3a4>
				BigBucketValue =30;
 8002c40:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002c44:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
			sprintf((char*)UartTXString, "\e[48;5;%dm ", BucketColor);
 8002c48:	49c7      	ldr	r1, [pc, #796]	; (8002f68 <UserInput+0x6c8>)
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
			sprintf((char*)UartTXString, "\e[48;5;%dm ", BucketColor);
 8002c4e:	48c7      	ldr	r0, [pc, #796]	; (8002f6c <UserInput+0x6cc>)
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002c50:	edcd 7a07 	vstr	s15, [sp, #28]
 8002c54:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8002c58:	5cf3      	ldrb	r3, [r6, r3]
 8002c5a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			sprintf((char*)UartTXString, "\e[48;5;%dm ", BucketColor);
 8002c5e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 8002c62:	f00b ff07 	bl	800ea74 <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002c66:	48c1      	ldr	r0, [pc, #772]	; (8002f6c <UserInput+0x6cc>)
 8002c68:	f7fd fb3a 	bl	80002e0 <strlen>
 8002c6c:	4601      	mov	r1, r0
 8002c6e:	48bf      	ldr	r0, [pc, #764]	; (8002f6c <UserInput+0x6cc>)
 8002c70:	b289      	uxth	r1, r1
 8002c72:	f009 fee5 	bl	800ca40 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002c76:	2001      	movs	r0, #1
 8002c78:	f001 fada 	bl	8004230 <HAL_Delay>
		for (i = 256; i >= 0; i -= 8)
 8002c7c:	45a1      	cmp	r9, r4
 8002c7e:	f1a4 0320 	sub.w	r3, r4, #32
 8002c82:	f47f af6b 	bne.w	8002b5c <UserInput+0x2bc>
			BigBucketValue = 100 * log(StrongestSignal + 1);
 8002c86:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8002f60 <UserInput+0x6c0>
 8002c8a:	f509 693e 	add.w	r9, r9, #3040	; 0xbe0
 8002c8e:	4cb8      	ldr	r4, [pc, #736]	; (8002f70 <UserInput+0x6d0>)
			StrongestSignal = 0;
 8002c90:	f04f 0800 	mov.w	r8, #0
			sprintf((char*)UartTXString, "\e[48;5;%dm ", BucketColor);
 8002c94:	4db4      	ldr	r5, [pc, #720]	; (8002f68 <UserInput+0x6c8>)
			StrongestSignal = 0;
 8002c96:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
				if (StrongestSignal < WFBuffer[i - j])
 8002c9a:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8002c9e:	edd4 7a07 	vldr	s15, [r4, #28]
 8002ca2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002caa:	d501      	bpl.n	8002cb0 <UserInput+0x410>
					StrongestSignal = WFBuffer[i - j];
 8002cac:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
				if (StrongestSignal < WFBuffer[i - j])
 8002cb0:	edd4 7a06 	vldr	s15, [r4, #24]
 8002cb4:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8002cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc0:	dd01      	ble.n	8002cc6 <UserInput+0x426>
					StrongestSignal = WFBuffer[i - j];
 8002cc2:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
				if (StrongestSignal < WFBuffer[i - j])
 8002cc6:	edd4 7a05 	vldr	s15, [r4, #20]
 8002cca:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8002cce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd6:	dd01      	ble.n	8002cdc <UserInput+0x43c>
					StrongestSignal = WFBuffer[i - j];
 8002cd8:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
				if (StrongestSignal < WFBuffer[i - j])
 8002cdc:	edd4 7a04 	vldr	s15, [r4, #16]
 8002ce0:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8002ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cec:	dd01      	ble.n	8002cf2 <UserInput+0x452>
					StrongestSignal = WFBuffer[i - j];
 8002cee:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
				if (StrongestSignal < WFBuffer[i - j])
 8002cf2:	edd4 7a03 	vldr	s15, [r4, #12]
 8002cf6:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8002cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d02:	dd01      	ble.n	8002d08 <UserInput+0x468>
					StrongestSignal = WFBuffer[i - j];
 8002d04:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
				if (StrongestSignal < WFBuffer[i - j])
 8002d08:	edd4 7a02 	vldr	s15, [r4, #8]
 8002d0c:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8002d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d18:	dd01      	ble.n	8002d1e <UserInput+0x47e>
					StrongestSignal = WFBuffer[i - j];
 8002d1a:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
				if (StrongestSignal < WFBuffer[i - j])
 8002d1e:	edd4 7a01 	vldr	s15, [r4, #4]
 8002d22:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8002d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2e:	dd01      	ble.n	8002d34 <UserInput+0x494>
					StrongestSignal = WFBuffer[i - j];
 8002d30:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
				if (StrongestSignal < WFBuffer[i - j])
 8002d34:	edd4 7a00 	vldr	s15, [r4]
 8002d38:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8002d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d44:	dd01      	ble.n	8002d4a <UserInput+0x4aa>
					StrongestSignal = WFBuffer[i - j];
 8002d46:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
			BigBucketValue = 100 * log(StrongestSignal + 1);
 8002d4a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002d4e:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 8002d52:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002d56:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8002d5a:	f00e f939 	bl	8010fd0 <log>
 8002d5e:	ee20 0b08 	vmul.f64	d0, d0, d8
			if (BigBucketValue >30)
 8002d62:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
			BigBucketValue = 100 * log(StrongestSignal + 1);
 8002d66:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8002d6a:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
			if (BigBucketValue >30)
 8002d6e:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 8002d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7a:	dd5d      	ble.n	8002e38 <UserInput+0x598>
				BigBucketValue =30;
 8002d7c:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
			sprintf((char*)UartTXString, "\e[48;5;%dm ", BucketColor);
 8002d80:	4629      	mov	r1, r5
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002d82:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8002d86:	3c20      	subs	r4, #32
			sprintf((char*)UartTXString, "\e[48;5;%dm ", BucketColor);
 8002d88:	4878      	ldr	r0, [pc, #480]	; (8002f6c <UserInput+0x6cc>)
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d8e:	edcd 7a07 	vstr	s15, [sp, #28]
 8002d92:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8002d96:	5cf3      	ldrb	r3, [r6, r3]
 8002d98:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			sprintf((char*)UartTXString, "\e[48;5;%dm ", BucketColor);
 8002d9c:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 8002da0:	f00b fe68 	bl	800ea74 <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002da4:	4871      	ldr	r0, [pc, #452]	; (8002f6c <UserInput+0x6cc>)
 8002da6:	f7fd fa9b 	bl	80002e0 <strlen>
 8002daa:	4601      	mov	r1, r0
 8002dac:	486f      	ldr	r0, [pc, #444]	; (8002f6c <UserInput+0x6cc>)
 8002dae:	b289      	uxth	r1, r1
 8002db0:	f009 fe46 	bl	800ca40 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002db4:	2001      	movs	r0, #1
 8002db6:	f001 fa3b 	bl	8004230 <HAL_Delay>
		for (i=FFTLEN-1; i>(FFTLEN-256); i -= 8)
 8002dba:	45a1      	cmp	r9, r4
 8002dbc:	f47f af6b 	bne.w	8002c96 <UserInput+0x3f6>
	sprintf((char*)UartTXString, "\e[48;5;16m"); // set black background
 8002dc0:	4b6c      	ldr	r3, [pc, #432]	; (8002f74 <UserInput+0x6d4>)
 8002dc2:	cb03      	ldmia	r3!, {r0, r1}
 8002dc4:	881a      	ldrh	r2, [r3, #0]
 8002dc6:	789b      	ldrb	r3, [r3, #2]
 8002dc8:	6038      	str	r0, [r7, #0]
 8002dca:	72bb      	strb	r3, [r7, #10]
 8002dcc:	6079      	str	r1, [r7, #4]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002dce:	210a      	movs	r1, #10
	sprintf((char*)UartTXString, "\e[48;5;16m"); // set black background
 8002dd0:	813a      	strh	r2, [r7, #8]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002dd2:	4866      	ldr	r0, [pc, #408]	; (8002f6c <UserInput+0x6cc>)
 8002dd4:	f009 fe34 	bl	800ca40 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002dd8:	2001      	movs	r0, #1
 8002dda:	f001 fa29 	bl	8004230 <HAL_Delay>
	if (OVFDetected)
 8002dde:	4966      	ldr	r1, [pc, #408]	; (8002f78 <UserInput+0x6d8>)
 8002de0:	880b      	ldrh	r3, [r1, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d049      	beq.n	8002e7a <UserInput+0x5da>
		OVFDetected--;
 8002de6:	3b01      	subs	r3, #1
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8002de8:	4c64      	ldr	r4, [pc, #400]	; (8002f7c <UserInput+0x6dc>)
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8002dea:	4865      	ldr	r0, [pc, #404]	; (8002f80 <UserInput+0x6e0>)
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8002dec:	2680      	movs	r6, #128	; 0x80
		sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8002dee:	4a65      	ldr	r2, [pc, #404]	; (8002f84 <UserInput+0x6e4>)
		OVFDetected--;
 8002df0:	b29b      	uxth	r3, r3
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8002df2:	6825      	ldr	r5, [r4, #0]
		OVFDetected--;
 8002df4:	800b      	strh	r3, [r1, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8002df6:	6804      	ldr	r4, [r0, #0]
		sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8002df8:	ca03      	ldmia	r2!, {r0, r1}
 8002dfa:	6079      	str	r1, [r7, #4]
 8002dfc:	8811      	ldrh	r1, [r2, #0]
 8002dfe:	7892      	ldrb	r2, [r2, #2]
 8002e00:	6038      	str	r0, [r7, #0]
 8002e02:	8139      	strh	r1, [r7, #8]
 8002e04:	72ba      	strb	r2, [r7, #10]
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8002e06:	602e      	str	r6, [r5, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8002e08:	6026      	str	r6, [r4, #0]
		if (!OVFDetected)
 8002e0a:	b92b      	cbnz	r3, 8002e18 <UserInput+0x578>
			__HAL_ADC_ENABLE_IT(&hadc1, (ADC_IT_AWD1));
 8002e0c:	686b      	ldr	r3, [r5, #4]
 8002e0e:	4333      	orrs	r3, r6
 8002e10:	606b      	str	r3, [r5, #4]
			__HAL_ADC_ENABLE_IT(&hadc2, (ADC_IT_AWD1));
 8002e12:	6863      	ldr	r3, [r4, #4]
 8002e14:	4333      	orrs	r3, r6
 8002e16:	6063      	str	r3, [r4, #4]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002e18:	4854      	ldr	r0, [pc, #336]	; (8002f6c <UserInput+0x6cc>)
 8002e1a:	f7fd fa61 	bl	80002e0 <strlen>
 8002e1e:	4601      	mov	r1, r0
 8002e20:	4852      	ldr	r0, [pc, #328]	; (8002f6c <UserInput+0x6cc>)
 8002e22:	b289      	uxth	r1, r1
 8002e24:	f009 fe0c 	bl	800ca40 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f001 fa01 	bl	8004230 <HAL_Delay>
}
 8002e2e:	b011      	add	sp, #68	; 0x44
 8002e30:	ecbd 8b04 	vpop	{d8-d9}
 8002e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002e38:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
			sprintf((char*)UartTXString, "\e[48;5;%dm ", BucketColor);
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	484b      	ldr	r0, [pc, #300]	; (8002f6c <UserInput+0x6cc>)
 8002e40:	3c20      	subs	r4, #32
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e46:	edcd 7a07 	vstr	s15, [sp, #28]
 8002e4a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8002e4e:	5cf3      	ldrb	r3, [r6, r3]
 8002e50:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			sprintf((char*)UartTXString, "\e[48;5;%dm ", BucketColor);
 8002e54:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
 8002e58:	f00b fe0c 	bl	800ea74 <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002e5c:	4843      	ldr	r0, [pc, #268]	; (8002f6c <UserInput+0x6cc>)
 8002e5e:	f7fd fa3f 	bl	80002e0 <strlen>
 8002e62:	4601      	mov	r1, r0
 8002e64:	4841      	ldr	r0, [pc, #260]	; (8002f6c <UserInput+0x6cc>)
 8002e66:	b289      	uxth	r1, r1
 8002e68:	f009 fdea 	bl	800ca40 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f001 f9df 	bl	8004230 <HAL_Delay>
		for (i=FFTLEN-1; i>(FFTLEN-256); i -= 8)
 8002e72:	454c      	cmp	r4, r9
 8002e74:	f47f af0f 	bne.w	8002c96 <UserInput+0x3f6>
 8002e78:	e7a2      	b.n	8002dc0 <UserInput+0x520>
		sprintf((char*)UartTXString, "\e[4;1H   \r");
 8002e7a:	4b43      	ldr	r3, [pc, #268]	; (8002f88 <UserInput+0x6e8>)
 8002e7c:	cb03      	ldmia	r3!, {r0, r1}
 8002e7e:	881a      	ldrh	r2, [r3, #0]
 8002e80:	789b      	ldrb	r3, [r3, #2]
 8002e82:	6038      	str	r0, [r7, #0]
 8002e84:	6079      	str	r1, [r7, #4]
 8002e86:	813a      	strh	r2, [r7, #8]
 8002e88:	72bb      	strb	r3, [r7, #10]
 8002e8a:	e7c5      	b.n	8002e18 <UserInput+0x578>
		result = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8002e92:	e513      	b.n	80028bc <UserInput+0x1c>
		FminusClicked(-EncVal/2); // One encoder click is two counts
 8002e94:	3001      	adds	r0, #1
 8002e96:	1040      	asrs	r0, r0, #1
 8002e98:	4240      	negs	r0, r0
 8002e9a:	b280      	uxth	r0, r0
 8002e9c:	f7fe f810 	bl	8000ec0 <FminusClicked>
		DisplayStatus();
 8002ea0:	f7ff fb88 	bl	80025b4 <DisplayStatus>
 8002ea4:	e5a5      	b.n	80029f2 <UserInput+0x152>
			SetBW((Bwidth)Wide);  break;
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	f7fd fde0 	bl	8000a6c <SetBW>
 8002eac:	e58d      	b.n	80029ca <UserInput+0x12a>
			SetMode((Mode)USB); break;
 8002eae:	2002      	movs	r0, #2
 8002eb0:	f7fd ff4e 	bl	8000d50 <SetMode>
 8002eb4:	e589      	b.n	80029ca <UserInput+0x12a>
			SetAGC((Agctype)Slow);  break;
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	f7fd fe3a 	bl	8000b30 <SetAGC>
 8002ebc:	e585      	b.n	80029ca <UserInput+0x12a>
	}
	else
	{
		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ebe:	2300      	movs	r3, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	2400      	movs	r4, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f44f 7600 	mov.w	r6, #512	; 0x200
 8002ec8:	2701      	movs	r7, #1
		GPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eca:	a90a      	add	r1, sp, #40	; 0x28
 8002ecc:	482f      	ldr	r0, [pc, #188]	; (8002f8c <UserInput+0x6ec>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ece:	940e      	str	r4, [sp, #56]	; 0x38
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ed0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002ed4:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed8:	f004 f84a 	bl	8006f70 <HAL_GPIO_Init>

		RELAY_TX_OFF;
 8002edc:	4622      	mov	r2, r4
 8002ede:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ee2:	482b      	ldr	r0, [pc, #172]	; (8002f90 <UserInput+0x6f0>)
 8002ee4:	f004 f968 	bl	80071b8 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8002ee8:	4b2a      	ldr	r3, [pc, #168]	; (8002f94 <UserInput+0x6f4>)
 8002eea:	701c      	strb	r4, [r3, #0]

	}
}
 8002eec:	e56d      	b.n	80029ca <UserInput+0x12a>
			SetBW((Bwidth)Narrow);  break;
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f7fd fdbc 	bl	8000a6c <SetBW>
 8002ef4:	e569      	b.n	80029ca <UserInput+0x12a>
			SetMode((Mode)LSB); break;
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	f7fd ff2a 	bl	8000d50 <SetMode>
 8002efc:	e565      	b.n	80029ca <UserInput+0x12a>
			SetAGC((Agctype)Fast);  break;
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7fd fe16 	bl	8000b30 <SetAGC>
 8002f04:	e561      	b.n	80029ca <UserInput+0x12a>
			SetMode((Mode)CW); break;
 8002f06:	2003      	movs	r0, #3
 8002f08:	f7fd ff22 	bl	8000d50 <SetMode>
 8002f0c:	e55d      	b.n	80029ca <UserInput+0x12a>
			SetMode((Mode)AM); break;
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f7fd ff1e 	bl	8000d50 <SetMode>
 8002f14:	e559      	b.n	80029ca <UserInput+0x12a>
			SetFstep(9); break;
 8002f16:	2009      	movs	r0, #9
 8002f18:	f7fd ff52 	bl	8000dc0 <SetFstep>
 8002f1c:	e555      	b.n	80029ca <UserInput+0x12a>
			SetFstep(0); break;
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f7fd ff4e 	bl	8000dc0 <SetFstep>
 8002f24:	e551      	b.n	80029ca <UserInput+0x12a>
			SetFstep(1); break;
 8002f26:	2001      	movs	r0, #1
 8002f28:	f7fd ff4a 	bl	8000dc0 <SetFstep>
 8002f2c:	e54d      	b.n	80029ca <UserInput+0x12a>
			SetFstep(2);  break;
 8002f2e:	2002      	movs	r0, #2
 8002f30:	f7fd ff46 	bl	8000dc0 <SetFstep>
 8002f34:	e549      	b.n	80029ca <UserInput+0x12a>
			SetFstep(3);  break;
 8002f36:	2003      	movs	r0, #3
 8002f38:	f7fd ff42 	bl	8000dc0 <SetFstep>
 8002f3c:	e545      	b.n	80029ca <UserInput+0x12a>
			SetFstep(4);  break;
 8002f3e:	2004      	movs	r0, #4
 8002f40:	f7fd ff3e 	bl	8000dc0 <SetFstep>
 8002f44:	e541      	b.n	80029ca <UserInput+0x12a>
			SetFstep(5);  break;
 8002f46:	2005      	movs	r0, #5
 8002f48:	f7fd ff3a 	bl	8000dc0 <SetFstep>
 8002f4c:	e53d      	b.n	80029ca <UserInput+0x12a>
			FplusClicked(1); break;
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f7fd ff58 	bl	8000e04 <FplusClicked>
 8002f54:	e539      	b.n	80029ca <UserInput+0x12a>
			FminusClicked(1); break;
 8002f56:	2001      	movs	r0, #1
 8002f58:	f7fd ffb2 	bl	8000ec0 <FminusClicked>
 8002f5c:	e535      	b.n	80029ca <UserInput+0x12a>
 8002f5e:	bf00      	nop
 8002f60:	00000000 	.word	0x00000000
 8002f64:	40590000 	.word	0x40590000
 8002f68:	08018220 	.word	0x08018220
 8002f6c:	24000a4c 	.word	0x24000a4c
 8002f70:	2400cee8 	.word	0x2400cee8
 8002f74:	0801822c 	.word	0x0801822c
 8002f78:	24000f78 	.word	0x24000f78
 8002f7c:	24007ae4 	.word	0x24007ae4
 8002f80:	24003084 	.word	0x24003084
 8002f84:	08018238 	.word	0x08018238
 8002f88:	08018244 	.word	0x08018244
 8002f8c:	58020800 	.word	0x58020800
 8002f90:	58020c00 	.word	0x58020c00
 8002f94:	24008d80 	.word	0x24008d80
			volume -= 0.1;
 8002f98:	4b17      	ldr	r3, [pc, #92]	; (8002ff8 <UserInput+0x758>)
			if (volume < 0)
 8002f9a:	2200      	movs	r2, #0
			volume -= 0.1;
 8002f9c:	ed93 7a00 	vldr	s14, [r3]
 8002fa0:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8002ff0 <UserInput+0x750>
 8002fa4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002fa8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002fac:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (volume < 0)
 8002fb0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			volume -= 0.1;
 8002fb8:	bf54      	ite	pl
 8002fba:	ed83 7a00 	vstrpl	s14, [r3]
				volume = 0;
 8002fbe:	601a      	strmi	r2, [r3, #0]
 8002fc0:	e503      	b.n	80029ca <UserInput+0x12a>
			volume += 0.1;
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <UserInput+0x758>)
			if (volume > 1.0)
 8002fc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			volume += 0.1;
 8002fc8:	ed93 7a00 	vldr	s14, [r3]
 8002fcc:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8002ff0 <UserInput+0x750>
 8002fd0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002fd4:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002fd8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002fdc:	fec7 7ae6 	vminnm.f32	s15, s15, s13
 8002fe0:	edc3 7a00 	vstr	s15, [r3]
 8002fe4:	e4f1      	b.n	80029ca <UserInput+0x12a>
			SetTXPLL(LOfreq);
 8002fe6:	f7ff fbe1 	bl	80027ac <SetTXPLL>
			LastTXFreq = LOfreq;
 8002fea:	682b      	ldr	r3, [r5, #0]
 8002fec:	6023      	str	r3, [r4, #0]
 8002fee:	e4d4      	b.n	800299a <UserInput+0xfa>
 8002ff0:	9999999a 	.word	0x9999999a
 8002ff4:	3fb99999 	.word	0x3fb99999
 8002ff8:	24004918 	.word	0x24004918

08002ffc <TXSwitch>:
{
 8002ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffe:	2300      	movs	r3, #0
{
 8003000:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003002:	e9cd 3300 	strd	r3, r3, [sp]
 8003006:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800300a:	9304      	str	r3, [sp, #16]
	if (Status)
 800300c:	b348      	cbz	r0, 8003062 <TXSwitch+0x66>
		if (LastTXFreq != LOfreq)
 800300e:	4d21      	ldr	r5, [pc, #132]	; (8003094 <TXSwitch+0x98>)
 8003010:	4c21      	ldr	r4, [pc, #132]	; (8003098 <TXSwitch+0x9c>)
 8003012:	ed95 0a00 	vldr	s0, [r5]
 8003016:	edd4 7a00 	vldr	s15, [r4]
 800301a:	eef4 7a40 	vcmp.f32	s15, s0
 800301e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003022:	d119      	bne.n	8003058 <TXSwitch+0x5c>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003024:	2303      	movs	r3, #3
 8003026:	2200      	movs	r2, #0
 8003028:	f44f 7400 	mov.w	r4, #512	; 0x200
 800302c:	2502      	movs	r5, #2
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800302e:	2600      	movs	r6, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003030:	4669      	mov	r1, sp
 8003032:	481a      	ldr	r0, [pc, #104]	; (800309c <TXSwitch+0xa0>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003034:	9604      	str	r6, [sp, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003036:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800303a:	e9cd 4500 	strd	r4, r5, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800303e:	f003 ff97 	bl	8006f70 <HAL_GPIO_Init>
		RELAY_TX_ON;
 8003042:	2201      	movs	r2, #1
 8003044:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003048:	4815      	ldr	r0, [pc, #84]	; (80030a0 <TXSwitch+0xa4>)
 800304a:	f004 f8b5 	bl	80071b8 <HAL_GPIO_WritePin>
		TransmissionEnabled = 1;
 800304e:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <TXSwitch+0xa8>)
 8003050:	2201      	movs	r2, #1
 8003052:	701a      	strb	r2, [r3, #0]
}
 8003054:	b007      	add	sp, #28
 8003056:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SetTXPLL(LOfreq);
 8003058:	f7ff fba8 	bl	80027ac <SetTXPLL>
			LastTXFreq = LOfreq;
 800305c:	682b      	ldr	r3, [r5, #0]
 800305e:	6023      	str	r3, [r4, #0]
 8003060:	e7e0      	b.n	8003024 <TXSwitch+0x28>
 8003062:	4604      	mov	r4, r0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003064:	2300      	movs	r3, #0
 8003066:	2202      	movs	r2, #2
 8003068:	f44f 7600 	mov.w	r6, #512	; 0x200
 800306c:	2701      	movs	r7, #1
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800306e:	4669      	mov	r1, sp
 8003070:	480a      	ldr	r0, [pc, #40]	; (800309c <TXSwitch+0xa0>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003072:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003076:	e9cd 6700 	strd	r6, r7, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800307a:	f003 ff79 	bl	8006f70 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 800307e:	4622      	mov	r2, r4
 8003080:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003084:	4806      	ldr	r0, [pc, #24]	; (80030a0 <TXSwitch+0xa4>)
 8003086:	f004 f897 	bl	80071b8 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <TXSwitch+0xa8>)
 800308c:	701c      	strb	r4, [r3, #0]
}
 800308e:	b007      	add	sp, #28
 8003090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003092:	bf00      	nop
 8003094:	24009df4 	.word	0x24009df4
 8003098:	240006e8 	.word	0x240006e8
 800309c:	58020800 	.word	0x58020800
 80030a0:	58020c00 	.word	0x58020c00
 80030a4:	24008d80 	.word	0x24008d80

080030a8 <CarrierEnable>:


void CarrierEnable(uint8_t Status)
{
 80030a8:	b510      	push	{r4, lr}

	if (Status)
 80030aa:	b148      	cbz	r0, 80030c0 <CarrierEnable+0x18>
	{
		//TODO: Ramping
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80030ac:	2200      	movs	r2, #0
 80030ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030b2:	4808      	ldr	r0, [pc, #32]	; (80030d4 <CarrierEnable+0x2c>)
 80030b4:	f004 f880 	bl	80071b8 <HAL_GPIO_WritePin>
		TXCarrierEnabled = 1;
 80030b8:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <CarrierEnable+0x30>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
		TXCarrierEnabled = 0;

	}
}
 80030be:	bd10      	pop	{r4, pc}
 80030c0:	4604      	mov	r4, r0
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80030c2:	2201      	movs	r2, #1
 80030c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030c8:	4802      	ldr	r0, [pc, #8]	; (80030d4 <CarrierEnable+0x2c>)
 80030ca:	f004 f875 	bl	80071b8 <HAL_GPIO_WritePin>
		TXCarrierEnabled = 0;
 80030ce:	4b02      	ldr	r3, [pc, #8]	; (80030d8 <CarrierEnable+0x30>)
 80030d0:	701c      	strb	r4, [r3, #0]
}
 80030d2:	bd10      	pop	{r4, pc}
 80030d4:	58020c00 	.word	0x58020c00
 80030d8:	24007ae0 	.word	0x24007ae0

080030dc <Error_Handler>:
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 80030dc:	4e09      	ldr	r6, [pc, #36]	; (8003104 <Error_Handler+0x28>)
{
 80030de:	4d0a      	ldr	r5, [pc, #40]	; (8003108 <Error_Handler+0x2c>)
 80030e0:	4c0a      	ldr	r4, [pc, #40]	; (800310c <Error_Handler+0x30>)
 80030e2:	b508      	push	{r3, lr}
 80030e4:	6833      	ldr	r3, [r6, #0]
 80030e6:	fb05 f303 	mul.w	r3, r5, r3
 80030ea:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 80030ee:	d200      	bcs.n	80030f2 <Error_Handler+0x16>
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 80030f0:	e7fe      	b.n	80030f0 <Error_Handler+0x14>
			LED_switch();
 80030f2:	f7fd ff43 	bl	8000f7c <LED_switch>
 80030f6:	6833      	ldr	r3, [r6, #0]
 80030f8:	fb05 f303 	mul.w	r3, r5, r3
 80030fc:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 8003100:	d2f7      	bcs.n	80030f2 <Error_Handler+0x16>
 8003102:	e7f5      	b.n	80030f0 <Error_Handler+0x14>
 8003104:	24009df8 	.word	0x24009df8
 8003108:	c28f5c29 	.word	0xc28f5c29
 800310c:	051eb851 	.word	0x051eb851

08003110 <SystemClock_Config_For_OC>:
{
 8003110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003114:	b0cf      	sub	sp, #316	; 0x13c
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003116:	224c      	movs	r2, #76	; 0x4c
 8003118:	2100      	movs	r1, #0
 800311a:	a80a      	add	r0, sp, #40	; 0x28
 800311c:	f00b f860 	bl	800e1e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003120:	2220      	movs	r2, #32
 8003122:	2100      	movs	r1, #0
 8003124:	a802      	add	r0, sp, #8
 8003126:	f00b f85b 	bl	800e1e0 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800312a:	22bc      	movs	r2, #188	; 0xbc
 800312c:	2100      	movs	r1, #0
 800312e:	a81e      	add	r0, sp, #120	; 0x78
 8003130:	f00b f856 	bl	800e1e0 <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003134:	2002      	movs	r0, #2
 8003136:	f004 fe43 	bl	8007dc0 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800313a:	4b4c      	ldr	r3, [pc, #304]	; (800326c <SystemClock_Config_For_OC+0x15c>)
 800313c:	2200      	movs	r2, #0
 800313e:	494c      	ldr	r1, [pc, #304]	; (8003270 <SystemClock_Config_For_OC+0x160>)
 8003140:	9201      	str	r2, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003142:	461a      	mov	r2, r3
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003144:	6998      	ldr	r0, [r3, #24]
 8003146:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800314a:	6198      	str	r0, [r3, #24]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003152:	9301      	str	r3, [sp, #4]
 8003154:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800315c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003166:	6993      	ldr	r3, [r2, #24]
 8003168:	049b      	lsls	r3, r3, #18
 800316a:	d5fc      	bpl.n	8003166 <SystemClock_Config_For_OC+0x56>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800316c:	4841      	ldr	r0, [pc, #260]	; (8003274 <SystemClock_Config_For_OC+0x164>)
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800316e:	2202      	movs	r2, #2
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8003170:	2404      	movs	r4, #4
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003172:	2501      	movs	r5, #1
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003174:	6a83      	ldr	r3, [r0, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLN = 480;
 8003176:	f44f 7cf0 	mov.w	ip, #480	; 0x1e0
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800317a:	2100      	movs	r1, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800317c:	2621      	movs	r6, #33	; 0x21
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800317e:	f023 0303 	bic.w	r3, r3, #3
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8003182:	f44f 27a0 	mov.w	r7, #327680	; 0x50000
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003186:	4313      	orrs	r3, r2
 8003188:	6283      	str	r3, [r0, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 10;
 800318a:	230a      	movs	r3, #10
	RCC_OscInitStruct.PLL.PLLP = 2;
 800318c:	9217      	str	r2, [sp, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800318e:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.PLL.PLLR = 2;
 8003190:	9219      	str	r2, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLM = 10;
 8003192:	9315      	str	r3, [sp, #84]	; 0x54
	XTalFreq = 25000000;
 8003194:	4b38      	ldr	r3, [pc, #224]	; (8003278 <SystemClock_Config_For_OC+0x168>)
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003196:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 480;
 8003198:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800319c:	941a      	str	r4, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800319e:	9418      	str	r4, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031a0:	e9cd 2213 	strd	r2, r2, [sp, #76]	; 0x4c
	XTalFreq = 25000000;
 80031a4:	4a35      	ldr	r2, [pc, #212]	; (800327c <SystemClock_Config_For_OC+0x16c>)
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80031a6:	e9cd 111b 	strd	r1, r1, [sp, #108]	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80031aa:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
	XTalFreq = 25000000;
 80031ae:	601a      	str	r2, [r3, #0]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031b0:	f004 feb8 	bl	8007f24 <HAL_RCC_OscConfig>
 80031b4:	2800      	cmp	r0, #0
 80031b6:	d157      	bne.n	8003268 <SystemClock_Config_For_OC+0x158>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031b8:	263f      	movs	r6, #63	; 0x3f
 80031ba:	2703      	movs	r7, #3
 80031bc:	2200      	movs	r2, #0
 80031be:	2308      	movs	r3, #8
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80031c0:	4621      	mov	r1, r4
 80031c2:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031c4:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80031c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80031cc:	2640      	movs	r6, #64	; 0x40
 80031ce:	2340      	movs	r3, #64	; 0x40
 80031d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031d4:	2740      	movs	r7, #64	; 0x40
 80031d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80031da:	e9cd 6706 	strd	r6, r7, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80031de:	f005 fa93 	bl	8008708 <HAL_RCC_ClockConfig>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d13f      	bne.n	8003268 <SystemClock_Config_For_OC+0x158>
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80031e8:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80031ec:	932e      	str	r3, [sp, #184]	; 0xb8
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80031ee:	933b      	str	r3, [sp, #236]	; 0xec
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80031f0:	2318      	movs	r3, #24
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80031f2:	923f      	str	r2, [sp, #252]	; 0xfc
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80031f4:	2226      	movs	r2, #38	; 0x26
 80031f6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8003280 <SystemClock_Config_For_OC+0x170>
 80031fa:	f04f 0904 	mov.w	r9, #4
 80031fe:	2602      	movs	r6, #2
 8003200:	2702      	movs	r7, #2
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8003202:	f44f 6480 	mov.w	r4, #1024	; 0x400
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8003206:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800320a:	a81e      	add	r0, sp, #120	; 0x78
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 800320c:	9444      	str	r4, [sp, #272]	; 0x110
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800320e:	9146      	str	r1, [sp, #280]	; 0x118
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8003210:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8003214:	2280      	movs	r2, #128	; 0x80
 8003216:	2300      	movs	r3, #0
 8003218:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 800321c:	2296      	movs	r2, #150	; 0x96
 800321e:	2302      	movs	r3, #2
 8003220:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 8003224:	e9cd 6722 	strd	r6, r7, [sp, #136]	; 0x88
 8003228:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 800322c:	f04f 0800 	mov.w	r8, #0
 8003230:	f04f 0905 	mov.w	r9, #5
 8003234:	2608      	movs	r6, #8
 8003236:	2705      	movs	r7, #5
 8003238:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800323c:	2300      	movs	r3, #0
 800323e:	e9cd 8926 	strd	r8, r9, [sp, #152]	; 0x98
 8003242:	e9cd 672a 	strd	r6, r7, [sp, #168]	; 0xa8
 8003246:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800324a:	f005 fd4f 	bl	8008cec <HAL_RCCEx_PeriphCLKConfig>
 800324e:	b958      	cbnz	r0, 8003268 <SystemClock_Config_For_OC+0x158>
	HAL_PWREx_EnableUSBVoltageDetector();
 8003250:	f004 fddc 	bl	8007e0c <HAL_PWREx_EnableUSBVoltageDetector>
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_1);
 8003254:	4628      	mov	r0, r5
 8003256:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800325a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 800325e:	f005 f957 	bl	8008510 <HAL_RCC_MCOConfig>
}
 8003262:	b04f      	add	sp, #316	; 0x13c
 8003264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		Error_Handler();
 8003268:	f7ff ff38 	bl	80030dc <Error_Handler>
 800326c:	58024800 	.word	0x58024800
 8003270:	58000400 	.word	0x58000400
 8003274:	58024400 	.word	0x58024400
 8003278:	24008394 	.word	0x24008394
 800327c:	4bbebc20 	.word	0x4bbebc20
 8003280:	000c0042 	.word	0x000c0042

08003284 <MX_TIM6_Init_Custom_Rate>:
{
 8003284:	b510      	push	{r4, lr}
	htim6.Instance = TIM6;
 8003286:	4810      	ldr	r0, [pc, #64]	; (80032c8 <MX_TIM6_Init_Custom_Rate+0x44>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003288:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 800328a:	4c10      	ldr	r4, [pc, #64]	; (80032cc <MX_TIM6_Init_Custom_Rate+0x48>)
{
 800328c:	b084      	sub	sp, #16
	htim6.Init.Period = 8191; //was 8191
 800328e:	f641 71ff 	movw	r1, #8191	; 0x1fff
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003292:	2280      	movs	r2, #128	; 0x80
	htim6.Instance = TIM6;
 8003294:	6020      	str	r0, [r4, #0]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003296:	4620      	mov	r0, r4
	htim6.Init.Period = 8191; //was 8191
 8003298:	60e1      	str	r1, [r4, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800329a:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 800329c:	6063      	str	r3, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800329e:	9301      	str	r3, [sp, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032a0:	60a3      	str	r3, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80032a6:	f006 fe0f 	bl	8009ec8 <HAL_TIM_Base_Init>
 80032aa:	b950      	cbnz	r0, 80032c2 <MX_TIM6_Init_Custom_Rate+0x3e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80032ac:	4603      	mov	r3, r0
 80032ae:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80032b0:	a901      	add	r1, sp, #4
 80032b2:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032b4:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80032b6:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80032b8:	f007 f908 	bl	800a4cc <HAL_TIMEx_MasterConfigSynchronization>
 80032bc:	b908      	cbnz	r0, 80032c2 <MX_TIM6_Init_Custom_Rate+0x3e>
}
 80032be:	b004      	add	sp, #16
 80032c0:	bd10      	pop	{r4, pc}
		Error_Handler();
 80032c2:	f7ff ff0b 	bl	80030dc <Error_Handler>
 80032c6:	bf00      	nop
 80032c8:	40001000 	.word	0x40001000
 80032cc:	24008d84 	.word	0x24008d84

080032d0 <main>:
{
 80032d0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80032d4:	b0c1      	sub	sp, #260	; 0x104
	HAL_Init();
 80032d6:	f000 ff69 	bl	80041ac <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80032da:	4bcf      	ldr	r3, [pc, #828]	; (8003618 <main+0x348>)
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 80032e2:	d111      	bne.n	8003308 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 80032e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80032e8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80032ec:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80032f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80032f4:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80032fe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003300:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003304:	f3bf 8f6f 	isb	sy
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800330a:	4ec4      	ldr	r6, [pc, #784]	; (800361c <main+0x34c>)
	SystemClock_Config_For_OC();
 800330c:	f7ff ff00 	bl	8003110 <SystemClock_Config_For_OC>
	HAL_Delay(20);  //needed for USB setup. USB somentimes (and almost always oh an Android phone) does not initialize
 8003310:	2014      	movs	r0, #20
 8003312:	f000 ff8d 	bl	8004230 <HAL_Delay>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003316:	9438      	str	r4, [sp, #224]	; 0xe0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003318:	2701      	movs	r7, #1
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800331a:	f04f 0b08 	mov.w	fp, #8
	HAL_GPIO_WritePin(GPIOD, RXTX_Pin|TX_ENA_Pin, GPIO_PIN_RESET);
 800331e:	4622      	mov	r2, r4
 8003320:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003324:	48be      	ldr	r0, [pc, #760]	; (8003620 <main+0x350>)
	GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 8003326:	f44f 6840 	mov.w	r8, #3072	; 0xc00
 800332a:	f04f 0901 	mov.w	r9, #1
	hadc1.Instance = ADC1;
 800332e:	4dbd      	ldr	r5, [pc, #756]	; (8003624 <main+0x354>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8003330:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003334:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 8003338:	e9cd 4439 	strd	r4, r4, [sp, #228]	; 0xe4
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800333c:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8003340:	f043 0304 	orr.w	r3, r3, #4
 8003344:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8003348:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	9305      	str	r3, [sp, #20]
 8003352:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003354:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8003358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335c:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8003360:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8003364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003368:	9306      	str	r3, [sp, #24]
 800336a:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800336c:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8003370:	433b      	orrs	r3, r7
 8003372:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8003376:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800337a:	403b      	ands	r3, r7
 800337c:	9307      	str	r3, [sp, #28]
 800337e:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003380:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8003384:	f043 0302 	orr.w	r3, r3, #2
 8003388:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800338c:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	9308      	str	r3, [sp, #32]
 8003396:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003398:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800339c:	ea43 030b 	orr.w	r3, r3, fp
 80033a0:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 80033a4:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 80033a8:	ea03 030b 	and.w	r3, r3, fp
 80033ac:	9309      	str	r3, [sp, #36]	; 0x24
 80033ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOD, RXTX_Pin|TX_ENA_Pin, GPIO_PIN_RESET);
 80033b0:	f003 ff02 	bl	80071b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80033b4:	4622      	mov	r2, r4
 80033b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033ba:	489b      	ldr	r0, [pc, #620]	; (8003628 <main+0x358>)
 80033bc:	f003 fefc 	bl	80071b8 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = IN_SW01_Pin;
 80033c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033c4:	2300      	movs	r3, #0
	HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 80033c6:	a936      	add	r1, sp, #216	; 0xd8
 80033c8:	4898      	ldr	r0, [pc, #608]	; (800362c <main+0x35c>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ca:	9738      	str	r7, [sp, #224]	; 0xe0
	GPIO_InitStruct.Pin = IN_SW01_Pin;
 80033cc:	e9cd 2336 	strd	r2, r3, [sp, #216]	; 0xd8
	HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 80033d0:	f003 fdce 	bl	8006f70 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SwInt1_Pin;
 80033d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033d8:	4b95      	ldr	r3, [pc, #596]	; (8003630 <main+0x360>)
	HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 80033da:	a936      	add	r1, sp, #216	; 0xd8
 80033dc:	4893      	ldr	r0, [pc, #588]	; (800362c <main+0x35c>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033de:	9738      	str	r7, [sp, #224]	; 0xe0
	GPIO_InitStruct.Pin = SwInt1_Pin;
 80033e0:	e9cd 2336 	strd	r2, r3, [sp, #216]	; 0xd8
	HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 80033e4:	f003 fdc4 	bl	8006f70 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 80033e8:	2202      	movs	r2, #2
 80033ea:	2300      	movs	r3, #0
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ec:	a936      	add	r1, sp, #216	; 0xd8
 80033ee:	488c      	ldr	r0, [pc, #560]	; (8003620 <main+0x350>)
	GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 80033f0:	e9cd 8936 	strd	r8, r9, [sp, #216]	; 0xd8
 80033f4:	e9cd 2338 	strd	r2, r3, [sp, #224]	; 0xe0
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033f8:	f44f 7800 	mov.w	r8, #512	; 0x200
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033fc:	f003 fdb8 	bl	8006f70 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003400:	f04f 0902 	mov.w	r9, #2
 8003404:	2200      	movs	r2, #0
 8003406:	2303      	movs	r3, #3
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003408:	a936      	add	r1, sp, #216	; 0xd8
 800340a:	4888      	ldr	r0, [pc, #544]	; (800362c <main+0x35c>)
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800340c:	943a      	str	r4, [sp, #232]	; 0xe8
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800340e:	e9cd 8936 	strd	r8, r9, [sp, #216]	; 0xd8
 8003412:	e9cd 2338 	strd	r2, r3, [sp, #224]	; 0xe0
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003416:	f44f 7880 	mov.w	r8, #256	; 0x100
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800341a:	f003 fda9 	bl	8006f70 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800341e:	f04f 0901 	mov.w	r9, #1
 8003422:	2300      	movs	r3, #0
 8003424:	2200      	movs	r2, #0
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003426:	a936      	add	r1, sp, #216	; 0xd8
 8003428:	487f      	ldr	r0, [pc, #508]	; (8003628 <main+0x358>)
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800342a:	e9cd 2338 	strd	r2, r3, [sp, #224]	; 0xe0
 800342e:	e9cd 8936 	strd	r8, r9, [sp, #216]	; 0xd8
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003432:	f003 fd9d 	bl	8006f70 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8003436:	4622      	mov	r2, r4
 8003438:	2104      	movs	r1, #4
 800343a:	2028      	movs	r0, #40	; 0x28
 800343c:	f002 f878 	bl	8005530 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003440:	2028      	movs	r0, #40	; 0x28
 8003442:	f002 f8af 	bl	80055a4 <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003446:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800344a:	4622      	mov	r2, r4
 800344c:	4621      	mov	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 800344e:	433b      	orrs	r3, r7
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003450:	200b      	movs	r0, #11
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003452:	f04f 0904 	mov.w	r9, #4
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003456:	f44f 5880 	mov.w	r8, #4096	; 0x1000
	__HAL_RCC_DMA1_CLK_ENABLE();
 800345a:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
 800345e:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8003462:	f44f 7680 	mov.w	r6, #256	; 0x100
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003466:	403b      	ands	r3, r7
 8003468:	9304      	str	r3, [sp, #16]
 800346a:	9b04      	ldr	r3, [sp, #16]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800346c:	f002 f860 	bl	8005530 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003470:	200b      	movs	r0, #11
 8003472:	f002 f897 	bl	80055a4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8003476:	4622      	mov	r2, r4
 8003478:	2102      	movs	r1, #2
 800347a:	200c      	movs	r0, #12
 800347c:	f002 f858 	bl	8005530 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003480:	200c      	movs	r0, #12
 8003482:	f002 f88f 	bl	80055a4 <HAL_NVIC_EnableIRQ>
	hadc1.Instance = ADC1;
 8003486:	4a6b      	ldr	r2, [pc, #428]	; (8003634 <main+0x364>)
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8003488:	2303      	movs	r3, #3
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800348a:	4628      	mov	r0, r5
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800348c:	82ae      	strh	r6, [r5, #20]
	ADC_MultiModeTypeDef multimode = {0};
 800348e:	940a      	str	r4, [sp, #40]	; 0x28
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8003490:	9416      	str	r4, [sp, #88]	; 0x58
	ADC_ChannelConfTypeDef sConfig = {0};
 8003492:	9424      	str	r4, [sp, #144]	; 0x90
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8003494:	941b      	str	r4, [sp, #108]	; 0x6c
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003496:	60ec      	str	r4, [r5, #12]
	hadc1.Init.NbrOfConversion = 1;
 8003498:	61af      	str	r7, [r5, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800349a:	772c      	strb	r4, [r5, #28]
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800349c:	636c      	str	r4, [r5, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 800349e:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
	hadc1.Instance = ADC1;
 80034a2:	602a      	str	r2, [r5, #0]
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80034a4:	62eb      	str	r3, [r5, #44]	; 0x2c
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80034a6:	f8c5 9010 	str.w	r9, [r5, #16]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80034aa:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
	ADC_MultiModeTypeDef multimode = {0};
 80034ae:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80034b2:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
 80034b6:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
	ADC_ChannelConfTypeDef sConfig = {0};
 80034ba:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
 80034be:	e9cd 4427 	strd	r4, r4, [sp, #156]	; 0x9c
 80034c2:	e9cd 4429 	strd	r4, r4, [sp, #164]	; 0xa4
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80034c6:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80034ca:	e9c5 ab01 	strd	sl, fp, [r5, #4]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80034ce:	f001 fdcd 	bl	800506c <HAL_ADC_Init>
 80034d2:	2800      	cmp	r0, #0
 80034d4:	f040 8217 	bne.w	8003906 <main+0x636>
	multimode.Mode = ADC_DUALMODE_INTERL;
 80034d8:	2207      	movs	r2, #7
 80034da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80034de:	a90a      	add	r1, sp, #40	; 0x28
 80034e0:	4628      	mov	r0, r5
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 80034e2:	960c      	str	r6, [sp, #48]	; 0x30
	multimode.Mode = ADC_DUALMODE_INTERL;
 80034e4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80034e8:	f001 ffa6 	bl	8005438 <HAL_ADCEx_MultiModeConfigChannel>
 80034ec:	2800      	cmp	r0, #0
 80034ee:	f040 820a 	bne.w	8003906 <main+0x636>
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80034f2:	4a51      	ldr	r2, [pc, #324]	; (8003638 <main+0x368>)
 80034f4:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80034f8:	4c50      	ldr	r4, [pc, #320]	; (800363c <main+0x36c>)
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80034fa:	a916      	add	r1, sp, #88	; 0x58
 80034fc:	4628      	mov	r0, r5
	AnalogWDGConfig.ITMode = ENABLE;
 80034fe:	f88d 7064 	strb.w	r7, [sp, #100]	; 0x64
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8003502:	9418      	str	r4, [sp, #96]	; 0x60
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8003504:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	AnalogWDGConfig.HighThreshold = 4094;
 8003508:	2301      	movs	r3, #1
 800350a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800350e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8003512:	f001 fa89 	bl	8004a28 <HAL_ADC_AnalogWDGConfig>
 8003516:	4603      	mov	r3, r0
 8003518:	2800      	cmp	r0, #0
 800351a:	f040 81f4 	bne.w	8003906 <main+0x636>
	sConfig.Channel = ADC_CHANNEL_5;
 800351e:	2200      	movs	r2, #0
	sConfig.OffsetSignedSaturation = DISABLE;
 8003520:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
	sConfig.Channel = ADC_CHANNEL_5;
 8003524:	f240 73ff 	movw	r3, #2047	; 0x7ff
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003528:	a924      	add	r1, sp, #144	; 0x90
 800352a:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_5;
 800352c:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8003530:	a337      	add	r3, pc, #220	; (adr r3, 8003610 <main+0x340>)
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 800353a:	2300      	movs	r3, #0
 800353c:	2204      	movs	r2, #4
 800353e:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003542:	f001 f841 	bl	80045c8 <HAL_ADC_ConfigChannel>
 8003546:	4603      	mov	r3, r0
 8003548:	2800      	cmp	r0, #0
 800354a:	f040 81dc 	bne.w	8003906 <main+0x636>
	hadc2.Instance = ADC2;
 800354e:	4d3c      	ldr	r5, [pc, #240]	; (8003640 <main+0x370>)
 8003550:	4a3c      	ldr	r2, [pc, #240]	; (8003644 <main+0x374>)
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8003552:	9010      	str	r0, [sp, #64]	; 0x40
	ADC_ChannelConfTypeDef sConfig = {0};
 8003554:	901c      	str	r0, [sp, #112]	; 0x70
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003556:	4628      	mov	r0, r5
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8003558:	82ae      	strh	r6, [r5, #20]
	hadc2.Init.NbrOfConversion = 1;
 800355a:	61af      	str	r7, [r5, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800355c:	772b      	strb	r3, [r5, #28]
	hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800355e:	636b      	str	r3, [r5, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 8003560:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	hadc2.Instance = ADC2;
 8003564:	602a      	str	r2, [r5, #0]
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8003566:	9315      	str	r3, [sp, #84]	; 0x54
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003568:	e9c5 ab01 	strd	sl, fp, [r5, #4]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800356c:	e9c5 3903 	strd	r3, r9, [r5, #12]
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003570:	e9c5 380b 	strd	r3, r8, [r5, #44]	; 0x2c
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8003574:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8003578:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
	ADC_ChannelConfTypeDef sConfig = {0};
 800357c:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
 8003580:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 8003584:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003588:	f001 fd70 	bl	800506c <HAL_ADC_Init>
 800358c:	2800      	cmp	r0, #0
 800358e:	f040 81ba 	bne.w	8003906 <main+0x636>
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8003592:	4a29      	ldr	r2, [pc, #164]	; (8003638 <main+0x368>)
 8003594:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
	if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8003598:	a910      	add	r1, sp, #64	; 0x40
 800359a:	4628      	mov	r0, r5
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 800359c:	9412      	str	r4, [sp, #72]	; 0x48
	AnalogWDGConfig.ITMode = ENABLE;
 800359e:	f88d 704c 	strb.w	r7, [sp, #76]	; 0x4c
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80035a2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	AnalogWDGConfig.HighThreshold = 4094;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80035ac:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80035b0:	f001 fa3a 	bl	8004a28 <HAL_ADC_AnalogWDGConfig>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2800      	cmp	r0, #0
 80035b8:	f040 81a5 	bne.w	8003906 <main+0x636>
	sConfig.OffsetSignedSaturation = DISABLE;
 80035bc:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
	sConfig.Channel = ADC_CHANNEL_5;
 80035c0:	2200      	movs	r2, #0
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035c2:	a91c      	add	r1, sp, #112	; 0x70
 80035c4:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_5;
 80035c6:	a412      	add	r4, pc, #72	; (adr r4, 8003610 <main+0x340>)
 80035c8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80035cc:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
 80035d0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80035d4:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 80035d8:	2204      	movs	r2, #4
 80035da:	2300      	movs	r3, #0
 80035dc:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035e0:	f000 fff2 	bl	80045c8 <HAL_ADC_ConfigChannel>
 80035e4:	4601      	mov	r1, r0
 80035e6:	2800      	cmp	r0, #0
 80035e8:	f040 818d 	bne.w	8003906 <main+0x636>
	DAC_ChannelConfTypeDef sConfig = {0};
 80035ec:	2224      	movs	r2, #36	; 0x24
	hdac1.Instance = DAC1;
 80035ee:	4c16      	ldr	r4, [pc, #88]	; (8003648 <main+0x378>)
	DAC_ChannelConfTypeDef sConfig = {0};
 80035f0:	a836      	add	r0, sp, #216	; 0xd8
 80035f2:	f00a fdf5 	bl	800e1e0 <memset>
	hdac1.Instance = DAC1;
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <main+0x37c>)
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80035f8:	4620      	mov	r0, r4
	hdac1.Instance = DAC1;
 80035fa:	6023      	str	r3, [r4, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80035fc:	f001 fff8 	bl	80055f0 <HAL_DAC_Init>
 8003600:	4602      	mov	r2, r0
 8003602:	2800      	cmp	r0, #0
 8003604:	f040 817f 	bne.w	8003906 <main+0x636>
 8003608:	e022      	b.n	8003650 <main+0x380>
 800360a:	bf00      	nop
 800360c:	f3af 8000 	nop.w
 8003610:	14f00020 	.word	0x14f00020
 8003614:	00000006 	.word	0x00000006
 8003618:	e000ed00 	.word	0xe000ed00
 800361c:	58024400 	.word	0x58024400
 8003620:	58020c00 	.word	0x58020c00
 8003624:	24007ae4 	.word	0x24007ae4
 8003628:	58020000 	.word	0x58020000
 800362c:	58020800 	.word	0x58020800
 8003630:	11110000 	.word	0x11110000
 8003634:	40022000 	.word	0x40022000
 8003638:	7dc00000 	.word	0x7dc00000
 800363c:	14f00020 	.word	0x14f00020
 8003640:	24003084 	.word	0x24003084
 8003644:	40022100 	.word	0x40022100
 8003648:	24002fe0 	.word	0x24002fe0
 800364c:	40007400 	.word	0x40007400
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003650:	2000      	movs	r0, #0
 8003652:	2116      	movs	r1, #22
 8003654:	2600      	movs	r6, #0
 8003656:	2701      	movs	r7, #1
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003658:	923a      	str	r2, [sp, #232]	; 0xe8
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800365a:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800365e:	a936      	add	r1, sp, #216	; 0xd8
 8003660:	4620      	mov	r0, r4
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003662:	e9cd 6738 	strd	r6, r7, [sp, #224]	; 0xe0
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003666:	f002 f8ff 	bl	8005868 <HAL_DAC_ConfigChannel>
 800366a:	4603      	mov	r3, r0
 800366c:	2800      	cmp	r0, #0
 800366e:	f040 814a 	bne.w	8003906 <main+0x636>
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003672:	a936      	add	r1, sp, #216	; 0xd8
 8003674:	4620      	mov	r0, r4
 8003676:	2210      	movs	r2, #16
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003678:	9337      	str	r3, [sp, #220]	; 0xdc
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800367a:	f002 f8f5 	bl	8005868 <HAL_DAC_ConfigChannel>
 800367e:	2800      	cmp	r0, #0
 8003680:	f040 8141 	bne.w	8003906 <main+0x636>
	hlptim2.Instance = LPTIM2;
 8003684:	48b3      	ldr	r0, [pc, #716]	; (8003954 <main+0x684>)
	hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8003686:	2300      	movs	r3, #0
	hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8003688:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
	hlptim2.Instance = LPTIM2;
 800368c:	49b2      	ldr	r1, [pc, #712]	; (8003958 <main+0x688>)
	hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800368e:	f64f 76ff 	movw	r6, #65535	; 0xffff
	hlptim2.Instance = LPTIM2;
 8003692:	6001      	str	r1, [r0, #0]
	hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8003694:	6282      	str	r2, [r0, #40]	; 0x28
	hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8003696:	6146      	str	r6, [r0, #20]
	hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8003698:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 800369c:	e9c0 3303 	strd	r3, r3, [r0, #12]
	hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80036a0:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80036a4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
	if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80036a8:	f003 fd98 	bl	80071dc <HAL_LPTIM_Init>
 80036ac:	4605      	mov	r5, r0
 80036ae:	2800      	cmp	r0, #0
 80036b0:	f040 8129 	bne.w	8003906 <main+0x636>
	huart3.Instance = USART3;
 80036b4:	4ca9      	ldr	r4, [pc, #676]	; (800395c <main+0x68c>)
	MX_TIM6_Init();
 80036b6:	f7ff fde5 	bl	8003284 <MX_TIM6_Init_Custom_Rate>
	huart3.Instance = USART3;
 80036ba:	49a9      	ldr	r1, [pc, #676]	; (8003960 <main+0x690>)
	huart3.Init.BaudRate = 115200;
 80036bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart3.Init.Mode = UART_MODE_TX_RX;
 80036c0:	230c      	movs	r3, #12
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80036c2:	4620      	mov	r0, r4
	huart3.Init.Parity = UART_PARITY_NONE;
 80036c4:	6125      	str	r5, [r4, #16]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036c6:	62a5      	str	r5, [r4, #40]	; 0x28
	huart3.Init.Mode = UART_MODE_TX_RX;
 80036c8:	6163      	str	r3, [r4, #20]
	huart3.Init.BaudRate = 115200;
 80036ca:	e9c4 1200 	strd	r1, r2, [r4]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80036ce:	e9c4 5502 	strd	r5, r5, [r4, #8]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80036d2:	e9c4 5506 	strd	r5, r5, [r4, #24]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036d6:	e9c4 5508 	strd	r5, r5, [r4, #32]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80036da:	f007 f981 	bl	800a9e0 <HAL_UART_Init>
 80036de:	4601      	mov	r1, r0
 80036e0:	2800      	cmp	r0, #0
 80036e2:	f040 8110 	bne.w	8003906 <main+0x636>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036e6:	4620      	mov	r0, r4
 80036e8:	f007 fc7e 	bl	800afe8 <HAL_UARTEx_SetTxFifoThreshold>
 80036ec:	4601      	mov	r1, r0
 80036ee:	2800      	cmp	r0, #0
 80036f0:	f040 8109 	bne.w	8003906 <main+0x636>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036f4:	4620      	mov	r0, r4
 80036f6:	f007 fcb5 	bl	800b064 <HAL_UARTEx_SetRxFifoThreshold>
 80036fa:	2800      	cmp	r0, #0
 80036fc:	f040 8103 	bne.w	8003906 <main+0x636>
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003700:	4620      	mov	r0, r4
 8003702:	f007 fc53 	bl	800afac <HAL_UARTEx_DisableFifoMode>
 8003706:	4604      	mov	r4, r0
 8003708:	2800      	cmp	r0, #0
 800370a:	f040 80fc 	bne.w	8003906 <main+0x636>
	htim4.Instance = TIM4;
 800370e:	4d95      	ldr	r5, [pc, #596]	; (8003964 <main+0x694>)
	MX_USB_DEVICE_Init();
 8003710:	f009 f90a 	bl	800c928 <MX_USB_DEVICE_Init>
	htim4.Instance = TIM4;
 8003714:	4994      	ldr	r1, [pc, #592]	; (8003968 <main+0x698>)
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003716:	2300      	movs	r3, #0
 8003718:	2201      	movs	r2, #1
	htim4.Init.Period = 65535;
 800371a:	60ee      	str	r6, [r5, #12]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800371c:	2700      	movs	r7, #0
 800371e:	2600      	movs	r6, #0
	htim4.Instance = TIM4;
 8003720:	6029      	str	r1, [r5, #0]
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003722:	4628      	mov	r0, r5
 8003724:	a92c      	add	r1, sp, #176	; 0xb0
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003726:	940d      	str	r4, [sp, #52]	; 0x34
	sConfig.IC2Filter = 0;
 8003728:	9434      	str	r4, [sp, #208]	; 0xd0
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800372a:	612c      	str	r4, [r5, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800372c:	61ac      	str	r4, [r5, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800372e:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
 8003732:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
 8003736:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800373a:	e9c5 4401 	strd	r4, r4, [r5, #4]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800373e:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003742:	e9cd 6730 	strd	r6, r7, [sp, #192]	; 0xc0
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003746:	f006 fcbf 	bl	800a0c8 <HAL_TIM_Encoder_Init>
 800374a:	4603      	mov	r3, r0
 800374c:	2800      	cmp	r0, #0
 800374e:	f040 80da 	bne.w	8003906 <main+0x636>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003752:	a90d      	add	r1, sp, #52	; 0x34
 8003754:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003756:	930d      	str	r3, [sp, #52]	; 0x34
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003758:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800375a:	f006 feb7 	bl	800a4cc <HAL_TIMEx_MasterConfigSynchronization>
 800375e:	2800      	cmp	r0, #0
 8003760:	f040 80d1 	bne.w	8003906 <main+0x636>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003764:	4981      	ldr	r1, [pc, #516]	; (800396c <main+0x69c>)
 8003766:	694b      	ldr	r3, [r1, #20]
 8003768:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800376c:	d124      	bne.n	80037b8 <main+0x4e8>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800376e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003772:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003776:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800377a:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800377e:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003782:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8003786:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003788:	ea04 0006 	and.w	r0, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800378c:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800378e:	ea40 7283 	orr.w	r2, r0, r3, lsl #30
      } while (ways-- != 0U);
 8003792:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003794:	f8c1 2260 	str.w	r2, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	d1f8      	bne.n	800378e <main+0x4be>
    } while(sets-- != 0U);
 800379c:	3c20      	subs	r4, #32
 800379e:	f114 0f20 	cmn.w	r4, #32
 80037a2:	d1f1      	bne.n	8003788 <main+0x4b8>
 80037a4:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80037a8:	694b      	ldr	r3, [r1, #20]
 80037aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ae:	614b      	str	r3, [r1, #20]
 80037b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80037b4:	f3bf 8f6f 	isb	sy
	MX_TIM6_Init_Custom_Rate();
 80037b8:	f7ff fd64 	bl	8003284 <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 80037bc:	2100      	movs	r1, #0
 80037be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80037c2:	486b      	ldr	r0, [pc, #428]	; (8003970 <main+0x6a0>)
 80037c4:	f001 fd5e 	bl	8005284 <HAL_ADCEx_Calibration_Start>
 80037c8:	4601      	mov	r1, r0
 80037ca:	2800      	cmp	r0, #0
 80037cc:	f040 809b 	bne.w	8003906 <main+0x636>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 80037d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80037d4:	4867      	ldr	r0, [pc, #412]	; (8003974 <main+0x6a4>)
 80037d6:	f001 fd55 	bl	8005284 <HAL_ADCEx_Calibration_Start>
 80037da:	4604      	mov	r4, r0
 80037dc:	2800      	cmp	r0, #0
 80037de:	f040 8092 	bne.w	8003906 <main+0x636>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80037e2:	4601      	mov	r1, r0
 80037e4:	485f      	ldr	r0, [pc, #380]	; (8003964 <main+0x694>)
 80037e6:	f006 fd55 	bl	800a294 <HAL_TIM_Encoder_Start>
	volume= 0.1;
 80037ea:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8003a18 <main+0x748>
 80037ee:	4b62      	ldr	r3, [pc, #392]	; (8003978 <main+0x6a8>)
	SetFstep(2);
 80037f0:	2002      	movs	r0, #2
	AMindex  = LSBindex = 1;
 80037f2:	2501      	movs	r5, #1
 80037f4:	4e61      	ldr	r6, [pc, #388]	; (800397c <main+0x6ac>)
	volume= 0.1;
 80037f6:	f8c3 9000 	str.w	r9, [r3]
	SetFstep(2);
 80037fa:	f7fd fae1 	bl	8000dc0 <SetFstep>
	AMindex  = LSBindex = 1;
 80037fe:	4b60      	ldr	r3, [pc, #384]	; (8003980 <main+0x6b0>)
	bw[AM]   = bw[LSB]  = Wide;
 8003800:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
	AMindex  = LSBindex = 1;
 8003804:	8035      	strh	r5, [r6, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8003806:	f44f 6100 	mov.w	r1, #2048	; 0x800
	AMindex  = LSBindex = 1;
 800380a:	801d      	strh	r5, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800380c:	462a      	mov	r2, r5
	USBindex = CWindex  = 1;
 800380e:	4b5d      	ldr	r3, [pc, #372]	; (8003984 <main+0x6b4>)
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8003810:	460f      	mov	r7, r1
	USBindex = CWindex  = 1;
 8003812:	4e5d      	ldr	r6, [pc, #372]	; (8003988 <main+0x6b8>)
 8003814:	801d      	strh	r5, [r3, #0]
 8003816:	8035      	strh	r5, [r6, #0]
	cwpitch = CWPITCH;
 8003818:	4b5c      	ldr	r3, [pc, #368]	; (800398c <main+0x6bc>)
 800381a:	4e5d      	ldr	r6, [pc, #372]	; (8003990 <main+0x6c0>)
	SamplingRate = ((150000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 800381c:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8003a1c <main+0x74c>
	cwpitch = CWPITCH;
 8003820:	601e      	str	r6, [r3, #0]
	os_time = 0;
 8003822:	4e5c      	ldr	r6, [pc, #368]	; (8003994 <main+0x6c4>)
	meanavg = 0.f;
 8003824:	4b5c      	ldr	r3, [pc, #368]	; (8003998 <main+0x6c8>)
	os_time = 0;
 8003826:	6034      	str	r4, [r6, #0]
	meanavg = 0.f;
 8003828:	2600      	movs	r6, #0
 800382a:	601e      	str	r6, [r3, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 800382c:	4b5b      	ldr	r3, [pc, #364]	; (800399c <main+0x6cc>)
 800382e:	4e5c      	ldr	r6, [pc, #368]	; (80039a0 <main+0x6d0>)
 8003830:	601e      	str	r6, [r3, #0]
	Muted   = false;
 8003832:	4e5c      	ldr	r6, [pc, #368]	; (80039a4 <main+0x6d4>)
	bw[AM]   = bw[LSB]  = Wide;
 8003834:	4b5c      	ldr	r3, [pc, #368]	; (80039a8 <main+0x6d8>)
	Muted   = false;
 8003836:	7034      	strb	r4, [r6, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8003838:	6018      	str	r0, [r3, #0]
	agc[AM]  = agc[LSB] = Slow;
 800383a:	4e5c      	ldr	r6, [pc, #368]	; (80039ac <main+0x6dc>)
 800383c:	485c      	ldr	r0, [pc, #368]	; (80039b0 <main+0x6e0>)
	AGC_decay[Fast] = 0.9995f;
 800383e:	4b5d      	ldr	r3, [pc, #372]	; (80039b4 <main+0x6e4>)
	agc[AM]  = agc[LSB] = Slow;
 8003840:	6006      	str	r6, [r0, #0]
	AGC_decay[Fast] = 0.9995f;
 8003842:	4e5d      	ldr	r6, [pc, #372]	; (80039b8 <main+0x6e8>)
	AGC_decay[Slow] = 0.99995f;
 8003844:	485d      	ldr	r0, [pc, #372]	; (80039bc <main+0x6ec>)
	AGC_decay[Fast] = 0.9995f;
 8003846:	601e      	str	r6, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 8003848:	6058      	str	r0, [r3, #4]
	Hangcount[Fast] = 2;
 800384a:	4e5d      	ldr	r6, [pc, #372]	; (80039c0 <main+0x6f0>)
 800384c:	4b5d      	ldr	r3, [pc, #372]	; (80039c4 <main+0x6f4>)
	AgcThreshold    = 1.92e-4f;
 800384e:	485e      	ldr	r0, [pc, #376]	; (80039c8 <main+0x6f8>)
	Hangcount[Fast] = 2;
 8003850:	601e      	str	r6, [r3, #0]
	AgcThreshold    = 1.92e-4f;
 8003852:	4e5e      	ldr	r6, [pc, #376]	; (80039cc <main+0x6fc>)
	SamplingRate = ((150000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8003854:	4b5e      	ldr	r3, [pc, #376]	; (80039d0 <main+0x700>)
	AgcThreshold    = 1.92e-4f;
 8003856:	6006      	str	r6, [r0, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8003858:	485e      	ldr	r0, [pc, #376]	; (80039d4 <main+0x704>)
	SamplingRate = ((150000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 800385a:	f8c8 3000 	str.w	r3, [r8]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800385e:	f003 fcab 	bl	80071b8 <HAL_GPIO_WritePin>
		TXCarrierEnabled = 0;
 8003862:	4b5d      	ldr	r3, [pc, #372]	; (80039d8 <main+0x708>)
	TXSwitch(0);
 8003864:	4620      	mov	r0, r4
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8003866:	4e5d      	ldr	r6, [pc, #372]	; (80039dc <main+0x70c>)
		TXCarrierEnabled = 0;
 8003868:	701c      	strb	r4, [r3, #0]
	TXSwitch(0);
 800386a:	f7ff fbc7 	bl	8002ffc <TXSwitch>
	__HAL_RCC_PLL2_DISABLE();
 800386e:	4b5c      	ldr	r3, [pc, #368]	; (80039e0 <main+0x710>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8003870:	221a      	movs	r2, #26
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8003872:	485c      	ldr	r0, [pc, #368]	; (80039e4 <main+0x714>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8003874:	9203      	str	r2, [sp, #12]
	__HAL_RCC_PLL2_DISABLE();
 8003876:	681a      	ldr	r2, [r3, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8003878:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80039e8 <main+0x718>
	__HAL_RCC_PLL2_DISABLE();
 800387c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8003880:	edd8 7a00 	vldr	s15, [r8]
	CWThreshold = 0.1;
 8003884:	4959      	ldr	r1, [pc, #356]	; (80039ec <main+0x71c>)
	__HAL_RCC_PLL2_DISABLE();
 8003886:	601a      	str	r2, [r3, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8003888:	ee67 7a87 	vmul.f32	s15, s15, s14
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 800388c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 800388e:	4c58      	ldr	r4, [pc, #352]	; (80039f0 <main+0x720>)
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8003890:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8003894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003898:	629a      	str	r2, [r3, #40]	; 0x28
 800389a:	9a03      	ldr	r2, [sp, #12]
 800389c:	3a01      	subs	r2, #1
 800389e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038a2:	4310      	orrs	r0, r2
 80038a4:	6398      	str	r0, [r3, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80038ac:	601a      	str	r2, [r3, #0]
	CWThreshold = 0.1;
 80038ae:	f8c1 9000 	str.w	r9, [r1]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 80038b2:	edc4 7a00 	vstr	s15, [r4]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 80038b6:	f7fe fb7f 	bl	8001fb8 <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 80038ba:	4b4e      	ldr	r3, [pc, #312]	; (80039f4 <main+0x724>)
 80038bc:	2204      	movs	r2, #4
 80038be:	2140      	movs	r1, #64	; 0x40
 80038c0:	484d      	ldr	r0, [pc, #308]	; (80039f8 <main+0x728>)
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	9701      	str	r7, [sp, #4]
 80038c6:	4b4d      	ldr	r3, [pc, #308]	; (80039fc <main+0x72c>)
 80038c8:	f009 feee 	bl	800d6a8 <arm_fir_decimate_init_f32>
 80038cc:	7030      	strb	r0, [r6, #0]
	while(arc != ARM_MATH_SUCCESS)
 80038ce:	b100      	cbz	r0, 80038d2 <main+0x602>
 80038d0:	e7fe      	b.n	80038d0 <main+0x600>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 80038d2:	4b4b      	ldr	r3, [pc, #300]	; (8003a00 <main+0x730>)
 80038d4:	2204      	movs	r2, #4
 80038d6:	2140      	movs	r1, #64	; 0x40
 80038d8:	484a      	ldr	r0, [pc, #296]	; (8003a04 <main+0x734>)
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	9701      	str	r7, [sp, #4]
 80038de:	4b47      	ldr	r3, [pc, #284]	; (80039fc <main+0x72c>)
 80038e0:	f009 fee2 	bl	800d6a8 <arm_fir_decimate_init_f32>
 80038e4:	7030      	strb	r0, [r6, #0]
	while(arc != ARM_MATH_SUCCESS)
 80038e6:	b980      	cbnz	r0, 800390a <main+0x63a>
	Load_Presets();
 80038e8:	f7fd f896 	bl	8000a18 <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 80038ec:	4628      	mov	r0, r5
 80038ee:	f7fd f975 	bl	8000bdc <Tune_Preset>
	DisplayStatus();    // Display status, it would not be shown until a user input was given
 80038f2:	f7fe fe5f 	bl	80025b4 <DisplayStatus>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 80038f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038fa:	4943      	ldr	r1, [pc, #268]	; (8003a08 <main+0x738>)
 80038fc:	481c      	ldr	r0, [pc, #112]	; (8003970 <main+0x6a0>)
 80038fe:	f001 fd13 	bl	8005328 <HAL_ADCEx_MultiModeStart_DMA>
 8003902:	4604      	mov	r4, r0
 8003904:	b110      	cbz	r0, 800390c <main+0x63c>
		Error_Handler();
 8003906:	f7ff fbe9 	bl	80030dc <Error_Handler>
	while(arc != ARM_MATH_SUCCESS)
 800390a:	e7fe      	b.n	800390a <main+0x63a>
	HAL_TIM_Base_Start(&htim6);
 800390c:	483f      	ldr	r0, [pc, #252]	; (8003a0c <main+0x73c>)
 800390e:	f006 fb89 	bl	800a024 <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003912:	4621      	mov	r1, r4
 8003914:	483e      	ldr	r0, [pc, #248]	; (8003a10 <main+0x740>)
 8003916:	f001 fe81 	bl	800561c <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 800391a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800391e:	4a3d      	ldr	r2, [pc, #244]	; (8003a14 <main+0x744>)
 8003920:	4621      	mov	r1, r4
 8003922:	483b      	ldr	r0, [pc, #236]	; (8003a10 <main+0x740>)
 8003924:	9400      	str	r4, [sp, #0]
 8003926:	f001 fea5 	bl	8005674 <HAL_DAC_Start_DMA>
	HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 800392a:	4620      	mov	r0, r4
 800392c:	f000 fc98 	bl	8004260 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8003930:	2110      	movs	r1, #16
 8003932:	4837      	ldr	r0, [pc, #220]	; (8003a10 <main+0x740>)
 8003934:	f001 fe72 	bl	800561c <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 4095);
 8003938:	4622      	mov	r2, r4
 800393a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800393e:	2110      	movs	r1, #16
 8003940:	4833      	ldr	r0, [pc, #204]	; (8003a10 <main+0x740>)
 8003942:	f001 ff27 	bl	8005794 <HAL_DAC_SetValue>
		UserInput();
 8003946:	f7fe ffab 	bl	80028a0 <UserInput>
		HAL_Delay(100);
 800394a:	2064      	movs	r0, #100	; 0x64
 800394c:	f000 fc70 	bl	8004230 <HAL_Delay>
		if (ubADCDualConversionComplete == RESET)
 8003950:	e7f9      	b.n	8003946 <main+0x676>
 8003952:	bf00      	nop
 8003954:	24007b54 	.word	0x24007b54
 8003958:	58002400 	.word	0x58002400
 800395c:	24002ff4 	.word	0x24002ff4
 8003960:	40004800 	.word	0x40004800
 8003964:	24002f94 	.word	0x24002f94
 8003968:	40000800 	.word	0x40000800
 800396c:	e000ed00 	.word	0xe000ed00
 8003970:	24007ae4 	.word	0x24007ae4
 8003974:	24003084 	.word	0x24003084
 8003978:	24004918 	.word	0x24004918
 800397c:	2400e326 	.word	0x2400e326
 8003980:	2400e324 	.word	0x2400e324
 8003984:	24008ddc 	.word	0x24008ddc
 8003988:	240083a4 	.word	0x240083a4
 800398c:	24009dec 	.word	0x24009dec
 8003990:	44228000 	.word	0x44228000
 8003994:	24009df8 	.word	0x24009df8
 8003998:	2400bef8 	.word	0x2400bef8
 800399c:	24008dd8 	.word	0x24008dd8
 80039a0:	3f7cac08 	.word	0x3f7cac08
 80039a4:	24007ae1 	.word	0x24007ae1
 80039a8:	24008de0 	.word	0x24008de0
 80039ac:	00010101 	.word	0x00010101
 80039b0:	24007b48 	.word	0x24007b48
 80039b4:	2400cf08 	.word	0x2400cf08
 80039b8:	3f7fdf3b 	.word	0x3f7fdf3b
 80039bc:	3f7ffcb9 	.word	0x3f7ffcb9
 80039c0:	001e0002 	.word	0x001e0002
 80039c4:	24009df0 	.word	0x24009df0
 80039c8:	24009de8 	.word	0x24009de8
 80039cc:	3949539c 	.word	0x3949539c
 80039d0:	4b0f0d18 	.word	0x4b0f0d18
 80039d4:	58020c00 	.word	0x58020c00
 80039d8:	24007ae0 	.word	0x24007ae0
 80039dc:	2400bf00 	.word	0x2400bf00
 80039e0:	58024400 	.word	0x58024400
 80039e4:	01012e00 	.word	0x01012e00
 80039e8:	3b800000 	.word	0x3b800000
 80039ec:	24008398 	.word	0x24008398
 80039f0:	240083a0 	.word	0x240083a0
 80039f4:	240051d4 	.word	0x240051d4
 80039f8:	24000b64 	.word	0x24000b64
 80039fc:	2400017c 	.word	0x2400017c
 8003a00:	24009dfc 	.word	0x24009dfc
 8003a04:	24008c24 	.word	0x24008c24
 8003a08:	2400d720 	.word	0x2400d720
 8003a0c:	24008d84 	.word	0x24008d84
 8003a10:	24002fe0 	.word	0x24002fe0
 8003a14:	240072e0 	.word	0x240072e0
 8003a18:	3dcccccd 	.word	0x3dcccccd
 8003a1c:	240049c4 	.word	0x240049c4

08003a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a20:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a22:	4c14      	ldr	r4, [pc, #80]	; (8003a74 <HAL_MspInit+0x54>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003a24:	2102      	movs	r1, #2
{
 8003a26:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003a28:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003a2e:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a32:	430b      	orrs	r3, r1
 8003a34:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8003a38:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8003a3c:	400b      	ands	r3, r1
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003a42:	f001 fd75 	bl	8005530 <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8003a46:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8003a4a:	2020      	movs	r0, #32
  __HAL_RCC_VREF_CLK_ENABLE();
 8003a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a50:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8003a54:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8003a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8003a60:	f000 fbfe 	bl	8004260 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8003a64:	f000 fc10 	bl	8004288 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8003a68:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a6a:	b002      	add	sp, #8
 8003a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8003a70:	f000 bc00 	b.w	8004274 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 8003a74:	58024400 	.word	0x58024400

08003a78 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003a78:	4951      	ldr	r1, [pc, #324]	; (8003bc0 <HAL_ADC_MspInit+0x148>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a7a:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8003a7c:	6802      	ldr	r2, [r0, #0]
{
 8003a7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hadc->Instance==ADC1)
 8003a82:	428a      	cmp	r2, r1
{
 8003a84:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a86:	9305      	str	r3, [sp, #20]
 8003a88:	9304      	str	r3, [sp, #16]
 8003a8a:	9308      	str	r3, [sp, #32]
 8003a8c:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(hadc->Instance==ADC1)
 8003a90:	d02d      	beq.n	8003aee <HAL_ADC_MspInit+0x76>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003a92:	4b4c      	ldr	r3, [pc, #304]	; (8003bc4 <HAL_ADC_MspInit+0x14c>)
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d002      	beq.n	8003a9e <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003a98:	b00b      	add	sp, #44	; 0x2c
 8003a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003a9e:	4a4a      	ldr	r2, [pc, #296]	; (8003bc8 <HAL_ADC_MspInit+0x150>)
 8003aa0:	6813      	ldr	r3, [r2, #0]
 8003aa2:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003aa4:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003aa6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003aa8:	d079      	beq.n	8003b9e <HAL_ADC_MspInit+0x126>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aaa:	4b48      	ldr	r3, [pc, #288]	; (8003bcc <HAL_ADC_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aac:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003aae:	2602      	movs	r6, #2
 8003ab0:	2703      	movs	r7, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab2:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ab6:	a904      	add	r1, sp, #16
 8003ab8:	4845      	ldr	r0, [pc, #276]	; (8003bd0 <HAL_ADC_MspInit+0x158>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aba:	f044 0402 	orr.w	r4, r4, #2
 8003abe:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 8003ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac6:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	9303      	str	r3, [sp, #12]
 8003ace:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ad0:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad4:	f003 fa4c 	bl	8006f70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003ad8:	462a      	mov	r2, r5
 8003ada:	4629      	mov	r1, r5
 8003adc:	2012      	movs	r0, #18
 8003ade:	f001 fd27 	bl	8005530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003ae2:	2012      	movs	r0, #18
 8003ae4:	f001 fd5e 	bl	80055a4 <HAL_NVIC_EnableIRQ>
}
 8003ae8:	b00b      	add	sp, #44	; 0x2c
 8003aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003aee:	4a36      	ldr	r2, [pc, #216]	; (8003bc8 <HAL_ADC_MspInit+0x150>)
 8003af0:	4604      	mov	r4, r0
 8003af2:	6813      	ldr	r3, [r2, #0]
 8003af4:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003af6:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003af8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003afa:	d042      	beq.n	8003b82 <HAL_ADC_MspInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003afc:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <HAL_ADC_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afe:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b00:	f04f 0802 	mov.w	r8, #2
 8003b04:	f04f 0903 	mov.w	r9, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b0c:	a904      	add	r1, sp, #16
 8003b0e:	4830      	ldr	r0, [pc, #192]	; (8003bd0 <HAL_ADC_MspInit+0x158>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b10:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b14:	f042 0202 	orr.w	r2, r2, #2
    hdma_adc1.Instance = DMA1_Stream0;
 8003b18:	4d2e      	ldr	r5, [pc, #184]	; (8003bd4 <HAL_ADC_MspInit+0x15c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b1a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	9301      	str	r3, [sp, #4]
 8003b2a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b2c:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b30:	f003 fa1e 	bl	8006f70 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8003b34:	4b28      	ldr	r3, [pc, #160]	; (8003bd8 <HAL_ADC_MspInit+0x160>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b36:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003b3a:	f04f 0c09 	mov.w	ip, #9
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003b3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003b42:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Instance = DMA1_Stream0;
 8003b46:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b4c:	6128      	str	r0, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b4e:	4628      	mov	r0, r5
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b50:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b52:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b54:	626e      	str	r6, [r5, #36]	; 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003b56:	f8c5 c004 	str.w	ip, [r5, #4]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003b5a:	e9c5 7105 	strd	r7, r1, [r5, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003b5e:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b62:	f002 f835 	bl	8005bd0 <HAL_DMA_Init>
 8003b66:	bb40      	cbnz	r0, 8003bba <HAL_ADC_MspInit+0x142>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003b6c:	64e5      	str	r5, [r4, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003b6e:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003b70:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003b72:	f001 fcdd 	bl	8005530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003b76:	2012      	movs	r0, #18
 8003b78:	f001 fd14 	bl	80055a4 <HAL_NVIC_EnableIRQ>
}
 8003b7c:	b00b      	add	sp, #44	; 0x2c
 8003b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003b82:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <HAL_ADC_MspInit+0x154>)
 8003b84:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003b88:	f042 0220 	orr.w	r2, r2, #32
 8003b8c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003b90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	9b00      	ldr	r3, [sp, #0]
 8003b9c:	e7ae      	b.n	8003afc <HAL_ADC_MspInit+0x84>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_ADC_MspInit+0x154>)
 8003ba0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003ba4:	f042 0220 	orr.w	r2, r2, #32
 8003ba8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003bac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	9302      	str	r3, [sp, #8]
 8003bb6:	9b02      	ldr	r3, [sp, #8]
 8003bb8:	e777      	b.n	8003aaa <HAL_ADC_MspInit+0x32>
      Error_Handler();
 8003bba:	f7ff fa8f 	bl	80030dc <Error_Handler>
 8003bbe:	e7d3      	b.n	8003b68 <HAL_ADC_MspInit+0xf0>
 8003bc0:	40022000 	.word	0x40022000
 8003bc4:	40022100 	.word	0x40022100
 8003bc8:	24000714 	.word	0x24000714
 8003bcc:	58024400 	.word	0x58024400
 8003bd0:	58020400 	.word	0x58020400
 8003bd4:	24008ba8 	.word	0x24008ba8
 8003bd8:	40020010 	.word	0x40020010

08003bdc <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8003bdc:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <HAL_DAC_MspInit+0xc4>)
 8003bde:	6802      	ldr	r2, [r0, #0]
{
 8003be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hdac->Instance==DAC1)
 8003be4:	429a      	cmp	r2, r3
{
 8003be6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be8:	f04f 0400 	mov.w	r4, #0
 8003bec:	9403      	str	r4, [sp, #12]
 8003bee:	9402      	str	r4, [sp, #8]
 8003bf0:	9406      	str	r4, [sp, #24]
 8003bf2:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hdac->Instance==DAC1)
 8003bf6:	d002      	beq.n	8003bfe <HAL_DAC_MspInit+0x22>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003bf8:	b009      	add	sp, #36	; 0x24
 8003bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003bfe:	4b29      	ldr	r3, [pc, #164]	; (8003ca4 <HAL_DAC_MspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003c00:	f04f 0830 	mov.w	r8, #48	; 0x30
 8003c04:	f04f 0903 	mov.w	r9, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c08:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003c0a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003c0e:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c10:	4825      	ldr	r0, [pc, #148]	; (8003ca8 <HAL_DAC_MspInit+0xcc>)
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003c12:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003c16:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003c1a:	4e24      	ldr	r6, [pc, #144]	; (8003cac <HAL_DAC_MspInit+0xd0>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003c1c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003c20:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003c24:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8003c28:	9200      	str	r2, [sp, #0]
 8003c2a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c30:	f042 0201 	orr.w	r2, r2, #1
 8003c34:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3c:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	9301      	str	r3, [sp, #4]
 8003c44:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003c46:	e9cd 8902 	strd	r8, r9, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4a:	f003 f991 	bl	8006f70 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003c4e:	4b18      	ldr	r3, [pc, #96]	; (8003cb0 <HAL_DAC_MspInit+0xd4>)
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c50:	2040      	movs	r0, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003c52:	f04f 0c43 	mov.w	ip, #67	; 0x43
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c56:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003c5e:	6033      	str	r3, [r6, #0]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003c60:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c64:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003c66:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c68:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c6a:	e9c6 c001 	strd	ip, r0, [r6, #4]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003c6e:	4630      	mov	r0, r6
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c70:	e9c6 7104 	strd	r7, r1, [r6, #16]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003c74:	e9c6 2306 	strd	r2, r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003c78:	f001 ffaa 	bl	8005bd0 <HAL_DMA_Init>
 8003c7c:	b960      	cbnz	r0, 8003c98 <HAL_DAC_MspInit+0xbc>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2101      	movs	r1, #1
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003c82:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003c84:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003c86:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003c88:	f001 fc52 	bl	8005530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c8c:	2036      	movs	r0, #54	; 0x36
 8003c8e:	f001 fc89 	bl	80055a4 <HAL_NVIC_EnableIRQ>
}
 8003c92:	b009      	add	sp, #36	; 0x24
 8003c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 8003c98:	f7ff fa20 	bl	80030dc <Error_Handler>
 8003c9c:	e7ef      	b.n	8003c7e <HAL_DAC_MspInit+0xa2>
 8003c9e:	bf00      	nop
 8003ca0:	40007400 	.word	0x40007400
 8003ca4:	58024400 	.word	0x58024400
 8003ca8:	58020000 	.word	0x58020000
 8003cac:	24004920 	.word	0x24004920
 8003cb0:	40020028 	.word	0x40020028

08003cb4 <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 8003cb4:	4a1b      	ldr	r2, [pc, #108]	; (8003d24 <HAL_LPTIM_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb6:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 8003cb8:	6801      	ldr	r1, [r0, #0]
{
 8003cba:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hlptim->Instance==LPTIM2)
 8003cbc:	4291      	cmp	r1, r2
{
 8003cbe:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003cc4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003cc8:	9306      	str	r3, [sp, #24]
  if(hlptim->Instance==LPTIM2)
 8003cca:	d001      	beq.n	8003cd0 <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8003ccc:	b009      	add	sp, #36	; 0x24
 8003cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8003cd0:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <HAL_LPTIM_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8003cd2:	2603      	movs	r6, #3
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003cd4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003cd8:	2502      	movs	r5, #2
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8003cda:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cde:	a902      	add	r1, sp, #8
 8003ce0:	4812      	ldr	r0, [pc, #72]	; (8003d2c <HAL_LPTIM_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ce2:	2700      	movs	r7, #0
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8003ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003cec:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003cf0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003cf4:	9200      	str	r2, [sp, #0]
 8003cf6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003cfc:	f042 0202 	orr.w	r2, r2, #2
 8003d00:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8003d08:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d0a:	2600      	movs	r6, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d14:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003d18:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d1c:	f003 f928 	bl	8006f70 <HAL_GPIO_Init>
}
 8003d20:	b009      	add	sp, #36	; 0x24
 8003d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d24:	58002400 	.word	0x58002400
 8003d28:	58024400 	.word	0x58024400
 8003d2c:	58020400 	.word	0x58020400

08003d30 <HAL_TIM_Encoder_MspInit>:
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 8003d30:	4a1b      	ldr	r2, [pc, #108]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d32:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 8003d34:	6801      	ldr	r1, [r0, #0]
{
 8003d36:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(htim_encoder->Instance==TIM4)
 8003d38:	4291      	cmp	r1, r2
{
 8003d3a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d3c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003d40:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003d44:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 8003d46:	d001      	beq.n	8003d4c <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003d48:	b009      	add	sp, #36	; 0x24
 8003d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d4c:	4b15      	ldr	r3, [pc, #84]	; (8003da4 <HAL_TIM_Encoder_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d4e:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003d50:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 8003d54:	2502      	movs	r5, #2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d56:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d5a:	a902      	add	r1, sp, #8
 8003d5c:	4812      	ldr	r0, [pc, #72]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003d5e:	2700      	movs	r7, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d60:	f042 0204 	orr.w	r2, r2, #4
 8003d64:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003d68:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003d6c:	f002 0204 	and.w	r2, r2, #4
 8003d70:	9200      	str	r2, [sp, #0]
 8003d72:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d74:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003d78:	f042 0208 	orr.w	r2, r2, #8
 8003d7c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d84:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003d86:	2601      	movs	r6, #1
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003d90:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003d94:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d98:	f003 f8ea 	bl	8006f70 <HAL_GPIO_Init>
}
 8003d9c:	b009      	add	sp, #36	; 0x24
 8003d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003da0:	40000800 	.word	0x40000800
 8003da4:	58024400 	.word	0x58024400
 8003da8:	58020c00 	.word	0x58020c00

08003dac <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8003dac:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <HAL_TIM_Base_MspInit+0x40>)
 8003dae:	6802      	ldr	r2, [r0, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d000      	beq.n	8003db6 <HAL_TIM_Base_MspInit+0xa>
 8003db4:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003db6:	4b0e      	ldr	r3, [pc, #56]	; (8003df0 <HAL_TIM_Base_MspInit+0x44>)
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003db8:	2200      	movs	r2, #0
 8003dba:	2101      	movs	r1, #1
 8003dbc:	2036      	movs	r0, #54	; 0x36
{
 8003dbe:	b510      	push	{r4, lr}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003dc0:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
{
 8003dc4:	b082      	sub	sp, #8
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003dc6:	f044 0410 	orr.w	r4, r4, #16
 8003dca:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8003dce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003dd2:	f003 0310 	and.w	r3, r3, #16
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003dda:	f001 fba9 	bl	8005530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003dde:	2036      	movs	r0, #54	; 0x36
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003de0:	b002      	add	sp, #8
 8003de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003de6:	f001 bbdd 	b.w	80055a4 <HAL_NVIC_EnableIRQ>
 8003dea:	bf00      	nop
 8003dec:	40001000 	.word	0x40001000
 8003df0:	58024400 	.word	0x58024400

08003df4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df8:	2400      	movs	r4, #0
{
 8003dfa:	b0b8      	sub	sp, #224	; 0xe0
 8003dfc:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003dfe:	22bc      	movs	r2, #188	; 0xbc
 8003e00:	4621      	mov	r1, r4
 8003e02:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e04:	9408      	str	r4, [sp, #32]
 8003e06:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003e0a:	e9cd 4406 	strd	r4, r4, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e0e:	f00a f9e7 	bl	800e1e0 <memset>
  if(huart->Instance==USART3)
 8003e12:	682a      	ldr	r2, [r5, #0]
 8003e14:	4b2f      	ldr	r3, [pc, #188]	; (8003ed4 <HAL_UART_MspInit+0xe0>)
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d002      	beq.n	8003e20 <HAL_UART_MspInit+0x2c>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003e1a:	b038      	add	sp, #224	; 0xe0
 8003e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003e20:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e22:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003e24:	9426      	str	r4, [sp, #152]	; 0x98
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003e26:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e28:	f004 ff60 	bl	8008cec <HAL_RCCEx_PeriphCLKConfig>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d14d      	bne.n	8003ecc <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e30:	4b29      	ldr	r3, [pc, #164]	; (8003ed8 <HAL_UART_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003e32:	2400      	movs	r4, #0
 8003e34:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003e36:	f04f 0807 	mov.w	r8, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e3a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003e3e:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8003e42:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e44:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e46:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e4a:	4824      	ldr	r0, [pc, #144]	; (8003edc <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e4c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003e50:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003e54:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003e58:	9201      	str	r2, [sp, #4]
 8003e5a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e60:	f042 0202 	orr.w	r2, r2, #2
 8003e64:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e6c:	f002 0202 	and.w	r2, r2, #2
 8003e70:	9202      	str	r2, [sp, #8]
 8003e72:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e74:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e78:	f042 0208 	orr.w	r2, r2, #8
 8003e7c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003e84:	f8cd 8020 	str.w	r8, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	9303      	str	r3, [sp, #12]
 8003e8e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003e90:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003e94:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e98:	f003 f86a 	bl	8006f70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ea2:	a904      	add	r1, sp, #16
 8003ea4:	480e      	ldr	r0, [pc, #56]	; (8003ee0 <HAL_UART_MspInit+0xec>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ea6:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003eaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003eae:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003eb2:	f003 f85d 	bl	8006f70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2101      	movs	r1, #1
 8003eba:	2027      	movs	r0, #39	; 0x27
 8003ebc:	f001 fb38 	bl	8005530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003ec0:	2027      	movs	r0, #39	; 0x27
 8003ec2:	f001 fb6f 	bl	80055a4 <HAL_NVIC_EnableIRQ>
}
 8003ec6:	b038      	add	sp, #224	; 0xe0
 8003ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 8003ecc:	f7ff f906 	bl	80030dc <Error_Handler>
 8003ed0:	e7ae      	b.n	8003e30 <HAL_UART_MspInit+0x3c>
 8003ed2:	bf00      	nop
 8003ed4:	40004800 	.word	0x40004800
 8003ed8:	58024400 	.word	0x58024400
 8003edc:	58020400 	.word	0x58020400
 8003ee0:	58020c00 	.word	0x58020c00

08003ee4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop

08003ee8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ee8:	e7fe      	b.n	8003ee8 <HardFault_Handler>
 8003eea:	bf00      	nop

08003eec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eec:	e7fe      	b.n	8003eec <MemManage_Handler>
 8003eee:	bf00      	nop

08003ef0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ef0:	e7fe      	b.n	8003ef0 <BusFault_Handler>
 8003ef2:	bf00      	nop

08003ef4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ef4:	e7fe      	b.n	8003ef4 <UsageFault_Handler>
 8003ef6:	bf00      	nop

08003ef8 <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 8003ef8:	f000 b930 	b.w	800415c <ADC3_IRQHandler>

08003efc <DebugMon_Handler>:
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop

08003f00 <PendSV_Handler>:
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop

08003f04 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f04:	f000 b982 	b.w	800420c <HAL_IncTick>

08003f08 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f08:	4801      	ldr	r0, [pc, #4]	; (8003f10 <DMA1_Stream0_IRQHandler+0x8>)
 8003f0a:	f002 bcd3 	b.w	80068b4 <HAL_DMA_IRQHandler>
 8003f0e:	bf00      	nop
 8003f10:	24008ba8 	.word	0x24008ba8

08003f14 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003f14:	4801      	ldr	r0, [pc, #4]	; (8003f1c <DMA1_Stream1_IRQHandler+0x8>)
 8003f16:	f002 bccd 	b.w	80068b4 <HAL_DMA_IRQHandler>
 8003f1a:	bf00      	nop
 8003f1c:	24004920 	.word	0x24004920

08003f20 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003f20:	4804      	ldr	r0, [pc, #16]	; (8003f34 <ADC_IRQHandler+0x14>)
{
 8003f22:	b508      	push	{r3, lr}
  HAL_ADC_IRQHandler(&hadc1);
 8003f24:	f000 f9d2 	bl	80042cc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003f28:	4803      	ldr	r0, [pc, #12]	; (8003f38 <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8003f2e:	f000 b9cd 	b.w	80042cc <HAL_ADC_IRQHandler>
 8003f32:	bf00      	nop
 8003f34:	24007ae4 	.word	0x24007ae4
 8003f38:	24003084 	.word	0x24003084

08003f3c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003f3c:	4801      	ldr	r0, [pc, #4]	; (8003f44 <USART3_IRQHandler+0x8>)
 8003f3e:	f006 bb2f 	b.w	800a5a0 <HAL_UART_IRQHandler>
 8003f42:	bf00      	nop
 8003f44:	24002ff4 	.word	0x24002ff4

08003f48 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003f48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003f4c:	f003 b938 	b.w	80071c0 <HAL_GPIO_EXTI_IRQHandler>

08003f50 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8003f50:	4804      	ldr	r0, [pc, #16]	; (8003f64 <TIM6_DAC_IRQHandler+0x14>)
{
 8003f52:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 8003f54:	f001 fc54 	bl	8005800 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8003f58:	4803      	ldr	r0, [pc, #12]	; (8003f68 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003f5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8003f5e:	f006 b9fd 	b.w	800a35c <HAL_TIM_IRQHandler>
 8003f62:	bf00      	nop
 8003f64:	24002fe0 	.word	0x24002fe0
 8003f68:	24008d84 	.word	0x24008d84

08003f6c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003f6c:	4801      	ldr	r0, [pc, #4]	; (8003f74 <OTG_FS_IRQHandler+0x8>)
 8003f6e:	f003 ba61 	b.w	8007434 <HAL_PCD_IRQHandler>
 8003f72:	bf00      	nop
 8003f74:	2400f7f8 	.word	0x2400f7f8

08003f78 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003f78:	2001      	movs	r0, #1
 8003f7a:	4770      	bx	lr

08003f7c <_kill>:

int _kill(int pid, int sig)
{
 8003f7c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003f7e:	f00a f8f7 	bl	800e170 <__errno>
 8003f82:	2216      	movs	r2, #22
 8003f84:	4603      	mov	r3, r0
	return -1;
}
 8003f86:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8003f8a:	601a      	str	r2, [r3, #0]
}
 8003f8c:	bd08      	pop	{r3, pc}
 8003f8e:	bf00      	nop

08003f90 <_exit>:

void _exit (int status)
{
 8003f90:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003f92:	f00a f8ed 	bl	800e170 <__errno>
 8003f96:	2316      	movs	r3, #22
 8003f98:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8003f9a:	e7fe      	b.n	8003f9a <_exit+0xa>

08003f9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f9c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f9e:	1e16      	subs	r6, r2, #0
 8003fa0:	dd07      	ble.n	8003fb2 <_read+0x16>
 8003fa2:	460c      	mov	r4, r1
 8003fa4:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8003fa6:	f3af 8000 	nop.w
 8003faa:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fae:	42a5      	cmp	r5, r4
 8003fb0:	d1f9      	bne.n	8003fa6 <_read+0xa>
	}

return len;
}
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	bd70      	pop	{r4, r5, r6, pc}
 8003fb6:	bf00      	nop

08003fb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fb8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fba:	1e16      	subs	r6, r2, #0
 8003fbc:	dd07      	ble.n	8003fce <_write+0x16>
 8003fbe:	460c      	mov	r4, r1
 8003fc0:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8003fc2:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003fc6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fca:	42ac      	cmp	r4, r5
 8003fcc:	d1f9      	bne.n	8003fc2 <_write+0xa>
	}
	return len;
}
 8003fce:	4630      	mov	r0, r6
 8003fd0:	bd70      	pop	{r4, r5, r6, pc}
 8003fd2:	bf00      	nop

08003fd4 <_close>:

int _close(int file)
{
	return -1;
}
 8003fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop

08003fdc <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8003fe0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003fe2:	604b      	str	r3, [r1, #4]
}
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop

08003fe8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003fe8:	2001      	movs	r0, #1
 8003fea:	4770      	bx	lr

08003fec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003fec:	2000      	movs	r0, #0
 8003fee:	4770      	bx	lr

08003ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ff0:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ff2:	4c0d      	ldr	r4, [pc, #52]	; (8004028 <_sbrk+0x38>)
{
 8003ff4:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ff6:	490d      	ldr	r1, [pc, #52]	; (800402c <_sbrk+0x3c>)
 8003ff8:	480d      	ldr	r0, [pc, #52]	; (8004030 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8003ffa:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ffc:	1a09      	subs	r1, r1, r0
  if (NULL == __sbrk_heap_end)
 8003ffe:	b12a      	cbz	r2, 800400c <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004000:	4413      	add	r3, r2
 8004002:	428b      	cmp	r3, r1
 8004004:	d808      	bhi.n	8004018 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004006:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8004008:	6023      	str	r3, [r4, #0]
}
 800400a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800400c:	4809      	ldr	r0, [pc, #36]	; (8004034 <_sbrk+0x44>)
 800400e:	4602      	mov	r2, r0
 8004010:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8004012:	4413      	add	r3, r2
 8004014:	428b      	cmp	r3, r1
 8004016:	d9f6      	bls.n	8004006 <_sbrk+0x16>
    errno = ENOMEM;
 8004018:	f00a f8aa 	bl	800e170 <__errno>
 800401c:	230c      	movs	r3, #12
    return (void *)-1;
 800401e:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8004022:	6003      	str	r3, [r0, #0]
}
 8004024:	4610      	mov	r0, r2
 8004026:	bd10      	pop	{r4, pc}
 8004028:	24000718 	.word	0x24000718
 800402c:	24080000 	.word	0x24080000
 8004030:	00000400 	.word	0x00000400
 8004034:	2400fc10 	.word	0x2400fc10

08004038 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004038:	4929      	ldr	r1, [pc, #164]	; (80040e0 <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800403a:	4a2a      	ldr	r2, [pc, #168]	; (80040e4 <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800403c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8004044:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800404a:	6813      	ldr	r3, [r2, #0]
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	2b06      	cmp	r3, #6
 8004052:	d805      	bhi.n	8004060 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004054:	6813      	ldr	r3, [r2, #0]
 8004056:	f023 030f 	bic.w	r3, r3, #15
 800405a:	f043 0307 	orr.w	r3, r3, #7
 800405e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004060:	4b21      	ldr	r3, [pc, #132]	; (80040e8 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004062:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004064:	4a21      	ldr	r2, [pc, #132]	; (80040ec <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 8004066:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004068:	481e      	ldr	r0, [pc, #120]	; (80040e4 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 800406a:	f041 0101 	orr.w	r1, r1, #1
 800406e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004070:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8004072:	6819      	ldr	r1, [r3, #0]
 8004074:	400a      	ands	r2, r1
 8004076:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004078:	6803      	ldr	r3, [r0, #0]
 800407a:	071b      	lsls	r3, r3, #28
 800407c:	d505      	bpl.n	800408a <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800407e:	6803      	ldr	r3, [r0, #0]
 8004080:	f023 030f 	bic.w	r3, r3, #15
 8004084:	f043 0307 	orr.w	r3, r3, #7
 8004088:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800408a:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <SystemInit+0xb0>)
 800408c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800408e:	4918      	ldr	r1, [pc, #96]	; (80040f0 <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 8004090:	4c18      	ldr	r4, [pc, #96]	; (80040f4 <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 8004092:	4819      	ldr	r0, [pc, #100]	; (80040f8 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 8004094:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8004096:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8004098:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800409a:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800409c:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800409e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80040a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80040a2:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80040a4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80040a6:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80040a8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80040aa:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80040ac:	4c13      	ldr	r4, [pc, #76]	; (80040fc <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 80040ae:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80040b2:	4913      	ldr	r1, [pc, #76]	; (8004100 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 80040b4:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 80040b6:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	4019      	ands	r1, r3
 80040bc:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80040c0:	d202      	bcs.n	80040c8 <SystemInit+0x90>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80040c2:	4b10      	ldr	r3, [pc, #64]	; (8004104 <SystemInit+0xcc>)
 80040c4:	2201      	movs	r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80040c8:	490f      	ldr	r1, [pc, #60]	; (8004108 <SystemInit+0xd0>)
 80040ca:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040ce:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <SystemInit+0xa8>)
 80040d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80040d4:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80040d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040da:	609a      	str	r2, [r3, #8]
}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	e000ed00 	.word	0xe000ed00
 80040e4:	52002000 	.word	0x52002000
 80040e8:	58024400 	.word	0x58024400
 80040ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80040f0:	01010280 	.word	0x01010280
 80040f4:	02020200 	.word	0x02020200
 80040f8:	01ff0000 	.word	0x01ff0000
 80040fc:	5c001000 	.word	0x5c001000
 8004100:	ffff0000 	.word	0xffff0000
 8004104:	51008108 	.word	0x51008108
 8004108:	52004000 	.word	0x52004000

0800410c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800410c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004144 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004110:	f7ff ff92 	bl	8004038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004114:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004116:	e003      	b.n	8004120 <LoopCopyDataInit>

08004118 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004118:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800411a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800411c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800411e:	3104      	adds	r1, #4

08004120 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004120:	480a      	ldr	r0, [pc, #40]	; (800414c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8004122:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8004124:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004126:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004128:	d3f6      	bcc.n	8004118 <CopyDataInit>
  ldr  r2, =_sbss
 800412a:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800412c:	e002      	b.n	8004134 <LoopFillZerobss>

0800412e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800412e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004130:	f842 3b04 	str.w	r3, [r2], #4

08004134 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004134:	4b08      	ldr	r3, [pc, #32]	; (8004158 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8004136:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004138:	d3f9      	bcc.n	800412e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800413a:	f00a f81f 	bl	800e17c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800413e:	f7ff f8c7 	bl	80032d0 <main>
  bx  lr    
 8004142:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004144:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8004148:	0801c828 	.word	0x0801c828
  ldr  r0, =_sdata
 800414c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8004150:	240005e0 	.word	0x240005e0
  ldr  r2, =_sbss
 8004154:	240005e0 	.word	0x240005e0
  ldr  r3, = _ebss
 8004158:	2400fc10 	.word	0x2400fc10

0800415c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800415c:	e7fe      	b.n	800415c <ADC3_IRQHandler>
	...

08004160 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004160:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <HAL_InitTick+0x40>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	b90b      	cbnz	r3, 800416a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8004166:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004168:	4770      	bx	lr
{
 800416a:	b510      	push	{r4, lr}
 800416c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800416e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004172:	4a0c      	ldr	r2, [pc, #48]	; (80041a4 <HAL_InitTick+0x44>)
 8004174:	fbb0 f3f3 	udiv	r3, r0, r3
 8004178:	6810      	ldr	r0, [r2, #0]
 800417a:	fbb0 f0f3 	udiv	r0, r0, r3
 800417e:	f001 fa1f 	bl	80055c0 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004182:	2c0f      	cmp	r4, #15
 8004184:	d800      	bhi.n	8004188 <HAL_InitTick+0x28>
 8004186:	b108      	cbz	r0, 800418c <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8004188:	2001      	movs	r0, #1
}
 800418a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800418c:	2200      	movs	r2, #0
 800418e:	4621      	mov	r1, r4
 8004190:	f04f 30ff 	mov.w	r0, #4294967295
 8004194:	f001 f9cc 	bl	8005530 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004198:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <HAL_InitTick+0x48>)
 800419a:	2000      	movs	r0, #0
 800419c:	601c      	str	r4, [r3, #0]
}
 800419e:	bd10      	pop	{r4, pc}
 80041a0:	24000288 	.word	0x24000288
 80041a4:	24000280 	.word	0x24000280
 80041a8:	2400028c 	.word	0x2400028c

080041ac <HAL_Init>:
{
 80041ac:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041ae:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041b0:	4c12      	ldr	r4, [pc, #72]	; (80041fc <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041b2:	f001 f9a9 	bl	8005508 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041b6:	4d12      	ldr	r5, [pc, #72]	; (8004200 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041b8:	f004 fa06 	bl	80085c8 <HAL_RCC_GetSysClockFreq>
 80041bc:	4b11      	ldr	r3, [pc, #68]	; (8004204 <HAL_Init+0x58>)
 80041be:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041c0:	2000      	movs	r0, #0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041c2:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041c4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041c6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041ca:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041ce:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041d0:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041d2:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 80041d6:	4c0c      	ldr	r4, [pc, #48]	; (8004208 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041d8:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041dc:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041de:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 80041e2:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041e4:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041e6:	f7ff ffbb 	bl	8004160 <HAL_InitTick>
 80041ea:	b110      	cbz	r0, 80041f2 <HAL_Init+0x46>
    return HAL_ERROR;
 80041ec:	2401      	movs	r4, #1
}
 80041ee:	4620      	mov	r0, r4
 80041f0:	bd38      	pop	{r3, r4, r5, pc}
 80041f2:	4604      	mov	r4, r0
  HAL_MspInit();
 80041f4:	f7ff fc14 	bl	8003a20 <HAL_MspInit>
}
 80041f8:	4620      	mov	r0, r4
 80041fa:	bd38      	pop	{r3, r4, r5, pc}
 80041fc:	08018270 	.word	0x08018270
 8004200:	24000284 	.word	0x24000284
 8004204:	58024400 	.word	0x58024400
 8004208:	24000280 	.word	0x24000280

0800420c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800420c:	4a03      	ldr	r2, [pc, #12]	; (800421c <HAL_IncTick+0x10>)
 800420e:	4b04      	ldr	r3, [pc, #16]	; (8004220 <HAL_IncTick+0x14>)
 8004210:	6811      	ldr	r1, [r2, #0]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	440b      	add	r3, r1
 8004216:	6013      	str	r3, [r2, #0]
}
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	240049bc 	.word	0x240049bc
 8004220:	24000288 	.word	0x24000288

08004224 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004224:	4b01      	ldr	r3, [pc, #4]	; (800422c <HAL_GetTick+0x8>)
 8004226:	6818      	ldr	r0, [r3, #0]
}
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	240049bc 	.word	0x240049bc

08004230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004230:	b538      	push	{r3, r4, r5, lr}
 8004232:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004234:	f7ff fff6 	bl	8004224 <HAL_GetTick>
 8004238:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800423a:	1c63      	adds	r3, r4, #1
 800423c:	d002      	beq.n	8004244 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800423e:	4b04      	ldr	r3, [pc, #16]	; (8004250 <HAL_Delay+0x20>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004244:	f7ff ffee 	bl	8004224 <HAL_GetTick>
 8004248:	1b43      	subs	r3, r0, r5
 800424a:	42a3      	cmp	r3, r4
 800424c:	d3fa      	bcc.n	8004244 <HAL_Delay+0x14>
  {
  }
}
 800424e:	bd38      	pop	{r3, r4, r5, pc}
 8004250:	24000288 	.word	0x24000288

08004254 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8004254:	4b01      	ldr	r3, [pc, #4]	; (800425c <HAL_GetREVID+0x8>)
 8004256:	6818      	ldr	r0, [r3, #0]
}
 8004258:	0c00      	lsrs	r0, r0, #16
 800425a:	4770      	bx	lr
 800425c:	5c001000 	.word	0x5c001000

08004260 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8004260:	4a03      	ldr	r2, [pc, #12]	; (8004270 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 8004262:	6813      	ldr	r3, [r2, #0]
 8004264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004268:	4318      	orrs	r0, r3
 800426a:	6010      	str	r0, [r2, #0]
}
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	58003c00 	.word	0x58003c00

08004274 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8004274:	4a03      	ldr	r2, [pc, #12]	; (8004284 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8004276:	6813      	ldr	r3, [r2, #0]
 8004278:	f023 0302 	bic.w	r3, r3, #2
 800427c:	4318      	orrs	r0, r3
 800427e:	6010      	str	r0, [r2, #0]
}
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	58003c00 	.word	0x58003c00

08004288 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8004288:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800428a:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_SYSCFG_EnableVREFBUF+0x30>)
 800428c:	681a      	ldr	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800428e:	461d      	mov	r5, r3
  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8004290:	f042 0201 	orr.w	r2, r2, #1
 8004294:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8004296:	f7ff ffc5 	bl	8004224 <HAL_GetTick>
 800429a:	4604      	mov	r4, r0
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800429c:	e004      	b.n	80042a8 <HAL_SYSCFG_EnableVREFBUF+0x20>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800429e:	f7ff ffc1 	bl	8004224 <HAL_GetTick>
 80042a2:	1b00      	subs	r0, r0, r4
 80042a4:	280a      	cmp	r0, #10
 80042a6:	d804      	bhi.n	80042b2 <HAL_SYSCFG_EnableVREFBUF+0x2a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80042a8:	682b      	ldr	r3, [r5, #0]
 80042aa:	071b      	lsls	r3, r3, #28
 80042ac:	d5f7      	bpl.n	800429e <HAL_SYSCFG_EnableVREFBUF+0x16>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80042ae:	2000      	movs	r0, #0
}
 80042b0:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 80042b2:	2003      	movs	r0, #3
}
 80042b4:	bd38      	pop	{r3, r4, r5, pc}
 80042b6:	bf00      	nop
 80042b8:	58003c00 	.word	0x58003c00

080042bc <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042bc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80042be:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042c0:	f7fe f8dc 	bl	800247c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042c4:	bd08      	pop	{r3, pc}
 80042c6:	bf00      	nop

080042c8 <HAL_ADC_ErrorCallback>:
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop

080042cc <HAL_ADC_IRQHandler>:
{
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042ce:	4a97      	ldr	r2, [pc, #604]	; (800452c <HAL_ADC_IRQHandler+0x260>)
{
 80042d0:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80042d2:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042d4:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 80042d6:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80042d8:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042da:	f000 8098 	beq.w	800440e <HAL_ADC_IRQHandler+0x142>
 80042de:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80042e2:	4293      	cmp	r3, r2
 80042e4:	f000 8093 	beq.w	800440e <HAL_ADC_IRQHandler+0x142>
 80042e8:	4a91      	ldr	r2, [pc, #580]	; (8004530 <HAL_ADC_IRQHandler+0x264>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80042ea:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80042ec:	07a9      	lsls	r1, r5, #30
 80042ee:	f007 071f 	and.w	r7, r7, #31
 80042f2:	d502      	bpl.n	80042fa <HAL_ADC_IRQHandler+0x2e>
 80042f4:	07b2      	lsls	r2, r6, #30
 80042f6:	f100 80ac 	bmi.w	8004452 <HAL_ADC_IRQHandler+0x186>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80042fa:	0769      	lsls	r1, r5, #29
 80042fc:	d57c      	bpl.n	80043f8 <HAL_ADC_IRQHandler+0x12c>
 80042fe:	0772      	lsls	r2, r6, #29
 8004300:	d57a      	bpl.n	80043f8 <HAL_ADC_IRQHandler+0x12c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004302:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004304:	06d2      	lsls	r2, r2, #27
 8004306:	d403      	bmi.n	8004310 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004308:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800430a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800430e:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8004316:	d11c      	bne.n	8004352 <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004318:	4a86      	ldr	r2, [pc, #536]	; (8004534 <HAL_ADC_IRQHandler+0x268>)
 800431a:	4293      	cmp	r3, r2
 800431c:	f000 80e2 	beq.w	80044e4 <HAL_ADC_IRQHandler+0x218>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004320:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004322:	0490      	lsls	r0, r2, #18
 8004324:	d415      	bmi.n	8004352 <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	0711      	lsls	r1, r2, #28
 800432a:	d512      	bpl.n	8004352 <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	0752      	lsls	r2, r2, #29
 8004330:	f100 80f1 	bmi.w	8004516 <HAL_ADC_IRQHandler+0x24a>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	f022 020c 	bic.w	r2, r2, #12
 800433a:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800433c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800433e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004342:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004344:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004346:	04db      	lsls	r3, r3, #19
 8004348:	d403      	bmi.n	8004352 <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800434a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8004352:	4620      	mov	r0, r4
 8004354:	f7fe f874 	bl	8002440 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	220c      	movs	r2, #12
 800435c:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800435e:	06a8      	lsls	r0, r5, #26
 8004360:	d550      	bpl.n	8004404 <HAL_ADC_IRQHandler+0x138>
 8004362:	06b1      	lsls	r1, r6, #26
 8004364:	d54e      	bpl.n	8004404 <HAL_ADC_IRQHandler+0x138>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004366:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004368:	06d1      	lsls	r1, r2, #27
 800436a:	d403      	bmi.n	8004374 <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800436c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800436e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004372:	6562      	str	r2, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004374:	486f      	ldr	r0, [pc, #444]	; (8004534 <HAL_ADC_IRQHandler+0x268>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004376:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004378:	4283      	cmp	r3, r0
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800437a:	68d9      	ldr	r1, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800437c:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 8004380:	d075      	beq.n	800446e <HAL_ADC_IRQHandler+0x1a2>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004382:	68d8      	ldr	r0, [r3, #12]
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8004384:	b12a      	cbz	r2, 8004392 <HAL_ADC_IRQHandler+0xc6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8004386:	4a6c      	ldr	r2, [pc, #432]	; (8004538 <HAL_ADC_IRQHandler+0x26c>)
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004388:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 800438c:	4002      	ands	r2, r0
 800438e:	430a      	orrs	r2, r1
 8004390:	d117      	bne.n	80043c2 <HAL_ADC_IRQHandler+0xf6>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	0652      	lsls	r2, r2, #25
 8004396:	d514      	bpl.n	80043c2 <HAL_ADC_IRQHandler+0xf6>
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004398:	0281      	lsls	r1, r0, #10
 800439a:	d412      	bmi.n	80043c2 <HAL_ADC_IRQHandler+0xf6>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	0712      	lsls	r2, r2, #28
 80043a0:	f100 80b0 	bmi.w	8004504 <HAL_ADC_IRQHandler+0x238>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043aa:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80043ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043b2:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80043b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043b6:	05d8      	lsls	r0, r3, #23
 80043b8:	d403      	bmi.n	80043c2 <HAL_ADC_IRQHandler+0xf6>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80043c2:	4620      	mov	r0, r4
 80043c4:	f001 f82e 	bl	8005424 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	2260      	movs	r2, #96	; 0x60
 80043cc:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80043ce:	0629      	lsls	r1, r5, #24
 80043d0:	d501      	bpl.n	80043d6 <HAL_ADC_IRQHandler+0x10a>
 80043d2:	0632      	lsls	r2, r6, #24
 80043d4:	d45f      	bmi.n	8004496 <HAL_ADC_IRQHandler+0x1ca>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80043d6:	05e8      	lsls	r0, r5, #23
 80043d8:	d501      	bpl.n	80043de <HAL_ADC_IRQHandler+0x112>
 80043da:	05f1      	lsls	r1, r6, #23
 80043dc:	d466      	bmi.n	80044ac <HAL_ADC_IRQHandler+0x1e0>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80043de:	05aa      	lsls	r2, r5, #22
 80043e0:	d501      	bpl.n	80043e6 <HAL_ADC_IRQHandler+0x11a>
 80043e2:	05b0      	lsls	r0, r6, #22
 80043e4:	d44b      	bmi.n	800447e <HAL_ADC_IRQHandler+0x1b2>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80043e6:	06e9      	lsls	r1, r5, #27
 80043e8:	d501      	bpl.n	80043ee <HAL_ADC_IRQHandler+0x122>
 80043ea:	06f2      	lsls	r2, r6, #27
 80043ec:	d411      	bmi.n	8004412 <HAL_ADC_IRQHandler+0x146>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80043ee:	0568      	lsls	r0, r5, #21
 80043f0:	d501      	bpl.n	80043f6 <HAL_ADC_IRQHandler+0x12a>
 80043f2:	0571      	lsls	r1, r6, #21
 80043f4:	d466      	bmi.n	80044c4 <HAL_ADC_IRQHandler+0x1f8>
}
 80043f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80043f8:	0728      	lsls	r0, r5, #28
 80043fa:	d5b0      	bpl.n	800435e <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80043fc:	0731      	lsls	r1, r6, #28
 80043fe:	d480      	bmi.n	8004302 <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004400:	06a8      	lsls	r0, r5, #26
 8004402:	d4ae      	bmi.n	8004362 <HAL_ADC_IRQHandler+0x96>
 8004404:	066a      	lsls	r2, r5, #25
 8004406:	d5e2      	bpl.n	80043ce <HAL_ADC_IRQHandler+0x102>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004408:	0670      	lsls	r0, r6, #25
 800440a:	d5e0      	bpl.n	80043ce <HAL_ADC_IRQHandler+0x102>
 800440c:	e7ab      	b.n	8004366 <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800440e:	4a4b      	ldr	r2, [pc, #300]	; (800453c <HAL_ADC_IRQHandler+0x270>)
 8004410:	e76b      	b.n	80042ea <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004412:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004414:	b172      	cbz	r2, 8004434 <HAL_ADC_IRQHandler+0x168>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004416:	2f00      	cmp	r7, #0
 8004418:	d069      	beq.n	80044ee <HAL_ADC_IRQHandler+0x222>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800441a:	4a44      	ldr	r2, [pc, #272]	; (800452c <HAL_ADC_IRQHandler+0x260>)
 800441c:	4293      	cmp	r3, r2
 800441e:	f000 8083 	beq.w	8004528 <HAL_ADC_IRQHandler+0x25c>
 8004422:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004426:	4293      	cmp	r3, r2
 8004428:	d07e      	beq.n	8004528 <HAL_ADC_IRQHandler+0x25c>
 800442a:	4a41      	ldr	r2, [pc, #260]	; (8004530 <HAL_ADC_IRQHandler+0x264>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800442c:	6892      	ldr	r2, [r2, #8]
 800442e:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8004432:	d00b      	beq.n	800444c <HAL_ADC_IRQHandler+0x180>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004434:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_ADC_ErrorCallback(hadc);
 8004436:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004438:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800443c:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800443e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004440:	f043 0302 	orr.w	r3, r3, #2
 8004444:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8004446:	f7ff ff3f 	bl	80042c8 <HAL_ADC_ErrorCallback>
 800444a:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800444c:	2210      	movs	r2, #16
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	e7cd      	b.n	80043ee <HAL_ADC_IRQHandler+0x122>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004452:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004454:	06d8      	lsls	r0, r3, #27
 8004456:	d403      	bmi.n	8004460 <HAL_ADC_IRQHandler+0x194>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004458:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800445a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800445e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004460:	4620      	mov	r0, r4
 8004462:	f000 ffe7 	bl	8005434 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	2202      	movs	r2, #2
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	e745      	b.n	80042fa <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800446e:	1fb8      	subs	r0, r7, #6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004470:	2801      	cmp	r0, #1
 8004472:	d986      	bls.n	8004382 <HAL_ADC_IRQHandler+0xb6>
 8004474:	2f00      	cmp	r7, #0
 8004476:	d084      	beq.n	8004382 <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004478:	482c      	ldr	r0, [pc, #176]	; (800452c <HAL_ADC_IRQHandler+0x260>)
 800447a:	68c0      	ldr	r0, [r0, #12]
 800447c:	e782      	b.n	8004384 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800447e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004480:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004482:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004486:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004488:	f000 ffd2 	bl	8005430 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	e7a7      	b.n	80043e6 <HAL_ADC_IRQHandler+0x11a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004496:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004498:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800449a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80044a0:	f7fe f82e 	bl	8002500 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	2280      	movs	r2, #128	; 0x80
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e794      	b.n	80043d6 <HAL_ADC_IRQHandler+0x10a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80044ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80044ae:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80044b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b4:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80044b6:	f000 ffb9 	bl	800542c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	e78c      	b.n	80043de <HAL_ADC_IRQHandler+0x112>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80044c4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80044c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80044ca:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80044cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044d0:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80044d2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80044d4:	f042 0208 	orr.w	r2, r2, #8
 80044d8:	65a2      	str	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80044da:	6019      	str	r1, [r3, #0]
}
 80044dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80044e0:	f000 bfa2 	b.w	8005428 <HAL_ADCEx_InjectedQueueOverflowCallback>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044e4:	2f09      	cmp	r7, #9
 80044e6:	d906      	bls.n	80044f6 <HAL_ADC_IRQHandler+0x22a>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80044e8:	4a10      	ldr	r2, [pc, #64]	; (800452c <HAL_ADC_IRQHandler+0x260>)
 80044ea:	68d2      	ldr	r2, [r2, #12]
 80044ec:	e719      	b.n	8004322 <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	0797      	lsls	r7, r2, #30
 80044f2:	d0ab      	beq.n	800444c <HAL_ADC_IRQHandler+0x180>
 80044f4:	e79e      	b.n	8004434 <HAL_ADC_IRQHandler+0x168>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044f6:	f240 2221 	movw	r2, #545	; 0x221
 80044fa:	40fa      	lsrs	r2, r7
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80044fc:	07d2      	lsls	r2, r2, #31
 80044fe:	f53f af0f 	bmi.w	8004320 <HAL_ADC_IRQHandler+0x54>
 8004502:	e7f1      	b.n	80044e8 <HAL_ADC_IRQHandler+0x21c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004504:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004506:	f043 0310 	orr.w	r3, r3, #16
 800450a:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800450c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	65a3      	str	r3, [r4, #88]	; 0x58
 8004514:	e755      	b.n	80043c2 <HAL_ADC_IRQHandler+0xf6>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004516:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004518:	f043 0310 	orr.w	r3, r3, #16
 800451c:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800451e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	65a3      	str	r3, [r4, #88]	; 0x58
 8004526:	e714      	b.n	8004352 <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004528:	4a04      	ldr	r2, [pc, #16]	; (800453c <HAL_ADC_IRQHandler+0x270>)
 800452a:	e77f      	b.n	800442c <HAL_ADC_IRQHandler+0x160>
 800452c:	40022000 	.word	0x40022000
 8004530:	58026300 	.word	0x58026300
 8004534:	40022100 	.word	0x40022100
 8004538:	02002000 	.word	0x02002000
 800453c:	40022300 	.word	0x40022300

08004540 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004540:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004542:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004544:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004548:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 800454a:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800454c:	d11d      	bne.n	800458a <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800454e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004554:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004556:	680a      	ldr	r2, [r1, #0]
 8004558:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800455c:	68ca      	ldr	r2, [r1, #12]
 800455e:	d01b      	beq.n	8004598 <ADC_DMAConvCplt+0x58>
 8004560:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8004564:	d10d      	bne.n	8004582 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004566:	68ca      	ldr	r2, [r1, #12]
 8004568:	0494      	lsls	r4, r2, #18
 800456a:	d40a      	bmi.n	8004582 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800456c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800456e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004572:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004576:	04d1      	lsls	r1, r2, #19
 8004578:	d403      	bmi.n	8004582 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800457a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800457c:	f042 0201 	orr.w	r2, r2, #1
 8004580:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8004582:	4618      	mov	r0, r3
 8004584:	f7fd ff5c 	bl	8002440 <HAL_ADC_ConvCpltCallback>
}
 8004588:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800458a:	06d2      	lsls	r2, r2, #27
 800458c:	d40a      	bmi.n	80045a4 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800458e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004596:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004598:	0790      	lsls	r0, r2, #30
 800459a:	d0e7      	beq.n	800456c <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 800459c:	4618      	mov	r0, r3
 800459e:	f7fd ff4f 	bl	8002440 <HAL_ADC_ConvCpltCallback>
 80045a2:	e7f1      	b.n	8004588 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff fe8f 	bl	80042c8 <HAL_ADC_ErrorCallback>
}
 80045aa:	bd10      	pop	{r4, pc}

080045ac <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ac:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80045ae:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80045b0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80045b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045b6:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80045b8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80045ba:	f043 0304 	orr.w	r3, r3, #4
 80045be:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045c0:	f7ff fe82 	bl	80042c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045c4:	bd08      	pop	{r3, pc}
 80045c6:	bf00      	nop

080045c8 <HAL_ADC_ConfigChannel>:
{
 80045c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 80045ca:	2200      	movs	r2, #0
{
 80045cc:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80045ce:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80045d0:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80045d4:	2a01      	cmp	r2, #1
 80045d6:	f000 813a 	beq.w	800484e <HAL_ADC_ConfigChannel+0x286>
 80045da:	4603      	mov	r3, r0
 80045dc:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045de:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80045e0:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045e4:	6894      	ldr	r4, [r2, #8]
 80045e6:	0766      	lsls	r6, r4, #29
 80045e8:	f100 8099 	bmi.w	800471e <HAL_ADC_ConfigChannel+0x156>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80045ec:	680c      	ldr	r4, [r1, #0]
 80045ee:	f3c4 0513 	ubfx	r5, r4, #0, #20
 80045f2:	2d00      	cmp	r5, #0
 80045f4:	f040 809e 	bne.w	8004734 <HAL_ADC_ConfigChannel+0x16c>
 80045f8:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 80045fc:	fa00 f00c 	lsl.w	r0, r0, ip
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004600:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8004602:	261f      	movs	r6, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004604:	69d5      	ldr	r5, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004606:	09a7      	lsrs	r7, r4, #6
  MODIFY_REG(*preg,
 8004608:	4034      	ands	r4, r6
 800460a:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800460c:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8004610:	f007 070c 	and.w	r7, r7, #12
  MODIFY_REG(*preg,
 8004614:	40a6      	lsls	r6, r4
 8004616:	61d0      	str	r0, [r2, #28]
 8004618:	fa0c f404 	lsl.w	r4, ip, r4
 800461c:	5978      	ldr	r0, [r7, r5]
 800461e:	ea20 0006 	bic.w	r0, r0, r6
 8004622:	4320      	orrs	r0, r4
 8004624:	5178      	str	r0, [r7, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004626:	6890      	ldr	r0, [r2, #8]
 8004628:	0745      	lsls	r5, r0, #29
 800462a:	f100 8081 	bmi.w	8004730 <HAL_ADC_ConfigChannel+0x168>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800462e:	6895      	ldr	r5, [r2, #8]
 8004630:	f015 0508 	ands.w	r5, r5, #8
 8004634:	d157      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x11e>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004636:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004638:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 800463c:	2007      	movs	r0, #7
 800463e:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004640:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8004644:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004648:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 800464c:	fa00 fe04 	lsl.w	lr, r0, r4
 8004650:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004654:	4fc4      	ldr	r7, [pc, #784]	; (8004968 <HAL_ADC_ConfigChannel+0x3a0>)
 8004656:	f85c 0006 	ldr.w	r0, [ip, r6]
 800465a:	ea20 000e 	bic.w	r0, r0, lr
 800465e:	4320      	orrs	r0, r4
 8004660:	f84c 0006 	str.w	r0, [ip, r6]
 8004664:	6838      	ldr	r0, [r7, #0]
 8004666:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 800466a:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 800466e:	f000 8098 	beq.w	80047a2 <HAL_ADC_ConfigChannel+0x1da>
 8004672:	68d0      	ldr	r0, [r2, #12]
 8004674:	68d6      	ldr	r6, [r2, #12]
 8004676:	f010 0f10 	tst.w	r0, #16
 800467a:	6948      	ldr	r0, [r1, #20]
 800467c:	f040 8107 	bne.w	800488e <HAL_ADC_ConfigChannel+0x2c6>
 8004680:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8004684:	0076      	lsls	r6, r6, #1
 8004686:	fa00 f606 	lsl.w	r6, r0, r6
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800468a:	690f      	ldr	r7, [r1, #16]
 800468c:	2f04      	cmp	r7, #4
 800468e:	f000 80e1 	beq.w	8004854 <HAL_ADC_ConfigChannel+0x28c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004692:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 8004696:	6808      	ldr	r0, [r1, #0]
 8004698:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 800469c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80046a0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80046a4:	ea40 000c 	orr.w	r0, r0, ip
 80046a8:	4330      	orrs	r0, r6
 80046aa:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80046ae:	7e4f      	ldrb	r7, [r1, #25]
 80046b0:	690e      	ldr	r6, [r1, #16]
 80046b2:	2f01      	cmp	r7, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80046b4:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80046b8:	bf0c      	ite	eq
 80046ba:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80046be:	2700      	movne	r7, #0
 80046c0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80046c4:	4338      	orrs	r0, r7
 80046c6:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80046ca:	7e0c      	ldrb	r4, [r1, #24]
 80046cc:	6908      	ldr	r0, [r1, #16]
 80046ce:	2c01      	cmp	r4, #1
 80046d0:	d104      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x114>
 80046d2:	f000 001f 	and.w	r0, r0, #31
 80046d6:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80046da:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80046dc:	6910      	ldr	r0, [r2, #16]
 80046de:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 80046e2:	4305      	orrs	r5, r0
 80046e4:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046e6:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046e8:	07c4      	lsls	r4, r0, #31
 80046ea:	d416      	bmi.n	800471a <HAL_ADC_ConfigChannel+0x152>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80046ec:	68ce      	ldr	r6, [r1, #12]
 80046ee:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80046f0:	f006 0718 	and.w	r7, r6, #24
 80046f4:	4c9d      	ldr	r4, [pc, #628]	; (800496c <HAL_ADC_ConfigChannel+0x3a4>)
 80046f6:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 80046fa:	40fc      	lsrs	r4, r7
 80046fc:	f3c0 0713 	ubfx	r7, r0, #0, #20
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004700:	f8df c28c 	ldr.w	ip, [pc, #652]	; 8004990 <HAL_ADC_ConfigChannel+0x3c8>
 8004704:	4004      	ands	r4, r0
 8004706:	ea25 0507 	bic.w	r5, r5, r7
 800470a:	4566      	cmp	r6, ip
 800470c:	ea44 0405 	orr.w	r4, r4, r5
 8004710:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
 8004714:	d04d      	beq.n	80047b2 <HAL_ADC_ConfigChannel+0x1ea>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004716:	2800      	cmp	r0, #0
 8004718:	db15      	blt.n	8004746 <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800471a:	2000      	movs	r0, #0
 800471c:	e003      	b.n	8004726 <HAL_ADC_ConfigChannel+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800471e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004720:	f042 0220 	orr.w	r2, r2, #32
 8004724:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800472c:	b003      	add	sp, #12
 800472e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004730:	6890      	ldr	r0, [r2, #8]
 8004732:	e7d8      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x11e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004734:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004738:	b115      	cbz	r5, 8004740 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800473a:	fab5 f585 	clz	r5, r5
 800473e:	40a8      	lsls	r0, r5
 8004740:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8004744:	e75c      	b.n	8004600 <HAL_ADC_ConfigChannel+0x38>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004746:	498a      	ldr	r1, [pc, #552]	; (8004970 <HAL_ADC_ConfigChannel+0x3a8>)
 8004748:	428a      	cmp	r2, r1
 800474a:	f000 80c6 	beq.w	80048da <HAL_ADC_ConfigChannel+0x312>
 800474e:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8004752:	428a      	cmp	r2, r1
 8004754:	f000 80c1 	beq.w	80048da <HAL_ADC_ConfigChannel+0x312>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004758:	4e86      	ldr	r6, [pc, #536]	; (8004974 <HAL_ADC_ConfigChannel+0x3ac>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800475a:	4d87      	ldr	r5, [pc, #540]	; (8004978 <HAL_ADC_ConfigChannel+0x3b0>)
 800475c:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800475e:	68b4      	ldr	r4, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004760:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004764:	43e4      	mvns	r4, r4
 8004766:	f004 0401 	and.w	r4, r4, #1
 800476a:	2c00      	cmp	r4, #0
 800476c:	f000 80c3 	beq.w	80048f6 <HAL_ADC_ConfigChannel+0x32e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004770:	4c82      	ldr	r4, [pc, #520]	; (800497c <HAL_ADC_ConfigChannel+0x3b4>)
 8004772:	42a0      	cmp	r0, r4
 8004774:	f000 810e 	beq.w	8004994 <HAL_ADC_ConfigChannel+0x3cc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004778:	4c81      	ldr	r4, [pc, #516]	; (8004980 <HAL_ADC_ConfigChannel+0x3b8>)
 800477a:	42a0      	cmp	r0, r4
 800477c:	f000 812d 	beq.w	80049da <HAL_ADC_ConfigChannel+0x412>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004780:	4c80      	ldr	r4, [pc, #512]	; (8004984 <HAL_ADC_ConfigChannel+0x3bc>)
 8004782:	42a0      	cmp	r0, r4
 8004784:	d1c9      	bne.n	800471a <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 8004786:	0249      	lsls	r1, r1, #9
 8004788:	d4c7      	bmi.n	800471a <HAL_ADC_ConfigChannel+0x152>
 800478a:	497a      	ldr	r1, [pc, #488]	; (8004974 <HAL_ADC_ConfigChannel+0x3ac>)
 800478c:	428a      	cmp	r2, r1
 800478e:	d1c4      	bne.n	800471a <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004790:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004792:	2000      	movs	r0, #0
 8004794:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004798:	4332      	orrs	r2, r6
 800479a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800479e:	60aa      	str	r2, [r5, #8]
}
 80047a0:	e7c1      	b.n	8004726 <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80047a2:	68d6      	ldr	r6, [r2, #12]
 80047a4:	6948      	ldr	r0, [r1, #20]
 80047a6:	f3c6 0682 	ubfx	r6, r6, #2, #3
 80047aa:	0076      	lsls	r6, r6, #1
 80047ac:	fa00 f606 	lsl.w	r6, r0, r6
 80047b0:	e76b      	b.n	800468a <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047b2:	2f00      	cmp	r7, #0
 80047b4:	d071      	beq.n	800489a <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b6:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80047ba:	2c00      	cmp	r4, #0
 80047bc:	f000 80af 	beq.w	800491e <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 80047c0:	fab4 f484 	clz	r4, r4
 80047c4:	3401      	adds	r4, #1
 80047c6:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047ca:	2c09      	cmp	r4, #9
 80047cc:	f240 80a7 	bls.w	800491e <HAL_ADC_ConfigChannel+0x356>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80047d4:	2d00      	cmp	r5, #0
 80047d6:	f000 8114 	beq.w	8004a02 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80047da:	fab5 f585 	clz	r5, r5
 80047de:	3501      	adds	r5, #1
 80047e0:	06ad      	lsls	r5, r5, #26
 80047e2:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e6:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80047ea:	2c00      	cmp	r4, #0
 80047ec:	f000 8107 	beq.w	80049fe <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 80047f0:	2601      	movs	r6, #1
 80047f2:	fab4 f484 	clz	r4, r4
 80047f6:	4434      	add	r4, r6
 80047f8:	f004 041f 	and.w	r4, r4, #31
 80047fc:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004800:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004802:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004806:	2800      	cmp	r0, #0
 8004808:	f000 80f7 	beq.w	80049fa <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 800480c:	fab0 f480 	clz	r4, r0
 8004810:	3401      	adds	r4, #1
 8004812:	f004 041f 	and.w	r4, r4, #31
 8004816:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800481a:	f1a4 001e 	sub.w	r0, r4, #30
 800481e:	0500      	lsls	r0, r0, #20
 8004820:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004824:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 8004826:	f04f 0c07 	mov.w	ip, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800482a:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 800482e:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004830:	0dc7      	lsrs	r7, r0, #23
  MODIFY_REG(*preg,
 8004832:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004836:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 800483a:	fa0c fc00 	lsl.w	ip, ip, r0
 800483e:	4086      	lsls	r6, r0
 8004840:	597c      	ldr	r4, [r7, r5]
 8004842:	ea24 000c 	bic.w	r0, r4, ip
 8004846:	4330      	orrs	r0, r6
 8004848:	5178      	str	r0, [r7, r5]
 800484a:	6808      	ldr	r0, [r1, #0]
}
 800484c:	e763      	b.n	8004716 <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 800484e:	2002      	movs	r0, #2
}
 8004850:	b003      	add	sp, #12
 8004852:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004854:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8004856:	680d      	ldr	r5, [r1, #0]
 8004858:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800485c:	06ac      	lsls	r4, r5, #26
 800485e:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8004862:	d030      	beq.n	80048c6 <HAL_ADC_ConfigChannel+0x2fe>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004864:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8004866:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800486a:	4284      	cmp	r4, r0
 800486c:	d026      	beq.n	80048bc <HAL_ADC_ConfigChannel+0x2f4>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800486e:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004870:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004874:	4284      	cmp	r4, r0
 8004876:	d02b      	beq.n	80048d0 <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004878:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800487a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800487e:	4284      	cmp	r4, r0
 8004880:	f47f af31 	bne.w	80046e6 <HAL_ADC_ConfigChannel+0x11e>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004884:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8004886:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800488a:	66d0      	str	r0, [r2, #108]	; 0x6c
 800488c:	e72b      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x11e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800488e:	0876      	lsrs	r6, r6, #1
 8004890:	f006 0608 	and.w	r6, r6, #8
 8004894:	fa00 f606 	lsl.w	r6, r0, r6
 8004898:	e6f7      	b.n	800468a <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800489a:	0e80      	lsrs	r0, r0, #26
 800489c:	1c44      	adds	r4, r0, #1
 800489e:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048a2:	2e09      	cmp	r6, #9
 80048a4:	d82d      	bhi.n	8004902 <HAL_ADC_ConfigChannel+0x33a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048a6:	06a5      	lsls	r5, r4, #26
 80048a8:	2401      	movs	r4, #1
 80048aa:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80048ae:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80048b2:	fa04 f606 	lsl.w	r6, r4, r6
 80048b6:	0500      	lsls	r0, r0, #20
 80048b8:	4335      	orrs	r5, r6
 80048ba:	e7b3      	b.n	8004824 <HAL_ADC_ConfigChannel+0x25c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80048bc:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80048be:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80048c2:	6650      	str	r0, [r2, #100]	; 0x64
 80048c4:	e7d3      	b.n	800486e <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80048c6:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80048c8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80048cc:	6610      	str	r0, [r2, #96]	; 0x60
 80048ce:	e7c9      	b.n	8004864 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80048d0:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80048d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80048d6:	6690      	str	r0, [r2, #104]	; 0x68
 80048d8:	e7ce      	b.n	8004878 <HAL_ADC_ConfigChannel+0x2b0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80048da:	492b      	ldr	r1, [pc, #172]	; (8004988 <HAL_ADC_ConfigChannel+0x3c0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048dc:	4e24      	ldr	r6, [pc, #144]	; (8004970 <HAL_ADC_ConfigChannel+0x3a8>)
 80048de:	4c2b      	ldr	r4, [pc, #172]	; (800498c <HAL_ADC_ConfigChannel+0x3c4>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048e0:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80048e2:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048e4:	68b7      	ldr	r7, [r6, #8]
 80048e6:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80048e8:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048ec:	433c      	orrs	r4, r7
 80048ee:	43e4      	mvns	r4, r4
 80048f0:	f004 0401 	and.w	r4, r4, #1
 80048f4:	e739      	b.n	800476a <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80048f8:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048fa:	f042 0220 	orr.w	r2, r2, #32
 80048fe:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8004900:	e711      	b.n	8004726 <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004902:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8004906:	2701      	movs	r7, #1
 8004908:	06a5      	lsls	r5, r4, #26
 800490a:	381e      	subs	r0, #30
 800490c:	fa07 f606 	lsl.w	r6, r7, r6
 8004910:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004914:	0500      	lsls	r0, r0, #20
 8004916:	4335      	orrs	r5, r6
 8004918:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 800491c:	e782      	b.n	8004824 <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004922:	2d00      	cmp	r5, #0
 8004924:	d075      	beq.n	8004a12 <HAL_ADC_ConfigChannel+0x44a>
  return __builtin_clz(value);
 8004926:	fab5 f585 	clz	r5, r5
 800492a:	3501      	adds	r5, #1
 800492c:	06ad      	lsls	r5, r5, #26
 800492e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004932:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004936:	2c00      	cmp	r4, #0
 8004938:	d069      	beq.n	8004a0e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800493a:	2601      	movs	r6, #1
 800493c:	fab4 f484 	clz	r4, r4
 8004940:	4434      	add	r4, r6
 8004942:	f004 041f 	and.w	r4, r4, #31
 8004946:	fa06 f404 	lsl.w	r4, r6, r4
 800494a:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004950:	2800      	cmp	r0, #0
 8004952:	d059      	beq.n	8004a08 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8004954:	fab0 f480 	clz	r4, r0
 8004958:	3401      	adds	r4, #1
 800495a:	f004 041f 	and.w	r4, r4, #31
 800495e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004962:	0520      	lsls	r0, r4, #20
 8004964:	e75e      	b.n	8004824 <HAL_ADC_ConfigChannel+0x25c>
 8004966:	bf00      	nop
 8004968:	5c001000 	.word	0x5c001000
 800496c:	000fffff 	.word	0x000fffff
 8004970:	40022000 	.word	0x40022000
 8004974:	58026000 	.word	0x58026000
 8004978:	58026300 	.word	0x58026300
 800497c:	cb840000 	.word	0xcb840000
 8004980:	c7520000 	.word	0xc7520000
 8004984:	cfb80000 	.word	0xcfb80000
 8004988:	40022300 	.word	0x40022300
 800498c:	40022100 	.word	0x40022100
 8004990:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004994:	0208      	lsls	r0, r1, #8
 8004996:	f53f aec0 	bmi.w	800471a <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800499a:	491f      	ldr	r1, [pc, #124]	; (8004a18 <HAL_ADC_ConfigChannel+0x450>)
 800499c:	428a      	cmp	r2, r1
 800499e:	f47f aebc 	bne.w	800471a <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049a2:	4a1e      	ldr	r2, [pc, #120]	; (8004a1c <HAL_ADC_ConfigChannel+0x454>)
 80049a4:	481e      	ldr	r0, [pc, #120]	; (8004a20 <HAL_ADC_ConfigChannel+0x458>)
 80049a6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80049a8:	68a9      	ldr	r1, [r5, #8]
 80049aa:	0992      	lsrs	r2, r2, #6
 80049ac:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80049b0:	fba0 0202 	umull	r0, r2, r0, r2
 80049b4:	4331      	orrs	r1, r6
 80049b6:	0992      	lsrs	r2, r2, #6
 80049b8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80049bc:	3201      	adds	r2, #1
 80049be:	60a9      	str	r1, [r5, #8]
 80049c0:	0052      	lsls	r2, r2, #1
 80049c2:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80049c4:	9a01      	ldr	r2, [sp, #4]
 80049c6:	2a00      	cmp	r2, #0
 80049c8:	f43f aea7 	beq.w	800471a <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 80049cc:	9a01      	ldr	r2, [sp, #4]
 80049ce:	3a01      	subs	r2, #1
 80049d0:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80049d2:	9a01      	ldr	r2, [sp, #4]
 80049d4:	2a00      	cmp	r2, #0
 80049d6:	d1f9      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x404>
 80049d8:	e69f      	b.n	800471a <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049da:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 80049de:	f47f ae9c 	bne.w	800471a <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049e2:	490d      	ldr	r1, [pc, #52]	; (8004a18 <HAL_ADC_ConfigChannel+0x450>)
 80049e4:	428a      	cmp	r2, r1
 80049e6:	f47f ae98 	bne.w	800471a <HAL_ADC_ConfigChannel+0x152>
 80049ea:	68aa      	ldr	r2, [r5, #8]
 80049ec:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80049f0:	4332      	orrs	r2, r6
 80049f2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80049f6:	60aa      	str	r2, [r5, #8]
}
 80049f8:	e695      	b.n	8004726 <HAL_ADC_ConfigChannel+0x15e>
 80049fa:	480a      	ldr	r0, [pc, #40]	; (8004a24 <HAL_ADC_ConfigChannel+0x45c>)
 80049fc:	e712      	b.n	8004824 <HAL_ADC_ConfigChannel+0x25c>
 80049fe:	2402      	movs	r4, #2
 8004a00:	e6fe      	b.n	8004800 <HAL_ADC_ConfigChannel+0x238>
 8004a02:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004a06:	e6ee      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x21e>
 8004a08:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004a0c:	e70a      	b.n	8004824 <HAL_ADC_ConfigChannel+0x25c>
 8004a0e:	2402      	movs	r4, #2
 8004a10:	e79b      	b.n	800494a <HAL_ADC_ConfigChannel+0x382>
 8004a12:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004a16:	e78c      	b.n	8004932 <HAL_ADC_ConfigChannel+0x36a>
 8004a18:	58026000 	.word	0x58026000
 8004a1c:	24000280 	.word	0x24000280
 8004a20:	053e2d63 	.word	0x053e2d63
 8004a24:	fe500000 	.word	0xfe500000

08004a28 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8004a28:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8004a2c:	4603      	mov	r3, r0
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8004a2e:	6848      	ldr	r0, [r1, #4]
  __HAL_LOCK(hadc);
 8004a30:	2a01      	cmp	r2, #1
 8004a32:	f000 80e8 	beq.w	8004c06 <HAL_ADC_AnalogWDGConfig+0x1de>
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a36:	681a      	ldr	r2, [r3, #0]
{
 8004a38:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 8004a3a:	2401      	movs	r4, #1
 8004a3c:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a40:	6894      	ldr	r4, [r2, #8]
 8004a42:	0765      	lsls	r5, r4, #29
 8004a44:	d42a      	bmi.n	8004a9c <HAL_ADC_AnalogWDGConfig+0x74>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004a46:	6894      	ldr	r4, [r2, #8]
 8004a48:	0724      	lsls	r4, r4, #28
 8004a4a:	d428      	bmi.n	8004a9e <HAL_ADC_AnalogWDGConfig+0x76>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8004a4c:	680c      	ldr	r4, [r1, #0]
 8004a4e:	4dc5      	ldr	r5, [pc, #788]	; (8004d64 <HAL_ADC_AnalogWDGConfig+0x33c>)
 8004a50:	42ac      	cmp	r4, r5
 8004a52:	f000 8094 	beq.w	8004b7e <HAL_ADC_AnalogWDGConfig+0x156>
      switch (AnalogWDGConfig->WatchdogMode)
 8004a56:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8004a5a:	d030      	beq.n	8004abe <HAL_ADC_AnalogWDGConfig+0x96>
 8004a5c:	d829      	bhi.n	8004ab2 <HAL_ADC_AnalogWDGConfig+0x8a>
 8004a5e:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8004a62:	d02c      	beq.n	8004abe <HAL_ADC_AnalogWDGConfig+0x96>
 8004a64:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004a68:	d029      	beq.n	8004abe <HAL_ADC_AnalogWDGConfig+0x96>
 8004a6a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004a6e:	d026      	beq.n	8004abe <HAL_ADC_AnalogWDGConfig+0x96>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004a70:	f004 0c01 	and.w	ip, r4, #1
  MODIFY_REG(*preg,
 8004a74:	4ebc      	ldr	r6, [pc, #752]	; (8004d68 <HAL_ADC_AnalogWDGConfig+0x340>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004a76:	f3c4 5501 	ubfx	r5, r4, #20, #2
 8004a7a:	f102 000c 	add.w	r0, r2, #12
 8004a7e:	ea4f 07cc 	mov.w	r7, ip, lsl #3
  MODIFY_REG(*preg,
 8004a82:	4026      	ands	r6, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004a84:	eb07 040c 	add.w	r4, r7, ip
 8004a88:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  MODIFY_REG(*preg,
 8004a8c:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8004a90:	ea25 0506 	bic.w	r5, r5, r6
 8004a94:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8004a98:	680c      	ldr	r4, [r1, #0]
}
 8004a9a:	e023      	b.n	8004ae4 <HAL_ADC_AnalogWDGConfig+0xbc>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004a9c:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8004aa0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aa2:	f042 0220 	orr.w	r2, r2, #32
 8004aa6:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8004aae:	bcf0      	pop	{r4, r5, r6, r7}
 8004ab0:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 8004ab2:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004ab6:	d002      	beq.n	8004abe <HAL_ADC_AnalogWDGConfig+0x96>
 8004ab8:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8004abc:	d1d8      	bne.n	8004a70 <HAL_ADC_AnalogWDGConfig+0x48>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004abe:	48ab      	ldr	r0, [pc, #684]	; (8004d6c <HAL_ADC_AnalogWDGConfig+0x344>)
 8004ac0:	4284      	cmp	r4, r0
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004ac2:	6888      	ldr	r0, [r1, #8]
 8004ac4:	f3c0 0513 	ubfx	r5, r0, #0, #20
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004ac8:	f000 80d7 	beq.w	8004c7a <HAL_ADC_AnalogWDGConfig+0x252>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004acc:	2d00      	cmp	r5, #0
 8004ace:	f040 80eb 	bne.w	8004ca8 <HAL_ADC_AnalogWDGConfig+0x280>
 8004ad2:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004ad6:	2501      	movs	r5, #1
 8004ad8:	4085      	lsls	r5, r0
 8004ada:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
 8004ade:	4328      	orrs	r0, r5
 8004ae0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004ae4:	48a2      	ldr	r0, [pc, #648]	; (8004d70 <HAL_ADC_AnalogWDGConfig+0x348>)
 8004ae6:	6800      	ldr	r0, [r0, #0]
 8004ae8:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8004aec:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8004af0:	68d0      	ldr	r0, [r2, #12]
 8004af2:	f000 80b0 	beq.w	8004c56 <HAL_ADC_AnalogWDGConfig+0x22e>
 8004af6:	f010 0f10 	tst.w	r0, #16
 8004afa:	690d      	ldr	r5, [r1, #16]
 8004afc:	68d0      	ldr	r0, [r2, #12]
 8004afe:	f040 80b1 	bne.w	8004c64 <HAL_ADC_AnalogWDGConfig+0x23c>
 8004b02:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004b06:	0040      	lsls	r0, r0, #1
 8004b08:	fa05 f000 	lsl.w	r0, r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004b0c:	4d98      	ldr	r5, [pc, #608]	; (8004d70 <HAL_ADC_AnalogWDGConfig+0x348>)
 8004b0e:	682d      	ldr	r5, [r5, #0]
 8004b10:	f005 4570 	and.w	r5, r5, #4026531840	; 0xf0000000
 8004b14:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8004b18:	f000 8096 	beq.w	8004c48 <HAL_ADC_AnalogWDGConfig+0x220>
 8004b1c:	68d5      	ldr	r5, [r2, #12]
 8004b1e:	68d6      	ldr	r6, [r2, #12]
 8004b20:	f015 0f10 	tst.w	r5, #16
 8004b24:	694d      	ldr	r5, [r1, #20]
 8004b26:	f040 80a3 	bne.w	8004c70 <HAL_ADC_AnalogWDGConfig+0x248>
 8004b2a:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8004b2e:	0076      	lsls	r6, r6, #1
 8004b30:	40b5      	lsls	r5, r6
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004b32:	4e8e      	ldr	r6, [pc, #568]	; (8004d6c <HAL_ADC_AnalogWDGConfig+0x344>)
 8004b34:	42b4      	cmp	r4, r6
 8004b36:	d068      	beq.n	8004c0a <HAL_ADC_AnalogWDGConfig+0x1e2>
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8004b38:	f8d2 40b8 	ldr.w	r4, [r2, #184]	; 0xb8
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004b3c:	f44f 7600 	mov.w	r6, #512	; 0x200
 8004b40:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004b44:	4325      	orrs	r5, r4
 8004b46:	f8c2 50b8 	str.w	r5, [r2, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8004b4a:	f8d2 40bc 	ldr.w	r4, [r2, #188]	; 0xbc
 8004b4e:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004b52:	4320      	orrs	r0, r4
 8004b54:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004b58:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004b5a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8004b5e:	6558      	str	r0, [r3, #84]	; 0x54
 8004b60:	6016      	str	r6, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8004b62:	7b09      	ldrb	r1, [r1, #12]
 8004b64:	2901      	cmp	r1, #1
 8004b66:	f000 8099 	beq.w	8004c9c <HAL_ADC_AnalogWDGConfig+0x274>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004b6a:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8004b72:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8004b7a:	bcf0      	pop	{r4, r5, r6, r7}
 8004b7c:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 8004b7e:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8004b82:	f000 8109 	beq.w	8004d98 <HAL_ADC_AnalogWDGConfig+0x370>
 8004b86:	d82b      	bhi.n	8004be0 <HAL_ADC_AnalogWDGConfig+0x1b8>
 8004b88:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8004b8c:	f000 80f9 	beq.w	8004d82 <HAL_ADC_AnalogWDGConfig+0x35a>
 8004b90:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004b94:	d119      	bne.n	8004bca <HAL_ADC_AnalogWDGConfig+0x1a2>
  MODIFY_REG(*preg,
 8004b96:	68d4      	ldr	r4, [r2, #12]
 8004b98:	4876      	ldr	r0, [pc, #472]	; (8004d74 <HAL_ADC_AnalogWDGConfig+0x34c>)
 8004b9a:	4020      	ands	r0, r4
 8004b9c:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8004ba0:	60d0      	str	r0, [r2, #12]
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004ba2:	4873      	ldr	r0, [pc, #460]	; (8004d70 <HAL_ADC_AnalogWDGConfig+0x348>)
 8004ba4:	6800      	ldr	r0, [r0, #0]
 8004ba6:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8004baa:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8004bae:	68d0      	ldr	r0, [r2, #12]
 8004bb0:	f000 8083 	beq.w	8004cba <HAL_ADC_AnalogWDGConfig+0x292>
 8004bb4:	f010 0f10 	tst.w	r0, #16
 8004bb8:	690d      	ldr	r5, [r1, #16]
 8004bba:	68d0      	ldr	r0, [r2, #12]
 8004bbc:	f040 80b9 	bne.w	8004d32 <HAL_ADC_AnalogWDGConfig+0x30a>
 8004bc0:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004bc4:	0040      	lsls	r0, r0, #1
 8004bc6:	4085      	lsls	r5, r0
 8004bc8:	e07c      	b.n	8004cc4 <HAL_ADC_AnalogWDGConfig+0x29c>
      switch (AnalogWDGConfig->WatchdogMode)
 8004bca:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004bce:	f040 80d3 	bne.w	8004d78 <HAL_ADC_AnalogWDGConfig+0x350>
 8004bd2:	68d4      	ldr	r4, [r2, #12]
 8004bd4:	4867      	ldr	r0, [pc, #412]	; (8004d74 <HAL_ADC_AnalogWDGConfig+0x34c>)
 8004bd6:	4020      	ands	r0, r4
 8004bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004bdc:	60d0      	str	r0, [r2, #12]
}
 8004bde:	e7e0      	b.n	8004ba2 <HAL_ADC_AnalogWDGConfig+0x17a>
 8004be0:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004be4:	f000 80e3 	beq.w	8004dae <HAL_ADC_AnalogWDGConfig+0x386>
 8004be8:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8004bec:	f040 80c4 	bne.w	8004d78 <HAL_ADC_AnalogWDGConfig+0x350>
  MODIFY_REG(*preg,
 8004bf0:	68d5      	ldr	r5, [r2, #12]
 8004bf2:	6888      	ldr	r0, [r1, #8]
 8004bf4:	4c5f      	ldr	r4, [pc, #380]	; (8004d74 <HAL_ADC_AnalogWDGConfig+0x34c>)
 8004bf6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004bfa:	402c      	ands	r4, r5
 8004bfc:	4320      	orrs	r0, r4
 8004bfe:	f040 70e0 	orr.w	r0, r0, #29360128	; 0x1c00000
 8004c02:	60d0      	str	r0, [r2, #12]
}
 8004c04:	e7cd      	b.n	8004ba2 <HAL_ADC_AnalogWDGConfig+0x17a>
  __HAL_LOCK(hadc);
 8004c06:	2002      	movs	r0, #2
}
 8004c08:	4770      	bx	lr
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8004c0a:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004c0e:	f44f 7680 	mov.w	r6, #256	; 0x100
 8004c12:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004c16:	4325      	orrs	r5, r4
 8004c18:	f8c2 50b0 	str.w	r5, [r2, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8004c1c:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
 8004c20:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004c24:	4320      	orrs	r0, r4
 8004c26:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004c2a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004c2c:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 8004c30:	6558      	str	r0, [r3, #84]	; 0x54
 8004c32:	6016      	str	r6, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8004c34:	7b09      	ldrb	r1, [r1, #12]
 8004c36:	2901      	cmp	r1, #1
 8004c38:	f000 808d 	beq.w	8004d56 <HAL_ADC_AnalogWDGConfig+0x32e>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004c3c:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c3e:	2000      	movs	r0, #0
 8004c40:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004c44:	6051      	str	r1, [r2, #4]
}
 8004c46:	e72f      	b.n	8004aa8 <HAL_ADC_AnalogWDGConfig+0x80>
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004c48:	68d6      	ldr	r6, [r2, #12]
 8004c4a:	694d      	ldr	r5, [r1, #20]
 8004c4c:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8004c50:	0076      	lsls	r6, r6, #1
 8004c52:	40b5      	lsls	r5, r6
 8004c54:	e76d      	b.n	8004b32 <HAL_ADC_AnalogWDGConfig+0x10a>
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004c56:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004c5a:	690d      	ldr	r5, [r1, #16]
 8004c5c:	0040      	lsls	r0, r0, #1
 8004c5e:	fa05 f000 	lsl.w	r0, r5, r0
 8004c62:	e753      	b.n	8004b0c <HAL_ADC_AnalogWDGConfig+0xe4>
 8004c64:	0840      	lsrs	r0, r0, #1
 8004c66:	f000 0008 	and.w	r0, r0, #8
 8004c6a:	fa05 f000 	lsl.w	r0, r5, r0
 8004c6e:	e74d      	b.n	8004b0c <HAL_ADC_AnalogWDGConfig+0xe4>
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004c70:	0876      	lsrs	r6, r6, #1
 8004c72:	f006 0608 	and.w	r6, r6, #8
 8004c76:	40b5      	lsls	r5, r6
 8004c78:	e75b      	b.n	8004b32 <HAL_ADC_AnalogWDGConfig+0x10a>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004c7a:	2d00      	cmp	r5, #0
 8004c7c:	d064      	beq.n	8004d48 <HAL_ADC_AnalogWDGConfig+0x320>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004c82:	2800      	cmp	r0, #0
 8004c84:	f000 809a 	beq.w	8004dbc <HAL_ADC_AnalogWDGConfig+0x394>
  return __builtin_clz(value);
 8004c88:	fab0 f080 	clz	r0, r0
 8004c8c:	2501      	movs	r5, #1
 8004c8e:	4085      	lsls	r5, r0
 8004c90:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
 8004c94:	4328      	orrs	r0, r5
 8004c96:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
 8004c9a:	e723      	b.n	8004ae4 <HAL_ADC_AnalogWDGConfig+0xbc>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004c9c:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004ca4:	6051      	str	r1, [r2, #4]
}
 8004ca6:	e6ff      	b.n	8004aa8 <HAL_ADC_AnalogWDGConfig+0x80>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca8:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d050      	beq.n	8004d52 <HAL_ADC_AnalogWDGConfig+0x32a>
  return __builtin_clz(value);
 8004cb0:	fab0 f080 	clz	r0, r0
 8004cb4:	2501      	movs	r5, #1
 8004cb6:	4085      	lsls	r5, r0
 8004cb8:	e70f      	b.n	8004ada <HAL_ADC_AnalogWDGConfig+0xb2>
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004cba:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004cbe:	690d      	ldr	r5, [r1, #16]
 8004cc0:	0040      	lsls	r0, r0, #1
 8004cc2:	4085      	lsls	r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004cc4:	482a      	ldr	r0, [pc, #168]	; (8004d70 <HAL_ADC_AnalogWDGConfig+0x348>)
 8004cc6:	6800      	ldr	r0, [r0, #0]
 8004cc8:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8004ccc:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8004cd0:	68d0      	ldr	r0, [r2, #12]
 8004cd2:	d00a      	beq.n	8004cea <HAL_ADC_AnalogWDGConfig+0x2c2>
 8004cd4:	f010 0f10 	tst.w	r0, #16
 8004cd8:	694c      	ldr	r4, [r1, #20]
 8004cda:	68d0      	ldr	r0, [r2, #12]
 8004cdc:	d12e      	bne.n	8004d3c <HAL_ADC_AnalogWDGConfig+0x314>
 8004cde:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004ce2:	0040      	lsls	r0, r0, #1
 8004ce4:	fa04 f000 	lsl.w	r0, r4, r0
 8004ce8:	e005      	b.n	8004cf6 <HAL_ADC_AnalogWDGConfig+0x2ce>
 8004cea:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004cee:	694c      	ldr	r4, [r1, #20]
 8004cf0:	0040      	lsls	r0, r0, #1
 8004cf2:	fa04 f000 	lsl.w	r0, r4, r0
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8004cf6:	6a14      	ldr	r4, [r2, #32]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004cf8:	2680      	movs	r6, #128	; 0x80
 8004cfa:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004cfe:	4304      	orrs	r4, r0
 8004d00:	6214      	str	r4, [r2, #32]
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8004d02:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004d04:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 8004d08:	4328      	orrs	r0, r5
 8004d0a:	6250      	str	r0, [r2, #36]	; 0x24
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004d0c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004d0e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8004d12:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d14:	2000      	movs	r0, #0
 8004d16:	6016      	str	r6, [r2, #0]
      if (AnalogWDGConfig->ITMode == ENABLE)
 8004d18:	7b09      	ldrb	r1, [r1, #12]
 8004d1a:	2901      	cmp	r1, #1
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004d1c:	6851      	ldr	r1, [r2, #4]
 8004d1e:	bf0c      	ite	eq
 8004d20:	4331      	orreq	r1, r6
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004d22:	f021 0180 	bicne.w	r1, r1, #128	; 0x80
 8004d26:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8004d2e:	bcf0      	pop	{r4, r5, r6, r7}
 8004d30:	4770      	bx	lr
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004d32:	0840      	lsrs	r0, r0, #1
 8004d34:	f000 0008 	and.w	r0, r0, #8
 8004d38:	4085      	lsls	r5, r0
 8004d3a:	e7c3      	b.n	8004cc4 <HAL_ADC_AnalogWDGConfig+0x29c>
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004d3c:	0840      	lsrs	r0, r0, #1
 8004d3e:	f000 0008 	and.w	r0, r0, #8
 8004d42:	fa04 f000 	lsl.w	r0, r4, r0
 8004d46:	e7d6      	b.n	8004cf6 <HAL_ADC_AnalogWDGConfig+0x2ce>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004d48:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004d4c:	2501      	movs	r5, #1
 8004d4e:	4085      	lsls	r5, r0
 8004d50:	e79e      	b.n	8004c90 <HAL_ADC_AnalogWDGConfig+0x268>
 8004d52:	2501      	movs	r5, #1
 8004d54:	e6c1      	b.n	8004ada <HAL_ADC_AnalogWDGConfig+0xb2>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004d56:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d58:	2000      	movs	r0, #0
 8004d5a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004d5e:	6051      	str	r1, [r2, #4]
}
 8004d60:	e6a2      	b.n	8004aa8 <HAL_ADC_AnalogWDGConfig+0x80>
 8004d62:	bf00      	nop
 8004d64:	7dc00000 	.word	0x7dc00000
 8004d68:	7dcfffff 	.word	0x7dcfffff
 8004d6c:	001fffff 	.word	0x001fffff
 8004d70:	5c001000 	.word	0x5c001000
 8004d74:	823fffff 	.word	0x823fffff
  MODIFY_REG(*preg,
 8004d78:	68d4      	ldr	r4, [r2, #12]
 8004d7a:	4811      	ldr	r0, [pc, #68]	; (8004dc0 <HAL_ADC_AnalogWDGConfig+0x398>)
 8004d7c:	4020      	ands	r0, r4
 8004d7e:	60d0      	str	r0, [r2, #12]
}
 8004d80:	e70f      	b.n	8004ba2 <HAL_ADC_AnalogWDGConfig+0x17a>
  MODIFY_REG(*preg,
 8004d82:	68d5      	ldr	r5, [r2, #12]
 8004d84:	6888      	ldr	r0, [r1, #8]
 8004d86:	4c0e      	ldr	r4, [pc, #56]	; (8004dc0 <HAL_ADC_AnalogWDGConfig+0x398>)
 8004d88:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004d8c:	402c      	ands	r4, r5
 8004d8e:	4320      	orrs	r0, r4
 8004d90:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8004d94:	60d0      	str	r0, [r2, #12]
}
 8004d96:	e704      	b.n	8004ba2 <HAL_ADC_AnalogWDGConfig+0x17a>
  MODIFY_REG(*preg,
 8004d98:	68d5      	ldr	r5, [r2, #12]
 8004d9a:	6888      	ldr	r0, [r1, #8]
 8004d9c:	4c08      	ldr	r4, [pc, #32]	; (8004dc0 <HAL_ADC_AnalogWDGConfig+0x398>)
 8004d9e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004da2:	402c      	ands	r4, r5
 8004da4:	4320      	orrs	r0, r4
 8004da6:	f040 70a0 	orr.w	r0, r0, #20971520	; 0x1400000
 8004daa:	60d0      	str	r0, [r2, #12]
}
 8004dac:	e6f9      	b.n	8004ba2 <HAL_ADC_AnalogWDGConfig+0x17a>
  MODIFY_REG(*preg,
 8004dae:	68d4      	ldr	r4, [r2, #12]
 8004db0:	4803      	ldr	r0, [pc, #12]	; (8004dc0 <HAL_ADC_AnalogWDGConfig+0x398>)
 8004db2:	4020      	ands	r0, r4
 8004db4:	f040 70c0 	orr.w	r0, r0, #25165824	; 0x1800000
 8004db8:	60d0      	str	r0, [r2, #12]
}
 8004dba:	e6f2      	b.n	8004ba2 <HAL_ADC_AnalogWDGConfig+0x17a>
 8004dbc:	2501      	movs	r5, #1
 8004dbe:	e767      	b.n	8004c90 <HAL_ADC_AnalogWDGConfig+0x268>
 8004dc0:	823fffff 	.word	0x823fffff

08004dc4 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dc4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	07d1      	lsls	r1, r2, #31
 8004dca:	d501      	bpl.n	8004dd0 <ADC_Enable+0xc>
  return HAL_OK;
 8004dcc:	2000      	movs	r0, #0
}
 8004dce:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004dd0:	6899      	ldr	r1, [r3, #8]
 8004dd2:	4a21      	ldr	r2, [pc, #132]	; (8004e58 <ADC_Enable+0x94>)
 8004dd4:	4211      	tst	r1, r2
{
 8004dd6:	b570      	push	{r4, r5, r6, lr}
 8004dd8:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004dda:	d008      	beq.n	8004dee <ADC_Enable+0x2a>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ddc:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 8004dde:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004de0:	f043 0310 	orr.w	r3, r3, #16
 8004de4:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004de6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004de8:	4303      	orrs	r3, r0
 8004dea:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8004dec:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8004dee:	6899      	ldr	r1, [r3, #8]
 8004df0:	4a1a      	ldr	r2, [pc, #104]	; (8004e5c <ADC_Enable+0x98>)
 8004df2:	400a      	ands	r2, r1
 8004df4:	f042 0201 	orr.w	r2, r2, #1
 8004df8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004dfa:	f7ff fa13 	bl	8004224 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	4a17      	ldr	r2, [pc, #92]	; (8004e60 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8004e02:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d01f      	beq.n	8004e48 <ADC_Enable+0x84>
 8004e08:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d01b      	beq.n	8004e48 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004e10:	4a14      	ldr	r2, [pc, #80]	; (8004e64 <ADC_Enable+0xa0>)
 8004e12:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	07d6      	lsls	r6, r2, #31
 8004e18:	d414      	bmi.n	8004e44 <ADC_Enable+0x80>
  MODIFY_REG(ADCx->CR,
 8004e1a:	4e10      	ldr	r6, [pc, #64]	; (8004e5c <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e1c:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e1e:	07d0      	lsls	r0, r2, #31
 8004e20:	d404      	bmi.n	8004e2c <ADC_Enable+0x68>
  MODIFY_REG(ADCx->CR,
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	4032      	ands	r2, r6
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e2c:	f7ff f9fa 	bl	8004224 <HAL_GetTick>
 8004e30:	1b43      	subs	r3, r0, r5
 8004e32:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e34:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e36:	d902      	bls.n	8004e3e <ADC_Enable+0x7a>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	07d1      	lsls	r1, r2, #31
 8004e3c:	d5ce      	bpl.n	8004ddc <ADC_Enable+0x18>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	07d2      	lsls	r2, r2, #31
 8004e42:	d5eb      	bpl.n	8004e1c <ADC_Enable+0x58>
  return HAL_OK;
 8004e44:	2000      	movs	r0, #0
}
 8004e46:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004e48:	4a07      	ldr	r2, [pc, #28]	; (8004e68 <ADC_Enable+0xa4>)
 8004e4a:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e4c:	06d2      	lsls	r2, r2, #27
 8004e4e:	d0e1      	beq.n	8004e14 <ADC_Enable+0x50>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e50:	4a06      	ldr	r2, [pc, #24]	; (8004e6c <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d1de      	bne.n	8004e14 <ADC_Enable+0x50>
 8004e56:	e7f5      	b.n	8004e44 <ADC_Enable+0x80>
 8004e58:	8000003f 	.word	0x8000003f
 8004e5c:	7fffffc0 	.word	0x7fffffc0
 8004e60:	40022000 	.word	0x40022000
 8004e64:	58026300 	.word	0x58026300
 8004e68:	40022300 	.word	0x40022300
 8004e6c:	40022100 	.word	0x40022100

08004e70 <ADC_Disable>:
{
 8004e70:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004e72:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	0795      	lsls	r5, r2, #30
 8004e78:	d502      	bpl.n	8004e80 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e7a:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8004e7c:	2000      	movs	r0, #0
}
 8004e7e:	bd38      	pop	{r3, r4, r5, pc}
 8004e80:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004e82:	07d4      	lsls	r4, r2, #31
 8004e84:	d529      	bpl.n	8004eda <ADC_Disable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	4604      	mov	r4, r0
 8004e8a:	f002 020d 	and.w	r2, r2, #13
 8004e8e:	2a01      	cmp	r2, #1
 8004e90:	d008      	beq.n	8004ea4 <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e92:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8004e94:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e96:	f043 0310 	orr.w	r3, r3, #16
 8004e9a:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e9e:	4303      	orrs	r3, r0
 8004ea0:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8004ea2:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8004ea4:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004ea6:	2103      	movs	r1, #3
 8004ea8:	4a0d      	ldr	r2, [pc, #52]	; (8004ee0 <ADC_Disable+0x70>)
 8004eaa:	4002      	ands	r2, r0
 8004eac:	f042 0202 	orr.w	r2, r2, #2
 8004eb0:	609a      	str	r2, [r3, #8]
 8004eb2:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8004eb4:	f7ff f9b6 	bl	8004224 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004eb8:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004eba:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	07d9      	lsls	r1, r3, #31
 8004ec0:	d50b      	bpl.n	8004eda <ADC_Disable+0x6a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ec2:	f7ff f9af 	bl	8004224 <HAL_GetTick>
 8004ec6:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ec8:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004eca:	2802      	cmp	r0, #2
 8004ecc:	d902      	bls.n	8004ed4 <ADC_Disable+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	07d2      	lsls	r2, r2, #31
 8004ed2:	d4de      	bmi.n	8004e92 <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	07db      	lsls	r3, r3, #31
 8004ed8:	d4f3      	bmi.n	8004ec2 <ADC_Disable+0x52>
  return HAL_OK;
 8004eda:	2000      	movs	r0, #0
}
 8004edc:	bd38      	pop	{r3, r4, r5, pc}
 8004ede:	bf00      	nop
 8004ee0:	7fffffc0 	.word	0x7fffffc0

08004ee4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004ee4:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004ee6:	4a5a      	ldr	r2, [pc, #360]	; (8005050 <ADC_ConfigureBoostMode+0x16c>)
{
 8004ee8:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004eea:	6803      	ldr	r3, [r0, #0]
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d029      	beq.n	8004f44 <ADC_ConfigureBoostMode+0x60>
 8004ef0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d025      	beq.n	8004f44 <ADC_ConfigureBoostMode+0x60>
 8004ef8:	4b56      	ldr	r3, [pc, #344]	; (8005054 <ADC_ConfigureBoostMode+0x170>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8004f00:	bf14      	ite	ne
 8004f02:	2301      	movne	r3, #1
 8004f04:	2300      	moveq	r3, #0
 8004f06:	b333      	cbz	r3, 8004f56 <ADC_ConfigureBoostMode+0x72>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004f08:	f003 fd28 	bl	800895c <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8004f0c:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8004f0e:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8004f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f14:	f000 808b 	beq.w	800502e <ADC_ConfigureBoostMode+0x14a>
 8004f18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f1c:	d06f      	beq.n	8004ffe <ADC_ConfigureBoostMode+0x11a>
 8004f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f22:	f000 8084 	beq.w	800502e <ADC_ConfigureBoostMode+0x14a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004f26:	f7ff f995 	bl	8004254 <HAL_GetREVID>
 8004f2a:	f241 0303 	movw	r3, #4099	; 0x1003
 8004f2e:	4298      	cmp	r0, r3
 8004f30:	d84e      	bhi.n	8004fd0 <ADC_ConfigureBoostMode+0xec>
  {
    if (freq > 20000000UL)
 8004f32:	4b49      	ldr	r3, [pc, #292]	; (8005058 <ADC_ConfigureBoostMode+0x174>)
 8004f34:	429d      	cmp	r5, r3
 8004f36:	d92d      	bls.n	8004f94 <ADC_ConfigureBoostMode+0xb0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004f38:	6822      	ldr	r2, [r4, #0]
 8004f3a:	6893      	ldr	r3, [r2, #8]
 8004f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f40:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004f42:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004f44:	4b45      	ldr	r3, [pc, #276]	; (800505c <ADC_ConfigureBoostMode+0x178>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8004f4c:	bf14      	ite	ne
 8004f4e:	2301      	movne	r3, #1
 8004f50:	2300      	moveq	r3, #0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1d8      	bne.n	8004f08 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004f56:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004f5a:	f004 fe33 	bl	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8004f5e:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004f60:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8004f62:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004f66:	d06c      	beq.n	8005042 <ADC_ConfigureBoostMode+0x15e>
 8004f68:	d808      	bhi.n	8004f7c <ADC_ConfigureBoostMode+0x98>
 8004f6a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004f6e:	d050      	beq.n	8005012 <ADC_ConfigureBoostMode+0x12e>
 8004f70:	d916      	bls.n	8004fa0 <ADC_ConfigureBoostMode+0xbc>
 8004f72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f76:	d1d6      	bne.n	8004f26 <ADC_ConfigureBoostMode+0x42>
        freq /= 32UL;
 8004f78:	0945      	lsrs	r5, r0, #5
        break;
 8004f7a:	e7d4      	b.n	8004f26 <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 8004f7c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004f80:	d045      	beq.n	800500e <ADC_ConfigureBoostMode+0x12a>
 8004f82:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004f86:	d1ce      	bne.n	8004f26 <ADC_ConfigureBoostMode+0x42>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004f88:	f7ff f964 	bl	8004254 <HAL_GetREVID>
 8004f8c:	f241 0303 	movw	r3, #4099	; 0x1003
 8004f90:	4298      	cmp	r0, r3
 8004f92:	d840      	bhi.n	8005016 <ADC_ConfigureBoostMode+0x132>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004f94:	6822      	ldr	r2, [r4, #0]
 8004f96:	6893      	ldr	r3, [r2, #8]
 8004f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f9c:	6093      	str	r3, [r2, #8]
}
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8004fa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fa4:	d006      	beq.n	8004fb4 <ADC_ConfigureBoostMode+0xd0>
 8004fa6:	d90a      	bls.n	8004fbe <ADC_ConfigureBoostMode+0xda>
 8004fa8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004fac:	d002      	beq.n	8004fb4 <ADC_ConfigureBoostMode+0xd0>
 8004fae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004fb2:	d1b8      	bne.n	8004f26 <ADC_ConfigureBoostMode+0x42>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004fb4:	0c9b      	lsrs	r3, r3, #18
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8004fbc:	e7b3      	b.n	8004f26 <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 8004fbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fc2:	d0f7      	beq.n	8004fb4 <ADC_ConfigureBoostMode+0xd0>
 8004fc4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004fc8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8004fcc:	d0f2      	beq.n	8004fb4 <ADC_ConfigureBoostMode+0xd0>
 8004fce:	e7aa      	b.n	8004f26 <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8004fd0:	4b23      	ldr	r3, [pc, #140]	; (8005060 <ADC_ConfigureBoostMode+0x17c>)
 8004fd2:	429d      	cmp	r5, r3
 8004fd4:	d805      	bhi.n	8004fe2 <ADC_ConfigureBoostMode+0xfe>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004fd6:	6822      	ldr	r2, [r4, #0]
 8004fd8:	6893      	ldr	r3, [r2, #8]
 8004fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fde:	6093      	str	r3, [r2, #8]
}
 8004fe0:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 8004fe2:	4b20      	ldr	r3, [pc, #128]	; (8005064 <ADC_ConfigureBoostMode+0x180>)
 8004fe4:	429d      	cmp	r5, r3
 8004fe6:	d91a      	bls.n	800501e <ADC_ConfigureBoostMode+0x13a>
    else if (freq <= 25000000UL)
 8004fe8:	4b1f      	ldr	r3, [pc, #124]	; (8005068 <ADC_ConfigureBoostMode+0x184>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004fea:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8004fec:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004fee:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 8004ff0:	d829      	bhi.n	8005046 <ADC_ConfigureBoostMode+0x162>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ffa:	6093      	str	r3, [r2, #8]
}
 8004ffc:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8004ffe:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005000:	f7ff f928 	bl	8004254 <HAL_GetREVID>
 8005004:	f241 0303 	movw	r3, #4099	; 0x1003
 8005008:	4298      	cmp	r0, r3
 800500a:	d8e1      	bhi.n	8004fd0 <ADC_ConfigureBoostMode+0xec>
 800500c:	e791      	b.n	8004f32 <ADC_ConfigureBoostMode+0x4e>
        freq /= 128UL;
 800500e:	09c5      	lsrs	r5, r0, #7
        break;
 8005010:	e789      	b.n	8004f26 <ADC_ConfigureBoostMode+0x42>
        freq /= 16UL;
 8005012:	0905      	lsrs	r5, r0, #4
        break;
 8005014:	e787      	b.n	8004f26 <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8005016:	4b12      	ldr	r3, [pc, #72]	; (8005060 <ADC_ConfigureBoostMode+0x17c>)
 8005018:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 800501c:	d2db      	bcs.n	8004fd6 <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800501e:	6822      	ldr	r2, [r4, #0]
 8005020:	6893      	ldr	r3, [r2, #8]
 8005022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502a:	6093      	str	r3, [r2, #8]
}
 800502c:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800502e:	0c1b      	lsrs	r3, r3, #16
 8005030:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005034:	f7ff f90e 	bl	8004254 <HAL_GetREVID>
 8005038:	f241 0303 	movw	r3, #4099	; 0x1003
 800503c:	4298      	cmp	r0, r3
 800503e:	d8c7      	bhi.n	8004fd0 <ADC_ConfigureBoostMode+0xec>
 8005040:	e777      	b.n	8004f32 <ADC_ConfigureBoostMode+0x4e>
        freq /= 64UL;
 8005042:	0985      	lsrs	r5, r0, #6
        break;
 8005044:	e76f      	b.n	8004f26 <ADC_ConfigureBoostMode+0x42>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005046:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800504a:	6093      	str	r3, [r2, #8]
}
 800504c:	bd38      	pop	{r3, r4, r5, pc}
 800504e:	bf00      	nop
 8005050:	40022000 	.word	0x40022000
 8005054:	58026300 	.word	0x58026300
 8005058:	01312d00 	.word	0x01312d00
 800505c:	40022300 	.word	0x40022300
 8005060:	00bebc21 	.word	0x00bebc21
 8005064:	017d7841 	.word	0x017d7841
 8005068:	02faf081 	.word	0x02faf081

0800506c <HAL_ADC_Init>:
{
 800506c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 800506e:	2300      	movs	r3, #0
{
 8005070:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8005072:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8005074:	2800      	cmp	r0, #0
 8005076:	f000 80d0 	beq.w	800521a <HAL_ADC_Init+0x1ae>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800507a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800507c:	4604      	mov	r4, r0
 800507e:	2d00      	cmp	r5, #0
 8005080:	f000 80ba 	beq.w	80051f8 <HAL_ADC_Init+0x18c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005084:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005086:	6893      	ldr	r3, [r2, #8]
 8005088:	009d      	lsls	r5, r3, #2
 800508a:	d503      	bpl.n	8005094 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800508c:	6891      	ldr	r1, [r2, #8]
 800508e:	4b71      	ldr	r3, [pc, #452]	; (8005254 <HAL_ADC_Init+0x1e8>)
 8005090:	400b      	ands	r3, r1
 8005092:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005094:	6893      	ldr	r3, [r2, #8]
 8005096:	00d8      	lsls	r0, r3, #3
 8005098:	d416      	bmi.n	80050c8 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800509a:	4b6f      	ldr	r3, [pc, #444]	; (8005258 <HAL_ADC_Init+0x1ec>)
 800509c:	4d6f      	ldr	r5, [pc, #444]	; (800525c <HAL_ADC_Init+0x1f0>)
 800509e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80050a0:	6890      	ldr	r0, [r2, #8]
 80050a2:	099b      	lsrs	r3, r3, #6
 80050a4:	496e      	ldr	r1, [pc, #440]	; (8005260 <HAL_ADC_Init+0x1f4>)
 80050a6:	fba5 5303 	umull	r5, r3, r5, r3
 80050aa:	4001      	ands	r1, r0
 80050ac:	099b      	lsrs	r3, r3, #6
 80050ae:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80050b2:	3301      	adds	r3, #1
 80050b4:	6091      	str	r1, [r2, #8]
 80050b6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80050b8:	9b01      	ldr	r3, [sp, #4]
 80050ba:	b12b      	cbz	r3, 80050c8 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 80050bc:	9b01      	ldr	r3, [sp, #4]
 80050be:	3b01      	subs	r3, #1
 80050c0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80050c2:	9b01      	ldr	r3, [sp, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f9      	bne.n	80050bc <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80050c8:	6893      	ldr	r3, [r2, #8]
 80050ca:	00d9      	lsls	r1, r3, #3
 80050cc:	d424      	bmi.n	8005118 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80050d0:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050d2:	f043 0310 	orr.w	r3, r3, #16
 80050d6:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050da:	432b      	orrs	r3, r5
 80050dc:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80050de:	6893      	ldr	r3, [r2, #8]
 80050e0:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80050e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80050e6:	d11d      	bne.n	8005124 <HAL_ADC_Init+0xb8>
 80050e8:	06db      	lsls	r3, r3, #27
 80050ea:	d41b      	bmi.n	8005124 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 80050ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80050ee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80050f2:	f043 0302 	orr.w	r3, r3, #2
 80050f6:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80050f8:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050fa:	07de      	lsls	r6, r3, #31
 80050fc:	d428      	bmi.n	8005150 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050fe:	4b59      	ldr	r3, [pc, #356]	; (8005264 <HAL_ADC_Init+0x1f8>)
 8005100:	429a      	cmp	r2, r3
 8005102:	d017      	beq.n	8005134 <HAL_ADC_Init+0xc8>
 8005104:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005108:	429a      	cmp	r2, r3
 800510a:	d013      	beq.n	8005134 <HAL_ADC_Init+0xc8>
 800510c:	4b56      	ldr	r3, [pc, #344]	; (8005268 <HAL_ADC_Init+0x1fc>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	07d9      	lsls	r1, r3, #31
 8005112:	d41d      	bmi.n	8005150 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005114:	4a55      	ldr	r2, [pc, #340]	; (800526c <HAL_ADC_Init+0x200>)
 8005116:	e015      	b.n	8005144 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005118:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800511a:	2500      	movs	r5, #0
 800511c:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005120:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005122:	d0e1      	beq.n	80050e8 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005124:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8005126:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005128:	f043 0310 	orr.w	r3, r3, #16
}
 800512c:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800512e:	6563      	str	r3, [r4, #84]	; 0x54
}
 8005130:	b002      	add	sp, #8
 8005132:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005134:	4a4b      	ldr	r2, [pc, #300]	; (8005264 <HAL_ADC_Init+0x1f8>)
 8005136:	4b4e      	ldr	r3, [pc, #312]	; (8005270 <HAL_ADC_Init+0x204>)
 8005138:	6892      	ldr	r2, [r2, #8]
 800513a:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800513c:	4313      	orrs	r3, r2
 800513e:	07d8      	lsls	r0, r3, #31
 8005140:	d406      	bmi.n	8005150 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005142:	4a4c      	ldr	r2, [pc, #304]	; (8005274 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005144:	6893      	ldr	r3, [r2, #8]
 8005146:	6861      	ldr	r1, [r4, #4]
 8005148:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800514c:	430b      	orrs	r3, r1
 800514e:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005150:	f7ff f880 	bl	8004254 <HAL_GetREVID>
 8005154:	f241 0303 	movw	r3, #4099	; 0x1003
 8005158:	68a1      	ldr	r1, [r4, #8]
 800515a:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800515c:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800515e:	d851      	bhi.n	8005204 <HAL_ADC_Init+0x198>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005160:	7d66      	ldrb	r6, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005162:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005164:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005166:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
 800516a:	4302      	orrs	r2, r0
 800516c:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800516e:	2b01      	cmp	r3, #1
 8005170:	d103      	bne.n	800517a <HAL_ADC_Init+0x10e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005172:	6a23      	ldr	r3, [r4, #32]
 8005174:	3b01      	subs	r3, #1
 8005176:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800517a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800517c:	b123      	cbz	r3, 8005188 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800517e:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005182:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005184:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005186:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	493b      	ldr	r1, [pc, #236]	; (8005278 <HAL_ADC_Init+0x20c>)
 800518c:	68d8      	ldr	r0, [r3, #12]
 800518e:	4001      	ands	r1, r0
 8005190:	430a      	orrs	r2, r1
 8005192:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800519a:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800519c:	d11c      	bne.n	80051d8 <HAL_ADC_Init+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800519e:	0712      	lsls	r2, r2, #28
 80051a0:	d41a      	bmi.n	80051d8 <HAL_ADC_Init+0x16c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80051a2:	68d9      	ldr	r1, [r3, #12]
 80051a4:	4a35      	ldr	r2, [pc, #212]	; (800527c <HAL_ADC_Init+0x210>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80051a6:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80051a8:	400a      	ands	r2, r1
 80051aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80051ac:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 80051b0:	430a      	orrs	r2, r1
 80051b2:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80051b4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80051b8:	2a01      	cmp	r2, #1
 80051ba:	d03a      	beq.n	8005232 <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	f022 0201 	bic.w	r2, r2, #1
 80051c2:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80051c4:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80051c6:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80051c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051ca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80051ce:	430a      	orrs	r2, r1
 80051d0:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80051d2:	f7ff fe87 	bl	8004ee4 <ADC_ConfigureBoostMode>
 80051d6:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80051d8:	68e2      	ldr	r2, [r4, #12]
 80051da:	2a01      	cmp	r2, #1
 80051dc:	d021      	beq.n	8005222 <HAL_ADC_Init+0x1b6>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80051de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051e0:	f022 020f 	bic.w	r2, r2, #15
 80051e4:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80051e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 80051e8:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80051ea:	f023 0303 	bic.w	r3, r3, #3
 80051ee:	f043 0301 	orr.w	r3, r3, #1
 80051f2:	6563      	str	r3, [r4, #84]	; 0x54
}
 80051f4:	b002      	add	sp, #8
 80051f6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80051f8:	f7fe fc3e 	bl	8003a78 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80051fc:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 80051fe:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8005202:	e73f      	b.n	8005084 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005204:	2910      	cmp	r1, #16
 8005206:	d1ab      	bne.n	8005160 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005208:	7d60      	ldrb	r0, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800520a:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800520c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800520e:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8005212:	430a      	orrs	r2, r1
 8005214:	f042 021c 	orr.w	r2, r2, #28
 8005218:	e7a9      	b.n	800516e <HAL_ADC_Init+0x102>
    return HAL_ERROR;
 800521a:	2501      	movs	r5, #1
}
 800521c:	4628      	mov	r0, r5
 800521e:	b002      	add	sp, #8
 8005220:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005224:	69a2      	ldr	r2, [r4, #24]
 8005226:	f021 010f 	bic.w	r1, r1, #15
 800522a:	3a01      	subs	r2, #1
 800522c:	430a      	orrs	r2, r1
 800522e:	631a      	str	r2, [r3, #48]	; 0x30
 8005230:	e7d9      	b.n	80051e6 <HAL_ADC_Init+0x17a>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005232:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8005236:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8005238:	3901      	subs	r1, #1
 800523a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800523c:	4332      	orrs	r2, r6
 800523e:	691e      	ldr	r6, [r3, #16]
 8005240:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005244:	490e      	ldr	r1, [pc, #56]	; (8005280 <HAL_ADC_Init+0x214>)
 8005246:	4302      	orrs	r2, r0
 8005248:	4031      	ands	r1, r6
 800524a:	430a      	orrs	r2, r1
 800524c:	f042 0201 	orr.w	r2, r2, #1
 8005250:	611a      	str	r2, [r3, #16]
 8005252:	e7b7      	b.n	80051c4 <HAL_ADC_Init+0x158>
 8005254:	5fffffc0 	.word	0x5fffffc0
 8005258:	24000280 	.word	0x24000280
 800525c:	053e2d63 	.word	0x053e2d63
 8005260:	6fffffc0 	.word	0x6fffffc0
 8005264:	40022000 	.word	0x40022000
 8005268:	58026000 	.word	0x58026000
 800526c:	58026300 	.word	0x58026300
 8005270:	40022100 	.word	0x40022100
 8005274:	40022300 	.word	0x40022300
 8005278:	fff0c003 	.word	0xfff0c003
 800527c:	ffffbffc 	.word	0xffffbffc
 8005280:	fc00f81e 	.word	0xfc00f81e

08005284 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005286:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005288:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
{
 800528c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800528e:	2600      	movs	r6, #0
  __HAL_LOCK(hadc);
 8005290:	2901      	cmp	r1, #1
  __IO uint32_t wait_loop_index = 0UL;
 8005292:	9601      	str	r6, [sp, #4]
  __HAL_LOCK(hadc);
 8005294:	d03e      	beq.n	8005314 <HAL_ADCEx_Calibration_Start+0x90>
 8005296:	2301      	movs	r3, #1
 8005298:	4604      	mov	r4, r0
 800529a:	4617      	mov	r7, r2
 800529c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80052a0:	f7ff fde6 	bl	8004e70 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (tmp_hal_status == HAL_OK)
 80052a6:	b9e0      	cbnz	r0, 80052e2 <HAL_ADCEx_Calibration_Start+0x5e>
    ADC_STATE_CLR_SET(hadc->State,
 80052a8:	4e1c      	ldr	r6, [pc, #112]	; (800531c <HAL_ADCEx_Calibration_Start+0x98>)
  MODIFY_REG(ADCx->CR,
 80052aa:	f007 4280 	and.w	r2, r7, #1073741824	; 0x40000000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80052ae:	6821      	ldr	r1, [r4, #0]
 80052b0:	f405 3580 	and.w	r5, r5, #65536	; 0x10000
    ADC_STATE_CLR_SET(hadc->State,
 80052b4:	401e      	ands	r6, r3
 80052b6:	4b1a      	ldr	r3, [pc, #104]	; (8005320 <HAL_ADCEx_Calibration_Start+0x9c>)

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80052b8:	4f1a      	ldr	r7, [pc, #104]	; (8005324 <HAL_ADCEx_Calibration_Start+0xa0>)
    ADC_STATE_CLR_SET(hadc->State,
 80052ba:	f046 0602 	orr.w	r6, r6, #2
 80052be:	6566      	str	r6, [r4, #84]	; 0x54
 80052c0:	688e      	ldr	r6, [r1, #8]
 80052c2:	4033      	ands	r3, r6
 80052c4:	4313      	orrs	r3, r2
 80052c6:	432b      	orrs	r3, r5
 80052c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052cc:	608b      	str	r3, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80052ce:	688b      	ldr	r3, [r1, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	db0e      	blt.n	80052f2 <HAL_ADCEx_Calibration_Start+0x6e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052d6:	f023 0303 	bic.w	r3, r3, #3
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	6563      	str	r3, [r4, #84]	; 0x54
 80052e0:	e002      	b.n	80052e8 <HAL_ADCEx_Calibration_Start+0x64>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052e2:	f043 0310 	orr.w	r3, r3, #16
 80052e6:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052e8:	2300      	movs	r3, #0
 80052ea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80052ee:	b003      	add	sp, #12
 80052f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 80052f2:	9b01      	ldr	r3, [sp, #4]
 80052f4:	3301      	adds	r3, #1
 80052f6:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80052f8:	9b01      	ldr	r3, [sp, #4]
 80052fa:	42bb      	cmp	r3, r7
 80052fc:	d3e7      	bcc.n	80052ce <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 80052fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8005300:	2200      	movs	r2, #0
        return HAL_ERROR;
 8005302:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8005304:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8005308:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 800530c:	f043 0310 	orr.w	r3, r3, #16
 8005310:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8005312:	e7ec      	b.n	80052ee <HAL_ADCEx_Calibration_Start+0x6a>
  __HAL_LOCK(hadc);
 8005314:	2002      	movs	r0, #2
}
 8005316:	b003      	add	sp, #12
 8005318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800531a:	bf00      	nop
 800531c:	ffffeefd 	.word	0xffffeefd
 8005320:	3ffeffc0 	.word	0x3ffeffc0
 8005324:	25c3f800 	.word	0x25c3f800

08005328 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800532c:	f8d0 9000 	ldr.w	r9, [r0]
{
 8005330:	b09b      	sub	sp, #108	; 0x6c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005332:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8005336:	f015 0504 	ands.w	r5, r5, #4
 800533a:	d116      	bne.n	800536a <HAL_ADCEx_MultiModeStart_DMA+0x42>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800533c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8005340:	4604      	mov	r4, r0
 8005342:	2b01      	cmp	r3, #1
 8005344:	d011      	beq.n	800536a <HAL_ADCEx_MultiModeStart_DMA+0x42>

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005346:	4b2e      	ldr	r3, [pc, #184]	; (8005400 <HAL_ADCEx_MultiModeStart_DMA+0xd8>)
    __HAL_LOCK(hadc);
 8005348:	2601      	movs	r6, #1
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800534a:	9516      	str	r5, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800534c:	4599      	cmp	r9, r3
    __HAL_LOCK(hadc);
 800534e:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005352:	9517      	str	r5, [sp, #92]	; 0x5c
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005354:	d00d      	beq.n	8005372 <HAL_ADCEx_MultiModeStart_DMA+0x4a>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005356:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 8005358:	4630      	mov	r0, r6
      __HAL_UNLOCK(hadc);
 800535a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800535e:	f043 0320 	orr.w	r3, r3, #32
 8005362:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 8005364:	b01b      	add	sp, #108	; 0x6c
 8005366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800536a:	2002      	movs	r0, #2
}
 800536c:	b01b      	add	sp, #108	; 0x6c
 800536e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005372:	4d24      	ldr	r5, [pc, #144]	; (8005404 <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
 8005374:	460f      	mov	r7, r1
 8005376:	4690      	mov	r8, r2
 8005378:	9501      	str	r5, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 800537a:	f7ff fd23 	bl	8004dc4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800537e:	b128      	cbz	r0, 800538c <HAL_ADCEx_MultiModeStart_DMA+0x64>
      __HAL_UNLOCK(hadc);
 8005380:	2300      	movs	r3, #0
 8005382:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005386:	b01b      	add	sp, #108	; 0x6c
 8005388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 800538c:	a801      	add	r0, sp, #4
 800538e:	f7ff fd19 	bl	8004dc4 <ADC_Enable>
 8005392:	4603      	mov	r3, r0
    if (tmp_hal_status == HAL_OK)
 8005394:	2800      	cmp	r0, #0
 8005396:	d1f3      	bne.n	8005380 <HAL_ADCEx_MultiModeStart_DMA+0x58>
      ADC_STATE_CLR_SET(hadc->State,
 8005398:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800539a:	4a1b      	ldr	r2, [pc, #108]	; (8005408 <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800539c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      ADC_STATE_CLR_SET(hadc->State,
 800539e:	400a      	ands	r2, r1
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80053a0:	4e1a      	ldr	r6, [pc, #104]	; (800540c <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80053a2:	f8df c074 	ldr.w	ip, [pc, #116]	; 8005418 <HAL_ADCEx_MultiModeStart_DMA+0xf0>
      ADC_STATE_CLR_SET(hadc->State,
 80053a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80053aa:	4919      	ldr	r1, [pc, #100]	; (8005410 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
      ADC_STATE_CLR_SET(hadc->State,
 80053ac:	6562      	str	r2, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 80053ae:	65a3      	str	r3, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80053b0:	63c6      	str	r6, [r0, #60]	; 0x3c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80053b2:	6826      	ldr	r6, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80053b4:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80053b8:	454e      	cmp	r6, r9
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80053ba:	64c1      	str	r1, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80053bc:	d01c      	beq.n	80053f8 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 80053be:	42ae      	cmp	r6, r5
 80053c0:	d01a      	beq.n	80053f8 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 80053c2:	f8df c058 	ldr.w	ip, [pc, #88]	; 800541c <HAL_ADCEx_MultiModeStart_DMA+0xf4>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80053c6:	211c      	movs	r1, #28
      __HAL_UNLOCK(hadc);
 80053c8:	2500      	movs	r5, #0
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80053ca:	4643      	mov	r3, r8
 80053cc:	463a      	mov	r2, r7
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80053ce:	6031      	str	r1, [r6, #0]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80053d0:	f10c 010c 	add.w	r1, ip, #12
      __HAL_UNLOCK(hadc);
 80053d4:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80053d8:	6875      	ldr	r5, [r6, #4]
 80053da:	f045 0510 	orr.w	r5, r5, #16
 80053de:	6075      	str	r5, [r6, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80053e0:	f000 fe70 	bl	80060c4 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 80053e4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80053e6:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <HAL_ADCEx_MultiModeStart_DMA+0xec>)
 80053e8:	6891      	ldr	r1, [r2, #8]
 80053ea:	400b      	ands	r3, r1
 80053ec:	f043 0304 	orr.w	r3, r3, #4
 80053f0:	6093      	str	r3, [r2, #8]
}
 80053f2:	b01b      	add	sp, #108	; 0x6c
 80053f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80053f8:	f8df c024 	ldr.w	ip, [pc, #36]	; 8005420 <HAL_ADCEx_MultiModeStart_DMA+0xf8>
 80053fc:	e7e3      	b.n	80053c6 <HAL_ADCEx_MultiModeStart_DMA+0x9e>
 80053fe:	bf00      	nop
 8005400:	40022000 	.word	0x40022000
 8005404:	40022100 	.word	0x40022100
 8005408:	fffff0fe 	.word	0xfffff0fe
 800540c:	08004541 	.word	0x08004541
 8005410:	080045ad 	.word	0x080045ad
 8005414:	7fffffc0 	.word	0x7fffffc0
 8005418:	080042bd 	.word	0x080042bd
 800541c:	58026300 	.word	0x58026300
 8005420:	40022300 	.word	0x40022300

08005424 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop

08005428 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop

0800542c <HAL_ADCEx_LevelOutOfWindow2Callback>:
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop

08005430 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop

08005434 <HAL_ADCEx_EndOfSamplingCallback>:
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop

08005438 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005438:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800543a:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 800543e:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005440:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8005442:	2a01      	cmp	r2, #1
 8005444:	d04d      	beq.n	80054e2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8005446:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005448:	4c2b      	ldr	r4, [pc, #172]	; (80054f8 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800544a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800544c:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800544e:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005450:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005452:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 8005454:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005458:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800545a:	d008      	beq.n	800546e <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800545c:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800545e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005462:	f041 0120 	orr.w	r1, r1, #32
 8005466:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8005468:	b01a      	add	sp, #104	; 0x68
 800546a:	bcf0      	pop	{r4, r5, r6, r7}
 800546c:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800546e:	4c23      	ldr	r4, [pc, #140]	; (80054fc <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8005470:	68a2      	ldr	r2, [r4, #8]
 8005472:	0752      	lsls	r2, r2, #29
 8005474:	d50b      	bpl.n	800548e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005476:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800547a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800547c:	f042 0220 	orr.w	r2, r2, #32
 8005480:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8005488:	b01a      	add	sp, #104	; 0x68
 800548a:	bcf0      	pop	{r4, r5, r6, r7}
 800548c:	4770      	bx	lr
 800548e:	68a8      	ldr	r0, [r5, #8]
 8005490:	f010 0004 	ands.w	r0, r0, #4
 8005494:	d1f0      	bne.n	8005478 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005496:	b1c6      	cbz	r6, 80054ca <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005498:	f8df c068 	ldr.w	ip, [pc, #104]	; 8005504 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800549c:	684f      	ldr	r7, [r1, #4]
 800549e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80054a2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80054a6:	433a      	orrs	r2, r7
 80054a8:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054ac:	68ad      	ldr	r5, [r5, #8]
 80054ae:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054b0:	432a      	orrs	r2, r5
 80054b2:	07d4      	lsls	r4, r2, #31
 80054b4:	d413      	bmi.n	80054de <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 80054b6:	688a      	ldr	r2, [r1, #8]
 80054b8:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80054bc:	4910      	ldr	r1, [pc, #64]	; (8005500 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80054be:	4316      	orrs	r6, r2
 80054c0:	4021      	ands	r1, r4
 80054c2:	430e      	orrs	r6, r1
 80054c4:	f8cc 6008 	str.w	r6, [ip, #8]
 80054c8:	e7db      	b.n	8005482 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80054ca:	490e      	ldr	r1, [pc, #56]	; (8005504 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 80054cc:	688a      	ldr	r2, [r1, #8]
 80054ce:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80054d2:	608a      	str	r2, [r1, #8]
 80054d4:	68a8      	ldr	r0, [r5, #8]
 80054d6:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054d8:	4302      	orrs	r2, r0
 80054da:	07d0      	lsls	r0, r2, #31
 80054dc:	d505      	bpl.n	80054ea <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054de:	2000      	movs	r0, #0
 80054e0:	e7cf      	b.n	8005482 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80054e2:	2002      	movs	r0, #2
}
 80054e4:	b01a      	add	sp, #104	; 0x68
 80054e6:	bcf0      	pop	{r4, r5, r6, r7}
 80054e8:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80054ea:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054ec:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80054ee:	4a04      	ldr	r2, [pc, #16]	; (8005500 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80054f0:	4022      	ands	r2, r4
 80054f2:	608a      	str	r2, [r1, #8]
 80054f4:	e7c5      	b.n	8005482 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80054f6:	bf00      	nop
 80054f8:	40022000 	.word	0x40022000
 80054fc:	40022100 	.word	0x40022100
 8005500:	fffff0e0 	.word	0xfffff0e0
 8005504:	40022300 	.word	0x40022300

08005508 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005508:	4907      	ldr	r1, [pc, #28]	; (8005528 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800550a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800550c:	4b07      	ldr	r3, [pc, #28]	; (800552c <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800550e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005510:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005514:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005516:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800551a:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800551c:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005520:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8005522:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8005524:	60cb      	str	r3, [r1, #12]
 8005526:	4770      	bx	lr
 8005528:	e000ed00 	.word	0xe000ed00
 800552c:	05fa0000 	.word	0x05fa0000

08005530 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005530:	4b19      	ldr	r3, [pc, #100]	; (8005598 <HAL_NVIC_SetPriority+0x68>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005538:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800553a:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800553e:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005540:	2d04      	cmp	r5, #4
 8005542:	bf28      	it	cs
 8005544:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005546:	2c06      	cmp	r4, #6
 8005548:	d919      	bls.n	800557e <HAL_NVIC_SetPriority+0x4e>
 800554a:	3b03      	subs	r3, #3
 800554c:	f04f 34ff 	mov.w	r4, #4294967295
 8005550:	409c      	lsls	r4, r3
 8005552:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005556:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800555a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800555c:	fa04 f405 	lsl.w	r4, r4, r5
 8005560:	ea21 0104 	bic.w	r1, r1, r4
 8005564:	fa01 f103 	lsl.w	r1, r1, r3
 8005568:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800556c:	db0a      	blt.n	8005584 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800556e:	0109      	lsls	r1, r1, #4
 8005570:	4b0a      	ldr	r3, [pc, #40]	; (800559c <HAL_NVIC_SetPriority+0x6c>)
 8005572:	b2c9      	uxtb	r1, r1
 8005574:	4403      	add	r3, r0
 8005576:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800557a:	bc30      	pop	{r4, r5}
 800557c:	4770      	bx	lr
 800557e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005580:	4613      	mov	r3, r2
 8005582:	e7e8      	b.n	8005556 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005584:	f000 000f 	and.w	r0, r0, #15
 8005588:	0109      	lsls	r1, r1, #4
 800558a:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <HAL_NVIC_SetPriority+0x70>)
 800558c:	b2c9      	uxtb	r1, r1
 800558e:	4403      	add	r3, r0
 8005590:	7619      	strb	r1, [r3, #24]
 8005592:	bc30      	pop	{r4, r5}
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	e000ed00 	.word	0xe000ed00
 800559c:	e000e100 	.word	0xe000e100
 80055a0:	e000ecfc 	.word	0xe000ecfc

080055a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80055a4:	2800      	cmp	r0, #0
 80055a6:	db07      	blt.n	80055b8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055a8:	2301      	movs	r3, #1
 80055aa:	f000 011f 	and.w	r1, r0, #31
 80055ae:	4a03      	ldr	r2, [pc, #12]	; (80055bc <HAL_NVIC_EnableIRQ+0x18>)
 80055b0:	0940      	lsrs	r0, r0, #5
 80055b2:	408b      	lsls	r3, r1
 80055b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	e000e100 	.word	0xe000e100

080055c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055c0:	3801      	subs	r0, #1
 80055c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80055c6:	d20d      	bcs.n	80055e4 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055c8:	4b07      	ldr	r3, [pc, #28]	; (80055e8 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055ca:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055cc:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055ce:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055d0:	25f0      	movs	r5, #240	; 0xf0
 80055d2:	4c06      	ldr	r4, [pc, #24]	; (80055ec <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055d4:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055d6:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055d8:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055de:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80055e0:	bc30      	pop	{r4, r5}
 80055e2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80055e4:	2001      	movs	r0, #1
 80055e6:	4770      	bx	lr
 80055e8:	e000e010 	.word	0xe000e010
 80055ec:	e000ed00 	.word	0xe000ed00

080055f0 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80055f0:	b188      	cbz	r0, 8005616 <HAL_DAC_Init+0x26>
{
 80055f2:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80055f4:	7903      	ldrb	r3, [r0, #4]
 80055f6:	4604      	mov	r4, r0
 80055f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80055fc:	b13b      	cbz	r3, 800560e <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80055fe:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8005600:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005602:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8005604:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8005606:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005608:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800560a:	7122      	strb	r2, [r4, #4]
}
 800560c:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800560e:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005610:	f7fe fae4 	bl	8003bdc <HAL_DAC_MspInit>
 8005614:	e7f3      	b.n	80055fe <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8005616:	2001      	movs	r0, #1
}
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop

0800561c <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800561c:	7942      	ldrb	r2, [r0, #5]
 800561e:	2a01      	cmp	r2, #1
 8005620:	d026      	beq.n	8005670 <HAL_DAC_Start+0x54>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005622:	4603      	mov	r3, r0

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005624:	2201      	movs	r2, #1
 8005626:	6800      	ldr	r0, [r0, #0]
{
 8005628:	b470      	push	{r4, r5, r6}
  hdac->State = HAL_DAC_STATE_BUSY;
 800562a:	2402      	movs	r4, #2
  __HAL_DAC_ENABLE(hdac, Channel);
 800562c:	f001 0510 	and.w	r5, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 8005630:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8005632:	40aa      	lsls	r2, r5
 8005634:	6806      	ldr	r6, [r0, #0]
 8005636:	4332      	orrs	r2, r6
 8005638:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800563a:	6802      	ldr	r2, [r0, #0]
  if (Channel == DAC_CHANNEL_1)
 800563c:	b971      	cbnz	r1, 800565c <HAL_DAC_Start+0x40>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800563e:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 8005642:	42a2      	cmp	r2, r4
 8005644:	d103      	bne.n	800564e <HAL_DAC_Start+0x32>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005646:	6842      	ldr	r2, [r0, #4]
 8005648:	f042 0201 	orr.w	r2, r2, #1
 800564c:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800564e:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8005650:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 8005652:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8005654:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 8005656:	715a      	strb	r2, [r3, #5]
}
 8005658:	bc70      	pop	{r4, r5, r6}
 800565a:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800565c:	40ac      	lsls	r4, r5
 800565e:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 8005662:	42a2      	cmp	r2, r4
 8005664:	d1f3      	bne.n	800564e <HAL_DAC_Start+0x32>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005666:	6842      	ldr	r2, [r0, #4]
 8005668:	f042 0202 	orr.w	r2, r2, #2
 800566c:	6042      	str	r2, [r0, #4]
 800566e:	e7ee      	b.n	800564e <HAL_DAC_Start+0x32>
  __HAL_LOCK(hdac);
 8005670:	2002      	movs	r0, #2
}
 8005672:	4770      	bx	lr

08005674 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005676:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005678:	7940      	ldrb	r0, [r0, #5]
{
 800567a:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdac);
 800567c:	2801      	cmp	r0, #1
 800567e:	d057      	beq.n	8005730 <HAL_DAC_Start_DMA+0xbc>
 8005680:	460d      	mov	r5, r1
 8005682:	2001      	movs	r0, #1
 8005684:	4611      	mov	r1, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005686:	2202      	movs	r2, #2

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005688:	6827      	ldr	r7, [r4, #0]
  __HAL_LOCK(hdac);
 800568a:	7160      	strb	r0, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800568c:	7122      	strb	r2, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 800568e:	bb4d      	cbnz	r5, 80056e4 <HAL_DAC_Start_DMA+0x70>
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005690:	683a      	ldr	r2, [r7, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005692:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005694:	68a0      	ldr	r0, [r4, #8]
 8005696:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800577c <HAL_DAC_Start_DMA+0x108>
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800569a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800569e:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8005780 <HAL_DAC_Start_DMA+0x10c>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80056a2:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80056a6:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8005784 <HAL_DAC_Start_DMA+0x110>
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80056aa:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80056ae:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80056b2:	603a      	str	r2, [r7, #0]
    switch (Alignment)
 80056b4:	d044      	beq.n	8005740 <HAL_DAC_Start_DMA+0xcc>
 80056b6:	2e08      	cmp	r6, #8
 80056b8:	d03f      	beq.n	800573a <HAL_DAC_Start_DMA+0xc6>
 80056ba:	2e00      	cmp	r6, #0
 80056bc:	d03a      	beq.n	8005734 <HAL_DAC_Start_DMA+0xc0>
 80056be:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80056c0:	683e      	ldr	r6, [r7, #0]
 80056c2:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 80056c6:	603e      	str	r6, [r7, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80056c8:	f000 fcfc 	bl	80060c4 <HAL_DMA_Start_IT>
    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80056cc:	2300      	movs	r3, #0
 80056ce:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 80056d0:	bb48      	cbnz	r0, 8005726 <HAL_DAC_Start_DMA+0xb2>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	f005 0110 	and.w	r1, r5, #16
 80056d8:	2501      	movs	r5, #1
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	408d      	lsls	r5, r1
 80056de:	4315      	orrs	r5, r2
 80056e0:	601d      	str	r5, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 80056e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80056e4:	683a      	ldr	r2, [r7, #0]
    switch (Alignment)
 80056e6:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80056e8:	68e0      	ldr	r0, [r4, #12]
 80056ea:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8005788 <HAL_DAC_Start_DMA+0x114>
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80056ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80056f2:	f8df e098 	ldr.w	lr, [pc, #152]	; 800578c <HAL_DAC_Start_DMA+0x118>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80056f6:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80056fa:	f8df c094 	ldr.w	ip, [pc, #148]	; 8005790 <HAL_DAC_Start_DMA+0x11c>
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80056fe:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005702:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005706:	603a      	str	r2, [r7, #0]
    switch (Alignment)
 8005708:	d02f      	beq.n	800576a <HAL_DAC_Start_DMA+0xf6>
 800570a:	2e08      	cmp	r6, #8
 800570c:	d024      	beq.n	8005758 <HAL_DAC_Start_DMA+0xe4>
 800570e:	b1d6      	cbz	r6, 8005746 <HAL_DAC_Start_DMA+0xd2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005710:	683e      	ldr	r6, [r7, #0]
    switch (Alignment)
 8005712:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005714:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8005718:	603e      	str	r6, [r7, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800571a:	f000 fcd3 	bl	80060c4 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 800571e:	2300      	movs	r3, #0
 8005720:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8005722:	2800      	cmp	r0, #0
 8005724:	d0d5      	beq.n	80056d2 <HAL_DAC_Start_DMA+0x5e>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005726:	6923      	ldr	r3, [r4, #16]
 8005728:	f043 0304 	orr.w	r3, r3, #4
 800572c:	6123      	str	r3, [r4, #16]
}
 800572e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8005730:	2002      	movs	r0, #2
}
 8005732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005734:	f107 0208 	add.w	r2, r7, #8
        break;
 8005738:	e7c2      	b.n	80056c0 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800573a:	f107 0210 	add.w	r2, r7, #16
        break;
 800573e:	e7bf      	b.n	80056c0 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005740:	f107 020c 	add.w	r2, r7, #12
        break;
 8005744:	e7bc      	b.n	80056c0 <HAL_DAC_Start_DMA+0x4c>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005746:	683e      	ldr	r6, [r7, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005748:	f107 0214 	add.w	r2, r7, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800574c:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8005750:	603e      	str	r6, [r7, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005752:	f000 fcb7 	bl	80060c4 <HAL_DMA_Start_IT>
 8005756:	e7e2      	b.n	800571e <HAL_DAC_Start_DMA+0xaa>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005758:	683e      	ldr	r6, [r7, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800575a:	f107 021c 	add.w	r2, r7, #28
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800575e:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8005762:	603e      	str	r6, [r7, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005764:	f000 fcae 	bl	80060c4 <HAL_DMA_Start_IT>
 8005768:	e7d9      	b.n	800571e <HAL_DAC_Start_DMA+0xaa>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800576a:	683e      	ldr	r6, [r7, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800576c:	f107 0218 	add.w	r2, r7, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005770:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8005774:	603e      	str	r6, [r7, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005776:	f000 fca5 	bl	80060c4 <HAL_DMA_Start_IT>
 800577a:	e7d0      	b.n	800571e <HAL_DAC_Start_DMA+0xaa>
 800577c:	080057c5 	.word	0x080057c5
 8005780:	080057d5 	.word	0x080057d5
 8005784:	080057e5 	.word	0x080057e5
 8005788:	080059c1 	.word	0x080059c1
 800578c:	080059d5 	.word	0x080059d5
 8005790:	080059e5 	.word	0x080059e5

08005794 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005794:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005796:	6800      	ldr	r0, [r0, #0]
{
 8005798:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0;
 800579a:	2400      	movs	r4, #0
 800579c:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 800579e:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 80057a0:	b951      	cbnz	r1, 80057b8 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80057a2:	9901      	ldr	r1, [sp, #4]
 80057a4:	3108      	adds	r1, #8
 80057a6:	440a      	add	r2, r1
 80057a8:	9201      	str	r2, [sp, #4]
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80057aa:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 80057ac:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 80057ae:	6013      	str	r3, [r2, #0]
}
 80057b0:	b003      	add	sp, #12
 80057b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057b6:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80057b8:	9901      	ldr	r1, [sp, #4]
 80057ba:	3114      	adds	r1, #20
 80057bc:	440a      	add	r2, r1
 80057be:	9201      	str	r2, [sp, #4]
 80057c0:	e7f3      	b.n	80057aa <HAL_DAC_SetValue+0x16>
 80057c2:	bf00      	nop

080057c4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80057c4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057c6:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7fc fe75 	bl	80024b8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80057ce:	2301      	movs	r3, #1
 80057d0:	7123      	strb	r3, [r4, #4]
}
 80057d2:	bd10      	pop	{r4, pc}

080057d4 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80057d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80057d6:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80057d8:	f7fc fe80 	bl	80024dc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80057dc:	bd08      	pop	{r3, pc}
 80057de:	bf00      	nop

080057e0 <HAL_DAC_ErrorCallbackCh1>:
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop

080057e4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80057e4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057e6:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80057e8:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80057ea:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80057ec:	f043 0304 	orr.w	r3, r3, #4
 80057f0:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 80057f2:	f7ff fff5 	bl	80057e0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80057f6:	2301      	movs	r3, #1
 80057f8:	7123      	strb	r3, [r4, #4]
}
 80057fa:	bd10      	pop	{r4, pc}

080057fc <HAL_DAC_DMAUnderrunCallbackCh1>:
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop

08005800 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005800:	6803      	ldr	r3, [r0, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	0491      	lsls	r1, r2, #18
{
 8005806:	b510      	push	{r4, lr}
 8005808:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800580a:	d502      	bpl.n	8005812 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800580c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800580e:	0492      	lsls	r2, r2, #18
 8005810:	d418      	bmi.n	8005844 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	0091      	lsls	r1, r2, #2
 8005816:	d502      	bpl.n	800581e <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800581a:	0092      	lsls	r2, r2, #2
 800581c:	d400      	bmi.n	8005820 <HAL_DAC_IRQHandler+0x20>
}
 800581e:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8005820:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005822:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005826:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8005828:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800582a:	6922      	ldr	r2, [r4, #16]
 800582c:	f042 0202 	orr.w	r2, r2, #2
 8005830:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005832:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 800583a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800583e:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005840:	f000 b8dc 	b.w	80059fc <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8005844:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 800584a:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800584c:	6902      	ldr	r2, [r0, #16]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005854:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800585c:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800585e:	f7ff ffcd 	bl	80057fc <HAL_DAC_DMAUnderrunCallbackCh1>
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	e7d5      	b.n	8005812 <HAL_DAC_IRQHandler+0x12>
 8005866:	bf00      	nop

08005868 <HAL_DAC_ConfigChannel>:
{
 8005868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdac);
 800586c:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800586e:	680f      	ldr	r7, [r1, #0]
  __HAL_LOCK(hdac);
 8005870:	2b01      	cmp	r3, #1
 8005872:	f000 8095 	beq.w	80059a0 <HAL_DAC_ConfigChannel+0x138>
 8005876:	4615      	mov	r5, r2
  hdac->State = HAL_DAC_STATE_BUSY;
 8005878:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 800587a:	2201      	movs	r2, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800587c:	2f04      	cmp	r7, #4
 800587e:	4606      	mov	r6, r0
 8005880:	460c      	mov	r4, r1
  __HAL_LOCK(hdac);
 8005882:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8005884:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005886:	d04a      	beq.n	800591e <HAL_DAC_ConfigChannel+0xb6>
 8005888:	f005 0210 	and.w	r2, r5, #16
 800588c:	6801      	ldr	r1, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800588e:	6923      	ldr	r3, [r4, #16]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d108      	bne.n	80058a6 <HAL_DAC_ConfigChannel+0x3e>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005894:	251f      	movs	r5, #31
    tmpreg1 = hdac->Instance->CCR;
 8005896:	6b88      	ldr	r0, [r1, #56]	; 0x38
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005898:	6963      	ldr	r3, [r4, #20]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800589a:	4095      	lsls	r5, r2
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800589c:	4093      	lsls	r3, r2
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800589e:	ea20 0005 	bic.w	r0, r0, r5
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80058a2:	4303      	orrs	r3, r0
    hdac->Instance->CCR = tmpreg1;
 80058a4:	638b      	str	r3, [r1, #56]	; 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80058a6:	2007      	movs	r0, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80058a8:	68e5      	ldr	r5, [r4, #12]
  tmpreg1 = hdac->Instance->MCR;
 80058aa:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80058ac:	4090      	lsls	r0, r2
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80058ae:	2d01      	cmp	r5, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80058b0:	ea23 0000 	bic.w	r0, r3, r0
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80058b4:	d02e      	beq.n	8005914 <HAL_DAC_ConfigChannel+0xac>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80058b6:	2d02      	cmp	r5, #2
 80058b8:	68a5      	ldr	r5, [r4, #8]
 80058ba:	d02e      	beq.n	800591a <HAL_DAC_ConfigChannel+0xb2>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80058bc:	fab5 f385 	clz	r3, r5
 80058c0:	095b      	lsrs	r3, r3, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80058c2:	432b      	orrs	r3, r5
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80058c4:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80058c8:	6865      	ldr	r5, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80058ca:	f640 74fe 	movw	r4, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80058ce:	433b      	orrs	r3, r7
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80058d0:	fa08 f802 	lsl.w	r8, r8, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80058d4:	fa04 f702 	lsl.w	r7, r4, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80058d8:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80058da:	4093      	lsls	r3, r2
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80058dc:	24c0      	movs	r4, #192	; 0xc0
  __HAL_UNLOCK(hdac);
 80058de:	f04f 0c00 	mov.w	ip, #0
  hdac->State = HAL_DAC_STATE_READY;
 80058e2:	f04f 0e01 	mov.w	lr, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80058e6:	4303      	orrs	r3, r0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80058e8:	4094      	lsls	r4, r2
  return HAL_OK;
 80058ea:	4660      	mov	r0, ip
  hdac->Instance->MCR = tmpreg1;
 80058ec:	63cb      	str	r3, [r1, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80058ee:	680b      	ldr	r3, [r1, #0]
 80058f0:	ea23 0308 	bic.w	r3, r3, r8
 80058f4:	600b      	str	r3, [r1, #0]
  tmpreg1 = hdac->Instance->CR;
 80058f6:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80058f8:	ea23 0307 	bic.w	r3, r3, r7
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80058fc:	432b      	orrs	r3, r5
  hdac->Instance->CR = tmpreg1;
 80058fe:	600b      	str	r3, [r1, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005900:	680a      	ldr	r2, [r1, #0]
 8005902:	ea22 0204 	bic.w	r2, r2, r4
 8005906:	600a      	str	r2, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8005908:	f886 e004 	strb.w	lr, [r6, #4]
  __HAL_UNLOCK(hdac);
 800590c:	f886 c005 	strb.w	ip, [r6, #5]
}
 8005910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005914:	68a5      	ldr	r5, [r4, #8]
    connectOnChip = 0x00000000UL;
 8005916:	2300      	movs	r3, #0
 8005918:	e7d3      	b.n	80058c2 <HAL_DAC_ConfigChannel+0x5a>
    connectOnChip = DAC_MCR_MODE1_0;
 800591a:	2301      	movs	r3, #1
 800591c:	e7d1      	b.n	80058c2 <HAL_DAC_ConfigChannel+0x5a>
    tickstart = HAL_GetTick();
 800591e:	f7fe fc81 	bl	8004224 <HAL_GetTick>
 8005922:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8005924:	b9c5      	cbnz	r5, 8005958 <HAL_DAC_ConfigChannel+0xf0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005926:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80059b8 <HAL_DAC_ConfigChannel+0x150>
 800592a:	e004      	b.n	8005936 <HAL_DAC_ConfigChannel+0xce>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800592c:	f7fe fc7a 	bl	8004224 <HAL_GetTick>
 8005930:	1bc3      	subs	r3, r0, r7
 8005932:	2b01      	cmp	r3, #1
 8005934:	d837      	bhi.n	80059a6 <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005936:	6833      	ldr	r3, [r6, #0]
 8005938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593a:	ea13 0f08 	tst.w	r3, r8
 800593e:	d1f5      	bne.n	800592c <HAL_DAC_ConfigChannel+0xc4>
      HAL_Delay(1);
 8005940:	2001      	movs	r0, #1
 8005942:	f7fe fc75 	bl	8004230 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005946:	6831      	ldr	r1, [r6, #0]
 8005948:	69a3      	ldr	r3, [r4, #24]
 800594a:	640b      	str	r3, [r1, #64]	; 0x40
 800594c:	e00e      	b.n	800596c <HAL_DAC_ConfigChannel+0x104>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800594e:	f7fe fc69 	bl	8004224 <HAL_GetTick>
 8005952:	1bc3      	subs	r3, r0, r7
 8005954:	2b01      	cmp	r3, #1
 8005956:	d826      	bhi.n	80059a6 <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005958:	6833      	ldr	r3, [r6, #0]
 800595a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595c:	2b00      	cmp	r3, #0
 800595e:	dbf6      	blt.n	800594e <HAL_DAC_ConfigChannel+0xe6>
      HAL_Delay(1U);
 8005960:	2001      	movs	r0, #1
 8005962:	f7fe fc65 	bl	8004230 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005966:	6831      	ldr	r1, [r6, #0]
 8005968:	69a3      	ldr	r3, [r4, #24]
 800596a:	644b      	str	r3, [r1, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800596c:	f005 0210 	and.w	r2, r5, #16
 8005970:	f240 3cff 	movw	ip, #1023	; 0x3ff
 8005974:	6c88      	ldr	r0, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005976:	23ff      	movs	r3, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005978:	69e7      	ldr	r7, [r4, #28]
 800597a:	fa0c fc02 	lsl.w	ip, ip, r2
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800597e:	fa03 f502 	lsl.w	r5, r3, r2
 8005982:	6a23      	ldr	r3, [r4, #32]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005984:	4097      	lsls	r7, r2
 8005986:	ea20 000c 	bic.w	r0, r0, ip
 800598a:	4338      	orrs	r0, r7
 800598c:	6827      	ldr	r7, [r4, #0]
 800598e:	6488      	str	r0, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005990:	fa03 f002 	lsl.w	r0, r3, r2
 8005994:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8005996:	ea23 0305 	bic.w	r3, r3, r5
 800599a:	4303      	orrs	r3, r0
 800599c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800599e:	e776      	b.n	800588e <HAL_DAC_ConfigChannel+0x26>
  __HAL_LOCK(hdac);
 80059a0:	2002      	movs	r0, #2
}
 80059a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80059a6:	6933      	ldr	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80059a8:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80059aa:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 80059ae:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80059b0:	6133      	str	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80059b2:	7132      	strb	r2, [r6, #4]
          return HAL_TIMEOUT;
 80059b4:	e7ac      	b.n	8005910 <HAL_DAC_ConfigChannel+0xa8>
 80059b6:	bf00      	nop
 80059b8:	20008000 	.word	0x20008000

080059bc <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop

080059c0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80059c0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059c2:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80059c4:	4620      	mov	r0, r4
 80059c6:	f7ff fff9 	bl	80059bc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80059ca:	2301      	movs	r3, #1
 80059cc:	7123      	strb	r3, [r4, #4]
}
 80059ce:	bd10      	pop	{r4, pc}

080059d0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop

080059d4 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80059d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80059d6:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80059d8:	f7ff fffa 	bl	80059d0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80059dc:	bd08      	pop	{r3, pc}
 80059de:	bf00      	nop

080059e0 <HAL_DACEx_ErrorCallbackCh2>:
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop

080059e4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80059e4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059e6:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80059e8:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80059ea:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80059ec:	f043 0304 	orr.w	r3, r3, #4
 80059f0:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80059f2:	f7ff fff5 	bl	80059e0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80059f6:	2301      	movs	r3, #1
 80059f8:	7123      	strb	r3, [r4, #4]
}
 80059fa:	bd10      	pop	{r4, pc}

080059fc <HAL_DACEx_DMAUnderrunCallbackCh2>:
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop

08005a00 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a00:	6802      	ldr	r2, [r0, #0]
 8005a02:	4b35      	ldr	r3, [pc, #212]	; (8005ad8 <DMA_CalcBaseAndBitshift+0xd8>)
 8005a04:	4935      	ldr	r1, [pc, #212]	; (8005adc <DMA_CalcBaseAndBitshift+0xdc>)
{
 8005a06:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a08:	4c35      	ldr	r4, [pc, #212]	; (8005ae0 <DMA_CalcBaseAndBitshift+0xe0>)
 8005a0a:	4d36      	ldr	r5, [pc, #216]	; (8005ae4 <DMA_CalcBaseAndBitshift+0xe4>)
 8005a0c:	42a2      	cmp	r2, r4
 8005a0e:	bf18      	it	ne
 8005a10:	429a      	cmpne	r2, r3
 8005a12:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8005a16:	bf0c      	ite	eq
 8005a18:	2301      	moveq	r3, #1
 8005a1a:	2300      	movne	r3, #0
 8005a1c:	428a      	cmp	r2, r1
 8005a1e:	bf08      	it	eq
 8005a20:	f043 0301 	orreq.w	r3, r3, #1
 8005a24:	3148      	adds	r1, #72	; 0x48
 8005a26:	42aa      	cmp	r2, r5
 8005a28:	bf08      	it	eq
 8005a2a:	f043 0301 	orreq.w	r3, r3, #1
 8005a2e:	3548      	adds	r5, #72	; 0x48
 8005a30:	42a2      	cmp	r2, r4
 8005a32:	bf08      	it	eq
 8005a34:	f043 0301 	orreq.w	r3, r3, #1
 8005a38:	3448      	adds	r4, #72	; 0x48
 8005a3a:	428a      	cmp	r2, r1
 8005a3c:	bf08      	it	eq
 8005a3e:	f043 0301 	orreq.w	r3, r3, #1
 8005a42:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8005a46:	42aa      	cmp	r2, r5
 8005a48:	bf08      	it	eq
 8005a4a:	f043 0301 	orreq.w	r3, r3, #1
 8005a4e:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8005a52:	42a2      	cmp	r2, r4
 8005a54:	bf08      	it	eq
 8005a56:	f043 0301 	orreq.w	r3, r3, #1
 8005a5a:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8005a5e:	428a      	cmp	r2, r1
 8005a60:	bf08      	it	eq
 8005a62:	f043 0301 	orreq.w	r3, r3, #1
 8005a66:	3148      	adds	r1, #72	; 0x48
 8005a68:	42aa      	cmp	r2, r5
 8005a6a:	bf08      	it	eq
 8005a6c:	f043 0301 	orreq.w	r3, r3, #1
 8005a70:	3548      	adds	r5, #72	; 0x48
 8005a72:	42a2      	cmp	r2, r4
 8005a74:	bf08      	it	eq
 8005a76:	f043 0301 	orreq.w	r3, r3, #1
 8005a7a:	3448      	adds	r4, #72	; 0x48
 8005a7c:	428a      	cmp	r2, r1
 8005a7e:	bf08      	it	eq
 8005a80:	f043 0301 	orreq.w	r3, r3, #1
 8005a84:	3148      	adds	r1, #72	; 0x48
 8005a86:	42aa      	cmp	r2, r5
 8005a88:	bf08      	it	eq
 8005a8a:	f043 0301 	orreq.w	r3, r3, #1
 8005a8e:	42a2      	cmp	r2, r4
 8005a90:	bf08      	it	eq
 8005a92:	f043 0301 	orreq.w	r3, r3, #1
 8005a96:	428a      	cmp	r2, r1
 8005a98:	bf08      	it	eq
 8005a9a:	f043 0301 	orreq.w	r3, r3, #1
 8005a9e:	b913      	cbnz	r3, 8005aa6 <DMA_CalcBaseAndBitshift+0xa6>
 8005aa0:	4b11      	ldr	r3, [pc, #68]	; (8005ae8 <DMA_CalcBaseAndBitshift+0xe8>)
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d113      	bne.n	8005ace <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005aa6:	b2d3      	uxtb	r3, r2
 8005aa8:	4910      	ldr	r1, [pc, #64]	; (8005aec <DMA_CalcBaseAndBitshift+0xec>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005aaa:	4c11      	ldr	r4, [pc, #68]	; (8005af0 <DMA_CalcBaseAndBitshift+0xf0>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005aac:	3b10      	subs	r3, #16
 8005aae:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 8005ab2:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005ab4:	4b0f      	ldr	r3, [pc, #60]	; (8005af4 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ab6:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005aba:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005abe:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005ac0:	bf88      	it	hi
 8005ac2:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ac4:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005ac6:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	bc30      	pop	{r4, r5}
 8005acc:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005ace:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8005ad2:	6583      	str	r3, [r0, #88]	; 0x58
 8005ad4:	e7f8      	b.n	8005ac8 <DMA_CalcBaseAndBitshift+0xc8>
 8005ad6:	bf00      	nop
 8005ad8:	40020010 	.word	0x40020010
 8005adc:	40020040 	.word	0x40020040
 8005ae0:	40020028 	.word	0x40020028
 8005ae4:	40020058 	.word	0x40020058
 8005ae8:	400204b8 	.word	0x400204b8
 8005aec:	aaaaaaab 	.word	0xaaaaaaab
 8005af0:	08018280 	.word	0x08018280
 8005af4:	fffffc00 	.word	0xfffffc00

08005af8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005af8:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005afa:	4a29      	ldr	r2, [pc, #164]	; (8005ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8005afc:	4929      	ldr	r1, [pc, #164]	; (8005ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 8005afe:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b00:	4d29      	ldr	r5, [pc, #164]	; (8005ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8005b02:	4c2a      	ldr	r4, [pc, #168]	; (8005bac <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8005b04:	42ab      	cmp	r3, r5
 8005b06:	bf18      	it	ne
 8005b08:	4293      	cmpne	r3, r2
 8005b0a:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8005b0e:	bf0c      	ite	eq
 8005b10:	2201      	moveq	r2, #1
 8005b12:	2200      	movne	r2, #0
 8005b14:	42a3      	cmp	r3, r4
 8005b16:	bf08      	it	eq
 8005b18:	f042 0201 	orreq.w	r2, r2, #1
 8005b1c:	343c      	adds	r4, #60	; 0x3c
 8005b1e:	428b      	cmp	r3, r1
 8005b20:	bf08      	it	eq
 8005b22:	f042 0201 	orreq.w	r2, r2, #1
 8005b26:	313c      	adds	r1, #60	; 0x3c
 8005b28:	42ab      	cmp	r3, r5
 8005b2a:	bf08      	it	eq
 8005b2c:	f042 0201 	orreq.w	r2, r2, #1
 8005b30:	42a3      	cmp	r3, r4
 8005b32:	bf08      	it	eq
 8005b34:	f042 0201 	orreq.w	r2, r2, #1
 8005b38:	428b      	cmp	r3, r1
 8005b3a:	bf08      	it	eq
 8005b3c:	f042 0201 	orreq.w	r2, r2, #1
 8005b40:	b912      	cbnz	r2, 8005b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 8005b42:	4a1b      	ldr	r2, [pc, #108]	; (8005bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d113      	bne.n	8005b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	4d1a      	ldr	r5, [pc, #104]	; (8005bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005b4c:	4a1a      	ldr	r2, [pc, #104]	; (8005bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b4e:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005b50:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005b52:	4c1a      	ldr	r4, [pc, #104]	; (8005bbc <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005b54:	fba5 5303 	umull	r5, r3, r5, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005b58:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005b5a:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b5e:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005b62:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b64:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005b68:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b6a:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005b6c:	bc30      	pop	{r4, r5}
 8005b6e:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b70:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005b72:	4913      	ldr	r1, [pc, #76]	; (8005bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b74:	4c13      	ldr	r4, [pc, #76]	; (8005bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005b76:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b78:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005b7a:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b7c:	fba4 2302 	umull	r2, r3, r4, r2
 8005b80:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005b84:	d800      	bhi.n	8005b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>
      stream_number += 8U;
 8005b86:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005b88:	4a0f      	ldr	r2, [pc, #60]	; (8005bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b8a:	f003 051f 	and.w	r5, r3, #31
 8005b8e:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b90:	4c0e      	ldr	r4, [pc, #56]	; (8005bcc <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005b92:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b94:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b96:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005b98:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b9a:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005b9c:	6602      	str	r2, [r0, #96]	; 0x60
}
 8005b9e:	e7e5      	b.n	8005b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>
 8005ba0:	58025408 	.word	0x58025408
 8005ba4:	58025444 	.word	0x58025444
 8005ba8:	5802541c 	.word	0x5802541c
 8005bac:	58025430 	.word	0x58025430
 8005bb0:	58025494 	.word	0x58025494
 8005bb4:	cccccccd 	.word	0xcccccccd
 8005bb8:	16009600 	.word	0x16009600
 8005bbc:	58025880 	.word	0x58025880
 8005bc0:	bffdfbf0 	.word	0xbffdfbf0
 8005bc4:	aaaaaaab 	.word	0xaaaaaaab
 8005bc8:	10008200 	.word	0x10008200
 8005bcc:	40020880 	.word	0x40020880

08005bd0 <HAL_DMA_Init>:
{
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005bd4:	f7fe fb26 	bl	8004224 <HAL_GetTick>
  if(hdma == NULL)
 8005bd8:	2c00      	cmp	r4, #0
 8005bda:	f000 818a 	beq.w	8005ef2 <HAL_DMA_Init+0x322>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	4605      	mov	r5, r0
 8005be2:	4a95      	ldr	r2, [pc, #596]	; (8005e38 <HAL_DMA_Init+0x268>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d049      	beq.n	8005c7c <HAL_DMA_Init+0xac>
 8005be8:	3218      	adds	r2, #24
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d046      	beq.n	8005c7c <HAL_DMA_Init+0xac>
 8005bee:	3230      	adds	r2, #48	; 0x30
 8005bf0:	4892      	ldr	r0, [pc, #584]	; (8005e3c <HAL_DMA_Init+0x26c>)
 8005bf2:	4993      	ldr	r1, [pc, #588]	; (8005e40 <HAL_DMA_Init+0x270>)
 8005bf4:	4283      	cmp	r3, r0
 8005bf6:	bf18      	it	ne
 8005bf8:	4293      	cmpne	r3, r2
 8005bfa:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8005bfe:	bf0c      	ite	eq
 8005c00:	2201      	moveq	r2, #1
 8005c02:	2200      	movne	r2, #0
 8005c04:	428b      	cmp	r3, r1
 8005c06:	bf08      	it	eq
 8005c08:	f042 0201 	orreq.w	r2, r2, #1
 8005c0c:	3130      	adds	r1, #48	; 0x30
 8005c0e:	4283      	cmp	r3, r0
 8005c10:	bf08      	it	eq
 8005c12:	f042 0201 	orreq.w	r2, r2, #1
 8005c16:	3030      	adds	r0, #48	; 0x30
 8005c18:	428b      	cmp	r3, r1
 8005c1a:	bf08      	it	eq
 8005c1c:	f042 0201 	orreq.w	r2, r2, #1
 8005c20:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8005c24:	4283      	cmp	r3, r0
 8005c26:	bf08      	it	eq
 8005c28:	f042 0201 	orreq.w	r2, r2, #1
 8005c2c:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005c30:	428b      	cmp	r3, r1
 8005c32:	bf08      	it	eq
 8005c34:	f042 0201 	orreq.w	r2, r2, #1
 8005c38:	3130      	adds	r1, #48	; 0x30
 8005c3a:	4283      	cmp	r3, r0
 8005c3c:	bf08      	it	eq
 8005c3e:	f042 0201 	orreq.w	r2, r2, #1
 8005c42:	3030      	adds	r0, #48	; 0x30
 8005c44:	428b      	cmp	r3, r1
 8005c46:	bf08      	it	eq
 8005c48:	f042 0201 	orreq.w	r2, r2, #1
 8005c4c:	3130      	adds	r1, #48	; 0x30
 8005c4e:	4283      	cmp	r3, r0
 8005c50:	bf08      	it	eq
 8005c52:	f042 0201 	orreq.w	r2, r2, #1
 8005c56:	3030      	adds	r0, #48	; 0x30
 8005c58:	428b      	cmp	r3, r1
 8005c5a:	bf08      	it	eq
 8005c5c:	f042 0201 	orreq.w	r2, r2, #1
 8005c60:	3130      	adds	r1, #48	; 0x30
 8005c62:	4283      	cmp	r3, r0
 8005c64:	bf08      	it	eq
 8005c66:	f042 0201 	orreq.w	r2, r2, #1
 8005c6a:	428b      	cmp	r3, r1
 8005c6c:	bf08      	it	eq
 8005c6e:	f042 0201 	orreq.w	r2, r2, #1
 8005c72:	b91a      	cbnz	r2, 8005c7c <HAL_DMA_Init+0xac>
 8005c74:	4a73      	ldr	r2, [pc, #460]	; (8005e44 <HAL_DMA_Init+0x274>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	f040 81a1 	bne.w	8005fbe <HAL_DMA_Init+0x3ee>
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c7c:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005c7e:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c80:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8005c84:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	f022 0201 	bic.w	r2, r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	e006      	b.n	8005ca0 <HAL_DMA_Init+0xd0>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c92:	f7fe fac7 	bl	8004224 <HAL_GetTick>
 8005c96:	1b43      	subs	r3, r0, r5
 8005c98:	2b05      	cmp	r3, #5
 8005c9a:	f200 8111 	bhi.w	8005ec0 <HAL_DMA_Init+0x2f0>
 8005c9e:	6823      	ldr	r3, [r4, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	07d0      	lsls	r0, r2, #31
 8005ca4:	d4f5      	bmi.n	8005c92 <HAL_DMA_Init+0xc2>
    registerValue |=  hdma->Init.Direction           |
 8005ca6:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005caa:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8005cac:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005cae:	681f      	ldr	r7, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cb0:	e9d4 6005 	ldrd	r6, r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	4332      	orrs	r2, r6
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005cb8:	4e63      	ldr	r6, [pc, #396]	; (8005e48 <HAL_DMA_Init+0x278>)
            hdma->Init.Mode                | hdma->Init.Priority;
 8005cba:	e9d4 5107 	ldrd	r5, r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cbe:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005cc0:	403e      	ands	r6, r7
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cc2:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cc4:	6a65      	ldr	r5, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 8005cc6:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cc8:	2d04      	cmp	r5, #4
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005cca:	4960      	ldr	r1, [pc, #384]	; (8005e4c <HAL_DMA_Init+0x27c>)
    registerValue |=  hdma->Init.Direction           |
 8005ccc:	ea42 0206 	orr.w	r2, r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005cd0:	4e5f      	ldr	r6, [pc, #380]	; (8005e50 <HAL_DMA_Init+0x280>)
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cd2:	f000 8110 	beq.w	8005ef6 <HAL_DMA_Init+0x326>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005cd6:	6836      	ldr	r6, [r6, #0]
 8005cd8:	4031      	ands	r1, r6
 8005cda:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8005cde:	f080 80c3 	bcs.w	8005e68 <HAL_DMA_Init+0x298>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005ce2:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005ce4:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ce6:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 8005cea:	4329      	orrs	r1, r5
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005cec:	6159      	str	r1, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f7ff fe86 	bl	8005a00 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cf4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005cf6:	233f      	movs	r3, #63	; 0x3f
 8005cf8:	f002 021f 	and.w	r2, r2, #31
 8005cfc:	4093      	lsls	r3, r2
 8005cfe:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d00:	6822      	ldr	r2, [r4, #0]
 8005d02:	4b4d      	ldr	r3, [pc, #308]	; (8005e38 <HAL_DMA_Init+0x268>)
 8005d04:	4953      	ldr	r1, [pc, #332]	; (8005e54 <HAL_DMA_Init+0x284>)
 8005d06:	4d4d      	ldr	r5, [pc, #308]	; (8005e3c <HAL_DMA_Init+0x26c>)
 8005d08:	428a      	cmp	r2, r1
 8005d0a:	bf18      	it	ne
 8005d0c:	429a      	cmpne	r2, r3
 8005d0e:	4852      	ldr	r0, [pc, #328]	; (8005e58 <HAL_DMA_Init+0x288>)
 8005d10:	f101 0148 	add.w	r1, r1, #72	; 0x48
 8005d14:	bf0c      	ite	eq
 8005d16:	2301      	moveq	r3, #1
 8005d18:	2300      	movne	r3, #0
 8005d1a:	42aa      	cmp	r2, r5
 8005d1c:	bf08      	it	eq
 8005d1e:	f043 0301 	orreq.w	r3, r3, #1
 8005d22:	3548      	adds	r5, #72	; 0x48
 8005d24:	4282      	cmp	r2, r0
 8005d26:	bf08      	it	eq
 8005d28:	f043 0301 	orreq.w	r3, r3, #1
 8005d2c:	3048      	adds	r0, #72	; 0x48
 8005d2e:	428a      	cmp	r2, r1
 8005d30:	bf08      	it	eq
 8005d32:	f043 0301 	orreq.w	r3, r3, #1
 8005d36:	3148      	adds	r1, #72	; 0x48
 8005d38:	42aa      	cmp	r2, r5
 8005d3a:	bf08      	it	eq
 8005d3c:	f043 0301 	orreq.w	r3, r3, #1
 8005d40:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8005d44:	4282      	cmp	r2, r0
 8005d46:	bf08      	it	eq
 8005d48:	f043 0301 	orreq.w	r3, r3, #1
 8005d4c:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8005d50:	428a      	cmp	r2, r1
 8005d52:	bf08      	it	eq
 8005d54:	f043 0301 	orreq.w	r3, r3, #1
 8005d58:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8005d5c:	42aa      	cmp	r2, r5
 8005d5e:	bf08      	it	eq
 8005d60:	f043 0301 	orreq.w	r3, r3, #1
 8005d64:	3548      	adds	r5, #72	; 0x48
 8005d66:	4282      	cmp	r2, r0
 8005d68:	bf08      	it	eq
 8005d6a:	f043 0301 	orreq.w	r3, r3, #1
 8005d6e:	3048      	adds	r0, #72	; 0x48
 8005d70:	428a      	cmp	r2, r1
 8005d72:	bf08      	it	eq
 8005d74:	f043 0301 	orreq.w	r3, r3, #1
 8005d78:	3148      	adds	r1, #72	; 0x48
 8005d7a:	42aa      	cmp	r2, r5
 8005d7c:	bf08      	it	eq
 8005d7e:	f043 0301 	orreq.w	r3, r3, #1
 8005d82:	3548      	adds	r5, #72	; 0x48
 8005d84:	4282      	cmp	r2, r0
 8005d86:	bf08      	it	eq
 8005d88:	f043 0301 	orreq.w	r3, r3, #1
 8005d8c:	3048      	adds	r0, #72	; 0x48
 8005d8e:	428a      	cmp	r2, r1
 8005d90:	bf08      	it	eq
 8005d92:	f043 0301 	orreq.w	r3, r3, #1
 8005d96:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 8005d9a:	42aa      	cmp	r2, r5
 8005d9c:	bf08      	it	eq
 8005d9e:	f043 0301 	orreq.w	r3, r3, #1
 8005da2:	f501 419f 	add.w	r1, r1, #20352	; 0x4f80
 8005da6:	4d2d      	ldr	r5, [pc, #180]	; (8005e5c <HAL_DMA_Init+0x28c>)
 8005da8:	4282      	cmp	r2, r0
 8005daa:	bf08      	it	eq
 8005dac:	f043 0301 	orreq.w	r3, r3, #1
 8005db0:	482b      	ldr	r0, [pc, #172]	; (8005e60 <HAL_DMA_Init+0x290>)
 8005db2:	428a      	cmp	r2, r1
 8005db4:	bf08      	it	eq
 8005db6:	f043 0301 	orreq.w	r3, r3, #1
 8005dba:	313c      	adds	r1, #60	; 0x3c
 8005dbc:	42aa      	cmp	r2, r5
 8005dbe:	bf08      	it	eq
 8005dc0:	f043 0301 	orreq.w	r3, r3, #1
 8005dc4:	353c      	adds	r5, #60	; 0x3c
 8005dc6:	4282      	cmp	r2, r0
 8005dc8:	bf08      	it	eq
 8005dca:	f043 0301 	orreq.w	r3, r3, #1
 8005dce:	303c      	adds	r0, #60	; 0x3c
 8005dd0:	428a      	cmp	r2, r1
 8005dd2:	bf08      	it	eq
 8005dd4:	f043 0301 	orreq.w	r3, r3, #1
 8005dd8:	313c      	adds	r1, #60	; 0x3c
 8005dda:	42aa      	cmp	r2, r5
 8005ddc:	bf08      	it	eq
 8005dde:	f043 0301 	orreq.w	r3, r3, #1
 8005de2:	4282      	cmp	r2, r0
 8005de4:	bf08      	it	eq
 8005de6:	f043 0301 	orreq.w	r3, r3, #1
 8005dea:	428a      	cmp	r2, r1
 8005dec:	bf08      	it	eq
 8005dee:	f043 0301 	orreq.w	r3, r3, #1
 8005df2:	b913      	cbnz	r3, 8005dfa <HAL_DMA_Init+0x22a>
 8005df4:	4b1b      	ldr	r3, [pc, #108]	; (8005e64 <HAL_DMA_Init+0x294>)
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d118      	bne.n	8005e2c <HAL_DMA_Init+0x25c>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f7ff fe7c 	bl	8005af8 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e00:	68a3      	ldr	r3, [r4, #8]
 8005e02:	2b80      	cmp	r3, #128	; 0x80
 8005e04:	d069      	beq.n	8005eda <HAL_DMA_Init+0x30a>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e06:	6863      	ldr	r3, [r4, #4]
 8005e08:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8005e0a:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e0c:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e0e:	e9d4 1019 	ldrd	r1, r0, [r4, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e12:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e14:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e16:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e18:	d866      	bhi.n	8005ee8 <HAL_DMA_Init+0x318>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005e1a:	1e50      	subs	r0, r2, #1
 8005e1c:	2807      	cmp	r0, #7
 8005e1e:	d97c      	bls.n	8005f1a <HAL_DMA_Init+0x34a>
 8005e20:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8005e22:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e26:	2000      	movs	r0, #0
 8005e28:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e2a:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e2c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005e2e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e30:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8005e32:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e38:	40020010 	.word	0x40020010
 8005e3c:	40020040 	.word	0x40020040
 8005e40:	40020070 	.word	0x40020070
 8005e44:	400204b8 	.word	0x400204b8
 8005e48:	fe10803f 	.word	0xfe10803f
 8005e4c:	ffff0000 	.word	0xffff0000
 8005e50:	5c001000 	.word	0x5c001000
 8005e54:	40020028 	.word	0x40020028
 8005e58:	40020058 	.word	0x40020058
 8005e5c:	5802541c 	.word	0x5802541c
 8005e60:	58025430 	.word	0x58025430
 8005e64:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005e68:	6861      	ldr	r1, [r4, #4]
 8005e6a:	f1a1 0629 	sub.w	r6, r1, #41	; 0x29
 8005e6e:	2e1f      	cmp	r6, #31
 8005e70:	d92d      	bls.n	8005ece <HAL_DMA_Init+0x2fe>
 8005e72:	394f      	subs	r1, #79	; 0x4f
 8005e74:	2903      	cmp	r1, #3
 8005e76:	d801      	bhi.n	8005e7c <HAL_DMA_Init+0x2ac>
        registerValue |= DMA_SxCR_TRBUFF;
 8005e78:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005e7c:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e7e:	2d04      	cmp	r5, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005e80:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e82:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 8005e86:	ea41 0105 	orr.w	r1, r1, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e8a:	f47f af2f 	bne.w	8005cec <HAL_DMA_Init+0x11c>
 8005e8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8005e90:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005e92:	4311      	orrs	r1, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e94:	2e00      	cmp	r6, #0
 8005e96:	f43f af29 	beq.w	8005cec <HAL_DMA_Init+0x11c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	d173      	bne.n	8005f86 <HAL_DMA_Init+0x3b6>
    switch (hdma->Init.FIFOThreshold)
 8005e9e:	2a01      	cmp	r2, #1
 8005ea0:	f000 8088 	beq.w	8005fb4 <HAL_DMA_Init+0x3e4>
 8005ea4:	f032 0202 	bics.w	r2, r2, #2
 8005ea8:	f47f af20 	bne.w	8005cec <HAL_DMA_Init+0x11c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005eac:	01f2      	lsls	r2, r6, #7
 8005eae:	f57f af1d 	bpl.w	8005cec <HAL_DMA_Init+0x11c>
          hdma->State = HAL_DMA_STATE_READY;
 8005eb2:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005eb4:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8005eb6:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005eb8:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8005eba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ec0:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ec2:	2303      	movs	r3, #3
        return HAL_ERROR;
 8005ec4:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ec6:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ec8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005ece:	4970      	ldr	r1, [pc, #448]	; (8006090 <HAL_DMA_Init+0x4c0>)
 8005ed0:	fa21 f606 	lsr.w	r6, r1, r6
 8005ed4:	07f1      	lsls	r1, r6, #31
 8005ed6:	d5d1      	bpl.n	8005e7c <HAL_DMA_Init+0x2ac>
 8005ed8:	e7ce      	b.n	8005e78 <HAL_DMA_Init+0x2a8>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005eda:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005edc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005ede:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005ee2:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ee4:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ee6:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8005ee8:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8005eea:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005eee:	6763      	str	r3, [r4, #116]	; 0x74
 8005ef0:	e79c      	b.n	8005e2c <HAL_DMA_Init+0x25c>
    return HAL_ERROR;
 8005ef2:	2001      	movs	r0, #1
}
 8005ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005ef6:	6837      	ldr	r7, [r6, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ef8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005efa:	4039      	ands	r1, r7
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005efc:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005efe:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f02:	ea46 0707 	orr.w	r7, r6, r7
 8005f06:	ea42 0207 	orr.w	r2, r2, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005f0a:	d2ad      	bcs.n	8005e68 <HAL_DMA_Init+0x298>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005f0c:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005f0e:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f10:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 8005f14:	f041 0104 	orr.w	r1, r1, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f18:	e7ba      	b.n	8005e90 <HAL_DMA_Init+0x2c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f1a:	6821      	ldr	r1, [r4, #0]
 8005f1c:	4b5d      	ldr	r3, [pc, #372]	; (8006094 <HAL_DMA_Init+0x4c4>)
 8005f1e:	4e5e      	ldr	r6, [pc, #376]	; (8006098 <HAL_DMA_Init+0x4c8>)
 8005f20:	4d5e      	ldr	r5, [pc, #376]	; (800609c <HAL_DMA_Init+0x4cc>)
 8005f22:	42b1      	cmp	r1, r6
 8005f24:	bf18      	it	ne
 8005f26:	4299      	cmpne	r1, r3
 8005f28:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8005f2c:	bf0c      	ite	eq
 8005f2e:	2301      	moveq	r3, #1
 8005f30:	2300      	movne	r3, #0
 8005f32:	42a9      	cmp	r1, r5
 8005f34:	bf08      	it	eq
 8005f36:	f043 0301 	orreq.w	r3, r3, #1
 8005f3a:	3528      	adds	r5, #40	; 0x28
 8005f3c:	42b1      	cmp	r1, r6
 8005f3e:	bf08      	it	eq
 8005f40:	f043 0301 	orreq.w	r3, r3, #1
 8005f44:	3628      	adds	r6, #40	; 0x28
 8005f46:	42a9      	cmp	r1, r5
 8005f48:	bf08      	it	eq
 8005f4a:	f043 0301 	orreq.w	r3, r3, #1
 8005f4e:	3528      	adds	r5, #40	; 0x28
 8005f50:	42b1      	cmp	r1, r6
 8005f52:	bf08      	it	eq
 8005f54:	f043 0301 	orreq.w	r3, r3, #1
 8005f58:	42a9      	cmp	r1, r5
 8005f5a:	bf08      	it	eq
 8005f5c:	f043 0301 	orreq.w	r3, r3, #1
 8005f60:	b93b      	cbnz	r3, 8005f72 <HAL_DMA_Init+0x3a2>
 8005f62:	4b4f      	ldr	r3, [pc, #316]	; (80060a0 <HAL_DMA_Init+0x4d0>)
 8005f64:	4299      	cmp	r1, r3
 8005f66:	d004      	beq.n	8005f72 <HAL_DMA_Init+0x3a2>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f68:	4b4e      	ldr	r3, [pc, #312]	; (80060a4 <HAL_DMA_Init+0x4d4>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f6a:	494f      	ldr	r1, [pc, #316]	; (80060a8 <HAL_DMA_Init+0x4d8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f6c:	4413      	add	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f70:	e003      	b.n	8005f7a <HAL_DMA_Init+0x3aa>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f72:	4b4e      	ldr	r3, [pc, #312]	; (80060ac <HAL_DMA_Init+0x4dc>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005f74:	494e      	ldr	r1, [pc, #312]	; (80060b0 <HAL_DMA_Init+0x4e0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f76:	4413      	add	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	4082      	lsls	r2, r0
 8005f7e:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 8005f82:	6762      	str	r2, [r4, #116]	; 0x74
 8005f84:	e74f      	b.n	8005e26 <HAL_DMA_Init+0x256>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f86:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005f8a:	d004      	beq.n	8005f96 <HAL_DMA_Init+0x3c6>
    switch (hdma->Init.FIFOThreshold)
 8005f8c:	2a02      	cmp	r2, #2
 8005f8e:	d990      	bls.n	8005eb2 <HAL_DMA_Init+0x2e2>
 8005f90:	2a03      	cmp	r2, #3
 8005f92:	d08b      	beq.n	8005eac <HAL_DMA_Init+0x2dc>
 8005f94:	e6aa      	b.n	8005cec <HAL_DMA_Init+0x11c>
    switch (hdma->Init.FIFOThreshold)
 8005f96:	2a03      	cmp	r2, #3
 8005f98:	f63f aea8 	bhi.w	8005cec <HAL_DMA_Init+0x11c>
 8005f9c:	a001      	add	r0, pc, #4	; (adr r0, 8005fa4 <HAL_DMA_Init+0x3d4>)
 8005f9e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8005fa2:	bf00      	nop
 8005fa4:	08005eb3 	.word	0x08005eb3
 8005fa8:	08005ead 	.word	0x08005ead
 8005fac:	08005eb3 	.word	0x08005eb3
 8005fb0:	08005fb5 	.word	0x08005fb5
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fb4:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 8005fb8:	f47f ae98 	bne.w	8005cec <HAL_DMA_Init+0x11c>
 8005fbc:	e779      	b.n	8005eb2 <HAL_DMA_Init+0x2e2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005fbe:	4a35      	ldr	r2, [pc, #212]	; (8006094 <HAL_DMA_Init+0x4c4>)
 8005fc0:	4935      	ldr	r1, [pc, #212]	; (8006098 <HAL_DMA_Init+0x4c8>)
 8005fc2:	4836      	ldr	r0, [pc, #216]	; (800609c <HAL_DMA_Init+0x4cc>)
 8005fc4:	428b      	cmp	r3, r1
 8005fc6:	bf18      	it	ne
 8005fc8:	4293      	cmpne	r3, r2
 8005fca:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8005fce:	4d39      	ldr	r5, [pc, #228]	; (80060b4 <HAL_DMA_Init+0x4e4>)
 8005fd0:	bf0c      	ite	eq
 8005fd2:	2201      	moveq	r2, #1
 8005fd4:	2200      	movne	r2, #0
 8005fd6:	4283      	cmp	r3, r0
 8005fd8:	bf08      	it	eq
 8005fda:	f042 0201 	orreq.w	r2, r2, #1
 8005fde:	303c      	adds	r0, #60	; 0x3c
 8005fe0:	428b      	cmp	r3, r1
 8005fe2:	bf08      	it	eq
 8005fe4:	f042 0201 	orreq.w	r2, r2, #1
 8005fe8:	313c      	adds	r1, #60	; 0x3c
 8005fea:	42ab      	cmp	r3, r5
 8005fec:	bf08      	it	eq
 8005fee:	f042 0201 	orreq.w	r2, r2, #1
 8005ff2:	4283      	cmp	r3, r0
 8005ff4:	bf08      	it	eq
 8005ff6:	f042 0201 	orreq.w	r2, r2, #1
 8005ffa:	428b      	cmp	r3, r1
 8005ffc:	bf08      	it	eq
 8005ffe:	f042 0201 	orreq.w	r2, r2, #1
 8006002:	b912      	cbnz	r2, 800600a <HAL_DMA_Init+0x43a>
 8006004:	4a26      	ldr	r2, [pc, #152]	; (80060a0 <HAL_DMA_Init+0x4d0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d13a      	bne.n	8006080 <HAL_DMA_Init+0x4b0>
    hdma->State = HAL_DMA_STATE_BUSY;
 800600a:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800600c:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800600e:	4f2a      	ldr	r7, [pc, #168]	; (80060b8 <HAL_DMA_Init+0x4e8>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8006010:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006014:	68a2      	ldr	r2, [r4, #8]
    __HAL_UNLOCK(hdma);
 8006016:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800601a:	2a40      	cmp	r2, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800601c:	6819      	ldr	r1, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800601e:	ea07 0701 	and.w	r7, r7, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006022:	d02b      	beq.n	800607c <HAL_DMA_Init+0x4ac>
 8006024:	2a80      	cmp	r2, #128	; 0x80
 8006026:	bf0c      	ite	eq
 8006028:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
 800602c:	2100      	movne	r1, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800602e:	6922      	ldr	r2, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006030:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006032:	68e6      	ldr	r6, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006034:	08d2      	lsrs	r2, r2, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006036:	6965      	ldr	r5, [r4, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006038:	f8df c084 	ldr.w	ip, [pc, #132]	; 80060c0 <HAL_DMA_Init+0x4f0>
 800603c:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006040:	69a6      	ldr	r6, [r4, #24]
 8006042:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006046:	69e5      	ldr	r5, [r4, #28]
 8006048:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800604c:	4e1b      	ldr	r6, [pc, #108]	; (80060bc <HAL_DMA_Init+0x4ec>)
 800604e:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 8006052:	441e      	add	r6, r3
 8006054:	6a25      	ldr	r5, [r4, #32]
 8006056:	ea42 1215 	orr.w	r2, r2, r5, lsr #4
 800605a:	fbac 6506 	umull	r6, r5, ip, r6
 800605e:	433a      	orrs	r2, r7
 8006060:	092d      	lsrs	r5, r5, #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006062:	4311      	orrs	r1, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006064:	00ad      	lsls	r5, r5, #2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006066:	6019      	str	r1, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006068:	65e5      	str	r5, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800606a:	f7ff fcc9 	bl	8005a00 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800606e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006070:	2301      	movs	r3, #1
 8006072:	f002 021f 	and.w	r2, r2, #31
 8006076:	4093      	lsls	r3, r2
 8006078:	6043      	str	r3, [r0, #4]
 800607a:	e641      	b.n	8005d00 <HAL_DMA_Init+0x130>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800607c:	2110      	movs	r1, #16
 800607e:	e7d6      	b.n	800602e <HAL_DMA_Init+0x45e>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006080:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006082:	2303      	movs	r3, #3
    return HAL_ERROR;
 8006084:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006086:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006088:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800608c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800608e:	bf00      	nop
 8006090:	c3c0003f 	.word	0xc3c0003f
 8006094:	58025408 	.word	0x58025408
 8006098:	5802541c 	.word	0x5802541c
 800609c:	58025430 	.word	0x58025430
 80060a0:	58025494 	.word	0x58025494
 80060a4:	1000823f 	.word	0x1000823f
 80060a8:	40020940 	.word	0x40020940
 80060ac:	1600963f 	.word	0x1600963f
 80060b0:	58025940 	.word	0x58025940
 80060b4:	58025458 	.word	0x58025458
 80060b8:	fffe000f 	.word	0xfffe000f
 80060bc:	a7fdabf8 	.word	0xa7fdabf8
 80060c0:	cccccccd 	.word	0xcccccccd

080060c4 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80060c4:	2800      	cmp	r0, #0
 80060c6:	f000 818a 	beq.w	80063de <HAL_DMA_Start_IT+0x31a>
{
 80060ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ce:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80060d0:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80060d4:	2801      	cmp	r0, #1
 80060d6:	f000 8184 	beq.w	80063e2 <HAL_DMA_Start_IT+0x31e>
 80060da:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80060dc:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
 80060e0:	4285      	cmp	r5, r0
  __HAL_LOCK(hdma);
 80060e2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80060e6:	d007      	beq.n	80060f8 <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 80060e8:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80060ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 80060ee:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80060f2:	6563      	str	r3, [r4, #84]	; 0x54
}
 80060f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_DMA_DISABLE(hdma);
 80060f8:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80060fa:	f04f 0c02 	mov.w	ip, #2
    __HAL_DMA_DISABLE(hdma);
 80060fe:	4858      	ldr	r0, [pc, #352]	; (8006260 <HAL_DMA_Start_IT+0x19c>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006100:	2700      	movs	r7, #0
    __HAL_DMA_DISABLE(hdma);
 8006102:	4e58      	ldr	r6, [pc, #352]	; (8006264 <HAL_DMA_Start_IT+0x1a0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8006104:	f884 c035 	strb.w	ip, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006108:	42b5      	cmp	r5, r6
 800610a:	bf18      	it	ne
 800610c:	4285      	cmpne	r5, r0
    __HAL_DMA_DISABLE(hdma);
 800610e:	f8df c15c 	ldr.w	ip, [pc, #348]	; 800626c <HAL_DMA_Start_IT+0x1a8>
 8006112:	f106 0630 	add.w	r6, r6, #48	; 0x30
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006116:	6567      	str	r7, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8006118:	bf0c      	ite	eq
 800611a:	2001      	moveq	r0, #1
 800611c:	2000      	movne	r0, #0
 800611e:	4f52      	ldr	r7, [pc, #328]	; (8006268 <HAL_DMA_Start_IT+0x1a4>)
 8006120:	4565      	cmp	r5, ip
 8006122:	bf08      	it	eq
 8006124:	f040 0001 	orreq.w	r0, r0, #1
 8006128:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800612c:	42b5      	cmp	r5, r6
 800612e:	bf08      	it	eq
 8006130:	f040 0001 	orreq.w	r0, r0, #1
 8006134:	f506 7662 	add.w	r6, r6, #904	; 0x388
 8006138:	4565      	cmp	r5, ip
 800613a:	bf08      	it	eq
 800613c:	f040 0001 	orreq.w	r0, r0, #1
 8006140:	f50c 7c62 	add.w	ip, ip, #904	; 0x388
 8006144:	42bd      	cmp	r5, r7
 8006146:	bf08      	it	eq
 8006148:	f040 0001 	orreq.w	r0, r0, #1
 800614c:	f507 7762 	add.w	r7, r7, #904	; 0x388
 8006150:	42b5      	cmp	r5, r6
 8006152:	bf08      	it	eq
 8006154:	f040 0001 	orreq.w	r0, r0, #1
 8006158:	3648      	adds	r6, #72	; 0x48
 800615a:	4565      	cmp	r5, ip
 800615c:	bf08      	it	eq
 800615e:	f040 0001 	orreq.w	r0, r0, #1
 8006162:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 8006166:	42bd      	cmp	r5, r7
 8006168:	bf08      	it	eq
 800616a:	f040 0001 	orreq.w	r0, r0, #1
 800616e:	3748      	adds	r7, #72	; 0x48
 8006170:	42b5      	cmp	r5, r6
 8006172:	bf08      	it	eq
 8006174:	f040 0001 	orreq.w	r0, r0, #1
 8006178:	3648      	adds	r6, #72	; 0x48
 800617a:	4565      	cmp	r5, ip
 800617c:	bf08      	it	eq
 800617e:	f040 0001 	orreq.w	r0, r0, #1
 8006182:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 8006186:	42bd      	cmp	r5, r7
 8006188:	bf08      	it	eq
 800618a:	f040 0001 	orreq.w	r0, r0, #1
 800618e:	f5a7 678f 	sub.w	r7, r7, #1144	; 0x478
 8006192:	42b5      	cmp	r5, r6
 8006194:	bf08      	it	eq
 8006196:	f040 0001 	orreq.w	r0, r0, #1
 800619a:	f5a6 668f 	sub.w	r6, r6, #1144	; 0x478
 800619e:	4565      	cmp	r5, ip
 80061a0:	bf14      	ite	ne
 80061a2:	4682      	movne	sl, r0
 80061a4:	f040 0a01 	orreq.w	sl, r0, #1
 80061a8:	42b5      	cmp	r5, r6
 80061aa:	bf18      	it	ne
 80061ac:	42bd      	cmpne	r5, r7
 80061ae:	bf0c      	ite	eq
 80061b0:	2601      	moveq	r6, #1
 80061b2:	2600      	movne	r6, #0
 80061b4:	d002      	beq.n	80061bc <HAL_DMA_Start_IT+0xf8>
 80061b6:	f1ba 0f00 	cmp.w	sl, #0
 80061ba:	d059      	beq.n	8006270 <HAL_DMA_Start_IT+0x1ac>
 80061bc:	682f      	ldr	r7, [r5, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061be:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 80061c2:	f027 0701 	bic.w	r7, r7, #1
 80061c6:	602f      	str	r7, [r5, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061c8:	2e00      	cmp	r6, #0
 80061ca:	f000 8084 	beq.w	80062d6 <HAL_DMA_Start_IT+0x212>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061ce:	6e67      	ldr	r7, [r4, #100]	; 0x64
 80061d0:	e9d4 0e1a 	ldrd	r0, lr, [r4, #104]	; 0x68
 80061d4:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80061d6:	f1be 0f00 	cmp.w	lr, #0
 80061da:	d002      	beq.n	80061e2 <HAL_DMA_Start_IT+0x11e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061dc:	e9d4 701c 	ldrd	r7, r0, [r4, #112]	; 0x70
 80061e0:	6078      	str	r0, [r7, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061e2:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 80061e4:	f04f 093f 	mov.w	r9, #63	; 0x3f
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061e8:	f8d4 8008 	ldr.w	r8, [r4, #8]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061ec:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061f0:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061f4:	fa09 f707 	lsl.w	r7, r9, r7
 80061f8:	f8cc 7008 	str.w	r7, [ip, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80061fc:	682f      	ldr	r7, [r5, #0]
 80061fe:	f427 2780 	bic.w	r7, r7, #262144	; 0x40000
 8006202:	602f      	str	r7, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006204:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006206:	f000 80ef 	beq.w	80063e8 <HAL_DMA_Start_IT+0x324>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800620a:	60a9      	str	r1, [r5, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800620c:	60ea      	str	r2, [r5, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800620e:	b91e      	cbnz	r6, 8006218 <HAL_DMA_Start_IT+0x154>
 8006210:	f1ba 0f00 	cmp.w	sl, #0
 8006214:	f000 80ee 	beq.w	80063f4 <HAL_DMA_Start_IT+0x330>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006218:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800621a:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800621c:	f023 031e 	bic.w	r3, r3, #30
 8006220:	f043 0316 	orr.w	r3, r3, #22
 8006224:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8006226:	b11a      	cbz	r2, 8006230 <HAL_DMA_Start_IT+0x16c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	f043 0308 	orr.w	r3, r3, #8
 800622e:	602b      	str	r3, [r5, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006230:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	03d2      	lsls	r2, r2, #15
 8006236:	d503      	bpl.n	8006240 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800623e:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8006240:	f1be 0f00 	cmp.w	lr, #0
 8006244:	d005      	beq.n	8006252 <HAL_DMA_Start_IT+0x18e>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006246:	f8de 3000 	ldr.w	r3, [lr]
 800624a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800624e:	f8ce 3000 	str.w	r3, [lr]
    __HAL_DMA_ENABLE(hdma);
 8006252:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006254:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8006256:	f043 0301 	orr.w	r3, r3, #1
 800625a:	602b      	str	r3, [r5, #0]
}
 800625c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006260:	40020040 	.word	0x40020040
 8006264:	40020058 	.word	0x40020058
 8006268:	400200b8 	.word	0x400200b8
 800626c:	40020070 	.word	0x40020070
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006270:	4f65      	ldr	r7, [pc, #404]	; (8006408 <HAL_DMA_Start_IT+0x344>)
 8006272:	f8df e19c 	ldr.w	lr, [pc, #412]	; 8006410 <HAL_DMA_Start_IT+0x34c>
 8006276:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8006414 <HAL_DMA_Start_IT+0x350>
 800627a:	4575      	cmp	r5, lr
 800627c:	bf18      	it	ne
 800627e:	42bd      	cmpne	r5, r7
 8006280:	f10e 0e3c 	add.w	lr, lr, #60	; 0x3c
 8006284:	bf0c      	ite	eq
 8006286:	2701      	moveq	r7, #1
 8006288:	2700      	movne	r7, #0
 800628a:	4565      	cmp	r5, ip
 800628c:	bf08      	it	eq
 800628e:	f047 0701 	orreq.w	r7, r7, #1
 8006292:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8006296:	4575      	cmp	r5, lr
 8006298:	bf08      	it	eq
 800629a:	f047 0701 	orreq.w	r7, r7, #1
 800629e:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 80062a2:	4565      	cmp	r5, ip
 80062a4:	bf08      	it	eq
 80062a6:	f047 0701 	orreq.w	r7, r7, #1
 80062aa:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 80062ae:	4575      	cmp	r5, lr
 80062b0:	bf08      	it	eq
 80062b2:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 80062b6:	f8d5 e000 	ldr.w	lr, [r5]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062ba:	4565      	cmp	r5, ip
 80062bc:	bf08      	it	eq
 80062be:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 80062c2:	f02e 0e01 	bic.w	lr, lr, #1
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062c6:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 80062ca:	f8c5 e000 	str.w	lr, [r5]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062ce:	b917      	cbnz	r7, 80062d6 <HAL_DMA_Start_IT+0x212>
 80062d0:	4f4e      	ldr	r7, [pc, #312]	; (800640c <HAL_DMA_Start_IT+0x348>)
 80062d2:	42bd      	cmp	r5, r7
 80062d4:	d10d      	bne.n	80062f2 <HAL_DMA_Start_IT+0x22e>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062d6:	6e67      	ldr	r7, [r4, #100]	; 0x64
 80062d8:	e9d4 0e1a 	ldrd	r0, lr, [r4, #104]	; 0x68
 80062dc:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80062de:	f1be 0f00 	cmp.w	lr, #0
 80062e2:	d002      	beq.n	80062ea <HAL_DMA_Start_IT+0x226>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062e4:	e9d4 701c 	ldrd	r7, r0, [r4, #112]	; 0x70
 80062e8:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062ea:	f1ba 0f00 	cmp.w	sl, #0
 80062ee:	f47f af78 	bne.w	80061e2 <HAL_DMA_Start_IT+0x11e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80062f2:	4f47      	ldr	r7, [pc, #284]	; (8006410 <HAL_DMA_Start_IT+0x34c>)
 80062f4:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8006408 <HAL_DMA_Start_IT+0x344>
 80062f8:	f8df e118 	ldr.w	lr, [pc, #280]	; 8006414 <HAL_DMA_Start_IT+0x350>
 80062fc:	4545      	cmp	r5, r8
 80062fe:	bf18      	it	ne
 8006300:	42bd      	cmpne	r5, r7
 8006302:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8006306:	bf0c      	ite	eq
 8006308:	2701      	moveq	r7, #1
 800630a:	2700      	movne	r7, #0
 800630c:	4575      	cmp	r5, lr
 800630e:	bf08      	it	eq
 8006310:	f047 0701 	orreq.w	r7, r7, #1
 8006314:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8006318:	4545      	cmp	r5, r8
 800631a:	bf08      	it	eq
 800631c:	f047 0701 	orreq.w	r7, r7, #1
 8006320:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8006324:	4575      	cmp	r5, lr
 8006326:	bf08      	it	eq
 8006328:	f047 0701 	orreq.w	r7, r7, #1
 800632c:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8006330:	4545      	cmp	r5, r8
 8006332:	bf08      	it	eq
 8006334:	f047 0701 	orreq.w	r7, r7, #1
 8006338:	4575      	cmp	r5, lr
 800633a:	bf08      	it	eq
 800633c:	f047 0701 	orreq.w	r7, r7, #1
 8006340:	b917      	cbnz	r7, 8006348 <HAL_DMA_Start_IT+0x284>
 8006342:	4f32      	ldr	r7, [pc, #200]	; (800640c <HAL_DMA_Start_IT+0x348>)
 8006344:	42bd      	cmp	r5, r7
 8006346:	d155      	bne.n	80063f4 <HAL_DMA_Start_IT+0x330>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006348:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 800634a:	f04f 0e01 	mov.w	lr, #1
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800634e:	f8d4 8008 	ldr.w	r8, [r4, #8]
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006352:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006356:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800635a:	fa0e f707 	lsl.w	r7, lr, r7
 800635e:	f8cc 7004 	str.w	r7, [ip, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006362:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006364:	d043      	beq.n	80063ee <HAL_DMA_Start_IT+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006366:	60a9      	str	r1, [r5, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006368:	60ea      	str	r2, [r5, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800636a:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800636c:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800636e:	f023 030e 	bic.w	r3, r3, #14
 8006372:	f043 030a 	orr.w	r3, r3, #10
 8006376:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8006378:	2a00      	cmp	r2, #0
 800637a:	d02d      	beq.n	80063d8 <HAL_DMA_Start_IT+0x314>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	f043 0304 	orr.w	r3, r3, #4
 8006382:	602b      	str	r3, [r5, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006384:	4b20      	ldr	r3, [pc, #128]	; (8006408 <HAL_DMA_Start_IT+0x344>)
 8006386:	4a22      	ldr	r2, [pc, #136]	; (8006410 <HAL_DMA_Start_IT+0x34c>)
 8006388:	4922      	ldr	r1, [pc, #136]	; (8006414 <HAL_DMA_Start_IT+0x350>)
 800638a:	4295      	cmp	r5, r2
 800638c:	bf18      	it	ne
 800638e:	429d      	cmpne	r5, r3
 8006390:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8006394:	bf0c      	ite	eq
 8006396:	2301      	moveq	r3, #1
 8006398:	2300      	movne	r3, #0
 800639a:	428d      	cmp	r5, r1
 800639c:	bf08      	it	eq
 800639e:	f043 0301 	orreq.w	r3, r3, #1
 80063a2:	3128      	adds	r1, #40	; 0x28
 80063a4:	4295      	cmp	r5, r2
 80063a6:	bf08      	it	eq
 80063a8:	f043 0301 	orreq.w	r3, r3, #1
 80063ac:	3228      	adds	r2, #40	; 0x28
 80063ae:	428d      	cmp	r5, r1
 80063b0:	bf08      	it	eq
 80063b2:	f043 0301 	orreq.w	r3, r3, #1
 80063b6:	3128      	adds	r1, #40	; 0x28
 80063b8:	4295      	cmp	r5, r2
 80063ba:	bf08      	it	eq
 80063bc:	f043 0301 	orreq.w	r3, r3, #1
 80063c0:	3228      	adds	r2, #40	; 0x28
 80063c2:	428d      	cmp	r5, r1
 80063c4:	bf08      	it	eq
 80063c6:	f043 0301 	orreq.w	r3, r3, #1
 80063ca:	4295      	cmp	r5, r2
 80063cc:	bf08      	it	eq
 80063ce:	f043 0301 	orreq.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f43f af3d 	beq.w	8006252 <HAL_DMA_Start_IT+0x18e>
 80063d8:	f8d4 e06c 	ldr.w	lr, [r4, #108]	; 0x6c
 80063dc:	e728      	b.n	8006230 <HAL_DMA_Start_IT+0x16c>
    return HAL_ERROR;
 80063de:	2001      	movs	r0, #1
}
 80063e0:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80063e2:	2002      	movs	r0, #2
}
 80063e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80063e8:	60aa      	str	r2, [r5, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80063ea:	60e9      	str	r1, [r5, #12]
 80063ec:	e70f      	b.n	800620e <HAL_DMA_Start_IT+0x14a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80063ee:	60aa      	str	r2, [r5, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80063f0:	60e9      	str	r1, [r5, #12]
 80063f2:	e7ba      	b.n	800636a <HAL_DMA_Start_IT+0x2a6>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80063f4:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80063f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80063f8:	f023 030e 	bic.w	r3, r3, #14
 80063fc:	f043 030a 	orr.w	r3, r3, #10
 8006400:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8006402:	2a00      	cmp	r2, #0
 8006404:	d1ba      	bne.n	800637c <HAL_DMA_Start_IT+0x2b8>
 8006406:	e7bd      	b.n	8006384 <HAL_DMA_Start_IT+0x2c0>
 8006408:	5802541c 	.word	0x5802541c
 800640c:	58025494 	.word	0x58025494
 8006410:	58025408 	.word	0x58025408
 8006414:	58025430 	.word	0x58025430

08006418 <HAL_DMA_Abort>:
{
 8006418:	b570      	push	{r4, r5, r6, lr}
 800641a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800641c:	f7fd ff02 	bl	8004224 <HAL_GetTick>
  if(hdma == NULL)
 8006420:	2d00      	cmp	r5, #0
 8006422:	f000 8128 	beq.w	8006676 <HAL_DMA_Abort+0x25e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006426:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800642a:	2b02      	cmp	r3, #2
 800642c:	f040 80e1 	bne.w	80065f2 <HAL_DMA_Abort+0x1da>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006430:	682c      	ldr	r4, [r5, #0]
 8006432:	4606      	mov	r6, r0
 8006434:	4b91      	ldr	r3, [pc, #580]	; (800667c <HAL_DMA_Abort+0x264>)
 8006436:	4992      	ldr	r1, [pc, #584]	; (8006680 <HAL_DMA_Abort+0x268>)
 8006438:	4a92      	ldr	r2, [pc, #584]	; (8006684 <HAL_DMA_Abort+0x26c>)
 800643a:	428c      	cmp	r4, r1
 800643c:	bf18      	it	ne
 800643e:	429c      	cmpne	r4, r3
 8006440:	f101 0148 	add.w	r1, r1, #72	; 0x48
 8006444:	4890      	ldr	r0, [pc, #576]	; (8006688 <HAL_DMA_Abort+0x270>)
 8006446:	bf0c      	ite	eq
 8006448:	2301      	moveq	r3, #1
 800644a:	2300      	movne	r3, #0
 800644c:	4294      	cmp	r4, r2
 800644e:	bf08      	it	eq
 8006450:	f043 0301 	orreq.w	r3, r3, #1
 8006454:	3248      	adds	r2, #72	; 0x48
 8006456:	428c      	cmp	r4, r1
 8006458:	bf08      	it	eq
 800645a:	f043 0301 	orreq.w	r3, r3, #1
 800645e:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8006462:	4284      	cmp	r4, r0
 8006464:	bf08      	it	eq
 8006466:	f043 0301 	orreq.w	r3, r3, #1
 800646a:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800646e:	4294      	cmp	r4, r2
 8006470:	bf08      	it	eq
 8006472:	f043 0301 	orreq.w	r3, r3, #1
 8006476:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800647a:	428c      	cmp	r4, r1
 800647c:	bf08      	it	eq
 800647e:	f043 0301 	orreq.w	r3, r3, #1
 8006482:	3148      	adds	r1, #72	; 0x48
 8006484:	4284      	cmp	r4, r0
 8006486:	bf08      	it	eq
 8006488:	f043 0301 	orreq.w	r3, r3, #1
 800648c:	3048      	adds	r0, #72	; 0x48
 800648e:	4294      	cmp	r4, r2
 8006490:	bf08      	it	eq
 8006492:	f043 0301 	orreq.w	r3, r3, #1
 8006496:	3248      	adds	r2, #72	; 0x48
 8006498:	428c      	cmp	r4, r1
 800649a:	bf08      	it	eq
 800649c:	f043 0301 	orreq.w	r3, r3, #1
 80064a0:	3148      	adds	r1, #72	; 0x48
 80064a2:	4284      	cmp	r4, r0
 80064a4:	bf08      	it	eq
 80064a6:	f043 0301 	orreq.w	r3, r3, #1
 80064aa:	3048      	adds	r0, #72	; 0x48
 80064ac:	4294      	cmp	r4, r2
 80064ae:	bf08      	it	eq
 80064b0:	f043 0301 	orreq.w	r3, r3, #1
 80064b4:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 80064b8:	428c      	cmp	r4, r1
 80064ba:	bf08      	it	eq
 80064bc:	f043 0301 	orreq.w	r3, r3, #1
 80064c0:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 80064c4:	4284      	cmp	r4, r0
 80064c6:	bf08      	it	eq
 80064c8:	f043 0301 	orreq.w	r3, r3, #1
 80064cc:	428c      	cmp	r4, r1
 80064ce:	bf18      	it	ne
 80064d0:	4294      	cmpne	r4, r2
 80064d2:	bf0c      	ite	eq
 80064d4:	2201      	moveq	r2, #1
 80064d6:	2200      	movne	r2, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_DMA_Abort+0xc8>
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 8090 	beq.w	8006600 <HAL_DMA_Abort+0x1e8>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80064e0:	6821      	ldr	r1, [r4, #0]
 80064e2:	f021 011e 	bic.w	r1, r1, #30
 80064e6:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80064e8:	6961      	ldr	r1, [r4, #20]
 80064ea:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80064ee:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064f0:	2a00      	cmp	r2, #0
 80064f2:	f000 80b0 	beq.w	8006656 <HAL_DMA_Abort+0x23e>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80064f6:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80064f8:	6813      	ldr	r3, [r2, #0]
 80064fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064fe:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	f023 0301 	bic.w	r3, r3, #1
 8006506:	6023      	str	r3, [r4, #0]
 8006508:	e005      	b.n	8006516 <HAL_DMA_Abort+0xfe>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800650a:	f7fd fe8b 	bl	8004224 <HAL_GetTick>
 800650e:	1b83      	subs	r3, r0, r6
 8006510:	2b05      	cmp	r3, #5
 8006512:	f200 80a6 	bhi.w	8006662 <HAL_DMA_Abort+0x24a>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	07db      	lsls	r3, r3, #31
 800651a:	d4f6      	bmi.n	800650a <HAL_DMA_Abort+0xf2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800651c:	682a      	ldr	r2, [r5, #0]
 800651e:	4b57      	ldr	r3, [pc, #348]	; (800667c <HAL_DMA_Abort+0x264>)
 8006520:	4957      	ldr	r1, [pc, #348]	; (8006680 <HAL_DMA_Abort+0x268>)
 8006522:	4c58      	ldr	r4, [pc, #352]	; (8006684 <HAL_DMA_Abort+0x26c>)
 8006524:	428a      	cmp	r2, r1
 8006526:	bf18      	it	ne
 8006528:	429a      	cmpne	r2, r3
 800652a:	4858      	ldr	r0, [pc, #352]	; (800668c <HAL_DMA_Abort+0x274>)
 800652c:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8006530:	bf0c      	ite	eq
 8006532:	2301      	moveq	r3, #1
 8006534:	2300      	movne	r3, #0
 8006536:	42a2      	cmp	r2, r4
 8006538:	bf08      	it	eq
 800653a:	f043 0301 	orreq.w	r3, r3, #1
 800653e:	3448      	adds	r4, #72	; 0x48
 8006540:	4282      	cmp	r2, r0
 8006542:	bf08      	it	eq
 8006544:	f043 0301 	orreq.w	r3, r3, #1
 8006548:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800654c:	428a      	cmp	r2, r1
 800654e:	bf08      	it	eq
 8006550:	f043 0301 	orreq.w	r3, r3, #1
 8006554:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8006558:	42a2      	cmp	r2, r4
 800655a:	bf08      	it	eq
 800655c:	f043 0301 	orreq.w	r3, r3, #1
 8006560:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8006564:	4282      	cmp	r2, r0
 8006566:	bf08      	it	eq
 8006568:	f043 0301 	orreq.w	r3, r3, #1
 800656c:	3048      	adds	r0, #72	; 0x48
 800656e:	428a      	cmp	r2, r1
 8006570:	bf08      	it	eq
 8006572:	f043 0301 	orreq.w	r3, r3, #1
 8006576:	3148      	adds	r1, #72	; 0x48
 8006578:	42a2      	cmp	r2, r4
 800657a:	bf08      	it	eq
 800657c:	f043 0301 	orreq.w	r3, r3, #1
 8006580:	3448      	adds	r4, #72	; 0x48
 8006582:	4282      	cmp	r2, r0
 8006584:	bf08      	it	eq
 8006586:	f043 0301 	orreq.w	r3, r3, #1
 800658a:	3048      	adds	r0, #72	; 0x48
 800658c:	428a      	cmp	r2, r1
 800658e:	bf08      	it	eq
 8006590:	f043 0301 	orreq.w	r3, r3, #1
 8006594:	3148      	adds	r1, #72	; 0x48
 8006596:	42a2      	cmp	r2, r4
 8006598:	bf08      	it	eq
 800659a:	f043 0301 	orreq.w	r3, r3, #1
 800659e:	4282      	cmp	r2, r0
 80065a0:	bf08      	it	eq
 80065a2:	f043 0301 	orreq.w	r3, r3, #1
 80065a6:	428a      	cmp	r2, r1
 80065a8:	bf08      	it	eq
 80065aa:	f043 0301 	orreq.w	r3, r3, #1
 80065ae:	b933      	cbnz	r3, 80065be <HAL_DMA_Abort+0x1a6>
 80065b0:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 80065b4:	4b36      	ldr	r3, [pc, #216]	; (8006690 <HAL_DMA_Abort+0x278>)
 80065b6:	429a      	cmp	r2, r3
 80065b8:	bf18      	it	ne
 80065ba:	428a      	cmpne	r2, r1
 80065bc:	d172      	bne.n	80066a4 <HAL_DMA_Abort+0x28c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065be:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80065c0:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065c2:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065c4:	f002 021f 	and.w	r2, r2, #31
 80065c8:	4093      	lsls	r3, r2
 80065ca:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 80065cc:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065ce:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 80065d2:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80065d4:	b133      	cbz	r3, 80065e4 <HAL_DMA_Abort+0x1cc>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80065d6:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065d8:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80065da:	6f68      	ldr	r0, [r5, #116]	; 0x74
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80065dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065e0:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065e2:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 80065e4:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 80065e6:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 80065e8:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80065ec:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 80065f0:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065f2:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80065f4:	2300      	movs	r3, #0
    return HAL_ERROR;
 80065f6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065f8:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80065fa:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 80065fe:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006600:	4a24      	ldr	r2, [pc, #144]	; (8006694 <HAL_DMA_Abort+0x27c>)
 8006602:	4925      	ldr	r1, [pc, #148]	; (8006698 <HAL_DMA_Abort+0x280>)
 8006604:	4825      	ldr	r0, [pc, #148]	; (800669c <HAL_DMA_Abort+0x284>)
 8006606:	428c      	cmp	r4, r1
 8006608:	bf18      	it	ne
 800660a:	4294      	cmpne	r4, r2
 800660c:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 8006610:	bf0c      	ite	eq
 8006612:	2201      	moveq	r2, #1
 8006614:	2200      	movne	r2, #0
 8006616:	4284      	cmp	r4, r0
 8006618:	bf08      	it	eq
 800661a:	f042 0201 	orreq.w	r2, r2, #1
 800661e:	3028      	adds	r0, #40	; 0x28
 8006620:	428c      	cmp	r4, r1
 8006622:	bf08      	it	eq
 8006624:	f042 0201 	orreq.w	r2, r2, #1
 8006628:	3128      	adds	r1, #40	; 0x28
 800662a:	4284      	cmp	r4, r0
 800662c:	bf08      	it	eq
 800662e:	f042 0201 	orreq.w	r2, r2, #1
 8006632:	3028      	adds	r0, #40	; 0x28
 8006634:	428c      	cmp	r4, r1
 8006636:	bf08      	it	eq
 8006638:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800663c:	6821      	ldr	r1, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800663e:	4284      	cmp	r4, r0
 8006640:	bf08      	it	eq
 8006642:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006646:	f021 010e 	bic.w	r1, r1, #14
 800664a:	6021      	str	r1, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800664c:	b91a      	cbnz	r2, 8006656 <HAL_DMA_Abort+0x23e>
 800664e:	4a14      	ldr	r2, [pc, #80]	; (80066a0 <HAL_DMA_Abort+0x288>)
 8006650:	4294      	cmp	r4, r2
 8006652:	f47f af55 	bne.w	8006500 <HAL_DMA_Abort+0xe8>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006656:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8006658:	680a      	ldr	r2, [r1, #0]
 800665a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800665e:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8006660:	e74e      	b.n	8006500 <HAL_DMA_Abort+0xe8>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006662:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8006664:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_ERROR;
 8006666:	2303      	movs	r3, #3
        return HAL_ERROR;
 8006668:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800666a:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800666c:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8006670:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8006674:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006676:	2001      	movs	r0, #1
}
 8006678:	bd70      	pop	{r4, r5, r6, pc}
 800667a:	bf00      	nop
 800667c:	40020058 	.word	0x40020058
 8006680:	40020040 	.word	0x40020040
 8006684:	40020070 	.word	0x40020070
 8006688:	400200a0 	.word	0x400200a0
 800668c:	40020088 	.word	0x40020088
 8006690:	40020028 	.word	0x40020028
 8006694:	5802541c 	.word	0x5802541c
 8006698:	58025408 	.word	0x58025408
 800669c:	58025430 	.word	0x58025430
 80066a0:	58025494 	.word	0x58025494
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066a4:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 80066a8:	4b18      	ldr	r3, [pc, #96]	; (800670c <HAL_DMA_Abort+0x2f4>)
 80066aa:	4819      	ldr	r0, [pc, #100]	; (8006710 <HAL_DMA_Abort+0x2f8>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80066ac:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066ae:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 80066b2:	42a2      	cmp	r2, r4
 80066b4:	bf18      	it	ne
 80066b6:	429a      	cmpne	r2, r3
 80066b8:	f104 043c 	add.w	r4, r4, #60	; 0x3c
 80066bc:	bf0c      	ite	eq
 80066be:	2301      	moveq	r3, #1
 80066c0:	2300      	movne	r3, #0
 80066c2:	4282      	cmp	r2, r0
 80066c4:	bf08      	it	eq
 80066c6:	f043 0301 	orreq.w	r3, r3, #1
 80066ca:	3028      	adds	r0, #40	; 0x28
 80066cc:	42a2      	cmp	r2, r4
 80066ce:	bf08      	it	eq
 80066d0:	f043 0301 	orreq.w	r3, r3, #1
 80066d4:	3428      	adds	r4, #40	; 0x28
 80066d6:	4282      	cmp	r2, r0
 80066d8:	bf08      	it	eq
 80066da:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80066de:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066e0:	42a2      	cmp	r2, r4
 80066e2:	bf08      	it	eq
 80066e4:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80066e8:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066ec:	3414      	adds	r4, #20
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80066ee:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066f0:	42a2      	cmp	r2, r4
 80066f2:	bf08      	it	eq
 80066f4:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80066f8:	6dac      	ldr	r4, [r5, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80066fa:	6061      	str	r1, [r4, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f47f af65 	bne.w	80065cc <HAL_DMA_Abort+0x1b4>
 8006702:	4b04      	ldr	r3, [pc, #16]	; (8006714 <HAL_DMA_Abort+0x2fc>)
 8006704:	429a      	cmp	r2, r3
 8006706:	f43f af61 	beq.w	80065cc <HAL_DMA_Abort+0x1b4>
 800670a:	e76b      	b.n	80065e4 <HAL_DMA_Abort+0x1cc>
 800670c:	5802541c 	.word	0x5802541c
 8006710:	58025430 	.word	0x58025430
 8006714:	58025494 	.word	0x58025494

08006718 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8006718:	2800      	cmp	r0, #0
 800671a:	d060      	beq.n	80067de <HAL_DMA_Abort_IT+0xc6>
{
 800671c:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800671e:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8006722:	4603      	mov	r3, r0
 8006724:	2a02      	cmp	r2, #2
 8006726:	d156      	bne.n	80067d6 <HAL_DMA_Abort_IT+0xbe>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006728:	6801      	ldr	r1, [r0, #0]
 800672a:	4a59      	ldr	r2, [pc, #356]	; (8006890 <HAL_DMA_Abort_IT+0x178>)
 800672c:	4291      	cmp	r1, r2
 800672e:	d049      	beq.n	80067c4 <HAL_DMA_Abort_IT+0xac>
 8006730:	3218      	adds	r2, #24
 8006732:	4291      	cmp	r1, r2
 8006734:	d046      	beq.n	80067c4 <HAL_DMA_Abort_IT+0xac>
 8006736:	3230      	adds	r2, #48	; 0x30
 8006738:	4856      	ldr	r0, [pc, #344]	; (8006894 <HAL_DMA_Abort_IT+0x17c>)
 800673a:	4c57      	ldr	r4, [pc, #348]	; (8006898 <HAL_DMA_Abort_IT+0x180>)
 800673c:	4281      	cmp	r1, r0
 800673e:	bf18      	it	ne
 8006740:	4291      	cmpne	r1, r2
 8006742:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8006746:	4d55      	ldr	r5, [pc, #340]	; (800689c <HAL_DMA_Abort_IT+0x184>)
 8006748:	bf0c      	ite	eq
 800674a:	2201      	moveq	r2, #1
 800674c:	2200      	movne	r2, #0
 800674e:	42a1      	cmp	r1, r4
 8006750:	bf08      	it	eq
 8006752:	f042 0201 	orreq.w	r2, r2, #1
 8006756:	3448      	adds	r4, #72	; 0x48
 8006758:	4281      	cmp	r1, r0
 800675a:	bf08      	it	eq
 800675c:	f042 0201 	orreq.w	r2, r2, #1
 8006760:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8006764:	42a9      	cmp	r1, r5
 8006766:	bf08      	it	eq
 8006768:	f042 0201 	orreq.w	r2, r2, #1
 800676c:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8006770:	42a1      	cmp	r1, r4
 8006772:	bf08      	it	eq
 8006774:	f042 0201 	orreq.w	r2, r2, #1
 8006778:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800677c:	4281      	cmp	r1, r0
 800677e:	bf08      	it	eq
 8006780:	f042 0201 	orreq.w	r2, r2, #1
 8006784:	3048      	adds	r0, #72	; 0x48
 8006786:	42a9      	cmp	r1, r5
 8006788:	bf08      	it	eq
 800678a:	f042 0201 	orreq.w	r2, r2, #1
 800678e:	3548      	adds	r5, #72	; 0x48
 8006790:	42a1      	cmp	r1, r4
 8006792:	bf08      	it	eq
 8006794:	f042 0201 	orreq.w	r2, r2, #1
 8006798:	3448      	adds	r4, #72	; 0x48
 800679a:	4281      	cmp	r1, r0
 800679c:	bf08      	it	eq
 800679e:	f042 0201 	orreq.w	r2, r2, #1
 80067a2:	3048      	adds	r0, #72	; 0x48
 80067a4:	42a9      	cmp	r1, r5
 80067a6:	bf08      	it	eq
 80067a8:	f042 0201 	orreq.w	r2, r2, #1
 80067ac:	42a1      	cmp	r1, r4
 80067ae:	bf08      	it	eq
 80067b0:	f042 0201 	orreq.w	r2, r2, #1
 80067b4:	4281      	cmp	r1, r0
 80067b6:	bf08      	it	eq
 80067b8:	f042 0201 	orreq.w	r2, r2, #1
 80067bc:	b912      	cbnz	r2, 80067c4 <HAL_DMA_Abort_IT+0xac>
 80067be:	4a38      	ldr	r2, [pc, #224]	; (80068a0 <HAL_DMA_Abort_IT+0x188>)
 80067c0:	4291      	cmp	r1, r2
 80067c2:	d10e      	bne.n	80067e2 <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 80067c4:	2204      	movs	r2, #4
  return HAL_OK;
 80067c6:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80067c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80067cc:	680b      	ldr	r3, [r1, #0]
 80067ce:	f023 0301 	bic.w	r3, r3, #1
 80067d2:	600b      	str	r3, [r1, #0]
}
 80067d4:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067d6:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80067d8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067da:	655a      	str	r2, [r3, #84]	; 0x54
}
 80067dc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80067de:	2001      	movs	r0, #1
}
 80067e0:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067e2:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 80067e6:	4a2f      	ldr	r2, [pc, #188]	; (80068a4 <HAL_DMA_Abort_IT+0x18c>)
 80067e8:	482f      	ldr	r0, [pc, #188]	; (80068a8 <HAL_DMA_Abort_IT+0x190>)
 80067ea:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 80067ee:	4d2f      	ldr	r5, [pc, #188]	; (80068ac <HAL_DMA_Abort_IT+0x194>)
 80067f0:	42a1      	cmp	r1, r4
 80067f2:	bf18      	it	ne
 80067f4:	4291      	cmpne	r1, r2
 80067f6:	f104 0450 	add.w	r4, r4, #80	; 0x50
 80067fa:	bf0c      	ite	eq
 80067fc:	2201      	moveq	r2, #1
 80067fe:	2200      	movne	r2, #0
 8006800:	4281      	cmp	r1, r0
 8006802:	bf08      	it	eq
 8006804:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006808:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800680a:	42a9      	cmp	r1, r5
 800680c:	bf08      	it	eq
 800680e:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006812:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006816:	3528      	adds	r5, #40	; 0x28
 8006818:	42a1      	cmp	r1, r4
 800681a:	bf08      	it	eq
 800681c:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006820:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006822:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 8006824:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006826:	42a9      	cmp	r1, r5
 8006828:	bf08      	it	eq
 800682a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800682e:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006832:	42a1      	cmp	r1, r4
 8006834:	bf08      	it	eq
 8006836:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800683a:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800683c:	b912      	cbnz	r2, 8006844 <HAL_DMA_Abort_IT+0x12c>
 800683e:	4a1c      	ldr	r2, [pc, #112]	; (80068b0 <HAL_DMA_Abort_IT+0x198>)
 8006840:	4291      	cmp	r1, r2
 8006842:	d117      	bne.n	8006874 <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006844:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006846:	2101      	movs	r1, #1
 8006848:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800684a:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800684c:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006850:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006856:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006858:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800685a:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 800685c:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006860:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006862:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8006864:	b132      	cbz	r2, 8006874 <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006866:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006868:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800686a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800686c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006870:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006872:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 8006874:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8006876:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 8006878:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800687a:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800687e:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8006882:	b11a      	cbz	r2, 800688c <HAL_DMA_Abort_IT+0x174>
        hdma->XferAbortCallback(hdma);
 8006884:	4618      	mov	r0, r3
 8006886:	4790      	blx	r2
  return HAL_OK;
 8006888:	4620      	mov	r0, r4
}
 800688a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800688c:	4610      	mov	r0, r2
}
 800688e:	bd38      	pop	{r3, r4, r5, pc}
 8006890:	40020010 	.word	0x40020010
 8006894:	40020040 	.word	0x40020040
 8006898:	40020070 	.word	0x40020070
 800689c:	400200a0 	.word	0x400200a0
 80068a0:	400204b8 	.word	0x400204b8
 80068a4:	5802541c 	.word	0x5802541c
 80068a8:	58025430 	.word	0x58025430
 80068ac:	58025444 	.word	0x58025444
 80068b0:	58025494 	.word	0x58025494

080068b4 <HAL_DMA_IRQHandler>:
{
 80068b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80068b8:	4a9f      	ldr	r2, [pc, #636]	; (8006b38 <HAL_DMA_IRQHandler+0x284>)
  __IO uint32_t count = 0U;
 80068ba:	2500      	movs	r5, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80068bc:	4e9f      	ldr	r6, [pc, #636]	; (8006b3c <HAL_DMA_IRQHandler+0x288>)
{
 80068be:	b082      	sub	sp, #8
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80068c0:	6803      	ldr	r3, [r0, #0]
{
 80068c2:	4682      	mov	sl, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 80068c4:	499e      	ldr	r1, [pc, #632]	; (8006b40 <HAL_DMA_IRQHandler+0x28c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068c6:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80068c8:	4293      	cmp	r3, r2
 80068ca:	bf18      	it	ne
 80068cc:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 80068ce:	9501      	str	r5, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80068d0:	bf08      	it	eq
 80068d2:	2601      	moveq	r6, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80068d4:	680d      	ldr	r5, [r1, #0]
  tmpisr_dma  = regs_dma->ISR;
 80068d6:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80068d8:	bf18      	it	ne
 80068da:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 80068dc:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80068de:	d04a      	beq.n	8006976 <HAL_DMA_IRQHandler+0xc2>
 80068e0:	3230      	adds	r2, #48	; 0x30
 80068e2:	f8df e26c 	ldr.w	lr, [pc, #620]	; 8006b50 <HAL_DMA_IRQHandler+0x29c>
 80068e6:	4897      	ldr	r0, [pc, #604]	; (8006b44 <HAL_DMA_IRQHandler+0x290>)
 80068e8:	4573      	cmp	r3, lr
 80068ea:	bf18      	it	ne
 80068ec:	4293      	cmpne	r3, r2
 80068ee:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 80068f2:	bf0c      	ite	eq
 80068f4:	2201      	moveq	r2, #1
 80068f6:	2200      	movne	r2, #0
 80068f8:	4283      	cmp	r3, r0
 80068fa:	bf08      	it	eq
 80068fc:	f042 0201 	orreq.w	r2, r2, #1
 8006900:	3030      	adds	r0, #48	; 0x30
 8006902:	4573      	cmp	r3, lr
 8006904:	bf08      	it	eq
 8006906:	f042 0201 	orreq.w	r2, r2, #1
 800690a:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800690e:	4283      	cmp	r3, r0
 8006910:	bf08      	it	eq
 8006912:	f042 0201 	orreq.w	r2, r2, #1
 8006916:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800691a:	4573      	cmp	r3, lr
 800691c:	bf08      	it	eq
 800691e:	f042 0201 	orreq.w	r2, r2, #1
 8006922:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 8006926:	4283      	cmp	r3, r0
 8006928:	bf08      	it	eq
 800692a:	f042 0201 	orreq.w	r2, r2, #1
 800692e:	3030      	adds	r0, #48	; 0x30
 8006930:	4573      	cmp	r3, lr
 8006932:	bf08      	it	eq
 8006934:	f042 0201 	orreq.w	r2, r2, #1
 8006938:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800693c:	4283      	cmp	r3, r0
 800693e:	bf08      	it	eq
 8006940:	f042 0201 	orreq.w	r2, r2, #1
 8006944:	3030      	adds	r0, #48	; 0x30
 8006946:	4573      	cmp	r3, lr
 8006948:	bf08      	it	eq
 800694a:	f042 0201 	orreq.w	r2, r2, #1
 800694e:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8006952:	4283      	cmp	r3, r0
 8006954:	bf08      	it	eq
 8006956:	f042 0201 	orreq.w	r2, r2, #1
 800695a:	3030      	adds	r0, #48	; 0x30
 800695c:	4573      	cmp	r3, lr
 800695e:	bf08      	it	eq
 8006960:	f042 0201 	orreq.w	r2, r2, #1
 8006964:	4283      	cmp	r3, r0
 8006966:	bf08      	it	eq
 8006968:	f042 0201 	orreq.w	r2, r2, #1
 800696c:	b91a      	cbnz	r2, 8006976 <HAL_DMA_IRQHandler+0xc2>
 800696e:	4a76      	ldr	r2, [pc, #472]	; (8006b48 <HAL_DMA_IRQHandler+0x294>)
 8006970:	4293      	cmp	r3, r2
 8006972:	f040 820b 	bne.w	8006d8c <HAL_DMA_IRQHandler+0x4d8>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006976:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
 800697a:	2208      	movs	r2, #8
 800697c:	f001 0c1f 	and.w	ip, r1, #31
 8006980:	fa02 f20c 	lsl.w	r2, r2, ip
 8006984:	4217      	tst	r7, r2
 8006986:	f040 818d 	bne.w	8006ca4 <HAL_DMA_IRQHandler+0x3f0>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800698a:	fa27 f20c 	lsr.w	r2, r7, ip
 800698e:	07d2      	lsls	r2, r2, #31
 8006990:	d50c      	bpl.n	80069ac <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006992:	695a      	ldr	r2, [r3, #20]
 8006994:	0610      	lsls	r0, r2, #24
 8006996:	d509      	bpl.n	80069ac <HAL_DMA_IRQHandler+0xf8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006998:	2201      	movs	r2, #1
 800699a:	fa02 f20c 	lsl.w	r2, r2, ip
 800699e:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80069a0:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 80069a4:	f042 0202 	orr.w	r2, r2, #2
 80069a8:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069ac:	f04f 0e04 	mov.w	lr, #4
 80069b0:	fa0e f00c 	lsl.w	r0, lr, ip
 80069b4:	4238      	tst	r0, r7
 80069b6:	d05b      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x1bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80069b8:	2e00      	cmp	r6, #0
 80069ba:	d14f      	bne.n	8006a5c <HAL_DMA_IRQHandler+0x1a8>
 80069bc:	4a63      	ldr	r2, [pc, #396]	; (8006b4c <HAL_DMA_IRQHandler+0x298>)
 80069be:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8006b50 <HAL_DMA_IRQHandler+0x29c>
 80069c2:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8006b44 <HAL_DMA_IRQHandler+0x290>
 80069c6:	454b      	cmp	r3, r9
 80069c8:	bf18      	it	ne
 80069ca:	4293      	cmpne	r3, r2
 80069cc:	f109 0948 	add.w	r9, r9, #72	; 0x48
 80069d0:	bf0c      	ite	eq
 80069d2:	2201      	moveq	r2, #1
 80069d4:	2200      	movne	r2, #0
 80069d6:	4543      	cmp	r3, r8
 80069d8:	bf08      	it	eq
 80069da:	f042 0201 	orreq.w	r2, r2, #1
 80069de:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80069e2:	454b      	cmp	r3, r9
 80069e4:	bf08      	it	eq
 80069e6:	f042 0201 	orreq.w	r2, r2, #1
 80069ea:	f109 0930 	add.w	r9, r9, #48	; 0x30
 80069ee:	4543      	cmp	r3, r8
 80069f0:	bf08      	it	eq
 80069f2:	f042 0201 	orreq.w	r2, r2, #1
 80069f6:	f508 785c 	add.w	r8, r8, #880	; 0x370
 80069fa:	454b      	cmp	r3, r9
 80069fc:	bf08      	it	eq
 80069fe:	f042 0201 	orreq.w	r2, r2, #1
 8006a02:	f509 795c 	add.w	r9, r9, #880	; 0x370
 8006a06:	4543      	cmp	r3, r8
 8006a08:	bf08      	it	eq
 8006a0a:	f042 0201 	orreq.w	r2, r2, #1
 8006a0e:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006a12:	454b      	cmp	r3, r9
 8006a14:	bf08      	it	eq
 8006a16:	f042 0201 	orreq.w	r2, r2, #1
 8006a1a:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8006a1e:	4543      	cmp	r3, r8
 8006a20:	bf08      	it	eq
 8006a22:	f042 0201 	orreq.w	r2, r2, #1
 8006a26:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006a2a:	454b      	cmp	r3, r9
 8006a2c:	bf08      	it	eq
 8006a2e:	f042 0201 	orreq.w	r2, r2, #1
 8006a32:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8006a36:	4543      	cmp	r3, r8
 8006a38:	bf08      	it	eq
 8006a3a:	f042 0201 	orreq.w	r2, r2, #1
 8006a3e:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006a42:	454b      	cmp	r3, r9
 8006a44:	bf08      	it	eq
 8006a46:	f042 0201 	orreq.w	r2, r2, #1
 8006a4a:	4543      	cmp	r3, r8
 8006a4c:	bf08      	it	eq
 8006a4e:	f042 0201 	orreq.w	r2, r2, #1
 8006a52:	b91a      	cbnz	r2, 8006a5c <HAL_DMA_IRQHandler+0x1a8>
 8006a54:	4a3c      	ldr	r2, [pc, #240]	; (8006b48 <HAL_DMA_IRQHandler+0x294>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	f040 822f 	bne.w	8006eba <HAL_DMA_IRQHandler+0x606>
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	0792      	lsls	r2, r2, #30
 8006a60:	d506      	bpl.n	8006a70 <HAL_DMA_IRQHandler+0x1bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a62:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a64:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 8006a68:	f042 0204 	orr.w	r2, r2, #4
 8006a6c:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a70:	2210      	movs	r2, #16
 8006a72:	fa02 fc0c 	lsl.w	ip, r2, ip
 8006a76:	ea1c 0f07 	tst.w	ip, r7
 8006a7a:	d06f      	beq.n	8006b5c <HAL_DMA_IRQHandler+0x2a8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006a7c:	2e00      	cmp	r6, #0
 8006a7e:	d146      	bne.n	8006b0e <HAL_DMA_IRQHandler+0x25a>
 8006a80:	4a32      	ldr	r2, [pc, #200]	; (8006b4c <HAL_DMA_IRQHandler+0x298>)
 8006a82:	4833      	ldr	r0, [pc, #204]	; (8006b50 <HAL_DMA_IRQHandler+0x29c>)
 8006a84:	4e2f      	ldr	r6, [pc, #188]	; (8006b44 <HAL_DMA_IRQHandler+0x290>)
 8006a86:	4283      	cmp	r3, r0
 8006a88:	bf18      	it	ne
 8006a8a:	4293      	cmpne	r3, r2
 8006a8c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8006a90:	bf0c      	ite	eq
 8006a92:	2201      	moveq	r2, #1
 8006a94:	2200      	movne	r2, #0
 8006a96:	42b3      	cmp	r3, r6
 8006a98:	bf08      	it	eq
 8006a9a:	f042 0201 	orreq.w	r2, r2, #1
 8006a9e:	3630      	adds	r6, #48	; 0x30
 8006aa0:	4283      	cmp	r3, r0
 8006aa2:	bf08      	it	eq
 8006aa4:	f042 0201 	orreq.w	r2, r2, #1
 8006aa8:	3030      	adds	r0, #48	; 0x30
 8006aaa:	42b3      	cmp	r3, r6
 8006aac:	bf08      	it	eq
 8006aae:	f042 0201 	orreq.w	r2, r2, #1
 8006ab2:	f506 765c 	add.w	r6, r6, #880	; 0x370
 8006ab6:	4283      	cmp	r3, r0
 8006ab8:	bf08      	it	eq
 8006aba:	f042 0201 	orreq.w	r2, r2, #1
 8006abe:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8006ac2:	42b3      	cmp	r3, r6
 8006ac4:	bf08      	it	eq
 8006ac6:	f042 0201 	orreq.w	r2, r2, #1
 8006aca:	3630      	adds	r6, #48	; 0x30
 8006acc:	4283      	cmp	r3, r0
 8006ace:	bf08      	it	eq
 8006ad0:	f042 0201 	orreq.w	r2, r2, #1
 8006ad4:	3030      	adds	r0, #48	; 0x30
 8006ad6:	42b3      	cmp	r3, r6
 8006ad8:	bf08      	it	eq
 8006ada:	f042 0201 	orreq.w	r2, r2, #1
 8006ade:	3630      	adds	r6, #48	; 0x30
 8006ae0:	4283      	cmp	r3, r0
 8006ae2:	bf08      	it	eq
 8006ae4:	f042 0201 	orreq.w	r2, r2, #1
 8006ae8:	3030      	adds	r0, #48	; 0x30
 8006aea:	42b3      	cmp	r3, r6
 8006aec:	bf08      	it	eq
 8006aee:	f042 0201 	orreq.w	r2, r2, #1
 8006af2:	3630      	adds	r6, #48	; 0x30
 8006af4:	4283      	cmp	r3, r0
 8006af6:	bf08      	it	eq
 8006af8:	f042 0201 	orreq.w	r2, r2, #1
 8006afc:	42b3      	cmp	r3, r6
 8006afe:	bf08      	it	eq
 8006b00:	f042 0201 	orreq.w	r2, r2, #1
 8006b04:	b91a      	cbnz	r2, 8006b0e <HAL_DMA_IRQHandler+0x25a>
 8006b06:	4a10      	ldr	r2, [pc, #64]	; (8006b48 <HAL_DMA_IRQHandler+0x294>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	f040 81de 	bne.w	8006eca <HAL_DMA_IRQHandler+0x616>
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8006b14:	b312      	cbz	r2, 8006b5c <HAL_DMA_IRQHandler+0x2a8>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b16:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	0352      	lsls	r2, r2, #13
 8006b1e:	f100 818b 	bmi.w	8006e38 <HAL_DMA_IRQHandler+0x584>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	05d6      	lsls	r6, r2, #23
 8006b26:	d403      	bmi.n	8006b30 <HAL_DMA_IRQHandler+0x27c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	f022 0208 	bic.w	r2, r2, #8
 8006b2e:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8006b30:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8006b34:	b193      	cbz	r3, 8006b5c <HAL_DMA_IRQHandler+0x2a8>
 8006b36:	e00d      	b.n	8006b54 <HAL_DMA_IRQHandler+0x2a0>
 8006b38:	40020028 	.word	0x40020028
 8006b3c:	40020010 	.word	0x40020010
 8006b40:	24000280 	.word	0x24000280
 8006b44:	40020070 	.word	0x40020070
 8006b48:	400204b8 	.word	0x400204b8
 8006b4c:	40020058 	.word	0x40020058
 8006b50:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 8006b54:	4650      	mov	r0, sl
 8006b56:	4798      	blx	r3
 8006b58:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b5c:	f001 011f 	and.w	r1, r1, #31
 8006b60:	2620      	movs	r6, #32
 8006b62:	408e      	lsls	r6, r1
 8006b64:	423e      	tst	r6, r7
 8006b66:	d06a      	beq.n	8006c3e <HAL_DMA_IRQHandler+0x38a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006b68:	f8da 2000 	ldr.w	r2, [sl]
 8006b6c:	4ba7      	ldr	r3, [pc, #668]	; (8006e0c <HAL_DMA_IRQHandler+0x558>)
 8006b6e:	48a8      	ldr	r0, [pc, #672]	; (8006e10 <HAL_DMA_IRQHandler+0x55c>)
 8006b70:	4fa8      	ldr	r7, [pc, #672]	; (8006e14 <HAL_DMA_IRQHandler+0x560>)
 8006b72:	4282      	cmp	r2, r0
 8006b74:	bf18      	it	ne
 8006b76:	429a      	cmpne	r2, r3
 8006b78:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8006b7c:	bf0c      	ite	eq
 8006b7e:	2301      	moveq	r3, #1
 8006b80:	2300      	movne	r3, #0
 8006b82:	42ba      	cmp	r2, r7
 8006b84:	bf08      	it	eq
 8006b86:	f043 0301 	orreq.w	r3, r3, #1
 8006b8a:	3730      	adds	r7, #48	; 0x30
 8006b8c:	4282      	cmp	r2, r0
 8006b8e:	bf08      	it	eq
 8006b90:	f043 0301 	orreq.w	r3, r3, #1
 8006b94:	3030      	adds	r0, #48	; 0x30
 8006b96:	42ba      	cmp	r2, r7
 8006b98:	bf08      	it	eq
 8006b9a:	f043 0301 	orreq.w	r3, r3, #1
 8006b9e:	3730      	adds	r7, #48	; 0x30
 8006ba0:	4282      	cmp	r2, r0
 8006ba2:	bf08      	it	eq
 8006ba4:	f043 0301 	orreq.w	r3, r3, #1
 8006ba8:	3030      	adds	r0, #48	; 0x30
 8006baa:	42ba      	cmp	r2, r7
 8006bac:	bf08      	it	eq
 8006bae:	f043 0301 	orreq.w	r3, r3, #1
 8006bb2:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8006bb6:	4282      	cmp	r2, r0
 8006bb8:	bf08      	it	eq
 8006bba:	f043 0301 	orreq.w	r3, r3, #1
 8006bbe:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8006bc2:	42ba      	cmp	r2, r7
 8006bc4:	bf08      	it	eq
 8006bc6:	f043 0301 	orreq.w	r3, r3, #1
 8006bca:	3730      	adds	r7, #48	; 0x30
 8006bcc:	4282      	cmp	r2, r0
 8006bce:	bf08      	it	eq
 8006bd0:	f043 0301 	orreq.w	r3, r3, #1
 8006bd4:	3030      	adds	r0, #48	; 0x30
 8006bd6:	42ba      	cmp	r2, r7
 8006bd8:	bf08      	it	eq
 8006bda:	f043 0301 	orreq.w	r3, r3, #1
 8006bde:	3730      	adds	r7, #48	; 0x30
 8006be0:	4282      	cmp	r2, r0
 8006be2:	bf08      	it	eq
 8006be4:	f043 0301 	orreq.w	r3, r3, #1
 8006be8:	3030      	adds	r0, #48	; 0x30
 8006bea:	42ba      	cmp	r2, r7
 8006bec:	bf08      	it	eq
 8006bee:	f043 0301 	orreq.w	r3, r3, #1
 8006bf2:	3730      	adds	r7, #48	; 0x30
 8006bf4:	4282      	cmp	r2, r0
 8006bf6:	bf08      	it	eq
 8006bf8:	f043 0301 	orreq.w	r3, r3, #1
 8006bfc:	42ba      	cmp	r2, r7
 8006bfe:	bf08      	it	eq
 8006c00:	f043 0301 	orreq.w	r3, r3, #1
 8006c04:	b91b      	cbnz	r3, 8006c0e <HAL_DMA_IRQHandler+0x35a>
 8006c06:	4b84      	ldr	r3, [pc, #528]	; (8006e18 <HAL_DMA_IRQHandler+0x564>)
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	f040 8173 	bne.w	8006ef4 <HAL_DMA_IRQHandler+0x640>
 8006c0e:	6813      	ldr	r3, [r2, #0]
 8006c10:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006c14:	b19b      	cbz	r3, 8006c3e <HAL_DMA_IRQHandler+0x38a>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c16:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c18:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
 8006c1c:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c1e:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c20:	f000 8114 	beq.w	8006e4c <HAL_DMA_IRQHandler+0x598>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006c24:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006c28:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006c2a:	f000 812d 	beq.w	8006e88 <HAL_DMA_IRQHandler+0x5d4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006c2e:	031c      	lsls	r4, r3, #12
 8006c30:	f140 8138 	bpl.w	8006ea4 <HAL_DMA_IRQHandler+0x5f0>
          if(hdma->XferCpltCallback != NULL)
 8006c34:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 8006c38:	b10b      	cbz	r3, 8006c3e <HAL_DMA_IRQHandler+0x38a>
            hdma->XferCpltCallback(hdma);
 8006c3a:	4650      	mov	r0, sl
 8006c3c:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c3e:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 80df 	beq.w	8006e06 <HAL_DMA_IRQHandler+0x552>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006c48:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 8006c4c:	07d8      	lsls	r0, r3, #31
 8006c4e:	d51f      	bpl.n	8006c90 <HAL_DMA_IRQHandler+0x3dc>
        __HAL_DMA_DISABLE(hdma);
 8006c50:	f8da 2000 	ldr.w	r2, [sl]
        hdma->State = HAL_DMA_STATE_ABORT;
 8006c54:	2404      	movs	r4, #4
 8006c56:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8006c5a:	6813      	ldr	r3, [r2, #0]
 8006c5c:	f023 0301 	bic.w	r3, r3, #1
 8006c60:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006c62:	4b6e      	ldr	r3, [pc, #440]	; (8006e1c <HAL_DMA_IRQHandler+0x568>)
 8006c64:	fba3 3505 	umull	r3, r5, r3, r5
 8006c68:	0aad      	lsrs	r5, r5, #10
 8006c6a:	e002      	b.n	8006c72 <HAL_DMA_IRQHandler+0x3be>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006c6c:	6813      	ldr	r3, [r2, #0]
 8006c6e:	07d9      	lsls	r1, r3, #31
 8006c70:	d504      	bpl.n	8006c7c <HAL_DMA_IRQHandler+0x3c8>
          if (++count > timeout)
 8006c72:	9b01      	ldr	r3, [sp, #4]
 8006c74:	3301      	adds	r3, #1
 8006c76:	42ab      	cmp	r3, r5
 8006c78:	9301      	str	r3, [sp, #4]
 8006c7a:	d9f7      	bls.n	8006c6c <HAL_DMA_IRQHandler+0x3b8>
        __HAL_UNLOCK(hdma);
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c82:	6813      	ldr	r3, [r2, #0]
 8006c84:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c86:	bf4c      	ite	mi
 8006c88:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8006c8a:	2301      	movpl	r3, #1
 8006c8c:	f88a 3035 	strb.w	r3, [sl, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 8006c90:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 80b6 	beq.w	8006e06 <HAL_DMA_IRQHandler+0x552>
        hdma->XferErrorCallback(hdma);
 8006c9a:	4650      	mov	r0, sl
}
 8006c9c:	b002      	add	sp, #8
 8006c9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        hdma->XferErrorCallback(hdma);
 8006ca2:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006ca4:	6818      	ldr	r0, [r3, #0]
 8006ca6:	0740      	lsls	r0, r0, #29
 8006ca8:	d50a      	bpl.n	8006cc0 <HAL_DMA_IRQHandler+0x40c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006caa:	6818      	ldr	r0, [r3, #0]
 8006cac:	f020 0004 	bic.w	r0, r0, #4
 8006cb0:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006cb2:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006cb4:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 8006cb8:	f042 0201 	orr.w	r2, r2, #1
 8006cbc:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006cc0:	fa27 f20c 	lsr.w	r2, r7, ip
 8006cc4:	07d2      	lsls	r2, r2, #31
 8006cc6:	f57f ae71 	bpl.w	80069ac <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006cca:	4a55      	ldr	r2, [pc, #340]	; (8006e20 <HAL_DMA_IRQHandler+0x56c>)
 8006ccc:	4851      	ldr	r0, [pc, #324]	; (8006e14 <HAL_DMA_IRQHandler+0x560>)
 8006cce:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8006e34 <HAL_DMA_IRQHandler+0x580>
 8006cd2:	4283      	cmp	r3, r0
 8006cd4:	bf18      	it	ne
 8006cd6:	4293      	cmpne	r3, r2
 8006cd8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8006cdc:	bf0c      	ite	eq
 8006cde:	2201      	moveq	r2, #1
 8006ce0:	2200      	movne	r2, #0
 8006ce2:	4543      	cmp	r3, r8
 8006ce4:	bf08      	it	eq
 8006ce6:	f042 0201 	orreq.w	r2, r2, #1
 8006cea:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006cee:	4283      	cmp	r3, r0
 8006cf0:	bf08      	it	eq
 8006cf2:	f042 0201 	orreq.w	r2, r2, #1
 8006cf6:	3030      	adds	r0, #48	; 0x30
 8006cf8:	4543      	cmp	r3, r8
 8006cfa:	bf08      	it	eq
 8006cfc:	f042 0201 	orreq.w	r2, r2, #1
 8006d00:	f508 785c 	add.w	r8, r8, #880	; 0x370
 8006d04:	4283      	cmp	r3, r0
 8006d06:	bf08      	it	eq
 8006d08:	f042 0201 	orreq.w	r2, r2, #1
 8006d0c:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8006d10:	4543      	cmp	r3, r8
 8006d12:	bf08      	it	eq
 8006d14:	f042 0201 	orreq.w	r2, r2, #1
 8006d18:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006d1c:	4283      	cmp	r3, r0
 8006d1e:	bf08      	it	eq
 8006d20:	f042 0201 	orreq.w	r2, r2, #1
 8006d24:	3030      	adds	r0, #48	; 0x30
 8006d26:	4543      	cmp	r3, r8
 8006d28:	bf08      	it	eq
 8006d2a:	f042 0201 	orreq.w	r2, r2, #1
 8006d2e:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006d32:	4283      	cmp	r3, r0
 8006d34:	bf08      	it	eq
 8006d36:	f042 0201 	orreq.w	r2, r2, #1
 8006d3a:	3030      	adds	r0, #48	; 0x30
 8006d3c:	4543      	cmp	r3, r8
 8006d3e:	bf08      	it	eq
 8006d40:	f042 0201 	orreq.w	r2, r2, #1
 8006d44:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006d48:	4283      	cmp	r3, r0
 8006d4a:	bf08      	it	eq
 8006d4c:	f042 0201 	orreq.w	r2, r2, #1
 8006d50:	3030      	adds	r0, #48	; 0x30
 8006d52:	4543      	cmp	r3, r8
 8006d54:	bf08      	it	eq
 8006d56:	f042 0201 	orreq.w	r2, r2, #1
 8006d5a:	4283      	cmp	r3, r0
 8006d5c:	bf08      	it	eq
 8006d5e:	f042 0201 	orreq.w	r2, r2, #1
 8006d62:	2a00      	cmp	r2, #0
 8006d64:	f47f ae15 	bne.w	8006992 <HAL_DMA_IRQHandler+0xde>
 8006d68:	2e00      	cmp	r6, #0
 8006d6a:	f47f ae12 	bne.w	8006992 <HAL_DMA_IRQHandler+0xde>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d6e:	2204      	movs	r2, #4
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006d70:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d72:	fa02 f20c 	lsl.w	r2, r2, ip
 8006d76:	423a      	tst	r2, r7
 8006d78:	f040 809f 	bne.w	8006eba <HAL_DMA_IRQHandler+0x606>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d7c:	2210      	movs	r2, #16
 8006d7e:	fa02 fc0c 	lsl.w	ip, r2, ip
 8006d82:	ea17 0f0c 	tst.w	r7, ip
 8006d86:	f43f aee9 	beq.w	8006b5c <HAL_DMA_IRQHandler+0x2a8>
 8006d8a:	e679      	b.n	8006a80 <HAL_DMA_IRQHandler+0x1cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006d8c:	4a25      	ldr	r2, [pc, #148]	; (8006e24 <HAL_DMA_IRQHandler+0x570>)
 8006d8e:	4e26      	ldr	r6, [pc, #152]	; (8006e28 <HAL_DMA_IRQHandler+0x574>)
 8006d90:	4d26      	ldr	r5, [pc, #152]	; (8006e2c <HAL_DMA_IRQHandler+0x578>)
 8006d92:	42b3      	cmp	r3, r6
 8006d94:	bf18      	it	ne
 8006d96:	4293      	cmpne	r3, r2
 8006d98:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8006d9c:	bf0c      	ite	eq
 8006d9e:	2201      	moveq	r2, #1
 8006da0:	2200      	movne	r2, #0
 8006da2:	42ab      	cmp	r3, r5
 8006da4:	bf08      	it	eq
 8006da6:	f042 0201 	orreq.w	r2, r2, #1
 8006daa:	3528      	adds	r5, #40	; 0x28
 8006dac:	42b3      	cmp	r3, r6
 8006dae:	bf08      	it	eq
 8006db0:	f042 0201 	orreq.w	r2, r2, #1
 8006db4:	3628      	adds	r6, #40	; 0x28
 8006db6:	42ab      	cmp	r3, r5
 8006db8:	bf08      	it	eq
 8006dba:	f042 0201 	orreq.w	r2, r2, #1
 8006dbe:	3528      	adds	r5, #40	; 0x28
 8006dc0:	42b3      	cmp	r3, r6
 8006dc2:	bf08      	it	eq
 8006dc4:	f042 0201 	orreq.w	r2, r2, #1
 8006dc8:	42ab      	cmp	r3, r5
 8006dca:	bf08      	it	eq
 8006dcc:	f042 0201 	orreq.w	r2, r2, #1
 8006dd0:	b912      	cbnz	r2, 8006dd8 <HAL_DMA_IRQHandler+0x524>
 8006dd2:	4a17      	ldr	r2, [pc, #92]	; (8006e30 <HAL_DMA_IRQHandler+0x57c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d116      	bne.n	8006e06 <HAL_DMA_IRQHandler+0x552>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006dd8:	f8da 505c 	ldr.w	r5, [sl, #92]	; 0x5c
 8006ddc:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006dde:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006de0:	f005 051f 	and.w	r5, r5, #31
 8006de4:	40ae      	lsls	r6, r5
 8006de6:	420e      	tst	r6, r1
 8006de8:	d073      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0x61e>
 8006dea:	0757      	lsls	r7, r2, #29
 8006dec:	d571      	bpl.n	8006ed2 <HAL_DMA_IRQHandler+0x61e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dee:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006df0:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006df2:	f140 809f 	bpl.w	8006f34 <HAL_DMA_IRQHandler+0x680>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006df6:	03d1      	lsls	r1, r2, #15
 8006df8:	f100 80a2 	bmi.w	8006f40 <HAL_DMA_IRQHandler+0x68c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006dfc:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f47f af4a 	bne.w	8006c9a <HAL_DMA_IRQHandler+0x3e6>
}
 8006e06:	b002      	add	sp, #8
 8006e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0c:	40020010 	.word	0x40020010
 8006e10:	40020028 	.word	0x40020028
 8006e14:	40020040 	.word	0x40020040
 8006e18:	400204b8 	.word	0x400204b8
 8006e1c:	1b4e81b5 	.word	0x1b4e81b5
 8006e20:	40020058 	.word	0x40020058
 8006e24:	58025408 	.word	0x58025408
 8006e28:	5802541c 	.word	0x5802541c
 8006e2c:	58025430 	.word	0x58025430
 8006e30:	58025494 	.word	0x58025494
 8006e34:	40020070 	.word	0x40020070
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	031b      	lsls	r3, r3, #12
 8006e3c:	f57f ae78 	bpl.w	8006b30 <HAL_DMA_IRQHandler+0x27c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006e40:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f47f ae85 	bne.w	8006b54 <HAL_DMA_IRQHandler+0x2a0>
 8006e4a:	e687      	b.n	8006b5c <HAL_DMA_IRQHandler+0x2a8>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e4c:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e50:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e54:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006e56:	6953      	ldr	r3, [r2, #20]
 8006e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e5c:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e5e:	b33d      	cbz	r5, 8006eb0 <HAL_DMA_IRQHandler+0x5fc>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006e60:	6813      	ldr	r3, [r2, #0]
 8006e62:	f023 0308 	bic.w	r3, r3, #8
 8006e66:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e68:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 8006e6a:	2500      	movs	r5, #0
          hdma->State = HAL_DMA_STATE_READY;
 8006e6c:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e6e:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 8006e72:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e76:	60a1      	str	r1, [r4, #8]
          __HAL_UNLOCK(hdma);
 8006e78:	f88a 5034 	strb.w	r5, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8006e7c:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f47f af0a 	bne.w	8006c9a <HAL_DMA_IRQHandler+0x3e6>
 8006e86:	e7be      	b.n	8006e06 <HAL_DMA_IRQHandler+0x552>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006e88:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8006e8c:	f47f aed2 	bne.w	8006c34 <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006e90:	6811      	ldr	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8006e92:	2401      	movs	r4, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006e94:	f021 0110 	bic.w	r1, r1, #16
 8006e98:	6011      	str	r1, [r2, #0]
            __HAL_UNLOCK(hdma);
 8006e9a:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8006e9e:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
 8006ea2:	e6c7      	b.n	8006c34 <HAL_DMA_IRQHandler+0x380>
            if(hdma->XferM1CpltCallback != NULL)
 8006ea4:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f47f aec6 	bne.w	8006c3a <HAL_DMA_IRQHandler+0x386>
 8006eae:	e6c6      	b.n	8006c3e <HAL_DMA_IRQHandler+0x38a>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006eb0:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1d3      	bne.n	8006e60 <HAL_DMA_IRQHandler+0x5ac>
 8006eb8:	e7d6      	b.n	8006e68 <HAL_DMA_IRQHandler+0x5b4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006eba:	2210      	movs	r2, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006ebc:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ebe:	fa02 fc0c 	lsl.w	ip, r2, ip
 8006ec2:	ea17 0f0c 	tst.w	r7, ip
 8006ec6:	f43f ae49 	beq.w	8006b5c <HAL_DMA_IRQHandler+0x2a8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8006ed0:	e620      	b.n	8006b14 <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ed2:	2602      	movs	r6, #2
 8006ed4:	40ae      	lsls	r6, r5
 8006ed6:	420e      	tst	r6, r1
 8006ed8:	d010      	beq.n	8006efc <HAL_DMA_IRQHandler+0x648>
 8006eda:	0797      	lsls	r7, r2, #30
 8006edc:	d50e      	bpl.n	8006efc <HAL_DMA_IRQHandler+0x648>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006ede:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ee0:	0414      	lsls	r4, r2, #16
 8006ee2:	d533      	bpl.n	8006f4c <HAL_DMA_IRQHandler+0x698>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ee4:	03d0      	lsls	r0, r2, #15
 8006ee6:	d43d      	bmi.n	8006f64 <HAL_DMA_IRQHandler+0x6b0>
          if(hdma->XferM1CpltCallback != NULL)
 8006ee8:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f47f aed4 	bne.w	8006c9a <HAL_DMA_IRQHandler+0x3e6>
 8006ef2:	e788      	b.n	8006e06 <HAL_DMA_IRQHandler+0x552>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006ef4:	6813      	ldr	r3, [r2, #0]
 8006ef6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006efa:	e68b      	b.n	8006c14 <HAL_DMA_IRQHandler+0x360>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006efc:	2608      	movs	r6, #8
 8006efe:	40ae      	lsls	r6, r5
 8006f00:	420e      	tst	r6, r1
 8006f02:	d080      	beq.n	8006e06 <HAL_DMA_IRQHandler+0x552>
 8006f04:	0711      	lsls	r1, r2, #28
 8006f06:	f57f af7e 	bpl.w	8006e06 <HAL_DMA_IRQHandler+0x552>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f0a:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f0c:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8006f0e:	2600      	movs	r6, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f10:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f14:	fa02 f505 	lsl.w	r5, r2, r5
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f18:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 8006f1a:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f1e:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f20:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8006f24:	f88a 6034 	strb.w	r6, [sl, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8006f28:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f47f aeb4 	bne.w	8006c9a <HAL_DMA_IRQHandler+0x3e6>
 8006f32:	e768      	b.n	8006e06 <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f34:	0692      	lsls	r2, r2, #26
 8006f36:	d403      	bmi.n	8006f40 <HAL_DMA_IRQHandler+0x68c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	f022 0204 	bic.w	r2, r2, #4
 8006f3e:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8006f40:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f47f aea8 	bne.w	8006c9a <HAL_DMA_IRQHandler+0x3e6>
 8006f4a:	e75c      	b.n	8006e06 <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f4c:	f012 0220 	ands.w	r2, r2, #32
 8006f50:	d108      	bne.n	8006f64 <HAL_DMA_IRQHandler+0x6b0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f52:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8006f54:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f56:	f021 010a 	bic.w	r1, r1, #10
 8006f5a:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 8006f5c:	f88a 2034 	strb.w	r2, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8006f60:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8006f64:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f47f ae96 	bne.w	8006c9a <HAL_DMA_IRQHandler+0x3e6>
 8006f6e:	e74a      	b.n	8006e06 <HAL_DMA_IRQHandler+0x552>

08006f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f74:	680e      	ldr	r6, [r1, #0]
{
 8006f76:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f78:	2e00      	cmp	r6, #0
 8006f7a:	f000 80d3 	beq.w	8007124 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 8006f7e:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f80:	f8df a220 	ldr.w	sl, [pc, #544]	; 80071a4 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006f84:	f8df b220 	ldr.w	fp, [pc, #544]	; 80071a8 <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f88:	46b1      	mov	r9, r6
 8006f8a:	e020      	b.n	8006fce <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 8006f8c:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f8e:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f92:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f96:	f04f 0e0f 	mov.w	lr, #15
 8006f9a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f9e:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006fa0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006fa4:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 8006fa8:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006faa:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006fae:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006fb2:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006fb6:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8006fba:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8006fbc:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006fbe:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006fc0:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 8006fc2:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 8006fc4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006fc6:	fa39 f203 	lsrs.w	r2, r9, r3
 8006fca:	f000 80ab 	beq.w	8007124 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006fce:	2201      	movs	r2, #1
 8006fd0:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8006fd2:	ea12 0809 	ands.w	r8, r2, r9
 8006fd6:	d0f5      	beq.n	8006fc4 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006fd8:	684c      	ldr	r4, [r1, #4]
 8006fda:	005f      	lsls	r7, r3, #1
 8006fdc:	f024 0c10 	bic.w	ip, r4, #16
 8006fe0:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006fe4:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006fe6:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006fea:	f200 809e 	bhi.w	800712a <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006fee:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 8006ff2:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ff6:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006ff8:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ffa:	ea2e 0e05 	bic.w	lr, lr, r5
 8006ffe:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007000:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007002:	68ce      	ldr	r6, [r1, #12]
 8007004:	40be      	lsls	r6, r7
 8007006:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800700a:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 800700c:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8007010:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007014:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007018:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 800701a:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800701c:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800701e:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007022:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007024:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007028:	fa02 f207 	lsl.w	r2, r2, r7
 800702c:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8007030:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007032:	d0ab      	beq.n	8006f8c <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 8007034:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007036:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800703a:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800703c:	fa02 f707 	lsl.w	r7, r2, r7
 8007040:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8007042:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007044:	00e6      	lsls	r6, r4, #3
 8007046:	d5bd      	bpl.n	8006fc4 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007048:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 800704c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007050:	f003 0203 	and.w	r2, r3, #3
 8007054:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007056:	f046 0602 	orr.w	r6, r6, #2
 800705a:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800705e:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007060:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 8007064:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8007068:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800706c:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007070:	f006 0602 	and.w	r6, r6, #2
 8007074:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007076:	4e42      	ldr	r6, [pc, #264]	; (8007180 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007078:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800707a:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 800707c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800707e:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007082:	d020      	beq.n	80070c6 <HAL_GPIO_Init+0x156>
 8007084:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007088:	42b0      	cmp	r0, r6
 800708a:	d056      	beq.n	800713a <HAL_GPIO_Init+0x1ca>
 800708c:	4e3d      	ldr	r6, [pc, #244]	; (8007184 <HAL_GPIO_Init+0x214>)
 800708e:	42b0      	cmp	r0, r6
 8007090:	d058      	beq.n	8007144 <HAL_GPIO_Init+0x1d4>
 8007092:	4e3d      	ldr	r6, [pc, #244]	; (8007188 <HAL_GPIO_Init+0x218>)
 8007094:	42b0      	cmp	r0, r6
 8007096:	d04b      	beq.n	8007130 <HAL_GPIO_Init+0x1c0>
 8007098:	4e3c      	ldr	r6, [pc, #240]	; (800718c <HAL_GPIO_Init+0x21c>)
 800709a:	42b0      	cmp	r0, r6
 800709c:	d05c      	beq.n	8007158 <HAL_GPIO_Init+0x1e8>
 800709e:	4e3c      	ldr	r6, [pc, #240]	; (8007190 <HAL_GPIO_Init+0x220>)
 80070a0:	42b0      	cmp	r0, r6
 80070a2:	d05e      	beq.n	8007162 <HAL_GPIO_Init+0x1f2>
 80070a4:	4e3b      	ldr	r6, [pc, #236]	; (8007194 <HAL_GPIO_Init+0x224>)
 80070a6:	42b0      	cmp	r0, r6
 80070a8:	d051      	beq.n	800714e <HAL_GPIO_Init+0x1de>
 80070aa:	4e3b      	ldr	r6, [pc, #236]	; (8007198 <HAL_GPIO_Init+0x228>)
 80070ac:	42b0      	cmp	r0, r6
 80070ae:	d05d      	beq.n	800716c <HAL_GPIO_Init+0x1fc>
 80070b0:	4e3a      	ldr	r6, [pc, #232]	; (800719c <HAL_GPIO_Init+0x22c>)
 80070b2:	42b0      	cmp	r0, r6
 80070b4:	d05f      	beq.n	8007176 <HAL_GPIO_Init+0x206>
 80070b6:	4e3a      	ldr	r6, [pc, #232]	; (80071a0 <HAL_GPIO_Init+0x230>)
 80070b8:	42b0      	cmp	r0, r6
 80070ba:	bf0c      	ite	eq
 80070bc:	2609      	moveq	r6, #9
 80070be:	260a      	movne	r6, #10
 80070c0:	fa06 f202 	lsl.w	r2, r6, r2
 80070c4:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 80070c6:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 80070c8:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 80070cc:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80070d0:	03e5      	lsls	r5, r4, #15
    position++;
 80070d2:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 80070d6:	bf54      	ite	pl
 80070d8:	4032      	andpl	r2, r6
          temp |= iocurrent;
 80070da:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80070de:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80070e2:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 80070e4:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 80070e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80070ec:	bf54      	ite	pl
 80070ee:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80070f0:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80070f4:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 80070f6:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 80070fa:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 80070fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8007100:	bf54      	ite	pl
 8007102:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8007104:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007108:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 800710a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 800710e:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8007110:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 8007112:	bf54      	ite	pl
 8007114:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8007116:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 800711a:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800711c:	fa39 f203 	lsrs.w	r2, r9, r3
 8007120:	f47f af55 	bne.w	8006fce <HAL_GPIO_Init+0x5e>
  }
}
 8007124:	b005      	add	sp, #20
 8007126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712a:	40bd      	lsls	r5, r7
 800712c:	43ed      	mvns	r5, r5
 800712e:	e775      	b.n	800701c <HAL_GPIO_Init+0xac>
 8007130:	2603      	movs	r6, #3
 8007132:	fa06 f202 	lsl.w	r2, r6, r2
 8007136:	4315      	orrs	r5, r2
 8007138:	e7c5      	b.n	80070c6 <HAL_GPIO_Init+0x156>
 800713a:	2601      	movs	r6, #1
 800713c:	fa06 f202 	lsl.w	r2, r6, r2
 8007140:	4315      	orrs	r5, r2
 8007142:	e7c0      	b.n	80070c6 <HAL_GPIO_Init+0x156>
 8007144:	2602      	movs	r6, #2
 8007146:	fa06 f202 	lsl.w	r2, r6, r2
 800714a:	4315      	orrs	r5, r2
 800714c:	e7bb      	b.n	80070c6 <HAL_GPIO_Init+0x156>
 800714e:	2606      	movs	r6, #6
 8007150:	fa06 f202 	lsl.w	r2, r6, r2
 8007154:	4315      	orrs	r5, r2
 8007156:	e7b6      	b.n	80070c6 <HAL_GPIO_Init+0x156>
 8007158:	2604      	movs	r6, #4
 800715a:	fa06 f202 	lsl.w	r2, r6, r2
 800715e:	4315      	orrs	r5, r2
 8007160:	e7b1      	b.n	80070c6 <HAL_GPIO_Init+0x156>
 8007162:	2605      	movs	r6, #5
 8007164:	fa06 f202 	lsl.w	r2, r6, r2
 8007168:	4315      	orrs	r5, r2
 800716a:	e7ac      	b.n	80070c6 <HAL_GPIO_Init+0x156>
 800716c:	2607      	movs	r6, #7
 800716e:	fa06 f202 	lsl.w	r2, r6, r2
 8007172:	4315      	orrs	r5, r2
 8007174:	e7a7      	b.n	80070c6 <HAL_GPIO_Init+0x156>
 8007176:	2608      	movs	r6, #8
 8007178:	fa06 f202 	lsl.w	r2, r6, r2
 800717c:	4315      	orrs	r5, r2
 800717e:	e7a2      	b.n	80070c6 <HAL_GPIO_Init+0x156>
 8007180:	58020000 	.word	0x58020000
 8007184:	58020800 	.word	0x58020800
 8007188:	58020c00 	.word	0x58020c00
 800718c:	58021000 	.word	0x58021000
 8007190:	58021400 	.word	0x58021400
 8007194:	58021800 	.word	0x58021800
 8007198:	58021c00 	.word	0x58021c00
 800719c:	58022000 	.word	0x58022000
 80071a0:	58022400 	.word	0x58022400
 80071a4:	58024400 	.word	0x58024400
 80071a8:	58000080 	.word	0x58000080

080071ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80071ac:	6903      	ldr	r3, [r0, #16]
 80071ae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80071b0:	bf14      	ite	ne
 80071b2:	2001      	movne	r0, #1
 80071b4:	2000      	moveq	r0, #0
 80071b6:	4770      	bx	lr

080071b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80071b8:	b902      	cbnz	r2, 80071bc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80071ba:	0409      	lsls	r1, r1, #16
 80071bc:	6181      	str	r1, [r0, #24]
  }
}
 80071be:	4770      	bx	lr

080071c0 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80071c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071c4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80071c8:	4201      	tst	r1, r0
 80071ca:	d100      	bne.n	80071ce <HAL_GPIO_EXTI_IRQHandler+0xe>
 80071cc:	4770      	bx	lr
{
 80071ce:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80071d0:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80071d4:	f7f9 fed4 	bl	8000f80 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80071d8:	bd08      	pop	{r3, pc}
 80071da:	bf00      	nop

080071dc <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80071dc:	2800      	cmp	r0, #0
 80071de:	d061      	beq.n	80072a4 <HAL_LPTIM_Init+0xc8>
{
 80071e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80071e2:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80071e6:	4604      	mov	r4, r0
 80071e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d054      	beq.n	800729a <HAL_LPTIM_Init+0xbe>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80071f0:	2302      	movs	r3, #2
 80071f2:	6aa5      	ldr	r5, [r4, #40]	; 0x28

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 80071f4:	e9d4 1700 	ldrd	r1, r7, [r4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80071f8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 80071fc:	2f01      	cmp	r7, #1
  tmpcfgr = hlptim->Instance->CFGR;
 80071fe:	68c8      	ldr	r0, [r1, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 8007200:	d03f      	beq.n	8007282 <HAL_LPTIM_Init+0xa6>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007202:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
 8007206:	d03c      	beq.n	8007282 <HAL_LPTIM_Init+0xa6>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007208:	6962      	ldr	r2, [r4, #20]
 800720a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800720e:	429a      	cmp	r2, r3
 8007210:	d003      	beq.n	800721a <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007212:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8007216:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800721a:	68a3      	ldr	r3, [r4, #8]
              hlptim->Init.Clock.Prescaler |
 800721c:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800721e:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007220:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80072c4 <HAL_LPTIM_Init+0xe8>
              hlptim->Init.Clock.Prescaler |
 8007224:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 8007226:	6a66      	ldr	r6, [r4, #36]	; 0x24
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007228:	ea0c 0c00 	and.w	ip, ip, r0
              hlptim->Init.OutputPolarity  |
 800722c:	4333      	orrs	r3, r6
              hlptim->Init.UpdateMode      |
 800722e:	432b      	orrs	r3, r5
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007230:	ea43 030c 	orr.w	r3, r3, ip
              hlptim->Init.CounterSource);

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007234:	b1ef      	cbz	r7, 8007272 <HAL_LPTIM_Init+0x96>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 8007236:	2f01      	cmp	r7, #1
 8007238:	d11f      	bne.n	800727a <HAL_LPTIM_Init+0x9e>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800723a:	e9d4 0503 	ldrd	r0, r5, [r4, #12]
 800723e:	4328      	orrs	r0, r5
 8007240:	4303      	orrs	r3, r0
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007242:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007246:	4282      	cmp	r2, r0
 8007248:	d004      	beq.n	8007254 <HAL_LPTIM_Init+0x78>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
                hlptim->Init.Trigger.ActiveEdge |
 800724a:	e9d4 5006 	ldrd	r5, r0, [r4, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800724e:	432a      	orrs	r2, r5
                hlptim->Init.Trigger.ActiveEdge |
 8007250:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007252:	4313      	orrs	r3, r2

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8007254:	4a18      	ldr	r2, [pc, #96]	; (80072b8 <HAL_LPTIM_Init+0xdc>)
  hlptim->Instance->CFGR = tmpcfgr;
 8007256:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8007258:	4291      	cmp	r1, r2
 800725a:	d015      	beq.n	8007288 <HAL_LPTIM_Init+0xac>
 800725c:	4b17      	ldr	r3, [pc, #92]	; (80072bc <HAL_LPTIM_Init+0xe0>)
 800725e:	4299      	cmp	r1, r3
 8007260:	d012      	beq.n	8007288 <HAL_LPTIM_Init+0xac>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8007262:	4b17      	ldr	r3, [pc, #92]	; (80072c0 <HAL_LPTIM_Init+0xe4>)
 8007264:	4299      	cmp	r1, r3
 8007266:	d01f      	beq.n	80072a8 <HAL_LPTIM_Init+0xcc>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007268:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 800726a:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 800726c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8007270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007272:	69e0      	ldr	r0, [r4, #28]
 8007274:	6926      	ldr	r6, [r4, #16]
 8007276:	4330      	orrs	r0, r6
 8007278:	4303      	orrs	r3, r0
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800727a:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
 800727e:	d1e0      	bne.n	8007242 <HAL_LPTIM_Init+0x66>
 8007280:	e7db      	b.n	800723a <HAL_LPTIM_Init+0x5e>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007282:	f020 001e 	bic.w	r0, r0, #30
 8007286:	e7bf      	b.n	8007208 <HAL_LPTIM_Init+0x2c>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8007288:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 800728c:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800728e:	4313      	orrs	r3, r2
 8007290:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007292:	2301      	movs	r3, #1
 8007294:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8007298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 800729a:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 800729e:	f7fc fd09 	bl	8003cb4 <HAL_LPTIM_MspInit>
 80072a2:	e7a5      	b.n	80071f0 <HAL_LPTIM_Init+0x14>
    return HAL_ERROR;
 80072a4:	2001      	movs	r0, #1
}
 80072a6:	4770      	bx	lr
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80072a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80072aa:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80072ac:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80072b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072b6:	bf00      	nop
 80072b8:	40002400 	.word	0x40002400
 80072bc:	58002400 	.word	0x58002400
 80072c0:	58002800 	.word	0x58002800
 80072c4:	ff19f1fe 	.word	0xff19f1fe

080072c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80072c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ca:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80072cc:	2800      	cmp	r0, #0
 80072ce:	f000 8088 	beq.w	80073e2 <HAL_PCD_Init+0x11a>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80072d2:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 80072d6:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 80072d8:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80072da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d079      	beq.n	80073d6 <HAL_PCD_Init+0x10e>
 80072e2:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80072e4:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072e6:	462e      	mov	r6, r5
 80072e8:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80072ea:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80072ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072f0:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80072f2:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 80072f6:	bf08      	it	eq
 80072f8:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 80072fa:	f003 ffe9 	bl	800b2d0 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072fe:	f856 eb10 	ldr.w	lr, [r6], #16
 8007302:	46b4      	mov	ip, r6
 8007304:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800730a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800730e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007310:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8007314:	e884 0003 	stmia.w	r4, {r0, r1}
 8007318:	4670      	mov	r0, lr
 800731a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800731e:	f003 fedf 	bl	800b0e0 <USB_CoreInit>
 8007322:	4604      	mov	r4, r0
 8007324:	b130      	cbz	r0, 8007334 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8007326:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007328:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800732a:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800732c:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 8007330:	b00b      	add	sp, #44	; 0x2c
 8007332:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007334:	4601      	mov	r1, r0
 8007336:	6828      	ldr	r0, [r5, #0]
 8007338:	f003 ffd2 	bl	800b2e0 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800733c:	6868      	ldr	r0, [r5, #4]
 800733e:	b358      	cbz	r0, 8007398 <HAL_PCD_Init+0xd0>
 8007340:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8007342:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007346:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8007348:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800734c:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 8007350:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8007354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007358:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800735c:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 8007360:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007364:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007366:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800736a:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800736c:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007370:	d3ea      	bcc.n	8007348 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 8007372:	2200      	movs	r2, #0
 8007374:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007378:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800737a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800737e:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007382:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 8007384:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007388:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800738a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800738e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007392:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007396:	d3ed      	bcc.n	8007374 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007398:	466c      	mov	r4, sp
 800739a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800739c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800739e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80073a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073a2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80073a6:	e884 0003 	stmia.w	r4, {r0, r1}
 80073aa:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80073ae:	6828      	ldr	r0, [r5, #0]
 80073b0:	f003 ffae 	bl	800b310 <USB_DevInit>
 80073b4:	4604      	mov	r4, r0
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d1b5      	bne.n	8007326 <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 80073ba:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 80073bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 80073be:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 80073c2:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 80073c4:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 80073c8:	d00f      	beq.n	80073ea <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 80073ca:	6828      	ldr	r0, [r5, #0]
 80073cc:	f004 fbc0 	bl	800bb50 <USB_DevDisconnect>
}
 80073d0:	4620      	mov	r0, r4
 80073d2:	b00b      	add	sp, #44	; 0x2c
 80073d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80073d6:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 80073da:	f005 fc19 	bl	800cc10 <HAL_PCD_MspInit>
 80073de:	6828      	ldr	r0, [r5, #0]
 80073e0:	e780      	b.n	80072e4 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 80073e2:	2401      	movs	r4, #1
}
 80073e4:	4620      	mov	r0, r4
 80073e6:	b00b      	add	sp, #44	; 0x2c
 80073e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80073ea:	4628      	mov	r0, r5
 80073ec:	f000 fcd0 	bl	8007d90 <HAL_PCDEx_ActivateLPM>
 80073f0:	e7eb      	b.n	80073ca <HAL_PCD_Init+0x102>
 80073f2:	bf00      	nop

080073f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80073f4:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 80073f6:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 80073fa:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073fc:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d016      	beq.n	8007430 <HAL_PCD_Start+0x3c>
 8007402:	2201      	movs	r2, #1

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007404:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007406:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 8007408:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800740c:	d008      	beq.n	8007420 <HAL_PCD_Start+0x2c>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 800740e:	f003 ff57 	bl	800b2c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007412:	6820      	ldr	r0, [r4, #0]
 8007414:	f004 fb8c 	bl	800bb30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007418:	2000      	movs	r0, #0
 800741a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 800741e:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007420:	69a3      	ldr	r3, [r4, #24]
 8007422:	4293      	cmp	r3, r2
 8007424:	d0f3      	beq.n	800740e <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007426:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800742c:	6383      	str	r3, [r0, #56]	; 0x38
 800742e:	e7ee      	b.n	800740e <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8007430:	2002      	movs	r0, #2
}
 8007432:	bd10      	pop	{r4, pc}

08007434 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007438:	6806      	ldr	r6, [r0, #0]
{
 800743a:	b087      	sub	sp, #28
 800743c:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800743e:	4630      	mov	r0, r6
 8007440:	f004 fbc6 	bl	800bbd0 <USB_GetMode>
 8007444:	b110      	cbz	r0, 800744c <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8007446:	b007      	add	sp, #28
 8007448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800744c:	4683      	mov	fp, r0
 800744e:	6820      	ldr	r0, [r4, #0]
 8007450:	f004 fb8e 	bl	800bb70 <USB_ReadInterrupts>
 8007454:	2800      	cmp	r0, #0
 8007456:	d0f6      	beq.n	8007446 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	f004 fb89 	bl	800bb70 <USB_ReadInterrupts>
 800745e:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007462:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007464:	d003      	beq.n	800746e <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007466:	6943      	ldr	r3, [r0, #20]
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800746e:	f004 fb7f 	bl	800bb70 <USB_ReadInterrupts>
 8007472:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007476:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007478:	d012      	beq.n	80074a0 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800747a:	6983      	ldr	r3, [r0, #24]
 800747c:	f023 0310 	bic.w	r3, r3, #16
 8007480:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 8007482:	6a35      	ldr	r5, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007484:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007488:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800748c:	2b02      	cmp	r3, #2
 800748e:	f000 826c 	beq.w	800796a <HAL_PCD_IRQHandler+0x536>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007492:	2b06      	cmp	r3, #6
 8007494:	f000 81cb 	beq.w	800782e <HAL_PCD_IRQHandler+0x3fa>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007498:	6983      	ldr	r3, [r0, #24]
 800749a:	f043 0310 	orr.w	r3, r3, #16
 800749e:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80074a0:	f004 fb66 	bl	800bb70 <USB_ReadInterrupts>
 80074a4:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80074a8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80074aa:	f040 80df 	bne.w	800766c <HAL_PCD_IRQHandler+0x238>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80074ae:	f004 fb5f 	bl	800bb70 <USB_ReadInterrupts>
 80074b2:	0342      	lsls	r2, r0, #13
 80074b4:	d478      	bmi.n	80075a8 <HAL_PCD_IRQHandler+0x174>
 80074b6:	f8d4 8000 	ldr.w	r8, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80074ba:	4640      	mov	r0, r8
 80074bc:	f004 fb58 	bl	800bb70 <USB_ReadInterrupts>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	db5d      	blt.n	8007580 <HAL_PCD_IRQHandler+0x14c>
 80074c4:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80074c6:	f004 fb53 	bl	800bb70 <USB_ReadInterrupts>
 80074ca:	0500      	lsls	r0, r0, #20
 80074cc:	d44d      	bmi.n	800756a <HAL_PCD_IRQHandler+0x136>
 80074ce:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80074d0:	f004 fb4e 	bl	800bb70 <USB_ReadInterrupts>
 80074d4:	0102      	lsls	r2, r0, #4
 80074d6:	d514      	bpl.n	8007502 <HAL_PCD_IRQHandler+0xce>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80074d8:	6822      	ldr	r2, [r4, #0]
 80074da:	6953      	ldr	r3, [r2, #20]
 80074dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074e0:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 80074e2:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f040 818b 	bne.w	8007802 <HAL_PCD_IRQHandler+0x3ce>
        hpcd->LPM_State = LPM_L1;
 80074ec:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80074ee:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 80074f0:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80074f4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80074f6:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80074fa:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80074fe:	f000 fc5d 	bl	8007dbc <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007502:	6820      	ldr	r0, [r4, #0]
 8007504:	f004 fb34 	bl	800bb70 <USB_ReadInterrupts>
 8007508:	04c3      	lsls	r3, r0, #19
 800750a:	f100 8129 	bmi.w	8007760 <HAL_PCD_IRQHandler+0x32c>
 800750e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007510:	f004 fb2e 	bl	800bb70 <USB_ReadInterrupts>
 8007514:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8007518:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800751a:	f040 810a 	bne.w	8007732 <HAL_PCD_IRQHandler+0x2fe>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800751e:	f004 fb27 	bl	800bb70 <USB_ReadInterrupts>
 8007522:	0707      	lsls	r7, r0, #28
 8007524:	f100 80fc 	bmi.w	8007720 <HAL_PCD_IRQHandler+0x2ec>
 8007528:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800752a:	f004 fb21 	bl	800bb70 <USB_ReadInterrupts>
 800752e:	02c6      	lsls	r6, r0, #11
 8007530:	f100 80ec 	bmi.w	800770c <HAL_PCD_IRQHandler+0x2d8>
 8007534:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007536:	f004 fb1b 	bl	800bb70 <USB_ReadInterrupts>
 800753a:	0285      	lsls	r5, r0, #10
 800753c:	f100 80dc 	bmi.w	80076f8 <HAL_PCD_IRQHandler+0x2c4>
 8007540:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007542:	f004 fb15 	bl	800bb70 <USB_ReadInterrupts>
 8007546:	0040      	lsls	r0, r0, #1
 8007548:	f100 80cd 	bmi.w	80076e6 <HAL_PCD_IRQHandler+0x2b2>
 800754c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800754e:	f004 fb0f 	bl	800bb70 <USB_ReadInterrupts>
 8007552:	0741      	lsls	r1, r0, #29
 8007554:	f57f af77 	bpl.w	8007446 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800755c:	076a      	lsls	r2, r5, #29
 800755e:	f100 8225 	bmi.w	80079ac <HAL_PCD_IRQHandler+0x578>
      hpcd->Instance->GOTGINT |= temp;
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	432a      	orrs	r2, r5
 8007566:	605a      	str	r2, [r3, #4]
 8007568:	e76d      	b.n	8007446 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800756a:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 800756e:	07d9      	lsls	r1, r3, #31
 8007570:	f100 8218 	bmi.w	80079a4 <HAL_PCD_IRQHandler+0x570>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007574:	6820      	ldr	r0, [r4, #0]
 8007576:	6943      	ldr	r3, [r0, #20]
 8007578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800757c:	6143      	str	r3, [r0, #20]
 800757e:	e7a7      	b.n	80074d0 <HAL_PCD_IRQHandler+0x9c>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007580:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8007584:	f023 0301 	bic.w	r3, r3, #1
 8007588:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800758c:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8007590:	2b01      	cmp	r3, #1
 8007592:	f000 8145 	beq.w	8007820 <HAL_PCD_IRQHandler+0x3ec>
        HAL_PCD_ResumeCallback(hpcd);
 8007596:	4620      	mov	r0, r4
 8007598:	f005 fbe6 	bl	800cd68 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800759c:	6820      	ldr	r0, [r4, #0]
 800759e:	6943      	ldr	r3, [r0, #20]
 80075a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075a4:	6143      	str	r3, [r0, #20]
 80075a6:	e78e      	b.n	80074c6 <HAL_PCD_IRQHandler+0x92>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80075a8:	6820      	ldr	r0, [r4, #0]
 80075aa:	f004 faed 	bl	800bb88 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 80075ae:	f8d4 8000 	ldr.w	r8, [r4]
 80075b2:	4681      	mov	r9, r0
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d080      	beq.n	80074ba <HAL_PCD_IRQHandler+0x86>
 80075b8:	f506 6310 	add.w	r3, r6, #2304	; 0x900
 80075bc:	4625      	mov	r5, r4
      epnum = 0U;
 80075be:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80075c2:	f8cd b010 	str.w	fp, [sp, #16]
 80075c6:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80075ca:	e007      	b.n	80075dc <HAL_PCD_IRQHandler+0x1a8>
      while (ep_intr != 0U)
 80075cc:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 80075d0:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 80075d4:	f105 051c 	add.w	r5, r5, #28
 80075d8:	f000 813e 	beq.w	8007858 <HAL_PCD_IRQHandler+0x424>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80075dc:	f019 0f01 	tst.w	r9, #1
 80075e0:	d0f4      	beq.n	80075cc <HAL_PCD_IRQHandler+0x198>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80075e2:	fa5f f78a 	uxtb.w	r7, sl
 80075e6:	4640      	mov	r0, r8
 80075e8:	4639      	mov	r1, r7
 80075ea:	f004 fadf 	bl	800bbac <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80075ee:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80075f0:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80075f2:	d519      	bpl.n	8007628 <HAL_PCD_IRQHandler+0x1f4>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80075f4:	f04f 0c01 	mov.w	ip, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80075f8:	9b03      	ldr	r3, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80075fa:	f00a 010f 	and.w	r1, sl, #15
 80075fe:	9a02      	ldr	r2, [sp, #8]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007600:	f8d3 0834 	ldr.w	r0, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007604:	fa0c f101 	lsl.w	r1, ip, r1
 8007608:	eb02 124a 	add.w	r2, r2, sl, lsl #5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800760c:	ea20 0001 	bic.w	r0, r0, r1
            if (hpcd->Init.dma_enable == 1U)
 8007610:	6921      	ldr	r1, [r4, #16]
 8007612:	4561      	cmp	r1, ip
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007614:	f8c3 0834 	str.w	r0, [r3, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007618:	f8c2 c008 	str.w	ip, [r2, #8]
            if (hpcd->Init.dma_enable == 1U)
 800761c:	f000 81cb 	beq.w	80079b6 <HAL_PCD_IRQHandler+0x582>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007620:	4639      	mov	r1, r7
 8007622:	4620      	mov	r0, r4
 8007624:	f005 fb64 	bl	800ccf0 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007628:	0730      	lsls	r0, r6, #28
 800762a:	d504      	bpl.n	8007636 <HAL_PCD_IRQHandler+0x202>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800762c:	9b02      	ldr	r3, [sp, #8]
 800762e:	2208      	movs	r2, #8
 8007630:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8007634:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007636:	06f1      	lsls	r1, r6, #27
 8007638:	d504      	bpl.n	8007644 <HAL_PCD_IRQHandler+0x210>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800763a:	9b02      	ldr	r3, [sp, #8]
 800763c:	2210      	movs	r2, #16
 800763e:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8007642:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007644:	0672      	lsls	r2, r6, #25
 8007646:	d504      	bpl.n	8007652 <HAL_PCD_IRQHandler+0x21e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007648:	9b02      	ldr	r3, [sp, #8]
 800764a:	2240      	movs	r2, #64	; 0x40
 800764c:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8007650:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007652:	07b3      	lsls	r3, r6, #30
 8007654:	d504      	bpl.n	8007660 <HAL_PCD_IRQHandler+0x22c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007656:	9b02      	ldr	r3, [sp, #8]
 8007658:	2202      	movs	r2, #2
 800765a:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800765e:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007660:	0636      	lsls	r6, r6, #24
 8007662:	f100 80fc 	bmi.w	800785e <HAL_PCD_IRQHandler+0x42a>
 8007666:	f8d4 8000 	ldr.w	r8, [r4]
 800766a:	e7af      	b.n	80075cc <HAL_PCD_IRQHandler+0x198>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800766c:	f004 fa84 	bl	800bb78 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8007670:	4605      	mov	r5, r0
 8007672:	6820      	ldr	r0, [r4, #0]
 8007674:	2d00      	cmp	r5, #0
 8007676:	f43f af1a 	beq.w	80074ae <HAL_PCD_IRQHandler+0x7a>
 800767a:	f506 6330 	add.w	r3, r6, #2816	; 0xb00
 800767e:	f504 7901 	add.w	r9, r4, #516	; 0x204
      epnum = 0U;
 8007682:	2700      	movs	r7, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007684:	9602      	str	r6, [sp, #8]
 8007686:	469a      	mov	sl, r3
 8007688:	e006      	b.n	8007698 <HAL_PCD_IRQHandler+0x264>
      while (ep_intr != 0U)
 800768a:	086d      	lsrs	r5, r5, #1
        epnum++;
 800768c:	f107 0701 	add.w	r7, r7, #1
      while (ep_intr != 0U)
 8007690:	f109 091c 	add.w	r9, r9, #28
 8007694:	f000 80de 	beq.w	8007854 <HAL_PCD_IRQHandler+0x420>
        if ((ep_intr & 0x1U) != 0U)
 8007698:	07ee      	lsls	r6, r5, #31
 800769a:	d5f6      	bpl.n	800768a <HAL_PCD_IRQHandler+0x256>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800769c:	b2fe      	uxtb	r6, r7
 800769e:	4631      	mov	r1, r6
 80076a0:	f004 fa7a 	bl	800bb98 <USB_ReadDevOutEPInterrupt>
 80076a4:	4680      	mov	r8, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076a6:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80076a8:	f018 0f01 	tst.w	r8, #1
 80076ac:	f040 813e 	bne.w	800792c <HAL_PCD_IRQHandler+0x4f8>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80076b0:	f018 0f08 	tst.w	r8, #8
 80076b4:	f040 8120 	bne.w	80078f8 <HAL_PCD_IRQHandler+0x4c4>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80076b8:	f018 0f10 	tst.w	r8, #16
 80076bc:	d003      	beq.n	80076c6 <HAL_PCD_IRQHandler+0x292>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80076be:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 80076c2:	2210      	movs	r2, #16
 80076c4:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80076c6:	f018 0f20 	tst.w	r8, #32
 80076ca:	d003      	beq.n	80076d4 <HAL_PCD_IRQHandler+0x2a0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80076cc:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 80076d0:	2220      	movs	r2, #32
 80076d2:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80076d4:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 80076d8:	d0d7      	beq.n	800768a <HAL_PCD_IRQHandler+0x256>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80076da:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 80076de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80076e2:	609a      	str	r2, [r3, #8]
 80076e4:	e7d1      	b.n	800768a <HAL_PCD_IRQHandler+0x256>
      HAL_PCD_ConnectCallback(hpcd);
 80076e6:	4620      	mov	r0, r4
 80076e8:	f005 fb4a 	bl	800cd80 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80076ec:	6820      	ldr	r0, [r4, #0]
 80076ee:	6943      	ldr	r3, [r0, #20]
 80076f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076f4:	6143      	str	r3, [r0, #20]
 80076f6:	e72a      	b.n	800754e <HAL_PCD_IRQHandler+0x11a>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80076f8:	4620      	mov	r0, r4
 80076fa:	2100      	movs	r1, #0
 80076fc:	f005 fb38 	bl	800cd70 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007700:	6820      	ldr	r0, [r4, #0]
 8007702:	6943      	ldr	r3, [r0, #20]
 8007704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007708:	6143      	str	r3, [r0, #20]
 800770a:	e71a      	b.n	8007542 <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800770c:	4620      	mov	r0, r4
 800770e:	2100      	movs	r1, #0
 8007710:	f005 fb32 	bl	800cd78 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007714:	6820      	ldr	r0, [r4, #0]
 8007716:	6943      	ldr	r3, [r0, #20]
 8007718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800771c:	6143      	str	r3, [r0, #20]
 800771e:	e70a      	b.n	8007536 <HAL_PCD_IRQHandler+0x102>
      HAL_PCD_SOFCallback(hpcd);
 8007720:	4620      	mov	r0, r4
 8007722:	f005 faef 	bl	800cd04 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007726:	6820      	ldr	r0, [r4, #0]
 8007728:	6943      	ldr	r3, [r0, #20]
 800772a:	f003 0308 	and.w	r3, r3, #8
 800772e:	6143      	str	r3, [r0, #20]
 8007730:	e6fb      	b.n	800752a <HAL_PCD_IRQHandler+0xf6>
      (void)USB_ActivateSetup(hpcd->Instance);
 8007732:	f004 fa51 	bl	800bbd8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007736:	6820      	ldr	r0, [r4, #0]
 8007738:	f003 fedc 	bl	800b4f4 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800773c:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800773e:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007740:	f001 f90c 	bl	800895c <HAL_RCC_GetHCLKFreq>
 8007744:	7b22      	ldrb	r2, [r4, #12]
 8007746:	4601      	mov	r1, r0
 8007748:	4628      	mov	r0, r5
 800774a:	f003 fd3d 	bl	800b1c8 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800774e:	4620      	mov	r0, r4
 8007750:	f005 fadc 	bl	800cd0c <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007754:	6820      	ldr	r0, [r4, #0]
 8007756:	6943      	ldr	r3, [r0, #20]
 8007758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800775c:	6143      	str	r3, [r0, #20]
 800775e:	e6de      	b.n	800751e <HAL_PCD_IRQHandler+0xea>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007760:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007764:	2110      	movs	r1, #16
 8007766:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007768:	f506 6500 	add.w	r5, r6, #2048	; 0x800
 800776c:	f023 0301 	bic.w	r3, r3, #1
 8007770:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007772:	f003 fead 	bl	800b4d0 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007776:	6860      	ldr	r0, [r4, #4]
 8007778:	b310      	cbz	r0, 80077c0 <HAL_PCD_IRQHandler+0x38c>
 800777a:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800777e:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8007782:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007784:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	3320      	adds	r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800778c:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800778e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007792:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007796:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800779a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800779e:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80077a2:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80077a6:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 80077aa:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80077ae:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80077b2:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 80077b6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80077ba:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077be:	d1e0      	bne.n	8007782 <HAL_PCD_IRQHandler+0x34e>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80077c0:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80077c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80077c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80077c8:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80077ca:	b9f2      	cbnz	r2, 800780a <HAL_PCD_IRQHandler+0x3d6>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80077cc:	696a      	ldr	r2, [r5, #20]
 80077ce:	f242 032b 	movw	r3, #8235	; 0x202b
 80077d2:	4313      	orrs	r3, r2
 80077d4:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80077d6:	692b      	ldr	r3, [r5, #16]
 80077d8:	f043 030b 	orr.w	r3, r3, #11
 80077dc:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80077de:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80077e2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80077e6:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80077e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80077ec:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80077ee:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80077f2:	f004 fa07 	bl	800bc04 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80077f6:	6820      	ldr	r0, [r4, #0]
 80077f8:	6943      	ldr	r3, [r0, #20]
 80077fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077fe:	6143      	str	r3, [r0, #20]
 8007800:	e686      	b.n	8007510 <HAL_PCD_IRQHandler+0xdc>
        HAL_PCD_SuspendCallback(hpcd);
 8007802:	4620      	mov	r0, r4
 8007804:	f005 fa98 	bl	800cd38 <HAL_PCD_SuspendCallback>
 8007808:	e67b      	b.n	8007502 <HAL_PCD_IRQHandler+0xce>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800780a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800780e:	f043 030b 	orr.w	r3, r3, #11
 8007812:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007816:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007818:	f043 030b 	orr.w	r3, r3, #11
 800781c:	646b      	str	r3, [r5, #68]	; 0x44
 800781e:	e7de      	b.n	80077de <HAL_PCD_IRQHandler+0x3aa>
        hpcd->LPM_State = LPM_L0;
 8007820:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007822:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8007824:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007828:	f000 fac8 	bl	8007dbc <HAL_PCDEx_LPM_Callback>
 800782c:	e6b6      	b.n	800759c <HAL_PCD_IRQHandler+0x168>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800782e:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007832:	2208      	movs	r2, #8
 8007834:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8007838:	4630      	mov	r0, r6
 800783a:	f004 f8e3 	bl	800ba04 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800783e:	f3c5 130a 	ubfx	r3, r5, #4, #11
 8007842:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 8007846:	6820      	ldr	r0, [r4, #0]
 8007848:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800784c:	440b      	add	r3, r1
 800784e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8007852:	e621      	b.n	8007498 <HAL_PCD_IRQHandler+0x64>
 8007854:	9e02      	ldr	r6, [sp, #8]
 8007856:	e62a      	b.n	80074ae <HAL_PCD_IRQHandler+0x7a>
 8007858:	e9dd 6b03 	ldrd	r6, fp, [sp, #12]
 800785c:	e62d      	b.n	80074ba <HAL_PCD_IRQHandler+0x86>
  if (ep->xfer_count > ep->xfer_len)
 800785e:	e9d5 1314 	ldrd	r1, r3, [r5, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007862:	f8d4 8000 	ldr.w	r8, [r4]
  if (ep->xfer_count > ep->xfer_len)
 8007866:	428b      	cmp	r3, r1
 8007868:	f63f aeb0 	bhi.w	80075cc <HAL_PCD_IRQHandler+0x198>
  len = ep->xfer_len - ep->xfer_count;
 800786c:	1aca      	subs	r2, r1, r3
  len32b = (len + 3U) / 4U;
 800786e:	6c68      	ldr	r0, [r5, #68]	; 0x44
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007870:	f508 6b10 	add.w	fp, r8, #2304	; 0x900
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007874:	f8cd 8014 	str.w	r8, [sp, #20]
  len32b = (len + 3U) / 4U;
 8007878:	4282      	cmp	r2, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800787a:	eb0b 1b4a 	add.w	fp, fp, sl, lsl #5
  len32b = (len + 3U) / 4U;
 800787e:	bf28      	it	cs
 8007880:	4602      	movcs	r2, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007882:	f8db 0018 	ldr.w	r0, [fp, #24]
  len32b = (len + 3U) / 4U;
 8007886:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007888:	b280      	uxth	r0, r0
 800788a:	ebb0 0f92 	cmp.w	r0, r2, lsr #2
 800788e:	d21b      	bcs.n	80078c8 <HAL_PCD_IRQHandler+0x494>
 8007890:	e022      	b.n	80078d8 <HAL_PCD_IRQHandler+0x4a4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007892:	b1f9      	cbz	r1, 80078d4 <HAL_PCD_IRQHandler+0x4a0>
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007894:	f894 c010 	ldrb.w	ip, [r4, #16]
 8007898:	e9d5 3111 	ldrd	r3, r1, [r5, #68]	; 0x44
 800789c:	f8cd c000 	str.w	ip, [sp]
 80078a0:	429e      	cmp	r6, r3
 80078a2:	bf28      	it	cs
 80078a4:	461e      	movcs	r6, r3
 80078a6:	b2b3      	uxth	r3, r6
 80078a8:	f004 f896 	bl	800b9d8 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80078ac:	f8db 2018 	ldr.w	r2, [fp, #24]
    ep->xfer_buff  += len;
 80078b0:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 80078b2:	1cf0      	adds	r0, r6, #3
    ep->xfer_count += len;
 80078b4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80078b6:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 80078b8:	4431      	add	r1, r6
    ep->xfer_count += len;
 80078ba:	4433      	add	r3, r6
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80078bc:	ebb2 0f90 	cmp.w	r2, r0, lsr #2
    ep->xfer_buff  += len;
 80078c0:	64a9      	str	r1, [r5, #72]	; 0x48
    ep->xfer_count += len;
 80078c2:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80078c4:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80078c6:	d305      	bcc.n	80078d4 <HAL_PCD_IRQHandler+0x4a0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80078c8:	4299      	cmp	r1, r3
    len = ep->xfer_len - ep->xfer_count;
 80078ca:	eba1 0603 	sub.w	r6, r1, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80078ce:	463a      	mov	r2, r7
 80078d0:	4640      	mov	r0, r8
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80078d2:	d8de      	bhi.n	8007892 <HAL_PCD_IRQHandler+0x45e>
 80078d4:	f8d4 8000 	ldr.w	r8, [r4]
  if (ep->xfer_len <= ep->xfer_count)
 80078d8:	4299      	cmp	r1, r3
 80078da:	f63f ae77 	bhi.w	80075cc <HAL_PCD_IRQHandler+0x198>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80078de:	9b05      	ldr	r3, [sp, #20]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80078e0:	f00a 010f 	and.w	r1, sl, #15
 80078e4:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80078e6:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80078ea:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80078ee:	ea22 0201 	bic.w	r2, r2, r1
 80078f2:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 80078f6:	e669      	b.n	80075cc <HAL_PCD_IRQHandler+0x198>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80078f8:	eb0a 1247 	add.w	r2, sl, r7, lsl #5
 80078fc:	2108      	movs	r1, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80078fe:	eb00 1347 	add.w	r3, r0, r7, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007902:	6091      	str	r1, [r2, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007904:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800790a:	485e      	ldr	r0, [pc, #376]	; (8007a84 <HAL_PCD_IRQHandler+0x650>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800790c:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800790e:	4282      	cmp	r2, r0
 8007910:	d963      	bls.n	80079da <HAL_PCD_IRQHandler+0x5a6>
 8007912:	0409      	lsls	r1, r1, #16
 8007914:	d502      	bpl.n	800791c <HAL_PCD_IRQHandler+0x4e8>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007916:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800791a:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800791c:	4620      	mov	r0, r4
 800791e:	f005 f9d7 	bl	800ccd0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007922:	6921      	ldr	r1, [r4, #16]
 8007924:	2901      	cmp	r1, #1
 8007926:	d07b      	beq.n	8007a20 <HAL_PCD_IRQHandler+0x5ec>
 8007928:	6820      	ldr	r0, [r4, #0]
 800792a:	e6c5      	b.n	80076b8 <HAL_PCD_IRQHandler+0x284>
  if (hpcd->Init.dma_enable == 1U)
 800792c:	f8d4 c010 	ldr.w	ip, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007930:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007934:	2301      	movs	r3, #1
 8007936:	eb0a 1147 	add.w	r1, sl, r7, lsl #5
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800793a:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 800793e:	f1bc 0f01 	cmp.w	ip, #1
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007942:	608b      	str	r3, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007944:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007946:	f8d2 e008 	ldr.w	lr, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800794a:	d04b      	beq.n	80079e4 <HAL_PCD_IRQHandler+0x5b0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800794c:	494e      	ldr	r1, [pc, #312]	; (8007a88 <HAL_PCD_IRQHandler+0x654>)
 800794e:	428b      	cmp	r3, r1
 8007950:	d057      	beq.n	8007a02 <HAL_PCD_IRQHandler+0x5ce>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007952:	b927      	cbnz	r7, 800795e <HAL_PCD_IRQHandler+0x52a>
 8007954:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8007958:	2a00      	cmp	r2, #0
 800795a:	f000 808c 	beq.w	8007a76 <HAL_PCD_IRQHandler+0x642>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800795e:	4620      	mov	r0, r4
 8007960:	4631      	mov	r1, r6
 8007962:	f005 f9bb 	bl	800ccdc <HAL_PCD_DataOutStageCallback>
 8007966:	6820      	ldr	r0, [r4, #0]
 8007968:	e6a2      	b.n	80076b0 <HAL_PCD_IRQHandler+0x27c>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800796a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800796e:	421d      	tst	r5, r3
 8007970:	f43f ad92 	beq.w	8007498 <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007974:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8007978:	f3c5 120a 	ubfx	r2, r5, #4, #11
 800797c:	4630      	mov	r0, r6
 800797e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8007982:	4615      	mov	r5, r2
 8007984:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8007988:	f004 f83c 	bl	800ba04 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800798c:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007990:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007994:	442a      	add	r2, r5
 8007996:	6820      	ldr	r0, [r4, #0]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007998:	441d      	add	r5, r3
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800799a:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800799e:	f8c7 5214 	str.w	r5, [r7, #532]	; 0x214
 80079a2:	e579      	b.n	8007498 <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 80079a4:	4620      	mov	r0, r4
 80079a6:	f005 f9c7 	bl	800cd38 <HAL_PCD_SuspendCallback>
 80079aa:	e5e3      	b.n	8007574 <HAL_PCD_IRQHandler+0x140>
        HAL_PCD_DisconnectCallback(hpcd);
 80079ac:	4620      	mov	r0, r4
 80079ae:	f005 f9eb 	bl	800cd88 <HAL_PCD_DisconnectCallback>
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	e5d5      	b.n	8007562 <HAL_PCD_IRQHandler+0x12e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80079b6:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 80079ba:	4413      	add	r3, r2
 80079bc:	64ab      	str	r3, [r5, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80079be:	f1ba 0f00 	cmp.w	sl, #0
 80079c2:	f47f ae2d 	bne.w	8007620 <HAL_PCD_IRQHandler+0x1ec>
 80079c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f47f ae29 	bne.w	8007620 <HAL_PCD_IRQHandler+0x1ec>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80079ce:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80079d2:	6820      	ldr	r0, [r4, #0]
 80079d4:	f004 f916 	bl	800bc04 <USB_EP0_OutStart>
 80079d8:	e622      	b.n	8007620 <HAL_PCD_IRQHandler+0x1ec>
  HAL_PCD_SetupStageCallback(hpcd);
 80079da:	4620      	mov	r0, r4
 80079dc:	f005 f978 	bl	800ccd0 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80079e0:	6820      	ldr	r0, [r4, #0]
 80079e2:	e669      	b.n	80076b8 <HAL_PCD_IRQHandler+0x284>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80079e4:	f01e 0f08 	tst.w	lr, #8
 80079e8:	d014      	beq.n	8007a14 <HAL_PCD_IRQHandler+0x5e0>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079ea:	4926      	ldr	r1, [pc, #152]	; (8007a84 <HAL_PCD_IRQHandler+0x650>)
 80079ec:	428b      	cmp	r3, r1
 80079ee:	f67f ae5f 	bls.w	80076b0 <HAL_PCD_IRQHandler+0x27c>
 80079f2:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 80079f6:	f43f ae5b 	beq.w	80076b0 <HAL_PCD_IRQHandler+0x27c>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80079fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079fe:	6093      	str	r3, [r2, #8]
 8007a00:	e656      	b.n	80076b0 <HAL_PCD_IRQHandler+0x27c>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007a02:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 8007a06:	d1f8      	bne.n	80079fa <HAL_PCD_IRQHandler+0x5c6>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a08:	f01e 0f20 	tst.w	lr, #32
 8007a0c:	d0a7      	beq.n	800795e <HAL_PCD_IRQHandler+0x52a>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a0e:	2120      	movs	r1, #32
 8007a10:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a12:	e7a4      	b.n	800795e <HAL_PCD_IRQHandler+0x52a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007a14:	f01e 0f20 	tst.w	lr, #32
 8007a18:	d008      	beq.n	8007a2c <HAL_PCD_IRQHandler+0x5f8>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a1a:	2320      	movs	r3, #32
 8007a1c:	6093      	str	r3, [r2, #8]
 8007a1e:	e647      	b.n	80076b0 <HAL_PCD_IRQHandler+0x27c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a20:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007a24:	6820      	ldr	r0, [r4, #0]
 8007a26:	f004 f8ed 	bl	800bc04 <USB_EP0_OutStart>
 8007a2a:	e77d      	b.n	8007928 <HAL_PCD_IRQHandler+0x4f4>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007a2c:	f01e 0f28 	tst.w	lr, #40	; 0x28
 8007a30:	f47f ae3e 	bne.w	80076b0 <HAL_PCD_IRQHandler+0x27c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a34:	4913      	ldr	r1, [pc, #76]	; (8007a84 <HAL_PCD_IRQHandler+0x650>)
 8007a36:	428b      	cmp	r3, r1
 8007a38:	d902      	bls.n	8007a40 <HAL_PCD_IRQHandler+0x60c>
 8007a3a:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 8007a3e:	d1dc      	bne.n	80079fa <HAL_PCD_IRQHandler+0x5c6>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a40:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 8007a42:	f8d9 3000 	ldr.w	r3, [r9]
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007a46:	f8d9 1004 	ldr.w	r1, [r9, #4]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a4a:	f3c2 0212 	ubfx	r2, r2, #0, #19
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007a4e:	4419      	add	r1, r3
          hpcd->OUT_ep[epnum].maxpacket -
 8007a50:	1a9a      	subs	r2, r3, r2
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007a52:	f8c9 1004 	str.w	r1, [r9, #4]
        hpcd->OUT_ep[epnum].xfer_count =
 8007a56:	f8c9 2010 	str.w	r2, [r9, #16]
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007a5a:	2f00      	cmp	r7, #0
 8007a5c:	f47f af7f 	bne.w	800795e <HAL_PCD_IRQHandler+0x52a>
 8007a60:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8007a64:	2a00      	cmp	r2, #0
 8007a66:	f47f af7a 	bne.w	800795e <HAL_PCD_IRQHandler+0x52a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a6a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007a6e:	2101      	movs	r1, #1
 8007a70:	f004 f8c8 	bl	800bc04 <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a74:	e773      	b.n	800795e <HAL_PCD_IRQHandler+0x52a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007a76:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007a7a:	4639      	mov	r1, r7
 8007a7c:	f004 f8c2 	bl	800bc04 <USB_EP0_OutStart>
 8007a80:	e76d      	b.n	800795e <HAL_PCD_IRQHandler+0x52a>
 8007a82:	bf00      	nop
 8007a84:	4f54300a 	.word	0x4f54300a
 8007a88:	4f54310a 	.word	0x4f54310a

08007a8c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8007a8c:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8007a90:	2a01      	cmp	r2, #1
 8007a92:	d00d      	beq.n	8007ab0 <HAL_PCD_SetAddress+0x24>
 8007a94:	2201      	movs	r2, #1
{
 8007a96:	b510      	push	{r4, lr}
 8007a98:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 8007a9a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007a9e:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8007aa0:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007aa4:	f004 f832 	bl	800bb0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007aae:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007ab0:	2002      	movs	r0, #2
}
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_PCD_EP_Open>:
{
 8007ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab6:	f001 050f 	and.w	r5, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8007aba:	0609      	lsls	r1, r1, #24
{
 8007abc:	4606      	mov	r6, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007abe:	f04f 041c 	mov.w	r4, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8007ac2:	d422      	bmi.n	8007b0a <HAL_PCD_EP_Open+0x56>
    ep->is_in = 0U;
 8007ac4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ac8:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 0U;
 8007acc:	2700      	movs	r7, #0
 8007ace:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ad2:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
    ep->is_in = 0U;
 8007ad6:	f880 71fd 	strb.w	r7, [r0, #509]	; 0x1fd
  if (ep->is_in != 0U)
 8007ada:	7848      	ldrb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007adc:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 8007ade:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8007ae0:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8007ae2:	b100      	cbz	r0, 8007ae6 <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8007ae4:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d101      	bne.n	8007aee <HAL_PCD_EP_Open+0x3a>
    ep->data_pid_start = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8007aee:	f896 33bc 	ldrb.w	r3, [r6, #956]	; 0x3bc
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d015      	beq.n	8007b22 <HAL_PCD_EP_Open+0x6e>
 8007af6:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007af8:	6830      	ldr	r0, [r6, #0]
  __HAL_LOCK(hpcd);
 8007afa:	f886 33bc 	strb.w	r3, [r6, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007afe:	f003 fd05 	bl	800b50c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b02:	2000      	movs	r0, #0
 8007b04:	f886 03bc 	strb.w	r0, [r6, #956]	; 0x3bc
}
 8007b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 8007b0a:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 8007b0e:	2701      	movs	r7, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b10:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 1U;
 8007b14:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b18:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 8007b1c:	f880 703d 	strb.w	r7, [r0, #61]	; 0x3d
 8007b20:	e7db      	b.n	8007ada <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8007b22:	2002      	movs	r0, #2
}
 8007b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b26:	bf00      	nop

08007b28 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8007b28:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007b2c:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b30:	f04f 011c 	mov.w	r1, #28
{
 8007b34:	b510      	push	{r4, lr}
 8007b36:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8007b38:	d119      	bne.n	8007b6e <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b3a:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8007b3e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007b42:	2000      	movs	r0, #0
 8007b44:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b48:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007b4c:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007b50:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8007b52:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d018      	beq.n	8007b8c <HAL_PCD_EP_Close+0x64>
 8007b5a:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007b5c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007b5e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007b62:	f003 fd1b 	bl	800b59c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b66:	2000      	movs	r0, #0
 8007b68:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007b6c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b6e:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8007b72:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007b76:	2001      	movs	r0, #1
 8007b78:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b7c:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8007b7e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007b82:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8007b84:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d1e6      	bne.n	8007b5a <HAL_PCD_EP_Close+0x32>
 8007b8c:	2002      	movs	r0, #2
}
 8007b8e:	bd10      	pop	{r4, pc}

08007b90 <HAL_PCD_EP_Receive>:
{
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_count = 0U;
 8007b96:	2600      	movs	r6, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b98:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8007b9a:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b9e:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8007ba2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ba6:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 8007baa:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8007bae:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 8007bb2:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  ep->xfer_count = 0U;
 8007bb6:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8007bba:	f884 61fd 	strb.w	r6, [r4, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 8007bbe:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007bc0:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8007bc2:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8007bc4:	bf08      	it	eq
 8007bc6:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007bca:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007bcc:	b91d      	cbnz	r5, 8007bd6 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007bce:	f003 fe5b 	bl	800b888 <USB_EP0StartXfer>
}
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007bd6:	f003 fd43 	bl	800b660 <USB_EPStartXfer>
}
 8007bda:	2000      	movs	r0, #0
 8007bdc:	bd70      	pop	{r4, r5, r6, pc}
 8007bde:	bf00      	nop

08007be0 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007be0:	f001 010f 	and.w	r1, r1, #15
 8007be4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007be8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8007bec:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop

08007bf4 <HAL_PCD_EP_Transmit>:
{
 8007bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf6:	f001 050f 	and.w	r5, r1, #15
  ep->is_in = 1U;
 8007bfa:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 8007bfc:	2700      	movs	r7, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bfe:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8007c00:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c04:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8007c08:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c0c:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 8007c0e:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8007c10:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c12:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8007c16:	6567      	str	r7, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8007c18:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8007c1c:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c1e:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8007c20:	42b3      	cmp	r3, r6
    ep->dma_addr = (uint32_t)pBuf;
 8007c22:	bf08      	it	eq
 8007c24:	64e2      	streq	r2, [r4, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c26:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007c28:	b91d      	cbnz	r5, 8007c32 <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c2a:	f003 fe2d 	bl	800b888 <USB_EP0StartXfer>
}
 8007c2e:	2000      	movs	r0, #0
 8007c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c32:	f003 fd15 	bl	800b660 <USB_EPStartXfer>
}
 8007c36:	2000      	movs	r0, #0
 8007c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c3a:	bf00      	nop

08007c3c <HAL_PCD_EP_SetStall>:
{
 8007c3c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007c3e:	6843      	ldr	r3, [r0, #4]
 8007c40:	f001 050f 	and.w	r5, r1, #15
 8007c44:	429d      	cmp	r5, r3
 8007c46:	d833      	bhi.n	8007cb0 <HAL_PCD_EP_SetStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 8007c48:	060b      	lsls	r3, r1, #24
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	d41c      	bmi.n	8007c88 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 8007c4e:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8007c52:	201c      	movs	r0, #28
    ep->is_in = 0U;
 8007c54:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8007c56:	fb00 4101 	mla	r1, r0, r1, r4
    ep->is_in = 0U;
 8007c5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8007c5e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007c62:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8007c66:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c68:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8007c6a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8007c6c:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d01b      	beq.n	8007cac <HAL_PCD_EP_SetStall+0x70>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007c74:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007c76:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007c7a:	f003 fee7 	bl	800ba4c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007c7e:	b1cd      	cbz	r5, 8007cb4 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8007c80:	2000      	movs	r0, #0
 8007c82:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007c86:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c88:	211c      	movs	r1, #28
    ep->is_in = 1U;
 8007c8a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8007c8e:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c90:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8007c94:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c98:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8007c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8007c9e:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ca0:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8007ca2:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8007ca4:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d1e3      	bne.n	8007c74 <HAL_PCD_EP_SetStall+0x38>
 8007cac:	2002      	movs	r0, #2
}
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007cb0:	2001      	movs	r0, #1
}
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007cb4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007cb8:	7c21      	ldrb	r1, [r4, #16]
 8007cba:	6820      	ldr	r0, [r4, #0]
 8007cbc:	f003 ffa2 	bl	800bc04 <USB_EP0_OutStart>
 8007cc0:	e7de      	b.n	8007c80 <HAL_PCD_EP_SetStall+0x44>
 8007cc2:	bf00      	nop

08007cc4 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007cc4:	6842      	ldr	r2, [r0, #4]
{
 8007cc6:	b538      	push	{r3, r4, r5, lr}
 8007cc8:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d832      	bhi.n	8007d36 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8007cd0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007cd4:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cd6:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 8007cda:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8007cde:	d119      	bne.n	8007d14 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ce0:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 8007cea:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007cec:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007cf0:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8007cf4:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8007cf6:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8007cf8:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d018      	beq.n	8007d32 <HAL_PCD_EP_ClrStall+0x6e>
 8007d00:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007d02:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007d04:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007d08:	f003 fed4 	bl	800bab4 <USB_EPClearStall>
  return HAL_OK;
 8007d0c:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8007d0e:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d14:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8007d18:	2001      	movs	r0, #1
 8007d1a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 8007d1e:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d20:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8007d22:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d26:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8007d28:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8007d2a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d1e6      	bne.n	8007d00 <HAL_PCD_EP_ClrStall+0x3c>
 8007d32:	2002      	movs	r0, #2
}
 8007d34:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007d36:	2001      	movs	r0, #1
}
 8007d38:	bd38      	pop	{r3, r4, r5, pc}
 8007d3a:	bf00      	nop

08007d3c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007d3c:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007d3e:	6805      	ldr	r5, [r0, #0]
 8007d40:	6a6b      	ldr	r3, [r5, #36]	; 0x24

  if (fifo == 0U)
 8007d42:	b929      	cbnz	r1, 8007d50 <HAL_PCDEx_SetTxFiFo+0x14>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007d44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8007d48:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007d4a:	62ab      	str	r3, [r5, #40]	; 0x28
}
 8007d4c:	bc30      	pop	{r4, r5}
 8007d4e:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007d50:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8007d52:	1e4c      	subs	r4, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007d54:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007d58:	d00b      	beq.n	8007d72 <HAL_PCDEx_SetTxFiFo+0x36>
 8007d5a:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007d5c:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 8007d60:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007d62:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8007d66:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007d68:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8007d6a:	42a3      	cmp	r3, r4
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007d6c:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007d70:	d3f4      	bcc.n	8007d5c <HAL_PCDEx_SetTxFiFo+0x20>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007d72:	3440      	adds	r4, #64	; 0x40
 8007d74:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8007d78:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8007d7c:	6060      	str	r0, [r4, #4]
}
 8007d7e:	2000      	movs	r0, #0
 8007d80:	bc30      	pop	{r4, r5}
 8007d82:	4770      	bx	lr

08007d84 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007d84:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 8007d86:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6259      	str	r1, [r3, #36]	; 0x24
}
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop

08007d90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007d90:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007d92:	4909      	ldr	r1, [pc, #36]	; (8007db8 <HAL_PCDEx_ActivateLPM+0x28>)
{
 8007d94:	b430      	push	{r4, r5}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d96:	681a      	ldr	r2, [r3, #0]
  hpcd->LPM_State = LPM_L0;
 8007d98:	2400      	movs	r4, #0
  hpcd->lpm_active = 1U;
 8007d9a:	2501      	movs	r5, #1
  hpcd->LPM_State = LPM_L0;
 8007d9c:	f883 43f4 	strb.w	r4, [r3, #1012]	; 0x3f4

  return HAL_OK;
}
 8007da0:	4620      	mov	r0, r4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007da2:	6994      	ldr	r4, [r2, #24]
  hpcd->lpm_active = 1U;
 8007da4:	f8c3 53fc 	str.w	r5, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007da8:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 8007dac:	6194      	str	r4, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007dae:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007db0:	4319      	orrs	r1, r3
}
 8007db2:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007db4:	6551      	str	r1, [r2, #84]	; 0x54
}
 8007db6:	4770      	bx	lr
 8007db8:	10000003 	.word	0x10000003

08007dbc <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop

08007dc0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007dc0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007dc2:	4b11      	ldr	r3, [pc, #68]	; (8007e08 <HAL_PWREx_ConfigSupply+0x48>)
 8007dc4:	68da      	ldr	r2, [r3, #12]
 8007dc6:	0752      	lsls	r2, r2, #29
 8007dc8:	d406      	bmi.n	8007dd8 <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007dd0:	1a18      	subs	r0, r3, r0
 8007dd2:	bf18      	it	ne
 8007dd4:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8007dd6:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007dd8:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007dda:	461d      	mov	r5, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007ddc:	f022 0207 	bic.w	r2, r2, #7
 8007de0:	4310      	orrs	r0, r2
 8007de2:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 8007de4:	f7fc fa1e 	bl	8004224 <HAL_GetTick>
 8007de8:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007dea:	e005      	b.n	8007df8 <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007dec:	f7fc fa1a 	bl	8004224 <HAL_GetTick>
 8007df0:	1b00      	subs	r0, r0, r4
 8007df2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007df6:	d804      	bhi.n	8007e02 <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007df8:	686b      	ldr	r3, [r5, #4]
 8007dfa:	049b      	lsls	r3, r3, #18
 8007dfc:	d5f6      	bpl.n	8007dec <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 8007dfe:	2000      	movs	r0, #0
}
 8007e00:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007e02:	2001      	movs	r0, #1
}
 8007e04:	bd38      	pop	{r3, r4, r5, pc}
 8007e06:	bf00      	nop
 8007e08:	58024800 	.word	0x58024800

08007e0c <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007e0c:	4a02      	ldr	r2, [pc, #8]	; (8007e18 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8007e0e:	68d3      	ldr	r3, [r2, #12]
 8007e10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e14:	60d3      	str	r3, [r2, #12]
}
 8007e16:	4770      	bx	lr
 8007e18:	58024800 	.word	0x58024800

08007e1c <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e1c:	4b3b      	ldr	r3, [pc, #236]	; (8007f0c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8007e1e:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007e22:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007e24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8007e26:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007e2a:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007e2e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    if (pllm != 0U)
 8007e30:	d038      	beq.n	8007ea4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007e32:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007e36:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e3a:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007e3e:	fb01 f105 	mul.w	r1, r1, r5
 8007e42:	2a01      	cmp	r2, #1
 8007e44:	ee07 1a90 	vmov	s15, r1
 8007e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8007e4c:	d002      	beq.n	8007e54 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8007e4e:	2a02      	cmp	r2, #2
 8007e50:	d04e      	beq.n	8007ef0 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8007e52:	b34a      	cbz	r2, 8007ea8 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e54:	ee07 0a90 	vmov	s15, r0
 8007e58:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8007f10 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8007e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e62:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8007e66:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8007f14 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8007e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e6e:	ee06 3a90 	vmov	s13, r3
 8007e72:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8007e76:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007e7a:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007e7e:	eee7 6a25 	vfma.f32	s13, s14, s11
 8007e82:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007e86:	4b21      	ldr	r3, [pc, #132]	; (8007f0c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8007e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007e8e:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007e90:	ee07 3a90 	vmov	s15, r3
 8007e94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ea0:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8007ea4:	bc30      	pop	{r4, r5}
 8007ea6:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	0692      	lsls	r2, r2, #26
 8007eac:	d527      	bpl.n	8007efe <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007eae:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007eb0:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007eb4:	4a18      	ldr	r2, [pc, #96]	; (8007f18 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007eb6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007eba:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ec4:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ec6:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8007f14 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8007eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ece:	ee06 2a10 	vmov	s12, r2
 8007ed2:	ee06 3a90 	vmov	s13, r3
 8007ed6:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8007eda:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007ede:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8007ee2:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007ee6:	eee7 6a05 	vfma.f32	s13, s14, s10
 8007eea:	ee66 6a26 	vmul.f32	s13, s12, s13
 8007eee:	e7ca      	b.n	8007e86 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ef0:	ee07 0a90 	vmov	s15, r0
 8007ef4:	eddf 6a09 	vldr	s13, [pc, #36]	; 8007f1c <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8007ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007efc:	e7b0      	b.n	8007e60 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007efe:	ee07 0a90 	vmov	s15, r0
 8007f02:	eddf 6a07 	vldr	s13, [pc, #28]	; 8007f20 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8007f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f0a:	e7a9      	b.n	8007e60 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8007f0c:	58024400 	.word	0x58024400
 8007f10:	4a742400 	.word	0x4a742400
 8007f14:	39000000 	.word	0x39000000
 8007f18:	03d09000 	.word	0x03d09000
 8007f1c:	4bbebc20 	.word	0x4bbebc20
 8007f20:	4c742400 	.word	0x4c742400

08007f24 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8007f24:	2800      	cmp	r0, #0
 8007f26:	f000 81f7 	beq.w	8008318 <HAL_RCC_OscConfig+0x3f4>
{
 8007f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f2c:	6803      	ldr	r3, [r0, #0]
 8007f2e:	4604      	mov	r4, r0
 8007f30:	07d9      	lsls	r1, r3, #31
 8007f32:	d52e      	bpl.n	8007f92 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f34:	49b4      	ldr	r1, [pc, #720]	; (8008208 <HAL_RCC_OscConfig+0x2e4>)
 8007f36:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f38:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f3a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007f3e:	2a10      	cmp	r2, #16
 8007f40:	f000 812c 	beq.w	800819c <HAL_RCC_OscConfig+0x278>
 8007f44:	2a18      	cmp	r2, #24
 8007f46:	f000 8124 	beq.w	8008192 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f4a:	6863      	ldr	r3, [r4, #4]
 8007f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f50:	f000 8167 	beq.w	8008222 <HAL_RCC_OscConfig+0x2fe>
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 817f 	beq.w	8008258 <HAL_RCC_OscConfig+0x334>
 8007f5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f5e:	4baa      	ldr	r3, [pc, #680]	; (8008208 <HAL_RCC_OscConfig+0x2e4>)
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	f000 8278 	beq.w	8008456 <HAL_RCC_OscConfig+0x532>
 8007f66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007f6a:	601a      	str	r2, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007f72:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007f74:	f7fc f956 	bl	8004224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f78:	4ea3      	ldr	r6, [pc, #652]	; (8008208 <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 8007f7a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f7c:	e005      	b.n	8007f8a <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f7e:	f7fc f951 	bl	8004224 <HAL_GetTick>
 8007f82:	1b40      	subs	r0, r0, r5
 8007f84:	2864      	cmp	r0, #100	; 0x64
 8007f86:	f200 8165 	bhi.w	8008254 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f8a:	6833      	ldr	r3, [r6, #0]
 8007f8c:	039f      	lsls	r7, r3, #14
 8007f8e:	d5f6      	bpl.n	8007f7e <HAL_RCC_OscConfig+0x5a>
 8007f90:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f92:	0799      	lsls	r1, r3, #30
 8007f94:	d521      	bpl.n	8007fda <HAL_RCC_OscConfig+0xb6>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f96:	4a9c      	ldr	r2, [pc, #624]	; (8008208 <HAL_RCC_OscConfig+0x2e4>)
 8007f98:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f9a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f9c:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8007fa0:	f040 80a8 	bne.w	80080f4 <HAL_RCC_OscConfig+0x1d0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fa4:	4b98      	ldr	r3, [pc, #608]	; (8008208 <HAL_RCC_OscConfig+0x2e4>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	075b      	lsls	r3, r3, #29
 8007faa:	d503      	bpl.n	8007fb4 <HAL_RCC_OscConfig+0x90>
 8007fac:	68e3      	ldr	r3, [r4, #12]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f000 80ed 	beq.w	800818e <HAL_RCC_OscConfig+0x26a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fb4:	f7fc f94e 	bl	8004254 <HAL_GetREVID>
 8007fb8:	f241 0303 	movw	r3, #4099	; 0x1003
 8007fbc:	4298      	cmp	r0, r3
 8007fbe:	f200 8189 	bhi.w	80082d4 <HAL_RCC_OscConfig+0x3b0>
 8007fc2:	6922      	ldr	r2, [r4, #16]
 8007fc4:	2a40      	cmp	r2, #64	; 0x40
 8007fc6:	f000 824e 	beq.w	8008466 <HAL_RCC_OscConfig+0x542>
 8007fca:	498f      	ldr	r1, [pc, #572]	; (8008208 <HAL_RCC_OscConfig+0x2e4>)
 8007fcc:	684b      	ldr	r3, [r1, #4]
 8007fce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007fd2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007fd6:	604b      	str	r3, [r1, #4]
 8007fd8:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007fda:	06d9      	lsls	r1, r3, #27
 8007fdc:	d456      	bmi.n	800808c <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fde:	071d      	lsls	r5, r3, #28
 8007fe0:	d517      	bpl.n	8008012 <HAL_RCC_OscConfig+0xee>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007fe2:	6963      	ldr	r3, [r4, #20]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 80b4 	beq.w	8008152 <HAL_RCC_OscConfig+0x22e>
      __HAL_RCC_LSI_ENABLE();
 8007fea:	4b87      	ldr	r3, [pc, #540]	; (8008208 <HAL_RCC_OscConfig+0x2e4>)
 8007fec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007fee:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8007ff0:	f042 0201 	orr.w	r2, r2, #1
 8007ff4:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8007ff6:	f7fc f915 	bl	8004224 <HAL_GetTick>
 8007ffa:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ffc:	e005      	b.n	800800a <HAL_RCC_OscConfig+0xe6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ffe:	f7fc f911 	bl	8004224 <HAL_GetTick>
 8008002:	1b40      	subs	r0, r0, r5
 8008004:	2802      	cmp	r0, #2
 8008006:	f200 8125 	bhi.w	8008254 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800800a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800800c:	0798      	lsls	r0, r3, #30
 800800e:	d5f6      	bpl.n	8007ffe <HAL_RCC_OscConfig+0xda>
 8008010:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008012:	069a      	lsls	r2, r3, #26
 8008014:	d517      	bpl.n	8008046 <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008016:	69a3      	ldr	r3, [r4, #24]
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 8134 	beq.w	8008286 <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
 800801e:	4b7a      	ldr	r3, [pc, #488]	; (8008208 <HAL_RCC_OscConfig+0x2e4>)
 8008020:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008022:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8008024:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008028:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800802a:	f7fc f8fb 	bl	8004224 <HAL_GetTick>
 800802e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008030:	e005      	b.n	800803e <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008032:	f7fc f8f7 	bl	8004224 <HAL_GetTick>
 8008036:	1b40      	subs	r0, r0, r5
 8008038:	2802      	cmp	r0, #2
 800803a:	f200 810b 	bhi.w	8008254 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800803e:	6833      	ldr	r3, [r6, #0]
 8008040:	049f      	lsls	r7, r3, #18
 8008042:	d5f6      	bpl.n	8008032 <HAL_RCC_OscConfig+0x10e>
 8008044:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008046:	0759      	lsls	r1, r3, #29
 8008048:	f100 80b2 	bmi.w	80081b0 <HAL_RCC_OscConfig+0x28c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800804c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800804e:	b1d8      	cbz	r0, 8008088 <HAL_RCC_OscConfig+0x164>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008050:	4b6d      	ldr	r3, [pc, #436]	; (8008208 <HAL_RCC_OscConfig+0x2e4>)
 8008052:	691a      	ldr	r2, [r3, #16]
 8008054:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008058:	2a18      	cmp	r2, #24
 800805a:	f000 81ce 	beq.w	80083fa <HAL_RCC_OscConfig+0x4d6>
        __HAL_RCC_PLL_DISABLE();
 800805e:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008060:	2802      	cmp	r0, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008062:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8008064:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008068:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800806a:	f000 8161 	beq.w	8008330 <HAL_RCC_OscConfig+0x40c>
        tickstart = HAL_GetTick();
 800806e:	f7fc f8d9 	bl	8004224 <HAL_GetTick>
 8008072:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008074:	e005      	b.n	8008082 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008076:	f7fc f8d5 	bl	8004224 <HAL_GetTick>
 800807a:	1b00      	subs	r0, r0, r4
 800807c:	2802      	cmp	r0, #2
 800807e:	f200 80e9 	bhi.w	8008254 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008082:	682b      	ldr	r3, [r5, #0]
 8008084:	019b      	lsls	r3, r3, #6
 8008086:	d4f6      	bmi.n	8008076 <HAL_RCC_OscConfig+0x152>
  return HAL_OK;
 8008088:	2000      	movs	r0, #0
}
 800808a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800808c:	4a5e      	ldr	r2, [pc, #376]	; (8008208 <HAL_RCC_OscConfig+0x2e4>)
 800808e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008090:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008092:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008096:	2b08      	cmp	r3, #8
 8008098:	d072      	beq.n	8008180 <HAL_RCC_OscConfig+0x25c>
 800809a:	2b18      	cmp	r3, #24
 800809c:	d06c      	beq.n	8008178 <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800809e:	69e3      	ldr	r3, [r4, #28]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 8103 	beq.w	80082ac <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 80080a6:	4b58      	ldr	r3, [pc, #352]	; (8008208 <HAL_RCC_OscConfig+0x2e4>)
 80080a8:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080aa:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 80080ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80080b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80080b2:	f7fc f8b7 	bl	8004224 <HAL_GetTick>
 80080b6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080b8:	e005      	b.n	80080c6 <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80080ba:	f7fc f8b3 	bl	8004224 <HAL_GetTick>
 80080be:	1b40      	subs	r0, r0, r5
 80080c0:	2802      	cmp	r0, #2
 80080c2:	f200 80c7 	bhi.w	8008254 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080c6:	6833      	ldr	r3, [r6, #0]
 80080c8:	05db      	lsls	r3, r3, #23
 80080ca:	d5f6      	bpl.n	80080ba <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080cc:	f7fc f8c2 	bl	8004254 <HAL_GetREVID>
 80080d0:	f241 0303 	movw	r3, #4099	; 0x1003
 80080d4:	4298      	cmp	r0, r3
 80080d6:	f200 81e9 	bhi.w	80084ac <HAL_RCC_OscConfig+0x588>
 80080da:	6a22      	ldr	r2, [r4, #32]
 80080dc:	6873      	ldr	r3, [r6, #4]
 80080de:	2a20      	cmp	r2, #32
 80080e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80080e4:	bf0c      	ite	eq
 80080e6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80080ea:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80080ee:	6073      	str	r3, [r6, #4]
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	e774      	b.n	8007fde <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80080f4:	2b18      	cmp	r3, #24
 80080f6:	f000 810b 	beq.w	8008310 <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080fa:	68e2      	ldr	r2, [r4, #12]
 80080fc:	2a00      	cmp	r2, #0
 80080fe:	f000 80f3 	beq.w	80082e8 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008102:	4941      	ldr	r1, [pc, #260]	; (8008208 <HAL_RCC_OscConfig+0x2e4>)
 8008104:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008106:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008108:	f023 0319 	bic.w	r3, r3, #25
 800810c:	4313      	orrs	r3, r2
 800810e:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8008110:	f7fc f888 	bl	8004224 <HAL_GetTick>
 8008114:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008116:	e005      	b.n	8008124 <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008118:	f7fc f884 	bl	8004224 <HAL_GetTick>
 800811c:	1b40      	subs	r0, r0, r5
 800811e:	2802      	cmp	r0, #2
 8008120:	f200 8098 	bhi.w	8008254 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008124:	6833      	ldr	r3, [r6, #0]
 8008126:	075f      	lsls	r7, r3, #29
 8008128:	d5f6      	bpl.n	8008118 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800812a:	f7fc f893 	bl	8004254 <HAL_GetREVID>
 800812e:	f241 0303 	movw	r3, #4099	; 0x1003
 8008132:	4298      	cmp	r0, r3
 8008134:	f200 81c3 	bhi.w	80084be <HAL_RCC_OscConfig+0x59a>
 8008138:	6922      	ldr	r2, [r4, #16]
 800813a:	6873      	ldr	r3, [r6, #4]
 800813c:	2a40      	cmp	r2, #64	; 0x40
 800813e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008142:	bf0c      	ite	eq
 8008144:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8008148:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800814c:	6073      	str	r3, [r6, #4]
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	e743      	b.n	8007fda <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 8008152:	4b2d      	ldr	r3, [pc, #180]	; (8008208 <HAL_RCC_OscConfig+0x2e4>)
 8008154:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008156:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8008158:	f022 0201 	bic.w	r2, r2, #1
 800815c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800815e:	f7fc f861 	bl	8004224 <HAL_GetTick>
 8008162:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008164:	e004      	b.n	8008170 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008166:	f7fc f85d 	bl	8004224 <HAL_GetTick>
 800816a:	1b40      	subs	r0, r0, r5
 800816c:	2802      	cmp	r0, #2
 800816e:	d871      	bhi.n	8008254 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008170:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8008172:	0799      	lsls	r1, r3, #30
 8008174:	d4f7      	bmi.n	8008166 <HAL_RCC_OscConfig+0x242>
 8008176:	e74b      	b.n	8008010 <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008178:	f002 0203 	and.w	r2, r2, #3
 800817c:	2a01      	cmp	r2, #1
 800817e:	d18e      	bne.n	800809e <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008180:	4b21      	ldr	r3, [pc, #132]	; (8008208 <HAL_RCC_OscConfig+0x2e4>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	05da      	lsls	r2, r3, #23
 8008186:	d552      	bpl.n	800822e <HAL_RCC_OscConfig+0x30a>
 8008188:	69e3      	ldr	r3, [r4, #28]
 800818a:	2b80      	cmp	r3, #128	; 0x80
 800818c:	d04f      	beq.n	800822e <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 800818e:	2001      	movs	r0, #1
}
 8008190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008192:	f001 0103 	and.w	r1, r1, #3
 8008196:	2902      	cmp	r1, #2
 8008198:	f47f aed7 	bne.w	8007f4a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800819c:	4a1a      	ldr	r2, [pc, #104]	; (8008208 <HAL_RCC_OscConfig+0x2e4>)
 800819e:	6812      	ldr	r2, [r2, #0]
 80081a0:	0392      	lsls	r2, r2, #14
 80081a2:	f57f aef6 	bpl.w	8007f92 <HAL_RCC_OscConfig+0x6e>
 80081a6:	6862      	ldr	r2, [r4, #4]
 80081a8:	2a00      	cmp	r2, #0
 80081aa:	f47f aef2 	bne.w	8007f92 <HAL_RCC_OscConfig+0x6e>
 80081ae:	e7ee      	b.n	800818e <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 80081b0:	4b16      	ldr	r3, [pc, #88]	; (800820c <HAL_RCC_OscConfig+0x2e8>)
 80081b2:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081b4:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 80081b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081ba:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80081bc:	f7fc f832 	bl	8004224 <HAL_GetTick>
 80081c0:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081c2:	e004      	b.n	80081ce <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80081c4:	f7fc f82e 	bl	8004224 <HAL_GetTick>
 80081c8:	1b40      	subs	r0, r0, r5
 80081ca:	2864      	cmp	r0, #100	; 0x64
 80081cc:	d842      	bhi.n	8008254 <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081ce:	6833      	ldr	r3, [r6, #0]
 80081d0:	05da      	lsls	r2, r3, #23
 80081d2:	d5f7      	bpl.n	80081c4 <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081d4:	68a3      	ldr	r3, [r4, #8]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	f000 817a 	beq.w	80084d0 <HAL_RCC_OscConfig+0x5ac>
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 814b 	beq.w	8008478 <HAL_RCC_OscConfig+0x554>
 80081e2:	2b05      	cmp	r3, #5
 80081e4:	4b08      	ldr	r3, [pc, #32]	; (8008208 <HAL_RCC_OscConfig+0x2e4>)
 80081e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081e8:	f000 8187 	beq.w	80084fa <HAL_RCC_OscConfig+0x5d6>
 80081ec:	f022 0201 	bic.w	r2, r2, #1
 80081f0:	671a      	str	r2, [r3, #112]	; 0x70
 80081f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081f4:	f022 0204 	bic.w	r2, r2, #4
 80081f8:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80081fa:	f7fc f813 	bl	8004224 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081fe:	4e02      	ldr	r6, [pc, #8]	; (8008208 <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008200:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008204:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008206:	e008      	b.n	800821a <HAL_RCC_OscConfig+0x2f6>
 8008208:	58024400 	.word	0x58024400
 800820c:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008210:	f7fc f808 	bl	8004224 <HAL_GetTick>
 8008214:	1b40      	subs	r0, r0, r5
 8008216:	42b8      	cmp	r0, r7
 8008218:	d81c      	bhi.n	8008254 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800821a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800821c:	079b      	lsls	r3, r3, #30
 800821e:	d5f7      	bpl.n	8008210 <HAL_RCC_OscConfig+0x2ec>
 8008220:	e714      	b.n	800804c <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008222:	4aae      	ldr	r2, [pc, #696]	; (80084dc <HAL_RCC_OscConfig+0x5b8>)
 8008224:	6813      	ldr	r3, [r2, #0]
 8008226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800822a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800822c:	e6a2      	b.n	8007f74 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800822e:	f7fc f811 	bl	8004254 <HAL_GetREVID>
 8008232:	f241 0303 	movw	r3, #4099	; 0x1003
 8008236:	4298      	cmp	r0, r3
 8008238:	d870      	bhi.n	800831c <HAL_RCC_OscConfig+0x3f8>
 800823a:	6a22      	ldr	r2, [r4, #32]
 800823c:	2a20      	cmp	r2, #32
 800823e:	f000 8153 	beq.w	80084e8 <HAL_RCC_OscConfig+0x5c4>
 8008242:	49a6      	ldr	r1, [pc, #664]	; (80084dc <HAL_RCC_OscConfig+0x5b8>)
 8008244:	684b      	ldr	r3, [r1, #4]
 8008246:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800824a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800824e:	604b      	str	r3, [r1, #4]
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	e6c4      	b.n	8007fde <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8008254:	2003      	movs	r0, #3
}
 8008256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008258:	4ba0      	ldr	r3, [pc, #640]	; (80084dc <HAL_RCC_OscConfig+0x5b8>)
 800825a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800825c:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800825e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800826a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800826c:	f7fb ffda 	bl	8004224 <HAL_GetTick>
 8008270:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008272:	e004      	b.n	800827e <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008274:	f7fb ffd6 	bl	8004224 <HAL_GetTick>
 8008278:	1b40      	subs	r0, r0, r5
 800827a:	2864      	cmp	r0, #100	; 0x64
 800827c:	d8ea      	bhi.n	8008254 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800827e:	6833      	ldr	r3, [r6, #0]
 8008280:	0398      	lsls	r0, r3, #14
 8008282:	d4f7      	bmi.n	8008274 <HAL_RCC_OscConfig+0x350>
 8008284:	e684      	b.n	8007f90 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 8008286:	4b95      	ldr	r3, [pc, #596]	; (80084dc <HAL_RCC_OscConfig+0x5b8>)
 8008288:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800828a:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 800828c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008290:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008292:	f7fb ffc7 	bl	8004224 <HAL_GetTick>
 8008296:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008298:	e004      	b.n	80082a4 <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800829a:	f7fb ffc3 	bl	8004224 <HAL_GetTick>
 800829e:	1b40      	subs	r0, r0, r5
 80082a0:	2802      	cmp	r0, #2
 80082a2:	d8d7      	bhi.n	8008254 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80082a4:	6833      	ldr	r3, [r6, #0]
 80082a6:	0498      	lsls	r0, r3, #18
 80082a8:	d4f7      	bmi.n	800829a <HAL_RCC_OscConfig+0x376>
 80082aa:	e6cb      	b.n	8008044 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 80082ac:	4b8b      	ldr	r3, [pc, #556]	; (80084dc <HAL_RCC_OscConfig+0x5b8>)
 80082ae:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80082b0:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 80082b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80082b8:	f7fb ffb4 	bl	8004224 <HAL_GetTick>
 80082bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80082be:	e004      	b.n	80082ca <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80082c0:	f7fb ffb0 	bl	8004224 <HAL_GetTick>
 80082c4:	1b40      	subs	r0, r0, r5
 80082c6:	2802      	cmp	r0, #2
 80082c8:	d8c4      	bhi.n	8008254 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80082ca:	6833      	ldr	r3, [r6, #0]
 80082cc:	05df      	lsls	r7, r3, #23
 80082ce:	d4f7      	bmi.n	80082c0 <HAL_RCC_OscConfig+0x39c>
 80082d0:	6823      	ldr	r3, [r4, #0]
 80082d2:	e684      	b.n	8007fde <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082d4:	4a81      	ldr	r2, [pc, #516]	; (80084dc <HAL_RCC_OscConfig+0x5b8>)
 80082d6:	6921      	ldr	r1, [r4, #16]
 80082d8:	6853      	ldr	r3, [r2, #4]
 80082da:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80082de:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80082e2:	6053      	str	r3, [r2, #4]
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	e678      	b.n	8007fda <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 80082e8:	4b7c      	ldr	r3, [pc, #496]	; (80084dc <HAL_RCC_OscConfig+0x5b8>)
 80082ea:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082ec:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 80082ee:	f022 0201 	bic.w	r2, r2, #1
 80082f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80082f4:	f7fb ff96 	bl	8004224 <HAL_GetTick>
 80082f8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082fa:	e004      	b.n	8008306 <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082fc:	f7fb ff92 	bl	8004224 <HAL_GetTick>
 8008300:	1b40      	subs	r0, r0, r5
 8008302:	2802      	cmp	r0, #2
 8008304:	d8a6      	bhi.n	8008254 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008306:	6833      	ldr	r3, [r6, #0]
 8008308:	0758      	lsls	r0, r3, #29
 800830a:	d4f7      	bmi.n	80082fc <HAL_RCC_OscConfig+0x3d8>
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	e664      	b.n	8007fda <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008310:	0792      	lsls	r2, r2, #30
 8008312:	f47f aef2 	bne.w	80080fa <HAL_RCC_OscConfig+0x1d6>
 8008316:	e645      	b.n	8007fa4 <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8008318:	2001      	movs	r0, #1
}
 800831a:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800831c:	4a6f      	ldr	r2, [pc, #444]	; (80084dc <HAL_RCC_OscConfig+0x5b8>)
 800831e:	6a21      	ldr	r1, [r4, #32]
 8008320:	68d3      	ldr	r3, [r2, #12]
 8008322:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008326:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800832a:	60d3      	str	r3, [r2, #12]
 800832c:	6823      	ldr	r3, [r4, #0]
 800832e:	e656      	b.n	8007fde <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8008330:	f7fb ff78 	bl	8004224 <HAL_GetTick>
 8008334:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008336:	e004      	b.n	8008342 <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008338:	f7fb ff74 	bl	8004224 <HAL_GetTick>
 800833c:	1b80      	subs	r0, r0, r6
 800833e:	2802      	cmp	r0, #2
 8008340:	d888      	bhi.n	8008254 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008342:	682b      	ldr	r3, [r5, #0]
 8008344:	0199      	lsls	r1, r3, #6
 8008346:	d4f7      	bmi.n	8008338 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008348:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800834a:	4b65      	ldr	r3, [pc, #404]	; (80084e0 <HAL_RCC_OscConfig+0x5bc>)
 800834c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800834e:	4013      	ands	r3, r2
 8008350:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008352:	4964      	ldr	r1, [pc, #400]	; (80084e4 <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008354:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008356:	4e61      	ldr	r6, [pc, #388]	; (80084dc <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008358:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800835c:	62ab      	str	r3, [r5, #40]	; 0x28
 800835e:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8008360:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8008364:	3f01      	subs	r7, #1
 8008366:	1e50      	subs	r0, r2, #1
 8008368:	3b01      	subs	r3, #1
 800836a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800836c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8008370:	025b      	lsls	r3, r3, #9
 8008372:	0400      	lsls	r0, r0, #16
 8008374:	3a01      	subs	r2, #1
 8008376:	b29b      	uxth	r3, r3
 8008378:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800837c:	0612      	lsls	r2, r2, #24
 800837e:	4303      	orrs	r3, r0
 8008380:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008384:	433b      	orrs	r3, r7
 8008386:	4313      	orrs	r3, r2
 8008388:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800838a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800838c:	f023 0301 	bic.w	r3, r3, #1
 8008390:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008392:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8008394:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008396:	4011      	ands	r1, r2
 8008398:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800839c:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800839e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80083a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80083a2:	f023 030c 	bic.w	r3, r3, #12
 80083a6:	4313      	orrs	r3, r2
 80083a8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80083aa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80083ac:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80083ae:	f023 0302 	bic.w	r3, r3, #2
 80083b2:	4313      	orrs	r3, r2
 80083b4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80083b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80083b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083bc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80083c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083c4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80083c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80083c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083cc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80083ce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80083d0:	f043 0301 	orr.w	r3, r3, #1
 80083d4:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80083d6:	682b      	ldr	r3, [r5, #0]
 80083d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083dc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80083de:	f7fb ff21 	bl	8004224 <HAL_GetTick>
 80083e2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083e4:	e005      	b.n	80083f2 <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083e6:	f7fb ff1d 	bl	8004224 <HAL_GetTick>
 80083ea:	1b00      	subs	r0, r0, r4
 80083ec:	2802      	cmp	r0, #2
 80083ee:	f63f af31 	bhi.w	8008254 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083f2:	6833      	ldr	r3, [r6, #0]
 80083f4:	019a      	lsls	r2, r3, #6
 80083f6:	d5f6      	bpl.n	80083e6 <HAL_RCC_OscConfig+0x4c2>
 80083f8:	e646      	b.n	8008088 <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083fa:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80083fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80083fe:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008400:	f43f ae43 	beq.w	800808a <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008404:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008408:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800840a:	428b      	cmp	r3, r1
 800840c:	f47f aebf 	bne.w	800818e <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008410:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008414:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008416:	429a      	cmp	r2, r3
 8008418:	f47f aeb9 	bne.w	800818e <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800841c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800841e:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8008422:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008424:	429a      	cmp	r2, r3
 8008426:	f47f aeb2 	bne.w	800818e <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800842a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800842c:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8008430:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008432:	429a      	cmp	r2, r3
 8008434:	f47f aeab 	bne.w	800818e <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008438:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800843a:	f3c5 4206 	ubfx	r2, r5, #16, #7
 800843e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008440:	429a      	cmp	r2, r3
 8008442:	f47f aea4 	bne.w	800818e <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008446:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008448:	f3c5 6506 	ubfx	r5, r5, #24, #7
 800844c:	3801      	subs	r0, #1
  return HAL_OK;
 800844e:	1a28      	subs	r0, r5, r0
 8008450:	bf18      	it	ne
 8008452:	2001      	movne	r0, #1
}
 8008454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008456:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	e586      	b.n	8007f74 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008466:	4a1d      	ldr	r2, [pc, #116]	; (80084dc <HAL_RCC_OscConfig+0x5b8>)
 8008468:	6853      	ldr	r3, [r2, #4]
 800846a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800846e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008472:	6053      	str	r3, [r2, #4]
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	e5b0      	b.n	8007fda <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008478:	4b18      	ldr	r3, [pc, #96]	; (80084dc <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800847a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800847e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008480:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008482:	f022 0201 	bic.w	r2, r2, #1
 8008486:	671a      	str	r2, [r3, #112]	; 0x70
 8008488:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800848a:	f022 0204 	bic.w	r2, r2, #4
 800848e:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008490:	f7fb fec8 	bl	8004224 <HAL_GetTick>
 8008494:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008496:	e005      	b.n	80084a4 <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008498:	f7fb fec4 	bl	8004224 <HAL_GetTick>
 800849c:	1b40      	subs	r0, r0, r5
 800849e:	42b8      	cmp	r0, r7
 80084a0:	f63f aed8 	bhi.w	8008254 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80084a4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80084a6:	0798      	lsls	r0, r3, #30
 80084a8:	d4f6      	bmi.n	8008498 <HAL_RCC_OscConfig+0x574>
 80084aa:	e5cf      	b.n	800804c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084ac:	68f3      	ldr	r3, [r6, #12]
 80084ae:	6a22      	ldr	r2, [r4, #32]
 80084b0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80084b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80084b8:	60f3      	str	r3, [r6, #12]
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	e58f      	b.n	8007fde <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084be:	6873      	ldr	r3, [r6, #4]
 80084c0:	6922      	ldr	r2, [r4, #16]
 80084c2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80084c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80084ca:	6073      	str	r3, [r6, #4]
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	e584      	b.n	8007fda <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084d0:	4a02      	ldr	r2, [pc, #8]	; (80084dc <HAL_RCC_OscConfig+0x5b8>)
 80084d2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80084d4:	f043 0301 	orr.w	r3, r3, #1
 80084d8:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084da:	e68e      	b.n	80081fa <HAL_RCC_OscConfig+0x2d6>
 80084dc:	58024400 	.word	0x58024400
 80084e0:	fffffc0c 	.word	0xfffffc0c
 80084e4:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084e8:	4a08      	ldr	r2, [pc, #32]	; (800850c <HAL_RCC_OscConfig+0x5e8>)
 80084ea:	6853      	ldr	r3, [r2, #4]
 80084ec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80084f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084f4:	6053      	str	r3, [r2, #4]
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	e571      	b.n	8007fde <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084fa:	f042 0204 	orr.w	r2, r2, #4
 80084fe:	671a      	str	r2, [r3, #112]	; 0x70
 8008500:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008502:	f042 0201 	orr.w	r2, r2, #1
 8008506:	671a      	str	r2, [r3, #112]	; 0x70
 8008508:	e677      	b.n	80081fa <HAL_RCC_OscConfig+0x2d6>
 800850a:	bf00      	nop
 800850c:	58024400 	.word	0x58024400

08008510 <HAL_RCC_MCOConfig>:
{
 8008510:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8008514:	460d      	mov	r5, r1
 8008516:	b088      	sub	sp, #32
 8008518:	4614      	mov	r4, r2
  if(RCC_MCOx == RCC_MCO1)
 800851a:	bb28      	cbnz	r0, 8008568 <HAL_RCC_MCOConfig+0x58>
    MCO1_CLK_ENABLE();
 800851c:	4e27      	ldr	r6, [pc, #156]	; (80085bc <HAL_RCC_MCOConfig+0xac>)
 800851e:	4603      	mov	r3, r0
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008520:	f44f 7880 	mov.w	r8, #256	; 0x100
 8008524:	f04f 0902 	mov.w	r9, #2
    MCO1_CLK_ENABLE();
 8008528:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800852c:	a902      	add	r1, sp, #8
 800852e:	4824      	ldr	r0, [pc, #144]	; (80085c0 <HAL_RCC_MCOConfig+0xb0>)
    MCO1_CLK_ENABLE();
 8008530:	f042 0201 	orr.w	r2, r2, #1
 8008534:	f8c6 20e0 	str.w	r2, [r6, #224]	; 0xe0
 8008538:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800853c:	9306      	str	r3, [sp, #24]
    MCO1_CLK_ENABLE();
 800853e:	f002 0201 	and.w	r2, r2, #1
 8008542:	9200      	str	r2, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008544:	2200      	movs	r2, #0
    MCO1_CLK_ENABLE();
 8008546:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008548:	2303      	movs	r3, #3
 800854a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800854e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008552:	f7fe fd0d 	bl	8006f70 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008556:	6932      	ldr	r2, [r6, #16]
 8008558:	f022 72fe 	bic.w	r2, r2, #33292288	; 0x1fc0000
 800855c:	432a      	orrs	r2, r5
 800855e:	4322      	orrs	r2, r4
 8008560:	6132      	str	r2, [r6, #16]
}
 8008562:	b008      	add	sp, #32
 8008564:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    MCO2_CLK_ENABLE();
 8008568:	4e14      	ldr	r6, [pc, #80]	; (80085bc <HAL_RCC_MCOConfig+0xac>)
    GPIO_InitStruct.Pin = MCO2_PIN;
 800856a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800856e:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008570:	2200      	movs	r2, #0
    MCO2_CLK_ENABLE();
 8008572:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008576:	f04f 0800 	mov.w	r8, #0
 800857a:	f04f 0903 	mov.w	r9, #3
    MCO2_CLK_ENABLE();
 800857e:	f043 0304 	orr.w	r3, r3, #4
 8008582:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8008586:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800858a:	9206      	str	r2, [sp, #24]
    MCO2_CLK_ENABLE();
 800858c:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008590:	e9cd 0102 	strd	r0, r1, [sp, #8]
    MCO2_CLK_ENABLE();
 8008594:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008596:	a902      	add	r1, sp, #8
 8008598:	480a      	ldr	r0, [pc, #40]	; (80085c4 <HAL_RCC_MCOConfig+0xb4>)
    MCO2_CLK_ENABLE();
 800859a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800859c:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80085a0:	f7fe fce6 	bl	8006f70 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80085a4:	6933      	ldr	r3, [r6, #16]
 80085a6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80085aa:	ea43 0105 	orr.w	r1, r3, r5
 80085ae:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 80085b2:	6131      	str	r1, [r6, #16]
}
 80085b4:	b008      	add	sp, #32
 80085b6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80085ba:	bf00      	nop
 80085bc:	58024400 	.word	0x58024400
 80085c0:	58020000 	.word	0x58020000
 80085c4:	58020800 	.word	0x58020800

080085c8 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085c8:	4a47      	ldr	r2, [pc, #284]	; (80086e8 <HAL_RCC_GetSysClockFreq+0x120>)
 80085ca:	6913      	ldr	r3, [r2, #16]
 80085cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085d0:	2b10      	cmp	r3, #16
 80085d2:	d004      	beq.n	80085de <HAL_RCC_GetSysClockFreq+0x16>
 80085d4:	2b18      	cmp	r3, #24
 80085d6:	d00d      	beq.n	80085f4 <HAL_RCC_GetSysClockFreq+0x2c>
 80085d8:	b11b      	cbz	r3, 80085e2 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 80085da:	4844      	ldr	r0, [pc, #272]	; (80086ec <HAL_RCC_GetSysClockFreq+0x124>)
 80085dc:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085de:	4844      	ldr	r0, [pc, #272]	; (80086f0 <HAL_RCC_GetSysClockFreq+0x128>)
 80085e0:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085e2:	6813      	ldr	r3, [r2, #0]
 80085e4:	0699      	lsls	r1, r3, #26
 80085e6:	d54a      	bpl.n	800867e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085e8:	6813      	ldr	r3, [r2, #0]
 80085ea:	4842      	ldr	r0, [pc, #264]	; (80086f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80085ec:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80085f0:	40d8      	lsrs	r0, r3
 80085f2:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085f4:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 80085f6:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80085f8:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80085fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    if (pllm != 0U)
 80085fc:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008600:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008604:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 8008606:	d038      	beq.n	800867a <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008608:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800860c:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008610:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008614:	fb01 f105 	mul.w	r1, r1, r5
 8008618:	2b01      	cmp	r3, #1
 800861a:	ee07 1a90 	vmov	s15, r1
 800861e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 8008622:	d002      	beq.n	800862a <HAL_RCC_GetSysClockFreq+0x62>
 8008624:	2b02      	cmp	r3, #2
 8008626:	d02c      	beq.n	8008682 <HAL_RCC_GetSysClockFreq+0xba>
 8008628:	b393      	cbz	r3, 8008690 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800862a:	ee07 0a90 	vmov	s15, r0
 800862e:	eddf 6a32 	vldr	s13, [pc, #200]	; 80086f8 <HAL_RCC_GetSysClockFreq+0x130>
 8008632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008636:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008638:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800863c:	eddf 5a2f 	vldr	s11, [pc, #188]	; 80086fc <HAL_RCC_GetSysClockFreq+0x134>
 8008640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008644:	ee06 3a90 	vmov	s13, r3
 8008648:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800864c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008650:	ee76 6a85 	vadd.f32	s13, s13, s10
 8008654:	eee7 6a25 	vfma.f32	s13, s14, s11
 8008658:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800865c:	4b22      	ldr	r3, [pc, #136]	; (80086e8 <HAL_RCC_GetSysClockFreq+0x120>)
 800865e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008660:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008664:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008666:	ee07 3a90 	vmov	s15, r3
 800866a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800866e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008676:	ee17 0a90 	vmov	r0, s15
}
 800867a:	bc30      	pop	{r4, r5}
 800867c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800867e:	481d      	ldr	r0, [pc, #116]	; (80086f4 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8008680:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008682:	ee07 0a90 	vmov	s15, r0
 8008686:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8008700 <HAL_RCC_GetSysClockFreq+0x138>
 800868a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800868e:	e7d2      	b.n	8008636 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008690:	6813      	ldr	r3, [r2, #0]
 8008692:	069b      	lsls	r3, r3, #26
 8008694:	d520      	bpl.n	80086d8 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008696:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008698:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800869c:	4915      	ldr	r1, [pc, #84]	; (80086f4 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800869e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086a2:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086ac:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086ae:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80086fc <HAL_RCC_GetSysClockFreq+0x134>
 80086b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b6:	ee06 1a10 	vmov	s12, r1
 80086ba:	ee06 3a90 	vmov	s13, r3
 80086be:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 80086c2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80086c6:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 80086ca:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80086ce:	eee7 6a05 	vfma.f32	s13, s14, s10
 80086d2:	ee66 6a26 	vmul.f32	s13, s12, s13
 80086d6:	e7c1      	b.n	800865c <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086d8:	ee07 0a90 	vmov	s15, r0
 80086dc:	eddf 6a09 	vldr	s13, [pc, #36]	; 8008704 <HAL_RCC_GetSysClockFreq+0x13c>
 80086e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086e4:	e7a7      	b.n	8008636 <HAL_RCC_GetSysClockFreq+0x6e>
 80086e6:	bf00      	nop
 80086e8:	58024400 	.word	0x58024400
 80086ec:	003d0900 	.word	0x003d0900
 80086f0:	017d7840 	.word	0x017d7840
 80086f4:	03d09000 	.word	0x03d09000
 80086f8:	4a742400 	.word	0x4a742400
 80086fc:	39000000 	.word	0x39000000
 8008700:	4bbebc20 	.word	0x4bbebc20
 8008704:	4c742400 	.word	0x4c742400

08008708 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8008708:	2800      	cmp	r0, #0
 800870a:	f000 810e 	beq.w	800892a <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800870e:	4a8d      	ldr	r2, [pc, #564]	; (8008944 <HAL_RCC_ClockConfig+0x23c>)
 8008710:	6813      	ldr	r3, [r2, #0]
 8008712:	f003 030f 	and.w	r3, r3, #15
 8008716:	428b      	cmp	r3, r1
{
 8008718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800871c:	4604      	mov	r4, r0
 800871e:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008720:	d20c      	bcs.n	800873c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008722:	6813      	ldr	r3, [r2, #0]
 8008724:	f023 030f 	bic.w	r3, r3, #15
 8008728:	430b      	orrs	r3, r1
 800872a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800872c:	6813      	ldr	r3, [r2, #0]
 800872e:	f003 030f 	and.w	r3, r3, #15
 8008732:	428b      	cmp	r3, r1
 8008734:	d002      	beq.n	800873c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8008736:	2001      	movs	r0, #1
}
 8008738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800873c:	6823      	ldr	r3, [r4, #0]
 800873e:	075f      	lsls	r7, r3, #29
 8008740:	d50b      	bpl.n	800875a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008742:	4981      	ldr	r1, [pc, #516]	; (8008948 <HAL_RCC_ClockConfig+0x240>)
 8008744:	6920      	ldr	r0, [r4, #16]
 8008746:	698a      	ldr	r2, [r1, #24]
 8008748:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800874c:	4290      	cmp	r0, r2
 800874e:	d904      	bls.n	800875a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008750:	698a      	ldr	r2, [r1, #24]
 8008752:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008756:	4302      	orrs	r2, r0
 8008758:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800875a:	071e      	lsls	r6, r3, #28
 800875c:	d50b      	bpl.n	8008776 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800875e:	497a      	ldr	r1, [pc, #488]	; (8008948 <HAL_RCC_ClockConfig+0x240>)
 8008760:	6960      	ldr	r0, [r4, #20]
 8008762:	69ca      	ldr	r2, [r1, #28]
 8008764:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008768:	4290      	cmp	r0, r2
 800876a:	d904      	bls.n	8008776 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800876c:	69ca      	ldr	r2, [r1, #28]
 800876e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008772:	4302      	orrs	r2, r0
 8008774:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008776:	06d8      	lsls	r0, r3, #27
 8008778:	d50b      	bpl.n	8008792 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800877a:	4973      	ldr	r1, [pc, #460]	; (8008948 <HAL_RCC_ClockConfig+0x240>)
 800877c:	69a0      	ldr	r0, [r4, #24]
 800877e:	69ca      	ldr	r2, [r1, #28]
 8008780:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008784:	4290      	cmp	r0, r2
 8008786:	d904      	bls.n	8008792 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008788:	69ca      	ldr	r2, [r1, #28]
 800878a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800878e:	4302      	orrs	r2, r0
 8008790:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008792:	0699      	lsls	r1, r3, #26
 8008794:	d50b      	bpl.n	80087ae <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008796:	496c      	ldr	r1, [pc, #432]	; (8008948 <HAL_RCC_ClockConfig+0x240>)
 8008798:	69e0      	ldr	r0, [r4, #28]
 800879a:	6a0a      	ldr	r2, [r1, #32]
 800879c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80087a0:	4290      	cmp	r0, r2
 80087a2:	d904      	bls.n	80087ae <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80087a4:	6a0a      	ldr	r2, [r1, #32]
 80087a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80087aa:	4302      	orrs	r2, r0
 80087ac:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087ae:	079a      	lsls	r2, r3, #30
 80087b0:	f140 80ad 	bpl.w	800890e <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80087b4:	4864      	ldr	r0, [pc, #400]	; (8008948 <HAL_RCC_ClockConfig+0x240>)
 80087b6:	68e1      	ldr	r1, [r4, #12]
 80087b8:	6982      	ldr	r2, [r0, #24]
 80087ba:	f002 020f 	and.w	r2, r2, #15
 80087be:	4291      	cmp	r1, r2
 80087c0:	d904      	bls.n	80087cc <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087c2:	6982      	ldr	r2, [r0, #24]
 80087c4:	f022 020f 	bic.w	r2, r2, #15
 80087c8:	430a      	orrs	r2, r1
 80087ca:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087cc:	07d8      	lsls	r0, r3, #31
 80087ce:	d531      	bpl.n	8008834 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80087d0:	4a5d      	ldr	r2, [pc, #372]	; (8008948 <HAL_RCC_ClockConfig+0x240>)
 80087d2:	68a1      	ldr	r1, [r4, #8]
 80087d4:	6993      	ldr	r3, [r2, #24]
 80087d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80087da:	430b      	orrs	r3, r1
 80087dc:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087de:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087e0:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087e2:	2902      	cmp	r1, #2
 80087e4:	f000 80a3 	beq.w	800892e <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087e8:	2903      	cmp	r1, #3
 80087ea:	f000 809a 	beq.w	8008922 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80087ee:	2901      	cmp	r1, #1
 80087f0:	f000 80a3 	beq.w	800893a <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087f4:	0758      	lsls	r0, r3, #29
 80087f6:	d59e      	bpl.n	8008736 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80087f8:	4a53      	ldr	r2, [pc, #332]	; (8008948 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087fa:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80087fe:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008800:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008802:	f023 0307 	bic.w	r3, r3, #7
 8008806:	430b      	orrs	r3, r1
 8008808:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 800880a:	f7fb fd0b 	bl	8004224 <HAL_GetTick>
 800880e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008810:	e005      	b.n	800881e <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008812:	f7fb fd07 	bl	8004224 <HAL_GetTick>
 8008816:	1b80      	subs	r0, r0, r6
 8008818:	4540      	cmp	r0, r8
 800881a:	f200 808c 	bhi.w	8008936 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	6862      	ldr	r2, [r4, #4]
 8008822:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008826:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800882a:	d1f2      	bne.n	8008812 <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	0799      	lsls	r1, r3, #30
 8008830:	d506      	bpl.n	8008840 <HAL_RCC_ClockConfig+0x138>
 8008832:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008834:	4844      	ldr	r0, [pc, #272]	; (8008948 <HAL_RCC_ClockConfig+0x240>)
 8008836:	6982      	ldr	r2, [r0, #24]
 8008838:	f002 020f 	and.w	r2, r2, #15
 800883c:	428a      	cmp	r2, r1
 800883e:	d86a      	bhi.n	8008916 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008840:	4940      	ldr	r1, [pc, #256]	; (8008944 <HAL_RCC_ClockConfig+0x23c>)
 8008842:	680a      	ldr	r2, [r1, #0]
 8008844:	f002 020f 	and.w	r2, r2, #15
 8008848:	42aa      	cmp	r2, r5
 800884a:	d90a      	bls.n	8008862 <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800884c:	680a      	ldr	r2, [r1, #0]
 800884e:	f022 020f 	bic.w	r2, r2, #15
 8008852:	432a      	orrs	r2, r5
 8008854:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008856:	680a      	ldr	r2, [r1, #0]
 8008858:	f002 020f 	and.w	r2, r2, #15
 800885c:	42aa      	cmp	r2, r5
 800885e:	f47f af6a 	bne.w	8008736 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008862:	075a      	lsls	r2, r3, #29
 8008864:	d50b      	bpl.n	800887e <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008866:	4938      	ldr	r1, [pc, #224]	; (8008948 <HAL_RCC_ClockConfig+0x240>)
 8008868:	6920      	ldr	r0, [r4, #16]
 800886a:	698a      	ldr	r2, [r1, #24]
 800886c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008870:	4290      	cmp	r0, r2
 8008872:	d204      	bcs.n	800887e <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008874:	698a      	ldr	r2, [r1, #24]
 8008876:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800887a:	4302      	orrs	r2, r0
 800887c:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800887e:	071f      	lsls	r7, r3, #28
 8008880:	d50b      	bpl.n	800889a <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008882:	4931      	ldr	r1, [pc, #196]	; (8008948 <HAL_RCC_ClockConfig+0x240>)
 8008884:	6960      	ldr	r0, [r4, #20]
 8008886:	69ca      	ldr	r2, [r1, #28]
 8008888:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800888c:	4290      	cmp	r0, r2
 800888e:	d204      	bcs.n	800889a <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008890:	69ca      	ldr	r2, [r1, #28]
 8008892:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008896:	4302      	orrs	r2, r0
 8008898:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800889a:	06de      	lsls	r6, r3, #27
 800889c:	d50b      	bpl.n	80088b6 <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800889e:	492a      	ldr	r1, [pc, #168]	; (8008948 <HAL_RCC_ClockConfig+0x240>)
 80088a0:	69a0      	ldr	r0, [r4, #24]
 80088a2:	69ca      	ldr	r2, [r1, #28]
 80088a4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80088a8:	4290      	cmp	r0, r2
 80088aa:	d204      	bcs.n	80088b6 <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088ac:	69ca      	ldr	r2, [r1, #28]
 80088ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80088b2:	4302      	orrs	r2, r0
 80088b4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088b6:	069d      	lsls	r5, r3, #26
 80088b8:	d50b      	bpl.n	80088d2 <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088ba:	4a23      	ldr	r2, [pc, #140]	; (8008948 <HAL_RCC_ClockConfig+0x240>)
 80088bc:	69e1      	ldr	r1, [r4, #28]
 80088be:	6a13      	ldr	r3, [r2, #32]
 80088c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088c4:	4299      	cmp	r1, r3
 80088c6:	d204      	bcs.n	80088d2 <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80088c8:	6a13      	ldr	r3, [r2, #32]
 80088ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ce:	430b      	orrs	r3, r1
 80088d0:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80088d2:	f7ff fe79 	bl	80085c8 <HAL_RCC_GetSysClockFreq>
 80088d6:	4b1c      	ldr	r3, [pc, #112]	; (8008948 <HAL_RCC_ClockConfig+0x240>)
 80088d8:	4602      	mov	r2, r0
 80088da:	481c      	ldr	r0, [pc, #112]	; (800894c <HAL_RCC_ClockConfig+0x244>)
 80088dc:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088de:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80088e0:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 80088e4:	4d1a      	ldr	r5, [pc, #104]	; (8008950 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	4c1a      	ldr	r4, [pc, #104]	; (8008954 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80088ec:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088ee:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80088f0:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 80088f4:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088f6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 80088fa:	4d17      	ldr	r5, [pc, #92]	; (8008958 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80088fc:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088fe:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8008902:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008904:	6023      	str	r3, [r4, #0]
}
 8008906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800890a:	f7fb bc29 	b.w	8004160 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800890e:	07da      	lsls	r2, r3, #31
 8008910:	f53f af5e 	bmi.w	80087d0 <HAL_RCC_ClockConfig+0xc8>
 8008914:	e794      	b.n	8008840 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008916:	6982      	ldr	r2, [r0, #24]
 8008918:	f022 020f 	bic.w	r2, r2, #15
 800891c:	4311      	orrs	r1, r2
 800891e:	6181      	str	r1, [r0, #24]
 8008920:	e78e      	b.n	8008840 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008922:	019f      	lsls	r7, r3, #6
 8008924:	f53f af68 	bmi.w	80087f8 <HAL_RCC_ClockConfig+0xf0>
 8008928:	e705      	b.n	8008736 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800892a:	2001      	movs	r0, #1
}
 800892c:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800892e:	039b      	lsls	r3, r3, #14
 8008930:	f53f af62 	bmi.w	80087f8 <HAL_RCC_ClockConfig+0xf0>
 8008934:	e6ff      	b.n	8008736 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8008936:	2003      	movs	r0, #3
 8008938:	e6fe      	b.n	8008738 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800893a:	05de      	lsls	r6, r3, #23
 800893c:	f53f af5c 	bmi.w	80087f8 <HAL_RCC_ClockConfig+0xf0>
 8008940:	e6f9      	b.n	8008736 <HAL_RCC_ClockConfig+0x2e>
 8008942:	bf00      	nop
 8008944:	52002000 	.word	0x52002000
 8008948:	58024400 	.word	0x58024400
 800894c:	08018270 	.word	0x08018270
 8008950:	2400028c 	.word	0x2400028c
 8008954:	24000284 	.word	0x24000284
 8008958:	24000280 	.word	0x24000280

0800895c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800895c:	4a18      	ldr	r2, [pc, #96]	; (80089c0 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800895e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008960:	6913      	ldr	r3, [r2, #16]
 8008962:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008966:	2b10      	cmp	r3, #16
 8008968:	d01a      	beq.n	80089a0 <HAL_RCC_GetHCLKFreq+0x44>
 800896a:	2b18      	cmp	r3, #24
 800896c:	d023      	beq.n	80089b6 <HAL_RCC_GetHCLKFreq+0x5a>
 800896e:	b1cb      	cbz	r3, 80089a4 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8008970:	4814      	ldr	r0, [pc, #80]	; (80089c4 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008972:	4b13      	ldr	r3, [pc, #76]	; (80089c0 <HAL_RCC_GetHCLKFreq+0x64>)
 8008974:	4914      	ldr	r1, [pc, #80]	; (80089c8 <HAL_RCC_GetHCLKFreq+0x6c>)
 8008976:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008978:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800897a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800897e:	4c13      	ldr	r4, [pc, #76]	; (80089cc <HAL_RCC_GetHCLKFreq+0x70>)
 8008980:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008984:	4d12      	ldr	r5, [pc, #72]	; (80089d0 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008986:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008988:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800898a:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800898e:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008992:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008996:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 800899a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800899c:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800899e:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089a0:	480c      	ldr	r0, [pc, #48]	; (80089d4 <HAL_RCC_GetHCLKFreq+0x78>)
 80089a2:	e7e6      	b.n	8008972 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089a4:	6813      	ldr	r3, [r2, #0]
 80089a6:	069b      	lsls	r3, r3, #26
 80089a8:	d508      	bpl.n	80089bc <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089aa:	6812      	ldr	r2, [r2, #0]
 80089ac:	480a      	ldr	r0, [pc, #40]	; (80089d8 <HAL_RCC_GetHCLKFreq+0x7c>)
 80089ae:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80089b2:	40d0      	lsrs	r0, r2
 80089b4:	e7dd      	b.n	8008972 <HAL_RCC_GetHCLKFreq+0x16>
 80089b6:	f7ff fa31 	bl	8007e1c <HAL_RCC_GetSysClockFreq.part.0>
 80089ba:	e7da      	b.n	8008972 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80089bc:	4806      	ldr	r0, [pc, #24]	; (80089d8 <HAL_RCC_GetHCLKFreq+0x7c>)
 80089be:	e7d8      	b.n	8008972 <HAL_RCC_GetHCLKFreq+0x16>
 80089c0:	58024400 	.word	0x58024400
 80089c4:	003d0900 	.word	0x003d0900
 80089c8:	08018270 	.word	0x08018270
 80089cc:	24000284 	.word	0x24000284
 80089d0:	24000280 	.word	0x24000280
 80089d4:	017d7840 	.word	0x017d7840
 80089d8:	03d09000 	.word	0x03d09000

080089dc <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089dc:	4a1c      	ldr	r2, [pc, #112]	; (8008a50 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089de:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089e0:	6913      	ldr	r3, [r2, #16]
 80089e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089e6:	2b10      	cmp	r3, #16
 80089e8:	d021      	beq.n	8008a2e <HAL_RCC_GetPCLK1Freq+0x52>
 80089ea:	2b18      	cmp	r3, #24
 80089ec:	d02a      	beq.n	8008a44 <HAL_RCC_GetPCLK1Freq+0x68>
 80089ee:	b303      	cbz	r3, 8008a32 <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 80089f0:	4818      	ldr	r0, [pc, #96]	; (8008a54 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089f2:	4a17      	ldr	r2, [pc, #92]	; (8008a50 <HAL_RCC_GetPCLK1Freq+0x74>)
 80089f4:	4918      	ldr	r1, [pc, #96]	; (8008a58 <HAL_RCC_GetPCLK1Freq+0x7c>)
 80089f6:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089f8:	6993      	ldr	r3, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089fa:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 80089fe:	4d17      	ldr	r5, [pc, #92]	; (8008a5c <HAL_RCC_GetPCLK1Freq+0x80>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a00:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a04:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a06:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a08:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a0c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a10:	40e0      	lsrs	r0, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a12:	4c13      	ldr	r4, [pc, #76]	; (8008a60 <HAL_RCC_GetPCLK1Freq+0x84>)
 8008a14:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8008a18:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a1a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008a1c:	69d2      	ldr	r2, [r2, #28]
 8008a1e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8008a22:	5c88      	ldrb	r0, [r1, r2]
 8008a24:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008a28:	fa23 f000 	lsr.w	r0, r3, r0
 8008a2c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a2e:	480d      	ldr	r0, [pc, #52]	; (8008a64 <HAL_RCC_GetPCLK1Freq+0x88>)
 8008a30:	e7df      	b.n	80089f2 <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a32:	6813      	ldr	r3, [r2, #0]
 8008a34:	069b      	lsls	r3, r3, #26
 8008a36:	d508      	bpl.n	8008a4a <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a38:	6813      	ldr	r3, [r2, #0]
 8008a3a:	480b      	ldr	r0, [pc, #44]	; (8008a68 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8008a3c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008a40:	40d8      	lsrs	r0, r3
 8008a42:	e7d6      	b.n	80089f2 <HAL_RCC_GetPCLK1Freq+0x16>
 8008a44:	f7ff f9ea 	bl	8007e1c <HAL_RCC_GetSysClockFreq.part.0>
 8008a48:	e7d3      	b.n	80089f2 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008a4a:	4807      	ldr	r0, [pc, #28]	; (8008a68 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8008a4c:	e7d1      	b.n	80089f2 <HAL_RCC_GetPCLK1Freq+0x16>
 8008a4e:	bf00      	nop
 8008a50:	58024400 	.word	0x58024400
 8008a54:	003d0900 	.word	0x003d0900
 8008a58:	08018270 	.word	0x08018270
 8008a5c:	24000280 	.word	0x24000280
 8008a60:	24000284 	.word	0x24000284
 8008a64:	017d7840 	.word	0x017d7840
 8008a68:	03d09000 	.word	0x03d09000

08008a6c <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a6c:	4a1c      	ldr	r2, [pc, #112]	; (8008ae0 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a6e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a70:	6913      	ldr	r3, [r2, #16]
 8008a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a76:	2b10      	cmp	r3, #16
 8008a78:	d021      	beq.n	8008abe <HAL_RCC_GetPCLK2Freq+0x52>
 8008a7a:	2b18      	cmp	r3, #24
 8008a7c:	d02a      	beq.n	8008ad4 <HAL_RCC_GetPCLK2Freq+0x68>
 8008a7e:	b303      	cbz	r3, 8008ac2 <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8008a80:	4818      	ldr	r0, [pc, #96]	; (8008ae4 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a82:	4a17      	ldr	r2, [pc, #92]	; (8008ae0 <HAL_RCC_GetPCLK2Freq+0x74>)
 8008a84:	4918      	ldr	r1, [pc, #96]	; (8008ae8 <HAL_RCC_GetPCLK2Freq+0x7c>)
 8008a86:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a88:	6993      	ldr	r3, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a8a:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 8008a8e:	4d17      	ldr	r5, [pc, #92]	; (8008aec <HAL_RCC_GetPCLK2Freq+0x80>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a90:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a94:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a96:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a98:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a9c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008aa0:	40e0      	lsrs	r0, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008aa2:	4c13      	ldr	r4, [pc, #76]	; (8008af0 <HAL_RCC_GetPCLK2Freq+0x84>)
 8008aa4:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8008aa8:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008aaa:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008aac:	69d2      	ldr	r2, [r2, #28]
 8008aae:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8008ab2:	5c88      	ldrb	r0, [r1, r2]
 8008ab4:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008ab8:	fa23 f000 	lsr.w	r0, r3, r0
 8008abc:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008abe:	480d      	ldr	r0, [pc, #52]	; (8008af4 <HAL_RCC_GetPCLK2Freq+0x88>)
 8008ac0:	e7df      	b.n	8008a82 <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ac2:	6813      	ldr	r3, [r2, #0]
 8008ac4:	069b      	lsls	r3, r3, #26
 8008ac6:	d508      	bpl.n	8008ada <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ac8:	6813      	ldr	r3, [r2, #0]
 8008aca:	480b      	ldr	r0, [pc, #44]	; (8008af8 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8008acc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008ad0:	40d8      	lsrs	r0, r3
 8008ad2:	e7d6      	b.n	8008a82 <HAL_RCC_GetPCLK2Freq+0x16>
 8008ad4:	f7ff f9a2 	bl	8007e1c <HAL_RCC_GetSysClockFreq.part.0>
 8008ad8:	e7d3      	b.n	8008a82 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ada:	4807      	ldr	r0, [pc, #28]	; (8008af8 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8008adc:	e7d1      	b.n	8008a82 <HAL_RCC_GetPCLK2Freq+0x16>
 8008ade:	bf00      	nop
 8008ae0:	58024400 	.word	0x58024400
 8008ae4:	003d0900 	.word	0x003d0900
 8008ae8:	08018270 	.word	0x08018270
 8008aec:	24000280 	.word	0x24000280
 8008af0:	24000284 	.word	0x24000284
 8008af4:	017d7840 	.word	0x017d7840
 8008af8:	03d09000 	.word	0x03d09000

08008afc <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008afc:	4a3b      	ldr	r2, [pc, #236]	; (8008bec <RCCEx_PLL2_Config+0xf0>)
{
 8008afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b00:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008b02:	f003 0303 	and.w	r3, r3, #3
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	d069      	beq.n	8008bde <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008b0a:	6813      	ldr	r3, [r2, #0]
 8008b0c:	4606      	mov	r6, r0
 8008b0e:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b10:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8008b12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b16:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008b18:	f7fb fb84 	bl	8004224 <HAL_GetTick>
 8008b1c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b1e:	e004      	b.n	8008b2a <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008b20:	f7fb fb80 	bl	8004224 <HAL_GetTick>
 8008b24:	1b43      	subs	r3, r0, r5
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d857      	bhi.n	8008bda <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	011a      	lsls	r2, r3, #4
 8008b2e:	d4f7      	bmi.n	8008b20 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b32:	6832      	ldr	r2, [r6, #0]
 8008b34:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b38:	492d      	ldr	r1, [pc, #180]	; (8008bf0 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b3a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008b3e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b40:	6875      	ldr	r5, [r6, #4]
 8008b42:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008b46:	3d01      	subs	r5, #1
 8008b48:	1e50      	subs	r0, r2, #1
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	6932      	ldr	r2, [r6, #16]
 8008b4e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8008b52:	025b      	lsls	r3, r3, #9
 8008b54:	0400      	lsls	r0, r0, #16
 8008b56:	3a01      	subs	r2, #1
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008b5e:	0612      	lsls	r2, r2, #24
 8008b60:	4303      	orrs	r3, r0
 8008b62:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008b66:	432b      	orrs	r3, r5
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008b6e:	6972      	ldr	r2, [r6, #20]
 8008b70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008b74:	4313      	orrs	r3, r2
 8008b76:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008b7a:	69b2      	ldr	r2, [r6, #24]
 8008b7c:	f023 0320 	bic.w	r3, r3, #32
 8008b80:	4313      	orrs	r3, r2
 8008b82:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008b86:	f023 0310 	bic.w	r3, r3, #16
 8008b8a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b8c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008b8e:	69f3      	ldr	r3, [r6, #28]
 8008b90:	4011      	ands	r1, r2
 8008b92:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008b96:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008b9a:	f043 0310 	orr.w	r3, r3, #16
 8008b9e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ba0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008ba2:	b1f7      	cbz	r7, 8008be2 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008ba4:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008ba6:	bf0c      	ite	eq
 8008ba8:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008bac:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8008bb0:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008bb2:	4b0e      	ldr	r3, [pc, #56]	; (8008bec <RCCEx_PLL2_Config+0xf0>)
 8008bb4:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bb6:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 8008bb8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008bbc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008bbe:	f7fb fb31 	bl	8004224 <HAL_GetTick>
 8008bc2:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bc4:	e004      	b.n	8008bd0 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008bc6:	f7fb fb2d 	bl	8004224 <HAL_GetTick>
 8008bca:	1b00      	subs	r0, r0, r4
 8008bcc:	2802      	cmp	r0, #2
 8008bce:	d804      	bhi.n	8008bda <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bd0:	682b      	ldr	r3, [r5, #0]
 8008bd2:	011b      	lsls	r3, r3, #4
 8008bd4:	d5f7      	bpl.n	8008bc6 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8008bd6:	2000      	movs	r0, #0
}
 8008bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008bda:	2003      	movs	r0, #3
}
 8008bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008bde:	2001      	movs	r0, #1
}
 8008be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008be2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008be6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008be8:	e7e3      	b.n	8008bb2 <RCCEx_PLL2_Config+0xb6>
 8008bea:	bf00      	nop
 8008bec:	58024400 	.word	0x58024400
 8008bf0:	ffff0007 	.word	0xffff0007

08008bf4 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bf4:	4a3b      	ldr	r2, [pc, #236]	; (8008ce4 <RCCEx_PLL3_Config+0xf0>)
{
 8008bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bf8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008bfa:	f003 0303 	and.w	r3, r3, #3
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d069      	beq.n	8008cd6 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c02:	6813      	ldr	r3, [r2, #0]
 8008c04:	4606      	mov	r6, r0
 8008c06:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c08:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8008c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c0e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008c10:	f7fb fb08 	bl	8004224 <HAL_GetTick>
 8008c14:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c16:	e004      	b.n	8008c22 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008c18:	f7fb fb04 	bl	8004224 <HAL_GetTick>
 8008c1c:	1b43      	subs	r3, r0, r5
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d857      	bhi.n	8008cd2 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	009a      	lsls	r2, r3, #2
 8008c26:	d4f7      	bmi.n	8008c18 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c2a:	6832      	ldr	r2, [r6, #0]
 8008c2c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c30:	492d      	ldr	r1, [pc, #180]	; (8008ce8 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c32:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008c36:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c38:	6875      	ldr	r5, [r6, #4]
 8008c3a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008c3e:	3d01      	subs	r5, #1
 8008c40:	1e50      	subs	r0, r2, #1
 8008c42:	3b01      	subs	r3, #1
 8008c44:	6932      	ldr	r2, [r6, #16]
 8008c46:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8008c4a:	025b      	lsls	r3, r3, #9
 8008c4c:	0400      	lsls	r0, r0, #16
 8008c4e:	3a01      	subs	r2, #1
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008c56:	0612      	lsls	r2, r2, #24
 8008c58:	4303      	orrs	r3, r0
 8008c5a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008c5e:	432b      	orrs	r3, r5
 8008c60:	4313      	orrs	r3, r2
 8008c62:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008c64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c66:	6972      	ldr	r2, [r6, #20]
 8008c68:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008c70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c72:	69b2      	ldr	r2, [r6, #24]
 8008c74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008c7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c82:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c84:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008c86:	69f3      	ldr	r3, [r6, #28]
 8008c88:	4011      	ands	r1, r2
 8008c8a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008c8e:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008c90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c96:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008c98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008c9a:	b1f7      	cbz	r7, 8008cda <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008c9c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008c9e:	bf0c      	ite	eq
 8008ca0:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008ca4:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8008ca8:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008caa:	4b0e      	ldr	r3, [pc, #56]	; (8008ce4 <RCCEx_PLL3_Config+0xf0>)
 8008cac:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cae:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 8008cb0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008cb4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008cb6:	f7fb fab5 	bl	8004224 <HAL_GetTick>
 8008cba:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cbc:	e004      	b.n	8008cc8 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008cbe:	f7fb fab1 	bl	8004224 <HAL_GetTick>
 8008cc2:	1b00      	subs	r0, r0, r4
 8008cc4:	2802      	cmp	r0, #2
 8008cc6:	d804      	bhi.n	8008cd2 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cc8:	682b      	ldr	r3, [r5, #0]
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	d5f7      	bpl.n	8008cbe <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8008cce:	2000      	movs	r0, #0
}
 8008cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008cd2:	2003      	movs	r0, #3
}
 8008cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008cd6:	2001      	movs	r0, #1
}
 8008cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008cda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008cde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ce0:	e7e3      	b.n	8008caa <RCCEx_PLL3_Config+0xb6>
 8008ce2:	bf00      	nop
 8008ce4:	58024400 	.word	0x58024400
 8008ce8:	ffff0007 	.word	0xffff0007

08008cec <HAL_RCCEx_PeriphCLKConfig>:
{
 8008cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008cf0:	6803      	ldr	r3, [r0, #0]
{
 8008cf2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008cf4:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8008cf8:	d01c      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008cfa:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8008cfc:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008d00:	f000 84ba 	beq.w	8009678 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008d04:	d823      	bhi.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008d06:	2a00      	cmp	r2, #0
 8008d08:	f000 83dc 	beq.w	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 8008d0c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008d10:	d120      	bne.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d12:	2102      	movs	r1, #2
 8008d14:	3004      	adds	r0, #4
 8008d16:	f7ff fef1 	bl	8008afc <RCCEx_PLL2_Config>
 8008d1a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008d1c:	2e00      	cmp	r6, #0
 8008d1e:	f040 849f 	bne.w	8009660 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8008d22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d24:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d26:	48ab      	ldr	r0, [pc, #684]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008d28:	2600      	movs	r6, #0
 8008d2a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8008d2c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8008d30:	430a      	orrs	r2, r1
 8008d32:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d34:	05dd      	lsls	r5, r3, #23
 8008d36:	d511      	bpl.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008d38:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008d3a:	2a04      	cmp	r2, #4
 8008d3c:	f200 851c 	bhi.w	8009778 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
 8008d40:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008d44:	0476046f 	.word	0x0476046f
 8008d48:	02d40486 	.word	0x02d40486
 8008d4c:	02d4      	.short	0x02d4
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008d4e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8008d52:	d0e8      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d54:	05dd      	lsls	r5, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008d56:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d5a:	d4ed      	bmi.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008d5c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008d5e:	0598      	lsls	r0, r3, #22
 8008d60:	d51b      	bpl.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008d62:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008d64:	2a80      	cmp	r2, #128	; 0x80
 8008d66:	f000 8453 	beq.w	8009610 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008d6a:	f200 80ec 	bhi.w	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008d6e:	2a00      	cmp	r2, #0
 8008d70:	f000 83a2 	beq.w	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8008d74:	2a40      	cmp	r2, #64	; 0x40
 8008d76:	f040 80ed 	bne.w	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x268>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	1d20      	adds	r0, r4, #4
 8008d7e:	f7ff febd 	bl	8008afc <RCCEx_PLL2_Config>
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008d86:	2d00      	cmp	r5, #0
 8008d88:	f040 8386 	bne.w	8009498 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008d8c:	4991      	ldr	r1, [pc, #580]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008d8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d90:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008d92:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8008d96:	4302      	orrs	r2, r0
 8008d98:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008d9a:	0559      	lsls	r1, r3, #21
 8008d9c:	d51f      	bpl.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008d9e:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8008da2:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8008da6:	f000 844a 	beq.w	800963e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008daa:	f200 80d6 	bhi.w	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008dae:	2a00      	cmp	r2, #0
 8008db0:	f000 837c 	beq.w	80094ac <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8008db4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008db8:	f040 80d7 	bne.w	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	1d20      	adds	r0, r4, #4
 8008dc0:	f7ff fe9c 	bl	8008afc <RCCEx_PLL2_Config>
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008dc8:	2d00      	cmp	r5, #0
 8008dca:	f040 8367 	bne.w	800949c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008dce:	4981      	ldr	r1, [pc, #516]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008dd0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8008dd4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008dd6:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8008dda:	4302      	orrs	r2, r0
 8008ddc:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008dde:	051a      	lsls	r2, r3, #20
 8008de0:	d51f      	bpl.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008de2:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8008de6:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8008dea:	f000 843c 	beq.w	8009666 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8008dee:	f200 80bf 	bhi.w	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8008df2:	2a00      	cmp	r2, #0
 8008df4:	f000 836c 	beq.w	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008df8:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008dfc:	f040 80c0 	bne.w	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x294>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e00:	2100      	movs	r1, #0
 8008e02:	1d20      	adds	r0, r4, #4
 8008e04:	f7ff fe7a 	bl	8008afc <RCCEx_PLL2_Config>
 8008e08:	6823      	ldr	r3, [r4, #0]
 8008e0a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008e0c:	2d00      	cmp	r5, #0
 8008e0e:	f040 833f 	bne.w	8009490 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008e12:	4970      	ldr	r1, [pc, #448]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008e14:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8008e18:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008e1a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8008e1e:	4302      	orrs	r2, r0
 8008e20:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008e22:	019f      	lsls	r7, r3, #6
 8008e24:	d518      	bpl.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 8008e26:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008e28:	2a20      	cmp	r2, #32
 8008e2a:	f000 8392 	beq.w	8009552 <HAL_RCCEx_PeriphCLKConfig+0x866>
 8008e2e:	f200 80aa 	bhi.w	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8008e32:	b13a      	cbz	r2, 8008e44 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8008e34:	2a10      	cmp	r2, #16
 8008e36:	f040 80a9 	bne.w	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e3a:	4966      	ldr	r1, [pc, #408]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008e3c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008e3e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008e42:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008e44:	2d00      	cmp	r5, #0
 8008e46:	f040 8366 	bne.w	8009516 <HAL_RCCEx_PeriphCLKConfig+0x82a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008e4a:	4962      	ldr	r1, [pc, #392]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008e4c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008e4e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8008e50:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008e54:	4302      	orrs	r2, r0
 8008e56:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008e58:	04d8      	lsls	r0, r3, #19
 8008e5a:	d51d      	bpl.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008e5c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008e5e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008e62:	f000 83cd 	beq.w	8009600 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8008e66:	f200 8094 	bhi.w	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008e6a:	2a00      	cmp	r2, #0
 8008e6c:	f000 8318 	beq.w	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 8008e70:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8008e74:	f040 8095 	bne.w	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e78:	2100      	movs	r1, #0
 8008e7a:	1d20      	adds	r0, r4, #4
 8008e7c:	f7ff fe3e 	bl	8008afc <RCCEx_PLL2_Config>
 8008e80:	6823      	ldr	r3, [r4, #0]
 8008e82:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008e84:	2d00      	cmp	r5, #0
 8008e86:	f040 8305 	bne.w	8009494 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008e8a:	4952      	ldr	r1, [pc, #328]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008e8c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8008e8e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008e90:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008e94:	4302      	orrs	r2, r0
 8008e96:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008e98:	0499      	lsls	r1, r3, #18
 8008e9a:	d51a      	bpl.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008e9c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008e9e:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8008ea2:	f000 8398 	beq.w	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 8008ea6:	d87f      	bhi.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008ea8:	b14a      	cbz	r2, 8008ebe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8008eaa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008eae:	f040 8083 	bne.w	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008eb2:	2101      	movs	r1, #1
 8008eb4:	1d20      	adds	r0, r4, #4
 8008eb6:	f7ff fe21 	bl	8008afc <RCCEx_PLL2_Config>
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008ebe:	2d00      	cmp	r5, #0
 8008ec0:	f040 832b 	bne.w	800951a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008ec4:	4943      	ldr	r1, [pc, #268]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008ec6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8008ec8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008eca:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8008ece:	4302      	orrs	r2, r0
 8008ed0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008ed2:	045a      	lsls	r2, r3, #17
 8008ed4:	d51b      	bpl.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008ed6:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8008eda:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8008ede:	f000 834a 	beq.w	8009576 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 8008ee2:	d86c      	bhi.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008ee4:	b142      	cbz	r2, 8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8008ee6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8008eea:	d170      	bne.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008eec:	2101      	movs	r1, #1
 8008eee:	1d20      	adds	r0, r4, #4
 8008ef0:	f7ff fe04 	bl	8008afc <RCCEx_PLL2_Config>
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008ef8:	2d00      	cmp	r5, #0
 8008efa:	f040 8302 	bne.w	8009502 <HAL_RCCEx_PeriphCLKConfig+0x816>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008efe:	4935      	ldr	r1, [pc, #212]	; (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008f00:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8008f04:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008f06:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8008f0a:	4302      	orrs	r2, r0
 8008f0c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f0e:	041f      	lsls	r7, r3, #16
 8008f10:	d50d      	bpl.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x242>
    switch(PeriphClkInit->FdcanClockSelection)
 8008f12:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8008f14:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8008f18:	f000 834b 	beq.w	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8008f1c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8008f20:	f000 81f0 	beq.w	8009304 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8008f24:	2a00      	cmp	r2, #0
 8008f26:	f000 81f3 	beq.w	8009310 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8008f2a:	2601      	movs	r6, #1
 8008f2c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008f2e:	01d8      	lsls	r0, r3, #7
 8008f30:	d55c      	bpl.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->FmcClockSelection)
 8008f32:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008f34:	2a03      	cmp	r2, #3
 8008f36:	f200 8425 	bhi.w	8009784 <HAL_RCCEx_PeriphCLKConfig+0xa98>
 8008f3a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008f3e:	0053      	.short	0x0053
 8008f40:	004d0313 	.word	0x004d0313
 8008f44:	0053      	.short	0x0053
    switch(PeriphClkInit->Sai23ClockSelection)
 8008f46:	2ac0      	cmp	r2, #192	; 0xc0
 8008f48:	f43f af1d 	beq.w	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8008f4c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008f50:	f43f af19 	beq.w	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8008f54:	2601      	movs	r6, #1
 8008f56:	4635      	mov	r5, r6
 8008f58:	e71f      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008f5a:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8008f5e:	f43f af33 	beq.w	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8008f62:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008f66:	f43f af2f 	beq.w	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8008f6a:	2601      	movs	r6, #1
 8008f6c:	4635      	mov	r5, r6
 8008f6e:	e736      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008f70:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8008f74:	f43f af4a 	beq.w	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x120>
 8008f78:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8008f7c:	f43f af46 	beq.w	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x120>
 8008f80:	2601      	movs	r6, #1
 8008f82:	4635      	mov	r5, r6
 8008f84:	e74d      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 8008f86:	2a30      	cmp	r2, #48	; 0x30
 8008f88:	f43f af5c 	beq.w	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8008f8c:	2601      	movs	r6, #1
 8008f8e:	4635      	mov	r5, r6
 8008f90:	e762      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008f92:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8008f96:	f43f af75 	beq.w	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008f9a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8008f9e:	f43f af71 	beq.w	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008fa2:	2601      	movs	r6, #1
 8008fa4:	4635      	mov	r5, r6
 8008fa6:	e777      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008fa8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8008fac:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8008fb0:	d085      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8008fb2:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8008fb6:	d082      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8008fb8:	2601      	movs	r6, #1
 8008fba:	4635      	mov	r5, r6
 8008fbc:	e789      	b.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008fbe:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8008fc2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8008fc6:	d097      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8008fc8:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8008fcc:	d094      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8008fce:	2601      	movs	r6, #1
 8008fd0:	4635      	mov	r5, r6
 8008fd2:	e79c      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008fd4:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008fd8:	2102      	movs	r1, #2
 8008fda:	1d20      	adds	r0, r4, #4
 8008fdc:	f7ff fd8e 	bl	8008afc <RCCEx_PLL2_Config>
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008fe4:	2d00      	cmp	r5, #0
 8008fe6:	f000 828e 	beq.w	8009506 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8008fea:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008fec:	0259      	lsls	r1, r3, #9
 8008fee:	f100 8208 	bmi.w	8009402 <HAL_RCCEx_PeriphCLKConfig+0x716>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008ff2:	07df      	lsls	r7, r3, #31
 8008ff4:	d539      	bpl.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x37e>
    switch(PeriphClkInit->Usart16ClockSelection)
 8008ff6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8008ff8:	2a28      	cmp	r2, #40	; 0x28
 8008ffa:	f200 8174 	bhi.w	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 8008ffe:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009002:	0030      	.short	0x0030
 8009004:	01720172 	.word	0x01720172
 8009008:	01720172 	.word	0x01720172
 800900c:	01720172 	.word	0x01720172
 8009010:	03580172 	.word	0x03580172
 8009014:	01720172 	.word	0x01720172
 8009018:	01720172 	.word	0x01720172
 800901c:	01720172 	.word	0x01720172
 8009020:	00290172 	.word	0x00290172
 8009024:	01720172 	.word	0x01720172
 8009028:	01720172 	.word	0x01720172
 800902c:	01720172 	.word	0x01720172
 8009030:	00300172 	.word	0x00300172
 8009034:	01720172 	.word	0x01720172
 8009038:	01720172 	.word	0x01720172
 800903c:	01720172 	.word	0x01720172
 8009040:	00300172 	.word	0x00300172
 8009044:	01720172 	.word	0x01720172
 8009048:	01720172 	.word	0x01720172
 800904c:	01720172 	.word	0x01720172
 8009050:	00300172 	.word	0x00300172
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009054:	2101      	movs	r1, #1
 8009056:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800905a:	f7ff fdcb 	bl	8008bf4 <RCCEx_PLL3_Config>
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009062:	2d00      	cmp	r5, #0
 8009064:	f000 826b 	beq.w	800953e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009068:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800906a:	0798      	lsls	r0, r3, #30
 800906c:	d516      	bpl.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800906e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8009070:	2a05      	cmp	r2, #5
 8009072:	f200 8384 	bhi.w	800977e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009076:	e8df f012 	tbh	[pc, r2, lsl #1]
 800907a:	000d      	.short	0x000d
 800907c:	00060308 	.word	0x00060308
 8009080:	000d000d 	.word	0x000d000d
 8009084:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009086:	2101      	movs	r1, #1
 8009088:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800908c:	f7ff fdb2 	bl	8008bf4 <RCCEx_PLL3_Config>
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009094:	2d00      	cmp	r5, #0
 8009096:	f000 822c 	beq.w	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x806>
 800909a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800909c:	0759      	lsls	r1, r3, #29
 800909e:	d517      	bpl.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80090a0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80090a4:	2a05      	cmp	r2, #5
 80090a6:	f200 8370 	bhi.w	800978a <HAL_RCCEx_PeriphCLKConfig+0xa9e>
 80090aa:	e8df f012 	tbh	[pc, r2, lsl #1]
 80090ae:	000d      	.short	0x000d
 80090b0:	000602f8 	.word	0x000602f8
 80090b4:	000d000d 	.word	0x000d000d
 80090b8:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090ba:	2101      	movs	r1, #1
 80090bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80090c0:	f7ff fd98 	bl	8008bf4 <RCCEx_PLL3_Config>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80090c8:	2d00      	cmp	r5, #0
 80090ca:	f000 8209 	beq.w	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 80090ce:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80090d0:	069a      	lsls	r2, r3, #26
 80090d2:	d51d      	bpl.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80090d4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80090d8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80090dc:	f000 8271 	beq.w	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 80090e0:	f200 8121 	bhi.w	8009326 <HAL_RCCEx_PeriphCLKConfig+0x63a>
 80090e4:	b14a      	cbz	r2, 80090fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80090e6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80090ea:	f040 8126 	bne.w	800933a <HAL_RCCEx_PeriphCLKConfig+0x64e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090ee:	2100      	movs	r1, #0
 80090f0:	1d20      	adds	r0, r4, #4
 80090f2:	f7ff fd03 	bl	8008afc <RCCEx_PLL2_Config>
 80090f6:	6823      	ldr	r3, [r4, #0]
 80090f8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80090fa:	2d00      	cmp	r5, #0
 80090fc:	f040 8213 	bne.w	8009526 <HAL_RCCEx_PeriphCLKConfig+0x83a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009100:	49b9      	ldr	r1, [pc, #740]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8009102:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009106:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009108:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800910c:	4302      	orrs	r2, r0
 800910e:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009110:	065f      	lsls	r7, r3, #25
 8009112:	d51d      	bpl.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x464>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009114:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8009118:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800911c:	f000 823f 	beq.w	800959e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8009120:	f200 8129 	bhi.w	8009376 <HAL_RCCEx_PeriphCLKConfig+0x68a>
 8009124:	b14a      	cbz	r2, 800913a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8009126:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800912a:	f040 812e 	bne.w	800938a <HAL_RCCEx_PeriphCLKConfig+0x69e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800912e:	2100      	movs	r1, #0
 8009130:	1d20      	adds	r0, r4, #4
 8009132:	f7ff fce3 	bl	8008afc <RCCEx_PLL2_Config>
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800913a:	2d00      	cmp	r5, #0
 800913c:	f040 81ef 	bne.w	800951e <HAL_RCCEx_PeriphCLKConfig+0x832>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009140:	49a9      	ldr	r1, [pc, #676]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8009142:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8009146:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009148:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800914c:	4302      	orrs	r2, r0
 800914e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009150:	0618      	lsls	r0, r3, #24
 8009152:	d51d      	bpl.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009154:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8009158:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800915c:	f000 8215 	beq.w	800958a <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8009160:	f200 80fc 	bhi.w	800935c <HAL_RCCEx_PeriphCLKConfig+0x670>
 8009164:	b14a      	cbz	r2, 800917a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8009166:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800916a:	f040 8101 	bne.w	8009370 <HAL_RCCEx_PeriphCLKConfig+0x684>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800916e:	2100      	movs	r1, #0
 8009170:	1d20      	adds	r0, r4, #4
 8009172:	f7ff fcc3 	bl	8008afc <RCCEx_PLL2_Config>
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800917a:	2d00      	cmp	r5, #0
 800917c:	f040 81d1 	bne.w	8009522 <HAL_RCCEx_PeriphCLKConfig+0x836>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009180:	4999      	ldr	r1, [pc, #612]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8009182:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8009186:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009188:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800918c:	4302      	orrs	r2, r0
 800918e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009190:	0719      	lsls	r1, r3, #28
 8009192:	d50b      	bpl.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009194:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8009198:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800919c:	f000 8225 	beq.w	80095ea <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80091a0:	4891      	ldr	r0, [pc, #580]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80091a2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80091a4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80091a8:	430a      	orrs	r2, r1
 80091aa:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80091ac:	06da      	lsls	r2, r3, #27
 80091ae:	d50b      	bpl.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80091b0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80091b4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80091b8:	f000 82b2 	beq.w	8009720 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80091bc:	488a      	ldr	r0, [pc, #552]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80091be:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80091c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80091c4:	430a      	orrs	r2, r1
 80091c6:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80091c8:	031f      	lsls	r7, r3, #12
 80091ca:	d50e      	bpl.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    switch(PeriphClkInit->AdcClockSelection)
 80091cc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80091d0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80091d4:	f000 80f2 	beq.w	80093bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80091d8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80091dc:	f000 80f5 	beq.w	80093ca <HAL_RCCEx_PeriphCLKConfig+0x6de>
 80091e0:	2900      	cmp	r1, #0
 80091e2:	f000 828b 	beq.w	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa10>
 80091e6:	2601      	movs	r6, #1
 80091e8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80091ea:	0358      	lsls	r0, r3, #13
 80091ec:	d50f      	bpl.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x522>
    switch(PeriphClkInit->UsbClockSelection)
 80091ee:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80091f2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80091f6:	f000 80cb 	beq.w	8009390 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 80091fa:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80091fe:	f000 80ce 	beq.w	800939e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8009202:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8009206:	f000 8282 	beq.w	800970e <HAL_RCCEx_PeriphCLKConfig+0xa22>
 800920a:	2601      	movs	r6, #1
 800920c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800920e:	03d9      	lsls	r1, r3, #15
 8009210:	d517      	bpl.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch(PeriphClkInit->SdmmcClockSelection)
 8009212:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009214:	2a00      	cmp	r2, #0
 8009216:	f000 825f 	beq.w	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 800921a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800921e:	f040 8132 	bne.w	8009486 <HAL_RCCEx_PeriphCLKConfig+0x79a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009222:	2102      	movs	r1, #2
 8009224:	1d20      	adds	r0, r4, #4
 8009226:	f7ff fc69 	bl	8008afc <RCCEx_PLL2_Config>
 800922a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	2d00      	cmp	r5, #0
 8009230:	f040 818d 	bne.w	800954e <HAL_RCCEx_PeriphCLKConfig+0x862>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009234:	496c      	ldr	r1, [pc, #432]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8009236:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009238:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800923a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800923e:	4302      	orrs	r2, r0
 8009240:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009242:	009a      	lsls	r2, r3, #2
 8009244:	f100 80d2 	bmi.w	80093ec <HAL_RCCEx_PeriphCLKConfig+0x700>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009248:	039f      	lsls	r7, r3, #14
 800924a:	d43f      	bmi.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 800924c:	1e30      	subs	r0, r6, #0
 800924e:	bf18      	it	ne
 8009250:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009252:	02de      	lsls	r6, r3, #11
 8009254:	d506      	bpl.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x578>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009256:	4964      	ldr	r1, [pc, #400]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8009258:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800925a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800925c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009260:	432a      	orrs	r2, r5
 8009262:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009264:	00dd      	lsls	r5, r3, #3
 8009266:	d507      	bpl.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009268:	495f      	ldr	r1, [pc, #380]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800926a:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 800926e:	690a      	ldr	r2, [r1, #16]
 8009270:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009274:	432a      	orrs	r2, r5
 8009276:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009278:	0299      	lsls	r1, r3, #10
 800927a:	d506      	bpl.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x59e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800927c:	495a      	ldr	r1, [pc, #360]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800927e:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8009280:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009282:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009286:	432a      	orrs	r2, r5
 8009288:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800928a:	005a      	lsls	r2, r3, #1
 800928c:	d509      	bpl.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800928e:	4a56      	ldr	r2, [pc, #344]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8009290:	6911      	ldr	r1, [r2, #16]
 8009292:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8009296:	6111      	str	r1, [r2, #16]
 8009298:	6911      	ldr	r1, [r2, #16]
 800929a:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800929e:	4329      	orrs	r1, r5
 80092a0:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	da06      	bge.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80092a6:	4950      	ldr	r1, [pc, #320]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80092a8:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80092aa:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80092ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80092b0:	432a      	orrs	r2, r5
 80092b2:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80092b4:	021b      	lsls	r3, r3, #8
 80092b6:	d507      	bpl.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80092b8:	4a4b      	ldr	r2, [pc, #300]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80092ba:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80092be:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80092c0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80092c4:	430b      	orrs	r3, r1
 80092c6:	6553      	str	r3, [r2, #84]	; 0x54
}
 80092c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 80092cc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80092ce:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80092d2:	f000 820a 	beq.w	80096ea <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 80092d6:	d933      	bls.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x654>
 80092d8:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 80092dc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80092e0:	d030      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x658>
 80092e2:	2001      	movs	r0, #1
 80092e4:	e7b5      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x566>
    switch(PeriphClkInit->Usart16ClockSelection)
 80092e6:	2601      	movs	r6, #1
 80092e8:	4635      	mov	r5, r6
 80092ea:	e6be      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x37e>
    switch(PeriphClkInit->Sai1ClockSelection)
 80092ec:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 80092ee:	2d00      	cmp	r5, #0
 80092f0:	f040 80cc 	bne.w	800948c <HAL_RCCEx_PeriphCLKConfig+0x7a0>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092f4:	493c      	ldr	r1, [pc, #240]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80092f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092f8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80092fa:	f022 0207 	bic.w	r2, r2, #7
 80092fe:	4302      	orrs	r2, r0
 8009300:	650a      	str	r2, [r1, #80]	; 0x50
 8009302:	e52c      	b.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x72>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009304:	2101      	movs	r1, #1
 8009306:	1d20      	adds	r0, r4, #4
 8009308:	f7ff fbf8 	bl	8008afc <RCCEx_PLL2_Config>
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009310:	2d00      	cmp	r5, #0
 8009312:	f040 80e3 	bne.w	80094dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009316:	4934      	ldr	r1, [pc, #208]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8009318:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800931a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800931c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009320:	4302      	orrs	r2, r0
 8009322:	650a      	str	r2, [r1, #80]	; 0x50
 8009324:	e603      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x242>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009326:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800932a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800932e:	f43f aee4 	beq.w	80090fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009332:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8009336:	f43f aee0 	beq.w	80090fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800933a:	2601      	movs	r6, #1
 800933c:	4635      	mov	r5, r6
 800933e:	e6e7      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch(PeriphClkInit->RngClockSelection)
 8009340:	2a00      	cmp	r2, #0
 8009342:	d1ce      	bne.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    if(ret == HAL_OK)
 8009344:	2d00      	cmp	r5, #0
 8009346:	d1cc      	bne.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009348:	4d27      	ldr	r5, [pc, #156]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800934a:	1e30      	subs	r0, r6, #0
 800934c:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800934e:	bf18      	it	ne
 8009350:	2001      	movne	r0, #1
 8009352:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8009356:	430a      	orrs	r2, r1
 8009358:	656a      	str	r2, [r5, #84]	; 0x54
 800935a:	e77a      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x566>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800935c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8009360:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009364:	f43f af09 	beq.w	800917a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8009368:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800936c:	f43f af05 	beq.w	800917a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8009370:	2601      	movs	r6, #1
 8009372:	4635      	mov	r5, r6
 8009374:	e70c      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009376:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 800937a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800937e:	f43f aedc 	beq.w	800913a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8009382:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8009386:	f43f aed8 	beq.w	800913a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800938a:	2601      	movs	r6, #1
 800938c:	4635      	mov	r5, r6
 800938e:	e6df      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x464>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009390:	2101      	movs	r1, #1
 8009392:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009396:	f7ff fc2d 	bl	8008bf4 <RCCEx_PLL3_Config>
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800939e:	2d00      	cmp	r5, #0
 80093a0:	f040 80c8 	bne.w	8009534 <HAL_RCCEx_PeriphCLKConfig+0x848>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80093a4:	4910      	ldr	r1, [pc, #64]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80093a6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80093aa:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80093ac:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80093b0:	4302      	orrs	r2, r0
 80093b2:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80093b4:	03d9      	lsls	r1, r3, #15
 80093b6:	f57f af44 	bpl.w	8009242 <HAL_RCCEx_PeriphCLKConfig+0x556>
 80093ba:	e72a      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x526>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093bc:	2102      	movs	r1, #2
 80093be:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80093c2:	f7ff fc17 	bl	8008bf4 <RCCEx_PLL3_Config>
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80093ca:	2d00      	cmp	r5, #0
 80093cc:	f040 80ad 	bne.w	800952a <HAL_RCCEx_PeriphCLKConfig+0x83e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80093d0:	4905      	ldr	r1, [pc, #20]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80093d2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80093d6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80093d8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80093dc:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80093de:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80093e0:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80093e2:	f57f af14 	bpl.w	800920e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80093e6:	e702      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x502>
 80093e8:	58024400 	.word	0x58024400
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80093ec:	2102      	movs	r1, #2
 80093ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80093f2:	f7ff fbff 	bl	8008bf4 <RCCEx_PLL3_Config>
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	2800      	cmp	r0, #0
 80093fa:	f43f af25 	beq.w	8009248 <HAL_RCCEx_PeriphCLKConfig+0x55c>
      status=HAL_ERROR;
 80093fe:	2601      	movs	r6, #1
 8009400:	e722      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009402:	4bb3      	ldr	r3, [pc, #716]	; (80096d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8009404:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009406:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800940c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800940e:	f7fa ff09 	bl	8004224 <HAL_GetTick>
 8009412:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009414:	e005      	b.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x736>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009416:	f7fa ff05 	bl	8004224 <HAL_GetTick>
 800941a:	1bc0      	subs	r0, r0, r7
 800941c:	2864      	cmp	r0, #100	; 0x64
 800941e:	f200 8152 	bhi.w	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009422:	f8d8 3000 	ldr.w	r3, [r8]
 8009426:	05da      	lsls	r2, r3, #23
 8009428:	d5f5      	bpl.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x72a>
    if(ret == HAL_OK)
 800942a:	2d00      	cmp	r5, #0
 800942c:	f040 81a1 	bne.w	8009772 <HAL_RCCEx_PeriphCLKConfig+0xa86>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009430:	4aa8      	ldr	r2, [pc, #672]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009432:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8009436:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009438:	4059      	eors	r1, r3
 800943a:	f411 7f40 	tst.w	r1, #768	; 0x300
 800943e:	d00b      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x76c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009440:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8009442:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009444:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009448:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800944c:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800944e:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8009450:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8009454:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009456:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800945c:	f000 816b 	beq.w	8009736 <HAL_RCCEx_PeriphCLKConfig+0xa4a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009460:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009464:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009468:	f000 8179 	beq.w	800975e <HAL_RCCEx_PeriphCLKConfig+0xa72>
 800946c:	4999      	ldr	r1, [pc, #612]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800946e:	690a      	ldr	r2, [r1, #16]
 8009470:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8009474:	610a      	str	r2, [r1, #16]
 8009476:	4a97      	ldr	r2, [pc, #604]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800947c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800947e:	430b      	orrs	r3, r1
 8009480:	6713      	str	r3, [r2, #112]	; 0x70
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	e5b5      	b.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->SdmmcClockSelection)
 8009486:	2601      	movs	r6, #1
 8009488:	4635      	mov	r5, r6
 800948a:	e6da      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800948c:	462e      	mov	r6, r5
 800948e:	e466      	b.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009490:	462e      	mov	r6, r5
 8009492:	e4c6      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009494:	462e      	mov	r6, r5
 8009496:	e4ff      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8009498:	462e      	mov	r6, r5
 800949a:	e47e      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xae>
 800949c:	462e      	mov	r6, r5
 800949e:	e49e      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094a0:	498c      	ldr	r1, [pc, #560]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80094a2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80094a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80094a8:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80094aa:	e4eb      	b.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094ac:	4989      	ldr	r1, [pc, #548]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80094ae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80094b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80094b4:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80094b6:	e487      	b.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094b8:	4986      	ldr	r1, [pc, #536]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80094ba:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80094bc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80094c0:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80094c2:	e460      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094c4:	4883      	ldr	r0, [pc, #524]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80094c6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80094c8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80094cc:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80094ce:	e42a      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094d0:	4980      	ldr	r1, [pc, #512]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80094d2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80094d4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80094d8:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80094da:	e497      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x120>
 80094dc:	462e      	mov	r6, r5
 80094de:	e526      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094e0:	497c      	ldr	r1, [pc, #496]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80094e2:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80094e6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80094e8:	f022 0207 	bic.w	r2, r2, #7
 80094ec:	4302      	orrs	r2, r0
 80094ee:	658a      	str	r2, [r1, #88]	; 0x58
 80094f0:	e5ee      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80094f2:	4978      	ldr	r1, [pc, #480]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80094f4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80094f6:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80094f8:	f022 0207 	bic.w	r2, r2, #7
 80094fc:	4302      	orrs	r2, r0
 80094fe:	654a      	str	r2, [r1, #84]	; 0x54
 8009500:	e5cc      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8009502:	462e      	mov	r6, r5
 8009504:	e503      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x222>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009506:	4973      	ldr	r1, [pc, #460]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009508:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800950a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800950c:	f022 0203 	bic.w	r2, r2, #3
 8009510:	4302      	orrs	r2, r0
 8009512:	64ca      	str	r2, [r1, #76]	; 0x4c
 8009514:	e56a      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x300>
 8009516:	462e      	mov	r6, r5
 8009518:	e49e      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800951a:	462e      	mov	r6, r5
 800951c:	e4d9      	b.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 800951e:	462e      	mov	r6, r5
 8009520:	e616      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009522:	462e      	mov	r6, r5
 8009524:	e634      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8009526:	462e      	mov	r6, r5
 8009528:	e5f2      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x424>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800952a:	0358      	lsls	r0, r3, #13
 800952c:	462e      	mov	r6, r5
 800952e:	f57f ae6e 	bpl.w	800920e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009532:	e65c      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x502>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009534:	03d9      	lsls	r1, r3, #15
 8009536:	462e      	mov	r6, r5
 8009538:	f57f ae83 	bpl.w	8009242 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800953c:	e669      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800953e:	4965      	ldr	r1, [pc, #404]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009540:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8009542:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009544:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8009548:	4302      	orrs	r2, r0
 800954a:	654a      	str	r2, [r1, #84]	; 0x54
 800954c:	e58d      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800954e:	462e      	mov	r6, r5
 8009550:	e677      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x556>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009552:	2102      	movs	r1, #2
 8009554:	1d20      	adds	r0, r4, #4
 8009556:	f7ff fad1 	bl	8008afc <RCCEx_PLL2_Config>
 800955a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800955c:	6823      	ldr	r3, [r4, #0]
 800955e:	2d00      	cmp	r5, #0
 8009560:	d1d9      	bne.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 8009562:	e472      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009564:	495b      	ldr	r1, [pc, #364]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009566:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009568:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800956c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800956e:	2d00      	cmp	r5, #0
 8009570:	f47f ad3b 	bne.w	8008fea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8009574:	e7c7      	b.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009576:	2101      	movs	r1, #1
 8009578:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800957c:	f7ff fb3a 	bl	8008bf4 <RCCEx_PLL3_Config>
 8009580:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	2d00      	cmp	r5, #0
 8009586:	d1bc      	bne.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8009588:	e4b9      	b.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800958a:	2102      	movs	r1, #2
 800958c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009590:	f7ff fb30 	bl	8008bf4 <RCCEx_PLL3_Config>
 8009594:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	2d00      	cmp	r5, #0
 800959a:	d1c2      	bne.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x836>
 800959c:	e5f0      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x494>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800959e:	2102      	movs	r1, #2
 80095a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095a4:	f7ff fb26 	bl	8008bf4 <RCCEx_PLL3_Config>
 80095a8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	2d00      	cmp	r5, #0
 80095ae:	d1b6      	bne.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x832>
 80095b0:	e5c6      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x454>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095b2:	4948      	ldr	r1, [pc, #288]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80095b4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80095b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80095ba:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80095bc:	2d00      	cmp	r5, #0
 80095be:	d18d      	bne.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 80095c0:	e6a9      	b.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x62a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095c2:	2102      	movs	r1, #2
 80095c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095c8:	f7ff fb14 	bl	8008bf4 <RCCEx_PLL3_Config>
 80095cc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	2d00      	cmp	r5, #0
 80095d2:	d1a8      	bne.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 80095d4:	e594      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x414>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80095d6:	2101      	movs	r1, #1
 80095d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095dc:	f7ff fb0a 	bl	8008bf4 <RCCEx_PLL3_Config>
 80095e0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	2d00      	cmp	r5, #0
 80095e6:	d198      	bne.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80095e8:	e46c      	b.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80095ea:	2102      	movs	r1, #2
 80095ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095f0:	f7ff fb00 	bl	8008bf4 <RCCEx_PLL3_Config>
 80095f4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80095f8:	b100      	cbz	r0, 80095fc <HAL_RCCEx_PeriphCLKConfig+0x910>
          status = HAL_ERROR;
 80095fa:	2601      	movs	r6, #1
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	e5cf      	b.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009600:	2100      	movs	r1, #0
 8009602:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009606:	f7ff faf5 	bl	8008bf4 <RCCEx_PLL3_Config>
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	4605      	mov	r5, r0
      break;
 800960e:	e439      	b.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009610:	2100      	movs	r1, #0
 8009612:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009616:	f7ff faed 	bl	8008bf4 <RCCEx_PLL3_Config>
 800961a:	6823      	ldr	r3, [r4, #0]
 800961c:	4605      	mov	r5, r0
      break;
 800961e:	f7ff bbb2 	b.w	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009622:	492c      	ldr	r1, [pc, #176]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 8009624:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009626:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009628:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800962c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800962e:	e65e      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009630:	2100      	movs	r1, #0
 8009632:	1d20      	adds	r0, r4, #4
 8009634:	f7ff fa62 	bl	8008afc <RCCEx_PLL2_Config>
 8009638:	6823      	ldr	r3, [r4, #0]
 800963a:	4605      	mov	r5, r0
      break;
 800963c:	e657      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800963e:	2100      	movs	r1, #0
 8009640:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009644:	f7ff fad6 	bl	8008bf4 <RCCEx_PLL3_Config>
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	4605      	mov	r5, r0
      break;
 800964c:	f7ff bbbc 	b.w	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009650:	2100      	movs	r1, #0
 8009652:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009656:	f7ff facd 	bl	8008bf4 <RCCEx_PLL3_Config>
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	4605      	mov	r5, r0
      break;
 800965e:	e646      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x602>
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	f7ff bb67 	b.w	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009666:	2100      	movs	r1, #0
 8009668:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800966c:	f7ff fac2 	bl	8008bf4 <RCCEx_PLL3_Config>
 8009670:	6823      	ldr	r3, [r4, #0]
 8009672:	4605      	mov	r5, r0
      break;
 8009674:	f7ff bbca 	b.w	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009678:	2102      	movs	r1, #2
 800967a:	3024      	adds	r0, #36	; 0x24
 800967c:	f7ff faba 	bl	8008bf4 <RCCEx_PLL3_Config>
 8009680:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8009682:	2e00      	cmp	r6, #0
 8009684:	f43f ab4d 	beq.w	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8009688:	e7ea      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x974>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800968a:	2101      	movs	r1, #1
 800968c:	1d20      	adds	r0, r4, #4
 800968e:	f7ff fa35 	bl	8008afc <RCCEx_PLL2_Config>
 8009692:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	2d00      	cmp	r5, #0
 8009698:	f47f acff 	bne.w	800909a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800969c:	e729      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800969e:	2101      	movs	r1, #1
 80096a0:	1d20      	adds	r0, r4, #4
 80096a2:	f7ff fa2b 	bl	8008afc <RCCEx_PLL2_Config>
 80096a6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	2d00      	cmp	r5, #0
 80096ac:	f47f ad0f 	bne.w	80090ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80096b0:	e716      	b.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096b2:	2101      	movs	r1, #1
 80096b4:	1d20      	adds	r0, r4, #4
 80096b6:	f7ff fa21 	bl	8008afc <RCCEx_PLL2_Config>
 80096ba:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	2d00      	cmp	r5, #0
 80096c0:	f47f acd2 	bne.w	8009068 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 80096c4:	e73b      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x852>
            ret = HAL_TIMEOUT;
 80096c6:	2603      	movs	r6, #3
 80096c8:	6823      	ldr	r3, [r4, #0]
 80096ca:	4635      	mov	r5, r6
 80096cc:	e491      	b.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x306>
 80096ce:	bf00      	nop
 80096d0:	58024800 	.word	0x58024800
 80096d4:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096d8:	492d      	ldr	r1, [pc, #180]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80096da:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80096dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80096e0:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80096e2:	2d00      	cmp	r5, #0
 80096e4:	f47f af33 	bne.w	800954e <HAL_RCCEx_PeriphCLKConfig+0x862>
 80096e8:	e5a4      	b.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x548>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ea:	4829      	ldr	r0, [pc, #164]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80096ec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80096ee:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80096f2:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80096f4:	2d00      	cmp	r5, #0
 80096f6:	f47f adf4 	bne.w	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80096fa:	e625      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096fc:	1d20      	adds	r0, r4, #4
 80096fe:	f7ff f9fd 	bl	8008afc <RCCEx_PLL2_Config>
 8009702:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009704:	6823      	ldr	r3, [r4, #0]
 8009706:	2d00      	cmp	r5, #0
 8009708:	f47f af0f 	bne.w	800952a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800970c:	e660      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800970e:	4920      	ldr	r1, [pc, #128]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009710:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009712:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009716:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009718:	2d00      	cmp	r5, #0
 800971a:	f47f af0b 	bne.w	8009534 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800971e:	e641      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009720:	2102      	movs	r1, #2
 8009722:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009726:	f7ff fa65 	bl	8008bf4 <RCCEx_PLL3_Config>
 800972a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800972e:	b100      	cbz	r0, 8009732 <HAL_RCCEx_PeriphCLKConfig+0xa46>
        status = HAL_ERROR;
 8009730:	2601      	movs	r6, #1
 8009732:	6823      	ldr	r3, [r4, #0]
 8009734:	e542      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        tickstart = HAL_GetTick();
 8009736:	f7fa fd75 	bl	8004224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800973a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8009790 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800973e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8009742:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009744:	e004      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xa64>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009746:	f7fa fd6d 	bl	8004224 <HAL_GetTick>
 800974a:	1bc0      	subs	r0, r0, r7
 800974c:	4548      	cmp	r0, r9
 800974e:	d8ba      	bhi.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009750:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8009754:	079b      	lsls	r3, r3, #30
 8009756:	d5f6      	bpl.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
 8009758:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800975c:	e680      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x774>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800975e:	480c      	ldr	r0, [pc, #48]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009760:	4a0c      	ldr	r2, [pc, #48]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 8009762:	6901      	ldr	r1, [r0, #16]
 8009764:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8009768:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800976c:	430a      	orrs	r2, r1
 800976e:	6102      	str	r2, [r0, #16]
 8009770:	e681      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8009772:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009774:	462e      	mov	r6, r5
 8009776:	e43c      	b.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009778:	2601      	movs	r6, #1
 800977a:	f7ff baef 	b.w	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800977e:	2601      	movs	r6, #1
 8009780:	4635      	mov	r5, r6
 8009782:	e48b      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FmcClockSelection)
 8009784:	2601      	movs	r6, #1
 8009786:	4635      	mov	r5, r6
 8009788:	e430      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800978a:	2601      	movs	r6, #1
 800978c:	4635      	mov	r5, r6
 800978e:	e49f      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009790:	58024400 	.word	0x58024400
 8009794:	00ffffcf 	.word	0x00ffffcf

08009798 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8009798:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800979a:	f7ff f8df 	bl	800895c <HAL_RCC_GetHCLKFreq>
 800979e:	4b05      	ldr	r3, [pc, #20]	; (80097b4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80097a0:	4a05      	ldr	r2, [pc, #20]	; (80097b8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80097a8:	5cd3      	ldrb	r3, [r2, r3]
 80097aa:	f003 031f 	and.w	r3, r3, #31
}
 80097ae:	40d8      	lsrs	r0, r3
 80097b0:	bd08      	pop	{r3, pc}
 80097b2:	bf00      	nop
 80097b4:	58024400 	.word	0x58024400
 80097b8:	08018270 	.word	0x08018270

080097bc <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097bc:	4b4f      	ldr	r3, [pc, #316]	; (80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 80097be:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097c0:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80097c2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80097c4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 80097c6:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80097ca:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80097ce:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 80097d0:	d05c      	beq.n	800988c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80097d2:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80097d6:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097da:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80097de:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 80097e2:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80097e4:	ee07 4a90 	vmov	s15, r4
 80097e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80097ec:	d003      	beq.n	80097f6 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 80097ee:	2902      	cmp	r1, #2
 80097f0:	d075      	beq.n	80098de <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 80097f2:	2900      	cmp	r1, #0
 80097f4:	d04f      	beq.n	8009896 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80097f6:	ee07 2a90 	vmov	s15, r2
 80097fa:	eddf 6a41 	vldr	s13, [pc, #260]	; 8009900 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80097fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009804:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009808:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009904 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800980c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009810:	ee06 3a90 	vmov	s13, r3
 8009814:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8009818:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800981c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009820:	eee7 6a25 	vfma.f32	s13, s14, s11
 8009824:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009828:	4a34      	ldr	r2, [pc, #208]	; (80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800982a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800982e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009830:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009834:	ee07 3a10 	vmov	s14, r3
 8009838:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800983c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800983e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800984a:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800984e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009850:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009854:	ee07 3a10 	vmov	s14, r3
 8009858:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800985c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009868:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800986c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800986e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009872:	ee07 3a90 	vmov	s15, r3
 8009876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800987a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800987e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009882:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009886:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800988a:	4770      	bx	lr
 800988c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800988e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009892:	6082      	str	r2, [r0, #8]
}
 8009894:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009896:	6819      	ldr	r1, [r3, #0]
 8009898:	0689      	lsls	r1, r1, #26
 800989a:	d527      	bpl.n	80098ec <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800989c:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800989e:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098a2:	4a19      	ldr	r2, [pc, #100]	; (8009908 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098a4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098a8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098b2:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098b4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8009904 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80098b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098bc:	ee06 2a10 	vmov	s12, r2
 80098c0:	ee06 3a90 	vmov	s13, r3
 80098c4:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 80098c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80098cc:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 80098d0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80098d4:	eee7 6a05 	vfma.f32	s13, s14, s10
 80098d8:	ee66 6a26 	vmul.f32	s13, s12, s13
 80098dc:	e7a4      	b.n	8009828 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098de:	ee07 2a90 	vmov	s15, r2
 80098e2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800990c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 80098e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098ea:	e78a      	b.n	8009802 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098ec:	ee07 2a90 	vmov	s15, r2
 80098f0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 80098f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098f8:	e783      	b.n	8009802 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 80098fa:	bf00      	nop
 80098fc:	58024400 	.word	0x58024400
 8009900:	4a742400 	.word	0x4a742400
 8009904:	39000000 	.word	0x39000000
 8009908:	03d09000 	.word	0x03d09000
 800990c:	4bbebc20 	.word	0x4bbebc20
 8009910:	4c742400 	.word	0x4c742400

08009914 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009914:	4b4f      	ldr	r3, [pc, #316]	; (8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8009916:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009918:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800991a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800991c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800991e:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009922:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009926:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8009928:	d05c      	beq.n	80099e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800992a:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800992e:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009932:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009936:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800993a:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800993c:	ee07 4a90 	vmov	s15, r4
 8009940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009944:	d003      	beq.n	800994e <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8009946:	2902      	cmp	r1, #2
 8009948:	d075      	beq.n	8009a36 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800994a:	2900      	cmp	r1, #0
 800994c:	d04f      	beq.n	80099ee <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800994e:	ee07 2a90 	vmov	s15, r2
 8009952:	eddf 6a41 	vldr	s13, [pc, #260]	; 8009a58 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8009956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800995a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009960:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009a5c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8009964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009968:	ee06 3a90 	vmov	s13, r3
 800996c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8009970:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009974:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009978:	eee7 6a25 	vfma.f32	s13, s14, s11
 800997c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009980:	4a34      	ldr	r2, [pc, #208]	; (8009a54 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8009982:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009986:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009988:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800998c:	ee07 3a10 	vmov	s14, r3
 8009990:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009994:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009996:	ee37 7a06 	vadd.f32	s14, s14, s12
 800999a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800999e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099a2:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80099a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80099a8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80099ac:	ee07 3a10 	vmov	s14, r3
 80099b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80099b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80099b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099c0:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80099c4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80099c6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80099ca:	ee07 3a90 	vmov	s15, r3
 80099ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099d2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80099d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099da:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80099de:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80099e2:	4770      	bx	lr
 80099e4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80099e6:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80099ea:	6082      	str	r2, [r0, #8]
}
 80099ec:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099ee:	6819      	ldr	r1, [r3, #0]
 80099f0:	0689      	lsls	r1, r1, #26
 80099f2:	d527      	bpl.n	8009a44 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099f4:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099f6:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099fa:	4a19      	ldr	r2, [pc, #100]	; (8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099fc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a00:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a0a:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a0c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8009a5c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8009a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a14:	ee06 2a10 	vmov	s12, r2
 8009a18:	ee06 3a90 	vmov	s13, r3
 8009a1c:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8009a20:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009a24:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009a28:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009a2c:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009a30:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009a34:	e7a4      	b.n	8009980 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a36:	ee07 2a90 	vmov	s15, r2
 8009a3a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8009a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a42:	e78a      	b.n	800995a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a44:	ee07 2a90 	vmov	s15, r2
 8009a48:	eddf 6a07 	vldr	s13, [pc, #28]	; 8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8009a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a50:	e783      	b.n	800995a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8009a52:	bf00      	nop
 8009a54:	58024400 	.word	0x58024400
 8009a58:	4a742400 	.word	0x4a742400
 8009a5c:	39000000 	.word	0x39000000
 8009a60:	03d09000 	.word	0x03d09000
 8009a64:	4bbebc20 	.word	0x4bbebc20
 8009a68:	4c742400 	.word	0x4c742400

08009a6c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a6c:	4b4f      	ldr	r3, [pc, #316]	; (8009bac <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8009a6e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a70:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009a72:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009a74:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8009a76:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009a7a:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a7e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8009a80:	d05c      	beq.n	8009b3c <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a82:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009a86:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a8a:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a8e:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8009a92:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a94:	ee07 4a90 	vmov	s15, r4
 8009a98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009a9c:	d07e      	beq.n	8009b9c <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8009a9e:	2902      	cmp	r1, #2
 8009aa0:	d075      	beq.n	8009b8e <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8009aa2:	2900      	cmp	r1, #0
 8009aa4:	d04f      	beq.n	8009b46 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009aa6:	ee07 2a90 	vmov	s15, r2
 8009aaa:	eddf 6a41 	vldr	s13, [pc, #260]	; 8009bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8009aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009ab8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8009abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac0:	ee06 3a90 	vmov	s13, r3
 8009ac4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8009ac8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009acc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009ad0:	eee7 6a25 	vfma.f32	s13, s14, s11
 8009ad4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009ad8:	4a34      	ldr	r2, [pc, #208]	; (8009bac <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8009ada:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009ade:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009ae0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009ae4:	ee07 3a10 	vmov	s14, r3
 8009ae8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009aec:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009aee:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009afa:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009afe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009b00:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009b04:	ee07 3a10 	vmov	s14, r3
 8009b08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b0c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b18:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009b1c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009b1e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009b22:	ee07 3a90 	vmov	s15, r3
 8009b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b2a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b32:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009b36:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009b3a:	4770      	bx	lr
 8009b3c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009b3e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009b42:	6082      	str	r2, [r0, #8]
}
 8009b44:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b46:	6819      	ldr	r1, [r3, #0]
 8009b48:	0689      	lsls	r1, r1, #26
 8009b4a:	d5ac      	bpl.n	8009aa6 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b4c:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b4e:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b52:	4a19      	ldr	r2, [pc, #100]	; (8009bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b54:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b58:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b62:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b64:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8009bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8009b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b6c:	ee06 2a10 	vmov	s12, r2
 8009b70:	ee06 3a90 	vmov	s13, r3
 8009b74:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8009b78:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009b7c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009b80:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009b84:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009b88:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009b8c:	e7a4      	b.n	8009ad8 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b8e:	ee07 2a90 	vmov	s15, r2
 8009b92:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8009bbc <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8009b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b9a:	e78a      	b.n	8009ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b9c:	ee07 2a90 	vmov	s15, r2
 8009ba0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8009bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8009ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ba8:	e783      	b.n	8009ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8009baa:	bf00      	nop
 8009bac:	58024400 	.word	0x58024400
 8009bb0:	4c742400 	.word	0x4c742400
 8009bb4:	39000000 	.word	0x39000000
 8009bb8:	03d09000 	.word	0x03d09000
 8009bbc:	4bbebc20 	.word	0x4bbebc20
 8009bc0:	4a742400 	.word	0x4a742400

08009bc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009bc4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8009bc8:	b500      	push	{lr}
 8009bca:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009bcc:	d077      	beq.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009bce:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009bd2:	d02e      	beq.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009bd4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009bd8:	f000 80cf 	beq.w	8009d7a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009bdc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8009be0:	f000 8080 	beq.w	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009be4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8009be8:	d05a      	beq.n	8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009bea:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8009bee:	f000 8105 	beq.w	8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009bf2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8009bf6:	f000 8110 	beq.w	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009bfa:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8009bfe:	f000 80e2 	beq.w	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009c02:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009c06:	d13a      	bne.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009c08:	4ba9      	ldr	r3, [pc, #676]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8009c10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c14:	f000 808e 	beq.w	8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8009c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c1c:	f000 812e 	beq.w	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8009c20:	bb6b      	cbnz	r3, 8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c22:	4aa3      	ldr	r2, [pc, #652]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = HSE_VALUE;
 8009c24:	4ba3      	ldr	r3, [pc, #652]	; (8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c26:	6810      	ldr	r0, [r2, #0]
            frequency = HSE_VALUE;
 8009c28:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009c2c:	bf18      	it	ne
 8009c2e:	4618      	movne	r0, r3
 8009c30:	e042      	b.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009c32:	4a9f      	ldr	r2, [pc, #636]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009c34:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009c36:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8009c3a:	2b80      	cmp	r3, #128	; 0x80
 8009c3c:	f000 8098 	beq.w	8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009c40:	d921      	bls.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8009c42:	2bc0      	cmp	r3, #192	; 0xc0
 8009c44:	d037      	beq.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c4a:	d118      	bne.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009c4c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c4e:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009c50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c54:	0749      	lsls	r1, r1, #29
 8009c56:	d502      	bpl.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 80ae 	beq.w	8009dba <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c5e:	4a94      	ldr	r2, [pc, #592]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009c60:	6812      	ldr	r2, [r2, #0]
 8009c62:	05d0      	lsls	r0, r2, #23
 8009c64:	d503      	bpl.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8009c66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c6a:	f000 80fb 	beq.w	8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c6e:	4a90      	ldr	r2, [pc, #576]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009c70:	6812      	ldr	r2, [r2, #0]
 8009c72:	0391      	lsls	r1, r2, #14
 8009c74:	d503      	bpl.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c7a:	f000 80bd 	beq.w	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      switch (srcclk)
 8009c7e:	2000      	movs	r0, #0
}
 8009c80:	b005      	add	sp, #20
 8009c82:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d04b      	beq.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009c8a:	2b40      	cmp	r3, #64	; 0x40
 8009c8c:	d1f7      	bne.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c8e:	6810      	ldr	r0, [r2, #0]
 8009c90:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009c94:	d010      	beq.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c96:	a801      	add	r0, sp, #4
 8009c98:	f7ff fd90 	bl	80097bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c9c:	9801      	ldr	r0, [sp, #4]
 8009c9e:	e00b      	b.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009ca0:	4a83      	ldr	r2, [pc, #524]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009ca2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009ca4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8009ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cac:	d060      	beq.n	8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009cae:	d936      	bls.n	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8009cb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009cb4:	d178      	bne.n	8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = EXTERNAL_CLOCK_VALUE;
 8009cb6:	4880      	ldr	r0, [pc, #512]	; (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
}
 8009cb8:	b005      	add	sp, #20
 8009cba:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009cbe:	4b7c      	ldr	r3, [pc, #496]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc2:	f003 0307 	and.w	r3, r3, #7
 8009cc6:	2b04      	cmp	r3, #4
 8009cc8:	d8d9      	bhi.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009cca:	a201      	add	r2, pc, #4	; (adr r2, 8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8009ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd0:	08009d35 	.word	0x08009d35
 8009cd4:	08009d59 	.word	0x08009d59
 8009cd8:	08009d45 	.word	0x08009d45
 8009cdc:	08009cb7 	.word	0x08009cb7
 8009ce0:	08009d41 	.word	0x08009d41
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009ce4:	4a72      	ldr	r2, [pc, #456]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009ce6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009ce8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8009cec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cf0:	d03e      	beq.n	8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009cf2:	d937      	bls.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8009cf4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009cf8:	d0dd      	beq.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009cfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cfe:	d1be      	bne.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d00:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d02:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d08:	0752      	lsls	r2, r2, #29
 8009d0a:	d5a8      	bpl.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1a6      	bne.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d10:	4b67      	ldr	r3, [pc, #412]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d12:	486a      	ldr	r0, [pc, #424]	; (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009d1a:	40d8      	lsrs	r0, r3
 8009d1c:	e7cc      	b.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d146      	bne.n	8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d22:	6810      	ldr	r0, [r2, #0]
 8009d24:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009d28:	d0c6      	beq.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d2a:	a801      	add	r0, sp, #4
 8009d2c:	f7ff fe9e 	bl	8009a6c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d30:	9802      	ldr	r0, [sp, #8]
 8009d32:	e7c1      	b.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d34:	4b5e      	ldr	r3, [pc, #376]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d36:	6818      	ldr	r0, [r3, #0]
 8009d38:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009d3c:	d0bc      	beq.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009d3e:	e7f4      	b.n	8009d2a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d40:	4a5b      	ldr	r2, [pc, #364]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d42:	e783      	b.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d44:	4b5a      	ldr	r3, [pc, #360]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d46:	6818      	ldr	r0, [r3, #0]
 8009d48:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009d4c:	d0b4      	beq.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d4e:	a801      	add	r0, sp, #4
 8009d50:	f7ff fde0 	bl	8009914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d54:	9801      	ldr	r0, [sp, #4]
 8009d56:	e7af      	b.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d58:	4b55      	ldr	r3, [pc, #340]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d5a:	6818      	ldr	r0, [r3, #0]
 8009d5c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009d60:	d0aa      	beq.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009d62:	e798      	b.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      switch (saiclocksource)
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d0dc      	beq.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d6c:	d08f      	beq.n	8009c8e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009d6e:	e786      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d70:	6810      	ldr	r0, [r2, #0]
 8009d72:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009d76:	d09f      	beq.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009d78:	e7e9      	b.n	8009d4e <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009d7a:	4a4d      	ldr	r2, [pc, #308]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d7c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009d7e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8009d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d86:	d0f3      	beq.n	8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009d88:	d806      	bhi.n	8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d0c9      	beq.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009d8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d92:	f43f af7c 	beq.w	8009c8e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009d96:	e772      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009d98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d9c:	d08b      	beq.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009d9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009da2:	f43f af53 	beq.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 8009da6:	e76a      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      switch (srcclk)
 8009da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dac:	d0a8      	beq.n	8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8009dae:	e766      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009db4:	f43f af6b 	beq.w	8009c8e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009db8:	e761      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009dba:	6813      	ldr	r3, [r2, #0]
 8009dbc:	483f      	ldr	r0, [pc, #252]	; (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009dbe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009dc2:	40d8      	lsrs	r0, r3
 8009dc4:	e778      	b.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009dc6:	4a3a      	ldr	r2, [pc, #232]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009dc8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009dca:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8009dce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009dd2:	d066      	beq.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8009dd4:	d82f      	bhi.n	8009e36 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009dd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dda:	d04f      	beq.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8009ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009de0:	d131      	bne.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009de2:	4b33      	ldr	r3, [pc, #204]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009dea:	f43f af65 	beq.w	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dee:	a801      	add	r0, sp, #4
 8009df0:	f7ff fd90 	bl	8009914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009df4:	9802      	ldr	r0, [sp, #8]
 8009df6:	e75f      	b.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = HSE_VALUE;
 8009df8:	482e      	ldr	r0, [pc, #184]	; (8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009dfa:	e75d      	b.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009dfc:	4a2c      	ldr	r2, [pc, #176]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009dfe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009e00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8009e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e08:	d02e      	beq.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8009e0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e0e:	f43f af77 	beq.w	8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f47f af33 	bne.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009e18:	e739      	b.n	8009c8e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009e1a:	4b25      	ldr	r3, [pc, #148]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009e1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 8009e1e:	03d2      	lsls	r2, r2, #15
 8009e20:	d589      	bpl.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e22:	6818      	ldr	r0, [r3, #0]
 8009e24:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009e28:	f43f af46 	beq.w	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e2c:	a801      	add	r0, sp, #4
 8009e2e:	f7ff fcc5 	bl	80097bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009e32:	9803      	ldr	r0, [sp, #12]
 8009e34:	e740      	b.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 8009e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e3a:	d02a      	beq.n	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 8009e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e40:	f43f aeef 	beq.w	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8009e44:	e71b      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f47f af19 	bne.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009e4c:	f7fe fd86 	bl	800895c <HAL_RCC_GetHCLKFreq>
 8009e50:	4b17      	ldr	r3, [pc, #92]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009e52:	4a1b      	ldr	r2, [pc, #108]	; (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009e5a:	5cd3      	ldrb	r3, [r2, r3]
 8009e5c:	f003 031f 	and.w	r3, r3, #31
 8009e60:	40d8      	lsrs	r0, r3
          break;
 8009e62:	e729      	b.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = CSI_VALUE;
 8009e64:	4817      	ldr	r0, [pc, #92]	; (8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8009e66:	e727      	b.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e68:	6810      	ldr	r0, [r2, #0]
 8009e6a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009e6e:	f43f af23 	beq.w	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e72:	a801      	add	r0, sp, #4
 8009e74:	f7ff fd4e 	bl	8009914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009e78:	9803      	ldr	r0, [sp, #12]
 8009e7a:	e71d      	b.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e7c:	4b0c      	ldr	r3, [pc, #48]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009e7e:	6818      	ldr	r0, [r3, #0]
 8009e80:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009e84:	f43f af18 	beq.w	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e88:	a801      	add	r0, sp, #4
 8009e8a:	f7ff fc97 	bl	80097bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e8e:	9802      	ldr	r0, [sp, #8]
 8009e90:	e712      	b.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009e92:	4a07      	ldr	r2, [pc, #28]	; (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = CSI_VALUE;
 8009e94:	4b0b      	ldr	r3, [pc, #44]	; (8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009e96:	6810      	ldr	r0, [r2, #0]
            frequency = CSI_VALUE;
 8009e98:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8009e9c:	bf18      	it	ne
 8009e9e:	4618      	movne	r0, r3
 8009ea0:	e70a      	b.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ea2:	6810      	ldr	r0, [r2, #0]
 8009ea4:	f010 0004 	ands.w	r0, r0, #4
 8009ea8:	f43f af06 	beq.w	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009eac:	e730      	b.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8009eae:	bf00      	nop
 8009eb0:	58024400 	.word	0x58024400
 8009eb4:	017d7840 	.word	0x017d7840
 8009eb8:	00bb8000 	.word	0x00bb8000
 8009ebc:	03d09000 	.word	0x03d09000
 8009ec0:	08018270 	.word	0x08018270
 8009ec4:	003d0900 	.word	0x003d0900

08009ec8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	f000 809c 	beq.w	800a006 <HAL_TIM_Base_Init+0x13e>
{
 8009ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ed0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d075      	beq.n	8009fca <HAL_TIM_Base_Init+0x102>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ede:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009ee0:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ee2:	494a      	ldr	r1, [pc, #296]	; (800a00c <HAL_TIM_Base_Init+0x144>)
 8009ee4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8009ee8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009eec:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8009ef0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ef2:	fab1 f181 	clz	r1, r1
 8009ef6:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8009efa:	d026      	beq.n	8009f4a <HAL_TIM_Base_Init+0x82>
 8009efc:	bb29      	cbnz	r1, 8009f4a <HAL_TIM_Base_Init+0x82>
 8009efe:	4844      	ldr	r0, [pc, #272]	; (800a010 <HAL_TIM_Base_Init+0x148>)
 8009f00:	4282      	cmp	r2, r0
 8009f02:	d022      	beq.n	8009f4a <HAL_TIM_Base_Init+0x82>
 8009f04:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009f08:	4282      	cmp	r2, r0
 8009f0a:	d01e      	beq.n	8009f4a <HAL_TIM_Base_Init+0x82>
 8009f0c:	4f41      	ldr	r7, [pc, #260]	; (800a014 <HAL_TIM_Base_Init+0x14c>)
 8009f0e:	4d42      	ldr	r5, [pc, #264]	; (800a018 <HAL_TIM_Base_Init+0x150>)
 8009f10:	1bd7      	subs	r7, r2, r7
 8009f12:	42aa      	cmp	r2, r5
 8009f14:	fab7 f787 	clz	r7, r7
 8009f18:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8009f1c:	d05a      	beq.n	8009fd4 <HAL_TIM_Base_Init+0x10c>
 8009f1e:	2f00      	cmp	r7, #0
 8009f20:	d158      	bne.n	8009fd4 <HAL_TIM_Base_Init+0x10c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f22:	483e      	ldr	r0, [pc, #248]	; (800a01c <HAL_TIM_Base_Init+0x154>)
 8009f24:	493e      	ldr	r1, [pc, #248]	; (800a020 <HAL_TIM_Base_Init+0x158>)
 8009f26:	428a      	cmp	r2, r1
 8009f28:	bf18      	it	ne
 8009f2a:	4282      	cmpne	r2, r0
 8009f2c:	d05d      	beq.n	8009fea <HAL_TIM_Base_Init+0x122>
 8009f2e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009f32:	428a      	cmp	r2, r1
 8009f34:	d059      	beq.n	8009fea <HAL_TIM_Base_Init+0x122>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f36:	69a1      	ldr	r1, [r4, #24]
 8009f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f3c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f3e:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f40:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8009f42:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f44:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009f46:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f48:	e023      	b.n	8009f92 <HAL_TIM_Base_Init+0xca>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f4a:	4f32      	ldr	r7, [pc, #200]	; (800a014 <HAL_TIM_Base_Init+0x14c>)
 8009f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009f50:	68a5      	ldr	r5, [r4, #8]
 8009f52:	1bd7      	subs	r7, r2, r7
 8009f54:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f56:	fab7 f787 	clz	r7, r7
 8009f5a:	097f      	lsrs	r7, r7, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f5c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f62:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f64:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f66:	68e6      	ldr	r6, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8009f68:	6860      	ldr	r0, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f6e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009f70:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f72:	62d6      	str	r6, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009f74:	6290      	str	r0, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f76:	b951      	cbnz	r1, 8009f8e <HAL_TIM_Base_Init+0xc6>
 8009f78:	b94f      	cbnz	r7, 8009f8e <HAL_TIM_Base_Init+0xc6>
 8009f7a:	4928      	ldr	r1, [pc, #160]	; (800a01c <HAL_TIM_Base_Init+0x154>)
 8009f7c:	4b28      	ldr	r3, [pc, #160]	; (800a020 <HAL_TIM_Base_Init+0x158>)
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	bf18      	it	ne
 8009f82:	428a      	cmpne	r2, r1
 8009f84:	d003      	beq.n	8009f8e <HAL_TIM_Base_Init+0xc6>
 8009f86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d101      	bne.n	8009f92 <HAL_TIM_Base_Init+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f8e:	6963      	ldr	r3, [r4, #20]
 8009f90:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f92:	2301      	movs	r3, #1
  return HAL_OK;
 8009f94:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8009f96:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f98:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f9c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009fa0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009fa4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009fa8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fb4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009fb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fbc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009fc0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009fc4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8009fca:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009fce:	f7f9 feed 	bl	8003dac <HAL_TIM_Base_MspInit>
 8009fd2:	e784      	b.n	8009ede <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fd4:	4810      	ldr	r0, [pc, #64]	; (800a018 <HAL_TIM_Base_Init+0x150>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009fda:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fdc:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 8009fde:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fe2:	d0bb      	beq.n	8009f5c <HAL_TIM_Base_Init+0x94>
 8009fe4:	2f00      	cmp	r7, #0
 8009fe6:	d1b9      	bne.n	8009f5c <HAL_TIM_Base_Init+0x94>
 8009fe8:	e79b      	b.n	8009f22 <HAL_TIM_Base_Init+0x5a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fea:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ff0:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ff2:	430b      	orrs	r3, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ff4:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8009ff6:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ffc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009ffe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a000:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a002:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a004:	e7b9      	b.n	8009f7a <HAL_TIM_Base_Init+0xb2>
    return HAL_ERROR;
 800a006:	2001      	movs	r0, #1
}
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	40010000 	.word	0x40010000
 800a010:	40000400 	.word	0x40000400
 800a014:	40010400 	.word	0x40010400
 800a018:	40000c00 	.word	0x40000c00
 800a01c:	40014000 	.word	0x40014000
 800a020:	40014400 	.word	0x40014400

0800a024 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800a024:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d138      	bne.n	800a09e <HAL_TIM_Base_Start+0x7a>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a02c:	6802      	ldr	r2, [r0, #0]
 800a02e:	4b21      	ldr	r3, [pc, #132]	; (800a0b4 <HAL_TIM_Base_Start+0x90>)
 800a030:	4921      	ldr	r1, [pc, #132]	; (800a0b8 <HAL_TIM_Base_Start+0x94>)
 800a032:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800a036:	bf18      	it	ne
 800a038:	429a      	cmpne	r2, r3
 800a03a:	bf0c      	ite	eq
 800a03c:	2301      	moveq	r3, #1
 800a03e:	2300      	movne	r3, #0
{
 800a040:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a042:	428a      	cmp	r2, r1
 800a044:	bf08      	it	eq
 800a046:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800a04a:	2502      	movs	r5, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a04c:	4c1b      	ldr	r4, [pc, #108]	; (800a0bc <HAL_TIM_Base_Start+0x98>)
 800a04e:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
  htim->State = HAL_TIM_STATE_BUSY;
 800a052:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a056:	42a2      	cmp	r2, r4
 800a058:	bf08      	it	eq
 800a05a:	f043 0301 	orreq.w	r3, r3, #1
 800a05e:	4818      	ldr	r0, [pc, #96]	; (800a0c0 <HAL_TIM_Base_Start+0x9c>)
 800a060:	4282      	cmp	r2, r0
 800a062:	bf08      	it	eq
 800a064:	f043 0301 	orreq.w	r3, r3, #1
 800a068:	428a      	cmp	r2, r1
 800a06a:	bf08      	it	eq
 800a06c:	f043 0301 	orreq.w	r3, r3, #1
 800a070:	b933      	cbnz	r3, 800a080 <HAL_TIM_Base_Start+0x5c>
 800a072:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800a076:	1a10      	subs	r0, r2, r0
 800a078:	fab0 f080 	clz	r0, r0
 800a07c:	0940      	lsrs	r0, r0, #5
 800a07e:	b198      	cbz	r0, 800a0a8 <HAL_TIM_Base_Start+0x84>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a080:	6891      	ldr	r1, [r2, #8]
 800a082:	4b10      	ldr	r3, [pc, #64]	; (800a0c4 <HAL_TIM_Base_Start+0xa0>)
 800a084:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a086:	2b06      	cmp	r3, #6
 800a088:	d00b      	beq.n	800a0a2 <HAL_TIM_Base_Start+0x7e>
 800a08a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a08e:	d008      	beq.n	800a0a2 <HAL_TIM_Base_Start+0x7e>
      __HAL_TIM_ENABLE(htim);
 800a090:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800a092:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800a094:	f043 0301 	orr.w	r3, r3, #1
 800a098:	6013      	str	r3, [r2, #0]
}
 800a09a:	bc30      	pop	{r4, r5}
 800a09c:	4770      	bx	lr
    return HAL_ERROR;
 800a09e:	2001      	movs	r0, #1
}
 800a0a0:	4770      	bx	lr
  return HAL_OK;
 800a0a2:	2000      	movs	r0, #0
}
 800a0a4:	bc30      	pop	{r4, r5}
 800a0a6:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800a0a8:	6813      	ldr	r3, [r2, #0]
 800a0aa:	f043 0301 	orr.w	r3, r3, #1
 800a0ae:	6013      	str	r3, [r2, #0]
 800a0b0:	e7f3      	b.n	800a09a <HAL_TIM_Base_Start+0x76>
 800a0b2:	bf00      	nop
 800a0b4:	40010000 	.word	0x40010000
 800a0b8:	40000400 	.word	0x40000400
 800a0bc:	40000800 	.word	0x40000800
 800a0c0:	40000c00 	.word	0x40000c00
 800a0c4:	00010007 	.word	0x00010007

0800a0c8 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	f000 80cf 	beq.w	800a26c <HAL_TIM_Encoder_Init+0x1a4>
{
 800a0ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800a0d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a0d6:	460d      	mov	r5, r1
 800a0d8:	4604      	mov	r4, r0
 800a0da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 80a5 	beq.w	800a22e <HAL_TIM_Encoder_Init+0x166>
  htim->State = HAL_TIM_STATE_BUSY;
 800a0e4:	2102      	movs	r1, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	4a61      	ldr	r2, [pc, #388]	; (800a270 <HAL_TIM_Encoder_Init+0x1a8>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a0ea:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0f2:	4960      	ldr	r1, [pc, #384]	; (800a274 <HAL_TIM_Encoder_Init+0x1ac>)
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a0f4:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0f6:	eba3 0101 	sub.w	r1, r3, r1
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a0fa:	ea02 0200 	and.w	r2, r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0fe:	fab1 f181 	clz	r1, r1
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a102:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a104:	ea4f 1151 	mov.w	r1, r1, lsr #5
  tmpcr1 = TIMx->CR1;
 800a108:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a10a:	d02b      	beq.n	800a164 <HAL_TIM_Encoder_Init+0x9c>
 800a10c:	bb51      	cbnz	r1, 800a164 <HAL_TIM_Encoder_Init+0x9c>
 800a10e:	485a      	ldr	r0, [pc, #360]	; (800a278 <HAL_TIM_Encoder_Init+0x1b0>)
 800a110:	4283      	cmp	r3, r0
 800a112:	d027      	beq.n	800a164 <HAL_TIM_Encoder_Init+0x9c>
 800a114:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800a118:	4283      	cmp	r3, r0
 800a11a:	d023      	beq.n	800a164 <HAL_TIM_Encoder_Init+0x9c>
 800a11c:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800a120:	4e56      	ldr	r6, [pc, #344]	; (800a27c <HAL_TIM_Encoder_Init+0x1b4>)
 800a122:	eba3 0c00 	sub.w	ip, r3, r0
 800a126:	42b3      	cmp	r3, r6
 800a128:	fabc fc8c 	clz	ip, ip
 800a12c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800a130:	f000 8082 	beq.w	800a238 <HAL_TIM_Encoder_Init+0x170>
 800a134:	f1bc 0f00 	cmp.w	ip, #0
 800a138:	d17e      	bne.n	800a238 <HAL_TIM_Encoder_Init+0x170>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a13a:	4851      	ldr	r0, [pc, #324]	; (800a280 <HAL_TIM_Encoder_Init+0x1b8>)
 800a13c:	4951      	ldr	r1, [pc, #324]	; (800a284 <HAL_TIM_Encoder_Init+0x1bc>)
 800a13e:	428b      	cmp	r3, r1
 800a140:	bf18      	it	ne
 800a142:	4283      	cmpne	r3, r0
 800a144:	f000 8084 	beq.w	800a250 <HAL_TIM_Encoder_Init+0x188>
 800a148:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a14c:	428b      	cmp	r3, r1
 800a14e:	d07f      	beq.n	800a250 <HAL_TIM_Encoder_Init+0x188>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a150:	69a1      	ldr	r1, [r4, #24]
 800a152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a156:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a158:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 800a15a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800a15c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a15e:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a160:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a162:	e027      	b.n	800a1b4 <HAL_TIM_Encoder_Init+0xec>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a164:	4848      	ldr	r0, [pc, #288]	; (800a288 <HAL_TIM_Encoder_Init+0x1c0>)
 800a166:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a16a:	68a6      	ldr	r6, [r4, #8]
 800a16c:	eba3 0c00 	sub.w	ip, r3, r0
 800a170:	4332      	orrs	r2, r6
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a172:	fabc fc8c 	clz	ip, ip
 800a176:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a17a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a17c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a180:	69a0      	ldr	r0, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a182:	4332      	orrs	r2, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a184:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800a186:	6866      	ldr	r6, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a18c:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800a18e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a190:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a192:	629e      	str	r6, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a194:	b961      	cbnz	r1, 800a1b0 <HAL_TIM_Encoder_Init+0xe8>
 800a196:	f1bc 0f00 	cmp.w	ip, #0
 800a19a:	d109      	bne.n	800a1b0 <HAL_TIM_Encoder_Init+0xe8>
 800a19c:	4938      	ldr	r1, [pc, #224]	; (800a280 <HAL_TIM_Encoder_Init+0x1b8>)
 800a19e:	4a39      	ldr	r2, [pc, #228]	; (800a284 <HAL_TIM_Encoder_Init+0x1bc>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	bf18      	it	ne
 800a1a4:	428b      	cmpne	r3, r1
 800a1a6:	d003      	beq.n	800a1b0 <HAL_TIM_Encoder_Init+0xe8>
 800a1a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d101      	bne.n	800a1b4 <HAL_TIM_Encoder_Init+0xec>
    TIMx->RCR = Structure->RepetitionCounter;
 800a1b0:	6962      	ldr	r2, [r4, #20]
 800a1b2:	631a      	str	r2, [r3, #48]	; 0x30
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a1b4:	692a      	ldr	r2, [r5, #16]
  TIMx->EGR = TIM_EGR_UG;
 800a1b6:	2601      	movs	r6, #1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a1b8:	69af      	ldr	r7, [r5, #24]
  return HAL_OK;
 800a1ba:	2000      	movs	r0, #0
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a1bc:	ea4f 1e02 	mov.w	lr, r2, lsl #4
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a1c0:	68aa      	ldr	r2, [r5, #8]
  TIMx->EGR = TIM_EGR_UG;
 800a1c2:	615e      	str	r6, [r3, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a1c4:	ea42 2907 	orr.w	r9, r2, r7, lsl #8
  tmpsmcr = htim->Instance->SMCR;
 800a1c8:	f8d3 c008 	ldr.w	ip, [r3, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a1cc:	69ea      	ldr	r2, [r5, #28]
  tmpccmr1 = htim->Instance->CCMR1;
 800a1ce:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a1d0:	4f2e      	ldr	r7, [pc, #184]	; (800a28c <HAL_TIM_Encoder_Init+0x1c4>)
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a1d2:	ea4e 2202 	orr.w	r2, lr, r2, lsl #8
 800a1d6:	f8d5 a020 	ldr.w	sl, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a1da:	400f      	ands	r7, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a1dc:	68e9      	ldr	r1, [r5, #12]
  tmpsmcr |= sConfig->EncoderMode;
 800a1de:	f8d5 e000 	ldr.w	lr, [r5]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a1e2:	4311      	orrs	r1, r2
  tmpccer = htim->Instance->CCER;
 800a1e4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a1e6:	ea49 0707 	orr.w	r7, r9, r7
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a1ea:	f8d5 9014 	ldr.w	r9, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a1ee:	f022 08aa 	bic.w	r8, r2, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a1f2:	686a      	ldr	r2, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a1f4:	4d26      	ldr	r5, [pc, #152]	; (800a290 <HAL_TIM_Encoder_Init+0x1c8>)
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a1f6:	ea41 310a 	orr.w	r1, r1, sl, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a1fa:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 800a1fe:	ea4c 0c0e 	orr.w	ip, ip, lr
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a202:	403d      	ands	r5, r7
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a204:	ea42 0208 	orr.w	r2, r2, r8
  htim->Instance->SMCR = tmpsmcr;
 800a208:	f8c3 c008 	str.w	ip, [r3, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a20c:	4329      	orrs	r1, r5
  htim->Instance->CCMR1 = tmpccmr1;
 800a20e:	6199      	str	r1, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800a210:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a212:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a216:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a21a:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a21e:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a222:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800a226:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 800a22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    htim->Lock = HAL_UNLOCKED;
 800a22e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800a232:	f7f9 fd7d 	bl	8003d30 <HAL_TIM_Encoder_MspInit>
 800a236:	e755      	b.n	800a0e4 <HAL_TIM_Encoder_Init+0x1c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a238:	4810      	ldr	r0, [pc, #64]	; (800a27c <HAL_TIM_Encoder_Init+0x1b4>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a23a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a23e:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a240:	4283      	cmp	r3, r0
    tmpcr1 |= Structure->CounterMode;
 800a242:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a246:	d098      	beq.n	800a17a <HAL_TIM_Encoder_Init+0xb2>
 800a248:	f1bc 0f00 	cmp.w	ip, #0
 800a24c:	d195      	bne.n	800a17a <HAL_TIM_Encoder_Init+0xb2>
 800a24e:	e774      	b.n	800a13a <HAL_TIM_Encoder_Init+0x72>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a250:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a252:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a256:	69a0      	ldr	r0, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a258:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a25a:	68e6      	ldr	r6, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800a25c:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a25e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a262:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800a264:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a266:	62de      	str	r6, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a268:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a26a:	e797      	b.n	800a19c <HAL_TIM_Encoder_Init+0xd4>
    return HAL_ERROR;
 800a26c:	2001      	movs	r0, #1
}
 800a26e:	4770      	bx	lr
 800a270:	fffebff8 	.word	0xfffebff8
 800a274:	40010000 	.word	0x40010000
 800a278:	40000400 	.word	0x40000400
 800a27c:	40000c00 	.word	0x40000c00
 800a280:	40014000 	.word	0x40014000
 800a284:	40014400 	.word	0x40014400
 800a288:	40010400 	.word	0x40010400
 800a28c:	fffffcfc 	.word	0xfffffcfc
 800a290:	ffff0303 	.word	0xffff0303

0800a294 <HAL_TIM_Encoder_Start>:
{
 800a294:	b430      	push	{r4, r5}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a296:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a29a:	f890 403f 	ldrb.w	r4, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a29e:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a2a2:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a2a4:	f890 5045 	ldrb.w	r5, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a2a8:	b2d2      	uxtb	r2, r2
  if (Channel == TIM_CHANNEL_1)
 800a2aa:	b9c1      	cbnz	r1, 800a2de <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d13d      	bne.n	800a32c <HAL_TIM_Encoder_Start+0x98>
 800a2b0:	2a01      	cmp	r2, #1
 800a2b2:	d13b      	bne.n	800a32c <HAL_TIM_Encoder_Start+0x98>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a2b4:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2b6:	2302      	movs	r3, #2
 800a2b8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2bc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a2c0:	6a13      	ldr	r3, [r2, #32]
 800a2c2:	f023 0301 	bic.w	r3, r3, #1
 800a2c6:	6213      	str	r3, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a2c8:	6a13      	ldr	r3, [r2, #32]
 800a2ca:	f043 0301 	orr.w	r3, r3, #1
 800a2ce:	6213      	str	r3, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 800a2d0:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800a2d2:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800a2d4:	f043 0301 	orr.w	r3, r3, #1
}
 800a2d8:	bc30      	pop	{r4, r5}
  __HAL_TIM_ENABLE(htim);
 800a2da:	6013      	str	r3, [r2, #0]
}
 800a2dc:	4770      	bx	lr
  else if (Channel == TIM_CHANNEL_2)
 800a2de:	2904      	cmp	r1, #4
 800a2e0:	b2e4      	uxtb	r4, r4
 800a2e2:	b2ed      	uxtb	r5, r5
 800a2e4:	d025      	beq.n	800a332 <HAL_TIM_Encoder_Start+0x9e>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d120      	bne.n	800a32c <HAL_TIM_Encoder_Start+0x98>
 800a2ea:	2c01      	cmp	r4, #1
 800a2ec:	d11e      	bne.n	800a32c <HAL_TIM_Encoder_Start+0x98>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a2ee:	2a01      	cmp	r2, #1
 800a2f0:	d11c      	bne.n	800a32c <HAL_TIM_Encoder_Start+0x98>
 800a2f2:	2d01      	cmp	r5, #1
 800a2f4:	d11a      	bne.n	800a32c <HAL_TIM_Encoder_Start+0x98>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2f6:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a2f8:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2fa:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2fe:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a302:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a306:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800a30a:	6a13      	ldr	r3, [r2, #32]
 800a30c:	f023 0301 	bic.w	r3, r3, #1
 800a310:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a312:	6a13      	ldr	r3, [r2, #32]
 800a314:	f043 0301 	orr.w	r3, r3, #1
 800a318:	6213      	str	r3, [r2, #32]
  TIMx->CCER &= ~tmp;
 800a31a:	6a13      	ldr	r3, [r2, #32]
 800a31c:	f023 0310 	bic.w	r3, r3, #16
 800a320:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a322:	6a13      	ldr	r3, [r2, #32]
 800a324:	f043 0310 	orr.w	r3, r3, #16
 800a328:	6213      	str	r3, [r2, #32]
}
 800a32a:	e7d1      	b.n	800a2d0 <HAL_TIM_Encoder_Start+0x3c>
      return HAL_ERROR;
 800a32c:	2001      	movs	r0, #1
}
 800a32e:	bc30      	pop	{r4, r5}
 800a330:	4770      	bx	lr
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a332:	2c01      	cmp	r4, #1
 800a334:	d1fa      	bne.n	800a32c <HAL_TIM_Encoder_Start+0x98>
 800a336:	2d01      	cmp	r5, #1
 800a338:	d1f8      	bne.n	800a32c <HAL_TIM_Encoder_Start+0x98>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a33a:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a33c:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a33e:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a342:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800a346:	e7e8      	b.n	800a31a <HAL_TIM_Encoder_Start+0x86>

0800a348 <HAL_TIM_PeriodElapsedCallback>:
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop

0800a34c <HAL_TIM_OC_DelayElapsedCallback>:
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop

0800a350 <HAL_TIM_IC_CaptureCallback>:
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop

0800a354 <HAL_TIM_PWM_PulseFinishedCallback>:
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop

0800a358 <HAL_TIM_TriggerCallback>:
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop

0800a35c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a35c:	6803      	ldr	r3, [r0, #0]
 800a35e:	691a      	ldr	r2, [r3, #16]
 800a360:	0791      	lsls	r1, r2, #30
{
 800a362:	b510      	push	{r4, lr}
 800a364:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a366:	d502      	bpl.n	800a36e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a368:	68da      	ldr	r2, [r3, #12]
 800a36a:	0792      	lsls	r2, r2, #30
 800a36c:	d468      	bmi.n	800a440 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a36e:	691a      	ldr	r2, [r3, #16]
 800a370:	0752      	lsls	r2, r2, #29
 800a372:	d502      	bpl.n	800a37a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a374:	68da      	ldr	r2, [r3, #12]
 800a376:	0750      	lsls	r0, r2, #29
 800a378:	d44f      	bmi.n	800a41a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a37a:	691a      	ldr	r2, [r3, #16]
 800a37c:	0711      	lsls	r1, r2, #28
 800a37e:	d502      	bpl.n	800a386 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a380:	68da      	ldr	r2, [r3, #12]
 800a382:	0712      	lsls	r2, r2, #28
 800a384:	d437      	bmi.n	800a3f6 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a386:	691a      	ldr	r2, [r3, #16]
 800a388:	06d0      	lsls	r0, r2, #27
 800a38a:	d502      	bpl.n	800a392 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a38c:	68da      	ldr	r2, [r3, #12]
 800a38e:	06d1      	lsls	r1, r2, #27
 800a390:	d41e      	bmi.n	800a3d0 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a392:	691a      	ldr	r2, [r3, #16]
 800a394:	07d2      	lsls	r2, r2, #31
 800a396:	d502      	bpl.n	800a39e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a398:	68da      	ldr	r2, [r3, #12]
 800a39a:	07d0      	lsls	r0, r2, #31
 800a39c:	d469      	bmi.n	800a472 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a39e:	691a      	ldr	r2, [r3, #16]
 800a3a0:	0611      	lsls	r1, r2, #24
 800a3a2:	d502      	bpl.n	800a3aa <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3a4:	68da      	ldr	r2, [r3, #12]
 800a3a6:	0612      	lsls	r2, r2, #24
 800a3a8:	d46b      	bmi.n	800a482 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a3aa:	691a      	ldr	r2, [r3, #16]
 800a3ac:	05d0      	lsls	r0, r2, #23
 800a3ae:	d502      	bpl.n	800a3b6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3b0:	68da      	ldr	r2, [r3, #12]
 800a3b2:	0611      	lsls	r1, r2, #24
 800a3b4:	d46d      	bmi.n	800a492 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a3b6:	691a      	ldr	r2, [r3, #16]
 800a3b8:	0652      	lsls	r2, r2, #25
 800a3ba:	d502      	bpl.n	800a3c2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3bc:	68da      	ldr	r2, [r3, #12]
 800a3be:	0650      	lsls	r0, r2, #25
 800a3c0:	d46f      	bmi.n	800a4a2 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a3c2:	691a      	ldr	r2, [r3, #16]
 800a3c4:	0691      	lsls	r1, r2, #26
 800a3c6:	d502      	bpl.n	800a3ce <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3c8:	68da      	ldr	r2, [r3, #12]
 800a3ca:	0692      	lsls	r2, r2, #26
 800a3cc:	d449      	bmi.n	800a462 <HAL_TIM_IRQHandler+0x106>
}
 800a3ce:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a3d0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a3d4:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800a3d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a3d8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a3da:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a3e2:	d16f      	bne.n	800a4c4 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3e4:	f7ff ffb2 	bl	800a34c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f7ff ffb3 	bl	800a354 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	6823      	ldr	r3, [r4, #0]
 800a3f2:	7722      	strb	r2, [r4, #28]
 800a3f4:	e7cd      	b.n	800a392 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3f6:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3fa:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800a3fc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3fe:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a400:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a402:	69db      	ldr	r3, [r3, #28]
 800a404:	079b      	lsls	r3, r3, #30
 800a406:	d15a      	bne.n	800a4be <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a408:	f7ff ffa0 	bl	800a34c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a40c:	4620      	mov	r0, r4
 800a40e:	f7ff ffa1 	bl	800a354 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a412:	2200      	movs	r2, #0
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	7722      	strb	r2, [r4, #28]
 800a418:	e7b5      	b.n	800a386 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a41a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a41e:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800a420:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a422:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a424:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a426:	699b      	ldr	r3, [r3, #24]
 800a428:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a42c:	d144      	bne.n	800a4b8 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a42e:	f7ff ff8d 	bl	800a34c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a432:	4620      	mov	r0, r4
 800a434:	f7ff ff8e 	bl	800a354 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a438:	2200      	movs	r2, #0
 800a43a:	6823      	ldr	r3, [r4, #0]
 800a43c:	7722      	strb	r2, [r4, #28]
 800a43e:	e79c      	b.n	800a37a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a440:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a444:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a446:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a448:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	0799      	lsls	r1, r3, #30
 800a44e:	d130      	bne.n	800a4b2 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a450:	f7ff ff7c 	bl	800a34c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a454:	4620      	mov	r0, r4
 800a456:	f7ff ff7d 	bl	800a354 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a45a:	2200      	movs	r2, #0
 800a45c:	6823      	ldr	r3, [r4, #0]
 800a45e:	7722      	strb	r2, [r4, #28]
 800a460:	e785      	b.n	800a36e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a462:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800a466:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a468:	611a      	str	r2, [r3, #16]
}
 800a46a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800a46e:	f000 b881 	b.w	800a574 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a472:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800a476:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a478:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a47a:	f7ff ff65 	bl	800a348 <HAL_TIM_PeriodElapsedCallback>
 800a47e:	6823      	ldr	r3, [r4, #0]
 800a480:	e78d      	b.n	800a39e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a482:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800a486:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a488:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a48a:	f000 f875 	bl	800a578 <HAL_TIMEx_BreakCallback>
 800a48e:	6823      	ldr	r3, [r4, #0]
 800a490:	e78b      	b.n	800a3aa <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a492:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800a496:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a498:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a49a:	f000 f86f 	bl	800a57c <HAL_TIMEx_Break2Callback>
 800a49e:	6823      	ldr	r3, [r4, #0]
 800a4a0:	e789      	b.n	800a3b6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800a4a6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4a8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a4aa:	f7ff ff55 	bl	800a358 <HAL_TIM_TriggerCallback>
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	e787      	b.n	800a3c2 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800a4b2:	f7ff ff4d 	bl	800a350 <HAL_TIM_IC_CaptureCallback>
 800a4b6:	e7d0      	b.n	800a45a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800a4b8:	f7ff ff4a 	bl	800a350 <HAL_TIM_IC_CaptureCallback>
 800a4bc:	e7bc      	b.n	800a438 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800a4be:	f7ff ff47 	bl	800a350 <HAL_TIM_IC_CaptureCallback>
 800a4c2:	e7a6      	b.n	800a412 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800a4c4:	f7ff ff44 	bl	800a350 <HAL_TIM_IC_CaptureCallback>
 800a4c8:	e791      	b.n	800a3ee <HAL_TIM_IRQHandler+0x92>
 800a4ca:	bf00      	nop

0800a4cc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d042      	beq.n	800a55a <HAL_TIMEx_MasterConfigSynchronization+0x8e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4d8:	6813      	ldr	r3, [r2, #0]
{
 800a4da:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4dc:	4d20      	ldr	r5, [pc, #128]	; (800a560 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a4de:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4e2:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800a4e4:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a4e6:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4e8:	d020      	beq.n	800a52c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a4ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a4ee:	42ab      	cmp	r3, r5
 800a4f0:	d01c      	beq.n	800a52c <HAL_TIMEx_MasterConfigSynchronization+0x60>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4f2:	4d1c      	ldr	r5, [pc, #112]	; (800a564 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4f4:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4f8:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4fa:	42ab      	cmp	r3, r5
 800a4fc:	bf18      	it	ne
 800a4fe:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800a502:	4f19      	ldr	r7, [pc, #100]	; (800a568 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a504:	ea40 0006 	orr.w	r0, r0, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a508:	4e18      	ldr	r6, [pc, #96]	; (800a56c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800a50a:	bf0c      	ite	eq
 800a50c:	2501      	moveq	r5, #1
 800a50e:	2500      	movne	r5, #0
  htim->Instance->CR2 = tmpcr2;
 800a510:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a512:	42bb      	cmp	r3, r7
 800a514:	bf08      	it	eq
 800a516:	f045 0501 	orreq.w	r5, r5, #1
 800a51a:	42b3      	cmp	r3, r6
 800a51c:	bf08      	it	eq
 800a51e:	f045 0501 	orreq.w	r5, r5, #1
 800a522:	b965      	cbnz	r5, 800a53e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800a524:	4812      	ldr	r0, [pc, #72]	; (800a570 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800a526:	4283      	cmp	r3, r0
 800a528:	d009      	beq.n	800a53e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800a52a:	e00d      	b.n	800a548 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a52c:	e9d1 5600 	ldrd	r5, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a530:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a534:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800a536:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a53a:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800a53c:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a53e:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a540:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a544:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a546:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800a548:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800a54a:	2101      	movs	r1, #1

  return HAL_OK;
 800a54c:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800a54e:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a552:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800a556:	bcf0      	pop	{r4, r5, r6, r7}
 800a558:	4770      	bx	lr
  __HAL_LOCK(htim);
 800a55a:	2002      	movs	r0, #2
}
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	40010000 	.word	0x40010000
 800a564:	40000400 	.word	0x40000400
 800a568:	40000800 	.word	0x40000800
 800a56c:	40000c00 	.word	0x40000c00
 800a570:	40001800 	.word	0x40001800

0800a574 <HAL_TIMEx_CommutCallback>:
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop

0800a578 <HAL_TIMEx_BreakCallback>:
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop

0800a57c <HAL_TIMEx_Break2Callback>:
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop

0800a580 <HAL_UART_TxCpltCallback>:
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop

0800a584 <HAL_UART_ErrorCallback>:
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop

0800a588 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a588:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a58a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800a58c:	2300      	movs	r3, #0
 800a58e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a592:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a596:	f7ff fff5 	bl	800a584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a59a:	bd08      	pop	{r3, pc}

0800a59c <HAL_UARTEx_RxEventCallback>:
}
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop

0800a5a0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a5a0:	6802      	ldr	r2, [r0, #0]
{
 800a5a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a5a6:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a5a8:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a5ac:	6815      	ldr	r5, [r2, #0]
{
 800a5ae:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800a5b0:	4233      	tst	r3, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a5b2:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800a5b4:	d027      	beq.n	800a606 <HAL_UART_IRQHandler+0x66>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a5b6:	48a8      	ldr	r0, [pc, #672]	; (800a858 <HAL_UART_IRQHandler+0x2b8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a5b8:	4ea8      	ldr	r6, [pc, #672]	; (800a85c <HAL_UART_IRQHandler+0x2bc>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a5ba:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a5bc:	402e      	ands	r6, r5
 800a5be:	4306      	orrs	r6, r0
 800a5c0:	d16b      	bne.n	800a69a <HAL_UART_IRQHandler+0xfa>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5c2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800a5c4:	2801      	cmp	r0, #1
 800a5c6:	d02c      	beq.n	800a622 <HAL_UART_IRQHandler+0x82>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a5c8:	02de      	lsls	r6, r3, #11
 800a5ca:	d502      	bpl.n	800a5d2 <HAL_UART_IRQHandler+0x32>
 800a5cc:	0248      	lsls	r0, r1, #9
 800a5ce:	f100 80ee 	bmi.w	800a7ae <HAL_UART_IRQHandler+0x20e>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a5d2:	061f      	lsls	r7, r3, #24
 800a5d4:	d506      	bpl.n	800a5e4 <HAL_UART_IRQHandler+0x44>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a5d6:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a5da:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a5de:	4301      	orrs	r1, r0
 800a5e0:	f040 80dd 	bne.w	800a79e <HAL_UART_IRQHandler+0x1fe>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a5e4:	065e      	lsls	r6, r3, #25
 800a5e6:	d502      	bpl.n	800a5ee <HAL_UART_IRQHandler+0x4e>
 800a5e8:	0668      	lsls	r0, r5, #25
 800a5ea:	f100 80ec 	bmi.w	800a7c6 <HAL_UART_IRQHandler+0x226>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a5ee:	0219      	lsls	r1, r3, #8
 800a5f0:	d502      	bpl.n	800a5f8 <HAL_UART_IRQHandler+0x58>
 800a5f2:	006a      	lsls	r2, r5, #1
 800a5f4:	f100 80f4 	bmi.w	800a7e0 <HAL_UART_IRQHandler+0x240>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a5f8:	01db      	lsls	r3, r3, #7
 800a5fa:	d502      	bpl.n	800a602 <HAL_UART_IRQHandler+0x62>
 800a5fc:	2d00      	cmp	r5, #0
 800a5fe:	f2c0 811f 	blt.w	800a840 <HAL_UART_IRQHandler+0x2a0>
}
 800a602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a606:	069e      	lsls	r6, r3, #26
 800a608:	d5db      	bpl.n	800a5c2 <HAL_UART_IRQHandler+0x22>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a60a:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a60e:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 800a612:	433e      	orrs	r6, r7
 800a614:	d0d5      	beq.n	800a5c2 <HAL_UART_IRQHandler+0x22>
      if (huart->RxISR != NULL)
 800a616:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d0f2      	beq.n	800a602 <HAL_UART_IRQHandler+0x62>
}
 800a61c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a620:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a622:	06d8      	lsls	r0, r3, #27
 800a624:	d5d0      	bpl.n	800a5c8 <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a626:	06ef      	lsls	r7, r5, #27
 800a628:	d5ce      	bpl.n	800a5c8 <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a62a:	2310      	movs	r3, #16
 800a62c:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a62e:	6893      	ldr	r3, [r2, #8]
 800a630:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800a634:	f000 80e0 	beq.w	800a7f8 <HAL_UART_IRQHandler+0x258>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a638:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a63a:	6801      	ldr	r1, [r0, #0]
 800a63c:	684b      	ldr	r3, [r1, #4]
 800a63e:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800a640:	2b00      	cmp	r3, #0
 800a642:	d0de      	beq.n	800a602 <HAL_UART_IRQHandler+0x62>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a644:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800a648:	4299      	cmp	r1, r3
 800a64a:	d9da      	bls.n	800a602 <HAL_UART_IRQHandler+0x62>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a64c:	69c5      	ldr	r5, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 800a64e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a652:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a656:	d018      	beq.n	800a68a <HAL_UART_IRQHandler+0xea>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a658:	6813      	ldr	r3, [r2, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a65a:	2100      	movs	r1, #0
          huart->RxState = HAL_UART_STATE_READY;
 800a65c:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a65e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a662:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a664:	6893      	ldr	r3, [r2, #8]
 800a666:	f023 0301 	bic.w	r3, r3, #1
 800a66a:	6093      	str	r3, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a66c:	6893      	ldr	r3, [r2, #8]
 800a66e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a672:	6093      	str	r3, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 800a674:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a678:	66e1      	str	r1, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a67a:	6813      	ldr	r3, [r2, #0]
 800a67c:	f023 0310 	bic.w	r3, r3, #16
 800a680:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a682:	f7fb fec9 	bl	8006418 <HAL_DMA_Abort>
 800a686:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a68a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a68e:	4620      	mov	r0, r4
 800a690:	1ac9      	subs	r1, r1, r3
 800a692:	b289      	uxth	r1, r1
 800a694:	f7ff ff82 	bl	800a59c <HAL_UARTEx_RxEventCallback>
 800a698:	e7b3      	b.n	800a602 <HAL_UART_IRQHandler+0x62>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a69a:	07df      	lsls	r7, r3, #31
 800a69c:	d509      	bpl.n	800a6b2 <HAL_UART_IRQHandler+0x112>
 800a69e:	05ee      	lsls	r6, r5, #23
 800a6a0:	d507      	bpl.n	800a6b2 <HAL_UART_IRQHandler+0x112>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a6a2:	2601      	movs	r6, #1
 800a6a4:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6a6:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800a6aa:	f046 0601 	orr.w	r6, r6, #1
 800a6ae:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6b2:	079f      	lsls	r7, r3, #30
 800a6b4:	d566      	bpl.n	800a784 <HAL_UART_IRQHandler+0x1e4>
 800a6b6:	07ce      	lsls	r6, r1, #31
 800a6b8:	d509      	bpl.n	800a6ce <HAL_UART_IRQHandler+0x12e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6ba:	2602      	movs	r6, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6bc:	075f      	lsls	r7, r3, #29
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6be:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6c0:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800a6c4:	f046 0604 	orr.w	r6, r6, #4
 800a6c8:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6cc:	d45e      	bmi.n	800a78c <HAL_UART_IRQHandler+0x1ec>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a6ce:	071e      	lsls	r6, r3, #28
 800a6d0:	d50b      	bpl.n	800a6ea <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a6d2:	f005 0620 	and.w	r6, r5, #32
 800a6d6:	4330      	orrs	r0, r6
 800a6d8:	d007      	beq.n	800a6ea <HAL_UART_IRQHandler+0x14a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6da:	2008      	movs	r0, #8
 800a6dc:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a6de:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a6e2:	f040 0008 	orr.w	r0, r0, #8
 800a6e6:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a6ea:	0518      	lsls	r0, r3, #20
 800a6ec:	d50a      	bpl.n	800a704 <HAL_UART_IRQHandler+0x164>
 800a6ee:	016f      	lsls	r7, r5, #5
 800a6f0:	d508      	bpl.n	800a704 <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a6f6:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a6f8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a6fc:	f040 0020 	orr.w	r0, r0, #32
 800a700:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a704:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a708:	2800      	cmp	r0, #0
 800a70a:	f43f af7a 	beq.w	800a602 <HAL_UART_IRQHandler+0x62>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a70e:	069e      	lsls	r6, r3, #26
 800a710:	d506      	bpl.n	800a720 <HAL_UART_IRQHandler+0x180>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a712:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a716:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800a71a:	ea55 0301 	orrs.w	r3, r5, r1
 800a71e:	d164      	bne.n	800a7ea <HAL_UART_IRQHandler+0x24a>
      errorcode = huart->ErrorCode;
 800a720:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a724:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a726:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a72e:	431d      	orrs	r5, r3
 800a730:	f000 808b 	beq.w	800a84a <HAL_UART_IRQHandler+0x2aa>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a734:	6811      	ldr	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a736:	4b4a      	ldr	r3, [pc, #296]	; (800a860 <HAL_UART_IRQHandler+0x2c0>)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a738:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800a73c:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a73e:	6891      	ldr	r1, [r2, #8]
 800a740:	400b      	ands	r3, r1
 800a742:	6093      	str	r3, [r2, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a744:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a746:	2b01      	cmp	r3, #1
 800a748:	d103      	bne.n	800a752 <HAL_UART_IRQHandler+0x1b2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a74a:	6813      	ldr	r3, [r2, #0]
 800a74c:	f023 0310 	bic.w	r3, r3, #16
 800a750:	6013      	str	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800a752:	2120      	movs	r1, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a754:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a756:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a75a:	66e3      	str	r3, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a75c:	6891      	ldr	r1, [r2, #8]
  huart->RxISR = NULL;
 800a75e:	6723      	str	r3, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a760:	064d      	lsls	r5, r1, #25
 800a762:	d52c      	bpl.n	800a7be <HAL_UART_IRQHandler+0x21e>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a764:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 800a766:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a76c:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 800a76e:	b330      	cbz	r0, 800a7be <HAL_UART_IRQHandler+0x21e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a770:	4b3c      	ldr	r3, [pc, #240]	; (800a864 <HAL_UART_IRQHandler+0x2c4>)
 800a772:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a774:	f7fb ffd0 	bl	8006718 <HAL_DMA_Abort_IT>
 800a778:	2800      	cmp	r0, #0
 800a77a:	f43f af42 	beq.w	800a602 <HAL_UART_IRQHandler+0x62>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a77e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a780:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a782:	e74b      	b.n	800a61c <HAL_UART_IRQHandler+0x7c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a784:	075e      	lsls	r6, r3, #29
 800a786:	d5a2      	bpl.n	800a6ce <HAL_UART_IRQHandler+0x12e>
 800a788:	07cf      	lsls	r7, r1, #31
 800a78a:	d5a0      	bpl.n	800a6ce <HAL_UART_IRQHandler+0x12e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a78c:	2604      	movs	r6, #4
 800a78e:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a790:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800a794:	f046 0602 	orr.w	r6, r6, #2
 800a798:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800a79c:	e797      	b.n	800a6ce <HAL_UART_IRQHandler+0x12e>
    if (huart->TxISR != NULL)
 800a79e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f43f af2e 	beq.w	800a602 <HAL_UART_IRQHandler+0x62>
      huart->TxISR(huart);
 800a7a6:	4620      	mov	r0, r4
}
 800a7a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 800a7ac:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a7ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800a7b2:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a7b4:	6213      	str	r3, [r2, #32]
}
 800a7b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800a7ba:	f000 bbf1 	b.w	800afa0 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f7ff fee0 	bl	800a584 <HAL_UART_ErrorCallback>
 800a7c4:	e71d      	b.n	800a602 <HAL_UART_IRQHandler+0x62>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7c6:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7c8:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a7ca:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7cc:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7d2:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a7d4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 800a7d8:	6761      	str	r1, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 800a7da:	f7ff fed1 	bl	800a580 <HAL_UART_TxCpltCallback>
    return;
 800a7de:	e710      	b.n	800a602 <HAL_UART_IRQHandler+0x62>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a7e0:	4620      	mov	r0, r4
}
 800a7e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a7e6:	f000 bbdf 	b.w	800afa8 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 800a7ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d097      	beq.n	800a720 <HAL_UART_IRQHandler+0x180>
          huart->RxISR(huart);
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	4798      	blx	r3
 800a7f4:	6822      	ldr	r2, [r4, #0]
 800a7f6:	e793      	b.n	800a720 <HAL_UART_IRQHandler+0x180>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a7f8:	f8b4 505e 	ldrh.w	r5, [r4, #94]	; 0x5e
 800a7fc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 800a800:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a804:	1b49      	subs	r1, r1, r5
      if ((huart->RxXferCount > 0U)
 800a806:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a808:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800a80a:	2800      	cmp	r0, #0
 800a80c:	f43f aef9 	beq.w	800a602 <HAL_UART_IRQHandler+0x62>
 800a810:	2900      	cmp	r1, #0
 800a812:	f43f aef6 	beq.w	800a602 <HAL_UART_IRQHandler+0x62>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a816:	6816      	ldr	r6, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 800a818:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a81a:	4d11      	ldr	r5, [pc, #68]	; (800a860 <HAL_UART_IRQHandler+0x2c0>)
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a81c:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a81e:	f426 7690 	bic.w	r6, r6, #288	; 0x120
 800a822:	6016      	str	r6, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a824:	6896      	ldr	r6, [r2, #8]
 800a826:	4035      	ands	r5, r6
 800a828:	6095      	str	r5, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800a82a:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a82e:	66e3      	str	r3, [r4, #108]	; 0x6c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a830:	6815      	ldr	r5, [r2, #0]
        huart->RxISR = NULL;
 800a832:	6723      	str	r3, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a834:	f025 0510 	bic.w	r5, r5, #16
 800a838:	6015      	str	r5, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a83a:	f7ff feaf 	bl	800a59c <HAL_UARTEx_RxEventCallback>
 800a83e:	e6e0      	b.n	800a602 <HAL_UART_IRQHandler+0x62>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a840:	4620      	mov	r0, r4
}
 800a842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a846:	f000 bbad 	b.w	800afa4 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 800a84a:	4620      	mov	r0, r4
 800a84c:	f7ff fe9a 	bl	800a584 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a850:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 800a854:	e6d5      	b.n	800a602 <HAL_UART_IRQHandler+0x62>
 800a856:	bf00      	nop
 800a858:	10000001 	.word	0x10000001
 800a85c:	04000120 	.word	0x04000120
 800a860:	effffffe 	.word	0xeffffffe
 800a864:	0800a589 	.word	0x0800a589

0800a868 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a868:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a86a:	07da      	lsls	r2, r3, #31
{
 800a86c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a86e:	d506      	bpl.n	800a87e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a870:	6801      	ldr	r1, [r0, #0]
 800a872:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800a874:	684a      	ldr	r2, [r1, #4]
 800a876:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a87a:	4322      	orrs	r2, r4
 800a87c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a87e:	079c      	lsls	r4, r3, #30
 800a880:	d506      	bpl.n	800a890 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a882:	6801      	ldr	r1, [r0, #0]
 800a884:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800a886:	684a      	ldr	r2, [r1, #4]
 800a888:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a88c:	4322      	orrs	r2, r4
 800a88e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a890:	0759      	lsls	r1, r3, #29
 800a892:	d506      	bpl.n	800a8a2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a894:	6801      	ldr	r1, [r0, #0]
 800a896:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a898:	684a      	ldr	r2, [r1, #4]
 800a89a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a89e:	4322      	orrs	r2, r4
 800a8a0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8a2:	071a      	lsls	r2, r3, #28
 800a8a4:	d506      	bpl.n	800a8b4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8a6:	6801      	ldr	r1, [r0, #0]
 800a8a8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800a8aa:	684a      	ldr	r2, [r1, #4]
 800a8ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a8b0:	4322      	orrs	r2, r4
 800a8b2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8b4:	06dc      	lsls	r4, r3, #27
 800a8b6:	d506      	bpl.n	800a8c6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8b8:	6801      	ldr	r1, [r0, #0]
 800a8ba:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800a8bc:	688a      	ldr	r2, [r1, #8]
 800a8be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a8c2:	4322      	orrs	r2, r4
 800a8c4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8c6:	0699      	lsls	r1, r3, #26
 800a8c8:	d506      	bpl.n	800a8d8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8ca:	6801      	ldr	r1, [r0, #0]
 800a8cc:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800a8ce:	688a      	ldr	r2, [r1, #8]
 800a8d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a8d4:	4322      	orrs	r2, r4
 800a8d6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a8d8:	065a      	lsls	r2, r3, #25
 800a8da:	d50a      	bpl.n	800a8f2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a8dc:	6801      	ldr	r1, [r0, #0]
 800a8de:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800a8e0:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a8e2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a8e6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800a8ea:	ea42 0204 	orr.w	r2, r2, r4
 800a8ee:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a8f0:	d00b      	beq.n	800a90a <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8f2:	061b      	lsls	r3, r3, #24
 800a8f4:	d506      	bpl.n	800a904 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8f6:	6802      	ldr	r2, [r0, #0]
 800a8f8:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800a8fa:	6853      	ldr	r3, [r2, #4]
 800a8fc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a900:	430b      	orrs	r3, r1
 800a902:	6053      	str	r3, [r2, #4]
}
 800a904:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a908:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a90a:	684a      	ldr	r2, [r1, #4]
 800a90c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800a90e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800a912:	4322      	orrs	r2, r4
 800a914:	604a      	str	r2, [r1, #4]
 800a916:	e7ec      	b.n	800a8f2 <UART_AdvFeatureConfig+0x8a>

0800a918 <UART_CheckIdleState>:
{
 800a918:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a91a:	2300      	movs	r3, #0
{
 800a91c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a91e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800a922:	f7f9 fc7f 	bl	8004224 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a926:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800a928:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	0711      	lsls	r1, r2, #28
 800a92e:	d40d      	bmi.n	800a94c <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	0752      	lsls	r2, r2, #29
 800a934:	d431      	bmi.n	800a99a <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a936:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800a938:	2220      	movs	r2, #32
  return HAL_OK;
 800a93a:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800a93c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a940:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a944:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a948:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800a94a:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a94c:	69da      	ldr	r2, [r3, #28]
 800a94e:	0292      	lsls	r2, r2, #10
 800a950:	d4ee      	bmi.n	800a930 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a952:	f7f9 fc67 	bl	8004224 <HAL_GetTick>
 800a956:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a958:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a95a:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800a95e:	d22d      	bcs.n	800a9bc <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	0750      	lsls	r0, r2, #29
 800a964:	d5f2      	bpl.n	800a94c <UART_CheckIdleState+0x34>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a966:	69da      	ldr	r2, [r3, #28]
 800a968:	0511      	lsls	r1, r2, #20
 800a96a:	d5ef      	bpl.n	800a94c <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a96c:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 800a970:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 800a972:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 800a974:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a976:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a978:	6819      	ldr	r1, [r3, #0]
 800a97a:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 800a97e:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a980:	6899      	ldr	r1, [r3, #8]
 800a982:	f021 0101 	bic.w	r1, r1, #1
 800a986:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800a988:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800a98c:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a990:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a994:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 800a998:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a99a:	69db      	ldr	r3, [r3, #28]
 800a99c:	0258      	lsls	r0, r3, #9
 800a99e:	d4ca      	bmi.n	800a936 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9a0:	f7f9 fc40 	bl	8004224 <HAL_GetTick>
 800a9a4:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a9a6:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9a8:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800a9ac:	d206      	bcs.n	800a9bc <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	0751      	lsls	r1, r2, #29
 800a9b2:	d5f2      	bpl.n	800a99a <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9b4:	69da      	ldr	r2, [r3, #28]
 800a9b6:	0512      	lsls	r2, r2, #20
 800a9b8:	d5ef      	bpl.n	800a99a <UART_CheckIdleState+0x82>
 800a9ba:	e7d7      	b.n	800a96c <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a9bc:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 800a9be:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800a9c0:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 800a9c2:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a9c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a9c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9ca:	689a      	ldr	r2, [r3, #8]
 800a9cc:	f022 0201 	bic.w	r2, r2, #1
 800a9d0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800a9d2:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800a9d6:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a9da:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 800a9de:	bd38      	pop	{r3, r4, r5, pc}

0800a9e0 <HAL_UART_Init>:
  if (huart == NULL)
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	f000 8198 	beq.w	800ad16 <HAL_UART_Init+0x336>
  if (huart->gState == HAL_UART_STATE_RESET)
 800a9e6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800a9ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	b086      	sub	sp, #24
  if (huart->gState == HAL_UART_STATE_RESET)
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d05f      	beq.n	800aab6 <HAL_UART_Init+0xd6>
  __HAL_UART_DISABLE(huart);
 800a9f6:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a9f8:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9fa:	6925      	ldr	r5, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 800a9fc:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa00:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800aa02:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa04:	432a      	orrs	r2, r5
 800aa06:	6965      	ldr	r5, [r4, #20]
  __HAL_UART_DISABLE(huart);
 800aa08:	f020 0001 	bic.w	r0, r0, #1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa0c:	49cb      	ldr	r1, [pc, #812]	; (800ad3c <HAL_UART_Init+0x35c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa0e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa10:	68e6      	ldr	r6, [r4, #12]
  __HAL_UART_DISABLE(huart);
 800aa12:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa14:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa16:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa18:	4302      	orrs	r2, r0
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa1a:	69a7      	ldr	r7, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa1c:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa1e:	4dc8      	ldr	r5, [pc, #800]	; (800ad40 <HAL_UART_Init+0x360>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa20:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa22:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa24:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa26:	685a      	ldr	r2, [r3, #4]
 800aa28:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800aa2c:	ea42 0206 	orr.w	r2, r2, r6
 800aa30:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa32:	d045      	beq.n	800aac0 <HAL_UART_Init+0xe0>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa34:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800aa36:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa38:	49c2      	ldr	r1, [pc, #776]	; (800ad44 <HAL_UART_Init+0x364>)
    tmpreg |= huart->Init.OneBitSampling;
 800aa3a:	433a      	orrs	r2, r7
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa3c:	4ec2      	ldr	r6, [pc, #776]	; (800ad48 <HAL_UART_Init+0x368>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa3e:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa40:	6a65      	ldr	r5, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa42:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa44:	ea42 0201 	orr.w	r2, r2, r1
 800aa48:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa4c:	f022 020f 	bic.w	r2, r2, #15
 800aa50:	ea42 0205 	orr.w	r2, r2, r5
 800aa54:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa56:	d025      	beq.n	800aaa4 <HAL_UART_Init+0xc4>
 800aa58:	4abc      	ldr	r2, [pc, #752]	; (800ad4c <HAL_UART_Init+0x36c>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	f000 808c 	beq.w	800ab78 <HAL_UART_Init+0x198>
 800aa60:	4abb      	ldr	r2, [pc, #748]	; (800ad50 <HAL_UART_Init+0x370>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	f000 8159 	beq.w	800ad1a <HAL_UART_Init+0x33a>
 800aa68:	4aba      	ldr	r2, [pc, #744]	; (800ad54 <HAL_UART_Init+0x374>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	f000 813f 	beq.w	800acee <HAL_UART_Init+0x30e>
 800aa70:	4ab9      	ldr	r2, [pc, #740]	; (800ad58 <HAL_UART_Init+0x378>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	f000 81fa 	beq.w	800ae6c <HAL_UART_Init+0x48c>
 800aa78:	4ab8      	ldr	r2, [pc, #736]	; (800ad5c <HAL_UART_Init+0x37c>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	f000 8265 	beq.w	800af4a <HAL_UART_Init+0x56a>
 800aa80:	4ab7      	ldr	r2, [pc, #732]	; (800ad60 <HAL_UART_Init+0x380>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	f000 826b 	beq.w	800af5e <HAL_UART_Init+0x57e>
 800aa88:	4ab6      	ldr	r2, [pc, #728]	; (800ad64 <HAL_UART_Init+0x384>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	f000 8251 	beq.w	800af32 <HAL_UART_Init+0x552>
  huart->NbRxDataToProcess = 1;
 800aa90:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800aa94:	2300      	movs	r3, #0
    return HAL_ERROR;
 800aa96:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 800aa98:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800aa9a:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
}
 800aa9e:	b006      	add	sp, #24
 800aaa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aaa4:	4bb0      	ldr	r3, [pc, #704]	; (800ad68 <HAL_UART_Init+0x388>)
 800aaa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aaac:	2b28      	cmp	r3, #40	; 0x28
 800aaae:	d8ef      	bhi.n	800aa90 <HAL_UART_Init+0xb0>
 800aab0:	4aae      	ldr	r2, [pc, #696]	; (800ad6c <HAL_UART_Init+0x38c>)
 800aab2:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800aab4:	e068      	b.n	800ab88 <HAL_UART_Init+0x1a8>
    huart->Lock = HAL_UNLOCKED;
 800aab6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800aaba:	f7f9 f99b 	bl	8003df4 <HAL_UART_MspInit>
 800aabe:	e79a      	b.n	800a9f6 <HAL_UART_Init+0x16>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aac0:	6899      	ldr	r1, [r3, #8]
 800aac2:	4aa0      	ldr	r2, [pc, #640]	; (800ad44 <HAL_UART_Init+0x364>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aac4:	48a8      	ldr	r0, [pc, #672]	; (800ad68 <HAL_UART_Init+0x388>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aac6:	400a      	ands	r2, r1
 800aac8:	433a      	orrs	r2, r7
 800aaca:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aace:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aad0:	f022 020f 	bic.w	r2, r2, #15
 800aad4:	430a      	orrs	r2, r1
 800aad6:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aad8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800aada:	f003 0307 	and.w	r3, r3, #7
 800aade:	2b05      	cmp	r3, #5
 800aae0:	d8d6      	bhi.n	800aa90 <HAL_UART_Init+0xb0>
 800aae2:	4aa3      	ldr	r2, [pc, #652]	; (800ad70 <HAL_UART_Init+0x390>)
 800aae4:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 800aae6:	2b20      	cmp	r3, #32
 800aae8:	f200 8121 	bhi.w	800ad2e <HAL_UART_Init+0x34e>
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d9cf      	bls.n	800aa90 <HAL_UART_Init+0xb0>
 800aaf0:	3b02      	subs	r3, #2
 800aaf2:	2b1e      	cmp	r3, #30
 800aaf4:	d8cc      	bhi.n	800aa90 <HAL_UART_Init+0xb0>
 800aaf6:	a201      	add	r2, pc, #4	; (adr r2, 800aafc <HAL_UART_Init+0x11c>)
 800aaf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aafc:	0800aef3 	.word	0x0800aef3
 800ab00:	0800aa91 	.word	0x0800aa91
 800ab04:	0800aee9 	.word	0x0800aee9
 800ab08:	0800aa91 	.word	0x0800aa91
 800ab0c:	0800aa91 	.word	0x0800aa91
 800ab10:	0800aa91 	.word	0x0800aa91
 800ab14:	0800aed9 	.word	0x0800aed9
 800ab18:	0800aa91 	.word	0x0800aa91
 800ab1c:	0800aa91 	.word	0x0800aa91
 800ab20:	0800aa91 	.word	0x0800aa91
 800ab24:	0800aa91 	.word	0x0800aa91
 800ab28:	0800aa91 	.word	0x0800aa91
 800ab2c:	0800aa91 	.word	0x0800aa91
 800ab30:	0800aa91 	.word	0x0800aa91
 800ab34:	0800aec5 	.word	0x0800aec5
 800ab38:	0800aa91 	.word	0x0800aa91
 800ab3c:	0800aa91 	.word	0x0800aa91
 800ab40:	0800aa91 	.word	0x0800aa91
 800ab44:	0800aa91 	.word	0x0800aa91
 800ab48:	0800aa91 	.word	0x0800aa91
 800ab4c:	0800aa91 	.word	0x0800aa91
 800ab50:	0800aa91 	.word	0x0800aa91
 800ab54:	0800aa91 	.word	0x0800aa91
 800ab58:	0800aa91 	.word	0x0800aa91
 800ab5c:	0800aa91 	.word	0x0800aa91
 800ab60:	0800aa91 	.word	0x0800aa91
 800ab64:	0800aa91 	.word	0x0800aa91
 800ab68:	0800aa91 	.word	0x0800aa91
 800ab6c:	0800aa91 	.word	0x0800aa91
 800ab70:	0800aa91 	.word	0x0800aa91
 800ab74:	0800ac8b 	.word	0x0800ac8b
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab78:	4b7b      	ldr	r3, [pc, #492]	; (800ad68 <HAL_UART_Init+0x388>)
 800ab7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab7c:	f003 0307 	and.w	r3, r3, #7
 800ab80:	2b05      	cmp	r3, #5
 800ab82:	d885      	bhi.n	800aa90 <HAL_UART_Init+0xb0>
 800ab84:	4a7b      	ldr	r2, [pc, #492]	; (800ad74 <HAL_UART_Init+0x394>)
 800ab86:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab88:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ab8c:	f000 80fe 	beq.w	800ad8c <HAL_UART_Init+0x3ac>
    switch (clocksource)
 800ab90:	2b20      	cmp	r3, #32
 800ab92:	f200 80ba 	bhi.w	800ad0a <HAL_UART_Init+0x32a>
 800ab96:	2b20      	cmp	r3, #32
 800ab98:	f63f af7a 	bhi.w	800aa90 <HAL_UART_Init+0xb0>
 800ab9c:	a201      	add	r2, pc, #4	; (adr r2, 800aba4 <HAL_UART_Init+0x1c4>)
 800ab9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba2:	bf00      	nop
 800aba4:	0800aebf 	.word	0x0800aebf
 800aba8:	0800aeb9 	.word	0x0800aeb9
 800abac:	0800aa91 	.word	0x0800aa91
 800abb0:	0800aa91 	.word	0x0800aa91
 800abb4:	0800aeaf 	.word	0x0800aeaf
 800abb8:	0800aa91 	.word	0x0800aa91
 800abbc:	0800aa91 	.word	0x0800aa91
 800abc0:	0800aa91 	.word	0x0800aa91
 800abc4:	0800ae95 	.word	0x0800ae95
 800abc8:	0800aa91 	.word	0x0800aa91
 800abcc:	0800aa91 	.word	0x0800aa91
 800abd0:	0800aa91 	.word	0x0800aa91
 800abd4:	0800aa91 	.word	0x0800aa91
 800abd8:	0800aa91 	.word	0x0800aa91
 800abdc:	0800aa91 	.word	0x0800aa91
 800abe0:	0800aa91 	.word	0x0800aa91
 800abe4:	0800ae81 	.word	0x0800ae81
 800abe8:	0800aa91 	.word	0x0800aa91
 800abec:	0800aa91 	.word	0x0800aa91
 800abf0:	0800aa91 	.word	0x0800aa91
 800abf4:	0800aa91 	.word	0x0800aa91
 800abf8:	0800aa91 	.word	0x0800aa91
 800abfc:	0800aa91 	.word	0x0800aa91
 800ac00:	0800aa91 	.word	0x0800aa91
 800ac04:	0800aa91 	.word	0x0800aa91
 800ac08:	0800aa91 	.word	0x0800aa91
 800ac0c:	0800aa91 	.word	0x0800aa91
 800ac10:	0800aa91 	.word	0x0800aa91
 800ac14:	0800aa91 	.word	0x0800aa91
 800ac18:	0800aa91 	.word	0x0800aa91
 800ac1c:	0800aa91 	.word	0x0800aa91
 800ac20:	0800aa91 	.word	0x0800aa91
 800ac24:	0800ac29 	.word	0x0800ac29
        pclk = (uint32_t) CSI_VALUE;
 800ac28:	4853      	ldr	r0, [pc, #332]	; (800ad78 <HAL_UART_Init+0x398>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac2a:	4b54      	ldr	r3, [pc, #336]	; (800ad7c <HAL_UART_Init+0x39c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac2c:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac30:	6862      	ldr	r2, [r4, #4]
 800ac32:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800ac36:	fbb0 f3f3 	udiv	r3, r0, r3
 800ac3a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800ac3e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac42:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac44:	f1a3 0210 	sub.w	r2, r3, #16
 800ac48:	428a      	cmp	r2, r1
 800ac4a:	f63f af21 	bhi.w	800aa90 <HAL_UART_Init+0xb0>
        huart->Instance->BRR = usartdiv;
 800ac4e:	6820      	ldr	r0, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800ac50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  huart->RxISR = NULL;
 800ac54:	2200      	movs	r2, #0
        huart->Instance->BRR = usartdiv;
 800ac56:	60c3      	str	r3, [r0, #12]
  huart->NbRxDataToProcess = 1;
 800ac58:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800ac5a:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d14e      	bne.n	800ad02 <HAL_UART_Init+0x322>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac64:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800ac66:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac68:	685a      	ldr	r2, [r3, #4]
 800ac6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac70:	689a      	ldr	r2, [r3, #8]
 800ac72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac76:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	f042 0201 	orr.w	r2, r2, #1
 800ac7e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800ac80:	f7ff fe4a 	bl	800a918 <UART_CheckIdleState>
}
 800ac84:	b006      	add	sp, #24
 800ac86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = (uint32_t) CSI_VALUE;
 800ac8a:	483b      	ldr	r0, [pc, #236]	; (800ad78 <HAL_UART_Init+0x398>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac8c:	4b3b      	ldr	r3, [pc, #236]	; (800ad7c <HAL_UART_Init+0x39c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac8e:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac90:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac94:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac98:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac9c:	428b      	cmp	r3, r1
 800ac9e:	f4ff aef7 	bcc.w	800aa90 <HAL_UART_Init+0xb0>
 800aca2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800aca6:	f63f aef3 	bhi.w	800aa90 <HAL_UART_Init+0xb0>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acaa:	f04f 0800 	mov.w	r8, #0
 800acae:	2300      	movs	r3, #0
 800acb0:	4641      	mov	r1, r8
 800acb2:	f7f5 fb6d 	bl	8000390 <__aeabi_uldivmod>
 800acb6:	462a      	mov	r2, r5
 800acb8:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 800acbc:	4643      	mov	r3, r8
 800acbe:	020f      	lsls	r7, r1, #8
 800acc0:	0206      	lsls	r6, r0, #8
 800acc2:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800acc6:	eb16 000c 	adds.w	r0, r6, ip
 800acca:	f147 0100 	adc.w	r1, r7, #0
 800acce:	f7f5 fb5f 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800acd2:	4b2b      	ldr	r3, [pc, #172]	; (800ad80 <HAL_UART_Init+0x3a0>)
 800acd4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800acd8:	429a      	cmp	r2, r3
 800acda:	f63f aed9 	bhi.w	800aa90 <HAL_UART_Init+0xb0>
          huart->Instance->BRR = usartdiv;
 800acde:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800ace0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 800ace4:	60d0      	str	r0, [r2, #12]
  huart->NbRxDataToProcess = 1;
 800ace6:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800ace8:	e9c4 881c 	strd	r8, r8, [r4, #112]	; 0x70
 800acec:	e7b7      	b.n	800ac5e <HAL_UART_Init+0x27e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800acee:	4b1e      	ldr	r3, [pc, #120]	; (800ad68 <HAL_UART_Init+0x388>)
 800acf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acf2:	f003 0307 	and.w	r3, r3, #7
 800acf6:	2b05      	cmp	r3, #5
 800acf8:	f63f aeca 	bhi.w	800aa90 <HAL_UART_Init+0xb0>
 800acfc:	4a21      	ldr	r2, [pc, #132]	; (800ad84 <HAL_UART_Init+0x3a4>)
 800acfe:	5cd3      	ldrb	r3, [r2, r3]
 800ad00:	e742      	b.n	800ab88 <HAL_UART_Init+0x1a8>
    UART_AdvFeatureConfig(huart);
 800ad02:	4620      	mov	r0, r4
 800ad04:	f7ff fdb0 	bl	800a868 <UART_AdvFeatureConfig>
 800ad08:	e7ac      	b.n	800ac64 <HAL_UART_Init+0x284>
    switch (clocksource)
 800ad0a:	2b40      	cmp	r3, #64	; 0x40
 800ad0c:	f47f aec0 	bne.w	800aa90 <HAL_UART_Init+0xb0>
 800ad10:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ad14:	e789      	b.n	800ac2a <HAL_UART_Init+0x24a>
    return HAL_ERROR;
 800ad16:	2001      	movs	r0, #1
}
 800ad18:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad1a:	4b13      	ldr	r3, [pc, #76]	; (800ad68 <HAL_UART_Init+0x388>)
 800ad1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad1e:	f003 0307 	and.w	r3, r3, #7
 800ad22:	2b05      	cmp	r3, #5
 800ad24:	f63f aeb4 	bhi.w	800aa90 <HAL_UART_Init+0xb0>
 800ad28:	4a17      	ldr	r2, [pc, #92]	; (800ad88 <HAL_UART_Init+0x3a8>)
 800ad2a:	5cd3      	ldrb	r3, [r2, r3]
 800ad2c:	e72c      	b.n	800ab88 <HAL_UART_Init+0x1a8>
    switch (clocksource)
 800ad2e:	2b40      	cmp	r3, #64	; 0x40
 800ad30:	f47f aeae 	bne.w	800aa90 <HAL_UART_Init+0xb0>
 800ad34:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ad38:	e7a8      	b.n	800ac8c <HAL_UART_Init+0x2ac>
 800ad3a:	bf00      	nop
 800ad3c:	cfff69f3 	.word	0xcfff69f3
 800ad40:	58000c00 	.word	0x58000c00
 800ad44:	11fff4ff 	.word	0x11fff4ff
 800ad48:	40011000 	.word	0x40011000
 800ad4c:	40004400 	.word	0x40004400
 800ad50:	40004800 	.word	0x40004800
 800ad54:	40004c00 	.word	0x40004c00
 800ad58:	40005000 	.word	0x40005000
 800ad5c:	40011400 	.word	0x40011400
 800ad60:	40007800 	.word	0x40007800
 800ad64:	40007c00 	.word	0x40007c00
 800ad68:	58024400 	.word	0x58024400
 800ad6c:	08018288 	.word	0x08018288
 800ad70:	080182bc 	.word	0x080182bc
 800ad74:	080182b4 	.word	0x080182b4
 800ad78:	003d0900 	.word	0x003d0900
 800ad7c:	080182c4 	.word	0x080182c4
 800ad80:	000ffcff 	.word	0x000ffcff
 800ad84:	080182b4 	.word	0x080182b4
 800ad88:	080182b4 	.word	0x080182b4
    switch (clocksource)
 800ad8c:	2b20      	cmp	r3, #32
 800ad8e:	d86a      	bhi.n	800ae66 <HAL_UART_Init+0x486>
 800ad90:	2b20      	cmp	r3, #32
 800ad92:	f63f ae7d 	bhi.w	800aa90 <HAL_UART_Init+0xb0>
 800ad96:	a201      	add	r2, pc, #4	; (adr r2, 800ad9c <HAL_UART_Init+0x3bc>)
 800ad98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9c:	0800af05 	.word	0x0800af05
 800ada0:	0800aef9 	.word	0x0800aef9
 800ada4:	0800aa91 	.word	0x0800aa91
 800ada8:	0800aa91 	.word	0x0800aa91
 800adac:	0800af29 	.word	0x0800af29
 800adb0:	0800aa91 	.word	0x0800aa91
 800adb4:	0800aa91 	.word	0x0800aa91
 800adb8:	0800aa91 	.word	0x0800aa91
 800adbc:	0800af1f 	.word	0x0800af1f
 800adc0:	0800aa91 	.word	0x0800aa91
 800adc4:	0800aa91 	.word	0x0800aa91
 800adc8:	0800aa91 	.word	0x0800aa91
 800adcc:	0800aa91 	.word	0x0800aa91
 800add0:	0800aa91 	.word	0x0800aa91
 800add4:	0800aa91 	.word	0x0800aa91
 800add8:	0800aa91 	.word	0x0800aa91
 800addc:	0800af0b 	.word	0x0800af0b
 800ade0:	0800aa91 	.word	0x0800aa91
 800ade4:	0800aa91 	.word	0x0800aa91
 800ade8:	0800aa91 	.word	0x0800aa91
 800adec:	0800aa91 	.word	0x0800aa91
 800adf0:	0800aa91 	.word	0x0800aa91
 800adf4:	0800aa91 	.word	0x0800aa91
 800adf8:	0800aa91 	.word	0x0800aa91
 800adfc:	0800aa91 	.word	0x0800aa91
 800ae00:	0800aa91 	.word	0x0800aa91
 800ae04:	0800aa91 	.word	0x0800aa91
 800ae08:	0800aa91 	.word	0x0800aa91
 800ae0c:	0800aa91 	.word	0x0800aa91
 800ae10:	0800aa91 	.word	0x0800aa91
 800ae14:	0800aa91 	.word	0x0800aa91
 800ae18:	0800aa91 	.word	0x0800aa91
 800ae1c:	0800ae21 	.word	0x0800ae21
        pclk = (uint32_t) CSI_VALUE;
 800ae20:	4857      	ldr	r0, [pc, #348]	; (800af80 <HAL_UART_Init+0x5a0>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae22:	4b58      	ldr	r3, [pc, #352]	; (800af84 <HAL_UART_Init+0x5a4>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae24:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae28:	6862      	ldr	r2, [r4, #4]
 800ae2a:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]
 800ae2e:	0853      	lsrs	r3, r2, #1
 800ae30:	fbb0 f0f5 	udiv	r0, r0, r5
 800ae34:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800ae38:	fbb0 f0f2 	udiv	r0, r0, r2
 800ae3c:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae3e:	f1a2 0310 	sub.w	r3, r2, #16
 800ae42:	428b      	cmp	r3, r1
 800ae44:	f63f ae24 	bhi.w	800aa90 <HAL_UART_Init+0xb0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae48:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae4c:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 800ae50:	6825      	ldr	r5, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800ae52:	f04f 1001 	mov.w	r0, #65537	; 0x10001
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae56:	b29b      	uxth	r3, r3
  huart->RxISR = NULL;
 800ae58:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	60eb      	str	r3, [r5, #12]
  huart->NbRxDataToProcess = 1;
 800ae5e:	66a0      	str	r0, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800ae60:	e9c4 111c 	strd	r1, r1, [r4, #112]	; 0x70
  return ret;
 800ae64:	e6fb      	b.n	800ac5e <HAL_UART_Init+0x27e>
    switch (clocksource)
 800ae66:	2b40      	cmp	r3, #64	; 0x40
 800ae68:	d0db      	beq.n	800ae22 <HAL_UART_Init+0x442>
 800ae6a:	e611      	b.n	800aa90 <HAL_UART_Init+0xb0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae6c:	4b46      	ldr	r3, [pc, #280]	; (800af88 <HAL_UART_Init+0x5a8>)
 800ae6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae70:	f003 0307 	and.w	r3, r3, #7
 800ae74:	2b05      	cmp	r3, #5
 800ae76:	f63f ae0b 	bhi.w	800aa90 <HAL_UART_Init+0xb0>
 800ae7a:	4a44      	ldr	r2, [pc, #272]	; (800af8c <HAL_UART_Init+0x5ac>)
 800ae7c:	5cd3      	ldrb	r3, [r2, r3]
 800ae7e:	e683      	b.n	800ab88 <HAL_UART_Init+0x1a8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae80:	4b41      	ldr	r3, [pc, #260]	; (800af88 <HAL_UART_Init+0x5a8>)
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	0692      	lsls	r2, r2, #26
 800ae86:	d574      	bpl.n	800af72 <HAL_UART_Init+0x592>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4841      	ldr	r0, [pc, #260]	; (800af90 <HAL_UART_Init+0x5b0>)
 800ae8c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ae90:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800ae92:	e6ca      	b.n	800ac2a <HAL_UART_Init+0x24a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae94:	a803      	add	r0, sp, #12
 800ae96:	f7fe fd3d 	bl	8009914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae9a:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d152      	bne.n	800af46 <HAL_UART_Init+0x566>
  huart->NbRxDataToProcess = 1;
 800aea0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800aea4:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800aea6:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800aea8:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  return ret;
 800aeac:	e6d7      	b.n	800ac5e <HAL_UART_Init+0x27e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeae:	4668      	mov	r0, sp
 800aeb0:	f7fe fc84 	bl	80097bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aeb4:	9801      	ldr	r0, [sp, #4]
        break;
 800aeb6:	e7f1      	b.n	800ae9c <HAL_UART_Init+0x4bc>
        pclk = HAL_RCC_GetPCLK2Freq();
 800aeb8:	f7fd fdd8 	bl	8008a6c <HAL_RCC_GetPCLK2Freq>
        break;
 800aebc:	e7ee      	b.n	800ae9c <HAL_UART_Init+0x4bc>
        pclk = HAL_RCC_GetPCLK1Freq();
 800aebe:	f7fd fd8d 	bl	80089dc <HAL_RCC_GetPCLK1Freq>
        break;
 800aec2:	e7eb      	b.n	800ae9c <HAL_UART_Init+0x4bc>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aec4:	4b30      	ldr	r3, [pc, #192]	; (800af88 <HAL_UART_Init+0x5a8>)
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	0690      	lsls	r0, r2, #26
 800aeca:	d554      	bpl.n	800af76 <HAL_UART_Init+0x596>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4830      	ldr	r0, [pc, #192]	; (800af90 <HAL_UART_Init+0x5b0>)
 800aed0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800aed4:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800aed6:	e6d9      	b.n	800ac8c <HAL_UART_Init+0x2ac>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aed8:	a803      	add	r0, sp, #12
 800aeda:	f7fe fd1b 	bl	8009914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aede:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800aee0:	2800      	cmp	r0, #0
 800aee2:	d0dd      	beq.n	800aea0 <HAL_UART_Init+0x4c0>
 800aee4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aee6:	e6d1      	b.n	800ac8c <HAL_UART_Init+0x2ac>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aee8:	4668      	mov	r0, sp
 800aeea:	f7fe fc67 	bl	80097bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aeee:	9801      	ldr	r0, [sp, #4]
        break;
 800aef0:	e7f6      	b.n	800aee0 <HAL_UART_Init+0x500>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aef2:	f7fe fc51 	bl	8009798 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800aef6:	e7f3      	b.n	800aee0 <HAL_UART_Init+0x500>
        pclk = HAL_RCC_GetPCLK2Freq();
 800aef8:	f7fd fdb8 	bl	8008a6c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d0cf      	beq.n	800aea0 <HAL_UART_Init+0x4c0>
 800af00:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800af02:	e78e      	b.n	800ae22 <HAL_UART_Init+0x442>
        pclk = HAL_RCC_GetPCLK1Freq();
 800af04:	f7fd fd6a 	bl	80089dc <HAL_RCC_GetPCLK1Freq>
        break;
 800af08:	e7f8      	b.n	800aefc <HAL_UART_Init+0x51c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af0a:	4b1f      	ldr	r3, [pc, #124]	; (800af88 <HAL_UART_Init+0x5a8>)
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	0691      	lsls	r1, r2, #26
 800af10:	d533      	bpl.n	800af7a <HAL_UART_Init+0x59a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	481e      	ldr	r0, [pc, #120]	; (800af90 <HAL_UART_Init+0x5b0>)
 800af16:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800af1a:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800af1c:	e781      	b.n	800ae22 <HAL_UART_Init+0x442>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af1e:	a803      	add	r0, sp, #12
 800af20:	f7fe fcf8 	bl	8009914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af24:	9804      	ldr	r0, [sp, #16]
        break;
 800af26:	e7e9      	b.n	800aefc <HAL_UART_Init+0x51c>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af28:	4668      	mov	r0, sp
 800af2a:	f7fe fc47 	bl	80097bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af2e:	9801      	ldr	r0, [sp, #4]
        break;
 800af30:	e7e4      	b.n	800aefc <HAL_UART_Init+0x51c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af32:	4b15      	ldr	r3, [pc, #84]	; (800af88 <HAL_UART_Init+0x5a8>)
 800af34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af36:	f003 0307 	and.w	r3, r3, #7
 800af3a:	2b05      	cmp	r3, #5
 800af3c:	f63f ada8 	bhi.w	800aa90 <HAL_UART_Init+0xb0>
 800af40:	4a14      	ldr	r2, [pc, #80]	; (800af94 <HAL_UART_Init+0x5b4>)
 800af42:	5cd3      	ldrb	r3, [r2, r3]
 800af44:	e620      	b.n	800ab88 <HAL_UART_Init+0x1a8>
 800af46:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800af48:	e66f      	b.n	800ac2a <HAL_UART_Init+0x24a>
 800af4a:	4b0f      	ldr	r3, [pc, #60]	; (800af88 <HAL_UART_Init+0x5a8>)
 800af4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af52:	2b28      	cmp	r3, #40	; 0x28
 800af54:	f63f ad9c 	bhi.w	800aa90 <HAL_UART_Init+0xb0>
 800af58:	4a0f      	ldr	r2, [pc, #60]	; (800af98 <HAL_UART_Init+0x5b8>)
 800af5a:	5cd3      	ldrb	r3, [r2, r3]
 800af5c:	e614      	b.n	800ab88 <HAL_UART_Init+0x1a8>
 800af5e:	4b0a      	ldr	r3, [pc, #40]	; (800af88 <HAL_UART_Init+0x5a8>)
 800af60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af62:	f003 0307 	and.w	r3, r3, #7
 800af66:	2b05      	cmp	r3, #5
 800af68:	f63f ad92 	bhi.w	800aa90 <HAL_UART_Init+0xb0>
 800af6c:	4a0b      	ldr	r2, [pc, #44]	; (800af9c <HAL_UART_Init+0x5bc>)
 800af6e:	5cd3      	ldrb	r3, [r2, r3]
 800af70:	e60a      	b.n	800ab88 <HAL_UART_Init+0x1a8>
          pclk = (uint32_t) HSI_VALUE;
 800af72:	4807      	ldr	r0, [pc, #28]	; (800af90 <HAL_UART_Init+0x5b0>)
 800af74:	e659      	b.n	800ac2a <HAL_UART_Init+0x24a>
          pclk = (uint32_t) HSI_VALUE;
 800af76:	4806      	ldr	r0, [pc, #24]	; (800af90 <HAL_UART_Init+0x5b0>)
 800af78:	e688      	b.n	800ac8c <HAL_UART_Init+0x2ac>
          pclk = (uint32_t) HSI_VALUE;
 800af7a:	4805      	ldr	r0, [pc, #20]	; (800af90 <HAL_UART_Init+0x5b0>)
 800af7c:	e751      	b.n	800ae22 <HAL_UART_Init+0x442>
 800af7e:	bf00      	nop
 800af80:	003d0900 	.word	0x003d0900
 800af84:	080182c4 	.word	0x080182c4
 800af88:	58024400 	.word	0x58024400
 800af8c:	080182b4 	.word	0x080182b4
 800af90:	03d09000 	.word	0x03d09000
 800af94:	080182b4 	.word	0x080182b4
 800af98:	08018288 	.word	0x08018288
 800af9c:	080182b4 	.word	0x080182b4

0800afa0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop

0800afa4 <HAL_UARTEx_RxFifoFullCallback>:
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop

0800afa8 <HAL_UARTEx_TxFifoEmptyCallback>:
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop

0800afac <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afac:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800afb0:	2a01      	cmp	r2, #1
 800afb2:	d017      	beq.n	800afe4 <HAL_UARTEx_DisableFifoMode+0x38>
 800afb4:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 800afb6:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800afb8:	2100      	movs	r1, #0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afba:	681a      	ldr	r2, [r3, #0]
{
 800afbc:	b470      	push	{r4, r5, r6}
  huart->gState = HAL_UART_STATE_BUSY;
 800afbe:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800afc2:	2620      	movs	r6, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afc4:	6814      	ldr	r4, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800afc6:	4608      	mov	r0, r1
  __HAL_UART_DISABLE(huart);
 800afc8:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800afca:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800afce:	f025 0501 	bic.w	r5, r5, #1
 800afd2:	6015      	str	r5, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800afd4:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afd6:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800afd8:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800afdc:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
}
 800afe0:	bc70      	pop	{r4, r5, r6}
 800afe2:	4770      	bx	lr
  __HAL_LOCK(huart);
 800afe4:	2002      	movs	r0, #2
}
 800afe6:	4770      	bx	lr

0800afe8 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afe8:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800afec:	2a01      	cmp	r2, #1
 800afee:	d033      	beq.n	800b058 <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 800aff0:	4603      	mov	r3, r0
 800aff2:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aff4:	681a      	ldr	r2, [r3, #0]
{
 800aff6:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 800aff8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800affc:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800affe:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b000:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800b002:	f020 0001 	bic.w	r0, r0, #1
 800b006:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b008:	6890      	ldr	r0, [r2, #8]
 800b00a:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800b00e:	4301      	orrs	r1, r0
 800b010:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b012:	b1f5      	cbz	r5, 800b052 <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b014:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b016:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b018:	f3c6 6642 	ubfx	r6, r6, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b01c:	480f      	ldr	r0, [pc, #60]	; (800b05c <HAL_UARTEx_SetTxFifoThreshold+0x74>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b01e:	0f6d      	lsrs	r5, r5, #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800b020:	4f0f      	ldr	r7, [pc, #60]	; (800b060 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b022:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b024:	5d40      	ldrb	r0, [r0, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b026:	0109      	lsls	r1, r1, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800b028:	5dbe      	ldrb	r6, [r7, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b02a:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 800b02c:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b02e:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b032:	fbb0 f0f5 	udiv	r0, r0, r5
  huart->gState = HAL_UART_STATE_READY;
 800b036:	2520      	movs	r5, #32
 800b038:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800b03c:	2100      	movs	r1, #0
 800b03e:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b042:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800b044:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800b046:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b04a:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800b04e:	bcf0      	pop	{r4, r5, r6, r7}
 800b050:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800b052:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800b054:	4608      	mov	r0, r1
 800b056:	e7ee      	b.n	800b036 <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 800b058:	2002      	movs	r0, #2
}
 800b05a:	4770      	bx	lr
 800b05c:	080182e4 	.word	0x080182e4
 800b060:	080182dc 	.word	0x080182dc

0800b064 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800b064:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800b068:	2a01      	cmp	r2, #1
 800b06a:	d033      	beq.n	800b0d4 <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 800b06c:	4603      	mov	r3, r0
 800b06e:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b070:	681a      	ldr	r2, [r3, #0]
{
 800b072:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 800b074:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b078:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800b07a:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b07c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800b07e:	f020 0001 	bic.w	r0, r0, #1
 800b082:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b084:	6890      	ldr	r0, [r2, #8]
 800b086:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800b08a:	4301      	orrs	r1, r0
 800b08c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b08e:	b1f5      	cbz	r5, 800b0ce <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b090:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b092:	6895      	ldr	r5, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b094:	f3c6 6642 	ubfx	r6, r6, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b098:	480f      	ldr	r0, [pc, #60]	; (800b0d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b09a:	0f6d      	lsrs	r5, r5, #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800b09c:	4f0f      	ldr	r7, [pc, #60]	; (800b0dc <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b09e:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0a0:	5d40      	ldrb	r0, [r0, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0a2:	0109      	lsls	r1, r1, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800b0a4:	5dbe      	ldrb	r6, [r7, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0a6:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 800b0a8:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0aa:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0ae:	fbb0 f0f5 	udiv	r0, r0, r5
  huart->gState = HAL_UART_STATE_READY;
 800b0b2:	2520      	movs	r5, #32
 800b0b4:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0be:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800b0c0:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800b0c2:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b0c6:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800b0ca:	bcf0      	pop	{r4, r5, r6, r7}
 800b0cc:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800b0ce:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800b0d0:	4608      	mov	r0, r1
 800b0d2:	e7ee      	b.n	800b0b2 <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 800b0d4:	2002      	movs	r0, #2
}
 800b0d6:	4770      	bx	lr
 800b0d8:	080182e4 	.word	0x080182e4
 800b0dc:	080182dc 	.word	0x080182dc

0800b0e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b0e0:	b084      	sub	sp, #16
 800b0e2:	b470      	push	{r4, r5, r6}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b0e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
{
 800b0e6:	ad04      	add	r5, sp, #16
 800b0e8:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b0ea:	2e01      	cmp	r6, #1
{
 800b0ec:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b0f0:	d137      	bne.n	800b162 <USB_CoreInit+0x82>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0f2:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b0f4:	4b31      	ldr	r3, [pc, #196]	; (800b1bc <USB_CoreInit+0xdc>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800b0fa:	9910      	ldr	r1, [sp, #64]	; 0x40
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0fc:	6382      	str	r2, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 800b0fe:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b100:	68c2      	ldr	r2, [r0, #12]
 800b102:	ea03 0302 	and.w	r3, r3, r2
 800b106:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b108:	68c3      	ldr	r3, [r0, #12]
 800b10a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b10e:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800b110:	d04a      	beq.n	800b1a8 <USB_CoreInit+0xc8>
{
 800b112:	4b2b      	ldr	r3, [pc, #172]	; (800b1c0 <USB_CoreInit+0xe0>)
 800b114:	e001      	b.n	800b11a <USB_CoreInit+0x3a>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b116:	3b01      	subs	r3, #1
 800b118:	d04b      	beq.n	800b1b2 <USB_CoreInit+0xd2>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b11a:	6922      	ldr	r2, [r4, #16]
 800b11c:	2a00      	cmp	r2, #0
 800b11e:	dafa      	bge.n	800b116 <USB_CoreInit+0x36>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b120:	6922      	ldr	r2, [r4, #16]
 800b122:	4b27      	ldr	r3, [pc, #156]	; (800b1c0 <USB_CoreInit+0xe0>)
 800b124:	f042 0201 	orr.w	r2, r2, #1
 800b128:	6122      	str	r2, [r4, #16]

  do
  {
    if (++count > 200000U)
 800b12a:	e001      	b.n	800b130 <USB_CoreInit+0x50>
 800b12c:	3b01      	subs	r3, #1
 800b12e:	d040      	beq.n	800b1b2 <USB_CoreInit+0xd2>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b130:	6920      	ldr	r0, [r4, #16]
 800b132:	f010 0001 	ands.w	r0, r0, #1
 800b136:	d1f9      	bne.n	800b12c <USB_CoreInit+0x4c>
  if (cfg.dma_enable == 1U)
 800b138:	9b07      	ldr	r3, [sp, #28]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d10e      	bne.n	800b15c <USB_CoreInit+0x7c>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b13e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b140:	4b20      	ldr	r3, [pc, #128]	; (800b1c4 <USB_CoreInit+0xe4>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b142:	b292      	uxth	r2, r2
 800b144:	65e2      	str	r2, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b146:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b148:	4313      	orrs	r3, r2
 800b14a:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b14c:	68a3      	ldr	r3, [r4, #8]
 800b14e:	f043 0306 	orr.w	r3, r3, #6
 800b152:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b154:	68a3      	ldr	r3, [r4, #8]
 800b156:	f043 0320 	orr.w	r3, r3, #32
 800b15a:	60a3      	str	r3, [r4, #8]
}
 800b15c:	bc70      	pop	{r4, r5, r6}
 800b15e:	b004      	add	sp, #16
 800b160:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b162:	68c2      	ldr	r2, [r0, #12]
 800b164:	4b16      	ldr	r3, [pc, #88]	; (800b1c0 <USB_CoreInit+0xe0>)
 800b166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b16a:	60c2      	str	r2, [r0, #12]
    if (++count > 200000U)
 800b16c:	e001      	b.n	800b172 <USB_CoreInit+0x92>
 800b16e:	3b01      	subs	r3, #1
 800b170:	d021      	beq.n	800b1b6 <USB_CoreInit+0xd6>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b172:	6922      	ldr	r2, [r4, #16]
 800b174:	2a00      	cmp	r2, #0
 800b176:	dafa      	bge.n	800b16e <USB_CoreInit+0x8e>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b178:	6922      	ldr	r2, [r4, #16]
 800b17a:	4b11      	ldr	r3, [pc, #68]	; (800b1c0 <USB_CoreInit+0xe0>)
 800b17c:	f042 0201 	orr.w	r2, r2, #1
 800b180:	6122      	str	r2, [r4, #16]
    if (++count > 200000U)
 800b182:	e001      	b.n	800b188 <USB_CoreInit+0xa8>
 800b184:	3b01      	subs	r3, #1
 800b186:	d016      	beq.n	800b1b6 <USB_CoreInit+0xd6>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b188:	6920      	ldr	r0, [r4, #16]
 800b18a:	f010 0001 	ands.w	r0, r0, #1
 800b18e:	d1f9      	bne.n	800b184 <USB_CoreInit+0xa4>
    if (cfg.battery_charging_enable == 0U)
 800b190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b192:	b923      	cbnz	r3, 800b19e <USB_CoreInit+0xbe>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b194:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b19a:	63a3      	str	r3, [r4, #56]	; 0x38
 800b19c:	e7cc      	b.n	800b138 <USB_CoreInit+0x58>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b19e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b1a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1a4:	63a3      	str	r3, [r4, #56]	; 0x38
 800b1a6:	e7c7      	b.n	800b138 <USB_CoreInit+0x58>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b1a8:	68c3      	ldr	r3, [r0, #12]
 800b1aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1ae:	60c3      	str	r3, [r0, #12]
 800b1b0:	e7af      	b.n	800b112 <USB_CoreInit+0x32>
      return HAL_TIMEOUT;
 800b1b2:	2003      	movs	r0, #3
 800b1b4:	e7c0      	b.n	800b138 <USB_CoreInit+0x58>
 800b1b6:	2003      	movs	r0, #3
 800b1b8:	e7ea      	b.n	800b190 <USB_CoreInit+0xb0>
 800b1ba:	bf00      	nop
 800b1bc:	ffbdffbf 	.word	0xffbdffbf
 800b1c0:	00030d40 	.word	0x00030d40
 800b1c4:	03ee0000 	.word	0x03ee0000

0800b1c8 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800b1c8:	2a02      	cmp	r2, #2
{
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	b410      	push	{r4}
  if (speed == USBD_FS_SPEED)
 800b1ce:	d00c      	beq.n	800b1ea <USB_SetTurnaroundTime+0x22>
 800b1d0:	f44f 5410 	mov.w	r4, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b1d4:	68d9      	ldr	r1, [r3, #12]
}
 800b1d6:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b1d8:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800b1dc:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b1de:	68da      	ldr	r2, [r3, #12]
 800b1e0:	4322      	orrs	r2, r4
}
 800b1e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b1e6:	60da      	str	r2, [r3, #12]
}
 800b1e8:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b1ea:	4a23      	ldr	r2, [pc, #140]	; (800b278 <USB_SetTurnaroundTime+0xb0>)
 800b1ec:	4823      	ldr	r0, [pc, #140]	; (800b27c <USB_SetTurnaroundTime+0xb4>)
 800b1ee:	440a      	add	r2, r1
 800b1f0:	4282      	cmp	r2, r0
 800b1f2:	d92c      	bls.n	800b24e <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b1f4:	4a22      	ldr	r2, [pc, #136]	; (800b280 <USB_SetTurnaroundTime+0xb8>)
 800b1f6:	4823      	ldr	r0, [pc, #140]	; (800b284 <USB_SetTurnaroundTime+0xbc>)
 800b1f8:	440a      	add	r2, r1
 800b1fa:	4282      	cmp	r2, r0
 800b1fc:	d92a      	bls.n	800b254 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b1fe:	4a22      	ldr	r2, [pc, #136]	; (800b288 <USB_SetTurnaroundTime+0xc0>)
 800b200:	4822      	ldr	r0, [pc, #136]	; (800b28c <USB_SetTurnaroundTime+0xc4>)
 800b202:	440a      	add	r2, r1
 800b204:	4282      	cmp	r2, r0
 800b206:	d928      	bls.n	800b25a <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b208:	4a21      	ldr	r2, [pc, #132]	; (800b290 <USB_SetTurnaroundTime+0xc8>)
 800b20a:	4822      	ldr	r0, [pc, #136]	; (800b294 <USB_SetTurnaroundTime+0xcc>)
 800b20c:	440a      	add	r2, r1
 800b20e:	4282      	cmp	r2, r0
 800b210:	d326      	bcc.n	800b260 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b212:	4a21      	ldr	r2, [pc, #132]	; (800b298 <USB_SetTurnaroundTime+0xd0>)
 800b214:	4821      	ldr	r0, [pc, #132]	; (800b29c <USB_SetTurnaroundTime+0xd4>)
 800b216:	440a      	add	r2, r1
 800b218:	4282      	cmp	r2, r0
 800b21a:	d924      	bls.n	800b266 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b21c:	4a20      	ldr	r2, [pc, #128]	; (800b2a0 <USB_SetTurnaroundTime+0xd8>)
 800b21e:	4821      	ldr	r0, [pc, #132]	; (800b2a4 <USB_SetTurnaroundTime+0xdc>)
 800b220:	440a      	add	r2, r1
 800b222:	4282      	cmp	r2, r0
 800b224:	d322      	bcc.n	800b26c <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b226:	4a20      	ldr	r2, [pc, #128]	; (800b2a8 <USB_SetTurnaroundTime+0xe0>)
 800b228:	4820      	ldr	r0, [pc, #128]	; (800b2ac <USB_SetTurnaroundTime+0xe4>)
 800b22a:	440a      	add	r2, r1
 800b22c:	4282      	cmp	r2, r0
 800b22e:	d3cf      	bcc.n	800b1d0 <USB_SetTurnaroundTime+0x8>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b230:	4a1f      	ldr	r2, [pc, #124]	; (800b2b0 <USB_SetTurnaroundTime+0xe8>)
 800b232:	4820      	ldr	r0, [pc, #128]	; (800b2b4 <USB_SetTurnaroundTime+0xec>)
 800b234:	440a      	add	r2, r1
 800b236:	4282      	cmp	r2, r0
 800b238:	d31b      	bcc.n	800b272 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b23a:	4a1f      	ldr	r2, [pc, #124]	; (800b2b8 <USB_SetTurnaroundTime+0xf0>)
 800b23c:	4c1f      	ldr	r4, [pc, #124]	; (800b2bc <USB_SetTurnaroundTime+0xf4>)
 800b23e:	440a      	add	r2, r1
 800b240:	42a2      	cmp	r2, r4
 800b242:	bf34      	ite	cc
 800b244:	f44f 54e0 	movcc.w	r4, #7168	; 0x1c00
 800b248:	f44f 54c0 	movcs.w	r4, #6144	; 0x1800
 800b24c:	e7c2      	b.n	800b1d4 <USB_SetTurnaroundTime+0xc>
 800b24e:	f44f 5470 	mov.w	r4, #15360	; 0x3c00
 800b252:	e7bf      	b.n	800b1d4 <USB_SetTurnaroundTime+0xc>
 800b254:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 800b258:	e7bc      	b.n	800b1d4 <USB_SetTurnaroundTime+0xc>
 800b25a:	f44f 5450 	mov.w	r4, #13312	; 0x3400
 800b25e:	e7b9      	b.n	800b1d4 <USB_SetTurnaroundTime+0xc>
 800b260:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 800b264:	e7b6      	b.n	800b1d4 <USB_SetTurnaroundTime+0xc>
 800b266:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 800b26a:	e7b3      	b.n	800b1d4 <USB_SetTurnaroundTime+0xc>
 800b26c:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 800b270:	e7b0      	b.n	800b1d4 <USB_SetTurnaroundTime+0xc>
 800b272:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 800b276:	e7ad      	b.n	800b1d4 <USB_SetTurnaroundTime+0xc>
 800b278:	ff275340 	.word	0xff275340
 800b27c:	000c34ff 	.word	0x000c34ff
 800b280:	ff1b1e40 	.word	0xff1b1e40
 800b284:	000f423f 	.word	0x000f423f
 800b288:	ff0bdc00 	.word	0xff0bdc00
 800b28c:	00124f7f 	.word	0x00124f7f
 800b290:	fef98c80 	.word	0xfef98c80
 800b294:	0013d620 	.word	0x0013d620
 800b298:	fee5b660 	.word	0xfee5b660
 800b29c:	0016e35f 	.word	0x0016e35f
 800b2a0:	feced300 	.word	0xfeced300
 800b2a4:	001b7740 	.word	0x001b7740
 800b2a8:	feb35bc0 	.word	0xfeb35bc0
 800b2ac:	002191c0 	.word	0x002191c0
 800b2b0:	fe91ca00 	.word	0xfe91ca00
 800b2b4:	00387520 	.word	0x00387520
 800b2b8:	fe5954e0 	.word	0xfe5954e0
 800b2bc:	00419ce0 	.word	0x00419ce0

0800b2c0 <USB_EnableGlobalInt>:
{
 800b2c0:	4603      	mov	r3, r0
}
 800b2c2:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b2c4:	689a      	ldr	r2, [r3, #8]
 800b2c6:	f042 0201 	orr.w	r2, r2, #1
 800b2ca:	609a      	str	r2, [r3, #8]
}
 800b2cc:	4770      	bx	lr
 800b2ce:	bf00      	nop

0800b2d0 <USB_DisableGlobalInt>:
{
 800b2d0:	4603      	mov	r3, r0
}
 800b2d2:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b2d4:	689a      	ldr	r2, [r3, #8]
 800b2d6:	f022 0201 	bic.w	r2, r2, #1
 800b2da:	609a      	str	r2, [r3, #8]
}
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop

0800b2e0 <USB_SetCurrentMode>:
{
 800b2e0:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b2e2:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800b2e4:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b2e6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b2ea:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800b2ec:	d00b      	beq.n	800b306 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 800b2ee:	b941      	cbnz	r1, 800b302 <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b2f0:	68c3      	ldr	r3, [r0, #12]
 800b2f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2f6:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800b2f8:	2032      	movs	r0, #50	; 0x32
 800b2fa:	f7f8 ff99 	bl	8004230 <HAL_Delay>
  return HAL_OK;
 800b2fe:	2000      	movs	r0, #0
}
 800b300:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 800b302:	2001      	movs	r0, #1
}
 800b304:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b306:	68c3      	ldr	r3, [r0, #12]
 800b308:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b30c:	60c3      	str	r3, [r0, #12]
 800b30e:	e7f3      	b.n	800b2f8 <USB_SetCurrentMode+0x18>

0800b310 <USB_DevInit>:
{
 800b310:	b084      	sub	sp, #16
 800b312:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b316:	9d12      	ldr	r5, [sp, #72]	; 0x48
    USBx->DIEPTXF[i] = 0U;
 800b318:	2600      	movs	r6, #0
{
 800b31a:	af08      	add	r7, sp, #32
 800b31c:	4604      	mov	r4, r0
    USBx->DIEPTXF[i] = 0U;
 800b31e:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
 800b322:	f8c0 6108 	str.w	r6, [r0, #264]	; 0x108
 800b326:	f8c0 610c 	str.w	r6, [r0, #268]	; 0x10c
 800b32a:	f8c0 6110 	str.w	r6, [r0, #272]	; 0x110
 800b32e:	f8c0 6114 	str.w	r6, [r0, #276]	; 0x114
 800b332:	f8c0 6118 	str.w	r6, [r0, #280]	; 0x118
 800b336:	f8c0 611c 	str.w	r6, [r0, #284]	; 0x11c
 800b33a:	f8c0 6120 	str.w	r6, [r0, #288]	; 0x120
 800b33e:	f8c0 6124 	str.w	r6, [r0, #292]	; 0x124
 800b342:	f8c0 6128 	str.w	r6, [r0, #296]	; 0x128
 800b346:	f8c0 612c 	str.w	r6, [r0, #300]	; 0x12c
 800b34a:	f8c0 6130 	str.w	r6, [r0, #304]	; 0x130
 800b34e:	f8c0 6134 	str.w	r6, [r0, #308]	; 0x134
 800b352:	f8c0 6138 	str.w	r6, [r0, #312]	; 0x138
 800b356:	f8c0 613c 	str.w	r6, [r0, #316]	; 0x13c
{
 800b35a:	e887 000e 	stmia.w	r7, {r1, r2, r3}
  if (cfg.vbus_sensing_enable == 0U)
 800b35e:	2d00      	cmp	r5, #0
 800b360:	f040 809a 	bne.w	800b498 <USB_DevInit+0x188>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b364:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800b368:	f500 6600 	add.w	r6, r0, #2048	; 0x800
 800b36c:	f043 0302 	orr.w	r3, r3, #2
 800b370:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b372:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b374:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b378:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b37a:	6803      	ldr	r3, [r0, #0]
 800b37c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b380:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b382:	6803      	ldr	r3, [r0, #0]
 800b384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b388:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 800b38a:	2200      	movs	r2, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b38c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  USBx_PCGCCTL = 0U;
 800b38e:	f8c4 2e00 	str.w	r2, [r4, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b392:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b394:	6832      	ldr	r2, [r6, #0]
 800b396:	6032      	str	r2, [r6, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b398:	f000 8085 	beq.w	800b4a6 <USB_DevInit+0x196>
  USBx_DEVICE->DCFG |= speed;
 800b39c:	6833      	ldr	r3, [r6, #0]
 800b39e:	f043 0303 	orr.w	r3, r3, #3
 800b3a2:	6033      	str	r3, [r6, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b3a4:	f44f 6284 	mov.w	r2, #1056	; 0x420
 800b3a8:	4b46      	ldr	r3, [pc, #280]	; (800b4c4 <USB_DevInit+0x1b4>)
 800b3aa:	6122      	str	r2, [r4, #16]
    if (++count > 200000U)
 800b3ac:	e002      	b.n	800b3b4 <USB_DevInit+0xa4>
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	f000 8083 	beq.w	800b4ba <USB_DevInit+0x1aa>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b3b4:	6920      	ldr	r0, [r4, #16]
 800b3b6:	f010 0020 	ands.w	r0, r0, #32
 800b3ba:	d1f8      	bne.n	800b3ae <USB_DevInit+0x9e>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b3bc:	2210      	movs	r2, #16
 800b3be:	4b41      	ldr	r3, [pc, #260]	; (800b4c4 <USB_DevInit+0x1b4>)
 800b3c0:	6122      	str	r2, [r4, #16]
    if (++count > 200000U)
 800b3c2:	e001      	b.n	800b3c8 <USB_DevInit+0xb8>
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	d07a      	beq.n	800b4be <USB_DevInit+0x1ae>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b3c8:	6922      	ldr	r2, [r4, #16]
 800b3ca:	06d2      	lsls	r2, r2, #27
 800b3cc:	d4fa      	bmi.n	800b3c4 <USB_DevInit+0xb4>
  USBx_DEVICE->DIEPMSK = 0U;
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	6132      	str	r2, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b3d2:	6172      	str	r2, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b3d4:	61f2      	str	r2, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3d6:	b1e9      	cbz	r1, 800b414 <USB_DevInit+0x104>
 800b3d8:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b3dc:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b3e0:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800b3e4:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b3e6:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800b3ea:	e009      	b.n	800b400 <USB_DevInit+0xf0>
      USBx_INEP(i)->DIEPCTL = 0U;
 800b3ec:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3f0:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b3f2:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b3f6:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3fa:	3320      	adds	r3, #32
 800b3fc:	428a      	cmp	r2, r1
 800b3fe:	d02c      	beq.n	800b45a <USB_DevInit+0x14a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b400:	681f      	ldr	r7, [r3, #0]
 800b402:	2f00      	cmp	r7, #0
 800b404:	daf2      	bge.n	800b3ec <USB_DevInit+0xdc>
      if (i == 0U)
 800b406:	b112      	cbz	r2, 800b40e <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b408:	f8c3 8000 	str.w	r8, [r3]
 800b40c:	e7f0      	b.n	800b3f0 <USB_DevInit+0xe0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b40e:	f8c3 9000 	str.w	r9, [r3]
 800b412:	e7ed      	b.n	800b3f0 <USB_DevInit+0xe0>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b414:	6933      	ldr	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800b416:	2700      	movs	r7, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b418:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
  if (cfg.dma_enable == 0U)
 800b41c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b41e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b422:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800b424:	61a7      	str	r7, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b426:	6161      	str	r1, [r4, #20]
  if (cfg.dma_enable == 0U)
 800b428:	b91a      	cbnz	r2, 800b432 <USB_DevInit+0x122>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b42a:	69a3      	ldr	r3, [r4, #24]
 800b42c:	f043 0310 	orr.w	r3, r3, #16
 800b430:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b432:	69a1      	ldr	r1, [r4, #24]
 800b434:	4b24      	ldr	r3, [pc, #144]	; (800b4c8 <USB_DevInit+0x1b8>)
  if (cfg.Sof_enable != 0U)
 800b436:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b438:	430b      	orrs	r3, r1
 800b43a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800b43c:	b11a      	cbz	r2, 800b446 <USB_DevInit+0x136>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b43e:	69a3      	ldr	r3, [r4, #24]
 800b440:	f043 0308 	orr.w	r3, r3, #8
 800b444:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800b446:	2d01      	cmp	r5, #1
 800b448:	d103      	bne.n	800b452 <USB_DevInit+0x142>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b44a:	69a2      	ldr	r2, [r4, #24]
 800b44c:	4b1f      	ldr	r3, [pc, #124]	; (800b4cc <USB_DevInit+0x1bc>)
 800b44e:	4313      	orrs	r3, r2
 800b450:	61a3      	str	r3, [r4, #24]
}
 800b452:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b456:	b004      	add	sp, #16
 800b458:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b45a:	2200      	movs	r2, #0
 800b45c:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b460:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b464:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b468:	4694      	mov	ip, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b46a:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800b46e:	e009      	b.n	800b484 <USB_DevInit+0x174>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b470:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b474:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b476:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b47a:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b47e:	3320      	adds	r3, #32
 800b480:	428a      	cmp	r2, r1
 800b482:	d0c7      	beq.n	800b414 <USB_DevInit+0x104>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b484:	681f      	ldr	r7, [r3, #0]
 800b486:	2f00      	cmp	r7, #0
 800b488:	daf2      	bge.n	800b470 <USB_DevInit+0x160>
      if (i == 0U)
 800b48a:	b112      	cbz	r2, 800b492 <USB_DevInit+0x182>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b48c:	f8c3 8000 	str.w	r8, [r3]
 800b490:	e7f0      	b.n	800b474 <USB_DevInit+0x164>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b492:	f8c3 9000 	str.w	r9, [r3]
 800b496:	e7ed      	b.n	800b474 <USB_DevInit+0x164>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b498:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b49a:	f500 6600 	add.w	r6, r0, #2048	; 0x800
 800b49e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b4a2:	6383      	str	r3, [r0, #56]	; 0x38
 800b4a4:	e771      	b.n	800b38a <USB_DevInit+0x7a>
    if (cfg.speed == USBD_HS_SPEED)
 800b4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4a8:	b913      	cbnz	r3, 800b4b0 <USB_DevInit+0x1a0>
  USBx_DEVICE->DCFG |= speed;
 800b4aa:	6833      	ldr	r3, [r6, #0]
 800b4ac:	6033      	str	r3, [r6, #0]
  return HAL_OK;
 800b4ae:	e779      	b.n	800b3a4 <USB_DevInit+0x94>
  USBx_DEVICE->DCFG |= speed;
 800b4b0:	6833      	ldr	r3, [r6, #0]
 800b4b2:	f043 0301 	orr.w	r3, r3, #1
 800b4b6:	6033      	str	r3, [r6, #0]
  return HAL_OK;
 800b4b8:	e774      	b.n	800b3a4 <USB_DevInit+0x94>
    ret = HAL_ERROR;
 800b4ba:	2001      	movs	r0, #1
 800b4bc:	e77e      	b.n	800b3bc <USB_DevInit+0xac>
    ret = HAL_ERROR;
 800b4be:	2001      	movs	r0, #1
 800b4c0:	e785      	b.n	800b3ce <USB_DevInit+0xbe>
 800b4c2:	bf00      	nop
 800b4c4:	00030d40 	.word	0x00030d40
 800b4c8:	803c3800 	.word	0x803c3800
 800b4cc:	40000004 	.word	0x40000004

0800b4d0 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b4d0:	0189      	lsls	r1, r1, #6
 800b4d2:	4a07      	ldr	r2, [pc, #28]	; (800b4f0 <USB_FlushTxFifo+0x20>)
 800b4d4:	f041 0120 	orr.w	r1, r1, #32
 800b4d8:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800b4da:	e001      	b.n	800b4e0 <USB_FlushTxFifo+0x10>
 800b4dc:	3a01      	subs	r2, #1
 800b4de:	d005      	beq.n	800b4ec <USB_FlushTxFifo+0x1c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b4e0:	6903      	ldr	r3, [r0, #16]
 800b4e2:	f013 0320 	ands.w	r3, r3, #32
 800b4e6:	d1f9      	bne.n	800b4dc <USB_FlushTxFifo+0xc>
  return HAL_OK;
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	4770      	bx	lr
      return HAL_TIMEOUT;
 800b4ec:	2003      	movs	r0, #3
}
 800b4ee:	4770      	bx	lr
 800b4f0:	00030d40 	.word	0x00030d40

0800b4f4 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b4f4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b4f8:	f013 0006 	ands.w	r0, r3, #6
 800b4fc:	d004      	beq.n	800b508 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b4fe:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 800b502:	bf14      	ite	ne
 800b504:	2002      	movne	r0, #2
 800b506:	200f      	moveq	r0, #15
}
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop

0800b50c <USB_ActivateEndpoint>:
{
 800b50c:	b470      	push	{r4, r5, r6}
  if (ep->is_in == 1U)
 800b50e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800b510:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800b512:	2b01      	cmp	r3, #1
 800b514:	d01f      	beq.n	800b556 <USB_ActivateEndpoint+0x4a>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b516:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800b51a:	f002 050f 	and.w	r5, r2, #15
 800b51e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b522:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b526:	69e2      	ldr	r2, [r4, #28]
 800b528:	40ab      	lsls	r3, r5
 800b52a:	4313      	orrs	r3, r2
 800b52c:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b52e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800b532:	041b      	lsls	r3, r3, #16
 800b534:	d40c      	bmi.n	800b550 <USB_ActivateEndpoint+0x44>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b536:	688b      	ldr	r3, [r1, #8]
 800b538:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800b53c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b540:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b542:	4a15      	ldr	r2, [pc, #84]	; (800b598 <USB_ActivateEndpoint+0x8c>)
 800b544:	4323      	orrs	r3, r4
 800b546:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800b54a:	431a      	orrs	r2, r3
 800b54c:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 800b550:	2000      	movs	r0, #0
 800b552:	bc70      	pop	{r4, r5, r6}
 800b554:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b556:	f002 040f 	and.w	r4, r2, #15
 800b55a:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 800b55e:	f500 6500 	add.w	r5, r0, #2048	; 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b562:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b566:	40a3      	lsls	r3, r4
 800b568:	4333      	orrs	r3, r6
 800b56a:	61eb      	str	r3, [r5, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b56c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800b570:	041c      	lsls	r4, r3, #16
 800b572:	d4ed      	bmi.n	800b550 <USB_ActivateEndpoint+0x44>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b574:	688b      	ldr	r3, [r1, #8]
 800b576:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 800b57a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b57e:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b580:	4905      	ldr	r1, [pc, #20]	; (800b598 <USB_ActivateEndpoint+0x8c>)
 800b582:	432b      	orrs	r3, r5
 800b584:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800b588:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800b58c:	4311      	orrs	r1, r2
}
 800b58e:	bc70      	pop	{r4, r5, r6}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b590:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 800b594:	2000      	movs	r0, #0
 800b596:	4770      	bx	lr
 800b598:	10008000 	.word	0x10008000

0800b59c <USB_DeactivateEndpoint>:
{
 800b59c:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800b59e:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800b5a0:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800b5a2:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b5a4:	eb00 1543 	add.w	r5, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800b5a8:	d02b      	beq.n	800b602 <USB_DeactivateEndpoint+0x66>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b5aa:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 800b5ae:	2a00      	cmp	r2, #0
 800b5b0:	db1a      	blt.n	800b5e8 <USB_DeactivateEndpoint+0x4c>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b5b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b5b6:	f003 030f 	and.w	r3, r3, #15
 800b5ba:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800b5be:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b5c2:	4925      	ldr	r1, [pc, #148]	; (800b658 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b5c4:	ea24 0403 	bic.w	r4, r4, r3
 800b5c8:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b5cc:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800b5d0:	ea22 0303 	bic.w	r3, r2, r3
 800b5d4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800b5d8:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b5da:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800b5de:	4019      	ands	r1, r3
 800b5e0:	f8c5 1b00 	str.w	r1, [r5, #2816]	; 0xb00
}
 800b5e4:	bc30      	pop	{r4, r5}
 800b5e6:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b5e8:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 800b5ec:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800b5f0:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b5f4:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 800b5f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b5fc:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
 800b600:	e7d7      	b.n	800b5b2 <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b602:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800b606:	2a00      	cmp	r2, #0
 800b608:	da0b      	bge.n	800b622 <USB_DeactivateEndpoint+0x86>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b60a:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800b60e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800b612:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b616:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800b61a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b61e:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b622:	2201      	movs	r2, #1
 800b624:	f003 030f 	and.w	r3, r3, #15
 800b628:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800b62c:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b630:	490a      	ldr	r1, [pc, #40]	; (800b65c <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b632:	ea24 0403 	bic.w	r4, r4, r3
 800b636:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b63a:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800b63e:	ea22 0303 	bic.w	r3, r2, r3
 800b642:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800b646:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b648:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 800b64c:	4019      	ands	r1, r3
 800b64e:	f8c5 1900 	str.w	r1, [r5, #2304]	; 0x900
}
 800b652:	bc30      	pop	{r4, r5}
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop
 800b658:	eff37800 	.word	0xeff37800
 800b65c:	ec337800 	.word	0xec337800

0800b660 <USB_EPStartXfer>:
{
 800b660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 800b664:	784d      	ldrb	r5, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800b666:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800b668:	2d01      	cmp	r5, #1
 800b66a:	d054      	beq.n	800b716 <USB_EPStartXfer+0xb6>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b66c:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800b670:	4f82      	ldr	r7, [pc, #520]	; (800b87c <USB_EPStartXfer+0x21c>)
    if (ep->xfer_len == 0U)
 800b672:	694d      	ldr	r5, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b674:	f8d4 cb10 	ldr.w	ip, [r4, #2832]	; 0xb10
 800b678:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b67c:	4e80      	ldr	r6, [pc, #512]	; (800b880 <USB_EPStartXfer+0x220>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b67e:	ea0c 0707 	and.w	r7, ip, r7
 800b682:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b684:	691f      	ldr	r7, [r3, #16]
 800b686:	403e      	ands	r6, r7
 800b688:	611e      	str	r6, [r3, #16]
    if (ep->xfer_len == 0U)
 800b68a:	b395      	cbz	r5, 800b6f2 <USB_EPStartXfer+0x92>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b68c:	688e      	ldr	r6, [r1, #8]
    if (dma == 1U)
 800b68e:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b690:	4f7c      	ldr	r7, [pc, #496]	; (800b884 <USB_EPStartXfer+0x224>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b692:	4435      	add	r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b694:	f8d3 c010 	ldr.w	ip, [r3, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b698:	f105 35ff 	add.w	r5, r5, #4294967295
 800b69c:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b6a0:	fa1f fe85 	uxth.w	lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b6a4:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b6a8:	fb06 f60e 	mul.w	r6, r6, lr
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b6ac:	ea45 050c 	orr.w	r5, r5, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b6b0:	f3c6 0612 	ubfx	r6, r6, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b6b4:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b6b6:	691d      	ldr	r5, [r3, #16]
 800b6b8:	ea46 0605 	orr.w	r6, r6, r5
 800b6bc:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 800b6be:	d025      	beq.n	800b70c <USB_EPStartXfer+0xac>
    if (ep->type == EP_TYPE_ISOC)
 800b6c0:	78cb      	ldrb	r3, [r1, #3]
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d10c      	bne.n	800b6e0 <USB_EPStartXfer+0x80>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b6c6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800b6ca:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b6ce:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800b6d2:	bf0c      	ite	eq
 800b6d4:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b6d8:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800b6dc:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b6e0:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800b6e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b6e8:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b6f2:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 800b6f4:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b6f6:	691e      	ldr	r6, [r3, #16]
 800b6f8:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800b6fc:	ea45 0506 	orr.w	r5, r5, r6
 800b700:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b702:	691d      	ldr	r5, [r3, #16]
 800b704:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800b708:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800b70a:	d1d9      	bne.n	800b6c0 <USB_EPStartXfer+0x60>
      if ((uint32_t)ep->xfer_buff != 0U)
 800b70c:	68ca      	ldr	r2, [r1, #12]
 800b70e:	2a00      	cmp	r2, #0
 800b710:	d0d6      	beq.n	800b6c0 <USB_EPStartXfer+0x60>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b712:	615a      	str	r2, [r3, #20]
 800b714:	e7d4      	b.n	800b6c0 <USB_EPStartXfer+0x60>
    if (ep->xfer_len == 0U)
 800b716:	694e      	ldr	r6, [r1, #20]
 800b718:	2e00      	cmp	r6, #0
 800b71a:	d040      	beq.n	800b79e <USB_EPStartXfer+0x13e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b71c:	eb00 1e44 	add.w	lr, r0, r4, lsl #5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b720:	f8d1 8008 	ldr.w	r8, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b724:	f8df a154 	ldr.w	sl, [pc, #340]	; 800b87c <USB_EPStartXfer+0x21c>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b728:	f3c6 0712 	ubfx	r7, r6, #0, #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b72c:	f8de 9910 	ldr.w	r9, [lr, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b730:	eb06 0c08 	add.w	ip, r6, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b734:	f50e 6310 	add.w	r3, lr, #2304	; 0x900
 800b738:	ea09 0a0a 	and.w	sl, r9, sl
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b73c:	f10c 3cff 	add.w	ip, ip, #4294967295
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b740:	f8df 913c 	ldr.w	r9, [pc, #316]	; 800b880 <USB_EPStartXfer+0x220>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b744:	f8c3 a010 	str.w	sl, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b748:	f8d3 a010 	ldr.w	sl, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b74c:	fbbc f8f8 	udiv	r8, ip, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b750:	ea0a 0909 	and.w	r9, sl, r9
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b754:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800b884 <USB_EPStartXfer+0x224>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b758:	f8c3 9010 	str.w	r9, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b75c:	ea0c 4cc8 	and.w	ip, ip, r8, lsl #19
 800b760:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800b764:	ea4c 0c08 	orr.w	ip, ip, r8
 800b768:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b76c:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800b770:	ea47 070c 	orr.w	r7, r7, ip
 800b774:	611f      	str	r7, [r3, #16]
      if (ep->type == EP_TYPE_ISOC)
 800b776:	78cf      	ldrb	r7, [r1, #3]
 800b778:	2f01      	cmp	r7, #1
 800b77a:	d04e      	beq.n	800b81a <USB_EPStartXfer+0x1ba>
    if (dma == 1U)
 800b77c:	2a01      	cmp	r2, #1
 800b77e:	d068      	beq.n	800b852 <USB_EPStartXfer+0x1f2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b780:	f8de 3900 	ldr.w	r3, [lr, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b784:	f004 040f 	and.w	r4, r4, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b788:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b78c:	40a5      	lsls	r5, r4
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b78e:	f8ce 3900 	str.w	r3, [lr, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b792:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800b796:	4325      	orrs	r5, r4
 800b798:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
  return HAL_OK;
 800b79c:	e7a6      	b.n	800b6ec <USB_EPStartXfer+0x8c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b79e:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 800b7a2:	4f37      	ldr	r7, [pc, #220]	; (800b880 <USB_EPStartXfer+0x220>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b7a4:	4d35      	ldr	r5, [pc, #212]	; (800b87c <USB_EPStartXfer+0x21c>)
    if (dma == 1U)
 800b7a6:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b7a8:	f8dc e910 	ldr.w	lr, [ip, #2320]	; 0x910
 800b7ac:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
 800b7b0:	ea0e 0707 	and.w	r7, lr, r7
 800b7b4:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b7b6:	691f      	ldr	r7, [r3, #16]
 800b7b8:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800b7bc:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b7be:	691f      	ldr	r7, [r3, #16]
 800b7c0:	ea05 0507 	and.w	r5, r5, r7
 800b7c4:	611d      	str	r5, [r3, #16]
 800b7c6:	78cf      	ldrb	r7, [r1, #3]
    if (dma == 1U)
 800b7c8:	d038      	beq.n	800b83c <USB_EPStartXfer+0x1dc>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b7ca:	f8dc 5900 	ldr.w	r5, [ip, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800b7ce:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b7d0:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800b7d4:	f8cc 5900 	str.w	r5, [ip, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800b7d8:	d188      	bne.n	800b6ec <USB_EPStartXfer+0x8c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b7da:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 800b7de:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b7e2:	681d      	ldr	r5, [r3, #0]
 800b7e4:	bf0c      	ite	eq
 800b7e6:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b7ea:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 800b7ee:	601d      	str	r5, [r3, #0]
  if (dma == 0U)
 800b7f0:	2a00      	cmp	r2, #0
 800b7f2:	f47f af7b 	bne.w	800b6ec <USB_EPStartXfer+0x8c>
    count32b = ((uint32_t)len + 3U) / 4U;
 800b7f6:	b2b6      	uxth	r6, r6
 800b7f8:	3603      	adds	r6, #3
    for (i = 0U; i < count32b; i++)
 800b7fa:	08b6      	lsrs	r6, r6, #2
 800b7fc:	f43f af76 	beq.w	800b6ec <USB_EPStartXfer+0x8c>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b800:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b802:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 800b806:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 800b80a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800b80e:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 800b812:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b814:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800b816:	d1fa      	bne.n	800b80e <USB_EPStartXfer+0x1ae>
 800b818:	e768      	b.n	800b6ec <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b81a:	691d      	ldr	r5, [r3, #16]
    if (dma == 1U)
 800b81c:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b81e:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800b822:	611d      	str	r5, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b824:	691d      	ldr	r5, [r3, #16]
 800b826:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b82a:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800b82c:	d016      	beq.n	800b85c <USB_EPStartXfer+0x1fc>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b82e:	f8de 5900 	ldr.w	r5, [lr, #2304]	; 0x900
 800b832:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800b836:	f8ce 5900 	str.w	r5, [lr, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800b83a:	e7ce      	b.n	800b7da <USB_EPStartXfer+0x17a>
      if ((uint32_t)ep->dma_addr != 0U)
 800b83c:	690a      	ldr	r2, [r1, #16]
 800b83e:	b95a      	cbnz	r2, 800b858 <USB_EPStartXfer+0x1f8>
      if (ep->type == EP_TYPE_ISOC)
 800b840:	2f01      	cmp	r7, #1
 800b842:	d00e      	beq.n	800b862 <USB_EPStartXfer+0x202>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b844:	681a      	ldr	r2, [r3, #0]
}
 800b846:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b848:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800b84c:	601a      	str	r2, [r3, #0]
}
 800b84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800b852:	690a      	ldr	r2, [r1, #16]
 800b854:	2a00      	cmp	r2, #0
 800b856:	d0f5      	beq.n	800b844 <USB_EPStartXfer+0x1e4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b858:	615a      	str	r2, [r3, #20]
 800b85a:	e7f1      	b.n	800b840 <USB_EPStartXfer+0x1e0>
      if ((uint32_t)ep->dma_addr != 0U)
 800b85c:	690a      	ldr	r2, [r1, #16]
 800b85e:	2a00      	cmp	r2, #0
 800b860:	d1fa      	bne.n	800b858 <USB_EPStartXfer+0x1f8>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b862:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800b866:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	bf0c      	ite	eq
 800b86e:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b872:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800b876:	601a      	str	r2, [r3, #0]
 800b878:	e7e4      	b.n	800b844 <USB_EPStartXfer+0x1e4>
 800b87a:	bf00      	nop
 800b87c:	fff80000 	.word	0xfff80000
 800b880:	e007ffff 	.word	0xe007ffff
 800b884:	1ff80000 	.word	0x1ff80000

0800b888 <USB_EP0StartXfer>:
{
 800b888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 800b88c:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800b88e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800b890:	2c01      	cmp	r4, #1
 800b892:	d02a      	beq.n	800b8ea <USB_EP0StartXfer+0x62>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b894:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800b898:	4d4d      	ldr	r5, [pc, #308]	; (800b9d0 <USB_EP0StartXfer+0x148>)
    if (ep->xfer_len > 0U)
 800b89a:	694e      	ldr	r6, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b89c:	f8d0 7b10 	ldr.w	r7, [r0, #2832]	; 0xb10
 800b8a0:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b8a4:	4c4b      	ldr	r4, [pc, #300]	; (800b9d4 <USB_EP0StartXfer+0x14c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b8a6:	403d      	ands	r5, r7
 800b8a8:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b8aa:	691d      	ldr	r5, [r3, #16]
 800b8ac:	402c      	ands	r4, r5
 800b8ae:	611c      	str	r4, [r3, #16]
      ep->xfer_len = ep->maxpacket;
 800b8b0:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len > 0U)
 800b8b2:	b106      	cbz	r6, 800b8b6 <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 800b8b4:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b8b6:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b8b8:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800b8bc:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b8be:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800b8c2:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b8c4:	691d      	ldr	r5, [r3, #16]
 800b8c6:	ea44 0405 	orr.w	r4, r4, r5
 800b8ca:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800b8cc:	d008      	beq.n	800b8e0 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b8ce:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800b8d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b8d6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800b8da:	2000      	movs	r0, #0
 800b8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 800b8e0:	68ca      	ldr	r2, [r1, #12]
 800b8e2:	2a00      	cmp	r2, #0
 800b8e4:	d0f3      	beq.n	800b8ce <USB_EP0StartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b8e6:	615a      	str	r2, [r3, #20]
 800b8e8:	e7f1      	b.n	800b8ce <USB_EP0StartXfer+0x46>
    if (ep->xfer_len == 0U)
 800b8ea:	694d      	ldr	r5, [r1, #20]
 800b8ec:	b3ad      	cbz	r5, 800b95a <USB_EP0StartXfer+0xd2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b8ee:	eb00 1e43 	add.w	lr, r0, r3, lsl #5
 800b8f2:	4f37      	ldr	r7, [pc, #220]	; (800b9d0 <USB_EP0StartXfer+0x148>)
      if (ep->xfer_len > ep->maxpacket)
 800b8f4:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b8f8:	f8de 8910 	ldr.w	r8, [lr, #2320]	; 0x910
 800b8fc:	f50e 6410 	add.w	r4, lr, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b900:	4e34      	ldr	r6, [pc, #208]	; (800b9d4 <USB_EP0StartXfer+0x14c>)
      if (ep->xfer_len > ep->maxpacket)
 800b902:	4565      	cmp	r5, ip
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b904:	ea08 0707 	and.w	r7, r8, r7
 800b908:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b90a:	6927      	ldr	r7, [r4, #16]
 800b90c:	ea06 0607 	and.w	r6, r6, r7
 800b910:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b912:	6926      	ldr	r6, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 800b914:	d94a      	bls.n	800b9ac <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b916:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 800b91a:	f8c1 c014 	str.w	ip, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b91e:	f3cc 0512 	ubfx	r5, ip, #0, #19
    if (dma == 1U)
 800b922:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b924:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b926:	6926      	ldr	r6, [r4, #16]
 800b928:	ea45 0506 	orr.w	r5, r5, r6
 800b92c:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 800b92e:	d033      	beq.n	800b998 <USB_EP0StartXfer+0x110>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b930:	f8de 2900 	ldr.w	r2, [lr, #2304]	; 0x900
 800b934:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800b938:	f8ce 2900 	str.w	r2, [lr, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800b93c:	f1bc 0f00 	cmp.w	ip, #0
 800b940:	d0cb      	beq.n	800b8da <USB_EP0StartXfer+0x52>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b942:	f003 010f 	and.w	r1, r3, #15
 800b946:	2301      	movs	r3, #1
 800b948:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800b94c:	408b      	lsls	r3, r1
 800b94e:	4313      	orrs	r3, r2
 800b950:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800b954:	2000      	movs	r0, #0
 800b956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b95a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800b95e:	4e1d      	ldr	r6, [pc, #116]	; (800b9d4 <USB_EP0StartXfer+0x14c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b960:	f5a5 2500 	sub.w	r5, r5, #524288	; 0x80000
    if (dma == 1U)
 800b964:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b966:	f8d0 3910 	ldr.w	r3, [r0, #2320]	; 0x910
 800b96a:	f500 6410 	add.w	r4, r0, #2304	; 0x900
 800b96e:	ea06 0603 	and.w	r6, r6, r3
 800b972:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b974:	6926      	ldr	r6, [r4, #16]
 800b976:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800b97a:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b97c:	6923      	ldr	r3, [r4, #16]
 800b97e:	ea05 0503 	and.w	r5, r5, r3
 800b982:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 800b984:	d008      	beq.n	800b998 <USB_EP0StartXfer+0x110>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b986:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800b98a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b98e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800b992:	2000      	movs	r0, #0
 800b994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800b998:	690b      	ldr	r3, [r1, #16]
 800b99a:	b103      	cbz	r3, 800b99e <USB_EP0StartXfer+0x116>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b99c:	6163      	str	r3, [r4, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b99e:	6823      	ldr	r3, [r4, #0]
}
 800b9a0:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b9a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b9a6:	6023      	str	r3, [r4, #0]
}
 800b9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b9ac:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b9b0:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 800b9b4:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b9b6:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b9b8:	6926      	ldr	r6, [r4, #16]
 800b9ba:	ea45 0506 	orr.w	r5, r5, r6
 800b9be:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 800b9c0:	d0ea      	beq.n	800b998 <USB_EP0StartXfer+0x110>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b9c2:	f8de 2900 	ldr.w	r2, [lr, #2304]	; 0x900
 800b9c6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800b9ca:	f8ce 2900 	str.w	r2, [lr, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800b9ce:	e7b8      	b.n	800b942 <USB_EP0StartXfer+0xba>
 800b9d0:	fff80000 	.word	0xfff80000
 800b9d4:	e007ffff 	.word	0xe007ffff

0800b9d8 <USB_WritePacket>:
{
 800b9d8:	b410      	push	{r4}
 800b9da:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800b9de:	b964      	cbnz	r4, 800b9fa <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 800b9e0:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800b9e2:	089b      	lsrs	r3, r3, #2
 800b9e4:	d009      	beq.n	800b9fa <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b9e6:	3201      	adds	r2, #1
 800b9e8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b9ec:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800b9f0:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800b9f4:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b9f6:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800b9f8:	d1fa      	bne.n	800b9f0 <USB_WritePacket+0x18>
}
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop

0800ba04 <USB_ReadPacket>:
{
 800ba04:	b4f0      	push	{r4, r5, r6, r7}
  for (i = 0U; i < count32b; i++)
 800ba06:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 800ba08:	f002 0703 	and.w	r7, r2, #3
  for (i = 0U; i < count32b; i++)
 800ba0c:	d00b      	beq.n	800ba26 <USB_ReadPacket+0x22>
 800ba0e:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 800ba12:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 800ba14:	2300      	movs	r3, #0
 800ba16:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ba18:	6834      	ldr	r4, [r6, #0]
  for (i = 0U; i < count32b; i++)
 800ba1a:	429d      	cmp	r5, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ba1c:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 800ba20:	d1f9      	bne.n	800ba16 <USB_ReadPacket+0x12>
 800ba22:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  if (remaining_bytes != 0U)
 800ba26:	b177      	cbz	r7, 800ba46 <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ba28:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
      remaining_bytes--;
 800ba2c:	3f01      	subs	r7, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ba2e:	6803      	ldr	r3, [r0, #0]
      remaining_bytes--;
 800ba30:	b2bf      	uxth	r7, r7
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ba32:	700b      	strb	r3, [r1, #0]
    } while (remaining_bytes != 0U);
 800ba34:	b12f      	cbz	r7, 800ba42 <USB_ReadPacket+0x3e>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ba36:	0a1a      	lsrs	r2, r3, #8
    } while (remaining_bytes != 0U);
 800ba38:	2f01      	cmp	r7, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ba3a:	704a      	strb	r2, [r1, #1]
    } while (remaining_bytes != 0U);
 800ba3c:	d001      	beq.n	800ba42 <USB_ReadPacket+0x3e>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ba3e:	0c1b      	lsrs	r3, r3, #16
 800ba40:	708b      	strb	r3, [r1, #2]
    } while (remaining_bytes != 0U);
 800ba42:	3701      	adds	r7, #1
 800ba44:	4439      	add	r1, r7
}
 800ba46:	4608      	mov	r0, r1
 800ba48:	bcf0      	pop	{r4, r5, r6, r7}
 800ba4a:	4770      	bx	lr

0800ba4c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800ba4c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800ba4e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800ba50:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ba52:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800ba56:	d00c      	beq.n	800ba72 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ba58:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800ba5c:	b10b      	cbz	r3, 800ba62 <USB_EPSetStall+0x16>
 800ba5e:	2a00      	cmp	r2, #0
 800ba60:	da14      	bge.n	800ba8c <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ba62:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ba66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba6a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800ba6e:	2000      	movs	r0, #0
 800ba70:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ba72:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800ba76:	2a00      	cmp	r2, #0
 800ba78:	db00      	blt.n	800ba7c <USB_EPSetStall+0x30>
 800ba7a:	b973      	cbnz	r3, 800ba9a <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ba7c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800ba80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba84:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800ba88:	2000      	movs	r0, #0
 800ba8a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ba8c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ba90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ba94:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800ba98:	e7e3      	b.n	800ba62 <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ba9a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800ba9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800baa2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800baa6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800baaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800baae:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800bab2:	e7e9      	b.n	800ba88 <USB_EPSetStall+0x3c>

0800bab4 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 800bab4:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800bab6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800bab8:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800baba:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800babe:	d013      	beq.n	800bae8 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bac0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800bac4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bac8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bacc:	78cb      	ldrb	r3, [r1, #3]
 800bace:	3b02      	subs	r3, #2
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d901      	bls.n	800bad8 <USB_EPClearStall+0x24>
}
 800bad4:	2000      	movs	r0, #0
 800bad6:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bad8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800badc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bae0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800bae4:	2000      	movs	r0, #0
 800bae6:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bae8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800baec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800baf0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800baf4:	78cb      	ldrb	r3, [r1, #3]
 800baf6:	3b02      	subs	r3, #2
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d8eb      	bhi.n	800bad4 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bafc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800bb00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb04:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800bb08:	2000      	movs	r0, #0
 800bb0a:	4770      	bx	lr

0800bb0c <USB_SetDevAddress>:
{
 800bb0c:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bb0e:	0109      	lsls	r1, r1, #4
}
 800bb10:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bb12:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bb16:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bb1a:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800bb1e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bb22:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800bb26:	4311      	orrs	r1, r2
 800bb28:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop

0800bb30 <USB_DevConnect>:
{
 800bb30:	4603      	mov	r3, r0
}
 800bb32:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb34:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bb38:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb3c:	f022 0203 	bic.w	r2, r2, #3
 800bb40:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bb44:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800bb48:	f023 0302 	bic.w	r3, r3, #2
 800bb4c:	604b      	str	r3, [r1, #4]
}
 800bb4e:	4770      	bx	lr

0800bb50 <USB_DevDisconnect>:
{
 800bb50:	4603      	mov	r3, r0
}
 800bb52:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb54:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb58:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb5c:	f022 0203 	bic.w	r2, r2, #3
 800bb60:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb64:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800bb68:	f043 0302 	orr.w	r3, r3, #2
 800bb6c:	604b      	str	r3, [r1, #4]
}
 800bb6e:	4770      	bx	lr

0800bb70 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800bb70:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800bb72:	6980      	ldr	r0, [r0, #24]
}
 800bb74:	4010      	ands	r0, r2
 800bb76:	4770      	bx	lr

0800bb78 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800bb78:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800bb7c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bb80:	69c0      	ldr	r0, [r0, #28]
 800bb82:	4018      	ands	r0, r3
}
 800bb84:	0c00      	lsrs	r0, r0, #16
 800bb86:	4770      	bx	lr

0800bb88 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800bb88:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800bb8c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bb90:	69c0      	ldr	r0, [r0, #28]
 800bb92:	4018      	ands	r0, r3
}
 800bb94:	b280      	uxth	r0, r0
 800bb96:	4770      	bx	lr

0800bb98 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bb98:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bb9c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bba0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bba4:	6940      	ldr	r0, [r0, #20]
}
 800bba6:	4010      	ands	r0, r2
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop

0800bbac <USB_ReadDevInEPInterrupt>:
{
 800bbac:	b430      	push	{r4, r5}
  msk = USBx_DEVICE->DIEPMSK;
 800bbae:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bbb2:	f001 050f 	and.w	r5, r1, #15
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bbb6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bbba:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bbbe:	40eb      	lsrs	r3, r5
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bbc0:	f8d1 0908 	ldr.w	r0, [r1, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bbc4:	01db      	lsls	r3, r3, #7
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	4323      	orrs	r3, r4
}
 800bbca:	bc30      	pop	{r4, r5}
 800bbcc:	4018      	ands	r0, r3
 800bbce:	4770      	bx	lr

0800bbd0 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800bbd0:	6940      	ldr	r0, [r0, #20]
}
 800bbd2:	f000 0001 	and.w	r0, r0, #1
 800bbd6:	4770      	bx	lr

0800bbd8 <USB_ActivateSetup>:
{
 800bbd8:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bbda:	4a09      	ldr	r2, [pc, #36]	; (800bc00 <USB_ActivateSetup+0x28>)
}
 800bbdc:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bbde:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 800bbe2:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bbe4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800bbe8:	4022      	ands	r2, r4
}
 800bbea:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bbee:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bbf2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800bbf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbfa:	604b      	str	r3, [r1, #4]
}
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	fffff800 	.word	0xfffff800

0800bc04 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bc04:	4b14      	ldr	r3, [pc, #80]	; (800bc58 <USB_EP0_OutStart+0x54>)
{
 800bc06:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bc08:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bc0a:	429c      	cmp	r4, r3
 800bc0c:	d81a      	bhi.n	800bc44 <USB_EP0_OutStart+0x40>
 800bc0e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bc12:	2300      	movs	r3, #0
  if (dma == 1U)
 800bc14:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bc16:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bc18:	6903      	ldr	r3, [r0, #16]
 800bc1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc1e:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bc20:	6903      	ldr	r3, [r0, #16]
 800bc22:	f043 0318 	orr.w	r3, r3, #24
 800bc26:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bc28:	6903      	ldr	r3, [r0, #16]
 800bc2a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bc2e:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 800bc30:	d104      	bne.n	800bc3c <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bc32:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bc34:	6803      	ldr	r3, [r0, #0]
 800bc36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bc3a:	6003      	str	r3, [r0, #0]
}
 800bc3c:	2000      	movs	r0, #0
 800bc3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc42:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc44:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800bc48:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	dae0      	bge.n	800bc12 <USB_EP0_OutStart+0xe>
}
 800bc50:	2000      	movs	r0, #0
 800bc52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc56:	4770      	bx	lr
 800bc58:	4f54300a 	.word	0x4f54300a

0800bc5c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bc5c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc5e:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800bc62:	b194      	cbz	r4, 800bc8a <USBD_CDC_EP0_RxReady+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bc64:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800bc68:	b16b      	cbz	r3, 800bc86 <USBD_CDC_EP0_RxReady+0x2a>
 800bc6a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800bc6e:	28ff      	cmp	r0, #255	; 0xff
 800bc70:	d009      	beq.n	800bc86 <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	4621      	mov	r1, r4
 800bc76:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800bc7a:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800bc7c:	23ff      	movs	r3, #255	; 0xff
  }

  return (uint8_t)USBD_OK;
 800bc7e:	2000      	movs	r0, #0
    hcdc->CmdOpCode = 0xFFU;
 800bc80:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
 800bc84:	bd10      	pop	{r4, pc}
  return (uint8_t)USBD_OK;
 800bc86:	2000      	movs	r0, #0
}
 800bc88:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800bc8a:	2003      	movs	r0, #3
}
 800bc8c:	bd10      	pop	{r4, pc}
 800bc8e:	bf00      	nop

0800bc90 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bc90:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bc92:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 800bc94:	4801      	ldr	r0, [pc, #4]	; (800bc9c <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bc96:	801a      	strh	r2, [r3, #0]
}
 800bc98:	4770      	bx	lr
 800bc9a:	bf00      	nop
 800bc9c:	240002c8 	.word	0x240002c8

0800bca0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bca0:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bca2:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 800bca4:	4801      	ldr	r0, [pc, #4]	; (800bcac <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bca6:	801a      	strh	r2, [r3, #0]
}
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	2400030c 	.word	0x2400030c

0800bcb0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bcb0:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bcb2:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800bcb4:	4801      	ldr	r0, [pc, #4]	; (800bcbc <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bcb6:	801a      	strh	r2, [r3, #0]
}
 800bcb8:	4770      	bx	lr
 800bcba:	bf00      	nop
 800bcbc:	2400035c 	.word	0x2400035c

0800bcc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bcc0:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bcc2:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 800bcc4:	4801      	ldr	r0, [pc, #4]	; (800bccc <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bcc6:	801a      	strh	r2, [r3, #0]
}
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	24000350 	.word	0x24000350

0800bcd0 <USBD_CDC_DataOut>:
{
 800bcd0:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcd2:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800bcd6:	b175      	cbz	r5, 800bcf6 <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bcd8:	4604      	mov	r4, r0
 800bcda:	f001 f915 	bl	800cf08 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bcde:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800bce2:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bce6:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800bcf0:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800bcf2:	2000      	movs	r0, #0
}
 800bcf4:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800bcf6:	2003      	movs	r0, #3
}
 800bcf8:	bd38      	pop	{r3, r4, r5, pc}
 800bcfa:	bf00      	nop

0800bcfc <USBD_CDC_DataIn>:
{
 800bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 800bcfe:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
 800bd02:	b367      	cbz	r7, 800bd5e <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bd04:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 800bd08:	4605      	mov	r5, r0
 800bd0a:	460a      	mov	r2, r1
 800bd0c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800bd10:	69b3      	ldr	r3, [r6, #24]
 800bd12:	b96b      	cbnz	r3, 800bd30 <USBD_CDC_DataIn+0x34>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bd14:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
    hcdc->TxState = 0U;
 800bd18:	2400      	movs	r4, #0
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bd1a:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800bd1c:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bd20:	b1db      	cbz	r3, 800bd5a <USBD_CDC_DataIn+0x5e>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bd22:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800bd26:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 800bd2a:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800bd2c:	4620      	mov	r0, r4
}
 800bd2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bd30:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 800bd34:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800bd38:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 800bd3c:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 800bd40:	fbb3 f4fc 	udiv	r4, r3, ip
 800bd44:	fb0c 3414 	mls	r4, ip, r4, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bd48:	2c00      	cmp	r4, #0
 800bd4a:	d1e3      	bne.n	800bd14 <USBD_CDC_DataIn+0x18>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bd4c:	4623      	mov	r3, r4
 800bd4e:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 800bd50:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bd52:	f001 f8bd 	bl	800ced0 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800bd56:	4620      	mov	r0, r4
}
 800bd58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (uint8_t)USBD_OK;
 800bd5a:	4618      	mov	r0, r3
}
 800bd5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800bd5e:	2003      	movs	r0, #3
}
 800bd60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd62:	bf00      	nop

0800bd64 <USBD_CDC_Setup>:
{
 800bd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 800bd68:	2300      	movs	r3, #0
{
 800bd6a:	b082      	sub	sp, #8
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd6c:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800bd70:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 800bd74:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hcdc == NULL)
 800bd78:	2f00      	cmp	r7, #0
 800bd7a:	d067      	beq.n	800be4c <USBD_CDC_Setup+0xe8>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd7c:	780e      	ldrb	r6, [r1, #0]
 800bd7e:	4680      	mov	r8, r0
 800bd80:	460c      	mov	r4, r1
 800bd82:	f016 0560 	ands.w	r5, r6, #96	; 0x60
 800bd86:	d01e      	beq.n	800bdc6 <USBD_CDC_Setup+0x62>
 800bd88:	2d20      	cmp	r5, #32
 800bd8a:	d008      	beq.n	800bd9e <USBD_CDC_Setup+0x3a>
          ret = USBD_FAIL;
 800bd8c:	2503      	movs	r5, #3
          USBD_CtlError(pdev, req);
 800bd8e:	4621      	mov	r1, r4
 800bd90:	4640      	mov	r0, r8
 800bd92:	f000 fd4f 	bl	800c834 <USBD_CtlError>
}
 800bd96:	4628      	mov	r0, r5
 800bd98:	b002      	add	sp, #8
 800bd9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (req->wLength != 0U)
 800bd9e:	88ca      	ldrh	r2, [r1, #6]
 800bda0:	b382      	cbz	r2, 800be04 <USBD_CDC_Setup+0xa0>
        if ((req->bmRequest & 0x80U) != 0U)
 800bda2:	0631      	lsls	r1, r6, #24
 800bda4:	d557      	bpl.n	800be56 <USBD_CDC_Setup+0xf2>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bda6:	f8d0 52c0 	ldr.w	r5, [r0, #704]	; 0x2c0
 800bdaa:	4639      	mov	r1, r7
 800bdac:	7860      	ldrb	r0, [r4, #1]
 800bdae:	68ae      	ldr	r6, [r5, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdb0:	461d      	mov	r5, r3
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bdb2:	47b0      	blx	r6
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bdb4:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bdb6:	4639      	mov	r1, r7
 800bdb8:	4640      	mov	r0, r8
 800bdba:	2a07      	cmp	r2, #7
 800bdbc:	bf28      	it	cs
 800bdbe:	2207      	movcs	r2, #7
 800bdc0:	f000 fd6a 	bl	800c898 <USBD_CtlSendData>
 800bdc4:	e7e7      	b.n	800bd96 <USBD_CDC_Setup+0x32>
      switch (req->bRequest)
 800bdc6:	784b      	ldrb	r3, [r1, #1]
 800bdc8:	2b0b      	cmp	r3, #11
 800bdca:	d8df      	bhi.n	800bd8c <USBD_CDC_Setup+0x28>
 800bdcc:	a201      	add	r2, pc, #4	; (adr r2, 800bdd4 <USBD_CDC_Setup+0x70>)
 800bdce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd2:	bf00      	nop
 800bdd4:	0800be37 	.word	0x0800be37
 800bdd8:	0800bd97 	.word	0x0800bd97
 800bddc:	0800bd8d 	.word	0x0800bd8d
 800bde0:	0800bd8d 	.word	0x0800bd8d
 800bde4:	0800bd8d 	.word	0x0800bd8d
 800bde8:	0800bd8d 	.word	0x0800bd8d
 800bdec:	0800bd8d 	.word	0x0800bd8d
 800bdf0:	0800bd8d 	.word	0x0800bd8d
 800bdf4:	0800bd8d 	.word	0x0800bd8d
 800bdf8:	0800bd8d 	.word	0x0800bd8d
 800bdfc:	0800be23 	.word	0x0800be23
 800be00:	0800be19 	.word	0x0800be19
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be04:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 800be08:	4615      	mov	r5, r2
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be0a:	7848      	ldrb	r0, [r1, #1]
 800be0c:	689b      	ldr	r3, [r3, #8]
 800be0e:	4798      	blx	r3
}
 800be10:	4628      	mov	r0, r5
 800be12:	b002      	add	sp, #8
 800be14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800be18:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800be1c:	2b03      	cmp	r3, #3
 800be1e:	d0ba      	beq.n	800bd96 <USBD_CDC_Setup+0x32>
 800be20:	e7b4      	b.n	800bd8c <USBD_CDC_Setup+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be22:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800be26:	2b03      	cmp	r3, #3
 800be28:	d1b0      	bne.n	800bd8c <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800be2a:	2201      	movs	r2, #1
 800be2c:	f10d 0105 	add.w	r1, sp, #5
 800be30:	f000 fd32 	bl	800c898 <USBD_CtlSendData>
 800be34:	e7af      	b.n	800bd96 <USBD_CDC_Setup+0x32>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be36:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800be3a:	2a03      	cmp	r2, #3
 800be3c:	d1a6      	bne.n	800bd8c <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800be3e:	2202      	movs	r2, #2
 800be40:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 800be44:	461d      	mov	r5, r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800be46:	f000 fd27 	bl	800c898 <USBD_CtlSendData>
 800be4a:	e7a4      	b.n	800bd96 <USBD_CDC_Setup+0x32>
    return (uint8_t)USBD_FAIL;
 800be4c:	2503      	movs	r5, #3
}
 800be4e:	4628      	mov	r0, r5
 800be50:	b002      	add	sp, #8
 800be52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hcdc->CmdOpCode = req->bRequest;
 800be56:	7864      	ldrb	r4, [r4, #1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800be58:	4639      	mov	r1, r7
          hcdc->CmdLength = (uint8_t)req->wLength;
 800be5a:	f887 2201 	strb.w	r2, [r7, #513]	; 0x201
  USBD_StatusTypeDef ret = USBD_OK;
 800be5e:	461d      	mov	r5, r3
          hcdc->CmdOpCode = req->bRequest;
 800be60:	f887 4200 	strb.w	r4, [r7, #512]	; 0x200
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800be64:	f000 fd30 	bl	800c8c8 <USBD_CtlPrepareRx>
 800be68:	e795      	b.n	800bd96 <USBD_CDC_Setup+0x32>
 800be6a:	bf00      	nop

0800be6c <USBD_CDC_DeInit>:
{
 800be6c:	b538      	push	{r3, r4, r5, lr}
 800be6e:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800be70:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800be72:	2181      	movs	r1, #129	; 0x81
 800be74:	f000 ffe0 	bl	800ce38 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800be78:	2101      	movs	r1, #1
 800be7a:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800be7c:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800be7e:	f000 ffdb 	bl	800ce38 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800be82:	4620      	mov	r0, r4
 800be84:	2182      	movs	r1, #130	; 0x82
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800be86:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800be8a:	f000 ffd5 	bl	800ce38 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800be8e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800be92:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800be94:	b14b      	cbz	r3, 800beaa <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800be96:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800be9e:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800bea2:	f001 f839 	bl	800cf18 <USBD_static_free>
    pdev->pClassData = NULL;
 800bea6:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800beaa:	2000      	movs	r0, #0
 800beac:	bd38      	pop	{r3, r4, r5, pc}
 800beae:	bf00      	nop

0800beb0 <USBD_CDC_Init>:
{
 800beb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beb4:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800beb6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800beba:	f001 f829 	bl	800cf10 <USBD_static_malloc>
  if (hcdc == NULL)
 800bebe:	4605      	mov	r5, r0
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d04d      	beq.n	800bf60 <USBD_CDC_Init+0xb0>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bec4:	7c23      	ldrb	r3, [r4, #16]
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bec6:	2601      	movs	r6, #1
  pdev->pClassData = (void *)hcdc;
 800bec8:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800becc:	b38b      	cbz	r3, 800bf32 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bece:	2340      	movs	r3, #64	; 0x40
 800bed0:	2181      	movs	r1, #129	; 0x81
 800bed2:	2202      	movs	r2, #2
 800bed4:	4620      	mov	r0, r4
 800bed6:	f000 ff9d 	bl	800ce14 <USBD_LL_OpenEP>
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800beda:	4631      	mov	r1, r6
 800bedc:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bede:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bee0:	2202      	movs	r2, #2
 800bee2:	4620      	mov	r0, r4
 800bee4:	f000 ff96 	bl	800ce14 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bee8:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800beea:	2203      	movs	r2, #3
 800beec:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800beee:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bef2:	4620      	mov	r0, r4
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bef4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bef8:	2308      	movs	r3, #8
 800befa:	f000 ff8b 	bl	800ce14 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800befe:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bf02:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 800bf06:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bf08:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4798      	blx	r3
  hcdc->TxState = 0U;
 800bf10:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800bf14:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf18:	7c26      	ldrb	r6, [r4, #16]
 800bf1a:	b9b6      	cbnz	r6, 800bf4a <USBD_CDC_Init+0x9a>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf1c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800bf20:	4641      	mov	r1, r8
 800bf22:	4620      	mov	r0, r4
 800bf24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf28:	f000 ffe0 	bl	800ceec <USBD_LL_PrepareReceive>
}
 800bf2c:	4630      	mov	r0, r6
 800bf2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bf32:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf36:	2181      	movs	r1, #129	; 0x81
 800bf38:	2202      	movs	r2, #2
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f000 ff6a 	bl	800ce14 <USBD_LL_OpenEP>
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bf40:	4631      	mov	r1, r6
 800bf42:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bf46:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bf48:	e7ca      	b.n	800bee0 <USBD_CDC_Init+0x30>
  return (uint8_t)USBD_OK;
 800bf4a:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf4c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800bf50:	4641      	mov	r1, r8
 800bf52:	4620      	mov	r0, r4
 800bf54:	2340      	movs	r3, #64	; 0x40
 800bf56:	f000 ffc9 	bl	800ceec <USBD_LL_PrepareReceive>
}
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 800bf60:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 800bf62:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
}
 800bf66:	4630      	mov	r0, r6
 800bf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bf6c <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800bf6c:	b119      	cbz	r1, 800bf76 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800bf6e:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bf72:	2000      	movs	r0, #0
 800bf74:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800bf76:	2003      	movs	r0, #3
}
 800bf78:	4770      	bx	lr
 800bf7a:	bf00      	nop

0800bf7c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf7c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800bf80:	b12b      	cbz	r3, 800bf8e <USBD_CDC_SetTxBuffer+0x12>
  }

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
 800bf82:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800bf84:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bf88:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  return (uint8_t)USBD_OK;
 800bf8c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800bf8e:	2003      	movs	r0, #3
}
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop

0800bf94 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf94:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800bf98:	b11b      	cbz	r3, 800bfa2 <USBD_CDC_SetRxBuffer+0xe>
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
 800bf9a:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800bf9c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  return (uint8_t)USBD_OK;
 800bfa0:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800bfa2:	2003      	movs	r0, #3
}
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop

0800bfa8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bfa8:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bfaa:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800bfae:	b18d      	cbz	r5, 800bfd4 <USBD_CDC_TransmitPacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800bfb0:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800bfb4:	b10c      	cbz	r4, 800bfba <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bfb6:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800bfb8:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bfba:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    hcdc->TxState = 1U;
 800bfbe:	2101      	movs	r1, #1
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bfc0:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
    hcdc->TxState = 1U;
 800bfc4:	f8c5 1214 	str.w	r1, [r5, #532]	; 0x214
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bfc8:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bfca:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bfcc:	f000 ff80 	bl	800ced0 <USBD_LL_Transmit>
    ret = USBD_OK;
 800bfd0:	4620      	mov	r0, r4
}
 800bfd2:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800bfd4:	2003      	movs	r0, #3
}
 800bfd6:	bd38      	pop	{r3, r4, r5, pc}

0800bfd8 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bfd8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800bfdc:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800bfde:	b18a      	cbz	r2, 800c004 <USBD_CDC_ReceivePacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfe0:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bfe2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfe6:	b134      	cbz	r4, 800bff6 <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bfe8:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bfea:	2340      	movs	r3, #64	; 0x40
 800bfec:	2101      	movs	r1, #1
 800bfee:	f000 ff7d 	bl	800ceec <USBD_LL_PrepareReceive>
}
 800bff2:	4620      	mov	r0, r4
 800bff4:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bffa:	2101      	movs	r1, #1
 800bffc:	f000 ff76 	bl	800ceec <USBD_LL_PrepareReceive>
}
 800c000:	4620      	mov	r0, r4
 800c002:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800c004:	2403      	movs	r4, #3
}
 800c006:	4620      	mov	r0, r4
 800c008:	bd10      	pop	{r4, pc}
 800c00a:	bf00      	nop

0800c00c <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c00c:	b178      	cbz	r0, 800c02e <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c00e:	2300      	movs	r3, #0
 800c010:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c014:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c018:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c01c:	b109      	cbz	r1, 800c022 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800c01e:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c022:	2301      	movs	r3, #1
  pdev->id = id;
 800c024:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c026:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c02a:	f000 beb1 	b.w	800cd90 <USBD_LL_Init>

  return ret;
}
 800c02e:	2003      	movs	r0, #3
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop

0800c034 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c034:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 800c036:	2400      	movs	r4, #0
{
 800c038:	b083      	sub	sp, #12
  uint16_t len = 0U;
 800c03a:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800c03e:	b181      	cbz	r1, 800c062 <USBD_RegisterClass+0x2e>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c040:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800c042:	4605      	mov	r5, r0
  pdev->pClass = pclass;
 800c044:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c048:	b143      	cbz	r3, 800c05c <USBD_RegisterClass+0x28>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c04a:	f10d 0006 	add.w	r0, sp, #6
 800c04e:	4798      	blx	r3
 800c050:	4603      	mov	r3, r0
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c052:	4620      	mov	r0, r4
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c054:	f8c5 32cc 	str.w	r3, [r5, #716]	; 0x2cc
}
 800c058:	b003      	add	sp, #12
 800c05a:	bd30      	pop	{r4, r5, pc}
  return USBD_OK;
 800c05c:	4618      	mov	r0, r3
}
 800c05e:	b003      	add	sp, #12
 800c060:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800c062:	2003      	movs	r0, #3
}
 800c064:	b003      	add	sp, #12
 800c066:	bd30      	pop	{r4, r5, pc}

0800c068 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c068:	f000 bec6 	b.w	800cdf8 <USBD_LL_Start>

0800c06c <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800c06c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c070:	b10b      	cbz	r3, 800c076 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4718      	bx	r3
  }

  return ret;
}
 800c076:	2003      	movs	r0, #3
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop

0800c07c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c07c:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c07e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c082:	b10b      	cbz	r3, 800c088 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	4798      	blx	r3
  }

  return USBD_OK;
}
 800c088:	2000      	movs	r0, #0
 800c08a:	bd08      	pop	{r3, pc}

0800c08c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c08c:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c08e:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800c092:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c094:	4628      	mov	r0, r5
 800c096:	f000 fbb9 	bl	800c80c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800c09a:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800c09e:	2001      	movs	r0, #1
  pdev->ep0_data_len = pdev->request.wLength;
 800c0a0:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
 800c0a4:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 800c0a8:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800c0ac:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 800c0ae:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800c0b2:	d009      	beq.n	800c0c8 <USBD_LL_SetupStage+0x3c>
 800c0b4:	2b02      	cmp	r3, #2
 800c0b6:	d013      	beq.n	800c0e0 <USBD_LL_SetupStage+0x54>
 800c0b8:	b163      	cbz	r3, 800c0d4 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800c0c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c0c4:	f000 bec6 	b.w	800ce54 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c0c8:	4629      	mov	r1, r5
 800c0ca:	4620      	mov	r0, r4
}
 800c0cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c0d0:	f000 bac8 	b.w	800c664 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c0d4:	4629      	mov	r1, r5
 800c0d6:	4620      	mov	r0, r4
}
 800c0d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c0dc:	f000 b924 	b.w	800c328 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c0e0:	4629      	mov	r1, r5
 800c0e2:	4620      	mov	r0, r4
}
 800c0e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c0e8:	f000 baf4 	b.w	800c6d4 <USBD_StdEPReq>

0800c0ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c0ec:	b570      	push	{r4, r5, r6, lr}
 800c0ee:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c0f0:	b929      	cbnz	r1, 800c0fe <USBD_LL_DataOutStage+0x12>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c0f2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c0f6:	2b03      	cmp	r3, #3
 800c0f8:	d00d      	beq.n	800c116 <USBD_LL_DataOutStage+0x2a>
      }
    }
  }

  return USBD_OK;
}
 800c0fa:	2000      	movs	r0, #0
 800c0fc:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c102:	2b03      	cmp	r3, #3
 800c104:	d1f9      	bne.n	800c0fa <USBD_LL_DataOutStage+0xe>
      if (pdev->pClass->DataOut != NULL)
 800c106:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c10a:	699b      	ldr	r3, [r3, #24]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d0f4      	beq.n	800c0fa <USBD_LL_DataOutStage+0xe>
}
 800c110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c114:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800c116:	e9d0 3557 	ldrd	r3, r5, [r0, #348]	; 0x15c
 800c11a:	42ab      	cmp	r3, r5
 800c11c:	d808      	bhi.n	800c130 <USBD_LL_DataOutStage+0x44>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c11e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c122:	2b03      	cmp	r3, #3
 800c124:	d00f      	beq.n	800c146 <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 800c126:	4620      	mov	r0, r4
 800c128:	f000 fbe6 	bl	800c8f8 <USBD_CtlSendStatus>
}
 800c12c:	2000      	movs	r0, #0
 800c12e:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800c130:	1b5b      	subs	r3, r3, r5
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c132:	4611      	mov	r1, r2
 800c134:	462a      	mov	r2, r5
 800c136:	429d      	cmp	r5, r3
        pep->rem_length -= pep->maxpacket;
 800c138:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c13c:	bf28      	it	cs
 800c13e:	461a      	movcs	r2, r3
 800c140:	f000 fbd0 	bl	800c8e4 <USBD_CtlContinueRx>
 800c144:	e7d9      	b.n	800c0fa <USBD_LL_DataOutStage+0xe>
          if (pdev->pClass->EP0_RxReady != NULL)
 800c146:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c14a:	691b      	ldr	r3, [r3, #16]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d0ea      	beq.n	800c126 <USBD_LL_DataOutStage+0x3a>
            pdev->pClass->EP0_RxReady(pdev);
 800c150:	4798      	blx	r3
 800c152:	e7e8      	b.n	800c126 <USBD_LL_DataOutStage+0x3a>

0800c154 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c154:	b570      	push	{r4, r5, r6, lr}
 800c156:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c158:	b949      	cbnz	r1, 800c16e <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c15a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c15e:	2b02      	cmp	r3, #2
 800c160:	d011      	beq.n	800c186 <USBD_LL_DataInStage+0x32>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c162:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800c166:	2b01      	cmp	r3, #1
 800c168:	d022      	beq.n	800c1b0 <USBD_LL_DataInStage+0x5c>
      }
    }
  }

  return USBD_OK;
}
 800c16a:	2000      	movs	r0, #0
 800c16c:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c16e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c172:	2b03      	cmp	r3, #3
 800c174:	d1f9      	bne.n	800c16a <USBD_LL_DataInStage+0x16>
      if (pdev->pClass->DataIn != NULL)
 800c176:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c17a:	695b      	ldr	r3, [r3, #20]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d0f4      	beq.n	800c16a <USBD_LL_DataInStage+0x16>
}
 800c180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c184:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800c186:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 800c18a:	460d      	mov	r5, r1
 800c18c:	42b3      	cmp	r3, r6
 800c18e:	d814      	bhi.n	800c1ba <USBD_LL_DataInStage+0x66>
        if ((pep->maxpacket == pep->rem_length) &&
 800c190:	d020      	beq.n	800c1d4 <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c192:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800c196:	2b03      	cmp	r3, #3
 800c198:	d029      	beq.n	800c1ee <USBD_LL_DataInStage+0x9a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c19a:	2180      	movs	r1, #128	; 0x80
 800c19c:	4620      	mov	r0, r4
 800c19e:	f000 fe59 	bl	800ce54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f000 fbb4 	bl	800c910 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800c1a8:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d1dc      	bne.n	800c16a <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 800c1b0:	2300      	movs	r3, #0
}
 800c1b2:	2000      	movs	r0, #0
      pdev->dev_test_mode = 0U;
 800c1b4:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 800c1b8:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800c1ba:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c1bc:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800c1be:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	f000 fb77 	bl	800c8b4 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1c6:	462b      	mov	r3, r5
 800c1c8:	462a      	mov	r2, r5
 800c1ca:	4629      	mov	r1, r5
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	f000 fe8d 	bl	800ceec <USBD_LL_PrepareReceive>
 800c1d2:	e7c6      	b.n	800c162 <USBD_LL_DataInStage+0xe>
            (pep->total_length >= pep->maxpacket) &&
 800c1d4:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d8db      	bhi.n	800c192 <USBD_LL_DataInStage+0x3e>
            (pep->total_length >= pep->maxpacket) &&
 800c1da:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d2d7      	bcs.n	800c192 <USBD_LL_DataInStage+0x3e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c1e2:	460a      	mov	r2, r1
 800c1e4:	f000 fb66 	bl	800c8b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c1e8:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800c1ec:	e7eb      	b.n	800c1c6 <USBD_LL_DataInStage+0x72>
            if (pdev->pClass->EP0_TxSent != NULL)
 800c1ee:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d0d0      	beq.n	800c19a <USBD_LL_DataInStage+0x46>
              pdev->pClass->EP0_TxSent(pdev);
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	4798      	blx	r3
 800c1fc:	e7cd      	b.n	800c19a <USBD_LL_DataInStage+0x46>
 800c1fe:	bf00      	nop

0800c200 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800c200:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c202:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 800c204:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c208:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 800c20c:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800c20e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 800c212:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 800c216:	b1eb      	cbz	r3, 800c254 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800c218:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800c21c:	b570      	push	{r4, r5, r6, lr}
 800c21e:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 800c220:	b112      	cbz	r2, 800c228 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	b103      	cbz	r3, 800c228 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c226:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c228:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c22a:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c22c:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c22e:	4620      	mov	r0, r4
 800c230:	462b      	mov	r3, r5
 800c232:	4611      	mov	r1, r2
 800c234:	f000 fdee 	bl	800ce14 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c238:	462b      	mov	r3, r5
 800c23a:	2200      	movs	r2, #0
 800c23c:	2180      	movs	r1, #128	; 0x80
 800c23e:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c240:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c244:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c248:	f000 fde4 	bl	800ce14 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
 800c24c:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c24e:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c250:	6225      	str	r5, [r4, #32]
}
 800c252:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800c254:	2003      	movs	r0, #3
}
 800c256:	4770      	bx	lr

0800c258 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c258:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 800c25a:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800c25c:	7419      	strb	r1, [r3, #16]
}
 800c25e:	4770      	bx	lr

0800c260 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c260:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c262:	2104      	movs	r1, #4

  return USBD_OK;
}
 800c264:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 800c266:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c26a:	b2d2      	uxtb	r2, r2
 800c26c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c270:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 800c274:	4770      	bx	lr
 800c276:	bf00      	nop

0800c278 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c278:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c27c:	2b04      	cmp	r3, #4
 800c27e:	d104      	bne.n	800c28a <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c280:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800c284:	b2db      	uxtb	r3, r3
 800c286:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800c28a:	2000      	movs	r0, #0
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop

0800c290 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800c290:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800c294:	b15a      	cbz	r2, 800c2ae <USBD_LL_SOF+0x1e>
{
 800c296:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c298:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c29c:	2b03      	cmp	r3, #3
 800c29e:	d001      	beq.n	800c2a4 <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800c2a0:	2000      	movs	r0, #0
}
 800c2a2:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800c2a4:	69d3      	ldr	r3, [r2, #28]
 800c2a6:	b123      	cbz	r3, 800c2b2 <USBD_LL_SOF+0x22>
      (void)pdev->pClass->SOF(pdev);
 800c2a8:	4798      	blx	r3
  return USBD_OK;
 800c2aa:	2000      	movs	r0, #0
}
 800c2ac:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c2ae:	2003      	movs	r0, #3
}
 800c2b0:	4770      	bx	lr
  return USBD_OK;
 800c2b2:	4618      	mov	r0, r3
}
 800c2b4:	bd08      	pop	{r3, pc}
 800c2b6:	bf00      	nop

0800c2b8 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800c2b8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800c2bc:	b15a      	cbz	r2, 800c2d6 <USBD_LL_IsoINIncomplete+0x1e>
{
 800c2be:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2c0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c2c4:	2b03      	cmp	r3, #3
 800c2c6:	d001      	beq.n	800c2cc <USBD_LL_IsoINIncomplete+0x14>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800c2c8:	2000      	movs	r0, #0
}
 800c2ca:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c2cc:	6a13      	ldr	r3, [r2, #32]
 800c2ce:	b123      	cbz	r3, 800c2da <USBD_LL_IsoINIncomplete+0x22>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c2d0:	4798      	blx	r3
  return USBD_OK;
 800c2d2:	2000      	movs	r0, #0
}
 800c2d4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c2d6:	2003      	movs	r0, #3
}
 800c2d8:	4770      	bx	lr
  return USBD_OK;
 800c2da:	4618      	mov	r0, r3
}
 800c2dc:	bd08      	pop	{r3, pc}
 800c2de:	bf00      	nop

0800c2e0 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800c2e0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800c2e4:	b15a      	cbz	r2, 800c2fe <USBD_LL_IsoOUTIncomplete+0x1e>
{
 800c2e6:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2e8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c2ec:	2b03      	cmp	r3, #3
 800c2ee:	d001      	beq.n	800c2f4 <USBD_LL_IsoOUTIncomplete+0x14>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800c2f0:	2000      	movs	r0, #0
}
 800c2f2:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c2f4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c2f6:	b123      	cbz	r3, 800c302 <USBD_LL_IsoOUTIncomplete+0x22>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c2f8:	4798      	blx	r3
  return USBD_OK;
 800c2fa:	2000      	movs	r0, #0
}
 800c2fc:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c2fe:	2003      	movs	r0, #3
}
 800c300:	4770      	bx	lr
  return USBD_OK;
 800c302:	4618      	mov	r0, r3
}
 800c304:	bd08      	pop	{r3, pc}
 800c306:	bf00      	nop

0800c308 <USBD_LL_DevConnected>:
 800c308:	2000      	movs	r0, #0
 800c30a:	4770      	bx	lr

0800c30c <USBD_LL_DevDisconnected>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c30c:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 800c30e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c312:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 800c316:	b12a      	cbz	r2, 800c324 <USBD_LL_DevDisconnected+0x18>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c318:	6852      	ldr	r2, [r2, #4]
 800c31a:	7901      	ldrb	r1, [r0, #4]
{
 800c31c:	b508      	push	{r3, lr}
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c31e:	4790      	blx	r2
  }

  return USBD_OK;
}
 800c320:	2000      	movs	r0, #0
 800c322:	bd08      	pop	{r3, pc}
 800c324:	2000      	movs	r0, #0
 800c326:	4770      	bx	lr

0800c328 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c328:	b570      	push	{r4, r5, r6, lr}
 800c32a:	780c      	ldrb	r4, [r1, #0]
 800c32c:	b082      	sub	sp, #8
 800c32e:	460e      	mov	r6, r1
 800c330:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c332:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800c336:	2c20      	cmp	r4, #32
 800c338:	d00e      	beq.n	800c358 <USBD_StdDevReq+0x30>
 800c33a:	2c40      	cmp	r4, #64	; 0x40
 800c33c:	d00c      	beq.n	800c358 <USBD_StdDevReq+0x30>
 800c33e:	b1ac      	cbz	r4, 800c36c <USBD_StdDevReq+0x44>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c340:	2180      	movs	r1, #128	; 0x80
 800c342:	4628      	mov	r0, r5
 800c344:	f000 fd86 	bl	800ce54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c348:	2100      	movs	r1, #0
 800c34a:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800c34c:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800c34e:	f000 fd81 	bl	800ce54 <USBD_LL_StallEP>
}
 800c352:	4620      	mov	r0, r4
 800c354:	b002      	add	sp, #8
 800c356:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c358:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800c35c:	4631      	mov	r1, r6
 800c35e:	4628      	mov	r0, r5
 800c360:	689b      	ldr	r3, [r3, #8]
 800c362:	4798      	blx	r3
 800c364:	4604      	mov	r4, r0
}
 800c366:	4620      	mov	r0, r4
 800c368:	b002      	add	sp, #8
 800c36a:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 800c36c:	784b      	ldrb	r3, [r1, #1]
 800c36e:	2b09      	cmp	r3, #9
 800c370:	d8e6      	bhi.n	800c340 <USBD_StdDevReq+0x18>
 800c372:	a201      	add	r2, pc, #4	; (adr r2, 800c378 <USBD_StdDevReq+0x50>)
 800c374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c378:	0800c3d9 	.word	0x0800c3d9
 800c37c:	0800c407 	.word	0x0800c407
 800c380:	0800c341 	.word	0x0800c341
 800c384:	0800c423 	.word	0x0800c423
 800c388:	0800c341 	.word	0x0800c341
 800c38c:	0800c435 	.word	0x0800c435
 800c390:	0800c46d 	.word	0x0800c46d
 800c394:	0800c341 	.word	0x0800c341
 800c398:	0800c489 	.word	0x0800c489
 800c39c:	0800c3a1 	.word	0x0800c3a1
  cfgidx = (uint8_t)(req->wValue);
 800c3a0:	7889      	ldrb	r1, [r1, #2]
 800c3a2:	4eaf      	ldr	r6, [pc, #700]	; (800c660 <USBD_StdDevReq+0x338>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c3a4:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800c3a6:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c3a8:	f200 813d 	bhi.w	800c626 <USBD_StdDevReq+0x2fe>
  switch (pdev->dev_state)
 800c3ac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c3b0:	2b02      	cmp	r3, #2
 800c3b2:	b2da      	uxtb	r2, r3
 800c3b4:	f000 8125 	beq.w	800c602 <USBD_StdDevReq+0x2da>
 800c3b8:	2a03      	cmp	r2, #3
 800c3ba:	f000 80ff 	beq.w	800c5bc <USBD_StdDevReq+0x294>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3be:	2180      	movs	r1, #128	; 0x80
      ret = USBD_FAIL;
 800c3c0:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3c2:	f000 fd47 	bl	800ce54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	f000 fd43 	bl	800ce54 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c3ce:	7831      	ldrb	r1, [r6, #0]
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	f7ff fe53 	bl	800c07c <USBD_ClrClassConfig>
      break;
 800c3d6:	e7bc      	b.n	800c352 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800c3d8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800c3dc:	3a01      	subs	r2, #1
 800c3de:	2a02      	cmp	r2, #2
 800c3e0:	d86a      	bhi.n	800c4b8 <USBD_StdDevReq+0x190>
      if (req->wLength != 0x2U)
 800c3e2:	88ca      	ldrh	r2, [r1, #6]
 800c3e4:	2a02      	cmp	r2, #2
 800c3e6:	d167      	bne.n	800c4b8 <USBD_StdDevReq+0x190>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c3e8:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup != 0U)
 800c3ea:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c3ee:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800c3f0:	b10a      	cbz	r2, 800c3f6 <USBD_StdDevReq+0xce>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c3f2:	2203      	movs	r2, #3
 800c3f4:	60c2      	str	r2, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c3f6:	2202      	movs	r2, #2
 800c3f8:	f105 010c 	add.w	r1, r5, #12
 800c3fc:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800c3fe:	461c      	mov	r4, r3
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c400:	f000 fa4a 	bl	800c898 <USBD_CtlSendData>
      break;
 800c404:	e7a5      	b.n	800c352 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800c406:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c40a:	3b01      	subs	r3, #1
 800c40c:	2b02      	cmp	r3, #2
 800c40e:	d853      	bhi.n	800c4b8 <USBD_StdDevReq+0x190>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c410:	884b      	ldrh	r3, [r1, #2]
 800c412:	2b01      	cmp	r3, #1
 800c414:	d19d      	bne.n	800c352 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800c416:	2300      	movs	r3, #0
 800c418:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c41c:	f000 fa6c 	bl	800c8f8 <USBD_CtlSendStatus>
 800c420:	e797      	b.n	800c352 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c422:	884b      	ldrh	r3, [r1, #2]
 800c424:	2b01      	cmp	r3, #1
 800c426:	d194      	bne.n	800c352 <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 800c428:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c42c:	4628      	mov	r0, r5
 800c42e:	f000 fa63 	bl	800c8f8 <USBD_CtlSendStatus>
 800c432:	e78e      	b.n	800c352 <USBD_StdDevReq+0x2a>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c434:	888b      	ldrh	r3, [r1, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d13e      	bne.n	800c4b8 <USBD_StdDevReq+0x190>
 800c43a:	88cb      	ldrh	r3, [r1, #6]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d13b      	bne.n	800c4b8 <USBD_StdDevReq+0x190>
 800c440:	884e      	ldrh	r6, [r1, #2]
 800c442:	2e7f      	cmp	r6, #127	; 0x7f
 800c444:	d838      	bhi.n	800c4b8 <USBD_StdDevReq+0x190>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c446:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c44a:	2b03      	cmp	r3, #3
 800c44c:	d034      	beq.n	800c4b8 <USBD_StdDevReq+0x190>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c44e:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800c450:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c454:	f000 fd2e 	bl	800ceb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c458:	4628      	mov	r0, r5
 800c45a:	f000 fa4d 	bl	800c8f8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800c45e:	2e00      	cmp	r6, #0
 800c460:	f040 80cb 	bne.w	800c5fa <USBD_StdDevReq+0x2d2>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c464:	2301      	movs	r3, #1
 800c466:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800c46a:	e772      	b.n	800c352 <USBD_StdDevReq+0x2a>
          USBD_GetDescriptor(pdev, req);
 800c46c:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800c46e:	2100      	movs	r1, #0
 800c470:	0a13      	lsrs	r3, r2, #8
 800c472:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 800c476:	3b01      	subs	r3, #1
 800c478:	2b06      	cmp	r3, #6
 800c47a:	d81d      	bhi.n	800c4b8 <USBD_StdDevReq+0x190>
 800c47c:	e8df f003 	tbb	[pc, r3]
 800c480:	1c4d606d 	.word	0x1c4d606d
 800c484:	431c      	.short	0x431c
 800c486:	27          	.byte	0x27
 800c487:	00          	.byte	0x00
  if (req->wLength != 1U)
 800c488:	88ca      	ldrh	r2, [r1, #6]
 800c48a:	2a01      	cmp	r2, #1
 800c48c:	d114      	bne.n	800c4b8 <USBD_StdDevReq+0x190>
    switch (pdev->dev_state)
 800c48e:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800c492:	2902      	cmp	r1, #2
 800c494:	b2cb      	uxtb	r3, r1
 800c496:	f200 808a 	bhi.w	800c5ae <USBD_StdDevReq+0x286>
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f43f af50 	beq.w	800c340 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	4601      	mov	r1, r0
 800c4a4:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c4a8:	f000 f9f6 	bl	800c898 <USBD_CtlSendData>
        break;
 800c4ac:	e751      	b.n	800c352 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c4ae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d15d      	bne.n	800c574 <USBD_StdDevReq+0x24c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4b8:	2180      	movs	r1, #128	; 0x80
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	f000 fcca 	bl	800ce54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	f000 fcc6 	bl	800ce54 <USBD_LL_StallEP>
}
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	b002      	add	sp, #8
 800c4cc:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4ce:	7c03      	ldrb	r3, [r0, #16]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d1f1      	bne.n	800c4b8 <USBD_StdDevReq+0x190>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c4d4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c4d8:	f10d 0006 	add.w	r0, sp, #6
 800c4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4de:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c4e0:	2307      	movs	r3, #7
 800c4e2:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 800c4e4:	88f2      	ldrh	r2, [r6, #6]
 800c4e6:	2a00      	cmp	r2, #0
 800c4e8:	d0a0      	beq.n	800c42c <USBD_StdDevReq+0x104>
    if (len != 0U)
 800c4ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d0e2      	beq.n	800c4b8 <USBD_StdDevReq+0x190>
      len = MIN(len, req->wLength);
 800c4f2:	429a      	cmp	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c4f4:	4601      	mov	r1, r0
 800c4f6:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 800c4f8:	bf28      	it	cs
 800c4fa:	461a      	movcs	r2, r3
 800c4fc:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c500:	f000 f9ca 	bl	800c898 <USBD_CtlSendData>
 800c504:	e725      	b.n	800c352 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c506:	7c03      	ldrb	r3, [r0, #16]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d1d5      	bne.n	800c4b8 <USBD_StdDevReq+0x190>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c50c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c510:	f10d 0006 	add.w	r0, sp, #6
 800c514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c516:	4798      	blx	r3
  if (err != 0U)
 800c518:	e7e4      	b.n	800c4e4 <USBD_StdDevReq+0x1bc>
      switch ((uint8_t)(req->wValue))
 800c51a:	b2d2      	uxtb	r2, r2
 800c51c:	2a05      	cmp	r2, #5
 800c51e:	d8cb      	bhi.n	800c4b8 <USBD_StdDevReq+0x190>
 800c520:	a301      	add	r3, pc, #4	; (adr r3, 800c528 <USBD_StdDevReq+0x200>)
 800c522:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800c526:	bf00      	nop
 800c528:	0800c4af 	.word	0x0800c4af
 800c52c:	0800c5a3 	.word	0x0800c5a3
 800c530:	0800c597 	.word	0x0800c597
 800c534:	0800c58b 	.word	0x0800c58b
 800c538:	0800c57f 	.word	0x0800c57f
 800c53c:	0800c56b 	.word	0x0800c56b
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c540:	7c03      	ldrb	r3, [r0, #16]
 800c542:	2b00      	cmp	r3, #0
 800c544:	f040 8083 	bne.w	800c64e <USBD_StdDevReq+0x326>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c548:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c54c:	f10d 0006 	add.w	r0, sp, #6
 800c550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c552:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c554:	2302      	movs	r3, #2
 800c556:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800c558:	e7c4      	b.n	800c4e4 <USBD_StdDevReq+0x1bc>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c55a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c55e:	f10d 0106 	add.w	r1, sp, #6
 800c562:	7c00      	ldrb	r0, [r0, #16]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4798      	blx	r3
  if (err != 0U)
 800c568:	e7bc      	b.n	800c4e4 <USBD_StdDevReq+0x1bc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c56a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c56e:	699b      	ldr	r3, [r3, #24]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d0a1      	beq.n	800c4b8 <USBD_StdDevReq+0x190>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c574:	f10d 0106 	add.w	r1, sp, #6
 800c578:	7c28      	ldrb	r0, [r5, #16]
 800c57a:	4798      	blx	r3
  if (err != 0U)
 800c57c:	e7b2      	b.n	800c4e4 <USBD_StdDevReq+0x1bc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c57e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c582:	695b      	ldr	r3, [r3, #20]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d1f5      	bne.n	800c574 <USBD_StdDevReq+0x24c>
 800c588:	e796      	b.n	800c4b8 <USBD_StdDevReq+0x190>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c58a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c58e:	691b      	ldr	r3, [r3, #16]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d1ef      	bne.n	800c574 <USBD_StdDevReq+0x24c>
 800c594:	e790      	b.n	800c4b8 <USBD_StdDevReq+0x190>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c596:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d1e9      	bne.n	800c574 <USBD_StdDevReq+0x24c>
 800c5a0:	e78a      	b.n	800c4b8 <USBD_StdDevReq+0x190>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c5a2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d1e3      	bne.n	800c574 <USBD_StdDevReq+0x24c>
 800c5ac:	e784      	b.n	800c4b8 <USBD_StdDevReq+0x190>
    switch (pdev->dev_state)
 800c5ae:	2b03      	cmp	r3, #3
 800c5b0:	f47f aec6 	bne.w	800c340 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c5b4:	1d01      	adds	r1, r0, #4
 800c5b6:	f000 f96f 	bl	800c898 <USBD_CtlSendData>
        break;
 800c5ba:	e6ca      	b.n	800c352 <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 800c5bc:	2900      	cmp	r1, #0
 800c5be:	d03b      	beq.n	800c638 <USBD_StdDevReq+0x310>
      else if (cfgidx != pdev->dev_config)
 800c5c0:	6841      	ldr	r1, [r0, #4]
 800c5c2:	2901      	cmp	r1, #1
 800c5c4:	f43f af32 	beq.w	800c42c <USBD_StdDevReq+0x104>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5c8:	b2c9      	uxtb	r1, r1
 800c5ca:	f7ff fd57 	bl	800c07c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c5ce:	7831      	ldrb	r1, [r6, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c5d0:	4628      	mov	r0, r5
        pdev->dev_config = cfgidx;
 800c5d2:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c5d4:	f7ff fd4a 	bl	800c06c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800c5d8:	4606      	mov	r6, r0
 800c5da:	2800      	cmp	r0, #0
 800c5dc:	f43f af26 	beq.w	800c42c <USBD_StdDevReq+0x104>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5e0:	2180      	movs	r1, #128	; 0x80
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	f000 fc36 	bl	800ce54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c5e8:	2100      	movs	r1, #0
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	4634      	mov	r4, r6
 800c5ee:	f000 fc31 	bl	800ce54 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5f2:	7929      	ldrb	r1, [r5, #4]
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	f7ff fd41 	bl	800c07c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5fa:	2302      	movs	r3, #2
 800c5fc:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800c600:	e6a7      	b.n	800c352 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800c602:	2900      	cmp	r1, #0
 800c604:	f43f af12 	beq.w	800c42c <USBD_StdDevReq+0x104>
        pdev->dev_config = cfgidx;
 800c608:	2101      	movs	r1, #1
 800c60a:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c60c:	f7ff fd2e 	bl	800c06c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800c610:	4604      	mov	r4, r0
 800c612:	2800      	cmp	r0, #0
 800c614:	f47f af50 	bne.w	800c4b8 <USBD_StdDevReq+0x190>
          (void)USBD_CtlSendStatus(pdev);
 800c618:	4628      	mov	r0, r5
 800c61a:	f000 f96d 	bl	800c8f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c61e:	2303      	movs	r3, #3
 800c620:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800c624:	e695      	b.n	800c352 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c626:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 800c628:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c62a:	f000 fc13 	bl	800ce54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c62e:	4628      	mov	r0, r5
 800c630:	2100      	movs	r1, #0
 800c632:	f000 fc0f 	bl	800ce54 <USBD_LL_StallEP>
    return USBD_FAIL;
 800c636:	e68c      	b.n	800c352 <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c638:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800c63a:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c63c:	460c      	mov	r4, r1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c63e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c642:	f7ff fd1b 	bl	800c07c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c646:	4628      	mov	r0, r5
 800c648:	f000 f956 	bl	800c8f8 <USBD_CtlSendStatus>
 800c64c:	e681      	b.n	800c352 <USBD_StdDevReq+0x2a>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c64e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c652:	f10d 0006 	add.w	r0, sp, #6
 800c656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c658:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c65a:	2302      	movs	r3, #2
 800c65c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800c65e:	e741      	b.n	800c4e4 <USBD_StdDevReq+0x1bc>
 800c660:	2400071c 	.word	0x2400071c

0800c664 <USBD_StdItfReq>:
{
 800c664:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c666:	780b      	ldrb	r3, [r1, #0]
{
 800c668:	460d      	mov	r5, r1
 800c66a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c66c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800c670:	2a40      	cmp	r2, #64	; 0x40
 800c672:	d00b      	beq.n	800c68c <USBD_StdItfReq+0x28>
 800c674:	065b      	lsls	r3, r3, #25
 800c676:	d509      	bpl.n	800c68c <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 800c678:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c67a:	2180      	movs	r1, #128	; 0x80
 800c67c:	f000 fbea 	bl	800ce54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c680:	4620      	mov	r0, r4
 800c682:	4629      	mov	r1, r5
 800c684:	f000 fbe6 	bl	800ce54 <USBD_LL_StallEP>
}
 800c688:	4628      	mov	r0, r5
 800c68a:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800c68c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800c690:	3b01      	subs	r3, #1
 800c692:	2b02      	cmp	r3, #2
 800c694:	d812      	bhi.n	800c6bc <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c696:	792b      	ldrb	r3, [r5, #4]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d80f      	bhi.n	800c6bc <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c69c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c6a8:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c6aa:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d1eb      	bne.n	800c688 <USBD_StdItfReq+0x24>
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	d1e9      	bne.n	800c688 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	f000 f91f 	bl	800c8f8 <USBD_CtlSendStatus>
 800c6ba:	e7e5      	b.n	800c688 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6bc:	2180      	movs	r1, #128	; 0x80
 800c6be:	4620      	mov	r0, r4
 800c6c0:	f000 fbc8 	bl	800ce54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800c6c8:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800c6ca:	f000 fbc3 	bl	800ce54 <USBD_LL_StallEP>
}
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	bd38      	pop	{r3, r4, r5, pc}
 800c6d2:	bf00      	nop

0800c6d4 <USBD_StdEPReq>:
{
 800c6d4:	b570      	push	{r4, r5, r6, lr}
 800c6d6:	780b      	ldrb	r3, [r1, #0]
 800c6d8:	460d      	mov	r5, r1
 800c6da:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c6e0:	2b20      	cmp	r3, #32
 800c6e2:	d01b      	beq.n	800c71c <USBD_StdEPReq+0x48>
 800c6e4:	2b40      	cmp	r3, #64	; 0x40
 800c6e6:	d019      	beq.n	800c71c <USBD_StdEPReq+0x48>
 800c6e8:	b303      	cbz	r3, 800c72c <USBD_StdEPReq+0x58>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6ea:	2180      	movs	r1, #128	; 0x80
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f000 fbb1 	bl	800ce54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	f000 fbad 	bl	800ce54 <USBD_LL_StallEP>
}
 800c6fa:	2000      	movs	r0, #0
 800c6fc:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800c6fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c702:	2b02      	cmp	r3, #2
 800c704:	b2da      	uxtb	r2, r3
 800c706:	d04e      	beq.n	800c7a6 <USBD_StdEPReq+0xd2>
 800c708:	2a03      	cmp	r2, #3
 800c70a:	d1ee      	bne.n	800c6ea <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c70c:	886b      	ldrh	r3, [r5, #2]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d1f3      	bne.n	800c6fa <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 800c712:	064e      	lsls	r6, r1, #25
 800c714:	d172      	bne.n	800c7fc <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 800c716:	4620      	mov	r0, r4
 800c718:	f000 f8ee 	bl	800c8f8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c71c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800c720:	4629      	mov	r1, r5
 800c722:	4620      	mov	r0, r4
 800c724:	689b      	ldr	r3, [r3, #8]
}
 800c726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c72a:	4718      	bx	r3
      switch (req->bRequest)
 800c72c:	784b      	ldrb	r3, [r1, #1]
  ep_addr = LOBYTE(req->wIndex);
 800c72e:	888a      	ldrh	r2, [r1, #4]
 800c730:	2b01      	cmp	r3, #1
 800c732:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 800c734:	d0e3      	beq.n	800c6fe <USBD_StdEPReq+0x2a>
 800c736:	2b03      	cmp	r3, #3
 800c738:	d024      	beq.n	800c784 <USBD_StdEPReq+0xb0>
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d1d5      	bne.n	800c6ea <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 800c73e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c742:	2b02      	cmp	r3, #2
 800c744:	b2d8      	uxtb	r0, r3
 800c746:	d037      	beq.n	800c7b8 <USBD_StdEPReq+0xe4>
 800c748:	2803      	cmp	r0, #3
 800c74a:	d1ce      	bne.n	800c6ea <USBD_StdEPReq+0x16>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c74c:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800c750:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c752:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c756:	eb04 0383 	add.w	r3, r4, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800c75a:	d43e      	bmi.n	800c7da <USBD_StdEPReq+0x106>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c75c:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800c760:	2b00      	cmp	r3, #0
 800c762:	d0c2      	beq.n	800c6ea <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c764:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800c768:	2514      	movs	r5, #20
 800c76a:	fb05 4503 	mla	r5, r5, r3, r4
 800c76e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c772:	2b00      	cmp	r3, #0
 800c774:	d13c      	bne.n	800c7f0 <USBD_StdEPReq+0x11c>
                pep->status = 0x0001U;
 800c776:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c778:	4629      	mov	r1, r5
 800c77a:	4620      	mov	r0, r4
 800c77c:	2202      	movs	r2, #2
 800c77e:	f000 f88b 	bl	800c898 <USBD_CtlSendData>
              break;
 800c782:	e7ba      	b.n	800c6fa <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 800c784:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c788:	2b02      	cmp	r3, #2
 800c78a:	b2da      	uxtb	r2, r3
 800c78c:	d00b      	beq.n	800c7a6 <USBD_StdEPReq+0xd2>
 800c78e:	2a03      	cmp	r2, #3
 800c790:	d1ab      	bne.n	800c6ea <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c792:	886b      	ldrh	r3, [r5, #2]
 800c794:	b91b      	cbnz	r3, 800c79e <USBD_StdEPReq+0xca>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c796:	064a      	lsls	r2, r1, #25
 800c798:	d001      	beq.n	800c79e <USBD_StdEPReq+0xca>
 800c79a:	88eb      	ldrh	r3, [r5, #6]
 800c79c:	b39b      	cbz	r3, 800c806 <USBD_StdEPReq+0x132>
              (void)USBD_CtlSendStatus(pdev);
 800c79e:	4620      	mov	r0, r4
 800c7a0:	f000 f8aa 	bl	800c8f8 <USBD_CtlSendStatus>
              break;
 800c7a4:	e7a9      	b.n	800c6fa <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c7a6:	064b      	lsls	r3, r1, #25
 800c7a8:	d09f      	beq.n	800c6ea <USBD_StdEPReq+0x16>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c7aa:	f000 fb53 	bl	800ce54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	2180      	movs	r1, #128	; 0x80
 800c7b2:	f000 fb4f 	bl	800ce54 <USBD_LL_StallEP>
 800c7b6:	e7a0      	b.n	800c6fa <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c7b8:	0648      	lsls	r0, r1, #25
 800c7ba:	d196      	bne.n	800c6ea <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7bc:	0611      	lsls	r1, r2, #24
              pep->status = 0x0000U;
 800c7be:	f04f 0300 	mov.w	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7c8:	bf4c      	ite	mi
 800c7ca:	f104 0114 	addmi.w	r1, r4, #20
 800c7ce:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 800c7d2:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c7d4:	f000 f860 	bl	800c898 <USBD_CtlSendData>
              break;
 800c7d8:	e78f      	b.n	800c6fa <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c7da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d084      	beq.n	800c6ea <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7e0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800c7e4:	1c5d      	adds	r5, r3, #1
 800c7e6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800c7ea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c7ee:	e7c0      	b.n	800c772 <USBD_StdEPReq+0x9e>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f000 fb4b 	bl	800ce8c <USBD_LL_IsStallEP>
 800c7f6:	b120      	cbz	r0, 800c802 <USBD_StdEPReq+0x12e>
                pep->status = 0x0001U;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	e7bc      	b.n	800c776 <USBD_StdEPReq+0xa2>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c7fc:	f000 fb38 	bl	800ce70 <USBD_LL_ClearStallEP>
 800c800:	e789      	b.n	800c716 <USBD_StdEPReq+0x42>
                pep->status = 0x0000U;
 800c802:	6028      	str	r0, [r5, #0]
 800c804:	e7b8      	b.n	800c778 <USBD_StdEPReq+0xa4>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c806:	f000 fb25 	bl	800ce54 <USBD_LL_StallEP>
 800c80a:	e7c8      	b.n	800c79e <USBD_StdEPReq+0xca>

0800c80c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800c80c:	780b      	ldrb	r3, [r1, #0]
 800c80e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800c810:	784b      	ldrb	r3, [r1, #1]
 800c812:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c814:	78ca      	ldrb	r2, [r1, #3]
 800c816:	788b      	ldrb	r3, [r1, #2]
 800c818:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800c81c:	8043      	strh	r3, [r0, #2]
 800c81e:	794a      	ldrb	r2, [r1, #5]
 800c820:	790b      	ldrb	r3, [r1, #4]
 800c822:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800c826:	8083      	strh	r3, [r0, #4]
 800c828:	79ca      	ldrb	r2, [r1, #7]
 800c82a:	798b      	ldrb	r3, [r1, #6]
 800c82c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800c830:	80c3      	strh	r3, [r0, #6]
}
 800c832:	4770      	bx	lr

0800c834 <USBD_CtlError>:
{
 800c834:	b510      	push	{r4, lr}
 800c836:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c838:	2180      	movs	r1, #128	; 0x80
 800c83a:	f000 fb0b 	bl	800ce54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c83e:	2100      	movs	r1, #0
 800c840:	4620      	mov	r0, r4
}
 800c842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800c846:	f000 bb05 	b.w	800ce54 <USBD_LL_StallEP>
 800c84a:	bf00      	nop

0800c84c <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800c84c:	b308      	cbz	r0, 800c892 <USBD_GetString+0x46>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800c84e:	7803      	ldrb	r3, [r0, #0]
{
 800c850:	b470      	push	{r4, r5, r6}
  while (*pbuff != (uint8_t)'\0')
 800c852:	b1fb      	cbz	r3, 800c894 <USBD_GetString+0x48>
 800c854:	4604      	mov	r4, r0
 800c856:	f1c0 0601 	rsb	r6, r0, #1
  {
    len++;
 800c85a:	19a3      	adds	r3, r4, r6
  while (*pbuff != (uint8_t)'\0')
 800c85c:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800c860:	b2db      	uxtb	r3, r3
 800c862:	2d00      	cmp	r5, #0
 800c864:	d1f9      	bne.n	800c85a <USBD_GetString+0xe>
 800c866:	3301      	adds	r3, #1
 800c868:	005b      	lsls	r3, r3, #1
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c86a:	2403      	movs	r4, #3
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c86c:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800c86e:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c870:	704c      	strb	r4, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 800c872:	7804      	ldrb	r4, [r0, #0]
 800c874:	b15c      	cbz	r4, 800c88e <USBD_GetString+0x42>
  idx++;
 800c876:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800c878:	2500      	movs	r5, #0
    idx++;
 800c87a:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 800c87c:	54cc      	strb	r4, [r1, r3]
    idx++;
 800c87e:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800c880:	b2d2      	uxtb	r2, r2
    idx++;
 800c882:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 800c884:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 800c886:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800c88a:	2c00      	cmp	r4, #0
 800c88c:	d1f5      	bne.n	800c87a <USBD_GetString+0x2e>
}
 800c88e:	bc70      	pop	{r4, r5, r6}
 800c890:	4770      	bx	lr
 800c892:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 800c894:	2302      	movs	r3, #2
 800c896:	e7e8      	b.n	800c86a <USBD_GetString+0x1e>

0800c898 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c89c:	2502      	movs	r5, #2
{
 800c89e:	460a      	mov	r2, r1
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8a0:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c8a2:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 800c8a6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8aa:	f000 fb11 	bl	800ced0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c8ae:	2000      	movs	r0, #0
 800c8b0:	bd38      	pop	{r3, r4, r5, pc}
 800c8b2:	bf00      	nop

0800c8b4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c8b4:	b510      	push	{r4, lr}
 800c8b6:	460c      	mov	r4, r1
 800c8b8:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8ba:	2100      	movs	r1, #0
 800c8bc:	4622      	mov	r2, r4
 800c8be:	f000 fb07 	bl	800ced0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c8c2:	2000      	movs	r0, #0
 800c8c4:	bd10      	pop	{r4, pc}
 800c8c6:	bf00      	nop

0800c8c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c8c8:	b538      	push	{r3, r4, r5, lr}
 800c8ca:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c8cc:	2503      	movs	r5, #3
{
 800c8ce:	460a      	mov	r2, r1
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c8d0:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c8d2:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 800c8d6:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c8da:	f000 fb07 	bl	800ceec <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c8de:	2000      	movs	r0, #0
 800c8e0:	bd38      	pop	{r3, r4, r5, pc}
 800c8e2:	bf00      	nop

0800c8e4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c8e4:	b510      	push	{r4, lr}
 800c8e6:	460c      	mov	r4, r1
 800c8e8:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	4622      	mov	r2, r4
 800c8ee:	f000 fafd 	bl	800ceec <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c8f2:	2000      	movs	r0, #0
 800c8f4:	bd10      	pop	{r4, pc}
 800c8f6:	bf00      	nop

0800c8f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c8f8:	b538      	push	{r3, r4, r5, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c8fa:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c8fc:	2504      	movs	r5, #4
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c8fe:	461a      	mov	r2, r3
 800c900:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c902:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c906:	f000 fae3 	bl	800ced0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c90a:	2000      	movs	r0, #0
 800c90c:	bd38      	pop	{r3, r4, r5, pc}
 800c90e:	bf00      	nop

0800c910 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c910:	b538      	push	{r3, r4, r5, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c912:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c914:	2505      	movs	r5, #5
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c916:	461a      	mov	r2, r3
 800c918:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c91a:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c91e:	f000 fae5 	bl	800ceec <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c922:	2000      	movs	r0, #0
 800c924:	bd38      	pop	{r3, r4, r5, pc}
 800c926:	bf00      	nop

0800c928 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c928:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c92a:	2200      	movs	r2, #0
 800c92c:	4919      	ldr	r1, [pc, #100]	; (800c994 <MX_USB_DEVICE_Init+0x6c>)
 800c92e:	481a      	ldr	r0, [pc, #104]	; (800c998 <MX_USB_DEVICE_Init+0x70>)
 800c930:	f7ff fb6c 	bl	800c00c <USBD_Init>
 800c934:	b988      	cbnz	r0, 800c95a <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c936:	4919      	ldr	r1, [pc, #100]	; (800c99c <MX_USB_DEVICE_Init+0x74>)
 800c938:	4817      	ldr	r0, [pc, #92]	; (800c998 <MX_USB_DEVICE_Init+0x70>)
 800c93a:	f7ff fb7b 	bl	800c034 <USBD_RegisterClass>
 800c93e:	b9a0      	cbnz	r0, 800c96a <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c940:	4917      	ldr	r1, [pc, #92]	; (800c9a0 <MX_USB_DEVICE_Init+0x78>)
 800c942:	4815      	ldr	r0, [pc, #84]	; (800c998 <MX_USB_DEVICE_Init+0x70>)
 800c944:	f7ff fb12 	bl	800bf6c <USBD_CDC_RegisterInterface>
 800c948:	b9b8      	cbnz	r0, 800c97a <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c94a:	4813      	ldr	r0, [pc, #76]	; (800c998 <MX_USB_DEVICE_Init+0x70>)
 800c94c:	f7ff fb8c 	bl	800c068 <USBD_Start>
 800c950:	b9d0      	cbnz	r0, 800c988 <MX_USB_DEVICE_Init+0x60>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c952:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800c956:	f7fb ba59 	b.w	8007e0c <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 800c95a:	f7f6 fbbf 	bl	80030dc <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c95e:	490f      	ldr	r1, [pc, #60]	; (800c99c <MX_USB_DEVICE_Init+0x74>)
 800c960:	480d      	ldr	r0, [pc, #52]	; (800c998 <MX_USB_DEVICE_Init+0x70>)
 800c962:	f7ff fb67 	bl	800c034 <USBD_RegisterClass>
 800c966:	2800      	cmp	r0, #0
 800c968:	d0ea      	beq.n	800c940 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800c96a:	f7f6 fbb7 	bl	80030dc <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c96e:	490c      	ldr	r1, [pc, #48]	; (800c9a0 <MX_USB_DEVICE_Init+0x78>)
 800c970:	4809      	ldr	r0, [pc, #36]	; (800c998 <MX_USB_DEVICE_Init+0x70>)
 800c972:	f7ff fafb 	bl	800bf6c <USBD_CDC_RegisterInterface>
 800c976:	2800      	cmp	r0, #0
 800c978:	d0e7      	beq.n	800c94a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800c97a:	f7f6 fbaf 	bl	80030dc <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c97e:	4806      	ldr	r0, [pc, #24]	; (800c998 <MX_USB_DEVICE_Init+0x70>)
 800c980:	f7ff fb72 	bl	800c068 <USBD_Start>
 800c984:	2800      	cmp	r0, #0
 800c986:	d0e4      	beq.n	800c952 <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 800c988:	f7f6 fba8 	bl	80030dc <Error_Handler>
}
 800c98c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800c990:	f7fb ba3c 	b.w	8007e0c <HAL_PWREx_EnableUSBVoltageDetector>
 800c994:	240003bc 	.word	0x240003bc
 800c998:	2400e328 	.word	0x2400e328
 800c99c:	24000290 	.word	0x24000290
 800c9a0:	240003a0 	.word	0x240003a0

0800c9a4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	4770      	bx	lr

0800c9a8 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	4770      	bx	lr

0800c9ac <CDC_Receive_FS>:
{
 800c9ac:	b570      	push	{r4, r5, r6, lr}
 800c9ae:	4604      	mov	r4, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c9b0:	4e08      	ldr	r6, [pc, #32]	; (800c9d4 <CDC_Receive_FS+0x28>)
{
 800c9b2:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	4621      	mov	r1, r4
 800c9b8:	f7ff faec 	bl	800bf94 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800c9bc:	4630      	mov	r0, r6
 800c9be:	f7ff fb0b 	bl	800bfd8 <USBD_CDC_ReceivePacket>
 800c9c2:	682a      	ldr	r2, [r5, #0]
 800c9c4:	4b04      	ldr	r3, [pc, #16]	; (800c9d8 <CDC_Receive_FS+0x2c>)
  memcpy(UartRXString, Buf, USBRXLength);
 800c9c6:	4621      	mov	r1, r4
 800c9c8:	4804      	ldr	r0, [pc, #16]	; (800c9dc <CDC_Receive_FS+0x30>)
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800c9ca:	601a      	str	r2, [r3, #0]
  memcpy(UartRXString, Buf, USBRXLength);
 800c9cc:	f001 fbfa 	bl	800e1c4 <memcpy>
}
 800c9d0:	2000      	movs	r0, #0
 800c9d2:	bd70      	pop	{r4, r5, r6, pc}
 800c9d4:	2400e328 	.word	0x2400e328
 800c9d8:	24000a48 	.word	0x24000a48
 800c9dc:	24000948 	.word	0x24000948

0800c9e0 <CDC_Init_FS>:
{
 800c9e0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c9e2:	4c06      	ldr	r4, [pc, #24]	; (800c9fc <CDC_Init_FS+0x1c>)
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	4906      	ldr	r1, [pc, #24]	; (800ca00 <CDC_Init_FS+0x20>)
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	f7ff fac7 	bl	800bf7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	4904      	ldr	r1, [pc, #16]	; (800ca04 <CDC_Init_FS+0x24>)
 800c9f2:	f7ff facf 	bl	800bf94 <USBD_CDC_SetRxBuffer>
}
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	bd10      	pop	{r4, pc}
 800c9fa:	bf00      	nop
 800c9fc:	2400e328 	.word	0x2400e328
 800ca00:	2400edf8 	.word	0x2400edf8
 800ca04:	2400e5f8 	.word	0x2400e5f8

0800ca08 <CDC_Control_FS>:
  switch(cmd)
 800ca08:	2820      	cmp	r0, #32
 800ca0a:	d00a      	beq.n	800ca22 <CDC_Control_FS+0x1a>
 800ca0c:	2821      	cmp	r0, #33	; 0x21
 800ca0e:	d106      	bne.n	800ca1e <CDC_Control_FS+0x16>
    	 memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800ca10:	4b0a      	ldr	r3, [pc, #40]	; (800ca3c <CDC_Control_FS+0x34>)
 800ca12:	6818      	ldr	r0, [r3, #0]
 800ca14:	889a      	ldrh	r2, [r3, #4]
 800ca16:	799b      	ldrb	r3, [r3, #6]
 800ca18:	6008      	str	r0, [r1, #0]
 800ca1a:	808a      	strh	r2, [r1, #4]
 800ca1c:	718b      	strb	r3, [r1, #6]
}
 800ca1e:	2000      	movs	r0, #0
 800ca20:	4770      	bx	lr
{
 800ca22:	b410      	push	{r4}
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800ca24:	4b05      	ldr	r3, [pc, #20]	; (800ca3c <CDC_Control_FS+0x34>)
 800ca26:	6808      	ldr	r0, [r1, #0]
 800ca28:	888c      	ldrh	r4, [r1, #4]
 800ca2a:	798a      	ldrb	r2, [r1, #6]
 800ca2c:	6018      	str	r0, [r3, #0]
}
 800ca2e:	2000      	movs	r0, #0
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800ca30:	809c      	strh	r4, [r3, #4]
 800ca32:	719a      	strb	r2, [r3, #6]
}
 800ca34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca38:	4770      	bx	lr
 800ca3a:	bf00      	nop
 800ca3c:	240003b4 	.word	0x240003b4

0800ca40 <CDC_Transmit_FS>:
{
 800ca40:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ca42:	4c09      	ldr	r4, [pc, #36]	; (800ca68 <CDC_Transmit_FS+0x28>)
 800ca44:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800ca48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ca4c:	b10b      	cbz	r3, 800ca52 <CDC_Transmit_FS+0x12>
}
 800ca4e:	2001      	movs	r0, #1
 800ca50:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ca52:	460a      	mov	r2, r1
 800ca54:	4601      	mov	r1, r0
 800ca56:	4620      	mov	r0, r4
 800ca58:	f7ff fa90 	bl	800bf7c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ca5c:	4620      	mov	r0, r4
}
 800ca5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ca62:	f7ff baa1 	b.w	800bfa8 <USBD_CDC_TransmitPacket>
 800ca66:	bf00      	nop
 800ca68:	2400e328 	.word	0x2400e328

0800ca6c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ca6c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800ca6e:	4801      	ldr	r0, [pc, #4]	; (800ca74 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800ca70:	800b      	strh	r3, [r1, #0]
}
 800ca72:	4770      	bx	lr
 800ca74:	240003d8 	.word	0x240003d8

0800ca78 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ca78:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800ca7a:	4801      	ldr	r0, [pc, #4]	; (800ca80 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800ca7c:	800b      	strh	r3, [r1, #0]
}
 800ca7e:	4770      	bx	lr
 800ca80:	240003ec 	.word	0x240003ec

0800ca84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca84:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca86:	4c04      	ldr	r4, [pc, #16]	; (800ca98 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800ca88:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca8a:	4804      	ldr	r0, [pc, #16]	; (800ca9c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800ca8c:	4621      	mov	r1, r4
 800ca8e:	f7ff fedd 	bl	800c84c <USBD_GetString>
  return USBD_StrDesc;
}
 800ca92:	4620      	mov	r0, r4
 800ca94:	bd10      	pop	{r4, pc}
 800ca96:	bf00      	nop
 800ca98:	2400f5f8 	.word	0x2400f5f8
 800ca9c:	080182ec 	.word	0x080182ec

0800caa0 <USBD_FS_ProductStrDescriptor>:
{
 800caa0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800caa2:	4c04      	ldr	r4, [pc, #16]	; (800cab4 <USBD_FS_ProductStrDescriptor+0x14>)
{
 800caa4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800caa6:	4804      	ldr	r0, [pc, #16]	; (800cab8 <USBD_FS_ProductStrDescriptor+0x18>)
 800caa8:	4621      	mov	r1, r4
 800caaa:	f7ff fecf 	bl	800c84c <USBD_GetString>
}
 800caae:	4620      	mov	r0, r4
 800cab0:	bd10      	pop	{r4, pc}
 800cab2:	bf00      	nop
 800cab4:	2400f5f8 	.word	0x2400f5f8
 800cab8:	08018300 	.word	0x08018300

0800cabc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cabc:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cabe:	4c04      	ldr	r4, [pc, #16]	; (800cad0 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800cac0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cac2:	4804      	ldr	r0, [pc, #16]	; (800cad4 <USBD_FS_ConfigStrDescriptor+0x18>)
 800cac4:	4621      	mov	r1, r4
 800cac6:	f7ff fec1 	bl	800c84c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800caca:	4620      	mov	r0, r4
 800cacc:	bd10      	pop	{r4, pc}
 800cace:	bf00      	nop
 800cad0:	2400f5f8 	.word	0x2400f5f8
 800cad4:	08018318 	.word	0x08018318

0800cad8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cad8:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cada:	4c04      	ldr	r4, [pc, #16]	; (800caec <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800cadc:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cade:	4804      	ldr	r0, [pc, #16]	; (800caf0 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800cae0:	4621      	mov	r1, r4
 800cae2:	f7ff feb3 	bl	800c84c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800cae6:	4620      	mov	r0, r4
 800cae8:	bd10      	pop	{r4, pc}
 800caea:	bf00      	nop
 800caec:	2400f5f8 	.word	0x2400f5f8
 800caf0:	08018324 	.word	0x08018324

0800caf4 <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800caf4:	4a42      	ldr	r2, [pc, #264]	; (800cc00 <USBD_FS_SerialStrDescriptor+0x10c>)
  *length = USB_SIZ_STRING_SERIAL;
 800caf6:	201a      	movs	r0, #26
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800caf8:	4b42      	ldr	r3, [pc, #264]	; (800cc04 <USBD_FS_SerialStrDescriptor+0x110>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cafa:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 800cafc:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 800cafe:	8008      	strh	r0, [r1, #0]

  if (deviceserial0 != 0)
 800cb00:	18d3      	adds	r3, r2, r3
 800cb02:	d101      	bne.n	800cb08 <USBD_FS_SerialStrDescriptor+0x14>
}
 800cb04:	4840      	ldr	r0, [pc, #256]	; (800cc08 <USBD_FS_SerialStrDescriptor+0x114>)
 800cb06:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 800cb08:	0f1a      	lsrs	r2, r3, #28
 800cb0a:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cb0e:	493f      	ldr	r1, [pc, #252]	; (800cc0c <USBD_FS_SerialStrDescriptor+0x118>)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb10:	bf2c      	ite	cs
 800cb12:	f102 0037 	addcs.w	r0, r2, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb16:	f102 0030 	addcc.w	r0, r2, #48	; 0x30
 800cb1a:	4a3b      	ldr	r2, [pc, #236]	; (800cc08 <USBD_FS_SerialStrDescriptor+0x114>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cb1c:	6809      	ldr	r1, [r1, #0]
{
 800cb1e:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb20:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800cb22:	f3c3 6003 	ubfx	r0, r3, #24, #4
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800cb26:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 800cb28:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800cb2a:	70d4      	strb	r4, [r2, #3]
 800cb2c:	f04f 0400 	mov.w	r4, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb30:	bf8c      	ite	hi
 800cb32:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb34:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800cb36:	7154      	strb	r4, [r2, #5]
 800cb38:	2400      	movs	r4, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb3a:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800cb3c:	f3c3 5003 	ubfx	r0, r3, #20, #4
    pbuf[2 * idx + 1] = 0;
 800cb40:	71d4      	strb	r4, [r2, #7]
 800cb42:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 800cb44:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800cb46:	7254      	strb	r4, [r2, #9]
 800cb48:	f04f 0400 	mov.w	r4, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb4c:	bf8c      	ite	hi
 800cb4e:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb50:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800cb52:	72d4      	strb	r4, [r2, #11]
 800cb54:	2400      	movs	r4, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb56:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800cb58:	f3c3 4003 	ubfx	r0, r3, #16, #4
    pbuf[2 * idx + 1] = 0;
 800cb5c:	7354      	strb	r4, [r2, #13]
    if (((value >> 28)) < 0xA)
 800cb5e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb60:	bf8c      	ite	hi
 800cb62:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb64:	3030      	addls	r0, #48	; 0x30
 800cb66:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800cb68:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800cb6c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb6e:	bf8c      	ite	hi
 800cb70:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb72:	3030      	addls	r0, #48	; 0x30
 800cb74:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800cb76:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800cb7a:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb7c:	bf8c      	ite	hi
 800cb7e:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb80:	3030      	addls	r0, #48	; 0x30
 800cb82:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 800cb84:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800cb88:	f003 030f 	and.w	r3, r3, #15
 800cb8c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb8e:	bf8c      	ite	hi
 800cb90:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb92:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 800cb94:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb96:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 800cb98:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb9c:	bf94      	ite	ls
 800cb9e:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cba0:	3337      	addhi	r3, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800cba2:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 800cba6:	73d0      	strb	r0, [r2, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cba8:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800cbaa:	ea4f 7311 	mov.w	r3, r1, lsr #28
    pbuf[2 * idx + 1] = 0;
 800cbae:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cbb2:	bf2c      	ite	cs
 800cbb4:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cbb6:	3330      	addcc	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800cbb8:	7450      	strb	r0, [r2, #17]
 800cbba:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800cbbc:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800cbbe:	f3c1 6303 	ubfx	r3, r1, #24, #4
    pbuf[2 * idx + 1] = 0;
 800cbc2:	74d0      	strb	r0, [r2, #19]
 800cbc4:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800cbc6:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 800cbc8:	7550      	strb	r0, [r2, #21]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cbca:	bf8c      	ite	hi
 800cbcc:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cbce:	3330      	addls	r3, #48	; 0x30
}
 800cbd0:	480d      	ldr	r0, [pc, #52]	; (800cc08 <USBD_FS_SerialStrDescriptor+0x114>)
      pbuf[2 * idx] = (value >> 28) + '0';
 800cbd2:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800cbd4:	f3c1 5303 	ubfx	r3, r1, #20, #4
 800cbd8:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cbda:	bf8c      	ite	hi
 800cbdc:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cbde:	3330      	addls	r3, #48	; 0x30
 800cbe0:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800cbe2:	f3c1 4303 	ubfx	r3, r1, #16, #4
    pbuf[2 * idx + 1] = 0;
 800cbe6:	2100      	movs	r1, #0
    if (((value >> 28)) < 0xA)
 800cbe8:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 800cbea:	75d1      	strb	r1, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 800cbec:	bf94      	ite	ls
 800cbee:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cbf0:	3337      	addhi	r3, #55	; 0x37
 800cbf2:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	7653      	strb	r3, [r2, #25]
}
 800cbf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	1ff1e800 	.word	0x1ff1e800
 800cc04:	1ff1e808 	.word	0x1ff1e808
 800cc08:	240003f0 	.word	0x240003f0
 800cc0c:	1ff1e804 	.word	0x1ff1e804

0800cc10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cc10:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 800cc14:	b0b6      	sub	sp, #216	; 0xd8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc16:	2100      	movs	r1, #0
{
 800cc18:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cc1a:	22bc      	movs	r2, #188	; 0xbc
 800cc1c:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc1e:	9106      	str	r1, [sp, #24]
 800cc20:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800cc24:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cc28:	f001 fada 	bl	800e1e0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cc2c:	6822      	ldr	r2, [r4, #0]
 800cc2e:	4b25      	ldr	r3, [pc, #148]	; (800ccc4 <HAL_PCD_MspInit+0xb4>)
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d002      	beq.n	800cc3a <HAL_PCD_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cc34:	b036      	add	sp, #216	; 0xd8
 800cc36:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cc3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800cc3e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cc42:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cc44:	9207      	str	r2, [sp, #28]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800cc46:	9328      	str	r3, [sp, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cc48:	f7fc f850 	bl	8008cec <HAL_RCCEx_PeriphCLKConfig>
 800cc4c:	bbb0      	cbnz	r0, 800ccbc <HAL_PCD_MspInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc4e:	4c1e      	ldr	r4, [pc, #120]	; (800ccc8 <HAL_PCD_MspInit+0xb8>)
    HAL_PWREx_EnableUSBVoltageDetector();
 800cc50:	f7fb f8dc 	bl	8007e0c <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cc54:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800cc58:	220a      	movs	r2, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc5a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cc5e:	2702      	movs	r7, #2
 800cc60:	f04f 0800 	mov.w	r8, #0
 800cc64:	f04f 0900 	mov.w	r9, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc68:	f043 0301 	orr.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc6c:	a902      	add	r1, sp, #8
 800cc6e:	4817      	ldr	r0, [pc, #92]	; (800cccc <HAL_PCD_MspInit+0xbc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc70:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800cc74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800cc78:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc7a:	f003 0301 	and.w	r3, r3, #1
 800cc7e:	9300      	str	r3, [sp, #0]
 800cc80:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cc82:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cc86:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc8a:	f7fa f971 	bl	8006f70 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cc8e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cc92:	2200      	movs	r2, #0
 800cc94:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cc96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cc9a:	4611      	mov	r1, r2
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cc9c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800cca0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800cca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cca8:	9301      	str	r3, [sp, #4]
 800ccaa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ccac:	f7f8 fc40 	bl	8005530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ccb0:	2065      	movs	r0, #101	; 0x65
 800ccb2:	f7f8 fc77 	bl	80055a4 <HAL_NVIC_EnableIRQ>
}
 800ccb6:	b036      	add	sp, #216	; 0xd8
 800ccb8:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
      Error_Handler();
 800ccbc:	f7f6 fa0e 	bl	80030dc <Error_Handler>
 800ccc0:	e7c5      	b.n	800cc4e <HAL_PCD_MspInit+0x3e>
 800ccc2:	bf00      	nop
 800ccc4:	40080000 	.word	0x40080000
 800ccc8:	58024400 	.word	0x58024400
 800cccc:	58020000 	.word	0x58020000

0800ccd0 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ccd0:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800ccd4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800ccd8:	f7ff b9d8 	b.w	800c08c <USBD_LL_SetupStage>

0800ccdc <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ccdc:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800cce0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800cce4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800cce8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ccec:	f7ff b9fe 	b.w	800c0ec <USBD_LL_DataOutStage>

0800ccf0 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ccf0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800ccf4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ccf8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800ccfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ccfe:	f7ff ba29 	b.w	800c154 <USBD_LL_DataInStage>
 800cd02:	bf00      	nop

0800cd04 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cd04:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800cd08:	f7ff bac2 	b.w	800c290 <USBD_LL_SOF>

0800cd0c <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cd0c:	68c1      	ldr	r1, [r0, #12]
{
 800cd0e:	b510      	push	{r4, lr}
 800cd10:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cd12:	b111      	cbz	r1, 800cd1a <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cd14:	2902      	cmp	r1, #2
 800cd16:	d10a      	bne.n	800cd2e <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 800cd18:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cd1a:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800cd1e:	f7ff fa9b 	bl	800c258 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cd22:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 800cd26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cd2a:	f7ff ba69 	b.w	800c200 <USBD_LL_Reset>
    Error_Handler();
 800cd2e:	f7f6 f9d5 	bl	80030dc <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cd32:	2101      	movs	r1, #1
 800cd34:	e7f1      	b.n	800cd1a <HAL_PCD_ResetCallback+0xe>
 800cd36:	bf00      	nop

0800cd38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd38:	b510      	push	{r4, lr}
 800cd3a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cd3c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800cd40:	f7ff fa8e 	bl	800c260 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cd44:	6822      	ldr	r2, [r4, #0]
 800cd46:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800cd4a:	f043 0301 	orr.w	r3, r3, #1
 800cd4e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cd52:	6a23      	ldr	r3, [r4, #32]
 800cd54:	b123      	cbz	r3, 800cd60 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd56:	4a03      	ldr	r2, [pc, #12]	; (800cd64 <HAL_PCD_SuspendCallback+0x2c>)
 800cd58:	6913      	ldr	r3, [r2, #16]
 800cd5a:	f043 0306 	orr.w	r3, r3, #6
 800cd5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cd60:	bd10      	pop	{r4, pc}
 800cd62:	bf00      	nop
 800cd64:	e000ed00 	.word	0xe000ed00

0800cd68 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cd68:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800cd6c:	f7ff ba84 	b.w	800c278 <USBD_LL_Resume>

0800cd70 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cd70:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800cd74:	f7ff bab4 	b.w	800c2e0 <USBD_LL_IsoOUTIncomplete>

0800cd78 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cd78:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800cd7c:	f7ff ba9c 	b.w	800c2b8 <USBD_LL_IsoINIncomplete>

0800cd80 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cd80:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800cd84:	f7ff bac0 	b.w	800c308 <USBD_LL_DevConnected>

0800cd88 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cd88:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800cd8c:	f7ff babe 	b.w	800c30c <USBD_LL_DevDisconnected>

0800cd90 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cd90:	7802      	ldrb	r2, [r0, #0]
 800cd92:	b10a      	cbz	r2, 800cd98 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 800cd94:	2000      	movs	r0, #0
 800cd96:	4770      	bx	lr
{
 800cd98:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 800cd9a:	4b15      	ldr	r3, [pc, #84]	; (800cdf0 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cd9c:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800cd9e:	2409      	movs	r4, #9
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cda0:	4d14      	ldr	r5, [pc, #80]	; (800cdf4 <USBD_LL_Init+0x64>)
  hpcd_USB_OTG_FS.pData = pdev;
 800cda2:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800cda6:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cdaa:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cdac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cdae:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cdb0:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cdb2:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800cdb6:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cdba:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800cdbe:	e9c3 5400 	strd	r5, r4, [r3]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cdc2:	f7fa fa81 	bl	80072c8 <HAL_PCD_Init>
 800cdc6:	b978      	cbnz	r0, 800cde8 <USBD_LL_Init+0x58>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cdc8:	2180      	movs	r1, #128	; 0x80
 800cdca:	4809      	ldr	r0, [pc, #36]	; (800cdf0 <USBD_LL_Init+0x60>)
 800cdcc:	f7fa ffda 	bl	8007d84 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cdd0:	2240      	movs	r2, #64	; 0x40
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	4806      	ldr	r0, [pc, #24]	; (800cdf0 <USBD_LL_Init+0x60>)
 800cdd6:	f7fa ffb1 	bl	8007d3c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cdda:	2280      	movs	r2, #128	; 0x80
 800cddc:	2101      	movs	r1, #1
 800cdde:	4804      	ldr	r0, [pc, #16]	; (800cdf0 <USBD_LL_Init+0x60>)
 800cde0:	f7fa ffac 	bl	8007d3c <HAL_PCDEx_SetTxFiFo>
}
 800cde4:	2000      	movs	r0, #0
 800cde6:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 800cde8:	f7f6 f978 	bl	80030dc <Error_Handler>
 800cdec:	e7ec      	b.n	800cdc8 <USBD_LL_Init+0x38>
 800cdee:	bf00      	nop
 800cdf0:	2400f7f8 	.word	0x2400f7f8
 800cdf4:	40080000 	.word	0x40080000

0800cdf8 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800cdf8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800cdfc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800cdfe:	f7fa faf9 	bl	80073f4 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800ce02:	2803      	cmp	r0, #3
 800ce04:	d802      	bhi.n	800ce0c <USBD_LL_Start+0x14>
 800ce06:	4b02      	ldr	r3, [pc, #8]	; (800ce10 <USBD_LL_Start+0x18>)
 800ce08:	5c18      	ldrb	r0, [r3, r0]
}
 800ce0a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 800ce0c:	2003      	movs	r0, #3
}
 800ce0e:	bd08      	pop	{r3, pc}
 800ce10:	08018334 	.word	0x08018334

0800ce14 <USBD_LL_OpenEP>:
{
 800ce14:	b510      	push	{r4, lr}
 800ce16:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ce18:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800ce1c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ce1e:	4623      	mov	r3, r4
 800ce20:	f7fa fe48 	bl	8007ab4 <HAL_PCD_EP_Open>
  switch (hal_status)
 800ce24:	2803      	cmp	r0, #3
 800ce26:	d802      	bhi.n	800ce2e <USBD_LL_OpenEP+0x1a>
 800ce28:	4b02      	ldr	r3, [pc, #8]	; (800ce34 <USBD_LL_OpenEP+0x20>)
 800ce2a:	5c18      	ldrb	r0, [r3, r0]
}
 800ce2c:	bd10      	pop	{r4, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ce2e:	2003      	movs	r0, #3
}
 800ce30:	bd10      	pop	{r4, pc}
 800ce32:	bf00      	nop
 800ce34:	08018334 	.word	0x08018334

0800ce38 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ce38:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800ce3c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ce3e:	f7fa fe73 	bl	8007b28 <HAL_PCD_EP_Close>
  switch (hal_status)
 800ce42:	2803      	cmp	r0, #3
 800ce44:	d802      	bhi.n	800ce4c <USBD_LL_CloseEP+0x14>
 800ce46:	4b02      	ldr	r3, [pc, #8]	; (800ce50 <USBD_LL_CloseEP+0x18>)
 800ce48:	5c18      	ldrb	r0, [r3, r0]
}
 800ce4a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ce4c:	2003      	movs	r0, #3
}
 800ce4e:	bd08      	pop	{r3, pc}
 800ce50:	08018334 	.word	0x08018334

0800ce54 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ce54:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800ce58:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ce5a:	f7fa feef 	bl	8007c3c <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800ce5e:	2803      	cmp	r0, #3
 800ce60:	d802      	bhi.n	800ce68 <USBD_LL_StallEP+0x14>
 800ce62:	4b02      	ldr	r3, [pc, #8]	; (800ce6c <USBD_LL_StallEP+0x18>)
 800ce64:	5c18      	ldrb	r0, [r3, r0]
}
 800ce66:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ce68:	2003      	movs	r0, #3
}
 800ce6a:	bd08      	pop	{r3, pc}
 800ce6c:	08018334 	.word	0x08018334

0800ce70 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ce70:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800ce74:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ce76:	f7fa ff25 	bl	8007cc4 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800ce7a:	2803      	cmp	r0, #3
 800ce7c:	d802      	bhi.n	800ce84 <USBD_LL_ClearStallEP+0x14>
 800ce7e:	4b02      	ldr	r3, [pc, #8]	; (800ce88 <USBD_LL_ClearStallEP+0x18>)
 800ce80:	5c18      	ldrb	r0, [r3, r0]
}
 800ce82:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ce84:	2003      	movs	r0, #3
}
 800ce86:	bd08      	pop	{r3, pc}
 800ce88:	08018334 	.word	0x08018334

0800ce8c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800ce8c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ce8e:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800ce92:	d406      	bmi.n	800cea2 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ce94:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ce98:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ce9c:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 800cea0:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cea2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800cea6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ceaa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ceae:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 800ceb2:	4770      	bx	lr

0800ceb4 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ceb4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800ceb8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ceba:	f7fa fde7 	bl	8007a8c <HAL_PCD_SetAddress>
  switch (hal_status)
 800cebe:	2803      	cmp	r0, #3
 800cec0:	d802      	bhi.n	800cec8 <USBD_LL_SetUSBAddress+0x14>
 800cec2:	4b02      	ldr	r3, [pc, #8]	; (800cecc <USBD_LL_SetUSBAddress+0x18>)
 800cec4:	5c18      	ldrb	r0, [r3, r0]
}
 800cec6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cec8:	2003      	movs	r0, #3
}
 800ceca:	bd08      	pop	{r3, pc}
 800cecc:	08018334 	.word	0x08018334

0800ced0 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ced0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800ced4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ced6:	f7fa fe8d 	bl	8007bf4 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800ceda:	2803      	cmp	r0, #3
 800cedc:	d802      	bhi.n	800cee4 <USBD_LL_Transmit+0x14>
 800cede:	4b02      	ldr	r3, [pc, #8]	; (800cee8 <USBD_LL_Transmit+0x18>)
 800cee0:	5c18      	ldrb	r0, [r3, r0]
}
 800cee2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cee4:	2003      	movs	r0, #3
}
 800cee6:	bd08      	pop	{r3, pc}
 800cee8:	08018334 	.word	0x08018334

0800ceec <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ceec:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800cef0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cef2:	f7fa fe4d 	bl	8007b90 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800cef6:	2803      	cmp	r0, #3
 800cef8:	d802      	bhi.n	800cf00 <USBD_LL_PrepareReceive+0x14>
 800cefa:	4b02      	ldr	r3, [pc, #8]	; (800cf04 <USBD_LL_PrepareReceive+0x18>)
 800cefc:	5c18      	ldrb	r0, [r3, r0]
}
 800cefe:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cf00:	2003      	movs	r0, #3
}
 800cf02:	bd08      	pop	{r3, pc}
 800cf04:	08018334 	.word	0x08018334

0800cf08 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cf08:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800cf0c:	f7fa be68 	b.w	8007be0 <HAL_PCD_EP_GetRxCount>

0800cf10 <USBD_static_malloc>:
}
 800cf10:	4800      	ldr	r0, [pc, #0]	; (800cf14 <USBD_static_malloc+0x4>)
 800cf12:	4770      	bx	lr
 800cf14:	24000720 	.word	0x24000720

0800cf18 <USBD_static_free>:
}
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop

0800cf1c <arm_cfft_radix8by2_f32>:
 800cf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf20:	4607      	mov	r7, r0
 800cf22:	4608      	mov	r0, r1
 800cf24:	ed2d 8b06 	vpush	{d8-d10}
 800cf28:	f8b7 c000 	ldrh.w	ip, [r7]
 800cf2c:	687a      	ldr	r2, [r7, #4]
 800cf2e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800cf32:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800cf36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800cf3a:	f000 80ac 	beq.w	800d096 <arm_cfft_radix8by2_f32+0x17a>
 800cf3e:	008c      	lsls	r4, r1, #2
 800cf40:	f100 0310 	add.w	r3, r0, #16
 800cf44:	3210      	adds	r2, #16
 800cf46:	f108 0610 	add.w	r6, r8, #16
 800cf4a:	3410      	adds	r4, #16
 800cf4c:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800cf50:	1905      	adds	r5, r0, r4
 800cf52:	4444      	add	r4, r8
 800cf54:	ed16 7a04 	vldr	s14, [r6, #-16]
 800cf58:	3310      	adds	r3, #16
 800cf5a:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 800cf5e:	3510      	adds	r5, #16
 800cf60:	ed56 0a03 	vldr	s1, [r6, #-12]
 800cf64:	3210      	adds	r2, #16
 800cf66:	ee74 9a87 	vadd.f32	s19, s9, s14
 800cf6a:	ed56 7a02 	vldr	s15, [r6, #-8]
 800cf6e:	ed56 2a01 	vldr	s5, [r6, #-4]
 800cf72:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800cf76:	ed54 5a04 	vldr	s11, [r4, #-16]
 800cf7a:	3610      	adds	r6, #16
 800cf7c:	ed14 5a03 	vldr	s10, [r4, #-12]
 800cf80:	3410      	adds	r4, #16
 800cf82:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 800cf86:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800cf8a:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800cf8e:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800cf92:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 800cf96:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800cf9a:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 800cf9e:	ee33 8a83 	vadd.f32	s16, s7, s6
 800cfa2:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800cfa6:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800cfaa:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800cfae:	ee34 0a06 	vadd.f32	s0, s8, s12
 800cfb2:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 800cfb6:	ee77 aa20 	vadd.f32	s21, s14, s1
 800cfba:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 800cfbe:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800cfc2:	ee72 9a22 	vadd.f32	s19, s4, s5
 800cfc6:	ee71 8a05 	vadd.f32	s17, s2, s10
 800cfca:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 800cfce:	ee37 7a60 	vsub.f32	s14, s14, s1
 800cfd2:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 800cfd6:	ee35 5a41 	vsub.f32	s10, s10, s2
 800cfda:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 800cfde:	ee36 6a44 	vsub.f32	s12, s12, s8
 800cfe2:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 800cfe6:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 800cfea:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800cfee:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 800cff2:	ee72 7a62 	vsub.f32	s15, s4, s5
 800cff6:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 800cffa:	ee73 2a63 	vsub.f32	s5, s6, s7
 800cffe:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800d002:	4563      	cmp	r3, ip
 800d004:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800d008:	ee24 3a84 	vmul.f32	s6, s9, s8
 800d00c:	ee27 2a26 	vmul.f32	s4, s14, s13
 800d010:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800d014:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800d018:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d01c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800d020:	ee65 6a26 	vmul.f32	s13, s10, s13
 800d024:	ee25 5a04 	vmul.f32	s10, s10, s8
 800d028:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d02c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d030:	ee33 4a02 	vadd.f32	s8, s6, s4
 800d034:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800d038:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 800d03c:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 800d040:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 800d044:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800d048:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800d04c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800d050:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800d054:	ee27 4a87 	vmul.f32	s8, s15, s14
 800d058:	ee61 5a87 	vmul.f32	s11, s3, s14
 800d05c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d060:	ee22 5a87 	vmul.f32	s10, s5, s14
 800d064:	ee26 7a07 	vmul.f32	s14, s12, s14
 800d068:	ee26 6a26 	vmul.f32	s12, s12, s13
 800d06c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800d070:	ee74 4a84 	vadd.f32	s9, s9, s8
 800d074:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d078:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d07c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d080:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 800d084:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 800d088:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 800d08c:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800d090:	f47f af60 	bne.w	800cf54 <arm_cfft_radix8by2_f32+0x38>
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	b28c      	uxth	r4, r1
 800d098:	2302      	movs	r3, #2
 800d09a:	4621      	mov	r1, r4
 800d09c:	f000 fda6 	bl	800dbec <arm_radix8_butterfly_f32>
 800d0a0:	4621      	mov	r1, r4
 800d0a2:	687a      	ldr	r2, [r7, #4]
 800d0a4:	4640      	mov	r0, r8
 800d0a6:	2302      	movs	r3, #2
 800d0a8:	ecbd 8b06 	vpop	{d8-d10}
 800d0ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b0:	f000 bd9c 	b.w	800dbec <arm_radix8_butterfly_f32>

0800d0b4 <arm_cfft_radix8by4_f32>:
 800d0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b8:	ed2d 8b04 	vpush	{d8-d9}
 800d0bc:	8804      	ldrh	r4, [r0, #0]
 800d0be:	b08d      	sub	sp, #52	; 0x34
 800d0c0:	6842      	ldr	r2, [r0, #4]
 800d0c2:	460d      	mov	r5, r1
 800d0c4:	0864      	lsrs	r4, r4, #1
 800d0c6:	edd1 7a00 	vldr	s15, [r1]
 800d0ca:	edd1 5a01 	vldr	s11, [r1, #4]
 800d0ce:	00a3      	lsls	r3, r4, #2
 800d0d0:	18ce      	adds	r6, r1, r3
 800d0d2:	18f7      	adds	r7, r6, r3
 800d0d4:	ed96 7a00 	vldr	s14, [r6]
 800d0d8:	ed96 4a01 	vldr	s8, [r6, #4]
 800d0dc:	ed97 6a00 	vldr	s12, [r7]
 800d0e0:	edd7 4a01 	vldr	s9, [r7, #4]
 800d0e4:	ee77 6a86 	vadd.f32	s13, s15, s12
 800d0e8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d0ec:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800d0f0:	ee77 2a26 	vadd.f32	s5, s14, s13
 800d0f4:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800d0f8:	ee74 3a27 	vadd.f32	s7, s8, s15
 800d0fc:	ee76 4a44 	vsub.f32	s9, s12, s8
 800d100:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800d104:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800d108:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800d10c:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d110:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d114:	0860      	lsrs	r0, r4, #1
 800d116:	f102 0408 	add.w	r4, r2, #8
 800d11a:	9405      	str	r4, [sp, #20]
 800d11c:	f102 0410 	add.w	r4, r2, #16
 800d120:	9009      	str	r0, [sp, #36]	; 0x24
 800d122:	f1a0 0902 	sub.w	r9, r0, #2
 800d126:	9403      	str	r4, [sp, #12]
 800d128:	18fc      	adds	r4, r7, r3
 800d12a:	f102 0018 	add.w	r0, r2, #24
 800d12e:	ed94 5a00 	vldr	s10, [r4]
 800d132:	ed94 3a01 	vldr	s6, [r4, #4]
 800d136:	ee72 2a85 	vadd.f32	s5, s5, s10
 800d13a:	9004      	str	r0, [sp, #16]
 800d13c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800d140:	4620      	mov	r0, r4
 800d142:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800d146:	9408      	str	r4, [sp, #32]
 800d148:	ee12 ca90 	vmov	ip, s5
 800d14c:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800d150:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d154:	f845 cb08 	str.w	ip, [r5], #8
 800d158:	ee13 ca90 	vmov	ip, s7
 800d15c:	ed96 2a01 	vldr	s4, [r6, #4]
 800d160:	ee74 4a05 	vadd.f32	s9, s8, s10
 800d164:	edd4 2a01 	vldr	s5, [r4, #4]
 800d168:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d16c:	ee36 6a02 	vadd.f32	s12, s12, s4
 800d170:	9500      	str	r5, [sp, #0]
 800d172:	460d      	mov	r5, r1
 800d174:	ee36 6a22 	vadd.f32	s12, s12, s5
 800d178:	ed81 6a01 	vstr	s12, [r1, #4]
 800d17c:	4631      	mov	r1, r6
 800d17e:	f841 cb08 	str.w	ip, [r1], #8
 800d182:	ee16 ca90 	vmov	ip, s13
 800d186:	9106      	str	r1, [sp, #24]
 800d188:	4639      	mov	r1, r7
 800d18a:	edc6 4a01 	vstr	s9, [r6, #4]
 800d18e:	f841 cb08 	str.w	ip, [r1], #8
 800d192:	9102      	str	r1, [sp, #8]
 800d194:	ee17 1a90 	vmov	r1, s15
 800d198:	edc7 5a01 	vstr	s11, [r7, #4]
 800d19c:	f840 1b08 	str.w	r1, [r0], #8
 800d1a0:	ea5f 0159 	movs.w	r1, r9, lsr #1
 800d1a4:	9001      	str	r0, [sp, #4]
 800d1a6:	ed84 7a01 	vstr	s14, [r4, #4]
 800d1aa:	9107      	str	r1, [sp, #28]
 800d1ac:	f000 8135 	beq.w	800d41a <arm_cfft_radix8by4_f32+0x366>
 800d1b0:	3b0c      	subs	r3, #12
 800d1b2:	f102 0920 	add.w	r9, r2, #32
 800d1b6:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800d1ba:	4622      	mov	r2, r4
 800d1bc:	468b      	mov	fp, r1
 800d1be:	f105 0e10 	add.w	lr, r5, #16
 800d1c2:	4423      	add	r3, r4
 800d1c4:	f1a6 0c0c 	sub.w	ip, r6, #12
 800d1c8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800d1cc:	f106 0010 	add.w	r0, r6, #16
 800d1d0:	f1a7 010c 	sub.w	r1, r7, #12
 800d1d4:	f107 0510 	add.w	r5, r7, #16
 800d1d8:	3c0c      	subs	r4, #12
 800d1da:	3210      	adds	r2, #16
 800d1dc:	ed15 7a02 	vldr	s14, [r5, #-8]
 800d1e0:	f1bb 0b01 	subs.w	fp, fp, #1
 800d1e4:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800d1e8:	f1ac 0c08 	sub.w	ip, ip, #8
 800d1ec:	ed50 6a02 	vldr	s13, [r0, #-8]
 800d1f0:	f10e 0e08 	add.w	lr, lr, #8
 800d1f4:	ee77 1a87 	vadd.f32	s3, s15, s14
 800d1f8:	ed52 4a02 	vldr	s9, [r2, #-8]
 800d1fc:	ed55 5a01 	vldr	s11, [r5, #-4]
 800d200:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d204:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800d208:	f10a 0a08 	add.w	sl, sl, #8
 800d20c:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800d210:	ed10 3a01 	vldr	s6, [r0, #-4]
 800d214:	ee37 4a25 	vadd.f32	s8, s14, s11
 800d218:	ed52 3a01 	vldr	s7, [r2, #-4]
 800d21c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800d220:	f100 0008 	add.w	r0, r0, #8
 800d224:	ee36 6a24 	vadd.f32	s12, s12, s9
 800d228:	f1a1 0108 	sub.w	r1, r1, #8
 800d22c:	ee73 2a27 	vadd.f32	s5, s6, s15
 800d230:	f109 0910 	add.w	r9, r9, #16
 800d234:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800d238:	f105 0508 	add.w	r5, r5, #8
 800d23c:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800d240:	ee37 5a66 	vsub.f32	s10, s14, s13
 800d244:	ed50 5a03 	vldr	s11, [r0, #-12]
 800d248:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800d24c:	ed12 6a01 	vldr	s12, [r2, #-4]
 800d250:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d254:	ee74 5a25 	vadd.f32	s11, s8, s11
 800d258:	f1a4 0408 	sub.w	r4, r4, #8
 800d25c:	ee34 4a43 	vsub.f32	s8, s8, s6
 800d260:	f108 0818 	add.w	r8, r8, #24
 800d264:	ee32 0ae3 	vsub.f32	s0, s5, s7
 800d268:	f102 0208 	add.w	r2, r2, #8
 800d26c:	ee75 5a86 	vadd.f32	s11, s11, s12
 800d270:	f1a3 0308 	sub.w	r3, r3, #8
 800d274:	ee34 6a63 	vsub.f32	s12, s8, s7
 800d278:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800d27c:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800d280:	ee35 5a24 	vadd.f32	s10, s10, s9
 800d284:	ed94 4a04 	vldr	s8, [r4, #16]
 800d288:	ee71 1ae4 	vsub.f32	s3, s3, s9
 800d28c:	ed9c 3a04 	vldr	s6, [ip, #16]
 800d290:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d294:	edd1 7a04 	vldr	s15, [r1, #16]
 800d298:	ee73 6a04 	vadd.f32	s13, s6, s8
 800d29c:	ed93 8a04 	vldr	s16, [r3, #16]
 800d2a0:	edd4 5a03 	vldr	s11, [r4, #12]
 800d2a4:	ee33 3a44 	vsub.f32	s6, s6, s8
 800d2a8:	ed9c 2a03 	vldr	s4, [ip, #12]
 800d2ac:	ee77 8ac8 	vsub.f32	s17, s15, s16
 800d2b0:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800d2b4:	ed91 1a03 	vldr	s2, [r1, #12]
 800d2b8:	ee32 4a25 	vadd.f32	s8, s4, s11
 800d2bc:	edd3 2a03 	vldr	s5, [r3, #12]
 800d2c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d2c4:	ee70 0a88 	vadd.f32	s1, s1, s16
 800d2c8:	ee73 4a41 	vsub.f32	s9, s6, s2
 800d2cc:	ee32 2a65 	vsub.f32	s4, s4, s11
 800d2d0:	edcc 0a04 	vstr	s1, [ip, #16]
 800d2d4:	ee74 0a41 	vsub.f32	s1, s8, s2
 800d2d8:	edd1 6a03 	vldr	s13, [r1, #12]
 800d2dc:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800d2e0:	ed93 9a03 	vldr	s18, [r3, #12]
 800d2e4:	ee78 5a82 	vadd.f32	s11, s17, s4
 800d2e8:	ee34 4a26 	vadd.f32	s8, s8, s13
 800d2ec:	ee70 0ae2 	vsub.f32	s1, s1, s5
 800d2f0:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800d2f4:	ee34 4a09 	vadd.f32	s8, s8, s18
 800d2f8:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800d2fc:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800d300:	ed8c 4a03 	vstr	s8, [ip, #12]
 800d304:	ee38 2ac2 	vsub.f32	s4, s17, s4
 800d308:	ed1a 1a03 	vldr	s2, [sl, #-12]
 800d30c:	ed1a 4a04 	vldr	s8, [sl, #-16]
 800d310:	ee60 2a01 	vmul.f32	s5, s0, s2
 800d314:	ee64 6a81 	vmul.f32	s13, s9, s2
 800d318:	ee20 8a04 	vmul.f32	s16, s0, s8
 800d31c:	ee64 4a84 	vmul.f32	s9, s9, s8
 800d320:	ee25 0a01 	vmul.f32	s0, s10, s2
 800d324:	ee25 5a04 	vmul.f32	s10, s10, s8
 800d328:	ee25 4a84 	vmul.f32	s8, s11, s8
 800d32c:	ee65 5a81 	vmul.f32	s11, s11, s2
 800d330:	ee35 5a62 	vsub.f32	s10, s10, s5
 800d334:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800d338:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800d33c:	ee38 1a00 	vadd.f32	s2, s16, s0
 800d340:	ed00 5a03 	vstr	s10, [r0, #-12]
 800d344:	ed00 1a04 	vstr	s2, [r0, #-16]
 800d348:	ed81 4a04 	vstr	s8, [r1, #16]
 800d34c:	edc1 5a03 	vstr	s11, [r1, #12]
 800d350:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 800d354:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 800d358:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 800d35c:	ee66 2a25 	vmul.f32	s5, s12, s11
 800d360:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800d364:	ee21 4a85 	vmul.f32	s8, s3, s10
 800d368:	ee60 7a85 	vmul.f32	s15, s1, s10
 800d36c:	ee61 1aa5 	vmul.f32	s3, s3, s11
 800d370:	ee26 6a05 	vmul.f32	s12, s12, s10
 800d374:	ee60 5aa5 	vmul.f32	s11, s1, s11
 800d378:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d37c:	ee34 5a22 	vadd.f32	s10, s8, s5
 800d380:	ee36 6a61 	vsub.f32	s12, s12, s3
 800d384:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800d388:	ed05 5a04 	vstr	s10, [r5, #-16]
 800d38c:	ed05 6a03 	vstr	s12, [r5, #-12]
 800d390:	edc4 5a04 	vstr	s11, [r4, #16]
 800d394:	edc4 6a03 	vstr	s13, [r4, #12]
 800d398:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 800d39c:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 800d3a0:	ee23 6aa2 	vmul.f32	s12, s7, s5
 800d3a4:	ee67 5a27 	vmul.f32	s11, s14, s15
 800d3a8:	ee63 6a27 	vmul.f32	s13, s6, s15
 800d3ac:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800d3b0:	ee27 7a22 	vmul.f32	s14, s14, s5
 800d3b4:	ee62 7a27 	vmul.f32	s15, s4, s15
 800d3b8:	ee23 3a22 	vmul.f32	s6, s6, s5
 800d3bc:	ee22 2a22 	vmul.f32	s4, s4, s5
 800d3c0:	ee36 6a25 	vadd.f32	s12, s12, s11
 800d3c4:	ee37 7a63 	vsub.f32	s14, s14, s7
 800d3c8:	ee36 2ac2 	vsub.f32	s4, s13, s4
 800d3cc:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d3d0:	ed02 6a04 	vstr	s12, [r2, #-16]
 800d3d4:	ed02 7a03 	vstr	s14, [r2, #-12]
 800d3d8:	ed83 2a04 	vstr	s4, [r3, #16]
 800d3dc:	edc3 7a03 	vstr	s15, [r3, #12]
 800d3e0:	f47f aefc 	bne.w	800d1dc <arm_cfft_radix8by4_f32+0x128>
 800d3e4:	9907      	ldr	r1, [sp, #28]
 800d3e6:	9803      	ldr	r0, [sp, #12]
 800d3e8:	00cb      	lsls	r3, r1, #3
 800d3ea:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800d3ee:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800d3f2:	9103      	str	r1, [sp, #12]
 800d3f4:	9900      	ldr	r1, [sp, #0]
 800d3f6:	4419      	add	r1, r3
 800d3f8:	9100      	str	r1, [sp, #0]
 800d3fa:	9905      	ldr	r1, [sp, #20]
 800d3fc:	4419      	add	r1, r3
 800d3fe:	9105      	str	r1, [sp, #20]
 800d400:	9906      	ldr	r1, [sp, #24]
 800d402:	4419      	add	r1, r3
 800d404:	9106      	str	r1, [sp, #24]
 800d406:	9902      	ldr	r1, [sp, #8]
 800d408:	4419      	add	r1, r3
 800d40a:	9102      	str	r1, [sp, #8]
 800d40c:	9901      	ldr	r1, [sp, #4]
 800d40e:	4419      	add	r1, r3
 800d410:	9b04      	ldr	r3, [sp, #16]
 800d412:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d416:	9101      	str	r1, [sp, #4]
 800d418:	9304      	str	r3, [sp, #16]
 800d41a:	9b00      	ldr	r3, [sp, #0]
 800d41c:	9902      	ldr	r1, [sp, #8]
 800d41e:	ed93 7a00 	vldr	s14, [r3]
 800d422:	edd1 7a00 	vldr	s15, [r1]
 800d426:	9a06      	ldr	r2, [sp, #24]
 800d428:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d42c:	9d01      	ldr	r5, [sp, #4]
 800d42e:	edd2 6a00 	vldr	s13, [r2]
 800d432:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d436:	9b02      	ldr	r3, [sp, #8]
 800d438:	ee76 3a86 	vadd.f32	s7, s13, s12
 800d43c:	ed95 3a00 	vldr	s6, [r5]
 800d440:	ed93 5a01 	vldr	s10, [r3, #4]
 800d444:	ee36 6a66 	vsub.f32	s12, s12, s13
 800d448:	9b00      	ldr	r3, [sp, #0]
 800d44a:	ee73 3a83 	vadd.f32	s7, s7, s6
 800d44e:	edd5 2a01 	vldr	s5, [r5, #4]
 800d452:	ed93 4a01 	vldr	s8, [r3, #4]
 800d456:	ee36 6a43 	vsub.f32	s12, s12, s6
 800d45a:	9b00      	ldr	r3, [sp, #0]
 800d45c:	ee74 5a05 	vadd.f32	s11, s8, s10
 800d460:	edd2 7a01 	vldr	s15, [r2, #4]
 800d464:	edc3 3a00 	vstr	s7, [r3]
 800d468:	ee34 4a45 	vsub.f32	s8, s8, s10
 800d46c:	edd2 3a01 	vldr	s7, [r2, #4]
 800d470:	ee77 4a87 	vadd.f32	s9, s15, s14
 800d474:	ed95 2a01 	vldr	s4, [r5, #4]
 800d478:	ee75 3aa3 	vadd.f32	s7, s11, s7
 800d47c:	9d05      	ldr	r5, [sp, #20]
 800d47e:	ee34 5a66 	vsub.f32	s10, s8, s13
 800d482:	9b00      	ldr	r3, [sp, #0]
 800d484:	ee74 4ae2 	vsub.f32	s9, s9, s5
 800d488:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800d48c:	ee73 3a82 	vadd.f32	s7, s7, s4
 800d490:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d492:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d496:	4621      	mov	r1, r4
 800d498:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d49c:	edc3 3a01 	vstr	s7, [r3, #4]
 800d4a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4a4:	edd5 3a00 	vldr	s7, [r5]
 800d4a8:	ee76 6a84 	vadd.f32	s13, s13, s8
 800d4ac:	ed95 7a01 	vldr	s14, [r5, #4]
 800d4b0:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800d4b4:	ee24 4aa3 	vmul.f32	s8, s9, s7
 800d4b8:	2304      	movs	r3, #4
 800d4ba:	ee64 4a87 	vmul.f32	s9, s9, s14
 800d4be:	ee25 7a07 	vmul.f32	s14, s10, s14
 800d4c2:	ee25 5a23 	vmul.f32	s10, s10, s7
 800d4c6:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800d4ca:	ee34 7a07 	vadd.f32	s14, s8, s14
 800d4ce:	ee35 5a64 	vsub.f32	s10, s10, s9
 800d4d2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800d4d6:	ed82 7a00 	vstr	s14, [r2]
 800d4da:	ed82 5a01 	vstr	s10, [r2, #4]
 800d4de:	9a03      	ldr	r2, [sp, #12]
 800d4e0:	edd2 4a01 	vldr	s9, [r2, #4]
 800d4e4:	ed92 7a00 	vldr	s14, [r2]
 800d4e8:	9a02      	ldr	r2, [sp, #8]
 800d4ea:	ee26 5a07 	vmul.f32	s10, s12, s14
 800d4ee:	ee26 6a24 	vmul.f32	s12, s12, s9
 800d4f2:	ee25 7a87 	vmul.f32	s14, s11, s14
 800d4f6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800d4fa:	ee37 6a46 	vsub.f32	s12, s14, s12
 800d4fe:	ee75 5a25 	vadd.f32	s11, s10, s11
 800d502:	edc2 5a00 	vstr	s11, [r2]
 800d506:	ed82 6a01 	vstr	s12, [r2, #4]
 800d50a:	9a04      	ldr	r2, [sp, #16]
 800d50c:	9d01      	ldr	r5, [sp, #4]
 800d50e:	edd2 5a01 	vldr	s11, [r2, #4]
 800d512:	ed92 7a00 	vldr	s14, [r2]
 800d516:	ee27 6a87 	vmul.f32	s12, s15, s14
 800d51a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800d51e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d522:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800d526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d52a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d52e:	edc5 7a01 	vstr	s15, [r5, #4]
 800d532:	edc5 6a00 	vstr	s13, [r5]
 800d536:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d538:	686a      	ldr	r2, [r5, #4]
 800d53a:	f000 fb57 	bl	800dbec <arm_radix8_butterfly_f32>
 800d53e:	4630      	mov	r0, r6
 800d540:	4621      	mov	r1, r4
 800d542:	686a      	ldr	r2, [r5, #4]
 800d544:	2304      	movs	r3, #4
 800d546:	f000 fb51 	bl	800dbec <arm_radix8_butterfly_f32>
 800d54a:	4638      	mov	r0, r7
 800d54c:	4621      	mov	r1, r4
 800d54e:	686a      	ldr	r2, [r5, #4]
 800d550:	2304      	movs	r3, #4
 800d552:	f000 fb4b 	bl	800dbec <arm_radix8_butterfly_f32>
 800d556:	4621      	mov	r1, r4
 800d558:	686a      	ldr	r2, [r5, #4]
 800d55a:	2304      	movs	r3, #4
 800d55c:	9808      	ldr	r0, [sp, #32]
 800d55e:	b00d      	add	sp, #52	; 0x34
 800d560:	ecbd 8b04 	vpop	{d8-d9}
 800d564:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d568:	f000 bb40 	b.w	800dbec <arm_radix8_butterfly_f32>

0800d56c <arm_cfft_f32>:
 800d56c:	2a01      	cmp	r2, #1
 800d56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d572:	4606      	mov	r6, r0
 800d574:	4617      	mov	r7, r2
 800d576:	460c      	mov	r4, r1
 800d578:	4698      	mov	r8, r3
 800d57a:	8805      	ldrh	r5, [r0, #0]
 800d57c:	d055      	beq.n	800d62a <arm_cfft_f32+0xbe>
 800d57e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800d582:	d061      	beq.n	800d648 <arm_cfft_f32+0xdc>
 800d584:	d916      	bls.n	800d5b4 <arm_cfft_f32+0x48>
 800d586:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800d58a:	d01a      	beq.n	800d5c2 <arm_cfft_f32+0x56>
 800d58c:	d946      	bls.n	800d61c <arm_cfft_f32+0xb0>
 800d58e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800d592:	d059      	beq.n	800d648 <arm_cfft_f32+0xdc>
 800d594:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800d598:	d105      	bne.n	800d5a6 <arm_cfft_f32+0x3a>
 800d59a:	2301      	movs	r3, #1
 800d59c:	6872      	ldr	r2, [r6, #4]
 800d59e:	4629      	mov	r1, r5
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	f000 fb23 	bl	800dbec <arm_radix8_butterfly_f32>
 800d5a6:	f1b8 0f00 	cmp.w	r8, #0
 800d5aa:	d111      	bne.n	800d5d0 <arm_cfft_f32+0x64>
 800d5ac:	2f01      	cmp	r7, #1
 800d5ae:	d016      	beq.n	800d5de <arm_cfft_f32+0x72>
 800d5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b4:	2d20      	cmp	r5, #32
 800d5b6:	d047      	beq.n	800d648 <arm_cfft_f32+0xdc>
 800d5b8:	d934      	bls.n	800d624 <arm_cfft_f32+0xb8>
 800d5ba:	2d40      	cmp	r5, #64	; 0x40
 800d5bc:	d0ed      	beq.n	800d59a <arm_cfft_f32+0x2e>
 800d5be:	2d80      	cmp	r5, #128	; 0x80
 800d5c0:	d1f1      	bne.n	800d5a6 <arm_cfft_f32+0x3a>
 800d5c2:	4621      	mov	r1, r4
 800d5c4:	4630      	mov	r0, r6
 800d5c6:	f7ff fca9 	bl	800cf1c <arm_cfft_radix8by2_f32>
 800d5ca:	f1b8 0f00 	cmp.w	r8, #0
 800d5ce:	d0ed      	beq.n	800d5ac <arm_cfft_f32+0x40>
 800d5d0:	68b2      	ldr	r2, [r6, #8]
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	89b1      	ldrh	r1, [r6, #12]
 800d5d6:	f000 f83f 	bl	800d658 <arm_bitreversal_32>
 800d5da:	2f01      	cmp	r7, #1
 800d5dc:	d1e8      	bne.n	800d5b0 <arm_cfft_f32+0x44>
 800d5de:	ee07 5a90 	vmov	s15, r5
 800d5e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d5ee:	2d00      	cmp	r5, #0
 800d5f0:	d0de      	beq.n	800d5b0 <arm_cfft_f32+0x44>
 800d5f2:	f104 0108 	add.w	r1, r4, #8
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	ed11 7a02 	vldr	s14, [r1, #-8]
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	ed51 7a01 	vldr	s15, [r1, #-4]
 800d602:	3108      	adds	r1, #8
 800d604:	429d      	cmp	r5, r3
 800d606:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d60a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d60e:	ed01 7a04 	vstr	s14, [r1, #-16]
 800d612:	ed41 7a03 	vstr	s15, [r1, #-12]
 800d616:	d1ef      	bne.n	800d5f8 <arm_cfft_f32+0x8c>
 800d618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d61c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800d620:	d0bb      	beq.n	800d59a <arm_cfft_f32+0x2e>
 800d622:	e7c0      	b.n	800d5a6 <arm_cfft_f32+0x3a>
 800d624:	2d10      	cmp	r5, #16
 800d626:	d0cc      	beq.n	800d5c2 <arm_cfft_f32+0x56>
 800d628:	e7bd      	b.n	800d5a6 <arm_cfft_f32+0x3a>
 800d62a:	b195      	cbz	r5, 800d652 <arm_cfft_f32+0xe6>
 800d62c:	f101 030c 	add.w	r3, r1, #12
 800d630:	2200      	movs	r2, #0
 800d632:	ed53 7a02 	vldr	s15, [r3, #-8]
 800d636:	3201      	adds	r2, #1
 800d638:	3308      	adds	r3, #8
 800d63a:	eef1 7a67 	vneg.f32	s15, s15
 800d63e:	4295      	cmp	r5, r2
 800d640:	ed43 7a04 	vstr	s15, [r3, #-16]
 800d644:	d1f5      	bne.n	800d632 <arm_cfft_f32+0xc6>
 800d646:	e79a      	b.n	800d57e <arm_cfft_f32+0x12>
 800d648:	4621      	mov	r1, r4
 800d64a:	4630      	mov	r0, r6
 800d64c:	f7ff fd32 	bl	800d0b4 <arm_cfft_radix8by4_f32>
 800d650:	e7a9      	b.n	800d5a6 <arm_cfft_f32+0x3a>
 800d652:	2b00      	cmp	r3, #0
 800d654:	d0ac      	beq.n	800d5b0 <arm_cfft_f32+0x44>
 800d656:	e7bb      	b.n	800d5d0 <arm_cfft_f32+0x64>

0800d658 <arm_bitreversal_32>:
 800d658:	b321      	cbz	r1, 800d6a4 <arm_bitreversal_32+0x4c>
 800d65a:	f102 0c02 	add.w	ip, r2, #2
 800d65e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d662:	4690      	mov	r8, r2
 800d664:	2500      	movs	r5, #0
 800d666:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 800d66a:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 800d66e:	3502      	adds	r5, #2
 800d670:	08a4      	lsrs	r4, r4, #2
 800d672:	089b      	lsrs	r3, r3, #2
 800d674:	428d      	cmp	r5, r1
 800d676:	ea4f 0784 	mov.w	r7, r4, lsl #2
 800d67a:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 800d67e:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800d682:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800d686:	f107 0704 	add.w	r7, r7, #4
 800d68a:	f106 0604 	add.w	r6, r6, #4
 800d68e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800d692:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 800d696:	59c4      	ldr	r4, [r0, r7]
 800d698:	5983      	ldr	r3, [r0, r6]
 800d69a:	51c3      	str	r3, [r0, r7]
 800d69c:	5184      	str	r4, [r0, r6]
 800d69e:	d3e2      	bcc.n	800d666 <arm_bitreversal_32+0xe>
 800d6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6a4:	4770      	bx	lr
 800d6a6:	bf00      	nop

0800d6a8 <arm_fir_decimate_init_f32>:
 800d6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ac:	e9dd 8c06 	ldrd	r8, ip, [sp, #24]
 800d6b0:	fbbc f4f2 	udiv	r4, ip, r2
 800d6b4:	fb02 c414 	mls	r4, r2, r4, ip
 800d6b8:	b99c      	cbnz	r4, 800d6e2 <arm_fir_decimate_init_f32+0x3a>
 800d6ba:	460f      	mov	r7, r1
 800d6bc:	4616      	mov	r6, r2
 800d6be:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800d6c2:	4605      	mov	r5, r0
 800d6c4:	443a      	add	r2, r7
 800d6c6:	8069      	strh	r1, [r5, #2]
 800d6c8:	6043      	str	r3, [r0, #4]
 800d6ca:	4621      	mov	r1, r4
 800d6cc:	4462      	add	r2, ip
 800d6ce:	4640      	mov	r0, r8
 800d6d0:	0092      	lsls	r2, r2, #2
 800d6d2:	f000 fd85 	bl	800e1e0 <memset>
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f8c5 8008 	str.w	r8, [r5, #8]
 800d6dc:	702e      	strb	r6, [r5, #0]
 800d6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6e2:	f06f 0001 	mvn.w	r0, #1
 800d6e6:	e7fa      	b.n	800d6de <arm_fir_decimate_init_f32+0x36>

0800d6e8 <arm_fir_decimate_f32>:
 800d6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ec:	4605      	mov	r5, r0
 800d6ee:	b08d      	sub	sp, #52	; 0x34
 800d6f0:	4694      	mov	ip, r2
 800d6f2:	782c      	ldrb	r4, [r5, #0]
 800d6f4:	886f      	ldrh	r7, [r5, #2]
 800d6f6:	9001      	str	r0, [sp, #4]
 800d6f8:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800d6fc:	68ae      	ldr	r6, [r5, #8]
 800d6fe:	4438      	add	r0, r7
 800d700:	686d      	ldr	r5, [r5, #4]
 800d702:	9207      	str	r2, [sp, #28]
 800d704:	970a      	str	r7, [sp, #40]	; 0x28
 800d706:	eb06 0b80 	add.w	fp, r6, r0, lsl #2
 800d70a:	9508      	str	r5, [sp, #32]
 800d70c:	fbb3 f3f4 	udiv	r3, r3, r4
 800d710:	930b      	str	r3, [sp, #44]	; 0x2c
 800d712:	089b      	lsrs	r3, r3, #2
 800d714:	9309      	str	r3, [sp, #36]	; 0x24
 800d716:	f000 80ef 	beq.w	800d8f8 <arm_fir_decimate_f32+0x210>
 800d71a:	08ba      	lsrs	r2, r7, #2
 800d71c:	462b      	mov	r3, r5
 800d71e:	3510      	adds	r5, #16
 800d720:	f007 0703 	and.w	r7, r7, #3
 800d724:	9205      	str	r2, [sp, #20]
 800d726:	0112      	lsls	r2, r2, #4
 800d728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d72a:	f10c 0910 	add.w	r9, ip, #16
 800d72e:	4413      	add	r3, r2
 800d730:	9100      	str	r1, [sp, #0]
 800d732:	eb05 0e02 	add.w	lr, r5, r2
 800d736:	4611      	mov	r1, r2
 800d738:	9503      	str	r5, [sp, #12]
 800d73a:	9704      	str	r7, [sp, #16]
 800d73c:	9002      	str	r0, [sp, #8]
 800d73e:	9306      	str	r3, [sp, #24]
 800d740:	00a4      	lsls	r4, r4, #2
 800d742:	4658      	mov	r0, fp
 800d744:	9a00      	ldr	r2, [sp, #0]
 800d746:	4623      	mov	r3, r4
 800d748:	f852 5b04 	ldr.w	r5, [r2], #4
 800d74c:	3b01      	subs	r3, #1
 800d74e:	f840 5b04 	str.w	r5, [r0], #4
 800d752:	d1f9      	bne.n	800d748 <arm_fir_decimate_f32+0x60>
 800d754:	9b01      	ldr	r3, [sp, #4]
 800d756:	00a4      	lsls	r4, r4, #2
 800d758:	eddf 0abe 	vldr	s1, [pc, #760]	; 800da54 <arm_fir_decimate_f32+0x36c>
 800d75c:	f893 8000 	ldrb.w	r8, [r3]
 800d760:	44a3      	add	fp, r4
 800d762:	9b00      	ldr	r3, [sp, #0]
 800d764:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800d768:	4423      	add	r3, r4
 800d76a:	eb06 0708 	add.w	r7, r6, r8
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	eb07 0c08 	add.w	ip, r7, r8
 800d774:	9b05      	ldr	r3, [sp, #20]
 800d776:	eb0c 0a08 	add.w	sl, ip, r8
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f000 815c 	beq.w	800da38 <arm_fir_decimate_f32+0x350>
 800d780:	eef0 4a60 	vmov.f32	s9, s1
 800d784:	9b03      	ldr	r3, [sp, #12]
 800d786:	eef0 7a60 	vmov.f32	s15, s1
 800d78a:	f106 0510 	add.w	r5, r6, #16
 800d78e:	eeb0 7a60 	vmov.f32	s14, s1
 800d792:	f107 0410 	add.w	r4, r7, #16
 800d796:	f10c 0010 	add.w	r0, ip, #16
 800d79a:	f10a 0210 	add.w	r2, sl, #16
 800d79e:	ed53 5a04 	vldr	s11, [r3, #-16]
 800d7a2:	3310      	adds	r3, #16
 800d7a4:	ed12 5a04 	vldr	s10, [r2, #-16]
 800d7a8:	3510      	adds	r5, #16
 800d7aa:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800d7ae:	3410      	adds	r4, #16
 800d7b0:	ed14 1a08 	vldr	s2, [r4, #-32]	; 0xffffffe0
 800d7b4:	3010      	adds	r0, #16
 800d7b6:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 800d7ba:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800d7be:	ee25 1a81 	vmul.f32	s2, s11, s2
 800d7c2:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 800d7c6:	ee65 3aa3 	vmul.f32	s7, s11, s7
 800d7ca:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 800d7ce:	ee65 5a85 	vmul.f32	s11, s11, s10
 800d7d2:	ed15 2a07 	vldr	s4, [r5, #-28]	; 0xffffffe4
 800d7d6:	ed12 5a03 	vldr	s10, [r2, #-12]
 800d7da:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d7de:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800d7e2:	ee73 1aa4 	vadd.f32	s3, s7, s9
 800d7e6:	ee26 2a02 	vmul.f32	s4, s12, s4
 800d7ea:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800d7ee:	ee31 1a27 	vadd.f32	s2, s2, s15
 800d7f2:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800d7f6:	ee66 7a22 	vmul.f32	s15, s12, s5
 800d7fa:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800d7fe:	ee26 3a03 	vmul.f32	s6, s12, s6
 800d802:	ed50 4a06 	vldr	s9, [r0, #-24]	; 0xffffffe8
 800d806:	ee75 5aa0 	vadd.f32	s11, s11, s1
 800d80a:	ed52 0a02 	vldr	s1, [r2, #-8]
 800d80e:	ee26 6a05 	vmul.f32	s12, s12, s10
 800d812:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 800d816:	ee72 2a07 	vadd.f32	s5, s4, s14
 800d81a:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800d81e:	ee77 7a81 	vadd.f32	s15, s15, s2
 800d822:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 800d826:	ee33 3a21 	vadd.f32	s6, s6, s3
 800d82a:	ed14 1a05 	vldr	s2, [r4, #-20]	; 0xffffffec
 800d82e:	ee66 3aa3 	vmul.f32	s7, s13, s7
 800d832:	ed52 1a01 	vldr	s3, [r2, #-4]
 800d836:	ee26 4a84 	vmul.f32	s8, s13, s8
 800d83a:	459e      	cmp	lr, r3
 800d83c:	ee66 4aa4 	vmul.f32	s9, s13, s9
 800d840:	f102 0210 	add.w	r2, r2, #16
 800d844:	ee66 6aa0 	vmul.f32	s13, s13, s1
 800d848:	ee36 6a25 	vadd.f32	s12, s12, s11
 800d84c:	ee25 7a07 	vmul.f32	s14, s10, s14
 800d850:	ee34 4a27 	vadd.f32	s8, s8, s15
 800d854:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d858:	ee65 7a01 	vmul.f32	s15, s10, s2
 800d85c:	ee25 3a02 	vmul.f32	s6, s10, s4
 800d860:	ee73 3aa2 	vadd.f32	s7, s7, s5
 800d864:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d868:	ee25 5a21 	vmul.f32	s10, s10, s3
 800d86c:	ee37 7a23 	vadd.f32	s14, s14, s7
 800d870:	ee77 7a84 	vadd.f32	s15, s15, s8
 800d874:	ee73 4a24 	vadd.f32	s9, s6, s9
 800d878:	ee75 0a26 	vadd.f32	s1, s10, s13
 800d87c:	d18f      	bne.n	800d79e <arm_fir_decimate_f32+0xb6>
 800d87e:	440e      	add	r6, r1
 800d880:	440f      	add	r7, r1
 800d882:	448c      	add	ip, r1
 800d884:	eb0a 0001 	add.w	r0, sl, r1
 800d888:	9a06      	ldr	r2, [sp, #24]
 800d88a:	9b04      	ldr	r3, [sp, #16]
 800d88c:	b1db      	cbz	r3, 800d8c6 <arm_fir_decimate_f32+0x1de>
 800d88e:	ecb2 5a01 	vldmia	r2!, {s10}
 800d892:	3b01      	subs	r3, #1
 800d894:	ecf6 2a01 	vldmia	r6!, {s5}
 800d898:	ecf7 3a01 	vldmia	r7!, {s7}
 800d89c:	ecbc 4a01 	vldmia	ip!, {s8}
 800d8a0:	ee65 2a22 	vmul.f32	s5, s10, s5
 800d8a4:	ecf0 6a01 	vldmia	r0!, {s13}
 800d8a8:	ee65 3a23 	vmul.f32	s7, s10, s7
 800d8ac:	ee25 4a04 	vmul.f32	s8, s10, s8
 800d8b0:	ee25 5a26 	vmul.f32	s10, s10, s13
 800d8b4:	ee37 7a22 	vadd.f32	s14, s14, s5
 800d8b8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800d8bc:	ee74 4a84 	vadd.f32	s9, s9, s8
 800d8c0:	ee70 0a85 	vadd.f32	s1, s1, s10
 800d8c4:	d1e3      	bne.n	800d88e <arm_fir_decimate_f32+0x1a6>
 800d8c6:	9b02      	ldr	r3, [sp, #8]
 800d8c8:	eb0a 0608 	add.w	r6, sl, r8
 800d8cc:	ed09 7a04 	vstr	s14, [r9, #-16]
 800d8d0:	f109 0910 	add.w	r9, r9, #16
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	ed49 7a07 	vstr	s15, [r9, #-28]	; 0xffffffe4
 800d8da:	ed49 4a06 	vstr	s9, [r9, #-24]	; 0xffffffe8
 800d8de:	ed49 0a05 	vstr	s1, [r9, #-20]	; 0xffffffec
 800d8e2:	9302      	str	r3, [sp, #8]
 800d8e4:	d002      	beq.n	800d8ec <arm_fir_decimate_f32+0x204>
 800d8e6:	9b01      	ldr	r3, [sp, #4]
 800d8e8:	781c      	ldrb	r4, [r3, #0]
 800d8ea:	e729      	b.n	800d740 <arm_fir_decimate_f32+0x58>
 800d8ec:	9b07      	ldr	r3, [sp, #28]
 800d8ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8f0:	9900      	ldr	r1, [sp, #0]
 800d8f2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800d8f6:	9307      	str	r3, [sp, #28]
 800d8f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8fa:	f013 0803 	ands.w	r8, r3, #3
 800d8fe:	d067      	beq.n	800d9d0 <arm_fir_decimate_f32+0x2e8>
 800d900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d902:	9808      	ldr	r0, [sp, #32]
 800d904:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 800d908:	9d07      	ldr	r5, [sp, #28]
 800d90a:	4602      	mov	r2, r0
 800d90c:	f003 0703 	and.w	r7, r3, #3
 800d910:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
 800d914:	f8cd e000 	str.w	lr, [sp]
 800d918:	3210      	adds	r2, #16
 800d91a:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800d91e:	eb00 090c 	add.w	r9, r0, ip
 800d922:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d926:	eb02 040c 	add.w	r4, r2, ip
 800d92a:	46aa      	mov	sl, r5
 800d92c:	9203      	str	r2, [sp, #12]
 800d92e:	f89e 5000 	ldrb.w	r5, [lr]
 800d932:	4658      	mov	r0, fp
 800d934:	460a      	mov	r2, r1
 800d936:	462b      	mov	r3, r5
 800d938:	ecf2 7a01 	vldmia	r2!, {s15}
 800d93c:	3b01      	subs	r3, #1
 800d93e:	ece0 7a01 	vstmia	r0!, {s15}
 800d942:	d1f9      	bne.n	800d938 <arm_fir_decimate_f32+0x250>
 800d944:	00ad      	lsls	r5, r5, #2
 800d946:	9b00      	ldr	r3, [sp, #0]
 800d948:	4429      	add	r1, r5
 800d94a:	44ab      	add	fp, r5
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d07c      	beq.n	800da4a <arm_fir_decimate_f32+0x362>
 800d950:	9b03      	ldr	r3, [sp, #12]
 800d952:	f106 0210 	add.w	r2, r6, #16
 800d956:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800da54 <arm_fir_decimate_f32+0x36c>
 800d95a:	ed13 7a04 	vldr	s14, [r3, #-16]
 800d95e:	3310      	adds	r3, #16
 800d960:	ed52 6a04 	vldr	s13, [r2, #-16]
 800d964:	3210      	adds	r2, #16
 800d966:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 800d96a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d96e:	ed52 5a07 	vldr	s11, [r2, #-28]	; 0xffffffe4
 800d972:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800d976:	ee26 6a25 	vmul.f32	s12, s12, s11
 800d97a:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
 800d97e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d982:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 800d986:	ee26 7a85 	vmul.f32	s14, s13, s10
 800d98a:	ed52 6a05 	vldr	s13, [r2, #-20]	; 0xffffffec
 800d98e:	429c      	cmp	r4, r3
 800d990:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d994:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800d998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d99c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9a0:	d1db      	bne.n	800d95a <arm_fir_decimate_f32+0x272>
 800d9a2:	eb06 000c 	add.w	r0, r6, ip
 800d9a6:	464a      	mov	r2, r9
 800d9a8:	b157      	cbz	r7, 800d9c0 <arm_fir_decimate_f32+0x2d8>
 800d9aa:	463b      	mov	r3, r7
 800d9ac:	ecb2 7a01 	vldmia	r2!, {s14}
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	ecf0 6a01 	vldmia	r0!, {s13}
 800d9b6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d9ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9be:	d1f5      	bne.n	800d9ac <arm_fir_decimate_f32+0x2c4>
 800d9c0:	f89e 3000 	ldrb.w	r3, [lr]
 800d9c4:	ecea 7a01 	vstmia	sl!, {s15}
 800d9c8:	45c2      	cmp	sl, r8
 800d9ca:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800d9ce:	d1ae      	bne.n	800d92e <arm_fir_decimate_f32+0x246>
 800d9d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9d2:	1e5c      	subs	r4, r3, #1
 800d9d4:	9b01      	ldr	r3, [sp, #4]
 800d9d6:	08a5      	lsrs	r5, r4, #2
 800d9d8:	689f      	ldr	r7, [r3, #8]
 800d9da:	d01d      	beq.n	800da18 <arm_fir_decimate_f32+0x330>
 800d9dc:	f106 0210 	add.w	r2, r6, #16
 800d9e0:	f107 0310 	add.w	r3, r7, #16
 800d9e4:	4629      	mov	r1, r5
 800d9e6:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800d9ea:	3901      	subs	r1, #1
 800d9ec:	f102 0210 	add.w	r2, r2, #16
 800d9f0:	f103 0310 	add.w	r3, r3, #16
 800d9f4:	f843 0c20 	str.w	r0, [r3, #-32]
 800d9f8:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 800d9fc:	f843 0c1c 	str.w	r0, [r3, #-28]
 800da00:	f852 0c18 	ldr.w	r0, [r2, #-24]
 800da04:	f843 0c18 	str.w	r0, [r3, #-24]
 800da08:	f852 0c14 	ldr.w	r0, [r2, #-20]
 800da0c:	f843 0c14 	str.w	r0, [r3, #-20]
 800da10:	d1e9      	bne.n	800d9e6 <arm_fir_decimate_f32+0x2fe>
 800da12:	012d      	lsls	r5, r5, #4
 800da14:	442e      	add	r6, r5
 800da16:	442f      	add	r7, r5
 800da18:	f014 0403 	ands.w	r4, r4, #3
 800da1c:	d009      	beq.n	800da32 <arm_fir_decimate_f32+0x34a>
 800da1e:	6833      	ldr	r3, [r6, #0]
 800da20:	3c01      	subs	r4, #1
 800da22:	603b      	str	r3, [r7, #0]
 800da24:	d005      	beq.n	800da32 <arm_fir_decimate_f32+0x34a>
 800da26:	6873      	ldr	r3, [r6, #4]
 800da28:	2c01      	cmp	r4, #1
 800da2a:	607b      	str	r3, [r7, #4]
 800da2c:	d001      	beq.n	800da32 <arm_fir_decimate_f32+0x34a>
 800da2e:	68b3      	ldr	r3, [r6, #8]
 800da30:	60bb      	str	r3, [r7, #8]
 800da32:	b00d      	add	sp, #52	; 0x34
 800da34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da38:	4650      	mov	r0, sl
 800da3a:	9a08      	ldr	r2, [sp, #32]
 800da3c:	eef0 4a60 	vmov.f32	s9, s1
 800da40:	eef0 7a60 	vmov.f32	s15, s1
 800da44:	eeb0 7a60 	vmov.f32	s14, s1
 800da48:	e71f      	b.n	800d88a <arm_fir_decimate_f32+0x1a2>
 800da4a:	9a08      	ldr	r2, [sp, #32]
 800da4c:	4630      	mov	r0, r6
 800da4e:	eddf 7a01 	vldr	s15, [pc, #4]	; 800da54 <arm_fir_decimate_f32+0x36c>
 800da52:	e7a9      	b.n	800d9a8 <arm_fir_decimate_f32+0x2c0>
 800da54:	00000000 	.word	0x00000000

0800da58 <arm_cmplx_mult_cmplx_f32>:
 800da58:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800da5c:	b4f0      	push	{r4, r5, r6, r7}
 800da5e:	d073      	beq.n	800db48 <arm_cmplx_mult_cmplx_f32+0xf0>
 800da60:	f100 0620 	add.w	r6, r0, #32
 800da64:	f101 0520 	add.w	r5, r1, #32
 800da68:	f102 0420 	add.w	r4, r2, #32
 800da6c:	4667      	mov	r7, ip
 800da6e:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800da72:	3f01      	subs	r7, #1
 800da74:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 800da78:	f105 0520 	add.w	r5, r5, #32
 800da7c:	ed15 7a10 	vldr	s14, [r5, #-64]	; 0xffffffc0
 800da80:	f106 0620 	add.w	r6, r6, #32
 800da84:	ed56 6a0f 	vldr	s13, [r6, #-60]	; 0xffffffc4
 800da88:	f104 0420 	add.w	r4, r4, #32
 800da8c:	ee27 6a87 	vmul.f32	s12, s15, s14
 800da90:	ee26 7a87 	vmul.f32	s14, s13, s14
 800da94:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800da98:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800da9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800daa0:	ee76 6a66 	vsub.f32	s13, s12, s13
 800daa4:	ed44 7a0f 	vstr	s15, [r4, #-60]	; 0xffffffc4
 800daa8:	ed44 6a10 	vstr	s13, [r4, #-64]	; 0xffffffc0
 800daac:	ed55 5a0d 	vldr	s11, [r5, #-52]	; 0xffffffcc
 800dab0:	ed56 7a0e 	vldr	s15, [r6, #-56]	; 0xffffffc8
 800dab4:	ed15 7a0e 	vldr	s14, [r5, #-56]	; 0xffffffc8
 800dab8:	ed56 6a0d 	vldr	s13, [r6, #-52]	; 0xffffffcc
 800dabc:	ee27 6a87 	vmul.f32	s12, s15, s14
 800dac0:	ee26 7a87 	vmul.f32	s14, s13, s14
 800dac4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800dac8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800dacc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dad0:	ee76 6a66 	vsub.f32	s13, s12, s13
 800dad4:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 800dad8:	ed44 6a0e 	vstr	s13, [r4, #-56]	; 0xffffffc8
 800dadc:	ed55 5a0b 	vldr	s11, [r5, #-44]	; 0xffffffd4
 800dae0:	ed56 7a0c 	vldr	s15, [r6, #-48]	; 0xffffffd0
 800dae4:	ed15 7a0c 	vldr	s14, [r5, #-48]	; 0xffffffd0
 800dae8:	ed56 6a0b 	vldr	s13, [r6, #-44]	; 0xffffffd4
 800daec:	ee27 6a87 	vmul.f32	s12, s15, s14
 800daf0:	ee26 7a87 	vmul.f32	s14, s13, s14
 800daf4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800daf8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800dafc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db00:	ee76 6a66 	vsub.f32	s13, s12, s13
 800db04:	ed44 7a0b 	vstr	s15, [r4, #-44]	; 0xffffffd4
 800db08:	ed44 6a0c 	vstr	s13, [r4, #-48]	; 0xffffffd0
 800db0c:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 800db10:	ed15 7a0a 	vldr	s14, [r5, #-40]	; 0xffffffd8
 800db14:	ed56 6a09 	vldr	s13, [r6, #-36]	; 0xffffffdc
 800db18:	ed55 5a09 	vldr	s11, [r5, #-36]	; 0xffffffdc
 800db1c:	ee27 6a87 	vmul.f32	s12, s15, s14
 800db20:	ee26 7a87 	vmul.f32	s14, s13, s14
 800db24:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800db28:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800db2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db30:	ee76 6a66 	vsub.f32	s13, s12, s13
 800db34:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 800db38:	ed44 6a0a 	vstr	s13, [r4, #-40]	; 0xffffffd8
 800db3c:	d197      	bne.n	800da6e <arm_cmplx_mult_cmplx_f32+0x16>
 800db3e:	ea4f 144c 	mov.w	r4, ip, lsl #5
 800db42:	4420      	add	r0, r4
 800db44:	4421      	add	r1, r4
 800db46:	4422      	add	r2, r4
 800db48:	f013 0303 	ands.w	r3, r3, #3
 800db4c:	d04b      	beq.n	800dbe6 <arm_cmplx_mult_cmplx_f32+0x18e>
 800db4e:	edd0 5a00 	vldr	s11, [r0]
 800db52:	3b01      	subs	r3, #1
 800db54:	edd1 7a00 	vldr	s15, [r1]
 800db58:	edd0 6a01 	vldr	s13, [r0, #4]
 800db5c:	ed91 7a01 	vldr	s14, [r1, #4]
 800db60:	ee27 6aa5 	vmul.f32	s12, s15, s11
 800db64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800db68:	ee67 6a26 	vmul.f32	s13, s14, s13
 800db6c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800db70:	ee76 6a66 	vsub.f32	s13, s12, s13
 800db74:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db78:	edc2 6a00 	vstr	s13, [r2]
 800db7c:	edc2 7a01 	vstr	s15, [r2, #4]
 800db80:	d031      	beq.n	800dbe6 <arm_cmplx_mult_cmplx_f32+0x18e>
 800db82:	edd0 7a02 	vldr	s15, [r0, #8]
 800db86:	2b01      	cmp	r3, #1
 800db88:	ed91 7a02 	vldr	s14, [r1, #8]
 800db8c:	edd0 6a03 	vldr	s13, [r0, #12]
 800db90:	edd1 5a03 	vldr	s11, [r1, #12]
 800db94:	ee27 6a87 	vmul.f32	s12, s15, s14
 800db98:	ee26 7a87 	vmul.f32	s14, s13, s14
 800db9c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800dba0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800dba4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dba8:	ee76 6a66 	vsub.f32	s13, s12, s13
 800dbac:	edc2 7a03 	vstr	s15, [r2, #12]
 800dbb0:	edc2 6a02 	vstr	s13, [r2, #8]
 800dbb4:	d017      	beq.n	800dbe6 <arm_cmplx_mult_cmplx_f32+0x18e>
 800dbb6:	edd0 7a04 	vldr	s15, [r0, #16]
 800dbba:	ed91 7a04 	vldr	s14, [r1, #16]
 800dbbe:	edd0 6a05 	vldr	s13, [r0, #20]
 800dbc2:	edd1 5a05 	vldr	s11, [r1, #20]
 800dbc6:	ee27 6a87 	vmul.f32	s12, s15, s14
 800dbca:	ee26 7a87 	vmul.f32	s14, s13, s14
 800dbce:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800dbd2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800dbd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dbda:	ee76 6a66 	vsub.f32	s13, s12, s13
 800dbde:	edc2 7a05 	vstr	s15, [r2, #20]
 800dbe2:	edc2 6a04 	vstr	s13, [r2, #16]
 800dbe6:	bcf0      	pop	{r4, r5, r6, r7}
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop

0800dbec <arm_radix8_butterfly_f32>:
 800dbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf0:	ed2d 8b10 	vpush	{d8-d15}
 800dbf4:	b095      	sub	sp, #84	; 0x54
 800dbf6:	468a      	mov	sl, r1
 800dbf8:	468b      	mov	fp, r1
 800dbfa:	eddf 8abb 	vldr	s17, [pc, #748]	; 800dee8 <arm_radix8_butterfly_f32+0x2fc>
 800dbfe:	9012      	str	r0, [sp, #72]	; 0x48
 800dc00:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800dc04:	4603      	mov	r3, r0
 800dc06:	3304      	adds	r3, #4
 800dc08:	9313      	str	r3, [sp, #76]	; 0x4c
 800dc0a:	ea4f 02db 	mov.w	r2, fp, lsr #3
 800dc0e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800dc10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800dc14:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800dc18:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800dc1c:	920f      	str	r2, [sp, #60]	; 0x3c
 800dc1e:	9303      	str	r3, [sp, #12]
 800dc20:	0153      	lsls	r3, r2, #5
 800dc22:	0114      	lsls	r4, r2, #4
 800dc24:	eba9 0002 	sub.w	r0, r9, r2
 800dc28:	18ce      	adds	r6, r1, r3
 800dc2a:	9302      	str	r3, [sp, #8]
 800dc2c:	0097      	lsls	r7, r2, #2
 800dc2e:	4613      	mov	r3, r2
 800dc30:	eb06 0509 	add.w	r5, r6, r9
 800dc34:	9004      	str	r0, [sp, #16]
 800dc36:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 800dc3a:	1bd2      	subs	r2, r2, r7
 800dc3c:	eb05 0109 	add.w	r1, r5, r9
 800dc40:	441f      	add	r7, r3
 800dc42:	9405      	str	r4, [sp, #20]
 800dc44:	f109 0004 	add.w	r0, r9, #4
 800dc48:	9101      	str	r1, [sp, #4]
 800dc4a:	1d21      	adds	r1, r4, #4
 800dc4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc4e:	f04f 0e00 	mov.w	lr, #0
 800dc52:	9c01      	ldr	r4, [sp, #4]
 800dc54:	4418      	add	r0, r3
 800dc56:	4419      	add	r1, r3
 800dc58:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800dc5c:	9b02      	ldr	r3, [sp, #8]
 800dc5e:	00fc      	lsls	r4, r7, #3
 800dc60:	18d7      	adds	r7, r2, r3
 800dc62:	9b04      	ldr	r3, [sp, #16]
 800dc64:	9406      	str	r4, [sp, #24]
 800dc66:	00db      	lsls	r3, r3, #3
 800dc68:	9c01      	ldr	r4, [sp, #4]
 800dc6a:	9307      	str	r3, [sp, #28]
 800dc6c:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800dc70:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800dc74:	9304      	str	r3, [sp, #16]
 800dc76:	9b03      	ldr	r3, [sp, #12]
 800dc78:	edd6 6a00 	vldr	s13, [r6]
 800dc7c:	44de      	add	lr, fp
 800dc7e:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800dc82:	ed94 7a00 	vldr	s14, [r4]
 800dc86:	45f2      	cmp	sl, lr
 800dc88:	ed10 6a01 	vldr	s12, [r0, #-4]
 800dc8c:	ee37 2aa6 	vadd.f32	s4, s15, s13
 800dc90:	edd5 2a00 	vldr	s5, [r5]
 800dc94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dc98:	edd7 3a00 	vldr	s7, [r7]
 800dc9c:	ed11 5a01 	vldr	s10, [r1, #-4]
 800dca0:	ee36 3a22 	vadd.f32	s6, s12, s5
 800dca4:	edd2 6a00 	vldr	s13, [r2]
 800dca8:	ee75 5a07 	vadd.f32	s11, s10, s14
 800dcac:	ee36 4aa3 	vadd.f32	s8, s13, s7
 800dcb0:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800dcb4:	ee72 4a25 	vadd.f32	s9, s4, s11
 800dcb8:	ee73 3a04 	vadd.f32	s7, s6, s8
 800dcbc:	ee35 5a47 	vsub.f32	s10, s10, s14
 800dcc0:	ee36 7a62 	vsub.f32	s14, s12, s5
 800dcc4:	ee32 2a65 	vsub.f32	s4, s4, s11
 800dcc8:	ee74 5aa3 	vadd.f32	s11, s9, s7
 800dccc:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800dcd0:	ee37 6a66 	vsub.f32	s12, s14, s13
 800dcd4:	ed4c 5a01 	vstr	s11, [ip, #-4]
 800dcd8:	ee33 3a44 	vsub.f32	s6, s6, s8
 800dcdc:	edc6 4a00 	vstr	s9, [r6]
 800dce0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800dce4:	ed97 4a01 	vldr	s8, [r7, #4]
 800dce8:	ee66 6a28 	vmul.f32	s13, s12, s17
 800dcec:	edd0 5a00 	vldr	s11, [r0]
 800dcf0:	ed95 6a01 	vldr	s12, [r5, #4]
 800dcf4:	ee27 7a28 	vmul.f32	s14, s14, s17
 800dcf8:	edd2 3a01 	vldr	s7, [r2, #4]
 800dcfc:	ee77 2aa6 	vadd.f32	s5, s15, s13
 800dd00:	ee75 4ac6 	vsub.f32	s9, s11, s12
 800dd04:	ed96 1a01 	vldr	s2, [r6, #4]
 800dd08:	ee33 0ac4 	vsub.f32	s0, s7, s8
 800dd0c:	edd4 0a01 	vldr	s1, [r4, #4]
 800dd10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dd14:	eddc 6a00 	vldr	s13, [ip]
 800dd18:	ee75 5a86 	vadd.f32	s11, s11, s12
 800dd1c:	ed91 6a00 	vldr	s12, [r1]
 800dd20:	ee73 3a84 	vadd.f32	s7, s7, s8
 800dd24:	ee74 1a80 	vadd.f32	s3, s9, s0
 800dd28:	ee36 4a81 	vadd.f32	s8, s13, s2
 800dd2c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800dd30:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800dd34:	ee36 1a20 	vadd.f32	s2, s12, s1
 800dd38:	ee61 1aa8 	vmul.f32	s3, s3, s17
 800dd3c:	ee36 6a60 	vsub.f32	s12, s12, s1
 800dd40:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800dd44:	ee75 0aa3 	vadd.f32	s1, s11, s7
 800dd48:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800dd4c:	ee74 3a01 	vadd.f32	s7, s8, s2
 800dd50:	ee34 4a41 	vsub.f32	s8, s8, s2
 800dd54:	ee36 1a21 	vadd.f32	s2, s12, s3
 800dd58:	ee33 0aa0 	vadd.f32	s0, s7, s1
 800dd5c:	ee36 6a61 	vsub.f32	s12, s12, s3
 800dd60:	ee73 3ae0 	vsub.f32	s7, s7, s1
 800dd64:	ee76 1aa4 	vadd.f32	s3, s13, s9
 800dd68:	ed8c 0a00 	vstr	s0, [ip]
 800dd6c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800dd70:	449c      	add	ip, r3
 800dd72:	ee75 4a07 	vadd.f32	s9, s10, s14
 800dd76:	edc6 3a01 	vstr	s7, [r6, #4]
 800dd7a:	ee35 7a47 	vsub.f32	s14, s10, s14
 800dd7e:	441e      	add	r6, r3
 800dd80:	ee32 5a25 	vadd.f32	s10, s4, s11
 800dd84:	ee72 5a65 	vsub.f32	s11, s4, s11
 800dd88:	ee72 3a81 	vadd.f32	s7, s5, s2
 800dd8c:	ed01 5a01 	vstr	s10, [r1, #-4]
 800dd90:	ee34 2a43 	vsub.f32	s4, s8, s6
 800dd94:	edc4 5a00 	vstr	s11, [r4]
 800dd98:	ee37 5a86 	vadd.f32	s10, s15, s12
 800dd9c:	ee71 5ae4 	vsub.f32	s11, s3, s9
 800dda0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800dda4:	ed81 2a00 	vstr	s4, [r1]
 800dda8:	ee36 6ac7 	vsub.f32	s12, s13, s14
 800ddac:	4419      	add	r1, r3
 800ddae:	ee33 4a04 	vadd.f32	s8, s6, s8
 800ddb2:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800ddb6:	ee74 4aa1 	vadd.f32	s9, s9, s3
 800ddba:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ddbe:	ed84 4a01 	vstr	s8, [r4, #4]
 800ddc2:	ed40 3a01 	vstr	s7, [r0, #-4]
 800ddc6:	441c      	add	r4, r3
 800ddc8:	edc7 2a00 	vstr	s5, [r7]
 800ddcc:	ed85 5a00 	vstr	s10, [r5]
 800ddd0:	edc2 7a00 	vstr	s15, [r2]
 800ddd4:	edc0 5a00 	vstr	s11, [r0]
 800ddd8:	4418      	add	r0, r3
 800ddda:	edc7 4a01 	vstr	s9, [r7, #4]
 800ddde:	441f      	add	r7, r3
 800dde0:	ed85 6a01 	vstr	s12, [r5, #4]
 800dde4:	441d      	add	r5, r3
 800dde6:	ed82 7a01 	vstr	s14, [r2, #4]
 800ddea:	441a      	add	r2, r3
 800ddec:	f63f af44 	bhi.w	800dc78 <arm_radix8_butterfly_f32+0x8c>
 800ddf0:	469c      	mov	ip, r3
 800ddf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ddf4:	2b07      	cmp	r3, #7
 800ddf6:	f240 81b6 	bls.w	800e166 <arm_radix8_butterfly_f32+0x57a>
 800ddfa:	9a02      	ldr	r2, [sp, #8]
 800ddfc:	f109 0608 	add.w	r6, r9, #8
 800de00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de02:	f108 0408 	add.w	r4, r8, #8
 800de06:	3208      	adds	r2, #8
 800de08:	9f06      	ldr	r7, [sp, #24]
 800de0a:	9d04      	ldr	r5, [sp, #16]
 800de0c:	189a      	adds	r2, r3, r2
 800de0e:	3708      	adds	r7, #8
 800de10:	3508      	adds	r5, #8
 800de12:	9807      	ldr	r0, [sp, #28]
 800de14:	920c      	str	r2, [sp, #48]	; 0x30
 800de16:	199a      	adds	r2, r3, r6
 800de18:	9905      	ldr	r1, [sp, #20]
 800de1a:	3008      	adds	r0, #8
 800de1c:	920b      	str	r2, [sp, #44]	; 0x2c
 800de1e:	19da      	adds	r2, r3, r7
 800de20:	310c      	adds	r1, #12
 800de22:	920a      	str	r2, [sp, #40]	; 0x28
 800de24:	195a      	adds	r2, r3, r5
 800de26:	9209      	str	r2, [sp, #36]	; 0x24
 800de28:	191a      	adds	r2, r3, r4
 800de2a:	9208      	str	r2, [sp, #32]
 800de2c:	181a      	adds	r2, r3, r0
 800de2e:	9207      	str	r2, [sp, #28]
 800de30:	185a      	adds	r2, r3, r1
 800de32:	330c      	adds	r3, #12
 800de34:	9205      	str	r2, [sp, #20]
 800de36:	9306      	str	r3, [sp, #24]
 800de38:	2301      	movs	r3, #1
 800de3a:	9304      	str	r3, [sp, #16]
 800de3c:	2300      	movs	r3, #0
 800de3e:	930d      	str	r3, [sp, #52]	; 0x34
 800de40:	4663      	mov	r3, ip
 800de42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de44:	9910      	ldr	r1, [sp, #64]	; 0x40
 800de46:	f8dd c014 	ldr.w	ip, [sp, #20]
 800de4a:	440a      	add	r2, r1
 800de4c:	9f06      	ldr	r7, [sp, #24]
 800de4e:	9e07      	ldr	r6, [sp, #28]
 800de50:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800de54:	920d      	str	r2, [sp, #52]	; 0x34
 800de56:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 800de5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800de5c:	9d08      	ldr	r5, [sp, #32]
 800de5e:	4442      	add	r2, r8
 800de60:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800de62:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de64:	eb02 0108 	add.w	r1, r2, r8
 800de68:	ed92 ea00 	vldr	s28, [r2]
 800de6c:	eb01 0208 	add.w	r2, r1, r8
 800de70:	edd1 da00 	vldr	s27, [r1]
 800de74:	eb02 0108 	add.w	r1, r2, r8
 800de78:	ed92 da00 	vldr	s26, [r2]
 800de7c:	eb01 0208 	add.w	r2, r1, r8
 800de80:	edd1 ca00 	vldr	s25, [r1]
 800de84:	eb02 0108 	add.w	r1, r2, r8
 800de88:	ed92 ca00 	vldr	s24, [r2]
 800de8c:	eb01 0208 	add.w	r2, r1, r8
 800de90:	edd1 ba00 	vldr	s23, [r1]
 800de94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de96:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 800de9a:	ed92 ba00 	vldr	s22, [r2]
 800de9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dea0:	eb0e 0908 	add.w	r9, lr, r8
 800dea4:	910e      	str	r1, [sp, #56]	; 0x38
 800dea6:	9201      	str	r2, [sp, #4]
 800dea8:	eb09 0208 	add.w	r2, r9, r8
 800deac:	ed99 aa01 	vldr	s20, [r9, #4]
 800deb0:	edde aa01 	vldr	s21, [lr, #4]
 800deb4:	eb02 0908 	add.w	r9, r2, r8
 800deb8:	edd2 9a01 	vldr	s19, [r2, #4]
 800debc:	f8dd e010 	ldr.w	lr, [sp, #16]
 800dec0:	eb09 0208 	add.w	r2, r9, r8
 800dec4:	ed99 9a01 	vldr	s18, [r9, #4]
 800dec8:	eb02 0908 	add.w	r9, r2, r8
 800decc:	ed92 8a01 	vldr	s16, [r2, #4]
 800ded0:	9a01      	ldr	r2, [sp, #4]
 800ded2:	edd9 7a01 	vldr	s15, [r9, #4]
 800ded6:	44c8      	add	r8, r9
 800ded8:	edcd 7a02 	vstr	s15, [sp, #8]
 800dedc:	edd8 7a01 	vldr	s15, [r8, #4]
 800dee0:	edcd 7a03 	vstr	s15, [sp, #12]
 800dee4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dee6:	e001      	b.n	800deec <arm_radix8_butterfly_f32+0x300>
 800dee8:	3f3504f3 	.word	0x3f3504f3
 800deec:	ed92 7a00 	vldr	s14, [r2]
 800def0:	44de      	add	lr, fp
 800def2:	ed17 1a01 	vldr	s2, [r7, #-4]
 800def6:	ed90 5a00 	vldr	s10, [r0]
 800defa:	45f2      	cmp	sl, lr
 800defc:	ed1c fa01 	vldr	s30, [ip, #-4]
 800df00:	ee31 3a07 	vadd.f32	s6, s2, s14
 800df04:	edd6 5a00 	vldr	s11, [r6]
 800df08:	ee31 1a47 	vsub.f32	s2, s2, s14
 800df0c:	edd4 7a00 	vldr	s15, [r4]
 800df10:	ed95 7a00 	vldr	s14, [r5]
 800df14:	ed91 4a00 	vldr	s8, [r1]
 800df18:	ee3f 6a27 	vadd.f32	s12, s30, s15
 800df1c:	ee77 6a25 	vadd.f32	s13, s14, s11
 800df20:	edd7 ea00 	vldr	s29, [r7]
 800df24:	ee74 fa05 	vadd.f32	s31, s8, s10
 800df28:	ee73 1a06 	vadd.f32	s3, s6, s12
 800df2c:	ee34 4a45 	vsub.f32	s8, s8, s10
 800df30:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 800df34:	ee37 7a65 	vsub.f32	s14, s14, s11
 800df38:	ee33 3a46 	vsub.f32	s6, s6, s12
 800df3c:	ee31 6a85 	vadd.f32	s12, s3, s10
 800df40:	ee7f 7a67 	vsub.f32	s15, s30, s15
 800df44:	ee34 fa07 	vadd.f32	s30, s8, s14
 800df48:	ed07 6a01 	vstr	s12, [r7, #-4]
 800df4c:	ee34 4a47 	vsub.f32	s8, s8, s14
 800df50:	edd5 3a01 	vldr	s7, [r5, #4]
 800df54:	ee7f fae6 	vsub.f32	s31, s31, s13
 800df58:	ed90 7a01 	vldr	s14, [r0, #4]
 800df5c:	ee2f fa28 	vmul.f32	s30, s30, s17
 800df60:	edd1 5a01 	vldr	s11, [r1, #4]
 800df64:	ee24 4a28 	vmul.f32	s8, s8, s17
 800df68:	ed96 6a01 	vldr	s12, [r6, #4]
 800df6c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800df70:	ee75 0ac7 	vsub.f32	s1, s11, s14
 800df74:	edd2 6a01 	vldr	s13, [r2, #4]
 800df78:	ee73 2ac6 	vsub.f32	s5, s7, s12
 800df7c:	edd4 4a01 	vldr	s9, [r4, #4]
 800df80:	ee75 5a87 	vadd.f32	s11, s11, s14
 800df84:	ed9c 7a00 	vldr	s14, [ip]
 800df88:	ee37 2a8f 	vadd.f32	s4, s15, s30
 800df8c:	ee33 6a86 	vadd.f32	s12, s7, s12
 800df90:	ee37 facf 	vsub.f32	s30, s15, s30
 800df94:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 800df98:	ee70 7ae2 	vsub.f32	s15, s1, s5
 800df9c:	ee7e eae6 	vsub.f32	s29, s29, s13
 800dfa0:	ee70 2aa2 	vadd.f32	s5, s1, s5
 800dfa4:	ee77 6a24 	vadd.f32	s13, s14, s9
 800dfa8:	ee75 0a86 	vadd.f32	s1, s11, s12
 800dfac:	ee37 7a64 	vsub.f32	s14, s14, s9
 800dfb0:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800dfb4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800dfb8:	ee62 2aa8 	vmul.f32	s5, s5, s17
 800dfbc:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800dfc0:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800dfc4:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 800dfc8:	ee77 4a22 	vadd.f32	s9, s14, s5
 800dfcc:	ee7e eae7 	vsub.f32	s29, s29, s15
 800dfd0:	ee77 7a62 	vsub.f32	s15, s14, s5
 800dfd4:	ee71 2a04 	vadd.f32	s5, s2, s8
 800dfd8:	ee31 7a44 	vsub.f32	s14, s2, s8
 800dfdc:	ee30 1a60 	vsub.f32	s2, s0, s1
 800dfe0:	ee73 1a06 	vadd.f32	s3, s6, s12
 800dfe4:	ee33 6a46 	vsub.f32	s12, s6, s12
 800dfe8:	ee33 3aef 	vsub.f32	s6, s7, s31
 800dfec:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 800dff0:	ee3e 4acf 	vsub.f32	s8, s29, s30
 800dff4:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800dff8:	ee72 5a25 	vadd.f32	s11, s4, s11
 800dffc:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800e000:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800e004:	ee77 2a27 	vadd.f32	s5, s14, s15
 800e008:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e00c:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 800e010:	ee2c fa85 	vmul.f32	s30, s25, s10
 800e014:	ee69 ea01 	vmul.f32	s29, s18, s2
 800e018:	ee29 5a05 	vmul.f32	s10, s18, s10
 800e01c:	ee2c 1a81 	vmul.f32	s2, s25, s2
 800e020:	ee6d faa1 	vmul.f32	s31, s27, s3
 800e024:	ee70 0a20 	vadd.f32	s1, s0, s1
 800e028:	ee6a 1a21 	vmul.f32	s3, s20, s3
 800e02c:	ee2a 0a03 	vmul.f32	s0, s20, s6
 800e030:	ee2d 3a83 	vmul.f32	s6, s27, s6
 800e034:	edc7 0a00 	vstr	s1, [r7]
 800e038:	ee7f ea2e 	vadd.f32	s29, s30, s29
 800e03c:	441f      	add	r7, r3
 800e03e:	ee2a faa3 	vmul.f32	s30, s21, s7
 800e042:	ee31 5a45 	vsub.f32	s10, s2, s10
 800e046:	ee6e 3a23 	vmul.f32	s7, s28, s7
 800e04a:	edc2 ea00 	vstr	s29, [r2]
 800e04e:	ee3f 0a80 	vadd.f32	s0, s31, s0
 800e052:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e056:	ed82 5a01 	vstr	s10, [r2, #4]
 800e05a:	ee6e 0a02 	vmul.f32	s1, s28, s4
 800e05e:	edcd 3a01 	vstr	s7, [sp, #4]
 800e062:	ed9d 5a03 	vldr	s10, [sp, #12]
 800e066:	ee6b ea86 	vmul.f32	s29, s23, s12
 800e06a:	eddd 3a02 	vldr	s7, [sp, #8]
 800e06e:	ee6b fa24 	vmul.f32	s31, s22, s9
 800e072:	ed0c 0a01 	vstr	s0, [ip, #-4]
 800e076:	ee65 4a24 	vmul.f32	s9, s10, s9
 800e07a:	ed8c 3a00 	vstr	s6, [ip]
 800e07e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800e082:	ee23 6a86 	vmul.f32	s12, s7, s12
 800e086:	eddd 3a01 	vldr	s7, [sp, #4]
 800e08a:	ee25 5a25 	vmul.f32	s10, s10, s11
 800e08e:	441a      	add	r2, r3
 800e090:	ee2c 0a22 	vmul.f32	s0, s24, s5
 800e094:	449c      	add	ip, r3
 800e096:	ee68 1a04 	vmul.f32	s3, s16, s8
 800e09a:	ee70 0a8f 	vadd.f32	s1, s1, s30
 800e09e:	ee2d 3a07 	vmul.f32	s6, s26, s14
 800e0a2:	ee29 faa7 	vmul.f32	s30, s19, s15
 800e0a6:	ee2a 2a82 	vmul.f32	s4, s21, s4
 800e0aa:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 800e0ae:	ee6b 5a25 	vmul.f32	s11, s22, s11
 800e0b2:	ee68 2a22 	vmul.f32	s5, s16, s5
 800e0b6:	ee2c 4a04 	vmul.f32	s8, s24, s8
 800e0ba:	ee29 7a87 	vmul.f32	s14, s19, s14
 800e0be:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800e0c2:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800e0c6:	ee7e ea81 	vadd.f32	s29, s29, s2
 800e0ca:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800e0ce:	ee3f 5a85 	vadd.f32	s10, s31, s10
 800e0d2:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800e0d6:	edc4 ea00 	vstr	s29, [r4]
 800e0da:	ee30 0a21 	vadd.f32	s0, s0, s3
 800e0de:	ed84 6a01 	vstr	s12, [r4, #4]
 800e0e2:	ee74 2a62 	vsub.f32	s5, s8, s5
 800e0e6:	edc1 0a00 	vstr	s1, [r1]
 800e0ea:	ee33 3a0f 	vadd.f32	s6, s6, s30
 800e0ee:	edc1 3a01 	vstr	s7, [r1, #4]
 800e0f2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e0f6:	ed86 5a00 	vstr	s10, [r6]
 800e0fa:	edc6 4a01 	vstr	s9, [r6, #4]
 800e0fe:	4419      	add	r1, r3
 800e100:	ed80 0a00 	vstr	s0, [r0]
 800e104:	441c      	add	r4, r3
 800e106:	edc0 2a01 	vstr	s5, [r0, #4]
 800e10a:	441e      	add	r6, r3
 800e10c:	ed85 3a00 	vstr	s6, [r5]
 800e110:	4418      	add	r0, r3
 800e112:	ed85 7a01 	vstr	s14, [r5, #4]
 800e116:	441d      	add	r5, r3
 800e118:	f63f aee8 	bhi.w	800deec <arm_radix8_butterfly_f32+0x300>
 800e11c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e11e:	9a04      	ldr	r2, [sp, #16]
 800e120:	3108      	adds	r1, #8
 800e122:	3201      	adds	r2, #1
 800e124:	910c      	str	r1, [sp, #48]	; 0x30
 800e126:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e128:	9204      	str	r2, [sp, #16]
 800e12a:	3108      	adds	r1, #8
 800e12c:	910b      	str	r1, [sp, #44]	; 0x2c
 800e12e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e130:	3108      	adds	r1, #8
 800e132:	910a      	str	r1, [sp, #40]	; 0x28
 800e134:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e136:	3108      	adds	r1, #8
 800e138:	9109      	str	r1, [sp, #36]	; 0x24
 800e13a:	9908      	ldr	r1, [sp, #32]
 800e13c:	3108      	adds	r1, #8
 800e13e:	9108      	str	r1, [sp, #32]
 800e140:	9907      	ldr	r1, [sp, #28]
 800e142:	3108      	adds	r1, #8
 800e144:	9107      	str	r1, [sp, #28]
 800e146:	9906      	ldr	r1, [sp, #24]
 800e148:	3108      	adds	r1, #8
 800e14a:	9106      	str	r1, [sp, #24]
 800e14c:	9905      	ldr	r1, [sp, #20]
 800e14e:	3108      	adds	r1, #8
 800e150:	9105      	str	r1, [sp, #20]
 800e152:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e154:	4291      	cmp	r1, r2
 800e156:	f47f ae74 	bne.w	800de42 <arm_radix8_butterfly_f32+0x256>
 800e15a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e15c:	468b      	mov	fp, r1
 800e15e:	00db      	lsls	r3, r3, #3
 800e160:	b29b      	uxth	r3, r3
 800e162:	9310      	str	r3, [sp, #64]	; 0x40
 800e164:	e551      	b.n	800dc0a <arm_radix8_butterfly_f32+0x1e>
 800e166:	b015      	add	sp, #84	; 0x54
 800e168:	ecbd 8b10 	vpop	{d8-d15}
 800e16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e170 <__errno>:
 800e170:	4b01      	ldr	r3, [pc, #4]	; (800e178 <__errno+0x8>)
 800e172:	6818      	ldr	r0, [r3, #0]
 800e174:	4770      	bx	lr
 800e176:	bf00      	nop
 800e178:	2400040c 	.word	0x2400040c

0800e17c <__libc_init_array>:
 800e17c:	b570      	push	{r4, r5, r6, lr}
 800e17e:	4d0d      	ldr	r5, [pc, #52]	; (800e1b4 <__libc_init_array+0x38>)
 800e180:	4c0d      	ldr	r4, [pc, #52]	; (800e1b8 <__libc_init_array+0x3c>)
 800e182:	1b64      	subs	r4, r4, r5
 800e184:	10a4      	asrs	r4, r4, #2
 800e186:	2600      	movs	r6, #0
 800e188:	42a6      	cmp	r6, r4
 800e18a:	d109      	bne.n	800e1a0 <__libc_init_array+0x24>
 800e18c:	4d0b      	ldr	r5, [pc, #44]	; (800e1bc <__libc_init_array+0x40>)
 800e18e:	4c0c      	ldr	r4, [pc, #48]	; (800e1c0 <__libc_init_array+0x44>)
 800e190:	f003 ff88 	bl	80120a4 <_init>
 800e194:	1b64      	subs	r4, r4, r5
 800e196:	10a4      	asrs	r4, r4, #2
 800e198:	2600      	movs	r6, #0
 800e19a:	42a6      	cmp	r6, r4
 800e19c:	d105      	bne.n	800e1aa <__libc_init_array+0x2e>
 800e19e:	bd70      	pop	{r4, r5, r6, pc}
 800e1a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1a4:	4798      	blx	r3
 800e1a6:	3601      	adds	r6, #1
 800e1a8:	e7ee      	b.n	800e188 <__libc_init_array+0xc>
 800e1aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1ae:	4798      	blx	r3
 800e1b0:	3601      	adds	r6, #1
 800e1b2:	e7f2      	b.n	800e19a <__libc_init_array+0x1e>
 800e1b4:	0801c820 	.word	0x0801c820
 800e1b8:	0801c820 	.word	0x0801c820
 800e1bc:	0801c820 	.word	0x0801c820
 800e1c0:	0801c824 	.word	0x0801c824

0800e1c4 <memcpy>:
 800e1c4:	440a      	add	r2, r1
 800e1c6:	4291      	cmp	r1, r2
 800e1c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e1cc:	d100      	bne.n	800e1d0 <memcpy+0xc>
 800e1ce:	4770      	bx	lr
 800e1d0:	b510      	push	{r4, lr}
 800e1d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1da:	4291      	cmp	r1, r2
 800e1dc:	d1f9      	bne.n	800e1d2 <memcpy+0xe>
 800e1de:	bd10      	pop	{r4, pc}

0800e1e0 <memset>:
 800e1e0:	4402      	add	r2, r0
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d100      	bne.n	800e1ea <memset+0xa>
 800e1e8:	4770      	bx	lr
 800e1ea:	f803 1b01 	strb.w	r1, [r3], #1
 800e1ee:	e7f9      	b.n	800e1e4 <memset+0x4>

0800e1f0 <__cvt>:
 800e1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1f2:	ed2d 8b02 	vpush	{d8}
 800e1f6:	eeb0 8b40 	vmov.f64	d8, d0
 800e1fa:	b085      	sub	sp, #20
 800e1fc:	4617      	mov	r7, r2
 800e1fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e200:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e202:	ee18 2a90 	vmov	r2, s17
 800e206:	f025 0520 	bic.w	r5, r5, #32
 800e20a:	2a00      	cmp	r2, #0
 800e20c:	bfb6      	itet	lt
 800e20e:	222d      	movlt	r2, #45	; 0x2d
 800e210:	2200      	movge	r2, #0
 800e212:	eeb1 8b40 	vneglt.f64	d8, d0
 800e216:	2d46      	cmp	r5, #70	; 0x46
 800e218:	460c      	mov	r4, r1
 800e21a:	701a      	strb	r2, [r3, #0]
 800e21c:	d004      	beq.n	800e228 <__cvt+0x38>
 800e21e:	2d45      	cmp	r5, #69	; 0x45
 800e220:	d100      	bne.n	800e224 <__cvt+0x34>
 800e222:	3401      	adds	r4, #1
 800e224:	2102      	movs	r1, #2
 800e226:	e000      	b.n	800e22a <__cvt+0x3a>
 800e228:	2103      	movs	r1, #3
 800e22a:	ab03      	add	r3, sp, #12
 800e22c:	9301      	str	r3, [sp, #4]
 800e22e:	ab02      	add	r3, sp, #8
 800e230:	9300      	str	r3, [sp, #0]
 800e232:	4622      	mov	r2, r4
 800e234:	4633      	mov	r3, r6
 800e236:	eeb0 0b48 	vmov.f64	d0, d8
 800e23a:	f000 fcd1 	bl	800ebe0 <_dtoa_r>
 800e23e:	2d47      	cmp	r5, #71	; 0x47
 800e240:	d109      	bne.n	800e256 <__cvt+0x66>
 800e242:	07fb      	lsls	r3, r7, #31
 800e244:	d407      	bmi.n	800e256 <__cvt+0x66>
 800e246:	9b03      	ldr	r3, [sp, #12]
 800e248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e24a:	1a1b      	subs	r3, r3, r0
 800e24c:	6013      	str	r3, [r2, #0]
 800e24e:	b005      	add	sp, #20
 800e250:	ecbd 8b02 	vpop	{d8}
 800e254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e256:	2d46      	cmp	r5, #70	; 0x46
 800e258:	eb00 0204 	add.w	r2, r0, r4
 800e25c:	d10c      	bne.n	800e278 <__cvt+0x88>
 800e25e:	7803      	ldrb	r3, [r0, #0]
 800e260:	2b30      	cmp	r3, #48	; 0x30
 800e262:	d107      	bne.n	800e274 <__cvt+0x84>
 800e264:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e26c:	bf1c      	itt	ne
 800e26e:	f1c4 0401 	rsbne	r4, r4, #1
 800e272:	6034      	strne	r4, [r6, #0]
 800e274:	6833      	ldr	r3, [r6, #0]
 800e276:	441a      	add	r2, r3
 800e278:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e280:	bf08      	it	eq
 800e282:	9203      	streq	r2, [sp, #12]
 800e284:	2130      	movs	r1, #48	; 0x30
 800e286:	9b03      	ldr	r3, [sp, #12]
 800e288:	4293      	cmp	r3, r2
 800e28a:	d2dc      	bcs.n	800e246 <__cvt+0x56>
 800e28c:	1c5c      	adds	r4, r3, #1
 800e28e:	9403      	str	r4, [sp, #12]
 800e290:	7019      	strb	r1, [r3, #0]
 800e292:	e7f8      	b.n	800e286 <__cvt+0x96>

0800e294 <__exponent>:
 800e294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e296:	4603      	mov	r3, r0
 800e298:	2900      	cmp	r1, #0
 800e29a:	bfb8      	it	lt
 800e29c:	4249      	neglt	r1, r1
 800e29e:	f803 2b02 	strb.w	r2, [r3], #2
 800e2a2:	bfb4      	ite	lt
 800e2a4:	222d      	movlt	r2, #45	; 0x2d
 800e2a6:	222b      	movge	r2, #43	; 0x2b
 800e2a8:	2909      	cmp	r1, #9
 800e2aa:	7042      	strb	r2, [r0, #1]
 800e2ac:	dd2a      	ble.n	800e304 <__exponent+0x70>
 800e2ae:	f10d 0407 	add.w	r4, sp, #7
 800e2b2:	46a4      	mov	ip, r4
 800e2b4:	270a      	movs	r7, #10
 800e2b6:	46a6      	mov	lr, r4
 800e2b8:	460a      	mov	r2, r1
 800e2ba:	fb91 f6f7 	sdiv	r6, r1, r7
 800e2be:	fb07 1516 	mls	r5, r7, r6, r1
 800e2c2:	3530      	adds	r5, #48	; 0x30
 800e2c4:	2a63      	cmp	r2, #99	; 0x63
 800e2c6:	f104 34ff 	add.w	r4, r4, #4294967295
 800e2ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e2ce:	4631      	mov	r1, r6
 800e2d0:	dcf1      	bgt.n	800e2b6 <__exponent+0x22>
 800e2d2:	3130      	adds	r1, #48	; 0x30
 800e2d4:	f1ae 0502 	sub.w	r5, lr, #2
 800e2d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e2dc:	1c44      	adds	r4, r0, #1
 800e2de:	4629      	mov	r1, r5
 800e2e0:	4561      	cmp	r1, ip
 800e2e2:	d30a      	bcc.n	800e2fa <__exponent+0x66>
 800e2e4:	f10d 0209 	add.w	r2, sp, #9
 800e2e8:	eba2 020e 	sub.w	r2, r2, lr
 800e2ec:	4565      	cmp	r5, ip
 800e2ee:	bf88      	it	hi
 800e2f0:	2200      	movhi	r2, #0
 800e2f2:	4413      	add	r3, r2
 800e2f4:	1a18      	subs	r0, r3, r0
 800e2f6:	b003      	add	sp, #12
 800e2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e302:	e7ed      	b.n	800e2e0 <__exponent+0x4c>
 800e304:	2330      	movs	r3, #48	; 0x30
 800e306:	3130      	adds	r1, #48	; 0x30
 800e308:	7083      	strb	r3, [r0, #2]
 800e30a:	70c1      	strb	r1, [r0, #3]
 800e30c:	1d03      	adds	r3, r0, #4
 800e30e:	e7f1      	b.n	800e2f4 <__exponent+0x60>

0800e310 <_printf_float>:
 800e310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e314:	b08b      	sub	sp, #44	; 0x2c
 800e316:	460c      	mov	r4, r1
 800e318:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e31c:	4616      	mov	r6, r2
 800e31e:	461f      	mov	r7, r3
 800e320:	4605      	mov	r5, r0
 800e322:	f001 f9df 	bl	800f6e4 <_localeconv_r>
 800e326:	f8d0 b000 	ldr.w	fp, [r0]
 800e32a:	4658      	mov	r0, fp
 800e32c:	f7f1 ffd8 	bl	80002e0 <strlen>
 800e330:	2300      	movs	r3, #0
 800e332:	9308      	str	r3, [sp, #32]
 800e334:	f8d8 3000 	ldr.w	r3, [r8]
 800e338:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e33c:	6822      	ldr	r2, [r4, #0]
 800e33e:	3307      	adds	r3, #7
 800e340:	f023 0307 	bic.w	r3, r3, #7
 800e344:	f103 0108 	add.w	r1, r3, #8
 800e348:	f8c8 1000 	str.w	r1, [r8]
 800e34c:	4682      	mov	sl, r0
 800e34e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e352:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e356:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800e5b8 <_printf_float+0x2a8>
 800e35a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800e35e:	eeb0 6bc0 	vabs.f64	d6, d0
 800e362:	eeb4 6b47 	vcmp.f64	d6, d7
 800e366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e36a:	dd24      	ble.n	800e3b6 <_printf_float+0xa6>
 800e36c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e374:	d502      	bpl.n	800e37c <_printf_float+0x6c>
 800e376:	232d      	movs	r3, #45	; 0x2d
 800e378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e37c:	4b90      	ldr	r3, [pc, #576]	; (800e5c0 <_printf_float+0x2b0>)
 800e37e:	4891      	ldr	r0, [pc, #580]	; (800e5c4 <_printf_float+0x2b4>)
 800e380:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e384:	bf94      	ite	ls
 800e386:	4698      	movls	r8, r3
 800e388:	4680      	movhi	r8, r0
 800e38a:	2303      	movs	r3, #3
 800e38c:	6123      	str	r3, [r4, #16]
 800e38e:	f022 0204 	bic.w	r2, r2, #4
 800e392:	2300      	movs	r3, #0
 800e394:	6022      	str	r2, [r4, #0]
 800e396:	9304      	str	r3, [sp, #16]
 800e398:	9700      	str	r7, [sp, #0]
 800e39a:	4633      	mov	r3, r6
 800e39c:	aa09      	add	r2, sp, #36	; 0x24
 800e39e:	4621      	mov	r1, r4
 800e3a0:	4628      	mov	r0, r5
 800e3a2:	f000 f9d3 	bl	800e74c <_printf_common>
 800e3a6:	3001      	adds	r0, #1
 800e3a8:	f040 808a 	bne.w	800e4c0 <_printf_float+0x1b0>
 800e3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e3b0:	b00b      	add	sp, #44	; 0x2c
 800e3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b6:	eeb4 0b40 	vcmp.f64	d0, d0
 800e3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3be:	d709      	bvc.n	800e3d4 <_printf_float+0xc4>
 800e3c0:	ee10 3a90 	vmov	r3, s1
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	bfbc      	itt	lt
 800e3c8:	232d      	movlt	r3, #45	; 0x2d
 800e3ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e3ce:	487e      	ldr	r0, [pc, #504]	; (800e5c8 <_printf_float+0x2b8>)
 800e3d0:	4b7e      	ldr	r3, [pc, #504]	; (800e5cc <_printf_float+0x2bc>)
 800e3d2:	e7d5      	b.n	800e380 <_printf_float+0x70>
 800e3d4:	6863      	ldr	r3, [r4, #4]
 800e3d6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e3da:	9104      	str	r1, [sp, #16]
 800e3dc:	1c59      	adds	r1, r3, #1
 800e3de:	d13c      	bne.n	800e45a <_printf_float+0x14a>
 800e3e0:	2306      	movs	r3, #6
 800e3e2:	6063      	str	r3, [r4, #4]
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	9303      	str	r3, [sp, #12]
 800e3e8:	ab08      	add	r3, sp, #32
 800e3ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e3ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e3f2:	ab07      	add	r3, sp, #28
 800e3f4:	6861      	ldr	r1, [r4, #4]
 800e3f6:	9300      	str	r3, [sp, #0]
 800e3f8:	6022      	str	r2, [r4, #0]
 800e3fa:	f10d 031b 	add.w	r3, sp, #27
 800e3fe:	4628      	mov	r0, r5
 800e400:	f7ff fef6 	bl	800e1f0 <__cvt>
 800e404:	9b04      	ldr	r3, [sp, #16]
 800e406:	9907      	ldr	r1, [sp, #28]
 800e408:	2b47      	cmp	r3, #71	; 0x47
 800e40a:	4680      	mov	r8, r0
 800e40c:	d108      	bne.n	800e420 <_printf_float+0x110>
 800e40e:	1cc8      	adds	r0, r1, #3
 800e410:	db02      	blt.n	800e418 <_printf_float+0x108>
 800e412:	6863      	ldr	r3, [r4, #4]
 800e414:	4299      	cmp	r1, r3
 800e416:	dd41      	ble.n	800e49c <_printf_float+0x18c>
 800e418:	f1a9 0902 	sub.w	r9, r9, #2
 800e41c:	fa5f f989 	uxtb.w	r9, r9
 800e420:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e424:	d820      	bhi.n	800e468 <_printf_float+0x158>
 800e426:	3901      	subs	r1, #1
 800e428:	464a      	mov	r2, r9
 800e42a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e42e:	9107      	str	r1, [sp, #28]
 800e430:	f7ff ff30 	bl	800e294 <__exponent>
 800e434:	9a08      	ldr	r2, [sp, #32]
 800e436:	9004      	str	r0, [sp, #16]
 800e438:	1813      	adds	r3, r2, r0
 800e43a:	2a01      	cmp	r2, #1
 800e43c:	6123      	str	r3, [r4, #16]
 800e43e:	dc02      	bgt.n	800e446 <_printf_float+0x136>
 800e440:	6822      	ldr	r2, [r4, #0]
 800e442:	07d2      	lsls	r2, r2, #31
 800e444:	d501      	bpl.n	800e44a <_printf_float+0x13a>
 800e446:	3301      	adds	r3, #1
 800e448:	6123      	str	r3, [r4, #16]
 800e44a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d0a2      	beq.n	800e398 <_printf_float+0x88>
 800e452:	232d      	movs	r3, #45	; 0x2d
 800e454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e458:	e79e      	b.n	800e398 <_printf_float+0x88>
 800e45a:	9904      	ldr	r1, [sp, #16]
 800e45c:	2947      	cmp	r1, #71	; 0x47
 800e45e:	d1c1      	bne.n	800e3e4 <_printf_float+0xd4>
 800e460:	2b00      	cmp	r3, #0
 800e462:	d1bf      	bne.n	800e3e4 <_printf_float+0xd4>
 800e464:	2301      	movs	r3, #1
 800e466:	e7bc      	b.n	800e3e2 <_printf_float+0xd2>
 800e468:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e46c:	d118      	bne.n	800e4a0 <_printf_float+0x190>
 800e46e:	2900      	cmp	r1, #0
 800e470:	6863      	ldr	r3, [r4, #4]
 800e472:	dd0b      	ble.n	800e48c <_printf_float+0x17c>
 800e474:	6121      	str	r1, [r4, #16]
 800e476:	b913      	cbnz	r3, 800e47e <_printf_float+0x16e>
 800e478:	6822      	ldr	r2, [r4, #0]
 800e47a:	07d0      	lsls	r0, r2, #31
 800e47c:	d502      	bpl.n	800e484 <_printf_float+0x174>
 800e47e:	3301      	adds	r3, #1
 800e480:	440b      	add	r3, r1
 800e482:	6123      	str	r3, [r4, #16]
 800e484:	2300      	movs	r3, #0
 800e486:	65a1      	str	r1, [r4, #88]	; 0x58
 800e488:	9304      	str	r3, [sp, #16]
 800e48a:	e7de      	b.n	800e44a <_printf_float+0x13a>
 800e48c:	b913      	cbnz	r3, 800e494 <_printf_float+0x184>
 800e48e:	6822      	ldr	r2, [r4, #0]
 800e490:	07d2      	lsls	r2, r2, #31
 800e492:	d501      	bpl.n	800e498 <_printf_float+0x188>
 800e494:	3302      	adds	r3, #2
 800e496:	e7f4      	b.n	800e482 <_printf_float+0x172>
 800e498:	2301      	movs	r3, #1
 800e49a:	e7f2      	b.n	800e482 <_printf_float+0x172>
 800e49c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e4a0:	9b08      	ldr	r3, [sp, #32]
 800e4a2:	4299      	cmp	r1, r3
 800e4a4:	db05      	blt.n	800e4b2 <_printf_float+0x1a2>
 800e4a6:	6823      	ldr	r3, [r4, #0]
 800e4a8:	6121      	str	r1, [r4, #16]
 800e4aa:	07d8      	lsls	r0, r3, #31
 800e4ac:	d5ea      	bpl.n	800e484 <_printf_float+0x174>
 800e4ae:	1c4b      	adds	r3, r1, #1
 800e4b0:	e7e7      	b.n	800e482 <_printf_float+0x172>
 800e4b2:	2900      	cmp	r1, #0
 800e4b4:	bfd4      	ite	le
 800e4b6:	f1c1 0202 	rsble	r2, r1, #2
 800e4ba:	2201      	movgt	r2, #1
 800e4bc:	4413      	add	r3, r2
 800e4be:	e7e0      	b.n	800e482 <_printf_float+0x172>
 800e4c0:	6823      	ldr	r3, [r4, #0]
 800e4c2:	055a      	lsls	r2, r3, #21
 800e4c4:	d407      	bmi.n	800e4d6 <_printf_float+0x1c6>
 800e4c6:	6923      	ldr	r3, [r4, #16]
 800e4c8:	4642      	mov	r2, r8
 800e4ca:	4631      	mov	r1, r6
 800e4cc:	4628      	mov	r0, r5
 800e4ce:	47b8      	blx	r7
 800e4d0:	3001      	adds	r0, #1
 800e4d2:	d12a      	bne.n	800e52a <_printf_float+0x21a>
 800e4d4:	e76a      	b.n	800e3ac <_printf_float+0x9c>
 800e4d6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e4da:	f240 80e2 	bls.w	800e6a2 <_printf_float+0x392>
 800e4de:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e4e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ea:	d133      	bne.n	800e554 <_printf_float+0x244>
 800e4ec:	4a38      	ldr	r2, [pc, #224]	; (800e5d0 <_printf_float+0x2c0>)
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	4631      	mov	r1, r6
 800e4f2:	4628      	mov	r0, r5
 800e4f4:	47b8      	blx	r7
 800e4f6:	3001      	adds	r0, #1
 800e4f8:	f43f af58 	beq.w	800e3ac <_printf_float+0x9c>
 800e4fc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e500:	429a      	cmp	r2, r3
 800e502:	db02      	blt.n	800e50a <_printf_float+0x1fa>
 800e504:	6823      	ldr	r3, [r4, #0]
 800e506:	07d8      	lsls	r0, r3, #31
 800e508:	d50f      	bpl.n	800e52a <_printf_float+0x21a>
 800e50a:	4653      	mov	r3, sl
 800e50c:	465a      	mov	r2, fp
 800e50e:	4631      	mov	r1, r6
 800e510:	4628      	mov	r0, r5
 800e512:	47b8      	blx	r7
 800e514:	3001      	adds	r0, #1
 800e516:	f43f af49 	beq.w	800e3ac <_printf_float+0x9c>
 800e51a:	f04f 0800 	mov.w	r8, #0
 800e51e:	f104 091a 	add.w	r9, r4, #26
 800e522:	9b08      	ldr	r3, [sp, #32]
 800e524:	3b01      	subs	r3, #1
 800e526:	4543      	cmp	r3, r8
 800e528:	dc09      	bgt.n	800e53e <_printf_float+0x22e>
 800e52a:	6823      	ldr	r3, [r4, #0]
 800e52c:	079b      	lsls	r3, r3, #30
 800e52e:	f100 8108 	bmi.w	800e742 <_printf_float+0x432>
 800e532:	68e0      	ldr	r0, [r4, #12]
 800e534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e536:	4298      	cmp	r0, r3
 800e538:	bfb8      	it	lt
 800e53a:	4618      	movlt	r0, r3
 800e53c:	e738      	b.n	800e3b0 <_printf_float+0xa0>
 800e53e:	2301      	movs	r3, #1
 800e540:	464a      	mov	r2, r9
 800e542:	4631      	mov	r1, r6
 800e544:	4628      	mov	r0, r5
 800e546:	47b8      	blx	r7
 800e548:	3001      	adds	r0, #1
 800e54a:	f43f af2f 	beq.w	800e3ac <_printf_float+0x9c>
 800e54e:	f108 0801 	add.w	r8, r8, #1
 800e552:	e7e6      	b.n	800e522 <_printf_float+0x212>
 800e554:	9b07      	ldr	r3, [sp, #28]
 800e556:	2b00      	cmp	r3, #0
 800e558:	dc3c      	bgt.n	800e5d4 <_printf_float+0x2c4>
 800e55a:	4a1d      	ldr	r2, [pc, #116]	; (800e5d0 <_printf_float+0x2c0>)
 800e55c:	2301      	movs	r3, #1
 800e55e:	4631      	mov	r1, r6
 800e560:	4628      	mov	r0, r5
 800e562:	47b8      	blx	r7
 800e564:	3001      	adds	r0, #1
 800e566:	f43f af21 	beq.w	800e3ac <_printf_float+0x9c>
 800e56a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e56e:	4313      	orrs	r3, r2
 800e570:	d102      	bne.n	800e578 <_printf_float+0x268>
 800e572:	6823      	ldr	r3, [r4, #0]
 800e574:	07d9      	lsls	r1, r3, #31
 800e576:	d5d8      	bpl.n	800e52a <_printf_float+0x21a>
 800e578:	4653      	mov	r3, sl
 800e57a:	465a      	mov	r2, fp
 800e57c:	4631      	mov	r1, r6
 800e57e:	4628      	mov	r0, r5
 800e580:	47b8      	blx	r7
 800e582:	3001      	adds	r0, #1
 800e584:	f43f af12 	beq.w	800e3ac <_printf_float+0x9c>
 800e588:	f04f 0900 	mov.w	r9, #0
 800e58c:	f104 0a1a 	add.w	sl, r4, #26
 800e590:	9b07      	ldr	r3, [sp, #28]
 800e592:	425b      	negs	r3, r3
 800e594:	454b      	cmp	r3, r9
 800e596:	dc01      	bgt.n	800e59c <_printf_float+0x28c>
 800e598:	9b08      	ldr	r3, [sp, #32]
 800e59a:	e795      	b.n	800e4c8 <_printf_float+0x1b8>
 800e59c:	2301      	movs	r3, #1
 800e59e:	4652      	mov	r2, sl
 800e5a0:	4631      	mov	r1, r6
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	47b8      	blx	r7
 800e5a6:	3001      	adds	r0, #1
 800e5a8:	f43f af00 	beq.w	800e3ac <_printf_float+0x9c>
 800e5ac:	f109 0901 	add.w	r9, r9, #1
 800e5b0:	e7ee      	b.n	800e590 <_printf_float+0x280>
 800e5b2:	bf00      	nop
 800e5b4:	f3af 8000 	nop.w
 800e5b8:	ffffffff 	.word	0xffffffff
 800e5bc:	7fefffff 	.word	0x7fefffff
 800e5c0:	0801b15c 	.word	0x0801b15c
 800e5c4:	0801b160 	.word	0x0801b160
 800e5c8:	0801b168 	.word	0x0801b168
 800e5cc:	0801b164 	.word	0x0801b164
 800e5d0:	0801b16c 	.word	0x0801b16c
 800e5d4:	9a08      	ldr	r2, [sp, #32]
 800e5d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	bfa8      	it	ge
 800e5dc:	461a      	movge	r2, r3
 800e5de:	2a00      	cmp	r2, #0
 800e5e0:	4691      	mov	r9, r2
 800e5e2:	dc38      	bgt.n	800e656 <_printf_float+0x346>
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	9305      	str	r3, [sp, #20]
 800e5e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e5ec:	f104 021a 	add.w	r2, r4, #26
 800e5f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e5f2:	9905      	ldr	r1, [sp, #20]
 800e5f4:	9304      	str	r3, [sp, #16]
 800e5f6:	eba3 0309 	sub.w	r3, r3, r9
 800e5fa:	428b      	cmp	r3, r1
 800e5fc:	dc33      	bgt.n	800e666 <_printf_float+0x356>
 800e5fe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e602:	429a      	cmp	r2, r3
 800e604:	db3c      	blt.n	800e680 <_printf_float+0x370>
 800e606:	6823      	ldr	r3, [r4, #0]
 800e608:	07da      	lsls	r2, r3, #31
 800e60a:	d439      	bmi.n	800e680 <_printf_float+0x370>
 800e60c:	9a08      	ldr	r2, [sp, #32]
 800e60e:	9b04      	ldr	r3, [sp, #16]
 800e610:	9907      	ldr	r1, [sp, #28]
 800e612:	1ad3      	subs	r3, r2, r3
 800e614:	eba2 0901 	sub.w	r9, r2, r1
 800e618:	4599      	cmp	r9, r3
 800e61a:	bfa8      	it	ge
 800e61c:	4699      	movge	r9, r3
 800e61e:	f1b9 0f00 	cmp.w	r9, #0
 800e622:	dc35      	bgt.n	800e690 <_printf_float+0x380>
 800e624:	f04f 0800 	mov.w	r8, #0
 800e628:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e62c:	f104 0a1a 	add.w	sl, r4, #26
 800e630:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e634:	1a9b      	subs	r3, r3, r2
 800e636:	eba3 0309 	sub.w	r3, r3, r9
 800e63a:	4543      	cmp	r3, r8
 800e63c:	f77f af75 	ble.w	800e52a <_printf_float+0x21a>
 800e640:	2301      	movs	r3, #1
 800e642:	4652      	mov	r2, sl
 800e644:	4631      	mov	r1, r6
 800e646:	4628      	mov	r0, r5
 800e648:	47b8      	blx	r7
 800e64a:	3001      	adds	r0, #1
 800e64c:	f43f aeae 	beq.w	800e3ac <_printf_float+0x9c>
 800e650:	f108 0801 	add.w	r8, r8, #1
 800e654:	e7ec      	b.n	800e630 <_printf_float+0x320>
 800e656:	4613      	mov	r3, r2
 800e658:	4631      	mov	r1, r6
 800e65a:	4642      	mov	r2, r8
 800e65c:	4628      	mov	r0, r5
 800e65e:	47b8      	blx	r7
 800e660:	3001      	adds	r0, #1
 800e662:	d1bf      	bne.n	800e5e4 <_printf_float+0x2d4>
 800e664:	e6a2      	b.n	800e3ac <_printf_float+0x9c>
 800e666:	2301      	movs	r3, #1
 800e668:	4631      	mov	r1, r6
 800e66a:	4628      	mov	r0, r5
 800e66c:	9204      	str	r2, [sp, #16]
 800e66e:	47b8      	blx	r7
 800e670:	3001      	adds	r0, #1
 800e672:	f43f ae9b 	beq.w	800e3ac <_printf_float+0x9c>
 800e676:	9b05      	ldr	r3, [sp, #20]
 800e678:	9a04      	ldr	r2, [sp, #16]
 800e67a:	3301      	adds	r3, #1
 800e67c:	9305      	str	r3, [sp, #20]
 800e67e:	e7b7      	b.n	800e5f0 <_printf_float+0x2e0>
 800e680:	4653      	mov	r3, sl
 800e682:	465a      	mov	r2, fp
 800e684:	4631      	mov	r1, r6
 800e686:	4628      	mov	r0, r5
 800e688:	47b8      	blx	r7
 800e68a:	3001      	adds	r0, #1
 800e68c:	d1be      	bne.n	800e60c <_printf_float+0x2fc>
 800e68e:	e68d      	b.n	800e3ac <_printf_float+0x9c>
 800e690:	9a04      	ldr	r2, [sp, #16]
 800e692:	464b      	mov	r3, r9
 800e694:	4442      	add	r2, r8
 800e696:	4631      	mov	r1, r6
 800e698:	4628      	mov	r0, r5
 800e69a:	47b8      	blx	r7
 800e69c:	3001      	adds	r0, #1
 800e69e:	d1c1      	bne.n	800e624 <_printf_float+0x314>
 800e6a0:	e684      	b.n	800e3ac <_printf_float+0x9c>
 800e6a2:	9a08      	ldr	r2, [sp, #32]
 800e6a4:	2a01      	cmp	r2, #1
 800e6a6:	dc01      	bgt.n	800e6ac <_printf_float+0x39c>
 800e6a8:	07db      	lsls	r3, r3, #31
 800e6aa:	d537      	bpl.n	800e71c <_printf_float+0x40c>
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	4642      	mov	r2, r8
 800e6b0:	4631      	mov	r1, r6
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	47b8      	blx	r7
 800e6b6:	3001      	adds	r0, #1
 800e6b8:	f43f ae78 	beq.w	800e3ac <_printf_float+0x9c>
 800e6bc:	4653      	mov	r3, sl
 800e6be:	465a      	mov	r2, fp
 800e6c0:	4631      	mov	r1, r6
 800e6c2:	4628      	mov	r0, r5
 800e6c4:	47b8      	blx	r7
 800e6c6:	3001      	adds	r0, #1
 800e6c8:	f43f ae70 	beq.w	800e3ac <_printf_float+0x9c>
 800e6cc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e6d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6d8:	d01b      	beq.n	800e712 <_printf_float+0x402>
 800e6da:	9b08      	ldr	r3, [sp, #32]
 800e6dc:	f108 0201 	add.w	r2, r8, #1
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	4631      	mov	r1, r6
 800e6e4:	4628      	mov	r0, r5
 800e6e6:	47b8      	blx	r7
 800e6e8:	3001      	adds	r0, #1
 800e6ea:	d10e      	bne.n	800e70a <_printf_float+0x3fa>
 800e6ec:	e65e      	b.n	800e3ac <_printf_float+0x9c>
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	464a      	mov	r2, r9
 800e6f2:	4631      	mov	r1, r6
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	47b8      	blx	r7
 800e6f8:	3001      	adds	r0, #1
 800e6fa:	f43f ae57 	beq.w	800e3ac <_printf_float+0x9c>
 800e6fe:	f108 0801 	add.w	r8, r8, #1
 800e702:	9b08      	ldr	r3, [sp, #32]
 800e704:	3b01      	subs	r3, #1
 800e706:	4543      	cmp	r3, r8
 800e708:	dcf1      	bgt.n	800e6ee <_printf_float+0x3de>
 800e70a:	9b04      	ldr	r3, [sp, #16]
 800e70c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e710:	e6db      	b.n	800e4ca <_printf_float+0x1ba>
 800e712:	f04f 0800 	mov.w	r8, #0
 800e716:	f104 091a 	add.w	r9, r4, #26
 800e71a:	e7f2      	b.n	800e702 <_printf_float+0x3f2>
 800e71c:	2301      	movs	r3, #1
 800e71e:	4642      	mov	r2, r8
 800e720:	e7df      	b.n	800e6e2 <_printf_float+0x3d2>
 800e722:	2301      	movs	r3, #1
 800e724:	464a      	mov	r2, r9
 800e726:	4631      	mov	r1, r6
 800e728:	4628      	mov	r0, r5
 800e72a:	47b8      	blx	r7
 800e72c:	3001      	adds	r0, #1
 800e72e:	f43f ae3d 	beq.w	800e3ac <_printf_float+0x9c>
 800e732:	f108 0801 	add.w	r8, r8, #1
 800e736:	68e3      	ldr	r3, [r4, #12]
 800e738:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e73a:	1a5b      	subs	r3, r3, r1
 800e73c:	4543      	cmp	r3, r8
 800e73e:	dcf0      	bgt.n	800e722 <_printf_float+0x412>
 800e740:	e6f7      	b.n	800e532 <_printf_float+0x222>
 800e742:	f04f 0800 	mov.w	r8, #0
 800e746:	f104 0919 	add.w	r9, r4, #25
 800e74a:	e7f4      	b.n	800e736 <_printf_float+0x426>

0800e74c <_printf_common>:
 800e74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e750:	4616      	mov	r6, r2
 800e752:	4699      	mov	r9, r3
 800e754:	688a      	ldr	r2, [r1, #8]
 800e756:	690b      	ldr	r3, [r1, #16]
 800e758:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e75c:	4293      	cmp	r3, r2
 800e75e:	bfb8      	it	lt
 800e760:	4613      	movlt	r3, r2
 800e762:	6033      	str	r3, [r6, #0]
 800e764:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e768:	4607      	mov	r7, r0
 800e76a:	460c      	mov	r4, r1
 800e76c:	b10a      	cbz	r2, 800e772 <_printf_common+0x26>
 800e76e:	3301      	adds	r3, #1
 800e770:	6033      	str	r3, [r6, #0]
 800e772:	6823      	ldr	r3, [r4, #0]
 800e774:	0699      	lsls	r1, r3, #26
 800e776:	bf42      	ittt	mi
 800e778:	6833      	ldrmi	r3, [r6, #0]
 800e77a:	3302      	addmi	r3, #2
 800e77c:	6033      	strmi	r3, [r6, #0]
 800e77e:	6825      	ldr	r5, [r4, #0]
 800e780:	f015 0506 	ands.w	r5, r5, #6
 800e784:	d106      	bne.n	800e794 <_printf_common+0x48>
 800e786:	f104 0a19 	add.w	sl, r4, #25
 800e78a:	68e3      	ldr	r3, [r4, #12]
 800e78c:	6832      	ldr	r2, [r6, #0]
 800e78e:	1a9b      	subs	r3, r3, r2
 800e790:	42ab      	cmp	r3, r5
 800e792:	dc26      	bgt.n	800e7e2 <_printf_common+0x96>
 800e794:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e798:	1e13      	subs	r3, r2, #0
 800e79a:	6822      	ldr	r2, [r4, #0]
 800e79c:	bf18      	it	ne
 800e79e:	2301      	movne	r3, #1
 800e7a0:	0692      	lsls	r2, r2, #26
 800e7a2:	d42b      	bmi.n	800e7fc <_printf_common+0xb0>
 800e7a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e7a8:	4649      	mov	r1, r9
 800e7aa:	4638      	mov	r0, r7
 800e7ac:	47c0      	blx	r8
 800e7ae:	3001      	adds	r0, #1
 800e7b0:	d01e      	beq.n	800e7f0 <_printf_common+0xa4>
 800e7b2:	6823      	ldr	r3, [r4, #0]
 800e7b4:	68e5      	ldr	r5, [r4, #12]
 800e7b6:	6832      	ldr	r2, [r6, #0]
 800e7b8:	f003 0306 	and.w	r3, r3, #6
 800e7bc:	2b04      	cmp	r3, #4
 800e7be:	bf08      	it	eq
 800e7c0:	1aad      	subeq	r5, r5, r2
 800e7c2:	68a3      	ldr	r3, [r4, #8]
 800e7c4:	6922      	ldr	r2, [r4, #16]
 800e7c6:	bf0c      	ite	eq
 800e7c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e7cc:	2500      	movne	r5, #0
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	bfc4      	itt	gt
 800e7d2:	1a9b      	subgt	r3, r3, r2
 800e7d4:	18ed      	addgt	r5, r5, r3
 800e7d6:	2600      	movs	r6, #0
 800e7d8:	341a      	adds	r4, #26
 800e7da:	42b5      	cmp	r5, r6
 800e7dc:	d11a      	bne.n	800e814 <_printf_common+0xc8>
 800e7de:	2000      	movs	r0, #0
 800e7e0:	e008      	b.n	800e7f4 <_printf_common+0xa8>
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	4652      	mov	r2, sl
 800e7e6:	4649      	mov	r1, r9
 800e7e8:	4638      	mov	r0, r7
 800e7ea:	47c0      	blx	r8
 800e7ec:	3001      	adds	r0, #1
 800e7ee:	d103      	bne.n	800e7f8 <_printf_common+0xac>
 800e7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7f8:	3501      	adds	r5, #1
 800e7fa:	e7c6      	b.n	800e78a <_printf_common+0x3e>
 800e7fc:	18e1      	adds	r1, r4, r3
 800e7fe:	1c5a      	adds	r2, r3, #1
 800e800:	2030      	movs	r0, #48	; 0x30
 800e802:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e806:	4422      	add	r2, r4
 800e808:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e80c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e810:	3302      	adds	r3, #2
 800e812:	e7c7      	b.n	800e7a4 <_printf_common+0x58>
 800e814:	2301      	movs	r3, #1
 800e816:	4622      	mov	r2, r4
 800e818:	4649      	mov	r1, r9
 800e81a:	4638      	mov	r0, r7
 800e81c:	47c0      	blx	r8
 800e81e:	3001      	adds	r0, #1
 800e820:	d0e6      	beq.n	800e7f0 <_printf_common+0xa4>
 800e822:	3601      	adds	r6, #1
 800e824:	e7d9      	b.n	800e7da <_printf_common+0x8e>
	...

0800e828 <_printf_i>:
 800e828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e82c:	460c      	mov	r4, r1
 800e82e:	4691      	mov	r9, r2
 800e830:	7e27      	ldrb	r7, [r4, #24]
 800e832:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e834:	2f78      	cmp	r7, #120	; 0x78
 800e836:	4680      	mov	r8, r0
 800e838:	469a      	mov	sl, r3
 800e83a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e83e:	d807      	bhi.n	800e850 <_printf_i+0x28>
 800e840:	2f62      	cmp	r7, #98	; 0x62
 800e842:	d80a      	bhi.n	800e85a <_printf_i+0x32>
 800e844:	2f00      	cmp	r7, #0
 800e846:	f000 80d8 	beq.w	800e9fa <_printf_i+0x1d2>
 800e84a:	2f58      	cmp	r7, #88	; 0x58
 800e84c:	f000 80a3 	beq.w	800e996 <_printf_i+0x16e>
 800e850:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e854:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e858:	e03a      	b.n	800e8d0 <_printf_i+0xa8>
 800e85a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e85e:	2b15      	cmp	r3, #21
 800e860:	d8f6      	bhi.n	800e850 <_printf_i+0x28>
 800e862:	a001      	add	r0, pc, #4	; (adr r0, 800e868 <_printf_i+0x40>)
 800e864:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e868:	0800e8c1 	.word	0x0800e8c1
 800e86c:	0800e8d5 	.word	0x0800e8d5
 800e870:	0800e851 	.word	0x0800e851
 800e874:	0800e851 	.word	0x0800e851
 800e878:	0800e851 	.word	0x0800e851
 800e87c:	0800e851 	.word	0x0800e851
 800e880:	0800e8d5 	.word	0x0800e8d5
 800e884:	0800e851 	.word	0x0800e851
 800e888:	0800e851 	.word	0x0800e851
 800e88c:	0800e851 	.word	0x0800e851
 800e890:	0800e851 	.word	0x0800e851
 800e894:	0800e9e1 	.word	0x0800e9e1
 800e898:	0800e905 	.word	0x0800e905
 800e89c:	0800e9c3 	.word	0x0800e9c3
 800e8a0:	0800e851 	.word	0x0800e851
 800e8a4:	0800e851 	.word	0x0800e851
 800e8a8:	0800ea03 	.word	0x0800ea03
 800e8ac:	0800e851 	.word	0x0800e851
 800e8b0:	0800e905 	.word	0x0800e905
 800e8b4:	0800e851 	.word	0x0800e851
 800e8b8:	0800e851 	.word	0x0800e851
 800e8bc:	0800e9cb 	.word	0x0800e9cb
 800e8c0:	680b      	ldr	r3, [r1, #0]
 800e8c2:	1d1a      	adds	r2, r3, #4
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	600a      	str	r2, [r1, #0]
 800e8c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e8cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	e0a3      	b.n	800ea1c <_printf_i+0x1f4>
 800e8d4:	6825      	ldr	r5, [r4, #0]
 800e8d6:	6808      	ldr	r0, [r1, #0]
 800e8d8:	062e      	lsls	r6, r5, #24
 800e8da:	f100 0304 	add.w	r3, r0, #4
 800e8de:	d50a      	bpl.n	800e8f6 <_printf_i+0xce>
 800e8e0:	6805      	ldr	r5, [r0, #0]
 800e8e2:	600b      	str	r3, [r1, #0]
 800e8e4:	2d00      	cmp	r5, #0
 800e8e6:	da03      	bge.n	800e8f0 <_printf_i+0xc8>
 800e8e8:	232d      	movs	r3, #45	; 0x2d
 800e8ea:	426d      	negs	r5, r5
 800e8ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8f0:	485e      	ldr	r0, [pc, #376]	; (800ea6c <_printf_i+0x244>)
 800e8f2:	230a      	movs	r3, #10
 800e8f4:	e019      	b.n	800e92a <_printf_i+0x102>
 800e8f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e8fa:	6805      	ldr	r5, [r0, #0]
 800e8fc:	600b      	str	r3, [r1, #0]
 800e8fe:	bf18      	it	ne
 800e900:	b22d      	sxthne	r5, r5
 800e902:	e7ef      	b.n	800e8e4 <_printf_i+0xbc>
 800e904:	680b      	ldr	r3, [r1, #0]
 800e906:	6825      	ldr	r5, [r4, #0]
 800e908:	1d18      	adds	r0, r3, #4
 800e90a:	6008      	str	r0, [r1, #0]
 800e90c:	0628      	lsls	r0, r5, #24
 800e90e:	d501      	bpl.n	800e914 <_printf_i+0xec>
 800e910:	681d      	ldr	r5, [r3, #0]
 800e912:	e002      	b.n	800e91a <_printf_i+0xf2>
 800e914:	0669      	lsls	r1, r5, #25
 800e916:	d5fb      	bpl.n	800e910 <_printf_i+0xe8>
 800e918:	881d      	ldrh	r5, [r3, #0]
 800e91a:	4854      	ldr	r0, [pc, #336]	; (800ea6c <_printf_i+0x244>)
 800e91c:	2f6f      	cmp	r7, #111	; 0x6f
 800e91e:	bf0c      	ite	eq
 800e920:	2308      	moveq	r3, #8
 800e922:	230a      	movne	r3, #10
 800e924:	2100      	movs	r1, #0
 800e926:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e92a:	6866      	ldr	r6, [r4, #4]
 800e92c:	60a6      	str	r6, [r4, #8]
 800e92e:	2e00      	cmp	r6, #0
 800e930:	bfa2      	ittt	ge
 800e932:	6821      	ldrge	r1, [r4, #0]
 800e934:	f021 0104 	bicge.w	r1, r1, #4
 800e938:	6021      	strge	r1, [r4, #0]
 800e93a:	b90d      	cbnz	r5, 800e940 <_printf_i+0x118>
 800e93c:	2e00      	cmp	r6, #0
 800e93e:	d04d      	beq.n	800e9dc <_printf_i+0x1b4>
 800e940:	4616      	mov	r6, r2
 800e942:	fbb5 f1f3 	udiv	r1, r5, r3
 800e946:	fb03 5711 	mls	r7, r3, r1, r5
 800e94a:	5dc7      	ldrb	r7, [r0, r7]
 800e94c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e950:	462f      	mov	r7, r5
 800e952:	42bb      	cmp	r3, r7
 800e954:	460d      	mov	r5, r1
 800e956:	d9f4      	bls.n	800e942 <_printf_i+0x11a>
 800e958:	2b08      	cmp	r3, #8
 800e95a:	d10b      	bne.n	800e974 <_printf_i+0x14c>
 800e95c:	6823      	ldr	r3, [r4, #0]
 800e95e:	07df      	lsls	r7, r3, #31
 800e960:	d508      	bpl.n	800e974 <_printf_i+0x14c>
 800e962:	6923      	ldr	r3, [r4, #16]
 800e964:	6861      	ldr	r1, [r4, #4]
 800e966:	4299      	cmp	r1, r3
 800e968:	bfde      	ittt	le
 800e96a:	2330      	movle	r3, #48	; 0x30
 800e96c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e970:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e974:	1b92      	subs	r2, r2, r6
 800e976:	6122      	str	r2, [r4, #16]
 800e978:	f8cd a000 	str.w	sl, [sp]
 800e97c:	464b      	mov	r3, r9
 800e97e:	aa03      	add	r2, sp, #12
 800e980:	4621      	mov	r1, r4
 800e982:	4640      	mov	r0, r8
 800e984:	f7ff fee2 	bl	800e74c <_printf_common>
 800e988:	3001      	adds	r0, #1
 800e98a:	d14c      	bne.n	800ea26 <_printf_i+0x1fe>
 800e98c:	f04f 30ff 	mov.w	r0, #4294967295
 800e990:	b004      	add	sp, #16
 800e992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e996:	4835      	ldr	r0, [pc, #212]	; (800ea6c <_printf_i+0x244>)
 800e998:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e99c:	6823      	ldr	r3, [r4, #0]
 800e99e:	680e      	ldr	r6, [r1, #0]
 800e9a0:	061f      	lsls	r7, r3, #24
 800e9a2:	f856 5b04 	ldr.w	r5, [r6], #4
 800e9a6:	600e      	str	r6, [r1, #0]
 800e9a8:	d514      	bpl.n	800e9d4 <_printf_i+0x1ac>
 800e9aa:	07d9      	lsls	r1, r3, #31
 800e9ac:	bf44      	itt	mi
 800e9ae:	f043 0320 	orrmi.w	r3, r3, #32
 800e9b2:	6023      	strmi	r3, [r4, #0]
 800e9b4:	b91d      	cbnz	r5, 800e9be <_printf_i+0x196>
 800e9b6:	6823      	ldr	r3, [r4, #0]
 800e9b8:	f023 0320 	bic.w	r3, r3, #32
 800e9bc:	6023      	str	r3, [r4, #0]
 800e9be:	2310      	movs	r3, #16
 800e9c0:	e7b0      	b.n	800e924 <_printf_i+0xfc>
 800e9c2:	6823      	ldr	r3, [r4, #0]
 800e9c4:	f043 0320 	orr.w	r3, r3, #32
 800e9c8:	6023      	str	r3, [r4, #0]
 800e9ca:	2378      	movs	r3, #120	; 0x78
 800e9cc:	4828      	ldr	r0, [pc, #160]	; (800ea70 <_printf_i+0x248>)
 800e9ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e9d2:	e7e3      	b.n	800e99c <_printf_i+0x174>
 800e9d4:	065e      	lsls	r6, r3, #25
 800e9d6:	bf48      	it	mi
 800e9d8:	b2ad      	uxthmi	r5, r5
 800e9da:	e7e6      	b.n	800e9aa <_printf_i+0x182>
 800e9dc:	4616      	mov	r6, r2
 800e9de:	e7bb      	b.n	800e958 <_printf_i+0x130>
 800e9e0:	680b      	ldr	r3, [r1, #0]
 800e9e2:	6826      	ldr	r6, [r4, #0]
 800e9e4:	6960      	ldr	r0, [r4, #20]
 800e9e6:	1d1d      	adds	r5, r3, #4
 800e9e8:	600d      	str	r5, [r1, #0]
 800e9ea:	0635      	lsls	r5, r6, #24
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	d501      	bpl.n	800e9f4 <_printf_i+0x1cc>
 800e9f0:	6018      	str	r0, [r3, #0]
 800e9f2:	e002      	b.n	800e9fa <_printf_i+0x1d2>
 800e9f4:	0671      	lsls	r1, r6, #25
 800e9f6:	d5fb      	bpl.n	800e9f0 <_printf_i+0x1c8>
 800e9f8:	8018      	strh	r0, [r3, #0]
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	6123      	str	r3, [r4, #16]
 800e9fe:	4616      	mov	r6, r2
 800ea00:	e7ba      	b.n	800e978 <_printf_i+0x150>
 800ea02:	680b      	ldr	r3, [r1, #0]
 800ea04:	1d1a      	adds	r2, r3, #4
 800ea06:	600a      	str	r2, [r1, #0]
 800ea08:	681e      	ldr	r6, [r3, #0]
 800ea0a:	6862      	ldr	r2, [r4, #4]
 800ea0c:	2100      	movs	r1, #0
 800ea0e:	4630      	mov	r0, r6
 800ea10:	f7f1 fc6e 	bl	80002f0 <memchr>
 800ea14:	b108      	cbz	r0, 800ea1a <_printf_i+0x1f2>
 800ea16:	1b80      	subs	r0, r0, r6
 800ea18:	6060      	str	r0, [r4, #4]
 800ea1a:	6863      	ldr	r3, [r4, #4]
 800ea1c:	6123      	str	r3, [r4, #16]
 800ea1e:	2300      	movs	r3, #0
 800ea20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea24:	e7a8      	b.n	800e978 <_printf_i+0x150>
 800ea26:	6923      	ldr	r3, [r4, #16]
 800ea28:	4632      	mov	r2, r6
 800ea2a:	4649      	mov	r1, r9
 800ea2c:	4640      	mov	r0, r8
 800ea2e:	47d0      	blx	sl
 800ea30:	3001      	adds	r0, #1
 800ea32:	d0ab      	beq.n	800e98c <_printf_i+0x164>
 800ea34:	6823      	ldr	r3, [r4, #0]
 800ea36:	079b      	lsls	r3, r3, #30
 800ea38:	d413      	bmi.n	800ea62 <_printf_i+0x23a>
 800ea3a:	68e0      	ldr	r0, [r4, #12]
 800ea3c:	9b03      	ldr	r3, [sp, #12]
 800ea3e:	4298      	cmp	r0, r3
 800ea40:	bfb8      	it	lt
 800ea42:	4618      	movlt	r0, r3
 800ea44:	e7a4      	b.n	800e990 <_printf_i+0x168>
 800ea46:	2301      	movs	r3, #1
 800ea48:	4632      	mov	r2, r6
 800ea4a:	4649      	mov	r1, r9
 800ea4c:	4640      	mov	r0, r8
 800ea4e:	47d0      	blx	sl
 800ea50:	3001      	adds	r0, #1
 800ea52:	d09b      	beq.n	800e98c <_printf_i+0x164>
 800ea54:	3501      	adds	r5, #1
 800ea56:	68e3      	ldr	r3, [r4, #12]
 800ea58:	9903      	ldr	r1, [sp, #12]
 800ea5a:	1a5b      	subs	r3, r3, r1
 800ea5c:	42ab      	cmp	r3, r5
 800ea5e:	dcf2      	bgt.n	800ea46 <_printf_i+0x21e>
 800ea60:	e7eb      	b.n	800ea3a <_printf_i+0x212>
 800ea62:	2500      	movs	r5, #0
 800ea64:	f104 0619 	add.w	r6, r4, #25
 800ea68:	e7f5      	b.n	800ea56 <_printf_i+0x22e>
 800ea6a:	bf00      	nop
 800ea6c:	0801b16e 	.word	0x0801b16e
 800ea70:	0801b17f 	.word	0x0801b17f

0800ea74 <siprintf>:
 800ea74:	b40e      	push	{r1, r2, r3}
 800ea76:	b500      	push	{lr}
 800ea78:	b09c      	sub	sp, #112	; 0x70
 800ea7a:	ab1d      	add	r3, sp, #116	; 0x74
 800ea7c:	9002      	str	r0, [sp, #8]
 800ea7e:	9006      	str	r0, [sp, #24]
 800ea80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ea84:	4809      	ldr	r0, [pc, #36]	; (800eaac <siprintf+0x38>)
 800ea86:	9107      	str	r1, [sp, #28]
 800ea88:	9104      	str	r1, [sp, #16]
 800ea8a:	4909      	ldr	r1, [pc, #36]	; (800eab0 <siprintf+0x3c>)
 800ea8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea90:	9105      	str	r1, [sp, #20]
 800ea92:	6800      	ldr	r0, [r0, #0]
 800ea94:	9301      	str	r3, [sp, #4]
 800ea96:	a902      	add	r1, sp, #8
 800ea98:	f001 fac4 	bl	8010024 <_svfiprintf_r>
 800ea9c:	9b02      	ldr	r3, [sp, #8]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	701a      	strb	r2, [r3, #0]
 800eaa2:	b01c      	add	sp, #112	; 0x70
 800eaa4:	f85d eb04 	ldr.w	lr, [sp], #4
 800eaa8:	b003      	add	sp, #12
 800eaaa:	4770      	bx	lr
 800eaac:	2400040c 	.word	0x2400040c
 800eab0:	ffff0208 	.word	0xffff0208

0800eab4 <strcpy>:
 800eab4:	4603      	mov	r3, r0
 800eab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eaba:	f803 2b01 	strb.w	r2, [r3], #1
 800eabe:	2a00      	cmp	r2, #0
 800eac0:	d1f9      	bne.n	800eab6 <strcpy+0x2>
 800eac2:	4770      	bx	lr

0800eac4 <quorem>:
 800eac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac8:	6903      	ldr	r3, [r0, #16]
 800eaca:	690c      	ldr	r4, [r1, #16]
 800eacc:	42a3      	cmp	r3, r4
 800eace:	4607      	mov	r7, r0
 800ead0:	f2c0 8081 	blt.w	800ebd6 <quorem+0x112>
 800ead4:	3c01      	subs	r4, #1
 800ead6:	f101 0814 	add.w	r8, r1, #20
 800eada:	f100 0514 	add.w	r5, r0, #20
 800eade:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eae2:	9301      	str	r3, [sp, #4]
 800eae4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eae8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eaec:	3301      	adds	r3, #1
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eaf4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eaf8:	fbb2 f6f3 	udiv	r6, r2, r3
 800eafc:	d331      	bcc.n	800eb62 <quorem+0x9e>
 800eafe:	f04f 0e00 	mov.w	lr, #0
 800eb02:	4640      	mov	r0, r8
 800eb04:	46ac      	mov	ip, r5
 800eb06:	46f2      	mov	sl, lr
 800eb08:	f850 2b04 	ldr.w	r2, [r0], #4
 800eb0c:	b293      	uxth	r3, r2
 800eb0e:	fb06 e303 	mla	r3, r6, r3, lr
 800eb12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800eb16:	b29b      	uxth	r3, r3
 800eb18:	ebaa 0303 	sub.w	r3, sl, r3
 800eb1c:	0c12      	lsrs	r2, r2, #16
 800eb1e:	f8dc a000 	ldr.w	sl, [ip]
 800eb22:	fb06 e202 	mla	r2, r6, r2, lr
 800eb26:	fa13 f38a 	uxtah	r3, r3, sl
 800eb2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eb2e:	fa1f fa82 	uxth.w	sl, r2
 800eb32:	f8dc 2000 	ldr.w	r2, [ip]
 800eb36:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800eb3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eb3e:	b29b      	uxth	r3, r3
 800eb40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb44:	4581      	cmp	r9, r0
 800eb46:	f84c 3b04 	str.w	r3, [ip], #4
 800eb4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800eb4e:	d2db      	bcs.n	800eb08 <quorem+0x44>
 800eb50:	f855 300b 	ldr.w	r3, [r5, fp]
 800eb54:	b92b      	cbnz	r3, 800eb62 <quorem+0x9e>
 800eb56:	9b01      	ldr	r3, [sp, #4]
 800eb58:	3b04      	subs	r3, #4
 800eb5a:	429d      	cmp	r5, r3
 800eb5c:	461a      	mov	r2, r3
 800eb5e:	d32e      	bcc.n	800ebbe <quorem+0xfa>
 800eb60:	613c      	str	r4, [r7, #16]
 800eb62:	4638      	mov	r0, r7
 800eb64:	f001 f848 	bl	800fbf8 <__mcmp>
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	db24      	blt.n	800ebb6 <quorem+0xf2>
 800eb6c:	3601      	adds	r6, #1
 800eb6e:	4628      	mov	r0, r5
 800eb70:	f04f 0c00 	mov.w	ip, #0
 800eb74:	f858 2b04 	ldr.w	r2, [r8], #4
 800eb78:	f8d0 e000 	ldr.w	lr, [r0]
 800eb7c:	b293      	uxth	r3, r2
 800eb7e:	ebac 0303 	sub.w	r3, ip, r3
 800eb82:	0c12      	lsrs	r2, r2, #16
 800eb84:	fa13 f38e 	uxtah	r3, r3, lr
 800eb88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800eb8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb96:	45c1      	cmp	r9, r8
 800eb98:	f840 3b04 	str.w	r3, [r0], #4
 800eb9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eba0:	d2e8      	bcs.n	800eb74 <quorem+0xb0>
 800eba2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eba6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ebaa:	b922      	cbnz	r2, 800ebb6 <quorem+0xf2>
 800ebac:	3b04      	subs	r3, #4
 800ebae:	429d      	cmp	r5, r3
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	d30a      	bcc.n	800ebca <quorem+0x106>
 800ebb4:	613c      	str	r4, [r7, #16]
 800ebb6:	4630      	mov	r0, r6
 800ebb8:	b003      	add	sp, #12
 800ebba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebbe:	6812      	ldr	r2, [r2, #0]
 800ebc0:	3b04      	subs	r3, #4
 800ebc2:	2a00      	cmp	r2, #0
 800ebc4:	d1cc      	bne.n	800eb60 <quorem+0x9c>
 800ebc6:	3c01      	subs	r4, #1
 800ebc8:	e7c7      	b.n	800eb5a <quorem+0x96>
 800ebca:	6812      	ldr	r2, [r2, #0]
 800ebcc:	3b04      	subs	r3, #4
 800ebce:	2a00      	cmp	r2, #0
 800ebd0:	d1f0      	bne.n	800ebb4 <quorem+0xf0>
 800ebd2:	3c01      	subs	r4, #1
 800ebd4:	e7eb      	b.n	800ebae <quorem+0xea>
 800ebd6:	2000      	movs	r0, #0
 800ebd8:	e7ee      	b.n	800ebb8 <quorem+0xf4>
 800ebda:	0000      	movs	r0, r0
 800ebdc:	0000      	movs	r0, r0
	...

0800ebe0 <_dtoa_r>:
 800ebe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebe4:	ec59 8b10 	vmov	r8, r9, d0
 800ebe8:	b095      	sub	sp, #84	; 0x54
 800ebea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ebec:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800ebee:	9107      	str	r1, [sp, #28]
 800ebf0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ebf4:	4606      	mov	r6, r0
 800ebf6:	9209      	str	r2, [sp, #36]	; 0x24
 800ebf8:	9310      	str	r3, [sp, #64]	; 0x40
 800ebfa:	b975      	cbnz	r5, 800ec1a <_dtoa_r+0x3a>
 800ebfc:	2010      	movs	r0, #16
 800ebfe:	f000 fd75 	bl	800f6ec <malloc>
 800ec02:	4602      	mov	r2, r0
 800ec04:	6270      	str	r0, [r6, #36]	; 0x24
 800ec06:	b920      	cbnz	r0, 800ec12 <_dtoa_r+0x32>
 800ec08:	4bab      	ldr	r3, [pc, #684]	; (800eeb8 <_dtoa_r+0x2d8>)
 800ec0a:	21ea      	movs	r1, #234	; 0xea
 800ec0c:	48ab      	ldr	r0, [pc, #684]	; (800eebc <_dtoa_r+0x2dc>)
 800ec0e:	f001 fb19 	bl	8010244 <__assert_func>
 800ec12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ec16:	6005      	str	r5, [r0, #0]
 800ec18:	60c5      	str	r5, [r0, #12]
 800ec1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ec1c:	6819      	ldr	r1, [r3, #0]
 800ec1e:	b151      	cbz	r1, 800ec36 <_dtoa_r+0x56>
 800ec20:	685a      	ldr	r2, [r3, #4]
 800ec22:	604a      	str	r2, [r1, #4]
 800ec24:	2301      	movs	r3, #1
 800ec26:	4093      	lsls	r3, r2
 800ec28:	608b      	str	r3, [r1, #8]
 800ec2a:	4630      	mov	r0, r6
 800ec2c:	f000 fda6 	bl	800f77c <_Bfree>
 800ec30:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ec32:	2200      	movs	r2, #0
 800ec34:	601a      	str	r2, [r3, #0]
 800ec36:	f1b9 0300 	subs.w	r3, r9, #0
 800ec3a:	bfbb      	ittet	lt
 800ec3c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ec40:	9303      	strlt	r3, [sp, #12]
 800ec42:	2300      	movge	r3, #0
 800ec44:	2201      	movlt	r2, #1
 800ec46:	bfac      	ite	ge
 800ec48:	6023      	strge	r3, [r4, #0]
 800ec4a:	6022      	strlt	r2, [r4, #0]
 800ec4c:	4b9c      	ldr	r3, [pc, #624]	; (800eec0 <_dtoa_r+0x2e0>)
 800ec4e:	9c03      	ldr	r4, [sp, #12]
 800ec50:	43a3      	bics	r3, r4
 800ec52:	d11a      	bne.n	800ec8a <_dtoa_r+0xaa>
 800ec54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ec56:	f242 730f 	movw	r3, #9999	; 0x270f
 800ec5a:	6013      	str	r3, [r2, #0]
 800ec5c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ec60:	ea53 0308 	orrs.w	r3, r3, r8
 800ec64:	f000 8512 	beq.w	800f68c <_dtoa_r+0xaac>
 800ec68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ec6a:	b953      	cbnz	r3, 800ec82 <_dtoa_r+0xa2>
 800ec6c:	4b95      	ldr	r3, [pc, #596]	; (800eec4 <_dtoa_r+0x2e4>)
 800ec6e:	e01f      	b.n	800ecb0 <_dtoa_r+0xd0>
 800ec70:	4b95      	ldr	r3, [pc, #596]	; (800eec8 <_dtoa_r+0x2e8>)
 800ec72:	9300      	str	r3, [sp, #0]
 800ec74:	3308      	adds	r3, #8
 800ec76:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ec78:	6013      	str	r3, [r2, #0]
 800ec7a:	9800      	ldr	r0, [sp, #0]
 800ec7c:	b015      	add	sp, #84	; 0x54
 800ec7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec82:	4b90      	ldr	r3, [pc, #576]	; (800eec4 <_dtoa_r+0x2e4>)
 800ec84:	9300      	str	r3, [sp, #0]
 800ec86:	3303      	adds	r3, #3
 800ec88:	e7f5      	b.n	800ec76 <_dtoa_r+0x96>
 800ec8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ec92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec96:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ec9a:	d10b      	bne.n	800ecb4 <_dtoa_r+0xd4>
 800ec9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ec9e:	2301      	movs	r3, #1
 800eca0:	6013      	str	r3, [r2, #0]
 800eca2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	f000 84ee 	beq.w	800f686 <_dtoa_r+0xaa6>
 800ecaa:	4888      	ldr	r0, [pc, #544]	; (800eecc <_dtoa_r+0x2ec>)
 800ecac:	6018      	str	r0, [r3, #0]
 800ecae:	1e43      	subs	r3, r0, #1
 800ecb0:	9300      	str	r3, [sp, #0]
 800ecb2:	e7e2      	b.n	800ec7a <_dtoa_r+0x9a>
 800ecb4:	a913      	add	r1, sp, #76	; 0x4c
 800ecb6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ecba:	aa12      	add	r2, sp, #72	; 0x48
 800ecbc:	4630      	mov	r0, r6
 800ecbe:	f001 f83f 	bl	800fd40 <__d2b>
 800ecc2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800ecc6:	4605      	mov	r5, r0
 800ecc8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ecca:	2900      	cmp	r1, #0
 800eccc:	d047      	beq.n	800ed5e <_dtoa_r+0x17e>
 800ecce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ecd0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ecd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ecd8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800ecdc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ece0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ece4:	2400      	movs	r4, #0
 800ece6:	ec43 2b16 	vmov	d6, r2, r3
 800ecea:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800ecee:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800eea0 <_dtoa_r+0x2c0>
 800ecf2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ecf6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800eea8 <_dtoa_r+0x2c8>
 800ecfa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ecfe:	eeb0 7b46 	vmov.f64	d7, d6
 800ed02:	ee06 1a90 	vmov	s13, r1
 800ed06:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800ed0a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800eeb0 <_dtoa_r+0x2d0>
 800ed0e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ed12:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ed16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ed1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed1e:	ee16 ba90 	vmov	fp, s13
 800ed22:	9411      	str	r4, [sp, #68]	; 0x44
 800ed24:	d508      	bpl.n	800ed38 <_dtoa_r+0x158>
 800ed26:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ed2a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ed2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed32:	bf18      	it	ne
 800ed34:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800ed38:	f1bb 0f16 	cmp.w	fp, #22
 800ed3c:	d832      	bhi.n	800eda4 <_dtoa_r+0x1c4>
 800ed3e:	4b64      	ldr	r3, [pc, #400]	; (800eed0 <_dtoa_r+0x2f0>)
 800ed40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ed44:	ed93 7b00 	vldr	d7, [r3]
 800ed48:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800ed4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ed50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed54:	d501      	bpl.n	800ed5a <_dtoa_r+0x17a>
 800ed56:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	e023      	b.n	800eda6 <_dtoa_r+0x1c6>
 800ed5e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ed60:	4401      	add	r1, r0
 800ed62:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800ed66:	2b20      	cmp	r3, #32
 800ed68:	bfc3      	ittte	gt
 800ed6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ed6e:	fa04 f303 	lslgt.w	r3, r4, r3
 800ed72:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800ed76:	f1c3 0320 	rsble	r3, r3, #32
 800ed7a:	bfc6      	itte	gt
 800ed7c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800ed80:	ea43 0308 	orrgt.w	r3, r3, r8
 800ed84:	fa08 f303 	lslle.w	r3, r8, r3
 800ed88:	ee07 3a90 	vmov	s15, r3
 800ed8c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ed90:	3901      	subs	r1, #1
 800ed92:	ed8d 7b00 	vstr	d7, [sp]
 800ed96:	9c01      	ldr	r4, [sp, #4]
 800ed98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed9c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800eda0:	2401      	movs	r4, #1
 800eda2:	e7a0      	b.n	800ece6 <_dtoa_r+0x106>
 800eda4:	2301      	movs	r3, #1
 800eda6:	930f      	str	r3, [sp, #60]	; 0x3c
 800eda8:	1a43      	subs	r3, r0, r1
 800edaa:	1e5a      	subs	r2, r3, #1
 800edac:	bf45      	ittet	mi
 800edae:	f1c3 0301 	rsbmi	r3, r3, #1
 800edb2:	9305      	strmi	r3, [sp, #20]
 800edb4:	2300      	movpl	r3, #0
 800edb6:	2300      	movmi	r3, #0
 800edb8:	9206      	str	r2, [sp, #24]
 800edba:	bf54      	ite	pl
 800edbc:	9305      	strpl	r3, [sp, #20]
 800edbe:	9306      	strmi	r3, [sp, #24]
 800edc0:	f1bb 0f00 	cmp.w	fp, #0
 800edc4:	db18      	blt.n	800edf8 <_dtoa_r+0x218>
 800edc6:	9b06      	ldr	r3, [sp, #24]
 800edc8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800edcc:	445b      	add	r3, fp
 800edce:	9306      	str	r3, [sp, #24]
 800edd0:	2300      	movs	r3, #0
 800edd2:	9a07      	ldr	r2, [sp, #28]
 800edd4:	2a09      	cmp	r2, #9
 800edd6:	d849      	bhi.n	800ee6c <_dtoa_r+0x28c>
 800edd8:	2a05      	cmp	r2, #5
 800edda:	bfc4      	itt	gt
 800eddc:	3a04      	subgt	r2, #4
 800edde:	9207      	strgt	r2, [sp, #28]
 800ede0:	9a07      	ldr	r2, [sp, #28]
 800ede2:	f1a2 0202 	sub.w	r2, r2, #2
 800ede6:	bfcc      	ite	gt
 800ede8:	2400      	movgt	r4, #0
 800edea:	2401      	movle	r4, #1
 800edec:	2a03      	cmp	r2, #3
 800edee:	d848      	bhi.n	800ee82 <_dtoa_r+0x2a2>
 800edf0:	e8df f002 	tbb	[pc, r2]
 800edf4:	3a2c2e0b 	.word	0x3a2c2e0b
 800edf8:	9b05      	ldr	r3, [sp, #20]
 800edfa:	2200      	movs	r2, #0
 800edfc:	eba3 030b 	sub.w	r3, r3, fp
 800ee00:	9305      	str	r3, [sp, #20]
 800ee02:	920e      	str	r2, [sp, #56]	; 0x38
 800ee04:	f1cb 0300 	rsb	r3, fp, #0
 800ee08:	e7e3      	b.n	800edd2 <_dtoa_r+0x1f2>
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	9208      	str	r2, [sp, #32]
 800ee0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee10:	2a00      	cmp	r2, #0
 800ee12:	dc39      	bgt.n	800ee88 <_dtoa_r+0x2a8>
 800ee14:	f04f 0a01 	mov.w	sl, #1
 800ee18:	46d1      	mov	r9, sl
 800ee1a:	4652      	mov	r2, sl
 800ee1c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ee20:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800ee22:	2100      	movs	r1, #0
 800ee24:	6079      	str	r1, [r7, #4]
 800ee26:	2004      	movs	r0, #4
 800ee28:	f100 0c14 	add.w	ip, r0, #20
 800ee2c:	4594      	cmp	ip, r2
 800ee2e:	6879      	ldr	r1, [r7, #4]
 800ee30:	d92f      	bls.n	800ee92 <_dtoa_r+0x2b2>
 800ee32:	4630      	mov	r0, r6
 800ee34:	930c      	str	r3, [sp, #48]	; 0x30
 800ee36:	f000 fc61 	bl	800f6fc <_Balloc>
 800ee3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee3c:	9000      	str	r0, [sp, #0]
 800ee3e:	4602      	mov	r2, r0
 800ee40:	2800      	cmp	r0, #0
 800ee42:	d149      	bne.n	800eed8 <_dtoa_r+0x2f8>
 800ee44:	4b23      	ldr	r3, [pc, #140]	; (800eed4 <_dtoa_r+0x2f4>)
 800ee46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ee4a:	e6df      	b.n	800ec0c <_dtoa_r+0x2c>
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	e7dd      	b.n	800ee0c <_dtoa_r+0x22c>
 800ee50:	2200      	movs	r2, #0
 800ee52:	9208      	str	r2, [sp, #32]
 800ee54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee56:	eb0b 0a02 	add.w	sl, fp, r2
 800ee5a:	f10a 0901 	add.w	r9, sl, #1
 800ee5e:	464a      	mov	r2, r9
 800ee60:	2a01      	cmp	r2, #1
 800ee62:	bfb8      	it	lt
 800ee64:	2201      	movlt	r2, #1
 800ee66:	e7db      	b.n	800ee20 <_dtoa_r+0x240>
 800ee68:	2201      	movs	r2, #1
 800ee6a:	e7f2      	b.n	800ee52 <_dtoa_r+0x272>
 800ee6c:	2401      	movs	r4, #1
 800ee6e:	2200      	movs	r2, #0
 800ee70:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ee74:	f04f 3aff 	mov.w	sl, #4294967295
 800ee78:	2100      	movs	r1, #0
 800ee7a:	46d1      	mov	r9, sl
 800ee7c:	2212      	movs	r2, #18
 800ee7e:	9109      	str	r1, [sp, #36]	; 0x24
 800ee80:	e7ce      	b.n	800ee20 <_dtoa_r+0x240>
 800ee82:	2201      	movs	r2, #1
 800ee84:	9208      	str	r2, [sp, #32]
 800ee86:	e7f5      	b.n	800ee74 <_dtoa_r+0x294>
 800ee88:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800ee8c:	46d1      	mov	r9, sl
 800ee8e:	4652      	mov	r2, sl
 800ee90:	e7c6      	b.n	800ee20 <_dtoa_r+0x240>
 800ee92:	3101      	adds	r1, #1
 800ee94:	6079      	str	r1, [r7, #4]
 800ee96:	0040      	lsls	r0, r0, #1
 800ee98:	e7c6      	b.n	800ee28 <_dtoa_r+0x248>
 800ee9a:	bf00      	nop
 800ee9c:	f3af 8000 	nop.w
 800eea0:	636f4361 	.word	0x636f4361
 800eea4:	3fd287a7 	.word	0x3fd287a7
 800eea8:	8b60c8b3 	.word	0x8b60c8b3
 800eeac:	3fc68a28 	.word	0x3fc68a28
 800eeb0:	509f79fb 	.word	0x509f79fb
 800eeb4:	3fd34413 	.word	0x3fd34413
 800eeb8:	0801b19d 	.word	0x0801b19d
 800eebc:	0801b1b4 	.word	0x0801b1b4
 800eec0:	7ff00000 	.word	0x7ff00000
 800eec4:	0801b199 	.word	0x0801b199
 800eec8:	0801b190 	.word	0x0801b190
 800eecc:	0801b16d 	.word	0x0801b16d
 800eed0:	0801b2b0 	.word	0x0801b2b0
 800eed4:	0801b213 	.word	0x0801b213
 800eed8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800eeda:	9900      	ldr	r1, [sp, #0]
 800eedc:	6011      	str	r1, [r2, #0]
 800eede:	f1b9 0f0e 	cmp.w	r9, #14
 800eee2:	d872      	bhi.n	800efca <_dtoa_r+0x3ea>
 800eee4:	2c00      	cmp	r4, #0
 800eee6:	d070      	beq.n	800efca <_dtoa_r+0x3ea>
 800eee8:	f1bb 0f00 	cmp.w	fp, #0
 800eeec:	f340 80a6 	ble.w	800f03c <_dtoa_r+0x45c>
 800eef0:	49ca      	ldr	r1, [pc, #808]	; (800f21c <_dtoa_r+0x63c>)
 800eef2:	f00b 020f 	and.w	r2, fp, #15
 800eef6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800eefa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800eefe:	ed92 7b00 	vldr	d7, [r2]
 800ef02:	ea4f 112b 	mov.w	r1, fp, asr #4
 800ef06:	f000 808d 	beq.w	800f024 <_dtoa_r+0x444>
 800ef0a:	4ac5      	ldr	r2, [pc, #788]	; (800f220 <_dtoa_r+0x640>)
 800ef0c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800ef10:	ed92 6b08 	vldr	d6, [r2, #32]
 800ef14:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800ef18:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ef1c:	f001 010f 	and.w	r1, r1, #15
 800ef20:	2203      	movs	r2, #3
 800ef22:	48bf      	ldr	r0, [pc, #764]	; (800f220 <_dtoa_r+0x640>)
 800ef24:	2900      	cmp	r1, #0
 800ef26:	d17f      	bne.n	800f028 <_dtoa_r+0x448>
 800ef28:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ef2c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ef30:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ef34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ef36:	2900      	cmp	r1, #0
 800ef38:	f000 80b2 	beq.w	800f0a0 <_dtoa_r+0x4c0>
 800ef3c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ef40:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef44:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ef48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef4c:	f140 80a8 	bpl.w	800f0a0 <_dtoa_r+0x4c0>
 800ef50:	f1b9 0f00 	cmp.w	r9, #0
 800ef54:	f000 80a4 	beq.w	800f0a0 <_dtoa_r+0x4c0>
 800ef58:	f1ba 0f00 	cmp.w	sl, #0
 800ef5c:	dd31      	ble.n	800efc2 <_dtoa_r+0x3e2>
 800ef5e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ef62:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ef66:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ef6a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ef6e:	3201      	adds	r2, #1
 800ef70:	4650      	mov	r0, sl
 800ef72:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ef76:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ef7a:	ee07 2a90 	vmov	s15, r2
 800ef7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ef82:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ef86:	ed8d 5b02 	vstr	d5, [sp, #8]
 800ef8a:	9c03      	ldr	r4, [sp, #12]
 800ef8c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ef90:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800ef94:	2800      	cmp	r0, #0
 800ef96:	f040 8086 	bne.w	800f0a6 <_dtoa_r+0x4c6>
 800ef9a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ef9e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800efa2:	ec42 1b17 	vmov	d7, r1, r2
 800efa6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800efaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efae:	f300 8272 	bgt.w	800f496 <_dtoa_r+0x8b6>
 800efb2:	eeb1 7b47 	vneg.f64	d7, d7
 800efb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800efba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efbe:	f100 8267 	bmi.w	800f490 <_dtoa_r+0x8b0>
 800efc2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800efc6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800efca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800efcc:	2a00      	cmp	r2, #0
 800efce:	f2c0 8129 	blt.w	800f224 <_dtoa_r+0x644>
 800efd2:	f1bb 0f0e 	cmp.w	fp, #14
 800efd6:	f300 8125 	bgt.w	800f224 <_dtoa_r+0x644>
 800efda:	4b90      	ldr	r3, [pc, #576]	; (800f21c <_dtoa_r+0x63c>)
 800efdc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800efe0:	ed93 6b00 	vldr	d6, [r3]
 800efe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	f280 80c3 	bge.w	800f172 <_dtoa_r+0x592>
 800efec:	f1b9 0f00 	cmp.w	r9, #0
 800eff0:	f300 80bf 	bgt.w	800f172 <_dtoa_r+0x592>
 800eff4:	f040 824c 	bne.w	800f490 <_dtoa_r+0x8b0>
 800eff8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800effc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f000:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f004:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f00c:	464c      	mov	r4, r9
 800f00e:	464f      	mov	r7, r9
 800f010:	f280 8222 	bge.w	800f458 <_dtoa_r+0x878>
 800f014:	f8dd 8000 	ldr.w	r8, [sp]
 800f018:	2331      	movs	r3, #49	; 0x31
 800f01a:	f808 3b01 	strb.w	r3, [r8], #1
 800f01e:	f10b 0b01 	add.w	fp, fp, #1
 800f022:	e21e      	b.n	800f462 <_dtoa_r+0x882>
 800f024:	2202      	movs	r2, #2
 800f026:	e77c      	b.n	800ef22 <_dtoa_r+0x342>
 800f028:	07cc      	lsls	r4, r1, #31
 800f02a:	d504      	bpl.n	800f036 <_dtoa_r+0x456>
 800f02c:	ed90 6b00 	vldr	d6, [r0]
 800f030:	3201      	adds	r2, #1
 800f032:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f036:	1049      	asrs	r1, r1, #1
 800f038:	3008      	adds	r0, #8
 800f03a:	e773      	b.n	800ef24 <_dtoa_r+0x344>
 800f03c:	d02e      	beq.n	800f09c <_dtoa_r+0x4bc>
 800f03e:	f1cb 0100 	rsb	r1, fp, #0
 800f042:	4a76      	ldr	r2, [pc, #472]	; (800f21c <_dtoa_r+0x63c>)
 800f044:	f001 000f 	and.w	r0, r1, #15
 800f048:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f04c:	ed92 7b00 	vldr	d7, [r2]
 800f050:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800f054:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f058:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f05c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800f060:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800f064:	486e      	ldr	r0, [pc, #440]	; (800f220 <_dtoa_r+0x640>)
 800f066:	1109      	asrs	r1, r1, #4
 800f068:	2400      	movs	r4, #0
 800f06a:	2202      	movs	r2, #2
 800f06c:	b939      	cbnz	r1, 800f07e <_dtoa_r+0x49e>
 800f06e:	2c00      	cmp	r4, #0
 800f070:	f43f af60 	beq.w	800ef34 <_dtoa_r+0x354>
 800f074:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f07c:	e75a      	b.n	800ef34 <_dtoa_r+0x354>
 800f07e:	07cf      	lsls	r7, r1, #31
 800f080:	d509      	bpl.n	800f096 <_dtoa_r+0x4b6>
 800f082:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800f086:	ed90 7b00 	vldr	d7, [r0]
 800f08a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f08e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f092:	3201      	adds	r2, #1
 800f094:	2401      	movs	r4, #1
 800f096:	1049      	asrs	r1, r1, #1
 800f098:	3008      	adds	r0, #8
 800f09a:	e7e7      	b.n	800f06c <_dtoa_r+0x48c>
 800f09c:	2202      	movs	r2, #2
 800f09e:	e749      	b.n	800ef34 <_dtoa_r+0x354>
 800f0a0:	465f      	mov	r7, fp
 800f0a2:	4648      	mov	r0, r9
 800f0a4:	e765      	b.n	800ef72 <_dtoa_r+0x392>
 800f0a6:	ec42 1b17 	vmov	d7, r1, r2
 800f0aa:	4a5c      	ldr	r2, [pc, #368]	; (800f21c <_dtoa_r+0x63c>)
 800f0ac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f0b0:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f0b4:	9a00      	ldr	r2, [sp, #0]
 800f0b6:	1814      	adds	r4, r2, r0
 800f0b8:	9a08      	ldr	r2, [sp, #32]
 800f0ba:	b352      	cbz	r2, 800f112 <_dtoa_r+0x532>
 800f0bc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f0c0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f0c4:	f8dd 8000 	ldr.w	r8, [sp]
 800f0c8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f0cc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f0d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f0d4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f0d8:	ee14 2a90 	vmov	r2, s9
 800f0dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f0e0:	3230      	adds	r2, #48	; 0x30
 800f0e2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f0e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ee:	f808 2b01 	strb.w	r2, [r8], #1
 800f0f2:	d439      	bmi.n	800f168 <_dtoa_r+0x588>
 800f0f4:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f0f8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f100:	d472      	bmi.n	800f1e8 <_dtoa_r+0x608>
 800f102:	45a0      	cmp	r8, r4
 800f104:	f43f af5d 	beq.w	800efc2 <_dtoa_r+0x3e2>
 800f108:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f10c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f110:	e7e0      	b.n	800f0d4 <_dtoa_r+0x4f4>
 800f112:	f8dd 8000 	ldr.w	r8, [sp]
 800f116:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f11a:	4621      	mov	r1, r4
 800f11c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f120:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f124:	ee14 2a90 	vmov	r2, s9
 800f128:	3230      	adds	r2, #48	; 0x30
 800f12a:	f808 2b01 	strb.w	r2, [r8], #1
 800f12e:	45a0      	cmp	r8, r4
 800f130:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f134:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f138:	d118      	bne.n	800f16c <_dtoa_r+0x58c>
 800f13a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f13e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f142:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f14a:	dc4d      	bgt.n	800f1e8 <_dtoa_r+0x608>
 800f14c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f150:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f158:	f57f af33 	bpl.w	800efc2 <_dtoa_r+0x3e2>
 800f15c:	4688      	mov	r8, r1
 800f15e:	3901      	subs	r1, #1
 800f160:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f164:	2b30      	cmp	r3, #48	; 0x30
 800f166:	d0f9      	beq.n	800f15c <_dtoa_r+0x57c>
 800f168:	46bb      	mov	fp, r7
 800f16a:	e02a      	b.n	800f1c2 <_dtoa_r+0x5e2>
 800f16c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f170:	e7d6      	b.n	800f120 <_dtoa_r+0x540>
 800f172:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f176:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f17a:	f8dd 8000 	ldr.w	r8, [sp]
 800f17e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f182:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f186:	ee15 3a10 	vmov	r3, s10
 800f18a:	3330      	adds	r3, #48	; 0x30
 800f18c:	f808 3b01 	strb.w	r3, [r8], #1
 800f190:	9b00      	ldr	r3, [sp, #0]
 800f192:	eba8 0303 	sub.w	r3, r8, r3
 800f196:	4599      	cmp	r9, r3
 800f198:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f19c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f1a0:	d133      	bne.n	800f20a <_dtoa_r+0x62a>
 800f1a2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f1a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ae:	dc1a      	bgt.n	800f1e6 <_dtoa_r+0x606>
 800f1b0:	eeb4 7b46 	vcmp.f64	d7, d6
 800f1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1b8:	d103      	bne.n	800f1c2 <_dtoa_r+0x5e2>
 800f1ba:	ee15 3a10 	vmov	r3, s10
 800f1be:	07d9      	lsls	r1, r3, #31
 800f1c0:	d411      	bmi.n	800f1e6 <_dtoa_r+0x606>
 800f1c2:	4629      	mov	r1, r5
 800f1c4:	4630      	mov	r0, r6
 800f1c6:	f000 fad9 	bl	800f77c <_Bfree>
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f1ce:	f888 3000 	strb.w	r3, [r8]
 800f1d2:	f10b 0301 	add.w	r3, fp, #1
 800f1d6:	6013      	str	r3, [r2, #0]
 800f1d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	f43f ad4d 	beq.w	800ec7a <_dtoa_r+0x9a>
 800f1e0:	f8c3 8000 	str.w	r8, [r3]
 800f1e4:	e549      	b.n	800ec7a <_dtoa_r+0x9a>
 800f1e6:	465f      	mov	r7, fp
 800f1e8:	4643      	mov	r3, r8
 800f1ea:	4698      	mov	r8, r3
 800f1ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f1f0:	2a39      	cmp	r2, #57	; 0x39
 800f1f2:	d106      	bne.n	800f202 <_dtoa_r+0x622>
 800f1f4:	9a00      	ldr	r2, [sp, #0]
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d1f7      	bne.n	800f1ea <_dtoa_r+0x60a>
 800f1fa:	9900      	ldr	r1, [sp, #0]
 800f1fc:	2230      	movs	r2, #48	; 0x30
 800f1fe:	3701      	adds	r7, #1
 800f200:	700a      	strb	r2, [r1, #0]
 800f202:	781a      	ldrb	r2, [r3, #0]
 800f204:	3201      	adds	r2, #1
 800f206:	701a      	strb	r2, [r3, #0]
 800f208:	e7ae      	b.n	800f168 <_dtoa_r+0x588>
 800f20a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f20e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f216:	d1b2      	bne.n	800f17e <_dtoa_r+0x59e>
 800f218:	e7d3      	b.n	800f1c2 <_dtoa_r+0x5e2>
 800f21a:	bf00      	nop
 800f21c:	0801b2b0 	.word	0x0801b2b0
 800f220:	0801b288 	.word	0x0801b288
 800f224:	9908      	ldr	r1, [sp, #32]
 800f226:	2900      	cmp	r1, #0
 800f228:	f000 80d1 	beq.w	800f3ce <_dtoa_r+0x7ee>
 800f22c:	9907      	ldr	r1, [sp, #28]
 800f22e:	2901      	cmp	r1, #1
 800f230:	f300 80b4 	bgt.w	800f39c <_dtoa_r+0x7bc>
 800f234:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f236:	2900      	cmp	r1, #0
 800f238:	f000 80ac 	beq.w	800f394 <_dtoa_r+0x7b4>
 800f23c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f240:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f244:	461c      	mov	r4, r3
 800f246:	930a      	str	r3, [sp, #40]	; 0x28
 800f248:	9b05      	ldr	r3, [sp, #20]
 800f24a:	4413      	add	r3, r2
 800f24c:	9305      	str	r3, [sp, #20]
 800f24e:	9b06      	ldr	r3, [sp, #24]
 800f250:	2101      	movs	r1, #1
 800f252:	4413      	add	r3, r2
 800f254:	4630      	mov	r0, r6
 800f256:	9306      	str	r3, [sp, #24]
 800f258:	f000 fb4c 	bl	800f8f4 <__i2b>
 800f25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f25e:	4607      	mov	r7, r0
 800f260:	f1b8 0f00 	cmp.w	r8, #0
 800f264:	dd0d      	ble.n	800f282 <_dtoa_r+0x6a2>
 800f266:	9a06      	ldr	r2, [sp, #24]
 800f268:	2a00      	cmp	r2, #0
 800f26a:	dd0a      	ble.n	800f282 <_dtoa_r+0x6a2>
 800f26c:	4542      	cmp	r2, r8
 800f26e:	9905      	ldr	r1, [sp, #20]
 800f270:	bfa8      	it	ge
 800f272:	4642      	movge	r2, r8
 800f274:	1a89      	subs	r1, r1, r2
 800f276:	9105      	str	r1, [sp, #20]
 800f278:	9906      	ldr	r1, [sp, #24]
 800f27a:	eba8 0802 	sub.w	r8, r8, r2
 800f27e:	1a8a      	subs	r2, r1, r2
 800f280:	9206      	str	r2, [sp, #24]
 800f282:	b303      	cbz	r3, 800f2c6 <_dtoa_r+0x6e6>
 800f284:	9a08      	ldr	r2, [sp, #32]
 800f286:	2a00      	cmp	r2, #0
 800f288:	f000 80a6 	beq.w	800f3d8 <_dtoa_r+0x7f8>
 800f28c:	2c00      	cmp	r4, #0
 800f28e:	dd13      	ble.n	800f2b8 <_dtoa_r+0x6d8>
 800f290:	4639      	mov	r1, r7
 800f292:	4622      	mov	r2, r4
 800f294:	4630      	mov	r0, r6
 800f296:	930c      	str	r3, [sp, #48]	; 0x30
 800f298:	f000 fbe8 	bl	800fa6c <__pow5mult>
 800f29c:	462a      	mov	r2, r5
 800f29e:	4601      	mov	r1, r0
 800f2a0:	4607      	mov	r7, r0
 800f2a2:	4630      	mov	r0, r6
 800f2a4:	f000 fb3c 	bl	800f920 <__multiply>
 800f2a8:	4629      	mov	r1, r5
 800f2aa:	900a      	str	r0, [sp, #40]	; 0x28
 800f2ac:	4630      	mov	r0, r6
 800f2ae:	f000 fa65 	bl	800f77c <_Bfree>
 800f2b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2b6:	4615      	mov	r5, r2
 800f2b8:	1b1a      	subs	r2, r3, r4
 800f2ba:	d004      	beq.n	800f2c6 <_dtoa_r+0x6e6>
 800f2bc:	4629      	mov	r1, r5
 800f2be:	4630      	mov	r0, r6
 800f2c0:	f000 fbd4 	bl	800fa6c <__pow5mult>
 800f2c4:	4605      	mov	r5, r0
 800f2c6:	2101      	movs	r1, #1
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	f000 fb13 	bl	800f8f4 <__i2b>
 800f2ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	f340 8082 	ble.w	800f3dc <_dtoa_r+0x7fc>
 800f2d8:	461a      	mov	r2, r3
 800f2da:	4601      	mov	r1, r0
 800f2dc:	4630      	mov	r0, r6
 800f2de:	f000 fbc5 	bl	800fa6c <__pow5mult>
 800f2e2:	9b07      	ldr	r3, [sp, #28]
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	dd7b      	ble.n	800f3e2 <_dtoa_r+0x802>
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	930a      	str	r3, [sp, #40]	; 0x28
 800f2ee:	6922      	ldr	r2, [r4, #16]
 800f2f0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f2f4:	6910      	ldr	r0, [r2, #16]
 800f2f6:	f000 faad 	bl	800f854 <__hi0bits>
 800f2fa:	f1c0 0020 	rsb	r0, r0, #32
 800f2fe:	9b06      	ldr	r3, [sp, #24]
 800f300:	4418      	add	r0, r3
 800f302:	f010 001f 	ands.w	r0, r0, #31
 800f306:	f000 808d 	beq.w	800f424 <_dtoa_r+0x844>
 800f30a:	f1c0 0220 	rsb	r2, r0, #32
 800f30e:	2a04      	cmp	r2, #4
 800f310:	f340 8086 	ble.w	800f420 <_dtoa_r+0x840>
 800f314:	f1c0 001c 	rsb	r0, r0, #28
 800f318:	9b05      	ldr	r3, [sp, #20]
 800f31a:	4403      	add	r3, r0
 800f31c:	9305      	str	r3, [sp, #20]
 800f31e:	9b06      	ldr	r3, [sp, #24]
 800f320:	4403      	add	r3, r0
 800f322:	4480      	add	r8, r0
 800f324:	9306      	str	r3, [sp, #24]
 800f326:	9b05      	ldr	r3, [sp, #20]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	dd05      	ble.n	800f338 <_dtoa_r+0x758>
 800f32c:	4629      	mov	r1, r5
 800f32e:	461a      	mov	r2, r3
 800f330:	4630      	mov	r0, r6
 800f332:	f000 fbf5 	bl	800fb20 <__lshift>
 800f336:	4605      	mov	r5, r0
 800f338:	9b06      	ldr	r3, [sp, #24]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	dd05      	ble.n	800f34a <_dtoa_r+0x76a>
 800f33e:	4621      	mov	r1, r4
 800f340:	461a      	mov	r2, r3
 800f342:	4630      	mov	r0, r6
 800f344:	f000 fbec 	bl	800fb20 <__lshift>
 800f348:	4604      	mov	r4, r0
 800f34a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d06b      	beq.n	800f428 <_dtoa_r+0x848>
 800f350:	4621      	mov	r1, r4
 800f352:	4628      	mov	r0, r5
 800f354:	f000 fc50 	bl	800fbf8 <__mcmp>
 800f358:	2800      	cmp	r0, #0
 800f35a:	da65      	bge.n	800f428 <_dtoa_r+0x848>
 800f35c:	2300      	movs	r3, #0
 800f35e:	4629      	mov	r1, r5
 800f360:	220a      	movs	r2, #10
 800f362:	4630      	mov	r0, r6
 800f364:	f000 fa2c 	bl	800f7c0 <__multadd>
 800f368:	9b08      	ldr	r3, [sp, #32]
 800f36a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f36e:	4605      	mov	r5, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	f000 8192 	beq.w	800f69a <_dtoa_r+0xaba>
 800f376:	4639      	mov	r1, r7
 800f378:	2300      	movs	r3, #0
 800f37a:	220a      	movs	r2, #10
 800f37c:	4630      	mov	r0, r6
 800f37e:	f000 fa1f 	bl	800f7c0 <__multadd>
 800f382:	f1ba 0f00 	cmp.w	sl, #0
 800f386:	4607      	mov	r7, r0
 800f388:	f300 808e 	bgt.w	800f4a8 <_dtoa_r+0x8c8>
 800f38c:	9b07      	ldr	r3, [sp, #28]
 800f38e:	2b02      	cmp	r3, #2
 800f390:	dc51      	bgt.n	800f436 <_dtoa_r+0x856>
 800f392:	e089      	b.n	800f4a8 <_dtoa_r+0x8c8>
 800f394:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f396:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f39a:	e751      	b.n	800f240 <_dtoa_r+0x660>
 800f39c:	f109 34ff 	add.w	r4, r9, #4294967295
 800f3a0:	42a3      	cmp	r3, r4
 800f3a2:	bfbf      	itttt	lt
 800f3a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800f3a6:	1ae3      	sublt	r3, r4, r3
 800f3a8:	18d2      	addlt	r2, r2, r3
 800f3aa:	4613      	movlt	r3, r2
 800f3ac:	bfb7      	itett	lt
 800f3ae:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f3b0:	1b1c      	subge	r4, r3, r4
 800f3b2:	4623      	movlt	r3, r4
 800f3b4:	2400      	movlt	r4, #0
 800f3b6:	f1b9 0f00 	cmp.w	r9, #0
 800f3ba:	bfb5      	itete	lt
 800f3bc:	9a05      	ldrlt	r2, [sp, #20]
 800f3be:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800f3c2:	eba2 0809 	sublt.w	r8, r2, r9
 800f3c6:	464a      	movge	r2, r9
 800f3c8:	bfb8      	it	lt
 800f3ca:	2200      	movlt	r2, #0
 800f3cc:	e73b      	b.n	800f246 <_dtoa_r+0x666>
 800f3ce:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f3d2:	9f08      	ldr	r7, [sp, #32]
 800f3d4:	461c      	mov	r4, r3
 800f3d6:	e743      	b.n	800f260 <_dtoa_r+0x680>
 800f3d8:	461a      	mov	r2, r3
 800f3da:	e76f      	b.n	800f2bc <_dtoa_r+0x6dc>
 800f3dc:	9b07      	ldr	r3, [sp, #28]
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	dc18      	bgt.n	800f414 <_dtoa_r+0x834>
 800f3e2:	9b02      	ldr	r3, [sp, #8]
 800f3e4:	b9b3      	cbnz	r3, 800f414 <_dtoa_r+0x834>
 800f3e6:	9b03      	ldr	r3, [sp, #12]
 800f3e8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f3ec:	b9a2      	cbnz	r2, 800f418 <_dtoa_r+0x838>
 800f3ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f3f2:	0d12      	lsrs	r2, r2, #20
 800f3f4:	0512      	lsls	r2, r2, #20
 800f3f6:	b18a      	cbz	r2, 800f41c <_dtoa_r+0x83c>
 800f3f8:	9b05      	ldr	r3, [sp, #20]
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	9305      	str	r3, [sp, #20]
 800f3fe:	9b06      	ldr	r3, [sp, #24]
 800f400:	3301      	adds	r3, #1
 800f402:	9306      	str	r3, [sp, #24]
 800f404:	2301      	movs	r3, #1
 800f406:	930a      	str	r3, [sp, #40]	; 0x28
 800f408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	f47f af6f 	bne.w	800f2ee <_dtoa_r+0x70e>
 800f410:	2001      	movs	r0, #1
 800f412:	e774      	b.n	800f2fe <_dtoa_r+0x71e>
 800f414:	2300      	movs	r3, #0
 800f416:	e7f6      	b.n	800f406 <_dtoa_r+0x826>
 800f418:	9b02      	ldr	r3, [sp, #8]
 800f41a:	e7f4      	b.n	800f406 <_dtoa_r+0x826>
 800f41c:	920a      	str	r2, [sp, #40]	; 0x28
 800f41e:	e7f3      	b.n	800f408 <_dtoa_r+0x828>
 800f420:	d081      	beq.n	800f326 <_dtoa_r+0x746>
 800f422:	4610      	mov	r0, r2
 800f424:	301c      	adds	r0, #28
 800f426:	e777      	b.n	800f318 <_dtoa_r+0x738>
 800f428:	f1b9 0f00 	cmp.w	r9, #0
 800f42c:	dc37      	bgt.n	800f49e <_dtoa_r+0x8be>
 800f42e:	9b07      	ldr	r3, [sp, #28]
 800f430:	2b02      	cmp	r3, #2
 800f432:	dd34      	ble.n	800f49e <_dtoa_r+0x8be>
 800f434:	46ca      	mov	sl, r9
 800f436:	f1ba 0f00 	cmp.w	sl, #0
 800f43a:	d10d      	bne.n	800f458 <_dtoa_r+0x878>
 800f43c:	4621      	mov	r1, r4
 800f43e:	4653      	mov	r3, sl
 800f440:	2205      	movs	r2, #5
 800f442:	4630      	mov	r0, r6
 800f444:	f000 f9bc 	bl	800f7c0 <__multadd>
 800f448:	4601      	mov	r1, r0
 800f44a:	4604      	mov	r4, r0
 800f44c:	4628      	mov	r0, r5
 800f44e:	f000 fbd3 	bl	800fbf8 <__mcmp>
 800f452:	2800      	cmp	r0, #0
 800f454:	f73f adde 	bgt.w	800f014 <_dtoa_r+0x434>
 800f458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f45a:	f8dd 8000 	ldr.w	r8, [sp]
 800f45e:	ea6f 0b03 	mvn.w	fp, r3
 800f462:	f04f 0900 	mov.w	r9, #0
 800f466:	4621      	mov	r1, r4
 800f468:	4630      	mov	r0, r6
 800f46a:	f000 f987 	bl	800f77c <_Bfree>
 800f46e:	2f00      	cmp	r7, #0
 800f470:	f43f aea7 	beq.w	800f1c2 <_dtoa_r+0x5e2>
 800f474:	f1b9 0f00 	cmp.w	r9, #0
 800f478:	d005      	beq.n	800f486 <_dtoa_r+0x8a6>
 800f47a:	45b9      	cmp	r9, r7
 800f47c:	d003      	beq.n	800f486 <_dtoa_r+0x8a6>
 800f47e:	4649      	mov	r1, r9
 800f480:	4630      	mov	r0, r6
 800f482:	f000 f97b 	bl	800f77c <_Bfree>
 800f486:	4639      	mov	r1, r7
 800f488:	4630      	mov	r0, r6
 800f48a:	f000 f977 	bl	800f77c <_Bfree>
 800f48e:	e698      	b.n	800f1c2 <_dtoa_r+0x5e2>
 800f490:	2400      	movs	r4, #0
 800f492:	4627      	mov	r7, r4
 800f494:	e7e0      	b.n	800f458 <_dtoa_r+0x878>
 800f496:	46bb      	mov	fp, r7
 800f498:	4604      	mov	r4, r0
 800f49a:	4607      	mov	r7, r0
 800f49c:	e5ba      	b.n	800f014 <_dtoa_r+0x434>
 800f49e:	9b08      	ldr	r3, [sp, #32]
 800f4a0:	46ca      	mov	sl, r9
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	f000 8100 	beq.w	800f6a8 <_dtoa_r+0xac8>
 800f4a8:	f1b8 0f00 	cmp.w	r8, #0
 800f4ac:	dd05      	ble.n	800f4ba <_dtoa_r+0x8da>
 800f4ae:	4639      	mov	r1, r7
 800f4b0:	4642      	mov	r2, r8
 800f4b2:	4630      	mov	r0, r6
 800f4b4:	f000 fb34 	bl	800fb20 <__lshift>
 800f4b8:	4607      	mov	r7, r0
 800f4ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d05d      	beq.n	800f57c <_dtoa_r+0x99c>
 800f4c0:	6879      	ldr	r1, [r7, #4]
 800f4c2:	4630      	mov	r0, r6
 800f4c4:	f000 f91a 	bl	800f6fc <_Balloc>
 800f4c8:	4680      	mov	r8, r0
 800f4ca:	b928      	cbnz	r0, 800f4d8 <_dtoa_r+0x8f8>
 800f4cc:	4b82      	ldr	r3, [pc, #520]	; (800f6d8 <_dtoa_r+0xaf8>)
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f4d4:	f7ff bb9a 	b.w	800ec0c <_dtoa_r+0x2c>
 800f4d8:	693a      	ldr	r2, [r7, #16]
 800f4da:	3202      	adds	r2, #2
 800f4dc:	0092      	lsls	r2, r2, #2
 800f4de:	f107 010c 	add.w	r1, r7, #12
 800f4e2:	300c      	adds	r0, #12
 800f4e4:	f7fe fe6e 	bl	800e1c4 <memcpy>
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	4641      	mov	r1, r8
 800f4ec:	4630      	mov	r0, r6
 800f4ee:	f000 fb17 	bl	800fb20 <__lshift>
 800f4f2:	9b00      	ldr	r3, [sp, #0]
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	9305      	str	r3, [sp, #20]
 800f4f8:	9b00      	ldr	r3, [sp, #0]
 800f4fa:	4453      	add	r3, sl
 800f4fc:	9309      	str	r3, [sp, #36]	; 0x24
 800f4fe:	9b02      	ldr	r3, [sp, #8]
 800f500:	f003 0301 	and.w	r3, r3, #1
 800f504:	46b9      	mov	r9, r7
 800f506:	9308      	str	r3, [sp, #32]
 800f508:	4607      	mov	r7, r0
 800f50a:	9b05      	ldr	r3, [sp, #20]
 800f50c:	4621      	mov	r1, r4
 800f50e:	3b01      	subs	r3, #1
 800f510:	4628      	mov	r0, r5
 800f512:	9302      	str	r3, [sp, #8]
 800f514:	f7ff fad6 	bl	800eac4 <quorem>
 800f518:	4603      	mov	r3, r0
 800f51a:	3330      	adds	r3, #48	; 0x30
 800f51c:	9006      	str	r0, [sp, #24]
 800f51e:	4649      	mov	r1, r9
 800f520:	4628      	mov	r0, r5
 800f522:	930a      	str	r3, [sp, #40]	; 0x28
 800f524:	f000 fb68 	bl	800fbf8 <__mcmp>
 800f528:	463a      	mov	r2, r7
 800f52a:	4682      	mov	sl, r0
 800f52c:	4621      	mov	r1, r4
 800f52e:	4630      	mov	r0, r6
 800f530:	f000 fb7e 	bl	800fc30 <__mdiff>
 800f534:	68c2      	ldr	r2, [r0, #12]
 800f536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f538:	4680      	mov	r8, r0
 800f53a:	bb0a      	cbnz	r2, 800f580 <_dtoa_r+0x9a0>
 800f53c:	4601      	mov	r1, r0
 800f53e:	4628      	mov	r0, r5
 800f540:	f000 fb5a 	bl	800fbf8 <__mcmp>
 800f544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f546:	4602      	mov	r2, r0
 800f548:	4641      	mov	r1, r8
 800f54a:	4630      	mov	r0, r6
 800f54c:	920e      	str	r2, [sp, #56]	; 0x38
 800f54e:	930a      	str	r3, [sp, #40]	; 0x28
 800f550:	f000 f914 	bl	800f77c <_Bfree>
 800f554:	9b07      	ldr	r3, [sp, #28]
 800f556:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f558:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f55c:	ea43 0102 	orr.w	r1, r3, r2
 800f560:	9b08      	ldr	r3, [sp, #32]
 800f562:	430b      	orrs	r3, r1
 800f564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f566:	d10d      	bne.n	800f584 <_dtoa_r+0x9a4>
 800f568:	2b39      	cmp	r3, #57	; 0x39
 800f56a:	d029      	beq.n	800f5c0 <_dtoa_r+0x9e0>
 800f56c:	f1ba 0f00 	cmp.w	sl, #0
 800f570:	dd01      	ble.n	800f576 <_dtoa_r+0x996>
 800f572:	9b06      	ldr	r3, [sp, #24]
 800f574:	3331      	adds	r3, #49	; 0x31
 800f576:	9a02      	ldr	r2, [sp, #8]
 800f578:	7013      	strb	r3, [r2, #0]
 800f57a:	e774      	b.n	800f466 <_dtoa_r+0x886>
 800f57c:	4638      	mov	r0, r7
 800f57e:	e7b8      	b.n	800f4f2 <_dtoa_r+0x912>
 800f580:	2201      	movs	r2, #1
 800f582:	e7e1      	b.n	800f548 <_dtoa_r+0x968>
 800f584:	f1ba 0f00 	cmp.w	sl, #0
 800f588:	db06      	blt.n	800f598 <_dtoa_r+0x9b8>
 800f58a:	9907      	ldr	r1, [sp, #28]
 800f58c:	ea41 0a0a 	orr.w	sl, r1, sl
 800f590:	9908      	ldr	r1, [sp, #32]
 800f592:	ea5a 0101 	orrs.w	r1, sl, r1
 800f596:	d120      	bne.n	800f5da <_dtoa_r+0x9fa>
 800f598:	2a00      	cmp	r2, #0
 800f59a:	ddec      	ble.n	800f576 <_dtoa_r+0x996>
 800f59c:	4629      	mov	r1, r5
 800f59e:	2201      	movs	r2, #1
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	9305      	str	r3, [sp, #20]
 800f5a4:	f000 fabc 	bl	800fb20 <__lshift>
 800f5a8:	4621      	mov	r1, r4
 800f5aa:	4605      	mov	r5, r0
 800f5ac:	f000 fb24 	bl	800fbf8 <__mcmp>
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	9b05      	ldr	r3, [sp, #20]
 800f5b4:	dc02      	bgt.n	800f5bc <_dtoa_r+0x9dc>
 800f5b6:	d1de      	bne.n	800f576 <_dtoa_r+0x996>
 800f5b8:	07da      	lsls	r2, r3, #31
 800f5ba:	d5dc      	bpl.n	800f576 <_dtoa_r+0x996>
 800f5bc:	2b39      	cmp	r3, #57	; 0x39
 800f5be:	d1d8      	bne.n	800f572 <_dtoa_r+0x992>
 800f5c0:	9a02      	ldr	r2, [sp, #8]
 800f5c2:	2339      	movs	r3, #57	; 0x39
 800f5c4:	7013      	strb	r3, [r2, #0]
 800f5c6:	4643      	mov	r3, r8
 800f5c8:	4698      	mov	r8, r3
 800f5ca:	3b01      	subs	r3, #1
 800f5cc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800f5d0:	2a39      	cmp	r2, #57	; 0x39
 800f5d2:	d051      	beq.n	800f678 <_dtoa_r+0xa98>
 800f5d4:	3201      	adds	r2, #1
 800f5d6:	701a      	strb	r2, [r3, #0]
 800f5d8:	e745      	b.n	800f466 <_dtoa_r+0x886>
 800f5da:	2a00      	cmp	r2, #0
 800f5dc:	dd03      	ble.n	800f5e6 <_dtoa_r+0xa06>
 800f5de:	2b39      	cmp	r3, #57	; 0x39
 800f5e0:	d0ee      	beq.n	800f5c0 <_dtoa_r+0x9e0>
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	e7c7      	b.n	800f576 <_dtoa_r+0x996>
 800f5e6:	9a05      	ldr	r2, [sp, #20]
 800f5e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f5ea:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f5ee:	428a      	cmp	r2, r1
 800f5f0:	d02b      	beq.n	800f64a <_dtoa_r+0xa6a>
 800f5f2:	4629      	mov	r1, r5
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	220a      	movs	r2, #10
 800f5f8:	4630      	mov	r0, r6
 800f5fa:	f000 f8e1 	bl	800f7c0 <__multadd>
 800f5fe:	45b9      	cmp	r9, r7
 800f600:	4605      	mov	r5, r0
 800f602:	f04f 0300 	mov.w	r3, #0
 800f606:	f04f 020a 	mov.w	r2, #10
 800f60a:	4649      	mov	r1, r9
 800f60c:	4630      	mov	r0, r6
 800f60e:	d107      	bne.n	800f620 <_dtoa_r+0xa40>
 800f610:	f000 f8d6 	bl	800f7c0 <__multadd>
 800f614:	4681      	mov	r9, r0
 800f616:	4607      	mov	r7, r0
 800f618:	9b05      	ldr	r3, [sp, #20]
 800f61a:	3301      	adds	r3, #1
 800f61c:	9305      	str	r3, [sp, #20]
 800f61e:	e774      	b.n	800f50a <_dtoa_r+0x92a>
 800f620:	f000 f8ce 	bl	800f7c0 <__multadd>
 800f624:	4639      	mov	r1, r7
 800f626:	4681      	mov	r9, r0
 800f628:	2300      	movs	r3, #0
 800f62a:	220a      	movs	r2, #10
 800f62c:	4630      	mov	r0, r6
 800f62e:	f000 f8c7 	bl	800f7c0 <__multadd>
 800f632:	4607      	mov	r7, r0
 800f634:	e7f0      	b.n	800f618 <_dtoa_r+0xa38>
 800f636:	f1ba 0f00 	cmp.w	sl, #0
 800f63a:	9a00      	ldr	r2, [sp, #0]
 800f63c:	bfcc      	ite	gt
 800f63e:	46d0      	movgt	r8, sl
 800f640:	f04f 0801 	movle.w	r8, #1
 800f644:	4490      	add	r8, r2
 800f646:	f04f 0900 	mov.w	r9, #0
 800f64a:	4629      	mov	r1, r5
 800f64c:	2201      	movs	r2, #1
 800f64e:	4630      	mov	r0, r6
 800f650:	9302      	str	r3, [sp, #8]
 800f652:	f000 fa65 	bl	800fb20 <__lshift>
 800f656:	4621      	mov	r1, r4
 800f658:	4605      	mov	r5, r0
 800f65a:	f000 facd 	bl	800fbf8 <__mcmp>
 800f65e:	2800      	cmp	r0, #0
 800f660:	dcb1      	bgt.n	800f5c6 <_dtoa_r+0x9e6>
 800f662:	d102      	bne.n	800f66a <_dtoa_r+0xa8a>
 800f664:	9b02      	ldr	r3, [sp, #8]
 800f666:	07db      	lsls	r3, r3, #31
 800f668:	d4ad      	bmi.n	800f5c6 <_dtoa_r+0x9e6>
 800f66a:	4643      	mov	r3, r8
 800f66c:	4698      	mov	r8, r3
 800f66e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f672:	2a30      	cmp	r2, #48	; 0x30
 800f674:	d0fa      	beq.n	800f66c <_dtoa_r+0xa8c>
 800f676:	e6f6      	b.n	800f466 <_dtoa_r+0x886>
 800f678:	9a00      	ldr	r2, [sp, #0]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d1a4      	bne.n	800f5c8 <_dtoa_r+0x9e8>
 800f67e:	f10b 0b01 	add.w	fp, fp, #1
 800f682:	2331      	movs	r3, #49	; 0x31
 800f684:	e778      	b.n	800f578 <_dtoa_r+0x998>
 800f686:	4b15      	ldr	r3, [pc, #84]	; (800f6dc <_dtoa_r+0xafc>)
 800f688:	f7ff bb12 	b.w	800ecb0 <_dtoa_r+0xd0>
 800f68c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f68e:	2b00      	cmp	r3, #0
 800f690:	f47f aaee 	bne.w	800ec70 <_dtoa_r+0x90>
 800f694:	4b12      	ldr	r3, [pc, #72]	; (800f6e0 <_dtoa_r+0xb00>)
 800f696:	f7ff bb0b 	b.w	800ecb0 <_dtoa_r+0xd0>
 800f69a:	f1ba 0f00 	cmp.w	sl, #0
 800f69e:	dc03      	bgt.n	800f6a8 <_dtoa_r+0xac8>
 800f6a0:	9b07      	ldr	r3, [sp, #28]
 800f6a2:	2b02      	cmp	r3, #2
 800f6a4:	f73f aec7 	bgt.w	800f436 <_dtoa_r+0x856>
 800f6a8:	f8dd 8000 	ldr.w	r8, [sp]
 800f6ac:	4621      	mov	r1, r4
 800f6ae:	4628      	mov	r0, r5
 800f6b0:	f7ff fa08 	bl	800eac4 <quorem>
 800f6b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f6b8:	f808 3b01 	strb.w	r3, [r8], #1
 800f6bc:	9a00      	ldr	r2, [sp, #0]
 800f6be:	eba8 0202 	sub.w	r2, r8, r2
 800f6c2:	4592      	cmp	sl, r2
 800f6c4:	ddb7      	ble.n	800f636 <_dtoa_r+0xa56>
 800f6c6:	4629      	mov	r1, r5
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	220a      	movs	r2, #10
 800f6cc:	4630      	mov	r0, r6
 800f6ce:	f000 f877 	bl	800f7c0 <__multadd>
 800f6d2:	4605      	mov	r5, r0
 800f6d4:	e7ea      	b.n	800f6ac <_dtoa_r+0xacc>
 800f6d6:	bf00      	nop
 800f6d8:	0801b213 	.word	0x0801b213
 800f6dc:	0801b16c 	.word	0x0801b16c
 800f6e0:	0801b190 	.word	0x0801b190

0800f6e4 <_localeconv_r>:
 800f6e4:	4800      	ldr	r0, [pc, #0]	; (800f6e8 <_localeconv_r+0x4>)
 800f6e6:	4770      	bx	lr
 800f6e8:	24000560 	.word	0x24000560

0800f6ec <malloc>:
 800f6ec:	4b02      	ldr	r3, [pc, #8]	; (800f6f8 <malloc+0xc>)
 800f6ee:	4601      	mov	r1, r0
 800f6f0:	6818      	ldr	r0, [r3, #0]
 800f6f2:	f000 bbe1 	b.w	800feb8 <_malloc_r>
 800f6f6:	bf00      	nop
 800f6f8:	2400040c 	.word	0x2400040c

0800f6fc <_Balloc>:
 800f6fc:	b570      	push	{r4, r5, r6, lr}
 800f6fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f700:	4604      	mov	r4, r0
 800f702:	460d      	mov	r5, r1
 800f704:	b976      	cbnz	r6, 800f724 <_Balloc+0x28>
 800f706:	2010      	movs	r0, #16
 800f708:	f7ff fff0 	bl	800f6ec <malloc>
 800f70c:	4602      	mov	r2, r0
 800f70e:	6260      	str	r0, [r4, #36]	; 0x24
 800f710:	b920      	cbnz	r0, 800f71c <_Balloc+0x20>
 800f712:	4b18      	ldr	r3, [pc, #96]	; (800f774 <_Balloc+0x78>)
 800f714:	4818      	ldr	r0, [pc, #96]	; (800f778 <_Balloc+0x7c>)
 800f716:	2166      	movs	r1, #102	; 0x66
 800f718:	f000 fd94 	bl	8010244 <__assert_func>
 800f71c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f720:	6006      	str	r6, [r0, #0]
 800f722:	60c6      	str	r6, [r0, #12]
 800f724:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f726:	68f3      	ldr	r3, [r6, #12]
 800f728:	b183      	cbz	r3, 800f74c <_Balloc+0x50>
 800f72a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f72c:	68db      	ldr	r3, [r3, #12]
 800f72e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f732:	b9b8      	cbnz	r0, 800f764 <_Balloc+0x68>
 800f734:	2101      	movs	r1, #1
 800f736:	fa01 f605 	lsl.w	r6, r1, r5
 800f73a:	1d72      	adds	r2, r6, #5
 800f73c:	0092      	lsls	r2, r2, #2
 800f73e:	4620      	mov	r0, r4
 800f740:	f000 fb5a 	bl	800fdf8 <_calloc_r>
 800f744:	b160      	cbz	r0, 800f760 <_Balloc+0x64>
 800f746:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f74a:	e00e      	b.n	800f76a <_Balloc+0x6e>
 800f74c:	2221      	movs	r2, #33	; 0x21
 800f74e:	2104      	movs	r1, #4
 800f750:	4620      	mov	r0, r4
 800f752:	f000 fb51 	bl	800fdf8 <_calloc_r>
 800f756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f758:	60f0      	str	r0, [r6, #12]
 800f75a:	68db      	ldr	r3, [r3, #12]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d1e4      	bne.n	800f72a <_Balloc+0x2e>
 800f760:	2000      	movs	r0, #0
 800f762:	bd70      	pop	{r4, r5, r6, pc}
 800f764:	6802      	ldr	r2, [r0, #0]
 800f766:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f76a:	2300      	movs	r3, #0
 800f76c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f770:	e7f7      	b.n	800f762 <_Balloc+0x66>
 800f772:	bf00      	nop
 800f774:	0801b19d 	.word	0x0801b19d
 800f778:	0801b224 	.word	0x0801b224

0800f77c <_Bfree>:
 800f77c:	b570      	push	{r4, r5, r6, lr}
 800f77e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f780:	4605      	mov	r5, r0
 800f782:	460c      	mov	r4, r1
 800f784:	b976      	cbnz	r6, 800f7a4 <_Bfree+0x28>
 800f786:	2010      	movs	r0, #16
 800f788:	f7ff ffb0 	bl	800f6ec <malloc>
 800f78c:	4602      	mov	r2, r0
 800f78e:	6268      	str	r0, [r5, #36]	; 0x24
 800f790:	b920      	cbnz	r0, 800f79c <_Bfree+0x20>
 800f792:	4b09      	ldr	r3, [pc, #36]	; (800f7b8 <_Bfree+0x3c>)
 800f794:	4809      	ldr	r0, [pc, #36]	; (800f7bc <_Bfree+0x40>)
 800f796:	218a      	movs	r1, #138	; 0x8a
 800f798:	f000 fd54 	bl	8010244 <__assert_func>
 800f79c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7a0:	6006      	str	r6, [r0, #0]
 800f7a2:	60c6      	str	r6, [r0, #12]
 800f7a4:	b13c      	cbz	r4, 800f7b6 <_Bfree+0x3a>
 800f7a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f7a8:	6862      	ldr	r2, [r4, #4]
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f7b0:	6021      	str	r1, [r4, #0]
 800f7b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f7b6:	bd70      	pop	{r4, r5, r6, pc}
 800f7b8:	0801b19d 	.word	0x0801b19d
 800f7bc:	0801b224 	.word	0x0801b224

0800f7c0 <__multadd>:
 800f7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7c4:	690e      	ldr	r6, [r1, #16]
 800f7c6:	4607      	mov	r7, r0
 800f7c8:	4698      	mov	r8, r3
 800f7ca:	460c      	mov	r4, r1
 800f7cc:	f101 0014 	add.w	r0, r1, #20
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	6805      	ldr	r5, [r0, #0]
 800f7d4:	b2a9      	uxth	r1, r5
 800f7d6:	fb02 8101 	mla	r1, r2, r1, r8
 800f7da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f7de:	0c2d      	lsrs	r5, r5, #16
 800f7e0:	fb02 c505 	mla	r5, r2, r5, ip
 800f7e4:	b289      	uxth	r1, r1
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f7ec:	429e      	cmp	r6, r3
 800f7ee:	f840 1b04 	str.w	r1, [r0], #4
 800f7f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f7f6:	dcec      	bgt.n	800f7d2 <__multadd+0x12>
 800f7f8:	f1b8 0f00 	cmp.w	r8, #0
 800f7fc:	d022      	beq.n	800f844 <__multadd+0x84>
 800f7fe:	68a3      	ldr	r3, [r4, #8]
 800f800:	42b3      	cmp	r3, r6
 800f802:	dc19      	bgt.n	800f838 <__multadd+0x78>
 800f804:	6861      	ldr	r1, [r4, #4]
 800f806:	4638      	mov	r0, r7
 800f808:	3101      	adds	r1, #1
 800f80a:	f7ff ff77 	bl	800f6fc <_Balloc>
 800f80e:	4605      	mov	r5, r0
 800f810:	b928      	cbnz	r0, 800f81e <__multadd+0x5e>
 800f812:	4602      	mov	r2, r0
 800f814:	4b0d      	ldr	r3, [pc, #52]	; (800f84c <__multadd+0x8c>)
 800f816:	480e      	ldr	r0, [pc, #56]	; (800f850 <__multadd+0x90>)
 800f818:	21b5      	movs	r1, #181	; 0xb5
 800f81a:	f000 fd13 	bl	8010244 <__assert_func>
 800f81e:	6922      	ldr	r2, [r4, #16]
 800f820:	3202      	adds	r2, #2
 800f822:	f104 010c 	add.w	r1, r4, #12
 800f826:	0092      	lsls	r2, r2, #2
 800f828:	300c      	adds	r0, #12
 800f82a:	f7fe fccb 	bl	800e1c4 <memcpy>
 800f82e:	4621      	mov	r1, r4
 800f830:	4638      	mov	r0, r7
 800f832:	f7ff ffa3 	bl	800f77c <_Bfree>
 800f836:	462c      	mov	r4, r5
 800f838:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f83c:	3601      	adds	r6, #1
 800f83e:	f8c3 8014 	str.w	r8, [r3, #20]
 800f842:	6126      	str	r6, [r4, #16]
 800f844:	4620      	mov	r0, r4
 800f846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f84a:	bf00      	nop
 800f84c:	0801b213 	.word	0x0801b213
 800f850:	0801b224 	.word	0x0801b224

0800f854 <__hi0bits>:
 800f854:	0c03      	lsrs	r3, r0, #16
 800f856:	041b      	lsls	r3, r3, #16
 800f858:	b9d3      	cbnz	r3, 800f890 <__hi0bits+0x3c>
 800f85a:	0400      	lsls	r0, r0, #16
 800f85c:	2310      	movs	r3, #16
 800f85e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f862:	bf04      	itt	eq
 800f864:	0200      	lsleq	r0, r0, #8
 800f866:	3308      	addeq	r3, #8
 800f868:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f86c:	bf04      	itt	eq
 800f86e:	0100      	lsleq	r0, r0, #4
 800f870:	3304      	addeq	r3, #4
 800f872:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f876:	bf04      	itt	eq
 800f878:	0080      	lsleq	r0, r0, #2
 800f87a:	3302      	addeq	r3, #2
 800f87c:	2800      	cmp	r0, #0
 800f87e:	db05      	blt.n	800f88c <__hi0bits+0x38>
 800f880:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f884:	f103 0301 	add.w	r3, r3, #1
 800f888:	bf08      	it	eq
 800f88a:	2320      	moveq	r3, #32
 800f88c:	4618      	mov	r0, r3
 800f88e:	4770      	bx	lr
 800f890:	2300      	movs	r3, #0
 800f892:	e7e4      	b.n	800f85e <__hi0bits+0xa>

0800f894 <__lo0bits>:
 800f894:	6803      	ldr	r3, [r0, #0]
 800f896:	f013 0207 	ands.w	r2, r3, #7
 800f89a:	4601      	mov	r1, r0
 800f89c:	d00b      	beq.n	800f8b6 <__lo0bits+0x22>
 800f89e:	07da      	lsls	r2, r3, #31
 800f8a0:	d424      	bmi.n	800f8ec <__lo0bits+0x58>
 800f8a2:	0798      	lsls	r0, r3, #30
 800f8a4:	bf49      	itett	mi
 800f8a6:	085b      	lsrmi	r3, r3, #1
 800f8a8:	089b      	lsrpl	r3, r3, #2
 800f8aa:	2001      	movmi	r0, #1
 800f8ac:	600b      	strmi	r3, [r1, #0]
 800f8ae:	bf5c      	itt	pl
 800f8b0:	600b      	strpl	r3, [r1, #0]
 800f8b2:	2002      	movpl	r0, #2
 800f8b4:	4770      	bx	lr
 800f8b6:	b298      	uxth	r0, r3
 800f8b8:	b9b0      	cbnz	r0, 800f8e8 <__lo0bits+0x54>
 800f8ba:	0c1b      	lsrs	r3, r3, #16
 800f8bc:	2010      	movs	r0, #16
 800f8be:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f8c2:	bf04      	itt	eq
 800f8c4:	0a1b      	lsreq	r3, r3, #8
 800f8c6:	3008      	addeq	r0, #8
 800f8c8:	071a      	lsls	r2, r3, #28
 800f8ca:	bf04      	itt	eq
 800f8cc:	091b      	lsreq	r3, r3, #4
 800f8ce:	3004      	addeq	r0, #4
 800f8d0:	079a      	lsls	r2, r3, #30
 800f8d2:	bf04      	itt	eq
 800f8d4:	089b      	lsreq	r3, r3, #2
 800f8d6:	3002      	addeq	r0, #2
 800f8d8:	07da      	lsls	r2, r3, #31
 800f8da:	d403      	bmi.n	800f8e4 <__lo0bits+0x50>
 800f8dc:	085b      	lsrs	r3, r3, #1
 800f8de:	f100 0001 	add.w	r0, r0, #1
 800f8e2:	d005      	beq.n	800f8f0 <__lo0bits+0x5c>
 800f8e4:	600b      	str	r3, [r1, #0]
 800f8e6:	4770      	bx	lr
 800f8e8:	4610      	mov	r0, r2
 800f8ea:	e7e8      	b.n	800f8be <__lo0bits+0x2a>
 800f8ec:	2000      	movs	r0, #0
 800f8ee:	4770      	bx	lr
 800f8f0:	2020      	movs	r0, #32
 800f8f2:	4770      	bx	lr

0800f8f4 <__i2b>:
 800f8f4:	b510      	push	{r4, lr}
 800f8f6:	460c      	mov	r4, r1
 800f8f8:	2101      	movs	r1, #1
 800f8fa:	f7ff feff 	bl	800f6fc <_Balloc>
 800f8fe:	4602      	mov	r2, r0
 800f900:	b928      	cbnz	r0, 800f90e <__i2b+0x1a>
 800f902:	4b05      	ldr	r3, [pc, #20]	; (800f918 <__i2b+0x24>)
 800f904:	4805      	ldr	r0, [pc, #20]	; (800f91c <__i2b+0x28>)
 800f906:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f90a:	f000 fc9b 	bl	8010244 <__assert_func>
 800f90e:	2301      	movs	r3, #1
 800f910:	6144      	str	r4, [r0, #20]
 800f912:	6103      	str	r3, [r0, #16]
 800f914:	bd10      	pop	{r4, pc}
 800f916:	bf00      	nop
 800f918:	0801b213 	.word	0x0801b213
 800f91c:	0801b224 	.word	0x0801b224

0800f920 <__multiply>:
 800f920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f924:	4614      	mov	r4, r2
 800f926:	690a      	ldr	r2, [r1, #16]
 800f928:	6923      	ldr	r3, [r4, #16]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	bfb8      	it	lt
 800f92e:	460b      	movlt	r3, r1
 800f930:	460d      	mov	r5, r1
 800f932:	bfbc      	itt	lt
 800f934:	4625      	movlt	r5, r4
 800f936:	461c      	movlt	r4, r3
 800f938:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f93c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f940:	68ab      	ldr	r3, [r5, #8]
 800f942:	6869      	ldr	r1, [r5, #4]
 800f944:	eb0a 0709 	add.w	r7, sl, r9
 800f948:	42bb      	cmp	r3, r7
 800f94a:	b085      	sub	sp, #20
 800f94c:	bfb8      	it	lt
 800f94e:	3101      	addlt	r1, #1
 800f950:	f7ff fed4 	bl	800f6fc <_Balloc>
 800f954:	b930      	cbnz	r0, 800f964 <__multiply+0x44>
 800f956:	4602      	mov	r2, r0
 800f958:	4b42      	ldr	r3, [pc, #264]	; (800fa64 <__multiply+0x144>)
 800f95a:	4843      	ldr	r0, [pc, #268]	; (800fa68 <__multiply+0x148>)
 800f95c:	f240 115d 	movw	r1, #349	; 0x15d
 800f960:	f000 fc70 	bl	8010244 <__assert_func>
 800f964:	f100 0614 	add.w	r6, r0, #20
 800f968:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f96c:	4633      	mov	r3, r6
 800f96e:	2200      	movs	r2, #0
 800f970:	4543      	cmp	r3, r8
 800f972:	d31e      	bcc.n	800f9b2 <__multiply+0x92>
 800f974:	f105 0c14 	add.w	ip, r5, #20
 800f978:	f104 0314 	add.w	r3, r4, #20
 800f97c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f980:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f984:	9202      	str	r2, [sp, #8]
 800f986:	ebac 0205 	sub.w	r2, ip, r5
 800f98a:	3a15      	subs	r2, #21
 800f98c:	f022 0203 	bic.w	r2, r2, #3
 800f990:	3204      	adds	r2, #4
 800f992:	f105 0115 	add.w	r1, r5, #21
 800f996:	458c      	cmp	ip, r1
 800f998:	bf38      	it	cc
 800f99a:	2204      	movcc	r2, #4
 800f99c:	9201      	str	r2, [sp, #4]
 800f99e:	9a02      	ldr	r2, [sp, #8]
 800f9a0:	9303      	str	r3, [sp, #12]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d808      	bhi.n	800f9b8 <__multiply+0x98>
 800f9a6:	2f00      	cmp	r7, #0
 800f9a8:	dc55      	bgt.n	800fa56 <__multiply+0x136>
 800f9aa:	6107      	str	r7, [r0, #16]
 800f9ac:	b005      	add	sp, #20
 800f9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9b2:	f843 2b04 	str.w	r2, [r3], #4
 800f9b6:	e7db      	b.n	800f970 <__multiply+0x50>
 800f9b8:	f8b3 a000 	ldrh.w	sl, [r3]
 800f9bc:	f1ba 0f00 	cmp.w	sl, #0
 800f9c0:	d020      	beq.n	800fa04 <__multiply+0xe4>
 800f9c2:	f105 0e14 	add.w	lr, r5, #20
 800f9c6:	46b1      	mov	r9, r6
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f9ce:	f8d9 b000 	ldr.w	fp, [r9]
 800f9d2:	b2a1      	uxth	r1, r4
 800f9d4:	fa1f fb8b 	uxth.w	fp, fp
 800f9d8:	fb0a b101 	mla	r1, sl, r1, fp
 800f9dc:	4411      	add	r1, r2
 800f9de:	f8d9 2000 	ldr.w	r2, [r9]
 800f9e2:	0c24      	lsrs	r4, r4, #16
 800f9e4:	0c12      	lsrs	r2, r2, #16
 800f9e6:	fb0a 2404 	mla	r4, sl, r4, r2
 800f9ea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f9ee:	b289      	uxth	r1, r1
 800f9f0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f9f4:	45f4      	cmp	ip, lr
 800f9f6:	f849 1b04 	str.w	r1, [r9], #4
 800f9fa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f9fe:	d8e4      	bhi.n	800f9ca <__multiply+0xaa>
 800fa00:	9901      	ldr	r1, [sp, #4]
 800fa02:	5072      	str	r2, [r6, r1]
 800fa04:	9a03      	ldr	r2, [sp, #12]
 800fa06:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fa0a:	3304      	adds	r3, #4
 800fa0c:	f1b9 0f00 	cmp.w	r9, #0
 800fa10:	d01f      	beq.n	800fa52 <__multiply+0x132>
 800fa12:	6834      	ldr	r4, [r6, #0]
 800fa14:	f105 0114 	add.w	r1, r5, #20
 800fa18:	46b6      	mov	lr, r6
 800fa1a:	f04f 0a00 	mov.w	sl, #0
 800fa1e:	880a      	ldrh	r2, [r1, #0]
 800fa20:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fa24:	fb09 b202 	mla	r2, r9, r2, fp
 800fa28:	4492      	add	sl, r2
 800fa2a:	b2a4      	uxth	r4, r4
 800fa2c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fa30:	f84e 4b04 	str.w	r4, [lr], #4
 800fa34:	f851 4b04 	ldr.w	r4, [r1], #4
 800fa38:	f8be 2000 	ldrh.w	r2, [lr]
 800fa3c:	0c24      	lsrs	r4, r4, #16
 800fa3e:	fb09 2404 	mla	r4, r9, r4, r2
 800fa42:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fa46:	458c      	cmp	ip, r1
 800fa48:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fa4c:	d8e7      	bhi.n	800fa1e <__multiply+0xfe>
 800fa4e:	9a01      	ldr	r2, [sp, #4]
 800fa50:	50b4      	str	r4, [r6, r2]
 800fa52:	3604      	adds	r6, #4
 800fa54:	e7a3      	b.n	800f99e <__multiply+0x7e>
 800fa56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d1a5      	bne.n	800f9aa <__multiply+0x8a>
 800fa5e:	3f01      	subs	r7, #1
 800fa60:	e7a1      	b.n	800f9a6 <__multiply+0x86>
 800fa62:	bf00      	nop
 800fa64:	0801b213 	.word	0x0801b213
 800fa68:	0801b224 	.word	0x0801b224

0800fa6c <__pow5mult>:
 800fa6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa70:	4615      	mov	r5, r2
 800fa72:	f012 0203 	ands.w	r2, r2, #3
 800fa76:	4606      	mov	r6, r0
 800fa78:	460f      	mov	r7, r1
 800fa7a:	d007      	beq.n	800fa8c <__pow5mult+0x20>
 800fa7c:	4c25      	ldr	r4, [pc, #148]	; (800fb14 <__pow5mult+0xa8>)
 800fa7e:	3a01      	subs	r2, #1
 800fa80:	2300      	movs	r3, #0
 800fa82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fa86:	f7ff fe9b 	bl	800f7c0 <__multadd>
 800fa8a:	4607      	mov	r7, r0
 800fa8c:	10ad      	asrs	r5, r5, #2
 800fa8e:	d03d      	beq.n	800fb0c <__pow5mult+0xa0>
 800fa90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fa92:	b97c      	cbnz	r4, 800fab4 <__pow5mult+0x48>
 800fa94:	2010      	movs	r0, #16
 800fa96:	f7ff fe29 	bl	800f6ec <malloc>
 800fa9a:	4602      	mov	r2, r0
 800fa9c:	6270      	str	r0, [r6, #36]	; 0x24
 800fa9e:	b928      	cbnz	r0, 800faac <__pow5mult+0x40>
 800faa0:	4b1d      	ldr	r3, [pc, #116]	; (800fb18 <__pow5mult+0xac>)
 800faa2:	481e      	ldr	r0, [pc, #120]	; (800fb1c <__pow5mult+0xb0>)
 800faa4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800faa8:	f000 fbcc 	bl	8010244 <__assert_func>
 800faac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fab0:	6004      	str	r4, [r0, #0]
 800fab2:	60c4      	str	r4, [r0, #12]
 800fab4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fab8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fabc:	b94c      	cbnz	r4, 800fad2 <__pow5mult+0x66>
 800fabe:	f240 2171 	movw	r1, #625	; 0x271
 800fac2:	4630      	mov	r0, r6
 800fac4:	f7ff ff16 	bl	800f8f4 <__i2b>
 800fac8:	2300      	movs	r3, #0
 800faca:	f8c8 0008 	str.w	r0, [r8, #8]
 800face:	4604      	mov	r4, r0
 800fad0:	6003      	str	r3, [r0, #0]
 800fad2:	f04f 0900 	mov.w	r9, #0
 800fad6:	07eb      	lsls	r3, r5, #31
 800fad8:	d50a      	bpl.n	800faf0 <__pow5mult+0x84>
 800fada:	4639      	mov	r1, r7
 800fadc:	4622      	mov	r2, r4
 800fade:	4630      	mov	r0, r6
 800fae0:	f7ff ff1e 	bl	800f920 <__multiply>
 800fae4:	4639      	mov	r1, r7
 800fae6:	4680      	mov	r8, r0
 800fae8:	4630      	mov	r0, r6
 800faea:	f7ff fe47 	bl	800f77c <_Bfree>
 800faee:	4647      	mov	r7, r8
 800faf0:	106d      	asrs	r5, r5, #1
 800faf2:	d00b      	beq.n	800fb0c <__pow5mult+0xa0>
 800faf4:	6820      	ldr	r0, [r4, #0]
 800faf6:	b938      	cbnz	r0, 800fb08 <__pow5mult+0x9c>
 800faf8:	4622      	mov	r2, r4
 800fafa:	4621      	mov	r1, r4
 800fafc:	4630      	mov	r0, r6
 800fafe:	f7ff ff0f 	bl	800f920 <__multiply>
 800fb02:	6020      	str	r0, [r4, #0]
 800fb04:	f8c0 9000 	str.w	r9, [r0]
 800fb08:	4604      	mov	r4, r0
 800fb0a:	e7e4      	b.n	800fad6 <__pow5mult+0x6a>
 800fb0c:	4638      	mov	r0, r7
 800fb0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb12:	bf00      	nop
 800fb14:	0801b378 	.word	0x0801b378
 800fb18:	0801b19d 	.word	0x0801b19d
 800fb1c:	0801b224 	.word	0x0801b224

0800fb20 <__lshift>:
 800fb20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb24:	460c      	mov	r4, r1
 800fb26:	6849      	ldr	r1, [r1, #4]
 800fb28:	6923      	ldr	r3, [r4, #16]
 800fb2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fb2e:	68a3      	ldr	r3, [r4, #8]
 800fb30:	4607      	mov	r7, r0
 800fb32:	4691      	mov	r9, r2
 800fb34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb38:	f108 0601 	add.w	r6, r8, #1
 800fb3c:	42b3      	cmp	r3, r6
 800fb3e:	db0b      	blt.n	800fb58 <__lshift+0x38>
 800fb40:	4638      	mov	r0, r7
 800fb42:	f7ff fddb 	bl	800f6fc <_Balloc>
 800fb46:	4605      	mov	r5, r0
 800fb48:	b948      	cbnz	r0, 800fb5e <__lshift+0x3e>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	4b28      	ldr	r3, [pc, #160]	; (800fbf0 <__lshift+0xd0>)
 800fb4e:	4829      	ldr	r0, [pc, #164]	; (800fbf4 <__lshift+0xd4>)
 800fb50:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fb54:	f000 fb76 	bl	8010244 <__assert_func>
 800fb58:	3101      	adds	r1, #1
 800fb5a:	005b      	lsls	r3, r3, #1
 800fb5c:	e7ee      	b.n	800fb3c <__lshift+0x1c>
 800fb5e:	2300      	movs	r3, #0
 800fb60:	f100 0114 	add.w	r1, r0, #20
 800fb64:	f100 0210 	add.w	r2, r0, #16
 800fb68:	4618      	mov	r0, r3
 800fb6a:	4553      	cmp	r3, sl
 800fb6c:	db33      	blt.n	800fbd6 <__lshift+0xb6>
 800fb6e:	6920      	ldr	r0, [r4, #16]
 800fb70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb74:	f104 0314 	add.w	r3, r4, #20
 800fb78:	f019 091f 	ands.w	r9, r9, #31
 800fb7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fb80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fb84:	d02b      	beq.n	800fbde <__lshift+0xbe>
 800fb86:	f1c9 0e20 	rsb	lr, r9, #32
 800fb8a:	468a      	mov	sl, r1
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	6818      	ldr	r0, [r3, #0]
 800fb90:	fa00 f009 	lsl.w	r0, r0, r9
 800fb94:	4302      	orrs	r2, r0
 800fb96:	f84a 2b04 	str.w	r2, [sl], #4
 800fb9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb9e:	459c      	cmp	ip, r3
 800fba0:	fa22 f20e 	lsr.w	r2, r2, lr
 800fba4:	d8f3      	bhi.n	800fb8e <__lshift+0x6e>
 800fba6:	ebac 0304 	sub.w	r3, ip, r4
 800fbaa:	3b15      	subs	r3, #21
 800fbac:	f023 0303 	bic.w	r3, r3, #3
 800fbb0:	3304      	adds	r3, #4
 800fbb2:	f104 0015 	add.w	r0, r4, #21
 800fbb6:	4584      	cmp	ip, r0
 800fbb8:	bf38      	it	cc
 800fbba:	2304      	movcc	r3, #4
 800fbbc:	50ca      	str	r2, [r1, r3]
 800fbbe:	b10a      	cbz	r2, 800fbc4 <__lshift+0xa4>
 800fbc0:	f108 0602 	add.w	r6, r8, #2
 800fbc4:	3e01      	subs	r6, #1
 800fbc6:	4638      	mov	r0, r7
 800fbc8:	612e      	str	r6, [r5, #16]
 800fbca:	4621      	mov	r1, r4
 800fbcc:	f7ff fdd6 	bl	800f77c <_Bfree>
 800fbd0:	4628      	mov	r0, r5
 800fbd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbd6:	f842 0f04 	str.w	r0, [r2, #4]!
 800fbda:	3301      	adds	r3, #1
 800fbdc:	e7c5      	b.n	800fb6a <__lshift+0x4a>
 800fbde:	3904      	subs	r1, #4
 800fbe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbe4:	f841 2f04 	str.w	r2, [r1, #4]!
 800fbe8:	459c      	cmp	ip, r3
 800fbea:	d8f9      	bhi.n	800fbe0 <__lshift+0xc0>
 800fbec:	e7ea      	b.n	800fbc4 <__lshift+0xa4>
 800fbee:	bf00      	nop
 800fbf0:	0801b213 	.word	0x0801b213
 800fbf4:	0801b224 	.word	0x0801b224

0800fbf8 <__mcmp>:
 800fbf8:	b530      	push	{r4, r5, lr}
 800fbfa:	6902      	ldr	r2, [r0, #16]
 800fbfc:	690c      	ldr	r4, [r1, #16]
 800fbfe:	1b12      	subs	r2, r2, r4
 800fc00:	d10e      	bne.n	800fc20 <__mcmp+0x28>
 800fc02:	f100 0314 	add.w	r3, r0, #20
 800fc06:	3114      	adds	r1, #20
 800fc08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fc0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fc10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fc14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fc18:	42a5      	cmp	r5, r4
 800fc1a:	d003      	beq.n	800fc24 <__mcmp+0x2c>
 800fc1c:	d305      	bcc.n	800fc2a <__mcmp+0x32>
 800fc1e:	2201      	movs	r2, #1
 800fc20:	4610      	mov	r0, r2
 800fc22:	bd30      	pop	{r4, r5, pc}
 800fc24:	4283      	cmp	r3, r0
 800fc26:	d3f3      	bcc.n	800fc10 <__mcmp+0x18>
 800fc28:	e7fa      	b.n	800fc20 <__mcmp+0x28>
 800fc2a:	f04f 32ff 	mov.w	r2, #4294967295
 800fc2e:	e7f7      	b.n	800fc20 <__mcmp+0x28>

0800fc30 <__mdiff>:
 800fc30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc34:	460c      	mov	r4, r1
 800fc36:	4606      	mov	r6, r0
 800fc38:	4611      	mov	r1, r2
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	4617      	mov	r7, r2
 800fc3e:	f7ff ffdb 	bl	800fbf8 <__mcmp>
 800fc42:	1e05      	subs	r5, r0, #0
 800fc44:	d110      	bne.n	800fc68 <__mdiff+0x38>
 800fc46:	4629      	mov	r1, r5
 800fc48:	4630      	mov	r0, r6
 800fc4a:	f7ff fd57 	bl	800f6fc <_Balloc>
 800fc4e:	b930      	cbnz	r0, 800fc5e <__mdiff+0x2e>
 800fc50:	4b39      	ldr	r3, [pc, #228]	; (800fd38 <__mdiff+0x108>)
 800fc52:	4602      	mov	r2, r0
 800fc54:	f240 2132 	movw	r1, #562	; 0x232
 800fc58:	4838      	ldr	r0, [pc, #224]	; (800fd3c <__mdiff+0x10c>)
 800fc5a:	f000 faf3 	bl	8010244 <__assert_func>
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fc64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc68:	bfa4      	itt	ge
 800fc6a:	463b      	movge	r3, r7
 800fc6c:	4627      	movge	r7, r4
 800fc6e:	4630      	mov	r0, r6
 800fc70:	6879      	ldr	r1, [r7, #4]
 800fc72:	bfa6      	itte	ge
 800fc74:	461c      	movge	r4, r3
 800fc76:	2500      	movge	r5, #0
 800fc78:	2501      	movlt	r5, #1
 800fc7a:	f7ff fd3f 	bl	800f6fc <_Balloc>
 800fc7e:	b920      	cbnz	r0, 800fc8a <__mdiff+0x5a>
 800fc80:	4b2d      	ldr	r3, [pc, #180]	; (800fd38 <__mdiff+0x108>)
 800fc82:	4602      	mov	r2, r0
 800fc84:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fc88:	e7e6      	b.n	800fc58 <__mdiff+0x28>
 800fc8a:	693e      	ldr	r6, [r7, #16]
 800fc8c:	60c5      	str	r5, [r0, #12]
 800fc8e:	6925      	ldr	r5, [r4, #16]
 800fc90:	f107 0114 	add.w	r1, r7, #20
 800fc94:	f104 0914 	add.w	r9, r4, #20
 800fc98:	f100 0e14 	add.w	lr, r0, #20
 800fc9c:	f107 0210 	add.w	r2, r7, #16
 800fca0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fca4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fca8:	46f2      	mov	sl, lr
 800fcaa:	2700      	movs	r7, #0
 800fcac:	f859 3b04 	ldr.w	r3, [r9], #4
 800fcb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fcb4:	fa1f f883 	uxth.w	r8, r3
 800fcb8:	fa17 f78b 	uxtah	r7, r7, fp
 800fcbc:	0c1b      	lsrs	r3, r3, #16
 800fcbe:	eba7 0808 	sub.w	r8, r7, r8
 800fcc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fcc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fcca:	fa1f f888 	uxth.w	r8, r8
 800fcce:	141f      	asrs	r7, r3, #16
 800fcd0:	454d      	cmp	r5, r9
 800fcd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fcd6:	f84a 3b04 	str.w	r3, [sl], #4
 800fcda:	d8e7      	bhi.n	800fcac <__mdiff+0x7c>
 800fcdc:	1b2b      	subs	r3, r5, r4
 800fcde:	3b15      	subs	r3, #21
 800fce0:	f023 0303 	bic.w	r3, r3, #3
 800fce4:	3304      	adds	r3, #4
 800fce6:	3415      	adds	r4, #21
 800fce8:	42a5      	cmp	r5, r4
 800fcea:	bf38      	it	cc
 800fcec:	2304      	movcc	r3, #4
 800fcee:	4419      	add	r1, r3
 800fcf0:	4473      	add	r3, lr
 800fcf2:	469e      	mov	lr, r3
 800fcf4:	460d      	mov	r5, r1
 800fcf6:	4565      	cmp	r5, ip
 800fcf8:	d30e      	bcc.n	800fd18 <__mdiff+0xe8>
 800fcfa:	f10c 0203 	add.w	r2, ip, #3
 800fcfe:	1a52      	subs	r2, r2, r1
 800fd00:	f022 0203 	bic.w	r2, r2, #3
 800fd04:	3903      	subs	r1, #3
 800fd06:	458c      	cmp	ip, r1
 800fd08:	bf38      	it	cc
 800fd0a:	2200      	movcc	r2, #0
 800fd0c:	441a      	add	r2, r3
 800fd0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fd12:	b17b      	cbz	r3, 800fd34 <__mdiff+0x104>
 800fd14:	6106      	str	r6, [r0, #16]
 800fd16:	e7a5      	b.n	800fc64 <__mdiff+0x34>
 800fd18:	f855 8b04 	ldr.w	r8, [r5], #4
 800fd1c:	fa17 f488 	uxtah	r4, r7, r8
 800fd20:	1422      	asrs	r2, r4, #16
 800fd22:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800fd26:	b2a4      	uxth	r4, r4
 800fd28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800fd2c:	f84e 4b04 	str.w	r4, [lr], #4
 800fd30:	1417      	asrs	r7, r2, #16
 800fd32:	e7e0      	b.n	800fcf6 <__mdiff+0xc6>
 800fd34:	3e01      	subs	r6, #1
 800fd36:	e7ea      	b.n	800fd0e <__mdiff+0xde>
 800fd38:	0801b213 	.word	0x0801b213
 800fd3c:	0801b224 	.word	0x0801b224

0800fd40 <__d2b>:
 800fd40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd44:	4689      	mov	r9, r1
 800fd46:	2101      	movs	r1, #1
 800fd48:	ec57 6b10 	vmov	r6, r7, d0
 800fd4c:	4690      	mov	r8, r2
 800fd4e:	f7ff fcd5 	bl	800f6fc <_Balloc>
 800fd52:	4604      	mov	r4, r0
 800fd54:	b930      	cbnz	r0, 800fd64 <__d2b+0x24>
 800fd56:	4602      	mov	r2, r0
 800fd58:	4b25      	ldr	r3, [pc, #148]	; (800fdf0 <__d2b+0xb0>)
 800fd5a:	4826      	ldr	r0, [pc, #152]	; (800fdf4 <__d2b+0xb4>)
 800fd5c:	f240 310a 	movw	r1, #778	; 0x30a
 800fd60:	f000 fa70 	bl	8010244 <__assert_func>
 800fd64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fd68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fd6c:	bb35      	cbnz	r5, 800fdbc <__d2b+0x7c>
 800fd6e:	2e00      	cmp	r6, #0
 800fd70:	9301      	str	r3, [sp, #4]
 800fd72:	d028      	beq.n	800fdc6 <__d2b+0x86>
 800fd74:	4668      	mov	r0, sp
 800fd76:	9600      	str	r6, [sp, #0]
 800fd78:	f7ff fd8c 	bl	800f894 <__lo0bits>
 800fd7c:	9900      	ldr	r1, [sp, #0]
 800fd7e:	b300      	cbz	r0, 800fdc2 <__d2b+0x82>
 800fd80:	9a01      	ldr	r2, [sp, #4]
 800fd82:	f1c0 0320 	rsb	r3, r0, #32
 800fd86:	fa02 f303 	lsl.w	r3, r2, r3
 800fd8a:	430b      	orrs	r3, r1
 800fd8c:	40c2      	lsrs	r2, r0
 800fd8e:	6163      	str	r3, [r4, #20]
 800fd90:	9201      	str	r2, [sp, #4]
 800fd92:	9b01      	ldr	r3, [sp, #4]
 800fd94:	61a3      	str	r3, [r4, #24]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	bf14      	ite	ne
 800fd9a:	2202      	movne	r2, #2
 800fd9c:	2201      	moveq	r2, #1
 800fd9e:	6122      	str	r2, [r4, #16]
 800fda0:	b1d5      	cbz	r5, 800fdd8 <__d2b+0x98>
 800fda2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fda6:	4405      	add	r5, r0
 800fda8:	f8c9 5000 	str.w	r5, [r9]
 800fdac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fdb0:	f8c8 0000 	str.w	r0, [r8]
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	b003      	add	sp, #12
 800fdb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fdc0:	e7d5      	b.n	800fd6e <__d2b+0x2e>
 800fdc2:	6161      	str	r1, [r4, #20]
 800fdc4:	e7e5      	b.n	800fd92 <__d2b+0x52>
 800fdc6:	a801      	add	r0, sp, #4
 800fdc8:	f7ff fd64 	bl	800f894 <__lo0bits>
 800fdcc:	9b01      	ldr	r3, [sp, #4]
 800fdce:	6163      	str	r3, [r4, #20]
 800fdd0:	2201      	movs	r2, #1
 800fdd2:	6122      	str	r2, [r4, #16]
 800fdd4:	3020      	adds	r0, #32
 800fdd6:	e7e3      	b.n	800fda0 <__d2b+0x60>
 800fdd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fddc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fde0:	f8c9 0000 	str.w	r0, [r9]
 800fde4:	6918      	ldr	r0, [r3, #16]
 800fde6:	f7ff fd35 	bl	800f854 <__hi0bits>
 800fdea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fdee:	e7df      	b.n	800fdb0 <__d2b+0x70>
 800fdf0:	0801b213 	.word	0x0801b213
 800fdf4:	0801b224 	.word	0x0801b224

0800fdf8 <_calloc_r>:
 800fdf8:	b513      	push	{r0, r1, r4, lr}
 800fdfa:	434a      	muls	r2, r1
 800fdfc:	4611      	mov	r1, r2
 800fdfe:	9201      	str	r2, [sp, #4]
 800fe00:	f000 f85a 	bl	800feb8 <_malloc_r>
 800fe04:	4604      	mov	r4, r0
 800fe06:	b118      	cbz	r0, 800fe10 <_calloc_r+0x18>
 800fe08:	9a01      	ldr	r2, [sp, #4]
 800fe0a:	2100      	movs	r1, #0
 800fe0c:	f7fe f9e8 	bl	800e1e0 <memset>
 800fe10:	4620      	mov	r0, r4
 800fe12:	b002      	add	sp, #8
 800fe14:	bd10      	pop	{r4, pc}
	...

0800fe18 <_free_r>:
 800fe18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe1a:	2900      	cmp	r1, #0
 800fe1c:	d048      	beq.n	800feb0 <_free_r+0x98>
 800fe1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe22:	9001      	str	r0, [sp, #4]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	f1a1 0404 	sub.w	r4, r1, #4
 800fe2a:	bfb8      	it	lt
 800fe2c:	18e4      	addlt	r4, r4, r3
 800fe2e:	f000 fa65 	bl	80102fc <__malloc_lock>
 800fe32:	4a20      	ldr	r2, [pc, #128]	; (800feb4 <_free_r+0x9c>)
 800fe34:	9801      	ldr	r0, [sp, #4]
 800fe36:	6813      	ldr	r3, [r2, #0]
 800fe38:	4615      	mov	r5, r2
 800fe3a:	b933      	cbnz	r3, 800fe4a <_free_r+0x32>
 800fe3c:	6063      	str	r3, [r4, #4]
 800fe3e:	6014      	str	r4, [r2, #0]
 800fe40:	b003      	add	sp, #12
 800fe42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe46:	f000 ba5f 	b.w	8010308 <__malloc_unlock>
 800fe4a:	42a3      	cmp	r3, r4
 800fe4c:	d90b      	bls.n	800fe66 <_free_r+0x4e>
 800fe4e:	6821      	ldr	r1, [r4, #0]
 800fe50:	1862      	adds	r2, r4, r1
 800fe52:	4293      	cmp	r3, r2
 800fe54:	bf04      	itt	eq
 800fe56:	681a      	ldreq	r2, [r3, #0]
 800fe58:	685b      	ldreq	r3, [r3, #4]
 800fe5a:	6063      	str	r3, [r4, #4]
 800fe5c:	bf04      	itt	eq
 800fe5e:	1852      	addeq	r2, r2, r1
 800fe60:	6022      	streq	r2, [r4, #0]
 800fe62:	602c      	str	r4, [r5, #0]
 800fe64:	e7ec      	b.n	800fe40 <_free_r+0x28>
 800fe66:	461a      	mov	r2, r3
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	b10b      	cbz	r3, 800fe70 <_free_r+0x58>
 800fe6c:	42a3      	cmp	r3, r4
 800fe6e:	d9fa      	bls.n	800fe66 <_free_r+0x4e>
 800fe70:	6811      	ldr	r1, [r2, #0]
 800fe72:	1855      	adds	r5, r2, r1
 800fe74:	42a5      	cmp	r5, r4
 800fe76:	d10b      	bne.n	800fe90 <_free_r+0x78>
 800fe78:	6824      	ldr	r4, [r4, #0]
 800fe7a:	4421      	add	r1, r4
 800fe7c:	1854      	adds	r4, r2, r1
 800fe7e:	42a3      	cmp	r3, r4
 800fe80:	6011      	str	r1, [r2, #0]
 800fe82:	d1dd      	bne.n	800fe40 <_free_r+0x28>
 800fe84:	681c      	ldr	r4, [r3, #0]
 800fe86:	685b      	ldr	r3, [r3, #4]
 800fe88:	6053      	str	r3, [r2, #4]
 800fe8a:	4421      	add	r1, r4
 800fe8c:	6011      	str	r1, [r2, #0]
 800fe8e:	e7d7      	b.n	800fe40 <_free_r+0x28>
 800fe90:	d902      	bls.n	800fe98 <_free_r+0x80>
 800fe92:	230c      	movs	r3, #12
 800fe94:	6003      	str	r3, [r0, #0]
 800fe96:	e7d3      	b.n	800fe40 <_free_r+0x28>
 800fe98:	6825      	ldr	r5, [r4, #0]
 800fe9a:	1961      	adds	r1, r4, r5
 800fe9c:	428b      	cmp	r3, r1
 800fe9e:	bf04      	itt	eq
 800fea0:	6819      	ldreq	r1, [r3, #0]
 800fea2:	685b      	ldreq	r3, [r3, #4]
 800fea4:	6063      	str	r3, [r4, #4]
 800fea6:	bf04      	itt	eq
 800fea8:	1949      	addeq	r1, r1, r5
 800feaa:	6021      	streq	r1, [r4, #0]
 800feac:	6054      	str	r4, [r2, #4]
 800feae:	e7c7      	b.n	800fe40 <_free_r+0x28>
 800feb0:	b003      	add	sp, #12
 800feb2:	bd30      	pop	{r4, r5, pc}
 800feb4:	24000940 	.word	0x24000940

0800feb8 <_malloc_r>:
 800feb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feba:	1ccd      	adds	r5, r1, #3
 800febc:	f025 0503 	bic.w	r5, r5, #3
 800fec0:	3508      	adds	r5, #8
 800fec2:	2d0c      	cmp	r5, #12
 800fec4:	bf38      	it	cc
 800fec6:	250c      	movcc	r5, #12
 800fec8:	2d00      	cmp	r5, #0
 800feca:	4606      	mov	r6, r0
 800fecc:	db01      	blt.n	800fed2 <_malloc_r+0x1a>
 800fece:	42a9      	cmp	r1, r5
 800fed0:	d903      	bls.n	800feda <_malloc_r+0x22>
 800fed2:	230c      	movs	r3, #12
 800fed4:	6033      	str	r3, [r6, #0]
 800fed6:	2000      	movs	r0, #0
 800fed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800feda:	f000 fa0f 	bl	80102fc <__malloc_lock>
 800fede:	4921      	ldr	r1, [pc, #132]	; (800ff64 <_malloc_r+0xac>)
 800fee0:	680a      	ldr	r2, [r1, #0]
 800fee2:	4614      	mov	r4, r2
 800fee4:	b99c      	cbnz	r4, 800ff0e <_malloc_r+0x56>
 800fee6:	4f20      	ldr	r7, [pc, #128]	; (800ff68 <_malloc_r+0xb0>)
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	b923      	cbnz	r3, 800fef6 <_malloc_r+0x3e>
 800feec:	4621      	mov	r1, r4
 800feee:	4630      	mov	r0, r6
 800fef0:	f000 f998 	bl	8010224 <_sbrk_r>
 800fef4:	6038      	str	r0, [r7, #0]
 800fef6:	4629      	mov	r1, r5
 800fef8:	4630      	mov	r0, r6
 800fefa:	f000 f993 	bl	8010224 <_sbrk_r>
 800fefe:	1c43      	adds	r3, r0, #1
 800ff00:	d123      	bne.n	800ff4a <_malloc_r+0x92>
 800ff02:	230c      	movs	r3, #12
 800ff04:	6033      	str	r3, [r6, #0]
 800ff06:	4630      	mov	r0, r6
 800ff08:	f000 f9fe 	bl	8010308 <__malloc_unlock>
 800ff0c:	e7e3      	b.n	800fed6 <_malloc_r+0x1e>
 800ff0e:	6823      	ldr	r3, [r4, #0]
 800ff10:	1b5b      	subs	r3, r3, r5
 800ff12:	d417      	bmi.n	800ff44 <_malloc_r+0x8c>
 800ff14:	2b0b      	cmp	r3, #11
 800ff16:	d903      	bls.n	800ff20 <_malloc_r+0x68>
 800ff18:	6023      	str	r3, [r4, #0]
 800ff1a:	441c      	add	r4, r3
 800ff1c:	6025      	str	r5, [r4, #0]
 800ff1e:	e004      	b.n	800ff2a <_malloc_r+0x72>
 800ff20:	6863      	ldr	r3, [r4, #4]
 800ff22:	42a2      	cmp	r2, r4
 800ff24:	bf0c      	ite	eq
 800ff26:	600b      	streq	r3, [r1, #0]
 800ff28:	6053      	strne	r3, [r2, #4]
 800ff2a:	4630      	mov	r0, r6
 800ff2c:	f000 f9ec 	bl	8010308 <__malloc_unlock>
 800ff30:	f104 000b 	add.w	r0, r4, #11
 800ff34:	1d23      	adds	r3, r4, #4
 800ff36:	f020 0007 	bic.w	r0, r0, #7
 800ff3a:	1ac2      	subs	r2, r0, r3
 800ff3c:	d0cc      	beq.n	800fed8 <_malloc_r+0x20>
 800ff3e:	1a1b      	subs	r3, r3, r0
 800ff40:	50a3      	str	r3, [r4, r2]
 800ff42:	e7c9      	b.n	800fed8 <_malloc_r+0x20>
 800ff44:	4622      	mov	r2, r4
 800ff46:	6864      	ldr	r4, [r4, #4]
 800ff48:	e7cc      	b.n	800fee4 <_malloc_r+0x2c>
 800ff4a:	1cc4      	adds	r4, r0, #3
 800ff4c:	f024 0403 	bic.w	r4, r4, #3
 800ff50:	42a0      	cmp	r0, r4
 800ff52:	d0e3      	beq.n	800ff1c <_malloc_r+0x64>
 800ff54:	1a21      	subs	r1, r4, r0
 800ff56:	4630      	mov	r0, r6
 800ff58:	f000 f964 	bl	8010224 <_sbrk_r>
 800ff5c:	3001      	adds	r0, #1
 800ff5e:	d1dd      	bne.n	800ff1c <_malloc_r+0x64>
 800ff60:	e7cf      	b.n	800ff02 <_malloc_r+0x4a>
 800ff62:	bf00      	nop
 800ff64:	24000940 	.word	0x24000940
 800ff68:	24000944 	.word	0x24000944

0800ff6c <__ssputs_r>:
 800ff6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff70:	688e      	ldr	r6, [r1, #8]
 800ff72:	429e      	cmp	r6, r3
 800ff74:	4682      	mov	sl, r0
 800ff76:	460c      	mov	r4, r1
 800ff78:	4690      	mov	r8, r2
 800ff7a:	461f      	mov	r7, r3
 800ff7c:	d838      	bhi.n	800fff0 <__ssputs_r+0x84>
 800ff7e:	898a      	ldrh	r2, [r1, #12]
 800ff80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ff84:	d032      	beq.n	800ffec <__ssputs_r+0x80>
 800ff86:	6825      	ldr	r5, [r4, #0]
 800ff88:	6909      	ldr	r1, [r1, #16]
 800ff8a:	eba5 0901 	sub.w	r9, r5, r1
 800ff8e:	6965      	ldr	r5, [r4, #20]
 800ff90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ff98:	3301      	adds	r3, #1
 800ff9a:	444b      	add	r3, r9
 800ff9c:	106d      	asrs	r5, r5, #1
 800ff9e:	429d      	cmp	r5, r3
 800ffa0:	bf38      	it	cc
 800ffa2:	461d      	movcc	r5, r3
 800ffa4:	0553      	lsls	r3, r2, #21
 800ffa6:	d531      	bpl.n	801000c <__ssputs_r+0xa0>
 800ffa8:	4629      	mov	r1, r5
 800ffaa:	f7ff ff85 	bl	800feb8 <_malloc_r>
 800ffae:	4606      	mov	r6, r0
 800ffb0:	b950      	cbnz	r0, 800ffc8 <__ssputs_r+0x5c>
 800ffb2:	230c      	movs	r3, #12
 800ffb4:	f8ca 3000 	str.w	r3, [sl]
 800ffb8:	89a3      	ldrh	r3, [r4, #12]
 800ffba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffbe:	81a3      	strh	r3, [r4, #12]
 800ffc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ffc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffc8:	6921      	ldr	r1, [r4, #16]
 800ffca:	464a      	mov	r2, r9
 800ffcc:	f7fe f8fa 	bl	800e1c4 <memcpy>
 800ffd0:	89a3      	ldrh	r3, [r4, #12]
 800ffd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ffd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffda:	81a3      	strh	r3, [r4, #12]
 800ffdc:	6126      	str	r6, [r4, #16]
 800ffde:	6165      	str	r5, [r4, #20]
 800ffe0:	444e      	add	r6, r9
 800ffe2:	eba5 0509 	sub.w	r5, r5, r9
 800ffe6:	6026      	str	r6, [r4, #0]
 800ffe8:	60a5      	str	r5, [r4, #8]
 800ffea:	463e      	mov	r6, r7
 800ffec:	42be      	cmp	r6, r7
 800ffee:	d900      	bls.n	800fff2 <__ssputs_r+0x86>
 800fff0:	463e      	mov	r6, r7
 800fff2:	4632      	mov	r2, r6
 800fff4:	6820      	ldr	r0, [r4, #0]
 800fff6:	4641      	mov	r1, r8
 800fff8:	f000 f966 	bl	80102c8 <memmove>
 800fffc:	68a3      	ldr	r3, [r4, #8]
 800fffe:	6822      	ldr	r2, [r4, #0]
 8010000:	1b9b      	subs	r3, r3, r6
 8010002:	4432      	add	r2, r6
 8010004:	60a3      	str	r3, [r4, #8]
 8010006:	6022      	str	r2, [r4, #0]
 8010008:	2000      	movs	r0, #0
 801000a:	e7db      	b.n	800ffc4 <__ssputs_r+0x58>
 801000c:	462a      	mov	r2, r5
 801000e:	f000 f981 	bl	8010314 <_realloc_r>
 8010012:	4606      	mov	r6, r0
 8010014:	2800      	cmp	r0, #0
 8010016:	d1e1      	bne.n	800ffdc <__ssputs_r+0x70>
 8010018:	6921      	ldr	r1, [r4, #16]
 801001a:	4650      	mov	r0, sl
 801001c:	f7ff fefc 	bl	800fe18 <_free_r>
 8010020:	e7c7      	b.n	800ffb2 <__ssputs_r+0x46>
	...

08010024 <_svfiprintf_r>:
 8010024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010028:	4698      	mov	r8, r3
 801002a:	898b      	ldrh	r3, [r1, #12]
 801002c:	061b      	lsls	r3, r3, #24
 801002e:	b09d      	sub	sp, #116	; 0x74
 8010030:	4607      	mov	r7, r0
 8010032:	460d      	mov	r5, r1
 8010034:	4614      	mov	r4, r2
 8010036:	d50e      	bpl.n	8010056 <_svfiprintf_r+0x32>
 8010038:	690b      	ldr	r3, [r1, #16]
 801003a:	b963      	cbnz	r3, 8010056 <_svfiprintf_r+0x32>
 801003c:	2140      	movs	r1, #64	; 0x40
 801003e:	f7ff ff3b 	bl	800feb8 <_malloc_r>
 8010042:	6028      	str	r0, [r5, #0]
 8010044:	6128      	str	r0, [r5, #16]
 8010046:	b920      	cbnz	r0, 8010052 <_svfiprintf_r+0x2e>
 8010048:	230c      	movs	r3, #12
 801004a:	603b      	str	r3, [r7, #0]
 801004c:	f04f 30ff 	mov.w	r0, #4294967295
 8010050:	e0d1      	b.n	80101f6 <_svfiprintf_r+0x1d2>
 8010052:	2340      	movs	r3, #64	; 0x40
 8010054:	616b      	str	r3, [r5, #20]
 8010056:	2300      	movs	r3, #0
 8010058:	9309      	str	r3, [sp, #36]	; 0x24
 801005a:	2320      	movs	r3, #32
 801005c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010060:	f8cd 800c 	str.w	r8, [sp, #12]
 8010064:	2330      	movs	r3, #48	; 0x30
 8010066:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010210 <_svfiprintf_r+0x1ec>
 801006a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801006e:	f04f 0901 	mov.w	r9, #1
 8010072:	4623      	mov	r3, r4
 8010074:	469a      	mov	sl, r3
 8010076:	f813 2b01 	ldrb.w	r2, [r3], #1
 801007a:	b10a      	cbz	r2, 8010080 <_svfiprintf_r+0x5c>
 801007c:	2a25      	cmp	r2, #37	; 0x25
 801007e:	d1f9      	bne.n	8010074 <_svfiprintf_r+0x50>
 8010080:	ebba 0b04 	subs.w	fp, sl, r4
 8010084:	d00b      	beq.n	801009e <_svfiprintf_r+0x7a>
 8010086:	465b      	mov	r3, fp
 8010088:	4622      	mov	r2, r4
 801008a:	4629      	mov	r1, r5
 801008c:	4638      	mov	r0, r7
 801008e:	f7ff ff6d 	bl	800ff6c <__ssputs_r>
 8010092:	3001      	adds	r0, #1
 8010094:	f000 80aa 	beq.w	80101ec <_svfiprintf_r+0x1c8>
 8010098:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801009a:	445a      	add	r2, fp
 801009c:	9209      	str	r2, [sp, #36]	; 0x24
 801009e:	f89a 3000 	ldrb.w	r3, [sl]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	f000 80a2 	beq.w	80101ec <_svfiprintf_r+0x1c8>
 80100a8:	2300      	movs	r3, #0
 80100aa:	f04f 32ff 	mov.w	r2, #4294967295
 80100ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100b2:	f10a 0a01 	add.w	sl, sl, #1
 80100b6:	9304      	str	r3, [sp, #16]
 80100b8:	9307      	str	r3, [sp, #28]
 80100ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80100be:	931a      	str	r3, [sp, #104]	; 0x68
 80100c0:	4654      	mov	r4, sl
 80100c2:	2205      	movs	r2, #5
 80100c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100c8:	4851      	ldr	r0, [pc, #324]	; (8010210 <_svfiprintf_r+0x1ec>)
 80100ca:	f7f0 f911 	bl	80002f0 <memchr>
 80100ce:	9a04      	ldr	r2, [sp, #16]
 80100d0:	b9d8      	cbnz	r0, 801010a <_svfiprintf_r+0xe6>
 80100d2:	06d0      	lsls	r0, r2, #27
 80100d4:	bf44      	itt	mi
 80100d6:	2320      	movmi	r3, #32
 80100d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100dc:	0711      	lsls	r1, r2, #28
 80100de:	bf44      	itt	mi
 80100e0:	232b      	movmi	r3, #43	; 0x2b
 80100e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100e6:	f89a 3000 	ldrb.w	r3, [sl]
 80100ea:	2b2a      	cmp	r3, #42	; 0x2a
 80100ec:	d015      	beq.n	801011a <_svfiprintf_r+0xf6>
 80100ee:	9a07      	ldr	r2, [sp, #28]
 80100f0:	4654      	mov	r4, sl
 80100f2:	2000      	movs	r0, #0
 80100f4:	f04f 0c0a 	mov.w	ip, #10
 80100f8:	4621      	mov	r1, r4
 80100fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100fe:	3b30      	subs	r3, #48	; 0x30
 8010100:	2b09      	cmp	r3, #9
 8010102:	d94e      	bls.n	80101a2 <_svfiprintf_r+0x17e>
 8010104:	b1b0      	cbz	r0, 8010134 <_svfiprintf_r+0x110>
 8010106:	9207      	str	r2, [sp, #28]
 8010108:	e014      	b.n	8010134 <_svfiprintf_r+0x110>
 801010a:	eba0 0308 	sub.w	r3, r0, r8
 801010e:	fa09 f303 	lsl.w	r3, r9, r3
 8010112:	4313      	orrs	r3, r2
 8010114:	9304      	str	r3, [sp, #16]
 8010116:	46a2      	mov	sl, r4
 8010118:	e7d2      	b.n	80100c0 <_svfiprintf_r+0x9c>
 801011a:	9b03      	ldr	r3, [sp, #12]
 801011c:	1d19      	adds	r1, r3, #4
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	9103      	str	r1, [sp, #12]
 8010122:	2b00      	cmp	r3, #0
 8010124:	bfbb      	ittet	lt
 8010126:	425b      	neglt	r3, r3
 8010128:	f042 0202 	orrlt.w	r2, r2, #2
 801012c:	9307      	strge	r3, [sp, #28]
 801012e:	9307      	strlt	r3, [sp, #28]
 8010130:	bfb8      	it	lt
 8010132:	9204      	strlt	r2, [sp, #16]
 8010134:	7823      	ldrb	r3, [r4, #0]
 8010136:	2b2e      	cmp	r3, #46	; 0x2e
 8010138:	d10c      	bne.n	8010154 <_svfiprintf_r+0x130>
 801013a:	7863      	ldrb	r3, [r4, #1]
 801013c:	2b2a      	cmp	r3, #42	; 0x2a
 801013e:	d135      	bne.n	80101ac <_svfiprintf_r+0x188>
 8010140:	9b03      	ldr	r3, [sp, #12]
 8010142:	1d1a      	adds	r2, r3, #4
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	9203      	str	r2, [sp, #12]
 8010148:	2b00      	cmp	r3, #0
 801014a:	bfb8      	it	lt
 801014c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010150:	3402      	adds	r4, #2
 8010152:	9305      	str	r3, [sp, #20]
 8010154:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010220 <_svfiprintf_r+0x1fc>
 8010158:	7821      	ldrb	r1, [r4, #0]
 801015a:	2203      	movs	r2, #3
 801015c:	4650      	mov	r0, sl
 801015e:	f7f0 f8c7 	bl	80002f0 <memchr>
 8010162:	b140      	cbz	r0, 8010176 <_svfiprintf_r+0x152>
 8010164:	2340      	movs	r3, #64	; 0x40
 8010166:	eba0 000a 	sub.w	r0, r0, sl
 801016a:	fa03 f000 	lsl.w	r0, r3, r0
 801016e:	9b04      	ldr	r3, [sp, #16]
 8010170:	4303      	orrs	r3, r0
 8010172:	3401      	adds	r4, #1
 8010174:	9304      	str	r3, [sp, #16]
 8010176:	f814 1b01 	ldrb.w	r1, [r4], #1
 801017a:	4826      	ldr	r0, [pc, #152]	; (8010214 <_svfiprintf_r+0x1f0>)
 801017c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010180:	2206      	movs	r2, #6
 8010182:	f7f0 f8b5 	bl	80002f0 <memchr>
 8010186:	2800      	cmp	r0, #0
 8010188:	d038      	beq.n	80101fc <_svfiprintf_r+0x1d8>
 801018a:	4b23      	ldr	r3, [pc, #140]	; (8010218 <_svfiprintf_r+0x1f4>)
 801018c:	bb1b      	cbnz	r3, 80101d6 <_svfiprintf_r+0x1b2>
 801018e:	9b03      	ldr	r3, [sp, #12]
 8010190:	3307      	adds	r3, #7
 8010192:	f023 0307 	bic.w	r3, r3, #7
 8010196:	3308      	adds	r3, #8
 8010198:	9303      	str	r3, [sp, #12]
 801019a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801019c:	4433      	add	r3, r6
 801019e:	9309      	str	r3, [sp, #36]	; 0x24
 80101a0:	e767      	b.n	8010072 <_svfiprintf_r+0x4e>
 80101a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80101a6:	460c      	mov	r4, r1
 80101a8:	2001      	movs	r0, #1
 80101aa:	e7a5      	b.n	80100f8 <_svfiprintf_r+0xd4>
 80101ac:	2300      	movs	r3, #0
 80101ae:	3401      	adds	r4, #1
 80101b0:	9305      	str	r3, [sp, #20]
 80101b2:	4619      	mov	r1, r3
 80101b4:	f04f 0c0a 	mov.w	ip, #10
 80101b8:	4620      	mov	r0, r4
 80101ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101be:	3a30      	subs	r2, #48	; 0x30
 80101c0:	2a09      	cmp	r2, #9
 80101c2:	d903      	bls.n	80101cc <_svfiprintf_r+0x1a8>
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d0c5      	beq.n	8010154 <_svfiprintf_r+0x130>
 80101c8:	9105      	str	r1, [sp, #20]
 80101ca:	e7c3      	b.n	8010154 <_svfiprintf_r+0x130>
 80101cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80101d0:	4604      	mov	r4, r0
 80101d2:	2301      	movs	r3, #1
 80101d4:	e7f0      	b.n	80101b8 <_svfiprintf_r+0x194>
 80101d6:	ab03      	add	r3, sp, #12
 80101d8:	9300      	str	r3, [sp, #0]
 80101da:	462a      	mov	r2, r5
 80101dc:	4b0f      	ldr	r3, [pc, #60]	; (801021c <_svfiprintf_r+0x1f8>)
 80101de:	a904      	add	r1, sp, #16
 80101e0:	4638      	mov	r0, r7
 80101e2:	f7fe f895 	bl	800e310 <_printf_float>
 80101e6:	1c42      	adds	r2, r0, #1
 80101e8:	4606      	mov	r6, r0
 80101ea:	d1d6      	bne.n	801019a <_svfiprintf_r+0x176>
 80101ec:	89ab      	ldrh	r3, [r5, #12]
 80101ee:	065b      	lsls	r3, r3, #25
 80101f0:	f53f af2c 	bmi.w	801004c <_svfiprintf_r+0x28>
 80101f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101f6:	b01d      	add	sp, #116	; 0x74
 80101f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101fc:	ab03      	add	r3, sp, #12
 80101fe:	9300      	str	r3, [sp, #0]
 8010200:	462a      	mov	r2, r5
 8010202:	4b06      	ldr	r3, [pc, #24]	; (801021c <_svfiprintf_r+0x1f8>)
 8010204:	a904      	add	r1, sp, #16
 8010206:	4638      	mov	r0, r7
 8010208:	f7fe fb0e 	bl	800e828 <_printf_i>
 801020c:	e7eb      	b.n	80101e6 <_svfiprintf_r+0x1c2>
 801020e:	bf00      	nop
 8010210:	0801b384 	.word	0x0801b384
 8010214:	0801b38e 	.word	0x0801b38e
 8010218:	0800e311 	.word	0x0800e311
 801021c:	0800ff6d 	.word	0x0800ff6d
 8010220:	0801b38a 	.word	0x0801b38a

08010224 <_sbrk_r>:
 8010224:	b538      	push	{r3, r4, r5, lr}
 8010226:	4d06      	ldr	r5, [pc, #24]	; (8010240 <_sbrk_r+0x1c>)
 8010228:	2300      	movs	r3, #0
 801022a:	4604      	mov	r4, r0
 801022c:	4608      	mov	r0, r1
 801022e:	602b      	str	r3, [r5, #0]
 8010230:	f7f3 fede 	bl	8003ff0 <_sbrk>
 8010234:	1c43      	adds	r3, r0, #1
 8010236:	d102      	bne.n	801023e <_sbrk_r+0x1a>
 8010238:	682b      	ldr	r3, [r5, #0]
 801023a:	b103      	cbz	r3, 801023e <_sbrk_r+0x1a>
 801023c:	6023      	str	r3, [r4, #0]
 801023e:	bd38      	pop	{r3, r4, r5, pc}
 8010240:	2400fc00 	.word	0x2400fc00

08010244 <__assert_func>:
 8010244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010246:	4614      	mov	r4, r2
 8010248:	461a      	mov	r2, r3
 801024a:	4b09      	ldr	r3, [pc, #36]	; (8010270 <__assert_func+0x2c>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	4605      	mov	r5, r0
 8010250:	68d8      	ldr	r0, [r3, #12]
 8010252:	b14c      	cbz	r4, 8010268 <__assert_func+0x24>
 8010254:	4b07      	ldr	r3, [pc, #28]	; (8010274 <__assert_func+0x30>)
 8010256:	9100      	str	r1, [sp, #0]
 8010258:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801025c:	4906      	ldr	r1, [pc, #24]	; (8010278 <__assert_func+0x34>)
 801025e:	462b      	mov	r3, r5
 8010260:	f000 f80e 	bl	8010280 <fiprintf>
 8010264:	f000 faa4 	bl	80107b0 <abort>
 8010268:	4b04      	ldr	r3, [pc, #16]	; (801027c <__assert_func+0x38>)
 801026a:	461c      	mov	r4, r3
 801026c:	e7f3      	b.n	8010256 <__assert_func+0x12>
 801026e:	bf00      	nop
 8010270:	2400040c 	.word	0x2400040c
 8010274:	0801b395 	.word	0x0801b395
 8010278:	0801b3a2 	.word	0x0801b3a2
 801027c:	0801b3d0 	.word	0x0801b3d0

08010280 <fiprintf>:
 8010280:	b40e      	push	{r1, r2, r3}
 8010282:	b503      	push	{r0, r1, lr}
 8010284:	4601      	mov	r1, r0
 8010286:	ab03      	add	r3, sp, #12
 8010288:	4805      	ldr	r0, [pc, #20]	; (80102a0 <fiprintf+0x20>)
 801028a:	f853 2b04 	ldr.w	r2, [r3], #4
 801028e:	6800      	ldr	r0, [r0, #0]
 8010290:	9301      	str	r3, [sp, #4]
 8010292:	f000 f88f 	bl	80103b4 <_vfiprintf_r>
 8010296:	b002      	add	sp, #8
 8010298:	f85d eb04 	ldr.w	lr, [sp], #4
 801029c:	b003      	add	sp, #12
 801029e:	4770      	bx	lr
 80102a0:	2400040c 	.word	0x2400040c

080102a4 <__ascii_mbtowc>:
 80102a4:	b082      	sub	sp, #8
 80102a6:	b901      	cbnz	r1, 80102aa <__ascii_mbtowc+0x6>
 80102a8:	a901      	add	r1, sp, #4
 80102aa:	b142      	cbz	r2, 80102be <__ascii_mbtowc+0x1a>
 80102ac:	b14b      	cbz	r3, 80102c2 <__ascii_mbtowc+0x1e>
 80102ae:	7813      	ldrb	r3, [r2, #0]
 80102b0:	600b      	str	r3, [r1, #0]
 80102b2:	7812      	ldrb	r2, [r2, #0]
 80102b4:	1e10      	subs	r0, r2, #0
 80102b6:	bf18      	it	ne
 80102b8:	2001      	movne	r0, #1
 80102ba:	b002      	add	sp, #8
 80102bc:	4770      	bx	lr
 80102be:	4610      	mov	r0, r2
 80102c0:	e7fb      	b.n	80102ba <__ascii_mbtowc+0x16>
 80102c2:	f06f 0001 	mvn.w	r0, #1
 80102c6:	e7f8      	b.n	80102ba <__ascii_mbtowc+0x16>

080102c8 <memmove>:
 80102c8:	4288      	cmp	r0, r1
 80102ca:	b510      	push	{r4, lr}
 80102cc:	eb01 0402 	add.w	r4, r1, r2
 80102d0:	d902      	bls.n	80102d8 <memmove+0x10>
 80102d2:	4284      	cmp	r4, r0
 80102d4:	4623      	mov	r3, r4
 80102d6:	d807      	bhi.n	80102e8 <memmove+0x20>
 80102d8:	1e43      	subs	r3, r0, #1
 80102da:	42a1      	cmp	r1, r4
 80102dc:	d008      	beq.n	80102f0 <memmove+0x28>
 80102de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80102e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80102e6:	e7f8      	b.n	80102da <memmove+0x12>
 80102e8:	4402      	add	r2, r0
 80102ea:	4601      	mov	r1, r0
 80102ec:	428a      	cmp	r2, r1
 80102ee:	d100      	bne.n	80102f2 <memmove+0x2a>
 80102f0:	bd10      	pop	{r4, pc}
 80102f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80102f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80102fa:	e7f7      	b.n	80102ec <memmove+0x24>

080102fc <__malloc_lock>:
 80102fc:	4801      	ldr	r0, [pc, #4]	; (8010304 <__malloc_lock+0x8>)
 80102fe:	f000 bc17 	b.w	8010b30 <__retarget_lock_acquire_recursive>
 8010302:	bf00      	nop
 8010304:	2400fc08 	.word	0x2400fc08

08010308 <__malloc_unlock>:
 8010308:	4801      	ldr	r0, [pc, #4]	; (8010310 <__malloc_unlock+0x8>)
 801030a:	f000 bc12 	b.w	8010b32 <__retarget_lock_release_recursive>
 801030e:	bf00      	nop
 8010310:	2400fc08 	.word	0x2400fc08

08010314 <_realloc_r>:
 8010314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010316:	4607      	mov	r7, r0
 8010318:	4614      	mov	r4, r2
 801031a:	460e      	mov	r6, r1
 801031c:	b921      	cbnz	r1, 8010328 <_realloc_r+0x14>
 801031e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010322:	4611      	mov	r1, r2
 8010324:	f7ff bdc8 	b.w	800feb8 <_malloc_r>
 8010328:	b922      	cbnz	r2, 8010334 <_realloc_r+0x20>
 801032a:	f7ff fd75 	bl	800fe18 <_free_r>
 801032e:	4625      	mov	r5, r4
 8010330:	4628      	mov	r0, r5
 8010332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010334:	f000 fc62 	bl	8010bfc <_malloc_usable_size_r>
 8010338:	42a0      	cmp	r0, r4
 801033a:	d20f      	bcs.n	801035c <_realloc_r+0x48>
 801033c:	4621      	mov	r1, r4
 801033e:	4638      	mov	r0, r7
 8010340:	f7ff fdba 	bl	800feb8 <_malloc_r>
 8010344:	4605      	mov	r5, r0
 8010346:	2800      	cmp	r0, #0
 8010348:	d0f2      	beq.n	8010330 <_realloc_r+0x1c>
 801034a:	4631      	mov	r1, r6
 801034c:	4622      	mov	r2, r4
 801034e:	f7fd ff39 	bl	800e1c4 <memcpy>
 8010352:	4631      	mov	r1, r6
 8010354:	4638      	mov	r0, r7
 8010356:	f7ff fd5f 	bl	800fe18 <_free_r>
 801035a:	e7e9      	b.n	8010330 <_realloc_r+0x1c>
 801035c:	4635      	mov	r5, r6
 801035e:	e7e7      	b.n	8010330 <_realloc_r+0x1c>

08010360 <__sfputc_r>:
 8010360:	6893      	ldr	r3, [r2, #8]
 8010362:	3b01      	subs	r3, #1
 8010364:	2b00      	cmp	r3, #0
 8010366:	b410      	push	{r4}
 8010368:	6093      	str	r3, [r2, #8]
 801036a:	da08      	bge.n	801037e <__sfputc_r+0x1e>
 801036c:	6994      	ldr	r4, [r2, #24]
 801036e:	42a3      	cmp	r3, r4
 8010370:	db01      	blt.n	8010376 <__sfputc_r+0x16>
 8010372:	290a      	cmp	r1, #10
 8010374:	d103      	bne.n	801037e <__sfputc_r+0x1e>
 8010376:	f85d 4b04 	ldr.w	r4, [sp], #4
 801037a:	f000 b94b 	b.w	8010614 <__swbuf_r>
 801037e:	6813      	ldr	r3, [r2, #0]
 8010380:	1c58      	adds	r0, r3, #1
 8010382:	6010      	str	r0, [r2, #0]
 8010384:	7019      	strb	r1, [r3, #0]
 8010386:	4608      	mov	r0, r1
 8010388:	f85d 4b04 	ldr.w	r4, [sp], #4
 801038c:	4770      	bx	lr

0801038e <__sfputs_r>:
 801038e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010390:	4606      	mov	r6, r0
 8010392:	460f      	mov	r7, r1
 8010394:	4614      	mov	r4, r2
 8010396:	18d5      	adds	r5, r2, r3
 8010398:	42ac      	cmp	r4, r5
 801039a:	d101      	bne.n	80103a0 <__sfputs_r+0x12>
 801039c:	2000      	movs	r0, #0
 801039e:	e007      	b.n	80103b0 <__sfputs_r+0x22>
 80103a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103a4:	463a      	mov	r2, r7
 80103a6:	4630      	mov	r0, r6
 80103a8:	f7ff ffda 	bl	8010360 <__sfputc_r>
 80103ac:	1c43      	adds	r3, r0, #1
 80103ae:	d1f3      	bne.n	8010398 <__sfputs_r+0xa>
 80103b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080103b4 <_vfiprintf_r>:
 80103b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103b8:	460d      	mov	r5, r1
 80103ba:	b09d      	sub	sp, #116	; 0x74
 80103bc:	4614      	mov	r4, r2
 80103be:	4698      	mov	r8, r3
 80103c0:	4606      	mov	r6, r0
 80103c2:	b118      	cbz	r0, 80103cc <_vfiprintf_r+0x18>
 80103c4:	6983      	ldr	r3, [r0, #24]
 80103c6:	b90b      	cbnz	r3, 80103cc <_vfiprintf_r+0x18>
 80103c8:	f000 fb14 	bl	80109f4 <__sinit>
 80103cc:	4b89      	ldr	r3, [pc, #548]	; (80105f4 <_vfiprintf_r+0x240>)
 80103ce:	429d      	cmp	r5, r3
 80103d0:	d11b      	bne.n	801040a <_vfiprintf_r+0x56>
 80103d2:	6875      	ldr	r5, [r6, #4]
 80103d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103d6:	07d9      	lsls	r1, r3, #31
 80103d8:	d405      	bmi.n	80103e6 <_vfiprintf_r+0x32>
 80103da:	89ab      	ldrh	r3, [r5, #12]
 80103dc:	059a      	lsls	r2, r3, #22
 80103de:	d402      	bmi.n	80103e6 <_vfiprintf_r+0x32>
 80103e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103e2:	f000 fba5 	bl	8010b30 <__retarget_lock_acquire_recursive>
 80103e6:	89ab      	ldrh	r3, [r5, #12]
 80103e8:	071b      	lsls	r3, r3, #28
 80103ea:	d501      	bpl.n	80103f0 <_vfiprintf_r+0x3c>
 80103ec:	692b      	ldr	r3, [r5, #16]
 80103ee:	b9eb      	cbnz	r3, 801042c <_vfiprintf_r+0x78>
 80103f0:	4629      	mov	r1, r5
 80103f2:	4630      	mov	r0, r6
 80103f4:	f000 f96e 	bl	80106d4 <__swsetup_r>
 80103f8:	b1c0      	cbz	r0, 801042c <_vfiprintf_r+0x78>
 80103fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103fc:	07dc      	lsls	r4, r3, #31
 80103fe:	d50e      	bpl.n	801041e <_vfiprintf_r+0x6a>
 8010400:	f04f 30ff 	mov.w	r0, #4294967295
 8010404:	b01d      	add	sp, #116	; 0x74
 8010406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801040a:	4b7b      	ldr	r3, [pc, #492]	; (80105f8 <_vfiprintf_r+0x244>)
 801040c:	429d      	cmp	r5, r3
 801040e:	d101      	bne.n	8010414 <_vfiprintf_r+0x60>
 8010410:	68b5      	ldr	r5, [r6, #8]
 8010412:	e7df      	b.n	80103d4 <_vfiprintf_r+0x20>
 8010414:	4b79      	ldr	r3, [pc, #484]	; (80105fc <_vfiprintf_r+0x248>)
 8010416:	429d      	cmp	r5, r3
 8010418:	bf08      	it	eq
 801041a:	68f5      	ldreq	r5, [r6, #12]
 801041c:	e7da      	b.n	80103d4 <_vfiprintf_r+0x20>
 801041e:	89ab      	ldrh	r3, [r5, #12]
 8010420:	0598      	lsls	r0, r3, #22
 8010422:	d4ed      	bmi.n	8010400 <_vfiprintf_r+0x4c>
 8010424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010426:	f000 fb84 	bl	8010b32 <__retarget_lock_release_recursive>
 801042a:	e7e9      	b.n	8010400 <_vfiprintf_r+0x4c>
 801042c:	2300      	movs	r3, #0
 801042e:	9309      	str	r3, [sp, #36]	; 0x24
 8010430:	2320      	movs	r3, #32
 8010432:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010436:	f8cd 800c 	str.w	r8, [sp, #12]
 801043a:	2330      	movs	r3, #48	; 0x30
 801043c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010600 <_vfiprintf_r+0x24c>
 8010440:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010444:	f04f 0901 	mov.w	r9, #1
 8010448:	4623      	mov	r3, r4
 801044a:	469a      	mov	sl, r3
 801044c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010450:	b10a      	cbz	r2, 8010456 <_vfiprintf_r+0xa2>
 8010452:	2a25      	cmp	r2, #37	; 0x25
 8010454:	d1f9      	bne.n	801044a <_vfiprintf_r+0x96>
 8010456:	ebba 0b04 	subs.w	fp, sl, r4
 801045a:	d00b      	beq.n	8010474 <_vfiprintf_r+0xc0>
 801045c:	465b      	mov	r3, fp
 801045e:	4622      	mov	r2, r4
 8010460:	4629      	mov	r1, r5
 8010462:	4630      	mov	r0, r6
 8010464:	f7ff ff93 	bl	801038e <__sfputs_r>
 8010468:	3001      	adds	r0, #1
 801046a:	f000 80aa 	beq.w	80105c2 <_vfiprintf_r+0x20e>
 801046e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010470:	445a      	add	r2, fp
 8010472:	9209      	str	r2, [sp, #36]	; 0x24
 8010474:	f89a 3000 	ldrb.w	r3, [sl]
 8010478:	2b00      	cmp	r3, #0
 801047a:	f000 80a2 	beq.w	80105c2 <_vfiprintf_r+0x20e>
 801047e:	2300      	movs	r3, #0
 8010480:	f04f 32ff 	mov.w	r2, #4294967295
 8010484:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010488:	f10a 0a01 	add.w	sl, sl, #1
 801048c:	9304      	str	r3, [sp, #16]
 801048e:	9307      	str	r3, [sp, #28]
 8010490:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010494:	931a      	str	r3, [sp, #104]	; 0x68
 8010496:	4654      	mov	r4, sl
 8010498:	2205      	movs	r2, #5
 801049a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801049e:	4858      	ldr	r0, [pc, #352]	; (8010600 <_vfiprintf_r+0x24c>)
 80104a0:	f7ef ff26 	bl	80002f0 <memchr>
 80104a4:	9a04      	ldr	r2, [sp, #16]
 80104a6:	b9d8      	cbnz	r0, 80104e0 <_vfiprintf_r+0x12c>
 80104a8:	06d1      	lsls	r1, r2, #27
 80104aa:	bf44      	itt	mi
 80104ac:	2320      	movmi	r3, #32
 80104ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104b2:	0713      	lsls	r3, r2, #28
 80104b4:	bf44      	itt	mi
 80104b6:	232b      	movmi	r3, #43	; 0x2b
 80104b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104bc:	f89a 3000 	ldrb.w	r3, [sl]
 80104c0:	2b2a      	cmp	r3, #42	; 0x2a
 80104c2:	d015      	beq.n	80104f0 <_vfiprintf_r+0x13c>
 80104c4:	9a07      	ldr	r2, [sp, #28]
 80104c6:	4654      	mov	r4, sl
 80104c8:	2000      	movs	r0, #0
 80104ca:	f04f 0c0a 	mov.w	ip, #10
 80104ce:	4621      	mov	r1, r4
 80104d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104d4:	3b30      	subs	r3, #48	; 0x30
 80104d6:	2b09      	cmp	r3, #9
 80104d8:	d94e      	bls.n	8010578 <_vfiprintf_r+0x1c4>
 80104da:	b1b0      	cbz	r0, 801050a <_vfiprintf_r+0x156>
 80104dc:	9207      	str	r2, [sp, #28]
 80104de:	e014      	b.n	801050a <_vfiprintf_r+0x156>
 80104e0:	eba0 0308 	sub.w	r3, r0, r8
 80104e4:	fa09 f303 	lsl.w	r3, r9, r3
 80104e8:	4313      	orrs	r3, r2
 80104ea:	9304      	str	r3, [sp, #16]
 80104ec:	46a2      	mov	sl, r4
 80104ee:	e7d2      	b.n	8010496 <_vfiprintf_r+0xe2>
 80104f0:	9b03      	ldr	r3, [sp, #12]
 80104f2:	1d19      	adds	r1, r3, #4
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	9103      	str	r1, [sp, #12]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	bfbb      	ittet	lt
 80104fc:	425b      	neglt	r3, r3
 80104fe:	f042 0202 	orrlt.w	r2, r2, #2
 8010502:	9307      	strge	r3, [sp, #28]
 8010504:	9307      	strlt	r3, [sp, #28]
 8010506:	bfb8      	it	lt
 8010508:	9204      	strlt	r2, [sp, #16]
 801050a:	7823      	ldrb	r3, [r4, #0]
 801050c:	2b2e      	cmp	r3, #46	; 0x2e
 801050e:	d10c      	bne.n	801052a <_vfiprintf_r+0x176>
 8010510:	7863      	ldrb	r3, [r4, #1]
 8010512:	2b2a      	cmp	r3, #42	; 0x2a
 8010514:	d135      	bne.n	8010582 <_vfiprintf_r+0x1ce>
 8010516:	9b03      	ldr	r3, [sp, #12]
 8010518:	1d1a      	adds	r2, r3, #4
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	9203      	str	r2, [sp, #12]
 801051e:	2b00      	cmp	r3, #0
 8010520:	bfb8      	it	lt
 8010522:	f04f 33ff 	movlt.w	r3, #4294967295
 8010526:	3402      	adds	r4, #2
 8010528:	9305      	str	r3, [sp, #20]
 801052a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010610 <_vfiprintf_r+0x25c>
 801052e:	7821      	ldrb	r1, [r4, #0]
 8010530:	2203      	movs	r2, #3
 8010532:	4650      	mov	r0, sl
 8010534:	f7ef fedc 	bl	80002f0 <memchr>
 8010538:	b140      	cbz	r0, 801054c <_vfiprintf_r+0x198>
 801053a:	2340      	movs	r3, #64	; 0x40
 801053c:	eba0 000a 	sub.w	r0, r0, sl
 8010540:	fa03 f000 	lsl.w	r0, r3, r0
 8010544:	9b04      	ldr	r3, [sp, #16]
 8010546:	4303      	orrs	r3, r0
 8010548:	3401      	adds	r4, #1
 801054a:	9304      	str	r3, [sp, #16]
 801054c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010550:	482c      	ldr	r0, [pc, #176]	; (8010604 <_vfiprintf_r+0x250>)
 8010552:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010556:	2206      	movs	r2, #6
 8010558:	f7ef feca 	bl	80002f0 <memchr>
 801055c:	2800      	cmp	r0, #0
 801055e:	d03f      	beq.n	80105e0 <_vfiprintf_r+0x22c>
 8010560:	4b29      	ldr	r3, [pc, #164]	; (8010608 <_vfiprintf_r+0x254>)
 8010562:	bb1b      	cbnz	r3, 80105ac <_vfiprintf_r+0x1f8>
 8010564:	9b03      	ldr	r3, [sp, #12]
 8010566:	3307      	adds	r3, #7
 8010568:	f023 0307 	bic.w	r3, r3, #7
 801056c:	3308      	adds	r3, #8
 801056e:	9303      	str	r3, [sp, #12]
 8010570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010572:	443b      	add	r3, r7
 8010574:	9309      	str	r3, [sp, #36]	; 0x24
 8010576:	e767      	b.n	8010448 <_vfiprintf_r+0x94>
 8010578:	fb0c 3202 	mla	r2, ip, r2, r3
 801057c:	460c      	mov	r4, r1
 801057e:	2001      	movs	r0, #1
 8010580:	e7a5      	b.n	80104ce <_vfiprintf_r+0x11a>
 8010582:	2300      	movs	r3, #0
 8010584:	3401      	adds	r4, #1
 8010586:	9305      	str	r3, [sp, #20]
 8010588:	4619      	mov	r1, r3
 801058a:	f04f 0c0a 	mov.w	ip, #10
 801058e:	4620      	mov	r0, r4
 8010590:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010594:	3a30      	subs	r2, #48	; 0x30
 8010596:	2a09      	cmp	r2, #9
 8010598:	d903      	bls.n	80105a2 <_vfiprintf_r+0x1ee>
 801059a:	2b00      	cmp	r3, #0
 801059c:	d0c5      	beq.n	801052a <_vfiprintf_r+0x176>
 801059e:	9105      	str	r1, [sp, #20]
 80105a0:	e7c3      	b.n	801052a <_vfiprintf_r+0x176>
 80105a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80105a6:	4604      	mov	r4, r0
 80105a8:	2301      	movs	r3, #1
 80105aa:	e7f0      	b.n	801058e <_vfiprintf_r+0x1da>
 80105ac:	ab03      	add	r3, sp, #12
 80105ae:	9300      	str	r3, [sp, #0]
 80105b0:	462a      	mov	r2, r5
 80105b2:	4b16      	ldr	r3, [pc, #88]	; (801060c <_vfiprintf_r+0x258>)
 80105b4:	a904      	add	r1, sp, #16
 80105b6:	4630      	mov	r0, r6
 80105b8:	f7fd feaa 	bl	800e310 <_printf_float>
 80105bc:	4607      	mov	r7, r0
 80105be:	1c78      	adds	r0, r7, #1
 80105c0:	d1d6      	bne.n	8010570 <_vfiprintf_r+0x1bc>
 80105c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80105c4:	07d9      	lsls	r1, r3, #31
 80105c6:	d405      	bmi.n	80105d4 <_vfiprintf_r+0x220>
 80105c8:	89ab      	ldrh	r3, [r5, #12]
 80105ca:	059a      	lsls	r2, r3, #22
 80105cc:	d402      	bmi.n	80105d4 <_vfiprintf_r+0x220>
 80105ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80105d0:	f000 faaf 	bl	8010b32 <__retarget_lock_release_recursive>
 80105d4:	89ab      	ldrh	r3, [r5, #12]
 80105d6:	065b      	lsls	r3, r3, #25
 80105d8:	f53f af12 	bmi.w	8010400 <_vfiprintf_r+0x4c>
 80105dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80105de:	e711      	b.n	8010404 <_vfiprintf_r+0x50>
 80105e0:	ab03      	add	r3, sp, #12
 80105e2:	9300      	str	r3, [sp, #0]
 80105e4:	462a      	mov	r2, r5
 80105e6:	4b09      	ldr	r3, [pc, #36]	; (801060c <_vfiprintf_r+0x258>)
 80105e8:	a904      	add	r1, sp, #16
 80105ea:	4630      	mov	r0, r6
 80105ec:	f7fe f91c 	bl	800e828 <_printf_i>
 80105f0:	e7e4      	b.n	80105bc <_vfiprintf_r+0x208>
 80105f2:	bf00      	nop
 80105f4:	0801b4fc 	.word	0x0801b4fc
 80105f8:	0801b51c 	.word	0x0801b51c
 80105fc:	0801b4dc 	.word	0x0801b4dc
 8010600:	0801b384 	.word	0x0801b384
 8010604:	0801b38e 	.word	0x0801b38e
 8010608:	0800e311 	.word	0x0800e311
 801060c:	0801038f 	.word	0x0801038f
 8010610:	0801b38a 	.word	0x0801b38a

08010614 <__swbuf_r>:
 8010614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010616:	460e      	mov	r6, r1
 8010618:	4614      	mov	r4, r2
 801061a:	4605      	mov	r5, r0
 801061c:	b118      	cbz	r0, 8010626 <__swbuf_r+0x12>
 801061e:	6983      	ldr	r3, [r0, #24]
 8010620:	b90b      	cbnz	r3, 8010626 <__swbuf_r+0x12>
 8010622:	f000 f9e7 	bl	80109f4 <__sinit>
 8010626:	4b21      	ldr	r3, [pc, #132]	; (80106ac <__swbuf_r+0x98>)
 8010628:	429c      	cmp	r4, r3
 801062a:	d12b      	bne.n	8010684 <__swbuf_r+0x70>
 801062c:	686c      	ldr	r4, [r5, #4]
 801062e:	69a3      	ldr	r3, [r4, #24]
 8010630:	60a3      	str	r3, [r4, #8]
 8010632:	89a3      	ldrh	r3, [r4, #12]
 8010634:	071a      	lsls	r2, r3, #28
 8010636:	d52f      	bpl.n	8010698 <__swbuf_r+0x84>
 8010638:	6923      	ldr	r3, [r4, #16]
 801063a:	b36b      	cbz	r3, 8010698 <__swbuf_r+0x84>
 801063c:	6923      	ldr	r3, [r4, #16]
 801063e:	6820      	ldr	r0, [r4, #0]
 8010640:	1ac0      	subs	r0, r0, r3
 8010642:	6963      	ldr	r3, [r4, #20]
 8010644:	b2f6      	uxtb	r6, r6
 8010646:	4283      	cmp	r3, r0
 8010648:	4637      	mov	r7, r6
 801064a:	dc04      	bgt.n	8010656 <__swbuf_r+0x42>
 801064c:	4621      	mov	r1, r4
 801064e:	4628      	mov	r0, r5
 8010650:	f000 f93c 	bl	80108cc <_fflush_r>
 8010654:	bb30      	cbnz	r0, 80106a4 <__swbuf_r+0x90>
 8010656:	68a3      	ldr	r3, [r4, #8]
 8010658:	3b01      	subs	r3, #1
 801065a:	60a3      	str	r3, [r4, #8]
 801065c:	6823      	ldr	r3, [r4, #0]
 801065e:	1c5a      	adds	r2, r3, #1
 8010660:	6022      	str	r2, [r4, #0]
 8010662:	701e      	strb	r6, [r3, #0]
 8010664:	6963      	ldr	r3, [r4, #20]
 8010666:	3001      	adds	r0, #1
 8010668:	4283      	cmp	r3, r0
 801066a:	d004      	beq.n	8010676 <__swbuf_r+0x62>
 801066c:	89a3      	ldrh	r3, [r4, #12]
 801066e:	07db      	lsls	r3, r3, #31
 8010670:	d506      	bpl.n	8010680 <__swbuf_r+0x6c>
 8010672:	2e0a      	cmp	r6, #10
 8010674:	d104      	bne.n	8010680 <__swbuf_r+0x6c>
 8010676:	4621      	mov	r1, r4
 8010678:	4628      	mov	r0, r5
 801067a:	f000 f927 	bl	80108cc <_fflush_r>
 801067e:	b988      	cbnz	r0, 80106a4 <__swbuf_r+0x90>
 8010680:	4638      	mov	r0, r7
 8010682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010684:	4b0a      	ldr	r3, [pc, #40]	; (80106b0 <__swbuf_r+0x9c>)
 8010686:	429c      	cmp	r4, r3
 8010688:	d101      	bne.n	801068e <__swbuf_r+0x7a>
 801068a:	68ac      	ldr	r4, [r5, #8]
 801068c:	e7cf      	b.n	801062e <__swbuf_r+0x1a>
 801068e:	4b09      	ldr	r3, [pc, #36]	; (80106b4 <__swbuf_r+0xa0>)
 8010690:	429c      	cmp	r4, r3
 8010692:	bf08      	it	eq
 8010694:	68ec      	ldreq	r4, [r5, #12]
 8010696:	e7ca      	b.n	801062e <__swbuf_r+0x1a>
 8010698:	4621      	mov	r1, r4
 801069a:	4628      	mov	r0, r5
 801069c:	f000 f81a 	bl	80106d4 <__swsetup_r>
 80106a0:	2800      	cmp	r0, #0
 80106a2:	d0cb      	beq.n	801063c <__swbuf_r+0x28>
 80106a4:	f04f 37ff 	mov.w	r7, #4294967295
 80106a8:	e7ea      	b.n	8010680 <__swbuf_r+0x6c>
 80106aa:	bf00      	nop
 80106ac:	0801b4fc 	.word	0x0801b4fc
 80106b0:	0801b51c 	.word	0x0801b51c
 80106b4:	0801b4dc 	.word	0x0801b4dc

080106b8 <__ascii_wctomb>:
 80106b8:	b149      	cbz	r1, 80106ce <__ascii_wctomb+0x16>
 80106ba:	2aff      	cmp	r2, #255	; 0xff
 80106bc:	bf85      	ittet	hi
 80106be:	238a      	movhi	r3, #138	; 0x8a
 80106c0:	6003      	strhi	r3, [r0, #0]
 80106c2:	700a      	strbls	r2, [r1, #0]
 80106c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80106c8:	bf98      	it	ls
 80106ca:	2001      	movls	r0, #1
 80106cc:	4770      	bx	lr
 80106ce:	4608      	mov	r0, r1
 80106d0:	4770      	bx	lr
	...

080106d4 <__swsetup_r>:
 80106d4:	4b32      	ldr	r3, [pc, #200]	; (80107a0 <__swsetup_r+0xcc>)
 80106d6:	b570      	push	{r4, r5, r6, lr}
 80106d8:	681d      	ldr	r5, [r3, #0]
 80106da:	4606      	mov	r6, r0
 80106dc:	460c      	mov	r4, r1
 80106de:	b125      	cbz	r5, 80106ea <__swsetup_r+0x16>
 80106e0:	69ab      	ldr	r3, [r5, #24]
 80106e2:	b913      	cbnz	r3, 80106ea <__swsetup_r+0x16>
 80106e4:	4628      	mov	r0, r5
 80106e6:	f000 f985 	bl	80109f4 <__sinit>
 80106ea:	4b2e      	ldr	r3, [pc, #184]	; (80107a4 <__swsetup_r+0xd0>)
 80106ec:	429c      	cmp	r4, r3
 80106ee:	d10f      	bne.n	8010710 <__swsetup_r+0x3c>
 80106f0:	686c      	ldr	r4, [r5, #4]
 80106f2:	89a3      	ldrh	r3, [r4, #12]
 80106f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80106f8:	0719      	lsls	r1, r3, #28
 80106fa:	d42c      	bmi.n	8010756 <__swsetup_r+0x82>
 80106fc:	06dd      	lsls	r5, r3, #27
 80106fe:	d411      	bmi.n	8010724 <__swsetup_r+0x50>
 8010700:	2309      	movs	r3, #9
 8010702:	6033      	str	r3, [r6, #0]
 8010704:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010708:	81a3      	strh	r3, [r4, #12]
 801070a:	f04f 30ff 	mov.w	r0, #4294967295
 801070e:	e03e      	b.n	801078e <__swsetup_r+0xba>
 8010710:	4b25      	ldr	r3, [pc, #148]	; (80107a8 <__swsetup_r+0xd4>)
 8010712:	429c      	cmp	r4, r3
 8010714:	d101      	bne.n	801071a <__swsetup_r+0x46>
 8010716:	68ac      	ldr	r4, [r5, #8]
 8010718:	e7eb      	b.n	80106f2 <__swsetup_r+0x1e>
 801071a:	4b24      	ldr	r3, [pc, #144]	; (80107ac <__swsetup_r+0xd8>)
 801071c:	429c      	cmp	r4, r3
 801071e:	bf08      	it	eq
 8010720:	68ec      	ldreq	r4, [r5, #12]
 8010722:	e7e6      	b.n	80106f2 <__swsetup_r+0x1e>
 8010724:	0758      	lsls	r0, r3, #29
 8010726:	d512      	bpl.n	801074e <__swsetup_r+0x7a>
 8010728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801072a:	b141      	cbz	r1, 801073e <__swsetup_r+0x6a>
 801072c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010730:	4299      	cmp	r1, r3
 8010732:	d002      	beq.n	801073a <__swsetup_r+0x66>
 8010734:	4630      	mov	r0, r6
 8010736:	f7ff fb6f 	bl	800fe18 <_free_r>
 801073a:	2300      	movs	r3, #0
 801073c:	6363      	str	r3, [r4, #52]	; 0x34
 801073e:	89a3      	ldrh	r3, [r4, #12]
 8010740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010744:	81a3      	strh	r3, [r4, #12]
 8010746:	2300      	movs	r3, #0
 8010748:	6063      	str	r3, [r4, #4]
 801074a:	6923      	ldr	r3, [r4, #16]
 801074c:	6023      	str	r3, [r4, #0]
 801074e:	89a3      	ldrh	r3, [r4, #12]
 8010750:	f043 0308 	orr.w	r3, r3, #8
 8010754:	81a3      	strh	r3, [r4, #12]
 8010756:	6923      	ldr	r3, [r4, #16]
 8010758:	b94b      	cbnz	r3, 801076e <__swsetup_r+0x9a>
 801075a:	89a3      	ldrh	r3, [r4, #12]
 801075c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010764:	d003      	beq.n	801076e <__swsetup_r+0x9a>
 8010766:	4621      	mov	r1, r4
 8010768:	4630      	mov	r0, r6
 801076a:	f000 fa07 	bl	8010b7c <__smakebuf_r>
 801076e:	89a0      	ldrh	r0, [r4, #12]
 8010770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010774:	f010 0301 	ands.w	r3, r0, #1
 8010778:	d00a      	beq.n	8010790 <__swsetup_r+0xbc>
 801077a:	2300      	movs	r3, #0
 801077c:	60a3      	str	r3, [r4, #8]
 801077e:	6963      	ldr	r3, [r4, #20]
 8010780:	425b      	negs	r3, r3
 8010782:	61a3      	str	r3, [r4, #24]
 8010784:	6923      	ldr	r3, [r4, #16]
 8010786:	b943      	cbnz	r3, 801079a <__swsetup_r+0xc6>
 8010788:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801078c:	d1ba      	bne.n	8010704 <__swsetup_r+0x30>
 801078e:	bd70      	pop	{r4, r5, r6, pc}
 8010790:	0781      	lsls	r1, r0, #30
 8010792:	bf58      	it	pl
 8010794:	6963      	ldrpl	r3, [r4, #20]
 8010796:	60a3      	str	r3, [r4, #8]
 8010798:	e7f4      	b.n	8010784 <__swsetup_r+0xb0>
 801079a:	2000      	movs	r0, #0
 801079c:	e7f7      	b.n	801078e <__swsetup_r+0xba>
 801079e:	bf00      	nop
 80107a0:	2400040c 	.word	0x2400040c
 80107a4:	0801b4fc 	.word	0x0801b4fc
 80107a8:	0801b51c 	.word	0x0801b51c
 80107ac:	0801b4dc 	.word	0x0801b4dc

080107b0 <abort>:
 80107b0:	b508      	push	{r3, lr}
 80107b2:	2006      	movs	r0, #6
 80107b4:	f000 fa52 	bl	8010c5c <raise>
 80107b8:	2001      	movs	r0, #1
 80107ba:	f7f3 fbe9 	bl	8003f90 <_exit>
	...

080107c0 <__sflush_r>:
 80107c0:	898a      	ldrh	r2, [r1, #12]
 80107c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107c6:	4605      	mov	r5, r0
 80107c8:	0710      	lsls	r0, r2, #28
 80107ca:	460c      	mov	r4, r1
 80107cc:	d458      	bmi.n	8010880 <__sflush_r+0xc0>
 80107ce:	684b      	ldr	r3, [r1, #4]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	dc05      	bgt.n	80107e0 <__sflush_r+0x20>
 80107d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	dc02      	bgt.n	80107e0 <__sflush_r+0x20>
 80107da:	2000      	movs	r0, #0
 80107dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107e2:	2e00      	cmp	r6, #0
 80107e4:	d0f9      	beq.n	80107da <__sflush_r+0x1a>
 80107e6:	2300      	movs	r3, #0
 80107e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80107ec:	682f      	ldr	r7, [r5, #0]
 80107ee:	602b      	str	r3, [r5, #0]
 80107f0:	d032      	beq.n	8010858 <__sflush_r+0x98>
 80107f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80107f4:	89a3      	ldrh	r3, [r4, #12]
 80107f6:	075a      	lsls	r2, r3, #29
 80107f8:	d505      	bpl.n	8010806 <__sflush_r+0x46>
 80107fa:	6863      	ldr	r3, [r4, #4]
 80107fc:	1ac0      	subs	r0, r0, r3
 80107fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010800:	b10b      	cbz	r3, 8010806 <__sflush_r+0x46>
 8010802:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010804:	1ac0      	subs	r0, r0, r3
 8010806:	2300      	movs	r3, #0
 8010808:	4602      	mov	r2, r0
 801080a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801080c:	6a21      	ldr	r1, [r4, #32]
 801080e:	4628      	mov	r0, r5
 8010810:	47b0      	blx	r6
 8010812:	1c43      	adds	r3, r0, #1
 8010814:	89a3      	ldrh	r3, [r4, #12]
 8010816:	d106      	bne.n	8010826 <__sflush_r+0x66>
 8010818:	6829      	ldr	r1, [r5, #0]
 801081a:	291d      	cmp	r1, #29
 801081c:	d82c      	bhi.n	8010878 <__sflush_r+0xb8>
 801081e:	4a2a      	ldr	r2, [pc, #168]	; (80108c8 <__sflush_r+0x108>)
 8010820:	40ca      	lsrs	r2, r1
 8010822:	07d6      	lsls	r6, r2, #31
 8010824:	d528      	bpl.n	8010878 <__sflush_r+0xb8>
 8010826:	2200      	movs	r2, #0
 8010828:	6062      	str	r2, [r4, #4]
 801082a:	04d9      	lsls	r1, r3, #19
 801082c:	6922      	ldr	r2, [r4, #16]
 801082e:	6022      	str	r2, [r4, #0]
 8010830:	d504      	bpl.n	801083c <__sflush_r+0x7c>
 8010832:	1c42      	adds	r2, r0, #1
 8010834:	d101      	bne.n	801083a <__sflush_r+0x7a>
 8010836:	682b      	ldr	r3, [r5, #0]
 8010838:	b903      	cbnz	r3, 801083c <__sflush_r+0x7c>
 801083a:	6560      	str	r0, [r4, #84]	; 0x54
 801083c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801083e:	602f      	str	r7, [r5, #0]
 8010840:	2900      	cmp	r1, #0
 8010842:	d0ca      	beq.n	80107da <__sflush_r+0x1a>
 8010844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010848:	4299      	cmp	r1, r3
 801084a:	d002      	beq.n	8010852 <__sflush_r+0x92>
 801084c:	4628      	mov	r0, r5
 801084e:	f7ff fae3 	bl	800fe18 <_free_r>
 8010852:	2000      	movs	r0, #0
 8010854:	6360      	str	r0, [r4, #52]	; 0x34
 8010856:	e7c1      	b.n	80107dc <__sflush_r+0x1c>
 8010858:	6a21      	ldr	r1, [r4, #32]
 801085a:	2301      	movs	r3, #1
 801085c:	4628      	mov	r0, r5
 801085e:	47b0      	blx	r6
 8010860:	1c41      	adds	r1, r0, #1
 8010862:	d1c7      	bne.n	80107f4 <__sflush_r+0x34>
 8010864:	682b      	ldr	r3, [r5, #0]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d0c4      	beq.n	80107f4 <__sflush_r+0x34>
 801086a:	2b1d      	cmp	r3, #29
 801086c:	d001      	beq.n	8010872 <__sflush_r+0xb2>
 801086e:	2b16      	cmp	r3, #22
 8010870:	d101      	bne.n	8010876 <__sflush_r+0xb6>
 8010872:	602f      	str	r7, [r5, #0]
 8010874:	e7b1      	b.n	80107da <__sflush_r+0x1a>
 8010876:	89a3      	ldrh	r3, [r4, #12]
 8010878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801087c:	81a3      	strh	r3, [r4, #12]
 801087e:	e7ad      	b.n	80107dc <__sflush_r+0x1c>
 8010880:	690f      	ldr	r7, [r1, #16]
 8010882:	2f00      	cmp	r7, #0
 8010884:	d0a9      	beq.n	80107da <__sflush_r+0x1a>
 8010886:	0793      	lsls	r3, r2, #30
 8010888:	680e      	ldr	r6, [r1, #0]
 801088a:	bf08      	it	eq
 801088c:	694b      	ldreq	r3, [r1, #20]
 801088e:	600f      	str	r7, [r1, #0]
 8010890:	bf18      	it	ne
 8010892:	2300      	movne	r3, #0
 8010894:	eba6 0807 	sub.w	r8, r6, r7
 8010898:	608b      	str	r3, [r1, #8]
 801089a:	f1b8 0f00 	cmp.w	r8, #0
 801089e:	dd9c      	ble.n	80107da <__sflush_r+0x1a>
 80108a0:	6a21      	ldr	r1, [r4, #32]
 80108a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80108a4:	4643      	mov	r3, r8
 80108a6:	463a      	mov	r2, r7
 80108a8:	4628      	mov	r0, r5
 80108aa:	47b0      	blx	r6
 80108ac:	2800      	cmp	r0, #0
 80108ae:	dc06      	bgt.n	80108be <__sflush_r+0xfe>
 80108b0:	89a3      	ldrh	r3, [r4, #12]
 80108b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108b6:	81a3      	strh	r3, [r4, #12]
 80108b8:	f04f 30ff 	mov.w	r0, #4294967295
 80108bc:	e78e      	b.n	80107dc <__sflush_r+0x1c>
 80108be:	4407      	add	r7, r0
 80108c0:	eba8 0800 	sub.w	r8, r8, r0
 80108c4:	e7e9      	b.n	801089a <__sflush_r+0xda>
 80108c6:	bf00      	nop
 80108c8:	20400001 	.word	0x20400001

080108cc <_fflush_r>:
 80108cc:	b538      	push	{r3, r4, r5, lr}
 80108ce:	690b      	ldr	r3, [r1, #16]
 80108d0:	4605      	mov	r5, r0
 80108d2:	460c      	mov	r4, r1
 80108d4:	b913      	cbnz	r3, 80108dc <_fflush_r+0x10>
 80108d6:	2500      	movs	r5, #0
 80108d8:	4628      	mov	r0, r5
 80108da:	bd38      	pop	{r3, r4, r5, pc}
 80108dc:	b118      	cbz	r0, 80108e6 <_fflush_r+0x1a>
 80108de:	6983      	ldr	r3, [r0, #24]
 80108e0:	b90b      	cbnz	r3, 80108e6 <_fflush_r+0x1a>
 80108e2:	f000 f887 	bl	80109f4 <__sinit>
 80108e6:	4b14      	ldr	r3, [pc, #80]	; (8010938 <_fflush_r+0x6c>)
 80108e8:	429c      	cmp	r4, r3
 80108ea:	d11b      	bne.n	8010924 <_fflush_r+0x58>
 80108ec:	686c      	ldr	r4, [r5, #4]
 80108ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d0ef      	beq.n	80108d6 <_fflush_r+0xa>
 80108f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80108f8:	07d0      	lsls	r0, r2, #31
 80108fa:	d404      	bmi.n	8010906 <_fflush_r+0x3a>
 80108fc:	0599      	lsls	r1, r3, #22
 80108fe:	d402      	bmi.n	8010906 <_fflush_r+0x3a>
 8010900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010902:	f000 f915 	bl	8010b30 <__retarget_lock_acquire_recursive>
 8010906:	4628      	mov	r0, r5
 8010908:	4621      	mov	r1, r4
 801090a:	f7ff ff59 	bl	80107c0 <__sflush_r>
 801090e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010910:	07da      	lsls	r2, r3, #31
 8010912:	4605      	mov	r5, r0
 8010914:	d4e0      	bmi.n	80108d8 <_fflush_r+0xc>
 8010916:	89a3      	ldrh	r3, [r4, #12]
 8010918:	059b      	lsls	r3, r3, #22
 801091a:	d4dd      	bmi.n	80108d8 <_fflush_r+0xc>
 801091c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801091e:	f000 f908 	bl	8010b32 <__retarget_lock_release_recursive>
 8010922:	e7d9      	b.n	80108d8 <_fflush_r+0xc>
 8010924:	4b05      	ldr	r3, [pc, #20]	; (801093c <_fflush_r+0x70>)
 8010926:	429c      	cmp	r4, r3
 8010928:	d101      	bne.n	801092e <_fflush_r+0x62>
 801092a:	68ac      	ldr	r4, [r5, #8]
 801092c:	e7df      	b.n	80108ee <_fflush_r+0x22>
 801092e:	4b04      	ldr	r3, [pc, #16]	; (8010940 <_fflush_r+0x74>)
 8010930:	429c      	cmp	r4, r3
 8010932:	bf08      	it	eq
 8010934:	68ec      	ldreq	r4, [r5, #12]
 8010936:	e7da      	b.n	80108ee <_fflush_r+0x22>
 8010938:	0801b4fc 	.word	0x0801b4fc
 801093c:	0801b51c 	.word	0x0801b51c
 8010940:	0801b4dc 	.word	0x0801b4dc

08010944 <std>:
 8010944:	2300      	movs	r3, #0
 8010946:	b510      	push	{r4, lr}
 8010948:	4604      	mov	r4, r0
 801094a:	e9c0 3300 	strd	r3, r3, [r0]
 801094e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010952:	6083      	str	r3, [r0, #8]
 8010954:	8181      	strh	r1, [r0, #12]
 8010956:	6643      	str	r3, [r0, #100]	; 0x64
 8010958:	81c2      	strh	r2, [r0, #14]
 801095a:	6183      	str	r3, [r0, #24]
 801095c:	4619      	mov	r1, r3
 801095e:	2208      	movs	r2, #8
 8010960:	305c      	adds	r0, #92	; 0x5c
 8010962:	f7fd fc3d 	bl	800e1e0 <memset>
 8010966:	4b05      	ldr	r3, [pc, #20]	; (801097c <std+0x38>)
 8010968:	6263      	str	r3, [r4, #36]	; 0x24
 801096a:	4b05      	ldr	r3, [pc, #20]	; (8010980 <std+0x3c>)
 801096c:	62a3      	str	r3, [r4, #40]	; 0x28
 801096e:	4b05      	ldr	r3, [pc, #20]	; (8010984 <std+0x40>)
 8010970:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010972:	4b05      	ldr	r3, [pc, #20]	; (8010988 <std+0x44>)
 8010974:	6224      	str	r4, [r4, #32]
 8010976:	6323      	str	r3, [r4, #48]	; 0x30
 8010978:	bd10      	pop	{r4, pc}
 801097a:	bf00      	nop
 801097c:	08010c95 	.word	0x08010c95
 8010980:	08010cb7 	.word	0x08010cb7
 8010984:	08010cef 	.word	0x08010cef
 8010988:	08010d13 	.word	0x08010d13

0801098c <_cleanup_r>:
 801098c:	4901      	ldr	r1, [pc, #4]	; (8010994 <_cleanup_r+0x8>)
 801098e:	f000 b8af 	b.w	8010af0 <_fwalk_reent>
 8010992:	bf00      	nop
 8010994:	080108cd 	.word	0x080108cd

08010998 <__sfmoreglue>:
 8010998:	b570      	push	{r4, r5, r6, lr}
 801099a:	1e4a      	subs	r2, r1, #1
 801099c:	2568      	movs	r5, #104	; 0x68
 801099e:	4355      	muls	r5, r2
 80109a0:	460e      	mov	r6, r1
 80109a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80109a6:	f7ff fa87 	bl	800feb8 <_malloc_r>
 80109aa:	4604      	mov	r4, r0
 80109ac:	b140      	cbz	r0, 80109c0 <__sfmoreglue+0x28>
 80109ae:	2100      	movs	r1, #0
 80109b0:	e9c0 1600 	strd	r1, r6, [r0]
 80109b4:	300c      	adds	r0, #12
 80109b6:	60a0      	str	r0, [r4, #8]
 80109b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80109bc:	f7fd fc10 	bl	800e1e0 <memset>
 80109c0:	4620      	mov	r0, r4
 80109c2:	bd70      	pop	{r4, r5, r6, pc}

080109c4 <__sfp_lock_acquire>:
 80109c4:	4801      	ldr	r0, [pc, #4]	; (80109cc <__sfp_lock_acquire+0x8>)
 80109c6:	f000 b8b3 	b.w	8010b30 <__retarget_lock_acquire_recursive>
 80109ca:	bf00      	nop
 80109cc:	2400fc0c 	.word	0x2400fc0c

080109d0 <__sfp_lock_release>:
 80109d0:	4801      	ldr	r0, [pc, #4]	; (80109d8 <__sfp_lock_release+0x8>)
 80109d2:	f000 b8ae 	b.w	8010b32 <__retarget_lock_release_recursive>
 80109d6:	bf00      	nop
 80109d8:	2400fc0c 	.word	0x2400fc0c

080109dc <__sinit_lock_acquire>:
 80109dc:	4801      	ldr	r0, [pc, #4]	; (80109e4 <__sinit_lock_acquire+0x8>)
 80109de:	f000 b8a7 	b.w	8010b30 <__retarget_lock_acquire_recursive>
 80109e2:	bf00      	nop
 80109e4:	2400fc07 	.word	0x2400fc07

080109e8 <__sinit_lock_release>:
 80109e8:	4801      	ldr	r0, [pc, #4]	; (80109f0 <__sinit_lock_release+0x8>)
 80109ea:	f000 b8a2 	b.w	8010b32 <__retarget_lock_release_recursive>
 80109ee:	bf00      	nop
 80109f0:	2400fc07 	.word	0x2400fc07

080109f4 <__sinit>:
 80109f4:	b510      	push	{r4, lr}
 80109f6:	4604      	mov	r4, r0
 80109f8:	f7ff fff0 	bl	80109dc <__sinit_lock_acquire>
 80109fc:	69a3      	ldr	r3, [r4, #24]
 80109fe:	b11b      	cbz	r3, 8010a08 <__sinit+0x14>
 8010a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a04:	f7ff bff0 	b.w	80109e8 <__sinit_lock_release>
 8010a08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010a0c:	6523      	str	r3, [r4, #80]	; 0x50
 8010a0e:	4b13      	ldr	r3, [pc, #76]	; (8010a5c <__sinit+0x68>)
 8010a10:	4a13      	ldr	r2, [pc, #76]	; (8010a60 <__sinit+0x6c>)
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	62a2      	str	r2, [r4, #40]	; 0x28
 8010a16:	42a3      	cmp	r3, r4
 8010a18:	bf04      	itt	eq
 8010a1a:	2301      	moveq	r3, #1
 8010a1c:	61a3      	streq	r3, [r4, #24]
 8010a1e:	4620      	mov	r0, r4
 8010a20:	f000 f820 	bl	8010a64 <__sfp>
 8010a24:	6060      	str	r0, [r4, #4]
 8010a26:	4620      	mov	r0, r4
 8010a28:	f000 f81c 	bl	8010a64 <__sfp>
 8010a2c:	60a0      	str	r0, [r4, #8]
 8010a2e:	4620      	mov	r0, r4
 8010a30:	f000 f818 	bl	8010a64 <__sfp>
 8010a34:	2200      	movs	r2, #0
 8010a36:	60e0      	str	r0, [r4, #12]
 8010a38:	2104      	movs	r1, #4
 8010a3a:	6860      	ldr	r0, [r4, #4]
 8010a3c:	f7ff ff82 	bl	8010944 <std>
 8010a40:	68a0      	ldr	r0, [r4, #8]
 8010a42:	2201      	movs	r2, #1
 8010a44:	2109      	movs	r1, #9
 8010a46:	f7ff ff7d 	bl	8010944 <std>
 8010a4a:	68e0      	ldr	r0, [r4, #12]
 8010a4c:	2202      	movs	r2, #2
 8010a4e:	2112      	movs	r1, #18
 8010a50:	f7ff ff78 	bl	8010944 <std>
 8010a54:	2301      	movs	r3, #1
 8010a56:	61a3      	str	r3, [r4, #24]
 8010a58:	e7d2      	b.n	8010a00 <__sinit+0xc>
 8010a5a:	bf00      	nop
 8010a5c:	0801b158 	.word	0x0801b158
 8010a60:	0801098d 	.word	0x0801098d

08010a64 <__sfp>:
 8010a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a66:	4607      	mov	r7, r0
 8010a68:	f7ff ffac 	bl	80109c4 <__sfp_lock_acquire>
 8010a6c:	4b1e      	ldr	r3, [pc, #120]	; (8010ae8 <__sfp+0x84>)
 8010a6e:	681e      	ldr	r6, [r3, #0]
 8010a70:	69b3      	ldr	r3, [r6, #24]
 8010a72:	b913      	cbnz	r3, 8010a7a <__sfp+0x16>
 8010a74:	4630      	mov	r0, r6
 8010a76:	f7ff ffbd 	bl	80109f4 <__sinit>
 8010a7a:	3648      	adds	r6, #72	; 0x48
 8010a7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010a80:	3b01      	subs	r3, #1
 8010a82:	d503      	bpl.n	8010a8c <__sfp+0x28>
 8010a84:	6833      	ldr	r3, [r6, #0]
 8010a86:	b30b      	cbz	r3, 8010acc <__sfp+0x68>
 8010a88:	6836      	ldr	r6, [r6, #0]
 8010a8a:	e7f7      	b.n	8010a7c <__sfp+0x18>
 8010a8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010a90:	b9d5      	cbnz	r5, 8010ac8 <__sfp+0x64>
 8010a92:	4b16      	ldr	r3, [pc, #88]	; (8010aec <__sfp+0x88>)
 8010a94:	60e3      	str	r3, [r4, #12]
 8010a96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010a9a:	6665      	str	r5, [r4, #100]	; 0x64
 8010a9c:	f000 f847 	bl	8010b2e <__retarget_lock_init_recursive>
 8010aa0:	f7ff ff96 	bl	80109d0 <__sfp_lock_release>
 8010aa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010aa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010aac:	6025      	str	r5, [r4, #0]
 8010aae:	61a5      	str	r5, [r4, #24]
 8010ab0:	2208      	movs	r2, #8
 8010ab2:	4629      	mov	r1, r5
 8010ab4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010ab8:	f7fd fb92 	bl	800e1e0 <memset>
 8010abc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010ac0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010ac4:	4620      	mov	r0, r4
 8010ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ac8:	3468      	adds	r4, #104	; 0x68
 8010aca:	e7d9      	b.n	8010a80 <__sfp+0x1c>
 8010acc:	2104      	movs	r1, #4
 8010ace:	4638      	mov	r0, r7
 8010ad0:	f7ff ff62 	bl	8010998 <__sfmoreglue>
 8010ad4:	4604      	mov	r4, r0
 8010ad6:	6030      	str	r0, [r6, #0]
 8010ad8:	2800      	cmp	r0, #0
 8010ada:	d1d5      	bne.n	8010a88 <__sfp+0x24>
 8010adc:	f7ff ff78 	bl	80109d0 <__sfp_lock_release>
 8010ae0:	230c      	movs	r3, #12
 8010ae2:	603b      	str	r3, [r7, #0]
 8010ae4:	e7ee      	b.n	8010ac4 <__sfp+0x60>
 8010ae6:	bf00      	nop
 8010ae8:	0801b158 	.word	0x0801b158
 8010aec:	ffff0001 	.word	0xffff0001

08010af0 <_fwalk_reent>:
 8010af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010af4:	4606      	mov	r6, r0
 8010af6:	4688      	mov	r8, r1
 8010af8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010afc:	2700      	movs	r7, #0
 8010afe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010b02:	f1b9 0901 	subs.w	r9, r9, #1
 8010b06:	d505      	bpl.n	8010b14 <_fwalk_reent+0x24>
 8010b08:	6824      	ldr	r4, [r4, #0]
 8010b0a:	2c00      	cmp	r4, #0
 8010b0c:	d1f7      	bne.n	8010afe <_fwalk_reent+0xe>
 8010b0e:	4638      	mov	r0, r7
 8010b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b14:	89ab      	ldrh	r3, [r5, #12]
 8010b16:	2b01      	cmp	r3, #1
 8010b18:	d907      	bls.n	8010b2a <_fwalk_reent+0x3a>
 8010b1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010b1e:	3301      	adds	r3, #1
 8010b20:	d003      	beq.n	8010b2a <_fwalk_reent+0x3a>
 8010b22:	4629      	mov	r1, r5
 8010b24:	4630      	mov	r0, r6
 8010b26:	47c0      	blx	r8
 8010b28:	4307      	orrs	r7, r0
 8010b2a:	3568      	adds	r5, #104	; 0x68
 8010b2c:	e7e9      	b.n	8010b02 <_fwalk_reent+0x12>

08010b2e <__retarget_lock_init_recursive>:
 8010b2e:	4770      	bx	lr

08010b30 <__retarget_lock_acquire_recursive>:
 8010b30:	4770      	bx	lr

08010b32 <__retarget_lock_release_recursive>:
 8010b32:	4770      	bx	lr

08010b34 <__swhatbuf_r>:
 8010b34:	b570      	push	{r4, r5, r6, lr}
 8010b36:	460e      	mov	r6, r1
 8010b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b3c:	2900      	cmp	r1, #0
 8010b3e:	b096      	sub	sp, #88	; 0x58
 8010b40:	4614      	mov	r4, r2
 8010b42:	461d      	mov	r5, r3
 8010b44:	da07      	bge.n	8010b56 <__swhatbuf_r+0x22>
 8010b46:	2300      	movs	r3, #0
 8010b48:	602b      	str	r3, [r5, #0]
 8010b4a:	89b3      	ldrh	r3, [r6, #12]
 8010b4c:	061a      	lsls	r2, r3, #24
 8010b4e:	d410      	bmi.n	8010b72 <__swhatbuf_r+0x3e>
 8010b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b54:	e00e      	b.n	8010b74 <__swhatbuf_r+0x40>
 8010b56:	466a      	mov	r2, sp
 8010b58:	f000 f902 	bl	8010d60 <_fstat_r>
 8010b5c:	2800      	cmp	r0, #0
 8010b5e:	dbf2      	blt.n	8010b46 <__swhatbuf_r+0x12>
 8010b60:	9a01      	ldr	r2, [sp, #4]
 8010b62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010b66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010b6a:	425a      	negs	r2, r3
 8010b6c:	415a      	adcs	r2, r3
 8010b6e:	602a      	str	r2, [r5, #0]
 8010b70:	e7ee      	b.n	8010b50 <__swhatbuf_r+0x1c>
 8010b72:	2340      	movs	r3, #64	; 0x40
 8010b74:	2000      	movs	r0, #0
 8010b76:	6023      	str	r3, [r4, #0]
 8010b78:	b016      	add	sp, #88	; 0x58
 8010b7a:	bd70      	pop	{r4, r5, r6, pc}

08010b7c <__smakebuf_r>:
 8010b7c:	898b      	ldrh	r3, [r1, #12]
 8010b7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b80:	079d      	lsls	r5, r3, #30
 8010b82:	4606      	mov	r6, r0
 8010b84:	460c      	mov	r4, r1
 8010b86:	d507      	bpl.n	8010b98 <__smakebuf_r+0x1c>
 8010b88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010b8c:	6023      	str	r3, [r4, #0]
 8010b8e:	6123      	str	r3, [r4, #16]
 8010b90:	2301      	movs	r3, #1
 8010b92:	6163      	str	r3, [r4, #20]
 8010b94:	b002      	add	sp, #8
 8010b96:	bd70      	pop	{r4, r5, r6, pc}
 8010b98:	ab01      	add	r3, sp, #4
 8010b9a:	466a      	mov	r2, sp
 8010b9c:	f7ff ffca 	bl	8010b34 <__swhatbuf_r>
 8010ba0:	9900      	ldr	r1, [sp, #0]
 8010ba2:	4605      	mov	r5, r0
 8010ba4:	4630      	mov	r0, r6
 8010ba6:	f7ff f987 	bl	800feb8 <_malloc_r>
 8010baa:	b948      	cbnz	r0, 8010bc0 <__smakebuf_r+0x44>
 8010bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bb0:	059a      	lsls	r2, r3, #22
 8010bb2:	d4ef      	bmi.n	8010b94 <__smakebuf_r+0x18>
 8010bb4:	f023 0303 	bic.w	r3, r3, #3
 8010bb8:	f043 0302 	orr.w	r3, r3, #2
 8010bbc:	81a3      	strh	r3, [r4, #12]
 8010bbe:	e7e3      	b.n	8010b88 <__smakebuf_r+0xc>
 8010bc0:	4b0d      	ldr	r3, [pc, #52]	; (8010bf8 <__smakebuf_r+0x7c>)
 8010bc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8010bc4:	89a3      	ldrh	r3, [r4, #12]
 8010bc6:	6020      	str	r0, [r4, #0]
 8010bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bcc:	81a3      	strh	r3, [r4, #12]
 8010bce:	9b00      	ldr	r3, [sp, #0]
 8010bd0:	6163      	str	r3, [r4, #20]
 8010bd2:	9b01      	ldr	r3, [sp, #4]
 8010bd4:	6120      	str	r0, [r4, #16]
 8010bd6:	b15b      	cbz	r3, 8010bf0 <__smakebuf_r+0x74>
 8010bd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bdc:	4630      	mov	r0, r6
 8010bde:	f000 f8d1 	bl	8010d84 <_isatty_r>
 8010be2:	b128      	cbz	r0, 8010bf0 <__smakebuf_r+0x74>
 8010be4:	89a3      	ldrh	r3, [r4, #12]
 8010be6:	f023 0303 	bic.w	r3, r3, #3
 8010bea:	f043 0301 	orr.w	r3, r3, #1
 8010bee:	81a3      	strh	r3, [r4, #12]
 8010bf0:	89a0      	ldrh	r0, [r4, #12]
 8010bf2:	4305      	orrs	r5, r0
 8010bf4:	81a5      	strh	r5, [r4, #12]
 8010bf6:	e7cd      	b.n	8010b94 <__smakebuf_r+0x18>
 8010bf8:	0801098d 	.word	0x0801098d

08010bfc <_malloc_usable_size_r>:
 8010bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c00:	1f18      	subs	r0, r3, #4
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	bfbc      	itt	lt
 8010c06:	580b      	ldrlt	r3, [r1, r0]
 8010c08:	18c0      	addlt	r0, r0, r3
 8010c0a:	4770      	bx	lr

08010c0c <_raise_r>:
 8010c0c:	291f      	cmp	r1, #31
 8010c0e:	b538      	push	{r3, r4, r5, lr}
 8010c10:	4604      	mov	r4, r0
 8010c12:	460d      	mov	r5, r1
 8010c14:	d904      	bls.n	8010c20 <_raise_r+0x14>
 8010c16:	2316      	movs	r3, #22
 8010c18:	6003      	str	r3, [r0, #0]
 8010c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c1e:	bd38      	pop	{r3, r4, r5, pc}
 8010c20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010c22:	b112      	cbz	r2, 8010c2a <_raise_r+0x1e>
 8010c24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c28:	b94b      	cbnz	r3, 8010c3e <_raise_r+0x32>
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	f000 f830 	bl	8010c90 <_getpid_r>
 8010c30:	462a      	mov	r2, r5
 8010c32:	4601      	mov	r1, r0
 8010c34:	4620      	mov	r0, r4
 8010c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c3a:	f000 b817 	b.w	8010c6c <_kill_r>
 8010c3e:	2b01      	cmp	r3, #1
 8010c40:	d00a      	beq.n	8010c58 <_raise_r+0x4c>
 8010c42:	1c59      	adds	r1, r3, #1
 8010c44:	d103      	bne.n	8010c4e <_raise_r+0x42>
 8010c46:	2316      	movs	r3, #22
 8010c48:	6003      	str	r3, [r0, #0]
 8010c4a:	2001      	movs	r0, #1
 8010c4c:	e7e7      	b.n	8010c1e <_raise_r+0x12>
 8010c4e:	2400      	movs	r4, #0
 8010c50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010c54:	4628      	mov	r0, r5
 8010c56:	4798      	blx	r3
 8010c58:	2000      	movs	r0, #0
 8010c5a:	e7e0      	b.n	8010c1e <_raise_r+0x12>

08010c5c <raise>:
 8010c5c:	4b02      	ldr	r3, [pc, #8]	; (8010c68 <raise+0xc>)
 8010c5e:	4601      	mov	r1, r0
 8010c60:	6818      	ldr	r0, [r3, #0]
 8010c62:	f7ff bfd3 	b.w	8010c0c <_raise_r>
 8010c66:	bf00      	nop
 8010c68:	2400040c 	.word	0x2400040c

08010c6c <_kill_r>:
 8010c6c:	b538      	push	{r3, r4, r5, lr}
 8010c6e:	4d07      	ldr	r5, [pc, #28]	; (8010c8c <_kill_r+0x20>)
 8010c70:	2300      	movs	r3, #0
 8010c72:	4604      	mov	r4, r0
 8010c74:	4608      	mov	r0, r1
 8010c76:	4611      	mov	r1, r2
 8010c78:	602b      	str	r3, [r5, #0]
 8010c7a:	f7f3 f97f 	bl	8003f7c <_kill>
 8010c7e:	1c43      	adds	r3, r0, #1
 8010c80:	d102      	bne.n	8010c88 <_kill_r+0x1c>
 8010c82:	682b      	ldr	r3, [r5, #0]
 8010c84:	b103      	cbz	r3, 8010c88 <_kill_r+0x1c>
 8010c86:	6023      	str	r3, [r4, #0]
 8010c88:	bd38      	pop	{r3, r4, r5, pc}
 8010c8a:	bf00      	nop
 8010c8c:	2400fc00 	.word	0x2400fc00

08010c90 <_getpid_r>:
 8010c90:	f7f3 b972 	b.w	8003f78 <_getpid>

08010c94 <__sread>:
 8010c94:	b510      	push	{r4, lr}
 8010c96:	460c      	mov	r4, r1
 8010c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c9c:	f000 f894 	bl	8010dc8 <_read_r>
 8010ca0:	2800      	cmp	r0, #0
 8010ca2:	bfab      	itete	ge
 8010ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8010ca8:	181b      	addge	r3, r3, r0
 8010caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010cae:	bfac      	ite	ge
 8010cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8010cb2:	81a3      	strhlt	r3, [r4, #12]
 8010cb4:	bd10      	pop	{r4, pc}

08010cb6 <__swrite>:
 8010cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cba:	461f      	mov	r7, r3
 8010cbc:	898b      	ldrh	r3, [r1, #12]
 8010cbe:	05db      	lsls	r3, r3, #23
 8010cc0:	4605      	mov	r5, r0
 8010cc2:	460c      	mov	r4, r1
 8010cc4:	4616      	mov	r6, r2
 8010cc6:	d505      	bpl.n	8010cd4 <__swrite+0x1e>
 8010cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ccc:	2302      	movs	r3, #2
 8010cce:	2200      	movs	r2, #0
 8010cd0:	f000 f868 	bl	8010da4 <_lseek_r>
 8010cd4:	89a3      	ldrh	r3, [r4, #12]
 8010cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010cde:	81a3      	strh	r3, [r4, #12]
 8010ce0:	4632      	mov	r2, r6
 8010ce2:	463b      	mov	r3, r7
 8010ce4:	4628      	mov	r0, r5
 8010ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010cea:	f000 b817 	b.w	8010d1c <_write_r>

08010cee <__sseek>:
 8010cee:	b510      	push	{r4, lr}
 8010cf0:	460c      	mov	r4, r1
 8010cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cf6:	f000 f855 	bl	8010da4 <_lseek_r>
 8010cfa:	1c43      	adds	r3, r0, #1
 8010cfc:	89a3      	ldrh	r3, [r4, #12]
 8010cfe:	bf15      	itete	ne
 8010d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8010d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010d0a:	81a3      	strheq	r3, [r4, #12]
 8010d0c:	bf18      	it	ne
 8010d0e:	81a3      	strhne	r3, [r4, #12]
 8010d10:	bd10      	pop	{r4, pc}

08010d12 <__sclose>:
 8010d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d16:	f000 b813 	b.w	8010d40 <_close_r>
	...

08010d1c <_write_r>:
 8010d1c:	b538      	push	{r3, r4, r5, lr}
 8010d1e:	4d07      	ldr	r5, [pc, #28]	; (8010d3c <_write_r+0x20>)
 8010d20:	4604      	mov	r4, r0
 8010d22:	4608      	mov	r0, r1
 8010d24:	4611      	mov	r1, r2
 8010d26:	2200      	movs	r2, #0
 8010d28:	602a      	str	r2, [r5, #0]
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	f7f3 f944 	bl	8003fb8 <_write>
 8010d30:	1c43      	adds	r3, r0, #1
 8010d32:	d102      	bne.n	8010d3a <_write_r+0x1e>
 8010d34:	682b      	ldr	r3, [r5, #0]
 8010d36:	b103      	cbz	r3, 8010d3a <_write_r+0x1e>
 8010d38:	6023      	str	r3, [r4, #0]
 8010d3a:	bd38      	pop	{r3, r4, r5, pc}
 8010d3c:	2400fc00 	.word	0x2400fc00

08010d40 <_close_r>:
 8010d40:	b538      	push	{r3, r4, r5, lr}
 8010d42:	4d06      	ldr	r5, [pc, #24]	; (8010d5c <_close_r+0x1c>)
 8010d44:	2300      	movs	r3, #0
 8010d46:	4604      	mov	r4, r0
 8010d48:	4608      	mov	r0, r1
 8010d4a:	602b      	str	r3, [r5, #0]
 8010d4c:	f7f3 f942 	bl	8003fd4 <_close>
 8010d50:	1c43      	adds	r3, r0, #1
 8010d52:	d102      	bne.n	8010d5a <_close_r+0x1a>
 8010d54:	682b      	ldr	r3, [r5, #0]
 8010d56:	b103      	cbz	r3, 8010d5a <_close_r+0x1a>
 8010d58:	6023      	str	r3, [r4, #0]
 8010d5a:	bd38      	pop	{r3, r4, r5, pc}
 8010d5c:	2400fc00 	.word	0x2400fc00

08010d60 <_fstat_r>:
 8010d60:	b538      	push	{r3, r4, r5, lr}
 8010d62:	4d07      	ldr	r5, [pc, #28]	; (8010d80 <_fstat_r+0x20>)
 8010d64:	2300      	movs	r3, #0
 8010d66:	4604      	mov	r4, r0
 8010d68:	4608      	mov	r0, r1
 8010d6a:	4611      	mov	r1, r2
 8010d6c:	602b      	str	r3, [r5, #0]
 8010d6e:	f7f3 f935 	bl	8003fdc <_fstat>
 8010d72:	1c43      	adds	r3, r0, #1
 8010d74:	d102      	bne.n	8010d7c <_fstat_r+0x1c>
 8010d76:	682b      	ldr	r3, [r5, #0]
 8010d78:	b103      	cbz	r3, 8010d7c <_fstat_r+0x1c>
 8010d7a:	6023      	str	r3, [r4, #0]
 8010d7c:	bd38      	pop	{r3, r4, r5, pc}
 8010d7e:	bf00      	nop
 8010d80:	2400fc00 	.word	0x2400fc00

08010d84 <_isatty_r>:
 8010d84:	b538      	push	{r3, r4, r5, lr}
 8010d86:	4d06      	ldr	r5, [pc, #24]	; (8010da0 <_isatty_r+0x1c>)
 8010d88:	2300      	movs	r3, #0
 8010d8a:	4604      	mov	r4, r0
 8010d8c:	4608      	mov	r0, r1
 8010d8e:	602b      	str	r3, [r5, #0]
 8010d90:	f7f3 f92a 	bl	8003fe8 <_isatty>
 8010d94:	1c43      	adds	r3, r0, #1
 8010d96:	d102      	bne.n	8010d9e <_isatty_r+0x1a>
 8010d98:	682b      	ldr	r3, [r5, #0]
 8010d9a:	b103      	cbz	r3, 8010d9e <_isatty_r+0x1a>
 8010d9c:	6023      	str	r3, [r4, #0]
 8010d9e:	bd38      	pop	{r3, r4, r5, pc}
 8010da0:	2400fc00 	.word	0x2400fc00

08010da4 <_lseek_r>:
 8010da4:	b538      	push	{r3, r4, r5, lr}
 8010da6:	4d07      	ldr	r5, [pc, #28]	; (8010dc4 <_lseek_r+0x20>)
 8010da8:	4604      	mov	r4, r0
 8010daa:	4608      	mov	r0, r1
 8010dac:	4611      	mov	r1, r2
 8010dae:	2200      	movs	r2, #0
 8010db0:	602a      	str	r2, [r5, #0]
 8010db2:	461a      	mov	r2, r3
 8010db4:	f7f3 f91a 	bl	8003fec <_lseek>
 8010db8:	1c43      	adds	r3, r0, #1
 8010dba:	d102      	bne.n	8010dc2 <_lseek_r+0x1e>
 8010dbc:	682b      	ldr	r3, [r5, #0]
 8010dbe:	b103      	cbz	r3, 8010dc2 <_lseek_r+0x1e>
 8010dc0:	6023      	str	r3, [r4, #0]
 8010dc2:	bd38      	pop	{r3, r4, r5, pc}
 8010dc4:	2400fc00 	.word	0x2400fc00

08010dc8 <_read_r>:
 8010dc8:	b538      	push	{r3, r4, r5, lr}
 8010dca:	4d07      	ldr	r5, [pc, #28]	; (8010de8 <_read_r+0x20>)
 8010dcc:	4604      	mov	r4, r0
 8010dce:	4608      	mov	r0, r1
 8010dd0:	4611      	mov	r1, r2
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	602a      	str	r2, [r5, #0]
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	f7f3 f8e0 	bl	8003f9c <_read>
 8010ddc:	1c43      	adds	r3, r0, #1
 8010dde:	d102      	bne.n	8010de6 <_read_r+0x1e>
 8010de0:	682b      	ldr	r3, [r5, #0]
 8010de2:	b103      	cbz	r3, 8010de6 <_read_r+0x1e>
 8010de4:	6023      	str	r3, [r4, #0]
 8010de6:	bd38      	pop	{r3, r4, r5, pc}
 8010de8:	2400fc00 	.word	0x2400fc00
 8010dec:	00000000 	.word	0x00000000

08010df0 <exp>:
 8010df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df4:	b087      	sub	sp, #28
 8010df6:	ed8d 0b00 	vstr	d0, [sp]
 8010dfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010dfe:	f46f 7372 	mvn.w	r3, #968	; 0x3c8
 8010e02:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8010e06:	18f7      	adds	r7, r6, r3
 8010e08:	2f3e      	cmp	r7, #62	; 0x3e
 8010e0a:	d929      	bls.n	8010e60 <exp+0x70>
 8010e0c:	2f00      	cmp	r7, #0
 8010e0e:	da08      	bge.n	8010e22 <exp+0x32>
 8010e10:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010e14:	ed9d 7b00 	vldr	d7, [sp]
 8010e18:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010e1c:	b007      	add	sp, #28
 8010e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e22:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8010e26:	d91a      	bls.n	8010e5e <exp+0x6e>
 8010e28:	4b65      	ldr	r3, [pc, #404]	; (8010fc0 <exp+0x1d0>)
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	4299      	cmp	r1, r3
 8010e2e:	bf08      	it	eq
 8010e30:	4290      	cmpeq	r0, r2
 8010e32:	f000 80b6 	beq.w	8010fa2 <exp+0x1b2>
 8010e36:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8010e3a:	429e      	cmp	r6, r3
 8010e3c:	d0e8      	beq.n	8010e10 <exp+0x20>
 8010e3e:	2800      	cmp	r0, #0
 8010e40:	f171 0300 	sbcs.w	r3, r1, #0
 8010e44:	f04f 0000 	mov.w	r0, #0
 8010e48:	da04      	bge.n	8010e54 <exp+0x64>
 8010e4a:	b007      	add	sp, #28
 8010e4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e50:	f000 b9f6 	b.w	8011240 <__math_uflow>
 8010e54:	b007      	add	sp, #28
 8010e56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e5a:	f000 b9f9 	b.w	8011250 <__math_oflow>
 8010e5e:	2600      	movs	r6, #0
 8010e60:	4858      	ldr	r0, [pc, #352]	; (8010fc4 <exp+0x1d4>)
 8010e62:	ed9d 3b00 	vldr	d3, [sp]
 8010e66:	ed90 6b02 	vldr	d6, [r0, #8]
 8010e6a:	ed90 7b00 	vldr	d7, [r0]
 8010e6e:	eeb0 4b46 	vmov.f64	d4, d6
 8010e72:	eea7 4b03 	vfma.f64	d4, d7, d3
 8010e76:	ee34 7b46 	vsub.f64	d7, d4, d6
 8010e7a:	ed90 6b04 	vldr	d6, [r0, #16]
 8010e7e:	ee14 ca10 	vmov	ip, s8
 8010e82:	eeb0 4b43 	vmov.f64	d4, d3
 8010e86:	f00c 017f 	and.w	r1, ip, #127	; 0x7f
 8010e8a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010e8e:	eeb0 6b44 	vmov.f64	d6, d4
 8010e92:	ed90 4b06 	vldr	d4, [r0, #24]
 8010e96:	1849      	adds	r1, r1, r1
 8010e98:	eb00 09c1 	add.w	r9, r0, r1, lsl #3
 8010e9c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010ea0:	eea4 6b07 	vfma.f64	d6, d4, d7
 8010ea4:	ed90 3b0a 	vldr	d3, [r0, #40]	; 0x28
 8010ea8:	ee26 2b06 	vmul.f64	d2, d6, d6
 8010eac:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8010eb0:	ed90 4b08 	vldr	d4, [r0, #32]
 8010eb4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010eb8:	e9d9 891e 	ldrd	r8, r9, [r9, #120]	; 0x78
 8010ebc:	eea3 4b06 	vfma.f64	d4, d3, d6
 8010ec0:	eea4 7b02 	vfma.f64	d7, d4, d2
 8010ec4:	ed90 3b0e 	vldr	d3, [r0, #56]	; 0x38
 8010ec8:	ee22 2b02 	vmul.f64	d2, d2, d2
 8010ecc:	ed90 4b0c 	vldr	d4, [r0, #48]	; 0x30
 8010ed0:	2700      	movs	r7, #0
 8010ed2:	ea4f 3e4c 	mov.w	lr, ip, lsl #13
 8010ed6:	eb17 0a08 	adds.w	sl, r7, r8
 8010eda:	eea3 4b06 	vfma.f64	d4, d3, d6
 8010ede:	eb4e 0b09 	adc.w	fp, lr, r9
 8010ee2:	eea2 7b04 	vfma.f64	d7, d2, d4
 8010ee6:	2e00      	cmp	r6, #0
 8010ee8:	d156      	bne.n	8010f98 <exp+0x1a8>
 8010eea:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8010eee:	4631      	mov	r1, r6
 8010ef0:	ea50 0301 	orrs.w	r3, r0, r1
 8010ef4:	d113      	bne.n	8010f1e <exp+0x12e>
 8010ef6:	4a34      	ldr	r2, [pc, #208]	; (8010fc8 <exp+0x1d8>)
 8010ef8:	eb1a 0407 	adds.w	r4, sl, r7
 8010efc:	eb4b 0502 	adc.w	r5, fp, r2
 8010f00:	ec45 4b10 	vmov	d0, r4, r5
 8010f04:	ec45 4b16 	vmov	d6, r4, r5
 8010f08:	eea7 0b06 	vfma.f64	d0, d7, d6
 8010f0c:	ed9f 7b26 	vldr	d7, [pc, #152]	; 8010fa8 <exp+0x1b8>
 8010f10:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010f14:	b007      	add	sp, #28
 8010f16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f1a:	f000 b9d1 	b.w	80112c0 <__math_check_oflow>
 8010f1e:	4a2b      	ldr	r2, [pc, #172]	; (8010fcc <exp+0x1dc>)
 8010f20:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010f24:	2100      	movs	r1, #0
 8010f26:	eb1a 0301 	adds.w	r3, sl, r1
 8010f2a:	ee05 3a10 	vmov	s10, r3
 8010f2e:	eb4b 0302 	adc.w	r3, fp, r2
 8010f32:	ee05 3a90 	vmov	s11, r3
 8010f36:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010f3a:	ee35 6b07 	vadd.f64	d6, d5, d7
 8010f3e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f46:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8010fb0 <exp+0x1c0>
 8010f4a:	d51e      	bpl.n	8010f8a <exp+0x19a>
 8010f4c:	ee35 5b46 	vsub.f64	d5, d5, d6
 8010f50:	ee36 3b04 	vadd.f64	d3, d6, d4
 8010f54:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010f58:	ee34 5b43 	vsub.f64	d5, d4, d3
 8010f5c:	ee35 6b06 	vadd.f64	d6, d5, d6
 8010f60:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010f64:	ee36 6b03 	vadd.f64	d6, d6, d3
 8010f68:	ee36 6b44 	vsub.f64	d6, d6, d4
 8010f6c:	eeb5 6b40 	vcmp.f64	d6, #0.0
 8010f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f74:	d101      	bne.n	8010f7a <exp+0x18a>
 8010f76:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8010fb8 <exp+0x1c8>
 8010f7a:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010f7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010f82:	ee27 7b00 	vmul.f64	d7, d7, d0
 8010f86:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010f8a:	ee26 0b00 	vmul.f64	d0, d6, d0
 8010f8e:	b007      	add	sp, #28
 8010f90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f94:	f000 b98b 	b.w	80112ae <__math_check_uflow>
 8010f98:	ec4b ab10 	vmov	d0, sl, fp
 8010f9c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010fa0:	e73c      	b.n	8010e1c <exp+0x2c>
 8010fa2:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8010fb8 <exp+0x1c8>
 8010fa6:	e739      	b.n	8010e1c <exp+0x2c>
 8010fa8:	00000000 	.word	0x00000000
 8010fac:	7f000000 	.word	0x7f000000
 8010fb0:	00000000 	.word	0x00000000
 8010fb4:	00100000 	.word	0x00100000
	...
 8010fc0:	fff00000 	.word	0xfff00000
 8010fc4:	0801b540 	.word	0x0801b540
 8010fc8:	c0f00000 	.word	0xc0f00000
 8010fcc:	3fe00000 	.word	0x3fe00000

08010fd0 <log>:
 8010fd0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8010fd4:	ed2d 8b02 	vpush	{d8}
 8010fd8:	b082      	sub	sp, #8
 8010fda:	ed8d 0b00 	vstr	d0, [sp]
 8010fde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fe2:	2600      	movs	r6, #0
 8010fe4:	1994      	adds	r4, r2, r6
 8010fe6:	4e80      	ldr	r6, [pc, #512]	; (80111e8 <log+0x218>)
 8010fe8:	4f80      	ldr	r7, [pc, #512]	; (80111ec <log+0x21c>)
 8010fea:	eb43 0506 	adc.w	r5, r3, r6
 8010fee:	42af      	cmp	r7, r5
 8010ff0:	f04f 36ff 	mov.w	r6, #4294967295
 8010ff4:	bf08      	it	eq
 8010ff6:	42a6      	cmpeq	r6, r4
 8010ff8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8010ffc:	d363      	bcc.n	80110c6 <log+0xf6>
 8010ffe:	497c      	ldr	r1, [pc, #496]	; (80111f0 <log+0x220>)
 8011000:	2000      	movs	r0, #0
 8011002:	428b      	cmp	r3, r1
 8011004:	bf08      	it	eq
 8011006:	4282      	cmpeq	r2, r0
 8011008:	f000 80de 	beq.w	80111c8 <log+0x1f8>
 801100c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011010:	ee30 7b47 	vsub.f64	d7, d0, d7
 8011014:	4b77      	ldr	r3, [pc, #476]	; (80111f4 <log+0x224>)
 8011016:	ee27 1b07 	vmul.f64	d1, d7, d7
 801101a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 801101e:	ee27 3b01 	vmul.f64	d3, d7, d1
 8011022:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 8011026:	eea6 4b07 	vfma.f64	d4, d6, d7
 801102a:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 801102e:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8011032:	eea6 4b01 	vfma.f64	d4, d6, d1
 8011036:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 801103a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801103e:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8011042:	eea5 6b01 	vfma.f64	d6, d5, d1
 8011046:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 801104a:	eeb0 2b46 	vmov.f64	d2, d6
 801104e:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 8011052:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011056:	ed93 5b20 	vldr	d5, [r3, #128]	; 0x80
 801105a:	eea5 6b01 	vfma.f64	d6, d5, d1
 801105e:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 8011062:	ed93 1b0e 	vldr	d1, [r3, #56]	; 0x38
 8011066:	eea5 6b03 	vfma.f64	d6, d5, d3
 801106a:	eea6 2b03 	vfma.f64	d2, d6, d3
 801106e:	ed9f 6b58 	vldr	d6, [pc, #352]	; 80111d0 <log+0x200>
 8011072:	eea2 4b03 	vfma.f64	d4, d2, d3
 8011076:	eeb0 2b47 	vmov.f64	d2, d7
 801107a:	eea7 2b06 	vfma.f64	d2, d7, d6
 801107e:	eea7 2b46 	vfms.f64	d2, d7, d6
 8011082:	eeb0 6b47 	vmov.f64	d6, d7
 8011086:	ee37 8b42 	vsub.f64	d8, d7, d2
 801108a:	ee22 0b02 	vmul.f64	d0, d2, d2
 801108e:	eea0 6b01 	vfma.f64	d6, d0, d1
 8011092:	ee37 5b46 	vsub.f64	d5, d7, d6
 8011096:	ee37 7b02 	vadd.f64	d7, d7, d2
 801109a:	eea0 5b01 	vfma.f64	d5, d0, d1
 801109e:	ee21 1b08 	vmul.f64	d1, d1, d8
 80110a2:	eea1 5b07 	vfma.f64	d5, d1, d7
 80110a6:	eeb0 7b45 	vmov.f64	d7, d5
 80110aa:	eea4 7b03 	vfma.f64	d7, d4, d3
 80110ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80110b2:	ed8d 7b00 	vstr	d7, [sp]
 80110b6:	ed9d 0b00 	vldr	d0, [sp]
 80110ba:	b002      	add	sp, #8
 80110bc:	ecbd 8b02 	vpop	{d8}
 80110c0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80110c4:	4770      	bx	lr
 80110c6:	f1ac 0510 	sub.w	r5, ip, #16
 80110ca:	f647 74df 	movw	r4, #32735	; 0x7fdf
 80110ce:	42a5      	cmp	r5, r4
 80110d0:	d930      	bls.n	8011134 <log+0x164>
 80110d2:	1890      	adds	r0, r2, r2
 80110d4:	eb43 0103 	adc.w	r1, r3, r3
 80110d8:	4301      	orrs	r1, r0
 80110da:	d107      	bne.n	80110ec <log+0x11c>
 80110dc:	2001      	movs	r0, #1
 80110de:	b002      	add	sp, #8
 80110e0:	ecbd 8b02 	vpop	{d8}
 80110e4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80110e8:	f000 b8ba 	b.w	8011260 <__math_divzero>
 80110ec:	4942      	ldr	r1, [pc, #264]	; (80111f8 <log+0x228>)
 80110ee:	2000      	movs	r0, #0
 80110f0:	428b      	cmp	r3, r1
 80110f2:	bf08      	it	eq
 80110f4:	4282      	cmpeq	r2, r0
 80110f6:	d0de      	beq.n	80110b6 <log+0xe6>
 80110f8:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 80110fc:	d104      	bne.n	8011108 <log+0x138>
 80110fe:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 8011102:	ea31 010c 	bics.w	r1, r1, ip
 8011106:	d108      	bne.n	801111a <log+0x14a>
 8011108:	ed9d 0b00 	vldr	d0, [sp]
 801110c:	b002      	add	sp, #8
 801110e:	ecbd 8b02 	vpop	{d8}
 8011112:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8011116:	f000 b8bb 	b.w	8011290 <__math_invalid>
 801111a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80111d8 <log+0x208>
 801111e:	ed9d 6b00 	vldr	d6, [sp]
 8011122:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011126:	ec56 5b17 	vmov	r5, r6, d7
 801112a:	4834      	ldr	r0, [pc, #208]	; (80111fc <log+0x22c>)
 801112c:	2400      	movs	r4, #0
 801112e:	192a      	adds	r2, r5, r4
 8011130:	eb46 0300 	adc.w	r3, r6, r0
 8011134:	2100      	movs	r1, #0
 8011136:	1851      	adds	r1, r2, r1
 8011138:	4931      	ldr	r1, [pc, #196]	; (8011200 <log+0x230>)
 801113a:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 801113e:	eb43 0101 	adc.w	r1, r3, r1
 8011142:	0d0c      	lsrs	r4, r1, #20
 8011144:	2500      	movs	r5, #0
 8011146:	ebb2 0805 	subs.w	r8, r2, r5
 801114a:	ea4f 5404 	mov.w	r4, r4, lsl #20
 801114e:	eb63 0904 	sbc.w	r9, r3, r4
 8011152:	4b28      	ldr	r3, [pc, #160]	; (80111f4 <log+0x224>)
 8011154:	f3c1 3046 	ubfx	r0, r1, #13, #7
 8011158:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 801115c:	ed92 7b24 	vldr	d7, [r2, #144]	; 0x90
 8011160:	ec49 8b16 	vmov	d6, r8, r9
 8011164:	1509      	asrs	r1, r1, #20
 8011166:	eea6 4b07 	vfma.f64	d4, d6, d7
 801116a:	ee07 1a90 	vmov	s15, r1
 801116e:	ee24 1b04 	vmul.f64	d1, d4, d4
 8011172:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8011176:	ed93 5b00 	vldr	d5, [r3]
 801117a:	ee24 0b01 	vmul.f64	d0, d4, d1
 801117e:	ed93 3b02 	vldr	d3, [r3, #8]
 8011182:	ed92 7b26 	vldr	d7, [r2, #152]	; 0x98
 8011186:	eea5 7b06 	vfma.f64	d7, d5, d6
 801118a:	ee34 5b07 	vadd.f64	d5, d4, d7
 801118e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011192:	ee37 7b04 	vadd.f64	d7, d7, d4
 8011196:	eea3 7b06 	vfma.f64	d7, d3, d6
 801119a:	ed93 6b04 	vldr	d6, [r3, #16]
 801119e:	ed93 3b08 	vldr	d3, [r3, #32]
 80111a2:	eea6 7b01 	vfma.f64	d7, d6, d1
 80111a6:	ed93 6b06 	vldr	d6, [r3, #24]
 80111aa:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 80111ae:	eea3 6b04 	vfma.f64	d6, d3, d4
 80111b2:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 80111b6:	eea2 3b04 	vfma.f64	d3, d2, d4
 80111ba:	eea3 6b01 	vfma.f64	d6, d3, d1
 80111be:	eea0 7b06 	vfma.f64	d7, d0, d6
 80111c2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80111c6:	e774      	b.n	80110b2 <log+0xe2>
 80111c8:	ed9f 7b05 	vldr	d7, [pc, #20]	; 80111e0 <log+0x210>
 80111cc:	e771      	b.n	80110b2 <log+0xe2>
 80111ce:	bf00      	nop
 80111d0:	00000000 	.word	0x00000000
 80111d4:	41a00000 	.word	0x41a00000
 80111d8:	00000000 	.word	0x00000000
 80111dc:	43300000 	.word	0x43300000
	...
 80111e8:	c0120000 	.word	0xc0120000
 80111ec:	000308ff 	.word	0x000308ff
 80111f0:	3ff00000 	.word	0x3ff00000
 80111f4:	0801bdb0 	.word	0x0801bdb0
 80111f8:	7ff00000 	.word	0x7ff00000
 80111fc:	fcc00000 	.word	0xfcc00000
 8011200:	c01a0000 	.word	0xc01a0000

08011204 <with_errno>:
 8011204:	b513      	push	{r0, r1, r4, lr}
 8011206:	4604      	mov	r4, r0
 8011208:	ed8d 0b00 	vstr	d0, [sp]
 801120c:	f7fc ffb0 	bl	800e170 <__errno>
 8011210:	ed9d 0b00 	vldr	d0, [sp]
 8011214:	6004      	str	r4, [r0, #0]
 8011216:	b002      	add	sp, #8
 8011218:	bd10      	pop	{r4, pc}

0801121a <xflow>:
 801121a:	b082      	sub	sp, #8
 801121c:	b158      	cbz	r0, 8011236 <xflow+0x1c>
 801121e:	eeb1 7b40 	vneg.f64	d7, d0
 8011222:	ed8d 7b00 	vstr	d7, [sp]
 8011226:	ed9d 7b00 	vldr	d7, [sp]
 801122a:	2022      	movs	r0, #34	; 0x22
 801122c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011230:	b002      	add	sp, #8
 8011232:	f7ff bfe7 	b.w	8011204 <with_errno>
 8011236:	eeb0 7b40 	vmov.f64	d7, d0
 801123a:	e7f2      	b.n	8011222 <xflow+0x8>
 801123c:	0000      	movs	r0, r0
	...

08011240 <__math_uflow>:
 8011240:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011248 <__math_uflow+0x8>
 8011244:	f7ff bfe9 	b.w	801121a <xflow>
 8011248:	00000000 	.word	0x00000000
 801124c:	10000000 	.word	0x10000000

08011250 <__math_oflow>:
 8011250:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011258 <__math_oflow+0x8>
 8011254:	f7ff bfe1 	b.w	801121a <xflow>
 8011258:	00000000 	.word	0x00000000
 801125c:	70000000 	.word	0x70000000

08011260 <__math_divzero>:
 8011260:	b082      	sub	sp, #8
 8011262:	2800      	cmp	r0, #0
 8011264:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011268:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801126c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011270:	ed8d 7b00 	vstr	d7, [sp]
 8011274:	ed9d 0b00 	vldr	d0, [sp]
 8011278:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011288 <__math_divzero+0x28>
 801127c:	2022      	movs	r0, #34	; 0x22
 801127e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8011282:	b002      	add	sp, #8
 8011284:	f7ff bfbe 	b.w	8011204 <with_errno>
	...

08011290 <__math_invalid>:
 8011290:	eeb0 7b40 	vmov.f64	d7, d0
 8011294:	eeb4 7b47 	vcmp.f64	d7, d7
 8011298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801129c:	ee30 6b40 	vsub.f64	d6, d0, d0
 80112a0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80112a4:	d602      	bvs.n	80112ac <__math_invalid+0x1c>
 80112a6:	2021      	movs	r0, #33	; 0x21
 80112a8:	f7ff bfac 	b.w	8011204 <with_errno>
 80112ac:	4770      	bx	lr

080112ae <__math_check_uflow>:
 80112ae:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80112b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112b6:	d102      	bne.n	80112be <__math_check_uflow+0x10>
 80112b8:	2022      	movs	r0, #34	; 0x22
 80112ba:	f7ff bfa3 	b.w	8011204 <with_errno>
 80112be:	4770      	bx	lr

080112c0 <__math_check_oflow>:
 80112c0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80112e0 <__math_check_oflow+0x20>
 80112c4:	eeb0 7bc0 	vabs.f64	d7, d0
 80112c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80112cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d0:	dd02      	ble.n	80112d8 <__math_check_oflow+0x18>
 80112d2:	2022      	movs	r0, #34	; 0x22
 80112d4:	f7ff bf96 	b.w	8011204 <with_errno>
 80112d8:	4770      	bx	lr
 80112da:	bf00      	nop
 80112dc:	f3af 8000 	nop.w
 80112e0:	ffffffff 	.word	0xffffffff
 80112e4:	7fefffff 	.word	0x7fefffff

080112e8 <cos>:
 80112e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80112ea:	eeb0 7b40 	vmov.f64	d7, d0
 80112ee:	ee17 3a90 	vmov	r3, s15
 80112f2:	4a1f      	ldr	r2, [pc, #124]	; (8011370 <cos+0x88>)
 80112f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80112f8:	4293      	cmp	r3, r2
 80112fa:	dc04      	bgt.n	8011306 <cos+0x1e>
 80112fc:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8011368 <cos+0x80>
 8011300:	f000 fa72 	bl	80117e8 <__kernel_cos>
 8011304:	e004      	b.n	8011310 <cos+0x28>
 8011306:	4a1b      	ldr	r2, [pc, #108]	; (8011374 <cos+0x8c>)
 8011308:	4293      	cmp	r3, r2
 801130a:	dd04      	ble.n	8011316 <cos+0x2e>
 801130c:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011310:	b005      	add	sp, #20
 8011312:	f85d fb04 	ldr.w	pc, [sp], #4
 8011316:	4668      	mov	r0, sp
 8011318:	f000 f926 	bl	8011568 <__ieee754_rem_pio2>
 801131c:	f000 0003 	and.w	r0, r0, #3
 8011320:	2801      	cmp	r0, #1
 8011322:	d007      	beq.n	8011334 <cos+0x4c>
 8011324:	2802      	cmp	r0, #2
 8011326:	d00e      	beq.n	8011346 <cos+0x5e>
 8011328:	b9a0      	cbnz	r0, 8011354 <cos+0x6c>
 801132a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801132e:	ed9d 0b00 	vldr	d0, [sp]
 8011332:	e7e5      	b.n	8011300 <cos+0x18>
 8011334:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011338:	ed9d 0b00 	vldr	d0, [sp]
 801133c:	f000 fd40 	bl	8011dc0 <__kernel_sin>
 8011340:	eeb1 0b40 	vneg.f64	d0, d0
 8011344:	e7e4      	b.n	8011310 <cos+0x28>
 8011346:	ed9d 1b02 	vldr	d1, [sp, #8]
 801134a:	ed9d 0b00 	vldr	d0, [sp]
 801134e:	f000 fa4b 	bl	80117e8 <__kernel_cos>
 8011352:	e7f5      	b.n	8011340 <cos+0x58>
 8011354:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011358:	ed9d 0b00 	vldr	d0, [sp]
 801135c:	2001      	movs	r0, #1
 801135e:	f000 fd2f 	bl	8011dc0 <__kernel_sin>
 8011362:	e7d5      	b.n	8011310 <cos+0x28>
 8011364:	f3af 8000 	nop.w
	...
 8011370:	3fe921fb 	.word	0x3fe921fb
 8011374:	7fefffff 	.word	0x7fefffff

08011378 <sin>:
 8011378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801137a:	eeb0 7b40 	vmov.f64	d7, d0
 801137e:	ee17 3a90 	vmov	r3, s15
 8011382:	4a1f      	ldr	r2, [pc, #124]	; (8011400 <sin+0x88>)
 8011384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011388:	4293      	cmp	r3, r2
 801138a:	dc05      	bgt.n	8011398 <sin+0x20>
 801138c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80113f8 <sin+0x80>
 8011390:	2000      	movs	r0, #0
 8011392:	f000 fd15 	bl	8011dc0 <__kernel_sin>
 8011396:	e004      	b.n	80113a2 <sin+0x2a>
 8011398:	4a1a      	ldr	r2, [pc, #104]	; (8011404 <sin+0x8c>)
 801139a:	4293      	cmp	r3, r2
 801139c:	dd04      	ble.n	80113a8 <sin+0x30>
 801139e:	ee30 0b40 	vsub.f64	d0, d0, d0
 80113a2:	b005      	add	sp, #20
 80113a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80113a8:	4668      	mov	r0, sp
 80113aa:	f000 f8dd 	bl	8011568 <__ieee754_rem_pio2>
 80113ae:	f000 0003 	and.w	r0, r0, #3
 80113b2:	2801      	cmp	r0, #1
 80113b4:	d008      	beq.n	80113c8 <sin+0x50>
 80113b6:	2802      	cmp	r0, #2
 80113b8:	d00d      	beq.n	80113d6 <sin+0x5e>
 80113ba:	b9b0      	cbnz	r0, 80113ea <sin+0x72>
 80113bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80113c0:	ed9d 0b00 	vldr	d0, [sp]
 80113c4:	2001      	movs	r0, #1
 80113c6:	e7e4      	b.n	8011392 <sin+0x1a>
 80113c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80113cc:	ed9d 0b00 	vldr	d0, [sp]
 80113d0:	f000 fa0a 	bl	80117e8 <__kernel_cos>
 80113d4:	e7e5      	b.n	80113a2 <sin+0x2a>
 80113d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80113da:	ed9d 0b00 	vldr	d0, [sp]
 80113de:	2001      	movs	r0, #1
 80113e0:	f000 fcee 	bl	8011dc0 <__kernel_sin>
 80113e4:	eeb1 0b40 	vneg.f64	d0, d0
 80113e8:	e7db      	b.n	80113a2 <sin+0x2a>
 80113ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80113ee:	ed9d 0b00 	vldr	d0, [sp]
 80113f2:	f000 f9f9 	bl	80117e8 <__kernel_cos>
 80113f6:	e7f5      	b.n	80113e4 <sin+0x6c>
	...
 8011400:	3fe921fb 	.word	0x3fe921fb
 8011404:	7fefffff 	.word	0x7fefffff

08011408 <log10>:
 8011408:	b508      	push	{r3, lr}
 801140a:	ed2d 8b02 	vpush	{d8}
 801140e:	eeb0 8b40 	vmov.f64	d8, d0
 8011412:	f000 f831 	bl	8011478 <__ieee754_log10>
 8011416:	4b16      	ldr	r3, [pc, #88]	; (8011470 <log10+0x68>)
 8011418:	f993 3000 	ldrsb.w	r3, [r3]
 801141c:	3301      	adds	r3, #1
 801141e:	d014      	beq.n	801144a <log10+0x42>
 8011420:	eeb4 8b48 	vcmp.f64	d8, d8
 8011424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011428:	d60f      	bvs.n	801144a <log10+0x42>
 801142a:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 801142e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011432:	d80a      	bhi.n	801144a <log10+0x42>
 8011434:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801143c:	d108      	bne.n	8011450 <log10+0x48>
 801143e:	f7fc fe97 	bl	800e170 <__errno>
 8011442:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8011468 <log10+0x60>
 8011446:	2322      	movs	r3, #34	; 0x22
 8011448:	6003      	str	r3, [r0, #0]
 801144a:	ecbd 8b02 	vpop	{d8}
 801144e:	bd08      	pop	{r3, pc}
 8011450:	f7fc fe8e 	bl	800e170 <__errno>
 8011454:	ecbd 8b02 	vpop	{d8}
 8011458:	2321      	movs	r3, #33	; 0x21
 801145a:	6003      	str	r3, [r0, #0]
 801145c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011460:	4804      	ldr	r0, [pc, #16]	; (8011474 <log10+0x6c>)
 8011462:	f000 bd85 	b.w	8011f70 <nan>
 8011466:	bf00      	nop
 8011468:	00000000 	.word	0x00000000
 801146c:	fff00000 	.word	0xfff00000
 8011470:	240005dc 	.word	0x240005dc
 8011474:	0801b3d0 	.word	0x0801b3d0

08011478 <__ieee754_log10>:
 8011478:	b510      	push	{r4, lr}
 801147a:	ed2d 8b02 	vpush	{d8}
 801147e:	b082      	sub	sp, #8
 8011480:	ed8d 0b00 	vstr	d0, [sp]
 8011484:	9b01      	ldr	r3, [sp, #4]
 8011486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801148a:	da28      	bge.n	80114de <__ieee754_log10+0x66>
 801148c:	9900      	ldr	r1, [sp, #0]
 801148e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011492:	430a      	orrs	r2, r1
 8011494:	d109      	bne.n	80114aa <__ieee754_log10+0x32>
 8011496:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8011530 <__ieee754_log10+0xb8>
 801149a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011538 <__ieee754_log10+0xc0>
 801149e:	ee86 0b07 	vdiv.f64	d0, d6, d7
 80114a2:	b002      	add	sp, #8
 80114a4:	ecbd 8b02 	vpop	{d8}
 80114a8:	bd10      	pop	{r4, pc}
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	da04      	bge.n	80114b8 <__ieee754_log10+0x40>
 80114ae:	ed9d 7b00 	vldr	d7, [sp]
 80114b2:	ee37 6b47 	vsub.f64	d6, d7, d7
 80114b6:	e7f0      	b.n	801149a <__ieee754_log10+0x22>
 80114b8:	ed9d 6b00 	vldr	d6, [sp]
 80114bc:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011540 <__ieee754_log10+0xc8>
 80114c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80114c4:	ed8d 7b00 	vstr	d7, [sp]
 80114c8:	9b01      	ldr	r3, [sp, #4]
 80114ca:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80114ce:	4924      	ldr	r1, [pc, #144]	; (8011560 <__ieee754_log10+0xe8>)
 80114d0:	428b      	cmp	r3, r1
 80114d2:	dd06      	ble.n	80114e2 <__ieee754_log10+0x6a>
 80114d4:	ed9d 7b00 	vldr	d7, [sp]
 80114d8:	ee37 0b07 	vadd.f64	d0, d7, d7
 80114dc:	e7e1      	b.n	80114a2 <__ieee754_log10+0x2a>
 80114de:	2200      	movs	r2, #0
 80114e0:	e7f5      	b.n	80114ce <__ieee754_log10+0x56>
 80114e2:	1518      	asrs	r0, r3, #20
 80114e4:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80114e8:	4410      	add	r0, r2
 80114ea:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80114ee:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 80114f2:	ee08 3a10 	vmov	s16, r3
 80114f6:	f240 34ff 	movw	r4, #1023	; 0x3ff
 80114fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114fe:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 8011502:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8011506:	ec43 2b10 	vmov	d0, r2, r3
 801150a:	f7ff fd61 	bl	8010fd0 <log>
 801150e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011548 <__ieee754_log10+0xd0>
 8011512:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011516:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011550 <__ieee754_log10+0xd8>
 801151a:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 801151e:	eea8 0b07 	vfma.f64	d0, d8, d7
 8011522:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8011558 <__ieee754_log10+0xe0>
 8011526:	eea8 0b07 	vfma.f64	d0, d8, d7
 801152a:	e7ba      	b.n	80114a2 <__ieee754_log10+0x2a>
 801152c:	f3af 8000 	nop.w
 8011530:	00000000 	.word	0x00000000
 8011534:	c3500000 	.word	0xc3500000
	...
 8011544:	43500000 	.word	0x43500000
 8011548:	1526e50e 	.word	0x1526e50e
 801154c:	3fdbcb7b 	.word	0x3fdbcb7b
 8011550:	11f12b36 	.word	0x11f12b36
 8011554:	3d59fef3 	.word	0x3d59fef3
 8011558:	509f6000 	.word	0x509f6000
 801155c:	3fd34413 	.word	0x3fd34413
 8011560:	7fefffff 	.word	0x7fefffff
 8011564:	00000000 	.word	0x00000000

08011568 <__ieee754_rem_pio2>:
 8011568:	b570      	push	{r4, r5, r6, lr}
 801156a:	eeb0 7b40 	vmov.f64	d7, d0
 801156e:	ee17 5a90 	vmov	r5, s15
 8011572:	4b97      	ldr	r3, [pc, #604]	; (80117d0 <__ieee754_rem_pio2+0x268>)
 8011574:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011578:	429e      	cmp	r6, r3
 801157a:	b088      	sub	sp, #32
 801157c:	4604      	mov	r4, r0
 801157e:	dc07      	bgt.n	8011590 <__ieee754_rem_pio2+0x28>
 8011580:	2200      	movs	r2, #0
 8011582:	2300      	movs	r3, #0
 8011584:	ed84 0b00 	vstr	d0, [r4]
 8011588:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801158c:	2000      	movs	r0, #0
 801158e:	e01b      	b.n	80115c8 <__ieee754_rem_pio2+0x60>
 8011590:	4b90      	ldr	r3, [pc, #576]	; (80117d4 <__ieee754_rem_pio2+0x26c>)
 8011592:	429e      	cmp	r6, r3
 8011594:	dc3b      	bgt.n	801160e <__ieee754_rem_pio2+0xa6>
 8011596:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801159a:	2d00      	cmp	r5, #0
 801159c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011790 <__ieee754_rem_pio2+0x228>
 80115a0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80115a4:	dd19      	ble.n	80115da <__ieee754_rem_pio2+0x72>
 80115a6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80115aa:	429e      	cmp	r6, r3
 80115ac:	d00e      	beq.n	80115cc <__ieee754_rem_pio2+0x64>
 80115ae:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8011798 <__ieee754_rem_pio2+0x230>
 80115b2:	ee37 5b46 	vsub.f64	d5, d7, d6
 80115b6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80115ba:	ed84 5b00 	vstr	d5, [r4]
 80115be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80115c2:	ed84 7b02 	vstr	d7, [r4, #8]
 80115c6:	2001      	movs	r0, #1
 80115c8:	b008      	add	sp, #32
 80115ca:	bd70      	pop	{r4, r5, r6, pc}
 80115cc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80117a0 <__ieee754_rem_pio2+0x238>
 80115d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80115d4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80117a8 <__ieee754_rem_pio2+0x240>
 80115d8:	e7eb      	b.n	80115b2 <__ieee754_rem_pio2+0x4a>
 80115da:	429e      	cmp	r6, r3
 80115dc:	ee30 7b06 	vadd.f64	d7, d0, d6
 80115e0:	d00e      	beq.n	8011600 <__ieee754_rem_pio2+0x98>
 80115e2:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8011798 <__ieee754_rem_pio2+0x230>
 80115e6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80115ea:	ee37 7b45 	vsub.f64	d7, d7, d5
 80115ee:	ed84 5b00 	vstr	d5, [r4]
 80115f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80115f6:	f04f 30ff 	mov.w	r0, #4294967295
 80115fa:	ed84 7b02 	vstr	d7, [r4, #8]
 80115fe:	e7e3      	b.n	80115c8 <__ieee754_rem_pio2+0x60>
 8011600:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80117a0 <__ieee754_rem_pio2+0x238>
 8011604:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011608:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80117a8 <__ieee754_rem_pio2+0x240>
 801160c:	e7eb      	b.n	80115e6 <__ieee754_rem_pio2+0x7e>
 801160e:	4b72      	ldr	r3, [pc, #456]	; (80117d8 <__ieee754_rem_pio2+0x270>)
 8011610:	429e      	cmp	r6, r3
 8011612:	dc6e      	bgt.n	80116f2 <__ieee754_rem_pio2+0x18a>
 8011614:	f000 fc2c 	bl	8011e70 <fabs>
 8011618:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801161c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80117b0 <__ieee754_rem_pio2+0x248>
 8011620:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011624:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011628:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801162c:	ee17 0a90 	vmov	r0, s15
 8011630:	eeb1 4b45 	vneg.f64	d4, d5
 8011634:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8011790 <__ieee754_rem_pio2+0x228>
 8011638:	eea5 0b47 	vfms.f64	d0, d5, d7
 801163c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8011798 <__ieee754_rem_pio2+0x230>
 8011640:	281f      	cmp	r0, #31
 8011642:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011646:	ee30 6b47 	vsub.f64	d6, d0, d7
 801164a:	dc08      	bgt.n	801165e <__ieee754_rem_pio2+0xf6>
 801164c:	4b63      	ldr	r3, [pc, #396]	; (80117dc <__ieee754_rem_pio2+0x274>)
 801164e:	1e42      	subs	r2, r0, #1
 8011650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011654:	42b3      	cmp	r3, r6
 8011656:	d002      	beq.n	801165e <__ieee754_rem_pio2+0xf6>
 8011658:	ed84 6b00 	vstr	d6, [r4]
 801165c:	e024      	b.n	80116a8 <__ieee754_rem_pio2+0x140>
 801165e:	ee16 3a90 	vmov	r3, s13
 8011662:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011666:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801166a:	2b10      	cmp	r3, #16
 801166c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011670:	ddf2      	ble.n	8011658 <__ieee754_rem_pio2+0xf0>
 8011672:	eeb0 6b40 	vmov.f64	d6, d0
 8011676:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80117a0 <__ieee754_rem_pio2+0x238>
 801167a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801167e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011682:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011686:	ed9f 3b48 	vldr	d3, [pc, #288]	; 80117a8 <__ieee754_rem_pio2+0x240>
 801168a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801168e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8011692:	ee13 3a90 	vmov	r3, s7
 8011696:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801169a:	1ad3      	subs	r3, r2, r3
 801169c:	2b31      	cmp	r3, #49	; 0x31
 801169e:	dc17      	bgt.n	80116d0 <__ieee754_rem_pio2+0x168>
 80116a0:	eeb0 0b46 	vmov.f64	d0, d6
 80116a4:	ed84 3b00 	vstr	d3, [r4]
 80116a8:	ed94 6b00 	vldr	d6, [r4]
 80116ac:	2d00      	cmp	r5, #0
 80116ae:	ee30 0b46 	vsub.f64	d0, d0, d6
 80116b2:	ee30 7b47 	vsub.f64	d7, d0, d7
 80116b6:	ed84 7b02 	vstr	d7, [r4, #8]
 80116ba:	da85      	bge.n	80115c8 <__ieee754_rem_pio2+0x60>
 80116bc:	eeb1 6b46 	vneg.f64	d6, d6
 80116c0:	ed84 6b00 	vstr	d6, [r4]
 80116c4:	eeb1 7b47 	vneg.f64	d7, d7
 80116c8:	4240      	negs	r0, r0
 80116ca:	ed84 7b02 	vstr	d7, [r4, #8]
 80116ce:	e77b      	b.n	80115c8 <__ieee754_rem_pio2+0x60>
 80116d0:	ed9f 3b39 	vldr	d3, [pc, #228]	; 80117b8 <__ieee754_rem_pio2+0x250>
 80116d4:	eeb0 0b46 	vmov.f64	d0, d6
 80116d8:	eea4 0b03 	vfma.f64	d0, d4, d3
 80116dc:	ee36 7b40 	vsub.f64	d7, d6, d0
 80116e0:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80117c0 <__ieee754_rem_pio2+0x258>
 80116e4:	eea4 7b03 	vfma.f64	d7, d4, d3
 80116e8:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80116ec:	ee30 6b47 	vsub.f64	d6, d0, d7
 80116f0:	e7b2      	b.n	8011658 <__ieee754_rem_pio2+0xf0>
 80116f2:	4b3b      	ldr	r3, [pc, #236]	; (80117e0 <__ieee754_rem_pio2+0x278>)
 80116f4:	429e      	cmp	r6, r3
 80116f6:	dd06      	ble.n	8011706 <__ieee754_rem_pio2+0x19e>
 80116f8:	ee30 7b40 	vsub.f64	d7, d0, d0
 80116fc:	ed80 7b02 	vstr	d7, [r0, #8]
 8011700:	ed80 7b00 	vstr	d7, [r0]
 8011704:	e742      	b.n	801158c <__ieee754_rem_pio2+0x24>
 8011706:	1532      	asrs	r2, r6, #20
 8011708:	ee10 0a10 	vmov	r0, s0
 801170c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8011710:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8011714:	ec41 0b17 	vmov	d7, r0, r1
 8011718:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801171c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80117c8 <__ieee754_rem_pio2+0x260>
 8011720:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011724:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011728:	ed8d 6b02 	vstr	d6, [sp, #8]
 801172c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011730:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011734:	a902      	add	r1, sp, #8
 8011736:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801173a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801173e:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011742:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011746:	ed8d 7b06 	vstr	d7, [sp, #24]
 801174a:	2603      	movs	r6, #3
 801174c:	4608      	mov	r0, r1
 801174e:	ed91 7b04 	vldr	d7, [r1, #16]
 8011752:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801175a:	4633      	mov	r3, r6
 801175c:	f1a1 0108 	sub.w	r1, r1, #8
 8011760:	f106 36ff 	add.w	r6, r6, #4294967295
 8011764:	d0f3      	beq.n	801174e <__ieee754_rem_pio2+0x1e6>
 8011766:	491f      	ldr	r1, [pc, #124]	; (80117e4 <__ieee754_rem_pio2+0x27c>)
 8011768:	9101      	str	r1, [sp, #4]
 801176a:	2102      	movs	r1, #2
 801176c:	9100      	str	r1, [sp, #0]
 801176e:	4621      	mov	r1, r4
 8011770:	f000 f8a6 	bl	80118c0 <__kernel_rem_pio2>
 8011774:	2d00      	cmp	r5, #0
 8011776:	f6bf af27 	bge.w	80115c8 <__ieee754_rem_pio2+0x60>
 801177a:	ed94 7b00 	vldr	d7, [r4]
 801177e:	eeb1 7b47 	vneg.f64	d7, d7
 8011782:	ed84 7b00 	vstr	d7, [r4]
 8011786:	ed94 7b02 	vldr	d7, [r4, #8]
 801178a:	e79b      	b.n	80116c4 <__ieee754_rem_pio2+0x15c>
 801178c:	f3af 8000 	nop.w
 8011790:	54400000 	.word	0x54400000
 8011794:	3ff921fb 	.word	0x3ff921fb
 8011798:	1a626331 	.word	0x1a626331
 801179c:	3dd0b461 	.word	0x3dd0b461
 80117a0:	1a600000 	.word	0x1a600000
 80117a4:	3dd0b461 	.word	0x3dd0b461
 80117a8:	2e037073 	.word	0x2e037073
 80117ac:	3ba3198a 	.word	0x3ba3198a
 80117b0:	6dc9c883 	.word	0x6dc9c883
 80117b4:	3fe45f30 	.word	0x3fe45f30
 80117b8:	2e000000 	.word	0x2e000000
 80117bc:	3ba3198a 	.word	0x3ba3198a
 80117c0:	252049c1 	.word	0x252049c1
 80117c4:	397b839a 	.word	0x397b839a
 80117c8:	00000000 	.word	0x00000000
 80117cc:	41700000 	.word	0x41700000
 80117d0:	3fe921fb 	.word	0x3fe921fb
 80117d4:	4002d97b 	.word	0x4002d97b
 80117d8:	413921fb 	.word	0x413921fb
 80117dc:	0801c640 	.word	0x0801c640
 80117e0:	7fefffff 	.word	0x7fefffff
 80117e4:	0801c6c0 	.word	0x0801c6c0

080117e8 <__kernel_cos>:
 80117e8:	ee10 1a90 	vmov	r1, s1
 80117ec:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80117f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80117f4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80117f8:	da05      	bge.n	8011806 <__kernel_cos+0x1e>
 80117fa:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80117fe:	ee17 3a90 	vmov	r3, s15
 8011802:	2b00      	cmp	r3, #0
 8011804:	d03d      	beq.n	8011882 <__kernel_cos+0x9a>
 8011806:	ee20 3b00 	vmul.f64	d3, d0, d0
 801180a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011888 <__kernel_cos+0xa0>
 801180e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011890 <__kernel_cos+0xa8>
 8011812:	eea3 6b07 	vfma.f64	d6, d3, d7
 8011816:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011898 <__kernel_cos+0xb0>
 801181a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801181e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80118a0 <__kernel_cos+0xb8>
 8011822:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011826:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80118a8 <__kernel_cos+0xc0>
 801182a:	4b23      	ldr	r3, [pc, #140]	; (80118b8 <__kernel_cos+0xd0>)
 801182c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011830:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80118b0 <__kernel_cos+0xc8>
 8011834:	4299      	cmp	r1, r3
 8011836:	eea7 6b03 	vfma.f64	d6, d7, d3
 801183a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801183e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8011842:	ee23 7b07 	vmul.f64	d7, d3, d7
 8011846:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801184a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801184e:	dc04      	bgt.n	801185a <__kernel_cos+0x72>
 8011850:	ee37 6b46 	vsub.f64	d6, d7, d6
 8011854:	ee34 0b46 	vsub.f64	d0, d4, d6
 8011858:	4770      	bx	lr
 801185a:	4b18      	ldr	r3, [pc, #96]	; (80118bc <__kernel_cos+0xd4>)
 801185c:	4299      	cmp	r1, r3
 801185e:	dc0d      	bgt.n	801187c <__kernel_cos+0x94>
 8011860:	2200      	movs	r2, #0
 8011862:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8011866:	ec43 2b15 	vmov	d5, r2, r3
 801186a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801186e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011872:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011876:	ee30 0b47 	vsub.f64	d0, d0, d7
 801187a:	4770      	bx	lr
 801187c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011880:	e7f3      	b.n	801186a <__kernel_cos+0x82>
 8011882:	eeb0 0b44 	vmov.f64	d0, d4
 8011886:	4770      	bx	lr
 8011888:	be8838d4 	.word	0xbe8838d4
 801188c:	bda8fae9 	.word	0xbda8fae9
 8011890:	bdb4b1c4 	.word	0xbdb4b1c4
 8011894:	3e21ee9e 	.word	0x3e21ee9e
 8011898:	809c52ad 	.word	0x809c52ad
 801189c:	be927e4f 	.word	0xbe927e4f
 80118a0:	19cb1590 	.word	0x19cb1590
 80118a4:	3efa01a0 	.word	0x3efa01a0
 80118a8:	16c15177 	.word	0x16c15177
 80118ac:	bf56c16c 	.word	0xbf56c16c
 80118b0:	5555554c 	.word	0x5555554c
 80118b4:	3fa55555 	.word	0x3fa55555
 80118b8:	3fd33332 	.word	0x3fd33332
 80118bc:	3fe90000 	.word	0x3fe90000

080118c0 <__kernel_rem_pio2>:
 80118c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118c4:	ed2d 8b06 	vpush	{d8-d10}
 80118c8:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80118cc:	469b      	mov	fp, r3
 80118ce:	460f      	mov	r7, r1
 80118d0:	4bcf      	ldr	r3, [pc, #828]	; (8011c10 <__kernel_rem_pio2+0x350>)
 80118d2:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80118d4:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 80118d8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80118dc:	9000      	str	r0, [sp, #0]
 80118de:	f112 0f14 	cmn.w	r2, #20
 80118e2:	bfa8      	it	ge
 80118e4:	2318      	movge	r3, #24
 80118e6:	f10b 31ff 	add.w	r1, fp, #4294967295
 80118ea:	bfb8      	it	lt
 80118ec:	2300      	movlt	r3, #0
 80118ee:	f06f 0417 	mvn.w	r4, #23
 80118f2:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8011bf8 <__kernel_rem_pio2+0x338>
 80118f6:	bfa4      	itt	ge
 80118f8:	f1a2 0a03 	subge.w	sl, r2, #3
 80118fc:	fb9a f3f3 	sdivge	r3, sl, r3
 8011900:	fb03 4404 	mla	r4, r3, r4, r4
 8011904:	1a5d      	subs	r5, r3, r1
 8011906:	4414      	add	r4, r2
 8011908:	eb09 0601 	add.w	r6, r9, r1
 801190c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8011910:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8011914:	2200      	movs	r2, #0
 8011916:	42b2      	cmp	r2, r6
 8011918:	dd12      	ble.n	8011940 <__kernel_rem_pio2+0x80>
 801191a:	aa18      	add	r2, sp, #96	; 0x60
 801191c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8011920:	460e      	mov	r6, r1
 8011922:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8011926:	f1cb 0a01 	rsb	sl, fp, #1
 801192a:	eb0a 0006 	add.w	r0, sl, r6
 801192e:	4581      	cmp	r9, r0
 8011930:	db25      	blt.n	801197e <__kernel_rem_pio2+0xbe>
 8011932:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8011bf8 <__kernel_rem_pio2+0x338>
 8011936:	f8dd e000 	ldr.w	lr, [sp]
 801193a:	4615      	mov	r5, r2
 801193c:	2000      	movs	r0, #0
 801193e:	e015      	b.n	801196c <__kernel_rem_pio2+0xac>
 8011940:	42d5      	cmn	r5, r2
 8011942:	d409      	bmi.n	8011958 <__kernel_rem_pio2+0x98>
 8011944:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8011948:	ee07 0a90 	vmov	s15, r0
 801194c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011950:	eca8 7b02 	vstmia	r8!, {d7}
 8011954:	3201      	adds	r2, #1
 8011956:	e7de      	b.n	8011916 <__kernel_rem_pio2+0x56>
 8011958:	eeb0 7b46 	vmov.f64	d7, d6
 801195c:	e7f8      	b.n	8011950 <__kernel_rem_pio2+0x90>
 801195e:	ecbe 5b02 	vldmia	lr!, {d5}
 8011962:	ed95 6b00 	vldr	d6, [r5]
 8011966:	3001      	adds	r0, #1
 8011968:	eea5 7b06 	vfma.f64	d7, d5, d6
 801196c:	4288      	cmp	r0, r1
 801196e:	f1a5 0508 	sub.w	r5, r5, #8
 8011972:	ddf4      	ble.n	801195e <__kernel_rem_pio2+0x9e>
 8011974:	eca8 7b02 	vstmia	r8!, {d7}
 8011978:	3208      	adds	r2, #8
 801197a:	3601      	adds	r6, #1
 801197c:	e7d5      	b.n	801192a <__kernel_rem_pio2+0x6a>
 801197e:	aa04      	add	r2, sp, #16
 8011980:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8011c00 <__kernel_rem_pio2+0x340>
 8011984:	ed9f aba0 	vldr	d10, [pc, #640]	; 8011c08 <__kernel_rem_pio2+0x348>
 8011988:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801198c:	9201      	str	r2, [sp, #4]
 801198e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8011992:	464e      	mov	r6, r9
 8011994:	ab90      	add	r3, sp, #576	; 0x240
 8011996:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801199a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 801199e:	ab04      	add	r3, sp, #16
 80119a0:	4618      	mov	r0, r3
 80119a2:	4632      	mov	r2, r6
 80119a4:	2a00      	cmp	r2, #0
 80119a6:	dc4e      	bgt.n	8011a46 <__kernel_rem_pio2+0x186>
 80119a8:	4620      	mov	r0, r4
 80119aa:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80119ae:	f000 fae7 	bl	8011f80 <scalbn>
 80119b2:	eeb0 8b40 	vmov.f64	d8, d0
 80119b6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80119ba:	ee28 0b00 	vmul.f64	d0, d8, d0
 80119be:	f000 fa63 	bl	8011e88 <floor>
 80119c2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80119c6:	eea0 8b47 	vfms.f64	d8, d0, d7
 80119ca:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80119ce:	2c00      	cmp	r4, #0
 80119d0:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80119d4:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80119d8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80119dc:	ee17 8a90 	vmov	r8, s15
 80119e0:	dd46      	ble.n	8011a70 <__kernel_rem_pio2+0x1b0>
 80119e2:	1e70      	subs	r0, r6, #1
 80119e4:	aa04      	add	r2, sp, #16
 80119e6:	f1c4 0c18 	rsb	ip, r4, #24
 80119ea:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 80119ee:	fa45 f20c 	asr.w	r2, r5, ip
 80119f2:	4490      	add	r8, r2
 80119f4:	fa02 f20c 	lsl.w	r2, r2, ip
 80119f8:	1aad      	subs	r5, r5, r2
 80119fa:	aa04      	add	r2, sp, #16
 80119fc:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8011a00:	f1c4 0217 	rsb	r2, r4, #23
 8011a04:	4115      	asrs	r5, r2
 8011a06:	2d00      	cmp	r5, #0
 8011a08:	dd41      	ble.n	8011a8e <__kernel_rem_pio2+0x1ce>
 8011a0a:	f04f 0c00 	mov.w	ip, #0
 8011a0e:	f108 0801 	add.w	r8, r8, #1
 8011a12:	4660      	mov	r0, ip
 8011a14:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8011a18:	4566      	cmp	r6, ip
 8011a1a:	dc69      	bgt.n	8011af0 <__kernel_rem_pio2+0x230>
 8011a1c:	2c00      	cmp	r4, #0
 8011a1e:	dd03      	ble.n	8011a28 <__kernel_rem_pio2+0x168>
 8011a20:	2c01      	cmp	r4, #1
 8011a22:	d076      	beq.n	8011b12 <__kernel_rem_pio2+0x252>
 8011a24:	2c02      	cmp	r4, #2
 8011a26:	d07f      	beq.n	8011b28 <__kernel_rem_pio2+0x268>
 8011a28:	2d02      	cmp	r5, #2
 8011a2a:	d130      	bne.n	8011a8e <__kernel_rem_pio2+0x1ce>
 8011a2c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011a30:	ee30 8b48 	vsub.f64	d8, d0, d8
 8011a34:	b358      	cbz	r0, 8011a8e <__kernel_rem_pio2+0x1ce>
 8011a36:	4620      	mov	r0, r4
 8011a38:	9102      	str	r1, [sp, #8]
 8011a3a:	f000 faa1 	bl	8011f80 <scalbn>
 8011a3e:	9902      	ldr	r1, [sp, #8]
 8011a40:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011a44:	e023      	b.n	8011a8e <__kernel_rem_pio2+0x1ce>
 8011a46:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011a4a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011a4e:	3a01      	subs	r2, #1
 8011a50:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011a54:	ad68      	add	r5, sp, #416	; 0x1a0
 8011a56:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011a5a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011a5e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8011a62:	eca0 0a01 	vstmia	r0!, {s0}
 8011a66:	ed95 0b00 	vldr	d0, [r5]
 8011a6a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011a6e:	e799      	b.n	80119a4 <__kernel_rem_pio2+0xe4>
 8011a70:	d105      	bne.n	8011a7e <__kernel_rem_pio2+0x1be>
 8011a72:	1e72      	subs	r2, r6, #1
 8011a74:	a804      	add	r0, sp, #16
 8011a76:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8011a7a:	15ed      	asrs	r5, r5, #23
 8011a7c:	e7c3      	b.n	8011a06 <__kernel_rem_pio2+0x146>
 8011a7e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011a82:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a8a:	da2f      	bge.n	8011aec <__kernel_rem_pio2+0x22c>
 8011a8c:	2500      	movs	r5, #0
 8011a8e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a96:	f040 8087 	bne.w	8011ba8 <__kernel_rem_pio2+0x2e8>
 8011a9a:	1e73      	subs	r3, r6, #1
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f04f 0c00 	mov.w	ip, #0
 8011aa2:	4548      	cmp	r0, r9
 8011aa4:	da47      	bge.n	8011b36 <__kernel_rem_pio2+0x276>
 8011aa6:	f1bc 0f00 	cmp.w	ip, #0
 8011aaa:	d070      	beq.n	8011b8e <__kernel_rem_pio2+0x2ce>
 8011aac:	aa04      	add	r2, sp, #16
 8011aae:	3c18      	subs	r4, #24
 8011ab0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011ab4:	2a00      	cmp	r2, #0
 8011ab6:	d075      	beq.n	8011ba4 <__kernel_rem_pio2+0x2e4>
 8011ab8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011abc:	4620      	mov	r0, r4
 8011abe:	9300      	str	r3, [sp, #0]
 8011ac0:	f000 fa5e 	bl	8011f80 <scalbn>
 8011ac4:	9b00      	ldr	r3, [sp, #0]
 8011ac6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011c00 <__kernel_rem_pio2+0x340>
 8011aca:	461a      	mov	r2, r3
 8011acc:	2a00      	cmp	r2, #0
 8011ace:	f280 80ac 	bge.w	8011c2a <__kernel_rem_pio2+0x36a>
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	2000      	movs	r0, #0
 8011ad6:	2900      	cmp	r1, #0
 8011ad8:	f2c0 80cd 	blt.w	8011c76 <__kernel_rem_pio2+0x3b6>
 8011adc:	aa68      	add	r2, sp, #416	; 0x1a0
 8011ade:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8011ae2:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8011bf8 <__kernel_rem_pio2+0x338>
 8011ae6:	4e4b      	ldr	r6, [pc, #300]	; (8011c14 <__kernel_rem_pio2+0x354>)
 8011ae8:	2200      	movs	r2, #0
 8011aea:	e0b8      	b.n	8011c5e <__kernel_rem_pio2+0x39e>
 8011aec:	2502      	movs	r5, #2
 8011aee:	e78c      	b.n	8011a0a <__kernel_rem_pio2+0x14a>
 8011af0:	681a      	ldr	r2, [r3, #0]
 8011af2:	b948      	cbnz	r0, 8011b08 <__kernel_rem_pio2+0x248>
 8011af4:	b11a      	cbz	r2, 8011afe <__kernel_rem_pio2+0x23e>
 8011af6:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8011afa:	601a      	str	r2, [r3, #0]
 8011afc:	2201      	movs	r2, #1
 8011afe:	f10c 0c01 	add.w	ip, ip, #1
 8011b02:	3304      	adds	r3, #4
 8011b04:	4610      	mov	r0, r2
 8011b06:	e787      	b.n	8011a18 <__kernel_rem_pio2+0x158>
 8011b08:	ebae 0202 	sub.w	r2, lr, r2
 8011b0c:	601a      	str	r2, [r3, #0]
 8011b0e:	4602      	mov	r2, r0
 8011b10:	e7f5      	b.n	8011afe <__kernel_rem_pio2+0x23e>
 8011b12:	1e72      	subs	r2, r6, #1
 8011b14:	ab04      	add	r3, sp, #16
 8011b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b1a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011b1e:	f10d 0c10 	add.w	ip, sp, #16
 8011b22:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8011b26:	e77f      	b.n	8011a28 <__kernel_rem_pio2+0x168>
 8011b28:	1e72      	subs	r2, r6, #1
 8011b2a:	ab04      	add	r3, sp, #16
 8011b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b30:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011b34:	e7f3      	b.n	8011b1e <__kernel_rem_pio2+0x25e>
 8011b36:	aa04      	add	r2, sp, #16
 8011b38:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8011b3c:	3801      	subs	r0, #1
 8011b3e:	ea4c 0c02 	orr.w	ip, ip, r2
 8011b42:	e7ae      	b.n	8011aa2 <__kernel_rem_pio2+0x1e2>
 8011b44:	3001      	adds	r0, #1
 8011b46:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011b4a:	2a00      	cmp	r2, #0
 8011b4c:	d0fa      	beq.n	8011b44 <__kernel_rem_pio2+0x284>
 8011b4e:	eb06 020b 	add.w	r2, r6, fp
 8011b52:	ad18      	add	r5, sp, #96	; 0x60
 8011b54:	1c73      	adds	r3, r6, #1
 8011b56:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8011b5a:	4406      	add	r6, r0
 8011b5c:	429e      	cmp	r6, r3
 8011b5e:	f6ff af19 	blt.w	8011994 <__kernel_rem_pio2+0xd4>
 8011b62:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8011b66:	9d00      	ldr	r5, [sp, #0]
 8011b68:	ee07 0a90 	vmov	s15, r0
 8011b6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011b70:	2000      	movs	r0, #0
 8011b72:	eca2 7b02 	vstmia	r2!, {d7}
 8011b76:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011bf8 <__kernel_rem_pio2+0x338>
 8011b7a:	4694      	mov	ip, r2
 8011b7c:	4288      	cmp	r0, r1
 8011b7e:	dd09      	ble.n	8011b94 <__kernel_rem_pio2+0x2d4>
 8011b80:	a868      	add	r0, sp, #416	; 0x1a0
 8011b82:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8011b86:	ed80 7b00 	vstr	d7, [r0]
 8011b8a:	3301      	adds	r3, #1
 8011b8c:	e7e6      	b.n	8011b5c <__kernel_rem_pio2+0x29c>
 8011b8e:	9b01      	ldr	r3, [sp, #4]
 8011b90:	2001      	movs	r0, #1
 8011b92:	e7d8      	b.n	8011b46 <__kernel_rem_pio2+0x286>
 8011b94:	ecb5 5b02 	vldmia	r5!, {d5}
 8011b98:	ed3c 6b02 	vldmdb	ip!, {d6}
 8011b9c:	3001      	adds	r0, #1
 8011b9e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011ba2:	e7eb      	b.n	8011b7c <__kernel_rem_pio2+0x2bc>
 8011ba4:	3b01      	subs	r3, #1
 8011ba6:	e781      	b.n	8011aac <__kernel_rem_pio2+0x1ec>
 8011ba8:	4260      	negs	r0, r4
 8011baa:	eeb0 0b48 	vmov.f64	d0, d8
 8011bae:	f000 f9e7 	bl	8011f80 <scalbn>
 8011bb2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8011c08 <__kernel_rem_pio2+0x348>
 8011bb6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8011bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bbe:	db2b      	blt.n	8011c18 <__kernel_rem_pio2+0x358>
 8011bc0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8011c00 <__kernel_rem_pio2+0x340>
 8011bc4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011bc8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011bcc:	aa04      	add	r2, sp, #16
 8011bce:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8011bd2:	eea5 0b46 	vfms.f64	d0, d5, d6
 8011bd6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011bda:	a904      	add	r1, sp, #16
 8011bdc:	ee10 3a10 	vmov	r3, s0
 8011be0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8011be4:	ee17 2a10 	vmov	r2, s14
 8011be8:	1c73      	adds	r3, r6, #1
 8011bea:	3418      	adds	r4, #24
 8011bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011bf0:	e762      	b.n	8011ab8 <__kernel_rem_pio2+0x1f8>
 8011bf2:	bf00      	nop
 8011bf4:	f3af 8000 	nop.w
	...
 8011c04:	3e700000 	.word	0x3e700000
 8011c08:	00000000 	.word	0x00000000
 8011c0c:	41700000 	.word	0x41700000
 8011c10:	0801c808 	.word	0x0801c808
 8011c14:	0801c7c8 	.word	0x0801c7c8
 8011c18:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011c1c:	aa04      	add	r2, sp, #16
 8011c1e:	ee10 3a10 	vmov	r3, s0
 8011c22:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8011c26:	4633      	mov	r3, r6
 8011c28:	e746      	b.n	8011ab8 <__kernel_rem_pio2+0x1f8>
 8011c2a:	a804      	add	r0, sp, #16
 8011c2c:	a968      	add	r1, sp, #416	; 0x1a0
 8011c2e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8011c32:	9000      	str	r0, [sp, #0]
 8011c34:	ee07 0a90 	vmov	s15, r0
 8011c38:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011c3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011c40:	3a01      	subs	r2, #1
 8011c42:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011c46:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011c4a:	ed81 7b00 	vstr	d7, [r1]
 8011c4e:	e73d      	b.n	8011acc <__kernel_rem_pio2+0x20c>
 8011c50:	ecb6 5b02 	vldmia	r6!, {d5}
 8011c54:	ecb4 6b02 	vldmia	r4!, {d6}
 8011c58:	3201      	adds	r2, #1
 8011c5a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011c5e:	454a      	cmp	r2, r9
 8011c60:	dc01      	bgt.n	8011c66 <__kernel_rem_pio2+0x3a6>
 8011c62:	4290      	cmp	r0, r2
 8011c64:	daf4      	bge.n	8011c50 <__kernel_rem_pio2+0x390>
 8011c66:	aa40      	add	r2, sp, #256	; 0x100
 8011c68:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011c6c:	ed82 7b00 	vstr	d7, [r2]
 8011c70:	3901      	subs	r1, #1
 8011c72:	3001      	adds	r0, #1
 8011c74:	e72f      	b.n	8011ad6 <__kernel_rem_pio2+0x216>
 8011c76:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8011c78:	2a02      	cmp	r2, #2
 8011c7a:	dc0a      	bgt.n	8011c92 <__kernel_rem_pio2+0x3d2>
 8011c7c:	2a00      	cmp	r2, #0
 8011c7e:	dc5a      	bgt.n	8011d36 <__kernel_rem_pio2+0x476>
 8011c80:	d039      	beq.n	8011cf6 <__kernel_rem_pio2+0x436>
 8011c82:	f008 0007 	and.w	r0, r8, #7
 8011c86:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8011c8a:	ecbd 8b06 	vpop	{d8-d10}
 8011c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c92:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8011c94:	2a03      	cmp	r2, #3
 8011c96:	d1f4      	bne.n	8011c82 <__kernel_rem_pio2+0x3c2>
 8011c98:	aa40      	add	r2, sp, #256	; 0x100
 8011c9a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011c9e:	4611      	mov	r1, r2
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	2800      	cmp	r0, #0
 8011ca4:	f1a1 0108 	sub.w	r1, r1, #8
 8011ca8:	dc52      	bgt.n	8011d50 <__kernel_rem_pio2+0x490>
 8011caa:	4619      	mov	r1, r3
 8011cac:	2901      	cmp	r1, #1
 8011cae:	f1a2 0208 	sub.w	r2, r2, #8
 8011cb2:	dc5d      	bgt.n	8011d70 <__kernel_rem_pio2+0x4b0>
 8011cb4:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8011db8 <__kernel_rem_pio2+0x4f8>
 8011cb8:	2b01      	cmp	r3, #1
 8011cba:	dc69      	bgt.n	8011d90 <__kernel_rem_pio2+0x4d0>
 8011cbc:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8011cc0:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8011cc4:	2d00      	cmp	r5, #0
 8011cc6:	d16c      	bne.n	8011da2 <__kernel_rem_pio2+0x4e2>
 8011cc8:	ed87 5b00 	vstr	d5, [r7]
 8011ccc:	ed87 6b02 	vstr	d6, [r7, #8]
 8011cd0:	ed87 7b04 	vstr	d7, [r7, #16]
 8011cd4:	e7d5      	b.n	8011c82 <__kernel_rem_pio2+0x3c2>
 8011cd6:	aa40      	add	r2, sp, #256	; 0x100
 8011cd8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011cdc:	ed92 6b00 	vldr	d6, [r2]
 8011ce0:	3b01      	subs	r3, #1
 8011ce2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	daf5      	bge.n	8011cd6 <__kernel_rem_pio2+0x416>
 8011cea:	b10d      	cbz	r5, 8011cf0 <__kernel_rem_pio2+0x430>
 8011cec:	eeb1 7b47 	vneg.f64	d7, d7
 8011cf0:	ed87 7b00 	vstr	d7, [r7]
 8011cf4:	e7c5      	b.n	8011c82 <__kernel_rem_pio2+0x3c2>
 8011cf6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011db8 <__kernel_rem_pio2+0x4f8>
 8011cfa:	e7f4      	b.n	8011ce6 <__kernel_rem_pio2+0x426>
 8011cfc:	a940      	add	r1, sp, #256	; 0x100
 8011cfe:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011d02:	ed91 7b00 	vldr	d7, [r1]
 8011d06:	3a01      	subs	r2, #1
 8011d08:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011d0c:	2a00      	cmp	r2, #0
 8011d0e:	daf5      	bge.n	8011cfc <__kernel_rem_pio2+0x43c>
 8011d10:	b1ad      	cbz	r5, 8011d3e <__kernel_rem_pio2+0x47e>
 8011d12:	eeb1 7b46 	vneg.f64	d7, d6
 8011d16:	ed87 7b00 	vstr	d7, [r7]
 8011d1a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8011d1e:	a942      	add	r1, sp, #264	; 0x108
 8011d20:	2201      	movs	r2, #1
 8011d22:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011d26:	4293      	cmp	r3, r2
 8011d28:	da0c      	bge.n	8011d44 <__kernel_rem_pio2+0x484>
 8011d2a:	b10d      	cbz	r5, 8011d30 <__kernel_rem_pio2+0x470>
 8011d2c:	eeb1 7b47 	vneg.f64	d7, d7
 8011d30:	ed87 7b02 	vstr	d7, [r7, #8]
 8011d34:	e7a5      	b.n	8011c82 <__kernel_rem_pio2+0x3c2>
 8011d36:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011db8 <__kernel_rem_pio2+0x4f8>
 8011d3a:	461a      	mov	r2, r3
 8011d3c:	e7e6      	b.n	8011d0c <__kernel_rem_pio2+0x44c>
 8011d3e:	eeb0 7b46 	vmov.f64	d7, d6
 8011d42:	e7e8      	b.n	8011d16 <__kernel_rem_pio2+0x456>
 8011d44:	ecb1 6b02 	vldmia	r1!, {d6}
 8011d48:	3201      	adds	r2, #1
 8011d4a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011d4e:	e7ea      	b.n	8011d26 <__kernel_rem_pio2+0x466>
 8011d50:	ed91 7b00 	vldr	d7, [r1]
 8011d54:	ed91 5b02 	vldr	d5, [r1, #8]
 8011d58:	3801      	subs	r0, #1
 8011d5a:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011d5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011d62:	ed81 6b00 	vstr	d6, [r1]
 8011d66:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011d6a:	ed81 7b02 	vstr	d7, [r1, #8]
 8011d6e:	e798      	b.n	8011ca2 <__kernel_rem_pio2+0x3e2>
 8011d70:	ed92 7b00 	vldr	d7, [r2]
 8011d74:	ed92 5b02 	vldr	d5, [r2, #8]
 8011d78:	3901      	subs	r1, #1
 8011d7a:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011d7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011d82:	ed82 6b00 	vstr	d6, [r2]
 8011d86:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011d8a:	ed82 7b02 	vstr	d7, [r2, #8]
 8011d8e:	e78d      	b.n	8011cac <__kernel_rem_pio2+0x3ec>
 8011d90:	aa40      	add	r2, sp, #256	; 0x100
 8011d92:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011d96:	ed92 6b00 	vldr	d6, [r2]
 8011d9a:	3b01      	subs	r3, #1
 8011d9c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011da0:	e78a      	b.n	8011cb8 <__kernel_rem_pio2+0x3f8>
 8011da2:	eeb1 5b45 	vneg.f64	d5, d5
 8011da6:	eeb1 6b46 	vneg.f64	d6, d6
 8011daa:	ed87 5b00 	vstr	d5, [r7]
 8011dae:	eeb1 7b47 	vneg.f64	d7, d7
 8011db2:	ed87 6b02 	vstr	d6, [r7, #8]
 8011db6:	e78b      	b.n	8011cd0 <__kernel_rem_pio2+0x410>
	...

08011dc0 <__kernel_sin>:
 8011dc0:	ee10 3a90 	vmov	r3, s1
 8011dc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011dc8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011dcc:	da04      	bge.n	8011dd8 <__kernel_sin+0x18>
 8011dce:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011dd2:	ee17 3a90 	vmov	r3, s15
 8011dd6:	b35b      	cbz	r3, 8011e30 <__kernel_sin+0x70>
 8011dd8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011ddc:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011de0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011e38 <__kernel_sin+0x78>
 8011de4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011e40 <__kernel_sin+0x80>
 8011de8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011dec:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011e48 <__kernel_sin+0x88>
 8011df0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011df4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011e50 <__kernel_sin+0x90>
 8011df8:	eea7 4b06 	vfma.f64	d4, d7, d6
 8011dfc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011e58 <__kernel_sin+0x98>
 8011e00:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011e04:	b930      	cbnz	r0, 8011e14 <__kernel_sin+0x54>
 8011e06:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011e60 <__kernel_sin+0xa0>
 8011e0a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011e0e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011e12:	4770      	bx	lr
 8011e14:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011e18:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011e1c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011e20:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011e24:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011e68 <__kernel_sin+0xa8>
 8011e28:	eea5 1b07 	vfma.f64	d1, d5, d7
 8011e2c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011e30:	4770      	bx	lr
 8011e32:	bf00      	nop
 8011e34:	f3af 8000 	nop.w
 8011e38:	5acfd57c 	.word	0x5acfd57c
 8011e3c:	3de5d93a 	.word	0x3de5d93a
 8011e40:	8a2b9ceb 	.word	0x8a2b9ceb
 8011e44:	be5ae5e6 	.word	0xbe5ae5e6
 8011e48:	57b1fe7d 	.word	0x57b1fe7d
 8011e4c:	3ec71de3 	.word	0x3ec71de3
 8011e50:	19c161d5 	.word	0x19c161d5
 8011e54:	bf2a01a0 	.word	0xbf2a01a0
 8011e58:	1110f8a6 	.word	0x1110f8a6
 8011e5c:	3f811111 	.word	0x3f811111
 8011e60:	55555549 	.word	0x55555549
 8011e64:	bfc55555 	.word	0xbfc55555
 8011e68:	55555549 	.word	0x55555549
 8011e6c:	3fc55555 	.word	0x3fc55555

08011e70 <fabs>:
 8011e70:	ec51 0b10 	vmov	r0, r1, d0
 8011e74:	ee10 2a10 	vmov	r2, s0
 8011e78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011e7c:	ec43 2b10 	vmov	d0, r2, r3
 8011e80:	4770      	bx	lr
 8011e82:	0000      	movs	r0, r0
 8011e84:	0000      	movs	r0, r0
	...

08011e88 <floor>:
 8011e88:	ee10 1a90 	vmov	r1, s1
 8011e8c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011e90:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011e94:	2b13      	cmp	r3, #19
 8011e96:	b530      	push	{r4, r5, lr}
 8011e98:	ee10 0a10 	vmov	r0, s0
 8011e9c:	ee10 5a10 	vmov	r5, s0
 8011ea0:	dc31      	bgt.n	8011f06 <floor+0x7e>
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	da15      	bge.n	8011ed2 <floor+0x4a>
 8011ea6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011f60 <floor+0xd8>
 8011eaa:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011eae:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb6:	dd07      	ble.n	8011ec8 <floor+0x40>
 8011eb8:	2900      	cmp	r1, #0
 8011eba:	da4e      	bge.n	8011f5a <floor+0xd2>
 8011ebc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011ec0:	4318      	orrs	r0, r3
 8011ec2:	d001      	beq.n	8011ec8 <floor+0x40>
 8011ec4:	4928      	ldr	r1, [pc, #160]	; (8011f68 <floor+0xe0>)
 8011ec6:	2000      	movs	r0, #0
 8011ec8:	460b      	mov	r3, r1
 8011eca:	4602      	mov	r2, r0
 8011ecc:	ec43 2b10 	vmov	d0, r2, r3
 8011ed0:	e020      	b.n	8011f14 <floor+0x8c>
 8011ed2:	4a26      	ldr	r2, [pc, #152]	; (8011f6c <floor+0xe4>)
 8011ed4:	411a      	asrs	r2, r3
 8011ed6:	ea01 0402 	and.w	r4, r1, r2
 8011eda:	4304      	orrs	r4, r0
 8011edc:	d01a      	beq.n	8011f14 <floor+0x8c>
 8011ede:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011f60 <floor+0xd8>
 8011ee2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011ee6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eee:	ddeb      	ble.n	8011ec8 <floor+0x40>
 8011ef0:	2900      	cmp	r1, #0
 8011ef2:	bfbe      	ittt	lt
 8011ef4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011ef8:	fa40 f303 	asrlt.w	r3, r0, r3
 8011efc:	18c9      	addlt	r1, r1, r3
 8011efe:	ea21 0102 	bic.w	r1, r1, r2
 8011f02:	2000      	movs	r0, #0
 8011f04:	e7e0      	b.n	8011ec8 <floor+0x40>
 8011f06:	2b33      	cmp	r3, #51	; 0x33
 8011f08:	dd05      	ble.n	8011f16 <floor+0x8e>
 8011f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011f0e:	d101      	bne.n	8011f14 <floor+0x8c>
 8011f10:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011f14:	bd30      	pop	{r4, r5, pc}
 8011f16:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f1e:	40e2      	lsrs	r2, r4
 8011f20:	4202      	tst	r2, r0
 8011f22:	d0f7      	beq.n	8011f14 <floor+0x8c>
 8011f24:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011f60 <floor+0xd8>
 8011f28:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011f2c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f34:	ddc8      	ble.n	8011ec8 <floor+0x40>
 8011f36:	2900      	cmp	r1, #0
 8011f38:	da02      	bge.n	8011f40 <floor+0xb8>
 8011f3a:	2b14      	cmp	r3, #20
 8011f3c:	d103      	bne.n	8011f46 <floor+0xbe>
 8011f3e:	3101      	adds	r1, #1
 8011f40:	ea20 0002 	bic.w	r0, r0, r2
 8011f44:	e7c0      	b.n	8011ec8 <floor+0x40>
 8011f46:	2401      	movs	r4, #1
 8011f48:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011f4c:	fa04 f303 	lsl.w	r3, r4, r3
 8011f50:	4418      	add	r0, r3
 8011f52:	42a8      	cmp	r0, r5
 8011f54:	bf38      	it	cc
 8011f56:	1909      	addcc	r1, r1, r4
 8011f58:	e7f2      	b.n	8011f40 <floor+0xb8>
 8011f5a:	2000      	movs	r0, #0
 8011f5c:	4601      	mov	r1, r0
 8011f5e:	e7b3      	b.n	8011ec8 <floor+0x40>
 8011f60:	8800759c 	.word	0x8800759c
 8011f64:	7e37e43c 	.word	0x7e37e43c
 8011f68:	bff00000 	.word	0xbff00000
 8011f6c:	000fffff 	.word	0x000fffff

08011f70 <nan>:
 8011f70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011f78 <nan+0x8>
 8011f74:	4770      	bx	lr
 8011f76:	bf00      	nop
 8011f78:	00000000 	.word	0x00000000
 8011f7c:	7ff80000 	.word	0x7ff80000

08011f80 <scalbn>:
 8011f80:	b082      	sub	sp, #8
 8011f82:	ed8d 0b00 	vstr	d0, [sp]
 8011f86:	9b01      	ldr	r3, [sp, #4]
 8011f88:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011f8c:	b9a2      	cbnz	r2, 8011fb8 <scalbn+0x38>
 8011f8e:	9a00      	ldr	r2, [sp, #0]
 8011f90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011f94:	4313      	orrs	r3, r2
 8011f96:	d03a      	beq.n	801200e <scalbn+0x8e>
 8011f98:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8012070 <scalbn+0xf0>
 8011f9c:	4b40      	ldr	r3, [pc, #256]	; (80120a0 <scalbn+0x120>)
 8011f9e:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011fa2:	4298      	cmp	r0, r3
 8011fa4:	ed8d 7b00 	vstr	d7, [sp]
 8011fa8:	da11      	bge.n	8011fce <scalbn+0x4e>
 8011faa:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8012078 <scalbn+0xf8>
 8011fae:	ed9d 6b00 	vldr	d6, [sp]
 8011fb2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011fb6:	e007      	b.n	8011fc8 <scalbn+0x48>
 8011fb8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011fbc:	428a      	cmp	r2, r1
 8011fbe:	d10a      	bne.n	8011fd6 <scalbn+0x56>
 8011fc0:	ed9d 7b00 	vldr	d7, [sp]
 8011fc4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011fc8:	ed8d 7b00 	vstr	d7, [sp]
 8011fcc:	e01f      	b.n	801200e <scalbn+0x8e>
 8011fce:	9b01      	ldr	r3, [sp, #4]
 8011fd0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011fd4:	3a36      	subs	r2, #54	; 0x36
 8011fd6:	4402      	add	r2, r0
 8011fd8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011fdc:	428a      	cmp	r2, r1
 8011fde:	dd0a      	ble.n	8011ff6 <scalbn+0x76>
 8011fe0:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8012080 <scalbn+0x100>
 8011fe4:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8012088 <scalbn+0x108>
 8011fe8:	eeb0 6b47 	vmov.f64	d6, d7
 8011fec:	9b01      	ldr	r3, [sp, #4]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011ff4:	e7dd      	b.n	8011fb2 <scalbn+0x32>
 8011ff6:	2a00      	cmp	r2, #0
 8011ff8:	dd0d      	ble.n	8012016 <scalbn+0x96>
 8011ffa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ffe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012002:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012006:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801200a:	e9cd 0100 	strd	r0, r1, [sp]
 801200e:	ed9d 0b00 	vldr	d0, [sp]
 8012012:	b002      	add	sp, #8
 8012014:	4770      	bx	lr
 8012016:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801201a:	da18      	bge.n	801204e <scalbn+0xce>
 801201c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012020:	4298      	cmp	r0, r3
 8012022:	9b01      	ldr	r3, [sp, #4]
 8012024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012028:	dd09      	ble.n	801203e <scalbn+0xbe>
 801202a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8012080 <scalbn+0x100>
 801202e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8012088 <scalbn+0x108>
 8012032:	eeb0 6b47 	vmov.f64	d6, d7
 8012036:	2b00      	cmp	r3, #0
 8012038:	fe07 7b05 	vseleq.f64	d7, d7, d5
 801203c:	e7b9      	b.n	8011fb2 <scalbn+0x32>
 801203e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012078 <scalbn+0xf8>
 8012042:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8012090 <scalbn+0x110>
 8012046:	eeb0 6b47 	vmov.f64	d6, d7
 801204a:	2b00      	cmp	r3, #0
 801204c:	e7f4      	b.n	8012038 <scalbn+0xb8>
 801204e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012052:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012056:	3236      	adds	r2, #54	; 0x36
 8012058:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801205c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012060:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8012098 <scalbn+0x118>
 8012064:	ec41 0b17 	vmov	d7, r0, r1
 8012068:	e7a3      	b.n	8011fb2 <scalbn+0x32>
 801206a:	bf00      	nop
 801206c:	f3af 8000 	nop.w
 8012070:	00000000 	.word	0x00000000
 8012074:	43500000 	.word	0x43500000
 8012078:	c2f8f359 	.word	0xc2f8f359
 801207c:	01a56e1f 	.word	0x01a56e1f
 8012080:	8800759c 	.word	0x8800759c
 8012084:	7e37e43c 	.word	0x7e37e43c
 8012088:	8800759c 	.word	0x8800759c
 801208c:	fe37e43c 	.word	0xfe37e43c
 8012090:	c2f8f359 	.word	0xc2f8f359
 8012094:	81a56e1f 	.word	0x81a56e1f
 8012098:	00000000 	.word	0x00000000
 801209c:	3c900000 	.word	0x3c900000
 80120a0:	ffff3cb0 	.word	0xffff3cb0

080120a4 <_init>:
 80120a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120a6:	bf00      	nop
 80120a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120aa:	bc08      	pop	{r3}
 80120ac:	469e      	mov	lr, r3
 80120ae:	4770      	bx	lr

080120b0 <_fini>:
 80120b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120b2:	bf00      	nop
 80120b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120b6:	bc08      	pop	{r3}
 80120b8:	469e      	mov	lr, r3
 80120ba:	4770      	bx	lr
