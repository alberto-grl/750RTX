
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014be4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000aa18  08014e88  08014e88  00024e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f8a0  0801f8a0  0004f000  2**0
                  CONTENTS
  4 .ARM          00000008  0801f8a0  0801f8a0  0002f8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f8a8  0801f8a8  0004f000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f8a8  0801f8a8  0002f8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f8ac  0801f8ac  0002f8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005e4  24000000  0801f8b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dffc  24000600  0801fe94  00030600  2**5
                  ALLOC
 10 ._user_heap_stack 00000644  2400e5fc  0801fe94  0003e5fc  2**0
                  ALLOC
 11 .dtcm         0000f000  20000000  20000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  0004f000  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004cbe7  00000000  00000000  0004f02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000089b7  00000000  00000000  0009bc15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000321d3  00000000  00000000  000a45cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bd8  00000000  00000000  000d67a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000054e0  00000000  00000000  000d8378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00009690  00000000  00000000  000dd858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00045871  00000000  00000000  000e6ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018787c  00000000  00000000  0012c759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000c5  00000000  00000000  002b3fd5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000071bc  00000000  00000000  002b409c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000600 	.word	0x24000600
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014e6c 	.word	0x08014e6c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000604 	.word	0x24000604
 80002dc:	08014e6c 	.word	0x08014e6c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <loadWPM>:
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
	}
}

void loadWPM (int wpm) // Calculate new time constants based on wpm value
{
 8000694:	b510      	push	{r4, lr}

	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 8000696:	4c05      	ldr	r4, [pc, #20]	; (80006ac <loadWPM+0x18>)
{
 8000698:	4602      	mov	r2, r0
	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 800069a:	17c3      	asrs	r3, r0, #31
 800069c:	2100      	movs	r1, #0
 800069e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80006a2:	f7ff fe75 	bl	8000390 <__aeabi_uldivmod>
 80006a6:	6020      	str	r0, [r4, #0]

}
 80006a8:	bd10      	pop	{r4, pc}
 80006aa:	bf00      	nop
 80006ac:	24008c38 	.word	0x24008c38

080006b0 <HAL_TIM_PeriodElapsedCallback>:
		}
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80006b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

void DoKeyer(void)
{

#ifdef SEMI_QSK
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 80006b4:	4c9a      	ldr	r4, [pc, #616]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80006b6:	6823      	ldr	r3, [r4, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d12f      	bne.n	800071c <HAL_TIM_PeriodElapsedCallback+0x6c>
			semi_qsk_timeout = 0;
						pk = Saved_pk;
		}  // delayed QSK RX
#endif

	if(keyer_mode != SINGLE){  // check DIT/DAH keys for CW
 80006bc:	4a99      	ldr	r2, [pc, #612]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	2a02      	cmp	r2, #2
 80006c2:	d029      	beq.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>

		switch(keyerState){ // Basic Iambic Keyer, keyerControl contains processing flags and keyer mode bits, Supports Iambic A and B, State machine based, uses calls to millis() for timing.
 80006c4:	4d98      	ldr	r5, [pc, #608]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80006c6:	782a      	ldrb	r2, [r5, #0]
 80006c8:	2a05      	cmp	r2, #5
 80006ca:	d825      	bhi.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
 80006cc:	e8df f012 	tbh	[pc, r2, lsl #1]
 80006d0:	009f0070 	.word	0x009f0070
 80006d4:	000600d9 	.word	0x000600d9
 80006d8:	004000ad 	.word	0x004000ad
			} else {
				keyerState = IDLE;
			}
			break;
		case KEYED_PREP: // Assert key down, start timing, state shared for dit or dah
			Key_state = HIGH;
 80006dc:	4a93      	ldr	r2, [pc, #588]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80006de:	2001      	movs	r0, #1
 80006e0:	6010      	str	r0, [r2, #0]
	if(!(semi_qsk_timeout))
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	f000 80e2 	beq.w	80008ac <HAL_TIM_PeriodElapsedCallback+0x1fc>
 80006e8:	4f91      	ldr	r7, [pc, #580]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x280>)
	tx = tx_enable;
 80006ea:	2601      	movs	r6, #1
		semi_qsk_timeout = 0;
 80006ec:	2300      	movs	r3, #0
			CarrierEnable(1);
 80006ee:	4630      	mov	r0, r6
		semi_qsk_timeout = 0;
 80006f0:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 80006f2:	703e      	strb	r6, [r7, #0]
			CarrierEnable(1);
 80006f4:	f003 fd3c 	bl	8004170 <CarrierEnable>
		TXSwitch(1);
 80006f8:	4630      	mov	r0, r6
			switch_rxtx(Key_state);
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
			keyerState = KEYED;                 // next state
 80006fa:	2404      	movs	r4, #4
		TXSwitch(1);
 80006fc:	f003 fcd4 	bl	80040a8 <TXSwitch>
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8000700:	f005 fb00 	bl	8005d04 <HAL_GetTick>
 8000704:	498b      	ldr	r1, [pc, #556]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 8000706:	4a8c      	ldr	r2, [pc, #560]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8000708:	680b      	ldr	r3, [r1, #0]
			keyerState = KEYED;                 // next state
 800070a:	702c      	strb	r4, [r5, #0]
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 800070c:	4418      	add	r0, r3
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 800070e:	7813      	ldrb	r3, [r2, #0]
 8000710:	f023 0303 	bic.w	r3, r3, #3
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8000714:	6008      	str	r0, [r1, #0]
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 8000716:	7013      	strb	r3, [r2, #0]
}
 8000718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 800071c:	f005 faf2 	bl	8005d04 <HAL_GetTick>
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8000726:	4290      	cmp	r0, r2
 8000728:	f200 80b9 	bhi.w	800089e <HAL_TIM_PeriodElapsedCallback+0x1ee>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0c5      	beq.n	80006bc <HAL_TIM_PeriodElapsedCallback+0xc>
 8000730:	f005 fae8 	bl	8005d04 <HAL_GetTick>
 8000734:	6823      	ldr	r3, [r4, #0]
 8000736:	4298      	cmp	r0, r3
 8000738:	d9c0      	bls.n	80006bc <HAL_TIM_PeriodElapsedCallback+0xc>
						pk = Saved_pk;
 800073a:	4f80      	ldr	r7, [pc, #512]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x28c>)
			TXSwitch(0);
 800073c:	2000      	movs	r0, #0
 800073e:	f003 fcb3 	bl	80040a8 <TXSwitch>
						pk = Saved_pk;
 8000742:	4e7f      	ldr	r6, [pc, #508]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x290>)
			semi_qsk_timeout = 0;
 8000744:	2200      	movs	r2, #0
						pk = Saved_pk;
 8000746:	6839      	ldr	r1, [r7, #0]
 8000748:	4613      	mov	r3, r2
			semi_qsk_timeout = 0;
 800074a:	6022      	str	r2, [r4, #0]
						pk = Saved_pk;
 800074c:	6031      	str	r1, [r6, #0]
 800074e:	e7b5      	b.n	80006bc <HAL_TIM_PeriodElapsedCallback+0xc>
	if(KEYER_DASH) {
 8000750:	2140      	movs	r1, #64	; 0x40
 8000752:	487c      	ldr	r0, [pc, #496]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000754:	f008 fb7a 	bl	8008e4c <HAL_GPIO_ReadPin>
 8000758:	b948      	cbnz	r0, 800076e <HAL_TIM_PeriodElapsedCallback+0xbe>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 800075a:	4b7b      	ldr	r3, [pc, #492]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800075c:	4a76      	ldr	r2, [pc, #472]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	7811      	ldrb	r1, [r2, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	bf14      	ite	ne
 8000766:	2302      	movne	r3, #2
 8000768:	2301      	moveq	r3, #1
 800076a:	430b      	orrs	r3, r1
 800076c:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 800076e:	2180      	movs	r1, #128	; 0x80
 8000770:	4874      	ldr	r0, [pc, #464]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000772:	f008 fb6b 	bl	8008e4c <HAL_GPIO_ReadPin>
 8000776:	b948      	cbnz	r0, 800078c <HAL_TIM_PeriodElapsedCallback+0xdc>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 8000778:	4b73      	ldr	r3, [pc, #460]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800077a:	4a6f      	ldr	r2, [pc, #444]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	7811      	ldrb	r1, [r2, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	bf14      	ite	ne
 8000784:	2301      	movne	r3, #1
 8000786:	2302      	moveq	r3, #2
 8000788:	430b      	orrs	r3, r1
 800078a:	7013      	strb	r3, [r2, #0]
			}
			break;
		case INTER_ELEMENT:
			// Insert time between dits/dahs
			update_PaddleLatch();               // latch paddle state
			if(HAL_GetTick() > ktimer) {            // are we at end of inter-space ?
 800078c:	f005 faba 	bl	8005d04 <HAL_GetTick>
 8000790:	4b68      	ldr	r3, [pc, #416]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4298      	cmp	r0, r3
 8000796:	d9bf      	bls.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
				if(keyerControl & DIT_PROC) {             // was it a dit or dah ?
 8000798:	4a67      	ldr	r2, [pc, #412]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800079a:	7813      	ldrb	r3, [r2, #0]
 800079c:	f013 0104 	ands.w	r1, r3, #4
 80007a0:	f000 80b9 	beq.w	8000916 <HAL_TIM_PeriodElapsedCallback+0x266>
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 80007a4:	f023 0305 	bic.w	r3, r3, #5
					keyerState = CHK_DAH;                  // dit done, check for dah
 80007a8:	2102      	movs	r1, #2
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 80007aa:	7013      	strb	r3, [r2, #0]
					keyerState = CHK_DAH;                  // dit done, check for dah
 80007ac:	7029      	strb	r1, [r5, #0]
 80007ae:	e7b3      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if((KEYER_DASH) ||
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	4864      	ldr	r0, [pc, #400]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007b4:	f008 fb4a 	bl	8008e4c <HAL_GPIO_ReadPin>
 80007b8:	b140      	cbz	r0, 80007cc <HAL_TIM_PeriodElapsedCallback+0x11c>
					(KEYER_DOT) ||
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	4861      	ldr	r0, [pc, #388]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007be:	f008 fb45 	bl	8008e4c <HAL_GPIO_ReadPin>
			if((KEYER_DASH) ||
 80007c2:	b118      	cbz	r0, 80007cc <HAL_TIM_PeriodElapsedCallback+0x11c>
					(keyerControl & 0x03))
 80007c4:	4b5c      	ldr	r3, [pc, #368]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
					(KEYER_DOT) ||
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	0798      	lsls	r0, r3, #30
 80007ca:	d0a5      	beq.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
	if(KEYER_DASH) {
 80007cc:	2140      	movs	r1, #64	; 0x40
 80007ce:	485d      	ldr	r0, [pc, #372]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007d0:	f008 fb3c 	bl	8008e4c <HAL_GPIO_ReadPin>
 80007d4:	b948      	cbnz	r0, 80007ea <HAL_TIM_PeriodElapsedCallback+0x13a>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 80007d6:	4b5c      	ldr	r3, [pc, #368]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80007d8:	4a57      	ldr	r2, [pc, #348]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	7811      	ldrb	r1, [r2, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf14      	ite	ne
 80007e2:	2302      	movne	r3, #2
 80007e4:	2301      	moveq	r3, #1
 80007e6:	430b      	orrs	r3, r1
 80007e8:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	4855      	ldr	r0, [pc, #340]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007ee:	f008 fb2d 	bl	8008e4c <HAL_GPIO_ReadPin>
 80007f2:	b948      	cbnz	r0, 8000808 <HAL_TIM_PeriodElapsedCallback+0x158>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 80007f4:	4b54      	ldr	r3, [pc, #336]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80007f6:	4a50      	ldr	r2, [pc, #320]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	7811      	ldrb	r1, [r2, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	bf14      	ite	ne
 8000800:	2301      	movne	r3, #1
 8000802:	2302      	moveq	r3, #2
 8000804:	430b      	orrs	r3, r1
 8000806:	7013      	strb	r3, [r2, #0]
				keyerState = CHK_DIT;
 8000808:	2301      	movs	r3, #1
 800080a:	702b      	strb	r3, [r5, #0]
 800080c:	e784      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(keyerControl & DIT_L) {
 800080e:	4a4a      	ldr	r2, [pc, #296]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000810:	7813      	ldrb	r3, [r2, #0]
 8000812:	07d9      	lsls	r1, r3, #31
 8000814:	d55e      	bpl.n	80008d4 <HAL_TIM_PeriodElapsedCallback+0x224>
				keyerControl |= DIT_PROC;
 8000816:	f043 0304 	orr.w	r3, r3, #4
				ktimer = ditTime;
 800081a:	484c      	ldr	r0, [pc, #304]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800081c:	4945      	ldr	r1, [pc, #276]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800081e:	6800      	ldr	r0, [r0, #0]
				keyerControl |= DIT_PROC;
 8000820:	7013      	strb	r3, [r2, #0]
				keyerState = KEYED_PREP;
 8000822:	2303      	movs	r3, #3
				ktimer = ditTime;
 8000824:	6008      	str	r0, [r1, #0]
				keyerState = KEYED_PREP;
 8000826:	702b      	strb	r3, [r5, #0]
 8000828:	e776      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(HAL_GetTick() > ktimer) {            // are we at end of key down ?
 800082a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8000934 <HAL_TIM_PeriodElapsedCallback+0x284>
 800082e:	f005 fa69 	bl	8005d04 <HAL_GetTick>
 8000832:	f8d8 3000 	ldr.w	r3, [r8]
 8000836:	4298      	cmp	r0, r3
 8000838:	d84f      	bhi.n	80008da <HAL_TIM_PeriodElapsedCallback+0x22a>
			} else if(keyerControl & IAMBICB) {
 800083a:	4c3f      	ldr	r4, [pc, #252]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800083c:	7823      	ldrb	r3, [r4, #0]
 800083e:	06db      	lsls	r3, r3, #27
 8000840:	f57f af6a 	bpl.w	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
	if(KEYER_DASH) {
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	483f      	ldr	r0, [pc, #252]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000848:	f008 fb00 	bl	8008e4c <HAL_GPIO_ReadPin>
 800084c:	b940      	cbnz	r0, 8000860 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 800084e:	4b3e      	ldr	r3, [pc, #248]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000850:	7822      	ldrb	r2, [r4, #0]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf14      	ite	ne
 8000858:	2302      	movne	r3, #2
 800085a:	2301      	moveq	r3, #1
 800085c:	4313      	orrs	r3, r2
 800085e:	7023      	strb	r3, [r4, #0]
	if(KEYER_DOT) {
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	4838      	ldr	r0, [pc, #224]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000864:	f008 faf2 	bl	8008e4c <HAL_GPIO_ReadPin>
 8000868:	2800      	cmp	r0, #0
 800086a:	f47f af55 	bne.w	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 800086e:	4b36      	ldr	r3, [pc, #216]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000870:	7822      	ldrb	r2, [r4, #0]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf14      	ite	ne
 8000878:	2301      	movne	r3, #1
 800087a:	2302      	moveq	r3, #2
 800087c:	4313      	orrs	r3, r2
 800087e:	7023      	strb	r3, [r4, #0]
}
 8000880:	e74a      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(keyerControl & DAH_L) {
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	f013 0302 	ands.w	r3, r3, #2
 800088a:	d00d      	beq.n	80008a8 <HAL_TIM_PeriodElapsedCallback+0x1f8>
				ktimer = ditTime*3;
 800088c:	4b2f      	ldr	r3, [pc, #188]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x29c>)
				keyerState = KEYED_PREP;
 800088e:	2103      	movs	r1, #3
				ktimer = ditTime*3;
 8000890:	4a28      	ldr	r2, [pc, #160]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000892:	681b      	ldr	r3, [r3, #0]
				keyerState = KEYED_PREP;
 8000894:	7029      	strb	r1, [r5, #0]
				ktimer = ditTime*3;
 8000896:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800089a:	6013      	str	r3, [r2, #0]
				keyerState = KEYED_PREP;
 800089c:	e73c      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
		TXSwitch(0);
 800089e:	2000      	movs	r0, #0
 80008a0:	f003 fc02 	bl	80040a8 <TXSwitch>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 80008a4:	6823      	ldr	r3, [r4, #0]
 80008a6:	e741      	b.n	800072c <HAL_TIM_PeriodElapsedCallback+0x7c>
				keyerState = IDLE;
 80008a8:	702b      	strb	r3, [r5, #0]
 80008aa:	e735      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 80008ac:	4e28      	ldr	r6, [pc, #160]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80008ae:	4f20      	ldr	r7, [pc, #128]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80008b0:	7833      	ldrb	r3, [r6, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f43f af19 	beq.w	80006ea <HAL_TIM_PeriodElapsedCallback+0x3a>
 80008b8:	783b      	ldrb	r3, [r7, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f47f af15 	bne.w	80006ea <HAL_TIM_PeriodElapsedCallback+0x3a>
					Saved_pk = pk;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80008c6:	601a      	str	r2, [r3, #0]
			TXSwitch(1);
 80008c8:	f003 fbee 	bl	80040a8 <TXSwitch>
			HAL_Delay(txdelay);
 80008cc:	7830      	ldrb	r0, [r6, #0]
 80008ce:	f005 fa1f 	bl	8005d10 <HAL_Delay>
 80008d2:	e70a      	b.n	80006ea <HAL_TIM_PeriodElapsedCallback+0x3a>
				keyerState = CHK_DAH;
 80008d4:	2302      	movs	r3, #2
 80008d6:	702b      	strb	r3, [r5, #0]
 80008d8:	e71e      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
				Key_state = LOW;
 80008da:	4a14      	ldr	r2, [pc, #80]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80008dc:	2300      	movs	r3, #0
	if(!(semi_qsk_timeout))
 80008de:	6820      	ldr	r0, [r4, #0]
				Key_state = LOW;
 80008e0:	6013      	str	r3, [r2, #0]
	if(!(semi_qsk_timeout))
 80008e2:	bbb8      	cbnz	r0, 8000954 <HAL_TIM_PeriodElapsedCallback+0x2a4>
	tx = tx_enable;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x280>)
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 80008e6:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800094c <HAL_TIM_PeriodElapsedCallback+0x29c>
	tx = tx_enable;
 80008ea:	7018      	strb	r0, [r3, #0]
			CarrierEnable(0);
 80008ec:	f003 fc40 	bl	8004170 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 80008f0:	f005 fa08 	bl	8005d04 <HAL_GetTick>
 80008f4:	f8d9 3000 	ldr.w	r3, [r9]
 80008f8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80008fc:	6020      	str	r0, [r4, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 80008fe:	2800      	cmp	r0, #0
 8000900:	d039      	beq.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x2c6>
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8000902:	f005 f9ff 	bl	8005d04 <HAL_GetTick>
 8000906:	f8d9 3000 	ldr.w	r3, [r9]
				keyerState = INTER_ELEMENT;     // next state
 800090a:	2205      	movs	r2, #5
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 800090c:	4418      	add	r0, r3
				keyerState = INTER_ELEMENT;     // next state
 800090e:	702a      	strb	r2, [r5, #0]
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8000910:	f8c8 0000 	str.w	r0, [r8]
				keyerState = INTER_ELEMENT;     // next state
 8000914:	e700      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
				} else {
					keyerControl &= ~(DAH_L);              // clear dah latch
 8000916:	f023 0302 	bic.w	r3, r3, #2
					keyerState = IDLE;                     // go idle
 800091a:	7029      	strb	r1, [r5, #0]
					keyerControl &= ~(DAH_L);              // clear dah latch
 800091c:	7013      	strb	r3, [r2, #0]
}
 800091e:	e6fb      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
 8000920:	2400b998 	.word	0x2400b998
 8000924:	2400b80e 	.word	0x2400b80e
 8000928:	2400b80d 	.word	0x2400b80d
 800092c:	24006254 	.word	0x24006254
 8000930:	2400c9cc 	.word	0x2400c9cc
 8000934:	2400b818 	.word	0x2400b818
 8000938:	2400b80c 	.word	0x2400b80c
 800093c:	2400728c 	.word	0x2400728c
 8000940:	2400b844 	.word	0x2400b844
 8000944:	58020000 	.word	0x58020000
 8000948:	2400b814 	.word	0x2400b814
 800094c:	24008c38 	.word	0x24008c38
 8000950:	2400c9cd 	.word	0x2400c9cd
	tx = tx_enable;
 8000954:	4a09      	ldr	r2, [pc, #36]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
			pk = Saved_pk;
 8000956:	4f0a      	ldr	r7, [pc, #40]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000958:	4e0a      	ldr	r6, [pc, #40]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
			semi_qsk_timeout = 0;
 800095a:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 800095c:	7013      	strb	r3, [r2, #0]
			pk = Saved_pk;
 800095e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8000988 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	6033      	str	r3, [r6, #0]
			TXSwitch(0);
 8000966:	2000      	movs	r0, #0
 8000968:	f003 fb9e 	bl	80040a8 <TXSwitch>
						pk = Saved_pk;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	6033      	str	r3, [r6, #0]
			semi_qsk_timeout = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	6023      	str	r3, [r4, #0]
						pk = Saved_pk;
 8000974:	e7c5      	b.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x252>
 8000976:	4e03      	ldr	r6, [pc, #12]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000978:	4f01      	ldr	r7, [pc, #4]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800097a:	e7f4      	b.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x2b6>
 800097c:	2400c9cc 	.word	0x2400c9cc
 8000980:	2400728c 	.word	0x2400728c
 8000984:	2400b844 	.word	0x2400b844
 8000988:	24008c38 	.word	0x24008c38

0800098c <cw_tx_char>:

uint8_t cw_msg_interval = 5; // number of seconds CW message is repeated
uint32_t cw_msg_event = 0;
uint8_t cw_msg_id = 0; // selected message

int cw_tx_char(char ch){    // Transmit message in CW
 800098c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sym;
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 8000990:	497d      	ldr	r1, [pc, #500]	; (8000b88 <cw_tx_char+0x1fc>)
 8000992:	237e      	movs	r3, #126	; 0x7e
 8000994:	2500      	movs	r5, #0
 8000996:	e004      	b.n	80009a2 <cw_tx_char+0x16>
 8000998:	b2d5      	uxtb	r5, r2
 800099a:	5d4b      	ldrb	r3, [r1, r5]
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 808b 	beq.w	8000ab8 <cw_tx_char+0x12c>
    if(sym == ch){  // found -> transmit CW character j
 80009a2:	4298      	cmp	r0, r3
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 80009a4:	f105 0201 	add.w	r2, r5, #1
    if(sym == ch){  // found -> transmit CW character j
 80009a8:	d1f6      	bne.n	8000998 <cw_tx_char+0xc>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 80009aa:	062b      	lsls	r3, r5, #24
 80009ac:	f100 80e6 	bmi.w	8000b7c <cw_tx_char+0x1f0>
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	461e      	mov	r6, r3
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	422b      	tst	r3, r5
 80009b8:	d0fb      	beq.n	80009b2 <cw_tx_char+0x26>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 80009ba:	08b6      	lsrs	r6, r6, #2
 80009bc:	f000 80b2 	beq.w	8000b24 <cw_tx_char+0x198>
 80009c0:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8000b9c <cw_tx_char+0x210>
 80009c4:	4f71      	ldr	r7, [pc, #452]	; (8000b8c <cw_tx_char+0x200>)
 80009c6:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8000ba4 <cw_tx_char+0x218>
					Saved_pk = pk;
 80009ca:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8000ba0 <cw_tx_char+0x214>
	if(!(semi_qsk_timeout))
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b93b      	cbnz	r3, 80009e2 <cw_tx_char+0x56>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 80009d2:	4b6f      	ldr	r3, [pc, #444]	; (8000b90 <cw_tx_char+0x204>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b123      	cbz	r3, 80009e2 <cw_tx_char+0x56>
 80009d8:	f898 3000 	ldrb.w	r3, [r8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f000 8095 	beq.w	8000b0c <cw_tx_char+0x180>
	tx = tx_enable;
 80009e2:	2401      	movs	r4, #1
		semi_qsk_timeout = 0;
 80009e4:	2300      	movs	r3, #0
			CarrierEnable(1);
 80009e6:	4620      	mov	r0, r4
		semi_qsk_timeout = 0;
 80009e8:	603b      	str	r3, [r7, #0]
	tx = tx_enable;
 80009ea:	f888 4000 	strb.w	r4, [r8]
			CarrierEnable(1);
 80009ee:	f003 fbbf 	bl	8004170 <CarrierEnable>
		TXSwitch(1);
 80009f2:	4620      	mov	r0, r4
    if(KEYER_DASH || KEYER_DOT){
 80009f4:	4c67      	ldr	r4, [pc, #412]	; (8000b94 <cw_tx_char+0x208>)
		TXSwitch(1);
 80009f6:	f003 fb57 	bl	80040a8 <TXSwitch>
      else {
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
          switch_rxtx(1);  // key-on  tx
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 80009fa:	422e      	tst	r6, r5
 80009fc:	f8d9 0000 	ldr.w	r0, [r9]
 8000a00:	bf14      	ite	ne
 8000a02:	f04f 0b03 	movne.w	fp, #3
 8000a06:	f04f 0b01 	moveq.w	fp, #1
 8000a0a:	fb00 fb0b 	mul.w	fp, r0, fp
  uint32_t event = HAL_GetTick() + ms;
 8000a0e:	f005 f979 	bl	8005d04 <HAL_GetTick>
 8000a12:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 8000a14:	e00a      	b.n	8000a2c <cw_tx_char+0xa0>
    if(KEYER_DASH || KEYER_DOT){
 8000a16:	f008 fa19 	bl	8008e4c <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	4620      	mov	r0, r4
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d04c      	beq.n	8000abe <cw_tx_char+0x132>
 8000a24:	f008 fa12 	bl	8008e4c <HAL_GPIO_ReadPin>
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d048      	beq.n	8000abe <cw_tx_char+0x132>
  while(HAL_GetTick() < event){
 8000a2c:	f005 f96a 	bl	8005d04 <HAL_GetTick>
 8000a30:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000a36:	459b      	cmp	fp, r3
 8000a38:	d8ed      	bhi.n	8000a16 <cw_tx_char+0x8a>
	if(!(semi_qsk_timeout))
 8000a3a:	6838      	ldr	r0, [r7, #0]
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	d151      	bne.n	8000ae4 <cw_tx_char+0x158>
	tx = tx_enable;
 8000a40:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 8000a44:	f003 fb94 	bl	8004170 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8000a48:	f005 f95c 	bl	8005d04 <HAL_GetTick>
 8000a4c:	f8d9 b000 	ldr.w	fp, [r9]
 8000a50:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
 8000a54:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d04c      	beq.n	8000af4 <cw_tx_char+0x168>
  uint32_t event = HAL_GetTick() + ms;
 8000a5a:	f005 f953 	bl	8005d04 <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 8000a5e:	4c4d      	ldr	r4, [pc, #308]	; (8000b94 <cw_tx_char+0x208>)
  uint32_t event = HAL_GetTick() + ms;
 8000a60:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 8000a62:	e008      	b.n	8000a76 <cw_tx_char+0xea>
    if(KEYER_DASH || KEYER_DOT){
 8000a64:	f008 f9f2 	bl	8008e4c <HAL_GPIO_ReadPin>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	b3b3      	cbz	r3, 8000ade <cw_tx_char+0x152>
 8000a70:	f008 f9ec 	bl	8008e4c <HAL_GPIO_ReadPin>
 8000a74:	b398      	cbz	r0, 8000ade <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 8000a76:	f005 f945 	bl	8005d04 <HAL_GetTick>
 8000a7a:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000a80:	459b      	cmp	fp, r3
 8000a82:	d8ef      	bhi.n	8000a64 <cw_tx_char+0xd8>
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
 8000a84:	0876      	lsrs	r6, r6, #1
 8000a86:	d1a2      	bne.n	80009ce <cw_tx_char+0x42>
          switch_rxtx(0);  // key-off tx
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
        }
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 8000a88:	f8d9 6000 	ldr.w	r6, [r9]
  uint32_t event = HAL_GetTick() + ms;
 8000a8c:	f005 f93a 	bl	8005d04 <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 8000a90:	4c40      	ldr	r4, [pc, #256]	; (8000b94 <cw_tx_char+0x208>)
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 8000a92:	0076      	lsls	r6, r6, #1
  uint32_t event = HAL_GetTick() + ms;
 8000a94:	4406      	add	r6, r0
  while(HAL_GetTick() < event){
 8000a96:	e008      	b.n	8000aaa <cw_tx_char+0x11e>
    if(KEYER_DASH || KEYER_DOT){
 8000a98:	f008 f9d8 	bl	8008e4c <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	4620      	mov	r0, r4
 8000aa2:	b1e3      	cbz	r3, 8000ade <cw_tx_char+0x152>
 8000aa4:	f008 f9d2 	bl	8008e4c <HAL_GPIO_ReadPin>
 8000aa8:	b1c8      	cbz	r0, 8000ade <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 8000aaa:	f005 f92b 	bl	8005d04 <HAL_GetTick>
 8000aae:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000ab0:	2140      	movs	r1, #64	; 0x40
 8000ab2:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000ab4:	429e      	cmp	r6, r3
 8000ab6:	d8ef      	bhi.n	8000a98 <cw_tx_char+0x10c>
      }
      break; // next character
    }
  }
  return 0;
 8000ab8:	2000      	movs	r0, #0
}
 8000aba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(!(semi_qsk_timeout))
 8000abe:	6838      	ldr	r0, [r7, #0]
 8000ac0:	2800      	cmp	r0, #0
 8000ac2:	d14a      	bne.n	8000b5a <cw_tx_char+0x1ce>
	tx = tx_enable;
 8000ac4:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 8000ac8:	f003 fb52 	bl	8004170 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8000acc:	f005 f91a 	bl	8005d04 <HAL_GetTick>
 8000ad0:	f8d9 3000 	ldr.w	r3, [r9]
 8000ad4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8000ad8:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8000ada:	2800      	cmp	r0, #0
 8000adc:	d050      	beq.n	8000b80 <cw_tx_char+0x1f4>
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8000ade:	2001      	movs	r0, #1
}
 8000ae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tx = tx_enable;
 8000ae4:	2300      	movs	r3, #0
			pk = Saved_pk;
 8000ae6:	4a2c      	ldr	r2, [pc, #176]	; (8000b98 <cw_tx_char+0x20c>)
	tx = tx_enable;
 8000ae8:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 8000aec:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 8000aee:	f8da 3000 	ldr.w	r3, [sl]
 8000af2:	6013      	str	r3, [r2, #0]
			TXSwitch(0);
 8000af4:	2000      	movs	r0, #0
 8000af6:	f003 fad7 	bl	80040a8 <TXSwitch>
			semi_qsk_timeout = 0;
 8000afa:	2300      	movs	r3, #0
						pk = Saved_pk;
 8000afc:	4a26      	ldr	r2, [pc, #152]	; (8000b98 <cw_tx_char+0x20c>)
			semi_qsk_timeout = 0;
 8000afe:	603b      	str	r3, [r7, #0]
						pk = Saved_pk;
 8000b00:	f8da 3000 	ldr.w	r3, [sl]
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
 8000b04:	f8d9 b000 	ldr.w	fp, [r9]
						pk = Saved_pk;
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	e7a6      	b.n	8000a5a <cw_tx_char+0xce>
					Saved_pk = pk;
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <cw_tx_char+0x20c>)
			TXSwitch(1);
 8000b0e:	2001      	movs	r0, #1
					Saved_pk = pk;
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f8ca 3000 	str.w	r3, [sl]
			TXSwitch(1);
 8000b16:	f003 fac7 	bl	80040a8 <TXSwitch>
			HAL_Delay(txdelay);
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <cw_tx_char+0x204>)
 8000b1c:	7818      	ldrb	r0, [r3, #0]
 8000b1e:	f005 f8f7 	bl	8005d10 <HAL_Delay>
 8000b22:	e75e      	b.n	80009e2 <cw_tx_char+0x56>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <cw_tx_char+0x210>)
    if(KEYER_DASH || KEYER_DOT){
 8000b26:	4c1b      	ldr	r4, [pc, #108]	; (8000b94 <cw_tx_char+0x208>)
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8000b28:	681e      	ldr	r6, [r3, #0]
  uint32_t event = HAL_GetTick() + ms;
 8000b2a:	f005 f8eb 	bl	8005d04 <HAL_GetTick>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8000b2e:	00b6      	lsls	r6, r6, #2
  uint32_t event = HAL_GetTick() + ms;
 8000b30:	4406      	add	r6, r0
  while(HAL_GetTick() < event){
 8000b32:	e00a      	b.n	8000b4a <cw_tx_char+0x1be>
    if(KEYER_DASH || KEYER_DOT){
 8000b34:	f008 f98a 	bl	8008e4c <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2180      	movs	r1, #128	; 0x80
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0ba      	beq.n	8000ab8 <cw_tx_char+0x12c>
 8000b42:	f008 f983 	bl	8008e4c <HAL_GPIO_ReadPin>
 8000b46:	2800      	cmp	r0, #0
 8000b48:	d0b6      	beq.n	8000ab8 <cw_tx_char+0x12c>
  while(HAL_GetTick() < event){
 8000b4a:	f005 f8db 	bl	8005d04 <HAL_GetTick>
 8000b4e:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000b54:	429e      	cmp	r6, r3
 8000b56:	d8ed      	bhi.n	8000b34 <cw_tx_char+0x1a8>
 8000b58:	e7ae      	b.n	8000ab8 <cw_tx_char+0x12c>
	tx = tx_enable;
 8000b5a:	2300      	movs	r3, #0
			pk = Saved_pk;
 8000b5c:	4d10      	ldr	r5, [pc, #64]	; (8000ba0 <cw_tx_char+0x214>)
 8000b5e:	4c0e      	ldr	r4, [pc, #56]	; (8000b98 <cw_tx_char+0x20c>)
	tx = tx_enable;
 8000b60:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 8000b64:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 8000b66:	682b      	ldr	r3, [r5, #0]
 8000b68:	6023      	str	r3, [r4, #0]
			TXSwitch(0);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f003 fa9c 	bl	80040a8 <TXSwitch>
			semi_qsk_timeout = 0;
 8000b70:	2200      	movs	r2, #0
						pk = Saved_pk;
 8000b72:	682b      	ldr	r3, [r5, #0]
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8000b74:	2001      	movs	r0, #1
			semi_qsk_timeout = 0;
 8000b76:	603a      	str	r2, [r7, #0]
						pk = Saved_pk;
 8000b78:	6023      	str	r3, [r4, #0]
 8000b7a:	e79e      	b.n	8000aba <cw_tx_char+0x12e>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 8000b7c:	2640      	movs	r6, #64	; 0x40
 8000b7e:	e71f      	b.n	80009c0 <cw_tx_char+0x34>
 8000b80:	4d07      	ldr	r5, [pc, #28]	; (8000ba0 <cw_tx_char+0x214>)
 8000b82:	4c05      	ldr	r4, [pc, #20]	; (8000b98 <cw_tx_char+0x20c>)
 8000b84:	e7f1      	b.n	8000b6a <cw_tx_char+0x1de>
 8000b86:	bf00      	nop
 8000b88:	08014eb0 	.word	0x08014eb0
 8000b8c:	2400b998 	.word	0x2400b998
 8000b90:	2400c9cd 	.word	0x2400c9cd
 8000b94:	58020000 	.word	0x58020000
 8000b98:	2400b844 	.word	0x2400b844
 8000b9c:	24008c38 	.word	0x24008c38
 8000ba0:	2400728c 	.word	0x2400728c
 8000ba4:	2400c9cc 	.word	0x2400c9cc

08000ba8 <SendCWMessage>:
  return 0;
}


void SendCWMessage(uint8_t MessageNo)
{
 8000ba8:	b538      	push	{r3, r4, r5, lr}
	cw_tx(cw_msg[MessageNo]);
 8000baa:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <SendCWMessage+0x28>)
 8000bb0:	012a      	lsls	r2, r5, #4
 8000bb2:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  for(uint8_t i = 0; msg[i]; i++){  // loop over message
 8000bb6:	5c98      	ldrb	r0, [r3, r2]
 8000bb8:	b148      	cbz	r0, 8000bce <SendCWMessage+0x26>
 8000bba:	2400      	movs	r4, #0
 8000bbc:	e002      	b.n	8000bc4 <SendCWMessage+0x1c>
 8000bbe:	b2e4      	uxtb	r4, r4
 8000bc0:	5d28      	ldrb	r0, [r5, r4]
 8000bc2:	b120      	cbz	r0, 8000bce <SendCWMessage+0x26>
 8000bc4:	3401      	adds	r4, #1
    if(cw_tx_char(msg[i])) return 1;
 8000bc6:	f7ff fee1 	bl	800098c <cw_tx_char>
 8000bca:	2800      	cmp	r0, #0
 8000bcc:	d0f7      	beq.n	8000bbe <SendCWMessage+0x16>
}
 8000bce:	bd38      	pop	{r3, r4, r5, pc}
 8000bd0:	24000000 	.word	0x24000000

08000bd4 <DecodeDCF77>:
{
	uint8_t i;
	static uint8_t MinParity, HourParity;
	MinParity = HourParity = 0;
	for (i = 21 ; i < 28; i++)
		if (DCF77Message[i])
 8000bd4:	4b52      	ldr	r3, [pc, #328]	; (8000d20 <DecodeDCF77+0x14c>)
{
 8000bd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (DCF77Message[i])
 8000bda:	7d5a      	ldrb	r2, [r3, #21]
{
 8000bdc:	b085      	sub	sp, #20
		if (DCF77Message[i])
 8000bde:	f893 a016 	ldrb.w	sl, [r3, #22]
			MinParity ^= 1;
 8000be2:	1e11      	subs	r1, r2, #0
 8000be4:	bf18      	it	ne
 8000be6:	2101      	movne	r1, #1
		if (DCF77Message[i])
 8000be8:	f1ba 0f00 	cmp.w	sl, #0
 8000bec:	d001      	beq.n	8000bf2 <DecodeDCF77+0x1e>
			MinParity ^= 1;
 8000bee:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8000bf2:	7ddf      	ldrb	r7, [r3, #23]
 8000bf4:	b10f      	cbz	r7, 8000bfa <DecodeDCF77+0x26>
			MinParity ^= 1;
 8000bf6:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8000bfa:	7e18      	ldrb	r0, [r3, #24]
 8000bfc:	9003      	str	r0, [sp, #12]
 8000bfe:	b108      	cbz	r0, 8000c04 <DecodeDCF77+0x30>
			MinParity ^= 1;
 8000c00:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8000c04:	7e5c      	ldrb	r4, [r3, #25]
 8000c06:	b10c      	cbz	r4, 8000c0c <DecodeDCF77+0x38>
			MinParity ^= 1;
 8000c08:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8000c0c:	f893 901a 	ldrb.w	r9, [r3, #26]
 8000c10:	f1b9 0f00 	cmp.w	r9, #0
 8000c14:	d001      	beq.n	8000c1a <DecodeDCF77+0x46>
			MinParity ^= 1;
 8000c16:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8000c1a:	7ede      	ldrb	r6, [r3, #27]
 8000c1c:	b10e      	cbz	r6, 8000c22 <DecodeDCF77+0x4e>
			MinParity ^= 1;
 8000c1e:	f081 0101 	eor.w	r1, r1, #1
	for (i = 21 ; i < 28; i++)
 8000c22:	4840      	ldr	r0, [pc, #256]	; (8000d24 <DecodeDCF77+0x150>)
	for (i = 29 ; i < 35; i++)
		if (DCF77Message[i])
 8000c24:	f893 801e 	ldrb.w	r8, [r3, #30]
 8000c28:	7001      	strb	r1, [r0, #0]
 8000c2a:	7f58      	ldrb	r0, [r3, #29]
			HourParity ^= 1;
 8000c2c:	f1b0 0c00 	subs.w	ip, r0, #0
 8000c30:	bf18      	it	ne
 8000c32:	f04f 0c01 	movne.w	ip, #1
		if (DCF77Message[i])
 8000c36:	f1b8 0f00 	cmp.w	r8, #0
 8000c3a:	d001      	beq.n	8000c40 <DecodeDCF77+0x6c>
			HourParity ^= 1;
 8000c3c:	f08c 0c01 	eor.w	ip, ip, #1
		if (DCF77Message[i])
 8000c40:	7fdd      	ldrb	r5, [r3, #31]
 8000c42:	9501      	str	r5, [sp, #4]
 8000c44:	b10d      	cbz	r5, 8000c4a <DecodeDCF77+0x76>
			HourParity ^= 1;
 8000c46:	f08c 0c01 	eor.w	ip, ip, #1
		if (DCF77Message[i])
 8000c4a:	f893 5020 	ldrb.w	r5, [r3, #32]
 8000c4e:	9502      	str	r5, [sp, #8]
 8000c50:	b10d      	cbz	r5, 8000c56 <DecodeDCF77+0x82>
			HourParity ^= 1;
 8000c52:	f08c 0c01 	eor.w	ip, ip, #1
		if (DCF77Message[i])
 8000c56:	f893 5021 	ldrb.w	r5, [r3, #33]	; 0x21
 8000c5a:	b10d      	cbz	r5, 8000c60 <DecodeDCF77+0x8c>
			HourParity ^= 1;
 8000c5c:	f08c 0c01 	eor.w	ip, ip, #1
		if (DCF77Message[i])
 8000c60:	f893 e022 	ldrb.w	lr, [r3, #34]	; 0x22
 8000c64:	f1be 0f00 	cmp.w	lr, #0
 8000c68:	d141      	bne.n	8000cee <DecodeDCF77+0x11a>
	for (i = 29 ; i < 35; i++)
 8000c6a:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8000d40 <DecodeDCF77+0x16c>
 8000c6e:	f88b c000 	strb.w	ip, [fp]

	if (MinParity != DCF77Message[28] && HourParity != DCF77Message[35])
 8000c72:	f893 b01c 	ldrb.w	fp, [r3, #28]
 8000c76:	458b      	cmp	fp, r1
 8000c78:	d006      	beq.n	8000c88 <DecodeDCF77+0xb4>
 8000c7a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000c7e:	4563      	cmp	r3, ip
 8000c80:	d002      	beq.n	8000c88 <DecodeDCF77+0xb4>
			SystemSeconds = 0;
			WSPRBeaconState = FIRST_FIX;
		}
		break;
	}
}
 8000c82:	b005      	add	sp, #20
 8000c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8000c88:	eb04 0449 	add.w	r4, r4, r9, lsl #1
		DCF77Hour += (DCF77Message[29+i] << i);
 8000c8c:	9b01      	ldr	r3, [sp, #4]
		DCF77Min += DCF77Message[21+i] << i;
 8000c8e:	eb02 024a 	add.w	r2, r2, sl, lsl #1
		DCF77Hour += (DCF77Message[29+i] << i);
 8000c92:	eb00 0048 	add.w	r0, r0, r8, lsl #1
		DCF77Min += DCF77Message[21+i] << i;
 8000c96:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	switch (WSPRBeaconState)
 8000c9a:	4f23      	ldr	r7, [pc, #140]	; (8000d28 <DecodeDCF77+0x154>)
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8000c9c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
		DCF77Hour += (DCF77Message[29+i] << i);
 8000ca0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		DCF77Min += DCF77Message[21+i] << i;
 8000ca4:	9b03      	ldr	r3, [sp, #12]
		DCF77Hour += 10 * (DCF77Message[33+i] << i);
 8000ca6:	eb05 054e 	add.w	r5, r5, lr, lsl #1
	switch (WSPRBeaconState)
 8000caa:	783c      	ldrb	r4, [r7, #0]
		DCF77Min += DCF77Message[21+i] << i;
 8000cac:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
		DCF77Hour += (DCF77Message[29+i] << i);
 8000cb0:	9b02      	ldr	r3, [sp, #8]
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8000cb2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
		DCF77Hour += (DCF77Message[29+i] << i);
 8000cb6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <DecodeDCF77+0x158>)
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8000cbc:	eb02 0646 	add.w	r6, r2, r6, lsl #1
		DCF77Hour += 10 * (DCF77Message[33+i] << i);
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <DecodeDCF77+0x15c>)
 8000cc2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8000cc6:	b2f6      	uxtb	r6, r6
		DCF77Hour += 10 * (DCF77Message[33+i] << i);
 8000cc8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8000ccc:	701e      	strb	r6, [r3, #0]
 8000cce:	7015      	strb	r5, [r2, #0]
	switch (WSPRBeaconState)
 8000cd0:	b184      	cbz	r4, 8000cf4 <DecodeDCF77+0x120>
 8000cd2:	2c01      	cmp	r4, #1
 8000cd4:	d1d5      	bne.n	8000c82 <DecodeDCF77+0xae>
		if (SystemMinutes == DCF77Min)
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <DecodeDCF77+0x160>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4296      	cmp	r6, r2
 8000cdc:	d013      	beq.n	8000d06 <DecodeDCF77+0x132>
			SystemSeconds = 0;
 8000cde:	4a16      	ldr	r2, [pc, #88]	; (8000d38 <DecodeDCF77+0x164>)
			SystemMinutes = DCF77Min;
 8000ce0:	601e      	str	r6, [r3, #0]
			SystemSeconds = 0;
 8000ce2:	2300      	movs	r3, #0
			WSPRBeaconState = FIRST_FIX;
 8000ce4:	703c      	strb	r4, [r7, #0]
			SystemSeconds = 0;
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	b005      	add	sp, #20
 8000cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			HourParity ^= 1;
 8000cee:	f08c 0c01 	eor.w	ip, ip, #1
 8000cf2:	e7ba      	b.n	8000c6a <DecodeDCF77+0x96>
		SystemMinutes = DCF77Min;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <DecodeDCF77+0x160>)
		SystemSeconds = 0;
 8000cf6:	4a10      	ldr	r2, [pc, #64]	; (8000d38 <DecodeDCF77+0x164>)
		SystemMinutes = DCF77Min;
 8000cf8:	601e      	str	r6, [r3, #0]
		WSPRBeaconState = FIRST_FIX;
 8000cfa:	2301      	movs	r3, #1
		SystemSeconds = 0;
 8000cfc:	6014      	str	r4, [r2, #0]
		WSPRBeaconState = FIRST_FIX;
 8000cfe:	703b      	strb	r3, [r7, #0]
}
 8000d00:	b005      	add	sp, #20
 8000d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			SystemSeconds = 0;
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <DecodeDCF77+0x164>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
			srand((unsigned) HAL_GetTick());
 8000d0c:	f004 fffa 	bl	8005d04 <HAL_GetTick>
 8000d10:	f010 fc28 	bl	8011564 <srand>
			TransmittingWSPR = 1;
 8000d14:	4a09      	ldr	r2, [pc, #36]	; (8000d3c <DecodeDCF77+0x168>)
			WSPRBeaconState = SEND_WSPR;
 8000d16:	2302      	movs	r3, #2
			TransmittingWSPR = 1;
 8000d18:	7014      	strb	r4, [r2, #0]
			WSPRBeaconState = SEND_WSPR;
 8000d1a:	703b      	strb	r3, [r7, #0]
 8000d1c:	e7b1      	b.n	8000c82 <DecodeDCF77+0xae>
 8000d1e:	bf00      	nop
 8000d20:	2400062c 	.word	0x2400062c
 8000d24:	2400066a 	.word	0x2400066a
 8000d28:	240083fd 	.word	0x240083fd
 8000d2c:	2400201c 	.word	0x2400201c
 8000d30:	24002019 	.word	0x24002019
 8000d34:	240072d4 	.word	0x240072d4
 8000d38:	240072d8 	.word	0x240072d8
 8000d3c:	240072e9 	.word	0x240072e9
 8000d40:	24000669 	.word	0x24000669

08000d44 <DoDCF77>:

void DoDCF77(uint16_t DCF77In)
{
 8000d44:	b5f0      	push	{r4, r5, r6, r7, lr}
//100 mSec (DCF77 0) is 3200 samples
//200 mSec (DCF77 1) is 6400 samples
//2 Sec (DCF77 Sync) is 64000 samples


	if (DCF77In && !LastDCF77In)
 8000d46:	4d3c      	ldr	r5, [pc, #240]	; (8000e38 <DoDCF77+0xf4>)
{
 8000d48:	b083      	sub	sp, #12
	if (DCF77In && !LastDCF77In)
 8000d4a:	b1f8      	cbz	r0, 8000d8c <DoDCF77+0x48>
 8000d4c:	8829      	ldrh	r1, [r5, #0]
 8000d4e:	2900      	cmp	r1, #0
 8000d50:	d141      	bne.n	8000dd6 <DoDCF77+0x92>
		RisingEdge = 1;
 8000d52:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <DoDCF77+0xf8>)
 8000d54:	2201      	movs	r2, #1
		DCF77LowSampleCounter = 0;
	}

	if (RisingEdge)
	{
		if (DCF77LowSampleCounter > 3000 && DCF77LowSampleCounter < 6000)
 8000d56:	f640 34b6 	movw	r4, #2998	; 0xbb6
		RisingEdge = 1;
 8000d5a:	701a      	strb	r2, [r3, #0]
	if (!DCF77In && LastDCF77In)
 8000d5c:	4b38      	ldr	r3, [pc, #224]	; (8000e40 <DoDCF77+0xfc>)
 8000d5e:	7019      	strb	r1, [r3, #0]
		if (DCF77LowSampleCounter > 3000 && DCF77LowSampleCounter < 6000)
 8000d60:	4b38      	ldr	r3, [pc, #224]	; (8000e44 <DoDCF77+0x100>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f6a3 36b9 	subw	r6, r3, #3001	; 0xbb9
 8000d68:	42a6      	cmp	r6, r4
 8000d6a:	d855      	bhi.n	8000e18 <DoDCF77+0xd4>
			DCF77Message[DCF77BitCounter++] = 0;
 8000d6c:	4c36      	ldr	r4, [pc, #216]	; (8000e48 <DoDCF77+0x104>)
 8000d6e:	4a37      	ldr	r2, [pc, #220]	; (8000e4c <DoDCF77+0x108>)
 8000d70:	6823      	ldr	r3, [r4, #0]
 8000d72:	54d1      	strb	r1, [r2, r3]
 8000d74:	3301      	adds	r3, #1
 8000d76:	6023      	str	r3, [r4, #0]
{
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4935      	ldr	r1, [pc, #212]	; (8000e50 <DoDCF77+0x10c>)
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
				DCF77Message[DCF77BitCounter++] = 1;
		DCF77HighSampleCounter = 0;
	}
	if (DCF77In && DCF77HighSampleCounter < 100000)
		DCF77HighSampleCounter++;
 8000d7c:	600a      	str	r2, [r1, #0]

	if (!DCF77In && DCF77LowSampleCounter < 100000)
		DCF77LowSampleCounter++;

	if (DCF77BitCounter > 59)
 8000d7e:	2b3b      	cmp	r3, #59	; 0x3b
 8000d80:	d901      	bls.n	8000d86 <DoDCF77+0x42>
		DCF77BitCounter = 59;
 8000d82:	233b      	movs	r3, #59	; 0x3b
 8000d84:	6023      	str	r3, [r4, #0]
	LastDCF77In = DCF77In;
 8000d86:	8028      	strh	r0, [r5, #0]
}
 8000d88:	b003      	add	sp, #12
 8000d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!DCF77In && LastDCF77In)
 8000d8c:	882a      	ldrh	r2, [r5, #0]
		RisingEdge = 0;
 8000d8e:	4f2b      	ldr	r7, [pc, #172]	; (8000e3c <DoDCF77+0xf8>)
	if (!DCF77In && LastDCF77In)
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <DoDCF77+0xfc>)
		RisingEdge = 0;
 8000d94:	7038      	strb	r0, [r7, #0]
	if (!DCF77In && LastDCF77In)
 8000d96:	bf14      	ite	ne
 8000d98:	2201      	movne	r2, #1
 8000d9a:	2200      	moveq	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
	if (FallingEdge)
 8000d9e:	d027      	beq.n	8000df0 <DoDCF77+0xac>
		if (DCF77HighSampleCounter > 40000 && DCF77HighSampleCounter < 90000)
 8000da0:	4e2b      	ldr	r6, [pc, #172]	; (8000e50 <DoDCF77+0x10c>)
 8000da2:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <DoDCF77+0x110>)
 8000da4:	6832      	ldr	r2, [r6, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	f24c 324e 	movw	r2, #49998	; 0xc34e
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d90a      	bls.n	8000dc6 <DoDCF77+0x82>
		DCF77LowSampleCounter = 0;
 8000db0:	4a24      	ldr	r2, [pc, #144]	; (8000e44 <DoDCF77+0x100>)
 8000db2:	4c25      	ldr	r4, [pc, #148]	; (8000e48 <DoDCF77+0x104>)
 8000db4:	6010      	str	r0, [r2, #0]
	if (DCF77BitCounter > 59)
 8000db6:	6823      	ldr	r3, [r4, #0]
	if (!DCF77In && DCF77LowSampleCounter < 100000)
 8000db8:	6811      	ldr	r1, [r2, #0]
 8000dba:	4e27      	ldr	r6, [pc, #156]	; (8000e58 <DoDCF77+0x114>)
 8000dbc:	42b1      	cmp	r1, r6
 8000dbe:	d8de      	bhi.n	8000d7e <DoDCF77+0x3a>
		DCF77LowSampleCounter++;
 8000dc0:	3101      	adds	r1, #1
 8000dc2:	6011      	str	r1, [r2, #0]
 8000dc4:	e7db      	b.n	8000d7e <DoDCF77+0x3a>
			if (DCF77BitCounter == 59)
 8000dc6:	4c20      	ldr	r4, [pc, #128]	; (8000e48 <DoDCF77+0x104>)
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	2b3b      	cmp	r3, #59	; 0x3b
 8000dcc:	d013      	beq.n	8000df6 <DoDCF77+0xb2>
		DCF77LowSampleCounter = 0;
 8000dce:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <DoDCF77+0x100>)
			DCF77BitCounter = 0;
 8000dd0:	6020      	str	r0, [r4, #0]
		DCF77LowSampleCounter = 0;
 8000dd2:	6010      	str	r0, [r2, #0]
	if (RisingEdge)
 8000dd4:	e7ef      	b.n	8000db6 <DoDCF77+0x72>
		RisingEdge = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <DoDCF77+0xf8>)
	if (DCF77In && DCF77HighSampleCounter < 100000)
 8000dda:	491d      	ldr	r1, [pc, #116]	; (8000e50 <DoDCF77+0x10c>)
		RisingEdge = 0;
 8000ddc:	7013      	strb	r3, [r2, #0]
	if (!DCF77In && LastDCF77In)
 8000dde:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <DoDCF77+0xfc>)
 8000de0:	7013      	strb	r3, [r2, #0]
	if (DCF77In && DCF77HighSampleCounter < 100000)
 8000de2:	680a      	ldr	r2, [r1, #0]
 8000de4:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <DoDCF77+0x114>)
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d912      	bls.n	8000e10 <DoDCF77+0xcc>
	if (DCF77BitCounter > 59)
 8000dea:	4c17      	ldr	r4, [pc, #92]	; (8000e48 <DoDCF77+0x104>)
 8000dec:	6823      	ldr	r3, [r4, #0]
 8000dee:	e7c6      	b.n	8000d7e <DoDCF77+0x3a>
 8000df0:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <DoDCF77+0x100>)
 8000df2:	4c15      	ldr	r4, [pc, #84]	; (8000e48 <DoDCF77+0x104>)
 8000df4:	e7df      	b.n	8000db6 <DoDCF77+0x72>
				DecodeDCF77();
 8000df6:	9001      	str	r0, [sp, #4]
 8000df8:	f7ff feec 	bl	8000bd4 <DecodeDCF77>
			DCF77BitCounter = 0;
 8000dfc:	9801      	ldr	r0, [sp, #4]
		DCF77LowSampleCounter = 0;
 8000dfe:	4a11      	ldr	r2, [pc, #68]	; (8000e44 <DoDCF77+0x100>)
	if (RisingEdge)
 8000e00:	783b      	ldrb	r3, [r7, #0]
			DCF77BitCounter = 0;
 8000e02:	6020      	str	r0, [r4, #0]
		DCF77LowSampleCounter = 0;
 8000e04:	6010      	str	r0, [r2, #0]
	if (RisingEdge)
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0d5      	beq.n	8000db6 <DoDCF77+0x72>
	if (DCF77BitCounter > 59)
 8000e0a:	4603      	mov	r3, r0
		DCF77HighSampleCounter = 0;
 8000e0c:	6030      	str	r0, [r6, #0]
 8000e0e:	e7d3      	b.n	8000db8 <DoDCF77+0x74>
	if (DCF77BitCounter > 59)
 8000e10:	4c0d      	ldr	r4, [pc, #52]	; (8000e48 <DoDCF77+0x104>)
		DCF77HighSampleCounter++;
 8000e12:	3201      	adds	r2, #1
	if (DCF77BitCounter > 59)
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	e7b1      	b.n	8000d7c <DoDCF77+0x38>
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
 8000e18:	4910      	ldr	r1, [pc, #64]	; (8000e5c <DoDCF77+0x118>)
				DCF77Message[DCF77BitCounter++] = 1;
 8000e1a:	4c0b      	ldr	r4, [pc, #44]	; (8000e48 <DoDCF77+0x104>)
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
 8000e1c:	4419      	add	r1, r3
 8000e1e:	f241 736e 	movw	r3, #5998	; 0x176e
 8000e22:	4299      	cmp	r1, r3
				DCF77Message[DCF77BitCounter++] = 1;
 8000e24:	6823      	ldr	r3, [r4, #0]
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
 8000e26:	d901      	bls.n	8000e2c <DoDCF77+0xe8>
	if (DCF77In && DCF77HighSampleCounter < 100000)
 8000e28:	4909      	ldr	r1, [pc, #36]	; (8000e50 <DoDCF77+0x10c>)
 8000e2a:	e7a7      	b.n	8000d7c <DoDCF77+0x38>
				DCF77Message[DCF77BitCounter++] = 1;
 8000e2c:	4907      	ldr	r1, [pc, #28]	; (8000e4c <DoDCF77+0x108>)
 8000e2e:	54ca      	strb	r2, [r1, r3]
 8000e30:	3301      	adds	r3, #1
 8000e32:	6023      	str	r3, [r4, #0]
 8000e34:	e7a0      	b.n	8000d78 <DoDCF77+0x34>
 8000e36:	bf00      	nop
 8000e38:	2400725e 	.word	0x2400725e
 8000e3c:	2400066b 	.word	0x2400066b
 8000e40:	24000668 	.word	0x24000668
 8000e44:	24000628 	.word	0x24000628
 8000e48:	2400061c 	.word	0x2400061c
 8000e4c:	2400062c 	.word	0x2400062c
 8000e50:	24000624 	.word	0x24000624
 8000e54:	ffff63bf 	.word	0xffff63bf
 8000e58:	0001869f 	.word	0x0001869f
 8000e5c:	ffffe88f 	.word	0xffffe88f

08000e60 <DCF77StatusDisplay>:

void DCF77StatusDisplay(void)
{
	static uint16_t DCF77DisplayCounter, DCF77DisplayPrescaler;

	if (DCF77DisplayPrescaler++ == 1)
 8000e60:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <DCF77StatusDisplay+0x64>)
{
 8000e62:	b538      	push	{r3, r4, r5, lr}
	if (DCF77DisplayPrescaler++ == 1)
 8000e64:	8813      	ldrh	r3, [r2, #0]
	{
		DCF77DisplayPrescaler = 0;
		DCF77DisplayCounter++;
 8000e66:	4c18      	ldr	r4, [pc, #96]	; (8000ec8 <DCF77StatusDisplay+0x68>)
	if (DCF77DisplayPrescaler++ == 1)
 8000e68:	1c59      	adds	r1, r3, #1
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	8011      	strh	r1, [r2, #0]
 8000e6e:	d019      	beq.n	8000ea4 <DCF77StatusDisplay+0x44>
	}
	if (DCF77DisplayCounter % 2 == 0)
 8000e70:	8823      	ldrh	r3, [r4, #0]
 8000e72:	f013 0201 	ands.w	r2, r3, #1
 8000e76:	d01e      	beq.n	8000eb6 <DCF77StatusDisplay+0x56>
		LED_GREEN_OFF;
	else
	{
		if (DCF77DisplayCounter <= (WSPRBeaconState + 1) * 2 )
 8000e78:	4d14      	ldr	r5, [pc, #80]	; (8000ecc <DCF77StatusDisplay+0x6c>)
			LED_GREEN_ON;
		else
			LED_GREEN_OFF;
 8000e7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e7e:	4814      	ldr	r0, [pc, #80]	; (8000ed0 <DCF77StatusDisplay+0x70>)
		if (DCF77DisplayCounter <= (WSPRBeaconState + 1) * 2 )
 8000e80:	782a      	ldrb	r2, [r5, #0]
 8000e82:	3201      	adds	r2, #1
 8000e84:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
			LED_GREEN_ON;
 8000e88:	bfd4      	ite	le
 8000e8a:	2201      	movle	r2, #1
			LED_GREEN_OFF;
 8000e8c:	2200      	movgt	r2, #0
 8000e8e:	f007 ffe3 	bl	8008e58 <HAL_GPIO_WritePin>
		if (DCF77DisplayCounter > (WSPRBeaconState + 3) * 2 )
 8000e92:	782b      	ldrb	r3, [r5, #0]
 8000e94:	8822      	ldrh	r2, [r4, #0]
 8000e96:	3303      	adds	r3, #3
 8000e98:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8000e9c:	dd01      	ble.n	8000ea2 <DCF77StatusDisplay+0x42>
			DCF77DisplayCounter = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	8023      	strh	r3, [r4, #0]
	}

}
 8000ea2:	bd38      	pop	{r3, r4, r5, pc}
		DCF77DisplayCounter++;
 8000ea4:	8823      	ldrh	r3, [r4, #0]
		DCF77DisplayPrescaler = 0;
 8000ea6:	2100      	movs	r1, #0
		DCF77DisplayCounter++;
 8000ea8:	3301      	adds	r3, #1
		DCF77DisplayPrescaler = 0;
 8000eaa:	8011      	strh	r1, [r2, #0]
		DCF77DisplayCounter++;
 8000eac:	b29b      	uxth	r3, r3
	if (DCF77DisplayCounter % 2 == 0)
 8000eae:	f013 0201 	ands.w	r2, r3, #1
		DCF77DisplayCounter++;
 8000eb2:	8023      	strh	r3, [r4, #0]
	if (DCF77DisplayCounter % 2 == 0)
 8000eb4:	d1e0      	bne.n	8000e78 <DCF77StatusDisplay+0x18>
		LED_GREEN_OFF;
 8000eb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <DCF77StatusDisplay+0x70>)
}
 8000ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LED_GREEN_OFF;
 8000ec0:	f007 bfca 	b.w	8008e58 <HAL_GPIO_WritePin>
 8000ec4:	24000622 	.word	0x24000622
 8000ec8:	24000620 	.word	0x24000620
 8000ecc:	240083fd 	.word	0x240083fd
 8000ed0:	58020400 	.word	0x58020400

08000ed4 <Load_Presets>:
// Load from the Presets table
void Load_Presets(void)
{
	int k;

	for(k=0; k<MAXPRESETS; k++)
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <Load_Presets+0x40>)
{
 8000ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eda:	4c0f      	ldr	r4, [pc, #60]	; (8000f18 <Load_Presets+0x44>)
 8000edc:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 8000ee0:	4f0e      	ldr	r7, [pc, #56]	; (8000f1c <Load_Presets+0x48>)
 8000ee2:	4e0f      	ldr	r6, [pc, #60]	; (8000f20 <Load_Presets+0x4c>)
 8000ee4:	4d0f      	ldr	r5, [pc, #60]	; (8000f24 <Load_Presets+0x50>)
	{
		strcpy(psets[k].name, pNames[k]);
 8000ee6:	4621      	mov	r1, r4
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f010 fbc7 	bl	801167c <strcpy>
 8000eee:	4603      	mov	r3, r0
		psets[k].freq = pFreqs[k];
 8000ef0:	f857 0b04 	ldr.w	r0, [r7], #4
	for(k=0; k<MAXPRESETS; k++)
 8000ef4:	3410      	adds	r4, #16
 8000ef6:	3318      	adds	r3, #24
		psets[k].mode = pModes[k];
 8000ef8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		psets[k].freq = pFreqs[k];
 8000efc:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 8000f00:	f815 2f01 	ldrb.w	r2, [r5, #1]!
	for(k=0; k<MAXPRESETS; k++)
 8000f04:	4543      	cmp	r3, r8
		psets[k].mode = pModes[k];
 8000f06:	f803 1c04 	strb.w	r1, [r3, #-4]
		psets[k].bw   = pBws[k];
 8000f0a:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 8000f0e:	d1ea      	bne.n	8000ee6 <Load_Presets+0x12>
	}
}
 8000f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f14:	2400b848 	.word	0x2400b848
 8000f18:	24000120 	.word	0x24000120
 8000f1c:	0801af40 	.word	0x0801af40
 8000f20:	0801af77 	.word	0x0801af77
 8000f24:	0801af2f 	.word	0x0801af2f

08000f28 <SetBW>:
// Load the FFT mask according to the mode and the bandwidth chosen,
// and change the color of the buttons to indicate the active bandwidth
void SetBW(/*WM_HWIN ptr,*/ Bwidth newbw)
{
	CurrentBW = newbw;
	switch(CurrentMode)
 8000f28:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <SetBW+0x8c>)
	CurrentBW = newbw;
 8000f2a:	4a23      	ldr	r2, [pc, #140]	; (8000fb8 <SetBW+0x90>)
{
 8000f2c:	b410      	push	{r4}
	switch(CurrentMode)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
	CurrentBW = newbw;
 8000f30:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d83a      	bhi.n	8000fac <SetBW+0x84>
 8000f36:	e8df f003 	tbb	[pc, r3]
 8000f3a:	232b      	.short	0x232b
 8000f3c:	0210      	.short	0x0210

		break;

	case CW  :

		bw[CW] = newbw;
 8000f3e:	4c1f      	ldr	r4, [pc, #124]	; (8000fbc <SetBW+0x94>)
		CWindex = (newbw == Narrow) ? 0 : 1;
		CWindex = 0; // TODO toglimi
 8000f40:	2100      	movs	r1, #0
 8000f42:	4a1f      	ldr	r2, [pc, #124]	; (8000fc0 <SetBW+0x98>)
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[CW] = newbw;
 8000f48:	70e0      	strb	r0, [r4, #3]
		CWindex = 0; // TODO toglimi
 8000f4a:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000f4c:	481d      	ldr	r0, [pc, #116]	; (8000fc4 <SetBW+0x9c>)
 8000f4e:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <SetBW+0xa0>)
 8000f50:	491e      	ldr	r1, [pc, #120]	; (8000fcc <SetBW+0xa4>)
		break;

	default :
		break;
	}
}	
 8000f52:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000f56:	f001 b8ff 	b.w	8002158 <SDR_2R_toC_f32>
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000f5a:	1e02      	subs	r2, r0, #0
		bw[USB] = newbw;
 8000f5c:	4917      	ldr	r1, [pc, #92]	; (8000fbc <SetBW+0x94>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <SetBW+0xa8>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000f60:	bf18      	it	ne
 8000f62:	2201      	movne	r2, #1
		USBindex = 0; // TODO toglimi
 8000f64:	4c1b      	ldr	r4, [pc, #108]	; (8000fd4 <SetBW+0xac>)
		bw[USB] = newbw;
 8000f66:	7088      	strb	r0, [r1, #2]
		USBindex = 0; // TODO toglimi
 8000f68:	2000      	movs	r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000f6a:	801a      	strh	r2, [r3, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000f6c:	491a      	ldr	r1, [pc, #104]	; (8000fd8 <SetBW+0xb0>)
 8000f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
		USBindex = 0; // TODO toglimi
 8000f72:	8020      	strh	r0, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <SetBW+0xa0>)
 8000f76:	4819      	ldr	r0, [pc, #100]	; (8000fdc <SetBW+0xb4>)
}	
 8000f78:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000f7c:	f001 b8ec 	b.w	8002158 <SDR_2R_toC_f32>
		bw[LSB] = newbw;
 8000f80:	490e      	ldr	r1, [pc, #56]	; (8000fbc <SetBW+0x94>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000f82:	1e02      	subs	r2, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <SetBW+0xa8>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000f86:	bf18      	it	ne
 8000f88:	2201      	movne	r2, #1
		LSBindex = 0; // TODO toglimi
 8000f8a:	4c15      	ldr	r4, [pc, #84]	; (8000fe0 <SetBW+0xb8>)
		bw[LSB] = newbw;
 8000f8c:	7048      	strb	r0, [r1, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000f8e:	e7eb      	b.n	8000f68 <SetBW+0x40>
		bw[AM] = newbw;
 8000f90:	4c0a      	ldr	r4, [pc, #40]	; (8000fbc <SetBW+0x94>)
		AMindex = 0; // TODO toglimi
 8000f92:	2100      	movs	r1, #0
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <SetBW+0xa8>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[AM] = newbw;
 8000f9a:	7020      	strb	r0, [r4, #0]
		AMindex = 0; // TODO toglimi
 8000f9c:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000f9e:	4811      	ldr	r0, [pc, #68]	; (8000fe4 <SetBW+0xbc>)
 8000fa0:	4a09      	ldr	r2, [pc, #36]	; (8000fc8 <SetBW+0xa0>)
 8000fa2:	4911      	ldr	r1, [pc, #68]	; (8000fe8 <SetBW+0xc0>)
}	
 8000fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000fa8:	f001 b8d6 	b.w	8002158 <SDR_2R_toC_f32>
}	
 8000fac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	24002018 	.word	0x24002018
 8000fb8:	24002017 	.word	0x24002017
 8000fbc:	24008c30 	.word	0x24008c30
 8000fc0:	24002014 	.word	0x24002014
 8000fc4:	08017f30 	.word	0x08017f30
 8000fc8:	20004000 	.word	0x20004000
 8000fcc:	08016f30 	.word	0x08016f30
 8000fd0:	240017e0 	.word	0x240017e0
 8000fd4:	240072f4 	.word	0x240072f4
 8000fd8:	08018f30 	.word	0x08018f30
 8000fdc:	08019f30 	.word	0x08019f30
 8000fe0:	2400725c 	.word	0x2400725c
 8000fe4:	08015f30 	.word	0x08015f30
 8000fe8:	08014f30 	.word	0x08014f30

08000fec <SetAGC>:
// Change the AGC constants according to the mode and the AGC chosen,
// and change the color of the buttons to indicate the active AGC speed
void SetAGC(/*WM_HWIN ptr,*/ Agctype newAGC)
{
	CurrentAGC =newAGC;
	switch(CurrentMode)
 8000fec:	4b25      	ldr	r3, [pc, #148]	; (8001084 <SetAGC+0x98>)
	CurrentAGC =newAGC;
 8000fee:	4a26      	ldr	r2, [pc, #152]	; (8001088 <SetAGC+0x9c>)
{
 8000ff0:	b410      	push	{r4}
	switch(CurrentMode)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
	CurrentAGC =newAGC;
 8000ff4:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d811      	bhi.n	800101e <SetAGC+0x32>
 8000ffa:	e8df f003 	tbb	[pc, r3]
 8000ffe:	2333      	.short	0x2333
 8001000:	0213      	.short	0x0213
	case USB :      agc[USB] = newAGC;
	Decay[USB]  = AGC_decay[newAGC];
	Hcount[USB] = Hangcount[newAGC]; break;

	case CW :       agc[CW] = newAGC;
	Decay[CW]   = AGC_decay[newAGC];
 8001002:	4b22      	ldr	r3, [pc, #136]	; (800108c <SetAGC+0xa0>)
	case CW :       agc[CW] = newAGC;
 8001004:	4922      	ldr	r1, [pc, #136]	; (8001090 <SetAGC+0xa4>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001006:	4c23      	ldr	r4, [pc, #140]	; (8001094 <SetAGC+0xa8>)
	Decay[CW]   = AGC_decay[newAGC];
 8001008:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <SetAGC+0xac>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 800100e:	f834 c010 	ldrh.w	ip, [r4, r0, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8001012:	681b      	ldr	r3, [r3, #0]
	case CW :       agc[CW] = newAGC;
 8001014:	70c8      	strb	r0, [r1, #3]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001016:	4921      	ldr	r1, [pc, #132]	; (800109c <SetAGC+0xb0>)
	Decay[CW]   = AGC_decay[newAGC];
 8001018:	60d3      	str	r3, [r2, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 800101a:	f8a1 c006 	strh.w	ip, [r1, #6]
	}
	//  ChangeColor(ptr, hFAST, (newAGC == Fast) ? GUI_RED   : GUI_BLACK);
	//  ChangeColor(ptr, hSLOW, (newAGC == Slow) ? GUI_RED   : GUI_BLACK);
}	
 800101e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001022:	4770      	bx	lr
	Decay[USB]  = AGC_decay[newAGC];
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <SetAGC+0xa0>)
	case USB :      agc[USB] = newAGC;
 8001026:	491a      	ldr	r1, [pc, #104]	; (8001090 <SetAGC+0xa4>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8001028:	4c1a      	ldr	r4, [pc, #104]	; (8001094 <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 800102a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case USB :      agc[USB] = newAGC;
 800102e:	7088      	strb	r0, [r1, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8001030:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8001034:	4a18      	ldr	r2, [pc, #96]	; (8001098 <SetAGC+0xac>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8001036:	4919      	ldr	r1, [pc, #100]	; (800109c <SetAGC+0xb0>)
	Decay[USB]  = AGC_decay[newAGC];
 8001038:	681b      	ldr	r3, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 800103a:	808c      	strh	r4, [r1, #4]
	Decay[USB]  = AGC_decay[newAGC];
 800103c:	6093      	str	r3, [r2, #8]
}	
 800103e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001042:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <SetAGC+0xa0>)
	case LSB :      agc[LSB] = newAGC;
 8001046:	4912      	ldr	r1, [pc, #72]	; (8001090 <SetAGC+0xa4>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001048:	4c12      	ldr	r4, [pc, #72]	; (8001094 <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 800104a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case LSB :      agc[LSB] = newAGC;
 800104e:	7048      	strb	r0, [r1, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001050:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8001054:	4a10      	ldr	r2, [pc, #64]	; (8001098 <SetAGC+0xac>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001056:	4911      	ldr	r1, [pc, #68]	; (800109c <SetAGC+0xb0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8001058:	681b      	ldr	r3, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 800105a:	804c      	strh	r4, [r1, #2]
	Decay[LSB]  = AGC_decay[newAGC];
 800105c:	6053      	str	r3, [r2, #4]
}	
 800105e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001062:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <SetAGC+0xa0>)
	case AM :       agc[AM] = newAGC;
 8001066:	490a      	ldr	r1, [pc, #40]	; (8001090 <SetAGC+0xa4>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001068:	4c0a      	ldr	r4, [pc, #40]	; (8001094 <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 800106a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case AM :       agc[AM] = newAGC;
 800106e:	7008      	strb	r0, [r1, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001070:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8001074:	4a08      	ldr	r2, [pc, #32]	; (8001098 <SetAGC+0xac>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001076:	4909      	ldr	r1, [pc, #36]	; (800109c <SetAGC+0xb0>)
	Decay[AM]   = AGC_decay[newAGC];
 8001078:	681b      	ldr	r3, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 800107a:	800c      	strh	r4, [r1, #0]
	Decay[AM]   = AGC_decay[newAGC];
 800107c:	6013      	str	r3, [r2, #0]
}	
 800107e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	24002018 	.word	0x24002018
 8001088:	24002016 	.word	0x24002016
 800108c:	240017d8 	.word	0x240017d8
 8001090:	24008c20 	.word	0x24008c20
 8001094:	24006248 	.word	0x24006248
 8001098:	24002020 	.word	0x24002020
 800109c:	2400624c 	.word	0x2400624c

080010a0 <Tune_Preset>:
{
 80010a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOfreq = psets[Idx].freq;
 80010a4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80010a8:	4e47      	ldr	r6, [pc, #284]	; (80011c8 <Tune_Preset+0x128>)
 80010aa:	4a48      	ldr	r2, [pc, #288]	; (80011cc <Tune_Preset+0x12c>)
{
 80010ac:	4604      	mov	r4, r0
	LOfreq = psets[Idx].freq;
 80010ae:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	CurrentMode = newmode;
 80010b2:	4f47      	ldr	r7, [pc, #284]	; (80011d0 <Tune_Preset+0x130>)
	LOfreq = psets[Idx].freq;
 80010b4:	0045      	lsls	r5, r0, #1
 80010b6:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 80010b8:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 80010ba:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 80010bc:	703b      	strb	r3, [r7, #0]

	switch(CurrentMode)
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d87b      	bhi.n	80011ba <Tune_Preset+0x11a>
 80010c2:	e8df f003 	tbb	[pc, r3]
 80010c6:	626e      	.short	0x626e
 80010c8:	0256      	.short	0x0256
	case USB :
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80010ca:	f8df 8140 	ldr.w	r8, [pc, #320]	; 800120c <Tune_Preset+0x16c>
 80010ce:	f898 0003 	ldrb.w	r0, [r8, #3]
 80010d2:	f7ff ff29 	bl	8000f28 <SetBW>
 80010d6:	4b3f      	ldr	r3, [pc, #252]	; (80011d4 <Tune_Preset+0x134>)
 80010d8:	78d8      	ldrb	r0, [r3, #3]
 80010da:	f7ff ff87 	bl	8000fec <SetAGC>
	switch(CurrentMode)
 80010de:	783a      	ldrb	r2, [r7, #0]
	SetBW( psets[Idx].bw);
 80010e0:	4425      	add	r5, r4
	CurrentBW = newbw;
 80010e2:	493d      	ldr	r1, [pc, #244]	; (80011d8 <Tune_Preset+0x138>)
	SetBW( psets[Idx].bw);
 80010e4:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 80010e8:	7d6b      	ldrb	r3, [r5, #21]
	CurrentBW = newbw;
 80010ea:	700b      	strb	r3, [r1, #0]
	switch(CurrentMode)
 80010ec:	2a03      	cmp	r2, #3
 80010ee:	d80f      	bhi.n	8001110 <Tune_Preset+0x70>
 80010f0:	e8df f002 	tbb	[pc, r2]
 80010f4:	02173629 	.word	0x02173629
		CWindex = 0; // TODO toglimi
 80010f8:	4a38      	ldr	r2, [pc, #224]	; (80011dc <Tune_Preset+0x13c>)
 80010fa:	2100      	movs	r1, #0
		bw[CW] = newbw;
 80010fc:	f888 3003 	strb.w	r3, [r8, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8001100:	f44f 6380 	mov.w	r3, #1024	; 0x400
		CWindex = 0; // TODO toglimi
 8001104:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8001106:	4836      	ldr	r0, [pc, #216]	; (80011e0 <Tune_Preset+0x140>)
 8001108:	4a36      	ldr	r2, [pc, #216]	; (80011e4 <Tune_Preset+0x144>)
 800110a:	4937      	ldr	r1, [pc, #220]	; (80011e8 <Tune_Preset+0x148>)
 800110c:	f001 f824 	bl	8002158 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8001110:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001114:	4835      	ldr	r0, [pc, #212]	; (80011ec <Tune_Preset+0x14c>)
 8001116:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
}
 800111a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 800111e:	f010 baad 	b.w	801167c <strcpy>
		bw[USB] = newbw;
 8001122:	f888 3002 	strb.w	r3, [r8, #2]
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001126:	3b00      	subs	r3, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001128:	4a31      	ldr	r2, [pc, #196]	; (80011f0 <Tune_Preset+0x150>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 800112a:	bf18      	it	ne
 800112c:	2301      	movne	r3, #1
		AMindex = (newbw == Narrow) ? 0 : 1;
 800112e:	8013      	strh	r3, [r2, #0]
		USBindex = 0; // TODO toglimi
 8001130:	4a30      	ldr	r2, [pc, #192]	; (80011f4 <Tune_Preset+0x154>)
 8001132:	2100      	movs	r1, #0
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8001134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001138:	482f      	ldr	r0, [pc, #188]	; (80011f8 <Tune_Preset+0x158>)
		USBindex = 0; // TODO toglimi
 800113a:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 800113c:	4a29      	ldr	r2, [pc, #164]	; (80011e4 <Tune_Preset+0x144>)
 800113e:	492f      	ldr	r1, [pc, #188]	; (80011fc <Tune_Preset+0x15c>)
 8001140:	f001 f80a 	bl	8002158 <SDR_2R_toC_f32>
		break;
 8001144:	e7e4      	b.n	8001110 <Tune_Preset+0x70>
		AMindex = 0; // TODO toglimi
 8001146:	4a2a      	ldr	r2, [pc, #168]	; (80011f0 <Tune_Preset+0x150>)
 8001148:	2100      	movs	r1, #0
		bw[AM] = newbw;
 800114a:	f888 3000 	strb.w	r3, [r8]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 800114e:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 8001152:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8001154:	482a      	ldr	r0, [pc, #168]	; (8001200 <Tune_Preset+0x160>)
 8001156:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <Tune_Preset+0x144>)
 8001158:	492a      	ldr	r1, [pc, #168]	; (8001204 <Tune_Preset+0x164>)
 800115a:	f000 fffd 	bl	8002158 <SDR_2R_toC_f32>
		break;
 800115e:	e7d7      	b.n	8001110 <Tune_Preset+0x70>
		bw[LSB] = newbw;
 8001160:	f888 3001 	strb.w	r3, [r8, #1]
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001164:	3b00      	subs	r3, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001166:	4a22      	ldr	r2, [pc, #136]	; (80011f0 <Tune_Preset+0x150>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001168:	bf18      	it	ne
 800116a:	2301      	movne	r3, #1
		AMindex = (newbw == Narrow) ? 0 : 1;
 800116c:	8013      	strh	r3, [r2, #0]
		LSBindex = 0; // TODO toglimi
 800116e:	4a26      	ldr	r2, [pc, #152]	; (8001208 <Tune_Preset+0x168>)
 8001170:	e7df      	b.n	8001132 <Tune_Preset+0x92>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001172:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800120c <Tune_Preset+0x16c>
 8001176:	f898 0002 	ldrb.w	r0, [r8, #2]
 800117a:	f7ff fed5 	bl	8000f28 <SetBW>
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <Tune_Preset+0x134>)
 8001180:	7898      	ldrb	r0, [r3, #2]
 8001182:	f7ff ff33 	bl	8000fec <SetAGC>
	switch(CurrentMode)
 8001186:	783a      	ldrb	r2, [r7, #0]
		break;
 8001188:	e7aa      	b.n	80010e0 <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 800118a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800120c <Tune_Preset+0x16c>
 800118e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8001192:	f7ff fec9 	bl	8000f28 <SetBW>
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <Tune_Preset+0x134>)
 8001198:	7858      	ldrb	r0, [r3, #1]
 800119a:	f7ff ff27 	bl	8000fec <SetAGC>
	switch(CurrentMode)
 800119e:	783a      	ldrb	r2, [r7, #0]
		break;
 80011a0:	e79e      	b.n	80010e0 <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 80011a2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800120c <Tune_Preset+0x16c>
 80011a6:	f898 0000 	ldrb.w	r0, [r8]
 80011aa:	f7ff febd 	bl	8000f28 <SetBW>
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <Tune_Preset+0x134>)
 80011b0:	7818      	ldrb	r0, [r3, #0]
 80011b2:	f7ff ff1b 	bl	8000fec <SetAGC>
	switch(CurrentMode)
 80011b6:	783a      	ldrb	r2, [r7, #0]
		break;

	default :
		break;
	}
}	
 80011b8:	e792      	b.n	80010e0 <Tune_Preset+0x40>
	SetBW( psets[Idx].bw);
 80011ba:	2318      	movs	r3, #24
	CurrentBW = newbw;
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <Tune_Preset+0x138>)
	SetBW( psets[Idx].bw);
 80011be:	fb03 6300 	mla	r3, r3, r0, r6
	CurrentBW = newbw;
 80011c2:	7d5b      	ldrb	r3, [r3, #21]
 80011c4:	7013      	strb	r3, [r2, #0]
	switch(CurrentMode)
 80011c6:	e7a3      	b.n	8001110 <Tune_Preset+0x70>
 80011c8:	2400b848 	.word	0x2400b848
 80011cc:	24007258 	.word	0x24007258
 80011d0:	24002018 	.word	0x24002018
 80011d4:	24008c20 	.word	0x24008c20
 80011d8:	24002017 	.word	0x24002017
 80011dc:	24002014 	.word	0x24002014
 80011e0:	08017f30 	.word	0x08017f30
 80011e4:	20004000 	.word	0x20004000
 80011e8:	08016f30 	.word	0x08016f30
 80011ec:	2400b820 	.word	0x2400b820
 80011f0:	240017e0 	.word	0x240017e0
 80011f4:	240072f4 	.word	0x240072f4
 80011f8:	08019f30 	.word	0x08019f30
 80011fc:	08018f30 	.word	0x08018f30
 8001200:	08015f30 	.word	0x08015f30
 8001204:	08014f30 	.word	0x08014f30
 8001208:	2400725c 	.word	0x2400725c
 800120c:	24008c30 	.word	0x24008c30

08001210 <SetMode>:
{
 8001210:	b508      	push	{r3, lr}
	CurrentMode = newmode;
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <SetMode+0x64>)
 8001214:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 8001216:	2803      	cmp	r0, #3
 8001218:	d82b      	bhi.n	8001272 <SetMode+0x62>
 800121a:	e8df f000 	tbb	[pc, r0]
 800121e:	1620      	.short	0x1620
 8001220:	020c      	.short	0x020c
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <SetMode+0x68>)
 8001224:	78d8      	ldrb	r0, [r3, #3]
 8001226:	f7ff fe7f 	bl	8000f28 <SetBW>
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <SetMode+0x6c>)
 800122c:	78d8      	ldrb	r0, [r3, #3]
}	
 800122e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001232:	f7ff bedb 	b.w	8000fec <SetAGC>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <SetMode+0x68>)
 8001238:	7898      	ldrb	r0, [r3, #2]
 800123a:	f7ff fe75 	bl	8000f28 <SetBW>
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <SetMode+0x6c>)
 8001240:	7898      	ldrb	r0, [r3, #2]
}	
 8001242:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001246:	f7ff bed1 	b.w	8000fec <SetAGC>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <SetMode+0x68>)
 800124c:	7858      	ldrb	r0, [r3, #1]
 800124e:	f7ff fe6b 	bl	8000f28 <SetBW>
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <SetMode+0x6c>)
 8001254:	7858      	ldrb	r0, [r3, #1]
}	
 8001256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 800125a:	f7ff bec7 	b.w	8000fec <SetAGC>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <SetMode+0x68>)
 8001260:	7818      	ldrb	r0, [r3, #0]
 8001262:	f7ff fe61 	bl	8000f28 <SetBW>
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <SetMode+0x6c>)
 8001268:	7818      	ldrb	r0, [r3, #0]
}	
 800126a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 800126e:	f7ff bebd 	b.w	8000fec <SetAGC>
}	
 8001272:	bd08      	pop	{r3, pc}
 8001274:	24002018 	.word	0x24002018
 8001278:	24008c30 	.word	0x24008c30
 800127c:	24008c20 	.word	0x24008c20

08001280 <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	if (idx == 9)
 8001280:	2809      	cmp	r0, #9
{
 8001282:	b508      	push	{r3, lr}
	if (idx == 9)
 8001284:	d012      	beq.n	80012ac <SetFstep+0x2c>
		Fstep = 9000;  // MW Channel for Europe
	else
		Fstep = pow(10, 5 - idx);
 8001286:	f1c0 0005 	rsb	r0, r0, #5
 800128a:	ee07 0a90 	vmov	s15, r0
 800128e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80012b8 <SetFstep+0x38>
 8001292:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001296:	ee27 0b00 	vmul.f64	d0, d7, d0
 800129a:	f012 fcbd 	bl	8013c18 <exp>
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <SetFstep+0x40>)
 80012a0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 80012a4:	ee17 3a90 	vmov	r3, s15
 80012a8:	6013      	str	r3, [r2, #0]
}	
 80012aa:	bd08      	pop	{r3, pc}
		Fstep = 9000;  // MW Channel for Europe
 80012ac:	f242 3328 	movw	r3, #9000	; 0x2328
 80012b0:	4a03      	ldr	r2, [pc, #12]	; (80012c0 <SetFstep+0x40>)
 80012b2:	6013      	str	r3, [r2, #0]
}	
 80012b4:	bd08      	pop	{r3, pc}
 80012b6:	bf00      	nop
 80012b8:	bbb55516 	.word	0xbbb55516
 80012bc:	40026bb1 	.word	0x40026bb1
 80012c0:	24006240 	.word	0x24006240

080012c4 <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked(uint16_t Nsteps)
{	
	LOfreq += Fstep * (float)Nsteps / 2.0;
 80012c4:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <FplusClicked+0xb4>)
 80012c6:	ee07 0a90 	vmov	s15, r0
 80012ca:	4a2c      	ldr	r2, [pc, #176]	; (800137c <FplusClicked+0xb8>)
 80012cc:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80012d0:	ed93 6a00 	vldr	s12, [r3]
 80012d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012d8:	ed92 7a00 	vldr	s14, [r2]
 80012dc:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80012e0:	4b27      	ldr	r3, [pc, #156]	; (8001380 <FplusClicked+0xbc>)
	LOfreq += Fstep * (float)Nsteps / 2.0;
 80012e2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	psets[0].bw = bw[CurrentMode];
 80012e6:	4927      	ldr	r1, [pc, #156]	; (8001384 <FplusClicked+0xc0>)
	LOfreq  = min(LOfreq, 50000000.f);
 80012e8:	eddf 5a27 	vldr	s11, [pc, #156]	; 8001388 <FplusClicked+0xc4>
	LOfreq += Fstep * (float)Nsteps / 2.0;
 80012ec:	ee26 6a26 	vmul.f32	s12, s12, s13
{	
 80012f0:	b510      	push	{r4, lr}
	LOfreq += Fstep * (float)Nsteps / 2.0;
 80012f2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4c24      	ldr	r4, [pc, #144]	; (800138c <FplusClicked+0xc8>)
	psets[0].bw = bw[CurrentMode];
 80012fa:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 80012fc:	eea6 7b04 	vfma.f64	d7, d6, d4
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001300:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 8001302:	7560      	strb	r0, [r4, #21]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8001304:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = min(LOfreq, 50000000.f);
 8001308:	fe87 7a65 	vminnm.f32	s14, s14, s11
 800130c:	ed82 7a00 	vstr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001310:	ed84 7a04 	vstr	s14, [r4, #16]
	switch(CurrentMode)
 8001314:	2b03      	cmp	r3, #3
 8001316:	d80b      	bhi.n	8001330 <FplusClicked+0x6c>
 8001318:	e8df f003 	tbb	[pc, r3]
 800131c:	02121b24 	.word	0x02121b24
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001320:	78c8      	ldrb	r0, [r1, #3]
 8001322:	f7ff fe01 	bl	8000f28 <SetBW>
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <FplusClicked+0xcc>)
 8001328:	78d8      	ldrb	r0, [r3, #3]
 800132a:	f7ff fe5f 	bl	8000fec <SetAGC>
	SetBW( psets[Idx].bw);
 800132e:	7d60      	ldrb	r0, [r4, #21]
 8001330:	f7ff fdfa 	bl	8000f28 <SetBW>
	strcpy(msg, psets[Idx].name);
 8001334:	4915      	ldr	r1, [pc, #84]	; (800138c <FplusClicked+0xc8>)
 8001336:	4817      	ldr	r0, [pc, #92]	; (8001394 <FplusClicked+0xd0>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 8001338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 800133c:	f010 b99e 	b.w	801167c <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001340:	7888      	ldrb	r0, [r1, #2]
 8001342:	f7ff fdf1 	bl	8000f28 <SetBW>
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <FplusClicked+0xcc>)
 8001348:	7898      	ldrb	r0, [r3, #2]
 800134a:	f7ff fe4f 	bl	8000fec <SetAGC>
	SetBW( psets[Idx].bw);
 800134e:	7d60      	ldrb	r0, [r4, #21]
		break;
 8001350:	e7ee      	b.n	8001330 <FplusClicked+0x6c>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001352:	7848      	ldrb	r0, [r1, #1]
 8001354:	f7ff fde8 	bl	8000f28 <SetBW>
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <FplusClicked+0xcc>)
 800135a:	7858      	ldrb	r0, [r3, #1]
 800135c:	f7ff fe46 	bl	8000fec <SetAGC>
	SetBW( psets[Idx].bw);
 8001360:	7d60      	ldrb	r0, [r4, #21]
		break;
 8001362:	e7e5      	b.n	8001330 <FplusClicked+0x6c>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001364:	7808      	ldrb	r0, [r1, #0]
 8001366:	f7ff fddf 	bl	8000f28 <SetBW>
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <FplusClicked+0xcc>)
 800136c:	7818      	ldrb	r0, [r3, #0]
 800136e:	f7ff fe3d 	bl	8000fec <SetAGC>
	SetBW( psets[Idx].bw);
 8001372:	7d60      	ldrb	r0, [r4, #21]
}	
 8001374:	e7dc      	b.n	8001330 <FplusClicked+0x6c>
 8001376:	bf00      	nop
 8001378:	24006240 	.word	0x24006240
 800137c:	24007258 	.word	0x24007258
 8001380:	24002018 	.word	0x24002018
 8001384:	24008c30 	.word	0x24008c30
 8001388:	4c3ebc20 	.word	0x4c3ebc20
 800138c:	2400b848 	.word	0x2400b848
 8001390:	24008c20 	.word	0x24008c20
 8001394:	2400b820 	.word	0x2400b820

08001398 <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked(uint16_t Nsteps)
{	
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001398:	4b2c      	ldr	r3, [pc, #176]	; (800144c <FminusClicked+0xb4>)
 800139a:	ee07 0a90 	vmov	s15, r0
 800139e:	4a2c      	ldr	r2, [pc, #176]	; (8001450 <FminusClicked+0xb8>)
 80013a0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80013a4:	ed93 6a00 	vldr	s12, [r3]
 80013a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013ac:	ed92 7a00 	vldr	s14, [r2]
 80013b0:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <FminusClicked+0xbc>)
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80013b6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	psets[0].bw = bw[CurrentMode];
 80013ba:	4927      	ldr	r1, [pc, #156]	; (8001458 <FminusClicked+0xc0>)
	LOfreq  = max(LOfreq, 8000.f);
 80013bc:	eddf 5a27 	vldr	s11, [pc, #156]	; 800145c <FminusClicked+0xc4>
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80013c0:	ee26 6a26 	vmul.f32	s12, s12, s13
{	
 80013c4:	b510      	push	{r4, lr}
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80013c6:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4c24      	ldr	r4, [pc, #144]	; (8001460 <FminusClicked+0xc8>)
	psets[0].bw = bw[CurrentMode];
 80013ce:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80013d0:	eea6 7b44 	vfms.f64	d7, d6, d4
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80013d4:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 80013d6:	7560      	strb	r0, [r4, #21]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80013d8:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = max(LOfreq, 8000.f);
 80013dc:	fe87 7a25 	vmaxnm.f32	s14, s14, s11
 80013e0:	ed82 7a00 	vstr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80013e4:	ed84 7a04 	vstr	s14, [r4, #16]
	switch(CurrentMode)
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d80b      	bhi.n	8001404 <FminusClicked+0x6c>
 80013ec:	e8df f003 	tbb	[pc, r3]
 80013f0:	02121b24 	.word	0x02121b24
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80013f4:	78c8      	ldrb	r0, [r1, #3]
 80013f6:	f7ff fd97 	bl	8000f28 <SetBW>
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <FminusClicked+0xcc>)
 80013fc:	78d8      	ldrb	r0, [r3, #3]
 80013fe:	f7ff fdf5 	bl	8000fec <SetAGC>
	SetBW( psets[Idx].bw);
 8001402:	7d60      	ldrb	r0, [r4, #21]
 8001404:	f7ff fd90 	bl	8000f28 <SetBW>
	strcpy(msg, psets[Idx].name);
 8001408:	4915      	ldr	r1, [pc, #84]	; (8001460 <FminusClicked+0xc8>)
 800140a:	4817      	ldr	r0, [pc, #92]	; (8001468 <FminusClicked+0xd0>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 800140c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8001410:	f010 b934 	b.w	801167c <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001414:	7888      	ldrb	r0, [r1, #2]
 8001416:	f7ff fd87 	bl	8000f28 <SetBW>
 800141a:	4b12      	ldr	r3, [pc, #72]	; (8001464 <FminusClicked+0xcc>)
 800141c:	7898      	ldrb	r0, [r3, #2]
 800141e:	f7ff fde5 	bl	8000fec <SetAGC>
	SetBW( psets[Idx].bw);
 8001422:	7d60      	ldrb	r0, [r4, #21]
		break;
 8001424:	e7ee      	b.n	8001404 <FminusClicked+0x6c>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001426:	7848      	ldrb	r0, [r1, #1]
 8001428:	f7ff fd7e 	bl	8000f28 <SetBW>
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <FminusClicked+0xcc>)
 800142e:	7858      	ldrb	r0, [r3, #1]
 8001430:	f7ff fddc 	bl	8000fec <SetAGC>
	SetBW( psets[Idx].bw);
 8001434:	7d60      	ldrb	r0, [r4, #21]
		break;
 8001436:	e7e5      	b.n	8001404 <FminusClicked+0x6c>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001438:	7808      	ldrb	r0, [r1, #0]
 800143a:	f7ff fd75 	bl	8000f28 <SetBW>
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <FminusClicked+0xcc>)
 8001440:	7818      	ldrb	r0, [r3, #0]
 8001442:	f7ff fdd3 	bl	8000fec <SetAGC>
	SetBW( psets[Idx].bw);
 8001446:	7d60      	ldrb	r0, [r4, #21]
}	
 8001448:	e7dc      	b.n	8001404 <FminusClicked+0x6c>
 800144a:	bf00      	nop
 800144c:	24006240 	.word	0x24006240
 8001450:	24007258 	.word	0x24007258
 8001454:	24002018 	.word	0x24002018
 8001458:	24008c30 	.word	0x24008c30
 800145c:	45fa0000 	.word	0x45fa0000
 8001460:	2400b848 	.word	0x2400b848
 8001464:	24008c20 	.word	0x24008c20
 8001468:	2400b820 	.word	0x2400b820

0800146c <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop

08001470 <HAL_GPIO_EXTI_Callback>:
// This is the handler of the software interrupt generated by the highest
// priority task that handles the interrupts generated by DMA2 Stream 0,
// when an ADC buffer is filled
//void EXTI1_IRQHandler()
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8001470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // set bit 8 of GPIOF high, to be observed with an oscilloscope


	// copy into work buffers the data received by CIC decimator
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8001474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001478:	498b      	ldr	r1, [pc, #556]	; (80016a8 <HAL_GPIO_EXTI_Callback+0x238>)
 800147a:	488c      	ldr	r0, [pc, #560]	; (80016ac <HAL_GPIO_EXTI_Callback+0x23c>)
	 */

	// TODO: check why with the original code above LSB and USB are swapped

	//if USB, copy the USB in the lower half (LSB)
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 800147c:	4c8c      	ldr	r4, [pc, #560]	; (80016b0 <HAL_GPIO_EXTI_Callback+0x240>)
{
 800147e:	ed2d 8b08 	vpush	{d8-d11}
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8001482:	f000 ff7d 	bl	8002380 <SDR_memcpy_f32>
	SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 8001486:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800148a:	498a      	ldr	r1, [pc, #552]	; (80016b4 <HAL_GPIO_EXTI_Callback+0x244>)
 800148c:	488a      	ldr	r0, [pc, #552]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x248>)
 800148e:	f000 ff77 	bl	8002380 <SDR_memcpy_f32>
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 8001492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001496:	4a89      	ldr	r2, [pc, #548]	; (80016bc <HAL_GPIO_EXTI_Callback+0x24c>)
 8001498:	4984      	ldr	r1, [pc, #528]	; (80016ac <HAL_GPIO_EXTI_Callback+0x23c>)
 800149a:	4889      	ldr	r0, [pc, #548]	; (80016c0 <HAL_GPIO_EXTI_Callback+0x250>)
 800149c:	f00e fe98 	bl	80101d0 <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 80014a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014a4:	4a87      	ldr	r2, [pc, #540]	; (80016c4 <HAL_GPIO_EXTI_Callback+0x254>)
 80014a6:	4984      	ldr	r1, [pc, #528]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x248>)
 80014a8:	4887      	ldr	r0, [pc, #540]	; (80016c8 <HAL_GPIO_EXTI_Callback+0x258>)
 80014aa:	f00e fe91 	bl	80101d0 <arm_fir_decimate_f32>
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 80014ae:	4987      	ldr	r1, [pc, #540]	; (80016cc <HAL_GPIO_EXTI_Callback+0x25c>)
 80014b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b4:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
 80014b8:	f000 ff62 	bl	8002380 <SDR_memcpy_f32>
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);
 80014bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c0:	4a82      	ldr	r2, [pc, #520]	; (80016cc <HAL_GPIO_EXTI_Callback+0x25c>)
 80014c2:	4980      	ldr	r1, [pc, #512]	; (80016c4 <HAL_GPIO_EXTI_Callback+0x254>)
 80014c4:	487d      	ldr	r0, [pc, #500]	; (80016bc <HAL_GPIO_EXTI_Callback+0x24c>)
 80014c6:	f000 fe47 	bl	8002158 <SDR_2R_toC_f32>
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 80014ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ce:	4980      	ldr	r1, [pc, #512]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x260>)
 80014d0:	4880      	ldr	r0, [pc, #512]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x264>)
 80014d2:	f000 ff55 	bl	8002380 <SDR_memcpy_f32>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 80014d6:	2301      	movs	r3, #1
 80014d8:	2200      	movs	r2, #0
 80014da:	497e      	ldr	r1, [pc, #504]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x264>)
 80014dc:	487e      	ldr	r0, [pc, #504]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x268>)
 80014de:	f00e fdb9 	bl	8010054 <arm_cfft_f32>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80014e2:	7823      	ldrb	r3, [r4, #0]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	f000 80c6 	beq.w	8001676 <HAL_GPIO_EXTI_Callback+0x206>

#endif
	 */

	// mult. by the fast convolution mask
	arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 80014ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ee:	4a7b      	ldr	r2, [pc, #492]	; (80016dc <HAL_GPIO_EXTI_Callback+0x26c>)
 80014f0:	497b      	ldr	r1, [pc, #492]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x270>)
 80014f2:	4878      	ldr	r0, [pc, #480]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x264>)
 80014f4:	f00f f824 	bl	8010540 <arm_cmplx_mult_cmplx_f32>

	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 80014f8:	2301      	movs	r3, #1
 80014fa:	4978      	ldr	r1, [pc, #480]	; (80016dc <HAL_GPIO_EXTI_Callback+0x26c>)
 80014fc:	461a      	mov	r2, r3
 80014fe:	4876      	ldr	r0, [pc, #472]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x268>)
 8001500:	f00e fda8 	bl	8010054 <arm_cfft_f32>
	// then do the overlap-discard
	SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);
 8001504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001508:	4976      	ldr	r1, [pc, #472]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x274>)
 800150a:	4877      	ldr	r0, [pc, #476]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x278>)
 800150c:	f000 ff38 	bl	8002380 <SDR_memcpy_f32>


	// we have now the bandpass filtered I/Q, demodulate the signal
	switch(CurrentMode)
 8001510:	7823      	ldrb	r3, [r4, #0]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d833      	bhi.n	800157e <HAL_GPIO_EXTI_Callback+0x10e>
 8001516:	2b00      	cmp	r3, #0
 8001518:	f040 80a8 	bne.w	800166c <HAL_GPIO_EXTI_Callback+0x1fc>
	{	
	case AM :
		SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 800151c:	4973      	ldr	r1, [pc, #460]	; (80016ec <HAL_GPIO_EXTI_Callback+0x27c>)
 800151e:	4872      	ldr	r0, [pc, #456]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x278>)
 8001520:	f001 f87e 	bl	8002620 <SDR_demodAM_AGC>
	}


#ifdef DCF77_DECODER

	if (WSPRBeaconMode == 1)
 8001524:	4b72      	ldr	r3, [pc, #456]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x280>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d042      	beq.n	80015b2 <HAL_GPIO_EXTI_Callback+0x142>
#endif

#ifdef CW_TX_SIDETONE
	// CW tone while keying
	//TODO: make it sine and with attack/decay
	if (TXCarrierEnabled)
 800152c:	4b71      	ldr	r3, [pc, #452]	; (80016f4 <HAL_GPIO_EXTI_Callback+0x284>)
 800152e:	7819      	ldrb	r1, [r3, #0]
 8001530:	2900      	cmp	r1, #0
 8001532:	d034      	beq.n	800159e <HAL_GPIO_EXTI_Callback+0x12e>
		for (i=0; i<BSIZE; i++)
		{
			if (i % 64 > 31)
				fAudio[i] = volume * SIDETONE_VOLUME; //Volume
			else
				fAudio[i] = -volume * SIDETONE_VOLUME;
 8001534:	4b70      	ldr	r3, [pc, #448]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x288>)
 8001536:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80016fc <HAL_GPIO_EXTI_Callback+0x28c>
 800153a:	edd3 7a00 	vldr	s15, [r3]
				fAudio[i] = volume * SIDETONE_VOLUME; //Volume
 800153e:	2300      	movs	r3, #0
 8001540:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8001700 <HAL_GPIO_EXTI_Callback+0x290>
				fAudio[i] = -volume * SIDETONE_VOLUME;
 8001544:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001548:	4a68      	ldr	r2, [pc, #416]	; (80016ec <HAL_GPIO_EXTI_Callback+0x27c>)
				fAudio[i] = volume * SIDETONE_VOLUME; //Volume
 800154a:	ee67 7aa6 	vmul.f32	s15, s15, s13
			if (i % 64 > 31)
 800154e:	0699      	lsls	r1, r3, #26
		for (i=0; i<BSIZE; i++)
 8001550:	f103 0301 	add.w	r3, r3, #1
 8001554:	f102 0204 	add.w	r2, r2, #4
				fAudio[i] = volume * SIDETONE_VOLUME; //Volume
 8001558:	bf4c      	ite	mi
 800155a:	ed42 7a01 	vstrmi	s15, [r2, #-4]
				fAudio[i] = -volume * SIDETONE_VOLUME;
 800155e:	ed02 7a01 	vstrpl	s14, [r2, #-4]
		for (i=0; i<BSIZE; i++)
 8001562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001566:	d1f2      	bne.n	800154e <HAL_GPIO_EXTI_Callback+0xde>
#endif

	// send the demodulated audio to the DMA buffer just emptied

	//LED_YELLOW_ON;
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8001568:	4b66      	ldr	r3, [pc, #408]	; (8001704 <HAL_GPIO_EXTI_Callback+0x294>)
 800156a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156e:	485f      	ldr	r0, [pc, #380]	; (80016ec <HAL_GPIO_EXTI_Callback+0x27c>)
 8001570:	6819      	ldr	r1, [r3, #0]
	//LED_YELLOW_OFF;


	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 8001572:	ecbd 8b08 	vpop	{d8-d11}
 8001576:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 800157a:	f000 be8b 	b.w	8002294 <SDR_float_to_DAC_audio>
	switch(CurrentMode)
 800157e:	2b03      	cmp	r3, #3
 8001580:	d1d0      	bne.n	8001524 <HAL_GPIO_EXTI_Callback+0xb4>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 8001582:	495a      	ldr	r1, [pc, #360]	; (80016ec <HAL_GPIO_EXTI_Callback+0x27c>)
 8001584:	4858      	ldr	r0, [pc, #352]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x278>)
 8001586:	f001 f8db 	bl	8002740 <SDR_demodSSB_CW_AGC>
		if(bw[CW] == Narrow)
 800158a:	4b5f      	ldr	r3, [pc, #380]	; (8001708 <HAL_GPIO_EXTI_Callback+0x298>)
 800158c:	78db      	ldrb	r3, [r3, #3]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1c8      	bne.n	8001524 <HAL_GPIO_EXTI_Callback+0xb4>
			SDR_CWPeak(fAudio, BSIZE);
 8001592:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001596:	4855      	ldr	r0, [pc, #340]	; (80016ec <HAL_GPIO_EXTI_Callback+0x27c>)
 8001598:	f000 ffb8 	bl	800250c <SDR_CWPeak>
 800159c:	e7c2      	b.n	8001524 <HAL_GPIO_EXTI_Callback+0xb4>
		if (TransmissionEnabled)
 800159e:	4b5b      	ldr	r3, [pc, #364]	; (800170c <HAL_GPIO_EXTI_Callback+0x29c>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0e0      	beq.n	8001568 <HAL_GPIO_EXTI_Callback+0xf8>
				fAudio[i] = 0.;
 80015a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015aa:	4850      	ldr	r0, [pc, #320]	; (80016ec <HAL_GPIO_EXTI_Callback+0x27c>)
 80015ac:	f00f fb90 	bl	8010cd0 <memset>
 80015b0:	e7da      	b.n	8001568 <HAL_GPIO_EXTI_Callback+0xf8>
		BaseNoiseLevel = 9999.f;
 80015b2:	4c4e      	ldr	r4, [pc, #312]	; (80016ec <HAL_GPIO_EXTI_Callback+0x27c>)
 80015b4:	4b56      	ldr	r3, [pc, #344]	; (8001710 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80015b6:	4a57      	ldr	r2, [pc, #348]	; (8001714 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80015b8:	f504 6a00 	add.w	sl, r4, #2048	; 0x800
 80015bc:	f8df b16c 	ldr.w	fp, [pc, #364]	; 800172c <HAL_GPIO_EXTI_Callback+0x2bc>
 80015c0:	4f55      	ldr	r7, [pc, #340]	; (8001718 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80015c2:	4e56      	ldr	r6, [pc, #344]	; (800171c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80015c4:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8001730 <HAL_GPIO_EXTI_Callback+0x2c0>
 80015c8:	4d55      	ldr	r5, [pc, #340]	; (8001720 <HAL_GPIO_EXTI_Callback+0x2b0>)
				LED_RED_ON;
 80015ca:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8001734 <HAL_GPIO_EXTI_Callback+0x2c4>
		BaseNoiseLevel = 9999.f;
 80015ce:	601a      	str	r2, [r3, #0]
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 80015d0:	ed9f bb2d 	vldr	d11, [pc, #180]	; 8001688 <HAL_GPIO_EXTI_Callback+0x218>
 80015d4:	ed9f ab2e 	vldr	d10, [pc, #184]	; 8001690 <HAL_GPIO_EXTI_Callback+0x220>
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 80015d8:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 8001698 <HAL_GPIO_EXTI_Callback+0x228>
 80015dc:	ed9f 8b30 	vldr	d8, [pc, #192]	; 80016a0 <HAL_GPIO_EXTI_Callback+0x230>
 80015e0:	e008      	b.n	80015f4 <HAL_GPIO_EXTI_Callback+0x184>
				DCF77In = 0;
 80015e2:	f8a5 c000 	strh.w	ip, [r5]
				LED_RED_ON;
 80015e6:	f007 fc37 	bl	8008e58 <HAL_GPIO_WritePin>
			DoDCF77(DCF77In);
 80015ea:	8828      	ldrh	r0, [r5, #0]
 80015ec:	f7ff fbaa 	bl	8000d44 <DoDCF77>
		for (i = 0; i < BSIZE; i++)
 80015f0:	45a2      	cmp	sl, r4
 80015f2:	d09b      	beq.n	800152c <HAL_GPIO_EXTI_Callback+0xbc>
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 80015f4:	ed97 6a00 	vldr	s12, [r7]
				DCF77In = 0;
 80015f8:	f04f 0c00 	mov.w	ip, #0
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 80015fc:	ed96 7a00 	vldr	s14, [r6]
				LED_RED_OFF;
 8001600:	4640      	mov	r0, r8
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8001602:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
			CWLevel = fabs(fAudio[i]);
 8001606:	ecf4 5a01 	vldmia	r4!, {s11}
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 800160a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
			if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 800160e:	ed99 5a00 	vldr	s10, [r9]
			CWLevel = fabs(fAudio[i]);
 8001612:	eef0 5ae5 	vabs.f32	s11, s11
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8001616:	4b43      	ldr	r3, [pc, #268]	; (8001724 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001618:	ee26 6b0b 	vmul.f64	d6, d6, d11
				LED_RED_OFF;
 800161c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001620:	4662      	mov	r2, ip
			CWLevel = fabs(fAudio[i]);
 8001622:	edcb 5a00 	vstr	s11, [fp]
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8001626:	ee27 7b09 	vmul.f64	d7, d7, d9
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 800162a:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 800162e:	eea4 7b08 	vfma.f64	d7, d4, d8
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8001632:	eea4 6b0a 	vfma.f64	d6, d4, d10
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8001636:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			OldMediumLevelAverage = MediumLevelFiltered;
 800163a:	ed86 7a00 	vstr	s14, [r6]
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 800163e:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
			if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 8001642:	ee77 7a46 	vsub.f32	s15, s14, s12
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8001646:	ed83 6a00 	vstr	s12, [r3]
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 800164a:	4b37      	ldr	r3, [pc, #220]	; (8001728 <HAL_GPIO_EXTI_Callback+0x2b8>)
			OldCWLevelAverage = CWLevelFiltered;
 800164c:	ed87 6a00 	vstr	s12, [r7]
			if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 8001650:	eef4 7ac5 	vcmpe.f32	s15, s10
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8001654:	ed83 7a00 	vstr	s14, [r3]
			if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 8001658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165c:	dcc1      	bgt.n	80015e2 <HAL_GPIO_EXTI_Callback+0x172>
				DCF77In += 1; //TODO limit CW increase
 800165e:	882b      	ldrh	r3, [r5, #0]
				LED_RED_ON;
 8001660:	2201      	movs	r2, #1
 8001662:	f44f 4180 	mov.w	r1, #16384	; 0x4000
				DCF77In += 1; //TODO limit CW increase
 8001666:	4413      	add	r3, r2
 8001668:	802b      	strh	r3, [r5, #0]
 800166a:	e7bc      	b.n	80015e6 <HAL_GPIO_EXTI_Callback+0x176>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 800166c:	491f      	ldr	r1, [pc, #124]	; (80016ec <HAL_GPIO_EXTI_Callback+0x27c>)
 800166e:	481e      	ldr	r0, [pc, #120]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x278>)
 8001670:	f001 f866 	bl	8002740 <SDR_demodSSB_CW_AGC>
 8001674:	e756      	b.n	8001524 <HAL_GPIO_EXTI_Callback+0xb4>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8001676:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800167a:	4816      	ldr	r0, [pc, #88]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x264>)
 800167c:	f000 fe9a 	bl	80023b4 <SDR_mirror_LSB>
 8001680:	e733      	b.n	80014ea <HAL_GPIO_EXTI_Callback+0x7a>
 8001682:	bf00      	nop
 8001684:	f3af 8000 	nop.w
 8001688:	d916872b 	.word	0xd916872b
 800168c:	3feff7ce 	.word	0x3feff7ce
 8001690:	d2f1a9fc 	.word	0xd2f1a9fc
 8001694:	3f50624d 	.word	0x3f50624d
 8001698:	074a771d 	.word	0x074a771d
 800169c:	3fefffeb 	.word	0x3fefffeb
 80016a0:	88e368f1 	.word	0x88e368f1
 80016a4:	3ee4f8b5 	.word	0x3ee4f8b5
 80016a8:	2000d000 	.word	0x2000d000
 80016ac:	20009000 	.word	0x20009000
 80016b0:	24002018 	.word	0x24002018
 80016b4:	2000b000 	.word	0x2000b000
 80016b8:	20007000 	.word	0x20007000
 80016bc:	20006800 	.word	0x20006800
 80016c0:	2400729c 	.word	0x2400729c
 80016c4:	20006000 	.word	0x20006000
 80016c8:	24007290 	.word	0x24007290
 80016cc:	2400a43c 	.word	0x2400a43c
 80016d0:	2400943c 	.word	0x2400943c
 80016d4:	20002000 	.word	0x20002000
 80016d8:	0801b30c 	.word	0x0801b30c
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20004000 	.word	0x20004000
 80016e4:	20001000 	.word	0x20001000
 80016e8:	2400b99c 	.word	0x2400b99c
 80016ec:	24008c3c 	.word	0x24008c3c
 80016f0:	240083fc 	.word	0x240083fc
 80016f4:	240072dc 	.word	0x240072dc
 80016f8:	2400c9d0 	.word	0x2400c9d0
 80016fc:	be4ccccd 	.word	0xbe4ccccd
 8001700:	3e4ccccd 	.word	0x3e4ccccd
 8001704:	240083f8 	.word	0x240083f8
 8001708:	24008c30 	.word	0x24008c30
 800170c:	240072e8 	.word	0x240072e8
 8001710:	24002004 	.word	0x24002004
 8001714:	461c3c00 	.word	0x461c3c00
 8001718:	24007274 	.word	0x24007274
 800171c:	24007278 	.word	0x24007278
 8001720:	2400201a 	.word	0x2400201a
 8001724:	2400200c 	.word	0x2400200c
 8001728:	2400726c 	.word	0x2400726c
 800172c:	24002008 	.word	0x24002008
 8001730:	24002010 	.word	0x24002010
 8001734:	58020400 	.word	0x58020400

08001738 <ADC_Stream0_Handler>:

//#pragma GCC push_options
//#pragma GCC optimize ("O0")

void ADC_Stream0_Handler(uint8_t FullConversion)
{
 8001738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* It needs a delay between fract div disable and parameter setting.
	 * Reference manual says otherwise.
	 * So we disable at the top of the ISR and set the parameter near the bottom.
	 */
	if (TransmittingWSPR)
 800173c:	4d8e      	ldr	r5, [pc, #568]	; (8001978 <ADC_Stream0_Handler+0x240>)
{
 800173e:	ed2d 8b10 	vpush	{d8-d15}
	if (TransmittingWSPR)
 8001742:	782b      	ldrb	r3, [r5, #0]
{
 8001744:	b095      	sub	sp, #84	; 0x54
	if (TransmittingWSPR)
 8001746:	b123      	cbz	r3, 8001752 <ADC_Stream0_Handler+0x1a>
	{
		__HAL_RCC_PLL2FRACN_DISABLE();
 8001748:	4a8c      	ldr	r2, [pc, #560]	; (800197c <ADC_Stream0_Handler+0x244>)
 800174a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800174c:	f023 0310 	bic.w	r3, r3, #16
 8001750:	62d3      	str	r3, [r2, #44]	; 0x2c

	// process the data contained in the just filled buffer
	if(FullConversion)
		pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
	else
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8001752:	4f8b      	ldr	r7, [pc, #556]	; (8001980 <ADC_Stream0_Handler+0x248>)
	pR=TestSignalData;
#endif


	// compute the new NCO buffer, with the CWpitch offset if receiving CW
	if(CurrentMode == CW)
 8001754:	4b8b      	ldr	r3, [pc, #556]	; (8001984 <ADC_Stream0_Handler+0x24c>)
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8001756:	f5a7 6280 	sub.w	r2, r7, #1024	; 0x400
	if(CurrentMode == CW)
 800175a:	781b      	ldrb	r3, [r3, #0]
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 800175c:	2800      	cmp	r0, #0
 800175e:	bf08      	it	eq
 8001760:	4617      	moveq	r7, r2
	if(CurrentMode == CW)
 8001762:	2b03      	cmp	r3, #3
 8001764:	f000 8429 	beq.w	8001fba <ADC_Stream0_Handler+0x882>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
	else
		SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 8001768:	4b87      	ldr	r3, [pc, #540]	; (8001988 <ADC_Stream0_Handler+0x250>)
 800176a:	ed93 0a00 	vldr	s0, [r3]
 800176e:	f000 fc35 	bl	8001fdc <SDR_ComputeLO>
	// in the short words to floating point conversion routine

	//TODO Check if it should be BSIZE/2

	sum = 0; k = BSIZE;
	while(k)
 8001772:	f207 32fe 	addw	r2, r7, #1022	; 0x3fe
 8001776:	1eb8      	subs	r0, r7, #2
	sum = 0; k = BSIZE;
 8001778:	ed9f 0a84 	vldr	s0, [pc, #528]	; 800198c <ADC_Stream0_Handler+0x254>
	{
		sum += pR[k-1];
 800177c:	8814      	ldrh	r4, [r2, #0]
	while(k)
 800177e:	3a08      	subs	r2, #8
		sum += pR[k-2];
 8001780:	88d3      	ldrh	r3, [r2, #6]
		sum += pR[k-1];
 8001782:	b2a4      	uxth	r4, r4
		sum += pR[k-3];
 8001784:	8896      	ldrh	r6, [r2, #4]
		sum += pR[k-2];
 8001786:	b29b      	uxth	r3, r3
		sum += pR[k-4];
 8001788:	8851      	ldrh	r1, [r2, #2]
		sum += pR[k-1];
 800178a:	ee07 4a90 	vmov	s15, r4
		sum += pR[k-3];
 800178e:	b2b6      	uxth	r6, r6
		sum += pR[k-2];
 8001790:	ee07 3a10 	vmov	s14, r3
		sum += pR[k-4];
 8001794:	b289      	uxth	r1, r1
		sum += pR[k-1];
 8001796:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
		sum += pR[k-3];
 800179a:	ee07 6a90 	vmov	s15, r6
		sum += pR[k-2];
 800179e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		sum += pR[k-4];
 80017a2:	ee06 1a90 	vmov	s13, r1
		sum += pR[k-3];
 80017a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	while(k)
 80017aa:	4290      	cmp	r0, r2
		sum += pR[k-4];
 80017ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80017b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80017b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017bc:	ee30 0a27 	vadd.f32	s0, s0, s15
	while(k)
 80017c0:	d1dc      	bne.n	800177c <ADC_Stream0_Handler+0x44>
		k-=4;
	}

	TestSampledValue=pR[BSIZE/2];
 80017c2:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 80017c6:	2200      	movs	r2, #0

	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80017c8:	eddf 7a71 	vldr	s15, [pc, #452]	; 8001990 <ADC_Stream0_Handler+0x258>

	// downconvert to zero IF, by multiplication by the exp(-jwt) signal
	// generated by the NCO, and at the same time convert to floating point
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80017cc:	4638      	mov	r0, r7
	TestSampledValue=pR[BSIZE/2];
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4c70      	ldr	r4, [pc, #448]	; (8001994 <ADC_Stream0_Handler+0x25c>)
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80017d2:	ee20 0a27 	vmul.f32	s0, s0, s15
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80017d6:	4970      	ldr	r1, [pc, #448]	; (8001998 <ADC_Stream0_Handler+0x260>)
	TestSampledValue=pR[BSIZE/2];
 80017d8:	ee07 3a90 	vmov	s15, r3
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80017dc:	4b6f      	ldr	r3, [pc, #444]	; (800199c <ADC_Stream0_Handler+0x264>)
 80017de:	8022      	strh	r2, [r4, #0]
	TestSampledValue=pR[BSIZE/2];
 80017e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80017e4:	ed83 0a00 	vstr	s0, [r3]
	TestSampledValue=pR[BSIZE/2];
 80017e8:	4b6d      	ldr	r3, [pc, #436]	; (80019a0 <ADC_Stream0_Handler+0x268>)
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80017ea:	4a6e      	ldr	r2, [pc, #440]	; (80019a4 <ADC_Stream0_Handler+0x26c>)
	TestSampledValue=pR[BSIZE/2];
 80017ec:	edc3 7a00 	vstr	s15, [r3]
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80017f0:	f000 fcde 	bl	80021b0 <SDR_downconvert_f32>


	ptDataR = ADC_Rdata;  ptDataI = ADC_Idata;


	if (TransmittingWSPR)
 80017f4:	782b      	ldrb	r3, [r5, #0]
 80017f6:	b30b      	cbz	r3, 800183c <ADC_Stream0_Handler+0x104>
	{
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 80017f8:	4d6b      	ldr	r5, [pc, #428]	; (80019a8 <ADC_Stream0_Handler+0x270>)
 80017fa:	496c      	ldr	r1, [pc, #432]	; (80019ac <ADC_Stream0_Handler+0x274>)
 80017fc:	f9b5 2000 	ldrsh.w	r2, [r5]
 8001800:	4b6b      	ldr	r3, [pc, #428]	; (80019b0 <ADC_Stream0_Handler+0x278>)
 8001802:	7809      	ldrb	r1, [r1, #0]
 8001804:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8001808:	1c53      	adds	r3, r2, #1
 800180a:	4282      	cmp	r2, r0
 800180c:	b21b      	sxth	r3, r3
		{
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1);
 800180e:	485b      	ldr	r0, [pc, #364]	; (800197c <ADC_Stream0_Handler+0x244>)
 8001810:	4a68      	ldr	r2, [pc, #416]	; (80019b4 <ADC_Stream0_Handler+0x27c>)
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 8001812:	802b      	strh	r3, [r5, #0]
 8001814:	f2c0 8352 	blt.w	8001ebc <ADC_Stream0_Handler+0x784>
		}
		else
		{
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 8001818:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800181c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
		}
		if (IntCounter == 8)
 800181e:	2b08      	cmp	r3, #8
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 8001820:	4a65      	ldr	r2, [pc, #404]	; (80019b8 <ADC_Stream0_Handler+0x280>)
 8001822:	ea02 0206 	and.w	r2, r2, r6
 8001826:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800182a:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (IntCounter == 8)
 800182c:	d101      	bne.n	8001832 <ADC_Stream0_Handler+0xfa>
		{
			IntCounter = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	802b      	strh	r3, [r5, #0]
		}
		__HAL_RCC_PLL2FRACN_ENABLE();
 8001832:	4a52      	ldr	r2, [pc, #328]	; (800197c <ADC_Stream0_Handler+0x244>)
 8001834:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001836:	f043 0310 	orr.w	r3, r3, #16
 800183a:	62d3      	str	r3, [r2, #44]	; 0x2c
	// passed to the baseband interrupt routine, where it is additionally filtered with a
	// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
	//-------------------------------------------------------------------------

	k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
	while(k--)
 800183c:	4a5f      	ldr	r2, [pc, #380]	; (80019bc <ADC_Stream0_Handler+0x284>)
 800183e:	23ff      	movs	r3, #255	; 0xff
 8001840:	495f      	ldr	r1, [pc, #380]	; (80019c0 <ADC_Stream0_Handler+0x288>)
 8001842:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8001846:	ed92 2a00 	vldr	s4, [r2]
 800184a:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 800184e:	4a5d      	ldr	r2, [pc, #372]	; (80019c4 <ADC_Stream0_Handler+0x28c>)
 8001850:	edd1 3a00 	vldr	s7, [r1]
 8001854:	edd2 1a00 	vldr	s3, [r2]
 8001858:	4a5b      	ldr	r2, [pc, #364]	; (80019c8 <ADC_Stream0_Handler+0x290>)
 800185a:	495c      	ldr	r1, [pc, #368]	; (80019cc <ADC_Stream0_Handler+0x294>)
 800185c:	ed92 7a00 	vldr	s14, [r2]
 8001860:	4a5b      	ldr	r2, [pc, #364]	; (80019d0 <ADC_Stream0_Handler+0x298>)
 8001862:	ed91 9a00 	vldr	s18, [r1]
 8001866:	eeb0 6a47 	vmov.f32	s12, s14
 800186a:	edd2 2a00 	vldr	s5, [r2]
 800186e:	4959      	ldr	r1, [pc, #356]	; (80019d4 <ADC_Stream0_Handler+0x29c>)
 8001870:	4a59      	ldr	r2, [pc, #356]	; (80019d8 <ADC_Stream0_Handler+0x2a0>)
 8001872:	edd1 ea00 	vldr	s29, [r1]
 8001876:	edd2 8a00 	vldr	s17, [r2]
 800187a:	4958      	ldr	r1, [pc, #352]	; (80019dc <ADC_Stream0_Handler+0x2a4>)
 800187c:	4a58      	ldr	r2, [pc, #352]	; (80019e0 <ADC_Stream0_Handler+0x2a8>)
 800187e:	edd1 6a00 	vldr	s13, [r1]
 8001882:	ed92 5a00 	vldr	s10, [r2]
 8001886:	4957      	ldr	r1, [pc, #348]	; (80019e4 <ADC_Stream0_Handler+0x2ac>)
 8001888:	4a57      	ldr	r2, [pc, #348]	; (80019e8 <ADC_Stream0_Handler+0x2b0>)
 800188a:	edd1 ca00 	vldr	s25, [r1]
 800188e:	edd2 fa00 	vldr	s31, [r2]
 8001892:	4956      	ldr	r1, [pc, #344]	; (80019ec <ADC_Stream0_Handler+0x2b4>)
 8001894:	4a56      	ldr	r2, [pc, #344]	; (80019f0 <ADC_Stream0_Handler+0x2b8>)
 8001896:	ed91 da00 	vldr	s26, [r1]
 800189a:	ed92 8a00 	vldr	s16, [r2]
 800189e:	4955      	ldr	r1, [pc, #340]	; (80019f4 <ADC_Stream0_Handler+0x2bc>)
 80018a0:	4a55      	ldr	r2, [pc, #340]	; (80019f8 <ADC_Stream0_Handler+0x2c0>)
 80018a2:	edcd 6a02 	vstr	s13, [sp, #8]
 80018a6:	edd2 5a00 	vldr	s11, [r2]
 80018aa:	edd1 6a00 	vldr	s13, [r1]
 80018ae:	4a53      	ldr	r2, [pc, #332]	; (80019fc <ADC_Stream0_Handler+0x2c4>)
 80018b0:	4953      	ldr	r1, [pc, #332]	; (8001a00 <ADC_Stream0_Handler+0x2c8>)
 80018b2:	ed92 fa00 	vldr	s30, [r2]
 80018b6:	ed91 ca00 	vldr	s24, [r1]
 80018ba:	4a52      	ldr	r2, [pc, #328]	; (8001a04 <ADC_Stream0_Handler+0x2cc>)
 80018bc:	4952      	ldr	r1, [pc, #328]	; (8001a08 <ADC_Stream0_Handler+0x2d0>)
 80018be:	edd2 ba00 	vldr	s23, [r2]
 80018c2:	edcd 6a01 	vstr	s13, [sp, #4]
 80018c6:	4a51      	ldr	r2, [pc, #324]	; (8001a0c <ADC_Stream0_Handler+0x2d4>)
 80018c8:	edd1 6a00 	vldr	s13, [r1]
 80018cc:	4950      	ldr	r1, [pc, #320]	; (8001a10 <ADC_Stream0_Handler+0x2d8>)
 80018ce:	ed92 3a00 	vldr	s6, [r2]
 80018d2:	edcd 6a03 	vstr	s13, [sp, #12]
 80018d6:	4a4f      	ldr	r2, [pc, #316]	; (8001a14 <ADC_Stream0_Handler+0x2dc>)
 80018d8:	edd1 6a00 	vldr	s13, [r1]
 80018dc:	494e      	ldr	r1, [pc, #312]	; (8001a18 <ADC_Stream0_Handler+0x2e0>)
 80018de:	edd2 9a00 	vldr	s19, [r2]
 80018e2:	edcd 6a08 	vstr	s13, [sp, #32]
 80018e6:	4a4d      	ldr	r2, [pc, #308]	; (8001a1c <ADC_Stream0_Handler+0x2e4>)
 80018e8:	edd1 6a00 	vldr	s13, [r1]
 80018ec:	f8df a158 	ldr.w	sl, [pc, #344]	; 8001a48 <ADC_Stream0_Handler+0x310>
 80018f0:	494b      	ldr	r1, [pc, #300]	; (8001a20 <ADC_Stream0_Handler+0x2e8>)
 80018f2:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8001a4c <ADC_Stream0_Handler+0x314>
 80018f6:	ed92 ba00 	vldr	s22, [r2]
 80018fa:	ed9a 1a00 	vldr	s2, [sl]
 80018fe:	edd9 7a00 	vldr	s15, [r9]
 8001902:	8023      	strh	r3, [r4, #0]
 8001904:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
 8001908:	edd1 6a00 	vldr	s13, [r1]
 800190c:	4945      	ldr	r1, [pc, #276]	; (8001a24 <ADC_Stream0_Handler+0x2ec>)
 800190e:	edcd 6a00 	vstr	s13, [sp]
 8001912:	edd1 6a00 	vldr	s13, [r1]
 8001916:	4944      	ldr	r1, [pc, #272]	; (8001a28 <ADC_Stream0_Handler+0x2f0>)
 8001918:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 800191c:	edd1 6a00 	vldr	s13, [r1]
 8001920:	4942      	ldr	r1, [pc, #264]	; (8001a2c <ADC_Stream0_Handler+0x2f4>)
 8001922:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8001a50 <ADC_Stream0_Handler+0x318>
 8001926:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 800192a:	edd1 6a00 	vldr	s13, [r1]
 800192e:	4f40      	ldr	r7, [pc, #256]	; (8001a30 <ADC_Stream0_Handler+0x2f8>)
 8001930:	edcd 6a06 	vstr	s13, [sp, #24]
 8001934:	edd8 6a00 	vldr	s13, [r8]
 8001938:	4e3e      	ldr	r6, [pc, #248]	; (8001a34 <ADC_Stream0_Handler+0x2fc>)
 800193a:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 800193e:	edd7 6a00 	vldr	s13, [r7]
 8001942:	493d      	ldr	r1, [pc, #244]	; (8001a38 <ADC_Stream0_Handler+0x300>)
 8001944:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8001948:	edd6 6a00 	vldr	s13, [r6]
 800194c:	f8df b104 	ldr.w	fp, [pc, #260]	; 8001a54 <ADC_Stream0_Handler+0x31c>
 8001950:	edcd 6a07 	vstr	s13, [sp, #28]
 8001954:	edd1 6a00 	vldr	s13, [r1]
 8001958:	4938      	ldr	r1, [pc, #224]	; (8001a3c <ADC_Stream0_Handler+0x304>)
 800195a:	4a39      	ldr	r2, [pc, #228]	; (8001a40 <ADC_Stream0_Handler+0x308>)
 800195c:	f9bb 0000 	ldrsh.w	r0, [fp]
 8001960:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8001964:	f502 6c00 	add.w	ip, r2, #2048	; 0x800
 8001968:	edd1 6a00 	vldr	s13, [r1]
 800196c:	4686      	mov	lr, r0
 800196e:	4935      	ldr	r1, [pc, #212]	; (8001a44 <ADC_Stream0_Handler+0x30c>)
 8001970:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8001974:	e173      	b.n	8001c5e <ADC_Stream0_Handler+0x526>
 8001976:	bf00      	nop
 8001978:	240072e9 	.word	0x240072e9
 800197c:	58024400 	.word	0x58024400
 8001980:	24008820 	.word	0x24008820
 8001984:	24002018 	.word	0x24002018
 8001988:	24007258 	.word	0x24007258
 800198c:	00000000 	.word	0x00000000
 8001990:	3b000000 	.word	0x3b000000
 8001994:	24000700 	.word	0x24000700
 8001998:	24000fd8 	.word	0x24000fd8
 800199c:	2400b81c 	.word	0x2400b81c
 80019a0:	240072e4 	.word	0x240072e4
 80019a4:	240007d8 	.word	0x240007d8
 80019a8:	2400066c 	.word	0x2400066c
 80019ac:	240083ff 	.word	0x240083ff
 80019b0:	24006238 	.word	0x24006238
 80019b4:	2400622c 	.word	0x2400622c
 80019b8:	ffff0007 	.word	0xffff0007
 80019bc:	24000674 	.word	0x24000674
 80019c0:	240006c4 	.word	0x240006c4
 80019c4:	240006a0 	.word	0x240006a0
 80019c8:	240006a4 	.word	0x240006a4
 80019cc:	24000680 	.word	0x24000680
 80019d0:	24000670 	.word	0x24000670
 80019d4:	240006d8 	.word	0x240006d8
 80019d8:	240006b8 	.word	0x240006b8
 80019dc:	240006dc 	.word	0x240006dc
 80019e0:	240006bc 	.word	0x240006bc
 80019e4:	2400068c 	.word	0x2400068c
 80019e8:	2400067c 	.word	0x2400067c
 80019ec:	240006d0 	.word	0x240006d0
 80019f0:	240006b0 	.word	0x240006b0
 80019f4:	240006d4 	.word	0x240006d4
 80019f8:	240006b4 	.word	0x240006b4
 80019fc:	24000678 	.word	0x24000678
 8001a00:	24000688 	.word	0x24000688
 8001a04:	240006c8 	.word	0x240006c8
 8001a08:	240006e8 	.word	0x240006e8
 8001a0c:	240006cc 	.word	0x240006cc
 8001a10:	240006ec 	.word	0x240006ec
 8001a14:	24000684 	.word	0x24000684
 8001a18:	24000694 	.word	0x24000694
 8001a1c:	240006c0 	.word	0x240006c0
 8001a20:	240006e0 	.word	0x240006e0
 8001a24:	240006e4 	.word	0x240006e4
 8001a28:	24000690 	.word	0x24000690
 8001a2c:	240006f8 	.word	0x240006f8
 8001a30:	2400069c 	.word	0x2400069c
 8001a34:	240006f0 	.word	0x240006f0
 8001a38:	240006f4 	.word	0x240006f4
 8001a3c:	24000698 	.word	0x24000698
 8001a40:	24000fe0 	.word	0x24000fe0
 8001a44:	240007e0 	.word	0x240007e0
 8001a48:	240006a8 	.word	0x240006a8
 8001a4c:	240006ac 	.word	0x240006ac
 8001a50:	240006fc 	.word	0x240006fc
 8001a54:	2400066e 	.word	0x2400066e
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 2
		// now compute the couple of elements for the next step

		inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 8001a58:	eea8 5a84 	vfma.f32	s10, s17, s8

		inE2Rold = inER;                           inE2Iold = inEI;
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;

		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 8001a5c:	0798      	lsls	r0, r3, #30
 8001a5e:	eee8 5a04 	vfma.f32	s11, s16, s8
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 8001a62:	ee7f faaa 	vadd.f32	s31, s31, s21
 8001a66:	ee3f fa0a 	vadd.f32	s30, s30, s20
 8001a6a:	eeaf 5aa4 	vfma.f32	s10, s31, s9
 8001a6e:	eeef 5a24 	vfma.f32	s11, s30, s9
 8001a72:	ee75 6a27 	vadd.f32	s13, s10, s15
 8001a76:	ee35 6a87 	vadd.f32	s12, s11, s14
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 8001a7a:	f100 8118 	bmi.w	8001cae <ADC_Stream0_Handler+0x576>
		// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8001a7e:	eeab 3a84 	vfma.f32	s6, s23, s8

		inE3Rold  = inER;                          inE3Iold  = inEI;
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8001a82:	075d      	lsls	r5, r3, #29
 8001a84:	eeeb 3a04 	vfma.f32	s7, s22, s8
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8001a88:	ee79 9a8e 	vadd.f32	s19, s19, s28
 8001a8c:	ee39 9a2d 	vadd.f32	s18, s18, s27
 8001a90:	eea9 3aa4 	vfma.f32	s6, s19, s9
 8001a94:	eee9 3a24 	vfma.f32	s7, s18, s9
 8001a98:	ee33 9a26 	vadd.f32	s18, s6, s13
 8001a9c:	ee73 9a86 	vadd.f32	s19, s7, s12
		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8001aa0:	f100 8116 	bmi.w	8001cd0 <ADC_Stream0_Handler+0x598>
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 8
		// now compute the couple of elements for the next step

		inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 8001aa4:	eddd 5a02 	vldr	s11, [sp, #8]

		inE4Rold = inER;                           inE4Iold = inEI;
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8001aa8:	0718      	lsls	r0, r3, #28
 8001aaa:	ed9d 5a01 	vldr	s10, [sp, #4]
 8001aae:	eeee 5a84 	vfma.f32	s11, s29, s8
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 8001ab2:	eddd 3a05 	vldr	s7, [sp, #20]
 8001ab6:	eead 5a04 	vfma.f32	s10, s26, s8
 8001aba:	ed9d 3a04 	vldr	s6, [sp, #16]
 8001abe:	ee7c caa3 	vadd.f32	s25, s25, s7
 8001ac2:	ee3c ca03 	vadd.f32	s24, s24, s6
 8001ac6:	eeec 5aa4 	vfma.f32	s11, s25, s9
 8001aca:	eeac 5a24 	vfma.f32	s10, s24, s9
 8001ace:	ee39 ca25 	vadd.f32	s24, s18, s11
 8001ad2:	ee75 ca29 	vadd.f32	s25, s10, s19
		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8001ad6:	f100 81a5 	bmi.w	8001e24 <ADC_Stream0_Handler+0x6ec>
		// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001ada:	ed9d fa08 	vldr	s30, [sp, #32]
		inE5Rold  = inER;                          inE5Iold  = inEI;
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;



		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001ade:	f013 0010 	ands.w	r0, r3, #16
 8001ae2:	ed9d 3a03 	vldr	s6, [sp, #12]
 8001ae6:	eddd 5a00 	vldr	s11, [sp]
 8001aea:	eddd fa0a 	vldr	s31, [sp, #40]	; 0x28
 8001aee:	eea3 fa04 	vfma.f32	s30, s6, s8
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001af2:	ed9d 5a11 	vldr	s10, [sp, #68]	; 0x44
 8001af6:	eee5 fa84 	vfma.f32	s31, s11, s8
 8001afa:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8001afe:	ee75 5a25 	vadd.f32	s11, s10, s11
 8001b02:	ed9d 5a10 	vldr	s10, [sp, #64]	; 0x40
 8001b06:	eea5 faa4 	vfma.f32	s30, s11, s9
 8001b0a:	eddd 5a0b 	vldr	s11, [sp, #44]	; 0x2c
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001b0e:	900b      	str	r0, [sp, #44]	; 0x2c
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001b10:	ee75 5a25 	vadd.f32	s11, s10, s11
 8001b14:	eee5 faa4 	vfma.f32	s31, s11, s9
 8001b18:	ee3c fa0f 	vadd.f32	s30, s24, s30
 8001b1c:	ed8d fa09 	vstr	s30, [sp, #36]	; 0x24
 8001b20:	ee7c faaf 	vadd.f32	s31, s25, s31
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001b24:	f040 819b 	bne.w	8001e5e <ADC_Stream0_Handler+0x726>
		// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
		// produced with 4 of the previous elem, i.e. with 16 input samples, totalling
		// a decimation by 16. Now compute the couple of elements for the next step

		inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001b28:	eddd 3a06 	vldr	s7, [sp, #24]
		// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
		// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band

		// create a block of BSIZE*4 entries, which will be then decimated by 4

		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001b2c:	ea4f 008e 	mov.w	r0, lr, lsl #2
 8001b30:	eddd 5a0c 	vldr	s11, [sp, #48]	; 0x30
 8001b34:	ed9d 5a0e 	vldr	s10, [sp, #56]	; 0x38
 8001b38:	eee3 5a84 	vfma.f32	s11, s7, s8
 8001b3c:	eddd 3a07 	vldr	s7, [sp, #28]
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001b40:	ed9d fa0d 	vldr	s30, [sp, #52]	; 0x34
 8001b44:	eea3 5a84 	vfma.f32	s10, s7, s8
 8001b48:	eddd 3a12 	vldr	s7, [sp, #72]	; 0x48
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001b4c:	4ddd      	ldr	r5, [pc, #884]	; (8001ec4 <ADC_Stream0_Handler+0x78c>)
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001b4e:	ee73 3a8f 	vadd.f32	s7, s7, s30
 8001b52:	ed9d fa0f 	vldr	s30, [sp, #60]	; 0x3c
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001b56:	4428      	add	r0, r5
 8001b58:	4ddb      	ldr	r5, [pc, #876]	; (8001ec8 <ADC_Stream0_Handler+0x790>)
 8001b5a:	eee3 5aa4 	vfma.f32	s11, s7, s9
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001b5e:	eddd 3a13 	vldr	s7, [sp, #76]	; 0x4c
 8001b62:	ee73 3a8f 	vadd.f32	s7, s7, s30
 8001b66:	ed9d fa09 	vldr	s30, [sp, #36]	; 0x24
 8001b6a:	eea3 5aa4 	vfma.f32	s10, s7, s9
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001b6e:	eddf 3ad7 	vldr	s7, [pc, #860]	; 8001ecc <ADC_Stream0_Handler+0x794>
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001b72:	ee75 5a8f 	vadd.f32	s11, s11, s30
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001b76:	ee65 5aa3 	vmul.f32	s11, s11, s7
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001b7a:	ee35 5a2f 	vadd.f32	s10, s10, s31
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001b7e:	ee25 5a23 	vmul.f32	s10, s10, s7
 8001b82:	ed80 5a00 	vstr	s10, [r0]
 8001b86:	f10e 0001 	add.w	r0, lr, #1
 8001b8a:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 8001b8e:	edce 5a00 	vstr	s11, [lr]
 8001b92:	fa0f fe80 	sxth.w	lr, r0
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b96:	eddd 5a07 	vldr	s11, [sp, #28]
		//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

		if(idx < BSIZE*4)
 8001b9a:	f5be 6f00 	cmp.w	lr, #2048	; 0x800
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b9e:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
		if(idx < BSIZE*4)
 8001ba2:	f2c0 81d3 	blt.w	8001f4c <ADC_Stream0_Handler+0x814>
#endif


			// generate now an interrupt to signal the base band processing routine that it has a new buffer

			EXTI->SWIER1 |= GPIO_PIN_14;
 8001ba6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001baa:	eddd 3a06 	vldr	s7, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001bae:	eddd 5a00 	vldr	s11, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001bb2:	eeb0 5a68 	vmov.f32	s10, s17
			EXTI->SWIER1 |= GPIO_PIN_14;
 8001bb6:	68a8      	ldr	r0, [r5, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001bb8:	eef0 8a67 	vmov.f32	s17, s15
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001bbc:	ed8d da01 	vstr	s26, [sp, #4]
 8001bc0:	eeb0 da69 	vmov.f32	s26, s19
 8001bc4:	edcd ea02 	vstr	s29, [sp, #8]
 8001bc8:	eef0 ea49 	vmov.f32	s29, s18
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001bcc:	edcd 3a0c 	vstr	s7, [sp, #48]	; 0x30
			EXTI->SWIER1 |= GPIO_PIN_14;
 8001bd0:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001bd4:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001bd8:	eef0 3a4b 	vmov.f32	s7, s22
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001bdc:	ed8d 3a08 	vstr	s6, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001be0:	eef0 5a48 	vmov.f32	s11, s16
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001be4:	eeb0 3a6b 	vmov.f32	s6, s23
		idx = 0;
 8001be8:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001bec:	eeb0 ba46 	vmov.f32	s22, s12
		inE6Rold = inER;                           inE6Iold = inEI;
 8001bf0:	ed9d 6a13 	vldr	s12, [sp, #76]	; 0x4c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001bf4:	eef0 ba66 	vmov.f32	s23, s13
		inE6Rold = inER;                           inE6Iold = inEI;
 8001bf8:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001bfc:	eeb0 8a47 	vmov.f32	s16, s14
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8001c00:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001c04:	edcd fa07 	vstr	s31, [sp, #28]
 8001c08:	ed8d fa06 	vstr	s30, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001c0c:	edcd ca00 	vstr	s25, [sp]
 8001c10:	ed8d ca03 	vstr	s24, [sp, #12]
			EXTI->SWIER1 |= GPIO_PIN_14;
 8001c14:	60a8      	str	r0, [r5, #8]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001c16:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8001c1a:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8001c1e:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8001c22:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8001c26:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8001c2a:	eeb0 9a6d 	vmov.f32	s18, s27
		inE4Rold = inER;                           inE4Iold = inEI;
 8001c2e:	ed9d ca04 	vldr	s24, [sp, #16]
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8001c32:	eef0 9a4e 	vmov.f32	s19, s28
		inE4Rold = inER;                           inE4Iold = inEI;
 8001c36:	eddd ca05 	vldr	s25, [sp, #20]
		inE2Rold = inER;                           inE2Iold = inEI;
 8001c3a:	eeb0 fa4a 	vmov.f32	s30, s20
 8001c3e:	eef0 fa6a 	vmov.f32	s31, s21
	while(k--)
 8001c42:	3208      	adds	r2, #8
 8001c44:	3b01      	subs	r3, #1
 8001c46:	eef0 7a41 	vmov.f32	s15, s2
 8001c4a:	3108      	adds	r1, #8
 8001c4c:	4594      	cmp	ip, r2
 8001c4e:	eeb0 6a61 	vmov.f32	s12, s3
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	d059      	beq.n	8001d0a <ADC_Stream0_Handler+0x5d2>
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 8001c56:	eef0 1a60 	vmov.f32	s3, s1
 8001c5a:	eeb0 1a40 	vmov.f32	s2, s0
 8001c5e:	eeb0 7a42 	vmov.f32	s14, s4
 8001c62:	ed12 0a01 	vldr	s0, [r2, #-4]
 8001c66:	ed12 2a02 	vldr	s4, [r2, #-8]
 8001c6a:	eef0 6a62 	vmov.f32	s13, s5
 8001c6e:	ed51 0a01 	vldr	s1, [r1, #-4]
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8001c72:	07dd      	lsls	r5, r3, #31
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001c74:	ee72 2a07 	vadd.f32	s5, s4, s14
 8001c78:	eeb0 7a40 	vmov.f32	s14, s0
 8001c7c:	eea1 7a04 	vfma.f32	s14, s2, s8
 8001c80:	eea2 7aa4 	vfma.f32	s14, s5, s9
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 8001c84:	ed51 2a02 	vldr	s5, [r1, #-8]
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001c88:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8001c8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c90:	eeb0 7a60 	vmov.f32	s14, s1
 8001c94:	eea1 7a84 	vfma.f32	s14, s3, s8
 8001c98:	eea6 7aa4 	vfma.f32	s14, s13, s9
 8001c9c:	ee36 7a07 	vadd.f32	s14, s12, s14
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8001ca0:	f57f aeda 	bpl.w	8001a58 <ADC_Stream0_Handler+0x320>
			tmp1R = outR; tmp1I = outI;  // save the even element produced
 8001ca4:	eeb0 aa47 	vmov.f32	s20, s14
 8001ca8:	eef0 aa67 	vmov.f32	s21, s15
 8001cac:	e7c9      	b.n	8001c42 <ADC_Stream0_Handler+0x50a>
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001cae:	eef0 5a48 	vmov.f32	s11, s16
 8001cb2:	eeb0 5a68 	vmov.f32	s10, s17
 8001cb6:	eeb0 8a47 	vmov.f32	s16, s14
 8001cba:	eef0 8a67 	vmov.f32	s17, s15
			tmp2R = outR; tmp2I = outI;  // save the even element produced
 8001cbe:	eef0 da46 	vmov.f32	s27, s12
 8001cc2:	eeb0 ea66 	vmov.f32	s28, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 8001cc6:	eeb0 fa4a 	vmov.f32	s30, s20
 8001cca:	eef0 fa6a 	vmov.f32	s31, s21
 8001cce:	e7b8      	b.n	8001c42 <ADC_Stream0_Handler+0x50a>
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001cd0:	eef0 3a4b 	vmov.f32	s7, s22
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 8001cd4:	edcd 9a04 	vstr	s19, [sp, #16]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001cd8:	eeb0 3a6b 	vmov.f32	s6, s23
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 8001cdc:	ed8d 9a05 	vstr	s18, [sp, #20]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001ce0:	eef0 5a48 	vmov.f32	s11, s16
 8001ce4:	eeb0 5a68 	vmov.f32	s10, s17
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001ce8:	eeb0 ba46 	vmov.f32	s22, s12
 8001cec:	eef0 ba66 	vmov.f32	s23, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001cf0:	eeb0 8a47 	vmov.f32	s16, s14
 8001cf4:	eef0 8a67 	vmov.f32	s17, s15
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8001cf8:	eeb0 9a6d 	vmov.f32	s18, s27
 8001cfc:	eef0 9a4e 	vmov.f32	s19, s28
		inE2Rold = inER;                           inE2Iold = inEI;
 8001d00:	eeb0 fa4a 	vmov.f32	s30, s20
 8001d04:	eef0 fa6a 	vmov.f32	s31, s21
 8001d08:	e79b      	b.n	8001c42 <ADC_Stream0_Handler+0x50a>
 8001d0a:	4b71      	ldr	r3, [pc, #452]	; (8001ed0 <ADC_Stream0_Handler+0x798>)
 8001d0c:	eddd 7a02 	vldr	s15, [sp, #8]
 8001d10:	ed83 2a00 	vstr	s4, [r3]
 8001d14:	4b6f      	ldr	r3, [pc, #444]	; (8001ed4 <ADC_Stream0_Handler+0x79c>)
 8001d16:	ed8a 0a00 	vstr	s0, [sl]
 8001d1a:	edc3 0a00 	vstr	s1, [r3]
 8001d1e:	4b6e      	ldr	r3, [pc, #440]	; (8001ed8 <ADC_Stream0_Handler+0x7a0>)
 8001d20:	ed89 1a00 	vstr	s2, [r9]
 8001d24:	edc3 1a00 	vstr	s3, [r3]
 8001d28:	4b6c      	ldr	r3, [pc, #432]	; (8001edc <ADC_Stream0_Handler+0x7a4>)
 8001d2a:	4a6d      	ldr	r2, [pc, #436]	; (8001ee0 <ADC_Stream0_Handler+0x7a8>)
 8001d2c:	edc3 2a00 	vstr	s5, [r3]
 8001d30:	4b6c      	ldr	r3, [pc, #432]	; (8001ee4 <ADC_Stream0_Handler+0x7ac>)
 8001d32:	edc3 8a00 	vstr	s17, [r3]
 8001d36:	4b6c      	ldr	r3, [pc, #432]	; (8001ee8 <ADC_Stream0_Handler+0x7b0>)
 8001d38:	ed83 5a00 	vstr	s10, [r3]
 8001d3c:	4b6b      	ldr	r3, [pc, #428]	; (8001eec <ADC_Stream0_Handler+0x7b4>)
 8001d3e:	edc3 fa00 	vstr	s31, [r3]
 8001d42:	4b6b      	ldr	r3, [pc, #428]	; (8001ef0 <ADC_Stream0_Handler+0x7b8>)
 8001d44:	ed83 8a00 	vstr	s16, [r3]
 8001d48:	4b6a      	ldr	r3, [pc, #424]	; (8001ef4 <ADC_Stream0_Handler+0x7bc>)
 8001d4a:	edc3 5a00 	vstr	s11, [r3]
 8001d4e:	4b6a      	ldr	r3, [pc, #424]	; (8001ef8 <ADC_Stream0_Handler+0x7c0>)
 8001d50:	ed83 fa00 	vstr	s30, [r3]
 8001d54:	4b69      	ldr	r3, [pc, #420]	; (8001efc <ADC_Stream0_Handler+0x7c4>)
 8001d56:	edc3 ba00 	vstr	s23, [r3]
 8001d5a:	4b69      	ldr	r3, [pc, #420]	; (8001f00 <ADC_Stream0_Handler+0x7c8>)
 8001d5c:	ed83 3a00 	vstr	s6, [r3]
 8001d60:	4b68      	ldr	r3, [pc, #416]	; (8001f04 <ADC_Stream0_Handler+0x7cc>)
 8001d62:	edc3 9a00 	vstr	s19, [r3]
 8001d66:	4b68      	ldr	r3, [pc, #416]	; (8001f08 <ADC_Stream0_Handler+0x7d0>)
 8001d68:	ed83 ba00 	vstr	s22, [r3]
 8001d6c:	4b67      	ldr	r3, [pc, #412]	; (8001f0c <ADC_Stream0_Handler+0x7d4>)
 8001d6e:	edc3 3a00 	vstr	s7, [r3]
 8001d72:	4b67      	ldr	r3, [pc, #412]	; (8001f10 <ADC_Stream0_Handler+0x7d8>)
 8001d74:	ed83 9a00 	vstr	s18, [r3]
 8001d78:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <ADC_Stream0_Handler+0x7dc>)
 8001d7a:	edc3 ea00 	vstr	s29, [r3]
 8001d7e:	4b66      	ldr	r3, [pc, #408]	; (8001f18 <ADC_Stream0_Handler+0x7e0>)
 8001d80:	edc3 7a00 	vstr	s15, [r3]
 8001d84:	4b65      	ldr	r3, [pc, #404]	; (8001f1c <ADC_Stream0_Handler+0x7e4>)
 8001d86:	eddd 7a01 	vldr	s15, [sp, #4]
 8001d8a:	edc3 ca00 	vstr	s25, [r3]
 8001d8e:	4b64      	ldr	r3, [pc, #400]	; (8001f20 <ADC_Stream0_Handler+0x7e8>)
 8001d90:	ed83 da00 	vstr	s26, [r3]
 8001d94:	4b63      	ldr	r3, [pc, #396]	; (8001f24 <ADC_Stream0_Handler+0x7ec>)
 8001d96:	edc3 7a00 	vstr	s15, [r3]
 8001d9a:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <ADC_Stream0_Handler+0x7f0>)
 8001d9c:	eddd 7a03 	vldr	s15, [sp, #12]
 8001da0:	ed83 ca00 	vstr	s24, [r3]
 8001da4:	4b61      	ldr	r3, [pc, #388]	; (8001f2c <ADC_Stream0_Handler+0x7f4>)
 8001da6:	edc3 7a00 	vstr	s15, [r3]
 8001daa:	eddd 7a08 	vldr	s15, [sp, #32]
 8001dae:	4b60      	ldr	r3, [pc, #384]	; (8001f30 <ADC_Stream0_Handler+0x7f8>)
 8001db0:	edc3 7a00 	vstr	s15, [r3]
 8001db4:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8001db8:	4b5e      	ldr	r3, [pc, #376]	; (8001f34 <ADC_Stream0_Handler+0x7fc>)
 8001dba:	edc3 7a00 	vstr	s15, [r3]
 8001dbe:	eddd 7a00 	vldr	s15, [sp]
 8001dc2:	4b5d      	ldr	r3, [pc, #372]	; (8001f38 <ADC_Stream0_Handler+0x800>)
 8001dc4:	f8ab e000 	strh.w	lr, [fp]
 8001dc8:	edc3 7a00 	vstr	s15, [r3]
 8001dcc:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8001dd0:	4b5a      	ldr	r3, [pc, #360]	; (8001f3c <ADC_Stream0_Handler+0x804>)
 8001dd2:	edc3 7a00 	vstr	s15, [r3]
 8001dd6:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8001dda:	4b59      	ldr	r3, [pc, #356]	; (8001f40 <ADC_Stream0_Handler+0x808>)
 8001ddc:	edc3 7a00 	vstr	s15, [r3]
 8001de0:	eddd 7a06 	vldr	s15, [sp, #24]
 8001de4:	4b57      	ldr	r3, [pc, #348]	; (8001f44 <ADC_Stream0_Handler+0x80c>)
 8001de6:	edc3 7a00 	vstr	s15, [r3]
 8001dea:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8001dee:	4b56      	ldr	r3, [pc, #344]	; (8001f48 <ADC_Stream0_Handler+0x810>)
 8001df0:	edc8 7a00 	vstr	s15, [r8]
 8001df4:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8001df8:	edc7 7a00 	vstr	s15, [r7]
 8001dfc:	eddd 7a07 	vldr	s15, [sp, #28]
 8001e00:	edc6 7a00 	vstr	s15, [r6]
 8001e04:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8001e08:	edc3 7a00 	vstr	s15, [r3]
 8001e0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e10:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8001e14:	8023      	strh	r3, [r4, #0]
 8001e16:	edc2 7a00 	vstr	s15, [r2]
		}

		// LED_YELLOW_OFF;

	}
 8001e1a:	b015      	add	sp, #84	; 0x54
 8001e1c:	ecbd 8b10 	vpop	{d8-d15}
 8001e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001e24:	eef0 3a4b 	vmov.f32	s7, s22
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001e28:	ed8d da01 	vstr	s26, [sp, #4]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001e2c:	eeb0 3a6b 	vmov.f32	s6, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001e30:	edcd ea02 	vstr	s29, [sp, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001e34:	eef0 5a48 	vmov.f32	s11, s16
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 8001e38:	edcd ca10 	vstr	s25, [sp, #64]	; 0x40
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001e3c:	eeb0 5a68 	vmov.f32	s10, s17
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 8001e40:	ed8d ca11 	vstr	s24, [sp, #68]	; 0x44
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001e44:	eeb0 da69 	vmov.f32	s26, s19
 8001e48:	eef0 ea49 	vmov.f32	s29, s18
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001e4c:	eeb0 ba46 	vmov.f32	s22, s12
 8001e50:	eef0 ba66 	vmov.f32	s23, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001e54:	eeb0 8a47 	vmov.f32	s16, s14
 8001e58:	eef0 8a67 	vmov.f32	s17, s15
 8001e5c:	e6e5      	b.n	8001c2a <ADC_Stream0_Handler+0x4f2>
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001e5e:	eddd 5a00 	vldr	s11, [sp]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001e62:	eef0 3a4b 	vmov.f32	s7, s22
 8001e66:	eeb0 3a6b 	vmov.f32	s6, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001e6a:	ed8d da01 	vstr	s26, [sp, #4]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001e6e:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001e72:	eeb0 da69 	vmov.f32	s26, s19
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001e76:	eddd 5a03 	vldr	s11, [sp, #12]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001e7a:	eeb0 ba46 	vmov.f32	s22, s12
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001e7e:	edcd ea02 	vstr	s29, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001e82:	eef0 ba66 	vmov.f32	s23, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001e86:	edcd 5a08 	vstr	s11, [sp, #32]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001e8a:	eef0 ea49 	vmov.f32	s29, s18
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001e8e:	eef0 5a48 	vmov.f32	s11, s16
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001e92:	edcd ca00 	vstr	s25, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001e96:	eeb0 8a47 	vmov.f32	s16, s14
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001e9a:	ed8d ca03 	vstr	s24, [sp, #12]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001e9e:	eeb0 5a68 	vmov.f32	s10, s17
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001ea2:	edcd fa13 	vstr	s31, [sp, #76]	; 0x4c
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001ea6:	eef0 8a67 	vmov.f32	s17, s15
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001eaa:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8001eae:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8001eb2:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8001eb6:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 8001eba:	e6b2      	b.n	8001c22 <ADC_Stream0_Handler+0x4ea>
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1);
 8001ebc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001ec0:	1c51      	adds	r1, r2, #1
 8001ec2:	e4ab      	b.n	800181c <ADC_Stream0_Handler+0xe4>
 8001ec4:	2000b000 	.word	0x2000b000
 8001ec8:	2000d000 	.word	0x2000d000
 8001ecc:	34000000 	.word	0x34000000
 8001ed0:	24000674 	.word	0x24000674
 8001ed4:	240006a0 	.word	0x240006a0
 8001ed8:	240006a4 	.word	0x240006a4
 8001edc:	24000670 	.word	0x24000670
 8001ee0:	24000698 	.word	0x24000698
 8001ee4:	240006b8 	.word	0x240006b8
 8001ee8:	240006bc 	.word	0x240006bc
 8001eec:	2400067c 	.word	0x2400067c
 8001ef0:	240006b0 	.word	0x240006b0
 8001ef4:	240006b4 	.word	0x240006b4
 8001ef8:	24000678 	.word	0x24000678
 8001efc:	240006c8 	.word	0x240006c8
 8001f00:	240006cc 	.word	0x240006cc
 8001f04:	24000684 	.word	0x24000684
 8001f08:	240006c0 	.word	0x240006c0
 8001f0c:	240006c4 	.word	0x240006c4
 8001f10:	24000680 	.word	0x24000680
 8001f14:	240006d8 	.word	0x240006d8
 8001f18:	240006dc 	.word	0x240006dc
 8001f1c:	2400068c 	.word	0x2400068c
 8001f20:	240006d0 	.word	0x240006d0
 8001f24:	240006d4 	.word	0x240006d4
 8001f28:	24000688 	.word	0x24000688
 8001f2c:	240006e8 	.word	0x240006e8
 8001f30:	240006ec 	.word	0x240006ec
 8001f34:	24000694 	.word	0x24000694
 8001f38:	240006e0 	.word	0x240006e0
 8001f3c:	240006e4 	.word	0x240006e4
 8001f40:	24000690 	.word	0x24000690
 8001f44:	240006f8 	.word	0x240006f8
 8001f48:	240006f4 	.word	0x240006f4
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001f4c:	eddd 5a06 	vldr	s11, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001f50:	eeb0 5a68 	vmov.f32	s10, s17
 8001f54:	eef0 8a67 	vmov.f32	s17, s15
		inE6Rold = inER;                           inE6Iold = inEI;
 8001f58:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001f5c:	edcd 5a0c 	vstr	s11, [sp, #48]	; 0x30
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001f60:	eef0 3a4b 	vmov.f32	s7, s22
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001f64:	eddd 5a00 	vldr	s11, [sp]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001f68:	eeb0 3a6b 	vmov.f32	s6, s23
		inE6Rold = inER;                           inE6Iold = inEI;
 8001f6c:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001f70:	eeb0 ba46 	vmov.f32	s22, s12
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001f74:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001f78:	eef0 ba66 	vmov.f32	s23, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001f7c:	eddd 5a03 	vldr	s11, [sp, #12]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001f80:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001f84:	edcd 5a08 	vstr	s11, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001f88:	eef0 5a48 	vmov.f32	s11, s16
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001f8c:	ed9d 8a09 	vldr	s16, [sp, #36]	; 0x24
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001f90:	ed8d da01 	vstr	s26, [sp, #4]
 8001f94:	eeb0 da69 	vmov.f32	s26, s19
 8001f98:	edcd ea02 	vstr	s29, [sp, #8]
 8001f9c:	eef0 ea49 	vmov.f32	s29, s18
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001fa0:	ed8d 8a06 	vstr	s16, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001fa4:	eeb0 8a47 	vmov.f32	s16, s14
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001fa8:	edcd fa07 	vstr	s31, [sp, #28]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001fac:	edcd ca00 	vstr	s25, [sp]
 8001fb0:	ed8d ca03 	vstr	s24, [sp, #12]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001fb4:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8001fb8:	e77b      	b.n	8001eb2 <ADC_Stream0_Handler+0x77a>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
 8001fba:	4a06      	ldr	r2, [pc, #24]	; (8001fd4 <ADC_Stream0_Handler+0x89c>)
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <ADC_Stream0_Handler+0x8a0>)
 8001fbe:	ed92 0a00 	vldr	s0, [r2]
 8001fc2:	edd3 7a00 	vldr	s15, [r3]
 8001fc6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001fca:	f000 f807 	bl	8001fdc <SDR_ComputeLO>
 8001fce:	f7ff bbd0 	b.w	8001772 <ADC_Stream0_Handler+0x3a>
 8001fd2:	bf00      	nop
 8001fd4:	24007258 	.word	0x24007258
 8001fd8:	24008c34 	.word	0x24008c34

08001fdc <SDR_ComputeLO>:

#include "Globals.h"

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 8001fdc:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
	static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f,
			ypi, ypq, tmpi, gain=1.f;

	if (oldfreq != freq)
 8001fde:	4b50      	ldr	r3, [pc, #320]	; (8002120 <SDR_ComputeLO+0x144>)
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	eef4 7a40 	vcmp.f32	s15, s0
{
 8001fe8:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 8001fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff0:	d173      	bne.n	80020da <SDR_ComputeLO+0xfe>
	// Coupled Quadrature Oscillator with level stabilization
	while(k)
	{                    
		// loop partially unrolled for performance

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ff2:	4a4c      	ldr	r2, [pc, #304]	; (8002124 <SDR_ComputeLO+0x148>)
 8001ff4:	4b4c      	ldr	r3, [pc, #304]	; (8002128 <SDR_ComputeLO+0x14c>)
 8001ff6:	ed92 8a00 	vldr	s16, [r2]
 8001ffa:	ed93 7a00 	vldr	s14, [r3]
 8001ffe:	4d4b      	ldr	r5, [pc, #300]	; (800212c <SDR_ComputeLO+0x150>)
 8002000:	4c4b      	ldr	r4, [pc, #300]	; (8002130 <SDR_ComputeLO+0x154>)
 8002002:	484c      	ldr	r0, [pc, #304]	; (8002134 <SDR_ComputeLO+0x158>)
 8002004:	4b4c      	ldr	r3, [pc, #304]	; (8002138 <SDR_ComputeLO+0x15c>)
 8002006:	edd5 5a00 	vldr	s11, [r5]
 800200a:	edd4 7a00 	vldr	s15, [r4]
 800200e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8002012:	edd0 6a00 	vldr	s13, [r0]
 8002016:	4a49      	ldr	r2, [pc, #292]	; (800213c <SDR_ComputeLO+0x160>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002018:	ee27 6a88 	vmul.f32	s12, s15, s16
	while(k)
 800201c:	3210      	adds	r2, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800201e:	ee67 7a67 	vnmul.f32	s15, s14, s15
	while(k)
 8002022:	3310      	adds	r3, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002024:	eea5 6a87 	vfma.f32	s12, s11, s14
	while(k)
 8002028:	428b      	cmp	r3, r1
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800202a:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800202e:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002032:	ee67 7aa6 	vmul.f32	s15, s15, s13
		ym1i = tmpi;

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002036:	ee26 5a08 	vmul.f32	s10, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800203a:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800203e:	ee67 5a46 	vnmul.f32	s11, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002042:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002046:	eea7 5a87 	vfma.f32	s10, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800204a:	eee7 5a88 	vfma.f32	s11, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800204e:	ee26 5a85 	vmul.f32	s10, s13, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002052:	ee66 5aa5 	vmul.f32	s11, s13, s11
		ym1i = tmpi;

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002056:	ee25 6a08 	vmul.f32	s12, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800205a:	ed02 5a07 	vstr	s10, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800205e:	ee67 7a45 	vnmul.f32	s15, s14, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002062:	ed43 5a07 	vstr	s11, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002066:	eea5 6a87 	vfma.f32	s12, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800206a:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800206e:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002072:	ee66 7aa7 	vmul.f32	s15, s13, s15
		ym1i = tmpi;

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002076:	ee66 5a08 	vmul.f32	s11, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800207a:	ed02 6a06 	vstr	s12, [r2, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800207e:	ee27 5a46 	vnmul.f32	s10, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002082:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002086:	eeb0 6a65 	vmov.f32	s12, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800208a:	eea7 5a88 	vfma.f32	s10, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800208e:	eea7 6a87 	vfma.f32	s12, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002092:	ee66 5a85 	vmul.f32	s11, s13, s10
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002096:	ee66 7a86 	vmul.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800209a:	ed43 5a05 	vstr	s11, [r3, #-20]	; 0xffffffec
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800209e:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 80020a2:	d1b9      	bne.n	8002018 <SDR_ComputeLO+0x3c>
		ym1i = tmpi;

		k--;
	}
	// compute the gain to be applied to stabilize the level
	gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 80020a4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80020a8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002140 <SDR_ComputeLO+0x164>
 80020ac:	edc4 7a00 	vstr	s15, [r4]
 80020b0:	eddf 4a24 	vldr	s9, [pc, #144]	; 8002144 <SDR_ComputeLO+0x168>
 80020b4:	eee5 6a05 	vfma.f32	s13, s10, s10
 80020b8:	4a23      	ldr	r2, [pc, #140]	; (8002148 <SDR_ComputeLO+0x16c>)
 80020ba:	4b24      	ldr	r3, [pc, #144]	; (800214c <SDR_ComputeLO+0x170>)
 80020bc:	edc5 5a00 	vstr	s11, [r5]
 80020c0:	ed82 5a00 	vstr	s10, [r2]
 80020c4:	ed83 6a00 	vstr	s12, [r3]
 80020c8:	ee77 7a66 	vsub.f32	s15, s14, s13
}	
 80020cc:	ecbd 8b04 	vpop	{d8-d9}
	gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 80020d0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80020d4:	edc0 7a00 	vstr	s15, [r0]
}	
 80020d8:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 80020da:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8002150 <SDR_ComputeLO+0x174>
 80020de:	4a1d      	ldr	r2, [pc, #116]	; (8002154 <SDR_ComputeLO+0x178>)
 80020e0:	ee60 7a27 	vmul.f32	s15, s0, s15
		oldfreq  =  freq;
 80020e4:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 80020e8:	ed92 7a00 	vldr	s14, [r2]
 80020ec:	ee87 9a87 	vdiv.f32	s18, s15, s14
 80020f0:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 80020f4:	eeb0 0b49 	vmov.f64	d0, d9
 80020f8:	f011 fed2 	bl	8013ea0 <cos>
 80020fc:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <SDR_ComputeLO+0x148>)
		sintheta = -sin(TWOPI * freq / SamplingRate);
 8002102:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 8002106:	ed83 8a00 	vstr	s16, [r3]
		sintheta = -sin(TWOPI * freq / SamplingRate);
 800210a:	f011 ff15 	bl	8013f38 <sin>
 800210e:	eeb7 7bc0 	vcvt.f32.f64	s14, d0
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <SDR_ComputeLO+0x14c>)
 8002114:	eeb1 7a47 	vneg.f32	s14, s14
 8002118:	ed83 7a00 	vstr	s14, [r3]
 800211c:	e76f      	b.n	8001ffe <SDR_ComputeLO+0x22>
 800211e:	bf00      	nop
 8002120:	24000204 	.word	0x24000204
 8002124:	24000704 	.word	0x24000704
 8002128:	2400070c 	.word	0x2400070c
 800212c:	24000208 	.word	0x24000208
 8002130:	24000724 	.word	0x24000724
 8002134:	24000200 	.word	0x24000200
 8002138:	24006a68 	.word	0x24006a68
 800213c:	24006268 	.word	0x24006268
 8002140:	46000200 	.word	0x46000200
 8002144:	39000000 	.word	0x39000000
 8002148:	24000728 	.word	0x24000728
 800214c:	2400072c 	.word	0x2400072c
 8002150:	40c90fdb 	.word	0x40c90fdb
 8002154:	24007288 	.word	0x24007288

08002158 <SDR_2R_toC_f32>:

	// loop Unrolling
	blkCnt = blockSize >> 2u;

	// Compute 4 outputs at a time
	while(blkCnt)
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	d028      	beq.n	80021ae <SDR_2R_toC_f32+0x56>
 800215c:	3010      	adds	r0, #16
 800215e:	3110      	adds	r1, #16
 8002160:	3220      	adds	r2, #32
	{
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002162:	f850 cc10 	ldr.w	ip, [r0, #-16]
	while(blkCnt)
 8002166:	3110      	adds	r1, #16
 8002168:	3010      	adds	r0, #16
 800216a:	3b01      	subs	r3, #1
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800216c:	f842 cc20 	str.w	ip, [r2, #-32]
	while(blkCnt)
 8002170:	f102 0220 	add.w	r2, r2, #32
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8002174:	f851 cc20 	ldr.w	ip, [r1, #-32]
 8002178:	f842 cc3c 	str.w	ip, [r2, #-60]
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800217c:	f850 cc1c 	ldr.w	ip, [r0, #-28]
 8002180:	f842 cc38 	str.w	ip, [r2, #-56]
 8002184:	f851 cc1c 	ldr.w	ip, [r1, #-28]
 8002188:	f842 cc34 	str.w	ip, [r2, #-52]
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800218c:	f850 cc18 	ldr.w	ip, [r0, #-24]
 8002190:	f842 cc30 	str.w	ip, [r2, #-48]
 8002194:	f851 cc18 	ldr.w	ip, [r1, #-24]
 8002198:	f842 cc2c 	str.w	ip, [r2, #-44]
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800219c:	f850 cc14 	ldr.w	ip, [r0, #-20]
 80021a0:	f842 cc28 	str.w	ip, [r2, #-40]
 80021a4:	f851 cc14 	ldr.w	ip, [r1, #-20]
 80021a8:	f842 cc24 	str.w	ip, [r2, #-36]
	while(blkCnt)
 80021ac:	d1d9      	bne.n	8002162 <SDR_2R_toC_f32+0xa>

		blkCnt--;
	}
}
 80021ae:	4770      	bx	lr

080021b0 <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 80021b0:	4b35      	ldr	r3, [pc, #212]	; (8002288 <SDR_downconvert_f32+0xd8>)
	float  tmp1, tmp2, tmp3, tmp4, *LOI=LO_R, *LOR=LO_I;
	uint16_t *pt = signal;

	// loop Unrolling
	blkCnt = BSIZE >> 2u;   // loop unrolling.  Compute 4 outputs at a time
	while(blkCnt)
 80021b2:	3110      	adds	r1, #16
 80021b4:	3210      	adds	r2, #16
 80021b6:	3008      	adds	r0, #8
		tmp2=((*(pt+1)-offset)) / 2048.f;
		tmp1 = tmp2;
		tmp4=((*(pt+3)-offset)) / 2048.f;
		tmp3 = tmp4;
#else
		tmp2=((*(pt+1)-offset)) / 2048.f;
 80021b8:	eddf 5a34 	vldr	s11, [pc, #208]	; 800228c <SDR_downconvert_f32+0xdc>
 80021bc:	f503 6c00 	add.w	ip, r3, #2048	; 0x800
{
 80021c0:	b510      	push	{r4, lr}
 80021c2:	4c33      	ldr	r4, [pc, #204]	; (8002290 <SDR_downconvert_f32+0xe0>)
		tmp1=((*(pt)  -offset)) / 2048.f;
 80021c4:	f830 ec08 	ldrh.w	lr, [r0, #-8]
	while(blkCnt)
 80021c8:	3110      	adds	r1, #16
		tmp4=((*(pt+3)-offset)) / 2048.f;
		tmp3=((*(pt+2)-offset)) / 2048.f;
#endif


		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 80021ca:	ed13 5a04 	vldr	s10, [r3, #-16]
	while(blkCnt)
 80021ce:	3410      	adds	r4, #16
		tmp1=((*(pt)  -offset)) / 2048.f;
 80021d0:	ee06 ea10 	vmov	s12, lr
		tmp2=((*(pt+1)-offset)) / 2048.f;
 80021d4:	f830 ec06 	ldrh.w	lr, [r0, #-6]
	while(blkCnt)
 80021d8:	3310      	adds	r3, #16
 80021da:	3210      	adds	r2, #16
		tmp1=((*(pt)  -offset)) / 2048.f;
 80021dc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
		tmp2=((*(pt+1)-offset)) / 2048.f;
 80021e0:	ee06 ea90 	vmov	s13, lr
		tmp4=((*(pt+3)-offset)) / 2048.f;
 80021e4:	f830 ec02 	ldrh.w	lr, [r0, #-2]
	while(blkCnt)
 80021e8:	4563      	cmp	r3, ip
		tmp2=((*(pt+1)-offset)) / 2048.f;
 80021ea:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	while(blkCnt)
 80021ee:	f100 0008 	add.w	r0, r0, #8
		tmp1=((*(pt)  -offset)) / 2048.f;
 80021f2:	ee36 6a40 	vsub.f32	s12, s12, s0
		tmp4=((*(pt+3)-offset)) / 2048.f;
 80021f6:	ee07 ea90 	vmov	s15, lr
		tmp3=((*(pt+2)-offset)) / 2048.f;
 80021fa:	f830 ec0c 	ldrh.w	lr, [r0, #-12]
		tmp2=((*(pt+1)-offset)) / 2048.f;
 80021fe:	ee76 6ac0 	vsub.f32	s13, s13, s0
		tmp1=((*(pt)  -offset)) / 2048.f;
 8002202:	ee26 6a25 	vmul.f32	s12, s12, s11
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8002206:	ee07 ea10 	vmov	s14, lr
		tmp4=((*(pt+3)-offset)) / 2048.f;
 800220a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		tmp2=((*(pt+1)-offset)) / 2048.f;
 800220e:	ee66 6aa5 	vmul.f32	s13, s13, s11
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002212:	ee25 5a06 	vmul.f32	s10, s10, s12
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8002216:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		tmp4=((*(pt+3)-offset)) / 2048.f;
 800221a:	ee77 7ac0 	vsub.f32	s15, s15, s0
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 800221e:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 8002222:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8002226:	ee37 7a40 	vsub.f32	s14, s14, s0
		tmp4=((*(pt+3)-offset)) / 2048.f;
 800222a:	ee67 7aa5 	vmul.f32	s15, s15, s11
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 800222e:	ee25 6a06 	vmul.f32	s12, s10, s12
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8002232:	ee27 7a25 	vmul.f32	s14, s14, s11
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002236:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		*zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 800223a:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 800223e:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002242:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 8002246:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 800224a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800224e:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		*zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 8002252:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8002256:	ee66 6a87 	vmul.f32	s13, s13, s14
 800225a:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 800225e:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 8002262:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002266:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		*zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 800226a:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 800226e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002272:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 8002276:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 800227a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227e:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(blkCnt)
 8002282:	d19f      	bne.n	80021c4 <SDR_downconvert_f32+0x14>
		pt += 4;
		blkCnt--;
	}	
}
 8002284:	bd10      	pop	{r4, pc}
 8002286:	bf00      	nop
 8002288:	24006268 	.word	0x24006268
 800228c:	3a000000 	.word	0x3a000000
 8002290:	24006a68 	.word	0x24006a68

08002294 <SDR_float_to_DAC_audio>:
	short *AudioBuffer;

	AudioBuffer = pDst;

	/* loop Unrolling */
	blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 8002294:	0893      	lsrs	r3, r2, #2
	while(blkCnt--)
 8002296:	2b00      	cmp	r3, #0
 8002298:	d058      	beq.n	800234c <SDR_float_to_DAC_audio+0xb8>
 800229a:	f103 3cff 	add.w	ip, r3, #4294967295
	{
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800229e:	4b36      	ldr	r3, [pc, #216]	; (8002378 <SDR_float_to_DAC_audio+0xe4>)
 80022a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022a4:	fa1f fc8c 	uxth.w	ip, ip
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	f100 0310 	add.w	r3, r0, #16
 80022b0:	3020      	adds	r0, #32
 80022b2:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
 80022b6:	f101 0008 	add.w	r0, r1, #8
{
 80022ba:	b500      	push	{lr}
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80022bc:	eeb0 5a47 	vmov.f32	s10, s14
 80022c0:	ed53 5a04 	vldr	s11, [r3, #-16]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80022c4:	ed13 6a03 	vldr	s12, [r3, #-12]
	while(blkCnt--)
 80022c8:	3008      	adds	r0, #8
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80022ca:	ed53 6a02 	vldr	s13, [r3, #-8]
	while(blkCnt--)
 80022ce:	3310      	adds	r3, #16
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80022d0:	eea5 5aa7 	vfma.f32	s10, s11, s15
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80022d4:	ed53 4a05 	vldr	s9, [r3, #-20]	; 0xffffffec
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80022d8:	eef0 5a47 	vmov.f32	s11, s14
	while(blkCnt--)
 80022dc:	459c      	cmp	ip, r3
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80022de:	eee7 5a86 	vfma.f32	s11, s15, s12
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80022e2:	eeb0 6a47 	vmov.f32	s12, s14
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80022e6:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80022ea:	eea7 6aa6 	vfma.f32	s12, s15, s13
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80022ee:	eef0 6a47 	vmov.f32	s13, s14
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80022f2:	ee15 ea10 	vmov	lr, s10
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80022f6:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80022fa:	f820 ec10 	strh.w	lr, [r0, #-16]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80022fe:	eee7 6aa4 	vfma.f32	s13, s15, s9
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002302:	ee15 ea90 	vmov	lr, s11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002306:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800230a:	f820 ec0e 	strh.w	lr, [r0, #-14]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800230e:	ee16 ea10 	vmov	lr, s12
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002312:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002316:	f820 ec0c 	strh.w	lr, [r0, #-12]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800231a:	ee16 ea90 	vmov	lr, s13
 800231e:	f820 ec0a 	strh.w	lr, [r0, #-10]
	while(blkCnt--)
 8002322:	d1cb      	bne.n	80022bc <SDR_float_to_DAC_audio+0x28>
	}	

	// SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
	SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 8002324:	0093      	lsls	r3, r2, #2
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002326:	f001 021f 	and.w	r2, r1, #31
 800232a:	441a      	add	r2, r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800232c:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002330:	4812      	ldr	r0, [pc, #72]	; (800237c <SDR_float_to_DAC_audio+0xe8>)
 8002332:	440a      	add	r2, r1
 8002334:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002338:	3120      	adds	r1, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 800233a:	1a53      	subs	r3, r2, r1
 800233c:	2b00      	cmp	r3, #0
 800233e:	dcf9      	bgt.n	8002334 <SDR_float_to_DAC_audio+0xa0>
 8002340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002344:	f3bf 8f6f 	isb	sy
#endif
	return;
}	
 8002348:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( dsize > 0 ) { 
 800234c:	0093      	lsls	r3, r2, #2
 800234e:	b902      	cbnz	r2, 8002352 <SDR_float_to_DAC_audio+0xbe>
 8002350:	4770      	bx	lr
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002352:	f001 021f 	and.w	r2, r1, #31
 8002356:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002358:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800235c:	4807      	ldr	r0, [pc, #28]	; (800237c <SDR_float_to_DAC_audio+0xe8>)
 800235e:	440a      	add	r2, r1
 8002360:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002364:	3120      	adds	r1, #32
      } while ( op_size > 0 );
 8002366:	1a53      	subs	r3, r2, r1
 8002368:	2b00      	cmp	r3, #0
 800236a:	dcf9      	bgt.n	8002360 <SDR_float_to_DAC_audio+0xcc>
 800236c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002370:	f3bf 8f6f 	isb	sy
	return;
 8002374:	e7ec      	b.n	8002350 <SDR_float_to_DAC_audio+0xbc>
 8002376:	bf00      	nop
 8002378:	2400c9d0 	.word	0x2400c9d0
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <SDR_memcpy_f32>:

	// loop Unrolling
	blkCnt = blockSize >> 2u;

	// Compute 4 outputs at a time.
	while(blkCnt > 0u)
 8002380:	0892      	lsrs	r2, r2, #2
 8002382:	d016      	beq.n	80023b2 <SDR_memcpy_f32+0x32>
 8002384:	3110      	adds	r1, #16
 8002386:	3010      	adds	r0, #16
	{
		/* Copy and then store the results in the destination buffer */
		in1 = *pSrc++;  *pDst++ = in1;
 8002388:	f851 3c10 	ldr.w	r3, [r1, #-16]
	while(blkCnt > 0u)
 800238c:	3110      	adds	r1, #16
 800238e:	3a01      	subs	r2, #1
 8002390:	f100 0010 	add.w	r0, r0, #16
		in1 = *pSrc++;  *pDst++ = in1;
 8002394:	f840 3c20 	str.w	r3, [r0, #-32]
		in2 = *pSrc++;  *pDst++ = in2;
 8002398:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 800239c:	f840 3c1c 	str.w	r3, [r0, #-28]
		in3 = *pSrc++;  *pDst++ = in3;
 80023a0:	f851 3c18 	ldr.w	r3, [r1, #-24]
 80023a4:	f840 3c18 	str.w	r3, [r0, #-24]
		in4 = *pSrc++;  *pDst++ = in4;
 80023a8:	f851 3c14 	ldr.w	r3, [r1, #-20]
 80023ac:	f840 3c14 	str.w	r3, [r0, #-20]
	while(blkCnt > 0u)
 80023b0:	d1ea      	bne.n	8002388 <SDR_memcpy_f32+0x8>

		// Decrement the loop counter
		blkCnt--;
	}
}
 80023b2:	4770      	bx	lr

080023b4 <SDR_mirror_LSB>:
{
	uint32_t blkCnt;            /* loop counter */
	float *pbR, *pbI, *peR, *peI;

	// loop Unrolling */
	blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 80023b4:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

	pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 80023b6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

	//  Compute 4 outputs at a time.
	while(blkCnt--)
 80023ba:	2a01      	cmp	r2, #1
	pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 80023bc:	440b      	add	r3, r1
	while(blkCnt--)
 80023be:	f1a2 0102 	sub.w	r1, r2, #2
	pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 80023c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
	while(blkCnt--)
 80023c6:	d036      	beq.n	8002436 <SDR_mirror_LSB+0x82>
 80023c8:	f1a3 0220 	sub.w	r2, r3, #32
 80023cc:	f1a3 0c1c 	sub.w	ip, r3, #28
 80023d0:	f100 0328 	add.w	r3, r0, #40	; 0x28
 80023d4:	4402      	add	r2, r0
 80023d6:	4460      	add	r0, ip
	{
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80023d8:	f8d2 c020 	ldr.w	ip, [r2, #32]
	while(blkCnt--)
 80023dc:	3a20      	subs	r2, #32
 80023de:	3820      	subs	r0, #32
 80023e0:	3901      	subs	r1, #1
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80023e2:	f843 cc20 	str.w	ip, [r3, #-32]
	while(blkCnt--)
 80023e6:	3320      	adds	r3, #32
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80023e8:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
	while(blkCnt--)
 80023ec:	f1b1 3fff 	cmp.w	r1, #4294967295
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80023f0:	eef1 7a67 	vneg.f32	s15, s15
 80023f4:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80023f8:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
 80023fc:	f843 cc38 	str.w	ip, [r3, #-56]
 8002400:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 8002404:	eef1 7a67 	vneg.f32	s15, s15
 8002408:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 800240c:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
 8002410:	f843 cc30 	str.w	ip, [r3, #-48]
 8002414:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8002418:	eef1 7a67 	vneg.f32	s15, s15
 800241c:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002420:	f8d2 c028 	ldr.w	ip, [r2, #40]	; 0x28
 8002424:	f843 cc28 	str.w	ip, [r3, #-40]
 8002428:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 800242c:	eef1 7a67 	vneg.f32	s15, s15
 8002430:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 8002434:	d1d0      	bne.n	80023d8 <SDR_mirror_LSB+0x24>
	}
}
 8002436:	4770      	bx	lr

08002438 <SDR_compute_IIR_parms>:
#endif
	r = Qfactor;

	a1 = a2 = b0 = 0.f;
	r2 = r*r;
	wr = 2.f * cwpitch / rate * myPI;
 8002438:	492b      	ldr	r1, [pc, #172]	; (80024e8 <SDR_compute_IIR_parms+0xb0>)
 800243a:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80024ec <SDR_compute_IIR_parms+0xb4>
 800243e:	edd1 7a00 	vldr	s15, [r1]
	float rate = SamplingRate/256; //SamplingRate / decimation
 8002442:	4a2b      	ldr	r2, [pc, #172]	; (80024f0 <SDR_compute_IIR_parms+0xb8>)
	wr = 2.f * cwpitch / rate * myPI;
 8002444:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002448:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80024f4 <SDR_compute_IIR_parms+0xbc>
 800244c:	ed92 7a00 	vldr	s14, [r2]
{
 8002450:	b508      	push	{r3, lr}
 8002452:	ed2d 8b06 	vpush	{d8-d10}
	wr = 2.f * cwpitch / rate * myPI;
 8002456:	eec7 8a87 	vdiv.f32	s17, s15, s14
	r = Qfactor;
 800245a:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <SDR_compute_IIR_parms+0xc0>)
 800245c:	edd3 9a00 	vldr	s19, [r3]
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002460:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	r2 = r*r;
 8002464:	ee69 aaa9 	vmul.f32	s21, s19, s19
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002468:	ee39 aaa9 	vadd.f32	s20, s19, s19
 800246c:	ee3a 9a88 	vadd.f32	s18, s21, s16
	// (see the Proakis & Manolakis book)
	a1 = -2.f * r * cosw0;
	a2 = r2;
	// b0 is normalized for gain ~ 2dB on all the band
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002470:	ee38 8a69 	vsub.f32	s16, s16, s19
	wr = 2.f * cwpitch / rate * myPI;
 8002474:	ee68 8a80 	vmul.f32	s17, s17, s0
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002478:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 800247c:	f011 fd10 	bl	8013ea0 <cos>
 8002480:	ee8a 5a09 	vdiv.f32	s10, s20, s18
	a1 = -2.f * r * cosw0;
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <SDR_compute_IIR_parms+0xc4>)
	a2 = r2;
 8002486:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <SDR_compute_IIR_parms+0xc8>)
 8002488:	edc2 aa00 	vstr	s21, [r2]
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 800248c:	eeb0 6b40 	vmov.f64	d6, d0
	a1 = -2.f * r * cosw0;
 8002490:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002494:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8002498:	eeb7 aaca 	vcvt.f64.f32	d10, s20
	a1 = -2.f * r * cosw0;
 800249c:	ee69 7aa7 	vmul.f32	s15, s19, s15
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80024a0:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80024a4:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 80024a8:	ee25 6b06 	vmul.f64	d6, d5, d6
 80024ac:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
	a1 = -2.f * r * cosw0;
 80024b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024b4:	ed83 6a00 	vstr	s12, [r3]
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80024b8:	f011 fcf2 	bl	8013ea0 <cos>
 80024bc:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 80024c0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002504 <SDR_compute_IIR_parms+0xcc>
 80024c4:	4b10      	ldr	r3, [pc, #64]	; (8002508 <SDR_compute_IIR_parms+0xd0>)
 80024c6:	ee28 7a07 	vmul.f32	s14, s16, s14
 80024ca:	eeaa 6b40 	vfms.f64	d6, d10, d0
 80024ce:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 80024d2:	ecbd 8b06 	vpop	{d8-d10}
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80024d6:	eeb1 5bc6 	vsqrt.f64	d5, d6
 80024da:	ee27 7b05 	vmul.f64	d7, d7, d5
 80024de:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80024e2:	ed83 7a00 	vstr	s14, [r3]
}
 80024e6:	bd08      	pop	{r3, pc}
 80024e8:	24008c34 	.word	0x24008c34
 80024ec:	44000000 	.word	0x44000000
 80024f0:	24007288 	.word	0x24007288
 80024f4:	40490fdb 	.word	0x40490fdb
 80024f8:	24007280 	.word	0x24007280
 80024fc:	24008404 	.word	0x24008404
 8002500:	24008408 	.word	0x24008408
 8002504:	3f99999a 	.word	0x3f99999a
 8002508:	24008c2c 	.word	0x24008c2c

0800250c <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
	static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	register float x0, y0;
	uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 800250c:	0889      	lsrs	r1, r1, #2

	// Compute 4 outputs at a time, loop unrolled for performance
	while(blkCnt--)
 800250e:	2900      	cmp	r1, #0
 8002510:	d077      	beq.n	8002602 <SDR_CWPeak+0xf6>
 8002512:	1e4b      	subs	r3, r1, #1
 8002514:	f8df c104 	ldr.w	ip, [pc, #260]	; 800261c <SDR_CWPeak+0x110>
	{
		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002518:	493a      	ldr	r1, [pc, #232]	; (8002604 <SDR_CWPeak+0xf8>)
 800251a:	3010      	adds	r0, #16
 800251c:	4a3a      	ldr	r2, [pc, #232]	; (8002608 <SDR_CWPeak+0xfc>)
 800251e:	eddc 2a00 	vldr	s5, [ip]
 8002522:	ed91 6a00 	vldr	s12, [r1]
 8002526:	ed92 5a00 	vldr	s10, [r2]
{
 800252a:	b4f0      	push	{r4, r5, r6, r7}
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800252c:	4c37      	ldr	r4, [pc, #220]	; (800260c <SDR_CWPeak+0x100>)
 800252e:	4f38      	ldr	r7, [pc, #224]	; (8002610 <SDR_CWPeak+0x104>)
 8002530:	edd4 4a00 	vldr	s9, [r4]
 8002534:	4e37      	ldr	r6, [pc, #220]	; (8002614 <SDR_CWPeak+0x108>)
 8002536:	4d38      	ldr	r5, [pc, #224]	; (8002618 <SDR_CWPeak+0x10c>)
 8002538:	eeb1 2a64 	vneg.f32	s4, s9
 800253c:	ed97 7a00 	vldr	s14, [r7]
 8002540:	edd6 5a00 	vldr	s11, [r6]
 8002544:	edd5 6a00 	vldr	s13, [r5]
 8002548:	ee66 3a47 	vnmul.f32	s7, s12, s14
 800254c:	ed10 7a04 	vldr	s14, [r0, #-16]
		y2a = y1a;
		y1a = y0;
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002550:	ee26 4a66 	vnmul.f32	s8, s12, s13
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;

		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002554:	ed50 7a03 	vldr	s15, [r0, #-12]
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;

		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002558:	ed50 6a02 	vldr	s13, [r0, #-8]
	while(blkCnt--)
 800255c:	3010      	adds	r0, #16
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800255e:	eee2 3a22 	vfma.f32	s7, s4, s5
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;

		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002562:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002566:	eea2 4a25 	vfma.f32	s8, s4, s11
	while(blkCnt--)
 800256a:	3b01      	subs	r3, #1
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002570:	eee7 3a05 	vfma.f32	s7, s14, s10
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002574:	eea3 4a85 	vfma.f32	s8, s7, s10
		*buf++ = y0;
 8002578:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800257c:	ed92 5a00 	vldr	s10, [r2]
 8002580:	ed91 6a00 	vldr	s12, [r1]
 8002584:	ee65 7a27 	vmul.f32	s15, s10, s15
 8002588:	edd4 4a00 	vldr	s9, [r4]
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800258c:	ee25 7a26 	vmul.f32	s14, s10, s13
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002590:	ee65 6a03 	vmul.f32	s13, s10, s6
 8002594:	eee6 7a62 	vfms.f32	s15, s12, s5
 8002598:	eea6 7a63 	vfms.f32	s14, s12, s7
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800259c:	eeb1 2a64 	vneg.f32	s4, s9
 80025a0:	eee4 7ae3 	vfms.f32	s15, s9, s7
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80025a4:	eea4 7ae7 	vfms.f32	s14, s9, s15
 80025a8:	eee6 6a67 	vfms.f32	s13, s12, s15
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80025ac:	ee65 7a27 	vmul.f32	s15, s10, s15
 80025b0:	eee4 7ac4 	vfms.f32	s15, s9, s8
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80025b4:	eee4 6ac7 	vfms.f32	s13, s9, s14
 80025b8:	eef0 2a66 	vmov.f32	s5, s13
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80025bc:	ee65 6a07 	vmul.f32	s13, s10, s14
 80025c0:	eee6 6a44 	vfms.f32	s13, s12, s8
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80025c4:	eeb0 4a67 	vmov.f32	s8, s15
 80025c8:	eed6 7a25 	vfnms.f32	s15, s12, s11
 80025cc:	eea6 4a65 	vfms.f32	s8, s12, s11
		y2a = y1a;
		y1a = y0;
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80025d0:	ee65 5a22 	vmul.f32	s11, s10, s5
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80025d4:	eee4 6aa7 	vfma.f32	s13, s9, s15
 80025d8:	eee6 5a44 	vfms.f32	s11, s12, s8
		*buf++ = y0;
 80025dc:	ed00 4a07 	vstr	s8, [r0, #-28]	; 0xffffffe4
		*buf++ = y0;
 80025e0:	ed40 6a06 	vstr	s13, [r0, #-24]	; 0xffffffe8
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80025e4:	eee4 5ae6 	vfms.f32	s11, s9, s13
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;
 80025e8:	ed40 5a05 	vstr	s11, [r0, #-20]	; 0xffffffec
	while(blkCnt--)
 80025ec:	d1ac      	bne.n	8002548 <SDR_CWPeak+0x3c>
 80025ee:	ed87 7a00 	vstr	s14, [r7]
 80025f2:	edc6 5a00 	vstr	s11, [r6]
 80025f6:	edc5 6a00 	vstr	s13, [r5]
 80025fa:	edcc 2a00 	vstr	s5, [ip]
	}
}
 80025fe:	bcf0      	pop	{r4, r5, r6, r7}
 8002600:	4770      	bx	lr
 8002602:	4770      	bx	lr
 8002604:	24008408 	.word	0x24008408
 8002608:	24008c2c 	.word	0x24008c2c
 800260c:	24008404 	.word	0x24008404
 8002610:	2400071c 	.word	0x2400071c
 8002614:	24000718 	.word	0x24000718
 8002618:	24000720 	.word	0x24000720
 800261c:	24000714 	.word	0x24000714

08002620 <SDR_demodAM_AGC>:
// ------------------------------------------------------

// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8002620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

		if(pk < audiotmp)
		{
			pk = audiotmp;
			hangcnt = Hcount[AM];
 8002624:	4b3c      	ldr	r3, [pc, #240]	; (8002718 <SDR_demodAM_AGC+0xf8>)
{
 8002626:	b082      	sub	sp, #8
 8002628:	4f3c      	ldr	r7, [pc, #240]	; (800271c <SDR_demodAM_AGC+0xfc>)
 800262a:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
 800262e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800273c <SDR_demodAM_AGC+0x11c>
			hangcnt = Hcount[AM];
 8002632:	f8b3 e000 	ldrh.w	lr, [r3]
 8002636:	683a      	ldr	r2, [r7, #0]

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8002638:	eddf 4a39 	vldr	s9, [pc, #228]	; 8002720 <SDR_demodAM_AGC+0x100>

		if(hangcnt == 0)
			pk  *= Decay[AM];

		// DC removal filter -----------------------
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 800263c:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8002724 <SDR_demodAM_AGC+0x104>
 8002640:	ed98 7a00 	vldr	s14, [r8]
 8002644:	4b38      	ldr	r3, [pc, #224]	; (8002728 <SDR_demodAM_AGC+0x108>)
 8002646:	4d39      	ldr	r5, [pc, #228]	; (800272c <SDR_demodAM_AGC+0x10c>)
 8002648:	4c39      	ldr	r4, [pc, #228]	; (8002730 <SDR_demodAM_AGC+0x110>)
			pk  *= Decay[AM];
 800264a:	4e3a      	ldr	r6, [pc, #232]	; (8002734 <SDR_demodAM_AGC+0x114>)
		tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 800264c:	edd0 7a01 	vldr	s15, [r0, #4]
 8002650:	edd0 6a00 	vldr	s13, [r0]
 8002654:	ee67 7aa7 	vmul.f32	s15, s15, s15
		audiotmp /= max(pk, AgcThreshold);
 8002658:	ed95 6a00 	vldr	s12, [r5]
		tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 800265c:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8002660:	edcd 7a01 	vstr	s15, [sp, #4]
		arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 8002664:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 8002668:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800266c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = sqrtf(in);
 8002670:	bfa8      	it	ge
 8002672:	eef1 5ae7 	vsqrtge.f32	s11, s15
		if(pk < audiotmp)
 8002676:	edd3 7a00 	vldr	s15, [r3]
      *pOut = 0.0f;
 800267a:	bfb8      	it	lt
 800267c:	eef0 5a64 	vmovlt.f32	s11, s9
 8002680:	eef4 7ae5 	vcmpe.f32	s15, s11
 8002684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002688:	d504      	bpl.n	8002694 <SDR_demodAM_AGC+0x74>
			pk = audiotmp;
 800268a:	eef0 7a65 	vmov.f32	s15, s11
			hangcnt = Hcount[AM];
 800268e:	4672      	mov	r2, lr
			pk = audiotmp;
 8002690:	edc3 5a00 	vstr	s11, [r3]
		audiotmp /= max(pk, AgcThreshold);
 8002694:	fe87 6a86 	vmaxnm.f32	s12, s15, s12
 8002698:	eec5 6a86 	vdiv.f32	s13, s11, s12
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 800269c:	eef0 5a66 	vmov.f32	s11, s13
		audiotmp /= max(pk, AgcThreshold);
 80026a0:	edc4 6a00 	vstr	s13, [r4]
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80026a4:	eee7 5a05 	vfma.f32	s11, s14, s10
		if(hangcnt == 0)
 80026a8:	b9da      	cbnz	r2, 80026e2 <SDR_demodAM_AGC+0xc2>
			pk  *= Decay[AM];
 80026aa:	edd6 6a00 	vldr	s13, [r6]
	for(k=j=0; k<BSIZE*2; k+=2)
 80026ae:	3008      	adds	r0, #8
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80026b0:	edcd 5a00 	vstr	s11, [sp]
			pk  *= Decay[AM];
 80026b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80026b8:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 80026bc:	4584      	cmp	ip, r0
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80026be:	ee77 7ac7 	vsub.f32	s15, s15, s14
		wold = w;
 80026c2:	ed9d 7a00 	vldr	s14, [sp]
			pk  *= Decay[AM];
 80026c6:	edc3 6a00 	vstr	s13, [r3]
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80026ca:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 80026ce:	d1bd      	bne.n	800264c <SDR_demodAM_AGC+0x2c>
		// -----------------------------------------
	}
	PeakAudioValue=pk;
 80026d0:	4919      	ldr	r1, [pc, #100]	; (8002738 <SDR_demodAM_AGC+0x118>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	603a      	str	r2, [r7, #0]
 80026d6:	ed88 7a00 	vstr	s14, [r8]
 80026da:	600b      	str	r3, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
}
 80026dc:	b002      	add	sp, #8
 80026de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80026e2:	edcd 5a00 	vstr	s11, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 80026e6:	3008      	adds	r0, #8
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80026e8:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 80026ec:	4584      	cmp	ip, r0
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80026ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
		wold = w;
 80026f2:	ed9d 7a00 	vldr	s14, [sp]
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80026f6:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 80026fa:	d1a7      	bne.n	800264c <SDR_demodAM_AGC+0x2c>
	PeakAudioValue=pk;
 80026fc:	490e      	ldr	r1, [pc, #56]	; (8002738 <SDR_demodAM_AGC+0x118>)
	if(hangcnt > 0)  hangcnt--;
 80026fe:	2a00      	cmp	r2, #0
	PeakAudioValue=pk;
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	603a      	str	r2, [r7, #0]
 8002704:	ed88 7a00 	vstr	s14, [r8]
 8002708:	600b      	str	r3, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
 800270a:	dd01      	ble.n	8002710 <SDR_demodAM_AGC+0xf0>
 800270c:	3a01      	subs	r2, #1
 800270e:	603a      	str	r2, [r7, #0]
}
 8002710:	b002      	add	sp, #8
 8002712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002716:	bf00      	nop
 8002718:	2400624c 	.word	0x2400624c
 800271c:	2400b504 	.word	0x2400b504
 8002720:	00000000 	.word	0x00000000
 8002724:	3f75c28f 	.word	0x3f75c28f
 8002728:	2400b844 	.word	0x2400b844
 800272c:	240017e4 	.word	0x240017e4
 8002730:	24008c28 	.word	0x24008c28
 8002734:	24002020 	.word	0x24002020
 8002738:	2400727c 	.word	0x2400727c
 800273c:	24000710 	.word	0x24000710

08002740 <SDR_demodSSB_CW_AGC>:
//---------------------------------------------------------------------------
// SSB and CW demodulation with AGC
void SDR_demodSSB_CW_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8002740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(pk < sav)
		{
			pk = sav;
			if(CurrentMode == CW) hangcnt = Hcount[CW];
			else
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002744:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <SDR_demodSSB_CW_AGC+0xf0>)
 8002746:	f241 0e04 	movw	lr, #4100	; 0x1004
 800274a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8002848 <SDR_demodSSB_CW_AGC+0x108>
		if(pk < sav)
 800274e:	4a39      	ldr	r2, [pc, #228]	; (8002834 <SDR_demodSSB_CW_AGC+0xf4>)
 8002750:	4486      	add	lr, r0
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002752:	889f      	ldrh	r7, [r3, #4]
 8002754:	885e      	ldrh	r6, [r3, #2]
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002756:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800275a:	1d03      	adds	r3, r0, #4
		if(pk < sav)
 800275c:	edd2 7a00 	vldr	s15, [r2]
 8002760:	f8d8 0000 	ldr.w	r0, [r8]
 8002764:	4d34      	ldr	r5, [pc, #208]	; (8002838 <SDR_demodSSB_CW_AGC+0xf8>)
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002766:	4c35      	ldr	r4, [pc, #212]	; (800283c <SDR_demodSSB_CW_AGC+0xfc>)

		if(hangcnt == 0)
		{
			if(CurrentMode == CW) pk  *= Decay[CW];
			else
				pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002768:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 800284c <SDR_demodSSB_CW_AGC+0x10c>
 800276c:	e014      	b.n	8002798 <SDR_demodSSB_CW_AGC+0x58>
			if(CurrentMode == CW) pk  *= Decay[CW];
 800276e:	f894 c000 	ldrb.w	ip, [r4]
 8002772:	f1bc 0f03 	cmp.w	ip, #3
 8002776:	d052      	beq.n	800281e <SDR_demodSSB_CW_AGC+0xde>
				pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002778:	f1bc 0f01 	cmp.w	ip, #1
 800277c:	ed92 7a00 	vldr	s14, [r2]
 8002780:	bf0c      	ite	eq
 8002782:	edda 7a01 	vldreq	s15, [sl, #4]
 8002786:	edda 7a02 	vldrne	s15, [sl, #8]
 800278a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800278e:	edc2 7a00 	vstr	s15, [r2]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002792:	3308      	adds	r3, #8
 8002794:	459e      	cmp	lr, r3
 8002796:	d02d      	beq.n	80027f4 <SDR_demodSSB_CW_AGC+0xb4>
		tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002798:	ed93 7a00 	vldr	s14, [r3]
 800279c:	ed53 6a01 	vldr	s13, [r3, #-4]
 80027a0:	ee27 7a07 	vmul.f32	s14, s14, s14
 80027a4:	eea6 7aa6 	vfma.f32	s14, s13, s13
      *pOut = sqrtf(in);
 80027a8:	eeb1 6ac7 	vsqrt.f32	s12, s14
		if(pk < sav)
 80027ac:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80027b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b4:	dd0f      	ble.n	80027d6 <SDR_demodSSB_CW_AGC+0x96>
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 80027b6:	f894 c000 	ldrb.w	ip, [r4]
			pk = sav;
 80027ba:	ed82 6a00 	vstr	s12, [r2]
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 80027be:	f1bc 0f03 	cmp.w	ip, #3
 80027c2:	d026      	beq.n	8002812 <SDR_demodSSB_CW_AGC+0xd2>
 80027c4:	eef0 7a46 	vmov.f32	s15, s12
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80027c8:	f1bc 0f01 	cmp.w	ip, #1
 80027cc:	bf0c      	ite	eq
 80027ce:	4630      	moveq	r0, r6
 80027d0:	4638      	movne	r0, r7
		fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);
 80027d2:	ed53 6a01 	vldr	s13, [r3, #-4]
 80027d6:	ed95 7a00 	vldr	s14, [r5]
 80027da:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80027de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027e2:	eca1 7a01 	vstmia	r1!, {s14}
		if(hangcnt == 0)
 80027e6:	2800      	cmp	r0, #0
 80027e8:	d0c1      	beq.n	800276e <SDR_demodSSB_CW_AGC+0x2e>
	for(k=j=0; k<BSIZE*2; k+=2)
 80027ea:	3308      	adds	r3, #8
		}
	}
	PeakAudioValue=pk;
 80027ec:	edd2 7a00 	vldr	s15, [r2]
	for(k=j=0; k<BSIZE*2; k+=2)
 80027f0:	459e      	cmp	lr, r3
 80027f2:	d1d1      	bne.n	8002798 <SDR_demodSSB_CW_AGC+0x58>
 80027f4:	4a12      	ldr	r2, [pc, #72]	; (8002840 <SDR_demodSSB_CW_AGC+0x100>)
	if(hangcnt > 0)  hangcnt--;
 80027f6:	2800      	cmp	r0, #0
	PeakAudioValue=pk;
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <SDR_demodSSB_CW_AGC+0x104>)
 80027fa:	f8c8 0000 	str.w	r0, [r8]
 80027fe:	ed82 6a00 	vstr	s12, [r2]
 8002802:	edc3 7a00 	vstr	s15, [r3]
	if(hangcnt > 0)  hangcnt--;
 8002806:	dd02      	ble.n	800280e <SDR_demodSSB_CW_AGC+0xce>
 8002808:	3801      	subs	r0, #1
 800280a:	f8c8 0000 	str.w	r0, [r8]
}
 800280e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002812:	eef0 7a46 	vmov.f32	s15, s12
		fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);
 8002816:	ed53 6a01 	vldr	s13, [r3, #-4]
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 800281a:	4648      	mov	r0, r9
 800281c:	e7db      	b.n	80027d6 <SDR_demodSSB_CW_AGC+0x96>
			if(CurrentMode == CW) pk  *= Decay[CW];
 800281e:	ed92 7a00 	vldr	s14, [r2]
 8002822:	edda 7a03 	vldr	s15, [sl, #12]
 8002826:	ee67 7a87 	vmul.f32	s15, s15, s14
 800282a:	edc2 7a00 	vstr	s15, [r2]
 800282e:	e7b0      	b.n	8002792 <SDR_demodSSB_CW_AGC+0x52>
 8002830:	2400624c 	.word	0x2400624c
 8002834:	2400b844 	.word	0x2400b844
 8002838:	240017e4 	.word	0x240017e4
 800283c:	24002018 	.word	0x24002018
 8002840:	24000708 	.word	0x24000708
 8002844:	2400727c 	.word	0x2400727c
 8002848:	2400b504 	.word	0x2400b504
 800284c:	24002020 	.word	0x24002020

08002850 <pack_call>:
	return m;
}

static long
unsigned int pack_call(char const *callsign)
{
 8002850:	b510      	push	{r4, lr}
	unsigned int i;
	long unsigned int n;
	char call6[6];
	memset(call6,' ',sizeof(call6));
 8002852:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
{
 8002856:	b082      	sub	sp, #8
 8002858:	4604      	mov	r4, r0
	memset(call6,' ',sizeof(call6));
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	f8ad 3004 	strh.w	r3, [sp, #4]
	// callsign is 6 characters in length. Exactly.
	size_t call_len = strlen(callsign);
 8002860:	f7fd fd3e 	bl	80002e0 <strlen>
	if( call_len > 6 ) {
 8002864:	2806      	cmp	r0, #6
 8002866:	f200 808f 	bhi.w	8002988 <pack_call+0x138>
		return 0;
	}
	if( isdigit((int) callsign[2]) ) {
 800286a:	78a2      	ldrb	r2, [r4, #2]
 800286c:	4b5b      	ldr	r3, [pc, #364]	; (80029dc <pack_call+0x18c>)
 800286e:	5cd2      	ldrb	r2, [r2, r3]
 8002870:	0752      	lsls	r2, r2, #29
 8002872:	d57c      	bpl.n	800296e <pack_call+0x11e>
		for (i=0; i<call_len; i++) {
 8002874:	b120      	cbz	r0, 8002880 <pack_call+0x30>
			call6[i]=callsign[i];
 8002876:	4602      	mov	r2, r0
 8002878:	4621      	mov	r1, r4
 800287a:	4668      	mov	r0, sp
 800287c:	f00e fa1a 	bl	8010cb4 <memcpy>
		for (i=1; i<call_len+1; i++) {
			call6[i]=callsign[i-1];
		}
	}
	for (i=0; i<6; i++) {
		call6[i]=get_callsign_character_code(call6[i]);
 8002880:	f89d 3000 	ldrb.w	r3, [sp]
	if( ch >=48 && ch <=57 ) { //0-9
 8002884:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8002888:	fa5f fe8c 	uxtb.w	lr, ip
 800288c:	f1be 0f09 	cmp.w	lr, #9
 8002890:	d908      	bls.n	80028a4 <pack_call+0x54>
	if( ch == 32 ) {  //space
 8002892:	2b20      	cmp	r3, #32
 8002894:	f000 809a 	beq.w	80029cc <pack_call+0x17c>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8002898:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800289c:	2a19      	cmp	r2, #25
 800289e:	d976      	bls.n	800298e <pack_call+0x13e>
	return -1;
 80028a0:	f04f 0eff 	mov.w	lr, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 80028a4:	f89d 3001 	ldrb.w	r3, [sp, #1]
	if( ch >=48 && ch <=57 ) { //0-9
 80028a8:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80028ac:	fa5f f48c 	uxtb.w	r4, ip
 80028b0:	2c09      	cmp	r4, #9
 80028b2:	d907      	bls.n	80028c4 <pack_call+0x74>
	if( ch == 32 ) {  //space
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	f000 8087 	beq.w	80029c8 <pack_call+0x178>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80028ba:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80028be:	2a19      	cmp	r2, #25
 80028c0:	d979      	bls.n	80029b6 <pack_call+0x166>
	return -1;
 80028c2:	24ff      	movs	r4, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 80028c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
	if( ch >=48 && ch <=57 ) { //0-9
 80028c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	2a09      	cmp	r2, #9
 80028d0:	d906      	bls.n	80028e0 <pack_call+0x90>
	if( ch == 32 ) {  //space
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d076      	beq.n	80029c4 <pack_call+0x174>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80028d6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80028da:	2a19      	cmp	r2, #25
 80028dc:	d968      	bls.n	80029b0 <pack_call+0x160>
	return -1;
 80028de:	22ff      	movs	r2, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 80028e0:	f89d 1003 	ldrb.w	r1, [sp, #3]
	if( ch >=48 && ch <=57 ) { //0-9
 80028e4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b09      	cmp	r3, #9
 80028ec:	d906      	bls.n	80028fc <pack_call+0xac>
	if( ch == 32 ) {  //space
 80028ee:	2920      	cmp	r1, #32
 80028f0:	d066      	beq.n	80029c0 <pack_call+0x170>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80028f2:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80028f6:	2b19      	cmp	r3, #25
 80028f8:	d956      	bls.n	80029a8 <pack_call+0x158>
	return -1;
 80028fa:	23ff      	movs	r3, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 80028fc:	f89d 0004 	ldrb.w	r0, [sp, #4]
	if( ch >=48 && ch <=57 ) { //0-9
 8002900:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 8002904:	b2c9      	uxtb	r1, r1
 8002906:	2909      	cmp	r1, #9
 8002908:	d906      	bls.n	8002918 <pack_call+0xc8>
	if( ch == 32 ) {  //space
 800290a:	2820      	cmp	r0, #32
 800290c:	d061      	beq.n	80029d2 <pack_call+0x182>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 800290e:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8002912:	2919      	cmp	r1, #25
 8002914:	d940      	bls.n	8002998 <pack_call+0x148>
	return -1;
 8002916:	21ff      	movs	r1, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8002918:	f89d c005 	ldrb.w	ip, [sp, #5]
	if( ch >=48 && ch <=57 ) { //0-9
 800291c:	f1ac 0030 	sub.w	r0, ip, #48	; 0x30
 8002920:	b2c0      	uxtb	r0, r0
 8002922:	2809      	cmp	r0, #9
 8002924:	d907      	bls.n	8002936 <pack_call+0xe6>
	if( ch == 32 ) {  //space
 8002926:	f1bc 0f20 	cmp.w	ip, #32
 800292a:	d054      	beq.n	80029d6 <pack_call+0x186>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 800292c:	f1ac 0041 	sub.w	r0, ip, #65	; 0x41
 8002930:	2819      	cmp	r0, #25
 8002932:	d935      	bls.n	80029a0 <pack_call+0x150>
	return -1;
 8002934:	20ff      	movs	r0, #255	; 0xff
	}
	n = call6[0];
	n = n*36+call6[1];
 8002936:	f04f 0c24 	mov.w	ip, #36	; 0x24
	n = n*10+call6[2];
	n = n*27+call6[3]-10;
 800293a:	3b0a      	subs	r3, #10
	n = n*27+call6[4]-10;
 800293c:	390a      	subs	r1, #10
	n = n*27+call6[5]-10;
 800293e:	380a      	subs	r0, #10
	n = n*36+call6[1];
 8002940:	fb1c 4c0e 	smlabb	ip, ip, lr, r4
	n = n*10+call6[2];
 8002944:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002948:	eb02 024c 	add.w	r2, r2, ip, lsl #1
	n = n*27+call6[3]-10;
 800294c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002950:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8002954:	4413      	add	r3, r2
	n = n*27+call6[4]-10;
 8002956:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800295a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800295e:	440b      	add	r3, r1
	n = n*27+call6[5]-10;
 8002960:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002964:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002968:	4418      	add	r0, r3
	return n;
}
 800296a:	b002      	add	sp, #8
 800296c:	bd10      	pop	{r4, pc}
	} else if( isdigit((int) callsign[1]) ) {
 800296e:	7862      	ldrb	r2, [r4, #1]
 8002970:	5cd3      	ldrb	r3, [r2, r3]
 8002972:	075b      	lsls	r3, r3, #29
 8002974:	d584      	bpl.n	8002880 <pack_call+0x30>
		for (i=1; i<call_len+1; i++) {
 8002976:	2800      	cmp	r0, #0
 8002978:	d082      	beq.n	8002880 <pack_call+0x30>
			call6[i]=callsign[i-1];
 800297a:	4602      	mov	r2, r0
 800297c:	4621      	mov	r1, r4
 800297e:	f10d 0001 	add.w	r0, sp, #1
 8002982:	f00e f997 	bl	8010cb4 <memcpy>
 8002986:	e77b      	b.n	8002880 <pack_call+0x30>
		return 0;
 8002988:	2000      	movs	r0, #0
}
 800298a:	b002      	add	sp, #8
 800298c:	bd10      	pop	{r4, pc}
		return ch-55;
 800298e:	f1a3 0c37 	sub.w	ip, r3, #55	; 0x37
 8002992:	fa5f fe8c 	uxtb.w	lr, ip
 8002996:	e785      	b.n	80028a4 <pack_call+0x54>
 8002998:	f1a0 0137 	sub.w	r1, r0, #55	; 0x37
 800299c:	b2c9      	uxtb	r1, r1
 800299e:	e7bb      	b.n	8002918 <pack_call+0xc8>
 80029a0:	f1ac 0037 	sub.w	r0, ip, #55	; 0x37
 80029a4:	b2c0      	uxtb	r0, r0
 80029a6:	e7c6      	b.n	8002936 <pack_call+0xe6>
 80029a8:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e7a5      	b.n	80028fc <pack_call+0xac>
 80029b0:	3b37      	subs	r3, #55	; 0x37
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	e794      	b.n	80028e0 <pack_call+0x90>
 80029b6:	f1a3 0c37 	sub.w	ip, r3, #55	; 0x37
 80029ba:	fa5f f48c 	uxtb.w	r4, ip
 80029be:	e781      	b.n	80028c4 <pack_call+0x74>
		return 36;
 80029c0:	2324      	movs	r3, #36	; 0x24
 80029c2:	e79b      	b.n	80028fc <pack_call+0xac>
 80029c4:	2224      	movs	r2, #36	; 0x24
 80029c6:	e78b      	b.n	80028e0 <pack_call+0x90>
 80029c8:	2424      	movs	r4, #36	; 0x24
 80029ca:	e77b      	b.n	80028c4 <pack_call+0x74>
 80029cc:	f04f 0e24 	mov.w	lr, #36	; 0x24
 80029d0:	e768      	b.n	80028a4 <pack_call+0x54>
 80029d2:	2124      	movs	r1, #36	; 0x24
 80029d4:	e7a0      	b.n	8002918 <pack_call+0xc8>
 80029d6:	2024      	movs	r0, #36	; 0x24
 80029d8:	e7ad      	b.n	8002936 <pack_call+0xe6>
 80029da:	bf00      	nop
 80029dc:	0801e12d 	.word	0x0801e12d

080029e0 <get_wspr_channel_symbols>:
	memcpy(sym, tmp, sizeof(tmp));
}

int
get_wspr_channel_symbols(char* rawmessage, uint8_t* symbols)
{
 80029e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			0,0,0,0,1,0,0,1,0,0,1,1,1,0,1,1,0,0,1,1,
			0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,1,0,0,1,1,
			0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,0,0,1,1,0,
			0,0
	};
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 80029e4:	4abb      	ldr	r2, [pc, #748]	; (8002cd4 <get_wspr_channel_symbols+0x2f4>)
	char *callsign, *grid, *powstr;
	char grid4[5], message[23];

	memset(message,0,sizeof(char)*23);
 80029e6:	2300      	movs	r3, #0
{
 80029e8:	4605      	mov	r5, r0
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 80029ea:	4614      	mov	r4, r2
{
 80029ec:	ed2d 8b02 	vpush	{d8}
 80029f0:	b0ed      	sub	sp, #436	; 0x1b4
 80029f2:	af00      	add	r7, sp, #0
	i=0;
	while ( rawmessage[i] != 0 && i<23 ) {
 80029f4:	f890 c000 	ldrb.w	ip, [r0]
	memset(message,0,sizeof(char)*23);
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 80029fa:	f107 0634 	add.w	r6, r7, #52	; 0x34
{
 80029fe:	6039      	str	r1, [r7, #0]
	memset(message,0,sizeof(char)*23);
 8002a00:	f8c7 302f 	str.w	r3, [r7, #47]	; 0x2f
 8002a04:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8002a08:	e9c7 3309 	strd	r3, r3, [r7, #36]	; 0x24
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 8002a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a0e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002a10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a12:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002a14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a18:	e886 0003 	stmia.w	r6, {r0, r1}
	while ( rawmessage[i] != 0 && i<23 ) {
 8002a1c:	f1bc 0f00 	cmp.w	ip, #0
 8002a20:	d00d      	beq.n	8002a3e <get_wspr_channel_symbols+0x5e>
 8002a22:	f107 021c 	add.w	r2, r7, #28
 8002a26:	1c6b      	adds	r3, r5, #1
 8002a28:	43e8      	mvns	r0, r5
 8002a2a:	4664      	mov	r4, ip
 8002a2c:	e000      	b.n	8002a30 <get_wspr_channel_symbols+0x50>
 8002a2e:	b134      	cbz	r4, 8002a3e <get_wspr_channel_symbols+0x5e>
		message[i]=rawmessage[i];
 8002a30:	f802 4b01 	strb.w	r4, [r2], #1
	while ( rawmessage[i] != 0 && i<23 ) {
 8002a34:	f813 4b01 	ldrb.w	r4, [r3], #1
 8002a38:	18c1      	adds	r1, r0, r3
 8002a3a:	2917      	cmp	r1, #23
 8002a3c:	d1f7      	bne.n	8002a2e <get_wspr_channel_symbols+0x4e>
		i++;
	}

	size_t i1=strcspn(message," ");
 8002a3e:	49a6      	ldr	r1, [pc, #664]	; (8002cd8 <get_wspr_channel_symbols+0x2f8>)
 8002a40:	f107 001c 	add.w	r0, r7, #28
 8002a44:	f00e fe22 	bl	801168c <strcspn>
	size_t i2=strcspn(message,"/");
 8002a48:	49a4      	ldr	r1, [pc, #656]	; (8002cdc <get_wspr_channel_symbols+0x2fc>)
	size_t i1=strcspn(message," ");
 8002a4a:	4604      	mov	r4, r0
	size_t i2=strcspn(message,"/");
 8002a4c:	f107 001c 	add.w	r0, r7, #28
 8002a50:	f00e fe1c 	bl	801168c <strcspn>
	size_t i3=strcspn(message,"<");
 8002a54:	49a2      	ldr	r1, [pc, #648]	; (8002ce0 <get_wspr_channel_symbols+0x300>)
	size_t i2=strcspn(message,"/");
 8002a56:	4606      	mov	r6, r0
	size_t i3=strcspn(message,"<");
 8002a58:	f107 001c 	add.w	r0, r7, #28
 8002a5c:	f00e fe16 	bl	801168c <strcspn>
	size_t mlen=strlen(message);

	// Use the presence and/or absence of "<" and "/" to decide what
	// type of message. No sanity checks! Beware!

	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 8002a60:	3c04      	subs	r4, #4
	size_t i4=strcspn(message,">");
 8002a62:	49a0      	ldr	r1, [pc, #640]	; (8002ce4 <get_wspr_channel_symbols+0x304>)
	size_t i3=strcspn(message,"<");
 8002a64:	4605      	mov	r5, r0
	size_t i4=strcspn(message,">");
 8002a66:	f107 001c 	add.w	r0, r7, #28
 8002a6a:	f00e fe0f 	bl	801168c <strcspn>
 8002a6e:	4680      	mov	r8, r0
	size_t mlen=strlen(message);
 8002a70:	f107 001c 	add.w	r0, r7, #28
 8002a74:	f7fd fc34 	bl	80002e0 <strlen>
	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 8002a78:	2c02      	cmp	r4, #2
	size_t mlen=strlen(message);
 8002a7a:	4603      	mov	r3, r0
	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 8002a7c:	d804      	bhi.n	8002a88 <get_wspr_channel_symbols+0xa8>
 8002a7e:	4286      	cmp	r6, r0
 8002a80:	d102      	bne.n	8002a88 <get_wspr_channel_symbols+0xa8>
 8002a82:	4285      	cmp	r5, r0
 8002a84:	f000 8136 	beq.w	8002cf4 <get_wspr_channel_symbols+0x314>
		for (i=0; i<4; i++) {
			grid4[i]=get_locator_character_code(*(grid+i));
		}
		m = pack_grid4_power(grid4,power);

	} else if ( i3 == 0 && i4 < mlen ) {
 8002a88:	b90d      	cbnz	r5, 8002a8e <get_wspr_channel_symbols+0xae>
 8002a8a:	4598      	cmp	r8, r3
 8002a8c:	d37e      	bcc.n	8002b8c <get_wspr_channel_symbols+0x1ac>
		for(i=0; i<j-1; i++) {
			grid6[i]=grid[i+1];
		}
		grid6[5]=grid[0];
		n = pack_call(grid6);
	} else if ( i2 < mlen ) {  // just looks for a right slash
 8002a8e:	429e      	cmp	r6, r3
 8002a90:	d307      	bcc.n	8002aa2 <get_wspr_channel_symbols+0xc2>
		pack_prefix(callsign, &n1, &ng, &nadd);
		ntype=power + 1 + nadd;
		m=128*ng+ntype+64;
		n=n1;
	} else {
		return 0;
 8002a92:	2000      	movs	r0, #0

	for (i=0; i < 162; i++) {
		symbols[i] = 2 * channelbits[i] + pr3[i];
	}
	return 1;
}
 8002a94:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	ecbd 8b02 	vpop	{d8}
 8002a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		callsign = strtok (message," ");
 8002aa2:	498d      	ldr	r1, [pc, #564]	; (8002cd8 <get_wspr_channel_symbols+0x2f8>)
 8002aa4:	f107 001c 	add.w	r0, r7, #28
 8002aa8:	f00e fe02 	bl	80116b0 <strtok>
 8002aac:	4604      	mov	r4, r0
 8002aae:	4682      	mov	sl, r0
		if( i2==0 || i2>strlen(callsign) ) return 0; //guards against pathological case
 8002ab0:	2e00      	cmp	r6, #0
 8002ab2:	d0ee      	beq.n	8002a92 <get_wspr_channel_symbols+0xb2>
 8002ab4:	f7fd fc14 	bl	80002e0 <strlen>
 8002ab8:	42b0      	cmp	r0, r6
 8002aba:	d3ea      	bcc.n	8002a92 <get_wspr_channel_symbols+0xb2>
		powstr = strtok (NULL," ");
 8002abc:	4986      	ldr	r1, [pc, #536]	; (8002cd8 <get_wspr_channel_symbols+0x2f8>)
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f00e fdf6 	bl	80116b0 <strtok>
		int power = atoi (powstr);
 8002ac4:	f00e f8c8 	bl	8010c58 <atoi>
		if( power < 0 ) power=0;
 8002ac8:	283c      	cmp	r0, #60	; 0x3c
 8002aca:	4605      	mov	r5, r0
		power=power+nu[power%10];
 8002acc:	4b86      	ldr	r3, [pc, #536]	; (8002ce8 <get_wspr_channel_symbols+0x308>)
 8002ace:	bfa8      	it	ge
 8002ad0:	253c      	movge	r5, #60	; 0x3c
	size_t i1 = strcspn(callsign,"/");
 8002ad2:	4982      	ldr	r1, [pc, #520]	; (8002cdc <get_wspr_channel_symbols+0x2fc>)
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
		power=power+nu[power%10];
 8002ada:	fba3 2305 	umull	r2, r3, r3, r5
 8002ade:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ae2:	08db      	lsrs	r3, r3, #3
 8002ae4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ae8:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
 8002aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af0:	441d      	add	r5, r3
	size_t i1 = strcspn(callsign,"/");
 8002af2:	f00e fdcb 	bl	801168c <strcspn>
	if( callsign[i1+2] == 0 ) {
 8002af6:	f100 0802 	add.w	r8, r0, #2
	size_t i1 = strcspn(callsign,"/");
 8002afa:	4606      	mov	r6, r0
	if( callsign[i1+2] == 0 ) {
 8002afc:	f814 3008 	ldrb.w	r3, [r4, r8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 843f 	beq.w	8003384 <get_wspr_channel_symbols+0x9a4>
	} else if( callsign[i1+3]==0 ) {
 8002b06:	eb04 0900 	add.w	r9, r4, r0
 8002b0a:	f899 3003 	ldrb.w	r3, [r9, #3]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 8522 	bne.w	8003558 <get_wspr_channel_symbols+0xb78>
		for (i=0; i<i1; i++) {
 8002b14:	b300      	cbz	r0, 8002b58 <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8002b16:	7823      	ldrb	r3, [r4, #0]
		for (i=0; i<i1; i++) {
 8002b18:	2801      	cmp	r0, #1
			call6[i]=callsign[i];
 8002b1a:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		for (i=0; i<i1; i++) {
 8002b1e:	d01b      	beq.n	8002b58 <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8002b20:	7863      	ldrb	r3, [r4, #1]
		for (i=0; i<i1; i++) {
 8002b22:	2802      	cmp	r0, #2
			call6[i]=callsign[i];
 8002b24:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		for (i=0; i<i1; i++) {
 8002b28:	d016      	beq.n	8002b58 <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8002b2a:	78a3      	ldrb	r3, [r4, #2]
		for (i=0; i<i1; i++) {
 8002b2c:	2803      	cmp	r0, #3
			call6[i]=callsign[i];
 8002b2e:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		for (i=0; i<i1; i++) {
 8002b32:	d011      	beq.n	8002b58 <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8002b34:	78e3      	ldrb	r3, [r4, #3]
		for (i=0; i<i1; i++) {
 8002b36:	2804      	cmp	r0, #4
			call6[i]=callsign[i];
 8002b38:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		for (i=0; i<i1; i++) {
 8002b3c:	d00c      	beq.n	8002b58 <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8002b3e:	7923      	ldrb	r3, [r4, #4]
		for (i=0; i<i1; i++) {
 8002b40:	2805      	cmp	r0, #5
			call6[i]=callsign[i];
 8002b42:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		for (i=0; i<i1; i++) {
 8002b46:	d007      	beq.n	8002b58 <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8002b48:	7963      	ldrb	r3, [r4, #5]
		for (i=0; i<i1; i++) {
 8002b4a:	2806      	cmp	r0, #6
			call6[i]=callsign[i];
 8002b4c:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		for (i=0; i<i1; i++) {
 8002b50:	d002      	beq.n	8002b58 <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8002b52:	79a3      	ldrb	r3, [r4, #6]
 8002b54:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		*n=pack_call(call6);
 8002b58:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	ee08 3a10 	vmov	s16, r3
 8002b62:	f7ff fe75 	bl	8002850 <pack_call>
		*m=10*(callsign[i1+1]-48)+(callsign[i1+2]-48);
 8002b66:	f899 3001 	ldrb.w	r3, [r9, #1]
 8002b6a:	f81a 2008 	ldrb.w	r2, [sl, r8]
		*n=pack_call(call6);
 8002b6e:	4604      	mov	r4, r0
		*m=10*(callsign[i1+1]-48)+(callsign[i1+2]-48);
 8002b70:	3b30      	subs	r3, #48	; 0x30
 8002b72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b76:	eb02 0243 	add.w	r2, r2, r3, lsl #1
		*m=60000 + 26 + *m;
 8002b7a:	f64e 234a 	movw	r3, #59978	; 0xea4a
 8002b7e:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 8002b80:	01db      	lsls	r3, r3, #7
		*nadd=1;
 8002b82:	2001      	movs	r0, #1
		m=128*ng+ntype+64;
 8002b84:	3541      	adds	r5, #65	; 0x41
 8002b86:	4428      	add	r0, r5
 8002b88:	18c5      	adds	r5, r0, r3
		n=n1;
 8002b8a:	e11a      	b.n	8002dc2 <get_wspr_channel_symbols+0x3e2>
		callsign=strtok(message,"<> ");
 8002b8c:	4957      	ldr	r1, [pc, #348]	; (8002cec <get_wspr_channel_symbols+0x30c>)
 8002b8e:	f107 001c 	add.w	r0, r7, #28
 8002b92:	f00e fd8d 	bl	80116b0 <strtok>
		grid=strtok(NULL," ");
 8002b96:	4950      	ldr	r1, [pc, #320]	; (8002cd8 <get_wspr_channel_symbols+0x2f8>)
		callsign=strtok(message,"<> ");
 8002b98:	4606      	mov	r6, r0
		grid=strtok(NULL," ");
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f00e fd88 	bl	80116b0 <strtok>
		powstr=strtok(NULL," ");
 8002ba0:	494d      	ldr	r1, [pc, #308]	; (8002cd8 <get_wspr_channel_symbols+0x2f8>)
		grid=strtok(NULL," ");
 8002ba2:	4604      	mov	r4, r0
		powstr=strtok(NULL," ");
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f00e fd83 	bl	80116b0 <strtok>
		callsign=strtok(message,"<> ");
 8002baa:	46b0      	mov	r8, r6
		int power = atoi(powstr);
 8002bac:	f00e f854 	bl	8010c58 <atoi>
		if( power < 0 ) power=0;
 8002bb0:	283c      	cmp	r0, #60	; 0x3c
		power=power+nu[power%10];
 8002bb2:	4b4d      	ldr	r3, [pc, #308]	; (8002ce8 <get_wspr_channel_symbols+0x308>)
 8002bb4:	bfa8      	it	ge
 8002bb6:	203c      	movge	r0, #60	; 0x3c
 8002bb8:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
		ihash=nhash(callsign,strlen(callsign),(uint32_t)146);
 8002bbc:	4630      	mov	r0, r6
		power=power+nu[power%10];
 8002bbe:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002bc6:	08db      	lsrs	r3, r3, #3
 8002bc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002bcc:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8002bd0:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8002bd4:	442a      	add	r2, r5
		ntype=-(power+1);
 8002bd6:	43d5      	mvns	r5, r2
		ihash=nhash(callsign,strlen(callsign),(uint32_t)146);
 8002bd8:	f7fd fb82 	bl	80002e0 <strlen>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8002bdc:	4b44      	ldr	r3, [pc, #272]	; (8002cf0 <get_wspr_channel_symbols+0x310>)
	if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {
 8002bde:	07b1      	lsls	r1, r6, #30
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8002be0:	4403      	add	r3, r0
	if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {
 8002be2:	f000 8296 	beq.w	8003112 <get_wspr_channel_symbols+0x732>
	} else if (HASH_LITTLE_ENDIAN && ((u.i & 0x1) == 0)) {
 8002be6:	4632      	mov	r2, r6
 8002be8:	07d2      	lsls	r2, r2, #31
 8002bea:	f140 8366 	bpl.w	80032ba <get_wspr_channel_symbols+0x8da>
		while (length > 12)
 8002bee:	280c      	cmp	r0, #12
 8002bf0:	f240 8514 	bls.w	800361c <get_wspr_channel_symbols+0xc3c>
 8002bf4:	360c      	adds	r6, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	46a1      	mov	r9, r4
 8002bfc:	469c      	mov	ip, r3
			c += ((uint32_t)k[10])<<16;
 8002bfe:	f816 ec02 	ldrb.w	lr, [r6, #-2]
			length -= 12;
 8002c02:	380c      	subs	r0, #12
			c += ((uint32_t)k[9])<<8;
 8002c04:	f816 3c03 	ldrb.w	r3, [r6, #-3]
			c += ((uint32_t)k[10])<<16;
 8002c08:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
			c += ((uint32_t)k[11])<<24;
 8002c0c:	f816 8c01 	ldrb.w	r8, [r6, #-1]
		while (length > 12)
 8002c10:	280c      	cmp	r0, #12
			c += ((uint32_t)k[11])<<24;
 8002c12:	eb0e 2e03 	add.w	lr, lr, r3, lsl #8
			a += ((uint32_t)k[2])<<16;
 8002c16:	f816 3c0a 	ldrb.w	r3, [r6, #-10]
 8002c1a:	ea4f 4403 	mov.w	r4, r3, lsl #16
			c += k[8];
 8002c1e:	f816 3c04 	ldrb.w	r3, [r6, #-4]
			c += ((uint32_t)k[11])<<24;
 8002c22:	449e      	add	lr, r3
			a += ((uint32_t)k[1])<<8;
 8002c24:	f816 3c0b 	ldrb.w	r3, [r6, #-11]
			c += ((uint32_t)k[11])<<24;
 8002c28:	eb0e 6e08 	add.w	lr, lr, r8, lsl #24
			mix(a,b,c);
 8002c2c:	eb04 2403 	add.w	r4, r4, r3, lsl #8
			b += ((uint32_t)k[6])<<16;
 8002c30:	f816 3c06 	ldrb.w	r3, [r6, #-6]
			c += ((uint32_t)k[11])<<24;
 8002c34:	4472      	add	r2, lr
			a += k[0];
 8002c36:	f816 ec0c 	ldrb.w	lr, [r6, #-12]
			b += ((uint32_t)k[6])<<16;
 8002c3a:	ea4f 4303 	mov.w	r3, r3, lsl #16
			mix(a,b,c);
 8002c3e:	4474      	add	r4, lr
			b += ((uint32_t)k[5])<<8;
 8002c40:	f816 ec07 	ldrb.w	lr, [r6, #-7]
			b += ((uint32_t)k[7])<<24;
 8002c44:	eb03 230e 	add.w	r3, r3, lr, lsl #8
			a += ((uint32_t)k[3])<<24;
 8002c48:	f816 ec09 	ldrb.w	lr, [r6, #-9]
			mix(a,b,c);
 8002c4c:	eb04 640e 	add.w	r4, r4, lr, lsl #24
 8002c50:	46b6      	mov	lr, r6
		while (length > 12)
 8002c52:	f106 060c 	add.w	r6, r6, #12
			mix(a,b,c);
 8002c56:	eba4 0402 	sub.w	r4, r4, r2
 8002c5a:	4464      	add	r4, ip
			b += k[4];
 8002c5c:	f816 cc14 	ldrb.w	ip, [r6, #-20]
			b += ((uint32_t)k[7])<<24;
 8002c60:	4463      	add	r3, ip
 8002c62:	f816 cc11 	ldrb.w	ip, [r6, #-17]
			mix(a,b,c);
 8002c66:	ea84 7432 	eor.w	r4, r4, r2, ror #28
			b += ((uint32_t)k[7])<<24;
 8002c6a:	eb03 630c 	add.w	r3, r3, ip, lsl #24
 8002c6e:	440b      	add	r3, r1
			mix(a,b,c);
 8002c70:	4621      	mov	r1, r4
 8002c72:	441a      	add	r2, r3
 8002c74:	eba3 0304 	sub.w	r3, r3, r4
 8002c78:	ea83 63b4 	eor.w	r3, r3, r4, ror #26
 8002c7c:	4411      	add	r1, r2
 8002c7e:	eba2 0203 	sub.w	r2, r2, r3
 8002c82:	ea82 6233 	eor.w	r2, r2, r3, ror #24
 8002c86:	440b      	add	r3, r1
 8002c88:	eba1 0102 	sub.w	r1, r1, r2
 8002c8c:	ea81 4432 	eor.w	r4, r1, r2, ror #16
 8002c90:	441a      	add	r2, r3
 8002c92:	eba3 0304 	sub.w	r3, r3, r4
 8002c96:	eb04 0c02 	add.w	ip, r4, r2
 8002c9a:	ea83 3174 	eor.w	r1, r3, r4, ror #13
 8002c9e:	eba2 0201 	sub.w	r2, r2, r1
 8002ca2:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8002ca6:	4461      	add	r1, ip
		while (length > 12)
 8002ca8:	d8a9      	bhi.n	8002bfe <get_wspr_channel_symbols+0x21e>
 8002caa:	464c      	mov	r4, r9
 8002cac:	4663      	mov	r3, ip
 8002cae:	46f0      	mov	r8, lr
		switch(length)                   /* all the case statements fall through */
 8002cb0:	3801      	subs	r0, #1
 8002cb2:	280b      	cmp	r0, #11
 8002cb4:	f200 82bd 	bhi.w	8003232 <get_wspr_channel_symbols+0x852>
 8002cb8:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002cbc:	029b029f 	.word	0x029b029f
 8002cc0:	02930297 	.word	0x02930297
 8002cc4:	028c0290 	.word	0x028c0290
 8002cc8:	02840288 	.word	0x02840288
 8002ccc:	027d0281 	.word	0x027d0281
 8002cd0:	02750279 	.word	0x02750279
 8002cd4:	08014e88 	.word	0x08014e88
 8002cd8:	0801b160 	.word	0x0801b160
 8002cdc:	0801af88 	.word	0x0801af88
 8002ce0:	0801af8c 	.word	0x0801af8c
 8002ce4:	0801af90 	.word	0x0801af90
 8002ce8:	cccccccd 	.word	0xcccccccd
 8002cec:	0801af94 	.word	0x0801af94
 8002cf0:	deadbf81 	.word	0xdeadbf81
		callsign = strtok(message," ");
 8002cf4:	49ce      	ldr	r1, [pc, #824]	; (8003030 <get_wspr_channel_symbols+0x650>)
 8002cf6:	f107 001c 	add.w	r0, r7, #28
 8002cfa:	f00e fcd9 	bl	80116b0 <strtok>
		grid = strtok(NULL," ");
 8002cfe:	49cc      	ldr	r1, [pc, #816]	; (8003030 <get_wspr_channel_symbols+0x650>)
		callsign = strtok(message," ");
 8002d00:	4604      	mov	r4, r0
		grid = strtok(NULL," ");
 8002d02:	2000      	movs	r0, #0
 8002d04:	f00e fcd4 	bl	80116b0 <strtok>
		powstr = strtok(NULL," ");
 8002d08:	49c9      	ldr	r1, [pc, #804]	; (8003030 <get_wspr_channel_symbols+0x650>)
		grid = strtok(NULL," ");
 8002d0a:	4606      	mov	r6, r0
		powstr = strtok(NULL," ");
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f00e fccf 	bl	80116b0 <strtok>
		int power = atoi(powstr);
 8002d12:	f00d ffa1 	bl	8010c58 <atoi>
 8002d16:	4605      	mov	r5, r0
		n = pack_call(callsign);
 8002d18:	4620      	mov	r0, r4
 8002d1a:	f7ff fd99 	bl	8002850 <pack_call>
			grid4[i]=get_locator_character_code(*(grid+i));
 8002d1e:	7833      	ldrb	r3, [r6, #0]
		n = pack_call(callsign);
 8002d20:	4604      	mov	r4, r0
	if( ch >=48 && ch <=57 ) { //0-9
 8002d22:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	2a09      	cmp	r2, #9
 8002d2a:	d908      	bls.n	8002d3e <get_wspr_channel_symbols+0x35e>
	if( ch == 32 ) {  //space
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	f000 845c 	beq.w	80035ea <get_wspr_channel_symbols+0xc0a>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8002d32:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002d36:	b2d2      	uxtb	r2, r2
	return -1;
 8002d38:	2a12      	cmp	r2, #18
 8002d3a:	bf28      	it	cs
 8002d3c:	22ff      	movcs	r2, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8002d3e:	7871      	ldrb	r1, [r6, #1]
	if( ch >=48 && ch <=57 ) { //0-9
 8002d40:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b09      	cmp	r3, #9
 8002d48:	d908      	bls.n	8002d5c <get_wspr_channel_symbols+0x37c>
	if( ch == 32 ) {  //space
 8002d4a:	2920      	cmp	r1, #32
 8002d4c:	f000 844a 	beq.w	80035e4 <get_wspr_channel_symbols+0xc04>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8002d50:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8002d54:	b2db      	uxtb	r3, r3
	return -1;
 8002d56:	2b12      	cmp	r3, #18
 8002d58:	bf28      	it	cs
 8002d5a:	23ff      	movcs	r3, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8002d5c:	78b1      	ldrb	r1, [r6, #2]
	if( ch >=48 && ch <=57 ) { //0-9
 8002d5e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8002d62:	b2c0      	uxtb	r0, r0
 8002d64:	2809      	cmp	r0, #9
 8002d66:	d907      	bls.n	8002d78 <get_wspr_channel_symbols+0x398>
	if( ch == 32 ) {  //space
 8002d68:	2920      	cmp	r1, #32
 8002d6a:	f000 8441 	beq.w	80035f0 <get_wspr_channel_symbols+0xc10>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8002d6e:	3941      	subs	r1, #65	; 0x41
 8002d70:	b2c8      	uxtb	r0, r1
	return -1;
 8002d72:	2812      	cmp	r0, #18
 8002d74:	bf28      	it	cs
 8002d76:	20ff      	movcs	r0, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8002d78:	78f6      	ldrb	r6, [r6, #3]
	if( ch >=48 && ch <=57 ) { //0-9
 8002d7a:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8002d7e:	b2c9      	uxtb	r1, r1
 8002d80:	2909      	cmp	r1, #9
 8002d82:	d908      	bls.n	8002d96 <get_wspr_channel_symbols+0x3b6>
	if( ch == 32 ) {  //space
 8002d84:	2e20      	cmp	r6, #32
 8002d86:	f000 8427 	beq.w	80035d8 <get_wspr_channel_symbols+0xbf8>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8002d8a:	f1a6 0141 	sub.w	r1, r6, #65	; 0x41
 8002d8e:	b2c9      	uxtb	r1, r1
	return -1;
 8002d90:	2912      	cmp	r1, #18
 8002d92:	bf28      	it	cs
 8002d94:	21ff      	movcs	r1, #255	; 0xff
	m=(179-10*grid4[0]-grid4[2])*180+10*grid4[1]+grid4[3];
 8002d96:	f06f 0609 	mvn.w	r6, #9
 8002d9a:	b21b      	sxth	r3, r3
 8002d9c:	fb06 f202 	mul.w	r2, r6, r2
 8002da0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002da4:	32b3      	adds	r2, #179	; 0xb3
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	1a12      	subs	r2, r2, r0
 8002daa:	20b4      	movs	r0, #180	; 0xb4
 8002dac:	fb00 3302 	mla	r3, r0, r2, r3
 8002db0:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8002db4:	440b      	add	r3, r1
 8002db6:	ee08 2a10 	vmov	s16, r2
 8002dba:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
	m=m*128+power+64;
 8002dbe:	f103 0540 	add.w	r5, r3, #64	; 0x40
	it=0xFF & (n>>20);
 8002dc2:	0d23      	lsrs	r3, r4, #20
	it= ((n&(0x0F))<<4) + ((m>>18)&(0x0F));
 8002dc4:	f3c5 4283 	ubfx	r2, r5, #18, #4
	memset(data,0,sizeof(data));
 8002dc8:	2600      	movs	r6, #0
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8002dca:	ee18 0a10 	vmov	r0, s16
	it=0xFF & (n>>20);
 8002dce:	743b      	strb	r3, [r7, #16]
	it=0xFF & (n>>12);
 8002dd0:	0b23      	lsrs	r3, r4, #12
	it= ((n&(0x0F))<<4) + ((m>>18)&(0x0F));
 8002dd2:	eb02 1204 	add.w	r2, r2, r4, lsl #4
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8002dd6:	4631      	mov	r1, r6
	it=0xFF & (n>>12);
 8002dd8:	747b      	strb	r3, [r7, #17]
	it=0xFF & (m>>10);
 8002dda:	12ab      	asrs	r3, r5, #10
	it=0xFF & (n>>4);
 8002ddc:	0924      	lsrs	r4, r4, #4
	data[3]=it;
 8002dde:	74fa      	strb	r2, [r7, #19]
	it=0xFF & (m>>10);
 8002de0:	753b      	strb	r3, [r7, #20]
	it=0xFF & (m>>2);
 8002de2:	10ab      	asrs	r3, r5, #2
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8002de4:	22b0      	movs	r2, #176	; 0xb0
	it=0xFF & (n>>4);
 8002de6:	74bc      	strb	r4, [r7, #18]
	it=0xFF & (m>>2);
 8002de8:	757b      	strb	r3, [r7, #21]
	it=(m & 0x03)<<6 ;
 8002dea:	01ab      	lsls	r3, r5, #6
	memset(data,0,sizeof(data));
 8002dec:	f8c7 6017 	str.w	r6, [r7, #23]
	it=(m & 0x03)<<6 ;
 8002df0:	75bb      	strb	r3, [r7, #22]
	uint8_t channelbits[nbytes*8*2]; /* 162 rounded up */
 8002df2:	466b      	mov	r3, sp
			ENCODE(sym,encstate);
 8002df4:	4d8f      	ldr	r5, [pc, #572]	; (8003034 <get_wspr_channel_symbols+0x654>)
	uint8_t channelbits[nbytes*8*2]; /* 162 rounded up */
 8002df6:	ee08 3a90 	vmov	s17, r3
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8002dfa:	f00d ff69 	bl	8010cd0 <memset>
	while(nbytes-- != 0) {
 8002dfe:	f107 0310 	add.w	r3, r7, #16
 8002e02:	4a8d      	ldr	r2, [pc, #564]	; (8003038 <get_wspr_channel_symbols+0x658>)
			ENCODE(sym,encstate);
 8002e04:	4c8d      	ldr	r4, [pc, #564]	; (800303c <get_wspr_channel_symbols+0x65c>)
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e0c:	60fe      	str	r6, [r7, #12]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002e0e:	68b8      	ldr	r0, [r7, #8]
	while(nbytes-- != 0) {
 8002e10:	3310      	adds	r3, #16
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002e12:	68f9      	ldr	r1, [r7, #12]
 8002e14:	f810 9b01 	ldrb.w	r9, [r0], #1
 8002e18:	60b8      	str	r0, [r7, #8]
 8002e1a:	ea4f 10d9 	mov.w	r0, r9, lsr #7
 8002e1e:	f3c9 1880 	ubfx	r8, r9, #6, #1
 8002e22:	f3c9 1e40 	ubfx	lr, r9, #5, #1
 8002e26:	ea40 0141 	orr.w	r1, r0, r1, lsl #1
 8002e2a:	f3c9 1c00 	ubfx	ip, r9, #4, #1
 8002e2e:	f3c9 0680 	ubfx	r6, r9, #2, #1
 8002e32:	ea48 0841 	orr.w	r8, r8, r1, lsl #1
			ENCODE(sym,encstate);
 8002e36:	ea01 0005 	and.w	r0, r1, r5
 8002e3a:	4021      	ands	r1, r4
 8002e3c:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8002e40:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002e44:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
			ENCODE(sym,encstate);
 8002e48:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8002e4c:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8002e50:	b2c9      	uxtb	r1, r1
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002e52:	ea4c 0c4e 	orr.w	ip, ip, lr, lsl #1
			ENCODE(sym,encstate);
 8002e56:	f812 a001 	ldrb.w	sl, [r2, r1]
 8002e5a:	b2c0      	uxtb	r0, r0
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002e5c:	f3c9 01c0 	ubfx	r1, r9, #3, #1
			ENCODE(sym,encstate);
 8002e60:	5c10      	ldrb	r0, [r2, r0]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002e62:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
			ENCODE(sym,encstate);
 8002e66:	ea4a 0a40 	orr.w	sl, sl, r0, lsl #1
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002e6a:	f3c9 0040 	ubfx	r0, r9, #1, #1
 8002e6e:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
 8002e72:	6079      	str	r1, [r7, #4]
 8002e74:	f009 0101 	and.w	r1, r9, #1
			ENCODE(sym,encstate);
 8002e78:	ea08 0905 	and.w	r9, r8, r5
 8002e7c:	ea08 0804 	and.w	r8, r8, r4
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002e80:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
			ENCODE(sym,encstate);
 8002e84:	ea89 4919 	eor.w	r9, r9, r9, lsr #16
 8002e88:	ea88 4818 	eor.w	r8, r8, r8, lsr #16
 8002e8c:	ea89 2919 	eor.w	r9, r9, r9, lsr #8
 8002e90:	ea88 2818 	eor.w	r8, r8, r8, lsr #8
 8002e94:	fa5f f989 	uxtb.w	r9, r9
 8002e98:	fa5f f888 	uxtb.w	r8, r8
 8002e9c:	f812 9009 	ldrb.w	r9, [r2, r9]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002ea0:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
			ENCODE(sym,encstate);
 8002ea4:	f812 8008 	ldrb.w	r8, [r2, r8]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002ea8:	60f9      	str	r1, [r7, #12]
			ENCODE(sym,encstate);
 8002eaa:	ea48 0949 	orr.w	r9, r8, r9, lsl #1
 8002eae:	ea0e 0805 	and.w	r8, lr, r5
 8002eb2:	ea0e 0e04 	and.w	lr, lr, r4
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	ea88 4818 	eor.w	r8, r8, r8, lsr #16
 8002ebc:	ea8e 4e1e 	eor.w	lr, lr, lr, lsr #16
 8002ec0:	ea88 2818 	eor.w	r8, r8, r8, lsr #8
 8002ec4:	ea8e 2e1e 	eor.w	lr, lr, lr, lsr #8
 8002ec8:	fa5f f888 	uxtb.w	r8, r8
 8002ecc:	fa5f fe8e 	uxtb.w	lr, lr
 8002ed0:	f812 8008 	ldrb.w	r8, [r2, r8]
 8002ed4:	f812 e00e 	ldrb.w	lr, [r2, lr]
 8002ed8:	ea4e 0848 	orr.w	r8, lr, r8, lsl #1
 8002edc:	ea0c 0e05 	and.w	lr, ip, r5
 8002ee0:	ea0c 0c04 	and.w	ip, ip, r4
 8002ee4:	ea8e 4e1e 	eor.w	lr, lr, lr, lsr #16
 8002ee8:	ea8c 4c1c 	eor.w	ip, ip, ip, lsr #16
 8002eec:	ea8e 2e1e 	eor.w	lr, lr, lr, lsr #8
 8002ef0:	ea8c 2c1c 	eor.w	ip, ip, ip, lsr #8
 8002ef4:	fa5f fe8e 	uxtb.w	lr, lr
 8002ef8:	fa5f fc8c 	uxtb.w	ip, ip
 8002efc:	f812 e00e 	ldrb.w	lr, [r2, lr]
 8002f00:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002f04:	ea4c 0e4e 	orr.w	lr, ip, lr, lsl #1
 8002f08:	ea01 0c05 	and.w	ip, r1, r5
 8002f0c:	4021      	ands	r1, r4
 8002f0e:	ea8c 4c1c 	eor.w	ip, ip, ip, lsr #16
 8002f12:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
 8002f16:	ea8c 2c1c 	eor.w	ip, ip, ip, lsr #8
 8002f1a:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8002f1e:	fa5f fc8c 	uxtb.w	ip, ip
 8002f22:	b2c9      	uxtb	r1, r1
 8002f24:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002f28:	5c51      	ldrb	r1, [r2, r1]
 8002f2a:	ea41 0c4c 	orr.w	ip, r1, ip, lsl #1
 8002f2e:	ea06 0105 	and.w	r1, r6, r5
 8002f32:	4026      	ands	r6, r4
 8002f34:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
 8002f38:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 8002f3c:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8002f40:	ea86 2616 	eor.w	r6, r6, r6, lsr #8
 8002f44:	b2c9      	uxtb	r1, r1
 8002f46:	b2f6      	uxtb	r6, r6
 8002f48:	5c51      	ldrb	r1, [r2, r1]
 8002f4a:	5d96      	ldrb	r6, [r2, r6]
 8002f4c:	ea46 0141 	orr.w	r1, r6, r1, lsl #1
 8002f50:	ea00 0605 	and.w	r6, r0, r5
 8002f54:	4020      	ands	r0, r4
 8002f56:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 8002f5a:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8002f5e:	ea86 2616 	eor.w	r6, r6, r6, lsr #8
 8002f62:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8002f66:	b2f6      	uxtb	r6, r6
 8002f68:	b2c0      	uxtb	r0, r0
 8002f6a:	5d96      	ldrb	r6, [r2, r6]
 8002f6c:	5c10      	ldrb	r0, [r2, r0]
 8002f6e:	ea40 0646 	orr.w	r6, r0, r6, lsl #1
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	4028      	ands	r0, r5
 8002f76:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8002f7a:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8002f7e:	b2c0      	uxtb	r0, r0
 8002f80:	f812 b000 	ldrb.w	fp, [r2, r0]
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	4020      	ands	r0, r4
 8002f88:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8002f8c:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8002f90:	b2c0      	uxtb	r0, r0
 8002f92:	5c10      	ldrb	r0, [r2, r0]
 8002f94:	ea40 0b4b 	orr.w	fp, r0, fp, lsl #1
			*symbols++ = sym >> 1;
 8002f98:	ea4f 006a 	mov.w	r0, sl, asr #1
			*symbols++ = sym & 1;
 8002f9c:	f00a 0a01 	and.w	sl, sl, #1
			*symbols++ = sym >> 1;
 8002fa0:	f803 0c20 	strb.w	r0, [r3, #-32]
 8002fa4:	ea4f 0069 	mov.w	r0, r9, asr #1
			*symbols++ = sym & 1;
 8002fa8:	f009 0901 	and.w	r9, r9, #1
 8002fac:	f803 ac1f 	strb.w	sl, [r3, #-31]
			*symbols++ = sym >> 1;
 8002fb0:	f803 0c1e 	strb.w	r0, [r3, #-30]
 8002fb4:	ea4f 0068 	mov.w	r0, r8, asr #1
			*symbols++ = sym & 1;
 8002fb8:	f008 0801 	and.w	r8, r8, #1
 8002fbc:	f803 9c1d 	strb.w	r9, [r3, #-29]
			*symbols++ = sym >> 1;
 8002fc0:	f803 0c1c 	strb.w	r0, [r3, #-28]
 8002fc4:	ea4f 006e 	mov.w	r0, lr, asr #1
			*symbols++ = sym & 1;
 8002fc8:	f00e 0e01 	and.w	lr, lr, #1
 8002fcc:	f803 8c1b 	strb.w	r8, [r3, #-27]
			*symbols++ = sym >> 1;
 8002fd0:	f803 0c1a 	strb.w	r0, [r3, #-26]
 8002fd4:	ea4f 006c 	mov.w	r0, ip, asr #1
			*symbols++ = sym & 1;
 8002fd8:	f803 ec19 	strb.w	lr, [r3, #-25]
 8002fdc:	f00c 0c01 	and.w	ip, ip, #1
			*symbols++ = sym >> 1;
 8002fe0:	f803 0c18 	strb.w	r0, [r3, #-24]
 8002fe4:	1048      	asrs	r0, r1, #1
			*symbols++ = sym & 1;
 8002fe6:	f001 0101 	and.w	r1, r1, #1
 8002fea:	f803 cc17 	strb.w	ip, [r3, #-23]
			*symbols++ = sym >> 1;
 8002fee:	f803 0c16 	strb.w	r0, [r3, #-22]
 8002ff2:	1070      	asrs	r0, r6, #1
			*symbols++ = sym & 1;
 8002ff4:	f803 1c15 	strb.w	r1, [r3, #-21]
 8002ff8:	f006 0601 	and.w	r6, r6, #1
			*symbols++ = sym >> 1;
 8002ffc:	f803 0c14 	strb.w	r0, [r3, #-20]
 8003000:	ea4f 006b 	mov.w	r0, fp, asr #1
	while(nbytes-- != 0) {
 8003004:	f107 011b 	add.w	r1, r7, #27
			*symbols++ = sym & 1;
 8003008:	f00b 0b01 	and.w	fp, fp, #1
			*symbols++ = sym >> 1;
 800300c:	f803 0c12 	strb.w	r0, [r3, #-18]
	while(nbytes-- != 0) {
 8003010:	68b8      	ldr	r0, [r7, #8]
			*symbols++ = sym & 1;
 8003012:	f803 6c13 	strb.w	r6, [r3, #-19]
	while(nbytes-- != 0) {
 8003016:	4288      	cmp	r0, r1
			*symbols++ = sym & 1;
 8003018:	f803 bc11 	strb.w	fp, [r3, #-17]
	while(nbytes-- != 0) {
 800301c:	f47f aef7 	bne.w	8002e0e <get_wspr_channel_symbols+0x42e>
 8003020:	f04f 0e00 	mov.w	lr, #0
 8003024:	f107 0b5c 	add.w	fp, r7, #92	; 0x5c
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003028:	f8df a014 	ldr.w	sl, [pc, #20]	; 8003040 <get_wspr_channel_symbols+0x660>
	i = p = 0;
 800302c:	46f4      	mov	ip, lr
 800302e:	e009      	b.n	8003044 <get_wspr_channel_symbols+0x664>
 8003030:	0801b160 	.word	0x0801b160
 8003034:	f2d05351 	.word	0xf2d05351
 8003038:	0801afa8 	.word	0x0801afa8
 800303c:	e4613c47 	.word	0xe4613c47
 8003040:	84422110 	.word	0x84422110
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003044:	fa5f f58e 	uxtb.w	r5, lr
			tmp[j] = sym[p];
 8003048:	f50c 72d0 	add.w	r2, ip, #416	; 0x1a0
 800304c:	f107 0110 	add.w	r1, r7, #16
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003050:	2300      	movs	r3, #0
			p++;
 8003052:	f10c 0001 	add.w	r0, ip, #1
			tmp[j] = sym[p];
 8003056:	1854      	adds	r4, r2, r1
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003058:	462a      	mov	r2, r5
 800305a:	02ad      	lsls	r5, r5, #10
 800305c:	18ad      	adds	r5, r5, r2
 800305e:	f143 0300 	adc.w	r3, r3, #0
 8003062:	052a      	lsls	r2, r5, #20
 8003064:	051e      	lsls	r6, r3, #20
 8003066:	18aa      	adds	r2, r5, r2
 8003068:	ea46 3615 	orr.w	r6, r6, r5, lsr #12
 800306c:	eb43 0306 	adc.w	r3, r3, r6
 8003070:	1892      	adds	r2, r2, r2
 8003072:	415b      	adcs	r3, r3
 8003074:	ea02 060a 	and.w	r6, r2, sl
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	0235      	lsls	r5, r6, #8
 800307e:	021a      	lsls	r2, r3, #8
 8003080:	19ad      	adds	r5, r5, r6
 8003082:	ea42 6216 	orr.w	r2, r2, r6, lsr #24
 8003086:	ea4f 4105 	mov.w	r1, r5, lsl #16
 800308a:	eb43 0202 	adc.w	r2, r3, r2
 800308e:	1869      	adds	r1, r5, r1
 8003090:	ea4f 4902 	mov.w	r9, r2, lsl #16
 8003094:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8003098:	ea49 4915 	orr.w	r9, r9, r5, lsr #16
 800309c:	eb42 0209 	adc.w	r2, r2, r9
 80030a0:	eb18 0606 	adds.w	r6, r8, r6
 80030a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80030a8:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
 80030ac:	eb43 0302 	adc.w	r3, r3, r2
 80030b0:	b2db      	uxtb	r3, r3
		if (j < 162 ) {
 80030b2:	2ba1      	cmp	r3, #161	; 0xa1
 80030b4:	f200 80fa 	bhi.w	80032ac <get_wspr_channel_symbols+0x8cc>
			p++;
 80030b8:	fa5f fc80 	uxtb.w	ip, r0
			tmp[j] = sym[p];
 80030bc:	f814 2cb0 	ldrb.w	r2, [r4, #-176]
	while (p < 162) {
 80030c0:	f10e 0e01 	add.w	lr, lr, #1
 80030c4:	f1bc 0fa2 	cmp.w	ip, #162	; 0xa2
			tmp[j] = sym[p];
 80030c8:	f80b 2003 	strb.w	r2, [fp, r3]
	while (p < 162) {
 80030cc:	d1ba      	bne.n	8003044 <get_wspr_channel_symbols+0x664>
	memcpy(sym, tmp, sizeof(tmp));
 80030ce:	22a2      	movs	r2, #162	; 0xa2
 80030d0:	4659      	mov	r1, fp
 80030d2:	ee18 0a10 	vmov	r0, s16
 80030d6:	f207 15a1 	addw	r5, r7, #417	; 0x1a1
 80030da:	f00d fdeb 	bl	8010cb4 <memcpy>
	for (i=0; i < 162; i++) {
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f107 02ff 	add.w	r2, r7, #255	; 0xff
 80030e4:	48d3      	ldr	r0, [pc, #844]	; (8003434 <get_wspr_channel_symbols+0xa54>)
 80030e6:	1e59      	subs	r1, r3, #1
		symbols[i] = 2 * channelbits[i] + pr3[i];
 80030e8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80030ec:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 80030f0:	eb03 0344 	add.w	r3, r3, r4, lsl #1
	for (i=0; i < 162; i++) {
 80030f4:	42aa      	cmp	r2, r5
		symbols[i] = 2 * channelbits[i] + pr3[i];
 80030f6:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i=0; i < 162; i++) {
 80030fa:	d1f5      	bne.n	80030e8 <get_wspr_channel_symbols+0x708>
	return 1;
 80030fc:	ee18 3a90 	vmov	r3, s17
 8003100:	2001      	movs	r0, #1
}
 8003102:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8003106:	469d      	mov	sp, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	ecbd 8b02 	vpop	{d8}
 800310e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (length > 12)
 8003112:	280c      	cmp	r0, #12
 8003114:	f240 8263 	bls.w	80035de <get_wspr_channel_symbols+0xbfe>
 8003118:	360c      	adds	r6, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 800311a:	461a      	mov	r2, r3
 800311c:	4619      	mov	r1, r3
 800311e:	46a6      	mov	lr, r4
			c += k[2];
 8003120:	f856 4c04 	ldr.w	r4, [r6, #-4]
			length -= 12;
 8003124:	380c      	subs	r0, #12
 8003126:	46b4      	mov	ip, r6
		while (length > 12)
 8003128:	360c      	adds	r6, #12
			c += k[2];
 800312a:	4422      	add	r2, r4
			mix(a,b,c);
 800312c:	f856 4c18 	ldr.w	r4, [r6, #-24]
		while (length > 12)
 8003130:	280c      	cmp	r0, #12
			mix(a,b,c);
 8003132:	eba4 0402 	sub.w	r4, r4, r2
 8003136:	4423      	add	r3, r4
 8003138:	ea83 7332 	eor.w	r3, r3, r2, ror #28
 800313c:	461c      	mov	r4, r3
			b += k[1];
 800313e:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8003142:	440b      	add	r3, r1
			mix(a,b,c);
 8003144:	4621      	mov	r1, r4
 8003146:	441a      	add	r2, r3
 8003148:	eba3 0304 	sub.w	r3, r3, r4
 800314c:	ea83 63b4 	eor.w	r3, r3, r4, ror #26
 8003150:	4411      	add	r1, r2
 8003152:	eba2 0203 	sub.w	r2, r2, r3
 8003156:	ea82 6233 	eor.w	r2, r2, r3, ror #24
 800315a:	440b      	add	r3, r1
 800315c:	eba1 0102 	sub.w	r1, r1, r2
 8003160:	ea81 4132 	eor.w	r1, r1, r2, ror #16
 8003164:	441a      	add	r2, r3
 8003166:	460c      	mov	r4, r1
 8003168:	eba3 0301 	sub.w	r3, r3, r1
 800316c:	ea83 3171 	eor.w	r1, r3, r1, ror #13
 8003170:	4623      	mov	r3, r4
 8003172:	4413      	add	r3, r2
 8003174:	eba2 0201 	sub.w	r2, r2, r1
 8003178:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 800317c:	4419      	add	r1, r3
		while (length > 12)
 800317e:	d8cf      	bhi.n	8003120 <get_wspr_channel_symbols+0x740>
 8003180:	4674      	mov	r4, lr
 8003182:	46e0      	mov	r8, ip
		switch(length)
 8003184:	3801      	subs	r0, #1
 8003186:	280b      	cmp	r0, #11
 8003188:	d853      	bhi.n	8003232 <get_wspr_channel_symbols+0x852>
 800318a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800318e:	0036      	.short	0x0036
 8003190:	017d013f 	.word	0x017d013f
 8003194:	01720179 	.word	0x01720179
 8003198:	0164016b 	.word	0x0164016b
 800319c:	0159015d 	.word	0x0159015d
 80031a0:	014c0155 	.word	0x014c0155
 80031a4:	0143      	.short	0x0143
		case 12: c+=((uint32_t)k[11])<<24;
 80031a6:	f898 000b 	ldrb.w	r0, [r8, #11]
 80031aa:	eb02 6200 	add.w	r2, r2, r0, lsl #24
		case 11: c+=((uint32_t)k[10])<<16;
 80031ae:	f898 000a 	ldrb.w	r0, [r8, #10]
 80031b2:	eb02 4200 	add.w	r2, r2, r0, lsl #16
		case 10: c+=((uint32_t)k[9])<<8;
 80031b6:	f898 0009 	ldrb.w	r0, [r8, #9]
 80031ba:	eb02 2200 	add.w	r2, r2, r0, lsl #8
		case 9 : c+=k[8];
 80031be:	f898 0008 	ldrb.w	r0, [r8, #8]
 80031c2:	4402      	add	r2, r0
		case 8 : b+=((uint32_t)k[7])<<24;
 80031c4:	f898 0007 	ldrb.w	r0, [r8, #7]
 80031c8:	eb01 6100 	add.w	r1, r1, r0, lsl #24
		case 7 : b+=((uint32_t)k[6])<<16;
 80031cc:	f898 0006 	ldrb.w	r0, [r8, #6]
 80031d0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
		case 6 : b+=((uint32_t)k[5])<<8;
 80031d4:	f898 0005 	ldrb.w	r0, [r8, #5]
 80031d8:	eb01 2100 	add.w	r1, r1, r0, lsl #8
		case 5 : b+=k[4];
 80031dc:	f898 0004 	ldrb.w	r0, [r8, #4]
 80031e0:	4401      	add	r1, r0
		case 4 : a+=((uint32_t)k[3])<<24;
 80031e2:	f898 0003 	ldrb.w	r0, [r8, #3]
 80031e6:	eb03 6300 	add.w	r3, r3, r0, lsl #24
		case 3 : a+=((uint32_t)k[2])<<16;
 80031ea:	f898 0002 	ldrb.w	r0, [r8, #2]
 80031ee:	eb03 4300 	add.w	r3, r3, r0, lsl #16
		case 2 : a+=((uint32_t)k[1])<<8;
 80031f2:	f898 0001 	ldrb.w	r0, [r8, #1]
 80031f6:	eb03 2300 	add.w	r3, r3, r0, lsl #8
		case 1 : a+=k[0];
 80031fa:	f898 0000 	ldrb.w	r0, [r8]
 80031fe:	4403      	add	r3, r0
	final(a,b,c);
 8003200:	404a      	eors	r2, r1
 8003202:	eba2 40b1 	sub.w	r0, r2, r1, ror #18
 8003206:	4043      	eors	r3, r0
 8003208:	eba3 5370 	sub.w	r3, r3, r0, ror #21
 800320c:	4059      	eors	r1, r3
 800320e:	eba1 12f3 	sub.w	r2, r1, r3, ror #7
 8003212:	ea80 0102 	eor.w	r1, r0, r2
 8003216:	eba1 4132 	sub.w	r1, r1, r2, ror #16
 800321a:	404b      	eors	r3, r1
 800321c:	eba3 7331 	sub.w	r3, r3, r1, ror #28
 8003220:	405a      	eors	r2, r3
 8003222:	eba2 43b3 	sub.w	r3, r2, r3, ror #18
 8003226:	ea81 0203 	eor.w	r2, r1, r3
 800322a:	eba2 2333 	sub.w	r3, r2, r3, ror #8
	c=(32767&c);
 800322e:	f3c3 020e 	ubfx	r2, r3, #0, #15
		m=128*ihash + ntype + 64;
 8003232:	eb05 13c2 	add.w	r3, r5, r2, lsl #7
		memset(grid6,0,sizeof(char)*7);
 8003236:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800323a:	2200      	movs	r2, #0
		j=strlen(grid);
 800323c:	4620      	mov	r0, r4
		memset(grid6,0,sizeof(char)*7);
 800323e:	ee08 1a10 	vmov	s16, r1
		m=128*ihash + ntype + 64;
 8003242:	f103 0540 	add.w	r5, r3, #64	; 0x40
		memset(grid6,0,sizeof(char)*7);
 8003246:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 800324a:	f8c7 2103 	str.w	r2, [r7, #259]	; 0x103
		j=strlen(grid);
 800324e:	f7fd f847 	bl	80002e0 <strlen>
		for(i=0; i<j-1; i++) {
 8003252:	3801      	subs	r0, #1
 8003254:	2800      	cmp	r0, #0
 8003256:	dd20      	ble.n	800329a <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 8003258:	7863      	ldrb	r3, [r4, #1]
		for(i=0; i<j-1; i++) {
 800325a:	2801      	cmp	r0, #1
			grid6[i]=grid[i+1];
 800325c:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		for(i=0; i<j-1; i++) {
 8003260:	d01b      	beq.n	800329a <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 8003262:	78a3      	ldrb	r3, [r4, #2]
		for(i=0; i<j-1; i++) {
 8003264:	2802      	cmp	r0, #2
			grid6[i]=grid[i+1];
 8003266:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		for(i=0; i<j-1; i++) {
 800326a:	d016      	beq.n	800329a <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 800326c:	78e3      	ldrb	r3, [r4, #3]
		for(i=0; i<j-1; i++) {
 800326e:	2803      	cmp	r0, #3
			grid6[i]=grid[i+1];
 8003270:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		for(i=0; i<j-1; i++) {
 8003274:	d011      	beq.n	800329a <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 8003276:	7923      	ldrb	r3, [r4, #4]
		for(i=0; i<j-1; i++) {
 8003278:	2804      	cmp	r0, #4
			grid6[i]=grid[i+1];
 800327a:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		for(i=0; i<j-1; i++) {
 800327e:	d00c      	beq.n	800329a <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 8003280:	7963      	ldrb	r3, [r4, #5]
		for(i=0; i<j-1; i++) {
 8003282:	2805      	cmp	r0, #5
			grid6[i]=grid[i+1];
 8003284:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		for(i=0; i<j-1; i++) {
 8003288:	d007      	beq.n	800329a <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 800328a:	79a3      	ldrb	r3, [r4, #6]
		for(i=0; i<j-1; i++) {
 800328c:	2806      	cmp	r0, #6
			grid6[i]=grid[i+1];
 800328e:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		for(i=0; i<j-1; i++) {
 8003292:	d002      	beq.n	800329a <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 8003294:	79e3      	ldrb	r3, [r4, #7]
 8003296:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		grid6[5]=grid[0];
 800329a:	7823      	ldrb	r3, [r4, #0]
		n = pack_call(grid6);
 800329c:	ee18 0a10 	vmov	r0, s16
		grid6[5]=grid[0];
 80032a0:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		n = pack_call(grid6);
 80032a4:	f7ff fad4 	bl	8002850 <pack_call>
 80032a8:	4604      	mov	r4, r0
 80032aa:	e58a      	b.n	8002dc2 <get_wspr_channel_symbols+0x3e2>
	while (p < 162) {
 80032ac:	f1bc 0fa1 	cmp.w	ip, #161	; 0xa1
 80032b0:	f10e 0e01 	add.w	lr, lr, #1
 80032b4:	f67f aec6 	bls.w	8003044 <get_wspr_channel_symbols+0x664>
 80032b8:	e709      	b.n	80030ce <get_wspr_channel_symbols+0x6ee>
		while (length > 12)
 80032ba:	280c      	cmp	r0, #12
 80032bc:	f240 81ab 	bls.w	8003616 <get_wspr_channel_symbols+0xc36>
 80032c0:	360c      	adds	r6, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 80032c2:	461a      	mov	r2, r3
 80032c4:	4619      	mov	r1, r3
 80032c6:	46a6      	mov	lr, r4
			c += k[4] + (((uint32_t)k[5])<<16);
 80032c8:	f836 cc02 	ldrh.w	ip, [r6, #-2]
			length -= 12;
 80032cc:	380c      	subs	r0, #12
			c += k[4] + (((uint32_t)k[5])<<16);
 80032ce:	f836 4c04 	ldrh.w	r4, [r6, #-4]
		while (length > 12)
 80032d2:	280c      	cmp	r0, #12
			c += k[4] + (((uint32_t)k[5])<<16);
 80032d4:	eb04 440c 	add.w	r4, r4, ip, lsl #16
			a += k[0] + (((uint32_t)k[1])<<16);
 80032d8:	f836 cc0a 	ldrh.w	ip, [r6, #-10]
			c += k[4] + (((uint32_t)k[5])<<16);
 80032dc:	4422      	add	r2, r4
 80032de:	4614      	mov	r4, r2
			a += k[0] + (((uint32_t)k[1])<<16);
 80032e0:	f836 2c0c 	ldrh.w	r2, [r6, #-12]
			mix(a,b,c);
 80032e4:	eb02 420c 	add.w	r2, r2, ip, lsl #16
			b += k[2] + (((uint32_t)k[3])<<16);
 80032e8:	f836 cc06 	ldrh.w	ip, [r6, #-6]
			mix(a,b,c);
 80032ec:	eba2 0204 	sub.w	r2, r2, r4
 80032f0:	441a      	add	r2, r3
			b += k[2] + (((uint32_t)k[3])<<16);
 80032f2:	f836 3c08 	ldrh.w	r3, [r6, #-8]
 80032f6:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 80032fa:	46b4      	mov	ip, r6
			mix(a,b,c);
 80032fc:	ea82 7234 	eor.w	r2, r2, r4, ror #28
		while (length > 12)
 8003300:	f106 060c 	add.w	r6, r6, #12
			b += k[2] + (((uint32_t)k[3])<<16);
 8003304:	440b      	add	r3, r1
			mix(a,b,c);
 8003306:	eb03 0104 	add.w	r1, r3, r4
 800330a:	eba3 0302 	sub.w	r3, r3, r2
 800330e:	ea83 63b2 	eor.w	r3, r3, r2, ror #26
 8003312:	440a      	add	r2, r1
 8003314:	eba1 0103 	sub.w	r1, r1, r3
 8003318:	ea81 6133 	eor.w	r1, r1, r3, ror #24
 800331c:	4413      	add	r3, r2
 800331e:	eba2 0201 	sub.w	r2, r2, r1
 8003322:	eb01 0403 	add.w	r4, r1, r3
 8003326:	ea82 4231 	eor.w	r2, r2, r1, ror #16
 800332a:	eba3 0302 	sub.w	r3, r3, r2
 800332e:	ea83 3172 	eor.w	r1, r3, r2, ror #13
 8003332:	eb02 0304 	add.w	r3, r2, r4
 8003336:	eba4 0201 	sub.w	r2, r4, r1
 800333a:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 800333e:	4419      	add	r1, r3
		while (length > 12)
 8003340:	d8c2      	bhi.n	80032c8 <get_wspr_channel_symbols+0x8e8>
 8003342:	4674      	mov	r4, lr
 8003344:	46e0      	mov	r8, ip
		switch(length)
 8003346:	3801      	subs	r0, #1
 8003348:	280b      	cmp	r0, #11
 800334a:	f63f af72 	bhi.w	8003232 <get_wspr_channel_symbols+0x852>
 800334e:	a601      	add	r6, pc, #4	; (adr r6, 8003354 <get_wspr_channel_symbols+0x974>)
 8003350:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 8003354:	080031fb 	.word	0x080031fb
 8003358:	0800340d 	.word	0x0800340d
 800335c:	08003405 	.word	0x08003405
 8003360:	08003509 	.word	0x08003509
 8003364:	08003503 	.word	0x08003503
 8003368:	080034ed 	.word	0x080034ed
 800336c:	080034e5 	.word	0x080034e5
 8003370:	080034c7 	.word	0x080034c7
 8003374:	080034c1 	.word	0x080034c1
 8003378:	0800349d 	.word	0x0800349d
 800337c:	08003495 	.word	0x08003495
 8003380:	08003519 	.word	0x08003519
		for (i=0; i<i1; i++) {
 8003384:	b300      	cbz	r0, 80033c8 <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 8003386:	7823      	ldrb	r3, [r4, #0]
		for (i=0; i<i1; i++) {
 8003388:	2801      	cmp	r0, #1
			call6[i]=callsign[i];
 800338a:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		for (i=0; i<i1; i++) {
 800338e:	d01b      	beq.n	80033c8 <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 8003390:	7863      	ldrb	r3, [r4, #1]
		for (i=0; i<i1; i++) {
 8003392:	2802      	cmp	r0, #2
			call6[i]=callsign[i];
 8003394:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		for (i=0; i<i1; i++) {
 8003398:	d016      	beq.n	80033c8 <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 800339a:	78a3      	ldrb	r3, [r4, #2]
		for (i=0; i<i1; i++) {
 800339c:	2803      	cmp	r0, #3
			call6[i]=callsign[i];
 800339e:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		for (i=0; i<i1; i++) {
 80033a2:	d011      	beq.n	80033c8 <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 80033a4:	78e3      	ldrb	r3, [r4, #3]
		for (i=0; i<i1; i++) {
 80033a6:	2804      	cmp	r0, #4
			call6[i]=callsign[i];
 80033a8:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		for (i=0; i<i1; i++) {
 80033ac:	d00c      	beq.n	80033c8 <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 80033ae:	7923      	ldrb	r3, [r4, #4]
		for (i=0; i<i1; i++) {
 80033b0:	2805      	cmp	r0, #5
			call6[i]=callsign[i];
 80033b2:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		for (i=0; i<i1; i++) {
 80033b6:	d007      	beq.n	80033c8 <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 80033b8:	7963      	ldrb	r3, [r4, #5]
		for (i=0; i<i1; i++) {
 80033ba:	2806      	cmp	r0, #6
			call6[i]=callsign[i];
 80033bc:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		for (i=0; i<i1; i++) {
 80033c0:	d002      	beq.n	80033c8 <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 80033c2:	79a3      	ldrb	r3, [r4, #6]
 80033c4:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		call6[i] = '\0';
 80033c8:	f107 0210 	add.w	r2, r7, #16
 80033cc:	f506 73d0 	add.w	r3, r6, #416	; 0x1a0
 80033d0:	4413      	add	r3, r2
		*n=pack_call(call6);
 80033d2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80033d6:	4610      	mov	r0, r2
 80033d8:	ee08 2a10 	vmov	s16, r2
		call6[i] = '\0';
 80033dc:	2200      	movs	r2, #0
 80033de:	f803 2cb0 	strb.w	r2, [r3, #-176]
		*n=pack_call(call6);
 80033e2:	f7ff fa35 	bl	8002850 <pack_call>
		int nc = callsign[i1+1];
 80033e6:	4653      	mov	r3, sl
		*n=pack_call(call6);
 80033e8:	4604      	mov	r4, r0
		int nc = callsign[i1+1];
 80033ea:	4433      	add	r3, r6
 80033ec:	785a      	ldrb	r2, [r3, #1]
		if( nc >= 48 && nc <= 57 ) {
 80033ee:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80033f2:	2b09      	cmp	r3, #9
 80033f4:	f200 80a6 	bhi.w	8003544 <get_wspr_channel_symbols+0xb64>
		*m=60000-32768+*m;
 80033f8:	f646 2330 	movw	r3, #27184	; 0x6a30
 80033fc:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 80033fe:	01db      	lsls	r3, r3, #7
 8003400:	f7ff bbbf 	b.w	8002b82 <get_wspr_channel_symbols+0x1a2>
		case 3 : a+=((uint32_t)k8[2])<<16;      /* fall through */
 8003404:	f898 0002 	ldrb.w	r0, [r8, #2]
 8003408:	eb03 4300 	add.w	r3, r3, r0, lsl #16
		case 2 : a+=k[0];
 800340c:	f8b8 0000 	ldrh.w	r0, [r8]
 8003410:	4403      	add	r3, r0
		break;
 8003412:	e6f5      	b.n	8003200 <get_wspr_channel_symbols+0x820>
		case 12: c+=k[2]; b+=k[1]; a+=k[0]; break;
 8003414:	4646      	mov	r6, r8
 8003416:	f8d8 0008 	ldr.w	r0, [r8, #8]
		case 11: c+=k[2]&0xffffff; b+=k[1]; a+=k[0]; break;
 800341a:	4402      	add	r2, r0
 800341c:	6870      	ldr	r0, [r6, #4]
 800341e:	4401      	add	r1, r0
 8003420:	6830      	ldr	r0, [r6, #0]
 8003422:	4403      	add	r3, r0
 8003424:	e6ec      	b.n	8003200 <get_wspr_channel_symbols+0x820>
 8003426:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800342a:	4646      	mov	r6, r8
 800342c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8003430:	e7f3      	b.n	800341a <get_wspr_channel_symbols+0xa3a>
 8003432:	bf00      	nop
 8003434:	0801b0a7 	.word	0x0801b0a7
		case 10: c+=k[2]&0xffff; b+=k[1]; a+=k[0]; break;
 8003438:	4646      	mov	r6, r8
 800343a:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 800343e:	e7ec      	b.n	800341a <get_wspr_channel_symbols+0xa3a>
		case 9 : c+=k[2]&0xff; b+=k[1]; a+=k[0]; break;
 8003440:	4646      	mov	r6, r8
 8003442:	f898 0008 	ldrb.w	r0, [r8, #8]
 8003446:	e7e8      	b.n	800341a <get_wspr_channel_symbols+0xa3a>
		case 8 : b+=k[1]; a+=k[0]; break;
 8003448:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800344c:	4401      	add	r1, r0
 800344e:	f8d8 0000 	ldr.w	r0, [r8]
 8003452:	4403      	add	r3, r0
 8003454:	e6d4      	b.n	8003200 <get_wspr_channel_symbols+0x820>
		case 7 : b+=k[1]&0xffffff; a+=k[0]; break;
 8003456:	e9d8 6000 	ldrd	r6, r0, [r8]
 800345a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800345e:	4433      	add	r3, r6
 8003460:	4401      	add	r1, r0
 8003462:	e6cd      	b.n	8003200 <get_wspr_channel_symbols+0x820>
		case 6 : b+=k[1]&0xffff; a+=k[0]; break;
 8003464:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8003468:	4401      	add	r1, r0
 800346a:	f8d8 0000 	ldr.w	r0, [r8]
 800346e:	4403      	add	r3, r0
 8003470:	e6c6      	b.n	8003200 <get_wspr_channel_symbols+0x820>
		case 5 : b+=k[1]&0xff; a+=k[0]; break;
 8003472:	f898 0004 	ldrb.w	r0, [r8, #4]
 8003476:	4401      	add	r1, r0
 8003478:	f8d8 0000 	ldr.w	r0, [r8]
 800347c:	4403      	add	r3, r0
 800347e:	e6bf      	b.n	8003200 <get_wspr_channel_symbols+0x820>
		case 4 : a+=k[0]; break;
 8003480:	f8d8 0000 	ldr.w	r0, [r8]
 8003484:	4403      	add	r3, r0
 8003486:	e6bb      	b.n	8003200 <get_wspr_channel_symbols+0x820>
		case 3 : a+=k[0]&0xffffff; break;
 8003488:	f8d8 0000 	ldr.w	r0, [r8]
 800348c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8003490:	4403      	add	r3, r0
 8003492:	e6b5      	b.n	8003200 <get_wspr_channel_symbols+0x820>
		case 11: c+=((uint32_t)k8[10])<<16;     /* fall through */
 8003494:	f898 000a 	ldrb.w	r0, [r8, #10]
 8003498:	eb02 4200 	add.w	r2, r2, r0, lsl #16
		b+=k[2]+(((uint32_t)k[3])<<16);
 800349c:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80034a0:	4401      	add	r1, r0
		a+=k[0]+(((uint32_t)k[1])<<16);
 80034a2:	f8b8 0000 	ldrh.w	r0, [r8]
 80034a6:	4418      	add	r0, r3
		case 10: c+=k[4];
 80034a8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80034ac:	441a      	add	r2, r3
		b+=k[2]+(((uint32_t)k[3])<<16);
 80034ae:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80034b2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 80034b6:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80034ba:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 80034be:	e69f      	b.n	8003200 <get_wspr_channel_symbols+0x820>
		case 9 : c+=k8[8];                      /* fall through */
 80034c0:	f898 0008 	ldrb.w	r0, [r8, #8]
 80034c4:	4402      	add	r2, r0
		case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 80034c6:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80034ca:	4401      	add	r1, r0
		a+=k[0]+(((uint32_t)k[1])<<16);
 80034cc:	f8b8 0000 	ldrh.w	r0, [r8]
 80034d0:	4418      	add	r0, r3
		case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 80034d2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80034d6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 80034da:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80034de:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 80034e2:	e68d      	b.n	8003200 <get_wspr_channel_symbols+0x820>
		case 7 : b+=((uint32_t)k8[6])<<16;      /* fall through */
 80034e4:	f898 0006 	ldrb.w	r0, [r8, #6]
 80034e8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 80034ec:	f8b8 0000 	ldrh.w	r0, [r8]
 80034f0:	4418      	add	r0, r3
		case 6 : b+=k[2];
 80034f2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80034f6:	4419      	add	r1, r3
		a+=k[0]+(((uint32_t)k[1])<<16);
 80034f8:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80034fc:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 8003500:	e67e      	b.n	8003200 <get_wspr_channel_symbols+0x820>
		case 5 : b+=k8[4];                      /* fall through */
 8003502:	f898 0004 	ldrb.w	r0, [r8, #4]
 8003506:	4401      	add	r1, r0
		case 4 : a+=k[0]+(((uint32_t)k[1])<<16);
 8003508:	f8b8 0000 	ldrh.w	r0, [r8]
 800350c:	4418      	add	r0, r3
 800350e:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8003512:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 8003516:	e673      	b.n	8003200 <get_wspr_channel_symbols+0x820>
		case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 8003518:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 800351c:	4402      	add	r2, r0
		b+=k[2]+(((uint32_t)k[3])<<16);
 800351e:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8003522:	4401      	add	r1, r0
		a+=k[0]+(((uint32_t)k[1])<<16);
 8003524:	f8b8 0000 	ldrh.w	r0, [r8]
 8003528:	4418      	add	r0, r3
		case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 800352a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800352e:	eb02 4203 	add.w	r2, r2, r3, lsl #16
		b+=k[2]+(((uint32_t)k[3])<<16);
 8003532:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8003536:	eb01 4103 	add.w	r1, r1, r3, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 800353a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800353e:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 8003542:	e65d      	b.n	8003200 <get_wspr_channel_symbols+0x820>
		} else if ( nc >= 65 && nc <= 90 ) {
 8003544:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 8003548:	2b19      	cmp	r3, #25
 800354a:	d854      	bhi.n	80035f6 <get_wspr_channel_symbols+0xc16>
		*m=60000-32768+*m;
 800354c:	f646 2329 	movw	r3, #27177	; 0x6a29
 8003550:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 8003552:	01db      	lsls	r3, r3, #7
 8003554:	f7ff bb15 	b.w	8002b82 <get_wspr_channel_symbols+0x1a2>
		char const * pfx = strtok (callsign,"/");
 8003558:	4936      	ldr	r1, [pc, #216]	; (8003634 <get_wspr_channel_symbols+0xc54>)
 800355a:	4620      	mov	r0, r4
 800355c:	f00e f8a8 	bl	80116b0 <strtok>
		char const * call = strtok(NULL," ");
 8003560:	4935      	ldr	r1, [pc, #212]	; (8003638 <get_wspr_channel_symbols+0xc58>)
		char const * pfx = strtok (callsign,"/");
 8003562:	4606      	mov	r6, r0
		char const * call = strtok(NULL," ");
 8003564:	2000      	movs	r0, #0
 8003566:	f00e f8a3 	bl	80116b0 <strtok>
		*n = pack_call (call);
 800356a:	f7ff f971 	bl	8002850 <pack_call>
 800356e:	4604      	mov	r4, r0
		size_t plen=strlen (pfx);
 8003570:	4630      	mov	r0, r6
 8003572:	f7fc feb5 	bl	80002e0 <strlen>
		if( plen ==1 ) {
 8003576:	2801      	cmp	r0, #1
 8003578:	d042      	beq.n	8003600 <get_wspr_channel_symbols+0xc20>
		} else if( plen == 2 ) {
 800357a:	2802      	cmp	r0, #2
 800357c:	d03e      	beq.n	80035fc <get_wspr_channel_symbols+0xc1c>
		for (i=0; i<plen; i++) {
 800357e:	2800      	cmp	r0, #0
 8003580:	d050      	beq.n	8003624 <get_wspr_channel_symbols+0xc44>
			*m=0;
 8003582:	2300      	movs	r3, #0
 8003584:	f10a 3cff 	add.w	ip, sl, #4294967295
 8003588:	46d0      	mov	r8, sl
			} else if ( nc >= 65 && nc <= 90 ) {
 800358a:	4662      	mov	r2, ip
			int nc = callsign[i];
 800358c:	f81c 6f01 	ldrb.w	r6, [ip, #1]!
			if( nc >= 48 && nc <= 57 ) {
 8003590:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
			} else if ( nc >= 65 && nc <= 90 ) {
 8003594:	f1a6 0e41 	sub.w	lr, r6, #65	; 0x41
			if( nc >= 48 && nc <= 57 ) {
 8003598:	2909      	cmp	r1, #9
 800359a:	d906      	bls.n	80035aa <get_wspr_channel_symbols+0xbca>
			} else if ( nc >= 65 && nc <= 90 ) {
 800359c:	f1be 0f19 	cmp.w	lr, #25
				nc=36;
 80035a0:	f04f 0124 	mov.w	r1, #36	; 0x24
				nc=nc-65+10;
 80035a4:	bf98      	it	ls
 80035a6:	f1a6 0137 	subls.w	r1, r6, #55	; 0x37
		for (i=0; i<plen; i++) {
 80035aa:	4646      	mov	r6, r8
 80035ac:	3202      	adds	r2, #2
 80035ae:	1b92      	subs	r2, r2, r6
			*m=37*(*m)+nc;
 80035b0:	eb03 06c3 	add.w	r6, r3, r3, lsl #3
		for (i=0; i<plen; i++) {
 80035b4:	4290      	cmp	r0, r2
			*m=37*(*m)+nc;
 80035b6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80035ba:	440b      	add	r3, r1
		for (i=0; i<plen; i++) {
 80035bc:	d8e5      	bhi.n	800358a <get_wspr_channel_symbols+0xbaa>
		if( *m > 32768 ) {
 80035be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c2:	dd20      	ble.n	8003606 <get_wspr_channel_symbols+0xc26>
			*m=*m-32768;
 80035c4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80035c8:	f507 7280 	add.w	r2, r7, #256	; 0x100
			*nadd=1;
 80035cc:	2001      	movs	r0, #1
		m=128*ng+ntype+64;
 80035ce:	01db      	lsls	r3, r3, #7
 80035d0:	ee08 2a10 	vmov	s16, r2
 80035d4:	f7ff bad6 	b.w	8002b84 <get_wspr_channel_symbols+0x1a4>
		return 36;
 80035d8:	2124      	movs	r1, #36	; 0x24
 80035da:	f7ff bbdc 	b.w	8002d96 <get_wspr_channel_symbols+0x3b6>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 80035de:	461a      	mov	r2, r3
 80035e0:	4619      	mov	r1, r3
 80035e2:	e5cf      	b.n	8003184 <get_wspr_channel_symbols+0x7a4>
		return 36;
 80035e4:	2324      	movs	r3, #36	; 0x24
 80035e6:	f7ff bbb9 	b.w	8002d5c <get_wspr_channel_symbols+0x37c>
 80035ea:	2224      	movs	r2, #36	; 0x24
 80035ec:	f7ff bba7 	b.w	8002d3e <get_wspr_channel_symbols+0x35e>
 80035f0:	2024      	movs	r0, #36	; 0x24
 80035f2:	f7ff bbc1 	b.w	8002d78 <get_wspr_channel_symbols+0x398>
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <get_wspr_channel_symbols+0xc5c>)
		*m=60000-32768+*m;
 80035f8:	f7ff bac3 	b.w	8002b82 <get_wspr_channel_symbols+0x1a2>
			*m=36;
 80035fc:	2324      	movs	r3, #36	; 0x24
		for (i=0; i<plen; i++) {
 80035fe:	e7c1      	b.n	8003584 <get_wspr_channel_symbols+0xba4>
			*m=37*(*m)+36;
 8003600:	f44f 63ab 	mov.w	r3, #1368	; 0x558
 8003604:	e7be      	b.n	8003584 <get_wspr_channel_symbols+0xba4>
 8003606:	f507 7280 	add.w	r2, r7, #256	; 0x100
		m=128*ng+ntype+64;
 800360a:	01db      	lsls	r3, r3, #7
		*nadd=0;
 800360c:	2000      	movs	r0, #0
 800360e:	ee08 2a10 	vmov	s16, r2
 8003612:	f7ff bab7 	b.w	8002b84 <get_wspr_channel_symbols+0x1a4>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8003616:	461a      	mov	r2, r3
 8003618:	4619      	mov	r1, r3
 800361a:	e694      	b.n	8003346 <get_wspr_channel_symbols+0x966>
 800361c:	461a      	mov	r2, r3
 800361e:	4619      	mov	r1, r3
 8003620:	f7ff bb46 	b.w	8002cb0 <get_wspr_channel_symbols+0x2d0>
 8003624:	f507 7280 	add.w	r2, r7, #256	; 0x100
		for (i=0; i<plen; i++) {
 8003628:	4603      	mov	r3, r0
 800362a:	ee08 2a10 	vmov	s16, r2
 800362e:	f7ff baa9 	b.w	8002b84 <get_wspr_channel_symbols+0x1a4>
 8003632:	bf00      	nop
 8003634:	0801af88 	.word	0x0801af88
 8003638:	0801b160 	.word	0x0801b160
 800363c:	00354300 	.word	0x00354300

08003640 <SendWSPR>:
{
 8003640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void) get_wspr_channel_symbols("I4NZX JN54 30", syms);
 8003644:	496c      	ldr	r1, [pc, #432]	; (80037f8 <SendWSPR+0x1b8>)
 8003646:	486d      	ldr	r0, [pc, #436]	; (80037fc <SendWSPR+0x1bc>)
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8003648:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8003838 <SendWSPR+0x1f8>
 800364c:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 800383c <SendWSPR+0x1fc>
{
 8003650:	ed2d 8b02 	vpush	{d8}
	(void) get_wspr_channel_symbols("I4NZX JN54 30", syms);
 8003654:	f7ff f9c4 	bl	80029e0 <get_wspr_channel_symbols>
	LOfreq = (double)WSPR_FREQ;
 8003658:	4b69      	ldr	r3, [pc, #420]	; (8003800 <SendWSPR+0x1c0>)
 800365a:	486a      	ldr	r0, [pc, #424]	; (8003804 <SendWSPR+0x1c4>)
	LastTXFreq = LOfreq;
 800365c:	4a6a      	ldr	r2, [pc, #424]	; (8003808 <SendWSPR+0x1c8>)
	LOfreq = (double)WSPR_FREQ;
 800365e:	6003      	str	r3, [r0, #0]
	SetWSPRPLLCoeff((double)WSPR_FREQ, FracDivCoeff, FracPWMCoeff);
 8003660:	496a      	ldr	r1, [pc, #424]	; (800380c <SendWSPR+0x1cc>)
 8003662:	486b      	ldr	r0, [pc, #428]	; (8003810 <SendWSPR+0x1d0>)
	LastTXFreq = LOfreq;
 8003664:	6013      	str	r3, [r2, #0]
	SetWSPRPLLCoeff((double)WSPR_FREQ, FracDivCoeff, FracPWMCoeff);
 8003666:	ed9f 0b62 	vldr	d0, [pc, #392]	; 80037f0 <SendWSPR+0x1b0>
 800366a:	f000 fa81 	bl	8003b70 <SetWSPRPLLCoeff>
	WSPRTXFraction = 20; //percentage
 800366e:	2214      	movs	r2, #20
 8003670:	4968      	ldr	r1, [pc, #416]	; (8003814 <SendWSPR+0x1d4>)
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8003672:	f8d8 3000 	ldr.w	r3, [r8]
	WSPRTXFraction = 20; //percentage
 8003676:	700a      	strb	r2, [r1, #0]
				LED_GREEN_ON;
 8003678:	4d67      	ldr	r5, [pc, #412]	; (8003818 <SendWSPR+0x1d8>)
			if(KEYER_DASH || KEYER_DOT)
 800367a:	4c68      	ldr	r4, [pc, #416]	; (800381c <SendWSPR+0x1dc>)
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 800367c:	e014      	b.n	80036a8 <SendWSPR+0x68>
 800367e:	f8db 3000 	ldr.w	r3, [fp]
 8003682:	07da      	lsls	r2, r3, #31
 8003684:	d51e      	bpl.n	80036c4 <SendWSPR+0x84>
				LED_GREEN_ON;
 8003686:	2201      	movs	r2, #1
 8003688:	f005 fbe6 	bl	8008e58 <HAL_GPIO_WritePin>
			if(KEYER_DASH || KEYER_DOT)
 800368c:	2140      	movs	r1, #64	; 0x40
 800368e:	4620      	mov	r0, r4
 8003690:	f005 fbdc 	bl	8008e4c <HAL_GPIO_ReadPin>
 8003694:	4603      	mov	r3, r0
 8003696:	2180      	movs	r1, #128	; 0x80
 8003698:	4620      	mov	r0, r4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d036      	beq.n	800370c <SendWSPR+0xcc>
 800369e:	f005 fbd5 	bl	8008e4c <HAL_GPIO_ReadPin>
 80036a2:	b398      	cbz	r0, 800370c <SendWSPR+0xcc>
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 80036a4:	f8d8 3000 	ldr.w	r3, [r8]
				LED_GREEN_OFF;
 80036a8:	2200      	movs	r2, #0
				LED_GREEN_ON;
 80036aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036ae:	4628      	mov	r0, r5
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0e4      	beq.n	800367e <SendWSPR+0x3e>
			if (SystemSeconds % 2 == 0)
 80036b4:	07de      	lsls	r6, r3, #31
 80036b6:	d5e6      	bpl.n	8003686 <SendWSPR+0x46>
				LED_GREEN_OFF;
 80036b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036bc:	4628      	mov	r0, r5
 80036be:	f005 fbcb 	bl	8008e58 <HAL_GPIO_WritePin>
 80036c2:	e7e3      	b.n	800368c <SendWSPR+0x4c>
		if (((rand() % 101) > WSPRTXFraction) && (!WSPRFirstTime))
 80036c4:	f00d ff7c 	bl	80115c0 <rand>
 80036c8:	4b52      	ldr	r3, [pc, #328]	; (8003814 <SendWSPR+0x1d4>)
 80036ca:	2165      	movs	r1, #101	; 0x65
 80036cc:	781a      	ldrb	r2, [r3, #0]
 80036ce:	4b54      	ldr	r3, [pc, #336]	; (8003820 <SendWSPR+0x1e0>)
 80036d0:	fb83 3400 	smull	r3, r4, r3, r0
 80036d4:	17c3      	asrs	r3, r0, #31
 80036d6:	ebc3 1324 	rsb	r3, r3, r4, asr #4
 80036da:	4c52      	ldr	r4, [pc, #328]	; (8003824 <SendWSPR+0x1e4>)
 80036dc:	fb01 0013 	mls	r0, r1, r3, r0
 80036e0:	4290      	cmp	r0, r2
 80036e2:	dd17      	ble.n	8003714 <SendWSPR+0xd4>
 80036e4:	7823      	ldrb	r3, [r4, #0]
 80036e6:	b9ab      	cbnz	r3, 8003714 <SendWSPR+0xd4>
				if(KEYER_DASH || KEYER_DOT)
 80036e8:	4c4c      	ldr	r4, [pc, #304]	; (800381c <SendWSPR+0x1dc>)
 80036ea:	e002      	b.n	80036f2 <SendWSPR+0xb2>
 80036ec:	f005 fbae 	bl	8008e4c <HAL_GPIO_ReadPin>
 80036f0:	b160      	cbz	r0, 800370c <SendWSPR+0xcc>
			while (SystemSeconds != 1)
 80036f2:	f8d8 3000 	ldr.w	r3, [r8]
				if(KEYER_DASH || KEYER_DOT)
 80036f6:	2140      	movs	r1, #64	; 0x40
 80036f8:	4620      	mov	r0, r4
			while (SystemSeconds != 1)
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d0bc      	beq.n	8003678 <SendWSPR+0x38>
				if(KEYER_DASH || KEYER_DOT)
 80036fe:	f005 fba5 	bl	8008e4c <HAL_GPIO_ReadPin>
 8003702:	4603      	mov	r3, r0
 8003704:	2180      	movs	r1, #128	; 0x80
 8003706:	4620      	mov	r0, r4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1ef      	bne.n	80036ec <SendWSPR+0xac>
}
 800370c:	ecbd 8b02 	vpop	{d8}
 8003710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (HAL_ADCEx_MultiModeStart_DMA(HAdc1,
 8003714:	4b44      	ldr	r3, [pc, #272]	; (8003828 <SendWSPR+0x1e8>)
 8003716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800371a:	4944      	ldr	r1, [pc, #272]	; (800382c <SendWSPR+0x1ec>)
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	f003 fbdb 	bl	8006ed8 <HAL_ADCEx_MultiModeStart_DMA>
 8003722:	2800      	cmp	r0, #0
 8003724:	d161      	bne.n	80037ea <SendWSPR+0x1aa>
			WSPRFirstTime = 0;
 8003726:	2300      	movs	r3, #0
			TXSwitch(1);
 8003728:	2001      	movs	r0, #1
			WSPRFirstTime = 0;
 800372a:	7023      	strb	r3, [r4, #0]
			TXSwitch(1);
 800372c:	f000 fcbc 	bl	80040a8 <TXSwitch>
			CarrierEnable(1);
 8003730:	2001      	movs	r0, #1
				if(KEYER_DASH || KEYER_DOT)
 8003732:	4c3a      	ldr	r4, [pc, #232]	; (800381c <SendWSPR+0x1dc>)
			CarrierEnable(1);
 8003734:	f000 fd1c 	bl	8004170 <CarrierEnable>
			while (SystemSeconds != 1)
 8003738:	e00a      	b.n	8003750 <SendWSPR+0x110>
				if(KEYER_DASH || KEYER_DOT)
 800373a:	f005 fb87 	bl	8008e4c <HAL_GPIO_ReadPin>
 800373e:	4603      	mov	r3, r0
 8003740:	2180      	movs	r1, #128	; 0x80
 8003742:	4620      	mov	r0, r4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0e1      	beq.n	800370c <SendWSPR+0xcc>
 8003748:	f005 fb80 	bl	8008e4c <HAL_GPIO_ReadPin>
 800374c:	2800      	cmp	r0, #0
 800374e:	d0dd      	beq.n	800370c <SendWSPR+0xcc>
			while (SystemSeconds != 1)
 8003750:	f8d8 7000 	ldr.w	r7, [r8]
				if(KEYER_DASH || KEYER_DOT)
 8003754:	2140      	movs	r1, #64	; 0x40
 8003756:	4620      	mov	r0, r4
			while (SystemSeconds != 1)
 8003758:	2f01      	cmp	r7, #1
 800375a:	d1ee      	bne.n	800373a <SendWSPR+0xfa>
			WSPRTone = syms[txIndex++];
 800375c:	4b26      	ldr	r3, [pc, #152]	; (80037f8 <SendWSPR+0x1b8>)
 800375e:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8003840 <SendWSPR+0x200>
 8003762:	781a      	ldrb	r2, [r3, #0]
 8003764:	4699      	mov	r9, r3
			WSPRStartTick = HAL_GetTick();
 8003766:	4d32      	ldr	r5, [pc, #200]	; (8003830 <SendWSPR+0x1f0>)
						LED_GREEN_OFF;
 8003768:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8003818 <SendWSPR+0x1d8>
			WSPRTone = syms[txIndex++];
 800376c:	f88a 2000 	strb.w	r2, [sl]
			WSPRStartTick = HAL_GetTick();
 8003770:	f002 fac8 	bl	8005d04 <HAL_GetTick>
 8003774:	6028      	str	r0, [r5, #0]
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 8003776:	4b2f      	ldr	r3, [pc, #188]	; (8003834 <SendWSPR+0x1f4>)
 8003778:	037c      	lsls	r4, r7, #13
 800377a:	fba3 3404 	umull	r3, r4, r3, r4
 800377e:	07fb      	lsls	r3, r7, #31
 8003780:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 8003784:	d524      	bpl.n	80037d0 <SendWSPR+0x190>
 8003786:	e001      	b.n	800378c <SendWSPR+0x14c>
						LED_GREEN_OFF;
 8003788:	f005 fb66 	bl	8008e58 <HAL_GPIO_WritePin>
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 800378c:	f002 faba 	bl	8005d04 <HAL_GetTick>
 8003790:	682e      	ldr	r6, [r5, #0]
 8003792:	4603      	mov	r3, r0
						LED_GREEN_OFF;
 8003794:	2200      	movs	r2, #0
 8003796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800379a:	ee18 0a10 	vmov	r0, s16
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 800379e:	1b9b      	subs	r3, r3, r6
 80037a0:	429c      	cmp	r4, r3
 80037a2:	d8f1      	bhi.n	8003788 <SendWSPR+0x148>
				WSPRTone = syms[txIndex++];
 80037a4:	3701      	adds	r7, #1
 80037a6:	f819 3f01 	ldrb.w	r3, [r9, #1]!
			while (txIndex < 162) {
 80037aa:	2fa2      	cmp	r7, #162	; 0xa2
				WSPRTone = syms[txIndex++];
 80037ac:	f88a 3000 	strb.w	r3, [sl]
			while (txIndex < 162) {
 80037b0:	d1e1      	bne.n	8003776 <SendWSPR+0x136>
			TXSwitch(0);
 80037b2:	2000      	movs	r0, #0
 80037b4:	f000 fc78 	bl	80040a8 <TXSwitch>
			CarrierEnable(0);
 80037b8:	2000      	movs	r0, #0
 80037ba:	f000 fcd9 	bl	8004170 <CarrierEnable>
			HAL_ADCEx_MultiModeStop_DMA(HAdc1);
 80037be:	4b1a      	ldr	r3, [pc, #104]	; (8003828 <SendWSPR+0x1e8>)
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	f003 fc05 	bl	8006fd0 <HAL_ADCEx_MultiModeStop_DMA>
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 80037c6:	f8d8 3000 	ldr.w	r3, [r8]
 80037ca:	e755      	b.n	8003678 <SendWSPR+0x38>
						LED_GREEN_ON;
 80037cc:	f005 fb44 	bl	8008e58 <HAL_GPIO_WritePin>
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 80037d0:	f002 fa98 	bl	8005d04 <HAL_GetTick>
 80037d4:	682e      	ldr	r6, [r5, #0]
 80037d6:	4603      	mov	r3, r0
						LED_GREEN_ON;
 80037d8:	2201      	movs	r2, #1
 80037da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037de:	ee18 0a10 	vmov	r0, s16
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 80037e2:	1b9b      	subs	r3, r3, r6
 80037e4:	42a3      	cmp	r3, r4
 80037e6:	d3f1      	bcc.n	80037cc <SendWSPR+0x18c>
 80037e8:	e7dc      	b.n	80037a4 <SendWSPR+0x164>
				Error_Handler();
 80037ea:	f000 fd1f 	bl	800422c <Error_Handler>
 80037ee:	e79a      	b.n	8003726 <SendWSPR+0xe6>
 80037f0:	c0000000 	.word	0xc0000000
 80037f4:	415adb21 	.word	0x415adb21
 80037f8:	24000734 	.word	0x24000734
 80037fc:	0801af98 	.word	0x0801af98
 8003800:	4ad6d90e 	.word	0x4ad6d90e
 8003804:	24007258 	.word	0x24007258
 8003808:	24007264 	.word	0x24007264
 800380c:	24006238 	.word	0x24006238
 8003810:	2400622c 	.word	0x2400622c
 8003814:	240083fe 	.word	0x240083fe
 8003818:	58020400 	.word	0x58020400
 800381c:	58020000 	.word	0x58020000
 8003820:	288df0cb 	.word	0x288df0cb
 8003824:	2400020c 	.word	0x2400020c
 8003828:	24006244 	.word	0x24006244
 800382c:	24008420 	.word	0x24008420
 8003830:	24000730 	.word	0x24000730
 8003834:	aaaaaaab 	.word	0xaaaaaaab
 8003838:	240072d8 	.word	0x240072d8
 800383c:	240072d4 	.word	0x240072d4
 8003840:	240083ff 	.word	0x240083ff

08003844 <DisplayStatus.part.0>:
	static char StringStep[8];
	static char StringTxPower[8];

	if (!DisableDisplay)
	{
		switch(Fstep)
 8003844:	4b74      	ldr	r3, [pc, #464]	; (8003a18 <DisplayStatus.part.0+0x1d4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
void DisplayStatus(void)
 800384c:	b570      	push	{r4, r5, r6, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
		switch(Fstep)
 8003850:	f000 80d8 	beq.w	8003a04 <DisplayStatus.part.0+0x1c0>
 8003854:	d81f      	bhi.n	8003896 <DisplayStatus.part.0+0x52>
 8003856:	2b0a      	cmp	r3, #10
 8003858:	f000 80c6 	beq.w	80039e8 <DisplayStatus.part.0+0x1a4>
 800385c:	2b64      	cmp	r3, #100	; 0x64
 800385e:	d110      	bne.n	8003882 <DisplayStatus.part.0+0x3e>
		{
		case 1:			strcpy(StringStep,"   1 "); break;
		case 10: 		strcpy(StringStep,"  10 "); break;
		case 100: 		strcpy(StringStep," 100 "); break;
 8003860:	4b6e      	ldr	r3, [pc, #440]	; (8003a1c <DisplayStatus.part.0+0x1d8>)
 8003862:	4a6f      	ldr	r2, [pc, #444]	; (8003a20 <DisplayStatus.part.0+0x1dc>)
 8003864:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003868:	6010      	str	r0, [r2, #0]
 800386a:	8091      	strh	r1, [r2, #4]
		case 9000: 		strcpy(StringStep,"   9K"); break;
		case 10000:		strcpy(StringStep,"  10K"); break;
		case 100000: 	strcpy(StringStep," 100K"); break;
		}

		switch(CurrentMode)
 800386c:	4b6d      	ldr	r3, [pc, #436]	; (8003a24 <DisplayStatus.part.0+0x1e0>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b03      	cmp	r3, #3
 8003872:	f200 80ce 	bhi.w	8003a12 <DisplayStatus.part.0+0x1ce>
 8003876:	e8df f013 	tbh	[pc, r3, lsl #1]
 800387a:	00ab      	.short	0x00ab
 800387c:	008500a7 	.word	0x008500a7
 8003880:	0029      	.short	0x0029
		switch(Fstep)
 8003882:	2b01      	cmp	r3, #1
 8003884:	f040 80aa 	bne.w	80039dc <DisplayStatus.part.0+0x198>
		case 1:			strcpy(StringStep,"   1 "); break;
 8003888:	4b67      	ldr	r3, [pc, #412]	; (8003a28 <DisplayStatus.part.0+0x1e4>)
 800388a:	4a65      	ldr	r2, [pc, #404]	; (8003a20 <DisplayStatus.part.0+0x1dc>)
 800388c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003890:	6010      	str	r0, [r2, #0]
 8003892:	8091      	strh	r1, [r2, #4]
 8003894:	e7ea      	b.n	800386c <DisplayStatus.part.0+0x28>
		switch(Fstep)
 8003896:	f242 7210 	movw	r2, #10000	; 0x2710
 800389a:	4293      	cmp	r3, r2
 800389c:	f000 80ab 	beq.w	80039f6 <DisplayStatus.part.0+0x1b2>
 80038a0:	4a62      	ldr	r2, [pc, #392]	; (8003a2c <DisplayStatus.part.0+0x1e8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d106      	bne.n	80038b4 <DisplayStatus.part.0+0x70>
		case 100000: 	strcpy(StringStep," 100K"); break;
 80038a6:	4b62      	ldr	r3, [pc, #392]	; (8003a30 <DisplayStatus.part.0+0x1ec>)
 80038a8:	4a5d      	ldr	r2, [pc, #372]	; (8003a20 <DisplayStatus.part.0+0x1dc>)
 80038aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80038ae:	6010      	str	r0, [r2, #0]
 80038b0:	8091      	strh	r1, [r2, #4]
 80038b2:	e7db      	b.n	800386c <DisplayStatus.part.0+0x28>
		switch(Fstep)
 80038b4:	f242 3228 	movw	r2, #9000	; 0x2328
 80038b8:	4293      	cmp	r3, r2
 80038ba:	f040 808f 	bne.w	80039dc <DisplayStatus.part.0+0x198>
		case 9000: 		strcpy(StringStep,"   9K"); break;
 80038be:	4b5d      	ldr	r3, [pc, #372]	; (8003a34 <DisplayStatus.part.0+0x1f0>)
 80038c0:	4a57      	ldr	r2, [pc, #348]	; (8003a20 <DisplayStatus.part.0+0x1dc>)
 80038c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80038c6:	6010      	str	r0, [r2, #0]
 80038c8:	8091      	strh	r1, [r2, #4]
 80038ca:	e7cf      	b.n	800386c <DisplayStatus.part.0+0x28>
		{
		case LSB: strcpy(StringMode,"LSB"); break;
		case USB: strcpy(StringMode,"USB"); break;
		case AM: strcpy(StringMode,"AM"); break;
		case CW: strcpy(StringMode,"CW"); break;
 80038cc:	4b5a      	ldr	r3, [pc, #360]	; (8003a38 <DisplayStatus.part.0+0x1f4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4e5a      	ldr	r6, [pc, #360]	; (8003a3c <DisplayStatus.part.0+0x1f8>)
 80038d2:	0c19      	lsrs	r1, r3, #16
 80038d4:	8033      	strh	r3, [r6, #0]
 80038d6:	70b1      	strb	r1, [r6, #2]
		}
		switch (CurrentAGC)
 80038d8:	4b59      	ldr	r3, [pc, #356]	; (8003a40 <DisplayStatus.part.0+0x1fc>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d058      	beq.n	8003992 <DisplayStatus.part.0+0x14e>
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d179      	bne.n	80039d8 <DisplayStatus.part.0+0x194>
		{
		case Fast: strcpy(StringAGC,"Fast"); break;
		case Slow: strcpy(StringAGC,"Slow"); break;
 80038e4:	4b57      	ldr	r3, [pc, #348]	; (8003a44 <DisplayStatus.part.0+0x200>)
 80038e6:	4d58      	ldr	r5, [pc, #352]	; (8003a48 <DisplayStatus.part.0+0x204>)
 80038e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80038ec:	6028      	str	r0, [r5, #0]
 80038ee:	7129      	strb	r1, [r5, #4]
		}
		switch (CurrentBW)
 80038f0:	4b56      	ldr	r3, [pc, #344]	; (8003a4c <DisplayStatus.part.0+0x208>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d056      	beq.n	80039a6 <DisplayStatus.part.0+0x162>
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d16b      	bne.n	80039d4 <DisplayStatus.part.0+0x190>
		{
		case Narrow: strcpy(StringWidth,"Narrow"); break;
		case Wide: strcpy(StringWidth,"Wide"); break;
 80038fc:	4b54      	ldr	r3, [pc, #336]	; (8003a50 <DisplayStatus.part.0+0x20c>)
 80038fe:	4c55      	ldr	r4, [pc, #340]	; (8003a54 <DisplayStatus.part.0+0x210>)
 8003900:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003904:	6020      	str	r0, [r4, #0]
 8003906:	7121      	strb	r1, [r4, #4]
		}
		switch (TxPowerOut)
 8003908:	4b53      	ldr	r3, [pc, #332]	; (8003a58 <DisplayStatus.part.0+0x214>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003910:	d056      	beq.n	80039c0 <DisplayStatus.part.0+0x17c>
 8003912:	f640 71ff 	movw	r1, #4095	; 0xfff
 8003916:	428b      	cmp	r3, r1
 8003918:	d062      	beq.n	80039e0 <DisplayStatus.part.0+0x19c>
 800391a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391e:	4b4f      	ldr	r3, [pc, #316]	; (8003a5c <DisplayStatus.part.0+0x218>)
		{
		case LOW_POWER_OUT: strcpy(StringTxPower,"Low"); break;
 8003920:	bf04      	itt	eq
 8003922:	494f      	ldreq	r1, [pc, #316]	; (8003a60 <DisplayStatus.part.0+0x21c>)
 8003924:	6019      	streq	r1, [r3, #0]
		case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
		case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
		}
		sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s AGG %s ERR %d WPM %d PWR %s Volume %1.1f   \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, StringAGC, TXFreqError, keyer_speed, StringTxPower, volume);
 8003926:	9306      	str	r3, [sp, #24]
 8003928:	4b4e      	ldr	r3, [pc, #312]	; (8003a64 <DisplayStatus.part.0+0x220>)
 800392a:	9503      	str	r5, [sp, #12]
 800392c:	9402      	str	r4, [sp, #8]
 800392e:	ed93 7a00 	vldr	s14, [r3]
 8003932:	4b4d      	ldr	r3, [pc, #308]	; (8003a68 <DisplayStatus.part.0+0x224>)
 8003934:	9601      	str	r6, [sp, #4]
 8003936:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	484b      	ldr	r0, [pc, #300]	; (8003a6c <DisplayStatus.part.0+0x228>)
 800393e:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8003a70 <DisplayStatus.part.0+0x22c>
 8003942:	6804      	ldr	r4, [r0, #0]
 8003944:	9304      	str	r3, [sp, #16]
 8003946:	4b4b      	ldr	r3, [pc, #300]	; (8003a74 <DisplayStatus.part.0+0x230>)
 8003948:	9200      	str	r2, [sp, #0]
 800394a:	9405      	str	r4, [sp, #20]
 800394c:	494a      	ldr	r1, [pc, #296]	; (8003a78 <DisplayStatus.part.0+0x234>)
 800394e:	484b      	ldr	r0, [pc, #300]	; (8003a7c <DisplayStatus.part.0+0x238>)
 8003950:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003954:	edd3 7a00 	vldr	s15, [r3]
 8003958:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800395c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003960:	ec53 2b17 	vmov	r2, r3, d7
 8003964:	f00d fe6a 	bl	801163c <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8003968:	4844      	ldr	r0, [pc, #272]	; (8003a7c <DisplayStatus.part.0+0x238>)
 800396a:	f7fc fcb9 	bl	80002e0 <strlen>
 800396e:	4601      	mov	r1, r0
 8003970:	4842      	ldr	r0, [pc, #264]	; (8003a7c <DisplayStatus.part.0+0x238>)
 8003972:	b289      	uxth	r1, r1
 8003974:	f00b fdc2 	bl	800f4fc <CDC_Transmit_FS>
	HAL_Delay(1);
 8003978:	2001      	movs	r0, #1
		PrintUI(UartTXString);
	}
}
 800397a:	b00a      	add	sp, #40	; 0x28
 800397c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(1);
 8003980:	f002 b9c6 	b.w	8005d10 <HAL_Delay>
		case USB: strcpy(StringMode,"USB"); break;
 8003984:	4b3e      	ldr	r3, [pc, #248]	; (8003a80 <DisplayStatus.part.0+0x23c>)
 8003986:	4e2d      	ldr	r6, [pc, #180]	; (8003a3c <DisplayStatus.part.0+0x1f8>)
 8003988:	6033      	str	r3, [r6, #0]
		switch (CurrentAGC)
 800398a:	4b2d      	ldr	r3, [pc, #180]	; (8003a40 <DisplayStatus.part.0+0x1fc>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1a6      	bne.n	80038e0 <DisplayStatus.part.0+0x9c>
		case Fast: strcpy(StringAGC,"Fast"); break;
 8003992:	4b3c      	ldr	r3, [pc, #240]	; (8003a84 <DisplayStatus.part.0+0x240>)
 8003994:	4d2c      	ldr	r5, [pc, #176]	; (8003a48 <DisplayStatus.part.0+0x204>)
 8003996:	e893 0003 	ldmia.w	r3, {r0, r1}
		switch (CurrentBW)
 800399a:	4b2c      	ldr	r3, [pc, #176]	; (8003a4c <DisplayStatus.part.0+0x208>)
		case Fast: strcpy(StringAGC,"Fast"); break;
 800399c:	6028      	str	r0, [r5, #0]
		switch (CurrentBW)
 800399e:	781b      	ldrb	r3, [r3, #0]
		case Fast: strcpy(StringAGC,"Fast"); break;
 80039a0:	7129      	strb	r1, [r5, #4]
		switch (CurrentBW)
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1a8      	bne.n	80038f8 <DisplayStatus.part.0+0xb4>
		case Narrow: strcpy(StringWidth,"Narrow"); break;
 80039a6:	4b38      	ldr	r3, [pc, #224]	; (8003a88 <DisplayStatus.part.0+0x244>)
 80039a8:	4c2a      	ldr	r4, [pc, #168]	; (8003a54 <DisplayStatus.part.0+0x210>)
 80039aa:	e893 0003 	ldmia.w	r3, {r0, r1}
		switch (TxPowerOut)
 80039ae:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <DisplayStatus.part.0+0x214>)
		case Narrow: strcpy(StringWidth,"Narrow"); break;
 80039b0:	80a1      	strh	r1, [r4, #4]
 80039b2:	0c09      	lsrs	r1, r1, #16
		switch (TxPowerOut)
 80039b4:	681b      	ldr	r3, [r3, #0]
		case Narrow: strcpy(StringWidth,"Narrow"); break;
 80039b6:	6020      	str	r0, [r4, #0]
		switch (TxPowerOut)
 80039b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		case Narrow: strcpy(StringWidth,"Narrow"); break;
 80039bc:	71a1      	strb	r1, [r4, #6]
		switch (TxPowerOut)
 80039be:	d1a8      	bne.n	8003912 <DisplayStatus.part.0+0xce>
		case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
 80039c0:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <DisplayStatus.part.0+0x218>)
 80039c2:	4932      	ldr	r1, [pc, #200]	; (8003a8c <DisplayStatus.part.0+0x248>)
 80039c4:	6019      	str	r1, [r3, #0]
 80039c6:	e7ae      	b.n	8003926 <DisplayStatus.part.0+0xe2>
		case LSB: strcpy(StringMode,"LSB"); break;
 80039c8:	4e1c      	ldr	r6, [pc, #112]	; (8003a3c <DisplayStatus.part.0+0x1f8>)
 80039ca:	4b31      	ldr	r3, [pc, #196]	; (8003a90 <DisplayStatus.part.0+0x24c>)
 80039cc:	6033      	str	r3, [r6, #0]
 80039ce:	e783      	b.n	80038d8 <DisplayStatus.part.0+0x94>
		case AM: strcpy(StringMode,"AM"); break;
 80039d0:	4b30      	ldr	r3, [pc, #192]	; (8003a94 <DisplayStatus.part.0+0x250>)
 80039d2:	e77c      	b.n	80038ce <DisplayStatus.part.0+0x8a>
 80039d4:	4c1f      	ldr	r4, [pc, #124]	; (8003a54 <DisplayStatus.part.0+0x210>)
 80039d6:	e797      	b.n	8003908 <DisplayStatus.part.0+0xc4>
 80039d8:	4d1b      	ldr	r5, [pc, #108]	; (8003a48 <DisplayStatus.part.0+0x204>)
 80039da:	e789      	b.n	80038f0 <DisplayStatus.part.0+0xac>
 80039dc:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <DisplayStatus.part.0+0x1dc>)
 80039de:	e745      	b.n	800386c <DisplayStatus.part.0+0x28>
		case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
 80039e0:	4b1e      	ldr	r3, [pc, #120]	; (8003a5c <DisplayStatus.part.0+0x218>)
 80039e2:	492d      	ldr	r1, [pc, #180]	; (8003a98 <DisplayStatus.part.0+0x254>)
 80039e4:	6019      	str	r1, [r3, #0]
 80039e6:	e79e      	b.n	8003926 <DisplayStatus.part.0+0xe2>
		case 10: 		strcpy(StringStep,"  10 "); break;
 80039e8:	4b2c      	ldr	r3, [pc, #176]	; (8003a9c <DisplayStatus.part.0+0x258>)
 80039ea:	4a0d      	ldr	r2, [pc, #52]	; (8003a20 <DisplayStatus.part.0+0x1dc>)
 80039ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039f0:	6010      	str	r0, [r2, #0]
 80039f2:	8091      	strh	r1, [r2, #4]
 80039f4:	e73a      	b.n	800386c <DisplayStatus.part.0+0x28>
		case 10000:		strcpy(StringStep,"  10K"); break;
 80039f6:	4b2a      	ldr	r3, [pc, #168]	; (8003aa0 <DisplayStatus.part.0+0x25c>)
 80039f8:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <DisplayStatus.part.0+0x1dc>)
 80039fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039fe:	6010      	str	r0, [r2, #0]
 8003a00:	8091      	strh	r1, [r2, #4]
 8003a02:	e733      	b.n	800386c <DisplayStatus.part.0+0x28>
		case 1000: 		strcpy(StringStep,"   1K"); break;
 8003a04:	4b27      	ldr	r3, [pc, #156]	; (8003aa4 <DisplayStatus.part.0+0x260>)
 8003a06:	4a06      	ldr	r2, [pc, #24]	; (8003a20 <DisplayStatus.part.0+0x1dc>)
 8003a08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a0c:	6010      	str	r0, [r2, #0]
 8003a0e:	8091      	strh	r1, [r2, #4]
 8003a10:	e72c      	b.n	800386c <DisplayStatus.part.0+0x28>
 8003a12:	4e0a      	ldr	r6, [pc, #40]	; (8003a3c <DisplayStatus.part.0+0x1f8>)
 8003a14:	e760      	b.n	80038d8 <DisplayStatus.part.0+0x94>
 8003a16:	bf00      	nop
 8003a18:	24006240 	.word	0x24006240
 8003a1c:	0801b15c 	.word	0x0801b15c
 8003a20:	240072bc 	.word	0x240072bc
 8003a24:	24002018 	.word	0x24002018
 8003a28:	0801b14c 	.word	0x0801b14c
 8003a2c:	000186a0 	.word	0x000186a0
 8003a30:	0801b17c 	.word	0x0801b17c
 8003a34:	0801b16c 	.word	0x0801b16c
 8003a38:	0801b188 	.word	0x0801b188
 8003a3c:	240072b4 	.word	0x240072b4
 8003a40:	24002016 	.word	0x24002016
 8003a44:	0801b194 	.word	0x0801b194
 8003a48:	240072ac 	.word	0x240072ac
 8003a4c:	24002017 	.word	0x24002017
 8003a50:	0801b1a4 	.word	0x0801b1a4
 8003a54:	240072cc 	.word	0x240072cc
 8003a58:	240072ec 	.word	0x240072ec
 8003a5c:	240072c4 	.word	0x240072c4
 8003a60:	00776f4c 	.word	0x00776f4c
 8003a64:	2400c9d0 	.word	0x2400c9d0
 8003a68:	240072e0 	.word	0x240072e0
 8003a6c:	2400b810 	.word	0x2400b810
 8003a70:	3a83126f 	.word	0x3a83126f
 8003a74:	24007258 	.word	0x24007258
 8003a78:	0801b1ac 	.word	0x0801b1ac
 8003a7c:	240073f8 	.word	0x240073f8
 8003a80:	00425355 	.word	0x00425355
 8003a84:	0801b18c 	.word	0x0801b18c
 8003a88:	0801b19c 	.word	0x0801b19c
 8003a8c:	0064694d 	.word	0x0064694d
 8003a90:	0042534c 	.word	0x0042534c
 8003a94:	0801b184 	.word	0x0801b184
 8003a98:	0078614d 	.word	0x0078614d
 8003a9c:	0801b154 	.word	0x0801b154
 8003aa0:	0801b174 	.word	0x0801b174
 8003aa4:	0801b164 	.word	0x0801b164

08003aa8 <HAL_ADC_ConvCpltCallback>:
{
 8003aa8:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8003aac:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003ab0:	490a      	ldr	r1, [pc, #40]	; (8003adc <HAL_ADC_ConvCpltCallback+0x34>)
 8003ab2:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8003ab6:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003aba:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d1fa      	bne.n	8003ab6 <HAL_ADC_ConvCpltCallback+0xe>
 8003ac0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003ac4:	f3bf 8f6f 	isb	sy
	ADC_Stream0_Handler(1);
 8003ac8:	2001      	movs	r0, #1
 8003aca:	f7fd fe35 	bl	8001738 <ADC_Stream0_Handler>
	ubADCDualConversionComplete = SET;
 8003ace:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <HAL_ADC_ConvCpltCallback+0x38>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	701a      	strb	r2, [r3, #0]
}
 8003ad4:	bd08      	pop	{r3, pc}
 8003ad6:	bf00      	nop
 8003ad8:	24008820 	.word	0x24008820
 8003adc:	e000ed00 	.word	0xe000ed00
 8003ae0:	2400c9ce 	.word	0x2400c9ce

08003ae4 <HAL_ADC_ConvHalfCpltCallback>:
{
 8003ae4:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8003ae8:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003aec:	490a      	ldr	r1, [pc, #40]	; (8003b18 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8003aee:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8003af2:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003af6:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d1fa      	bne.n	8003af2 <HAL_ADC_ConvHalfCpltCallback+0xe>
 8003afc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003b00:	f3bf 8f6f 	isb	sy
	ADC_Stream0_Handler(0);
 8003b04:	2000      	movs	r0, #0
 8003b06:	f7fd fe17 	bl	8001738 <ADC_Stream0_Handler>
	ubADCDualConversionComplete = RESET;
 8003b0a:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
}
 8003b10:	bd08      	pop	{r3, pc}
 8003b12:	bf00      	nop
 8003b14:	24008420 	.word	0x24008420
 8003b18:	e000ed00 	.word	0xe000ed00
 8003b1c:	2400c9ce 	.word	0x2400c9ce

08003b20 <HAL_DAC_ConvCpltCallbackCh1>:
	ValidAudioHalf = &AudioOut[BSIZE];
 8003b20:	4b01      	ldr	r3, [pc, #4]	; (8003b28 <HAL_DAC_ConvCpltCallbackCh1+0x8>)
 8003b22:	4a02      	ldr	r2, [pc, #8]	; (8003b2c <HAL_DAC_ConvCpltCallbackCh1+0xc>)
 8003b24:	601a      	str	r2, [r3, #0]
}
 8003b26:	4770      	bx	lr
 8003b28:	240083f8 	.word	0x240083f8
 8003b2c:	24001c00 	.word	0x24001c00

08003b30 <HAL_DAC_ConvHalfCpltCallbackCh1>:
	ValidAudioHalf = &AudioOut[0];
 8003b30:	4b01      	ldr	r3, [pc, #4]	; (8003b38 <HAL_DAC_ConvHalfCpltCallbackCh1+0x8>)
 8003b32:	4a02      	ldr	r2, [pc, #8]	; (8003b3c <HAL_DAC_ConvHalfCpltCallbackCh1+0xc>)
 8003b34:	601a      	str	r2, [r3, #0]
}
 8003b36:	4770      	bx	lr
 8003b38:	240083f8 	.word	0x240083f8
 8003b3c:	24001800 	.word	0x24001800

08003b40 <HAL_ADC_LevelOutOfWindowCallback>:
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8003b40:	4907      	ldr	r1, [pc, #28]	; (8003b60 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
	OVFDetected = OVF_TIMEOUT;
 8003b42:	2002      	movs	r0, #2
 8003b44:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8003b46:	6809      	ldr	r1, [r1, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8003b48:	4a07      	ldr	r2, [pc, #28]	; (8003b68 <HAL_ADC_LevelOutOfWindowCallback+0x28>)
	OVFDetected = OVF_TIMEOUT;
 8003b4a:	8018      	strh	r0, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8003b4c:	684b      	ldr	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8003b4e:	6812      	ldr	r2, [r2, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8003b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b54:	604b      	str	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8003b56:	6853      	ldr	r3, [r2, #4]
 8003b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b5c:	6053      	str	r3, [r2, #4]
}
 8003b5e:	4770      	bx	lr
 8003b60:	2400b43c 	.word	0x2400b43c
 8003b64:	24007272 	.word	0x24007272
 8003b68:	2400b4a0 	.word	0x2400b4a0
 8003b6c:	00000000 	.word	0x00000000

08003b70 <SetWSPRPLLCoeff>:
 * for 7040.1 PLL coeffs are N 450, M 17, P 94, FracDiv 48
 */


void SetWSPRPLLCoeff(double TXFreq, uint16_t *FracDivCoeff, uint16_t *FracPWMCoeff)
{
 8003b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
	uint32_t m, n, p, od;
	volatile uint32_t fm, fn, fp, fdiff, fod, FMaxErr, FracDiv, i;
	LastTXFreq = (float)TXFreq;
#define TEST_COEFF 1
	for (i = 0; i < 4; i++) {
 8003b74:	2300      	movs	r3, #0
	LastTXFreq = (float)TXFreq;
 8003b76:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 8003b7a:	4aa9      	ldr	r2, [pc, #676]	; (8003e20 <SetWSPRPLLCoeff+0x2b0>)
{
 8003b7c:	ed2d 8b02 	vpush	{d8}
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
 8003b80:	f20f 298c 	addw	r9, pc, #652	; 0x28c
 8003b84:	e9d9 8900 	ldrd	r8, r9, [r9]
{
 8003b88:	b08f      	sub	sp, #60	; 0x3c
	LastTXFreq = (float)TXFreq;
 8003b8a:	edc2 7a00 	vstr	s15, [r2]
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
 8003b8e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
	for (i = 0; i < 4; i++) {
 8003b92:	9305      	str	r3, [sp, #20]
 8003b94:	9b05      	ldr	r3, [sp, #20]
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	f200 80d0 	bhi.w	8003d3c <SetWSPRPLLCoeff+0x1cc>
		for (m = 2; m <= 25; m++) //was 64
		{
			for (n = 2; n <= 512; n++) //was 1
			{
				for (p = 2; p <= 128; p += 2) {
					OutF = XTalFreq * n / m / p / od;
 8003b9c:	4ba1      	ldr	r3, [pc, #644]	; (8003e24 <SetWSPRPLLCoeff+0x2b4>)
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	460d      	mov	r5, r1
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 8003ba2:	ed9f 8aa1 	vldr	s16, [pc, #644]	; 8003e28 <SetWSPRPLLCoeff+0x2b8>
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
							&& ((XTalFreq * n / m) > 150000000.0)
 8003ba6:	ed9f 2aa1 	vldr	s4, [pc, #644]	; 8003e2c <SetWSPRPLLCoeff+0x2bc>
						MinDiff = abs(OutF - TF);

						fp = p;
						fn = n;
						fm = m;
						fod = od;
 8003baa:	2001      	movs	r0, #1
					OutF = XTalFreq * n / m / p / od;
 8003bac:	edd3 2a00 	vldr	s5, [r3]
 8003bb0:	f8df c288 	ldr.w	ip, [pc, #648]	; 8003e3c <SetWSPRPLLCoeff+0x2cc>
							&& ((XTalFreq * n / m) < 960000000.0)) {
 8003bb4:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 8003e30 <SetWSPRPLLCoeff+0x2c0>
 8003bb8:	4e9e      	ldr	r6, [pc, #632]	; (8003e34 <SetWSPRPLLCoeff+0x2c4>)
		}
		if (fn < 511) {
			OutF = XTalFreq * fn / fm / fp / fod;
			OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
					* 8192 * 8); //FracDiv PWM has 8 levels
 8003bba:	ed9f 3b97 	vldr	d3, [pc, #604]	; 8003e18 <SetWSPRPLLCoeff+0x2a8>
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 8003bbe:	ed9d 7a05 	vldr	s14, [sp, #20]
 8003bc2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
		for (m = 2; m <= 25; m++) //was 64
 8003bc6:	2102      	movs	r1, #2
			for (n = 2; n <= 512; n++) //was 1
 8003bc8:	f240 2e01 	movw	lr, #513	; 0x201
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 8003bcc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003bd0:	ee27 7a08 	vmul.f32	s14, s14, s16
 8003bd4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003bd8:	ee37 7b00 	vadd.f64	d7, d7, d0
 8003bdc:	ed8d 7b06 	vstr	d7, [sp, #24]
		MinDiff = 999999999;
 8003be0:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
					OutF = XTalFreq * n / m / p / od;
 8003be4:	ee07 1a90 	vmov	s15, r1
			for (n = 2; n <= 512; n++) //was 1
 8003be8:	2202      	movs	r2, #2
					OutF = XTalFreq * n / m / p / od;
 8003bea:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 8003bee:	eec8 1a84 	vdiv.f32	s3, s17, s8
 8003bf2:	ee07 2a90 	vmov	s15, r2
				for (p = 2; p <= 128; p += 2) {
 8003bf6:	2302      	movs	r3, #2
					OutF = XTalFreq * n / m / p / od;
 8003bf8:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8003bfc:	ee64 4aa2 	vmul.f32	s9, s9, s5
							&& ((XTalFreq * n / m) > 150000000.0)
 8003c00:	ee64 7aa1 	vmul.f32	s15, s9, s3
 8003c04:	eef4 7a42 	vcmp.f32	s15, s4
 8003c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0c:	dd05      	ble.n	8003c1a <SetWSPRPLLCoeff+0xaa>
 8003c0e:	eef4 7ac1 	vcmpe.f32	s15, s2
 8003c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c16:	f100 80b2 	bmi.w	8003d7e <SetWSPRPLLCoeff+0x20e>
					OutF = XTalFreq * n / m / p / od;
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	3302      	adds	r3, #2
 8003c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c24:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003c28:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 8003c2c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003c30:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
 8003c34:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003c38:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8003c3c:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8003c40:	ee37 7b45 	vsub.f64	d7, d7, d5
 8003c44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4c:	dd03      	ble.n	8003c56 <SetWSPRPLLCoeff+0xe6>
 8003c4e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003c52:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
				for (p = 2; p <= 128; p += 2) {
 8003c56:	2b82      	cmp	r3, #130	; 0x82
 8003c58:	d1df      	bne.n	8003c1a <SetWSPRPLLCoeff+0xaa>
			for (n = 2; n <= 512; n++) //was 1
 8003c5a:	3201      	adds	r2, #1
 8003c5c:	4572      	cmp	r2, lr
 8003c5e:	d1c8      	bne.n	8003bf2 <SetWSPRPLLCoeff+0x82>
		for (m = 2; m <= 25; m++) //was 64
 8003c60:	3101      	adds	r1, #1
 8003c62:	291a      	cmp	r1, #26
 8003c64:	d1be      	bne.n	8003be4 <SetWSPRPLLCoeff+0x74>
		if (fn < 511) {
 8003c66:	9b01      	ldr	r3, [sp, #4]
 8003c68:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8003c6c:	f200 80ca 	bhi.w	8003e04 <SetWSPRPLLCoeff+0x294>
			OutF = XTalFreq * fn / fm / fp / fod;
 8003c70:	ed9d 6a01 	vldr	s12, [sp, #4]
 8003c74:	eddd 6a00 	vldr	s13, [sp]
 8003c78:	eddd 7a02 	vldr	s15, [sp, #8]
 8003c7c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8003c80:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c88:	ee26 6a22 	vmul.f32	s12, s12, s5
 8003c8c:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8003c90:	eddd 7a03 	vldr	s15, [sp, #12]
 8003c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9c:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8003ca0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003ca4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
			OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 8003ca8:	9b01      	ldr	r3, [sp, #4]
 8003caa:	eddd 6a00 	vldr	s13, [sp]
 8003cae:	eddd 7a02 	vldr	s15, [sp, #8]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cbc:	ee06 3a10 	vmov	s12, r3
 8003cc0:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8003cc4:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8003cc8:	eddd 7a03 	vldr	s15, [sp, #12]
 8003ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd0:	ee26 6a22 	vmul.f32	s12, s12, s5
 8003cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd8:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8003cdc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003ce0:	ed8d 7b08 	vstr	d7, [sp, #32]
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
 8003ce4:	ed9d 5b06 	vldr	d5, [sp, #24]
 8003ce8:	ed9d 4b0a 	vldr	d4, [sp, #40]	; 0x28
 8003cec:	ed9d 6b08 	vldr	d6, [sp, #32]
 8003cf0:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8003cf4:	ee35 5b44 	vsub.f64	d5, d5, d4
 8003cf8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003cfc:	ee85 7b06 	vdiv.f64	d7, d5, d6
					* 8192 * 8); //FracDiv PWM has 8 levels
 8003d00:	ee27 7b03 	vmul.f64	d7, d7, d3
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
 8003d04:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8003d08:	ed8d 7a04 	vstr	s14, [sp, #16]
		} else {
			FracDiv = 8191 * 8;
		}

		FracDivPWM = LowestWSPRToneFracDivPWM = FracDiv & 0x07;
 8003d0c:	9b04      	ldr	r3, [sp, #16]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	8033      	strh	r3, [r6, #0]
 8003d14:	f8ac 3000 	strh.w	r3, [ip]
		FracDiv >>= 0x03;
 8003d18:	9b04      	ldr	r3, [sp, #16]
 8003d1a:	08db      	lsrs	r3, r3, #3
 8003d1c:	9304      	str	r3, [sp, #16]
		FracDivCoeff[i] = FracDiv;
 8003d1e:	9a04      	ldr	r2, [sp, #16]
 8003d20:	9b05      	ldr	r3, [sp, #20]
 8003d22:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		FracPWMCoeff[i] = FracDivPWM;
 8003d26:	9a05      	ldr	r2, [sp, #20]
	for (i = 0; i < 4; i++) {
 8003d28:	9b05      	ldr	r3, [sp, #20]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	9305      	str	r3, [sp, #20]
		FracPWMCoeff[i] = FracDivPWM;
 8003d2e:	8833      	ldrh	r3, [r6, #0]
 8003d30:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
	for (i = 0; i < 4; i++) {
 8003d34:	9b05      	ldr	r3, [sp, #20]
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	f67f af41 	bls.w	8003bbe <SetWSPRPLLCoeff+0x4e>
	}
	__HAL_RCC_PLL2_DISABLE();
 8003d3c:	4a3e      	ldr	r2, [pc, #248]	; (8003e38 <SetWSPRPLLCoeff+0x2c8>)
 8003d3e:	6813      	ldr	r3, [r2, #0]
 8003d40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d44:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1); //These parameters should stay the same for the 4 WSPR tones
 8003d46:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003d48:	9900      	ldr	r1, [sp, #0]
 8003d4a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003d4e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8003d52:	6293      	str	r3, [r2, #40]	; 0x28
 8003d54:	9901      	ldr	r1, [sp, #4]
 8003d56:	9b02      	ldr	r3, [sp, #8]
 8003d58:	3901      	subs	r1, #1
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003d60:	025b      	lsls	r3, r3, #9
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	430b      	orrs	r3, r1
 8003d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6a:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8003d6c:	6813      	ldr	r3, [r2, #0]
 8003d6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d72:	6013      	str	r3, [r2, #0]
}
 8003d74:	b00f      	add	sp, #60	; 0x3c
 8003d76:	ecbd 8b02 	vpop	{d8}
 8003d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					OutF = XTalFreq * n / m / p / od;
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d86:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003d8a:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 8003d8e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003d92:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
 8003d96:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003d9a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8003d9e:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8003da2:	ee37 7b45 	vsub.f64	d7, d7, d5
 8003da6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dae:	d521      	bpl.n	8003df4 <SetWSPRPLLCoeff+0x284>
 8003db0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003db4:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8003db8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003dbc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc4:	dd16      	ble.n	8003df4 <SetWSPRPLLCoeff+0x284>
						MinDiff = abs(OutF - TF);
 8003dc6:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8003dca:	ed9d 6b06 	vldr	d6, [sp, #24]
 8003dce:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003dd2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8003dd6:	ee17 7a10 	vmov	r7, s14
 8003dda:	2f00      	cmp	r7, #0
 8003ddc:	bfb8      	it	lt
 8003dde:	427f      	neglt	r7, r7
 8003de0:	ee07 7a10 	vmov	s14, r7
 8003de4:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8003de8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
						fp = p;
 8003dec:	9302      	str	r3, [sp, #8]
						fn = n;
 8003dee:	9201      	str	r2, [sp, #4]
						fm = m;
 8003df0:	9100      	str	r1, [sp, #0]
						fod = od;
 8003df2:	9003      	str	r0, [sp, #12]
				for (p = 2; p <= 128; p += 2) {
 8003df4:	3302      	adds	r3, #2
 8003df6:	2b82      	cmp	r3, #130	; 0x82
 8003df8:	d1c1      	bne.n	8003d7e <SetWSPRPLLCoeff+0x20e>
			for (n = 2; n <= 512; n++) //was 1
 8003dfa:	3201      	adds	r2, #1
 8003dfc:	4572      	cmp	r2, lr
 8003dfe:	f47f aef8 	bne.w	8003bf2 <SetWSPRPLLCoeff+0x82>
 8003e02:	e72d      	b.n	8003c60 <SetWSPRPLLCoeff+0xf0>
			FracDiv = 8191 * 8;
 8003e04:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8003e08:	9304      	str	r3, [sp, #16]
 8003e0a:	e77f      	b.n	8003d0c <SetWSPRPLLCoeff+0x19c>
 8003e0c:	f3af 8000 	nop.w
 8003e10:	ff800000 	.word	0xff800000
 8003e14:	41cdcd64 	.word	0x41cdcd64
 8003e18:	00000000 	.word	0x00000000
 8003e1c:	40f00000 	.word	0x40f00000
 8003e20:	24007264 	.word	0x24007264
 8003e24:	24008400 	.word	0x24008400
 8003e28:	3fbb7e91 	.word	0x3fbb7e91
 8003e2c:	4d0f0d18 	.word	0x4d0f0d18
 8003e30:	4e64e1c0 	.word	0x4e64e1c0
 8003e34:	24006234 	.word	0x24006234
 8003e38:	58024400 	.word	0x58024400
 8003e3c:	24007268 	.word	0x24007268

08003e40 <SetTXPLL>:
	{
		for (n = 2; n <= 512; n++) //was 1
		{
			for (p = 2; p <= 128; p+=2)
			{
				OutF = XTalFreq * n / m / p / od;
 8003e40:	4a90      	ldr	r2, [pc, #576]	; (8004084 <SetTXPLL+0x244>)
 8003e42:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	volatile float OutFHigherStep, OutF, MinDiff = 999999999;
 8003e46:	4b90      	ldr	r3, [pc, #576]	; (8004088 <SetTXPLL+0x248>)
	for (m = 2; m <= 25; m++) //was 64
 8003e48:	2002      	movs	r0, #2
				OutF = XTalFreq * n / m / p / od;
 8003e4a:	edd2 5a00 	vldr	s11, [r2]
		for (n = 2; n <= 512; n++) //was 1
 8003e4e:	f240 2c01 	movw	ip, #513	; 0x201
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8003e52:	ed9f 5a8e 	vldr	s10, [pc, #568]	; 800408c <SetTXPLL+0x24c>
 8003e56:	ed9f 4a8e 	vldr	s8, [pc, #568]	; 8004090 <SetTXPLL+0x250>
{
 8003e5a:	b410      	push	{r4}
					MinDiff = abs(OutF - TF);

					fp = p;
					fn = n;
					fm = m;
					fod = od;
 8003e5c:	2401      	movs	r4, #1
{
 8003e5e:	b08b      	sub	sp, #44	; 0x2c
	volatile float OutFHigherStep, OutF, MinDiff = 999999999;
 8003e60:	9303      	str	r3, [sp, #12]
	MinDiff = 999999999;
 8003e62:	9303      	str	r3, [sp, #12]
				OutF = XTalFreq * n / m / p / od;
 8003e64:	ee07 0a90 	vmov	s15, r0
		for (n = 2; n <= 512; n++) //was 1
 8003e68:	2102      	movs	r1, #2
				OutF = XTalFreq * n / m / p / od;
 8003e6a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003e6e:	eec3 4a86 	vdiv.f32	s9, s7, s12
 8003e72:	ee07 1a90 	vmov	s15, r1
			for (p = 2; p <= 128; p+=2)
 8003e76:	2302      	movs	r3, #2
				OutF = XTalFreq * n / m / p / od;
 8003e78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e7c:	ee66 6aa5 	vmul.f32	s13, s13, s11
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8003e80:	ee66 7aa4 	vmul.f32	s15, s13, s9
 8003e84:	eef4 7a45 	vcmp.f32	s15, s10
 8003e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e8c:	dd05      	ble.n	8003e9a <SetTXPLL+0x5a>
 8003e8e:	eef4 7ac4 	vcmpe.f32	s15, s8
 8003e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e96:	f100 80b6 	bmi.w	8004006 <SetTXPLL+0x1c6>
				OutF = XTalFreq * n / m / p / od;
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	3302      	adds	r3, #2
 8003ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ea4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003ea8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eac:	ed8d 7a02 	vstr	s14, [sp, #8]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8003eb0:	eddd 7a02 	vldr	s15, [sp, #8]
 8003eb4:	ed9d 7a03 	vldr	s14, [sp, #12]
 8003eb8:	ee70 7a67 	vsub.f32	s15, s0, s15
 8003ebc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec4:	dd00      	ble.n	8003ec8 <SetTXPLL+0x88>
 8003ec6:	9a02      	ldr	r2, [sp, #8]
			for (p = 2; p <= 128; p+=2)
 8003ec8:	2b82      	cmp	r3, #130	; 0x82
 8003eca:	d1e6      	bne.n	8003e9a <SetTXPLL+0x5a>
		for (n = 2; n <= 512; n++) //was 1
 8003ecc:	3101      	adds	r1, #1
 8003ece:	4561      	cmp	r1, ip
 8003ed0:	d1cf      	bne.n	8003e72 <SetTXPLL+0x32>
	for (m = 2; m <= 25; m++) //was 64
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	281a      	cmp	r0, #26
 8003ed6:	d1c5      	bne.n	8003e64 <SetTXPLL+0x24>
				}
			}
		}
	}
	if (fn < 511)
 8003ed8:	9b05      	ldr	r3, [sp, #20]
 8003eda:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8003ede:	f200 80cd 	bhi.w	800407c <SetTXPLL+0x23c>
	{
		OutF = XTalFreq * fn / fm / fp / fod;
 8003ee2:	eddd 6a05 	vldr	s13, [sp, #20]
 8003ee6:	ed9d 7a04 	vldr	s14, [sp, #16]
 8003eea:	eddd 7a06 	vldr	s15, [sp, #24]
 8003eee:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003ef2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003ef6:	ed9d 6a07 	vldr	s12, [sp, #28]
 8003efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 8003efe:	ed9f 5a65 	vldr	s10, [pc, #404]	; 8004094 <SetTXPLL+0x254>
		OutF = XTalFreq * fn / fm / fp / fod;
 8003f02:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8003f06:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8003f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f16:	ed8d 7a02 	vstr	s14, [sp, #8]
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 8003f1a:	9b05      	ldr	r3, [sp, #20]
 8003f1c:	ed9d 7a04 	vldr	s14, [sp, #16]
 8003f20:	eddd 7a06 	vldr	s15, [sp, #24]
 8003f24:	3301      	adds	r3, #1
 8003f26:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003f2a:	ed9d 6a07 	vldr	s12, [sp, #28]
 8003f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f32:	ee06 3a90 	vmov	s13, r3
 8003f36:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8003f3a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f42:	ee66 5aa5 	vmul.f32	s11, s13, s11
 8003f46:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003f4a:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8003f4e:	ed8d 7a01 	vstr	s14, [sp, #4]
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 8003f52:	eddd 6a02 	vldr	s13, [sp, #8]
 8003f56:	ed9d 7a01 	vldr	s14, [sp, #4]
 8003f5a:	eddd 7a02 	vldr	s15, [sp, #8]
 8003f5e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003f62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f66:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8003f6a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8003f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f72:	edcd 7a08 	vstr	s15, [sp, #32]
	else
	{
		FracDiv = 8191;
	}

	TXFreqError = MinDiff;
 8003f76:	eddd 7a03 	vldr	s15, [sp, #12]
	for (i=0; i< 50; i++)
 8003f7a:	2000      	movs	r0, #0
	__HAL_RCC_PLL2_DISABLE();
 8003f7c:	4a46      	ldr	r2, [pc, #280]	; (8004098 <SetTXPLL+0x258>)
	TXFreqError = MinDiff;
 8003f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f82:	4b46      	ldr	r3, [pc, #280]	; (800409c <SetTXPLL+0x25c>)
 8003f84:	edc3 7a00 	vstr	s15, [r3]
	__HAL_RCC_PLL2_DISABLE();
 8003f88:	6813      	ldr	r3, [r2, #0]
 8003f8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f8e:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 8003f90:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003f92:	9904      	ldr	r1, [sp, #16]
 8003f94:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003f98:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8003f9c:	6293      	str	r3, [r2, #40]	; 0x28
 8003f9e:	9905      	ldr	r1, [sp, #20]
 8003fa0:	9b06      	ldr	r3, [sp, #24]
 8003fa2:	3901      	subs	r1, #1
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003faa:	025b      	lsls	r3, r3, #9
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb4:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8003fb6:	6813      	ldr	r3, [r2, #0]
 8003fb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fbc:	6013      	str	r3, [r2, #0]

	SetFracPLL(FracDiv);
 8003fbe:	9908      	ldr	r1, [sp, #32]
	__HAL_RCC_PLL2FRACN_DISABLE();
 8003fc0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003fc2:	f023 0310 	bic.w	r3, r3, #16
 8003fc6:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 8003fc8:	9009      	str	r0, [sp, #36]	; 0x24
 8003fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fcc:	2b31      	cmp	r3, #49	; 0x31
 8003fce:	d80b      	bhi.n	8003fe8 <SetTXPLL+0x1a8>
		i++;
 8003fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	9309      	str	r3, [sp, #36]	; 0x24
		i--;
 8003fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	9309      	str	r3, [sp, #36]	; 0x24
	for (i=0; i< 50; i++)
 8003fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fde:	3301      	adds	r3, #1
 8003fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fe4:	2b31      	cmp	r3, #49	; 0x31
 8003fe6:	d9f3      	bls.n	8003fd0 <SetTXPLL+0x190>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 8003fe8:	4a2b      	ldr	r2, [pc, #172]	; (8004098 <SetTXPLL+0x258>)
 8003fea:	4b2d      	ldr	r3, [pc, #180]	; (80040a0 <SetTXPLL+0x260>)
 8003fec:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8003fee:	4003      	ands	r3, r0
 8003ff0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ff4:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 8003ff6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003ff8:	f043 0310 	orr.w	r3, r3, #16
 8003ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif

}
 8003ffe:	b00b      	add	sp, #44	; 0x2c
 8004000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004004:	4770      	bx	lr
				OutF = XTalFreq * n / m / p / od;
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800400e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004016:	ed8d 7a02 	vstr	s14, [sp, #8]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 800401a:	eddd 7a02 	vldr	s15, [sp, #8]
 800401e:	ed9d 7a03 	vldr	s14, [sp, #12]
 8004022:	ee70 7a67 	vsub.f32	s15, s0, s15
 8004026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800402a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402e:	d51d      	bpl.n	800406c <SetTXPLL+0x22c>
 8004030:	eddd 7a02 	vldr	s15, [sp, #8]
 8004034:	ee70 7a67 	vsub.f32	s15, s0, s15
 8004038:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800403c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004040:	dd14      	ble.n	800406c <SetTXPLL+0x22c>
					MinDiff = abs(OutF - TF);
 8004042:	eddd 7a02 	vldr	s15, [sp, #8]
 8004046:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800404a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800404e:	ee17 2a90 	vmov	r2, s15
 8004052:	2a00      	cmp	r2, #0
 8004054:	bfb8      	it	lt
 8004056:	4252      	neglt	r2, r2
 8004058:	ee07 2a90 	vmov	s15, r2
 800405c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004060:	edcd 7a03 	vstr	s15, [sp, #12]
					fp = p;
 8004064:	9306      	str	r3, [sp, #24]
					fn = n;
 8004066:	9105      	str	r1, [sp, #20]
					fm = m;
 8004068:	9004      	str	r0, [sp, #16]
					fod = od;
 800406a:	9407      	str	r4, [sp, #28]
			for (p = 2; p <= 128; p+=2)
 800406c:	3302      	adds	r3, #2
 800406e:	2b82      	cmp	r3, #130	; 0x82
 8004070:	d1c9      	bne.n	8004006 <SetTXPLL+0x1c6>
		for (n = 2; n <= 512; n++) //was 1
 8004072:	3101      	adds	r1, #1
 8004074:	4561      	cmp	r1, ip
 8004076:	f47f aefc 	bne.w	8003e72 <SetTXPLL+0x32>
 800407a:	e72a      	b.n	8003ed2 <SetTXPLL+0x92>
		FracDiv = 8191;
 800407c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8004080:	9308      	str	r3, [sp, #32]
 8004082:	e778      	b.n	8003f76 <SetTXPLL+0x136>
 8004084:	24008400 	.word	0x24008400
 8004088:	4e6e6b28 	.word	0x4e6e6b28
 800408c:	4d0f0d18 	.word	0x4d0f0d18
 8004090:	4e64e1c0 	.word	0x4e64e1c0
 8004094:	46000000 	.word	0x46000000
 8004098:	58024400 	.word	0x58024400
 800409c:	240072e0 	.word	0x240072e0
 80040a0:	ffff0007 	.word	0xffff0007
 80040a4:	00000000 	.word	0x00000000

080040a8 <TXSwitch>:


void TXSwitch(uint8_t Status)
{
 80040a8:	b530      	push	{r4, r5, lr}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040aa:	2300      	movs	r3, #0
{
 80040ac:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ae:	e9cd 3300 	strd	r3, r3, [sp]
 80040b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80040b6:	9304      	str	r3, [sp, #16]

	if (Status)
 80040b8:	b378      	cbz	r0, 800411a <TXSwitch+0x72>
	{
		TransmissionEnabled = 1;
		//TODO: TXFreq should be calculated in a low priority task every time F is changed, during RX. In this way TX would start immediately and without
		// audio noise caused by RX starving
		if (LastTXFreq != LOfreq)
 80040ba:	4d27      	ldr	r5, [pc, #156]	; (8004158 <TXSwitch+0xb0>)
		TransmissionEnabled = 1;
 80040bc:	2201      	movs	r2, #1
		if (LastTXFreq != LOfreq)
 80040be:	4c27      	ldr	r4, [pc, #156]	; (800415c <TXSwitch+0xb4>)
 80040c0:	ed95 0a00 	vldr	s0, [r5]
 80040c4:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 80040c8:	4b25      	ldr	r3, [pc, #148]	; (8004160 <TXSwitch+0xb8>)
		if (LastTXFreq != LOfreq)
 80040ca:	eef4 7a40 	vcmp.f32	s15, s0
		TransmissionEnabled = 1;
 80040ce:	701a      	strb	r2, [r3, #0]
		if (LastTXFreq != LOfreq)
 80040d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d4:	d11c      	bne.n	8004110 <TXSwitch+0x68>
			SetTXPLL(LOfreq);
			LastTXFreq = LOfreq;
		}

		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040d6:	2200      	movs	r2, #0
 80040d8:	2303      	movs	r3, #3
 80040da:	f44f 7400 	mov.w	r4, #512	; 0x200
 80040de:	2502      	movs	r5, #2
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040e0:	4669      	mov	r1, sp
 80040e2:	4820      	ldr	r0, [pc, #128]	; (8004164 <TXSwitch+0xbc>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80040e8:	2300      	movs	r3, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040ea:	e9cd 4500 	strd	r4, r5, [sp]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80040ee:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040f0:	f004 fd72 	bl	8008bd8 <HAL_GPIO_Init>

		RELAY_TX_ON;
 80040f4:	2201      	movs	r2, #1
 80040f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80040fa:	481b      	ldr	r0, [pc, #108]	; (8004168 <TXSwitch+0xc0>)
 80040fc:	f004 feac 	bl	8008e58 <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8004100:	2201      	movs	r2, #1
 8004102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004106:	4819      	ldr	r0, [pc, #100]	; (800416c <TXSwitch+0xc4>)
 8004108:	f004 fea6 	bl	8008e58 <HAL_GPIO_WritePin>
		RELAY_TX_OFF;
		LED_YELLOW_OFF;
		TransmissionEnabled = 0;

	}
}
 800410c:	b007      	add	sp, #28
 800410e:	bd30      	pop	{r4, r5, pc}
			SetTXPLL(LOfreq);
 8004110:	f7ff fe96 	bl	8003e40 <SetTXPLL>
			LastTXFreq = LOfreq;
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	6023      	str	r3, [r4, #0]
 8004118:	e7dd      	b.n	80040d6 <TXSwitch+0x2e>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800411a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8004150 <TXSwitch+0xa8>
 800411e:	4604      	mov	r4, r0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004120:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004122:	4669      	mov	r1, sp
 8004124:	480f      	ldr	r0, [pc, #60]	; (8004164 <TXSwitch+0xbc>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004126:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004128:	ed8d 7b00 	vstr	d7, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800412c:	f004 fd54 	bl	8008bd8 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8004130:	4622      	mov	r2, r4
 8004132:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004136:	480c      	ldr	r0, [pc, #48]	; (8004168 <TXSwitch+0xc0>)
 8004138:	f004 fe8e 	bl	8008e58 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 800413c:	4622      	mov	r2, r4
 800413e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004142:	480a      	ldr	r0, [pc, #40]	; (800416c <TXSwitch+0xc4>)
 8004144:	f004 fe88 	bl	8008e58 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <TXSwitch+0xb8>)
 800414a:	701c      	strb	r4, [r3, #0]
}
 800414c:	b007      	add	sp, #28
 800414e:	bd30      	pop	{r4, r5, pc}
 8004150:	00000200 	.word	0x00000200
 8004154:	00000001 	.word	0x00000001
 8004158:	24007258 	.word	0x24007258
 800415c:	24007264 	.word	0x24007264
 8004160:	240072e8 	.word	0x240072e8
 8004164:	58020800 	.word	0x58020800
 8004168:	58020c00 	.word	0x58020c00
 800416c:	58020400 	.word	0x58020400

08004170 <CarrierEnable>:


void CarrierEnable(uint8_t Status)
{
 8004170:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004172:	2400      	movs	r4, #0
{
 8004174:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004176:	e9cd 4400 	strd	r4, r4, [sp]
 800417a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800417e:	9404      	str	r4, [sp, #16]
	if (Status)
 8004180:	b320      	cbz	r0, 80041cc <CarrierEnable+0x5c>
	{
		//TODO: Ramping
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8004182:	4622      	mov	r2, r4
 8004184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004188:	4822      	ldr	r0, [pc, #136]	; (8004214 <CarrierEnable+0xa4>)
 800418a:	f004 fe65 	bl	8008e58 <HAL_GPIO_WritePin>
		//approx bias vs. VRMS 50 Ohm out vs power
		//4095 17.1  5.8
		//2048 13.1  3.4
		//1024 7.5	 1.1
		// 256 3.8   0.3
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 800418e:	4b22      	ldr	r3, [pc, #136]	; (8004218 <CarrierEnable+0xa8>)
 8004190:	4622      	mov	r2, r4
 8004192:	2110      	movs	r1, #16
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4821      	ldr	r0, [pc, #132]	; (800421c <CarrierEnable+0xac>)
 8004198:	f003 f966 	bl	8007468 <HAL_DAC_SetValue>
		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800419c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a0:	2302      	movs	r3, #2
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a2:	4669      	mov	r1, sp
 80041a4:	481e      	ldr	r0, [pc, #120]	; (8004220 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80041a6:	9404      	str	r4, [sp, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80041a8:	e9cd 2300 	strd	r2, r3, [sp]
 80041ac:	2200      	movs	r2, #0
 80041ae:	2303      	movs	r3, #3
 80041b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041b4:	f004 fd10 	bl	8008bd8 <HAL_GPIO_Init>

		TXCarrierEnabled = 1;
 80041b8:	2201      	movs	r2, #1
 80041ba:	4b1a      	ldr	r3, [pc, #104]	; (8004224 <CarrierEnable+0xb4>)
		LED_GREEN_ON;
 80041bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041c0:	4819      	ldr	r0, [pc, #100]	; (8004228 <CarrierEnable+0xb8>)
		TXCarrierEnabled = 1;
 80041c2:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 80041c4:	f004 fe48 	bl	8008e58 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
		LED_GREEN_OFF;
	}
}
 80041c8:	b007      	add	sp, #28
 80041ca:	bd30      	pop	{r4, r5, pc}
 80041cc:	4605      	mov	r5, r0
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80041ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041d2:	4810      	ldr	r0, [pc, #64]	; (8004214 <CarrierEnable+0xa4>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	f004 fe3f 	bl	8008e58 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 80041da:	462b      	mov	r3, r5
 80041dc:	462a      	mov	r2, r5
 80041de:	2110      	movs	r1, #16
 80041e0:	480e      	ldr	r0, [pc, #56]	; (800421c <CarrierEnable+0xac>)
 80041e2:	f003 f941 	bl	8007468 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80041e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ea:	2301      	movs	r3, #1
		TXCarrierEnabled = 0;
 80041ec:	480d      	ldr	r0, [pc, #52]	; (8004224 <CarrierEnable+0xb4>)
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041ee:	4669      	mov	r1, sp
		TXCarrierEnabled = 0;
 80041f0:	7005      	strb	r5, [r0, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041f2:	480b      	ldr	r0, [pc, #44]	; (8004220 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80041f4:	e9cd 2300 	strd	r2, r3, [sp]
 80041f8:	2300      	movs	r3, #0
 80041fa:	2202      	movs	r2, #2
 80041fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004200:	f004 fcea 	bl	8008bd8 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 8004204:	462a      	mov	r2, r5
 8004206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800420a:	4807      	ldr	r0, [pc, #28]	; (8004228 <CarrierEnable+0xb8>)
 800420c:	f004 fe24 	bl	8008e58 <HAL_GPIO_WritePin>
}
 8004210:	b007      	add	sp, #28
 8004212:	bd30      	pop	{r4, r5, pc}
 8004214:	58020c00 	.word	0x58020c00
 8004218:	240072ec 	.word	0x240072ec
 800421c:	2400b508 	.word	0x2400b508
 8004220:	58020800 	.word	0x58020800
 8004224:	240072dc 	.word	0x240072dc
 8004228:	58020400 	.word	0x58020400

0800422c <Error_Handler>:
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 800422c:	4e09      	ldr	r6, [pc, #36]	; (8004254 <Error_Handler+0x28>)
{
 800422e:	4d0a      	ldr	r5, [pc, #40]	; (8004258 <Error_Handler+0x2c>)
 8004230:	4c0a      	ldr	r4, [pc, #40]	; (800425c <Error_Handler+0x30>)
 8004232:	b508      	push	{r3, lr}
 8004234:	6833      	ldr	r3, [r6, #0]
 8004236:	fb05 f303 	mul.w	r3, r5, r3
 800423a:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 800423e:	d200      	bcs.n	8004242 <Error_Handler+0x16>
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8004240:	e7fe      	b.n	8004240 <Error_Handler+0x14>
			LED_switch();
 8004242:	f7fd f913 	bl	800146c <LED_switch>
 8004246:	6833      	ldr	r3, [r6, #0]
 8004248:	fb05 f303 	mul.w	r3, r5, r3
 800424c:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 8004250:	d2f7      	bcs.n	8004242 <Error_Handler+0x16>
 8004252:	e7f5      	b.n	8004240 <Error_Handler+0x14>
 8004254:	2400b840 	.word	0x2400b840
 8004258:	c28f5c29 	.word	0xc28f5c29
 800425c:	051eb851 	.word	0x051eb851

08004260 <SystemClock_Config_For_OC>:
{
 8004260:	b530      	push	{r4, r5, lr}
 8004262:	b0cf      	sub	sp, #316	; 0x13c
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004264:	224c      	movs	r2, #76	; 0x4c
 8004266:	2100      	movs	r1, #0
 8004268:	a80a      	add	r0, sp, #40	; 0x28
 800426a:	f00c fd31 	bl	8010cd0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800426e:	2220      	movs	r2, #32
 8004270:	2100      	movs	r1, #0
 8004272:	a802      	add	r0, sp, #8
 8004274:	f00c fd2c 	bl	8010cd0 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004278:	22c0      	movs	r2, #192	; 0xc0
 800427a:	2100      	movs	r1, #0
 800427c:	a81e      	add	r0, sp, #120	; 0x78
 800427e:	f00c fd27 	bl	8010cd0 <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004282:	2002      	movs	r0, #2
 8004284:	f005 fe6a 	bl	8009f5c <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004288:	4a49      	ldr	r2, [pc, #292]	; (80043b0 <SystemClock_Config_For_OC+0x150>)
 800428a:	2300      	movs	r3, #0
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	6991      	ldr	r1, [r2, #24]
 8004290:	4b48      	ldr	r3, [pc, #288]	; (80043b4 <SystemClock_Config_For_OC+0x154>)
 8004292:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8004296:	6191      	str	r1, [r2, #24]
 8004298:	6991      	ldr	r1, [r2, #24]
 800429a:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 800429e:	9101      	str	r1, [sp, #4]
 80042a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042a2:	f041 0101 	orr.w	r1, r1, #1
 80042a6:	62d9      	str	r1, [r3, #44]	; 0x2c
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80042b2:	6993      	ldr	r3, [r2, #24]
 80042b4:	0499      	lsls	r1, r3, #18
 80042b6:	d5fc      	bpl.n	80042b2 <SystemClock_Config_For_OC+0x52>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80042b8:	4a3f      	ldr	r2, [pc, #252]	; (80043b8 <SystemClock_Config_For_OC+0x158>)
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80042ba:	2404      	movs	r4, #4
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80042bc:	2501      	movs	r5, #1
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042be:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80042c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80042c2:	f023 0303 	bic.w	r3, r3, #3
 80042c6:	f043 0302 	orr.w	r3, r3, #2
 80042ca:	6293      	str	r3, [r2, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042cc:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLM = 10;
 80042ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80042d2:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = 2;
 80042d4:	9317      	str	r3, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80042d6:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80042d8:	941a      	str	r4, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80042da:	9418      	str	r4, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042dc:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80042e0:	2300      	movs	r3, #0
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80042e2:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 10;
 80042e6:	230a      	movs	r3, #10
 80042e8:	e9cd 3215 	strd	r3, r2, [sp, #84]	; 0x54
	XTalFreq += XTalFreq * XTAL_F_ERROR;
 80042ec:	4b33      	ldr	r3, [pc, #204]	; (80043bc <SystemClock_Config_For_OC+0x15c>)
 80042ee:	4a34      	ldr	r2, [pc, #208]	; (80043c0 <SystemClock_Config_For_OC+0x160>)
 80042f0:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80042f2:	2221      	movs	r2, #33	; 0x21
 80042f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80042f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042fc:	f005 fede 	bl	800a0bc <HAL_RCC_OscConfig>
 8004300:	2800      	cmp	r0, #0
 8004302:	d152      	bne.n	80043aa <SystemClock_Config_For_OC+0x14a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004304:	223f      	movs	r2, #63	; 0x3f
 8004306:	2303      	movs	r3, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004308:	4621      	mov	r1, r4
 800430a:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800430c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004310:	2200      	movs	r2, #0
 8004312:	2308      	movs	r3, #8
 8004314:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004318:	2240      	movs	r2, #64	; 0x40
 800431a:	2340      	movs	r3, #64	; 0x40
 800431c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004320:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004324:	2340      	movs	r3, #64	; 0x40
 8004326:	e9cd 2308 	strd	r2, r3, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800432a:	f006 faad 	bl	800a888 <HAL_RCC_ClockConfig>
 800432e:	2800      	cmp	r0, #0
 8004330:	d13b      	bne.n	80043aa <SystemClock_Config_For_OC+0x14a>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8004332:	4a24      	ldr	r2, [pc, #144]	; (80043c4 <SystemClock_Config_For_OC+0x164>)
 8004334:	2300      	movs	r3, #0
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8004336:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800433a:	903c      	str	r0, [sp, #240]	; 0xf0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800433c:	a81e      	add	r0, sp, #120	; 0x78
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800433e:	9140      	str	r1, [sp, #256]	; 0x100
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8004340:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 8004344:	2204      	movs	r2, #4
 8004346:	2326      	movs	r3, #38	; 0x26
 8004348:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 800434c:	2218      	movs	r2, #24
 800434e:	2302      	movs	r3, #2
 8004350:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 8004354:	2202      	movs	r2, #2
 8004356:	2380      	movs	r3, #128	; 0x80
 8004358:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 800435c:	2200      	movs	r2, #0
 800435e:	2300      	movs	r3, #0
 8004360:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8004364:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8004368:	f44f 6280 	mov.w	r2, #1024	; 0x400
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800436c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8004370:	9245      	str	r2, [sp, #276]	; 0x114
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 8004372:	2205      	movs	r2, #5
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8004374:	9347      	str	r3, [sp, #284]	; 0x11c
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 800437c:	2202      	movs	r2, #2
 800437e:	2308      	movs	r3, #8
 8004380:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
 8004384:	2205      	movs	r2, #5
 8004386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800438a:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800438e:	f006 fd67 	bl	800ae60 <HAL_RCCEx_PeriphCLKConfig>
 8004392:	b950      	cbnz	r0, 80043aa <SystemClock_Config_For_OC+0x14a>
	HAL_PWREx_EnableUSBVoltageDetector();
 8004394:	f005 fe06 	bl	8009fa4 <HAL_PWREx_EnableUSBVoltageDetector>
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_1);
 8004398:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800439c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80043a0:	4628      	mov	r0, r5
 80043a2:	f006 f97f 	bl	800a6a4 <HAL_RCC_MCOConfig>
}
 80043a6:	b04f      	add	sp, #316	; 0x13c
 80043a8:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 80043aa:	f7ff ff3f 	bl	800422c <Error_Handler>
 80043ae:	bf00      	nop
 80043b0:	58024800 	.word	0x58024800
 80043b4:	58000400 	.word	0x58000400
 80043b8:	58024400 	.word	0x58024400
 80043bc:	24008400 	.word	0x24008400
 80043c0:	4bbebbd3 	.word	0x4bbebbd3
 80043c4:	000c0042 	.word	0x000c0042

080043c8 <UserInput>:
{
 80043c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (WSPRBeaconState == SEND_WSPR)
 80043cc:	4d84      	ldr	r5, [pc, #528]	; (80045e0 <UserInput+0x218>)
{
 80043ce:	b08d      	sub	sp, #52	; 0x34
	if (WSPRBeaconState == SEND_WSPR)
 80043d0:	782e      	ldrb	r6, [r5, #0]
 80043d2:	2e02      	cmp	r6, #2
 80043d4:	f000 812c 	beq.w	8004630 <UserInput+0x268>
	if (USBRXLength)
 80043d8:	4b82      	ldr	r3, [pc, #520]	; (80045e4 <UserInput+0x21c>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	bb2a      	cbnz	r2, 800442a <UserInput+0x62>
		result = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	f88d 3017 	strb.w	r3, [sp, #23]
	if (result == HAL_OK)
 80043e4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80043e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80043ec:	b33b      	cbz	r3, 800443e <UserInput+0x76>
 80043ee:	4c7e      	ldr	r4, [pc, #504]	; (80045e8 <UserInput+0x220>)
	EncVal = TIM4->CNT;
 80043f0:	4b7e      	ldr	r3, [pc, #504]	; (80045ec <UserInput+0x224>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 80043f2:	4d7f      	ldr	r5, [pc, #508]	; (80045f0 <UserInput+0x228>)
	EncVal = TIM4->CNT;
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 80043f6:	882a      	ldrh	r2, [r5, #0]
	EncVal = TIM4->CNT;
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	4e7e      	ldr	r6, [pc, #504]	; (80045f4 <UserInput+0x22c>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 80043fc:	1a98      	subs	r0, r3, r2
	EncVal = TIM4->CNT;
 80043fe:	8033      	strh	r3, [r6, #0]
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8004400:	b201      	sxth	r1, r0
 8004402:	b280      	uxth	r0, r0
	if (DiffEncVal < 0)
 8004404:	2900      	cmp	r1, #0
 8004406:	f2c0 80d9 	blt.w	80045bc <UserInput+0x1f4>
	if (DiffEncVal > 0)
 800440a:	f000 8081 	beq.w	8004510 <UserInput+0x148>
		FminusClicked(DiffEncVal); // One encoder click is two counts
 800440e:	f7fc ffc3 	bl	8001398 <FminusClicked>
	if (!DisableDisplay)
 8004412:	7823      	ldrb	r3, [r4, #0]
 8004414:	b913      	cbnz	r3, 800441c <UserInput+0x54>
 8004416:	f7ff fa15 	bl	8003844 <DisplayStatus.part.0>
	if (!DisableDisplay)
 800441a:	7823      	ldrb	r3, [r4, #0]
		LastEncVal = EncVal;
 800441c:	8832      	ldrh	r2, [r6, #0]
 800441e:	802a      	strh	r2, [r5, #0]
	if (!DisableDisplay)
 8004420:	2b00      	cmp	r3, #0
 8004422:	d078      	beq.n	8004516 <UserInput+0x14e>
}
 8004424:	b00d      	add	sp, #52	; 0x34
 8004426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		result = HAL_OK;
 800442a:	2200      	movs	r2, #0
 800442c:	f88d 2017 	strb.w	r2, [sp, #23]
		USBRXLength = 0;
 8004430:	601a      	str	r2, [r3, #0]
	if (result == HAL_OK)
 8004432:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004436:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1d7      	bne.n	80043ee <UserInput+0x26>
		switch (UartRXString[0])
 800443e:	4b6e      	ldr	r3, [pc, #440]	; (80045f8 <UserInput+0x230>)
		UartRXDataReady = RESET;
 8004440:	496e      	ldr	r1, [pc, #440]	; (80045fc <UserInput+0x234>)
		switch (UartRXString[0])
 8004442:	781b      	ldrb	r3, [r3, #0]
		UartRXDataReady = RESET;
 8004444:	700a      	strb	r2, [r1, #0]
		switch (UartRXString[0])
 8004446:	3b2b      	subs	r3, #43	; 0x2b
 8004448:	2b4c      	cmp	r3, #76	; 0x4c
 800444a:	d859      	bhi.n	8004500 <UserInput+0x138>
 800444c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004450:	00580159 	.word	0x00580159
 8004454:	0058016b 	.word	0x0058016b
 8004458:	00580058 	.word	0x00580058
 800445c:	01840180 	.word	0x01840180
 8004460:	018c0188 	.word	0x018c0188
 8004464:	01940190 	.word	0x01940190
 8004468:	019c0198 	.word	0x019c0198
 800446c:	005801a0 	.word	0x005801a0
 8004470:	00580058 	.word	0x00580058
 8004474:	00580058 	.word	0x00580058
 8004478:	00580058 	.word	0x00580058
 800447c:	01a40058 	.word	0x01a40058
 8004480:	01ac01a8 	.word	0x01ac01a8
 8004484:	00580058 	.word	0x00580058
 8004488:	00580058 	.word	0x00580058
 800448c:	01b00058 	.word	0x01b00058
 8004490:	01ba01b5 	.word	0x01ba01b5
 8004494:	00580058 	.word	0x00580058
 8004498:	00580058 	.word	0x00580058
 800449c:	00580058 	.word	0x00580058
 80044a0:	00580058 	.word	0x00580058
 80044a4:	00580058 	.word	0x00580058
 80044a8:	005801bf 	.word	0x005801bf
 80044ac:	02dd01c7 	.word	0x02dd01c7
 80044b0:	00580058 	.word	0x00580058
 80044b4:	00580058 	.word	0x00580058
 80044b8:	00580058 	.word	0x00580058
 80044bc:	02c802e5 	.word	0x02c802e5
 80044c0:	005802cc 	.word	0x005802cc
 80044c4:	02d00058 	.word	0x02d00058
 80044c8:	004d02d4 	.word	0x004d02d4
 80044cc:	00580058 	.word	0x00580058
 80044d0:	01d60058 	.word	0x01d60058
 80044d4:	01da0058 	.word	0x01da0058
 80044d8:	00580058 	.word	0x00580058
 80044dc:	01de0058 	.word	0x01de0058
 80044e0:	0222021e 	.word	0x0222021e
 80044e4:	02a60278 	.word	0x02a60278
 80044e8:	0155      	.short	0x0155
			keyer_speed += 1;
 80044ea:	4b45      	ldr	r3, [pc, #276]	; (8004600 <UserInput+0x238>)
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	3001      	adds	r0, #1
			if (keyer_speed > 50)
 80044f0:	2832      	cmp	r0, #50	; 0x32
 80044f2:	f340 8296 	ble.w	8004a22 <UserInput+0x65a>
				keyer_speed = 50;
 80044f6:	2232      	movs	r2, #50	; 0x32
 80044f8:	4610      	mov	r0, r2
 80044fa:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 80044fc:	f7fc f8ca 	bl	8000694 <loadWPM>
	if (!DisableDisplay)
 8004500:	4c39      	ldr	r4, [pc, #228]	; (80045e8 <UserInput+0x220>)
 8004502:	7823      	ldrb	r3, [r4, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f47f af73 	bne.w	80043f0 <UserInput+0x28>
 800450a:	f7ff f99b 	bl	8003844 <DisplayStatus.part.0>
 800450e:	e76f      	b.n	80043f0 <UserInput+0x28>
	if (!DisableDisplay)
 8004510:	7823      	ldrb	r3, [r4, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d186      	bne.n	8004424 <UserInput+0x5c>
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8004516:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <UserInput+0x23c>)
 8004518:	4c3b      	ldr	r4, [pc, #236]	; (8004608 <UserInput+0x240>)
 800451a:	ed93 7a00 	vldr	s14, [r3]
 800451e:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 80045d0 <UserInput+0x208>
 8004522:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004526:	ee27 0b00 	vmul.f64	d0, d7, d0
 800452a:	f00f fd51 	bl	8013fd0 <log10>
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 800452e:	4937      	ldr	r1, [pc, #220]	; (800460c <UserInput+0x244>)
 8004530:	4a37      	ldr	r2, [pc, #220]	; (8004610 <UserInput+0x248>)
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8004532:	eeb1 7b00 	vmov.f64	d7, #16	; 0x40800000  4.0
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8004536:	4b37      	ldr	r3, [pc, #220]	; (8004614 <UserInput+0x24c>)
 8004538:	6808      	ldr	r0, [r1, #0]
 800453a:	6812      	ldr	r2, [r2, #0]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	4936      	ldr	r1, [pc, #216]	; (8004618 <UserInput+0x250>)
 8004540:	9300      	str	r3, [sp, #0]
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8004542:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80045d8 <UserInput+0x210>
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8004546:	e9cd 2001 	strd	r2, r0, [sp, #4]
 800454a:	4834      	ldr	r0, [pc, #208]	; (800461c <UserInput+0x254>)
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 800454c:	eea0 7b06 	vfma.f64	d7, d0, d6
 8004550:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8004554:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8004558:	ed84 7a00 	vstr	s14, [r4]
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 800455c:	ec53 2b16 	vmov	r2, r3, d6
 8004560:	f00d f86c 	bl	801163c <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8004564:	482d      	ldr	r0, [pc, #180]	; (800461c <UserInput+0x254>)
 8004566:	f7fb febb 	bl	80002e0 <strlen>
 800456a:	4601      	mov	r1, r0
 800456c:	482b      	ldr	r0, [pc, #172]	; (800461c <UserInput+0x254>)
 800456e:	b289      	uxth	r1, r1
 8004570:	f00a ffc4 	bl	800f4fc <CDC_Transmit_FS>
	HAL_Delay(1);
 8004574:	2001      	movs	r0, #1
 8004576:	f001 fbcb 	bl	8005d10 <HAL_Delay>
		if (OVFDetected)
 800457a:	4a29      	ldr	r2, [pc, #164]	; (8004620 <UserInput+0x258>)
 800457c:	8813      	ldrh	r3, [r2, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 80a5 	beq.w	80046ce <UserInput+0x306>
			OVFDetected--;
 8004584:	3b01      	subs	r3, #1
			sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8004586:	4927      	ldr	r1, [pc, #156]	; (8004624 <UserInput+0x25c>)
 8004588:	4c24      	ldr	r4, [pc, #144]	; (800461c <UserInput+0x254>)
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 800458a:	2580      	movs	r5, #128	; 0x80
			OVFDetected--;
 800458c:	b29b      	uxth	r3, r3
 800458e:	8013      	strh	r3, [r2, #0]
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8004590:	4a25      	ldr	r2, [pc, #148]	; (8004628 <UserInput+0x260>)
 8004592:	6816      	ldr	r6, [r2, #0]
			sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8004594:	c907      	ldmia	r1, {r0, r1, r2}
 8004596:	c403      	stmia	r4!, {r0, r1}
 8004598:	f824 2b02 	strh.w	r2, [r4], #2
 800459c:	0c12      	lsrs	r2, r2, #16
 800459e:	7022      	strb	r2, [r4, #0]
			__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 80045a0:	4a22      	ldr	r2, [pc, #136]	; (800462c <UserInput+0x264>)
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 80045a2:	6035      	str	r5, [r6, #0]
			__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	6015      	str	r5, [r2, #0]
			if (!OVFDetected)
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f040 8098 	bne.w	80046de <UserInput+0x316>
				__HAL_ADC_ENABLE_IT(&hadc1, (ADC_IT_AWD1));
 80045ae:	6873      	ldr	r3, [r6, #4]
 80045b0:	432b      	orrs	r3, r5
 80045b2:	6073      	str	r3, [r6, #4]
				__HAL_ADC_ENABLE_IT(&hadc2, (ADC_IT_AWD1));
 80045b4:	6853      	ldr	r3, [r2, #4]
 80045b6:	432b      	orrs	r3, r5
 80045b8:	6053      	str	r3, [r2, #4]
 80045ba:	e090      	b.n	80046de <UserInput+0x316>
		FplusClicked(-DiffEncVal); // One encoder click is two counts
 80045bc:	1ad0      	subs	r0, r2, r3
 80045be:	b280      	uxth	r0, r0
 80045c0:	f7fc fe80 	bl	80012c4 <FplusClicked>
	if (!DisableDisplay)
 80045c4:	7823      	ldrb	r3, [r4, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f47f af28 	bne.w	800441c <UserInput+0x54>
 80045cc:	e723      	b.n	8004416 <UserInput+0x4e>
 80045ce:	bf00      	nop
 80045d0:	00000000 	.word	0x00000000
 80045d4:	409f4000 	.word	0x409f4000
 80045d8:	9916f6a6 	.word	0x9916f6a6
 80045dc:	400a93fc 	.word	0x400a93fc
 80045e0:	240083fd 	.word	0x240083fd
 80045e4:	240072f0 	.word	0x240072f0
 80045e8:	24002030 	.word	0x24002030
 80045ec:	40000800 	.word	0x40000800
 80045f0:	24007260 	.word	0x24007260
 80045f4:	24002032 	.word	0x24002032
 80045f8:	240072f8 	.word	0x240072f8
 80045fc:	240072f6 	.word	0x240072f6
 8004600:	2400b810 	.word	0x2400b810
 8004604:	2400727c 	.word	0x2400727c
 8004608:	24007284 	.word	0x24007284
 800460c:	240072d8 	.word	0x240072d8
 8004610:	240072d4 	.word	0x240072d4
 8004614:	24002019 	.word	0x24002019
 8004618:	0801b208 	.word	0x0801b208
 800461c:	240073f8 	.word	0x240073f8
 8004620:	24007272 	.word	0x24007272
 8004624:	0801b22c 	.word	0x0801b22c
 8004628:	2400b43c 	.word	0x2400b43c
 800462c:	2400b4a0 	.word	0x2400b4a0
		HAL_ADCEx_MultiModeStop_DMA(&hadc1);
 8004630:	48c7      	ldr	r0, [pc, #796]	; (8004950 <UserInput+0x588>)
 8004632:	f002 fccd 	bl	8006fd0 <HAL_ADCEx_MultiModeStop_DMA>
		SendWSPR(); //endless loop, only way to exit is by CW keying.
 8004636:	f7ff f803 	bl	8003640 <SendWSPR>
		if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 800463a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800463e:	49c5      	ldr	r1, [pc, #788]	; (8004954 <UserInput+0x58c>)
 8004640:	48c3      	ldr	r0, [pc, #780]	; (8004950 <UserInput+0x588>)
 8004642:	f002 fc49 	bl	8006ed8 <HAL_ADCEx_MultiModeStart_DMA>
 8004646:	4604      	mov	r4, r0
 8004648:	2800      	cmp	r0, #0
 800464a:	f040 81f4 	bne.w	8004a36 <UserInput+0x66e>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800464e:	f44f 7800 	mov.w	r8, #512	; 0x200
 8004652:	f04f 0901 	mov.w	r9, #1
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004656:	a906      	add	r1, sp, #24
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004658:	9608      	str	r6, [sp, #32]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800465a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800465e:	48be      	ldr	r0, [pc, #760]	; (8004958 <UserInput+0x590>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004660:	e9cd 8906 	strd	r8, r9, [sp, #24]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004664:	f004 fab8 	bl	8008bd8 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8004668:	4622      	mov	r2, r4
 800466a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800466e:	48bb      	ldr	r0, [pc, #748]	; (800495c <UserInput+0x594>)
 8004670:	f004 fbf2 	bl	8008e58 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8004674:	4622      	mov	r2, r4
 8004676:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800467a:	48b9      	ldr	r0, [pc, #740]	; (8004960 <UserInput+0x598>)
 800467c:	f004 fbec 	bl	8008e58 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8004680:	4bb8      	ldr	r3, [pc, #736]	; (8004964 <UserInput+0x59c>)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8004682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004686:	48b5      	ldr	r0, [pc, #724]	; (800495c <UserInput+0x594>)
 8004688:	2201      	movs	r2, #1
		TransmissionEnabled = 0;
 800468a:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800468c:	940a      	str	r4, [sp, #40]	; 0x28
 800468e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004692:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8004696:	f004 fbdf 	bl	8008e58 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 800469a:	4623      	mov	r3, r4
 800469c:	4622      	mov	r2, r4
 800469e:	2110      	movs	r1, #16
 80046a0:	48b1      	ldr	r0, [pc, #708]	; (8004968 <UserInput+0x5a0>)
 80046a2:	f002 fee1 	bl	8007468 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80046a6:	2202      	movs	r2, #2
 80046a8:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046aa:	a906      	add	r1, sp, #24
 80046ac:	48aa      	ldr	r0, [pc, #680]	; (8004958 <UserInput+0x590>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80046ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
		TXCarrierEnabled = 0;
 80046b2:	4bae      	ldr	r3, [pc, #696]	; (800496c <UserInput+0x5a4>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80046b4:	e9cd 8906 	strd	r8, r9, [sp, #24]
		TXCarrierEnabled = 0;
 80046b8:	701c      	strb	r4, [r3, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046ba:	f004 fa8d 	bl	8008bd8 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 80046be:	4622      	mov	r2, r4
 80046c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046c4:	48a6      	ldr	r0, [pc, #664]	; (8004960 <UserInput+0x598>)
 80046c6:	f004 fbc7 	bl	8008e58 <HAL_GPIO_WritePin>
		WSPRBeaconState = NO_FIX;
 80046ca:	702c      	strb	r4, [r5, #0]
 80046cc:	e684      	b.n	80043d8 <UserInput+0x10>
			sprintf((char*)UartTXString, "\e[4;1H   \r");
 80046ce:	4aa8      	ldr	r2, [pc, #672]	; (8004970 <UserInput+0x5a8>)
 80046d0:	4ba8      	ldr	r3, [pc, #672]	; (8004974 <UserInput+0x5ac>)
 80046d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80046d4:	0c14      	lsrs	r4, r2, #16
 80046d6:	c303      	stmia	r3!, {r0, r1}
 80046d8:	f823 2b02 	strh.w	r2, [r3], #2
 80046dc:	701c      	strb	r4, [r3, #0]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 80046de:	48a5      	ldr	r0, [pc, #660]	; (8004974 <UserInput+0x5ac>)
 80046e0:	f7fb fdfe 	bl	80002e0 <strlen>
 80046e4:	4601      	mov	r1, r0
 80046e6:	48a3      	ldr	r0, [pc, #652]	; (8004974 <UserInput+0x5ac>)
 80046e8:	b289      	uxth	r1, r1
 80046ea:	f00a ff07 	bl	800f4fc <CDC_Transmit_FS>
	HAL_Delay(1);
 80046ee:	2001      	movs	r0, #1
}
 80046f0:	b00d      	add	sp, #52	; 0x34
 80046f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(1);
 80046f6:	f001 bb0b 	b.w	8005d10 <HAL_Delay>
			SetBW((Bwidth)Wide);  break;
 80046fa:	2001      	movs	r0, #1
 80046fc:	f7fc fc14 	bl	8000f28 <SetBW>
 8004700:	e6fe      	b.n	8004500 <UserInput+0x138>
			volume += 0.1;
 8004702:	4b9d      	ldr	r3, [pc, #628]	; (8004978 <UserInput+0x5b0>)
			if (volume > 1.0)
 8004704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			volume += 0.1;
 8004708:	ed93 7a00 	vldr	s14, [r3]
 800470c:	ed9f 5b8e 	vldr	d5, [pc, #568]	; 8004948 <UserInput+0x580>
 8004710:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004714:	ee37 7b05 	vadd.f64	d7, d7, d5
 8004718:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800471c:	fec7 7ae6 	vminnm.f32	s15, s15, s13
 8004720:	edc3 7a00 	vstr	s15, [r3]
 8004724:	e6ec      	b.n	8004500 <UserInput+0x138>
			volume -= 0.1;
 8004726:	4b94      	ldr	r3, [pc, #592]	; (8004978 <UserInput+0x5b0>)
			if (volume < 0)
 8004728:	2200      	movs	r2, #0
			volume -= 0.1;
 800472a:	ed93 7a00 	vldr	s14, [r3]
 800472e:	ed9f 6b86 	vldr	d6, [pc, #536]	; 8004948 <UserInput+0x580>
 8004732:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004736:	ee37 7b46 	vsub.f64	d7, d7, d6
 800473a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (volume < 0)
 800473e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			volume -= 0.1;
 8004746:	bf54      	ite	pl
 8004748:	ed83 7a00 	vstrpl	s14, [r3]
				volume = 0;
 800474c:	601a      	strmi	r2, [r3, #0]
 800474e:	e6d7      	b.n	8004500 <UserInput+0x138>
			FminusClicked(2); break;
 8004750:	2002      	movs	r0, #2
 8004752:	f7fc fe21 	bl	8001398 <FminusClicked>
 8004756:	e6d3      	b.n	8004500 <UserInput+0x138>
			FplusClicked(2); break;
 8004758:	2002      	movs	r0, #2
 800475a:	f7fc fdb3 	bl	80012c4 <FplusClicked>
 800475e:	e6cf      	b.n	8004500 <UserInput+0x138>
			SetFstep(5);  break;
 8004760:	2005      	movs	r0, #5
 8004762:	f7fc fd8d 	bl	8001280 <SetFstep>
 8004766:	e6cb      	b.n	8004500 <UserInput+0x138>
			SetFstep(4);  break;
 8004768:	2004      	movs	r0, #4
 800476a:	f7fc fd89 	bl	8001280 <SetFstep>
 800476e:	e6c7      	b.n	8004500 <UserInput+0x138>
			SetFstep(3);  break;
 8004770:	2003      	movs	r0, #3
 8004772:	f7fc fd85 	bl	8001280 <SetFstep>
 8004776:	e6c3      	b.n	8004500 <UserInput+0x138>
			SetFstep(2);  break;
 8004778:	2002      	movs	r0, #2
 800477a:	f7fc fd81 	bl	8001280 <SetFstep>
 800477e:	e6bf      	b.n	8004500 <UserInput+0x138>
			SetFstep(1); break;
 8004780:	2001      	movs	r0, #1
 8004782:	f7fc fd7d 	bl	8001280 <SetFstep>
 8004786:	e6bb      	b.n	8004500 <UserInput+0x138>
			SetFstep(0); break;
 8004788:	2000      	movs	r0, #0
 800478a:	f7fc fd79 	bl	8001280 <SetFstep>
 800478e:	e6b7      	b.n	8004500 <UserInput+0x138>
			SetFstep(9); break;
 8004790:	2009      	movs	r0, #9
 8004792:	f7fc fd75 	bl	8001280 <SetFstep>
 8004796:	e6b3      	b.n	8004500 <UserInput+0x138>
			DisableDisplay = 1; break;
 8004798:	4c78      	ldr	r4, [pc, #480]	; (800497c <UserInput+0x5b4>)
 800479a:	2301      	movs	r3, #1
 800479c:	7023      	strb	r3, [r4, #0]
	if (!DisableDisplay)
 800479e:	e627      	b.n	80043f0 <UserInput+0x28>
			SendCWMessage(0); break;
 80047a0:	2000      	movs	r0, #0
 80047a2:	f7fc fa01 	bl	8000ba8 <SendCWMessage>
 80047a6:	e6ab      	b.n	8004500 <UserInput+0x138>
			SendCWMessage(1); break;
 80047a8:	2001      	movs	r0, #1
 80047aa:	f7fc f9fd 	bl	8000ba8 <SendCWMessage>
 80047ae:	e6a7      	b.n	8004500 <UserInput+0x138>
			TxPowerOut = LOW_POWER_OUT;
 80047b0:	4b73      	ldr	r3, [pc, #460]	; (8004980 <UserInput+0x5b8>)
 80047b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047b6:	601a      	str	r2, [r3, #0]
			break;
 80047b8:	e6a2      	b.n	8004500 <UserInput+0x138>
			TxPowerOut = MID_POWER_OUT;
 80047ba:	4b71      	ldr	r3, [pc, #452]	; (8004980 <UserInput+0x5b8>)
 80047bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047c0:	601a      	str	r2, [r3, #0]
			break;
 80047c2:	e69d      	b.n	8004500 <UserInput+0x138>
			TxPowerOut = MAX_POWER_OUT;
 80047c4:	4b6e      	ldr	r3, [pc, #440]	; (8004980 <UserInput+0x5b8>)
 80047c6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80047ca:	601a      	str	r2, [r3, #0]
			break;
 80047cc:	e698      	b.n	8004500 <UserInput+0x138>
			if (ShowWF)
 80047ce:	4b6d      	ldr	r3, [pc, #436]	; (8004984 <UserInput+0x5bc>)
 80047d0:	781a      	ldrb	r2, [r3, #0]
 80047d2:	2a00      	cmp	r2, #0
 80047d4:	f000 8127 	beq.w	8004a26 <UserInput+0x65e>
				ShowWF=0;
 80047d8:	2200      	movs	r2, #0
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	e690      	b.n	8004500 <UserInput+0x138>
			SetWSPRPLLCoeff((double)LOfreq, FracDivCoeff, FracPWMCoeff);
 80047de:	4b6a      	ldr	r3, [pc, #424]	; (8004988 <UserInput+0x5c0>)
 80047e0:	496a      	ldr	r1, [pc, #424]	; (800498c <UserInput+0x5c4>)
 80047e2:	ed93 0a00 	vldr	s0, [r3]
 80047e6:	486a      	ldr	r0, [pc, #424]	; (8004990 <UserInput+0x5c8>)
 80047e8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80047ec:	f7ff f9c0 	bl	8003b70 <SetWSPRPLLCoeff>
			TransmittingWSPR = 1;
 80047f0:	4b68      	ldr	r3, [pc, #416]	; (8004994 <UserInput+0x5cc>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	701a      	strb	r2, [r3, #0]
			SendWSPR();
 80047f6:	f7fe ff23 	bl	8003640 <SendWSPR>
			break;
 80047fa:	e681      	b.n	8004500 <UserInput+0x138>
			SetMode((Mode)LSB); break;
 80047fc:	2001      	movs	r0, #1
 80047fe:	f7fc fd07 	bl	8001210 <SetMode>
 8004802:	e67d      	b.n	8004500 <UserInput+0x138>
			SetBW((Bwidth)Narrow);  break;
 8004804:	2000      	movs	r0, #0
 8004806:	f7fc fb8f 	bl	8000f28 <SetBW>
 800480a:	e679      	b.n	8004500 <UserInput+0x138>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800480c:	2400      	movs	r4, #0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800480e:	2302      	movs	r3, #2
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004810:	f44f 7600 	mov.w	r6, #512	; 0x200
 8004814:	2701      	movs	r7, #1
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004816:	a906      	add	r1, sp, #24
 8004818:	484f      	ldr	r0, [pc, #316]	; (8004958 <UserInput+0x590>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800481a:	9308      	str	r3, [sp, #32]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800481c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004820:	e9cd 6706 	strd	r6, r7, [sp, #24]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004824:	f004 f9d8 	bl	8008bd8 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8004828:	4622      	mov	r2, r4
 800482a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800482e:	484b      	ldr	r0, [pc, #300]	; (800495c <UserInput+0x594>)
 8004830:	f004 fb12 	bl	8008e58 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8004834:	4622      	mov	r2, r4
 8004836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800483a:	4849      	ldr	r0, [pc, #292]	; (8004960 <UserInput+0x598>)
 800483c:	f004 fb0c 	bl	8008e58 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8004840:	4b48      	ldr	r3, [pc, #288]	; (8004964 <UserInput+0x59c>)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8004842:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004846:	4845      	ldr	r0, [pc, #276]	; (800495c <UserInput+0x594>)
 8004848:	2201      	movs	r2, #1
		TransmissionEnabled = 0;
 800484a:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800484c:	940a      	str	r4, [sp, #40]	; 0x28
 800484e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004852:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8004856:	f004 faff 	bl	8008e58 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 800485a:	4623      	mov	r3, r4
 800485c:	4622      	mov	r2, r4
 800485e:	2110      	movs	r1, #16
 8004860:	4841      	ldr	r0, [pc, #260]	; (8004968 <UserInput+0x5a0>)
 8004862:	f002 fe01 	bl	8007468 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004866:	2202      	movs	r2, #2
 8004868:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800486a:	a906      	add	r1, sp, #24
 800486c:	483a      	ldr	r0, [pc, #232]	; (8004958 <UserInput+0x590>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800486e:	e9cd 2308 	strd	r2, r3, [sp, #32]
		TXCarrierEnabled = 0;
 8004872:	4b3e      	ldr	r3, [pc, #248]	; (800496c <UserInput+0x5a4>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004874:	e9cd 6706 	strd	r6, r7, [sp, #24]
		TXCarrierEnabled = 0;
 8004878:	701c      	strb	r4, [r3, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800487a:	f004 f9ad 	bl	8008bd8 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 800487e:	4622      	mov	r2, r4
 8004880:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004884:	4836      	ldr	r0, [pc, #216]	; (8004960 <UserInput+0x598>)
 8004886:	f004 fae7 	bl	8008e58 <HAL_GPIO_WritePin>
}
 800488a:	e639      	b.n	8004500 <UserInput+0x138>
			SetAGC((Agctype)Slow);  break;
 800488c:	2001      	movs	r0, #1
 800488e:	f7fc fbad 	bl	8000fec <SetAGC>
 8004892:	e635      	b.n	8004500 <UserInput+0x138>
		if (LastTXFreq != LOfreq)
 8004894:	4d3c      	ldr	r5, [pc, #240]	; (8004988 <UserInput+0x5c0>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004896:	2300      	movs	r3, #0
		if (LastTXFreq != LOfreq)
 8004898:	4c3f      	ldr	r4, [pc, #252]	; (8004998 <UserInput+0x5d0>)
		TransmissionEnabled = 1;
 800489a:	2101      	movs	r1, #1
		if (LastTXFreq != LOfreq)
 800489c:	ed95 0a00 	vldr	s0, [r5]
 80048a0:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 80048a4:	4a2f      	ldr	r2, [pc, #188]	; (8004964 <UserInput+0x59c>)
		if (LastTXFreq != LOfreq)
 80048a6:	eef4 7a40 	vcmp.f32	s15, s0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048aa:	930a      	str	r3, [sp, #40]	; 0x28
		TransmissionEnabled = 1;
 80048ac:	7011      	strb	r1, [r2, #0]
		if (LastTXFreq != LOfreq)
 80048ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b2:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80048b6:	e9cd 3308 	strd	r3, r3, [sp, #32]
		if (LastTXFreq != LOfreq)
 80048ba:	f040 80b7 	bne.w	8004a2c <UserInput+0x664>
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80048be:	2400      	movs	r4, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80048c0:	f44f 7600 	mov.w	r6, #512	; 0x200
 80048c4:	2702      	movs	r7, #2
 80048c6:	f04f 0800 	mov.w	r8, #0
 80048ca:	f04f 0903 	mov.w	r9, #3
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048ce:	a906      	add	r1, sp, #24
 80048d0:	4821      	ldr	r0, [pc, #132]	; (8004958 <UserInput+0x590>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80048d2:	940a      	str	r4, [sp, #40]	; 0x28
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80048d4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80048d8:	e9cd 8908 	strd	r8, r9, [sp, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048dc:	f004 f97c 	bl	8008bd8 <HAL_GPIO_Init>
		RELAY_TX_ON;
 80048e0:	2201      	movs	r2, #1
 80048e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048e6:	481d      	ldr	r0, [pc, #116]	; (800495c <UserInput+0x594>)
 80048e8:	f004 fab6 	bl	8008e58 <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 80048ec:	2201      	movs	r2, #1
 80048ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048f2:	481b      	ldr	r0, [pc, #108]	; (8004960 <UserInput+0x598>)
 80048f4:	f004 fab0 	bl	8008e58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80048f8:	4622      	mov	r2, r4
 80048fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048fe:	4817      	ldr	r0, [pc, #92]	; (800495c <UserInput+0x594>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004900:	940a      	str	r4, [sp, #40]	; 0x28
 8004902:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004906:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800490a:	f004 faa5 	bl	8008e58 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 800490e:	4b1c      	ldr	r3, [pc, #112]	; (8004980 <UserInput+0x5b8>)
 8004910:	4622      	mov	r2, r4
 8004912:	2110      	movs	r1, #16
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4814      	ldr	r0, [pc, #80]	; (8004968 <UserInput+0x5a0>)
 8004918:	f002 fda6 	bl	8007468 <HAL_DAC_SetValue>
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800491c:	a906      	add	r1, sp, #24
 800491e:	480e      	ldr	r0, [pc, #56]	; (8004958 <UserInput+0x590>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004920:	940a      	str	r4, [sp, #40]	; 0x28
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004922:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004926:	e9cd 8908 	strd	r8, r9, [sp, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800492a:	f004 f955 	bl	8008bd8 <HAL_GPIO_Init>
		TXCarrierEnabled = 1;
 800492e:	2201      	movs	r2, #1
 8004930:	4b0e      	ldr	r3, [pc, #56]	; (800496c <UserInput+0x5a4>)
		LED_GREEN_ON;
 8004932:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004936:	480a      	ldr	r0, [pc, #40]	; (8004960 <UserInput+0x598>)
		TXCarrierEnabled = 1;
 8004938:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 800493a:	f004 fa8d 	bl	8008e58 <HAL_GPIO_WritePin>
}
 800493e:	e5df      	b.n	8004500 <UserInput+0x138>
			SetMode((Mode)USB); break;
 8004940:	2002      	movs	r0, #2
 8004942:	f7fc fc65 	bl	8001210 <SetMode>
 8004946:	e5db      	b.n	8004500 <UserInput+0x138>
 8004948:	9999999a 	.word	0x9999999a
 800494c:	3fb99999 	.word	0x3fb99999
 8004950:	2400b43c 	.word	0x2400b43c
 8004954:	24008420 	.word	0x24008420
 8004958:	58020800 	.word	0x58020800
 800495c:	58020c00 	.word	0x58020c00
 8004960:	58020400 	.word	0x58020400
 8004964:	240072e8 	.word	0x240072e8
 8004968:	2400b508 	.word	0x2400b508
 800496c:	240072dc 	.word	0x240072dc
 8004970:	0801b238 	.word	0x0801b238
 8004974:	240073f8 	.word	0x240073f8
 8004978:	2400c9d0 	.word	0x2400c9d0
 800497c:	24002030 	.word	0x24002030
 8004980:	240072ec 	.word	0x240072ec
 8004984:	240072a8 	.word	0x240072a8
 8004988:	24007258 	.word	0x24007258
 800498c:	24006238 	.word	0x24006238
 8004990:	2400622c 	.word	0x2400622c
 8004994:	240072e9 	.word	0x240072e9
 8004998:	24007264 	.word	0x24007264
	__HAL_RCC_PLL2FRACN_DISABLE();
 800499c:	4a27      	ldr	r2, [pc, #156]	; (8004a3c <UserInput+0x674>)
	for (i=0; i< 50; i++)
 800499e:	2100      	movs	r1, #0
	__HAL_RCC_PLL2FRACN_DISABLE();
 80049a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80049a2:	f023 0310 	bic.w	r3, r3, #16
 80049a6:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 80049a8:	9106      	str	r1, [sp, #24]
 80049aa:	9b06      	ldr	r3, [sp, #24]
 80049ac:	2b31      	cmp	r3, #49	; 0x31
 80049ae:	d80b      	bhi.n	80049c8 <UserInput+0x600>
		i++;
 80049b0:	9b06      	ldr	r3, [sp, #24]
 80049b2:	3301      	adds	r3, #1
 80049b4:	9306      	str	r3, [sp, #24]
		i--;
 80049b6:	9b06      	ldr	r3, [sp, #24]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	9306      	str	r3, [sp, #24]
	for (i=0; i< 50; i++)
 80049bc:	9b06      	ldr	r3, [sp, #24]
 80049be:	3301      	adds	r3, #1
 80049c0:	9306      	str	r3, [sp, #24]
 80049c2:	9b06      	ldr	r3, [sp, #24]
 80049c4:	2b31      	cmp	r3, #49	; 0x31
 80049c6:	d9f3      	bls.n	80049b0 <UserInput+0x5e8>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 80049c8:	4a1c      	ldr	r2, [pc, #112]	; (8004a3c <UserInput+0x674>)
 80049ca:	4b1d      	ldr	r3, [pc, #116]	; (8004a40 <UserInput+0x678>)
 80049cc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80049ce:	400b      	ands	r3, r1
 80049d0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80049d4:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 80049d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80049d8:	f043 0310 	orr.w	r3, r3, #16
 80049dc:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80049de:	e58f      	b.n	8004500 <UserInput+0x138>
			DisableDisplay = 0; break;
 80049e0:	4c18      	ldr	r4, [pc, #96]	; (8004a44 <UserInput+0x67c>)
 80049e2:	2300      	movs	r3, #0
 80049e4:	7023      	strb	r3, [r4, #0]
	if (!DisableDisplay)
 80049e6:	e590      	b.n	800450a <UserInput+0x142>
			SetMode((Mode)CW); break;
 80049e8:	2003      	movs	r0, #3
 80049ea:	f7fc fc11 	bl	8001210 <SetMode>
 80049ee:	e587      	b.n	8004500 <UserInput+0x138>
			SetAGC((Agctype)Fast);  break;
 80049f0:	2000      	movs	r0, #0
 80049f2:	f7fc fafb 	bl	8000fec <SetAGC>
 80049f6:	e583      	b.n	8004500 <UserInput+0x138>
			keyer_speed -= 1;
 80049f8:	4b13      	ldr	r3, [pc, #76]	; (8004a48 <UserInput+0x680>)
 80049fa:	6818      	ldr	r0, [r3, #0]
 80049fc:	3801      	subs	r0, #1
			if (keyer_speed < 3)
 80049fe:	2802      	cmp	r0, #2
 8004a00:	dc0f      	bgt.n	8004a22 <UserInput+0x65a>
				keyer_speed = 3;
 8004a02:	2203      	movs	r2, #3
 8004a04:	4610      	mov	r0, r2
 8004a06:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 8004a08:	e578      	b.n	80044fc <UserInput+0x134>
			uwTick = SystemSeconds = SystemMinutes = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	480f      	ldr	r0, [pc, #60]	; (8004a4c <UserInput+0x684>)
 8004a0e:	4910      	ldr	r1, [pc, #64]	; (8004a50 <UserInput+0x688>)
 8004a10:	4a10      	ldr	r2, [pc, #64]	; (8004a54 <UserInput+0x68c>)
 8004a12:	6003      	str	r3, [r0, #0]
 8004a14:	600b      	str	r3, [r1, #0]
 8004a16:	6013      	str	r3, [r2, #0]
			break;
 8004a18:	e572      	b.n	8004500 <UserInput+0x138>
			SetMode((Mode)AM); break;
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	f7fc fbf8 	bl	8001210 <SetMode>
 8004a20:	e56e      	b.n	8004500 <UserInput+0x138>
			keyer_speed += 1;
 8004a22:	6018      	str	r0, [r3, #0]
 8004a24:	e56a      	b.n	80044fc <UserInput+0x134>
				ShowWF=1;
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	e569      	b.n	8004500 <UserInput+0x138>
			SetTXPLL(LOfreq);
 8004a2c:	f7ff fa08 	bl	8003e40 <SetTXPLL>
			LastTXFreq = LOfreq;
 8004a30:	682b      	ldr	r3, [r5, #0]
 8004a32:	6023      	str	r3, [r4, #0]
 8004a34:	e743      	b.n	80048be <UserInput+0x4f6>
			Error_Handler();
 8004a36:	f7ff fbf9 	bl	800422c <Error_Handler>
 8004a3a:	bf00      	nop
 8004a3c:	58024400 	.word	0x58024400
 8004a40:	ffff0007 	.word	0xffff0007
 8004a44:	24002030 	.word	0x24002030
 8004a48:	2400b810 	.word	0x2400b810
 8004a4c:	240072d4 	.word	0x240072d4
 8004a50:	240072d8 	.word	0x240072d8
 8004a54:	2400c9dc 	.word	0x2400c9dc

08004a58 <MX_TIM6_Init_Custom_Rate>:
{
 8004a58:	b510      	push	{r4, lr}
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a5a:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 8004a5c:	4c0f      	ldr	r4, [pc, #60]	; (8004a9c <MX_TIM6_Init_Custom_Rate+0x44>)
 8004a5e:	4810      	ldr	r0, [pc, #64]	; (8004aa0 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 8004a60:	b084      	sub	sp, #16
	htim6.Init.Period = 9599; //
 8004a62:	f242 517f 	movw	r1, #9599	; 0x257f
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a66:	2280      	movs	r2, #128	; 0x80
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a68:	9301      	str	r3, [sp, #4]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a6a:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 8004a6c:	e9c4 0300 	strd	r0, r3, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004a70:	4620      	mov	r0, r4
	htim6.Init.Period = 9599; //
 8004a72:	e9c4 3102 	strd	r3, r1, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a76:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004a7a:	f007 fbcb 	bl	800c214 <HAL_TIM_Base_Init>
 8004a7e:	b950      	cbnz	r0, 8004a96 <MX_TIM6_Init_Custom_Rate+0x3e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004a80:	4603      	mov	r3, r0
 8004a82:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004a84:	a901      	add	r1, sp, #4
 8004a86:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a88:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004a8a:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004a8c:	f007 fffc 	bl	800ca88 <HAL_TIMEx_MasterConfigSynchronization>
 8004a90:	b908      	cbnz	r0, 8004a96 <MX_TIM6_Init_Custom_Rate+0x3e>
}
 8004a92:	b004      	add	sp, #16
 8004a94:	bd10      	pop	{r4, pc}
		Error_Handler();
 8004a96:	f7ff fbc9 	bl	800422c <Error_Handler>
 8004a9a:	bf00      	nop
 8004a9c:	2400b6e0 	.word	0x2400b6e0
 8004aa0:	40001000 	.word	0x40001000
 8004aa4:	00000000 	.word	0x00000000

08004aa8 <main>:
{
 8004aa8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8004aac:	b0cf      	sub	sp, #316	; 0x13c
  HAL_Init();
 8004aae:	f001 f8ed 	bl	8005c8c <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8004ab2:	4ad5      	ldr	r2, [pc, #852]	; (8004e08 <main+0x360>)
 8004ab4:	6953      	ldr	r3, [r2, #20]
 8004ab6:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8004aba:	d111      	bne.n	8004ae0 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8004abc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004ac0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004ac4:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004ac8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004acc:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004ad0:	6953      	ldr	r3, [r2, #20]
 8004ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ad8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004adc:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae0:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ae2:	4dca      	ldr	r5, [pc, #808]	; (8004e0c <main+0x364>)
	SystemClock_Config_For_OC();
 8004ae4:	f7ff fbbc 	bl	8004260 <SystemClock_Config_For_OC>
	HAL_Delay(20);  //needed for USB setup. USB sometimes (and almost always on an Android phone) does not initialize
 8004ae8:	2014      	movs	r0, #20
 8004aea:	f001 f911 	bl	8005d10 <HAL_Delay>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aee:	9448      	str	r4, [sp, #288]	; 0x120
  HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 8004af0:	4622      	mov	r2, r4
 8004af2:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8004af6:	48c6      	ldr	r0, [pc, #792]	; (8004e10 <main+0x368>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004af8:	2601      	movs	r6, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8004afa:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004afe:	f04f 0a08 	mov.w	sl, #8
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004b02:	f04f 0904 	mov.w	r9, #4
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004b06:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b0a:	e9cd 4444 	strd	r4, r4, [sp, #272]	; 0x110
 8004b0e:	e9cd 4446 	strd	r4, r4, [sp, #280]	; 0x118
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b12:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004b16:	f043 0304 	orr.w	r3, r3, #4
 8004b1a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004b1e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	9305      	str	r3, [sp, #20]
 8004b28:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b2a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b32:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004b36:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3e:	9306      	str	r3, [sp, #24]
 8004b40:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b42:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004b46:	f043 0301 	orr.w	r3, r3, #1
 8004b4a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004b4e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	9307      	str	r3, [sp, #28]
 8004b58:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b5a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004b5e:	f043 0302 	orr.w	r3, r3, #2
 8004b62:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004b66:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	9308      	str	r3, [sp, #32]
 8004b70:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b72:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004b76:	f043 0308 	orr.w	r3, r3, #8
 8004b7a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8004b7e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	9309      	str	r3, [sp, #36]	; 0x24
 8004b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 8004b8a:	f004 f965 	bl	8008e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RXTX_Pin|TX_ENA_Pin, GPIO_PIN_RESET);
 8004b8e:	4622      	mov	r2, r4
 8004b90:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8004b94:	489f      	ldr	r0, [pc, #636]	; (8004e14 <main+0x36c>)
 8004b96:	f004 f95f 	bl	8008e58 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = IN_SW01_Pin;
 8004b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b9e:	2300      	movs	r3, #0
  HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 8004ba0:	a944      	add	r1, sp, #272	; 0x110
 8004ba2:	489d      	ldr	r0, [pc, #628]	; (8004e18 <main+0x370>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ba4:	9646      	str	r6, [sp, #280]	; 0x118
  GPIO_InitStruct.Pin = IN_SW01_Pin;
 8004ba6:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
  HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 8004baa:	f004 f815 	bl	8008bd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SwInt1_Pin;
 8004bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004bb2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8004bb6:	a944      	add	r1, sp, #272	; 0x110
 8004bb8:	4897      	ldr	r0, [pc, #604]	; (8004e18 <main+0x370>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bba:	9646      	str	r6, [sp, #280]	; 0x118
  GPIO_InitStruct.Pin = SwInt1_Pin;
 8004bbc:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8004bc0:	f004 f80a 	bl	8008bd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 8004bc4:	22c0      	movs	r2, #192	; 0xc0
 8004bc6:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bc8:	a944      	add	r1, sp, #272	; 0x110
 8004bca:	4894      	ldr	r0, [pc, #592]	; (8004e1c <main+0x374>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bcc:	9646      	str	r6, [sp, #280]	; 0x118
  GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 8004bce:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd2:	f004 f801 	bl	8008bd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 8004bd6:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8004bda:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bdc:	a944      	add	r1, sp, #272	; 0x110
 8004bde:	488c      	ldr	r0, [pc, #560]	; (8004e10 <main+0x368>)
  GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 8004be0:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
 8004be4:	2200      	movs	r2, #0
 8004be6:	2300      	movs	r3, #0
 8004be8:	e9cd 2346 	strd	r2, r3, [sp, #280]	; 0x118
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bec:	f003 fff4 	bl	8008bd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 8004bf0:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8004bf4:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bf6:	a944      	add	r1, sp, #272	; 0x110
 8004bf8:	4886      	ldr	r0, [pc, #536]	; (8004e14 <main+0x36c>)
  GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 8004bfa:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
 8004bfe:	2202      	movs	r2, #2
 8004c00:	2300      	movs	r3, #0
 8004c02:	e9cd 2346 	strd	r2, r3, [sp, #280]	; 0x118
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c06:	f003 ffe7 	bl	8008bd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENC_BUTTON_Pin;
 8004c0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c0e:	2300      	movs	r3, #0
  HAL_GPIO_Init(ENC_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004c10:	a944      	add	r1, sp, #272	; 0x110
 8004c12:	4880      	ldr	r0, [pc, #512]	; (8004e14 <main+0x36c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c14:	9646      	str	r6, [sp, #280]	; 0x118
  GPIO_InitStruct.Pin = ENC_BUTTON_Pin;
 8004c16:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
  HAL_GPIO_Init(ENC_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004c1a:	f003 ffdd 	bl	8008bd8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c22:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c24:	a944      	add	r1, sp, #272	; 0x110
 8004c26:	487c      	ldr	r0, [pc, #496]	; (8004e18 <main+0x370>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004c28:	9448      	str	r4, [sp, #288]	; 0x120
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c2a:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
 8004c2e:	2303      	movs	r3, #3
 8004c30:	2200      	movs	r2, #0
 8004c32:	e9cd 2346 	strd	r2, r3, [sp, #280]	; 0x118
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c36:	f003 ffcf 	bl	8008bd8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	2104      	movs	r1, #4
 8004c3e:	2028      	movs	r0, #40	; 0x28
 8004c40:	f002 fada 	bl	80071f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004c44:	2028      	movs	r0, #40	; 0x28
 8004c46:	f002 fb15 	bl	8007274 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c4a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004c4e:	4622      	mov	r2, r4
 8004c50:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c52:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004c54:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c56:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 8004c5a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  hadc1.Instance = ADC1;
 8004c5e:	4d70      	ldr	r5, [pc, #448]	; (8004e20 <main+0x378>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c60:	4033      	ands	r3, r6
 8004c62:	9304      	str	r3, [sp, #16]
 8004c64:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004c66:	f002 fac7 	bl	80071f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004c6a:	200b      	movs	r0, #11
 8004c6c:	f002 fb02 	bl	8007274 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8004c70:	4622      	mov	r2, r4
 8004c72:	2102      	movs	r1, #2
 8004c74:	200c      	movs	r0, #12
 8004c76:	f002 fabf 	bl	80071f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004c7a:	200c      	movs	r0, #12
 8004c7c:	f002 fafa 	bl	8007274 <HAL_NVIC_EnableIRQ>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8004c80:	4b68      	ldr	r3, [pc, #416]	; (8004e24 <main+0x37c>)
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8004c82:	9424      	str	r4, [sp, #144]	; 0x90
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004c84:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 8004c86:	9432      	str	r4, [sp, #200]	; 0xc8
  ADC_MultiModeTypeDef multimode = {0};
 8004c88:	940c      	str	r4, [sp, #48]	; 0x30
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8004c8a:	9429      	str	r4, [sp, #164]	; 0xa4
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004c8c:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004c8e:	772c      	strb	r4, [r5, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8004c90:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8004c92:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Init.NbrOfConversion = 1;
 8004c96:	61ae      	str	r6, [r5, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004c98:	f8c5 a008 	str.w	sl, [r5, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004c9c:	f8c5 9010 	str.w	r9, [r5, #16]
  ADC_MultiModeTypeDef multimode = {0};
 8004ca0:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8004ca4:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
 8004ca8:	e9cd 4427 	strd	r4, r4, [sp, #156]	; 0x9c
  ADC_ChannelConfTypeDef sConfig = {0};
 8004cac:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
 8004cb0:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
 8004cb4:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004cb8:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004cbc:	f44f 7480 	mov.w	r4, #256	; 0x100
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8004cc0:	e9c5 3b00 	strd	r3, fp, [r5]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004cc4:	2303      	movs	r3, #3
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004cc6:	82ac      	strh	r4, [r5, #20]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004cc8:	e9c5 380b 	strd	r3, r8, [r5, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004ccc:	f001 ffa4 	bl	8006c18 <HAL_ADC_Init>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	f040 8310 	bne.w	80052f6 <main+0x84e>
  multimode.Mode = ADC_DUALMODE_INTERL;
 8004cd6:	2207      	movs	r2, #7
 8004cd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004cdc:	a90a      	add	r1, sp, #40	; 0x28
 8004cde:	4628      	mov	r0, r5
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 8004ce0:	940c      	str	r4, [sp, #48]	; 0x30
  multimode.Mode = ADC_DUALMODE_INTERL;
 8004ce2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004ce6:	f002 fa0d 	bl	8007104 <HAL_ADCEx_MultiModeConfigChannel>
 8004cea:	2800      	cmp	r0, #0
 8004cec:	f040 8303 	bne.w	80052f6 <main+0x84e>
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8004cf0:	4b4d      	ldr	r3, [pc, #308]	; (8004e28 <main+0x380>)
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8004cf2:	a924      	add	r1, sp, #144	; 0x90
 8004cf4:	4628      	mov	r0, r5
  AnalogWDGConfig.ITMode = ENABLE;
 8004cf6:	f88d 609c 	strb.w	r6, [sp, #156]	; 0x9c
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8004cfa:	9326      	str	r3, [sp, #152]	; 0x98
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8004cfc:	ed9f cb38 	vldr	d12, [pc, #224]	; 8004de0 <main+0x338>
  AnalogWDGConfig.HighThreshold = 4094;
 8004d00:	ed9f bb39 	vldr	d11, [pc, #228]	; 8004de8 <main+0x340>
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8004d04:	ed8d cb24 	vstr	d12, [sp, #144]	; 0x90
  AnalogWDGConfig.HighThreshold = 4094;
 8004d08:	ed8d bb28 	vstr	d11, [sp, #160]	; 0xa0
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8004d0c:	f001 fc00 	bl	8006510 <HAL_ADC_AnalogWDGConfig>
 8004d10:	2800      	cmp	r0, #0
 8004d12:	f040 82f0 	bne.w	80052f6 <main+0x84e>
  sConfig.OffsetSignedSaturation = DISABLE;
 8004d16:	f88d 00e1 	strb.w	r0, [sp, #225]	; 0xe1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d1a:	a932      	add	r1, sp, #200	; 0xc8
 8004d1c:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_5;
 8004d1e:	ed9f ab34 	vldr	d10, [pc, #208]	; 8004df0 <main+0x348>
 8004d22:	ed9f 9b35 	vldr	d9, [pc, #212]	; 8004df8 <main+0x350>
 8004d26:	ed9f 8b36 	vldr	d8, [pc, #216]	; 8004e00 <main+0x358>
 8004d2a:	ed8d ab32 	vstr	d10, [sp, #200]	; 0xc8
 8004d2e:	ed8d 9b34 	vstr	d9, [sp, #208]	; 0xd0
 8004d32:	ed8d 8b36 	vstr	d8, [sp, #216]	; 0xd8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d36:	f001 f9bb 	bl	80060b0 <HAL_ADC_ConfigChannel>
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	f040 82db 	bne.w	80052f6 <main+0x84e>
  hadc2.Instance = ADC2;
 8004d40:	4f3a      	ldr	r7, [pc, #232]	; (8004e2c <main+0x384>)
 8004d42:	4a3b      	ldr	r2, [pc, #236]	; (8004e30 <main+0x388>)
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8004d44:	901e      	str	r0, [sp, #120]	; 0x78
  ADC_ChannelConfTypeDef sConfig = {0};
 8004d46:	902a      	str	r0, [sp, #168]	; 0xa8
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8004d48:	9023      	str	r0, [sp, #140]	; 0x8c
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004d4a:	60f8      	str	r0, [r7, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004d4c:	7738      	strb	r0, [r7, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8004d4e:	62f8      	str	r0, [r7, #44]	; 0x2c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8004d50:	6378      	str	r0, [r7, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8004d52:	f887 0038 	strb.w	r0, [r7, #56]	; 0x38
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004d56:	82bc      	strh	r4, [r7, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004d58:	f8c7 9010 	str.w	r9, [r7, #16]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004d5c:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
  hadc2.Init.NbrOfConversion = 1;
 8004d60:	61be      	str	r6, [r7, #24]
  hadc2.Instance = ADC2;
 8004d62:	603a      	str	r2, [r7, #0]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8004d64:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
 8004d68:	e9cd 0021 	strd	r0, r0, [sp, #132]	; 0x84
  ADC_ChannelConfTypeDef sConfig = {0};
 8004d6c:	e9cd 002b 	strd	r0, r0, [sp, #172]	; 0xac
 8004d70:	e9cd 002d 	strd	r0, r0, [sp, #180]	; 0xb4
 8004d74:	e9cd 002f 	strd	r0, r0, [sp, #188]	; 0xbc
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004d78:	4638      	mov	r0, r7
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004d7a:	e9c7 ba01 	strd	fp, sl, [r7, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004d7e:	f001 ff4b 	bl	8006c18 <HAL_ADC_Init>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	f040 82b7 	bne.w	80052f6 <main+0x84e>
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8004d88:	4b27      	ldr	r3, [pc, #156]	; (8004e28 <main+0x380>)
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8004d8a:	a91e      	add	r1, sp, #120	; 0x78
 8004d8c:	4638      	mov	r0, r7
  AnalogWDGConfig.ITMode = ENABLE;
 8004d8e:	f88d 6084 	strb.w	r6, [sp, #132]	; 0x84
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8004d92:	9320      	str	r3, [sp, #128]	; 0x80
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8004d94:	ed8d cb1e 	vstr	d12, [sp, #120]	; 0x78
  AnalogWDGConfig.HighThreshold = 4094;
 8004d98:	ed8d bb22 	vstr	d11, [sp, #136]	; 0x88
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8004d9c:	f001 fbb8 	bl	8006510 <HAL_ADC_AnalogWDGConfig>
 8004da0:	4602      	mov	r2, r0
 8004da2:	2800      	cmp	r0, #0
 8004da4:	f040 82a7 	bne.w	80052f6 <main+0x84e>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004da8:	a92a      	add	r1, sp, #168	; 0xa8
 8004daa:	4638      	mov	r0, r7
  sConfig.OffsetSignedSaturation = DISABLE;
 8004dac:	f88d 20c1 	strb.w	r2, [sp, #193]	; 0xc1
  sConfig.Channel = ADC_CHANNEL_5;
 8004db0:	ed8d ab2a 	vstr	d10, [sp, #168]	; 0xa8
 8004db4:	ed8d 9b2c 	vstr	d9, [sp, #176]	; 0xb0
 8004db8:	ed8d 8b2e 	vstr	d8, [sp, #184]	; 0xb8
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004dbc:	f001 f978 	bl	80060b0 <HAL_ADC_ConfigChannel>
 8004dc0:	4601      	mov	r1, r0
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	f040 8297 	bne.w	80052f6 <main+0x84e>
  DAC_ChannelConfTypeDef sConfig = {0};
 8004dc8:	2224      	movs	r2, #36	; 0x24
  hdac1.Instance = DAC1;
 8004dca:	4c1a      	ldr	r4, [pc, #104]	; (8004e34 <main+0x38c>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8004dcc:	a844      	add	r0, sp, #272	; 0x110
 8004dce:	f00b ff7f 	bl	8010cd0 <memset>
  hdac1.Instance = DAC1;
 8004dd2:	4b19      	ldr	r3, [pc, #100]	; (8004e38 <main+0x390>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004dd4:	4620      	mov	r0, r4
  hdac1.Instance = DAC1;
 8004dd6:	6023      	str	r3, [r4, #0]
 8004dd8:	e030      	b.n	8004e3c <main+0x394>
 8004dda:	bf00      	nop
 8004ddc:	f3af 8000 	nop.w
 8004de0:	7dc00000 	.word	0x7dc00000
 8004de4:	00c00000 	.word	0x00c00000
 8004de8:	00000ffe 	.word	0x00000ffe
 8004dec:	00000001 	.word	0x00000001
 8004df0:	14f00020 	.word	0x14f00020
 8004df4:	00000006 	.word	0x00000006
 8004df8:	00000000 	.word	0x00000000
 8004dfc:	000007ff 	.word	0x000007ff
 8004e00:	00000004 	.word	0x00000004
 8004e04:	00000000 	.word	0x00000000
 8004e08:	e000ed00 	.word	0xe000ed00
 8004e0c:	58024400 	.word	0x58024400
 8004e10:	58020400 	.word	0x58020400
 8004e14:	58020c00 	.word	0x58020c00
 8004e18:	58020800 	.word	0x58020800
 8004e1c:	58020000 	.word	0x58020000
 8004e20:	2400b43c 	.word	0x2400b43c
 8004e24:	40022000 	.word	0x40022000
 8004e28:	14f00020 	.word	0x14f00020
 8004e2c:	2400b4a0 	.word	0x2400b4a0
 8004e30:	40022100 	.word	0x40022100
 8004e34:	2400b508 	.word	0x2400b508
 8004e38:	40007400 	.word	0x40007400
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004e3c:	f002 fa3e 	bl	80072bc <HAL_DAC_Init>
 8004e40:	4602      	mov	r2, r0
 8004e42:	2800      	cmp	r0, #0
 8004e44:	f040 8257 	bne.w	80052f6 <main+0x84e>
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004e48:	2116      	movs	r1, #22
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004e4a:	9048      	str	r0, [sp, #288]	; 0x120
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
 8004e52:	2000      	movs	r0, #0
 8004e54:	2101      	movs	r1, #1
 8004e56:	e9cd 0146 	strd	r0, r1, [sp, #280]	; 0x118
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004e5a:	a944      	add	r1, sp, #272	; 0x110
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f002 fb6d 	bl	800753c <HAL_DAC_ConfigChannel>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2800      	cmp	r0, #0
 8004e66:	f040 8246 	bne.w	80052f6 <main+0x84e>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004e6a:	2210      	movs	r2, #16
 8004e6c:	a944      	add	r1, sp, #272	; 0x110
 8004e6e:	4620      	mov	r0, r4
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004e70:	9345      	str	r3, [sp, #276]	; 0x114
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004e72:	f002 fb63 	bl	800753c <HAL_DAC_ConfigChannel>
 8004e76:	2800      	cmp	r0, #0
 8004e78:	f040 823d 	bne.w	80052f6 <main+0x84e>
  hlptim2.Instance = LPTIM2;
 8004e7c:	48bb      	ldr	r0, [pc, #748]	; (800516c <main+0x6c4>)
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8004e7e:	2300      	movs	r3, #0
  hlptim2.Instance = LPTIM2;
 8004e80:	4abb      	ldr	r2, [pc, #748]	; (8005170 <main+0x6c8>)
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8004e82:	f64f 76ff 	movw	r6, #65535	; 0xffff
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8004e86:	6303      	str	r3, [r0, #48]	; 0x30
  hlptim2.Instance = LPTIM2;
 8004e88:	6002      	str	r2, [r0, #0]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8004e8a:	2200      	movs	r2, #0
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8004e8c:	6146      	str	r6, [r0, #20]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8004e8e:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8004e92:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8004e96:	2300      	movs	r3, #0
 8004e98:	e9c0 2308 	strd	r2, r3, [r0, #32]
 8004e9c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8004ea6:	f003 ffe9 	bl	8008e7c <HAL_LPTIM_Init>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	f040 8223 	bne.w	80052f6 <main+0x84e>
  htim6.Instance = TIM6;
 8004eb0:	4cb0      	ldr	r4, [pc, #704]	; (8005174 <main+0x6cc>)
 8004eb2:	4bb1      	ldr	r3, [pc, #708]	; (8005178 <main+0x6d0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004eb4:	9019      	str	r0, [sp, #100]	; 0x64
  htim6.Instance = TIM6;
 8004eb6:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = 8191;
 8004eb8:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8004ebc:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ebe:	2380      	movs	r3, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ec0:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ec4:	e9c4 0001 	strd	r0, r0, [r4, #4]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004ec8:	4620      	mov	r0, r4
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004eca:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004ecc:	f007 f9a2 	bl	800c214 <HAL_TIM_Base_Init>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	f040 8210 	bne.w	80052f6 <main+0x84e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004ed6:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ed8:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004eda:	a917      	add	r1, sp, #92	; 0x5c
 8004edc:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004ede:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004ee0:	f007 fdd2 	bl	800ca88 <HAL_TIMEx_MasterConfigSynchronization>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	f040 8205 	bne.w	80052f6 <main+0x84e>
  huart3.Instance = USART3;
 8004eec:	4ca3      	ldr	r4, [pc, #652]	; (800517c <main+0x6d4>)
 8004eee:	4aa4      	ldr	r2, [pc, #656]	; (8005180 <main+0x6d8>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004ef0:	60a0      	str	r0, [r4, #8]
  huart3.Instance = USART3;
 8004ef2:	6022      	str	r2, [r4, #0]
  huart3.Init.BaudRate = 115200;
 8004ef4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ef8:	61a0      	str	r0, [r4, #24]
  huart3.Init.BaudRate = 115200;
 8004efa:	6062      	str	r2, [r4, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004efc:	220c      	movs	r2, #12
  huart3.Init.Parity = UART_PARITY_NONE;
 8004efe:	e9c4 0003 	strd	r0, r0, [r4, #12]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f02:	e9c4 0007 	strd	r0, r0, [r4, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004f06:	4620      	mov	r0, r4
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004f08:	6162      	str	r2, [r4, #20]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f0a:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004f0e:	f008 fc0d 	bl	800d72c <HAL_UART_Init>
 8004f12:	4601      	mov	r1, r0
 8004f14:	2800      	cmp	r0, #0
 8004f16:	f040 81ee 	bne.w	80052f6 <main+0x84e>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f008 fc5e 	bl	800d7dc <HAL_UARTEx_SetTxFifoThreshold>
 8004f20:	4601      	mov	r1, r0
 8004f22:	2800      	cmp	r0, #0
 8004f24:	f040 81e7 	bne.w	80052f6 <main+0x84e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f28:	4620      	mov	r0, r4
 8004f2a:	f008 fc99 	bl	800d860 <HAL_UARTEx_SetRxFifoThreshold>
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	f040 81e1 	bne.w	80052f6 <main+0x84e>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004f34:	4620      	mov	r0, r4
 8004f36:	f008 fc33 	bl	800d7a0 <HAL_UARTEx_DisableFifoMode>
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	f040 81da 	bne.w	80052f6 <main+0x84e>
  MX_USB_DEVICE_Init();
 8004f42:	f00a fa51 	bl	800f3e8 <MX_USB_DEVICE_Init>
  htim4.Instance = TIM4;
 8004f46:	4f8f      	ldr	r7, [pc, #572]	; (8005184 <main+0x6dc>)
 8004f48:	4b8f      	ldr	r3, [pc, #572]	; (8005188 <main+0x6e0>)
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004f4a:	2201      	movs	r2, #1
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004f4c:	a93a      	add	r1, sp, #232	; 0xe8
 8004f4e:	4638      	mov	r0, r7
  TIM_Encoder_InitTypeDef sConfig = {0};
 8004f50:	943d      	str	r4, [sp, #244]	; 0xf4
 8004f52:	9441      	str	r4, [sp, #260]	; 0x104
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f54:	9414      	str	r4, [sp, #80]	; 0x50
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f56:	613c      	str	r4, [r7, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f58:	61bc      	str	r4, [r7, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f5a:	9415      	str	r4, [sp, #84]	; 0x54
 8004f5c:	9416      	str	r4, [sp, #88]	; 0x58
  htim4.Init.Prescaler = 0;
 8004f5e:	e9c7 3400 	strd	r3, r4, [r7]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004f62:	2302      	movs	r3, #2
 8004f64:	e9cd 233a 	strd	r2, r3, [sp, #232]	; 0xe8
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004f68:	2301      	movs	r3, #1
  sConfig.IC1Filter = 8;
 8004f6a:	2208      	movs	r2, #8
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004f6c:	933c      	str	r3, [sp, #240]	; 0xf0
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004f6e:	9340      	str	r3, [sp, #256]	; 0x100
  sConfig.IC2Filter = 8;
 8004f70:	2308      	movs	r3, #8
 8004f72:	9342      	str	r3, [sp, #264]	; 0x108
  sConfig.IC1Filter = 8;
 8004f74:	2302      	movs	r3, #2
  htim4.Init.Period = 65535;
 8004f76:	e9c7 4602 	strd	r4, r6, [r7, #8]
  sConfig.IC1Filter = 8;
 8004f7a:	e9cd 233e 	strd	r2, r3, [sp, #248]	; 0xf8
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004f7e:	f007 fab3 	bl	800c4e8 <HAL_TIM_Encoder_Init>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2800      	cmp	r0, #0
 8004f86:	f040 81b6 	bne.w	80052f6 <main+0x84e>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004f8a:	a914      	add	r1, sp, #80	; 0x50
 8004f8c:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f8e:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f90:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004f92:	f007 fd79 	bl	800ca88 <HAL_TIMEx_MasterConfigSynchronization>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	f040 81ac 	bne.w	80052f6 <main+0x84e>
  htim7.Instance = TIM7;
 8004f9e:	4c7b      	ldr	r4, [pc, #492]	; (800518c <main+0x6e4>)
  htim7.Init.Period = 8192;
 8004fa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  htim7.Instance = TIM7;
 8004fa4:	497a      	ldr	r1, [pc, #488]	; (8005190 <main+0x6e8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fa6:	9011      	str	r0, [sp, #68]	; 0x44
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fa8:	61a3      	str	r3, [r4, #24]
  htim7.Init.Prescaler = 0;
 8004faa:	e9c4 1000 	strd	r1, r0, [r4]
  htim7.Init.Period = 8192;
 8004fae:	e9c4 0202 	strd	r0, r2, [r4, #8]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004fb2:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fb4:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004fb8:	f007 f92c 	bl	800c214 <HAL_TIM_Base_Init>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	f040 819a 	bne.w	80052f6 <main+0x84e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fc2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004fc4:	a911      	add	r1, sp, #68	; 0x44
 8004fc6:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fc8:	9311      	str	r3, [sp, #68]	; 0x44
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fca:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004fcc:	f007 fd5c 	bl	800ca88 <HAL_TIMEx_MasterConfigSynchronization>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	f040 8190 	bne.w	80052f6 <main+0x84e>
	htim7.Instance = TIM7;
 8004fd6:	4b6e      	ldr	r3, [pc, #440]	; (8005190 <main+0x6e8>)
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fd8:	61a0      	str	r0, [r4, #24]
	htim7.Instance = TIM7;
 8004fda:	6023      	str	r3, [r4, #0]
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 8004fdc:	f247 5330 	movw	r3, #30000	; 0x7530
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fe0:	e9c4 0001 	strd	r0, r0, [r4, #4]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004fe4:	4620      	mov	r0, r4
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 8004fe6:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004fe8:	f007 f914 	bl	800c214 <HAL_TIM_Base_Init>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	f040 8181 	bne.w	80052f6 <main+0x84e>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004ff4:	a911      	add	r1, sp, #68	; 0x44
 8004ff6:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ff8:	9311      	str	r3, [sp, #68]	; 0x44
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ffa:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004ffc:	f007 fd44 	bl	800ca88 <HAL_TIMEx_MasterConfigSynchronization>
 8005000:	2800      	cmp	r0, #0
 8005002:	f040 8178 	bne.w	80052f6 <main+0x84e>
  htim2.Instance = TIM2;
 8005006:	4c63      	ldr	r4, [pc, #396]	; (8005194 <main+0x6ec>)
 8005008:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  htim2.Init.Period = 10000;
 800500c:	f242 7310 	movw	r3, #10000	; 0x2710
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005010:	901a      	str	r0, [sp, #104]	; 0x68
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005012:	900e      	str	r0, [sp, #56]	; 0x38
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005014:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005016:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005018:	61a0      	str	r0, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800501a:	901d      	str	r0, [sp, #116]	; 0x74
  htim2.Init.Period = 10000;
 800501c:	60e3      	str	r3, [r4, #12]
  htim2.Instance = TIM2;
 800501e:	e9c4 6000 	strd	r6, r0, [r4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005022:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005026:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800502a:	4620      	mov	r0, r4
 800502c:	f007 f8f2 	bl	800c214 <HAL_TIM_Base_Init>
 8005030:	2800      	cmp	r0, #0
 8005032:	f040 8160 	bne.w	80052f6 <main+0x84e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005036:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800503a:	a91a      	add	r1, sp, #104	; 0x68
 800503c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800503e:	971a      	str	r7, [sp, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005040:	f007 fb96 	bl	800c770 <HAL_TIM_ConfigClockSource>
 8005044:	2800      	cmp	r0, #0
 8005046:	f040 8156 	bne.w	80052f6 <main+0x84e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800504a:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800504c:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800504e:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005050:	4620      	mov	r0, r4
 8005052:	f007 fd19 	bl	800ca88 <HAL_TIMEx_MasterConfigSynchronization>
 8005056:	2800      	cmp	r0, #0
 8005058:	f040 814d 	bne.w	80052f6 <main+0x84e>
	htim2.Init.Period = 15000;
 800505c:	f643 2398 	movw	r3, #15000	; 0x3a98
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005060:	60a0      	str	r0, [r4, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005062:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005064:	61a0      	str	r0, [r4, #24]
	htim2.Init.Period = 15000;
 8005066:	60e3      	str	r3, [r4, #12]
	htim2.Init.Prescaler = 0;
 8005068:	e9c4 6000 	strd	r6, r0, [r4]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800506c:	4620      	mov	r0, r4
 800506e:	f007 f8d1 	bl	800c214 <HAL_TIM_Base_Init>
 8005072:	2800      	cmp	r0, #0
 8005074:	f040 813f 	bne.w	80052f6 <main+0x84e>
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005078:	a91a      	add	r1, sp, #104	; 0x68
 800507a:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800507c:	971a      	str	r7, [sp, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800507e:	f007 fb77 	bl	800c770 <HAL_TIM_ConfigClockSource>
 8005082:	4603      	mov	r3, r0
 8005084:	2800      	cmp	r0, #0
 8005086:	f040 8136 	bne.w	80052f6 <main+0x84e>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800508a:	a90e      	add	r1, sp, #56	; 0x38
 800508c:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800508e:	930e      	str	r3, [sp, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005090:	9310      	str	r3, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005092:	f007 fcf9 	bl	800ca88 <HAL_TIMEx_MasterConfigSynchronization>
 8005096:	2800      	cmp	r0, #0
 8005098:	f040 812d 	bne.w	80052f6 <main+0x84e>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800509c:	4b3e      	ldr	r3, [pc, #248]	; (8005198 <main+0x6f0>)
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	03d9      	lsls	r1, r3, #15
 80050a2:	d426      	bmi.n	80050f2 <main+0x64a>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80050a4:	483c      	ldr	r0, [pc, #240]	; (8005198 <main+0x6f0>)
 80050a6:	2300      	movs	r3, #0
 80050a8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80050ac:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80050b0:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80050b4:	f643 77e0 	movw	r7, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80050b8:	f3c6 344e 	ubfx	r4, r6, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80050bc:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 80050c0:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80050c2:	ea04 0107 	and.w	r1, r4, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80050c6:	4633      	mov	r3, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80050c8:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 80050cc:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80050ce:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	d1f8      	bne.n	80050c8 <main+0x620>
    } while(sets-- != 0U);
 80050d6:	3c20      	subs	r4, #32
 80050d8:	f114 0f20 	cmn.w	r4, #32
 80050dc:	d1f1      	bne.n	80050c2 <main+0x61a>
 80050de:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80050e2:	6943      	ldr	r3, [r0, #20]
 80050e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e8:	6143      	str	r3, [r0, #20]
 80050ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80050ee:	f3bf 8f6f 	isb	sy
	MX_TIM6_Init_Custom_Rate();
 80050f2:	f7ff fcb1 	bl	8004a58 <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 80050f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80050fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050fe:	4827      	ldr	r0, [pc, #156]	; (800519c <main+0x6f4>)
 8005100:	f001 fe98 	bl	8006e34 <HAL_ADCEx_Calibration_Start>
 8005104:	2800      	cmp	r0, #0
 8005106:	f040 80f6 	bne.w	80052f6 <main+0x84e>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 800510a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800510e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005112:	4823      	ldr	r0, [pc, #140]	; (80051a0 <main+0x6f8>)
 8005114:	f001 fe8e 	bl	8006e34 <HAL_ADCEx_Calibration_Start>
 8005118:	4604      	mov	r4, r0
 800511a:	2800      	cmp	r0, #0
 800511c:	f040 80eb 	bne.w	80052f6 <main+0x84e>
	HAL_Delay(1);
 8005120:	2001      	movs	r0, #1
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8005122:	4f20      	ldr	r7, [pc, #128]	; (80051a4 <main+0x6fc>)
	AMindex  = LSBindex = 1;
 8005124:	4606      	mov	r6, r0
	HAL_Delay(1);
 8005126:	f000 fdf3 	bl	8005d10 <HAL_Delay>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 800512a:	4621      	mov	r1, r4
 800512c:	4815      	ldr	r0, [pc, #84]	; (8005184 <main+0x6dc>)
 800512e:	f007 fabf 	bl	800c6b0 <HAL_TIM_Encoder_Start>
	volume= 0.1;
 8005132:	4b1d      	ldr	r3, [pc, #116]	; (80051a8 <main+0x700>)
 8005134:	4a1d      	ldr	r2, [pc, #116]	; (80051ac <main+0x704>)
	SetFstep(2);
 8005136:	2002      	movs	r0, #2
	volume= 0.1;
 8005138:	601a      	str	r2, [r3, #0]
	SetFstep(2);
 800513a:	f7fc f8a1 	bl	8001280 <SetFstep>
	cwpitch = CWPITCH;
 800513e:	4b1c      	ldr	r3, [pc, #112]	; (80051b0 <main+0x708>)
	meanavg = 0.f;
 8005140:	2100      	movs	r1, #0
	cwpitch = CWPITCH;
 8005142:	4a1c      	ldr	r2, [pc, #112]	; (80051b4 <main+0x70c>)
	CarrierEnable(0);
 8005144:	4620      	mov	r0, r4
	cwpitch = CWPITCH;
 8005146:	601a      	str	r2, [r3, #0]
	meanavg = 0.f;
 8005148:	4a1b      	ldr	r2, [pc, #108]	; (80051b8 <main+0x710>)
	os_time = 0;
 800514a:	4b1c      	ldr	r3, [pc, #112]	; (80051bc <main+0x714>)
	meanavg = 0.f;
 800514c:	6011      	str	r1, [r2, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 800514e:	4a1c      	ldr	r2, [pc, #112]	; (80051c0 <main+0x718>)
 8005150:	491c      	ldr	r1, [pc, #112]	; (80051c4 <main+0x71c>)
	os_time = 0;
 8005152:	601c      	str	r4, [r3, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8005154:	6011      	str	r1, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8005156:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
	Muted   = false;
 800515a:	4a1b      	ldr	r2, [pc, #108]	; (80051c8 <main+0x720>)
	AGC_decay[Fast] = 0.9995f;
 800515c:	4b1b      	ldr	r3, [pc, #108]	; (80051cc <main+0x724>)
	Muted   = false;
 800515e:	7014      	strb	r4, [r2, #0]
	AMindex  = LSBindex = 1;
 8005160:	4a1b      	ldr	r2, [pc, #108]	; (80051d0 <main+0x728>)
 8005162:	8016      	strh	r6, [r2, #0]
 8005164:	4a1b      	ldr	r2, [pc, #108]	; (80051d4 <main+0x72c>)
 8005166:	8016      	strh	r6, [r2, #0]
 8005168:	e036      	b.n	80051d8 <main+0x730>
 800516a:	bf00      	nop
 800516c:	2400b610 	.word	0x2400b610
 8005170:	58002400 	.word	0x58002400
 8005174:	2400b6e0 	.word	0x2400b6e0
 8005178:	40001000 	.word	0x40001000
 800517c:	2400b778 	.word	0x2400b778
 8005180:	40004800 	.word	0x40004800
 8005184:	2400b694 	.word	0x2400b694
 8005188:	40000800 	.word	0x40000800
 800518c:	2400b72c 	.word	0x2400b72c
 8005190:	40001400 	.word	0x40001400
 8005194:	2400b648 	.word	0x2400b648
 8005198:	e000ed00 	.word	0xe000ed00
 800519c:	2400b43c 	.word	0x2400b43c
 80051a0:	2400b4a0 	.word	0x2400b4a0
 80051a4:	24007288 	.word	0x24007288
 80051a8:	2400c9d0 	.word	0x2400c9d0
 80051ac:	3dcccccd 	.word	0x3dcccccd
 80051b0:	24008c34 	.word	0x24008c34
 80051b4:	44228000 	.word	0x44228000
 80051b8:	2400b81c 	.word	0x2400b81c
 80051bc:	2400b840 	.word	0x2400b840
 80051c0:	24007280 	.word	0x24007280
 80051c4:	3f7cac08 	.word	0x3f7cac08
 80051c8:	24007270 	.word	0x24007270
 80051cc:	240017d8 	.word	0x240017d8
 80051d0:	2400725c 	.word	0x2400725c
 80051d4:	240017e0 	.word	0x240017e0
	USBindex = CWindex  = 1;
 80051d8:	4a6d      	ldr	r2, [pc, #436]	; (8005390 <main+0x8e8>)
 80051da:	8016      	strh	r6, [r2, #0]
 80051dc:	4a6d      	ldr	r2, [pc, #436]	; (8005394 <main+0x8ec>)
 80051de:	8016      	strh	r6, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 80051e0:	4a6d      	ldr	r2, [pc, #436]	; (8005398 <main+0x8f0>)
 80051e2:	6011      	str	r1, [r2, #0]
	agc[AM]  = agc[LSB] = Slow;
 80051e4:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
 80051e8:	4a6c      	ldr	r2, [pc, #432]	; (800539c <main+0x8f4>)
 80051ea:	6011      	str	r1, [r2, #0]
	AGC_decay[Fast] = 0.9995f;
 80051ec:	4a6c      	ldr	r2, [pc, #432]	; (80053a0 <main+0x8f8>)
 80051ee:	601a      	str	r2, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 80051f0:	4a6c      	ldr	r2, [pc, #432]	; (80053a4 <main+0x8fc>)
 80051f2:	605a      	str	r2, [r3, #4]
	Hangcount[Fast] = 2;
 80051f4:	4b6c      	ldr	r3, [pc, #432]	; (80053a8 <main+0x900>)
 80051f6:	4a6d      	ldr	r2, [pc, #436]	; (80053ac <main+0x904>)
 80051f8:	601a      	str	r2, [r3, #0]
	AgcThreshold    = 1.92e-4f;
 80051fa:	4b6d      	ldr	r3, [pc, #436]	; (80053b0 <main+0x908>)
 80051fc:	4a6d      	ldr	r2, [pc, #436]	; (80053b4 <main+0x90c>)
 80051fe:	601a      	str	r2, [r3, #0]
	pk = 0.02f;
 8005200:	4a6d      	ldr	r2, [pc, #436]	; (80053b8 <main+0x910>)
 8005202:	4b6e      	ldr	r3, [pc, #440]	; (80053bc <main+0x914>)
 8005204:	601a      	str	r2, [r3, #0]
	HAdc1 = &hadc1;
 8005206:	4b6e      	ldr	r3, [pc, #440]	; (80053c0 <main+0x918>)
 8005208:	601d      	str	r5, [r3, #0]
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 800520a:	f44f 6500 	mov.w	r5, #2048	; 0x800
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 800520e:	4b6d      	ldr	r3, [pc, #436]	; (80053c4 <main+0x91c>)
 8005210:	603b      	str	r3, [r7, #0]
	CarrierEnable(0);
 8005212:	f7fe ffad 	bl	8004170 <CarrierEnable>
	TXSwitch(0);
 8005216:	4620      	mov	r0, r4
 8005218:	f7fe ff46 	bl	80040a8 <TXSwitch>
	__HAL_RCC_PLL2_DISABLE();
 800521c:	4a6a      	ldr	r2, [pc, #424]	; (80053c8 <main+0x920>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 800521e:	231a      	movs	r3, #26
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8005220:	ed97 7a00 	vldr	s14, [r7]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8005224:	4969      	ldr	r1, [pc, #420]	; (80053cc <main+0x924>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8005226:	9303      	str	r3, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8005228:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	__HAL_RCC_PLL2_DISABLE();
 800522c:	6813      	ldr	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 800522e:	eddf 6a68 	vldr	s13, [pc, #416]	; 80053d0 <main+0x928>
	__HAL_RCC_PLL2_DISABLE();
 8005232:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
	CWThreshold = 0.01;
 8005236:	4867      	ldr	r0, [pc, #412]	; (80053d4 <main+0x92c>)
	__HAL_RCC_PLL2_DISABLE();
 8005238:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 800523a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800523c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8005244:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8005388 <main+0x8e0>
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8005248:	6293      	str	r3, [r2, #40]	; 0x28
 800524a:	9b03      	ldr	r3, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 800524c:	ee27 7b05 	vmul.f64	d7, d7, d5
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8005250:	3b01      	subs	r3, #1
 8005252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005256:	4319      	orrs	r1, r3
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8005258:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 800525c:	6391      	str	r1, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 800525e:	6813      	ldr	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8005260:	ee67 7a26 	vmul.f32	s15, s14, s13
	__HAL_RCC_PLL2_ENABLE();
 8005264:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005268:	6013      	str	r3, [r2, #0]
	CWThreshold = 0.01;
 800526a:	4a5b      	ldr	r2, [pc, #364]	; (80053d8 <main+0x930>)
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 800526c:	4b5b      	ldr	r3, [pc, #364]	; (80053dc <main+0x934>)
	CWThreshold = 0.01;
 800526e:	6002      	str	r2, [r0, #0]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8005270:	ed87 7a00 	vstr	s14, [r7]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8005274:	edc3 7a00 	vstr	s15, [r3]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 8005278:	f7fd f8de 	bl	8002438 <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 800527c:	4958      	ldr	r1, [pc, #352]	; (80053e0 <main+0x938>)
 800527e:	2204      	movs	r2, #4
 8005280:	4f58      	ldr	r7, [pc, #352]	; (80053e4 <main+0x93c>)
 8005282:	4b59      	ldr	r3, [pc, #356]	; (80053e8 <main+0x940>)
 8005284:	4859      	ldr	r0, [pc, #356]	; (80053ec <main+0x944>)
 8005286:	e9cd 1500 	strd	r1, r5, [sp]
 800528a:	2140      	movs	r1, #64	; 0x40
 800528c:	f00a ff80 	bl	8010190 <arm_fir_decimate_init_f32>
 8005290:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 8005292:	b100      	cbz	r0, 8005296 <main+0x7ee>
 8005294:	e7fe      	b.n	8005294 <main+0x7ec>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 8005296:	4a56      	ldr	r2, [pc, #344]	; (80053f0 <main+0x948>)
 8005298:	2140      	movs	r1, #64	; 0x40
 800529a:	4b53      	ldr	r3, [pc, #332]	; (80053e8 <main+0x940>)
 800529c:	4855      	ldr	r0, [pc, #340]	; (80053f4 <main+0x94c>)
 800529e:	e9cd 2500 	strd	r2, r5, [sp]
 80052a2:	2204      	movs	r2, #4
 80052a4:	f00a ff74 	bl	8010190 <arm_fir_decimate_init_f32>
 80052a8:	4604      	mov	r4, r0
 80052aa:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 80052ac:	bb28      	cbnz	r0, 80052fa <main+0x852>
	Load_Presets();
 80052ae:	f7fb fe11 	bl	8000ed4 <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 80052b2:	4630      	mov	r0, r6
 80052b4:	f7fb fef4 	bl	80010a0 <Tune_Preset>
	keyerState = IDLE;
 80052b8:	4a4f      	ldr	r2, [pc, #316]	; (80053f8 <main+0x950>)
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 80052ba:	4b50      	ldr	r3, [pc, #320]	; (80053fc <main+0x954>)
	keyer_speed = 15;
 80052bc:	200f      	movs	r0, #15
	keyerState = IDLE;
 80052be:	7014      	strb	r4, [r2, #0]
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 80052c0:	2210      	movs	r2, #16
 80052c2:	701a      	strb	r2, [r3, #0]
	keyer_speed = 15;
 80052c4:	4b4e      	ldr	r3, [pc, #312]	; (8005400 <main+0x958>)
 80052c6:	6018      	str	r0, [r3, #0]
	loadWPM(keyer_speed);        // Fix speed at 15 WPM
 80052c8:	f7fb f9e4 	bl	8000694 <loadWPM>
	keyer_mode = 1; //->  iambic
 80052cc:	4a4d      	ldr	r2, [pc, #308]	; (8005404 <main+0x95c>)
	txdelay = 10;
 80052ce:	200a      	movs	r0, #10
	if (!DisableDisplay)
 80052d0:	4b4d      	ldr	r3, [pc, #308]	; (8005408 <main+0x960>)
	keyer_mode = 1; //->  iambic
 80052d2:	7016      	strb	r6, [r2, #0]
	keyer_swap = 0; //->  DI/DAH
 80052d4:	4a4d      	ldr	r2, [pc, #308]	; (800540c <main+0x964>)
	txdelay = 10;
 80052d6:	494e      	ldr	r1, [pc, #312]	; (8005410 <main+0x968>)
	keyer_swap = 0; //->  DI/DAH
 80052d8:	7014      	strb	r4, [r2, #0]
	if (!DisableDisplay)
 80052da:	781b      	ldrb	r3, [r3, #0]
	TxPowerOut = MID_POWER_OUT;
 80052dc:	4a4d      	ldr	r2, [pc, #308]	; (8005414 <main+0x96c>)
	txdelay = 10;
 80052de:	7008      	strb	r0, [r1, #0]
	TxPowerOut = MID_POWER_OUT;
 80052e0:	6015      	str	r5, [r2, #0]
	if (!DisableDisplay)
 80052e2:	b90b      	cbnz	r3, 80052e8 <main+0x840>
 80052e4:	f7fe faae 	bl	8003844 <DisplayStatus.part.0>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 80052e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ec:	494a      	ldr	r1, [pc, #296]	; (8005418 <main+0x970>)
 80052ee:	484b      	ldr	r0, [pc, #300]	; (800541c <main+0x974>)
 80052f0:	f001 fdf2 	bl	8006ed8 <HAL_ADCEx_MultiModeStart_DMA>
 80052f4:	b110      	cbz	r0, 80052fc <main+0x854>
    Error_Handler();
 80052f6:	f7fe ff99 	bl	800422c <Error_Handler>
	while(arc != ARM_MATH_SUCCESS)
 80052fa:	e7fe      	b.n	80052fa <main+0x852>
	if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 80052fc:	4848      	ldr	r0, [pc, #288]	; (8005420 <main+0x978>)
 80052fe:	f007 f897 	bl	800c430 <HAL_TIM_Base_Start_IT>
 8005302:	4604      	mov	r4, r0
 8005304:	2800      	cmp	r0, #0
 8005306:	d1f6      	bne.n	80052f6 <main+0x84e>
	HAL_TIM_Base_Start(&htim6);
 8005308:	4846      	ldr	r0, [pc, #280]	; (8005424 <main+0x97c>)
 800530a:	f007 f839 	bl	800c380 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 800530e:	4846      	ldr	r0, [pc, #280]	; (8005428 <main+0x980>)
 8005310:	f007 f836 	bl	800c380 <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8005314:	4621      	mov	r1, r4
 8005316:	4845      	ldr	r0, [pc, #276]	; (800542c <main+0x984>)
 8005318:	f001 ffe6 	bl	80072e8 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 800531c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005320:	4a43      	ldr	r2, [pc, #268]	; (8005430 <main+0x988>)
 8005322:	4621      	mov	r1, r4
 8005324:	4841      	ldr	r0, [pc, #260]	; (800542c <main+0x984>)
 8005326:	9400      	str	r4, [sp, #0]
 8005328:	f002 f812 	bl	8007350 <HAL_DAC_Start_DMA>
	HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 800532c:	4620      	mov	r0, r4
 800532e:	f000 fd07 	bl	8005d40 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8005332:	2110      	movs	r1, #16
 8005334:	483d      	ldr	r0, [pc, #244]	; (800542c <main+0x984>)
 8005336:	f001 ffd7 	bl	80072e8 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias
 800533a:	4623      	mov	r3, r4
 800533c:	2110      	movs	r1, #16
 800533e:	4622      	mov	r2, r4
 8005340:	483a      	ldr	r0, [pc, #232]	; (800542c <main+0x984>)
 8005342:	f002 f891 	bl	8007468 <HAL_DAC_SetValue>
	WSPRBeaconState = NO_FIX;
 8005346:	4b3b      	ldr	r3, [pc, #236]	; (8005434 <main+0x98c>)
	if (ENC_BUTTON)
 8005348:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800534c:	483a      	ldr	r0, [pc, #232]	; (8005438 <main+0x990>)
	WSPRBeaconState = NO_FIX;
 800534e:	701c      	strb	r4, [r3, #0]
	if (ENC_BUTTON)
 8005350:	f003 fd7c 	bl	8008e4c <HAL_GPIO_ReadPin>
 8005354:	b170      	cbz	r0, 8005374 <main+0x8cc>
		UserInput();
 8005356:	f7ff f837 	bl	80043c8 <UserInput>
		DCF77StatusDisplay();
 800535a:	f7fb fd81 	bl	8000e60 <DCF77StatusDisplay>
		HAL_Delay(200);
 800535e:	20c8      	movs	r0, #200	; 0xc8
 8005360:	f000 fcd6 	bl	8005d10 <HAL_Delay>
		UserInput();
 8005364:	f7ff f830 	bl	80043c8 <UserInput>
		DCF77StatusDisplay();
 8005368:	f7fb fd7a 	bl	8000e60 <DCF77StatusDisplay>
		HAL_Delay(200);
 800536c:	20c8      	movs	r0, #200	; 0xc8
 800536e:	f000 fccf 	bl	8005d10 <HAL_Delay>
	while (1)
 8005372:	e7f0      	b.n	8005356 <main+0x8ae>
		SetMode((Mode)CW);
 8005374:	2003      	movs	r0, #3
 8005376:	f7fb ff4b 	bl	8001210 <SetMode>
		LOfreq = DCF77_FREQ;
 800537a:	4930      	ldr	r1, [pc, #192]	; (800543c <main+0x994>)
 800537c:	4830      	ldr	r0, [pc, #192]	; (8005440 <main+0x998>)
		WSPRBeaconMode = 1;
 800537e:	2201      	movs	r2, #1
 8005380:	4b30      	ldr	r3, [pc, #192]	; (8005444 <main+0x99c>)
		LOfreq = DCF77_FREQ;
 8005382:	6008      	str	r0, [r1, #0]
		WSPRBeaconMode = 1;
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	e7e6      	b.n	8005356 <main+0x8ae>
 8005388:	8f04fefd 	.word	0x8f04fefd
 800538c:	3feffff9 	.word	0x3feffff9
 8005390:	24002014 	.word	0x24002014
 8005394:	240072f4 	.word	0x240072f4
 8005398:	24008c30 	.word	0x24008c30
 800539c:	24008c20 	.word	0x24008c20
 80053a0:	3f7fdf3b 	.word	0x3f7fdf3b
 80053a4:	3f7ffcb9 	.word	0x3f7ffcb9
 80053a8:	24006248 	.word	0x24006248
 80053ac:	001e0002 	.word	0x001e0002
 80053b0:	240017e4 	.word	0x240017e4
 80053b4:	3949539c 	.word	0x3949539c
 80053b8:	3ca3d70a 	.word	0x3ca3d70a
 80053bc:	2400b844 	.word	0x2400b844
 80053c0:	24006244 	.word	0x24006244
 80053c4:	4af42400 	.word	0x4af42400
 80053c8:	58024400 	.word	0x58024400
 80053cc:	01012e00 	.word	0x01012e00
 80053d0:	3b800000 	.word	0x3b800000
 80053d4:	24002010 	.word	0x24002010
 80053d8:	3c23d70a 	.word	0x3c23d70a
 80053dc:	24002000 	.word	0x24002000
 80053e0:	24004130 	.word	0x24004130
 80053e4:	24008c24 	.word	0x24008c24
 80053e8:	24000210 	.word	0x24000210
 80053ec:	2400729c 	.word	0x2400729c
 80053f0:	24002034 	.word	0x24002034
 80053f4:	24007290 	.word	0x24007290
 80053f8:	2400b80d 	.word	0x2400b80d
 80053fc:	2400b80c 	.word	0x2400b80c
 8005400:	2400b810 	.word	0x2400b810
 8005404:	2400b80e 	.word	0x2400b80e
 8005408:	24002030 	.word	0x24002030
 800540c:	2400b814 	.word	0x2400b814
 8005410:	2400c9cd 	.word	0x2400c9cd
 8005414:	240072ec 	.word	0x240072ec
 8005418:	24008420 	.word	0x24008420
 800541c:	2400b43c 	.word	0x2400b43c
 8005420:	2400b72c 	.word	0x2400b72c
 8005424:	2400b6e0 	.word	0x2400b6e0
 8005428:	2400b648 	.word	0x2400b648
 800542c:	2400b508 	.word	0x2400b508
 8005430:	24001800 	.word	0x24001800
 8005434:	240083fd 	.word	0x240083fd
 8005438:	58020c00 	.word	0x58020c00
 800543c:	24007258 	.word	0x24007258
 8005440:	47975e00 	.word	0x47975e00
 8005444:	240083fc 	.word	0x240083fc

08005448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005448:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800544a:	4c14      	ldr	r4, [pc, #80]	; (800549c <HAL_MspInit+0x54>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 800544c:	2102      	movs	r1, #2
{
 800544e:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8005450:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005452:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8005456:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800545a:	430b      	orrs	r3, r1
 800545c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8005460:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8005464:	400b      	ands	r3, r1
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 800546a:	f001 fec5 	bl	80071f8 <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 800546e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8005472:	2020      	movs	r0, #32
  __HAL_RCC_VREF_CLK_ENABLE();
 8005474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005478:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800547c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8005480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005484:	9301      	str	r3, [sp, #4]
 8005486:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8005488:	f000 fc5a 	bl	8005d40 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 800548c:	f000 fc6c 	bl	8005d68 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8005490:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005492:	b002      	add	sp, #8
 8005494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8005498:	f000 bc5c 	b.w	8005d54 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 800549c:	58024400 	.word	0x58024400

080054a0 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80054a0:	494c      	ldr	r1, [pc, #304]	; (80055d4 <HAL_ADC_MspInit+0x134>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054a2:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 80054a4:	6802      	ldr	r2, [r0, #0]
{
 80054a6:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 80054a8:	428a      	cmp	r2, r1
{
 80054aa:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80054b0:	9306      	str	r3, [sp, #24]
 80054b2:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80054b6:	d029      	beq.n	800550c <HAL_ADC_MspInit+0x6c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80054b8:	4b47      	ldr	r3, [pc, #284]	; (80055d8 <HAL_ADC_MspInit+0x138>)
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d001      	beq.n	80054c2 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80054be:	b00a      	add	sp, #40	; 0x28
 80054c0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 80054c2:	4a46      	ldr	r2, [pc, #280]	; (80055dc <HAL_ADC_MspInit+0x13c>)
 80054c4:	6813      	ldr	r3, [r2, #0]
 80054c6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80054c8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80054ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80054cc:	d070      	beq.n	80055b0 <HAL_ADC_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054ce:	4b44      	ldr	r3, [pc, #272]	; (80055e0 <HAL_ADC_MspInit+0x140>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80054d0:	2402      	movs	r4, #2
 80054d2:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054d4:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054da:	4842      	ldr	r0, [pc, #264]	; (80055e4 <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054dc:	f042 0202 	orr.w	r2, r2, #2
 80054e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80054e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	9303      	str	r3, [sp, #12]
 80054ee:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80054f0:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054f4:	f003 fb70 	bl	8008bd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80054f8:	2200      	movs	r2, #0
 80054fa:	2012      	movs	r0, #18
 80054fc:	4611      	mov	r1, r2
 80054fe:	f001 fe7b 	bl	80071f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005502:	2012      	movs	r0, #18
 8005504:	f001 feb6 	bl	8007274 <HAL_NVIC_EnableIRQ>
}
 8005508:	b00a      	add	sp, #40	; 0x28
 800550a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 800550c:	4a33      	ldr	r2, [pc, #204]	; (80055dc <HAL_ADC_MspInit+0x13c>)
 800550e:	4604      	mov	r4, r0
 8005510:	6813      	ldr	r3, [r2, #0]
 8005512:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005514:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005516:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005518:	d03c      	beq.n	8005594 <HAL_ADC_MspInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800551a:	4b31      	ldr	r3, [pc, #196]	; (80055e0 <HAL_ADC_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800551c:	a904      	add	r1, sp, #16
 800551e:	4831      	ldr	r0, [pc, #196]	; (80055e4 <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005520:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    hdma_adc1.Instance = DMA1_Stream0;
 8005524:	4d30      	ldr	r5, [pc, #192]	; (80055e8 <HAL_ADC_MspInit+0x148>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005526:	f042 0202 	orr.w	r2, r2, #2
 800552a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800552e:	2202      	movs	r2, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800553a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800553c:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800553e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005542:	f003 fb49 	bl	8008bd8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8005546:	4929      	ldr	r1, [pc, #164]	; (80055ec <HAL_ADC_MspInit+0x14c>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005548:	2209      	movs	r2, #9
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800554a:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800554c:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800554e:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005550:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005554:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005558:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800555c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005560:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005568:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800556c:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8005570:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005574:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005576:	f002 f997 	bl	80078a8 <HAL_DMA_Init>
 800557a:	bb38      	cbnz	r0, 80055cc <HAL_ADC_MspInit+0x12c>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800557c:	2200      	movs	r2, #0
 800557e:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005580:	64e5      	str	r5, [r4, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005582:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005584:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005586:	f001 fe37 	bl	80071f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800558a:	2012      	movs	r0, #18
 800558c:	f001 fe72 	bl	8007274 <HAL_NVIC_EnableIRQ>
}
 8005590:	b00a      	add	sp, #40	; 0x28
 8005592:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005594:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <HAL_ADC_MspInit+0x140>)
 8005596:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800559a:	f042 0220 	orr.w	r2, r2, #32
 800559e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80055a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055a6:	f003 0320 	and.w	r3, r3, #32
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	9b00      	ldr	r3, [sp, #0]
 80055ae:	e7b4      	b.n	800551a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <HAL_ADC_MspInit+0x140>)
 80055b2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80055b6:	f042 0220 	orr.w	r2, r2, #32
 80055ba:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80055be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	9302      	str	r3, [sp, #8]
 80055c8:	9b02      	ldr	r3, [sp, #8]
 80055ca:	e780      	b.n	80054ce <HAL_ADC_MspInit+0x2e>
      Error_Handler();
 80055cc:	f7fe fe2e 	bl	800422c <Error_Handler>
 80055d0:	e7d4      	b.n	800557c <HAL_ADC_MspInit+0xdc>
 80055d2:	bf00      	nop
 80055d4:	40022000 	.word	0x40022000
 80055d8:	40022100 	.word	0x40022100
 80055dc:	2400c9d4 	.word	0x2400c9d4
 80055e0:	58024400 	.word	0x58024400
 80055e4:	58020400 	.word	0x58020400
 80055e8:	2400b51c 	.word	0x2400b51c
 80055ec:	40020010 	.word	0x40020010

080055f0 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 80055f0:	4b2c      	ldr	r3, [pc, #176]	; (80056a4 <HAL_DAC_MspInit+0xb4>)
 80055f2:	6802      	ldr	r2, [r0, #0]
{
 80055f4:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 80055f6:	429a      	cmp	r2, r3
{
 80055f8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055fa:	f04f 0400 	mov.w	r4, #0
 80055fe:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8005602:	9404      	str	r4, [sp, #16]
 8005604:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 8005608:	d001      	beq.n	800560e <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800560a:	b008      	add	sp, #32
 800560c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 800560e:	4b26      	ldr	r3, [pc, #152]	; (80056a8 <HAL_DAC_MspInit+0xb8>)
 8005610:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005612:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8005614:	4e25      	ldr	r6, [pc, #148]	; (80056ac <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8005616:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800561a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800561e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8005622:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8005626:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800562a:	9200      	str	r2, [sp, #0]
 800562c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800562e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005632:	f042 0201 	orr.w	r2, r2, #1
 8005636:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800563a:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800563c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005646:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005648:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800564a:	4819      	ldr	r0, [pc, #100]	; (80056b0 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800564c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005650:	f003 fac2 	bl	8008bd8 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8005654:	4a17      	ldr	r2, [pc, #92]	; (80056b4 <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8005656:	2343      	movs	r3, #67	; 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8005658:	4630      	mov	r0, r6
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 800565a:	6032      	str	r2, [r6, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800565c:	2240      	movs	r2, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 800565e:	6073      	str	r3, [r6, #4]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005660:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005664:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005666:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800566a:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800566c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005670:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005672:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005674:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005676:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800567a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800567e:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8005680:	f002 f912 	bl	80078a8 <HAL_DMA_Init>
 8005684:	b958      	cbnz	r0, 800569e <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005686:	2200      	movs	r2, #0
 8005688:	2101      	movs	r1, #1
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800568a:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800568c:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800568e:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005690:	f001 fdb2 	bl	80071f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005694:	2036      	movs	r0, #54	; 0x36
 8005696:	f001 fded 	bl	8007274 <HAL_NVIC_EnableIRQ>
}
 800569a:	b008      	add	sp, #32
 800569c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800569e:	f7fe fdc5 	bl	800422c <Error_Handler>
 80056a2:	e7f0      	b.n	8005686 <HAL_DAC_MspInit+0x96>
 80056a4:	40007400 	.word	0x40007400
 80056a8:	58024400 	.word	0x58024400
 80056ac:	2400b594 	.word	0x2400b594
 80056b0:	58020000 	.word	0x58020000
 80056b4:	40020028 	.word	0x40020028

080056b8 <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 80056b8:	4a1b      	ldr	r2, [pc, #108]	; (8005728 <HAL_LPTIM_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056ba:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 80056bc:	6801      	ldr	r1, [r0, #0]
{
 80056be:	b510      	push	{r4, lr}
  if(hlptim->Instance==LPTIM2)
 80056c0:	4291      	cmp	r1, r2
{
 80056c2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80056c8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80056cc:	9306      	str	r3, [sp, #24]
  if(hlptim->Instance==LPTIM2)
 80056ce:	d001      	beq.n	80056d4 <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80056d0:	b008      	add	sp, #32
 80056d2:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80056d4:	4b15      	ldr	r3, [pc, #84]	; (800572c <HAL_LPTIM_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 80056d6:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056d8:	a902      	add	r1, sp, #8
 80056da:	4815      	ldr	r0, [pc, #84]	; (8005730 <HAL_LPTIM_MspInit+0x78>)
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80056dc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80056e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056e4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80056e8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80056ec:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80056f0:	9200      	str	r2, [sp, #0]
 80056f2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80056f8:	f042 0202 	orr.w	r2, r2, #2
 80056fc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8005704:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005706:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800570a:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8005720 <HAL_LPTIM_MspInit+0x68>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800570e:	9301      	str	r3, [sp, #4]
 8005710:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005712:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005716:	f003 fa5f 	bl	8008bd8 <HAL_GPIO_Init>
}
 800571a:	b008      	add	sp, #32
 800571c:	bd10      	pop	{r4, pc}
 800571e:	bf00      	nop
 8005720:	00000400 	.word	0x00000400
 8005724:	00000002 	.word	0x00000002
 8005728:	58002400 	.word	0x58002400
 800572c:	58024400 	.word	0x58024400
 8005730:	58020400 	.word	0x58020400

08005734 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8005734:	6803      	ldr	r3, [r0, #0]
 8005736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800573a:	b510      	push	{r4, lr}
 800573c:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM2)
 800573e:	d007      	beq.n	8005750 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8005740:	4a27      	ldr	r2, [pc, #156]	; (80057e0 <HAL_TIM_Base_MspInit+0xac>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d01c      	beq.n	8005780 <HAL_TIM_Base_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8005746:	4a27      	ldr	r2, [pc, #156]	; (80057e4 <HAL_TIM_Base_MspInit+0xb0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d031      	beq.n	80057b0 <HAL_TIM_Base_MspInit+0x7c>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800574c:	b004      	add	sp, #16
 800574e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005750:	4b25      	ldr	r3, [pc, #148]	; (80057e8 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8005752:	201c      	movs	r0, #28
 8005754:	2200      	movs	r2, #0
 8005756:	2104      	movs	r1, #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005758:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 800575c:	f044 0401 	orr.w	r4, r4, #1
 8005760:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8005764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8005770:	f001 fd42 	bl	80071f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005774:	201c      	movs	r0, #28
}
 8005776:	b004      	add	sp, #16
 8005778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800577c:	f001 bd7a 	b.w	8007274 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005780:	4b19      	ldr	r3, [pc, #100]	; (80057e8 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005782:	2036      	movs	r0, #54	; 0x36
 8005784:	2200      	movs	r2, #0
 8005786:	2101      	movs	r1, #1
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005788:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 800578c:	f044 0410 	orr.w	r4, r4, #16
 8005790:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8005794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	9302      	str	r3, [sp, #8]
 800579e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80057a0:	f001 fd2a 	bl	80071f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80057a4:	2036      	movs	r0, #54	; 0x36
}
 80057a6:	b004      	add	sp, #16
 80057a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80057ac:	f001 bd62 	b.w	8007274 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80057b0:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80057b2:	2037      	movs	r0, #55	; 0x37
 80057b4:	2200      	movs	r2, #0
 80057b6:	2101      	movs	r1, #1
    __HAL_RCC_TIM7_CLK_ENABLE();
 80057b8:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 80057bc:	f044 0420 	orr.w	r4, r4, #32
 80057c0:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 80057c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	9303      	str	r3, [sp, #12]
 80057ce:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80057d0:	f001 fd12 	bl	80071f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80057d4:	2037      	movs	r0, #55	; 0x37
}
 80057d6:	b004      	add	sp, #16
 80057d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80057dc:	f001 bd4a 	b.w	8007274 <HAL_NVIC_EnableIRQ>
 80057e0:	40001000 	.word	0x40001000
 80057e4:	40001400 	.word	0x40001400
 80057e8:	58024400 	.word	0x58024400
 80057ec:	00000000 	.word	0x00000000

080057f0 <HAL_TIM_Encoder_MspInit>:
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 80057f0:	4a1d      	ldr	r2, [pc, #116]	; (8005868 <HAL_TIM_Encoder_MspInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057f2:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 80057f4:	6801      	ldr	r1, [r0, #0]
{
 80057f6:	b500      	push	{lr}
  if(htim_encoder->Instance==TIM4)
 80057f8:	4291      	cmp	r1, r2
{
 80057fa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057fc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005800:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005804:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 8005806:	d002      	beq.n	800580e <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005808:	b009      	add	sp, #36	; 0x24
 800580a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 800580e:	4b17      	ldr	r3, [pc, #92]	; (800586c <HAL_TIM_Encoder_MspInit+0x7c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005810:	2001      	movs	r0, #1
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005812:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005814:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8005818:	f042 0204 	orr.w	r2, r2, #4
 800581c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8005820:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8005824:	f002 0204 	and.w	r2, r2, #4
 8005828:	9200      	str	r2, [sp, #0]
 800582a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800582c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005830:	f042 0208 	orr.w	r2, r2, #8
 8005834:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005838:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800583a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800583e:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005840:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005844:	480a      	ldr	r0, [pc, #40]	; (8005870 <HAL_TIM_Encoder_MspInit+0x80>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005846:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005848:	9301      	str	r3, [sp, #4]
 800584a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800584c:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8005860 <HAL_TIM_Encoder_MspInit+0x70>
 8005850:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005854:	f003 f9c0 	bl	8008bd8 <HAL_GPIO_Init>
}
 8005858:	b009      	add	sp, #36	; 0x24
 800585a:	f85d fb04 	ldr.w	pc, [sp], #4
 800585e:	bf00      	nop
 8005860:	00003000 	.word	0x00003000
 8005864:	00000002 	.word	0x00000002
 8005868:	40000800 	.word	0x40000800
 800586c:	58024400 	.word	0x58024400
 8005870:	58020c00 	.word	0x58020c00

08005874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005874:	b5d0      	push	{r4, r6, r7, lr}
 8005876:	b0ba      	sub	sp, #232	; 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005878:	2100      	movs	r1, #0
{
 800587a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800587c:	22c0      	movs	r2, #192	; 0xc0
 800587e:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005880:	9108      	str	r1, [sp, #32]
 8005882:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8005886:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800588a:	f00b fa21 	bl	8010cd0 <memset>
  if(huart->Instance==USART3)
 800588e:	4b2e      	ldr	r3, [pc, #184]	; (8005948 <HAL_UART_MspInit+0xd4>)
 8005890:	6822      	ldr	r2, [r4, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d001      	beq.n	800589a <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005896:	b03a      	add	sp, #232	; 0xe8
 8005898:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800589a:	2202      	movs	r2, #2
 800589c:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800589e:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80058a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80058a4:	f005 fadc 	bl	800ae60 <HAL_RCCEx_PeriphCLKConfig>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d149      	bne.n	8005940 <HAL_UART_MspInit+0xcc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80058ac:	4b27      	ldr	r3, [pc, #156]	; (800594c <HAL_UART_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80058ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80058b2:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80058b4:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 80058b6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80058ba:	2600      	movs	r6, #0
 80058bc:	2700      	movs	r7, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 80058be:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80058c2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80058c6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80058ca:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80058ce:	9201      	str	r2, [sp, #4]
 80058d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80058d6:	f042 0202 	orr.w	r2, r2, #2
 80058da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80058de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80058e2:	f002 0202 	and.w	r2, r2, #2
 80058e6:	9202      	str	r2, [sp, #8]
 80058e8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80058ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80058ee:	f042 0208 	orr.w	r2, r2, #8
 80058f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80058f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80058fa:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80058fc:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005900:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005904:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005906:	a904      	add	r1, sp, #16
 8005908:	4811      	ldr	r0, [pc, #68]	; (8005950 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800590a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800590c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005910:	f003 f962 	bl	8008bd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005914:	2302      	movs	r3, #2
 8005916:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800591a:	a904      	add	r1, sp, #16
 800591c:	480d      	ldr	r0, [pc, #52]	; (8005954 <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800591e:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005920:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005924:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005928:	f003 f956 	bl	8008bd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800592c:	2200      	movs	r2, #0
 800592e:	2101      	movs	r1, #1
 8005930:	2027      	movs	r0, #39	; 0x27
 8005932:	f001 fc61 	bl	80071f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005936:	2027      	movs	r0, #39	; 0x27
 8005938:	f001 fc9c 	bl	8007274 <HAL_NVIC_EnableIRQ>
}
 800593c:	b03a      	add	sp, #232	; 0xe8
 800593e:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8005940:	f7fe fc74 	bl	800422c <Error_Handler>
 8005944:	e7b2      	b.n	80058ac <HAL_UART_MspInit+0x38>
 8005946:	bf00      	nop
 8005948:	40004800 	.word	0x40004800
 800594c:	58024400 	.word	0x58024400
 8005950:	58020400 	.word	0x58020400
 8005954:	58020c00 	.word	0x58020c00

08005958 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop

0800595c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800595c:	e7fe      	b.n	800595c <HardFault_Handler>
 800595e:	bf00      	nop

08005960 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005960:	e7fe      	b.n	8005960 <MemManage_Handler>
 8005962:	bf00      	nop

08005964 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005964:	e7fe      	b.n	8005964 <BusFault_Handler>
 8005966:	bf00      	nop

08005968 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005968:	e7fe      	b.n	8005968 <UsageFault_Handler>
 800596a:	bf00      	nop

0800596c <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 800596c:	f000 b966 	b.w	8005c3c <ADC3_IRQHandler>

08005970 <DebugMon_Handler>:
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop

08005974 <PendSV_Handler>:
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop

08005978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005978:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern uint32_t SystemSeconds, SystemMinutes;
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800597a:	f000 f9b7 	bl	8005cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if ((uwTick % 1000) == 0)
 800597e:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <SysTick_Handler+0x3c>)
 8005980:	490d      	ldr	r1, [pc, #52]	; (80059b8 <SysTick_Handler+0x40>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a0d      	ldr	r2, [pc, #52]	; (80059bc <SysTick_Handler+0x44>)
 8005986:	fb01 f303 	mul.w	r3, r1, r3
 800598a:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 800598e:	d310      	bcc.n	80059b2 <SysTick_Handler+0x3a>
	{
		SystemSeconds++;
 8005990:	490b      	ldr	r1, [pc, #44]	; (80059c0 <SysTick_Handler+0x48>)
 8005992:	4a0c      	ldr	r2, [pc, #48]	; (80059c4 <SysTick_Handler+0x4c>)
 8005994:	680b      	ldr	r3, [r1, #0]
		if((SystemSeconds % 60) == 0)
 8005996:	480c      	ldr	r0, [pc, #48]	; (80059c8 <SysTick_Handler+0x50>)
		SystemSeconds++;
 8005998:	3301      	adds	r3, #1
 800599a:	fb03 f202 	mul.w	r2, r3, r2
 800599e:	600b      	str	r3, [r1, #0]
		if((SystemSeconds % 60) == 0)
 80059a0:	ebb0 0fb2 	cmp.w	r0, r2, ror #2
 80059a4:	d305      	bcc.n	80059b2 <SysTick_Handler+0x3a>
		{
			SystemMinutes++;
 80059a6:	4a09      	ldr	r2, [pc, #36]	; (80059cc <SysTick_Handler+0x54>)
			SystemSeconds = 0;
 80059a8:	2000      	movs	r0, #0
			SystemMinutes++;
 80059aa:	6813      	ldr	r3, [r2, #0]
			SystemSeconds = 0;
 80059ac:	6008      	str	r0, [r1, #0]
			SystemMinutes++;
 80059ae:	3301      	adds	r3, #1
 80059b0:	6013      	str	r3, [r2, #0]
		}
	}

  /* USER CODE END SysTick_IRQn 1 */
}
 80059b2:	bd08      	pop	{r3, pc}
 80059b4:	2400c9dc 	.word	0x2400c9dc
 80059b8:	26e978d5 	.word	0x26e978d5
 80059bc:	00418937 	.word	0x00418937
 80059c0:	240072d8 	.word	0x240072d8
 80059c4:	eeeeeeef 	.word	0xeeeeeeef
 80059c8:	04444444 	.word	0x04444444
 80059cc:	240072d4 	.word	0x240072d4

080059d0 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80059d0:	4801      	ldr	r0, [pc, #4]	; (80059d8 <DMA1_Stream0_IRQHandler+0x8>)
 80059d2:	f002 bdb1 	b.w	8008538 <HAL_DMA_IRQHandler>
 80059d6:	bf00      	nop
 80059d8:	2400b51c 	.word	0x2400b51c

080059dc <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80059dc:	4801      	ldr	r0, [pc, #4]	; (80059e4 <DMA1_Stream1_IRQHandler+0x8>)
 80059de:	f002 bdab 	b.w	8008538 <HAL_DMA_IRQHandler>
 80059e2:	bf00      	nop
 80059e4:	2400b594 	.word	0x2400b594

080059e8 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80059e8:	4804      	ldr	r0, [pc, #16]	; (80059fc <ADC_IRQHandler+0x14>)
{
 80059ea:	b508      	push	{r3, lr}
  HAL_ADC_IRQHandler(&hadc1);
 80059ec:	f000 f9dc 	bl	8005da8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80059f0:	4803      	ldr	r0, [pc, #12]	; (8005a00 <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80059f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 80059f6:	f000 b9d7 	b.w	8005da8 <HAL_ADC_IRQHandler>
 80059fa:	bf00      	nop
 80059fc:	2400b43c 	.word	0x2400b43c
 8005a00:	2400b4a0 	.word	0x2400b4a0

08005a04 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005a04:	4801      	ldr	r0, [pc, #4]	; (8005a0c <TIM2_IRQHandler+0x8>)
 8005a06:	f006 bf87 	b.w	800c918 <HAL_TIM_IRQHandler>
 8005a0a:	bf00      	nop
 8005a0c:	2400b648 	.word	0x2400b648

08005a10 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005a10:	4801      	ldr	r0, [pc, #4]	; (8005a18 <USART3_IRQHandler+0x8>)
 8005a12:	f007 b8a9 	b.w	800cb68 <HAL_UART_IRQHandler>
 8005a16:	bf00      	nop
 8005a18:	2400b778 	.word	0x2400b778

08005a1c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SwInt1_Pin);
 8005a1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005a20:	f003 ba1e 	b.w	8008e60 <HAL_GPIO_EXTI_IRQHandler>

08005a24 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8005a24:	4804      	ldr	r0, [pc, #16]	; (8005a38 <TIM6_DAC_IRQHandler+0x14>)
{
 8005a26:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 8005a28:	f001 fd54 	bl	80074d4 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8005a2c:	4803      	ldr	r0, [pc, #12]	; (8005a3c <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8005a32:	f006 bf71 	b.w	800c918 <HAL_TIM_IRQHandler>
 8005a36:	bf00      	nop
 8005a38:	2400b508 	.word	0x2400b508
 8005a3c:	2400b6e0 	.word	0x2400b6e0

08005a40 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005a40:	4801      	ldr	r0, [pc, #4]	; (8005a48 <TIM7_IRQHandler+0x8>)
 8005a42:	f006 bf69 	b.w	800c918 <HAL_TIM_IRQHandler>
 8005a46:	bf00      	nop
 8005a48:	2400b72c 	.word	0x2400b72c

08005a4c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005a4c:	4801      	ldr	r0, [pc, #4]	; (8005a54 <OTG_FS_IRQHandler+0x8>)
 8005a4e:	f003 bb3f 	b.w	80090d0 <HAL_PCD_IRQHandler>
 8005a52:	bf00      	nop
 8005a54:	2400dec0 	.word	0x2400dec0

08005a58 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005a58:	2001      	movs	r0, #1
 8005a5a:	4770      	bx	lr

08005a5c <_kill>:

int _kill(int pid, int sig)
{
 8005a5c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005a5e:	f00b f8ff 	bl	8010c60 <__errno>
 8005a62:	2216      	movs	r2, #22
 8005a64:	4603      	mov	r3, r0
	return -1;
}
 8005a66:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8005a6a:	601a      	str	r2, [r3, #0]
}
 8005a6c:	bd08      	pop	{r3, pc}
 8005a6e:	bf00      	nop

08005a70 <_exit>:

void _exit (int status)
{
 8005a70:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005a72:	f00b f8f5 	bl	8010c60 <__errno>
 8005a76:	2316      	movs	r3, #22
 8005a78:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8005a7a:	e7fe      	b.n	8005a7a <_exit+0xa>

08005a7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a7c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a7e:	1e16      	subs	r6, r2, #0
 8005a80:	dd07      	ble.n	8005a92 <_read+0x16>
 8005a82:	460c      	mov	r4, r1
 8005a84:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8005a86:	f3af 8000 	nop.w
 8005a8a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a8e:	42a5      	cmp	r5, r4
 8005a90:	d1f9      	bne.n	8005a86 <_read+0xa>
	}

return len;
}
 8005a92:	4630      	mov	r0, r6
 8005a94:	bd70      	pop	{r4, r5, r6, pc}
 8005a96:	bf00      	nop

08005a98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a98:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a9a:	1e16      	subs	r6, r2, #0
 8005a9c:	dd07      	ble.n	8005aae <_write+0x16>
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8005aa2:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005aa6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005aaa:	42ac      	cmp	r4, r5
 8005aac:	d1f9      	bne.n	8005aa2 <_write+0xa>
	}
	return len;
}
 8005aae:	4630      	mov	r0, r6
 8005ab0:	bd70      	pop	{r4, r5, r6, pc}
 8005ab2:	bf00      	nop

08005ab4 <_close>:

int _close(int file)
{
	return -1;
}
 8005ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop

08005abc <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8005ac0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8005ac2:	604b      	str	r3, [r1, #4]
}
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop

08005ac8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005ac8:	2001      	movs	r0, #1
 8005aca:	4770      	bx	lr

08005acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005acc:	2000      	movs	r0, #0
 8005ace:	4770      	bx	lr

08005ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ad0:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ad2:	4c0d      	ldr	r4, [pc, #52]	; (8005b08 <_sbrk+0x38>)
{
 8005ad4:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ad6:	490d      	ldr	r1, [pc, #52]	; (8005b0c <_sbrk+0x3c>)
 8005ad8:	4d0d      	ldr	r5, [pc, #52]	; (8005b10 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8005ada:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005adc:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 8005ade:	b12a      	cbz	r2, 8005aec <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ae0:	4413      	add	r3, r2
 8005ae2:	428b      	cmp	r3, r1
 8005ae4:	d808      	bhi.n	8005af8 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8005ae6:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8005ae8:	6023      	str	r3, [r4, #0]
}
 8005aea:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 8005aec:	4809      	ldr	r0, [pc, #36]	; (8005b14 <_sbrk+0x44>)
 8005aee:	4602      	mov	r2, r0
 8005af0:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8005af2:	4413      	add	r3, r2
 8005af4:	428b      	cmp	r3, r1
 8005af6:	d9f6      	bls.n	8005ae6 <_sbrk+0x16>
    errno = ENOMEM;
 8005af8:	f00b f8b2 	bl	8010c60 <__errno>
 8005afc:	230c      	movs	r3, #12
    return (void *)-1;
 8005afe:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8005b02:	6003      	str	r3, [r0, #0]
}
 8005b04:	4610      	mov	r0, r2
 8005b06:	bd38      	pop	{r3, r4, r5, pc}
 8005b08:	2400c9d8 	.word	0x2400c9d8
 8005b0c:	24080000 	.word	0x24080000
 8005b10:	00000420 	.word	0x00000420
 8005b14:	2400e600 	.word	0x2400e600

08005b18 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005b18:	4929      	ldr	r1, [pc, #164]	; (8005bc0 <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005b1a:	4a2a      	ldr	r2, [pc, #168]	; (8005bc4 <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005b1c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8005b24:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005b2a:	6813      	ldr	r3, [r2, #0]
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	2b06      	cmp	r3, #6
 8005b32:	d805      	bhi.n	8005b40 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005b34:	6813      	ldr	r3, [r2, #0]
 8005b36:	f023 030f 	bic.w	r3, r3, #15
 8005b3a:	f043 0307 	orr.w	r3, r3, #7
 8005b3e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005b40:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005b42:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005b44:	4a21      	ldr	r2, [pc, #132]	; (8005bcc <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 8005b46:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005b48:	481e      	ldr	r0, [pc, #120]	; (8005bc4 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8005b4a:	f041 0101 	orr.w	r1, r1, #1
 8005b4e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005b50:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8005b52:	6819      	ldr	r1, [r3, #0]
 8005b54:	400a      	ands	r2, r1
 8005b56:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005b58:	6803      	ldr	r3, [r0, #0]
 8005b5a:	071b      	lsls	r3, r3, #28
 8005b5c:	d505      	bpl.n	8005b6a <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005b5e:	6803      	ldr	r3, [r0, #0]
 8005b60:	f023 030f 	bic.w	r3, r3, #15
 8005b64:	f043 0307 	orr.w	r3, r3, #7
 8005b68:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005b6a:	4b17      	ldr	r3, [pc, #92]	; (8005bc8 <SystemInit+0xb0>)
 8005b6c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005b6e:	4918      	ldr	r1, [pc, #96]	; (8005bd0 <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 8005b70:	4c18      	ldr	r4, [pc, #96]	; (8005bd4 <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 8005b72:	4819      	ldr	r0, [pc, #100]	; (8005bd8 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 8005b74:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8005b76:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8005b78:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8005b7a:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8005b7c:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8005b7e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005b80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005b82:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005b84:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005b86:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005b88:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005b8a:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005b8c:	4c13      	ldr	r4, [pc, #76]	; (8005bdc <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 8005b8e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005b92:	4913      	ldr	r1, [pc, #76]	; (8005be0 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 8005b94:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8005b96:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	4019      	ands	r1, r3
 8005b9c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8005ba0:	d203      	bcs.n	8005baa <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005ba2:	4b10      	ldr	r3, [pc, #64]	; (8005be4 <SystemInit+0xcc>)
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005baa:	490f      	ldr	r1, [pc, #60]	; (8005be8 <SystemInit+0xd0>)
 8005bac:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005bb0:	4b03      	ldr	r3, [pc, #12]	; (8005bc0 <SystemInit+0xa8>)
 8005bb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005bb6:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8005bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005bbc:	609a      	str	r2, [r3, #8]
}
 8005bbe:	4770      	bx	lr
 8005bc0:	e000ed00 	.word	0xe000ed00
 8005bc4:	52002000 	.word	0x52002000
 8005bc8:	58024400 	.word	0x58024400
 8005bcc:	eaf6ed7f 	.word	0xeaf6ed7f
 8005bd0:	01010280 	.word	0x01010280
 8005bd4:	02020200 	.word	0x02020200
 8005bd8:	01ff0000 	.word	0x01ff0000
 8005bdc:	5c001000 	.word	0x5c001000
 8005be0:	ffff0000 	.word	0xffff0000
 8005be4:	51008000 	.word	0x51008000
 8005be8:	52004000 	.word	0x52004000

08005bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c24 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005bf0:	f7ff ff92 	bl	8005b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005bf4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005bf6:	e003      	b.n	8005c00 <LoopCopyDataInit>

08005bf8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005bf8:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8005bfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005bfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005bfe:	3104      	adds	r1, #4

08005c00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005c00:	480a      	ldr	r0, [pc, #40]	; (8005c2c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8005c02:	4b0b      	ldr	r3, [pc, #44]	; (8005c30 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8005c04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005c06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005c08:	d3f6      	bcc.n	8005bf8 <CopyDataInit>
  ldr  r2, =_sbss
 8005c0a:	4a0a      	ldr	r2, [pc, #40]	; (8005c34 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8005c0c:	e002      	b.n	8005c14 <LoopFillZerobss>

08005c0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005c0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005c10:	f842 3b04 	str.w	r3, [r2], #4

08005c14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005c14:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8005c16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005c18:	d3f9      	bcc.n	8005c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005c1a:	f00b f827 	bl	8010c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c1e:	f7fe ff43 	bl	8004aa8 <main>
  bx  lr    
 8005c22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005c24:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8005c28:	0801f8b0 	.word	0x0801f8b0
  ldr  r0, =_sdata
 8005c2c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8005c30:	240005e4 	.word	0x240005e4
  ldr  r2, =_sbss
 8005c34:	24000600 	.word	0x24000600
  ldr  r3, = _ebss
 8005c38:	2400e5fc 	.word	0x2400e5fc

08005c3c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c3c:	e7fe      	b.n	8005c3c <ADC3_IRQHandler>
	...

08005c40 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005c40:	4b0f      	ldr	r3, [pc, #60]	; (8005c80 <HAL_InitTick+0x40>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	b90b      	cbnz	r3, 8005c4a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8005c46:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8005c48:	4770      	bx	lr
{
 8005c4a:	b510      	push	{r4, lr}
 8005c4c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005c4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c52:	4a0c      	ldr	r2, [pc, #48]	; (8005c84 <HAL_InitTick+0x44>)
 8005c54:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c58:	6810      	ldr	r0, [r2, #0]
 8005c5a:	fbb0 f0f3 	udiv	r0, r0, r3
 8005c5e:	f001 fb17 	bl	8007290 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c62:	2c0f      	cmp	r4, #15
 8005c64:	d800      	bhi.n	8005c68 <HAL_InitTick+0x28>
 8005c66:	b108      	cbz	r0, 8005c6c <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8005c68:	2001      	movs	r0, #1
}
 8005c6a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4621      	mov	r1, r4
 8005c70:	f04f 30ff 	mov.w	r0, #4294967295
 8005c74:	f001 fac0 	bl	80071f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c78:	4b03      	ldr	r3, [pc, #12]	; (8005c88 <HAL_InitTick+0x48>)
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	601c      	str	r4, [r3, #0]
}
 8005c7e:	bd10      	pop	{r4, pc}
 8005c80:	24000318 	.word	0x24000318
 8005c84:	24000310 	.word	0x24000310
 8005c88:	2400031c 	.word	0x2400031c

08005c8c <HAL_Init>:
{
 8005c8c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c8e:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c90:	4c12      	ldr	r4, [pc, #72]	; (8005cdc <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c92:	f001 fa9f 	bl	80071d4 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c96:	f004 fd57 	bl	800a748 <HAL_RCC_GetSysClockFreq>
 8005c9a:	4b11      	ldr	r3, [pc, #68]	; (8005ce0 <HAL_Init+0x54>)
 8005c9c:	4911      	ldr	r1, [pc, #68]	; (8005ce4 <HAL_Init+0x58>)
 8005c9e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ca0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ca2:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ca6:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005caa:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cac:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005cae:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8005cb2:	490d      	ldr	r1, [pc, #52]	; (8005ce8 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cb4:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005cb8:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cba:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8005cbe:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005cc0:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cc2:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005cc4:	f7ff ffbc 	bl	8005c40 <HAL_InitTick>
 8005cc8:	b110      	cbz	r0, 8005cd0 <HAL_Init+0x44>
    return HAL_ERROR;
 8005cca:	2401      	movs	r4, #1
}
 8005ccc:	4620      	mov	r0, r4
 8005cce:	bd10      	pop	{r4, pc}
 8005cd0:	4604      	mov	r4, r0
  HAL_MspInit();
 8005cd2:	f7ff fbb9 	bl	8005448 <HAL_MspInit>
}
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	bd10      	pop	{r4, pc}
 8005cda:	bf00      	nop
 8005cdc:	24000314 	.word	0x24000314
 8005ce0:	58024400 	.word	0x58024400
 8005ce4:	0801b244 	.word	0x0801b244
 8005ce8:	24000310 	.word	0x24000310

08005cec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005cec:	4a03      	ldr	r2, [pc, #12]	; (8005cfc <HAL_IncTick+0x10>)
 8005cee:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <HAL_IncTick+0x14>)
 8005cf0:	6811      	ldr	r1, [r2, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	440b      	add	r3, r1
 8005cf6:	6013      	str	r3, [r2, #0]
}
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	2400c9dc 	.word	0x2400c9dc
 8005d00:	24000318 	.word	0x24000318

08005d04 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005d04:	4b01      	ldr	r3, [pc, #4]	; (8005d0c <HAL_GetTick+0x8>)
 8005d06:	6818      	ldr	r0, [r3, #0]
}
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	2400c9dc 	.word	0x2400c9dc

08005d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005d14:	f7ff fff6 	bl	8005d04 <HAL_GetTick>
 8005d18:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d1a:	1c63      	adds	r3, r4, #1
 8005d1c:	d002      	beq.n	8005d24 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d1e:	4b04      	ldr	r3, [pc, #16]	; (8005d30 <HAL_Delay+0x20>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d24:	f7ff ffee 	bl	8005d04 <HAL_GetTick>
 8005d28:	1b43      	subs	r3, r0, r5
 8005d2a:	42a3      	cmp	r3, r4
 8005d2c:	d3fa      	bcc.n	8005d24 <HAL_Delay+0x14>
  {
  }
}
 8005d2e:	bd38      	pop	{r3, r4, r5, pc}
 8005d30:	24000318 	.word	0x24000318

08005d34 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8005d34:	4b01      	ldr	r3, [pc, #4]	; (8005d3c <HAL_GetREVID+0x8>)
 8005d36:	6818      	ldr	r0, [r3, #0]
}
 8005d38:	0c00      	lsrs	r0, r0, #16
 8005d3a:	4770      	bx	lr
 8005d3c:	5c001000 	.word	0x5c001000

08005d40 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8005d40:	4a03      	ldr	r2, [pc, #12]	; (8005d50 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 8005d42:	6813      	ldr	r3, [r2, #0]
 8005d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d48:	4318      	orrs	r0, r3
 8005d4a:	6010      	str	r0, [r2, #0]
}
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	58003c00 	.word	0x58003c00

08005d54 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8005d54:	4a03      	ldr	r2, [pc, #12]	; (8005d64 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8005d56:	6813      	ldr	r3, [r2, #0]
 8005d58:	f023 0302 	bic.w	r3, r3, #2
 8005d5c:	4318      	orrs	r0, r3
 8005d5e:	6010      	str	r0, [r2, #0]
}
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	58003c00 	.word	0x58003c00

08005d68 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8005d68:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8005d6a:	4c0a      	ldr	r4, [pc, #40]	; (8005d94 <HAL_SYSCFG_EnableVREFBUF+0x2c>)
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	f043 0301 	orr.w	r3, r3, #1
 8005d72:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d74:	f7ff ffc6 	bl	8005d04 <HAL_GetTick>
 8005d78:	4605      	mov	r5, r0

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8005d7a:	e004      	b.n	8005d86 <HAL_SYSCFG_EnableVREFBUF+0x1e>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8005d7c:	f7ff ffc2 	bl	8005d04 <HAL_GetTick>
 8005d80:	1b40      	subs	r0, r0, r5
 8005d82:	280a      	cmp	r0, #10
 8005d84:	d804      	bhi.n	8005d90 <HAL_SYSCFG_EnableVREFBUF+0x28>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	071b      	lsls	r3, r3, #28
 8005d8a:	d5f7      	bpl.n	8005d7c <HAL_SYSCFG_EnableVREFBUF+0x14>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8005d8c:	2000      	movs	r0, #0
}
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8005d90:	2003      	movs	r0, #3
}
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	58003c00 	.word	0x58003c00

08005d98 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005d98:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005d9a:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005d9c:	f7fd fea2 	bl	8003ae4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005da0:	bd08      	pop	{r3, pc}
 8005da2:	bf00      	nop

08005da4 <HAL_ADC_ErrorCallback>:
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop

08005da8 <HAL_ADC_IRQHandler>:
{
 8005da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005daa:	4a90      	ldr	r2, [pc, #576]	; (8005fec <HAL_ADC_IRQHandler+0x244>)
{
 8005dac:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005dae:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005db0:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005db2:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005db4:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005db6:	f000 8095 	beq.w	8005ee4 <HAL_ADC_IRQHandler+0x13c>
 8005dba:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	f000 8090 	beq.w	8005ee4 <HAL_ADC_IRQHandler+0x13c>
 8005dc4:	4a8a      	ldr	r2, [pc, #552]	; (8005ff0 <HAL_ADC_IRQHandler+0x248>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005dc6:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005dc8:	07a9      	lsls	r1, r5, #30
 8005dca:	f007 071f 	and.w	r7, r7, #31
 8005dce:	d502      	bpl.n	8005dd6 <HAL_ADC_IRQHandler+0x2e>
 8005dd0:	07b2      	lsls	r2, r6, #30
 8005dd2:	f100 80aa 	bmi.w	8005f2a <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005dd6:	0769      	lsls	r1, r5, #29
 8005dd8:	d579      	bpl.n	8005ece <HAL_ADC_IRQHandler+0x126>
 8005dda:	0772      	lsls	r2, r6, #29
 8005ddc:	d577      	bpl.n	8005ece <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005dde:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005de0:	06d2      	lsls	r2, r2, #27
 8005de2:	d403      	bmi.n	8005dec <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005de4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dea:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8005df2:	d11c      	bne.n	8005e2e <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005df4:	4a7f      	ldr	r2, [pc, #508]	; (8005ff4 <HAL_ADC_IRQHandler+0x24c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	f000 80e8 	beq.w	8005fcc <HAL_ADC_IRQHandler+0x224>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005dfc:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005dfe:	0490      	lsls	r0, r2, #18
 8005e00:	d415      	bmi.n	8005e2e <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	0711      	lsls	r1, r2, #28
 8005e06:	d512      	bpl.n	8005e2e <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	0752      	lsls	r2, r2, #29
 8005e0c:	f100 80f6 	bmi.w	8005ffc <HAL_ADC_IRQHandler+0x254>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	f022 020c 	bic.w	r2, r2, #12
 8005e16:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e1e:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005e20:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e22:	04db      	lsls	r3, r3, #19
 8005e24:	d403      	bmi.n	8005e2e <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f7fd fe3a 	bl	8003aa8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005e34:	6823      	ldr	r3, [r4, #0]
 8005e36:	220c      	movs	r2, #12
 8005e38:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005e3a:	06a8      	lsls	r0, r5, #26
 8005e3c:	d54d      	bpl.n	8005eda <HAL_ADC_IRQHandler+0x132>
 8005e3e:	06b1      	lsls	r1, r6, #26
 8005e40:	d54b      	bpl.n	8005eda <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e42:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005e44:	06d1      	lsls	r1, r2, #27
 8005e46:	d403      	bmi.n	8005e50 <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005e48:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005e4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e4e:	6562      	str	r2, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005e50:	4968      	ldr	r1, [pc, #416]	; (8005ff4 <HAL_ADC_IRQHandler+0x24c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e54:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005e56:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005e58:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 8005e5c:	d073      	beq.n	8005f46 <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005e5e:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005e60:	b9d2      	cbnz	r2, 8005e98 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005e62:	018a      	lsls	r2, r1, #6
 8005e64:	f100 80aa 	bmi.w	8005fbc <HAL_ADC_IRQHandler+0x214>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	0650      	lsls	r0, r2, #25
 8005e6c:	d514      	bpl.n	8005e98 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005e6e:	0289      	lsls	r1, r1, #10
 8005e70:	d412      	bmi.n	8005e98 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	0712      	lsls	r2, r2, #28
 8005e76:	f100 80cc 	bmi.w	8006012 <HAL_ADC_IRQHandler+0x26a>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e80:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005e82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e88:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005e8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e8c:	05d8      	lsls	r0, r3, #23
 8005e8e:	d403      	bmi.n	8005e98 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e92:	f043 0301 	orr.w	r3, r3, #1
 8005e96:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f001 f929 	bl	80070f0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	2260      	movs	r2, #96	; 0x60
 8005ea2:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005ea4:	0629      	lsls	r1, r5, #24
 8005ea6:	d501      	bpl.n	8005eac <HAL_ADC_IRQHandler+0x104>
 8005ea8:	0632      	lsls	r2, r6, #24
 8005eaa:	d460      	bmi.n	8005f6e <HAL_ADC_IRQHandler+0x1c6>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005eac:	05e8      	lsls	r0, r5, #23
 8005eae:	d501      	bpl.n	8005eb4 <HAL_ADC_IRQHandler+0x10c>
 8005eb0:	05f1      	lsls	r1, r6, #23
 8005eb2:	d467      	bmi.n	8005f84 <HAL_ADC_IRQHandler+0x1dc>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005eb4:	05aa      	lsls	r2, r5, #22
 8005eb6:	d501      	bpl.n	8005ebc <HAL_ADC_IRQHandler+0x114>
 8005eb8:	05b0      	lsls	r0, r6, #22
 8005eba:	d44c      	bmi.n	8005f56 <HAL_ADC_IRQHandler+0x1ae>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005ebc:	06e9      	lsls	r1, r5, #27
 8005ebe:	d501      	bpl.n	8005ec4 <HAL_ADC_IRQHandler+0x11c>
 8005ec0:	06f2      	lsls	r2, r6, #27
 8005ec2:	d411      	bmi.n	8005ee8 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005ec4:	0568      	lsls	r0, r5, #21
 8005ec6:	d501      	bpl.n	8005ecc <HAL_ADC_IRQHandler+0x124>
 8005ec8:	0571      	lsls	r1, r6, #21
 8005eca:	d467      	bmi.n	8005f9c <HAL_ADC_IRQHandler+0x1f4>
}
 8005ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005ece:	0728      	lsls	r0, r5, #28
 8005ed0:	d5b3      	bpl.n	8005e3a <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005ed2:	0731      	lsls	r1, r6, #28
 8005ed4:	d483      	bmi.n	8005dde <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005ed6:	06a8      	lsls	r0, r5, #26
 8005ed8:	d4b1      	bmi.n	8005e3e <HAL_ADC_IRQHandler+0x96>
 8005eda:	066a      	lsls	r2, r5, #25
 8005edc:	d5e2      	bpl.n	8005ea4 <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005ede:	0670      	lsls	r0, r6, #25
 8005ee0:	d5e0      	bpl.n	8005ea4 <HAL_ADC_IRQHandler+0xfc>
 8005ee2:	e7ae      	b.n	8005e42 <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ee4:	4a44      	ldr	r2, [pc, #272]	; (8005ff8 <HAL_ADC_IRQHandler+0x250>)
 8005ee6:	e76e      	b.n	8005dc6 <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005ee8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005eea:	b17a      	cbz	r2, 8005f0c <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005eec:	2f00      	cmp	r7, #0
 8005eee:	d072      	beq.n	8005fd6 <HAL_ADC_IRQHandler+0x22e>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005ef0:	4a3e      	ldr	r2, [pc, #248]	; (8005fec <HAL_ADC_IRQHandler+0x244>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	f000 808b 	beq.w	800600e <HAL_ADC_IRQHandler+0x266>
 8005ef8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005efc:	4293      	cmp	r3, r2
 8005efe:	f000 8086 	beq.w	800600e <HAL_ADC_IRQHandler+0x266>
 8005f02:	4a3b      	ldr	r2, [pc, #236]	; (8005ff0 <HAL_ADC_IRQHandler+0x248>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8005f04:	6892      	ldr	r2, [r2, #8]
 8005f06:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8005f0a:	d00b      	beq.n	8005f24 <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005f0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_ADC_ErrorCallback(hadc);
 8005f0e:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005f10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f14:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005f16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f18:	f043 0302 	orr.w	r3, r3, #2
 8005f1c:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8005f1e:	f7ff ff41 	bl	8005da4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	2210      	movs	r2, #16
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	e7cc      	b.n	8005ec4 <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f2c:	06d8      	lsls	r0, r3, #27
 8005f2e:	d403      	bmi.n	8005f38 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005f30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f36:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f001 f8e1 	bl	8007100 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	2202      	movs	r2, #2
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	e747      	b.n	8005dd6 <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005f46:	1fb9      	subs	r1, r7, #6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005f48:	2901      	cmp	r1, #1
 8005f4a:	d988      	bls.n	8005e5e <HAL_ADC_IRQHandler+0xb6>
 8005f4c:	2f00      	cmp	r7, #0
 8005f4e:	d086      	beq.n	8005e5e <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005f50:	4926      	ldr	r1, [pc, #152]	; (8005fec <HAL_ADC_IRQHandler+0x244>)
 8005f52:	68c9      	ldr	r1, [r1, #12]
 8005f54:	e784      	b.n	8005e60 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005f56:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005f58:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005f5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f5e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005f60:	f001 f8cc 	bl	80070fc <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	e7a6      	b.n	8005ebc <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005f6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005f70:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f76:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005f78:	f7fd fde2 	bl	8003b40 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	2280      	movs	r2, #128	; 0x80
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	e793      	b.n	8005eac <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005f84:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005f86:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f8c:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005f8e:	f001 f8b3 	bl	80070f8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	e78b      	b.n	8005eb4 <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005f9c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005f9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005fa2:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005fa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fa8:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005faa:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005fac:	f042 0208 	orr.w	r2, r2, #8
 8005fb0:	65a2      	str	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005fb2:	6019      	str	r1, [r3, #0]
}
 8005fb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005fb8:	f001 b89c 	b.w	80070f4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005fbc:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005fc0:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005fc4:	4302      	orrs	r2, r0
 8005fc6:	f47f af67 	bne.w	8005e98 <HAL_ADC_IRQHandler+0xf0>
 8005fca:	e74d      	b.n	8005e68 <HAL_ADC_IRQHandler+0xc0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005fcc:	2f09      	cmp	r7, #9
 8005fce:	d906      	bls.n	8005fde <HAL_ADC_IRQHandler+0x236>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005fd0:	4a06      	ldr	r2, [pc, #24]	; (8005fec <HAL_ADC_IRQHandler+0x244>)
 8005fd2:	68d2      	ldr	r2, [r2, #12]
 8005fd4:	e713      	b.n	8005dfe <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	0797      	lsls	r7, r2, #30
 8005fda:	d0a3      	beq.n	8005f24 <HAL_ADC_IRQHandler+0x17c>
 8005fdc:	e796      	b.n	8005f0c <HAL_ADC_IRQHandler+0x164>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005fde:	f240 2221 	movw	r2, #545	; 0x221
 8005fe2:	40fa      	lsrs	r2, r7
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005fe4:	07d2      	lsls	r2, r2, #31
 8005fe6:	f53f af09 	bmi.w	8005dfc <HAL_ADC_IRQHandler+0x54>
 8005fea:	e7f1      	b.n	8005fd0 <HAL_ADC_IRQHandler+0x228>
 8005fec:	40022000 	.word	0x40022000
 8005ff0:	58026300 	.word	0x58026300
 8005ff4:	40022100 	.word	0x40022100
 8005ff8:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ffc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ffe:	f043 0310 	orr.w	r3, r3, #16
 8006002:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006004:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006006:	f043 0301 	orr.w	r3, r3, #1
 800600a:	65a3      	str	r3, [r4, #88]	; 0x58
 800600c:	e70f      	b.n	8005e2e <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800600e:	4a05      	ldr	r2, [pc, #20]	; (8006024 <HAL_ADC_IRQHandler+0x27c>)
 8006010:	e778      	b.n	8005f04 <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006012:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006014:	f043 0310 	orr.w	r3, r3, #16
 8006018:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800601a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800601c:	f043 0301 	orr.w	r3, r3, #1
 8006020:	65a3      	str	r3, [r4, #88]	; 0x58
 8006022:	e739      	b.n	8005e98 <HAL_ADC_IRQHandler+0xf0>
 8006024:	40022300 	.word	0x40022300

08006028 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006028:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800602a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800602c:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 8006032:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006034:	d11d      	bne.n	8006072 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006036:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800603c:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800603e:	680a      	ldr	r2, [r1, #0]
 8006040:	f012 0f08 	tst.w	r2, #8
 8006044:	68ca      	ldr	r2, [r1, #12]
 8006046:	d01b      	beq.n	8006080 <ADC_DMAConvCplt+0x58>
 8006048:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800604c:	d10d      	bne.n	800606a <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800604e:	68ca      	ldr	r2, [r1, #12]
 8006050:	0494      	lsls	r4, r2, #18
 8006052:	d40a      	bmi.n	800606a <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800605a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800605c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800605e:	04d1      	lsls	r1, r2, #19
 8006060:	d403      	bmi.n	800606a <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006062:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006064:	f042 0201 	orr.w	r2, r2, #1
 8006068:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800606a:	4618      	mov	r0, r3
 800606c:	f7fd fd1c 	bl	8003aa8 <HAL_ADC_ConvCpltCallback>
}
 8006070:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006072:	06d2      	lsls	r2, r2, #27
 8006074:	d40a      	bmi.n	800608c <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800607c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607e:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006080:	0790      	lsls	r0, r2, #30
 8006082:	d0e7      	beq.n	8006054 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8006084:	4618      	mov	r0, r3
 8006086:	f7fd fd0f 	bl	8003aa8 <HAL_ADC_ConvCpltCallback>
 800608a:	e7f1      	b.n	8006070 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fe89 	bl	8005da4 <HAL_ADC_ErrorCallback>
}
 8006092:	bd10      	pop	{r4, pc}

08006094 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006094:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006096:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006098:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800609a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800609e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80060a0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80060a2:	f043 0304 	orr.w	r3, r3, #4
 80060a6:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80060a8:	f7ff fe7c 	bl	8005da4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80060ac:	bd08      	pop	{r3, pc}
 80060ae:	bf00      	nop

080060b0 <HAL_ADC_ConfigChannel>:
{
 80060b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 80060b2:	2200      	movs	r2, #0
{
 80060b4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80060b6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80060b8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80060bc:	2a01      	cmp	r2, #1
 80060be:	f000 813b 	beq.w	8006338 <HAL_ADC_ConfigChannel+0x288>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060c6:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80060c8:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060cc:	6894      	ldr	r4, [r2, #8]
 80060ce:	0764      	lsls	r4, r4, #29
 80060d0:	f100 8099 	bmi.w	8006206 <HAL_ADC_ConfigChannel+0x156>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80060d4:	680c      	ldr	r4, [r1, #0]
 80060d6:	f3c4 0513 	ubfx	r5, r4, #0, #20
 80060da:	2d00      	cmp	r5, #0
 80060dc:	f040 809e 	bne.w	800621c <HAL_ADC_ConfigChannel+0x16c>
 80060e0:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80060e4:	40a0      	lsls	r0, r4
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80060e6:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(*preg,
 80060e8:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80060ec:	69d6      	ldr	r6, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80060ee:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 80060f2:	4330      	orrs	r0, r6
 80060f4:	f00c 0c0c 	and.w	ip, ip, #12
 80060f8:	61d0      	str	r0, [r2, #28]
  MODIFY_REG(*preg,
 80060fa:	f005 001f 	and.w	r0, r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80060fe:	f102 0530 	add.w	r5, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8006102:	4084      	lsls	r4, r0
 8006104:	fa0e fe00 	lsl.w	lr, lr, r0
 8006108:	f85c 0005 	ldr.w	r0, [ip, r5]
 800610c:	ea20 000e 	bic.w	r0, r0, lr
 8006110:	4304      	orrs	r4, r0
 8006112:	f84c 4005 	str.w	r4, [ip, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006116:	6890      	ldr	r0, [r2, #8]
 8006118:	0740      	lsls	r0, r0, #29
 800611a:	d47d      	bmi.n	8006218 <HAL_ADC_ConfigChannel+0x168>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800611c:	6895      	ldr	r5, [r2, #8]
 800611e:	f015 0508 	ands.w	r5, r5, #8
 8006122:	d156      	bne.n	80061d2 <HAL_ADC_ConfigChannel+0x122>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006124:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(*preg,
 8006126:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006128:	f102 0614 	add.w	r6, r2, #20
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800612c:	4fb7      	ldr	r7, [pc, #732]	; (800640c <HAL_ADC_ConfigChannel+0x35c>)
 800612e:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8006132:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006136:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 800613a:	fa00 fe04 	lsl.w	lr, r0, r4
 800613e:	6888      	ldr	r0, [r1, #8]
 8006140:	fa00 f404 	lsl.w	r4, r0, r4
 8006144:	f85c 0006 	ldr.w	r0, [ip, r6]
 8006148:	ea20 000e 	bic.w	r0, r0, lr
 800614c:	4320      	orrs	r0, r4
 800614e:	f84c 0006 	str.w	r0, [ip, r6]
 8006152:	6838      	ldr	r0, [r7, #0]
 8006154:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8006158:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 800615c:	f000 8095 	beq.w	800628a <HAL_ADC_ConfigChannel+0x1da>
 8006160:	68d0      	ldr	r0, [r2, #12]
 8006162:	68d6      	ldr	r6, [r2, #12]
 8006164:	06c7      	lsls	r7, r0, #27
 8006166:	f100 8107 	bmi.w	8006378 <HAL_ADC_ConfigChannel+0x2c8>
 800616a:	f3c6 0682 	ubfx	r6, r6, #2, #3
 800616e:	6948      	ldr	r0, [r1, #20]
 8006170:	0076      	lsls	r6, r6, #1
 8006172:	fa00 f606 	lsl.w	r6, r0, r6
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006176:	690f      	ldr	r7, [r1, #16]
 8006178:	2f04      	cmp	r7, #4
 800617a:	f000 80e0 	beq.w	800633e <HAL_ADC_ConfigChannel+0x28e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800617e:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 8006182:	6808      	ldr	r0, [r1, #0]
 8006184:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8006188:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800618c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8006190:	ea40 000c 	orr.w	r0, r0, ip
 8006194:	4330      	orrs	r0, r6
 8006196:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800619a:	7e48      	ldrb	r0, [r1, #25]
 800619c:	690e      	ldr	r6, [r1, #16]
 800619e:	2801      	cmp	r0, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80061a0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80061a4:	bf0c      	ite	eq
 80061a6:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80061aa:	2700      	movne	r7, #0
 80061ac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80061b0:	4338      	orrs	r0, r7
 80061b2:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80061b6:	7e0c      	ldrb	r4, [r1, #24]
 80061b8:	6908      	ldr	r0, [r1, #16]
 80061ba:	2c01      	cmp	r4, #1
 80061bc:	d104      	bne.n	80061c8 <HAL_ADC_ConfigChannel+0x118>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80061be:	f000 001f 	and.w	r0, r0, #31
 80061c2:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80061c6:	4085      	lsls	r5, r0
 80061c8:	6910      	ldr	r0, [r2, #16]
 80061ca:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 80061ce:	4305      	orrs	r5, r0
 80061d0:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80061d2:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061d4:	07c4      	lsls	r4, r0, #31
 80061d6:	d414      	bmi.n	8006202 <HAL_ADC_ConfigChannel+0x152>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80061d8:	68ce      	ldr	r6, [r1, #12]
 80061da:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80061dc:	f006 0718 	and.w	r7, r6, #24
 80061e0:	488b      	ldr	r0, [pc, #556]	; (8006410 <HAL_ADC_ConfigChannel+0x360>)
 80061e2:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 80061e6:	40f8      	lsrs	r0, r7
 80061e8:	f3c4 0713 	ubfx	r7, r4, #0, #20
 80061ec:	4020      	ands	r0, r4
 80061ee:	ea25 0507 	bic.w	r5, r5, r7
 80061f2:	4328      	orrs	r0, r5
 80061f4:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80061f8:	4886      	ldr	r0, [pc, #536]	; (8006414 <HAL_ADC_ConfigChannel+0x364>)
 80061fa:	4286      	cmp	r6, r0
 80061fc:	d04d      	beq.n	800629a <HAL_ADC_ConfigChannel+0x1ea>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80061fe:	2c00      	cmp	r4, #0
 8006200:	db15      	blt.n	800622e <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006202:	2000      	movs	r0, #0
 8006204:	e003      	b.n	800620e <HAL_ADC_ConfigChannel+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006206:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006208:	f042 0220 	orr.w	r2, r2, #32
 800620c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8006214:	b003      	add	sp, #12
 8006216:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006218:	6890      	ldr	r0, [r2, #8]
 800621a:	e7da      	b.n	80061d2 <HAL_ADC_ConfigChannel+0x122>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800621c:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006220:	b115      	cbz	r5, 8006228 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8006222:	fab5 f585 	clz	r5, r5
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006226:	40a8      	lsls	r0, r5
 8006228:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800622c:	e75b      	b.n	80060e6 <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800622e:	497a      	ldr	r1, [pc, #488]	; (8006418 <HAL_ADC_ConfigChannel+0x368>)
 8006230:	428a      	cmp	r2, r1
 8006232:	f000 80c7 	beq.w	80063c4 <HAL_ADC_ConfigChannel+0x314>
 8006236:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800623a:	428a      	cmp	r2, r1
 800623c:	f000 80c2 	beq.w	80063c4 <HAL_ADC_ConfigChannel+0x314>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006240:	4d76      	ldr	r5, [pc, #472]	; (800641c <HAL_ADC_ConfigChannel+0x36c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006242:	4877      	ldr	r0, [pc, #476]	; (8006420 <HAL_ADC_ConfigChannel+0x370>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006244:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006246:	6880      	ldr	r0, [r0, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006248:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800624c:	43c0      	mvns	r0, r0
 800624e:	f000 0001 	and.w	r0, r0, #1
 8006252:	2800      	cmp	r0, #0
 8006254:	f000 80c5 	beq.w	80063e2 <HAL_ADC_ConfigChannel+0x332>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006258:	4872      	ldr	r0, [pc, #456]	; (8006424 <HAL_ADC_ConfigChannel+0x374>)
 800625a:	4284      	cmp	r4, r0
 800625c:	f000 810e 	beq.w	800647c <HAL_ADC_ConfigChannel+0x3cc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006260:	4871      	ldr	r0, [pc, #452]	; (8006428 <HAL_ADC_ConfigChannel+0x378>)
 8006262:	4284      	cmp	r4, r0
 8006264:	f000 812d 	beq.w	80064c2 <HAL_ADC_ConfigChannel+0x412>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006268:	4870      	ldr	r0, [pc, #448]	; (800642c <HAL_ADC_ConfigChannel+0x37c>)
 800626a:	4284      	cmp	r4, r0
 800626c:	d1c9      	bne.n	8006202 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 800626e:	0249      	lsls	r1, r1, #9
 8006270:	d4c7      	bmi.n	8006202 <HAL_ADC_ConfigChannel+0x152>
 8006272:	496b      	ldr	r1, [pc, #428]	; (8006420 <HAL_ADC_ConfigChannel+0x370>)
 8006274:	428a      	cmp	r2, r1
 8006276:	d1c4      	bne.n	8006202 <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006278:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800627a:	2000      	movs	r0, #0
 800627c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8006280:	4332      	orrs	r2, r6
 8006282:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006286:	60aa      	str	r2, [r5, #8]
}
 8006288:	e7c1      	b.n	800620e <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800628a:	68d6      	ldr	r6, [r2, #12]
 800628c:	6948      	ldr	r0, [r1, #20]
 800628e:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8006292:	0076      	lsls	r6, r6, #1
 8006294:	fa00 f606 	lsl.w	r6, r0, r6
 8006298:	e76d      	b.n	8006176 <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800629a:	2f00      	cmp	r7, #0
 800629c:	d073      	beq.n	8006386 <HAL_ADC_ConfigChannel+0x2d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800629e:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 80062a2:	2800      	cmp	r0, #0
 80062a4:	f000 80c6 	beq.w	8006434 <HAL_ADC_ConfigChannel+0x384>
  return __builtin_clz(value);
 80062a8:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062ac:	3001      	adds	r0, #1
 80062ae:	f000 001f 	and.w	r0, r0, #31
 80062b2:	2809      	cmp	r0, #9
 80062b4:	f240 80be 	bls.w	8006434 <HAL_ADC_ConfigChannel+0x384>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b8:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 80062bc:	2800      	cmp	r0, #0
 80062be:	f000 8114 	beq.w	80064ea <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80062c2:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80062c6:	3001      	adds	r0, #1
 80062c8:	0680      	lsls	r0, r0, #26
 80062ca:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ce:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80062d2:	2d00      	cmp	r5, #0
 80062d4:	f000 8107 	beq.w	80064e6 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 80062d8:	fab5 f585 	clz	r5, r5
 80062dc:	2601      	movs	r6, #1
 80062de:	3501      	adds	r5, #1
 80062e0:	f005 051f 	and.w	r5, r5, #31
 80062e4:	fa06 f505 	lsl.w	r5, r6, r5
 80062e8:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ea:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80062ee:	2c00      	cmp	r4, #0
 80062f0:	f000 80f7 	beq.w	80064e2 <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 80062f4:	fab4 f484 	clz	r4, r4
 80062f8:	f06f 061d 	mvn.w	r6, #29
 80062fc:	1c60      	adds	r0, r4, #1
 80062fe:	f000 041f 	and.w	r4, r0, #31
 8006302:	2003      	movs	r0, #3
 8006304:	fb10 6004 	smlabb	r0, r0, r4, r6
 8006308:	0500      	lsls	r0, r0, #20
 800630a:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800630e:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 8006310:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006312:	f102 0514 	add.w	r5, r2, #20
 8006316:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
 8006318:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800631c:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8006320:	fa04 f700 	lsl.w	r7, r4, r0
 8006324:	5974      	ldr	r4, [r6, r5]
 8006326:	ea24 0407 	bic.w	r4, r4, r7
 800632a:	688f      	ldr	r7, [r1, #8]
 800632c:	fa07 f000 	lsl.w	r0, r7, r0
 8006330:	4320      	orrs	r0, r4
 8006332:	5170      	str	r0, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006334:	680c      	ldr	r4, [r1, #0]
}
 8006336:	e762      	b.n	80061fe <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8006338:	2002      	movs	r0, #2
}
 800633a:	b003      	add	sp, #12
 800633c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800633e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8006340:	680c      	ldr	r4, [r1, #0]
 8006342:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006346:	06a5      	lsls	r5, r4, #26
 8006348:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 800634c:	d030      	beq.n	80063b0 <HAL_ADC_ConfigChannel+0x300>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800634e:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8006350:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006354:	4285      	cmp	r5, r0
 8006356:	d026      	beq.n	80063a6 <HAL_ADC_ConfigChannel+0x2f6>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006358:	6e90      	ldr	r0, [r2, #104]	; 0x68
 800635a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800635e:	4285      	cmp	r5, r0
 8006360:	d02b      	beq.n	80063ba <HAL_ADC_ConfigChannel+0x30a>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006362:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8006364:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006368:	4285      	cmp	r5, r0
 800636a:	f47f af32 	bne.w	80061d2 <HAL_ADC_ConfigChannel+0x122>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800636e:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8006370:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006374:	66d0      	str	r0, [r2, #108]	; 0x6c
 8006376:	e72c      	b.n	80061d2 <HAL_ADC_ConfigChannel+0x122>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006378:	0876      	lsrs	r6, r6, #1
 800637a:	6948      	ldr	r0, [r1, #20]
 800637c:	f006 0608 	and.w	r6, r6, #8
 8006380:	fa00 f606 	lsl.w	r6, r0, r6
 8006384:	e6f7      	b.n	8006176 <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006386:	0ea4      	lsrs	r4, r4, #26
 8006388:	3401      	adds	r4, #1
 800638a:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800638e:	2e09      	cmp	r6, #9
 8006390:	d82d      	bhi.n	80063ee <HAL_ADC_ConfigChannel+0x33e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006392:	06a5      	lsls	r5, r4, #26
 8006394:	2001      	movs	r0, #1
 8006396:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800639a:	40b0      	lsls	r0, r6
 800639c:	4305      	orrs	r5, r0
 800639e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80063a2:	0500      	lsls	r0, r0, #20
 80063a4:	e7b3      	b.n	800630e <HAL_ADC_ConfigChannel+0x25e>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80063a6:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80063a8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80063ac:	6650      	str	r0, [r2, #100]	; 0x64
 80063ae:	e7d3      	b.n	8006358 <HAL_ADC_ConfigChannel+0x2a8>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80063b0:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80063b2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80063b6:	6610      	str	r0, [r2, #96]	; 0x60
 80063b8:	e7c9      	b.n	800634e <HAL_ADC_ConfigChannel+0x29e>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80063ba:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80063bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80063c0:	6690      	str	r0, [r2, #104]	; 0x68
 80063c2:	e7ce      	b.n	8006362 <HAL_ADC_ConfigChannel+0x2b2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80063c4:	4814      	ldr	r0, [pc, #80]	; (8006418 <HAL_ADC_ConfigChannel+0x368>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80063c6:	4d1a      	ldr	r5, [pc, #104]	; (8006430 <HAL_ADC_ConfigChannel+0x380>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80063c8:	f500 7080 	add.w	r0, r0, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80063cc:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80063ce:	f850 6cf8 	ldr.w	r6, [r0, #-248]
 80063d2:	6880      	ldr	r0, [r0, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80063d4:	4330      	orrs	r0, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80063d6:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
 80063da:	43c0      	mvns	r0, r0
 80063dc:	f000 0001 	and.w	r0, r0, #1
 80063e0:	e737      	b.n	8006252 <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80063e4:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063e6:	f042 0220 	orr.w	r2, r2, #32
 80063ea:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80063ec:	e70f      	b.n	800620e <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80063ee:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80063f2:	06a5      	lsls	r5, r4, #26
 80063f4:	2401      	movs	r4, #1
 80063f6:	381e      	subs	r0, #30
 80063f8:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80063fc:	fa04 f606 	lsl.w	r6, r4, r6
 8006400:	0500      	lsls	r0, r0, #20
 8006402:	4335      	orrs	r5, r6
 8006404:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8006408:	e781      	b.n	800630e <HAL_ADC_ConfigChannel+0x25e>
 800640a:	bf00      	nop
 800640c:	5c001000 	.word	0x5c001000
 8006410:	000fffff 	.word	0x000fffff
 8006414:	47ff0000 	.word	0x47ff0000
 8006418:	40022000 	.word	0x40022000
 800641c:	58026300 	.word	0x58026300
 8006420:	58026000 	.word	0x58026000
 8006424:	cb840000 	.word	0xcb840000
 8006428:	c7520000 	.word	0xc7520000
 800642c:	cfb80000 	.word	0xcfb80000
 8006430:	40022300 	.word	0x40022300
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006434:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8006438:	2800      	cmp	r0, #0
 800643a:	d05e      	beq.n	80064fa <HAL_ADC_ConfigChannel+0x44a>
  return __builtin_clz(value);
 800643c:	fab0 f080 	clz	r0, r0
 8006440:	3001      	adds	r0, #1
 8006442:	0680      	lsls	r0, r0, #26
 8006444:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006448:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800644c:	2d00      	cmp	r5, #0
 800644e:	d052      	beq.n	80064f6 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8006450:	fab5 f585 	clz	r5, r5
 8006454:	2601      	movs	r6, #1
 8006456:	3501      	adds	r5, #1
 8006458:	f005 051f 	and.w	r5, r5, #31
 800645c:	fa06 f505 	lsl.w	r5, r6, r5
 8006460:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006462:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8006466:	2c00      	cmp	r4, #0
 8006468:	d042      	beq.n	80064f0 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 800646a:	fab4 f484 	clz	r4, r4
 800646e:	3401      	adds	r4, #1
 8006470:	f004 041f 	and.w	r4, r4, #31
 8006474:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006478:	0520      	lsls	r0, r4, #20
 800647a:	e748      	b.n	800630e <HAL_ADC_ConfigChannel+0x25e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800647c:	0208      	lsls	r0, r1, #8
 800647e:	f53f aec0 	bmi.w	8006202 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006482:	491f      	ldr	r1, [pc, #124]	; (8006500 <HAL_ADC_ConfigChannel+0x450>)
 8006484:	428a      	cmp	r2, r1
 8006486:	f47f aebc 	bne.w	8006202 <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800648a:	4a1e      	ldr	r2, [pc, #120]	; (8006504 <HAL_ADC_ConfigChannel+0x454>)
 800648c:	481e      	ldr	r0, [pc, #120]	; (8006508 <HAL_ADC_ConfigChannel+0x458>)
 800648e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006490:	68a9      	ldr	r1, [r5, #8]
 8006492:	0992      	lsrs	r2, r2, #6
 8006494:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8006498:	fba0 0202 	umull	r0, r2, r0, r2
 800649c:	4331      	orrs	r1, r6
 800649e:	0992      	lsrs	r2, r2, #6
 80064a0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80064a4:	3201      	adds	r2, #1
 80064a6:	60a9      	str	r1, [r5, #8]
 80064a8:	0052      	lsls	r2, r2, #1
 80064aa:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80064ac:	9a01      	ldr	r2, [sp, #4]
 80064ae:	2a00      	cmp	r2, #0
 80064b0:	f43f aea7 	beq.w	8006202 <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 80064b4:	9a01      	ldr	r2, [sp, #4]
 80064b6:	3a01      	subs	r2, #1
 80064b8:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80064ba:	9a01      	ldr	r2, [sp, #4]
 80064bc:	2a00      	cmp	r2, #0
 80064be:	d1f9      	bne.n	80064b4 <HAL_ADC_ConfigChannel+0x404>
 80064c0:	e69f      	b.n	8006202 <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80064c2:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 80064c6:	f47f ae9c 	bne.w	8006202 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80064ca:	490d      	ldr	r1, [pc, #52]	; (8006500 <HAL_ADC_ConfigChannel+0x450>)
 80064cc:	428a      	cmp	r2, r1
 80064ce:	f47f ae98 	bne.w	8006202 <HAL_ADC_ConfigChannel+0x152>
 80064d2:	68aa      	ldr	r2, [r5, #8]
 80064d4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80064d8:	4332      	orrs	r2, r6
 80064da:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80064de:	60aa      	str	r2, [r5, #8]
}
 80064e0:	e695      	b.n	800620e <HAL_ADC_ConfigChannel+0x15e>
 80064e2:	480a      	ldr	r0, [pc, #40]	; (800650c <HAL_ADC_ConfigChannel+0x45c>)
 80064e4:	e713      	b.n	800630e <HAL_ADC_ConfigChannel+0x25e>
 80064e6:	2502      	movs	r5, #2
 80064e8:	e6fe      	b.n	80062e8 <HAL_ADC_ConfigChannel+0x238>
 80064ea:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80064ee:	e6ee      	b.n	80062ce <HAL_ADC_ConfigChannel+0x21e>
 80064f0:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80064f4:	e70b      	b.n	800630e <HAL_ADC_ConfigChannel+0x25e>
 80064f6:	2502      	movs	r5, #2
 80064f8:	e7b2      	b.n	8006460 <HAL_ADC_ConfigChannel+0x3b0>
 80064fa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80064fe:	e7a3      	b.n	8006448 <HAL_ADC_ConfigChannel+0x398>
 8006500:	58026000 	.word	0x58026000
 8006504:	24000310 	.word	0x24000310
 8006508:	053e2d63 	.word	0x053e2d63
 800650c:	fe500000 	.word	0xfe500000

08006510 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8006510:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8006514:	4603      	mov	r3, r0
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006516:	6848      	ldr	r0, [r1, #4]
  __HAL_LOCK(hadc);
 8006518:	2a01      	cmp	r2, #1
 800651a:	f000 80f3 	beq.w	8006704 <HAL_ADC_AnalogWDGConfig+0x1f4>
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800651e:	681a      	ldr	r2, [r3, #0]
{
 8006520:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 8006522:	2401      	movs	r4, #1
 8006524:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006528:	6894      	ldr	r4, [r2, #8]
 800652a:	0765      	lsls	r5, r4, #29
 800652c:	d428      	bmi.n	8006580 <HAL_ADC_AnalogWDGConfig+0x70>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800652e:	6894      	ldr	r4, [r2, #8]
 8006530:	0724      	lsls	r4, r4, #28
 8006532:	d426      	bmi.n	8006582 <HAL_ADC_AnalogWDGConfig+0x72>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006534:	680c      	ldr	r4, [r1, #0]
 8006536:	4db8      	ldr	r5, [pc, #736]	; (8006818 <HAL_ADC_AnalogWDGConfig+0x308>)
 8006538:	42ac      	cmp	r4, r5
 800653a:	f000 80a0 	beq.w	800667e <HAL_ADC_AnalogWDGConfig+0x16e>
      switch (AnalogWDGConfig->WatchdogMode)
 800653e:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8006542:	d02e      	beq.n	80065a2 <HAL_ADC_AnalogWDGConfig+0x92>
 8006544:	d827      	bhi.n	8006596 <HAL_ADC_AnalogWDGConfig+0x86>
 8006546:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 800654a:	d02a      	beq.n	80065a2 <HAL_ADC_AnalogWDGConfig+0x92>
 800654c:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006550:	d027      	beq.n	80065a2 <HAL_ADC_AnalogWDGConfig+0x92>
 8006552:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006556:	d024      	beq.n	80065a2 <HAL_ADC_AnalogWDGConfig+0x92>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8006558:	f004 0001 	and.w	r0, r4, #1
 800655c:	f3c4 5501 	ubfx	r5, r4, #20, #2
  MODIFY_REG(*preg,
 8006560:	4eae      	ldr	r6, [pc, #696]	; (800681c <HAL_ADC_AnalogWDGConfig+0x30c>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8006562:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  MODIFY_REG(*preg,
 8006566:	4026      	ands	r6, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8006568:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 800656c:	f102 000c 	add.w	r0, r2, #12
  MODIFY_REG(*preg,
 8006570:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 8006574:	ea24 0406 	bic.w	r4, r4, r6
 8006578:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800657c:	680c      	ldr	r4, [r1, #0]
}
 800657e:	e023      	b.n	80065c8 <HAL_ADC_AnalogWDGConfig+0xb8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006580:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006582:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006584:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006586:	f042 0220 	orr.w	r2, r2, #32
 800658a:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8006592:	bc70      	pop	{r4, r5, r6}
 8006594:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 8006596:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 800659a:	d002      	beq.n	80065a2 <HAL_ADC_AnalogWDGConfig+0x92>
 800659c:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 80065a0:	d1da      	bne.n	8006558 <HAL_ADC_AnalogWDGConfig+0x48>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80065a2:	489f      	ldr	r0, [pc, #636]	; (8006820 <HAL_ADC_AnalogWDGConfig+0x310>)
 80065a4:	4284      	cmp	r4, r0
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80065a6:	6888      	ldr	r0, [r1, #8]
 80065a8:	f3c0 0513 	ubfx	r5, r0, #0, #20
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80065ac:	f000 80cb 	beq.w	8006746 <HAL_ADC_AnalogWDGConfig+0x236>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80065b0:	2d00      	cmp	r5, #0
 80065b2:	f040 80df 	bne.w	8006774 <HAL_ADC_AnalogWDGConfig+0x264>
 80065b6:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80065ba:	2501      	movs	r5, #1
 80065bc:	4085      	lsls	r5, r0
 80065be:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
 80065c2:	4328      	orrs	r0, r5
 80065c4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80065c8:	4896      	ldr	r0, [pc, #600]	; (8006824 <HAL_ADC_AnalogWDGConfig+0x314>)
 80065ca:	6800      	ldr	r0, [r0, #0]
 80065cc:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80065d0:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80065d4:	68d0      	ldr	r0, [r2, #12]
 80065d6:	d04b      	beq.n	8006670 <HAL_ADC_AnalogWDGConfig+0x160>
 80065d8:	f010 0f10 	tst.w	r0, #16
 80065dc:	68d0      	ldr	r0, [r2, #12]
 80065de:	d047      	beq.n	8006670 <HAL_ADC_AnalogWDGConfig+0x160>
 80065e0:	0840      	lsrs	r0, r0, #1
 80065e2:	690d      	ldr	r5, [r1, #16]
 80065e4:	f000 0008 	and.w	r0, r0, #8
 80065e8:	fa05 f000 	lsl.w	r0, r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80065ec:	4d8d      	ldr	r5, [pc, #564]	; (8006824 <HAL_ADC_AnalogWDGConfig+0x314>)
 80065ee:	682d      	ldr	r5, [r5, #0]
 80065f0:	f005 4c70 	and.w	ip, r5, #4026531840	; 0xf0000000
 80065f4:	68d5      	ldr	r5, [r2, #12]
 80065f6:	f1bc 5f80 	cmp.w	ip, #268435456	; 0x10000000
 80065fa:	d031      	beq.n	8006660 <HAL_ADC_AnalogWDGConfig+0x150>
 80065fc:	f015 0f10 	tst.w	r5, #16
 8006600:	68d5      	ldr	r5, [r2, #12]
 8006602:	d02d      	beq.n	8006660 <HAL_ADC_AnalogWDGConfig+0x150>
 8006604:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 8006608:	694d      	ldr	r5, [r1, #20]
 800660a:	f00c 0c08 	and.w	ip, ip, #8
 800660e:	fa05 fc0c 	lsl.w	ip, r5, ip
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006612:	4d83      	ldr	r5, [pc, #524]	; (8006820 <HAL_ADC_AnalogWDGConfig+0x310>)
 8006614:	42ac      	cmp	r4, r5
 8006616:	d077      	beq.n	8006708 <HAL_ADC_AnalogWDGConfig+0x1f8>
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006618:	f8d2 40b8 	ldr.w	r4, [r2, #184]	; 0xb8
 800661c:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8006620:	ea44 040c 	orr.w	r4, r4, ip
 8006624:	f8c2 40b8 	str.w	r4, [r2, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006628:	f8d2 40bc 	ldr.w	r4, [r2, #188]	; 0xbc
 800662c:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8006630:	4320      	orrs	r0, r4
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8006632:	f44f 7400 	mov.w	r4, #512	; 0x200
 8006636:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800663a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800663c:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8006640:	6558      	str	r0, [r3, #84]	; 0x54
 8006642:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006644:	7b09      	ldrb	r1, [r1, #12]
 8006646:	2901      	cmp	r1, #1
 8006648:	f000 808e 	beq.w	8006768 <HAL_ADC_AnalogWDGConfig+0x258>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800664c:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800664e:	2000      	movs	r0, #0
 8006650:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8006654:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800665c:	bc70      	pop	{r4, r5, r6}
 800665e:	4770      	bx	lr
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006660:	f3c5 0c82 	ubfx	ip, r5, #2, #3
 8006664:	694d      	ldr	r5, [r1, #20]
 8006666:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800666a:	fa05 fc0c 	lsl.w	ip, r5, ip
 800666e:	e7d0      	b.n	8006612 <HAL_ADC_AnalogWDGConfig+0x102>
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006670:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8006674:	690d      	ldr	r5, [r1, #16]
 8006676:	0040      	lsls	r0, r0, #1
 8006678:	fa05 f000 	lsl.w	r0, r5, r0
 800667c:	e7b6      	b.n	80065ec <HAL_ADC_AnalogWDGConfig+0xdc>
      switch (AnalogWDGConfig->WatchdogMode)
 800667e:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8006682:	f000 80f0 	beq.w	8006866 <HAL_ADC_AnalogWDGConfig+0x356>
 8006686:	d82a      	bhi.n	80066de <HAL_ADC_AnalogWDGConfig+0x1ce>
 8006688:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 800668c:	f000 80e0 	beq.w	8006850 <HAL_ADC_AnalogWDGConfig+0x340>
 8006690:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006694:	d118      	bne.n	80066c8 <HAL_ADC_AnalogWDGConfig+0x1b8>
  MODIFY_REG(*preg,
 8006696:	68d4      	ldr	r4, [r2, #12]
 8006698:	4863      	ldr	r0, [pc, #396]	; (8006828 <HAL_ADC_AnalogWDGConfig+0x318>)
 800669a:	4020      	ands	r0, r4
 800669c:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 80066a0:	60d0      	str	r0, [r2, #12]
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80066a2:	4860      	ldr	r0, [pc, #384]	; (8006824 <HAL_ADC_AnalogWDGConfig+0x314>)
 80066a4:	6800      	ldr	r0, [r0, #0]
 80066a6:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80066aa:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80066ae:	68d0      	ldr	r0, [r2, #12]
 80066b0:	d069      	beq.n	8006786 <HAL_ADC_AnalogWDGConfig+0x276>
 80066b2:	f010 0f10 	tst.w	r0, #16
 80066b6:	690d      	ldr	r5, [r1, #16]
 80066b8:	68d0      	ldr	r0, [r2, #12]
 80066ba:	f040 8099 	bne.w	80067f0 <HAL_ADC_AnalogWDGConfig+0x2e0>
 80066be:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80066c2:	0040      	lsls	r0, r0, #1
 80066c4:	4085      	lsls	r5, r0
 80066c6:	e063      	b.n	8006790 <HAL_ADC_AnalogWDGConfig+0x280>
      switch (AnalogWDGConfig->WatchdogMode)
 80066c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80066cc:	f040 80b4 	bne.w	8006838 <HAL_ADC_AnalogWDGConfig+0x328>
 80066d0:	68d4      	ldr	r4, [r2, #12]
 80066d2:	4855      	ldr	r0, [pc, #340]	; (8006828 <HAL_ADC_AnalogWDGConfig+0x318>)
 80066d4:	4020      	ands	r0, r4
 80066d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80066da:	60d0      	str	r0, [r2, #12]
}
 80066dc:	e7e1      	b.n	80066a2 <HAL_ADC_AnalogWDGConfig+0x192>
 80066de:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80066e2:	f000 80ae 	beq.w	8006842 <HAL_ADC_AnalogWDGConfig+0x332>
 80066e6:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 80066ea:	f040 80a5 	bne.w	8006838 <HAL_ADC_AnalogWDGConfig+0x328>
  MODIFY_REG(*preg,
 80066ee:	68d5      	ldr	r5, [r2, #12]
 80066f0:	6888      	ldr	r0, [r1, #8]
 80066f2:	4c4d      	ldr	r4, [pc, #308]	; (8006828 <HAL_ADC_AnalogWDGConfig+0x318>)
 80066f4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80066f8:	402c      	ands	r4, r5
 80066fa:	4320      	orrs	r0, r4
 80066fc:	f040 70e0 	orr.w	r0, r0, #29360128	; 0x1c00000
 8006700:	60d0      	str	r0, [r2, #12]
}
 8006702:	e7ce      	b.n	80066a2 <HAL_ADC_AnalogWDGConfig+0x192>
  __HAL_LOCK(hadc);
 8006704:	2002      	movs	r0, #2
}
 8006706:	4770      	bx	lr
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006708:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 800670c:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8006710:	ea44 040c 	orr.w	r4, r4, ip
 8006714:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006718:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
 800671c:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8006720:	4320      	orrs	r0, r4
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8006722:	f44f 7480 	mov.w	r4, #256	; 0x100
 8006726:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800672a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800672c:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 8006730:	6558      	str	r0, [r3, #84]	; 0x54
 8006732:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006734:	7b09      	ldrb	r1, [r1, #12]
 8006736:	2901      	cmp	r1, #1
 8006738:	d078      	beq.n	800682c <HAL_ADC_AnalogWDGConfig+0x31c>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800673a:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800673c:	2000      	movs	r0, #0
 800673e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006742:	6051      	str	r1, [r2, #4]
}
 8006744:	e722      	b.n	800658c <HAL_ADC_AnalogWDGConfig+0x7c>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006746:	2d00      	cmp	r5, #0
 8006748:	d05e      	beq.n	8006808 <HAL_ADC_AnalogWDGConfig+0x2f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800674e:	2800      	cmp	r0, #0
 8006750:	f000 8094 	beq.w	800687c <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 8006754:	fab0 f080 	clz	r0, r0
 8006758:	2501      	movs	r5, #1
 800675a:	4085      	lsls	r5, r0
 800675c:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
 8006760:	4328      	orrs	r0, r5
 8006762:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
 8006766:	e72f      	b.n	80065c8 <HAL_ADC_AnalogWDGConfig+0xb8>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8006768:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800676a:	2000      	movs	r0, #0
 800676c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006770:	6051      	str	r1, [r2, #4]
}
 8006772:	e70b      	b.n	800658c <HAL_ADC_AnalogWDGConfig+0x7c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006774:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8006778:	2800      	cmp	r0, #0
 800677a:	d04a      	beq.n	8006812 <HAL_ADC_AnalogWDGConfig+0x302>
  return __builtin_clz(value);
 800677c:	fab0 f080 	clz	r0, r0
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006780:	2501      	movs	r5, #1
 8006782:	4085      	lsls	r5, r0
 8006784:	e71b      	b.n	80065be <HAL_ADC_AnalogWDGConfig+0xae>
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006786:	f3c0 0082 	ubfx	r0, r0, #2, #3
 800678a:	690d      	ldr	r5, [r1, #16]
 800678c:	0040      	lsls	r0, r0, #1
 800678e:	4085      	lsls	r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006790:	4824      	ldr	r0, [pc, #144]	; (8006824 <HAL_ADC_AnalogWDGConfig+0x314>)
 8006792:	6800      	ldr	r0, [r0, #0]
 8006794:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8006798:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 800679c:	68d0      	ldr	r0, [r2, #12]
 800679e:	d003      	beq.n	80067a8 <HAL_ADC_AnalogWDGConfig+0x298>
 80067a0:	f010 0f10 	tst.w	r0, #16
 80067a4:	68d0      	ldr	r0, [r2, #12]
 80067a6:	d128      	bne.n	80067fa <HAL_ADC_AnalogWDGConfig+0x2ea>
 80067a8:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80067ac:	694c      	ldr	r4, [r1, #20]
 80067ae:	0040      	lsls	r0, r0, #1
 80067b0:	fa04 f000 	lsl.w	r0, r4, r0
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80067b4:	6a14      	ldr	r4, [r2, #32]
 80067b6:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 80067ba:	4304      	orrs	r4, r0
 80067bc:	6214      	str	r4, [r2, #32]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80067be:	2480      	movs	r4, #128	; 0x80
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80067c0:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80067c2:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 80067c6:	4328      	orrs	r0, r5
 80067c8:	6250      	str	r0, [r2, #36]	; 0x24
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80067ca:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80067cc:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80067d0:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067d2:	2000      	movs	r0, #0
 80067d4:	6014      	str	r4, [r2, #0]
      if (AnalogWDGConfig->ITMode == ENABLE)
 80067d6:	7b09      	ldrb	r1, [r1, #12]
 80067d8:	2901      	cmp	r1, #1
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80067da:	6851      	ldr	r1, [r2, #4]
 80067dc:	bf0c      	ite	eq
 80067de:	4321      	orreq	r1, r4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80067e0:	f021 0180 	bicne.w	r1, r1, #128	; 0x80
 80067e4:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80067ec:	bc70      	pop	{r4, r5, r6}
 80067ee:	4770      	bx	lr
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80067f0:	0840      	lsrs	r0, r0, #1
 80067f2:	f000 0008 	and.w	r0, r0, #8
 80067f6:	4085      	lsls	r5, r0
 80067f8:	e7ca      	b.n	8006790 <HAL_ADC_AnalogWDGConfig+0x280>
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80067fa:	0840      	lsrs	r0, r0, #1
 80067fc:	694c      	ldr	r4, [r1, #20]
 80067fe:	f000 0008 	and.w	r0, r0, #8
 8006802:	fa04 f000 	lsl.w	r0, r4, r0
 8006806:	e7d5      	b.n	80067b4 <HAL_ADC_AnalogWDGConfig+0x2a4>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006808:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800680c:	2501      	movs	r5, #1
 800680e:	4085      	lsls	r5, r0
 8006810:	e7a4      	b.n	800675c <HAL_ADC_AnalogWDGConfig+0x24c>
 8006812:	2501      	movs	r5, #1
 8006814:	e6d3      	b.n	80065be <HAL_ADC_AnalogWDGConfig+0xae>
 8006816:	bf00      	nop
 8006818:	7dc00000 	.word	0x7dc00000
 800681c:	7dcfffff 	.word	0x7dcfffff
 8006820:	001fffff 	.word	0x001fffff
 8006824:	5c001000 	.word	0x5c001000
 8006828:	823fffff 	.word	0x823fffff
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800682c:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800682e:	2000      	movs	r0, #0
 8006830:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006834:	6051      	str	r1, [r2, #4]
}
 8006836:	e6a9      	b.n	800658c <HAL_ADC_AnalogWDGConfig+0x7c>
  MODIFY_REG(*preg,
 8006838:	68d4      	ldr	r4, [r2, #12]
 800683a:	4811      	ldr	r0, [pc, #68]	; (8006880 <HAL_ADC_AnalogWDGConfig+0x370>)
 800683c:	4020      	ands	r0, r4
 800683e:	60d0      	str	r0, [r2, #12]
}
 8006840:	e72f      	b.n	80066a2 <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 8006842:	68d4      	ldr	r4, [r2, #12]
 8006844:	480e      	ldr	r0, [pc, #56]	; (8006880 <HAL_ADC_AnalogWDGConfig+0x370>)
 8006846:	4020      	ands	r0, r4
 8006848:	f040 70c0 	orr.w	r0, r0, #25165824	; 0x1800000
 800684c:	60d0      	str	r0, [r2, #12]
}
 800684e:	e728      	b.n	80066a2 <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 8006850:	68d5      	ldr	r5, [r2, #12]
 8006852:	6888      	ldr	r0, [r1, #8]
 8006854:	4c0a      	ldr	r4, [pc, #40]	; (8006880 <HAL_ADC_AnalogWDGConfig+0x370>)
 8006856:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800685a:	402c      	ands	r4, r5
 800685c:	4320      	orrs	r0, r4
 800685e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8006862:	60d0      	str	r0, [r2, #12]
}
 8006864:	e71d      	b.n	80066a2 <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 8006866:	68d5      	ldr	r5, [r2, #12]
 8006868:	6888      	ldr	r0, [r1, #8]
 800686a:	4c05      	ldr	r4, [pc, #20]	; (8006880 <HAL_ADC_AnalogWDGConfig+0x370>)
 800686c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006870:	402c      	ands	r4, r5
 8006872:	4320      	orrs	r0, r4
 8006874:	f040 70a0 	orr.w	r0, r0, #20971520	; 0x1400000
 8006878:	60d0      	str	r0, [r2, #12]
}
 800687a:	e712      	b.n	80066a2 <HAL_ADC_AnalogWDGConfig+0x192>
 800687c:	2501      	movs	r5, #1
 800687e:	e76d      	b.n	800675c <HAL_ADC_AnalogWDGConfig+0x24c>
 8006880:	823fffff 	.word	0x823fffff

08006884 <ADC_ConversionStop>:
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006884:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800688c:	689a      	ldr	r2, [r3, #8]
{
 800688e:	b570      	push	{r4, r5, r6, lr}
 8006890:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006892:	d103      	bne.n	800689c <ADC_ConversionStop+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006894:	0712      	lsls	r2, r2, #28
 8006896:	d401      	bmi.n	800689c <ADC_ConversionStop+0x18>
  return HAL_OK;
 8006898:	2000      	movs	r0, #0
}
 800689a:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	0196      	lsls	r6, r2, #6
 80068a0:	d504      	bpl.n	80068ac <ADC_ConversionStop+0x28>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80068a2:	8aa0      	ldrh	r0, [r4, #20]
 80068a4:	f240 1201 	movw	r2, #257	; 0x101
 80068a8:	4290      	cmp	r0, r2
 80068aa:	d01a      	beq.n	80068e2 <ADC_ConversionStop+0x5e>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80068ac:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	d040      	beq.n	8006934 <ADC_ConversionStop+0xb0>
 80068b2:	0756      	lsls	r6, r2, #29
 80068b4:	d508      	bpl.n	80068c8 <ADC_ConversionStop+0x44>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	0790      	lsls	r0, r2, #30
 80068ba:	d405      	bmi.n	80068c8 <ADC_ConversionStop+0x44>
  MODIFY_REG(ADCx->CR,
 80068bc:	6898      	ldr	r0, [r3, #8]
 80068be:	4a2d      	ldr	r2, [pc, #180]	; (8006974 <ADC_ConversionStop+0xf0>)
 80068c0:	4002      	ands	r2, r0
 80068c2:	f042 0210 	orr.w	r2, r2, #16
 80068c6:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80068c8:	2901      	cmp	r1, #1
 80068ca:	d019      	beq.n	8006900 <ADC_ConversionStop+0x7c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	0712      	lsls	r2, r2, #28
 80068d0:	d502      	bpl.n	80068d8 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	0790      	lsls	r0, r2, #30
 80068d6:	d534      	bpl.n	8006942 <ADC_ConversionStop+0xbe>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80068d8:	2903      	cmp	r1, #3
 80068da:	bf14      	ite	ne
 80068dc:	2504      	movne	r5, #4
 80068de:	250c      	moveq	r5, #12
 80068e0:	e00f      	b.n	8006902 <ADC_ConversionStop+0x7e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	0650      	lsls	r0, r2, #25
 80068e6:	d406      	bmi.n	80068f6 <ADC_ConversionStop+0x72>
 80068e8:	4a23      	ldr	r2, [pc, #140]	; (8006978 <ADC_ConversionStop+0xf4>)
 80068ea:	e001      	b.n	80068f0 <ADC_ConversionStop+0x6c>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80068ec:	3a01      	subs	r2, #1
 80068ee:	d018      	beq.n	8006922 <ADC_ConversionStop+0x9e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80068f0:	6819      	ldr	r1, [r3, #0]
 80068f2:	0649      	lsls	r1, r1, #25
 80068f4:	d5fa      	bpl.n	80068ec <ADC_ConversionStop+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80068f6:	2240      	movs	r2, #64	; 0x40
 80068f8:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	0752      	lsls	r2, r2, #29
 80068fe:	d427      	bmi.n	8006950 <ADC_ConversionStop+0xcc>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006900:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8006902:	f7ff f9ff 	bl	8005d04 <HAL_GetTick>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006906:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8006908:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	421d      	tst	r5, r3
 800690e:	d0c3      	beq.n	8006898 <ADC_ConversionStop+0x14>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006910:	f7ff f9f8 	bl	8005d04 <HAL_GetTick>
 8006914:	1b83      	subs	r3, r0, r6
 8006916:	2b05      	cmp	r3, #5
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006918:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800691a:	d9f6      	bls.n	800690a <ADC_ConversionStop+0x86>
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	422a      	tst	r2, r5
 8006920:	d0f3      	beq.n	800690a <ADC_ConversionStop+0x86>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006922:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8006924:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006926:	f043 0310 	orr.w	r3, r3, #16
 800692a:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800692c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800692e:	4303      	orrs	r3, r0
 8006930:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8006932:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006934:	0715      	lsls	r5, r2, #28
 8006936:	d502      	bpl.n	800693e <ADC_ConversionStop+0xba>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	0792      	lsls	r2, r2, #30
 800693c:	d513      	bpl.n	8006966 <ADC_ConversionStop+0xe2>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800693e:	2508      	movs	r5, #8
        break;
 8006940:	e7df      	b.n	8006902 <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 8006942:	6898      	ldr	r0, [r3, #8]
 8006944:	4a0b      	ldr	r2, [pc, #44]	; (8006974 <ADC_ConversionStop+0xf0>)
 8006946:	4002      	ands	r2, r0
 8006948:	f042 0220 	orr.w	r2, r2, #32
 800694c:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 800694e:	e7c3      	b.n	80068d8 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	0796      	lsls	r6, r2, #30
 8006954:	d4d4      	bmi.n	8006900 <ADC_ConversionStop+0x7c>
  MODIFY_REG(ADCx->CR,
 8006956:	6899      	ldr	r1, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006958:	2504      	movs	r5, #4
 800695a:	4a06      	ldr	r2, [pc, #24]	; (8006974 <ADC_ConversionStop+0xf0>)
 800695c:	400a      	ands	r2, r1
 800695e:	f042 0210 	orr.w	r2, r2, #16
 8006962:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006964:	e7cd      	b.n	8006902 <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 8006966:	6899      	ldr	r1, [r3, #8]
 8006968:	4a02      	ldr	r2, [pc, #8]	; (8006974 <ADC_ConversionStop+0xf0>)
 800696a:	400a      	ands	r2, r1
 800696c:	f042 0220 	orr.w	r2, r2, #32
 8006970:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8006972:	e7e4      	b.n	800693e <ADC_ConversionStop+0xba>
 8006974:	7fffffc0 	.word	0x7fffffc0
 8006978:	000cdc00 	.word	0x000cdc00

0800697c <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800697c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	07d1      	lsls	r1, r2, #31
 8006982:	d501      	bpl.n	8006988 <ADC_Enable+0xc>
  return HAL_OK;
 8006984:	2000      	movs	r0, #0
}
 8006986:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006988:	6899      	ldr	r1, [r3, #8]
 800698a:	4a21      	ldr	r2, [pc, #132]	; (8006a10 <ADC_Enable+0x94>)
 800698c:	4211      	tst	r1, r2
{
 800698e:	b570      	push	{r4, r5, r6, lr}
 8006990:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006992:	d12c      	bne.n	80069ee <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8006994:	6899      	ldr	r1, [r3, #8]
 8006996:	4a1f      	ldr	r2, [pc, #124]	; (8006a14 <ADC_Enable+0x98>)
 8006998:	400a      	ands	r2, r1
 800699a:	f042 0201 	orr.w	r2, r2, #1
 800699e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80069a0:	f7ff f9b0 	bl	8005d04 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80069a4:	6823      	ldr	r3, [r4, #0]
 80069a6:	4a1c      	ldr	r2, [pc, #112]	; (8006a18 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 80069a8:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d028      	beq.n	8006a00 <ADC_Enable+0x84>
 80069ae:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d024      	beq.n	8006a00 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80069b6:	4a19      	ldr	r2, [pc, #100]	; (8006a1c <ADC_Enable+0xa0>)
 80069b8:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	07d6      	lsls	r6, r2, #31
 80069be:	d414      	bmi.n	80069ea <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 80069c0:	4e14      	ldr	r6, [pc, #80]	; (8006a14 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80069c2:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069c4:	07d0      	lsls	r0, r2, #31
 80069c6:	d404      	bmi.n	80069d2 <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	4032      	ands	r2, r6
 80069cc:	f042 0201 	orr.w	r2, r2, #1
 80069d0:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80069d2:	f7ff f997 	bl	8005d04 <HAL_GetTick>
 80069d6:	1b43      	subs	r3, r0, r5
 80069d8:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069da:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80069dc:	d902      	bls.n	80069e4 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	07d1      	lsls	r1, r2, #31
 80069e2:	d504      	bpl.n	80069ee <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	07d2      	lsls	r2, r2, #31
 80069e8:	d5eb      	bpl.n	80069c2 <ADC_Enable+0x46>
  return HAL_OK;
 80069ea:	2000      	movs	r0, #0
}
 80069ec:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 80069f0:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069f2:	f043 0310 	orr.w	r3, r3, #16
 80069f6:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069fa:	4303      	orrs	r3, r0
 80069fc:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006a00:	4a07      	ldr	r2, [pc, #28]	; (8006a20 <ADC_Enable+0xa4>)
 8006a02:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a04:	06d2      	lsls	r2, r2, #27
 8006a06:	d0d8      	beq.n	80069ba <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006a08:	4a06      	ldr	r2, [pc, #24]	; (8006a24 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d1d5      	bne.n	80069ba <ADC_Enable+0x3e>
 8006a0e:	e7ec      	b.n	80069ea <ADC_Enable+0x6e>
 8006a10:	8000003f 	.word	0x8000003f
 8006a14:	7fffffc0 	.word	0x7fffffc0
 8006a18:	40022000 	.word	0x40022000
 8006a1c:	58026300 	.word	0x58026300
 8006a20:	40022300 	.word	0x40022300
 8006a24:	40022100 	.word	0x40022100

08006a28 <ADC_Disable>:
{
 8006a28:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006a2a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	0795      	lsls	r5, r2, #30
 8006a30:	d502      	bpl.n	8006a38 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006a32:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8006a34:	2000      	movs	r0, #0
}
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
 8006a38:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006a3a:	07d4      	lsls	r4, r2, #31
 8006a3c:	d529      	bpl.n	8006a92 <ADC_Disable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	4604      	mov	r4, r0
 8006a42:	f002 020d 	and.w	r2, r2, #13
 8006a46:	2a01      	cmp	r2, #1
 8006a48:	d008      	beq.n	8006a5c <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8006a4c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a4e:	f043 0310 	orr.w	r3, r3, #16
 8006a52:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a56:	4303      	orrs	r3, r0
 8006a58:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8006a5a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8006a5c:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006a5e:	2103      	movs	r1, #3
 8006a60:	4a0d      	ldr	r2, [pc, #52]	; (8006a98 <ADC_Disable+0x70>)
 8006a62:	4002      	ands	r2, r0
 8006a64:	f042 0202 	orr.w	r2, r2, #2
 8006a68:	609a      	str	r2, [r3, #8]
 8006a6a:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8006a6c:	f7ff f94a 	bl	8005d04 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a70:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8006a72:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	07d9      	lsls	r1, r3, #31
 8006a78:	d50b      	bpl.n	8006a92 <ADC_Disable+0x6a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006a7a:	f7ff f943 	bl	8005d04 <HAL_GetTick>
 8006a7e:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a80:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006a82:	2802      	cmp	r0, #2
 8006a84:	d902      	bls.n	8006a8c <ADC_Disable+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	07d2      	lsls	r2, r2, #31
 8006a8a:	d4de      	bmi.n	8006a4a <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	07db      	lsls	r3, r3, #31
 8006a90:	d4f3      	bmi.n	8006a7a <ADC_Disable+0x52>
  return HAL_OK;
 8006a92:	2000      	movs	r0, #0
}
 8006a94:	bd38      	pop	{r3, r4, r5, pc}
 8006a96:	bf00      	nop
 8006a98:	7fffffc0 	.word	0x7fffffc0

08006a9c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006a9c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006a9e:	4a57      	ldr	r2, [pc, #348]	; (8006bfc <ADC_ConfigureBoostMode+0x160>)
{
 8006aa0:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006aa2:	6803      	ldr	r3, [r0, #0]
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d026      	beq.n	8006af6 <ADC_ConfigureBoostMode+0x5a>
 8006aa8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d022      	beq.n	8006af6 <ADC_ConfigureBoostMode+0x5a>
 8006ab0:	4b53      	ldr	r3, [pc, #332]	; (8006c00 <ADC_ConfigureBoostMode+0x164>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8006ab8:	d022      	beq.n	8006b00 <ADC_ConfigureBoostMode+0x64>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006aba:	f004 f80d 	bl	800aad8 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8006abe:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8006ac0:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8006ac2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ac6:	f000 8088 	beq.w	8006bda <ADC_ConfigureBoostMode+0x13e>
 8006aca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ace:	d06c      	beq.n	8006baa <ADC_ConfigureBoostMode+0x10e>
 8006ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad4:	f000 8081 	beq.w	8006bda <ADC_ConfigureBoostMode+0x13e>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006ad8:	f7ff f92c 	bl	8005d34 <HAL_GetREVID>
 8006adc:	f241 0303 	movw	r3, #4099	; 0x1003
 8006ae0:	4298      	cmp	r0, r3
 8006ae2:	d84b      	bhi.n	8006b7c <ADC_ConfigureBoostMode+0xe0>
  {
    if (freq > 20000000UL)
 8006ae4:	4b47      	ldr	r3, [pc, #284]	; (8006c04 <ADC_ConfigureBoostMode+0x168>)
 8006ae6:	429d      	cmp	r5, r3
 8006ae8:	d92a      	bls.n	8006b40 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006aea:	6822      	ldr	r2, [r4, #0]
 8006aec:	6893      	ldr	r3, [r2, #8]
 8006aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006af2:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006af4:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006af6:	4b44      	ldr	r3, [pc, #272]	; (8006c08 <ADC_ConfigureBoostMode+0x16c>)
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8006afe:	d1dc      	bne.n	8006aba <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006b00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006b04:	2100      	movs	r1, #0
 8006b06:	f005 f9bd 	bl	800be84 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8006b0a:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006b0c:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8006b0e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006b12:	d06c      	beq.n	8006bee <ADC_ConfigureBoostMode+0x152>
 8006b14:	d808      	bhi.n	8006b28 <ADC_ConfigureBoostMode+0x8c>
 8006b16:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006b1a:	d050      	beq.n	8006bbe <ADC_ConfigureBoostMode+0x122>
 8006b1c:	d916      	bls.n	8006b4c <ADC_ConfigureBoostMode+0xb0>
 8006b1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b22:	d1d9      	bne.n	8006ad8 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8006b24:	0945      	lsrs	r5, r0, #5
        break;
 8006b26:	e7d7      	b.n	8006ad8 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8006b28:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006b2c:	d045      	beq.n	8006bba <ADC_ConfigureBoostMode+0x11e>
 8006b2e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006b32:	d1d1      	bne.n	8006ad8 <ADC_ConfigureBoostMode+0x3c>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006b34:	f7ff f8fe 	bl	8005d34 <HAL_GetREVID>
 8006b38:	f241 0303 	movw	r3, #4099	; 0x1003
 8006b3c:	4298      	cmp	r0, r3
 8006b3e:	d840      	bhi.n	8006bc2 <ADC_ConfigureBoostMode+0x126>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006b40:	6822      	ldr	r2, [r4, #0]
 8006b42:	6893      	ldr	r3, [r2, #8]
 8006b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b48:	6093      	str	r3, [r2, #8]
}
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8006b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b50:	d006      	beq.n	8006b60 <ADC_ConfigureBoostMode+0xc4>
 8006b52:	d90a      	bls.n	8006b6a <ADC_ConfigureBoostMode+0xce>
 8006b54:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006b58:	d002      	beq.n	8006b60 <ADC_ConfigureBoostMode+0xc4>
 8006b5a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006b5e:	d1bb      	bne.n	8006ad8 <ADC_ConfigureBoostMode+0x3c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006b60:	0c9b      	lsrs	r3, r3, #18
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8006b68:	e7b6      	b.n	8006ad8 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8006b6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b6e:	d0f7      	beq.n	8006b60 <ADC_ConfigureBoostMode+0xc4>
 8006b70:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006b74:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8006b78:	d0f2      	beq.n	8006b60 <ADC_ConfigureBoostMode+0xc4>
 8006b7a:	e7ad      	b.n	8006ad8 <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
 8006b7c:	4b23      	ldr	r3, [pc, #140]	; (8006c0c <ADC_ConfigureBoostMode+0x170>)
 8006b7e:	429d      	cmp	r5, r3
 8006b80:	d805      	bhi.n	8006b8e <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006b82:	6822      	ldr	r2, [r4, #0]
 8006b84:	6893      	ldr	r3, [r2, #8]
 8006b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b8a:	6093      	str	r3, [r2, #8]
}
 8006b8c:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 8006b8e:	4b20      	ldr	r3, [pc, #128]	; (8006c10 <ADC_ConfigureBoostMode+0x174>)
 8006b90:	429d      	cmp	r5, r3
 8006b92:	d91a      	bls.n	8006bca <ADC_ConfigureBoostMode+0x12e>
    else if (freq <= 25000000UL)
 8006b94:	4b1f      	ldr	r3, [pc, #124]	; (8006c14 <ADC_ConfigureBoostMode+0x178>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006b96:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8006b98:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006b9a:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 8006b9c:	d829      	bhi.n	8006bf2 <ADC_ConfigureBoostMode+0x156>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ba6:	6093      	str	r3, [r2, #8]
}
 8006ba8:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8006baa:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006bac:	f7ff f8c2 	bl	8005d34 <HAL_GetREVID>
 8006bb0:	f241 0303 	movw	r3, #4099	; 0x1003
 8006bb4:	4298      	cmp	r0, r3
 8006bb6:	d8e1      	bhi.n	8006b7c <ADC_ConfigureBoostMode+0xe0>
 8006bb8:	e794      	b.n	8006ae4 <ADC_ConfigureBoostMode+0x48>
        freq /= 128UL;
 8006bba:	09c5      	lsrs	r5, r0, #7
        break;
 8006bbc:	e78c      	b.n	8006ad8 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 8006bbe:	0905      	lsrs	r5, r0, #4
        break;
 8006bc0:	e78a      	b.n	8006ad8 <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
 8006bc2:	4b12      	ldr	r3, [pc, #72]	; (8006c0c <ADC_ConfigureBoostMode+0x170>)
 8006bc4:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8006bc8:	d2db      	bcs.n	8006b82 <ADC_ConfigureBoostMode+0xe6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006bca:	6822      	ldr	r2, [r4, #0]
 8006bcc:	6893      	ldr	r3, [r2, #8]
 8006bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bd6:	6093      	str	r3, [r2, #8]
}
 8006bd8:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006bda:	0c1b      	lsrs	r3, r3, #16
 8006bdc:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006be0:	f7ff f8a8 	bl	8005d34 <HAL_GetREVID>
 8006be4:	f241 0303 	movw	r3, #4099	; 0x1003
 8006be8:	4298      	cmp	r0, r3
 8006bea:	d8c7      	bhi.n	8006b7c <ADC_ConfigureBoostMode+0xe0>
 8006bec:	e77a      	b.n	8006ae4 <ADC_ConfigureBoostMode+0x48>
        freq /= 64UL;
 8006bee:	0985      	lsrs	r5, r0, #6
        break;
 8006bf0:	e772      	b.n	8006ad8 <ADC_ConfigureBoostMode+0x3c>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006bf2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006bf6:	6093      	str	r3, [r2, #8]
}
 8006bf8:	bd38      	pop	{r3, r4, r5, pc}
 8006bfa:	bf00      	nop
 8006bfc:	40022000 	.word	0x40022000
 8006c00:	58026300 	.word	0x58026300
 8006c04:	01312d00 	.word	0x01312d00
 8006c08:	40022300 	.word	0x40022300
 8006c0c:	00bebc21 	.word	0x00bebc21
 8006c10:	017d7841 	.word	0x017d7841
 8006c14:	02faf081 	.word	0x02faf081

08006c18 <HAL_ADC_Init>:
{
 8006c18:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8006c1a:	2300      	movs	r3, #0
{
 8006c1c:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8006c1e:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8006c20:	2800      	cmp	r0, #0
 8006c22:	f000 80d1 	beq.w	8006dc8 <HAL_ADC_Init+0x1b0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006c26:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8006c28:	4604      	mov	r4, r0
 8006c2a:	2d00      	cmp	r5, #0
 8006c2c:	f000 80bb 	beq.w	8006da6 <HAL_ADC_Init+0x18e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006c30:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006c32:	6893      	ldr	r3, [r2, #8]
 8006c34:	009d      	lsls	r5, r3, #2
 8006c36:	d503      	bpl.n	8006c40 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006c38:	6891      	ldr	r1, [r2, #8]
 8006c3a:	4b72      	ldr	r3, [pc, #456]	; (8006e04 <HAL_ADC_Init+0x1ec>)
 8006c3c:	400b      	ands	r3, r1
 8006c3e:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006c40:	6893      	ldr	r3, [r2, #8]
 8006c42:	00d8      	lsls	r0, r3, #3
 8006c44:	d416      	bmi.n	8006c74 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006c46:	4b70      	ldr	r3, [pc, #448]	; (8006e08 <HAL_ADC_Init+0x1f0>)
 8006c48:	4970      	ldr	r1, [pc, #448]	; (8006e0c <HAL_ADC_Init+0x1f4>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8006c4c:	6890      	ldr	r0, [r2, #8]
 8006c4e:	099b      	lsrs	r3, r3, #6
 8006c50:	fba1 1303 	umull	r1, r3, r1, r3
 8006c54:	496e      	ldr	r1, [pc, #440]	; (8006e10 <HAL_ADC_Init+0x1f8>)
 8006c56:	099b      	lsrs	r3, r3, #6
 8006c58:	4001      	ands	r1, r0
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006c60:	6091      	str	r1, [r2, #8]
 8006c62:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006c64:	9b01      	ldr	r3, [sp, #4]
 8006c66:	b12b      	cbz	r3, 8006c74 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8006c68:	9b01      	ldr	r3, [sp, #4]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006c6e:	9b01      	ldr	r3, [sp, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1f9      	bne.n	8006c68 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006c74:	6893      	ldr	r3, [r2, #8]
 8006c76:	00d9      	lsls	r1, r3, #3
 8006c78:	d424      	bmi.n	8006cc4 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006c7c:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c7e:	f043 0310 	orr.w	r3, r3, #16
 8006c82:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c86:	432b      	orrs	r3, r5
 8006c88:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006c8a:	6893      	ldr	r3, [r2, #8]
 8006c8c:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006c90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c92:	d11d      	bne.n	8006cd0 <HAL_ADC_Init+0xb8>
 8006c94:	06db      	lsls	r3, r3, #27
 8006c96:	d41b      	bmi.n	8006cd0 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8006c98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c9a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006c9e:	f043 0302 	orr.w	r3, r3, #2
 8006ca2:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ca4:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ca6:	07de      	lsls	r6, r3, #31
 8006ca8:	d428      	bmi.n	8006cfc <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006caa:	4b5a      	ldr	r3, [pc, #360]	; (8006e14 <HAL_ADC_Init+0x1fc>)
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d017      	beq.n	8006ce0 <HAL_ADC_Init+0xc8>
 8006cb0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d013      	beq.n	8006ce0 <HAL_ADC_Init+0xc8>
 8006cb8:	4b57      	ldr	r3, [pc, #348]	; (8006e18 <HAL_ADC_Init+0x200>)
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	07d9      	lsls	r1, r3, #31
 8006cbe:	d41d      	bmi.n	8006cfc <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006cc0:	4a56      	ldr	r2, [pc, #344]	; (8006e1c <HAL_ADC_Init+0x204>)
 8006cc2:	e015      	b.n	8006cf0 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006cc4:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006cc6:	2500      	movs	r5, #0
 8006cc8:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006ccc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006cce:	d0e1      	beq.n	8006c94 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006cd2:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cd4:	f043 0310 	orr.w	r3, r3, #16
}
 8006cd8:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cda:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006cdc:	b002      	add	sp, #8
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ce0:	4a4c      	ldr	r2, [pc, #304]	; (8006e14 <HAL_ADC_Init+0x1fc>)
 8006ce2:	4b4f      	ldr	r3, [pc, #316]	; (8006e20 <HAL_ADC_Init+0x208>)
 8006ce4:	6892      	ldr	r2, [r2, #8]
 8006ce6:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	07d8      	lsls	r0, r3, #31
 8006cec:	d406      	bmi.n	8006cfc <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006cee:	4a4d      	ldr	r2, [pc, #308]	; (8006e24 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006cf0:	6893      	ldr	r3, [r2, #8]
 8006cf2:	6861      	ldr	r1, [r4, #4]
 8006cf4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8006cf8:	430b      	orrs	r3, r1
 8006cfa:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006cfc:	f7ff f81a 	bl	8005d34 <HAL_GetREVID>
 8006d00:	f241 0303 	movw	r3, #4099	; 0x1003
 8006d04:	68a1      	ldr	r1, [r4, #8]
 8006d06:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006d08:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006d0a:	d852      	bhi.n	8006db2 <HAL_ADC_Init+0x19a>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006d0c:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006d10:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006d12:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006d14:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8006d18:	4302      	orrs	r2, r0
 8006d1a:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d103      	bne.n	8006d28 <HAL_ADC_Init+0x110>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006d20:	6a23      	ldr	r3, [r4, #32]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d2a:	b123      	cbz	r3, 8006d36 <HAL_ADC_Init+0x11e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006d2c:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006d30:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006d32:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006d34:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	493b      	ldr	r1, [pc, #236]	; (8006e28 <HAL_ADC_Init+0x210>)
 8006d3a:	68d8      	ldr	r0, [r3, #12]
 8006d3c:	4001      	ands	r1, r0
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006d48:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d4a:	d11c      	bne.n	8006d86 <HAL_ADC_Init+0x16e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006d4c:	0712      	lsls	r2, r2, #28
 8006d4e:	d41a      	bmi.n	8006d86 <HAL_ADC_Init+0x16e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006d50:	68d8      	ldr	r0, [r3, #12]
 8006d52:	4a36      	ldr	r2, [pc, #216]	; (8006e2c <HAL_ADC_Init+0x214>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006d54:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006d56:	4002      	ands	r2, r0
 8006d58:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8006d5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8006d62:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8006d66:	2a01      	cmp	r2, #1
 8006d68:	d03a      	beq.n	8006de0 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	f022 0201 	bic.w	r2, r2, #1
 8006d70:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006d72:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006d74:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006d76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d78:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006d80:	f7ff fe8c 	bl	8006a9c <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006d84:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006d86:	68e2      	ldr	r2, [r4, #12]
 8006d88:	2a01      	cmp	r2, #1
 8006d8a:	d021      	beq.n	8006dd0 <HAL_ADC_Init+0x1b8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d8e:	f022 020f 	bic.w	r2, r2, #15
 8006d92:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006d94:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8006d96:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006d98:	f023 0303 	bic.w	r3, r3, #3
 8006d9c:	f043 0301 	orr.w	r3, r3, #1
 8006da0:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006da2:	b002      	add	sp, #8
 8006da4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8006da6:	f7fe fb7b 	bl	80054a0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006daa:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8006dac:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8006db0:	e73e      	b.n	8006c30 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006db2:	2910      	cmp	r1, #16
 8006db4:	d1aa      	bne.n	8006d0c <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006db6:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006db8:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006dba:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8006dbe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	f042 021c 	orr.w	r2, r2, #28
 8006dc6:	e7a9      	b.n	8006d1c <HAL_ADC_Init+0x104>
    return HAL_ERROR;
 8006dc8:	2501      	movs	r5, #1
}
 8006dca:	4628      	mov	r0, r5
 8006dcc:	b002      	add	sp, #8
 8006dce:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006dd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006dd2:	69a2      	ldr	r2, [r4, #24]
 8006dd4:	f021 010f 	bic.w	r1, r1, #15
 8006dd8:	3a01      	subs	r2, #1
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	631a      	str	r2, [r3, #48]	; 0x30
 8006dde:	e7d9      	b.n	8006d94 <HAL_ADC_Init+0x17c>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006de0:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8006de4:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8006de6:	3901      	subs	r1, #1
 8006de8:	6918      	ldr	r0, [r3, #16]
 8006dea:	4332      	orrs	r2, r6
 8006dec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006df0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006df2:	430a      	orrs	r2, r1
 8006df4:	490e      	ldr	r1, [pc, #56]	; (8006e30 <HAL_ADC_Init+0x218>)
 8006df6:	4001      	ands	r1, r0
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	f042 0201 	orr.w	r2, r2, #1
 8006dfe:	611a      	str	r2, [r3, #16]
 8006e00:	e7b7      	b.n	8006d72 <HAL_ADC_Init+0x15a>
 8006e02:	bf00      	nop
 8006e04:	5fffffc0 	.word	0x5fffffc0
 8006e08:	24000310 	.word	0x24000310
 8006e0c:	053e2d63 	.word	0x053e2d63
 8006e10:	6fffffc0 	.word	0x6fffffc0
 8006e14:	40022000 	.word	0x40022000
 8006e18:	58026000 	.word	0x58026000
 8006e1c:	58026300 	.word	0x58026300
 8006e20:	40022100 	.word	0x40022100
 8006e24:	40022300 	.word	0x40022300
 8006e28:	fff0c003 	.word	0xfff0c003
 8006e2c:	ffffbffc 	.word	0xffffbffc
 8006e30:	fc00f81e 	.word	0xfc00f81e

08006e34 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006e34:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006e36:	2300      	movs	r3, #0
{
 8006e38:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8006e3a:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e3c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d040      	beq.n	8006ec6 <HAL_ADCEx_Calibration_Start+0x92>
 8006e44:	2301      	movs	r3, #1
 8006e46:	4604      	mov	r4, r0
 8006e48:	460e      	mov	r6, r1
 8006e4a:	4615      	mov	r5, r2
 8006e4c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006e50:	f7ff fdea 	bl	8006a28 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006e54:	b9e8      	cbnz	r0, 8006e92 <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e56:	6d67      	ldr	r7, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8006e58:	f005 4280 	and.w	r2, r5, #1073741824	; 0x40000000
 8006e5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ecc <HAL_ADCEx_Calibration_Start+0x98>)
 8006e5e:	f406 3180 	and.w	r1, r6, #65536	; 0x10000
 8006e62:	4d1b      	ldr	r5, [pc, #108]	; (8006ed0 <HAL_ADCEx_Calibration_Start+0x9c>)
 8006e64:	403b      	ands	r3, r7

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006e66:	4f1b      	ldr	r7, [pc, #108]	; (8006ed4 <HAL_ADCEx_Calibration_Start+0xa0>)
    ADC_STATE_CLR_SET(hadc->State,
 8006e68:	f043 0302 	orr.w	r3, r3, #2
 8006e6c:	6563      	str	r3, [r4, #84]	; 0x54
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	689e      	ldr	r6, [r3, #8]
 8006e72:	4035      	ands	r5, r6
 8006e74:	4315      	orrs	r5, r2
 8006e76:	430d      	orrs	r5, r1
 8006e78:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8006e7c:	609d      	str	r5, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	2a00      	cmp	r2, #0
 8006e82:	db0f      	blt.n	8006ea4 <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e86:	f023 0303 	bic.w	r3, r3, #3
 8006e8a:	f043 0301 	orr.w	r3, r3, #1
 8006e8e:	6563      	str	r3, [r4, #84]	; 0x54
 8006e90:	e003      	b.n	8006e9a <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e92:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e94:	f043 0310 	orr.w	r3, r3, #16
 8006e98:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8006ea0:	b003      	add	sp, #12
 8006ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 8006ea4:	9a01      	ldr	r2, [sp, #4]
 8006ea6:	3201      	adds	r2, #1
 8006ea8:	9201      	str	r2, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006eaa:	9a01      	ldr	r2, [sp, #4]
 8006eac:	42ba      	cmp	r2, r7
 8006eae:	d3e6      	bcc.n	8006e7e <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 8006eb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8006eb2:	2200      	movs	r2, #0
        return HAL_ERROR;
 8006eb4:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8006eb6:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8006eba:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 8006ebe:	f043 0310 	orr.w	r3, r3, #16
 8006ec2:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8006ec4:	e7ec      	b.n	8006ea0 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 8006ec6:	2002      	movs	r0, #2
}
 8006ec8:	b003      	add	sp, #12
 8006eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ecc:	ffffeefd 	.word	0xffffeefd
 8006ed0:	3ffeffc0 	.word	0x3ffeffc0
 8006ed4:	25c3f800 	.word	0x25c3f800

08006ed8 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006edc:	f8d0 8000 	ldr.w	r8, [r0]
{
 8006ee0:	b09a      	sub	sp, #104	; 0x68
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006ee2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8006ee6:	f015 0504 	ands.w	r5, r5, #4
 8006eea:	d117      	bne.n	8006f1c <HAL_ADCEx_MultiModeStart_DMA+0x44>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006eec:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d012      	beq.n	8006f1c <HAL_ADCEx_MultiModeStart_DMA+0x44>

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006ef6:	4b2d      	ldr	r3, [pc, #180]	; (8006fac <HAL_ADCEx_MultiModeStart_DMA+0xd4>)
    __HAL_LOCK(hadc);
 8006ef8:	f04f 0c01 	mov.w	ip, #1
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006efc:	9516      	str	r5, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006efe:	4598      	cmp	r8, r3
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006f00:	9517      	str	r5, [sp, #92]	; 0x5c
    __HAL_LOCK(hadc);
 8006f02:	f880 c050 	strb.w	ip, [r0, #80]	; 0x50
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006f06:	d00d      	beq.n	8006f24 <HAL_ADCEx_MultiModeStart_DMA+0x4c>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f08:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 8006f0a:	4660      	mov	r0, ip
      __HAL_UNLOCK(hadc);
 8006f0c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f10:	f043 0320 	orr.w	r3, r3, #32
 8006f14:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 8006f16:	b01a      	add	sp, #104	; 0x68
 8006f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006f1c:	2002      	movs	r0, #2
}
 8006f1e:	b01a      	add	sp, #104	; 0x68
 8006f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f24:	4d22      	ldr	r5, [pc, #136]	; (8006fb0 <HAL_ADCEx_MultiModeStart_DMA+0xd8>)
 8006f26:	460e      	mov	r6, r1
 8006f28:	4617      	mov	r7, r2
 8006f2a:	9501      	str	r5, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 8006f2c:	f7ff fd26 	bl	800697c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8006f30:	b128      	cbz	r0, 8006f3e <HAL_ADCEx_MultiModeStart_DMA+0x66>
      __HAL_UNLOCK(hadc);
 8006f32:	2300      	movs	r3, #0
 8006f34:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006f38:	b01a      	add	sp, #104	; 0x68
 8006f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8006f3e:	a801      	add	r0, sp, #4
 8006f40:	f7ff fd1c 	bl	800697c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8006f44:	2800      	cmp	r0, #0
 8006f46:	d1f4      	bne.n	8006f32 <HAL_ADCEx_MultiModeStart_DMA+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 8006f48:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006f4a:	4a1a      	ldr	r2, [pc, #104]	; (8006fb4 <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006f4c:	4b1a      	ldr	r3, [pc, #104]	; (8006fb8 <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      ADC_STATE_CLR_SET(hadc->State,
 8006f4e:	400a      	ands	r2, r1
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006f50:	f8d4 c000 	ldr.w	ip, [r4]
      ADC_STATE_CLR_SET(hadc->State,
 8006f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006f58:	45c4      	cmp	ip, r8
      ADC_STATE_CLR_SET(hadc->State,
 8006f5a:	6562      	str	r2, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8006f5c:	65a0      	str	r0, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006f5e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006f60:	63c3      	str	r3, [r0, #60]	; 0x3c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006f62:	4b16      	ldr	r3, [pc, #88]	; (8006fbc <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
 8006f64:	6403      	str	r3, [r0, #64]	; 0x40
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8006f66:	4b16      	ldr	r3, [pc, #88]	; (8006fc0 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
 8006f68:	64c3      	str	r3, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006f6a:	d01d      	beq.n	8006fa8 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 8006f6c:	45ac      	cmp	ip, r5
 8006f6e:	d01b      	beq.n	8006fa8 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 8006f70:	4914      	ldr	r1, [pc, #80]	; (8006fc4 <HAL_ADCEx_MultiModeStart_DMA+0xec>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006f72:	251c      	movs	r5, #28
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8006f74:	463b      	mov	r3, r7
 8006f76:	4632      	mov	r2, r6
 8006f78:	310c      	adds	r1, #12
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006f7a:	f8cc 5000 	str.w	r5, [ip]
      __HAL_UNLOCK(hadc);
 8006f7e:	2500      	movs	r5, #0
 8006f80:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006f84:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8006f88:	f045 0510 	orr.w	r5, r5, #16
 8006f8c:	f8cc 5004 	str.w	r5, [ip, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8006f90:	f000 fef8 	bl	8007d84 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006f94:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006f96:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 8006f98:	6891      	ldr	r1, [r2, #8]
 8006f9a:	400b      	ands	r3, r1
 8006f9c:	f043 0304 	orr.w	r3, r3, #4
 8006fa0:	6093      	str	r3, [r2, #8]
}
 8006fa2:	b01a      	add	sp, #104	; 0x68
 8006fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006fa8:	4908      	ldr	r1, [pc, #32]	; (8006fcc <HAL_ADCEx_MultiModeStart_DMA+0xf4>)
 8006faa:	e7e2      	b.n	8006f72 <HAL_ADCEx_MultiModeStart_DMA+0x9a>
 8006fac:	40022000 	.word	0x40022000
 8006fb0:	40022100 	.word	0x40022100
 8006fb4:	fffff0fe 	.word	0xfffff0fe
 8006fb8:	08006029 	.word	0x08006029
 8006fbc:	08005d99 	.word	0x08005d99
 8006fc0:	08006095 	.word	0x08006095
 8006fc4:	58026300 	.word	0x58026300
 8006fc8:	7fffffc0 	.word	0x7fffffc0
 8006fcc:	40022300 	.word	0x40022300

08006fd0 <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 8006fd0:	b570      	push	{r4, r5, r6, lr}

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006fd2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8006fd6:	b09a      	sub	sp, #104	; 0x68
  __HAL_LOCK(hadc);
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d05a      	beq.n	8007092 <HAL_ADCEx_MultiModeStop_DMA+0xc2>
 8006fdc:	2601      	movs	r6, #1


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006fde:	2103      	movs	r1, #3
 8006fe0:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8006fe2:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006fe6:	f7ff fc4d 	bl	8006884 <ADC_ConversionStop>

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006fea:	4605      	mov	r5, r0
 8006fec:	bb40      	cbnz	r0, 8007040 <HAL_ADCEx_MultiModeStop_DMA+0x70>
  {
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006fee:	4b3d      	ldr	r3, [pc, #244]	; (80070e4 <HAL_ADCEx_MultiModeStop_DMA+0x114>)
 8006ff0:	6822      	ldr	r2, [r4, #0]
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006ff2:	9016      	str	r0, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006ff4:	429a      	cmp	r2, r3
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006ff6:	9017      	str	r0, [sp, #92]	; 0x5c
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006ff8:	d028      	beq.n	800704c <HAL_ADCEx_MultiModeStop_DMA+0x7c>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ffa:	6d63      	ldr	r3, [r4, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 8006ffc:	4635      	mov	r5, r6
      __HAL_UNLOCK(hadc);
 8006ffe:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007002:	f043 0320 	orr.w	r3, r3, #32
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8007006:	4628      	mov	r0, r5
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007008:	6563      	str	r3, [r4, #84]	; 0x54
}
 800700a:	b01a      	add	sp, #104	; 0x68
 800700c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800700e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007010:	f001 f850 	bl	80080b4 <HAL_DMA_Abort>
    if (tmp_hal_status == HAL_ERROR)
 8007014:	2801      	cmp	r0, #1
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007016:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_ERROR)
 8007018:	d053      	beq.n	80070c2 <HAL_ADCEx_MultiModeStop_DMA+0xf2>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800701a:	6822      	ldr	r2, [r4, #0]
 800701c:	6853      	ldr	r3, [r2, #4]
 800701e:	f023 0310 	bic.w	r3, r3, #16
 8007022:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8007024:	2800      	cmp	r0, #0
 8007026:	d155      	bne.n	80070d4 <HAL_ADCEx_MultiModeStop_DMA+0x104>
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 8007028:	a801      	add	r0, sp, #4
 800702a:	f7ff fcfd 	bl	8006a28 <ADC_Disable>
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 800702e:	4620      	mov	r0, r4
 8007030:	f7ff fcfa 	bl	8006a28 <ADC_Disable>
    ADC_STATE_CLR_SET(hadc->State,
 8007034:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007036:	4b2c      	ldr	r3, [pc, #176]	; (80070e8 <HAL_ADCEx_MultiModeStop_DMA+0x118>)
 8007038:	4013      	ands	r3, r2
 800703a:	f043 0301 	orr.w	r3, r3, #1
 800703e:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8007040:	2300      	movs	r3, #0
}
 8007042:	4628      	mov	r0, r5
  __HAL_UNLOCK(hadc);
 8007044:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007048:	b01a      	add	sp, #104	; 0x68
 800704a:	bd70      	pop	{r4, r5, r6, pc}
 800704c:	4b27      	ldr	r3, [pc, #156]	; (80070ec <HAL_ADCEx_MultiModeStop_DMA+0x11c>)
 800704e:	9301      	str	r3, [sp, #4]
    tickstart = HAL_GetTick();
 8007050:	f7fe fe58 	bl	8005d04 <HAL_GetTick>
    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007054:	9b01      	ldr	r3, [sp, #4]
    tickstart = HAL_GetTick();
 8007056:	4605      	mov	r5, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	075b      	lsls	r3, r3, #29
 800705c:	d41d      	bmi.n	800709a <HAL_ADCEx_MultiModeStop_DMA+0xca>
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	075a      	lsls	r2, r3, #29
 8007064:	d5d3      	bpl.n	800700e <HAL_ADCEx_MultiModeStop_DMA+0x3e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007066:	f7fe fe4d 	bl	8005d04 <HAL_GetTick>
 800706a:	1b43      	subs	r3, r0, r5
 800706c:	2b05      	cmp	r3, #5
 800706e:	d91b      	bls.n	80070a8 <HAL_ADCEx_MultiModeStop_DMA+0xd8>
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007070:	9b01      	ldr	r3, [sp, #4]
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	0750      	lsls	r0, r2, #29
 8007076:	d51f      	bpl.n	80070b8 <HAL_ADCEx_MultiModeStop_DMA+0xe8>
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800707c:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 800707e:	2501      	movs	r5, #1
          __HAL_UNLOCK(hadc);
 8007080:	2200      	movs	r2, #0
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007082:	f043 0310 	orr.w	r3, r3, #16
}
 8007086:	4628      	mov	r0, r5
          __HAL_UNLOCK(hadc);
 8007088:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800708c:	6563      	str	r3, [r4, #84]	; 0x54
}
 800708e:	b01a      	add	sp, #104	; 0x68
 8007090:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8007092:	2502      	movs	r5, #2
}
 8007094:	4628      	mov	r0, r5
 8007096:	b01a      	add	sp, #104	; 0x68
 8007098:	bd70      	pop	{r4, r5, r6, pc}
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800709e:	f7fe fe31 	bl	8005d04 <HAL_GetTick>
 80070a2:	1b43      	subs	r3, r0, r5
 80070a4:	2b05      	cmp	r3, #5
 80070a6:	d8e3      	bhi.n	8007070 <HAL_ADCEx_MultiModeStop_DMA+0xa0>
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 80070a8:	6822      	ldr	r2, [r4, #0]
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80070aa:	9b01      	ldr	r3, [sp, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f013 0f04 	tst.w	r3, #4
 80070b2:	6893      	ldr	r3, [r2, #8]
 80070b4:	d1d7      	bne.n	8007066 <HAL_ADCEx_MultiModeStop_DMA+0x96>
 80070b6:	e7d4      	b.n	8007062 <HAL_ADCEx_MultiModeStop_DMA+0x92>
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 80070b8:	6822      	ldr	r2, [r4, #0]
 80070ba:	6891      	ldr	r1, [r2, #8]
 80070bc:	0749      	lsls	r1, r1, #29
 80070be:	d5f5      	bpl.n	80070ac <HAL_ADCEx_MultiModeStop_DMA+0xdc>
 80070c0:	e7dc      	b.n	800707c <HAL_ADCEx_MultiModeStop_DMA+0xac>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80070c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80070c4:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80070c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ca:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80070cc:	6853      	ldr	r3, [r2, #4]
 80070ce:	f023 0310 	bic.w	r3, r3, #16
 80070d2:	6053      	str	r3, [r2, #4]
      (void) ADC_Disable(hadc);
 80070d4:	4620      	mov	r0, r4
 80070d6:	f7ff fca7 	bl	8006a28 <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 80070da:	a801      	add	r0, sp, #4
 80070dc:	f7ff fca4 	bl	8006a28 <ADC_Disable>
 80070e0:	e7a8      	b.n	8007034 <HAL_ADCEx_MultiModeStop_DMA+0x64>
 80070e2:	bf00      	nop
 80070e4:	40022000 	.word	0x40022000
 80070e8:	ffffeefe 	.word	0xffffeefe
 80070ec:	40022100 	.word	0x40022100

080070f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop

080070f4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop

080070f8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop

080070fc <HAL_ADCEx_LevelOutOfWindow3Callback>:
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop

08007100 <HAL_ADCEx_EndOfSamplingCallback>:
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop

08007104 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007104:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007106:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 800710a:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800710c:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 800710e:	2a01      	cmp	r2, #1
 8007110:	d04d      	beq.n	80071ae <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8007112:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007114:	4c2b      	ldr	r4, [pc, #172]	; (80071c4 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007116:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8007118:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800711a:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800711c:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800711e:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 8007120:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007124:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007126:	d008      	beq.n	800713a <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007128:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800712a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800712e:	f041 0120 	orr.w	r1, r1, #32
 8007132:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8007134:	b01a      	add	sp, #104	; 0x68
 8007136:	bcf0      	pop	{r4, r5, r6, r7}
 8007138:	4770      	bx	lr
 800713a:	4c23      	ldr	r4, [pc, #140]	; (80071c8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 800713c:	68a2      	ldr	r2, [r4, #8]
 800713e:	0752      	lsls	r2, r2, #29
 8007140:	d50b      	bpl.n	800715a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8007142:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8007146:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007148:	f042 0220 	orr.w	r2, r2, #32
 800714c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8007154:	b01a      	add	sp, #104	; 0x68
 8007156:	bcf0      	pop	{r4, r5, r6, r7}
 8007158:	4770      	bx	lr
 800715a:	68a8      	ldr	r0, [r5, #8]
 800715c:	f010 0004 	ands.w	r0, r0, #4
 8007160:	d1f0      	bne.n	8007144 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007162:	b1c6      	cbz	r6, 8007196 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8007164:	f8df c068 	ldr.w	ip, [pc, #104]	; 80071d0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8007168:	684f      	ldr	r7, [r1, #4]
 800716a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800716e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007172:	433a      	orrs	r2, r7
 8007174:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007178:	68ad      	ldr	r5, [r5, #8]
 800717a:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800717c:	432a      	orrs	r2, r5
 800717e:	07d4      	lsls	r4, r2, #31
 8007180:	d413      	bmi.n	80071aa <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 8007182:	688a      	ldr	r2, [r1, #8]
 8007184:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007188:	4316      	orrs	r6, r2
 800718a:	4a10      	ldr	r2, [pc, #64]	; (80071cc <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 800718c:	400a      	ands	r2, r1
 800718e:	4316      	orrs	r6, r2
 8007190:	f8cc 6008 	str.w	r6, [ip, #8]
 8007194:	e7db      	b.n	800714e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007196:	490e      	ldr	r1, [pc, #56]	; (80071d0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8007198:	688a      	ldr	r2, [r1, #8]
 800719a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800719e:	608a      	str	r2, [r1, #8]
 80071a0:	68a8      	ldr	r0, [r5, #8]
 80071a2:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80071a4:	4302      	orrs	r2, r0
 80071a6:	07d0      	lsls	r0, r2, #31
 80071a8:	d505      	bpl.n	80071b6 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071aa:	2000      	movs	r0, #0
 80071ac:	e7cf      	b.n	800714e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80071ae:	2002      	movs	r0, #2
}
 80071b0:	b01a      	add	sp, #104	; 0x68
 80071b2:	bcf0      	pop	{r4, r5, r6, r7}
 80071b4:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80071b6:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071b8:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80071ba:	4a04      	ldr	r2, [pc, #16]	; (80071cc <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80071bc:	4022      	ands	r2, r4
 80071be:	608a      	str	r2, [r1, #8]
 80071c0:	e7c5      	b.n	800714e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80071c2:	bf00      	nop
 80071c4:	40022000 	.word	0x40022000
 80071c8:	40022100 	.word	0x40022100
 80071cc:	fffff0e0 	.word	0xfffff0e0
 80071d0:	40022300 	.word	0x40022300

080071d4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071d4:	4906      	ldr	r1, [pc, #24]	; (80071f0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071d6:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80071da:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80071dc:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071de:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80071e0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071e4:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80071e8:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80071ea:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80071ec:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80071ee:	4770      	bx	lr
 80071f0:	e000ed00 	.word	0xe000ed00
 80071f4:	05fa0000 	.word	0x05fa0000

080071f8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071f8:	4b1b      	ldr	r3, [pc, #108]	; (8007268 <HAL_NVIC_SetPriority+0x70>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007200:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007202:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007206:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800720a:	f1be 0f04 	cmp.w	lr, #4
 800720e:	bf28      	it	cs
 8007210:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007214:	f1bc 0f06 	cmp.w	ip, #6
 8007218:	d91a      	bls.n	8007250 <HAL_NVIC_SetPriority+0x58>
 800721a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800721c:	f04f 3cff 	mov.w	ip, #4294967295
 8007220:	fa0c fc03 	lsl.w	ip, ip, r3
 8007224:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007228:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800722c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800722e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007232:	ea21 010c 	bic.w	r1, r1, ip
 8007236:	fa01 f103 	lsl.w	r1, r1, r3
 800723a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800723e:	db0a      	blt.n	8007256 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007240:	0109      	lsls	r1, r1, #4
 8007242:	4b0a      	ldr	r3, [pc, #40]	; (800726c <HAL_NVIC_SetPriority+0x74>)
 8007244:	b2c9      	uxtb	r1, r1
 8007246:	4403      	add	r3, r0
 8007248:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800724c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007250:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007252:	4613      	mov	r3, r2
 8007254:	e7e8      	b.n	8007228 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007256:	f000 000f 	and.w	r0, r0, #15
 800725a:	0109      	lsls	r1, r1, #4
 800725c:	4b04      	ldr	r3, [pc, #16]	; (8007270 <HAL_NVIC_SetPriority+0x78>)
 800725e:	b2c9      	uxtb	r1, r1
 8007260:	4403      	add	r3, r0
 8007262:	7619      	strb	r1, [r3, #24]
 8007264:	f85d fb04 	ldr.w	pc, [sp], #4
 8007268:	e000ed00 	.word	0xe000ed00
 800726c:	e000e100 	.word	0xe000e100
 8007270:	e000ecfc 	.word	0xe000ecfc

08007274 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007274:	2800      	cmp	r0, #0
 8007276:	db07      	blt.n	8007288 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007278:	2301      	movs	r3, #1
 800727a:	f000 011f 	and.w	r1, r0, #31
 800727e:	4a03      	ldr	r2, [pc, #12]	; (800728c <HAL_NVIC_EnableIRQ+0x18>)
 8007280:	0940      	lsrs	r0, r0, #5
 8007282:	408b      	lsls	r3, r1
 8007284:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	e000e100 	.word	0xe000e100

08007290 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007290:	1e43      	subs	r3, r0, #1
 8007292:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007296:	d20c      	bcs.n	80072b2 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007298:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800729c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800729e:	4906      	ldr	r1, [pc, #24]	; (80072b8 <HAL_SYSTICK_Config+0x28>)
 80072a0:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072a4:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072a6:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072a8:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072ac:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072ae:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80072b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	e000ed00 	.word	0xe000ed00

080072bc <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80072bc:	b188      	cbz	r0, 80072e2 <HAL_DAC_Init+0x26>
{
 80072be:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80072c0:	7903      	ldrb	r3, [r0, #4]
 80072c2:	4604      	mov	r4, r0
 80072c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80072c8:	b13b      	cbz	r3, 80072da <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80072ca:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80072cc:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80072ce:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80072d0:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80072d2:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80072d4:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80072d6:	7122      	strb	r2, [r4, #4]
}
 80072d8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80072da:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80072dc:	f7fe f988 	bl	80055f0 <HAL_DAC_MspInit>
 80072e0:	e7f3      	b.n	80072ca <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80072e2:	2001      	movs	r0, #1
}
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop

080072e8 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80072e8:	7942      	ldrb	r2, [r0, #5]
 80072ea:	2a01      	cmp	r2, #1
 80072ec:	d02e      	beq.n	800734c <HAL_DAC_Start+0x64>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80072ee:	4603      	mov	r3, r0
 80072f0:	f04f 0c02 	mov.w	ip, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80072f4:	6800      	ldr	r0, [r0, #0]
 80072f6:	2201      	movs	r2, #1
{
 80072f8:	b510      	push	{r4, lr}
  __HAL_DAC_ENABLE(hdac, Channel);
 80072fa:	f001 0e10 	and.w	lr, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 80072fe:	f883 c004 	strb.w	ip, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8007302:	6804      	ldr	r4, [r0, #0]
 8007304:	fa02 f20e 	lsl.w	r2, r2, lr
 8007308:	4322      	orrs	r2, r4
 800730a:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800730c:	6802      	ldr	r2, [r0, #0]
  if (Channel == DAC_CHANNEL_1)
 800730e:	b969      	cbnz	r1, 800732c <HAL_DAC_Start+0x44>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007310:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 8007314:	4562      	cmp	r2, ip
 8007316:	d103      	bne.n	8007320 <HAL_DAC_Start+0x38>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007318:	6842      	ldr	r2, [r0, #4]
 800731a:	f042 0201 	orr.w	r2, r2, #1
 800731e:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007320:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8007322:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 8007324:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8007326:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 8007328:	715a      	strb	r2, [r3, #5]
}
 800732a:	bd10      	pop	{r4, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800732c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007330:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 8007334:	4562      	cmp	r2, ip
 8007336:	d1f3      	bne.n	8007320 <HAL_DAC_Start+0x38>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007338:	6842      	ldr	r2, [r0, #4]
  hdac->State = HAL_DAC_STATE_READY;
 800733a:	2101      	movs	r1, #1
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800733c:	f042 0202 	orr.w	r2, r2, #2
 8007340:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 8007342:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8007344:	7119      	strb	r1, [r3, #4]
  return HAL_OK;
 8007346:	4610      	mov	r0, r2
  __HAL_UNLOCK(hdac);
 8007348:	715a      	strb	r2, [r3, #5]
}
 800734a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdac);
 800734c:	2002      	movs	r0, #2
}
 800734e:	4770      	bx	lr

08007350 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007352:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007354:	7940      	ldrb	r0, [r0, #5]
{
 8007356:	9f06      	ldr	r7, [sp, #24]
  __HAL_LOCK(hdac);
 8007358:	2801      	cmp	r0, #1
 800735a:	d053      	beq.n	8007404 <HAL_DAC_Start_DMA+0xb4>
 800735c:	460d      	mov	r5, r1
 800735e:	4611      	mov	r1, r2
 8007360:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007362:	6826      	ldr	r6, [r4, #0]
  __HAL_LOCK(hdac);
 8007364:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8007366:	2202      	movs	r2, #2
 8007368:	7122      	strb	r2, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 800736a:	bb3d      	cbnz	r5, 80073bc <HAL_DAC_Start_DMA+0x6c>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800736c:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 800736e:	2f04      	cmp	r7, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007370:	4a37      	ldr	r2, [pc, #220]	; (8007450 <HAL_DAC_Start_DMA+0x100>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007372:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007458 <HAL_DAC_Start_DMA+0x108>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007376:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007378:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800737a:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800737e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007382:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 800745c <HAL_DAC_Start_DMA+0x10c>
 8007386:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800738a:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 800738c:	d042      	beq.n	8007414 <HAL_DAC_Start_DMA+0xc4>
 800738e:	2f08      	cmp	r7, #8
 8007390:	d03d      	beq.n	800740e <HAL_DAC_Start_DMA+0xbe>
 8007392:	2f00      	cmp	r7, #0
 8007394:	d038      	beq.n	8007408 <HAL_DAC_Start_DMA+0xb8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007396:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007398:	6837      	ldr	r7, [r6, #0]
 800739a:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 800739e:	6037      	str	r7, [r6, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80073a0:	f000 fcf0 	bl	8007d84 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80073a4:	2300      	movs	r3, #0
 80073a6:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 80073a8:	bb38      	cbnz	r0, 80073fa <HAL_DAC_Start_DMA+0xaa>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	f005 0110 	and.w	r1, r5, #16
 80073b0:	2501      	movs	r5, #1
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	408d      	lsls	r5, r1
 80073b6:	4315      	orrs	r5, r2
 80073b8:	601d      	str	r5, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 80073ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80073bc:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 80073be:	2f04      	cmp	r7, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80073c0:	4a24      	ldr	r2, [pc, #144]	; (8007454 <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80073c2:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8007460 <HAL_DAC_Start_DMA+0x110>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80073c6:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80073c8:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80073ca:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80073ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80073d2:	f8df c090 	ldr.w	ip, [pc, #144]	; 8007464 <HAL_DAC_Start_DMA+0x114>
 80073d6:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80073da:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 80073dc:	d02f      	beq.n	800743e <HAL_DAC_Start_DMA+0xee>
 80073de:	2f08      	cmp	r7, #8
 80073e0:	d024      	beq.n	800742c <HAL_DAC_Start_DMA+0xdc>
 80073e2:	b1d7      	cbz	r7, 800741a <HAL_DAC_Start_DMA+0xca>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80073e4:	6837      	ldr	r7, [r6, #0]
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80073e6:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80073e8:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 80073ec:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80073ee:	f000 fcc9 	bl	8007d84 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 80073f2:	2300      	movs	r3, #0
 80073f4:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d0d7      	beq.n	80073aa <HAL_DAC_Start_DMA+0x5a>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80073fa:	6923      	ldr	r3, [r4, #16]
 80073fc:	f043 0304 	orr.w	r3, r3, #4
 8007400:	6123      	str	r3, [r4, #16]
}
 8007402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8007404:	2002      	movs	r0, #2
}
 8007406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007408:	f106 0208 	add.w	r2, r6, #8
        break;
 800740c:	e7c4      	b.n	8007398 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800740e:	f106 0210 	add.w	r2, r6, #16
        break;
 8007412:	e7c1      	b.n	8007398 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007414:	f106 020c 	add.w	r2, r6, #12
        break;
 8007418:	e7be      	b.n	8007398 <HAL_DAC_Start_DMA+0x48>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800741a:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800741c:	f106 0214 	add.w	r2, r6, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007420:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8007424:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007426:	f000 fcad 	bl	8007d84 <HAL_DMA_Start_IT>
 800742a:	e7e2      	b.n	80073f2 <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800742c:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800742e:	f106 021c 	add.w	r2, r6, #28
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007432:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8007436:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007438:	f000 fca4 	bl	8007d84 <HAL_DMA_Start_IT>
 800743c:	e7d9      	b.n	80073f2 <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800743e:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007440:	f106 0218 	add.w	r2, r6, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007444:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8007448:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800744a:	f000 fc9b 	bl	8007d84 <HAL_DMA_Start_IT>
 800744e:	e7d0      	b.n	80073f2 <HAL_DAC_Start_DMA+0xa2>
 8007450:	08007499 	.word	0x08007499
 8007454:	0800769d 	.word	0x0800769d
 8007458:	080074a9 	.word	0x080074a9
 800745c:	080074b9 	.word	0x080074b9
 8007460:	080076b1 	.word	0x080076b1
 8007464:	080076c1 	.word	0x080076c1

08007468 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007468:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800746a:	6800      	ldr	r0, [r0, #0]
{
 800746c:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 800746e:	2400      	movs	r4, #0
 8007470:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8007472:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8007474:	b951      	cbnz	r1, 800748c <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007476:	9901      	ldr	r1, [sp, #4]
 8007478:	3108      	adds	r1, #8
 800747a:	440a      	add	r2, r1
 800747c:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800747e:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8007480:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8007482:	6013      	str	r3, [r2, #0]
}
 8007484:	b003      	add	sp, #12
 8007486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800748a:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800748c:	9901      	ldr	r1, [sp, #4]
 800748e:	3114      	adds	r1, #20
 8007490:	440a      	add	r2, r1
 8007492:	9201      	str	r2, [sp, #4]
 8007494:	e7f3      	b.n	800747e <HAL_DAC_SetValue+0x16>
 8007496:	bf00      	nop

08007498 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007498:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800749a:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800749c:	4620      	mov	r0, r4
 800749e:	f7fc fb3f 	bl	8003b20 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80074a2:	2301      	movs	r3, #1
 80074a4:	7123      	strb	r3, [r4, #4]
}
 80074a6:	bd10      	pop	{r4, pc}

080074a8 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80074a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80074aa:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80074ac:	f7fc fb40 	bl	8003b30 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80074b0:	bd08      	pop	{r3, pc}
 80074b2:	bf00      	nop

080074b4 <HAL_DAC_ErrorCallbackCh1>:
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop

080074b8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80074b8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074ba:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80074bc:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80074be:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80074c0:	f043 0304 	orr.w	r3, r3, #4
 80074c4:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 80074c6:	f7ff fff5 	bl	80074b4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80074ca:	2301      	movs	r3, #1
 80074cc:	7123      	strb	r3, [r4, #4]
}
 80074ce:	bd10      	pop	{r4, pc}

080074d0 <HAL_DAC_DMAUnderrunCallbackCh1>:
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop

080074d4 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80074d4:	6803      	ldr	r3, [r0, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	0491      	lsls	r1, r2, #18
{
 80074da:	b510      	push	{r4, lr}
 80074dc:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80074de:	d502      	bpl.n	80074e6 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80074e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074e2:	0492      	lsls	r2, r2, #18
 80074e4:	d418      	bmi.n	8007518 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	0091      	lsls	r1, r2, #2
 80074ea:	d502      	bpl.n	80074f2 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80074ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ee:	0092      	lsls	r2, r2, #2
 80074f0:	d400      	bmi.n	80074f4 <HAL_DAC_IRQHandler+0x20>
}
 80074f2:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 80074f4:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80074f6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80074fa:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 80074fc:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80074fe:	6922      	ldr	r2, [r4, #16]
 8007500:	f042 0202 	orr.w	r2, r2, #2
 8007504:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007506:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 800750e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007512:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007514:	f000 b8e0 	b.w	80076d8 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8007518:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800751a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 800751e:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007520:	6902      	ldr	r2, [r0, #16]
 8007522:	f042 0201 	orr.w	r2, r2, #1
 8007526:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007528:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007530:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007532:	f7ff ffcd 	bl	80074d0 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	e7d5      	b.n	80074e6 <HAL_DAC_IRQHandler+0x12>
 800753a:	bf00      	nop

0800753c <HAL_DAC_ConfigChannel>:
{
 800753c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdac);
 8007540:	7943      	ldrb	r3, [r0, #5]
{
 8007542:	460e      	mov	r6, r1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8007544:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 8007546:	2b01      	cmp	r3, #1
 8007548:	f000 8098 	beq.w	800767c <HAL_DAC_ConfigChannel+0x140>
 800754c:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800754e:	2904      	cmp	r1, #4
 8007550:	4605      	mov	r5, r0
 8007552:	4614      	mov	r4, r2
  __HAL_LOCK(hdac);
 8007554:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8007556:	f04f 0302 	mov.w	r3, #2
 800755a:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800755c:	d045      	beq.n	80075ea <HAL_DAC_ConfigChannel+0xae>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800755e:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 8007562:	6800      	ldr	r0, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007564:	6933      	ldr	r3, [r6, #16]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d108      	bne.n	800757c <HAL_DAC_ConfigChannel+0x40>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800756a:	241f      	movs	r4, #31
    tmpreg1 = hdac->Instance->CCR;
 800756c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800756e:	4094      	lsls	r4, r2
 8007570:	ea23 0404 	bic.w	r4, r3, r4
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007574:	6973      	ldr	r3, [r6, #20]
 8007576:	4093      	lsls	r3, r2
 8007578:	4323      	orrs	r3, r4
    hdac->Instance->CCR = tmpreg1;
 800757a:	6383      	str	r3, [r0, #56]	; 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800757c:	2407      	movs	r4, #7
 800757e:	fa04 f302 	lsl.w	r3, r4, r2
  tmpreg1 = hdac->Instance->MCR;
 8007582:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007584:	ea24 0403 	bic.w	r4, r4, r3
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007588:	e9d6 7302 	ldrd	r7, r3, [r6, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800758c:	2b01      	cmp	r3, #1
 800758e:	d028      	beq.n	80075e2 <HAL_DAC_ConfigChannel+0xa6>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007590:	2b02      	cmp	r3, #2
 8007592:	d028      	beq.n	80075e6 <HAL_DAC_ConfigChannel+0xaa>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007594:	fab7 f387 	clz	r3, r7
 8007598:	095b      	lsrs	r3, r3, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800759a:	433b      	orrs	r3, r7
 800759c:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800759e:	6871      	ldr	r1, [r6, #4]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80075a0:	4093      	lsls	r3, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80075a2:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80075a4:	4323      	orrs	r3, r4
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80075a6:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hdac->Instance->MCR = tmpreg1;
 80075aa:	63c3      	str	r3, [r0, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80075ac:	4094      	lsls	r4, r2
 80075ae:	6803      	ldr	r3, [r0, #0]
 80075b0:	ea23 0304 	bic.w	r3, r3, r4
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80075b4:	f640 74fe 	movw	r4, #4094	; 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80075b8:	6003      	str	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80075ba:	4094      	lsls	r4, r2
  tmpreg1 = hdac->Instance->CR;
 80075bc:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80075be:	ea23 0304 	bic.w	r3, r3, r4
  hdac->State = HAL_DAC_STATE_READY;
 80075c2:	2401      	movs	r4, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80075c4:	430b      	orrs	r3, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80075c6:	21c0      	movs	r1, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 80075c8:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80075ca:	fa01 f302 	lsl.w	r3, r1, r2
 80075ce:	6802      	ldr	r2, [r0, #0]
  __HAL_UNLOCK(hdac);
 80075d0:	2100      	movs	r1, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80075d2:	ea22 0203 	bic.w	r2, r2, r3
 80075d6:	6002      	str	r2, [r0, #0]
  return HAL_OK;
 80075d8:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 80075da:	712c      	strb	r4, [r5, #4]
  __HAL_UNLOCK(hdac);
 80075dc:	7169      	strb	r1, [r5, #5]
}
 80075de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 80075e2:	2300      	movs	r3, #0
 80075e4:	e7d9      	b.n	800759a <HAL_DAC_ConfigChannel+0x5e>
    connectOnChip = DAC_MCR_MODE1_0;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e7d7      	b.n	800759a <HAL_DAC_ConfigChannel+0x5e>
    tickstart = HAL_GetTick();
 80075ea:	f7fe fb8b 	bl	8005d04 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80075ee:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80075f0:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80075f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (Channel == DAC_CHANNEL_1)
 80075f4:	bb1c      	cbnz	r4, 800763e <HAL_DAC_ConfigChannel+0x102>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80075f6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8007694 <HAL_DAC_ConfigChannel+0x158>
 80075fa:	ea13 0f08 	tst.w	r3, r8
 80075fe:	d00d      	beq.n	800761c <HAL_DAC_ConfigChannel+0xe0>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007600:	f7fe fb80 	bl	8005d04 <HAL_GetTick>
 8007604:	1bc3      	subs	r3, r0, r7
 8007606:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007608:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800760a:	d903      	bls.n	8007614 <HAL_DAC_ConfigChannel+0xd8>
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800760c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800760e:	ea12 0f08 	tst.w	r2, r8
 8007612:	d136      	bne.n	8007682 <HAL_DAC_ConfigChannel+0x146>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007616:	ea13 0f08 	tst.w	r3, r8
 800761a:	d1f1      	bne.n	8007600 <HAL_DAC_ConfigChannel+0xc4>
      HAL_Delay(1);
 800761c:	2001      	movs	r0, #1
 800761e:	f7fe fb77 	bl	8005d10 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007622:	6828      	ldr	r0, [r5, #0]
 8007624:	69b3      	ldr	r3, [r6, #24]
 8007626:	6403      	str	r3, [r0, #64]	; 0x40
 8007628:	e011      	b.n	800764e <HAL_DAC_ConfigChannel+0x112>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800762a:	f7fe fb6b 	bl	8005d04 <HAL_GetTick>
 800762e:	1bc3      	subs	r3, r0, r7
 8007630:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007632:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007634:	d902      	bls.n	800763c <HAL_DAC_ConfigChannel+0x100>
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007638:	2a00      	cmp	r2, #0
 800763a:	db22      	blt.n	8007682 <HAL_DAC_ConfigChannel+0x146>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800763c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800763e:	2b00      	cmp	r3, #0
 8007640:	dbf3      	blt.n	800762a <HAL_DAC_ConfigChannel+0xee>
      HAL_Delay(1U);
 8007642:	2001      	movs	r0, #1
 8007644:	f7fe fb64 	bl	8005d10 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007648:	6828      	ldr	r0, [r5, #0]
 800764a:	69b3      	ldr	r3, [r6, #24]
 800764c:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800764e:	f004 0210 	and.w	r2, r4, #16
 8007652:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007656:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007658:	4091      	lsls	r1, r2
 800765a:	ea23 0301 	bic.w	r3, r3, r1
 800765e:	69f1      	ldr	r1, [r6, #28]
 8007660:	4091      	lsls	r1, r2
 8007662:	430b      	orrs	r3, r1
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007664:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007666:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007668:	4091      	lsls	r1, r2
 800766a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800766c:	ea23 0301 	bic.w	r3, r3, r1
 8007670:	6a31      	ldr	r1, [r6, #32]
 8007672:	4091      	lsls	r1, r2
 8007674:	430b      	orrs	r3, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007676:	6831      	ldr	r1, [r6, #0]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007678:	64c3      	str	r3, [r0, #76]	; 0x4c
 800767a:	e773      	b.n	8007564 <HAL_DAC_ConfigChannel+0x28>
  __HAL_LOCK(hdac);
 800767c:	2002      	movs	r0, #2
}
 800767e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007682:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007684:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007686:	f043 0308 	orr.w	r3, r3, #8
            return HAL_TIMEOUT;
 800768a:	4610      	mov	r0, r2
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800768c:	612b      	str	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800768e:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
 8007690:	e7a5      	b.n	80075de <HAL_DAC_ConfigChannel+0xa2>
 8007692:	bf00      	nop
 8007694:	20008000 	.word	0x20008000

08007698 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop

0800769c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800769c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800769e:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80076a0:	4620      	mov	r0, r4
 80076a2:	f7ff fff9 	bl	8007698 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80076a6:	2301      	movs	r3, #1
 80076a8:	7123      	strb	r3, [r4, #4]
}
 80076aa:	bd10      	pop	{r4, pc}

080076ac <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop

080076b0 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80076b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80076b2:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80076b4:	f7ff fffa 	bl	80076ac <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80076b8:	bd08      	pop	{r3, pc}
 80076ba:	bf00      	nop

080076bc <HAL_DACEx_ErrorCallbackCh2>:
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop

080076c0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80076c0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076c2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80076c4:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80076c6:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80076c8:	f043 0304 	orr.w	r3, r3, #4
 80076cc:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80076ce:	f7ff fff5 	bl	80076bc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80076d2:	2301      	movs	r3, #1
 80076d4:	7123      	strb	r3, [r4, #4]
}
 80076d6:	bd10      	pop	{r4, pc}

080076d8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop

080076dc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80076dc:	6802      	ldr	r2, [r0, #0]
 80076de:	4b34      	ldr	r3, [pc, #208]	; (80077b0 <DMA_CalcBaseAndBitshift+0xd4>)
 80076e0:	4934      	ldr	r1, [pc, #208]	; (80077b4 <DMA_CalcBaseAndBitshift+0xd8>)
{
 80076e2:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80076e4:	4d34      	ldr	r5, [pc, #208]	; (80077b8 <DMA_CalcBaseAndBitshift+0xdc>)
 80076e6:	4c35      	ldr	r4, [pc, #212]	; (80077bc <DMA_CalcBaseAndBitshift+0xe0>)
 80076e8:	42aa      	cmp	r2, r5
 80076ea:	bf18      	it	ne
 80076ec:	429a      	cmpne	r2, r3
 80076ee:	bf0c      	ite	eq
 80076f0:	2301      	moveq	r3, #1
 80076f2:	2300      	movne	r3, #0
 80076f4:	428a      	cmp	r2, r1
 80076f6:	bf08      	it	eq
 80076f8:	f043 0301 	orreq.w	r3, r3, #1
 80076fc:	3130      	adds	r1, #48	; 0x30
 80076fe:	42a2      	cmp	r2, r4
 8007700:	bf08      	it	eq
 8007702:	f043 0301 	orreq.w	r3, r3, #1
 8007706:	3430      	adds	r4, #48	; 0x30
 8007708:	428a      	cmp	r2, r1
 800770a:	bf08      	it	eq
 800770c:	f043 0301 	orreq.w	r3, r3, #1
 8007710:	3130      	adds	r1, #48	; 0x30
 8007712:	42a2      	cmp	r2, r4
 8007714:	bf08      	it	eq
 8007716:	f043 0301 	orreq.w	r3, r3, #1
 800771a:	3430      	adds	r4, #48	; 0x30
 800771c:	428a      	cmp	r2, r1
 800771e:	bf08      	it	eq
 8007720:	f043 0301 	orreq.w	r3, r3, #1
 8007724:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8007728:	42a2      	cmp	r2, r4
 800772a:	bf08      	it	eq
 800772c:	f043 0301 	orreq.w	r3, r3, #1
 8007730:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8007734:	428a      	cmp	r2, r1
 8007736:	bf08      	it	eq
 8007738:	f043 0301 	orreq.w	r3, r3, #1
 800773c:	3130      	adds	r1, #48	; 0x30
 800773e:	42a2      	cmp	r2, r4
 8007740:	bf08      	it	eq
 8007742:	f043 0301 	orreq.w	r3, r3, #1
 8007746:	3430      	adds	r4, #48	; 0x30
 8007748:	428a      	cmp	r2, r1
 800774a:	bf08      	it	eq
 800774c:	f043 0301 	orreq.w	r3, r3, #1
 8007750:	3130      	adds	r1, #48	; 0x30
 8007752:	42a2      	cmp	r2, r4
 8007754:	bf08      	it	eq
 8007756:	f043 0301 	orreq.w	r3, r3, #1
 800775a:	3430      	adds	r4, #48	; 0x30
 800775c:	428a      	cmp	r2, r1
 800775e:	bf08      	it	eq
 8007760:	f043 0301 	orreq.w	r3, r3, #1
 8007764:	3130      	adds	r1, #48	; 0x30
 8007766:	42a2      	cmp	r2, r4
 8007768:	bf08      	it	eq
 800776a:	f043 0301 	orreq.w	r3, r3, #1
 800776e:	428a      	cmp	r2, r1
 8007770:	bf08      	it	eq
 8007772:	f043 0301 	orreq.w	r3, r3, #1
 8007776:	b913      	cbnz	r3, 800777e <DMA_CalcBaseAndBitshift+0xa2>
 8007778:	4b11      	ldr	r3, [pc, #68]	; (80077c0 <DMA_CalcBaseAndBitshift+0xe4>)
 800777a:	429a      	cmp	r2, r3
 800777c:	d113      	bne.n	80077a6 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800777e:	b2d3      	uxtb	r3, r2
 8007780:	4910      	ldr	r1, [pc, #64]	; (80077c4 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007782:	4c11      	ldr	r4, [pc, #68]	; (80077c8 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007784:	3b10      	subs	r3, #16
 8007786:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 800778a:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800778c:	4b0f      	ldr	r3, [pc, #60]	; (80077cc <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800778e:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007792:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007796:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007798:	bf88      	it	hi
 800779a:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800779c:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800779e:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	bc30      	pop	{r4, r5}
 80077a4:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80077a6:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 80077aa:	6583      	str	r3, [r0, #88]	; 0x58
 80077ac:	e7f8      	b.n	80077a0 <DMA_CalcBaseAndBitshift+0xc4>
 80077ae:	bf00      	nop
 80077b0:	40020010 	.word	0x40020010
 80077b4:	40020040 	.word	0x40020040
 80077b8:	40020028 	.word	0x40020028
 80077bc:	40020058 	.word	0x40020058
 80077c0:	400204b8 	.word	0x400204b8
 80077c4:	aaaaaaab 	.word	0xaaaaaaab
 80077c8:	0801b254 	.word	0x0801b254
 80077cc:	fffffc00 	.word	0xfffffc00

080077d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80077d0:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077d2:	4a29      	ldr	r2, [pc, #164]	; (8007878 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80077d4:	4929      	ldr	r1, [pc, #164]	; (800787c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 80077d6:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077d8:	4d29      	ldr	r5, [pc, #164]	; (8007880 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 80077da:	4c2a      	ldr	r4, [pc, #168]	; (8007884 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 80077dc:	42ab      	cmp	r3, r5
 80077de:	bf18      	it	ne
 80077e0:	4293      	cmpne	r3, r2
 80077e2:	bf0c      	ite	eq
 80077e4:	2201      	moveq	r2, #1
 80077e6:	2200      	movne	r2, #0
 80077e8:	428b      	cmp	r3, r1
 80077ea:	bf08      	it	eq
 80077ec:	f042 0201 	orreq.w	r2, r2, #1
 80077f0:	3128      	adds	r1, #40	; 0x28
 80077f2:	42a3      	cmp	r3, r4
 80077f4:	bf08      	it	eq
 80077f6:	f042 0201 	orreq.w	r2, r2, #1
 80077fa:	3428      	adds	r4, #40	; 0x28
 80077fc:	428b      	cmp	r3, r1
 80077fe:	bf08      	it	eq
 8007800:	f042 0201 	orreq.w	r2, r2, #1
 8007804:	3128      	adds	r1, #40	; 0x28
 8007806:	42a3      	cmp	r3, r4
 8007808:	bf08      	it	eq
 800780a:	f042 0201 	orreq.w	r2, r2, #1
 800780e:	428b      	cmp	r3, r1
 8007810:	bf08      	it	eq
 8007812:	f042 0201 	orreq.w	r2, r2, #1
 8007816:	b912      	cbnz	r2, 800781e <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8007818:	4a1b      	ldr	r2, [pc, #108]	; (8007888 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d113      	bne.n	8007846 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800781e:	b2db      	uxtb	r3, r3
 8007820:	4c1a      	ldr	r4, [pc, #104]	; (800788c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007822:	4a1b      	ldr	r2, [pc, #108]	; (8007890 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007824:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007826:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007828:	4d1a      	ldr	r5, [pc, #104]	; (8007894 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800782a:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800782e:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007830:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007834:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007838:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800783a:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800783e:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007840:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007842:	bc30      	pop	{r4, r5}
 8007844:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007846:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007848:	4913      	ldr	r1, [pc, #76]	; (8007898 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800784a:	4c14      	ldr	r4, [pc, #80]	; (800789c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800784c:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800784e:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007850:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007852:	fba4 2302 	umull	r2, r3, r4, r2
 8007856:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800785a:	d800      	bhi.n	800785e <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 800785c:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800785e:	4a10      	ldr	r2, [pc, #64]	; (80078a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007860:	f003 051f 	and.w	r5, r3, #31
 8007864:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007866:	4c0f      	ldr	r4, [pc, #60]	; (80078a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007868:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800786a:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800786c:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800786e:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007870:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007872:	6602      	str	r2, [r0, #96]	; 0x60
}
 8007874:	e7e5      	b.n	8007842 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 8007876:	bf00      	nop
 8007878:	58025408 	.word	0x58025408
 800787c:	58025430 	.word	0x58025430
 8007880:	5802541c 	.word	0x5802541c
 8007884:	58025444 	.word	0x58025444
 8007888:	58025494 	.word	0x58025494
 800788c:	cccccccd 	.word	0xcccccccd
 8007890:	16009600 	.word	0x16009600
 8007894:	58025880 	.word	0x58025880
 8007898:	bffdfbf0 	.word	0xbffdfbf0
 800789c:	aaaaaaab 	.word	0xaaaaaaab
 80078a0:	10008200 	.word	0x10008200
 80078a4:	40020880 	.word	0x40020880

080078a8 <HAL_DMA_Init>:
{
 80078a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80078ac:	f7fe fa2a 	bl	8005d04 <HAL_GetTick>
  if(hdma == NULL)
 80078b0:	2c00      	cmp	r4, #0
 80078b2:	f000 8177 	beq.w	8007ba4 <HAL_DMA_Init+0x2fc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	4605      	mov	r5, r0
 80078ba:	4a92      	ldr	r2, [pc, #584]	; (8007b04 <HAL_DMA_Init+0x25c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d048      	beq.n	8007952 <HAL_DMA_Init+0xaa>
 80078c0:	3218      	adds	r2, #24
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d045      	beq.n	8007952 <HAL_DMA_Init+0xaa>
 80078c6:	3230      	adds	r2, #48	; 0x30
 80078c8:	498f      	ldr	r1, [pc, #572]	; (8007b08 <HAL_DMA_Init+0x260>)
 80078ca:	428b      	cmp	r3, r1
 80078cc:	bf18      	it	ne
 80078ce:	4293      	cmpne	r3, r2
 80078d0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80078d4:	bf0c      	ite	eq
 80078d6:	2201      	moveq	r2, #1
 80078d8:	2200      	movne	r2, #0
 80078da:	428b      	cmp	r3, r1
 80078dc:	bf08      	it	eq
 80078de:	f042 0201 	orreq.w	r2, r2, #1
 80078e2:	3118      	adds	r1, #24
 80078e4:	428b      	cmp	r3, r1
 80078e6:	bf08      	it	eq
 80078e8:	f042 0201 	orreq.w	r2, r2, #1
 80078ec:	3118      	adds	r1, #24
 80078ee:	428b      	cmp	r3, r1
 80078f0:	bf08      	it	eq
 80078f2:	f042 0201 	orreq.w	r2, r2, #1
 80078f6:	3118      	adds	r1, #24
 80078f8:	428b      	cmp	r3, r1
 80078fa:	bf08      	it	eq
 80078fc:	f042 0201 	orreq.w	r2, r2, #1
 8007900:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8007904:	428b      	cmp	r3, r1
 8007906:	bf08      	it	eq
 8007908:	f042 0201 	orreq.w	r2, r2, #1
 800790c:	3118      	adds	r1, #24
 800790e:	428b      	cmp	r3, r1
 8007910:	bf08      	it	eq
 8007912:	f042 0201 	orreq.w	r2, r2, #1
 8007916:	3118      	adds	r1, #24
 8007918:	428b      	cmp	r3, r1
 800791a:	bf08      	it	eq
 800791c:	f042 0201 	orreq.w	r2, r2, #1
 8007920:	3118      	adds	r1, #24
 8007922:	428b      	cmp	r3, r1
 8007924:	bf08      	it	eq
 8007926:	f042 0201 	orreq.w	r2, r2, #1
 800792a:	3118      	adds	r1, #24
 800792c:	428b      	cmp	r3, r1
 800792e:	bf08      	it	eq
 8007930:	f042 0201 	orreq.w	r2, r2, #1
 8007934:	3118      	adds	r1, #24
 8007936:	428b      	cmp	r3, r1
 8007938:	bf08      	it	eq
 800793a:	f042 0201 	orreq.w	r2, r2, #1
 800793e:	3118      	adds	r1, #24
 8007940:	428b      	cmp	r3, r1
 8007942:	bf08      	it	eq
 8007944:	f042 0201 	orreq.w	r2, r2, #1
 8007948:	b91a      	cbnz	r2, 8007952 <HAL_DMA_Init+0xaa>
 800794a:	4a70      	ldr	r2, [pc, #448]	; (8007b0c <HAL_DMA_Init+0x264>)
 800794c:	4293      	cmp	r3, r2
 800794e:	f040 8198 	bne.w	8007c82 <HAL_DMA_Init+0x3da>
    __HAL_UNLOCK(hdma);
 8007952:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8007954:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 8007956:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 800795a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	f022 0201 	bic.w	r2, r2, #1
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	e006      	b.n	8007976 <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007968:	f7fe f9cc 	bl	8005d04 <HAL_GetTick>
 800796c:	1b43      	subs	r3, r0, r5
 800796e:	2b05      	cmp	r3, #5
 8007970:	f200 80ff 	bhi.w	8007b72 <HAL_DMA_Init+0x2ca>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	07d6      	lsls	r6, r2, #31
 800797a:	d4f5      	bmi.n	8007968 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 800797c:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007980:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8007982:	432a      	orrs	r2, r5
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007984:	69a1      	ldr	r1, [r4, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007986:	681d      	ldr	r5, [r3, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007988:	4302      	orrs	r2, r0
 800798a:	6960      	ldr	r0, [r4, #20]
 800798c:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800798e:	69e0      	ldr	r0, [r4, #28]
 8007990:	430a      	orrs	r2, r1
 8007992:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007994:	485e      	ldr	r0, [pc, #376]	; (8007b10 <HAL_DMA_Init+0x268>)
 8007996:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 8007998:	6a25      	ldr	r5, [r4, #32]
 800799a:	432a      	orrs	r2, r5
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800799c:	4d5d      	ldr	r5, [pc, #372]	; (8007b14 <HAL_DMA_Init+0x26c>)
    registerValue |=  hdma->Init.Direction           |
 800799e:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80079a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80079a2:	2804      	cmp	r0, #4
 80079a4:	f000 8100 	beq.w	8007ba8 <HAL_DMA_Init+0x300>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80079a8:	682e      	ldr	r6, [r5, #0]
 80079aa:	4d5b      	ldr	r5, [pc, #364]	; (8007b18 <HAL_DMA_Init+0x270>)
 80079ac:	4035      	ands	r5, r6
 80079ae:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 80079b2:	f080 80bb 	bcs.w	8007b2c <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80079b6:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80079b8:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80079ba:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 80079be:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80079c0:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80079c2:	4620      	mov	r0, r4
 80079c4:	f7ff fe8a 	bl	80076dc <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80079c8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80079ca:	233f      	movs	r3, #63	; 0x3f
 80079cc:	f002 021f 	and.w	r2, r2, #31
 80079d0:	4093      	lsls	r3, r2
 80079d2:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80079d4:	6822      	ldr	r2, [r4, #0]
 80079d6:	4b4b      	ldr	r3, [pc, #300]	; (8007b04 <HAL_DMA_Init+0x25c>)
 80079d8:	4850      	ldr	r0, [pc, #320]	; (8007b1c <HAL_DMA_Init+0x274>)
 80079da:	494b      	ldr	r1, [pc, #300]	; (8007b08 <HAL_DMA_Init+0x260>)
 80079dc:	4282      	cmp	r2, r0
 80079de:	bf18      	it	ne
 80079e0:	429a      	cmpne	r2, r3
 80079e2:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80079e6:	bf0c      	ite	eq
 80079e8:	2301      	moveq	r3, #1
 80079ea:	2300      	movne	r3, #0
 80079ec:	428a      	cmp	r2, r1
 80079ee:	bf08      	it	eq
 80079f0:	f043 0301 	orreq.w	r3, r3, #1
 80079f4:	3130      	adds	r1, #48	; 0x30
 80079f6:	4282      	cmp	r2, r0
 80079f8:	bf08      	it	eq
 80079fa:	f043 0301 	orreq.w	r3, r3, #1
 80079fe:	3030      	adds	r0, #48	; 0x30
 8007a00:	428a      	cmp	r2, r1
 8007a02:	bf08      	it	eq
 8007a04:	f043 0301 	orreq.w	r3, r3, #1
 8007a08:	3130      	adds	r1, #48	; 0x30
 8007a0a:	4282      	cmp	r2, r0
 8007a0c:	bf08      	it	eq
 8007a0e:	f043 0301 	orreq.w	r3, r3, #1
 8007a12:	3030      	adds	r0, #48	; 0x30
 8007a14:	428a      	cmp	r2, r1
 8007a16:	bf08      	it	eq
 8007a18:	f043 0301 	orreq.w	r3, r3, #1
 8007a1c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8007a20:	4282      	cmp	r2, r0
 8007a22:	bf08      	it	eq
 8007a24:	f043 0301 	orreq.w	r3, r3, #1
 8007a28:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8007a2c:	428a      	cmp	r2, r1
 8007a2e:	bf08      	it	eq
 8007a30:	f043 0301 	orreq.w	r3, r3, #1
 8007a34:	3130      	adds	r1, #48	; 0x30
 8007a36:	4282      	cmp	r2, r0
 8007a38:	bf08      	it	eq
 8007a3a:	f043 0301 	orreq.w	r3, r3, #1
 8007a3e:	3030      	adds	r0, #48	; 0x30
 8007a40:	428a      	cmp	r2, r1
 8007a42:	bf08      	it	eq
 8007a44:	f043 0301 	orreq.w	r3, r3, #1
 8007a48:	3130      	adds	r1, #48	; 0x30
 8007a4a:	4282      	cmp	r2, r0
 8007a4c:	bf08      	it	eq
 8007a4e:	f043 0301 	orreq.w	r3, r3, #1
 8007a52:	3030      	adds	r0, #48	; 0x30
 8007a54:	428a      	cmp	r2, r1
 8007a56:	bf08      	it	eq
 8007a58:	f043 0301 	orreq.w	r3, r3, #1
 8007a5c:	3130      	adds	r1, #48	; 0x30
 8007a5e:	4282      	cmp	r2, r0
 8007a60:	bf08      	it	eq
 8007a62:	f043 0301 	orreq.w	r3, r3, #1
 8007a66:	3030      	adds	r0, #48	; 0x30
 8007a68:	428a      	cmp	r2, r1
 8007a6a:	bf08      	it	eq
 8007a6c:	f043 0301 	orreq.w	r3, r3, #1
 8007a70:	492b      	ldr	r1, [pc, #172]	; (8007b20 <HAL_DMA_Init+0x278>)
 8007a72:	4282      	cmp	r2, r0
 8007a74:	bf08      	it	eq
 8007a76:	f043 0301 	orreq.w	r3, r3, #1
 8007a7a:	482a      	ldr	r0, [pc, #168]	; (8007b24 <HAL_DMA_Init+0x27c>)
 8007a7c:	428a      	cmp	r2, r1
 8007a7e:	bf08      	it	eq
 8007a80:	f043 0301 	orreq.w	r3, r3, #1
 8007a84:	3128      	adds	r1, #40	; 0x28
 8007a86:	4282      	cmp	r2, r0
 8007a88:	bf08      	it	eq
 8007a8a:	f043 0301 	orreq.w	r3, r3, #1
 8007a8e:	3028      	adds	r0, #40	; 0x28
 8007a90:	428a      	cmp	r2, r1
 8007a92:	bf08      	it	eq
 8007a94:	f043 0301 	orreq.w	r3, r3, #1
 8007a98:	3128      	adds	r1, #40	; 0x28
 8007a9a:	4282      	cmp	r2, r0
 8007a9c:	bf08      	it	eq
 8007a9e:	f043 0301 	orreq.w	r3, r3, #1
 8007aa2:	3028      	adds	r0, #40	; 0x28
 8007aa4:	428a      	cmp	r2, r1
 8007aa6:	bf08      	it	eq
 8007aa8:	f043 0301 	orreq.w	r3, r3, #1
 8007aac:	3128      	adds	r1, #40	; 0x28
 8007aae:	4282      	cmp	r2, r0
 8007ab0:	bf08      	it	eq
 8007ab2:	f043 0301 	orreq.w	r3, r3, #1
 8007ab6:	428a      	cmp	r2, r1
 8007ab8:	bf08      	it	eq
 8007aba:	f043 0301 	orreq.w	r3, r3, #1
 8007abe:	b913      	cbnz	r3, 8007ac6 <HAL_DMA_Init+0x21e>
 8007ac0:	4b19      	ldr	r3, [pc, #100]	; (8007b28 <HAL_DMA_Init+0x280>)
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d118      	bne.n	8007af8 <HAL_DMA_Init+0x250>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f7ff fe82 	bl	80077d0 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007acc:	68a3      	ldr	r3, [r4, #8]
 8007ace:	2b80      	cmp	r3, #128	; 0x80
 8007ad0:	d05c      	beq.n	8007b8c <HAL_DMA_Init+0x2e4>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007ad2:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ad4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007ad6:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007ad8:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ada:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007ade:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007ae0:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ae2:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007ae4:	d859      	bhi.n	8007b9a <HAL_DMA_Init+0x2f2>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007ae6:	1e50      	subs	r0, r2, #1
 8007ae8:	2807      	cmp	r0, #7
 8007aea:	d96e      	bls.n	8007bca <HAL_DMA_Init+0x322>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007aec:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007aee:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007af2:	2000      	movs	r0, #0
 8007af4:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007af6:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007af8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8007afa:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007afc:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8007afe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b04:	40020010 	.word	0x40020010
 8007b08:	40020040 	.word	0x40020040
 8007b0c:	400204b8 	.word	0x400204b8
 8007b10:	fe10803f 	.word	0xfe10803f
 8007b14:	5c001000 	.word	0x5c001000
 8007b18:	ffff0000 	.word	0xffff0000
 8007b1c:	40020028 	.word	0x40020028
 8007b20:	58025408 	.word	0x58025408
 8007b24:	5802541c 	.word	0x5802541c
 8007b28:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007b2c:	6865      	ldr	r5, [r4, #4]
 8007b2e:	f1a5 0629 	sub.w	r6, r5, #41	; 0x29
 8007b32:	2e1f      	cmp	r6, #31
 8007b34:	d924      	bls.n	8007b80 <HAL_DMA_Init+0x2d8>
 8007b36:	3d4f      	subs	r5, #79	; 0x4f
 8007b38:	2d03      	cmp	r5, #3
 8007b3a:	d801      	bhi.n	8007b40 <HAL_DMA_Init+0x298>
        registerValue |= DMA_SxCR_TRBUFF;
 8007b3c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007b40:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b42:	2804      	cmp	r0, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007b44:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b46:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8007b4a:	ea42 0200 	orr.w	r2, r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b4e:	f47f af37 	bne.w	80079c0 <HAL_DMA_Init+0x118>
 8007b52:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8007b54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007b56:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007b58:	2d00      	cmp	r5, #0
 8007b5a:	f43f af31 	beq.w	80079c0 <HAL_DMA_Init+0x118>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007b5e:	2900      	cmp	r1, #0
 8007b60:	d169      	bne.n	8007c36 <HAL_DMA_Init+0x38e>
    switch (hdma->Init.FIFOThreshold)
 8007b62:	2801      	cmp	r0, #1
 8007b64:	f000 8088 	beq.w	8007c78 <HAL_DMA_Init+0x3d0>
 8007b68:	f030 0102 	bics.w	r1, r0, #2
 8007b6c:	f47f af28 	bne.w	80079c0 <HAL_DMA_Init+0x118>
 8007b70:	e069      	b.n	8007c46 <HAL_DMA_Init+0x39e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b72:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8007b74:	2303      	movs	r3, #3
        return HAL_ERROR;
 8007b76:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b78:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8007b7a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007b80:	4d73      	ldr	r5, [pc, #460]	; (8007d50 <HAL_DMA_Init+0x4a8>)
 8007b82:	fa25 f606 	lsr.w	r6, r5, r6
 8007b86:	07f5      	lsls	r5, r6, #31
 8007b88:	d5da      	bpl.n	8007b40 <HAL_DMA_Init+0x298>
 8007b8a:	e7d7      	b.n	8007b3c <HAL_DMA_Init+0x294>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007b8c:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b8e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8007b90:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007b94:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007b96:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b98:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8007b9a:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8007b9c:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007ba0:	6763      	str	r3, [r4, #116]	; 0x74
 8007ba2:	e7a9      	b.n	8007af8 <HAL_DMA_Init+0x250>
    return HAL_ERROR;
 8007ba4:	2001      	movs	r0, #1
}
 8007ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007ba8:	682f      	ldr	r7, [r5, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007baa:	e9d4 560b 	ldrd	r5, r6, [r4, #44]	; 0x2c
 8007bae:	432e      	orrs	r6, r5
 8007bb0:	4332      	orrs	r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007bb2:	4e68      	ldr	r6, [pc, #416]	; (8007d54 <HAL_DMA_Init+0x4ac>)
 8007bb4:	403e      	ands	r6, r7
 8007bb6:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 8007bba:	d2b7      	bcs.n	8007b2c <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007bbc:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007bbe:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007bc0:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8007bc4:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007bc8:	e7c4      	b.n	8007b54 <HAL_DMA_Init+0x2ac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007bca:	6821      	ldr	r1, [r4, #0]
 8007bcc:	4b62      	ldr	r3, [pc, #392]	; (8007d58 <HAL_DMA_Init+0x4b0>)
 8007bce:	4d63      	ldr	r5, [pc, #396]	; (8007d5c <HAL_DMA_Init+0x4b4>)
 8007bd0:	42a9      	cmp	r1, r5
 8007bd2:	bf18      	it	ne
 8007bd4:	4299      	cmpne	r1, r3
 8007bd6:	f105 0514 	add.w	r5, r5, #20
 8007bda:	bf0c      	ite	eq
 8007bdc:	2301      	moveq	r3, #1
 8007bde:	2300      	movne	r3, #0
 8007be0:	42a9      	cmp	r1, r5
 8007be2:	bf08      	it	eq
 8007be4:	f043 0301 	orreq.w	r3, r3, #1
 8007be8:	3514      	adds	r5, #20
 8007bea:	42a9      	cmp	r1, r5
 8007bec:	bf08      	it	eq
 8007bee:	f043 0301 	orreq.w	r3, r3, #1
 8007bf2:	3514      	adds	r5, #20
 8007bf4:	42a9      	cmp	r1, r5
 8007bf6:	bf08      	it	eq
 8007bf8:	f043 0301 	orreq.w	r3, r3, #1
 8007bfc:	3514      	adds	r5, #20
 8007bfe:	42a9      	cmp	r1, r5
 8007c00:	bf08      	it	eq
 8007c02:	f043 0301 	orreq.w	r3, r3, #1
 8007c06:	3514      	adds	r5, #20
 8007c08:	42a9      	cmp	r1, r5
 8007c0a:	bf08      	it	eq
 8007c0c:	f043 0301 	orreq.w	r3, r3, #1
 8007c10:	b93b      	cbnz	r3, 8007c22 <HAL_DMA_Init+0x37a>
 8007c12:	4b53      	ldr	r3, [pc, #332]	; (8007d60 <HAL_DMA_Init+0x4b8>)
 8007c14:	4299      	cmp	r1, r3
 8007c16:	d004      	beq.n	8007c22 <HAL_DMA_Init+0x37a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c18:	4b52      	ldr	r3, [pc, #328]	; (8007d64 <HAL_DMA_Init+0x4bc>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007c1a:	4953      	ldr	r1, [pc, #332]	; (8007d68 <HAL_DMA_Init+0x4c0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007c20:	e003      	b.n	8007c2a <HAL_DMA_Init+0x382>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c22:	4b52      	ldr	r3, [pc, #328]	; (8007d6c <HAL_DMA_Init+0x4c4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007c24:	4952      	ldr	r1, [pc, #328]	; (8007d70 <HAL_DMA_Init+0x4c8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c26:	4413      	add	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	4082      	lsls	r2, r0
 8007c2e:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 8007c32:	6762      	str	r2, [r4, #116]	; 0x74
 8007c34:	e75d      	b.n	8007af2 <HAL_DMA_Init+0x24a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007c36:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8007c3a:	d00e      	beq.n	8007c5a <HAL_DMA_Init+0x3b2>
    switch (hdma->Init.FIFOThreshold)
 8007c3c:	2802      	cmp	r0, #2
 8007c3e:	d905      	bls.n	8007c4c <HAL_DMA_Init+0x3a4>
 8007c40:	2803      	cmp	r0, #3
 8007c42:	f47f aebd 	bne.w	80079c0 <HAL_DMA_Init+0x118>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c46:	01e9      	lsls	r1, r5, #7
 8007c48:	f57f aeba 	bpl.w	80079c0 <HAL_DMA_Init+0x118>
          hdma->State = HAL_DMA_STATE_READY;
 8007c4c:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c4e:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8007c50:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c52:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8007c54:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 8007c5a:	2803      	cmp	r0, #3
 8007c5c:	f63f aeb0 	bhi.w	80079c0 <HAL_DMA_Init+0x118>
 8007c60:	a101      	add	r1, pc, #4	; (adr r1, 8007c68 <HAL_DMA_Init+0x3c0>)
 8007c62:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8007c66:	bf00      	nop
 8007c68:	08007c4d 	.word	0x08007c4d
 8007c6c:	08007c47 	.word	0x08007c47
 8007c70:	08007c4d 	.word	0x08007c4d
 8007c74:	08007c79 	.word	0x08007c79
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c78:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8007c7c:	f47f aea0 	bne.w	80079c0 <HAL_DMA_Init+0x118>
 8007c80:	e7e4      	b.n	8007c4c <HAL_DMA_Init+0x3a4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007c82:	4a35      	ldr	r2, [pc, #212]	; (8007d58 <HAL_DMA_Init+0x4b0>)
 8007c84:	4835      	ldr	r0, [pc, #212]	; (8007d5c <HAL_DMA_Init+0x4b4>)
 8007c86:	493b      	ldr	r1, [pc, #236]	; (8007d74 <HAL_DMA_Init+0x4cc>)
 8007c88:	4283      	cmp	r3, r0
 8007c8a:	bf18      	it	ne
 8007c8c:	4293      	cmpne	r3, r2
 8007c8e:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8007c92:	bf0c      	ite	eq
 8007c94:	2201      	moveq	r2, #1
 8007c96:	2200      	movne	r2, #0
 8007c98:	428b      	cmp	r3, r1
 8007c9a:	bf08      	it	eq
 8007c9c:	f042 0201 	orreq.w	r2, r2, #1
 8007ca0:	3128      	adds	r1, #40	; 0x28
 8007ca2:	4283      	cmp	r3, r0
 8007ca4:	bf08      	it	eq
 8007ca6:	f042 0201 	orreq.w	r2, r2, #1
 8007caa:	3028      	adds	r0, #40	; 0x28
 8007cac:	428b      	cmp	r3, r1
 8007cae:	bf08      	it	eq
 8007cb0:	f042 0201 	orreq.w	r2, r2, #1
 8007cb4:	3128      	adds	r1, #40	; 0x28
 8007cb6:	4283      	cmp	r3, r0
 8007cb8:	bf08      	it	eq
 8007cba:	f042 0201 	orreq.w	r2, r2, #1
 8007cbe:	428b      	cmp	r3, r1
 8007cc0:	bf08      	it	eq
 8007cc2:	f042 0201 	orreq.w	r2, r2, #1
 8007cc6:	b912      	cbnz	r2, 8007cce <HAL_DMA_Init+0x426>
 8007cc8:	4a25      	ldr	r2, [pc, #148]	; (8007d60 <HAL_DMA_Init+0x4b8>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d138      	bne.n	8007d40 <HAL_DMA_Init+0x498>
    __HAL_UNLOCK(hdma);
 8007cce:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8007cd0:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007cd2:	4d29      	ldr	r5, [pc, #164]	; (8007d78 <HAL_DMA_Init+0x4d0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8007cd4:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8007cd8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007cdc:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007cde:	4015      	ands	r5, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007ce0:	68a2      	ldr	r2, [r4, #8]
 8007ce2:	2a40      	cmp	r2, #64	; 0x40
 8007ce4:	d02a      	beq.n	8007d3c <HAL_DMA_Init+0x494>
 8007ce6:	2a80      	cmp	r2, #128	; 0x80
 8007ce8:	bf0c      	ite	eq
 8007cea:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 8007cee:	2000      	movne	r0, #0
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007cf0:	6a26      	ldr	r6, [r4, #32]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007cf2:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8007cf6:	08d2      	lsrs	r2, r2, #3
 8007cf8:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007cfc:	6961      	ldr	r1, [r4, #20]
 8007cfe:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007d02:	69a1      	ldr	r1, [r4, #24]
 8007d04:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007d08:	69e1      	ldr	r1, [r4, #28]
 8007d0a:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007d0e:	491b      	ldr	r1, [pc, #108]	; (8007d7c <HAL_DMA_Init+0x4d4>)
 8007d10:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 8007d14:	4419      	add	r1, r3
 8007d16:	432a      	orrs	r2, r5
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007d18:	4302      	orrs	r2, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007d1a:	4819      	ldr	r0, [pc, #100]	; (8007d80 <HAL_DMA_Init+0x4d8>)
 8007d1c:	fba0 0101 	umull	r0, r1, r0, r1
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007d20:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007d22:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007d24:	090b      	lsrs	r3, r1, #4
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007d2a:	f7ff fcd7 	bl	80076dc <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007d2e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007d30:	2301      	movs	r3, #1
 8007d32:	f002 021f 	and.w	r2, r2, #31
 8007d36:	4093      	lsls	r3, r2
 8007d38:	6043      	str	r3, [r0, #4]
 8007d3a:	e64b      	b.n	80079d4 <HAL_DMA_Init+0x12c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007d3c:	2010      	movs	r0, #16
 8007d3e:	e7d7      	b.n	8007cf0 <HAL_DMA_Init+0x448>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007d40:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007d42:	2303      	movs	r3, #3
    return HAL_ERROR;
 8007d44:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007d46:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007d48:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	c3c0003f 	.word	0xc3c0003f
 8007d54:	ffff0000 	.word	0xffff0000
 8007d58:	58025408 	.word	0x58025408
 8007d5c:	5802541c 	.word	0x5802541c
 8007d60:	58025494 	.word	0x58025494
 8007d64:	1000823f 	.word	0x1000823f
 8007d68:	40020940 	.word	0x40020940
 8007d6c:	1600963f 	.word	0x1600963f
 8007d70:	58025940 	.word	0x58025940
 8007d74:	58025430 	.word	0x58025430
 8007d78:	fffe000f 	.word	0xfffe000f
 8007d7c:	a7fdabf8 	.word	0xa7fdabf8
 8007d80:	cccccccd 	.word	0xcccccccd

08007d84 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8007d84:	2800      	cmp	r0, #0
 8007d86:	f000 8177 	beq.w	8008078 <HAL_DMA_Start_IT+0x2f4>
 8007d8a:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8007d8c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8007d90:	2801      	cmp	r0, #1
 8007d92:	f000 8173 	beq.w	800807c <HAL_DMA_Start_IT+0x2f8>
 8007d96:	2001      	movs	r0, #1
{
 8007d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 8007d9c:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8007da0:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8007da4:	4284      	cmp	r4, r0
 8007da6:	d008      	beq.n	8007dba <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8007dac:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007dae:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8007db2:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8007db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8007dba:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8007dbc:	f8dc 4000 	ldr.w	r4, [ip]
 8007dc0:	4d53      	ldr	r5, [pc, #332]	; (8007f10 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8007dc2:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007dc6:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8007dc8:	4e52      	ldr	r6, [pc, #328]	; (8007f14 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007dca:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8007dce:	4852      	ldr	r0, [pc, #328]	; (8007f18 <HAL_DMA_Start_IT+0x194>)
 8007dd0:	42ac      	cmp	r4, r5
 8007dd2:	bf18      	it	ne
 8007dd4:	4284      	cmpne	r4, r0
 8007dd6:	f105 0518 	add.w	r5, r5, #24
 8007dda:	bf0c      	ite	eq
 8007ddc:	2001      	moveq	r0, #1
 8007dde:	2000      	movne	r0, #0
 8007de0:	42ac      	cmp	r4, r5
 8007de2:	bf08      	it	eq
 8007de4:	f040 0001 	orreq.w	r0, r0, #1
 8007de8:	3518      	adds	r5, #24
 8007dea:	42ac      	cmp	r4, r5
 8007dec:	bf08      	it	eq
 8007dee:	f040 0001 	orreq.w	r0, r0, #1
 8007df2:	3518      	adds	r5, #24
 8007df4:	42ac      	cmp	r4, r5
 8007df6:	bf08      	it	eq
 8007df8:	f040 0001 	orreq.w	r0, r0, #1
 8007dfc:	3518      	adds	r5, #24
 8007dfe:	42ac      	cmp	r4, r5
 8007e00:	bf08      	it	eq
 8007e02:	f040 0001 	orreq.w	r0, r0, #1
 8007e06:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8007e0a:	42ac      	cmp	r4, r5
 8007e0c:	bf08      	it	eq
 8007e0e:	f040 0001 	orreq.w	r0, r0, #1
 8007e12:	3518      	adds	r5, #24
 8007e14:	42ac      	cmp	r4, r5
 8007e16:	bf08      	it	eq
 8007e18:	f040 0001 	orreq.w	r0, r0, #1
 8007e1c:	3518      	adds	r5, #24
 8007e1e:	42ac      	cmp	r4, r5
 8007e20:	bf08      	it	eq
 8007e22:	f040 0001 	orreq.w	r0, r0, #1
 8007e26:	3518      	adds	r5, #24
 8007e28:	42ac      	cmp	r4, r5
 8007e2a:	bf08      	it	eq
 8007e2c:	f040 0001 	orreq.w	r0, r0, #1
 8007e30:	3518      	adds	r5, #24
 8007e32:	42ac      	cmp	r4, r5
 8007e34:	bf08      	it	eq
 8007e36:	f040 0001 	orreq.w	r0, r0, #1
 8007e3a:	3518      	adds	r5, #24
 8007e3c:	42ac      	cmp	r4, r5
 8007e3e:	bf08      	it	eq
 8007e40:	f040 0001 	orreq.w	r0, r0, #1
 8007e44:	3518      	adds	r5, #24
 8007e46:	42ac      	cmp	r4, r5
 8007e48:	bf08      	it	eq
 8007e4a:	f040 0001 	orreq.w	r0, r0, #1
 8007e4e:	3518      	adds	r5, #24
 8007e50:	42ac      	cmp	r4, r5
 8007e52:	bf14      	ite	ne
 8007e54:	4681      	movne	r9, r0
 8007e56:	f040 0901 	orreq.w	r9, r0, #1
 8007e5a:	f5a5 6592 	sub.w	r5, r5, #1168	; 0x490
 8007e5e:	42ac      	cmp	r4, r5
 8007e60:	bf18      	it	ne
 8007e62:	42b4      	cmpne	r4, r6
 8007e64:	bf0c      	ite	eq
 8007e66:	2501      	moveq	r5, #1
 8007e68:	2500      	movne	r5, #0
 8007e6a:	d002      	beq.n	8007e72 <HAL_DMA_Start_IT+0xee>
 8007e6c:	f1b9 0f00 	cmp.w	r9, #0
 8007e70:	d054      	beq.n	8007f1c <HAL_DMA_Start_IT+0x198>
 8007e72:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e74:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8007e78:	f026 0601 	bic.w	r6, r6, #1
 8007e7c:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e7e:	2d00      	cmp	r5, #0
 8007e80:	d078      	beq.n	8007f74 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e82:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8007e86:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8007e88:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8007e8c:	b117      	cbz	r7, 8007e94 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e8e:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 8007e92:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e94:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 8007e98:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8007e9c:	f006 081f 	and.w	r8, r6, #31
 8007ea0:	fa0e fe08 	lsl.w	lr, lr, r8
 8007ea4:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ea8:	6826      	ldr	r6, [r4, #0]
 8007eaa:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8007eae:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007eb0:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007eb2:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8007eb6:	2b40      	cmp	r3, #64	; 0x40
 8007eb8:	f000 80e2 	beq.w	8008080 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007ebc:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007ebe:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ec0:	b91d      	cbnz	r5, 8007eca <HAL_DMA_Start_IT+0x146>
 8007ec2:	f1b9 0f00 	cmp.w	r9, #0
 8007ec6:	f000 80e1 	beq.w	800808c <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	f023 031e 	bic.w	r3, r3, #30
 8007ed0:	f043 0316 	orr.w	r3, r3, #22
 8007ed4:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8007ed6:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8007eda:	b11b      	cbz	r3, 8007ee4 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	f043 0308 	orr.w	r3, r3, #8
 8007ee2:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007ee4:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	03d2      	lsls	r2, r2, #15
 8007eec:	d503      	bpl.n	8007ef6 <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ef4:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8007ef6:	b11f      	cbz	r7, 8007f00 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007efe:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 8007f00:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f02:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8007f04:	f043 0301 	orr.w	r3, r3, #1
 8007f08:	6023      	str	r3, [r4, #0]
}
 8007f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f0e:	bf00      	nop
 8007f10:	40020058 	.word	0x40020058
 8007f14:	40020010 	.word	0x40020010
 8007f18:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f1c:	4f61      	ldr	r7, [pc, #388]	; (80080a4 <HAL_DMA_Start_IT+0x320>)
 8007f1e:	4e62      	ldr	r6, [pc, #392]	; (80080a8 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f20:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f24:	42b4      	cmp	r4, r6
 8007f26:	bf18      	it	ne
 8007f28:	42bc      	cmpne	r4, r7
 8007f2a:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8007f2e:	bf0c      	ite	eq
 8007f30:	2701      	moveq	r7, #1
 8007f32:	2700      	movne	r7, #0
 8007f34:	42b4      	cmp	r4, r6
 8007f36:	bf08      	it	eq
 8007f38:	f047 0701 	orreq.w	r7, r7, #1
 8007f3c:	3614      	adds	r6, #20
 8007f3e:	42b4      	cmp	r4, r6
 8007f40:	bf08      	it	eq
 8007f42:	f047 0701 	orreq.w	r7, r7, #1
 8007f46:	3614      	adds	r6, #20
 8007f48:	42b4      	cmp	r4, r6
 8007f4a:	bf08      	it	eq
 8007f4c:	f047 0701 	orreq.w	r7, r7, #1
 8007f50:	3614      	adds	r6, #20
 8007f52:	42b4      	cmp	r4, r6
 8007f54:	bf08      	it	eq
 8007f56:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 8007f5a:	6826      	ldr	r6, [r4, #0]
 8007f5c:	f026 0601 	bic.w	r6, r6, #1
 8007f60:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f62:	4e52      	ldr	r6, [pc, #328]	; (80080ac <HAL_DMA_Start_IT+0x328>)
 8007f64:	42b4      	cmp	r4, r6
 8007f66:	bf08      	it	eq
 8007f68:	f047 0701 	orreq.w	r7, r7, #1
 8007f6c:	b917      	cbnz	r7, 8007f74 <HAL_DMA_Start_IT+0x1f0>
 8007f6e:	4f50      	ldr	r7, [pc, #320]	; (80080b0 <HAL_DMA_Start_IT+0x32c>)
 8007f70:	42bc      	cmp	r4, r7
 8007f72:	d10b      	bne.n	8007f8c <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f74:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8007f78:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8007f7a:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8007f7e:	b117      	cbz	r7, 8007f86 <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f80:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 8007f84:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f86:	f1b9 0f00 	cmp.w	r9, #0
 8007f8a:	d183      	bne.n	8007e94 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007f8c:	4f46      	ldr	r7, [pc, #280]	; (80080a8 <HAL_DMA_Start_IT+0x324>)
 8007f8e:	f8df e114 	ldr.w	lr, [pc, #276]	; 80080a4 <HAL_DMA_Start_IT+0x320>
 8007f92:	4574      	cmp	r4, lr
 8007f94:	bf18      	it	ne
 8007f96:	42bc      	cmpne	r4, r7
 8007f98:	f10e 0e14 	add.w	lr, lr, #20
 8007f9c:	bf0c      	ite	eq
 8007f9e:	2701      	moveq	r7, #1
 8007fa0:	2700      	movne	r7, #0
 8007fa2:	4574      	cmp	r4, lr
 8007fa4:	bf08      	it	eq
 8007fa6:	f047 0701 	orreq.w	r7, r7, #1
 8007faa:	f10e 0e14 	add.w	lr, lr, #20
 8007fae:	4574      	cmp	r4, lr
 8007fb0:	bf08      	it	eq
 8007fb2:	f047 0701 	orreq.w	r7, r7, #1
 8007fb6:	f10e 0e14 	add.w	lr, lr, #20
 8007fba:	4574      	cmp	r4, lr
 8007fbc:	bf08      	it	eq
 8007fbe:	f047 0701 	orreq.w	r7, r7, #1
 8007fc2:	f10e 0e14 	add.w	lr, lr, #20
 8007fc6:	4574      	cmp	r4, lr
 8007fc8:	bf08      	it	eq
 8007fca:	f047 0701 	orreq.w	r7, r7, #1
 8007fce:	f10e 0e14 	add.w	lr, lr, #20
 8007fd2:	4574      	cmp	r4, lr
 8007fd4:	bf08      	it	eq
 8007fd6:	f047 0701 	orreq.w	r7, r7, #1
 8007fda:	b917      	cbnz	r7, 8007fe2 <HAL_DMA_Start_IT+0x25e>
 8007fdc:	4f34      	ldr	r7, [pc, #208]	; (80080b0 <HAL_DMA_Start_IT+0x32c>)
 8007fde:	42bc      	cmp	r4, r7
 8007fe0:	d154      	bne.n	800808c <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007fe2:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8007fe6:	2701      	movs	r7, #1
 8007fe8:	f000 0e1f 	and.w	lr, r0, #31
 8007fec:	fa07 f70e 	lsl.w	r7, r7, lr
 8007ff0:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007ff4:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ff6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8007ffa:	2b40      	cmp	r3, #64	; 0x40
 8007ffc:	d043      	beq.n	8008086 <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007ffe:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008000:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	f023 030e 	bic.w	r3, r3, #14
 8008008:	f043 030a 	orr.w	r3, r3, #10
 800800c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800800e:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8008012:	2b00      	cmp	r3, #0
 8008014:	d02d      	beq.n	8008072 <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	f043 0304 	orr.w	r3, r3, #4
 800801c:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800801e:	4b21      	ldr	r3, [pc, #132]	; (80080a4 <HAL_DMA_Start_IT+0x320>)
 8008020:	4a21      	ldr	r2, [pc, #132]	; (80080a8 <HAL_DMA_Start_IT+0x324>)
 8008022:	4294      	cmp	r4, r2
 8008024:	bf18      	it	ne
 8008026:	429c      	cmpne	r4, r3
 8008028:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800802c:	bf0c      	ite	eq
 800802e:	2301      	moveq	r3, #1
 8008030:	2300      	movne	r3, #0
 8008032:	4294      	cmp	r4, r2
 8008034:	bf08      	it	eq
 8008036:	f043 0301 	orreq.w	r3, r3, #1
 800803a:	3214      	adds	r2, #20
 800803c:	4294      	cmp	r4, r2
 800803e:	bf08      	it	eq
 8008040:	f043 0301 	orreq.w	r3, r3, #1
 8008044:	3214      	adds	r2, #20
 8008046:	4294      	cmp	r4, r2
 8008048:	bf08      	it	eq
 800804a:	f043 0301 	orreq.w	r3, r3, #1
 800804e:	3214      	adds	r2, #20
 8008050:	4294      	cmp	r4, r2
 8008052:	bf08      	it	eq
 8008054:	f043 0301 	orreq.w	r3, r3, #1
 8008058:	3214      	adds	r2, #20
 800805a:	4294      	cmp	r4, r2
 800805c:	bf08      	it	eq
 800805e:	f043 0301 	orreq.w	r3, r3, #1
 8008062:	3214      	adds	r2, #20
 8008064:	4294      	cmp	r4, r2
 8008066:	bf08      	it	eq
 8008068:	f043 0301 	orreq.w	r3, r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	f43f af47 	beq.w	8007f00 <HAL_DMA_Start_IT+0x17c>
 8008072:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8008076:	e735      	b.n	8007ee4 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 8008078:	2001      	movs	r0, #1
 800807a:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800807c:	2002      	movs	r0, #2
}
 800807e:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008080:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008082:	60e1      	str	r1, [r4, #12]
 8008084:	e71c      	b.n	8007ec0 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008086:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008088:	60e1      	str	r1, [r4, #12]
 800808a:	e7ba      	b.n	8008002 <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	f023 030e 	bic.w	r3, r3, #14
 8008092:	f043 030a 	orr.w	r3, r3, #10
 8008096:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8008098:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1ba      	bne.n	8008016 <HAL_DMA_Start_IT+0x292>
 80080a0:	e7bd      	b.n	800801e <HAL_DMA_Start_IT+0x29a>
 80080a2:	bf00      	nop
 80080a4:	5802541c 	.word	0x5802541c
 80080a8:	58025408 	.word	0x58025408
 80080ac:	58025480 	.word	0x58025480
 80080b0:	58025494 	.word	0x58025494

080080b4 <HAL_DMA_Abort>:
{
 80080b4:	b570      	push	{r4, r5, r6, lr}
 80080b6:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80080b8:	f7fd fe24 	bl	8005d04 <HAL_GetTick>
  if(hdma == NULL)
 80080bc:	2d00      	cmp	r5, #0
 80080be:	f000 8124 	beq.w	800830a <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80080c2:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	f040 80dd 	bne.w	8008286 <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080cc:	682c      	ldr	r4, [r5, #0]
 80080ce:	4606      	mov	r6, r0
 80080d0:	4b8f      	ldr	r3, [pc, #572]	; (8008310 <HAL_DMA_Abort+0x25c>)
 80080d2:	4890      	ldr	r0, [pc, #576]	; (8008314 <HAL_DMA_Abort+0x260>)
 80080d4:	4a90      	ldr	r2, [pc, #576]	; (8008318 <HAL_DMA_Abort+0x264>)
 80080d6:	4284      	cmp	r4, r0
 80080d8:	bf18      	it	ne
 80080da:	429c      	cmpne	r4, r3
 80080dc:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80080e0:	498e      	ldr	r1, [pc, #568]	; (800831c <HAL_DMA_Abort+0x268>)
 80080e2:	bf0c      	ite	eq
 80080e4:	2301      	moveq	r3, #1
 80080e6:	2300      	movne	r3, #0
 80080e8:	4284      	cmp	r4, r0
 80080ea:	bf08      	it	eq
 80080ec:	f043 0301 	orreq.w	r3, r3, #1
 80080f0:	3018      	adds	r0, #24
 80080f2:	4284      	cmp	r4, r0
 80080f4:	bf08      	it	eq
 80080f6:	f043 0301 	orreq.w	r3, r3, #1
 80080fa:	3018      	adds	r0, #24
 80080fc:	4284      	cmp	r4, r0
 80080fe:	bf08      	it	eq
 8008100:	f043 0301 	orreq.w	r3, r3, #1
 8008104:	3018      	adds	r0, #24
 8008106:	4284      	cmp	r4, r0
 8008108:	bf08      	it	eq
 800810a:	f043 0301 	orreq.w	r3, r3, #1
 800810e:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8008112:	4284      	cmp	r4, r0
 8008114:	bf08      	it	eq
 8008116:	f043 0301 	orreq.w	r3, r3, #1
 800811a:	3018      	adds	r0, #24
 800811c:	4284      	cmp	r4, r0
 800811e:	bf08      	it	eq
 8008120:	f043 0301 	orreq.w	r3, r3, #1
 8008124:	3018      	adds	r0, #24
 8008126:	4284      	cmp	r4, r0
 8008128:	bf08      	it	eq
 800812a:	f043 0301 	orreq.w	r3, r3, #1
 800812e:	3018      	adds	r0, #24
 8008130:	4284      	cmp	r4, r0
 8008132:	bf08      	it	eq
 8008134:	f043 0301 	orreq.w	r3, r3, #1
 8008138:	3018      	adds	r0, #24
 800813a:	4284      	cmp	r4, r0
 800813c:	bf08      	it	eq
 800813e:	f043 0301 	orreq.w	r3, r3, #1
 8008142:	3018      	adds	r0, #24
 8008144:	4284      	cmp	r4, r0
 8008146:	bf08      	it	eq
 8008148:	f043 0301 	orreq.w	r3, r3, #1
 800814c:	3018      	adds	r0, #24
 800814e:	4284      	cmp	r4, r0
 8008150:	bf08      	it	eq
 8008152:	f043 0301 	orreq.w	r3, r3, #1
 8008156:	3018      	adds	r0, #24
 8008158:	4284      	cmp	r4, r0
 800815a:	bf08      	it	eq
 800815c:	f043 0301 	orreq.w	r3, r3, #1
 8008160:	428c      	cmp	r4, r1
 8008162:	bf18      	it	ne
 8008164:	4294      	cmpne	r4, r2
 8008166:	bf0c      	ite	eq
 8008168:	2201      	moveq	r2, #1
 800816a:	2200      	movne	r2, #0
 800816c:	d002      	beq.n	8008174 <HAL_DMA_Abort+0xc0>
 800816e:	2b00      	cmp	r3, #0
 8008170:	f000 8090 	beq.w	8008294 <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008174:	6821      	ldr	r1, [r4, #0]
 8008176:	f021 011e 	bic.w	r1, r1, #30
 800817a:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800817c:	6961      	ldr	r1, [r4, #20]
 800817e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008182:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008184:	2a00      	cmp	r2, #0
 8008186:	f000 80b0 	beq.w	80082ea <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800818a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800818c:	6813      	ldr	r3, [r2, #0]
 800818e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008192:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	f023 0301 	bic.w	r3, r3, #1
 800819a:	6023      	str	r3, [r4, #0]
 800819c:	e005      	b.n	80081aa <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800819e:	f7fd fdb1 	bl	8005d04 <HAL_GetTick>
 80081a2:	1b83      	subs	r3, r0, r6
 80081a4:	2b05      	cmp	r3, #5
 80081a6:	f200 80a6 	bhi.w	80082f6 <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	07db      	lsls	r3, r3, #31
 80081ae:	d4f6      	bmi.n	800819e <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081b0:	682a      	ldr	r2, [r5, #0]
 80081b2:	4b57      	ldr	r3, [pc, #348]	; (8008310 <HAL_DMA_Abort+0x25c>)
 80081b4:	4857      	ldr	r0, [pc, #348]	; (8008314 <HAL_DMA_Abort+0x260>)
 80081b6:	495a      	ldr	r1, [pc, #360]	; (8008320 <HAL_DMA_Abort+0x26c>)
 80081b8:	4282      	cmp	r2, r0
 80081ba:	bf18      	it	ne
 80081bc:	429a      	cmpne	r2, r3
 80081be:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80081c2:	bf0c      	ite	eq
 80081c4:	2301      	moveq	r3, #1
 80081c6:	2300      	movne	r3, #0
 80081c8:	428a      	cmp	r2, r1
 80081ca:	bf08      	it	eq
 80081cc:	f043 0301 	orreq.w	r3, r3, #1
 80081d0:	3130      	adds	r1, #48	; 0x30
 80081d2:	4282      	cmp	r2, r0
 80081d4:	bf08      	it	eq
 80081d6:	f043 0301 	orreq.w	r3, r3, #1
 80081da:	3030      	adds	r0, #48	; 0x30
 80081dc:	428a      	cmp	r2, r1
 80081de:	bf08      	it	eq
 80081e0:	f043 0301 	orreq.w	r3, r3, #1
 80081e4:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80081e8:	4282      	cmp	r2, r0
 80081ea:	bf08      	it	eq
 80081ec:	f043 0301 	orreq.w	r3, r3, #1
 80081f0:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80081f4:	428a      	cmp	r2, r1
 80081f6:	bf08      	it	eq
 80081f8:	f043 0301 	orreq.w	r3, r3, #1
 80081fc:	3130      	adds	r1, #48	; 0x30
 80081fe:	4282      	cmp	r2, r0
 8008200:	bf08      	it	eq
 8008202:	f043 0301 	orreq.w	r3, r3, #1
 8008206:	3030      	adds	r0, #48	; 0x30
 8008208:	428a      	cmp	r2, r1
 800820a:	bf08      	it	eq
 800820c:	f043 0301 	orreq.w	r3, r3, #1
 8008210:	3130      	adds	r1, #48	; 0x30
 8008212:	4282      	cmp	r2, r0
 8008214:	bf08      	it	eq
 8008216:	f043 0301 	orreq.w	r3, r3, #1
 800821a:	3030      	adds	r0, #48	; 0x30
 800821c:	428a      	cmp	r2, r1
 800821e:	bf08      	it	eq
 8008220:	f043 0301 	orreq.w	r3, r3, #1
 8008224:	3130      	adds	r1, #48	; 0x30
 8008226:	4282      	cmp	r2, r0
 8008228:	bf08      	it	eq
 800822a:	f043 0301 	orreq.w	r3, r3, #1
 800822e:	428a      	cmp	r2, r1
 8008230:	bf08      	it	eq
 8008232:	f043 0301 	orreq.w	r3, r3, #1
 8008236:	3118      	adds	r1, #24
 8008238:	428a      	cmp	r2, r1
 800823a:	bf08      	it	eq
 800823c:	f043 0301 	orreq.w	r3, r3, #1
 8008240:	b933      	cbnz	r3, 8008250 <HAL_DMA_Abort+0x19c>
 8008242:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 8008246:	4b35      	ldr	r3, [pc, #212]	; (800831c <HAL_DMA_Abort+0x268>)
 8008248:	429a      	cmp	r2, r3
 800824a:	bf18      	it	ne
 800824c:	428a      	cmpne	r2, r1
 800824e:	d16f      	bne.n	8008330 <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008250:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8008252:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008254:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008256:	f002 021f 	and.w	r2, r2, #31
 800825a:	4093      	lsls	r3, r2
 800825c:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 800825e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008260:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 8008264:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8008266:	b133      	cbz	r3, 8008276 <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008268:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800826a:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800826e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008272:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008274:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8008276:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8008278:	2201      	movs	r2, #1
  return HAL_OK;
 800827a:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 800827c:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8008280:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8008284:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008286:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8008288:	2300      	movs	r3, #0
    return HAL_ERROR;
 800828a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800828c:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800828e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8008292:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008294:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008296:	4923      	ldr	r1, [pc, #140]	; (8008324 <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008298:	f022 020e 	bic.w	r2, r2, #14
 800829c:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800829e:	4a22      	ldr	r2, [pc, #136]	; (8008328 <HAL_DMA_Abort+0x274>)
 80082a0:	428c      	cmp	r4, r1
 80082a2:	bf18      	it	ne
 80082a4:	4294      	cmpne	r4, r2
 80082a6:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80082aa:	bf0c      	ite	eq
 80082ac:	2201      	moveq	r2, #1
 80082ae:	2200      	movne	r2, #0
 80082b0:	428c      	cmp	r4, r1
 80082b2:	bf08      	it	eq
 80082b4:	f042 0201 	orreq.w	r2, r2, #1
 80082b8:	3114      	adds	r1, #20
 80082ba:	428c      	cmp	r4, r1
 80082bc:	bf08      	it	eq
 80082be:	f042 0201 	orreq.w	r2, r2, #1
 80082c2:	3114      	adds	r1, #20
 80082c4:	428c      	cmp	r4, r1
 80082c6:	bf08      	it	eq
 80082c8:	f042 0201 	orreq.w	r2, r2, #1
 80082cc:	3114      	adds	r1, #20
 80082ce:	428c      	cmp	r4, r1
 80082d0:	bf08      	it	eq
 80082d2:	f042 0201 	orreq.w	r2, r2, #1
 80082d6:	3114      	adds	r1, #20
 80082d8:	428c      	cmp	r4, r1
 80082da:	bf08      	it	eq
 80082dc:	f042 0201 	orreq.w	r2, r2, #1
 80082e0:	b91a      	cbnz	r2, 80082ea <HAL_DMA_Abort+0x236>
 80082e2:	4a12      	ldr	r2, [pc, #72]	; (800832c <HAL_DMA_Abort+0x278>)
 80082e4:	4294      	cmp	r4, r2
 80082e6:	f47f af55 	bne.w	8008194 <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80082ea:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80082ec:	680a      	ldr	r2, [r1, #0]
 80082ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082f2:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80082f4:	e74e      	b.n	8008194 <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80082f6:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80082f8:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 80082fa:	2300      	movs	r3, #0
        return HAL_ERROR;
 80082fc:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80082fe:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8008300:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8008304:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
 8008308:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800830a:	2001      	movs	r0, #1
}
 800830c:	bd70      	pop	{r4, r5, r6, pc}
 800830e:	bf00      	nop
 8008310:	40020058 	.word	0x40020058
 8008314:	40020040 	.word	0x40020040
 8008318:	40020010 	.word	0x40020010
 800831c:	40020028 	.word	0x40020028
 8008320:	40020070 	.word	0x40020070
 8008324:	58025408 	.word	0x58025408
 8008328:	5802541c 	.word	0x5802541c
 800832c:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008330:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8008332:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008334:	4b16      	ldr	r3, [pc, #88]	; (8008390 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008336:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800833a:	4c16      	ldr	r4, [pc, #88]	; (8008394 <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800833c:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800833e:	42a2      	cmp	r2, r4
 8008340:	bf18      	it	ne
 8008342:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008344:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008346:	bf0c      	ite	eq
 8008348:	2301      	moveq	r3, #1
 800834a:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800834c:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800834e:	4812      	ldr	r0, [pc, #72]	; (8008398 <HAL_DMA_Abort+0x2e4>)
 8008350:	4912      	ldr	r1, [pc, #72]	; (800839c <HAL_DMA_Abort+0x2e8>)
 8008352:	4282      	cmp	r2, r0
 8008354:	bf08      	it	eq
 8008356:	f043 0301 	orreq.w	r3, r3, #1
 800835a:	3028      	adds	r0, #40	; 0x28
 800835c:	428a      	cmp	r2, r1
 800835e:	bf08      	it	eq
 8008360:	f043 0301 	orreq.w	r3, r3, #1
 8008364:	3128      	adds	r1, #40	; 0x28
 8008366:	4282      	cmp	r2, r0
 8008368:	bf08      	it	eq
 800836a:	f043 0301 	orreq.w	r3, r3, #1
 800836e:	428a      	cmp	r2, r1
 8008370:	bf08      	it	eq
 8008372:	f043 0301 	orreq.w	r3, r3, #1
 8008376:	3114      	adds	r1, #20
 8008378:	428a      	cmp	r2, r1
 800837a:	bf08      	it	eq
 800837c:	f043 0301 	orreq.w	r3, r3, #1
 8008380:	2b00      	cmp	r3, #0
 8008382:	f47f af6c 	bne.w	800825e <HAL_DMA_Abort+0x1aa>
 8008386:	4b06      	ldr	r3, [pc, #24]	; (80083a0 <HAL_DMA_Abort+0x2ec>)
 8008388:	429a      	cmp	r2, r3
 800838a:	f43f af68 	beq.w	800825e <HAL_DMA_Abort+0x1aa>
 800838e:	e772      	b.n	8008276 <HAL_DMA_Abort+0x1c2>
 8008390:	5802541c 	.word	0x5802541c
 8008394:	58025408 	.word	0x58025408
 8008398:	58025430 	.word	0x58025430
 800839c:	58025444 	.word	0x58025444
 80083a0:	58025494 	.word	0x58025494

080083a4 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d05f      	beq.n	8008468 <HAL_DMA_Abort_IT+0xc4>
{
 80083a8:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80083aa:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80083ae:	4603      	mov	r3, r0
 80083b0:	2a02      	cmp	r2, #2
 80083b2:	d155      	bne.n	8008460 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80083b4:	6801      	ldr	r1, [r0, #0]
 80083b6:	4a57      	ldr	r2, [pc, #348]	; (8008514 <HAL_DMA_Abort_IT+0x170>)
 80083b8:	4291      	cmp	r1, r2
 80083ba:	d048      	beq.n	800844e <HAL_DMA_Abort_IT+0xaa>
 80083bc:	3218      	adds	r2, #24
 80083be:	4291      	cmp	r1, r2
 80083c0:	d045      	beq.n	800844e <HAL_DMA_Abort_IT+0xaa>
 80083c2:	3230      	adds	r2, #48	; 0x30
 80083c4:	4c54      	ldr	r4, [pc, #336]	; (8008518 <HAL_DMA_Abort_IT+0x174>)
 80083c6:	4855      	ldr	r0, [pc, #340]	; (800851c <HAL_DMA_Abort_IT+0x178>)
 80083c8:	42a1      	cmp	r1, r4
 80083ca:	bf18      	it	ne
 80083cc:	4291      	cmpne	r1, r2
 80083ce:	f104 0448 	add.w	r4, r4, #72	; 0x48
 80083d2:	bf0c      	ite	eq
 80083d4:	2201      	moveq	r2, #1
 80083d6:	2200      	movne	r2, #0
 80083d8:	4281      	cmp	r1, r0
 80083da:	bf08      	it	eq
 80083dc:	f042 0201 	orreq.w	r2, r2, #1
 80083e0:	3030      	adds	r0, #48	; 0x30
 80083e2:	42a1      	cmp	r1, r4
 80083e4:	bf08      	it	eq
 80083e6:	f042 0201 	orreq.w	r2, r2, #1
 80083ea:	3430      	adds	r4, #48	; 0x30
 80083ec:	4281      	cmp	r1, r0
 80083ee:	bf08      	it	eq
 80083f0:	f042 0201 	orreq.w	r2, r2, #1
 80083f4:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80083f8:	42a1      	cmp	r1, r4
 80083fa:	bf08      	it	eq
 80083fc:	f042 0201 	orreq.w	r2, r2, #1
 8008400:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8008404:	4281      	cmp	r1, r0
 8008406:	bf08      	it	eq
 8008408:	f042 0201 	orreq.w	r2, r2, #1
 800840c:	3030      	adds	r0, #48	; 0x30
 800840e:	42a1      	cmp	r1, r4
 8008410:	bf08      	it	eq
 8008412:	f042 0201 	orreq.w	r2, r2, #1
 8008416:	3430      	adds	r4, #48	; 0x30
 8008418:	4281      	cmp	r1, r0
 800841a:	bf08      	it	eq
 800841c:	f042 0201 	orreq.w	r2, r2, #1
 8008420:	3030      	adds	r0, #48	; 0x30
 8008422:	42a1      	cmp	r1, r4
 8008424:	bf08      	it	eq
 8008426:	f042 0201 	orreq.w	r2, r2, #1
 800842a:	3430      	adds	r4, #48	; 0x30
 800842c:	4281      	cmp	r1, r0
 800842e:	bf08      	it	eq
 8008430:	f042 0201 	orreq.w	r2, r2, #1
 8008434:	3030      	adds	r0, #48	; 0x30
 8008436:	42a1      	cmp	r1, r4
 8008438:	bf08      	it	eq
 800843a:	f042 0201 	orreq.w	r2, r2, #1
 800843e:	4281      	cmp	r1, r0
 8008440:	bf08      	it	eq
 8008442:	f042 0201 	orreq.w	r2, r2, #1
 8008446:	b912      	cbnz	r2, 800844e <HAL_DMA_Abort_IT+0xaa>
 8008448:	4a35      	ldr	r2, [pc, #212]	; (8008520 <HAL_DMA_Abort_IT+0x17c>)
 800844a:	4291      	cmp	r1, r2
 800844c:	d10e      	bne.n	800846c <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800844e:	2204      	movs	r2, #4
  return HAL_OK;
 8008450:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8008452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8008456:	680b      	ldr	r3, [r1, #0]
 8008458:	f023 0301 	bic.w	r3, r3, #1
 800845c:	600b      	str	r3, [r1, #0]
}
 800845e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008460:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8008462:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008464:	655a      	str	r2, [r3, #84]	; 0x54
}
 8008466:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008468:	2001      	movs	r0, #1
}
 800846a:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800846c:	4a2d      	ldr	r2, [pc, #180]	; (8008524 <HAL_DMA_Abort_IT+0x180>)
 800846e:	4d2e      	ldr	r5, [pc, #184]	; (8008528 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008470:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008472:	42a9      	cmp	r1, r5
 8008474:	bf18      	it	ne
 8008476:	4291      	cmpne	r1, r2
 8008478:	4c2c      	ldr	r4, [pc, #176]	; (800852c <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800847a:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800847e:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8008482:	bf0c      	ite	eq
 8008484:	2201      	moveq	r2, #1
 8008486:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008488:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800848a:	42a1      	cmp	r1, r4
 800848c:	bf08      	it	eq
 800848e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8008492:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008494:	3428      	adds	r4, #40	; 0x28
 8008496:	42a9      	cmp	r1, r5
 8008498:	bf08      	it	eq
 800849a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800849e:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80084a2:	42a1      	cmp	r1, r4
 80084a4:	bf08      	it	eq
 80084a6:	f042 0201 	orreq.w	r2, r2, #1
 80084aa:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 80084ac:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80084ae:	42a1      	cmp	r1, r4
 80084b0:	bf08      	it	eq
 80084b2:	f042 0201 	orreq.w	r2, r2, #1
 80084b6:	481e      	ldr	r0, [pc, #120]	; (8008530 <HAL_DMA_Abort_IT+0x18c>)
 80084b8:	4281      	cmp	r1, r0
 80084ba:	bf08      	it	eq
 80084bc:	f042 0201 	orreq.w	r2, r2, #1
 80084c0:	b912      	cbnz	r2, 80084c8 <HAL_DMA_Abort_IT+0x124>
 80084c2:	4a1c      	ldr	r2, [pc, #112]	; (8008534 <HAL_DMA_Abort_IT+0x190>)
 80084c4:	4291      	cmp	r1, r2
 80084c6:	d117      	bne.n	80084f8 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80084c8:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80084ca:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80084cc:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80084d0:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80084d2:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80084d6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80084da:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80084dc:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80084de:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80084e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084e2:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 80084e6:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80084e8:	b132      	cbz	r2, 80084f8 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80084ea:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084ec:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80084f0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80084f4:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084f6:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 80084f8:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 80084fa:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 80084fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 80084fe:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8008502:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8008506:	b11a      	cbz	r2, 8008510 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 8008508:	4618      	mov	r0, r3
 800850a:	4790      	blx	r2
  return HAL_OK;
 800850c:	4620      	mov	r0, r4
}
 800850e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8008510:	4610      	mov	r0, r2
}
 8008512:	bd38      	pop	{r3, r4, r5, pc}
 8008514:	40020010 	.word	0x40020010
 8008518:	40020040 	.word	0x40020040
 800851c:	40020070 	.word	0x40020070
 8008520:	400204b8 	.word	0x400204b8
 8008524:	5802541c 	.word	0x5802541c
 8008528:	58025408 	.word	0x58025408
 800852c:	58025430 	.word	0x58025430
 8008530:	58025480 	.word	0x58025480
 8008534:	58025494 	.word	0x58025494

08008538 <HAL_DMA_IRQHandler>:
{
 8008538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
 800853c:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 800853e:	4b9c      	ldr	r3, [pc, #624]	; (80087b0 <HAL_DMA_IRQHandler+0x278>)
{
 8008540:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008542:	4e9c      	ldr	r6, [pc, #624]	; (80087b4 <HAL_DMA_IRQHandler+0x27c>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8008544:	681d      	ldr	r5, [r3, #0]
{
 8008546:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
 8008548:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800854a:	6803      	ldr	r3, [r0, #0]
 800854c:	4a9a      	ldr	r2, [pc, #616]	; (80087b8 <HAL_DMA_IRQHandler+0x280>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800854e:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008550:	4293      	cmp	r3, r2
 8008552:	bf18      	it	ne
 8008554:	42b3      	cmpne	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 8008556:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008558:	bf08      	it	eq
 800855a:	2601      	moveq	r6, #1
  tmpisr_bdma = regs_bdma->ISR;
 800855c:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800855e:	bf18      	it	ne
 8008560:	2600      	movne	r6, #0
 8008562:	d045      	beq.n	80085f0 <HAL_DMA_IRQHandler+0xb8>
 8008564:	3218      	adds	r2, #24
 8008566:	4895      	ldr	r0, [pc, #596]	; (80087bc <HAL_DMA_IRQHandler+0x284>)
 8008568:	4283      	cmp	r3, r0
 800856a:	bf18      	it	ne
 800856c:	4293      	cmpne	r3, r2
 800856e:	f100 0018 	add.w	r0, r0, #24
 8008572:	bf0c      	ite	eq
 8008574:	2201      	moveq	r2, #1
 8008576:	2200      	movne	r2, #0
 8008578:	4283      	cmp	r3, r0
 800857a:	bf08      	it	eq
 800857c:	f042 0201 	orreq.w	r2, r2, #1
 8008580:	3018      	adds	r0, #24
 8008582:	4283      	cmp	r3, r0
 8008584:	bf08      	it	eq
 8008586:	f042 0201 	orreq.w	r2, r2, #1
 800858a:	3018      	adds	r0, #24
 800858c:	4283      	cmp	r3, r0
 800858e:	bf08      	it	eq
 8008590:	f042 0201 	orreq.w	r2, r2, #1
 8008594:	3018      	adds	r0, #24
 8008596:	4283      	cmp	r3, r0
 8008598:	bf08      	it	eq
 800859a:	f042 0201 	orreq.w	r2, r2, #1
 800859e:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80085a2:	4283      	cmp	r3, r0
 80085a4:	bf08      	it	eq
 80085a6:	f042 0201 	orreq.w	r2, r2, #1
 80085aa:	3018      	adds	r0, #24
 80085ac:	4283      	cmp	r3, r0
 80085ae:	bf08      	it	eq
 80085b0:	f042 0201 	orreq.w	r2, r2, #1
 80085b4:	3018      	adds	r0, #24
 80085b6:	4283      	cmp	r3, r0
 80085b8:	bf08      	it	eq
 80085ba:	f042 0201 	orreq.w	r2, r2, #1
 80085be:	3018      	adds	r0, #24
 80085c0:	4283      	cmp	r3, r0
 80085c2:	bf08      	it	eq
 80085c4:	f042 0201 	orreq.w	r2, r2, #1
 80085c8:	3018      	adds	r0, #24
 80085ca:	4283      	cmp	r3, r0
 80085cc:	bf08      	it	eq
 80085ce:	f042 0201 	orreq.w	r2, r2, #1
 80085d2:	3018      	adds	r0, #24
 80085d4:	4283      	cmp	r3, r0
 80085d6:	bf08      	it	eq
 80085d8:	f042 0201 	orreq.w	r2, r2, #1
 80085dc:	3018      	adds	r0, #24
 80085de:	4283      	cmp	r3, r0
 80085e0:	bf08      	it	eq
 80085e2:	f042 0201 	orreq.w	r2, r2, #1
 80085e6:	b91a      	cbnz	r2, 80085f0 <HAL_DMA_IRQHandler+0xb8>
 80085e8:	4a75      	ldr	r2, [pc, #468]	; (80087c0 <HAL_DMA_IRQHandler+0x288>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	f040 8250 	bne.w	8008a90 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80085f0:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 80085f4:	2208      	movs	r2, #8
 80085f6:	f001 0c1f 	and.w	ip, r1, #31
 80085fa:	fa02 f20c 	lsl.w	r2, r2, ip
 80085fe:	4217      	tst	r7, r2
 8008600:	f040 8188 	bne.w	8008914 <HAL_DMA_IRQHandler+0x3dc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008604:	fa27 f20c 	lsr.w	r2, r7, ip
 8008608:	07d2      	lsls	r2, r2, #31
 800860a:	d50c      	bpl.n	8008626 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800860c:	695a      	ldr	r2, [r3, #20]
 800860e:	0610      	lsls	r0, r2, #24
 8008610:	d509      	bpl.n	8008626 <HAL_DMA_IRQHandler+0xee>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008612:	2201      	movs	r2, #1
 8008614:	fa02 f20c 	lsl.w	r2, r2, ip
 8008618:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800861a:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 800861e:	f042 0202 	orr.w	r2, r2, #2
 8008622:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008626:	f04f 0e04 	mov.w	lr, #4
 800862a:	fa0e f00c 	lsl.w	r0, lr, ip
 800862e:	4238      	tst	r0, r7
 8008630:	d05b      	beq.n	80086ea <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008632:	2e00      	cmp	r6, #0
 8008634:	d14f      	bne.n	80086d6 <HAL_DMA_IRQHandler+0x19e>
 8008636:	4a61      	ldr	r2, [pc, #388]	; (80087bc <HAL_DMA_IRQHandler+0x284>)
 8008638:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80087c4 <HAL_DMA_IRQHandler+0x28c>
 800863c:	4543      	cmp	r3, r8
 800863e:	bf18      	it	ne
 8008640:	4293      	cmpne	r3, r2
 8008642:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8008646:	bf0c      	ite	eq
 8008648:	2201      	moveq	r2, #1
 800864a:	2200      	movne	r2, #0
 800864c:	4543      	cmp	r3, r8
 800864e:	bf08      	it	eq
 8008650:	f042 0201 	orreq.w	r2, r2, #1
 8008654:	f108 0818 	add.w	r8, r8, #24
 8008658:	4543      	cmp	r3, r8
 800865a:	bf08      	it	eq
 800865c:	f042 0201 	orreq.w	r2, r2, #1
 8008660:	f108 0818 	add.w	r8, r8, #24
 8008664:	4543      	cmp	r3, r8
 8008666:	bf08      	it	eq
 8008668:	f042 0201 	orreq.w	r2, r2, #1
 800866c:	f108 0818 	add.w	r8, r8, #24
 8008670:	4543      	cmp	r3, r8
 8008672:	bf08      	it	eq
 8008674:	f042 0201 	orreq.w	r2, r2, #1
 8008678:	f508 7856 	add.w	r8, r8, #856	; 0x358
 800867c:	4543      	cmp	r3, r8
 800867e:	bf08      	it	eq
 8008680:	f042 0201 	orreq.w	r2, r2, #1
 8008684:	f108 0818 	add.w	r8, r8, #24
 8008688:	4543      	cmp	r3, r8
 800868a:	bf08      	it	eq
 800868c:	f042 0201 	orreq.w	r2, r2, #1
 8008690:	f108 0818 	add.w	r8, r8, #24
 8008694:	4543      	cmp	r3, r8
 8008696:	bf08      	it	eq
 8008698:	f042 0201 	orreq.w	r2, r2, #1
 800869c:	f108 0818 	add.w	r8, r8, #24
 80086a0:	4543      	cmp	r3, r8
 80086a2:	bf08      	it	eq
 80086a4:	f042 0201 	orreq.w	r2, r2, #1
 80086a8:	f108 0818 	add.w	r8, r8, #24
 80086ac:	4543      	cmp	r3, r8
 80086ae:	bf08      	it	eq
 80086b0:	f042 0201 	orreq.w	r2, r2, #1
 80086b4:	f108 0818 	add.w	r8, r8, #24
 80086b8:	4543      	cmp	r3, r8
 80086ba:	bf08      	it	eq
 80086bc:	f042 0201 	orreq.w	r2, r2, #1
 80086c0:	f108 0818 	add.w	r8, r8, #24
 80086c4:	4543      	cmp	r3, r8
 80086c6:	bf08      	it	eq
 80086c8:	f042 0201 	orreq.w	r2, r2, #1
 80086cc:	b91a      	cbnz	r2, 80086d6 <HAL_DMA_IRQHandler+0x19e>
 80086ce:	4a3c      	ldr	r2, [pc, #240]	; (80087c0 <HAL_DMA_IRQHandler+0x288>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	f040 8219 	bne.w	8008b08 <HAL_DMA_IRQHandler+0x5d0>
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	0792      	lsls	r2, r2, #30
 80086da:	d506      	bpl.n	80086ea <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80086dc:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80086de:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 80086e2:	f042 0204 	orr.w	r2, r2, #4
 80086e6:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80086ea:	2210      	movs	r2, #16
 80086ec:	fa02 fc0c 	lsl.w	ip, r2, ip
 80086f0:	ea1c 0f07 	tst.w	ip, r7
 80086f4:	d06c      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80086f6:	2e00      	cmp	r6, #0
 80086f8:	d145      	bne.n	8008786 <HAL_DMA_IRQHandler+0x24e>
 80086fa:	4a30      	ldr	r2, [pc, #192]	; (80087bc <HAL_DMA_IRQHandler+0x284>)
 80086fc:	4e31      	ldr	r6, [pc, #196]	; (80087c4 <HAL_DMA_IRQHandler+0x28c>)
 80086fe:	42b3      	cmp	r3, r6
 8008700:	bf18      	it	ne
 8008702:	4293      	cmpne	r3, r2
 8008704:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8008708:	bf0c      	ite	eq
 800870a:	2201      	moveq	r2, #1
 800870c:	2200      	movne	r2, #0
 800870e:	42b3      	cmp	r3, r6
 8008710:	bf08      	it	eq
 8008712:	f042 0201 	orreq.w	r2, r2, #1
 8008716:	3618      	adds	r6, #24
 8008718:	42b3      	cmp	r3, r6
 800871a:	bf08      	it	eq
 800871c:	f042 0201 	orreq.w	r2, r2, #1
 8008720:	3618      	adds	r6, #24
 8008722:	42b3      	cmp	r3, r6
 8008724:	bf08      	it	eq
 8008726:	f042 0201 	orreq.w	r2, r2, #1
 800872a:	3618      	adds	r6, #24
 800872c:	42b3      	cmp	r3, r6
 800872e:	bf08      	it	eq
 8008730:	f042 0201 	orreq.w	r2, r2, #1
 8008734:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8008738:	42b3      	cmp	r3, r6
 800873a:	bf08      	it	eq
 800873c:	f042 0201 	orreq.w	r2, r2, #1
 8008740:	3618      	adds	r6, #24
 8008742:	42b3      	cmp	r3, r6
 8008744:	bf08      	it	eq
 8008746:	f042 0201 	orreq.w	r2, r2, #1
 800874a:	3618      	adds	r6, #24
 800874c:	42b3      	cmp	r3, r6
 800874e:	bf08      	it	eq
 8008750:	f042 0201 	orreq.w	r2, r2, #1
 8008754:	3618      	adds	r6, #24
 8008756:	42b3      	cmp	r3, r6
 8008758:	bf08      	it	eq
 800875a:	f042 0201 	orreq.w	r2, r2, #1
 800875e:	3618      	adds	r6, #24
 8008760:	42b3      	cmp	r3, r6
 8008762:	bf08      	it	eq
 8008764:	f042 0201 	orreq.w	r2, r2, #1
 8008768:	3618      	adds	r6, #24
 800876a:	42b3      	cmp	r3, r6
 800876c:	bf08      	it	eq
 800876e:	f042 0201 	orreq.w	r2, r2, #1
 8008772:	3618      	adds	r6, #24
 8008774:	42b3      	cmp	r3, r6
 8008776:	bf08      	it	eq
 8008778:	f042 0201 	orreq.w	r2, r2, #1
 800877c:	b91a      	cbnz	r2, 8008786 <HAL_DMA_IRQHandler+0x24e>
 800877e:	4a10      	ldr	r2, [pc, #64]	; (80087c0 <HAL_DMA_IRQHandler+0x288>)
 8008780:	4293      	cmp	r3, r2
 8008782:	f040 81c9 	bne.w	8008b18 <HAL_DMA_IRQHandler+0x5e0>
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	0710      	lsls	r0, r2, #28
 800878a:	d521      	bpl.n	80087d0 <HAL_DMA_IRQHandler+0x298>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800878c:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	0356      	lsls	r6, r2, #13
 8008794:	f100 814c 	bmi.w	8008a30 <HAL_DMA_IRQHandler+0x4f8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	05d2      	lsls	r2, r2, #23
 800879c:	d403      	bmi.n	80087a6 <HAL_DMA_IRQHandler+0x26e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	f022 0208 	bic.w	r2, r2, #8
 80087a4:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80087a6:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 80087aa:	b18b      	cbz	r3, 80087d0 <HAL_DMA_IRQHandler+0x298>
 80087ac:	e00c      	b.n	80087c8 <HAL_DMA_IRQHandler+0x290>
 80087ae:	bf00      	nop
 80087b0:	24000310 	.word	0x24000310
 80087b4:	40020010 	.word	0x40020010
 80087b8:	40020028 	.word	0x40020028
 80087bc:	40020058 	.word	0x40020058
 80087c0:	400204b8 	.word	0x400204b8
 80087c4:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 80087c8:	4648      	mov	r0, r9
 80087ca:	4798      	blx	r3
 80087cc:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80087d0:	f001 011f 	and.w	r1, r1, #31
 80087d4:	2620      	movs	r6, #32
 80087d6:	408e      	lsls	r6, r1
 80087d8:	423e      	tst	r6, r7
 80087da:	d068      	beq.n	80088ae <HAL_DMA_IRQHandler+0x376>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80087dc:	f8d9 2000 	ldr.w	r2, [r9]
 80087e0:	4ba5      	ldr	r3, [pc, #660]	; (8008a78 <HAL_DMA_IRQHandler+0x540>)
 80087e2:	4fa6      	ldr	r7, [pc, #664]	; (8008a7c <HAL_DMA_IRQHandler+0x544>)
 80087e4:	42ba      	cmp	r2, r7
 80087e6:	bf18      	it	ne
 80087e8:	429a      	cmpne	r2, r3
 80087ea:	f107 0718 	add.w	r7, r7, #24
 80087ee:	bf0c      	ite	eq
 80087f0:	2301      	moveq	r3, #1
 80087f2:	2300      	movne	r3, #0
 80087f4:	42ba      	cmp	r2, r7
 80087f6:	bf08      	it	eq
 80087f8:	f043 0301 	orreq.w	r3, r3, #1
 80087fc:	3718      	adds	r7, #24
 80087fe:	42ba      	cmp	r2, r7
 8008800:	bf08      	it	eq
 8008802:	f043 0301 	orreq.w	r3, r3, #1
 8008806:	3718      	adds	r7, #24
 8008808:	42ba      	cmp	r2, r7
 800880a:	bf08      	it	eq
 800880c:	f043 0301 	orreq.w	r3, r3, #1
 8008810:	3718      	adds	r7, #24
 8008812:	42ba      	cmp	r2, r7
 8008814:	bf08      	it	eq
 8008816:	f043 0301 	orreq.w	r3, r3, #1
 800881a:	3718      	adds	r7, #24
 800881c:	42ba      	cmp	r2, r7
 800881e:	bf08      	it	eq
 8008820:	f043 0301 	orreq.w	r3, r3, #1
 8008824:	3718      	adds	r7, #24
 8008826:	42ba      	cmp	r2, r7
 8008828:	bf08      	it	eq
 800882a:	f043 0301 	orreq.w	r3, r3, #1
 800882e:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8008832:	42ba      	cmp	r2, r7
 8008834:	bf08      	it	eq
 8008836:	f043 0301 	orreq.w	r3, r3, #1
 800883a:	3718      	adds	r7, #24
 800883c:	42ba      	cmp	r2, r7
 800883e:	bf08      	it	eq
 8008840:	f043 0301 	orreq.w	r3, r3, #1
 8008844:	3718      	adds	r7, #24
 8008846:	42ba      	cmp	r2, r7
 8008848:	bf08      	it	eq
 800884a:	f043 0301 	orreq.w	r3, r3, #1
 800884e:	3718      	adds	r7, #24
 8008850:	42ba      	cmp	r2, r7
 8008852:	bf08      	it	eq
 8008854:	f043 0301 	orreq.w	r3, r3, #1
 8008858:	3718      	adds	r7, #24
 800885a:	42ba      	cmp	r2, r7
 800885c:	bf08      	it	eq
 800885e:	f043 0301 	orreq.w	r3, r3, #1
 8008862:	3718      	adds	r7, #24
 8008864:	42ba      	cmp	r2, r7
 8008866:	bf08      	it	eq
 8008868:	f043 0301 	orreq.w	r3, r3, #1
 800886c:	3718      	adds	r7, #24
 800886e:	42ba      	cmp	r2, r7
 8008870:	bf08      	it	eq
 8008872:	f043 0301 	orreq.w	r3, r3, #1
 8008876:	b91b      	cbnz	r3, 8008880 <HAL_DMA_IRQHandler+0x348>
 8008878:	4b81      	ldr	r3, [pc, #516]	; (8008a80 <HAL_DMA_IRQHandler+0x548>)
 800887a:	429a      	cmp	r2, r3
 800887c:	f040 8162 	bne.w	8008b44 <HAL_DMA_IRQHandler+0x60c>
 8008880:	6813      	ldr	r3, [r2, #0]
 8008882:	06db      	lsls	r3, r3, #27
 8008884:	d513      	bpl.n	80088ae <HAL_DMA_IRQHandler+0x376>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008886:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008888:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 800888c:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800888e:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008890:	f000 80ae 	beq.w	80089f0 <HAL_DMA_IRQHandler+0x4b8>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008894:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008898:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800889a:	f000 80d3 	beq.w	8008a44 <HAL_DMA_IRQHandler+0x50c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800889e:	031c      	lsls	r4, r3, #12
 80088a0:	f140 80de 	bpl.w	8008a60 <HAL_DMA_IRQHandler+0x528>
          if(hdma->XferCpltCallback != NULL)
 80088a4:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 80088a8:	b10b      	cbz	r3, 80088ae <HAL_DMA_IRQHandler+0x376>
            hdma->XferCpltCallback(hdma);
 80088aa:	4648      	mov	r0, r9
 80088ac:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80088ae:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f000 80b9 	beq.w	8008a2a <HAL_DMA_IRQHandler+0x4f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80088b8:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 80088bc:	07d8      	lsls	r0, r3, #31
 80088be:	d51f      	bpl.n	8008900 <HAL_DMA_IRQHandler+0x3c8>
        __HAL_DMA_DISABLE(hdma);
 80088c0:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
 80088c4:	2104      	movs	r1, #4
 80088c6:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80088ca:	6813      	ldr	r3, [r2, #0]
 80088cc:	f023 0301 	bic.w	r3, r3, #1
 80088d0:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80088d2:	4b6c      	ldr	r3, [pc, #432]	; (8008a84 <HAL_DMA_IRQHandler+0x54c>)
 80088d4:	fba3 3505 	umull	r3, r5, r3, r5
 80088d8:	0aad      	lsrs	r5, r5, #10
 80088da:	e002      	b.n	80088e2 <HAL_DMA_IRQHandler+0x3aa>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80088dc:	6813      	ldr	r3, [r2, #0]
 80088de:	07d9      	lsls	r1, r3, #31
 80088e0:	d504      	bpl.n	80088ec <HAL_DMA_IRQHandler+0x3b4>
          if (++count > timeout)
 80088e2:	9b01      	ldr	r3, [sp, #4]
 80088e4:	3301      	adds	r3, #1
 80088e6:	42ab      	cmp	r3, r5
 80088e8:	9301      	str	r3, [sp, #4]
 80088ea:	d9f7      	bls.n	80088dc <HAL_DMA_IRQHandler+0x3a4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80088ec:	6813      	ldr	r3, [r2, #0]
 80088ee:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80088f0:	bf4c      	ite	mi
 80088f2:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80088f4:	2301      	movpl	r3, #1
 80088f6:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80088fa:	2300      	movs	r3, #0
 80088fc:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8008900:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 8090 	beq.w	8008a2a <HAL_DMA_IRQHandler+0x4f2>
          hdma->XferCpltCallback(hdma);
 800890a:	4648      	mov	r0, r9
}
 800890c:	b003      	add	sp, #12
 800890e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
          hdma->XferCpltCallback(hdma);
 8008912:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008914:	6818      	ldr	r0, [r3, #0]
 8008916:	0740      	lsls	r0, r0, #29
 8008918:	d50a      	bpl.n	8008930 <HAL_DMA_IRQHandler+0x3f8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800891a:	6818      	ldr	r0, [r3, #0]
 800891c:	f020 0004 	bic.w	r0, r0, #4
 8008920:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008922:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008924:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8008928:	f042 0201 	orr.w	r2, r2, #1
 800892c:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008930:	fa27 f20c 	lsr.w	r2, r7, ip
 8008934:	07d2      	lsls	r2, r2, #31
 8008936:	f57f ae76 	bpl.w	8008626 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800893a:	4a53      	ldr	r2, [pc, #332]	; (8008a88 <HAL_DMA_IRQHandler+0x550>)
 800893c:	4853      	ldr	r0, [pc, #332]	; (8008a8c <HAL_DMA_IRQHandler+0x554>)
 800893e:	4283      	cmp	r3, r0
 8008940:	bf18      	it	ne
 8008942:	4293      	cmpne	r3, r2
 8008944:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8008948:	bf0c      	ite	eq
 800894a:	2201      	moveq	r2, #1
 800894c:	2200      	movne	r2, #0
 800894e:	4283      	cmp	r3, r0
 8008950:	bf08      	it	eq
 8008952:	f042 0201 	orreq.w	r2, r2, #1
 8008956:	3018      	adds	r0, #24
 8008958:	4283      	cmp	r3, r0
 800895a:	bf08      	it	eq
 800895c:	f042 0201 	orreq.w	r2, r2, #1
 8008960:	3018      	adds	r0, #24
 8008962:	4283      	cmp	r3, r0
 8008964:	bf08      	it	eq
 8008966:	f042 0201 	orreq.w	r2, r2, #1
 800896a:	3018      	adds	r0, #24
 800896c:	4283      	cmp	r3, r0
 800896e:	bf08      	it	eq
 8008970:	f042 0201 	orreq.w	r2, r2, #1
 8008974:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8008978:	4283      	cmp	r3, r0
 800897a:	bf08      	it	eq
 800897c:	f042 0201 	orreq.w	r2, r2, #1
 8008980:	3018      	adds	r0, #24
 8008982:	4283      	cmp	r3, r0
 8008984:	bf08      	it	eq
 8008986:	f042 0201 	orreq.w	r2, r2, #1
 800898a:	3018      	adds	r0, #24
 800898c:	4283      	cmp	r3, r0
 800898e:	bf08      	it	eq
 8008990:	f042 0201 	orreq.w	r2, r2, #1
 8008994:	3018      	adds	r0, #24
 8008996:	4283      	cmp	r3, r0
 8008998:	bf08      	it	eq
 800899a:	f042 0201 	orreq.w	r2, r2, #1
 800899e:	3018      	adds	r0, #24
 80089a0:	4283      	cmp	r3, r0
 80089a2:	bf08      	it	eq
 80089a4:	f042 0201 	orreq.w	r2, r2, #1
 80089a8:	3018      	adds	r0, #24
 80089aa:	4283      	cmp	r3, r0
 80089ac:	bf08      	it	eq
 80089ae:	f042 0201 	orreq.w	r2, r2, #1
 80089b2:	3018      	adds	r0, #24
 80089b4:	4283      	cmp	r3, r0
 80089b6:	bf08      	it	eq
 80089b8:	f042 0201 	orreq.w	r2, r2, #1
 80089bc:	3018      	adds	r0, #24
 80089be:	4283      	cmp	r3, r0
 80089c0:	bf08      	it	eq
 80089c2:	f042 0201 	orreq.w	r2, r2, #1
 80089c6:	2a00      	cmp	r2, #0
 80089c8:	f47f ae20 	bne.w	800860c <HAL_DMA_IRQHandler+0xd4>
 80089cc:	2e00      	cmp	r6, #0
 80089ce:	f47f ae1d 	bne.w	800860c <HAL_DMA_IRQHandler+0xd4>
 80089d2:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80089d4:	2204      	movs	r2, #4
 80089d6:	fa02 f20c 	lsl.w	r2, r2, ip
 80089da:	423a      	tst	r2, r7
 80089dc:	f040 8094 	bne.w	8008b08 <HAL_DMA_IRQHandler+0x5d0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80089e0:	2210      	movs	r2, #16
 80089e2:	fa02 fc0c 	lsl.w	ip, r2, ip
 80089e6:	ea17 0f0c 	tst.w	r7, ip
 80089ea:	f43f aef1 	beq.w	80087d0 <HAL_DMA_IRQHandler+0x298>
 80089ee:	e684      	b.n	80086fa <HAL_DMA_IRQHandler+0x1c2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80089f0:	f023 0316 	bic.w	r3, r3, #22
 80089f4:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80089f6:	6953      	ldr	r3, [r2, #20]
 80089f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089fc:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80089fe:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8008a02:	b39b      	cbz	r3, 8008a6c <HAL_DMA_IRQHandler+0x534>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008a04:	6813      	ldr	r3, [r2, #0]
 8008a06:	f023 0308 	bic.w	r3, r3, #8
 8008a0a:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008a0c:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8008a0e:	2501      	movs	r5, #1
          __HAL_UNLOCK(hdma);
 8008a10:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008a12:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 8008a16:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008a1a:	60a1      	str	r1, [r4, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8008a1c:	f889 5035 	strb.w	r5, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8008a20:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f47f af70 	bne.w	800890a <HAL_DMA_IRQHandler+0x3d2>
}
 8008a2a:	b003      	add	sp, #12
 8008a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	0318      	lsls	r0, r3, #12
 8008a34:	f57f aeb7 	bpl.w	80087a6 <HAL_DMA_IRQHandler+0x26e>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008a38:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f47f aec3 	bne.w	80087c8 <HAL_DMA_IRQHandler+0x290>
 8008a42:	e6c5      	b.n	80087d0 <HAL_DMA_IRQHandler+0x298>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008a44:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8008a48:	f47f af2c 	bne.w	80088a4 <HAL_DMA_IRQHandler+0x36c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008a4c:	6811      	ldr	r1, [r2, #0]
 8008a4e:	f021 0110 	bic.w	r1, r1, #16
 8008a52:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8008a54:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8008a56:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8008a5a:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8008a5e:	e721      	b.n	80088a4 <HAL_DMA_IRQHandler+0x36c>
            if(hdma->XferM1CpltCallback != NULL)
 8008a60:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f47f af20 	bne.w	80088aa <HAL_DMA_IRQHandler+0x372>
 8008a6a:	e720      	b.n	80088ae <HAL_DMA_IRQHandler+0x376>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008a6c:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1c7      	bne.n	8008a04 <HAL_DMA_IRQHandler+0x4cc>
 8008a74:	e7ca      	b.n	8008a0c <HAL_DMA_IRQHandler+0x4d4>
 8008a76:	bf00      	nop
 8008a78:	40020010 	.word	0x40020010
 8008a7c:	40020028 	.word	0x40020028
 8008a80:	400204b8 	.word	0x400204b8
 8008a84:	1b4e81b5 	.word	0x1b4e81b5
 8008a88:	40020058 	.word	0x40020058
 8008a8c:	40020040 	.word	0x40020040
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008a90:	4a4e      	ldr	r2, [pc, #312]	; (8008bcc <HAL_DMA_IRQHandler+0x694>)
 8008a92:	4d4f      	ldr	r5, [pc, #316]	; (8008bd0 <HAL_DMA_IRQHandler+0x698>)
 8008a94:	42ab      	cmp	r3, r5
 8008a96:	bf18      	it	ne
 8008a98:	4293      	cmpne	r3, r2
 8008a9a:	f105 0514 	add.w	r5, r5, #20
 8008a9e:	bf0c      	ite	eq
 8008aa0:	2201      	moveq	r2, #1
 8008aa2:	2200      	movne	r2, #0
 8008aa4:	42ab      	cmp	r3, r5
 8008aa6:	bf08      	it	eq
 8008aa8:	f042 0201 	orreq.w	r2, r2, #1
 8008aac:	3514      	adds	r5, #20
 8008aae:	42ab      	cmp	r3, r5
 8008ab0:	bf08      	it	eq
 8008ab2:	f042 0201 	orreq.w	r2, r2, #1
 8008ab6:	3514      	adds	r5, #20
 8008ab8:	42ab      	cmp	r3, r5
 8008aba:	bf08      	it	eq
 8008abc:	f042 0201 	orreq.w	r2, r2, #1
 8008ac0:	3514      	adds	r5, #20
 8008ac2:	42ab      	cmp	r3, r5
 8008ac4:	bf08      	it	eq
 8008ac6:	f042 0201 	orreq.w	r2, r2, #1
 8008aca:	3514      	adds	r5, #20
 8008acc:	42ab      	cmp	r3, r5
 8008ace:	bf08      	it	eq
 8008ad0:	f042 0201 	orreq.w	r2, r2, #1
 8008ad4:	b912      	cbnz	r2, 8008adc <HAL_DMA_IRQHandler+0x5a4>
 8008ad6:	4a3f      	ldr	r2, [pc, #252]	; (8008bd4 <HAL_DMA_IRQHandler+0x69c>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d1a6      	bne.n	8008a2a <HAL_DMA_IRQHandler+0x4f2>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008adc:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
 8008ae0:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008ae2:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008ae4:	f005 051f 	and.w	r5, r5, #31
 8008ae8:	40ae      	lsls	r6, r5
 8008aea:	420e      	tst	r6, r1
 8008aec:	d019      	beq.n	8008b22 <HAL_DMA_IRQHandler+0x5ea>
 8008aee:	0757      	lsls	r7, r2, #29
 8008af0:	d517      	bpl.n	8008b22 <HAL_DMA_IRQHandler+0x5ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008af2:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008af4:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008af6:	d54b      	bpl.n	8008b90 <HAL_DMA_IRQHandler+0x658>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008af8:	03d1      	lsls	r1, r2, #15
 8008afa:	d44f      	bmi.n	8008b9c <HAL_DMA_IRQHandler+0x664>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008afc:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f47f af02 	bne.w	800890a <HAL_DMA_IRQHandler+0x3d2>
 8008b06:	e790      	b.n	8008a2a <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008b08:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008b0a:	2210      	movs	r2, #16
 8008b0c:	fa02 fc0c 	lsl.w	ip, r2, ip
 8008b10:	ea17 0f0c 	tst.w	r7, ip
 8008b14:	f43f ae5c 	beq.w	80087d0 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	0752      	lsls	r2, r2, #29
 8008b1c:	f57f ae58 	bpl.w	80087d0 <HAL_DMA_IRQHandler+0x298>
 8008b20:	e634      	b.n	800878c <HAL_DMA_IRQHandler+0x254>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008b22:	2602      	movs	r6, #2
 8008b24:	40ae      	lsls	r6, r5
 8008b26:	420e      	tst	r6, r1
 8008b28:	d011      	beq.n	8008b4e <HAL_DMA_IRQHandler+0x616>
 8008b2a:	0797      	lsls	r7, r2, #30
 8008b2c:	d50f      	bpl.n	8008b4e <HAL_DMA_IRQHandler+0x616>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008b2e:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b30:	0414      	lsls	r4, r2, #16
 8008b32:	d539      	bpl.n	8008ba8 <HAL_DMA_IRQHandler+0x670>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008b34:	03d0      	lsls	r0, r2, #15
 8008b36:	d443      	bmi.n	8008bc0 <HAL_DMA_IRQHandler+0x688>
          if(hdma->XferM1CpltCallback != NULL)
 8008b38:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f47f aee4 	bne.w	800890a <HAL_DMA_IRQHandler+0x3d2>
 8008b42:	e772      	b.n	8008a2a <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008b44:	6813      	ldr	r3, [r2, #0]
 8008b46:	079f      	lsls	r7, r3, #30
 8008b48:	f57f aeb1 	bpl.w	80088ae <HAL_DMA_IRQHandler+0x376>
 8008b4c:	e69b      	b.n	8008886 <HAL_DMA_IRQHandler+0x34e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008b4e:	2608      	movs	r6, #8
 8008b50:	40ae      	lsls	r6, r5
 8008b52:	420e      	tst	r6, r1
 8008b54:	f43f af69 	beq.w	8008a2a <HAL_DMA_IRQHandler+0x4f2>
 8008b58:	0711      	lsls	r1, r2, #28
 8008b5a:	f57f af66 	bpl.w	8008a2a <HAL_DMA_IRQHandler+0x4f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b5e:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 8008b60:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b62:	f022 020e 	bic.w	r2, r2, #14
 8008b66:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008b68:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8008b6a:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008b6e:	fa03 f505 	lsl.w	r5, r3, r5
 8008b72:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008b74:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8008b78:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8008b7c:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8008b80:	2a00      	cmp	r2, #0
 8008b82:	f43f af52 	beq.w	8008a2a <HAL_DMA_IRQHandler+0x4f2>
        hdma->XferErrorCallback(hdma);
 8008b86:	4648      	mov	r0, r9
}
 8008b88:	b003      	add	sp, #12
 8008b8a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
 8008b8e:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008b90:	0692      	lsls	r2, r2, #26
 8008b92:	d403      	bmi.n	8008b9c <HAL_DMA_IRQHandler+0x664>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	f022 0204 	bic.w	r2, r2, #4
 8008b9a:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8008b9c:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f47f aeb2 	bne.w	800890a <HAL_DMA_IRQHandler+0x3d2>
 8008ba6:	e740      	b.n	8008a2a <HAL_DMA_IRQHandler+0x4f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008ba8:	f012 0220 	ands.w	r2, r2, #32
 8008bac:	d108      	bne.n	8008bc0 <HAL_DMA_IRQHandler+0x688>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008bae:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8008bb0:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008bb2:	f021 010a 	bic.w	r1, r1, #10
 8008bb6:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8008bb8:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8008bbc:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8008bc0:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f47f aea0 	bne.w	800890a <HAL_DMA_IRQHandler+0x3d2>
 8008bca:	e72e      	b.n	8008a2a <HAL_DMA_IRQHandler+0x4f2>
 8008bcc:	58025408 	.word	0x58025408
 8008bd0:	5802541c 	.word	0x5802541c
 8008bd4:	58025494 	.word	0x58025494

08008bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008bdc:	680c      	ldr	r4, [r1, #0]
{
 8008bde:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008be0:	2c00      	cmp	r4, #0
 8008be2:	f000 80a6 	beq.w	8008d32 <HAL_GPIO_Init+0x15a>
 8008be6:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bea:	4f8e      	ldr	r7, [pc, #568]	; (8008e24 <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
 8008bec:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008bee:	2201      	movs	r2, #1
 8008bf0:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8008bf2:	ea12 0e04 	ands.w	lr, r2, r4
 8008bf6:	f000 8095 	beq.w	8008d24 <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008bfa:	684d      	ldr	r5, [r1, #4]
 8008bfc:	f005 0903 	and.w	r9, r5, #3
 8008c00:	f109 36ff 	add.w	r6, r9, #4294967295
 8008c04:	2e01      	cmp	r6, #1
 8008c06:	f240 8097 	bls.w	8008d38 <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c0a:	f1b9 0f03 	cmp.w	r9, #3
 8008c0e:	f040 80d1 	bne.w	8008db4 <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c12:	fa09 f20c 	lsl.w	r2, r9, ip
 8008c16:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 8008c1a:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c1c:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008c20:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c24:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 8008c28:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c2a:	d07b      	beq.n	8008d24 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c2c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8008c30:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008c34:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c38:	f042 0202 	orr.w	r2, r2, #2
 8008c3c:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008c40:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c44:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008c48:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8008c4c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8008c50:	f002 0202 	and.w	r2, r2, #2
 8008c54:	9201      	str	r2, [sp, #4]
 8008c56:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008c58:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 8008c5a:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008c5e:	fa02 f209 	lsl.w	r2, r2, r9
 8008c62:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008c66:	4e70      	ldr	r6, [pc, #448]	; (8008e28 <HAL_GPIO_Init+0x250>)
 8008c68:	42b0      	cmp	r0, r6
 8008c6a:	d029      	beq.n	8008cc0 <HAL_GPIO_Init+0xe8>
 8008c6c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008c70:	42b0      	cmp	r0, r6
 8008c72:	f000 80ac 	beq.w	8008dce <HAL_GPIO_Init+0x1f6>
 8008c76:	4e6d      	ldr	r6, [pc, #436]	; (8008e2c <HAL_GPIO_Init+0x254>)
 8008c78:	42b0      	cmp	r0, r6
 8008c7a:	f000 80ae 	beq.w	8008dda <HAL_GPIO_Init+0x202>
 8008c7e:	4e6c      	ldr	r6, [pc, #432]	; (8008e30 <HAL_GPIO_Init+0x258>)
 8008c80:	42b0      	cmp	r0, r6
 8008c82:	f000 809e 	beq.w	8008dc2 <HAL_GPIO_Init+0x1ea>
 8008c86:	4e6b      	ldr	r6, [pc, #428]	; (8008e34 <HAL_GPIO_Init+0x25c>)
 8008c88:	42b0      	cmp	r0, r6
 8008c8a:	f000 80b2 	beq.w	8008df2 <HAL_GPIO_Init+0x21a>
 8008c8e:	4e6a      	ldr	r6, [pc, #424]	; (8008e38 <HAL_GPIO_Init+0x260>)
 8008c90:	42b0      	cmp	r0, r6
 8008c92:	f000 80b4 	beq.w	8008dfe <HAL_GPIO_Init+0x226>
 8008c96:	4e69      	ldr	r6, [pc, #420]	; (8008e3c <HAL_GPIO_Init+0x264>)
 8008c98:	42b0      	cmp	r0, r6
 8008c9a:	f000 80a4 	beq.w	8008de6 <HAL_GPIO_Init+0x20e>
 8008c9e:	4e68      	ldr	r6, [pc, #416]	; (8008e40 <HAL_GPIO_Init+0x268>)
 8008ca0:	42b0      	cmp	r0, r6
 8008ca2:	f000 80b2 	beq.w	8008e0a <HAL_GPIO_Init+0x232>
 8008ca6:	4e67      	ldr	r6, [pc, #412]	; (8008e44 <HAL_GPIO_Init+0x26c>)
 8008ca8:	42b0      	cmp	r0, r6
 8008caa:	f000 80b4 	beq.w	8008e16 <HAL_GPIO_Init+0x23e>
 8008cae:	4e66      	ldr	r6, [pc, #408]	; (8008e48 <HAL_GPIO_Init+0x270>)
 8008cb0:	42b0      	cmp	r0, r6
 8008cb2:	bf0c      	ite	eq
 8008cb4:	2609      	moveq	r6, #9
 8008cb6:	260a      	movne	r6, #10
 8008cb8:	fa06 f909 	lsl.w	r9, r6, r9
 8008cbc:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008cc0:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008cc8:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8008cca:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
 8008cce:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8008cd0:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8008cd4:	bf54      	ite	pl
 8008cd6:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 8008cda:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 8008cde:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ce0:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
 8008ce2:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8008ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8008ce8:	bf54      	ite	pl
 8008cea:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 8008cee:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
 8008cf2:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008cf4:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008cf8:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8008cfe:	bf54      	ite	pl
 8008d00:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 8008d04:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008d08:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008d0a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8008d0e:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8008d12:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 8008d16:	bf54      	ite	pl
 8008d18:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 8008d1c:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8008d20:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 8008d24:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d26:	f10c 0c02 	add.w	ip, ip, #2
 8008d2a:	fa34 f203 	lsrs.w	r2, r4, r3
 8008d2e:	f47f af5e 	bne.w	8008bee <HAL_GPIO_Init+0x16>
  }
}
 8008d32:	b003      	add	sp, #12
 8008d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008d38:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 8008d3c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008d3e:	fa08 f80c 	lsl.w	r8, r8, ip
 8008d42:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d46:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008d48:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d4c:	fa06 f60c 	lsl.w	r6, r6, ip
 8008d50:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8008d54:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d56:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8008d5a:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d5e:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008d60:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d64:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8008d66:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8008d68:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d6a:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d6e:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008d70:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d74:	fa06 f60c 	lsl.w	r6, r6, ip
 8008d78:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8008d7c:	fa09 f20c 	lsl.w	r2, r9, ip
 8008d80:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d82:	f47f af4a 	bne.w	8008c1a <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008d86:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8008d8a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008d8e:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 8008d92:	260f      	movs	r6, #15
 8008d94:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8008d98:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
 8008d9c:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008da0:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008da4:	690e      	ldr	r6, [r1, #16]
 8008da6:	fa06 f60b 	lsl.w	r6, r6, fp
 8008daa:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8008dae:	f8c9 6020 	str.w	r6, [r9, #32]
 8008db2:	e732      	b.n	8008c1a <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008db4:	f04f 0803 	mov.w	r8, #3
 8008db8:	fa08 f80c 	lsl.w	r8, r8, ip
 8008dbc:	ea6f 0808 	mvn.w	r8, r8
 8008dc0:	e7d2      	b.n	8008d68 <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008dc2:	2603      	movs	r6, #3
 8008dc4:	fa06 f909 	lsl.w	r9, r6, r9
 8008dc8:	ea42 0209 	orr.w	r2, r2, r9
 8008dcc:	e778      	b.n	8008cc0 <HAL_GPIO_Init+0xe8>
 8008dce:	2601      	movs	r6, #1
 8008dd0:	fa06 f909 	lsl.w	r9, r6, r9
 8008dd4:	ea42 0209 	orr.w	r2, r2, r9
 8008dd8:	e772      	b.n	8008cc0 <HAL_GPIO_Init+0xe8>
 8008dda:	2602      	movs	r6, #2
 8008ddc:	fa06 f909 	lsl.w	r9, r6, r9
 8008de0:	ea42 0209 	orr.w	r2, r2, r9
 8008de4:	e76c      	b.n	8008cc0 <HAL_GPIO_Init+0xe8>
 8008de6:	2606      	movs	r6, #6
 8008de8:	fa06 f909 	lsl.w	r9, r6, r9
 8008dec:	ea42 0209 	orr.w	r2, r2, r9
 8008df0:	e766      	b.n	8008cc0 <HAL_GPIO_Init+0xe8>
 8008df2:	2604      	movs	r6, #4
 8008df4:	fa06 f909 	lsl.w	r9, r6, r9
 8008df8:	ea42 0209 	orr.w	r2, r2, r9
 8008dfc:	e760      	b.n	8008cc0 <HAL_GPIO_Init+0xe8>
 8008dfe:	2605      	movs	r6, #5
 8008e00:	fa06 f909 	lsl.w	r9, r6, r9
 8008e04:	ea42 0209 	orr.w	r2, r2, r9
 8008e08:	e75a      	b.n	8008cc0 <HAL_GPIO_Init+0xe8>
 8008e0a:	2607      	movs	r6, #7
 8008e0c:	fa06 f909 	lsl.w	r9, r6, r9
 8008e10:	ea42 0209 	orr.w	r2, r2, r9
 8008e14:	e754      	b.n	8008cc0 <HAL_GPIO_Init+0xe8>
 8008e16:	2608      	movs	r6, #8
 8008e18:	fa06 f909 	lsl.w	r9, r6, r9
 8008e1c:	ea42 0209 	orr.w	r2, r2, r9
 8008e20:	e74e      	b.n	8008cc0 <HAL_GPIO_Init+0xe8>
 8008e22:	bf00      	nop
 8008e24:	58024400 	.word	0x58024400
 8008e28:	58020000 	.word	0x58020000
 8008e2c:	58020800 	.word	0x58020800
 8008e30:	58020c00 	.word	0x58020c00
 8008e34:	58021000 	.word	0x58021000
 8008e38:	58021400 	.word	0x58021400
 8008e3c:	58021800 	.word	0x58021800
 8008e40:	58021c00 	.word	0x58021c00
 8008e44:	58022000 	.word	0x58022000
 8008e48:	58022400 	.word	0x58022400

08008e4c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008e4c:	6903      	ldr	r3, [r0, #16]
 8008e4e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008e50:	bf14      	ite	ne
 8008e52:	2001      	movne	r0, #1
 8008e54:	2000      	moveq	r0, #0
 8008e56:	4770      	bx	lr

08008e58 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e58:	b902      	cbnz	r2, 8008e5c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008e5a:	0409      	lsls	r1, r1, #16
 8008e5c:	6181      	str	r1, [r0, #24]
  }
}
 8008e5e:	4770      	bx	lr

08008e60 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e64:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8008e68:	4201      	tst	r1, r0
 8008e6a:	d100      	bne.n	8008e6e <HAL_GPIO_EXTI_IRQHandler+0xe>
 8008e6c:	4770      	bx	lr
{
 8008e6e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008e70:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008e74:	f7f8 fafc 	bl	8001470 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008e78:	bd08      	pop	{r3, pc}
 8008e7a:	bf00      	nop

08008e7c <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d05e      	beq.n	8008f3e <HAL_LPTIM_Init+0xc2>
{
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8008e82:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8008e86:	4604      	mov	r4, r0
 8008e88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d051      	beq.n	8008f34 <HAL_LPTIM_Init+0xb8>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008e90:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008e92:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008e94:	e9d4 1500 	ldrd	r1, r5, [r4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008e98:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008e9c:	2d01      	cmp	r5, #1
  tmpcfgr = hlptim->Instance->CFGR;
 8008e9e:	68c8      	ldr	r0, [r1, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008ea0:	d03c      	beq.n	8008f1c <HAL_LPTIM_Init+0xa0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008ea2:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 8008ea6:	d039      	beq.n	8008f1c <HAL_LPTIM_Init+0xa0>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008ea8:	6962      	ldr	r2, [r4, #20]
 8008eaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d003      	beq.n	8008eba <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8008eb2:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8008eb6:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008eba:	68a3      	ldr	r3, [r4, #8]
              hlptim->Init.Clock.Prescaler |
 8008ebc:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008ebe:	432b      	orrs	r3, r5
              hlptim->Init.Clock.Prescaler |
 8008ec0:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 8008ec2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ec4:	4333      	orrs	r3, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008ec6:	4e22      	ldr	r6, [pc, #136]	; (8008f50 <HAL_LPTIM_Init+0xd4>)
              hlptim->Init.UpdateMode      |
 8008ec8:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008eca:	4006      	ands	r6, r0
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008ecc:	4333      	orrs	r3, r6
              hlptim->Init.CounterSource);

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8008ece:	b1ed      	cbz	r5, 8008f0c <HAL_LPTIM_Init+0x90>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008ed0:	2d01      	cmp	r5, #1
 8008ed2:	d11f      	bne.n	8008f14 <HAL_LPTIM_Init+0x98>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008ed4:	e9d4 0503 	ldrd	r0, r5, [r4, #12]
 8008ed8:	4328      	orrs	r0, r5
 8008eda:	4303      	orrs	r3, r0
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008edc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008ee0:	4282      	cmp	r2, r0
 8008ee2:	d004      	beq.n	8008eee <HAL_LPTIM_Init+0x72>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008ee4:	69a0      	ldr	r0, [r4, #24]
 8008ee6:	4302      	orrs	r2, r0
                hlptim->Init.Trigger.ActiveEdge |
 8008ee8:	69e0      	ldr	r0, [r4, #28]
 8008eea:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008eec:	4313      	orrs	r3, r2

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8008eee:	4a19      	ldr	r2, [pc, #100]	; (8008f54 <HAL_LPTIM_Init+0xd8>)
  hlptim->Instance->CFGR = tmpcfgr;
 8008ef0:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8008ef2:	4291      	cmp	r1, r2
 8008ef4:	d015      	beq.n	8008f22 <HAL_LPTIM_Init+0xa6>
 8008ef6:	4b18      	ldr	r3, [pc, #96]	; (8008f58 <HAL_LPTIM_Init+0xdc>)
 8008ef8:	4299      	cmp	r1, r3
 8008efa:	d012      	beq.n	8008f22 <HAL_LPTIM_Init+0xa6>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8008efc:	4b17      	ldr	r3, [pc, #92]	; (8008f5c <HAL_LPTIM_Init+0xe0>)
 8008efe:	4299      	cmp	r1, r3
 8008f00:	d01f      	beq.n	8008f42 <HAL_LPTIM_Init+0xc6>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008f02:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8008f04:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008f06:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8008f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008f0c:	69e0      	ldr	r0, [r4, #28]
 8008f0e:	6925      	ldr	r5, [r4, #16]
 8008f10:	4328      	orrs	r0, r5
 8008f12:	4303      	orrs	r3, r0
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008f14:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 8008f18:	d1e0      	bne.n	8008edc <HAL_LPTIM_Init+0x60>
 8008f1a:	e7db      	b.n	8008ed4 <HAL_LPTIM_Init+0x58>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8008f1c:	f020 001e 	bic.w	r0, r0, #30
 8008f20:	e7c2      	b.n	8008ea8 <HAL_LPTIM_Init+0x2c>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8008f22:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 8008f26:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8008f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 8008f34:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 8008f38:	f7fc fbbe 	bl	80056b8 <HAL_LPTIM_MspInit>
 8008f3c:	e7a8      	b.n	8008e90 <HAL_LPTIM_Init+0x14>
    return HAL_ERROR;
 8008f3e:	2001      	movs	r0, #1
}
 8008f40:	4770      	bx	lr
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8008f42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8008f44:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8008f46:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8008f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f50:	ff19f1fe 	.word	0xff19f1fe
 8008f54:	40002400 	.word	0x40002400
 8008f58:	58002400 	.word	0x58002400
 8008f5c:	58002800 	.word	0x58002800

08008f60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f62:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008f64:	2800      	cmp	r0, #0
 8008f66:	f000 8088 	beq.w	800907a <HAL_PCD_Init+0x11a>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008f6a:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
 8008f6e:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8008f70:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008f72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d079      	beq.n	800906e <HAL_PCD_Init+0x10e>
 8008f7a:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008f7c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008f7e:	462e      	mov	r6, r5
 8008f80:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8008f82:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008f86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008f88:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008f8a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8008f8e:	bf08      	it	eq
 8008f90:	60eb      	streq	r3, [r5, #12]
  __HAL_PCD_DISABLE(hpcd);
 8008f92:	f004 fdcb 	bl	800db2c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008f96:	f856 eb10 	ldr.w	lr, [r6], #16
 8008f9a:	46b4      	mov	ip, r6
 8008f9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fa2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fa8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8008fac:	e884 0003 	stmia.w	r4, {r0, r1}
 8008fb0:	4670      	mov	r0, lr
 8008fb2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8008fb6:	f004 fc95 	bl	800d8e4 <USB_CoreInit>
 8008fba:	4604      	mov	r4, r0
 8008fbc:	b130      	cbz	r0, 8008fcc <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8008fbe:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008fc0:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8008fc2:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008fc4:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
}
 8008fc8:	b00b      	add	sp, #44	; 0x2c
 8008fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008fcc:	4601      	mov	r1, r0
 8008fce:	6828      	ldr	r0, [r5, #0]
 8008fd0:	f004 fdb4 	bl	800db3c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008fd4:	6868      	ldr	r0, [r5, #4]
 8008fd6:	b358      	cbz	r0, 8009030 <HAL_PCD_Init+0xd0>
 8008fd8:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8008fda:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008fde:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8008fe0:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008fe4:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 8008fe8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8008fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008ff0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ff4:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 8008ff8:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ffc:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008ffe:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 8009002:	64d9      	str	r1, [r3, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009004:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009008:	d3ea      	bcc.n	8008fe0 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 800900a:	2200      	movs	r2, #0
 800900c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009010:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8009012:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 8009016:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800901a:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800901c:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009020:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009022:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009026:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800902a:	e9c3 22a1 	strd	r2, r2, [r3, #644]	; 0x284
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800902e:	d3ed      	bcc.n	800900c <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009030:	466c      	mov	r4, sp
 8009032:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009036:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800903a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800903e:	e884 0003 	stmia.w	r4, {r0, r1}
 8009042:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8009046:	6828      	ldr	r0, [r5, #0]
 8009048:	f004 fdae 	bl	800dba8 <USB_DevInit>
 800904c:	4604      	mov	r4, r0
 800904e:	2800      	cmp	r0, #0
 8009050:	d1b5      	bne.n	8008fbe <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 8009052:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8009054:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8009056:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800905a:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800905c:	f885 24bd 	strb.w	r2, [r5, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
 8009060:	d00f      	beq.n	8009082 <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 8009062:	6828      	ldr	r0, [r5, #0]
 8009064:	f005 f9d6 	bl	800e414 <USB_DevDisconnect>
}
 8009068:	4620      	mov	r0, r4
 800906a:	b00b      	add	sp, #44	; 0x2c
 800906c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800906e:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 8009072:	f006 fb31 	bl	800f6d8 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8009076:	6828      	ldr	r0, [r5, #0]
 8009078:	e780      	b.n	8008f7c <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 800907a:	2401      	movs	r4, #1
}
 800907c:	4620      	mov	r0, r4
 800907e:	b00b      	add	sp, #44	; 0x2c
 8009080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009082:	4628      	mov	r0, r5
 8009084:	f000 ff50 	bl	8009f28 <HAL_PCDEx_ActivateLPM>
 8009088:	e7eb      	b.n	8009062 <HAL_PCD_Init+0x102>
 800908a:	bf00      	nop

0800908c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800908c:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 800908e:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
{
 8009092:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009094:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009096:	2b01      	cmp	r3, #1
 8009098:	d017      	beq.n	80090ca <HAL_PCD_Start+0x3e>
 800909a:	2301      	movs	r3, #1
 800909c:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80090a0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80090a2:	05db      	lsls	r3, r3, #23
 80090a4:	d402      	bmi.n	80090ac <HAL_PCD_Start+0x20>
 80090a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d009      	beq.n	80090c0 <HAL_PCD_Start+0x34>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 80090ac:	f004 fd36 	bl	800db1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80090b0:	6820      	ldr	r0, [r4, #0]
 80090b2:	f005 f99f 	bl	800e3f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80090b6:	2300      	movs	r3, #0

  return HAL_OK;
 80090b8:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 80090ba:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 80090be:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80090c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80090c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090c6:	6383      	str	r3, [r0, #56]	; 0x38
 80090c8:	e7f0      	b.n	80090ac <HAL_PCD_Start+0x20>
  __HAL_LOCK(hpcd);
 80090ca:	2002      	movs	r0, #2
}
 80090cc:	bd10      	pop	{r4, pc}
 80090ce:	bf00      	nop

080090d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80090d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80090d4:	6805      	ldr	r5, [r0, #0]
{
 80090d6:	b089      	sub	sp, #36	; 0x24
 80090d8:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80090da:	4628      	mov	r0, r5
 80090dc:	f005 f9d8 	bl	800e490 <USB_GetMode>
 80090e0:	b110      	cbz	r0, 80090e8 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
    }
  }
}
 80090e2:	b009      	add	sp, #36	; 0x24
 80090e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80090e8:	4683      	mov	fp, r0
 80090ea:	6820      	ldr	r0, [r4, #0]
 80090ec:	f005 f9a2 	bl	800e434 <USB_ReadInterrupts>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d0f6      	beq.n	80090e2 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80090f4:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 80090f8:	f505 6200 	add.w	r2, r5, #2048	; 0x800
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80090fc:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80090fe:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8009102:	9202      	str	r2, [sp, #8]
 8009104:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009108:	f005 f994 	bl	800e434 <USB_ReadInterrupts>
 800910c:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009110:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009112:	d003      	beq.n	800911c <HAL_PCD_IRQHandler+0x4c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009114:	6943      	ldr	r3, [r0, #20]
 8009116:	f003 0302 	and.w	r3, r3, #2
 800911a:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800911c:	f005 f98a 	bl	800e434 <USB_ReadInterrupts>
 8009120:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009124:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009126:	d012      	beq.n	800914e <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009128:	6983      	ldr	r3, [r0, #24]
 800912a:	f023 0310 	bic.w	r3, r3, #16
 800912e:	6183      	str	r3, [r0, #24]
      RegVal = USBx->GRXSTSP;
 8009130:	6a2e      	ldr	r6, [r5, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009132:	f3c6 4343 	ubfx	r3, r6, #17, #4
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009136:	f006 070f 	and.w	r7, r6, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800913a:	2b02      	cmp	r3, #2
 800913c:	f000 83e3 	beq.w	8009906 <HAL_PCD_IRQHandler+0x836>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009140:	2b06      	cmp	r3, #6
 8009142:	f000 8322 	beq.w	800978a <HAL_PCD_IRQHandler+0x6ba>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009146:	6983      	ldr	r3, [r0, #24]
 8009148:	f043 0310 	orr.w	r3, r3, #16
 800914c:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800914e:	f005 f971 	bl	800e434 <USB_ReadInterrupts>
 8009152:	0307      	lsls	r7, r0, #12
 8009154:	f100 8280 	bmi.w	8009658 <HAL_PCD_IRQHandler+0x588>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009158:	6820      	ldr	r0, [r4, #0]
 800915a:	f005 f96b 	bl	800e434 <USB_ReadInterrupts>
 800915e:	0346      	lsls	r6, r0, #13
 8009160:	f100 8228 	bmi.w	80095b4 <HAL_PCD_IRQHandler+0x4e4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009164:	6820      	ldr	r0, [r4, #0]
 8009166:	f005 f965 	bl	800e434 <USB_ReadInterrupts>
 800916a:	2800      	cmp	r0, #0
 800916c:	f2c0 819a 	blt.w	80094a4 <HAL_PCD_IRQHandler+0x3d4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009170:	6820      	ldr	r0, [r4, #0]
 8009172:	f005 f95f 	bl	800e434 <USB_ReadInterrupts>
 8009176:	0503      	lsls	r3, r0, #20
 8009178:	f100 8157 	bmi.w	800942a <HAL_PCD_IRQHandler+0x35a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800917c:	6820      	ldr	r0, [r4, #0]
 800917e:	f005 f959 	bl	800e434 <USB_ReadInterrupts>
 8009182:	0106      	lsls	r6, r0, #4
 8009184:	d514      	bpl.n	80091b0 <HAL_PCD_IRQHandler+0xe0>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009186:	6822      	ldr	r2, [r4, #0]
 8009188:	6953      	ldr	r3, [r2, #20]
 800918a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800918e:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8009190:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 8009194:	2b00      	cmp	r3, #0
 8009196:	f040 82ab 	bne.w	80096f0 <HAL_PCD_IRQHandler+0x620>
        hpcd->LPM_State = LPM_L1;
 800919a:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800919c:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800919e:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80091a2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80091a4:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80091a8:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80091ac:	f000 fed4 	bl	8009f58 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80091b0:	6820      	ldr	r0, [r4, #0]
 80091b2:	f005 f93f 	bl	800e434 <USB_ReadInterrupts>
 80091b6:	04c0      	lsls	r0, r0, #19
 80091b8:	f100 819e 	bmi.w	80094f8 <HAL_PCD_IRQHandler+0x428>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80091bc:	6820      	ldr	r0, [r4, #0]
 80091be:	f005 f939 	bl	800e434 <USB_ReadInterrupts>
 80091c2:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 80091c6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80091c8:	f040 817f 	bne.w	80094ca <HAL_PCD_IRQHandler+0x3fa>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80091cc:	f005 f932 	bl	800e434 <USB_ReadInterrupts>
 80091d0:	0701      	lsls	r1, r0, #28
 80091d2:	f100 81e6 	bmi.w	80095a2 <HAL_PCD_IRQHandler+0x4d2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80091d6:	6820      	ldr	r0, [r4, #0]
 80091d8:	f005 f92c 	bl	800e434 <USB_ReadInterrupts>
 80091dc:	0602      	lsls	r2, r0, #24
 80091de:	d571      	bpl.n	80092c4 <HAL_PCD_IRQHandler+0x1f4>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80091e0:	69aa      	ldr	r2, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091e2:	6863      	ldr	r3, [r4, #4]
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80091e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091e8:	2b01      	cmp	r3, #1
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80091ea:	61aa      	str	r2, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091ec:	d96a      	bls.n	80092c4 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80091ee:	f894 22a3 	ldrb.w	r2, [r4, #675]	; 0x2a3
 80091f2:	2a01      	cmp	r2, #1
 80091f4:	f000 83e8 	beq.w	80099c8 <HAL_PCD_IRQHandler+0x8f8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d963      	bls.n	80092c4 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80091fc:	f894 22c7 	ldrb.w	r2, [r4, #711]	; 0x2c7
 8009200:	2a01      	cmp	r2, #1
 8009202:	f000 83fc 	beq.w	80099fe <HAL_PCD_IRQHandler+0x92e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009206:	2b03      	cmp	r3, #3
 8009208:	d95c      	bls.n	80092c4 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800920a:	f894 22eb 	ldrb.w	r2, [r4, #747]	; 0x2eb
 800920e:	2a01      	cmp	r2, #1
 8009210:	f000 82b4 	beq.w	800977c <HAL_PCD_IRQHandler+0x6ac>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009214:	2b04      	cmp	r3, #4
 8009216:	d955      	bls.n	80092c4 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009218:	f894 230f 	ldrb.w	r2, [r4, #783]	; 0x30f
 800921c:	2a01      	cmp	r2, #1
 800921e:	f000 82c7 	beq.w	80097b0 <HAL_PCD_IRQHandler+0x6e0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009222:	2b05      	cmp	r3, #5
 8009224:	d94e      	bls.n	80092c4 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009226:	f894 2333 	ldrb.w	r2, [r4, #819]	; 0x333
 800922a:	2a01      	cmp	r2, #1
 800922c:	f000 8424 	beq.w	8009a78 <HAL_PCD_IRQHandler+0x9a8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009230:	2b06      	cmp	r3, #6
 8009232:	d947      	bls.n	80092c4 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009234:	f894 2357 	ldrb.w	r2, [r4, #855]	; 0x357
 8009238:	2a01      	cmp	r2, #1
 800923a:	f000 8431 	beq.w	8009aa0 <HAL_PCD_IRQHandler+0x9d0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800923e:	2b07      	cmp	r3, #7
 8009240:	d940      	bls.n	80092c4 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009242:	f894 237b 	ldrb.w	r2, [r4, #891]	; 0x37b
 8009246:	2a01      	cmp	r2, #1
 8009248:	f000 8448 	beq.w	8009adc <HAL_PCD_IRQHandler+0xa0c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800924c:	2b08      	cmp	r3, #8
 800924e:	d939      	bls.n	80092c4 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009250:	f894 239f 	ldrb.w	r2, [r4, #927]	; 0x39f
 8009254:	2a01      	cmp	r2, #1
 8009256:	f000 8455 	beq.w	8009b04 <HAL_PCD_IRQHandler+0xa34>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800925a:	2b09      	cmp	r3, #9
 800925c:	d932      	bls.n	80092c4 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800925e:	f894 23c3 	ldrb.w	r2, [r4, #963]	; 0x3c3
 8009262:	2a01      	cmp	r2, #1
 8009264:	f000 8462 	beq.w	8009b2c <HAL_PCD_IRQHandler+0xa5c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009268:	2b0a      	cmp	r3, #10
 800926a:	d92b      	bls.n	80092c4 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800926c:	f894 23e7 	ldrb.w	r2, [r4, #999]	; 0x3e7
 8009270:	2a01      	cmp	r2, #1
 8009272:	f000 846f 	beq.w	8009b54 <HAL_PCD_IRQHandler+0xa84>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009276:	2b0b      	cmp	r3, #11
 8009278:	d924      	bls.n	80092c4 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800927a:	f894 240b 	ldrb.w	r2, [r4, #1035]	; 0x40b
 800927e:	2a01      	cmp	r2, #1
 8009280:	f000 847c 	beq.w	8009b7c <HAL_PCD_IRQHandler+0xaac>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009284:	2b0c      	cmp	r3, #12
 8009286:	d91d      	bls.n	80092c4 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009288:	f894 242f 	ldrb.w	r2, [r4, #1071]	; 0x42f
 800928c:	2a01      	cmp	r2, #1
 800928e:	f000 847d 	beq.w	8009b8c <HAL_PCD_IRQHandler+0xabc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009292:	2b0d      	cmp	r3, #13
 8009294:	d916      	bls.n	80092c4 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009296:	f894 2453 	ldrb.w	r2, [r4, #1107]	; 0x453
 800929a:	2a01      	cmp	r2, #1
 800929c:	f000 849d 	beq.w	8009bda <HAL_PCD_IRQHandler+0xb0a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80092a0:	2b0e      	cmp	r3, #14
 80092a2:	d90f      	bls.n	80092c4 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80092a4:	f894 2477 	ldrb.w	r2, [r4, #1143]	; 0x477
 80092a8:	2a01      	cmp	r2, #1
 80092aa:	f000 84a4 	beq.w	8009bf6 <HAL_PCD_IRQHandler+0xb26>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80092ae:	2b0f      	cmp	r3, #15
 80092b0:	d908      	bls.n	80092c4 <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80092b2:	f894 349b 	ldrb.w	r3, [r4, #1179]	; 0x49b
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d104      	bne.n	80092c4 <HAL_PCD_IRQHandler+0x1f4>
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80092ba:	f504 6193 	add.w	r1, r4, #1176	; 0x498
 80092be:	6820      	ldr	r0, [r4, #0]
 80092c0:	f004 ffa6 	bl	800e210 <USB_EPStopXfer>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80092c4:	6820      	ldr	r0, [r4, #0]
 80092c6:	f005 f8b5 	bl	800e434 <USB_ReadInterrupts>
 80092ca:	02c3      	lsls	r3, r0, #11
 80092cc:	f140 80ab 	bpl.w	8009426 <HAL_PCD_IRQHandler+0x356>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80092d0:	6863      	ldr	r3, [r4, #4]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	f240 8089 	bls.w	80093ea <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80092d8:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80092dc:	f8d5 1920 	ldr.w	r1, [r5, #2336]	; 0x920
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80092e0:	2a01      	cmp	r2, #1
 80092e2:	f000 8214 	beq.w	800970e <HAL_PCD_IRQHandler+0x63e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d97f      	bls.n	80093ea <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80092ea:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80092ee:	f8d5 1940 	ldr.w	r1, [r5, #2368]	; 0x940
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80092f2:	2a01      	cmp	r2, #1
 80092f4:	f000 821e 	beq.w	8009734 <HAL_PCD_IRQHandler+0x664>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	d976      	bls.n	80093ea <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80092fc:	f894 20ac 	ldrb.w	r2, [r4, #172]	; 0xac
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009300:	f8d5 1960 	ldr.w	r1, [r5, #2400]	; 0x960
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009304:	2a01      	cmp	r2, #1
 8009306:	f000 8221 	beq.w	800974c <HAL_PCD_IRQHandler+0x67c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800930a:	2b04      	cmp	r3, #4
 800930c:	d96d      	bls.n	80093ea <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800930e:	f894 20d0 	ldrb.w	r2, [r4, #208]	; 0xd0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009312:	f8d5 1980 	ldr.w	r1, [r5, #2432]	; 0x980
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009316:	2a01      	cmp	r2, #1
 8009318:	f000 8224 	beq.w	8009764 <HAL_PCD_IRQHandler+0x694>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800931c:	2b05      	cmp	r3, #5
 800931e:	d964      	bls.n	80093ea <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009320:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009324:	f8d5 19a0 	ldr.w	r1, [r5, #2464]	; 0x9a0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009328:	2a01      	cmp	r2, #1
 800932a:	f000 8341 	beq.w	80099b0 <HAL_PCD_IRQHandler+0x8e0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800932e:	2b06      	cmp	r3, #6
 8009330:	d95b      	bls.n	80093ea <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009332:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009336:	f8d5 19c0 	ldr.w	r1, [r5, #2496]	; 0x9c0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800933a:	2a01      	cmp	r2, #1
 800933c:	f000 8353 	beq.w	80099e6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009340:	2b07      	cmp	r3, #7
 8009342:	d952      	bls.n	80093ea <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009344:	f894 213c 	ldrb.w	r2, [r4, #316]	; 0x13c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009348:	f8d5 19e0 	ldr.w	r1, [r5, #2528]	; 0x9e0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800934c:	2a01      	cmp	r2, #1
 800934e:	f000 835e 	beq.w	8009a0e <HAL_PCD_IRQHandler+0x93e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009352:	2b08      	cmp	r3, #8
 8009354:	d949      	bls.n	80093ea <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009356:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800935a:	f8d5 1a00 	ldr.w	r1, [r5, #2560]	; 0xa00
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800935e:	2a01      	cmp	r2, #1
 8009360:	f000 8361 	beq.w	8009a26 <HAL_PCD_IRQHandler+0x956>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009364:	2b09      	cmp	r3, #9
 8009366:	d940      	bls.n	80093ea <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009368:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800936c:	f8d5 1a20 	ldr.w	r1, [r5, #2592]	; 0xa20
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009370:	2a01      	cmp	r2, #1
 8009372:	f000 836c 	beq.w	8009a4e <HAL_PCD_IRQHandler+0x97e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009376:	2b0a      	cmp	r3, #10
 8009378:	d937      	bls.n	80093ea <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800937a:	f894 21a8 	ldrb.w	r2, [r4, #424]	; 0x1a8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800937e:	f8d5 1a40 	ldr.w	r1, [r5, #2624]	; 0xa40
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009382:	2a01      	cmp	r2, #1
 8009384:	f000 8380 	beq.w	8009a88 <HAL_PCD_IRQHandler+0x9b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009388:	2b0b      	cmp	r3, #11
 800938a:	d92e      	bls.n	80093ea <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800938c:	f894 21cc 	ldrb.w	r2, [r4, #460]	; 0x1cc
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009390:	f8d5 1a60 	ldr.w	r1, [r5, #2656]	; 0xa60
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009394:	2a01      	cmp	r2, #1
 8009396:	f000 8395 	beq.w	8009ac4 <HAL_PCD_IRQHandler+0x9f4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800939a:	2b0c      	cmp	r3, #12
 800939c:	d925      	bls.n	80093ea <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800939e:	f894 21f0 	ldrb.w	r2, [r4, #496]	; 0x1f0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80093a2:	f8d5 1a80 	ldr.w	r1, [r5, #2688]	; 0xa80
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80093a6:	2a01      	cmp	r2, #1
 80093a8:	f000 83a0 	beq.w	8009aec <HAL_PCD_IRQHandler+0xa1c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80093ac:	2b0d      	cmp	r3, #13
 80093ae:	d91c      	bls.n	80093ea <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80093b0:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80093b4:	f8d5 1aa0 	ldr.w	r1, [r5, #2720]	; 0xaa0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80093b8:	2a01      	cmp	r2, #1
 80093ba:	f000 83ab 	beq.w	8009b14 <HAL_PCD_IRQHandler+0xa44>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80093be:	2b0e      	cmp	r3, #14
 80093c0:	d913      	bls.n	80093ea <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80093c2:	f894 2238 	ldrb.w	r2, [r4, #568]	; 0x238
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80093c6:	f8d5 1ac0 	ldr.w	r1, [r5, #2752]	; 0xac0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80093ca:	2a01      	cmp	r2, #1
 80093cc:	f000 83b6 	beq.w	8009b3c <HAL_PCD_IRQHandler+0xa6c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80093d0:	2b0f      	cmp	r3, #15
 80093d2:	d90a      	bls.n	80093ea <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80093d4:	f894 225c 	ldrb.w	r2, [r4, #604]	; 0x25c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80093d8:	f8d5 1ae0 	ldr.w	r1, [r5, #2784]	; 0xae0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80093dc:	2a01      	cmp	r2, #1
 80093de:	f000 83c1 	beq.w	8009b64 <HAL_PCD_IRQHandler+0xa94>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80093e2:	2b10      	cmp	r3, #16
 80093e4:	d901      	bls.n	80093ea <HAL_PCD_IRQHandler+0x31a>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80093e6:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80093ea:	6820      	ldr	r0, [r4, #0]
 80093ec:	6943      	ldr	r3, [r0, #20]
 80093ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093f2:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80093f4:	f005 f81e 	bl	800e434 <USB_ReadInterrupts>
 80093f8:	0287      	lsls	r7, r0, #10
 80093fa:	d421      	bmi.n	8009440 <HAL_PCD_IRQHandler+0x370>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80093fc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80093fe:	f005 f819 	bl	800e434 <USB_ReadInterrupts>
 8009402:	0040      	lsls	r0, r0, #1
 8009404:	f100 80c4 	bmi.w	8009590 <HAL_PCD_IRQHandler+0x4c0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009408:	6820      	ldr	r0, [r4, #0]
 800940a:	f005 f813 	bl	800e434 <USB_ReadInterrupts>
 800940e:	0741      	lsls	r1, r0, #29
 8009410:	f57f ae67 	bpl.w	80090e2 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8009414:	6823      	ldr	r3, [r4, #0]
 8009416:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009418:	076a      	lsls	r2, r5, #29
 800941a:	f100 8295 	bmi.w	8009948 <HAL_PCD_IRQHandler+0x878>
      hpcd->Instance->GOTGINT |= RegVal;
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	432a      	orrs	r2, r5
 8009422:	605a      	str	r2, [r3, #4]
 8009424:	e65d      	b.n	80090e2 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009426:	6820      	ldr	r0, [r4, #0]
 8009428:	e7e4      	b.n	80093f4 <HAL_PCD_IRQHandler+0x324>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800942a:	9b02      	ldr	r3, [sp, #8]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	07df      	lsls	r7, r3, #31
 8009430:	f100 8286 	bmi.w	8009940 <HAL_PCD_IRQHandler+0x870>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009434:	6820      	ldr	r0, [r4, #0]
 8009436:	6943      	ldr	r3, [r0, #20]
 8009438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800943c:	6143      	str	r3, [r0, #20]
 800943e:	e69e      	b.n	800917e <HAL_PCD_IRQHandler+0xae>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009440:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8009444:	f1bc 0f01 	cmp.w	ip, #1
 8009448:	d926      	bls.n	8009498 <HAL_PCD_IRQHandler+0x3c8>
 800944a:	f505 6232 	add.w	r2, r5, #2848	; 0xb20
 800944e:	4623      	mov	r3, r4
 8009450:	2101      	movs	r1, #1
 8009452:	e004      	b.n	800945e <HAL_PCD_IRQHandler+0x38e>
 8009454:	3101      	adds	r1, #1
 8009456:	3220      	adds	r2, #32
 8009458:	3324      	adds	r3, #36	; 0x24
 800945a:	4561      	cmp	r1, ip
 800945c:	d01c      	beq.n	8009498 <HAL_PCD_IRQHandler+0x3c8>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800945e:	f893 02a4 	ldrb.w	r0, [r3, #676]	; 0x2a4
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009462:	6816      	ldr	r6, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009464:	2801      	cmp	r0, #1
 8009466:	d1f5      	bne.n	8009454 <HAL_PCD_IRQHandler+0x384>
 8009468:	2e00      	cmp	r6, #0
 800946a:	daf3      	bge.n	8009454 <HAL_PCD_IRQHandler+0x384>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800946c:	f8d4 74fc 	ldr.w	r7, [r4, #1276]	; 0x4fc
 8009470:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
 8009474:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009478:	42be      	cmp	r6, r7
 800947a:	d1eb      	bne.n	8009454 <HAL_PCD_IRQHandler+0x384>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800947c:	f883 02a3 	strb.w	r0, [r3, #675]	; 0x2a3
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009480:	69a8      	ldr	r0, [r5, #24]
 8009482:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8009486:	61a8      	str	r0, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009488:	6968      	ldr	r0, [r5, #20]
 800948a:	0606      	lsls	r6, r0, #24
 800948c:	d4e2      	bmi.n	8009454 <HAL_PCD_IRQHandler+0x384>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800948e:	9a02      	ldr	r2, [sp, #8]
 8009490:	6853      	ldr	r3, [r2, #4]
 8009492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009496:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009498:	6820      	ldr	r0, [r4, #0]
 800949a:	6943      	ldr	r3, [r0, #20]
 800949c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094a0:	6143      	str	r3, [r0, #20]
 80094a2:	e7ac      	b.n	80093fe <HAL_PCD_IRQHandler+0x32e>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80094a4:	9a02      	ldr	r2, [sp, #8]
 80094a6:	6853      	ldr	r3, [r2, #4]
 80094a8:	f023 0301 	bic.w	r3, r3, #1
 80094ac:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 80094ae:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	f000 8137 	beq.w	8009726 <HAL_PCD_IRQHandler+0x656>
        HAL_PCD_ResumeCallback(hpcd);
 80094b8:	4620      	mov	r0, r4
 80094ba:	f006 f9bb 	bl	800f834 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80094be:	6820      	ldr	r0, [r4, #0]
 80094c0:	6943      	ldr	r3, [r0, #20]
 80094c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094c6:	6143      	str	r3, [r0, #20]
 80094c8:	e653      	b.n	8009172 <HAL_PCD_IRQHandler+0xa2>
      (void)USB_ActivateSetup(hpcd->Instance);
 80094ca:	f004 ffe5 	bl	800e498 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80094ce:	6820      	ldr	r0, [r4, #0]
 80094d0:	f004 fca8 	bl	800de24 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80094d4:	6826      	ldr	r6, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80094d6:	6120      	str	r0, [r4, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80094d8:	f001 fafe 	bl	800aad8 <HAL_RCC_GetHCLKFreq>
 80094dc:	7c22      	ldrb	r2, [r4, #16]
 80094de:	4601      	mov	r1, r0
 80094e0:	4630      	mov	r0, r6
 80094e2:	f004 faa1 	bl	800da28 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80094e6:	4620      	mov	r0, r4
 80094e8:	f006 f976 	bl	800f7d8 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80094ec:	6820      	ldr	r0, [r4, #0]
 80094ee:	6943      	ldr	r3, [r0, #20]
 80094f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094f4:	6143      	str	r3, [r0, #20]
 80094f6:	e669      	b.n	80091cc <HAL_PCD_IRQHandler+0xfc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80094f8:	9a02      	ldr	r2, [sp, #8]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80094fa:	2110      	movs	r1, #16
 80094fc:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80094fe:	6853      	ldr	r3, [r2, #4]
 8009500:	f023 0301 	bic.w	r3, r3, #1
 8009504:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009506:	f004 fc63 	bl	800ddd0 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800950a:	6860      	ldr	r0, [r4, #4]
 800950c:	b1e0      	cbz	r0, 8009548 <HAL_PCD_IRQHandler+0x478>
 800950e:	f505 6310 	add.w	r3, r5, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009512:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8009516:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009518:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800951c:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800951e:	3320      	adds	r3, #32
 8009520:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009522:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8009526:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800952a:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800952e:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8009532:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8009536:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800953a:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800953e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8009542:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009546:	d1e6      	bne.n	8009516 <HAL_PCD_IRQHandler+0x446>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009548:	9902      	ldr	r1, [sp, #8]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800954a:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800954c:	69cb      	ldr	r3, [r1, #28]
 800954e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009552:	61cb      	str	r3, [r1, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009554:	2a00      	cmp	r2, #0
 8009556:	f040 80cf 	bne.w	80096f8 <HAL_PCD_IRQHandler+0x628>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800955a:	694a      	ldr	r2, [r1, #20]
 800955c:	f242 032b 	movw	r3, #8235	; 0x202b
 8009560:	4313      	orrs	r3, r2
 8009562:	614b      	str	r3, [r1, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009564:	690b      	ldr	r3, [r1, #16]
 8009566:	f043 030b 	orr.w	r3, r3, #11
 800956a:	610b      	str	r3, [r1, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800956c:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009570:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8009574:	7b21      	ldrb	r1, [r4, #12]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009576:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800957a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800957c:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009580:	f004 ffa0 	bl	800e4c4 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009584:	6820      	ldr	r0, [r4, #0]
 8009586:	6943      	ldr	r3, [r0, #20]
 8009588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800958c:	6143      	str	r3, [r0, #20]
 800958e:	e616      	b.n	80091be <HAL_PCD_IRQHandler+0xee>
      HAL_PCD_ConnectCallback(hpcd);
 8009590:	4620      	mov	r0, r4
 8009592:	f006 f95b 	bl	800f84c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009596:	6820      	ldr	r0, [r4, #0]
 8009598:	6943      	ldr	r3, [r0, #20]
 800959a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800959e:	6143      	str	r3, [r0, #20]
 80095a0:	e733      	b.n	800940a <HAL_PCD_IRQHandler+0x33a>
      HAL_PCD_SOFCallback(hpcd);
 80095a2:	4620      	mov	r0, r4
 80095a4:	f006 f914 	bl	800f7d0 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80095a8:	6820      	ldr	r0, [r4, #0]
 80095aa:	6943      	ldr	r3, [r0, #20]
 80095ac:	f003 0308 	and.w	r3, r3, #8
 80095b0:	6143      	str	r3, [r0, #20]
 80095b2:	e611      	b.n	80091d8 <HAL_PCD_IRQHandler+0x108>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80095b4:	6820      	ldr	r0, [r4, #0]
 80095b6:	f004 ff49 	bl	800e44c <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 80095ba:	4680      	mov	r8, r0
 80095bc:	2800      	cmp	r0, #0
 80095be:	f43f add1 	beq.w	8009164 <HAL_PCD_IRQHandler+0x94>
      epnum = 0U;
 80095c2:	f04f 0a00 	mov.w	sl, #0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80095c6:	6820      	ldr	r0, [r4, #0]
 80095c8:	4627      	mov	r7, r4
 80095ca:	f505 6910 	add.w	r9, r5, #2304	; 0x900
              ep->is_iso_incomplete = 0U;
 80095ce:	4656      	mov	r6, sl
 80095d0:	9503      	str	r5, [sp, #12]
 80095d2:	f8cd b010 	str.w	fp, [sp, #16]
 80095d6:	e009      	b.n	80095ec <HAL_PCD_IRQHandler+0x51c>
      while (ep_intr != 0U)
 80095d8:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 80095dc:	f106 0601 	add.w	r6, r6, #1
      while (ep_intr != 0U)
 80095e0:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80095e4:	f109 0920 	add.w	r9, r9, #32
 80095e8:	f000 80ec 	beq.w	80097c4 <HAL_PCD_IRQHandler+0x6f4>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80095ec:	f018 0f01 	tst.w	r8, #1
 80095f0:	d0f2      	beq.n	80095d8 <HAL_PCD_IRQHandler+0x508>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80095f2:	fa5f fa86 	uxtb.w	sl, r6
 80095f6:	4651      	mov	r1, sl
 80095f8:	f004 ff3a 	bl	800e470 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80095fc:	07c1      	lsls	r1, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80095fe:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009600:	d513      	bpl.n	800962a <HAL_PCD_IRQHandler+0x55a>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009602:	9902      	ldr	r1, [sp, #8]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009604:	f006 030f 	and.w	r3, r6, #15
 8009608:	2201      	movs	r2, #1
 800960a:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800960c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800960e:	ea23 0302 	bic.w	r3, r3, r2
 8009612:	634b      	str	r3, [r1, #52]	; 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009614:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 8009616:	68e1      	ldr	r1, [r4, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009618:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800961c:	4299      	cmp	r1, r3
 800961e:	f000 8198 	beq.w	8009952 <HAL_PCD_IRQHandler+0x882>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009622:	4651      	mov	r1, sl
 8009624:	4620      	mov	r0, r4
 8009626:	f006 f8c9 	bl	800f7bc <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800962a:	072a      	lsls	r2, r5, #28
 800962c:	d502      	bpl.n	8009634 <HAL_PCD_IRQHandler+0x564>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800962e:	2308      	movs	r3, #8
 8009630:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009634:	06eb      	lsls	r3, r5, #27
 8009636:	d502      	bpl.n	800963e <HAL_PCD_IRQHandler+0x56e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009638:	2310      	movs	r3, #16
 800963a:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800963e:	0668      	lsls	r0, r5, #25
 8009640:	d502      	bpl.n	8009648 <HAL_PCD_IRQHandler+0x578>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009642:	2340      	movs	r3, #64	; 0x40
 8009644:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009648:	07a9      	lsls	r1, r5, #30
 800964a:	f100 814f 	bmi.w	80098ec <HAL_PCD_IRQHandler+0x81c>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800964e:	062a      	lsls	r2, r5, #24
 8009650:	f100 80f9 	bmi.w	8009846 <HAL_PCD_IRQHandler+0x776>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009654:	6820      	ldr	r0, [r4, #0]
 8009656:	e7bf      	b.n	80095d8 <HAL_PCD_IRQHandler+0x508>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009658:	6820      	ldr	r0, [r4, #0]
 800965a:	f004 feef 	bl	800e43c <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800965e:	4606      	mov	r6, r0
 8009660:	2800      	cmp	r0, #0
 8009662:	f43f ad79 	beq.w	8009158 <HAL_PCD_IRQHandler+0x88>
 8009666:	f505 6730 	add.w	r7, r5, #2816	; 0xb00
 800966a:	46a2      	mov	sl, r4
      epnum = 0U;
 800966c:	f04f 0900 	mov.w	r9, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009670:	f8cd b00c 	str.w	fp, [sp, #12]
 8009674:	e008      	b.n	8009688 <HAL_PCD_IRQHandler+0x5b8>
      while (ep_intr != 0U)
 8009676:	0876      	lsrs	r6, r6, #1
        epnum++;
 8009678:	f109 0901 	add.w	r9, r9, #1
      while (ep_intr != 0U)
 800967c:	f107 0720 	add.w	r7, r7, #32
 8009680:	f10a 0a24 	add.w	sl, sl, #36	; 0x24
 8009684:	f000 809b 	beq.w	80097be <HAL_PCD_IRQHandler+0x6ee>
        if ((ep_intr & 0x1U) != 0U)
 8009688:	07f0      	lsls	r0, r6, #31
 800968a:	d5f4      	bpl.n	8009676 <HAL_PCD_IRQHandler+0x5a6>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800968c:	fa5f fb89 	uxtb.w	fp, r9
 8009690:	6820      	ldr	r0, [r4, #0]
 8009692:	4659      	mov	r1, fp
 8009694:	f004 fee2 	bl	800e45c <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009698:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800969c:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800969e:	f040 80b3 	bne.w	8009808 <HAL_PCD_IRQHandler+0x738>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80096a2:	f018 0f08 	tst.w	r8, #8
 80096a6:	f040 8090 	bne.w	80097ca <HAL_PCD_IRQHandler+0x6fa>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80096aa:	f018 0f10 	tst.w	r8, #16
 80096ae:	d001      	beq.n	80096b4 <HAL_PCD_IRQHandler+0x5e4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80096b0:	2210      	movs	r2, #16
 80096b2:	60ba      	str	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80096b4:	f018 0f02 	tst.w	r8, #2
 80096b8:	d00e      	beq.n	80096d8 <HAL_PCD_IRQHandler+0x608>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80096ba:	696a      	ldr	r2, [r5, #20]
 80096bc:	0610      	lsls	r0, r2, #24
 80096be:	d504      	bpl.n	80096ca <HAL_PCD_IRQHandler+0x5fa>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80096c0:	9b02      	ldr	r3, [sp, #8]
 80096c2:	685a      	ldr	r2, [r3, #4]
 80096c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80096c8:	605a      	str	r2, [r3, #4]
            if (ep->is_iso_incomplete == 1U)
 80096ca:	f89a 227f 	ldrb.w	r2, [sl, #639]	; 0x27f
 80096ce:	2a01      	cmp	r2, #1
 80096d0:	f000 8181 	beq.w	80099d6 <HAL_PCD_IRQHandler+0x906>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80096d4:	2302      	movs	r3, #2
 80096d6:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80096d8:	f018 0f20 	tst.w	r8, #32
 80096dc:	d001      	beq.n	80096e2 <HAL_PCD_IRQHandler+0x612>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80096de:	2320      	movs	r3, #32
 80096e0:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80096e2:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 80096e6:	d0c6      	beq.n	8009676 <HAL_PCD_IRQHandler+0x5a6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80096e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096ec:	60bb      	str	r3, [r7, #8]
 80096ee:	e7c2      	b.n	8009676 <HAL_PCD_IRQHandler+0x5a6>
        HAL_PCD_SuspendCallback(hpcd);
 80096f0:	4620      	mov	r0, r4
 80096f2:	f006 f887 	bl	800f804 <HAL_PCD_SuspendCallback>
 80096f6:	e55b      	b.n	80091b0 <HAL_PCD_IRQHandler+0xe0>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80096f8:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 80096fc:	f043 030b 	orr.w	r3, r3, #11
 8009700:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009704:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8009706:	f043 030b 	orr.w	r3, r3, #11
 800970a:	644b      	str	r3, [r1, #68]	; 0x44
 800970c:	e72e      	b.n	800956c <HAL_PCD_IRQHandler+0x49c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800970e:	2900      	cmp	r1, #0
 8009710:	f6bf ade9 	bge.w	80092e6 <HAL_PCD_IRQHandler+0x216>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009714:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009716:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800971a:	f851 0b60 	ldr.w	r0, [r1], #96
 800971e:	f004 fd77 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009722:	6863      	ldr	r3, [r4, #4]
 8009724:	e5df      	b.n	80092e6 <HAL_PCD_IRQHandler+0x216>
        hpcd->LPM_State = LPM_L0;
 8009726:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009728:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800972a:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800972e:	f000 fc13 	bl	8009f58 <HAL_PCDEx_LPM_Callback>
 8009732:	e6c4      	b.n	80094be <HAL_PCD_IRQHandler+0x3ee>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009734:	2900      	cmp	r1, #0
 8009736:	f6bf addf 	bge.w	80092f8 <HAL_PCD_IRQHandler+0x228>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800973a:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800973c:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009740:	f851 0b84 	ldr.w	r0, [r1], #132
 8009744:	f004 fd64 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009748:	6863      	ldr	r3, [r4, #4]
 800974a:	e5d5      	b.n	80092f8 <HAL_PCD_IRQHandler+0x228>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800974c:	2900      	cmp	r1, #0
 800974e:	f6bf addc 	bge.w	800930a <HAL_PCD_IRQHandler+0x23a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009752:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009754:	f884 20ab 	strb.w	r2, [r4, #171]	; 0xab
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009758:	f851 0ba8 	ldr.w	r0, [r1], #168
 800975c:	f004 fd58 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009760:	6863      	ldr	r3, [r4, #4]
 8009762:	e5d2      	b.n	800930a <HAL_PCD_IRQHandler+0x23a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009764:	2900      	cmp	r1, #0
 8009766:	f6bf add9 	bge.w	800931c <HAL_PCD_IRQHandler+0x24c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800976a:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800976c:	f884 20cf 	strb.w	r2, [r4, #207]	; 0xcf
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009770:	f851 0bcc 	ldr.w	r0, [r1], #204
 8009774:	f004 fd4c 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009778:	6863      	ldr	r3, [r4, #4]
 800977a:	e5cf      	b.n	800931c <HAL_PCD_IRQHandler+0x24c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800977c:	f504 713a 	add.w	r1, r4, #744	; 0x2e8
 8009780:	6820      	ldr	r0, [r4, #0]
 8009782:	f004 fd45 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009786:	6863      	ldr	r3, [r4, #4]
 8009788:	e544      	b.n	8009214 <HAL_PCD_IRQHandler+0x144>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800978a:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800978e:	2208      	movs	r2, #8
 8009790:	f204 41c4 	addw	r1, r4, #1220	; 0x4c4
 8009794:	4628      	mov	r0, r5
 8009796:	f004 fd95 	bl	800e2c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800979a:	f3c6 130a 	ubfx	r3, r6, #4, #11
 800979e:	eb04 0287 	add.w	r2, r4, r7, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80097a2:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80097a4:	f8d2 1290 	ldr.w	r1, [r2, #656]	; 0x290
 80097a8:	440b      	add	r3, r1
 80097aa:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
 80097ae:	e4ca      	b.n	8009146 <HAL_PCD_IRQHandler+0x76>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80097b0:	f504 7143 	add.w	r1, r4, #780	; 0x30c
 80097b4:	6820      	ldr	r0, [r4, #0]
 80097b6:	f004 fd2b 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80097ba:	6863      	ldr	r3, [r4, #4]
 80097bc:	e531      	b.n	8009222 <HAL_PCD_IRQHandler+0x152>
 80097be:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80097c2:	e4c9      	b.n	8009158 <HAL_PCD_IRQHandler+0x88>
 80097c4:	e9dd 5b03 	ldrd	r5, fp, [sp, #12]
 80097c8:	e4cd      	b.n	8009166 <HAL_PCD_IRQHandler+0x96>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097ca:	6821      	ldr	r1, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80097cc:	2208      	movs	r2, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097ce:	4bbb      	ldr	r3, [pc, #748]	; (8009abc <HAL_PCD_IRQHandler+0x9ec>)
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80097d0:	60ba      	str	r2, [r7, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80097d2:	f501 6230 	add.w	r2, r1, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80097d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80097d8:	eb02 1249 	add.w	r2, r2, r9, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097dc:	4299      	cmp	r1, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80097de:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097e0:	f240 80c8 	bls.w	8009974 <HAL_PCD_IRQHandler+0x8a4>
 80097e4:	0403      	lsls	r3, r0, #16
 80097e6:	d502      	bpl.n	80097ee <HAL_PCD_IRQHandler+0x71e>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80097e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80097ec:	6091      	str	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80097ee:	4620      	mov	r0, r4
 80097f0:	f005 ffd4 	bl	800f79c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80097f4:	68e1      	ldr	r1, [r4, #12]
 80097f6:	2901      	cmp	r1, #1
 80097f8:	f47f af57 	bne.w	80096aa <HAL_PCD_IRQHandler+0x5da>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80097fc:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8009800:	6820      	ldr	r0, [r4, #0]
 8009802:	f004 fe5f 	bl	800e4c4 <USB_EP0_OutStart>
 8009806:	e750      	b.n	80096aa <HAL_PCD_IRQHandler+0x5da>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009808:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800980a:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 800980c:	68e1      	ldr	r1, [r4, #12]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800980e:	60ba      	str	r2, [r7, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009810:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 8009814:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009816:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800981a:	eb02 1249 	add.w	r2, r2, r9, lsl #5
 800981e:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8009820:	f000 80ac 	beq.w	800997c <HAL_PCD_IRQHandler+0x8ac>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009824:	49a6      	ldr	r1, [pc, #664]	; (8009ac0 <HAL_PCD_IRQHandler+0x9f0>)
 8009826:	458c      	cmp	ip, r1
 8009828:	f000 8109 	beq.w	8009a3e <HAL_PCD_IRQHandler+0x96e>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800982c:	f1b9 0f00 	cmp.w	r9, #0
 8009830:	d104      	bne.n	800983c <HAL_PCD_IRQHandler+0x76c>
 8009832:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8009836:	2a00      	cmp	r2, #0
 8009838:	f000 81d7 	beq.w	8009bea <HAL_PCD_IRQHandler+0xb1a>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800983c:	4659      	mov	r1, fp
 800983e:	4620      	mov	r0, r4
 8009840:	f005 ffb2 	bl	800f7a8 <HAL_PCD_DataOutStageCallback>
 8009844:	e72d      	b.n	80096a2 <HAL_PCD_IRQHandler+0x5d2>
  if (ep->xfer_count > ep->xfer_len)
 8009846:	e9d7 5313 	ldrd	r5, r3, [r7, #76]	; 0x4c
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800984a:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800984e:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009850:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 8009852:	f63f aec1 	bhi.w	80095d8 <HAL_PCD_IRQHandler+0x508>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009856:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800985a:	6c79      	ldr	r1, [r7, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 800985c:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009860:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 8009864:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 8009866:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 8009868:	428a      	cmp	r2, r1
 800986a:	bf28      	it	cs
 800986c:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800986e:	9905      	ldr	r1, [sp, #20]
 8009870:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 8009872:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009874:	b289      	uxth	r1, r1
 8009876:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 800987a:	f0c0 8095 	bcc.w	80099a8 <HAL_PCD_IRQHandler+0x8d8>
 800987e:	4652      	mov	r2, sl
 8009880:	9606      	str	r6, [sp, #24]
 8009882:	46ca      	mov	sl, r9
 8009884:	4626      	mov	r6, r4
 8009886:	46c1      	mov	r9, r8
 8009888:	9c05      	ldr	r4, [sp, #20]
 800988a:	4690      	mov	r8, r2
 800988c:	e019      	b.n	80098c2 <HAL_PCD_IRQHandler+0x7f2>
    len = ep->xfer_len - ep->xfer_count;
 800988e:	1aed      	subs	r5, r5, r3
    if (len > ep->maxpacket)
 8009890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009892:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009894:	4642      	mov	r2, r8
 8009896:	429d      	cmp	r5, r3
 8009898:	4658      	mov	r0, fp
 800989a:	bf28      	it	cs
 800989c:	461d      	movcs	r5, r3
 800989e:	7b33      	ldrb	r3, [r6, #12]
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	b2ab      	uxth	r3, r5
 80098a4:	f004 fcf8 	bl	800e298 <USB_WritePacket>
    ep->xfer_buff  += len;
 80098a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098aa:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 80098ac:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098ae:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 80098b0:	64bb      	str	r3, [r7, #72]	; 0x48
    ep->xfer_count += len;
 80098b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098b4:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 80098b6:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098b8:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 80098bc:	653b      	str	r3, [r7, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098be:	d36b      	bcc.n	8009998 <HAL_PCD_IRQHandler+0x8c8>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80098c0:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 80098c2:	429d      	cmp	r5, r3
 80098c4:	d8e3      	bhi.n	800988e <HAL_PCD_IRQHandler+0x7be>
 80098c6:	4634      	mov	r4, r6
 80098c8:	46c8      	mov	r8, r9
 80098ca:	9e06      	ldr	r6, [sp, #24]
 80098cc:	46d1      	mov	r9, sl
 80098ce:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80098d2:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80098d4:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80098d6:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80098d8:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80098dc:	f006 030f 	and.w	r3, r6, #15
 80098e0:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80098e2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80098e4:	ea23 0302 	bic.w	r3, r3, r2
 80098e8:	634b      	str	r3, [r1, #52]	; 0x34
 80098ea:	e675      	b.n	80095d8 <HAL_PCD_IRQHandler+0x508>
            (void)USB_FlushTxFifo(USBx, epnum);
 80098ec:	4631      	mov	r1, r6
 80098ee:	9803      	ldr	r0, [sp, #12]
 80098f0:	f004 fa6e 	bl	800ddd0 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 80098f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	f000 80b4 	beq.w	8009a66 <HAL_PCD_IRQHandler+0x996>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80098fe:	2302      	movs	r3, #2
 8009900:	f8c9 3008 	str.w	r3, [r9, #8]
 8009904:	e6a3      	b.n	800964e <HAL_PCD_IRQHandler+0x57e>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009906:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800990a:	421e      	tst	r6, r3
 800990c:	f43f ac1b 	beq.w	8009146 <HAL_PCD_IRQHandler+0x76>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009910:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 8009914:	f3c6 120a 	ubfx	r2, r6, #4, #11
 8009918:	4628      	mov	r0, r5
 800991a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800991e:	4616      	mov	r6, r2
 8009920:	f8d7 1288 	ldr.w	r1, [r7, #648]	; 0x288
 8009924:	f004 fcce 	bl	800e2c4 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009928:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800992c:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800992e:	4433      	add	r3, r6
 8009930:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009934:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009938:	4433      	add	r3, r6
 800993a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 800993e:	e402      	b.n	8009146 <HAL_PCD_IRQHandler+0x76>
        HAL_PCD_SuspendCallback(hpcd);
 8009940:	4620      	mov	r0, r4
 8009942:	f005 ff5f 	bl	800f804 <HAL_PCD_SuspendCallback>
 8009946:	e575      	b.n	8009434 <HAL_PCD_IRQHandler+0x364>
        HAL_PCD_DisconnectCallback(hpcd);
 8009948:	4620      	mov	r0, r4
 800994a:	f005 ff83 	bl	800f854 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	e565      	b.n	800941e <HAL_PCD_IRQHandler+0x34e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009952:	e9d7 2311 	ldrd	r2, r3, [r7, #68]	; 0x44
 8009956:	4413      	add	r3, r2
 8009958:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800995a:	2e00      	cmp	r6, #0
 800995c:	f47f ae61 	bne.w	8009622 <HAL_PCD_IRQHandler+0x552>
 8009960:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009962:	2b00      	cmp	r3, #0
 8009964:	f47f ae5d 	bne.w	8009622 <HAL_PCD_IRQHandler+0x552>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009968:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800996c:	6820      	ldr	r0, [r4, #0]
 800996e:	f004 fda9 	bl	800e4c4 <USB_EP0_OutStart>
 8009972:	e656      	b.n	8009622 <HAL_PCD_IRQHandler+0x552>
  HAL_PCD_SetupStageCallback(hpcd);
 8009974:	4620      	mov	r0, r4
 8009976:	f005 ff11 	bl	800f79c <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800997a:	e696      	b.n	80096aa <HAL_PCD_IRQHandler+0x5da>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800997c:	0719      	lsls	r1, r3, #28
 800997e:	f140 8097 	bpl.w	8009ab0 <HAL_PCD_IRQHandler+0x9e0>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009982:	494e      	ldr	r1, [pc, #312]	; (8009abc <HAL_PCD_IRQHandler+0x9ec>)
 8009984:	458c      	cmp	ip, r1
 8009986:	f67f ae8c 	bls.w	80096a2 <HAL_PCD_IRQHandler+0x5d2>
 800998a:	0418      	lsls	r0, r3, #16
 800998c:	f57f ae89 	bpl.w	80096a2 <HAL_PCD_IRQHandler+0x5d2>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009990:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009994:	6091      	str	r1, [r2, #8]
 8009996:	e684      	b.n	80096a2 <HAL_PCD_IRQHandler+0x5d2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009998:	4634      	mov	r4, r6
 800999a:	46c8      	mov	r8, r9
 800999c:	9e06      	ldr	r6, [sp, #24]
 800999e:	46d1      	mov	r9, sl
 80099a0:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_len <= ep->xfer_count)
 80099a4:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80099a6:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 80099a8:	429d      	cmp	r5, r3
 80099aa:	f63f ae15 	bhi.w	80095d8 <HAL_PCD_IRQHandler+0x508>
 80099ae:	e790      	b.n	80098d2 <HAL_PCD_IRQHandler+0x802>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80099b0:	2900      	cmp	r1, #0
 80099b2:	f6bf acbc 	bge.w	800932e <HAL_PCD_IRQHandler+0x25e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80099b6:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80099b8:	f884 20f3 	strb.w	r2, [r4, #243]	; 0xf3
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80099bc:	f851 0bf0 	ldr.w	r0, [r1], #240
 80099c0:	f004 fc26 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80099c4:	6863      	ldr	r3, [r4, #4]
 80099c6:	e4b2      	b.n	800932e <HAL_PCD_IRQHandler+0x25e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80099c8:	f504 7128 	add.w	r1, r4, #672	; 0x2a0
 80099cc:	6820      	ldr	r0, [r4, #0]
 80099ce:	f004 fc1f 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80099d2:	6863      	ldr	r3, [r4, #4]
 80099d4:	e410      	b.n	80091f8 <HAL_PCD_IRQHandler+0x128>
              ep->is_iso_incomplete = 0U;
 80099d6:	2300      	movs	r3, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80099d8:	4659      	mov	r1, fp
 80099da:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 80099dc:	f88a 327f 	strb.w	r3, [sl, #639]	; 0x27f
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80099e0:	f005 ff2c 	bl	800f83c <HAL_PCD_ISOOUTIncompleteCallback>
 80099e4:	e676      	b.n	80096d4 <HAL_PCD_IRQHandler+0x604>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80099e6:	2900      	cmp	r1, #0
 80099e8:	f6bf acaa 	bge.w	8009340 <HAL_PCD_IRQHandler+0x270>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80099ec:	f504 718a 	add.w	r1, r4, #276	; 0x114
 80099f0:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80099f2:	f884 2117 	strb.w	r2, [r4, #279]	; 0x117
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80099f6:	f004 fc0b 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80099fa:	6863      	ldr	r3, [r4, #4]
 80099fc:	e4a0      	b.n	8009340 <HAL_PCD_IRQHandler+0x270>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80099fe:	f504 7131 	add.w	r1, r4, #708	; 0x2c4
 8009a02:	6820      	ldr	r0, [r4, #0]
 8009a04:	f004 fc04 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009a08:	6863      	ldr	r3, [r4, #4]
 8009a0a:	f7ff bbfc 	b.w	8009206 <HAL_PCD_IRQHandler+0x136>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009a0e:	2900      	cmp	r1, #0
 8009a10:	f6bf ac9f 	bge.w	8009352 <HAL_PCD_IRQHandler+0x282>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009a14:	f504 719c 	add.w	r1, r4, #312	; 0x138
 8009a18:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009a1a:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009a1e:	f004 fbf7 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009a22:	6863      	ldr	r3, [r4, #4]
 8009a24:	e495      	b.n	8009352 <HAL_PCD_IRQHandler+0x282>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009a26:	2900      	cmp	r1, #0
 8009a28:	f6bf ac9c 	bge.w	8009364 <HAL_PCD_IRQHandler+0x294>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009a2c:	f504 71ae 	add.w	r1, r4, #348	; 0x15c
 8009a30:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009a32:	f884 215f 	strb.w	r2, [r4, #351]	; 0x15f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009a36:	f004 fbeb 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009a3a:	6863      	ldr	r3, [r4, #4]
 8009a3c:	e492      	b.n	8009364 <HAL_PCD_IRQHandler+0x294>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009a3e:	0418      	lsls	r0, r3, #16
 8009a40:	d4a6      	bmi.n	8009990 <HAL_PCD_IRQHandler+0x8c0>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009a42:	0699      	lsls	r1, r3, #26
 8009a44:	f57f aefa 	bpl.w	800983c <HAL_PCD_IRQHandler+0x76c>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a48:	2120      	movs	r1, #32
 8009a4a:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009a4c:	e6f6      	b.n	800983c <HAL_PCD_IRQHandler+0x76c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009a4e:	2900      	cmp	r1, #0
 8009a50:	f6bf ac91 	bge.w	8009376 <HAL_PCD_IRQHandler+0x2a6>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009a54:	f504 71c0 	add.w	r1, r4, #384	; 0x180
 8009a58:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009a5a:	f884 2183 	strb.w	r2, [r4, #387]	; 0x183
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009a5e:	f004 fbd7 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009a62:	6863      	ldr	r3, [r4, #4]
 8009a64:	e487      	b.n	8009376 <HAL_PCD_IRQHandler+0x2a6>
              ep->is_iso_incomplete = 0U;
 8009a66:	f04f 0300 	mov.w	r3, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009a6a:	4651      	mov	r1, sl
 8009a6c:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 8009a6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009a72:	f005 fee7 	bl	800f844 <HAL_PCD_ISOINIncompleteCallback>
 8009a76:	e742      	b.n	80098fe <HAL_PCD_IRQHandler+0x82e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009a78:	f504 714c 	add.w	r1, r4, #816	; 0x330
 8009a7c:	6820      	ldr	r0, [r4, #0]
 8009a7e:	f004 fbc7 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009a82:	6863      	ldr	r3, [r4, #4]
 8009a84:	f7ff bbd4 	b.w	8009230 <HAL_PCD_IRQHandler+0x160>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009a88:	2900      	cmp	r1, #0
 8009a8a:	f6bf ac7d 	bge.w	8009388 <HAL_PCD_IRQHandler+0x2b8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009a8e:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
 8009a92:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009a94:	f884 21a7 	strb.w	r2, [r4, #423]	; 0x1a7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009a98:	f004 fbba 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009a9c:	6863      	ldr	r3, [r4, #4]
 8009a9e:	e473      	b.n	8009388 <HAL_PCD_IRQHandler+0x2b8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009aa0:	f504 7155 	add.w	r1, r4, #852	; 0x354
 8009aa4:	6820      	ldr	r0, [r4, #0]
 8009aa6:	f004 fbb3 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009aaa:	6863      	ldr	r3, [r4, #4]
 8009aac:	f7ff bbc7 	b.w	800923e <HAL_PCD_IRQHandler+0x16e>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009ab0:	0699      	lsls	r1, r3, #26
 8009ab2:	d573      	bpl.n	8009b9c <HAL_PCD_IRQHandler+0xacc>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009ab4:	2120      	movs	r1, #32
 8009ab6:	6091      	str	r1, [r2, #8]
 8009ab8:	e5f3      	b.n	80096a2 <HAL_PCD_IRQHandler+0x5d2>
 8009aba:	bf00      	nop
 8009abc:	4f54300a 	.word	0x4f54300a
 8009ac0:	4f54310a 	.word	0x4f54310a
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009ac4:	2900      	cmp	r1, #0
 8009ac6:	f6bf ac68 	bge.w	800939a <HAL_PCD_IRQHandler+0x2ca>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009aca:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
 8009ace:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009ad0:	f884 21cb 	strb.w	r2, [r4, #459]	; 0x1cb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009ad4:	f004 fb9c 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009ad8:	6863      	ldr	r3, [r4, #4]
 8009ada:	e45e      	b.n	800939a <HAL_PCD_IRQHandler+0x2ca>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009adc:	f504 715e 	add.w	r1, r4, #888	; 0x378
 8009ae0:	6820      	ldr	r0, [r4, #0]
 8009ae2:	f004 fb95 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009ae6:	6863      	ldr	r3, [r4, #4]
 8009ae8:	f7ff bbb0 	b.w	800924c <HAL_PCD_IRQHandler+0x17c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009aec:	2900      	cmp	r1, #0
 8009aee:	f6bf ac5d 	bge.w	80093ac <HAL_PCD_IRQHandler+0x2dc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009af2:	f504 71f6 	add.w	r1, r4, #492	; 0x1ec
 8009af6:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009af8:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009afc:	f004 fb88 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b00:	6863      	ldr	r3, [r4, #4]
 8009b02:	e453      	b.n	80093ac <HAL_PCD_IRQHandler+0x2dc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009b04:	f504 7167 	add.w	r1, r4, #924	; 0x39c
 8009b08:	6820      	ldr	r0, [r4, #0]
 8009b0a:	f004 fb81 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b0e:	6863      	ldr	r3, [r4, #4]
 8009b10:	f7ff bba3 	b.w	800925a <HAL_PCD_IRQHandler+0x18a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009b14:	2900      	cmp	r1, #0
 8009b16:	f6bf ac52 	bge.w	80093be <HAL_PCD_IRQHandler+0x2ee>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009b1a:	f504 7104 	add.w	r1, r4, #528	; 0x210
 8009b1e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009b20:	f884 2213 	strb.w	r2, [r4, #531]	; 0x213
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009b24:	f004 fb74 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b28:	6863      	ldr	r3, [r4, #4]
 8009b2a:	e448      	b.n	80093be <HAL_PCD_IRQHandler+0x2ee>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009b2c:	f504 7170 	add.w	r1, r4, #960	; 0x3c0
 8009b30:	6820      	ldr	r0, [r4, #0]
 8009b32:	f004 fb6d 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b36:	6863      	ldr	r3, [r4, #4]
 8009b38:	f7ff bb96 	b.w	8009268 <HAL_PCD_IRQHandler+0x198>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009b3c:	2900      	cmp	r1, #0
 8009b3e:	f6bf ac47 	bge.w	80093d0 <HAL_PCD_IRQHandler+0x300>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009b42:	f504 710d 	add.w	r1, r4, #564	; 0x234
 8009b46:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009b48:	f884 2237 	strb.w	r2, [r4, #567]	; 0x237
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009b4c:	f004 fb60 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b50:	6863      	ldr	r3, [r4, #4]
 8009b52:	e43d      	b.n	80093d0 <HAL_PCD_IRQHandler+0x300>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009b54:	f504 7179 	add.w	r1, r4, #996	; 0x3e4
 8009b58:	6820      	ldr	r0, [r4, #0]
 8009b5a:	f004 fb59 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b5e:	6863      	ldr	r3, [r4, #4]
 8009b60:	f7ff bb89 	b.w	8009276 <HAL_PCD_IRQHandler+0x1a6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009b64:	2900      	cmp	r1, #0
 8009b66:	f6bf ac3c 	bge.w	80093e2 <HAL_PCD_IRQHandler+0x312>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009b6a:	f504 7116 	add.w	r1, r4, #600	; 0x258
 8009b6e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009b70:	f884 225b 	strb.w	r2, [r4, #603]	; 0x25b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009b74:	f004 fb4c 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b78:	6863      	ldr	r3, [r4, #4]
 8009b7a:	e432      	b.n	80093e2 <HAL_PCD_IRQHandler+0x312>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009b7c:	f504 6181 	add.w	r1, r4, #1032	; 0x408
 8009b80:	6820      	ldr	r0, [r4, #0]
 8009b82:	f004 fb45 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b86:	6863      	ldr	r3, [r4, #4]
 8009b88:	f7ff bb7c 	b.w	8009284 <HAL_PCD_IRQHandler+0x1b4>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009b8c:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8009b90:	6820      	ldr	r0, [r4, #0]
 8009b92:	f004 fb3d 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b96:	6863      	ldr	r3, [r4, #4]
 8009b98:	f7ff bb7b 	b.w	8009292 <HAL_PCD_IRQHandler+0x1c2>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009b9c:	f013 0f28 	tst.w	r3, #40	; 0x28
 8009ba0:	f47f ad7f 	bne.w	80096a2 <HAL_PCD_IRQHandler+0x5d2>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ba4:	491b      	ldr	r1, [pc, #108]	; (8009c14 <HAL_PCD_IRQHandler+0xb44>)
 8009ba6:	458c      	cmp	ip, r1
 8009ba8:	d902      	bls.n	8009bb0 <HAL_PCD_IRQHandler+0xae0>
 8009baa:	041b      	lsls	r3, r3, #16
 8009bac:	f53f aef0 	bmi.w	8009990 <HAL_PCD_IRQHandler+0x8c0>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009bb0:	6911      	ldr	r1, [r2, #16]
 8009bb2:	f8da 229c 	ldr.w	r2, [sl, #668]	; 0x29c
 8009bb6:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8009bba:	1a52      	subs	r2, r2, r1
 8009bbc:	f8ca 2290 	str.w	r2, [sl, #656]	; 0x290
        if (epnum == 0U)
 8009bc0:	f1b9 0f00 	cmp.w	r9, #0
 8009bc4:	f47f ae3a 	bne.w	800983c <HAL_PCD_IRQHandler+0x76c>
          if (ep->xfer_len == 0U)
 8009bc8:	f8d4 128c 	ldr.w	r1, [r4, #652]	; 0x28c
 8009bcc:	b1d9      	cbz	r1, 8009c06 <HAL_PCD_IRQHandler+0xb36>
            ep->xfer_buff += ep->xfer_count;
 8009bce:	f8d4 1288 	ldr.w	r1, [r4, #648]	; 0x288
 8009bd2:	440a      	add	r2, r1
 8009bd4:	f8c4 2288 	str.w	r2, [r4, #648]	; 0x288
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009bd8:	e630      	b.n	800983c <HAL_PCD_IRQHandler+0x76c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009bda:	f504 618a 	add.w	r1, r4, #1104	; 0x450
 8009bde:	6820      	ldr	r0, [r4, #0]
 8009be0:	f004 fb16 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009be4:	6863      	ldr	r3, [r4, #4]
 8009be6:	f7ff bb5b 	b.w	80092a0 <HAL_PCD_IRQHandler+0x1d0>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009bea:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8009bee:	4649      	mov	r1, r9
 8009bf0:	f004 fc68 	bl	800e4c4 <USB_EP0_OutStart>
 8009bf4:	e622      	b.n	800983c <HAL_PCD_IRQHandler+0x76c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009bf6:	f204 4174 	addw	r1, r4, #1140	; 0x474
 8009bfa:	6820      	ldr	r0, [r4, #0]
 8009bfc:	f004 fb08 	bl	800e210 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009c00:	6863      	ldr	r3, [r4, #4]
 8009c02:	f7ff bb54 	b.w	80092ae <HAL_PCD_IRQHandler+0x1de>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009c06:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8009c0a:	2101      	movs	r1, #1
 8009c0c:	f004 fc5a 	bl	800e4c4 <USB_EP0_OutStart>
 8009c10:	e614      	b.n	800983c <HAL_PCD_IRQHandler+0x76c>
 8009c12:	bf00      	nop
 8009c14:	4f54300a 	.word	0x4f54300a

08009c18 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8009c18:	f890 24bc 	ldrb.w	r2, [r0, #1212]	; 0x4bc
 8009c1c:	2a01      	cmp	r2, #1
 8009c1e:	d00e      	beq.n	8009c3e <HAL_PCD_SetAddress+0x26>
 8009c20:	2201      	movs	r2, #1
{
 8009c22:	b510      	push	{r4, lr}
 8009c24:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009c26:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 8009c28:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 8009c2c:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009c30:	f004 fbce 	bl	800e3d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009c34:	2300      	movs	r3, #0
  return HAL_OK;
 8009c36:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8009c38:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 8009c3c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8009c3e:	2002      	movs	r0, #2
}
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop

08009c44 <HAL_PCD_EP_Open>:
{
 8009c44:	b510      	push	{r4, lr}
 8009c46:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8009c4a:	0609      	lsls	r1, r1, #24
{
 8009c4c:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8009c4e:	d427      	bmi.n	8009ca0 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c50:	f04f 0c24 	mov.w	ip, #36	; 0x24
 8009c54:	fb0c 0c0e 	mla	ip, ip, lr, r0
 8009c58:	f50c 711f 	add.w	r1, ip, #636	; 0x27c
    ep->is_in = 0U;
 8009c5c:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 8009c60:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8009c64:	2000      	movs	r0, #0
 8009c66:	f88c 027d 	strb.w	r0, [ip, #637]	; 0x27d
  ep->maxpacket = ep_mps;
 8009c6a:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8009c6c:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c6e:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 8009c72:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8009c74:	b10a      	cbz	r2, 8009c7a <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8009c76:	f8a1 e01a 	strh.w	lr, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d101      	bne.n	8009c82 <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	714b      	strb	r3, [r1, #5]
  __HAL_LOCK(hpcd);
 8009c82:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d018      	beq.n	8009cbc <HAL_PCD_EP_Open+0x78>
 8009c8a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009c8c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009c8e:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009c92:	f004 f8d3 	bl	800de3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009c96:	2300      	movs	r3, #0
  return ret;
 8009c98:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8009c9a:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 8009c9e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ca0:	2024      	movs	r0, #36	; 0x24
    ep->is_in = 1U;
 8009ca2:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ca6:	fb00 400e 	mla	r0, r0, lr, r4
 8009caa:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 8009cae:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 8009cb2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8009cb6:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 8009cba:	e7d6      	b.n	8009c6a <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8009cbc:	2002      	movs	r0, #2
}
 8009cbe:	bd10      	pop	{r4, pc}

08009cc0 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8009cc0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009cc4:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009cc8:	f04f 0124 	mov.w	r1, #36	; 0x24
{
 8009ccc:	b510      	push	{r4, lr}
 8009cce:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8009cd0:	d11a      	bne.n	8009d08 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009cd2:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8009cd6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8009cda:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009cdc:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 8009ce0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009ce4:	f882 027d 	strb.w	r0, [r2, #637]	; 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ce8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8009cea:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d019      	beq.n	8009d26 <HAL_PCD_EP_Close+0x66>
 8009cf2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009cf4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009cf6:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009cfa:	f004 f8e7 	bl	800decc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009cfe:	2300      	movs	r3, #0
  return HAL_OK;
 8009d00:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8009d02:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 8009d06:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d08:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8009d0c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8009d10:	2001      	movs	r0, #1
 8009d12:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d16:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8009d18:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d1c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8009d1e:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d1e5      	bne.n	8009cf2 <HAL_PCD_EP_Close+0x32>
 8009d26:	2002      	movs	r0, #2
}
 8009d28:	bd10      	pop	{r4, pc}
 8009d2a:	bf00      	nop

08009d2c <HAL_PCD_EP_Receive>:
{
 8009d2c:	b508      	push	{r3, lr}
 8009d2e:	f001 0e0f 	and.w	lr, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d32:	2124      	movs	r1, #36	; 0x24
  ep->xfer_buff = pBuf;
 8009d34:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d38:	fb01 010e 	mla	r1, r1, lr, r0
  ep->xfer_buff = pBuf;
 8009d3c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d40:	f501 711f 	add.w	r1, r1, #636	; 0x27c
  ep->xfer_len = len;
 8009d44:	f8cc 328c 	str.w	r3, [ip, #652]	; 0x28c
  ep->xfer_count = 0U;
 8009d48:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8009d4a:	f8cc 2288 	str.w	r2, [ip, #648]	; 0x288
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d4e:	f88c e27c 	strb.w	lr, [ip, #636]	; 0x27c
  ep->xfer_count = 0U;
 8009d52:	f8cc 3290 	str.w	r3, [ip, #656]	; 0x290
  ep->is_in = 0U;
 8009d56:	f88c 327d 	strb.w	r3, [ip, #637]	; 0x27d
  if (hpcd->Init.dma_enable == 1U)
 8009d5a:	68c3      	ldr	r3, [r0, #12]
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009d5c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8009d5e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8009d60:	bf08      	it	eq
 8009d62:	f8cc 2298 	streq.w	r2, [ip, #664]	; 0x298
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009d66:	b2da      	uxtb	r2, r3
 8009d68:	f004 f90e 	bl	800df88 <USB_EPStartXfer>
}
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	bd08      	pop	{r3, pc}

08009d70 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009d70:	f001 010f 	and.w	r1, r1, #15
 8009d74:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8009d78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8009d7c:	f8d1 0290 	ldr.w	r0, [r1, #656]	; 0x290
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop

08009d84 <HAL_PCD_EP_Transmit>:
{
 8009d84:	b508      	push	{r3, lr}
 8009d86:	f001 0e0f 	and.w	lr, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d8a:	2124      	movs	r1, #36	; 0x24
  ep->xfer_buff = pBuf;
 8009d8c:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d90:	fb01 010e 	mla	r1, r1, lr, r0
  ep->xfer_buff = pBuf;
 8009d94:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d98:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8009d9a:	f8cc 304c 	str.w	r3, [ip, #76]	; 0x4c
  ep->xfer_count = 0U;
 8009d9e:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8009da0:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 8009da4:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->is_in = 1U;
 8009da8:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8009daa:	f88c e03c 	strb.w	lr, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 8009dae:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8009db2:	68c3      	ldr	r3, [r0, #12]
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009db4:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8009db6:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8009db8:	bf08      	it	eq
 8009dba:	f8cc 2058 	streq.w	r2, [ip, #88]	; 0x58
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009dbe:	b2da      	uxtb	r2, r3
 8009dc0:	f004 f8e2 	bl	800df88 <USB_EPStartXfer>
}
 8009dc4:	2000      	movs	r0, #0
 8009dc6:	bd08      	pop	{r3, pc}

08009dc8 <HAL_PCD_EP_SetStall>:
{
 8009dc8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009dca:	6843      	ldr	r3, [r0, #4]
 8009dcc:	f001 050f 	and.w	r5, r1, #15
 8009dd0:	429d      	cmp	r5, r3
 8009dd2:	d834      	bhi.n	8009e3e <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 8009dd4:	060b      	lsls	r3, r1, #24
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	d41d      	bmi.n	8009e16 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 8009dda:	2224      	movs	r2, #36	; 0x24
    ep->is_in = 0U;
 8009ddc:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8009de0:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 8009de4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009de8:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8009dea:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 8009dee:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
  ep->is_stall = 1U;
 8009df2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8009df4:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8009df6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8009df8:	f894 24bc 	ldrb.w	r2, [r4, #1212]	; 0x4bc
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d01c      	beq.n	8009e3a <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009e00:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009e02:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009e06:	f004 fa83 	bl	800e310 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009e0a:	b1d5      	cbz	r5, 8009e42 <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 8009e0c:	2300      	movs	r3, #0
  return HAL_OK;
 8009e0e:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8009e10:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 8009e14:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e16:	2124      	movs	r1, #36	; 0x24
    ep->is_in = 1U;
 8009e18:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8009e1c:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e1e:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8009e22:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e26:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8009e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8009e2c:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e2e:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8009e30:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8009e32:	f894 24bc 	ldrb.w	r2, [r4, #1212]	; 0x4bc
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d1e2      	bne.n	8009e00 <HAL_PCD_EP_SetStall+0x38>
 8009e3a:	2002      	movs	r0, #2
}
 8009e3c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009e3e:	2001      	movs	r0, #1
}
 8009e40:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009e42:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8009e46:	7b21      	ldrb	r1, [r4, #12]
 8009e48:	6820      	ldr	r0, [r4, #0]
 8009e4a:	f004 fb3b 	bl	800e4c4 <USB_EP0_OutStart>
 8009e4e:	e7dd      	b.n	8009e0c <HAL_PCD_EP_SetStall+0x44>

08009e50 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009e50:	6842      	ldr	r2, [r0, #4]
{
 8009e52:	b538      	push	{r3, r4, r5, lr}
 8009e54:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d832      	bhi.n	8009ec2 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8009e5c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009e60:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e62:	f04f 0124 	mov.w	r1, #36	; 0x24
    ep->is_in = 1U;
 8009e66:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8009e6a:	d119      	bne.n	8009ea0 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e6c:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8009e70:	2000      	movs	r0, #0
 8009e72:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 8009e76:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e78:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 8009e7c:	f882 027d 	strb.w	r0, [r2, #637]	; 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e80:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8009e82:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8009e84:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d018      	beq.n	8009ebe <HAL_PCD_EP_ClrStall+0x6e>
 8009e8c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009e8e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009e90:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009e94:	f004 fa70 	bl	800e378 <USB_EPClearStall>
  return HAL_OK;
 8009e98:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8009e9a:	f884 54bc 	strb.w	r5, [r4, #1212]	; 0x4bc
}
 8009e9e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ea0:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8009ea4:	2001      	movs	r0, #1
 8009ea6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 8009eaa:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009eac:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8009eae:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8009eb2:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8009eb4:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8009eb6:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d1e6      	bne.n	8009e8c <HAL_PCD_EP_ClrStall+0x3c>
 8009ebe:	2002      	movs	r0, #2
}
 8009ec0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009ec2:	2001      	movs	r0, #1
}
 8009ec4:	bd38      	pop	{r3, r4, r5, pc}
 8009ec6:	bf00      	nop

08009ec8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009ec8:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009eca:	6804      	ldr	r4, [r0, #0]
 8009ecc:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8009ece:	b931      	cbnz	r1, 8009ede <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009ed0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8009ed4:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009edc:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009ede:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8009ee0:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009ee4:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009ee8:	d00b      	beq.n	8009f02 <HAL_PCDEx_SetTxFiFo+0x3a>
 8009eea:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009eec:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 8009ef0:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009ef2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8009ef6:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009ef8:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8009efa:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009efc:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8009f00:	d3f4      	bcc.n	8009eec <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009f02:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8009f06:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8009f0a:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 8009f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009f12:	f8cc 0004 	str.w	r0, [ip, #4]
}
 8009f16:	2000      	movs	r0, #0
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop

08009f1c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009f1c:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 8009f1e:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	6259      	str	r1, [r3, #36]	; 0x24
}
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop

08009f28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009f28:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8009f2a:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009f2e:	4909      	ldr	r1, [pc, #36]	; (8009f54 <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f30:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 8009f32:	4660      	mov	r0, ip
{
 8009f34:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 8009f36:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 8009f38:	f883 c4f4 	strb.w	ip, [r3, #1268]	; 0x4f4
  hpcd->lpm_active = 1U;
 8009f3c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009f40:	6993      	ldr	r3, [r2, #24]
}
 8009f42:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009f46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f4a:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009f4c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009f4e:	4319      	orrs	r1, r3
 8009f50:	6551      	str	r1, [r2, #84]	; 0x54
}
 8009f52:	4770      	bx	lr
 8009f54:	10000003 	.word	0x10000003

08009f58 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop

08009f5c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009f5c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009f5e:	4c10      	ldr	r4, [pc, #64]	; (8009fa0 <HAL_PWREx_ConfigSupply+0x44>)
 8009f60:	68e3      	ldr	r3, [r4, #12]
 8009f62:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009f66:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009f68:	d105      	bne.n	8009f76 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009f6a:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009f6e:	1a18      	subs	r0, r3, r0
 8009f70:	bf18      	it	ne
 8009f72:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8009f74:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009f76:	f023 0307 	bic.w	r3, r3, #7
 8009f7a:	4318      	orrs	r0, r3
 8009f7c:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8009f7e:	f7fb fec1 	bl	8005d04 <HAL_GetTick>
 8009f82:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009f84:	e005      	b.n	8009f92 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009f86:	f7fb febd 	bl	8005d04 <HAL_GetTick>
 8009f8a:	1b40      	subs	r0, r0, r5
 8009f8c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009f90:	d804      	bhi.n	8009f9c <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009f92:	6863      	ldr	r3, [r4, #4]
 8009f94:	049b      	lsls	r3, r3, #18
 8009f96:	d5f6      	bpl.n	8009f86 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8009f98:	2000      	movs	r0, #0
}
 8009f9a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8009f9c:	2001      	movs	r0, #1
}
 8009f9e:	bd38      	pop	{r3, r4, r5, pc}
 8009fa0:	58024800 	.word	0x58024800

08009fa4 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009fa4:	4a02      	ldr	r2, [pc, #8]	; (8009fb0 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8009fa6:	68d3      	ldr	r3, [r2, #12]
 8009fa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fac:	60d3      	str	r3, [r2, #12]
}
 8009fae:	4770      	bx	lr
 8009fb0:	58024800 	.word	0x58024800

08009fb4 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009fb4:	4b3b      	ldr	r3, [pc, #236]	; (800a0a4 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8009fb6:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009fba:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009fbc:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8009fbe:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009fc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009fc4:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8009fc8:	d038      	beq.n	800a03c <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009fca:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009fce:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009fd2:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009fd6:	fb05 f101 	mul.w	r1, r5, r1
 8009fda:	2a01      	cmp	r2, #1
 8009fdc:	ee07 1a90 	vmov	s15, r1
 8009fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 8009fe4:	d002      	beq.n	8009fec <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8009fe6:	2a02      	cmp	r2, #2
 8009fe8:	d04e      	beq.n	800a088 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8009fea:	b34a      	cbz	r2, 800a040 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fec:	ee07 0a90 	vmov	s15, r0
 8009ff0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800a0a8 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8009ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ffa:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009ffe:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800a0ac <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800a002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a006:	ee06 3a90 	vmov	s13, r3
 800a00a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800a00e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a012:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a016:	eee7 6a25 	vfma.f32	s13, s14, s11
 800a01a:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a01e:	4b21      	ldr	r3, [pc, #132]	; (800a0a4 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 800a020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a022:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a026:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a028:	ee07 3a90 	vmov	s15, r3
 800a02c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a038:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800a03c:	bc30      	pop	{r4, r5}
 800a03e:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	0692      	lsls	r2, r2, #26
 800a044:	d527      	bpl.n	800a096 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a046:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a048:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a04c:	4a18      	ldr	r2, [pc, #96]	; (800a0b0 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a04e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a054:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a05c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800a0ac <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800a060:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a064:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a066:	ee06 3a90 	vmov	s13, r3
 800a06a:	ee05 2a90 	vmov	s11, r2
 800a06e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a072:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800a076:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a07a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800a07e:	eee7 6a05 	vfma.f32	s13, s14, s10
 800a082:	ee66 6a26 	vmul.f32	s13, s12, s13
 800a086:	e7ca      	b.n	800a01e <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a088:	ee07 0a90 	vmov	s15, r0
 800a08c:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a0b4 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 800a090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a094:	e7b0      	b.n	8009ff8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a096:	ee07 0a90 	vmov	s15, r0
 800a09a:	eddf 6a07 	vldr	s13, [pc, #28]	; 800a0b8 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800a09e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0a2:	e7a9      	b.n	8009ff8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800a0a4:	58024400 	.word	0x58024400
 800a0a8:	4a742400 	.word	0x4a742400
 800a0ac:	39000000 	.word	0x39000000
 800a0b0:	03d09000 	.word	0x03d09000
 800a0b4:	4bbebc20 	.word	0x4bbebc20
 800a0b8:	4c742400 	.word	0x4c742400

0800a0bc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	f000 81e8 	beq.w	800a492 <HAL_RCC_OscConfig+0x3d6>
{
 800a0c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0c4:	6803      	ldr	r3, [r0, #0]
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	07d9      	lsls	r1, r3, #31
 800a0ca:	d52e      	bpl.n	800a12a <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0cc:	49a4      	ldr	r1, [pc, #656]	; (800a360 <HAL_RCC_OscConfig+0x2a4>)
 800a0ce:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a0d0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0d2:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a0d6:	2a10      	cmp	r2, #16
 800a0d8:	f000 8107 	beq.w	800a2ea <HAL_RCC_OscConfig+0x22e>
 800a0dc:	2a18      	cmp	r2, #24
 800a0de:	f000 80ff 	beq.w	800a2e0 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0e2:	6863      	ldr	r3, [r4, #4]
 800a0e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0e8:	f000 812a 	beq.w	800a340 <HAL_RCC_OscConfig+0x284>
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 8168 	beq.w	800a3c2 <HAL_RCC_OscConfig+0x306>
 800a0f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0f6:	4b9a      	ldr	r3, [pc, #616]	; (800a360 <HAL_RCC_OscConfig+0x2a4>)
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	f000 8289 	beq.w	800a610 <HAL_RCC_OscConfig+0x554>
 800a0fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a10a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a10c:	f7fb fdfa 	bl	8005d04 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a110:	4e93      	ldr	r6, [pc, #588]	; (800a360 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 800a112:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a114:	e005      	b.n	800a122 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a116:	f7fb fdf5 	bl	8005d04 <HAL_GetTick>
 800a11a:	1b40      	subs	r0, r0, r5
 800a11c:	2864      	cmp	r0, #100	; 0x64
 800a11e:	f200 814e 	bhi.w	800a3be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a122:	6833      	ldr	r3, [r6, #0]
 800a124:	039b      	lsls	r3, r3, #14
 800a126:	d5f6      	bpl.n	800a116 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	079d      	lsls	r5, r3, #30
 800a12c:	f100 808a 	bmi.w	800a244 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a130:	06d9      	lsls	r1, r3, #27
 800a132:	d533      	bpl.n	800a19c <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a134:	4a8a      	ldr	r2, [pc, #552]	; (800a360 <HAL_RCC_OscConfig+0x2a4>)
 800a136:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a138:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a13a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a13e:	2b08      	cmp	r3, #8
 800a140:	f000 80e3 	beq.w	800a30a <HAL_RCC_OscConfig+0x24e>
 800a144:	2b18      	cmp	r3, #24
 800a146:	f000 80db 	beq.w	800a300 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a14a:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800a14c:	4d84      	ldr	r5, [pc, #528]	; (800a360 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f000 816f 	beq.w	800a432 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 800a154:	682b      	ldr	r3, [r5, #0]
 800a156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a15a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a15c:	f7fb fdd2 	bl	8005d04 <HAL_GetTick>
 800a160:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a162:	e005      	b.n	800a170 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a164:	f7fb fdce 	bl	8005d04 <HAL_GetTick>
 800a168:	1b80      	subs	r0, r0, r6
 800a16a:	2802      	cmp	r0, #2
 800a16c:	f200 8127 	bhi.w	800a3be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	05db      	lsls	r3, r3, #23
 800a174:	d5f6      	bpl.n	800a164 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a176:	f7fb fddd 	bl	8005d34 <HAL_GetREVID>
 800a17a:	f241 0303 	movw	r3, #4099	; 0x1003
 800a17e:	4298      	cmp	r0, r3
 800a180:	f200 826d 	bhi.w	800a65e <HAL_RCC_OscConfig+0x5a2>
 800a184:	6a22      	ldr	r2, [r4, #32]
 800a186:	686b      	ldr	r3, [r5, #4]
 800a188:	2a20      	cmp	r2, #32
 800a18a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a18e:	bf0c      	ite	eq
 800a190:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800a194:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800a198:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	071d      	lsls	r5, r3, #28
 800a19e:	d516      	bpl.n	800a1ce <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a1a0:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800a1a2:	4d6f      	ldr	r5, [pc, #444]	; (800a360 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 8122 	beq.w	800a3ee <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 800a1aa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a1ac:	f043 0301 	orr.w	r3, r3, #1
 800a1b0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800a1b2:	f7fb fda7 	bl	8005d04 <HAL_GetTick>
 800a1b6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a1b8:	e005      	b.n	800a1c6 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1ba:	f7fb fda3 	bl	8005d04 <HAL_GetTick>
 800a1be:	1b80      	subs	r0, r0, r6
 800a1c0:	2802      	cmp	r0, #2
 800a1c2:	f200 80fc 	bhi.w	800a3be <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a1c6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a1c8:	0798      	lsls	r0, r3, #30
 800a1ca:	d5f6      	bpl.n	800a1ba <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a1cc:	6823      	ldr	r3, [r4, #0]
 800a1ce:	069a      	lsls	r2, r3, #26
 800a1d0:	d516      	bpl.n	800a200 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a1d2:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800a1d4:	4d62      	ldr	r5, [pc, #392]	; (800a360 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 811a 	beq.w	800a410 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a1e2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a1e4:	f7fb fd8e 	bl	8005d04 <HAL_GetTick>
 800a1e8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a1ea:	e005      	b.n	800a1f8 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a1ec:	f7fb fd8a 	bl	8005d04 <HAL_GetTick>
 800a1f0:	1b80      	subs	r0, r0, r6
 800a1f2:	2802      	cmp	r0, #2
 800a1f4:	f200 80e3 	bhi.w	800a3be <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a1f8:	682b      	ldr	r3, [r5, #0]
 800a1fa:	049f      	lsls	r7, r3, #18
 800a1fc:	d5f6      	bpl.n	800a1ec <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1fe:	6823      	ldr	r3, [r4, #0]
 800a200:	0759      	lsls	r1, r3, #29
 800a202:	f100 80a3 	bmi.w	800a34c <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a206:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a208:	b1d0      	cbz	r0, 800a240 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a20a:	4d55      	ldr	r5, [pc, #340]	; (800a360 <HAL_RCC_OscConfig+0x2a4>)
 800a20c:	692b      	ldr	r3, [r5, #16]
 800a20e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a212:	2b18      	cmp	r3, #24
 800a214:	f000 81ae 	beq.w	800a574 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800a218:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a21a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800a21c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a220:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a222:	f000 8142 	beq.w	800a4aa <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 800a226:	f7fb fd6d 	bl	8005d04 <HAL_GetTick>
 800a22a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a22c:	e005      	b.n	800a23a <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a22e:	f7fb fd69 	bl	8005d04 <HAL_GetTick>
 800a232:	1b00      	subs	r0, r0, r4
 800a234:	2802      	cmp	r0, #2
 800a236:	f200 80c2 	bhi.w	800a3be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a23a:	682b      	ldr	r3, [r5, #0]
 800a23c:	019b      	lsls	r3, r3, #6
 800a23e:	d4f6      	bmi.n	800a22e <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 800a240:	2000      	movs	r0, #0
}
 800a242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a244:	4a46      	ldr	r2, [pc, #280]	; (800a360 <HAL_RCC_OscConfig+0x2a4>)
 800a246:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a248:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a24a:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800a24e:	d12d      	bne.n	800a2ac <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a250:	4b43      	ldr	r3, [pc, #268]	; (800a360 <HAL_RCC_OscConfig+0x2a4>)
 800a252:	68e2      	ldr	r2, [r4, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	0759      	lsls	r1, r3, #29
 800a258:	d501      	bpl.n	800a25e <HAL_RCC_OscConfig+0x1a2>
 800a25a:	2a00      	cmp	r2, #0
 800a25c:	d04e      	beq.n	800a2fc <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a25e:	4d40      	ldr	r5, [pc, #256]	; (800a360 <HAL_RCC_OscConfig+0x2a4>)
 800a260:	682b      	ldr	r3, [r5, #0]
 800a262:	f023 0319 	bic.w	r3, r3, #25
 800a266:	4313      	orrs	r3, r2
 800a268:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a26a:	f7fb fd4b 	bl	8005d04 <HAL_GetTick>
 800a26e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a270:	e005      	b.n	800a27e <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a272:	f7fb fd47 	bl	8005d04 <HAL_GetTick>
 800a276:	1b80      	subs	r0, r0, r6
 800a278:	2802      	cmp	r0, #2
 800a27a:	f200 80a0 	bhi.w	800a3be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a27e:	682b      	ldr	r3, [r5, #0]
 800a280:	075b      	lsls	r3, r3, #29
 800a282:	d5f6      	bpl.n	800a272 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a284:	f7fb fd56 	bl	8005d34 <HAL_GetREVID>
 800a288:	f241 0303 	movw	r3, #4099	; 0x1003
 800a28c:	4298      	cmp	r0, r3
 800a28e:	f200 80f7 	bhi.w	800a480 <HAL_RCC_OscConfig+0x3c4>
 800a292:	6922      	ldr	r2, [r4, #16]
 800a294:	686b      	ldr	r3, [r5, #4]
 800a296:	2a40      	cmp	r2, #64	; 0x40
 800a298:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a29c:	bf0c      	ite	eq
 800a29e:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800a2a2:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800a2a6:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	e741      	b.n	800a130 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a2ac:	2b18      	cmp	r3, #24
 800a2ae:	f000 80e3 	beq.w	800a478 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a2b2:	4d2b      	ldr	r5, [pc, #172]	; (800a360 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a2b4:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a2b6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a2b8:	2a00      	cmp	r2, #0
 800a2ba:	f000 80cc 	beq.w	800a456 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a2be:	f023 0319 	bic.w	r3, r3, #25
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a2c6:	f7fb fd1d 	bl	8005d04 <HAL_GetTick>
 800a2ca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2cc:	e004      	b.n	800a2d8 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2ce:	f7fb fd19 	bl	8005d04 <HAL_GetTick>
 800a2d2:	1b80      	subs	r0, r0, r6
 800a2d4:	2802      	cmp	r0, #2
 800a2d6:	d872      	bhi.n	800a3be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	075f      	lsls	r7, r3, #29
 800a2dc:	d5f7      	bpl.n	800a2ce <HAL_RCC_OscConfig+0x212>
 800a2de:	e7d1      	b.n	800a284 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a2e0:	f001 0103 	and.w	r1, r1, #3
 800a2e4:	2902      	cmp	r1, #2
 800a2e6:	f47f aefc 	bne.w	800a0e2 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2ea:	4a1d      	ldr	r2, [pc, #116]	; (800a360 <HAL_RCC_OscConfig+0x2a4>)
 800a2ec:	6812      	ldr	r2, [r2, #0]
 800a2ee:	0392      	lsls	r2, r2, #14
 800a2f0:	f57f af1b 	bpl.w	800a12a <HAL_RCC_OscConfig+0x6e>
 800a2f4:	6862      	ldr	r2, [r4, #4]
 800a2f6:	2a00      	cmp	r2, #0
 800a2f8:	f47f af17 	bne.w	800a12a <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 800a2fc:	2001      	movs	r0, #1
}
 800a2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a300:	f002 0203 	and.w	r2, r2, #3
 800a304:	2a01      	cmp	r2, #1
 800a306:	f47f af20 	bne.w	800a14a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a30a:	4b15      	ldr	r3, [pc, #84]	; (800a360 <HAL_RCC_OscConfig+0x2a4>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	05da      	lsls	r2, r3, #23
 800a310:	d502      	bpl.n	800a318 <HAL_RCC_OscConfig+0x25c>
 800a312:	69e3      	ldr	r3, [r4, #28]
 800a314:	2b80      	cmp	r3, #128	; 0x80
 800a316:	d1f1      	bne.n	800a2fc <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a318:	f7fb fd0c 	bl	8005d34 <HAL_GetREVID>
 800a31c:	f241 0303 	movw	r3, #4099	; 0x1003
 800a320:	4298      	cmp	r0, r3
 800a322:	f200 80b8 	bhi.w	800a496 <HAL_RCC_OscConfig+0x3da>
 800a326:	6a22      	ldr	r2, [r4, #32]
 800a328:	2a20      	cmp	r2, #32
 800a32a:	f000 81a7 	beq.w	800a67c <HAL_RCC_OscConfig+0x5c0>
 800a32e:	490c      	ldr	r1, [pc, #48]	; (800a360 <HAL_RCC_OscConfig+0x2a4>)
 800a330:	684b      	ldr	r3, [r1, #4]
 800a332:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a336:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800a33a:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a33c:	6823      	ldr	r3, [r4, #0]
 800a33e:	e72d      	b.n	800a19c <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a340:	4a07      	ldr	r2, [pc, #28]	; (800a360 <HAL_RCC_OscConfig+0x2a4>)
 800a342:	6813      	ldr	r3, [r2, #0]
 800a344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a348:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a34a:	e6df      	b.n	800a10c <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800a34c:	4d05      	ldr	r5, [pc, #20]	; (800a364 <HAL_RCC_OscConfig+0x2a8>)
 800a34e:	682b      	ldr	r3, [r5, #0]
 800a350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a354:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800a356:	f7fb fcd5 	bl	8005d04 <HAL_GetTick>
 800a35a:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a35c:	e009      	b.n	800a372 <HAL_RCC_OscConfig+0x2b6>
 800a35e:	bf00      	nop
 800a360:	58024400 	.word	0x58024400
 800a364:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a368:	f7fb fccc 	bl	8005d04 <HAL_GetTick>
 800a36c:	1b80      	subs	r0, r0, r6
 800a36e:	2864      	cmp	r0, #100	; 0x64
 800a370:	d825      	bhi.n	800a3be <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a372:	682b      	ldr	r3, [r5, #0]
 800a374:	05da      	lsls	r2, r3, #23
 800a376:	d5f7      	bpl.n	800a368 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a378:	68a3      	ldr	r3, [r4, #8]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	f000 8178 	beq.w	800a670 <HAL_RCC_OscConfig+0x5b4>
 800a380:	2b00      	cmp	r3, #0
 800a382:	f000 8153 	beq.w	800a62c <HAL_RCC_OscConfig+0x570>
 800a386:	2b05      	cmp	r3, #5
 800a388:	4ba5      	ldr	r3, [pc, #660]	; (800a620 <HAL_RCC_OscConfig+0x564>)
 800a38a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a38c:	f000 817f 	beq.w	800a68e <HAL_RCC_OscConfig+0x5d2>
 800a390:	f022 0201 	bic.w	r2, r2, #1
 800a394:	671a      	str	r2, [r3, #112]	; 0x70
 800a396:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a398:	f022 0204 	bic.w	r2, r2, #4
 800a39c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800a39e:	f7fb fcb1 	bl	8005d04 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3a2:	4e9f      	ldr	r6, [pc, #636]	; (800a620 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3a4:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800a3a8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3aa:	e004      	b.n	800a3b6 <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3ac:	f7fb fcaa 	bl	8005d04 <HAL_GetTick>
 800a3b0:	1b40      	subs	r0, r0, r5
 800a3b2:	42b8      	cmp	r0, r7
 800a3b4:	d803      	bhi.n	800a3be <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3b6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800a3b8:	079b      	lsls	r3, r3, #30
 800a3ba:	d5f7      	bpl.n	800a3ac <HAL_RCC_OscConfig+0x2f0>
 800a3bc:	e723      	b.n	800a206 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 800a3be:	2003      	movs	r0, #3
}
 800a3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a3c2:	4d97      	ldr	r5, [pc, #604]	; (800a620 <HAL_RCC_OscConfig+0x564>)
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3ca:	602b      	str	r3, [r5, #0]
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a3d4:	f7fb fc96 	bl	8005d04 <HAL_GetTick>
 800a3d8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a3da:	e004      	b.n	800a3e6 <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a3dc:	f7fb fc92 	bl	8005d04 <HAL_GetTick>
 800a3e0:	1b80      	subs	r0, r0, r6
 800a3e2:	2864      	cmp	r0, #100	; 0x64
 800a3e4:	d8eb      	bhi.n	800a3be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a3e6:	682b      	ldr	r3, [r5, #0]
 800a3e8:	039f      	lsls	r7, r3, #14
 800a3ea:	d4f7      	bmi.n	800a3dc <HAL_RCC_OscConfig+0x320>
 800a3ec:	e69c      	b.n	800a128 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800a3ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a3f0:	f023 0301 	bic.w	r3, r3, #1
 800a3f4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800a3f6:	f7fb fc85 	bl	8005d04 <HAL_GetTick>
 800a3fa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a3fc:	e004      	b.n	800a408 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3fe:	f7fb fc81 	bl	8005d04 <HAL_GetTick>
 800a402:	1b80      	subs	r0, r0, r6
 800a404:	2802      	cmp	r0, #2
 800a406:	d8da      	bhi.n	800a3be <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a408:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a40a:	0799      	lsls	r1, r3, #30
 800a40c:	d4f7      	bmi.n	800a3fe <HAL_RCC_OscConfig+0x342>
 800a40e:	e6dd      	b.n	800a1cc <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a416:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a418:	f7fb fc74 	bl	8005d04 <HAL_GetTick>
 800a41c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a41e:	e004      	b.n	800a42a <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a420:	f7fb fc70 	bl	8005d04 <HAL_GetTick>
 800a424:	1b80      	subs	r0, r0, r6
 800a426:	2802      	cmp	r0, #2
 800a428:	d8c9      	bhi.n	800a3be <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a42a:	682b      	ldr	r3, [r5, #0]
 800a42c:	0498      	lsls	r0, r3, #18
 800a42e:	d4f7      	bmi.n	800a420 <HAL_RCC_OscConfig+0x364>
 800a430:	e6e5      	b.n	800a1fe <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 800a432:	682b      	ldr	r3, [r5, #0]
 800a434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a438:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a43a:	f7fb fc63 	bl	8005d04 <HAL_GetTick>
 800a43e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a440:	e004      	b.n	800a44c <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a442:	f7fb fc5f 	bl	8005d04 <HAL_GetTick>
 800a446:	1b80      	subs	r0, r0, r6
 800a448:	2802      	cmp	r0, #2
 800a44a:	d8b8      	bhi.n	800a3be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	05df      	lsls	r7, r3, #23
 800a450:	d4f7      	bmi.n	800a442 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	e6a2      	b.n	800a19c <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800a456:	f023 0301 	bic.w	r3, r3, #1
 800a45a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a45c:	f7fb fc52 	bl	8005d04 <HAL_GetTick>
 800a460:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a462:	e004      	b.n	800a46e <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a464:	f7fb fc4e 	bl	8005d04 <HAL_GetTick>
 800a468:	1b80      	subs	r0, r0, r6
 800a46a:	2802      	cmp	r0, #2
 800a46c:	d8a7      	bhi.n	800a3be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a46e:	682b      	ldr	r3, [r5, #0]
 800a470:	0758      	lsls	r0, r3, #29
 800a472:	d4f7      	bmi.n	800a464 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	e65b      	b.n	800a130 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a478:	0790      	lsls	r0, r2, #30
 800a47a:	f47f af1a 	bne.w	800a2b2 <HAL_RCC_OscConfig+0x1f6>
 800a47e:	e6e7      	b.n	800a250 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a480:	686b      	ldr	r3, [r5, #4]
 800a482:	6922      	ldr	r2, [r4, #16]
 800a484:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a488:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a48c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a48e:	6823      	ldr	r3, [r4, #0]
 800a490:	e64e      	b.n	800a130 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 800a492:	2001      	movs	r0, #1
}
 800a494:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a496:	4a62      	ldr	r2, [pc, #392]	; (800a620 <HAL_RCC_OscConfig+0x564>)
 800a498:	6a21      	ldr	r1, [r4, #32]
 800a49a:	68d3      	ldr	r3, [r2, #12]
 800a49c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800a4a0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a4a4:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a4a6:	6823      	ldr	r3, [r4, #0]
 800a4a8:	e678      	b.n	800a19c <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800a4aa:	f7fb fc2b 	bl	8005d04 <HAL_GetTick>
 800a4ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a4b0:	e004      	b.n	800a4bc <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4b2:	f7fb fc27 	bl	8005d04 <HAL_GetTick>
 800a4b6:	1b80      	subs	r0, r0, r6
 800a4b8:	2802      	cmp	r0, #2
 800a4ba:	d880      	bhi.n	800a3be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	0199      	lsls	r1, r3, #6
 800a4c0:	d4f7      	bmi.n	800a4b2 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a4c2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800a4c4:	4b57      	ldr	r3, [pc, #348]	; (800a624 <HAL_RCC_OscConfig+0x568>)
 800a4c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a4c8:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a4ca:	4957      	ldr	r1, [pc, #348]	; (800a628 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a4cc:	4e54      	ldr	r6, [pc, #336]	; (800a620 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a4d2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800a4d6:	62ab      	str	r3, [r5, #40]	; 0x28
 800a4d8:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	3a01      	subs	r2, #1
 800a4e0:	025b      	lsls	r3, r3, #9
 800a4e2:	0412      	lsls	r2, r2, #16
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a4ee:	3a01      	subs	r2, #1
 800a4f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a4f8:	3a01      	subs	r2, #1
 800a4fa:	0612      	lsls	r2, r2, #24
 800a4fc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a500:	4313      	orrs	r3, r2
 800a502:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800a504:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a506:	f023 0301 	bic.w	r3, r3, #1
 800a50a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a50c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800a50e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a510:	4011      	ands	r1, r2
 800a512:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800a516:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a518:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a51a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a51c:	f023 030c 	bic.w	r3, r3, #12
 800a520:	4313      	orrs	r3, r2
 800a522:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a524:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a526:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a528:	f023 0302 	bic.w	r3, r3, #2
 800a52c:	4313      	orrs	r3, r2
 800a52e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a530:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a536:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a538:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a53a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a53e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a540:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a542:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a546:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800a548:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a54a:	f043 0301 	orr.w	r3, r3, #1
 800a54e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800a550:	682b      	ldr	r3, [r5, #0]
 800a552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a556:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a558:	f7fb fbd4 	bl	8005d04 <HAL_GetTick>
 800a55c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a55e:	e005      	b.n	800a56c <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a560:	f7fb fbd0 	bl	8005d04 <HAL_GetTick>
 800a564:	1b00      	subs	r0, r0, r4
 800a566:	2802      	cmp	r0, #2
 800a568:	f63f af29 	bhi.w	800a3be <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a56c:	6833      	ldr	r3, [r6, #0]
 800a56e:	019a      	lsls	r2, r3, #6
 800a570:	d5f6      	bpl.n	800a560 <HAL_RCC_OscConfig+0x4a4>
 800a572:	e665      	b.n	800a240 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a574:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a576:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a578:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a57a:	f43f ae62 	beq.w	800a242 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a57e:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a582:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a584:	428b      	cmp	r3, r1
 800a586:	f47f aeb9 	bne.w	800a2fc <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a58a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a58e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a590:	429a      	cmp	r2, r3
 800a592:	f47f aeb3 	bne.w	800a2fc <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a596:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a598:	f3c6 0208 	ubfx	r2, r6, #0, #9
 800a59c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	f47f aeac 	bne.w	800a2fc <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5a6:	f3c6 2246 	ubfx	r2, r6, #9, #7
 800a5aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	f47f aea5 	bne.w	800a2fc <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a5b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a5b4:	f3c6 4206 	ubfx	r2, r6, #16, #7
 800a5b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	f47f ae9e 	bne.w	800a2fc <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a5c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a5c2:	f3c6 6606 	ubfx	r6, r6, #24, #7
 800a5c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a5c8:	429e      	cmp	r6, r3
 800a5ca:	f47f ae97 	bne.w	800a2fc <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a5ce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a5d0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a5d2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	f43f ae32 	beq.w	800a240 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 800a5dc:	4a10      	ldr	r2, [pc, #64]	; (800a620 <HAL_RCC_OscConfig+0x564>)
 800a5de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a5e0:	f023 0301 	bic.w	r3, r3, #1
 800a5e4:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800a5e6:	f7fb fb8d 	bl	8005d04 <HAL_GetTick>
 800a5ea:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a5ec:	f7fb fb8a 	bl	8005d04 <HAL_GetTick>
 800a5f0:	42a8      	cmp	r0, r5
 800a5f2:	d0fb      	beq.n	800a5ec <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a5f4:	4a0a      	ldr	r2, [pc, #40]	; (800a620 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
 800a5f6:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a5f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a5fa:	4b0b      	ldr	r3, [pc, #44]	; (800a628 <HAL_RCC_OscConfig+0x56c>)
 800a5fc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a5fe:	4023      	ands	r3, r4
 800a600:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a604:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800a606:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a608:	f043 0301 	orr.w	r3, r3, #1
 800a60c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800a60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a610:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a614:	601a      	str	r2, [r3, #0]
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a61c:	601a      	str	r2, [r3, #0]
 800a61e:	e575      	b.n	800a10c <HAL_RCC_OscConfig+0x50>
 800a620:	58024400 	.word	0x58024400
 800a624:	fffffc0c 	.word	0xfffffc0c
 800a628:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a62c:	4d1c      	ldr	r5, [pc, #112]	; (800a6a0 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a62e:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a632:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a634:	f023 0301 	bic.w	r3, r3, #1
 800a638:	672b      	str	r3, [r5, #112]	; 0x70
 800a63a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a63c:	f023 0304 	bic.w	r3, r3, #4
 800a640:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800a642:	f7fb fb5f 	bl	8005d04 <HAL_GetTick>
 800a646:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a648:	e005      	b.n	800a656 <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a64a:	f7fb fb5b 	bl	8005d04 <HAL_GetTick>
 800a64e:	1b80      	subs	r0, r0, r6
 800a650:	42b8      	cmp	r0, r7
 800a652:	f63f aeb4 	bhi.w	800a3be <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a656:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a658:	0798      	lsls	r0, r3, #30
 800a65a:	d4f6      	bmi.n	800a64a <HAL_RCC_OscConfig+0x58e>
 800a65c:	e5d3      	b.n	800a206 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a65e:	68eb      	ldr	r3, [r5, #12]
 800a660:	6a22      	ldr	r2, [r4, #32]
 800a662:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800a666:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a66a:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a66c:	6823      	ldr	r3, [r4, #0]
 800a66e:	e595      	b.n	800a19c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a670:	4a0b      	ldr	r2, [pc, #44]	; (800a6a0 <HAL_RCC_OscConfig+0x5e4>)
 800a672:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800a674:	f043 0301 	orr.w	r3, r3, #1
 800a678:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a67a:	e690      	b.n	800a39e <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a67c:	4a08      	ldr	r2, [pc, #32]	; (800a6a0 <HAL_RCC_OscConfig+0x5e4>)
 800a67e:	6853      	ldr	r3, [r2, #4]
 800a680:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a684:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a688:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a68a:	6823      	ldr	r3, [r4, #0]
 800a68c:	e586      	b.n	800a19c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a68e:	f042 0204 	orr.w	r2, r2, #4
 800a692:	671a      	str	r2, [r3, #112]	; 0x70
 800a694:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a696:	f042 0201 	orr.w	r2, r2, #1
 800a69a:	671a      	str	r2, [r3, #112]	; 0x70
 800a69c:	e67f      	b.n	800a39e <HAL_RCC_OscConfig+0x2e2>
 800a69e:	bf00      	nop
 800a6a0:	58024400 	.word	0x58024400

0800a6a4 <HAL_RCC_MCOConfig>:
{
 800a6a4:	b570      	push	{r4, r5, r6, lr}
    MCO1_CLK_ENABLE();
 800a6a6:	4e25      	ldr	r6, [pc, #148]	; (800a73c <HAL_RCC_MCOConfig+0x98>)
{
 800a6a8:	b088      	sub	sp, #32
 800a6aa:	460d      	mov	r5, r1
 800a6ac:	4614      	mov	r4, r2
    MCO1_CLK_ENABLE();
 800a6ae:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800a6b2:	b9f8      	cbnz	r0, 800a6f4 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800a6b4:	f043 0301 	orr.w	r3, r3, #1
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a6b8:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a6bc:	a902      	add	r1, sp, #8
    MCO1_CLK_ENABLE();
 800a6be:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800a6c2:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a6c6:	9006      	str	r0, [sp, #24]
    MCO1_CLK_ENABLE();
 800a6c8:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a6cc:	481c      	ldr	r0, [pc, #112]	; (800a740 <HAL_RCC_MCOConfig+0x9c>)
    MCO1_CLK_ENABLE();
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a6d2:	2302      	movs	r3, #2
 800a6d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	2303      	movs	r3, #3
 800a6dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a6e0:	f7fe fa7a 	bl	8008bd8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a6e4:	6932      	ldr	r2, [r6, #16]
 800a6e6:	f022 72fe 	bic.w	r2, r2, #33292288	; 0x1fc0000
 800a6ea:	432a      	orrs	r2, r5
 800a6ec:	4322      	orrs	r2, r4
 800a6ee:	6132      	str	r2, [r6, #16]
}
 800a6f0:	b008      	add	sp, #32
 800a6f2:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800a6f4:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a6f8:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a6fc:	4811      	ldr	r0, [pc, #68]	; (800a744 <HAL_RCC_MCOConfig+0xa0>)
    MCO2_CLK_ENABLE();
 800a6fe:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800a702:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800a706:	f003 0304 	and.w	r3, r3, #4
 800a70a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a70c:	2302      	movs	r3, #2
    MCO2_CLK_ENABLE();
 800a70e:	9901      	ldr	r1, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a710:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a712:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a716:	2200      	movs	r2, #0
 800a718:	2303      	movs	r3, #3
 800a71a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a71e:	2300      	movs	r3, #0
 800a720:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a722:	f7fe fa59 	bl	8008bd8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a726:	6933      	ldr	r3, [r6, #16]
 800a728:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800a72c:	ea43 0105 	orr.w	r1, r3, r5
 800a730:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 800a734:	6131      	str	r1, [r6, #16]
}
 800a736:	b008      	add	sp, #32
 800a738:	bd70      	pop	{r4, r5, r6, pc}
 800a73a:	bf00      	nop
 800a73c:	58024400 	.word	0x58024400
 800a740:	58020000 	.word	0x58020000
 800a744:	58020800 	.word	0x58020800

0800a748 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a748:	4a47      	ldr	r2, [pc, #284]	; (800a868 <HAL_RCC_GetSysClockFreq+0x120>)
 800a74a:	6913      	ldr	r3, [r2, #16]
 800a74c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a750:	2b10      	cmp	r3, #16
 800a752:	d004      	beq.n	800a75e <HAL_RCC_GetSysClockFreq+0x16>
 800a754:	2b18      	cmp	r3, #24
 800a756:	d00d      	beq.n	800a774 <HAL_RCC_GetSysClockFreq+0x2c>
 800a758:	b11b      	cbz	r3, 800a762 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800a75a:	4844      	ldr	r0, [pc, #272]	; (800a86c <HAL_RCC_GetSysClockFreq+0x124>)
 800a75c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a75e:	4844      	ldr	r0, [pc, #272]	; (800a870 <HAL_RCC_GetSysClockFreq+0x128>)
 800a760:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a762:	6813      	ldr	r3, [r2, #0]
 800a764:	0699      	lsls	r1, r3, #26
 800a766:	d54a      	bpl.n	800a7fe <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a768:	6813      	ldr	r3, [r2, #0]
 800a76a:	4842      	ldr	r0, [pc, #264]	; (800a874 <HAL_RCC_GetSysClockFreq+0x12c>)
 800a76c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a770:	40d8      	lsrs	r0, r3
 800a772:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a774:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800a776:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a778:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a77a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 800a77c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a780:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a782:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800a786:	d038      	beq.n	800a7fa <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a788:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a78c:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a790:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a794:	fb05 f101 	mul.w	r1, r5, r1
 800a798:	2b01      	cmp	r3, #1
 800a79a:	ee07 1a90 	vmov	s15, r1
 800a79e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 800a7a2:	d002      	beq.n	800a7aa <HAL_RCC_GetSysClockFreq+0x62>
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d02c      	beq.n	800a802 <HAL_RCC_GetSysClockFreq+0xba>
 800a7a8:	b393      	cbz	r3, 800a810 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7aa:	ee07 0a90 	vmov	s15, r0
 800a7ae:	eddf 6a32 	vldr	s13, [pc, #200]	; 800a878 <HAL_RCC_GetSysClockFreq+0x130>
 800a7b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a7b8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800a7bc:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800a87c <HAL_RCC_GetSysClockFreq+0x134>
 800a7c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c4:	ee06 3a90 	vmov	s13, r3
 800a7c8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800a7cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a7d0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a7d4:	eee7 6a25 	vfma.f32	s13, s14, s11
 800a7d8:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a7dc:	4b22      	ldr	r3, [pc, #136]	; (800a868 <HAL_RCC_GetSysClockFreq+0x120>)
 800a7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a7e4:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a7e6:	ee07 3a90 	vmov	s15, r3
 800a7ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7f6:	ee17 0a90 	vmov	r0, s15
}
 800a7fa:	bc30      	pop	{r4, r5}
 800a7fc:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a7fe:	481d      	ldr	r0, [pc, #116]	; (800a874 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 800a800:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a802:	ee07 0a90 	vmov	s15, r0
 800a806:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800a880 <HAL_RCC_GetSysClockFreq+0x138>
 800a80a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a80e:	e7d2      	b.n	800a7b6 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a810:	6813      	ldr	r3, [r2, #0]
 800a812:	069b      	lsls	r3, r3, #26
 800a814:	d520      	bpl.n	800a858 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a816:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a818:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a81c:	4915      	ldr	r1, [pc, #84]	; (800a874 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a81e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a822:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a824:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a82c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800a87c <HAL_RCC_GetSysClockFreq+0x134>
 800a830:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a834:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a836:	ee06 3a90 	vmov	s13, r3
 800a83a:	ee05 1a90 	vmov	s11, r1
 800a83e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a842:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800a846:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a84a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800a84e:	eee7 6a05 	vfma.f32	s13, s14, s10
 800a852:	ee66 6a26 	vmul.f32	s13, s12, s13
 800a856:	e7c1      	b.n	800a7dc <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a858:	ee07 0a90 	vmov	s15, r0
 800a85c:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a884 <HAL_RCC_GetSysClockFreq+0x13c>
 800a860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a864:	e7a7      	b.n	800a7b6 <HAL_RCC_GetSysClockFreq+0x6e>
 800a866:	bf00      	nop
 800a868:	58024400 	.word	0x58024400
 800a86c:	003d0900 	.word	0x003d0900
 800a870:	017d7840 	.word	0x017d7840
 800a874:	03d09000 	.word	0x03d09000
 800a878:	4a742400 	.word	0x4a742400
 800a87c:	39000000 	.word	0x39000000
 800a880:	4bbebc20 	.word	0x4bbebc20
 800a884:	4c742400 	.word	0x4c742400

0800a888 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800a888:	2800      	cmp	r0, #0
 800a88a:	f000 810c 	beq.w	800aaa6 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a88e:	4a8c      	ldr	r2, [pc, #560]	; (800aac0 <HAL_RCC_ClockConfig+0x238>)
 800a890:	6813      	ldr	r3, [r2, #0]
 800a892:	f003 030f 	and.w	r3, r3, #15
 800a896:	428b      	cmp	r3, r1
{
 800a898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a89c:	4604      	mov	r4, r0
 800a89e:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a8a0:	d20c      	bcs.n	800a8bc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8a2:	6813      	ldr	r3, [r2, #0]
 800a8a4:	f023 030f 	bic.w	r3, r3, #15
 800a8a8:	430b      	orrs	r3, r1
 800a8aa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8ac:	6813      	ldr	r3, [r2, #0]
 800a8ae:	f003 030f 	and.w	r3, r3, #15
 800a8b2:	428b      	cmp	r3, r1
 800a8b4:	d002      	beq.n	800a8bc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800a8b6:	2001      	movs	r0, #1
}
 800a8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	075f      	lsls	r7, r3, #29
 800a8c0:	d50b      	bpl.n	800a8da <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a8c2:	4980      	ldr	r1, [pc, #512]	; (800aac4 <HAL_RCC_ClockConfig+0x23c>)
 800a8c4:	6920      	ldr	r0, [r4, #16]
 800a8c6:	698a      	ldr	r2, [r1, #24]
 800a8c8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800a8cc:	4290      	cmp	r0, r2
 800a8ce:	d904      	bls.n	800a8da <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a8d0:	698a      	ldr	r2, [r1, #24]
 800a8d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a8d6:	4302      	orrs	r2, r0
 800a8d8:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8da:	071e      	lsls	r6, r3, #28
 800a8dc:	d50b      	bpl.n	800a8f6 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a8de:	4979      	ldr	r1, [pc, #484]	; (800aac4 <HAL_RCC_ClockConfig+0x23c>)
 800a8e0:	6960      	ldr	r0, [r4, #20]
 800a8e2:	69ca      	ldr	r2, [r1, #28]
 800a8e4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800a8e8:	4290      	cmp	r0, r2
 800a8ea:	d904      	bls.n	800a8f6 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a8ec:	69ca      	ldr	r2, [r1, #28]
 800a8ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a8f2:	4302      	orrs	r2, r0
 800a8f4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8f6:	06d8      	lsls	r0, r3, #27
 800a8f8:	d50b      	bpl.n	800a912 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a8fa:	4972      	ldr	r1, [pc, #456]	; (800aac4 <HAL_RCC_ClockConfig+0x23c>)
 800a8fc:	69a0      	ldr	r0, [r4, #24]
 800a8fe:	69ca      	ldr	r2, [r1, #28]
 800a900:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800a904:	4290      	cmp	r0, r2
 800a906:	d904      	bls.n	800a912 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a908:	69ca      	ldr	r2, [r1, #28]
 800a90a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a90e:	4302      	orrs	r2, r0
 800a910:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a912:	0699      	lsls	r1, r3, #26
 800a914:	d50b      	bpl.n	800a92e <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a916:	496b      	ldr	r1, [pc, #428]	; (800aac4 <HAL_RCC_ClockConfig+0x23c>)
 800a918:	69e0      	ldr	r0, [r4, #28]
 800a91a:	6a0a      	ldr	r2, [r1, #32]
 800a91c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800a920:	4290      	cmp	r0, r2
 800a922:	d904      	bls.n	800a92e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a924:	6a0a      	ldr	r2, [r1, #32]
 800a926:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a92a:	4302      	orrs	r2, r0
 800a92c:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a92e:	079a      	lsls	r2, r3, #30
 800a930:	f140 80ab 	bpl.w	800aa8a <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a934:	4863      	ldr	r0, [pc, #396]	; (800aac4 <HAL_RCC_ClockConfig+0x23c>)
 800a936:	68e1      	ldr	r1, [r4, #12]
 800a938:	6982      	ldr	r2, [r0, #24]
 800a93a:	f002 020f 	and.w	r2, r2, #15
 800a93e:	4291      	cmp	r1, r2
 800a940:	d904      	bls.n	800a94c <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a942:	6982      	ldr	r2, [r0, #24]
 800a944:	f022 020f 	bic.w	r2, r2, #15
 800a948:	430a      	orrs	r2, r1
 800a94a:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a94c:	07d8      	lsls	r0, r3, #31
 800a94e:	d530      	bpl.n	800a9b2 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a950:	4a5c      	ldr	r2, [pc, #368]	; (800aac4 <HAL_RCC_ClockConfig+0x23c>)
 800a952:	68a1      	ldr	r1, [r4, #8]
 800a954:	6993      	ldr	r3, [r2, #24]
 800a956:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a95a:	430b      	orrs	r3, r1
 800a95c:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a95e:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a960:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a962:	2902      	cmp	r1, #2
 800a964:	f000 80a1 	beq.w	800aaaa <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a968:	2903      	cmp	r1, #3
 800a96a:	f000 8098 	beq.w	800aa9e <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a96e:	2901      	cmp	r1, #1
 800a970:	f000 80a1 	beq.w	800aab6 <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a974:	0758      	lsls	r0, r3, #29
 800a976:	d59e      	bpl.n	800a8b6 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a978:	4e52      	ldr	r6, [pc, #328]	; (800aac4 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a97a:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a97e:	6933      	ldr	r3, [r6, #16]
 800a980:	f023 0307 	bic.w	r3, r3, #7
 800a984:	430b      	orrs	r3, r1
 800a986:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800a988:	f7fb f9bc 	bl	8005d04 <HAL_GetTick>
 800a98c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a98e:	e005      	b.n	800a99c <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a990:	f7fb f9b8 	bl	8005d04 <HAL_GetTick>
 800a994:	1bc0      	subs	r0, r0, r7
 800a996:	4540      	cmp	r0, r8
 800a998:	f200 808b 	bhi.w	800aab2 <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a99c:	6933      	ldr	r3, [r6, #16]
 800a99e:	6862      	ldr	r2, [r4, #4]
 800a9a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9a4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800a9a8:	d1f2      	bne.n	800a990 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9aa:	6823      	ldr	r3, [r4, #0]
 800a9ac:	0799      	lsls	r1, r3, #30
 800a9ae:	d506      	bpl.n	800a9be <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a9b0:	68e1      	ldr	r1, [r4, #12]
 800a9b2:	4844      	ldr	r0, [pc, #272]	; (800aac4 <HAL_RCC_ClockConfig+0x23c>)
 800a9b4:	6982      	ldr	r2, [r0, #24]
 800a9b6:	f002 020f 	and.w	r2, r2, #15
 800a9ba:	428a      	cmp	r2, r1
 800a9bc:	d869      	bhi.n	800aa92 <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a9be:	4940      	ldr	r1, [pc, #256]	; (800aac0 <HAL_RCC_ClockConfig+0x238>)
 800a9c0:	680a      	ldr	r2, [r1, #0]
 800a9c2:	f002 020f 	and.w	r2, r2, #15
 800a9c6:	42aa      	cmp	r2, r5
 800a9c8:	d90a      	bls.n	800a9e0 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9ca:	680a      	ldr	r2, [r1, #0]
 800a9cc:	f022 020f 	bic.w	r2, r2, #15
 800a9d0:	432a      	orrs	r2, r5
 800a9d2:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9d4:	680a      	ldr	r2, [r1, #0]
 800a9d6:	f002 020f 	and.w	r2, r2, #15
 800a9da:	42aa      	cmp	r2, r5
 800a9dc:	f47f af6b 	bne.w	800a8b6 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a9e0:	075a      	lsls	r2, r3, #29
 800a9e2:	d50b      	bpl.n	800a9fc <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a9e4:	4937      	ldr	r1, [pc, #220]	; (800aac4 <HAL_RCC_ClockConfig+0x23c>)
 800a9e6:	6920      	ldr	r0, [r4, #16]
 800a9e8:	698a      	ldr	r2, [r1, #24]
 800a9ea:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800a9ee:	4290      	cmp	r0, r2
 800a9f0:	d204      	bcs.n	800a9fc <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a9f2:	698a      	ldr	r2, [r1, #24]
 800a9f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a9f8:	4302      	orrs	r2, r0
 800a9fa:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9fc:	071f      	lsls	r7, r3, #28
 800a9fe:	d50b      	bpl.n	800aa18 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aa00:	4930      	ldr	r1, [pc, #192]	; (800aac4 <HAL_RCC_ClockConfig+0x23c>)
 800aa02:	6960      	ldr	r0, [r4, #20]
 800aa04:	69ca      	ldr	r2, [r1, #28]
 800aa06:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800aa0a:	4290      	cmp	r0, r2
 800aa0c:	d204      	bcs.n	800aa18 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aa0e:	69ca      	ldr	r2, [r1, #28]
 800aa10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800aa14:	4302      	orrs	r2, r0
 800aa16:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa18:	06de      	lsls	r6, r3, #27
 800aa1a:	d50b      	bpl.n	800aa34 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aa1c:	4929      	ldr	r1, [pc, #164]	; (800aac4 <HAL_RCC_ClockConfig+0x23c>)
 800aa1e:	69a0      	ldr	r0, [r4, #24]
 800aa20:	69ca      	ldr	r2, [r1, #28]
 800aa22:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800aa26:	4290      	cmp	r0, r2
 800aa28:	d204      	bcs.n	800aa34 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aa2a:	69ca      	ldr	r2, [r1, #28]
 800aa2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800aa30:	4302      	orrs	r2, r0
 800aa32:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aa34:	069d      	lsls	r5, r3, #26
 800aa36:	d50b      	bpl.n	800aa50 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aa38:	4a22      	ldr	r2, [pc, #136]	; (800aac4 <HAL_RCC_ClockConfig+0x23c>)
 800aa3a:	69e1      	ldr	r1, [r4, #28]
 800aa3c:	6a13      	ldr	r3, [r2, #32]
 800aa3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa42:	4299      	cmp	r1, r3
 800aa44:	d204      	bcs.n	800aa50 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aa46:	6a13      	ldr	r3, [r2, #32]
 800aa48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa4c:	430b      	orrs	r3, r1
 800aa4e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa50:	f7ff fe7a 	bl	800a748 <HAL_RCC_GetSysClockFreq>
 800aa54:	4a1b      	ldr	r2, [pc, #108]	; (800aac4 <HAL_RCC_ClockConfig+0x23c>)
 800aa56:	4603      	mov	r3, r0
 800aa58:	481b      	ldr	r0, [pc, #108]	; (800aac8 <HAL_RCC_ClockConfig+0x240>)
 800aa5a:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa5c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa5e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800aa62:	4d1a      	ldr	r5, [pc, #104]	; (800aacc <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa64:	f002 020f 	and.w	r2, r2, #15
 800aa68:	4c19      	ldr	r4, [pc, #100]	; (800aad0 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa6a:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa6c:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa6e:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800aa72:	4818      	ldr	r0, [pc, #96]	; (800aad4 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa74:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa78:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800aa7a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800aa7c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa7e:	40d3      	lsrs	r3, r2
 800aa80:	6023      	str	r3, [r4, #0]
}
 800aa82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800aa86:	f7fb b8db 	b.w	8005c40 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa8a:	07da      	lsls	r2, r3, #31
 800aa8c:	f53f af60 	bmi.w	800a950 <HAL_RCC_ClockConfig+0xc8>
 800aa90:	e795      	b.n	800a9be <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa92:	6982      	ldr	r2, [r0, #24]
 800aa94:	f022 020f 	bic.w	r2, r2, #15
 800aa98:	4311      	orrs	r1, r2
 800aa9a:	6181      	str	r1, [r0, #24]
 800aa9c:	e78f      	b.n	800a9be <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa9e:	019f      	lsls	r7, r3, #6
 800aaa0:	f53f af6a 	bmi.w	800a978 <HAL_RCC_ClockConfig+0xf0>
 800aaa4:	e707      	b.n	800a8b6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800aaa6:	2001      	movs	r0, #1
}
 800aaa8:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aaaa:	039b      	lsls	r3, r3, #14
 800aaac:	f53f af64 	bmi.w	800a978 <HAL_RCC_ClockConfig+0xf0>
 800aab0:	e701      	b.n	800a8b6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800aab2:	2003      	movs	r0, #3
 800aab4:	e700      	b.n	800a8b8 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aab6:	05de      	lsls	r6, r3, #23
 800aab8:	f53f af5e 	bmi.w	800a978 <HAL_RCC_ClockConfig+0xf0>
 800aabc:	e6fb      	b.n	800a8b6 <HAL_RCC_ClockConfig+0x2e>
 800aabe:	bf00      	nop
 800aac0:	52002000 	.word	0x52002000
 800aac4:	58024400 	.word	0x58024400
 800aac8:	0801b244 	.word	0x0801b244
 800aacc:	24000310 	.word	0x24000310
 800aad0:	24000314 	.word	0x24000314
 800aad4:	2400031c 	.word	0x2400031c

0800aad8 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aad8:	4a18      	ldr	r2, [pc, #96]	; (800ab3c <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aada:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aadc:	6913      	ldr	r3, [r2, #16]
 800aade:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aae2:	2b10      	cmp	r3, #16
 800aae4:	d01a      	beq.n	800ab1c <HAL_RCC_GetHCLKFreq+0x44>
 800aae6:	2b18      	cmp	r3, #24
 800aae8:	d023      	beq.n	800ab32 <HAL_RCC_GetHCLKFreq+0x5a>
 800aaea:	b1cb      	cbz	r3, 800ab20 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 800aaec:	4814      	ldr	r0, [pc, #80]	; (800ab40 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aaee:	4b13      	ldr	r3, [pc, #76]	; (800ab3c <HAL_RCC_GetHCLKFreq+0x64>)
 800aaf0:	4914      	ldr	r1, [pc, #80]	; (800ab44 <HAL_RCC_GetHCLKFreq+0x6c>)
 800aaf2:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aaf4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aaf6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aafa:	4c13      	ldr	r4, [pc, #76]	; (800ab48 <HAL_RCC_GetHCLKFreq+0x70>)
 800aafc:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ab00:	4d12      	ldr	r5, [pc, #72]	; (800ab4c <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ab02:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab04:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ab06:	f002 021f 	and.w	r2, r2, #31
 800ab0a:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab0e:	f003 001f 	and.w	r0, r3, #31
 800ab12:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800ab16:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab18:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800ab1a:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab1c:	480c      	ldr	r0, [pc, #48]	; (800ab50 <HAL_RCC_GetHCLKFreq+0x78>)
 800ab1e:	e7e6      	b.n	800aaee <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab20:	6813      	ldr	r3, [r2, #0]
 800ab22:	069b      	lsls	r3, r3, #26
 800ab24:	d508      	bpl.n	800ab38 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab26:	6812      	ldr	r2, [r2, #0]
 800ab28:	480a      	ldr	r0, [pc, #40]	; (800ab54 <HAL_RCC_GetHCLKFreq+0x7c>)
 800ab2a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800ab2e:	40d0      	lsrs	r0, r2
 800ab30:	e7dd      	b.n	800aaee <HAL_RCC_GetHCLKFreq+0x16>
 800ab32:	f7ff fa3f 	bl	8009fb4 <HAL_RCC_GetSysClockFreq.part.0>
 800ab36:	e7da      	b.n	800aaee <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ab38:	4806      	ldr	r0, [pc, #24]	; (800ab54 <HAL_RCC_GetHCLKFreq+0x7c>)
 800ab3a:	e7d8      	b.n	800aaee <HAL_RCC_GetHCLKFreq+0x16>
 800ab3c:	58024400 	.word	0x58024400
 800ab40:	003d0900 	.word	0x003d0900
 800ab44:	0801b244 	.word	0x0801b244
 800ab48:	24000314 	.word	0x24000314
 800ab4c:	24000310 	.word	0x24000310
 800ab50:	017d7840 	.word	0x017d7840
 800ab54:	03d09000 	.word	0x03d09000

0800ab58 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab58:	4a1c      	ldr	r2, [pc, #112]	; (800abcc <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab5a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab5c:	6913      	ldr	r3, [r2, #16]
 800ab5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab62:	2b10      	cmp	r3, #16
 800ab64:	d021      	beq.n	800abaa <HAL_RCC_GetPCLK1Freq+0x52>
 800ab66:	2b18      	cmp	r3, #24
 800ab68:	d02b      	beq.n	800abc2 <HAL_RCC_GetPCLK1Freq+0x6a>
 800ab6a:	b303      	cbz	r3, 800abae <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800ab6c:	4818      	ldr	r0, [pc, #96]	; (800abd0 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ab6e:	4a17      	ldr	r2, [pc, #92]	; (800abcc <HAL_RCC_GetPCLK1Freq+0x74>)
 800ab70:	4918      	ldr	r1, [pc, #96]	; (800abd4 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800ab72:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800ab74:	4d18      	ldr	r5, [pc, #96]	; (800abd8 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ab76:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab7a:	4c18      	ldr	r4, [pc, #96]	; (800abdc <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ab7c:	5ccb      	ldrb	r3, [r1, r3]
 800ab7e:	f003 031f 	and.w	r3, r3, #31
 800ab82:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab86:	6990      	ldr	r0, [r2, #24]
 800ab88:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800ab8c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab8e:	5c08      	ldrb	r0, [r1, r0]
 800ab90:	f000 001f 	and.w	r0, r0, #31
 800ab94:	40c3      	lsrs	r3, r0
 800ab96:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ab98:	69d2      	ldr	r2, [r2, #28]
 800ab9a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800ab9e:	5c88      	ldrb	r0, [r1, r2]
 800aba0:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800aba4:	fa23 f000 	lsr.w	r0, r3, r0
 800aba8:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800abaa:	480d      	ldr	r0, [pc, #52]	; (800abe0 <HAL_RCC_GetPCLK1Freq+0x88>)
 800abac:	e7df      	b.n	800ab6e <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abae:	6813      	ldr	r3, [r2, #0]
 800abb0:	069b      	lsls	r3, r3, #26
 800abb2:	d509      	bpl.n	800abc8 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abb4:	6810      	ldr	r0, [r2, #0]
 800abb6:	4b0b      	ldr	r3, [pc, #44]	; (800abe4 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800abb8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800abbc:	fa23 f000 	lsr.w	r0, r3, r0
 800abc0:	e7d5      	b.n	800ab6e <HAL_RCC_GetPCLK1Freq+0x16>
 800abc2:	f7ff f9f7 	bl	8009fb4 <HAL_RCC_GetSysClockFreq.part.0>
 800abc6:	e7d2      	b.n	800ab6e <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800abc8:	4806      	ldr	r0, [pc, #24]	; (800abe4 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800abca:	e7d0      	b.n	800ab6e <HAL_RCC_GetPCLK1Freq+0x16>
 800abcc:	58024400 	.word	0x58024400
 800abd0:	003d0900 	.word	0x003d0900
 800abd4:	0801b244 	.word	0x0801b244
 800abd8:	24000310 	.word	0x24000310
 800abdc:	24000314 	.word	0x24000314
 800abe0:	017d7840 	.word	0x017d7840
 800abe4:	03d09000 	.word	0x03d09000

0800abe8 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800abe8:	4a1c      	ldr	r2, [pc, #112]	; (800ac5c <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800abea:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800abec:	6913      	ldr	r3, [r2, #16]
 800abee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abf2:	2b10      	cmp	r3, #16
 800abf4:	d021      	beq.n	800ac3a <HAL_RCC_GetPCLK2Freq+0x52>
 800abf6:	2b18      	cmp	r3, #24
 800abf8:	d02b      	beq.n	800ac52 <HAL_RCC_GetPCLK2Freq+0x6a>
 800abfa:	b303      	cbz	r3, 800ac3e <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800abfc:	4818      	ldr	r0, [pc, #96]	; (800ac60 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800abfe:	4a17      	ldr	r2, [pc, #92]	; (800ac5c <HAL_RCC_GetPCLK2Freq+0x74>)
 800ac00:	4918      	ldr	r1, [pc, #96]	; (800ac64 <HAL_RCC_GetPCLK2Freq+0x7c>)
 800ac02:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800ac04:	4d18      	ldr	r5, [pc, #96]	; (800ac68 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ac06:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac0a:	4c18      	ldr	r4, [pc, #96]	; (800ac6c <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ac0c:	5ccb      	ldrb	r3, [r1, r3]
 800ac0e:	f003 031f 	and.w	r3, r3, #31
 800ac12:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac16:	6990      	ldr	r0, [r2, #24]
 800ac18:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800ac1c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac1e:	5c08      	ldrb	r0, [r1, r0]
 800ac20:	f000 001f 	and.w	r0, r0, #31
 800ac24:	40c3      	lsrs	r3, r0
 800ac26:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ac28:	69d2      	ldr	r2, [r2, #28]
 800ac2a:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800ac2e:	5c88      	ldrb	r0, [r1, r2]
 800ac30:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ac34:	fa23 f000 	lsr.w	r0, r3, r0
 800ac38:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ac3a:	480d      	ldr	r0, [pc, #52]	; (800ac70 <HAL_RCC_GetPCLK2Freq+0x88>)
 800ac3c:	e7df      	b.n	800abfe <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac3e:	6813      	ldr	r3, [r2, #0]
 800ac40:	069b      	lsls	r3, r3, #26
 800ac42:	d509      	bpl.n	800ac58 <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac44:	6810      	ldr	r0, [r2, #0]
 800ac46:	4b0b      	ldr	r3, [pc, #44]	; (800ac74 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800ac48:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800ac4c:	fa23 f000 	lsr.w	r0, r3, r0
 800ac50:	e7d5      	b.n	800abfe <HAL_RCC_GetPCLK2Freq+0x16>
 800ac52:	f7ff f9af 	bl	8009fb4 <HAL_RCC_GetSysClockFreq.part.0>
 800ac56:	e7d2      	b.n	800abfe <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ac58:	4806      	ldr	r0, [pc, #24]	; (800ac74 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800ac5a:	e7d0      	b.n	800abfe <HAL_RCC_GetPCLK2Freq+0x16>
 800ac5c:	58024400 	.word	0x58024400
 800ac60:	003d0900 	.word	0x003d0900
 800ac64:	0801b244 	.word	0x0801b244
 800ac68:	24000310 	.word	0x24000310
 800ac6c:	24000314 	.word	0x24000314
 800ac70:	017d7840 	.word	0x017d7840
 800ac74:	03d09000 	.word	0x03d09000

0800ac78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ac78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac7a:	4c3a      	ldr	r4, [pc, #232]	; (800ad64 <RCCEx_PLL2_Config+0xec>)
 800ac7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ac7e:	f003 0303 	and.w	r3, r3, #3
 800ac82:	2b03      	cmp	r3, #3
 800ac84:	d067      	beq.n	800ad56 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ac86:	6823      	ldr	r3, [r4, #0]
 800ac88:	4606      	mov	r6, r0
 800ac8a:	460f      	mov	r7, r1
 800ac8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ac90:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac92:	f7fb f837 	bl	8005d04 <HAL_GetTick>
 800ac96:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ac98:	e004      	b.n	800aca4 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ac9a:	f7fb f833 	bl	8005d04 <HAL_GetTick>
 800ac9e:	1b43      	subs	r3, r0, r5
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	d856      	bhi.n	800ad52 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aca4:	6823      	ldr	r3, [r4, #0]
 800aca6:	011a      	lsls	r2, r3, #4
 800aca8:	d4f7      	bmi.n	800ac9a <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800acaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800acac:	6832      	ldr	r2, [r6, #0]
 800acae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800acb2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800acb6:	62a3      	str	r3, [r4, #40]	; 0x28
 800acb8:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800acbc:	3b01      	subs	r3, #1
 800acbe:	3a01      	subs	r2, #1
 800acc0:	025b      	lsls	r3, r3, #9
 800acc2:	0412      	lsls	r2, r2, #16
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800acca:	4313      	orrs	r3, r2
 800accc:	6872      	ldr	r2, [r6, #4]
 800acce:	3a01      	subs	r2, #1
 800acd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800acd4:	4313      	orrs	r3, r2
 800acd6:	6932      	ldr	r2, [r6, #16]
 800acd8:	3a01      	subs	r2, #1
 800acda:	0612      	lsls	r2, r2, #24
 800acdc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800ace0:	4313      	orrs	r3, r2
 800ace2:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ace4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ace6:	6972      	ldr	r2, [r6, #20]
 800ace8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800acec:	4313      	orrs	r3, r2
 800acee:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800acf0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800acf2:	69b3      	ldr	r3, [r6, #24]
 800acf4:	f022 0220 	bic.w	r2, r2, #32
 800acf8:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800acfa:	4b1b      	ldr	r3, [pc, #108]	; (800ad68 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800acfc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800acfe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ad00:	f022 0210 	bic.w	r2, r2, #16
 800ad04:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ad06:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ad08:	69f2      	ldr	r2, [r6, #28]
 800ad0a:	400b      	ands	r3, r1
 800ad0c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ad10:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ad12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ad14:	f043 0310 	orr.w	r3, r3, #16
 800ad18:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800ad1c:	b1ef      	cbz	r7, 800ad5a <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ad1e:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ad20:	bf0c      	ite	eq
 800ad22:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ad26:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800ad2a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ad2c:	4c0d      	ldr	r4, [pc, #52]	; (800ad64 <RCCEx_PLL2_Config+0xec>)
 800ad2e:	6823      	ldr	r3, [r4, #0]
 800ad30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad34:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad36:	f7fa ffe5 	bl	8005d04 <HAL_GetTick>
 800ad3a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad3c:	e004      	b.n	800ad48 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ad3e:	f7fa ffe1 	bl	8005d04 <HAL_GetTick>
 800ad42:	1b40      	subs	r0, r0, r5
 800ad44:	2802      	cmp	r0, #2
 800ad46:	d804      	bhi.n	800ad52 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	011b      	lsls	r3, r3, #4
 800ad4c:	d5f7      	bpl.n	800ad3e <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800ad4e:	2000      	movs	r0, #0
}
 800ad50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800ad52:	2003      	movs	r0, #3
}
 800ad54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800ad56:	2001      	movs	r0, #1
}
 800ad58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad60:	e7e4      	b.n	800ad2c <RCCEx_PLL2_Config+0xb4>
 800ad62:	bf00      	nop
 800ad64:	58024400 	.word	0x58024400
 800ad68:	ffff0007 	.word	0xffff0007

0800ad6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ad6e:	4c3a      	ldr	r4, [pc, #232]	; (800ae58 <RCCEx_PLL3_Config+0xec>)
 800ad70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ad72:	f003 0303 	and.w	r3, r3, #3
 800ad76:	2b03      	cmp	r3, #3
 800ad78:	d067      	beq.n	800ae4a <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	460f      	mov	r7, r1
 800ad80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad84:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad86:	f7fa ffbd 	bl	8005d04 <HAL_GetTick>
 800ad8a:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ad8c:	e004      	b.n	800ad98 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ad8e:	f7fa ffb9 	bl	8005d04 <HAL_GetTick>
 800ad92:	1b43      	subs	r3, r0, r5
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	d856      	bhi.n	800ae46 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ad98:	6823      	ldr	r3, [r4, #0]
 800ad9a:	009a      	lsls	r2, r3, #2
 800ad9c:	d4f7      	bmi.n	800ad8e <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ad9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ada0:	6832      	ldr	r2, [r6, #0]
 800ada2:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800ada6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800adaa:	62a3      	str	r3, [r4, #40]	; 0x28
 800adac:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800adb0:	3b01      	subs	r3, #1
 800adb2:	3a01      	subs	r2, #1
 800adb4:	025b      	lsls	r3, r3, #9
 800adb6:	0412      	lsls	r2, r2, #16
 800adb8:	b29b      	uxth	r3, r3
 800adba:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800adbe:	4313      	orrs	r3, r2
 800adc0:	6872      	ldr	r2, [r6, #4]
 800adc2:	3a01      	subs	r2, #1
 800adc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800adc8:	4313      	orrs	r3, r2
 800adca:	6932      	ldr	r2, [r6, #16]
 800adcc:	3a01      	subs	r2, #1
 800adce:	0612      	lsls	r2, r2, #24
 800add0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800add4:	4313      	orrs	r3, r2
 800add6:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800add8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800adda:	6972      	ldr	r2, [r6, #20]
 800addc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ade0:	4313      	orrs	r3, r2
 800ade2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ade4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ade6:	69b3      	ldr	r3, [r6, #24]
 800ade8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800adec:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800adee:	4b1b      	ldr	r3, [pc, #108]	; (800ae5c <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800adf0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800adf2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800adf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800adf8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800adfa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800adfc:	69f2      	ldr	r2, [r6, #28]
 800adfe:	400b      	ands	r3, r1
 800ae00:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ae04:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ae06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ae08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae0c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ae0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800ae10:	b1ef      	cbz	r7, 800ae4e <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ae12:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ae14:	bf0c      	ite	eq
 800ae16:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ae1a:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800ae1e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ae20:	4c0d      	ldr	r4, [pc, #52]	; (800ae58 <RCCEx_PLL3_Config+0xec>)
 800ae22:	6823      	ldr	r3, [r4, #0]
 800ae24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae28:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae2a:	f7fa ff6b 	bl	8005d04 <HAL_GetTick>
 800ae2e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ae30:	e004      	b.n	800ae3c <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ae32:	f7fa ff67 	bl	8005d04 <HAL_GetTick>
 800ae36:	1b40      	subs	r0, r0, r5
 800ae38:	2802      	cmp	r0, #2
 800ae3a:	d804      	bhi.n	800ae46 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ae3c:	6823      	ldr	r3, [r4, #0]
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	d5f7      	bpl.n	800ae32 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800ae42:	2000      	movs	r0, #0
}
 800ae44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800ae46:	2003      	movs	r0, #3
}
 800ae48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800ae4a:	2001      	movs	r0, #1
}
 800ae4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ae4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ae52:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae54:	e7e4      	b.n	800ae20 <RCCEx_PLL3_Config+0xb4>
 800ae56:	bf00      	nop
 800ae58:	58024400 	.word	0x58024400
 800ae5c:	ffff0007 	.word	0xffff0007

0800ae60 <HAL_RCCEx_PeriphCLKConfig>:
{
 800ae60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae64:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800ae68:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae6a:	011d      	lsls	r5, r3, #4
 800ae6c:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800ae70:	d523      	bpl.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800ae72:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800ae74:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800ae78:	f000 854f 	beq.w	800b91a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800ae7c:	d812      	bhi.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ae7e:	2900      	cmp	r1, #0
 800ae80:	f000 85a5 	beq.w	800b9ce <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 800ae84:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ae88:	f040 859e 	bne.w	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae8c:	2102      	movs	r1, #2
 800ae8e:	3008      	adds	r0, #8
 800ae90:	f7ff fef2 	bl	800ac78 <RCCEx_PLL2_Config>
 800ae94:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800ae96:	2e00      	cmp	r6, #0
 800ae98:	f040 851e 	bne.w	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0xa78>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ae9c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ae9e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800aea2:	e003      	b.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800aea4:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800aea8:	f040 858e 	bne.w	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aeac:	4dae      	ldr	r5, [pc, #696]	; (800b168 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800aeae:	2600      	movs	r6, #0
 800aeb0:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800aeb2:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 800aeb6:	4301      	orrs	r1, r0
 800aeb8:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aeba:	05d8      	lsls	r0, r3, #23
 800aebc:	d50a      	bpl.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
 800aebe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800aec0:	2904      	cmp	r1, #4
 800aec2:	d806      	bhi.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800aec4:	e8df f011 	tbh	[pc, r1, lsl #1]
 800aec8:	05390532 	.word	0x05390532
 800aecc:	03100516 	.word	0x03100516
 800aed0:	0310      	.short	0x0310
 800aed2:	2601      	movs	r6, #1
 800aed4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800aed6:	0599      	lsls	r1, r3, #22
 800aed8:	d51d      	bpl.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
 800aeda:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800aedc:	2980      	cmp	r1, #128	; 0x80
 800aede:	f000 8512 	beq.w	800b906 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
 800aee2:	f200 80f9 	bhi.w	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800aee6:	2900      	cmp	r1, #0
 800aee8:	f000 8420 	beq.w	800b72c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800aeec:	2940      	cmp	r1, #64	; 0x40
 800aeee:	f040 80fa 	bne.w	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aef2:	2100      	movs	r1, #0
 800aef4:	f104 0008 	add.w	r0, r4, #8
 800aef8:	f7ff febe 	bl	800ac78 <RCCEx_PLL2_Config>
 800aefc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aefe:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800af02:	2d00      	cmp	r5, #0
 800af04:	f040 83eb 	bne.w	800b6de <HAL_RCCEx_PeriphCLKConfig+0x87e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800af08:	4f97      	ldr	r7, [pc, #604]	; (800b168 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800af0a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800af0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af0e:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 800af12:	4301      	orrs	r1, r0
 800af14:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800af16:	055f      	lsls	r7, r3, #21
 800af18:	d521      	bpl.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
 800af1a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800af1e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800af22:	f000 851d 	beq.w	800b960 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 800af26:	f200 80e1 	bhi.w	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800af2a:	2900      	cmp	r1, #0
 800af2c:	f000 8405 	beq.w	800b73a <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800af30:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800af34:	f040 80e2 	bne.w	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af38:	2100      	movs	r1, #0
 800af3a:	f104 0008 	add.w	r0, r4, #8
 800af3e:	f7ff fe9b 	bl	800ac78 <RCCEx_PLL2_Config>
 800af42:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800af44:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800af48:	2d00      	cmp	r5, #0
 800af4a:	f040 83cf 	bne.w	800b6ec <HAL_RCCEx_PeriphCLKConfig+0x88c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800af4e:	4f86      	ldr	r7, [pc, #536]	; (800b168 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800af50:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800af54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af56:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 800af5a:	4301      	orrs	r1, r0
 800af5c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800af5e:	0518      	lsls	r0, r3, #20
 800af60:	d521      	bpl.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
 800af62:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800af66:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800af6a:	f000 84b9 	beq.w	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0xa80>
 800af6e:	f200 80c8 	bhi.w	800b102 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800af72:	2900      	cmp	r1, #0
 800af74:	f000 83d4 	beq.w	800b720 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800af78:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800af7c:	f040 80c9 	bne.w	800b112 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af80:	2100      	movs	r1, #0
 800af82:	f104 0008 	add.w	r0, r4, #8
 800af86:	f7ff fe77 	bl	800ac78 <RCCEx_PLL2_Config>
 800af8a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800af8c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800af90:	2d00      	cmp	r5, #0
 800af92:	f040 83a2 	bne.w	800b6da <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800af96:	4f74      	ldr	r7, [pc, #464]	; (800b168 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800af98:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800af9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af9e:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 800afa2:	4301      	orrs	r1, r0
 800afa4:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800afa6:	0199      	lsls	r1, r3, #6
 800afa8:	d518      	bpl.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
 800afaa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800afac:	2920      	cmp	r1, #32
 800afae:	f000 841e 	beq.w	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x98e>
 800afb2:	f200 80b1 	bhi.w	800b118 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800afb6:	b139      	cbz	r1, 800afc8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800afb8:	2910      	cmp	r1, #16
 800afba:	f040 80b0 	bne.w	800b11e <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afbe:	486a      	ldr	r0, [pc, #424]	; (800b168 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800afc0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800afc2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800afc6:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800afc8:	2d00      	cmp	r5, #0
 800afca:	f040 83d3 	bne.w	800b774 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800afce:	4f66      	ldr	r7, [pc, #408]	; (800b168 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800afd0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800afd2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800afd4:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 800afd8:	4301      	orrs	r1, r0
 800afda:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800afdc:	04df      	lsls	r7, r3, #19
 800afde:	d51f      	bpl.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
 800afe0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800afe2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800afe6:	f000 84b1 	beq.w	800b94c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800afea:	f200 809b 	bhi.w	800b124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800afee:	2900      	cmp	r1, #0
 800aff0:	f000 8390 	beq.w	800b714 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800aff4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800aff8:	f040 809c 	bne.w	800b134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800affc:	2100      	movs	r1, #0
 800affe:	f104 0008 	add.w	r0, r4, #8
 800b002:	f7ff fe39 	bl	800ac78 <RCCEx_PLL2_Config>
 800b006:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b008:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b00c:	2d00      	cmp	r5, #0
 800b00e:	f040 8368 	bne.w	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b012:	4f55      	ldr	r7, [pc, #340]	; (800b168 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b014:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800b016:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b018:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b01c:	4301      	orrs	r1, r0
 800b01e:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b020:	0498      	lsls	r0, r3, #18
 800b022:	d51d      	bpl.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
 800b024:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b026:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800b02a:	f000 840f 	beq.w	800b84c <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 800b02e:	f200 8084 	bhi.w	800b13a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b032:	b159      	cbz	r1, 800b04c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800b034:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800b038:	f040 8087 	bne.w	800b14a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b03c:	2101      	movs	r1, #1
 800b03e:	f104 0008 	add.w	r0, r4, #8
 800b042:	f7ff fe19 	bl	800ac78 <RCCEx_PLL2_Config>
 800b046:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b048:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b04c:	2d00      	cmp	r5, #0
 800b04e:	f040 839b 	bne.w	800b788 <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b052:	4f45      	ldr	r7, [pc, #276]	; (800b168 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b054:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800b056:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b058:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800b05c:	4301      	orrs	r1, r0
 800b05e:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b060:	0459      	lsls	r1, r3, #17
 800b062:	d51d      	bpl.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
 800b064:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800b068:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800b06c:	f000 83fa 	beq.w	800b864 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800b070:	d86e      	bhi.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800b072:	b151      	cbz	r1, 800b08a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b074:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800b078:	d172      	bne.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b07a:	2101      	movs	r1, #1
 800b07c:	f104 0008 	add.w	r0, r4, #8
 800b080:	f7ff fdfa 	bl	800ac78 <RCCEx_PLL2_Config>
 800b084:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b086:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b08a:	2d00      	cmp	r5, #0
 800b08c:	f040 8380 	bne.w	800b790 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b090:	4f35      	ldr	r7, [pc, #212]	; (800b168 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800b092:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800b096:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b098:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 800b09c:	4301      	orrs	r1, r0
 800b09e:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b0a0:	041f      	lsls	r7, r3, #16
 800b0a2:	d50d      	bpl.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
 800b0a4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800b0a6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800b0aa:	f000 83c7 	beq.w	800b83c <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 800b0ae:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800b0b2:	f000 8225 	beq.w	800b500 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 800b0b6:	2900      	cmp	r1, #0
 800b0b8:	f000 822a 	beq.w	800b510 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800b0bc:	2601      	movs	r6, #1
 800b0be:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b0c0:	01d8      	lsls	r0, r3, #7
 800b0c2:	d55f      	bpl.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->FmcClockSelection)
 800b0c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b0c6:	2903      	cmp	r1, #3
 800b0c8:	f200 84bb 	bhi.w	800ba42 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 800b0cc:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b0d0:	03e10056 	.word	0x03e10056
 800b0d4:	0056004e 	.word	0x0056004e
    switch (PeriphClkInit->Sai23ClockSelection)
 800b0d8:	29c0      	cmp	r1, #192	; 0xc0
 800b0da:	f43f af12 	beq.w	800af02 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800b0de:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b0e2:	f43f af0e 	beq.w	800af02 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800b0e6:	2601      	movs	r6, #1
 800b0e8:	4635      	mov	r5, r6
 800b0ea:	e714      	b.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
 800b0ec:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 800b0f0:	f43f af2a 	beq.w	800af48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800b0f4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800b0f8:	f43f af26 	beq.w	800af48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800b0fc:	2601      	movs	r6, #1
 800b0fe:	4635      	mov	r5, r6
 800b100:	e72d      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
 800b102:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800b106:	f43f af43 	beq.w	800af90 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800b10a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800b10e:	f43f af3f 	beq.w	800af90 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800b112:	2601      	movs	r6, #1
 800b114:	4635      	mov	r5, r6
 800b116:	e746      	b.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 800b118:	2930      	cmp	r1, #48	; 0x30
 800b11a:	f43f af55 	beq.w	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b11e:	2601      	movs	r6, #1
 800b120:	4635      	mov	r5, r6
 800b122:	e75b      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
 800b124:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800b128:	f43f af70 	beq.w	800b00c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800b12c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800b130:	f43f af6c 	beq.w	800b00c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800b134:	2601      	movs	r6, #1
 800b136:	4635      	mov	r5, r6
 800b138:	e772      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
 800b13a:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 800b13e:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800b142:	d083      	beq.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800b144:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800b148:	d080      	beq.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800b14a:	2601      	movs	r6, #1
 800b14c:	4635      	mov	r5, r6
 800b14e:	e787      	b.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
 800b150:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800b154:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b158:	d097      	beq.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b15a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800b15e:	d094      	beq.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b160:	2601      	movs	r6, #1
 800b162:	4635      	mov	r5, r6
 800b164:	e79c      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800b166:	bf00      	nop
 800b168:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b16c:	2102      	movs	r1, #2
 800b16e:	f104 0008 	add.w	r0, r4, #8
 800b172:	f7ff fd81 	bl	800ac78 <RCCEx_PLL2_Config>
 800b176:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b178:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b17c:	2d00      	cmp	r5, #0
 800b17e:	f000 82fb 	beq.w	800b778 <HAL_RCCEx_PeriphCLKConfig+0x918>
 800b182:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b184:	0259      	lsls	r1, r3, #9
 800b186:	f100 825a 	bmi.w	800b63e <HAL_RCCEx_PeriphCLKConfig+0x7de>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b18a:	07d8      	lsls	r0, r3, #31
 800b18c:	d52f      	bpl.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart16ClockSelection)
 800b18e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800b190:	2928      	cmp	r1, #40	; 0x28
 800b192:	d82a      	bhi.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x38a>
 800b194:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b198:	002901fa 	.word	0x002901fa
 800b19c:	00290029 	.word	0x00290029
 800b1a0:	00290029 	.word	0x00290029
 800b1a4:	00290029 	.word	0x00290029
 800b1a8:	00290406 	.word	0x00290406
 800b1ac:	00290029 	.word	0x00290029
 800b1b0:	00290029 	.word	0x00290029
 800b1b4:	00290029 	.word	0x00290029
 800b1b8:	002901f2 	.word	0x002901f2
 800b1bc:	00290029 	.word	0x00290029
 800b1c0:	00290029 	.word	0x00290029
 800b1c4:	00290029 	.word	0x00290029
 800b1c8:	002901fa 	.word	0x002901fa
 800b1cc:	00290029 	.word	0x00290029
 800b1d0:	00290029 	.word	0x00290029
 800b1d4:	00290029 	.word	0x00290029
 800b1d8:	002901fa 	.word	0x002901fa
 800b1dc:	00290029 	.word	0x00290029
 800b1e0:	00290029 	.word	0x00290029
 800b1e4:	00290029 	.word	0x00290029
 800b1e8:	01fa      	.short	0x01fa
 800b1ea:	2601      	movs	r6, #1
 800b1ec:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b1ee:	0799      	lsls	r1, r3, #30
 800b1f0:	d517      	bpl.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b1f2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800b1f4:	2905      	cmp	r1, #5
 800b1f6:	f200 8420 	bhi.w	800ba3a <HAL_RCCEx_PeriphCLKConfig+0xbda>
 800b1fa:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b1fe:	000e      	.short	0x000e
 800b200:	000603bb 	.word	0x000603bb
 800b204:	000e000e 	.word	0x000e000e
 800b208:	000e      	.short	0x000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b20a:	2101      	movs	r1, #1
 800b20c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b210:	f7ff fdac 	bl	800ad6c <RCCEx_PLL3_Config>
 800b214:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b216:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b21a:	2d00      	cmp	r5, #0
 800b21c:	f000 8299 	beq.w	800b752 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 800b220:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b222:	075f      	lsls	r7, r3, #29
 800b224:	d518      	bpl.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b226:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800b22a:	2905      	cmp	r1, #5
 800b22c:	f200 840d 	bhi.w	800ba4a <HAL_RCCEx_PeriphCLKConfig+0xbea>
 800b230:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b234:	03ac000e 	.word	0x03ac000e
 800b238:	000e0006 	.word	0x000e0006
 800b23c:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b240:	2101      	movs	r1, #1
 800b242:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b246:	f7ff fd91 	bl	800ad6c <RCCEx_PLL3_Config>
 800b24a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b24c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b250:	2d00      	cmp	r5, #0
 800b252:	f000 8286 	beq.w	800b762 <HAL_RCCEx_PeriphCLKConfig+0x902>
 800b256:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b258:	0698      	lsls	r0, r3, #26
 800b25a:	d51f      	bpl.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b25c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800b260:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800b264:	f000 8309 	beq.w	800b87a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800b268:	f200 810b 	bhi.w	800b482 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800b26c:	b159      	cbz	r1, 800b286 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b26e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800b272:	f040 8110 	bne.w	800b496 <HAL_RCCEx_PeriphCLKConfig+0x636>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b276:	2100      	movs	r1, #0
 800b278:	f104 0008 	add.w	r0, r4, #8
 800b27c:	f7ff fcfc 	bl	800ac78 <RCCEx_PLL2_Config>
 800b280:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b282:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b286:	2d00      	cmp	r5, #0
 800b288:	f040 825f 	bne.w	800b74a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b28c:	4fa6      	ldr	r7, [pc, #664]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b28e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800b292:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b294:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 800b298:	4301      	orrs	r1, r0
 800b29a:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b29c:	0659      	lsls	r1, r3, #25
 800b29e:	d51f      	bpl.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b2a0:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800b2a4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800b2a8:	f000 82b2 	beq.w	800b810 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800b2ac:	f200 80f6 	bhi.w	800b49c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 800b2b0:	b159      	cbz	r1, 800b2ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800b2b2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b2b6:	f040 80fb 	bne.w	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	f104 0008 	add.w	r0, r4, #8
 800b2c0:	f7ff fcda 	bl	800ac78 <RCCEx_PLL2_Config>
 800b2c4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b2c6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b2ca:	2d00      	cmp	r5, #0
 800b2cc:	f040 8262 	bne.w	800b794 <HAL_RCCEx_PeriphCLKConfig+0x934>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b2d0:	4f95      	ldr	r7, [pc, #596]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b2d2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800b2d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b2d8:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 800b2dc:	4301      	orrs	r1, r0
 800b2de:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b2e0:	061f      	lsls	r7, r3, #24
 800b2e2:	d51f      	bpl.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b2e4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800b2e8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800b2ec:	f000 829b 	beq.w	800b826 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
 800b2f0:	f200 80e1 	bhi.w	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x656>
 800b2f4:	b159      	cbz	r1, 800b30e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800b2f6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b2fa:	f040 80e6 	bne.w	800b4ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2fe:	2100      	movs	r1, #0
 800b300:	f104 0008 	add.w	r0, r4, #8
 800b304:	f7ff fcb8 	bl	800ac78 <RCCEx_PLL2_Config>
 800b308:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b30a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b30e:	2d00      	cmp	r5, #0
 800b310:	f040 823c 	bne.w	800b78c <HAL_RCCEx_PeriphCLKConfig+0x92c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b314:	4f84      	ldr	r7, [pc, #528]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b316:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800b31a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b31c:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800b320:	4301      	orrs	r1, r0
 800b322:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b324:	0718      	lsls	r0, r3, #28
 800b326:	d50b      	bpl.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b328:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800b32c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800b330:	f000 82b8 	beq.w	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b334:	4f7c      	ldr	r7, [pc, #496]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b336:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b338:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800b33c:	4301      	orrs	r1, r0
 800b33e:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b340:	06d9      	lsls	r1, r3, #27
 800b342:	d50b      	bpl.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b344:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800b348:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800b34c:	f000 82b7 	beq.w	800b8be <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b350:	4f75      	ldr	r7, [pc, #468]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b352:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b354:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800b358:	4301      	orrs	r1, r0
 800b35a:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b35c:	031f      	lsls	r7, r3, #12
 800b35e:	d50e      	bpl.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    switch (PeriphClkInit->AdcClockSelection)
 800b360:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800b364:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800b368:	f000 80f4 	beq.w	800b554 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800b36c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800b370:	f000 80f8 	beq.w	800b564 <HAL_RCCEx_PeriphCLKConfig+0x704>
 800b374:	2900      	cmp	r1, #0
 800b376:	f000 822e 	beq.w	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800b37a:	2601      	movs	r6, #1
 800b37c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b37e:	0358      	lsls	r0, r3, #13
 800b380:	d50f      	bpl.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x542>
    switch (PeriphClkInit->UsbClockSelection)
 800b382:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800b386:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800b38a:	f000 80cf 	beq.w	800b52c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800b38e:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800b392:	f000 80d3 	beq.w	800b53c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800b396:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b39a:	f000 8214 	beq.w	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800b39e:	2601      	movs	r6, #1
 800b3a0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b3a2:	03d9      	lsls	r1, r3, #15
 800b3a4:	d509      	bpl.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->SdmmcClockSelection)
 800b3a6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b3a8:	2900      	cmp	r1, #0
 800b3aa:	f000 8203 	beq.w	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x954>
 800b3ae:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800b3b2:	f000 819d 	beq.w	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x890>
 800b3b6:	2601      	movs	r6, #1
 800b3b8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b3ba:	009f      	lsls	r7, r3, #2
 800b3bc:	f100 80f1 	bmi.w	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x742>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b3c0:	0398      	lsls	r0, r3, #14
 800b3c2:	d50c      	bpl.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->RngClockSelection)
 800b3c4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800b3c8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b3cc:	f000 81ea 	beq.w	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x944>
 800b3d0:	d97e      	bls.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x670>
 800b3d2:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 800b3d6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800b3da:	d07b      	beq.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x674>
 800b3dc:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b3de:	02d9      	lsls	r1, r3, #11
 800b3e0:	d506      	bpl.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b3e2:	4851      	ldr	r0, [pc, #324]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b3e4:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800b3e6:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800b3e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b3ec:	4329      	orrs	r1, r5
 800b3ee:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b3f0:	00df      	lsls	r7, r3, #3
 800b3f2:	d507      	bpl.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b3f4:	484c      	ldr	r0, [pc, #304]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b3f6:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800b3fa:	6901      	ldr	r1, [r0, #16]
 800b3fc:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800b400:	4329      	orrs	r1, r5
 800b402:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b404:	029d      	lsls	r5, r3, #10
 800b406:	d506      	bpl.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b408:	4847      	ldr	r0, [pc, #284]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b40a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800b40c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800b40e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800b412:	4329      	orrs	r1, r5
 800b414:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b416:	0058      	lsls	r0, r3, #1
 800b418:	d509      	bpl.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b41a:	4943      	ldr	r1, [pc, #268]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b41c:	6908      	ldr	r0, [r1, #16]
 800b41e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800b422:	6108      	str	r0, [r1, #16]
 800b424:	6908      	ldr	r0, [r1, #16]
 800b426:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 800b42a:	4328      	orrs	r0, r5
 800b42c:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b42e:	2b00      	cmp	r3, #0
 800b430:	da06      	bge.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b432:	483d      	ldr	r0, [pc, #244]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b434:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800b436:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800b438:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800b43c:	4329      	orrs	r1, r5
 800b43e:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b440:	0219      	lsls	r1, r3, #8
 800b442:	d507      	bpl.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b444:	4938      	ldr	r1, [pc, #224]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b446:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800b44a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800b44c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800b450:	4303      	orrs	r3, r0
 800b452:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b454:	07d3      	lsls	r3, r2, #31
 800b456:	f100 80b0 	bmi.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x75a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b45a:	0797      	lsls	r7, r2, #30
 800b45c:	f100 80ba 	bmi.w	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x774>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b460:	0755      	lsls	r5, r2, #29
 800b462:	f100 80c4 	bmi.w	800b5ee <HAL_RCCEx_PeriphCLKConfig+0x78e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b466:	0710      	lsls	r0, r2, #28
 800b468:	f100 80ce 	bmi.w	800b608 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b46c:	06d1      	lsls	r1, r2, #27
 800b46e:	f100 80d8 	bmi.w	800b622 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b472:	0692      	lsls	r2, r2, #26
 800b474:	f100 8125 	bmi.w	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    return HAL_OK;
 800b478:	1e30      	subs	r0, r6, #0
 800b47a:	bf18      	it	ne
 800b47c:	2001      	movne	r0, #1
}
 800b47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b482:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800b486:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b48a:	f43f aefc 	beq.w	800b286 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b48e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800b492:	f43f aef8 	beq.w	800b286 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b496:	2601      	movs	r6, #1
 800b498:	4635      	mov	r5, r6
 800b49a:	e6ff      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b49c:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 800b4a0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800b4a4:	f43f af11 	beq.w	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800b4a8:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 800b4ac:	f43f af0d 	beq.w	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800b4b0:	2601      	movs	r6, #1
 800b4b2:	4635      	mov	r5, r6
 800b4b4:	e714      	b.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b4b6:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800b4ba:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800b4be:	f43f af26 	beq.w	800b30e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800b4c2:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 800b4c6:	f43f af22 	beq.w	800b30e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800b4ca:	2601      	movs	r6, #1
 800b4cc:	4635      	mov	r5, r6
 800b4ce:	e729      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->RngClockSelection)
 800b4d0:	2900      	cmp	r1, #0
 800b4d2:	d183      	bne.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
    if (ret == HAL_OK)
 800b4d4:	2d00      	cmp	r5, #0
 800b4d6:	f040 8163 	bne.w	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b4da:	4d13      	ldr	r5, [pc, #76]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b4dc:	6d68      	ldr	r0, [r5, #84]	; 0x54
 800b4de:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800b4e2:	4301      	orrs	r1, r0
 800b4e4:	6569      	str	r1, [r5, #84]	; 0x54
 800b4e6:	e77a      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Sai1ClockSelection)
 800b4e8:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800b4ea:	2d00      	cmp	r5, #0
 800b4ec:	f040 80fb 	bne.w	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b4f0:	4f0d      	ldr	r7, [pc, #52]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b4f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b4f6:	f021 0107 	bic.w	r1, r1, #7
 800b4fa:	4301      	orrs	r1, r0
 800b4fc:	6539      	str	r1, [r7, #80]	; 0x50
 800b4fe:	e4ea      	b.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b500:	2101      	movs	r1, #1
 800b502:	f104 0008 	add.w	r0, r4, #8
 800b506:	f7ff fbb7 	bl	800ac78 <RCCEx_PLL2_Config>
 800b50a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b50c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b510:	2d00      	cmp	r5, #0
 800b512:	f040 811c 	bne.w	800b74e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b516:	4f04      	ldr	r7, [pc, #16]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b518:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800b51a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b51c:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800b520:	4301      	orrs	r1, r0
 800b522:	6539      	str	r1, [r7, #80]	; 0x50
 800b524:	e5cc      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
 800b526:	bf00      	nop
 800b528:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b52c:	2101      	movs	r1, #1
 800b52e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b532:	f7ff fc1b 	bl	800ad6c <RCCEx_PLL3_Config>
 800b536:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b538:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b53c:	2d00      	cmp	r5, #0
 800b53e:	f040 812d 	bne.w	800b79c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b542:	4fb1      	ldr	r7, [pc, #708]	; (800b808 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b544:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800b548:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b54a:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800b54e:	4301      	orrs	r1, r0
 800b550:	6579      	str	r1, [r7, #84]	; 0x54
 800b552:	e726      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b554:	2102      	movs	r1, #2
 800b556:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b55a:	f7ff fc07 	bl	800ad6c <RCCEx_PLL3_Config>
 800b55e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b560:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b564:	2d00      	cmp	r5, #0
 800b566:	f040 8117 	bne.w	800b798 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b56a:	4fa7      	ldr	r7, [pc, #668]	; (800b808 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b56c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800b570:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b572:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800b576:	4301      	orrs	r1, r0
 800b578:	65b9      	str	r1, [r7, #88]	; 0x58
 800b57a:	e700      	b.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x51e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b57c:	2101      	movs	r1, #1
 800b57e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b582:	f7ff fbf3 	bl	800ad6c <RCCEx_PLL3_Config>
 800b586:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b588:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b58c:	2d00      	cmp	r5, #0
 800b58e:	f040 80da 	bne.w	800b746 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b592:	4f9d      	ldr	r7, [pc, #628]	; (800b808 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b594:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b596:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b598:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 800b59c:	4301      	orrs	r1, r0
 800b59e:	6579      	str	r1, [r7, #84]	; 0x54
 800b5a0:	e625      	b.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b5a2:	2102      	movs	r1, #2
 800b5a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b5a8:	f7ff fbe0 	bl	800ad6c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b5ac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	f43f af05 	beq.w	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = HAL_ERROR;
 800b5b6:	2601      	movs	r6, #1
 800b5b8:	e702      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x560>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5ba:	2100      	movs	r1, #0
 800b5bc:	f104 0008 	add.w	r0, r4, #8
 800b5c0:	f7ff fb5a 	bl	800ac78 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b5c4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	f43f af47 	beq.w	800b45a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b5cc:	0797      	lsls	r7, r2, #30
 800b5ce:	4606      	mov	r6, r0
 800b5d0:	f57f af46 	bpl.w	800b460 <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5d4:	2101      	movs	r1, #1
 800b5d6:	f104 0008 	add.w	r0, r4, #8
 800b5da:	f7ff fb4d 	bl	800ac78 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b5de:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	f43f af3d 	beq.w	800b460 <HAL_RCCEx_PeriphCLKConfig+0x600>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b5e6:	0755      	lsls	r5, r2, #29
 800b5e8:	4606      	mov	r6, r0
 800b5ea:	f57f af3c 	bpl.w	800b466 <HAL_RCCEx_PeriphCLKConfig+0x606>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b5ee:	2102      	movs	r1, #2
 800b5f0:	f104 0008 	add.w	r0, r4, #8
 800b5f4:	f7ff fb40 	bl	800ac78 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b5f8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	f43f af33 	beq.w	800b466 <HAL_RCCEx_PeriphCLKConfig+0x606>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b600:	4606      	mov	r6, r0
 800b602:	0710      	lsls	r0, r2, #28
 800b604:	f57f af32 	bpl.w	800b46c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b608:	2100      	movs	r1, #0
 800b60a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b60e:	f7ff fbad 	bl	800ad6c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b612:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800b614:	2800      	cmp	r0, #0
 800b616:	f43f af29 	beq.w	800b46c <HAL_RCCEx_PeriphCLKConfig+0x60c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b61a:	06d1      	lsls	r1, r2, #27
 800b61c:	4606      	mov	r6, r0
 800b61e:	f57f af28 	bpl.w	800b472 <HAL_RCCEx_PeriphCLKConfig+0x612>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b622:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800b626:	2101      	movs	r1, #1
 800b628:	4628      	mov	r0, r5
 800b62a:	f7ff fb9f 	bl	800ad6c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b62e:	2800      	cmp	r0, #0
 800b630:	f000 80db 	beq.w	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b634:	6863      	ldr	r3, [r4, #4]
 800b636:	069b      	lsls	r3, r3, #26
 800b638:	d54c      	bpl.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800b63a:	4606      	mov	r6, r0
 800b63c:	e043      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x866>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b63e:	4f73      	ldr	r7, [pc, #460]	; (800b80c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b646:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800b648:	f7fa fb5c 	bl	8005d04 <HAL_GetTick>
 800b64c:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b64e:	e006      	b.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b650:	f7fa fb58 	bl	8005d04 <HAL_GetTick>
 800b654:	eba0 0008 	sub.w	r0, r0, r8
 800b658:	2864      	cmp	r0, #100	; 0x64
 800b65a:	f200 81af 	bhi.w	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	05da      	lsls	r2, r3, #23
 800b662:	d5f5      	bpl.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
    if (ret == HAL_OK)
 800b664:	2d00      	cmp	r5, #0
 800b666:	f040 81e3 	bne.w	800ba30 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b66a:	4a67      	ldr	r2, [pc, #412]	; (800b808 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b66c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800b670:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800b672:	4059      	eors	r1, r3
 800b674:	f411 7f40 	tst.w	r1, #768	; 0x300
 800b678:	d00b      	beq.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x832>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b67a:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800b67c:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b67e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800b682:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800b686:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b688:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800b68a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800b68e:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800b690:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b696:	f000 81ad 	beq.w	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0xb94>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b69a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800b69e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800b6a2:	f000 81bb 	beq.w	800ba1c <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 800b6a6:	4958      	ldr	r1, [pc, #352]	; (800b808 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6a8:	690a      	ldr	r2, [r1, #16]
 800b6aa:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800b6ae:	610a      	str	r2, [r1, #16]
 800b6b0:	4855      	ldr	r0, [pc, #340]	; (800b808 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b6b2:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800b6b6:	6f07      	ldr	r7, [r0, #112]	; 0x70
 800b6b8:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b6ba:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b6be:	6701      	str	r1, [r0, #112]	; 0x70
 800b6c0:	e563      	b.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x32a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6c2:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6c6:	2102      	movs	r1, #2
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	f7ff fb4f 	bl	800ad6c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	f43f aed2 	beq.w	800b478 <HAL_RCCEx_PeriphCLKConfig+0x618>
  return HAL_ERROR;
 800b6d4:	2001      	movs	r0, #1
}
 800b6d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6da:	462e      	mov	r6, r5
 800b6dc:	e463      	b.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x146>
 800b6de:	462e      	mov	r6, r5
 800b6e0:	e419      	b.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 800b6e2:	462e      	mov	r6, r5
 800b6e4:	e49c      	b.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b6e6:	462e      	mov	r6, r5
 800b6e8:	f7ff bbf5 	b.w	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b6ec:	462e      	mov	r6, r5
 800b6ee:	e436      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6f0:	2102      	movs	r1, #2
 800b6f2:	f104 0008 	add.w	r0, r4, #8
 800b6f6:	f7ff fabf 	bl	800ac78 <RCCEx_PLL2_Config>
 800b6fa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b6fc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b700:	2d00      	cmp	r5, #0
 800b702:	d15e      	bne.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b704:	4f40      	ldr	r7, [pc, #256]	; (800b808 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b706:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b708:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b70a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800b70e:	4301      	orrs	r1, r0
 800b710:	64f9      	str	r1, [r7, #76]	; 0x4c
 800b712:	e652      	b.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b714:	483c      	ldr	r0, [pc, #240]	; (800b808 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b716:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b718:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800b71c:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800b71e:	e475      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b720:	4839      	ldr	r0, [pc, #228]	; (800b808 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b722:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b724:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800b728:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800b72a:	e431      	b.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b72c:	4836      	ldr	r0, [pc, #216]	; (800b808 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b72e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b730:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800b734:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800b736:	f7ff bbe4 	b.w	800af02 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b73a:	4833      	ldr	r0, [pc, #204]	; (800b808 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b73c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b73e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800b742:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800b744:	e400      	b.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800b746:	462e      	mov	r6, r5
 800b748:	e551      	b.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800b74a:	462e      	mov	r6, r5
 800b74c:	e5a6      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800b74e:	462e      	mov	r6, r5
 800b750:	e4b6      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b752:	4f2d      	ldr	r7, [pc, #180]	; (800b808 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b754:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b756:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b758:	f021 0107 	bic.w	r1, r1, #7
 800b75c:	4301      	orrs	r1, r0
 800b75e:	6579      	str	r1, [r7, #84]	; 0x54
 800b760:	e55f      	b.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b762:	4f29      	ldr	r7, [pc, #164]	; (800b808 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b764:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800b768:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b76a:	f021 0107 	bic.w	r1, r1, #7
 800b76e:	4301      	orrs	r1, r0
 800b770:	65b9      	str	r1, [r7, #88]	; 0x58
 800b772:	e571      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b774:	462e      	mov	r6, r5
 800b776:	e431      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x17c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b778:	4f23      	ldr	r7, [pc, #140]	; (800b808 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b77a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b77c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b77e:	f021 0103 	bic.w	r1, r1, #3
 800b782:	4301      	orrs	r1, r0
 800b784:	64f9      	str	r1, [r7, #76]	; 0x4c
 800b786:	e4fd      	b.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800b788:	462e      	mov	r6, r5
 800b78a:	e469      	b.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800b78c:	462e      	mov	r6, r5
 800b78e:	e5c9      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 800b790:	462e      	mov	r6, r5
 800b792:	e485      	b.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800b794:	462e      	mov	r6, r5
 800b796:	e5a3      	b.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800b798:	462e      	mov	r6, r5
 800b79a:	e5f0      	b.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800b79c:	462e      	mov	r6, r5
 800b79e:	e600      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x542>
 800b7a0:	462e      	mov	r6, r5
 800b7a2:	e61c      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x57e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7a4:	4f18      	ldr	r7, [pc, #96]	; (800b808 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7a8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800b7ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 800b7ae:	2d00      	cmp	r5, #0
 800b7b0:	d1f6      	bne.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
 800b7b2:	e692      	b.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x67a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7b4:	4814      	ldr	r0, [pc, #80]	; (800b808 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7b6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b7b8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800b7bc:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800b7be:	2d00      	cmp	r5, #0
 800b7c0:	d0a0      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800b7c2:	462e      	mov	r6, r5
 800b7c4:	e5f9      	b.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7c6:	4810      	ldr	r0, [pc, #64]	; (800b808 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800b7c8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b7ca:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800b7ce:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800b7d0:	2d00      	cmp	r5, #0
 800b7d2:	d1e3      	bne.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x93c>
 800b7d4:	e6b5      	b.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7d6:	f104 0008 	add.w	r0, r4, #8
 800b7da:	f7ff fa4d 	bl	800ac78 <RCCEx_PLL2_Config>
 800b7de:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b7e0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b7e4:	2d00      	cmp	r5, #0
 800b7e6:	d1d7      	bne.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800b7e8:	e6bf      	b.n	800b56a <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b7ea:	6862      	ldr	r2, [r4, #4]
 800b7ec:	e641      	b.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x612>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7ee:	2102      	movs	r1, #2
 800b7f0:	f104 0008 	add.w	r0, r4, #8
 800b7f4:	f7ff fa40 	bl	800ac78 <RCCEx_PLL2_Config>
 800b7f8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b7fa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b7fe:	2d00      	cmp	r5, #0
 800b800:	d1b8      	bne.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x914>
 800b802:	f7ff bbe4 	b.w	800afce <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800b806:	bf00      	nop
 800b808:	58024400 	.word	0x58024400
 800b80c:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b810:	2102      	movs	r1, #2
 800b812:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b816:	f7ff faa9 	bl	800ad6c <RCCEx_PLL3_Config>
 800b81a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b81c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b820:	2d00      	cmp	r5, #0
 800b822:	d1b7      	bne.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800b824:	e554      	b.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x470>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b826:	2102      	movs	r1, #2
 800b828:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b82c:	f7ff fa9e 	bl	800ad6c <RCCEx_PLL3_Config>
 800b830:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b832:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b836:	2d00      	cmp	r5, #0
 800b838:	d1a8      	bne.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x92c>
 800b83a:	e56b      	b.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b83c:	4884      	ldr	r0, [pc, #528]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800b83e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b840:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800b844:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800b846:	2d00      	cmp	r5, #0
 800b848:	d181      	bne.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b84a:	e664      	b.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b84c:	2101      	movs	r1, #1
 800b84e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b852:	f7ff fa8b 	bl	800ad6c <RCCEx_PLL3_Config>
 800b856:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b858:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b85c:	2d00      	cmp	r5, #0
 800b85e:	d193      	bne.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x928>
 800b860:	f7ff bbf7 	b.w	800b052 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b864:	2101      	movs	r1, #1
 800b866:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b86a:	f7ff fa7f 	bl	800ad6c <RCCEx_PLL3_Config>
 800b86e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b870:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b874:	2d00      	cmp	r5, #0
 800b876:	d18b      	bne.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x930>
 800b878:	e40a      	b.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b87a:	2102      	movs	r1, #2
 800b87c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b880:	f7ff fa74 	bl	800ad6c <RCCEx_PLL3_Config>
 800b884:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b886:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b88a:	2d00      	cmp	r5, #0
 800b88c:	f47f af5d 	bne.w	800b74a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800b890:	e4fc      	b.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x42c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b892:	486f      	ldr	r0, [pc, #444]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800b894:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b896:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800b89a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800b89c:	2d00      	cmp	r5, #0
 800b89e:	f47f ac70 	bne.w	800b182 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800b8a2:	e769      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x918>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b8a4:	2102      	movs	r1, #2
 800b8a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b8aa:	f7ff fa5f 	bl	800ad6c <RCCEx_PLL3_Config>
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	f040 8094 	bne.w	800b9dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b8b4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b8b8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b8bc:	e53a      	b.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b8be:	2102      	movs	r1, #2
 800b8c0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b8c4:	f7ff fa52 	bl	800ad6c <RCCEx_PLL3_Config>
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	f040 808d 	bne.w	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b8ce:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b8d2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b8d6:	e53b      	b.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b8d8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b8dc:	f7ff baed 	b.w	800aeba <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b8e6:	f7ff fa41 	bl	800ad6c <RCCEx_PLL3_Config>
 800b8ea:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b8ec:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800b8f0:	f7ff bb4e 	b.w	800af90 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b8fa:	f7ff fa37 	bl	800ad6c <RCCEx_PLL3_Config>
 800b8fe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b900:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800b904:	e5f1      	b.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b906:	2100      	movs	r1, #0
 800b908:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b90c:	f7ff fa2e 	bl	800ad6c <RCCEx_PLL3_Config>
 800b910:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b912:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800b916:	f7ff baf4 	b.w	800af02 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b91a:	2102      	movs	r1, #2
 800b91c:	3028      	adds	r0, #40	; 0x28
 800b91e:	f7ff fa25 	bl	800ad6c <RCCEx_PLL3_Config>
 800b922:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800b924:	2e00      	cmp	r6, #0
 800b926:	f43f aab9 	beq.w	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800b92a:	e7d5      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0xa78>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b92c:	4848      	ldr	r0, [pc, #288]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
        break;
 800b92e:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b930:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b932:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800b936:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800b938:	e5d7      	b.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b93a:	2100      	movs	r1, #0
 800b93c:	f104 0008 	add.w	r0, r4, #8
 800b940:	f7ff f99a 	bl	800ac78 <RCCEx_PLL2_Config>
 800b944:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b946:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800b94a:	e5ce      	b.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b94c:	2100      	movs	r1, #0
 800b94e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b952:	f7ff fa0b 	bl	800ad6c <RCCEx_PLL3_Config>
 800b956:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b958:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800b95c:	f7ff bb56 	b.w	800b00c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b960:	2100      	movs	r1, #0
 800b962:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b966:	f7ff fa01 	bl	800ad6c <RCCEx_PLL3_Config>
 800b96a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b96c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800b970:	f7ff baea 	b.w	800af48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b974:	2101      	movs	r1, #1
 800b976:	f104 0008 	add.w	r0, r4, #8
 800b97a:	f7ff f97d 	bl	800ac78 <RCCEx_PLL2_Config>
 800b97e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b980:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b984:	2d00      	cmp	r5, #0
 800b986:	f47f ac4b 	bne.w	800b220 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800b98a:	e6e2      	b.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b98c:	2101      	movs	r1, #1
 800b98e:	f104 0008 	add.w	r0, r4, #8
 800b992:	f7ff f971 	bl	800ac78 <RCCEx_PLL2_Config>
 800b996:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b998:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b99c:	2d00      	cmp	r5, #0
 800b99e:	f47f ac5a 	bne.w	800b256 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800b9a2:	e6de      	b.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x902>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9a4:	2101      	movs	r1, #1
 800b9a6:	f104 0008 	add.w	r0, r4, #8
 800b9aa:	f7ff f965 	bl	800ac78 <RCCEx_PLL2_Config>
 800b9ae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b9b0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800b9b4:	2d00      	cmp	r5, #0
 800b9b6:	f47f aec6 	bne.w	800b746 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 800b9ba:	e5ea      	b.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x732>
            ret = HAL_TIMEOUT;
 800b9bc:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b9be:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 800b9c2:	4635      	mov	r5, r6
 800b9c4:	f7ff bbe1 	b.w	800b18a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800b9c8:	2601      	movs	r6, #1
 800b9ca:	f7ff ba76 	b.w	800aeba <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9ce:	4d20      	ldr	r5, [pc, #128]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800b9d0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800b9d2:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800b9d6:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
 800b9d8:	f7ff ba68 	b.w	800aeac <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b9dc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
 800b9e0:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b9e2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b9e6:	e4a5      	b.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b9e8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
 800b9ec:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b9ee:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b9f2:	e4ad      	b.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
        tickstart = HAL_GetTick();
 800b9f4:	f7fa f986 	bl	8005d04 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9f8:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800ba50 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
        tickstart = HAL_GetTick();
 800b9fc:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9fe:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba02:	e004      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba04:	f7fa f97e 	bl	8005d04 <HAL_GetTick>
 800ba08:	1bc0      	subs	r0, r0, r7
 800ba0a:	4548      	cmp	r0, r9
 800ba0c:	d8d6      	bhi.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba0e:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800ba12:	079b      	lsls	r3, r3, #30
 800ba14:	d5f6      	bpl.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0xba4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ba16:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800ba1a:	e63e      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x83a>
 800ba1c:	480c      	ldr	r0, [pc, #48]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800ba1e:	4a0d      	ldr	r2, [pc, #52]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0xbf4>)
 800ba20:	6901      	ldr	r1, [r0, #16]
 800ba22:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800ba26:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800ba2a:	430a      	orrs	r2, r1
 800ba2c:	6102      	str	r2, [r0, #16]
 800ba2e:	e63f      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x850>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ba30:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ba34:	462e      	mov	r6, r5
 800ba36:	f7ff bba8 	b.w	800b18a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ba3a:	2601      	movs	r6, #1
 800ba3c:	4635      	mov	r5, r6
 800ba3e:	f7ff bbf0 	b.w	800b222 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->FmcClockSelection)
 800ba42:	2601      	movs	r6, #1
 800ba44:	4635      	mov	r5, r6
 800ba46:	f7ff bb9d 	b.w	800b184 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ba4a:	2601      	movs	r6, #1
 800ba4c:	4635      	mov	r5, r6
 800ba4e:	e403      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ba50:	58024400 	.word	0x58024400
 800ba54:	00ffffcf 	.word	0x00ffffcf

0800ba58 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800ba58:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ba5a:	f7ff f83d 	bl	800aad8 <HAL_RCC_GetHCLKFreq>
 800ba5e:	4b05      	ldr	r3, [pc, #20]	; (800ba74 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800ba60:	4a05      	ldr	r2, [pc, #20]	; (800ba78 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800ba62:	6a1b      	ldr	r3, [r3, #32]
 800ba64:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ba68:	5cd3      	ldrb	r3, [r2, r3]
 800ba6a:	f003 031f 	and.w	r3, r3, #31
}
 800ba6e:	40d8      	lsrs	r0, r3
 800ba70:	bd08      	pop	{r3, pc}
 800ba72:	bf00      	nop
 800ba74:	58024400 	.word	0x58024400
 800ba78:	0801b244 	.word	0x0801b244

0800ba7c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba7c:	4b4f      	ldr	r3, [pc, #316]	; (800bbbc <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800ba7e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba80:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ba82:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ba84:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800ba86:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ba8a:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ba8e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800ba90:	d05c      	beq.n	800bb4c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ba92:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ba96:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba9a:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ba9e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800baa2:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800baa4:	ee07 4a90 	vmov	s15, r4
 800baa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800baac:	d003      	beq.n	800bab6 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800baae:	2902      	cmp	r1, #2
 800bab0:	d075      	beq.n	800bb9e <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800bab2:	2900      	cmp	r1, #0
 800bab4:	d04f      	beq.n	800bb56 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bab6:	ee07 2a90 	vmov	s15, r2
 800baba:	eddf 6a41 	vldr	s13, [pc, #260]	; 800bbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800babe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800bac8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800bbc4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800bacc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bad0:	ee06 3a90 	vmov	s13, r3
 800bad4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800bad8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800badc:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bae0:	eee7 6a25 	vfma.f32	s13, s14, s11
 800bae4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bae8:	4a34      	ldr	r2, [pc, #208]	; (800bbbc <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800baea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800baee:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800baf0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800baf4:	ee07 3a10 	vmov	s14, r3
 800baf8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800bafc:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bafe:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bb02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb0a:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bb0e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800bb10:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800bb14:	ee07 3a10 	vmov	s14, r3
 800bb18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bb1c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bb20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb28:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bb2c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800bb2e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800bb32:	ee07 3a90 	vmov	s15, r3
 800bb36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb3a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bb3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb42:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800bb46:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800bb4a:	4770      	bx	lr
 800bb4c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bb4e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bb52:	6082      	str	r2, [r0, #8]
}
 800bb54:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb56:	6819      	ldr	r1, [r3, #0]
 800bb58:	0689      	lsls	r1, r1, #26
 800bb5a:	d527      	bpl.n	800bbac <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb5c:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb5e:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb62:	4919      	ldr	r1, [pc, #100]	; (800bbc8 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb64:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bb68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb6a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb72:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800bbc4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800bb76:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb7a:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb7c:	ee06 3a90 	vmov	s13, r3
 800bb80:	ee05 1a90 	vmov	s11, r1
 800bb84:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bb88:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800bb8c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bb90:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800bb94:	eee7 6a05 	vfma.f32	s13, s14, s10
 800bb98:	ee66 6a26 	vmul.f32	s13, s12, s13
 800bb9c:	e7a4      	b.n	800bae8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb9e:	ee07 2a90 	vmov	s15, r2
 800bba2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800bbcc <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800bba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbaa:	e78a      	b.n	800bac2 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bbac:	ee07 2a90 	vmov	s15, r2
 800bbb0:	eddf 6a07 	vldr	s13, [pc, #28]	; 800bbd0 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800bbb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbb8:	e783      	b.n	800bac2 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800bbba:	bf00      	nop
 800bbbc:	58024400 	.word	0x58024400
 800bbc0:	4a742400 	.word	0x4a742400
 800bbc4:	39000000 	.word	0x39000000
 800bbc8:	03d09000 	.word	0x03d09000
 800bbcc:	4bbebc20 	.word	0x4bbebc20
 800bbd0:	4c742400 	.word	0x4c742400

0800bbd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbd4:	4b4f      	ldr	r3, [pc, #316]	; (800bd14 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800bbd6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbd8:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bbda:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bbdc:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800bbde:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bbe2:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bbe6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 800bbe8:	d05c      	beq.n	800bca4 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bbea:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bbee:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbf2:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bbf6:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800bbfa:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bbfc:	ee07 4a90 	vmov	s15, r4
 800bc00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800bc04:	d003      	beq.n	800bc0e <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800bc06:	2902      	cmp	r1, #2
 800bc08:	d075      	beq.n	800bcf6 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800bc0a:	2900      	cmp	r1, #0
 800bc0c:	d04f      	beq.n	800bcae <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc0e:	ee07 2a90 	vmov	s15, r2
 800bc12:	eddf 6a41 	vldr	s13, [pc, #260]	; 800bd18 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800bc16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc1c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800bc20:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800bd1c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800bc24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc28:	ee06 3a90 	vmov	s13, r3
 800bc2c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800bc30:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bc34:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bc38:	eee7 6a25 	vfma.f32	s13, s14, s11
 800bc3c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bc40:	4a34      	ldr	r2, [pc, #208]	; (800bd14 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800bc42:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bc46:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800bc48:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800bc4c:	ee07 3a10 	vmov	s14, r3
 800bc50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800bc54:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bc56:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bc5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc62:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bc66:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800bc68:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800bc6c:	ee07 3a10 	vmov	s14, r3
 800bc70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc74:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bc78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc80:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bc84:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800bc86:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800bc8a:	ee07 3a90 	vmov	s15, r3
 800bc8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc92:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bc96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc9a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800bc9e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800bca2:	4770      	bx	lr
 800bca4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bca6:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bcaa:	6082      	str	r2, [r0, #8]
}
 800bcac:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcae:	6819      	ldr	r1, [r3, #0]
 800bcb0:	0689      	lsls	r1, r1, #26
 800bcb2:	d527      	bpl.n	800bd04 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcb4:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcb6:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcba:	4919      	ldr	r1, [pc, #100]	; (800bd20 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcbc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bcc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcc2:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcca:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800bd1c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800bcce:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcd2:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcd4:	ee06 3a90 	vmov	s13, r3
 800bcd8:	ee05 1a90 	vmov	s11, r1
 800bcdc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bce0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800bce4:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bce8:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800bcec:	eee7 6a05 	vfma.f32	s13, s14, s10
 800bcf0:	ee66 6a26 	vmul.f32	s13, s12, s13
 800bcf4:	e7a4      	b.n	800bc40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcf6:	ee07 2a90 	vmov	s15, r2
 800bcfa:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800bd24 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800bcfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd02:	e78a      	b.n	800bc1a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd04:	ee07 2a90 	vmov	s15, r2
 800bd08:	eddf 6a07 	vldr	s13, [pc, #28]	; 800bd28 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800bd0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd10:	e783      	b.n	800bc1a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800bd12:	bf00      	nop
 800bd14:	58024400 	.word	0x58024400
 800bd18:	4a742400 	.word	0x4a742400
 800bd1c:	39000000 	.word	0x39000000
 800bd20:	03d09000 	.word	0x03d09000
 800bd24:	4bbebc20 	.word	0x4bbebc20
 800bd28:	4c742400 	.word	0x4c742400

0800bd2c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd2c:	4b4f      	ldr	r3, [pc, #316]	; (800be6c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800bd2e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd30:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bd32:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bd34:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 800bd36:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bd3a:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bd3e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 800bd40:	d05c      	beq.n	800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bd42:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bd46:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd4a:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bd4e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800bd52:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bd54:	ee07 4a90 	vmov	s15, r4
 800bd58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800bd5c:	d07e      	beq.n	800be5c <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800bd5e:	2902      	cmp	r1, #2
 800bd60:	d075      	beq.n	800be4e <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 800bd62:	2900      	cmp	r1, #0
 800bd64:	d04f      	beq.n	800be06 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd66:	ee07 2a90 	vmov	s15, r2
 800bd6a:	eddf 6a41 	vldr	s13, [pc, #260]	; 800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800bd6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd74:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800bd78:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800be74 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800bd7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd80:	ee06 3a90 	vmov	s13, r3
 800bd84:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800bd88:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bd8c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bd90:	eee7 6a25 	vfma.f32	s13, s14, s11
 800bd94:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bd98:	4a34      	ldr	r2, [pc, #208]	; (800be6c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800bd9a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bd9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800bda0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800bda4:	ee07 3a10 	vmov	s14, r3
 800bda8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800bdac:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bdae:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bdb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdba:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bdbe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800bdc0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800bdc4:	ee07 3a10 	vmov	s14, r3
 800bdc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bdcc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bdd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdd8:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bddc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800bdde:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800bde2:	ee07 3a90 	vmov	s15, r3
 800bde6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdea:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bdee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdf2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800bdf6:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800bdfa:	4770      	bx	lr
 800bdfc:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bdfe:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800be02:	6082      	str	r2, [r0, #8]
}
 800be04:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be06:	6819      	ldr	r1, [r3, #0]
 800be08:	0689      	lsls	r1, r1, #26
 800be0a:	d5ac      	bpl.n	800bd66 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be0c:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be0e:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be12:	4919      	ldr	r1, [pc, #100]	; (800be78 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be14:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800be18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be1a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be22:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800be74 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800be26:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be2a:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be2c:	ee06 3a90 	vmov	s13, r3
 800be30:	ee05 1a90 	vmov	s11, r1
 800be34:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800be38:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800be3c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800be40:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800be44:	eee7 6a05 	vfma.f32	s13, s14, s10
 800be48:	ee66 6a26 	vmul.f32	s13, s12, s13
 800be4c:	e7a4      	b.n	800bd98 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be4e:	ee07 2a90 	vmov	s15, r2
 800be52:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800be56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be5a:	e78a      	b.n	800bd72 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be5c:	ee07 2a90 	vmov	s15, r2
 800be60:	eddf 6a07 	vldr	s13, [pc, #28]	; 800be80 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 800be64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be68:	e783      	b.n	800bd72 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 800be6a:	bf00      	nop
 800be6c:	58024400 	.word	0x58024400
 800be70:	4c742400 	.word	0x4c742400
 800be74:	39000000 	.word	0x39000000
 800be78:	03d09000 	.word	0x03d09000
 800be7c:	4bbebc20 	.word	0x4bbebc20
 800be80:	4a742400 	.word	0x4a742400

0800be84 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800be84:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800be88:	430b      	orrs	r3, r1
{
 800be8a:	b500      	push	{lr}
 800be8c:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800be8e:	f000 8084 	beq.w	800bf9a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800be92:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 800be96:	430b      	orrs	r3, r1
 800be98:	d039      	beq.n	800bf0e <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800be9a:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800be9e:	430b      	orrs	r3, r1
 800bea0:	f000 80e6 	beq.w	800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bea4:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 800bea8:	430b      	orrs	r3, r1
 800beaa:	f000 8089 	beq.w	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800beae:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 800beb2:	430b      	orrs	r3, r1
 800beb4:	d061      	beq.n	800bf7a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800beb6:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800beba:	430b      	orrs	r3, r1
 800bebc:	f000 8112 	beq.w	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bec0:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 800bec4:	430b      	orrs	r3, r1
 800bec6:	f000 80a3 	beq.w	800c010 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800beca:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800bece:	430b      	orrs	r3, r1
 800bed0:	f000 80fa 	beq.w	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bed4:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 800bed8:	430b      	orrs	r3, r1
 800beda:	f000 8143 	beq.w	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bede:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800bee2:	ea50 0301 	orrs.w	r3, r0, r1
 800bee6:	d137      	bne.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bee8:	4a99      	ldr	r2, [pc, #612]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800beea:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800beec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 800bef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bef4:	f000 8083 	beq.w	800bffe <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800bef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800befc:	f000 8156 	beq.w	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800bf00:	bb53      	cbnz	r3, 800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bf02:	6810      	ldr	r0, [r2, #0]
 800bf04:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800bf08:	d044      	beq.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = HSE_VALUE;
 800bf0a:	4892      	ldr	r0, [pc, #584]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800bf0c:	e042      	b.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bf0e:	4a90      	ldr	r2, [pc, #576]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bf10:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800bf12:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 800bf16:	2b80      	cmp	r3, #128	; 0x80
 800bf18:	f000 80a5 	beq.w	800c066 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800bf1c:	d920      	bls.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800bf1e:	2bc0      	cmp	r3, #192	; 0xc0
 800bf20:	d037      	beq.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800bf22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf26:	d117      	bne.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf28:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf2a:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf30:	0749      	lsls	r1, r1, #29
 800bf32:	d502      	bpl.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f000 80c1 	beq.w	800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf3a:	4a85      	ldr	r2, [pc, #532]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bf3c:	6812      	ldr	r2, [r2, #0]
 800bf3e:	05d0      	lsls	r0, r2, #23
 800bf40:	d503      	bpl.n	800bf4a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800bf42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf46:	f000 8101 	beq.w	800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf4a:	4a81      	ldr	r2, [pc, #516]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bf4c:	6812      	ldr	r2, [r2, #0]
 800bf4e:	0391      	lsls	r1, r2, #14
 800bf50:	d502      	bpl.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800bf52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf56:	d0d8      	beq.n	800bf0a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 800bf58:	2000      	movs	r0, #0
}
 800bf5a:	b005      	add	sp, #20
 800bf5c:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d04c      	beq.n	800bffe <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800bf64:	2b40      	cmp	r3, #64	; 0x40
 800bf66:	d1f7      	bne.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf68:	6810      	ldr	r0, [r2, #0]
 800bf6a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800bf6e:	d011      	beq.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf70:	a801      	add	r0, sp, #4
 800bf72:	f7ff fd83 	bl	800ba7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf76:	9801      	ldr	r0, [sp, #4]
 800bf78:	e00c      	b.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bf7a:	4a75      	ldr	r2, [pc, #468]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bf7c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800bf7e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 800bf82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf86:	d06e      	beq.n	800c066 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800bf88:	d937      	bls.n	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800bf8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf8e:	f040 8087 	bne.w	800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf92:	4871      	ldr	r0, [pc, #452]	; (800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 800bf94:	b005      	add	sp, #20
 800bf96:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bf9a:	4b6d      	ldr	r3, [pc, #436]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bf9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf9e:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800bfa2:	2b04      	cmp	r3, #4
 800bfa4:	d8d8      	bhi.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800bfa6:	a201      	add	r2, pc, #4	; (adr r2, 800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 800bfa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfac:	0800c04f 	.word	0x0800c04f
 800bfb0:	0800c02b 	.word	0x0800c02b
 800bfb4:	0800c03b 	.word	0x0800c03b
 800bfb8:	0800bf93 	.word	0x0800bf93
 800bfbc:	0800c037 	.word	0x0800c037
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bfc0:	4a63      	ldr	r2, [pc, #396]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bfc2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800bfc4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 800bfc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfcc:	d04b      	beq.n	800c066 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800bfce:	d944      	bls.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 800bfd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bfd4:	d0dd      	beq.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800bfd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bfda:	d1bd      	bne.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bfdc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bfde:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bfe0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bfe4:	0752      	lsls	r2, r2, #29
 800bfe6:	d5a8      	bpl.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1a6      	bne.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfec:	4b58      	ldr	r3, [pc, #352]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bfee:	485b      	ldr	r0, [pc, #364]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bff6:	40d8      	lsrs	r0, r3
 800bff8:	e7cc      	b.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d154      	bne.n	800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bffe:	6810      	ldr	r0, [r2, #0]
 800c000:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800c004:	d0c6      	beq.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c006:	a801      	add	r0, sp, #4
 800c008:	f7ff fe90 	bl	800bd2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c00c:	9802      	ldr	r0, [sp, #8]
 800c00e:	e7c1      	b.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c010:	4a4f      	ldr	r2, [pc, #316]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c012:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 800c018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c01c:	f000 80d0 	beq.w	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 800c020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c024:	d0da      	beq.n	800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800c026:	2b00      	cmp	r3, #0
 800c028:	d196      	bne.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c02a:	4b49      	ldr	r3, [pc, #292]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c02c:	6818      	ldr	r0, [r3, #0]
 800c02e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800c032:	d0af      	beq.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c034:	e79c      	b.n	800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c036:	4a46      	ldr	r2, [pc, #280]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c038:	e776      	b.n	800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c03a:	4b45      	ldr	r3, [pc, #276]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c03c:	6818      	ldr	r0, [r3, #0]
 800c03e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800c042:	d0a7      	beq.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c044:	a801      	add	r0, sp, #4
 800c046:	f7ff fdc5 	bl	800bbd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c04a:	9801      	ldr	r0, [sp, #4]
 800c04c:	e7a2      	b.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c04e:	4b40      	ldr	r3, [pc, #256]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c050:	6818      	ldr	r0, [r3, #0]
 800c052:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800c056:	d09d      	beq.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c058:	e7d5      	b.n	800c006 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d0cf      	beq.n	800bffe <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800c05e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c062:	d081      	beq.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800c064:	e778      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c066:	6810      	ldr	r0, [r2, #0]
 800c068:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800c06c:	d092      	beq.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c06e:	e7e9      	b.n	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c070:	4a37      	ldr	r2, [pc, #220]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c072:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c074:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 800c078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c07c:	d0f3      	beq.n	800c066 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800c07e:	d806      	bhi.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c080:	2b00      	cmp	r3, #0
 800c082:	d0bc      	beq.n	800bffe <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800c084:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c088:	f43f af6e 	beq.w	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800c08c:	e764      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800c08e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c092:	f43f af7e 	beq.w	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800c096:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c09a:	f43f af45 	beq.w	800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800c09e:	e75b      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    switch (srcclk)
 800c0a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0a4:	d09a      	beq.n	800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800c0a6:	e757      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800c0a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0ac:	f43f af5c 	beq.w	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800c0b0:	e752      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c0b2:	6810      	ldr	r0, [r2, #0]
 800c0b4:	f010 0004 	ands.w	r0, r0, #4
 800c0b8:	f43f af6c 	beq.w	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0bc:	6813      	ldr	r3, [r2, #0]
 800c0be:	4827      	ldr	r0, [pc, #156]	; (800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c0c0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c0c4:	40d8      	lsrs	r0, r3
 800c0c6:	e765      	b.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c0c8:	4b21      	ldr	r3, [pc, #132]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c0ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 800c0cc:	03d2      	lsls	r2, r2, #15
 800c0ce:	d5bf      	bpl.n	800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0d0:	6818      	ldr	r0, [r3, #0]
 800c0d2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800c0d6:	f43f af5d 	beq.w	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0da:	a801      	add	r0, sp, #4
 800c0dc:	f7ff fcce 	bl	800ba7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c0e0:	9803      	ldr	r0, [sp, #12]
 800c0e2:	e757      	b.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c0e4:	4a1a      	ldr	r2, [pc, #104]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c0e6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c0e8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 800c0ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c0f0:	d0df      	beq.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800c0f2:	d810      	bhi.n	800c116 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800c0f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0f8:	d058      	beq.n	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800c0fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0fe:	d118      	bne.n	800c132 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c100:	4b13      	ldr	r3, [pc, #76]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c102:	6818      	ldr	r0, [r3, #0]
 800c104:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800c108:	f43f af44 	beq.w	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c10c:	a801      	add	r0, sp, #4
 800c10e:	f7ff fd61 	bl	800bbd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c112:	9802      	ldr	r0, [sp, #8]
 800c114:	e73e      	b.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800c116:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c11a:	d012      	beq.n	800c142 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 800c11c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c120:	f47f af1a 	bne.w	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c124:	4b0a      	ldr	r3, [pc, #40]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c126:	6818      	ldr	r0, [r3, #0]
 800c128:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800c12c:	f43f af32 	beq.w	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c130:	e6eb      	b.n	800bf0a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 800c132:	2b00      	cmp	r3, #0
 800c134:	f47f af10 	bne.w	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
 800c138:	b005      	add	sp, #20
 800c13a:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800c13e:	f7fe bd0b 	b.w	800ab58 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c142:	6810      	ldr	r0, [r2, #0]
 800c144:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800c148:	f43f af24 	beq.w	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = CSI_VALUE;
 800c14c:	4804      	ldr	r0, [pc, #16]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c14e:	e721      	b.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c150:	58024400 	.word	0x58024400
 800c154:	017d7840 	.word	0x017d7840
 800c158:	00bb8000 	.word	0x00bb8000
 800c15c:	03d09000 	.word	0x03d09000
 800c160:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c164:	4b28      	ldr	r3, [pc, #160]	; (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800c166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c168:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 800c16c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c170:	d037      	beq.n	800c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800c172:	d814      	bhi.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800c174:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c178:	d03f      	beq.n	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800c17a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c17e:	d0bf      	beq.n	800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800c180:	2b00      	cmp	r3, #0
 800c182:	f47f aee9 	bne.w	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c186:	f7fe fca7 	bl	800aad8 <HAL_RCC_GetHCLKFreq>
 800c18a:	4b1f      	ldr	r3, [pc, #124]	; (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800c18c:	4a1f      	ldr	r2, [pc, #124]	; (800c20c <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 800c18e:	6a1b      	ldr	r3, [r3, #32]
 800c190:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c194:	5cd3      	ldrb	r3, [r2, r3]
 800c196:	f003 031f 	and.w	r3, r3, #31
 800c19a:	40d8      	lsrs	r0, r3
        break;
 800c19c:	e6fa      	b.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800c19e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1a2:	d017      	beq.n	800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 800c1a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1a8:	d0bc      	beq.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800c1aa:	e6d5      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1ac:	6810      	ldr	r0, [r2, #0]
 800c1ae:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800c1b2:	f43f aeef 	beq.w	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1b6:	a801      	add	r0, sp, #4
 800c1b8:	f7ff fc60 	bl	800ba7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c1bc:	9802      	ldr	r0, [sp, #8]
 800c1be:	e6e9      	b.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1c0:	6810      	ldr	r0, [r2, #0]
 800c1c2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800c1c6:	f43f aee5 	beq.w	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1ca:	a801      	add	r0, sp, #4
 800c1cc:	f7ff fd02 	bl	800bbd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c1d0:	9803      	ldr	r0, [sp, #12]
 800c1d2:	e6df      	b.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c1d4:	4b0c      	ldr	r3, [pc, #48]	; (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800c1d6:	6818      	ldr	r0, [r3, #0]
 800c1d8:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800c1dc:	f43f aeda 	beq.w	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c1e0:	e7b4      	b.n	800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c1e2:	4b09      	ldr	r3, [pc, #36]	; (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800c1e4:	6818      	ldr	r0, [r3, #0]
 800c1e6:	f010 0004 	ands.w	r0, r0, #4
 800c1ea:	f43f aed3 	beq.w	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4807      	ldr	r0, [pc, #28]	; (800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 800c1f2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c1f6:	40d8      	lsrs	r0, r3
 800c1f8:	e6cc      	b.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1fa:	4b03      	ldr	r3, [pc, #12]	; (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800c1fc:	6818      	ldr	r0, [r3, #0]
 800c1fe:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800c202:	f43f aec7 	beq.w	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c206:	e7d6      	b.n	800c1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800c208:	58024400 	.word	0x58024400
 800c20c:	0801b244 	.word	0x0801b244
 800c210:	03d09000 	.word	0x03d09000

0800c214 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c214:	2800      	cmp	r0, #0
 800c216:	f000 80a5 	beq.w	800c364 <HAL_TIM_Base_Init+0x150>
{
 800c21a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c21c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c220:	4604      	mov	r4, r0
 800c222:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c226:	2b00      	cmp	r3, #0
 800c228:	d076      	beq.n	800c318 <HAL_TIM_Base_Init+0x104>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c22a:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c22c:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c22e:	494e      	ldr	r1, [pc, #312]	; (800c368 <HAL_TIM_Base_Init+0x154>)
 800c230:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800c234:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c238:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 800c23c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c23e:	fab1 f181 	clz	r1, r1
 800c242:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800c246:	d027      	beq.n	800c298 <HAL_TIM_Base_Init+0x84>
 800c248:	bb31      	cbnz	r1, 800c298 <HAL_TIM_Base_Init+0x84>
 800c24a:	4848      	ldr	r0, [pc, #288]	; (800c36c <HAL_TIM_Base_Init+0x158>)
 800c24c:	4d48      	ldr	r5, [pc, #288]	; (800c370 <HAL_TIM_Base_Init+0x15c>)
 800c24e:	4282      	cmp	r2, r0
 800c250:	d067      	beq.n	800c322 <HAL_TIM_Base_Init+0x10e>
 800c252:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c256:	4282      	cmp	r2, r0
 800c258:	d063      	beq.n	800c322 <HAL_TIM_Base_Init+0x10e>
 800c25a:	1b55      	subs	r5, r2, r5
 800c25c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c260:	fab5 f585 	clz	r5, r5
 800c264:	4282      	cmp	r2, r0
 800c266:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800c26a:	d063      	beq.n	800c334 <HAL_TIM_Base_Init+0x120>
 800c26c:	2d00      	cmp	r5, #0
 800c26e:	d161      	bne.n	800c334 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c270:	4840      	ldr	r0, [pc, #256]	; (800c374 <HAL_TIM_Base_Init+0x160>)
 800c272:	4941      	ldr	r1, [pc, #260]	; (800c378 <HAL_TIM_Base_Init+0x164>)
 800c274:	428a      	cmp	r2, r1
 800c276:	bf18      	it	ne
 800c278:	4282      	cmpne	r2, r0
 800c27a:	d065      	beq.n	800c348 <HAL_TIM_Base_Init+0x134>
 800c27c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c280:	428a      	cmp	r2, r1
 800c282:	d061      	beq.n	800c348 <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c284:	69a0      	ldr	r0, [r4, #24]
 800c286:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c28a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c28c:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800c28e:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c290:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c292:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c294:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c296:	e023      	b.n	800c2e0 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c298:	4d35      	ldr	r5, [pc, #212]	; (800c370 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c29a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c29e:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2a0:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800c2a2:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2a4:	fab5 f585 	clz	r5, r5
 800c2a8:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2aa:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2b0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2b2:	69a0      	ldr	r0, [r4, #24]
 800c2b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2b8:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800c2ba:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2bc:	68e3      	ldr	r3, [r4, #12]
 800c2be:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c2c0:	6863      	ldr	r3, [r4, #4]
 800c2c2:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2c4:	b951      	cbnz	r1, 800c2dc <HAL_TIM_Base_Init+0xc8>
 800c2c6:	b94d      	cbnz	r5, 800c2dc <HAL_TIM_Base_Init+0xc8>
 800c2c8:	492a      	ldr	r1, [pc, #168]	; (800c374 <HAL_TIM_Base_Init+0x160>)
 800c2ca:	4b2b      	ldr	r3, [pc, #172]	; (800c378 <HAL_TIM_Base_Init+0x164>)
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	bf18      	it	ne
 800c2d0:	428a      	cmpne	r2, r1
 800c2d2:	d003      	beq.n	800c2dc <HAL_TIM_Base_Init+0xc8>
 800c2d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d101      	bne.n	800c2e0 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c2dc:	6963      	ldr	r3, [r4, #20]
 800c2de:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c2e0:	2301      	movs	r3, #1
  return HAL_OK;
 800c2e2:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800c2e4:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2e6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800c2ee:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800c2f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c2f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800c2fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c2fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c302:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c306:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c30a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800c30e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c312:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c316:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800c318:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c31c:	f7f9 fa0a 	bl	8005734 <HAL_TIM_Base_MspInit>
 800c320:	e783      	b.n	800c22a <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c322:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c328:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c32a:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 800c32e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c330:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c332:	e7ba      	b.n	800c2aa <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 800c334:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c33a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c33c:	480f      	ldr	r0, [pc, #60]	; (800c37c <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c33e:	4282      	cmp	r2, r0
 800c340:	d0b3      	beq.n	800c2aa <HAL_TIM_Base_Init+0x96>
 800c342:	2d00      	cmp	r5, #0
 800c344:	d1b1      	bne.n	800c2aa <HAL_TIM_Base_Init+0x96>
 800c346:	e793      	b.n	800c270 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c348:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c34a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c34e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c350:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c352:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c358:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800c35a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800c35c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c35e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c360:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c362:	e7b1      	b.n	800c2c8 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
 800c364:	2001      	movs	r0, #1
}
 800c366:	4770      	bx	lr
 800c368:	40010000 	.word	0x40010000
 800c36c:	40000400 	.word	0x40000400
 800c370:	40010400 	.word	0x40010400
 800c374:	40014000 	.word	0x40014000
 800c378:	40014400 	.word	0x40014400
 800c37c:	40000c00 	.word	0x40000c00

0800c380 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800c380:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c384:	2b01      	cmp	r3, #1
 800c386:	d13d      	bne.n	800c404 <HAL_TIM_Base_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c388:	6802      	ldr	r2, [r0, #0]
 800c38a:	4b23      	ldr	r3, [pc, #140]	; (800c418 <HAL_TIM_Base_Start+0x98>)
 800c38c:	4923      	ldr	r1, [pc, #140]	; (800c41c <HAL_TIM_Base_Start+0x9c>)
 800c38e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800c392:	bf18      	it	ne
 800c394:	429a      	cmpne	r2, r3
{
 800c396:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c398:	bf0c      	ite	eq
 800c39a:	2301      	moveq	r3, #1
 800c39c:	2300      	movne	r3, #0
 800c39e:	4d20      	ldr	r5, [pc, #128]	; (800c420 <HAL_TIM_Base_Start+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800c3a0:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3a2:	42aa      	cmp	r2, r5
 800c3a4:	bf08      	it	eq
 800c3a6:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c3aa:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3ae:	4c1d      	ldr	r4, [pc, #116]	; (800c424 <HAL_TIM_Base_Start+0xa4>)
 800c3b0:	428a      	cmp	r2, r1
 800c3b2:	bf08      	it	eq
 800c3b4:	f043 0301 	orreq.w	r3, r3, #1
 800c3b8:	481b      	ldr	r0, [pc, #108]	; (800c428 <HAL_TIM_Base_Start+0xa8>)
 800c3ba:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800c3be:	42a2      	cmp	r2, r4
 800c3c0:	bf08      	it	eq
 800c3c2:	f043 0301 	orreq.w	r3, r3, #1
 800c3c6:	4282      	cmp	r2, r0
 800c3c8:	bf08      	it	eq
 800c3ca:	f043 0301 	orreq.w	r3, r3, #1
 800c3ce:	428a      	cmp	r2, r1
 800c3d0:	bf08      	it	eq
 800c3d2:	f043 0301 	orreq.w	r3, r3, #1
 800c3d6:	b933      	cbnz	r3, 800c3e6 <HAL_TIM_Base_Start+0x66>
 800c3d8:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800c3dc:	1a10      	subs	r0, r2, r0
 800c3de:	fab0 f080 	clz	r0, r0
 800c3e2:	0940      	lsrs	r0, r0, #5
 800c3e4:	b198      	cbz	r0, 800c40e <HAL_TIM_Base_Start+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3e6:	6891      	ldr	r1, [r2, #8]
 800c3e8:	4b10      	ldr	r3, [pc, #64]	; (800c42c <HAL_TIM_Base_Start+0xac>)
 800c3ea:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3ec:	2b06      	cmp	r3, #6
 800c3ee:	d00b      	beq.n	800c408 <HAL_TIM_Base_Start+0x88>
 800c3f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3f4:	d008      	beq.n	800c408 <HAL_TIM_Base_Start+0x88>
      __HAL_TIM_ENABLE(htim);
 800c3f6:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800c3f8:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800c3fa:	f043 0301 	orr.w	r3, r3, #1
 800c3fe:	6013      	str	r3, [r2, #0]
}
 800c400:	bc30      	pop	{r4, r5}
 800c402:	4770      	bx	lr
    return HAL_ERROR;
 800c404:	2001      	movs	r0, #1
}
 800c406:	4770      	bx	lr
  return HAL_OK;
 800c408:	2000      	movs	r0, #0
}
 800c40a:	bc30      	pop	{r4, r5}
 800c40c:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800c40e:	6813      	ldr	r3, [r2, #0]
 800c410:	f043 0301 	orr.w	r3, r3, #1
 800c414:	6013      	str	r3, [r2, #0]
 800c416:	e7f3      	b.n	800c400 <HAL_TIM_Base_Start+0x80>
 800c418:	40010000 	.word	0x40010000
 800c41c:	40000800 	.word	0x40000800
 800c420:	40000400 	.word	0x40000400
 800c424:	40000c00 	.word	0x40000c00
 800c428:	40010400 	.word	0x40010400
 800c42c:	00010007 	.word	0x00010007

0800c430 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800c430:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c434:	2b01      	cmp	r3, #1
 800c436:	d141      	bne.n	800c4bc <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c438:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c43a:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c43c:	4b24      	ldr	r3, [pc, #144]	; (800c4d0 <HAL_TIM_Base_Start_IT+0xa0>)
 800c43e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800c442:	bf18      	it	ne
 800c444:	429a      	cmpne	r2, r3
{
 800c446:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c448:	bf0c      	ite	eq
 800c44a:	2301      	moveq	r3, #1
 800c44c:	2300      	movne	r3, #0
 800c44e:	4d21      	ldr	r5, [pc, #132]	; (800c4d4 <HAL_TIM_Base_Start_IT+0xa4>)
 800c450:	4c21      	ldr	r4, [pc, #132]	; (800c4d8 <HAL_TIM_Base_Start_IT+0xa8>)
 800c452:	42aa      	cmp	r2, r5
 800c454:	bf08      	it	eq
 800c456:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c45a:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c45e:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c460:	42a2      	cmp	r2, r4
 800c462:	bf08      	it	eq
 800c464:	f043 0301 	orreq.w	r3, r3, #1
 800c468:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c46c:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c470:	481a      	ldr	r0, [pc, #104]	; (800c4dc <HAL_TIM_Base_Start_IT+0xac>)
 800c472:	42a2      	cmp	r2, r4
 800c474:	bf08      	it	eq
 800c476:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c47a:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c47c:	4282      	cmp	r2, r0
 800c47e:	bf08      	it	eq
 800c480:	f043 0301 	orreq.w	r3, r3, #1
 800c484:	4916      	ldr	r1, [pc, #88]	; (800c4e0 <HAL_TIM_Base_Start_IT+0xb0>)
 800c486:	428a      	cmp	r2, r1
 800c488:	bf08      	it	eq
 800c48a:	f043 0301 	orreq.w	r3, r3, #1
 800c48e:	b933      	cbnz	r3, 800c49e <HAL_TIM_Base_Start_IT+0x6e>
 800c490:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800c494:	1a10      	subs	r0, r2, r0
 800c496:	fab0 f080 	clz	r0, r0
 800c49a:	0940      	lsrs	r0, r0, #5
 800c49c:	b198      	cbz	r0, 800c4c6 <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c49e:	6891      	ldr	r1, [r2, #8]
 800c4a0:	4b10      	ldr	r3, [pc, #64]	; (800c4e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800c4a2:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4a4:	2b06      	cmp	r3, #6
 800c4a6:	d00b      	beq.n	800c4c0 <HAL_TIM_Base_Start_IT+0x90>
 800c4a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4ac:	d008      	beq.n	800c4c0 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 800c4ae:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800c4b0:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800c4b2:	f043 0301 	orr.w	r3, r3, #1
 800c4b6:	6013      	str	r3, [r2, #0]
}
 800c4b8:	bc30      	pop	{r4, r5}
 800c4ba:	4770      	bx	lr
    return HAL_ERROR;
 800c4bc:	2001      	movs	r0, #1
}
 800c4be:	4770      	bx	lr
  return HAL_OK;
 800c4c0:	2000      	movs	r0, #0
}
 800c4c2:	bc30      	pop	{r4, r5}
 800c4c4:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800c4c6:	6813      	ldr	r3, [r2, #0]
 800c4c8:	f043 0301 	orr.w	r3, r3, #1
 800c4cc:	6013      	str	r3, [r2, #0]
 800c4ce:	e7f3      	b.n	800c4b8 <HAL_TIM_Base_Start_IT+0x88>
 800c4d0:	40010000 	.word	0x40010000
 800c4d4:	40000400 	.word	0x40000400
 800c4d8:	40000800 	.word	0x40000800
 800c4dc:	40010400 	.word	0x40010400
 800c4e0:	40001800 	.word	0x40001800
 800c4e4:	00010007 	.word	0x00010007

0800c4e8 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	f000 80cc 	beq.w	800c686 <HAL_TIM_Encoder_Init+0x19e>
{
 800c4ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800c4f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c4f4:	4604      	mov	r4, r0
 800c4f6:	460d      	mov	r5, r1
 800c4f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f000 809b 	beq.w	800c638 <HAL_TIM_Encoder_Init+0x150>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c502:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c504:	2102      	movs	r1, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c506:	4a61      	ldr	r2, [pc, #388]	; (800c68c <HAL_TIM_Encoder_Init+0x1a4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800c508:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c50c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c510:	6899      	ldr	r1, [r3, #8]
 800c512:	ea02 0201 	and.w	r2, r2, r1
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c516:	495e      	ldr	r1, [pc, #376]	; (800c690 <HAL_TIM_Encoder_Init+0x1a8>)
 800c518:	eba3 0101 	sub.w	r1, r3, r1
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c51c:	609a      	str	r2, [r3, #8]
  tmpcr1 = TIMx->CR1;
 800c51e:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c520:	fab1 f181 	clz	r1, r1
 800c524:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800c528:	d02b      	beq.n	800c582 <HAL_TIM_Encoder_Init+0x9a>
 800c52a:	bb51      	cbnz	r1, 800c582 <HAL_TIM_Encoder_Init+0x9a>
 800c52c:	4859      	ldr	r0, [pc, #356]	; (800c694 <HAL_TIM_Encoder_Init+0x1ac>)
 800c52e:	4283      	cmp	r3, r0
 800c530:	f000 8087 	beq.w	800c642 <HAL_TIM_Encoder_Init+0x15a>
 800c534:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c538:	4283      	cmp	r3, r0
 800c53a:	f000 8082 	beq.w	800c642 <HAL_TIM_Encoder_Init+0x15a>
 800c53e:	4e56      	ldr	r6, [pc, #344]	; (800c698 <HAL_TIM_Encoder_Init+0x1b0>)
 800c540:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c544:	1b9e      	subs	r6, r3, r6
 800c546:	4283      	cmp	r3, r0
 800c548:	fab6 f686 	clz	r6, r6
 800c54c:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800c550:	f000 8081 	beq.w	800c656 <HAL_TIM_Encoder_Init+0x16e>
 800c554:	2e00      	cmp	r6, #0
 800c556:	d17e      	bne.n	800c656 <HAL_TIM_Encoder_Init+0x16e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c558:	4850      	ldr	r0, [pc, #320]	; (800c69c <HAL_TIM_Encoder_Init+0x1b4>)
 800c55a:	4951      	ldr	r1, [pc, #324]	; (800c6a0 <HAL_TIM_Encoder_Init+0x1b8>)
 800c55c:	428b      	cmp	r3, r1
 800c55e:	bf18      	it	ne
 800c560:	4283      	cmpne	r3, r0
 800c562:	f000 8082 	beq.w	800c66a <HAL_TIM_Encoder_Init+0x182>
 800c566:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c56a:	428b      	cmp	r3, r1
 800c56c:	d07d      	beq.n	800c66a <HAL_TIM_Encoder_Init+0x182>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c56e:	69a1      	ldr	r1, [r4, #24]
 800c570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c574:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c576:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800c578:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800c57a:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c57c:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c57e:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c580:	e023      	b.n	800c5ca <HAL_TIM_Encoder_Init+0xe2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c582:	4e45      	ldr	r6, [pc, #276]	; (800c698 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c584:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c588:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c58a:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800c58c:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c58e:	fab6 f686 	clz	r6, r6
 800c592:	0976      	lsrs	r6, r6, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c594:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c596:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c59a:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c59c:	69a0      	ldr	r0, [r4, #24]
 800c59e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c5a2:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800c5a4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5a6:	68e2      	ldr	r2, [r4, #12]
 800c5a8:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c5aa:	6862      	ldr	r2, [r4, #4]
 800c5ac:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5ae:	b951      	cbnz	r1, 800c5c6 <HAL_TIM_Encoder_Init+0xde>
 800c5b0:	b94e      	cbnz	r6, 800c5c6 <HAL_TIM_Encoder_Init+0xde>
 800c5b2:	493a      	ldr	r1, [pc, #232]	; (800c69c <HAL_TIM_Encoder_Init+0x1b4>)
 800c5b4:	4a3a      	ldr	r2, [pc, #232]	; (800c6a0 <HAL_TIM_Encoder_Init+0x1b8>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	bf18      	it	ne
 800c5ba:	428b      	cmpne	r3, r1
 800c5bc:	d003      	beq.n	800c5c6 <HAL_TIM_Encoder_Init+0xde>
 800c5be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d101      	bne.n	800c5ca <HAL_TIM_Encoder_Init+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 800c5c6:	6962      	ldr	r2, [r4, #20]
 800c5c8:	631a      	str	r2, [r3, #48]	; 0x30
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c5ca:	692a      	ldr	r2, [r5, #16]
  TIMx->EGR = TIM_EGR_UG;
 800c5cc:	2601      	movs	r6, #1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c5ce:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c5d0:	ea4f 1e02 	mov.w	lr, r2, lsl #4
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c5d4:	69aa      	ldr	r2, [r5, #24]
  TIMx->EGR = TIM_EGR_UG;
 800c5d6:	615e      	str	r6, [r3, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c5d8:	ea41 2c02 	orr.w	ip, r1, r2, lsl #8
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c5dc:	69e9      	ldr	r1, [r5, #28]
  tmpsmcr = htim->Instance->SMCR;
 800c5de:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c5e0:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
  tmpccmr1 = htim->Instance->CCMR1;
 800c5e4:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c5e6:	492f      	ldr	r1, [pc, #188]	; (800c6a4 <HAL_TIM_Encoder_Init+0x1bc>)
 800c5e8:	4039      	ands	r1, r7
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c5ea:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c5ec:	ea4c 0c01 	orr.w	ip, ip, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c5f0:	68e9      	ldr	r1, [r5, #12]
 800c5f2:	430a      	orrs	r2, r1
  tmpccer = htim->Instance->CCER;
 800c5f4:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c5f6:	f021 0eaa 	bic.w	lr, r1, #170	; 0xaa
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c5fa:	6a29      	ldr	r1, [r5, #32]
 800c5fc:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c600:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 800c602:	682d      	ldr	r5, [r5, #0]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c604:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 800c608:	4328      	orrs	r0, r5
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c60a:	ea41 010e 	orr.w	r1, r1, lr
  htim->Instance->SMCR = tmpsmcr;
 800c60e:	6098      	str	r0, [r3, #8]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c610:	4825      	ldr	r0, [pc, #148]	; (800c6a8 <HAL_TIM_Encoder_Init+0x1c0>)
 800c612:	ea0c 0000 	and.w	r0, ip, r0
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c616:	4302      	orrs	r2, r0
  return HAL_OK;
 800c618:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 800c61a:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800c61c:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c61e:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c622:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c626:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c62a:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c62e:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800c632:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 800c636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800c638:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800c63c:	f7f9 f8d8 	bl	80057f0 <HAL_TIM_Encoder_MspInit>
 800c640:	e75f      	b.n	800c502 <HAL_TIM_Encoder_Init+0x1a>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c642:	4e15      	ldr	r6, [pc, #84]	; (800c698 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c644:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c648:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c64a:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800c64c:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c64e:	fab6 f686 	clz	r6, r6
 800c652:	0976      	lsrs	r6, r6, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c654:	e79e      	b.n	800c594 <HAL_TIM_Encoder_Init+0xac>
    tmpcr1 |= Structure->CounterMode;
 800c656:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c658:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c65c:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c65e:	4813      	ldr	r0, [pc, #76]	; (800c6ac <HAL_TIM_Encoder_Init+0x1c4>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c660:	4283      	cmp	r3, r0
 800c662:	d097      	beq.n	800c594 <HAL_TIM_Encoder_Init+0xac>
 800c664:	2e00      	cmp	r6, #0
 800c666:	d195      	bne.n	800c594 <HAL_TIM_Encoder_Init+0xac>
 800c668:	e776      	b.n	800c558 <HAL_TIM_Encoder_Init+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c66a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c66c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c670:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c672:	69a1      	ldr	r1, [r4, #24]
 800c674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c678:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c67a:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800c67c:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800c67e:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c680:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c682:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c684:	e795      	b.n	800c5b2 <HAL_TIM_Encoder_Init+0xca>
    return HAL_ERROR;
 800c686:	2001      	movs	r0, #1
}
 800c688:	4770      	bx	lr
 800c68a:	bf00      	nop
 800c68c:	fffebff8 	.word	0xfffebff8
 800c690:	40010000 	.word	0x40010000
 800c694:	40000400 	.word	0x40000400
 800c698:	40010400 	.word	0x40010400
 800c69c:	40014000 	.word	0x40014000
 800c6a0:	40014400 	.word	0x40014400
 800c6a4:	fffffcfc 	.word	0xfffffcfc
 800c6a8:	ffff0303 	.word	0xffff0303
 800c6ac:	40000c00 	.word	0x40000c00

0800c6b0 <HAL_TIM_Encoder_Start>:
{
 800c6b0:	b500      	push	{lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c6b2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c6b6:	f890 c03f 	ldrb.w	ip, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c6ba:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c6be:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c6c0:	f890 e045 	ldrb.w	lr, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c6c4:	b2d2      	uxtb	r2, r2
  if (Channel == TIM_CHANNEL_1)
 800c6c6:	b9c1      	cbnz	r1, 800c6fa <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d123      	bne.n	800c714 <HAL_TIM_Encoder_Start+0x64>
 800c6cc:	2a01      	cmp	r2, #1
 800c6ce:	d121      	bne.n	800c714 <HAL_TIM_Encoder_Start+0x64>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c6d0:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6d2:	2302      	movs	r3, #2
 800c6d4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6d8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c6dc:	6a13      	ldr	r3, [r2, #32]
 800c6de:	f023 0301 	bic.w	r3, r3, #1
 800c6e2:	6213      	str	r3, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c6e4:	6a13      	ldr	r3, [r2, #32]
 800c6e6:	f043 0301 	orr.w	r3, r3, #1
 800c6ea:	6213      	str	r3, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 800c6ec:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800c6ee:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800c6f0:	f043 0301 	orr.w	r3, r3, #1
 800c6f4:	6013      	str	r3, [r2, #0]
}
 800c6f6:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (Channel == TIM_CHANNEL_2)
 800c6fa:	2904      	cmp	r1, #4
 800c6fc:	fa5f fc8c 	uxtb.w	ip, ip
 800c700:	fa5f fe8e 	uxtb.w	lr, lr
 800c704:	d027      	beq.n	800c756 <HAL_TIM_Encoder_Start+0xa6>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c706:	2b01      	cmp	r3, #1
 800c708:	d104      	bne.n	800c714 <HAL_TIM_Encoder_Start+0x64>
 800c70a:	f1bc 0f01 	cmp.w	ip, #1
 800c70e:	d101      	bne.n	800c714 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c710:	2a01      	cmp	r2, #1
 800c712:	d002      	beq.n	800c71a <HAL_TIM_Encoder_Start+0x6a>
      return HAL_ERROR;
 800c714:	2001      	movs	r0, #1
}
 800c716:	f85d fb04 	ldr.w	pc, [sp], #4
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c71a:	f1be 0f01 	cmp.w	lr, #1
 800c71e:	d1f9      	bne.n	800c714 <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c720:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c722:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c724:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c728:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c72c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c730:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800c734:	6a13      	ldr	r3, [r2, #32]
 800c736:	f023 0301 	bic.w	r3, r3, #1
 800c73a:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c73c:	6a13      	ldr	r3, [r2, #32]
 800c73e:	f043 0301 	orr.w	r3, r3, #1
 800c742:	6213      	str	r3, [r2, #32]
  TIMx->CCER &= ~tmp;
 800c744:	6a13      	ldr	r3, [r2, #32]
 800c746:	f023 0310 	bic.w	r3, r3, #16
 800c74a:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c74c:	6a13      	ldr	r3, [r2, #32]
 800c74e:	f043 0310 	orr.w	r3, r3, #16
 800c752:	6213      	str	r3, [r2, #32]
}
 800c754:	e7ca      	b.n	800c6ec <HAL_TIM_Encoder_Start+0x3c>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c756:	f1bc 0f01 	cmp.w	ip, #1
 800c75a:	d1db      	bne.n	800c714 <HAL_TIM_Encoder_Start+0x64>
 800c75c:	f1be 0f01 	cmp.w	lr, #1
 800c760:	d1d8      	bne.n	800c714 <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c762:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c764:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c766:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c76a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800c76e:	e7e9      	b.n	800c744 <HAL_TIM_Encoder_Start+0x94>

0800c770 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800c770:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c774:	2b01      	cmp	r3, #1
 800c776:	f000 8081 	beq.w	800c87c <HAL_TIM_ConfigClockSource+0x10c>
 800c77a:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800c77c:	2302      	movs	r3, #2
{
 800c77e:	b470      	push	{r4, r5, r6}
  tmpsmcr = htim->Instance->SMCR;
 800c780:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 800c782:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800c784:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800c788:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c78c:	4b5a      	ldr	r3, [pc, #360]	; (800c8f8 <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 800c78e:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c790:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800c792:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800c794:	680b      	ldr	r3, [r1, #0]
 800c796:	2b70      	cmp	r3, #112	; 0x70
 800c798:	f000 809c 	beq.w	800c8d4 <HAL_TIM_ConfigClockSource+0x164>
 800c79c:	d825      	bhi.n	800c7ea <HAL_TIM_ConfigClockSource+0x7a>
 800c79e:	2b50      	cmp	r3, #80	; 0x50
 800c7a0:	d06e      	beq.n	800c880 <HAL_TIM_ConfigClockSource+0x110>
 800c7a2:	d939      	bls.n	800c818 <HAL_TIM_ConfigClockSource+0xa8>
 800c7a4:	2b60      	cmp	r3, #96	; 0x60
 800c7a6:	d118      	bne.n	800c7da <HAL_TIM_ConfigClockSource+0x6a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7a8:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c7aa:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7ac:	f020 0010 	bic.w	r0, r0, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c7b0:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7b2:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800c7b4:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800c7b6:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c7b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c7bc:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer = TIMx->CCER;
 800c7c0:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c7c2:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 800c7c6:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c7c8:	4b4c      	ldr	r3, [pc, #304]	; (800c8fc <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800c7ca:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCER = tmpccer;
 800c7ce:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800c7d0:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c7d2:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c7d4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800c7d8:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800c7da:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800c7dc:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800c7de:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c7e2:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800c7e6:	bc70      	pop	{r4, r5, r6}
 800c7e8:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800c7ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7ee:	d060      	beq.n	800c8b2 <HAL_TIM_ConfigClockSource+0x142>
 800c7f0:	d933      	bls.n	800c85a <HAL_TIM_ConfigClockSource+0xea>
 800c7f2:	4943      	ldr	r1, [pc, #268]	; (800c900 <HAL_TIM_ConfigClockSource+0x190>)
 800c7f4:	428b      	cmp	r3, r1
 800c7f6:	d006      	beq.n	800c806 <HAL_TIM_ConfigClockSource+0x96>
 800c7f8:	d929      	bls.n	800c84e <HAL_TIM_ConfigClockSource+0xde>
 800c7fa:	4942      	ldr	r1, [pc, #264]	; (800c904 <HAL_TIM_ConfigClockSource+0x194>)
 800c7fc:	428b      	cmp	r3, r1
 800c7fe:	d002      	beq.n	800c806 <HAL_TIM_ConfigClockSource+0x96>
 800c800:	3110      	adds	r1, #16
 800c802:	428b      	cmp	r3, r1
 800c804:	d1e9      	bne.n	800c7da <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 800c806:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c808:	493c      	ldr	r1, [pc, #240]	; (800c8fc <HAL_TIM_ConfigClockSource+0x18c>)
 800c80a:	4001      	ands	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800c80c:	2000      	movs	r0, #0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c80e:	430b      	orrs	r3, r1
 800c810:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800c814:	60a3      	str	r3, [r4, #8]
}
 800c816:	e7e0      	b.n	800c7da <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800c818:	2b40      	cmp	r3, #64	; 0x40
 800c81a:	d123      	bne.n	800c864 <HAL_TIM_ConfigClockSource+0xf4>
  tmpccer = TIMx->CCER;
 800c81c:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c81e:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c820:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c822:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c826:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c82a:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800c82c:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800c82e:	4b33      	ldr	r3, [pc, #204]	; (800c8fc <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c830:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c832:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c834:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c838:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800c83c:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800c83e:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800c840:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800c842:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c844:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c846:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800c84a:	60a3      	str	r3, [r4, #8]
}
 800c84c:	e7c5      	b.n	800c7da <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800c84e:	f023 0110 	bic.w	r1, r3, #16
 800c852:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c856:	d1c0      	bne.n	800c7da <HAL_TIM_ConfigClockSource+0x6a>
 800c858:	e7d5      	b.n	800c806 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 800c85a:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 800c85e:	bf18      	it	ne
 800c860:	2001      	movne	r0, #1
 800c862:	e7ba      	b.n	800c7da <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800c864:	d8b9      	bhi.n	800c7da <HAL_TIM_ConfigClockSource+0x6a>
 800c866:	2b20      	cmp	r3, #32
 800c868:	d0cd      	beq.n	800c806 <HAL_TIM_ConfigClockSource+0x96>
 800c86a:	d903      	bls.n	800c874 <HAL_TIM_ConfigClockSource+0x104>
 800c86c:	2b30      	cmp	r3, #48	; 0x30
 800c86e:	d0ca      	beq.n	800c806 <HAL_TIM_ConfigClockSource+0x96>
 800c870:	2001      	movs	r0, #1
 800c872:	e7b2      	b.n	800c7da <HAL_TIM_ConfigClockSource+0x6a>
 800c874:	f033 0110 	bics.w	r1, r3, #16
 800c878:	d1af      	bne.n	800c7da <HAL_TIM_ConfigClockSource+0x6a>
 800c87a:	e7c4      	b.n	800c806 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 800c87c:	2002      	movs	r0, #2
}
 800c87e:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800c880:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c882:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c884:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c886:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c88a:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c88e:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800c890:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800c892:	4b1a      	ldr	r3, [pc, #104]	; (800c8fc <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c894:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c896:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c898:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c89c:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800c8a0:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800c8a2:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800c8a4:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800c8a6:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c8a8:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c8aa:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800c8ae:	60a3      	str	r3, [r4, #8]
}
 800c8b0:	e793      	b.n	800c7da <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c8b2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800c8b6:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c8b8:	432b      	orrs	r3, r5
 800c8ba:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8bc:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800c8c0:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c8c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800c8c6:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800c8c8:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c8ca:	68a3      	ldr	r3, [r4, #8]
 800c8cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c8d0:	60a3      	str	r3, [r4, #8]
      break;
 800c8d2:	e782      	b.n	800c7da <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c8d4:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800c8d8:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c8da:	432b      	orrs	r3, r5
 800c8dc:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8de:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800c8e2:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c8e4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800c8e8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800c8ea:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800c8ec:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c8ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800c8f2:	60a3      	str	r3, [r4, #8]
      break;
 800c8f4:	e771      	b.n	800c7da <HAL_TIM_ConfigClockSource+0x6a>
 800c8f6:	bf00      	nop
 800c8f8:	ffce0088 	.word	0xffce0088
 800c8fc:	ffcfff8f 	.word	0xffcfff8f
 800c900:	00100020 	.word	0x00100020
 800c904:	00100030 	.word	0x00100030

0800c908 <HAL_TIM_OC_DelayElapsedCallback>:
 800c908:	4770      	bx	lr
 800c90a:	bf00      	nop

0800c90c <HAL_TIM_IC_CaptureCallback>:
 800c90c:	4770      	bx	lr
 800c90e:	bf00      	nop

0800c910 <HAL_TIM_PWM_PulseFinishedCallback>:
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop

0800c914 <HAL_TIM_TriggerCallback>:
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop

0800c918 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c918:	6803      	ldr	r3, [r0, #0]
 800c91a:	691a      	ldr	r2, [r3, #16]
 800c91c:	0791      	lsls	r1, r2, #30
{
 800c91e:	b510      	push	{r4, lr}
 800c920:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c922:	d502      	bpl.n	800c92a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c924:	68da      	ldr	r2, [r3, #12]
 800c926:	0792      	lsls	r2, r2, #30
 800c928:	d468      	bmi.n	800c9fc <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c92a:	691a      	ldr	r2, [r3, #16]
 800c92c:	0752      	lsls	r2, r2, #29
 800c92e:	d502      	bpl.n	800c936 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c930:	68da      	ldr	r2, [r3, #12]
 800c932:	0750      	lsls	r0, r2, #29
 800c934:	d44f      	bmi.n	800c9d6 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c936:	691a      	ldr	r2, [r3, #16]
 800c938:	0711      	lsls	r1, r2, #28
 800c93a:	d502      	bpl.n	800c942 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c93c:	68da      	ldr	r2, [r3, #12]
 800c93e:	0712      	lsls	r2, r2, #28
 800c940:	d437      	bmi.n	800c9b2 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c942:	691a      	ldr	r2, [r3, #16]
 800c944:	06d0      	lsls	r0, r2, #27
 800c946:	d502      	bpl.n	800c94e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c948:	68da      	ldr	r2, [r3, #12]
 800c94a:	06d1      	lsls	r1, r2, #27
 800c94c:	d41e      	bmi.n	800c98c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c94e:	691a      	ldr	r2, [r3, #16]
 800c950:	07d2      	lsls	r2, r2, #31
 800c952:	d502      	bpl.n	800c95a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c954:	68da      	ldr	r2, [r3, #12]
 800c956:	07d0      	lsls	r0, r2, #31
 800c958:	d469      	bmi.n	800ca2e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c95a:	691a      	ldr	r2, [r3, #16]
 800c95c:	0611      	lsls	r1, r2, #24
 800c95e:	d502      	bpl.n	800c966 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c960:	68da      	ldr	r2, [r3, #12]
 800c962:	0612      	lsls	r2, r2, #24
 800c964:	d46b      	bmi.n	800ca3e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c966:	691a      	ldr	r2, [r3, #16]
 800c968:	05d0      	lsls	r0, r2, #23
 800c96a:	d502      	bpl.n	800c972 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c96c:	68da      	ldr	r2, [r3, #12]
 800c96e:	0611      	lsls	r1, r2, #24
 800c970:	d46d      	bmi.n	800ca4e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c972:	691a      	ldr	r2, [r3, #16]
 800c974:	0652      	lsls	r2, r2, #25
 800c976:	d502      	bpl.n	800c97e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c978:	68da      	ldr	r2, [r3, #12]
 800c97a:	0650      	lsls	r0, r2, #25
 800c97c:	d46f      	bmi.n	800ca5e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c97e:	691a      	ldr	r2, [r3, #16]
 800c980:	0691      	lsls	r1, r2, #26
 800c982:	d502      	bpl.n	800c98a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c984:	68da      	ldr	r2, [r3, #12]
 800c986:	0692      	lsls	r2, r2, #26
 800c988:	d449      	bmi.n	800ca1e <HAL_TIM_IRQHandler+0x106>
}
 800c98a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c98c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c990:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800c992:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c994:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c996:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c998:	69db      	ldr	r3, [r3, #28]
 800c99a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c99e:	d16f      	bne.n	800ca80 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9a0:	f7ff ffb2 	bl	800c908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	f7ff ffb3 	bl	800c910 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9aa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c9ac:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9ae:	7722      	strb	r2, [r4, #28]
 800c9b0:	e7cd      	b.n	800c94e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c9b2:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c9b6:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800c9b8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c9ba:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c9bc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c9be:	69db      	ldr	r3, [r3, #28]
 800c9c0:	079b      	lsls	r3, r3, #30
 800c9c2:	d15a      	bne.n	800ca7a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9c4:	f7ff ffa0 	bl	800c908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	f7ff ffa1 	bl	800c910 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9ce:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c9d0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9d2:	7722      	strb	r2, [r4, #28]
 800c9d4:	e7b5      	b.n	800c942 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c9d6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c9da:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800c9dc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c9de:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c9e0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c9e2:	699b      	ldr	r3, [r3, #24]
 800c9e4:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c9e8:	d144      	bne.n	800ca74 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9ea:	f7ff ff8d 	bl	800c908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f7ff ff8e 	bl	800c910 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9f4:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c9f6:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9f8:	7722      	strb	r2, [r4, #28]
 800c9fa:	e79c      	b.n	800c936 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c9fc:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca00:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ca02:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca04:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ca06:	699b      	ldr	r3, [r3, #24]
 800ca08:	0799      	lsls	r1, r3, #30
 800ca0a:	d130      	bne.n	800ca6e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca0c:	f7ff ff7c 	bl	800c908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca10:	4620      	mov	r0, r4
 800ca12:	f7ff ff7d 	bl	800c910 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca16:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ca18:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca1a:	7722      	strb	r2, [r4, #28]
 800ca1c:	e785      	b.n	800c92a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ca1e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800ca22:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ca24:	611a      	str	r2, [r3, #16]
}
 800ca26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800ca2a:	f000 b887 	b.w	800cb3c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ca2e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca32:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ca34:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca36:	f7f3 fe3b 	bl	80006b0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	e78d      	b.n	800c95a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800ca42:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca44:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800ca46:	f000 f87b 	bl	800cb40 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ca4a:	6823      	ldr	r3, [r4, #0]
 800ca4c:	e78b      	b.n	800c966 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800ca52:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca54:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800ca56:	f000 f875 	bl	800cb44 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ca5a:	6823      	ldr	r3, [r4, #0]
 800ca5c:	e789      	b.n	800c972 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ca5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800ca62:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ca64:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ca66:	f7ff ff55 	bl	800c914 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ca6a:	6823      	ldr	r3, [r4, #0]
 800ca6c:	e787      	b.n	800c97e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800ca6e:	f7ff ff4d 	bl	800c90c <HAL_TIM_IC_CaptureCallback>
 800ca72:	e7d0      	b.n	800ca16 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800ca74:	f7ff ff4a 	bl	800c90c <HAL_TIM_IC_CaptureCallback>
 800ca78:	e7bc      	b.n	800c9f4 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800ca7a:	f7ff ff47 	bl	800c90c <HAL_TIM_IC_CaptureCallback>
 800ca7e:	e7a6      	b.n	800c9ce <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800ca80:	f7ff ff44 	bl	800c90c <HAL_TIM_IC_CaptureCallback>
 800ca84:	e791      	b.n	800c9aa <HAL_TIM_IRQHandler+0x92>
 800ca86:	bf00      	nop

0800ca88 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d04b      	beq.n	800cb28 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca90:	6803      	ldr	r3, [r0, #0]
 800ca92:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800ca94:	2002      	movs	r0, #2
{
 800ca96:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca98:	4d24      	ldr	r5, [pc, #144]	; (800cb2c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ca9a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca9e:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800caa0:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800caa2:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800caa4:	d029      	beq.n	800cafa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800caa6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800caaa:	42ab      	cmp	r3, r5
 800caac:	d025      	beq.n	800cafa <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800caae:	4d20      	ldr	r5, [pc, #128]	; (800cb30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800cab0:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cab4:	42ab      	cmp	r3, r5
 800cab6:	bf18      	it	ne
 800cab8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800cabc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800cac0:	bf0c      	ite	eq
 800cac2:	f04f 0c01 	moveq.w	ip, #1
 800cac6:	f04f 0c00 	movne.w	ip, #0
 800caca:	42ab      	cmp	r3, r5
 800cacc:	bf08      	it	eq
 800cace:	f04c 0c01 	orreq.w	ip, ip, #1
 800cad2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800cad6:	42ab      	cmp	r3, r5
 800cad8:	bf08      	it	eq
 800cada:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cade:	680d      	ldr	r5, [r1, #0]
 800cae0:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cae2:	4d14      	ldr	r5, [pc, #80]	; (800cb34 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 800cae4:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cae6:	42ab      	cmp	r3, r5
 800cae8:	bf14      	ite	ne
 800caea:	4660      	movne	r0, ip
 800caec:	f04c 0001 	orreq.w	r0, ip, #1
 800caf0:	b960      	cbnz	r0, 800cb0c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800caf2:	4811      	ldr	r0, [pc, #68]	; (800cb38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800caf4:	4283      	cmp	r3, r0
 800caf6:	d009      	beq.n	800cb0c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800caf8:	e00d      	b.n	800cb16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cafa:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cafc:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb00:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb02:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb04:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb08:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800cb0a:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb0c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb0e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb12:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb14:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800cb16:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800cb18:	2101      	movs	r1, #1

  return HAL_OK;
 800cb1a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800cb1c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800cb20:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800cb24:	bc30      	pop	{r4, r5}
 800cb26:	4770      	bx	lr
  __HAL_LOCK(htim);
 800cb28:	2002      	movs	r0, #2
}
 800cb2a:	4770      	bx	lr
 800cb2c:	40010000 	.word	0x40010000
 800cb30:	40000400 	.word	0x40000400
 800cb34:	40001800 	.word	0x40001800
 800cb38:	40014000 	.word	0x40014000

0800cb3c <HAL_TIMEx_CommutCallback>:
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop

0800cb40 <HAL_TIMEx_BreakCallback>:
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop

0800cb44 <HAL_TIMEx_Break2Callback>:
 800cb44:	4770      	bx	lr
 800cb46:	bf00      	nop

0800cb48 <HAL_UART_TxCpltCallback>:
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop

0800cb4c <HAL_UART_ErrorCallback>:
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop

0800cb50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb50:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb52:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800cb54:	2300      	movs	r3, #0
 800cb56:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cb5a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cb5e:	f7ff fff5 	bl	800cb4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb62:	bd08      	pop	{r3, pc}

0800cb64 <HAL_UARTEx_RxEventCallback>:
}
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop

0800cb68 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cb68:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cb6a:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cb6e:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 800cb70:	ea12 0f0c 	tst.w	r2, ip
{
 800cb74:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cb76:	681d      	ldr	r5, [r3, #0]
{
 800cb78:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cb7a:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 800cb7c:	f000 8121 	beq.w	800cdc2 <HAL_UART_IRQHandler+0x25a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cb80:	4eb1      	ldr	r6, [pc, #708]	; (800ce48 <HAL_UART_IRQHandler+0x2e0>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cb82:	48b2      	ldr	r0, [pc, #712]	; (800ce4c <HAL_UART_IRQHandler+0x2e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cb84:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cb88:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cb8a:	ea5c 0600 	orrs.w	r6, ip, r0
 800cb8e:	f040 8089 	bne.w	800cca4 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb92:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800cb94:	2801      	cmp	r0, #1
 800cb96:	d022      	beq.n	800cbde <HAL_UART_IRQHandler+0x76>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cb98:	02d0      	lsls	r0, r2, #11
 800cb9a:	d502      	bpl.n	800cba2 <HAL_UART_IRQHandler+0x3a>
 800cb9c:	024e      	lsls	r6, r1, #9
 800cb9e:	f100 8139 	bmi.w	800ce14 <HAL_UART_IRQHandler+0x2ac>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cba2:	0610      	lsls	r0, r2, #24
 800cba4:	d506      	bpl.n	800cbb4 <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cba6:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cbaa:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cbae:	4301      	orrs	r1, r0
 800cbb0:	f040 8128 	bne.w	800ce04 <HAL_UART_IRQHandler+0x29c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cbb4:	0651      	lsls	r1, r2, #25
 800cbb6:	d567      	bpl.n	800cc88 <HAL_UART_IRQHandler+0x120>
 800cbb8:	066e      	lsls	r6, r5, #25
 800cbba:	d565      	bpl.n	800cc88 <HAL_UART_IRQHandler+0x120>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbbc:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cbc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc4:	e843 2100 	strex	r1, r2, [r3]
 800cbc8:	2900      	cmp	r1, #0
 800cbca:	d1f7      	bne.n	800cbbc <HAL_UART_IRQHandler+0x54>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cbcc:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cbce:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cbd0:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800cbd2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->TxISR = NULL;
 800cbd6:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 800cbd8:	f7ff ffb6 	bl	800cb48 <HAL_UART_TxCpltCallback>
}
 800cbdc:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cbde:	06d0      	lsls	r0, r2, #27
 800cbe0:	d5da      	bpl.n	800cb98 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cbe2:	06ee      	lsls	r6, r5, #27
 800cbe4:	d5d8      	bpl.n	800cb98 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cbe6:	2210      	movs	r2, #16
 800cbe8:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbea:	689a      	ldr	r2, [r3, #8]
 800cbec:	0655      	lsls	r5, r2, #25
 800cbee:	f140 813c 	bpl.w	800ce6a <HAL_UART_IRQHandler+0x302>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cbf2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800cbf6:	6801      	ldr	r1, [r0, #0]
 800cbf8:	684a      	ldr	r2, [r1, #4]
 800cbfa:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800cbfc:	2a00      	cmp	r2, #0
 800cbfe:	d0ed      	beq.n	800cbdc <HAL_UART_IRQHandler+0x74>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cc00:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800cc04:	4291      	cmp	r1, r2
 800cc06:	d9e9      	bls.n	800cbdc <HAL_UART_IRQHandler+0x74>
        huart->RxXferCount = nb_remaining_rx_data;
 800cc08:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cc0c:	69c2      	ldr	r2, [r0, #28]
 800cc0e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800cc12:	d02f      	beq.n	800cc74 <HAL_UART_IRQHandler+0x10c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc14:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc1c:	e843 2100 	strex	r1, r2, [r3]
 800cc20:	2900      	cmp	r1, #0
 800cc22:	d1f7      	bne.n	800cc14 <HAL_UART_IRQHandler+0xac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc24:	f103 0208 	add.w	r2, r3, #8
 800cc28:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc2c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc30:	f103 0508 	add.w	r5, r3, #8
 800cc34:	e845 2100 	strex	r1, r2, [r5]
 800cc38:	2900      	cmp	r1, #0
 800cc3a:	d1f3      	bne.n	800cc24 <HAL_UART_IRQHandler+0xbc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc3c:	f103 0208 	add.w	r2, r3, #8
 800cc40:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc48:	f103 0508 	add.w	r5, r3, #8
 800cc4c:	e845 2100 	strex	r1, r2, [r5]
 800cc50:	2900      	cmp	r1, #0
 800cc52:	d1f3      	bne.n	800cc3c <HAL_UART_IRQHandler+0xd4>
          huart->RxState = HAL_UART_STATE_READY;
 800cc54:	2220      	movs	r2, #32
 800cc56:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc5a:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc5c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc60:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc64:	e843 2100 	strex	r1, r2, [r3]
 800cc68:	2900      	cmp	r1, #0
 800cc6a:	d1f7      	bne.n	800cc5c <HAL_UART_IRQHandler+0xf4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cc6c:	f7fb fa22 	bl	80080b4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cc70:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cc74:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cc76:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cc78:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cc7a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800cc7e:	1ac9      	subs	r1, r1, r3
 800cc80:	b289      	uxth	r1, r1
 800cc82:	f7ff ff6f 	bl	800cb64 <HAL_UARTEx_RxEventCallback>
}
 800cc86:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cc88:	0210      	lsls	r0, r2, #8
 800cc8a:	d502      	bpl.n	800cc92 <HAL_UART_IRQHandler+0x12a>
 800cc8c:	0069      	lsls	r1, r5, #1
 800cc8e:	f100 80e7 	bmi.w	800ce60 <HAL_UART_IRQHandler+0x2f8>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cc92:	01d3      	lsls	r3, r2, #7
 800cc94:	d5a2      	bpl.n	800cbdc <HAL_UART_IRQHandler+0x74>
 800cc96:	2d00      	cmp	r5, #0
 800cc98:	daa0      	bge.n	800cbdc <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cc9a:	4620      	mov	r0, r4
}
 800cc9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cca0:	f000 bd7a 	b.w	800d798 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cca4:	07d6      	lsls	r6, r2, #31
 800cca6:	d509      	bpl.n	800ccbc <HAL_UART_IRQHandler+0x154>
 800cca8:	05ee      	lsls	r6, r5, #23
 800ccaa:	d507      	bpl.n	800ccbc <HAL_UART_IRQHandler+0x154>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ccac:	2601      	movs	r6, #1
 800ccae:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ccb0:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800ccb4:	f046 0601 	orr.w	r6, r6, #1
 800ccb8:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ccbc:	0796      	lsls	r6, r2, #30
 800ccbe:	f140 8092 	bpl.w	800cde6 <HAL_UART_IRQHandler+0x27e>
 800ccc2:	07ce      	lsls	r6, r1, #31
 800ccc4:	d50a      	bpl.n	800ccdc <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ccc6:	2602      	movs	r6, #2
 800ccc8:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ccca:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800ccce:	f046 0604 	orr.w	r6, r6, #4
 800ccd2:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ccd6:	0756      	lsls	r6, r2, #29
 800ccd8:	f100 808b 	bmi.w	800cdf2 <HAL_UART_IRQHandler+0x28a>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ccdc:	0716      	lsls	r6, r2, #28
 800ccde:	d50b      	bpl.n	800ccf8 <HAL_UART_IRQHandler+0x190>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cce0:	f005 0620 	and.w	r6, r5, #32
 800cce4:	4330      	orrs	r0, r6
 800cce6:	d007      	beq.n	800ccf8 <HAL_UART_IRQHandler+0x190>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cce8:	2008      	movs	r0, #8
 800ccea:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ccec:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800ccf0:	f040 0008 	orr.w	r0, r0, #8
 800ccf4:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ccf8:	0516      	lsls	r6, r2, #20
 800ccfa:	d50a      	bpl.n	800cd12 <HAL_UART_IRQHandler+0x1aa>
 800ccfc:	0168      	lsls	r0, r5, #5
 800ccfe:	d508      	bpl.n	800cd12 <HAL_UART_IRQHandler+0x1aa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd00:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800cd04:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cd06:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800cd0a:	f040 0020 	orr.w	r0, r0, #32
 800cd0e:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd12:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800cd16:	2800      	cmp	r0, #0
 800cd18:	f43f af60 	beq.w	800cbdc <HAL_UART_IRQHandler+0x74>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cd1c:	0696      	lsls	r6, r2, #26
 800cd1e:	d50b      	bpl.n	800cd38 <HAL_UART_IRQHandler+0x1d0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd20:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd24:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800cd28:	ea55 0201 	orrs.w	r2, r5, r1
 800cd2c:	d004      	beq.n	800cd38 <HAL_UART_IRQHandler+0x1d0>
        if (huart->RxISR != NULL)
 800cd2e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800cd30:	b112      	cbz	r2, 800cd38 <HAL_UART_IRQHandler+0x1d0>
          huart->RxISR(huart);
 800cd32:	4620      	mov	r0, r4
 800cd34:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd36:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800cd38:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd3c:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cd3e:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd42:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800cd46:	4315      	orrs	r5, r2
 800cd48:	f000 80c5 	beq.w	800ced6 <HAL_UART_IRQHandler+0x36e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd4c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd54:	e843 2100 	strex	r1, r2, [r3]
 800cd58:	2900      	cmp	r1, #0
 800cd5a:	d1f7      	bne.n	800cd4c <HAL_UART_IRQHandler+0x1e4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd5c:	483c      	ldr	r0, [pc, #240]	; (800ce50 <HAL_UART_IRQHandler+0x2e8>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd5e:	f103 0208 	add.w	r2, r3, #8
 800cd62:	e852 2f00 	ldrex	r2, [r2]
 800cd66:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd68:	f103 0508 	add.w	r5, r3, #8
 800cd6c:	e845 2100 	strex	r1, r2, [r5]
 800cd70:	2900      	cmp	r1, #0
 800cd72:	d1f4      	bne.n	800cd5e <HAL_UART_IRQHandler+0x1f6>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd74:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800cd76:	2a01      	cmp	r2, #1
 800cd78:	d054      	beq.n	800ce24 <HAL_UART_IRQHandler+0x2bc>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd7a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800cd7c:	2120      	movs	r1, #32
 800cd7e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd82:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd84:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800cd86:	6762      	str	r2, [r4, #116]	; 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd88:	064d      	lsls	r5, r1, #25
 800cd8a:	d565      	bpl.n	800ce58 <HAL_UART_IRQHandler+0x2f0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd8c:	f103 0208 	add.w	r2, r3, #8
 800cd90:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd98:	f103 0008 	add.w	r0, r3, #8
 800cd9c:	e840 2100 	strex	r1, r2, [r0]
 800cda0:	2900      	cmp	r1, #0
 800cda2:	d1f3      	bne.n	800cd8c <HAL_UART_IRQHandler+0x224>
          if (huart->hdmarx != NULL)
 800cda4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	d055      	beq.n	800ce58 <HAL_UART_IRQHandler+0x2f0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cdac:	4b29      	ldr	r3, [pc, #164]	; (800ce54 <HAL_UART_IRQHandler+0x2ec>)
 800cdae:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cdb0:	f7fb faf8 	bl	80083a4 <HAL_DMA_Abort_IT>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	f43f af11 	beq.w	800cbdc <HAL_UART_IRQHandler+0x74>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cdba:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800cdbe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800cdc0:	e00e      	b.n	800cde0 <HAL_UART_IRQHandler+0x278>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cdc2:	0696      	lsls	r6, r2, #26
 800cdc4:	f57f aee5 	bpl.w	800cb92 <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cdc8:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cdcc:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 800cdd0:	ea56 060c 	orrs.w	r6, r6, ip
 800cdd4:	f43f aedd 	beq.w	800cb92 <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800cdd8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	f43f aefe 	beq.w	800cbdc <HAL_UART_IRQHandler+0x74>
}
 800cde0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cde4:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cde6:	0756      	lsls	r6, r2, #29
 800cde8:	f57f af78 	bpl.w	800ccdc <HAL_UART_IRQHandler+0x174>
 800cdec:	07ce      	lsls	r6, r1, #31
 800cdee:	f57f af75 	bpl.w	800ccdc <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cdf2:	2604      	movs	r6, #4
 800cdf4:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cdf6:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800cdfa:	f046 0602 	orr.w	r6, r6, #2
 800cdfe:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
 800ce02:	e76b      	b.n	800ccdc <HAL_UART_IRQHandler+0x174>
    if (huart->TxISR != NULL)
 800ce04:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	f43f aee8 	beq.w	800cbdc <HAL_UART_IRQHandler+0x74>
      huart->TxISR(huart);
 800ce0c:	4620      	mov	r0, r4
}
 800ce0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800ce12:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ce14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800ce18:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ce1a:	621a      	str	r2, [r3, #32]
}
 800ce1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800ce20:	f000 bcb8 	b.w	800d794 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce24:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce28:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce2c:	e843 2100 	strex	r1, r2, [r3]
 800ce30:	2900      	cmp	r1, #0
 800ce32:	d0a2      	beq.n	800cd7a <HAL_UART_IRQHandler+0x212>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce34:	e853 2f00 	ldrex	r2, [r3]
 800ce38:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce3c:	e843 2100 	strex	r1, r2, [r3]
 800ce40:	2900      	cmp	r1, #0
 800ce42:	d1ef      	bne.n	800ce24 <HAL_UART_IRQHandler+0x2bc>
 800ce44:	e799      	b.n	800cd7a <HAL_UART_IRQHandler+0x212>
 800ce46:	bf00      	nop
 800ce48:	04000120 	.word	0x04000120
 800ce4c:	10000001 	.word	0x10000001
 800ce50:	effffffe 	.word	0xeffffffe
 800ce54:	0800cb51 	.word	0x0800cb51
            HAL_UART_ErrorCallback(huart);
 800ce58:	4620      	mov	r0, r4
 800ce5a:	f7ff fe77 	bl	800cb4c <HAL_UART_ErrorCallback>
}
 800ce5e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ce60:	4620      	mov	r0, r4
}
 800ce62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ce66:	f000 bc99 	b.w	800d79c <HAL_UARTEx_TxFifoEmptyCallback>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ce6a:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 800ce6e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 800ce72:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ce76:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 800ce78:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ce7a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800ce7c:	2a00      	cmp	r2, #0
 800ce7e:	f43f aead 	beq.w	800cbdc <HAL_UART_IRQHandler+0x74>
 800ce82:	2900      	cmp	r1, #0
 800ce84:	f43f aeaa 	beq.w	800cbdc <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce88:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce90:	e843 2000 	strex	r0, r2, [r3]
 800ce94:	2800      	cmp	r0, #0
 800ce96:	d1f7      	bne.n	800ce88 <HAL_UART_IRQHandler+0x320>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce98:	4d12      	ldr	r5, [pc, #72]	; (800cee4 <HAL_UART_IRQHandler+0x37c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce9a:	f103 0208 	add.w	r2, r3, #8
 800ce9e:	e852 2f00 	ldrex	r2, [r2]
 800cea2:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea4:	f103 0608 	add.w	r6, r3, #8
 800cea8:	e846 2000 	strex	r0, r2, [r6]
 800ceac:	2800      	cmp	r0, #0
 800ceae:	d1f4      	bne.n	800ce9a <HAL_UART_IRQHandler+0x332>
        huart->RxState = HAL_UART_STATE_READY;
 800ceb0:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800ceb2:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ceb4:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ceb8:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceba:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cebe:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec2:	e843 2000 	strex	r0, r2, [r3]
 800cec6:	2800      	cmp	r0, #0
 800cec8:	d1f7      	bne.n	800ceba <HAL_UART_IRQHandler+0x352>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ceca:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cecc:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cece:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ced0:	f7ff fe48 	bl	800cb64 <HAL_UARTEx_RxEventCallback>
}
 800ced4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800ced6:	4620      	mov	r0, r4
 800ced8:	f7ff fe38 	bl	800cb4c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cedc:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 800cee0:	bd70      	pop	{r4, r5, r6, pc}
 800cee2:	bf00      	nop
 800cee4:	effffffe 	.word	0xeffffffe

0800cee8 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cee8:	6901      	ldr	r1, [r0, #16]
 800ceea:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800ceec:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ceee:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cef0:	49c0      	ldr	r1, [pc, #768]	; (800d1f4 <UART_SetConfig+0x30c>)
{
 800cef2:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cef4:	6945      	ldr	r5, [r0, #20]
{
 800cef6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cef8:	69c0      	ldr	r0, [r0, #28]
{
 800cefa:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cefc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cefe:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf00:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf02:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf04:	4dbc      	ldr	r5, [pc, #752]	; (800d1f8 <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf06:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf08:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf0a:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf0c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf0e:	685a      	ldr	r2, [r3, #4]
 800cf10:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800cf14:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf18:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf1a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf1c:	f000 80e0 	beq.w	800d0e0 <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
 800cf20:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf22:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800cf24:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf26:	4ab5      	ldr	r2, [pc, #724]	; (800d1fc <UART_SetConfig+0x314>)
 800cf28:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cf2a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf2c:	4311      	orrs	r1, r2
 800cf2e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cf30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf32:	f022 020f 	bic.w	r2, r2, #15
 800cf36:	432a      	orrs	r2, r5
 800cf38:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf3a:	4ab1      	ldr	r2, [pc, #708]	; (800d200 <UART_SetConfig+0x318>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d023      	beq.n	800cf88 <UART_SetConfig+0xa0>
 800cf40:	4ab0      	ldr	r2, [pc, #704]	; (800d204 <UART_SetConfig+0x31c>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d076      	beq.n	800d034 <UART_SetConfig+0x14c>
 800cf46:	4ab0      	ldr	r2, [pc, #704]	; (800d208 <UART_SetConfig+0x320>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	f000 818f 	beq.w	800d26c <UART_SetConfig+0x384>
 800cf4e:	4aaf      	ldr	r2, [pc, #700]	; (800d20c <UART_SetConfig+0x324>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	f000 81e1 	beq.w	800d318 <UART_SetConfig+0x430>
 800cf56:	4aae      	ldr	r2, [pc, #696]	; (800d210 <UART_SetConfig+0x328>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	f000 8121 	beq.w	800d1a0 <UART_SetConfig+0x2b8>
 800cf5e:	4aad      	ldr	r2, [pc, #692]	; (800d214 <UART_SetConfig+0x32c>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	f000 81e3 	beq.w	800d32c <UART_SetConfig+0x444>
 800cf66:	4aac      	ldr	r2, [pc, #688]	; (800d218 <UART_SetConfig+0x330>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	f000 8234 	beq.w	800d3d6 <UART_SetConfig+0x4ee>
 800cf6e:	4aab      	ldr	r2, [pc, #684]	; (800d21c <UART_SetConfig+0x334>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	f000 81e7 	beq.w	800d344 <UART_SetConfig+0x45c>
        ret = HAL_ERROR;
 800cf76:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800cf78:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800cf7a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800cf7e:	6763      	str	r3, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 800cf80:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800cf82:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800cf84:	b007      	add	sp, #28
 800cf86:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf88:	4ba5      	ldr	r3, [pc, #660]	; (800d220 <UART_SetConfig+0x338>)
 800cf8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cf90:	2b28      	cmp	r3, #40	; 0x28
 800cf92:	d8f0      	bhi.n	800cf76 <UART_SetConfig+0x8e>
 800cf94:	4aa3      	ldr	r2, [pc, #652]	; (800d224 <UART_SetConfig+0x33c>)
 800cf96:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf98:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800cf9c:	d055      	beq.n	800d04a <UART_SetConfig+0x162>
    switch (clocksource)
 800cf9e:	2b20      	cmp	r3, #32
 800cfa0:	f200 814a 	bhi.w	800d238 <UART_SetConfig+0x350>
 800cfa4:	2b20      	cmp	r3, #32
 800cfa6:	d8e6      	bhi.n	800cf76 <UART_SetConfig+0x8e>
 800cfa8:	a201      	add	r2, pc, #4	; (adr r2, 800cfb0 <UART_SetConfig+0xc8>)
 800cfaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfae:	bf00      	nop
 800cfb0:	0800d1ef 	.word	0x0800d1ef
 800cfb4:	0800d1e9 	.word	0x0800d1e9
 800cfb8:	0800cf77 	.word	0x0800cf77
 800cfbc:	0800cf77 	.word	0x0800cf77
 800cfc0:	0800d1d9 	.word	0x0800d1d9
 800cfc4:	0800cf77 	.word	0x0800cf77
 800cfc8:	0800cf77 	.word	0x0800cf77
 800cfcc:	0800cf77 	.word	0x0800cf77
 800cfd0:	0800d1cb 	.word	0x0800d1cb
 800cfd4:	0800cf77 	.word	0x0800cf77
 800cfd8:	0800cf77 	.word	0x0800cf77
 800cfdc:	0800cf77 	.word	0x0800cf77
 800cfe0:	0800cf77 	.word	0x0800cf77
 800cfe4:	0800cf77 	.word	0x0800cf77
 800cfe8:	0800cf77 	.word	0x0800cf77
 800cfec:	0800cf77 	.word	0x0800cf77
 800cff0:	0800d1b5 	.word	0x0800d1b5
 800cff4:	0800cf77 	.word	0x0800cf77
 800cff8:	0800cf77 	.word	0x0800cf77
 800cffc:	0800cf77 	.word	0x0800cf77
 800d000:	0800cf77 	.word	0x0800cf77
 800d004:	0800cf77 	.word	0x0800cf77
 800d008:	0800cf77 	.word	0x0800cf77
 800d00c:	0800cf77 	.word	0x0800cf77
 800d010:	0800cf77 	.word	0x0800cf77
 800d014:	0800cf77 	.word	0x0800cf77
 800d018:	0800cf77 	.word	0x0800cf77
 800d01c:	0800cf77 	.word	0x0800cf77
 800d020:	0800cf77 	.word	0x0800cf77
 800d024:	0800cf77 	.word	0x0800cf77
 800d028:	0800cf77 	.word	0x0800cf77
 800d02c:	0800cf77 	.word	0x0800cf77
 800d030:	0800d359 	.word	0x0800d359
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d034:	4b7a      	ldr	r3, [pc, #488]	; (800d220 <UART_SetConfig+0x338>)
 800d036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d038:	f003 0307 	and.w	r3, r3, #7
 800d03c:	2b05      	cmp	r3, #5
 800d03e:	d89a      	bhi.n	800cf76 <UART_SetConfig+0x8e>
 800d040:	4a79      	ldr	r2, [pc, #484]	; (800d228 <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d042:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800d046:	5cd3      	ldrb	r3, [r2, r3]
 800d048:	d1a9      	bne.n	800cf9e <UART_SetConfig+0xb6>
    switch (clocksource)
 800d04a:	2b20      	cmp	r3, #32
 800d04c:	f200 8145 	bhi.w	800d2da <UART_SetConfig+0x3f2>
 800d050:	2b20      	cmp	r3, #32
 800d052:	d890      	bhi.n	800cf76 <UART_SetConfig+0x8e>
 800d054:	a201      	add	r2, pc, #4	; (adr r2, 800d05c <UART_SetConfig+0x174>)
 800d056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d05a:	bf00      	nop
 800d05c:	0800d3c3 	.word	0x0800d3c3
 800d060:	0800d3bd 	.word	0x0800d3bd
 800d064:	0800cf77 	.word	0x0800cf77
 800d068:	0800cf77 	.word	0x0800cf77
 800d06c:	0800d3c9 	.word	0x0800d3c9
 800d070:	0800cf77 	.word	0x0800cf77
 800d074:	0800cf77 	.word	0x0800cf77
 800d078:	0800cf77 	.word	0x0800cf77
 800d07c:	0800d3ab 	.word	0x0800d3ab
 800d080:	0800cf77 	.word	0x0800cf77
 800d084:	0800cf77 	.word	0x0800cf77
 800d088:	0800cf77 	.word	0x0800cf77
 800d08c:	0800cf77 	.word	0x0800cf77
 800d090:	0800cf77 	.word	0x0800cf77
 800d094:	0800cf77 	.word	0x0800cf77
 800d098:	0800cf77 	.word	0x0800cf77
 800d09c:	0800d397 	.word	0x0800d397
 800d0a0:	0800cf77 	.word	0x0800cf77
 800d0a4:	0800cf77 	.word	0x0800cf77
 800d0a8:	0800cf77 	.word	0x0800cf77
 800d0ac:	0800cf77 	.word	0x0800cf77
 800d0b0:	0800cf77 	.word	0x0800cf77
 800d0b4:	0800cf77 	.word	0x0800cf77
 800d0b8:	0800cf77 	.word	0x0800cf77
 800d0bc:	0800cf77 	.word	0x0800cf77
 800d0c0:	0800cf77 	.word	0x0800cf77
 800d0c4:	0800cf77 	.word	0x0800cf77
 800d0c8:	0800cf77 	.word	0x0800cf77
 800d0cc:	0800cf77 	.word	0x0800cf77
 800d0d0:	0800cf77 	.word	0x0800cf77
 800d0d4:	0800cf77 	.word	0x0800cf77
 800d0d8:	0800cf77 	.word	0x0800cf77
 800d0dc:	0800d3d3 	.word	0x0800d3d3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d0e0:	6898      	ldr	r0, [r3, #8]
 800d0e2:	4a46      	ldr	r2, [pc, #280]	; (800d1fc <UART_SetConfig+0x314>)
 800d0e4:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d0e6:	484e      	ldr	r0, [pc, #312]	; (800d220 <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d0e8:	430a      	orrs	r2, r1
 800d0ea:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d0f0:	f022 020f 	bic.w	r2, r2, #15
 800d0f4:	430a      	orrs	r2, r1
 800d0f6:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d0f8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800d0fa:	f003 0307 	and.w	r3, r3, #7
 800d0fe:	2b05      	cmp	r3, #5
 800d100:	f63f af39 	bhi.w	800cf76 <UART_SetConfig+0x8e>
 800d104:	4a49      	ldr	r2, [pc, #292]	; (800d22c <UART_SetConfig+0x344>)
 800d106:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 800d108:	2b20      	cmp	r3, #32
 800d10a:	f200 80b9 	bhi.w	800d280 <UART_SetConfig+0x398>
 800d10e:	2b01      	cmp	r3, #1
 800d110:	f67f af31 	bls.w	800cf76 <UART_SetConfig+0x8e>
 800d114:	3b02      	subs	r3, #2
 800d116:	2b1e      	cmp	r3, #30
 800d118:	f63f af2d 	bhi.w	800cf76 <UART_SetConfig+0x8e>
 800d11c:	a201      	add	r2, pc, #4	; (adr r2, 800d124 <UART_SetConfig+0x23c>)
 800d11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d122:	bf00      	nop
 800d124:	0800d38d 	.word	0x0800d38d
 800d128:	0800cf77 	.word	0x0800cf77
 800d12c:	0800d383 	.word	0x0800d383
 800d130:	0800cf77 	.word	0x0800cf77
 800d134:	0800cf77 	.word	0x0800cf77
 800d138:	0800cf77 	.word	0x0800cf77
 800d13c:	0800d371 	.word	0x0800d371
 800d140:	0800cf77 	.word	0x0800cf77
 800d144:	0800cf77 	.word	0x0800cf77
 800d148:	0800cf77 	.word	0x0800cf77
 800d14c:	0800cf77 	.word	0x0800cf77
 800d150:	0800cf77 	.word	0x0800cf77
 800d154:	0800cf77 	.word	0x0800cf77
 800d158:	0800cf77 	.word	0x0800cf77
 800d15c:	0800d35d 	.word	0x0800d35d
 800d160:	0800cf77 	.word	0x0800cf77
 800d164:	0800cf77 	.word	0x0800cf77
 800d168:	0800cf77 	.word	0x0800cf77
 800d16c:	0800cf77 	.word	0x0800cf77
 800d170:	0800cf77 	.word	0x0800cf77
 800d174:	0800cf77 	.word	0x0800cf77
 800d178:	0800cf77 	.word	0x0800cf77
 800d17c:	0800cf77 	.word	0x0800cf77
 800d180:	0800cf77 	.word	0x0800cf77
 800d184:	0800cf77 	.word	0x0800cf77
 800d188:	0800cf77 	.word	0x0800cf77
 800d18c:	0800cf77 	.word	0x0800cf77
 800d190:	0800cf77 	.word	0x0800cf77
 800d194:	0800cf77 	.word	0x0800cf77
 800d198:	0800cf77 	.word	0x0800cf77
 800d19c:	0800d393 	.word	0x0800d393
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d1a0:	4b1f      	ldr	r3, [pc, #124]	; (800d220 <UART_SetConfig+0x338>)
 800d1a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1a4:	f003 0307 	and.w	r3, r3, #7
 800d1a8:	2b05      	cmp	r3, #5
 800d1aa:	f63f aee4 	bhi.w	800cf76 <UART_SetConfig+0x8e>
 800d1ae:	4a20      	ldr	r2, [pc, #128]	; (800d230 <UART_SetConfig+0x348>)
 800d1b0:	5cd3      	ldrb	r3, [r2, r3]
 800d1b2:	e6f1      	b.n	800cf98 <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1b4:	4b1a      	ldr	r3, [pc, #104]	; (800d220 <UART_SetConfig+0x338>)
 800d1b6:	681a      	ldr	r2, [r3, #0]
 800d1b8:	0692      	lsls	r2, r2, #26
 800d1ba:	f140 80c1 	bpl.w	800d340 <UART_SetConfig+0x458>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	481c      	ldr	r0, [pc, #112]	; (800d234 <UART_SetConfig+0x34c>)
 800d1c2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d1c6:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800d1c8:	e03b      	b.n	800d242 <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1ca:	a803      	add	r0, sp, #12
 800d1cc:	f7fe fd02 	bl	800bbd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d1d0:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800d1d2:	b938      	cbnz	r0, 800d1e4 <UART_SetConfig+0x2fc>
          pclk = (uint32_t) HSI_VALUE;
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	e6cf      	b.n	800cf78 <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1d8:	4668      	mov	r0, sp
 800d1da:	f7fe fc4f 	bl	800ba7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d1de:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	d0f7      	beq.n	800d1d4 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d1e6:	e02c      	b.n	800d242 <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1e8:	f7fd fcfe 	bl	800abe8 <HAL_RCC_GetPCLK2Freq>
        break;
 800d1ec:	e7f1      	b.n	800d1d2 <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1ee:	f7fd fcb3 	bl	800ab58 <HAL_RCC_GetPCLK1Freq>
        break;
 800d1f2:	e7ee      	b.n	800d1d2 <UART_SetConfig+0x2ea>
 800d1f4:	cfff69f3 	.word	0xcfff69f3
 800d1f8:	58000c00 	.word	0x58000c00
 800d1fc:	11fff4ff 	.word	0x11fff4ff
 800d200:	40011000 	.word	0x40011000
 800d204:	40004400 	.word	0x40004400
 800d208:	40004800 	.word	0x40004800
 800d20c:	40004c00 	.word	0x40004c00
 800d210:	40005000 	.word	0x40005000
 800d214:	40011400 	.word	0x40011400
 800d218:	40007800 	.word	0x40007800
 800d21c:	40007c00 	.word	0x40007c00
 800d220:	58024400 	.word	0x58024400
 800d224:	0801b25c 	.word	0x0801b25c
 800d228:	0801b288 	.word	0x0801b288
 800d22c:	0801b290 	.word	0x0801b290
 800d230:	0801b288 	.word	0x0801b288
 800d234:	03d09000 	.word	0x03d09000
    switch (clocksource)
 800d238:	2b40      	cmp	r3, #64	; 0x40
 800d23a:	f47f ae9c 	bne.w	800cf76 <UART_SetConfig+0x8e>
 800d23e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d242:	4b6c      	ldr	r3, [pc, #432]	; (800d3f4 <UART_SetConfig+0x50c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d244:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d248:	6862      	ldr	r2, [r4, #4]
 800d24a:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800d24e:	fbb0 f3f3 	udiv	r3, r0, r3
 800d252:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800d256:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d25a:	f1a3 0210 	sub.w	r2, r3, #16
 800d25e:	428a      	cmp	r2, r1
 800d260:	f63f ae89 	bhi.w	800cf76 <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d264:	6822      	ldr	r2, [r4, #0]
 800d266:	2000      	movs	r0, #0
 800d268:	60d3      	str	r3, [r2, #12]
 800d26a:	e685      	b.n	800cf78 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d26c:	4b62      	ldr	r3, [pc, #392]	; (800d3f8 <UART_SetConfig+0x510>)
 800d26e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d270:	f003 0307 	and.w	r3, r3, #7
 800d274:	2b05      	cmp	r3, #5
 800d276:	f63f ae7e 	bhi.w	800cf76 <UART_SetConfig+0x8e>
 800d27a:	4a60      	ldr	r2, [pc, #384]	; (800d3fc <UART_SetConfig+0x514>)
 800d27c:	5cd3      	ldrb	r3, [r2, r3]
 800d27e:	e68b      	b.n	800cf98 <UART_SetConfig+0xb0>
    switch (clocksource)
 800d280:	2b40      	cmp	r3, #64	; 0x40
 800d282:	f47f ae78 	bne.w	800cf76 <UART_SetConfig+0x8e>
 800d286:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d28a:	4b5a      	ldr	r3, [pc, #360]	; (800d3f4 <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d28c:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d28e:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d292:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d296:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d29a:	4299      	cmp	r1, r3
 800d29c:	f63f ae6b 	bhi.w	800cf76 <UART_SetConfig+0x8e>
 800d2a0:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800d2a4:	f63f ae67 	bhi.w	800cf76 <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	f7f3 f870 	bl	8000390 <__aeabi_uldivmod>
 800d2b0:	462a      	mov	r2, r5
 800d2b2:	0209      	lsls	r1, r1, #8
 800d2b4:	0203      	lsls	r3, r0, #8
 800d2b6:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800d2ba:	0868      	lsrs	r0, r5, #1
 800d2bc:	1818      	adds	r0, r3, r0
 800d2be:	f04f 0300 	mov.w	r3, #0
 800d2c2:	f141 0100 	adc.w	r1, r1, #0
 800d2c6:	f7f3 f863 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d2ca:	4a4d      	ldr	r2, [pc, #308]	; (800d400 <UART_SetConfig+0x518>)
 800d2cc:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2d0:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d2d2:	4291      	cmp	r1, r2
 800d2d4:	f63f ae4f 	bhi.w	800cf76 <UART_SetConfig+0x8e>
 800d2d8:	e7c4      	b.n	800d264 <UART_SetConfig+0x37c>
    switch (clocksource)
 800d2da:	2b40      	cmp	r3, #64	; 0x40
 800d2dc:	f47f ae4b 	bne.w	800cf76 <UART_SetConfig+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2e0:	4b44      	ldr	r3, [pc, #272]	; (800d3f4 <UART_SetConfig+0x50c>)
 800d2e2:	6862      	ldr	r2, [r4, #4]
 800d2e4:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800d2e8:	0853      	lsrs	r3, r2, #1
 800d2ea:	fbb0 f0f1 	udiv	r0, r0, r1
 800d2ee:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2f2:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2f6:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2fa:	f1a0 0210 	sub.w	r2, r0, #16
 800d2fe:	429a      	cmp	r2, r3
 800d300:	f63f ae39 	bhi.w	800cf76 <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d304:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d308:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800d30c:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d30e:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 800d310:	4303      	orrs	r3, r0
 800d312:	2000      	movs	r0, #0
 800d314:	60d3      	str	r3, [r2, #12]
 800d316:	e62f      	b.n	800cf78 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d318:	4b37      	ldr	r3, [pc, #220]	; (800d3f8 <UART_SetConfig+0x510>)
 800d31a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d31c:	f003 0307 	and.w	r3, r3, #7
 800d320:	2b05      	cmp	r3, #5
 800d322:	f63f ae28 	bhi.w	800cf76 <UART_SetConfig+0x8e>
 800d326:	4a37      	ldr	r2, [pc, #220]	; (800d404 <UART_SetConfig+0x51c>)
 800d328:	5cd3      	ldrb	r3, [r2, r3]
 800d32a:	e635      	b.n	800cf98 <UART_SetConfig+0xb0>
 800d32c:	4b32      	ldr	r3, [pc, #200]	; (800d3f8 <UART_SetConfig+0x510>)
 800d32e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d330:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d334:	2b28      	cmp	r3, #40	; 0x28
 800d336:	f63f ae1e 	bhi.w	800cf76 <UART_SetConfig+0x8e>
 800d33a:	4a33      	ldr	r2, [pc, #204]	; (800d408 <UART_SetConfig+0x520>)
 800d33c:	5cd3      	ldrb	r3, [r2, r3]
 800d33e:	e62b      	b.n	800cf98 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800d340:	4832      	ldr	r0, [pc, #200]	; (800d40c <UART_SetConfig+0x524>)
 800d342:	e77e      	b.n	800d242 <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d344:	4b2c      	ldr	r3, [pc, #176]	; (800d3f8 <UART_SetConfig+0x510>)
 800d346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d348:	f003 0307 	and.w	r3, r3, #7
 800d34c:	2b05      	cmp	r3, #5
 800d34e:	f63f ae12 	bhi.w	800cf76 <UART_SetConfig+0x8e>
 800d352:	4a2f      	ldr	r2, [pc, #188]	; (800d410 <UART_SetConfig+0x528>)
 800d354:	5cd3      	ldrb	r3, [r2, r3]
 800d356:	e61f      	b.n	800cf98 <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
 800d358:	482e      	ldr	r0, [pc, #184]	; (800d414 <UART_SetConfig+0x52c>)
 800d35a:	e772      	b.n	800d242 <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d35c:	4b26      	ldr	r3, [pc, #152]	; (800d3f8 <UART_SetConfig+0x510>)
 800d35e:	681a      	ldr	r2, [r3, #0]
 800d360:	0690      	lsls	r0, r2, #26
 800d362:	d542      	bpl.n	800d3ea <UART_SetConfig+0x502>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4829      	ldr	r0, [pc, #164]	; (800d40c <UART_SetConfig+0x524>)
 800d368:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d36c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800d36e:	e78c      	b.n	800d28a <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d370:	a803      	add	r0, sp, #12
 800d372:	f7fe fc2f 	bl	800bbd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d376:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800d378:	2800      	cmp	r0, #0
 800d37a:	f43f af2b 	beq.w	800d1d4 <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d37e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d380:	e783      	b.n	800d28a <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d382:	4668      	mov	r0, sp
 800d384:	f7fe fb7a 	bl	800ba7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d388:	9801      	ldr	r0, [sp, #4]
        break;
 800d38a:	e7f5      	b.n	800d378 <UART_SetConfig+0x490>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d38c:	f7fe fb64 	bl	800ba58 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800d390:	e7f2      	b.n	800d378 <UART_SetConfig+0x490>
        pclk = (uint32_t) CSI_VALUE;
 800d392:	4820      	ldr	r0, [pc, #128]	; (800d414 <UART_SetConfig+0x52c>)
 800d394:	e779      	b.n	800d28a <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d396:	4b18      	ldr	r3, [pc, #96]	; (800d3f8 <UART_SetConfig+0x510>)
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	0691      	lsls	r1, r2, #26
 800d39c:	d527      	bpl.n	800d3ee <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	481a      	ldr	r0, [pc, #104]	; (800d40c <UART_SetConfig+0x524>)
 800d3a2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d3a6:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800d3a8:	e79a      	b.n	800d2e0 <UART_SetConfig+0x3f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3aa:	a803      	add	r0, sp, #12
 800d3ac:	f7fe fc12 	bl	800bbd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d3b0:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	f43f af0e 	beq.w	800d1d4 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d3ba:	e791      	b.n	800d2e0 <UART_SetConfig+0x3f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800d3bc:	f7fd fc14 	bl	800abe8 <HAL_RCC_GetPCLK2Freq>
        break;
 800d3c0:	e7f7      	b.n	800d3b2 <UART_SetConfig+0x4ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3c2:	f7fd fbc9 	bl	800ab58 <HAL_RCC_GetPCLK1Freq>
        break;
 800d3c6:	e7f4      	b.n	800d3b2 <UART_SetConfig+0x4ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3c8:	4668      	mov	r0, sp
 800d3ca:	f7fe fb57 	bl	800ba7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d3ce:	9801      	ldr	r0, [sp, #4]
        break;
 800d3d0:	e7ef      	b.n	800d3b2 <UART_SetConfig+0x4ca>
        pclk = (uint32_t) CSI_VALUE;
 800d3d2:	4810      	ldr	r0, [pc, #64]	; (800d414 <UART_SetConfig+0x52c>)
 800d3d4:	e784      	b.n	800d2e0 <UART_SetConfig+0x3f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d3d6:	4b08      	ldr	r3, [pc, #32]	; (800d3f8 <UART_SetConfig+0x510>)
 800d3d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3da:	f003 0307 	and.w	r3, r3, #7
 800d3de:	2b05      	cmp	r3, #5
 800d3e0:	f63f adc9 	bhi.w	800cf76 <UART_SetConfig+0x8e>
 800d3e4:	4a0c      	ldr	r2, [pc, #48]	; (800d418 <UART_SetConfig+0x530>)
 800d3e6:	5cd3      	ldrb	r3, [r2, r3]
 800d3e8:	e5d6      	b.n	800cf98 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800d3ea:	4808      	ldr	r0, [pc, #32]	; (800d40c <UART_SetConfig+0x524>)
 800d3ec:	e74d      	b.n	800d28a <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
 800d3ee:	4807      	ldr	r0, [pc, #28]	; (800d40c <UART_SetConfig+0x524>)
 800d3f0:	e776      	b.n	800d2e0 <UART_SetConfig+0x3f8>
 800d3f2:	bf00      	nop
 800d3f4:	0801b298 	.word	0x0801b298
 800d3f8:	58024400 	.word	0x58024400
 800d3fc:	0801b288 	.word	0x0801b288
 800d400:	000ffcff 	.word	0x000ffcff
 800d404:	0801b288 	.word	0x0801b288
 800d408:	0801b25c 	.word	0x0801b25c
 800d40c:	03d09000 	.word	0x03d09000
 800d410:	0801b288 	.word	0x0801b288
 800d414:	003d0900 	.word	0x003d0900
 800d418:	0801b288 	.word	0x0801b288

0800d41c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d41c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d41e:	07da      	lsls	r2, r3, #31
{
 800d420:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d422:	d506      	bpl.n	800d432 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d424:	6801      	ldr	r1, [r0, #0]
 800d426:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800d428:	684a      	ldr	r2, [r1, #4]
 800d42a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d42e:	4322      	orrs	r2, r4
 800d430:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d432:	079c      	lsls	r4, r3, #30
 800d434:	d506      	bpl.n	800d444 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d436:	6801      	ldr	r1, [r0, #0]
 800d438:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800d43a:	684a      	ldr	r2, [r1, #4]
 800d43c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d440:	4322      	orrs	r2, r4
 800d442:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d444:	0759      	lsls	r1, r3, #29
 800d446:	d506      	bpl.n	800d456 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d448:	6801      	ldr	r1, [r0, #0]
 800d44a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800d44c:	684a      	ldr	r2, [r1, #4]
 800d44e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d452:	4322      	orrs	r2, r4
 800d454:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d456:	071a      	lsls	r2, r3, #28
 800d458:	d506      	bpl.n	800d468 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d45a:	6801      	ldr	r1, [r0, #0]
 800d45c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800d45e:	684a      	ldr	r2, [r1, #4]
 800d460:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d464:	4322      	orrs	r2, r4
 800d466:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d468:	06dc      	lsls	r4, r3, #27
 800d46a:	d506      	bpl.n	800d47a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d46c:	6801      	ldr	r1, [r0, #0]
 800d46e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800d470:	688a      	ldr	r2, [r1, #8]
 800d472:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d476:	4322      	orrs	r2, r4
 800d478:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d47a:	0699      	lsls	r1, r3, #26
 800d47c:	d506      	bpl.n	800d48c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d47e:	6801      	ldr	r1, [r0, #0]
 800d480:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800d482:	688a      	ldr	r2, [r1, #8]
 800d484:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d488:	4322      	orrs	r2, r4
 800d48a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d48c:	065a      	lsls	r2, r3, #25
 800d48e:	d50a      	bpl.n	800d4a6 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d490:	6801      	ldr	r1, [r0, #0]
 800d492:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800d494:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d496:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d49a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800d49e:	ea42 0204 	orr.w	r2, r2, r4
 800d4a2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d4a4:	d00b      	beq.n	800d4be <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d4a6:	061b      	lsls	r3, r3, #24
 800d4a8:	d506      	bpl.n	800d4b8 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d4aa:	6802      	ldr	r2, [r0, #0]
 800d4ac:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800d4ae:	6853      	ldr	r3, [r2, #4]
 800d4b0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800d4b4:	430b      	orrs	r3, r1
 800d4b6:	6053      	str	r3, [r2, #4]
}
 800d4b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4bc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d4be:	684a      	ldr	r2, [r1, #4]
 800d4c0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800d4c2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800d4c6:	4322      	orrs	r2, r4
 800d4c8:	604a      	str	r2, [r1, #4]
 800d4ca:	e7ec      	b.n	800d4a6 <UART_AdvFeatureConfig+0x8a>

0800d4cc <UART_CheckIdleState>:
{
 800d4cc:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4ce:	2300      	movs	r3, #0
{
 800d4d0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4d2:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 800d4d6:	f7f8 fc15 	bl	8005d04 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d4da:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800d4dc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d4de:	6813      	ldr	r3, [r2, #0]
 800d4e0:	071b      	lsls	r3, r3, #28
 800d4e2:	d40e      	bmi.n	800d502 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d4e4:	6813      	ldr	r3, [r2, #0]
 800d4e6:	0759      	lsls	r1, r3, #29
 800d4e8:	d432      	bmi.n	800d550 <UART_CheckIdleState+0x84>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4ea:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800d4ec:	2220      	movs	r2, #32
  return HAL_OK;
 800d4ee:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800d4f0:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800d4f4:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d4f8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4fc:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d4fe:	6723      	str	r3, [r4, #112]	; 0x70
}
 800d500:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d502:	69d3      	ldr	r3, [r2, #28]
 800d504:	0298      	lsls	r0, r3, #10
 800d506:	d4ed      	bmi.n	800d4e4 <UART_CheckIdleState+0x18>
 800d508:	e00c      	b.n	800d524 <UART_CheckIdleState+0x58>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d50a:	6819      	ldr	r1, [r3, #0]
 800d50c:	461a      	mov	r2, r3
 800d50e:	0749      	lsls	r1, r1, #29
 800d510:	d505      	bpl.n	800d51e <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d512:	69d9      	ldr	r1, [r3, #28]
 800d514:	0708      	lsls	r0, r1, #28
 800d516:	d44f      	bmi.n	800d5b8 <UART_CheckIdleState+0xec>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d518:	69d9      	ldr	r1, [r3, #28]
 800d51a:	0509      	lsls	r1, r1, #20
 800d51c:	d47a      	bmi.n	800d614 <UART_CheckIdleState+0x148>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d51e:	69db      	ldr	r3, [r3, #28]
 800d520:	0298      	lsls	r0, r3, #10
 800d522:	d4df      	bmi.n	800d4e4 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d524:	f7f8 fbee 	bl	8005d04 <HAL_GetTick>
 800d528:	1b43      	subs	r3, r0, r5
 800d52a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d52e:	6823      	ldr	r3, [r4, #0]
 800d530:	d3eb      	bcc.n	800d50a <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d532:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d536:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d53a:	e843 2100 	strex	r1, r2, [r3]
 800d53e:	2900      	cmp	r1, #0
 800d540:	d1f7      	bne.n	800d532 <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 800d542:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800d544:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800d546:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 800d54a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800d54e:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d550:	69d3      	ldr	r3, [r2, #28]
 800d552:	025b      	lsls	r3, r3, #9
 800d554:	d4c9      	bmi.n	800d4ea <UART_CheckIdleState+0x1e>
 800d556:	e00d      	b.n	800d574 <UART_CheckIdleState+0xa8>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	0750      	lsls	r0, r2, #29
 800d55c:	d507      	bpl.n	800d56e <UART_CheckIdleState+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d55e:	69da      	ldr	r2, [r3, #28]
 800d560:	0711      	lsls	r1, r2, #28
 800d562:	f100 8085 	bmi.w	800d670 <UART_CheckIdleState+0x1a4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d566:	69da      	ldr	r2, [r3, #28]
 800d568:	0512      	lsls	r2, r2, #20
 800d56a:	f100 80af 	bmi.w	800d6cc <UART_CheckIdleState+0x200>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d56e:	69db      	ldr	r3, [r3, #28]
 800d570:	025b      	lsls	r3, r3, #9
 800d572:	d4ba      	bmi.n	800d4ea <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d574:	f7f8 fbc6 	bl	8005d04 <HAL_GetTick>
 800d578:	1b43      	subs	r3, r0, r5
 800d57a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d57e:	6823      	ldr	r3, [r4, #0]
 800d580:	d3ea      	bcc.n	800d558 <UART_CheckIdleState+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d582:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d586:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d58a:	e843 2100 	strex	r1, r2, [r3]
 800d58e:	2900      	cmp	r1, #0
 800d590:	d1f7      	bne.n	800d582 <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d592:	f103 0208 	add.w	r2, r3, #8
 800d596:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d59a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d59e:	f103 0008 	add.w	r0, r3, #8
 800d5a2:	e840 2100 	strex	r1, r2, [r0]
 800d5a6:	2900      	cmp	r1, #0
 800d5a8:	d1f3      	bne.n	800d592 <UART_CheckIdleState+0xc6>
      huart->RxState = HAL_UART_STATE_READY;
 800d5aa:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800d5ac:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800d5ae:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->RxState = HAL_UART_STATE_READY;
 800d5b2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 800d5b6:	bd38      	pop	{r3, r4, r5, pc}
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d5b8:	2208      	movs	r2, #8
 800d5ba:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5bc:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5c4:	e843 2100 	strex	r1, r2, [r3]
 800d5c8:	2900      	cmp	r1, #0
 800d5ca:	d1f7      	bne.n	800d5bc <UART_CheckIdleState+0xf0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d5cc:	4856      	ldr	r0, [pc, #344]	; (800d728 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ce:	f103 0208 	add.w	r2, r3, #8
 800d5d2:	e852 2f00 	ldrex	r2, [r2]
 800d5d6:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5d8:	f103 0508 	add.w	r5, r3, #8
 800d5dc:	e845 2100 	strex	r1, r2, [r5]
 800d5e0:	2900      	cmp	r1, #0
 800d5e2:	d1f4      	bne.n	800d5ce <UART_CheckIdleState+0x102>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5e4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800d5e6:	2a01      	cmp	r2, #1
 800d5e8:	d00b      	beq.n	800d602 <UART_CheckIdleState+0x136>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5ea:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800d5ec:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d5ee:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800d5f0:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 800d5f4:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5f6:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 800d5f8:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d5fc:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
           return HAL_ERROR;
 800d600:	e797      	b.n	800d532 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d602:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d606:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d60a:	e843 2100 	strex	r1, r2, [r3]
 800d60e:	2900      	cmp	r1, #0
 800d610:	d1f7      	bne.n	800d602 <UART_CheckIdleState+0x136>
 800d612:	e7ea      	b.n	800d5ea <UART_CheckIdleState+0x11e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d618:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d61a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d61e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d622:	e843 2100 	strex	r1, r2, [r3]
 800d626:	2900      	cmp	r1, #0
 800d628:	d1f7      	bne.n	800d61a <UART_CheckIdleState+0x14e>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d62a:	483f      	ldr	r0, [pc, #252]	; (800d728 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d62c:	f103 0208 	add.w	r2, r3, #8
 800d630:	e852 2f00 	ldrex	r2, [r2]
 800d634:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d636:	f103 0508 	add.w	r5, r3, #8
 800d63a:	e845 2100 	strex	r1, r2, [r5]
 800d63e:	2900      	cmp	r1, #0
 800d640:	d1f4      	bne.n	800d62c <UART_CheckIdleState+0x160>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d642:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800d644:	2a01      	cmp	r2, #1
 800d646:	d00a      	beq.n	800d65e <UART_CheckIdleState+0x192>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d648:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800d64a:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 800d64c:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800d64e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800d652:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d656:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d658:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
 800d65c:	e769      	b.n	800d532 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d65e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d662:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d666:	e843 2100 	strex	r1, r2, [r3]
 800d66a:	2900      	cmp	r1, #0
 800d66c:	d1f7      	bne.n	800d65e <UART_CheckIdleState+0x192>
 800d66e:	e7eb      	b.n	800d648 <UART_CheckIdleState+0x17c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d670:	2208      	movs	r2, #8
 800d672:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d674:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d678:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d67c:	e843 2100 	strex	r1, r2, [r3]
 800d680:	2900      	cmp	r1, #0
 800d682:	d1f7      	bne.n	800d674 <UART_CheckIdleState+0x1a8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d684:	4828      	ldr	r0, [pc, #160]	; (800d728 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d686:	f103 0208 	add.w	r2, r3, #8
 800d68a:	e852 2f00 	ldrex	r2, [r2]
 800d68e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d690:	f103 0508 	add.w	r5, r3, #8
 800d694:	e845 2100 	strex	r1, r2, [r5]
 800d698:	2900      	cmp	r1, #0
 800d69a:	d1f4      	bne.n	800d686 <UART_CheckIdleState+0x1ba>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d69c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800d69e:	2a01      	cmp	r2, #1
 800d6a0:	d00b      	beq.n	800d6ba <UART_CheckIdleState+0x1ee>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6a2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800d6a4:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d6a6:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800d6a8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 800d6ac:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6ae:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 800d6b0:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d6b4:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
           return HAL_ERROR;
 800d6b8:	e763      	b.n	800d582 <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ba:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6be:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c2:	e843 2100 	strex	r1, r2, [r3]
 800d6c6:	2900      	cmp	r1, #0
 800d6c8:	d1f7      	bne.n	800d6ba <UART_CheckIdleState+0x1ee>
 800d6ca:	e7ea      	b.n	800d6a2 <UART_CheckIdleState+0x1d6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d6cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d6d0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6da:	e843 2100 	strex	r1, r2, [r3]
 800d6de:	2900      	cmp	r1, #0
 800d6e0:	d1f7      	bne.n	800d6d2 <UART_CheckIdleState+0x206>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d6e2:	4811      	ldr	r0, [pc, #68]	; (800d728 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e4:	f103 0208 	add.w	r2, r3, #8
 800d6e8:	e852 2f00 	ldrex	r2, [r2]
 800d6ec:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ee:	f103 0508 	add.w	r5, r3, #8
 800d6f2:	e845 2100 	strex	r1, r2, [r5]
 800d6f6:	2900      	cmp	r1, #0
 800d6f8:	d1f4      	bne.n	800d6e4 <UART_CheckIdleState+0x218>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6fa:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800d6fc:	2a01      	cmp	r2, #1
 800d6fe:	d00a      	beq.n	800d716 <UART_CheckIdleState+0x24a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d700:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800d702:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 800d704:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800d706:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800d70a:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d70e:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d710:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
 800d714:	e735      	b.n	800d582 <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d716:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d71a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d71e:	e843 2100 	strex	r1, r2, [r3]
 800d722:	2900      	cmp	r1, #0
 800d724:	d1f7      	bne.n	800d716 <UART_CheckIdleState+0x24a>
 800d726:	e7eb      	b.n	800d700 <UART_CheckIdleState+0x234>
 800d728:	effffffe 	.word	0xeffffffe

0800d72c <HAL_UART_Init>:
  if (huart == NULL)
 800d72c:	b380      	cbz	r0, 800d790 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800d72e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 800d732:	b510      	push	{r4, lr}
 800d734:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800d736:	b333      	cbz	r3, 800d786 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800d738:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d73a:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d73c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800d73e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800d742:	6813      	ldr	r3, [r2, #0]
 800d744:	f023 0301 	bic.w	r3, r3, #1
 800d748:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d74a:	f7ff fbcd 	bl	800cee8 <UART_SetConfig>
 800d74e:	2801      	cmp	r0, #1
 800d750:	d017      	beq.n	800d782 <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d752:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d754:	b98b      	cbnz	r3, 800d77a <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d756:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800d758:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d75a:	685a      	ldr	r2, [r3, #4]
 800d75c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d760:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d762:	689a      	ldr	r2, [r3, #8]
 800d764:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d768:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	f042 0201 	orr.w	r2, r2, #1
}
 800d770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800d774:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800d776:	f7ff bea9 	b.w	800d4cc <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800d77a:	4620      	mov	r0, r4
 800d77c:	f7ff fe4e 	bl	800d41c <UART_AdvFeatureConfig>
 800d780:	e7e9      	b.n	800d756 <HAL_UART_Init+0x2a>
}
 800d782:	2001      	movs	r0, #1
 800d784:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800d786:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800d78a:	f7f8 f873 	bl	8005874 <HAL_UART_MspInit>
 800d78e:	e7d3      	b.n	800d738 <HAL_UART_Init+0xc>
}
 800d790:	2001      	movs	r0, #1
 800d792:	4770      	bx	lr

0800d794 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d794:	4770      	bx	lr
 800d796:	bf00      	nop

0800d798 <HAL_UARTEx_RxFifoFullCallback>:
 800d798:	4770      	bx	lr
 800d79a:	bf00      	nop

0800d79c <HAL_UARTEx_TxFifoEmptyCallback>:
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop

0800d7a0 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7a0:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800d7a4:	2a01      	cmp	r2, #1
 800d7a6:	d017      	beq.n	800d7d8 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7a8:	6802      	ldr	r2, [r0, #0]
 800d7aa:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800d7ac:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d7ae:	2100      	movs	r1, #0
{
 800d7b0:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800d7b2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800d7b6:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7b8:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800d7ba:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d7bc:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800d7c0:	f024 0401 	bic.w	r4, r4, #1
 800d7c4:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d7c6:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7c8:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800d7ca:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800d7cc:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800d7d0:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800d7d4:	bc30      	pop	{r4, r5}
 800d7d6:	4770      	bx	lr
  __HAL_LOCK(huart);
 800d7d8:	2002      	movs	r0, #2
}
 800d7da:	4770      	bx	lr

0800d7dc <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7dc:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800d7e0:	2a01      	cmp	r2, #1
 800d7e2:	d037      	beq.n	800d854 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7e4:	6802      	ldr	r2, [r0, #0]
 800d7e6:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800d7e8:	2024      	movs	r0, #36	; 0x24
{
 800d7ea:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800d7ec:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7f0:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7f2:	6810      	ldr	r0, [r2, #0]
 800d7f4:	f020 0001 	bic.w	r0, r0, #1
 800d7f8:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d7fa:	6890      	ldr	r0, [r2, #8]
 800d7fc:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800d800:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d802:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d804:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d806:	b310      	cbz	r0, 800d84e <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d808:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d80a:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d80c:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d810:	4911      	ldr	r1, [pc, #68]	; (800d858 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d812:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800d816:	4d11      	ldr	r5, [pc, #68]	; (800d85c <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d818:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d81c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800d820:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d824:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800d826:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d82a:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d82c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d830:	fbb1 f1f5 	udiv	r1, r1, r5
 800d834:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800d838:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800d83a:	2100      	movs	r1, #0
 800d83c:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d840:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800d842:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800d844:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800d848:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800d84c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800d84e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800d850:	4608      	mov	r0, r1
 800d852:	e7ef      	b.n	800d834 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800d854:	2002      	movs	r0, #2
}
 800d856:	4770      	bx	lr
 800d858:	0801b2b8 	.word	0x0801b2b8
 800d85c:	0801b2b0 	.word	0x0801b2b0

0800d860 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800d860:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800d864:	2a01      	cmp	r2, #1
 800d866:	d037      	beq.n	800d8d8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d868:	6802      	ldr	r2, [r0, #0]
 800d86a:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800d86c:	2024      	movs	r0, #36	; 0x24
{
 800d86e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800d870:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d874:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800d876:	6810      	ldr	r0, [r2, #0]
 800d878:	f020 0001 	bic.w	r0, r0, #1
 800d87c:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d87e:	6890      	ldr	r0, [r2, #8]
 800d880:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800d884:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d886:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d888:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d88a:	b310      	cbz	r0, 800d8d2 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d88c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d88e:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d890:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d894:	4911      	ldr	r1, [pc, #68]	; (800d8dc <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d896:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800d89a:	4d11      	ldr	r5, [pc, #68]	; (800d8e0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d89c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d8a0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800d8a4:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d8a8:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800d8aa:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d8ae:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d8b0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d8b4:	fbb1 f1f5 	udiv	r1, r1, r5
 800d8b8:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800d8bc:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800d8be:	2100      	movs	r1, #0
 800d8c0:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8c4:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800d8c6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800d8c8:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800d8cc:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800d8d0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800d8d2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800d8d4:	4608      	mov	r0, r1
 800d8d6:	e7ef      	b.n	800d8b8 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800d8d8:	2002      	movs	r0, #2
}
 800d8da:	4770      	bx	lr
 800d8dc:	0801b2b8 	.word	0x0801b2b8
 800d8e0:	0801b2b0 	.word	0x0801b2b0

0800d8e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d8e4:	b084      	sub	sp, #16
 800d8e6:	4684      	mov	ip, r0
 800d8e8:	b500      	push	{lr}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	f10d 0e14 	add.w	lr, sp, #20
 800d8f0:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d8f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d13e      	bne.n	800d978 <USB_CoreInit+0x94>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d8fa:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d8fc:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800d900:	9911      	ldr	r1, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d902:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800d906:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d908:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d90a:	68c2      	ldr	r2, [r0, #12]
 800d90c:	ea03 0302 	and.w	r3, r3, r2
 800d910:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d912:	68c3      	ldr	r3, [r0, #12]
 800d914:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d918:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800d91a:	d07c      	beq.n	800da16 <USB_CoreInit+0x132>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 800d91c:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 800d91e:	4a40      	ldr	r2, [pc, #256]	; (800da20 <USB_CoreInit+0x13c>)
  __IO uint32_t count = 0U;
 800d920:	9300      	str	r3, [sp, #0]
 800d922:	e003      	b.n	800d92c <USB_CoreInit+0x48>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d924:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	db41      	blt.n	800d9b0 <USB_CoreInit+0xcc>
    count++;
 800d92c:	9b00      	ldr	r3, [sp, #0]
 800d92e:	3301      	adds	r3, #1
 800d930:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800d932:	9b00      	ldr	r3, [sp, #0]
 800d934:	4293      	cmp	r3, r2
 800d936:	d9f5      	bls.n	800d924 <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 800d938:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 800d93a:	9b07      	ldr	r3, [sp, #28]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d116      	bne.n	800d96e <USB_CoreInit+0x8a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d940:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d944:	4b37      	ldr	r3, [pc, #220]	; (800da24 <USB_CoreInit+0x140>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d946:	b292      	uxth	r2, r2
 800d948:	f8cc 205c 	str.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d94c:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
 800d950:	4313      	orrs	r3, r2
 800d952:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d956:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800d95a:	f043 0306 	orr.w	r3, r3, #6
 800d95e:	f8cc 3008 	str.w	r3, [ip, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d962:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800d966:	f043 0320 	orr.w	r3, r3, #32
 800d96a:	f8cc 3008 	str.w	r3, [ip, #8]
}
 800d96e:	b003      	add	sp, #12
 800d970:	f85d eb04 	ldr.w	lr, [sp], #4
 800d974:	b004      	add	sp, #16
 800d976:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d978:	68c3      	ldr	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800d97a:	2100      	movs	r1, #0
    if (count > 200000U)
 800d97c:	4a28      	ldr	r2, [pc, #160]	; (800da20 <USB_CoreInit+0x13c>)
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d97e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d982:	60c3      	str	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800d984:	9101      	str	r1, [sp, #4]
 800d986:	e003      	b.n	800d990 <USB_CoreInit+0xac>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d988:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	db2c      	blt.n	800d9ea <USB_CoreInit+0x106>
    count++;
 800d990:	9b01      	ldr	r3, [sp, #4]
 800d992:	3301      	adds	r3, #1
 800d994:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800d996:	9b01      	ldr	r3, [sp, #4]
 800d998:	4293      	cmp	r3, r2
 800d99a:	d9f5      	bls.n	800d988 <USB_CoreInit+0xa4>
      return HAL_TIMEOUT;
 800d99c:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 800d99e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9a0:	b9e3      	cbnz	r3, 800d9dc <USB_CoreInit+0xf8>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d9a2:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800d9a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d9aa:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800d9ae:	e7c4      	b.n	800d93a <USB_CoreInit+0x56>

  /* Core Soft Reset */
  count = 0U;
 800d9b0:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 800d9b2:	4a1b      	ldr	r2, [pc, #108]	; (800da20 <USB_CoreInit+0x13c>)
  count = 0U;
 800d9b4:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d9b6:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800d9ba:	f043 0301 	orr.w	r3, r3, #1
 800d9be:	f8cc 3010 	str.w	r3, [ip, #16]
 800d9c2:	e004      	b.n	800d9ce <USB_CoreInit+0xea>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d9c4:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800d9c8:	f010 0001 	ands.w	r0, r0, #1
 800d9cc:	d0b5      	beq.n	800d93a <USB_CoreInit+0x56>
    count++;
 800d9ce:	9b00      	ldr	r3, [sp, #0]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800d9d4:	9b00      	ldr	r3, [sp, #0]
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d9f4      	bls.n	800d9c4 <USB_CoreInit+0xe0>
 800d9da:	e7ad      	b.n	800d938 <USB_CoreInit+0x54>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d9dc:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800d9e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d9e4:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800d9e8:	e7a7      	b.n	800d93a <USB_CoreInit+0x56>
  count = 0U;
 800d9ea:	2300      	movs	r3, #0
    if (count > 200000U)
 800d9ec:	4a0c      	ldr	r2, [pc, #48]	; (800da20 <USB_CoreInit+0x13c>)
  count = 0U;
 800d9ee:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d9f0:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800d9f4:	f043 0301 	orr.w	r3, r3, #1
 800d9f8:	f8cc 3010 	str.w	r3, [ip, #16]
 800d9fc:	e004      	b.n	800da08 <USB_CoreInit+0x124>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d9fe:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800da02:	f010 0001 	ands.w	r0, r0, #1
 800da06:	d0ca      	beq.n	800d99e <USB_CoreInit+0xba>
    count++;
 800da08:	9b01      	ldr	r3, [sp, #4]
 800da0a:	3301      	adds	r3, #1
 800da0c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800da0e:	9b01      	ldr	r3, [sp, #4]
 800da10:	4293      	cmp	r3, r2
 800da12:	d9f4      	bls.n	800d9fe <USB_CoreInit+0x11a>
 800da14:	e7c2      	b.n	800d99c <USB_CoreInit+0xb8>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800da16:	68c3      	ldr	r3, [r0, #12]
 800da18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da1c:	60c3      	str	r3, [r0, #12]
 800da1e:	e77d      	b.n	800d91c <USB_CoreInit+0x38>
 800da20:	00030d40 	.word	0x00030d40
 800da24:	03ee0000 	.word	0x03ee0000

0800da28 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800da28:	2a02      	cmp	r2, #2
{
 800da2a:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 800da2c:	d00b      	beq.n	800da46 <USB_SetTurnaroundTime+0x1e>
 800da2e:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800da32:	68d9      	ldr	r1, [r3, #12]
}
 800da34:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800da36:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800da3a:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800da3c:	68da      	ldr	r2, [r3, #12]
 800da3e:	ea42 020c 	orr.w	r2, r2, ip
 800da42:	60da      	str	r2, [r3, #12]
}
 800da44:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800da46:	4a23      	ldr	r2, [pc, #140]	; (800dad4 <USB_SetTurnaroundTime+0xac>)
 800da48:	4823      	ldr	r0, [pc, #140]	; (800dad8 <USB_SetTurnaroundTime+0xb0>)
 800da4a:	440a      	add	r2, r1
 800da4c:	4282      	cmp	r2, r0
 800da4e:	d92c      	bls.n	800daaa <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800da50:	4a22      	ldr	r2, [pc, #136]	; (800dadc <USB_SetTurnaroundTime+0xb4>)
 800da52:	4823      	ldr	r0, [pc, #140]	; (800dae0 <USB_SetTurnaroundTime+0xb8>)
 800da54:	440a      	add	r2, r1
 800da56:	4282      	cmp	r2, r0
 800da58:	d92a      	bls.n	800dab0 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800da5a:	4a22      	ldr	r2, [pc, #136]	; (800dae4 <USB_SetTurnaroundTime+0xbc>)
 800da5c:	4822      	ldr	r0, [pc, #136]	; (800dae8 <USB_SetTurnaroundTime+0xc0>)
 800da5e:	440a      	add	r2, r1
 800da60:	4282      	cmp	r2, r0
 800da62:	d928      	bls.n	800dab6 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800da64:	4a21      	ldr	r2, [pc, #132]	; (800daec <USB_SetTurnaroundTime+0xc4>)
 800da66:	4822      	ldr	r0, [pc, #136]	; (800daf0 <USB_SetTurnaroundTime+0xc8>)
 800da68:	440a      	add	r2, r1
 800da6a:	4282      	cmp	r2, r0
 800da6c:	d326      	bcc.n	800dabc <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800da6e:	4a21      	ldr	r2, [pc, #132]	; (800daf4 <USB_SetTurnaroundTime+0xcc>)
 800da70:	4821      	ldr	r0, [pc, #132]	; (800daf8 <USB_SetTurnaroundTime+0xd0>)
 800da72:	440a      	add	r2, r1
 800da74:	4282      	cmp	r2, r0
 800da76:	d924      	bls.n	800dac2 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800da78:	4a20      	ldr	r2, [pc, #128]	; (800dafc <USB_SetTurnaroundTime+0xd4>)
 800da7a:	4821      	ldr	r0, [pc, #132]	; (800db00 <USB_SetTurnaroundTime+0xd8>)
 800da7c:	440a      	add	r2, r1
 800da7e:	4282      	cmp	r2, r0
 800da80:	d322      	bcc.n	800dac8 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800da82:	4a20      	ldr	r2, [pc, #128]	; (800db04 <USB_SetTurnaroundTime+0xdc>)
 800da84:	4820      	ldr	r0, [pc, #128]	; (800db08 <USB_SetTurnaroundTime+0xe0>)
 800da86:	440a      	add	r2, r1
 800da88:	4282      	cmp	r2, r0
 800da8a:	d3d0      	bcc.n	800da2e <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800da8c:	4a1f      	ldr	r2, [pc, #124]	; (800db0c <USB_SetTurnaroundTime+0xe4>)
 800da8e:	4820      	ldr	r0, [pc, #128]	; (800db10 <USB_SetTurnaroundTime+0xe8>)
 800da90:	440a      	add	r2, r1
 800da92:	4282      	cmp	r2, r0
 800da94:	d31b      	bcc.n	800dace <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800da96:	4a1f      	ldr	r2, [pc, #124]	; (800db14 <USB_SetTurnaroundTime+0xec>)
 800da98:	481f      	ldr	r0, [pc, #124]	; (800db18 <USB_SetTurnaroundTime+0xf0>)
 800da9a:	440a      	add	r2, r1
 800da9c:	4282      	cmp	r2, r0
 800da9e:	bf34      	ite	cc
 800daa0:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 800daa4:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 800daa8:	e7c3      	b.n	800da32 <USB_SetTurnaroundTime+0xa>
 800daaa:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 800daae:	e7c0      	b.n	800da32 <USB_SetTurnaroundTime+0xa>
 800dab0:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 800dab4:	e7bd      	b.n	800da32 <USB_SetTurnaroundTime+0xa>
 800dab6:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 800daba:	e7ba      	b.n	800da32 <USB_SetTurnaroundTime+0xa>
 800dabc:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 800dac0:	e7b7      	b.n	800da32 <USB_SetTurnaroundTime+0xa>
 800dac2:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 800dac6:	e7b4      	b.n	800da32 <USB_SetTurnaroundTime+0xa>
 800dac8:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 800dacc:	e7b1      	b.n	800da32 <USB_SetTurnaroundTime+0xa>
 800dace:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 800dad2:	e7ae      	b.n	800da32 <USB_SetTurnaroundTime+0xa>
 800dad4:	ff275340 	.word	0xff275340
 800dad8:	000c34ff 	.word	0x000c34ff
 800dadc:	ff1b1e40 	.word	0xff1b1e40
 800dae0:	000f423f 	.word	0x000f423f
 800dae4:	ff0bdc00 	.word	0xff0bdc00
 800dae8:	00124f7f 	.word	0x00124f7f
 800daec:	fef98c80 	.word	0xfef98c80
 800daf0:	0013d620 	.word	0x0013d620
 800daf4:	fee5b660 	.word	0xfee5b660
 800daf8:	0016e35f 	.word	0x0016e35f
 800dafc:	feced300 	.word	0xfeced300
 800db00:	001b7740 	.word	0x001b7740
 800db04:	feb35bc0 	.word	0xfeb35bc0
 800db08:	002191c0 	.word	0x002191c0
 800db0c:	fe91ca00 	.word	0xfe91ca00
 800db10:	00387520 	.word	0x00387520
 800db14:	fe5954e0 	.word	0xfe5954e0
 800db18:	00419ce0 	.word	0x00419ce0

0800db1c <USB_EnableGlobalInt>:
{
 800db1c:	4603      	mov	r3, r0
}
 800db1e:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800db20:	689a      	ldr	r2, [r3, #8]
 800db22:	f042 0201 	orr.w	r2, r2, #1
 800db26:	609a      	str	r2, [r3, #8]
}
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop

0800db2c <USB_DisableGlobalInt>:
{
 800db2c:	4603      	mov	r3, r0
}
 800db2e:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800db30:	689a      	ldr	r2, [r3, #8]
 800db32:	f022 0201 	bic.w	r2, r2, #1
 800db36:	609a      	str	r2, [r3, #8]
}
 800db38:	4770      	bx	lr
 800db3a:	bf00      	nop

0800db3c <USB_SetCurrentMode>:
{
 800db3c:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800db3e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800db40:	2901      	cmp	r1, #1
{
 800db42:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800db44:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800db48:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800db4a:	d017      	beq.n	800db7c <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 800db4c:	b9a1      	cbnz	r1, 800db78 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800db4e:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800db50:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800db52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db56:	60c3      	str	r3, [r0, #12]
 800db58:	e001      	b.n	800db5e <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800db5a:	2c32      	cmp	r4, #50	; 0x32
 800db5c:	d00c      	beq.n	800db78 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800db5e:	2001      	movs	r0, #1
      ms++;
 800db60:	4404      	add	r4, r0
      HAL_Delay(1U);
 800db62:	f7f8 f8d5 	bl	8005d10 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800db66:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800db68:	07db      	lsls	r3, r3, #31
 800db6a:	d4f6      	bmi.n	800db5a <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 800db6c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800db70:	fab0 f080 	clz	r0, r0
 800db74:	0940      	lsrs	r0, r0, #5
}
 800db76:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800db78:	2001      	movs	r0, #1
}
 800db7a:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800db7c:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800db7e:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800db80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db84:	60c3      	str	r3, [r0, #12]
 800db86:	e001      	b.n	800db8c <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800db88:	2c32      	cmp	r4, #50	; 0x32
 800db8a:	d0f5      	beq.n	800db78 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800db8c:	2001      	movs	r0, #1
      ms++;
 800db8e:	4404      	add	r4, r0
      HAL_Delay(1U);
 800db90:	f7f8 f8be 	bl	8005d10 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800db94:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800db96:	07da      	lsls	r2, r3, #31
 800db98:	d5f6      	bpl.n	800db88 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 800db9a:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800db9e:	fab0 f080 	clz	r0, r0
 800dba2:	0940      	lsrs	r0, r0, #5
 800dba4:	e7e7      	b.n	800db76 <USB_SetCurrentMode+0x3a>
 800dba6:	bf00      	nop

0800dba8 <USB_DevInit>:
{
 800dba8:	b084      	sub	sp, #16
 800dbaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dbae:	b083      	sub	sp, #12
 800dbb0:	ac0b      	add	r4, sp, #44	; 0x2c
 800dbb2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800dbb4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	460c      	mov	r4, r1
 800dbbc:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800dbc0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800dbc4:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 800dbc8:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 800dbcc:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800dbd0:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800dbd4:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 800dbd8:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 800dbdc:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 800dbe0:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 800dbe4:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 800dbe8:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 800dbec:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 800dbf0:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 800dbf4:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 800dbf8:	2d00      	cmp	r5, #0
 800dbfa:	f040 80aa 	bne.w	800dd52 <USB_DevInit+0x1aa>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dbfe:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800dc02:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
 800dc06:	f043 0302 	orr.w	r3, r3, #2
 800dc0a:	f8cc 3004 	str.w	r3, [ip, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dc0e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800dc10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dc14:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dc16:	6803      	ldr	r3, [r0, #0]
 800dc18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc1c:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dc1e:	6803      	ldr	r3, [r0, #0]
 800dc20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc24:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 800dc26:	2300      	movs	r3, #0
 800dc28:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dc2c:	f8dc 3000 	ldr.w	r3, [ip]
 800dc30:	f8cc 3000 	str.w	r3, [ip]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dc34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	f000 80b5 	beq.w	800dda6 <USB_DevInit+0x1fe>
  USBx_DEVICE->DCFG |= speed;
 800dc3c:	f8dc 3000 	ldr.w	r3, [ip]
 800dc40:	f043 0303 	orr.w	r3, r3, #3
 800dc44:	f8cc 3000 	str.w	r3, [ip]
  __IO uint32_t count = 0U;
 800dc48:	2300      	movs	r3, #0
    if (count > 200000U)
 800dc4a:	4a5e      	ldr	r2, [pc, #376]	; (800ddc4 <USB_DevInit+0x21c>)
  __IO uint32_t count = 0U;
 800dc4c:	9300      	str	r3, [sp, #0]
 800dc4e:	e003      	b.n	800dc58 <USB_DevInit+0xb0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dc50:	6903      	ldr	r3, [r0, #16]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f2c0 8094 	blt.w	800dd80 <USB_DevInit+0x1d8>
    count++;
 800dc58:	9b00      	ldr	r3, [sp, #0]
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800dc5e:	9b00      	ldr	r3, [sp, #0]
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d9f5      	bls.n	800dc50 <USB_DevInit+0xa8>
    ret = HAL_ERROR;
 800dc64:	2101      	movs	r1, #1
  __IO uint32_t count = 0U;
 800dc66:	2300      	movs	r3, #0
    if (count > 200000U)
 800dc68:	4a56      	ldr	r2, [pc, #344]	; (800ddc4 <USB_DevInit+0x21c>)
  __IO uint32_t count = 0U;
 800dc6a:	9301      	str	r3, [sp, #4]
 800dc6c:	e002      	b.n	800dc74 <USB_DevInit+0xcc>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dc6e:	6903      	ldr	r3, [r0, #16]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	db75      	blt.n	800dd60 <USB_DevInit+0x1b8>
    count++;
 800dc74:	9b01      	ldr	r3, [sp, #4]
 800dc76:	3301      	adds	r3, #1
 800dc78:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800dc7a:	9b01      	ldr	r3, [sp, #4]
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d9f6      	bls.n	800dc6e <USB_DevInit+0xc6>
    ret = HAL_ERROR;
 800dc80:	2101      	movs	r1, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800dc82:	2200      	movs	r2, #0
 800dc84:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dc88:	f8cc 2014 	str.w	r2, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dc8c:	f8cc 201c 	str.w	r2, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc90:	b1dc      	cbz	r4, 800dcca <USB_DevInit+0x122>
 800dc92:	f500 6310 	add.w	r3, r0, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dc96:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dc9a:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800dc9e:	4617      	mov	r7, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dca0:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800dca4:	e007      	b.n	800dcb6 <USB_DevInit+0x10e>
      USBx_INEP(i)->DIEPCTL = 0U;
 800dca6:	601f      	str	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dca8:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dcaa:	611f      	str	r7, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dcac:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dcb0:	3320      	adds	r3, #32
 800dcb2:	4294      	cmp	r4, r2
 800dcb4:	d030      	beq.n	800dd18 <USB_DevInit+0x170>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dcb6:	681e      	ldr	r6, [r3, #0]
 800dcb8:	2e00      	cmp	r6, #0
 800dcba:	daf4      	bge.n	800dca6 <USB_DevInit+0xfe>
      if (i == 0U)
 800dcbc:	b112      	cbz	r2, 800dcc4 <USB_DevInit+0x11c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dcbe:	f8c3 8000 	str.w	r8, [r3]
 800dcc2:	e7f1      	b.n	800dca8 <USB_DevInit+0x100>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dcc4:	f8c3 9000 	str.w	r9, [r3]
 800dcc8:	e7ee      	b.n	800dca8 <USB_DevInit+0x100>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dcca:	f8dc 3010 	ldr.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 800dcce:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dcd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dcd4:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dcd8:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 800dcdc:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dcde:	6143      	str	r3, [r0, #20]
  if (cfg.dma_enable == 0U)
 800dce0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dce2:	b91b      	cbnz	r3, 800dcec <USB_DevInit+0x144>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dce4:	6983      	ldr	r3, [r0, #24]
 800dce6:	f043 0310 	orr.w	r3, r3, #16
 800dcea:	6183      	str	r3, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dcec:	6982      	ldr	r2, [r0, #24]
 800dcee:	4b36      	ldr	r3, [pc, #216]	; (800ddc8 <USB_DevInit+0x220>)
 800dcf0:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 800dcf2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dcf4:	6183      	str	r3, [r0, #24]
  if (cfg.Sof_enable != 0U)
 800dcf6:	b11a      	cbz	r2, 800dd00 <USB_DevInit+0x158>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dcf8:	6983      	ldr	r3, [r0, #24]
 800dcfa:	f043 0308 	orr.w	r3, r3, #8
 800dcfe:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800dd00:	2d01      	cmp	r5, #1
 800dd02:	d103      	bne.n	800dd0c <USB_DevInit+0x164>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dd04:	6982      	ldr	r2, [r0, #24]
 800dd06:	4b31      	ldr	r3, [pc, #196]	; (800ddcc <USB_DevInit+0x224>)
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	6183      	str	r3, [r0, #24]
}
 800dd0c:	4608      	mov	r0, r1
 800dd0e:	b003      	add	sp, #12
 800dd10:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd14:	b004      	add	sp, #16
 800dd16:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd18:	2200      	movs	r2, #0
 800dd1a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dd1e:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dd22:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dd26:	4617      	mov	r7, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dd28:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800dd2c:	e007      	b.n	800dd3e <USB_DevInit+0x196>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dd2e:	601f      	str	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd30:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dd32:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dd34:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd38:	3320      	adds	r3, #32
 800dd3a:	4294      	cmp	r4, r2
 800dd3c:	d0c5      	beq.n	800dcca <USB_DevInit+0x122>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd3e:	681e      	ldr	r6, [r3, #0]
 800dd40:	2e00      	cmp	r6, #0
 800dd42:	daf4      	bge.n	800dd2e <USB_DevInit+0x186>
      if (i == 0U)
 800dd44:	b112      	cbz	r2, 800dd4c <USB_DevInit+0x1a4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dd46:	f8c3 8000 	str.w	r8, [r3]
 800dd4a:	e7f1      	b.n	800dd30 <USB_DevInit+0x188>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dd4c:	f8c3 9000 	str.w	r9, [r3]
 800dd50:	e7ee      	b.n	800dd30 <USB_DevInit+0x188>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dd52:	6b83      	ldr	r3, [r0, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dd54:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dd58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dd5c:	6383      	str	r3, [r0, #56]	; 0x38
 800dd5e:	e762      	b.n	800dc26 <USB_DevInit+0x7e>
  count = 0U;
 800dd60:	2300      	movs	r3, #0
    if (count > 200000U)
 800dd62:	4a18      	ldr	r2, [pc, #96]	; (800ddc4 <USB_DevInit+0x21c>)
  count = 0U;
 800dd64:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dd66:	2310      	movs	r3, #16
 800dd68:	6103      	str	r3, [r0, #16]
 800dd6a:	e002      	b.n	800dd72 <USB_DevInit+0x1ca>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dd6c:	6903      	ldr	r3, [r0, #16]
 800dd6e:	06db      	lsls	r3, r3, #27
 800dd70:	d587      	bpl.n	800dc82 <USB_DevInit+0xda>
    count++;
 800dd72:	9b01      	ldr	r3, [sp, #4]
 800dd74:	3301      	adds	r3, #1
 800dd76:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800dd78:	9b01      	ldr	r3, [sp, #4]
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d9f6      	bls.n	800dd6c <USB_DevInit+0x1c4>
 800dd7e:	e77f      	b.n	800dc80 <USB_DevInit+0xd8>
  count = 0U;
 800dd80:	2300      	movs	r3, #0
    if (count > 200000U)
 800dd82:	4a10      	ldr	r2, [pc, #64]	; (800ddc4 <USB_DevInit+0x21c>)
  count = 0U;
 800dd84:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dd86:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800dd8a:	6103      	str	r3, [r0, #16]
 800dd8c:	e004      	b.n	800dd98 <USB_DevInit+0x1f0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dd8e:	6901      	ldr	r1, [r0, #16]
 800dd90:	f011 0120 	ands.w	r1, r1, #32
 800dd94:	f43f af67 	beq.w	800dc66 <USB_DevInit+0xbe>
    count++;
 800dd98:	9b00      	ldr	r3, [sp, #0]
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800dd9e:	9b00      	ldr	r3, [sp, #0]
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d9f4      	bls.n	800dd8e <USB_DevInit+0x1e6>
 800dda4:	e75e      	b.n	800dc64 <USB_DevInit+0xbc>
    if (cfg.speed == USBD_HS_SPEED)
 800dda6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dda8:	b923      	cbnz	r3, 800ddb4 <USB_DevInit+0x20c>
  USBx_DEVICE->DCFG |= speed;
 800ddaa:	f8dc 3000 	ldr.w	r3, [ip]
 800ddae:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 800ddb2:	e749      	b.n	800dc48 <USB_DevInit+0xa0>
  USBx_DEVICE->DCFG |= speed;
 800ddb4:	f8dc 3000 	ldr.w	r3, [ip]
 800ddb8:	f043 0301 	orr.w	r3, r3, #1
 800ddbc:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 800ddc0:	e742      	b.n	800dc48 <USB_DevInit+0xa0>
 800ddc2:	bf00      	nop
 800ddc4:	00030d40 	.word	0x00030d40
 800ddc8:	803c3800 	.word	0x803c3800
 800ddcc:	40000004 	.word	0x40000004

0800ddd0 <USB_FlushTxFifo>:
{
 800ddd0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800ddd2:	2300      	movs	r3, #0
    if (count > 200000U)
 800ddd4:	4a12      	ldr	r2, [pc, #72]	; (800de20 <USB_FlushTxFifo+0x50>)
  __IO uint32_t count = 0U;
 800ddd6:	9301      	str	r3, [sp, #4]
 800ddd8:	e002      	b.n	800dde0 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ddda:	6903      	ldr	r3, [r0, #16]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	db08      	blt.n	800ddf2 <USB_FlushTxFifo+0x22>
    count++;
 800dde0:	9b01      	ldr	r3, [sp, #4]
 800dde2:	3301      	adds	r3, #1
 800dde4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800dde6:	9b01      	ldr	r3, [sp, #4]
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d9f6      	bls.n	800ddda <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 800ddec:	2003      	movs	r0, #3
}
 800ddee:	b002      	add	sp, #8
 800ddf0:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ddf2:	0189      	lsls	r1, r1, #6
  count = 0U;
 800ddf4:	2300      	movs	r3, #0
    if (count > 200000U)
 800ddf6:	4a0a      	ldr	r2, [pc, #40]	; (800de20 <USB_FlushTxFifo+0x50>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ddf8:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800ddfc:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ddfe:	6101      	str	r1, [r0, #16]
 800de00:	e003      	b.n	800de0a <USB_FlushTxFifo+0x3a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800de02:	6903      	ldr	r3, [r0, #16]
 800de04:	f013 0320 	ands.w	r3, r3, #32
 800de08:	d006      	beq.n	800de18 <USB_FlushTxFifo+0x48>
    count++;
 800de0a:	9b01      	ldr	r3, [sp, #4]
 800de0c:	3301      	adds	r3, #1
 800de0e:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800de10:	9b01      	ldr	r3, [sp, #4]
 800de12:	4293      	cmp	r3, r2
 800de14:	d9f5      	bls.n	800de02 <USB_FlushTxFifo+0x32>
 800de16:	e7e9      	b.n	800ddec <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 800de18:	4618      	mov	r0, r3
}
 800de1a:	b002      	add	sp, #8
 800de1c:	4770      	bx	lr
 800de1e:	bf00      	nop
 800de20:	00030d40 	.word	0x00030d40

0800de24 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800de24:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800de28:	f013 0006 	ands.w	r0, r3, #6
 800de2c:	d004      	beq.n	800de38 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 800de2e:	f013 0f02 	tst.w	r3, #2
 800de32:	bf14      	ite	ne
 800de34:	2002      	movne	r0, #2
 800de36:	200f      	moveq	r0, #15
}
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop

0800de3c <USB_ActivateEndpoint>:
{
 800de3c:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800de3e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800de40:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800de42:	2b01      	cmp	r3, #1
 800de44:	d020      	beq.n	800de88 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800de46:	f002 0c0f 	and.w	ip, r2, #15
 800de4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800de4e:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800de52:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800de56:	fa03 f30c 	lsl.w	r3, r3, ip
 800de5a:	4323      	orrs	r3, r4
 800de5c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800de60:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800de64:	041b      	lsls	r3, r3, #16
 800de66:	d40c      	bmi.n	800de82 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800de68:	688b      	ldr	r3, [r1, #8]
 800de6a:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 800de6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800de72:	7908      	ldrb	r0, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800de74:	4914      	ldr	r1, [pc, #80]	; (800dec8 <USB_ActivateEndpoint+0x8c>)
 800de76:	4323      	orrs	r3, r4
 800de78:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 800de7c:	4319      	orrs	r1, r3
 800de7e:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 800de82:	2000      	movs	r0, #0
 800de84:	bc30      	pop	{r4, r5}
 800de86:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800de88:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800de8c:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800de90:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800de94:	40ab      	lsls	r3, r5
 800de96:	69e5      	ldr	r5, [r4, #28]
 800de98:	432b      	orrs	r3, r5
 800de9a:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800de9c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800dea0:	041c      	lsls	r4, r3, #16
 800dea2:	d4ee      	bmi.n	800de82 <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dea4:	688b      	ldr	r3, [r1, #8]
 800dea6:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 800deaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800deae:	790c      	ldrb	r4, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800deb0:	4905      	ldr	r1, [pc, #20]	; (800dec8 <USB_ActivateEndpoint+0x8c>)
 800deb2:	432b      	orrs	r3, r5
 800deb4:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800deb8:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800debc:	4311      	orrs	r1, r2
}
 800debe:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dec0:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 800dec4:	2000      	movs	r0, #0
 800dec6:	4770      	bx	lr
 800dec8:	10008000 	.word	0x10008000

0800decc <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 800decc:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800dece:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800ded0:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ded2:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800ded6:	d02a      	beq.n	800df2e <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ded8:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800dedc:	2a00      	cmp	r2, #0
 800dede:	db19      	blt.n	800df14 <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dee0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800dee4:	f003 030f 	and.w	r3, r3, #15
 800dee8:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800deec:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800def0:	4a23      	ldr	r2, [pc, #140]	; (800df80 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800def2:	ea21 0103 	bic.w	r1, r1, r3
 800def6:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800defa:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800defe:	ea21 0303 	bic.w	r3, r1, r3
 800df02:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800df06:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800df08:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 800df0c:	401a      	ands	r2, r3
 800df0e:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 800df12:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800df14:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800df18:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800df1c:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800df20:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800df24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800df28:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 800df2c:	e7d8      	b.n	800dee0 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800df2e:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800df32:	2a00      	cmp	r2, #0
 800df34:	da0b      	bge.n	800df4e <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800df36:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800df3a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800df3e:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800df42:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800df46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800df4a:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800df4e:	f003 020f 	and.w	r2, r3, #15
 800df52:	2301      	movs	r3, #1
 800df54:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800df58:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800df5a:	4a0a      	ldr	r2, [pc, #40]	; (800df84 <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800df5c:	ea21 0103 	bic.w	r1, r1, r3
 800df60:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800df64:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800df68:	ea21 0303 	bic.w	r3, r1, r3
 800df6c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800df70:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800df72:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 800df76:	401a      	ands	r2, r3
 800df78:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 800df7c:	4770      	bx	lr
 800df7e:	bf00      	nop
 800df80:	eff37800 	.word	0xeff37800
 800df84:	ec337800 	.word	0xec337800

0800df88 <USB_EPStartXfer>:
{
 800df88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 800df8c:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800df8e:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800df90:	2b01      	cmp	r3, #1
 800df92:	d045      	beq.n	800e020 <USB_EPStartXfer+0x98>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800df94:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800df98:	4e9a      	ldr	r6, [pc, #616]	; (800e204 <USB_EPStartXfer+0x27c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800df9a:	4d9b      	ldr	r5, [pc, #620]	; (800e208 <USB_EPStartXfer+0x280>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800df9c:	f8d3 7b10 	ldr.w	r7, [r3, #2832]	; 0xb10
 800dfa0:	f503 6c30 	add.w	ip, r3, #2816	; 0xb00
 800dfa4:	403e      	ands	r6, r7
 800dfa6:	f8c3 6b10 	str.w	r6, [r3, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dfaa:	f8d3 6b10 	ldr.w	r6, [r3, #2832]	; 0xb10
 800dfae:	4035      	ands	r5, r6
 800dfb0:	f8c3 5b10 	str.w	r5, [r3, #2832]	; 0xb10
    if (epnum == 0U)
 800dfb4:	bb7c      	cbnz	r4, 800e016 <USB_EPStartXfer+0x8e>
      if (ep->xfer_len > 0U)
 800dfb6:	690c      	ldr	r4, [r1, #16]
 800dfb8:	2c00      	cmp	r4, #0
 800dfba:	f040 8093 	bne.w	800e0e4 <USB_EPStartXfer+0x15c>
        if (ep->xfer_len > ep->maxpacket)
 800dfbe:	688c      	ldr	r4, [r1, #8]
      ep->xfer_size = ep->maxpacket;
 800dfc0:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800dfc2:	f8dc 5010 	ldr.w	r5, [ip, #16]
 800dfc6:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800dfca:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800dfcc:	ea44 0405 	orr.w	r4, r4, r5
 800dfd0:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dfd4:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800dfd8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800dfdc:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 800dfe0:	f000 80a1 	beq.w	800e126 <USB_EPStartXfer+0x19e>
    if (ep->type == EP_TYPE_ISOC)
 800dfe4:	790a      	ldrb	r2, [r1, #4]
 800dfe6:	2a01      	cmp	r2, #1
 800dfe8:	d10c      	bne.n	800e004 <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dfea:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800dfee:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800dff2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800dff6:	bf0c      	ite	eq
 800dff8:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800dffc:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800e000:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e004:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
}
 800e008:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e00a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800e00e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800e012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->xfer_len == 0U)
 800e016:	690c      	ldr	r4, [r1, #16]
 800e018:	2c00      	cmp	r4, #0
 800e01a:	d166      	bne.n	800e0ea <USB_EPStartXfer+0x162>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e01c:	688c      	ldr	r4, [r1, #8]
 800e01e:	e7d0      	b.n	800dfc2 <USB_EPStartXfer+0x3a>
    if (ep->xfer_len == 0U)
 800e020:	690b      	ldr	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e022:	eb00 1644 	add.w	r6, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 800e026:	bb2b      	cbnz	r3, 800e074 <USB_EPStartXfer+0xec>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e028:	f8d6 c910 	ldr.w	ip, [r6, #2320]	; 0x910
    if (dma == 1U)
 800e02c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e02e:	4f76      	ldr	r7, [pc, #472]	; (800e208 <USB_EPStartXfer+0x280>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e030:	4d74      	ldr	r5, [pc, #464]	; (800e204 <USB_EPStartXfer+0x27c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e032:	ea0c 0707 	and.w	r7, ip, r7
 800e036:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e03a:	f8d6 7910 	ldr.w	r7, [r6, #2320]	; 0x910
 800e03e:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800e042:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e046:	f8d6 7910 	ldr.w	r7, [r6, #2320]	; 0x910
 800e04a:	ea05 0507 	and.w	r5, r5, r7
 800e04e:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e052:	f506 6510 	add.w	r5, r6, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800e056:	790f      	ldrb	r7, [r1, #4]
    if (dma == 1U)
 800e058:	f000 80b1 	beq.w	800e1be <USB_EPStartXfer+0x236>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e05c:	f8d6 c900 	ldr.w	ip, [r6, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800e060:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e062:	f04c 4c04 	orr.w	ip, ip, #2214592512	; 0x84000000
 800e066:	f8c6 c900 	str.w	ip, [r6, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800e06a:	f000 8088 	beq.w	800e17e <USB_EPStartXfer+0x1f6>
}
 800e06e:	2000      	movs	r0, #0
 800e070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e074:	f8d6 c910 	ldr.w	ip, [r6, #2320]	; 0x910
 800e078:	4f62      	ldr	r7, [pc, #392]	; (800e204 <USB_EPStartXfer+0x27c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e07a:	4d63      	ldr	r5, [pc, #396]	; (800e208 <USB_EPStartXfer+0x280>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e07c:	ea0c 0707 	and.w	r7, ip, r7
 800e080:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e084:	f8d6 7910 	ldr.w	r7, [r6, #2320]	; 0x910
 800e088:	403d      	ands	r5, r7
 800e08a:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e08e:	f506 6510 	add.w	r5, r6, #2304	; 0x900
      if (epnum == 0U)
 800e092:	2c00      	cmp	r4, #0
 800e094:	d14e      	bne.n	800e134 <USB_EPStartXfer+0x1ac>
        if (ep->xfer_len > ep->maxpacket)
 800e096:	688f      	ldr	r7, [r1, #8]
 800e098:	42bb      	cmp	r3, r7
 800e09a:	f200 80a0 	bhi.w	800e1de <USB_EPStartXfer+0x256>
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e09e:	692f      	ldr	r7, [r5, #16]
 800e0a0:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800e0a4:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e0a6:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800e0aa:	f3c3 0712 	ubfx	r7, r3, #0, #19
 800e0ae:	ea47 070c 	orr.w	r7, r7, ip
 800e0b2:	612f      	str	r7, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800e0b4:	790f      	ldrb	r7, [r1, #4]
 800e0b6:	2f01      	cmp	r7, #1
 800e0b8:	d04d      	beq.n	800e156 <USB_EPStartXfer+0x1ce>
    if (dma == 1U)
 800e0ba:	2a01      	cmp	r2, #1
 800e0bc:	f000 808a 	beq.w	800e1d4 <USB_EPStartXfer+0x24c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e0c0:	f8d6 2900 	ldr.w	r2, [r6, #2304]	; 0x900
 800e0c4:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800e0c8:	f8c6 2900 	str.w	r2, [r6, #2304]	; 0x900
        if (ep->xfer_len > 0U)
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d0ce      	beq.n	800e06e <USB_EPStartXfer+0xe6>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e0d0:	f004 020f 	and.w	r2, r4, #15
 800e0d4:	2401      	movs	r4, #1
 800e0d6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800e0da:	4094      	lsls	r4, r2
 800e0dc:	431c      	orrs	r4, r3
 800e0de:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 800e0e2:	e7c4      	b.n	800e06e <USB_EPStartXfer+0xe6>
        ep->xfer_len = ep->maxpacket;
 800e0e4:	688c      	ldr	r4, [r1, #8]
 800e0e6:	610c      	str	r4, [r1, #16]
 800e0e8:	e76a      	b.n	800dfc0 <USB_EPStartXfer+0x38>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e0ea:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 800e0ec:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e0ee:	4e47      	ldr	r6, [pc, #284]	; (800e20c <USB_EPStartXfer+0x284>)
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e0f0:	442c      	add	r4, r5
 800e0f2:	f104 34ff 	add.w	r4, r4, #4294967295
 800e0f6:	fbb4 f4f5 	udiv	r4, r4, r5
 800e0fa:	b2a4      	uxth	r4, r4
        ep->xfer_size = ep->maxpacket * pktcnt;
 800e0fc:	fb04 f505 	mul.w	r5, r4, r5
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e100:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 800e104:	f8dc 6010 	ldr.w	r6, [ip, #16]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800e108:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e10a:	f3c5 0512 	ubfx	r5, r5, #0, #19
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e10e:	ea44 0406 	orr.w	r4, r4, r6
 800e112:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e116:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800e11a:	ea45 0504 	orr.w	r5, r5, r4
 800e11e:	f8cc 5010 	str.w	r5, [ip, #16]
    if (dma == 1U)
 800e122:	f47f af5f 	bne.w	800dfe4 <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 800e126:	68ca      	ldr	r2, [r1, #12]
 800e128:	2a00      	cmp	r2, #0
 800e12a:	f43f af5b 	beq.w	800dfe4 <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e12e:	f8cc 2014 	str.w	r2, [ip, #20]
 800e132:	e757      	b.n	800dfe4 <USB_EPStartXfer+0x5c>
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e134:	f8d1 e008 	ldr.w	lr, [r1, #8]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e138:	4f34      	ldr	r7, [pc, #208]	; (800e20c <USB_EPStartXfer+0x284>)
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e13a:	eb03 0c0e 	add.w	ip, r3, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e13e:	f8d5 8010 	ldr.w	r8, [r5, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e142:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e146:	fbbc fcfe 	udiv	ip, ip, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e14a:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 800e14e:	ea47 0708 	orr.w	r7, r7, r8
 800e152:	612f      	str	r7, [r5, #16]
 800e154:	e7a7      	b.n	800e0a6 <USB_EPStartXfer+0x11e>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e156:	f8d5 c010 	ldr.w	ip, [r5, #16]
    if (dma == 1U)
 800e15a:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e15c:	f02c 4cc0 	bic.w	ip, ip, #1610612736	; 0x60000000
 800e160:	f8c5 c010 	str.w	ip, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e164:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800e168:	f04c 5c00 	orr.w	ip, ip, #536870912	; 0x20000000
 800e16c:	f8c5 c010 	str.w	ip, [r5, #16]
    if (dma == 1U)
 800e170:	d038      	beq.n	800e1e4 <USB_EPStartXfer+0x25c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e172:	f8d6 7900 	ldr.w	r7, [r6, #2304]	; 0x900
 800e176:	f047 4704 	orr.w	r7, r7, #2214592512	; 0x84000000
 800e17a:	f8c6 7900 	str.w	r7, [r6, #2304]	; 0x900
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e17e:	f8d0 6808 	ldr.w	r6, [r0, #2056]	; 0x808
 800e182:	f416 7f80 	tst.w	r6, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e186:	682e      	ldr	r6, [r5, #0]
 800e188:	bf0c      	ite	eq
 800e18a:	f046 5600 	orreq.w	r6, r6, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e18e:	f046 5680 	orrne.w	r6, r6, #268435456	; 0x10000000
 800e192:	602e      	str	r6, [r5, #0]
  if (dma == 0U)
 800e194:	2a00      	cmp	r2, #0
 800e196:	f47f af6a 	bne.w	800e06e <USB_EPStartXfer+0xe6>
    count32b = ((uint32_t)len + 3U) / 4U;
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800e19e:	089a      	lsrs	r2, r3, #2
 800e1a0:	f43f af65 	beq.w	800e06e <USB_EPStartXfer+0xe6>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e1a4:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e1a6:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 800e1aa:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800e1ae:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800e1b2:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 800e1b6:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e1b8:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800e1ba:	d1fa      	bne.n	800e1b2 <USB_EPStartXfer+0x22a>
 800e1bc:	e757      	b.n	800e06e <USB_EPStartXfer+0xe6>
      if ((uint32_t)ep->dma_addr != 0U)
 800e1be:	69cb      	ldr	r3, [r1, #28]
 800e1c0:	b95b      	cbnz	r3, 800e1da <USB_EPStartXfer+0x252>
      if (ep->type == EP_TYPE_ISOC)
 800e1c2:	2f01      	cmp	r7, #1
 800e1c4:	d011      	beq.n	800e1ea <USB_EPStartXfer+0x262>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e1c6:	682b      	ldr	r3, [r5, #0]
}
 800e1c8:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e1ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e1ce:	602b      	str	r3, [r5, #0]
}
 800e1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800e1d4:	69cb      	ldr	r3, [r1, #28]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d0f5      	beq.n	800e1c6 <USB_EPStartXfer+0x23e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e1da:	616b      	str	r3, [r5, #20]
 800e1dc:	e7f1      	b.n	800e1c2 <USB_EPStartXfer+0x23a>
          ep->xfer_len = ep->maxpacket;
 800e1de:	463b      	mov	r3, r7
 800e1e0:	610f      	str	r7, [r1, #16]
 800e1e2:	e75c      	b.n	800e09e <USB_EPStartXfer+0x116>
      if ((uint32_t)ep->dma_addr != 0U)
 800e1e4:	69cb      	ldr	r3, [r1, #28]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d1f7      	bne.n	800e1da <USB_EPStartXfer+0x252>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e1ea:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800e1ee:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e1f2:	682b      	ldr	r3, [r5, #0]
 800e1f4:	bf0c      	ite	eq
 800e1f6:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e1fa:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800e1fe:	602b      	str	r3, [r5, #0]
 800e200:	e7e1      	b.n	800e1c6 <USB_EPStartXfer+0x23e>
 800e202:	bf00      	nop
 800e204:	fff80000 	.word	0xfff80000
 800e208:	e007ffff 	.word	0xe007ffff
 800e20c:	1ff80000 	.word	0x1ff80000

0800e210 <USB_EPStopXfer>:
  __IO uint32_t count = 0U;
 800e210:	2300      	movs	r3, #0
{
 800e212:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800e214:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 800e216:	784b      	ldrb	r3, [r1, #1]
 800e218:	2b01      	cmp	r3, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e21a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800e21c:	d020      	beq.n	800e260 <USB_EPStopXfer+0x50>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e21e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800e222:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800e226:	6803      	ldr	r3, [r0, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	db02      	blt.n	800e232 <USB_EPStopXfer+0x22>
  HAL_StatusTypeDef ret = HAL_OK;
 800e22c:	2000      	movs	r0, #0
}
 800e22e:	b002      	add	sp, #8
 800e230:	4770      	bx	lr
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e232:	6803      	ldr	r3, [r0, #0]
        if (count > 10000U)
 800e234:	f242 7210 	movw	r2, #10000	; 0x2710
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e238:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e23c:	6003      	str	r3, [r0, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e23e:	6803      	ldr	r3, [r0, #0]
 800e240:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e244:	6003      	str	r3, [r0, #0]
 800e246:	e002      	b.n	800e24e <USB_EPStopXfer+0x3e>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e248:	6803      	ldr	r3, [r0, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	daee      	bge.n	800e22c <USB_EPStopXfer+0x1c>
        count++;
 800e24e:	9b01      	ldr	r3, [sp, #4]
 800e250:	3301      	adds	r3, #1
 800e252:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 800e254:	9b01      	ldr	r3, [sp, #4]
 800e256:	4293      	cmp	r3, r2
 800e258:	d9f6      	bls.n	800e248 <USB_EPStopXfer+0x38>
          ret = HAL_ERROR;
 800e25a:	2001      	movs	r0, #1
}
 800e25c:	b002      	add	sp, #8
 800e25e:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e260:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800e264:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	2a00      	cmp	r2, #0
 800e26c:	dade      	bge.n	800e22c <USB_EPStopXfer+0x1c>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e26e:	681a      	ldr	r2, [r3, #0]
        if (count > 10000U)
 800e270:	f242 7110 	movw	r1, #10000	; 0x2710
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e274:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800e278:	601a      	str	r2, [r3, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e280:	601a      	str	r2, [r3, #0]
 800e282:	e002      	b.n	800e28a <USB_EPStopXfer+0x7a>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	2a00      	cmp	r2, #0
 800e288:	dad0      	bge.n	800e22c <USB_EPStopXfer+0x1c>
        count++;
 800e28a:	9a01      	ldr	r2, [sp, #4]
 800e28c:	3201      	adds	r2, #1
 800e28e:	9201      	str	r2, [sp, #4]
        if (count > 10000U)
 800e290:	9a01      	ldr	r2, [sp, #4]
 800e292:	428a      	cmp	r2, r1
 800e294:	d9f6      	bls.n	800e284 <USB_EPStopXfer+0x74>
 800e296:	e7e0      	b.n	800e25a <USB_EPStopXfer+0x4a>

0800e298 <USB_WritePacket>:
{
 800e298:	b410      	push	{r4}
 800e29a:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800e29e:	b964      	cbnz	r4, 800e2ba <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 800e2a0:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800e2a2:	089b      	lsrs	r3, r3, #2
 800e2a4:	d009      	beq.n	800e2ba <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e2a6:	3201      	adds	r2, #1
 800e2a8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e2ac:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800e2b0:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800e2b4:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e2b6:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800e2b8:	d1fa      	bne.n	800e2b0 <USB_WritePacket+0x18>
}
 800e2ba:	2000      	movs	r0, #0
 800e2bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2c0:	4770      	bx	lr
 800e2c2:	bf00      	nop

0800e2c4 <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 800e2c4:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 800e2c8:	b570      	push	{r4, r5, r6, lr}
 800e2ca:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 800e2cc:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 800e2d0:	d01c      	beq.n	800e30c <USB_ReadPacket+0x48>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e2d2:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 800e2d6:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 800e2d8:	2300      	movs	r3, #0
 800e2da:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e2dc:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 800e2e0:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e2e2:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 800e2e6:	d1f8      	bne.n	800e2da <USB_ReadPacket+0x16>
    pDest++;
 800e2e8:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 800e2ec:	b16e      	cbz	r6, 800e30a <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e2ee:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
      remaining_bytes--;
 800e2f2:	1e73      	subs	r3, r6, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e2f4:	682a      	ldr	r2, [r5, #0]
      remaining_bytes--;
 800e2f6:	b29b      	uxth	r3, r3
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e2f8:	7002      	strb	r2, [r0, #0]
    } while (remaining_bytes != 0U);
 800e2fa:	b12b      	cbz	r3, 800e308 <USB_ReadPacket+0x44>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e2fc:	0a11      	lsrs	r1, r2, #8
    } while (remaining_bytes != 0U);
 800e2fe:	2b01      	cmp	r3, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e300:	7041      	strb	r1, [r0, #1]
    } while (remaining_bytes != 0U);
 800e302:	d001      	beq.n	800e308 <USB_ReadPacket+0x44>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e304:	0c12      	lsrs	r2, r2, #16
 800e306:	7082      	strb	r2, [r0, #2]
      pDest++;
 800e308:	4430      	add	r0, r6
}
 800e30a:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 800e30c:	4608      	mov	r0, r1
 800e30e:	e7ed      	b.n	800e2ec <USB_ReadPacket+0x28>

0800e310 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800e310:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800e312:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800e314:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e316:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800e31a:	d00c      	beq.n	800e336 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e31c:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800e320:	b10b      	cbz	r3, 800e326 <USB_EPSetStall+0x16>
 800e322:	2a00      	cmp	r2, #0
 800e324:	da14      	bge.n	800e350 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e326:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e32a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e32e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800e332:	2000      	movs	r0, #0
 800e334:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e336:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800e33a:	2a00      	cmp	r2, #0
 800e33c:	db00      	blt.n	800e340 <USB_EPSetStall+0x30>
 800e33e:	b973      	cbnz	r3, 800e35e <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e340:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e344:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e348:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800e34c:	2000      	movs	r0, #0
 800e34e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e350:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e354:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e358:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800e35c:	e7e3      	b.n	800e326 <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e35e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e362:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e366:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e36a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e36e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e372:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800e376:	e7e9      	b.n	800e34c <USB_EPSetStall+0x3c>

0800e378 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 800e378:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800e37a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800e37c:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e37e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800e382:	d013      	beq.n	800e3ac <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e384:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e388:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e38c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e390:	790b      	ldrb	r3, [r1, #4]
 800e392:	3b02      	subs	r3, #2
 800e394:	2b01      	cmp	r3, #1
 800e396:	d901      	bls.n	800e39c <USB_EPClearStall+0x24>
}
 800e398:	2000      	movs	r0, #0
 800e39a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e39c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e3a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e3a4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800e3a8:	2000      	movs	r0, #0
 800e3aa:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e3ac:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e3b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e3b4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e3b8:	790b      	ldrb	r3, [r1, #4]
 800e3ba:	3b02      	subs	r3, #2
 800e3bc:	2b01      	cmp	r3, #1
 800e3be:	d8eb      	bhi.n	800e398 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e3c0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800e3c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e3c8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	4770      	bx	lr

0800e3d0 <USB_SetDevAddress>:
{
 800e3d0:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e3d2:	0109      	lsls	r1, r1, #4
}
 800e3d4:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e3d6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e3da:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e3de:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800e3e2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e3e6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800e3ea:	4311      	orrs	r1, r2
 800e3ec:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop

0800e3f4 <USB_DevConnect>:
{
 800e3f4:	4603      	mov	r3, r0
}
 800e3f6:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e3f8:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e3fc:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e400:	f022 0203 	bic.w	r2, r2, #3
 800e404:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e408:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800e40c:	f023 0302 	bic.w	r3, r3, #2
 800e410:	604b      	str	r3, [r1, #4]
}
 800e412:	4770      	bx	lr

0800e414 <USB_DevDisconnect>:
{
 800e414:	4603      	mov	r3, r0
}
 800e416:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e418:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e41c:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e420:	f022 0203 	bic.w	r2, r2, #3
 800e424:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e428:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800e42c:	f043 0302 	orr.w	r3, r3, #2
 800e430:	604b      	str	r3, [r1, #4]
}
 800e432:	4770      	bx	lr

0800e434 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800e434:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800e436:	6980      	ldr	r0, [r0, #24]
}
 800e438:	4010      	ands	r0, r2
 800e43a:	4770      	bx	lr

0800e43c <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800e43c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e440:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 800e444:	4018      	ands	r0, r3
}
 800e446:	0c00      	lsrs	r0, r0, #16
 800e448:	4770      	bx	lr
 800e44a:	bf00      	nop

0800e44c <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800e44c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e450:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 800e454:	4018      	ands	r0, r3
}
 800e456:	b280      	uxth	r0, r0
 800e458:	4770      	bx	lr
 800e45a:	bf00      	nop

0800e45c <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e45c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e460:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e464:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e468:	6940      	ldr	r0, [r0, #20]
}
 800e46a:	4010      	ands	r0, r2
 800e46c:	4770      	bx	lr
 800e46e:	bf00      	nop

0800e470 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800e470:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e474:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e478:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e47c:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e480:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e484:	40cb      	lsrs	r3, r1
 800e486:	01db      	lsls	r3, r3, #7
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	4313      	orrs	r3, r2
}
 800e48c:	4018      	ands	r0, r3
 800e48e:	4770      	bx	lr

0800e490 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800e490:	6940      	ldr	r0, [r0, #20]
}
 800e492:	f000 0001 	and.w	r0, r0, #1
 800e496:	4770      	bx	lr

0800e498 <USB_ActivateSetup>:
{
 800e498:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e49a:	4a09      	ldr	r2, [pc, #36]	; (800e4c0 <USB_ActivateSetup+0x28>)
}
 800e49c:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e49e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 800e4a2:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e4a4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800e4a8:	4022      	ands	r2, r4
}
 800e4aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e4ae:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e4b2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800e4b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e4ba:	604b      	str	r3, [r1, #4]
}
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop
 800e4c0:	fffff800 	.word	0xfffff800

0800e4c4 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e4c4:	4b14      	ldr	r3, [pc, #80]	; (800e518 <USB_EP0_OutStart+0x54>)
{
 800e4c6:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e4c8:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e4ca:	429c      	cmp	r4, r3
 800e4cc:	d81a      	bhi.n	800e504 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e4ce:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e4d2:	2300      	movs	r3, #0
  if (dma == 1U)
 800e4d4:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e4d6:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e4d8:	6903      	ldr	r3, [r0, #16]
 800e4da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e4de:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e4e0:	6903      	ldr	r3, [r0, #16]
 800e4e2:	f043 0318 	orr.w	r3, r3, #24
 800e4e6:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e4e8:	6903      	ldr	r3, [r0, #16]
 800e4ea:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e4ee:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 800e4f0:	d104      	bne.n	800e4fc <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e4f2:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e4f4:	6803      	ldr	r3, [r0, #0]
 800e4f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e4fa:	6003      	str	r3, [r0, #0]
}
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e502:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e504:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800e508:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	dae0      	bge.n	800e4d2 <USB_EP0_OutStart+0xe>
}
 800e510:	2000      	movs	r0, #0
 800e512:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e516:	4770      	bx	lr
 800e518:	4f54300a 	.word	0x4f54300a

0800e51c <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e51c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800e520:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 800e524:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e526:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0

  if (hcdc == NULL)
 800e52a:	b194      	cbz	r4, 800e552 <USBD_CDC_EP0_RxReady+0x36>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e52c:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 800e530:	b16b      	cbz	r3, 800e54e <USBD_CDC_EP0_RxReady+0x32>
 800e532:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800e536:	28ff      	cmp	r0, #255	; 0xff
 800e538:	d009      	beq.n	800e54e <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e53a:	689b      	ldr	r3, [r3, #8]
 800e53c:	4621      	mov	r1, r4
 800e53e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800e542:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800e544:	23ff      	movs	r3, #255	; 0xff
  }

  return (uint8_t)USBD_OK;
 800e546:	2000      	movs	r0, #0
    hcdc->CmdOpCode = 0xFFU;
 800e548:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
 800e54c:	bd10      	pop	{r4, pc}
  return (uint8_t)USBD_OK;
 800e54e:	2000      	movs	r0, #0
}
 800e550:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800e552:	2003      	movs	r0, #3
}
 800e554:	bd10      	pop	{r4, pc}
 800e556:	bf00      	nop

0800e558 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e558:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e55a:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 800e55c:	4801      	ldr	r0, [pc, #4]	; (800e564 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e55e:	801a      	strh	r2, [r3, #0]
}
 800e560:	4770      	bx	lr
 800e562:	bf00      	nop
 800e564:	2400039c 	.word	0x2400039c

0800e568 <USBD_CDC_GetFSCfgDesc>:
{
 800e568:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e56a:	2182      	movs	r1, #130	; 0x82
{
 800e56c:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e56e:	480f      	ldr	r0, [pc, #60]	; (800e5ac <USBD_CDC_GetFSCfgDesc+0x44>)
 800e570:	f000 fbf8 	bl	800ed64 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e574:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e576:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e578:	480c      	ldr	r0, [pc, #48]	; (800e5ac <USBD_CDC_GetFSCfgDesc+0x44>)
 800e57a:	f000 fbf3 	bl	800ed64 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e57e:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e580:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e582:	480a      	ldr	r0, [pc, #40]	; (800e5ac <USBD_CDC_GetFSCfgDesc+0x44>)
 800e584:	f000 fbee 	bl	800ed64 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800e588:	b10d      	cbz	r5, 800e58e <USBD_CDC_GetFSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e58a:	2210      	movs	r2, #16
 800e58c:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 800e58e:	b11c      	cbz	r4, 800e598 <USBD_CDC_GetFSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e590:	2100      	movs	r1, #0
 800e592:	2240      	movs	r2, #64	; 0x40
 800e594:	7161      	strb	r1, [r4, #5]
 800e596:	7122      	strb	r2, [r4, #4]
  if (pEpInDesc != NULL)
 800e598:	b118      	cbz	r0, 800e5a2 <USBD_CDC_GetFSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e59a:	2100      	movs	r1, #0
 800e59c:	2240      	movs	r2, #64	; 0x40
 800e59e:	7141      	strb	r1, [r0, #5]
 800e5a0:	7102      	strb	r2, [r0, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e5a2:	2343      	movs	r3, #67	; 0x43
}
 800e5a4:	4801      	ldr	r0, [pc, #4]	; (800e5ac <USBD_CDC_GetFSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e5a6:	8033      	strh	r3, [r6, #0]
}
 800e5a8:	bd70      	pop	{r4, r5, r6, pc}
 800e5aa:	bf00      	nop
 800e5ac:	24000358 	.word	0x24000358

0800e5b0 <USBD_CDC_GetHSCfgDesc>:
{
 800e5b0:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e5b2:	2182      	movs	r1, #130	; 0x82
{
 800e5b4:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e5b6:	480f      	ldr	r0, [pc, #60]	; (800e5f4 <USBD_CDC_GetHSCfgDesc+0x44>)
 800e5b8:	f000 fbd4 	bl	800ed64 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e5bc:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e5be:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e5c0:	480c      	ldr	r0, [pc, #48]	; (800e5f4 <USBD_CDC_GetHSCfgDesc+0x44>)
 800e5c2:	f000 fbcf 	bl	800ed64 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e5c6:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e5c8:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e5ca:	480a      	ldr	r0, [pc, #40]	; (800e5f4 <USBD_CDC_GetHSCfgDesc+0x44>)
 800e5cc:	f000 fbca 	bl	800ed64 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800e5d0:	b10d      	cbz	r5, 800e5d6 <USBD_CDC_GetHSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e5d2:	2210      	movs	r2, #16
 800e5d4:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 800e5d6:	b11c      	cbz	r4, 800e5e0 <USBD_CDC_GetHSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e5d8:	2100      	movs	r1, #0
 800e5da:	2202      	movs	r2, #2
 800e5dc:	7121      	strb	r1, [r4, #4]
 800e5de:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 800e5e0:	b118      	cbz	r0, 800e5ea <USBD_CDC_GetHSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e5e2:	2100      	movs	r1, #0
 800e5e4:	2202      	movs	r2, #2
 800e5e6:	7101      	strb	r1, [r0, #4]
 800e5e8:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e5ea:	2343      	movs	r3, #67	; 0x43
}
 800e5ec:	4801      	ldr	r0, [pc, #4]	; (800e5f4 <USBD_CDC_GetHSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e5ee:	8033      	strh	r3, [r6, #0]
}
 800e5f0:	bd70      	pop	{r4, r5, r6, pc}
 800e5f2:	bf00      	nop
 800e5f4:	24000358 	.word	0x24000358

0800e5f8 <USBD_CDC_DataOut>:
{
 800e5f8:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e5fa:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800e5fe:	33b0      	adds	r3, #176	; 0xb0
 800e600:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e604:	b195      	cbz	r5, 800e62c <USBD_CDC_DataOut+0x34>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e606:	4604      	mov	r4, r0
 800e608:	f001 f9f2 	bl	800f9f0 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e60c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800e610:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e614:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e618:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800e61c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800e620:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 800e624:	68db      	ldr	r3, [r3, #12]
 800e626:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800e628:	2000      	movs	r0, #0
}
 800e62a:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800e62c:	2003      	movs	r0, #3
}
 800e62e:	bd38      	pop	{r3, r4, r5, pc}

0800e630 <USBD_CDC_DataIn>:
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e630:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800e634:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
{
 800e638:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e63a:	f8dc 52c0 	ldr.w	r5, [ip, #704]	; 0x2c0
 800e63e:	b36d      	cbz	r5, 800e69c <USBD_CDC_DataIn+0x6c>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e640:	f001 0e0f 	and.w	lr, r1, #15
 800e644:	460a      	mov	r2, r1
 800e646:	eb0e 068e 	add.w	r6, lr, lr, lsl #2
 800e64a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800e64e:	69b3      	ldr	r3, [r6, #24]
 800e650:	b96b      	cbnz	r3, 800e66e <USBD_CDC_DataIn+0x3e>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e652:	f8dc 32c4 	ldr.w	r3, [ip, #708]	; 0x2c4
    hcdc->TxState = 0U;
 800e656:	2400      	movs	r4, #0
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e658:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800e65a:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e65e:	b1db      	cbz	r3, 800e698 <USBD_CDC_DataIn+0x68>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e660:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800e664:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 800e668:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800e66a:	4620      	mov	r0, r4
}
 800e66c:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e66e:	f8d0 42c8 	ldr.w	r4, [r0, #712]	; 0x2c8
 800e672:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 800e676:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 800e67a:	f8de 4044 	ldr.w	r4, [lr, #68]	; 0x44
 800e67e:	fbb3 fef4 	udiv	lr, r3, r4
 800e682:	fb04 341e 	mls	r4, r4, lr, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e686:	2c00      	cmp	r4, #0
 800e688:	d1e3      	bne.n	800e652 <USBD_CDC_DataIn+0x22>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e68a:	4623      	mov	r3, r4
 800e68c:	4622      	mov	r2, r4
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e68e:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e690:	f001 f992 	bl	800f9b8 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800e694:	4620      	mov	r0, r4
}
 800e696:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 800e698:	4618      	mov	r0, r3
}
 800e69a:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 800e69c:	2003      	movs	r0, #3
}
 800e69e:	bd70      	pop	{r4, r5, r6, pc}

0800e6a0 <USBD_CDC_Setup>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6a0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800e6a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
{
 800e6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6aa:	4604      	mov	r4, r0
 800e6ac:	b083      	sub	sp, #12
  uint8_t ifalt = 0U;
 800e6ae:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6b0:	f8d3 72c0 	ldr.w	r7, [r3, #704]	; 0x2c0
  uint8_t ifalt = 0U;
 800e6b4:	f88d 0005 	strb.w	r0, [sp, #5]
  uint16_t status_info = 0U;
 800e6b8:	f8ad 0006 	strh.w	r0, [sp, #6]
  if (hcdc == NULL)
 800e6bc:	2f00      	cmp	r7, #0
 800e6be:	d066      	beq.n	800e78e <USBD_CDC_Setup+0xee>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e6c0:	f891 c000 	ldrb.w	ip, [r1]
 800e6c4:	460d      	mov	r5, r1
 800e6c6:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
 800e6ca:	d01d      	beq.n	800e708 <USBD_CDC_Setup+0x68>
 800e6cc:	2e20      	cmp	r6, #32
 800e6ce:	d007      	beq.n	800e6e0 <USBD_CDC_Setup+0x40>
          USBD_CtlError(pdev, req);
 800e6d0:	4629      	mov	r1, r5
 800e6d2:	4620      	mov	r0, r4
          ret = USBD_FAIL;
 800e6d4:	2603      	movs	r6, #3
          USBD_CtlError(pdev, req);
 800e6d6:	f000 fe09 	bl	800f2ec <USBD_CtlError>
}
 800e6da:	4630      	mov	r0, r6
 800e6dc:	b003      	add	sp, #12
 800e6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (req->wLength != 0U)
 800e6e0:	88ca      	ldrh	r2, [r1, #6]
 800e6e2:	b37a      	cbz	r2, 800e744 <USBD_CDC_Setup+0xa4>
        if ((req->bmRequest & 0x80U) != 0U)
 800e6e4:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800e6e8:	d155      	bne.n	800e796 <USBD_CDC_Setup+0xf6>
          hcdc->CmdOpCode = req->bRequest;
 800e6ea:	784b      	ldrb	r3, [r1, #1]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e6ec:	2a3f      	cmp	r2, #63	; 0x3f
          hcdc->CmdOpCode = req->bRequest;
 800e6ee:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e6f2:	d960      	bls.n	800e7b6 <USBD_CDC_Setup+0x116>
 800e6f4:	2340      	movs	r3, #64	; 0x40
 800e6f6:	461a      	mov	r2, r3
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e6f8:	4639      	mov	r1, r7
 800e6fa:	4620      	mov	r0, r4
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e6fc:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
  USBD_StatusTypeDef ret = USBD_OK;
 800e700:	2600      	movs	r6, #0
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e702:	f000 fe41 	bl	800f388 <USBD_CtlPrepareRx>
 800e706:	e7e8      	b.n	800e6da <USBD_CDC_Setup+0x3a>
      switch (req->bRequest)
 800e708:	784b      	ldrb	r3, [r1, #1]
 800e70a:	2b0b      	cmp	r3, #11
 800e70c:	d8e0      	bhi.n	800e6d0 <USBD_CDC_Setup+0x30>
 800e70e:	a201      	add	r2, pc, #4	; (adr r2, 800e714 <USBD_CDC_Setup+0x74>)
 800e710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e714:	0800e777 	.word	0x0800e777
 800e718:	0800e6db 	.word	0x0800e6db
 800e71c:	0800e6d1 	.word	0x0800e6d1
 800e720:	0800e6d1 	.word	0x0800e6d1
 800e724:	0800e6d1 	.word	0x0800e6d1
 800e728:	0800e6d1 	.word	0x0800e6d1
 800e72c:	0800e6d1 	.word	0x0800e6d1
 800e730:	0800e6d1 	.word	0x0800e6d1
 800e734:	0800e6d1 	.word	0x0800e6d1
 800e738:	0800e6d1 	.word	0x0800e6d1
 800e73c:	0800e761 	.word	0x0800e761
 800e740:	0800e757 	.word	0x0800e757
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e744:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
  USBD_StatusTypeDef ret = USBD_OK;
 800e748:	4616      	mov	r6, r2
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e74a:	7848      	ldrb	r0, [r1, #1]
 800e74c:	689b      	ldr	r3, [r3, #8]
 800e74e:	4798      	blx	r3
}
 800e750:	4630      	mov	r0, r6
 800e752:	b003      	add	sp, #12
 800e754:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e756:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800e75a:	2b03      	cmp	r3, #3
 800e75c:	d0bd      	beq.n	800e6da <USBD_CDC_Setup+0x3a>
 800e75e:	e7b7      	b.n	800e6d0 <USBD_CDC_Setup+0x30>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e760:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800e764:	2b03      	cmp	r3, #3
 800e766:	d1b3      	bne.n	800e6d0 <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e768:	2201      	movs	r2, #1
 800e76a:	f10d 0105 	add.w	r1, sp, #5
 800e76e:	4620      	mov	r0, r4
 800e770:	f000 fdf2 	bl	800f358 <USBD_CtlSendData>
 800e774:	e7b1      	b.n	800e6da <USBD_CDC_Setup+0x3a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e776:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800e77a:	2a03      	cmp	r2, #3
 800e77c:	d1a8      	bne.n	800e6d0 <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e77e:	2202      	movs	r2, #2
 800e780:	f10d 0106 	add.w	r1, sp, #6
 800e784:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800e786:	461e      	mov	r6, r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e788:	f000 fde6 	bl	800f358 <USBD_CtlSendData>
 800e78c:	e7a5      	b.n	800e6da <USBD_CDC_Setup+0x3a>
    return (uint8_t)USBD_FAIL;
 800e78e:	2603      	movs	r6, #3
}
 800e790:	4630      	mov	r0, r6
 800e792:	b003      	add	sp, #12
 800e794:	bdf0      	pop	{r4, r5, r6, r7, pc}
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e796:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e79a:	4639      	mov	r1, r7
  USBD_StatusTypeDef ret = USBD_OK;
 800e79c:	4606      	mov	r6, r0
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e79e:	7868      	ldrb	r0, [r5, #1]
 800e7a0:	689b      	ldr	r3, [r3, #8]
 800e7a2:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e7a4:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e7a6:	4639      	mov	r1, r7
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	2a07      	cmp	r2, #7
 800e7ac:	bf28      	it	cs
 800e7ae:	2207      	movcs	r2, #7
 800e7b0:	f000 fdd2 	bl	800f358 <USBD_CtlSendData>
 800e7b4:	e791      	b.n	800e6da <USBD_CDC_Setup+0x3a>
 800e7b6:	b2d3      	uxtb	r3, r2
 800e7b8:	e79e      	b.n	800e6f8 <USBD_CDC_Setup+0x58>
 800e7ba:	bf00      	nop

0800e7bc <USBD_CDC_DeInit>:
{
 800e7bc:	b538      	push	{r3, r4, r5, lr}
 800e7be:	4604      	mov	r4, r0
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e7c0:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e7c2:	2181      	movs	r1, #129	; 0x81
 800e7c4:	f001 f8ac 	bl	800f920 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e7c8:	2101      	movs	r1, #1
 800e7ca:	4620      	mov	r0, r4
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e7cc:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e7ce:	f001 f8a7 	bl	800f920 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e7d2:	2182      	movs	r1, #130	; 0x82
 800e7d4:	4620      	mov	r0, r4
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e7d6:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e7da:	f001 f8a1 	bl	800f920 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e7de:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e7e2:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e7e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e7e8:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
 800e7ec:	b18a      	cbz	r2, 800e812 <USBD_CDC_DeInit+0x56>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e7ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e7f6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 800e7fa:	33b0      	adds	r3, #176	; 0xb0
 800e7fc:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800e800:	f001 f8fe 	bl	800fa00 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e804:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 800e808:	33b0      	adds	r3, #176	; 0xb0
 800e80a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 800e80e:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800e812:	2000      	movs	r0, #0
 800e814:	bd38      	pop	{r3, r4, r5, pc}
 800e816:	bf00      	nop

0800e818 <USBD_CDC_Init>:
{
 800e818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e81c:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e81e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e822:	f001 f8e9 	bl	800f9f8 <USBD_static_malloc>
  if (hcdc == NULL)
 800e826:	4605      	mov	r5, r0
 800e828:	2800      	cmp	r0, #0
 800e82a:	d05b      	beq.n	800e8e4 <USBD_CDC_Init+0xcc>
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e82c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800e830:	2100      	movs	r1, #0
 800e832:	f002 fa4d 	bl	8010cd0 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e836:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 800e83a:	33b0      	adds	r3, #176	; 0xb0
 800e83c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e840:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e842:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e846:	b3cb      	cbz	r3, 800e8bc <USBD_CDC_Init+0xa4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e848:	2340      	movs	r3, #64	; 0x40
 800e84a:	2202      	movs	r2, #2
 800e84c:	2181      	movs	r1, #129	; 0x81
 800e84e:	4620      	mov	r0, r4
 800e850:	f001 f854 	bl	800f8fc <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e854:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e856:	2340      	movs	r3, #64	; 0x40
 800e858:	4631      	mov	r1, r6
 800e85a:	2202      	movs	r2, #2
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e85c:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e85e:	4620      	mov	r0, r4
 800e860:	f001 f84c 	bl	800f8fc <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e864:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e866:	2203      	movs	r2, #3
 800e868:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e86a:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e86e:	4620      	mov	r0, r4
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e870:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e874:	2308      	movs	r3, #8
 800e876:	f001 f841 	bl	800f8fc <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e87a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  hcdc->RxBuffer = NULL;
 800e87e:	2600      	movs	r6, #0
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e880:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e884:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e888:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e88c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
  hcdc->RxBuffer = NULL;
 800e890:	f8c5 6204 	str.w	r6, [r5, #516]	; 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	4798      	blx	r3
  if (hcdc->RxBuffer == NULL)
 800e898:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  hcdc->TxState = 0U;
 800e89c:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800e8a0:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
  if (hcdc->RxBuffer == NULL)
 800e8a4:	b33a      	cbz	r2, 800e8f6 <USBD_CDC_Init+0xde>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e8a6:	7c27      	ldrb	r7, [r4, #16]
 800e8a8:	b99f      	cbnz	r7, 800e8d2 <USBD_CDC_Init+0xba>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e8aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8ae:	4641      	mov	r1, r8
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	f001 f88f 	bl	800f9d4 <USBD_LL_PrepareReceive>
}
 800e8b6:	4638      	mov	r0, r7
 800e8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e8bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8c0:	2202      	movs	r2, #2
 800e8c2:	2181      	movs	r1, #129	; 0x81
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	f001 f819 	bl	800f8fc <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e8ca:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e8cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8d0:	e7c2      	b.n	800e858 <USBD_CDC_Init+0x40>
  return (uint8_t)USBD_OK;
 800e8d2:	4637      	mov	r7, r6
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e8d4:	2340      	movs	r3, #64	; 0x40
 800e8d6:	4641      	mov	r1, r8
 800e8d8:	4620      	mov	r0, r4
 800e8da:	f001 f87b 	bl	800f9d4 <USBD_LL_PrepareReceive>
}
 800e8de:	4638      	mov	r0, r7
 800e8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e8e4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
    return (uint8_t)USBD_EMEM;
 800e8e8:	2702      	movs	r7, #2
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e8ea:	33b0      	adds	r3, #176	; 0xb0
 800e8ec:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
}
 800e8f0:	4638      	mov	r0, r7
 800e8f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 800e8f6:	2702      	movs	r7, #2
 800e8f8:	e7dd      	b.n	800e8b6 <USBD_CDC_Init+0x9e>
 800e8fa:	bf00      	nop

0800e8fc <USBD_CDC_GetOtherSpeedCfgDesc>:
 800e8fc:	b570      	push	{r4, r5, r6, lr}
 800e8fe:	2182      	movs	r1, #130	; 0x82
 800e900:	4606      	mov	r6, r0
 800e902:	480f      	ldr	r0, [pc, #60]	; (800e940 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800e904:	f000 fa2e 	bl	800ed64 <USBD_GetEpDesc>
 800e908:	2101      	movs	r1, #1
 800e90a:	4605      	mov	r5, r0
 800e90c:	480c      	ldr	r0, [pc, #48]	; (800e940 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800e90e:	f000 fa29 	bl	800ed64 <USBD_GetEpDesc>
 800e912:	2181      	movs	r1, #129	; 0x81
 800e914:	4604      	mov	r4, r0
 800e916:	480a      	ldr	r0, [pc, #40]	; (800e940 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800e918:	f000 fa24 	bl	800ed64 <USBD_GetEpDesc>
 800e91c:	b10d      	cbz	r5, 800e922 <USBD_CDC_GetOtherSpeedCfgDesc+0x26>
 800e91e:	2210      	movs	r2, #16
 800e920:	71aa      	strb	r2, [r5, #6]
 800e922:	b11c      	cbz	r4, 800e92c <USBD_CDC_GetOtherSpeedCfgDesc+0x30>
 800e924:	2100      	movs	r1, #0
 800e926:	2240      	movs	r2, #64	; 0x40
 800e928:	7161      	strb	r1, [r4, #5]
 800e92a:	7122      	strb	r2, [r4, #4]
 800e92c:	b118      	cbz	r0, 800e936 <USBD_CDC_GetOtherSpeedCfgDesc+0x3a>
 800e92e:	2100      	movs	r1, #0
 800e930:	2240      	movs	r2, #64	; 0x40
 800e932:	7141      	strb	r1, [r0, #5]
 800e934:	7102      	strb	r2, [r0, #4]
 800e936:	2343      	movs	r3, #67	; 0x43
 800e938:	4801      	ldr	r0, [pc, #4]	; (800e940 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800e93a:	8033      	strh	r3, [r6, #0]
 800e93c:	bd70      	pop	{r4, r5, r6, pc}
 800e93e:	bf00      	nop
 800e940:	24000358 	.word	0x24000358

0800e944 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e944:	4603      	mov	r3, r0
  if (fops == NULL)
 800e946:	b139      	cbz	r1, 800e958 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 800e948:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4

  return (uint8_t)USBD_OK;
 800e94c:	2000      	movs	r0, #0
  pdev->pUserData[pdev->classId] = fops;
 800e94e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e952:	f8c3 12c4 	str.w	r1, [r3, #708]	; 0x2c4
  return (uint8_t)USBD_OK;
 800e956:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800e958:	2003      	movs	r0, #3
}
 800e95a:	4770      	bx	lr

0800e95c <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e95c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800e960:	33b0      	adds	r3, #176	; 0xb0
 800e962:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e966:	b12b      	cbz	r3, 800e974 <USBD_CDC_SetTxBuffer+0x18>
  }

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
 800e968:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800e96a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e96e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  return (uint8_t)USBD_OK;
 800e972:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800e974:	2003      	movs	r0, #3
}
 800e976:	4770      	bx	lr

0800e978 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e978:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800e97c:	33b0      	adds	r3, #176	; 0xb0
 800e97e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 800e982:	b11b      	cbz	r3, 800e98c <USBD_CDC_SetRxBuffer+0x14>
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
 800e984:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800e986:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  return (uint8_t)USBD_OK;
 800e98a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800e98c:	2003      	movs	r0, #3
}
 800e98e:	4770      	bx	lr

0800e990 <USBD_CDC_TransmitPacket>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e990:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800e994:	33b0      	adds	r3, #176	; 0xb0
 800e996:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e99a:	b192      	cbz	r2, 800e9c2 <USBD_CDC_TransmitPacket+0x32>
{
 800e99c:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800e99e:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800e9a2:	b10c      	cbz	r4, 800e9a8 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e9a4:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800e9a6:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 800e9a8:	2301      	movs	r3, #1
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e9aa:	2181      	movs	r1, #129	; 0x81
    hcdc->TxState = 1U;
 800e9ac:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e9b0:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e9b4:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e9b8:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e9ba:	f000 fffd 	bl	800f9b8 <USBD_LL_Transmit>
    ret = USBD_OK;
 800e9be:	4620      	mov	r0, r4
}
 800e9c0:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800e9c2:	2003      	movs	r0, #3
}
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop

0800e9c8 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e9c8:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 800e9cc:	32b0      	adds	r2, #176	; 0xb0
 800e9ce:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
{
 800e9d2:	b510      	push	{r4, lr}
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e9d4:	b19a      	cbz	r2, 800e9fe <USBD_CDC_ReceivePacket+0x36>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9d6:	7c04      	ldrb	r4, [r0, #16]
 800e9d8:	b144      	cbz	r4, 800e9ec <USBD_CDC_ReceivePacket+0x24>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e9da:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e9dc:	2340      	movs	r3, #64	; 0x40
 800e9de:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800e9e2:	2101      	movs	r1, #1
 800e9e4:	f000 fff6 	bl	800f9d4 <USBD_LL_PrepareReceive>
}
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e9ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e9f0:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800e9f4:	2101      	movs	r1, #1
 800e9f6:	f000 ffed 	bl	800f9d4 <USBD_LL_PrepareReceive>
}
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800e9fe:	2403      	movs	r4, #3
}
 800ea00:	4620      	mov	r0, r4
 800ea02:	bd10      	pop	{r4, pc}

0800ea04 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ea04:	b178      	cbz	r0, 800ea26 <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ea06:	2300      	movs	r3, #0
 800ea08:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ea0c:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ea10:	f8c0 32d0 	str.w	r3, [r0, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ea14:	b109      	cbz	r1, 800ea1a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800ea16:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea1a:	2301      	movs	r3, #1
  pdev->id = id;
 800ea1c:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea1e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ea22:	f000 bf1d 	b.w	800f860 <USBD_LL_Init>

  return ret;
}
 800ea26:	2003      	movs	r0, #3
 800ea28:	4770      	bx	lr
 800ea2a:	bf00      	nop

0800ea2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ea2c:	b510      	push	{r4, lr}
  uint16_t len = 0U;
 800ea2e:	2300      	movs	r3, #0
{
 800ea30:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800ea32:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800ea36:	b189      	cbz	r1, 800ea5c <USBD_RegisterClass+0x30>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ea38:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800ea3a:	4604      	mov	r4, r0
  pdev->pClass[0] = pclass;
 800ea3c:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ea40:	b123      	cbz	r3, 800ea4c <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ea42:	f10d 0006 	add.w	r0, sp, #6
 800ea46:	4798      	blx	r3
 800ea48:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ea4c:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8

  return USBD_OK;
 800ea50:	2000      	movs	r0, #0
  pdev->NumClasses ++;
 800ea52:	3301      	adds	r3, #1
 800ea54:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8
}
 800ea58:	b002      	add	sp, #8
 800ea5a:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800ea5c:	2003      	movs	r0, #3
}
 800ea5e:	b002      	add	sp, #8
 800ea60:	bd10      	pop	{r4, pc}
 800ea62:	bf00      	nop

0800ea64 <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ea64:	f000 bf3c 	b.w	800f8e0 <USBD_LL_Start>

0800ea68 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ea68:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ea6c:	b10b      	cbz	r3, 800ea72 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	4770      	bx	lr
 800ea76:	bf00      	nop

0800ea78 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea78:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ea7a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 800ea82:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800ea84:	bf18      	it	ne
 800ea86:	2003      	movne	r0, #3
 800ea88:	bd08      	pop	{r3, pc}
 800ea8a:	bf00      	nop

0800ea8c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ea8c:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ea8e:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800ea92:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ea94:	4628      	mov	r0, r5
 800ea96:	f000 fc1d 	bl	800f2d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;
 800ea9a:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 800ea9e:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800eaa2:	2201      	movs	r2, #1
  pdev->ep0_data_len = pdev->request.wLength;
 800eaa4:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 800eaa8:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 800eaac:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d009      	beq.n	800eac8 <USBD_LL_SetupStage+0x3c>
 800eab4:	2b02      	cmp	r3, #2
 800eab6:	d013      	beq.n	800eae0 <USBD_LL_SetupStage+0x54>
 800eab8:	b163      	cbz	r3, 800ead4 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eaba:	4620      	mov	r0, r4
 800eabc:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800eac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eac4:	f000 bf3a 	b.w	800f93c <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eac8:	4629      	mov	r1, r5
 800eaca:	4620      	mov	r0, r4
}
 800eacc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ead0:	f000 bb0e 	b.w	800f0f0 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ead4:	4629      	mov	r1, r5
 800ead6:	4620      	mov	r0, r4
}
 800ead8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800eadc:	f000 b958 	b.w	800ed90 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eae0:	4629      	mov	r1, r5
 800eae2:	4620      	mov	r0, r4
}
 800eae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eae8:	f000 bb44 	b.w	800f174 <USBD_StdEPReq>

0800eaec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800eaec:	b570      	push	{r4, r5, r6, lr}
 800eaee:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 800eaf0:	b931      	cbnz	r1, 800eb00 <USBD_LL_DataOutStage+0x14>
 800eaf2:	460b      	mov	r3, r1
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800eaf4:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
 800eaf8:	2903      	cmp	r1, #3
 800eafa:	d010      	beq.n	800eb1e <USBD_LL_DataOutStage+0x32>
      }
    }
  }

  return USBD_OK;
}
 800eafc:	2000      	movs	r0, #0
 800eafe:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb00:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800eb04:	2b03      	cmp	r3, #3
 800eb06:	d1f9      	bne.n	800eafc <USBD_LL_DataOutStage+0x10>
        if (pdev->pClass[idx]->DataOut != NULL)
 800eb08:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800eb0c:	699b      	ldr	r3, [r3, #24]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d0f4      	beq.n	800eafc <USBD_LL_DataOutStage+0x10>
          pdev->classId = idx;
 800eb12:	2200      	movs	r2, #0
}
 800eb14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 800eb18:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800eb1c:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800eb1e:	e9d0 1557 	ldrd	r1, r5, [r0, #348]	; 0x15c
 800eb22:	42a9      	cmp	r1, r5
 800eb24:	d808      	bhi.n	800eb38 <USBD_LL_DataOutStage+0x4c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb26:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800eb2a:	2a03      	cmp	r2, #3
 800eb2c:	d00f      	beq.n	800eb4e <USBD_LL_DataOutStage+0x62>
        (void)USBD_CtlSendStatus(pdev);
 800eb2e:	4620      	mov	r0, r4
 800eb30:	f000 fc42 	bl	800f3b8 <USBD_CtlSendStatus>
}
 800eb34:	2000      	movs	r0, #0
 800eb36:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800eb38:	1b4b      	subs	r3, r1, r5
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800eb3a:	4611      	mov	r1, r2
 800eb3c:	462a      	mov	r2, r5
 800eb3e:	429d      	cmp	r5, r3
        pep->rem_length -= pep->maxpacket;
 800eb40:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800eb44:	bf28      	it	cs
 800eb46:	461a      	movcs	r2, r3
 800eb48:	f000 fc2c 	bl	800f3a4 <USBD_CtlContinueRx>
 800eb4c:	e7d6      	b.n	800eafc <USBD_LL_DataOutStage+0x10>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800eb4e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800eb52:	6912      	ldr	r2, [r2, #16]
 800eb54:	2a00      	cmp	r2, #0
 800eb56:	d0ea      	beq.n	800eb2e <USBD_LL_DataOutStage+0x42>
              pdev->classId = idx;
 800eb58:	f8c0 32d4 	str.w	r3, [r0, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800eb5c:	4790      	blx	r2
 800eb5e:	e7e6      	b.n	800eb2e <USBD_LL_DataOutStage+0x42>

0800eb60 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eb60:	b570      	push	{r4, r5, r6, lr}
 800eb62:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800eb64:	b959      	cbnz	r1, 800eb7e <USBD_LL_DataInStage+0x1e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800eb66:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800eb6a:	2b02      	cmp	r3, #2
 800eb6c:	d016      	beq.n	800eb9c <USBD_LL_DataInStage+0x3c>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800eb6e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800eb72:	b113      	cbz	r3, 800eb7a <USBD_LL_DataInStage+0x1a>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800eb74:	2300      	movs	r3, #0
 800eb76:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 800eb7a:	2000      	movs	r0, #0
 800eb7c:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb7e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800eb82:	2b03      	cmp	r3, #3
 800eb84:	d1f9      	bne.n	800eb7a <USBD_LL_DataInStage+0x1a>
        if (pdev->pClass[idx]->DataIn != NULL)
 800eb86:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800eb8a:	695b      	ldr	r3, [r3, #20]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d0f4      	beq.n	800eb7a <USBD_LL_DataInStage+0x1a>
          pdev->classId = idx;
 800eb90:	2200      	movs	r2, #0
}
 800eb92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 800eb96:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800eb9a:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800eb9c:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 800eba0:	460d      	mov	r5, r1
 800eba2:	42b3      	cmp	r3, r6
 800eba4:	d810      	bhi.n	800ebc8 <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 800eba6:	d01c      	beq.n	800ebe2 <USBD_LL_DataInStage+0x82>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eba8:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800ebac:	2b03      	cmp	r3, #3
 800ebae:	d02b      	beq.n	800ec08 <USBD_LL_DataInStage+0xa8>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ebb0:	2180      	movs	r1, #128	; 0x80
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	f000 fec2 	bl	800f93c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ebb8:	4620      	mov	r0, r4
 800ebba:	f000 fc09 	bl	800f3d0 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode != 0U)
 800ebbe:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d0d9      	beq.n	800eb7a <USBD_LL_DataInStage+0x1a>
 800ebc6:	e7d5      	b.n	800eb74 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800ebc8:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ebca:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800ebcc:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ebce:	461a      	mov	r2, r3
 800ebd0:	f000 fbd0 	bl	800f374 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ebd4:	462b      	mov	r3, r5
 800ebd6:	462a      	mov	r2, r5
 800ebd8:	4629      	mov	r1, r5
 800ebda:	4620      	mov	r0, r4
 800ebdc:	f000 fefa 	bl	800f9d4 <USBD_LL_PrepareReceive>
 800ebe0:	e7c5      	b.n	800eb6e <USBD_LL_DataInStage+0xe>
            (pep->total_length >= pep->maxpacket) &&
 800ebe2:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d8df      	bhi.n	800eba8 <USBD_LL_DataInStage+0x48>
            (pep->total_length >= pep->maxpacket) &&
 800ebe8:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d2db      	bcs.n	800eba8 <USBD_LL_DataInStage+0x48>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ebf0:	460a      	mov	r2, r1
 800ebf2:	f000 fbbf 	bl	800f374 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ebf6:	462b      	mov	r3, r5
 800ebf8:	462a      	mov	r2, r5
 800ebfa:	4629      	mov	r1, r5
 800ebfc:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 800ebfe:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec02:	f000 fee7 	bl	800f9d4 <USBD_LL_PrepareReceive>
 800ec06:	e7b2      	b.n	800eb6e <USBD_LL_DataInStage+0xe>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ec08:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800ec0c:	68db      	ldr	r3, [r3, #12]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d0ce      	beq.n	800ebb0 <USBD_LL_DataInStage+0x50>
              pdev->classId = 0U;
 800ec12:	2200      	movs	r2, #0
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ec14:	4620      	mov	r0, r4
              pdev->classId = 0U;
 800ec16:	f8c4 22d4 	str.w	r2, [r4, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ec1a:	4798      	blx	r3
 800ec1c:	e7c8      	b.n	800ebb0 <USBD_LL_DataInStage+0x50>
 800ec1e:	bf00      	nop

0800ec20 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ec20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800ec22:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec24:	2201      	movs	r2, #1
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ec26:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
{
 800ec2a:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec2c:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 800ec30:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800ec32:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 800ec36:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ec3a:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
  if (pdev->pClass[0] != NULL)
 800ec3e:	b11b      	cbz	r3, 800ec48 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	b10b      	cbz	r3, 800ec48 <USBD_LL_Reset+0x28>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ec44:	4798      	blx	r3
 800ec46:	b9b0      	cbnz	r0, 800ec76 <USBD_LL_Reset+0x56>
  USBD_StatusTypeDef ret = USBD_OK;
 800ec48:	2700      	movs	r7, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec4a:	2340      	movs	r3, #64	; 0x40
 800ec4c:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ec4e:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec50:	4620      	mov	r0, r4

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ec52:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec54:	4611      	mov	r1, r2
 800ec56:	f000 fe51 	bl	800f8fc <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	462b      	mov	r3, r5
 800ec5e:	2180      	movs	r1, #128	; 0x80
 800ec60:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ec62:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ec66:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec6a:	f000 fe47 	bl	800f8fc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return ret;
}
 800ec6e:	4638      	mov	r0, r7
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ec70:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ec72:	6225      	str	r5, [r4, #32]
}
 800ec74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = USBD_FAIL;
 800ec76:	2703      	movs	r7, #3
 800ec78:	e7e7      	b.n	800ec4a <USBD_LL_Reset+0x2a>
 800ec7a:	bf00      	nop

0800ec7c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ec7c:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 800ec7e:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800ec80:	7419      	strb	r1, [r3, #16]
}
 800ec82:	4770      	bx	lr

0800ec84 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ec84:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
{
 800ec88:	4603      	mov	r3, r0
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ec8a:	2a04      	cmp	r2, #4
 800ec8c:	d004      	beq.n	800ec98 <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ec8e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800ec92:	b2d2      	uxtb	r2, r2
 800ec94:	f880 229d 	strb.w	r2, [r0, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ec98:	2204      	movs	r2, #4

  return USBD_OK;
}
 800ec9a:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ec9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
 800eca0:	4770      	bx	lr
 800eca2:	bf00      	nop

0800eca4 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eca4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800eca8:	2b04      	cmp	r3, #4
 800ecaa:	d104      	bne.n	800ecb6 <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ecac:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800ecb0:	b2db      	uxtb	r3, r3
 800ecb2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800ecb6:	2000      	movs	r0, #0
 800ecb8:	4770      	bx	lr
 800ecba:	bf00      	nop

0800ecbc <USBD_LL_SOF>:
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecbc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800ecc0:	2a03      	cmp	r2, #3
 800ecc2:	d001      	beq.n	800ecc8 <USBD_LL_SOF+0xc>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 800ecc4:	2000      	movs	r0, #0
 800ecc6:	4770      	bx	lr
{
 800ecc8:	b508      	push	{r3, lr}
    if (pdev->pClass[0] != NULL)
 800ecca:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ecce:	b113      	cbz	r3, 800ecd6 <USBD_LL_SOF+0x1a>
      if (pdev->pClass[0]->SOF != NULL)
 800ecd0:	69db      	ldr	r3, [r3, #28]
 800ecd2:	b103      	cbz	r3, 800ecd6 <USBD_LL_SOF+0x1a>
        (void)pdev->pClass[0]->SOF(pdev);
 800ecd4:	4798      	blx	r3
}
 800ecd6:	2000      	movs	r0, #0
 800ecd8:	bd08      	pop	{r3, pc}
 800ecda:	bf00      	nop

0800ecdc <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 800ecdc:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 800ece0:	32ae      	adds	r2, #174	; 0xae
 800ece2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800ece6:	b15a      	cbz	r2, 800ed00 <USBD_LL_IsoINIncomplete+0x24>
{
 800ece8:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ecee:	2b03      	cmp	r3, #3
 800ecf0:	d001      	beq.n	800ecf6 <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800ecf2:	2000      	movs	r0, #0
}
 800ecf4:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ecf6:	6a13      	ldr	r3, [r2, #32]
 800ecf8:	b123      	cbz	r3, 800ed04 <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ecfa:	4798      	blx	r3
  return USBD_OK;
 800ecfc:	2000      	movs	r0, #0
}
 800ecfe:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800ed00:	2003      	movs	r0, #3
}
 800ed02:	4770      	bx	lr
  return USBD_OK;
 800ed04:	4618      	mov	r0, r3
}
 800ed06:	bd08      	pop	{r3, pc}

0800ed08 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 800ed08:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 800ed0c:	32ae      	adds	r2, #174	; 0xae
 800ed0e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800ed12:	b15a      	cbz	r2, 800ed2c <USBD_LL_IsoOUTIncomplete+0x24>
{
 800ed14:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed16:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ed1a:	2b03      	cmp	r3, #3
 800ed1c:	d001      	beq.n	800ed22 <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800ed1e:	2000      	movs	r0, #0
}
 800ed20:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ed22:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800ed24:	b123      	cbz	r3, 800ed30 <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ed26:	4798      	blx	r3
  return USBD_OK;
 800ed28:	2000      	movs	r0, #0
}
 800ed2a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800ed2c:	2003      	movs	r0, #3
}
 800ed2e:	4770      	bx	lr
  return USBD_OK;
 800ed30:	4618      	mov	r0, r3
}
 800ed32:	bd08      	pop	{r3, pc}

0800ed34 <USBD_LL_DevConnected>:
 800ed34:	2000      	movs	r0, #0
 800ed36:	4770      	bx	lr

0800ed38 <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed38:	2101      	movs	r1, #1
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ed3a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed3e:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass[0] != NULL)
 800ed42:	b142      	cbz	r2, 800ed56 <USBD_LL_DevDisconnected+0x1e>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ed44:	6852      	ldr	r2, [r2, #4]
 800ed46:	7901      	ldrb	r1, [r0, #4]
{
 800ed48:	b508      	push	{r3, lr}
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ed4a:	4790      	blx	r2
 800ed4c:	b908      	cbnz	r0, 800ed52 <USBD_LL_DevDisconnected+0x1a>
  USBD_StatusTypeDef   ret = USBD_OK;
 800ed4e:	2000      	movs	r0, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800ed50:	bd08      	pop	{r3, pc}
      ret = USBD_FAIL;
 800ed52:	2003      	movs	r0, #3
}
 800ed54:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 800ed56:	2000      	movs	r0, #0
}
 800ed58:	4770      	bx	lr
 800ed5a:	bf00      	nop

0800ed5c <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800ed5c:	2000      	movs	r0, #0
 800ed5e:	4770      	bx	lr

0800ed60 <USBD_CoreFindEP>:
 800ed60:	2000      	movs	r0, #0
 800ed62:	4770      	bx	lr

0800ed64 <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ed64:	7802      	ldrb	r2, [r0, #0]
 800ed66:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 800ed6a:	b293      	uxth	r3, r2
 800ed6c:	4594      	cmp	ip, r2
 800ed6e:	d803      	bhi.n	800ed78 <USBD_GetEpDesc+0x14>
 800ed70:	e00c      	b.n	800ed8c <USBD_GetEpDesc+0x28>
  {
    ptr = desc->bLength;

    while (ptr < desc->wTotalLength)
 800ed72:	459c      	cmp	ip, r3
 800ed74:	d90a      	bls.n	800ed8c <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800ed76:	7802      	ldrb	r2, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ed78:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 800ed7a:	4413      	add	r3, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ed7c:	7842      	ldrb	r2, [r0, #1]
  *ptr += pnext->bLength;
 800ed7e:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ed80:	2a05      	cmp	r2, #5
 800ed82:	d1f6      	bne.n	800ed72 <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800ed84:	7882      	ldrb	r2, [r0, #2]
 800ed86:	428a      	cmp	r2, r1
 800ed88:	d1f3      	bne.n	800ed72 <USBD_GetEpDesc+0xe>
}
 800ed8a:	4770      	bx	lr
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ed8c:	2000      	movs	r0, #0
}
 800ed8e:	4770      	bx	lr

0800ed90 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed92:	780c      	ldrb	r4, [r1, #0]
 800ed94:	b083      	sub	sp, #12
 800ed96:	460e      	mov	r6, r1
 800ed98:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed9a:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800ed9e:	2c20      	cmp	r4, #32
 800eda0:	d00e      	beq.n	800edc0 <USBD_StdDevReq+0x30>
 800eda2:	2c40      	cmp	r4, #64	; 0x40
 800eda4:	d00c      	beq.n	800edc0 <USBD_StdDevReq+0x30>
 800eda6:	b1bc      	cbz	r4, 800edd8 <USBD_StdDevReq+0x48>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eda8:	2180      	movs	r1, #128	; 0x80
 800edaa:	4628      	mov	r0, r5
 800edac:	f000 fdc6 	bl	800f93c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800edb0:	2100      	movs	r1, #0
 800edb2:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800edb4:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800edb6:	f000 fdc1 	bl	800f93c <USBD_LL_StallEP>
}
 800edba:	4620      	mov	r0, r4
 800edbc:	b003      	add	sp, #12
 800edbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800edc0:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
 800edc4:	4631      	mov	r1, r6
 800edc6:	4628      	mov	r0, r5
 800edc8:	33ae      	adds	r3, #174	; 0xae
 800edca:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800edce:	689b      	ldr	r3, [r3, #8]
}
 800edd0:	b003      	add	sp, #12
 800edd2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800edd6:	4718      	bx	r3
      switch (req->bRequest)
 800edd8:	784b      	ldrb	r3, [r1, #1]
 800edda:	2b09      	cmp	r3, #9
 800eddc:	d8e4      	bhi.n	800eda8 <USBD_StdDevReq+0x18>
 800edde:	a201      	add	r2, pc, #4	; (adr r2, 800ede4 <USBD_StdDevReq+0x54>)
 800ede0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ede4:	0800ee45 	.word	0x0800ee45
 800ede8:	0800ee73 	.word	0x0800ee73
 800edec:	0800eda9 	.word	0x0800eda9
 800edf0:	0800ee91 	.word	0x0800ee91
 800edf4:	0800eda9 	.word	0x0800eda9
 800edf8:	0800eeb3 	.word	0x0800eeb3
 800edfc:	0800eeeb 	.word	0x0800eeeb
 800ee00:	0800eda9 	.word	0x0800eda9
 800ee04:	0800ef1d 	.word	0x0800ef1d
 800ee08:	0800ee0d 	.word	0x0800ee0d
  cfgidx = (uint8_t)(req->wValue);
 800ee0c:	7889      	ldrb	r1, [r1, #2]
 800ee0e:	4eb3      	ldr	r6, [pc, #716]	; (800f0dc <USBD_StdDevReq+0x34c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ee10:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800ee12:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ee14:	f200 8150 	bhi.w	800f0b8 <USBD_StdDevReq+0x328>
  switch (pdev->dev_state)
 800ee18:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ee1c:	2b02      	cmp	r3, #2
 800ee1e:	b2df      	uxtb	r7, r3
 800ee20:	f000 810e 	beq.w	800f040 <USBD_StdDevReq+0x2b0>
 800ee24:	2f03      	cmp	r7, #3
 800ee26:	f000 811f 	beq.w	800f068 <USBD_StdDevReq+0x2d8>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee2a:	2180      	movs	r1, #128	; 0x80
      ret = USBD_FAIL;
 800ee2c:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee2e:	f000 fd85 	bl	800f93c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ee32:	2100      	movs	r1, #0
 800ee34:	4628      	mov	r0, r5
 800ee36:	f000 fd81 	bl	800f93c <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee3a:	7831      	ldrb	r1, [r6, #0]
 800ee3c:	4628      	mov	r0, r5
 800ee3e:	f7ff fe1b 	bl	800ea78 <USBD_ClrClassConfig>
      break;
 800ee42:	e7ba      	b.n	800edba <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800ee44:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800ee48:	3a01      	subs	r2, #1
 800ee4a:	2a02      	cmp	r2, #2
 800ee4c:	d826      	bhi.n	800ee9c <USBD_StdDevReq+0x10c>
      if (req->wLength != 0x2U)
 800ee4e:	88ca      	ldrh	r2, [r1, #6]
 800ee50:	2a02      	cmp	r2, #2
 800ee52:	d123      	bne.n	800ee9c <USBD_StdDevReq+0x10c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ee54:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup != 0U)
 800ee56:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ee5a:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800ee5c:	b10a      	cbz	r2, 800ee62 <USBD_StdDevReq+0xd2>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ee5e:	2203      	movs	r2, #3
 800ee60:	60c2      	str	r2, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ee62:	2202      	movs	r2, #2
 800ee64:	f105 010c 	add.w	r1, r5, #12
 800ee68:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800ee6a:	461c      	mov	r4, r3
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ee6c:	f000 fa74 	bl	800f358 <USBD_CtlSendData>
      break;
 800ee70:	e7a3      	b.n	800edba <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800ee72:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ee76:	3b01      	subs	r3, #1
 800ee78:	2b02      	cmp	r3, #2
 800ee7a:	d80f      	bhi.n	800ee9c <USBD_StdDevReq+0x10c>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ee7c:	884b      	ldrh	r3, [r1, #2]
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d19b      	bne.n	800edba <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800ee82:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 800ee84:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 800ee86:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ee8a:	f000 fa95 	bl	800f3b8 <USBD_CtlSendStatus>
 800ee8e:	e794      	b.n	800edba <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ee90:	884b      	ldrh	r3, [r1, #2]
 800ee92:	2b01      	cmp	r3, #1
 800ee94:	d0f6      	beq.n	800ee84 <USBD_StdDevReq+0xf4>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ee96:	2b02      	cmp	r3, #2
 800ee98:	f000 8107 	beq.w	800f0aa <USBD_StdDevReq+0x31a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee9c:	2180      	movs	r1, #128	; 0x80
 800ee9e:	4628      	mov	r0, r5
 800eea0:	f000 fd4c 	bl	800f93c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eea4:	2100      	movs	r1, #0
 800eea6:	4628      	mov	r0, r5
 800eea8:	f000 fd48 	bl	800f93c <USBD_LL_StallEP>
}
 800eeac:	4620      	mov	r0, r4
 800eeae:	b003      	add	sp, #12
 800eeb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eeb2:	888b      	ldrh	r3, [r1, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d1f1      	bne.n	800ee9c <USBD_StdDevReq+0x10c>
 800eeb8:	88cb      	ldrh	r3, [r1, #6]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d1ee      	bne.n	800ee9c <USBD_StdDevReq+0x10c>
 800eebe:	884e      	ldrh	r6, [r1, #2]
 800eec0:	2e7f      	cmp	r6, #127	; 0x7f
 800eec2:	d8eb      	bhi.n	800ee9c <USBD_StdDevReq+0x10c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eec4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800eec8:	2b03      	cmp	r3, #3
 800eeca:	d0e7      	beq.n	800ee9c <USBD_StdDevReq+0x10c>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eecc:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800eece:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800eed2:	f000 fd63 	bl	800f99c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800eed6:	4628      	mov	r0, r5
 800eed8:	f000 fa6e 	bl	800f3b8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800eedc:	2e00      	cmp	r6, #0
 800eede:	f040 80e0 	bne.w	800f0a2 <USBD_StdDevReq+0x312>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800eee2:	2301      	movs	r3, #1
 800eee4:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800eee8:	e767      	b.n	800edba <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 800eeea:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 800eeec:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800eeee:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800eef2:	0a13      	lsrs	r3, r2, #8
 800eef4:	3b01      	subs	r3, #1
 800eef6:	2b06      	cmp	r3, #6
 800eef8:	d8d0      	bhi.n	800ee9c <USBD_StdDevReq+0x10c>
 800eefa:	a101      	add	r1, pc, #4	; (adr r1, 800ef00 <USBD_StdDevReq+0x170>)
 800eefc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef00:	0800efa9 	.word	0x0800efa9
 800ef04:	0800ef8f 	.word	0x0800ef8f
 800ef08:	0800efb9 	.word	0x0800efb9
 800ef0c:	0800ee9d 	.word	0x0800ee9d
 800ef10:	0800ee9d 	.word	0x0800ee9d
 800ef14:	0800ef7b 	.word	0x0800ef7b
 800ef18:	0800ef43 	.word	0x0800ef43
  if (req->wLength != 1U)
 800ef1c:	88ca      	ldrh	r2, [r1, #6]
 800ef1e:	2a01      	cmp	r2, #1
 800ef20:	d1bc      	bne.n	800ee9c <USBD_StdDevReq+0x10c>
    switch (pdev->dev_state)
 800ef22:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800ef26:	2902      	cmp	r1, #2
 800ef28:	b2cb      	uxtb	r3, r1
 800ef2a:	f200 8082 	bhi.w	800f032 <USBD_StdDevReq+0x2a2>
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	f43f af3a 	beq.w	800eda8 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800ef34:	4601      	mov	r1, r0
 800ef36:	2300      	movs	r3, #0
 800ef38:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ef3c:	f000 fa0c 	bl	800f358 <USBD_CtlSendData>
        break;
 800ef40:	e73b      	b.n	800edba <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef42:	7c03      	ldrb	r3, [r0, #16]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d1a9      	bne.n	800ee9c <USBD_StdDevReq+0x10c>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ef48:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ef4c:	f10d 0006 	add.w	r0, sp, #6
 800ef50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef52:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ef54:	2307      	movs	r3, #7
 800ef56:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 800ef58:	88f2      	ldrh	r2, [r6, #6]
 800ef5a:	2a00      	cmp	r2, #0
 800ef5c:	d065      	beq.n	800f02a <USBD_StdDevReq+0x29a>
    if (len != 0U)
 800ef5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d09a      	beq.n	800ee9c <USBD_StdDevReq+0x10c>
      len = MIN(len, req->wLength);
 800ef66:	429a      	cmp	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ef68:	4601      	mov	r1, r0
 800ef6a:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 800ef6c:	bf28      	it	cs
 800ef6e:	461a      	movcs	r2, r3
 800ef70:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ef74:	f000 f9f0 	bl	800f358 <USBD_CtlSendData>
 800ef78:	e71f      	b.n	800edba <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef7a:	7c03      	ldrb	r3, [r0, #16]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d18d      	bne.n	800ee9c <USBD_StdDevReq+0x10c>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ef80:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ef84:	f10d 0006 	add.w	r0, sp, #6
 800ef88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef8a:	4798      	blx	r3
  if (err != 0U)
 800ef8c:	e7e4      	b.n	800ef58 <USBD_StdDevReq+0x1c8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef8e:	7c03      	ldrb	r3, [r0, #16]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	f040 809a 	bne.w	800f0ca <USBD_StdDevReq+0x33a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ef96:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ef9a:	f10d 0006 	add.w	r0, sp, #6
 800ef9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efa0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800efa2:	2302      	movs	r3, #2
 800efa4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800efa6:	e7d7      	b.n	800ef58 <USBD_StdDevReq+0x1c8>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800efa8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800efac:	f10d 0106 	add.w	r1, sp, #6
 800efb0:	7c00      	ldrb	r0, [r0, #16]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4798      	blx	r3
  if (err != 0U)
 800efb6:	e7cf      	b.n	800ef58 <USBD_StdDevReq+0x1c8>
      switch ((uint8_t)(req->wValue))
 800efb8:	b2d2      	uxtb	r2, r2
 800efba:	2a05      	cmp	r2, #5
 800efbc:	f63f af6e 	bhi.w	800ee9c <USBD_StdDevReq+0x10c>
 800efc0:	e8df f002 	tbb	[pc, r2]
 800efc4:	141a2026 	.word	0x141a2026
 800efc8:	030e      	.short	0x030e
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800efca:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800efce:	699b      	ldr	r3, [r3, #24]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	f43f af63 	beq.w	800ee9c <USBD_StdDevReq+0x10c>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800efd6:	f10d 0106 	add.w	r1, sp, #6
 800efda:	7c28      	ldrb	r0, [r5, #16]
 800efdc:	4798      	blx	r3
  if (err != 0U)
 800efde:	e7bb      	b.n	800ef58 <USBD_StdDevReq+0x1c8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800efe0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800efe4:	695b      	ldr	r3, [r3, #20]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d1f5      	bne.n	800efd6 <USBD_StdDevReq+0x246>
 800efea:	e757      	b.n	800ee9c <USBD_StdDevReq+0x10c>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800efec:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800eff0:	691b      	ldr	r3, [r3, #16]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d1ef      	bne.n	800efd6 <USBD_StdDevReq+0x246>
 800eff6:	e751      	b.n	800ee9c <USBD_StdDevReq+0x10c>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eff8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800effc:	68db      	ldr	r3, [r3, #12]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d1e9      	bne.n	800efd6 <USBD_StdDevReq+0x246>
 800f002:	e74b      	b.n	800ee9c <USBD_StdDevReq+0x10c>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f004:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800f008:	689b      	ldr	r3, [r3, #8]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d1e3      	bne.n	800efd6 <USBD_StdDevReq+0x246>
 800f00e:	e745      	b.n	800ee9c <USBD_StdDevReq+0x10c>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f010:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800f014:	685b      	ldr	r3, [r3, #4]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d1dd      	bne.n	800efd6 <USBD_StdDevReq+0x246>
 800f01a:	e73f      	b.n	800ee9c <USBD_StdDevReq+0x10c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f01c:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800f01e:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f020:	460c      	mov	r4, r1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f022:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f026:	f7ff fd27 	bl	800ea78 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f02a:	4628      	mov	r0, r5
 800f02c:	f000 f9c4 	bl	800f3b8 <USBD_CtlSendStatus>
 800f030:	e6c3      	b.n	800edba <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 800f032:	2b03      	cmp	r3, #3
 800f034:	f47f aeb8 	bne.w	800eda8 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f038:	1d01      	adds	r1, r0, #4
 800f03a:	f000 f98d 	bl	800f358 <USBD_CtlSendData>
        break;
 800f03e:	e6bc      	b.n	800edba <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800f040:	2900      	cmp	r1, #0
 800f042:	d0f2      	beq.n	800f02a <USBD_StdDevReq+0x29a>
        pdev->dev_config = cfgidx;
 800f044:	2101      	movs	r1, #1
 800f046:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f048:	f7ff fd0e 	bl	800ea68 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800f04c:	4604      	mov	r4, r0
 800f04e:	2800      	cmp	r0, #0
 800f050:	d046      	beq.n	800f0e0 <USBD_StdDevReq+0x350>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f052:	2180      	movs	r1, #128	; 0x80
 800f054:	4628      	mov	r0, r5
 800f056:	f000 fc71 	bl	800f93c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f05a:	2100      	movs	r1, #0
 800f05c:	4628      	mov	r0, r5
 800f05e:	f000 fc6d 	bl	800f93c <USBD_LL_StallEP>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f062:	f885 729c 	strb.w	r7, [r5, #668]	; 0x29c
 800f066:	e6a8      	b.n	800edba <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 800f068:	2900      	cmp	r1, #0
 800f06a:	d0d7      	beq.n	800f01c <USBD_StdDevReq+0x28c>
      else if (cfgidx != pdev->dev_config)
 800f06c:	6841      	ldr	r1, [r0, #4]
 800f06e:	2901      	cmp	r1, #1
 800f070:	d0db      	beq.n	800f02a <USBD_StdDevReq+0x29a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f072:	b2c9      	uxtb	r1, r1
 800f074:	f7ff fd00 	bl	800ea78 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f078:	7831      	ldrb	r1, [r6, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f07a:	4628      	mov	r0, r5
        pdev->dev_config = cfgidx;
 800f07c:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f07e:	f7ff fcf3 	bl	800ea68 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800f082:	4606      	mov	r6, r0
 800f084:	2800      	cmp	r0, #0
 800f086:	d0d0      	beq.n	800f02a <USBD_StdDevReq+0x29a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f088:	2180      	movs	r1, #128	; 0x80
 800f08a:	4628      	mov	r0, r5
 800f08c:	f000 fc56 	bl	800f93c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f090:	2100      	movs	r1, #0
 800f092:	4628      	mov	r0, r5
 800f094:	4634      	mov	r4, r6
 800f096:	f000 fc51 	bl	800f93c <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f09a:	7929      	ldrb	r1, [r5, #4]
 800f09c:	4628      	mov	r0, r5
 800f09e:	f7ff fceb 	bl	800ea78 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f0a2:	2302      	movs	r3, #2
 800f0a4:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800f0a8:	e687      	b.n	800edba <USBD_StdDevReq+0x2a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f0aa:	888b      	ldrh	r3, [r1, #4]
 800f0ac:	0a1b      	lsrs	r3, r3, #8
 800f0ae:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f0b2:	f000 f981 	bl	800f3b8 <USBD_CtlSendStatus>
 800f0b6:	e680      	b.n	800edba <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f0b8:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 800f0ba:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f0bc:	f000 fc3e 	bl	800f93c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f0c0:	2100      	movs	r1, #0
 800f0c2:	4628      	mov	r0, r5
 800f0c4:	f000 fc3a 	bl	800f93c <USBD_LL_StallEP>
    return USBD_FAIL;
 800f0c8:	e677      	b.n	800edba <USBD_StdDevReq+0x2a>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f0ca:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800f0ce:	f10d 0006 	add.w	r0, sp, #6
 800f0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0d4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f0d6:	2302      	movs	r3, #2
 800f0d8:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800f0da:	e73d      	b.n	800ef58 <USBD_StdDevReq+0x1c8>
 800f0dc:	2400c9e0 	.word	0x2400c9e0
          (void)USBD_CtlSendStatus(pdev);
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	f000 f969 	bl	800f3b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f0e6:	2303      	movs	r3, #3
 800f0e8:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800f0ec:	e665      	b.n	800edba <USBD_StdDevReq+0x2a>
 800f0ee:	bf00      	nop

0800f0f0 <USBD_StdItfReq>:
{
 800f0f0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0f2:	780b      	ldrb	r3, [r1, #0]
{
 800f0f4:	460d      	mov	r5, r1
 800f0f6:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0f8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800f0fc:	2a40      	cmp	r2, #64	; 0x40
 800f0fe:	d00b      	beq.n	800f118 <USBD_StdItfReq+0x28>
 800f100:	065b      	lsls	r3, r3, #25
 800f102:	d509      	bpl.n	800f118 <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 800f104:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f106:	2180      	movs	r1, #128	; 0x80
 800f108:	f000 fc18 	bl	800f93c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f10c:	4620      	mov	r0, r4
 800f10e:	4629      	mov	r1, r5
 800f110:	f000 fc14 	bl	800f93c <USBD_LL_StallEP>
}
 800f114:	4628      	mov	r0, r5
 800f116:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800f118:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800f11c:	3b01      	subs	r3, #1
 800f11e:	2b02      	cmp	r3, #2
 800f120:	d802      	bhi.n	800f128 <USBD_StdItfReq+0x38>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f122:	7929      	ldrb	r1, [r5, #4]
 800f124:	2901      	cmp	r1, #1
 800f126:	d90a      	bls.n	800f13e <USBD_StdItfReq+0x4e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f128:	2180      	movs	r1, #128	; 0x80
 800f12a:	4620      	mov	r0, r4
 800f12c:	f000 fc06 	bl	800f93c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f130:	2100      	movs	r1, #0
 800f132:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800f134:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800f136:	f000 fc01 	bl	800f93c <USBD_LL_StallEP>
}
 800f13a:	4628      	mov	r0, r5
 800f13c:	bd38      	pop	{r3, r4, r5, pc}
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f13e:	4620      	mov	r0, r4
 800f140:	f7ff fe0c 	bl	800ed5c <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f144:	b990      	cbnz	r0, 800f16c <USBD_StdItfReq+0x7c>
              if (pdev->pClass[idx]->Setup != NULL)
 800f146:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800f14a:	689b      	ldr	r3, [r3, #8]
 800f14c:	b173      	cbz	r3, 800f16c <USBD_StdItfReq+0x7c>
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f14e:	4629      	mov	r1, r5
                pdev->classId = idx;
 800f150:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f154:	4620      	mov	r0, r4
 800f156:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f158:	88eb      	ldrh	r3, [r5, #6]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f15a:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d1d9      	bne.n	800f114 <USBD_StdItfReq+0x24>
 800f160:	2800      	cmp	r0, #0
 800f162:	d1d7      	bne.n	800f114 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 800f164:	4620      	mov	r0, r4
 800f166:	f000 f927 	bl	800f3b8 <USBD_CtlSendStatus>
 800f16a:	e7d3      	b.n	800f114 <USBD_StdItfReq+0x24>
              ret = USBD_FAIL;
 800f16c:	2503      	movs	r5, #3
}
 800f16e:	4628      	mov	r0, r5
 800f170:	bd38      	pop	{r3, r4, r5, pc}
 800f172:	bf00      	nop

0800f174 <USBD_StdEPReq>:
{
 800f174:	b530      	push	{r4, r5, lr}
 800f176:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 800f178:	888a      	ldrh	r2, [r1, #4]
{
 800f17a:	b083      	sub	sp, #12
 800f17c:	4605      	mov	r5, r0
  ep_addr = LOBYTE(req->wIndex);
 800f17e:	7823      	ldrb	r3, [r4, #0]
 800f180:	b2d1      	uxtb	r1, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f182:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f186:	2b20      	cmp	r3, #32
 800f188:	d01e      	beq.n	800f1c8 <USBD_StdEPReq+0x54>
 800f18a:	2b40      	cmp	r3, #64	; 0x40
 800f18c:	d01c      	beq.n	800f1c8 <USBD_StdEPReq+0x54>
 800f18e:	b36b      	cbz	r3, 800f1ec <USBD_StdEPReq+0x78>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f190:	2180      	movs	r1, #128	; 0x80
 800f192:	4628      	mov	r0, r5
 800f194:	f000 fbd2 	bl	800f93c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f198:	2100      	movs	r1, #0
 800f19a:	4628      	mov	r0, r5
 800f19c:	f000 fbce 	bl	800f93c <USBD_LL_StallEP>
}
 800f1a0:	2000      	movs	r0, #0
 800f1a2:	b003      	add	sp, #12
 800f1a4:	bd30      	pop	{r4, r5, pc}
          switch (pdev->dev_state)
 800f1a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800f1aa:	2b02      	cmp	r3, #2
 800f1ac:	b2da      	uxtb	r2, r3
 800f1ae:	d059      	beq.n	800f264 <USBD_StdEPReq+0xf0>
 800f1b0:	2a03      	cmp	r2, #3
 800f1b2:	d1ed      	bne.n	800f190 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f1b4:	8863      	ldrh	r3, [r4, #2]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d1f2      	bne.n	800f1a0 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 800f1ba:	064b      	lsls	r3, r1, #25
 800f1bc:	d17e      	bne.n	800f2bc <USBD_StdEPReq+0x148>
                (void)USBD_CtlSendStatus(pdev);
 800f1be:	4628      	mov	r0, r5
 800f1c0:	9101      	str	r1, [sp, #4]
 800f1c2:	f000 f8f9 	bl	800f3b8 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f1c6:	9901      	ldr	r1, [sp, #4]
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	f7ff fdc9 	bl	800ed60 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f1ce:	2800      	cmp	r0, #0
 800f1d0:	d1e6      	bne.n	800f1a0 <USBD_StdEPReq+0x2c>
                  if (pdev->pClass[idx]->Setup != NULL)
 800f1d2:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
                  pdev->classId = idx;
 800f1d6:	f8c5 02d4 	str.w	r0, [r5, #724]	; 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800f1da:	689b      	ldr	r3, [r3, #8]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d0df      	beq.n	800f1a0 <USBD_StdEPReq+0x2c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f1e0:	4621      	mov	r1, r4
 800f1e2:	4628      	mov	r0, r5
}
 800f1e4:	b003      	add	sp, #12
 800f1e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f1ea:	4718      	bx	r3
      switch (req->bRequest)
 800f1ec:	7863      	ldrb	r3, [r4, #1]
 800f1ee:	2b01      	cmp	r3, #1
 800f1f0:	d0d9      	beq.n	800f1a6 <USBD_StdEPReq+0x32>
 800f1f2:	2b03      	cmp	r3, #3
 800f1f4:	d024      	beq.n	800f240 <USBD_StdEPReq+0xcc>
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d1ca      	bne.n	800f190 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 800f1fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800f1fe:	2b02      	cmp	r3, #2
 800f200:	b2d8      	uxtb	r0, r3
 800f202:	d038      	beq.n	800f276 <USBD_StdEPReq+0x102>
 800f204:	2803      	cmp	r0, #3
 800f206:	d1c3      	bne.n	800f190 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f208:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800f20c:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f20e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f212:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800f216:	d43f      	bmi.n	800f298 <USBD_StdEPReq+0x124>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f218:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d0b7      	beq.n	800f190 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f220:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800f224:	2414      	movs	r4, #20
 800f226:	fb04 5403 	mla	r4, r4, r3, r5
 800f22a:	f504 74aa 	add.w	r4, r4, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d13e      	bne.n	800f2b0 <USBD_StdEPReq+0x13c>
                pep->status = 0x0001U;
 800f232:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f234:	2202      	movs	r2, #2
 800f236:	4621      	mov	r1, r4
 800f238:	4628      	mov	r0, r5
 800f23a:	f000 f88d 	bl	800f358 <USBD_CtlSendData>
              break;
 800f23e:	e7af      	b.n	800f1a0 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 800f240:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800f244:	2b02      	cmp	r3, #2
 800f246:	b2da      	uxtb	r2, r3
 800f248:	d00c      	beq.n	800f264 <USBD_StdEPReq+0xf0>
 800f24a:	2a03      	cmp	r2, #3
 800f24c:	d1a0      	bne.n	800f190 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f24e:	8863      	ldrh	r3, [r4, #2]
 800f250:	b923      	cbnz	r3, 800f25c <USBD_StdEPReq+0xe8>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f252:	0648      	lsls	r0, r1, #25
 800f254:	d002      	beq.n	800f25c <USBD_StdEPReq+0xe8>
 800f256:	88e3      	ldrh	r3, [r4, #6]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d036      	beq.n	800f2ca <USBD_StdEPReq+0x156>
              (void)USBD_CtlSendStatus(pdev);
 800f25c:	4628      	mov	r0, r5
 800f25e:	f000 f8ab 	bl	800f3b8 <USBD_CtlSendStatus>
              break;
 800f262:	e79d      	b.n	800f1a0 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f264:	064a      	lsls	r2, r1, #25
 800f266:	d093      	beq.n	800f190 <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f268:	f000 fb68 	bl	800f93c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f26c:	2180      	movs	r1, #128	; 0x80
 800f26e:	4628      	mov	r0, r5
 800f270:	f000 fb64 	bl	800f93c <USBD_LL_StallEP>
 800f274:	e794      	b.n	800f1a0 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f276:	0648      	lsls	r0, r1, #25
 800f278:	d18a      	bne.n	800f190 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f27a:	0611      	lsls	r1, r2, #24
              pep->status = 0x0000U;
 800f27c:	f04f 0300 	mov.w	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f280:	f04f 0202 	mov.w	r2, #2
 800f284:	4628      	mov	r0, r5
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f286:	bf4c      	ite	mi
 800f288:	f105 0114 	addmi.w	r1, r5, #20
 800f28c:	f505 71aa 	addpl.w	r1, r5, #340	; 0x154
              pep->status = 0x0000U;
 800f290:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f292:	f000 f861 	bl	800f358 <USBD_CtlSendData>
              break;
 800f296:	e783      	b.n	800f1a0 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f298:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	f43f af78 	beq.w	800f190 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2a0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800f2a4:	1c5c      	adds	r4, r3, #1
 800f2a6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800f2aa:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800f2ae:	e7be      	b.n	800f22e <USBD_StdEPReq+0xba>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f2b0:	4628      	mov	r0, r5
 800f2b2:	f000 fb5f 	bl	800f974 <USBD_LL_IsStallEP>
 800f2b6:	b130      	cbz	r0, 800f2c6 <USBD_StdEPReq+0x152>
                pep->status = 0x0001U;
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	e7ba      	b.n	800f232 <USBD_StdEPReq+0xbe>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f2bc:	9101      	str	r1, [sp, #4]
 800f2be:	f000 fb4b 	bl	800f958 <USBD_LL_ClearStallEP>
 800f2c2:	9901      	ldr	r1, [sp, #4]
 800f2c4:	e77b      	b.n	800f1be <USBD_StdEPReq+0x4a>
                pep->status = 0x0000U;
 800f2c6:	6020      	str	r0, [r4, #0]
 800f2c8:	e7b4      	b.n	800f234 <USBD_StdEPReq+0xc0>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f2ca:	4628      	mov	r0, r5
 800f2cc:	f000 fb36 	bl	800f93c <USBD_LL_StallEP>
 800f2d0:	e7c4      	b.n	800f25c <USBD_StdEPReq+0xe8>
 800f2d2:	bf00      	nop

0800f2d4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800f2d4:	780b      	ldrb	r3, [r1, #0]
 800f2d6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800f2d8:	784b      	ldrb	r3, [r1, #1]
 800f2da:	7043      	strb	r3, [r0, #1]
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800f2dc:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 800f2de:	8043      	strh	r3, [r0, #2]
 800f2e0:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 800f2e2:	8083      	strh	r3, [r0, #4]
 800f2e4:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 800f2e6:	80c3      	strh	r3, [r0, #6]
}
 800f2e8:	4770      	bx	lr
 800f2ea:	bf00      	nop

0800f2ec <USBD_CtlError>:
{
 800f2ec:	b510      	push	{r4, lr}
 800f2ee:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f2f0:	2180      	movs	r1, #128	; 0x80
 800f2f2:	f000 fb23 	bl	800f93c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f2f6:	2100      	movs	r1, #0
 800f2f8:	4620      	mov	r0, r4
}
 800f2fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800f2fe:	f000 bb1d 	b.w	800f93c <USBD_LL_StallEP>
 800f302:	bf00      	nop

0800f304 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800f304:	b318      	cbz	r0, 800f34e <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800f306:	7803      	ldrb	r3, [r0, #0]
{
 800f308:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 800f30a:	b30b      	cbz	r3, 800f350 <USBD_GetString+0x4c>
 800f30c:	4604      	mov	r4, r0
 800f30e:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 800f312:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 800f316:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800f31a:	b2db      	uxtb	r3, r3
 800f31c:	2d00      	cmp	r5, #0
 800f31e:	d1f8      	bne.n	800f312 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f320:	3301      	adds	r3, #1
 800f322:	005b      	lsls	r3, r3, #1
 800f324:	b2dc      	uxtb	r4, r3
 800f326:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f328:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 800f32a:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f32c:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 800f32e:	7804      	ldrb	r4, [r0, #0]
 800f330:	b15c      	cbz	r4, 800f34a <USBD_GetString+0x46>
  idx++;
 800f332:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800f334:	2500      	movs	r5, #0
    idx++;
 800f336:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 800f338:	54cc      	strb	r4, [r1, r3]
    idx++;
 800f33a:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800f33c:	b2d2      	uxtb	r2, r2
    idx++;
 800f33e:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 800f340:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 800f342:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800f346:	2c00      	cmp	r4, #0
 800f348:	d1f5      	bne.n	800f336 <USBD_GetString+0x32>
}
 800f34a:	bc30      	pop	{r4, r5}
 800f34c:	4770      	bx	lr
 800f34e:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 800f350:	2402      	movs	r4, #2
 800f352:	4623      	mov	r3, r4
 800f354:	e7e7      	b.n	800f326 <USBD_GetString+0x22>
 800f356:	bf00      	nop

0800f358 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f358:	b510      	push	{r4, lr}
 800f35a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f35c:	2402      	movs	r4, #2
{
 800f35e:	460a      	mov	r2, r1
#else
  pdev->ep_in[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f360:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f362:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 800f366:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f36a:	f000 fb25 	bl	800f9b8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800f36e:	2000      	movs	r0, #0
 800f370:	bd10      	pop	{r4, pc}
 800f372:	bf00      	nop

0800f374 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f374:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f376:	2100      	movs	r1, #0
{
 800f378:	b508      	push	{r3, lr}
 800f37a:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f37c:	4662      	mov	r2, ip
 800f37e:	f000 fb1b 	bl	800f9b8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800f382:	2000      	movs	r0, #0
 800f384:	bd08      	pop	{r3, pc}
 800f386:	bf00      	nop

0800f388 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f388:	b510      	push	{r4, lr}
 800f38a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f38c:	2403      	movs	r4, #3
{
 800f38e:	460a      	mov	r2, r1
#else
  pdev->ep_out[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f390:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f392:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 800f396:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f39a:	f000 fb1b 	bl	800f9d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800f39e:	2000      	movs	r0, #0
 800f3a0:	bd10      	pop	{r4, pc}
 800f3a2:	bf00      	nop

0800f3a4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f3a4:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f3a6:	2100      	movs	r1, #0
{
 800f3a8:	b508      	push	{r3, lr}
 800f3aa:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f3ac:	4662      	mov	r2, ip
 800f3ae:	f000 fb11 	bl	800f9d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800f3b2:	2000      	movs	r0, #0
 800f3b4:	bd08      	pop	{r3, pc}
 800f3b6:	bf00      	nop

0800f3b8 <USBD_CtlSendStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f3b8:	2300      	movs	r3, #0
{
 800f3ba:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f3bc:	2404      	movs	r4, #4
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f3be:	461a      	mov	r2, r3
 800f3c0:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f3c2:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f3c6:	f000 faf7 	bl	800f9b8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800f3ca:	2000      	movs	r0, #0
 800f3cc:	bd10      	pop	{r4, pc}
 800f3ce:	bf00      	nop

0800f3d0 <USBD_CtlReceiveStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f3d0:	2300      	movs	r3, #0
{
 800f3d2:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f3d4:	2405      	movs	r4, #5
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f3d6:	461a      	mov	r2, r3
 800f3d8:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f3da:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f3de:	f000 faf9 	bl	800f9d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800f3e2:	2000      	movs	r0, #0
 800f3e4:	bd10      	pop	{r4, pc}
 800f3e6:	bf00      	nop

0800f3e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f3e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	4919      	ldr	r1, [pc, #100]	; (800f454 <MX_USB_DEVICE_Init+0x6c>)
 800f3ee:	481a      	ldr	r0, [pc, #104]	; (800f458 <MX_USB_DEVICE_Init+0x70>)
 800f3f0:	f7ff fb08 	bl	800ea04 <USBD_Init>
 800f3f4:	b988      	cbnz	r0, 800f41a <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f3f6:	4919      	ldr	r1, [pc, #100]	; (800f45c <MX_USB_DEVICE_Init+0x74>)
 800f3f8:	4817      	ldr	r0, [pc, #92]	; (800f458 <MX_USB_DEVICE_Init+0x70>)
 800f3fa:	f7ff fb17 	bl	800ea2c <USBD_RegisterClass>
 800f3fe:	b9a0      	cbnz	r0, 800f42a <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f400:	4917      	ldr	r1, [pc, #92]	; (800f460 <MX_USB_DEVICE_Init+0x78>)
 800f402:	4815      	ldr	r0, [pc, #84]	; (800f458 <MX_USB_DEVICE_Init+0x70>)
 800f404:	f7ff fa9e 	bl	800e944 <USBD_CDC_RegisterInterface>
 800f408:	b9b8      	cbnz	r0, 800f43a <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f40a:	4813      	ldr	r0, [pc, #76]	; (800f458 <MX_USB_DEVICE_Init+0x70>)
 800f40c:	f7ff fb2a 	bl	800ea64 <USBD_Start>
 800f410:	b9d0      	cbnz	r0, 800f448 <MX_USB_DEVICE_Init+0x60>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f412:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800f416:	f7fa bdc5 	b.w	8009fa4 <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 800f41a:	f7f4 ff07 	bl	800422c <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f41e:	490f      	ldr	r1, [pc, #60]	; (800f45c <MX_USB_DEVICE_Init+0x74>)
 800f420:	480d      	ldr	r0, [pc, #52]	; (800f458 <MX_USB_DEVICE_Init+0x70>)
 800f422:	f7ff fb03 	bl	800ea2c <USBD_RegisterClass>
 800f426:	2800      	cmp	r0, #0
 800f428:	d0ea      	beq.n	800f400 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800f42a:	f7f4 feff 	bl	800422c <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f42e:	490c      	ldr	r1, [pc, #48]	; (800f460 <MX_USB_DEVICE_Init+0x78>)
 800f430:	4809      	ldr	r0, [pc, #36]	; (800f458 <MX_USB_DEVICE_Init+0x70>)
 800f432:	f7ff fa87 	bl	800e944 <USBD_CDC_RegisterInterface>
 800f436:	2800      	cmp	r0, #0
 800f438:	d0e7      	beq.n	800f40a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800f43a:	f7f4 fef7 	bl	800422c <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f43e:	4806      	ldr	r0, [pc, #24]	; (800f458 <MX_USB_DEVICE_Init+0x70>)
 800f440:	f7ff fb10 	bl	800ea64 <USBD_Start>
 800f444:	2800      	cmp	r0, #0
 800f446:	d0e4      	beq.n	800f412 <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 800f448:	f7f4 fef0 	bl	800422c <Error_Handler>
}
 800f44c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800f450:	f7fa bda8 	b.w	8009fa4 <HAL_PWREx_EnableUSBVoltageDetector>
 800f454:	240003c4 	.word	0x240003c4
 800f458:	2400c9e4 	.word	0x2400c9e4
 800f45c:	24000320 	.word	0x24000320
 800f460:	240003a8 	.word	0x240003a8

0800f464 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800f464:	2000      	movs	r0, #0
 800f466:	4770      	bx	lr

0800f468 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800f468:	2000      	movs	r0, #0
 800f46a:	4770      	bx	lr

0800f46c <CDC_Receive_FS>:
{
 800f46c:	b570      	push	{r4, r5, r6, lr}
 800f46e:	4604      	mov	r4, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f470:	4e08      	ldr	r6, [pc, #32]	; (800f494 <CDC_Receive_FS+0x28>)
{
 800f472:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f474:	4630      	mov	r0, r6
 800f476:	4621      	mov	r1, r4
 800f478:	f7ff fa7e 	bl	800e978 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800f47c:	4630      	mov	r0, r6
 800f47e:	f7ff faa3 	bl	800e9c8 <USBD_CDC_ReceivePacket>
 800f482:	682a      	ldr	r2, [r5, #0]
 800f484:	4b04      	ldr	r3, [pc, #16]	; (800f498 <CDC_Receive_FS+0x2c>)
  memcpy(UartRXString, Buf, USBRXLength);
 800f486:	4621      	mov	r1, r4
 800f488:	4804      	ldr	r0, [pc, #16]	; (800f49c <CDC_Receive_FS+0x30>)
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800f48a:	601a      	str	r2, [r3, #0]
  memcpy(UartRXString, Buf, USBRXLength);
 800f48c:	f001 fc12 	bl	8010cb4 <memcpy>
}
 800f490:	2000      	movs	r0, #0
 800f492:	bd70      	pop	{r4, r5, r6, pc}
 800f494:	2400c9e4 	.word	0x2400c9e4
 800f498:	240072f0 	.word	0x240072f0
 800f49c:	240072f8 	.word	0x240072f8

0800f4a0 <CDC_Init_FS>:
{
 800f4a0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f4a2:	4c06      	ldr	r4, [pc, #24]	; (800f4bc <CDC_Init_FS+0x1c>)
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	4906      	ldr	r1, [pc, #24]	; (800f4c0 <CDC_Init_FS+0x20>)
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	f7ff fa57 	bl	800e95c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f4ae:	4905      	ldr	r1, [pc, #20]	; (800f4c4 <CDC_Init_FS+0x24>)
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	f7ff fa61 	bl	800e978 <USBD_CDC_SetRxBuffer>
}
 800f4b6:	2000      	movs	r0, #0
 800f4b8:	bd10      	pop	{r4, pc}
 800f4ba:	bf00      	nop
 800f4bc:	2400c9e4 	.word	0x2400c9e4
 800f4c0:	2400d4c0 	.word	0x2400d4c0
 800f4c4:	2400ccc0 	.word	0x2400ccc0

0800f4c8 <CDC_Control_FS>:
  switch(cmd)
 800f4c8:	2820      	cmp	r0, #32
 800f4ca:	d00a      	beq.n	800f4e2 <CDC_Control_FS+0x1a>
 800f4cc:	2821      	cmp	r0, #33	; 0x21
 800f4ce:	d106      	bne.n	800f4de <CDC_Control_FS+0x16>
    	 memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800f4d0:	4b09      	ldr	r3, [pc, #36]	; (800f4f8 <CDC_Control_FS+0x30>)
 800f4d2:	6818      	ldr	r0, [r3, #0]
 800f4d4:	889a      	ldrh	r2, [r3, #4]
 800f4d6:	799b      	ldrb	r3, [r3, #6]
 800f4d8:	6008      	str	r0, [r1, #0]
 800f4da:	808a      	strh	r2, [r1, #4]
 800f4dc:	718b      	strb	r3, [r1, #6]
}
 800f4de:	2000      	movs	r0, #0
 800f4e0:	4770      	bx	lr
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800f4e2:	4b05      	ldr	r3, [pc, #20]	; (800f4f8 <CDC_Control_FS+0x30>)
 800f4e4:	6808      	ldr	r0, [r1, #0]
 800f4e6:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 800f4ea:	798a      	ldrb	r2, [r1, #6]
 800f4ec:	6018      	str	r0, [r3, #0]
}
 800f4ee:	2000      	movs	r0, #0
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800f4f0:	f8a3 c004 	strh.w	ip, [r3, #4]
 800f4f4:	719a      	strb	r2, [r3, #6]
}
 800f4f6:	4770      	bx	lr
 800f4f8:	240003bc 	.word	0x240003bc

0800f4fc <CDC_Transmit_FS>:
{
 800f4fc:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f4fe:	4c09      	ldr	r4, [pc, #36]	; (800f524 <CDC_Transmit_FS+0x28>)
 800f500:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800f504:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f508:	b10b      	cbz	r3, 800f50e <CDC_Transmit_FS+0x12>
}
 800f50a:	2001      	movs	r0, #1
 800f50c:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f50e:	460a      	mov	r2, r1
 800f510:	4601      	mov	r1, r0
 800f512:	4620      	mov	r0, r4
 800f514:	f7ff fa22 	bl	800e95c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f518:	4620      	mov	r0, r4
}
 800f51a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f51e:	f7ff ba37 	b.w	800e990 <USBD_CDC_TransmitPacket>
 800f522:	bf00      	nop
 800f524:	2400c9e4 	.word	0x2400c9e4

0800f528 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f528:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800f52a:	4801      	ldr	r0, [pc, #4]	; (800f530 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800f52c:	800b      	strh	r3, [r1, #0]
}
 800f52e:	4770      	bx	lr
 800f530:	240003e0 	.word	0x240003e0

0800f534 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f534:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800f536:	4801      	ldr	r0, [pc, #4]	; (800f53c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800f538:	800b      	strh	r3, [r1, #0]
}
 800f53a:	4770      	bx	lr
 800f53c:	240003f4 	.word	0x240003f4

0800f540 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f540:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f542:	4c04      	ldr	r4, [pc, #16]	; (800f554 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800f544:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f546:	4804      	ldr	r0, [pc, #16]	; (800f558 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800f548:	4621      	mov	r1, r4
 800f54a:	f7ff fedb 	bl	800f304 <USBD_GetString>
  return USBD_StrDesc;
}
 800f54e:	4620      	mov	r0, r4
 800f550:	bd10      	pop	{r4, pc}
 800f552:	bf00      	nop
 800f554:	2400dcc0 	.word	0x2400dcc0
 800f558:	0801b2c0 	.word	0x0801b2c0

0800f55c <USBD_FS_ProductStrDescriptor>:
{
 800f55c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f55e:	4c04      	ldr	r4, [pc, #16]	; (800f570 <USBD_FS_ProductStrDescriptor+0x14>)
{
 800f560:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f562:	4804      	ldr	r0, [pc, #16]	; (800f574 <USBD_FS_ProductStrDescriptor+0x18>)
 800f564:	4621      	mov	r1, r4
 800f566:	f7ff fecd 	bl	800f304 <USBD_GetString>
}
 800f56a:	4620      	mov	r0, r4
 800f56c:	bd10      	pop	{r4, pc}
 800f56e:	bf00      	nop
 800f570:	2400dcc0 	.word	0x2400dcc0
 800f574:	0801b2d4 	.word	0x0801b2d4

0800f578 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f578:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f57a:	4c04      	ldr	r4, [pc, #16]	; (800f58c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800f57c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f57e:	4804      	ldr	r0, [pc, #16]	; (800f590 <USBD_FS_ConfigStrDescriptor+0x18>)
 800f580:	4621      	mov	r1, r4
 800f582:	f7ff febf 	bl	800f304 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800f586:	4620      	mov	r0, r4
 800f588:	bd10      	pop	{r4, pc}
 800f58a:	bf00      	nop
 800f58c:	2400dcc0 	.word	0x2400dcc0
 800f590:	0801b2ec 	.word	0x0801b2ec

0800f594 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f594:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f596:	4c04      	ldr	r4, [pc, #16]	; (800f5a8 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800f598:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f59a:	4804      	ldr	r0, [pc, #16]	; (800f5ac <USBD_FS_InterfaceStrDescriptor+0x18>)
 800f59c:	4621      	mov	r1, r4
 800f59e:	f7ff feb1 	bl	800f304 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800f5a2:	4620      	mov	r0, r4
 800f5a4:	bd10      	pop	{r4, pc}
 800f5a6:	bf00      	nop
 800f5a8:	2400dcc0 	.word	0x2400dcc0
 800f5ac:	0801b2f8 	.word	0x0801b2f8

0800f5b0 <USBD_FS_SerialStrDescriptor>:
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f5b0:	4a46      	ldr	r2, [pc, #280]	; (800f6cc <USBD_FS_SerialStrDescriptor+0x11c>)
  *length = USB_SIZ_STRING_SERIAL;
 800f5b2:	f04f 0c1a 	mov.w	ip, #26
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f5b6:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800f5ba:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
  *length = USB_SIZ_STRING_SERIAL;
 800f5be:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 800f5c2:	18c3      	adds	r3, r0, r3
 800f5c4:	d101      	bne.n	800f5ca <USBD_FS_SerialStrDescriptor+0x1a>
}
 800f5c6:	4842      	ldr	r0, [pc, #264]	; (800f6d0 <USBD_FS_SerialStrDescriptor+0x120>)
 800f5c8:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 800f5ca:	0f18      	lsrs	r0, r3, #28
 800f5cc:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f5d0:	f8d2 1804 	ldr.w	r1, [r2, #2052]	; 0x804
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800f5d4:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800f5d8:	4a3d      	ldr	r2, [pc, #244]	; (800f6d0 <USBD_FS_SerialStrDescriptor+0x120>)
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f5da:	bf2c      	ite	cs
 800f5dc:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f5de:	3030      	addcc	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800f5e0:	f882 c003 	strb.w	ip, [r2, #3]
 800f5e4:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800f5e8:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800f5ea:	f3c3 6003 	ubfx	r0, r3, #24, #4
    pbuf[2 * idx + 1] = 0;
 800f5ee:	f882 c005 	strb.w	ip, [r2, #5]
 800f5f2:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800f5f6:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800f5f8:	f882 c007 	strb.w	ip, [r2, #7]
 800f5fc:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f600:	bf8c      	ite	hi
 800f602:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f604:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800f606:	f882 c009 	strb.w	ip, [r2, #9]
 800f60a:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800f60e:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800f610:	f3c3 5003 	ubfx	r0, r3, #20, #4
    pbuf[2 * idx + 1] = 0;
 800f614:	f882 c00b 	strb.w	ip, [r2, #11]
 800f618:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800f61c:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800f61e:	f882 c00d 	strb.w	ip, [r2, #13]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f622:	bf8c      	ite	hi
 800f624:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f626:	3030      	addls	r0, #48	; 0x30
 800f628:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800f62a:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800f62e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f630:	bf8c      	ite	hi
 800f632:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f634:	3030      	addls	r0, #48	; 0x30
 800f636:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800f638:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800f63c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f63e:	bf8c      	ite	hi
 800f640:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f642:	3030      	addls	r0, #48	; 0x30
 800f644:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800f646:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800f64a:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f64c:	bf8c      	ite	hi
 800f64e:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f650:	3030      	addls	r0, #48	; 0x30
 800f652:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 800f654:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800f658:	f003 030f 	and.w	r3, r3, #15
 800f65c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f65e:	bf8c      	ite	hi
 800f660:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f662:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 800f664:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800f666:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 800f668:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800f66c:	bf94      	ite	ls
 800f66e:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f670:	3337      	addhi	r3, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800f672:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 800f676:	73d0      	strb	r0, [r2, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f678:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800f67a:	ea4f 7311 	mov.w	r3, r1, lsr #28
    pbuf[2 * idx + 1] = 0;
 800f67e:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f682:	bf2c      	ite	cs
 800f684:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f686:	3330      	addcc	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800f688:	7450      	strb	r0, [r2, #17]
 800f68a:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800f68c:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800f68e:	f3c1 6303 	ubfx	r3, r1, #24, #4
    pbuf[2 * idx + 1] = 0;
 800f692:	74d0      	strb	r0, [r2, #19]
 800f694:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800f696:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 800f698:	7550      	strb	r0, [r2, #21]
 800f69a:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f69e:	bf8c      	ite	hi
 800f6a0:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f6a2:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800f6a4:	75d0      	strb	r0, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 800f6a6:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800f6a8:	f3c1 5303 	ubfx	r3, r1, #20, #4
}
 800f6ac:	4808      	ldr	r0, [pc, #32]	; (800f6d0 <USBD_FS_SerialStrDescriptor+0x120>)
    if (((value >> 28)) < 0xA)
 800f6ae:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f6b0:	bf8c      	ite	hi
 800f6b2:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800f6b4:	3330      	addls	r3, #48	; 0x30
 800f6b6:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800f6b8:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800f6bc:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800f6be:	bf94      	ite	ls
 800f6c0:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f6c2:	3337      	addhi	r3, #55	; 0x37
 800f6c4:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	7653      	strb	r3, [r2, #25]
}
 800f6ca:	4770      	bx	lr
 800f6cc:	1ff1e000 	.word	0x1ff1e000
 800f6d0:	240003f8 	.word	0x240003f8
 800f6d4:	00000000 	.word	0x00000000

0800f6d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f6d8:	b510      	push	{r4, lr}
 800f6da:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f6dc:	2100      	movs	r1, #0
{
 800f6de:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f6e0:	22c0      	movs	r2, #192	; 0xc0
 800f6e2:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f6e4:	9106      	str	r1, [sp, #24]
 800f6e6:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800f6ea:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f6ee:	f001 faef 	bl	8010cd0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f6f2:	4b27      	ldr	r3, [pc, #156]	; (800f790 <HAL_PCD_MspInit+0xb8>)
 800f6f4:	6822      	ldr	r2, [r4, #0]
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d001      	beq.n	800f6fe <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f6fa:	b038      	add	sp, #224	; 0xe0
 800f6fc:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f6fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f780 <HAL_PCD_MspInit+0xa8>
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f702:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f706:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f708:	ed8d 7b08 	vstr	d7, [sp, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f70c:	932a      	str	r3, [sp, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f70e:	f7fb fba7 	bl	800ae60 <HAL_RCCEx_PeriphCLKConfig>
 800f712:	bb90      	cbnz	r0, 800f77a <HAL_PCD_MspInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f714:	4c1f      	ldr	r4, [pc, #124]	; (800f794 <HAL_PCD_MspInit+0xbc>)
    HAL_PWREx_EnableUSBVoltageDetector();
 800f716:	f7fa fc45 	bl	8009fa4 <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f71a:	220a      	movs	r2, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f71c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f71e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f722:	481d      	ldr	r0, [pc, #116]	; (800f798 <HAL_PCD_MspInit+0xc0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f724:	f043 0301 	orr.w	r3, r3, #1
 800f728:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800f72c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f730:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f732:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f734:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f738:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f788 <HAL_PCD_MspInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f73c:	9300      	str	r3, [sp, #0]
 800f73e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f740:	2300      	movs	r3, #0
 800f742:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f746:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f74a:	f7f9 fa45 	bl	8008bd8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f74e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f752:	2200      	movs	r2, #0
 800f754:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f756:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f75a:	4611      	mov	r1, r2
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f75c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800f760:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800f764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f768:	9301      	str	r3, [sp, #4]
 800f76a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f76c:	f7f7 fd44 	bl	80071f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f770:	2065      	movs	r0, #101	; 0x65
 800f772:	f7f7 fd7f 	bl	8007274 <HAL_NVIC_EnableIRQ>
}
 800f776:	b038      	add	sp, #224	; 0xe0
 800f778:	bd10      	pop	{r4, pc}
      Error_Handler();
 800f77a:	f7f4 fd57 	bl	800422c <Error_Handler>
 800f77e:	e7c9      	b.n	800f714 <HAL_PCD_MspInit+0x3c>
 800f780:	00040000 	.word	0x00040000
 800f784:	00000000 	.word	0x00000000
 800f788:	00001800 	.word	0x00001800
 800f78c:	00000002 	.word	0x00000002
 800f790:	40080000 	.word	0x40080000
 800f794:	58024400 	.word	0x58024400
 800f798:	58020000 	.word	0x58020000

0800f79c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f79c:	f200 41c4 	addw	r1, r0, #1220	; 0x4c4
 800f7a0:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800f7a4:	f7ff b972 	b.w	800ea8c <USBD_LL_SetupStage>

0800f7a8 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f7a8:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800f7ac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f7b0:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800f7b4:	f8d3 2288 	ldr.w	r2, [r3, #648]	; 0x288
 800f7b8:	f7ff b998 	b.w	800eaec <USBD_LL_DataOutStage>

0800f7bc <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f7bc:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800f7c0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f7c4:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800f7c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f7ca:	f7ff b9c9 	b.w	800eb60 <USBD_LL_DataInStage>
 800f7ce:	bf00      	nop

0800f7d0 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f7d0:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800f7d4:	f7ff ba72 	b.w	800ecbc <USBD_LL_SOF>

0800f7d8 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f7d8:	6901      	ldr	r1, [r0, #16]
{
 800f7da:	b510      	push	{r4, lr}
 800f7dc:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f7de:	b111      	cbz	r1, 800f7e6 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f7e0:	2902      	cmp	r1, #2
 800f7e2:	d10a      	bne.n	800f7fa <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 800f7e4:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f7e6:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
 800f7ea:	f7ff fa47 	bl	800ec7c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f7ee:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
}
 800f7f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f7f6:	f7ff ba13 	b.w	800ec20 <USBD_LL_Reset>
    Error_Handler();
 800f7fa:	f7f4 fd17 	bl	800422c <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f7fe:	2101      	movs	r1, #1
 800f800:	e7f1      	b.n	800f7e6 <HAL_PCD_ResetCallback+0xe>
 800f802:	bf00      	nop

0800f804 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f804:	b510      	push	{r4, lr}
 800f806:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f808:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800f80c:	f7ff fa3a 	bl	800ec84 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f810:	6822      	ldr	r2, [r4, #0]
 800f812:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800f816:	f043 0301 	orr.w	r3, r3, #1
 800f81a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f81e:	6a23      	ldr	r3, [r4, #32]
 800f820:	b123      	cbz	r3, 800f82c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f822:	4a03      	ldr	r2, [pc, #12]	; (800f830 <HAL_PCD_SuspendCallback+0x2c>)
 800f824:	6913      	ldr	r3, [r2, #16]
 800f826:	f043 0306 	orr.w	r3, r3, #6
 800f82a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f82c:	bd10      	pop	{r4, pc}
 800f82e:	bf00      	nop
 800f830:	e000ed00 	.word	0xe000ed00

0800f834 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f834:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800f838:	f7ff ba34 	b.w	800eca4 <USBD_LL_Resume>

0800f83c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f83c:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800f840:	f7ff ba62 	b.w	800ed08 <USBD_LL_IsoOUTIncomplete>

0800f844 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f844:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800f848:	f7ff ba48 	b.w	800ecdc <USBD_LL_IsoINIncomplete>

0800f84c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f84c:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800f850:	f7ff ba70 	b.w	800ed34 <USBD_LL_DevConnected>

0800f854 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f854:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 800f858:	f7ff ba6e 	b.w	800ed38 <USBD_LL_DevDisconnected>
 800f85c:	0000      	movs	r0, r0
	...

0800f860 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f860:	7802      	ldrb	r2, [r0, #0]
 800f862:	b10a      	cbz	r2, 800f868 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
}
 800f864:	2000      	movs	r0, #0
 800f866:	4770      	bx	lr
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f868:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800f8c8 <USBD_LL_Init+0x68>
  hpcd_USB_OTG_FS.pData = pdev;
 800f86c:	4b1a      	ldr	r3, [pc, #104]	; (800f8d8 <USBD_LL_Init+0x78>)
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f86e:	491b      	ldr	r1, [pc, #108]	; (800f8dc <USBD_LL_Init+0x7c>)
{
 800f870:	b510      	push	{r4, lr}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f872:	ed83 7b06 	vstr	d7, [r3, #24]
 800f876:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f8d0 <USBD_LL_Init+0x70>
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f87a:	2409      	movs	r4, #9
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f87c:	6019      	str	r1, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f87e:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.pData = pdev;
 800f880:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f884:	f8c0 32c8 	str.w	r3, [r0, #712]	; 0x2c8
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f888:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f88a:	605c      	str	r4, [r3, #4]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f88c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f88e:	ed83 7b08 	vstr	d7, [r3, #32]
 800f892:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f896:	e9c3 2103 	strd	r2, r1, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f89a:	f7f9 fb61 	bl	8008f60 <HAL_PCD_Init>
 800f89e:	b978      	cbnz	r0, 800f8c0 <USBD_LL_Init+0x60>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f8a0:	2180      	movs	r1, #128	; 0x80
 800f8a2:	480d      	ldr	r0, [pc, #52]	; (800f8d8 <USBD_LL_Init+0x78>)
 800f8a4:	f7fa fb3a 	bl	8009f1c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f8a8:	2240      	movs	r2, #64	; 0x40
 800f8aa:	2100      	movs	r1, #0
 800f8ac:	480a      	ldr	r0, [pc, #40]	; (800f8d8 <USBD_LL_Init+0x78>)
 800f8ae:	f7fa fb0b 	bl	8009ec8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f8b2:	2280      	movs	r2, #128	; 0x80
 800f8b4:	2101      	movs	r1, #1
 800f8b6:	4808      	ldr	r0, [pc, #32]	; (800f8d8 <USBD_LL_Init+0x78>)
 800f8b8:	f7fa fb06 	bl	8009ec8 <HAL_PCDEx_SetTxFiFo>
}
 800f8bc:	2000      	movs	r0, #0
 800f8be:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800f8c0:	f7f4 fcb4 	bl	800422c <Error_Handler>
 800f8c4:	e7ec      	b.n	800f8a0 <USBD_LL_Init+0x40>
 800f8c6:	bf00      	nop
 800f8c8:	00000002 	.word	0x00000002
	...
 800f8d8:	2400dec0 	.word	0x2400dec0
 800f8dc:	40080000 	.word	0x40080000

0800f8e0 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800f8e0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 800f8e4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800f8e6:	f7f9 fbd1 	bl	800908c <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800f8ea:	2803      	cmp	r0, #3
 800f8ec:	d802      	bhi.n	800f8f4 <USBD_LL_Start+0x14>
 800f8ee:	4b02      	ldr	r3, [pc, #8]	; (800f8f8 <USBD_LL_Start+0x18>)
 800f8f0:	5c18      	ldrb	r0, [r3, r0]
}
 800f8f2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 800f8f4:	2003      	movs	r0, #3
}
 800f8f6:	bd08      	pop	{r3, pc}
 800f8f8:	0801b308 	.word	0x0801b308

0800f8fc <USBD_LL_OpenEP>:
{
 800f8fc:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f8fe:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 800f902:	461a      	mov	r2, r3
 800f904:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f906:	4663      	mov	r3, ip
 800f908:	f7fa f99c 	bl	8009c44 <HAL_PCD_EP_Open>
  switch (hal_status)
 800f90c:	2803      	cmp	r0, #3
 800f90e:	d802      	bhi.n	800f916 <USBD_LL_OpenEP+0x1a>
 800f910:	4b02      	ldr	r3, [pc, #8]	; (800f91c <USBD_LL_OpenEP+0x20>)
 800f912:	5c18      	ldrb	r0, [r3, r0]
}
 800f914:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f916:	2003      	movs	r0, #3
}
 800f918:	bd08      	pop	{r3, pc}
 800f91a:	bf00      	nop
 800f91c:	0801b308 	.word	0x0801b308

0800f920 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f920:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 800f924:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f926:	f7fa f9cb 	bl	8009cc0 <HAL_PCD_EP_Close>
  switch (hal_status)
 800f92a:	2803      	cmp	r0, #3
 800f92c:	d802      	bhi.n	800f934 <USBD_LL_CloseEP+0x14>
 800f92e:	4b02      	ldr	r3, [pc, #8]	; (800f938 <USBD_LL_CloseEP+0x18>)
 800f930:	5c18      	ldrb	r0, [r3, r0]
}
 800f932:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f934:	2003      	movs	r0, #3
}
 800f936:	bd08      	pop	{r3, pc}
 800f938:	0801b308 	.word	0x0801b308

0800f93c <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f93c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 800f940:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f942:	f7fa fa41 	bl	8009dc8 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800f946:	2803      	cmp	r0, #3
 800f948:	d802      	bhi.n	800f950 <USBD_LL_StallEP+0x14>
 800f94a:	4b02      	ldr	r3, [pc, #8]	; (800f954 <USBD_LL_StallEP+0x18>)
 800f94c:	5c18      	ldrb	r0, [r3, r0]
}
 800f94e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f950:	2003      	movs	r0, #3
}
 800f952:	bd08      	pop	{r3, pc}
 800f954:	0801b308 	.word	0x0801b308

0800f958 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f958:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 800f95c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f95e:	f7fa fa77 	bl	8009e50 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800f962:	2803      	cmp	r0, #3
 800f964:	d802      	bhi.n	800f96c <USBD_LL_ClearStallEP+0x14>
 800f966:	4b02      	ldr	r3, [pc, #8]	; (800f970 <USBD_LL_ClearStallEP+0x18>)
 800f968:	5c18      	ldrb	r0, [r3, r0]
}
 800f96a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f96c:	2003      	movs	r0, #3
}
 800f96e:	bd08      	pop	{r3, pc}
 800f970:	0801b308 	.word	0x0801b308

0800f974 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800f974:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f976:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
  if((ep_addr & 0x80) == 0x80)
 800f97a:	d406      	bmi.n	800f98a <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f97c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800f980:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f984:	f891 027e 	ldrb.w	r0, [r1, #638]	; 0x27e
}
 800f988:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f98a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800f98e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800f992:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f996:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 800f99a:	4770      	bx	lr

0800f99c <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f99c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 800f9a0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f9a2:	f7fa f939 	bl	8009c18 <HAL_PCD_SetAddress>
  switch (hal_status)
 800f9a6:	2803      	cmp	r0, #3
 800f9a8:	d802      	bhi.n	800f9b0 <USBD_LL_SetUSBAddress+0x14>
 800f9aa:	4b02      	ldr	r3, [pc, #8]	; (800f9b4 <USBD_LL_SetUSBAddress+0x18>)
 800f9ac:	5c18      	ldrb	r0, [r3, r0]
}
 800f9ae:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f9b0:	2003      	movs	r0, #3
}
 800f9b2:	bd08      	pop	{r3, pc}
 800f9b4:	0801b308 	.word	0x0801b308

0800f9b8 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f9b8:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 800f9bc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f9be:	f7fa f9e1 	bl	8009d84 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800f9c2:	2803      	cmp	r0, #3
 800f9c4:	d802      	bhi.n	800f9cc <USBD_LL_Transmit+0x14>
 800f9c6:	4b02      	ldr	r3, [pc, #8]	; (800f9d0 <USBD_LL_Transmit+0x18>)
 800f9c8:	5c18      	ldrb	r0, [r3, r0]
}
 800f9ca:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f9cc:	2003      	movs	r0, #3
}
 800f9ce:	bd08      	pop	{r3, pc}
 800f9d0:	0801b308 	.word	0x0801b308

0800f9d4 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f9d4:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 800f9d8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f9da:	f7fa f9a7 	bl	8009d2c <HAL_PCD_EP_Receive>
  switch (hal_status)
 800f9de:	2803      	cmp	r0, #3
 800f9e0:	d802      	bhi.n	800f9e8 <USBD_LL_PrepareReceive+0x14>
 800f9e2:	4b02      	ldr	r3, [pc, #8]	; (800f9ec <USBD_LL_PrepareReceive+0x18>)
 800f9e4:	5c18      	ldrb	r0, [r3, r0]
}
 800f9e6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f9e8:	2003      	movs	r0, #3
}
 800f9ea:	bd08      	pop	{r3, pc}
 800f9ec:	0801b308 	.word	0x0801b308

0800f9f0 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f9f0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 800f9f4:	f7fa b9bc 	b.w	8009d70 <HAL_PCD_EP_GetRxCount>

0800f9f8 <USBD_static_malloc>:
}
 800f9f8:	4800      	ldr	r0, [pc, #0]	; (800f9fc <USBD_static_malloc+0x4>)
 800f9fa:	4770      	bx	lr
 800f9fc:	2400e3cc 	.word	0x2400e3cc

0800fa00 <USBD_static_free>:
}
 800fa00:	4770      	bx	lr
 800fa02:	bf00      	nop

0800fa04 <arm_cfft_radix8by2_f32>:
 800fa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa08:	4607      	mov	r7, r0
 800fa0a:	4608      	mov	r0, r1
 800fa0c:	ed2d 8b06 	vpush	{d8-d10}
 800fa10:	f8b7 c000 	ldrh.w	ip, [r7]
 800fa14:	687a      	ldr	r2, [r7, #4]
 800fa16:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800fa1a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800fa1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800fa22:	f000 80ac 	beq.w	800fb7e <arm_cfft_radix8by2_f32+0x17a>
 800fa26:	008c      	lsls	r4, r1, #2
 800fa28:	f100 0310 	add.w	r3, r0, #16
 800fa2c:	3210      	adds	r2, #16
 800fa2e:	f108 0610 	add.w	r6, r8, #16
 800fa32:	3410      	adds	r4, #16
 800fa34:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800fa38:	1905      	adds	r5, r0, r4
 800fa3a:	4444      	add	r4, r8
 800fa3c:	ed16 7a04 	vldr	s14, [r6, #-16]
 800fa40:	3310      	adds	r3, #16
 800fa42:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 800fa46:	3510      	adds	r5, #16
 800fa48:	ed56 0a03 	vldr	s1, [r6, #-12]
 800fa4c:	3210      	adds	r2, #16
 800fa4e:	ee74 9a87 	vadd.f32	s19, s9, s14
 800fa52:	ed56 7a02 	vldr	s15, [r6, #-8]
 800fa56:	ed56 2a01 	vldr	s5, [r6, #-4]
 800fa5a:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800fa5e:	ed54 5a04 	vldr	s11, [r4, #-16]
 800fa62:	3610      	adds	r6, #16
 800fa64:	ed14 5a03 	vldr	s10, [r4, #-12]
 800fa68:	3410      	adds	r4, #16
 800fa6a:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 800fa6e:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800fa72:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800fa76:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800fa7a:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 800fa7e:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800fa82:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 800fa86:	ee33 8a83 	vadd.f32	s16, s7, s6
 800fa8a:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800fa8e:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800fa92:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800fa96:	ee34 0a06 	vadd.f32	s0, s8, s12
 800fa9a:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 800fa9e:	ee77 aa20 	vadd.f32	s21, s14, s1
 800faa2:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 800faa6:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800faaa:	ee72 9a22 	vadd.f32	s19, s4, s5
 800faae:	ee71 8a05 	vadd.f32	s17, s2, s10
 800fab2:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 800fab6:	ee37 7a60 	vsub.f32	s14, s14, s1
 800faba:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 800fabe:	ee35 5a41 	vsub.f32	s10, s10, s2
 800fac2:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 800fac6:	ee36 6a44 	vsub.f32	s12, s12, s8
 800faca:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 800face:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 800fad2:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800fad6:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 800fada:	ee72 7a62 	vsub.f32	s15, s4, s5
 800fade:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 800fae2:	ee73 2a63 	vsub.f32	s5, s6, s7
 800fae6:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800faea:	4563      	cmp	r3, ip
 800faec:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800faf0:	ee24 3a84 	vmul.f32	s6, s9, s8
 800faf4:	ee27 2a26 	vmul.f32	s4, s14, s13
 800faf8:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800fafc:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800fb00:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fb04:	ee65 5a84 	vmul.f32	s11, s11, s8
 800fb08:	ee65 6a26 	vmul.f32	s13, s10, s13
 800fb0c:	ee25 5a04 	vmul.f32	s10, s10, s8
 800fb10:	ee37 7a64 	vsub.f32	s14, s14, s9
 800fb14:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800fb18:	ee33 4a02 	vadd.f32	s8, s6, s4
 800fb1c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800fb20:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 800fb24:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 800fb28:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 800fb2c:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800fb30:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800fb34:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800fb38:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800fb3c:	ee27 4a87 	vmul.f32	s8, s15, s14
 800fb40:	ee61 5a87 	vmul.f32	s11, s3, s14
 800fb44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fb48:	ee22 5a87 	vmul.f32	s10, s5, s14
 800fb4c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800fb50:	ee26 6a26 	vmul.f32	s12, s12, s13
 800fb54:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800fb58:	ee74 4a84 	vadd.f32	s9, s9, s8
 800fb5c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800fb60:	ee35 6a46 	vsub.f32	s12, s10, s12
 800fb64:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fb68:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 800fb6c:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 800fb70:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 800fb74:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800fb78:	f47f af60 	bne.w	800fa3c <arm_cfft_radix8by2_f32+0x38>
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	b28c      	uxth	r4, r1
 800fb80:	2302      	movs	r3, #2
 800fb82:	4621      	mov	r1, r4
 800fb84:	f000 fda6 	bl	80106d4 <arm_radix8_butterfly_f32>
 800fb88:	4621      	mov	r1, r4
 800fb8a:	687a      	ldr	r2, [r7, #4]
 800fb8c:	4640      	mov	r0, r8
 800fb8e:	2302      	movs	r3, #2
 800fb90:	ecbd 8b06 	vpop	{d8-d10}
 800fb94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb98:	f000 bd9c 	b.w	80106d4 <arm_radix8_butterfly_f32>

0800fb9c <arm_cfft_radix8by4_f32>:
 800fb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fba0:	ed2d 8b04 	vpush	{d8-d9}
 800fba4:	8804      	ldrh	r4, [r0, #0]
 800fba6:	b08d      	sub	sp, #52	; 0x34
 800fba8:	6842      	ldr	r2, [r0, #4]
 800fbaa:	460d      	mov	r5, r1
 800fbac:	0864      	lsrs	r4, r4, #1
 800fbae:	edd1 7a00 	vldr	s15, [r1]
 800fbb2:	edd1 5a01 	vldr	s11, [r1, #4]
 800fbb6:	00a3      	lsls	r3, r4, #2
 800fbb8:	18ce      	adds	r6, r1, r3
 800fbba:	18f7      	adds	r7, r6, r3
 800fbbc:	ed96 7a00 	vldr	s14, [r6]
 800fbc0:	ed96 4a01 	vldr	s8, [r6, #4]
 800fbc4:	ed97 6a00 	vldr	s12, [r7]
 800fbc8:	edd7 4a01 	vldr	s9, [r7, #4]
 800fbcc:	ee77 6a86 	vadd.f32	s13, s15, s12
 800fbd0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fbd4:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800fbd8:	ee77 2a26 	vadd.f32	s5, s14, s13
 800fbdc:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800fbe0:	ee74 3a27 	vadd.f32	s7, s8, s15
 800fbe4:	ee76 4a44 	vsub.f32	s9, s12, s8
 800fbe8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800fbec:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800fbf0:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800fbf4:	ee37 7a25 	vadd.f32	s14, s14, s11
 800fbf8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800fbfc:	0860      	lsrs	r0, r4, #1
 800fbfe:	f102 0408 	add.w	r4, r2, #8
 800fc02:	9405      	str	r4, [sp, #20]
 800fc04:	f102 0410 	add.w	r4, r2, #16
 800fc08:	9009      	str	r0, [sp, #36]	; 0x24
 800fc0a:	f1a0 0902 	sub.w	r9, r0, #2
 800fc0e:	9403      	str	r4, [sp, #12]
 800fc10:	18fc      	adds	r4, r7, r3
 800fc12:	f102 0018 	add.w	r0, r2, #24
 800fc16:	ed94 5a00 	vldr	s10, [r4]
 800fc1a:	ed94 3a01 	vldr	s6, [r4, #4]
 800fc1e:	ee72 2a85 	vadd.f32	s5, s5, s10
 800fc22:	9004      	str	r0, [sp, #16]
 800fc24:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800fc28:	4620      	mov	r0, r4
 800fc2a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800fc2e:	9408      	str	r4, [sp, #32]
 800fc30:	ee12 ca90 	vmov	ip, s5
 800fc34:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800fc38:	ee77 7a83 	vadd.f32	s15, s15, s6
 800fc3c:	f845 cb08 	str.w	ip, [r5], #8
 800fc40:	ee13 ca90 	vmov	ip, s7
 800fc44:	ed96 2a01 	vldr	s4, [r6, #4]
 800fc48:	ee74 4a05 	vadd.f32	s9, s8, s10
 800fc4c:	edd4 2a01 	vldr	s5, [r4, #4]
 800fc50:	ee37 7a45 	vsub.f32	s14, s14, s10
 800fc54:	ee36 6a02 	vadd.f32	s12, s12, s4
 800fc58:	9500      	str	r5, [sp, #0]
 800fc5a:	460d      	mov	r5, r1
 800fc5c:	ee36 6a22 	vadd.f32	s12, s12, s5
 800fc60:	ed81 6a01 	vstr	s12, [r1, #4]
 800fc64:	4631      	mov	r1, r6
 800fc66:	f841 cb08 	str.w	ip, [r1], #8
 800fc6a:	ee16 ca90 	vmov	ip, s13
 800fc6e:	9106      	str	r1, [sp, #24]
 800fc70:	4639      	mov	r1, r7
 800fc72:	edc6 4a01 	vstr	s9, [r6, #4]
 800fc76:	f841 cb08 	str.w	ip, [r1], #8
 800fc7a:	9102      	str	r1, [sp, #8]
 800fc7c:	ee17 1a90 	vmov	r1, s15
 800fc80:	edc7 5a01 	vstr	s11, [r7, #4]
 800fc84:	f840 1b08 	str.w	r1, [r0], #8
 800fc88:	ea5f 0159 	movs.w	r1, r9, lsr #1
 800fc8c:	9001      	str	r0, [sp, #4]
 800fc8e:	ed84 7a01 	vstr	s14, [r4, #4]
 800fc92:	9107      	str	r1, [sp, #28]
 800fc94:	f000 8135 	beq.w	800ff02 <arm_cfft_radix8by4_f32+0x366>
 800fc98:	3b0c      	subs	r3, #12
 800fc9a:	f102 0920 	add.w	r9, r2, #32
 800fc9e:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800fca2:	4622      	mov	r2, r4
 800fca4:	468b      	mov	fp, r1
 800fca6:	f105 0e10 	add.w	lr, r5, #16
 800fcaa:	4423      	add	r3, r4
 800fcac:	f1a6 0c0c 	sub.w	ip, r6, #12
 800fcb0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800fcb4:	f106 0010 	add.w	r0, r6, #16
 800fcb8:	f1a7 010c 	sub.w	r1, r7, #12
 800fcbc:	f107 0510 	add.w	r5, r7, #16
 800fcc0:	3c0c      	subs	r4, #12
 800fcc2:	3210      	adds	r2, #16
 800fcc4:	ed15 7a02 	vldr	s14, [r5, #-8]
 800fcc8:	f1bb 0b01 	subs.w	fp, fp, #1
 800fccc:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800fcd0:	f1ac 0c08 	sub.w	ip, ip, #8
 800fcd4:	ed50 6a02 	vldr	s13, [r0, #-8]
 800fcd8:	f10e 0e08 	add.w	lr, lr, #8
 800fcdc:	ee77 1a87 	vadd.f32	s3, s15, s14
 800fce0:	ed52 4a02 	vldr	s9, [r2, #-8]
 800fce4:	ed55 5a01 	vldr	s11, [r5, #-4]
 800fce8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fcec:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800fcf0:	f10a 0a08 	add.w	sl, sl, #8
 800fcf4:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800fcf8:	ed10 3a01 	vldr	s6, [r0, #-4]
 800fcfc:	ee37 4a25 	vadd.f32	s8, s14, s11
 800fd00:	ed52 3a01 	vldr	s7, [r2, #-4]
 800fd04:	ee37 7a65 	vsub.f32	s14, s14, s11
 800fd08:	f100 0008 	add.w	r0, r0, #8
 800fd0c:	ee36 6a24 	vadd.f32	s12, s12, s9
 800fd10:	f1a1 0108 	sub.w	r1, r1, #8
 800fd14:	ee73 2a27 	vadd.f32	s5, s6, s15
 800fd18:	f109 0910 	add.w	r9, r9, #16
 800fd1c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800fd20:	f105 0508 	add.w	r5, r5, #8
 800fd24:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800fd28:	ee37 5a66 	vsub.f32	s10, s14, s13
 800fd2c:	ed50 5a03 	vldr	s11, [r0, #-12]
 800fd30:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800fd34:	ed12 6a01 	vldr	s12, [r2, #-4]
 800fd38:	ee36 7a87 	vadd.f32	s14, s13, s14
 800fd3c:	ee74 5a25 	vadd.f32	s11, s8, s11
 800fd40:	f1a4 0408 	sub.w	r4, r4, #8
 800fd44:	ee34 4a43 	vsub.f32	s8, s8, s6
 800fd48:	f108 0818 	add.w	r8, r8, #24
 800fd4c:	ee32 0ae3 	vsub.f32	s0, s5, s7
 800fd50:	f102 0208 	add.w	r2, r2, #8
 800fd54:	ee75 5a86 	vadd.f32	s11, s11, s12
 800fd58:	f1a3 0308 	sub.w	r3, r3, #8
 800fd5c:	ee34 6a63 	vsub.f32	s12, s8, s7
 800fd60:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800fd64:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800fd68:	ee35 5a24 	vadd.f32	s10, s10, s9
 800fd6c:	ed94 4a04 	vldr	s8, [r4, #16]
 800fd70:	ee71 1ae4 	vsub.f32	s3, s3, s9
 800fd74:	ed9c 3a04 	vldr	s6, [ip, #16]
 800fd78:	ee37 7a64 	vsub.f32	s14, s14, s9
 800fd7c:	edd1 7a04 	vldr	s15, [r1, #16]
 800fd80:	ee73 6a04 	vadd.f32	s13, s6, s8
 800fd84:	ed93 8a04 	vldr	s16, [r3, #16]
 800fd88:	edd4 5a03 	vldr	s11, [r4, #12]
 800fd8c:	ee33 3a44 	vsub.f32	s6, s6, s8
 800fd90:	ed9c 2a03 	vldr	s4, [ip, #12]
 800fd94:	ee77 8ac8 	vsub.f32	s17, s15, s16
 800fd98:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800fd9c:	ed91 1a03 	vldr	s2, [r1, #12]
 800fda0:	ee32 4a25 	vadd.f32	s8, s4, s11
 800fda4:	edd3 2a03 	vldr	s5, [r3, #12]
 800fda8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fdac:	ee70 0a88 	vadd.f32	s1, s1, s16
 800fdb0:	ee73 4a41 	vsub.f32	s9, s6, s2
 800fdb4:	ee32 2a65 	vsub.f32	s4, s4, s11
 800fdb8:	edcc 0a04 	vstr	s1, [ip, #16]
 800fdbc:	ee74 0a41 	vsub.f32	s1, s8, s2
 800fdc0:	edd1 6a03 	vldr	s13, [r1, #12]
 800fdc4:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800fdc8:	ed93 9a03 	vldr	s18, [r3, #12]
 800fdcc:	ee78 5a82 	vadd.f32	s11, s17, s4
 800fdd0:	ee34 4a26 	vadd.f32	s8, s8, s13
 800fdd4:	ee70 0ae2 	vsub.f32	s1, s1, s5
 800fdd8:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800fddc:	ee34 4a09 	vadd.f32	s8, s8, s18
 800fde0:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800fde4:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800fde8:	ed8c 4a03 	vstr	s8, [ip, #12]
 800fdec:	ee38 2ac2 	vsub.f32	s4, s17, s4
 800fdf0:	ed1a 1a03 	vldr	s2, [sl, #-12]
 800fdf4:	ed1a 4a04 	vldr	s8, [sl, #-16]
 800fdf8:	ee60 2a01 	vmul.f32	s5, s0, s2
 800fdfc:	ee64 6a81 	vmul.f32	s13, s9, s2
 800fe00:	ee20 8a04 	vmul.f32	s16, s0, s8
 800fe04:	ee64 4a84 	vmul.f32	s9, s9, s8
 800fe08:	ee25 0a01 	vmul.f32	s0, s10, s2
 800fe0c:	ee25 5a04 	vmul.f32	s10, s10, s8
 800fe10:	ee25 4a84 	vmul.f32	s8, s11, s8
 800fe14:	ee65 5a81 	vmul.f32	s11, s11, s2
 800fe18:	ee35 5a62 	vsub.f32	s10, s10, s5
 800fe1c:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800fe20:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800fe24:	ee38 1a00 	vadd.f32	s2, s16, s0
 800fe28:	ed00 5a03 	vstr	s10, [r0, #-12]
 800fe2c:	ed00 1a04 	vstr	s2, [r0, #-16]
 800fe30:	ed81 4a04 	vstr	s8, [r1, #16]
 800fe34:	edc1 5a03 	vstr	s11, [r1, #12]
 800fe38:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 800fe3c:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 800fe40:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 800fe44:	ee66 2a25 	vmul.f32	s5, s12, s11
 800fe48:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800fe4c:	ee21 4a85 	vmul.f32	s8, s3, s10
 800fe50:	ee60 7a85 	vmul.f32	s15, s1, s10
 800fe54:	ee61 1aa5 	vmul.f32	s3, s3, s11
 800fe58:	ee26 6a05 	vmul.f32	s12, s12, s10
 800fe5c:	ee60 5aa5 	vmul.f32	s11, s1, s11
 800fe60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800fe64:	ee34 5a22 	vadd.f32	s10, s8, s5
 800fe68:	ee36 6a61 	vsub.f32	s12, s12, s3
 800fe6c:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800fe70:	ed05 5a04 	vstr	s10, [r5, #-16]
 800fe74:	ed05 6a03 	vstr	s12, [r5, #-12]
 800fe78:	edc4 5a04 	vstr	s11, [r4, #16]
 800fe7c:	edc4 6a03 	vstr	s13, [r4, #12]
 800fe80:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 800fe84:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 800fe88:	ee23 6aa2 	vmul.f32	s12, s7, s5
 800fe8c:	ee67 5a27 	vmul.f32	s11, s14, s15
 800fe90:	ee63 6a27 	vmul.f32	s13, s6, s15
 800fe94:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800fe98:	ee27 7a22 	vmul.f32	s14, s14, s5
 800fe9c:	ee62 7a27 	vmul.f32	s15, s4, s15
 800fea0:	ee23 3a22 	vmul.f32	s6, s6, s5
 800fea4:	ee22 2a22 	vmul.f32	s4, s4, s5
 800fea8:	ee36 6a25 	vadd.f32	s12, s12, s11
 800feac:	ee37 7a63 	vsub.f32	s14, s14, s7
 800feb0:	ee36 2ac2 	vsub.f32	s4, s13, s4
 800feb4:	ee77 7a83 	vadd.f32	s15, s15, s6
 800feb8:	ed02 6a04 	vstr	s12, [r2, #-16]
 800febc:	ed02 7a03 	vstr	s14, [r2, #-12]
 800fec0:	ed83 2a04 	vstr	s4, [r3, #16]
 800fec4:	edc3 7a03 	vstr	s15, [r3, #12]
 800fec8:	f47f aefc 	bne.w	800fcc4 <arm_cfft_radix8by4_f32+0x128>
 800fecc:	9907      	ldr	r1, [sp, #28]
 800fece:	9803      	ldr	r0, [sp, #12]
 800fed0:	00cb      	lsls	r3, r1, #3
 800fed2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800fed6:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800feda:	9103      	str	r1, [sp, #12]
 800fedc:	9900      	ldr	r1, [sp, #0]
 800fede:	4419      	add	r1, r3
 800fee0:	9100      	str	r1, [sp, #0]
 800fee2:	9905      	ldr	r1, [sp, #20]
 800fee4:	4419      	add	r1, r3
 800fee6:	9105      	str	r1, [sp, #20]
 800fee8:	9906      	ldr	r1, [sp, #24]
 800feea:	4419      	add	r1, r3
 800feec:	9106      	str	r1, [sp, #24]
 800feee:	9902      	ldr	r1, [sp, #8]
 800fef0:	4419      	add	r1, r3
 800fef2:	9102      	str	r1, [sp, #8]
 800fef4:	9901      	ldr	r1, [sp, #4]
 800fef6:	4419      	add	r1, r3
 800fef8:	9b04      	ldr	r3, [sp, #16]
 800fefa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fefe:	9101      	str	r1, [sp, #4]
 800ff00:	9304      	str	r3, [sp, #16]
 800ff02:	9b00      	ldr	r3, [sp, #0]
 800ff04:	9902      	ldr	r1, [sp, #8]
 800ff06:	ed93 7a00 	vldr	s14, [r3]
 800ff0a:	edd1 7a00 	vldr	s15, [r1]
 800ff0e:	9a06      	ldr	r2, [sp, #24]
 800ff10:	ee37 6a27 	vadd.f32	s12, s14, s15
 800ff14:	9d01      	ldr	r5, [sp, #4]
 800ff16:	edd2 6a00 	vldr	s13, [r2]
 800ff1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ff1e:	9b02      	ldr	r3, [sp, #8]
 800ff20:	ee76 3a86 	vadd.f32	s7, s13, s12
 800ff24:	ed95 3a00 	vldr	s6, [r5]
 800ff28:	ed93 5a01 	vldr	s10, [r3, #4]
 800ff2c:	ee36 6a66 	vsub.f32	s12, s12, s13
 800ff30:	9b00      	ldr	r3, [sp, #0]
 800ff32:	ee73 3a83 	vadd.f32	s7, s7, s6
 800ff36:	edd5 2a01 	vldr	s5, [r5, #4]
 800ff3a:	ed93 4a01 	vldr	s8, [r3, #4]
 800ff3e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800ff42:	9b00      	ldr	r3, [sp, #0]
 800ff44:	ee74 5a05 	vadd.f32	s11, s8, s10
 800ff48:	edd2 7a01 	vldr	s15, [r2, #4]
 800ff4c:	edc3 3a00 	vstr	s7, [r3]
 800ff50:	ee34 4a45 	vsub.f32	s8, s8, s10
 800ff54:	edd2 3a01 	vldr	s7, [r2, #4]
 800ff58:	ee77 4a87 	vadd.f32	s9, s15, s14
 800ff5c:	ed95 2a01 	vldr	s4, [r5, #4]
 800ff60:	ee75 3aa3 	vadd.f32	s7, s11, s7
 800ff64:	9d05      	ldr	r5, [sp, #20]
 800ff66:	ee34 5a66 	vsub.f32	s10, s8, s13
 800ff6a:	9b00      	ldr	r3, [sp, #0]
 800ff6c:	ee74 4ae2 	vsub.f32	s9, s9, s5
 800ff70:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800ff74:	ee73 3a82 	vadd.f32	s7, s7, s4
 800ff78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ff7a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ff7e:	4621      	mov	r1, r4
 800ff80:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800ff84:	edc3 3a01 	vstr	s7, [r3, #4]
 800ff88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff8c:	edd5 3a00 	vldr	s7, [r5]
 800ff90:	ee76 6a84 	vadd.f32	s13, s13, s8
 800ff94:	ed95 7a01 	vldr	s14, [r5, #4]
 800ff98:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800ff9c:	ee24 4aa3 	vmul.f32	s8, s9, s7
 800ffa0:	2304      	movs	r3, #4
 800ffa2:	ee64 4a87 	vmul.f32	s9, s9, s14
 800ffa6:	ee25 7a07 	vmul.f32	s14, s10, s14
 800ffaa:	ee25 5a23 	vmul.f32	s10, s10, s7
 800ffae:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800ffb2:	ee34 7a07 	vadd.f32	s14, s8, s14
 800ffb6:	ee35 5a64 	vsub.f32	s10, s10, s9
 800ffba:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800ffbe:	ed82 7a00 	vstr	s14, [r2]
 800ffc2:	ed82 5a01 	vstr	s10, [r2, #4]
 800ffc6:	9a03      	ldr	r2, [sp, #12]
 800ffc8:	edd2 4a01 	vldr	s9, [r2, #4]
 800ffcc:	ed92 7a00 	vldr	s14, [r2]
 800ffd0:	9a02      	ldr	r2, [sp, #8]
 800ffd2:	ee26 5a07 	vmul.f32	s10, s12, s14
 800ffd6:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ffda:	ee25 7a87 	vmul.f32	s14, s11, s14
 800ffde:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800ffe2:	ee37 6a46 	vsub.f32	s12, s14, s12
 800ffe6:	ee75 5a25 	vadd.f32	s11, s10, s11
 800ffea:	edc2 5a00 	vstr	s11, [r2]
 800ffee:	ed82 6a01 	vstr	s12, [r2, #4]
 800fff2:	9a04      	ldr	r2, [sp, #16]
 800fff4:	9d01      	ldr	r5, [sp, #4]
 800fff6:	edd2 5a01 	vldr	s11, [r2, #4]
 800fffa:	ed92 7a00 	vldr	s14, [r2]
 800fffe:	ee27 6a87 	vmul.f32	s12, s15, s14
 8010002:	ee26 7a87 	vmul.f32	s14, s13, s14
 8010006:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801000a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801000e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010012:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010016:	edc5 7a01 	vstr	s15, [r5, #4]
 801001a:	edc5 6a00 	vstr	s13, [r5]
 801001e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010020:	686a      	ldr	r2, [r5, #4]
 8010022:	f000 fb57 	bl	80106d4 <arm_radix8_butterfly_f32>
 8010026:	4630      	mov	r0, r6
 8010028:	4621      	mov	r1, r4
 801002a:	686a      	ldr	r2, [r5, #4]
 801002c:	2304      	movs	r3, #4
 801002e:	f000 fb51 	bl	80106d4 <arm_radix8_butterfly_f32>
 8010032:	4638      	mov	r0, r7
 8010034:	4621      	mov	r1, r4
 8010036:	686a      	ldr	r2, [r5, #4]
 8010038:	2304      	movs	r3, #4
 801003a:	f000 fb4b 	bl	80106d4 <arm_radix8_butterfly_f32>
 801003e:	4621      	mov	r1, r4
 8010040:	686a      	ldr	r2, [r5, #4]
 8010042:	2304      	movs	r3, #4
 8010044:	9808      	ldr	r0, [sp, #32]
 8010046:	b00d      	add	sp, #52	; 0x34
 8010048:	ecbd 8b04 	vpop	{d8-d9}
 801004c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010050:	f000 bb40 	b.w	80106d4 <arm_radix8_butterfly_f32>

08010054 <arm_cfft_f32>:
 8010054:	2a01      	cmp	r2, #1
 8010056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801005a:	4606      	mov	r6, r0
 801005c:	4617      	mov	r7, r2
 801005e:	460c      	mov	r4, r1
 8010060:	4698      	mov	r8, r3
 8010062:	8805      	ldrh	r5, [r0, #0]
 8010064:	d055      	beq.n	8010112 <arm_cfft_f32+0xbe>
 8010066:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801006a:	d061      	beq.n	8010130 <arm_cfft_f32+0xdc>
 801006c:	d916      	bls.n	801009c <arm_cfft_f32+0x48>
 801006e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8010072:	d01a      	beq.n	80100aa <arm_cfft_f32+0x56>
 8010074:	d946      	bls.n	8010104 <arm_cfft_f32+0xb0>
 8010076:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801007a:	d059      	beq.n	8010130 <arm_cfft_f32+0xdc>
 801007c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8010080:	d105      	bne.n	801008e <arm_cfft_f32+0x3a>
 8010082:	2301      	movs	r3, #1
 8010084:	6872      	ldr	r2, [r6, #4]
 8010086:	4629      	mov	r1, r5
 8010088:	4620      	mov	r0, r4
 801008a:	f000 fb23 	bl	80106d4 <arm_radix8_butterfly_f32>
 801008e:	f1b8 0f00 	cmp.w	r8, #0
 8010092:	d111      	bne.n	80100b8 <arm_cfft_f32+0x64>
 8010094:	2f01      	cmp	r7, #1
 8010096:	d016      	beq.n	80100c6 <arm_cfft_f32+0x72>
 8010098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801009c:	2d20      	cmp	r5, #32
 801009e:	d047      	beq.n	8010130 <arm_cfft_f32+0xdc>
 80100a0:	d934      	bls.n	801010c <arm_cfft_f32+0xb8>
 80100a2:	2d40      	cmp	r5, #64	; 0x40
 80100a4:	d0ed      	beq.n	8010082 <arm_cfft_f32+0x2e>
 80100a6:	2d80      	cmp	r5, #128	; 0x80
 80100a8:	d1f1      	bne.n	801008e <arm_cfft_f32+0x3a>
 80100aa:	4621      	mov	r1, r4
 80100ac:	4630      	mov	r0, r6
 80100ae:	f7ff fca9 	bl	800fa04 <arm_cfft_radix8by2_f32>
 80100b2:	f1b8 0f00 	cmp.w	r8, #0
 80100b6:	d0ed      	beq.n	8010094 <arm_cfft_f32+0x40>
 80100b8:	68b2      	ldr	r2, [r6, #8]
 80100ba:	4620      	mov	r0, r4
 80100bc:	89b1      	ldrh	r1, [r6, #12]
 80100be:	f000 f83f 	bl	8010140 <arm_bitreversal_32>
 80100c2:	2f01      	cmp	r7, #1
 80100c4:	d1e8      	bne.n	8010098 <arm_cfft_f32+0x44>
 80100c6:	ee07 5a90 	vmov	s15, r5
 80100ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80100ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80100d6:	2d00      	cmp	r5, #0
 80100d8:	d0de      	beq.n	8010098 <arm_cfft_f32+0x44>
 80100da:	f104 0108 	add.w	r1, r4, #8
 80100de:	2300      	movs	r3, #0
 80100e0:	ed11 7a02 	vldr	s14, [r1, #-8]
 80100e4:	3301      	adds	r3, #1
 80100e6:	ed51 7a01 	vldr	s15, [r1, #-4]
 80100ea:	3108      	adds	r1, #8
 80100ec:	429d      	cmp	r5, r3
 80100ee:	ee27 7a26 	vmul.f32	s14, s14, s13
 80100f2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80100f6:	ed01 7a04 	vstr	s14, [r1, #-16]
 80100fa:	ed41 7a03 	vstr	s15, [r1, #-12]
 80100fe:	d1ef      	bne.n	80100e0 <arm_cfft_f32+0x8c>
 8010100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010104:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8010108:	d0bb      	beq.n	8010082 <arm_cfft_f32+0x2e>
 801010a:	e7c0      	b.n	801008e <arm_cfft_f32+0x3a>
 801010c:	2d10      	cmp	r5, #16
 801010e:	d0cc      	beq.n	80100aa <arm_cfft_f32+0x56>
 8010110:	e7bd      	b.n	801008e <arm_cfft_f32+0x3a>
 8010112:	b195      	cbz	r5, 801013a <arm_cfft_f32+0xe6>
 8010114:	f101 030c 	add.w	r3, r1, #12
 8010118:	2200      	movs	r2, #0
 801011a:	ed53 7a02 	vldr	s15, [r3, #-8]
 801011e:	3201      	adds	r2, #1
 8010120:	3308      	adds	r3, #8
 8010122:	eef1 7a67 	vneg.f32	s15, s15
 8010126:	4295      	cmp	r5, r2
 8010128:	ed43 7a04 	vstr	s15, [r3, #-16]
 801012c:	d1f5      	bne.n	801011a <arm_cfft_f32+0xc6>
 801012e:	e79a      	b.n	8010066 <arm_cfft_f32+0x12>
 8010130:	4621      	mov	r1, r4
 8010132:	4630      	mov	r0, r6
 8010134:	f7ff fd32 	bl	800fb9c <arm_cfft_radix8by4_f32>
 8010138:	e7a9      	b.n	801008e <arm_cfft_f32+0x3a>
 801013a:	2b00      	cmp	r3, #0
 801013c:	d0ac      	beq.n	8010098 <arm_cfft_f32+0x44>
 801013e:	e7bb      	b.n	80100b8 <arm_cfft_f32+0x64>

08010140 <arm_bitreversal_32>:
 8010140:	b321      	cbz	r1, 801018c <arm_bitreversal_32+0x4c>
 8010142:	f102 0c02 	add.w	ip, r2, #2
 8010146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801014a:	4690      	mov	r8, r2
 801014c:	2500      	movs	r5, #0
 801014e:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 8010152:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 8010156:	3502      	adds	r5, #2
 8010158:	08a4      	lsrs	r4, r4, #2
 801015a:	089b      	lsrs	r3, r3, #2
 801015c:	428d      	cmp	r5, r1
 801015e:	ea4f 0784 	mov.w	r7, r4, lsl #2
 8010162:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 8010166:	ea4f 0683 	mov.w	r6, r3, lsl #2
 801016a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801016e:	f107 0704 	add.w	r7, r7, #4
 8010172:	f106 0604 	add.w	r6, r6, #4
 8010176:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 801017a:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 801017e:	59c4      	ldr	r4, [r0, r7]
 8010180:	5983      	ldr	r3, [r0, r6]
 8010182:	51c3      	str	r3, [r0, r7]
 8010184:	5184      	str	r4, [r0, r6]
 8010186:	d3e2      	bcc.n	801014e <arm_bitreversal_32+0xe>
 8010188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801018c:	4770      	bx	lr
 801018e:	bf00      	nop

08010190 <arm_fir_decimate_init_f32>:
 8010190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010194:	e9dd 8c06 	ldrd	r8, ip, [sp, #24]
 8010198:	fbbc f4f2 	udiv	r4, ip, r2
 801019c:	fb02 c414 	mls	r4, r2, r4, ip
 80101a0:	b99c      	cbnz	r4, 80101ca <arm_fir_decimate_init_f32+0x3a>
 80101a2:	460f      	mov	r7, r1
 80101a4:	4616      	mov	r6, r2
 80101a6:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80101aa:	4605      	mov	r5, r0
 80101ac:	443a      	add	r2, r7
 80101ae:	8069      	strh	r1, [r5, #2]
 80101b0:	6043      	str	r3, [r0, #4]
 80101b2:	4621      	mov	r1, r4
 80101b4:	4462      	add	r2, ip
 80101b6:	4640      	mov	r0, r8
 80101b8:	0092      	lsls	r2, r2, #2
 80101ba:	f000 fd89 	bl	8010cd0 <memset>
 80101be:	4620      	mov	r0, r4
 80101c0:	f8c5 8008 	str.w	r8, [r5, #8]
 80101c4:	702e      	strb	r6, [r5, #0]
 80101c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101ca:	f06f 0001 	mvn.w	r0, #1
 80101ce:	e7fa      	b.n	80101c6 <arm_fir_decimate_init_f32+0x36>

080101d0 <arm_fir_decimate_f32>:
 80101d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d4:	4605      	mov	r5, r0
 80101d6:	b08d      	sub	sp, #52	; 0x34
 80101d8:	4694      	mov	ip, r2
 80101da:	782c      	ldrb	r4, [r5, #0]
 80101dc:	886f      	ldrh	r7, [r5, #2]
 80101de:	9001      	str	r0, [sp, #4]
 80101e0:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 80101e4:	68ae      	ldr	r6, [r5, #8]
 80101e6:	4438      	add	r0, r7
 80101e8:	686d      	ldr	r5, [r5, #4]
 80101ea:	9207      	str	r2, [sp, #28]
 80101ec:	970a      	str	r7, [sp, #40]	; 0x28
 80101ee:	eb06 0b80 	add.w	fp, r6, r0, lsl #2
 80101f2:	9508      	str	r5, [sp, #32]
 80101f4:	fbb3 f3f4 	udiv	r3, r3, r4
 80101f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80101fa:	089b      	lsrs	r3, r3, #2
 80101fc:	9309      	str	r3, [sp, #36]	; 0x24
 80101fe:	f000 80ef 	beq.w	80103e0 <arm_fir_decimate_f32+0x210>
 8010202:	08ba      	lsrs	r2, r7, #2
 8010204:	462b      	mov	r3, r5
 8010206:	3510      	adds	r5, #16
 8010208:	f007 0703 	and.w	r7, r7, #3
 801020c:	9205      	str	r2, [sp, #20]
 801020e:	0112      	lsls	r2, r2, #4
 8010210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010212:	f10c 0910 	add.w	r9, ip, #16
 8010216:	4413      	add	r3, r2
 8010218:	9100      	str	r1, [sp, #0]
 801021a:	eb05 0e02 	add.w	lr, r5, r2
 801021e:	4611      	mov	r1, r2
 8010220:	9503      	str	r5, [sp, #12]
 8010222:	9704      	str	r7, [sp, #16]
 8010224:	9002      	str	r0, [sp, #8]
 8010226:	9306      	str	r3, [sp, #24]
 8010228:	00a4      	lsls	r4, r4, #2
 801022a:	4658      	mov	r0, fp
 801022c:	9a00      	ldr	r2, [sp, #0]
 801022e:	4623      	mov	r3, r4
 8010230:	f852 5b04 	ldr.w	r5, [r2], #4
 8010234:	3b01      	subs	r3, #1
 8010236:	f840 5b04 	str.w	r5, [r0], #4
 801023a:	d1f9      	bne.n	8010230 <arm_fir_decimate_f32+0x60>
 801023c:	9b01      	ldr	r3, [sp, #4]
 801023e:	00a4      	lsls	r4, r4, #2
 8010240:	eddf 0abe 	vldr	s1, [pc, #760]	; 801053c <arm_fir_decimate_f32+0x36c>
 8010244:	f893 8000 	ldrb.w	r8, [r3]
 8010248:	44a3      	add	fp, r4
 801024a:	9b00      	ldr	r3, [sp, #0]
 801024c:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8010250:	4423      	add	r3, r4
 8010252:	eb06 0708 	add.w	r7, r6, r8
 8010256:	9300      	str	r3, [sp, #0]
 8010258:	eb07 0c08 	add.w	ip, r7, r8
 801025c:	9b05      	ldr	r3, [sp, #20]
 801025e:	eb0c 0a08 	add.w	sl, ip, r8
 8010262:	2b00      	cmp	r3, #0
 8010264:	f000 815c 	beq.w	8010520 <arm_fir_decimate_f32+0x350>
 8010268:	eef0 4a60 	vmov.f32	s9, s1
 801026c:	9b03      	ldr	r3, [sp, #12]
 801026e:	eef0 7a60 	vmov.f32	s15, s1
 8010272:	f106 0510 	add.w	r5, r6, #16
 8010276:	eeb0 7a60 	vmov.f32	s14, s1
 801027a:	f107 0410 	add.w	r4, r7, #16
 801027e:	f10c 0010 	add.w	r0, ip, #16
 8010282:	f10a 0210 	add.w	r2, sl, #16
 8010286:	ed53 5a04 	vldr	s11, [r3, #-16]
 801028a:	3310      	adds	r3, #16
 801028c:	ed12 5a04 	vldr	s10, [r2, #-16]
 8010290:	3510      	adds	r5, #16
 8010292:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 8010296:	3410      	adds	r4, #16
 8010298:	ed14 1a08 	vldr	s2, [r4, #-32]	; 0xffffffe0
 801029c:	3010      	adds	r0, #16
 801029e:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 80102a2:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80102a6:	ee25 1a81 	vmul.f32	s2, s11, s2
 80102aa:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 80102ae:	ee65 3aa3 	vmul.f32	s7, s11, s7
 80102b2:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 80102b6:	ee65 5a85 	vmul.f32	s11, s11, s10
 80102ba:	ed15 2a07 	vldr	s4, [r5, #-28]	; 0xffffffe4
 80102be:	ed12 5a03 	vldr	s10, [r2, #-12]
 80102c2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80102c6:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 80102ca:	ee73 1aa4 	vadd.f32	s3, s7, s9
 80102ce:	ee26 2a02 	vmul.f32	s4, s12, s4
 80102d2:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 80102d6:	ee31 1a27 	vadd.f32	s2, s2, s15
 80102da:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 80102de:	ee66 7a22 	vmul.f32	s15, s12, s5
 80102e2:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 80102e6:	ee26 3a03 	vmul.f32	s6, s12, s6
 80102ea:	ed50 4a06 	vldr	s9, [r0, #-24]	; 0xffffffe8
 80102ee:	ee75 5aa0 	vadd.f32	s11, s11, s1
 80102f2:	ed52 0a02 	vldr	s1, [r2, #-8]
 80102f6:	ee26 6a05 	vmul.f32	s12, s12, s10
 80102fa:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 80102fe:	ee72 2a07 	vadd.f32	s5, s4, s14
 8010302:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8010306:	ee77 7a81 	vadd.f32	s15, s15, s2
 801030a:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 801030e:	ee33 3a21 	vadd.f32	s6, s6, s3
 8010312:	ed14 1a05 	vldr	s2, [r4, #-20]	; 0xffffffec
 8010316:	ee66 3aa3 	vmul.f32	s7, s13, s7
 801031a:	ed52 1a01 	vldr	s3, [r2, #-4]
 801031e:	ee26 4a84 	vmul.f32	s8, s13, s8
 8010322:	459e      	cmp	lr, r3
 8010324:	ee66 4aa4 	vmul.f32	s9, s13, s9
 8010328:	f102 0210 	add.w	r2, r2, #16
 801032c:	ee66 6aa0 	vmul.f32	s13, s13, s1
 8010330:	ee36 6a25 	vadd.f32	s12, s12, s11
 8010334:	ee25 7a07 	vmul.f32	s14, s10, s14
 8010338:	ee34 4a27 	vadd.f32	s8, s8, s15
 801033c:	ee74 4a83 	vadd.f32	s9, s9, s6
 8010340:	ee65 7a01 	vmul.f32	s15, s10, s2
 8010344:	ee25 3a02 	vmul.f32	s6, s10, s4
 8010348:	ee73 3aa2 	vadd.f32	s7, s7, s5
 801034c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010350:	ee25 5a21 	vmul.f32	s10, s10, s3
 8010354:	ee37 7a23 	vadd.f32	s14, s14, s7
 8010358:	ee77 7a84 	vadd.f32	s15, s15, s8
 801035c:	ee73 4a24 	vadd.f32	s9, s6, s9
 8010360:	ee75 0a26 	vadd.f32	s1, s10, s13
 8010364:	d18f      	bne.n	8010286 <arm_fir_decimate_f32+0xb6>
 8010366:	440e      	add	r6, r1
 8010368:	440f      	add	r7, r1
 801036a:	448c      	add	ip, r1
 801036c:	eb0a 0001 	add.w	r0, sl, r1
 8010370:	9a06      	ldr	r2, [sp, #24]
 8010372:	9b04      	ldr	r3, [sp, #16]
 8010374:	b1db      	cbz	r3, 80103ae <arm_fir_decimate_f32+0x1de>
 8010376:	ecb2 5a01 	vldmia	r2!, {s10}
 801037a:	3b01      	subs	r3, #1
 801037c:	ecf6 2a01 	vldmia	r6!, {s5}
 8010380:	ecf7 3a01 	vldmia	r7!, {s7}
 8010384:	ecbc 4a01 	vldmia	ip!, {s8}
 8010388:	ee65 2a22 	vmul.f32	s5, s10, s5
 801038c:	ecf0 6a01 	vldmia	r0!, {s13}
 8010390:	ee65 3a23 	vmul.f32	s7, s10, s7
 8010394:	ee25 4a04 	vmul.f32	s8, s10, s8
 8010398:	ee25 5a26 	vmul.f32	s10, s10, s13
 801039c:	ee37 7a22 	vadd.f32	s14, s14, s5
 80103a0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80103a4:	ee74 4a84 	vadd.f32	s9, s9, s8
 80103a8:	ee70 0a85 	vadd.f32	s1, s1, s10
 80103ac:	d1e3      	bne.n	8010376 <arm_fir_decimate_f32+0x1a6>
 80103ae:	9b02      	ldr	r3, [sp, #8]
 80103b0:	eb0a 0608 	add.w	r6, sl, r8
 80103b4:	ed09 7a04 	vstr	s14, [r9, #-16]
 80103b8:	f109 0910 	add.w	r9, r9, #16
 80103bc:	3b01      	subs	r3, #1
 80103be:	ed49 7a07 	vstr	s15, [r9, #-28]	; 0xffffffe4
 80103c2:	ed49 4a06 	vstr	s9, [r9, #-24]	; 0xffffffe8
 80103c6:	ed49 0a05 	vstr	s1, [r9, #-20]	; 0xffffffec
 80103ca:	9302      	str	r3, [sp, #8]
 80103cc:	d002      	beq.n	80103d4 <arm_fir_decimate_f32+0x204>
 80103ce:	9b01      	ldr	r3, [sp, #4]
 80103d0:	781c      	ldrb	r4, [r3, #0]
 80103d2:	e729      	b.n	8010228 <arm_fir_decimate_f32+0x58>
 80103d4:	9b07      	ldr	r3, [sp, #28]
 80103d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103d8:	9900      	ldr	r1, [sp, #0]
 80103da:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80103de:	9307      	str	r3, [sp, #28]
 80103e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103e2:	f013 0803 	ands.w	r8, r3, #3
 80103e6:	d067      	beq.n	80104b8 <arm_fir_decimate_f32+0x2e8>
 80103e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103ea:	9808      	ldr	r0, [sp, #32]
 80103ec:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80103f0:	9d07      	ldr	r5, [sp, #28]
 80103f2:	4602      	mov	r2, r0
 80103f4:	f003 0703 	and.w	r7, r3, #3
 80103f8:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
 80103fc:	f8cd e000 	str.w	lr, [sp]
 8010400:	3210      	adds	r2, #16
 8010402:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 8010406:	eb00 090c 	add.w	r9, r0, ip
 801040a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801040e:	eb02 040c 	add.w	r4, r2, ip
 8010412:	46aa      	mov	sl, r5
 8010414:	9203      	str	r2, [sp, #12]
 8010416:	f89e 5000 	ldrb.w	r5, [lr]
 801041a:	4658      	mov	r0, fp
 801041c:	460a      	mov	r2, r1
 801041e:	462b      	mov	r3, r5
 8010420:	ecf2 7a01 	vldmia	r2!, {s15}
 8010424:	3b01      	subs	r3, #1
 8010426:	ece0 7a01 	vstmia	r0!, {s15}
 801042a:	d1f9      	bne.n	8010420 <arm_fir_decimate_f32+0x250>
 801042c:	00ad      	lsls	r5, r5, #2
 801042e:	9b00      	ldr	r3, [sp, #0]
 8010430:	4429      	add	r1, r5
 8010432:	44ab      	add	fp, r5
 8010434:	2b00      	cmp	r3, #0
 8010436:	d07c      	beq.n	8010532 <arm_fir_decimate_f32+0x362>
 8010438:	9b03      	ldr	r3, [sp, #12]
 801043a:	f106 0210 	add.w	r2, r6, #16
 801043e:	eddf 7a3f 	vldr	s15, [pc, #252]	; 801053c <arm_fir_decimate_f32+0x36c>
 8010442:	ed13 7a04 	vldr	s14, [r3, #-16]
 8010446:	3310      	adds	r3, #16
 8010448:	ed52 6a04 	vldr	s13, [r2, #-16]
 801044c:	3210      	adds	r2, #16
 801044e:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8010452:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010456:	ed52 5a07 	vldr	s11, [r2, #-28]	; 0xffffffe4
 801045a:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 801045e:	ee26 6a25 	vmul.f32	s12, s12, s11
 8010462:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
 8010466:	ee77 7a27 	vadd.f32	s15, s14, s15
 801046a:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 801046e:	ee26 7a85 	vmul.f32	s14, s13, s10
 8010472:	ed52 6a05 	vldr	s13, [r2, #-20]	; 0xffffffec
 8010476:	429c      	cmp	r4, r3
 8010478:	ee76 7a27 	vadd.f32	s15, s12, s15
 801047c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8010480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010484:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010488:	d1db      	bne.n	8010442 <arm_fir_decimate_f32+0x272>
 801048a:	eb06 000c 	add.w	r0, r6, ip
 801048e:	464a      	mov	r2, r9
 8010490:	b157      	cbz	r7, 80104a8 <arm_fir_decimate_f32+0x2d8>
 8010492:	463b      	mov	r3, r7
 8010494:	ecb2 7a01 	vldmia	r2!, {s14}
 8010498:	3b01      	subs	r3, #1
 801049a:	ecf0 6a01 	vldmia	r0!, {s13}
 801049e:	ee27 7a26 	vmul.f32	s14, s14, s13
 80104a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80104a6:	d1f5      	bne.n	8010494 <arm_fir_decimate_f32+0x2c4>
 80104a8:	f89e 3000 	ldrb.w	r3, [lr]
 80104ac:	ecea 7a01 	vstmia	sl!, {s15}
 80104b0:	45c2      	cmp	sl, r8
 80104b2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 80104b6:	d1ae      	bne.n	8010416 <arm_fir_decimate_f32+0x246>
 80104b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104ba:	1e5c      	subs	r4, r3, #1
 80104bc:	9b01      	ldr	r3, [sp, #4]
 80104be:	08a5      	lsrs	r5, r4, #2
 80104c0:	689f      	ldr	r7, [r3, #8]
 80104c2:	d01d      	beq.n	8010500 <arm_fir_decimate_f32+0x330>
 80104c4:	f106 0210 	add.w	r2, r6, #16
 80104c8:	f107 0310 	add.w	r3, r7, #16
 80104cc:	4629      	mov	r1, r5
 80104ce:	f852 0c10 	ldr.w	r0, [r2, #-16]
 80104d2:	3901      	subs	r1, #1
 80104d4:	f102 0210 	add.w	r2, r2, #16
 80104d8:	f103 0310 	add.w	r3, r3, #16
 80104dc:	f843 0c20 	str.w	r0, [r3, #-32]
 80104e0:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 80104e4:	f843 0c1c 	str.w	r0, [r3, #-28]
 80104e8:	f852 0c18 	ldr.w	r0, [r2, #-24]
 80104ec:	f843 0c18 	str.w	r0, [r3, #-24]
 80104f0:	f852 0c14 	ldr.w	r0, [r2, #-20]
 80104f4:	f843 0c14 	str.w	r0, [r3, #-20]
 80104f8:	d1e9      	bne.n	80104ce <arm_fir_decimate_f32+0x2fe>
 80104fa:	012d      	lsls	r5, r5, #4
 80104fc:	442e      	add	r6, r5
 80104fe:	442f      	add	r7, r5
 8010500:	f014 0403 	ands.w	r4, r4, #3
 8010504:	d009      	beq.n	801051a <arm_fir_decimate_f32+0x34a>
 8010506:	6833      	ldr	r3, [r6, #0]
 8010508:	3c01      	subs	r4, #1
 801050a:	603b      	str	r3, [r7, #0]
 801050c:	d005      	beq.n	801051a <arm_fir_decimate_f32+0x34a>
 801050e:	6873      	ldr	r3, [r6, #4]
 8010510:	2c01      	cmp	r4, #1
 8010512:	607b      	str	r3, [r7, #4]
 8010514:	d001      	beq.n	801051a <arm_fir_decimate_f32+0x34a>
 8010516:	68b3      	ldr	r3, [r6, #8]
 8010518:	60bb      	str	r3, [r7, #8]
 801051a:	b00d      	add	sp, #52	; 0x34
 801051c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010520:	4650      	mov	r0, sl
 8010522:	9a08      	ldr	r2, [sp, #32]
 8010524:	eef0 4a60 	vmov.f32	s9, s1
 8010528:	eef0 7a60 	vmov.f32	s15, s1
 801052c:	eeb0 7a60 	vmov.f32	s14, s1
 8010530:	e71f      	b.n	8010372 <arm_fir_decimate_f32+0x1a2>
 8010532:	9a08      	ldr	r2, [sp, #32]
 8010534:	4630      	mov	r0, r6
 8010536:	eddf 7a01 	vldr	s15, [pc, #4]	; 801053c <arm_fir_decimate_f32+0x36c>
 801053a:	e7a9      	b.n	8010490 <arm_fir_decimate_f32+0x2c0>
 801053c:	00000000 	.word	0x00000000

08010540 <arm_cmplx_mult_cmplx_f32>:
 8010540:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8010544:	b4f0      	push	{r4, r5, r6, r7}
 8010546:	d073      	beq.n	8010630 <arm_cmplx_mult_cmplx_f32+0xf0>
 8010548:	f100 0620 	add.w	r6, r0, #32
 801054c:	f101 0520 	add.w	r5, r1, #32
 8010550:	f102 0420 	add.w	r4, r2, #32
 8010554:	4667      	mov	r7, ip
 8010556:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 801055a:	3f01      	subs	r7, #1
 801055c:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 8010560:	f105 0520 	add.w	r5, r5, #32
 8010564:	ed15 7a10 	vldr	s14, [r5, #-64]	; 0xffffffc0
 8010568:	f106 0620 	add.w	r6, r6, #32
 801056c:	ed56 6a0f 	vldr	s13, [r6, #-60]	; 0xffffffc4
 8010570:	f104 0420 	add.w	r4, r4, #32
 8010574:	ee27 6a87 	vmul.f32	s12, s15, s14
 8010578:	ee26 7a87 	vmul.f32	s14, s13, s14
 801057c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010580:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8010584:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010588:	ee76 6a66 	vsub.f32	s13, s12, s13
 801058c:	ed44 7a0f 	vstr	s15, [r4, #-60]	; 0xffffffc4
 8010590:	ed44 6a10 	vstr	s13, [r4, #-64]	; 0xffffffc0
 8010594:	ed55 5a0d 	vldr	s11, [r5, #-52]	; 0xffffffcc
 8010598:	ed56 7a0e 	vldr	s15, [r6, #-56]	; 0xffffffc8
 801059c:	ed15 7a0e 	vldr	s14, [r5, #-56]	; 0xffffffc8
 80105a0:	ed56 6a0d 	vldr	s13, [r6, #-52]	; 0xffffffcc
 80105a4:	ee27 6a87 	vmul.f32	s12, s15, s14
 80105a8:	ee26 7a87 	vmul.f32	s14, s13, s14
 80105ac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80105b0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80105b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80105b8:	ee76 6a66 	vsub.f32	s13, s12, s13
 80105bc:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 80105c0:	ed44 6a0e 	vstr	s13, [r4, #-56]	; 0xffffffc8
 80105c4:	ed55 5a0b 	vldr	s11, [r5, #-44]	; 0xffffffd4
 80105c8:	ed56 7a0c 	vldr	s15, [r6, #-48]	; 0xffffffd0
 80105cc:	ed15 7a0c 	vldr	s14, [r5, #-48]	; 0xffffffd0
 80105d0:	ed56 6a0b 	vldr	s13, [r6, #-44]	; 0xffffffd4
 80105d4:	ee27 6a87 	vmul.f32	s12, s15, s14
 80105d8:	ee26 7a87 	vmul.f32	s14, s13, s14
 80105dc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80105e0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80105e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80105e8:	ee76 6a66 	vsub.f32	s13, s12, s13
 80105ec:	ed44 7a0b 	vstr	s15, [r4, #-44]	; 0xffffffd4
 80105f0:	ed44 6a0c 	vstr	s13, [r4, #-48]	; 0xffffffd0
 80105f4:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 80105f8:	ed15 7a0a 	vldr	s14, [r5, #-40]	; 0xffffffd8
 80105fc:	ed56 6a09 	vldr	s13, [r6, #-36]	; 0xffffffdc
 8010600:	ed55 5a09 	vldr	s11, [r5, #-36]	; 0xffffffdc
 8010604:	ee27 6a87 	vmul.f32	s12, s15, s14
 8010608:	ee26 7a87 	vmul.f32	s14, s13, s14
 801060c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010610:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8010614:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010618:	ee76 6a66 	vsub.f32	s13, s12, s13
 801061c:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 8010620:	ed44 6a0a 	vstr	s13, [r4, #-40]	; 0xffffffd8
 8010624:	d197      	bne.n	8010556 <arm_cmplx_mult_cmplx_f32+0x16>
 8010626:	ea4f 144c 	mov.w	r4, ip, lsl #5
 801062a:	4420      	add	r0, r4
 801062c:	4421      	add	r1, r4
 801062e:	4422      	add	r2, r4
 8010630:	f013 0303 	ands.w	r3, r3, #3
 8010634:	d04b      	beq.n	80106ce <arm_cmplx_mult_cmplx_f32+0x18e>
 8010636:	edd0 5a00 	vldr	s11, [r0]
 801063a:	3b01      	subs	r3, #1
 801063c:	edd1 7a00 	vldr	s15, [r1]
 8010640:	edd0 6a01 	vldr	s13, [r0, #4]
 8010644:	ed91 7a01 	vldr	s14, [r1, #4]
 8010648:	ee27 6aa5 	vmul.f32	s12, s15, s11
 801064c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010650:	ee67 6a26 	vmul.f32	s13, s14, s13
 8010654:	ee27 7a25 	vmul.f32	s14, s14, s11
 8010658:	ee76 6a66 	vsub.f32	s13, s12, s13
 801065c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010660:	edc2 6a00 	vstr	s13, [r2]
 8010664:	edc2 7a01 	vstr	s15, [r2, #4]
 8010668:	d031      	beq.n	80106ce <arm_cmplx_mult_cmplx_f32+0x18e>
 801066a:	edd0 7a02 	vldr	s15, [r0, #8]
 801066e:	2b01      	cmp	r3, #1
 8010670:	ed91 7a02 	vldr	s14, [r1, #8]
 8010674:	edd0 6a03 	vldr	s13, [r0, #12]
 8010678:	edd1 5a03 	vldr	s11, [r1, #12]
 801067c:	ee27 6a87 	vmul.f32	s12, s15, s14
 8010680:	ee26 7a87 	vmul.f32	s14, s13, s14
 8010684:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010688:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801068c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010690:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010694:	edc2 7a03 	vstr	s15, [r2, #12]
 8010698:	edc2 6a02 	vstr	s13, [r2, #8]
 801069c:	d017      	beq.n	80106ce <arm_cmplx_mult_cmplx_f32+0x18e>
 801069e:	edd0 7a04 	vldr	s15, [r0, #16]
 80106a2:	ed91 7a04 	vldr	s14, [r1, #16]
 80106a6:	edd0 6a05 	vldr	s13, [r0, #20]
 80106aa:	edd1 5a05 	vldr	s11, [r1, #20]
 80106ae:	ee27 6a87 	vmul.f32	s12, s15, s14
 80106b2:	ee26 7a87 	vmul.f32	s14, s13, s14
 80106b6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80106ba:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80106be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80106c2:	ee76 6a66 	vsub.f32	s13, s12, s13
 80106c6:	edc2 7a05 	vstr	s15, [r2, #20]
 80106ca:	edc2 6a04 	vstr	s13, [r2, #16]
 80106ce:	bcf0      	pop	{r4, r5, r6, r7}
 80106d0:	4770      	bx	lr
 80106d2:	bf00      	nop

080106d4 <arm_radix8_butterfly_f32>:
 80106d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106d8:	ed2d 8b10 	vpush	{d8-d15}
 80106dc:	b095      	sub	sp, #84	; 0x54
 80106de:	468a      	mov	sl, r1
 80106e0:	468b      	mov	fp, r1
 80106e2:	eddf 8abb 	vldr	s17, [pc, #748]	; 80109d0 <arm_radix8_butterfly_f32+0x2fc>
 80106e6:	9012      	str	r0, [sp, #72]	; 0x48
 80106e8:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80106ec:	4603      	mov	r3, r0
 80106ee:	3304      	adds	r3, #4
 80106f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80106f2:	ea4f 02db 	mov.w	r2, fp, lsr #3
 80106f6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80106f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80106fc:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8010700:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8010704:	920f      	str	r2, [sp, #60]	; 0x3c
 8010706:	9303      	str	r3, [sp, #12]
 8010708:	0153      	lsls	r3, r2, #5
 801070a:	0114      	lsls	r4, r2, #4
 801070c:	eba9 0002 	sub.w	r0, r9, r2
 8010710:	18ce      	adds	r6, r1, r3
 8010712:	9302      	str	r3, [sp, #8]
 8010714:	0097      	lsls	r7, r2, #2
 8010716:	4613      	mov	r3, r2
 8010718:	eb06 0509 	add.w	r5, r6, r9
 801071c:	9004      	str	r0, [sp, #16]
 801071e:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 8010722:	1bd2      	subs	r2, r2, r7
 8010724:	eb05 0109 	add.w	r1, r5, r9
 8010728:	441f      	add	r7, r3
 801072a:	9405      	str	r4, [sp, #20]
 801072c:	f109 0004 	add.w	r0, r9, #4
 8010730:	9101      	str	r1, [sp, #4]
 8010732:	1d21      	adds	r1, r4, #4
 8010734:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010736:	f04f 0e00 	mov.w	lr, #0
 801073a:	9c01      	ldr	r4, [sp, #4]
 801073c:	4418      	add	r0, r3
 801073e:	4419      	add	r1, r3
 8010740:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8010744:	9b02      	ldr	r3, [sp, #8]
 8010746:	00fc      	lsls	r4, r7, #3
 8010748:	18d7      	adds	r7, r2, r3
 801074a:	9b04      	ldr	r3, [sp, #16]
 801074c:	9406      	str	r4, [sp, #24]
 801074e:	00db      	lsls	r3, r3, #3
 8010750:	9c01      	ldr	r4, [sp, #4]
 8010752:	9307      	str	r3, [sp, #28]
 8010754:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8010758:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801075c:	9304      	str	r3, [sp, #16]
 801075e:	9b03      	ldr	r3, [sp, #12]
 8010760:	edd6 6a00 	vldr	s13, [r6]
 8010764:	44de      	add	lr, fp
 8010766:	ed5c 7a01 	vldr	s15, [ip, #-4]
 801076a:	ed94 7a00 	vldr	s14, [r4]
 801076e:	45f2      	cmp	sl, lr
 8010770:	ed10 6a01 	vldr	s12, [r0, #-4]
 8010774:	ee37 2aa6 	vadd.f32	s4, s15, s13
 8010778:	edd5 2a00 	vldr	s5, [r5]
 801077c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010780:	edd7 3a00 	vldr	s7, [r7]
 8010784:	ed11 5a01 	vldr	s10, [r1, #-4]
 8010788:	ee36 3a22 	vadd.f32	s6, s12, s5
 801078c:	edd2 6a00 	vldr	s13, [r2]
 8010790:	ee75 5a07 	vadd.f32	s11, s10, s14
 8010794:	ee36 4aa3 	vadd.f32	s8, s13, s7
 8010798:	ee76 6ae3 	vsub.f32	s13, s13, s7
 801079c:	ee72 4a25 	vadd.f32	s9, s4, s11
 80107a0:	ee73 3a04 	vadd.f32	s7, s6, s8
 80107a4:	ee35 5a47 	vsub.f32	s10, s10, s14
 80107a8:	ee36 7a62 	vsub.f32	s14, s12, s5
 80107ac:	ee32 2a65 	vsub.f32	s4, s4, s11
 80107b0:	ee74 5aa3 	vadd.f32	s11, s9, s7
 80107b4:	ee74 4ae3 	vsub.f32	s9, s9, s7
 80107b8:	ee37 6a66 	vsub.f32	s12, s14, s13
 80107bc:	ed4c 5a01 	vstr	s11, [ip, #-4]
 80107c0:	ee33 3a44 	vsub.f32	s6, s6, s8
 80107c4:	edc6 4a00 	vstr	s9, [r6]
 80107c8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80107cc:	ed97 4a01 	vldr	s8, [r7, #4]
 80107d0:	ee66 6a28 	vmul.f32	s13, s12, s17
 80107d4:	edd0 5a00 	vldr	s11, [r0]
 80107d8:	ed95 6a01 	vldr	s12, [r5, #4]
 80107dc:	ee27 7a28 	vmul.f32	s14, s14, s17
 80107e0:	edd2 3a01 	vldr	s7, [r2, #4]
 80107e4:	ee77 2aa6 	vadd.f32	s5, s15, s13
 80107e8:	ee75 4ac6 	vsub.f32	s9, s11, s12
 80107ec:	ed96 1a01 	vldr	s2, [r6, #4]
 80107f0:	ee33 0ac4 	vsub.f32	s0, s7, s8
 80107f4:	edd4 0a01 	vldr	s1, [r4, #4]
 80107f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80107fc:	eddc 6a00 	vldr	s13, [ip]
 8010800:	ee75 5a86 	vadd.f32	s11, s11, s12
 8010804:	ed91 6a00 	vldr	s12, [r1]
 8010808:	ee73 3a84 	vadd.f32	s7, s7, s8
 801080c:	ee74 1a80 	vadd.f32	s3, s9, s0
 8010810:	ee36 4a81 	vadd.f32	s8, s13, s2
 8010814:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8010818:	ee76 6ac1 	vsub.f32	s13, s13, s2
 801081c:	ee36 1a20 	vadd.f32	s2, s12, s1
 8010820:	ee61 1aa8 	vmul.f32	s3, s3, s17
 8010824:	ee36 6a60 	vsub.f32	s12, s12, s1
 8010828:	ee64 4aa8 	vmul.f32	s9, s9, s17
 801082c:	ee75 0aa3 	vadd.f32	s1, s11, s7
 8010830:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8010834:	ee74 3a01 	vadd.f32	s7, s8, s2
 8010838:	ee34 4a41 	vsub.f32	s8, s8, s2
 801083c:	ee36 1a21 	vadd.f32	s2, s12, s3
 8010840:	ee33 0aa0 	vadd.f32	s0, s7, s1
 8010844:	ee36 6a61 	vsub.f32	s12, s12, s3
 8010848:	ee73 3ae0 	vsub.f32	s7, s7, s1
 801084c:	ee76 1aa4 	vadd.f32	s3, s13, s9
 8010850:	ed8c 0a00 	vstr	s0, [ip]
 8010854:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8010858:	449c      	add	ip, r3
 801085a:	ee75 4a07 	vadd.f32	s9, s10, s14
 801085e:	edc6 3a01 	vstr	s7, [r6, #4]
 8010862:	ee35 7a47 	vsub.f32	s14, s10, s14
 8010866:	441e      	add	r6, r3
 8010868:	ee32 5a25 	vadd.f32	s10, s4, s11
 801086c:	ee72 5a65 	vsub.f32	s11, s4, s11
 8010870:	ee72 3a81 	vadd.f32	s7, s5, s2
 8010874:	ed01 5a01 	vstr	s10, [r1, #-4]
 8010878:	ee34 2a43 	vsub.f32	s4, s8, s6
 801087c:	edc4 5a00 	vstr	s11, [r4]
 8010880:	ee37 5a86 	vadd.f32	s10, s15, s12
 8010884:	ee71 5ae4 	vsub.f32	s11, s3, s9
 8010888:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801088c:	ed81 2a00 	vstr	s4, [r1]
 8010890:	ee36 6ac7 	vsub.f32	s12, s13, s14
 8010894:	4419      	add	r1, r3
 8010896:	ee33 4a04 	vadd.f32	s8, s6, s8
 801089a:	ee72 2ac1 	vsub.f32	s5, s5, s2
 801089e:	ee74 4aa1 	vadd.f32	s9, s9, s3
 80108a2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80108a6:	ed84 4a01 	vstr	s8, [r4, #4]
 80108aa:	ed40 3a01 	vstr	s7, [r0, #-4]
 80108ae:	441c      	add	r4, r3
 80108b0:	edc7 2a00 	vstr	s5, [r7]
 80108b4:	ed85 5a00 	vstr	s10, [r5]
 80108b8:	edc2 7a00 	vstr	s15, [r2]
 80108bc:	edc0 5a00 	vstr	s11, [r0]
 80108c0:	4418      	add	r0, r3
 80108c2:	edc7 4a01 	vstr	s9, [r7, #4]
 80108c6:	441f      	add	r7, r3
 80108c8:	ed85 6a01 	vstr	s12, [r5, #4]
 80108cc:	441d      	add	r5, r3
 80108ce:	ed82 7a01 	vstr	s14, [r2, #4]
 80108d2:	441a      	add	r2, r3
 80108d4:	f63f af44 	bhi.w	8010760 <arm_radix8_butterfly_f32+0x8c>
 80108d8:	469c      	mov	ip, r3
 80108da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80108dc:	2b07      	cmp	r3, #7
 80108de:	f240 81b6 	bls.w	8010c4e <arm_radix8_butterfly_f32+0x57a>
 80108e2:	9a02      	ldr	r2, [sp, #8]
 80108e4:	f109 0608 	add.w	r6, r9, #8
 80108e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80108ea:	f108 0408 	add.w	r4, r8, #8
 80108ee:	3208      	adds	r2, #8
 80108f0:	9f06      	ldr	r7, [sp, #24]
 80108f2:	9d04      	ldr	r5, [sp, #16]
 80108f4:	189a      	adds	r2, r3, r2
 80108f6:	3708      	adds	r7, #8
 80108f8:	3508      	adds	r5, #8
 80108fa:	9807      	ldr	r0, [sp, #28]
 80108fc:	920c      	str	r2, [sp, #48]	; 0x30
 80108fe:	199a      	adds	r2, r3, r6
 8010900:	9905      	ldr	r1, [sp, #20]
 8010902:	3008      	adds	r0, #8
 8010904:	920b      	str	r2, [sp, #44]	; 0x2c
 8010906:	19da      	adds	r2, r3, r7
 8010908:	310c      	adds	r1, #12
 801090a:	920a      	str	r2, [sp, #40]	; 0x28
 801090c:	195a      	adds	r2, r3, r5
 801090e:	9209      	str	r2, [sp, #36]	; 0x24
 8010910:	191a      	adds	r2, r3, r4
 8010912:	9208      	str	r2, [sp, #32]
 8010914:	181a      	adds	r2, r3, r0
 8010916:	9207      	str	r2, [sp, #28]
 8010918:	185a      	adds	r2, r3, r1
 801091a:	330c      	adds	r3, #12
 801091c:	9205      	str	r2, [sp, #20]
 801091e:	9306      	str	r3, [sp, #24]
 8010920:	2301      	movs	r3, #1
 8010922:	9304      	str	r3, [sp, #16]
 8010924:	2300      	movs	r3, #0
 8010926:	930d      	str	r3, [sp, #52]	; 0x34
 8010928:	4663      	mov	r3, ip
 801092a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801092c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801092e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8010932:	440a      	add	r2, r1
 8010934:	9f06      	ldr	r7, [sp, #24]
 8010936:	9e07      	ldr	r6, [sp, #28]
 8010938:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 801093c:	920d      	str	r2, [sp, #52]	; 0x34
 801093e:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 8010942:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010944:	9d08      	ldr	r5, [sp, #32]
 8010946:	4442      	add	r2, r8
 8010948:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801094a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801094c:	eb02 0108 	add.w	r1, r2, r8
 8010950:	ed92 ea00 	vldr	s28, [r2]
 8010954:	eb01 0208 	add.w	r2, r1, r8
 8010958:	edd1 da00 	vldr	s27, [r1]
 801095c:	eb02 0108 	add.w	r1, r2, r8
 8010960:	ed92 da00 	vldr	s26, [r2]
 8010964:	eb01 0208 	add.w	r2, r1, r8
 8010968:	edd1 ca00 	vldr	s25, [r1]
 801096c:	eb02 0108 	add.w	r1, r2, r8
 8010970:	ed92 ca00 	vldr	s24, [r2]
 8010974:	eb01 0208 	add.w	r2, r1, r8
 8010978:	edd1 ba00 	vldr	s23, [r1]
 801097c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801097e:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 8010982:	ed92 ba00 	vldr	s22, [r2]
 8010986:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010988:	eb0e 0908 	add.w	r9, lr, r8
 801098c:	910e      	str	r1, [sp, #56]	; 0x38
 801098e:	9201      	str	r2, [sp, #4]
 8010990:	eb09 0208 	add.w	r2, r9, r8
 8010994:	ed99 aa01 	vldr	s20, [r9, #4]
 8010998:	edde aa01 	vldr	s21, [lr, #4]
 801099c:	eb02 0908 	add.w	r9, r2, r8
 80109a0:	edd2 9a01 	vldr	s19, [r2, #4]
 80109a4:	f8dd e010 	ldr.w	lr, [sp, #16]
 80109a8:	eb09 0208 	add.w	r2, r9, r8
 80109ac:	ed99 9a01 	vldr	s18, [r9, #4]
 80109b0:	eb02 0908 	add.w	r9, r2, r8
 80109b4:	ed92 8a01 	vldr	s16, [r2, #4]
 80109b8:	9a01      	ldr	r2, [sp, #4]
 80109ba:	edd9 7a01 	vldr	s15, [r9, #4]
 80109be:	44c8      	add	r8, r9
 80109c0:	edcd 7a02 	vstr	s15, [sp, #8]
 80109c4:	edd8 7a01 	vldr	s15, [r8, #4]
 80109c8:	edcd 7a03 	vstr	s15, [sp, #12]
 80109cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80109ce:	e001      	b.n	80109d4 <arm_radix8_butterfly_f32+0x300>
 80109d0:	3f3504f3 	.word	0x3f3504f3
 80109d4:	ed92 7a00 	vldr	s14, [r2]
 80109d8:	44de      	add	lr, fp
 80109da:	ed17 1a01 	vldr	s2, [r7, #-4]
 80109de:	ed90 5a00 	vldr	s10, [r0]
 80109e2:	45f2      	cmp	sl, lr
 80109e4:	ed1c fa01 	vldr	s30, [ip, #-4]
 80109e8:	ee31 3a07 	vadd.f32	s6, s2, s14
 80109ec:	edd6 5a00 	vldr	s11, [r6]
 80109f0:	ee31 1a47 	vsub.f32	s2, s2, s14
 80109f4:	edd4 7a00 	vldr	s15, [r4]
 80109f8:	ed95 7a00 	vldr	s14, [r5]
 80109fc:	ed91 4a00 	vldr	s8, [r1]
 8010a00:	ee3f 6a27 	vadd.f32	s12, s30, s15
 8010a04:	ee77 6a25 	vadd.f32	s13, s14, s11
 8010a08:	edd7 ea00 	vldr	s29, [r7]
 8010a0c:	ee74 fa05 	vadd.f32	s31, s8, s10
 8010a10:	ee73 1a06 	vadd.f32	s3, s6, s12
 8010a14:	ee34 4a45 	vsub.f32	s8, s8, s10
 8010a18:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 8010a1c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010a20:	ee33 3a46 	vsub.f32	s6, s6, s12
 8010a24:	ee31 6a85 	vadd.f32	s12, s3, s10
 8010a28:	ee7f 7a67 	vsub.f32	s15, s30, s15
 8010a2c:	ee34 fa07 	vadd.f32	s30, s8, s14
 8010a30:	ed07 6a01 	vstr	s12, [r7, #-4]
 8010a34:	ee34 4a47 	vsub.f32	s8, s8, s14
 8010a38:	edd5 3a01 	vldr	s7, [r5, #4]
 8010a3c:	ee7f fae6 	vsub.f32	s31, s31, s13
 8010a40:	ed90 7a01 	vldr	s14, [r0, #4]
 8010a44:	ee2f fa28 	vmul.f32	s30, s30, s17
 8010a48:	edd1 5a01 	vldr	s11, [r1, #4]
 8010a4c:	ee24 4a28 	vmul.f32	s8, s8, s17
 8010a50:	ed96 6a01 	vldr	s12, [r6, #4]
 8010a54:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8010a58:	ee75 0ac7 	vsub.f32	s1, s11, s14
 8010a5c:	edd2 6a01 	vldr	s13, [r2, #4]
 8010a60:	ee73 2ac6 	vsub.f32	s5, s7, s12
 8010a64:	edd4 4a01 	vldr	s9, [r4, #4]
 8010a68:	ee75 5a87 	vadd.f32	s11, s11, s14
 8010a6c:	ed9c 7a00 	vldr	s14, [ip]
 8010a70:	ee37 2a8f 	vadd.f32	s4, s15, s30
 8010a74:	ee33 6a86 	vadd.f32	s12, s7, s12
 8010a78:	ee37 facf 	vsub.f32	s30, s15, s30
 8010a7c:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 8010a80:	ee70 7ae2 	vsub.f32	s15, s1, s5
 8010a84:	ee7e eae6 	vsub.f32	s29, s29, s13
 8010a88:	ee70 2aa2 	vadd.f32	s5, s1, s5
 8010a8c:	ee77 6a24 	vadd.f32	s13, s14, s9
 8010a90:	ee75 0a86 	vadd.f32	s1, s11, s12
 8010a94:	ee37 7a64 	vsub.f32	s14, s14, s9
 8010a98:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8010a9c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8010aa0:	ee62 2aa8 	vmul.f32	s5, s5, s17
 8010aa4:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8010aa8:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8010aac:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 8010ab0:	ee77 4a22 	vadd.f32	s9, s14, s5
 8010ab4:	ee7e eae7 	vsub.f32	s29, s29, s15
 8010ab8:	ee77 7a62 	vsub.f32	s15, s14, s5
 8010abc:	ee71 2a04 	vadd.f32	s5, s2, s8
 8010ac0:	ee31 7a44 	vsub.f32	s14, s2, s8
 8010ac4:	ee30 1a60 	vsub.f32	s2, s0, s1
 8010ac8:	ee73 1a06 	vadd.f32	s3, s6, s12
 8010acc:	ee33 6a46 	vsub.f32	s12, s6, s12
 8010ad0:	ee33 3aef 	vsub.f32	s6, s7, s31
 8010ad4:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 8010ad8:	ee3e 4acf 	vsub.f32	s8, s29, s30
 8010adc:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8010ae0:	ee72 5a25 	vadd.f32	s11, s4, s11
 8010ae4:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8010ae8:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8010aec:	ee77 2a27 	vadd.f32	s5, s14, s15
 8010af0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010af4:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 8010af8:	ee2c fa85 	vmul.f32	s30, s25, s10
 8010afc:	ee69 ea01 	vmul.f32	s29, s18, s2
 8010b00:	ee29 5a05 	vmul.f32	s10, s18, s10
 8010b04:	ee2c 1a81 	vmul.f32	s2, s25, s2
 8010b08:	ee6d faa1 	vmul.f32	s31, s27, s3
 8010b0c:	ee70 0a20 	vadd.f32	s1, s0, s1
 8010b10:	ee6a 1a21 	vmul.f32	s3, s20, s3
 8010b14:	ee2a 0a03 	vmul.f32	s0, s20, s6
 8010b18:	ee2d 3a83 	vmul.f32	s6, s27, s6
 8010b1c:	edc7 0a00 	vstr	s1, [r7]
 8010b20:	ee7f ea2e 	vadd.f32	s29, s30, s29
 8010b24:	441f      	add	r7, r3
 8010b26:	ee2a faa3 	vmul.f32	s30, s21, s7
 8010b2a:	ee31 5a45 	vsub.f32	s10, s2, s10
 8010b2e:	ee6e 3a23 	vmul.f32	s7, s28, s7
 8010b32:	edc2 ea00 	vstr	s29, [r2]
 8010b36:	ee3f 0a80 	vadd.f32	s0, s31, s0
 8010b3a:	ee33 3a61 	vsub.f32	s6, s6, s3
 8010b3e:	ed82 5a01 	vstr	s10, [r2, #4]
 8010b42:	ee6e 0a02 	vmul.f32	s1, s28, s4
 8010b46:	edcd 3a01 	vstr	s7, [sp, #4]
 8010b4a:	ed9d 5a03 	vldr	s10, [sp, #12]
 8010b4e:	ee6b ea86 	vmul.f32	s29, s23, s12
 8010b52:	eddd 3a02 	vldr	s7, [sp, #8]
 8010b56:	ee6b fa24 	vmul.f32	s31, s22, s9
 8010b5a:	ed0c 0a01 	vstr	s0, [ip, #-4]
 8010b5e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8010b62:	ed8c 3a00 	vstr	s6, [ip]
 8010b66:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8010b6a:	ee23 6a86 	vmul.f32	s12, s7, s12
 8010b6e:	eddd 3a01 	vldr	s7, [sp, #4]
 8010b72:	ee25 5a25 	vmul.f32	s10, s10, s11
 8010b76:	441a      	add	r2, r3
 8010b78:	ee2c 0a22 	vmul.f32	s0, s24, s5
 8010b7c:	449c      	add	ip, r3
 8010b7e:	ee68 1a04 	vmul.f32	s3, s16, s8
 8010b82:	ee70 0a8f 	vadd.f32	s1, s1, s30
 8010b86:	ee2d 3a07 	vmul.f32	s6, s26, s14
 8010b8a:	ee29 faa7 	vmul.f32	s30, s19, s15
 8010b8e:	ee2a 2a82 	vmul.f32	s4, s21, s4
 8010b92:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 8010b96:	ee6b 5a25 	vmul.f32	s11, s22, s11
 8010b9a:	ee68 2a22 	vmul.f32	s5, s16, s5
 8010b9e:	ee2c 4a04 	vmul.f32	s8, s24, s8
 8010ba2:	ee29 7a87 	vmul.f32	s14, s19, s14
 8010ba6:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8010baa:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8010bae:	ee7e ea81 	vadd.f32	s29, s29, s2
 8010bb2:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8010bb6:	ee3f 5a85 	vadd.f32	s10, s31, s10
 8010bba:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8010bbe:	edc4 ea00 	vstr	s29, [r4]
 8010bc2:	ee30 0a21 	vadd.f32	s0, s0, s3
 8010bc6:	ed84 6a01 	vstr	s12, [r4, #4]
 8010bca:	ee74 2a62 	vsub.f32	s5, s8, s5
 8010bce:	edc1 0a00 	vstr	s1, [r1]
 8010bd2:	ee33 3a0f 	vadd.f32	s6, s6, s30
 8010bd6:	edc1 3a01 	vstr	s7, [r1, #4]
 8010bda:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8010bde:	ed86 5a00 	vstr	s10, [r6]
 8010be2:	edc6 4a01 	vstr	s9, [r6, #4]
 8010be6:	4419      	add	r1, r3
 8010be8:	ed80 0a00 	vstr	s0, [r0]
 8010bec:	441c      	add	r4, r3
 8010bee:	edc0 2a01 	vstr	s5, [r0, #4]
 8010bf2:	441e      	add	r6, r3
 8010bf4:	ed85 3a00 	vstr	s6, [r5]
 8010bf8:	4418      	add	r0, r3
 8010bfa:	ed85 7a01 	vstr	s14, [r5, #4]
 8010bfe:	441d      	add	r5, r3
 8010c00:	f63f aee8 	bhi.w	80109d4 <arm_radix8_butterfly_f32+0x300>
 8010c04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010c06:	9a04      	ldr	r2, [sp, #16]
 8010c08:	3108      	adds	r1, #8
 8010c0a:	3201      	adds	r2, #1
 8010c0c:	910c      	str	r1, [sp, #48]	; 0x30
 8010c0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010c10:	9204      	str	r2, [sp, #16]
 8010c12:	3108      	adds	r1, #8
 8010c14:	910b      	str	r1, [sp, #44]	; 0x2c
 8010c16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010c18:	3108      	adds	r1, #8
 8010c1a:	910a      	str	r1, [sp, #40]	; 0x28
 8010c1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c1e:	3108      	adds	r1, #8
 8010c20:	9109      	str	r1, [sp, #36]	; 0x24
 8010c22:	9908      	ldr	r1, [sp, #32]
 8010c24:	3108      	adds	r1, #8
 8010c26:	9108      	str	r1, [sp, #32]
 8010c28:	9907      	ldr	r1, [sp, #28]
 8010c2a:	3108      	adds	r1, #8
 8010c2c:	9107      	str	r1, [sp, #28]
 8010c2e:	9906      	ldr	r1, [sp, #24]
 8010c30:	3108      	adds	r1, #8
 8010c32:	9106      	str	r1, [sp, #24]
 8010c34:	9905      	ldr	r1, [sp, #20]
 8010c36:	3108      	adds	r1, #8
 8010c38:	9105      	str	r1, [sp, #20]
 8010c3a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010c3c:	4291      	cmp	r1, r2
 8010c3e:	f47f ae74 	bne.w	801092a <arm_radix8_butterfly_f32+0x256>
 8010c42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010c44:	468b      	mov	fp, r1
 8010c46:	00db      	lsls	r3, r3, #3
 8010c48:	b29b      	uxth	r3, r3
 8010c4a:	9310      	str	r3, [sp, #64]	; 0x40
 8010c4c:	e551      	b.n	80106f2 <arm_radix8_butterfly_f32+0x1e>
 8010c4e:	b015      	add	sp, #84	; 0x54
 8010c50:	ecbd 8b10 	vpop	{d8-d15}
 8010c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c58 <atoi>:
 8010c58:	220a      	movs	r2, #10
 8010c5a:	2100      	movs	r1, #0
 8010c5c:	f000 be06 	b.w	801186c <strtol>

08010c60 <__errno>:
 8010c60:	4b01      	ldr	r3, [pc, #4]	; (8010c68 <__errno+0x8>)
 8010c62:	6818      	ldr	r0, [r3, #0]
 8010c64:	4770      	bx	lr
 8010c66:	bf00      	nop
 8010c68:	24000414 	.word	0x24000414

08010c6c <__libc_init_array>:
 8010c6c:	b570      	push	{r4, r5, r6, lr}
 8010c6e:	4d0d      	ldr	r5, [pc, #52]	; (8010ca4 <__libc_init_array+0x38>)
 8010c70:	4c0d      	ldr	r4, [pc, #52]	; (8010ca8 <__libc_init_array+0x3c>)
 8010c72:	1b64      	subs	r4, r4, r5
 8010c74:	10a4      	asrs	r4, r4, #2
 8010c76:	2600      	movs	r6, #0
 8010c78:	42a6      	cmp	r6, r4
 8010c7a:	d109      	bne.n	8010c90 <__libc_init_array+0x24>
 8010c7c:	4d0b      	ldr	r5, [pc, #44]	; (8010cac <__libc_init_array+0x40>)
 8010c7e:	4c0c      	ldr	r4, [pc, #48]	; (8010cb0 <__libc_init_array+0x44>)
 8010c80:	f004 f8f4 	bl	8014e6c <_init>
 8010c84:	1b64      	subs	r4, r4, r5
 8010c86:	10a4      	asrs	r4, r4, #2
 8010c88:	2600      	movs	r6, #0
 8010c8a:	42a6      	cmp	r6, r4
 8010c8c:	d105      	bne.n	8010c9a <__libc_init_array+0x2e>
 8010c8e:	bd70      	pop	{r4, r5, r6, pc}
 8010c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c94:	4798      	blx	r3
 8010c96:	3601      	adds	r6, #1
 8010c98:	e7ee      	b.n	8010c78 <__libc_init_array+0xc>
 8010c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c9e:	4798      	blx	r3
 8010ca0:	3601      	adds	r6, #1
 8010ca2:	e7f2      	b.n	8010c8a <__libc_init_array+0x1e>
 8010ca4:	0801f8a8 	.word	0x0801f8a8
 8010ca8:	0801f8a8 	.word	0x0801f8a8
 8010cac:	0801f8a8 	.word	0x0801f8a8
 8010cb0:	0801f8ac 	.word	0x0801f8ac

08010cb4 <memcpy>:
 8010cb4:	440a      	add	r2, r1
 8010cb6:	4291      	cmp	r1, r2
 8010cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8010cbc:	d100      	bne.n	8010cc0 <memcpy+0xc>
 8010cbe:	4770      	bx	lr
 8010cc0:	b510      	push	{r4, lr}
 8010cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010cc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010cca:	4291      	cmp	r1, r2
 8010ccc:	d1f9      	bne.n	8010cc2 <memcpy+0xe>
 8010cce:	bd10      	pop	{r4, pc}

08010cd0 <memset>:
 8010cd0:	4402      	add	r2, r0
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	d100      	bne.n	8010cda <memset+0xa>
 8010cd8:	4770      	bx	lr
 8010cda:	f803 1b01 	strb.w	r1, [r3], #1
 8010cde:	e7f9      	b.n	8010cd4 <memset+0x4>

08010ce0 <__cvt>:
 8010ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ce2:	ed2d 8b02 	vpush	{d8}
 8010ce6:	eeb0 8b40 	vmov.f64	d8, d0
 8010cea:	b085      	sub	sp, #20
 8010cec:	4617      	mov	r7, r2
 8010cee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010cf0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010cf2:	ee18 2a90 	vmov	r2, s17
 8010cf6:	f025 0520 	bic.w	r5, r5, #32
 8010cfa:	2a00      	cmp	r2, #0
 8010cfc:	bfb6      	itet	lt
 8010cfe:	222d      	movlt	r2, #45	; 0x2d
 8010d00:	2200      	movge	r2, #0
 8010d02:	eeb1 8b40 	vneglt.f64	d8, d0
 8010d06:	2d46      	cmp	r5, #70	; 0x46
 8010d08:	460c      	mov	r4, r1
 8010d0a:	701a      	strb	r2, [r3, #0]
 8010d0c:	d004      	beq.n	8010d18 <__cvt+0x38>
 8010d0e:	2d45      	cmp	r5, #69	; 0x45
 8010d10:	d100      	bne.n	8010d14 <__cvt+0x34>
 8010d12:	3401      	adds	r4, #1
 8010d14:	2102      	movs	r1, #2
 8010d16:	e000      	b.n	8010d1a <__cvt+0x3a>
 8010d18:	2103      	movs	r1, #3
 8010d1a:	ab03      	add	r3, sp, #12
 8010d1c:	9301      	str	r3, [sp, #4]
 8010d1e:	ab02      	add	r3, sp, #8
 8010d20:	9300      	str	r3, [sp, #0]
 8010d22:	4622      	mov	r2, r4
 8010d24:	4633      	mov	r3, r6
 8010d26:	eeb0 0b48 	vmov.f64	d0, d8
 8010d2a:	f000 fe55 	bl	80119d8 <_dtoa_r>
 8010d2e:	2d47      	cmp	r5, #71	; 0x47
 8010d30:	d101      	bne.n	8010d36 <__cvt+0x56>
 8010d32:	07fb      	lsls	r3, r7, #31
 8010d34:	d51a      	bpl.n	8010d6c <__cvt+0x8c>
 8010d36:	2d46      	cmp	r5, #70	; 0x46
 8010d38:	eb00 0204 	add.w	r2, r0, r4
 8010d3c:	d10c      	bne.n	8010d58 <__cvt+0x78>
 8010d3e:	7803      	ldrb	r3, [r0, #0]
 8010d40:	2b30      	cmp	r3, #48	; 0x30
 8010d42:	d107      	bne.n	8010d54 <__cvt+0x74>
 8010d44:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d4c:	bf1c      	itt	ne
 8010d4e:	f1c4 0401 	rsbne	r4, r4, #1
 8010d52:	6034      	strne	r4, [r6, #0]
 8010d54:	6833      	ldr	r3, [r6, #0]
 8010d56:	441a      	add	r2, r3
 8010d58:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d60:	bf08      	it	eq
 8010d62:	9203      	streq	r2, [sp, #12]
 8010d64:	2130      	movs	r1, #48	; 0x30
 8010d66:	9b03      	ldr	r3, [sp, #12]
 8010d68:	4293      	cmp	r3, r2
 8010d6a:	d307      	bcc.n	8010d7c <__cvt+0x9c>
 8010d6c:	9b03      	ldr	r3, [sp, #12]
 8010d6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d70:	1a1b      	subs	r3, r3, r0
 8010d72:	6013      	str	r3, [r2, #0]
 8010d74:	b005      	add	sp, #20
 8010d76:	ecbd 8b02 	vpop	{d8}
 8010d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d7c:	1c5c      	adds	r4, r3, #1
 8010d7e:	9403      	str	r4, [sp, #12]
 8010d80:	7019      	strb	r1, [r3, #0]
 8010d82:	e7f0      	b.n	8010d66 <__cvt+0x86>

08010d84 <__exponent>:
 8010d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d86:	4603      	mov	r3, r0
 8010d88:	2900      	cmp	r1, #0
 8010d8a:	bfb8      	it	lt
 8010d8c:	4249      	neglt	r1, r1
 8010d8e:	f803 2b02 	strb.w	r2, [r3], #2
 8010d92:	bfb4      	ite	lt
 8010d94:	222d      	movlt	r2, #45	; 0x2d
 8010d96:	222b      	movge	r2, #43	; 0x2b
 8010d98:	2909      	cmp	r1, #9
 8010d9a:	7042      	strb	r2, [r0, #1]
 8010d9c:	dd2a      	ble.n	8010df4 <__exponent+0x70>
 8010d9e:	f10d 0407 	add.w	r4, sp, #7
 8010da2:	46a4      	mov	ip, r4
 8010da4:	270a      	movs	r7, #10
 8010da6:	46a6      	mov	lr, r4
 8010da8:	460a      	mov	r2, r1
 8010daa:	fb91 f6f7 	sdiv	r6, r1, r7
 8010dae:	fb07 1516 	mls	r5, r7, r6, r1
 8010db2:	3530      	adds	r5, #48	; 0x30
 8010db4:	2a63      	cmp	r2, #99	; 0x63
 8010db6:	f104 34ff 	add.w	r4, r4, #4294967295
 8010dba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010dbe:	4631      	mov	r1, r6
 8010dc0:	dcf1      	bgt.n	8010da6 <__exponent+0x22>
 8010dc2:	3130      	adds	r1, #48	; 0x30
 8010dc4:	f1ae 0502 	sub.w	r5, lr, #2
 8010dc8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010dcc:	1c44      	adds	r4, r0, #1
 8010dce:	4629      	mov	r1, r5
 8010dd0:	4561      	cmp	r1, ip
 8010dd2:	d30a      	bcc.n	8010dea <__exponent+0x66>
 8010dd4:	f10d 0209 	add.w	r2, sp, #9
 8010dd8:	eba2 020e 	sub.w	r2, r2, lr
 8010ddc:	4565      	cmp	r5, ip
 8010dde:	bf88      	it	hi
 8010de0:	2200      	movhi	r2, #0
 8010de2:	4413      	add	r3, r2
 8010de4:	1a18      	subs	r0, r3, r0
 8010de6:	b003      	add	sp, #12
 8010de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010dee:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010df2:	e7ed      	b.n	8010dd0 <__exponent+0x4c>
 8010df4:	2330      	movs	r3, #48	; 0x30
 8010df6:	3130      	adds	r1, #48	; 0x30
 8010df8:	7083      	strb	r3, [r0, #2]
 8010dfa:	70c1      	strb	r1, [r0, #3]
 8010dfc:	1d03      	adds	r3, r0, #4
 8010dfe:	e7f1      	b.n	8010de4 <__exponent+0x60>

08010e00 <_printf_float>:
 8010e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e04:	b08b      	sub	sp, #44	; 0x2c
 8010e06:	460c      	mov	r4, r1
 8010e08:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010e0c:	4616      	mov	r6, r2
 8010e0e:	461f      	mov	r7, r3
 8010e10:	4605      	mov	r5, r0
 8010e12:	f001 fb61 	bl	80124d8 <_localeconv_r>
 8010e16:	f8d0 b000 	ldr.w	fp, [r0]
 8010e1a:	4658      	mov	r0, fp
 8010e1c:	f7ef fa60 	bl	80002e0 <strlen>
 8010e20:	2300      	movs	r3, #0
 8010e22:	9308      	str	r3, [sp, #32]
 8010e24:	f8d8 3000 	ldr.w	r3, [r8]
 8010e28:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010e2c:	6822      	ldr	r2, [r4, #0]
 8010e2e:	3307      	adds	r3, #7
 8010e30:	f023 0307 	bic.w	r3, r3, #7
 8010e34:	f103 0108 	add.w	r1, r3, #8
 8010e38:	f8c8 1000 	str.w	r1, [r8]
 8010e3c:	4682      	mov	sl, r0
 8010e3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010e42:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010e46:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80110a8 <_printf_float+0x2a8>
 8010e4a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8010e4e:	eeb0 6bc0 	vabs.f64	d6, d0
 8010e52:	eeb4 6b47 	vcmp.f64	d6, d7
 8010e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e5a:	dd24      	ble.n	8010ea6 <_printf_float+0xa6>
 8010e5c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e64:	d502      	bpl.n	8010e6c <_printf_float+0x6c>
 8010e66:	232d      	movs	r3, #45	; 0x2d
 8010e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e6c:	4b90      	ldr	r3, [pc, #576]	; (80110b0 <_printf_float+0x2b0>)
 8010e6e:	4891      	ldr	r0, [pc, #580]	; (80110b4 <_printf_float+0x2b4>)
 8010e70:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010e74:	bf94      	ite	ls
 8010e76:	4698      	movls	r8, r3
 8010e78:	4680      	movhi	r8, r0
 8010e7a:	2303      	movs	r3, #3
 8010e7c:	6123      	str	r3, [r4, #16]
 8010e7e:	f022 0204 	bic.w	r2, r2, #4
 8010e82:	2300      	movs	r3, #0
 8010e84:	6022      	str	r2, [r4, #0]
 8010e86:	9304      	str	r3, [sp, #16]
 8010e88:	9700      	str	r7, [sp, #0]
 8010e8a:	4633      	mov	r3, r6
 8010e8c:	aa09      	add	r2, sp, #36	; 0x24
 8010e8e:	4621      	mov	r1, r4
 8010e90:	4628      	mov	r0, r5
 8010e92:	f000 f9d3 	bl	801123c <_printf_common>
 8010e96:	3001      	adds	r0, #1
 8010e98:	f040 808a 	bne.w	8010fb0 <_printf_float+0x1b0>
 8010e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010ea0:	b00b      	add	sp, #44	; 0x2c
 8010ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea6:	eeb4 0b40 	vcmp.f64	d0, d0
 8010eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eae:	d709      	bvc.n	8010ec4 <_printf_float+0xc4>
 8010eb0:	ee10 3a90 	vmov	r3, s1
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	bfbc      	itt	lt
 8010eb8:	232d      	movlt	r3, #45	; 0x2d
 8010eba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010ebe:	487e      	ldr	r0, [pc, #504]	; (80110b8 <_printf_float+0x2b8>)
 8010ec0:	4b7e      	ldr	r3, [pc, #504]	; (80110bc <_printf_float+0x2bc>)
 8010ec2:	e7d5      	b.n	8010e70 <_printf_float+0x70>
 8010ec4:	6863      	ldr	r3, [r4, #4]
 8010ec6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8010eca:	9104      	str	r1, [sp, #16]
 8010ecc:	1c59      	adds	r1, r3, #1
 8010ece:	d13c      	bne.n	8010f4a <_printf_float+0x14a>
 8010ed0:	2306      	movs	r3, #6
 8010ed2:	6063      	str	r3, [r4, #4]
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	9303      	str	r3, [sp, #12]
 8010ed8:	ab08      	add	r3, sp, #32
 8010eda:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010ede:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010ee2:	ab07      	add	r3, sp, #28
 8010ee4:	6861      	ldr	r1, [r4, #4]
 8010ee6:	9300      	str	r3, [sp, #0]
 8010ee8:	6022      	str	r2, [r4, #0]
 8010eea:	f10d 031b 	add.w	r3, sp, #27
 8010eee:	4628      	mov	r0, r5
 8010ef0:	f7ff fef6 	bl	8010ce0 <__cvt>
 8010ef4:	9b04      	ldr	r3, [sp, #16]
 8010ef6:	9907      	ldr	r1, [sp, #28]
 8010ef8:	2b47      	cmp	r3, #71	; 0x47
 8010efa:	4680      	mov	r8, r0
 8010efc:	d108      	bne.n	8010f10 <_printf_float+0x110>
 8010efe:	1cc8      	adds	r0, r1, #3
 8010f00:	db02      	blt.n	8010f08 <_printf_float+0x108>
 8010f02:	6863      	ldr	r3, [r4, #4]
 8010f04:	4299      	cmp	r1, r3
 8010f06:	dd41      	ble.n	8010f8c <_printf_float+0x18c>
 8010f08:	f1a9 0902 	sub.w	r9, r9, #2
 8010f0c:	fa5f f989 	uxtb.w	r9, r9
 8010f10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010f14:	d820      	bhi.n	8010f58 <_printf_float+0x158>
 8010f16:	3901      	subs	r1, #1
 8010f18:	464a      	mov	r2, r9
 8010f1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010f1e:	9107      	str	r1, [sp, #28]
 8010f20:	f7ff ff30 	bl	8010d84 <__exponent>
 8010f24:	9a08      	ldr	r2, [sp, #32]
 8010f26:	9004      	str	r0, [sp, #16]
 8010f28:	1813      	adds	r3, r2, r0
 8010f2a:	2a01      	cmp	r2, #1
 8010f2c:	6123      	str	r3, [r4, #16]
 8010f2e:	dc02      	bgt.n	8010f36 <_printf_float+0x136>
 8010f30:	6822      	ldr	r2, [r4, #0]
 8010f32:	07d2      	lsls	r2, r2, #31
 8010f34:	d501      	bpl.n	8010f3a <_printf_float+0x13a>
 8010f36:	3301      	adds	r3, #1
 8010f38:	6123      	str	r3, [r4, #16]
 8010f3a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d0a2      	beq.n	8010e88 <_printf_float+0x88>
 8010f42:	232d      	movs	r3, #45	; 0x2d
 8010f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f48:	e79e      	b.n	8010e88 <_printf_float+0x88>
 8010f4a:	9904      	ldr	r1, [sp, #16]
 8010f4c:	2947      	cmp	r1, #71	; 0x47
 8010f4e:	d1c1      	bne.n	8010ed4 <_printf_float+0xd4>
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d1bf      	bne.n	8010ed4 <_printf_float+0xd4>
 8010f54:	2301      	movs	r3, #1
 8010f56:	e7bc      	b.n	8010ed2 <_printf_float+0xd2>
 8010f58:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010f5c:	d118      	bne.n	8010f90 <_printf_float+0x190>
 8010f5e:	2900      	cmp	r1, #0
 8010f60:	6863      	ldr	r3, [r4, #4]
 8010f62:	dd0b      	ble.n	8010f7c <_printf_float+0x17c>
 8010f64:	6121      	str	r1, [r4, #16]
 8010f66:	b913      	cbnz	r3, 8010f6e <_printf_float+0x16e>
 8010f68:	6822      	ldr	r2, [r4, #0]
 8010f6a:	07d0      	lsls	r0, r2, #31
 8010f6c:	d502      	bpl.n	8010f74 <_printf_float+0x174>
 8010f6e:	3301      	adds	r3, #1
 8010f70:	440b      	add	r3, r1
 8010f72:	6123      	str	r3, [r4, #16]
 8010f74:	2300      	movs	r3, #0
 8010f76:	65a1      	str	r1, [r4, #88]	; 0x58
 8010f78:	9304      	str	r3, [sp, #16]
 8010f7a:	e7de      	b.n	8010f3a <_printf_float+0x13a>
 8010f7c:	b913      	cbnz	r3, 8010f84 <_printf_float+0x184>
 8010f7e:	6822      	ldr	r2, [r4, #0]
 8010f80:	07d2      	lsls	r2, r2, #31
 8010f82:	d501      	bpl.n	8010f88 <_printf_float+0x188>
 8010f84:	3302      	adds	r3, #2
 8010f86:	e7f4      	b.n	8010f72 <_printf_float+0x172>
 8010f88:	2301      	movs	r3, #1
 8010f8a:	e7f2      	b.n	8010f72 <_printf_float+0x172>
 8010f8c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010f90:	9b08      	ldr	r3, [sp, #32]
 8010f92:	4299      	cmp	r1, r3
 8010f94:	db05      	blt.n	8010fa2 <_printf_float+0x1a2>
 8010f96:	6823      	ldr	r3, [r4, #0]
 8010f98:	6121      	str	r1, [r4, #16]
 8010f9a:	07d8      	lsls	r0, r3, #31
 8010f9c:	d5ea      	bpl.n	8010f74 <_printf_float+0x174>
 8010f9e:	1c4b      	adds	r3, r1, #1
 8010fa0:	e7e7      	b.n	8010f72 <_printf_float+0x172>
 8010fa2:	2900      	cmp	r1, #0
 8010fa4:	bfd4      	ite	le
 8010fa6:	f1c1 0202 	rsble	r2, r1, #2
 8010faa:	2201      	movgt	r2, #1
 8010fac:	4413      	add	r3, r2
 8010fae:	e7e0      	b.n	8010f72 <_printf_float+0x172>
 8010fb0:	6823      	ldr	r3, [r4, #0]
 8010fb2:	055a      	lsls	r2, r3, #21
 8010fb4:	d407      	bmi.n	8010fc6 <_printf_float+0x1c6>
 8010fb6:	6923      	ldr	r3, [r4, #16]
 8010fb8:	4642      	mov	r2, r8
 8010fba:	4631      	mov	r1, r6
 8010fbc:	4628      	mov	r0, r5
 8010fbe:	47b8      	blx	r7
 8010fc0:	3001      	adds	r0, #1
 8010fc2:	d12a      	bne.n	801101a <_printf_float+0x21a>
 8010fc4:	e76a      	b.n	8010e9c <_printf_float+0x9c>
 8010fc6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010fca:	f240 80e2 	bls.w	8011192 <_printf_float+0x392>
 8010fce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010fd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fda:	d133      	bne.n	8011044 <_printf_float+0x244>
 8010fdc:	4a38      	ldr	r2, [pc, #224]	; (80110c0 <_printf_float+0x2c0>)
 8010fde:	2301      	movs	r3, #1
 8010fe0:	4631      	mov	r1, r6
 8010fe2:	4628      	mov	r0, r5
 8010fe4:	47b8      	blx	r7
 8010fe6:	3001      	adds	r0, #1
 8010fe8:	f43f af58 	beq.w	8010e9c <_printf_float+0x9c>
 8010fec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	db02      	blt.n	8010ffa <_printf_float+0x1fa>
 8010ff4:	6823      	ldr	r3, [r4, #0]
 8010ff6:	07d8      	lsls	r0, r3, #31
 8010ff8:	d50f      	bpl.n	801101a <_printf_float+0x21a>
 8010ffa:	4653      	mov	r3, sl
 8010ffc:	465a      	mov	r2, fp
 8010ffe:	4631      	mov	r1, r6
 8011000:	4628      	mov	r0, r5
 8011002:	47b8      	blx	r7
 8011004:	3001      	adds	r0, #1
 8011006:	f43f af49 	beq.w	8010e9c <_printf_float+0x9c>
 801100a:	f04f 0800 	mov.w	r8, #0
 801100e:	f104 091a 	add.w	r9, r4, #26
 8011012:	9b08      	ldr	r3, [sp, #32]
 8011014:	3b01      	subs	r3, #1
 8011016:	4543      	cmp	r3, r8
 8011018:	dc09      	bgt.n	801102e <_printf_float+0x22e>
 801101a:	6823      	ldr	r3, [r4, #0]
 801101c:	079b      	lsls	r3, r3, #30
 801101e:	f100 8108 	bmi.w	8011232 <_printf_float+0x432>
 8011022:	68e0      	ldr	r0, [r4, #12]
 8011024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011026:	4298      	cmp	r0, r3
 8011028:	bfb8      	it	lt
 801102a:	4618      	movlt	r0, r3
 801102c:	e738      	b.n	8010ea0 <_printf_float+0xa0>
 801102e:	2301      	movs	r3, #1
 8011030:	464a      	mov	r2, r9
 8011032:	4631      	mov	r1, r6
 8011034:	4628      	mov	r0, r5
 8011036:	47b8      	blx	r7
 8011038:	3001      	adds	r0, #1
 801103a:	f43f af2f 	beq.w	8010e9c <_printf_float+0x9c>
 801103e:	f108 0801 	add.w	r8, r8, #1
 8011042:	e7e6      	b.n	8011012 <_printf_float+0x212>
 8011044:	9b07      	ldr	r3, [sp, #28]
 8011046:	2b00      	cmp	r3, #0
 8011048:	dc3c      	bgt.n	80110c4 <_printf_float+0x2c4>
 801104a:	4a1d      	ldr	r2, [pc, #116]	; (80110c0 <_printf_float+0x2c0>)
 801104c:	2301      	movs	r3, #1
 801104e:	4631      	mov	r1, r6
 8011050:	4628      	mov	r0, r5
 8011052:	47b8      	blx	r7
 8011054:	3001      	adds	r0, #1
 8011056:	f43f af21 	beq.w	8010e9c <_printf_float+0x9c>
 801105a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801105e:	4313      	orrs	r3, r2
 8011060:	d102      	bne.n	8011068 <_printf_float+0x268>
 8011062:	6823      	ldr	r3, [r4, #0]
 8011064:	07d9      	lsls	r1, r3, #31
 8011066:	d5d8      	bpl.n	801101a <_printf_float+0x21a>
 8011068:	4653      	mov	r3, sl
 801106a:	465a      	mov	r2, fp
 801106c:	4631      	mov	r1, r6
 801106e:	4628      	mov	r0, r5
 8011070:	47b8      	blx	r7
 8011072:	3001      	adds	r0, #1
 8011074:	f43f af12 	beq.w	8010e9c <_printf_float+0x9c>
 8011078:	f04f 0900 	mov.w	r9, #0
 801107c:	f104 0a1a 	add.w	sl, r4, #26
 8011080:	9b07      	ldr	r3, [sp, #28]
 8011082:	425b      	negs	r3, r3
 8011084:	454b      	cmp	r3, r9
 8011086:	dc01      	bgt.n	801108c <_printf_float+0x28c>
 8011088:	9b08      	ldr	r3, [sp, #32]
 801108a:	e795      	b.n	8010fb8 <_printf_float+0x1b8>
 801108c:	2301      	movs	r3, #1
 801108e:	4652      	mov	r2, sl
 8011090:	4631      	mov	r1, r6
 8011092:	4628      	mov	r0, r5
 8011094:	47b8      	blx	r7
 8011096:	3001      	adds	r0, #1
 8011098:	f43f af00 	beq.w	8010e9c <_printf_float+0x9c>
 801109c:	f109 0901 	add.w	r9, r9, #1
 80110a0:	e7ee      	b.n	8011080 <_printf_float+0x280>
 80110a2:	bf00      	nop
 80110a4:	f3af 8000 	nop.w
 80110a8:	ffffffff 	.word	0xffffffff
 80110ac:	7fefffff 	.word	0x7fefffff
 80110b0:	0801e234 	.word	0x0801e234
 80110b4:	0801e238 	.word	0x0801e238
 80110b8:	0801e240 	.word	0x0801e240
 80110bc:	0801e23c 	.word	0x0801e23c
 80110c0:	0801e244 	.word	0x0801e244
 80110c4:	9a08      	ldr	r2, [sp, #32]
 80110c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80110c8:	429a      	cmp	r2, r3
 80110ca:	bfa8      	it	ge
 80110cc:	461a      	movge	r2, r3
 80110ce:	2a00      	cmp	r2, #0
 80110d0:	4691      	mov	r9, r2
 80110d2:	dc38      	bgt.n	8011146 <_printf_float+0x346>
 80110d4:	2300      	movs	r3, #0
 80110d6:	9305      	str	r3, [sp, #20]
 80110d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80110dc:	f104 021a 	add.w	r2, r4, #26
 80110e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80110e2:	9905      	ldr	r1, [sp, #20]
 80110e4:	9304      	str	r3, [sp, #16]
 80110e6:	eba3 0309 	sub.w	r3, r3, r9
 80110ea:	428b      	cmp	r3, r1
 80110ec:	dc33      	bgt.n	8011156 <_printf_float+0x356>
 80110ee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80110f2:	429a      	cmp	r2, r3
 80110f4:	db3c      	blt.n	8011170 <_printf_float+0x370>
 80110f6:	6823      	ldr	r3, [r4, #0]
 80110f8:	07da      	lsls	r2, r3, #31
 80110fa:	d439      	bmi.n	8011170 <_printf_float+0x370>
 80110fc:	9b08      	ldr	r3, [sp, #32]
 80110fe:	9a04      	ldr	r2, [sp, #16]
 8011100:	9907      	ldr	r1, [sp, #28]
 8011102:	1a9a      	subs	r2, r3, r2
 8011104:	eba3 0901 	sub.w	r9, r3, r1
 8011108:	4591      	cmp	r9, r2
 801110a:	bfa8      	it	ge
 801110c:	4691      	movge	r9, r2
 801110e:	f1b9 0f00 	cmp.w	r9, #0
 8011112:	dc35      	bgt.n	8011180 <_printf_float+0x380>
 8011114:	f04f 0800 	mov.w	r8, #0
 8011118:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801111c:	f104 0a1a 	add.w	sl, r4, #26
 8011120:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011124:	1a9b      	subs	r3, r3, r2
 8011126:	eba3 0309 	sub.w	r3, r3, r9
 801112a:	4543      	cmp	r3, r8
 801112c:	f77f af75 	ble.w	801101a <_printf_float+0x21a>
 8011130:	2301      	movs	r3, #1
 8011132:	4652      	mov	r2, sl
 8011134:	4631      	mov	r1, r6
 8011136:	4628      	mov	r0, r5
 8011138:	47b8      	blx	r7
 801113a:	3001      	adds	r0, #1
 801113c:	f43f aeae 	beq.w	8010e9c <_printf_float+0x9c>
 8011140:	f108 0801 	add.w	r8, r8, #1
 8011144:	e7ec      	b.n	8011120 <_printf_float+0x320>
 8011146:	4613      	mov	r3, r2
 8011148:	4631      	mov	r1, r6
 801114a:	4642      	mov	r2, r8
 801114c:	4628      	mov	r0, r5
 801114e:	47b8      	blx	r7
 8011150:	3001      	adds	r0, #1
 8011152:	d1bf      	bne.n	80110d4 <_printf_float+0x2d4>
 8011154:	e6a2      	b.n	8010e9c <_printf_float+0x9c>
 8011156:	2301      	movs	r3, #1
 8011158:	4631      	mov	r1, r6
 801115a:	4628      	mov	r0, r5
 801115c:	9204      	str	r2, [sp, #16]
 801115e:	47b8      	blx	r7
 8011160:	3001      	adds	r0, #1
 8011162:	f43f ae9b 	beq.w	8010e9c <_printf_float+0x9c>
 8011166:	9b05      	ldr	r3, [sp, #20]
 8011168:	9a04      	ldr	r2, [sp, #16]
 801116a:	3301      	adds	r3, #1
 801116c:	9305      	str	r3, [sp, #20]
 801116e:	e7b7      	b.n	80110e0 <_printf_float+0x2e0>
 8011170:	4653      	mov	r3, sl
 8011172:	465a      	mov	r2, fp
 8011174:	4631      	mov	r1, r6
 8011176:	4628      	mov	r0, r5
 8011178:	47b8      	blx	r7
 801117a:	3001      	adds	r0, #1
 801117c:	d1be      	bne.n	80110fc <_printf_float+0x2fc>
 801117e:	e68d      	b.n	8010e9c <_printf_float+0x9c>
 8011180:	9a04      	ldr	r2, [sp, #16]
 8011182:	464b      	mov	r3, r9
 8011184:	4442      	add	r2, r8
 8011186:	4631      	mov	r1, r6
 8011188:	4628      	mov	r0, r5
 801118a:	47b8      	blx	r7
 801118c:	3001      	adds	r0, #1
 801118e:	d1c1      	bne.n	8011114 <_printf_float+0x314>
 8011190:	e684      	b.n	8010e9c <_printf_float+0x9c>
 8011192:	9a08      	ldr	r2, [sp, #32]
 8011194:	2a01      	cmp	r2, #1
 8011196:	dc01      	bgt.n	801119c <_printf_float+0x39c>
 8011198:	07db      	lsls	r3, r3, #31
 801119a:	d537      	bpl.n	801120c <_printf_float+0x40c>
 801119c:	2301      	movs	r3, #1
 801119e:	4642      	mov	r2, r8
 80111a0:	4631      	mov	r1, r6
 80111a2:	4628      	mov	r0, r5
 80111a4:	47b8      	blx	r7
 80111a6:	3001      	adds	r0, #1
 80111a8:	f43f ae78 	beq.w	8010e9c <_printf_float+0x9c>
 80111ac:	4653      	mov	r3, sl
 80111ae:	465a      	mov	r2, fp
 80111b0:	4631      	mov	r1, r6
 80111b2:	4628      	mov	r0, r5
 80111b4:	47b8      	blx	r7
 80111b6:	3001      	adds	r0, #1
 80111b8:	f43f ae70 	beq.w	8010e9c <_printf_float+0x9c>
 80111bc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80111c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80111c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111c8:	d01b      	beq.n	8011202 <_printf_float+0x402>
 80111ca:	9b08      	ldr	r3, [sp, #32]
 80111cc:	f108 0201 	add.w	r2, r8, #1
 80111d0:	3b01      	subs	r3, #1
 80111d2:	4631      	mov	r1, r6
 80111d4:	4628      	mov	r0, r5
 80111d6:	47b8      	blx	r7
 80111d8:	3001      	adds	r0, #1
 80111da:	d10e      	bne.n	80111fa <_printf_float+0x3fa>
 80111dc:	e65e      	b.n	8010e9c <_printf_float+0x9c>
 80111de:	2301      	movs	r3, #1
 80111e0:	464a      	mov	r2, r9
 80111e2:	4631      	mov	r1, r6
 80111e4:	4628      	mov	r0, r5
 80111e6:	47b8      	blx	r7
 80111e8:	3001      	adds	r0, #1
 80111ea:	f43f ae57 	beq.w	8010e9c <_printf_float+0x9c>
 80111ee:	f108 0801 	add.w	r8, r8, #1
 80111f2:	9b08      	ldr	r3, [sp, #32]
 80111f4:	3b01      	subs	r3, #1
 80111f6:	4543      	cmp	r3, r8
 80111f8:	dcf1      	bgt.n	80111de <_printf_float+0x3de>
 80111fa:	9b04      	ldr	r3, [sp, #16]
 80111fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011200:	e6db      	b.n	8010fba <_printf_float+0x1ba>
 8011202:	f04f 0800 	mov.w	r8, #0
 8011206:	f104 091a 	add.w	r9, r4, #26
 801120a:	e7f2      	b.n	80111f2 <_printf_float+0x3f2>
 801120c:	2301      	movs	r3, #1
 801120e:	4642      	mov	r2, r8
 8011210:	e7df      	b.n	80111d2 <_printf_float+0x3d2>
 8011212:	2301      	movs	r3, #1
 8011214:	464a      	mov	r2, r9
 8011216:	4631      	mov	r1, r6
 8011218:	4628      	mov	r0, r5
 801121a:	47b8      	blx	r7
 801121c:	3001      	adds	r0, #1
 801121e:	f43f ae3d 	beq.w	8010e9c <_printf_float+0x9c>
 8011222:	f108 0801 	add.w	r8, r8, #1
 8011226:	68e3      	ldr	r3, [r4, #12]
 8011228:	9909      	ldr	r1, [sp, #36]	; 0x24
 801122a:	1a5b      	subs	r3, r3, r1
 801122c:	4543      	cmp	r3, r8
 801122e:	dcf0      	bgt.n	8011212 <_printf_float+0x412>
 8011230:	e6f7      	b.n	8011022 <_printf_float+0x222>
 8011232:	f04f 0800 	mov.w	r8, #0
 8011236:	f104 0919 	add.w	r9, r4, #25
 801123a:	e7f4      	b.n	8011226 <_printf_float+0x426>

0801123c <_printf_common>:
 801123c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011240:	4616      	mov	r6, r2
 8011242:	4699      	mov	r9, r3
 8011244:	688a      	ldr	r2, [r1, #8]
 8011246:	690b      	ldr	r3, [r1, #16]
 8011248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801124c:	4293      	cmp	r3, r2
 801124e:	bfb8      	it	lt
 8011250:	4613      	movlt	r3, r2
 8011252:	6033      	str	r3, [r6, #0]
 8011254:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011258:	4607      	mov	r7, r0
 801125a:	460c      	mov	r4, r1
 801125c:	b10a      	cbz	r2, 8011262 <_printf_common+0x26>
 801125e:	3301      	adds	r3, #1
 8011260:	6033      	str	r3, [r6, #0]
 8011262:	6823      	ldr	r3, [r4, #0]
 8011264:	0699      	lsls	r1, r3, #26
 8011266:	bf42      	ittt	mi
 8011268:	6833      	ldrmi	r3, [r6, #0]
 801126a:	3302      	addmi	r3, #2
 801126c:	6033      	strmi	r3, [r6, #0]
 801126e:	6825      	ldr	r5, [r4, #0]
 8011270:	f015 0506 	ands.w	r5, r5, #6
 8011274:	d106      	bne.n	8011284 <_printf_common+0x48>
 8011276:	f104 0a19 	add.w	sl, r4, #25
 801127a:	68e3      	ldr	r3, [r4, #12]
 801127c:	6832      	ldr	r2, [r6, #0]
 801127e:	1a9b      	subs	r3, r3, r2
 8011280:	42ab      	cmp	r3, r5
 8011282:	dc26      	bgt.n	80112d2 <_printf_common+0x96>
 8011284:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011288:	1e13      	subs	r3, r2, #0
 801128a:	6822      	ldr	r2, [r4, #0]
 801128c:	bf18      	it	ne
 801128e:	2301      	movne	r3, #1
 8011290:	0692      	lsls	r2, r2, #26
 8011292:	d42b      	bmi.n	80112ec <_printf_common+0xb0>
 8011294:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011298:	4649      	mov	r1, r9
 801129a:	4638      	mov	r0, r7
 801129c:	47c0      	blx	r8
 801129e:	3001      	adds	r0, #1
 80112a0:	d01e      	beq.n	80112e0 <_printf_common+0xa4>
 80112a2:	6823      	ldr	r3, [r4, #0]
 80112a4:	68e5      	ldr	r5, [r4, #12]
 80112a6:	6832      	ldr	r2, [r6, #0]
 80112a8:	f003 0306 	and.w	r3, r3, #6
 80112ac:	2b04      	cmp	r3, #4
 80112ae:	bf08      	it	eq
 80112b0:	1aad      	subeq	r5, r5, r2
 80112b2:	68a3      	ldr	r3, [r4, #8]
 80112b4:	6922      	ldr	r2, [r4, #16]
 80112b6:	bf0c      	ite	eq
 80112b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80112bc:	2500      	movne	r5, #0
 80112be:	4293      	cmp	r3, r2
 80112c0:	bfc4      	itt	gt
 80112c2:	1a9b      	subgt	r3, r3, r2
 80112c4:	18ed      	addgt	r5, r5, r3
 80112c6:	2600      	movs	r6, #0
 80112c8:	341a      	adds	r4, #26
 80112ca:	42b5      	cmp	r5, r6
 80112cc:	d11a      	bne.n	8011304 <_printf_common+0xc8>
 80112ce:	2000      	movs	r0, #0
 80112d0:	e008      	b.n	80112e4 <_printf_common+0xa8>
 80112d2:	2301      	movs	r3, #1
 80112d4:	4652      	mov	r2, sl
 80112d6:	4649      	mov	r1, r9
 80112d8:	4638      	mov	r0, r7
 80112da:	47c0      	blx	r8
 80112dc:	3001      	adds	r0, #1
 80112de:	d103      	bne.n	80112e8 <_printf_common+0xac>
 80112e0:	f04f 30ff 	mov.w	r0, #4294967295
 80112e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112e8:	3501      	adds	r5, #1
 80112ea:	e7c6      	b.n	801127a <_printf_common+0x3e>
 80112ec:	18e1      	adds	r1, r4, r3
 80112ee:	1c5a      	adds	r2, r3, #1
 80112f0:	2030      	movs	r0, #48	; 0x30
 80112f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80112f6:	4422      	add	r2, r4
 80112f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80112fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011300:	3302      	adds	r3, #2
 8011302:	e7c7      	b.n	8011294 <_printf_common+0x58>
 8011304:	2301      	movs	r3, #1
 8011306:	4622      	mov	r2, r4
 8011308:	4649      	mov	r1, r9
 801130a:	4638      	mov	r0, r7
 801130c:	47c0      	blx	r8
 801130e:	3001      	adds	r0, #1
 8011310:	d0e6      	beq.n	80112e0 <_printf_common+0xa4>
 8011312:	3601      	adds	r6, #1
 8011314:	e7d9      	b.n	80112ca <_printf_common+0x8e>
	...

08011318 <_printf_i>:
 8011318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801131c:	7e0f      	ldrb	r7, [r1, #24]
 801131e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011320:	2f78      	cmp	r7, #120	; 0x78
 8011322:	4691      	mov	r9, r2
 8011324:	4680      	mov	r8, r0
 8011326:	460c      	mov	r4, r1
 8011328:	469a      	mov	sl, r3
 801132a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801132e:	d807      	bhi.n	8011340 <_printf_i+0x28>
 8011330:	2f62      	cmp	r7, #98	; 0x62
 8011332:	d80a      	bhi.n	801134a <_printf_i+0x32>
 8011334:	2f00      	cmp	r7, #0
 8011336:	f000 80d8 	beq.w	80114ea <_printf_i+0x1d2>
 801133a:	2f58      	cmp	r7, #88	; 0x58
 801133c:	f000 80a3 	beq.w	8011486 <_printf_i+0x16e>
 8011340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011344:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011348:	e03a      	b.n	80113c0 <_printf_i+0xa8>
 801134a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801134e:	2b15      	cmp	r3, #21
 8011350:	d8f6      	bhi.n	8011340 <_printf_i+0x28>
 8011352:	a101      	add	r1, pc, #4	; (adr r1, 8011358 <_printf_i+0x40>)
 8011354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011358:	080113b1 	.word	0x080113b1
 801135c:	080113c5 	.word	0x080113c5
 8011360:	08011341 	.word	0x08011341
 8011364:	08011341 	.word	0x08011341
 8011368:	08011341 	.word	0x08011341
 801136c:	08011341 	.word	0x08011341
 8011370:	080113c5 	.word	0x080113c5
 8011374:	08011341 	.word	0x08011341
 8011378:	08011341 	.word	0x08011341
 801137c:	08011341 	.word	0x08011341
 8011380:	08011341 	.word	0x08011341
 8011384:	080114d1 	.word	0x080114d1
 8011388:	080113f5 	.word	0x080113f5
 801138c:	080114b3 	.word	0x080114b3
 8011390:	08011341 	.word	0x08011341
 8011394:	08011341 	.word	0x08011341
 8011398:	080114f3 	.word	0x080114f3
 801139c:	08011341 	.word	0x08011341
 80113a0:	080113f5 	.word	0x080113f5
 80113a4:	08011341 	.word	0x08011341
 80113a8:	08011341 	.word	0x08011341
 80113ac:	080114bb 	.word	0x080114bb
 80113b0:	682b      	ldr	r3, [r5, #0]
 80113b2:	1d1a      	adds	r2, r3, #4
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	602a      	str	r2, [r5, #0]
 80113b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80113bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80113c0:	2301      	movs	r3, #1
 80113c2:	e0a3      	b.n	801150c <_printf_i+0x1f4>
 80113c4:	6820      	ldr	r0, [r4, #0]
 80113c6:	6829      	ldr	r1, [r5, #0]
 80113c8:	0606      	lsls	r6, r0, #24
 80113ca:	f101 0304 	add.w	r3, r1, #4
 80113ce:	d50a      	bpl.n	80113e6 <_printf_i+0xce>
 80113d0:	680e      	ldr	r6, [r1, #0]
 80113d2:	602b      	str	r3, [r5, #0]
 80113d4:	2e00      	cmp	r6, #0
 80113d6:	da03      	bge.n	80113e0 <_printf_i+0xc8>
 80113d8:	232d      	movs	r3, #45	; 0x2d
 80113da:	4276      	negs	r6, r6
 80113dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80113e0:	485e      	ldr	r0, [pc, #376]	; (801155c <_printf_i+0x244>)
 80113e2:	230a      	movs	r3, #10
 80113e4:	e019      	b.n	801141a <_printf_i+0x102>
 80113e6:	680e      	ldr	r6, [r1, #0]
 80113e8:	602b      	str	r3, [r5, #0]
 80113ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80113ee:	bf18      	it	ne
 80113f0:	b236      	sxthne	r6, r6
 80113f2:	e7ef      	b.n	80113d4 <_printf_i+0xbc>
 80113f4:	682b      	ldr	r3, [r5, #0]
 80113f6:	6820      	ldr	r0, [r4, #0]
 80113f8:	1d19      	adds	r1, r3, #4
 80113fa:	6029      	str	r1, [r5, #0]
 80113fc:	0601      	lsls	r1, r0, #24
 80113fe:	d501      	bpl.n	8011404 <_printf_i+0xec>
 8011400:	681e      	ldr	r6, [r3, #0]
 8011402:	e002      	b.n	801140a <_printf_i+0xf2>
 8011404:	0646      	lsls	r6, r0, #25
 8011406:	d5fb      	bpl.n	8011400 <_printf_i+0xe8>
 8011408:	881e      	ldrh	r6, [r3, #0]
 801140a:	4854      	ldr	r0, [pc, #336]	; (801155c <_printf_i+0x244>)
 801140c:	2f6f      	cmp	r7, #111	; 0x6f
 801140e:	bf0c      	ite	eq
 8011410:	2308      	moveq	r3, #8
 8011412:	230a      	movne	r3, #10
 8011414:	2100      	movs	r1, #0
 8011416:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801141a:	6865      	ldr	r5, [r4, #4]
 801141c:	60a5      	str	r5, [r4, #8]
 801141e:	2d00      	cmp	r5, #0
 8011420:	bfa2      	ittt	ge
 8011422:	6821      	ldrge	r1, [r4, #0]
 8011424:	f021 0104 	bicge.w	r1, r1, #4
 8011428:	6021      	strge	r1, [r4, #0]
 801142a:	b90e      	cbnz	r6, 8011430 <_printf_i+0x118>
 801142c:	2d00      	cmp	r5, #0
 801142e:	d04d      	beq.n	80114cc <_printf_i+0x1b4>
 8011430:	4615      	mov	r5, r2
 8011432:	fbb6 f1f3 	udiv	r1, r6, r3
 8011436:	fb03 6711 	mls	r7, r3, r1, r6
 801143a:	5dc7      	ldrb	r7, [r0, r7]
 801143c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011440:	4637      	mov	r7, r6
 8011442:	42bb      	cmp	r3, r7
 8011444:	460e      	mov	r6, r1
 8011446:	d9f4      	bls.n	8011432 <_printf_i+0x11a>
 8011448:	2b08      	cmp	r3, #8
 801144a:	d10b      	bne.n	8011464 <_printf_i+0x14c>
 801144c:	6823      	ldr	r3, [r4, #0]
 801144e:	07de      	lsls	r6, r3, #31
 8011450:	d508      	bpl.n	8011464 <_printf_i+0x14c>
 8011452:	6923      	ldr	r3, [r4, #16]
 8011454:	6861      	ldr	r1, [r4, #4]
 8011456:	4299      	cmp	r1, r3
 8011458:	bfde      	ittt	le
 801145a:	2330      	movle	r3, #48	; 0x30
 801145c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011460:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011464:	1b52      	subs	r2, r2, r5
 8011466:	6122      	str	r2, [r4, #16]
 8011468:	f8cd a000 	str.w	sl, [sp]
 801146c:	464b      	mov	r3, r9
 801146e:	aa03      	add	r2, sp, #12
 8011470:	4621      	mov	r1, r4
 8011472:	4640      	mov	r0, r8
 8011474:	f7ff fee2 	bl	801123c <_printf_common>
 8011478:	3001      	adds	r0, #1
 801147a:	d14c      	bne.n	8011516 <_printf_i+0x1fe>
 801147c:	f04f 30ff 	mov.w	r0, #4294967295
 8011480:	b004      	add	sp, #16
 8011482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011486:	4835      	ldr	r0, [pc, #212]	; (801155c <_printf_i+0x244>)
 8011488:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801148c:	6829      	ldr	r1, [r5, #0]
 801148e:	6823      	ldr	r3, [r4, #0]
 8011490:	f851 6b04 	ldr.w	r6, [r1], #4
 8011494:	6029      	str	r1, [r5, #0]
 8011496:	061d      	lsls	r5, r3, #24
 8011498:	d514      	bpl.n	80114c4 <_printf_i+0x1ac>
 801149a:	07df      	lsls	r7, r3, #31
 801149c:	bf44      	itt	mi
 801149e:	f043 0320 	orrmi.w	r3, r3, #32
 80114a2:	6023      	strmi	r3, [r4, #0]
 80114a4:	b91e      	cbnz	r6, 80114ae <_printf_i+0x196>
 80114a6:	6823      	ldr	r3, [r4, #0]
 80114a8:	f023 0320 	bic.w	r3, r3, #32
 80114ac:	6023      	str	r3, [r4, #0]
 80114ae:	2310      	movs	r3, #16
 80114b0:	e7b0      	b.n	8011414 <_printf_i+0xfc>
 80114b2:	6823      	ldr	r3, [r4, #0]
 80114b4:	f043 0320 	orr.w	r3, r3, #32
 80114b8:	6023      	str	r3, [r4, #0]
 80114ba:	2378      	movs	r3, #120	; 0x78
 80114bc:	4828      	ldr	r0, [pc, #160]	; (8011560 <_printf_i+0x248>)
 80114be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80114c2:	e7e3      	b.n	801148c <_printf_i+0x174>
 80114c4:	0659      	lsls	r1, r3, #25
 80114c6:	bf48      	it	mi
 80114c8:	b2b6      	uxthmi	r6, r6
 80114ca:	e7e6      	b.n	801149a <_printf_i+0x182>
 80114cc:	4615      	mov	r5, r2
 80114ce:	e7bb      	b.n	8011448 <_printf_i+0x130>
 80114d0:	682b      	ldr	r3, [r5, #0]
 80114d2:	6826      	ldr	r6, [r4, #0]
 80114d4:	6961      	ldr	r1, [r4, #20]
 80114d6:	1d18      	adds	r0, r3, #4
 80114d8:	6028      	str	r0, [r5, #0]
 80114da:	0635      	lsls	r5, r6, #24
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	d501      	bpl.n	80114e4 <_printf_i+0x1cc>
 80114e0:	6019      	str	r1, [r3, #0]
 80114e2:	e002      	b.n	80114ea <_printf_i+0x1d2>
 80114e4:	0670      	lsls	r0, r6, #25
 80114e6:	d5fb      	bpl.n	80114e0 <_printf_i+0x1c8>
 80114e8:	8019      	strh	r1, [r3, #0]
 80114ea:	2300      	movs	r3, #0
 80114ec:	6123      	str	r3, [r4, #16]
 80114ee:	4615      	mov	r5, r2
 80114f0:	e7ba      	b.n	8011468 <_printf_i+0x150>
 80114f2:	682b      	ldr	r3, [r5, #0]
 80114f4:	1d1a      	adds	r2, r3, #4
 80114f6:	602a      	str	r2, [r5, #0]
 80114f8:	681d      	ldr	r5, [r3, #0]
 80114fa:	6862      	ldr	r2, [r4, #4]
 80114fc:	2100      	movs	r1, #0
 80114fe:	4628      	mov	r0, r5
 8011500:	f7ee fef6 	bl	80002f0 <memchr>
 8011504:	b108      	cbz	r0, 801150a <_printf_i+0x1f2>
 8011506:	1b40      	subs	r0, r0, r5
 8011508:	6060      	str	r0, [r4, #4]
 801150a:	6863      	ldr	r3, [r4, #4]
 801150c:	6123      	str	r3, [r4, #16]
 801150e:	2300      	movs	r3, #0
 8011510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011514:	e7a8      	b.n	8011468 <_printf_i+0x150>
 8011516:	6923      	ldr	r3, [r4, #16]
 8011518:	462a      	mov	r2, r5
 801151a:	4649      	mov	r1, r9
 801151c:	4640      	mov	r0, r8
 801151e:	47d0      	blx	sl
 8011520:	3001      	adds	r0, #1
 8011522:	d0ab      	beq.n	801147c <_printf_i+0x164>
 8011524:	6823      	ldr	r3, [r4, #0]
 8011526:	079b      	lsls	r3, r3, #30
 8011528:	d413      	bmi.n	8011552 <_printf_i+0x23a>
 801152a:	68e0      	ldr	r0, [r4, #12]
 801152c:	9b03      	ldr	r3, [sp, #12]
 801152e:	4298      	cmp	r0, r3
 8011530:	bfb8      	it	lt
 8011532:	4618      	movlt	r0, r3
 8011534:	e7a4      	b.n	8011480 <_printf_i+0x168>
 8011536:	2301      	movs	r3, #1
 8011538:	4632      	mov	r2, r6
 801153a:	4649      	mov	r1, r9
 801153c:	4640      	mov	r0, r8
 801153e:	47d0      	blx	sl
 8011540:	3001      	adds	r0, #1
 8011542:	d09b      	beq.n	801147c <_printf_i+0x164>
 8011544:	3501      	adds	r5, #1
 8011546:	68e3      	ldr	r3, [r4, #12]
 8011548:	9903      	ldr	r1, [sp, #12]
 801154a:	1a5b      	subs	r3, r3, r1
 801154c:	42ab      	cmp	r3, r5
 801154e:	dcf2      	bgt.n	8011536 <_printf_i+0x21e>
 8011550:	e7eb      	b.n	801152a <_printf_i+0x212>
 8011552:	2500      	movs	r5, #0
 8011554:	f104 0619 	add.w	r6, r4, #25
 8011558:	e7f5      	b.n	8011546 <_printf_i+0x22e>
 801155a:	bf00      	nop
 801155c:	0801e246 	.word	0x0801e246
 8011560:	0801e257 	.word	0x0801e257

08011564 <srand>:
 8011564:	b538      	push	{r3, r4, r5, lr}
 8011566:	4b10      	ldr	r3, [pc, #64]	; (80115a8 <srand+0x44>)
 8011568:	681d      	ldr	r5, [r3, #0]
 801156a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801156c:	4604      	mov	r4, r0
 801156e:	b9b3      	cbnz	r3, 801159e <srand+0x3a>
 8011570:	2018      	movs	r0, #24
 8011572:	f000 ffb5 	bl	80124e0 <malloc>
 8011576:	4602      	mov	r2, r0
 8011578:	63a8      	str	r0, [r5, #56]	; 0x38
 801157a:	b920      	cbnz	r0, 8011586 <srand+0x22>
 801157c:	4b0b      	ldr	r3, [pc, #44]	; (80115ac <srand+0x48>)
 801157e:	480c      	ldr	r0, [pc, #48]	; (80115b0 <srand+0x4c>)
 8011580:	2142      	movs	r1, #66	; 0x42
 8011582:	f000 f97d 	bl	8011880 <__assert_func>
 8011586:	490b      	ldr	r1, [pc, #44]	; (80115b4 <srand+0x50>)
 8011588:	4b0b      	ldr	r3, [pc, #44]	; (80115b8 <srand+0x54>)
 801158a:	e9c0 1300 	strd	r1, r3, [r0]
 801158e:	4b0b      	ldr	r3, [pc, #44]	; (80115bc <srand+0x58>)
 8011590:	6083      	str	r3, [r0, #8]
 8011592:	230b      	movs	r3, #11
 8011594:	8183      	strh	r3, [r0, #12]
 8011596:	2100      	movs	r1, #0
 8011598:	2001      	movs	r0, #1
 801159a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801159e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80115a0:	2200      	movs	r2, #0
 80115a2:	611c      	str	r4, [r3, #16]
 80115a4:	615a      	str	r2, [r3, #20]
 80115a6:	bd38      	pop	{r3, r4, r5, pc}
 80115a8:	24000414 	.word	0x24000414
 80115ac:	0801e268 	.word	0x0801e268
 80115b0:	0801e27f 	.word	0x0801e27f
 80115b4:	abcd330e 	.word	0xabcd330e
 80115b8:	e66d1234 	.word	0xe66d1234
 80115bc:	0005deec 	.word	0x0005deec

080115c0 <rand>:
 80115c0:	4b16      	ldr	r3, [pc, #88]	; (801161c <rand+0x5c>)
 80115c2:	b510      	push	{r4, lr}
 80115c4:	681c      	ldr	r4, [r3, #0]
 80115c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80115c8:	b9b3      	cbnz	r3, 80115f8 <rand+0x38>
 80115ca:	2018      	movs	r0, #24
 80115cc:	f000 ff88 	bl	80124e0 <malloc>
 80115d0:	63a0      	str	r0, [r4, #56]	; 0x38
 80115d2:	b928      	cbnz	r0, 80115e0 <rand+0x20>
 80115d4:	4602      	mov	r2, r0
 80115d6:	4b12      	ldr	r3, [pc, #72]	; (8011620 <rand+0x60>)
 80115d8:	4812      	ldr	r0, [pc, #72]	; (8011624 <rand+0x64>)
 80115da:	214e      	movs	r1, #78	; 0x4e
 80115dc:	f000 f950 	bl	8011880 <__assert_func>
 80115e0:	4a11      	ldr	r2, [pc, #68]	; (8011628 <rand+0x68>)
 80115e2:	4b12      	ldr	r3, [pc, #72]	; (801162c <rand+0x6c>)
 80115e4:	e9c0 2300 	strd	r2, r3, [r0]
 80115e8:	4b11      	ldr	r3, [pc, #68]	; (8011630 <rand+0x70>)
 80115ea:	6083      	str	r3, [r0, #8]
 80115ec:	230b      	movs	r3, #11
 80115ee:	8183      	strh	r3, [r0, #12]
 80115f0:	2201      	movs	r2, #1
 80115f2:	2300      	movs	r3, #0
 80115f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80115f8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80115fa:	4a0e      	ldr	r2, [pc, #56]	; (8011634 <rand+0x74>)
 80115fc:	6920      	ldr	r0, [r4, #16]
 80115fe:	6963      	ldr	r3, [r4, #20]
 8011600:	490d      	ldr	r1, [pc, #52]	; (8011638 <rand+0x78>)
 8011602:	4342      	muls	r2, r0
 8011604:	fb01 2203 	mla	r2, r1, r3, r2
 8011608:	fba0 0101 	umull	r0, r1, r0, r1
 801160c:	1c43      	adds	r3, r0, #1
 801160e:	eb42 0001 	adc.w	r0, r2, r1
 8011612:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8011616:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801161a:	bd10      	pop	{r4, pc}
 801161c:	24000414 	.word	0x24000414
 8011620:	0801e268 	.word	0x0801e268
 8011624:	0801e27f 	.word	0x0801e27f
 8011628:	abcd330e 	.word	0xabcd330e
 801162c:	e66d1234 	.word	0xe66d1234
 8011630:	0005deec 	.word	0x0005deec
 8011634:	5851f42d 	.word	0x5851f42d
 8011638:	4c957f2d 	.word	0x4c957f2d

0801163c <siprintf>:
 801163c:	b40e      	push	{r1, r2, r3}
 801163e:	b500      	push	{lr}
 8011640:	b09c      	sub	sp, #112	; 0x70
 8011642:	ab1d      	add	r3, sp, #116	; 0x74
 8011644:	9002      	str	r0, [sp, #8]
 8011646:	9006      	str	r0, [sp, #24]
 8011648:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801164c:	4809      	ldr	r0, [pc, #36]	; (8011674 <siprintf+0x38>)
 801164e:	9107      	str	r1, [sp, #28]
 8011650:	9104      	str	r1, [sp, #16]
 8011652:	4909      	ldr	r1, [pc, #36]	; (8011678 <siprintf+0x3c>)
 8011654:	f853 2b04 	ldr.w	r2, [r3], #4
 8011658:	9105      	str	r1, [sp, #20]
 801165a:	6800      	ldr	r0, [r0, #0]
 801165c:	9301      	str	r3, [sp, #4]
 801165e:	a902      	add	r1, sp, #8
 8011660:	f001 fc1c 	bl	8012e9c <_svfiprintf_r>
 8011664:	9b02      	ldr	r3, [sp, #8]
 8011666:	2200      	movs	r2, #0
 8011668:	701a      	strb	r2, [r3, #0]
 801166a:	b01c      	add	sp, #112	; 0x70
 801166c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011670:	b003      	add	sp, #12
 8011672:	4770      	bx	lr
 8011674:	24000414 	.word	0x24000414
 8011678:	ffff0208 	.word	0xffff0208

0801167c <strcpy>:
 801167c:	4603      	mov	r3, r0
 801167e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011682:	f803 2b01 	strb.w	r2, [r3], #1
 8011686:	2a00      	cmp	r2, #0
 8011688:	d1f9      	bne.n	801167e <strcpy+0x2>
 801168a:	4770      	bx	lr

0801168c <strcspn>:
 801168c:	b570      	push	{r4, r5, r6, lr}
 801168e:	4603      	mov	r3, r0
 8011690:	461e      	mov	r6, r3
 8011692:	f813 4b01 	ldrb.w	r4, [r3], #1
 8011696:	b144      	cbz	r4, 80116aa <strcspn+0x1e>
 8011698:	1e4a      	subs	r2, r1, #1
 801169a:	e001      	b.n	80116a0 <strcspn+0x14>
 801169c:	42a5      	cmp	r5, r4
 801169e:	d004      	beq.n	80116aa <strcspn+0x1e>
 80116a0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80116a4:	2d00      	cmp	r5, #0
 80116a6:	d1f9      	bne.n	801169c <strcspn+0x10>
 80116a8:	e7f2      	b.n	8011690 <strcspn+0x4>
 80116aa:	1a30      	subs	r0, r6, r0
 80116ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080116b0 <strtok>:
 80116b0:	4b16      	ldr	r3, [pc, #88]	; (801170c <strtok+0x5c>)
 80116b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80116b4:	681e      	ldr	r6, [r3, #0]
 80116b6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80116b8:	4605      	mov	r5, r0
 80116ba:	b9fc      	cbnz	r4, 80116fc <strtok+0x4c>
 80116bc:	2050      	movs	r0, #80	; 0x50
 80116be:	9101      	str	r1, [sp, #4]
 80116c0:	f000 ff0e 	bl	80124e0 <malloc>
 80116c4:	9901      	ldr	r1, [sp, #4]
 80116c6:	65b0      	str	r0, [r6, #88]	; 0x58
 80116c8:	4602      	mov	r2, r0
 80116ca:	b920      	cbnz	r0, 80116d6 <strtok+0x26>
 80116cc:	4b10      	ldr	r3, [pc, #64]	; (8011710 <strtok+0x60>)
 80116ce:	4811      	ldr	r0, [pc, #68]	; (8011714 <strtok+0x64>)
 80116d0:	2157      	movs	r1, #87	; 0x57
 80116d2:	f000 f8d5 	bl	8011880 <__assert_func>
 80116d6:	e9c0 4400 	strd	r4, r4, [r0]
 80116da:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80116de:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80116e2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80116e6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80116ea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80116ee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80116f2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80116f6:	6184      	str	r4, [r0, #24]
 80116f8:	7704      	strb	r4, [r0, #28]
 80116fa:	6244      	str	r4, [r0, #36]	; 0x24
 80116fc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80116fe:	2301      	movs	r3, #1
 8011700:	4628      	mov	r0, r5
 8011702:	b002      	add	sp, #8
 8011704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011708:	f000 b806 	b.w	8011718 <__strtok_r>
 801170c:	24000414 	.word	0x24000414
 8011710:	0801e268 	.word	0x0801e268
 8011714:	0801e2da 	.word	0x0801e2da

08011718 <__strtok_r>:
 8011718:	b5f0      	push	{r4, r5, r6, r7, lr}
 801171a:	b908      	cbnz	r0, 8011720 <__strtok_r+0x8>
 801171c:	6810      	ldr	r0, [r2, #0]
 801171e:	b188      	cbz	r0, 8011744 <__strtok_r+0x2c>
 8011720:	4604      	mov	r4, r0
 8011722:	4620      	mov	r0, r4
 8011724:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011728:	460f      	mov	r7, r1
 801172a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801172e:	b91e      	cbnz	r6, 8011738 <__strtok_r+0x20>
 8011730:	b965      	cbnz	r5, 801174c <__strtok_r+0x34>
 8011732:	6015      	str	r5, [r2, #0]
 8011734:	4628      	mov	r0, r5
 8011736:	e005      	b.n	8011744 <__strtok_r+0x2c>
 8011738:	42b5      	cmp	r5, r6
 801173a:	d1f6      	bne.n	801172a <__strtok_r+0x12>
 801173c:	2b00      	cmp	r3, #0
 801173e:	d1f0      	bne.n	8011722 <__strtok_r+0xa>
 8011740:	6014      	str	r4, [r2, #0]
 8011742:	7003      	strb	r3, [r0, #0]
 8011744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011746:	461c      	mov	r4, r3
 8011748:	e00c      	b.n	8011764 <__strtok_r+0x4c>
 801174a:	b915      	cbnz	r5, 8011752 <__strtok_r+0x3a>
 801174c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011750:	460e      	mov	r6, r1
 8011752:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011756:	42ab      	cmp	r3, r5
 8011758:	d1f7      	bne.n	801174a <__strtok_r+0x32>
 801175a:	2b00      	cmp	r3, #0
 801175c:	d0f3      	beq.n	8011746 <__strtok_r+0x2e>
 801175e:	2300      	movs	r3, #0
 8011760:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011764:	6014      	str	r4, [r2, #0]
 8011766:	e7ed      	b.n	8011744 <__strtok_r+0x2c>

08011768 <_strtol_l.constprop.0>:
 8011768:	2b01      	cmp	r3, #1
 801176a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801176e:	d001      	beq.n	8011774 <_strtol_l.constprop.0+0xc>
 8011770:	2b24      	cmp	r3, #36	; 0x24
 8011772:	d906      	bls.n	8011782 <_strtol_l.constprop.0+0x1a>
 8011774:	f7ff fa74 	bl	8010c60 <__errno>
 8011778:	2316      	movs	r3, #22
 801177a:	6003      	str	r3, [r0, #0]
 801177c:	2000      	movs	r0, #0
 801177e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011782:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011868 <_strtol_l.constprop.0+0x100>
 8011786:	460d      	mov	r5, r1
 8011788:	462e      	mov	r6, r5
 801178a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801178e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8011792:	f017 0708 	ands.w	r7, r7, #8
 8011796:	d1f7      	bne.n	8011788 <_strtol_l.constprop.0+0x20>
 8011798:	2c2d      	cmp	r4, #45	; 0x2d
 801179a:	d132      	bne.n	8011802 <_strtol_l.constprop.0+0x9a>
 801179c:	782c      	ldrb	r4, [r5, #0]
 801179e:	2701      	movs	r7, #1
 80117a0:	1cb5      	adds	r5, r6, #2
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d05b      	beq.n	801185e <_strtol_l.constprop.0+0xf6>
 80117a6:	2b10      	cmp	r3, #16
 80117a8:	d109      	bne.n	80117be <_strtol_l.constprop.0+0x56>
 80117aa:	2c30      	cmp	r4, #48	; 0x30
 80117ac:	d107      	bne.n	80117be <_strtol_l.constprop.0+0x56>
 80117ae:	782c      	ldrb	r4, [r5, #0]
 80117b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80117b4:	2c58      	cmp	r4, #88	; 0x58
 80117b6:	d14d      	bne.n	8011854 <_strtol_l.constprop.0+0xec>
 80117b8:	786c      	ldrb	r4, [r5, #1]
 80117ba:	2310      	movs	r3, #16
 80117bc:	3502      	adds	r5, #2
 80117be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80117c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80117c6:	f04f 0c00 	mov.w	ip, #0
 80117ca:	fbb8 f9f3 	udiv	r9, r8, r3
 80117ce:	4666      	mov	r6, ip
 80117d0:	fb03 8a19 	mls	sl, r3, r9, r8
 80117d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80117d8:	f1be 0f09 	cmp.w	lr, #9
 80117dc:	d816      	bhi.n	801180c <_strtol_l.constprop.0+0xa4>
 80117de:	4674      	mov	r4, lr
 80117e0:	42a3      	cmp	r3, r4
 80117e2:	dd24      	ble.n	801182e <_strtol_l.constprop.0+0xc6>
 80117e4:	f1bc 0f00 	cmp.w	ip, #0
 80117e8:	db1e      	blt.n	8011828 <_strtol_l.constprop.0+0xc0>
 80117ea:	45b1      	cmp	r9, r6
 80117ec:	d31c      	bcc.n	8011828 <_strtol_l.constprop.0+0xc0>
 80117ee:	d101      	bne.n	80117f4 <_strtol_l.constprop.0+0x8c>
 80117f0:	45a2      	cmp	sl, r4
 80117f2:	db19      	blt.n	8011828 <_strtol_l.constprop.0+0xc0>
 80117f4:	fb06 4603 	mla	r6, r6, r3, r4
 80117f8:	f04f 0c01 	mov.w	ip, #1
 80117fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011800:	e7e8      	b.n	80117d4 <_strtol_l.constprop.0+0x6c>
 8011802:	2c2b      	cmp	r4, #43	; 0x2b
 8011804:	bf04      	itt	eq
 8011806:	782c      	ldrbeq	r4, [r5, #0]
 8011808:	1cb5      	addeq	r5, r6, #2
 801180a:	e7ca      	b.n	80117a2 <_strtol_l.constprop.0+0x3a>
 801180c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011810:	f1be 0f19 	cmp.w	lr, #25
 8011814:	d801      	bhi.n	801181a <_strtol_l.constprop.0+0xb2>
 8011816:	3c37      	subs	r4, #55	; 0x37
 8011818:	e7e2      	b.n	80117e0 <_strtol_l.constprop.0+0x78>
 801181a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801181e:	f1be 0f19 	cmp.w	lr, #25
 8011822:	d804      	bhi.n	801182e <_strtol_l.constprop.0+0xc6>
 8011824:	3c57      	subs	r4, #87	; 0x57
 8011826:	e7db      	b.n	80117e0 <_strtol_l.constprop.0+0x78>
 8011828:	f04f 3cff 	mov.w	ip, #4294967295
 801182c:	e7e6      	b.n	80117fc <_strtol_l.constprop.0+0x94>
 801182e:	f1bc 0f00 	cmp.w	ip, #0
 8011832:	da05      	bge.n	8011840 <_strtol_l.constprop.0+0xd8>
 8011834:	2322      	movs	r3, #34	; 0x22
 8011836:	6003      	str	r3, [r0, #0]
 8011838:	4646      	mov	r6, r8
 801183a:	b942      	cbnz	r2, 801184e <_strtol_l.constprop.0+0xe6>
 801183c:	4630      	mov	r0, r6
 801183e:	e79e      	b.n	801177e <_strtol_l.constprop.0+0x16>
 8011840:	b107      	cbz	r7, 8011844 <_strtol_l.constprop.0+0xdc>
 8011842:	4276      	negs	r6, r6
 8011844:	2a00      	cmp	r2, #0
 8011846:	d0f9      	beq.n	801183c <_strtol_l.constprop.0+0xd4>
 8011848:	f1bc 0f00 	cmp.w	ip, #0
 801184c:	d000      	beq.n	8011850 <_strtol_l.constprop.0+0xe8>
 801184e:	1e69      	subs	r1, r5, #1
 8011850:	6011      	str	r1, [r2, #0]
 8011852:	e7f3      	b.n	801183c <_strtol_l.constprop.0+0xd4>
 8011854:	2430      	movs	r4, #48	; 0x30
 8011856:	2b00      	cmp	r3, #0
 8011858:	d1b1      	bne.n	80117be <_strtol_l.constprop.0+0x56>
 801185a:	2308      	movs	r3, #8
 801185c:	e7af      	b.n	80117be <_strtol_l.constprop.0+0x56>
 801185e:	2c30      	cmp	r4, #48	; 0x30
 8011860:	d0a5      	beq.n	80117ae <_strtol_l.constprop.0+0x46>
 8011862:	230a      	movs	r3, #10
 8011864:	e7ab      	b.n	80117be <_strtol_l.constprop.0+0x56>
 8011866:	bf00      	nop
 8011868:	0801e12d 	.word	0x0801e12d

0801186c <strtol>:
 801186c:	4613      	mov	r3, r2
 801186e:	460a      	mov	r2, r1
 8011870:	4601      	mov	r1, r0
 8011872:	4802      	ldr	r0, [pc, #8]	; (801187c <strtol+0x10>)
 8011874:	6800      	ldr	r0, [r0, #0]
 8011876:	f7ff bf77 	b.w	8011768 <_strtol_l.constprop.0>
 801187a:	bf00      	nop
 801187c:	24000414 	.word	0x24000414

08011880 <__assert_func>:
 8011880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011882:	4614      	mov	r4, r2
 8011884:	461a      	mov	r2, r3
 8011886:	4b09      	ldr	r3, [pc, #36]	; (80118ac <__assert_func+0x2c>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	4605      	mov	r5, r0
 801188c:	68d8      	ldr	r0, [r3, #12]
 801188e:	b14c      	cbz	r4, 80118a4 <__assert_func+0x24>
 8011890:	4b07      	ldr	r3, [pc, #28]	; (80118b0 <__assert_func+0x30>)
 8011892:	9100      	str	r1, [sp, #0]
 8011894:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011898:	4906      	ldr	r1, [pc, #24]	; (80118b4 <__assert_func+0x34>)
 801189a:	462b      	mov	r3, r5
 801189c:	f000 fe0a 	bl	80124b4 <fiprintf>
 80118a0:	f001 fe26 	bl	80134f0 <abort>
 80118a4:	4b04      	ldr	r3, [pc, #16]	; (80118b8 <__assert_func+0x38>)
 80118a6:	461c      	mov	r4, r3
 80118a8:	e7f3      	b.n	8011892 <__assert_func+0x12>
 80118aa:	bf00      	nop
 80118ac:	24000414 	.word	0x24000414
 80118b0:	0801e337 	.word	0x0801e337
 80118b4:	0801e344 	.word	0x0801e344
 80118b8:	0801e372 	.word	0x0801e372

080118bc <quorem>:
 80118bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118c0:	6903      	ldr	r3, [r0, #16]
 80118c2:	690c      	ldr	r4, [r1, #16]
 80118c4:	42a3      	cmp	r3, r4
 80118c6:	4607      	mov	r7, r0
 80118c8:	f2c0 8081 	blt.w	80119ce <quorem+0x112>
 80118cc:	3c01      	subs	r4, #1
 80118ce:	f101 0814 	add.w	r8, r1, #20
 80118d2:	f100 0514 	add.w	r5, r0, #20
 80118d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80118da:	9301      	str	r3, [sp, #4]
 80118dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80118e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80118e4:	3301      	adds	r3, #1
 80118e6:	429a      	cmp	r2, r3
 80118e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80118ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80118f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80118f4:	d331      	bcc.n	801195a <quorem+0x9e>
 80118f6:	f04f 0e00 	mov.w	lr, #0
 80118fa:	4640      	mov	r0, r8
 80118fc:	46ac      	mov	ip, r5
 80118fe:	46f2      	mov	sl, lr
 8011900:	f850 2b04 	ldr.w	r2, [r0], #4
 8011904:	b293      	uxth	r3, r2
 8011906:	fb06 e303 	mla	r3, r6, r3, lr
 801190a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801190e:	b29b      	uxth	r3, r3
 8011910:	ebaa 0303 	sub.w	r3, sl, r3
 8011914:	f8dc a000 	ldr.w	sl, [ip]
 8011918:	0c12      	lsrs	r2, r2, #16
 801191a:	fa13 f38a 	uxtah	r3, r3, sl
 801191e:	fb06 e202 	mla	r2, r6, r2, lr
 8011922:	9300      	str	r3, [sp, #0]
 8011924:	9b00      	ldr	r3, [sp, #0]
 8011926:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801192a:	b292      	uxth	r2, r2
 801192c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011930:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011934:	f8bd 3000 	ldrh.w	r3, [sp]
 8011938:	4581      	cmp	r9, r0
 801193a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801193e:	f84c 3b04 	str.w	r3, [ip], #4
 8011942:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011946:	d2db      	bcs.n	8011900 <quorem+0x44>
 8011948:	f855 300b 	ldr.w	r3, [r5, fp]
 801194c:	b92b      	cbnz	r3, 801195a <quorem+0x9e>
 801194e:	9b01      	ldr	r3, [sp, #4]
 8011950:	3b04      	subs	r3, #4
 8011952:	429d      	cmp	r5, r3
 8011954:	461a      	mov	r2, r3
 8011956:	d32e      	bcc.n	80119b6 <quorem+0xfa>
 8011958:	613c      	str	r4, [r7, #16]
 801195a:	4638      	mov	r0, r7
 801195c:	f001 f84a 	bl	80129f4 <__mcmp>
 8011960:	2800      	cmp	r0, #0
 8011962:	db24      	blt.n	80119ae <quorem+0xf2>
 8011964:	3601      	adds	r6, #1
 8011966:	4628      	mov	r0, r5
 8011968:	f04f 0c00 	mov.w	ip, #0
 801196c:	f858 2b04 	ldr.w	r2, [r8], #4
 8011970:	f8d0 e000 	ldr.w	lr, [r0]
 8011974:	b293      	uxth	r3, r2
 8011976:	ebac 0303 	sub.w	r3, ip, r3
 801197a:	0c12      	lsrs	r2, r2, #16
 801197c:	fa13 f38e 	uxtah	r3, r3, lr
 8011980:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011984:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011988:	b29b      	uxth	r3, r3
 801198a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801198e:	45c1      	cmp	r9, r8
 8011990:	f840 3b04 	str.w	r3, [r0], #4
 8011994:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011998:	d2e8      	bcs.n	801196c <quorem+0xb0>
 801199a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801199e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80119a2:	b922      	cbnz	r2, 80119ae <quorem+0xf2>
 80119a4:	3b04      	subs	r3, #4
 80119a6:	429d      	cmp	r5, r3
 80119a8:	461a      	mov	r2, r3
 80119aa:	d30a      	bcc.n	80119c2 <quorem+0x106>
 80119ac:	613c      	str	r4, [r7, #16]
 80119ae:	4630      	mov	r0, r6
 80119b0:	b003      	add	sp, #12
 80119b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119b6:	6812      	ldr	r2, [r2, #0]
 80119b8:	3b04      	subs	r3, #4
 80119ba:	2a00      	cmp	r2, #0
 80119bc:	d1cc      	bne.n	8011958 <quorem+0x9c>
 80119be:	3c01      	subs	r4, #1
 80119c0:	e7c7      	b.n	8011952 <quorem+0x96>
 80119c2:	6812      	ldr	r2, [r2, #0]
 80119c4:	3b04      	subs	r3, #4
 80119c6:	2a00      	cmp	r2, #0
 80119c8:	d1f0      	bne.n	80119ac <quorem+0xf0>
 80119ca:	3c01      	subs	r4, #1
 80119cc:	e7eb      	b.n	80119a6 <quorem+0xea>
 80119ce:	2000      	movs	r0, #0
 80119d0:	e7ee      	b.n	80119b0 <quorem+0xf4>
 80119d2:	0000      	movs	r0, r0
 80119d4:	0000      	movs	r0, r0
	...

080119d8 <_dtoa_r>:
 80119d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119dc:	ed2d 8b02 	vpush	{d8}
 80119e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80119e2:	b091      	sub	sp, #68	; 0x44
 80119e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80119e8:	ec59 8b10 	vmov	r8, r9, d0
 80119ec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80119ee:	9106      	str	r1, [sp, #24]
 80119f0:	4606      	mov	r6, r0
 80119f2:	9208      	str	r2, [sp, #32]
 80119f4:	930c      	str	r3, [sp, #48]	; 0x30
 80119f6:	b975      	cbnz	r5, 8011a16 <_dtoa_r+0x3e>
 80119f8:	2010      	movs	r0, #16
 80119fa:	f000 fd71 	bl	80124e0 <malloc>
 80119fe:	4602      	mov	r2, r0
 8011a00:	6270      	str	r0, [r6, #36]	; 0x24
 8011a02:	b920      	cbnz	r0, 8011a0e <_dtoa_r+0x36>
 8011a04:	4baa      	ldr	r3, [pc, #680]	; (8011cb0 <_dtoa_r+0x2d8>)
 8011a06:	21ea      	movs	r1, #234	; 0xea
 8011a08:	48aa      	ldr	r0, [pc, #680]	; (8011cb4 <_dtoa_r+0x2dc>)
 8011a0a:	f7ff ff39 	bl	8011880 <__assert_func>
 8011a0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011a12:	6005      	str	r5, [r0, #0]
 8011a14:	60c5      	str	r5, [r0, #12]
 8011a16:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011a18:	6819      	ldr	r1, [r3, #0]
 8011a1a:	b151      	cbz	r1, 8011a32 <_dtoa_r+0x5a>
 8011a1c:	685a      	ldr	r2, [r3, #4]
 8011a1e:	604a      	str	r2, [r1, #4]
 8011a20:	2301      	movs	r3, #1
 8011a22:	4093      	lsls	r3, r2
 8011a24:	608b      	str	r3, [r1, #8]
 8011a26:	4630      	mov	r0, r6
 8011a28:	f000 fda2 	bl	8012570 <_Bfree>
 8011a2c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011a2e:	2200      	movs	r2, #0
 8011a30:	601a      	str	r2, [r3, #0]
 8011a32:	f1b9 0300 	subs.w	r3, r9, #0
 8011a36:	bfbb      	ittet	lt
 8011a38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011a3c:	9303      	strlt	r3, [sp, #12]
 8011a3e:	2300      	movge	r3, #0
 8011a40:	2201      	movlt	r2, #1
 8011a42:	bfac      	ite	ge
 8011a44:	6023      	strge	r3, [r4, #0]
 8011a46:	6022      	strlt	r2, [r4, #0]
 8011a48:	4b9b      	ldr	r3, [pc, #620]	; (8011cb8 <_dtoa_r+0x2e0>)
 8011a4a:	9c03      	ldr	r4, [sp, #12]
 8011a4c:	43a3      	bics	r3, r4
 8011a4e:	d11c      	bne.n	8011a8a <_dtoa_r+0xb2>
 8011a50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a52:	f242 730f 	movw	r3, #9999	; 0x270f
 8011a56:	6013      	str	r3, [r2, #0]
 8011a58:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011a5c:	ea53 0308 	orrs.w	r3, r3, r8
 8011a60:	f000 84fd 	beq.w	801245e <_dtoa_r+0xa86>
 8011a64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a66:	b963      	cbnz	r3, 8011a82 <_dtoa_r+0xaa>
 8011a68:	4b94      	ldr	r3, [pc, #592]	; (8011cbc <_dtoa_r+0x2e4>)
 8011a6a:	e01f      	b.n	8011aac <_dtoa_r+0xd4>
 8011a6c:	4b94      	ldr	r3, [pc, #592]	; (8011cc0 <_dtoa_r+0x2e8>)
 8011a6e:	9301      	str	r3, [sp, #4]
 8011a70:	3308      	adds	r3, #8
 8011a72:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011a74:	6013      	str	r3, [r2, #0]
 8011a76:	9801      	ldr	r0, [sp, #4]
 8011a78:	b011      	add	sp, #68	; 0x44
 8011a7a:	ecbd 8b02 	vpop	{d8}
 8011a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a82:	4b8e      	ldr	r3, [pc, #568]	; (8011cbc <_dtoa_r+0x2e4>)
 8011a84:	9301      	str	r3, [sp, #4]
 8011a86:	3303      	adds	r3, #3
 8011a88:	e7f3      	b.n	8011a72 <_dtoa_r+0x9a>
 8011a8a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011a8e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a96:	d10b      	bne.n	8011ab0 <_dtoa_r+0xd8>
 8011a98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	6013      	str	r3, [r2, #0]
 8011a9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	f000 84d9 	beq.w	8012458 <_dtoa_r+0xa80>
 8011aa6:	4887      	ldr	r0, [pc, #540]	; (8011cc4 <_dtoa_r+0x2ec>)
 8011aa8:	6018      	str	r0, [r3, #0]
 8011aaa:	1e43      	subs	r3, r0, #1
 8011aac:	9301      	str	r3, [sp, #4]
 8011aae:	e7e2      	b.n	8011a76 <_dtoa_r+0x9e>
 8011ab0:	a90f      	add	r1, sp, #60	; 0x3c
 8011ab2:	aa0e      	add	r2, sp, #56	; 0x38
 8011ab4:	4630      	mov	r0, r6
 8011ab6:	eeb0 0b48 	vmov.f64	d0, d8
 8011aba:	f001 f841 	bl	8012b40 <__d2b>
 8011abe:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8011ac2:	4605      	mov	r5, r0
 8011ac4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011ac6:	2900      	cmp	r1, #0
 8011ac8:	d046      	beq.n	8011b58 <_dtoa_r+0x180>
 8011aca:	ee18 4a90 	vmov	r4, s17
 8011ace:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011ad2:	ec53 2b18 	vmov	r2, r3, d8
 8011ad6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8011ada:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011ade:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011ae2:	2400      	movs	r4, #0
 8011ae4:	ec43 2b16 	vmov	d6, r2, r3
 8011ae8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011aec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011c98 <_dtoa_r+0x2c0>
 8011af0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011af4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8011ca0 <_dtoa_r+0x2c8>
 8011af8:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011afc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011ca8 <_dtoa_r+0x2d0>
 8011b00:	ee07 1a90 	vmov	s15, r1
 8011b04:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011b08:	eeb0 7b46 	vmov.f64	d7, d6
 8011b0c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011b10:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011b14:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b1c:	ee16 ba90 	vmov	fp, s13
 8011b20:	940a      	str	r4, [sp, #40]	; 0x28
 8011b22:	d508      	bpl.n	8011b36 <_dtoa_r+0x15e>
 8011b24:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011b28:	eeb4 6b47 	vcmp.f64	d6, d7
 8011b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b30:	bf18      	it	ne
 8011b32:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011b36:	f1bb 0f16 	cmp.w	fp, #22
 8011b3a:	d82f      	bhi.n	8011b9c <_dtoa_r+0x1c4>
 8011b3c:	4b62      	ldr	r3, [pc, #392]	; (8011cc8 <_dtoa_r+0x2f0>)
 8011b3e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011b42:	ed93 7b00 	vldr	d7, [r3]
 8011b46:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b4e:	d501      	bpl.n	8011b54 <_dtoa_r+0x17c>
 8011b50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011b54:	2300      	movs	r3, #0
 8011b56:	e022      	b.n	8011b9e <_dtoa_r+0x1c6>
 8011b58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011b5a:	4401      	add	r1, r0
 8011b5c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8011b60:	2b20      	cmp	r3, #32
 8011b62:	bfc1      	itttt	gt
 8011b64:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011b68:	fa04 f303 	lslgt.w	r3, r4, r3
 8011b6c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8011b70:	fa28 f804 	lsrgt.w	r8, r8, r4
 8011b74:	bfd6      	itet	le
 8011b76:	f1c3 0320 	rsble	r3, r3, #32
 8011b7a:	ea43 0808 	orrgt.w	r8, r3, r8
 8011b7e:	fa08 f803 	lslle.w	r8, r8, r3
 8011b82:	ee07 8a90 	vmov	s15, r8
 8011b86:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011b8a:	3901      	subs	r1, #1
 8011b8c:	ee17 4a90 	vmov	r4, s15
 8011b90:	ec53 2b17 	vmov	r2, r3, d7
 8011b94:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8011b98:	2401      	movs	r4, #1
 8011b9a:	e7a3      	b.n	8011ae4 <_dtoa_r+0x10c>
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011ba0:	1a43      	subs	r3, r0, r1
 8011ba2:	1e5a      	subs	r2, r3, #1
 8011ba4:	bf45      	ittet	mi
 8011ba6:	f1c3 0301 	rsbmi	r3, r3, #1
 8011baa:	9304      	strmi	r3, [sp, #16]
 8011bac:	2300      	movpl	r3, #0
 8011bae:	2300      	movmi	r3, #0
 8011bb0:	9205      	str	r2, [sp, #20]
 8011bb2:	bf54      	ite	pl
 8011bb4:	9304      	strpl	r3, [sp, #16]
 8011bb6:	9305      	strmi	r3, [sp, #20]
 8011bb8:	f1bb 0f00 	cmp.w	fp, #0
 8011bbc:	db18      	blt.n	8011bf0 <_dtoa_r+0x218>
 8011bbe:	9b05      	ldr	r3, [sp, #20]
 8011bc0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011bc4:	445b      	add	r3, fp
 8011bc6:	9305      	str	r3, [sp, #20]
 8011bc8:	2300      	movs	r3, #0
 8011bca:	9a06      	ldr	r2, [sp, #24]
 8011bcc:	2a09      	cmp	r2, #9
 8011bce:	d849      	bhi.n	8011c64 <_dtoa_r+0x28c>
 8011bd0:	2a05      	cmp	r2, #5
 8011bd2:	bfc4      	itt	gt
 8011bd4:	3a04      	subgt	r2, #4
 8011bd6:	9206      	strgt	r2, [sp, #24]
 8011bd8:	9a06      	ldr	r2, [sp, #24]
 8011bda:	f1a2 0202 	sub.w	r2, r2, #2
 8011bde:	bfcc      	ite	gt
 8011be0:	2400      	movgt	r4, #0
 8011be2:	2401      	movle	r4, #1
 8011be4:	2a03      	cmp	r2, #3
 8011be6:	d848      	bhi.n	8011c7a <_dtoa_r+0x2a2>
 8011be8:	e8df f002 	tbb	[pc, r2]
 8011bec:	3a2c2e0b 	.word	0x3a2c2e0b
 8011bf0:	9b04      	ldr	r3, [sp, #16]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	eba3 030b 	sub.w	r3, r3, fp
 8011bf8:	9304      	str	r3, [sp, #16]
 8011bfa:	9209      	str	r2, [sp, #36]	; 0x24
 8011bfc:	f1cb 0300 	rsb	r3, fp, #0
 8011c00:	e7e3      	b.n	8011bca <_dtoa_r+0x1f2>
 8011c02:	2200      	movs	r2, #0
 8011c04:	9207      	str	r2, [sp, #28]
 8011c06:	9a08      	ldr	r2, [sp, #32]
 8011c08:	2a00      	cmp	r2, #0
 8011c0a:	dc39      	bgt.n	8011c80 <_dtoa_r+0x2a8>
 8011c0c:	f04f 0a01 	mov.w	sl, #1
 8011c10:	46d1      	mov	r9, sl
 8011c12:	4652      	mov	r2, sl
 8011c14:	f8cd a020 	str.w	sl, [sp, #32]
 8011c18:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8011c1a:	2100      	movs	r1, #0
 8011c1c:	6079      	str	r1, [r7, #4]
 8011c1e:	2004      	movs	r0, #4
 8011c20:	f100 0c14 	add.w	ip, r0, #20
 8011c24:	4594      	cmp	ip, r2
 8011c26:	6879      	ldr	r1, [r7, #4]
 8011c28:	d92f      	bls.n	8011c8a <_dtoa_r+0x2b2>
 8011c2a:	4630      	mov	r0, r6
 8011c2c:	930d      	str	r3, [sp, #52]	; 0x34
 8011c2e:	f000 fc5f 	bl	80124f0 <_Balloc>
 8011c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c34:	9001      	str	r0, [sp, #4]
 8011c36:	4602      	mov	r2, r0
 8011c38:	2800      	cmp	r0, #0
 8011c3a:	d149      	bne.n	8011cd0 <_dtoa_r+0x2f8>
 8011c3c:	4b23      	ldr	r3, [pc, #140]	; (8011ccc <_dtoa_r+0x2f4>)
 8011c3e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011c42:	e6e1      	b.n	8011a08 <_dtoa_r+0x30>
 8011c44:	2201      	movs	r2, #1
 8011c46:	e7dd      	b.n	8011c04 <_dtoa_r+0x22c>
 8011c48:	2200      	movs	r2, #0
 8011c4a:	9207      	str	r2, [sp, #28]
 8011c4c:	9a08      	ldr	r2, [sp, #32]
 8011c4e:	eb0b 0a02 	add.w	sl, fp, r2
 8011c52:	f10a 0901 	add.w	r9, sl, #1
 8011c56:	464a      	mov	r2, r9
 8011c58:	2a01      	cmp	r2, #1
 8011c5a:	bfb8      	it	lt
 8011c5c:	2201      	movlt	r2, #1
 8011c5e:	e7db      	b.n	8011c18 <_dtoa_r+0x240>
 8011c60:	2201      	movs	r2, #1
 8011c62:	e7f2      	b.n	8011c4a <_dtoa_r+0x272>
 8011c64:	2401      	movs	r4, #1
 8011c66:	2200      	movs	r2, #0
 8011c68:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8011c6c:	f04f 3aff 	mov.w	sl, #4294967295
 8011c70:	2100      	movs	r1, #0
 8011c72:	46d1      	mov	r9, sl
 8011c74:	2212      	movs	r2, #18
 8011c76:	9108      	str	r1, [sp, #32]
 8011c78:	e7ce      	b.n	8011c18 <_dtoa_r+0x240>
 8011c7a:	2201      	movs	r2, #1
 8011c7c:	9207      	str	r2, [sp, #28]
 8011c7e:	e7f5      	b.n	8011c6c <_dtoa_r+0x294>
 8011c80:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011c84:	46d1      	mov	r9, sl
 8011c86:	4652      	mov	r2, sl
 8011c88:	e7c6      	b.n	8011c18 <_dtoa_r+0x240>
 8011c8a:	3101      	adds	r1, #1
 8011c8c:	6079      	str	r1, [r7, #4]
 8011c8e:	0040      	lsls	r0, r0, #1
 8011c90:	e7c6      	b.n	8011c20 <_dtoa_r+0x248>
 8011c92:	bf00      	nop
 8011c94:	f3af 8000 	nop.w
 8011c98:	636f4361 	.word	0x636f4361
 8011c9c:	3fd287a7 	.word	0x3fd287a7
 8011ca0:	8b60c8b3 	.word	0x8b60c8b3
 8011ca4:	3fc68a28 	.word	0x3fc68a28
 8011ca8:	509f79fb 	.word	0x509f79fb
 8011cac:	3fd34413 	.word	0x3fd34413
 8011cb0:	0801e268 	.word	0x0801e268
 8011cb4:	0801e380 	.word	0x0801e380
 8011cb8:	7ff00000 	.word	0x7ff00000
 8011cbc:	0801e37c 	.word	0x0801e37c
 8011cc0:	0801e373 	.word	0x0801e373
 8011cc4:	0801e245 	.word	0x0801e245
 8011cc8:	0801e470 	.word	0x0801e470
 8011ccc:	0801e3db 	.word	0x0801e3db
 8011cd0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8011cd2:	9901      	ldr	r1, [sp, #4]
 8011cd4:	6011      	str	r1, [r2, #0]
 8011cd6:	f1b9 0f0e 	cmp.w	r9, #14
 8011cda:	d86c      	bhi.n	8011db6 <_dtoa_r+0x3de>
 8011cdc:	2c00      	cmp	r4, #0
 8011cde:	d06a      	beq.n	8011db6 <_dtoa_r+0x3de>
 8011ce0:	f1bb 0f00 	cmp.w	fp, #0
 8011ce4:	f340 80a0 	ble.w	8011e28 <_dtoa_r+0x450>
 8011ce8:	49c1      	ldr	r1, [pc, #772]	; (8011ff0 <_dtoa_r+0x618>)
 8011cea:	f00b 020f 	and.w	r2, fp, #15
 8011cee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8011cf2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011cf6:	ed92 7b00 	vldr	d7, [r2]
 8011cfa:	ea4f 112b 	mov.w	r1, fp, asr #4
 8011cfe:	f000 8087 	beq.w	8011e10 <_dtoa_r+0x438>
 8011d02:	4abc      	ldr	r2, [pc, #752]	; (8011ff4 <_dtoa_r+0x61c>)
 8011d04:	ed92 6b08 	vldr	d6, [r2, #32]
 8011d08:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8011d0c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011d10:	f001 010f 	and.w	r1, r1, #15
 8011d14:	2203      	movs	r2, #3
 8011d16:	48b7      	ldr	r0, [pc, #732]	; (8011ff4 <_dtoa_r+0x61c>)
 8011d18:	2900      	cmp	r1, #0
 8011d1a:	d17b      	bne.n	8011e14 <_dtoa_r+0x43c>
 8011d1c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011d20:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011d24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011d28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011d2a:	2900      	cmp	r1, #0
 8011d2c:	f000 80a2 	beq.w	8011e74 <_dtoa_r+0x49c>
 8011d30:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011d34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011d38:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d40:	f140 8098 	bpl.w	8011e74 <_dtoa_r+0x49c>
 8011d44:	f1b9 0f00 	cmp.w	r9, #0
 8011d48:	f000 8094 	beq.w	8011e74 <_dtoa_r+0x49c>
 8011d4c:	f1ba 0f00 	cmp.w	sl, #0
 8011d50:	dd2f      	ble.n	8011db2 <_dtoa_r+0x3da>
 8011d52:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011d56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011d5a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011d5e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011d62:	3201      	adds	r2, #1
 8011d64:	4650      	mov	r0, sl
 8011d66:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011d6a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011d6e:	ee07 2a90 	vmov	s15, r2
 8011d72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011d76:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011d7a:	ee15 4a90 	vmov	r4, s11
 8011d7e:	ec52 1b15 	vmov	r1, r2, d5
 8011d82:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8011d86:	2800      	cmp	r0, #0
 8011d88:	d177      	bne.n	8011e7a <_dtoa_r+0x4a2>
 8011d8a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011d8e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011d92:	ec42 1b17 	vmov	d7, r1, r2
 8011d96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d9e:	f300 8263 	bgt.w	8012268 <_dtoa_r+0x890>
 8011da2:	eeb1 7b47 	vneg.f64	d7, d7
 8011da6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dae:	f100 8258 	bmi.w	8012262 <_dtoa_r+0x88a>
 8011db2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011db6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011db8:	2a00      	cmp	r2, #0
 8011dba:	f2c0 811d 	blt.w	8011ff8 <_dtoa_r+0x620>
 8011dbe:	f1bb 0f0e 	cmp.w	fp, #14
 8011dc2:	f300 8119 	bgt.w	8011ff8 <_dtoa_r+0x620>
 8011dc6:	4b8a      	ldr	r3, [pc, #552]	; (8011ff0 <_dtoa_r+0x618>)
 8011dc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011dcc:	ed93 6b00 	vldr	d6, [r3]
 8011dd0:	9b08      	ldr	r3, [sp, #32]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	f280 80b7 	bge.w	8011f46 <_dtoa_r+0x56e>
 8011dd8:	f1b9 0f00 	cmp.w	r9, #0
 8011ddc:	f300 80b3 	bgt.w	8011f46 <_dtoa_r+0x56e>
 8011de0:	f040 823f 	bne.w	8012262 <_dtoa_r+0x88a>
 8011de4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011de8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011dec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011df0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011df8:	464c      	mov	r4, r9
 8011dfa:	464f      	mov	r7, r9
 8011dfc:	f280 8215 	bge.w	801222a <_dtoa_r+0x852>
 8011e00:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011e04:	2331      	movs	r3, #49	; 0x31
 8011e06:	f808 3b01 	strb.w	r3, [r8], #1
 8011e0a:	f10b 0b01 	add.w	fp, fp, #1
 8011e0e:	e211      	b.n	8012234 <_dtoa_r+0x85c>
 8011e10:	2202      	movs	r2, #2
 8011e12:	e780      	b.n	8011d16 <_dtoa_r+0x33e>
 8011e14:	07cc      	lsls	r4, r1, #31
 8011e16:	d504      	bpl.n	8011e22 <_dtoa_r+0x44a>
 8011e18:	ed90 6b00 	vldr	d6, [r0]
 8011e1c:	3201      	adds	r2, #1
 8011e1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011e22:	1049      	asrs	r1, r1, #1
 8011e24:	3008      	adds	r0, #8
 8011e26:	e777      	b.n	8011d18 <_dtoa_r+0x340>
 8011e28:	d022      	beq.n	8011e70 <_dtoa_r+0x498>
 8011e2a:	f1cb 0100 	rsb	r1, fp, #0
 8011e2e:	4a70      	ldr	r2, [pc, #448]	; (8011ff0 <_dtoa_r+0x618>)
 8011e30:	f001 000f 	and.w	r0, r1, #15
 8011e34:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011e38:	ed92 7b00 	vldr	d7, [r2]
 8011e3c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011e40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e44:	486b      	ldr	r0, [pc, #428]	; (8011ff4 <_dtoa_r+0x61c>)
 8011e46:	1109      	asrs	r1, r1, #4
 8011e48:	2400      	movs	r4, #0
 8011e4a:	2202      	movs	r2, #2
 8011e4c:	b929      	cbnz	r1, 8011e5a <_dtoa_r+0x482>
 8011e4e:	2c00      	cmp	r4, #0
 8011e50:	f43f af6a 	beq.w	8011d28 <_dtoa_r+0x350>
 8011e54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e58:	e766      	b.n	8011d28 <_dtoa_r+0x350>
 8011e5a:	07cf      	lsls	r7, r1, #31
 8011e5c:	d505      	bpl.n	8011e6a <_dtoa_r+0x492>
 8011e5e:	ed90 6b00 	vldr	d6, [r0]
 8011e62:	3201      	adds	r2, #1
 8011e64:	2401      	movs	r4, #1
 8011e66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011e6a:	1049      	asrs	r1, r1, #1
 8011e6c:	3008      	adds	r0, #8
 8011e6e:	e7ed      	b.n	8011e4c <_dtoa_r+0x474>
 8011e70:	2202      	movs	r2, #2
 8011e72:	e759      	b.n	8011d28 <_dtoa_r+0x350>
 8011e74:	465f      	mov	r7, fp
 8011e76:	4648      	mov	r0, r9
 8011e78:	e775      	b.n	8011d66 <_dtoa_r+0x38e>
 8011e7a:	ec42 1b17 	vmov	d7, r1, r2
 8011e7e:	4a5c      	ldr	r2, [pc, #368]	; (8011ff0 <_dtoa_r+0x618>)
 8011e80:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011e84:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011e88:	9a01      	ldr	r2, [sp, #4]
 8011e8a:	1814      	adds	r4, r2, r0
 8011e8c:	9a07      	ldr	r2, [sp, #28]
 8011e8e:	b352      	cbz	r2, 8011ee6 <_dtoa_r+0x50e>
 8011e90:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011e94:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011e98:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011e9c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011ea0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011ea4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011ea8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011eac:	ee14 2a90 	vmov	r2, s9
 8011eb0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011eb4:	3230      	adds	r2, #48	; 0x30
 8011eb6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011eba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ec2:	f808 2b01 	strb.w	r2, [r8], #1
 8011ec6:	d439      	bmi.n	8011f3c <_dtoa_r+0x564>
 8011ec8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011ecc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ed4:	d472      	bmi.n	8011fbc <_dtoa_r+0x5e4>
 8011ed6:	45a0      	cmp	r8, r4
 8011ed8:	f43f af6b 	beq.w	8011db2 <_dtoa_r+0x3da>
 8011edc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011ee0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011ee4:	e7e0      	b.n	8011ea8 <_dtoa_r+0x4d0>
 8011ee6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011eea:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011eee:	4621      	mov	r1, r4
 8011ef0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011ef4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011ef8:	ee14 2a90 	vmov	r2, s9
 8011efc:	3230      	adds	r2, #48	; 0x30
 8011efe:	f808 2b01 	strb.w	r2, [r8], #1
 8011f02:	45a0      	cmp	r8, r4
 8011f04:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011f08:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011f0c:	d118      	bne.n	8011f40 <_dtoa_r+0x568>
 8011f0e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011f12:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011f16:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f1e:	dc4d      	bgt.n	8011fbc <_dtoa_r+0x5e4>
 8011f20:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011f24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f2c:	f57f af41 	bpl.w	8011db2 <_dtoa_r+0x3da>
 8011f30:	4688      	mov	r8, r1
 8011f32:	3901      	subs	r1, #1
 8011f34:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8011f38:	2b30      	cmp	r3, #48	; 0x30
 8011f3a:	d0f9      	beq.n	8011f30 <_dtoa_r+0x558>
 8011f3c:	46bb      	mov	fp, r7
 8011f3e:	e02a      	b.n	8011f96 <_dtoa_r+0x5be>
 8011f40:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011f44:	e7d6      	b.n	8011ef4 <_dtoa_r+0x51c>
 8011f46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f4a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011f4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011f52:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011f56:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011f5a:	ee15 3a10 	vmov	r3, s10
 8011f5e:	3330      	adds	r3, #48	; 0x30
 8011f60:	f808 3b01 	strb.w	r3, [r8], #1
 8011f64:	9b01      	ldr	r3, [sp, #4]
 8011f66:	eba8 0303 	sub.w	r3, r8, r3
 8011f6a:	4599      	cmp	r9, r3
 8011f6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011f70:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011f74:	d133      	bne.n	8011fde <_dtoa_r+0x606>
 8011f76:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011f7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f82:	dc1a      	bgt.n	8011fba <_dtoa_r+0x5e2>
 8011f84:	eeb4 7b46 	vcmp.f64	d7, d6
 8011f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f8c:	d103      	bne.n	8011f96 <_dtoa_r+0x5be>
 8011f8e:	ee15 3a10 	vmov	r3, s10
 8011f92:	07d9      	lsls	r1, r3, #31
 8011f94:	d411      	bmi.n	8011fba <_dtoa_r+0x5e2>
 8011f96:	4629      	mov	r1, r5
 8011f98:	4630      	mov	r0, r6
 8011f9a:	f000 fae9 	bl	8012570 <_Bfree>
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011fa2:	f888 3000 	strb.w	r3, [r8]
 8011fa6:	f10b 0301 	add.w	r3, fp, #1
 8011faa:	6013      	str	r3, [r2, #0]
 8011fac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	f43f ad61 	beq.w	8011a76 <_dtoa_r+0x9e>
 8011fb4:	f8c3 8000 	str.w	r8, [r3]
 8011fb8:	e55d      	b.n	8011a76 <_dtoa_r+0x9e>
 8011fba:	465f      	mov	r7, fp
 8011fbc:	4643      	mov	r3, r8
 8011fbe:	4698      	mov	r8, r3
 8011fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011fc4:	2a39      	cmp	r2, #57	; 0x39
 8011fc6:	d106      	bne.n	8011fd6 <_dtoa_r+0x5fe>
 8011fc8:	9a01      	ldr	r2, [sp, #4]
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	d1f7      	bne.n	8011fbe <_dtoa_r+0x5e6>
 8011fce:	9901      	ldr	r1, [sp, #4]
 8011fd0:	2230      	movs	r2, #48	; 0x30
 8011fd2:	3701      	adds	r7, #1
 8011fd4:	700a      	strb	r2, [r1, #0]
 8011fd6:	781a      	ldrb	r2, [r3, #0]
 8011fd8:	3201      	adds	r2, #1
 8011fda:	701a      	strb	r2, [r3, #0]
 8011fdc:	e7ae      	b.n	8011f3c <_dtoa_r+0x564>
 8011fde:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011fe2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fea:	d1b2      	bne.n	8011f52 <_dtoa_r+0x57a>
 8011fec:	e7d3      	b.n	8011f96 <_dtoa_r+0x5be>
 8011fee:	bf00      	nop
 8011ff0:	0801e470 	.word	0x0801e470
 8011ff4:	0801e448 	.word	0x0801e448
 8011ff8:	9907      	ldr	r1, [sp, #28]
 8011ffa:	2900      	cmp	r1, #0
 8011ffc:	f000 80d0 	beq.w	80121a0 <_dtoa_r+0x7c8>
 8012000:	9906      	ldr	r1, [sp, #24]
 8012002:	2901      	cmp	r1, #1
 8012004:	f300 80b4 	bgt.w	8012170 <_dtoa_r+0x798>
 8012008:	990a      	ldr	r1, [sp, #40]	; 0x28
 801200a:	2900      	cmp	r1, #0
 801200c:	f000 80ac 	beq.w	8012168 <_dtoa_r+0x790>
 8012010:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012014:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012018:	461c      	mov	r4, r3
 801201a:	930a      	str	r3, [sp, #40]	; 0x28
 801201c:	9b04      	ldr	r3, [sp, #16]
 801201e:	4413      	add	r3, r2
 8012020:	9304      	str	r3, [sp, #16]
 8012022:	9b05      	ldr	r3, [sp, #20]
 8012024:	2101      	movs	r1, #1
 8012026:	4413      	add	r3, r2
 8012028:	4630      	mov	r0, r6
 801202a:	9305      	str	r3, [sp, #20]
 801202c:	f000 fb58 	bl	80126e0 <__i2b>
 8012030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012032:	4607      	mov	r7, r0
 8012034:	f1b8 0f00 	cmp.w	r8, #0
 8012038:	dd0d      	ble.n	8012056 <_dtoa_r+0x67e>
 801203a:	9a05      	ldr	r2, [sp, #20]
 801203c:	2a00      	cmp	r2, #0
 801203e:	dd0a      	ble.n	8012056 <_dtoa_r+0x67e>
 8012040:	4542      	cmp	r2, r8
 8012042:	9904      	ldr	r1, [sp, #16]
 8012044:	bfa8      	it	ge
 8012046:	4642      	movge	r2, r8
 8012048:	1a89      	subs	r1, r1, r2
 801204a:	9104      	str	r1, [sp, #16]
 801204c:	9905      	ldr	r1, [sp, #20]
 801204e:	eba8 0802 	sub.w	r8, r8, r2
 8012052:	1a8a      	subs	r2, r1, r2
 8012054:	9205      	str	r2, [sp, #20]
 8012056:	b303      	cbz	r3, 801209a <_dtoa_r+0x6c2>
 8012058:	9a07      	ldr	r2, [sp, #28]
 801205a:	2a00      	cmp	r2, #0
 801205c:	f000 80a5 	beq.w	80121aa <_dtoa_r+0x7d2>
 8012060:	2c00      	cmp	r4, #0
 8012062:	dd13      	ble.n	801208c <_dtoa_r+0x6b4>
 8012064:	4639      	mov	r1, r7
 8012066:	4622      	mov	r2, r4
 8012068:	4630      	mov	r0, r6
 801206a:	930d      	str	r3, [sp, #52]	; 0x34
 801206c:	f000 fbf8 	bl	8012860 <__pow5mult>
 8012070:	462a      	mov	r2, r5
 8012072:	4601      	mov	r1, r0
 8012074:	4607      	mov	r7, r0
 8012076:	4630      	mov	r0, r6
 8012078:	f000 fb48 	bl	801270c <__multiply>
 801207c:	4629      	mov	r1, r5
 801207e:	900a      	str	r0, [sp, #40]	; 0x28
 8012080:	4630      	mov	r0, r6
 8012082:	f000 fa75 	bl	8012570 <_Bfree>
 8012086:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801208a:	4615      	mov	r5, r2
 801208c:	1b1a      	subs	r2, r3, r4
 801208e:	d004      	beq.n	801209a <_dtoa_r+0x6c2>
 8012090:	4629      	mov	r1, r5
 8012092:	4630      	mov	r0, r6
 8012094:	f000 fbe4 	bl	8012860 <__pow5mult>
 8012098:	4605      	mov	r5, r0
 801209a:	2101      	movs	r1, #1
 801209c:	4630      	mov	r0, r6
 801209e:	f000 fb1f 	bl	80126e0 <__i2b>
 80120a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	4604      	mov	r4, r0
 80120a8:	f340 8081 	ble.w	80121ae <_dtoa_r+0x7d6>
 80120ac:	461a      	mov	r2, r3
 80120ae:	4601      	mov	r1, r0
 80120b0:	4630      	mov	r0, r6
 80120b2:	f000 fbd5 	bl	8012860 <__pow5mult>
 80120b6:	9b06      	ldr	r3, [sp, #24]
 80120b8:	2b01      	cmp	r3, #1
 80120ba:	4604      	mov	r4, r0
 80120bc:	dd7a      	ble.n	80121b4 <_dtoa_r+0x7dc>
 80120be:	2300      	movs	r3, #0
 80120c0:	930a      	str	r3, [sp, #40]	; 0x28
 80120c2:	6922      	ldr	r2, [r4, #16]
 80120c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80120c8:	6910      	ldr	r0, [r2, #16]
 80120ca:	f000 fab9 	bl	8012640 <__hi0bits>
 80120ce:	f1c0 0020 	rsb	r0, r0, #32
 80120d2:	9b05      	ldr	r3, [sp, #20]
 80120d4:	4418      	add	r0, r3
 80120d6:	f010 001f 	ands.w	r0, r0, #31
 80120da:	f000 808c 	beq.w	80121f6 <_dtoa_r+0x81e>
 80120de:	f1c0 0220 	rsb	r2, r0, #32
 80120e2:	2a04      	cmp	r2, #4
 80120e4:	f340 8085 	ble.w	80121f2 <_dtoa_r+0x81a>
 80120e8:	f1c0 001c 	rsb	r0, r0, #28
 80120ec:	9b04      	ldr	r3, [sp, #16]
 80120ee:	4403      	add	r3, r0
 80120f0:	9304      	str	r3, [sp, #16]
 80120f2:	9b05      	ldr	r3, [sp, #20]
 80120f4:	4403      	add	r3, r0
 80120f6:	4480      	add	r8, r0
 80120f8:	9305      	str	r3, [sp, #20]
 80120fa:	9b04      	ldr	r3, [sp, #16]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	dd05      	ble.n	801210c <_dtoa_r+0x734>
 8012100:	4629      	mov	r1, r5
 8012102:	461a      	mov	r2, r3
 8012104:	4630      	mov	r0, r6
 8012106:	f000 fc05 	bl	8012914 <__lshift>
 801210a:	4605      	mov	r5, r0
 801210c:	9b05      	ldr	r3, [sp, #20]
 801210e:	2b00      	cmp	r3, #0
 8012110:	dd05      	ble.n	801211e <_dtoa_r+0x746>
 8012112:	4621      	mov	r1, r4
 8012114:	461a      	mov	r2, r3
 8012116:	4630      	mov	r0, r6
 8012118:	f000 fbfc 	bl	8012914 <__lshift>
 801211c:	4604      	mov	r4, r0
 801211e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012120:	2b00      	cmp	r3, #0
 8012122:	d06a      	beq.n	80121fa <_dtoa_r+0x822>
 8012124:	4621      	mov	r1, r4
 8012126:	4628      	mov	r0, r5
 8012128:	f000 fc64 	bl	80129f4 <__mcmp>
 801212c:	2800      	cmp	r0, #0
 801212e:	da64      	bge.n	80121fa <_dtoa_r+0x822>
 8012130:	2300      	movs	r3, #0
 8012132:	4629      	mov	r1, r5
 8012134:	220a      	movs	r2, #10
 8012136:	4630      	mov	r0, r6
 8012138:	f000 fa3c 	bl	80125b4 <__multadd>
 801213c:	9b07      	ldr	r3, [sp, #28]
 801213e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012142:	4605      	mov	r5, r0
 8012144:	2b00      	cmp	r3, #0
 8012146:	f000 8191 	beq.w	801246c <_dtoa_r+0xa94>
 801214a:	4639      	mov	r1, r7
 801214c:	2300      	movs	r3, #0
 801214e:	220a      	movs	r2, #10
 8012150:	4630      	mov	r0, r6
 8012152:	f000 fa2f 	bl	80125b4 <__multadd>
 8012156:	f1ba 0f00 	cmp.w	sl, #0
 801215a:	4607      	mov	r7, r0
 801215c:	f300 808d 	bgt.w	801227a <_dtoa_r+0x8a2>
 8012160:	9b06      	ldr	r3, [sp, #24]
 8012162:	2b02      	cmp	r3, #2
 8012164:	dc50      	bgt.n	8012208 <_dtoa_r+0x830>
 8012166:	e088      	b.n	801227a <_dtoa_r+0x8a2>
 8012168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801216a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801216e:	e751      	b.n	8012014 <_dtoa_r+0x63c>
 8012170:	f109 34ff 	add.w	r4, r9, #4294967295
 8012174:	42a3      	cmp	r3, r4
 8012176:	bfbf      	itttt	lt
 8012178:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801217a:	1ae3      	sublt	r3, r4, r3
 801217c:	18d2      	addlt	r2, r2, r3
 801217e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8012180:	bfb6      	itet	lt
 8012182:	4623      	movlt	r3, r4
 8012184:	1b1c      	subge	r4, r3, r4
 8012186:	2400      	movlt	r4, #0
 8012188:	f1b9 0f00 	cmp.w	r9, #0
 801218c:	bfb5      	itete	lt
 801218e:	9a04      	ldrlt	r2, [sp, #16]
 8012190:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8012194:	eba2 0809 	sublt.w	r8, r2, r9
 8012198:	464a      	movge	r2, r9
 801219a:	bfb8      	it	lt
 801219c:	2200      	movlt	r2, #0
 801219e:	e73c      	b.n	801201a <_dtoa_r+0x642>
 80121a0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80121a4:	9f07      	ldr	r7, [sp, #28]
 80121a6:	461c      	mov	r4, r3
 80121a8:	e744      	b.n	8012034 <_dtoa_r+0x65c>
 80121aa:	461a      	mov	r2, r3
 80121ac:	e770      	b.n	8012090 <_dtoa_r+0x6b8>
 80121ae:	9b06      	ldr	r3, [sp, #24]
 80121b0:	2b01      	cmp	r3, #1
 80121b2:	dc18      	bgt.n	80121e6 <_dtoa_r+0x80e>
 80121b4:	9b02      	ldr	r3, [sp, #8]
 80121b6:	b9b3      	cbnz	r3, 80121e6 <_dtoa_r+0x80e>
 80121b8:	9b03      	ldr	r3, [sp, #12]
 80121ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80121be:	b9a2      	cbnz	r2, 80121ea <_dtoa_r+0x812>
 80121c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80121c4:	0d12      	lsrs	r2, r2, #20
 80121c6:	0512      	lsls	r2, r2, #20
 80121c8:	b18a      	cbz	r2, 80121ee <_dtoa_r+0x816>
 80121ca:	9b04      	ldr	r3, [sp, #16]
 80121cc:	3301      	adds	r3, #1
 80121ce:	9304      	str	r3, [sp, #16]
 80121d0:	9b05      	ldr	r3, [sp, #20]
 80121d2:	3301      	adds	r3, #1
 80121d4:	9305      	str	r3, [sp, #20]
 80121d6:	2301      	movs	r3, #1
 80121d8:	930a      	str	r3, [sp, #40]	; 0x28
 80121da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121dc:	2b00      	cmp	r3, #0
 80121de:	f47f af70 	bne.w	80120c2 <_dtoa_r+0x6ea>
 80121e2:	2001      	movs	r0, #1
 80121e4:	e775      	b.n	80120d2 <_dtoa_r+0x6fa>
 80121e6:	2300      	movs	r3, #0
 80121e8:	e7f6      	b.n	80121d8 <_dtoa_r+0x800>
 80121ea:	9b02      	ldr	r3, [sp, #8]
 80121ec:	e7f4      	b.n	80121d8 <_dtoa_r+0x800>
 80121ee:	920a      	str	r2, [sp, #40]	; 0x28
 80121f0:	e7f3      	b.n	80121da <_dtoa_r+0x802>
 80121f2:	d082      	beq.n	80120fa <_dtoa_r+0x722>
 80121f4:	4610      	mov	r0, r2
 80121f6:	301c      	adds	r0, #28
 80121f8:	e778      	b.n	80120ec <_dtoa_r+0x714>
 80121fa:	f1b9 0f00 	cmp.w	r9, #0
 80121fe:	dc37      	bgt.n	8012270 <_dtoa_r+0x898>
 8012200:	9b06      	ldr	r3, [sp, #24]
 8012202:	2b02      	cmp	r3, #2
 8012204:	dd34      	ble.n	8012270 <_dtoa_r+0x898>
 8012206:	46ca      	mov	sl, r9
 8012208:	f1ba 0f00 	cmp.w	sl, #0
 801220c:	d10d      	bne.n	801222a <_dtoa_r+0x852>
 801220e:	4621      	mov	r1, r4
 8012210:	4653      	mov	r3, sl
 8012212:	2205      	movs	r2, #5
 8012214:	4630      	mov	r0, r6
 8012216:	f000 f9cd 	bl	80125b4 <__multadd>
 801221a:	4601      	mov	r1, r0
 801221c:	4604      	mov	r4, r0
 801221e:	4628      	mov	r0, r5
 8012220:	f000 fbe8 	bl	80129f4 <__mcmp>
 8012224:	2800      	cmp	r0, #0
 8012226:	f73f adeb 	bgt.w	8011e00 <_dtoa_r+0x428>
 801222a:	9b08      	ldr	r3, [sp, #32]
 801222c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012230:	ea6f 0b03 	mvn.w	fp, r3
 8012234:	f04f 0900 	mov.w	r9, #0
 8012238:	4621      	mov	r1, r4
 801223a:	4630      	mov	r0, r6
 801223c:	f000 f998 	bl	8012570 <_Bfree>
 8012240:	2f00      	cmp	r7, #0
 8012242:	f43f aea8 	beq.w	8011f96 <_dtoa_r+0x5be>
 8012246:	f1b9 0f00 	cmp.w	r9, #0
 801224a:	d005      	beq.n	8012258 <_dtoa_r+0x880>
 801224c:	45b9      	cmp	r9, r7
 801224e:	d003      	beq.n	8012258 <_dtoa_r+0x880>
 8012250:	4649      	mov	r1, r9
 8012252:	4630      	mov	r0, r6
 8012254:	f000 f98c 	bl	8012570 <_Bfree>
 8012258:	4639      	mov	r1, r7
 801225a:	4630      	mov	r0, r6
 801225c:	f000 f988 	bl	8012570 <_Bfree>
 8012260:	e699      	b.n	8011f96 <_dtoa_r+0x5be>
 8012262:	2400      	movs	r4, #0
 8012264:	4627      	mov	r7, r4
 8012266:	e7e0      	b.n	801222a <_dtoa_r+0x852>
 8012268:	46bb      	mov	fp, r7
 801226a:	4604      	mov	r4, r0
 801226c:	4607      	mov	r7, r0
 801226e:	e5c7      	b.n	8011e00 <_dtoa_r+0x428>
 8012270:	9b07      	ldr	r3, [sp, #28]
 8012272:	46ca      	mov	sl, r9
 8012274:	2b00      	cmp	r3, #0
 8012276:	f000 8100 	beq.w	801247a <_dtoa_r+0xaa2>
 801227a:	f1b8 0f00 	cmp.w	r8, #0
 801227e:	dd05      	ble.n	801228c <_dtoa_r+0x8b4>
 8012280:	4639      	mov	r1, r7
 8012282:	4642      	mov	r2, r8
 8012284:	4630      	mov	r0, r6
 8012286:	f000 fb45 	bl	8012914 <__lshift>
 801228a:	4607      	mov	r7, r0
 801228c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801228e:	2b00      	cmp	r3, #0
 8012290:	d05d      	beq.n	801234e <_dtoa_r+0x976>
 8012292:	6879      	ldr	r1, [r7, #4]
 8012294:	4630      	mov	r0, r6
 8012296:	f000 f92b 	bl	80124f0 <_Balloc>
 801229a:	4680      	mov	r8, r0
 801229c:	b928      	cbnz	r0, 80122aa <_dtoa_r+0x8d2>
 801229e:	4b82      	ldr	r3, [pc, #520]	; (80124a8 <_dtoa_r+0xad0>)
 80122a0:	4602      	mov	r2, r0
 80122a2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80122a6:	f7ff bbaf 	b.w	8011a08 <_dtoa_r+0x30>
 80122aa:	693a      	ldr	r2, [r7, #16]
 80122ac:	3202      	adds	r2, #2
 80122ae:	0092      	lsls	r2, r2, #2
 80122b0:	f107 010c 	add.w	r1, r7, #12
 80122b4:	300c      	adds	r0, #12
 80122b6:	f7fe fcfd 	bl	8010cb4 <memcpy>
 80122ba:	2201      	movs	r2, #1
 80122bc:	4641      	mov	r1, r8
 80122be:	4630      	mov	r0, r6
 80122c0:	f000 fb28 	bl	8012914 <__lshift>
 80122c4:	9b01      	ldr	r3, [sp, #4]
 80122c6:	3301      	adds	r3, #1
 80122c8:	9304      	str	r3, [sp, #16]
 80122ca:	9b01      	ldr	r3, [sp, #4]
 80122cc:	4453      	add	r3, sl
 80122ce:	9308      	str	r3, [sp, #32]
 80122d0:	9b02      	ldr	r3, [sp, #8]
 80122d2:	f003 0301 	and.w	r3, r3, #1
 80122d6:	46b9      	mov	r9, r7
 80122d8:	9307      	str	r3, [sp, #28]
 80122da:	4607      	mov	r7, r0
 80122dc:	9b04      	ldr	r3, [sp, #16]
 80122de:	4621      	mov	r1, r4
 80122e0:	3b01      	subs	r3, #1
 80122e2:	4628      	mov	r0, r5
 80122e4:	9302      	str	r3, [sp, #8]
 80122e6:	f7ff fae9 	bl	80118bc <quorem>
 80122ea:	4603      	mov	r3, r0
 80122ec:	3330      	adds	r3, #48	; 0x30
 80122ee:	9005      	str	r0, [sp, #20]
 80122f0:	4649      	mov	r1, r9
 80122f2:	4628      	mov	r0, r5
 80122f4:	9309      	str	r3, [sp, #36]	; 0x24
 80122f6:	f000 fb7d 	bl	80129f4 <__mcmp>
 80122fa:	463a      	mov	r2, r7
 80122fc:	4682      	mov	sl, r0
 80122fe:	4621      	mov	r1, r4
 8012300:	4630      	mov	r0, r6
 8012302:	f000 fb93 	bl	8012a2c <__mdiff>
 8012306:	68c2      	ldr	r2, [r0, #12]
 8012308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801230a:	4680      	mov	r8, r0
 801230c:	bb0a      	cbnz	r2, 8012352 <_dtoa_r+0x97a>
 801230e:	4601      	mov	r1, r0
 8012310:	4628      	mov	r0, r5
 8012312:	f000 fb6f 	bl	80129f4 <__mcmp>
 8012316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012318:	4602      	mov	r2, r0
 801231a:	4641      	mov	r1, r8
 801231c:	4630      	mov	r0, r6
 801231e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8012322:	f000 f925 	bl	8012570 <_Bfree>
 8012326:	9b06      	ldr	r3, [sp, #24]
 8012328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801232a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801232e:	ea43 0102 	orr.w	r1, r3, r2
 8012332:	9b07      	ldr	r3, [sp, #28]
 8012334:	430b      	orrs	r3, r1
 8012336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012338:	d10d      	bne.n	8012356 <_dtoa_r+0x97e>
 801233a:	2b39      	cmp	r3, #57	; 0x39
 801233c:	d029      	beq.n	8012392 <_dtoa_r+0x9ba>
 801233e:	f1ba 0f00 	cmp.w	sl, #0
 8012342:	dd01      	ble.n	8012348 <_dtoa_r+0x970>
 8012344:	9b05      	ldr	r3, [sp, #20]
 8012346:	3331      	adds	r3, #49	; 0x31
 8012348:	9a02      	ldr	r2, [sp, #8]
 801234a:	7013      	strb	r3, [r2, #0]
 801234c:	e774      	b.n	8012238 <_dtoa_r+0x860>
 801234e:	4638      	mov	r0, r7
 8012350:	e7b8      	b.n	80122c4 <_dtoa_r+0x8ec>
 8012352:	2201      	movs	r2, #1
 8012354:	e7e1      	b.n	801231a <_dtoa_r+0x942>
 8012356:	f1ba 0f00 	cmp.w	sl, #0
 801235a:	db06      	blt.n	801236a <_dtoa_r+0x992>
 801235c:	9906      	ldr	r1, [sp, #24]
 801235e:	ea41 0a0a 	orr.w	sl, r1, sl
 8012362:	9907      	ldr	r1, [sp, #28]
 8012364:	ea5a 0101 	orrs.w	r1, sl, r1
 8012368:	d120      	bne.n	80123ac <_dtoa_r+0x9d4>
 801236a:	2a00      	cmp	r2, #0
 801236c:	ddec      	ble.n	8012348 <_dtoa_r+0x970>
 801236e:	4629      	mov	r1, r5
 8012370:	2201      	movs	r2, #1
 8012372:	4630      	mov	r0, r6
 8012374:	9304      	str	r3, [sp, #16]
 8012376:	f000 facd 	bl	8012914 <__lshift>
 801237a:	4621      	mov	r1, r4
 801237c:	4605      	mov	r5, r0
 801237e:	f000 fb39 	bl	80129f4 <__mcmp>
 8012382:	2800      	cmp	r0, #0
 8012384:	9b04      	ldr	r3, [sp, #16]
 8012386:	dc02      	bgt.n	801238e <_dtoa_r+0x9b6>
 8012388:	d1de      	bne.n	8012348 <_dtoa_r+0x970>
 801238a:	07da      	lsls	r2, r3, #31
 801238c:	d5dc      	bpl.n	8012348 <_dtoa_r+0x970>
 801238e:	2b39      	cmp	r3, #57	; 0x39
 8012390:	d1d8      	bne.n	8012344 <_dtoa_r+0x96c>
 8012392:	9a02      	ldr	r2, [sp, #8]
 8012394:	2339      	movs	r3, #57	; 0x39
 8012396:	7013      	strb	r3, [r2, #0]
 8012398:	4643      	mov	r3, r8
 801239a:	4698      	mov	r8, r3
 801239c:	3b01      	subs	r3, #1
 801239e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80123a2:	2a39      	cmp	r2, #57	; 0x39
 80123a4:	d051      	beq.n	801244a <_dtoa_r+0xa72>
 80123a6:	3201      	adds	r2, #1
 80123a8:	701a      	strb	r2, [r3, #0]
 80123aa:	e745      	b.n	8012238 <_dtoa_r+0x860>
 80123ac:	2a00      	cmp	r2, #0
 80123ae:	dd03      	ble.n	80123b8 <_dtoa_r+0x9e0>
 80123b0:	2b39      	cmp	r3, #57	; 0x39
 80123b2:	d0ee      	beq.n	8012392 <_dtoa_r+0x9ba>
 80123b4:	3301      	adds	r3, #1
 80123b6:	e7c7      	b.n	8012348 <_dtoa_r+0x970>
 80123b8:	9a04      	ldr	r2, [sp, #16]
 80123ba:	9908      	ldr	r1, [sp, #32]
 80123bc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80123c0:	428a      	cmp	r2, r1
 80123c2:	d02b      	beq.n	801241c <_dtoa_r+0xa44>
 80123c4:	4629      	mov	r1, r5
 80123c6:	2300      	movs	r3, #0
 80123c8:	220a      	movs	r2, #10
 80123ca:	4630      	mov	r0, r6
 80123cc:	f000 f8f2 	bl	80125b4 <__multadd>
 80123d0:	45b9      	cmp	r9, r7
 80123d2:	4605      	mov	r5, r0
 80123d4:	f04f 0300 	mov.w	r3, #0
 80123d8:	f04f 020a 	mov.w	r2, #10
 80123dc:	4649      	mov	r1, r9
 80123de:	4630      	mov	r0, r6
 80123e0:	d107      	bne.n	80123f2 <_dtoa_r+0xa1a>
 80123e2:	f000 f8e7 	bl	80125b4 <__multadd>
 80123e6:	4681      	mov	r9, r0
 80123e8:	4607      	mov	r7, r0
 80123ea:	9b04      	ldr	r3, [sp, #16]
 80123ec:	3301      	adds	r3, #1
 80123ee:	9304      	str	r3, [sp, #16]
 80123f0:	e774      	b.n	80122dc <_dtoa_r+0x904>
 80123f2:	f000 f8df 	bl	80125b4 <__multadd>
 80123f6:	4639      	mov	r1, r7
 80123f8:	4681      	mov	r9, r0
 80123fa:	2300      	movs	r3, #0
 80123fc:	220a      	movs	r2, #10
 80123fe:	4630      	mov	r0, r6
 8012400:	f000 f8d8 	bl	80125b4 <__multadd>
 8012404:	4607      	mov	r7, r0
 8012406:	e7f0      	b.n	80123ea <_dtoa_r+0xa12>
 8012408:	f1ba 0f00 	cmp.w	sl, #0
 801240c:	9a01      	ldr	r2, [sp, #4]
 801240e:	bfcc      	ite	gt
 8012410:	46d0      	movgt	r8, sl
 8012412:	f04f 0801 	movle.w	r8, #1
 8012416:	4490      	add	r8, r2
 8012418:	f04f 0900 	mov.w	r9, #0
 801241c:	4629      	mov	r1, r5
 801241e:	2201      	movs	r2, #1
 8012420:	4630      	mov	r0, r6
 8012422:	9302      	str	r3, [sp, #8]
 8012424:	f000 fa76 	bl	8012914 <__lshift>
 8012428:	4621      	mov	r1, r4
 801242a:	4605      	mov	r5, r0
 801242c:	f000 fae2 	bl	80129f4 <__mcmp>
 8012430:	2800      	cmp	r0, #0
 8012432:	dcb1      	bgt.n	8012398 <_dtoa_r+0x9c0>
 8012434:	d102      	bne.n	801243c <_dtoa_r+0xa64>
 8012436:	9b02      	ldr	r3, [sp, #8]
 8012438:	07db      	lsls	r3, r3, #31
 801243a:	d4ad      	bmi.n	8012398 <_dtoa_r+0x9c0>
 801243c:	4643      	mov	r3, r8
 801243e:	4698      	mov	r8, r3
 8012440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012444:	2a30      	cmp	r2, #48	; 0x30
 8012446:	d0fa      	beq.n	801243e <_dtoa_r+0xa66>
 8012448:	e6f6      	b.n	8012238 <_dtoa_r+0x860>
 801244a:	9a01      	ldr	r2, [sp, #4]
 801244c:	429a      	cmp	r2, r3
 801244e:	d1a4      	bne.n	801239a <_dtoa_r+0x9c2>
 8012450:	f10b 0b01 	add.w	fp, fp, #1
 8012454:	2331      	movs	r3, #49	; 0x31
 8012456:	e778      	b.n	801234a <_dtoa_r+0x972>
 8012458:	4b14      	ldr	r3, [pc, #80]	; (80124ac <_dtoa_r+0xad4>)
 801245a:	f7ff bb27 	b.w	8011aac <_dtoa_r+0xd4>
 801245e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012460:	2b00      	cmp	r3, #0
 8012462:	f47f ab03 	bne.w	8011a6c <_dtoa_r+0x94>
 8012466:	4b12      	ldr	r3, [pc, #72]	; (80124b0 <_dtoa_r+0xad8>)
 8012468:	f7ff bb20 	b.w	8011aac <_dtoa_r+0xd4>
 801246c:	f1ba 0f00 	cmp.w	sl, #0
 8012470:	dc03      	bgt.n	801247a <_dtoa_r+0xaa2>
 8012472:	9b06      	ldr	r3, [sp, #24]
 8012474:	2b02      	cmp	r3, #2
 8012476:	f73f aec7 	bgt.w	8012208 <_dtoa_r+0x830>
 801247a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801247e:	4621      	mov	r1, r4
 8012480:	4628      	mov	r0, r5
 8012482:	f7ff fa1b 	bl	80118bc <quorem>
 8012486:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801248a:	f808 3b01 	strb.w	r3, [r8], #1
 801248e:	9a01      	ldr	r2, [sp, #4]
 8012490:	eba8 0202 	sub.w	r2, r8, r2
 8012494:	4592      	cmp	sl, r2
 8012496:	ddb7      	ble.n	8012408 <_dtoa_r+0xa30>
 8012498:	4629      	mov	r1, r5
 801249a:	2300      	movs	r3, #0
 801249c:	220a      	movs	r2, #10
 801249e:	4630      	mov	r0, r6
 80124a0:	f000 f888 	bl	80125b4 <__multadd>
 80124a4:	4605      	mov	r5, r0
 80124a6:	e7ea      	b.n	801247e <_dtoa_r+0xaa6>
 80124a8:	0801e3db 	.word	0x0801e3db
 80124ac:	0801e244 	.word	0x0801e244
 80124b0:	0801e373 	.word	0x0801e373

080124b4 <fiprintf>:
 80124b4:	b40e      	push	{r1, r2, r3}
 80124b6:	b503      	push	{r0, r1, lr}
 80124b8:	4601      	mov	r1, r0
 80124ba:	ab03      	add	r3, sp, #12
 80124bc:	4805      	ldr	r0, [pc, #20]	; (80124d4 <fiprintf+0x20>)
 80124be:	f853 2b04 	ldr.w	r2, [r3], #4
 80124c2:	6800      	ldr	r0, [r0, #0]
 80124c4:	9301      	str	r3, [sp, #4]
 80124c6:	f000 fe13 	bl	80130f0 <_vfiprintf_r>
 80124ca:	b002      	add	sp, #8
 80124cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80124d0:	b003      	add	sp, #12
 80124d2:	4770      	bx	lr
 80124d4:	24000414 	.word	0x24000414

080124d8 <_localeconv_r>:
 80124d8:	4800      	ldr	r0, [pc, #0]	; (80124dc <_localeconv_r+0x4>)
 80124da:	4770      	bx	lr
 80124dc:	24000568 	.word	0x24000568

080124e0 <malloc>:
 80124e0:	4b02      	ldr	r3, [pc, #8]	; (80124ec <malloc+0xc>)
 80124e2:	4601      	mov	r1, r0
 80124e4:	6818      	ldr	r0, [r3, #0]
 80124e6:	f000 bc09 	b.w	8012cfc <_malloc_r>
 80124ea:	bf00      	nop
 80124ec:	24000414 	.word	0x24000414

080124f0 <_Balloc>:
 80124f0:	b570      	push	{r4, r5, r6, lr}
 80124f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80124f4:	4604      	mov	r4, r0
 80124f6:	460d      	mov	r5, r1
 80124f8:	b976      	cbnz	r6, 8012518 <_Balloc+0x28>
 80124fa:	2010      	movs	r0, #16
 80124fc:	f7ff fff0 	bl	80124e0 <malloc>
 8012500:	4602      	mov	r2, r0
 8012502:	6260      	str	r0, [r4, #36]	; 0x24
 8012504:	b920      	cbnz	r0, 8012510 <_Balloc+0x20>
 8012506:	4b18      	ldr	r3, [pc, #96]	; (8012568 <_Balloc+0x78>)
 8012508:	4818      	ldr	r0, [pc, #96]	; (801256c <_Balloc+0x7c>)
 801250a:	2166      	movs	r1, #102	; 0x66
 801250c:	f7ff f9b8 	bl	8011880 <__assert_func>
 8012510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012514:	6006      	str	r6, [r0, #0]
 8012516:	60c6      	str	r6, [r0, #12]
 8012518:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801251a:	68f3      	ldr	r3, [r6, #12]
 801251c:	b183      	cbz	r3, 8012540 <_Balloc+0x50>
 801251e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012520:	68db      	ldr	r3, [r3, #12]
 8012522:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012526:	b9b8      	cbnz	r0, 8012558 <_Balloc+0x68>
 8012528:	2101      	movs	r1, #1
 801252a:	fa01 f605 	lsl.w	r6, r1, r5
 801252e:	1d72      	adds	r2, r6, #5
 8012530:	0092      	lsls	r2, r2, #2
 8012532:	4620      	mov	r0, r4
 8012534:	f000 fb60 	bl	8012bf8 <_calloc_r>
 8012538:	b160      	cbz	r0, 8012554 <_Balloc+0x64>
 801253a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801253e:	e00e      	b.n	801255e <_Balloc+0x6e>
 8012540:	2221      	movs	r2, #33	; 0x21
 8012542:	2104      	movs	r1, #4
 8012544:	4620      	mov	r0, r4
 8012546:	f000 fb57 	bl	8012bf8 <_calloc_r>
 801254a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801254c:	60f0      	str	r0, [r6, #12]
 801254e:	68db      	ldr	r3, [r3, #12]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d1e4      	bne.n	801251e <_Balloc+0x2e>
 8012554:	2000      	movs	r0, #0
 8012556:	bd70      	pop	{r4, r5, r6, pc}
 8012558:	6802      	ldr	r2, [r0, #0]
 801255a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801255e:	2300      	movs	r3, #0
 8012560:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012564:	e7f7      	b.n	8012556 <_Balloc+0x66>
 8012566:	bf00      	nop
 8012568:	0801e268 	.word	0x0801e268
 801256c:	0801e3ec 	.word	0x0801e3ec

08012570 <_Bfree>:
 8012570:	b570      	push	{r4, r5, r6, lr}
 8012572:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012574:	4605      	mov	r5, r0
 8012576:	460c      	mov	r4, r1
 8012578:	b976      	cbnz	r6, 8012598 <_Bfree+0x28>
 801257a:	2010      	movs	r0, #16
 801257c:	f7ff ffb0 	bl	80124e0 <malloc>
 8012580:	4602      	mov	r2, r0
 8012582:	6268      	str	r0, [r5, #36]	; 0x24
 8012584:	b920      	cbnz	r0, 8012590 <_Bfree+0x20>
 8012586:	4b09      	ldr	r3, [pc, #36]	; (80125ac <_Bfree+0x3c>)
 8012588:	4809      	ldr	r0, [pc, #36]	; (80125b0 <_Bfree+0x40>)
 801258a:	218a      	movs	r1, #138	; 0x8a
 801258c:	f7ff f978 	bl	8011880 <__assert_func>
 8012590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012594:	6006      	str	r6, [r0, #0]
 8012596:	60c6      	str	r6, [r0, #12]
 8012598:	b13c      	cbz	r4, 80125aa <_Bfree+0x3a>
 801259a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801259c:	6862      	ldr	r2, [r4, #4]
 801259e:	68db      	ldr	r3, [r3, #12]
 80125a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80125a4:	6021      	str	r1, [r4, #0]
 80125a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80125aa:	bd70      	pop	{r4, r5, r6, pc}
 80125ac:	0801e268 	.word	0x0801e268
 80125b0:	0801e3ec 	.word	0x0801e3ec

080125b4 <__multadd>:
 80125b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125b8:	690d      	ldr	r5, [r1, #16]
 80125ba:	4607      	mov	r7, r0
 80125bc:	460c      	mov	r4, r1
 80125be:	461e      	mov	r6, r3
 80125c0:	f101 0c14 	add.w	ip, r1, #20
 80125c4:	2000      	movs	r0, #0
 80125c6:	f8dc 3000 	ldr.w	r3, [ip]
 80125ca:	b299      	uxth	r1, r3
 80125cc:	fb02 6101 	mla	r1, r2, r1, r6
 80125d0:	0c1e      	lsrs	r6, r3, #16
 80125d2:	0c0b      	lsrs	r3, r1, #16
 80125d4:	fb02 3306 	mla	r3, r2, r6, r3
 80125d8:	b289      	uxth	r1, r1
 80125da:	3001      	adds	r0, #1
 80125dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80125e0:	4285      	cmp	r5, r0
 80125e2:	f84c 1b04 	str.w	r1, [ip], #4
 80125e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80125ea:	dcec      	bgt.n	80125c6 <__multadd+0x12>
 80125ec:	b30e      	cbz	r6, 8012632 <__multadd+0x7e>
 80125ee:	68a3      	ldr	r3, [r4, #8]
 80125f0:	42ab      	cmp	r3, r5
 80125f2:	dc19      	bgt.n	8012628 <__multadd+0x74>
 80125f4:	6861      	ldr	r1, [r4, #4]
 80125f6:	4638      	mov	r0, r7
 80125f8:	3101      	adds	r1, #1
 80125fa:	f7ff ff79 	bl	80124f0 <_Balloc>
 80125fe:	4680      	mov	r8, r0
 8012600:	b928      	cbnz	r0, 801260e <__multadd+0x5a>
 8012602:	4602      	mov	r2, r0
 8012604:	4b0c      	ldr	r3, [pc, #48]	; (8012638 <__multadd+0x84>)
 8012606:	480d      	ldr	r0, [pc, #52]	; (801263c <__multadd+0x88>)
 8012608:	21b5      	movs	r1, #181	; 0xb5
 801260a:	f7ff f939 	bl	8011880 <__assert_func>
 801260e:	6922      	ldr	r2, [r4, #16]
 8012610:	3202      	adds	r2, #2
 8012612:	f104 010c 	add.w	r1, r4, #12
 8012616:	0092      	lsls	r2, r2, #2
 8012618:	300c      	adds	r0, #12
 801261a:	f7fe fb4b 	bl	8010cb4 <memcpy>
 801261e:	4621      	mov	r1, r4
 8012620:	4638      	mov	r0, r7
 8012622:	f7ff ffa5 	bl	8012570 <_Bfree>
 8012626:	4644      	mov	r4, r8
 8012628:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801262c:	3501      	adds	r5, #1
 801262e:	615e      	str	r6, [r3, #20]
 8012630:	6125      	str	r5, [r4, #16]
 8012632:	4620      	mov	r0, r4
 8012634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012638:	0801e3db 	.word	0x0801e3db
 801263c:	0801e3ec 	.word	0x0801e3ec

08012640 <__hi0bits>:
 8012640:	0c03      	lsrs	r3, r0, #16
 8012642:	041b      	lsls	r3, r3, #16
 8012644:	b9d3      	cbnz	r3, 801267c <__hi0bits+0x3c>
 8012646:	0400      	lsls	r0, r0, #16
 8012648:	2310      	movs	r3, #16
 801264a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801264e:	bf04      	itt	eq
 8012650:	0200      	lsleq	r0, r0, #8
 8012652:	3308      	addeq	r3, #8
 8012654:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012658:	bf04      	itt	eq
 801265a:	0100      	lsleq	r0, r0, #4
 801265c:	3304      	addeq	r3, #4
 801265e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012662:	bf04      	itt	eq
 8012664:	0080      	lsleq	r0, r0, #2
 8012666:	3302      	addeq	r3, #2
 8012668:	2800      	cmp	r0, #0
 801266a:	db05      	blt.n	8012678 <__hi0bits+0x38>
 801266c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012670:	f103 0301 	add.w	r3, r3, #1
 8012674:	bf08      	it	eq
 8012676:	2320      	moveq	r3, #32
 8012678:	4618      	mov	r0, r3
 801267a:	4770      	bx	lr
 801267c:	2300      	movs	r3, #0
 801267e:	e7e4      	b.n	801264a <__hi0bits+0xa>

08012680 <__lo0bits>:
 8012680:	6803      	ldr	r3, [r0, #0]
 8012682:	f013 0207 	ands.w	r2, r3, #7
 8012686:	4601      	mov	r1, r0
 8012688:	d00b      	beq.n	80126a2 <__lo0bits+0x22>
 801268a:	07da      	lsls	r2, r3, #31
 801268c:	d423      	bmi.n	80126d6 <__lo0bits+0x56>
 801268e:	0798      	lsls	r0, r3, #30
 8012690:	bf49      	itett	mi
 8012692:	085b      	lsrmi	r3, r3, #1
 8012694:	089b      	lsrpl	r3, r3, #2
 8012696:	2001      	movmi	r0, #1
 8012698:	600b      	strmi	r3, [r1, #0]
 801269a:	bf5c      	itt	pl
 801269c:	600b      	strpl	r3, [r1, #0]
 801269e:	2002      	movpl	r0, #2
 80126a0:	4770      	bx	lr
 80126a2:	b298      	uxth	r0, r3
 80126a4:	b9a8      	cbnz	r0, 80126d2 <__lo0bits+0x52>
 80126a6:	0c1b      	lsrs	r3, r3, #16
 80126a8:	2010      	movs	r0, #16
 80126aa:	b2da      	uxtb	r2, r3
 80126ac:	b90a      	cbnz	r2, 80126b2 <__lo0bits+0x32>
 80126ae:	3008      	adds	r0, #8
 80126b0:	0a1b      	lsrs	r3, r3, #8
 80126b2:	071a      	lsls	r2, r3, #28
 80126b4:	bf04      	itt	eq
 80126b6:	091b      	lsreq	r3, r3, #4
 80126b8:	3004      	addeq	r0, #4
 80126ba:	079a      	lsls	r2, r3, #30
 80126bc:	bf04      	itt	eq
 80126be:	089b      	lsreq	r3, r3, #2
 80126c0:	3002      	addeq	r0, #2
 80126c2:	07da      	lsls	r2, r3, #31
 80126c4:	d403      	bmi.n	80126ce <__lo0bits+0x4e>
 80126c6:	085b      	lsrs	r3, r3, #1
 80126c8:	f100 0001 	add.w	r0, r0, #1
 80126cc:	d005      	beq.n	80126da <__lo0bits+0x5a>
 80126ce:	600b      	str	r3, [r1, #0]
 80126d0:	4770      	bx	lr
 80126d2:	4610      	mov	r0, r2
 80126d4:	e7e9      	b.n	80126aa <__lo0bits+0x2a>
 80126d6:	2000      	movs	r0, #0
 80126d8:	4770      	bx	lr
 80126da:	2020      	movs	r0, #32
 80126dc:	4770      	bx	lr
	...

080126e0 <__i2b>:
 80126e0:	b510      	push	{r4, lr}
 80126e2:	460c      	mov	r4, r1
 80126e4:	2101      	movs	r1, #1
 80126e6:	f7ff ff03 	bl	80124f0 <_Balloc>
 80126ea:	4602      	mov	r2, r0
 80126ec:	b928      	cbnz	r0, 80126fa <__i2b+0x1a>
 80126ee:	4b05      	ldr	r3, [pc, #20]	; (8012704 <__i2b+0x24>)
 80126f0:	4805      	ldr	r0, [pc, #20]	; (8012708 <__i2b+0x28>)
 80126f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80126f6:	f7ff f8c3 	bl	8011880 <__assert_func>
 80126fa:	2301      	movs	r3, #1
 80126fc:	6144      	str	r4, [r0, #20]
 80126fe:	6103      	str	r3, [r0, #16]
 8012700:	bd10      	pop	{r4, pc}
 8012702:	bf00      	nop
 8012704:	0801e3db 	.word	0x0801e3db
 8012708:	0801e3ec 	.word	0x0801e3ec

0801270c <__multiply>:
 801270c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012710:	4691      	mov	r9, r2
 8012712:	690a      	ldr	r2, [r1, #16]
 8012714:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012718:	429a      	cmp	r2, r3
 801271a:	bfb8      	it	lt
 801271c:	460b      	movlt	r3, r1
 801271e:	460c      	mov	r4, r1
 8012720:	bfbc      	itt	lt
 8012722:	464c      	movlt	r4, r9
 8012724:	4699      	movlt	r9, r3
 8012726:	6927      	ldr	r7, [r4, #16]
 8012728:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801272c:	68a3      	ldr	r3, [r4, #8]
 801272e:	6861      	ldr	r1, [r4, #4]
 8012730:	eb07 060a 	add.w	r6, r7, sl
 8012734:	42b3      	cmp	r3, r6
 8012736:	b085      	sub	sp, #20
 8012738:	bfb8      	it	lt
 801273a:	3101      	addlt	r1, #1
 801273c:	f7ff fed8 	bl	80124f0 <_Balloc>
 8012740:	b930      	cbnz	r0, 8012750 <__multiply+0x44>
 8012742:	4602      	mov	r2, r0
 8012744:	4b44      	ldr	r3, [pc, #272]	; (8012858 <__multiply+0x14c>)
 8012746:	4845      	ldr	r0, [pc, #276]	; (801285c <__multiply+0x150>)
 8012748:	f240 115d 	movw	r1, #349	; 0x15d
 801274c:	f7ff f898 	bl	8011880 <__assert_func>
 8012750:	f100 0514 	add.w	r5, r0, #20
 8012754:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012758:	462b      	mov	r3, r5
 801275a:	2200      	movs	r2, #0
 801275c:	4543      	cmp	r3, r8
 801275e:	d321      	bcc.n	80127a4 <__multiply+0x98>
 8012760:	f104 0314 	add.w	r3, r4, #20
 8012764:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012768:	f109 0314 	add.w	r3, r9, #20
 801276c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012770:	9202      	str	r2, [sp, #8]
 8012772:	1b3a      	subs	r2, r7, r4
 8012774:	3a15      	subs	r2, #21
 8012776:	f022 0203 	bic.w	r2, r2, #3
 801277a:	3204      	adds	r2, #4
 801277c:	f104 0115 	add.w	r1, r4, #21
 8012780:	428f      	cmp	r7, r1
 8012782:	bf38      	it	cc
 8012784:	2204      	movcc	r2, #4
 8012786:	9201      	str	r2, [sp, #4]
 8012788:	9a02      	ldr	r2, [sp, #8]
 801278a:	9303      	str	r3, [sp, #12]
 801278c:	429a      	cmp	r2, r3
 801278e:	d80c      	bhi.n	80127aa <__multiply+0x9e>
 8012790:	2e00      	cmp	r6, #0
 8012792:	dd03      	ble.n	801279c <__multiply+0x90>
 8012794:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012798:	2b00      	cmp	r3, #0
 801279a:	d05a      	beq.n	8012852 <__multiply+0x146>
 801279c:	6106      	str	r6, [r0, #16]
 801279e:	b005      	add	sp, #20
 80127a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127a4:	f843 2b04 	str.w	r2, [r3], #4
 80127a8:	e7d8      	b.n	801275c <__multiply+0x50>
 80127aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80127ae:	f1ba 0f00 	cmp.w	sl, #0
 80127b2:	d024      	beq.n	80127fe <__multiply+0xf2>
 80127b4:	f104 0e14 	add.w	lr, r4, #20
 80127b8:	46a9      	mov	r9, r5
 80127ba:	f04f 0c00 	mov.w	ip, #0
 80127be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80127c2:	f8d9 1000 	ldr.w	r1, [r9]
 80127c6:	fa1f fb82 	uxth.w	fp, r2
 80127ca:	b289      	uxth	r1, r1
 80127cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80127d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80127d4:	f8d9 2000 	ldr.w	r2, [r9]
 80127d8:	4461      	add	r1, ip
 80127da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80127de:	fb0a c20b 	mla	r2, sl, fp, ip
 80127e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80127e6:	b289      	uxth	r1, r1
 80127e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80127ec:	4577      	cmp	r7, lr
 80127ee:	f849 1b04 	str.w	r1, [r9], #4
 80127f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80127f6:	d8e2      	bhi.n	80127be <__multiply+0xb2>
 80127f8:	9a01      	ldr	r2, [sp, #4]
 80127fa:	f845 c002 	str.w	ip, [r5, r2]
 80127fe:	9a03      	ldr	r2, [sp, #12]
 8012800:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012804:	3304      	adds	r3, #4
 8012806:	f1b9 0f00 	cmp.w	r9, #0
 801280a:	d020      	beq.n	801284e <__multiply+0x142>
 801280c:	6829      	ldr	r1, [r5, #0]
 801280e:	f104 0c14 	add.w	ip, r4, #20
 8012812:	46ae      	mov	lr, r5
 8012814:	f04f 0a00 	mov.w	sl, #0
 8012818:	f8bc b000 	ldrh.w	fp, [ip]
 801281c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012820:	fb09 220b 	mla	r2, r9, fp, r2
 8012824:	4492      	add	sl, r2
 8012826:	b289      	uxth	r1, r1
 8012828:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801282c:	f84e 1b04 	str.w	r1, [lr], #4
 8012830:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012834:	f8be 1000 	ldrh.w	r1, [lr]
 8012838:	0c12      	lsrs	r2, r2, #16
 801283a:	fb09 1102 	mla	r1, r9, r2, r1
 801283e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012842:	4567      	cmp	r7, ip
 8012844:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012848:	d8e6      	bhi.n	8012818 <__multiply+0x10c>
 801284a:	9a01      	ldr	r2, [sp, #4]
 801284c:	50a9      	str	r1, [r5, r2]
 801284e:	3504      	adds	r5, #4
 8012850:	e79a      	b.n	8012788 <__multiply+0x7c>
 8012852:	3e01      	subs	r6, #1
 8012854:	e79c      	b.n	8012790 <__multiply+0x84>
 8012856:	bf00      	nop
 8012858:	0801e3db 	.word	0x0801e3db
 801285c:	0801e3ec 	.word	0x0801e3ec

08012860 <__pow5mult>:
 8012860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012864:	4615      	mov	r5, r2
 8012866:	f012 0203 	ands.w	r2, r2, #3
 801286a:	4606      	mov	r6, r0
 801286c:	460f      	mov	r7, r1
 801286e:	d007      	beq.n	8012880 <__pow5mult+0x20>
 8012870:	4c25      	ldr	r4, [pc, #148]	; (8012908 <__pow5mult+0xa8>)
 8012872:	3a01      	subs	r2, #1
 8012874:	2300      	movs	r3, #0
 8012876:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801287a:	f7ff fe9b 	bl	80125b4 <__multadd>
 801287e:	4607      	mov	r7, r0
 8012880:	10ad      	asrs	r5, r5, #2
 8012882:	d03d      	beq.n	8012900 <__pow5mult+0xa0>
 8012884:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012886:	b97c      	cbnz	r4, 80128a8 <__pow5mult+0x48>
 8012888:	2010      	movs	r0, #16
 801288a:	f7ff fe29 	bl	80124e0 <malloc>
 801288e:	4602      	mov	r2, r0
 8012890:	6270      	str	r0, [r6, #36]	; 0x24
 8012892:	b928      	cbnz	r0, 80128a0 <__pow5mult+0x40>
 8012894:	4b1d      	ldr	r3, [pc, #116]	; (801290c <__pow5mult+0xac>)
 8012896:	481e      	ldr	r0, [pc, #120]	; (8012910 <__pow5mult+0xb0>)
 8012898:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801289c:	f7fe fff0 	bl	8011880 <__assert_func>
 80128a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80128a4:	6004      	str	r4, [r0, #0]
 80128a6:	60c4      	str	r4, [r0, #12]
 80128a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80128ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80128b0:	b94c      	cbnz	r4, 80128c6 <__pow5mult+0x66>
 80128b2:	f240 2171 	movw	r1, #625	; 0x271
 80128b6:	4630      	mov	r0, r6
 80128b8:	f7ff ff12 	bl	80126e0 <__i2b>
 80128bc:	2300      	movs	r3, #0
 80128be:	f8c8 0008 	str.w	r0, [r8, #8]
 80128c2:	4604      	mov	r4, r0
 80128c4:	6003      	str	r3, [r0, #0]
 80128c6:	f04f 0900 	mov.w	r9, #0
 80128ca:	07eb      	lsls	r3, r5, #31
 80128cc:	d50a      	bpl.n	80128e4 <__pow5mult+0x84>
 80128ce:	4639      	mov	r1, r7
 80128d0:	4622      	mov	r2, r4
 80128d2:	4630      	mov	r0, r6
 80128d4:	f7ff ff1a 	bl	801270c <__multiply>
 80128d8:	4639      	mov	r1, r7
 80128da:	4680      	mov	r8, r0
 80128dc:	4630      	mov	r0, r6
 80128de:	f7ff fe47 	bl	8012570 <_Bfree>
 80128e2:	4647      	mov	r7, r8
 80128e4:	106d      	asrs	r5, r5, #1
 80128e6:	d00b      	beq.n	8012900 <__pow5mult+0xa0>
 80128e8:	6820      	ldr	r0, [r4, #0]
 80128ea:	b938      	cbnz	r0, 80128fc <__pow5mult+0x9c>
 80128ec:	4622      	mov	r2, r4
 80128ee:	4621      	mov	r1, r4
 80128f0:	4630      	mov	r0, r6
 80128f2:	f7ff ff0b 	bl	801270c <__multiply>
 80128f6:	6020      	str	r0, [r4, #0]
 80128f8:	f8c0 9000 	str.w	r9, [r0]
 80128fc:	4604      	mov	r4, r0
 80128fe:	e7e4      	b.n	80128ca <__pow5mult+0x6a>
 8012900:	4638      	mov	r0, r7
 8012902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012906:	bf00      	nop
 8012908:	0801e538 	.word	0x0801e538
 801290c:	0801e268 	.word	0x0801e268
 8012910:	0801e3ec 	.word	0x0801e3ec

08012914 <__lshift>:
 8012914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012918:	460c      	mov	r4, r1
 801291a:	6849      	ldr	r1, [r1, #4]
 801291c:	6923      	ldr	r3, [r4, #16]
 801291e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012922:	68a3      	ldr	r3, [r4, #8]
 8012924:	4607      	mov	r7, r0
 8012926:	4691      	mov	r9, r2
 8012928:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801292c:	f108 0601 	add.w	r6, r8, #1
 8012930:	42b3      	cmp	r3, r6
 8012932:	db0b      	blt.n	801294c <__lshift+0x38>
 8012934:	4638      	mov	r0, r7
 8012936:	f7ff fddb 	bl	80124f0 <_Balloc>
 801293a:	4605      	mov	r5, r0
 801293c:	b948      	cbnz	r0, 8012952 <__lshift+0x3e>
 801293e:	4602      	mov	r2, r0
 8012940:	4b2a      	ldr	r3, [pc, #168]	; (80129ec <__lshift+0xd8>)
 8012942:	482b      	ldr	r0, [pc, #172]	; (80129f0 <__lshift+0xdc>)
 8012944:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012948:	f7fe ff9a 	bl	8011880 <__assert_func>
 801294c:	3101      	adds	r1, #1
 801294e:	005b      	lsls	r3, r3, #1
 8012950:	e7ee      	b.n	8012930 <__lshift+0x1c>
 8012952:	2300      	movs	r3, #0
 8012954:	f100 0114 	add.w	r1, r0, #20
 8012958:	f100 0210 	add.w	r2, r0, #16
 801295c:	4618      	mov	r0, r3
 801295e:	4553      	cmp	r3, sl
 8012960:	db37      	blt.n	80129d2 <__lshift+0xbe>
 8012962:	6920      	ldr	r0, [r4, #16]
 8012964:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012968:	f104 0314 	add.w	r3, r4, #20
 801296c:	f019 091f 	ands.w	r9, r9, #31
 8012970:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012974:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012978:	d02f      	beq.n	80129da <__lshift+0xc6>
 801297a:	f1c9 0e20 	rsb	lr, r9, #32
 801297e:	468a      	mov	sl, r1
 8012980:	f04f 0c00 	mov.w	ip, #0
 8012984:	681a      	ldr	r2, [r3, #0]
 8012986:	fa02 f209 	lsl.w	r2, r2, r9
 801298a:	ea42 020c 	orr.w	r2, r2, ip
 801298e:	f84a 2b04 	str.w	r2, [sl], #4
 8012992:	f853 2b04 	ldr.w	r2, [r3], #4
 8012996:	4298      	cmp	r0, r3
 8012998:	fa22 fc0e 	lsr.w	ip, r2, lr
 801299c:	d8f2      	bhi.n	8012984 <__lshift+0x70>
 801299e:	1b03      	subs	r3, r0, r4
 80129a0:	3b15      	subs	r3, #21
 80129a2:	f023 0303 	bic.w	r3, r3, #3
 80129a6:	3304      	adds	r3, #4
 80129a8:	f104 0215 	add.w	r2, r4, #21
 80129ac:	4290      	cmp	r0, r2
 80129ae:	bf38      	it	cc
 80129b0:	2304      	movcc	r3, #4
 80129b2:	f841 c003 	str.w	ip, [r1, r3]
 80129b6:	f1bc 0f00 	cmp.w	ip, #0
 80129ba:	d001      	beq.n	80129c0 <__lshift+0xac>
 80129bc:	f108 0602 	add.w	r6, r8, #2
 80129c0:	3e01      	subs	r6, #1
 80129c2:	4638      	mov	r0, r7
 80129c4:	612e      	str	r6, [r5, #16]
 80129c6:	4621      	mov	r1, r4
 80129c8:	f7ff fdd2 	bl	8012570 <_Bfree>
 80129cc:	4628      	mov	r0, r5
 80129ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80129d6:	3301      	adds	r3, #1
 80129d8:	e7c1      	b.n	801295e <__lshift+0x4a>
 80129da:	3904      	subs	r1, #4
 80129dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80129e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80129e4:	4298      	cmp	r0, r3
 80129e6:	d8f9      	bhi.n	80129dc <__lshift+0xc8>
 80129e8:	e7ea      	b.n	80129c0 <__lshift+0xac>
 80129ea:	bf00      	nop
 80129ec:	0801e3db 	.word	0x0801e3db
 80129f0:	0801e3ec 	.word	0x0801e3ec

080129f4 <__mcmp>:
 80129f4:	b530      	push	{r4, r5, lr}
 80129f6:	6902      	ldr	r2, [r0, #16]
 80129f8:	690c      	ldr	r4, [r1, #16]
 80129fa:	1b12      	subs	r2, r2, r4
 80129fc:	d10e      	bne.n	8012a1c <__mcmp+0x28>
 80129fe:	f100 0314 	add.w	r3, r0, #20
 8012a02:	3114      	adds	r1, #20
 8012a04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012a08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012a0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012a10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012a14:	42a5      	cmp	r5, r4
 8012a16:	d003      	beq.n	8012a20 <__mcmp+0x2c>
 8012a18:	d305      	bcc.n	8012a26 <__mcmp+0x32>
 8012a1a:	2201      	movs	r2, #1
 8012a1c:	4610      	mov	r0, r2
 8012a1e:	bd30      	pop	{r4, r5, pc}
 8012a20:	4283      	cmp	r3, r0
 8012a22:	d3f3      	bcc.n	8012a0c <__mcmp+0x18>
 8012a24:	e7fa      	b.n	8012a1c <__mcmp+0x28>
 8012a26:	f04f 32ff 	mov.w	r2, #4294967295
 8012a2a:	e7f7      	b.n	8012a1c <__mcmp+0x28>

08012a2c <__mdiff>:
 8012a2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a30:	460c      	mov	r4, r1
 8012a32:	4606      	mov	r6, r0
 8012a34:	4611      	mov	r1, r2
 8012a36:	4620      	mov	r0, r4
 8012a38:	4690      	mov	r8, r2
 8012a3a:	f7ff ffdb 	bl	80129f4 <__mcmp>
 8012a3e:	1e05      	subs	r5, r0, #0
 8012a40:	d110      	bne.n	8012a64 <__mdiff+0x38>
 8012a42:	4629      	mov	r1, r5
 8012a44:	4630      	mov	r0, r6
 8012a46:	f7ff fd53 	bl	80124f0 <_Balloc>
 8012a4a:	b930      	cbnz	r0, 8012a5a <__mdiff+0x2e>
 8012a4c:	4b3a      	ldr	r3, [pc, #232]	; (8012b38 <__mdiff+0x10c>)
 8012a4e:	4602      	mov	r2, r0
 8012a50:	f240 2132 	movw	r1, #562	; 0x232
 8012a54:	4839      	ldr	r0, [pc, #228]	; (8012b3c <__mdiff+0x110>)
 8012a56:	f7fe ff13 	bl	8011880 <__assert_func>
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012a60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a64:	bfa4      	itt	ge
 8012a66:	4643      	movge	r3, r8
 8012a68:	46a0      	movge	r8, r4
 8012a6a:	4630      	mov	r0, r6
 8012a6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012a70:	bfa6      	itte	ge
 8012a72:	461c      	movge	r4, r3
 8012a74:	2500      	movge	r5, #0
 8012a76:	2501      	movlt	r5, #1
 8012a78:	f7ff fd3a 	bl	80124f0 <_Balloc>
 8012a7c:	b920      	cbnz	r0, 8012a88 <__mdiff+0x5c>
 8012a7e:	4b2e      	ldr	r3, [pc, #184]	; (8012b38 <__mdiff+0x10c>)
 8012a80:	4602      	mov	r2, r0
 8012a82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012a86:	e7e5      	b.n	8012a54 <__mdiff+0x28>
 8012a88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012a8c:	6926      	ldr	r6, [r4, #16]
 8012a8e:	60c5      	str	r5, [r0, #12]
 8012a90:	f104 0914 	add.w	r9, r4, #20
 8012a94:	f108 0514 	add.w	r5, r8, #20
 8012a98:	f100 0e14 	add.w	lr, r0, #20
 8012a9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012aa0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012aa4:	f108 0210 	add.w	r2, r8, #16
 8012aa8:	46f2      	mov	sl, lr
 8012aaa:	2100      	movs	r1, #0
 8012aac:	f859 3b04 	ldr.w	r3, [r9], #4
 8012ab0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012ab4:	fa1f f883 	uxth.w	r8, r3
 8012ab8:	fa11 f18b 	uxtah	r1, r1, fp
 8012abc:	0c1b      	lsrs	r3, r3, #16
 8012abe:	eba1 0808 	sub.w	r8, r1, r8
 8012ac2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012ac6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012aca:	fa1f f888 	uxth.w	r8, r8
 8012ace:	1419      	asrs	r1, r3, #16
 8012ad0:	454e      	cmp	r6, r9
 8012ad2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012ad6:	f84a 3b04 	str.w	r3, [sl], #4
 8012ada:	d8e7      	bhi.n	8012aac <__mdiff+0x80>
 8012adc:	1b33      	subs	r3, r6, r4
 8012ade:	3b15      	subs	r3, #21
 8012ae0:	f023 0303 	bic.w	r3, r3, #3
 8012ae4:	3304      	adds	r3, #4
 8012ae6:	3415      	adds	r4, #21
 8012ae8:	42a6      	cmp	r6, r4
 8012aea:	bf38      	it	cc
 8012aec:	2304      	movcc	r3, #4
 8012aee:	441d      	add	r5, r3
 8012af0:	4473      	add	r3, lr
 8012af2:	469e      	mov	lr, r3
 8012af4:	462e      	mov	r6, r5
 8012af6:	4566      	cmp	r6, ip
 8012af8:	d30e      	bcc.n	8012b18 <__mdiff+0xec>
 8012afa:	f10c 0203 	add.w	r2, ip, #3
 8012afe:	1b52      	subs	r2, r2, r5
 8012b00:	f022 0203 	bic.w	r2, r2, #3
 8012b04:	3d03      	subs	r5, #3
 8012b06:	45ac      	cmp	ip, r5
 8012b08:	bf38      	it	cc
 8012b0a:	2200      	movcc	r2, #0
 8012b0c:	441a      	add	r2, r3
 8012b0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012b12:	b17b      	cbz	r3, 8012b34 <__mdiff+0x108>
 8012b14:	6107      	str	r7, [r0, #16]
 8012b16:	e7a3      	b.n	8012a60 <__mdiff+0x34>
 8012b18:	f856 8b04 	ldr.w	r8, [r6], #4
 8012b1c:	fa11 f288 	uxtah	r2, r1, r8
 8012b20:	1414      	asrs	r4, r2, #16
 8012b22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012b26:	b292      	uxth	r2, r2
 8012b28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012b2c:	f84e 2b04 	str.w	r2, [lr], #4
 8012b30:	1421      	asrs	r1, r4, #16
 8012b32:	e7e0      	b.n	8012af6 <__mdiff+0xca>
 8012b34:	3f01      	subs	r7, #1
 8012b36:	e7ea      	b.n	8012b0e <__mdiff+0xe2>
 8012b38:	0801e3db 	.word	0x0801e3db
 8012b3c:	0801e3ec 	.word	0x0801e3ec

08012b40 <__d2b>:
 8012b40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012b44:	4689      	mov	r9, r1
 8012b46:	2101      	movs	r1, #1
 8012b48:	ec57 6b10 	vmov	r6, r7, d0
 8012b4c:	4690      	mov	r8, r2
 8012b4e:	f7ff fccf 	bl	80124f0 <_Balloc>
 8012b52:	4604      	mov	r4, r0
 8012b54:	b930      	cbnz	r0, 8012b64 <__d2b+0x24>
 8012b56:	4602      	mov	r2, r0
 8012b58:	4b25      	ldr	r3, [pc, #148]	; (8012bf0 <__d2b+0xb0>)
 8012b5a:	4826      	ldr	r0, [pc, #152]	; (8012bf4 <__d2b+0xb4>)
 8012b5c:	f240 310a 	movw	r1, #778	; 0x30a
 8012b60:	f7fe fe8e 	bl	8011880 <__assert_func>
 8012b64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012b68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012b6c:	bb35      	cbnz	r5, 8012bbc <__d2b+0x7c>
 8012b6e:	2e00      	cmp	r6, #0
 8012b70:	9301      	str	r3, [sp, #4]
 8012b72:	d028      	beq.n	8012bc6 <__d2b+0x86>
 8012b74:	4668      	mov	r0, sp
 8012b76:	9600      	str	r6, [sp, #0]
 8012b78:	f7ff fd82 	bl	8012680 <__lo0bits>
 8012b7c:	9900      	ldr	r1, [sp, #0]
 8012b7e:	b300      	cbz	r0, 8012bc2 <__d2b+0x82>
 8012b80:	9a01      	ldr	r2, [sp, #4]
 8012b82:	f1c0 0320 	rsb	r3, r0, #32
 8012b86:	fa02 f303 	lsl.w	r3, r2, r3
 8012b8a:	430b      	orrs	r3, r1
 8012b8c:	40c2      	lsrs	r2, r0
 8012b8e:	6163      	str	r3, [r4, #20]
 8012b90:	9201      	str	r2, [sp, #4]
 8012b92:	9b01      	ldr	r3, [sp, #4]
 8012b94:	61a3      	str	r3, [r4, #24]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	bf14      	ite	ne
 8012b9a:	2202      	movne	r2, #2
 8012b9c:	2201      	moveq	r2, #1
 8012b9e:	6122      	str	r2, [r4, #16]
 8012ba0:	b1d5      	cbz	r5, 8012bd8 <__d2b+0x98>
 8012ba2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012ba6:	4405      	add	r5, r0
 8012ba8:	f8c9 5000 	str.w	r5, [r9]
 8012bac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012bb0:	f8c8 0000 	str.w	r0, [r8]
 8012bb4:	4620      	mov	r0, r4
 8012bb6:	b003      	add	sp, #12
 8012bb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012bc0:	e7d5      	b.n	8012b6e <__d2b+0x2e>
 8012bc2:	6161      	str	r1, [r4, #20]
 8012bc4:	e7e5      	b.n	8012b92 <__d2b+0x52>
 8012bc6:	a801      	add	r0, sp, #4
 8012bc8:	f7ff fd5a 	bl	8012680 <__lo0bits>
 8012bcc:	9b01      	ldr	r3, [sp, #4]
 8012bce:	6163      	str	r3, [r4, #20]
 8012bd0:	2201      	movs	r2, #1
 8012bd2:	6122      	str	r2, [r4, #16]
 8012bd4:	3020      	adds	r0, #32
 8012bd6:	e7e3      	b.n	8012ba0 <__d2b+0x60>
 8012bd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012bdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012be0:	f8c9 0000 	str.w	r0, [r9]
 8012be4:	6918      	ldr	r0, [r3, #16]
 8012be6:	f7ff fd2b 	bl	8012640 <__hi0bits>
 8012bea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012bee:	e7df      	b.n	8012bb0 <__d2b+0x70>
 8012bf0:	0801e3db 	.word	0x0801e3db
 8012bf4:	0801e3ec 	.word	0x0801e3ec

08012bf8 <_calloc_r>:
 8012bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012bfa:	fba1 2402 	umull	r2, r4, r1, r2
 8012bfe:	b94c      	cbnz	r4, 8012c14 <_calloc_r+0x1c>
 8012c00:	4611      	mov	r1, r2
 8012c02:	9201      	str	r2, [sp, #4]
 8012c04:	f000 f87a 	bl	8012cfc <_malloc_r>
 8012c08:	9a01      	ldr	r2, [sp, #4]
 8012c0a:	4605      	mov	r5, r0
 8012c0c:	b930      	cbnz	r0, 8012c1c <_calloc_r+0x24>
 8012c0e:	4628      	mov	r0, r5
 8012c10:	b003      	add	sp, #12
 8012c12:	bd30      	pop	{r4, r5, pc}
 8012c14:	220c      	movs	r2, #12
 8012c16:	6002      	str	r2, [r0, #0]
 8012c18:	2500      	movs	r5, #0
 8012c1a:	e7f8      	b.n	8012c0e <_calloc_r+0x16>
 8012c1c:	4621      	mov	r1, r4
 8012c1e:	f7fe f857 	bl	8010cd0 <memset>
 8012c22:	e7f4      	b.n	8012c0e <_calloc_r+0x16>

08012c24 <_free_r>:
 8012c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c26:	2900      	cmp	r1, #0
 8012c28:	d044      	beq.n	8012cb4 <_free_r+0x90>
 8012c2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c2e:	9001      	str	r0, [sp, #4]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	f1a1 0404 	sub.w	r4, r1, #4
 8012c36:	bfb8      	it	lt
 8012c38:	18e4      	addlt	r4, r4, r3
 8012c3a:	f000 fead 	bl	8013998 <__malloc_lock>
 8012c3e:	4a1e      	ldr	r2, [pc, #120]	; (8012cb8 <_free_r+0x94>)
 8012c40:	9801      	ldr	r0, [sp, #4]
 8012c42:	6813      	ldr	r3, [r2, #0]
 8012c44:	b933      	cbnz	r3, 8012c54 <_free_r+0x30>
 8012c46:	6063      	str	r3, [r4, #4]
 8012c48:	6014      	str	r4, [r2, #0]
 8012c4a:	b003      	add	sp, #12
 8012c4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c50:	f000 bea8 	b.w	80139a4 <__malloc_unlock>
 8012c54:	42a3      	cmp	r3, r4
 8012c56:	d908      	bls.n	8012c6a <_free_r+0x46>
 8012c58:	6825      	ldr	r5, [r4, #0]
 8012c5a:	1961      	adds	r1, r4, r5
 8012c5c:	428b      	cmp	r3, r1
 8012c5e:	bf01      	itttt	eq
 8012c60:	6819      	ldreq	r1, [r3, #0]
 8012c62:	685b      	ldreq	r3, [r3, #4]
 8012c64:	1949      	addeq	r1, r1, r5
 8012c66:	6021      	streq	r1, [r4, #0]
 8012c68:	e7ed      	b.n	8012c46 <_free_r+0x22>
 8012c6a:	461a      	mov	r2, r3
 8012c6c:	685b      	ldr	r3, [r3, #4]
 8012c6e:	b10b      	cbz	r3, 8012c74 <_free_r+0x50>
 8012c70:	42a3      	cmp	r3, r4
 8012c72:	d9fa      	bls.n	8012c6a <_free_r+0x46>
 8012c74:	6811      	ldr	r1, [r2, #0]
 8012c76:	1855      	adds	r5, r2, r1
 8012c78:	42a5      	cmp	r5, r4
 8012c7a:	d10b      	bne.n	8012c94 <_free_r+0x70>
 8012c7c:	6824      	ldr	r4, [r4, #0]
 8012c7e:	4421      	add	r1, r4
 8012c80:	1854      	adds	r4, r2, r1
 8012c82:	42a3      	cmp	r3, r4
 8012c84:	6011      	str	r1, [r2, #0]
 8012c86:	d1e0      	bne.n	8012c4a <_free_r+0x26>
 8012c88:	681c      	ldr	r4, [r3, #0]
 8012c8a:	685b      	ldr	r3, [r3, #4]
 8012c8c:	6053      	str	r3, [r2, #4]
 8012c8e:	4421      	add	r1, r4
 8012c90:	6011      	str	r1, [r2, #0]
 8012c92:	e7da      	b.n	8012c4a <_free_r+0x26>
 8012c94:	d902      	bls.n	8012c9c <_free_r+0x78>
 8012c96:	230c      	movs	r3, #12
 8012c98:	6003      	str	r3, [r0, #0]
 8012c9a:	e7d6      	b.n	8012c4a <_free_r+0x26>
 8012c9c:	6825      	ldr	r5, [r4, #0]
 8012c9e:	1961      	adds	r1, r4, r5
 8012ca0:	428b      	cmp	r3, r1
 8012ca2:	bf04      	itt	eq
 8012ca4:	6819      	ldreq	r1, [r3, #0]
 8012ca6:	685b      	ldreq	r3, [r3, #4]
 8012ca8:	6063      	str	r3, [r4, #4]
 8012caa:	bf04      	itt	eq
 8012cac:	1949      	addeq	r1, r1, r5
 8012cae:	6021      	streq	r1, [r4, #0]
 8012cb0:	6054      	str	r4, [r2, #4]
 8012cb2:	e7ca      	b.n	8012c4a <_free_r+0x26>
 8012cb4:	b003      	add	sp, #12
 8012cb6:	bd30      	pop	{r4, r5, pc}
 8012cb8:	2400e5ec 	.word	0x2400e5ec

08012cbc <sbrk_aligned>:
 8012cbc:	b570      	push	{r4, r5, r6, lr}
 8012cbe:	4e0e      	ldr	r6, [pc, #56]	; (8012cf8 <sbrk_aligned+0x3c>)
 8012cc0:	460c      	mov	r4, r1
 8012cc2:	6831      	ldr	r1, [r6, #0]
 8012cc4:	4605      	mov	r5, r0
 8012cc6:	b911      	cbnz	r1, 8012cce <sbrk_aligned+0x12>
 8012cc8:	f000 fb42 	bl	8013350 <_sbrk_r>
 8012ccc:	6030      	str	r0, [r6, #0]
 8012cce:	4621      	mov	r1, r4
 8012cd0:	4628      	mov	r0, r5
 8012cd2:	f000 fb3d 	bl	8013350 <_sbrk_r>
 8012cd6:	1c43      	adds	r3, r0, #1
 8012cd8:	d00a      	beq.n	8012cf0 <sbrk_aligned+0x34>
 8012cda:	1cc4      	adds	r4, r0, #3
 8012cdc:	f024 0403 	bic.w	r4, r4, #3
 8012ce0:	42a0      	cmp	r0, r4
 8012ce2:	d007      	beq.n	8012cf4 <sbrk_aligned+0x38>
 8012ce4:	1a21      	subs	r1, r4, r0
 8012ce6:	4628      	mov	r0, r5
 8012ce8:	f000 fb32 	bl	8013350 <_sbrk_r>
 8012cec:	3001      	adds	r0, #1
 8012cee:	d101      	bne.n	8012cf4 <sbrk_aligned+0x38>
 8012cf0:	f04f 34ff 	mov.w	r4, #4294967295
 8012cf4:	4620      	mov	r0, r4
 8012cf6:	bd70      	pop	{r4, r5, r6, pc}
 8012cf8:	2400e5f0 	.word	0x2400e5f0

08012cfc <_malloc_r>:
 8012cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d00:	1ccd      	adds	r5, r1, #3
 8012d02:	f025 0503 	bic.w	r5, r5, #3
 8012d06:	3508      	adds	r5, #8
 8012d08:	2d0c      	cmp	r5, #12
 8012d0a:	bf38      	it	cc
 8012d0c:	250c      	movcc	r5, #12
 8012d0e:	2d00      	cmp	r5, #0
 8012d10:	4607      	mov	r7, r0
 8012d12:	db01      	blt.n	8012d18 <_malloc_r+0x1c>
 8012d14:	42a9      	cmp	r1, r5
 8012d16:	d905      	bls.n	8012d24 <_malloc_r+0x28>
 8012d18:	230c      	movs	r3, #12
 8012d1a:	603b      	str	r3, [r7, #0]
 8012d1c:	2600      	movs	r6, #0
 8012d1e:	4630      	mov	r0, r6
 8012d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d24:	4e2e      	ldr	r6, [pc, #184]	; (8012de0 <_malloc_r+0xe4>)
 8012d26:	f000 fe37 	bl	8013998 <__malloc_lock>
 8012d2a:	6833      	ldr	r3, [r6, #0]
 8012d2c:	461c      	mov	r4, r3
 8012d2e:	bb34      	cbnz	r4, 8012d7e <_malloc_r+0x82>
 8012d30:	4629      	mov	r1, r5
 8012d32:	4638      	mov	r0, r7
 8012d34:	f7ff ffc2 	bl	8012cbc <sbrk_aligned>
 8012d38:	1c43      	adds	r3, r0, #1
 8012d3a:	4604      	mov	r4, r0
 8012d3c:	d14d      	bne.n	8012dda <_malloc_r+0xde>
 8012d3e:	6834      	ldr	r4, [r6, #0]
 8012d40:	4626      	mov	r6, r4
 8012d42:	2e00      	cmp	r6, #0
 8012d44:	d140      	bne.n	8012dc8 <_malloc_r+0xcc>
 8012d46:	6823      	ldr	r3, [r4, #0]
 8012d48:	4631      	mov	r1, r6
 8012d4a:	4638      	mov	r0, r7
 8012d4c:	eb04 0803 	add.w	r8, r4, r3
 8012d50:	f000 fafe 	bl	8013350 <_sbrk_r>
 8012d54:	4580      	cmp	r8, r0
 8012d56:	d13a      	bne.n	8012dce <_malloc_r+0xd2>
 8012d58:	6821      	ldr	r1, [r4, #0]
 8012d5a:	3503      	adds	r5, #3
 8012d5c:	1a6d      	subs	r5, r5, r1
 8012d5e:	f025 0503 	bic.w	r5, r5, #3
 8012d62:	3508      	adds	r5, #8
 8012d64:	2d0c      	cmp	r5, #12
 8012d66:	bf38      	it	cc
 8012d68:	250c      	movcc	r5, #12
 8012d6a:	4629      	mov	r1, r5
 8012d6c:	4638      	mov	r0, r7
 8012d6e:	f7ff ffa5 	bl	8012cbc <sbrk_aligned>
 8012d72:	3001      	adds	r0, #1
 8012d74:	d02b      	beq.n	8012dce <_malloc_r+0xd2>
 8012d76:	6823      	ldr	r3, [r4, #0]
 8012d78:	442b      	add	r3, r5
 8012d7a:	6023      	str	r3, [r4, #0]
 8012d7c:	e00e      	b.n	8012d9c <_malloc_r+0xa0>
 8012d7e:	6822      	ldr	r2, [r4, #0]
 8012d80:	1b52      	subs	r2, r2, r5
 8012d82:	d41e      	bmi.n	8012dc2 <_malloc_r+0xc6>
 8012d84:	2a0b      	cmp	r2, #11
 8012d86:	d916      	bls.n	8012db6 <_malloc_r+0xba>
 8012d88:	1961      	adds	r1, r4, r5
 8012d8a:	42a3      	cmp	r3, r4
 8012d8c:	6025      	str	r5, [r4, #0]
 8012d8e:	bf18      	it	ne
 8012d90:	6059      	strne	r1, [r3, #4]
 8012d92:	6863      	ldr	r3, [r4, #4]
 8012d94:	bf08      	it	eq
 8012d96:	6031      	streq	r1, [r6, #0]
 8012d98:	5162      	str	r2, [r4, r5]
 8012d9a:	604b      	str	r3, [r1, #4]
 8012d9c:	4638      	mov	r0, r7
 8012d9e:	f104 060b 	add.w	r6, r4, #11
 8012da2:	f000 fdff 	bl	80139a4 <__malloc_unlock>
 8012da6:	f026 0607 	bic.w	r6, r6, #7
 8012daa:	1d23      	adds	r3, r4, #4
 8012dac:	1af2      	subs	r2, r6, r3
 8012dae:	d0b6      	beq.n	8012d1e <_malloc_r+0x22>
 8012db0:	1b9b      	subs	r3, r3, r6
 8012db2:	50a3      	str	r3, [r4, r2]
 8012db4:	e7b3      	b.n	8012d1e <_malloc_r+0x22>
 8012db6:	6862      	ldr	r2, [r4, #4]
 8012db8:	42a3      	cmp	r3, r4
 8012dba:	bf0c      	ite	eq
 8012dbc:	6032      	streq	r2, [r6, #0]
 8012dbe:	605a      	strne	r2, [r3, #4]
 8012dc0:	e7ec      	b.n	8012d9c <_malloc_r+0xa0>
 8012dc2:	4623      	mov	r3, r4
 8012dc4:	6864      	ldr	r4, [r4, #4]
 8012dc6:	e7b2      	b.n	8012d2e <_malloc_r+0x32>
 8012dc8:	4634      	mov	r4, r6
 8012dca:	6876      	ldr	r6, [r6, #4]
 8012dcc:	e7b9      	b.n	8012d42 <_malloc_r+0x46>
 8012dce:	230c      	movs	r3, #12
 8012dd0:	603b      	str	r3, [r7, #0]
 8012dd2:	4638      	mov	r0, r7
 8012dd4:	f000 fde6 	bl	80139a4 <__malloc_unlock>
 8012dd8:	e7a1      	b.n	8012d1e <_malloc_r+0x22>
 8012dda:	6025      	str	r5, [r4, #0]
 8012ddc:	e7de      	b.n	8012d9c <_malloc_r+0xa0>
 8012dde:	bf00      	nop
 8012de0:	2400e5ec 	.word	0x2400e5ec

08012de4 <__ssputs_r>:
 8012de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012de8:	688e      	ldr	r6, [r1, #8]
 8012dea:	429e      	cmp	r6, r3
 8012dec:	4682      	mov	sl, r0
 8012dee:	460c      	mov	r4, r1
 8012df0:	4690      	mov	r8, r2
 8012df2:	461f      	mov	r7, r3
 8012df4:	d838      	bhi.n	8012e68 <__ssputs_r+0x84>
 8012df6:	898a      	ldrh	r2, [r1, #12]
 8012df8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012dfc:	d032      	beq.n	8012e64 <__ssputs_r+0x80>
 8012dfe:	6825      	ldr	r5, [r4, #0]
 8012e00:	6909      	ldr	r1, [r1, #16]
 8012e02:	eba5 0901 	sub.w	r9, r5, r1
 8012e06:	6965      	ldr	r5, [r4, #20]
 8012e08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012e0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012e10:	3301      	adds	r3, #1
 8012e12:	444b      	add	r3, r9
 8012e14:	106d      	asrs	r5, r5, #1
 8012e16:	429d      	cmp	r5, r3
 8012e18:	bf38      	it	cc
 8012e1a:	461d      	movcc	r5, r3
 8012e1c:	0553      	lsls	r3, r2, #21
 8012e1e:	d531      	bpl.n	8012e84 <__ssputs_r+0xa0>
 8012e20:	4629      	mov	r1, r5
 8012e22:	f7ff ff6b 	bl	8012cfc <_malloc_r>
 8012e26:	4606      	mov	r6, r0
 8012e28:	b950      	cbnz	r0, 8012e40 <__ssputs_r+0x5c>
 8012e2a:	230c      	movs	r3, #12
 8012e2c:	f8ca 3000 	str.w	r3, [sl]
 8012e30:	89a3      	ldrh	r3, [r4, #12]
 8012e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e36:	81a3      	strh	r3, [r4, #12]
 8012e38:	f04f 30ff 	mov.w	r0, #4294967295
 8012e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e40:	6921      	ldr	r1, [r4, #16]
 8012e42:	464a      	mov	r2, r9
 8012e44:	f7fd ff36 	bl	8010cb4 <memcpy>
 8012e48:	89a3      	ldrh	r3, [r4, #12]
 8012e4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e52:	81a3      	strh	r3, [r4, #12]
 8012e54:	6126      	str	r6, [r4, #16]
 8012e56:	6165      	str	r5, [r4, #20]
 8012e58:	444e      	add	r6, r9
 8012e5a:	eba5 0509 	sub.w	r5, r5, r9
 8012e5e:	6026      	str	r6, [r4, #0]
 8012e60:	60a5      	str	r5, [r4, #8]
 8012e62:	463e      	mov	r6, r7
 8012e64:	42be      	cmp	r6, r7
 8012e66:	d900      	bls.n	8012e6a <__ssputs_r+0x86>
 8012e68:	463e      	mov	r6, r7
 8012e6a:	6820      	ldr	r0, [r4, #0]
 8012e6c:	4632      	mov	r2, r6
 8012e6e:	4641      	mov	r1, r8
 8012e70:	f000 fd78 	bl	8013964 <memmove>
 8012e74:	68a3      	ldr	r3, [r4, #8]
 8012e76:	1b9b      	subs	r3, r3, r6
 8012e78:	60a3      	str	r3, [r4, #8]
 8012e7a:	6823      	ldr	r3, [r4, #0]
 8012e7c:	4433      	add	r3, r6
 8012e7e:	6023      	str	r3, [r4, #0]
 8012e80:	2000      	movs	r0, #0
 8012e82:	e7db      	b.n	8012e3c <__ssputs_r+0x58>
 8012e84:	462a      	mov	r2, r5
 8012e86:	f000 fd93 	bl	80139b0 <_realloc_r>
 8012e8a:	4606      	mov	r6, r0
 8012e8c:	2800      	cmp	r0, #0
 8012e8e:	d1e1      	bne.n	8012e54 <__ssputs_r+0x70>
 8012e90:	6921      	ldr	r1, [r4, #16]
 8012e92:	4650      	mov	r0, sl
 8012e94:	f7ff fec6 	bl	8012c24 <_free_r>
 8012e98:	e7c7      	b.n	8012e2a <__ssputs_r+0x46>
	...

08012e9c <_svfiprintf_r>:
 8012e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ea0:	4698      	mov	r8, r3
 8012ea2:	898b      	ldrh	r3, [r1, #12]
 8012ea4:	061b      	lsls	r3, r3, #24
 8012ea6:	b09d      	sub	sp, #116	; 0x74
 8012ea8:	4607      	mov	r7, r0
 8012eaa:	460d      	mov	r5, r1
 8012eac:	4614      	mov	r4, r2
 8012eae:	d50e      	bpl.n	8012ece <_svfiprintf_r+0x32>
 8012eb0:	690b      	ldr	r3, [r1, #16]
 8012eb2:	b963      	cbnz	r3, 8012ece <_svfiprintf_r+0x32>
 8012eb4:	2140      	movs	r1, #64	; 0x40
 8012eb6:	f7ff ff21 	bl	8012cfc <_malloc_r>
 8012eba:	6028      	str	r0, [r5, #0]
 8012ebc:	6128      	str	r0, [r5, #16]
 8012ebe:	b920      	cbnz	r0, 8012eca <_svfiprintf_r+0x2e>
 8012ec0:	230c      	movs	r3, #12
 8012ec2:	603b      	str	r3, [r7, #0]
 8012ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ec8:	e0d1      	b.n	801306e <_svfiprintf_r+0x1d2>
 8012eca:	2340      	movs	r3, #64	; 0x40
 8012ecc:	616b      	str	r3, [r5, #20]
 8012ece:	2300      	movs	r3, #0
 8012ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8012ed2:	2320      	movs	r3, #32
 8012ed4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012ed8:	f8cd 800c 	str.w	r8, [sp, #12]
 8012edc:	2330      	movs	r3, #48	; 0x30
 8012ede:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013088 <_svfiprintf_r+0x1ec>
 8012ee2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ee6:	f04f 0901 	mov.w	r9, #1
 8012eea:	4623      	mov	r3, r4
 8012eec:	469a      	mov	sl, r3
 8012eee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ef2:	b10a      	cbz	r2, 8012ef8 <_svfiprintf_r+0x5c>
 8012ef4:	2a25      	cmp	r2, #37	; 0x25
 8012ef6:	d1f9      	bne.n	8012eec <_svfiprintf_r+0x50>
 8012ef8:	ebba 0b04 	subs.w	fp, sl, r4
 8012efc:	d00b      	beq.n	8012f16 <_svfiprintf_r+0x7a>
 8012efe:	465b      	mov	r3, fp
 8012f00:	4622      	mov	r2, r4
 8012f02:	4629      	mov	r1, r5
 8012f04:	4638      	mov	r0, r7
 8012f06:	f7ff ff6d 	bl	8012de4 <__ssputs_r>
 8012f0a:	3001      	adds	r0, #1
 8012f0c:	f000 80aa 	beq.w	8013064 <_svfiprintf_r+0x1c8>
 8012f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f12:	445a      	add	r2, fp
 8012f14:	9209      	str	r2, [sp, #36]	; 0x24
 8012f16:	f89a 3000 	ldrb.w	r3, [sl]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	f000 80a2 	beq.w	8013064 <_svfiprintf_r+0x1c8>
 8012f20:	2300      	movs	r3, #0
 8012f22:	f04f 32ff 	mov.w	r2, #4294967295
 8012f26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f2a:	f10a 0a01 	add.w	sl, sl, #1
 8012f2e:	9304      	str	r3, [sp, #16]
 8012f30:	9307      	str	r3, [sp, #28]
 8012f32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012f36:	931a      	str	r3, [sp, #104]	; 0x68
 8012f38:	4654      	mov	r4, sl
 8012f3a:	2205      	movs	r2, #5
 8012f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f40:	4851      	ldr	r0, [pc, #324]	; (8013088 <_svfiprintf_r+0x1ec>)
 8012f42:	f7ed f9d5 	bl	80002f0 <memchr>
 8012f46:	9a04      	ldr	r2, [sp, #16]
 8012f48:	b9d8      	cbnz	r0, 8012f82 <_svfiprintf_r+0xe6>
 8012f4a:	06d0      	lsls	r0, r2, #27
 8012f4c:	bf44      	itt	mi
 8012f4e:	2320      	movmi	r3, #32
 8012f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f54:	0711      	lsls	r1, r2, #28
 8012f56:	bf44      	itt	mi
 8012f58:	232b      	movmi	r3, #43	; 0x2b
 8012f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8012f62:	2b2a      	cmp	r3, #42	; 0x2a
 8012f64:	d015      	beq.n	8012f92 <_svfiprintf_r+0xf6>
 8012f66:	9a07      	ldr	r2, [sp, #28]
 8012f68:	4654      	mov	r4, sl
 8012f6a:	2000      	movs	r0, #0
 8012f6c:	f04f 0c0a 	mov.w	ip, #10
 8012f70:	4621      	mov	r1, r4
 8012f72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f76:	3b30      	subs	r3, #48	; 0x30
 8012f78:	2b09      	cmp	r3, #9
 8012f7a:	d94e      	bls.n	801301a <_svfiprintf_r+0x17e>
 8012f7c:	b1b0      	cbz	r0, 8012fac <_svfiprintf_r+0x110>
 8012f7e:	9207      	str	r2, [sp, #28]
 8012f80:	e014      	b.n	8012fac <_svfiprintf_r+0x110>
 8012f82:	eba0 0308 	sub.w	r3, r0, r8
 8012f86:	fa09 f303 	lsl.w	r3, r9, r3
 8012f8a:	4313      	orrs	r3, r2
 8012f8c:	9304      	str	r3, [sp, #16]
 8012f8e:	46a2      	mov	sl, r4
 8012f90:	e7d2      	b.n	8012f38 <_svfiprintf_r+0x9c>
 8012f92:	9b03      	ldr	r3, [sp, #12]
 8012f94:	1d19      	adds	r1, r3, #4
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	9103      	str	r1, [sp, #12]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	bfbb      	ittet	lt
 8012f9e:	425b      	neglt	r3, r3
 8012fa0:	f042 0202 	orrlt.w	r2, r2, #2
 8012fa4:	9307      	strge	r3, [sp, #28]
 8012fa6:	9307      	strlt	r3, [sp, #28]
 8012fa8:	bfb8      	it	lt
 8012faa:	9204      	strlt	r2, [sp, #16]
 8012fac:	7823      	ldrb	r3, [r4, #0]
 8012fae:	2b2e      	cmp	r3, #46	; 0x2e
 8012fb0:	d10c      	bne.n	8012fcc <_svfiprintf_r+0x130>
 8012fb2:	7863      	ldrb	r3, [r4, #1]
 8012fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8012fb6:	d135      	bne.n	8013024 <_svfiprintf_r+0x188>
 8012fb8:	9b03      	ldr	r3, [sp, #12]
 8012fba:	1d1a      	adds	r2, r3, #4
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	9203      	str	r2, [sp, #12]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	bfb8      	it	lt
 8012fc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8012fc8:	3402      	adds	r4, #2
 8012fca:	9305      	str	r3, [sp, #20]
 8012fcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013098 <_svfiprintf_r+0x1fc>
 8012fd0:	7821      	ldrb	r1, [r4, #0]
 8012fd2:	2203      	movs	r2, #3
 8012fd4:	4650      	mov	r0, sl
 8012fd6:	f7ed f98b 	bl	80002f0 <memchr>
 8012fda:	b140      	cbz	r0, 8012fee <_svfiprintf_r+0x152>
 8012fdc:	2340      	movs	r3, #64	; 0x40
 8012fde:	eba0 000a 	sub.w	r0, r0, sl
 8012fe2:	fa03 f000 	lsl.w	r0, r3, r0
 8012fe6:	9b04      	ldr	r3, [sp, #16]
 8012fe8:	4303      	orrs	r3, r0
 8012fea:	3401      	adds	r4, #1
 8012fec:	9304      	str	r3, [sp, #16]
 8012fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ff2:	4826      	ldr	r0, [pc, #152]	; (801308c <_svfiprintf_r+0x1f0>)
 8012ff4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ff8:	2206      	movs	r2, #6
 8012ffa:	f7ed f979 	bl	80002f0 <memchr>
 8012ffe:	2800      	cmp	r0, #0
 8013000:	d038      	beq.n	8013074 <_svfiprintf_r+0x1d8>
 8013002:	4b23      	ldr	r3, [pc, #140]	; (8013090 <_svfiprintf_r+0x1f4>)
 8013004:	bb1b      	cbnz	r3, 801304e <_svfiprintf_r+0x1b2>
 8013006:	9b03      	ldr	r3, [sp, #12]
 8013008:	3307      	adds	r3, #7
 801300a:	f023 0307 	bic.w	r3, r3, #7
 801300e:	3308      	adds	r3, #8
 8013010:	9303      	str	r3, [sp, #12]
 8013012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013014:	4433      	add	r3, r6
 8013016:	9309      	str	r3, [sp, #36]	; 0x24
 8013018:	e767      	b.n	8012eea <_svfiprintf_r+0x4e>
 801301a:	fb0c 3202 	mla	r2, ip, r2, r3
 801301e:	460c      	mov	r4, r1
 8013020:	2001      	movs	r0, #1
 8013022:	e7a5      	b.n	8012f70 <_svfiprintf_r+0xd4>
 8013024:	2300      	movs	r3, #0
 8013026:	3401      	adds	r4, #1
 8013028:	9305      	str	r3, [sp, #20]
 801302a:	4619      	mov	r1, r3
 801302c:	f04f 0c0a 	mov.w	ip, #10
 8013030:	4620      	mov	r0, r4
 8013032:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013036:	3a30      	subs	r2, #48	; 0x30
 8013038:	2a09      	cmp	r2, #9
 801303a:	d903      	bls.n	8013044 <_svfiprintf_r+0x1a8>
 801303c:	2b00      	cmp	r3, #0
 801303e:	d0c5      	beq.n	8012fcc <_svfiprintf_r+0x130>
 8013040:	9105      	str	r1, [sp, #20]
 8013042:	e7c3      	b.n	8012fcc <_svfiprintf_r+0x130>
 8013044:	fb0c 2101 	mla	r1, ip, r1, r2
 8013048:	4604      	mov	r4, r0
 801304a:	2301      	movs	r3, #1
 801304c:	e7f0      	b.n	8013030 <_svfiprintf_r+0x194>
 801304e:	ab03      	add	r3, sp, #12
 8013050:	9300      	str	r3, [sp, #0]
 8013052:	462a      	mov	r2, r5
 8013054:	4b0f      	ldr	r3, [pc, #60]	; (8013094 <_svfiprintf_r+0x1f8>)
 8013056:	a904      	add	r1, sp, #16
 8013058:	4638      	mov	r0, r7
 801305a:	f7fd fed1 	bl	8010e00 <_printf_float>
 801305e:	1c42      	adds	r2, r0, #1
 8013060:	4606      	mov	r6, r0
 8013062:	d1d6      	bne.n	8013012 <_svfiprintf_r+0x176>
 8013064:	89ab      	ldrh	r3, [r5, #12]
 8013066:	065b      	lsls	r3, r3, #25
 8013068:	f53f af2c 	bmi.w	8012ec4 <_svfiprintf_r+0x28>
 801306c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801306e:	b01d      	add	sp, #116	; 0x74
 8013070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013074:	ab03      	add	r3, sp, #12
 8013076:	9300      	str	r3, [sp, #0]
 8013078:	462a      	mov	r2, r5
 801307a:	4b06      	ldr	r3, [pc, #24]	; (8013094 <_svfiprintf_r+0x1f8>)
 801307c:	a904      	add	r1, sp, #16
 801307e:	4638      	mov	r0, r7
 8013080:	f7fe f94a 	bl	8011318 <_printf_i>
 8013084:	e7eb      	b.n	801305e <_svfiprintf_r+0x1c2>
 8013086:	bf00      	nop
 8013088:	0801e544 	.word	0x0801e544
 801308c:	0801e54e 	.word	0x0801e54e
 8013090:	08010e01 	.word	0x08010e01
 8013094:	08012de5 	.word	0x08012de5
 8013098:	0801e54a 	.word	0x0801e54a

0801309c <__sfputc_r>:
 801309c:	6893      	ldr	r3, [r2, #8]
 801309e:	3b01      	subs	r3, #1
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	b410      	push	{r4}
 80130a4:	6093      	str	r3, [r2, #8]
 80130a6:	da08      	bge.n	80130ba <__sfputc_r+0x1e>
 80130a8:	6994      	ldr	r4, [r2, #24]
 80130aa:	42a3      	cmp	r3, r4
 80130ac:	db01      	blt.n	80130b2 <__sfputc_r+0x16>
 80130ae:	290a      	cmp	r1, #10
 80130b0:	d103      	bne.n	80130ba <__sfputc_r+0x1e>
 80130b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130b6:	f000 b95b 	b.w	8013370 <__swbuf_r>
 80130ba:	6813      	ldr	r3, [r2, #0]
 80130bc:	1c58      	adds	r0, r3, #1
 80130be:	6010      	str	r0, [r2, #0]
 80130c0:	7019      	strb	r1, [r3, #0]
 80130c2:	4608      	mov	r0, r1
 80130c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130c8:	4770      	bx	lr

080130ca <__sfputs_r>:
 80130ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130cc:	4606      	mov	r6, r0
 80130ce:	460f      	mov	r7, r1
 80130d0:	4614      	mov	r4, r2
 80130d2:	18d5      	adds	r5, r2, r3
 80130d4:	42ac      	cmp	r4, r5
 80130d6:	d101      	bne.n	80130dc <__sfputs_r+0x12>
 80130d8:	2000      	movs	r0, #0
 80130da:	e007      	b.n	80130ec <__sfputs_r+0x22>
 80130dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130e0:	463a      	mov	r2, r7
 80130e2:	4630      	mov	r0, r6
 80130e4:	f7ff ffda 	bl	801309c <__sfputc_r>
 80130e8:	1c43      	adds	r3, r0, #1
 80130ea:	d1f3      	bne.n	80130d4 <__sfputs_r+0xa>
 80130ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080130f0 <_vfiprintf_r>:
 80130f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f4:	460d      	mov	r5, r1
 80130f6:	b09d      	sub	sp, #116	; 0x74
 80130f8:	4614      	mov	r4, r2
 80130fa:	4698      	mov	r8, r3
 80130fc:	4606      	mov	r6, r0
 80130fe:	b118      	cbz	r0, 8013108 <_vfiprintf_r+0x18>
 8013100:	6983      	ldr	r3, [r0, #24]
 8013102:	b90b      	cbnz	r3, 8013108 <_vfiprintf_r+0x18>
 8013104:	f000 fb16 	bl	8013734 <__sinit>
 8013108:	4b89      	ldr	r3, [pc, #548]	; (8013330 <_vfiprintf_r+0x240>)
 801310a:	429d      	cmp	r5, r3
 801310c:	d11b      	bne.n	8013146 <_vfiprintf_r+0x56>
 801310e:	6875      	ldr	r5, [r6, #4]
 8013110:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013112:	07d9      	lsls	r1, r3, #31
 8013114:	d405      	bmi.n	8013122 <_vfiprintf_r+0x32>
 8013116:	89ab      	ldrh	r3, [r5, #12]
 8013118:	059a      	lsls	r2, r3, #22
 801311a:	d402      	bmi.n	8013122 <_vfiprintf_r+0x32>
 801311c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801311e:	f000 fba7 	bl	8013870 <__retarget_lock_acquire_recursive>
 8013122:	89ab      	ldrh	r3, [r5, #12]
 8013124:	071b      	lsls	r3, r3, #28
 8013126:	d501      	bpl.n	801312c <_vfiprintf_r+0x3c>
 8013128:	692b      	ldr	r3, [r5, #16]
 801312a:	b9eb      	cbnz	r3, 8013168 <_vfiprintf_r+0x78>
 801312c:	4629      	mov	r1, r5
 801312e:	4630      	mov	r0, r6
 8013130:	f000 f970 	bl	8013414 <__swsetup_r>
 8013134:	b1c0      	cbz	r0, 8013168 <_vfiprintf_r+0x78>
 8013136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013138:	07dc      	lsls	r4, r3, #31
 801313a:	d50e      	bpl.n	801315a <_vfiprintf_r+0x6a>
 801313c:	f04f 30ff 	mov.w	r0, #4294967295
 8013140:	b01d      	add	sp, #116	; 0x74
 8013142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013146:	4b7b      	ldr	r3, [pc, #492]	; (8013334 <_vfiprintf_r+0x244>)
 8013148:	429d      	cmp	r5, r3
 801314a:	d101      	bne.n	8013150 <_vfiprintf_r+0x60>
 801314c:	68b5      	ldr	r5, [r6, #8]
 801314e:	e7df      	b.n	8013110 <_vfiprintf_r+0x20>
 8013150:	4b79      	ldr	r3, [pc, #484]	; (8013338 <_vfiprintf_r+0x248>)
 8013152:	429d      	cmp	r5, r3
 8013154:	bf08      	it	eq
 8013156:	68f5      	ldreq	r5, [r6, #12]
 8013158:	e7da      	b.n	8013110 <_vfiprintf_r+0x20>
 801315a:	89ab      	ldrh	r3, [r5, #12]
 801315c:	0598      	lsls	r0, r3, #22
 801315e:	d4ed      	bmi.n	801313c <_vfiprintf_r+0x4c>
 8013160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013162:	f000 fb86 	bl	8013872 <__retarget_lock_release_recursive>
 8013166:	e7e9      	b.n	801313c <_vfiprintf_r+0x4c>
 8013168:	2300      	movs	r3, #0
 801316a:	9309      	str	r3, [sp, #36]	; 0x24
 801316c:	2320      	movs	r3, #32
 801316e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013172:	f8cd 800c 	str.w	r8, [sp, #12]
 8013176:	2330      	movs	r3, #48	; 0x30
 8013178:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801333c <_vfiprintf_r+0x24c>
 801317c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013180:	f04f 0901 	mov.w	r9, #1
 8013184:	4623      	mov	r3, r4
 8013186:	469a      	mov	sl, r3
 8013188:	f813 2b01 	ldrb.w	r2, [r3], #1
 801318c:	b10a      	cbz	r2, 8013192 <_vfiprintf_r+0xa2>
 801318e:	2a25      	cmp	r2, #37	; 0x25
 8013190:	d1f9      	bne.n	8013186 <_vfiprintf_r+0x96>
 8013192:	ebba 0b04 	subs.w	fp, sl, r4
 8013196:	d00b      	beq.n	80131b0 <_vfiprintf_r+0xc0>
 8013198:	465b      	mov	r3, fp
 801319a:	4622      	mov	r2, r4
 801319c:	4629      	mov	r1, r5
 801319e:	4630      	mov	r0, r6
 80131a0:	f7ff ff93 	bl	80130ca <__sfputs_r>
 80131a4:	3001      	adds	r0, #1
 80131a6:	f000 80aa 	beq.w	80132fe <_vfiprintf_r+0x20e>
 80131aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80131ac:	445a      	add	r2, fp
 80131ae:	9209      	str	r2, [sp, #36]	; 0x24
 80131b0:	f89a 3000 	ldrb.w	r3, [sl]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	f000 80a2 	beq.w	80132fe <_vfiprintf_r+0x20e>
 80131ba:	2300      	movs	r3, #0
 80131bc:	f04f 32ff 	mov.w	r2, #4294967295
 80131c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131c4:	f10a 0a01 	add.w	sl, sl, #1
 80131c8:	9304      	str	r3, [sp, #16]
 80131ca:	9307      	str	r3, [sp, #28]
 80131cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80131d0:	931a      	str	r3, [sp, #104]	; 0x68
 80131d2:	4654      	mov	r4, sl
 80131d4:	2205      	movs	r2, #5
 80131d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131da:	4858      	ldr	r0, [pc, #352]	; (801333c <_vfiprintf_r+0x24c>)
 80131dc:	f7ed f888 	bl	80002f0 <memchr>
 80131e0:	9a04      	ldr	r2, [sp, #16]
 80131e2:	b9d8      	cbnz	r0, 801321c <_vfiprintf_r+0x12c>
 80131e4:	06d1      	lsls	r1, r2, #27
 80131e6:	bf44      	itt	mi
 80131e8:	2320      	movmi	r3, #32
 80131ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80131ee:	0713      	lsls	r3, r2, #28
 80131f0:	bf44      	itt	mi
 80131f2:	232b      	movmi	r3, #43	; 0x2b
 80131f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80131f8:	f89a 3000 	ldrb.w	r3, [sl]
 80131fc:	2b2a      	cmp	r3, #42	; 0x2a
 80131fe:	d015      	beq.n	801322c <_vfiprintf_r+0x13c>
 8013200:	9a07      	ldr	r2, [sp, #28]
 8013202:	4654      	mov	r4, sl
 8013204:	2000      	movs	r0, #0
 8013206:	f04f 0c0a 	mov.w	ip, #10
 801320a:	4621      	mov	r1, r4
 801320c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013210:	3b30      	subs	r3, #48	; 0x30
 8013212:	2b09      	cmp	r3, #9
 8013214:	d94e      	bls.n	80132b4 <_vfiprintf_r+0x1c4>
 8013216:	b1b0      	cbz	r0, 8013246 <_vfiprintf_r+0x156>
 8013218:	9207      	str	r2, [sp, #28]
 801321a:	e014      	b.n	8013246 <_vfiprintf_r+0x156>
 801321c:	eba0 0308 	sub.w	r3, r0, r8
 8013220:	fa09 f303 	lsl.w	r3, r9, r3
 8013224:	4313      	orrs	r3, r2
 8013226:	9304      	str	r3, [sp, #16]
 8013228:	46a2      	mov	sl, r4
 801322a:	e7d2      	b.n	80131d2 <_vfiprintf_r+0xe2>
 801322c:	9b03      	ldr	r3, [sp, #12]
 801322e:	1d19      	adds	r1, r3, #4
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	9103      	str	r1, [sp, #12]
 8013234:	2b00      	cmp	r3, #0
 8013236:	bfbb      	ittet	lt
 8013238:	425b      	neglt	r3, r3
 801323a:	f042 0202 	orrlt.w	r2, r2, #2
 801323e:	9307      	strge	r3, [sp, #28]
 8013240:	9307      	strlt	r3, [sp, #28]
 8013242:	bfb8      	it	lt
 8013244:	9204      	strlt	r2, [sp, #16]
 8013246:	7823      	ldrb	r3, [r4, #0]
 8013248:	2b2e      	cmp	r3, #46	; 0x2e
 801324a:	d10c      	bne.n	8013266 <_vfiprintf_r+0x176>
 801324c:	7863      	ldrb	r3, [r4, #1]
 801324e:	2b2a      	cmp	r3, #42	; 0x2a
 8013250:	d135      	bne.n	80132be <_vfiprintf_r+0x1ce>
 8013252:	9b03      	ldr	r3, [sp, #12]
 8013254:	1d1a      	adds	r2, r3, #4
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	9203      	str	r2, [sp, #12]
 801325a:	2b00      	cmp	r3, #0
 801325c:	bfb8      	it	lt
 801325e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013262:	3402      	adds	r4, #2
 8013264:	9305      	str	r3, [sp, #20]
 8013266:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801334c <_vfiprintf_r+0x25c>
 801326a:	7821      	ldrb	r1, [r4, #0]
 801326c:	2203      	movs	r2, #3
 801326e:	4650      	mov	r0, sl
 8013270:	f7ed f83e 	bl	80002f0 <memchr>
 8013274:	b140      	cbz	r0, 8013288 <_vfiprintf_r+0x198>
 8013276:	2340      	movs	r3, #64	; 0x40
 8013278:	eba0 000a 	sub.w	r0, r0, sl
 801327c:	fa03 f000 	lsl.w	r0, r3, r0
 8013280:	9b04      	ldr	r3, [sp, #16]
 8013282:	4303      	orrs	r3, r0
 8013284:	3401      	adds	r4, #1
 8013286:	9304      	str	r3, [sp, #16]
 8013288:	f814 1b01 	ldrb.w	r1, [r4], #1
 801328c:	482c      	ldr	r0, [pc, #176]	; (8013340 <_vfiprintf_r+0x250>)
 801328e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013292:	2206      	movs	r2, #6
 8013294:	f7ed f82c 	bl	80002f0 <memchr>
 8013298:	2800      	cmp	r0, #0
 801329a:	d03f      	beq.n	801331c <_vfiprintf_r+0x22c>
 801329c:	4b29      	ldr	r3, [pc, #164]	; (8013344 <_vfiprintf_r+0x254>)
 801329e:	bb1b      	cbnz	r3, 80132e8 <_vfiprintf_r+0x1f8>
 80132a0:	9b03      	ldr	r3, [sp, #12]
 80132a2:	3307      	adds	r3, #7
 80132a4:	f023 0307 	bic.w	r3, r3, #7
 80132a8:	3308      	adds	r3, #8
 80132aa:	9303      	str	r3, [sp, #12]
 80132ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132ae:	443b      	add	r3, r7
 80132b0:	9309      	str	r3, [sp, #36]	; 0x24
 80132b2:	e767      	b.n	8013184 <_vfiprintf_r+0x94>
 80132b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80132b8:	460c      	mov	r4, r1
 80132ba:	2001      	movs	r0, #1
 80132bc:	e7a5      	b.n	801320a <_vfiprintf_r+0x11a>
 80132be:	2300      	movs	r3, #0
 80132c0:	3401      	adds	r4, #1
 80132c2:	9305      	str	r3, [sp, #20]
 80132c4:	4619      	mov	r1, r3
 80132c6:	f04f 0c0a 	mov.w	ip, #10
 80132ca:	4620      	mov	r0, r4
 80132cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132d0:	3a30      	subs	r2, #48	; 0x30
 80132d2:	2a09      	cmp	r2, #9
 80132d4:	d903      	bls.n	80132de <_vfiprintf_r+0x1ee>
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d0c5      	beq.n	8013266 <_vfiprintf_r+0x176>
 80132da:	9105      	str	r1, [sp, #20]
 80132dc:	e7c3      	b.n	8013266 <_vfiprintf_r+0x176>
 80132de:	fb0c 2101 	mla	r1, ip, r1, r2
 80132e2:	4604      	mov	r4, r0
 80132e4:	2301      	movs	r3, #1
 80132e6:	e7f0      	b.n	80132ca <_vfiprintf_r+0x1da>
 80132e8:	ab03      	add	r3, sp, #12
 80132ea:	9300      	str	r3, [sp, #0]
 80132ec:	462a      	mov	r2, r5
 80132ee:	4b16      	ldr	r3, [pc, #88]	; (8013348 <_vfiprintf_r+0x258>)
 80132f0:	a904      	add	r1, sp, #16
 80132f2:	4630      	mov	r0, r6
 80132f4:	f7fd fd84 	bl	8010e00 <_printf_float>
 80132f8:	4607      	mov	r7, r0
 80132fa:	1c78      	adds	r0, r7, #1
 80132fc:	d1d6      	bne.n	80132ac <_vfiprintf_r+0x1bc>
 80132fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013300:	07d9      	lsls	r1, r3, #31
 8013302:	d405      	bmi.n	8013310 <_vfiprintf_r+0x220>
 8013304:	89ab      	ldrh	r3, [r5, #12]
 8013306:	059a      	lsls	r2, r3, #22
 8013308:	d402      	bmi.n	8013310 <_vfiprintf_r+0x220>
 801330a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801330c:	f000 fab1 	bl	8013872 <__retarget_lock_release_recursive>
 8013310:	89ab      	ldrh	r3, [r5, #12]
 8013312:	065b      	lsls	r3, r3, #25
 8013314:	f53f af12 	bmi.w	801313c <_vfiprintf_r+0x4c>
 8013318:	9809      	ldr	r0, [sp, #36]	; 0x24
 801331a:	e711      	b.n	8013140 <_vfiprintf_r+0x50>
 801331c:	ab03      	add	r3, sp, #12
 801331e:	9300      	str	r3, [sp, #0]
 8013320:	462a      	mov	r2, r5
 8013322:	4b09      	ldr	r3, [pc, #36]	; (8013348 <_vfiprintf_r+0x258>)
 8013324:	a904      	add	r1, sp, #16
 8013326:	4630      	mov	r0, r6
 8013328:	f7fd fff6 	bl	8011318 <_printf_i>
 801332c:	e7e4      	b.n	80132f8 <_vfiprintf_r+0x208>
 801332e:	bf00      	nop
 8013330:	0801e578 	.word	0x0801e578
 8013334:	0801e598 	.word	0x0801e598
 8013338:	0801e558 	.word	0x0801e558
 801333c:	0801e544 	.word	0x0801e544
 8013340:	0801e54e 	.word	0x0801e54e
 8013344:	08010e01 	.word	0x08010e01
 8013348:	080130cb 	.word	0x080130cb
 801334c:	0801e54a 	.word	0x0801e54a

08013350 <_sbrk_r>:
 8013350:	b538      	push	{r3, r4, r5, lr}
 8013352:	4d06      	ldr	r5, [pc, #24]	; (801336c <_sbrk_r+0x1c>)
 8013354:	2300      	movs	r3, #0
 8013356:	4604      	mov	r4, r0
 8013358:	4608      	mov	r0, r1
 801335a:	602b      	str	r3, [r5, #0]
 801335c:	f7f2 fbb8 	bl	8005ad0 <_sbrk>
 8013360:	1c43      	adds	r3, r0, #1
 8013362:	d102      	bne.n	801336a <_sbrk_r+0x1a>
 8013364:	682b      	ldr	r3, [r5, #0]
 8013366:	b103      	cbz	r3, 801336a <_sbrk_r+0x1a>
 8013368:	6023      	str	r3, [r4, #0]
 801336a:	bd38      	pop	{r3, r4, r5, pc}
 801336c:	2400e5f8 	.word	0x2400e5f8

08013370 <__swbuf_r>:
 8013370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013372:	460e      	mov	r6, r1
 8013374:	4614      	mov	r4, r2
 8013376:	4605      	mov	r5, r0
 8013378:	b118      	cbz	r0, 8013382 <__swbuf_r+0x12>
 801337a:	6983      	ldr	r3, [r0, #24]
 801337c:	b90b      	cbnz	r3, 8013382 <__swbuf_r+0x12>
 801337e:	f000 f9d9 	bl	8013734 <__sinit>
 8013382:	4b21      	ldr	r3, [pc, #132]	; (8013408 <__swbuf_r+0x98>)
 8013384:	429c      	cmp	r4, r3
 8013386:	d12b      	bne.n	80133e0 <__swbuf_r+0x70>
 8013388:	686c      	ldr	r4, [r5, #4]
 801338a:	69a3      	ldr	r3, [r4, #24]
 801338c:	60a3      	str	r3, [r4, #8]
 801338e:	89a3      	ldrh	r3, [r4, #12]
 8013390:	071a      	lsls	r2, r3, #28
 8013392:	d52f      	bpl.n	80133f4 <__swbuf_r+0x84>
 8013394:	6923      	ldr	r3, [r4, #16]
 8013396:	b36b      	cbz	r3, 80133f4 <__swbuf_r+0x84>
 8013398:	6923      	ldr	r3, [r4, #16]
 801339a:	6820      	ldr	r0, [r4, #0]
 801339c:	1ac0      	subs	r0, r0, r3
 801339e:	6963      	ldr	r3, [r4, #20]
 80133a0:	b2f6      	uxtb	r6, r6
 80133a2:	4283      	cmp	r3, r0
 80133a4:	4637      	mov	r7, r6
 80133a6:	dc04      	bgt.n	80133b2 <__swbuf_r+0x42>
 80133a8:	4621      	mov	r1, r4
 80133aa:	4628      	mov	r0, r5
 80133ac:	f000 f92e 	bl	801360c <_fflush_r>
 80133b0:	bb30      	cbnz	r0, 8013400 <__swbuf_r+0x90>
 80133b2:	68a3      	ldr	r3, [r4, #8]
 80133b4:	3b01      	subs	r3, #1
 80133b6:	60a3      	str	r3, [r4, #8]
 80133b8:	6823      	ldr	r3, [r4, #0]
 80133ba:	1c5a      	adds	r2, r3, #1
 80133bc:	6022      	str	r2, [r4, #0]
 80133be:	701e      	strb	r6, [r3, #0]
 80133c0:	6963      	ldr	r3, [r4, #20]
 80133c2:	3001      	adds	r0, #1
 80133c4:	4283      	cmp	r3, r0
 80133c6:	d004      	beq.n	80133d2 <__swbuf_r+0x62>
 80133c8:	89a3      	ldrh	r3, [r4, #12]
 80133ca:	07db      	lsls	r3, r3, #31
 80133cc:	d506      	bpl.n	80133dc <__swbuf_r+0x6c>
 80133ce:	2e0a      	cmp	r6, #10
 80133d0:	d104      	bne.n	80133dc <__swbuf_r+0x6c>
 80133d2:	4621      	mov	r1, r4
 80133d4:	4628      	mov	r0, r5
 80133d6:	f000 f919 	bl	801360c <_fflush_r>
 80133da:	b988      	cbnz	r0, 8013400 <__swbuf_r+0x90>
 80133dc:	4638      	mov	r0, r7
 80133de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133e0:	4b0a      	ldr	r3, [pc, #40]	; (801340c <__swbuf_r+0x9c>)
 80133e2:	429c      	cmp	r4, r3
 80133e4:	d101      	bne.n	80133ea <__swbuf_r+0x7a>
 80133e6:	68ac      	ldr	r4, [r5, #8]
 80133e8:	e7cf      	b.n	801338a <__swbuf_r+0x1a>
 80133ea:	4b09      	ldr	r3, [pc, #36]	; (8013410 <__swbuf_r+0xa0>)
 80133ec:	429c      	cmp	r4, r3
 80133ee:	bf08      	it	eq
 80133f0:	68ec      	ldreq	r4, [r5, #12]
 80133f2:	e7ca      	b.n	801338a <__swbuf_r+0x1a>
 80133f4:	4621      	mov	r1, r4
 80133f6:	4628      	mov	r0, r5
 80133f8:	f000 f80c 	bl	8013414 <__swsetup_r>
 80133fc:	2800      	cmp	r0, #0
 80133fe:	d0cb      	beq.n	8013398 <__swbuf_r+0x28>
 8013400:	f04f 37ff 	mov.w	r7, #4294967295
 8013404:	e7ea      	b.n	80133dc <__swbuf_r+0x6c>
 8013406:	bf00      	nop
 8013408:	0801e578 	.word	0x0801e578
 801340c:	0801e598 	.word	0x0801e598
 8013410:	0801e558 	.word	0x0801e558

08013414 <__swsetup_r>:
 8013414:	4b32      	ldr	r3, [pc, #200]	; (80134e0 <__swsetup_r+0xcc>)
 8013416:	b570      	push	{r4, r5, r6, lr}
 8013418:	681d      	ldr	r5, [r3, #0]
 801341a:	4606      	mov	r6, r0
 801341c:	460c      	mov	r4, r1
 801341e:	b125      	cbz	r5, 801342a <__swsetup_r+0x16>
 8013420:	69ab      	ldr	r3, [r5, #24]
 8013422:	b913      	cbnz	r3, 801342a <__swsetup_r+0x16>
 8013424:	4628      	mov	r0, r5
 8013426:	f000 f985 	bl	8013734 <__sinit>
 801342a:	4b2e      	ldr	r3, [pc, #184]	; (80134e4 <__swsetup_r+0xd0>)
 801342c:	429c      	cmp	r4, r3
 801342e:	d10f      	bne.n	8013450 <__swsetup_r+0x3c>
 8013430:	686c      	ldr	r4, [r5, #4]
 8013432:	89a3      	ldrh	r3, [r4, #12]
 8013434:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013438:	0719      	lsls	r1, r3, #28
 801343a:	d42c      	bmi.n	8013496 <__swsetup_r+0x82>
 801343c:	06dd      	lsls	r5, r3, #27
 801343e:	d411      	bmi.n	8013464 <__swsetup_r+0x50>
 8013440:	2309      	movs	r3, #9
 8013442:	6033      	str	r3, [r6, #0]
 8013444:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013448:	81a3      	strh	r3, [r4, #12]
 801344a:	f04f 30ff 	mov.w	r0, #4294967295
 801344e:	e03e      	b.n	80134ce <__swsetup_r+0xba>
 8013450:	4b25      	ldr	r3, [pc, #148]	; (80134e8 <__swsetup_r+0xd4>)
 8013452:	429c      	cmp	r4, r3
 8013454:	d101      	bne.n	801345a <__swsetup_r+0x46>
 8013456:	68ac      	ldr	r4, [r5, #8]
 8013458:	e7eb      	b.n	8013432 <__swsetup_r+0x1e>
 801345a:	4b24      	ldr	r3, [pc, #144]	; (80134ec <__swsetup_r+0xd8>)
 801345c:	429c      	cmp	r4, r3
 801345e:	bf08      	it	eq
 8013460:	68ec      	ldreq	r4, [r5, #12]
 8013462:	e7e6      	b.n	8013432 <__swsetup_r+0x1e>
 8013464:	0758      	lsls	r0, r3, #29
 8013466:	d512      	bpl.n	801348e <__swsetup_r+0x7a>
 8013468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801346a:	b141      	cbz	r1, 801347e <__swsetup_r+0x6a>
 801346c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013470:	4299      	cmp	r1, r3
 8013472:	d002      	beq.n	801347a <__swsetup_r+0x66>
 8013474:	4630      	mov	r0, r6
 8013476:	f7ff fbd5 	bl	8012c24 <_free_r>
 801347a:	2300      	movs	r3, #0
 801347c:	6363      	str	r3, [r4, #52]	; 0x34
 801347e:	89a3      	ldrh	r3, [r4, #12]
 8013480:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013484:	81a3      	strh	r3, [r4, #12]
 8013486:	2300      	movs	r3, #0
 8013488:	6063      	str	r3, [r4, #4]
 801348a:	6923      	ldr	r3, [r4, #16]
 801348c:	6023      	str	r3, [r4, #0]
 801348e:	89a3      	ldrh	r3, [r4, #12]
 8013490:	f043 0308 	orr.w	r3, r3, #8
 8013494:	81a3      	strh	r3, [r4, #12]
 8013496:	6923      	ldr	r3, [r4, #16]
 8013498:	b94b      	cbnz	r3, 80134ae <__swsetup_r+0x9a>
 801349a:	89a3      	ldrh	r3, [r4, #12]
 801349c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80134a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80134a4:	d003      	beq.n	80134ae <__swsetup_r+0x9a>
 80134a6:	4621      	mov	r1, r4
 80134a8:	4630      	mov	r0, r6
 80134aa:	f000 fa09 	bl	80138c0 <__smakebuf_r>
 80134ae:	89a0      	ldrh	r0, [r4, #12]
 80134b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80134b4:	f010 0301 	ands.w	r3, r0, #1
 80134b8:	d00a      	beq.n	80134d0 <__swsetup_r+0xbc>
 80134ba:	2300      	movs	r3, #0
 80134bc:	60a3      	str	r3, [r4, #8]
 80134be:	6963      	ldr	r3, [r4, #20]
 80134c0:	425b      	negs	r3, r3
 80134c2:	61a3      	str	r3, [r4, #24]
 80134c4:	6923      	ldr	r3, [r4, #16]
 80134c6:	b943      	cbnz	r3, 80134da <__swsetup_r+0xc6>
 80134c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80134cc:	d1ba      	bne.n	8013444 <__swsetup_r+0x30>
 80134ce:	bd70      	pop	{r4, r5, r6, pc}
 80134d0:	0781      	lsls	r1, r0, #30
 80134d2:	bf58      	it	pl
 80134d4:	6963      	ldrpl	r3, [r4, #20]
 80134d6:	60a3      	str	r3, [r4, #8]
 80134d8:	e7f4      	b.n	80134c4 <__swsetup_r+0xb0>
 80134da:	2000      	movs	r0, #0
 80134dc:	e7f7      	b.n	80134ce <__swsetup_r+0xba>
 80134de:	bf00      	nop
 80134e0:	24000414 	.word	0x24000414
 80134e4:	0801e578 	.word	0x0801e578
 80134e8:	0801e598 	.word	0x0801e598
 80134ec:	0801e558 	.word	0x0801e558

080134f0 <abort>:
 80134f0:	b508      	push	{r3, lr}
 80134f2:	2006      	movs	r0, #6
 80134f4:	f000 fab4 	bl	8013a60 <raise>
 80134f8:	2001      	movs	r0, #1
 80134fa:	f7f2 fab9 	bl	8005a70 <_exit>
	...

08013500 <__sflush_r>:
 8013500:	898a      	ldrh	r2, [r1, #12]
 8013502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013506:	4605      	mov	r5, r0
 8013508:	0710      	lsls	r0, r2, #28
 801350a:	460c      	mov	r4, r1
 801350c:	d458      	bmi.n	80135c0 <__sflush_r+0xc0>
 801350e:	684b      	ldr	r3, [r1, #4]
 8013510:	2b00      	cmp	r3, #0
 8013512:	dc05      	bgt.n	8013520 <__sflush_r+0x20>
 8013514:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013516:	2b00      	cmp	r3, #0
 8013518:	dc02      	bgt.n	8013520 <__sflush_r+0x20>
 801351a:	2000      	movs	r0, #0
 801351c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013520:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013522:	2e00      	cmp	r6, #0
 8013524:	d0f9      	beq.n	801351a <__sflush_r+0x1a>
 8013526:	2300      	movs	r3, #0
 8013528:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801352c:	682f      	ldr	r7, [r5, #0]
 801352e:	602b      	str	r3, [r5, #0]
 8013530:	d032      	beq.n	8013598 <__sflush_r+0x98>
 8013532:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013534:	89a3      	ldrh	r3, [r4, #12]
 8013536:	075a      	lsls	r2, r3, #29
 8013538:	d505      	bpl.n	8013546 <__sflush_r+0x46>
 801353a:	6863      	ldr	r3, [r4, #4]
 801353c:	1ac0      	subs	r0, r0, r3
 801353e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013540:	b10b      	cbz	r3, 8013546 <__sflush_r+0x46>
 8013542:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013544:	1ac0      	subs	r0, r0, r3
 8013546:	2300      	movs	r3, #0
 8013548:	4602      	mov	r2, r0
 801354a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801354c:	6a21      	ldr	r1, [r4, #32]
 801354e:	4628      	mov	r0, r5
 8013550:	47b0      	blx	r6
 8013552:	1c43      	adds	r3, r0, #1
 8013554:	89a3      	ldrh	r3, [r4, #12]
 8013556:	d106      	bne.n	8013566 <__sflush_r+0x66>
 8013558:	6829      	ldr	r1, [r5, #0]
 801355a:	291d      	cmp	r1, #29
 801355c:	d82c      	bhi.n	80135b8 <__sflush_r+0xb8>
 801355e:	4a2a      	ldr	r2, [pc, #168]	; (8013608 <__sflush_r+0x108>)
 8013560:	40ca      	lsrs	r2, r1
 8013562:	07d6      	lsls	r6, r2, #31
 8013564:	d528      	bpl.n	80135b8 <__sflush_r+0xb8>
 8013566:	2200      	movs	r2, #0
 8013568:	6062      	str	r2, [r4, #4]
 801356a:	04d9      	lsls	r1, r3, #19
 801356c:	6922      	ldr	r2, [r4, #16]
 801356e:	6022      	str	r2, [r4, #0]
 8013570:	d504      	bpl.n	801357c <__sflush_r+0x7c>
 8013572:	1c42      	adds	r2, r0, #1
 8013574:	d101      	bne.n	801357a <__sflush_r+0x7a>
 8013576:	682b      	ldr	r3, [r5, #0]
 8013578:	b903      	cbnz	r3, 801357c <__sflush_r+0x7c>
 801357a:	6560      	str	r0, [r4, #84]	; 0x54
 801357c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801357e:	602f      	str	r7, [r5, #0]
 8013580:	2900      	cmp	r1, #0
 8013582:	d0ca      	beq.n	801351a <__sflush_r+0x1a>
 8013584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013588:	4299      	cmp	r1, r3
 801358a:	d002      	beq.n	8013592 <__sflush_r+0x92>
 801358c:	4628      	mov	r0, r5
 801358e:	f7ff fb49 	bl	8012c24 <_free_r>
 8013592:	2000      	movs	r0, #0
 8013594:	6360      	str	r0, [r4, #52]	; 0x34
 8013596:	e7c1      	b.n	801351c <__sflush_r+0x1c>
 8013598:	6a21      	ldr	r1, [r4, #32]
 801359a:	2301      	movs	r3, #1
 801359c:	4628      	mov	r0, r5
 801359e:	47b0      	blx	r6
 80135a0:	1c41      	adds	r1, r0, #1
 80135a2:	d1c7      	bne.n	8013534 <__sflush_r+0x34>
 80135a4:	682b      	ldr	r3, [r5, #0]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d0c4      	beq.n	8013534 <__sflush_r+0x34>
 80135aa:	2b1d      	cmp	r3, #29
 80135ac:	d001      	beq.n	80135b2 <__sflush_r+0xb2>
 80135ae:	2b16      	cmp	r3, #22
 80135b0:	d101      	bne.n	80135b6 <__sflush_r+0xb6>
 80135b2:	602f      	str	r7, [r5, #0]
 80135b4:	e7b1      	b.n	801351a <__sflush_r+0x1a>
 80135b6:	89a3      	ldrh	r3, [r4, #12]
 80135b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135bc:	81a3      	strh	r3, [r4, #12]
 80135be:	e7ad      	b.n	801351c <__sflush_r+0x1c>
 80135c0:	690f      	ldr	r7, [r1, #16]
 80135c2:	2f00      	cmp	r7, #0
 80135c4:	d0a9      	beq.n	801351a <__sflush_r+0x1a>
 80135c6:	0793      	lsls	r3, r2, #30
 80135c8:	680e      	ldr	r6, [r1, #0]
 80135ca:	bf08      	it	eq
 80135cc:	694b      	ldreq	r3, [r1, #20]
 80135ce:	600f      	str	r7, [r1, #0]
 80135d0:	bf18      	it	ne
 80135d2:	2300      	movne	r3, #0
 80135d4:	eba6 0807 	sub.w	r8, r6, r7
 80135d8:	608b      	str	r3, [r1, #8]
 80135da:	f1b8 0f00 	cmp.w	r8, #0
 80135de:	dd9c      	ble.n	801351a <__sflush_r+0x1a>
 80135e0:	6a21      	ldr	r1, [r4, #32]
 80135e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80135e4:	4643      	mov	r3, r8
 80135e6:	463a      	mov	r2, r7
 80135e8:	4628      	mov	r0, r5
 80135ea:	47b0      	blx	r6
 80135ec:	2800      	cmp	r0, #0
 80135ee:	dc06      	bgt.n	80135fe <__sflush_r+0xfe>
 80135f0:	89a3      	ldrh	r3, [r4, #12]
 80135f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135f6:	81a3      	strh	r3, [r4, #12]
 80135f8:	f04f 30ff 	mov.w	r0, #4294967295
 80135fc:	e78e      	b.n	801351c <__sflush_r+0x1c>
 80135fe:	4407      	add	r7, r0
 8013600:	eba8 0800 	sub.w	r8, r8, r0
 8013604:	e7e9      	b.n	80135da <__sflush_r+0xda>
 8013606:	bf00      	nop
 8013608:	20400001 	.word	0x20400001

0801360c <_fflush_r>:
 801360c:	b538      	push	{r3, r4, r5, lr}
 801360e:	690b      	ldr	r3, [r1, #16]
 8013610:	4605      	mov	r5, r0
 8013612:	460c      	mov	r4, r1
 8013614:	b913      	cbnz	r3, 801361c <_fflush_r+0x10>
 8013616:	2500      	movs	r5, #0
 8013618:	4628      	mov	r0, r5
 801361a:	bd38      	pop	{r3, r4, r5, pc}
 801361c:	b118      	cbz	r0, 8013626 <_fflush_r+0x1a>
 801361e:	6983      	ldr	r3, [r0, #24]
 8013620:	b90b      	cbnz	r3, 8013626 <_fflush_r+0x1a>
 8013622:	f000 f887 	bl	8013734 <__sinit>
 8013626:	4b14      	ldr	r3, [pc, #80]	; (8013678 <_fflush_r+0x6c>)
 8013628:	429c      	cmp	r4, r3
 801362a:	d11b      	bne.n	8013664 <_fflush_r+0x58>
 801362c:	686c      	ldr	r4, [r5, #4]
 801362e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d0ef      	beq.n	8013616 <_fflush_r+0xa>
 8013636:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013638:	07d0      	lsls	r0, r2, #31
 801363a:	d404      	bmi.n	8013646 <_fflush_r+0x3a>
 801363c:	0599      	lsls	r1, r3, #22
 801363e:	d402      	bmi.n	8013646 <_fflush_r+0x3a>
 8013640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013642:	f000 f915 	bl	8013870 <__retarget_lock_acquire_recursive>
 8013646:	4628      	mov	r0, r5
 8013648:	4621      	mov	r1, r4
 801364a:	f7ff ff59 	bl	8013500 <__sflush_r>
 801364e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013650:	07da      	lsls	r2, r3, #31
 8013652:	4605      	mov	r5, r0
 8013654:	d4e0      	bmi.n	8013618 <_fflush_r+0xc>
 8013656:	89a3      	ldrh	r3, [r4, #12]
 8013658:	059b      	lsls	r3, r3, #22
 801365a:	d4dd      	bmi.n	8013618 <_fflush_r+0xc>
 801365c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801365e:	f000 f908 	bl	8013872 <__retarget_lock_release_recursive>
 8013662:	e7d9      	b.n	8013618 <_fflush_r+0xc>
 8013664:	4b05      	ldr	r3, [pc, #20]	; (801367c <_fflush_r+0x70>)
 8013666:	429c      	cmp	r4, r3
 8013668:	d101      	bne.n	801366e <_fflush_r+0x62>
 801366a:	68ac      	ldr	r4, [r5, #8]
 801366c:	e7df      	b.n	801362e <_fflush_r+0x22>
 801366e:	4b04      	ldr	r3, [pc, #16]	; (8013680 <_fflush_r+0x74>)
 8013670:	429c      	cmp	r4, r3
 8013672:	bf08      	it	eq
 8013674:	68ec      	ldreq	r4, [r5, #12]
 8013676:	e7da      	b.n	801362e <_fflush_r+0x22>
 8013678:	0801e578 	.word	0x0801e578
 801367c:	0801e598 	.word	0x0801e598
 8013680:	0801e558 	.word	0x0801e558

08013684 <std>:
 8013684:	2300      	movs	r3, #0
 8013686:	b510      	push	{r4, lr}
 8013688:	4604      	mov	r4, r0
 801368a:	e9c0 3300 	strd	r3, r3, [r0]
 801368e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013692:	6083      	str	r3, [r0, #8]
 8013694:	8181      	strh	r1, [r0, #12]
 8013696:	6643      	str	r3, [r0, #100]	; 0x64
 8013698:	81c2      	strh	r2, [r0, #14]
 801369a:	6183      	str	r3, [r0, #24]
 801369c:	4619      	mov	r1, r3
 801369e:	2208      	movs	r2, #8
 80136a0:	305c      	adds	r0, #92	; 0x5c
 80136a2:	f7fd fb15 	bl	8010cd0 <memset>
 80136a6:	4b05      	ldr	r3, [pc, #20]	; (80136bc <std+0x38>)
 80136a8:	6263      	str	r3, [r4, #36]	; 0x24
 80136aa:	4b05      	ldr	r3, [pc, #20]	; (80136c0 <std+0x3c>)
 80136ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80136ae:	4b05      	ldr	r3, [pc, #20]	; (80136c4 <std+0x40>)
 80136b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80136b2:	4b05      	ldr	r3, [pc, #20]	; (80136c8 <std+0x44>)
 80136b4:	6224      	str	r4, [r4, #32]
 80136b6:	6323      	str	r3, [r4, #48]	; 0x30
 80136b8:	bd10      	pop	{r4, pc}
 80136ba:	bf00      	nop
 80136bc:	08013a99 	.word	0x08013a99
 80136c0:	08013abb 	.word	0x08013abb
 80136c4:	08013af3 	.word	0x08013af3
 80136c8:	08013b17 	.word	0x08013b17

080136cc <_cleanup_r>:
 80136cc:	4901      	ldr	r1, [pc, #4]	; (80136d4 <_cleanup_r+0x8>)
 80136ce:	f000 b8af 	b.w	8013830 <_fwalk_reent>
 80136d2:	bf00      	nop
 80136d4:	0801360d 	.word	0x0801360d

080136d8 <__sfmoreglue>:
 80136d8:	b570      	push	{r4, r5, r6, lr}
 80136da:	2268      	movs	r2, #104	; 0x68
 80136dc:	1e4d      	subs	r5, r1, #1
 80136de:	4355      	muls	r5, r2
 80136e0:	460e      	mov	r6, r1
 80136e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80136e6:	f7ff fb09 	bl	8012cfc <_malloc_r>
 80136ea:	4604      	mov	r4, r0
 80136ec:	b140      	cbz	r0, 8013700 <__sfmoreglue+0x28>
 80136ee:	2100      	movs	r1, #0
 80136f0:	e9c0 1600 	strd	r1, r6, [r0]
 80136f4:	300c      	adds	r0, #12
 80136f6:	60a0      	str	r0, [r4, #8]
 80136f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80136fc:	f7fd fae8 	bl	8010cd0 <memset>
 8013700:	4620      	mov	r0, r4
 8013702:	bd70      	pop	{r4, r5, r6, pc}

08013704 <__sfp_lock_acquire>:
 8013704:	4801      	ldr	r0, [pc, #4]	; (801370c <__sfp_lock_acquire+0x8>)
 8013706:	f000 b8b3 	b.w	8013870 <__retarget_lock_acquire_recursive>
 801370a:	bf00      	nop
 801370c:	2400e5f5 	.word	0x2400e5f5

08013710 <__sfp_lock_release>:
 8013710:	4801      	ldr	r0, [pc, #4]	; (8013718 <__sfp_lock_release+0x8>)
 8013712:	f000 b8ae 	b.w	8013872 <__retarget_lock_release_recursive>
 8013716:	bf00      	nop
 8013718:	2400e5f5 	.word	0x2400e5f5

0801371c <__sinit_lock_acquire>:
 801371c:	4801      	ldr	r0, [pc, #4]	; (8013724 <__sinit_lock_acquire+0x8>)
 801371e:	f000 b8a7 	b.w	8013870 <__retarget_lock_acquire_recursive>
 8013722:	bf00      	nop
 8013724:	2400e5f6 	.word	0x2400e5f6

08013728 <__sinit_lock_release>:
 8013728:	4801      	ldr	r0, [pc, #4]	; (8013730 <__sinit_lock_release+0x8>)
 801372a:	f000 b8a2 	b.w	8013872 <__retarget_lock_release_recursive>
 801372e:	bf00      	nop
 8013730:	2400e5f6 	.word	0x2400e5f6

08013734 <__sinit>:
 8013734:	b510      	push	{r4, lr}
 8013736:	4604      	mov	r4, r0
 8013738:	f7ff fff0 	bl	801371c <__sinit_lock_acquire>
 801373c:	69a3      	ldr	r3, [r4, #24]
 801373e:	b11b      	cbz	r3, 8013748 <__sinit+0x14>
 8013740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013744:	f7ff bff0 	b.w	8013728 <__sinit_lock_release>
 8013748:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801374c:	6523      	str	r3, [r4, #80]	; 0x50
 801374e:	4b13      	ldr	r3, [pc, #76]	; (801379c <__sinit+0x68>)
 8013750:	4a13      	ldr	r2, [pc, #76]	; (80137a0 <__sinit+0x6c>)
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	62a2      	str	r2, [r4, #40]	; 0x28
 8013756:	42a3      	cmp	r3, r4
 8013758:	bf04      	itt	eq
 801375a:	2301      	moveq	r3, #1
 801375c:	61a3      	streq	r3, [r4, #24]
 801375e:	4620      	mov	r0, r4
 8013760:	f000 f820 	bl	80137a4 <__sfp>
 8013764:	6060      	str	r0, [r4, #4]
 8013766:	4620      	mov	r0, r4
 8013768:	f000 f81c 	bl	80137a4 <__sfp>
 801376c:	60a0      	str	r0, [r4, #8]
 801376e:	4620      	mov	r0, r4
 8013770:	f000 f818 	bl	80137a4 <__sfp>
 8013774:	2200      	movs	r2, #0
 8013776:	60e0      	str	r0, [r4, #12]
 8013778:	2104      	movs	r1, #4
 801377a:	6860      	ldr	r0, [r4, #4]
 801377c:	f7ff ff82 	bl	8013684 <std>
 8013780:	68a0      	ldr	r0, [r4, #8]
 8013782:	2201      	movs	r2, #1
 8013784:	2109      	movs	r1, #9
 8013786:	f7ff ff7d 	bl	8013684 <std>
 801378a:	68e0      	ldr	r0, [r4, #12]
 801378c:	2202      	movs	r2, #2
 801378e:	2112      	movs	r1, #18
 8013790:	f7ff ff78 	bl	8013684 <std>
 8013794:	2301      	movs	r3, #1
 8013796:	61a3      	str	r3, [r4, #24]
 8013798:	e7d2      	b.n	8013740 <__sinit+0xc>
 801379a:	bf00      	nop
 801379c:	0801e230 	.word	0x0801e230
 80137a0:	080136cd 	.word	0x080136cd

080137a4 <__sfp>:
 80137a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137a6:	4607      	mov	r7, r0
 80137a8:	f7ff ffac 	bl	8013704 <__sfp_lock_acquire>
 80137ac:	4b1e      	ldr	r3, [pc, #120]	; (8013828 <__sfp+0x84>)
 80137ae:	681e      	ldr	r6, [r3, #0]
 80137b0:	69b3      	ldr	r3, [r6, #24]
 80137b2:	b913      	cbnz	r3, 80137ba <__sfp+0x16>
 80137b4:	4630      	mov	r0, r6
 80137b6:	f7ff ffbd 	bl	8013734 <__sinit>
 80137ba:	3648      	adds	r6, #72	; 0x48
 80137bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80137c0:	3b01      	subs	r3, #1
 80137c2:	d503      	bpl.n	80137cc <__sfp+0x28>
 80137c4:	6833      	ldr	r3, [r6, #0]
 80137c6:	b30b      	cbz	r3, 801380c <__sfp+0x68>
 80137c8:	6836      	ldr	r6, [r6, #0]
 80137ca:	e7f7      	b.n	80137bc <__sfp+0x18>
 80137cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80137d0:	b9d5      	cbnz	r5, 8013808 <__sfp+0x64>
 80137d2:	4b16      	ldr	r3, [pc, #88]	; (801382c <__sfp+0x88>)
 80137d4:	60e3      	str	r3, [r4, #12]
 80137d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80137da:	6665      	str	r5, [r4, #100]	; 0x64
 80137dc:	f000 f847 	bl	801386e <__retarget_lock_init_recursive>
 80137e0:	f7ff ff96 	bl	8013710 <__sfp_lock_release>
 80137e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80137e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80137ec:	6025      	str	r5, [r4, #0]
 80137ee:	61a5      	str	r5, [r4, #24]
 80137f0:	2208      	movs	r2, #8
 80137f2:	4629      	mov	r1, r5
 80137f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80137f8:	f7fd fa6a 	bl	8010cd0 <memset>
 80137fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013800:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013804:	4620      	mov	r0, r4
 8013806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013808:	3468      	adds	r4, #104	; 0x68
 801380a:	e7d9      	b.n	80137c0 <__sfp+0x1c>
 801380c:	2104      	movs	r1, #4
 801380e:	4638      	mov	r0, r7
 8013810:	f7ff ff62 	bl	80136d8 <__sfmoreglue>
 8013814:	4604      	mov	r4, r0
 8013816:	6030      	str	r0, [r6, #0]
 8013818:	2800      	cmp	r0, #0
 801381a:	d1d5      	bne.n	80137c8 <__sfp+0x24>
 801381c:	f7ff ff78 	bl	8013710 <__sfp_lock_release>
 8013820:	230c      	movs	r3, #12
 8013822:	603b      	str	r3, [r7, #0]
 8013824:	e7ee      	b.n	8013804 <__sfp+0x60>
 8013826:	bf00      	nop
 8013828:	0801e230 	.word	0x0801e230
 801382c:	ffff0001 	.word	0xffff0001

08013830 <_fwalk_reent>:
 8013830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013834:	4606      	mov	r6, r0
 8013836:	4688      	mov	r8, r1
 8013838:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801383c:	2700      	movs	r7, #0
 801383e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013842:	f1b9 0901 	subs.w	r9, r9, #1
 8013846:	d505      	bpl.n	8013854 <_fwalk_reent+0x24>
 8013848:	6824      	ldr	r4, [r4, #0]
 801384a:	2c00      	cmp	r4, #0
 801384c:	d1f7      	bne.n	801383e <_fwalk_reent+0xe>
 801384e:	4638      	mov	r0, r7
 8013850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013854:	89ab      	ldrh	r3, [r5, #12]
 8013856:	2b01      	cmp	r3, #1
 8013858:	d907      	bls.n	801386a <_fwalk_reent+0x3a>
 801385a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801385e:	3301      	adds	r3, #1
 8013860:	d003      	beq.n	801386a <_fwalk_reent+0x3a>
 8013862:	4629      	mov	r1, r5
 8013864:	4630      	mov	r0, r6
 8013866:	47c0      	blx	r8
 8013868:	4307      	orrs	r7, r0
 801386a:	3568      	adds	r5, #104	; 0x68
 801386c:	e7e9      	b.n	8013842 <_fwalk_reent+0x12>

0801386e <__retarget_lock_init_recursive>:
 801386e:	4770      	bx	lr

08013870 <__retarget_lock_acquire_recursive>:
 8013870:	4770      	bx	lr

08013872 <__retarget_lock_release_recursive>:
 8013872:	4770      	bx	lr

08013874 <__swhatbuf_r>:
 8013874:	b570      	push	{r4, r5, r6, lr}
 8013876:	460e      	mov	r6, r1
 8013878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801387c:	2900      	cmp	r1, #0
 801387e:	b096      	sub	sp, #88	; 0x58
 8013880:	4614      	mov	r4, r2
 8013882:	461d      	mov	r5, r3
 8013884:	da08      	bge.n	8013898 <__swhatbuf_r+0x24>
 8013886:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801388a:	2200      	movs	r2, #0
 801388c:	602a      	str	r2, [r5, #0]
 801388e:	061a      	lsls	r2, r3, #24
 8013890:	d410      	bmi.n	80138b4 <__swhatbuf_r+0x40>
 8013892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013896:	e00e      	b.n	80138b6 <__swhatbuf_r+0x42>
 8013898:	466a      	mov	r2, sp
 801389a:	f000 f96f 	bl	8013b7c <_fstat_r>
 801389e:	2800      	cmp	r0, #0
 80138a0:	dbf1      	blt.n	8013886 <__swhatbuf_r+0x12>
 80138a2:	9a01      	ldr	r2, [sp, #4]
 80138a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80138a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80138ac:	425a      	negs	r2, r3
 80138ae:	415a      	adcs	r2, r3
 80138b0:	602a      	str	r2, [r5, #0]
 80138b2:	e7ee      	b.n	8013892 <__swhatbuf_r+0x1e>
 80138b4:	2340      	movs	r3, #64	; 0x40
 80138b6:	2000      	movs	r0, #0
 80138b8:	6023      	str	r3, [r4, #0]
 80138ba:	b016      	add	sp, #88	; 0x58
 80138bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080138c0 <__smakebuf_r>:
 80138c0:	898b      	ldrh	r3, [r1, #12]
 80138c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80138c4:	079d      	lsls	r5, r3, #30
 80138c6:	4606      	mov	r6, r0
 80138c8:	460c      	mov	r4, r1
 80138ca:	d507      	bpl.n	80138dc <__smakebuf_r+0x1c>
 80138cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80138d0:	6023      	str	r3, [r4, #0]
 80138d2:	6123      	str	r3, [r4, #16]
 80138d4:	2301      	movs	r3, #1
 80138d6:	6163      	str	r3, [r4, #20]
 80138d8:	b002      	add	sp, #8
 80138da:	bd70      	pop	{r4, r5, r6, pc}
 80138dc:	ab01      	add	r3, sp, #4
 80138de:	466a      	mov	r2, sp
 80138e0:	f7ff ffc8 	bl	8013874 <__swhatbuf_r>
 80138e4:	9900      	ldr	r1, [sp, #0]
 80138e6:	4605      	mov	r5, r0
 80138e8:	4630      	mov	r0, r6
 80138ea:	f7ff fa07 	bl	8012cfc <_malloc_r>
 80138ee:	b948      	cbnz	r0, 8013904 <__smakebuf_r+0x44>
 80138f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138f4:	059a      	lsls	r2, r3, #22
 80138f6:	d4ef      	bmi.n	80138d8 <__smakebuf_r+0x18>
 80138f8:	f023 0303 	bic.w	r3, r3, #3
 80138fc:	f043 0302 	orr.w	r3, r3, #2
 8013900:	81a3      	strh	r3, [r4, #12]
 8013902:	e7e3      	b.n	80138cc <__smakebuf_r+0xc>
 8013904:	4b0d      	ldr	r3, [pc, #52]	; (801393c <__smakebuf_r+0x7c>)
 8013906:	62b3      	str	r3, [r6, #40]	; 0x28
 8013908:	89a3      	ldrh	r3, [r4, #12]
 801390a:	6020      	str	r0, [r4, #0]
 801390c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013910:	81a3      	strh	r3, [r4, #12]
 8013912:	9b00      	ldr	r3, [sp, #0]
 8013914:	6163      	str	r3, [r4, #20]
 8013916:	9b01      	ldr	r3, [sp, #4]
 8013918:	6120      	str	r0, [r4, #16]
 801391a:	b15b      	cbz	r3, 8013934 <__smakebuf_r+0x74>
 801391c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013920:	4630      	mov	r0, r6
 8013922:	f000 f93d 	bl	8013ba0 <_isatty_r>
 8013926:	b128      	cbz	r0, 8013934 <__smakebuf_r+0x74>
 8013928:	89a3      	ldrh	r3, [r4, #12]
 801392a:	f023 0303 	bic.w	r3, r3, #3
 801392e:	f043 0301 	orr.w	r3, r3, #1
 8013932:	81a3      	strh	r3, [r4, #12]
 8013934:	89a0      	ldrh	r0, [r4, #12]
 8013936:	4305      	orrs	r5, r0
 8013938:	81a5      	strh	r5, [r4, #12]
 801393a:	e7cd      	b.n	80138d8 <__smakebuf_r+0x18>
 801393c:	080136cd 	.word	0x080136cd

08013940 <__ascii_mbtowc>:
 8013940:	b082      	sub	sp, #8
 8013942:	b901      	cbnz	r1, 8013946 <__ascii_mbtowc+0x6>
 8013944:	a901      	add	r1, sp, #4
 8013946:	b142      	cbz	r2, 801395a <__ascii_mbtowc+0x1a>
 8013948:	b14b      	cbz	r3, 801395e <__ascii_mbtowc+0x1e>
 801394a:	7813      	ldrb	r3, [r2, #0]
 801394c:	600b      	str	r3, [r1, #0]
 801394e:	7812      	ldrb	r2, [r2, #0]
 8013950:	1e10      	subs	r0, r2, #0
 8013952:	bf18      	it	ne
 8013954:	2001      	movne	r0, #1
 8013956:	b002      	add	sp, #8
 8013958:	4770      	bx	lr
 801395a:	4610      	mov	r0, r2
 801395c:	e7fb      	b.n	8013956 <__ascii_mbtowc+0x16>
 801395e:	f06f 0001 	mvn.w	r0, #1
 8013962:	e7f8      	b.n	8013956 <__ascii_mbtowc+0x16>

08013964 <memmove>:
 8013964:	4288      	cmp	r0, r1
 8013966:	b510      	push	{r4, lr}
 8013968:	eb01 0402 	add.w	r4, r1, r2
 801396c:	d902      	bls.n	8013974 <memmove+0x10>
 801396e:	4284      	cmp	r4, r0
 8013970:	4623      	mov	r3, r4
 8013972:	d807      	bhi.n	8013984 <memmove+0x20>
 8013974:	1e43      	subs	r3, r0, #1
 8013976:	42a1      	cmp	r1, r4
 8013978:	d008      	beq.n	801398c <memmove+0x28>
 801397a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801397e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013982:	e7f8      	b.n	8013976 <memmove+0x12>
 8013984:	4402      	add	r2, r0
 8013986:	4601      	mov	r1, r0
 8013988:	428a      	cmp	r2, r1
 801398a:	d100      	bne.n	801398e <memmove+0x2a>
 801398c:	bd10      	pop	{r4, pc}
 801398e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013992:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013996:	e7f7      	b.n	8013988 <memmove+0x24>

08013998 <__malloc_lock>:
 8013998:	4801      	ldr	r0, [pc, #4]	; (80139a0 <__malloc_lock+0x8>)
 801399a:	f7ff bf69 	b.w	8013870 <__retarget_lock_acquire_recursive>
 801399e:	bf00      	nop
 80139a0:	2400e5f4 	.word	0x2400e5f4

080139a4 <__malloc_unlock>:
 80139a4:	4801      	ldr	r0, [pc, #4]	; (80139ac <__malloc_unlock+0x8>)
 80139a6:	f7ff bf64 	b.w	8013872 <__retarget_lock_release_recursive>
 80139aa:	bf00      	nop
 80139ac:	2400e5f4 	.word	0x2400e5f4

080139b0 <_realloc_r>:
 80139b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139b4:	4680      	mov	r8, r0
 80139b6:	4614      	mov	r4, r2
 80139b8:	460e      	mov	r6, r1
 80139ba:	b921      	cbnz	r1, 80139c6 <_realloc_r+0x16>
 80139bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80139c0:	4611      	mov	r1, r2
 80139c2:	f7ff b99b 	b.w	8012cfc <_malloc_r>
 80139c6:	b92a      	cbnz	r2, 80139d4 <_realloc_r+0x24>
 80139c8:	f7ff f92c 	bl	8012c24 <_free_r>
 80139cc:	4625      	mov	r5, r4
 80139ce:	4628      	mov	r0, r5
 80139d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139d4:	f000 f906 	bl	8013be4 <_malloc_usable_size_r>
 80139d8:	4284      	cmp	r4, r0
 80139da:	4607      	mov	r7, r0
 80139dc:	d802      	bhi.n	80139e4 <_realloc_r+0x34>
 80139de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80139e2:	d812      	bhi.n	8013a0a <_realloc_r+0x5a>
 80139e4:	4621      	mov	r1, r4
 80139e6:	4640      	mov	r0, r8
 80139e8:	f7ff f988 	bl	8012cfc <_malloc_r>
 80139ec:	4605      	mov	r5, r0
 80139ee:	2800      	cmp	r0, #0
 80139f0:	d0ed      	beq.n	80139ce <_realloc_r+0x1e>
 80139f2:	42bc      	cmp	r4, r7
 80139f4:	4622      	mov	r2, r4
 80139f6:	4631      	mov	r1, r6
 80139f8:	bf28      	it	cs
 80139fa:	463a      	movcs	r2, r7
 80139fc:	f7fd f95a 	bl	8010cb4 <memcpy>
 8013a00:	4631      	mov	r1, r6
 8013a02:	4640      	mov	r0, r8
 8013a04:	f7ff f90e 	bl	8012c24 <_free_r>
 8013a08:	e7e1      	b.n	80139ce <_realloc_r+0x1e>
 8013a0a:	4635      	mov	r5, r6
 8013a0c:	e7df      	b.n	80139ce <_realloc_r+0x1e>

08013a0e <_raise_r>:
 8013a0e:	291f      	cmp	r1, #31
 8013a10:	b538      	push	{r3, r4, r5, lr}
 8013a12:	4604      	mov	r4, r0
 8013a14:	460d      	mov	r5, r1
 8013a16:	d904      	bls.n	8013a22 <_raise_r+0x14>
 8013a18:	2316      	movs	r3, #22
 8013a1a:	6003      	str	r3, [r0, #0]
 8013a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8013a20:	bd38      	pop	{r3, r4, r5, pc}
 8013a22:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013a24:	b112      	cbz	r2, 8013a2c <_raise_r+0x1e>
 8013a26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013a2a:	b94b      	cbnz	r3, 8013a40 <_raise_r+0x32>
 8013a2c:	4620      	mov	r0, r4
 8013a2e:	f000 f831 	bl	8013a94 <_getpid_r>
 8013a32:	462a      	mov	r2, r5
 8013a34:	4601      	mov	r1, r0
 8013a36:	4620      	mov	r0, r4
 8013a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a3c:	f000 b818 	b.w	8013a70 <_kill_r>
 8013a40:	2b01      	cmp	r3, #1
 8013a42:	d00a      	beq.n	8013a5a <_raise_r+0x4c>
 8013a44:	1c59      	adds	r1, r3, #1
 8013a46:	d103      	bne.n	8013a50 <_raise_r+0x42>
 8013a48:	2316      	movs	r3, #22
 8013a4a:	6003      	str	r3, [r0, #0]
 8013a4c:	2001      	movs	r0, #1
 8013a4e:	e7e7      	b.n	8013a20 <_raise_r+0x12>
 8013a50:	2400      	movs	r4, #0
 8013a52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013a56:	4628      	mov	r0, r5
 8013a58:	4798      	blx	r3
 8013a5a:	2000      	movs	r0, #0
 8013a5c:	e7e0      	b.n	8013a20 <_raise_r+0x12>
	...

08013a60 <raise>:
 8013a60:	4b02      	ldr	r3, [pc, #8]	; (8013a6c <raise+0xc>)
 8013a62:	4601      	mov	r1, r0
 8013a64:	6818      	ldr	r0, [r3, #0]
 8013a66:	f7ff bfd2 	b.w	8013a0e <_raise_r>
 8013a6a:	bf00      	nop
 8013a6c:	24000414 	.word	0x24000414

08013a70 <_kill_r>:
 8013a70:	b538      	push	{r3, r4, r5, lr}
 8013a72:	4d07      	ldr	r5, [pc, #28]	; (8013a90 <_kill_r+0x20>)
 8013a74:	2300      	movs	r3, #0
 8013a76:	4604      	mov	r4, r0
 8013a78:	4608      	mov	r0, r1
 8013a7a:	4611      	mov	r1, r2
 8013a7c:	602b      	str	r3, [r5, #0]
 8013a7e:	f7f1 ffed 	bl	8005a5c <_kill>
 8013a82:	1c43      	adds	r3, r0, #1
 8013a84:	d102      	bne.n	8013a8c <_kill_r+0x1c>
 8013a86:	682b      	ldr	r3, [r5, #0]
 8013a88:	b103      	cbz	r3, 8013a8c <_kill_r+0x1c>
 8013a8a:	6023      	str	r3, [r4, #0]
 8013a8c:	bd38      	pop	{r3, r4, r5, pc}
 8013a8e:	bf00      	nop
 8013a90:	2400e5f8 	.word	0x2400e5f8

08013a94 <_getpid_r>:
 8013a94:	f7f1 bfe0 	b.w	8005a58 <_getpid>

08013a98 <__sread>:
 8013a98:	b510      	push	{r4, lr}
 8013a9a:	460c      	mov	r4, r1
 8013a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013aa0:	f000 f8a8 	bl	8013bf4 <_read_r>
 8013aa4:	2800      	cmp	r0, #0
 8013aa6:	bfab      	itete	ge
 8013aa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8013aac:	181b      	addge	r3, r3, r0
 8013aae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013ab2:	bfac      	ite	ge
 8013ab4:	6563      	strge	r3, [r4, #84]	; 0x54
 8013ab6:	81a3      	strhlt	r3, [r4, #12]
 8013ab8:	bd10      	pop	{r4, pc}

08013aba <__swrite>:
 8013aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013abe:	461f      	mov	r7, r3
 8013ac0:	898b      	ldrh	r3, [r1, #12]
 8013ac2:	05db      	lsls	r3, r3, #23
 8013ac4:	4605      	mov	r5, r0
 8013ac6:	460c      	mov	r4, r1
 8013ac8:	4616      	mov	r6, r2
 8013aca:	d505      	bpl.n	8013ad8 <__swrite+0x1e>
 8013acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ad0:	2302      	movs	r3, #2
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	f000 f874 	bl	8013bc0 <_lseek_r>
 8013ad8:	89a3      	ldrh	r3, [r4, #12]
 8013ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013ae2:	81a3      	strh	r3, [r4, #12]
 8013ae4:	4632      	mov	r2, r6
 8013ae6:	463b      	mov	r3, r7
 8013ae8:	4628      	mov	r0, r5
 8013aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013aee:	f000 b823 	b.w	8013b38 <_write_r>

08013af2 <__sseek>:
 8013af2:	b510      	push	{r4, lr}
 8013af4:	460c      	mov	r4, r1
 8013af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013afa:	f000 f861 	bl	8013bc0 <_lseek_r>
 8013afe:	1c43      	adds	r3, r0, #1
 8013b00:	89a3      	ldrh	r3, [r4, #12]
 8013b02:	bf15      	itete	ne
 8013b04:	6560      	strne	r0, [r4, #84]	; 0x54
 8013b06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013b0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013b0e:	81a3      	strheq	r3, [r4, #12]
 8013b10:	bf18      	it	ne
 8013b12:	81a3      	strhne	r3, [r4, #12]
 8013b14:	bd10      	pop	{r4, pc}

08013b16 <__sclose>:
 8013b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b1a:	f000 b81f 	b.w	8013b5c <_close_r>

08013b1e <__ascii_wctomb>:
 8013b1e:	b149      	cbz	r1, 8013b34 <__ascii_wctomb+0x16>
 8013b20:	2aff      	cmp	r2, #255	; 0xff
 8013b22:	bf85      	ittet	hi
 8013b24:	238a      	movhi	r3, #138	; 0x8a
 8013b26:	6003      	strhi	r3, [r0, #0]
 8013b28:	700a      	strbls	r2, [r1, #0]
 8013b2a:	f04f 30ff 	movhi.w	r0, #4294967295
 8013b2e:	bf98      	it	ls
 8013b30:	2001      	movls	r0, #1
 8013b32:	4770      	bx	lr
 8013b34:	4608      	mov	r0, r1
 8013b36:	4770      	bx	lr

08013b38 <_write_r>:
 8013b38:	b538      	push	{r3, r4, r5, lr}
 8013b3a:	4d07      	ldr	r5, [pc, #28]	; (8013b58 <_write_r+0x20>)
 8013b3c:	4604      	mov	r4, r0
 8013b3e:	4608      	mov	r0, r1
 8013b40:	4611      	mov	r1, r2
 8013b42:	2200      	movs	r2, #0
 8013b44:	602a      	str	r2, [r5, #0]
 8013b46:	461a      	mov	r2, r3
 8013b48:	f7f1 ffa6 	bl	8005a98 <_write>
 8013b4c:	1c43      	adds	r3, r0, #1
 8013b4e:	d102      	bne.n	8013b56 <_write_r+0x1e>
 8013b50:	682b      	ldr	r3, [r5, #0]
 8013b52:	b103      	cbz	r3, 8013b56 <_write_r+0x1e>
 8013b54:	6023      	str	r3, [r4, #0]
 8013b56:	bd38      	pop	{r3, r4, r5, pc}
 8013b58:	2400e5f8 	.word	0x2400e5f8

08013b5c <_close_r>:
 8013b5c:	b538      	push	{r3, r4, r5, lr}
 8013b5e:	4d06      	ldr	r5, [pc, #24]	; (8013b78 <_close_r+0x1c>)
 8013b60:	2300      	movs	r3, #0
 8013b62:	4604      	mov	r4, r0
 8013b64:	4608      	mov	r0, r1
 8013b66:	602b      	str	r3, [r5, #0]
 8013b68:	f7f1 ffa4 	bl	8005ab4 <_close>
 8013b6c:	1c43      	adds	r3, r0, #1
 8013b6e:	d102      	bne.n	8013b76 <_close_r+0x1a>
 8013b70:	682b      	ldr	r3, [r5, #0]
 8013b72:	b103      	cbz	r3, 8013b76 <_close_r+0x1a>
 8013b74:	6023      	str	r3, [r4, #0]
 8013b76:	bd38      	pop	{r3, r4, r5, pc}
 8013b78:	2400e5f8 	.word	0x2400e5f8

08013b7c <_fstat_r>:
 8013b7c:	b538      	push	{r3, r4, r5, lr}
 8013b7e:	4d07      	ldr	r5, [pc, #28]	; (8013b9c <_fstat_r+0x20>)
 8013b80:	2300      	movs	r3, #0
 8013b82:	4604      	mov	r4, r0
 8013b84:	4608      	mov	r0, r1
 8013b86:	4611      	mov	r1, r2
 8013b88:	602b      	str	r3, [r5, #0]
 8013b8a:	f7f1 ff97 	bl	8005abc <_fstat>
 8013b8e:	1c43      	adds	r3, r0, #1
 8013b90:	d102      	bne.n	8013b98 <_fstat_r+0x1c>
 8013b92:	682b      	ldr	r3, [r5, #0]
 8013b94:	b103      	cbz	r3, 8013b98 <_fstat_r+0x1c>
 8013b96:	6023      	str	r3, [r4, #0]
 8013b98:	bd38      	pop	{r3, r4, r5, pc}
 8013b9a:	bf00      	nop
 8013b9c:	2400e5f8 	.word	0x2400e5f8

08013ba0 <_isatty_r>:
 8013ba0:	b538      	push	{r3, r4, r5, lr}
 8013ba2:	4d06      	ldr	r5, [pc, #24]	; (8013bbc <_isatty_r+0x1c>)
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	4604      	mov	r4, r0
 8013ba8:	4608      	mov	r0, r1
 8013baa:	602b      	str	r3, [r5, #0]
 8013bac:	f7f1 ff8c 	bl	8005ac8 <_isatty>
 8013bb0:	1c43      	adds	r3, r0, #1
 8013bb2:	d102      	bne.n	8013bba <_isatty_r+0x1a>
 8013bb4:	682b      	ldr	r3, [r5, #0]
 8013bb6:	b103      	cbz	r3, 8013bba <_isatty_r+0x1a>
 8013bb8:	6023      	str	r3, [r4, #0]
 8013bba:	bd38      	pop	{r3, r4, r5, pc}
 8013bbc:	2400e5f8 	.word	0x2400e5f8

08013bc0 <_lseek_r>:
 8013bc0:	b538      	push	{r3, r4, r5, lr}
 8013bc2:	4d07      	ldr	r5, [pc, #28]	; (8013be0 <_lseek_r+0x20>)
 8013bc4:	4604      	mov	r4, r0
 8013bc6:	4608      	mov	r0, r1
 8013bc8:	4611      	mov	r1, r2
 8013bca:	2200      	movs	r2, #0
 8013bcc:	602a      	str	r2, [r5, #0]
 8013bce:	461a      	mov	r2, r3
 8013bd0:	f7f1 ff7c 	bl	8005acc <_lseek>
 8013bd4:	1c43      	adds	r3, r0, #1
 8013bd6:	d102      	bne.n	8013bde <_lseek_r+0x1e>
 8013bd8:	682b      	ldr	r3, [r5, #0]
 8013bda:	b103      	cbz	r3, 8013bde <_lseek_r+0x1e>
 8013bdc:	6023      	str	r3, [r4, #0]
 8013bde:	bd38      	pop	{r3, r4, r5, pc}
 8013be0:	2400e5f8 	.word	0x2400e5f8

08013be4 <_malloc_usable_size_r>:
 8013be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013be8:	1f18      	subs	r0, r3, #4
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	bfbc      	itt	lt
 8013bee:	580b      	ldrlt	r3, [r1, r0]
 8013bf0:	18c0      	addlt	r0, r0, r3
 8013bf2:	4770      	bx	lr

08013bf4 <_read_r>:
 8013bf4:	b538      	push	{r3, r4, r5, lr}
 8013bf6:	4d07      	ldr	r5, [pc, #28]	; (8013c14 <_read_r+0x20>)
 8013bf8:	4604      	mov	r4, r0
 8013bfa:	4608      	mov	r0, r1
 8013bfc:	4611      	mov	r1, r2
 8013bfe:	2200      	movs	r2, #0
 8013c00:	602a      	str	r2, [r5, #0]
 8013c02:	461a      	mov	r2, r3
 8013c04:	f7f1 ff3a 	bl	8005a7c <_read>
 8013c08:	1c43      	adds	r3, r0, #1
 8013c0a:	d102      	bne.n	8013c12 <_read_r+0x1e>
 8013c0c:	682b      	ldr	r3, [r5, #0]
 8013c0e:	b103      	cbz	r3, 8013c12 <_read_r+0x1e>
 8013c10:	6023      	str	r3, [r4, #0]
 8013c12:	bd38      	pop	{r3, r4, r5, pc}
 8013c14:	2400e5f8 	.word	0x2400e5f8

08013c18 <exp>:
 8013c18:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8013c1a:	ee10 3a90 	vmov	r3, s1
 8013c1e:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8013c22:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8013c26:	18a2      	adds	r2, r4, r2
 8013c28:	2a3e      	cmp	r2, #62	; 0x3e
 8013c2a:	ee10 1a10 	vmov	r1, s0
 8013c2e:	d922      	bls.n	8013c76 <exp+0x5e>
 8013c30:	2a00      	cmp	r2, #0
 8013c32:	da06      	bge.n	8013c42 <exp+0x2a>
 8013c34:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013c38:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013c3c:	b004      	add	sp, #16
 8013c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8013c40:	4770      	bx	lr
 8013c42:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 8013c46:	f04f 0000 	mov.w	r0, #0
 8013c4a:	d913      	bls.n	8013c74 <exp+0x5c>
 8013c4c:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8013c50:	bf08      	it	eq
 8013c52:	4281      	cmpeq	r1, r0
 8013c54:	f000 80a0 	beq.w	8013d98 <exp+0x180>
 8013c58:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013c5c:	4294      	cmp	r4, r2
 8013c5e:	d0e9      	beq.n	8013c34 <exp+0x1c>
 8013c60:	4283      	cmp	r3, r0
 8013c62:	da03      	bge.n	8013c6c <exp+0x54>
 8013c64:	b004      	add	sp, #16
 8013c66:	bcf0      	pop	{r4, r5, r6, r7}
 8013c68:	f000 b8c6 	b.w	8013df8 <__math_uflow>
 8013c6c:	b004      	add	sp, #16
 8013c6e:	bcf0      	pop	{r4, r5, r6, r7}
 8013c70:	f000 b8ca 	b.w	8013e08 <__math_oflow>
 8013c74:	4604      	mov	r4, r0
 8013c76:	4950      	ldr	r1, [pc, #320]	; (8013db8 <exp+0x1a0>)
 8013c78:	ed91 6b02 	vldr	d6, [r1, #8]
 8013c7c:	ed91 5b00 	vldr	d5, [r1]
 8013c80:	eeb0 7b46 	vmov.f64	d7, d6
 8013c84:	eea5 7b00 	vfma.f64	d7, d5, d0
 8013c88:	ee17 5a10 	vmov	r5, s14
 8013c8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013c90:	ed91 6b04 	vldr	d6, [r1, #16]
 8013c94:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8013c98:	eea6 0b07 	vfma.f64	d0, d6, d7
 8013c9c:	ed91 6b06 	vldr	d6, [r1, #24]
 8013ca0:	18d8      	adds	r0, r3, r3
 8013ca2:	f100 030f 	add.w	r3, r0, #15
 8013ca6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8013caa:	eea6 0b07 	vfma.f64	d0, d6, d7
 8013cae:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8013cb2:	ee20 7b00 	vmul.f64	d7, d0, d0
 8013cb6:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 8013cba:	ed91 5b08 	vldr	d5, [r1, #32]
 8013cbe:	ee30 6b06 	vadd.f64	d6, d0, d6
 8013cc2:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8013cc6:	eea4 5b00 	vfma.f64	d5, d4, d0
 8013cca:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8013cce:	eea5 6b07 	vfma.f64	d6, d5, d7
 8013cd2:	ee27 7b07 	vmul.f64	d7, d7, d7
 8013cd6:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8013cda:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 8013cde:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8013ce2:	eea4 5b00 	vfma.f64	d5, d4, d0
 8013ce6:	2600      	movs	r6, #0
 8013ce8:	19f2      	adds	r2, r6, r7
 8013cea:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 8013cee:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013cf2:	2c00      	cmp	r4, #0
 8013cf4:	d14b      	bne.n	8013d8e <exp+0x176>
 8013cf6:	42b5      	cmp	r5, r6
 8013cf8:	db10      	blt.n	8013d1c <exp+0x104>
 8013cfa:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8013cfe:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8013da0 <exp+0x188>
 8013d02:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8013d06:	4610      	mov	r0, r2
 8013d08:	ec41 0b10 	vmov	d0, r0, r1
 8013d0c:	eea6 0b00 	vfma.f64	d0, d6, d0
 8013d10:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013d14:	b004      	add	sp, #16
 8013d16:	bcf0      	pop	{r4, r5, r6, r7}
 8013d18:	f000 b8ae 	b.w	8013e78 <__math_check_oflow>
 8013d1c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8013d20:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8013d24:	4610      	mov	r0, r2
 8013d26:	ec41 0b17 	vmov	d7, r0, r1
 8013d2a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8013d2e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013d32:	ee37 5b06 	vadd.f64	d5, d7, d6
 8013d36:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8013d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d3e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8013da8 <exp+0x190>
 8013d42:	d51e      	bpl.n	8013d82 <exp+0x16a>
 8013d44:	ee35 3b04 	vadd.f64	d3, d5, d4
 8013d48:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013d4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013d50:	ee34 6b43 	vsub.f64	d6, d4, d3
 8013d54:	ee36 5b05 	vadd.f64	d5, d6, d5
 8013d58:	ee35 5b07 	vadd.f64	d5, d5, d7
 8013d5c:	ee35 5b03 	vadd.f64	d5, d5, d3
 8013d60:	ee35 5b44 	vsub.f64	d5, d5, d4
 8013d64:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8013d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d6c:	d101      	bne.n	8013d72 <exp+0x15a>
 8013d6e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8013db0 <exp+0x198>
 8013d72:	ed8d 0b00 	vstr	d0, [sp]
 8013d76:	ed9d 7b00 	vldr	d7, [sp]
 8013d7a:	ee27 7b00 	vmul.f64	d7, d7, d0
 8013d7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013d82:	ee25 0b00 	vmul.f64	d0, d5, d0
 8013d86:	b004      	add	sp, #16
 8013d88:	bcf0      	pop	{r4, r5, r6, r7}
 8013d8a:	f000 b86c 	b.w	8013e66 <__math_check_uflow>
 8013d8e:	ec43 2b10 	vmov	d0, r2, r3
 8013d92:	eea6 0b00 	vfma.f64	d0, d6, d0
 8013d96:	e751      	b.n	8013c3c <exp+0x24>
 8013d98:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8013db0 <exp+0x198>
 8013d9c:	e74e      	b.n	8013c3c <exp+0x24>
 8013d9e:	bf00      	nop
 8013da0:	00000000 	.word	0x00000000
 8013da4:	7f000000 	.word	0x7f000000
 8013da8:	00000000 	.word	0x00000000
 8013dac:	00100000 	.word	0x00100000
	...
 8013db8:	0801e5c8 	.word	0x0801e5c8

08013dbc <with_errno>:
 8013dbc:	b513      	push	{r0, r1, r4, lr}
 8013dbe:	4604      	mov	r4, r0
 8013dc0:	ed8d 0b00 	vstr	d0, [sp]
 8013dc4:	f7fc ff4c 	bl	8010c60 <__errno>
 8013dc8:	ed9d 0b00 	vldr	d0, [sp]
 8013dcc:	6004      	str	r4, [r0, #0]
 8013dce:	b002      	add	sp, #8
 8013dd0:	bd10      	pop	{r4, pc}

08013dd2 <xflow>:
 8013dd2:	b082      	sub	sp, #8
 8013dd4:	b158      	cbz	r0, 8013dee <xflow+0x1c>
 8013dd6:	eeb1 7b40 	vneg.f64	d7, d0
 8013dda:	ed8d 7b00 	vstr	d7, [sp]
 8013dde:	ed9d 7b00 	vldr	d7, [sp]
 8013de2:	2022      	movs	r0, #34	; 0x22
 8013de4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013de8:	b002      	add	sp, #8
 8013dea:	f7ff bfe7 	b.w	8013dbc <with_errno>
 8013dee:	eeb0 7b40 	vmov.f64	d7, d0
 8013df2:	e7f2      	b.n	8013dda <xflow+0x8>
 8013df4:	0000      	movs	r0, r0
	...

08013df8 <__math_uflow>:
 8013df8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013e00 <__math_uflow+0x8>
 8013dfc:	f7ff bfe9 	b.w	8013dd2 <xflow>
 8013e00:	00000000 	.word	0x00000000
 8013e04:	10000000 	.word	0x10000000

08013e08 <__math_oflow>:
 8013e08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013e10 <__math_oflow+0x8>
 8013e0c:	f7ff bfe1 	b.w	8013dd2 <xflow>
 8013e10:	00000000 	.word	0x00000000
 8013e14:	70000000 	.word	0x70000000

08013e18 <__math_divzero>:
 8013e18:	b082      	sub	sp, #8
 8013e1a:	2800      	cmp	r0, #0
 8013e1c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013e20:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8013e24:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8013e28:	ed8d 7b00 	vstr	d7, [sp]
 8013e2c:	ed9d 0b00 	vldr	d0, [sp]
 8013e30:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8013e40 <__math_divzero+0x28>
 8013e34:	2022      	movs	r0, #34	; 0x22
 8013e36:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8013e3a:	b002      	add	sp, #8
 8013e3c:	f7ff bfbe 	b.w	8013dbc <with_errno>
	...

08013e48 <__math_invalid>:
 8013e48:	eeb0 7b40 	vmov.f64	d7, d0
 8013e4c:	eeb4 7b47 	vcmp.f64	d7, d7
 8013e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e54:	ee30 6b40 	vsub.f64	d6, d0, d0
 8013e58:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8013e5c:	d602      	bvs.n	8013e64 <__math_invalid+0x1c>
 8013e5e:	2021      	movs	r0, #33	; 0x21
 8013e60:	f7ff bfac 	b.w	8013dbc <with_errno>
 8013e64:	4770      	bx	lr

08013e66 <__math_check_uflow>:
 8013e66:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e6e:	d102      	bne.n	8013e76 <__math_check_uflow+0x10>
 8013e70:	2022      	movs	r0, #34	; 0x22
 8013e72:	f7ff bfa3 	b.w	8013dbc <with_errno>
 8013e76:	4770      	bx	lr

08013e78 <__math_check_oflow>:
 8013e78:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8013e98 <__math_check_oflow+0x20>
 8013e7c:	eeb0 7bc0 	vabs.f64	d7, d0
 8013e80:	eeb4 7b46 	vcmp.f64	d7, d6
 8013e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e88:	dd02      	ble.n	8013e90 <__math_check_oflow+0x18>
 8013e8a:	2022      	movs	r0, #34	; 0x22
 8013e8c:	f7ff bf96 	b.w	8013dbc <with_errno>
 8013e90:	4770      	bx	lr
 8013e92:	bf00      	nop
 8013e94:	f3af 8000 	nop.w
 8013e98:	ffffffff 	.word	0xffffffff
 8013e9c:	7fefffff 	.word	0x7fefffff

08013ea0 <cos>:
 8013ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013ea2:	eeb0 7b40 	vmov.f64	d7, d0
 8013ea6:	ee17 3a90 	vmov	r3, s15
 8013eaa:	4a21      	ldr	r2, [pc, #132]	; (8013f30 <cos+0x90>)
 8013eac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013eb0:	4293      	cmp	r3, r2
 8013eb2:	dc06      	bgt.n	8013ec2 <cos+0x22>
 8013eb4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8013f28 <cos+0x88>
 8013eb8:	b005      	add	sp, #20
 8013eba:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ebe:	f000 ba6f 	b.w	80143a0 <__kernel_cos>
 8013ec2:	4a1c      	ldr	r2, [pc, #112]	; (8013f34 <cos+0x94>)
 8013ec4:	4293      	cmp	r3, r2
 8013ec6:	dd04      	ble.n	8013ed2 <cos+0x32>
 8013ec8:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013ecc:	b005      	add	sp, #20
 8013ece:	f85d fb04 	ldr.w	pc, [sp], #4
 8013ed2:	4668      	mov	r0, sp
 8013ed4:	f000 f920 	bl	8014118 <__ieee754_rem_pio2>
 8013ed8:	f000 0003 	and.w	r0, r0, #3
 8013edc:	2801      	cmp	r0, #1
 8013ede:	d009      	beq.n	8013ef4 <cos+0x54>
 8013ee0:	2802      	cmp	r0, #2
 8013ee2:	d010      	beq.n	8013f06 <cos+0x66>
 8013ee4:	b9b0      	cbnz	r0, 8013f14 <cos+0x74>
 8013ee6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013eea:	ed9d 0b00 	vldr	d0, [sp]
 8013eee:	f000 fa57 	bl	80143a0 <__kernel_cos>
 8013ef2:	e7eb      	b.n	8013ecc <cos+0x2c>
 8013ef4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013ef8:	ed9d 0b00 	vldr	d0, [sp]
 8013efc:	f000 fd54 	bl	80149a8 <__kernel_sin>
 8013f00:	eeb1 0b40 	vneg.f64	d0, d0
 8013f04:	e7e2      	b.n	8013ecc <cos+0x2c>
 8013f06:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013f0a:	ed9d 0b00 	vldr	d0, [sp]
 8013f0e:	f000 fa47 	bl	80143a0 <__kernel_cos>
 8013f12:	e7f5      	b.n	8013f00 <cos+0x60>
 8013f14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013f18:	ed9d 0b00 	vldr	d0, [sp]
 8013f1c:	2001      	movs	r0, #1
 8013f1e:	f000 fd43 	bl	80149a8 <__kernel_sin>
 8013f22:	e7d3      	b.n	8013ecc <cos+0x2c>
 8013f24:	f3af 8000 	nop.w
	...
 8013f30:	3fe921fb 	.word	0x3fe921fb
 8013f34:	7fefffff 	.word	0x7fefffff

08013f38 <sin>:
 8013f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013f3a:	eeb0 7b40 	vmov.f64	d7, d0
 8013f3e:	ee17 3a90 	vmov	r3, s15
 8013f42:	4a21      	ldr	r2, [pc, #132]	; (8013fc8 <sin+0x90>)
 8013f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013f48:	4293      	cmp	r3, r2
 8013f4a:	dc07      	bgt.n	8013f5c <sin+0x24>
 8013f4c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8013fc0 <sin+0x88>
 8013f50:	2000      	movs	r0, #0
 8013f52:	b005      	add	sp, #20
 8013f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f58:	f000 bd26 	b.w	80149a8 <__kernel_sin>
 8013f5c:	4a1b      	ldr	r2, [pc, #108]	; (8013fcc <sin+0x94>)
 8013f5e:	4293      	cmp	r3, r2
 8013f60:	dd04      	ble.n	8013f6c <sin+0x34>
 8013f62:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013f66:	b005      	add	sp, #20
 8013f68:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f6c:	4668      	mov	r0, sp
 8013f6e:	f000 f8d3 	bl	8014118 <__ieee754_rem_pio2>
 8013f72:	f000 0003 	and.w	r0, r0, #3
 8013f76:	2801      	cmp	r0, #1
 8013f78:	d00a      	beq.n	8013f90 <sin+0x58>
 8013f7a:	2802      	cmp	r0, #2
 8013f7c:	d00f      	beq.n	8013f9e <sin+0x66>
 8013f7e:	b9c0      	cbnz	r0, 8013fb2 <sin+0x7a>
 8013f80:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013f84:	ed9d 0b00 	vldr	d0, [sp]
 8013f88:	2001      	movs	r0, #1
 8013f8a:	f000 fd0d 	bl	80149a8 <__kernel_sin>
 8013f8e:	e7ea      	b.n	8013f66 <sin+0x2e>
 8013f90:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013f94:	ed9d 0b00 	vldr	d0, [sp]
 8013f98:	f000 fa02 	bl	80143a0 <__kernel_cos>
 8013f9c:	e7e3      	b.n	8013f66 <sin+0x2e>
 8013f9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013fa2:	ed9d 0b00 	vldr	d0, [sp]
 8013fa6:	2001      	movs	r0, #1
 8013fa8:	f000 fcfe 	bl	80149a8 <__kernel_sin>
 8013fac:	eeb1 0b40 	vneg.f64	d0, d0
 8013fb0:	e7d9      	b.n	8013f66 <sin+0x2e>
 8013fb2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013fb6:	ed9d 0b00 	vldr	d0, [sp]
 8013fba:	f000 f9f1 	bl	80143a0 <__kernel_cos>
 8013fbe:	e7f5      	b.n	8013fac <sin+0x74>
	...
 8013fc8:	3fe921fb 	.word	0x3fe921fb
 8013fcc:	7fefffff 	.word	0x7fefffff

08013fd0 <log10>:
 8013fd0:	b508      	push	{r3, lr}
 8013fd2:	ed2d 8b02 	vpush	{d8}
 8013fd6:	eeb0 8b40 	vmov.f64	d8, d0
 8013fda:	f000 f82d 	bl	8014038 <__ieee754_log10>
 8013fde:	eeb4 8b48 	vcmp.f64	d8, d8
 8013fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fe6:	d60f      	bvs.n	8014008 <log10+0x38>
 8013fe8:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8013fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ff0:	d80a      	bhi.n	8014008 <log10+0x38>
 8013ff2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ffa:	d108      	bne.n	801400e <log10+0x3e>
 8013ffc:	f7fc fe30 	bl	8010c60 <__errno>
 8014000:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014028 <log10+0x58>
 8014004:	2322      	movs	r3, #34	; 0x22
 8014006:	6003      	str	r3, [r0, #0]
 8014008:	ecbd 8b02 	vpop	{d8}
 801400c:	bd08      	pop	{r3, pc}
 801400e:	f7fc fe27 	bl	8010c60 <__errno>
 8014012:	ecbd 8b02 	vpop	{d8}
 8014016:	2321      	movs	r3, #33	; 0x21
 8014018:	6003      	str	r3, [r0, #0]
 801401a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801401e:	4804      	ldr	r0, [pc, #16]	; (8014030 <log10+0x60>)
 8014020:	f000 be92 	b.w	8014d48 <nan>
 8014024:	f3af 8000 	nop.w
 8014028:	00000000 	.word	0x00000000
 801402c:	fff00000 	.word	0xfff00000
 8014030:	0801e372 	.word	0x0801e372
 8014034:	00000000 	.word	0x00000000

08014038 <__ieee754_log10>:
 8014038:	b510      	push	{r4, lr}
 801403a:	ee10 3a90 	vmov	r3, s1
 801403e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014042:	ed2d 8b02 	vpush	{d8}
 8014046:	da21      	bge.n	801408c <__ieee754_log10+0x54>
 8014048:	ee10 1a10 	vmov	r1, s0
 801404c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014050:	430a      	orrs	r2, r1
 8014052:	d108      	bne.n	8014066 <__ieee754_log10+0x2e>
 8014054:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80140e0 <__ieee754_log10+0xa8>
 8014058:	ed9f 7b23 	vldr	d7, [pc, #140]	; 80140e8 <__ieee754_log10+0xb0>
 801405c:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8014060:	ecbd 8b02 	vpop	{d8}
 8014064:	bd10      	pop	{r4, pc}
 8014066:	2b00      	cmp	r3, #0
 8014068:	da02      	bge.n	8014070 <__ieee754_log10+0x38>
 801406a:	ee30 6b40 	vsub.f64	d6, d0, d0
 801406e:	e7f3      	b.n	8014058 <__ieee754_log10+0x20>
 8014070:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80140f0 <__ieee754_log10+0xb8>
 8014074:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014078:	ee10 3a90 	vmov	r3, s1
 801407c:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8014080:	4923      	ldr	r1, [pc, #140]	; (8014110 <__ieee754_log10+0xd8>)
 8014082:	428b      	cmp	r3, r1
 8014084:	dd04      	ble.n	8014090 <__ieee754_log10+0x58>
 8014086:	ee30 0b00 	vadd.f64	d0, d0, d0
 801408a:	e7e9      	b.n	8014060 <__ieee754_log10+0x28>
 801408c:	2200      	movs	r2, #0
 801408e:	e7f7      	b.n	8014080 <__ieee754_log10+0x48>
 8014090:	1518      	asrs	r0, r3, #20
 8014092:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8014096:	4410      	add	r0, r2
 8014098:	f3c3 0113 	ubfx	r1, r3, #0, #20
 801409c:	f240 34ff 	movw	r4, #1023	; 0x3ff
 80140a0:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 80140a4:	ee08 3a10 	vmov	s16, r3
 80140a8:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 80140ac:	ec53 2b10 	vmov	r2, r3, d0
 80140b0:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80140b4:	ec43 2b10 	vmov	d0, r2, r3
 80140b8:	f000 fcce 	bl	8014a58 <log>
 80140bc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80140f8 <__ieee754_log10+0xc0>
 80140c0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80140c4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8014100 <__ieee754_log10+0xc8>
 80140c8:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 80140cc:	eea8 0b07 	vfma.f64	d0, d8, d7
 80140d0:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8014108 <__ieee754_log10+0xd0>
 80140d4:	eea8 0b07 	vfma.f64	d0, d8, d7
 80140d8:	e7c2      	b.n	8014060 <__ieee754_log10+0x28>
 80140da:	bf00      	nop
 80140dc:	f3af 8000 	nop.w
 80140e0:	00000000 	.word	0x00000000
 80140e4:	c3500000 	.word	0xc3500000
	...
 80140f4:	43500000 	.word	0x43500000
 80140f8:	1526e50e 	.word	0x1526e50e
 80140fc:	3fdbcb7b 	.word	0x3fdbcb7b
 8014100:	11f12b36 	.word	0x11f12b36
 8014104:	3d59fef3 	.word	0x3d59fef3
 8014108:	509f6000 	.word	0x509f6000
 801410c:	3fd34413 	.word	0x3fd34413
 8014110:	7fefffff 	.word	0x7fefffff
 8014114:	00000000 	.word	0x00000000

08014118 <__ieee754_rem_pio2>:
 8014118:	b570      	push	{r4, r5, r6, lr}
 801411a:	eeb0 7b40 	vmov.f64	d7, d0
 801411e:	ee17 5a90 	vmov	r5, s15
 8014122:	4b99      	ldr	r3, [pc, #612]	; (8014388 <__ieee754_rem_pio2+0x270>)
 8014124:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014128:	429e      	cmp	r6, r3
 801412a:	b088      	sub	sp, #32
 801412c:	4604      	mov	r4, r0
 801412e:	dc07      	bgt.n	8014140 <__ieee754_rem_pio2+0x28>
 8014130:	2200      	movs	r2, #0
 8014132:	2300      	movs	r3, #0
 8014134:	ed84 0b00 	vstr	d0, [r4]
 8014138:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801413c:	2000      	movs	r0, #0
 801413e:	e01b      	b.n	8014178 <__ieee754_rem_pio2+0x60>
 8014140:	4b92      	ldr	r3, [pc, #584]	; (801438c <__ieee754_rem_pio2+0x274>)
 8014142:	429e      	cmp	r6, r3
 8014144:	dc3b      	bgt.n	80141be <__ieee754_rem_pio2+0xa6>
 8014146:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801414a:	2d00      	cmp	r5, #0
 801414c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8014348 <__ieee754_rem_pio2+0x230>
 8014150:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8014154:	dd19      	ble.n	801418a <__ieee754_rem_pio2+0x72>
 8014156:	ee30 7b46 	vsub.f64	d7, d0, d6
 801415a:	429e      	cmp	r6, r3
 801415c:	d00e      	beq.n	801417c <__ieee754_rem_pio2+0x64>
 801415e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8014350 <__ieee754_rem_pio2+0x238>
 8014162:	ee37 5b46 	vsub.f64	d5, d7, d6
 8014166:	ee37 7b45 	vsub.f64	d7, d7, d5
 801416a:	ed84 5b00 	vstr	d5, [r4]
 801416e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014172:	ed84 7b02 	vstr	d7, [r4, #8]
 8014176:	2001      	movs	r0, #1
 8014178:	b008      	add	sp, #32
 801417a:	bd70      	pop	{r4, r5, r6, pc}
 801417c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8014358 <__ieee754_rem_pio2+0x240>
 8014180:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014184:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8014360 <__ieee754_rem_pio2+0x248>
 8014188:	e7eb      	b.n	8014162 <__ieee754_rem_pio2+0x4a>
 801418a:	429e      	cmp	r6, r3
 801418c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8014190:	d00e      	beq.n	80141b0 <__ieee754_rem_pio2+0x98>
 8014192:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8014350 <__ieee754_rem_pio2+0x238>
 8014196:	ee37 5b06 	vadd.f64	d5, d7, d6
 801419a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801419e:	ed84 5b00 	vstr	d5, [r4]
 80141a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80141a6:	f04f 30ff 	mov.w	r0, #4294967295
 80141aa:	ed84 7b02 	vstr	d7, [r4, #8]
 80141ae:	e7e3      	b.n	8014178 <__ieee754_rem_pio2+0x60>
 80141b0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8014358 <__ieee754_rem_pio2+0x240>
 80141b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80141b8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8014360 <__ieee754_rem_pio2+0x248>
 80141bc:	e7eb      	b.n	8014196 <__ieee754_rem_pio2+0x7e>
 80141be:	4b74      	ldr	r3, [pc, #464]	; (8014390 <__ieee754_rem_pio2+0x278>)
 80141c0:	429e      	cmp	r6, r3
 80141c2:	dc70      	bgt.n	80142a6 <__ieee754_rem_pio2+0x18e>
 80141c4:	f000 fd40 	bl	8014c48 <fabs>
 80141c8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80141cc:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8014368 <__ieee754_rem_pio2+0x250>
 80141d0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80141d4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80141d8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80141dc:	ee17 0a90 	vmov	r0, s15
 80141e0:	eeb1 4b45 	vneg.f64	d4, d5
 80141e4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8014348 <__ieee754_rem_pio2+0x230>
 80141e8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80141ec:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8014350 <__ieee754_rem_pio2+0x238>
 80141f0:	281f      	cmp	r0, #31
 80141f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80141f6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80141fa:	dc08      	bgt.n	801420e <__ieee754_rem_pio2+0xf6>
 80141fc:	4b65      	ldr	r3, [pc, #404]	; (8014394 <__ieee754_rem_pio2+0x27c>)
 80141fe:	1e42      	subs	r2, r0, #1
 8014200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014204:	42b3      	cmp	r3, r6
 8014206:	d002      	beq.n	801420e <__ieee754_rem_pio2+0xf6>
 8014208:	ed84 6b00 	vstr	d6, [r4]
 801420c:	e026      	b.n	801425c <__ieee754_rem_pio2+0x144>
 801420e:	ee16 3a90 	vmov	r3, s13
 8014212:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8014216:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801421a:	2b10      	cmp	r3, #16
 801421c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8014220:	ddf2      	ble.n	8014208 <__ieee754_rem_pio2+0xf0>
 8014222:	eeb0 6b40 	vmov.f64	d6, d0
 8014226:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8014358 <__ieee754_rem_pio2+0x240>
 801422a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8014360 <__ieee754_rem_pio2+0x248>
 801422e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8014232:	ee30 0b46 	vsub.f64	d0, d0, d6
 8014236:	eea4 0b07 	vfma.f64	d0, d4, d7
 801423a:	eeb0 7b40 	vmov.f64	d7, d0
 801423e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8014242:	ee36 3b47 	vsub.f64	d3, d6, d7
 8014246:	ee13 3a90 	vmov	r3, s7
 801424a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801424e:	1ad3      	subs	r3, r2, r3
 8014250:	2b31      	cmp	r3, #49	; 0x31
 8014252:	dc17      	bgt.n	8014284 <__ieee754_rem_pio2+0x16c>
 8014254:	eeb0 0b46 	vmov.f64	d0, d6
 8014258:	ed84 3b00 	vstr	d3, [r4]
 801425c:	ed94 6b00 	vldr	d6, [r4]
 8014260:	2d00      	cmp	r5, #0
 8014262:	ee30 0b46 	vsub.f64	d0, d0, d6
 8014266:	ee30 0b47 	vsub.f64	d0, d0, d7
 801426a:	ed84 0b02 	vstr	d0, [r4, #8]
 801426e:	da83      	bge.n	8014178 <__ieee754_rem_pio2+0x60>
 8014270:	eeb1 6b46 	vneg.f64	d6, d6
 8014274:	eeb1 0b40 	vneg.f64	d0, d0
 8014278:	ed84 6b00 	vstr	d6, [r4]
 801427c:	ed84 0b02 	vstr	d0, [r4, #8]
 8014280:	4240      	negs	r0, r0
 8014282:	e779      	b.n	8014178 <__ieee754_rem_pio2+0x60>
 8014284:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8014370 <__ieee754_rem_pio2+0x258>
 8014288:	eeb0 0b46 	vmov.f64	d0, d6
 801428c:	eea4 0b03 	vfma.f64	d0, d4, d3
 8014290:	ee36 7b40 	vsub.f64	d7, d6, d0
 8014294:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8014378 <__ieee754_rem_pio2+0x260>
 8014298:	eea4 7b03 	vfma.f64	d7, d4, d3
 801429c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80142a0:	ee30 6b47 	vsub.f64	d6, d0, d7
 80142a4:	e7b0      	b.n	8014208 <__ieee754_rem_pio2+0xf0>
 80142a6:	4b3c      	ldr	r3, [pc, #240]	; (8014398 <__ieee754_rem_pio2+0x280>)
 80142a8:	429e      	cmp	r6, r3
 80142aa:	dd06      	ble.n	80142ba <__ieee754_rem_pio2+0x1a2>
 80142ac:	ee30 7b40 	vsub.f64	d7, d0, d0
 80142b0:	ed80 7b02 	vstr	d7, [r0, #8]
 80142b4:	ed80 7b00 	vstr	d7, [r0]
 80142b8:	e740      	b.n	801413c <__ieee754_rem_pio2+0x24>
 80142ba:	1532      	asrs	r2, r6, #20
 80142bc:	ee10 0a10 	vmov	r0, s0
 80142c0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80142c4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80142c8:	ec41 0b17 	vmov	d7, r0, r1
 80142cc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80142d0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8014380 <__ieee754_rem_pio2+0x268>
 80142d4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80142d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80142dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80142e0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80142e4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80142e8:	a902      	add	r1, sp, #8
 80142ea:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80142ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80142f2:	ed8d 6b04 	vstr	d6, [sp, #16]
 80142f6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80142fa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80142fe:	2603      	movs	r6, #3
 8014300:	4608      	mov	r0, r1
 8014302:	ed91 7b04 	vldr	d7, [r1, #16]
 8014306:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801430a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801430e:	4633      	mov	r3, r6
 8014310:	f1a1 0108 	sub.w	r1, r1, #8
 8014314:	f106 36ff 	add.w	r6, r6, #4294967295
 8014318:	d0f3      	beq.n	8014302 <__ieee754_rem_pio2+0x1ea>
 801431a:	4920      	ldr	r1, [pc, #128]	; (801439c <__ieee754_rem_pio2+0x284>)
 801431c:	9101      	str	r1, [sp, #4]
 801431e:	2102      	movs	r1, #2
 8014320:	9100      	str	r1, [sp, #0]
 8014322:	4621      	mov	r1, r4
 8014324:	f000 f8a8 	bl	8014478 <__kernel_rem_pio2>
 8014328:	2d00      	cmp	r5, #0
 801432a:	f6bf af25 	bge.w	8014178 <__ieee754_rem_pio2+0x60>
 801432e:	ed94 7b00 	vldr	d7, [r4]
 8014332:	eeb1 7b47 	vneg.f64	d7, d7
 8014336:	ed84 7b00 	vstr	d7, [r4]
 801433a:	ed94 7b02 	vldr	d7, [r4, #8]
 801433e:	eeb1 7b47 	vneg.f64	d7, d7
 8014342:	ed84 7b02 	vstr	d7, [r4, #8]
 8014346:	e79b      	b.n	8014280 <__ieee754_rem_pio2+0x168>
 8014348:	54400000 	.word	0x54400000
 801434c:	3ff921fb 	.word	0x3ff921fb
 8014350:	1a626331 	.word	0x1a626331
 8014354:	3dd0b461 	.word	0x3dd0b461
 8014358:	1a600000 	.word	0x1a600000
 801435c:	3dd0b461 	.word	0x3dd0b461
 8014360:	2e037073 	.word	0x2e037073
 8014364:	3ba3198a 	.word	0x3ba3198a
 8014368:	6dc9c883 	.word	0x6dc9c883
 801436c:	3fe45f30 	.word	0x3fe45f30
 8014370:	2e000000 	.word	0x2e000000
 8014374:	3ba3198a 	.word	0x3ba3198a
 8014378:	252049c1 	.word	0x252049c1
 801437c:	397b839a 	.word	0x397b839a
 8014380:	00000000 	.word	0x00000000
 8014384:	41700000 	.word	0x41700000
 8014388:	3fe921fb 	.word	0x3fe921fb
 801438c:	4002d97b 	.word	0x4002d97b
 8014390:	413921fb 	.word	0x413921fb
 8014394:	0801ee38 	.word	0x0801ee38
 8014398:	7fefffff 	.word	0x7fefffff
 801439c:	0801eeb8 	.word	0x0801eeb8

080143a0 <__kernel_cos>:
 80143a0:	ee10 1a90 	vmov	r1, s1
 80143a4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80143a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80143ac:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80143b0:	da05      	bge.n	80143be <__kernel_cos+0x1e>
 80143b2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80143b6:	ee17 3a90 	vmov	r3, s15
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d03d      	beq.n	801443a <__kernel_cos+0x9a>
 80143be:	ee20 3b00 	vmul.f64	d3, d0, d0
 80143c2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8014440 <__kernel_cos+0xa0>
 80143c6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8014448 <__kernel_cos+0xa8>
 80143ca:	eea3 6b07 	vfma.f64	d6, d3, d7
 80143ce:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014450 <__kernel_cos+0xb0>
 80143d2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80143d6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8014458 <__kernel_cos+0xb8>
 80143da:	eea7 6b03 	vfma.f64	d6, d7, d3
 80143de:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014460 <__kernel_cos+0xc0>
 80143e2:	4b23      	ldr	r3, [pc, #140]	; (8014470 <__kernel_cos+0xd0>)
 80143e4:	eea6 7b03 	vfma.f64	d7, d6, d3
 80143e8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8014468 <__kernel_cos+0xc8>
 80143ec:	4299      	cmp	r1, r3
 80143ee:	eea7 6b03 	vfma.f64	d6, d7, d3
 80143f2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80143f6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80143fa:	ee23 7b07 	vmul.f64	d7, d3, d7
 80143fe:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8014402:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014406:	dc04      	bgt.n	8014412 <__kernel_cos+0x72>
 8014408:	ee37 6b46 	vsub.f64	d6, d7, d6
 801440c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8014410:	4770      	bx	lr
 8014412:	4b18      	ldr	r3, [pc, #96]	; (8014474 <__kernel_cos+0xd4>)
 8014414:	4299      	cmp	r1, r3
 8014416:	dc0d      	bgt.n	8014434 <__kernel_cos+0x94>
 8014418:	2200      	movs	r2, #0
 801441a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801441e:	ec43 2b15 	vmov	d5, r2, r3
 8014422:	ee34 0b45 	vsub.f64	d0, d4, d5
 8014426:	ee37 7b45 	vsub.f64	d7, d7, d5
 801442a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801442e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8014432:	4770      	bx	lr
 8014434:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8014438:	e7f3      	b.n	8014422 <__kernel_cos+0x82>
 801443a:	eeb0 0b44 	vmov.f64	d0, d4
 801443e:	4770      	bx	lr
 8014440:	be8838d4 	.word	0xbe8838d4
 8014444:	bda8fae9 	.word	0xbda8fae9
 8014448:	bdb4b1c4 	.word	0xbdb4b1c4
 801444c:	3e21ee9e 	.word	0x3e21ee9e
 8014450:	809c52ad 	.word	0x809c52ad
 8014454:	be927e4f 	.word	0xbe927e4f
 8014458:	19cb1590 	.word	0x19cb1590
 801445c:	3efa01a0 	.word	0x3efa01a0
 8014460:	16c15177 	.word	0x16c15177
 8014464:	bf56c16c 	.word	0xbf56c16c
 8014468:	5555554c 	.word	0x5555554c
 801446c:	3fa55555 	.word	0x3fa55555
 8014470:	3fd33332 	.word	0x3fd33332
 8014474:	3fe90000 	.word	0x3fe90000

08014478 <__kernel_rem_pio2>:
 8014478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801447c:	ed2d 8b06 	vpush	{d8-d10}
 8014480:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8014484:	460f      	mov	r7, r1
 8014486:	9002      	str	r0, [sp, #8]
 8014488:	49c5      	ldr	r1, [pc, #788]	; (80147a0 <__kernel_rem_pio2+0x328>)
 801448a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801448c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8014490:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8014494:	9301      	str	r3, [sp, #4]
 8014496:	f112 0f14 	cmn.w	r2, #20
 801449a:	bfa8      	it	ge
 801449c:	2018      	movge	r0, #24
 801449e:	f103 31ff 	add.w	r1, r3, #4294967295
 80144a2:	bfb8      	it	lt
 80144a4:	2000      	movlt	r0, #0
 80144a6:	f06f 0417 	mvn.w	r4, #23
 80144aa:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8014788 <__kernel_rem_pio2+0x310>
 80144ae:	bfa4      	itt	ge
 80144b0:	f1a2 0a03 	subge.w	sl, r2, #3
 80144b4:	fb9a f0f0 	sdivge	r0, sl, r0
 80144b8:	fb00 4404 	mla	r4, r0, r4, r4
 80144bc:	1a46      	subs	r6, r0, r1
 80144be:	4414      	add	r4, r2
 80144c0:	eb09 0c01 	add.w	ip, r9, r1
 80144c4:	ad1a      	add	r5, sp, #104	; 0x68
 80144c6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80144ca:	2200      	movs	r2, #0
 80144cc:	4562      	cmp	r2, ip
 80144ce:	dd10      	ble.n	80144f2 <__kernel_rem_pio2+0x7a>
 80144d0:	9a01      	ldr	r2, [sp, #4]
 80144d2:	ab1a      	add	r3, sp, #104	; 0x68
 80144d4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80144d8:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 80144dc:	f04f 0c00 	mov.w	ip, #0
 80144e0:	45cc      	cmp	ip, r9
 80144e2:	dc26      	bgt.n	8014532 <__kernel_rem_pio2+0xba>
 80144e4:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8014788 <__kernel_rem_pio2+0x310>
 80144e8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80144ec:	4616      	mov	r6, r2
 80144ee:	2500      	movs	r5, #0
 80144f0:	e015      	b.n	801451e <__kernel_rem_pio2+0xa6>
 80144f2:	42d6      	cmn	r6, r2
 80144f4:	d409      	bmi.n	801450a <__kernel_rem_pio2+0x92>
 80144f6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 80144fa:	ee07 3a90 	vmov	s15, r3
 80144fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014502:	eca5 7b02 	vstmia	r5!, {d7}
 8014506:	3201      	adds	r2, #1
 8014508:	e7e0      	b.n	80144cc <__kernel_rem_pio2+0x54>
 801450a:	eeb0 7b46 	vmov.f64	d7, d6
 801450e:	e7f8      	b.n	8014502 <__kernel_rem_pio2+0x8a>
 8014510:	ecb8 5b02 	vldmia	r8!, {d5}
 8014514:	ed96 6b00 	vldr	d6, [r6]
 8014518:	3501      	adds	r5, #1
 801451a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801451e:	428d      	cmp	r5, r1
 8014520:	f1a6 0608 	sub.w	r6, r6, #8
 8014524:	ddf4      	ble.n	8014510 <__kernel_rem_pio2+0x98>
 8014526:	ecaa 7b02 	vstmia	sl!, {d7}
 801452a:	f10c 0c01 	add.w	ip, ip, #1
 801452e:	3208      	adds	r2, #8
 8014530:	e7d6      	b.n	80144e0 <__kernel_rem_pio2+0x68>
 8014532:	ab06      	add	r3, sp, #24
 8014534:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8014790 <__kernel_rem_pio2+0x318>
 8014538:	ed9f ab97 	vldr	d10, [pc, #604]	; 8014798 <__kernel_rem_pio2+0x320>
 801453c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8014540:	9303      	str	r3, [sp, #12]
 8014542:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8014546:	464d      	mov	r5, r9
 8014548:	00eb      	lsls	r3, r5, #3
 801454a:	9304      	str	r3, [sp, #16]
 801454c:	ab92      	add	r3, sp, #584	; 0x248
 801454e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8014552:	f10d 0b18 	add.w	fp, sp, #24
 8014556:	ab6a      	add	r3, sp, #424	; 0x1a8
 8014558:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801455c:	465e      	mov	r6, fp
 801455e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8014562:	4628      	mov	r0, r5
 8014564:	2800      	cmp	r0, #0
 8014566:	f1a2 0208 	sub.w	r2, r2, #8
 801456a:	dc4c      	bgt.n	8014606 <__kernel_rem_pio2+0x18e>
 801456c:	4620      	mov	r0, r4
 801456e:	9105      	str	r1, [sp, #20]
 8014570:	f000 fbf2 	bl	8014d58 <scalbn>
 8014574:	eeb0 8b40 	vmov.f64	d8, d0
 8014578:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801457c:	ee28 0b00 	vmul.f64	d0, d8, d0
 8014580:	f000 fb6e 	bl	8014c60 <floor>
 8014584:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8014588:	eea0 8b47 	vfms.f64	d8, d0, d7
 801458c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8014590:	2c00      	cmp	r4, #0
 8014592:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8014596:	ee17 8a90 	vmov	r8, s15
 801459a:	ee38 8b40 	vsub.f64	d8, d8, d0
 801459e:	9905      	ldr	r1, [sp, #20]
 80145a0:	dd43      	ble.n	801462a <__kernel_rem_pio2+0x1b2>
 80145a2:	1e68      	subs	r0, r5, #1
 80145a4:	ab06      	add	r3, sp, #24
 80145a6:	f1c4 0c18 	rsb	ip, r4, #24
 80145aa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80145ae:	fa46 f20c 	asr.w	r2, r6, ip
 80145b2:	4490      	add	r8, r2
 80145b4:	fa02 f20c 	lsl.w	r2, r2, ip
 80145b8:	1ab6      	subs	r6, r6, r2
 80145ba:	f1c4 0217 	rsb	r2, r4, #23
 80145be:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80145c2:	4116      	asrs	r6, r2
 80145c4:	2e00      	cmp	r6, #0
 80145c6:	dd3f      	ble.n	8014648 <__kernel_rem_pio2+0x1d0>
 80145c8:	f04f 0c00 	mov.w	ip, #0
 80145cc:	f108 0801 	add.w	r8, r8, #1
 80145d0:	4660      	mov	r0, ip
 80145d2:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80145d6:	4565      	cmp	r5, ip
 80145d8:	dc6e      	bgt.n	80146b8 <__kernel_rem_pio2+0x240>
 80145da:	2c00      	cmp	r4, #0
 80145dc:	dd04      	ble.n	80145e8 <__kernel_rem_pio2+0x170>
 80145de:	2c01      	cmp	r4, #1
 80145e0:	d07f      	beq.n	80146e2 <__kernel_rem_pio2+0x26a>
 80145e2:	2c02      	cmp	r4, #2
 80145e4:	f000 8087 	beq.w	80146f6 <__kernel_rem_pio2+0x27e>
 80145e8:	2e02      	cmp	r6, #2
 80145ea:	d12d      	bne.n	8014648 <__kernel_rem_pio2+0x1d0>
 80145ec:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80145f0:	ee30 8b48 	vsub.f64	d8, d0, d8
 80145f4:	b340      	cbz	r0, 8014648 <__kernel_rem_pio2+0x1d0>
 80145f6:	4620      	mov	r0, r4
 80145f8:	9105      	str	r1, [sp, #20]
 80145fa:	f000 fbad 	bl	8014d58 <scalbn>
 80145fe:	9905      	ldr	r1, [sp, #20]
 8014600:	ee38 8b40 	vsub.f64	d8, d8, d0
 8014604:	e020      	b.n	8014648 <__kernel_rem_pio2+0x1d0>
 8014606:	ee20 7b09 	vmul.f64	d7, d0, d9
 801460a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801460e:	3801      	subs	r0, #1
 8014610:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8014614:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8014618:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801461c:	eca6 0a01 	vstmia	r6!, {s0}
 8014620:	ed92 0b00 	vldr	d0, [r2]
 8014624:	ee37 0b00 	vadd.f64	d0, d7, d0
 8014628:	e79c      	b.n	8014564 <__kernel_rem_pio2+0xec>
 801462a:	d105      	bne.n	8014638 <__kernel_rem_pio2+0x1c0>
 801462c:	1e6a      	subs	r2, r5, #1
 801462e:	ab06      	add	r3, sp, #24
 8014630:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8014634:	15f6      	asrs	r6, r6, #23
 8014636:	e7c5      	b.n	80145c4 <__kernel_rem_pio2+0x14c>
 8014638:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801463c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014644:	da36      	bge.n	80146b4 <__kernel_rem_pio2+0x23c>
 8014646:	2600      	movs	r6, #0
 8014648:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801464c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014650:	f040 80aa 	bne.w	80147a8 <__kernel_rem_pio2+0x330>
 8014654:	f105 3bff 	add.w	fp, r5, #4294967295
 8014658:	4658      	mov	r0, fp
 801465a:	2200      	movs	r2, #0
 801465c:	4548      	cmp	r0, r9
 801465e:	da52      	bge.n	8014706 <__kernel_rem_pio2+0x28e>
 8014660:	2a00      	cmp	r2, #0
 8014662:	f000 8081 	beq.w	8014768 <__kernel_rem_pio2+0x2f0>
 8014666:	ab06      	add	r3, sp, #24
 8014668:	3c18      	subs	r4, #24
 801466a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801466e:	2b00      	cmp	r3, #0
 8014670:	f000 8087 	beq.w	8014782 <__kernel_rem_pio2+0x30a>
 8014674:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014678:	4620      	mov	r0, r4
 801467a:	f000 fb6d 	bl	8014d58 <scalbn>
 801467e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8014682:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8014790 <__kernel_rem_pio2+0x318>
 8014686:	a96a      	add	r1, sp, #424	; 0x1a8
 8014688:	f103 0208 	add.w	r2, r3, #8
 801468c:	1888      	adds	r0, r1, r2
 801468e:	4659      	mov	r1, fp
 8014690:	2900      	cmp	r1, #0
 8014692:	f280 80b7 	bge.w	8014804 <__kernel_rem_pio2+0x38c>
 8014696:	4659      	mov	r1, fp
 8014698:	2900      	cmp	r1, #0
 801469a:	f2c0 80d5 	blt.w	8014848 <__kernel_rem_pio2+0x3d0>
 801469e:	a86a      	add	r0, sp, #424	; 0x1a8
 80146a0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 80146a4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8014788 <__kernel_rem_pio2+0x310>
 80146a8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80147a4 <__kernel_rem_pio2+0x32c>
 80146ac:	2400      	movs	r4, #0
 80146ae:	ebab 0001 	sub.w	r0, fp, r1
 80146b2:	e0be      	b.n	8014832 <__kernel_rem_pio2+0x3ba>
 80146b4:	2602      	movs	r6, #2
 80146b6:	e787      	b.n	80145c8 <__kernel_rem_pio2+0x150>
 80146b8:	f8db 2000 	ldr.w	r2, [fp]
 80146bc:	b958      	cbnz	r0, 80146d6 <__kernel_rem_pio2+0x25e>
 80146be:	b122      	cbz	r2, 80146ca <__kernel_rem_pio2+0x252>
 80146c0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80146c4:	f8cb 2000 	str.w	r2, [fp]
 80146c8:	2201      	movs	r2, #1
 80146ca:	f10c 0c01 	add.w	ip, ip, #1
 80146ce:	f10b 0b04 	add.w	fp, fp, #4
 80146d2:	4610      	mov	r0, r2
 80146d4:	e77f      	b.n	80145d6 <__kernel_rem_pio2+0x15e>
 80146d6:	ebae 0202 	sub.w	r2, lr, r2
 80146da:	f8cb 2000 	str.w	r2, [fp]
 80146de:	4602      	mov	r2, r0
 80146e0:	e7f3      	b.n	80146ca <__kernel_rem_pio2+0x252>
 80146e2:	f105 3cff 	add.w	ip, r5, #4294967295
 80146e6:	ab06      	add	r3, sp, #24
 80146e8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80146ec:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80146f0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 80146f4:	e778      	b.n	80145e8 <__kernel_rem_pio2+0x170>
 80146f6:	f105 3cff 	add.w	ip, r5, #4294967295
 80146fa:	ab06      	add	r3, sp, #24
 80146fc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8014700:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8014704:	e7f4      	b.n	80146f0 <__kernel_rem_pio2+0x278>
 8014706:	ab06      	add	r3, sp, #24
 8014708:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801470c:	3801      	subs	r0, #1
 801470e:	431a      	orrs	r2, r3
 8014710:	e7a4      	b.n	801465c <__kernel_rem_pio2+0x1e4>
 8014712:	f10c 0c01 	add.w	ip, ip, #1
 8014716:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801471a:	2800      	cmp	r0, #0
 801471c:	d0f9      	beq.n	8014712 <__kernel_rem_pio2+0x29a>
 801471e:	9b04      	ldr	r3, [sp, #16]
 8014720:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8014724:	eb0d 0203 	add.w	r2, sp, r3
 8014728:	9b01      	ldr	r3, [sp, #4]
 801472a:	18e8      	adds	r0, r5, r3
 801472c:	ab1a      	add	r3, sp, #104	; 0x68
 801472e:	1c6e      	adds	r6, r5, #1
 8014730:	3a98      	subs	r2, #152	; 0x98
 8014732:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8014736:	4465      	add	r5, ip
 8014738:	42b5      	cmp	r5, r6
 801473a:	f6ff af05 	blt.w	8014548 <__kernel_rem_pio2+0xd0>
 801473e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8014742:	f8dd e008 	ldr.w	lr, [sp, #8]
 8014746:	ee07 3a90 	vmov	s15, r3
 801474a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801474e:	f04f 0c00 	mov.w	ip, #0
 8014752:	eca0 7b02 	vstmia	r0!, {d7}
 8014756:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8014788 <__kernel_rem_pio2+0x310>
 801475a:	4680      	mov	r8, r0
 801475c:	458c      	cmp	ip, r1
 801475e:	dd07      	ble.n	8014770 <__kernel_rem_pio2+0x2f8>
 8014760:	eca2 7b02 	vstmia	r2!, {d7}
 8014764:	3601      	adds	r6, #1
 8014766:	e7e7      	b.n	8014738 <__kernel_rem_pio2+0x2c0>
 8014768:	9a03      	ldr	r2, [sp, #12]
 801476a:	f04f 0c01 	mov.w	ip, #1
 801476e:	e7d2      	b.n	8014716 <__kernel_rem_pio2+0x29e>
 8014770:	ecbe 5b02 	vldmia	lr!, {d5}
 8014774:	ed38 6b02 	vldmdb	r8!, {d6}
 8014778:	f10c 0c01 	add.w	ip, ip, #1
 801477c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014780:	e7ec      	b.n	801475c <__kernel_rem_pio2+0x2e4>
 8014782:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014786:	e76e      	b.n	8014666 <__kernel_rem_pio2+0x1ee>
	...
 8014794:	3e700000 	.word	0x3e700000
 8014798:	00000000 	.word	0x00000000
 801479c:	41700000 	.word	0x41700000
 80147a0:	0801f000 	.word	0x0801f000
 80147a4:	0801efc0 	.word	0x0801efc0
 80147a8:	4260      	negs	r0, r4
 80147aa:	eeb0 0b48 	vmov.f64	d0, d8
 80147ae:	f000 fad3 	bl	8014d58 <scalbn>
 80147b2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8014990 <__kernel_rem_pio2+0x518>
 80147b6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80147ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147be:	db18      	blt.n	80147f2 <__kernel_rem_pio2+0x37a>
 80147c0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8014998 <__kernel_rem_pio2+0x520>
 80147c4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80147c8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80147cc:	aa06      	add	r2, sp, #24
 80147ce:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80147d2:	eea5 0b46 	vfms.f64	d0, d5, d6
 80147d6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80147da:	f105 0b01 	add.w	fp, r5, #1
 80147de:	ee10 3a10 	vmov	r3, s0
 80147e2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80147e6:	ee17 3a10 	vmov	r3, s14
 80147ea:	3418      	adds	r4, #24
 80147ec:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80147f0:	e740      	b.n	8014674 <__kernel_rem_pio2+0x1fc>
 80147f2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80147f6:	aa06      	add	r2, sp, #24
 80147f8:	ee10 3a10 	vmov	r3, s0
 80147fc:	46ab      	mov	fp, r5
 80147fe:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8014802:	e737      	b.n	8014674 <__kernel_rem_pio2+0x1fc>
 8014804:	ac06      	add	r4, sp, #24
 8014806:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801480a:	9401      	str	r4, [sp, #4]
 801480c:	ee07 4a90 	vmov	s15, r4
 8014810:	3901      	subs	r1, #1
 8014812:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014816:	ee27 7b00 	vmul.f64	d7, d7, d0
 801481a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801481e:	ed20 7b02 	vstmdb	r0!, {d7}
 8014822:	e735      	b.n	8014690 <__kernel_rem_pio2+0x218>
 8014824:	ecbc 5b02 	vldmia	ip!, {d5}
 8014828:	ecb5 6b02 	vldmia	r5!, {d6}
 801482c:	3401      	adds	r4, #1
 801482e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014832:	454c      	cmp	r4, r9
 8014834:	dc01      	bgt.n	801483a <__kernel_rem_pio2+0x3c2>
 8014836:	4284      	cmp	r4, r0
 8014838:	ddf4      	ble.n	8014824 <__kernel_rem_pio2+0x3ac>
 801483a:	ac42      	add	r4, sp, #264	; 0x108
 801483c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8014840:	ed80 7b00 	vstr	d7, [r0]
 8014844:	3901      	subs	r1, #1
 8014846:	e727      	b.n	8014698 <__kernel_rem_pio2+0x220>
 8014848:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801484a:	2902      	cmp	r1, #2
 801484c:	dc0a      	bgt.n	8014864 <__kernel_rem_pio2+0x3ec>
 801484e:	2900      	cmp	r1, #0
 8014850:	dc2c      	bgt.n	80148ac <__kernel_rem_pio2+0x434>
 8014852:	d045      	beq.n	80148e0 <__kernel_rem_pio2+0x468>
 8014854:	f008 0007 	and.w	r0, r8, #7
 8014858:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801485c:	ecbd 8b06 	vpop	{d8-d10}
 8014860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014864:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8014866:	2a03      	cmp	r2, #3
 8014868:	d1f4      	bne.n	8014854 <__kernel_rem_pio2+0x3dc>
 801486a:	aa42      	add	r2, sp, #264	; 0x108
 801486c:	4413      	add	r3, r2
 801486e:	461a      	mov	r2, r3
 8014870:	4619      	mov	r1, r3
 8014872:	4658      	mov	r0, fp
 8014874:	2800      	cmp	r0, #0
 8014876:	f1a1 0108 	sub.w	r1, r1, #8
 801487a:	dc54      	bgt.n	8014926 <__kernel_rem_pio2+0x4ae>
 801487c:	4659      	mov	r1, fp
 801487e:	2901      	cmp	r1, #1
 8014880:	f1a2 0208 	sub.w	r2, r2, #8
 8014884:	dc5f      	bgt.n	8014946 <__kernel_rem_pio2+0x4ce>
 8014886:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80149a0 <__kernel_rem_pio2+0x528>
 801488a:	3308      	adds	r3, #8
 801488c:	f1bb 0f01 	cmp.w	fp, #1
 8014890:	dc69      	bgt.n	8014966 <__kernel_rem_pio2+0x4ee>
 8014892:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8014896:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801489a:	2e00      	cmp	r6, #0
 801489c:	d16a      	bne.n	8014974 <__kernel_rem_pio2+0x4fc>
 801489e:	ed87 5b00 	vstr	d5, [r7]
 80148a2:	ed87 6b02 	vstr	d6, [r7, #8]
 80148a6:	ed87 7b04 	vstr	d7, [r7, #16]
 80148aa:	e7d3      	b.n	8014854 <__kernel_rem_pio2+0x3dc>
 80148ac:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80149a0 <__kernel_rem_pio2+0x528>
 80148b0:	ab42      	add	r3, sp, #264	; 0x108
 80148b2:	441a      	add	r2, r3
 80148b4:	465b      	mov	r3, fp
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	da26      	bge.n	8014908 <__kernel_rem_pio2+0x490>
 80148ba:	b35e      	cbz	r6, 8014914 <__kernel_rem_pio2+0x49c>
 80148bc:	eeb1 7b46 	vneg.f64	d7, d6
 80148c0:	ed87 7b00 	vstr	d7, [r7]
 80148c4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80148c8:	aa44      	add	r2, sp, #272	; 0x110
 80148ca:	2301      	movs	r3, #1
 80148cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80148d0:	459b      	cmp	fp, r3
 80148d2:	da22      	bge.n	801491a <__kernel_rem_pio2+0x4a2>
 80148d4:	b10e      	cbz	r6, 80148da <__kernel_rem_pio2+0x462>
 80148d6:	eeb1 7b47 	vneg.f64	d7, d7
 80148da:	ed87 7b02 	vstr	d7, [r7, #8]
 80148de:	e7b9      	b.n	8014854 <__kernel_rem_pio2+0x3dc>
 80148e0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80149a0 <__kernel_rem_pio2+0x528>
 80148e4:	ab42      	add	r3, sp, #264	; 0x108
 80148e6:	441a      	add	r2, r3
 80148e8:	f1bb 0f00 	cmp.w	fp, #0
 80148ec:	da05      	bge.n	80148fa <__kernel_rem_pio2+0x482>
 80148ee:	b10e      	cbz	r6, 80148f4 <__kernel_rem_pio2+0x47c>
 80148f0:	eeb1 7b47 	vneg.f64	d7, d7
 80148f4:	ed87 7b00 	vstr	d7, [r7]
 80148f8:	e7ac      	b.n	8014854 <__kernel_rem_pio2+0x3dc>
 80148fa:	ed32 6b02 	vldmdb	r2!, {d6}
 80148fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014902:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014906:	e7ef      	b.n	80148e8 <__kernel_rem_pio2+0x470>
 8014908:	ed32 7b02 	vldmdb	r2!, {d7}
 801490c:	3b01      	subs	r3, #1
 801490e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8014912:	e7d0      	b.n	80148b6 <__kernel_rem_pio2+0x43e>
 8014914:	eeb0 7b46 	vmov.f64	d7, d6
 8014918:	e7d2      	b.n	80148c0 <__kernel_rem_pio2+0x448>
 801491a:	ecb2 6b02 	vldmia	r2!, {d6}
 801491e:	3301      	adds	r3, #1
 8014920:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014924:	e7d4      	b.n	80148d0 <__kernel_rem_pio2+0x458>
 8014926:	ed91 7b00 	vldr	d7, [r1]
 801492a:	ed91 5b02 	vldr	d5, [r1, #8]
 801492e:	3801      	subs	r0, #1
 8014930:	ee37 6b05 	vadd.f64	d6, d7, d5
 8014934:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014938:	ed81 6b00 	vstr	d6, [r1]
 801493c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8014940:	ed81 7b02 	vstr	d7, [r1, #8]
 8014944:	e796      	b.n	8014874 <__kernel_rem_pio2+0x3fc>
 8014946:	ed92 7b00 	vldr	d7, [r2]
 801494a:	ed92 5b02 	vldr	d5, [r2, #8]
 801494e:	3901      	subs	r1, #1
 8014950:	ee37 6b05 	vadd.f64	d6, d7, d5
 8014954:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014958:	ed82 6b00 	vstr	d6, [r2]
 801495c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8014960:	ed82 7b02 	vstr	d7, [r2, #8]
 8014964:	e78b      	b.n	801487e <__kernel_rem_pio2+0x406>
 8014966:	ed33 6b02 	vldmdb	r3!, {d6}
 801496a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801496e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014972:	e78b      	b.n	801488c <__kernel_rem_pio2+0x414>
 8014974:	eeb1 5b45 	vneg.f64	d5, d5
 8014978:	eeb1 6b46 	vneg.f64	d6, d6
 801497c:	ed87 5b00 	vstr	d5, [r7]
 8014980:	eeb1 7b47 	vneg.f64	d7, d7
 8014984:	ed87 6b02 	vstr	d6, [r7, #8]
 8014988:	e78d      	b.n	80148a6 <__kernel_rem_pio2+0x42e>
 801498a:	bf00      	nop
 801498c:	f3af 8000 	nop.w
 8014990:	00000000 	.word	0x00000000
 8014994:	41700000 	.word	0x41700000
 8014998:	00000000 	.word	0x00000000
 801499c:	3e700000 	.word	0x3e700000
	...

080149a8 <__kernel_sin>:
 80149a8:	ee10 3a90 	vmov	r3, s1
 80149ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80149b0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80149b4:	da04      	bge.n	80149c0 <__kernel_sin+0x18>
 80149b6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80149ba:	ee17 3a90 	vmov	r3, s15
 80149be:	b35b      	cbz	r3, 8014a18 <__kernel_sin+0x70>
 80149c0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80149c4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80149c8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8014a20 <__kernel_sin+0x78>
 80149cc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014a28 <__kernel_sin+0x80>
 80149d0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80149d4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8014a30 <__kernel_sin+0x88>
 80149d8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80149dc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014a38 <__kernel_sin+0x90>
 80149e0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80149e4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8014a40 <__kernel_sin+0x98>
 80149e8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80149ec:	b930      	cbnz	r0, 80149fc <__kernel_sin+0x54>
 80149ee:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014a48 <__kernel_sin+0xa0>
 80149f2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80149f6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80149fa:	4770      	bx	lr
 80149fc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8014a00:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8014a04:	eea1 7b04 	vfma.f64	d7, d1, d4
 8014a08:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8014a0c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8014a50 <__kernel_sin+0xa8>
 8014a10:	eea5 1b07 	vfma.f64	d1, d5, d7
 8014a14:	ee30 0b41 	vsub.f64	d0, d0, d1
 8014a18:	4770      	bx	lr
 8014a1a:	bf00      	nop
 8014a1c:	f3af 8000 	nop.w
 8014a20:	5acfd57c 	.word	0x5acfd57c
 8014a24:	3de5d93a 	.word	0x3de5d93a
 8014a28:	8a2b9ceb 	.word	0x8a2b9ceb
 8014a2c:	be5ae5e6 	.word	0xbe5ae5e6
 8014a30:	57b1fe7d 	.word	0x57b1fe7d
 8014a34:	3ec71de3 	.word	0x3ec71de3
 8014a38:	19c161d5 	.word	0x19c161d5
 8014a3c:	bf2a01a0 	.word	0xbf2a01a0
 8014a40:	1110f8a6 	.word	0x1110f8a6
 8014a44:	3f811111 	.word	0x3f811111
 8014a48:	55555549 	.word	0x55555549
 8014a4c:	bfc55555 	.word	0xbfc55555
 8014a50:	55555549 	.word	0x55555549
 8014a54:	3fc55555 	.word	0x3fc55555

08014a58 <log>:
 8014a58:	b470      	push	{r4, r5, r6}
 8014a5a:	ee10 1a90 	vmov	r1, s1
 8014a5e:	ee10 2a10 	vmov	r2, s0
 8014a62:	f04f 34ff 	mov.w	r4, #4294967295
 8014a66:	4294      	cmp	r4, r2
 8014a68:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 8014a6c:	4c72      	ldr	r4, [pc, #456]	; (8014c38 <log+0x1e0>)
 8014a6e:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 8014a72:	eb74 0000 	sbcs.w	r0, r4, r0
 8014a76:	ed2d 8b02 	vpush	{d8}
 8014a7a:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8014a7e:	d35c      	bcc.n	8014b3a <log+0xe2>
 8014a80:	4b6e      	ldr	r3, [pc, #440]	; (8014c3c <log+0x1e4>)
 8014a82:	4299      	cmp	r1, r3
 8014a84:	bf08      	it	eq
 8014a86:	2a00      	cmpeq	r2, #0
 8014a88:	f000 80c6 	beq.w	8014c18 <log+0x1c0>
 8014a8c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014a90:	ee30 0b47 	vsub.f64	d0, d0, d7
 8014a94:	4b6a      	ldr	r3, [pc, #424]	; (8014c40 <log+0x1e8>)
 8014a96:	ee20 2b00 	vmul.f64	d2, d0, d0
 8014a9a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8014a9e:	ee20 4b02 	vmul.f64	d4, d0, d2
 8014aa2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8014aa6:	eea6 7b00 	vfma.f64	d7, d6, d0
 8014aaa:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8014aae:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8014ab2:	eea6 7b02 	vfma.f64	d7, d6, d2
 8014ab6:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8014aba:	eea5 6b00 	vfma.f64	d6, d5, d0
 8014abe:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8014ac2:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 8014ac6:	eea5 6b02 	vfma.f64	d6, d5, d2
 8014aca:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 8014ace:	eea3 5b00 	vfma.f64	d5, d3, d0
 8014ad2:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 8014ad6:	eea3 5b02 	vfma.f64	d5, d3, d2
 8014ada:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 8014ade:	eeb0 2b40 	vmov.f64	d2, d0
 8014ae2:	eea3 5b04 	vfma.f64	d5, d3, d4
 8014ae6:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8014aea:	eea5 6b04 	vfma.f64	d6, d5, d4
 8014aee:	eea6 7b04 	vfma.f64	d7, d6, d4
 8014af2:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8014c20 <log+0x1c8>
 8014af6:	eeb0 1b47 	vmov.f64	d1, d7
 8014afa:	eeb0 5b40 	vmov.f64	d5, d0
 8014afe:	eea0 5b06 	vfma.f64	d5, d0, d6
 8014b02:	eea0 5b46 	vfms.f64	d5, d0, d6
 8014b06:	ee30 8b45 	vsub.f64	d8, d0, d5
 8014b0a:	ee25 7b05 	vmul.f64	d7, d5, d5
 8014b0e:	ee30 5b05 	vadd.f64	d5, d0, d5
 8014b12:	eea7 2b03 	vfma.f64	d2, d7, d3
 8014b16:	ee30 6b42 	vsub.f64	d6, d0, d2
 8014b1a:	eea7 6b03 	vfma.f64	d6, d7, d3
 8014b1e:	ee23 3b08 	vmul.f64	d3, d3, d8
 8014b22:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014b26:	eeb0 0b46 	vmov.f64	d0, d6
 8014b2a:	eea1 0b04 	vfma.f64	d0, d1, d4
 8014b2e:	ee32 0b00 	vadd.f64	d0, d2, d0
 8014b32:	ecbd 8b02 	vpop	{d8}
 8014b36:	bc70      	pop	{r4, r5, r6}
 8014b38:	4770      	bx	lr
 8014b3a:	f1a3 0410 	sub.w	r4, r3, #16
 8014b3e:	f647 70df 	movw	r0, #32735	; 0x7fdf
 8014b42:	4284      	cmp	r4, r0
 8014b44:	d923      	bls.n	8014b8e <log+0x136>
 8014b46:	1894      	adds	r4, r2, r2
 8014b48:	eb41 0001 	adc.w	r0, r1, r1
 8014b4c:	4320      	orrs	r0, r4
 8014b4e:	d105      	bne.n	8014b5c <log+0x104>
 8014b50:	ecbd 8b02 	vpop	{d8}
 8014b54:	2001      	movs	r0, #1
 8014b56:	bc70      	pop	{r4, r5, r6}
 8014b58:	f7ff b95e 	b.w	8013e18 <__math_divzero>
 8014b5c:	4839      	ldr	r0, [pc, #228]	; (8014c44 <log+0x1ec>)
 8014b5e:	4281      	cmp	r1, r0
 8014b60:	bf08      	it	eq
 8014b62:	2a00      	cmpeq	r2, #0
 8014b64:	d0e5      	beq.n	8014b32 <log+0xda>
 8014b66:	041a      	lsls	r2, r3, #16
 8014b68:	d404      	bmi.n	8014b74 <log+0x11c>
 8014b6a:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 8014b6e:	ea32 0303 	bics.w	r3, r2, r3
 8014b72:	d104      	bne.n	8014b7e <log+0x126>
 8014b74:	ecbd 8b02 	vpop	{d8}
 8014b78:	bc70      	pop	{r4, r5, r6}
 8014b7a:	f7ff b965 	b.w	8013e48 <__math_invalid>
 8014b7e:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8014c28 <log+0x1d0>
 8014b82:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014b86:	ec53 2b17 	vmov	r2, r3, d7
 8014b8a:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 8014b8e:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8014b92:	f503 13d0 	add.w	r3, r3, #1703936	; 0x1a0000
 8014b96:	0d1e      	lsrs	r6, r3, #20
 8014b98:	1e14      	subs	r4, r2, #0
 8014b9a:	4a29      	ldr	r2, [pc, #164]	; (8014c40 <log+0x1e8>)
 8014b9c:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8014ba0:	f3c3 3046 	ubfx	r0, r3, #13, #7
 8014ba4:	0536      	lsls	r6, r6, #20
 8014ba6:	1b8d      	subs	r5, r1, r6
 8014ba8:	eb02 1100 	add.w	r1, r2, r0, lsl #4
 8014bac:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 8014bb0:	ec45 4b16 	vmov	d6, r4, r5
 8014bb4:	151b      	asrs	r3, r3, #20
 8014bb6:	eea6 5b07 	vfma.f64	d5, d6, d7
 8014bba:	ee07 3a90 	vmov	s15, r3
 8014bbe:	ee25 2b05 	vmul.f64	d2, d5, d5
 8014bc2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8014bc6:	ed92 4b00 	vldr	d4, [r2]
 8014bca:	ee25 1b02 	vmul.f64	d1, d5, d2
 8014bce:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 8014bd2:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014bd6:	ee35 4b07 	vadd.f64	d4, d5, d7
 8014bda:	ee37 0b44 	vsub.f64	d0, d7, d4
 8014bde:	ed92 7b02 	vldr	d7, [r2, #8]
 8014be2:	ee30 0b05 	vadd.f64	d0, d0, d5
 8014be6:	eea7 0b06 	vfma.f64	d0, d7, d6
 8014bea:	ed92 7b04 	vldr	d7, [r2, #16]
 8014bee:	ed92 6b08 	vldr	d6, [r2, #32]
 8014bf2:	eea7 0b02 	vfma.f64	d0, d7, d2
 8014bf6:	ed92 7b06 	vldr	d7, [r2, #24]
 8014bfa:	ed92 3b0c 	vldr	d3, [r2, #48]	; 0x30
 8014bfe:	eea6 7b05 	vfma.f64	d7, d6, d5
 8014c02:	ed92 6b0a 	vldr	d6, [r2, #40]	; 0x28
 8014c06:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014c0a:	eea6 7b02 	vfma.f64	d7, d6, d2
 8014c0e:	eea1 0b07 	vfma.f64	d0, d1, d7
 8014c12:	ee30 0b04 	vadd.f64	d0, d0, d4
 8014c16:	e78c      	b.n	8014b32 <log+0xda>
 8014c18:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8014c30 <log+0x1d8>
 8014c1c:	e789      	b.n	8014b32 <log+0xda>
 8014c1e:	bf00      	nop
 8014c20:	00000000 	.word	0x00000000
 8014c24:	41a00000 	.word	0x41a00000
 8014c28:	00000000 	.word	0x00000000
 8014c2c:	43300000 	.word	0x43300000
	...
 8014c38:	000308ff 	.word	0x000308ff
 8014c3c:	3ff00000 	.word	0x3ff00000
 8014c40:	0801f010 	.word	0x0801f010
 8014c44:	7ff00000 	.word	0x7ff00000

08014c48 <fabs>:
 8014c48:	ec51 0b10 	vmov	r0, r1, d0
 8014c4c:	ee10 2a10 	vmov	r2, s0
 8014c50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014c54:	ec43 2b10 	vmov	d0, r2, r3
 8014c58:	4770      	bx	lr
 8014c5a:	0000      	movs	r0, r0
 8014c5c:	0000      	movs	r0, r0
	...

08014c60 <floor>:
 8014c60:	ee10 1a90 	vmov	r1, s1
 8014c64:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014c68:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8014c6c:	2b13      	cmp	r3, #19
 8014c6e:	b530      	push	{r4, r5, lr}
 8014c70:	ee10 0a10 	vmov	r0, s0
 8014c74:	ee10 5a10 	vmov	r5, s0
 8014c78:	dc31      	bgt.n	8014cde <floor+0x7e>
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	da15      	bge.n	8014caa <floor+0x4a>
 8014c7e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014d38 <floor+0xd8>
 8014c82:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014c86:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c8e:	dd07      	ble.n	8014ca0 <floor+0x40>
 8014c90:	2900      	cmp	r1, #0
 8014c92:	da4e      	bge.n	8014d32 <floor+0xd2>
 8014c94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014c98:	4318      	orrs	r0, r3
 8014c9a:	d001      	beq.n	8014ca0 <floor+0x40>
 8014c9c:	4928      	ldr	r1, [pc, #160]	; (8014d40 <floor+0xe0>)
 8014c9e:	2000      	movs	r0, #0
 8014ca0:	460b      	mov	r3, r1
 8014ca2:	4602      	mov	r2, r0
 8014ca4:	ec43 2b10 	vmov	d0, r2, r3
 8014ca8:	e020      	b.n	8014cec <floor+0x8c>
 8014caa:	4a26      	ldr	r2, [pc, #152]	; (8014d44 <floor+0xe4>)
 8014cac:	411a      	asrs	r2, r3
 8014cae:	ea01 0402 	and.w	r4, r1, r2
 8014cb2:	4304      	orrs	r4, r0
 8014cb4:	d01a      	beq.n	8014cec <floor+0x8c>
 8014cb6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014d38 <floor+0xd8>
 8014cba:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014cbe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cc6:	ddeb      	ble.n	8014ca0 <floor+0x40>
 8014cc8:	2900      	cmp	r1, #0
 8014cca:	bfbe      	ittt	lt
 8014ccc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8014cd0:	fa40 f303 	asrlt.w	r3, r0, r3
 8014cd4:	18c9      	addlt	r1, r1, r3
 8014cd6:	ea21 0102 	bic.w	r1, r1, r2
 8014cda:	2000      	movs	r0, #0
 8014cdc:	e7e0      	b.n	8014ca0 <floor+0x40>
 8014cde:	2b33      	cmp	r3, #51	; 0x33
 8014ce0:	dd05      	ble.n	8014cee <floor+0x8e>
 8014ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014ce6:	d101      	bne.n	8014cec <floor+0x8c>
 8014ce8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8014cec:	bd30      	pop	{r4, r5, pc}
 8014cee:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8014cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8014cf6:	40e2      	lsrs	r2, r4
 8014cf8:	4202      	tst	r2, r0
 8014cfa:	d0f7      	beq.n	8014cec <floor+0x8c>
 8014cfc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8014d38 <floor+0xd8>
 8014d00:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014d04:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d0c:	ddc8      	ble.n	8014ca0 <floor+0x40>
 8014d0e:	2900      	cmp	r1, #0
 8014d10:	da02      	bge.n	8014d18 <floor+0xb8>
 8014d12:	2b14      	cmp	r3, #20
 8014d14:	d103      	bne.n	8014d1e <floor+0xbe>
 8014d16:	3101      	adds	r1, #1
 8014d18:	ea20 0002 	bic.w	r0, r0, r2
 8014d1c:	e7c0      	b.n	8014ca0 <floor+0x40>
 8014d1e:	2401      	movs	r4, #1
 8014d20:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014d24:	fa04 f303 	lsl.w	r3, r4, r3
 8014d28:	4418      	add	r0, r3
 8014d2a:	42a8      	cmp	r0, r5
 8014d2c:	bf38      	it	cc
 8014d2e:	1909      	addcc	r1, r1, r4
 8014d30:	e7f2      	b.n	8014d18 <floor+0xb8>
 8014d32:	2000      	movs	r0, #0
 8014d34:	4601      	mov	r1, r0
 8014d36:	e7b3      	b.n	8014ca0 <floor+0x40>
 8014d38:	8800759c 	.word	0x8800759c
 8014d3c:	7e37e43c 	.word	0x7e37e43c
 8014d40:	bff00000 	.word	0xbff00000
 8014d44:	000fffff 	.word	0x000fffff

08014d48 <nan>:
 8014d48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014d50 <nan+0x8>
 8014d4c:	4770      	bx	lr
 8014d4e:	bf00      	nop
 8014d50:	00000000 	.word	0x00000000
 8014d54:	7ff80000 	.word	0x7ff80000

08014d58 <scalbn>:
 8014d58:	ee10 1a90 	vmov	r1, s1
 8014d5c:	b510      	push	{r4, lr}
 8014d5e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8014d62:	b98c      	cbnz	r4, 8014d88 <scalbn+0x30>
 8014d64:	ee10 3a10 	vmov	r3, s0
 8014d68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014d6c:	430b      	orrs	r3, r1
 8014d6e:	d011      	beq.n	8014d94 <scalbn+0x3c>
 8014d70:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8014e38 <scalbn+0xe0>
 8014d74:	4b3c      	ldr	r3, [pc, #240]	; (8014e68 <scalbn+0x110>)
 8014d76:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014d7a:	4298      	cmp	r0, r3
 8014d7c:	da0b      	bge.n	8014d96 <scalbn+0x3e>
 8014d7e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8014e40 <scalbn+0xe8>
 8014d82:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014d86:	e005      	b.n	8014d94 <scalbn+0x3c>
 8014d88:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8014d8c:	429c      	cmp	r4, r3
 8014d8e:	d107      	bne.n	8014da0 <scalbn+0x48>
 8014d90:	ee30 0b00 	vadd.f64	d0, d0, d0
 8014d94:	bd10      	pop	{r4, pc}
 8014d96:	ee10 1a90 	vmov	r1, s1
 8014d9a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8014d9e:	3c36      	subs	r4, #54	; 0x36
 8014da0:	4404      	add	r4, r0
 8014da2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8014da6:	429c      	cmp	r4, r3
 8014da8:	dd0d      	ble.n	8014dc6 <scalbn+0x6e>
 8014daa:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8014e48 <scalbn+0xf0>
 8014dae:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8014e50 <scalbn+0xf8>
 8014db2:	eeb0 6b47 	vmov.f64	d6, d7
 8014db6:	ee10 3a90 	vmov	r3, s1
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	fe27 7b05 	vselge.f64	d7, d7, d5
 8014dc0:	ee27 0b06 	vmul.f64	d0, d7, d6
 8014dc4:	e7e6      	b.n	8014d94 <scalbn+0x3c>
 8014dc6:	2c00      	cmp	r4, #0
 8014dc8:	dd0a      	ble.n	8014de0 <scalbn+0x88>
 8014dca:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8014dce:	ec53 2b10 	vmov	r2, r3, d0
 8014dd2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8014dd6:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8014dda:	ec43 2b10 	vmov	d0, r2, r3
 8014dde:	e7d9      	b.n	8014d94 <scalbn+0x3c>
 8014de0:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8014de4:	da19      	bge.n	8014e1a <scalbn+0xc2>
 8014de6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014dea:	4298      	cmp	r0, r3
 8014dec:	ee10 3a90 	vmov	r3, s1
 8014df0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014df4:	dd09      	ble.n	8014e0a <scalbn+0xb2>
 8014df6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8014e48 <scalbn+0xf0>
 8014dfa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8014e50 <scalbn+0xf8>
 8014dfe:	eeb0 7b40 	vmov.f64	d7, d0
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8014e08:	e7bb      	b.n	8014d82 <scalbn+0x2a>
 8014e0a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8014e40 <scalbn+0xe8>
 8014e0e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8014e58 <scalbn+0x100>
 8014e12:	eeb0 7b40 	vmov.f64	d7, d0
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	e7f4      	b.n	8014e04 <scalbn+0xac>
 8014e1a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8014e1e:	ec53 2b10 	vmov	r2, r3, d0
 8014e22:	3436      	adds	r4, #54	; 0x36
 8014e24:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8014e28:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8014e2c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8014e60 <scalbn+0x108>
 8014e30:	ec43 2b10 	vmov	d0, r2, r3
 8014e34:	e7a5      	b.n	8014d82 <scalbn+0x2a>
 8014e36:	bf00      	nop
 8014e38:	00000000 	.word	0x00000000
 8014e3c:	43500000 	.word	0x43500000
 8014e40:	c2f8f359 	.word	0xc2f8f359
 8014e44:	01a56e1f 	.word	0x01a56e1f
 8014e48:	8800759c 	.word	0x8800759c
 8014e4c:	7e37e43c 	.word	0x7e37e43c
 8014e50:	8800759c 	.word	0x8800759c
 8014e54:	fe37e43c 	.word	0xfe37e43c
 8014e58:	c2f8f359 	.word	0xc2f8f359
 8014e5c:	81a56e1f 	.word	0x81a56e1f
 8014e60:	00000000 	.word	0x00000000
 8014e64:	3c900000 	.word	0x3c900000
 8014e68:	ffff3cb0 	.word	0xffff3cb0

08014e6c <_init>:
 8014e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e6e:	bf00      	nop
 8014e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e72:	bc08      	pop	{r3}
 8014e74:	469e      	mov	lr, r3
 8014e76:	4770      	bx	lr

08014e78 <_fini>:
 8014e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e7a:	bf00      	nop
 8014e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e7e:	bc08      	pop	{r3}
 8014e80:	469e      	mov	lr, r3
 8014e82:	4770      	bx	lr
